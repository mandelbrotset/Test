=========================================================
Revision: /tmp/downloads/atmosphere/revisions/rev_0f06a_fcb03/rev_0f06a-fcb03.revisions
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: 1d25c6983c4a13a13a2d1f5bbe5fc8d236a90bf3
Parent1 SHA-1: 0f06a3ec35a556b2bb7294e929c43d1f02bd0aa6
Parent2 SHA-1: fcb036775fa885b65a00f3a609e69cef09e7900e
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: smallMethod
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ <T, U extends T> void nullFieldInjectionFor(Field field, U instance, Class<T> clazz); ##FSTMerge## ##FSTMerge## <T, U extends T> void nullFieldInjectionFor(Field field, U instance, Class<T> clazz);
File path: /tmp/downloads/atmosphere/revisions/rev_0f06a_fcb03/rev_0f06a-fcb03/modules/cpr/src/main/java/org/atmosphere/inject/InjectionListener.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 1d25c6983c4a13a13a2d1f5bbe5fc8d236a90bf3
Parent1 SHA-1: 0f06a3ec35a556b2bb7294e929c43d1f02bd0aa6
Parent2 SHA-1: fcb036775fa885b65a00f3a609e69cef09e7900e
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void analytics() {
        if (!config.getInitParameter(ApplicationConfig.ANALYTICS, true)) return;

        final String container = getServletContext().getServerInfo();
        Thread t = new Thread() {
            public void run() {
                try {
                    logger.debug("Retrieving Atmosphere's latest version from http://async-io.org/version.html");
                    HttpURLConnection urlConnection = (HttpURLConnection)
                            URI.create("http://async-io.org/version.html").toURL().openConnection();
                    urlConnection.setRequestProperty("User-Agent", "Mozilla/5.0");
                    urlConnection.setRequestProperty("Connection", "keep-alive");
                    urlConnection.setRequestProperty("Cache-Control", "max-age=0");
                    urlConnection.setRequestProperty("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
                    urlConnection.setRequestProperty("Accept-Language", "en-US,en;q=0.8");
                    urlConnection.setRequestProperty("Accept-Charset", "ISO-8859-1,utf-8;q=0.7,*;q=0.3");
                    urlConnection.setRequestProperty("If-Modified-Since", "ISO-8859-1,utf-8;q=0.7,*;q=0.3");
                    urlConnection.setInstanceFollowRedirects(true);

                    BufferedReader in = new BufferedReader(new InputStreamReader(
                            urlConnection.getInputStream()));

                    String inputLine;
                    String newVersion = Version.getRawVersion();
                    String clientVersion = null;
                    String nextMajorRelease = null;
                    boolean nextAvailable = false;
                    if (newVersion.indexOf("SNAPSHOT") == -1) {
                        try {
                            while ((inputLine = in.readLine().trim()) != null) {
                                if (inputLine.startsWith("ATMO23_VERSION=")) {
                                    newVersion = inputLine.substring("ATMO23_VERSION=".length());
                                } else if (inputLine.startsWith("CLIENT3_VERSION=")) {
                                    clientVersion = inputLine.substring("CLIENT3_VERSION=".length());
                                    break;
                                } else if (inputLine.startsWith("ATMO_RELEASE_VERSION=")) {
                                    nextMajorRelease = inputLine.substring("ATMO_RELEASE_VERSION=".length());
                                    if (nextMajorRelease.compareTo(Version.getRawVersion()) > 0
                                            && nextMajorRelease.toLowerCase().indexOf("rc") == -1
                                            && nextMajorRelease.toLowerCase().indexOf("beta") == -1) {
                                        nextAvailable = true;
                                    }
                                }
                            }
                        } finally {
                            if (clientVersion != null) {
                                logger.info("Latest version of Atmosphere's JavaScript Client {}", clientVersion);
                            }
                            if (newVersion.compareTo(Version.getRawVersion()) > 0) {
                                if (nextAvailable) {
                                    logger.info("\n\n\tAtmosphere Framework Updates\n\tMinor available (bugs fixes): {}\n\tMajor available (new features): {}", newVersion, nextMajorRelease);
                                } else {
                                    logger.info("\n\n\tAtmosphere Framework Updates:\n\tMinor Update available (bugs fixes): {}", newVersion);
                                }
                            } else if (nextAvailable) {
                                logger.info("\n\n\tAtmosphere Framework Updates:\n\tMajor Update available (new features): {}", nextMajorRelease);
                            }
                            try {
                                in.close();
                            } catch (IOException ex) {
                            }
                            urlConnection.disconnect();
                        }
                    }

                    JGoogleAnalyticsTracker tracker = new JGoogleAnalyticsTracker(ModuleDetection.detect(), Version.getRawVersion(), "UA-31990725-1");
                    tracker.trackSynchronously(new FocusPoint(container, new FocusPoint("Atmosphere")));

                } catch (Throwable e) {
                }
            }
        };
        t.setDaemon(true);
        t.start();
    } ##FSTMerge## protected void analytics() {
        if (!config.getInitParameter(ApplicationConfig.ANALYTICS, true)) return;

        final String container = getServletContext().getServerInfo();
        Thread t = new Thread() {
            public void run() {
                try {
                    logger.debug("Retrieving Atmosphere's latest version from http://async-io.org/version.html");
                    HttpURLConnection urlConnection = (HttpURLConnection)
                            URI.create("http://async-io.org/version.html").toURL().openConnection();
                    urlConnection.setRequestProperty("User-Agent", "Mozilla/5.0");
                    urlConnection.setRequestProperty("Connection", "keep-alive");
                    urlConnection.setRequestProperty("Cache-Control", "max-age=0");
                    urlConnection.setRequestProperty("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
                    urlConnection.setRequestProperty("Accept-Language", "en-US,en;q=0.8");
                    urlConnection.setRequestProperty("Accept-Charset", "ISO-8859-1,utf-8;q=0.7,*;q=0.3");
                    urlConnection.setRequestProperty("If-Modified-Since", "ISO-8859-1,utf-8;q=0.7,*;q=0.3");
                    urlConnection.setInstanceFollowRedirects(true);

                    BufferedReader in = new BufferedReader(new InputStreamReader(
                            urlConnection.getInputStream()));

                    String inputLine;
                    String newVersion = Version.getRawVersion();
                    String clientVersion = "2.2.11";
                    String nextMajorRelease = null;
                    boolean nextAvailable = false;
                    if (newVersion.indexOf("SNAPSHOT") == -1) {
                        try {
                            while ((inputLine = in.readLine().trim()) != null) {
                                if (inputLine.startsWith("ATMO23_VERSION=")) {
                                    newVersion = inputLine.substring("ATMO23_VERSION=".length());
                                } else if (inputLine.startsWith("CLIENT3_VERSION=")) {
                                    clientVersion = inputLine.substring("CLIENT3_VERSION=".length());
                                    break;
                                } else if (inputLine.startsWith("ATMO_RELEASE_VERSION=")) {
                                    nextMajorRelease = inputLine.substring("ATMO_RELEASE_VERSION=".length());
                                    if (nextMajorRelease.compareTo(Version.getRawVersion()) > 0
                                            && nextMajorRelease.toLowerCase().indexOf("rc") == -1
                                            && nextMajorRelease.toLowerCase().indexOf("beta") == -1) {
                                        nextAvailable = true;
                                    }
                                }
                            }
                        } finally {
                            logger.info("Latest version of Atmosphere's JavaScript Client {}", clientVersion);
                            if (newVersion.compareTo(Version.getRawVersion()) > 0) {
                                if (nextAvailable) {
                                    logger.info("\n\n\tAtmosphere Framework Updates\n\tMinor available (bugs fixes): {}\n\tMajor available (new features): {}", newVersion, nextMajorRelease);
                                } else {
                                    logger.info("\n\n\tAtmosphere Framework Updates:\n\tMinor Update available (bugs fixes): {}", newVersion);
                                }
                            } else if (nextAvailable) {
                                logger.info("\n\n\tAtmosphere Framework Updates:\n\tMajor Update available (new features): {}", nextMajorRelease);
                            }
                            try {
                                in.close();
                            } catch (IOException ex) {
                            }
                            urlConnection.disconnect();
                        }
                    }

                    JGoogleAnalyticsTracker tracker = new JGoogleAnalyticsTracker(ModuleDetection.detect(), Version.getRawVersion(), "UA-31990725-1");
                    tracker.trackSynchronously(new FocusPoint(container, new FocusPoint("Atmosphere")));

                } catch (Throwable e) {
                }
            }
        };
        t.setDaemon(true);
        t.start();
    } ##FSTMerge## protected void analytics() {
        if (!config.getInitParameter(ApplicationConfig.ANALYTICS, true)) return;

        final String container = getServletContext().getServerInfo();
        Thread t = new Thread() {
            public void run() {
                try {
                    logger.debug("Retrieving Atmosphere's latest version from http://async-io.org/version.html");
                    HttpURLConnection urlConnection = (HttpURLConnection)
                            URI.create("http://async-io.org/version.html").toURL().openConnection();
                    urlConnection.setRequestProperty("User-Agent", "Mozilla/5.0");
                    urlConnection.setRequestProperty("Connection", "keep-alive");
                    urlConnection.setRequestProperty("Cache-Control", "max-age=0");
                    urlConnection.setRequestProperty("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
                    urlConnection.setRequestProperty("Accept-Language", "en-US,en;q=0.8");
                    urlConnection.setRequestProperty("Accept-Charset", "ISO-8859-1,utf-8;q=0.7,*;q=0.3");
                    urlConnection.setRequestProperty("If-Modified-Since", "ISO-8859-1,utf-8;q=0.7,*;q=0.3");
                    urlConnection.setInstanceFollowRedirects(true);

                    BufferedReader in = new BufferedReader(new InputStreamReader(
                            urlConnection.getInputStream()));

                    String inputLine;
                    String newVersion = Version.getRawVersion();
                    String clientVersion = "2.2.11";
                    String nextMajorRelease = null;
                    boolean nextAvailable = false;
                    if (newVersion.indexOf("SNAPSHOT") == -1) {
                        try {
                            while ((inputLine = in.readLine().trim()) != null) {
                                if (inputLine.startsWith("ATMO23_VERSION=")) {
                                    newVersion = inputLine.substring("ATMO23_VERSION=".length());
                                } else if (inputLine.startsWith("CLIENT3_VERSION=")) {
                                    clientVersion = inputLine.substring("CLIENT3_VERSION=".length());
                                    break;
                                } else if (inputLine.startsWith("ATMO_RELEASE_VERSION=")) {
                                    nextMajorRelease = inputLine.substring("ATMO_RELEASE_VERSION=".length());
                                    if (nextMajorRelease.compareTo(Version.getRawVersion()) > 0
                                            && nextMajorRelease.toLowerCase().indexOf("rc") == -1
                                            && nextMajorRelease.toLowerCase().indexOf("beta") == -1) {
                                        nextAvailable = true;
                                    }
                                }
                            }
                        } finally {
                            logger.info("Latest version of Atmosphere's JavaScript Client {}", clientVersion);
                            if (newVersion.compareTo(Version.getRawVersion()) > 0) {
                                if (nextAvailable) {
                                    logger.info("\n\n\tAtmosphere Framework Updates\n\tMinor available (bugs fixes): {}\n\tMajor available (new features): {}", newVersion, nextMajorRelease);
                                } else {
                                    logger.info("\n\n\tAtmosphere Framework Updates:\n\tMinor Update available (bugs fixes): {}", newVersion);
                                }
                            } else if (nextAvailable) {
                                logger.info("\n\n\tAtmosphere Framework Updates:\n\tMajor Update available (new features): {}", nextMajorRelease);
                            }
                            try {
                                in.close();
                            } catch (IOException ex) {
                            }
                            urlConnection.disconnect();
                        }
                    }

                    JGoogleAnalyticsTracker tracker = new JGoogleAnalyticsTracker(ModuleDetection.detect(), Version.getRawVersion(), "UA-31990725-1");
                    tracker.trackSynchronously(new FocusPoint(container, new FocusPoint("Atmosphere")));

                } catch (Throwable e) {
                }
            }
        };
        t.setDaemon(true);
        t.start();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_0f06a_fcb03/rev_0f06a-fcb03/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java

==================================================================================================================
Revision: /tmp/downloads/atmosphere/revisions/rev_1a6f2_39eb0/rev_1a6f2-39eb0.revisions
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 48a0c5212a94377f0cf1053df1450b74dd77f28e
Parent1 SHA-1: 1a6f2a929e407634fb113edbbbd529f7e04a2c6e
Parent2 SHA-1: 39eb04ad68b235cbef0d1bff012fcdfafc688db7
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public AsyncSupport newCometSupport(final Class<? extends AsyncSupport> targetClass) {
        try {
            return (AsyncSupport) targetClass.getDeclaredConstructor(new Class[]{AtmosphereConfig.class})
                    .newInstance(config);
        } catch (final Exception e) {
            logger.warn("Failed to create AsyncSupport class: {}, error: {}", targetClass, e);

            Throwable cause = e.getCause();
            if (cause != null) {
                logger.error("Real error: {}", cause.getMessage(), cause);
            }
            return null;
        }
    } ##FSTMerge## public AsyncSupport newCometSupport(final Class<? extends AsyncSupport> targetClass) {
        try {
            return (AsyncSupport) targetClass.getDeclaredConstructor(new Class[]{AtmosphereConfig.class})
                    .newInstance(config);
        } catch (final Exception e) {
            logger.warn("Failed to create AsyncSupport class: {}, error: {}", targetClass, e);
            Throwable cause = e.getCause();
            if (cause != null) {
                logger.error("Real error: {}, error: {}", targetClass, cause);
            }
            return null;
        }
    } ##FSTMerge## public AsyncSupport newCometSupport(final Class<? extends AsyncSupport> targetClass) {
        try {
            return (AsyncSupport) targetClass.getDeclaredConstructor(new Class[]{AtmosphereConfig.class})
                    .newInstance(config);
        } catch (final Exception e) {
            logger.warn("Failed to create AsyncSupport class: {}, error: {}", targetClass, e);
            Throwable cause = e.getCause();
            if (cause != null) {
                logger.error("Real error: {}, error: {}", cause.getMessage(), cause);
            }
            return null;
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_1a6f2_39eb0/rev_1a6f2-39eb0/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 48a0c5212a94377f0cf1053df1450b74dd77f28e
Parent1 SHA-1: 1a6f2a929e407634fb113edbbbd529f7e04a2c6e
Parent2 SHA-1: 39eb04ad68b235cbef0d1bff012fcdfafc688db7
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public AsyncSupport newCometSupport(final String targetClassFQN) {
        try {
            ClassLoader cl = Thread.currentThread().getContextClassLoader();
            return (AsyncSupport) cl.loadClass(targetClassFQN)
                    .getDeclaredConstructor(new Class[]{AtmosphereConfig.class}).newInstance(config);
        } catch (final Exception e) {
            logger.error("Failed to create AsyncSupport class: {}, error: {}", targetClassFQN, e);
            Throwable cause = e.getCause();
            if (cause != null) {
                logger.error("Real error: {}", cause.getMessage(), cause);
            }
            throw new IllegalArgumentException("Unable to create " + targetClassFQN, e);
        }
    } ##FSTMerge## public AsyncSupport newCometSupport(final String targetClassFQN) {
        try {
            ClassLoader cl = Thread.currentThread().getContextClassLoader();
            return (AsyncSupport) cl.loadClass(targetClassFQN)
                    .getDeclaredConstructor(new Class[]{AtmosphereConfig.class}).newInstance(config);
        } catch (final Exception e) {
            logger.error("Failed to create AsyncSupport class: {}, error: {}", targetClassFQN, e);
            Throwable cause = e.getCause();
            if (cause != null) {
                logger.error("Real error: {}, error: {}", targetClassFQN, cause);
            }
            throw new IllegalArgumentException("Unable to create " + targetClassFQN, e);
        }
    } ##FSTMerge## public AsyncSupport newCometSupport(final String targetClassFQN) {
        try {
            ClassLoader cl = Thread.currentThread().getContextClassLoader();
            return (AsyncSupport) cl.loadClass(targetClassFQN)
                    .getDeclaredConstructor(new Class[]{AtmosphereConfig.class}).newInstance(config);
        } catch (final Exception e) {
            logger.error("Failed to create AsyncSupport class: {}, error: {}", targetClassFQN, e);
            Throwable cause = e.getCause();
            if (cause != null) {
                logger.error("Real error: {}, error: {}", cause.getMessage(), cause);
            }
            throw new IllegalArgumentException("Unable to create " + targetClassFQN, e);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_1a6f2_39eb0/rev_1a6f2-39eb0/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java

==================================================================================================================
Revision: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063.revisions
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    protected void doWrite(List<? extends Serializable> messages) throws IOException {
        for (Serializable message : messages) {
            CharSequence string;
            if (message instanceof CharSequence) {
                string = (CharSequence) message;
                if (this.shouldEscapeText())
                    string = escape(string);
                if (string == message) {
                    writer.append('|');
                } else {
                    writer.append(']');
                }
            } else {
                string = serialize(message);
            }

            writer.append(string).append('\n');
        }
    } ##FSTMerge## @Override
    protected void doWrite(List<? extends Serializable> messages) throws IOException {
        for (Serializable message : messages) {
            CharSequence string;
            if (message instanceof CharSequence) {
                string = escape((CharSequence) message);
                if (string == message) {
                    writer.append('|');
                } else {
                    writer.append(']');
                }
            } else {
                string = serialize(message);
            }

            writer.append(string).append('\n');
        }
    } ##FSTMerge## @Override
    protected void doWrite(List<? extends Serializable> messages) throws IOException, SerializationException {
        for (Serializable message : messages) {
            CharSequence string;
            if (message instanceof CharSequence) {
                string = escape((CharSequence) message);
                if (string == message) {
                    writer.append('|');
                } else {
                    writer.append(']');
                }
            } else {
                string = serialize(message);
            }

            writer.append(string).append('\n');
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/impl/StreamingProtocolResponseWriter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    protected void doWrite(List<? extends Serializable> messages) throws IOException {
        for (Serializable message : messages) {
            CharSequence string;
            char event;
            if (message instanceof CharSequence) {
                string = (CharSequence) message;
                if (this.shouldEscapeText())
                    string = HTTPRequestResponseWriter.escape(string);
                event = 's';
            } else {
                string = serialize(message);
                event = 'o';
            }
            writer.append("Event: ").append(event).append('\n');
            writer.append("data: ").append(string).append("\n\n");
        }
    } ##FSTMerge## @Override
    protected void doWrite(List<? extends Serializable> messages) throws IOException {
        for (Serializable message : messages) {
            CharSequence string;
            char event;
            if (message instanceof CharSequence) {
                string = HTTPRequestResponseWriter.escape((CharSequence) message);
                event = 's';
            } else {
                string = serialize(message);
                event = 'o';
            }
            writer.append("Event: ").append(event).append('\n');
            writer.append("data: ").append(string).append("\n\n");
        }
    } ##FSTMerge## @Override
    protected void doWrite(List<? extends Serializable> messages) throws IOException, SerializationException {
        for (Serializable message : messages) {
            CharSequence string;
            char event;
            if (message instanceof CharSequence) {
                string = HTTPRequestResponseWriter.escape((CharSequence) message);
                event = 's';
            } else {
                string = serialize(message);
                event = 'o';
            }
            writer.append("Event: ").append(event).append('\n');
            writer.append("data: ").append(string).append("\n\n");
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/impl/OperaEventSourceResponseWriter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private CharSequence escapeString(CharSequence string) {
        if (!this.shouldEscapeText())
            return string;

        int len = (string != null) ? string.length() : 0;
        int i = 0;
        loop:
        while (i < len) {
            char ch = string.charAt(i);
            switch (ch) {
                case '\'':
                case '\\':
                case '/':
                case '\b':
                case '\f':
                case '\n':
                case '\r':
                    break loop;
            }
            i++;
        }

        if (i == len)
            return string;

        StringBuilder str = new StringBuilder(string.length() * 2);
        str.append(string, 0, i);
        while (i < len) {
            char ch = string.charAt(i);
            switch (ch) {
                case '\'':
                    str.append("\\\'");
                    break;
                case '\\':
                    str.append("\\\\");
                    break;
                case '/':
                    str.append("\\/");
                    break;
                case '\b':
                    str.append("\\b");
                    break;
                case '\f':
                    str.append("\\f");
                    break;
                case '\n':
                    str.append("\\n");
                    break;
                case '\r':
                    str.append("\\r");
                    break;
                case '\t':
                    str.append("\\t");
                    break;
                default:
                    str.append(ch);
            }
            i++;
        }
        return str;
    } ##FSTMerge## private static CharSequence escapeString(CharSequence string) {
        int length = (string != null) ? string.length() : 0;
        int i = 0;
        loop:
        while (i < length) {
            char ch = string.charAt(i);
            switch (ch) {
                case '\'':
                case '\\':
                case '/':
                case '\b':
                case '\f':
                case '\n':
                case '\r':
                    break loop;
            }
            i++;
        }

        if (i == length)
            return string;

        StringBuilder str = new StringBuilder(string.length() * 2);
        str.append(string, 0, i);
        while (i < length) {
            char ch = string.charAt(i);
            switch (ch) {
                case '\'':
                    str.append("\\\'");
                    break;
                case '\\':
                    str.append("\\\\");
                    break;
                case '/':
                    str.append("\\/");
                    break;
                case '\b':
                    str.append("\\b");
                    break;
                case '\f':
                    str.append("\\f");
                    break;
                case '\n':
                    str.append("\\n");
                    break;
                case '\r':
                    str.append("\\r");
                    break;
                case '\t':
                    str.append("\\t");
                    break;
                default:
                    str.append(ch);
            }
            i++;
        }
        return str;
    } ##FSTMerge## private static CharSequence escapeString(CharSequence string) {
        int length = (string != null) ? string.length() : 0;
        int i = 0;
        loop:
        while (i < length) {
            char ch = string.charAt(i);
            switch (ch) {
                case '\'':
                case '\\':
                case '/':
                case '\b':
                case '\f':
                case '\n':
                case '\r':
                    break loop;
            }
            i++;
        }

        if (i == length)
            return string;

        StringBuilder str = new StringBuilder(string.length() * 2);
        str.append(string, 0, i);
        while (i < length) {
            char ch = string.charAt(i);
            switch (ch) {
                case '\'':
                    str.append("\\\'");
                    break;
                case '\\':
                    str.append("\\\\");
                    break;
                case '/':
                    str.append("\\/");
                    break;
                case '\b':
                    str.append("\\b");
                    break;
                case '\f':
                    str.append("\\f");
                    break;
                case '\n':
                    str.append("\\n");
                    break;
                case '\r':
                    str.append("\\r");
                    break;
                case '\t':
                    str.append("\\t");
                    break;
                default:
                    str.append(ch);
            }
            i++;
        }
        return str;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/impl/IFrameResponseWriter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private CharSequence escapeObject(CharSequence string) {
        if (!this.shouldEscapeText())
            return string;

        int len = (string != null) ? string.length() : 0;
        int i = 0;
        loop:
        while (i < len) {
            char ch = string.charAt(i);
            switch (ch) {
                case '\'':
                case '\\':
                case '/':
                    break loop;
            }
            i++;
        }

        if (i == len)
            return string;

        StringBuilder str = new StringBuilder(string.length() * 2);
        str.append(string, 0, i);
        while (i < len) {
            char ch = string.charAt(i);
            switch (ch) {
                case '\'':
                    str.append("\\\'");
                    break;
                case '\\':
                    str.append("\\\\");
                    break;
                case '/':
                    str.append("\\/");
                    break;
                default:
                    str.append(ch);
            }
            i++;
        }
        return str;
    } ##FSTMerge## private static CharSequence escapeObject(CharSequence string) {
        int length = (string != null) ? string.length() : 0;
        int i = 0;
        loop:
        while (i < length) {
            char ch = string.charAt(i);
            switch (ch) {
                case '\'':
                case '\\':
                case '/':
                    break loop;
            }
            i++;
        }

        if (i == length)
            return string;

        StringBuilder str = new StringBuilder(string.length() * 2);
        str.append(string, 0, i);
        while (i < length) {
            char ch = string.charAt(i);
            switch (ch) {
                case '\'':
                    str.append("\\\'");
                    break;
                case '\\':
                    str.append("\\\\");
                    break;
                case '/':
                    str.append("\\/");
                    break;
                default:
                    str.append(ch);
            }
            i++;
        }
        return str;
    } ##FSTMerge## private static CharSequence escapeObject(CharSequence string) {
        int length = (string != null) ? string.length() : 0;
        int i = 0;
        loop:
        while (i < length) {
            char ch = string.charAt(i);
            switch (ch) {
                case '\'':
                case '\\':
                case '/':
                    break loop;
            }
            i++;
        }

        if (i == length)
            return string;

        StringBuilder str = new StringBuilder(string.length() * 2);
        str.append(string, 0, i);
        while (i < length) {
            char ch = string.charAt(i);
            switch (ch) {
                case '\'':
                    str.append("\\\'");
                    break;
                case '\\':
                    str.append("\\\\");
                    break;
                case '/':
                    str.append("\\/");
                    break;
                default:
                    str.append(ch);
            }
            i++;
        }
        return str;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/impl/IFrameResponseWriter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected String serialize(Object message) throws NotSerializableException, UnsupportedEncodingException {
        try {
            switch (getSerializationMode()) {
            case RPC:
                ServerSerializationStreamWriter streamWriter = new ServerSerializationStreamWriter(serializationPolicy);
                streamWriter.prepareToWrite();
                streamWriter.writeObject(message);
                return streamWriter.toString();

            case JSON:
                throw new UnsupportedOperationException("Not implemented yet");

            default:
            case PLAIN:
                return message.toString();
            }
        } catch (SerializationException e) {
            throw new NotSerializableException("Unable to serialize object, message: " + e.getMessage());
        }
    } ##FSTMerge## protected String serialize(Object message) throws NotSerializableException, UnsupportedEncodingException {
        try {
            switch (getSerializationMode()) {
            case RPC:
                ServerSerializationStreamWriter streamWriter = new ServerSerializationStreamWriter(serializationPolicy);
                streamWriter.prepareToWrite();
                streamWriter.writeObject(message);
                return streamWriter.toString();
                
            case JSON:
                throw new UnsupportedOperationException("Not implemented yet");
                
            default:
            case PLAIN:
                return message.toString();
            }
        } catch (SerializationException e) {
            throw new NotSerializableException("Unable to serialize object, message: " + e.getMessage());
        }
    } ##FSTMerge## protected String serialize(Object message) throws SerializationException {
        switch (getSerializationMode()) {
        case RPC:
            return gwtRpc.serialize(message);

        case JSON:
            return getJsonSerializer().serialize(message);

        default:
        case PLAIN:
            return message.toString();
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/impl/GwtResponseWriterImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public GwtAtmosphereResourceImpl(AtmosphereResource resource,
                                     AtmosphereGwtHandler servlet, int heartBeatInterval) throws IOException {
        this(resource, servlet, heartBeatInterval, true);
    } ##FSTMerge## public GwtAtmosphereResourceImpl(AtmosphereResource resource,
                                     AtmosphereGwtHandler servlet, int heartBeatInterval) throws IOException {
        this.atmosphereHandler = servlet;
        this.atmResource = resource;
        this.heartBeatInterval = heartBeatInterval;
        this.writer = createResponseWriter();
        resource.getRequest().setAttribute(GwtAtmosphereResource.class.getName(), this);
    } ##FSTMerge## public GwtAtmosphereResourceImpl(AtmosphereResource resource,
                                     AtmosphereGwtHandler servlet, int heartBeatInterval) throws IOException {
        this.atmosphereHandler = servlet;
        this.atmResource = resource;
        this.heartBeatInterval = heartBeatInterval;
        this.writer = createResponseWriter();
        resource.getRequest().setAttribute(GwtAtmosphereResource.class.getName(), this);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/impl/GwtAtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void init(ServletConfig servletConfig) throws ServletException {
        executorService = Executors.newCachedThreadPool();
        String heartbeat = servletConfig.getInitParameter("heartbeat");
        context = servletConfig.getServletContext();
        if (heartbeat != null) {
            this.heartbeat = Integer.parseInt(heartbeat);
        }

        String escText = servletConfig.getInitParameter("escapeText");
        if (escText != null) {
            this.escapeText = Boolean.valueOf(escText);
        }
    } ##FSTMerge## @Override
    public void init(ServletConfig servletConfig) throws ServletException {
        executorService = Executors.newCachedThreadPool();
        String heartbeat = servletConfig.getInitParameter("heartbeat");
        context = servletConfig.getServletContext();
        if (heartbeat != null) {
            this.heartbeat = Integer.parseInt(heartbeat);
        }
    } ##FSTMerge## @Override
    public void init(ServletConfig servletConfig) throws ServletException {
        executorService = Executors.newCachedThreadPool();
        String heartbeat = servletConfig.getInitParameter("heartbeat");
        context = servletConfig.getServletContext();
        if (heartbeat != null) {
            this.heartbeat = Integer.parseInt(heartbeat);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onRequest(AtmosphereResource resource) throws IOException {

        HttpServletRequest request = resource.getRequest();

        String servertransport = request.getParameter("servertransport");
        Object webSocketSubProtocol = resource.getRequest().getAttribute(FrameworkConfig.WEBSOCKET_SUBPROTOCOL);
        if ("rpcprotocol".equals(servertransport)) {

            Integer connectionID = Integer.parseInt(request.getParameter("connectionID"));
            doServerMessage(request, resource.getResponse(), connectionID);
            return;

        } else if (webSocketSubProtocol != null
                  && webSocketSubProtocol.equals(FrameworkConfig.SIMPLE_HTTP_OVER_WEBSOCKET)) {

            Integer connectionID = (Integer) request.getAttribute(AtmosphereGwtHandler.class.getName()
                                        + ".connectionID");
            doServerMessage(request, resource.getResponse(), connectionID);
            return;
        }

        try {
            int requestHeartbeat = getRequestedHeartbeat(request);
            boolean requestEscapeText = getRequestedEscapeOfText(request);

            GwtAtmosphereResourceImpl resourceWrapper =
                    new GwtAtmosphereResourceImpl(resource, this, requestHeartbeat, requestEscapeText);
            request.setAttribute(AtmosphereGwtHandler.class.getName() + ".connectionID",
                    (Integer) resourceWrapper.getConnectionID());
            doCometImpl(resourceWrapper);
        } catch (IOException e) {
//            GwtAtmosphereResourceImpl resource = new GwtAtmosphereResourceImpl(atm, this, -1);
            logger.error("Unable to initiated comet" + e.getMessage(), e);
//			resource.getResponseWriter().sendError(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());
        }
    } ##FSTMerge## @Override
    public void onRequest(AtmosphereResource resource) throws IOException {

        HttpServletRequest request = resource.getRequest();

        String servertransport = request.getParameter("servertransport");
        Object webSocketSubProtocol = resource.getRequest().getAttribute(FrameworkConfig.WEBSOCKET_SUBPROTOCOL);
        if ("rpcprotocol".equals(servertransport)) {
            
            Integer connectionID = Integer.parseInt(request.getParameter("connectionID"));
            doServerMessage(request, resource.getResponse(), connectionID);
            return;
            
        } else if (webSocketSubProtocol != null 
                  && webSocketSubProtocol.equals(FrameworkConfig.SIMPLE_HTTP_OVER_WEBSOCKET)) {
        
            Integer connectionID = (Integer) request.getAttribute(AtmosphereGwtHandler.class.getName() 
                                        + ".connectionID");
            doServerMessage(request, resource.getResponse(), connectionID);
            return;
        }
        
        try {
            int requestHeartbeat = heartbeat;
            String requestedHeartbeat = request.getParameter("heartbeat");
            if (requestedHeartbeat != null) {
                try {
                    requestHeartbeat = Integer.parseInt(requestedHeartbeat);
                    if (requestHeartbeat <= 0) {
                        throw new IOException("invalid heartbeat parameter");
                    }
                    requestHeartbeat = computeHeartbeat(requestHeartbeat);
                } catch (NumberFormatException e) {
                    throw new IOException("invalid heartbeat parameter");
                }
            }

            GwtAtmosphereResourceImpl resourceWrapper = new GwtAtmosphereResourceImpl(resource, this, requestHeartbeat);
            request.setAttribute(AtmosphereGwtHandler.class.getName() + ".connectionID", 
                    (Integer) resourceWrapper.getConnectionID());
            doCometImpl(resourceWrapper);
        } catch (IOException e) {
//            GwtAtmosphereResourceImpl resource = new GwtAtmosphereResourceImpl(atm, this, -1);
            logger.error("Unable to initiated comet" + e.getMessage(), e);
//			resource.getResponseWriter().sendError(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());
        }
    } ##FSTMerge## @Override
    public void onRequest(AtmosphereResource resource) throws IOException {

        HttpServletRequest request = resource.getRequest();

        String servertransport = request.getParameter("servertransport");
        Object webSocketSubProtocol = resource.getRequest().getAttribute(FrameworkConfig.WEBSOCKET_SUBPROTOCOL);
        if ("rpcprotocol".equals(servertransport)) {
            
            Integer connectionID = Integer.parseInt(request.getParameter("connectionID"));
            doServerMessage(request, resource.getResponse(), connectionID);
            return;
            
        } else if (webSocketSubProtocol != null 
                  && webSocketSubProtocol.equals(FrameworkConfig.SIMPLE_HTTP_OVER_WEBSOCKET)) {
        
            Integer connectionID = (Integer) request.getAttribute(AtmosphereGwtHandler.class.getName() 
                                        + ".connectionID");
            doServerMessage(request, resource.getResponse(), connectionID);
            return;
        }
        
        try {
            int requestHeartbeat = heartbeat;
            String requestedHeartbeat = request.getParameter("heartbeat");
            if (requestedHeartbeat != null) {
                try {
                    requestHeartbeat = Integer.parseInt(requestedHeartbeat);
                    if (requestHeartbeat <= 0) {
                        throw new IOException("invalid heartbeat parameter");
                    }
                    requestHeartbeat = computeHeartbeat(requestHeartbeat);
                } catch (NumberFormatException e) {
                    throw new IOException("invalid heartbeat parameter");
                }
            }

            GwtAtmosphereResourceImpl resourceWrapper = new GwtAtmosphereResourceImpl(resource, this, requestHeartbeat);
            request.setAttribute(AtmosphereGwtHandler.class.getName() + ".connectionID", 
                    (Integer) resourceWrapper.getConnectionID());
            doCometImpl(resourceWrapper);
        } catch (IOException e) {
//            GwtAtmosphereResourceImpl resource = new GwtAtmosphereResourceImpl(atm, this, -1);
            logger.error("Unable to initiated comet" + e.getMessage(), e);
//			resource.getResponseWriter().sendError(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void doServerMessage(HttpServletRequest request, HttpServletResponse response, int connectionID)
        throws IOException{
        BufferedReader data = request.getReader();
        List<Serializable> postMessages = new ArrayList<Serializable>();
        GwtAtmosphereResource resource = lookupResource(connectionID);
        if (resource == null) {
            return;
        }
        String mode = resource.getRequest().getParameter(Constants.CLIENT_SERIALZE_MODE_PARAMETER);
        SerialMode serialMode;
        if (mode != null) {
            serialMode = SerialMode.valueOf(mode);
        } else {
            serialMode = SerialMode.RPC;
        }

        try {
            while (true) {
                String event = data.readLine();
                if (event == null) {
                    break;
                }
                String action = data.readLine();

                if (logger.isTraceEnabled()) {
                    logger.trace("[" + connectionID + "] Server message received: " + event + ";" + action);
                }
                if (event.equals("o") || event.equals("s")) {
                    int length = Integer.parseInt(data.readLine());
                    char[] messageData = new char[length];
                    int totalRead = 0;
                    int read = 0;
                    while ((read = data.read(messageData, totalRead, length - totalRead)) != -1) {
                        totalRead += read;
                        if (totalRead == length) {
                            break;
                        }
                    }
                    if (totalRead != length) {
                        throw new IllegalStateException("Corrupt message received");
                    }
                    Serializable message;
                    if (event.equals("o")) {
                        message = deserialize(messageData, serialMode);
                    } else {
                        message = String.copyValueOf(messageData);
                    }
                    if (message != null) {
                        if (action.equals("p")) {
                            postMessages.add(message);
                        } else if (action.equals("b")) {
                            broadcast(message, resource);
                        }
                    }
                } else if (event.equals("c")) {
                    if (action.equals("d")) {
                        disconnect(resource);
                    }
                }
            }
        } catch (IOException ex) {
            logger.error("[" + connectionID + "] Failed to read", ex);
        }

        if (postMessages.size() > 0) {
            post(request, response, postMessages, resource);
        }
    } ##FSTMerge## protected void doServerMessage(HttpServletRequest request, HttpServletResponse response, int connectionID)
        throws IOException{
        BufferedReader data = request.getReader();
        List<Serializable> postMessages = new ArrayList<Serializable>();
        GwtAtmosphereResource resource = lookupResource(connectionID);
        if (resource == null) {
            return;
        }
        String mode = resource.getRequest().getParameter(Constants.CLIENT_SERIALZE_MODE_PARAMETER);
        SerialMode serialMode;
        if (mode != null) {
            serialMode = SerialMode.valueOf(mode);
        } else {
            serialMode = SerialMode.RPC;
        }
        
        try {
            while (true) {
                String event = data.readLine();
                if (event == null) {
                    break;
                }
                String action = data.readLine();
                
                if (logger.isTraceEnabled()) {
                    logger.trace("[" + connectionID + "] Server message received: " + event + ";" + action);
                }
                if (event.equals("o") || event.equals("s")) {
                    int length = Integer.parseInt(data.readLine());
                    char[] messageData = new char[length];
                    int totalRead = 0;
                    int read = 0;
                    while ((read = data.read(messageData, totalRead, length - totalRead)) != -1) {
                        totalRead += read;
                        if (totalRead == length) {
                            break;
                        }
                    }
                    if (totalRead != length) {
                        throw new IllegalStateException("Corrupt message received");
                    }
                    Serializable message;
                    if (event.equals("o")) {
                        message = deserialize(messageData, serialMode);
                    } else {
                        message = String.copyValueOf(messageData);
                    }
                    if (message != null) {
                        if (action.equals("p")) {
                            postMessages.add(message);
                        } else if (action.equals("b")) {
                            broadcast(message, resource);
                        }
                    }
                } else if (event.equals("c")) {
                    if (action.equals("d")) {
                        disconnect(resource);
                    }
                }
            }
        } catch (IOException ex) {
            logger.error("[" + connectionID + "] Failed to read", ex);
        }

        if (postMessages.size() > 0) {
            post(request, response, postMessages, resource);
        }
    } ##FSTMerge## protected void doServerMessage(HttpServletRequest request, HttpServletResponse response, int connectionID)
        throws IOException{
        BufferedReader data = request.getReader();
        List<Object> postMessages = new ArrayList<Object>();
        GwtAtmosphereResource resource = lookupResource(connectionID);
        if (resource == null) {
            return;
        }
        String mode = resource.getRequest().getParameter(Constants.CLIENT_SERIALZE_MODE_PARAMETER);
        SerialMode serialMode;
        if (mode != null) {
            serialMode = SerialMode.valueOf(mode);
        } else {
            serialMode = SerialMode.RPC;
        }
        
        try {
            while (true) {
                String event = data.readLine();
                if (event == null) {
                    break;
                }
                String action = data.readLine();
                
                if (logger.isTraceEnabled()) {
                    logger.trace("[" + connectionID + "] Server message received: " + event + ";" + action);
                }
                if (event.equals("o") || event.equals("s")) {
                    int length = Integer.parseInt(data.readLine());
                    char[] messageData = new char[length];
                    int totalRead = 0;
                    int read = 0;
                    while ((read = data.read(messageData, totalRead, length - totalRead)) != -1) {
                        totalRead += read;
                        if (totalRead == length) {
                            break;
                        }
                    }
                    if (totalRead != length) {
                        throw new IllegalStateException("Corrupt message received");
                    }
                    Object message = null;
                    if (event.equals("o")) {
                        try {
                            message = deserialize(messageData, serialMode);
                        } catch (SerializationException ex) {
                            logger.error("Failed to deserialize message", ex);
                        }
                    } else {
                        message = String.copyValueOf(messageData);
                    }
                    if (message != null) {
                        if (action.equals("p")) {
                            postMessages.add(message);
                        } else if (action.equals("b")) {
                            broadcast(message, resource);
                        }
                    }
                } else if (event.equals("c")) {
                    if (action.equals("d")) {
                        disconnect(resource);
                    }
                }
            }
        } catch (IOException ex) {
            logger.error("[" + connectionID + "] Failed to read", ex);
        }

        if (postMessages.size() > 0) {
            post(request, response, postMessages, resource);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected Serializable deserialize(String data, SerialMode mode) {
        switch (mode) {
            default:
            case RPC:
                try {
                    ServerSerializationStreamReader reader = new ServerSerializationStreamReader(getClass().getClassLoader(), cometSerializationPolicyProvider);
                    reader.prepareToRead(data);
                    return (Serializable) reader.readObject();
                } catch (SerializationException ex) {
                    logger.error("Failed to deserialize message", ex);
                    return null;
                }
            case JSON:
                throw new UnsupportedOperationException("Not implemented");

            case PLAIN:
                return data;
        }
    } ##FSTMerge## protected Serializable deserialize(String data, SerialMode mode) {
        switch (mode) {
            default:
            case RPC:
                try {
                    ServerSerializationStreamReader reader = new ServerSerializationStreamReader(getClass().getClassLoader(), cometSerializationPolicyProvider);
                    reader.prepareToRead(data);
                    return (Serializable) reader.readObject();
                } catch (SerializationException ex) {
                    logger.error("Failed to deserialize message", ex);
                    return null;
                }
            case JSON:
                throw new UnsupportedOperationException("Not implemented");
                
            case PLAIN:
                return data;
        }
    } ##FSTMerge## protected Object deserialize(String data, SerialMode mode) throws SerializationException {
        switch (mode) {
            default:
            case RPC:
                return getGwtRpc().deserialize(data);
                
            case JSON:
                return getJSONDeserializer().deserialize(data);
                
            case PLAIN:
                return data;
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected ServerTransport getServerTransport() {
        if (serverTransport == null) {
            serverTransport = new RPCServerTransport(client.getSerializer());
        }
        return serverTransport;
    } ##FSTMerge## protected ServerTransport getServerTransport() {
        if (serverTransport == null) {
            serverTransport = new RPCServerTransport();
        }
        return serverTransport;
    } ##FSTMerge## protected ServerTransport getServerTransport() {
        if (serverTransport == null) {
            serverTransport = new RPCServerTransport();
        }
        return serverTransport;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/impl/BaseCometTransport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## @Override
        public String serialize(Object message) throws SerializationException {
            return client.getSerializer().serialize(message);
        } ##FSTMerge## @Override
        public String serialize(Object message) throws SerializationException {
            return client.getSerializer().serialize(message);
        }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/impl/BaseCometTransport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private void doOnConnected(int heartbeat, int connectionID, CometClientTransportWrapper transport) {
        if (refreshState != null) {
            if (transport == refreshTransport) {
                if (refreshState == RefreshState.PRIMARY_DISCONNECTED) {
                    doneRefresh();
                } else if (refreshState == RefreshState.CONNECTING) {
                    primaryTransport.disconnect();
                    doneRefresh();
                } else {
                    throw new IllegalStateException("Unexpected refresh state");
                }
            } else {
                // refreshed connection after connection failed
                if (refreshState != RefreshState.CONNECTING 
                        && refreshState != RefreshState.PRIMARY_RECONNECT) {
                    throw new IllegalStateException("Unexpected refresh state");
                }
                refreshState = null;
                listener.onAfterRefresh();
            }
        } else {
            listener.onConnected(heartbeat, connectionID);
        }
    } ##FSTMerge## private void doOnConnected(int heartbeat, int connectionID, CometClientTransportWrapper transport) {
        if (refreshState != null) {
            if (transport == refreshTransport) {
                if (refreshState == RefreshState.PRIMARY_DISCONNECTED) {
                    doneRefresh();
                } else if (refreshState == RefreshState.CONNECTING) {
                    primaryTransport.disconnect();
                    doneRefresh();
                } else {
                    throw new IllegalStateException("Unexpected refresh state");
                }
            } else {
                // refreshed connection after connection failed
                if (refreshState != RefreshState.CONNECTING) {
                    throw new IllegalStateException("Unexpected refresh state");
                }
                refreshState = null;
                listener.onAfterRefresh();
            }
        } else {
            listener.onConnected(heartbeat, connectionID);
        }
    } ##FSTMerge## private void doOnConnected(int heartbeat, int connectionID, CometClientTransportWrapper transport) {
        if (refreshState != null) {
            if (transport == refreshTransport) {
                if (refreshState == RefreshState.PRIMARY_DISCONNECTED) {
                    doneRefresh();
                } else if (refreshState == RefreshState.CONNECTING) {
                    primaryTransport.disconnect();
                    doneRefresh();
                } else {
                    throw new IllegalStateException("Unexpected refresh state");
                }
            } else {
                // refreshed connection after connection failed
                if (refreshState != RefreshState.CONNECTING) {
                    throw new IllegalStateException("Unexpected refresh state");
                }
                refreshState = null;
                listener.onAfterRefresh();
            }
        } else {
            listener.onConnected(heartbeat, connectionID);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/AtmosphereClient.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private void doOnDisconnected(CometClientTransportWrapper transport) {
        if (refreshState != null) {
            if (transport == primaryTransport) {
                if (refreshState != RefreshState.CONNECTING 
                        && refreshState != RefreshState.PRIMARY_RECONNECT) {
                    throw new IllegalStateException("Unexpected refreshState");
                }
                if (refreshState == RefreshState.PRIMARY_RECONNECT) {
                    scheduleConnect(transport);
                } else {
                    refreshState = RefreshState.PRIMARY_DISCONNECTED;
                    logger.warning("primary disconnected before refresh transport was connected");
                }
            } else {
                // the refresh transport has disconnected
                failedRefresh();
            }
        } else {
            listener.onDisconnected();

            scheduleConnect(transport);
        }
    } ##FSTMerge## private void doOnDisconnected(CometClientTransportWrapper transport) {
        if (refreshState != null) {
            if (transport == primaryTransport) {
                if (refreshState != RefreshState.CONNECTING) {
                    throw new IllegalStateException("Unexpected refreshState");
                }
                refreshState = RefreshState.PRIMARY_DISCONNECTED;
                GWT.log("CometClient: primary disconnected before refresh transport was connected");
            } else {
                // the refresh transport has disconnected
                failedRefresh();
            }
        } else {
            listener.onDisconnected();

            if (running) {
                doConnect();
            }
        }
    } ##FSTMerge## private void doOnDisconnected(CometClientTransportWrapper transport) {
        if (refreshState != null) {
            if (transport == primaryTransport) {
                if (refreshState != RefreshState.CONNECTING) {
                    throw new IllegalStateException("Unexpected refreshState");
                }
                refreshState = RefreshState.PRIMARY_DISCONNECTED;
                GWT.log("CometClient: primary disconnected before refresh transport was connected");
            } else {
                // the refresh transport has disconnected
                failedRefresh();
            }
        } else {
            listener.onDisconnected();

            if (running) {
                doConnect();
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/AtmosphereClient.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private void failedRefresh() {
        refreshState = null;
        logger.severe("Failed refesh");
        // dispatch remaining messages;
        if (refreshQueue != null) {
            for (Object object : refreshQueue) {
                if (object == REFRESH || object == DISCONNECT) {
                } else {
                    doOnMessage((List<?>) object, primaryTransport);
                }
            }
            refreshQueue.clear();
        }
        doDisconnect();
        scheduleConnect(primaryTransport);
    } ##FSTMerge## private void failedRefresh() {
        refreshState = null;
        GWT.log("CometClient: Failed refesh");
        // dispatch remaining messages;
        if (refreshQueue != null) {
            for (Object object : refreshQueue) {
                if (object == REFRESH || object == DISCONNECT) {
                } else {
                    doOnMessage((List<?>) object, primaryTransport);
                }
            }
            refreshQueue.clear();
        }
        doDisconnect();
        doConnect();
    } ##FSTMerge## private void failedRefresh() {
        refreshState = null;
        GWT.log("CometClient: Failed refesh");
        // dispatch remaining messages;
        if (refreshQueue != null) {
            for (Object object : refreshQueue) {
                if (object == REFRESH || object == DISCONNECT) {
                } else {
                    doOnMessage((List<?>) object, primaryTransport);
                }
            }
            refreshQueue.clear();
        }
        doDisconnect();
        doConnect();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/AtmosphereClient.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @SuppressWarnings("unchecked")
    private void doneRefresh() {
        refreshState = null;
        CometClientTransportWrapper temp = primaryTransport;
        primaryTransport = refreshTransport;
        refreshTransport = temp;
        
        listener.onAfterRefresh();

        if (refreshQueue != null) {
            if (refreshQueue.size() > 0) {
                logger.fine("pushing queued messages");
            }
            for (Object object : refreshQueue) {
                if (object == REFRESH) {
                    doOnRefresh(primaryTransport);
                } else if (object == DISCONNECT) {
                    doOnDisconnected(primaryTransport);
                } else {
                    doOnMessage((List<?>) object, primaryTransport);
                }
            }
            refreshQueue.clear();
        }
    } ##FSTMerge## @SuppressWarnings("unchecked")
    private void doneRefresh() {
        refreshState = null;
        CometClientTransportWrapper temp = primaryTransport;
        primaryTransport = refreshTransport;
        refreshTransport = temp;
        
        listener.onAfterRefresh();

        if (refreshQueue != null) {
            if (refreshQueue.size() > 0) {
                GWT.log("CometClient: pushing queued messages");
            }
            for (Object object : refreshQueue) {
                if (object == REFRESH) {
                    doOnRefresh(primaryTransport);
                } else if (object == DISCONNECT) {
                    doOnDisconnected(primaryTransport);
                } else {
                    doOnMessage((List<?>) object, primaryTransport);
                }
            }
            refreshQueue.clear();
        }
    } ##FSTMerge## @SuppressWarnings("unchecked")
    private void doneRefresh() {
        refreshState = null;
        CometClientTransportWrapper temp = primaryTransport;
        primaryTransport = refreshTransport;
        refreshTransport = temp;
        
        listener.onAfterRefresh();

        if (refreshQueue != null) {
            if (refreshQueue.size() > 0) {
                GWT.log("CometClient: pushing queued messages");
            }
            for (Object object : refreshQueue) {
                if (object == REFRESH) {
                    doOnRefresh(primaryTransport);
                } else if (object == DISCONNECT) {
                    doOnDisconnected(primaryTransport);
                } else {
                    doOnMessage((List<?>) object, primaryTransport);
                }
            }
            refreshQueue.clear();
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/AtmosphereClient.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private void doOnError(Throwable exception, boolean connected, CometClientTransportWrapper transport) {
        if (connected) {
            transport.disconnect();
        }

        listener.onError(exception, connected);
    } ##FSTMerge## private void doOnError(Throwable exception, boolean connected, CometClientTransportWrapper transport) {
        if (connected) {
            doDisconnect();
        }

        listener.onError(exception, connected);

        if (running) {
            primaryTransport.reconnectionTimer.schedule(reconnectionTimeout);
        }
    } ##FSTMerge## private void doOnError(Throwable exception, boolean connected, CometClientTransportWrapper transport) {
        if (connected) {
            doDisconnect();
        }

        listener.onError(exception, connected);

        if (running) {
            primaryTransport.reconnectionTimer.schedule(reconnectionTimeout);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/AtmosphereClient.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public CometClientTransportWrapper() {
            // Websocket support not enabled yet

            if (webSocketsEnabled && WebSocketCometTransport.hasWebSocketSupport()) {
                transport = new WebSocketCometTransport();
            } else {
                transport = GWT.create(CometTransport.class);
            }
            logger.info("Created transport: " + transport.getClass().getName());
            transport.initiate(AtmosphereClient.this, this);
        } ##FSTMerge## public CometClientTransportWrapper() {
            // Websocket support not enabled yet

            if (webSocketsEnabled && WebSocketCometTransport.hasWebSocketSupport()) {
                transport = new WebSocketCometTransport();
            } else {
                transport = GWT.create(CometTransport.class);
            }
            GWT.log("Created transport: " + transport.getClass().getName());
            transport.initiate(AtmosphereClient.this, this);
        } ##FSTMerge## public CometClientTransportWrapper() {
            // Websocket support not enabled yet

            if (webSocketsEnabled && WebSocketCometTransport.hasWebSocketSupport()) {
                transport = new WebSocketCometTransport();
            } else {
                transport = GWT.create(CometTransport.class);
            }
            GWT.log("Created transport: " + transport.getClass().getName());
            transport.initiate(AtmosphereClient.this, this);
        }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/AtmosphereClient.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void disconnect() {
            transport.disconnect();
        } ##FSTMerge## public void disconnect() {
            cancelTimers();
            transport.disconnect();
        } ##FSTMerge## public void disconnect() {
            cancelTimers();
            transport.disconnect();
        }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/AtmosphereClient.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void onConnected(int heartbeat, int connectionID) {
            heartbeatTimeout = heartbeat + connectionTimeout;
            lastReceivedTime = Duration.currentTimeMillis();
            this.connectionID = connectionID;
            if (transport instanceof WebSocketCometTransport) {
                webSocketSuccessful = true;
            }

            reconnectionTimer.cancel();
            reconnectionCounter = 1;
            connectionTimer.cancel();
            heartbeatTimer.schedule(heartbeatTimeout);

            doOnConnected(heartbeat, connectionID, this);
        } ##FSTMerge## @Override
        public void onConnected(int heartbeat, int connectionID) {
            heartbeatTimeout = heartbeat + connectionTimeout;
            lastReceivedTime = Duration.currentTimeMillis();
            this.connectionID = connectionID;
            if (transport instanceof WebSocketCometTransport) {
                webSocketSuccessful = true;
            }

            cancelTimers();
            heartbeatTimer.schedule(heartbeatTimeout);

            doOnConnected(heartbeat, connectionID, this);
        } ##FSTMerge## @Override
        public void onConnected(int heartbeat, int connectionID) {
            heartbeatTimeout = heartbeat + connectionTimeout;
            lastReceivedTime = Duration.currentTimeMillis();
            this.connectionID = connectionID;
            if (transport instanceof WebSocketCometTransport) {
                webSocketSuccessful = true;
            }

            cancelTimers();
            heartbeatTimer.schedule(heartbeatTimeout);

            doOnConnected(heartbeat, connectionID, this);
        }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/AtmosphereClient.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void onDisconnected() {
            heartbeatTimer.cancel();
            connectionTimer.cancel();
            if (transport instanceof WebSocketCometTransport && webSocketSuccessful == false) {
                // server doesn't support WebSocket's degrade the connection ...
                logger.info("Server does not support WebSockets");
                transport = GWT.create(CometTransport.class);
                transport.initiate(AtmosphereClient.this, this);
                transport.connect(++connectionCount);
            } else {
                doOnDisconnected(this);
            }
        } ##FSTMerge## @Override
        public void onDisconnected() {
            cancelTimers();
            if (transport instanceof WebSocketCometTransport && webSocketSuccessful == false) {
                // server doesn't support WebSocket's degrade the connection ...
                logger.info("Server does not support WebSockets");
                transport = GWT.create(CometTransport.class);
                transport.initiate(AtmosphereClient.this, this);
                transport.connect(++connectionCount);
            } else {
                doOnDisconnected(this);
            }
        } ##FSTMerge## @Override
        public void onDisconnected() {
            cancelTimers();
            if (transport instanceof WebSocketCometTransport && webSocketSuccessful == false) {
                // server doesn't support WebSocket's degrade the connection ...
                logger.info("Server does not support WebSockets");
                transport = GWT.create(CometTransport.class);
                transport.initiate(AtmosphereClient.this, this);
                transport.connect(++connectionCount);
            } else {
                doOnDisconnected(this);
            }
        }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/AtmosphereClient.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void onError(Throwable exception, boolean connected) {
            heartbeatTimer.cancel();
            connectionTimer.cancel();
            if (transport instanceof WebSocketCometTransport && webSocketSuccessful == false) {
                if (connected) {
                    transport.disconnect();
                }
            } else {
                doOnError(exception, connected, this);
            }
        } ##FSTMerge## @Override
        public void onError(Throwable exception, boolean connected) {
            cancelTimers();
            if (transport instanceof WebSocketCometTransport && webSocketSuccessful == false) {
                if (connected) {
                    transport.disconnect();
                }
            } else {
                doOnError(exception, connected, this);
            }
        } ##FSTMerge## @Override
        public void onError(Throwable exception, boolean connected) {
            cancelTimers();
            if (transport instanceof WebSocketCometTransport && webSocketSuccessful == false) {
                if (connected) {
                    transport.disconnect();
                }
            } else {
                doOnError(exception, connected, this);
            }
        }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/AtmosphereClient.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## private void cancelTimers() {
            connectionTimer.cancel();
            reconnectionTimer.cancel();
            heartbeatTimer.cancel();
        } ##FSTMerge## private void cancelTimers() {
            connectionTimer.cancel();
            reconnectionTimer.cancel();
            heartbeatTimer.cancel();
        }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/AtmosphereClient.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: be96a917d958740d1d122698ac24e8e45522717d
Parent1 SHA-1: 5919ea1573ff578818e18d5db83ab5098d81eb48
Parent2 SHA-1: 460634ed5490858d675f3790e4b9f89bc7730947
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private Timer createReconnectionTimer() {
            return new Timer() {
                @Override
                public void run() {
                    reconnectionCounter++;
                    logger.finest("Running reconnect: count="+ (reconnectionCounter - 1));
                    if (reconnectionCount != -1 && reconnectionCounter - 2 > reconnectionCount) {
                        logger.info("Reconnection attempts exceeded " + reconnectionCount + ". Giving up...");
                        stop();
                    } else if (running) {
                        logger.fine("Starting reconnect");
                        refreshState = RefreshState.PRIMARY_RECONNECT;
                        doConnect();
                    }
                }
                @Override
                public void schedule(int delayMillis) {
                    int delay = delayMillis * (reconnectionCounter < 30 ? reconnectionCounter : 30);
                    logger.finest("Scheduling for reconnect, waiting " + (delay / 1000) + "s");
                    super.cancel();
                    super.schedule(delay);
                }
            };
        } ##FSTMerge## private Timer createReconnectionTimer() {
            return new Timer() {
                int count = 0;
                @Override
                public void run() {
                    if (count++ > 5) {
                        stop();
                    } else if (running) {
                        refreshState = RefreshState.CONNECTING;
                        doConnect();
                    }
                }
                @Override
                public void cancel() {
                    super.cancel();
                    count = 0;
                }
            };
        } ##FSTMerge## private Timer createReconnectionTimer() {
            return new Timer() {
                int count = 0;
                @Override
                public void run() {
                    if (count++ > 5) {
                        stop();
                    } else if (running) {
                        refreshState = RefreshState.CONNECTING;
                        doConnect();
                    }
                }
                @Override
                public void cancel() {
                    super.cancel();
                    count = 0;
                }
            };
        }
File path: /tmp/downloads/atmosphere/revisions/rev_5919e_46063/rev_5919e-46063/extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/AtmosphereClient.java

==================================================================================================================
Revision: /tmp/downloads/atmosphere/revisions/rev_841cb_69850/rev_841cb-69850.revisions
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 6b65aa504e52e354aeeaa8f8d1831a547d3b2c6d
Parent1 SHA-1: 841cb36a95c243183f8bede65cfd5e2367591765
Parent2 SHA-1: 6985074fb5bbdf0848c2b801d88eda045aca5eff
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void initWebSocketProtocol() {
        try {
            webSocketProtocol = (WebSocketProtocol) JettyWebSocketHandler.class.getClassLoader()
                    .loadClass(webSocketProtocolClassName).newInstance();
        } catch (Exception ex) {
            logger.error("Cannot load the WebSocketProtocol {}", getWebSocketProtocolClassName(), ex);
            webSocketProtocol = new SimpleHttpProtocol();
        }
        InjectorProvider.getInjector().inject(webSocketProtocol);
        webSocketProtocol.configure(config);
    } ##FSTMerge## protected void initWebSocketProtocol() {
        try {
            webSocketProtocol = (WebSocketProtocol) JettyWebSocketHandler.class.getClassLoader()
                    .loadClass(webSocketProtocolClassName).newInstance();
        } catch (Exception ex) {
            logger.error("Cannot load the WebSocketProtocol {}", getWebSocketProtocolClassName(), ex);
            webSocketProtocol = new SimpleHttpProtocol();
        }
        webSocketProtocol.configure(config);
    } ##FSTMerge##
File path: /tmp/downloads/atmosphere/revisions/rev_841cb_69850/rev_841cb-69850/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 6b65aa504e52e354aeeaa8f8d1831a547d3b2c6d
Parent1 SHA-1: 841cb36a95c243183f8bede65cfd5e2367591765
Parent2 SHA-1: 6985074fb5bbdf0848c2b801d88eda045aca5eff
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final static String SUSPENDED = TomcatCometSupport.class.getName() + ".suspended"; ##FSTMerge## private final static String SUSPENDED = Tomcat7CometSupport.class.getName() + ".suspended"; ##FSTMerge## private final static String SUSPENDED = Tomcat7CometSupport.class.getName() + ".suspended";
File path: /tmp/downloads/atmosphere/revisions/rev_841cb_69850/rev_841cb-69850/modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 6b65aa504e52e354aeeaa8f8d1831a547d3b2c6d
Parent1 SHA-1: 841cb36a95c243183f8bede65cfd5e2367591765
Parent2 SHA-1: 6985074fb5bbdf0848c2b801d88eda045aca5eff
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);

        // Comet is not enabled.
        if (event == null) {
            throw unableToDetectComet;
        }

        Action action = null;
        // For now, we are just interested in CometEvent.READ
        if (event.getEventType() == EventType.BEGIN) {
            action = suspended(req, res);
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", res);

                // Do nothing except setting the times out
                try {
                    if (action.timeout != -1) {
                        event.setTimeout((int) action.timeout);
                    } else {
                        event.setTimeout(Integer.MAX_VALUE);
                    }
                    req.setAttribute(SUSPENDED, true);
                } catch (UnsupportedOperationException ex) {
                    // Swallow s Tomcat APR isn't supporting time out
                    // TODO: Must implement the same functionality using a Scheduler
                }
            } else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resuming response: {}", res);
                event.close();
            } else {
                event.close();
            }
        } else if (event.getEventType() == EventType.READ) {
            // Not implemented
        } else if (event.getEventSubType() == CometEvent.EventSubType.CLIENT_DISCONNECT) {
            logger.debug("Client closed connection: response: {}", res);

            if (req.getAttribute(SUSPENDED) != null && closeConnectionOnInputStream) {
                req.setAttribute(SUSPENDED, null);
                action = cancelled(req, res);
            } else {
                logger.debug("Cancelling response: {}", res);
            }

            event.close();
        } else if (event.getEventSubType() == CometEvent.EventSubType.TIMEOUT) {
            logger.debug("Timing out response: {}", res);

            action = timedout(req, res);
            event.close();
        } else if (event.getEventType() == EventType.ERROR) {
            event.close();
        } else if (event.getEventType() == EventType.END) {
            if (req.getAttribute(SUSPENDED) != null && closeConnectionOnInputStream) {
                req.setAttribute(SUSPENDED, null);
                action = cancelled(req, res);
            } else {
                logger.trace("Cancelling response: {}", res);
            }
        }
        return action;
    } ##FSTMerge## public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);

        // Comet is not enabled.
        if (event == null) {
            throw unableToDetectComet;
        }

        Action action = null;
        // For now, we are just interested in CometEvent.READ
        if (event.getEventType() == EventType.BEGIN) {
            action = suspended(req, res);
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", res);

                // Do nothing except setting the times out
                try {
                    if (action.timeout != -1) {
                        event.setTimeout((int) action.timeout);
                    } else {
                        event.setTimeout(Integer.MAX_VALUE);
                    }
                } catch (UnsupportedOperationException ex) {
                    // Swallow s Tomcat APR isn't supporting time out
                    // TODO: Must implement the same functionality using a Scheduler
                }
            } else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resuming response: {}", res);
                event.close();
            } else {
                event.close();
            }
        } else if (event.getEventType() == EventType.READ) {
            // Not implemented
        } else if (event.getEventSubType() == CometEvent.EventSubType.CLIENT_DISCONNECT) {
            logger.debug("Client closed connection: response: {}", res);

            if (req.getAttribute(SUSPENDED) != null && closeConnectionOnInputStream) {
                req.setAttribute(SUSPENDED, null);
                action = cancelled(req, res);
            } else {
                logger.debug("Cancelling response: {}", res);
            }

            event.close();
        } else if (event.getEventSubType() == CometEvent.EventSubType.TIMEOUT) {
            logger.debug("Timing out response: {}", res);

            action = timedout(req, res);
            event.close();
        } else if (event.getEventType() == EventType.ERROR) {
            event.close();
        } else if (event.getEventType() == EventType.END) {
            if (req.getAttribute(SUSPENDED) != null && closeConnectionOnInputStream) {
                req.setAttribute(SUSPENDED, null);
                action = cancelled(req, res);
            } else {
                logger.trace("Cancelling response: {}", res);
            }
        }
        return action;
    } ##FSTMerge##
File path: /tmp/downloads/atmosphere/revisions/rev_841cb_69850/rev_841cb-69850/modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 6b65aa504e52e354aeeaa8f8d1831a547d3b2c6d
Parent1 SHA-1: 841cb36a95c243183f8bede65cfd5e2367591765
Parent2 SHA-1: 6985074fb5bbdf0848c2b801d88eda045aca5eff
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void doPost(HttpServletRequest postRequest, HttpServletResponse postResponse, 
            List<Serializable> messages, GwtAtmosphereResource cometResource) {
        if (cometResource != null && cometResource.isAlive()) {
            if (messages.size() == 1) {
                cometResource.post(messages.get(0));
            } else {
                cometResource.post(messages);
            }
        }
    } ##FSTMerge## public void doPost(HttpServletRequest postRequest, HttpServletResponse postResponse, 
            List<Serializable> messages, GwtAtmosphereResource cometResource) {
        if (messages.size() == 1) {
            cometResource.post(messages.get(0));
        } else {
            cometResource.post((List) messages);
        }
    } ##FSTMerge## public void doPost(HttpServletRequest postRequest, HttpServletResponse postResponse, 
            List<Serializable> messages, GwtAtmosphereResource cometResource) {
        if (messages.size() == 1) {
            cometResource.post(messages.get(0));
        } else {
            cometResource.post((List) messages);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_841cb_69850/rev_841cb-69850/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 6b65aa504e52e354aeeaa8f8d1831a547d3b2c6d
Parent1 SHA-1: 841cb36a95c243183f8bede65cfd5e2367591765
Parent2 SHA-1: 6985074fb5bbdf0848c2b801d88eda045aca5eff
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void doServerMessage(HttpServletRequest request, HttpServletResponse response, int connectionID) 
        throws IOException{
        BufferedReader data = request.getReader();
        List<Serializable> postMessages = new ArrayList<Serializable>();
        GwtAtmosphereResource resource = lookupResource(connectionID);
        if (resource == null || !resource.isAlive()) {
            return;
        }
        try {
            while (true) {
                String event = data.readLine();
                if (event == null) {
                    break;
                }
                String messageData = data.readLine();
                if (messageData == null) {
                    break;
                }
                data.readLine();
                if (logger.isTraceEnabled()) {
                    logger.trace("[" + connectionID + "] Server message received: " + event + ";" + messageData.charAt(0));
                }
                if (event.equals("o")) {
                    if (messageData.charAt(0) == 'p') {
                        Serializable message = deserialize(messageData.substring(1));
                        if (message != null) {
                            postMessages.add(message);
                        }
                    } else if (messageData.charAt(0) == 'b') {
                        Serializable message = deserialize(messageData.substring(1));
                        broadcast(message, resource);
                    }

                } else if (event.equals("s")) {

                    if (messageData.charAt(0) == 'p') {
                        String message = messageData.substring(1);
                        postMessages.add(message);
                    } else if (messageData.charAt(0) == 'b') {
                        Serializable message = messageData.substring(1);
                        broadcast(message, resource);
                    }

                } else if (event.equals("c")) {

                    if (messageData.equals("d")) {
                        disconnect(resource);
                    }
                }
            }
        } catch (IOException ex) {
            logger.error("[" + connectionID + "] Failed to read", ex);
        }

        if (postMessages.size() > 0) {
            post(request, response, postMessages, resource);
        }
    } ##FSTMerge## protected void doServerMessage(HttpServletRequest request, HttpServletResponse response, int connectionID) 
        throws IOException{
        BufferedReader data = request.getReader();
        List<Serializable> postMessages = new ArrayList<Serializable>();
        GwtAtmosphereResource resource = lookupResource(connectionID);
        if (resource == null) {
            return;
        }
        try {
            while (true) {
                String event = data.readLine();
                if (event == null) {
                    break;
                }
                String messageData = data.readLine();
                if (messageData == null) {
                    break;
                }
                data.readLine();
                if (logger.isTraceEnabled()) {
                    logger.trace("[" + connectionID + "] Server message received: " + event + ";" + messageData.charAt(0));
                }
                if (event.equals("o")) {
                    if (messageData.charAt(0) == 'p') {
                        Serializable message = deserialize(messageData.substring(1));
                        if (message != null) {
                            postMessages.add(message);
                        }
                    } else if (messageData.charAt(0) == 'b') {
                        Serializable message = deserialize(messageData.substring(1));
                        broadcast(message, resource);
                    }

                } else if (event.equals("s")) {

                    if (messageData.charAt(0) == 'p') {
                        String message = messageData.substring(1);
                        postMessages.add(message);
                    } else if (messageData.charAt(0) == 'b') {
                        Serializable message = messageData.substring(1);
                        broadcast(message, resource);
                    }

                } else if (event.equals("c")) {

                    if (messageData.equals("d")) {
                        disconnect(resource);
                    }
                }
            }
        } catch (IOException ex) {
            logger.error("[" + connectionID + "] Failed to read", ex);
        }

        if (postMessages.size() > 0) {
            post(request, response, postMessages, resource);
        }
    } ##FSTMerge## protected void doServerMessage(HttpServletRequest request, HttpServletResponse response, int connectionID) 
        throws IOException{
        BufferedReader data = request.getReader();
        List<Serializable> postMessages = new ArrayList<Serializable>();
        GwtAtmosphereResource resource = lookupResource(connectionID);
        if (resource == null) {
            return;
        }
        try {
            while (true) {
                String event = data.readLine();
                if (event == null) {
                    break;
                }
                String messageData = data.readLine();
                if (messageData == null) {
                    break;
                }
                data.readLine();
                if (logger.isTraceEnabled()) {
                    logger.trace("[" + connectionID + "] Server message received: " + event + ";" + messageData.charAt(0));
                }
                if (event.equals("o")) {
                    if (messageData.charAt(0) == 'p') {
                        Serializable message = deserialize(messageData.substring(1));
                        if (message != null) {
                            postMessages.add(message);
                        }
                    } else if (messageData.charAt(0) == 'b') {
                        Serializable message = deserialize(messageData.substring(1));
                        broadcast(message, resource);
                    }

                } else if (event.equals("s")) {

                    if (messageData.charAt(0) == 'p') {
                        String message = messageData.substring(1);
                        postMessages.add(message);
                    } else if (messageData.charAt(0) == 'b') {
                        Serializable message = messageData.substring(1);
                        broadcast(message, resource);
                    }

                } else if (event.equals("c")) {

                    if (messageData.equals("d")) {
                        disconnect(resource);
                    }
                }
            }
        } catch (IOException ex) {
            logger.error("[" + connectionID + "] Failed to read", ex);
        }

        if (postMessages.size() > 0) {
            post(request, response, postMessages, resource);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_841cb_69850/rev_841cb-69850/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 6b65aa504e52e354aeeaa8f8d1831a547d3b2c6d
Parent1 SHA-1: 841cb36a95c243183f8bede65cfd5e2367591765
Parent2 SHA-1: 6985074fb5bbdf0848c2b801d88eda045aca5eff
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ final public void post(HttpServletRequest postRequest, HttpServletResponse postResponse, 
            List<Serializable> messages, GwtAtmosphereResource cometResource) {
        if (messages == null) {
            return;
        }
        doPost(postRequest, postResponse, messages, cometResource);
    } ##FSTMerge## final public void post(HttpServletRequest postRequest, HttpServletResponse postResponse, 
            List<Serializable> messages, GwtAtmosphereResource cometResource) {
        if (messages == null) {
            return;
        }
        if (cometResource != null) {
            doPost(postRequest, postResponse, messages, cometResource);
        }
    } ##FSTMerge## final public void post(HttpServletRequest postRequest, HttpServletResponse postResponse, 
            List<Serializable> messages, GwtAtmosphereResource cometResource) {
        if (messages == null) {
            return;
        }
        if (cometResource != null) {
            doPost(postRequest, postResponse, messages, cometResource);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_841cb_69850/rev_841cb-69850/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 6b65aa504e52e354aeeaa8f8d1831a547d3b2c6d
Parent1 SHA-1: 841cb36a95c243183f8bede65cfd5e2367591765
Parent2 SHA-1: 6985074fb5bbdf0848c2b801d88eda045aca5eff
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void broadcast(Serializable message, GwtAtmosphereResource resource) {
        if (message == null) {
            return;
        }
        if (resource.isAlive())
            resource.getBroadcaster().broadcast(message);
    } ##FSTMerge## public void broadcast(Serializable message, GwtAtmosphereResource resource) {
        if (message == null) {
            return;
        }
        resource.getBroadcaster().broadcast(message);
    } ##FSTMerge## public void broadcast(Serializable message, GwtAtmosphereResource resource) {
        if (message == null) {
            return;
        }
        resource.getBroadcaster().broadcast(message);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_841cb_69850/rev_841cb-69850/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 6b65aa504e52e354aeeaa8f8d1831a547d3b2c6d
Parent1 SHA-1: 841cb36a95c243183f8bede65cfd5e2367591765
Parent2 SHA-1: 6985074fb5bbdf0848c2b801d88eda045aca5eff
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void broadcast(List<Serializable> messages, GwtAtmosphereResource resource) {
        if (messages == null) {
            return;
        }
        if (resource.isAlive())
            resource.getBroadcaster().broadcast(messages);
    } ##FSTMerge## public void broadcast(List<Serializable> messages, GwtAtmosphereResource resource) {
        if (messages == null) {
            return;
        }
        resource.getBroadcaster().broadcast(messages);
    } ##FSTMerge## public void broadcast(List<Serializable> messages, GwtAtmosphereResource resource) {
        if (messages == null) {
            return;
        }
        resource.getBroadcaster().broadcast(messages);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_841cb_69850/rev_841cb-69850/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java

==================================================================================================================
Revision: /tmp/downloads/atmosphere/revisions/rev_dabb0_4a7fc/rev_dabb0-4a7fc.revisions
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 47abb0c131b78cf18107dc0371ff49d26fddb56f
Parent1 SHA-1: dabb0f679567d6ae0308001af0d7926ed2b48328
Parent2 SHA-1: 4a7fcd5ee2ec710486b5fd4fda797701a82d5e87
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public JMSBroadcaster(String id, AtmosphereServlet.AtmosphereConfig config) {
        super(id, null, config);
        configure(config);
    } ##FSTMerge## public JMSBroadcaster(String id, AtmosphereServlet.AtmosphereConfig config) {
        super(id, null, config);
    } ##FSTMerge## public JMSBroadcaster(String id, AtmosphereServlet.AtmosphereConfig config) {
        super(id, null, config);
        setUp();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_dabb0_4a7fc/rev_dabb0-4a7fc/extras/jms/src/main/java/org/atmosphere/plugin/jms/JMSBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 47abb0c131b78cf18107dc0371ff49d26fddb56f
Parent1 SHA-1: dabb0f679567d6ae0308001af0d7926ed2b48328
Parent2 SHA-1: 4a7fcd5ee2ec710486b5fd4fda797701a82d5e87
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private synchronized void configure(AtmosphereServlet.AtmosphereConfig config) {
        try {
            // For backward compatibility.
            if (config.getInitParameter(JMS_TOPIC) != null) {
                topicId = config.getInitParameter(JMS_TOPIC);
            }

            if (config.getInitParameter(JNDI_NAMESPACE) != null) {
                namespace = config.getInitParameter(JNDI_NAMESPACE);
            }

            if (config.getInitParameter(JNDI_FACTORY_NAME) != null) {
                factoryName = config.getInitParameter(JNDI_FACTORY_NAME);
            }

            if (config.getInitParameter(JNDI_TOPIC) != null) {
                topicId = config.getInitParameter(JNDI_TOPIC);
            }

            logger.info("Looking up Connection Factory {}", namespace + factoryName);
            Context ctx = new InitialContext();
            ConnectionFactory connectionFactory = (ConnectionFactory) ctx.lookup(namespace + factoryName);

            logger.info("Looking up topic: {}", topicId);
            topic = (Topic) ctx.lookup(namespace + topicId);

            connection = connectionFactory.createConnection();
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

            publisher = session.createProducer(topic);
            connection.start();
            logger.info("JMS created for topic {}", topicId);
            // Unfortunately we need the getID() to complete the configuration
            // But setID() is called after configure(), therefore we do the
            // rest of the configuration in incomingBroadcast() (which is called
            // once during configuration). We cannot do all the configuration in
            // incomingBroadcast() though, as using bc.getAtmosphereConfig() would
            // introduce a race condition (the configuration is loaded in a different
            // thread).

            // Notify the async running thread on incomingBroadcast()
            this.notify();
        } catch (Exception e) {
            String msg = "Unable to configure JMSBroadcaster";
            logger.error(msg, e);
            throw new RuntimeException(msg, e);
        }
    } ##FSTMerge## public synchronized void configure(AtmosphereServlet.AtmosphereConfig config) {
        try {
            // For backward compatibility.
            if (config.getInitParameter(JMS_TOPIC) != null) {
                topicId = config.getInitParameter(JMS_TOPIC);
            }

            if (config.getInitParameter(JNDI_NAMESPACE) != null) {
                namespace = config.getInitParameter(JNDI_NAMESPACE);
            }

            if (config.getInitParameter(JNDI_FACTORY_NAME) != null) {
                factoryName = config.getInitParameter(JNDI_FACTORY_NAME);
            }

            if (config.getInitParameter(JNDI_TOPIC) != null) {
                topicId = config.getInitParameter(JNDI_TOPIC);
            }

            logger.info("Looking up Connection Factory {}", namespace + factoryName);
            Context ctx = new InitialContext();
            ConnectionFactory connectionFactory = (ConnectionFactory) ctx.lookup(namespace + factoryName);

            logger.info("Looking up topic: {}", topicId);
            topic = (Topic) ctx.lookup(namespace + topicId);

            connection = connectionFactory.createConnection();
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

            publisher = session.createProducer(topic);
            connection.start();
            logger.info("JMS created for topic {}", topicId);
            // Unfortunately we need the getID() to complete the configuration
            // But setID() is called after configure(), therefore we do the
            // rest of the configuration in incomingBroadcast() (which is called
            // once during configuration). We cannot do all the configuration in
            // incomingBroadcast() though, as using bc.getAtmosphereConfig() would
            // introduce a race condition (the configuration is loaded in a different
            // thread).

            // Notify the async running thread on incomingBroadcast()
            this.notify();
        } catch (Exception e) {
            String msg = "Unable to configure JMSBroadcaster";
            logger.error(msg, e);
            throw new RuntimeException(msg, e);
        }
    } ##FSTMerge##
File path: /tmp/downloads/atmosphere/revisions/rev_dabb0_4a7fc/rev_dabb0-4a7fc/extras/jms/src/main/java/org/atmosphere/plugin/jms/JMSBroadcaster.java

==================================================================================================================
Revision: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4.revisions
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public final static void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e, final Broadcaster broadcaster) {
        HttpServletRequest request = (HttpServletRequest) r.getRequest();
        ContainerResponse cr = null;
        try {
            cr = (ContainerResponse) request.getAttribute(FrameworkConfig.CONTAINER_RESPONSE);
            boolean isCancelled = r.getAtmosphereResourceEvent().isCancelled();

            if (cr == null || isCancelled) {
                logger.error("Retrieving HttpServletRequest {} with ContainerResponse {}", request, cr);
                if (!isCancelled) {
                    logger.error("Unexpected state. ContainerResponse cannot be null or already committed. The connection hasn't been suspended yet");
                } else {
                    logger.error("ContainerResponse already resumed or cancelled. Ignoring");
                }

                if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
                    DefaultBroadcaster.class.cast(broadcaster).cacheLostMessage(r);
                }
                AsynchronousProcessor.destroyResource(r);
                return;
            }

            // This is required when you change the response's type
            String m = cr.getHttpHeaders().getFirst(HttpHeaders.CONTENT_TYPE).toString();
            if (e.getMessage() instanceof Response) {
                cr.setResponse((Response) e.getMessage());
                cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                cr.write();
                if (!cr.isCommitted()) {
                    cr.getOutputStream().flush();
                }
            } else if (e.getMessage() instanceof List) {
                for (Object msg : (List<Object>) e.getMessage()) {
                    cr.setResponse(Response.ok(msg).build());
                    cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                    cr.write();
                    if (!cr.isCommitted()) {
                        cr.getOutputStream().flush();
                    }
                }
            } else {
                if (e.getMessage() == null) {
                    logger.warn("Broadcasted message is null");
                }

                cr.setResponse(Response.ok(e.getMessage()).build());
                cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                cr.write();
                if (!cr.isCommitted()) {
                    cr.getOutputStream().flush();
                }
            }
        } catch (Throwable t) {
            if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
                DefaultBroadcaster.class.cast(broadcaster).onException(t, r);
            } else {
                onException(t,r);
            }
        } finally {
            if (cr != null) {
                cr.setEntity(null);
            }
            e.setMessage(null);
            Boolean resumeOnBroadcast = (Boolean) request.getAttribute(ApplicationConfig.RESUME_ON_BROADCAST);
            if (resumeOnBroadcast != null && resumeOnBroadcast) {

                String uuid = (String) request.getAttribute(AtmosphereFilter.RESUME_UUID);
                if (uuid != null) {
                    if (request.getAttribute(AtmosphereFilter.RESUME_CANDIDATES) != null) {
                        ((ConcurrentHashMap<String, AtmosphereResource<?, ?>>) request.getAttribute(AtmosphereFilter.RESUME_CANDIDATES)).remove(uuid);
                    }
                }
                r.resume();
            }

        }
    } ##FSTMerge## public final static void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e, final Broadcaster broadcaster) {
        HttpServletRequest request = (HttpServletRequest) r.getRequest();

        try {
            ContainerResponse cr = (ContainerResponse) request.getAttribute(FrameworkConfig.CONTAINER_RESPONSE);
            boolean isCancelled = r.getAtmosphereResourceEvent().isCancelled();

            if (cr == null || isCancelled) {
                logger.error("Retrieving HttpServletRequest {} with ContainerResponse {}", request, cr);
                if (!isCancelled) {
                    logger.error("Unexpected state. ContainerResponse cannot be null or already committed. The connection hasn't been suspended yet");
                } else {
                    logger.error("ContainerResponse already resumed or cancelled. Ignoring");
                }

                if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
                    DefaultBroadcaster.class.cast(broadcaster).cacheLostMessage(r);
                }
                AsynchronousProcessor.destroyResource(r);
                return;
            }

            // This is required when you change the response's type
            String m = cr.getHttpHeaders().getFirst(HttpHeaders.CONTENT_TYPE).toString();
            if (e.getMessage() instanceof Response) {
                cr.setResponse((Response) e.getMessage());
                cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                cr.write();
                if (!cr.isCommitted()) {
                    cr.getOutputStream().flush();
                }
            } else if (e.getMessage() instanceof List) {
                for (Object msg : (List<Object>) e.getMessage()) {
                    cr.setResponse(Response.ok(msg).build());
                    cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                    cr.write();
                    if (!cr.isCommitted()) {
                        cr.getOutputStream().flush();
                    }
                }
            } else {
                if (e.getMessage() == null) {
                    logger.warn("Broadcasted message is null");
                }

                cr.setResponse(Response.ok(e.getMessage()).build());
                cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                cr.write();
                if (!cr.isCommitted()) {
                    cr.getOutputStream().flush();
                }
            }
        } catch (Throwable t) {
            if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
                DefaultBroadcaster.class.cast(broadcaster).onException(t, r);
            } else {
                onException(t,r);
            }
        } finally {
            Boolean resumeOnBroadcast = (Boolean) request.getAttribute(ApplicationConfig.RESUME_ON_BROADCAST);
            if (resumeOnBroadcast != null && resumeOnBroadcast) {

                String uuid = (String) request.getAttribute(AtmosphereFilter.RESUME_UUID);
                if (uuid != null) {
                    if (request.getAttribute(AtmosphereFilter.RESUME_CANDIDATES) != null) {
                        ((ConcurrentHashMap<String, AtmosphereResource<?, ?>>) request.getAttribute(AtmosphereFilter.RESUME_CANDIDATES)).remove(uuid);
                    }
                }
                r.resume();
            }
        }
    } ##FSTMerge## public final static void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e, final Broadcaster broadcaster) {
        HttpServletRequest request = (HttpServletRequest) r.getRequest();
        ContainerResponse cr = null;
        try {
            cr = (ContainerResponse) request.getAttribute(FrameworkConfig.CONTAINER_RESPONSE);
            boolean isCancelled = r.getAtmosphereResourceEvent().isCancelled();

            if (cr == null || isCancelled) {
                logger.error("Retrieving HttpServletRequest {} with ContainerResponse {}", request, cr);
                if (!isCancelled) {
                    logger.error("Unexpected state. ContainerResponse cannot be null or already committed. The connection hasn't been suspended yet");
                } else {
                    logger.error("ContainerResponse already resumed or cancelled. Ignoring");
                }

                if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
                    DefaultBroadcaster.class.cast(broadcaster).cacheLostMessage(r);
                }
                AsynchronousProcessor.destroyResource(r);
                return;
            }

            // This is required when you change the response's type
            String m = cr.getHttpHeaders().getFirst(HttpHeaders.CONTENT_TYPE).toString();
            if (e.getMessage() instanceof Response) {
                cr.setResponse((Response) e.getMessage());
                cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                cr.write();
                if (!cr.isCommitted()) {
                    cr.getOutputStream().flush();
                }
            } else if (e.getMessage() instanceof List) {
                for (Object msg : (List<Object>) e.getMessage()) {
                    cr.setResponse(Response.ok(msg).build());
                    cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                    cr.write();
                    if (!cr.isCommitted()) {
                        cr.getOutputStream().flush();
                    }
                }
            } else {
                if (e.getMessage() == null) {
                    logger.warn("Broadcasted message is null");
                }

                cr.setResponse(Response.ok(e.getMessage()).build());
                cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                cr.write();
                if (!cr.isCommitted()) {
                    cr.getOutputStream().flush();
                }
            }
        } catch (Throwable t) {
            if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
                DefaultBroadcaster.class.cast(broadcaster).onException(t, r);
            } else {
                onException(t,r);
            }
        } finally {
            if (cr != null) {
                cr.setEntity(null);
            }
            e.setMessage(null);
            Boolean resumeOnBroadcast = (Boolean) request.getAttribute(ApplicationConfig.RESUME_ON_BROADCAST);
            if (resumeOnBroadcast != null && resumeOnBroadcast) {

                String uuid = (String) request.getAttribute(AtmosphereFilter.RESUME_UUID);
                if (uuid != null) {
                    if (request.getAttribute(AtmosphereFilter.RESUME_CANDIDATES) != null) {
                        ((ConcurrentHashMap<String, AtmosphereResource<?, ?>>) request.getAttribute(AtmosphereFilter.RESUME_CANDIDATES)).remove(uuid);
                    }
                }
                r.resume();
            }

        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseyBroadcasterUtil.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final AliveChecker aliveChecker = new AliveChecker(); ##FSTMerge## ##FSTMerge## private final AliveChecker aliveChecker = new AliveChecker();
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/jersey/src/main/java/org/atmosphere/jersey/TrackableSession.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public TrackableResource<? extends Trackable> lookup(String trackingID) {

        TrackableResource t = factoryCache.get(trackingID);
        if (t != null && t.resource() != null) {
            if (AtmosphereResource.class.isAssignableFrom(t.resource().getClass())) {
                AtmosphereResource.class.cast(t.resource()).addEventListener(aliveChecker);
            }
        }

        return t;
    } ##FSTMerge## public TrackableResource<? extends Trackable> lookup(String trackingID) {
        return factoryCache.get(trackingID);
    } ##FSTMerge## public TrackableResource<? extends Trackable> lookup(String trackingID) {

        TrackableResource t = factoryCache.get(trackingID);
        if (t != null && t.resource() != null) {
            if (AtmosphereResource.class.isAssignableFrom(t.resource().getClass())) {
                AtmosphereResource.class.cast(t.resource()).addEventListener(aliveChecker);
            }
        }

        return t;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/jersey/src/main/java/org/atmosphere/jersey/TrackableSession.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private static final ##FSTMerge## ##FSTMerge## private static final
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/jersey/src/main/java/org/atmosphere/jersey/TrackableSession.java
############## CONFLICT ##############
Conflict type: ExtendsList
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ extends AtmosphereResourceEventListenerAdapter ##FSTMerge## ##FSTMerge## extends AtmosphereResourceEventListenerAdapter
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/jersey/src/main/java/org/atmosphere/jersey/TrackableSession.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void onResume(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
            String id = event.getResource().getRequest().getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
            if (id != null) {
                factory.factoryCache.remove(id);
            }
        } ##FSTMerge## ##FSTMerge## @Override
        public void onResume(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
            String id = event.getResource().getRequest().getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
            if (id != null) {
                factory.factoryCache.remove(id);
            }
        }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/jersey/src/main/java/org/atmosphere/jersey/TrackableSession.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void onDisconnect(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
            String id = event.getResource().getRequest().getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
            if (id != null) {
                factory.factoryCache.remove(id);
            }
        } ##FSTMerge## ##FSTMerge## @Override
        public void onDisconnect(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
            String id = event.getResource().getRequest().getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
            if (id != null) {
                factory.factoryCache.remove(id);
            }
        }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/jersey/src/main/java/org/atmosphere/jersey/TrackableSession.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private boolean useResumeAnnotation = false; ##FSTMerge## ##FSTMerge## private boolean useResumeAnnotation = false;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ boolean resumeOnBroadcast(boolean resumeOnBroadcast) {
            String transport = servletReq.getHeader(X_ATMOSPHERE_TRANSPORT);
            if (transport != null && (transport.equals(JSONP_TRANSPORT) || transport.equals(LONG_POLLING_TRANSPORT))) {
                return true;
            }
            return resumeOnBroadcast;
        } ##FSTMerge## ##FSTMerge## boolean resumeOnBroadcast(boolean resumeOnBroadcast) {
            String transport = servletReq.getHeader(X_ATMOSPHERE_TRANSPORT);
            if (transport != null && (transport.equals(JSONP_TRANSPORT) || transport.equals(LONG_POLLING_TRANSPORT))) {
                return true;
            }
            return resumeOnBroadcast;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ boolean outputJunk(boolean outputJunk) {
            boolean webSocketEnabled = false;
            if (servletReq.getHeaders("Connection") != null && servletReq.getHeaders("Connection").hasMoreElements()) {
                String[] e = ((Enumeration<String>) servletReq.getHeaders("Connection")).nextElement().split(",");
                for (String upgrade : e) {
                    if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) {
                        webSocketEnabled = true;
                        break;
                    }
                }
            }

            String transport = servletReq.getHeader(X_ATMOSPHERE_TRANSPORT);
            if (webSocketEnabled) {
                return false;
            } else if (transport != null && (transport.equals(JSONP_TRANSPORT) || transport.equals(LONG_POLLING_TRANSPORT))) {
                return false;
            }

            return outputJunk;
        } ##FSTMerge## ##FSTMerge## boolean outputJunk(boolean outputJunk) {
            boolean webSocketEnabled = false;
            if (servletReq.getHeaders("Connection") != null && servletReq.getHeaders("Connection").hasMoreElements()) {
                String[] e = ((Enumeration<String>) servletReq.getHeaders("Connection")).nextElement().split(",");
                for (String upgrade : e) {
                    if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) {
                        webSocketEnabled = true;
                        break;
                    }
                }
            }

            String transport = servletReq.getHeader(X_ATMOSPHERE_TRANSPORT);
            if (webSocketEnabled) {
                return false;
            } else if (transport != null && (transport.equals(JSONP_TRANSPORT) || transport.equals(LONG_POLLING_TRANSPORT))) {
                return false;
            }

            return outputJunk;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public ContainerResponse filter(final ContainerRequest request, final ContainerResponse response) {
            if (response.getMappedThrowable() != null) {
                return response;
            }

            AtmosphereResource<HttpServletRequest, HttpServletResponse> r =
                    (AtmosphereResource<HttpServletRequest, HttpServletResponse>) servletReq
                            .getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);

            if (Boolean.parseBoolean((String) servletReq.getAttribute(ApplicationConfig.SUPPORT_LOCATION_HEADER))) {
                useResumeAnnotation = true;
            }

            switch (action) {
                case ASYNCHRONOUS:
                    // Force the status code to 200 events independently of the value of the entity (null or not)
                    if (response.getStatus() == 204) {
                        response.setStatus(200);
                    }

                    String transport = servletReq.getHeader(X_ATMOSPHERE_TRANSPORT);
                    String broadcasterName = servletReq.getHeader(topic);
                    if (transport == null || broadcasterName == null) {
                        throw new WebApplicationException(new IllegalStateException("Must specify transport using header value "
                                +  X_ATMOSPHERE_TRANSPORT
                                +  " and uuid " + X_ATMOSPHERE_TRACKING_ID));
                    }
                    String subProtocol = (String) servletReq.getAttribute(FrameworkConfig.WEBSOCKET_SUBPROTOCOL);

                    final boolean waitForResource = waitFor == -1 ? true : false;
                    final Broadcaster bcaster = BroadcasterFactory.getDefault().lookup(broadcasterName, true);

                    if (!transport.startsWith(POLLING_TRANSPORT) && subProtocol == null) {
                        boolean outputJunk = transport.equalsIgnoreCase(STREAMING_TRANSPORT);
                        final boolean resumeOnBroadcast = resumeOnBroadcast(false);

                        for (Class<? extends AtmosphereResourceEventListener> listener : listeners) {
                            try {
                                AtmosphereResourceEventListener el = listener.newInstance();
                                InjectorProvider.getInjector().inject(el);
                                if (r instanceof AtmosphereEventLifecycle) {
                                    r.addEventListener(el);
                                }
                            } catch (Throwable t) {
                                throw new WebApplicationException(
                                        new IllegalStateException("Invalid AtmosphereResourceEventListener " + listener));
                            }
                        }
                        final Object entity = response.getEntity();

                        r.addEventListener(new AtmosphereResourceEventListenerAdapter() {
                            @Override
                            public void onSuspend(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
                                try {
                                    if (entity != null) {
                                        if (waitForResource) {
                                            bcaster.awaitAndBroadcast(entity, 30, TimeUnit.SECONDS);
                                        } else {
                                            bcaster.broadcast(entity);
                                        }
                                    }
                                } finally {
                                    event.getResource().removeEventListener(this);
                                }
                            }
                        });

                        if (resumeOnBroadcast) {
                            servletReq.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, new Boolean(true));
                        }

                        r.setBroadcaster(bcaster);
                        executeSuspend(r, timeout, outputJunk, resumeOnBroadcast, null, request, response, false);
                    } else {
                        Object entity = response.getEntity();
                        if (waitForResource) {
                            bcaster.awaitAndBroadcast(entity, 30, TimeUnit.SECONDS);
                        } else {
                            bcaster.broadcast(entity);
                        }

                        if (subProtocol == null) {
                            try {
                                if (Callable.class.isAssignableFrom(entity.getClass())) {
                                    entity = Callable.class.cast(entity).call();
                                }
                                response.setEntity(entity);
                                response.write();
                            } catch (Throwable t) {
                                logger.debug("Error running Callable", t);
                                response.setEntity(null);
                            }
                        } else {
                            response.setEntity(null);
                        }
                    }
                    break;
                case SUSPEND_RESPONSE:
                    SuspendResponse<?> s = SuspendResponse.class.cast(JResponseAsResponse.class.cast(response.getResponse()).getJResponse());

                    boolean outputJunk = outputJunk(s.outputComments());
                    boolean resumeOnBroadcast = resumeOnBroadcast(s.resumeOnBroadcast());

                    for (AtmosphereResourceEventListener el : s.listeners()) {
                        if (r instanceof AtmosphereEventLifecycle) {
                            r.addEventListener(el);
                        }
                    }

                    Broadcaster bc = s.broadcaster();
                    if (bc == null && s.scope() != Suspend.SCOPE.REQUEST) {
                        bc = (Broadcaster) servletReq.getAttribute(INJECTED_BROADCASTER);
                    }

                    boolean supportTrackable = servletReq.getAttribute(ApplicationConfig.SUPPORT_TRACKABLE) != null;
                    // Register our TrackableResource
                    boolean isTracked = response.getEntity() != null ? TrackableResource.class.isAssignableFrom(response.getEntity().getClass()) : supportTrackable;

                    TrackableResource<? extends Trackable> trackableResource = null;
                    if (isTracked) {
                        trackableResource = preTrack(request, response);
                    }

                    suspend(resumeOnBroadcast, outputJunk,
                            translateTimeUnit(s.period().value(), s.period().timeUnit()), request, response, bc, r, s.scope());

                    // Associate the tracked resource.
                    if (isTracked && trackableResource != null) {
                        postTrack(trackableResource, r);
                    }

                    break;
                case SUBSCRIBE_TRACKABLE:
                case SUBSCRIBE:
                case SUSPEND:
                case SUSPEND_TRACKABLE:
                case SUSPEND_RESUME:
                    outputJunk = outputJunk(outputComments);
                    resumeOnBroadcast = resumeOnBroadcast((action == Action.SUSPEND_RESUME));

                    for (Class<? extends AtmosphereResourceEventListener> listener : listeners) {
                        try {
                            AtmosphereResourceEventListener el = listener.newInstance();
                            InjectorProvider.getInjector().inject(el);
                            if (r instanceof AtmosphereEventLifecycle) {
                                ((AtmosphereEventLifecycle) r).addEventListener(el);
                            }
                        } catch (Throwable t) {
                            throw new WebApplicationException(
                                    new IllegalStateException("Invalid AtmosphereResourceEventListener " + listener, t));
                        }
                    }

                    Broadcaster broadcaster = (Broadcaster) servletReq.getAttribute(INJECTED_BROADCASTER);
                    // @Subscribe
                    if (action == Action.SUBSCRIBE) {
                        Class<Broadcaster> c = null;
                        try {
                            c = (Class<Broadcaster>) Class.forName((String) servletReq.getAttribute(ApplicationConfig.BROADCASTER_CLASS));
                        } catch (Throwable e) {
                            throw new IllegalStateException(e.getMessage());
                        }
                        broadcaster = BroadcasterFactory.getDefault().lookup(c, topic, true);
                    }

                    // Tracking is enabled by default
                    supportTrackable = servletReq.getAttribute(ApplicationConfig.SUPPORT_TRACKABLE) != null;
                    // Register our TrackableResource
                    isTracked = response.getEntity() != null ? TrackableResource.class.isAssignableFrom(response.getEntity().getClass()) : supportTrackable;

                    if (isTracked) {
                        trackableResource = preTrack(request, response);
                    } else {
                        trackableResource = null;
                    }

                    suspend(resumeOnBroadcast, outputJunk, timeout, request, response,
                            broadcaster, r, scope);

                    // Associate the tracked resource.
                    if (isTracked && trackableResource != null) {
                        postTrack(trackableResource, r);
                    }
                    break;
                case RESUME:
                    if (response.getEntity() != null) {
                        try {
                            response.write();
                        } catch (IOException ex) {
                            throw new WebApplicationException(ex);
                        }
                    }

                    boolean sessionSupported = (Boolean) servletReq.getAttribute(FrameworkConfig.SUPPORT_SESSION);
                    if (sessionSupported) {
                        r = (AtmosphereResource) servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
                    } else {
                        String path = response.getContainerRequest().getPath();
                        r = resumeCandidates.remove(path.substring(path.lastIndexOf("/") + 1));
                    }

                    if (r != null) {
                        resume(r);
                    } else {
                        throw new WebApplicationException(
                                new IllegalStateException("Unable to retrieve suspended Response. " +
                                        "Either session-support is not enabled in atmosphere.xml or the" +
                                        "path used to resume is invalid."));

                    }
                    break;
                case BROADCAST:
                case PUBLISH:
                case RESUME_ON_BROADCAST:
                    AtmosphereResource ar = (AtmosphereResource) servletReq.getAttribute(SUSPENDED_RESOURCE);
                    if (ar != null) {
                        r = ar;
                    }

                    if (action == Action.PUBLISH) {
                        Class<Broadcaster> c = null;
                        try {
                            c = (Class<Broadcaster>) Class.forName((String) servletReq.getAttribute(ApplicationConfig.BROADCASTER_CLASS));
                        } catch (Throwable e) {
                            throw new IllegalStateException(e.getMessage());
                        }
                        r.setBroadcaster(BroadcasterFactory.getDefault().lookup(c, topic, true));
                    }

                    broadcast(response, r, timeout);
                    break;
                case SCHEDULE:
                case SCHEDULE_RESUME:
                    Object o = response.getEntity();
                    Broadcaster b = r.getBroadcaster();
                    if (response.getEntity() instanceof Broadcastable) {
                        b = ((Broadcastable) response.getEntity()).getBroadcaster();
                        o = ((Broadcastable) response.getEntity()).getMessage();
                        response.setEntity(((Broadcastable) response.getEntity()).getResponseMessage());
                    }

                    if (response.getEntity() != null) {
                        try {
                            response.write();
                        } catch (IOException ex) {
                            throw new WebApplicationException(ex);
                        }
                    }

                    if (action == Action.SCHEDULE_RESUME) {
                        configureResumeOnBroadcast(b);
                    }

                    b.scheduleFixedBroadcast(o, waitFor, timeout, TimeUnit.SECONDS);
                    break;
            }

            return response;
        } ##FSTMerge## public ContainerResponse filter(ContainerRequest request, ContainerResponse response) {
            if (response.getMappedThrowable() != null) {
                return response;
            }

            AtmosphereResource<HttpServletRequest, HttpServletResponse> r =
                    (AtmosphereResource<HttpServletRequest, HttpServletResponse>) servletReq
                            .getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);

            boolean sessionSupported = (Boolean) servletReq.getAttribute(FrameworkConfig.SUPPORT_SESSION);

            switch (action) {
                case SUSPEND_RESPONSE:
                    SuspendResponse<?> s = SuspendResponse.class.cast(JResponseAsResponse.class.cast(response.getResponse()).getJResponse());

                    boolean outputJunk = outputJunk(request, s.outputComments());
                    boolean resumeOnBroadcast = resumeOnBroadcast(request, s.resumeOnBroadcast());

                    for (AtmosphereResourceEventListener el : s.listeners()) {
                        if (r instanceof AtmosphereEventLifecycle) {
                            ((AtmosphereEventLifecycle) r).addEventListener(el);
                        }
                    }

                    Broadcaster bc = s.broadcaster();
                    if (bc == null && s.scope() != Suspend.SCOPE.REQUEST) {
                        bc = (Broadcaster) servletReq.getAttribute(INJECTED_BROADCASTER);
                    }

                    boolean supportTrackable = servletReq.getAttribute(ApplicationConfig.SUPPORT_TRACKABLE) != null;
                    // Register our TrackableResource
                    boolean isTracked = response.getEntity() != null ? TrackableResource.class.isAssignableFrom(response.getEntity().getClass()) : supportTrackable;

                    TrackableResource<? extends Trackable> trackableResource = null;
                    if (isTracked) {
                        trackableResource = preTrack(request, response);
                    }

                    suspend(sessionSupported, resumeOnBroadcast, outputJunk,
                            translateTimeUnit(s.period().value(), s.period().timeUnit()), request, response, bc, r, s.scope());

                    // Associate the tracked resource.
                    if (isTracked && trackableResource != null) {
                        postTrack(trackableResource, r);
                    }

                    break;
                case SUBSCRIBE_TRACKABLE:
                case SUBSCRIBE:
                case SUSPEND:
                case SUSPEND_TRACKABLE:
                case SUSPEND_RESUME:
                    outputJunk = outputJunk(request, outputComments);
                    resumeOnBroadcast = resumeOnBroadcast(request, (action == Action.SUSPEND_RESUME));

                    for (Class<? extends AtmosphereResourceEventListener> listener : listeners) {
                        try {
                            AtmosphereResourceEventListener el = listener.newInstance();
                            InjectorProvider.getInjector().inject(el);
                            if (r instanceof AtmosphereEventLifecycle) {
                                ((AtmosphereEventLifecycle) r).addEventListener(el);
                            }
                        } catch (Throwable t) {
                            throw new WebApplicationException(
                                    new IllegalStateException("Invalid AtmosphereResourceEventListener " + listener, t));
                        }
                    }

                    Broadcaster broadcaster = (Broadcaster) servletReq.getAttribute(INJECTED_BROADCASTER);
                    // @Subscribe
                    if (action == Action.SUBSCRIBE) {
                        Class<Broadcaster> c = null;
                        try {
                            c = (Class<Broadcaster>) Class.forName((String) servletReq.getAttribute(ApplicationConfig.BROADCASTER_CLASS));
                        } catch (Throwable e) {
                            throw new IllegalStateException(e.getMessage());
                        }
                        broadcaster = BroadcasterFactory.getDefault().lookup(c, topic, true);
                    }

                    // Tracking is enabled by default
                    supportTrackable = servletReq.getAttribute(ApplicationConfig.SUPPORT_TRACKABLE) != null;
                    // Register our TrackableResource
                    isTracked = response.getEntity() != null ? TrackableResource.class.isAssignableFrom(response.getEntity().getClass()) : supportTrackable;

                    if (isTracked) {
                        trackableResource = preTrack(request, response);
                    } else {
                        trackableResource = null;
                    }

                    suspend(sessionSupported, resumeOnBroadcast, outputJunk, timeout, request, response,
                            broadcaster, r, scope);

                    // Associate the tracked resource.
                    if (isTracked && trackableResource != null) {
                        postTrack(trackableResource, r);
                    }
                    break;
                case RESUME:
                    if (response.getEntity() != null) {
                        try {
                            response.write();
                        } catch (IOException ex) {
                            throw new WebApplicationException(ex);
                        }
                    }

                    if (sessionSupported) {
                        r = (AtmosphereResource) servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
                    } else {
                        String path = response.getContainerRequest().getPath();
                        r = resumeCandidates.remove(path.substring(path.lastIndexOf("/") + 1));
                    }

                    if (r != null) {
                        resume(r);
                    } else {
                        throw new WebApplicationException(
                                new IllegalStateException("Unable to retrieve suspended Response. " +
                                        "Either session-support is not enabled in atmosphere.xml or the" +
                                        "path used to resume is invalid."));

                    }
                    break;
                case BROADCAST:
                case PUBLISH:
                case RESUME_ON_BROADCAST:
                    AtmosphereResource ar = (AtmosphereResource) servletReq.getAttribute(SUSPENDED_RESOURCE);
                    if (ar != null) {
                        r = ar;
                    }

                    if (action == Action.PUBLISH) {
                        Class<Broadcaster> c = null;
                        try {
                            c = (Class<Broadcaster>) Class.forName((String) servletReq.getAttribute(ApplicationConfig.BROADCASTER_CLASS));
                        } catch (Throwable e) {
                            throw new IllegalStateException(e.getMessage());
                        }
                        r.setBroadcaster(BroadcasterFactory.getDefault().lookup(c, topic, true));
                    }

                    broadcast(response, r, timeout);
                    break;
                case SCHEDULE:
                case SCHEDULE_RESUME:
                    Object o = response.getEntity();
                    Broadcaster b = r.getBroadcaster();
                    if (response.getEntity() instanceof Broadcastable) {
                        b = ((Broadcastable) response.getEntity()).getBroadcaster();
                        o = ((Broadcastable) response.getEntity()).getMessage();
                        response.setEntity(((Broadcastable) response.getEntity()).getResponseMessage());
                    }

                    if (response.getEntity() != null) {
                        try {
                            response.write();
                        } catch (IOException ex) {
                            throw new WebApplicationException(ex);
                        }
                    }

                    if (action == Action.SCHEDULE_RESUME) {
                        configureResumeOnBroadcast(b);
                    }

                    b.scheduleFixedBroadcast(o, waitFor, timeout, TimeUnit.SECONDS);
                    break;
            }

            return response;
        } ##FSTMerge## public ContainerResponse filter(final ContainerRequest request, final ContainerResponse response) {
            if (response.getMappedThrowable() != null) {
                return response;
            }

            AtmosphereResource<HttpServletRequest, HttpServletResponse> r =
                    (AtmosphereResource<HttpServletRequest, HttpServletResponse>) servletReq
                            .getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);

            if (Boolean.parseBoolean((String) servletReq.getAttribute(ApplicationConfig.SUPPORT_LOCATION_HEADER))) {
                useResumeAnnotation = true;
            }

            switch (action) {
                case ASYNCHRONOUS:
                    // Force the status code to 200 events independently of the value of the entity (null or not)
                    if (response.getStatus() == 204) {
                        response.setStatus(200);
                    }

                    String transport = servletReq.getHeader(X_ATMOSPHERE_TRANSPORT);
                    String broadcasterName = servletReq.getHeader(topic);
                    if (transport == null || broadcasterName == null) {
                        throw new WebApplicationException(new IllegalStateException("Must specify transport using header value "
                                +  X_ATMOSPHERE_TRANSPORT
                                +  " and uuid " + X_ATMOSPHERE_TRACKING_ID));
                    }
                    String subProtocol = (String) servletReq.getAttribute(FrameworkConfig.WEBSOCKET_SUBPROTOCOL);

                    final boolean waitForResource = waitFor == -1 ? true : false;
                    final Broadcaster bcaster = BroadcasterFactory.getDefault().lookup(broadcasterName, true);

                    if (!transport.startsWith(POLLING_TRANSPORT) && subProtocol == null) {
                        boolean outputJunk = transport.equalsIgnoreCase(STREAMING_TRANSPORT);
                        final boolean resumeOnBroadcast = resumeOnBroadcast(false);

                        for (Class<? extends AtmosphereResourceEventListener> listener : listeners) {
                            try {
                                AtmosphereResourceEventListener el = listener.newInstance();
                                InjectorProvider.getInjector().inject(el);
                                if (r instanceof AtmosphereEventLifecycle) {
                                    r.addEventListener(el);
                                }
                            } catch (Throwable t) {
                                throw new WebApplicationException(
                                        new IllegalStateException("Invalid AtmosphereResourceEventListener " + listener));
                            }
                        }
                        final Object entity = response.getEntity();

                        r.addEventListener(new AtmosphereResourceEventListenerAdapter() {
                            @Override
                            public void onSuspend(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
                                try {
                                    if (entity != null) {
                                        if (waitForResource) {
                                            bcaster.awaitAndBroadcast(entity, 30, TimeUnit.SECONDS);
                                        } else {
                                            bcaster.broadcast(entity);
                                        }
                                    }
                                } finally {
                                    event.getResource().removeEventListener(this);
                                }
                            }
                        });

                        if (resumeOnBroadcast) {
                            servletReq.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, new Boolean(true));
                        }

                        r.setBroadcaster(bcaster);
                        executeSuspend(r, timeout, outputJunk, resumeOnBroadcast, null, request, response, false);
                    } else {
                        Object entity = response.getEntity();
                        if (waitForResource) {
                            bcaster.awaitAndBroadcast(entity, 30, TimeUnit.SECONDS);
                        } else {
                            bcaster.broadcast(entity);
                        }

                        if (subProtocol == null) {
                            try {
                                if (Callable.class.isAssignableFrom(entity.getClass())) {
                                    entity = Callable.class.cast(entity).call();
                                }
                                response.setEntity(entity);
                                response.write();
                            } catch (Throwable t) {
                                logger.debug("Error running Callable", t);
                                response.setEntity(null);
                            }
                        } else {
                            response.setEntity(null);
                        }
                    }
                    break;
                case SUSPEND_RESPONSE:
                    SuspendResponse<?> s = SuspendResponse.class.cast(JResponseAsResponse.class.cast(response.getResponse()).getJResponse());

                    boolean outputJunk = outputJunk(s.outputComments());
                    boolean resumeOnBroadcast = resumeOnBroadcast(s.resumeOnBroadcast());

                    for (AtmosphereResourceEventListener el : s.listeners()) {
                        if (r instanceof AtmosphereEventLifecycle) {
                            r.addEventListener(el);
                        }
                    }

                    Broadcaster bc = s.broadcaster();
                    if (bc == null && s.scope() != Suspend.SCOPE.REQUEST) {
                        bc = (Broadcaster) servletReq.getAttribute(INJECTED_BROADCASTER);
                    }

                    boolean supportTrackable = servletReq.getAttribute(ApplicationConfig.SUPPORT_TRACKABLE) != null;
                    // Register our TrackableResource
                    boolean isTracked = response.getEntity() != null ? TrackableResource.class.isAssignableFrom(response.getEntity().getClass()) : supportTrackable;

                    TrackableResource<? extends Trackable> trackableResource = null;
                    if (isTracked) {
                        trackableResource = preTrack(request, response);
                    }

                    suspend(resumeOnBroadcast, outputJunk,
                            translateTimeUnit(s.period().value(), s.period().timeUnit()), request, response, bc, r, s.scope());

                    // Associate the tracked resource.
                    if (isTracked && trackableResource != null) {
                        postTrack(trackableResource, r);
                    }

                    break;
                case SUBSCRIBE_TRACKABLE:
                case SUBSCRIBE:
                case SUSPEND:
                case SUSPEND_TRACKABLE:
                case SUSPEND_RESUME:
                    outputJunk = outputJunk(outputComments);
                    resumeOnBroadcast = resumeOnBroadcast((action == Action.SUSPEND_RESUME));

                    for (Class<? extends AtmosphereResourceEventListener> listener : listeners) {
                        try {
                            AtmosphereResourceEventListener el = listener.newInstance();
                            InjectorProvider.getInjector().inject(el);
                            if (r instanceof AtmosphereEventLifecycle) {
                                ((AtmosphereEventLifecycle) r).addEventListener(el);
                            }
                        } catch (Throwable t) {
                            throw new WebApplicationException(
                                    new IllegalStateException("Invalid AtmosphereResourceEventListener " + listener, t));
                        }
                    }

                    Broadcaster broadcaster = (Broadcaster) servletReq.getAttribute(INJECTED_BROADCASTER);
                    // @Subscribe
                    if (action == Action.SUBSCRIBE) {
                        Class<Broadcaster> c = null;
                        try {
                            c = (Class<Broadcaster>) Class.forName((String) servletReq.getAttribute(ApplicationConfig.BROADCASTER_CLASS));
                        } catch (Throwable e) {
                            throw new IllegalStateException(e.getMessage());
                        }
                        broadcaster = BroadcasterFactory.getDefault().lookup(c, topic, true);
                    }

                    // Tracking is enabled by default
                    supportTrackable = servletReq.getAttribute(ApplicationConfig.SUPPORT_TRACKABLE) != null;
                    // Register our TrackableResource
                    isTracked = response.getEntity() != null ? TrackableResource.class.isAssignableFrom(response.getEntity().getClass()) : supportTrackable;

                    if (isTracked) {
                        trackableResource = preTrack(request, response);
                    } else {
                        trackableResource = null;
                    }

                    suspend(resumeOnBroadcast, outputJunk, timeout, request, response,
                            broadcaster, r, scope);

                    // Associate the tracked resource.
                    if (isTracked && trackableResource != null) {
                        postTrack(trackableResource, r);
                    }
                    break;
                case RESUME:
                    if (response.getEntity() != null) {
                        try {
                            response.write();
                        } catch (IOException ex) {
                            throw new WebApplicationException(ex);
                        }
                    }

                    boolean sessionSupported = (Boolean) servletReq.getAttribute(FrameworkConfig.SUPPORT_SESSION);
                    if (sessionSupported) {
                        r = (AtmosphereResource) servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
                    } else {
                        String path = response.getContainerRequest().getPath();
                        r = resumeCandidates.remove(path.substring(path.lastIndexOf("/") + 1));
                    }

                    if (r != null) {
                        resume(r);
                    } else {
                        throw new WebApplicationException(
                                new IllegalStateException("Unable to retrieve suspended Response. " +
                                        "Either session-support is not enabled in atmosphere.xml or the" +
                                        "path used to resume is invalid."));

                    }
                    break;
                case BROADCAST:
                case PUBLISH:
                case RESUME_ON_BROADCAST:
                    AtmosphereResource ar = (AtmosphereResource) servletReq.getAttribute(SUSPENDED_RESOURCE);
                    if (ar != null) {
                        r = ar;
                    }

                    if (action == Action.PUBLISH) {
                        Class<Broadcaster> c = null;
                        try {
                            c = (Class<Broadcaster>) Class.forName((String) servletReq.getAttribute(ApplicationConfig.BROADCASTER_CLASS));
                        } catch (Throwable e) {
                            throw new IllegalStateException(e.getMessage());
                        }
                        r.setBroadcaster(BroadcasterFactory.getDefault().lookup(c, topic, true));
                    }

                    broadcast(response, r, timeout);
                    break;
                case SCHEDULE:
                case SCHEDULE_RESUME:
                    Object o = response.getEntity();
                    Broadcaster b = r.getBroadcaster();
                    if (response.getEntity() instanceof Broadcastable) {
                        b = ((Broadcastable) response.getEntity()).getBroadcaster();
                        o = ((Broadcastable) response.getEntity()).getMessage();
                        response.setEntity(((Broadcastable) response.getEntity()).getResponseMessage());
                    }

                    if (response.getEntity() != null) {
                        try {
                            response.write();
                        } catch (IOException ex) {
                            throw new WebApplicationException(ex);
                        }
                    }

                    if (action == Action.SCHEDULE_RESUME) {
                        configureResumeOnBroadcast(b);
                    }

                    b.scheduleFixedBroadcast(o, waitFor, timeout, TimeUnit.SECONDS);
                    break;
            }

            return response;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void suspend(boolean resumeOnBroadcast,
                     boolean comments,
                     long timeout,
                     ContainerRequest request,
                     ContainerResponse response,
                     Broadcaster bc,
                     AtmosphereResource<HttpServletRequest, HttpServletResponse> r,
                     Suspend.SCOPE localScope) {

            // Force the status code to 200 events independently of the value of the entity (null or not)
            if (response.getStatus() == 204) {
                response.setStatus(200);
            }

            BroadcasterFactory broadcasterFactory = (BroadcasterFactory) servletReq
                    .getAttribute(ApplicationConfig.BROADCASTER_FACTORY);

            boolean sessionSupported = (Boolean) servletReq.getAttribute(FrameworkConfig.SUPPORT_SESSION);
            URI location = null;
            // Do not add location header if already there.
            if (useResumeAnnotation && !sessionSupported && !resumeOnBroadcast && response.getHttpHeaders().getFirst("Location") == null) {
                String uuid = UUID.randomUUID().toString();

                location = uriInfo.getAbsolutePathBuilder().path(uuid).build("");

                resumeCandidates.put(uuid, r);
                servletReq.setAttribute(RESUME_UUID, uuid);
                servletReq.setAttribute(RESUME_CANDIDATES, resumeCandidates);
            }

            if (bc == null && localScope != Suspend.SCOPE.REQUEST) {
                bc = r.getBroadcaster();
            }

            if (sessionSupported && localScope != Suspend.SCOPE.REQUEST && servletReq.getSession().getAttribute(SUSPENDED_RESOURCE) != null) {
                AtmosphereResource<HttpServletRequest, HttpServletResponse> cached =
                        (AtmosphereResource) servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
                bc = cached.getBroadcaster();
                // Just in case something went wrong.
                try {
                    bc.removeAtmosphereResource(cached);
                } catch (IllegalStateException ex) {
                    logger.trace(ex.getMessage(), ex);
                }
            }

            if (response.getEntity() instanceof Broadcastable) {
                Broadcastable b = (Broadcastable) response.getEntity();
                bc = b.getBroadcaster();
                response.setEntity(b.getResponseMessage());
            }

            if ((localScope == Suspend.SCOPE.REQUEST) && bc == null) {
                if (bc == null) {
                    try {
                        String id = servletReq.getHeader(X_ATMOSPHERE_TRACKING_ID);
                        if (id == null) {
                            id = UUID.randomUUID().toString();
                        }

                        bc = broadcasterFactory.get(id);
                        bc.setScope(Broadcaster.SCOPE.REQUEST);
                    } catch (Exception ex) {
                        logger.error("failed to instantiate broadcaster with factory: " + broadcasterFactory, ex);
                    }
                } else {
                    bc.setScope(Broadcaster.SCOPE.REQUEST);
                }
            }
            r.setBroadcaster(bc);

            if (resumeOnBroadcast) {
                servletReq.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, new Boolean(true));
            }

            executeSuspend(r, timeout, comments, resumeOnBroadcast, location, request, response, true);

        } ##FSTMerge## ##FSTMerge## void suspend(boolean resumeOnBroadcast,
                     boolean comments,
                     long timeout,
                     ContainerRequest request,
                     ContainerResponse response,
                     Broadcaster bc,
                     AtmosphereResource<HttpServletRequest, HttpServletResponse> r,
                     Suspend.SCOPE localScope) {

            // Force the status code to 200 events independently of the value of the entity (null or not)
            if (response.getStatus() == 204) {
                response.setStatus(200);
            }

            BroadcasterFactory broadcasterFactory = (BroadcasterFactory) servletReq
                    .getAttribute(ApplicationConfig.BROADCASTER_FACTORY);

            boolean sessionSupported = (Boolean) servletReq.getAttribute(FrameworkConfig.SUPPORT_SESSION);
            URI location = null;
            // Do not add location header if already there.
            if (useResumeAnnotation && !sessionSupported && !resumeOnBroadcast && response.getHttpHeaders().getFirst("Location") == null) {
                String uuid = UUID.randomUUID().toString();

                location = uriInfo.getAbsolutePathBuilder().path(uuid).build("");

                resumeCandidates.put(uuid, r);
                servletReq.setAttribute(RESUME_UUID, uuid);
                servletReq.setAttribute(RESUME_CANDIDATES, resumeCandidates);
            }

            if (bc == null && localScope != Suspend.SCOPE.REQUEST) {
                bc = r.getBroadcaster();
            }

            if (sessionSupported && localScope != Suspend.SCOPE.REQUEST && servletReq.getSession().getAttribute(SUSPENDED_RESOURCE) != null) {
                AtmosphereResource<HttpServletRequest, HttpServletResponse> cached =
                        (AtmosphereResource) servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
                bc = cached.getBroadcaster();
                // Just in case something went wrong.
                try {
                    bc.removeAtmosphereResource(cached);
                } catch (IllegalStateException ex) {
                    logger.trace(ex.getMessage(), ex);
                }
            }

            if (response.getEntity() instanceof Broadcastable) {
                Broadcastable b = (Broadcastable) response.getEntity();
                bc = b.getBroadcaster();
                response.setEntity(b.getResponseMessage());
            }

            if ((localScope == Suspend.SCOPE.REQUEST) && bc == null) {
                if (bc == null) {
                    try {
                        String id = servletReq.getHeader(X_ATMOSPHERE_TRACKING_ID);
                        if (id == null) {
                            id = UUID.randomUUID().toString();
                        }

                        bc = broadcasterFactory.get(id);
                        bc.setScope(Broadcaster.SCOPE.REQUEST);
                    } catch (Exception ex) {
                        logger.error("failed to instantiate broadcaster with factory: " + broadcasterFactory, ex);
                    }
                } else {
                    bc.setScope(Broadcaster.SCOPE.REQUEST);
                }
            }
            r.setBroadcaster(bc);

            if (resumeOnBroadcast) {
                servletReq.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, new Boolean(true));
            }

            executeSuspend(r, timeout, comments, resumeOnBroadcast, location, request, response, true);

        }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void executeSuspend(AtmosphereResource r,
                            long timeout,
                            boolean comments,
                            boolean resumeOnBroadcast,
                            URI location,
                            ContainerRequest request,
                            ContainerResponse response,
                            boolean flushEntity) {

            boolean sessionSupported = (Boolean) servletReq.getAttribute(FrameworkConfig.SUPPORT_SESSION);
            configureFilter(r.getBroadcaster());
            if (sessionSupported) {
                servletReq.getSession().setAttribute(SUSPENDED_RESOURCE, r);
                servletReq.getSession().setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);
            }

            servletReq.setAttribute(SUSPENDED_RESOURCE, r);
            servletReq.setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);

            logger.debug("Linked HttpServletRequest {} with ContainerResponse {}", servletReq, response);
            // Set the content-type based on the returned entity.
            try {
                MediaType contentType = response.getMediaType();
                if (contentType == null && response.getEntity() != null) {
                    LinkedList<MediaType> l = new LinkedList<MediaType>();
                    // Will retrun the first
                    l.add(request.getAcceptableMediaType(new LinkedList<MediaType>()));
                    contentType = response.getMessageBodyWorkers().getMessageBodyWriterMediaType(
                            response.getEntity().getClass(),
                            response.getEntityType(),
                            response.getAnnotations(),
                            l);

                    if (contentType == null ||
                            contentType.isWildcardType() || contentType.isWildcardSubtype())
                        contentType = MediaType.APPLICATION_OCTET_STREAM_TYPE;
                }

                Object entity = response.getEntity();

                Response.ResponseBuilder b = Response.ok();
                b = configureHeaders(b);
                if (entity != null) {
                    b = b.header("Content-Type", contentType != null ?
                            contentType.toString() : "text/html; charset=ISO-8859-1");
                    servletReq.setAttribute(FrameworkConfig.EXPECTED_CONTENT_TYPE, contentType.toString());
                }

                boolean eclipse362468 = false;
                String serverInfo = r.getAtmosphereConfig().getServletContext().getServerInfo();
                if (serverInfo.indexOf("jetty") != -1) {
                    try {
                        String[] jettyVersion = serverInfo.substring(6).split("\\.");
                        // https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468
                        eclipse362468 = ((Integer.valueOf(jettyVersion[0]) == 8 && Integer.valueOf(jettyVersion[1]) == 0 && Integer.valueOf(jettyVersion[2]) > 1))
                                || ((Integer.valueOf(jettyVersion[0]) == 7 && Integer.valueOf(jettyVersion[1]) == 5 && Integer.valueOf(jettyVersion[2]) == 4));
                    } catch (Throwable t) {
                        logger.warn("Unable to parse server name {}", serverInfo);
                    }

                    if (comments && eclipse362468) {
                        logger.debug("Padding response is disabled to workaround https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468");
                    }
                }

                if (!eclipse362468 && comments && !resumeOnBroadcast) {
                    String padding = (String) servletReq.getAttribute(ApplicationConfig.STREAMING_PADDING_MODE);
                    String paddingData = AtmosphereResourceImpl.createStreamingPadding(padding);

                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                        location = null;
                    }
                    response.setResponse(b.entity(paddingData).build());
                    response.write();
                }

                if (entity != null && flushEntity) {
                    try {
                        if (Callable.class.isAssignableFrom(entity.getClass())) {
                            entity = Callable.class.cast(entity).call();
                        }
                    } catch (Throwable t) {
                        logger.error("Error executing callable {}", entity);
                        entity = null;
                    }

                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                    }
                    response.setResponse(b.entity(entity).build());
                    response.write();
                }

                response.setEntity(null);
                r.suspend(timeout, false);
            } catch (IOException ex) {
                throw new WebApplicationException(ex);
            }
        } ##FSTMerge## ##FSTMerge## void executeSuspend(AtmosphereResource r,
                            long timeout,
                            boolean comments,
                            boolean resumeOnBroadcast,
                            URI location,
                            ContainerRequest request,
                            ContainerResponse response,
                            boolean flushEntity) {

            boolean sessionSupported = (Boolean) servletReq.getAttribute(FrameworkConfig.SUPPORT_SESSION);
            configureFilter(r.getBroadcaster());
            if (sessionSupported) {
                servletReq.getSession().setAttribute(SUSPENDED_RESOURCE, r);
                servletReq.getSession().setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);
            }

            servletReq.setAttribute(SUSPENDED_RESOURCE, r);
            servletReq.setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);

            logger.debug("Linked HttpServletRequest {} with ContainerResponse {}", servletReq, response);
            // Set the content-type based on the returned entity.
            try {
                MediaType contentType = response.getMediaType();
                if (contentType == null && response.getEntity() != null) {
                    LinkedList<MediaType> l = new LinkedList<MediaType>();
                    // Will retrun the first
                    l.add(request.getAcceptableMediaType(new LinkedList<MediaType>()));
                    contentType = response.getMessageBodyWorkers().getMessageBodyWriterMediaType(
                            response.getEntity().getClass(),
                            response.getEntityType(),
                            response.getAnnotations(),
                            l);

                    if (contentType == null ||
                            contentType.isWildcardType() || contentType.isWildcardSubtype())
                        contentType = MediaType.APPLICATION_OCTET_STREAM_TYPE;
                }

                Object entity = response.getEntity();

                Response.ResponseBuilder b = Response.ok();
                b = configureHeaders(b);
                if (entity != null) {
                    b = b.header("Content-Type", contentType != null ?
                            contentType.toString() : "text/html; charset=ISO-8859-1");
                    servletReq.setAttribute(FrameworkConfig.EXPECTED_CONTENT_TYPE, contentType.toString());
                }

                boolean eclipse362468 = false;
                String serverInfo = r.getAtmosphereConfig().getServletContext().getServerInfo();
                if (serverInfo.indexOf("jetty") != -1) {
                    String[] jettyVersion = serverInfo.substring(6).split("\\.");
                    // https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468
                    eclipse362468 = ((Integer.valueOf(jettyVersion[0]) == 8 && Integer.valueOf(jettyVersion[1]) == 0 && Integer.valueOf(jettyVersion[2]) > 1))
                            || ((Integer.valueOf(jettyVersion[0]) == 7 && Integer.valueOf(jettyVersion[1]) == 5 && Integer.valueOf(jettyVersion[2]) == 4));

                    if (comments && eclipse362468) {
                        logger.debug("Padding response is disabled to workaround https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468");
                    }
                }

                if (!eclipse362468 && comments && !resumeOnBroadcast) {
                    String padding = (String) servletReq.getAttribute(ApplicationConfig.STREAMING_PADDING_MODE);
                    String paddingData = AtmosphereResourceImpl.createStreamingPadding(padding);

                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                        location = null;
                    }
                    response.setResponse(b.entity(paddingData).build());
                    response.write();
                }

                if (entity != null && flushEntity) {
                    try {
                        if (Callable.class.isAssignableFrom(entity.getClass())) {
                            entity = Callable.class.cast(entity).call();
                        }
                    } catch (Throwable t) {
                        logger.error("Error executing callable {}", entity);
                        entity = null;
                    }

                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                    }
                    response.setResponse(b.entity(entity).build());
                    response.write();
                }

                response.setEntity(null);
                r.suspend(timeout, false);
            } catch (IOException ex) {
                throw new WebApplicationException(ex);
            }
        }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public List<ResourceFilter> create(AbstractMethod am) {
        LinkedList<ResourceFilter> list = new LinkedList<ResourceFilter>();
        Filter f;

        if (logger.isDebugEnabled()) {
            for (Annotation annotation : am.getAnnotations()) {
                logger.debug("AtmosphereFilter processing annotation: {}", annotation);
            }
        }

        if (am.getMethod() == null) {
            return null;
        }

        if (SuspendResponse.class.isAssignableFrom(am.getMethod().getReturnType())) {
            list.addLast(new Filter(Action.SUSPEND_RESPONSE));
            return list;
        }

        if (am.isAnnotationPresent(Broadcast.class)) {
            int delay = am.getAnnotation(Broadcast.class).delay();
            Class[] broadcastFilter = am.getAnnotation(Broadcast.class).value();

            if (am.getAnnotation(Broadcast.class).resumeOnBroadcast()) {
                f = new Filter(Action.RESUME_ON_BROADCAST, delay, 0, Suspend.SCOPE.APPLICATION, true, broadcastFilter, null);
            } else {
                f = new Filter(Action.BROADCAST, delay, 0, Suspend.SCOPE.APPLICATION, true, broadcastFilter, null);
            }

            list.addLast(f);

            if (am.isAnnotationPresent(Cluster.class)) {
                broadcastFilter = am.getAnnotation(Cluster.class).value();
                for (Class<ClusterBroadcastFilter> c : broadcastFilter) {
                    try {
                        ClusterBroadcastFilter cbf = c.newInstance();
                        InjectorProvider.getInjector().inject(cbf);
                        cbf.setUri(am.getAnnotation(Cluster.class).name());
                        f.addCluster(cbf);
                    } catch (Throwable t) {
                        logger.warn("Invalid ClusterBroadcastFilter", t);
                    }
                }
            }
        }

        if (am.isAnnotationPresent(Asynchronous.class)) {
            int suspendTimeout = am.getAnnotation(Asynchronous.class).period();
            Class[] broadcastFilter = am.getAnnotation(Asynchronous.class).broadcastFilter();

            boolean wait = am.getAnnotation(Asynchronous.class).waitForResource();
            f = new Filter(Action.ASYNCHRONOUS, suspendTimeout, wait ? -1 : 0, null, false, broadcastFilter, am.getAnnotation(Asynchronous.class).header());
            f.setListeners(am.getAnnotation(Asynchronous.class).eventListeners());
            list.addFirst(f);
        }

        if (am.isAnnotationPresent(Suspend.class)) {

            long suspendTimeout = am.getAnnotation(Suspend.class).period();
            TimeUnit tu = am.getAnnotation(Suspend.class).timeUnit();
            suspendTimeout = translateTimeUnit(suspendTimeout, tu);

            Suspend.SCOPE scope = am.getAnnotation(Suspend.class).scope();
            boolean outputComments = am.getAnnotation(Suspend.class).outputComments();

            boolean trackable = false;
            if (TrackableResource.class.isAssignableFrom(am.getMethod().getReturnType())) {
                trackable = true;
            }

            if (am.getAnnotation(Suspend.class).resumeOnBroadcast()) {
                f = new Filter(trackable ? Action.SUSPEND_TRACKABLE : Action.SUSPEND_RESUME, suspendTimeout, 0, scope, outputComments);
            } else {
                f = new Filter(trackable ? Action.SUSPEND_TRACKABLE : Action.SUSPEND, suspendTimeout, 0, scope, outputComments);
            }
            f.setListeners(am.getAnnotation(Suspend.class).listeners());

            list.addFirst(f);
        }

        if (am.isAnnotationPresent(Subscribe.class)) {
            boolean trackable = false;
            if (TrackableResource.class.isAssignableFrom(am.getMethod().getReturnType())) {
                trackable = true;
            }

            f = new Filter(trackable ? Action.SUBSCRIBE_TRACKABLE : Action.SUBSCRIBE, 30000, -1, Suspend.SCOPE.APPLICATION,
                    false, null, am.getAnnotation(Subscribe.class).value());
            f.setListeners(am.getAnnotation(Subscribe.class).listeners());

            list.addFirst(f);
        }

        if (am.isAnnotationPresent(Publish.class)) {
            f = new Filter(Action.PUBLISH, -1, -1, Suspend.SCOPE.APPLICATION,
                    false, null, am.getAnnotation(Publish.class).value());
            list.addFirst(f);
        }

        if (am.isAnnotationPresent(Resume.class)) {
            useResumeAnnotation = true;
            int suspendTimeout = am.getAnnotation(Resume.class).value();
            list.addFirst(new Filter(Action.RESUME, suspendTimeout));
        }

        if (am.isAnnotationPresent(Schedule.class)) {
            int period = am.getAnnotation(Schedule.class).period();
            int waitFor = am.getAnnotation(Schedule.class).waitFor();

            if (am.getAnnotation(Schedule.class).resumeOnBroadcast()) {
                list.addFirst(new Filter(Action.SCHEDULE_RESUME, period, waitFor));
            } else {
                list.addFirst(new Filter(Action.SCHEDULE, period, waitFor));
            }
        }

        // Nothing, normal Jersey application.
        return list.size() > 0 ? list : null;
    } ##FSTMerge## public List<ResourceFilter> create(AbstractMethod am) {
        LinkedList<ResourceFilter> list = new LinkedList<ResourceFilter>();
        Filter f;

        if (logger.isDebugEnabled()) {
            for (Annotation annotation : am.getAnnotations()) {
                logger.debug("AtmosphereFilter processing annotation: {}", annotation);
            }
        }

        if (am.getMethod() == null) {
            return null;
        }

        if (SuspendResponse.class.isAssignableFrom(am.getMethod().getReturnType())) {
            list.addLast(new Filter(Action.SUSPEND_RESPONSE));
            return list;
        }

        if (am.isAnnotationPresent(Broadcast.class)) {
            int delay = am.getAnnotation(Broadcast.class).delay();
            Class[] suspendTimeout = am.getAnnotation(Broadcast.class).value();

            if (am.getAnnotation(Broadcast.class).resumeOnBroadcast()) {
                f = new Filter(Action.RESUME_ON_BROADCAST, delay, 0, Suspend.SCOPE.APPLICATION, true, suspendTimeout, null);
            } else {
                f = new Filter(Action.BROADCAST, delay, 0, Suspend.SCOPE.APPLICATION, true, suspendTimeout, null);
            }

            list.addLast(f);

            if (am.isAnnotationPresent(Cluster.class)) {
                suspendTimeout = am.getAnnotation(Cluster.class).value();
                for (Class<ClusterBroadcastFilter> c : suspendTimeout) {
                    try {
                        ClusterBroadcastFilter cbf = c.newInstance();
                        InjectorProvider.getInjector().inject(cbf);
                        cbf.setUri(am.getAnnotation(Cluster.class).name());
                        f.addCluster(cbf);
                    } catch (Throwable t) {
                        logger.warn("Invalid ClusterBroadcastFilter", t);
                    }
                }
            }
        }

        if (am.isAnnotationPresent(Suspend.class)) {

            long suspendTimeout = am.getAnnotation(Suspend.class).period();
            TimeUnit tu = am.getAnnotation(Suspend.class).timeUnit();
            suspendTimeout = translateTimeUnit(suspendTimeout, tu);

            Suspend.SCOPE scope = am.getAnnotation(Suspend.class).scope();
            boolean outputComments = am.getAnnotation(Suspend.class).outputComments();

            boolean trackable = false;
            if (TrackableResource.class.isAssignableFrom(am.getMethod().getReturnType())) {
                trackable = true;
            }

            if (am.getAnnotation(Suspend.class).resumeOnBroadcast()) {
                f = new Filter(trackable ? Action.SUSPEND_TRACKABLE : Action.SUSPEND_RESUME, suspendTimeout, 0, scope, outputComments);
            } else {
                f = new Filter(trackable ? Action.SUSPEND_TRACKABLE : Action.SUSPEND, suspendTimeout, 0, scope, outputComments);
            }
            f.setListeners(am.getAnnotation(Suspend.class).listeners());

            list.addFirst(f);
        }

        if (am.isAnnotationPresent(Subscribe.class)) {
            boolean trackable = false;
            if (TrackableResource.class.isAssignableFrom(am.getMethod().getReturnType())) {
                trackable = true;
            }

            f = new Filter(trackable ? Action.SUBSCRIBE_TRACKABLE : Action.SUBSCRIBE, 30000, -1, Suspend.SCOPE.APPLICATION,
                    false, null, am.getAnnotation(Subscribe.class).value());
            f.setListeners(am.getAnnotation(Subscribe.class).listeners());

            list.addFirst(f);
        }

        if (am.isAnnotationPresent(Publish.class)) {
            f = new Filter(Action.PUBLISH, -1, -1, Suspend.SCOPE.APPLICATION,
                    false, null, am.getAnnotation(Publish.class).value());
            list.addFirst(f);
        }

        if (am.isAnnotationPresent(Resume.class)) {
            int suspendTimeout = am.getAnnotation(Resume.class).value();
            list.addFirst(new Filter(Action.RESUME, suspendTimeout));
        }

        if (am.isAnnotationPresent(Schedule.class)) {
            int period = am.getAnnotation(Schedule.class).period();
            int waitFor = am.getAnnotation(Schedule.class).waitFor();

            if (am.getAnnotation(Schedule.class).resumeOnBroadcast()) {
                list.addFirst(new Filter(Action.SCHEDULE_RESUME, period, waitFor));
            } else {
                list.addFirst(new Filter(Action.SCHEDULE, period, waitFor));
            }
        }

        // Nothing, normal Jersey application.
        return list.size() > 0 ? list : null;
    } ##FSTMerge## public List<ResourceFilter> create(AbstractMethod am) {
        LinkedList<ResourceFilter> list = new LinkedList<ResourceFilter>();
        Filter f;

        if (logger.isDebugEnabled()) {
            for (Annotation annotation : am.getAnnotations()) {
                logger.debug("AtmosphereFilter processing annotation: {}", annotation);
            }
        }

        if (am.getMethod() == null) {
            return null;
        }

        if (SuspendResponse.class.isAssignableFrom(am.getMethod().getReturnType())) {
            list.addLast(new Filter(Action.SUSPEND_RESPONSE));
            return list;
        }

        if (am.isAnnotationPresent(Broadcast.class)) {
            int delay = am.getAnnotation(Broadcast.class).delay();
            Class[] broadcastFilter = am.getAnnotation(Broadcast.class).value();

            if (am.getAnnotation(Broadcast.class).resumeOnBroadcast()) {
                f = new Filter(Action.RESUME_ON_BROADCAST, delay, 0, Suspend.SCOPE.APPLICATION, true, broadcastFilter, null);
            } else {
                f = new Filter(Action.BROADCAST, delay, 0, Suspend.SCOPE.APPLICATION, true, broadcastFilter, null);
            }

            list.addLast(f);

            if (am.isAnnotationPresent(Cluster.class)) {
                broadcastFilter = am.getAnnotation(Cluster.class).value();
                for (Class<ClusterBroadcastFilter> c : broadcastFilter) {
                    try {
                        ClusterBroadcastFilter cbf = c.newInstance();
                        InjectorProvider.getInjector().inject(cbf);
                        cbf.setUri(am.getAnnotation(Cluster.class).name());
                        f.addCluster(cbf);
                    } catch (Throwable t) {
                        logger.warn("Invalid ClusterBroadcastFilter", t);
                    }
                }
            }
        }

        if (am.isAnnotationPresent(Asynchronous.class)) {
            int suspendTimeout = am.getAnnotation(Asynchronous.class).period();
            Class[] broadcastFilter = am.getAnnotation(Asynchronous.class).broadcastFilter();

            boolean wait = am.getAnnotation(Asynchronous.class).waitForResource();
            f = new Filter(Action.ASYNCHRONOUS, suspendTimeout, wait ? -1 : 0, null, false, broadcastFilter, am.getAnnotation(Asynchronous.class).header());
            f.setListeners(am.getAnnotation(Asynchronous.class).eventListeners());
            list.addFirst(f);
        }

        if (am.isAnnotationPresent(Suspend.class)) {

            long suspendTimeout = am.getAnnotation(Suspend.class).period();
            TimeUnit tu = am.getAnnotation(Suspend.class).timeUnit();
            suspendTimeout = translateTimeUnit(suspendTimeout, tu);

            Suspend.SCOPE scope = am.getAnnotation(Suspend.class).scope();
            boolean outputComments = am.getAnnotation(Suspend.class).outputComments();

            boolean trackable = false;
            if (TrackableResource.class.isAssignableFrom(am.getMethod().getReturnType())) {
                trackable = true;
            }

            if (am.getAnnotation(Suspend.class).resumeOnBroadcast()) {
                f = new Filter(trackable ? Action.SUSPEND_TRACKABLE : Action.SUSPEND_RESUME, suspendTimeout, 0, scope, outputComments);
            } else {
                f = new Filter(trackable ? Action.SUSPEND_TRACKABLE : Action.SUSPEND, suspendTimeout, 0, scope, outputComments);
            }
            f.setListeners(am.getAnnotation(Suspend.class).listeners());

            list.addFirst(f);
        }

        if (am.isAnnotationPresent(Subscribe.class)) {
            boolean trackable = false;
            if (TrackableResource.class.isAssignableFrom(am.getMethod().getReturnType())) {
                trackable = true;
            }

            f = new Filter(trackable ? Action.SUBSCRIBE_TRACKABLE : Action.SUBSCRIBE, 30000, -1, Suspend.SCOPE.APPLICATION,
                    false, null, am.getAnnotation(Subscribe.class).value());
            f.setListeners(am.getAnnotation(Subscribe.class).listeners());

            list.addFirst(f);
        }

        if (am.isAnnotationPresent(Publish.class)) {
            f = new Filter(Action.PUBLISH, -1, -1, Suspend.SCOPE.APPLICATION,
                    false, null, am.getAnnotation(Publish.class).value());
            list.addFirst(f);
        }

        if (am.isAnnotationPresent(Resume.class)) {
            useResumeAnnotation = true;
            int suspendTimeout = am.getAnnotation(Resume.class).value();
            list.addFirst(new Filter(Action.RESUME, suspendTimeout));
        }

        if (am.isAnnotationPresent(Schedule.class)) {
            int period = am.getAnnotation(Schedule.class).period();
            int waitFor = am.getAnnotation(Schedule.class).waitFor();

            if (am.getAnnotation(Schedule.class).resumeOnBroadcast()) {
                list.addFirst(new Filter(Action.SCHEDULE_RESUME, period, waitFor));
            } else {
                list.addFirst(new Filter(Action.SCHEDULE, period, waitFor));
            }
        }

        // Nothing, normal Jersey application.
        return list.size() > 0 ? list : null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String POLLING_TRANSPORT = "polling"; ##FSTMerge## ##FSTMerge## String POLLING_TRANSPORT = "polling";
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/HeaderConfig.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String WEBSOCKET_SUBPROTOCOL = "websocket-subprotocol"; ##FSTMerge## ##FSTMerge## String WEBSOCKET_SUBPROTOCOL = "websocket-subprotocol";
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/FrameworkConfig.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String SIMPLE_HTTP_OVER_WEBSOCKET = "polling-websocket-message"; ##FSTMerge## ##FSTMerge## String SIMPLE_HTTP_OVER_WEBSOCKET = "polling-websocket-message";
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/FrameworkConfig.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String CANCEL_SUSPEND_OPERATION = "doNotSuspend"; ##FSTMerge## ##FSTMerge## String CANCEL_SUSPEND_OPERATION = "doNotSuspend";
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/FrameworkConfig.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private Broadcaster createBroadcaster(Class<? extends Broadcaster> c, Object id) throws BroadcasterCreationException {
        try {
            Broadcaster b = c.getConstructor(String.class, AtmosphereServlet.AtmosphereConfig.class).newInstance(id.toString(), config);
            InjectorProvider.getInjector().inject(b);

            if (b.getBroadcasterConfig() == null) {
                b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config));
            }

            b.setBroadcasterLifeCyclePolicy(policy);
            if (DefaultBroadcaster.class.isAssignableFrom(clazz)) {
                DefaultBroadcaster.class.cast(b).start();
            }
            return b;
        } catch (Throwable t) {
            throw new BroadcasterCreationException(t);
        }
    } ##FSTMerge## private Broadcaster createBroadcaster(Class<? extends Broadcaster> c, Object id) throws BroadcasterCreationException {
        try {
            Broadcaster b = c.getConstructor(String.class, AtmosphereServlet.AtmosphereConfig.class).newInstance(id.toString(), config);
            InjectorProvider.getInjector().inject(b);
            b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config));
            b.setBroadcasterLifeCyclePolicy(policy);
            if (DefaultBroadcaster.class.isAssignableFrom(clazz)) {
                DefaultBroadcaster.class.cast(b).start();
            }
            return b;
        } catch (Throwable t) {
            throw new BroadcasterCreationException(t);
        }
    } ##FSTMerge## private Broadcaster createBroadcaster(Class<? extends Broadcaster> c, Object id) throws BroadcasterCreationException {
        try {
            Broadcaster b = c.getConstructor(String.class, AtmosphereServlet.AtmosphereConfig.class).newInstance(id.toString(), config);
            InjectorProvider.getInjector().inject(b);

            if (b.getBroadcasterConfig() == null) {
                b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config));
            }

            b.setBroadcasterLifeCyclePolicy(policy);
            if (DefaultBroadcaster.class.isAssignableFrom(clazz)) {
                DefaultBroadcaster.class.cast(b).start();
            }
            return b;
        } catch (Throwable t) {
            throw new BroadcasterCreationException(t);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public boolean remove(Broadcaster b, Object id) {
        boolean removed = store.remove(id, b);
        if (removed) {
            logger.debug("Removing Broadcaster {} factory size now {} ", id, store.size());
        }
        return removed;
    } ##FSTMerge## public boolean remove(Broadcaster b, Object id) {
        boolean removed = store.remove(id, b);
        if (removed) {
            logger.debug("Removing Broadcaster {} which internal reference is {} ", id, b.getID());
        }
        return removed;
    } ##FSTMerge## public boolean remove(Broadcaster b, Object id) {
        boolean removed = store.remove(id, b);
        if (removed) {
            logger.debug("Removing Broadcaster {} factory size now {} ", id, store.size());
        }
        return removed;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public Broadcaster lookup(Class<? extends Broadcaster> c, Object id, boolean createIfNull) {
        Broadcaster b = store.get(id);
        if (b != null && !c.isAssignableFrom(b.getClass())) {
            String msg = "Invalid lookup class " + c.getName() + ". Cached class is: " + b.getClass().getName();
            logger.debug(msg);
            throw new IllegalStateException(msg);
        }

        if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {
            if (b != null) {
                logger.debug("Removing destroyed Broadcaster {}", b.getID());
                store.remove(b.getID(), b);
            }
            if (store.putIfAbsent(id, createBroadcaster(c, id)) == null) {
                logger.debug("Added Broadcaster {} . Factory size: {}", id, store.size());
            }

            b = store.get(id);
        }

        return b;
    } ##FSTMerge## @Override
    public Broadcaster lookup(Class<? extends Broadcaster> c, Object id, boolean createIfNull) {
        Broadcaster b = store.get(id);
        if (b != null && !c.isAssignableFrom(b.getClass())) {
            String msg = "Invalid lookup class " + c.getName() + ". Cached class is: " + b.getClass().getName();
            logger.debug(msg);
            throw new IllegalStateException(msg);
        }

        if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {
            if (b != null) {
                logger.debug("Removing destroyed Broadcaster {}", b.getID());
                store.remove(b.getID(), b);
            }
            if (store.putIfAbsent(id, createBroadcaster(c, id)) == null) {
                logger.debug("Added Broadcaster {} . Factory size: {}", id, store.size());
            }
            b = store.get(id);
        }

        return b;
    } ##FSTMerge## @Override
    public Broadcaster lookup(Class<? extends Broadcaster> c, Object id, boolean createIfNull) {
        Broadcaster b = store.get(id);
        if (b != null && !c.isAssignableFrom(b.getClass())) {
            String msg = "Invalid lookup class " + c.getName() + ". Cached class is: " + b.getClass().getName();
            logger.debug(msg);
            throw new IllegalStateException(msg);
        }

        if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {
            if (b != null) {
                logger.debug("Removing destroyed Broadcaster {}", b.getID());
                store.remove(b.getID(), b);
            }
            if (store.putIfAbsent(id, createBroadcaster(c, id)) == null) {
                logger.debug("Added Broadcaster {} . Factory size: {}", id, store.size());
            }

            b = store.get(id);
        }

        return b;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final CyclicBarrier awaitBarrier = new CyclicBarrier(1); ##FSTMerge## ##FSTMerge## private final CyclicBarrier awaitBarrier = new CyclicBarrier(1);
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public DefaultBroadcaster(String name, URI uri, AtmosphereServlet.AtmosphereConfig config) {
        this.name = name;
        this.uri = uri;
        this.config = config;

        broadcasterCache = new DefaultBroadcasterCache();
        bc = createBroadcasterConfig(config);
        String s = config.getInitParameter(ApplicationConfig.BROADCASTER_CACHE_STRATEGY);
        if (s != null) {
            if (s.equalsIgnoreCase("afterFilter")) {
                cacheStrategy = BroadcasterCache.STRATEGY.AFTER_FILTER;
            } else if (s.equalsIgnoreCase("beforeFilter")) {
                cacheStrategy = BroadcasterCache.STRATEGY.BEFORE_FILTER;
            }
        }
    } ##FSTMerge## public DefaultBroadcaster(String name, URI uri, AtmosphereServlet.AtmosphereConfig config) {
        this.name = name;
        this.uri = uri;
        this.config = config;

        broadcasterCache = new DefaultBroadcasterCache();
        bc = new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config);
        String s = config.getInitParameter(ApplicationConfig.BROADCASTER_CACHE_STRATEGY);
        if (s != null) {
            if (s.equalsIgnoreCase("afterFilter")) {
                cacheStrategy = BroadcasterCache.STRATEGY.AFTER_FILTER;
            } else if (s.equalsIgnoreCase("beforeFilter")) {
                cacheStrategy = BroadcasterCache.STRATEGY.BEFORE_FILTER;
            }
        }
    } ##FSTMerge## public DefaultBroadcaster(String name, URI uri, AtmosphereServlet.AtmosphereConfig config) {
        this.name = name;
        this.uri = uri;
        this.config = config;

        broadcasterCache = new DefaultBroadcasterCache();
        bc = createBroadcasterConfig(config);
        String s = config.getInitParameter(ApplicationConfig.BROADCASTER_CACHE_STRATEGY);
        if (s != null) {
            if (s.equalsIgnoreCase("afterFilter")) {
                cacheStrategy = BroadcasterCache.STRATEGY.AFTER_FILTER;
            } else if (s.equalsIgnoreCase("beforeFilter")) {
                cacheStrategy = BroadcasterCache.STRATEGY.BEFORE_FILTER;
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected BroadcasterConfig createBroadcasterConfig(AtmosphereServlet.AtmosphereConfig config){
        return new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config);
    } ##FSTMerge## ##FSTMerge## protected BroadcasterConfig createBroadcasterConfig(AtmosphereServlet.AtmosphereConfig config){
        return new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void setBroadcasterLifeCyclePolicy(final BroadcasterLifeCyclePolicy lifeCyclePolicy) {
        this.lifeCyclePolicy = lifeCyclePolicy;
        if (currentLifecycleTask != null) {
            currentLifecycleTask.cancel(false);
        }

        if (bc != null && bc.getScheduledExecutorService() == null) {
            logger.error("No Broadcaster's SchedulerExecutorService has been configured on {}. BroadcasterLifeCyclePolicy won't work.", getID());
            return;
        }

        if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE
                || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME
                || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {

            recentActivity.set(false);

            int time = lifeCyclePolicy.getTimeout();
            if (time == -1) {
                throw new IllegalStateException("BroadcasterLifeCyclePolicy time is not set");
            }

            final AtomicReference<Future<?>> ref = new AtomicReference<Future<?>>();
            currentLifecycleTask = bc.getScheduledExecutorService().scheduleAtFixedRate(new Runnable() {

                @Override
                public void run() {
                    try {

                        // Check for activity since the last execution.
                        if (recentActivity.getAndSet(false)) {
                            return;
                        } else if (resources.isEmpty()) {
                            if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE) {
                                notifyEmptyListener();
                                notifyIdleListener();

                                releaseExternalResources();
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE policy to Broadcaster {}", getID());
                            } else if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {
                                notifyEmptyListener();
                                notifyIdleListener();

                                destroy(false);
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_DESTROY policy to Broadcaster {}", getID());
                            }
                        } else if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME) {
                            notifyIdleListener();

                            destroy(true);
                            logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_RESUME policy to Broadcaster {}", getID());
                        }
                    } catch (Throwable t) {
                        if (destroyed.get()) {
                            logger.trace("Scheduled BroadcasterLifeCyclePolicy exception", t);
                        } else {
                            logger.warn("Scheduled BroadcasterLifeCyclePolicy exception", t);
                        }
                    }
                }

                void destroy(boolean resume) {

                    if (resume) {
                        logger.info("All AtmosphereResource will now be resumed from Broadcaster {}", getID());
                        resumeAll();
                    }

                    DefaultBroadcaster.this.destroy();
                    /**
                     * The value may be null if the timeout is too low. Hopefully next execution will
                     * cancel the task properly.
                     */
                    if (ref.get() != null) {
                        currentLifecycleTask.cancel(true);
                    }
                }

            }, time, time, lifeCyclePolicy.getTimeUnit());
            ref.set(currentLifecycleTask);
        }
    } ##FSTMerge## @Override
    public void setBroadcasterLifeCyclePolicy(final BroadcasterLifeCyclePolicy lifeCyclePolicy) {
        this.lifeCyclePolicy = lifeCyclePolicy;
        if (currentLifecycleTask != null) {
            currentLifecycleTask.cancel(false);
        }

        if (bc != null && bc.getScheduledExecutorService() == null) {
            logger.error("No Broadcaster's SchedulerExecutorService has been configured on {}. BroadcasterLifeCyclePolicy won't work.", getID());
            return;
        }

        if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE
                || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME
                || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {

            recentActivity.set(false);

            int time = lifeCyclePolicy.getTimeout();
            if (time == -1) {
                throw new IllegalStateException("BroadcasterLifeCyclePolicy time is not set");
            }

            final AtomicReference<Future<?>> ref = new AtomicReference<Future<?>>();
            currentLifecycleTask = bc.getScheduledExecutorService().scheduleAtFixedRate(new Runnable() {

                @Override
                public void run() {
                    try {
                        // Check for activity since the last execution.
                        if (recentActivity.getAndSet(false)) {
                            return;
                        } else if (resources.isEmpty()) {
                            if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE) {
                                notifyEmptyListener();
                                notifyIdleListener();

                                releaseExternalResources();
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE policy to Broadcaster {}", getID());
                            } else if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {
                                notifyEmptyListener();
                                notifyIdleListener();

                                destroy(false);
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_DESTROY policy to Broadcaster {}", getID());
                            }
                        } else if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME) {
                            notifyIdleListener();

                            destroy(true);
                            logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_RESUME policy to Broadcaster {}", getID());
                        }
                    } catch (Throwable t) {
                        if (destroyed.get()) {
                            logger.trace("Scheduled BroadcasterLifeCyclePolicy exception", t);
                        } else {
                            logger.warn("Scheduled BroadcasterLifeCyclePolicy exception", t);
                        }
                    }
                }

                void destroy(boolean resume) {

                    if (resume) {
                        logger.info("All AtmosphereResource will now be resumed from Broadcaster {}", getID());
                        resumeAll();
                    }

                    DefaultBroadcaster.this.destroy();
                    /**
                     * The value may be null if the timeout is too low. Hopefully next execution will
                     * cancel the task properly.
                     */
                    if (ref.get() != null) {
                        currentLifecycleTask.cancel(true);
                    }
                }

            }, time, time, lifeCyclePolicy.getTimeUnit());
            ref.set(currentLifecycleTask);
        }
    } ##FSTMerge## @Override
    public void setBroadcasterLifeCyclePolicy(final BroadcasterLifeCyclePolicy lifeCyclePolicy) {
        this.lifeCyclePolicy = lifeCyclePolicy;
        if (currentLifecycleTask != null) {
            currentLifecycleTask.cancel(false);
        }

        if (bc != null && bc.getScheduledExecutorService() == null) {
            logger.error("No Broadcaster's SchedulerExecutorService has been configured on {}. BroadcasterLifeCyclePolicy won't work.", getID());
            return;
        }

        if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE
                || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME
                || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {

            recentActivity.set(false);

            int time = lifeCyclePolicy.getTimeout();
            if (time == -1) {
                throw new IllegalStateException("BroadcasterLifeCyclePolicy time is not set");
            }

            final AtomicReference<Future<?>> ref = new AtomicReference<Future<?>>();
            currentLifecycleTask = bc.getScheduledExecutorService().scheduleAtFixedRate(new Runnable() {

                @Override
                public void run() {
                    try {

                        // Check for activity since the last execution.
                        if (recentActivity.getAndSet(false)) {
                            return;
                        } else if (resources.isEmpty()) {
                            if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE) {
                                notifyEmptyListener();
                                notifyIdleListener();

                                releaseExternalResources();
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE policy to Broadcaster {}", getID());
                            } else if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {
                                notifyEmptyListener();
                                notifyIdleListener();

                                destroy(false);
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_DESTROY policy to Broadcaster {}", getID());
                            }
                        } else if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME) {
                            notifyIdleListener();

                            destroy(true);
                            logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_RESUME policy to Broadcaster {}", getID());
                        }
                    } catch (Throwable t) {
                        if (destroyed.get()) {
                            logger.trace("Scheduled BroadcasterLifeCyclePolicy exception", t);
                        } else {
                            logger.warn("Scheduled BroadcasterLifeCyclePolicy exception", t);
                        }
                    }
                }

                void destroy(boolean resume) {

                    if (resume) {
                        logger.info("All AtmosphereResource will now be resumed from Broadcaster {}", getID());
                        resumeAll();
                    }

                    DefaultBroadcaster.this.destroy();
                    /**
                     * The value may be null if the timeout is too low. Hopefully next execution will
                     * cancel the task properly.
                     */
                    if (ref.get() != null) {
                        currentLifecycleTask.cancel(true);
                    }
                }

            }, time, time, lifeCyclePolicy.getTimeUnit());
            ref.set(currentLifecycleTask);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public <T> Future<T> awaitAndBroadcast(T t, long time, TimeUnit timeUnit) {
        if (resources.isEmpty()) {
            try {
                logger.trace("Awaiting for AtmosphereResource for {} {}", time, timeUnit);
                awaitBarrier.await(time, timeUnit);
            } catch (Throwable e) {
                logger.warn("awaitAndBroadcast", e);
                return null;
            }
        }
        return broadcast(t);
    } ##FSTMerge## ##FSTMerge## @Override
    public <T> Future<T> awaitAndBroadcast(T t, long time, TimeUnit timeUnit) {
        if (resources.isEmpty()) {
            try {
                logger.trace("Awaiting for AtmosphereResource for {} {}", time, timeUnit);
                awaitBarrier.await(time, timeUnit);
            } catch (Throwable e) {
                logger.warn("awaitAndBroadcast", e);
                return null;
            }
        }
        return broadcast(t);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Entry(Object message, Object multipleAtmoResources, BroadcasterFuture<?> future, boolean writeLocally) {
            this.message = message;
            this.multipleAtmoResources = multipleAtmoResources;
            this.future = future;
            this.writeLocally = writeLocally;
            this.originalMessage = message;
        } ##FSTMerge## public Entry(Object message, Object multipleAtmoResources, BroadcasterFuture<?> future, boolean writeLocally) {
            this.message = message;
            this.multipleAtmoResources = multipleAtmoResources;
            this.future = future;
            this.writeLocally = writeLocally;
        } ##FSTMerge## public Entry(Object message, Object multipleAtmoResources, BroadcasterFuture<?> future, boolean writeLocally) {
            this.message = message;
            this.multipleAtmoResources = multipleAtmoResources;
            this.future = future;
            this.writeLocally = writeLocally;
            this.originalMessage = message;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void push(Entry entry) {

        if (destroyed.get()) {
            return;
        }

        recentActivity.set(true);

        String prevMessage = entry.message.toString();
        if (!delayedBroadcast.isEmpty()) {
            Iterator<Entry> i = delayedBroadcast.iterator();
            StringBuilder b = new StringBuilder();
            while (i.hasNext()) {
                Entry e = i.next();
                e.future.cancel(true);
                try {
                    // Append so we do a single flush
                    if (e.message instanceof String
                            && entry.message instanceof String) {
                        b.append(e.message);
                    } else {
                        push(e);
                    }
                } finally {
                    i.remove();
                }
            }

            if (b.length() > 0) {
                entry.message = b.append(entry.message).toString();
            }
        }

        Object finalMsg = translate(entry.message);

        if (finalMsg == null) {
            logger.trace("Broascast message was null {}", finalMsg);
            return;
        }

        Object prevM = entry.originalMessage;
        entry.originalMessage = (entry.originalMessage != entry.message ? translate(entry.originalMessage) : finalMsg);

        if (entry.originalMessage == null) {
            logger.trace("Broascast message was null {}", prevM);
            return;
        }

        entry.message = finalMsg;

        if (resources.isEmpty()) {
            logger.debug("Broadcaster {} doesn't have any associated resource", getID());

            AtmosphereResource<?, ?> r = null;
            if (entry.multipleAtmoResources != null && AtmosphereResource.class.isAssignableFrom(entry.multipleAtmoResources.getClass())) {
                r = AtmosphereResource.class.cast(entry.multipleAtmoResources);
            }
            trackBroadcastMessage(r, cacheStrategy == BroadcasterCache.STRATEGY.AFTER_FILTER ? entry.message : entry.originalMessage);

            if (entry.future != null) {
                entry.future.done();
            }
            return;
        }

        try {
            if (entry.multipleAtmoResources == null) {
                for (AtmosphereResource<?, ?> r : resources) {
                    finalMsg = perRequestFilter(r, entry);

                    if (finalMsg == null) {
                        logger.debug("Skipping broadcast delivery resource {} ", r);
                        continue;
                    }

                    if (entry.writeLocally) {
                        queueWriteIO(r, finalMsg, entry);
                    }
                }
            } else if (entry.multipleAtmoResources instanceof AtmosphereResource<?, ?>) {
                finalMsg = perRequestFilter((AtmosphereResource<?, ?>) entry.multipleAtmoResources, entry);

                if (finalMsg == null) {
                    logger.debug("Skipping broadcast delivery resource {} ", entry.multipleAtmoResources);
                    return;
                }

                if (entry.writeLocally) {
                    queueWriteIO((AtmosphereResource<?, ?>) entry.multipleAtmoResources, finalMsg, entry);
                }
            } else if (entry.multipleAtmoResources instanceof Set) {
                Set<AtmosphereResource<?, ?>> sub = (Set<AtmosphereResource<?, ?>>) entry.multipleAtmoResources;
                for (AtmosphereResource<?, ?> r : sub) {
                    finalMsg = perRequestFilter(r, entry);

                    if (finalMsg == null) {
                        logger.debug("Skipping broadcast delivery resource {} ", r);
                        continue;
                    }

                    if (entry.writeLocally) {
                        queueWriteIO(r, finalMsg, entry);
                    }
                }
            }
            entry.message = prevMessage;
        } catch (InterruptedException ex) {
            logger.debug(ex.getMessage(), ex);
        }
    } ##FSTMerge## protected void push(Entry entry) {

        if (destroyed.get()) {
            return;
        }

        recentActivity.set(true);

        String prevMessage = entry.message.toString();
        if (!delayedBroadcast.isEmpty()) {
            Iterator<Entry> i = delayedBroadcast.iterator();
            StringBuilder b = new StringBuilder();
            while (i.hasNext()) {
                Entry e = i.next();
                e.future.cancel(true);
                try {
                    // Append so we do a single flush
                    if (e.message instanceof String
                            && entry.message instanceof String) {
                        b.append(e.message);
                    } else {
                        push(e);
                    }
                } finally {
                    i.remove();
                }
            }

            if (b.length() > 0) {
                entry.message = b.append(entry.message).toString();
            }
        }

        Object finalMsg = translate(entry.message);
        entry.originalMessage = (entry.originalMessage != entry.message ? translate(entry.originalMessage) : finalMsg);
        entry.message = finalMsg;

        if (resources.isEmpty()) {
            logger.debug("Broadcaster {} doesn't have any associated resource", getID());

            AtmosphereResource<?,?> r = null;
            if (entry.multipleAtmoResources != null && AtmosphereResource.class.isAssignableFrom(entry.multipleAtmoResources.getClass())) {
                r = AtmosphereResource.class.cast(entry.multipleAtmoResources);
            }
            trackBroadcastMessage(r, cacheStrategy == BroadcasterCache.STRATEGY.AFTER_FILTER ? entry.message : entry.originalMessage);

            if (entry.future != null) {
                entry.future.done();
            }
            return;
        }

        try {
            if (entry.multipleAtmoResources == null) {
                for (AtmosphereResource<?, ?> r : resources) {
                    finalMsg = perRequestFilter(r, entry);

                    if (finalMsg == null) {
                        logger.debug("Skipping broadcast delivery resource {} ", r);
                        continue;
                    }

                    if (entry.writeLocally) {
                        queueWriteIO(r, finalMsg, entry);
                    }
                }
            } else if (entry.multipleAtmoResources instanceof AtmosphereResource<?, ?>) {
                finalMsg = perRequestFilter((AtmosphereResource<?, ?>) entry.multipleAtmoResources, entry);

                if (finalMsg == null) {
                    logger.debug("Skipping broadcast delivery resource {} ", entry.multipleAtmoResources);
                    return;
                }

                if (entry.writeLocally) {
                    queueWriteIO((AtmosphereResource<?, ?>) entry.multipleAtmoResources, finalMsg, entry);
                }
            } else if (entry.multipleAtmoResources instanceof Set) {
                Set<AtmosphereResource<?, ?>> sub = (Set<AtmosphereResource<?, ?>>) entry.multipleAtmoResources;
                for (AtmosphereResource<?, ?> r : sub) {
                    finalMsg = perRequestFilter(r, entry);

                    if (finalMsg == null) {
                        logger.debug("Skipping broadcast delivery resource {} ", r);
                        continue;
                    }

                    if (entry.writeLocally) {
                        queueWriteIO(r, finalMsg, entry);
                    }
                }
            }
            entry.message = prevMessage;
        } catch (InterruptedException ex) {
            logger.debug(ex.getMessage(), ex);
        }
    } ##FSTMerge## protected void push(Entry entry) {

        if (destroyed.get()) {
            return;
        }

        recentActivity.set(true);

        String prevMessage = entry.message.toString();
        if (!delayedBroadcast.isEmpty()) {
            Iterator<Entry> i = delayedBroadcast.iterator();
            StringBuilder b = new StringBuilder();
            while (i.hasNext()) {
                Entry e = i.next();
                e.future.cancel(true);
                try {
                    // Append so we do a single flush
                    if (e.message instanceof String
                            && entry.message instanceof String) {
                        b.append(e.message);
                    } else {
                        push(e);
                    }
                } finally {
                    i.remove();
                }
            }

            if (b.length() > 0) {
                entry.message = b.append(entry.message).toString();
            }
        }

        Object finalMsg = translate(entry.message);

        if (finalMsg == null) {
            logger.trace("Broascast message was null {}", finalMsg);
            return;
        }

        Object prevM = entry.originalMessage;
        entry.originalMessage = (entry.originalMessage != entry.message ? translate(entry.originalMessage) : finalMsg);

        if (entry.originalMessage == null) {
            logger.trace("Broascast message was null {}", prevM);
            return;
        }

        entry.message = finalMsg;

        if (resources.isEmpty()) {
            logger.debug("Broadcaster {} doesn't have any associated resource", getID());

            AtmosphereResource<?, ?> r = null;
            if (entry.multipleAtmoResources != null && AtmosphereResource.class.isAssignableFrom(entry.multipleAtmoResources.getClass())) {
                r = AtmosphereResource.class.cast(entry.multipleAtmoResources);
            }
            trackBroadcastMessage(r, cacheStrategy == BroadcasterCache.STRATEGY.AFTER_FILTER ? entry.message : entry.originalMessage);

            if (entry.future != null) {
                entry.future.done();
            }
            return;
        }

        try {
            if (entry.multipleAtmoResources == null) {
                for (AtmosphereResource<?, ?> r : resources) {
                    finalMsg = perRequestFilter(r, entry);

                    if (finalMsg == null) {
                        logger.debug("Skipping broadcast delivery resource {} ", r);
                        continue;
                    }

                    if (entry.writeLocally) {
                        queueWriteIO(r, finalMsg, entry);
                    }
                }
            } else if (entry.multipleAtmoResources instanceof AtmosphereResource<?, ?>) {
                finalMsg = perRequestFilter((AtmosphereResource<?, ?>) entry.multipleAtmoResources, entry);

                if (finalMsg == null) {
                    logger.debug("Skipping broadcast delivery resource {} ", entry.multipleAtmoResources);
                    return;
                }

                if (entry.writeLocally) {
                    queueWriteIO((AtmosphereResource<?, ?>) entry.multipleAtmoResources, finalMsg, entry);
                }
            } else if (entry.multipleAtmoResources instanceof Set) {
                Set<AtmosphereResource<?, ?>> sub = (Set<AtmosphereResource<?, ?>>) entry.multipleAtmoResources;
                for (AtmosphereResource<?, ?> r : sub) {
                    finalMsg = perRequestFilter(r, entry);

                    if (finalMsg == null) {
                        logger.debug("Skipping broadcast delivery resource {} ", r);
                        continue;
                    }

                    if (entry.writeLocally) {
                        queueWriteIO(r, finalMsg, entry);
                    }
                }
            }
            entry.message = prevMessage;
        } catch (InterruptedException ex) {
            logger.debug(ex.getMessage(), ex);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private Object translate(Object msg) {
        if (Callable.class.isAssignableFrom(msg.getClass())) {
            try {
                return Callable.class.cast(msg).call();
            } catch (Exception e) {
                logger.warn("Callable exception", e);
                return null;
            }
        }
        return msg;
    } ##FSTMerge## private Object translate(Object msg) {
        if (Callable.class.isAssignableFrom(msg.getClass())) {
            try {
                return Callable.class.cast(msg).call();
            } catch (Exception e) {
                logger.error("failed to cast message: " + msg, e);
            }
        }
        return msg;
    } ##FSTMerge## private Object translate(Object msg) {
        if (Callable.class.isAssignableFrom(msg.getClass())) {
            try {
                return Callable.class.cast(msg).call();
            } catch (Exception e) {
                logger.warn("Callable exception", e);
                return null;
            }
        }
        return msg;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void executeAsyncWrite(final AsyncWriteToken token) {
        boolean notifyListeners = true;
        boolean lostCandidate = false;

        final AtmosphereResourceEventImpl event = (AtmosphereResourceEventImpl) token.resource.getAtmosphereResourceEvent();
        try {
            event.setMessage(token.msg);

            // Check again to make sure we are still valid. Remove and silently ignore.
            if (!AtmosphereResourceImpl.class.cast(token.resource).isInScope()) {
                resources.remove(token.resource);
                lostCandidate = true;
                return;
            }

            try {
                HttpServletRequest.class.cast(token.resource.getRequest())
                        .setAttribute(MAX_INACTIVE, System.currentTimeMillis());
            } catch (Throwable t) {
                logger.error("Invalid AtmosphereResource state {}", event);
                logger.error("If you are using Tomcat 7.0.22 and lower, your most probably hitting http://is.gd/NqicFT");
                logger.error("", t);
                // The Request/Response associated with the AtmosphereResource has already been written and commited
                removeAtmosphereResource(token.resource);
                BroadcasterFactory.getDefault().removeAllAtmosphereResource(token.resource);
                event.setCancelled(true);
                event.setThrowable(t);
                lostCandidate = true;
                return;
            }

            HttpServletRequest.class.cast(token.resource.getRequest()).setAttribute(ASYNC_TOKEN, token);
            broadcast(token.resource, event);
        } finally {
            if (notifyListeners) {
                token.resource.notifyListeners();
            }

            if (token.future != null) {
                token.future.done();
            }

            if (lostCandidate) {
                cacheLostMessage(token.resource);
            }
            token.destroy();
            event.setMessage(null);
        }
    } ##FSTMerge## protected void executeAsyncWrite(final AsyncWriteToken token) {
        boolean notifyListeners = true;
        boolean lostCandidate = false;

        try {
            final AtmosphereResourceEventImpl event = (AtmosphereResourceEventImpl) token.resource.getAtmosphereResourceEvent();
            event.setMessage(token.msg);

            // Check again to make sure we are still valid. Remove and silently ignore.
            if (!AtmosphereResourceImpl.class.cast(token.resource).isInScope()) {
                resources.remove(token.resource);
                lostCandidate = true;
                return;
            }

            try {
                HttpServletRequest.class.cast(token.resource.getRequest())
                        .setAttribute(MAX_INACTIVE, System.currentTimeMillis());
            } catch (Throwable t) {
                logger.error("Invalid AtmosphereResource state {}", event);
                logger.error("If you are using Tomcat 7.0.22 and lower, your most probably hitting http://is.gd/NqicFT");
                logger.error("", t);
                // The Request/Response associated with the AtmosphereResource has already been written and commited
                removeAtmosphereResource(token.resource);
                BroadcasterFactory.getDefault().removeAllAtmosphereResource(token.resource);
                event.setCancelled(true);
                event.setThrowable(t);
                lostCandidate = true;
                return;
            }

            HttpServletRequest.class.cast(token.resource.getRequest()).setAttribute(ASYNC_TOKEN, token);
            broadcast(token.resource, event);
        } finally {
            if (notifyListeners) {
                token.resource.notifyListeners();
            }

            if (token.future != null) {
                token.future.done();
            }

            if (lostCandidate) {
                cacheLostMessage(token.resource);
            }
        }
    } ##FSTMerge## protected void executeAsyncWrite(final AsyncWriteToken token) {
        boolean notifyListeners = true;
        boolean lostCandidate = false;

        final AtmosphereResourceEventImpl event = (AtmosphereResourceEventImpl) token.resource.getAtmosphereResourceEvent();
        try {
            event.setMessage(token.msg);

            // Check again to make sure we are still valid. Remove and silently ignore.
            if (!AtmosphereResourceImpl.class.cast(token.resource).isInScope()) {
                resources.remove(token.resource);
                lostCandidate = true;
                return;
            }

            try {
                HttpServletRequest.class.cast(token.resource.getRequest())
                        .setAttribute(MAX_INACTIVE, System.currentTimeMillis());
            } catch (Throwable t) {
                logger.error("Invalid AtmosphereResource state {}", event);
                logger.error("If you are using Tomcat 7.0.22 and lower, your most probably hitting http://is.gd/NqicFT");
                logger.error("", t);
                // The Request/Response associated with the AtmosphereResource has already been written and commited
                removeAtmosphereResource(token.resource);
                BroadcasterFactory.getDefault().removeAllAtmosphereResource(token.resource);
                event.setCancelled(true);
                event.setThrowable(t);
                lostCandidate = true;
                return;
            }

            HttpServletRequest.class.cast(token.resource.getRequest()).setAttribute(ASYNC_TOKEN, token);
            broadcast(token.resource, event);
        } finally {
            if (notifyListeners) {
                token.resource.notifyListeners();
            }

            if (token.future != null) {
                token.future.done();
            }

            if (lostCandidate) {
                cacheLostMessage(token.resource);
            }
            token.destroy();
            event.setMessage(null);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void trackBroadcastMessage(final AtmosphereResource<?, ?> r, Object msg) {
        if (destroyed.get() || broadcasterCache == null) return;
        try {
            broadcasterCache.addToCache(r, msg);
        } catch (Throwable t) {
            logger.warn("Unable to track messages {}", msg, t);
        }
    } ##FSTMerge## protected void trackBroadcastMessage(final AtmosphereResource<?, ?> r, Object msg) {
        broadcasterCache.addToCache(r, msg);
    } ##FSTMerge## protected void trackBroadcastMessage(final AtmosphereResource<?, ?> r, Object msg) {
        if (destroyed.get() || broadcasterCache == null) return;
        try {
            broadcasterCache.addToCache(r, msg);
        } catch (Throwable t) {
            logger.warn("Unable to track messages {}", msg, t);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public AtmosphereResource<?, ?> addAtmosphereResource(AtmosphereResource<?, ?> r) {

        try {
            if (destroyed.get()) {
                logger.debug(DESTROYED, getID(), "addAtmosphereResource(AtmosphereResource<?, ?> r");
                return r;
            }

            start();
            if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {
                throw new IllegalStateException("Broadcaster " + this
                        + " cannot be used as its scope is set to REQUEST");
            }

            // To avoid excessive synchronization, we allow resources.size() to get larger that maxSuspendResource
            if (maxSuspendResource.get() > 0 && resources.size() >= maxSuspendResource.get()) {
                // Resume the first in.
                if (policy == POLICY.FIFO) {
                    // TODO handle null return from poll()
                    AtmosphereResource<?, ?> resource = resources.poll();
                    try {
                        logger.warn("Too many resource. Forcing resume of {} ", resource);
                        resource.resume();
                    } catch (Throwable t) {
                        logger.warn("failed to resume resource {} ", resource, t);
                    }
                } else if (policy == POLICY.REJECT) {
                    throw new RejectedExecutionException(String.format("Maximum suspended AtmosphereResources %s", maxSuspendResource));
                }
            }

            if (resources.contains(r)) {
                return r;
            }

            // Re-add yourself
            if (resources.isEmpty()) {
                BroadcasterFactory.getDefault().add(this, name);
            }

            resources.add(r);
            checkCachedAndPush(r, r.getAtmosphereResourceEvent());
        } finally {
            // OK reset
            if (resources.size() > 0 && awaitBarrier.getParties() > 0) {
                awaitBarrier.reset();
            }
        }
        return r;
    } ##FSTMerge## @Override
    public AtmosphereResource<?, ?> addAtmosphereResource(AtmosphereResource<?, ?> r) {

        if (destroyed.get()) {
            logger.debug(DESTROYED, getID(), "addAtmosphereResource(AtmosphereResource<?, ?> r");
            return r;
        }

        start();
        if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {
            throw new IllegalStateException("Broadcaster " + this
                    + " cannot be used as its scope is set to REQUEST");
        }

        // To avoid excessive synchronization, we allow resources.size() to get larger that maxSuspendResource
        if (maxSuspendResource.get() > 0 && resources.size() >= maxSuspendResource.get()) {
            // Resume the first in.
            if (policy == POLICY.FIFO) {
                // TODO handle null return from poll()
                AtmosphereResource<?, ?> resource = resources.poll();
                try {
                    logger.warn("Too many resource. Forcing resume of {} ", resource);
                    resource.resume();
                } catch (Throwable t) {
                    logger.warn("failed to resume resource {} ", resource, t);
                }
            } else if (policy == POLICY.REJECT) {
                throw new RejectedExecutionException(String.format("Maximum suspended AtmosphereResources %s", maxSuspendResource));
            }
        }

        if (resources.contains(r)) {
            return r;
        }

        // Re-add yourself
        if (resources.isEmpty()) {
            BroadcasterFactory.getDefault().add(this, name);
        }

        resources.add(r);
        checkCachedAndPush(r, r.getAtmosphereResourceEvent());
        return r;
    } ##FSTMerge## @Override
    public AtmosphereResource<?, ?> addAtmosphereResource(AtmosphereResource<?, ?> r) {

        try {
            if (destroyed.get()) {
                logger.debug(DESTROYED, getID(), "addAtmosphereResource(AtmosphereResource<?, ?> r");
                return r;
            }

            start();
            if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {
                throw new IllegalStateException("Broadcaster " + this
                        + " cannot be used as its scope is set to REQUEST");
            }

            // To avoid excessive synchronization, we allow resources.size() to get larger that maxSuspendResource
            if (maxSuspendResource.get() > 0 && resources.size() >= maxSuspendResource.get()) {
                // Resume the first in.
                if (policy == POLICY.FIFO) {
                    // TODO handle null return from poll()
                    AtmosphereResource<?, ?> resource = resources.poll();
                    try {
                        logger.warn("Too many resource. Forcing resume of {} ", resource);
                        resource.resume();
                    } catch (Throwable t) {
                        logger.warn("failed to resume resource {} ", resource, t);
                    }
                } else if (policy == POLICY.REJECT) {
                    throw new RejectedExecutionException(String.format("Maximum suspended AtmosphereResources %s", maxSuspendResource));
                }
            }

            if (resources.contains(r)) {
                return r;
            }

            // Re-add yourself
            if (resources.isEmpty()) {
                BroadcasterFactory.getDefault().add(this, name);
            }

            resources.add(r);
            checkCachedAndPush(r, r.getAtmosphereResourceEvent());
        } finally {
            // OK reset
            if (resources.size() > 0 && awaitBarrier.getParties() > 0) {
                awaitBarrier.reset();
            }
        }
        return r;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ AtmosphereResource<?, ?> resource; ##FSTMerge## final AtmosphereResource<?, ?> resource; ##FSTMerge## AtmosphereResource<?, ?> resource;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ Object msg; ##FSTMerge## final Object msg; ##FSTMerge## Object msg;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ BroadcasterFuture future; ##FSTMerge## final BroadcasterFuture future; ##FSTMerge## BroadcasterFuture future;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ Object originalMessage; ##FSTMerge## final Object originalMessage; ##FSTMerge## Object originalMessage;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void destroy(){
            this.resource = null;
            this.msg = null;
            this.future = null;
            this.originalMessage = null;
        } ##FSTMerge## ##FSTMerge## public void destroy(){
            this.resource = null;
            this.msg = null;
            this.future = null;
            this.originalMessage = null;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private boolean shared = false; ##FSTMerge## ##FSTMerge## private boolean shared = false;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public BroadcasterConfig(String[] list, AtmosphereServlet.AtmosphereConfig config) {
        this(list, config, true);
    } ##FSTMerge## public BroadcasterConfig(String[] list, AtmosphereServlet.AtmosphereConfig config) {
        this.config = config;
        configExecutors();
        configureBroadcasterFilter(list);
        configureBroadcasterCache();
    } ##FSTMerge## public BroadcasterConfig(String[] list, AtmosphereServlet.AtmosphereConfig config) {
        this(list, config, true);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public BroadcasterConfig(String[] list, AtmosphereServlet.AtmosphereConfig config, boolean createExecutor) {
        this.config = config;
        if (createExecutor) {
            configExecutors();
        } else {
            shared = true;
        }
        configureBroadcasterFilter(list);
        configureBroadcasterCache();
    } ##FSTMerge## ##FSTMerge## public BroadcasterConfig(String[] list, AtmosphereServlet.AtmosphereConfig config, boolean createExecutor) {
        this.config = config;
        if (createExecutor) {
            configExecutors();
        } else {
            shared = true;
        }
        configureBroadcasterFilter(list);
        configureBroadcasterCache();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void destroy(boolean force) {
        if (shared) return;
        if (broadcasterCache != null) {
            broadcasterCache.stop();
        }

        if ((force || !isExecutorShared) && executorService != null) {
            executorService.shutdownNow();
        }
        if ((force || !isAsyncExecutorShared) && asyncWriteService != null) {
            asyncWriteService.shutdownNow();
        }
        if ((force || !isExecutorShared) && defaultExecutorService != null) {
            defaultExecutorService.shutdownNow();
        }
        if ((force || !isAsyncExecutorShared) && defaultAsyncWriteService != null) {
            defaultAsyncWriteService.shutdownNow();
        }

        if (scheduler != null) {
            scheduler.shutdownNow();
        }

        for (BroadcastFilter f : filters) {
            if (f instanceof BroadcastFilterLifecycle) {
                ((BroadcastFilterLifecycle) f).destroy();
            }
        }
        removeAllFilters();
    } ##FSTMerge## protected void destroy(boolean force) {
        if (broadcasterCache != null) {
            broadcasterCache.stop();
        }

        if ((force || !isExecutorShared) && executorService != null) {
            executorService.shutdownNow();
        }
        if ((force || !isAsyncExecutorShared) && asyncWriteService != null) {
            asyncWriteService.shutdownNow();
        }
        if ((force || !isExecutorShared) && defaultExecutorService != null) {
            defaultExecutorService.shutdownNow();
        }
        if ((force || !isAsyncExecutorShared) && defaultAsyncWriteService != null) {
            defaultAsyncWriteService.shutdownNow();
        }

        if (scheduler != null) {
            scheduler.shutdownNow();
        }

        for (BroadcastFilter f : filters) {
            if (f instanceof BroadcastFilterLifecycle) {
                ((BroadcastFilterLifecycle) f).destroy();
            }
        }
        removeAllFilters();
    } ##FSTMerge## protected void destroy(boolean force) {
        if (shared) return;
        if (broadcasterCache != null) {
            broadcasterCache.stop();
        }

        if ((force || !isExecutorShared) && executorService != null) {
            executorService.shutdownNow();
        }
        if ((force || !isAsyncExecutorShared) && asyncWriteService != null) {
            asyncWriteService.shutdownNow();
        }
        if ((force || !isExecutorShared) && defaultExecutorService != null) {
            defaultExecutorService.shutdownNow();
        }
        if ((force || !isAsyncExecutorShared) && defaultAsyncWriteService != null) {
            defaultAsyncWriteService.shutdownNow();
        }

        if (scheduler != null) {
            scheduler.shutdownNow();
        }

        for (BroadcastFilter f : filters) {
            if (f instanceof BroadcastFilterLifecycle) {
                ((BroadcastFilterLifecycle) f).destroy();
            }
        }
        removeAllFilters();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: smallMethod
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ <T> Future<T> awaitAndBroadcast(T t, long time, TimeUnit timeUnit); ##FSTMerge## ##FSTMerge## <T> Future<T> awaitAndBroadcast(T t, long time, TimeUnit timeUnit);
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private boolean webSocketEnabled = true; ##FSTMerge## private boolean webSocketEnabled = false; ##FSTMerge## private boolean webSocketEnabled = true;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private WebSocketProtocol webSocketProtocol; ##FSTMerge## ##FSTMerge## private WebSocketProtocol webSocketProtocol;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private void addMapping(String path, AtmosphereHandlerWrapper w) {
        atmosphereHandlers.put(path, w);
    } ##FSTMerge## private void addMapping(String path, AtmosphereHandlerWrapper w) {
        // We are using JAXRS mapping algorithm.

        if (path.contains("*")) {
            path = path.replace("*", "[/a-zA-Z0-9-&=;\\?]+");
        }
        atmosphereHandlers.put(path, w);
    } ##FSTMerge## private void addMapping(String path, AtmosphereHandlerWrapper w) {
        // We are using JAXRS mapping algorithm.

        if (path.contains("*")) {
            path = path.replace("*", "[/a-zA-Z0-9-&=;\\?]+");
        }
        atmosphereHandlers.put(path, w);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void init(final ServletConfig sc) throws ServletException {
        try {
            super.init(sc);

            ServletContextHolder.register(this);

            ServletConfig scFacade = new ServletConfig() {

                public String getServletName() {
                    return sc.getServletName();
                }

                public ServletContext getServletContext() {
                    return sc.getServletContext();
                }

                public String getInitParameter(String name) {
                    String param = sc.getInitParameter(name);
                    if (param == null) {
                        return initParams.get(name);
                    }
                    return param;
                }

                public Enumeration<String> getInitParameterNames() {
                    return sc.getInitParameterNames();
                }
            };
            doInitParams(scFacade);
            doInitParamsForWebSocket(scFacade);
            configureBroadcaster(sc.getServletContext());
            loadConfiguration(scFacade);

            autoDetectContainer();
            configureWebDotXmlAtmosphereHandler(sc);
            cometSupport.init(scFacade);
            initAtmosphereHandler(scFacade);
            initWebSocketProtocol();

            logger.info("Using broadcaster class: {}", broadcasterClassName);
            logger.info("Atmosphere Framework {} started.", Version.getRawVersion());
        } catch (Throwable t) {
            logger.error("failed to initialize atmosphere framework", t);

            if (t instanceof ServletException) {
                throw (ServletException) t;
            }

            throw new ServletException(t.getCause());
        }
    } ##FSTMerge## @Override
    public void init(final ServletConfig sc) throws ServletException {
        try {
            super.init(sc);

            ServletContextHolder.register(this);

            ServletConfig scFacade = new ServletConfig() {

                public String getServletName() {
                    return sc.getServletName();
                }

                public ServletContext getServletContext() {
                    return sc.getServletContext();
                }

                public String getInitParameter(String name) {
                    String param = sc.getInitParameter(name);
                    if (param == null) {
                        return initParams.get(name);
                    }
                    return param;
                }

                public Enumeration<String> getInitParameterNames() {
                    return sc.getInitParameterNames();
                }
            };
            doInitParams(scFacade);
            doInitParamsForWebSocket(scFacade);
            configureBroadcaster(sc.getServletContext());
            loadConfiguration(scFacade);

            autoDetectContainer();
            configureWebDotXmlAtmosphereHandler(sc);
            cometSupport.init(scFacade);
            initAtmosphereHandler(scFacade);

            logger.info("Using broadcaster class: {}", broadcasterClassName);
            logger.info("Atmosphere Framework {} started.", Version.getRawVersion());
        } catch (Throwable t) {
            logger.error("failed to initialize atmosphere framework", t);

            if (t instanceof ServletException) {
                throw (ServletException) t;
            }

            throw new ServletException(t.getCause());
        }
    } ##FSTMerge## @Override
    public void init(final ServletConfig sc) throws ServletException {
        try {
            super.init(sc);

            ServletContextHolder.register(this);

            ServletConfig scFacade = new ServletConfig() {

                public String getServletName() {
                    return sc.getServletName();
                }

                public ServletContext getServletContext() {
                    return sc.getServletContext();
                }

                public String getInitParameter(String name) {
                    String param = sc.getInitParameter(name);
                    if (param == null) {
                        return initParams.get(name);
                    }
                    return param;
                }

                public Enumeration<String> getInitParameterNames() {
                    return sc.getInitParameterNames();
                }
            };
            doInitParams(scFacade);
            doInitParamsForWebSocket(scFacade);
            configureBroadcaster(sc.getServletContext());
            loadConfiguration(scFacade);

            autoDetectContainer();
            configureWebDotXmlAtmosphereHandler(sc);
            cometSupport.init(scFacade);
            initAtmosphereHandler(scFacade);
            initWebSocketProtocol();

            logger.info("Using broadcaster class: {}", broadcasterClassName);
            logger.info("Atmosphere Framework {} started.", Version.getRawVersion());
        } catch (Throwable t) {
            logger.error("failed to initialize atmosphere framework", t);

            if (t instanceof ServletException) {
                throw (ServletException) t;
            }

            throw new ServletException(t.getCause());
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void doInitParamsForWebSocket(ServletConfig sc) {
        String s = sc.getInitParameter(WEBSOCKET_SUPPORT);
        if (s != null) {
            webSocketEnabled = Boolean.parseBoolean(s);
            sessionSupport(false);
        }
        s = sc.getInitParameter(WEBSOCKET_PROTOCOL);
        if (s != null) {
            webSocketProtocolClassName = s;
        }
    } ##FSTMerge## protected void doInitParamsForWebSocket(ServletConfig sc) {
        String s = sc.getInitParameter(WEBSOCKET_SUPPORT);
        if (s != null && Boolean.parseBoolean(s)) {
            webSocketEnabled = true;
            sessionSupport(false);
        }
        s = sc.getInitParameter(WEBSOCKET_PROTOCOL);
        if (s != null) {
            webSocketProtocolClassName = s;
        }
    } ##FSTMerge## protected void doInitParamsForWebSocket(ServletConfig sc) {
        String s = sc.getInitParameter(WEBSOCKET_SUPPORT);
        if (s != null) {
            webSocketEnabled = Boolean.parseBoolean(s);
            sessionSupport(false);
        }
        s = sc.getInitParameter(WEBSOCKET_PROTOCOL);
        if (s != null) {
            webSocketProtocolClassName = s;
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void initWebSocketProtocol() {
        try {
            webSocketProtocol = (WebSocketProtocol) JettyWebSocketHandler.class.getClassLoader()
                    .loadClass(webSocketProtocolClassName).newInstance();
        } catch (Exception ex) {
            logger.error("Cannot load the WebSocketProtocol {}", getWebSocketProtocolClassName(), ex);
            webSocketProtocol = new SimpleHttpProtocol();
        }
        webSocketProtocol.configure(config);
    } ##FSTMerge## ##FSTMerge## protected void initWebSocketProtocol() {
        try {
            webSocketProtocol = (WebSocketProtocol) JettyWebSocketHandler.class.getClassLoader()
                    .loadClass(webSocketProtocolClassName).newInstance();
        } catch (Exception ex) {
            logger.error("Cannot load the WebSocketProtocol {}", getWebSocketProtocolClassName(), ex);
            webSocketProtocol = new SimpleHttpProtocol();
        }
        webSocketProtocol.configure(config);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Action doCometSupport(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {
        req.setAttribute(BROADCASTER_FACTORY, broadcasterFactory);
        req.setAttribute(PROPERTY_USE_STREAM, useStreamForFlushingComments);
        req.setAttribute(BROADCASTER_CLASS, broadcasterClassName);
        req.setAttribute(SUPPORT_TRACKABLE, config.getInitParameter(SUPPORT_TRACKABLE));
        req.setAttribute(SUPPORT_LOCATION_HEADER, config.getInitParameter(SUPPORT_LOCATION_HEADER));

        AtmosphereRequest r  = null;
        Action a = null;
        try {
            if (config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST) != null
                    && (isIECandidate(req) || req.getParameter(HeaderConfig.JSONP_CALLBACK_NAME) != null)
                    && req.getAttribute(WebSocket.WEBSOCKET_SUSPEND) == null) {

                Map<String, String> headers = configureQueryStringAsRequest(req);
                String body = headers.remove(ATMOSPHERE_POST_BODY);
                r = new AtmosphereRequest.Builder()
                        .headers(headers)
                        .method(body != null && req.getMethod().equalsIgnoreCase("GET") ? "POST" : req.getMethod())
                        .body(body)
                        .request(req).build();

                a = cometSupport.service(r, res);
            } else {
                return cometSupport.service(req, res);
            }
        } catch (IllegalStateException ex) {
            if (ex.getMessage() != null && ex.getMessage().startsWith("Tomcat failed")) {
                if (!isFilter) {
                    logger.warn("Failed using comet support: {}, error: {} Is the Nio or Apr Connector enabled?", cometSupport.getClass().getName(),
                            ex.getMessage());
                    logger.warn("Using BlockingIOCometSupport.");
                }
                logger.trace(ex.getMessage(), ex);

                cometSupport = new BlockingIOCometSupport(config);
                service(req, res);
            } else {
                logger.error("AtmosphereServlet exception", ex);
                throw ex;
            }
        } finally {
           if (r != null && a != null && a.type != Action.TYPE.SUSPEND) {
               r.destroy();
           }
        }
        return null;
    } ##FSTMerge## public Action doCometSupport(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {
        req.setAttribute(BROADCASTER_FACTORY, broadcasterFactory);
        req.setAttribute(PROPERTY_USE_STREAM, useStreamForFlushingComments);
        req.setAttribute(BROADCASTER_CLASS, broadcasterClassName);
        req.setAttribute(SUPPORT_TRACKABLE, config.getInitParameter(SUPPORT_TRACKABLE));

        try {
            if (config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST) != null
                    && (isIECandidate(req) || req.getParameter(HeaderConfig.JSONP_CALLBACK_NAME) != null)
                    && req.getAttribute(WebSocket.WEBSOCKET_SUSPEND) == null) {

                Map<String, String> headers = configureQueryStringAsRequest(req);
                String body = headers.remove(ATMOSPHERE_POST_BODY);
                return cometSupport.service(new AtmosphereRequest.Builder()
                        .headers(headers)
                        .method(body != null && req.getMethod().equalsIgnoreCase("GET") ? "POST" : req.getMethod())
                        .body(body)
                        .request(req).build(), res);
            } else {
                return cometSupport.service(req, res);
            }
        } catch (IllegalStateException ex) {
            if (ex.getMessage() != null && ex.getMessage().startsWith("Tomcat failed")) {
                if (!isFilter) {
                    logger.warn("Failed using comet support: {}, error: {} Is the Nio or Apr Connector enabled?", cometSupport.getClass().getName(),
                            ex.getMessage());
                    logger.warn("Using BlockingIOCometSupport.");
                }
                logger.trace(ex.getMessage(), ex);

                cometSupport = new BlockingIOCometSupport(config);
                service(req, res);
            } else {
                logger.error("AtmosphereServlet exception", ex);
                throw ex;
            }
        }
        return null;
    } ##FSTMerge## public Action doCometSupport(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {
        req.setAttribute(BROADCASTER_FACTORY, broadcasterFactory);
        req.setAttribute(PROPERTY_USE_STREAM, useStreamForFlushingComments);
        req.setAttribute(BROADCASTER_CLASS, broadcasterClassName);
        req.setAttribute(SUPPORT_TRACKABLE, config.getInitParameter(SUPPORT_TRACKABLE));
        req.setAttribute(SUPPORT_LOCATION_HEADER, config.getInitParameter(SUPPORT_LOCATION_HEADER));

        AtmosphereRequest r  = null;
        Action a = null;
        try {
            if (config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST) != null
                    && (isIECandidate(req) || req.getParameter(HeaderConfig.JSONP_CALLBACK_NAME) != null)
                    && req.getAttribute(WebSocket.WEBSOCKET_SUSPEND) == null) {

                Map<String, String> headers = configureQueryStringAsRequest(req);
                String body = headers.remove(ATMOSPHERE_POST_BODY);
                r = new AtmosphereRequest.Builder()
                        .headers(headers)
                        .method(body != null && req.getMethod().equalsIgnoreCase("GET") ? "POST" : req.getMethod())
                        .body(body)
                        .request(req).build();

                a = cometSupport.service(r, res);
            } else {
                return cometSupport.service(req, res);
            }
        } catch (IllegalStateException ex) {
            if (ex.getMessage() != null && ex.getMessage().startsWith("Tomcat failed")) {
                if (!isFilter) {
                    logger.warn("Failed using comet support: {}, error: {} Is the Nio or Apr Connector enabled?", cometSupport.getClass().getName(),
                            ex.getMessage());
                    logger.warn("Using BlockingIOCometSupport.");
                }
                logger.trace(ex.getMessage(), ex);

                cometSupport = new BlockingIOCometSupport(config);
                service(req, res);
            } else {
                logger.error("AtmosphereServlet exception", ex);
                throw ex;
            }
        } finally {
           if (r != null && a != null && a.type != Action.TYPE.SUSPEND) {
               r.destroy();
           }
        }
        return null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public WebSocketProtocol getWebSocketProtocol() {
        return webSocketProtocol;
    } ##FSTMerge## ##FSTMerge## public WebSocketProtocol getWebSocketProtocol() {
        return webSocketProtocol;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(final HttpServletRequest request, final String protocol) {
        logger.debug("WebSocket upgrade requested");
        request.setAttribute(WebSocket.WEBSOCKET_INITIATED, true);
        return new JettyWebSocketHandler(request, this, webSocketProtocol);
    } ##FSTMerge## public org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(final HttpServletRequest request, final String protocol) {
        logger.debug("WebSocket upgrade requested");
        request.setAttribute(WebSocket.WEBSOCKET_INITIATED, true);
        return new JettyWebSocketHandler(request, this, webSocketProtocolClassName);
    } ##FSTMerge## public org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(final HttpServletRequest request, final String protocol) {
        logger.debug("WebSocket upgrade requested");
        request.setAttribute(WebSocket.WEBSOCKET_INITIATED, true);
        return new JettyWebSocketHandler(request, this, webSocketProtocol);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private A asyncIOWriter; ##FSTMerge## private final A asyncIOWriter; ##FSTMerge## private A asyncIOWriter;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private AsyncProtocol asyncProtocol; ##FSTMerge## private final AsyncProtocol asyncProtocol; ##FSTMerge## private AsyncProtocol asyncProtocol;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private HttpServletRequest atmosphereRequest; ##FSTMerge## private final HttpServletRequest atmosphereRequest; ##FSTMerge## private HttpServletRequest atmosphereRequest;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void destroy(){
        cookies.clear();
        headers.clear();
        atmosphereRequest = null;
        asyncIOWriter = null;
        asyncProtocol = null;
    } ##FSTMerge## ##FSTMerge## public void destroy(){
        cookies.clear();
        headers.clear();
        atmosphereRequest = null;
        asyncIOWriter = null;
        asyncProtocol = null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public ServletOutputStream getOutputStream() throws IOException {
        return new ServletOutputStream() {

            public void write(int i) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, new byte[]{(byte) i}, 0, 1));
                } else {
                    asyncIOWriter.write(new byte[]{(byte) i});
                }
            }


            public void write(byte[] bytes) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, bytes, 0, bytes.length));
                } else {
                    asyncIOWriter.write(bytes);
                }
            }

            public void write(byte[] bytes, int start, int offset) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    byte[] b = asyncProtocol.handleResponse(AtmosphereResponse.this, bytes, start, offset);
                    asyncIOWriter.write(b, 0, b.length);
                } else {
                    asyncIOWriter.write(bytes, start, offset);
                }
            }
        };
    } ##FSTMerge## @Override
    public ServletOutputStream getOutputStream() throws IOException {
        return new ServletOutputStream() {

            public void write(int i) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, new byte[]{(byte) i}, 0, 1));
                } else {
                    asyncIOWriter.write(new byte[]{(byte) i});
                }
            }


            public void write(byte[] bytes) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, bytes, 0, bytes.length));
                } else {
                    asyncIOWriter.write(bytes);
                }
            }

            public void write(byte[] bytes, int start, int offset) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    byte[] b = asyncProtocol.handleResponse(AtmosphereResponse.this, bytes, start, offset);
                    asyncIOWriter.write(b, 0, b.length);
                } else {
                    asyncIOWriter.write(bytes, start, offset);
                }
            }

        };
    } ##FSTMerge## @Override
    public ServletOutputStream getOutputStream() throws IOException {
        return new ServletOutputStream() {

            public void write(int i) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, new byte[]{(byte) i}, 0, 1));
                } else {
                    asyncIOWriter.write(new byte[]{(byte) i});
                }
            }


            public void write(byte[] bytes) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, bytes, 0, bytes.length));
                } else {
                    asyncIOWriter.write(bytes);
                }
            }

            public void write(byte[] bytes, int start, int offset) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    byte[] b = asyncProtocol.handleResponse(AtmosphereResponse.this, bytes, start, offset);
                    asyncIOWriter.write(b, 0, b.length);
                } else {
                    asyncIOWriter.write(bytes, start, offset);
                }
            }
        };
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void close() throws IOException {
        asyncIOWriter.close();
    } ##FSTMerge## ##FSTMerge## public void close() throws IOException {
        asyncIOWriter.close();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private boolean isResumed = false; ##FSTMerge## ##FSTMerge## private boolean isResumed = false;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void resume() {
        // Strangely but possible two thread try to resume at the same time.
        try {
            synchronized (event) {
                if (!isResumed && isInScope) {
                    action.type = AtmosphereServlet.Action.TYPE.RESUME;
                    isResumed = true;

                    try {
                        logger.debug("Resuming {}", getRequest());
                    } catch (Throwable ex) {
                        // Jetty NPE toString()
                        // Ignore
                        // Stop here as the request object as becomes invalid.
                        return;
                    }

                    // We need it as Jetty doesn't support timeout
                    Broadcaster b = getBroadcaster(false);
                    if (!b.isDestroyed() && b instanceof DefaultBroadcaster) {
                        ((DefaultBroadcaster) b).broadcastOnResume(this);
                    }

                    notifyListeners();
                    listeners.clear();

                    try {
                        if (!b.isDestroyed()) {
                            broadcaster.removeAtmosphereResource(this);
                        }
                    } catch (IllegalStateException ex) {
                        logger.warn("Unable to resume", this);
                        logger.debug(ex.getMessage(), ex);
                    }

                    if (b.getScope() == Broadcaster.SCOPE.REQUEST) {
                        logger.debug("Broadcaster's scope is set to request, destroying it {}", b.getID());
                        b.destroy();
                    }

                    // Resuming here means we need to pull away from all other Broadcaster, if they exists.
                    if (BroadcasterFactory.getDefault() != null) {
                        BroadcasterFactory.getDefault().removeAllAtmosphereResource(this);
                    }

                    try {
                        req.setAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT, Boolean.FALSE);
                        Meteor m = (Meteor) req.getAttribute(METEOR);
                        if (m != null) {
                            m.destroy();
                        }
                    } catch (Exception ex) {
                        logger.debug("Cannot resume an already resumed/cancelled request");
                    }

                    if (req.getAttribute(PRE_SUSPEND) == null) {
                        cometSupport.action(this);
                    }
                } else {
                    logger.debug("Cannot resume an already resumed/cancelled request {}", getRequest());
                }

                if (AtmosphereResponse.class.isAssignableFrom(response.getClass())) {
                    AtmosphereResponse.class.cast(response).destroy();
                }

                if (AtmosphereRequest.class.isAssignableFrom(req.getClass())) {
                    AtmosphereRequest.class.cast(req).destroy();
                }
            }
        } catch (Throwable t) {
            logger.trace("Wasn't able to resume a connection {}", this, t);
        } finally {
            event.setMessage(null);
        }
    } ##FSTMerge## public void resume() {
        // Strangely but possible two thread try to resume at the same time.
        try {
        synchronized (event) {
            if (!event.isResuming() && !event.isResumedOnTimeout() && event.isSuspended() && isInScope) {
                action.type = AtmosphereServlet.Action.TYPE.RESUME;

                try {
                    logger.debug("Resuming {}", getRequest());
                } catch (Throwable ex) {
                    // Jetty NPE toString()
                    // Ignore
                    // Stop here as the request object as becomes invalid.
                    return;
                }

                // We need it as Jetty doesn't support timeout
                Broadcaster b = getBroadcaster(false);
                if (!b.isDestroyed() && b instanceof DefaultBroadcaster) {
                    ((DefaultBroadcaster) b).broadcastOnResume(this);
                }

                notifyListeners();
                listeners.clear();

                try {
                    if (!b.isDestroyed()) {
                        broadcaster.removeAtmosphereResource(this);
                    }
                } catch (IllegalStateException ex) {
                    logger.warn("Unable to resume", this);
                    logger.debug(ex.getMessage(), ex);
                }

                if (b.getScope() == Broadcaster.SCOPE.REQUEST) {
                    logger.debug("Broadcaster's scope is set to request, destroying it {}", b.getID());
                    b.destroy();
                }

                // Resuming here means we need to pull away from all other Broadcaster, if they exists.
                if (BroadcasterFactory.getDefault() != null) {
                    BroadcasterFactory.getDefault().removeAllAtmosphereResource(this);
                }

                try {
                    req.setAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT, Boolean.FALSE);
                    Meteor m = (Meteor) req.getAttribute(METEOR);
                    if (m!= null) {
                        m.destroy();
                    }
                } catch (Exception ex) {
                    logger.debug("Cannot resume an already resumed/cancelled request");
                }

                if (req.getAttribute(PRE_SUSPEND) == null) {
                    cometSupport.action(this);
                }
            } else {
                logger.debug("Cannot resume an already resumed/cancelled request {}", getRequest());
            }
        }
        } catch (Throwable t) {
            logger.trace("Wasn't able to resume a connection {}", this, t);
        }
    } ##FSTMerge## public void resume() {
        // Strangely but possible two thread try to resume at the same time.
        try {
            synchronized (event) {
                if (!isResumed && isInScope) {
                    action.type = AtmosphereServlet.Action.TYPE.RESUME;
                    isResumed = true;

                    try {
                        logger.debug("Resuming {}", getRequest());
                    } catch (Throwable ex) {
                        // Jetty NPE toString()
                        // Ignore
                        // Stop here as the request object as becomes invalid.
                        return;
                    }

                    // We need it as Jetty doesn't support timeout
                    Broadcaster b = getBroadcaster(false);
                    if (!b.isDestroyed() && b instanceof DefaultBroadcaster) {
                        ((DefaultBroadcaster) b).broadcastOnResume(this);
                    }

                    notifyListeners();
                    listeners.clear();

                    try {
                        if (!b.isDestroyed()) {
                            broadcaster.removeAtmosphereResource(this);
                        }
                    } catch (IllegalStateException ex) {
                        logger.warn("Unable to resume", this);
                        logger.debug(ex.getMessage(), ex);
                    }

                    if (b.getScope() == Broadcaster.SCOPE.REQUEST) {
                        logger.debug("Broadcaster's scope is set to request, destroying it {}", b.getID());
                        b.destroy();
                    }

                    // Resuming here means we need to pull away from all other Broadcaster, if they exists.
                    if (BroadcasterFactory.getDefault() != null) {
                        BroadcasterFactory.getDefault().removeAllAtmosphereResource(this);
                    }

                    try {
                        req.setAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT, Boolean.FALSE);
                        Meteor m = (Meteor) req.getAttribute(METEOR);
                        if (m != null) {
                            m.destroy();
                        }
                    } catch (Exception ex) {
                        logger.debug("Cannot resume an already resumed/cancelled request");
                    }

                    if (req.getAttribute(PRE_SUSPEND) == null) {
                        cometSupport.action(this);
                    }
                } else {
                    logger.debug("Cannot resume an already resumed/cancelled request {}", getRequest());
                }

                if (AtmosphereResponse.class.isAssignableFrom(response.getClass())) {
                    AtmosphereResponse.class.cast(response).destroy();
                }

                if (AtmosphereRequest.class.isAssignableFrom(req.getClass())) {
                    AtmosphereRequest.class.cast(req).destroy();
                }
            }
        } catch (Throwable t) {
            logger.trace("Wasn't able to resume a connection {}", this, t);
        } finally {
            event.setMessage(null);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public HttpServletRequest getRequest(boolean enforceScope) {
        if (enforceScope && !isInScope) {
            throw new IllegalStateException("Request object no longer" + " valid. This object has been cancelled");
        }
        return req;
    } ##FSTMerge## ##FSTMerge## public HttpServletRequest getRequest(boolean enforceScope) {
        if (enforceScope && !isInScope) {
            throw new IllegalStateException("Request object no longer" + " valid. This object has been cancelled");
        }
        return req;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public HttpServletResponse getResponse(boolean enforceScope) {
        if (enforceScope && !isInScope) {
            throw new IllegalStateException("Response object no longer valid. This object has been cancelled");
        }
        return response;
    } ##FSTMerge## ##FSTMerge## public HttpServletResponse getResponse(boolean enforceScope) {
        if (enforceScope && !isInScope) {
            throw new IllegalStateException("Response object no longer valid. This object has been cancelled");
        }
        return response;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public HttpServletRequest getRequest() {
        return getRequest(true);
    } ##FSTMerge## public HttpServletRequest getRequest() {
        if (!isInScope) {
            throw new IllegalStateException("Request object no longer" + " valid. This object has been cancelled");
        }
        return req;
    } ##FSTMerge## public HttpServletRequest getRequest() {
        return getRequest(true);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public HttpServletResponse getResponse() {
        return getResponse(true);
    } ##FSTMerge## public HttpServletResponse getResponse() {
        if (!isInScope) {
            throw new IllegalStateException("Response object no longer valid. This object has been cancelled");
        }
        return response;
    } ##FSTMerge## public HttpServletResponse getResponse() {
        return getResponse(true);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void notifyListeners(AtmosphereResourceEvent event) {
        if (listeners.size() > 0) {
            logger.trace("Invoking listener with {}", event);
        } else {
            return;
        }

        Action oldAction = action;
        try {
            if (event.isResuming() || event.isResumedOnTimeout()) {
                onResume(event);
            } else if (event.isCancelled()) {
                onDisconnect(event);
            } else if (!isSuspendEvent.getAndSet(true) && event.isSuspended()) {
                onSuspend(event);
            } else if (event.throwable() != null) {
                onThrowable(event);
            } else {
                onBroadcast(event);
            }

            if (oldAction.type != action.type) {
                action().type = Action.TYPE.CREATED;
            }
        } catch (Throwable t) {
            logger.trace("Listener error {}", t);
            AtmosphereResourceEventImpl.class.cast(event).setThrowable(t);
            try {
                onThrowable(event);
            } catch (Throwable t2) {
                logger.warn("Listener error {}", t2);
            }
        }
    } ##FSTMerge## public void notifyListeners(AtmosphereResourceEvent event) {
        if (listeners.size() > 0) {
            logger.trace("Invoking listener with {}", event);
        } else {
            return;
        }

        try {
            if (event.isResuming() || event.isResumedOnTimeout()) {
                onResume(event);
            } else if (event.isCancelled()) {
                onDisconnect(event);
            } else if (!isSuspendEvent.getAndSet(true) && event.isSuspended()) {
                onSuspend(event);
            } else if (event.throwable() != null) {
                onThrowable(event);
            } else {
                onBroadcast(event);
            }
        } catch (Throwable t) {
            logger.trace("Listener error {}", t);
            AtmosphereResourceEventImpl.class.cast(event).setThrowable(t);
            try {
                onThrowable(event);
            } catch (Throwable t2) {
                logger.warn("Listener error {}", t2);
            }
        }
    } ##FSTMerge## public void notifyListeners(AtmosphereResourceEvent event) {
        if (listeners.size() > 0) {
            logger.trace("Invoking listener with {}", event);
        } else {
            return;
        }

        Action oldAction = action;
        try {
            if (event.isResuming() || event.isResumedOnTimeout()) {
                onResume(event);
            } else if (event.isCancelled()) {
                onDisconnect(event);
            } else if (!isSuspendEvent.getAndSet(true) && event.isSuspended()) {
                onSuspend(event);
            } else if (event.throwable() != null) {
                onThrowable(event);
            } else {
                onBroadcast(event);
            }

            if (oldAction.type != action.type) {
                action().type = Action.TYPE.CREATED;
            }
        } catch (Throwable t) {
            logger.trace("Listener error {}", t);
            AtmosphereResourceEventImpl.class.cast(event).setThrowable(t);
            try {
                onThrowable(event);
            } catch (Throwable t2) {
                logger.warn("Listener error {}", t2);
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void cancel() throws IOException {
        action.type = Action.TYPE.RESUME;
        cometSupport.action(this);
        // We must close the underlying WebSocket as well.
        if (AtmosphereResponse.class.isAssignableFrom(response.getClass())) {
            AtmosphereResponse.class.cast(response).close();
            AtmosphereResponse.class.cast(response).destroy();
        }

        if (AtmosphereRequest.class.isAssignableFrom(req.getClass())) {
            AtmosphereRequest.class.cast(req).destroy();
        }

        // TODO: Grab some measurement.
//        req = null;
//        response = null;

        // Just in case
        if (broadcaster != null) {
            broadcaster.removeAtmosphereResource(this);
        }
        event.destroy();
    } ##FSTMerge## ##FSTMerge## public void cancel() throws IOException {
        action.type = Action.TYPE.RESUME;
        cometSupport.action(this);
        // We must close the underlying WebSocket as well.
        if (AtmosphereResponse.class.isAssignableFrom(response.getClass())) {
            AtmosphereResponse.class.cast(response).close();
            AtmosphereResponse.class.cast(response).destroy();
        }

        if (AtmosphereRequest.class.isAssignableFrom(req.getClass())) {
            AtmosphereRequest.class.cast(req).destroy();
        }

        // TODO: Grab some measurement.
//        req = null;
//        response = null;

        // Just in case
        if (broadcaster != null) {
            broadcaster.removeAtmosphereResource(this);
        }
        event.destroy();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected AtmosphereResourceImpl resource; ##FSTMerge## protected final AtmosphereResourceImpl resource; ##FSTMerge## protected AtmosphereResourceImpl resource;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setThrowable(Throwable t) {
        this.throwable = t;
    } ##FSTMerge## public void setThrowable(Throwable t) {
        this.throwable = throwable;
    } ##FSTMerge## public void setThrowable(Throwable t) {
        this.throwable = t;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void destroy(){
        resource = null;
        message = null;
    } ##FSTMerge## ##FSTMerge## public void destroy(){
        resource = null;
        message = null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventImpl.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private HttpServletRequest request; ##FSTMerge## private final HttpServletRequest request; ##FSTMerge## private HttpServletRequest request;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void destroy() {
        localAttributes.clear();
        if (bis != null) {
            try {
                bis.close();
            } catch (IOException e) {
            }
        }

        if (br != null) {
            try {
                br.close();
            } catch (IOException e) {
            }
        }

        headers.clear();
        queryStrings.clear();

        // Help GC
        if (request != null) {
            request.removeAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
            request = null;
        }
    } ##FSTMerge## ##FSTMerge## public void destroy() {
        localAttributes.clear();
        if (bis != null) {
            try {
                bis.close();
            } catch (IOException e) {
            }
        }

        if (br != null) {
            try {
                br.close();
            } catch (IOException e) {
            }
        }

        headers.clear();
        queryStrings.clear();

        // Help GC
        if (request != null) {
            request.removeAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
            request = null;
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private boolean trackActiveRequest = false; ##FSTMerge## ##FSTMerge## private boolean trackActiveRequest = false;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void init(ServletConfig sc) throws ServletException {

        String maxInactive = sc.getInitParameter(MAX_INACTIVE) != null ? sc.getInitParameter(MAX_INACTIVE) :
                config.getInitParameter(MAX_INACTIVE);
        if (maxInactive != null) {
            trackActiveRequest = true;
            final long maxInactiveTime = Long.parseLong(maxInactive);
            if (maxInactiveTime <= 0) return;

            closedDetector.scheduleAtFixedRate(new Runnable() {
                public void run() {
                    for (HttpServletRequest req : aliveRequests.keySet()) {
                        long l = (Long) req.getAttribute(MAX_INACTIVE);
                        if (l > 0 && System.currentTimeMillis() - l > maxInactiveTime) {
                            try {
                                logger.debug("Close detector disconnecting {}. Current size {}", req, aliveRequests.size());
                                AtmosphereResourceImpl r = (AtmosphereResourceImpl) aliveRequests.remove(req);
                                cancelled(req, r.getResponse(false));
                            } catch (Throwable e) {
                                logger.warn("closedDetector", e);
                            } finally {
                                try {
                                    req.setAttribute(MAX_INACTIVE, (long) -1);
                                } catch (Throwable t) {
                                    logger.trace("closedDetector", t);
                                }
                            }
                        }
                    }
                }
            }, 0, 1, TimeUnit.SECONDS);
        }
    } ##FSTMerge## @Override
    public void init(ServletConfig sc) throws ServletException {

        String maxInactive = sc.getInitParameter(MAX_INACTIVE) != null ? sc.getInitParameter(MAX_INACTIVE) :
                config.getInitParameter(MAX_INACTIVE);
        if (maxInactive != null) {
            final long maxInactiveTime = Long.parseLong(maxInactive);
            if (maxInactiveTime <= 0) return;

            closedDetector.scheduleAtFixedRate(new Runnable() {
                public void run() {
                    for (HttpServletRequest req : aliveRequests.keySet()) {
                        long l = (Long) req.getAttribute(MAX_INACTIVE);
                        if (l > 0 && System.currentTimeMillis() - l > maxInactiveTime) {
                            try {
                                cancelled(req, aliveRequests.get(req).getResponse());
                                req.setAttribute(MAX_INACTIVE, (long) -1);
                            } catch (IOException e) {
                                logger.trace("closedDetector", e);
                            } catch (ServletException e) {
                                logger.trace("closedDetector", e);
                            }
                        }
                    }
                }
            }, 0, 1, TimeUnit.SECONDS);
        }
    } ##FSTMerge## @Override
    public void init(ServletConfig sc) throws ServletException {

        String maxInactive = sc.getInitParameter(MAX_INACTIVE) != null ? sc.getInitParameter(MAX_INACTIVE) :
                config.getInitParameter(MAX_INACTIVE);
        if (maxInactive != null) {
            trackActiveRequest = true;
            final long maxInactiveTime = Long.parseLong(maxInactive);
            if (maxInactiveTime <= 0) return;

            closedDetector.scheduleAtFixedRate(new Runnable() {
                public void run() {
                    for (HttpServletRequest req : aliveRequests.keySet()) {
                        long l = (Long) req.getAttribute(MAX_INACTIVE);
                        if (l > 0 && System.currentTimeMillis() - l > maxInactiveTime) {
                            try {
                                logger.debug("Close detector disconnecting {}. Current size {}", req, aliveRequests.size());
                                AtmosphereResourceImpl r = (AtmosphereResourceImpl) aliveRequests.remove(req);
                                cancelled(req, r.getResponse(false));
                            } catch (Throwable e) {
                                logger.warn("closedDetector", e);
                            } finally {
                                try {
                                    req.setAttribute(MAX_INACTIVE, (long) -1);
                                } catch (Throwable t) {
                                    logger.trace("closedDetector", t);
                                }
                            }
                        }
                    }
                }
            }, 0, 1, TimeUnit.SECONDS);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ Action action(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        boolean webSocketEnabled = false;
        if (req.getHeaders("Connection") != null && req.getHeaders("Connection").hasMoreElements()) {
            String[] e = req.getHeaders("Connection").nextElement().toString().split(",");
            for (String upgrade : e) {
                if (upgrade.equalsIgnoreCase("Upgrade")) {
                    webSocketEnabled = true;
                    break;
                }
            }
        }

        if (webSocketEnabled && !supportWebSocket()) {
            res.setStatus(501);
            res.addHeader(X_ATMOSPHERE_ERROR, "Websocket protocol not supported");
            res.flushBuffer();
            return new Action();
        }

        if (config.handlers().isEmpty()) {
            logger.error("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
            throw new ServletException("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
        }

        if (supportSession()) {
            // Create the session needed to support the Resume
            // operation from disparate requests.
            HttpSession session = req.getSession(true);
            // Do not allow times out.
            if (session.getMaxInactiveInterval() == DEFAULT_SESSION_TIMEOUT) {
                session.setMaxInactiveInterval(-1);
            }
        }

        req.setAttribute(FrameworkConfig.SUPPORT_SESSION, supportSession());

        AtmosphereHandlerWrapper handlerWrapper = map(req);
        // Check Broadcaster state. If destroyed, replace it.
        Broadcaster b = handlerWrapper.broadcaster;
        if (b.isDestroyed()) {
            synchronized (handlerWrapper) {
                config.getBroadcasterFactory().remove(b, b.getID());
                handlerWrapper.broadcaster = config.getBroadcasterFactory().get(b.getID());
            }
        }
        AtmosphereResourceImpl resource = new AtmosphereResourceImpl(config, handlerWrapper.broadcaster, req, res, this, handlerWrapper.atmosphereHandler);

        req.setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE, resource);
        req.setAttribute(FrameworkConfig.ATMOSPHERE_HANDLER, handlerWrapper.atmosphereHandler);

        try {
            handlerWrapper.atmosphereHandler.onRequest(resource);
        } catch (IOException t) {
            resource.onThrowable(t);
            throw t;
        }

        if (trackActiveRequest && resource.getAtmosphereResourceEvent().isSuspended() && req.getAttribute(FrameworkConfig.CANCEL_SUSPEND_OPERATION) == null) {
            req.setAttribute(MAX_INACTIVE, System.currentTimeMillis());
            aliveRequests.put(req, resource);
        }
        return resource.action();
    } ##FSTMerge## Action action(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        boolean webSocketEnabled = false;
        if (req.getHeaders("Connection") != null && req.getHeaders("Connection").hasMoreElements()) {
            String[] e = req.getHeaders("Connection").nextElement().toString().split(",");
            for (String upgrade : e) {
                if (upgrade.equalsIgnoreCase("Upgrade")) {
                    webSocketEnabled = true;
                    break;
                }
            }
        }

        if (webSocketEnabled && !supportWebSocket()) {
            res.setStatus(501);
            res.addHeader(X_ATMOSPHERE_ERROR, "Websocket protocol not supported");
            res.flushBuffer();
            return new Action();
        }

        if (config.handlers().isEmpty()) {
            logger.error("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
            throw new ServletException("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
        }

        if (supportSession()) {
            // Create the session needed to support the Resume
            // operation from disparate requests.
            HttpSession session = req.getSession(true);
            // Do not allow times out.
            if (session.getMaxInactiveInterval() == DEFAULT_SESSION_TIMEOUT) {
                session.setMaxInactiveInterval(-1);
            }
        }

        req.setAttribute(FrameworkConfig.SUPPORT_SESSION, supportSession());

        AtmosphereHandlerWrapper handlerWrapper = map(req);
        // Check Broadcaster state. If destroyed, replace it.
        Broadcaster b = handlerWrapper.broadcaster;
        if (b.isDestroyed()) {
            synchronized (handlerWrapper) {
                config.getBroadcasterFactory().remove(b, b.getID());
                handlerWrapper.broadcaster = config.getBroadcasterFactory().get(b.getID());
            }
        }
        AtmosphereResourceImpl resource = new AtmosphereResourceImpl(config, handlerWrapper.broadcaster, req, res, this, handlerWrapper.atmosphereHandler);

        req.setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE, resource);
        req.setAttribute(FrameworkConfig.ATMOSPHERE_HANDLER, handlerWrapper.atmosphereHandler);

        try {
            handlerWrapper.atmosphereHandler.onRequest(resource);
        } catch (IOException t) {
            resource.onThrowable(t);
            throw t;
        }

        if (resource.getAtmosphereResourceEvent().isSuspended()) {
            req.setAttribute(MAX_INACTIVE, System.currentTimeMillis());
            aliveRequests.put(req, resource);
        }
        return resource.action();
    } ##FSTMerge## Action action(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        boolean webSocketEnabled = false;
        if (req.getHeaders("Connection") != null && req.getHeaders("Connection").hasMoreElements()) {
            String[] e = req.getHeaders("Connection").nextElement().toString().split(",");
            for (String upgrade : e) {
                if (upgrade.equalsIgnoreCase("Upgrade")) {
                    webSocketEnabled = true;
                    break;
                }
            }
        }

        if (webSocketEnabled && !supportWebSocket()) {
            res.setStatus(501);
            res.addHeader(X_ATMOSPHERE_ERROR, "Websocket protocol not supported");
            res.flushBuffer();
            return new Action();
        }

        if (config.handlers().isEmpty()) {
            logger.error("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
            throw new ServletException("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
        }

        if (supportSession()) {
            // Create the session needed to support the Resume
            // operation from disparate requests.
            HttpSession session = req.getSession(true);
            // Do not allow times out.
            if (session.getMaxInactiveInterval() == DEFAULT_SESSION_TIMEOUT) {
                session.setMaxInactiveInterval(-1);
            }
        }

        req.setAttribute(FrameworkConfig.SUPPORT_SESSION, supportSession());

        AtmosphereHandlerWrapper handlerWrapper = map(req);
        // Check Broadcaster state. If destroyed, replace it.
        Broadcaster b = handlerWrapper.broadcaster;
        if (b.isDestroyed()) {
            synchronized (handlerWrapper) {
                config.getBroadcasterFactory().remove(b, b.getID());
                handlerWrapper.broadcaster = config.getBroadcasterFactory().get(b.getID());
            }
        }
        AtmosphereResourceImpl resource = new AtmosphereResourceImpl(config, handlerWrapper.broadcaster, req, res, this, handlerWrapper.atmosphereHandler);

        req.setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE, resource);
        req.setAttribute(FrameworkConfig.ATMOSPHERE_HANDLER, handlerWrapper.atmosphereHandler);

        try {
            handlerWrapper.atmosphereHandler.onRequest(resource);
        } catch (IOException t) {
            resource.onThrowable(t);
            throw t;
        }

        if (trackActiveRequest && resource.getAtmosphereResourceEvent().isSuspended() && req.getAttribute(FrameworkConfig.CANCEL_SUSPEND_OPERATION) == null) {
            req.setAttribute(MAX_INACTIVE, System.currentTimeMillis());
            aliveRequests.put(req, resource);
        }
        return resource.action();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void action(AtmosphereResourceImpl r) {
        if (trackActiveRequest) {
            aliveRequests.remove(r.getRequest(false));
        }
    } ##FSTMerge## public void action(AtmosphereResourceImpl r) {
        aliveRequests.remove(r.getRequest());
    } ##FSTMerge## public void action(AtmosphereResourceImpl r) {
        if (trackActiveRequest) {
            aliveRequests.remove(r.getRequest(false));
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected AtmosphereHandlerWrapper map(String path) {
        AtmosphereHandlerWrapper atmosphereHandlerWrapper = config.handlers().get(path);
        if (atmosphereHandlerWrapper == null) {
            final Map<String, String> m = new HashMap<String, String>();
            for (Map.Entry<String, AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {
                UriTemplate t = new UriTemplate(e.getKey());
                logger.trace("Trying to map {} to {}", t, path);
                if (t.match(path, m)) {
                    atmosphereHandlerWrapper = e.getValue();
                    logger.trace("Mapped {} to {}", t, e.getValue());
                    break;
                }
            }
        }
        return atmosphereHandlerWrapper;
    } ##FSTMerge## protected AtmosphereHandlerWrapper map(String path) {
        AtmosphereHandlerWrapper atmosphereHandlerWrapper = config.handlers().get(path);
        if (atmosphereHandlerWrapper == null) {
            final Map<String, String> m = new HashMap<String, String>();
            for (Map.Entry<String, AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {
                UriTemplate t = new UriTemplate(e.getKey());
                logger.trace("Trying to map {} to {}", t, path);
                if (t.match(path, m)) {
                    atmosphereHandlerWrapper = e.getValue();
                    logger.trace("Mapped {} to {}", t, e.getValue());
                    break;
                }
            }
        }
        return atmosphereHandlerWrapper;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletException {
        String path = req.getServletPath();
        if (path == null || path.length() == 0) {
            path = "/";
        }

        // The Algorithm as been fixed in 0.9
        AtmosphereHandlerWrapper atmosphereHandlerWrapper = config.handlers().get(path);
        if (atmosphereHandlerWrapper == null) {
            // Try the /*
            if (!path.endsWith("/")) {
                path += "/*";
            } else {
                path += "*";
            }
            atmosphereHandlerWrapper = config.handlers().get(path);
            if (atmosphereHandlerWrapper == null) {
                atmosphereHandlerWrapper = config.handlers().get("/*");
                if (atmosphereHandlerWrapper == null) {

                    if (req.getPathInfo() != null) {
                        // Try appending the pathInfo
                        path = req.getServletPath() + req.getPathInfo();
                    }

                    atmosphereHandlerWrapper = config.handlers().get(path);
                    if (atmosphereHandlerWrapper == null) {
                        String ppath = path;
                        path = path.substring(0, path.lastIndexOf("/")) + "/*";

                        atmosphereHandlerWrapper = config.handlers().get(path);
                        if (atmosphereHandlerWrapper == null) {
                            path = ppath;
                            if (!path.endsWith("/")) {
                                path += "/*";
                            } else {
                                path += "*";
                            }
                            atmosphereHandlerWrapper = config.handlers().get(path);
                            if (atmosphereHandlerWrapper == null) {
                                logger.warn("No AtmosphereHandler maps request for {}", path);
                                for (String m : config.handlers().keySet()) {
                                    logger.warn("\tAtmosphereHandler registered: {}", m);
                                }
                                throw new ServletException("No AtmosphereHandler maps request for " + path);
                            }
                        }
                    }
                }
            }
        }
        config.getBroadcasterFactory().add(atmosphereHandlerWrapper.broadcaster,
                atmosphereHandlerWrapper.broadcaster.getID());
        return atmosphereHandlerWrapper;
    } ##FSTMerge## protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletException {
        String path;
        if (req.getPathInfo() != null) {
            path = req.getServletPath() + req.getPathInfo();
        } else {
            path = req.getServletPath();
        }
        if (path == null || path.length() <= 1) {
            path = "/all";
        }

        AtmosphereHandlerWrapper atmosphereHandlerWrapper = map(path);
        if (atmosphereHandlerWrapper == null) {
            atmosphereHandlerWrapper = map("/all");
        }

        if (atmosphereHandlerWrapper == null) {
            throw new ServletException("No AtmosphereHandler maps request for " + path);
        }
        config.getBroadcasterFactory().add(atmosphereHandlerWrapper.broadcaster,
                atmosphereHandlerWrapper.broadcaster.getID());
        return atmosphereHandlerWrapper;
    } ##FSTMerge## protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletException {
        String path;
        if (req.getPathInfo() != null) {
            path = req.getServletPath() + req.getPathInfo();
        } else {
            path = req.getServletPath();
        }
        if (path == null || path.length() <= 1) {
            path = "/all";
        }

        AtmosphereHandlerWrapper atmosphereHandlerWrapper = map(path);
        if (atmosphereHandlerWrapper == null) {
            atmosphereHandlerWrapper = map("/all");
        }

        if (atmosphereHandlerWrapper == null) {
            throw new ServletException("No AtmosphereHandler maps request for " + path);
        }
        config.getBroadcasterFactory().add(atmosphereHandlerWrapper.broadcaster,
                atmosphereHandlerWrapper.broadcaster.getID());
        return atmosphereHandlerWrapper;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Action resumed(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {
        return action(request, response);
    } ##FSTMerge## public Action resumed(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {
        logger.debug("(resumed) invoked:\n HttpServletRequest: {}\n HttpServletResponse: {}", request, response);
        return action(request, response);
    } ##FSTMerge## public Action resumed(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {
        return action(request, response);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Action timedout(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {

        AtmosphereResourceImpl r = null;
        try {
            if (trackActiveRequest) {
                long l = (Long) request.getAttribute(MAX_INACTIVE);
                if (l == -1) {
                    // The closedDetector closed the connection.
                    return timedoutAction;
                }
                request.setAttribute(MAX_INACTIVE, (long) -1);
            }

            logger.debug("Timing out the connection for request {}", request);

            // Something went wrong.
            if (request == null || response == null) {
                logger.warn("Invalid Request/Response: {}/{}", request, response);
                return timedoutAction;
            }

            r = (AtmosphereResourceImpl) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);

            if (r != null && r.getAtmosphereResourceEvent().isSuspended()) {
                r.getAtmosphereResourceEvent().setIsResumedOnTimeout(true);

                Broadcaster b = r.getBroadcaster();
                if (b instanceof DefaultBroadcaster) {
                    ((DefaultBroadcaster) b).broadcastOnResume(r);
                }

                if (request.getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT) != null) {
                    r.getAtmosphereResourceEvent().setIsResumedOnTimeout(
                            (Boolean) request.getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT));
                }

                invokeAtmosphereHandler(r);

                try {
                    response.getOutputStream().close();
                } catch (Throwable t) {
                    try {
                        response.getWriter().close();
                    } catch (Throwable t2) {
                    }
                }
            }
        } catch (Throwable t) {
            logger.error("failed to timeout resource {}", r, t);
        } finally {
            try {
                if (r != null) {
                    r.cancel();
                    r.notifyListeners();
                }
            } catch (Throwable t) {
                logger.trace("timedout", t);
            } finally {
                if (r != null) {
                    destroyResource(r);
                }
            }
        }

        return timedoutAction;
    } ##FSTMerge## public Action timedout(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {

        AtmosphereResourceImpl r;
        long l = (Long) request.getAttribute(MAX_INACTIVE);
        if (l == -1) {
            // The closedDetector closed the connection.
            return timedoutAction;
        }
        request.setAttribute(MAX_INACTIVE, (long) -1);

        logger.debug("Timing out the connection for request {}", request);

        // Something went wrong.
        if (request == null || response == null) {
            logger.warn("Invalid Request/Response: {}/{}", request, response);
            return timedoutAction;
        }

        r = (AtmosphereResourceImpl) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);

        if (r != null && r.getAtmosphereResourceEvent().isSuspended()) {
            r.getAtmosphereResourceEvent().setIsResumedOnTimeout(true);

            Broadcaster b = r.getBroadcaster();
            if (b instanceof DefaultBroadcaster) {
                ((DefaultBroadcaster) b).broadcastOnResume(r);
            }

            if (r.getRequest().getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT) != null) {
                r.getAtmosphereResourceEvent().setIsResumedOnTimeout(
                        (Boolean) r.getRequest().getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT));
            }
            invokeAtmosphereHandler(r);
            try {
                r.getResponse().getOutputStream().close();
            } catch (Throwable t) {
                try {
                    r.getResponse().getWriter().close();
                } catch (Throwable t2) {
                }
            }
        }

        return timedoutAction;
    } ##FSTMerge## public Action timedout(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {

        AtmosphereResourceImpl r = null;
        try {
            if (trackActiveRequest) {
                long l = (Long) request.getAttribute(MAX_INACTIVE);
                if (l == -1) {
                    // The closedDetector closed the connection.
                    return timedoutAction;
                }
                request.setAttribute(MAX_INACTIVE, (long) -1);
            }

            logger.debug("Timing out the connection for request {}", request);

            // Something went wrong.
            if (request == null || response == null) {
                logger.warn("Invalid Request/Response: {}/{}", request, response);
                return timedoutAction;
            }

            r = (AtmosphereResourceImpl) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);

            if (r != null && r.getAtmosphereResourceEvent().isSuspended()) {
                r.getAtmosphereResourceEvent().setIsResumedOnTimeout(true);

                Broadcaster b = r.getBroadcaster();
                if (b instanceof DefaultBroadcaster) {
                    ((DefaultBroadcaster) b).broadcastOnResume(r);
                }

                if (request.getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT) != null) {
                    r.getAtmosphereResourceEvent().setIsResumedOnTimeout(
                            (Boolean) request.getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT));
                }

                invokeAtmosphereHandler(r);

                try {
                    response.getOutputStream().close();
                } catch (Throwable t) {
                    try {
                        response.getWriter().close();
                    } catch (Throwable t2) {
                    }
                }
            }
        } catch (Throwable t) {
            logger.error("failed to timeout resource {}", r, t);
        } finally {
            try {
                if (r != null) {
                    r.cancel();
                    r.notifyListeners();
                }
            } catch (Throwable t) {
                logger.trace("timedout", t);
            } finally {
                if (r != null) {
                    destroyResource(r);
                }
            }
        }

        return timedoutAction;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void invokeAtmosphereHandler(AtmosphereResourceImpl r) throws IOException {
        if (!r.isInScope()) return;

        HttpServletRequest req = r.getRequest(false);
        String disableOnEvent = r.getAtmosphereConfig().getInitParameter(ApplicationConfig.DISABLE_ONSTATE_EVENT);

        try {
            if (disableOnEvent == null || !disableOnEvent.equals(String.valueOf(true))) {
                AtmosphereHandler<HttpServletRequest, HttpServletResponse> atmosphereHandler =
                        (AtmosphereHandler<HttpServletRequest, HttpServletResponse>)
                                req.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);

                synchronized (r) {
                    atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());

                    Meteor m = (Meteor) req.getAttribute(AtmosphereResourceImpl.METEOR);
                    if (m != null) {
                        m.destroy();
                    }
                }
                req.removeAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
                r.setIsInScope(false);
            }
        } catch (IOException ex) {
            try {
                r.onThrowable(ex);
            } catch (Throwable t) {
                logger.warn("failed calling onThrowable()", ex);
            }
        }
    } ##FSTMerge## void invokeAtmosphereHandler(AtmosphereResourceImpl r) throws IOException {
        HttpServletRequest req = r.getRequest();
        HttpServletResponse response = r.getResponse();
        String disableOnEvent = r.getAtmosphereConfig().getInitParameter(ApplicationConfig.DISABLE_ONSTATE_EVENT);

        try {
            if (!r.getResponse().equals(response)) {
                logger.warn("Invalid response: {}", response);
            } else if (disableOnEvent == null || !disableOnEvent.equals(String.valueOf(true))) {
                AtmosphereHandler<HttpServletRequest, HttpServletResponse> atmosphereHandler =
                        (AtmosphereHandler<HttpServletRequest, HttpServletResponse>)
                                req.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);

                synchronized (r) {
                    atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());
                    r.setIsInScope(false);

                    Meteor m = (Meteor) req.getAttribute(AtmosphereResourceImpl.METEOR);
                    if (m != null) {
                        m.destroy();
                    }
                }
            }
        } catch (IOException ex) {
            try {
                r.onThrowable(ex);
            } catch (Throwable t) {
                logger.warn("failed calling onThrowable()", ex);
            }
        } finally {
            try {
                aliveRequests.remove(req);
                r.notifyListeners();
            } finally {
                destroyResource(r);
            }
        }
    } ##FSTMerge## void invokeAtmosphereHandler(AtmosphereResourceImpl r) throws IOException {
        if (!r.isInScope()) return;

        HttpServletRequest req = r.getRequest(false);
        String disableOnEvent = r.getAtmosphereConfig().getInitParameter(ApplicationConfig.DISABLE_ONSTATE_EVENT);

        try {
            if (disableOnEvent == null || !disableOnEvent.equals(String.valueOf(true))) {
                AtmosphereHandler<HttpServletRequest, HttpServletResponse> atmosphereHandler =
                        (AtmosphereHandler<HttpServletRequest, HttpServletResponse>)
                                req.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);

                synchronized (r) {
                    atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());
                    Meteor m = (Meteor) req.getAttribute(AtmosphereResourceImpl.METEOR);
                    if (m != null) {
                        m.destroy();
                    }
                }

                req.removeAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
                r.setIsInScope(false);
            }
        } catch (IOException ex) {
            try {
                r.onThrowable(ex);
            } catch (Throwable t) {
                logger.warn("failed calling onThrowable()", ex);
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public static void destroyResource(AtmosphereResource<?, ?> r) {
        if (r == null) return;

        try {
            r.removeEventListeners();
            try {
                AtmosphereResourceImpl.class.cast(r).getBroadcaster(false).removeAtmosphereResource(r);
            } catch (IllegalStateException ex) {
                logger.trace(ex.getMessage(), ex);
            }
            if (BroadcasterFactory.getDefault() != null) {
                BroadcasterFactory.getDefault().removeAllAtmosphereResource(r);
            }
        } catch (Throwable t) {
            logger.trace("destroyResource", t);
        }
    } ##FSTMerge## public static void destroyResource(AtmosphereResource<?, ?> r) {
        if (r == null) return;

        r.removeEventListeners();
        try {
            AtmosphereResourceImpl.class.cast(r).getBroadcaster(false).removeAtmosphereResource(r);
        } catch (IllegalStateException ex) {
            logger.trace(ex.getMessage(), ex);
        }
        if (BroadcasterFactory.getDefault() != null) {
            BroadcasterFactory.getDefault().removeAllAtmosphereResource(r);
        }
    } ##FSTMerge## public static void destroyResource(AtmosphereResource<?, ?> r) {
        if (r == null) return;

        try {
            r.removeEventListeners();
            try {
                AtmosphereResourceImpl.class.cast(r).getBroadcaster(false).removeAtmosphereResource(r);
            } catch (IllegalStateException ex) {
                logger.trace(ex.getMessage(), ex);
            }
            if (BroadcasterFactory.getDefault() != null) {
                BroadcasterFactory.getDefault().removeAllAtmosphereResource(r);
            }
        } catch (Throwable t) {
            logger.trace("destroyResource", t);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public synchronized Action cancelled(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        AtmosphereResourceImpl r = null;
        try {
            if (trackActiveRequest) {
                long l = (Long) req.getAttribute(MAX_INACTIVE);
                if (l == -1) {
                    // The closedDetector closed the connection.
                    return timedoutAction;
                }
                req.setAttribute(MAX_INACTIVE, (long) -1);
            }

            logger.debug("Cancelling the connection for request {}", req);

            r = (AtmosphereResourceImpl) req.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
            if (r != null) {
                r.getAtmosphereResourceEvent().setCancelled(true);
                invokeAtmosphereHandler(r);

                try {
                    r.getResponse().sendError(503);
                    r.getResponse().getOutputStream().close();
                } catch (Throwable t) {
                    try {
                        r.getResponse().getWriter().close();
                    } catch (Throwable t2) {
                    }
                }

                r.setIsInScope(false);
            }
        } catch (Throwable ex) {
            // Something wrong happenned, ignore the exception
            logger.debug("failed to cancel resource: " + r, ex);
        } finally {
            try {
                if (r != null) {
                    r.cancel();
                    r.notifyListeners();
                }
            } catch (Throwable t) {
                logger.trace("cancel", t);
            } finally {
                if (r != null) {
                    destroyResource(r);
                }
            }
        }

        return cancelledAction;
    } ##FSTMerge## public synchronized Action cancelled(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        AtmosphereResourceImpl r = null;
        long l = (Long) req.getAttribute(MAX_INACTIVE);
        if (l == -1) {
            // The closedDetector closed the connection.
            return timedoutAction;
        }

        logger.debug("Cancelling the connection for request {}", req);

        req.setAttribute(MAX_INACTIVE, (long) -1);

        try {
            r = (AtmosphereResourceImpl) req.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
            if (r != null) {
                r.getAtmosphereResourceEvent().setCancelled(true);
                invokeAtmosphereHandler(r);

                try {
                    r.getResponse().sendError(503);
                    r.getResponse().getOutputStream().close();
                } catch (Throwable t) {
                    try {
                        r.getResponse().getWriter().close();
                    } catch (Throwable t2) {
                    }
                }

                r.setIsInScope(false);
            }
        } catch (Throwable ex) {
            // Something wrong happenned, ignore the exception
            logger.debug("failed to cancel resource: " + r, ex);
        } finally {
            try {
                aliveRequests.remove(req);
                if (r != null) {
                    r.notifyListeners();
                }
            } finally {
                if (r != null) {
                    destroyResource(r);
                }
            }
        }

        return cancelledAction;
    } ##FSTMerge## public synchronized Action cancelled(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        AtmosphereResourceImpl r = null;
        try {
            if (trackActiveRequest) {
                long l = (Long) req.getAttribute(MAX_INACTIVE);
                if (l == -1) {
                    // The closedDetector closed the connection.
                    return timedoutAction;
                }
                req.setAttribute(MAX_INACTIVE, (long) -1);
            }

            logger.debug("Cancelling the connection for request {}", req);

            r = (AtmosphereResourceImpl) req.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
            if (r != null) {
                r.getAtmosphereResourceEvent().setCancelled(true);
                invokeAtmosphereHandler(r);

                try {
                    r.getResponse().sendError(503);
                    r.getResponse().getOutputStream().close();
                } catch (Throwable t) {
                    try {
                        r.getResponse().getWriter().close();
                    } catch (Throwable t2) {
                    }
                }

                r.setIsInScope(false);
            }
        } catch (Throwable ex) {
            // Something wrong happenned, ignore the exception
            logger.debug("failed to cancel resource: " + r, ex);
        } finally {
            try {
                if (r != null) {
                    r.cancel();
                    r.notifyListeners();
                }
            } catch (Throwable t) {
                logger.trace("cancel", t);
            } finally {
                if (r != null) {
                    destroyResource(r);
                }
            }
        }

        return cancelledAction;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: smallMethod
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void close() throws IOException; ##FSTMerge## ##FSTMerge## void close() throws IOException;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriter.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String SUPPORT_LOCATION_HEADER = "org.atmosphere.jersey.supportLocationHeader"; ##FSTMerge## ##FSTMerge## String SUPPORT_LOCATION_HEADER = "org.atmosphere.jersey.supportLocationHeader";
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Path("/")
@Produces("text/html")
public ##FSTMerge## ##FSTMerge## @Path("/")
@Produces("text/html")
public
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/samples/async-channel/src/main/java/org/atmosphere/samples/pubsub/FileResource.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private
    @Context
    ServletContext sc; ##FSTMerge## ##FSTMerge## private
    @Context
    ServletContext sc;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/samples/async-channel/src/main/java/org/atmosphere/samples/pubsub/FileResource.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Path("/jquery/{id}")
    @GET
    public InputStream getJQuery(@PathParam("id") PathSegment ps) {
        return sc.getResourceAsStream("/jquery/" + ps.getPath());
    } ##FSTMerge## ##FSTMerge## @Path("/jquery/{id}")
    @GET
    public InputStream getJQuery(@PathParam("id") PathSegment ps) {
        return sc.getResourceAsStream("/jquery/" + ps.getPath());
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/samples/async-channel/src/main/java/org/atmosphere/samples/pubsub/FileResource.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @GET
    public InputStream getIndex() {
        return sc.getResourceAsStream("/index.html");
    } ##FSTMerge## ##FSTMerge## @GET
    public InputStream getIndex() {
        return sc.getResourceAsStream("/index.html");
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/samples/async-channel/src/main/java/org/atmosphere/samples/pubsub/FileResource.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Documented
public ##FSTMerge## ##FSTMerge## @Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Documented
public
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/annotations/src/main/java/org/atmosphere/annotation/Asynchronous.java
############## CONFLICT ##############
Conflict type: DefaultValueAnnotation
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ boolean waitForResource() default true; ##FSTMerge## ##FSTMerge## boolean waitForResource() default true;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/annotations/src/main/java/org/atmosphere/annotation/Asynchronous.java
############## CONFLICT ##############
Conflict type: DefaultValueAnnotation
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Class<? extends BroadcastFilter>[] broadcastFilter() default {}; ##FSTMerge## ##FSTMerge## public Class<? extends BroadcastFilter>[] broadcastFilter() default {};
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/annotations/src/main/java/org/atmosphere/annotation/Asynchronous.java
############## CONFLICT ##############
Conflict type: DefaultValueAnnotation
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String header() default HeaderConfig.X_ATMOSPHERE_TRACKING_ID; ##FSTMerge## ##FSTMerge## String header() default HeaderConfig.X_ATMOSPHERE_TRACKING_ID;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/annotations/src/main/java/org/atmosphere/annotation/Asynchronous.java
############## CONFLICT ##############
Conflict type: DefaultValueAnnotation
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ int period() default 5 * 60 * 1000; ##FSTMerge## ##FSTMerge## int period() default 5 * 60 * 1000;
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/annotations/src/main/java/org/atmosphere/annotation/Asynchronous.java
############## CONFLICT ##############
Conflict type: DefaultValueAnnotation
Merge Commit SHA-1: f77f0ef1faaeb246a41d43f0e56756db45da9b8f
Parent1 SHA-1: 6d60536d5cbcf1815172cc543d45d375b9ed7442
Parent2 SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Class<? extends AtmosphereResourceEventListener>[] eventListeners() default {}; ##FSTMerge## ##FSTMerge## public Class<? extends AtmosphereResourceEventListener>[] eventListeners() default {};
File path: /tmp/downloads/atmosphere/revisions/rev_6d605_e7bf4/rev_6d605-e7bf4/modules/annotations/src/main/java/org/atmosphere/annotation/Asynchronous.java

==================================================================================================================
Revision: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f.revisions
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Path("/")
@Produces("text/html;charset=ISO-8859-1")
public ##FSTMerge## @Path("/chat")
@Produces("text/html;charset=ISO-8859-1")
public ##FSTMerge## @Path("/")
@Produces("text/html;charset=ISO-8859-1")
public
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/chat-guice/src/main/java/org/atmosphere/commons/jersey/ResourceChat.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    protected void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
        JerseyBroadcasterUtil.broadcast(r, e, this);
    } ##FSTMerge## @Override
    protected void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
        JerseyBroadcasterUtil.broadcast(r, e);
    } ##FSTMerge## @Override
    protected void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
        JerseyBroadcasterUtil.broadcast(r, e, this);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseySimpleBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public final static void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e, final Broadcaster broadcaster) {
        HttpServletRequest request = (HttpServletRequest) r.getRequest();

        try {
            ContainerResponse cr = (ContainerResponse) request.getAttribute(FrameworkConfig.CONTAINER_RESPONSE);
            boolean isCancelled = r.getAtmosphereResourceEvent().isCancelled();

            if (cr == null || isCancelled) {
                logger.error("Retrieving HttpServletRequest {} with ContainerResponse {}", request, cr);
                if (!isCancelled) {
                    logger.error("Unexpected state. ContainerResponse cannot be null or already committed. The connection hasn't been suspended yet");
                } else {
                    logger.error("ContainerResponse already resumed or cancelled. Ignoring");
                }

                if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
                    DefaultBroadcaster.class.cast(broadcaster).cacheLostMessage(r);
                }
                AsynchronousProcessor.destroyResource(r);
                return;
            }

            // This is required when you change the response's type
            String m = cr.getHttpHeaders().getFirst(HttpHeaders.CONTENT_TYPE).toString();
            if (e.getMessage() instanceof Response) {
                cr.setResponse((Response) e.getMessage());
                cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                cr.write();
                if (!cr.isCommitted()) {
                    cr.getOutputStream().flush();
                }
            } else if (e.getMessage() instanceof List) {
                for (Object msg : (List<Object>) e.getMessage()) {
                    cr.setResponse(Response.ok(msg).build());
                    cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                    cr.write();
                    if (!cr.isCommitted()) {
                        cr.getOutputStream().flush();
                    }
                }
            } else {
                if (e.getMessage() == null) {
                    logger.warn("Broadcasted message is null");
                }

                cr.setResponse(Response.ok(e.getMessage()).build());
                cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                cr.write();
                if (!cr.isCommitted()) {
                    cr.getOutputStream().flush();
                }
            }
        } catch (Throwable t) {
            if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
                DefaultBroadcaster.class.cast(broadcaster).onException(t, r);
            } else {
                onException(t,r);
            }
        } finally {
            Boolean resumeOnBroadcast = (Boolean) request.getAttribute(ApplicationConfig.RESUME_ON_BROADCAST);
            if (resumeOnBroadcast != null && resumeOnBroadcast) {

                String uuid = (String) request.getAttribute(AtmosphereFilter.RESUME_UUID);
                if (uuid != null) {
                    if (request.getAttribute(AtmosphereFilter.RESUME_CANDIDATES) != null) {
                        ((ConcurrentHashMap<String, AtmosphereResource<?, ?>>) request.getAttribute(AtmosphereFilter.RESUME_CANDIDATES)).remove(uuid);
                    }
                }
                r.resume();
            }
        }
    } ##FSTMerge## ##FSTMerge## public final static void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e, final Broadcaster broadcaster) {
        HttpServletRequest request = (HttpServletRequest) r.getRequest();
        ContainerResponse cr = null;
        try {
            cr = (ContainerResponse) request.getAttribute(FrameworkConfig.CONTAINER_RESPONSE);
            boolean isCancelled = r.getAtmosphereResourceEvent().isCancelled();

            if (cr == null || isCancelled) {
                logger.error("Retrieving HttpServletRequest {} with ContainerResponse {}", request, cr);
                if (!isCancelled) {
                    logger.error("Unexpected state. ContainerResponse cannot be null or already committed. The connection hasn't been suspended yet");
                } else {
                    logger.error("ContainerResponse already resumed or cancelled. Ignoring");
                }

                if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
                    DefaultBroadcaster.class.cast(broadcaster).cacheLostMessage(r);
                }
                AsynchronousProcessor.destroyResource(r);
                return;
            }

            // This is required when you change the response's type
            String m = cr.getHttpHeaders().getFirst(HttpHeaders.CONTENT_TYPE).toString();
            if (e.getMessage() instanceof Response) {
                cr.setResponse((Response) e.getMessage());
                cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                cr.write();
                if (!cr.isCommitted()) {
                    cr.getOutputStream().flush();
                }
            } else if (e.getMessage() instanceof List) {
                for (Object msg : (List<Object>) e.getMessage()) {
                    cr.setResponse(Response.ok(msg).build());
                    cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                    cr.write();
                    if (!cr.isCommitted()) {
                        cr.getOutputStream().flush();
                    }
                }
            } else {
                if (e.getMessage() == null) {
                    logger.warn("Broadcasted message is null");
                }

                cr.setResponse(Response.ok(e.getMessage()).build());
                cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                cr.write();
                if (!cr.isCommitted()) {
                    cr.getOutputStream().flush();
                }
            }
        } catch (Throwable t) {
            if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
                DefaultBroadcaster.class.cast(broadcaster).onException(t, r);
            } else {
                onException(t,r);
            }
        } finally {
            if (cr != null) {
                cr.setEntity(null);
            }
            e.setMessage(null);
            Boolean resumeOnBroadcast = (Boolean) request.getAttribute(ApplicationConfig.RESUME_ON_BROADCAST);
            if (resumeOnBroadcast != null && resumeOnBroadcast) {

                String uuid = (String) request.getAttribute(AtmosphereFilter.RESUME_UUID);
                if (uuid != null) {
                    if (request.getAttribute(AtmosphereFilter.RESUME_CANDIDATES) != null) {
                        ((ConcurrentHashMap<String, AtmosphereResource<?, ?>>) request.getAttribute(AtmosphereFilter.RESUME_CANDIDATES)).remove(uuid);
                    }
                }
                r.resume();
            }

        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseyBroadcasterUtil.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ final static void onException(Throwable t, AtmosphereResource<?, ?> r) {
        logger.trace("onException()", t);
        r.notifyListeners(new AtmosphereResourceEventImpl((AtmosphereResourceImpl) r, true, false));
        AsynchronousProcessor.destroyResource(r);
    } ##FSTMerge## final static void onException(Throwable t, AtmosphereResource<?, ?> r) {
        try {
            logger.debug("onException()", t);

            if (t instanceof IOException && r instanceof AtmosphereEventLifecycle) {
                ((AtmosphereEventLifecycle) r).notifyListeners(new AtmosphereResourceEventImpl((AtmosphereResourceImpl) r, true, false));
                ((AtmosphereEventLifecycle) r).removeEventListeners();
            }
        } finally {
            try {
                r.getBroadcaster().removeAtmosphereResource(r);
            } catch (IllegalStateException ex) {
                logger.trace(ex.getMessage(), ex);
            }
            BroadcasterFactory.getDefault().removeAllAtmosphereResource(r);
        }
    } ##FSTMerge## final static void onException(Throwable t, AtmosphereResource<?, ?> r) {
        logger.trace("onException()", t);
        r.notifyListeners(new AtmosphereResourceEventImpl((AtmosphereResourceImpl) r, true, false));
        AsynchronousProcessor.destroyResource(r);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseyBroadcasterUtil.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void track(TrackableResource<? extends Trackable> trackableResource) {
        logger.trace("Tracking {}", trackableResource.trackingID());
        factoryCache.put(trackableResource.trackingID(), trackableResource);
        CountDownLatch latch = pendingLock.remove(trackableResource.trackingID());
        if (latch != null) {
            latch.countDown();
        }
    } ##FSTMerge## public void track(TrackableResource<? extends Trackable> trackableResource) {
        logger.debug("Tracking {}", trackableResource.trackingID());
        factoryCache.put(trackableResource.trackingID(), trackableResource);
        CountDownLatch latch = pendingLock.remove(trackableResource.trackingID());
        if (latch != null) {
            latch.countDown();
        }
    } ##FSTMerge## public void track(TrackableResource<? extends Trackable> trackableResource) {
        logger.trace("Tracking {}", trackableResource.trackingID());
        factoryCache.put(trackableResource.trackingID(), trackableResource);
        CountDownLatch latch = pendingLock.remove(trackableResource.trackingID());
        if (latch != null) {
            latch.countDown();
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/jersey/src/main/java/org/atmosphere/jersey/TrackableSession.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    protected void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
        JerseyBroadcasterUtil.broadcast(r, e, this);
    } ##FSTMerge## @Override
    protected void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
        JerseyBroadcasterUtil.broadcast(r, e);
    } ##FSTMerge## @Override
    protected void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
        JerseyBroadcasterUtil.broadcast(r, e, this);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/jersey/src/main/java/org/atmosphere/jersey/JerseyBroadcaster.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private static final Logger logger = LoggerFactory.getLogger(AtmosphereProviders.class); ##FSTMerge## ##FSTMerge## private static final Logger logger = LoggerFactory.getLogger(AtmosphereProviders.class);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereProviders.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
            public Object fromString(String topic) {
                Broadcaster broadcaster;
                try {
                    AtmosphereResource<HttpServletRequest, HttpServletResponse> r =
                            (AtmosphereResource<HttpServletRequest, HttpServletResponse>)
                                    req.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
                    BroadcasterFactory bp = (BroadcasterFactory)
                            req.getAttribute(ApplicationConfig.BROADCASTER_FACTORY);

                    Class<? extends Broadcaster> c;
                    try {
                        c = (Class<Broadcaster>) Class.forName((String) req.getAttribute(ApplicationConfig.BROADCASTER_CLASS));
                    } catch (Throwable e) {
                        throw new IllegalStateException(e.getMessage());
                    }
                    broadcaster = bp.lookup(c, topic, true);
                } catch (Throwable ex) {
                    throw new WebApplicationException(ex);
                }
                logger.trace("Injected Broadcaster {}", broadcaster);
                req.setAttribute(AtmosphereFilter.INJECTED_BROADCASTER, broadcaster);
                return broadcaster;
            } ##FSTMerge## @Override
            public Object fromString(String topic) {
                Broadcaster broadcaster;
                try {
                    AtmosphereResource<HttpServletRequest, HttpServletResponse> r =
                            (AtmosphereResource<HttpServletRequest, HttpServletResponse>)
                                    req.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
                    BroadcasterFactory bp = (BroadcasterFactory)
                            req.getAttribute(ApplicationConfig.BROADCASTER_FACTORY);

                    broadcaster = bp.lookup(r.getBroadcaster().getClass(), topic, true);
                } catch (Throwable ex) {
                    throw new WebApplicationException(ex);
                }
                req.setAttribute(AtmosphereFilter.INJECTED_BROADCASTER, broadcaster);
                return broadcaster;
            } ##FSTMerge## @Override
            public Object fromString(String topic) {
                Broadcaster broadcaster;
                try {
                    AtmosphereResource<HttpServletRequest, HttpServletResponse> r =
                            (AtmosphereResource<HttpServletRequest, HttpServletResponse>)
                                    req.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
                    BroadcasterFactory bp = (BroadcasterFactory)
                            req.getAttribute(ApplicationConfig.BROADCASTER_FACTORY);

                    Class<? extends Broadcaster> c;
                    try {
                        c = (Class<Broadcaster>) Class.forName((String) req.getAttribute(ApplicationConfig.BROADCASTER_CLASS));
                    } catch (Throwable e) {
                        throw new IllegalStateException(e.getMessage());
                    }
                    broadcaster = bp.lookup(c, topic, true);
                } catch (Throwable ex) {
                    throw new WebApplicationException(ex);
                }
                logger.trace("Injected Broadcaster {}", broadcaster);
                req.setAttribute(AtmosphereFilter.INJECTED_BROADCASTER, broadcaster);
                return broadcaster;
            }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereProviders.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
            public Object fromString(String topic) {
                TrackableResource<AtmosphereResourceImpl> trackableResource = null;
                try {
                    String trackingId = req.getHeader(X_ATMOSPHERE_TRACKING_ID);
                    if (trackingId == null) {
                        trackingId = (String) req.getAttribute(X_ATMOSPHERE_TRACKING_ID);
                    }

                    if (trackingId != null) {
                        trackableResource = (TrackableResource<AtmosphereResourceImpl>) TrackableSession.getDefault().lookup(trackingId);

                        if (req.getAttribute(ApplicationConfig.SUPPORT_TRACKABLE) != null) {
                            AtmosphereResource<?, ?> r = (AtmosphereResource<?, ?>) req.getAttribute(ATMOSPHERE_RESOURCE);
                            if (trackableResource == null) {
                                trackableResource = new TrackableResource<AtmosphereResourceImpl>(AtmosphereResourceImpl.class, trackingId, "");
                                trackableResource.setResource(r);
                            }
                            logger.trace("Tracking resource of AtmosphereResource {} with {}", r.hashCode(), trackingId);
                        }
                        req.setAttribute(AtmosphereFilter.INJECTED_TRACKABLE, trackableResource);
                    }
                } catch (Throwable ex) {
                    throw new WebApplicationException(ex);
                }
                return trackableResource;
            } ##FSTMerge## @Override
            public Object fromString(String topic) {
                TrackableResource<AtmosphereResourceImpl> trackableResource = null;
                try {
                    String trackingId = req.getHeader(X_ATMOSPHERE_TRACKING_ID);
                    if (trackingId == null) {
                        trackingId = (String) req.getAttribute(X_ATMOSPHERE_TRACKING_ID);
                    }

                    if (trackingId != null) {
                        trackableResource = (TrackableResource<AtmosphereResourceImpl>)TrackableSession.getDefault().lookup(trackingId);

                        if (req.getAttribute(ApplicationConfig.SUPPORT_TRACKABLE) != null) {
                            AtmosphereResource<?,?> r = (AtmosphereResource<?,?> ) req.getAttribute(ATMOSPHERE_RESOURCE);
                            if (trackableResource == null &&  r != null && r.getAtmosphereResourceEvent().isSuspended()) {
                                trackableResource = new TrackableResource<AtmosphereResourceImpl>(AtmosphereResourceImpl.class, trackingId, "");
                                trackableResource.setResource(r);
                            }
                        }
                        req.setAttribute(AtmosphereFilter.INJECTED_TRACKABLE, trackableResource);
                    }
                } catch (Throwable ex) {
                    throw new WebApplicationException(ex);
                }
                return trackableResource;
            } ##FSTMerge## @Override
            public Object fromString(String topic) {
                TrackableResource<AtmosphereResourceImpl> trackableResource = null;
                try {
                    String trackingId = req.getHeader(X_ATMOSPHERE_TRACKING_ID);
                    if (trackingId == null) {
                        trackingId = (String) req.getAttribute(X_ATMOSPHERE_TRACKING_ID);
                    }

                    if (trackingId != null) {
                        trackableResource = (TrackableResource<AtmosphereResourceImpl>) TrackableSession.getDefault().lookup(trackingId);

                        if (req.getAttribute(ApplicationConfig.SUPPORT_TRACKABLE) != null) {
                            AtmosphereResource<?, ?> r = (AtmosphereResource<?, ?>) req.getAttribute(ATMOSPHERE_RESOURCE);
                            if (trackableResource == null) {
                                trackableResource = new TrackableResource<AtmosphereResourceImpl>(AtmosphereResourceImpl.class, trackingId, "");
                                trackableResource.setResource(r);
                            }
                            logger.trace("Tracking resource of AtmosphereResource {} with {}", r.hashCode(), trackingId);
                        }
                        req.setAttribute(AtmosphereFilter.INJECTED_TRACKABLE, trackableResource);
                    }
                } catch (Throwable ex) {
                    throw new WebApplicationException(ex);
                }
                return trackableResource;
            }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereProviders.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ boolean resumeOnBroadcast(ContainerRequest request, boolean resumeOnBroadcast) {
            String transport = request.getHeaderValue(X_ATMOSPHERE_TRANSPORT);
            if (transport != null && (transport.equals(JSONP_TRANSPORT) || transport.equals(LONG_POLLING_TRANSPORT))) {
                return true;
            }
            return resumeOnBroadcast;
        } ##FSTMerge## boolean resumeOnBroadcast(ContainerRequest request, boolean resumeOnBroadcast) {
            String transport = request.getHeaderValue(X_ATMOSPHERE_TRANSPORT);
            if (transport != null && transport.equals(LONG_POLLING_TRANSPORT)) {
                return true;
            }
            return resumeOnBroadcast;
        } ##FSTMerge##
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ boolean outputJunk(ContainerRequest request, boolean outputJunk) {
            boolean webSocketEnabled = false;
            if (servletReq.getHeaders("Connection") != null && servletReq.getHeaders("Connection").hasMoreElements()) {
                String[] e = ((Enumeration<String>) servletReq.getHeaders("Connection")).nextElement().split(",");
                for (String upgrade : e) {
                    if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) {
                        webSocketEnabled = true;
                        break;
                    }
                }
            }

            String transport = request.getHeaderValue(X_ATMOSPHERE_TRANSPORT);
            if (webSocketEnabled) {
                return false;
            } else if (transport != null && (transport.equals(JSONP_TRANSPORT) || transport.equals(LONG_POLLING_TRANSPORT))) {
                return false;
            }

            return outputJunk;
        } ##FSTMerge## boolean outputJunk(ContainerRequest request, boolean outputJunk) {
            boolean webSocketEnabled = false;
            if (servletReq.getHeaders("Connection") != null && servletReq.getHeaders("Connection").hasMoreElements()) {
                String[] e = ((Enumeration<String>) servletReq.getHeaders("Connection")).nextElement().split(",");
                for (String upgrade : e) {
                    if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) {
                        webSocketEnabled = true;
                        break;
                    }
                }
            }

            String transport = request.getHeaderValue(X_ATMOSPHERE_TRANSPORT);
            if (webSocketEnabled) {
                return false;
            } else if (transport != null && transport.equals(LONG_POLLING_TRANSPORT)) {
                return false;
            }

            return outputJunk;
        } ##FSTMerge##
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void suspend(boolean sessionSupported,
                     boolean resumeOnBroadcast,
                     boolean comments,
                     long timeout,
                     ContainerRequest request,
                     ContainerResponse response,
                     Broadcaster bc,
                     AtmosphereResource<HttpServletRequest, HttpServletResponse> r,
                     Suspend.SCOPE localScope) {

            // Force the status code to 200 events independently of the value of the entity (null or not)
            if (response.getStatus() == 204) {
                response.setStatus(200);
            }

            BroadcasterFactory broadcasterFactory = (BroadcasterFactory) servletReq
                    .getAttribute(ApplicationConfig.BROADCASTER_FACTORY);

            URI location = null;
            // Do not add location header if already there.
            if (!sessionSupported && !resumeOnBroadcast && response.getHttpHeaders().getFirst("Location") == null) {
                String uuid = UUID.randomUUID().toString();

                location = uriInfo.getAbsolutePathBuilder().path(uuid).build("");

                resumeCandidates.put(uuid, r);
                servletReq.setAttribute(RESUME_UUID, uuid);
                servletReq.setAttribute(RESUME_CANDIDATES, resumeCandidates);
            }

            if (bc == null && localScope != Suspend.SCOPE.REQUEST) {
                bc = r.getBroadcaster();
            }

            if (sessionSupported && localScope != Suspend.SCOPE.REQUEST && servletReq.getSession().getAttribute(SUSPENDED_RESOURCE) != null) {
                AtmosphereResource<HttpServletRequest, HttpServletResponse> cached =
                        (AtmosphereResource) servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
                bc = cached.getBroadcaster();
                // Just in case something went wrong.
                try {
                    bc.removeAtmosphereResource(cached);
                } catch (IllegalStateException ex) {
                    logger.trace(ex.getMessage(), ex);
                }
            }

            if (response.getEntity() instanceof Broadcastable) {
                Broadcastable b = (Broadcastable) response.getEntity();
                bc = b.getBroadcaster();
                response.setEntity(b.getResponseMessage());
            }

            if ((localScope == Suspend.SCOPE.REQUEST) && bc == null) {
                if (bc == null) {
                    try {
                        String id = servletReq.getHeader(X_ATMOSPHERE_TRACKING_ID);
                        if (id == null){
                            id = UUID.randomUUID().toString();
                        }

                        bc = broadcasterFactory.get(id);
                        bc.setScope(Broadcaster.SCOPE.REQUEST);
                    } catch (Exception ex) {
                        logger.error("failed to instantiate broadcaster with factory: " + broadcasterFactory, ex);
                    }
                } else {
                    bc.setScope(Broadcaster.SCOPE.REQUEST);
                }
            }
            configureFilter(bc);
            r.setBroadcaster(bc);

            if (sessionSupported) {
                servletReq.getSession().setAttribute(SUSPENDED_RESOURCE, r);
                servletReq.getSession().setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);
            }

            servletReq.setAttribute(SUSPENDED_RESOURCE, r);
            servletReq.setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);

            logger.debug("Linked HttpServletRequest {} with ContainerResponse {}", servletReq, response);

            if (resumeOnBroadcast) {
                servletReq.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, new Boolean(true));
            }

            // Set the content-type based on the returned entity.
            try {
                MediaType contentType = response.getMediaType();
                if (contentType == null && response.getEntity() != null) {
                    LinkedList<MediaType> l = new LinkedList<MediaType>();
                    // Will retrun the first
                    l.add(request.getAcceptableMediaType(new LinkedList<MediaType>()));
                    contentType = response.getMessageBodyWorkers().getMessageBodyWriterMediaType(
                            response.getEntity().getClass(),
                            response.getEntityType(),
                            response.getAnnotations(),
                            l);

                    if (contentType == null ||
                            contentType.isWildcardType() || contentType.isWildcardSubtype())
                        contentType = MediaType.APPLICATION_OCTET_STREAM_TYPE;
                }

                Object entity = response.getEntity();

                Response.ResponseBuilder b = Response.ok();
                b = configureHeaders(b);
                if (entity != null) {
                    b = b.header("Content-Type", contentType != null ?
                            contentType.toString() : "text/html; charset=ISO-8859-1");
                    servletReq.setAttribute(FrameworkConfig.EXPECTED_CONTENT_TYPE, contentType.toString());
                }

                boolean eclipse362468 = false;
                String serverInfo = r.getAtmosphereConfig().getServletContext().getServerInfo();
                if (serverInfo.indexOf("jetty") != -1) {
                    String[] jettyVersion = serverInfo.substring(6).split("\\.");
                    // https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468
                    eclipse362468 = ((Integer.valueOf(jettyVersion[0]) == 8 && Integer.valueOf(jettyVersion[1]) == 0 && Integer.valueOf(jettyVersion[2]) > 1))
                            || ((Integer.valueOf(jettyVersion[0]) == 7 && Integer.valueOf(jettyVersion[1]) == 5 && Integer.valueOf(jettyVersion[2]) == 4));

                    if (comments && eclipse362468) {
                        logger.debug("Padding response is disabled to workaround https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468");
                    }
                }

                if (!eclipse362468 && comments && !resumeOnBroadcast) {
                    String padding = (String) servletReq.getAttribute(ApplicationConfig.STREAMING_PADDING_MODE);
                    String paddingData = AtmosphereResourceImpl.createStreamingPadding(padding);

                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                        location = null;
                    }
                    response.setResponse(b.entity(paddingData).build());
                    response.write();
                }

                if (entity != null) {
                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                    }
                    response.setResponse(b.entity(entity).build());
                    response.write();
                }
                response.setEntity(null);
                r.suspend(timeout, false);

            } catch (IOException ex) {
                throw new WebApplicationException(ex);
            }
        } ##FSTMerge## void suspend(boolean sessionSupported,
                     boolean resumeOnBroadcast,
                     boolean comments,
                     long timeout,
                     ContainerRequest request,
                     ContainerResponse response,
                     Broadcaster bc,
                     AtmosphereResource<HttpServletRequest, HttpServletResponse> r,
                     Suspend.SCOPE localScope) {

            // Force the status code to 200 events independently of the value of the entity (null or not)
            if (response.getStatus() == 204) {
                response.setStatus(200);
            }

            BroadcasterFactory broadcasterFactory = (BroadcasterFactory) servletReq
                    .getAttribute(ApplicationConfig.BROADCASTER_FACTORY);

            URI location = null;
            // Do not add location header if already there.
            if (!sessionSupported && !resumeOnBroadcast && response.getHttpHeaders().getFirst("Location") == null) {
                String uuid = UUID.randomUUID().toString();

                location = uriInfo.getAbsolutePathBuilder().path(uuid).build("");

                resumeCandidates.put(uuid, r);
                servletReq.setAttribute(RESUME_UUID, uuid);
                servletReq.setAttribute(RESUME_CANDIDATES, resumeCandidates);
            }

            if (bc == null && localScope != Suspend.SCOPE.REQUEST) {
                bc = r.getBroadcaster();
            }

            if (sessionSupported && localScope != Suspend.SCOPE.REQUEST && servletReq.getSession().getAttribute(SUSPENDED_RESOURCE) != null) {
                AtmosphereResource<HttpServletRequest, HttpServletResponse> cached =
                        (AtmosphereResource) servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
                bc = cached.getBroadcaster();
                // Just in case something went wrong.
                try {
                    bc.removeAtmosphereResource(cached);
                } catch (IllegalStateException ex) {
                    logger.trace(ex.getMessage(), ex);
                }
            }

            if (response.getEntity() instanceof Broadcastable) {
                Broadcastable b = (Broadcastable) response.getEntity();
                bc = b.getBroadcaster();
                response.setEntity(b.getResponseMessage());
            }

            if ((localScope == Suspend.SCOPE.REQUEST) && bc == null) {
                if (bc == null) {
                    try {
                        String id = UUID.randomUUID().toString();

                        // Re-generate a new one with proper scope.
                        Class<Broadcaster> c = null;
                        try {
                            c = (Class<Broadcaster>) Class.forName((String) servletReq.getAttribute(ApplicationConfig.BROADCASTER_CLASS));
                        } catch (Throwable e) {
                            throw new IllegalStateException(e.getMessage());
                        }
                        bc = broadcasterFactory.get(c, id);
                        bc.setScope(Broadcaster.SCOPE.REQUEST);
                    } catch (Exception ex) {
                        logger.error("failed to instantiate broadcaster with factory: " + broadcasterFactory, ex);
                    }
                } else {
                    bc.setScope(Broadcaster.SCOPE.REQUEST);
                }
            }
            configureFilter(bc);
            r.setBroadcaster(bc);

            if (sessionSupported) {
                servletReq.getSession().setAttribute(SUSPENDED_RESOURCE, r);
                servletReq.getSession().setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);
            }

            servletReq.setAttribute(SUSPENDED_RESOURCE, r);
            servletReq.setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);

            logger.debug("Linked HttpServletRequest {} with ContainerResponse {}", servletReq, response);

            if (resumeOnBroadcast) {
                servletReq.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, new Boolean(true));
            }

            // Set the content-type based on the returned entity.
            try {
                MediaType contentType = response.getMediaType();
                if (contentType == null && response.getEntity() != null) {
                    LinkedList<MediaType> l = new LinkedList<MediaType>();
                    // Will retrun the first
                    l.add(request.getAcceptableMediaType(new LinkedList<MediaType>()));
                    contentType = response.getMessageBodyWorkers().getMessageBodyWriterMediaType(
                            response.getEntity().getClass(),
                            response.getEntityType(),
                            response.getAnnotations(),
                            l);

                    if (contentType == null ||
                            contentType.isWildcardType() || contentType.isWildcardSubtype())
                        contentType = MediaType.APPLICATION_OCTET_STREAM_TYPE;
                }

                Object entity = response.getEntity();

                Response.ResponseBuilder b = Response.ok();
                b = configureHeaders(b);
                if (entity != null) {
                    b = b.header("Content-Type", contentType != null ?
                            contentType.toString() : "text/html; charset=ISO-8859-1");
                }

                if (comments && !resumeOnBroadcast) {
                    String padding = (String) servletReq.getAttribute(ApplicationConfig.STREAMING_PADDING_MODE);
                    String paddingData = AtmosphereResourceImpl.createStreamingPadding(padding);

                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                        location = null;
                    }
                    response.setResponse(b.entity(paddingData).build());
                    response.write();
                }

                if (entity != null) {
                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                    }
                    response.setResponse(b.entity(entity).build());
                    response.write();
                }
                response.setEntity(null);
                r.suspend(timeout, false);

            } catch (IOException ex) {
                throw new WebApplicationException(ex);
            }
        } ##FSTMerge##
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Test(timeOut = 60000, enabled = false)
    public void testConcurrentBroadcast() {
    } ##FSTMerge## ##FSTMerge## @Test(timeOut = 60000, enabled = false)
    public void testConcurrentBroadcast() {
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/test/java/org/atmosphere/tests/GrizzlyCometSupportTest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {
            final Meteor m = Meteor.build(req);

            m.suspend(5000, false);
            m.getBroadcaster().setScope(Broadcaster.SCOPE.REQUEST);
            req.getSession().setAttribute("meteor", m);

            broadcasterId.set(m.getBroadcaster().getID());

            res.getOutputStream().write("resume".getBytes());
            m.addListener(new AtmosphereResourceEventListener() {

                @Override
                public void onSuspend(final AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
                    event.getResource().getRequest().setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, "true");
                }

                @Override
                public void onResume(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
                }

                @Override
                public void onDisconnect(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
                }

                @Override
                public void onBroadcast(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
                }

                @Override
                public void onThrowable(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {

                }
            });

            if (servletLatch != null) {
                servletLatch.countDown();
            }
        } ##FSTMerge## @Override
        public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {
            final Meteor m = Meteor.build(req);
            m.getBroadcaster().setScope(Broadcaster.SCOPE.REQUEST);
            req.getSession().setAttribute("meteor", m);

            m.suspend(5000, false);
            broadcasterId.set(m.getBroadcaster().getID());

            res.getOutputStream().write("resume".getBytes());
            m.addListener(new AtmosphereResourceEventListener() {

                @Override
                public void onSuspend(final AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
                    event.getResource().getRequest().setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, "true");
                }

                @Override
                public void onResume(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
                }

                @Override
                public void onDisconnect(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
                }

                @Override
                public void onBroadcast(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
                }

                @Override
                public void onThrowable(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {

                }
            });

            if (servletLatch != null) {
                servletLatch.countDown();
            }
        } ##FSTMerge## @Override
        public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {
            final Meteor m = Meteor.build(req);

            m.suspend(5000, false);
            m.getBroadcaster().setScope(Broadcaster.SCOPE.REQUEST);
            req.getSession().setAttribute("meteor", m);

            broadcasterId.set(m.getBroadcaster().getID());

            res.getOutputStream().write("resume".getBytes());
            m.addListener(new AtmosphereResourceEventListener() {

                @Override
                public void onSuspend(final AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
                    event.getResource().getRequest().setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, "true");
                }

                @Override
                public void onResume(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
                }

                @Override
                public void onDisconnect(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
                }

                @Override
                public void onBroadcast(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
                }

                @Override
                public void onThrowable(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {

                }
            });

            if (servletLatch != null) {
                servletLatch.countDown();
            }
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/test/java/org/atmosphere/tests/BroadcasterScopeTest.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private static final Logger logger = LoggerFactory.getLogger(SimpleHttpProtocol.class); ##FSTMerge## private static final Logger logger = LoggerFactory.getLogger(AtmosphereServlet.class); ##FSTMerge## private static final Logger logger = LoggerFactory.getLogger(SimpleHttpProtocol.class);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public AtmosphereRequest onMessage(WebSocket webSocket, String d) {
        if (resource == null) {
            logger.error("Invalid state. No AtmosphereResource has been suspended");
            return null;
        }
        String pathInfo = resource.getRequest().getPathInfo();
        if (d.startsWith(delimiter)) {
            String[] token = d.split(delimiter);
            pathInfo = token[1];
            d = token[2];
        }

        return new AtmosphereRequest.Builder()
                .request(resource.getRequest())
                .method(methodType)
                .contentType(contentType)
                .body(d)
                .pathInfo(pathInfo)
                .headers(WebSocketProcessor.configureHeader(resource.getRequest()))
                .build();
    } ##FSTMerge## ##FSTMerge## @Override
    public AtmosphereRequest onMessage(WebSocket webSocket, String d) {
        AtmosphereResourceImpl resource = (AtmosphereResourceImpl) webSocket.resource();
        if (resource == null) {
            logger.error("Invalid state. No AtmosphereResource has been suspended");
            return null;
        }
        String pathInfo = resource.getRequest().getPathInfo();
        if (d.startsWith(delimiter)) {
            String[] token = d.split(delimiter);
            pathInfo = token[1];
            d = token[2];
        }
        Map<String,Object> m = new HashMap<String, Object>();
        m.put(FrameworkConfig.WEBSOCKET_SUBPROTOCOL, FrameworkConfig.SIMPLE_HTTP_OVER_WEBSOCKET);

        return new AtmosphereRequest.Builder()
                .request(resource.getRequest())
                .method(methodType)
                .contentType(contentType)
                .body(d)
                .attributes(m)
                .pathInfo(pathInfo)
                .headers(WebSocketProcessor.configureHeader(resource.getRequest()))
                .build();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public AtmosphereRequest onMessage(WebSocket webSocket, byte[] d, final int offset, final int length) {
        return onMessage(webSocket, new String(d, offset, length));
    } ##FSTMerge## ##FSTMerge## @Override
    public AtmosphereRequest onMessage(WebSocket webSocket, byte[] d, final int offset, final int length) {
        return onMessage(webSocket, new String(d, offset, length));
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onOpen(WebSocket webSocket) {
        // eurk!!
        this.resource = (AtmosphereResource<HttpServletRequest, HttpServletResponse>) webSocket.resource();
    } ##FSTMerge## ##FSTMerge## @Override
    public void onOpen(WebSocket webSocket) {
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onClose(WebSocket webSocket) {
    } ##FSTMerge## ##FSTMerge## @Override
    public void onClose(WebSocket webSocket) {
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onError(WebSocket webSocket, WebSocketProcessor.WebSocketException t) {
        logger.error(t.getMessage() + " Status {} Message {}", t.response().getStatus(), t.response().getStatusMessage());
    } ##FSTMerge## ##FSTMerge## @Override
    public void onError(WebSocket webSocket, WebSocketProcessor.WebSocketException t) {
        logger.warn(t.getMessage() + " Status {} Message {}", t.response().getStatus(), t.response().getStatusMessage());
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public boolean inspectResponse() {
        return false;
    } ##FSTMerge## ##FSTMerge## @Override
    public boolean inspectResponse() {
        return false;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public String handleResponse(AtmosphereResponse<?> res, String message) {
        // Should never be called
        return message;
    } ##FSTMerge## ##FSTMerge## @Override
    public String handleResponse(AtmosphereResponse<?> res, String message) {
        // Should never be called
        return message;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public byte[] handleResponse(AtmosphereResponse<?> res, byte[] message, int offset, int length) {
        // Should never be called
        return message;
    } ##FSTMerge## ##FSTMerge## @Override
    public byte[] handleResponse(AtmosphereResponse<?> res, byte[] message, int offset, int length) {
        // Should never be called
        return message;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private static final Logger logger = LoggerFactory.getLogger(EchoProtocol.class); ##FSTMerge## private static final Logger logger = LoggerFactory.getLogger(AtmosphereServlet.class); ##FSTMerge## private static final Logger logger = LoggerFactory.getLogger(EchoProtocol.class);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public AtmosphereRequest onMessage(WebSocket webSocket, String data) {
        logger.trace("broadcast String");
        resource.getBroadcaster().broadcast(data);
        return null;
    } ##FSTMerge## ##FSTMerge## @Override
    public AtmosphereRequest onMessage(WebSocket webSocket, String data) {
        logger.trace("broadcast String");
        webSocket.resource().getBroadcaster().broadcast(data);
        return null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public AtmosphereRequest onMessage(WebSocket webSocket, byte[] data, int offset, int length) {
        logger.trace("broadcast byte");
        byte[] b = new byte[length];
        System.arraycopy(data, offset, b, 0, length);
        resource.getBroadcaster().broadcast(b);
        return null;
    } ##FSTMerge## ##FSTMerge## @Override
    public AtmosphereRequest onMessage(WebSocket webSocket, byte[] data, int offset, int length) {
        logger.trace("broadcast byte");
        byte[] b = new byte[length];
        System.arraycopy(data, offset, b, 0, length);
        webSocket.resource().getBroadcaster().broadcast(b);
        return null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onOpen(WebSocket webSocket) {
        // eurk!!
        this.resource = (AtmosphereResource<HttpServletRequest, HttpServletResponse>) webSocket.resource();
    } ##FSTMerge## ##FSTMerge## @Override
    public void onOpen(WebSocket webSocket) {
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onClose(WebSocket webSocket) {
    } ##FSTMerge## ##FSTMerge## @Override
    public void onClose(WebSocket webSocket) {
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onError(WebSocket webSocket, WebSocketProcessor.WebSocketException t) {
        logger.error(t.getMessage() + " Status {} Message {}", t.response().getStatus(), t.response().getStatusMessage());
    } ##FSTMerge## ##FSTMerge## @Override
    public void onError(WebSocket webSocket, WebSocketProcessor.WebSocketException t) {
        logger.error(t.getMessage() + " Status {} Message {}", t.response().getStatus(), t.response().getStatusMessage());
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public boolean inspectResponse() {
        return false;
    } ##FSTMerge## ##FSTMerge## @Override
    public boolean inspectResponse() {
        return false;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public String handleResponse(AtmosphereResponse<?> res, String message) {
        // Should never be called
        return message;
    } ##FSTMerge## ##FSTMerge## @Override
    public String handleResponse(AtmosphereResponse<?> res, String message) {
        // Should never be called
        return message;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public byte[] handleResponse(AtmosphereResponse<?> res, byte[] message, int offset, int length) {
        // Should never be called
        return message;
    } ##FSTMerge## ##FSTMerge## @Override
    public byte[] handleResponse(AtmosphereResponse<?> res, byte[] message, int offset, int length) {
        // Should never be called
        return message;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
############## CONFLICT ##############
Conflict type: ExtendsList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ extends AsyncProtocol ##FSTMerge## ##FSTMerge## extends AsyncProtocol
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: smallMethod
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void configure(AtmosphereServlet.AtmosphereConfig config); ##FSTMerge## public void configure(AtmosphereServlet.AtmosphereConfig config); ##FSTMerge## void configure(AtmosphereServlet.AtmosphereConfig config);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: smallMethod
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ AtmosphereRequest onMessage(WebSocket webSocket, String data); ##FSTMerge## ##FSTMerge## AtmosphereRequest onMessage(WebSocket webSocket, String data);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: smallMethod
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ AtmosphereRequest onMessage(WebSocket webSocket, byte[] data, int offset, int length); ##FSTMerge## ##FSTMerge## AtmosphereRequest onMessage(WebSocket webSocket, byte[] data, int offset, int length);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: smallMethod
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void onOpen(WebSocket webSocket); ##FSTMerge## ##FSTMerge## void onOpen(WebSocket webSocket);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: smallMethod
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void onClose(WebSocket webSocket); ##FSTMerge## ##FSTMerge## void onClose(WebSocket webSocket);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: smallMethod
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void onError(WebSocket webSocket, WebSocketProcessor.WebSocketException t); ##FSTMerge## ##FSTMerge## void onError(WebSocket webSocket, WebSocketProcessor.WebSocketException t);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public final void dispatch(final HttpServletRequest request) throws IOException {
        if (!loggedMsg.getAndSet(true)) {
            logger.debug("Atmosphere detected WebSocket: {}", webSocket.getClass().getName());
        }

        String pathInfo = request.getPathInfo();
        String requestURI = request.getRequestURI();
        if (atmosphereServlet.getAtmosphereConfig().getWebServerName().toLowerCase().indexOf("glassfish") != -1) {
            try {
                pathInfo = pathInfo.substring(pathInfo.indexOf("/", 1));
                requestURI = requestURI.substring(requestURI.indexOf("/", 1));
            } catch (IndexOutOfBoundsException e) {
                // Jersey will not work.
                logger.warn("Unable to patch GlassFish WebSocket http://java.net/jira/browse/GRIZZLY-1114");
            }
        }

        AtmosphereResponse wsr = new AtmosphereResponse<WebSocket>(webSocket, webSocketProtocol, request);
        AtmosphereRequest r = new AtmosphereRequest.Builder()
                .request(request)
                .pathInfo(pathInfo)
                .requestURI(requestURI)
                .headers(configureHeader(request))
                .build();

        request.setAttribute(WebSocket.WEBSOCKET_SUSPEND, true);

        dispatch(r, wsr);

        webSocketProtocol.onOpen(webSocket);

        if (!webSocket.resource().getAtmosphereResourceEvent().isSuspended()) {
            webSocketProtocol.onError(webSocket, new WebSocketException("No AtmosphereResource has been suspended. The WebSocket will be closed.", wsr));
        }
    } ##FSTMerge## public final void dispatch(final HttpServletRequest request) throws IOException {
        if (!loggedMsg.getAndSet(true)) {
            logger.info("Atmosphere detected WebSocket: {}", webSocket.getClass().getName());
        }

        WebSocketHttpServletResponse wsr = new WebSocketHttpServletResponse<WebSocket>(webSocket);
        AtmosphereRequest r = new AtmosphereRequest.Builder()
                .request(request)
                .headers(configureHeader(request))
                .build();

        request.setAttribute(WebSocket.WEBSOCKET_SUSPEND, true);
        dispatch(r, wsr);

        resource = (AtmosphereResource) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
        handler = (AtmosphereHandler) request.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);
        if (resource == null || !resource.getAtmosphereResourceEvent().isSuspended()) {
            logger.error("No AtmosphereResource has been suspended. The WebSocket will be closed.");
            webSocket.close();
        }
    } ##FSTMerge## public final void dispatch(final HttpServletRequest request) throws IOException {
        if (!loggedMsg.getAndSet(true)) {
            logger.debug("Atmosphere detected WebSocket: {}", webSocket.getClass().getName());
        }

        String pathInfo = request.getPathInfo();
        String requestURI = request.getRequestURI();
        if (atmosphereServlet.getAtmosphereConfig().getWebServerName().toLowerCase().indexOf("glassfish") != -1) {
            try {
                pathInfo = pathInfo.substring(pathInfo.indexOf("/", 1));
                requestURI = requestURI.substring(requestURI.indexOf("/", 1));
            } catch (IndexOutOfBoundsException e) {
                // Jersey will not work.
                logger.warn("Unable to patch GlassFish WebSocket http://java.net/jira/browse/GRIZZLY-1114");
            }
        }

        AtmosphereResponse wsr = new AtmosphereResponse<WebSocket>(webSocket, webSocketProtocol, request);
        AtmosphereRequest r = new AtmosphereRequest.Builder()
                .request(request)
                .pathInfo(pathInfo)
                .requestURI(requestURI)
                .headers(configureHeader(request))
                .build();

        request.setAttribute(WebSocket.WEBSOCKET_SUSPEND, true);

        dispatch(r, wsr);

        webSocketProtocol.onOpen(webSocket);

        if (webSocket.resource() != null && !webSocket.resource().getAtmosphereResourceEvent().isSuspended()) {
            webSocketProtocol.onError(webSocket,
                    new WebSocketException("No AtmosphereResource has been suspended. The WebSocket will be closed:  " + request.getRequestURI(), wsr));
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void invokeWebSocketProtocol(String webSocketMessage) {
        AtmosphereRequest r = webSocketProtocol.onMessage(webSocket, webSocketMessage);
        if (r != null) {
            AtmosphereResponse<WebSocket> w = new AtmosphereResponse<WebSocket>(webSocket, webSocketProtocol, r);
            dispatch(r, w);
        }
    } ##FSTMerge## public void invokeWebSocketProtocol(String webSocketMessage) {
        HttpServletRequest r = webSocketProtocol.parseMessage(resource, webSocketMessage);
        dispatch(r, new WebSocketHttpServletResponse<WebSocket>(webSocket));
    } ##FSTMerge## public void invokeWebSocketProtocol(String webSocketMessage) {
        AtmosphereRequest r = webSocketProtocol.onMessage(webSocket, webSocketMessage);
        if (r != null) {
            AtmosphereResponse<WebSocket> w = new AtmosphereResponse<WebSocket>(webSocket, webSocketProtocol, r);
            try {
                dispatch(r, w);
            } finally {
                r.destroy();
                w.destroy();
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void invokeWebSocketProtocol(byte[] data, int offset, int length) {
        AtmosphereRequest r = webSocketProtocol.onMessage(webSocket, data, offset, length);
        if (r != null) {
            AtmosphereResponse<WebSocket> w = new AtmosphereResponse<WebSocket>(webSocket, webSocketProtocol, r);
            dispatch(r, w);
        }
    } ##FSTMerge## public void invokeWebSocketProtocol(byte[] data, int offset, int length) {
        HttpServletRequest r = webSocketProtocol.parseMessage(resource, data, offset, length);
        dispatch(r, new WebSocketHttpServletResponse<WebSocket>(webSocket));
    } ##FSTMerge## public void invokeWebSocketProtocol(byte[] data, int offset, int length) {
        AtmosphereRequest r = webSocketProtocol.onMessage(webSocket, data, offset, length);
        if (r != null) {
            AtmosphereResponse<WebSocket> w = new AtmosphereResponse<WebSocket>(webSocket, webSocketProtocol, r);
            try {
                dispatch(r, w);
            } finally {
                r.destroy();
                w.destroy();
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected final void dispatch(final HttpServletRequest request, final AtmosphereResponse<?> r) {
        if (request == null) return;
        try {
            atmosphereServlet.doCometSupport(request, r);
        } catch (IOException e) {
            logger.warn("Failed invoking atmosphere servlet doCometSupport()", e);
        } catch (ServletException e) {
            logger.warn("Failed invoking atmosphere servlet doCometSupport()", e);
        }

        AtmosphereResource resource = (AtmosphereResource) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);

        if (webSocket.resource() == null && WebSocketAdapter.class.isAssignableFrom(webSocket.getClass())) {
            WebSocketAdapter.class.cast(webSocket).setAtmosphereResource(resource);
        }

        if (r.getStatus() >= 400) {
            webSocketProtocol.onError(webSocket, new WebSocketException("Status code higher than 400", r));
        }
    } ##FSTMerge## ##FSTMerge## protected final void dispatch(final HttpServletRequest request, final AtmosphereResponse<?> r) {
        if (request == null) return;
        try {
            atmosphereServlet.doCometSupport(request, r);
        } catch (IOException e) {
            logger.warn("Failed invoking atmosphere servlet doCometSupport()", e);
        } catch (ServletException e) {
            logger.warn("Failed invoking atmosphere servlet doCometSupport()", e);
        }

        AtmosphereResource resource = (AtmosphereResource) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);

        if (webSocket.resource() == null && WebSocketAdapter.class.isAssignableFrom(webSocket.getClass())) {
            WebSocketAdapter.class.cast(webSocket).setAtmosphereResource(resource);
        }

        if (r.getStatus() >= 400) {
            webSocketProtocol.onError(webSocket, new WebSocketException("Status code higher than 400", r));
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void close() {
        AtmosphereResource<HttpServletRequest, HttpServletResponse> resource =
                (AtmosphereResource<HttpServletRequest, HttpServletResponse>) webSocket.resource();
        try {
            webSocketProtocol.onClose(webSocket);

            if (resource != null) {
                AtmosphereHandler handler = (AtmosphereHandler) resource.getRequest().getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);
                synchronized (resource) {
                    if (handler != null) {
                        handler.onStateChange(new AtmosphereResourceEventImpl((AtmosphereResourceImpl) resource, false, true));
                    }

                    Meteor m = (Meteor) resource.getRequest().getAttribute(AtmosphereResourceImpl.METEOR);
                    if (m != null) {
                        m.destroy();
                    }
                }

                try {
                    resource.notifyListeners();
                } finally {
                    AsynchronousProcessor.destroyResource(resource);
                }
            }
        } catch (IOException e) {
            if (resource != null && AtmosphereResourceImpl.class.isAssignableFrom(resource.getClass())) {
                AtmosphereResourceImpl.class.cast(resource).onThrowable(e);
            }
            logger.warn("Failed invoking atmosphere handler onStateChange()", e);
        }
    } ##FSTMerge## public void close() {
        try {
            if (handler != null && resource != null) {
                handler.onStateChange(new AtmosphereResourceEventImpl((AtmosphereResourceImpl) resource, false, true));
            }
        } catch (IOException e) {
            if (AtmosphereResourceImpl.class.isAssignableFrom(resource.getClass())) {
                AtmosphereResourceImpl.class.cast(resource).onThrowable(e);
            }
            logger.info("Failed invoking atmosphere handler onStateChange()", e);
        }

        if (resource != null) {
            resource.getBroadcaster().removeAtmosphereResource(resource);
        }
    } ##FSTMerge## public void close() {
        AtmosphereResourceImpl resource =
                (AtmosphereResourceImpl) webSocket.resource();
        try {
            webSocketProtocol.onClose(webSocket);

            if (resource != null && resource.isInScope()) {
                AtmosphereHandler handler = (AtmosphereHandler) resource.getRequest(false).getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);
                AtmosphereResourceEventImpl e = new AtmosphereResourceEventImpl(resource, true, false);
                synchronized (resource) {
                    if (handler != null) {
                        handler.onStateChange(e);
                    }

                    Meteor m = (Meteor) resource.getRequest().getAttribute(AtmosphereResourceImpl.METEOR);
                    if (m != null) {
                        m.destroy();
                    }
                }

                try {
                    resource.notifyListeners(e);
                    resource.cancel();
                } finally {
                    AsynchronousProcessor.destroyResource(resource);
                }
            }
        } catch (IOException e) {
            if (resource != null && AtmosphereResourceImpl.class.isAssignableFrom(resource.getClass())) {
                AtmosphereResourceImpl.class.cast(resource).onThrowable(e);
            }
            logger.warn("Failed invoking atmosphere handler onStateChange()", e);
        } finally {
            if (resource.getRequest() != null && AtmosphereRequest.class.isAssignableFrom(resource.getRequest().getClass())) {
                AtmosphereRequest.class.cast(resource.getRequest()).destroy();
            }

            if (resource.getResponse() != null && AtmosphereResponse.class.isAssignableFrom(resource.getResponse().getClass())) {
                AtmosphereResponse.class.cast(resource.getResponse()).destroy();
            }

            if (webSocket != null) {
                WebSocketAdapter.class.cast(webSocket).setAtmosphereResource(null);
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public String toString() {
        return "WebSocketProcessor{ webSocket=" + webSocket + " }";
    } ##FSTMerge## @Override
    public String toString() {
        return "WebSocketProcessor{ handler=" + handler + ", resource=" + resource + ", webSocket=" +
                webSocket + " }";
    } ##FSTMerge## @Override
    public String toString() {
        return "WebSocketProcessor{ webSocket=" + webSocket + " }";
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void notifyListener(WebSocketEventListener.WebSocketEvent event) {
        AtmosphereResource<HttpServletRequest, HttpServletResponse> resource =
                (AtmosphereResource<HttpServletRequest, HttpServletResponse>) webSocket.resource();
        if (resource == null) return;

        AtmosphereResourceImpl r = AtmosphereResourceImpl.class.cast(resource);

        for (AtmosphereResourceEventListener l : r.atmosphereResourceEventListener()) {
            if (WebSocketEventListener.class.isAssignableFrom(l.getClass())) {
                try {
                    switch (event.type()) {
                        case CONNECT:
                            WebSocketEventListener.class.cast(l).onConnect(event);
                            break;
                        case DISCONNECT:
                            WebSocketEventListener.class.cast(l).onDisconnect(event);
                            break;
                        case CONTROL:
                            WebSocketEventListener.class.cast(l).onControl(event);
                            break;
                        case MESSAGE:
                            WebSocketEventListener.class.cast(l).onMessage(event);
                            break;
                        case HANDSHAKE:
                            WebSocketEventListener.class.cast(l).onHandshake(event);
                            break;
                        case CLOSE:
                            WebSocketEventListener.class.cast(l).onClose(event);
                            break;
                    }
                } catch (Throwable t) {
                    logger.debug("Listener error {}", t);
                    try {
                        WebSocketEventListener.class.cast(l).onThrowable(new AtmosphereResourceEventImpl(r, false, false, t));
                    } catch (Throwable t2) {
                        logger.warn("Listener error {}", t2);
                    }
                }
            }
        }
    } ##FSTMerge## public void notifyListener(WebSocketEventListener.WebSocketEvent event) {

        if (resource == null) return;

        AtmosphereResourceImpl r = AtmosphereResourceImpl.class.cast(resource);

        for (AtmosphereResourceEventListener l : r.atmosphereResourceEventListener()) {
            if (WebSocketEventListener.class.isAssignableFrom(l.getClass())) {
                switch (event.type()) {
                    case CONNECT:
                        WebSocketEventListener.class.cast(l).onConnect(event);
                        break;
                    case DISCONNECT:
                        WebSocketEventListener.class.cast(l).onDisconnect(event);
                        break;
                    case CONTROL:
                        WebSocketEventListener.class.cast(l).onControl(event);
                        break;
                    case MESSAGE:
                        WebSocketEventListener.class.cast(l).onMessage(event);
                        break;
                    case HANDSHAKE:
                        WebSocketEventListener.class.cast(l).onHandshake(event);
                        break;
                    case CLOSE:
                        WebSocketEventListener.class.cast(l).onClose(event);
                        break;
                }
            }
        }
    } ##FSTMerge## public void notifyListener(WebSocketEventListener.WebSocketEvent event) {
        AtmosphereResource<HttpServletRequest, HttpServletResponse> resource =
                (AtmosphereResource<HttpServletRequest, HttpServletResponse>) webSocket.resource();
        if (resource == null) return;

        AtmosphereResourceImpl r = AtmosphereResourceImpl.class.cast(resource);

        for (AtmosphereResourceEventListener l : r.atmosphereResourceEventListener()) {
            if (WebSocketEventListener.class.isAssignableFrom(l.getClass())) {
                try {
                    switch (event.type()) {
                        case CONNECT:
                            WebSocketEventListener.class.cast(l).onConnect(event);
                            break;
                        case DISCONNECT:
                            WebSocketEventListener.class.cast(l).onDisconnect(event);
                            break;
                        case CONTROL:
                            WebSocketEventListener.class.cast(l).onControl(event);
                            break;
                        case MESSAGE:
                            WebSocketEventListener.class.cast(l).onMessage(event);
                            break;
                        case HANDSHAKE:
                            WebSocketEventListener.class.cast(l).onHandshake(event);
                            break;
                        case CLOSE:
                            WebSocketEventListener.class.cast(l).onClose(event);
                            break;
                    }
                } catch (Throwable t) {
                    logger.debug("Listener error {}", t);
                    try {
                        WebSocketEventListener.class.cast(l).onThrowable(new AtmosphereResourceEventImpl(r, false, false, t));
                    } catch (Throwable t2) {
                        logger.warn("Listener error {}", t2);
                    }
                }
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public final static ##FSTMerge## ##FSTMerge## public final static
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
############## CONFLICT ##############
Conflict type: ExtendsList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ extends Exception ##FSTMerge## ##FSTMerge## extends Exception
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final AtmosphereResponse r; ##FSTMerge## ##FSTMerge## private final AtmosphereResponse r;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public WebSocketException(String s, AtmosphereResponse r) {
            super(s);
            this.r = r;
        } ##FSTMerge## ##FSTMerge## public WebSocketException(String s, AtmosphereResponse r) {
            super(s);
            this.r = r;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public WebSocketException(Throwable throwable, AtmosphereResponse r) {
            super(throwable);
            this.r = r;
        } ##FSTMerge## ##FSTMerge## public WebSocketException(Throwable throwable, AtmosphereResponse r) {
            super(throwable);
            this.r = r;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public AtmosphereResponse response() {
            return r;
        } ##FSTMerge## ##FSTMerge## public AtmosphereResponse response() {
            return r;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
############## CONFLICT ##############
Conflict type: ExtendsList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ extends AsyncIOWriter ##FSTMerge## ##FSTMerge## extends AsyncIOWriter
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: smallMethod
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ AtmosphereResource<?, ?> resource(); ##FSTMerge## ##FSTMerge## AtmosphereResource<?, ?> resource();
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    protected void queueWriteIO(AtmosphereResource<?, ?> r, Object finalMsg, Entry entry) throws InterruptedException {
        synchronized (r) {
            executeAsyncWrite(new AsyncWriteToken(r, entry.message, entry.future, entry.originalMessage));
        }
    } ##FSTMerge## @Override
    protected void queueWriteIO(AtmosphereResource<?, ?> r, Object finalMsg, Entry entry) throws InterruptedException {
        synchronized (r) {
            executeAsyncWrite(r, finalMsg, entry.future);
        }
    } ##FSTMerge## @Override
    protected void queueWriteIO(AtmosphereResource<?, ?> r, Object finalMsg, Entry entry) throws InterruptedException {
        synchronized (r) {
            executeAsyncWrite(new AsyncWriteToken(r, finalMsg, entry.future, entry.originalMessage));
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    protected Runnable getBroadcastHandler() {
        return new Runnable() {
            public void run() {
                try {
                    incomingBroadcast();
                } catch (Throwable t) {
                    logger.debug("incomingBroadcast Exception. Broadcaster will be broken unless reconfigured", t);
                    destroy();
                    return;
                }
            }
        };
    } ##FSTMerge## @Override
    protected Runnable getBroadcastHandler() {
        return new Runnable() {
            public void run() {
                try {
                    incomingBroadcast();
                } catch (Throwable t) {
                    logger.trace("incomingBroadcast Exception. Broadcaster will be broken unless reconfigured", t);
                    return;
                }
            }
        };
    } ##FSTMerge## @Override
    protected Runnable getBroadcastHandler() {
        return new Runnable() {
            public void run() {
                try {
                    incomingBroadcast();
                } catch (Throwable t) {
                    logger.debug("incomingBroadcast Exception. Broadcaster will be broken unless reconfigured", t);
                    destroy();
                    return;
                }
            }
        };
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void reconfigure() {
        if (!started.get()) {
            return;
        }

        logger.debug("Reconfiguring Broadcaster {}", getID());
        if (notifierFuture != null) {
            notifierFuture.cancel(true);
        }

        if (asyncWriteFuture != null) {
            asyncWriteFuture.cancel(true);
        }

        notifierFuture = bc.getExecutorService().submit(getBroadcastHandler());
        asyncWriteFuture = bc.getAsyncWriteService().submit(getAsyncWriteHandler());
    } ##FSTMerge## protected void reconfigure() {
        if (!started.get()) {
            return;
        }

        if (notifierFuture != null) {
            notifierFuture.cancel(true);
        }
        notifierFuture = bc.getExecutorService().submit(getBroadcastHandler());
    } ##FSTMerge## protected void reconfigure() {
        if (!started.get()) {
            return;
        }

        logger.debug("Reconfiguring Broadcaster {}", getID());
        if (notifierFuture != null) {
            notifierFuture.cancel(true);
        }

        if (asyncWriteFuture != null) {
            asyncWriteFuture.cancel(true);
        }

        notifierFuture = bc.getExecutorService().submit(getBroadcastHandler());
        asyncWriteFuture = bc.getAsyncWriteService().submit(getAsyncWriteHandler());
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public <T> Future<T> broadcast(T msg) {
        if (destroyed.get()) {
            logger.warn("This Broadcaster has been destroyed and cannot be used {}", getID());
            return null;
        }

        start();

        Object newMsg = filter(msg);
        if (newMsg == null) return null;
        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        try {
            outgoingBroadcast(msg);
            push(new Entry(newMsg, null, f, false));
        } finally {
            f.done();
        }
        return f;
    } ##FSTMerge## @Override
    public <T> Future<T> broadcast(T msg) {
        if (destroyed.get()) {
            logger.warn("This Broadcaster has been destroyed and cannot be used {}" , getID());
            return null;
        }

        start();

        Object newMsg = filter(msg);
        if (newMsg == null) return null;
        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        try {
            outgoingBroadcast(msg);
            push(new Entry(newMsg, null, f, false));
        } finally {
            f.done();
        }
        return f;
    } ##FSTMerge## @Override
    public <T> Future<T> broadcast(T msg) {
        if (destroyed.get()) {
            logger.warn("This Broadcaster has been destroyed and cannot be used {}", getID());
            return null;
        }

        start();

        Object newMsg = filter(msg);
        if (newMsg == null) return null;
        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        try {
            outgoingBroadcast(msg);
            push(new Entry(newMsg, null, f, false));
        } finally {
            f.done();
        }
        return f;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public <T> Future<T> broadcast(T msg, AtmosphereResource<?, ?> r) {
        if (destroyed.get()) {
            logger.warn("This Broadcaster has been destroyed and cannot be used {}", getID());
            return null;
        }

        start();

        Object newMsg = filter(msg);
        if (newMsg == null) return null;
        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        try {
            outgoingBroadcast(msg);
            push(new Entry(newMsg, r, f, false));
        } finally {
            f.done();
        }
        return f;
    } ##FSTMerge## @Override
    public <T> Future<T> broadcast(T msg, AtmosphereResource<?, ?> r) {
        if (destroyed.get()) {
            logger.warn("This Broadcaster has been destroyed and cannot be used {}" , getID());
            return null;
        }

        start();

        Object newMsg = filter(msg);
        if (newMsg == null) return null;
        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        try {
            outgoingBroadcast(msg);
            push(new Entry(newMsg, r, f, false));
        } finally {
            f.done();
        }
        return f;
    } ##FSTMerge## @Override
    public <T> Future<T> broadcast(T msg, AtmosphereResource<?, ?> r) {
        if (destroyed.get()) {
            logger.warn("This Broadcaster has been destroyed and cannot be used {}", getID());
            return null;
        }

        start();

        Object newMsg = filter(msg);
        if (newMsg == null) return null;
        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        try {
            outgoingBroadcast(msg);
            push(new Entry(newMsg, r, f, false));
        } finally {
            f.done();
        }
        return f;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public <T> Future<T> broadcast(T msg, Set<AtmosphereResource<?, ?>> subset) {
        if (destroyed.get()) {
            logger.warn("This Broadcaster has been destroyed and cannot be used {}", getID());
            return null;
        }

        start();

        Object newMsg = filter(msg);
        if (newMsg == null) return null;

        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        try {
            outgoingBroadcast(msg);
            push(new Entry(newMsg, subset, f, false));
        } finally {
            f.done();
        }
        return f;
    } ##FSTMerge## @Override
    public <T> Future<T> broadcast(T msg, Set<AtmosphereResource<?, ?>> subset) {
        if (destroyed.get()) {
            logger.warn("This Broadcaster has been destroyed and cannot be used {}" , getID());
            return null;
        }

        start();

        Object newMsg = filter(msg);
        if (newMsg == null) return null;

        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        try {
            outgoingBroadcast(msg);
            push(new Entry(newMsg, subset, f, false));
        } finally {
            f.done();
        }
        return f;
    } ##FSTMerge## @Override
    public <T> Future<T> broadcast(T msg, Set<AtmosphereResource<?, ?>> subset) {
        if (destroyed.get()) {
            logger.warn("This Broadcaster has been destroyed and cannot be used {}", getID());
            return null;
        }

        start();

        Object newMsg = filter(msg);
        if (newMsg == null) return null;

        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        try {
            outgoingBroadcast(msg);
            push(new Entry(newMsg, subset, f, false));
        } finally {
            f.done();
        }
        return f;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public final void onRequest(AtmosphereResource<HttpServletRequest, HttpServletResponse> r) throws IOException {
        if (!r.getResponse().getClass().isAssignableFrom(AtmosphereResponse.class)) {
            try {
                r.getAtmosphereConfig().getServletContext()
                        .getNamedDispatcher(r.getAtmosphereConfig().getDispatcherName())
                        .forward(r.getRequest(), r.getResponse());
            } catch (ServletException e) {
                IOException ie = new IOException();
                ie.initCause(e);
                throw ie;
            }
        } else {
            upgrade(r);
        }
    } ##FSTMerge## @Override
    public final void onRequest(AtmosphereResource<HttpServletRequest, HttpServletResponse> r) throws IOException {
        if (!r.getResponse().getClass().isAssignableFrom(WebSocketHttpServletResponse.class)) {
            try {
                r.getAtmosphereConfig().getServletContext()
                        .getNamedDispatcher(r.getAtmosphereConfig().getDispatcherName())
                        .forward(r.getRequest(), r.getResponse());
            } catch (ServletException e) {
                IOException ie = new IOException();
                ie.initCause(e);
                throw ie;
            }
        } else {
            upgrade(r);
        }
    } ##FSTMerge## @Override
    public final void onRequest(AtmosphereResource<HttpServletRequest, HttpServletResponse> r) throws IOException {
        if (!r.getResponse().getClass().isAssignableFrom(AtmosphereResponse.class)) {
            try {
                r.getAtmosphereConfig().getServletContext()
                        .getNamedDispatcher(r.getAtmosphereConfig().getDispatcherName())
                        .forward(r.getRequest(), r.getResponse());
            } catch (ServletException e) {
                IOException ie = new IOException();
                ie.initCause(e);
                throw ie;
            }
        } else {
            upgrade(r);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/handler/SimpleWebSocketAtmosphereHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void onStateChange(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event)
            throws IOException {

        Object message = event.getMessage();
        if (message == null || event.isCancelled()) return;

        if (event.getResource().getSerializer() != null) {
            try {
                event.getResource().getSerializer().write(event.getResource().getResponse().getOutputStream(), message);
            } catch (Throwable ex) {
                logger.warn("Serializer exception: message: " + message, ex);
                throw new IOException(ex);
            }
        } else {
            boolean isUsingStream = (Boolean) event.getResource().getRequest().getAttribute(PROPERTY_USE_STREAM);

            if (!isUsingStream) {
                try {
                    event.getResource().getResponse().getWriter();
                } catch (IllegalStateException e) {
                    isUsingStream = true;
                }
            }

            if (message instanceof List) {
                for (String s : (List<String>) message) {
                    if (isUsingStream) {
                        event.getResource().getResponse().getOutputStream().write(s.getBytes());
                        event.getResource().getResponse().getOutputStream().flush();
                    } else {
                        event.getResource().getResponse().getWriter().write(s);
                        event.getResource().getResponse().getWriter().flush();
                    }
                }
            } else {
                if (isUsingStream) {
                    event.getResource().getResponse().getOutputStream().write(message.toString().getBytes());
                    event.getResource().getResponse().getOutputStream().flush();
                } else {
                    event.getResource().getResponse().getWriter().write(message.toString());
                    event.getResource().getResponse().getWriter().flush();
                }
            }

            Boolean resumeOnBroadcast = false;
            Object o = event.getResource().getRequest().getAttribute(ApplicationConfig.RESUME_ON_BROADCAST);
            if (o != null && Boolean.class.isAssignableFrom(o.getClass())) {
                resumeOnBroadcast = Boolean.class.cast(o);
            }

            if (resumeOnBroadcast != null && resumeOnBroadcast) {
                event.getResource().resume();
            }
        }
    } ##FSTMerge## public void onStateChange(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event)
            throws IOException {

        Object message = event.getMessage();
        if (message == null || event.isCancelled()) return;

        if (event.getResource().getSerializer() != null) {
            try {
                event.getResource().getSerializer().write(event.getResource().getResponse().getOutputStream(), message);
            } catch (Throwable ex) {
                logger.warn("Serializer exception: message: " + message, ex);
                throw new IOException(ex);
            }
        } else {
            boolean isUsingStream = false;
            try {
                event.getResource().getResponse().getWriter();
            } catch (IllegalStateException e) {
                isUsingStream = true;
            }

            if (message instanceof List) {
                for (String s : (List<String>) message) {
                    if (isUsingStream) {
                        event.getResource().getResponse().getOutputStream().write(s.getBytes());
                        event.getResource().getResponse().getOutputStream().flush();
                    } else {
                        event.getResource().getResponse().getWriter().write(s);
                        event.getResource().getResponse().getWriter().flush();
                    }
                }
            } else {
                if (isUsingStream) {
                    event.getResource().getResponse().getOutputStream().write(message.toString().getBytes());
                    event.getResource().getResponse().getOutputStream().flush();
                } else {
                    event.getResource().getResponse().getWriter().write(message.toString());
                    event.getResource().getResponse().getWriter().flush();
                }
            }

            Boolean resumeOnBroadcast = false;
            Object o = event.getResource().getRequest().getAttribute(ApplicationConfig.RESUME_ON_BROADCAST);
            if (o != null && Boolean.class.isAssignableFrom(o.getClass())) {
                resumeOnBroadcast = Boolean.class.cast(o);
            }

            if (resumeOnBroadcast != null && resumeOnBroadcast) {
                event.getResource().resume();
            }
        }
    } ##FSTMerge## public void onStateChange(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event)
            throws IOException {

        Object message = event.getMessage();
        if (message == null || event.isCancelled()) return;

        if (event.getResource().getSerializer() != null) {
            try {
                event.getResource().getSerializer().write(event.getResource().getResponse().getOutputStream(), message);
            } catch (Throwable ex) {
                logger.warn("Serializer exception: message: " + message, ex);
                throw new IOException(ex);
            }
        } else {
            boolean isUsingStream = (Boolean) event.getResource().getRequest().getAttribute(PROPERTY_USE_STREAM);

            if (!isUsingStream) {
                try {
                    event.getResource().getResponse().getWriter();
                } catch (IllegalStateException e) {
                    isUsingStream = true;
                }
            }

            if (message instanceof List) {
                for (String s : (List<String>) message) {
                    if (isUsingStream) {
                        event.getResource().getResponse().getOutputStream().write(s.getBytes());
                        event.getResource().getResponse().getOutputStream().flush();
                    } else {
                        event.getResource().getResponse().getWriter().write(s);
                        event.getResource().getResponse().getWriter().flush();
                    }
                }
            } else {
                if (isUsingStream) {
                    event.getResource().getResponse().getOutputStream().write(message.toString().getBytes());
                    event.getResource().getResponse().getOutputStream().flush();
                } else {
                    event.getResource().getResponse().getWriter().write(message.toString());
                    event.getResource().getResponse().getWriter().flush();
                }
            }

            Boolean resumeOnBroadcast = false;
            Object o = event.getResource().getRequest().getAttribute(ApplicationConfig.RESUME_ON_BROADCAST);
            if (o != null && Boolean.class.isAssignableFrom(o.getClass())) {
                resumeOnBroadcast = Boolean.class.cast(o);
            }

            if (resumeOnBroadcast != null && resumeOnBroadcast) {
                event.getResource().resume();
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void destroy() {
        super.destroy();
        Meteor.cache.clear();
    } ##FSTMerge## @Override
    public void destroy() {
        super.destroy();
        Meteor.destroy();
    } ##FSTMerge## @Override
    public void destroy() {
        super.destroy();
        Meteor.cache.clear();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/MeteorServlet.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private static final Logger logger = LoggerFactory.getLogger(Meteor.class); ##FSTMerge## ##FSTMerge## private static final Logger logger = LoggerFactory.getLogger(Meteor.class);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected final static ConcurrentHashMap<AtmosphereResource, Meteor> cache =
            new ConcurrentHashMap<AtmosphereResource, Meteor>(); ##FSTMerge## private final static ConcurrentHashMap<AtmosphereResource, Meteor> cache =
            new ConcurrentHashMap<AtmosphereResource, Meteor>(); ##FSTMerge## protected final static ConcurrentHashMap<AtmosphereResource, Meteor> cache =
            new ConcurrentHashMap<AtmosphereResource, Meteor>();
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private AtomicBoolean isDestroyed = new AtomicBoolean(false); ##FSTMerge## ##FSTMerge## private AtomicBoolean isDestroyed = new AtomicBoolean(false);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public final static Meteor build(HttpServletRequest req, Broadcaster.SCOPE scope,
                                     List<BroadcastFilter> l, Serializer s) {
        AtmosphereResource<HttpServletRequest, HttpServletResponse> r =
                (AtmosphereResource<HttpServletRequest, HttpServletResponse>)
                        req.getAttribute(ATMOSPHERE_RESOURCE);
        if (r == null) throw new IllegalStateException("MeteorServlet not defined in web.xml");

        Broadcaster b = null;

        if (scope == Broadcaster.SCOPE.REQUEST) {
            try {
                b = BroadcasterFactory.getDefault().get(DefaultBroadcaster.class, DefaultBroadcaster.class.getSimpleName() + UUID.randomUUID());
            } catch (Throwable t) {
                throw new RuntimeException(t);
            }
            b.setScope(scope);
            r.setBroadcaster(b);
            req.setAttribute(AtmosphereResourceImpl.SKIP_BROADCASTER_CREATION, Boolean.TRUE);
        }

        Meteor m = new Meteor(r, l, s);
        req.setAttribute(AtmosphereResourceImpl.METEOR, m);
        return m;
    } ##FSTMerge## public final static Meteor build(HttpServletRequest req, Broadcaster.SCOPE scope,
                                     List<BroadcastFilter> l, Serializer s) {
        AtmosphereResource<HttpServletRequest, HttpServletResponse> r =
                (AtmosphereResource<HttpServletRequest, HttpServletResponse>)
                        req.getAttribute(ATMOSPHERE_RESOURCE);
        if (r == null) throw new IllegalStateException("MeteorServlet not defined in web.xml");

        Broadcaster b = null;

        if (scope == Broadcaster.SCOPE.REQUEST) {
            try {
                b = BroadcasterFactory.getDefault().get(DefaultBroadcaster.class, DefaultBroadcaster.class.getSimpleName() + UUID.randomUUID());
            } catch (Throwable t) {
                throw new RuntimeException(t);
            }
            b.setScope(scope);
            r.setBroadcaster(b);
        }

        Meteor m = new Meteor(r, l, s);
        return m;
    } ##FSTMerge## public final static Meteor build(HttpServletRequest req, Broadcaster.SCOPE scope,
                                     List<BroadcastFilter> l, Serializer s) {
        AtmosphereResource<HttpServletRequest, HttpServletResponse> r =
                (AtmosphereResource<HttpServletRequest, HttpServletResponse>)
                        req.getAttribute(ATMOSPHERE_RESOURCE);
        if (r == null) throw new IllegalStateException("MeteorServlet not defined in web.xml");

        Broadcaster b = null;

        if (scope == Broadcaster.SCOPE.REQUEST) {
            try {
                b = BroadcasterFactory.getDefault().get(DefaultBroadcaster.class, DefaultBroadcaster.class.getSimpleName() + UUID.randomUUID());
            } catch (Throwable t) {
                throw new RuntimeException(t);
            }
            b.setScope(scope);
            r.setBroadcaster(b);
            req.setAttribute(AtmosphereResourceImpl.SKIP_BROADCASTER_CREATION, Boolean.TRUE);
        }

        Meteor m = new Meteor(r, l, s);
        req.setAttribute(AtmosphereResourceImpl.METEOR, m);
        return m;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Meteor suspend(long l) {
        if (destroyed()) return null;
        r.suspend(l);
        return this;
    } ##FSTMerge## public Meteor suspend(long l) {
        r.suspend(l);
        return this;
    } ##FSTMerge## public Meteor suspend(long l) {
        if (destroyed()) return null;
        r.suspend(l);
        return this;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Meteor suspend(long timeout, TimeUnit timeunit) {
        if (destroyed()) return null;
        r.suspend(timeout, timeunit);
        return this;
    } ##FSTMerge## public Meteor suspend(long timeout, TimeUnit timeunit) {
        r.suspend(timeout, timeunit);
        return this;
    } ##FSTMerge## public Meteor suspend(long timeout, TimeUnit timeunit) {
        if (destroyed()) return null;
        r.suspend(timeout, timeunit);
        return this;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Meteor suspend(long l, boolean outputComments) {
        if (destroyed()) return null;
        r.suspend(l, outputComments);
        return this;
    } ##FSTMerge## public Meteor suspend(long l, boolean outputComments) {
        r.suspend(l, outputComments);
        return this;
    } ##FSTMerge## public Meteor suspend(long l, boolean outputComments) {
        if (destroyed()) return null;
        r.suspend(l, outputComments);
        return this;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Meteor suspend(long timeout, TimeUnit timeunit, boolean outputComments) {
        if (destroyed()) return null;
        r.suspend(timeout, timeunit, outputComments);
        return this;
    } ##FSTMerge## public Meteor suspend(long timeout, TimeUnit timeunit, boolean outputComments) {
        r.suspend(timeout, timeunit, outputComments);
        return this;
    } ##FSTMerge## public Meteor suspend(long timeout, TimeUnit timeunit, boolean outputComments) {
        if (destroyed()) return null;
        r.suspend(timeout, timeunit, outputComments);
        return this;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Meteor resume() {
        if (destroyed()) return null;
        r.resume();
        cache.remove(r);
        return this;
    } ##FSTMerge## public Meteor resume() {
        r.resume();
        cache.remove(r);
        return this;
    } ##FSTMerge## public Meteor resume() {
        if (destroyed()) return null;
        r.resume();
        cache.remove(r);
        return this;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Meteor broadcast(Object o) {
        if (destroyed()) return null;
        r.getBroadcaster().broadcast(o);
        return this;
    } ##FSTMerge## public Meteor broadcast(Object o) {
        r.getBroadcaster().broadcast(o);
        return this;
    } ##FSTMerge## public Meteor broadcast(Object o) {
        if (destroyed()) return null;
        r.getBroadcaster().broadcast(o);
        return this;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Meteor schedule(Object o, long period) {
        if (destroyed()) return null;
        r.getBroadcaster().scheduleFixedBroadcast(o, period, TimeUnit.SECONDS);
        return this;
    } ##FSTMerge## public Meteor schedule(Object o, long period) {
        r.getBroadcaster().scheduleFixedBroadcast(o, period, TimeUnit.SECONDS);
        return this;
    } ##FSTMerge## public Meteor schedule(Object o, long period) {
        if (destroyed()) return null;
        r.getBroadcaster().scheduleFixedBroadcast(o, period, TimeUnit.SECONDS);
        return this;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Meteor delayBroadadcast(Object o, long period) {
        if (destroyed()) return null;
        r.getBroadcaster().delayBroadcast(o, period, TimeUnit.SECONDS);
        return this;
    } ##FSTMerge## public Meteor delayBroadadcast(Object o, long period) {
        r.getBroadcaster().delayBroadcast(o, period, TimeUnit.SECONDS);
        return this;
    } ##FSTMerge## public Meteor delayBroadadcast(Object o, long period) {
        if (destroyed()) return null;
        r.getBroadcaster().delayBroadcast(o, period, TimeUnit.SECONDS);
        return this;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Broadcaster getBroadcaster() {
        if (destroyed()) return null;
        return r.getBroadcaster();
    } ##FSTMerge## public Broadcaster getBroadcaster() {
        return r.getBroadcaster();
    } ##FSTMerge## public Broadcaster getBroadcaster() {
        if (destroyed()) return null;
        return r.getBroadcaster();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setBroadcaster(Broadcaster b) {
        if (destroyed()) return;
        r.setBroadcaster(b);
    } ##FSTMerge## public void setBroadcaster(Broadcaster b) {
        r.setBroadcaster(b);
    } ##FSTMerge## public void setBroadcaster(Broadcaster b) {
        if (destroyed()) return;
        r.setBroadcaster(b);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void addListener(AtmosphereResourceEventListener e) {
        if (destroyed()) return;
        r.addEventListener(e);
    } ##FSTMerge## public void addListener(AtmosphereResourceEventListener e) {
        if (r instanceof AtmosphereEventLifecycle) {
            ((AtmosphereEventLifecycle) r).addEventListener(e);
        }
    } ##FSTMerge## public void addListener(AtmosphereResourceEventListener e) {
        if (destroyed()) return;
        r.addEventListener(e);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void removeListener(AtmosphereResourceEventListener e) {
        if (destroyed()) return;
        r.removeEventListener(e);
    } ##FSTMerge## public void removeListener(AtmosphereResourceEventListener e) {
        if (r instanceof AtmosphereEventLifecycle) {
            ((AtmosphereEventLifecycle) r).removeEventListener(e);
        }
    } ##FSTMerge## public void removeListener(AtmosphereResourceEventListener e) {
        if (destroyed()) return;
        r.removeEventListener(e);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void destroy() {
        isDestroyed.set(true);
        cache.remove(this);
    } ##FSTMerge## static void destroy() {
        cache.clear();
    } ##FSTMerge## public void destroy() {
        isDestroyed.set(true);
        cache.remove(this);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private boolean destroyed(){
        if (isDestroyed.get()) {
            logger.debug("This Meteor is destroyed and cannot be used.");
            return true;
        }
        return false;
    } ##FSTMerge## ##FSTMerge## private boolean destroyed(){
        if (isDestroyed.get()) {
            logger.debug("This Meteor is destroyed and cannot be used.");
            return true;
        }
        return false;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String JSONP_TRANSPORT = "jsonp"; ##FSTMerge## ##FSTMerge## String JSONP_TRANSPORT = "jsonp";
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/HeaderConfig.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String JSONP_CALLBACK_NAME = "jsonpTransport"; ##FSTMerge## ##FSTMerge## String JSONP_CALLBACK_NAME = "jsonpTransport";
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/HeaderConfig.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String WRITE_HEADERS = AtmosphereResource.class.getName() + ".writeHeader"; ##FSTMerge## String WRITE_HEADERS = AtmosphereResource.class.getName() + "." + "writeHeader"; ##FSTMerge## String WRITE_HEADERS = AtmosphereResource.class.getName() + ".writeHeader";
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/FrameworkConfig.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String EXPECTED_CONTENT_TYPE = FrameworkConfig.class.getName() + ".expectedContentType"; ##FSTMerge## ##FSTMerge## String EXPECTED_CONTENT_TYPE = FrameworkConfig.class.getName() + ".expectedContentType";
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/FrameworkConfig.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private void configure(String broadcasterLifeCyclePolicy) {

        int maxIdleTime = 5 * 60 * 1000;
        String idleTime = config.getInitParameter(ApplicationConfig.BROADCASTER_LIFECYCLE_POLICY_IDLETIME);
        if (idleTime != null) {
            maxIdleTime = Integer.parseInt(idleTime);
        }

        if (EMPTY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(EMPTY).build();
        } else if (EMPTY_DESTROY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(EMPTY_DESTROY).build();
        } else if (IDLE.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(IDLE).idleTimeInMS(maxIdleTime).build();
        } else if (IDLE_DESTROY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(IDLE_DESTROY).idleTimeInMS(maxIdleTime).build();
        } else if (IDLE_RESUME.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(IDLE_RESUME).idleTimeInMS(maxIdleTime).build();
        } else if (NEVER.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(NEVER).build();
        } else {
            logger.warn("Unsupported BroadcasterLifeCyclePolicy policy {}", broadcasterLifeCyclePolicy);
        }
    } ##FSTMerge## private void configure(String broadcasterLifeCyclePolicy) {

        int maxIdleTime = 5 * 60 * 100;
        String idleTime = config.getInitParameter(ApplicationConfig.BROADCASTER_LIFECYCLE_POLICY_IDLETIME);
        if (idleTime != null) {
            maxIdleTime = Integer.parseInt(idleTime);
        }

        if (EMPTY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(EMPTY).build();
        } else if (EMPTY_DESTROY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(EMPTY_DESTROY).build();
        } else if (IDLE.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(IDLE).idleTimeInMS(maxIdleTime).build();
        } else if (IDLE_DESTROY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(IDLE_DESTROY).idleTimeInMS(maxIdleTime).build();
        } else if (IDLE_RESUME.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(IDLE_RESUME).idleTimeInMS(maxIdleTime).build();
        } else if (NEVER.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(NEVER).build();
        } else {
            logger.warn("Unsupported BroadcasterLifeCyclePolicy policy {}", broadcasterLifeCyclePolicy);
        }
    } ##FSTMerge## private void configure(String broadcasterLifeCyclePolicy) {

        int maxIdleTime = 5 * 60 * 1000;
        String idleTime = config.getInitParameter(ApplicationConfig.BROADCASTER_LIFECYCLE_POLICY_IDLETIME);
        if (idleTime != null) {
            maxIdleTime = Integer.parseInt(idleTime);
        }

        if (EMPTY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(EMPTY).build();
        } else if (EMPTY_DESTROY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(EMPTY_DESTROY).build();
        } else if (IDLE.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(IDLE).idleTimeInMS(maxIdleTime).build();
        } else if (IDLE_DESTROY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(IDLE_DESTROY).idleTimeInMS(maxIdleTime).build();
        } else if (IDLE_RESUME.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(IDLE_RESUME).idleTimeInMS(maxIdleTime).build();
        } else if (NEVER.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
            policy = new BroadcasterLifeCyclePolicy.Builder().policy(NEVER).build();
        } else {
            logger.warn("Unsupported BroadcasterLifeCyclePolicy policy {}", broadcasterLifeCyclePolicy);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public final Broadcaster get(Object id) {
        return get(clazz, id);
    } ##FSTMerge## public final Broadcaster get(Object id) {
        return get(clazz , id);
    } ##FSTMerge## public final Broadcaster get(Object id) {
        return get(clazz, id);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public final Broadcaster get(Class<? extends Broadcaster> c, Object id) {

        if (id == null) {
            throw new NullPointerException("id is null");
        }
        if (c == null) {
            throw new NullPointerException("Class is null");
        }

        if (store.containsKey(id)) {
            throw new IllegalStateException("Broadcaster already existing " + id + ". Use BroadcasterFactory.lookup instead");
        }

        return lookup(c, id, true);
    } ##FSTMerge## public final Broadcaster get(Class<? extends Broadcaster> c, Object id) {

        if (id == null) throw new NullPointerException("id is null");
        if (c == null) throw new NullPointerException("Class is null");

        if (getBroadcaster(id) != null)
            throw new IllegalStateException("Broadcaster already existing " + id + ". Use BroadcasterFactory.lookup instead");

        Broadcaster b = null;
        synchronized (id) {
            try {
                b = c.getConstructor(String.class, AtmosphereServlet.AtmosphereConfig.class).newInstance(id.toString(), config);
            } catch (Throwable t) {
                throw new BroadcasterCreationException(t);
            }
            InjectorProvider.getInjector().inject(b);
            b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config));
            b.setBroadcasterLifeCyclePolicy(policy);

            if (DefaultBroadcaster.class.isAssignableFrom(clazz)) {
                DefaultBroadcaster.class.cast(b).start();
            }
            store.put(id, b);
            logger.debug("Added Broadcaster {} . Factory size: {}", id, store.size());
        }
        return b;
    } ##FSTMerge## public final Broadcaster get(Class<? extends Broadcaster> c, Object id) {

        if (id == null) {
            throw new NullPointerException("id is null");
        }
        if (c == null) {
            throw new NullPointerException("Class is null");
        }

        if (store.containsKey(id)) {
            throw new IllegalStateException("Broadcaster already existing " + id + ". Use BroadcasterFactory.lookup instead");
        }

        return lookup(c, id, true);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private Broadcaster createBroadcaster(Class<? extends Broadcaster> c, Object id) throws BroadcasterCreationException {
        try {
            Broadcaster b = c.getConstructor(String.class, AtmosphereServlet.AtmosphereConfig.class).newInstance(id.toString(), config);
            InjectorProvider.getInjector().inject(b);
            b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config));
            b.setBroadcasterLifeCyclePolicy(policy);
            if (DefaultBroadcaster.class.isAssignableFrom(clazz)) {
                DefaultBroadcaster.class.cast(b).start();
            }
            return b;
        } catch (Throwable t) {
            throw new BroadcasterCreationException(t);
        }
    } ##FSTMerge## ##FSTMerge## private Broadcaster createBroadcaster(Class<? extends Broadcaster> c, Object id) throws BroadcasterCreationException {
        try {
            Broadcaster b = c.getConstructor(String.class, AtmosphereServlet.AtmosphereConfig.class).newInstance(id.toString(), config);
            InjectorProvider.getInjector().inject(b);

            if (b.getBroadcasterConfig() == null) {
                b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config));
            }

            b.setBroadcasterLifeCyclePolicy(policy);
            if (DefaultBroadcaster.class.isAssignableFrom(clazz)) {
                DefaultBroadcaster.class.cast(b).start();
            }
            return b;
        } catch (Throwable t) {
            throw new BroadcasterCreationException(t);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public boolean remove(Broadcaster b, Object id) {
        boolean removed = store.remove(id, b);
        if (removed) {
            logger.debug("Removing Broadcaster {} which internal reference is {} ", id, b.getID());
        }
        return removed;
    } ##FSTMerge## public boolean remove(Broadcaster b, Object id) {
        logger.debug("Removing Broadcaster {} which internal reference is {} ", id, b.getID());
        return store.remove(id) != null ? true : (store.remove(b.getID()) != null);
    } ##FSTMerge## public boolean remove(Broadcaster b, Object id) {
        boolean removed = store.remove(id, b);
        if (removed) {
            logger.debug("Removing Broadcaster {} factory size now {} ", id, store.size());
        }
        return removed;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public Broadcaster lookup(Class<? extends Broadcaster> c, Object id, boolean createIfNull) {
        Broadcaster b = store.get(id);
        if (b != null && !c.isAssignableFrom(b.getClass())) {
            String msg = "Invalid lookup class " + c.getName() + ". Cached class is: " + b.getClass().getName();
            logger.debug(msg);
            throw new IllegalStateException(msg);
        }

        if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {
            if (b != null) {
                logger.debug("Removing destroyed Broadcaster {}", b.getID());
                store.remove(b.getID(), b);
            }
            if (store.putIfAbsent(id, createBroadcaster(c, id)) == null) {
                logger.debug("Added Broadcaster {} . Factory size: {}", id, store.size());
            }
            b = store.get(id);
        }

        return b;
    } ##FSTMerge## @Override
    public Broadcaster lookup(Class<? extends Broadcaster> c, Object id, boolean createIfNull) {
        Broadcaster b = getBroadcaster(id);
        if (b != null && !c.isAssignableFrom(b.getClass())) {
            String msg = "Invalid lookup class " + c.getName() + ". Cached class is: " + b.getClass().getName();
            logger.debug("{}", msg);
            throw new IllegalStateException(msg);
        }

        if ((b == null && createIfNull) || (b !=null && b.isDestroyed())) {
            b = get(c, id);
        }

        return b;
    } ##FSTMerge## @Override
    public Broadcaster lookup(Class<? extends Broadcaster> c, Object id, boolean createIfNull) {
        Broadcaster b = store.get(id);
        if (b != null && !c.isAssignableFrom(b.getClass())) {
            String msg = "Invalid lookup class " + c.getName() + ". Cached class is: " + b.getClass().getName();
            logger.debug(msg);
            throw new IllegalStateException(msg);
        }

        if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {
            if (b != null) {
                logger.debug("Removing destroyed Broadcaster {}", b.getID());
                store.remove(b.getID(), b);
            }
            if (store.putIfAbsent(id, createBroadcaster(c, id)) == null) {
                logger.debug("Added Broadcaster {} . Factory size: {}", id, store.size());
            }

            b = store.get(id);
        }

        return b;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public static final String ASYNC_TOKEN = DefaultBroadcaster.class.getName() + ".token"; ##FSTMerge## ##FSTMerge## public static final String ASYNC_TOKEN = DefaultBroadcaster.class.getName() + ".token";
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final AtomicBoolean recentActivity = new AtomicBoolean(false); ##FSTMerge## ##FSTMerge## private final AtomicBoolean recentActivity = new AtomicBoolean(false);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected BroadcasterCache.STRATEGY cacheStrategy = BroadcasterCache.STRATEGY.AFTER_FILTER; ##FSTMerge## ##FSTMerge## protected BroadcasterCache.STRATEGY cacheStrategy = BroadcasterCache.STRATEGY.AFTER_FILTER;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public DefaultBroadcaster(String name, URI uri, AtmosphereServlet.AtmosphereConfig config) {
        this.name = name;
        this.uri = uri;
        this.config = config;

        broadcasterCache = new DefaultBroadcasterCache();
        bc = new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config);
        String s = config.getInitParameter(ApplicationConfig.BROADCASTER_CACHE_STRATEGY);
        if (s != null) {
            if (s.equalsIgnoreCase("afterFilter")) {
                cacheStrategy = BroadcasterCache.STRATEGY.AFTER_FILTER;
            } else if (s.equalsIgnoreCase("beforeFilter")) {
                cacheStrategy = BroadcasterCache.STRATEGY.BEFORE_FILTER;
            }
        }
    } ##FSTMerge## public DefaultBroadcaster(String name, URI uri, AtmosphereServlet.AtmosphereConfig config) {
        this.name = name;
        this.uri = uri;
        this.config = config;

        broadcasterCache = new DefaultBroadcasterCache();
        bc = new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config);
    } ##FSTMerge## public DefaultBroadcaster(String name, URI uri, AtmosphereServlet.AtmosphereConfig config) {
        this.name = name;
        this.uri = uri;
        this.config = config;

        broadcasterCache = new DefaultBroadcasterCache();
        bc = createBroadcasterConfig(config);
        String s = config.getInitParameter(ApplicationConfig.BROADCASTER_CACHE_STRATEGY);
        if (s != null) {
            if (s.equalsIgnoreCase("afterFilter")) {
                cacheStrategy = BroadcasterCache.STRATEGY.AFTER_FILTER;
            } else if (s.equalsIgnoreCase("beforeFilter")) {
                cacheStrategy = BroadcasterCache.STRATEGY.BEFORE_FILTER;
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public synchronized void destroy() {
        if (destroyed.getAndSet(true)) return;

        notifyDestroyListener();

        try {
            logger.trace("Broadcaster {} is being destroyed and cannot be re-used", getID());

            if (BroadcasterFactory.getDefault() != null) {
                BroadcasterFactory.getDefault().remove(this, this.getID());
            }

            if (currentLifecycleTask != null) {
                currentLifecycleTask.cancel(true);
            }
            started.set(false);

            releaseExternalResources();
            if (notifierFuture != null) {
                notifierFuture.cancel(true);
            }

            if (asyncWriteFuture != null) {
                asyncWriteFuture.cancel(true);
            }

            if (bc != null) {
                bc.destroy();
            }

            if (broadcasterCache != null) {
                broadcasterCache.stop();
            }
            resources.clear();
            broadcastOnResume.clear();
            messages.clear();
            asyncWriteQueue.clear();
            delayedBroadcast.clear();
            broadcasterCache = null;
        } catch (Throwable t) {
            logger.error("Unexpected exception during Broadcaster destroy {}", getID(), t);
        }
    } ##FSTMerge## public synchronized void destroy() {
        if (destroyed.get()) return;

        try {
            logger.debug("Broadcaster {} is being destroyed and cannot be re-used", getID());

            if (BroadcasterFactory.getDefault() != null) {
                BroadcasterFactory.getDefault().remove(this, this.getID());
            }

            if (currentLifecycleTask != null) {
                currentLifecycleTask.cancel(true);
            }
            started.set(false);
            destroyed.set(true);

            releaseExternalResources();
            if (notifierFuture != null) {
                notifierFuture.cancel(true);
            }

            if (asyncWriteFuture != null) {
                asyncWriteFuture.cancel(true);
            }

            if (bc != null) {
                bc.destroy();
            }

            if (broadcasterCache != null) {
                broadcasterCache.stop();
            }
            resources.clear();
            broadcastOnResume.clear();
            messages.clear();
            asyncWriteQueue.clear();
            delayedBroadcast.clear();
            broadcasterCache = null;
        } catch (Throwable t) {
            logger.error("Unexpected exception during Broadcaster destroy {}", getID(), t);
        }
    } ##FSTMerge## public synchronized void destroy() {
        if (destroyed.getAndSet(true)) return;

        notifyDestroyListener();

        try {
            logger.trace("Broadcaster {} is being destroyed and cannot be re-used", getID());

            if (BroadcasterFactory.getDefault() != null) {
                BroadcasterFactory.getDefault().remove(this, this.getID());
            }

            if (currentLifecycleTask != null) {
                currentLifecycleTask.cancel(true);
            }
            started.set(false);

            releaseExternalResources();
            if (notifierFuture != null) {
                notifierFuture.cancel(true);
            }

            if (asyncWriteFuture != null) {
                asyncWriteFuture.cancel(true);
            }

            if (bc != null) {
                bc.destroy();
            }

            if (broadcasterCache != null) {
                broadcasterCache.stop();
            }
            resources.clear();
            broadcastOnResume.clear();
            messages.clear();
            asyncWriteQueue.clear();
            delayedBroadcast.clear();
            broadcasterCache = null;
        } catch (Throwable t) {
            logger.error("Unexpected exception during Broadcaster destroy {}", getID(), t);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setScope(SCOPE scope) {
        if (destroyed.get()) {
            logger.debug(DESTROYED, getID(), "setScope");
            return;
        }

        this.scope = scope;
        if (scope != SCOPE.REQUEST) {
            return;
        }

        logger.debug("Changing broadcaster scope for {}. This broadcaster will be destroyed.", getID());
        synchronized (resources) {
            try {
                // Next, we need to create a new broadcaster per resource.
                for (AtmosphereResource<?, ?> resource : resources) {
                    Broadcaster b = BroadcasterFactory.getDefault()
                            .get(getClass(), getClass().getSimpleName() + "/" + UUID.randomUUID());

                    if (DefaultBroadcaster.class.isAssignableFrom(this.getClass())) {
                        BroadcasterCache cache = bc.getBroadcasterCache().getClass().newInstance();
                        InjectorProvider.getInjector().inject(cache);
                        DefaultBroadcaster.class.cast(b).broadcasterCache = cache;
                        DefaultBroadcaster.class.cast(b).getBroadcasterConfig().setBroadcasterCache(cache);
                    }
                    resource.setBroadcaster(b);
                    b.setScope(SCOPE.REQUEST);
                    if (resource.getAtmosphereResourceEvent().isSuspended()) {
                        b.addAtmosphereResource(resource);
                    }
                    logger.debug("Resource {} not using broadcaster {}", resource, b.getID());
                }

                // Do not destroy because this is a new Broadcaster
                if (resources.isEmpty()) {
                    return;
                }

                destroy();
            } catch (Exception e) {
                logger.error("Failed to set request scope for current resources", e);
            }
        }
    } ##FSTMerge## public void setScope(SCOPE scope) {
        this.scope = scope;
        if (scope != SCOPE.REQUEST) {
            return;
        }

        logger.debug("Changing broadcaster scope for {}. This broadcaster will be destroyed.", getID());

        synchronized (resources) {
            try {
                // Next, we need to create a new broadcaster per resource.
                for (AtmosphereResource<?, ?> resource : resources) {
                    Broadcaster b = BroadcasterFactory.getDefault()
                            .get(getClass(), getClass().getSimpleName() + "/" + UUID.randomUUID());

                    if (DefaultBroadcaster.class.isAssignableFrom(this.getClass())) {
                        BroadcasterCache cache = bc.getBroadcasterCache().getClass().newInstance();
                        InjectorProvider.getInjector().inject(cache);
                        DefaultBroadcaster.class.cast(b).broadcasterCache = cache;
                    }
                    resource.setBroadcaster(b);
                    b.setScope(SCOPE.REQUEST);
                    if (resource.getAtmosphereResourceEvent().isSuspended()) {
                        b.addAtmosphereResource(resource);
                    }
                    logger.debug("Resource {} not using broadcaster {}", resource, b.getID());
                }


                destroy();
            } catch (Exception e) {
                logger.error("Failed to set request scope for current resources", e);
            }
        }
    } ##FSTMerge## public void setScope(SCOPE scope) {
        if (destroyed.get()) {
            logger.debug(DESTROYED, getID(), "setScope");
            return;
        }

        this.scope = scope;
        if (scope != SCOPE.REQUEST) {
            return;
        }

        logger.debug("Changing broadcaster scope for {}. This broadcaster will be destroyed.", getID());
        synchronized (resources) {
            try {
                // Next, we need to create a new broadcaster per resource.
                for (AtmosphereResource<?, ?> resource : resources) {
                    Broadcaster b = BroadcasterFactory.getDefault()
                            .get(getClass(), getClass().getSimpleName() + "/" + UUID.randomUUID());

                    if (DefaultBroadcaster.class.isAssignableFrom(this.getClass())) {
                        BroadcasterCache cache = bc.getBroadcasterCache().getClass().newInstance();
                        InjectorProvider.getInjector().inject(cache);
                        DefaultBroadcaster.class.cast(b).broadcasterCache = cache;
                        DefaultBroadcaster.class.cast(b).getBroadcasterConfig().setBroadcasterCache(cache);
                    }
                    resource.setBroadcaster(b);
                    b.setScope(SCOPE.REQUEST);
                    if (resource.getAtmosphereResourceEvent().isSuspended()) {
                        b.addAtmosphereResource(resource);
                    }
                    logger.debug("Resource {} not using broadcaster {}", resource, b.getID());
                }

                // Do not destroy because this is a new Broadcaster
                if (resources.isEmpty()) {
                    return;
                }

                destroy();
            } catch (Exception e) {
                logger.error("Failed to set request scope for current resources", e);
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public synchronized void setID(String id) {
        if (id == null) {
            id = getClass().getSimpleName() + "/" + UUID.randomUUID();
        }

        if (BroadcasterFactory.getDefault() == null)
            return; // we are shutdown or destroyed, but someone still reference

        Broadcaster b = BroadcasterFactory.getDefault().lookup(this.getClass(), id);
        if (b != null && b.getScope() == SCOPE.REQUEST) {
            throw new IllegalStateException("Broadcaster ID already assigned to SCOPE.REQUEST. Cannot change the id");
        } else if (b != null) {
            return;
        }

        BroadcasterFactory.getDefault().remove(this, name);
        this.name = id;
        BroadcasterFactory.getDefault().add(this, name);
    } ##FSTMerge## public synchronized void setID(String id) {
        if (id == null) {
            id = getClass().getSimpleName() + "/" + UUID.randomUUID();
        }

        Broadcaster b = BroadcasterFactory.getDefault().lookup(this.getClass(), id);
        if (b != null && b.getScope() == SCOPE.REQUEST) {
            throw new IllegalStateException("Broadcaster ID already assigned to SCOPE.REQUEST. Cannot change the id");
        } else if (b != null) {
            return;
        }

        BroadcasterFactory.getDefault().remove(this, name);
        this.name = id;
        BroadcasterFactory.getDefault().add(this, name);
    } ##FSTMerge## public synchronized void setID(String id) {
        if (id == null) {
            id = getClass().getSimpleName() + "/" + UUID.randomUUID();
        }

        if (BroadcasterFactory.getDefault() == null)
            return; // we are shutdown or destroyed, but someone still reference

        Broadcaster b = BroadcasterFactory.getDefault().lookup(this.getClass(), id);
        if (b != null && b.getScope() == SCOPE.REQUEST) {
            throw new IllegalStateException("Broadcaster ID already assigned to SCOPE.REQUEST. Cannot change the id");
        } else if (b != null) {
            return;
        }

        BroadcasterFactory.getDefault().remove(this, name);
        this.name = id;
        BroadcasterFactory.getDefault().add(this, name);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void setBroadcasterLifeCyclePolicy(final BroadcasterLifeCyclePolicy lifeCyclePolicy) {
        this.lifeCyclePolicy = lifeCyclePolicy;
        if (currentLifecycleTask != null) {
            currentLifecycleTask.cancel(false);
        }

        if (bc != null && bc.getScheduledExecutorService() == null) {
            logger.error("No Broadcaster's SchedulerExecutorService has been configured on {}. BroadcasterLifeCyclePolicy won't work.", getID());
            return;
        }

        if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE
                || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME
                || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {

            recentActivity.set(false);

            int time = lifeCyclePolicy.getTimeout();
            if (time == -1) {
                throw new IllegalStateException("BroadcasterLifeCyclePolicy time is not set");
            }

            final AtomicReference<Future<?>> ref = new AtomicReference<Future<?>>();
            currentLifecycleTask = bc.getScheduledExecutorService().scheduleAtFixedRate(new Runnable() {

                @Override
                public void run() {
                    try {
                        // Check for activity since the last execution.
                        if (recentActivity.getAndSet(false)) {
                            return;
                        } else if (resources.isEmpty()) {
                            if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE) {
                                notifyEmptyListener();
                                notifyIdleListener();

                                releaseExternalResources();
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE policy to Broadcaster {}", getID());
                            } else if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {
                                notifyEmptyListener();
                                notifyIdleListener();

                                destroy(false);
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_DESTROY policy to Broadcaster {}", getID());
                            }
                        } else if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME) {
                            notifyIdleListener();

                            destroy(true);
                            logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_RESUME policy to Broadcaster {}", getID());
                        }
                    } catch (Throwable t) {
                        if (destroyed.get()) {
                            logger.trace("Scheduled BroadcasterLifeCyclePolicy exception", t);
                        } else {
                            logger.warn("Scheduled BroadcasterLifeCyclePolicy exception", t);
                        }
                    }
                }

                void destroy(boolean resume) {

                    if (resume) {
                        logger.info("All AtmosphereResource will now be resumed from Broadcaster {}", getID());
                        resumeAll();
                    }

                    DefaultBroadcaster.this.destroy();
                    /**
                     * The value may be null if the timeout is too low. Hopefully next execution will
                     * cancel the task properly.
                     */
                    if (ref.get() != null) {
                        currentLifecycleTask.cancel(true);
                    }
                }

            }, time, time, lifeCyclePolicy.getTimeUnit());
            ref.set(currentLifecycleTask);
        }
    } ##FSTMerge## @Override
    public void setBroadcasterLifeCyclePolicy(final BroadcasterLifeCyclePolicy lifeCyclePolicy) {
        this.lifeCyclePolicy = lifeCyclePolicy;
        if (currentLifecycleTask != null) {
            currentLifecycleTask.cancel(false);
        }

        if (bc.getScheduledExecutorService() == null) {
            logger.error("No Broadcaster's SchedulerExecutorService has been configured on {}. BroadcasterLifeCyclePolicy won't work.", getID());
            return;
        }

        if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE
                || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME
                || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {

            int time = lifeCyclePolicy.getTimeout();
            if (time == -1) {
                throw new IllegalStateException("BroadcasterLifeCyclePolicy time is not set");
            }

            final AtomicReference<Future<?>> ref = new AtomicReference<Future<?>>();
            currentLifecycleTask = bc.getScheduledExecutorService().scheduleAtFixedRate(new Runnable() {

                @Override
                public void run() {
                    try {
                        if (resources.isEmpty()) {
                            if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE) {
                                notifyEmptyListener();
                                notifyIdleListener();

                                releaseExternalResources();
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE policy to Broadcaster {}", getID());
                            } else if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {
                                notifyEmptyListener();
                                notifyIdleListener();

                                destroy(false);
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_DESTROY policy to Broadcaster {}", getID());
                            }
                        } else if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME) {
                            notifyIdleListener();

                            destroy(true);
                            logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_RESUME policy to Broadcaster {}", getID());
                        }
                    } catch (Throwable t) {
                        if (destroyed.get()) {
                            logger.trace("Scheduled BroadcasterLifeCyclePolicy exception", t);
                        } else {
                            logger.warn("Scheduled BroadcasterLifeCyclePolicy exception", t);
                        }
                    }
                }

                void destroy(boolean resume) {
                    notifyDestroyListener();

                    if (resume) {
                        logger.info("All AtmosphereResource will now be resumed from Broadcaster {}", getID());
                        resumeAll();
                    }

                    DefaultBroadcaster.this.destroy();
                    /**
                     * The value may be null if the timeout is too low. Hopefully next execution will
                     * cancel the task properly.
                     */
                    if (ref.get() != null) {
                        currentLifecycleTask.cancel(true);
                    }
                }

            }, time, time, lifeCyclePolicy.getTimeUnit());
            ref.set(currentLifecycleTask);
        }
    } ##FSTMerge## @Override
    public void setBroadcasterLifeCyclePolicy(final BroadcasterLifeCyclePolicy lifeCyclePolicy) {
        this.lifeCyclePolicy = lifeCyclePolicy;
        if (currentLifecycleTask != null) {
            currentLifecycleTask.cancel(false);
        }

        if (bc != null && bc.getScheduledExecutorService() == null) {
            logger.error("No Broadcaster's SchedulerExecutorService has been configured on {}. BroadcasterLifeCyclePolicy won't work.", getID());
            return;
        }

        if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE
                || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME
                || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {

            recentActivity.set(false);

            int time = lifeCyclePolicy.getTimeout();
            if (time == -1) {
                throw new IllegalStateException("BroadcasterLifeCyclePolicy time is not set");
            }

            final AtomicReference<Future<?>> ref = new AtomicReference<Future<?>>();
            currentLifecycleTask = bc.getScheduledExecutorService().scheduleAtFixedRate(new Runnable() {

                @Override
                public void run() {
                    try {

                        // Check for activity since the last execution.
                        if (recentActivity.getAndSet(false)) {
                            return;
                        } else if (resources.isEmpty()) {
                            if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE) {
                                notifyEmptyListener();
                                notifyIdleListener();

                                releaseExternalResources();
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE policy to Broadcaster {}", getID());
                            } else if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {
                                notifyEmptyListener();
                                notifyIdleListener();

                                destroy(false);
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_DESTROY policy to Broadcaster {}", getID());
                            }
                        } else if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME) {
                            notifyIdleListener();

                            destroy(true);
                            logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_RESUME policy to Broadcaster {}", getID());
                        }
                    } catch (Throwable t) {
                        if (destroyed.get()) {
                            logger.trace("Scheduled BroadcasterLifeCyclePolicy exception", t);
                        } else {
                            logger.warn("Scheduled BroadcasterLifeCyclePolicy exception", t);
                        }
                    }
                }

                void destroy(boolean resume) {

                    if (resume) {
                        logger.info("All AtmosphereResource will now be resumed from Broadcaster {}", getID());
                        resumeAll();
                    }

                    DefaultBroadcaster.this.destroy();
                    /**
                     * The value may be null if the timeout is too low. Hopefully next execution will
                     * cancel the task properly.
                     */
                    if (ref.get() != null) {
                        currentLifecycleTask.cancel(true);
                    }
                }

            }, time, time, lifeCyclePolicy.getTimeUnit());
            ref.set(currentLifecycleTask);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected Runnable getBroadcastHandler() {
        return new Runnable() {
            public void run() {
                Entry msg = null;
                while (started.get()) {
                    try {
                        msg = messages.poll(10, TimeUnit.SECONDS);
                        if (msg == null) {
                            if (destroyed.get()) {
                                return;
                            } else {
                                continue;
                            }
                        }
                        push(msg);
                    } catch (InterruptedException ex) {
                        return;
                    } catch (Throwable ex) {
                        if (!started.get() || destroyed.get()) {
                            logger.trace("Failed to submit broadcast handler runnable on shutdown for Broadcaster {}", getID(), ex);
                            return;
                        } else {
                            logger.warn("This message {} will be lost", msg);
                            logger.debug("Failed to submit broadcast handler runnable to for Broadcaster {}", getID(), ex);
                        }
                    }
                }
            }
        };
    } ##FSTMerge## protected Runnable getBroadcastHandler() {
        return new Runnable() {
            public void run() {
                Entry msg = null;
                while (started.get()) {
                    try {
                        msg = messages.take();
                        push(msg);
                    } catch (Throwable ex) {
                        if (!started.get() || destroyed.get()) {
                            logger.trace("Failed to submit broadcast handler runnable on shutdown for Broadcaster {}", getID(), ex);
                        } else {
                            logger.warn("This message {} will be lost", msg);
                            logger.debug("Failed to submit broadcast handler runnable to for Broadcaster {}", getID(), ex);
                        }
                    }
                }
            }
        };
    } ##FSTMerge## protected Runnable getBroadcastHandler() {
        return new Runnable() {
            public void run() {
                Entry msg = null;
                while (started.get()) {
                    try {
                        msg = messages.poll(10, TimeUnit.SECONDS);
                        if (msg == null) {
                            if (destroyed.get()) {
                                return;
                            } else {
                                continue;
                            }
                        }
                        push(msg);
                    } catch (InterruptedException ex) {
                        return;
                    } catch (Throwable ex) {
                        if (!started.get() || destroyed.get()) {
                            logger.trace("Failed to submit broadcast handler runnable on shutdown for Broadcaster {}", getID(), ex);
                            return;
                        } else {
                            logger.warn("This message {} will be lost", msg);
                            logger.debug("Failed to submit broadcast handler runnable to for Broadcaster {}", getID(), ex);
                        }
                    }
                }
            }
        };
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void start() {
        if (!started.getAndSet(true)) {
            broadcasterCache = bc.getBroadcasterCache();
            broadcasterCache.start();

            setID(name);
            notifierFuture = bc.getExecutorService().submit(getBroadcastHandler());
            asyncWriteFuture = bc.getAsyncWriteService().submit(getAsyncWriteHandler());
        }
    } ##FSTMerge## protected void start() {
        if (!started.getAndSet(true)) {
            setID(name);
            broadcasterCache = bc.getBroadcasterCache();
            broadcasterCache.start();

            notifierFuture = bc.getExecutorService().submit(getBroadcastHandler());
            asyncWriteFuture = bc.getAsyncWriteService().submit(getAsyncWriteHandler());
        }
    } ##FSTMerge## protected void start() {
        if (!started.getAndSet(true)) {
            broadcasterCache = bc.getBroadcasterCache();
            broadcasterCache.start();

            setID(name);
            notifierFuture = bc.getExecutorService().submit(getBroadcastHandler());
            asyncWriteFuture = bc.getAsyncWriteService().submit(getAsyncWriteHandler());
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void push(Entry entry) {

        if (destroyed.get()) {
            return;
        }

        recentActivity.set(true);

        String prevMessage = entry.message.toString();
        if (!delayedBroadcast.isEmpty()) {
            Iterator<Entry> i = delayedBroadcast.iterator();
            StringBuilder b = new StringBuilder();
            while (i.hasNext()) {
                Entry e = i.next();
                e.future.cancel(true);
                try {
                    // Append so we do a single flush
                    if (e.message instanceof String
                            && entry.message instanceof String) {
                        b.append(e.message);
                    } else {
                        push(e);
                    }
                } finally {
                    i.remove();
                }
            }

            if (b.length() > 0) {
                entry.message = b.append(entry.message).toString();
            }
        }

        Object finalMsg = translate(entry.message);
        entry.originalMessage = (entry.originalMessage != entry.message ? translate(entry.originalMessage) : finalMsg);
        entry.message = finalMsg;

        if (resources.isEmpty()) {
            logger.debug("Broadcaster {} doesn't have any associated resource", getID());

            AtmosphereResource<?,?> r = null;
            if (entry.multipleAtmoResources != null && AtmosphereResource.class.isAssignableFrom(entry.multipleAtmoResources.getClass())) {
                r = AtmosphereResource.class.cast(entry.multipleAtmoResources);
            }
            trackBroadcastMessage(r, cacheStrategy == BroadcasterCache.STRATEGY.AFTER_FILTER ? entry.message : entry.originalMessage);

            if (entry.future != null) {
                entry.future.done();
            }
            return;
        }

        try {
            if (entry.multipleAtmoResources == null) {
                for (AtmosphereResource<?, ?> r : resources) {
                    finalMsg = perRequestFilter(r, entry);

                    if (finalMsg == null) {
                        logger.debug("Skipping broadcast delivery resource {} ", r);
                        continue;
                    }

                    if (entry.writeLocally) {
                        queueWriteIO(r, finalMsg, entry);
                    }
                }
            } else if (entry.multipleAtmoResources instanceof AtmosphereResource<?, ?>) {
                finalMsg = perRequestFilter((AtmosphereResource<?, ?>) entry.multipleAtmoResources, entry);

                if (finalMsg == null) {
                    logger.debug("Skipping broadcast delivery resource {} ", entry.multipleAtmoResources);
                    return;
                }

                if (entry.writeLocally) {
                    queueWriteIO((AtmosphereResource<?, ?>) entry.multipleAtmoResources, finalMsg, entry);
                }
            } else if (entry.multipleAtmoResources instanceof Set) {
                Set<AtmosphereResource<?, ?>> sub = (Set<AtmosphereResource<?, ?>>) entry.multipleAtmoResources;
                for (AtmosphereResource<?, ?> r : sub) {
                    finalMsg = perRequestFilter(r, entry);

                    if (finalMsg == null) {
                        logger.debug("Skipping broadcast delivery resource {} ", r);
                        continue;
                    }

                    if (entry.writeLocally) {
                        queueWriteIO(r, finalMsg, entry);
                    }
                }
            }
            entry.message = prevMessage;
        } catch (InterruptedException ex) {
            logger.debug(ex.getMessage(), ex);
        }
    } ##FSTMerge## protected void push(Entry entry) {

        if (destroyed.get()) {
            return;
        }

        String prevMessage = entry.message.toString();
        if (!delayedBroadcast.isEmpty()) {
            Iterator<Entry> i = delayedBroadcast.iterator();
            StringBuilder b = new StringBuilder();
            while (i.hasNext()) {
                Entry e = i.next();
                e.future.cancel(true);
                try {
                    // Append so we do a single flush
                    if (e.message instanceof String
                            && entry.message instanceof String) {
                        b.append(e.message);
                    } else {
                        push(e);
                    }
                } finally {
                    i.remove();
                }
            }

            if (b.length() > 0) {
                entry.message = b.append(entry.message).toString();
            }
        }

        if (resources.isEmpty()) {
            logger.debug("Broadcaster {} doesn't have any associated resource", getID());
            trackBroadcastMessage(null, entry.message);
            if (entry.future != null) {
                entry.future.done();
            }
            return;
        }

        Object finalMsg = translate(entry.message);
        entry.message = finalMsg;
        try {
            if (entry.multipleAtmoResources == null) {
                for (AtmosphereResource<?, ?> r : resources) {
                    finalMsg = perRequestFilter(r, entry);

                    if (finalMsg == null) {
                        logger.debug("Skipping broadcast delivery resource {} ", r);
                        continue;
                    }

                    if (entry.writeLocally) {
                        queueWriteIO(r, finalMsg, entry);
                    }
                }
            } else if (entry.multipleAtmoResources instanceof AtmosphereResource<?, ?>) {
                finalMsg = perRequestFilter((AtmosphereResource<?, ?>) entry.multipleAtmoResources, entry);

                if (finalMsg == null) {
                    logger.debug("Skipping broadcast delivery resource {} ", entry.multipleAtmoResources);
                    return;
                }

                if (entry.writeLocally) {
                    queueWriteIO((AtmosphereResource<?, ?>) entry.multipleAtmoResources, finalMsg, entry);
                }
            } else if (entry.multipleAtmoResources instanceof Set) {
                Set<AtmosphereResource<?, ?>> sub = (Set<AtmosphereResource<?, ?>>) entry.multipleAtmoResources;
                for (AtmosphereResource<?, ?> r : sub) {
                    finalMsg = perRequestFilter(r, entry);

                    if (finalMsg == null) {
                        logger.debug("Skipping broadcast delivery resource {} ", r);
                        continue;
                    }

                    if (entry.writeLocally) {
                        queueWriteIO(r, finalMsg, entry);
                    }
                }
            }
            entry.message = prevMessage;
        } catch (InterruptedException ex) {
            logger.debug(ex.getMessage(), ex);
        }
    } ##FSTMerge## protected void push(Entry entry) {

        if (destroyed.get()) {
            return;
        }

        recentActivity.set(true);

        String prevMessage = entry.message.toString();
        if (!delayedBroadcast.isEmpty()) {
            Iterator<Entry> i = delayedBroadcast.iterator();
            StringBuilder b = new StringBuilder();
            while (i.hasNext()) {
                Entry e = i.next();
                e.future.cancel(true);
                try {
                    // Append so we do a single flush
                    if (e.message instanceof String
                            && entry.message instanceof String) {
                        b.append(e.message);
                    } else {
                        push(e);
                    }
                } finally {
                    i.remove();
                }
            }

            if (b.length() > 0) {
                entry.message = b.append(entry.message).toString();
            }
        }

        Object finalMsg = translate(entry.message);

        if (finalMsg == null) {
            logger.trace("Broascast message was null {}", finalMsg);
            return;
        }

        Object prevM = entry.originalMessage;
        entry.originalMessage = (entry.originalMessage != entry.message ? translate(entry.originalMessage) : finalMsg);

        if (entry.originalMessage == null) {
            logger.trace("Broascast message was null {}", prevM);
            return;
        }

        entry.message = finalMsg;

        if (resources.isEmpty()) {
            logger.debug("Broadcaster {} doesn't have any associated resource", getID());

            AtmosphereResource<?, ?> r = null;
            if (entry.multipleAtmoResources != null && AtmosphereResource.class.isAssignableFrom(entry.multipleAtmoResources.getClass())) {
                r = AtmosphereResource.class.cast(entry.multipleAtmoResources);
            }
            trackBroadcastMessage(r, cacheStrategy == BroadcasterCache.STRATEGY.AFTER_FILTER ? entry.message : entry.originalMessage);

            if (entry.future != null) {
                entry.future.done();
            }
            return;
        }

        try {
            if (entry.multipleAtmoResources == null) {
                for (AtmosphereResource<?, ?> r : resources) {
                    finalMsg = perRequestFilter(r, entry);

                    if (finalMsg == null) {
                        logger.debug("Skipping broadcast delivery resource {} ", r);
                        continue;
                    }

                    if (entry.writeLocally) {
                        queueWriteIO(r, finalMsg, entry);
                    }
                }
            } else if (entry.multipleAtmoResources instanceof AtmosphereResource<?, ?>) {
                finalMsg = perRequestFilter((AtmosphereResource<?, ?>) entry.multipleAtmoResources, entry);

                if (finalMsg == null) {
                    logger.debug("Skipping broadcast delivery resource {} ", entry.multipleAtmoResources);
                    return;
                }

                if (entry.writeLocally) {
                    queueWriteIO((AtmosphereResource<?, ?>) entry.multipleAtmoResources, finalMsg, entry);
                }
            } else if (entry.multipleAtmoResources instanceof Set) {
                Set<AtmosphereResource<?, ?>> sub = (Set<AtmosphereResource<?, ?>>) entry.multipleAtmoResources;
                for (AtmosphereResource<?, ?> r : sub) {
                    finalMsg = perRequestFilter(r, entry);

                    if (finalMsg == null) {
                        logger.debug("Skipping broadcast delivery resource {} ", r);
                        continue;
                    }

                    if (entry.writeLocally) {
                        queueWriteIO(r, finalMsg, entry);
                    }
                }
            }
            entry.message = prevMessage;
        } catch (InterruptedException ex) {
            logger.debug(ex.getMessage(), ex);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void queueWriteIO(AtmosphereResource<?, ?> r, Object finalMsg, Entry entry) throws InterruptedException {
        asyncWriteQueue.put(new AsyncWriteToken(r, finalMsg, entry.future, entry.originalMessage));
    } ##FSTMerge## protected void queueWriteIO(AtmosphereResource<?, ?> r, Object finalMsg, Entry entry) throws InterruptedException {
        asyncWriteQueue.put(new AsyncWriteToken(r, finalMsg, entry.future));
    } ##FSTMerge## protected void queueWriteIO(AtmosphereResource<?, ?> r, Object finalMsg, Entry entry) throws InterruptedException {
        asyncWriteQueue.put(new AsyncWriteToken(r, finalMsg, entry.future, entry.originalMessage));
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected Object perRequestFilter(AtmosphereResource<?, ?> r, Entry msg) {
        Object finalMsg = msg.message;

        if (AtmosphereResourceImpl.class.isAssignableFrom(r.getClass())) {
            if (AtmosphereResourceImpl.class.cast(r).isInScope()) {
                if (r.getRequest() instanceof HttpServletRequest && bc.hasPerRequestFilters()) {
                    Object message = msg.originalMessage;
                    BroadcastAction a = bc.filter((HttpServletRequest) r.getRequest(), (HttpServletResponse) r.getResponse(), message);
                    if (a.action() == BroadcastAction.ACTION.ABORT) {
                        return null;
                    }
                    if (a.message() != msg.originalMessage) {
                        finalMsg = a.message();
                    }
                }

                if (cacheStrategy == BroadcasterCache.STRATEGY.AFTER_FILTER) {
                    trackBroadcastMessage(r, finalMsg);
                }
            } else {
                // The resource is no longer valid.
                removeAtmosphereResource(r);
                BroadcasterFactory.getDefault().removeAllAtmosphereResource(r);
            }

        }
        return finalMsg;
    } ##FSTMerge## protected Object perRequestFilter(AtmosphereResource<?, ?> r, Entry msg) {
        Object finalMsg = msg.message;

        if (AtmosphereResourceImpl.class.isAssignableFrom(r.getClass())) {
            if (AtmosphereResourceImpl.class.cast(r).isInScope()) {
                if (r.getRequest() instanceof HttpServletRequest && bc.hasPerRequestFilters()) {
                    Object message = msg.originalMessage;
                    BroadcastAction a = bc.filter((HttpServletRequest) r.getRequest(), (HttpServletResponse) r.getResponse(), message);
                    if (a.action() == BroadcastAction.ACTION.ABORT) {
                        return null;
                    }
                    if (a.message() != msg.originalMessage) {
                        finalMsg = a.message();
                    }
                }
                trackBroadcastMessage(r, finalMsg);
            } else {
                // The resource is no longer valid.
                removeAtmosphereResource(r);
                BroadcasterFactory.getDefault().removeAllAtmosphereResource(r);
            }

        }
        return finalMsg;
    } ##FSTMerge## protected Object perRequestFilter(AtmosphereResource<?, ?> r, Entry msg) {
        Object finalMsg = msg.message;

        if (AtmosphereResourceImpl.class.isAssignableFrom(r.getClass())) {
            if (AtmosphereResourceImpl.class.cast(r).isInScope()) {
                if (r.getRequest() instanceof HttpServletRequest && bc.hasPerRequestFilters()) {
                    Object message = msg.originalMessage;
                    BroadcastAction a = bc.filter((HttpServletRequest) r.getRequest(), (HttpServletResponse) r.getResponse(), message);
                    if (a.action() == BroadcastAction.ACTION.ABORT) {
                        return null;
                    }
                    if (a.message() != msg.originalMessage) {
                        finalMsg = a.message();
                    }
                }

                if (cacheStrategy == BroadcasterCache.STRATEGY.AFTER_FILTER) {
                    trackBroadcastMessage(r, finalMsg);
                }
            } else {
                // The resource is no longer valid.
                removeAtmosphereResource(r);
                BroadcasterFactory.getDefault().removeAllAtmosphereResource(r);
            }

        }
        return finalMsg;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void executeAsyncWrite(final AsyncWriteToken token) {
        boolean notifyListeners = true;
        boolean lostCandidate = false;

        try {
            final AtmosphereResourceEventImpl event = (AtmosphereResourceEventImpl) token.resource.getAtmosphereResourceEvent();
            event.setMessage(token.msg);

            // Check again to make sure we are still valid. Remove and silently ignore.
            if (!AtmosphereResourceImpl.class.cast(token.resource).isInScope()) {
                resources.remove(token.resource);
                lostCandidate = true;
                return;
            }

            try {
                HttpServletRequest.class.cast(token.resource.getRequest())
                        .setAttribute(MAX_INACTIVE, System.currentTimeMillis());
            } catch (Throwable t) {
                logger.error("Invalid AtmosphereResource state {}", event);
                logger.error("If you are using Tomcat 7.0.22 and lower, your most probably hitting http://is.gd/NqicFT");
                logger.error("", t);
                // The Request/Response associated with the AtmosphereResource has already been written and commited
                removeAtmosphereResource(token.resource);
                BroadcasterFactory.getDefault().removeAllAtmosphereResource(token.resource);
                event.setCancelled(true);
                event.setThrowable(t);
                lostCandidate = true;
                return;
            }

            HttpServletRequest.class.cast(token.resource.getRequest()).setAttribute(ASYNC_TOKEN, token);
            broadcast(token.resource, event);
        } finally {
            if (notifyListeners) {
                token.resource.notifyListeners();
            }

            if (token.future != null) {
                token.future.done();
            }

            if (lostCandidate) {
                cacheLostMessage(token.resource);
            }
        }
    } ##FSTMerge## ##FSTMerge## protected void executeAsyncWrite(final AsyncWriteToken token) {
        boolean notifyListeners = true;
        boolean lostCandidate = false;

        final AtmosphereResourceEventImpl event = (AtmosphereResourceEventImpl) token.resource.getAtmosphereResourceEvent();
        try {
            event.setMessage(token.msg);

            // Check again to make sure we are still valid. Remove and silently ignore.
            if (!AtmosphereResourceImpl.class.cast(token.resource).isInScope()) {
                resources.remove(token.resource);
                lostCandidate = true;
                return;
            }

            try {
                HttpServletRequest.class.cast(token.resource.getRequest())
                        .setAttribute(MAX_INACTIVE, System.currentTimeMillis());
            } catch (Throwable t) {
                logger.error("Invalid AtmosphereResource state {}", event);
                logger.error("If you are using Tomcat 7.0.22 and lower, your most probably hitting http://is.gd/NqicFT");
                logger.error("", t);
                // The Request/Response associated with the AtmosphereResource has already been written and commited
                removeAtmosphereResource(token.resource);
                BroadcasterFactory.getDefault().removeAllAtmosphereResource(token.resource);
                event.setCancelled(true);
                event.setThrowable(t);
                lostCandidate = true;
                return;
            }

            HttpServletRequest.class.cast(token.resource.getRequest()).setAttribute(ASYNC_TOKEN, token);
            broadcast(token.resource, event);
        } finally {
            if (notifyListeners) {
                token.resource.notifyListeners();
            }

            if (token.future != null) {
                token.future.done();
            }

            if (lostCandidate) {
                cacheLostMessage(token.resource);
            }
            token.destroy();
            event.setMessage(null);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected Runnable getAsyncWriteHandler() {
        return new Runnable() {
            public void run() {
                AsyncWriteToken token = null;
                try {
                    token = asyncWriteQueue.poll(10, TimeUnit.SECONDS);
                    if (token == null) {
                        if (!destroyed.get()) {
                            bc.getAsyncWriteService().submit(this);
                        }
                        return;
                    }

                    synchronized (token.resource) {
                        // We want this thread to wait for the write operation to happens to kept the order
                        bc.getAsyncWriteService().submit(this);

                        // If the resource is no longer in scope, skip the processing.
                        if (AtmosphereResourceImpl.class.cast(token.resource).isInScope()) {
                            executeAsyncWrite(token);
                        }
                    }
                } catch (InterruptedException ex) {
                    return;
                } catch (Throwable ex) {
                    if (!started.get() || destroyed.get()) {
                        logger.trace("Failed to execute a write operation. Broadcaster is destroyed or not yet started for Broadcaster {}", getID(), ex);
                        return;
                    } else {
                        if (token != null) {
                            logger.warn("This message {} will be lost, adding it to the BroadcasterCache", token.msg);
                            cacheLostMessage(token.resource);
                        }

                        logger.debug("Failed to execute a write operation for Broadcaster {}", getID(), ex);
                    }
                }
            }
        };
    } ##FSTMerge## protected Runnable getAsyncWriteHandler() {
        return new Runnable() {
            public void run() {
                AsyncWriteToken token = null;
                try {
                    token = asyncWriteQueue.take();
                    synchronized (token.resource) {

                        // We want this thread to wait for the write operation to happens to kept the order
                        bc.getAsyncWriteService().submit(this);

                        // If the resource is no longer in scope, skip the processing.
                        if (AtmosphereResourceImpl.class.cast(token.resource).isInScope()) {
                            executeAsyncWrite(token.resource, token.msg, token.future);
                        }
                    }
                } catch (Throwable ex) {
                    if (!started.get() || destroyed.get()) {
                        logger.trace("Failed to execute a write operation. Broadcaster is destroyed or not yet started for Broadcaster {}", getID(), ex);
                    } else {
                        logger.warn("This message {} will be lost", token.msg);
                        logger.debug("Failed to execute a write operation for Broadcaster {}", getID(), ex);
                    }
                }
            }
        };
    } ##FSTMerge## protected Runnable getAsyncWriteHandler() {
        return new Runnable() {
            public void run() {
                AsyncWriteToken token = null;
                try {
                    token = asyncWriteQueue.poll(10, TimeUnit.SECONDS);
                    if (token == null) {
                        if (!destroyed.get()) {
                            bc.getAsyncWriteService().submit(this);
                        }
                        return;
                    }

                    synchronized (token.resource) {
                        // We want this thread to wait for the write operation to happens to kept the order
                        bc.getAsyncWriteService().submit(this);

                        // If the resource is no longer in scope, skip the processing.
                        if (AtmosphereResourceImpl.class.cast(token.resource).isInScope()) {
                            executeAsyncWrite(token);
                        }
                    }
                } catch (InterruptedException ex) {
                    return;
                } catch (Throwable ex) {
                    if (!started.get() || destroyed.get()) {
                        logger.trace("Failed to execute a write operation. Broadcaster is destroyed or not yet started for Broadcaster {}", getID(), ex);
                        return;
                    } else {
                        if (token != null) {
                            logger.warn("This message {} will be lost, adding it to the BroadcasterCache", token.msg);
                            cacheLostMessage(token.resource);
                        }

                        logger.debug("Failed to execute a write operation for Broadcaster {}", getID(), ex);
                    }
                }
            }
        };
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void onException(Throwable t, final AtmosphereResource<?, ?> r) {
        logger.debug("onException()", t);

        // Remove to prevent other broadcast to re-use it.
        removeAtmosphereResource(r);

        final AtmosphereResourceEventImpl event = (AtmosphereResourceEventImpl) r.getAtmosphereResourceEvent();
        event.setThrowable(t);

        r.notifyListeners(event);
        r.removeEventListeners();

        /**
         * Make sure we resume the connection on every IOException.
         */
        if (bc != null && bc.getAsyncWriteService() != null) {
            bc.getAsyncWriteService().execute(new Runnable() {
                @Override
                public void run() {
                    try {
                        r.resume();
                    } catch (Throwable t) {
                        logger.trace("Was unable to resume a corrupted AtmosphereResource {}", r);
                        logger.trace("Cause", t);
                    }
                }
            });
        } else {
            r.resume();
        }
        cacheLostMessage(r);
    } ##FSTMerge## protected void onException(Throwable t, final AtmosphereResource<?, ?> r) {
        logger.debug("onException()", t);

        // Remove to prevent other broadcast to re-use it.
        removeAtmosphereResource(r);

        final AtmosphereResourceEventImpl event = (AtmosphereResourceEventImpl) r.getAtmosphereResourceEvent();
        event.setThrowable(t);

        r.notifyListeners(event);
        r.removeEventListeners();

        /**
         * Make sure we resume the connection on every IOException.
         */
        bc.getAsyncWriteService().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    r.resume();
                } catch (Throwable t) {
                    logger.warn("Was unable to resume a corrupted AtmosphereResource {}", r);
                    logger.warn("Cause", t);
                }
            }
        });

    } ##FSTMerge## public void onException(Throwable t, final AtmosphereResource<?, ?> r) {
        logger.debug("onException()", t);

        // Remove to prevent other broadcast to re-use it.
        removeAtmosphereResource(r);

        final AtmosphereResourceEventImpl event = (AtmosphereResourceEventImpl) r.getAtmosphereResourceEvent();
        event.setThrowable(t);

        r.notifyListeners(event);
        r.removeEventListeners();

        /**
         * Make sure we resume the connection on every IOException.
         */
        if (bc != null && bc.getAsyncWriteService() != null) {
            bc.getAsyncWriteService().execute(new Runnable() {
                @Override
                public void run() {
                    try {
                        r.resume();
                    } catch (Throwable t) {
                        logger.trace("Was unable to resume a corrupted AtmosphereResource {}", r);
                        logger.trace("Cause", t);
                    }
                }
            });
        } else {
            r.resume();
        }
        cacheLostMessage(r);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void cacheLostMessage(AtmosphereResource<?, ?> r) {
        try {
            AsyncWriteToken token = (AsyncWriteToken) HttpServletRequest.class.cast(r.getRequest()).getAttribute(ASYNC_TOKEN);
            if (token != null && token.originalMessage != null) {
                Object m = cacheStrategy.equals(BroadcasterCache.STRATEGY.BEFORE_FILTER) ? token.originalMessage : token.msg;
                broadcasterCache.addToCache(token.resource, m);
                logger.trace("Lost message cached {}", m);
            }
        } catch (Throwable t2) {
            logger.trace("Unable to cache message", t2);
        }
    } ##FSTMerge## ##FSTMerge## public void cacheLostMessage(AtmosphereResource<?, ?> r) {
        try {
            AsyncWriteToken token = (AsyncWriteToken) HttpServletRequest.class.cast(r.getRequest()).getAttribute(ASYNC_TOKEN);
            if (token != null && token.originalMessage != null) {
                Object m = cacheStrategy.equals(BroadcasterCache.STRATEGY.BEFORE_FILTER) ? token.originalMessage : token.msg;
                broadcasterCache.addToCache(token.resource, m);
                logger.trace("Lost message cached {}", m);
            }
        } catch (Throwable t2) {
            logger.trace("Unable to cache message", t2);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public AtmosphereResource<?, ?> removeAtmosphereResource(AtmosphereResource r) {

        if (destroyed.get()) {
            logger.debug(DESTROYED, getID(), "removeAtmosphereResource(AtmosphereResource r)");
            return r;
        }

        if (!resources.contains(r)) {
            return null;
        }
        // Prevent two thread to mix operation
        boolean removed = resources.remove(r);

        if (removed) {
            // Will help preventing OOM.
            if (resources.isEmpty()) {
                notifyEmptyListener();
                if (scope != SCOPE.REQUEST && lifeCyclePolicy.getLifeCyclePolicy() == EMPTY) {
                    releaseExternalResources();
                } else if (scope == SCOPE.REQUEST || lifeCyclePolicy.getLifeCyclePolicy() == EMPTY_DESTROY) {
                    BroadcasterFactory.getDefault().remove(this, name);
                    destroy();
                }
            }
        }
        return r;
    } ##FSTMerge## @Override
    public AtmosphereResource<?, ?> removeAtmosphereResource(AtmosphereResource r) {

        if (destroyed.get()) {
            logger.debug(DESTROYED, getID(), "removeAtmosphereResource(AtmosphereResource r)");
            return r;
        }

        if (!resources.contains(r)) {
            return null;
        }
        // Prevent two thread to mix operation
        boolean removed = resources.remove(r);

        if (removed) {
            // Will help preventing OOM.
            if (resources.isEmpty()) {
                notifyEmptyListener();
                if (scope != SCOPE.REQUEST && lifeCyclePolicy.getLifeCyclePolicy() == EMPTY) {
                    releaseExternalResources();
                } else if (lifeCyclePolicy.getLifeCyclePolicy() == EMPTY_DESTROY) {
                    notifyDestroyListener();
                    BroadcasterFactory.getDefault().remove(this, name);
                    destroy();
                }
            }
        }
        return r;
    } ##FSTMerge## @Override
    public AtmosphereResource<?, ?> removeAtmosphereResource(AtmosphereResource r) {

        if (destroyed.get()) {
            logger.debug(DESTROYED, getID(), "removeAtmosphereResource(AtmosphereResource r)");
            return r;
        }

        if (!resources.contains(r)) {
            return null;
        }
        // Prevent two thread to mix operation
        boolean removed = resources.remove(r);

        if (removed) {
            // Will help preventing OOM.
            if (resources.isEmpty()) {
                notifyEmptyListener();
                if (scope != SCOPE.REQUEST && lifeCyclePolicy.getLifeCyclePolicy() == EMPTY) {
                    releaseExternalResources();
                } else if (scope == SCOPE.REQUEST || lifeCyclePolicy.getLifeCyclePolicy() == EMPTY_DESTROY) {
                    BroadcasterFactory.getDefault().remove(this, name);
                    destroy();
                }
            }
        }
        return r;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected final static ##FSTMerge## private final static ##FSTMerge## protected final static
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ final Object originalMessage; ##FSTMerge## ##FSTMerge## Object originalMessage;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public AsyncWriteToken(AtmosphereResource<?, ?> resource, Object msg, BroadcasterFuture future, Object originalMessage) {
            this.resource = resource;
            this.msg = msg;
            this.future = future;
            this.originalMessage = originalMessage;
        } ##FSTMerge## ##FSTMerge## public AsyncWriteToken(AtmosphereResource<?, ?> resource, Object msg, BroadcasterFuture future, Object originalMessage) {
            this.resource = resource;
            this.msg = msg;
            this.future = future;
            this.originalMessage = originalMessage;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void forceDestroy() {
        destroy(true);
    } ##FSTMerge## public void forceDestroy(){
        destroy(true);
    } ##FSTMerge## public void forceDestroy() {
        destroy(true);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public BroadcasterConfig setBroadcasterCache(BroadcasterCache broadcasterCache) {
        this.broadcasterCache = broadcasterCache;
        if (BroadcasterCacheBase.class.isAssignableFrom(broadcasterCache.getClass())) {
            BroadcasterCacheBase.class.cast(broadcasterCache).setExecutorService(getScheduledExecutorService());
        }
        return this;
    } ##FSTMerge## public BroadcasterConfig setBroadcasterCache(BroadcasterCache broadcasterCache) {
        this.broadcasterCache = broadcasterCache;
        return this;
    } ##FSTMerge## public BroadcasterConfig setBroadcasterCache(BroadcasterCache broadcasterCache) {
        this.broadcasterCache = broadcasterCache;
        if (BroadcasterCacheBase.class.isAssignableFrom(broadcasterCache.getClass())) {
            BroadcasterCacheBase.class.cast(broadcasterCache).setExecutorService(getScheduledExecutorService());
        }
        return this;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public ##FSTMerge## ##FSTMerge## public
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public String mapping; ##FSTMerge## ##FSTMerge## public String mapping;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public AtmosphereHandlerWrapper(AtmosphereHandler atmosphereHandler, String mapping) {
            this.atmosphereHandler = atmosphereHandler;
            try {
                if (BroadcasterFactory.getDefault() != null) {
                    this.broadcaster = BroadcasterFactory.getDefault().get(mapping);
                } else {
                    this.mapping = mapping;
                }
            } catch (Exception t) {
                throw new RuntimeException(t);
            }
        } ##FSTMerge## public AtmosphereHandlerWrapper(AtmosphereHandler atmosphereHandler, String mapping) {
            this.atmosphereHandler = atmosphereHandler;
            try {
                broadcaster = BroadcasterFactory.getDefault().get(mapping);
            } catch (Exception t) {
                throw new RuntimeException(t);
            }
        } ##FSTMerge## public AtmosphereHandlerWrapper(AtmosphereHandler atmosphereHandler, String mapping) {
            this.atmosphereHandler = atmosphereHandler;
            try {
                if (BroadcasterFactory.getDefault() != null) {
                    this.broadcaster = BroadcasterFactory.getDefault().get(mapping);
                } else {
                    this.mapping = mapping;
                }
            } catch (Exception t) {
                throw new RuntimeException(t);
            }
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private void addMapping(String path, AtmosphereHandlerWrapper w) {
        // We are using JAXRS mapping algorithm.

        if (path.contains("*")) {
            path = path.replace("*", "[/a-zA-Z0-9-&=;\\?]+");
        }
        atmosphereHandlers.put(path, w);
    } ##FSTMerge## private void addMapping(String path, AtmosphereHandlerWrapper w) {
        // We are using JAXRS mapping algorithm.
        if (path.contains("*")) {
            path = path.replace("*", "[/a-zA-Z0-9-&=;\\?]+");
        }
        atmosphereHandlers.put(path, w);

    } ##FSTMerge## private void addMapping(String path, AtmosphereHandlerWrapper w) {
        atmosphereHandlers.put(path, w);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void configureWebDotXmlAtmosphereHandler(ServletConfig sc) {
        String s = sc.getInitParameter(ATMOSPHERE_HANDLER);
        if (s != null) {
            ClassLoader cl = Thread.currentThread().getContextClassLoader();
            try {

                String mapping = sc.getInitParameter(ATMOSPHERE_HANDLER_MAPPING);
                if (mapping == null) {
                    mapping = "/*";
                }
                addAtmosphereHandler(mapping, (AtmosphereHandler<?, ?>) cl.loadClass(s).newInstance());
            } catch (Exception ex) {
                logger.warn("Unable to load WebSocketHandle instance", ex);
            }
        }
    } ##FSTMerge## protected void configureWebDotXmlAtmosphereHandler(ServletConfig sc) {
        String s = sc.getInitParameter(ATMOSPHERE_HANDLER);
        if (s != null) {
            ClassLoader cl = Thread.currentThread().getContextClassLoader();
            try {
                addAtmosphereHandler("/*", (AtmosphereHandler<?, ?>) cl.loadClass(s).newInstance());
            } catch (Exception ex) {
                logger.warn("Unable to load WebSocketHandle instance", ex);
            }
        }
    } ##FSTMerge## protected void configureWebDotXmlAtmosphereHandler(ServletConfig sc) {
        String s = sc.getInitParameter(ATMOSPHERE_HANDLER);
        if (s != null) {
            ClassLoader cl = Thread.currentThread().getContextClassLoader();
            try {

                String mapping = sc.getInitParameter(ATMOSPHERE_HANDLER_MAPPING);
                if (mapping == null) {
                    mapping = "/*";
                }
                addAtmosphereHandler(mapping, (AtmosphereHandler<?, ?>) cl.loadClass(s).newInstance());
            } catch (Exception ex) {
                logger.warn("Unable to load WebSocketHandle instance", ex);
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void configureBroadcaster(ServletContext sc) throws ClassNotFoundException, InstantiationException, IllegalAccessException {

        if (broadcasterFactoryClassName != null) {
            broadcasterFactory = (BroadcasterFactory) Thread.currentThread().getContextClassLoader()
                    .loadClass(broadcasterFactoryClassName).newInstance();
        }

        if (broadcasterFactory == null) {
            Class<? extends Broadcaster> bc =
                    (Class<? extends Broadcaster>) Thread.currentThread().getContextClassLoader()
                            .loadClass(broadcasterClassName);

            logger.info("Using BroadcasterFactory class: {}", DefaultBroadcasterFactory.class.getName());

            broadcasterFactory = new DefaultBroadcasterFactory(bc, broadcasterLifeCyclePolicy, config);
        }

        // http://java.net/jira/browse/ATMOSPHERE-157
        if (sc != null) {
            sc.setAttribute(BroadcasterFactory.class.getName(), broadcasterFactory);
        }

        config.broadcasterFactory = broadcasterFactory;
        BroadcasterFactory.setBroadcasterFactory(broadcasterFactory, config);
        InjectorProvider.getInjector().inject(broadcasterFactory);

        Iterator<Entry<String, AtmosphereHandlerWrapper>> i = atmosphereHandlers.entrySet().iterator();
        AtmosphereHandlerWrapper w;
        Entry<String, AtmosphereHandlerWrapper> e;
        while (i.hasNext()) {
            e = i.next();
            w = e.getValue();
            BroadcasterConfig broadcasterConfig = new BroadcasterConfig(broadcasterFilters, config);

            if (w.broadcaster == null) {
                w.broadcaster = broadcasterFactory.get(w.mapping);
            } else {
                w.broadcaster.setBroadcasterConfig(broadcasterConfig);
                if (broadcasterCacheClassName != null) {
                    BroadcasterCache cache = (BroadcasterCache) Thread.currentThread().getContextClassLoader()
                            .loadClass(broadcasterCacheClassName).newInstance();
                    InjectorProvider.getInjector().inject(cache);
                    broadcasterConfig.setBroadcasterCache(cache);
                }
            }
        }
    } ##FSTMerge## protected void configureBroadcaster(ServletContext sc) throws ClassNotFoundException, InstantiationException, IllegalAccessException {

        if (broadcasterFactoryClassName != null) {
            broadcasterFactory = (BroadcasterFactory) Thread.currentThread().getContextClassLoader()
                    .loadClass(broadcasterFactoryClassName).newInstance();
        }

        if (broadcasterFactory == null) {
            Class<? extends Broadcaster> bc =
                    (Class<? extends Broadcaster>) Thread.currentThread().getContextClassLoader()
                            .loadClass(broadcasterClassName);

            logger.info("Using BroadcasterFactory class: {}", broadcasterFactoryClassName);

            broadcasterFactory = new DefaultBroadcasterFactory(bc, broadcasterLifeCyclePolicy, config);
        }

        // http://java.net/jira/browse/ATMOSPHERE-157
        sc.setAttribute(BroadcasterFactory.class.getName(), broadcasterFactory);

        config.broadcasterFactory = broadcasterFactory;
        BroadcasterFactory.setBroadcasterFactory(broadcasterFactory, config);
        InjectorProvider.getInjector().inject(broadcasterFactory);

        Iterator<Entry<String, AtmosphereHandlerWrapper>> i = atmosphereHandlers.entrySet().iterator();
        AtmosphereHandlerWrapper w;
        Entry<String, AtmosphereHandlerWrapper> e;
        while (i.hasNext()) {
            e = i.next();
            w = e.getValue();
            BroadcasterConfig broadcasterConfig = new BroadcasterConfig(broadcasterFilters, config);

            if (w.broadcaster == null) {
                w.broadcaster = broadcasterFactory.get();
            } else {
                w.broadcaster.setBroadcasterConfig(broadcasterConfig);
                if (broadcasterCacheClassName != null) {
                    BroadcasterCache cache = (BroadcasterCache) Thread.currentThread().getContextClassLoader()
                            .loadClass(broadcasterCacheClassName).newInstance();
                    InjectorProvider.getInjector().inject(cache);
                    broadcasterConfig.setBroadcasterCache(cache);
                }
            }
        }
    } ##FSTMerge## protected void configureBroadcaster(ServletContext sc) throws ClassNotFoundException, InstantiationException, IllegalAccessException {

        if (broadcasterFactoryClassName != null) {
            broadcasterFactory = (BroadcasterFactory) Thread.currentThread().getContextClassLoader()
                    .loadClass(broadcasterFactoryClassName).newInstance();
        }

        if (broadcasterFactory == null) {
            Class<? extends Broadcaster> bc =
                    (Class<? extends Broadcaster>) Thread.currentThread().getContextClassLoader()
                            .loadClass(broadcasterClassName);

            logger.info("Using BroadcasterFactory class: {}", DefaultBroadcasterFactory.class.getName());

            broadcasterFactory = new DefaultBroadcasterFactory(bc, broadcasterLifeCyclePolicy, config);
        }

        // http://java.net/jira/browse/ATMOSPHERE-157
        if (sc != null) {
            sc.setAttribute(BroadcasterFactory.class.getName(), broadcasterFactory);
        }

        config.broadcasterFactory = broadcasterFactory;
        BroadcasterFactory.setBroadcasterFactory(broadcasterFactory, config);
        InjectorProvider.getInjector().inject(broadcasterFactory);

        Iterator<Entry<String, AtmosphereHandlerWrapper>> i = atmosphereHandlers.entrySet().iterator();
        AtmosphereHandlerWrapper w;
        Entry<String, AtmosphereHandlerWrapper> e;
        while (i.hasNext()) {
            e = i.next();
            w = e.getValue();
            BroadcasterConfig broadcasterConfig = new BroadcasterConfig(broadcasterFilters, config);

            if (w.broadcaster == null) {
                w.broadcaster = broadcasterFactory.get(w.mapping);
            } else {
                w.broadcaster.setBroadcasterConfig(broadcasterConfig);
                if (broadcasterCacheClassName != null) {
                    BroadcasterCache cache = (BroadcasterCache) Thread.currentThread().getContextClassLoader()
                            .loadClass(broadcasterCacheClassName).newInstance();
                    InjectorProvider.getInjector().inject(cache);
                    broadcasterConfig.setBroadcasterCache(cache);
                }
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected boolean detectSupportedFramework(ServletConfig sc) throws ClassNotFoundException, IllegalAccessException,
            InstantiationException, NoSuchMethodException, InvocationTargetException {

        ClassLoader cl = Thread.currentThread().getContextClassLoader();
        String broadcasterClassNameTmp = null;

        try {
            cl.loadClass(JERSEY_CONTAINER);

            if (!isBroadcasterSpecified) {
                broadcasterClassNameTmp = lookupDefaultBroadcasterType();

                cl.loadClass(broadcasterClassNameTmp);
            }
            useStreamForFlushingComments = true;
        } catch (Throwable t) {
            logger.trace("", t);
            return false;
        }

        logger.warn("Missing META-INF/atmosphere.xml but found the Jersey runtime. Starting Jersey");

        // Jersey will handle itself the headers.
        initParams.put(WRITE_HEADERS, "false");

        ReflectorServletProcessor rsp = new ReflectorServletProcessor();
        if (broadcasterClassNameTmp != null) broadcasterClassName = broadcasterClassNameTmp;
        rsp.setServletClassName(JERSEY_CONTAINER);
        sessionSupport(false);
        initParams.put(DISABLE_ONSTATE_EVENT, "true");

        String mapping = sc.getInitParameter(PROPERTY_SERVLET_MAPPING);
        if (mapping == null) {
            mapping = "/*";
        }
        Class<? extends Broadcaster> bc = (Class<? extends Broadcaster>) cl.loadClass(broadcasterClassName);

        broadcasterFactory.destroy();
        logger.info("Using BroadcasterFactory class: {}", DefaultBroadcasterFactory.class.getName());

        broadcasterFactory = new DefaultBroadcasterFactory(bc, broadcasterLifeCyclePolicy, config);
        Broadcaster b = BroadcasterFactory.getDefault().get(bc, mapping);

        addAtmosphereHandler(mapping, rsp, b);
        return true;
    } ##FSTMerge## protected boolean detectSupportedFramework(ServletConfig sc) throws ClassNotFoundException, IllegalAccessException,
            InstantiationException, NoSuchMethodException, InvocationTargetException {

        ClassLoader cl = Thread.currentThread().getContextClassLoader();
        String broadcasterClassNameTmp = null;

        try {
            cl.loadClass(JERSEY_CONTAINER);

            if (!isBroadcasterSpecified) {
                broadcasterClassNameTmp = lookupDefaultBroadcasterType();

                cl.loadClass(broadcasterClassNameTmp);
            }
            useStreamForFlushingComments = true;
        } catch (Throwable t) {
            return false;
        }

        logger.warn("Missing META-INF/atmosphere.xml but found the Jersey runtime. Starting Jersey");

        // Jersey will handle itself the headers.
        initParams.put(WRITE_HEADERS, "false");

        ReflectorServletProcessor rsp = new ReflectorServletProcessor();
        if (broadcasterClassNameTmp != null) broadcasterClassName = broadcasterClassNameTmp;
        rsp.setServletClassName(JERSEY_CONTAINER);
        sessionSupport(false);
        initParams.put(DISABLE_ONSTATE_EVENT, "true");

        String mapping = sc.getInitParameter(PROPERTY_SERVLET_MAPPING);
        if (mapping == null) {
            mapping = "/*";
        }
        Class<? extends Broadcaster> bc = (Class<? extends Broadcaster>) cl.loadClass(broadcasterClassName);

        Broadcaster b = BroadcasterFactory.getDefault().get(bc, mapping);

        addAtmosphereHandler(mapping, rsp, b);
        return true;
    } ##FSTMerge## protected boolean detectSupportedFramework(ServletConfig sc) throws ClassNotFoundException, IllegalAccessException,
            InstantiationException, NoSuchMethodException, InvocationTargetException {

        ClassLoader cl = Thread.currentThread().getContextClassLoader();
        String broadcasterClassNameTmp = null;

        try {
            cl.loadClass(JERSEY_CONTAINER);

            if (!isBroadcasterSpecified) {
                broadcasterClassNameTmp = lookupDefaultBroadcasterType();

                cl.loadClass(broadcasterClassNameTmp);
            }
            useStreamForFlushingComments = true;
        } catch (Throwable t) {
            logger.trace("", t);
            return false;
        }

        logger.warn("Missing META-INF/atmosphere.xml but found the Jersey runtime. Starting Jersey");

        // Jersey will handle itself the headers.
        initParams.put(WRITE_HEADERS, "false");

        ReflectorServletProcessor rsp = new ReflectorServletProcessor();
        if (broadcasterClassNameTmp != null) broadcasterClassName = broadcasterClassNameTmp;
        rsp.setServletClassName(JERSEY_CONTAINER);
        sessionSupport(false);
        initParams.put(DISABLE_ONSTATE_EVENT, "true");

        String mapping = sc.getInitParameter(PROPERTY_SERVLET_MAPPING);
        if (mapping == null) {
            mapping = "/*";
        }
        Class<? extends Broadcaster> bc = (Class<? extends Broadcaster>) cl.loadClass(broadcasterClassName);

        broadcasterFactory.destroy();
        logger.info("Using BroadcasterFactory class: {}", DefaultBroadcasterFactory.class.getName());

        broadcasterFactory = new DefaultBroadcasterFactory(bc, broadcasterLifeCyclePolicy, config);
        Broadcaster b = BroadcasterFactory.getDefault().get(bc, mapping);

        addAtmosphereHandler(mapping, rsp, b);
        return true;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void initAtmosphereHandler(ServletConfig sc) throws ServletException {
        AtmosphereHandler a;
        AtmosphereHandlerWrapper w;
        for (Entry<String, AtmosphereHandlerWrapper> h : atmosphereHandlers.entrySet()) {
            w = h.getValue();
            a = w.atmosphereHandler;
            if (a instanceof AtmosphereServletProcessor) {
                ((AtmosphereServletProcessor) a).init(sc);
            }
        }

        if (atmosphereHandlers.size() == 0 && !webSocketProtocolClassName.equalsIgnoreCase(SimpleHttpProtocol.class.getName())) {
            logger.debug("Adding a void AtmosphereHandler mapped to /* to allow WebSocket application only");
            addAtmosphereHandler("/*", new AbstractReflectorAtmosphereHandler() {
                @Override
                public void onRequest(AtmosphereResource<HttpServletRequest, HttpServletResponse> httpServletRequestHttpServletResponseAtmosphereResource) throws IOException {
                }

                @Override
                public void destroy() {
                }
            });
        }
    } ##FSTMerge## void initAtmosphereHandler(ServletConfig sc) throws ServletException {
        AtmosphereHandler a;
        for (Entry<String, AtmosphereHandlerWrapper> h : atmosphereHandlers.entrySet()) {
            a = h.getValue().atmosphereHandler;
            if (a instanceof AtmosphereServletProcessor) {
                ((AtmosphereServletProcessor) a).init(sc);
            }
        }
    } ##FSTMerge## void initAtmosphereHandler(ServletConfig sc) throws ServletException {
        AtmosphereHandler a;
        AtmosphereHandlerWrapper w;
        for (Entry<String, AtmosphereHandlerWrapper> h : atmosphereHandlers.entrySet()) {
            w = h.getValue();
            a = w.atmosphereHandler;
            if (a instanceof AtmosphereServletProcessor) {
                ((AtmosphereServletProcessor) a).init(sc);
            }
        }

        if (atmosphereHandlers.size() == 0 && !webSocketProtocolClassName.equalsIgnoreCase(SimpleHttpProtocol.class.getName())) {
            logger.debug("Adding a void AtmosphereHandler mapped to /* to allow WebSocket application only");
            addAtmosphereHandler("/*", new AbstractReflectorAtmosphereHandler() {
                @Override
                public void onRequest(AtmosphereResource<HttpServletRequest, HttpServletResponse> httpServletRequestHttpServletResponseAtmosphereResource) throws IOException {
                }

                @Override
                public void destroy() {
                }
            });
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void loadAtmosphereDotXml(InputStream stream, URLClassLoader c)
            throws IOException, ServletException {

        if (stream == null) {
            return;
        }

        AtmosphereConfigReader reader = new AtmosphereConfigReader(stream);

        Map<String, String> atmosphereHandlerNames = reader.getAtmosphereHandlers();
        Set<Entry<String, String>> entries = atmosphereHandlerNames.entrySet();
        for (Entry<String, String> entry : entries) {
            AtmosphereHandler handler;
            String handlerClassName = entry.getValue();
            String handlerPath = entry.getKey();

            try {
                if (!handlerClassName.equals(ReflectorServletProcessor.class.getName())) {
                    handler = (AtmosphereHandler) c.loadClass(handlerClassName).newInstance();
                    InjectorProvider.getInjector().inject(handler);
                } else {
                    handler = new ReflectorServletProcessor();
                }

                logger.info("Installed AtmosphereHandler {} mapped to context-path: {}", handler, handlerPath);

                boolean isJersey = false;
                for (Property p : reader.getProperty(handlerPath)) {
                    if (p.value != null && p.value.indexOf("jersey") != -1) {
                        isJersey = true;
                        initParams.put(DISABLE_ONSTATE_EVENT, "true");
                        useStreamForFlushingComments = true;
                        broadcasterClassName = lookupDefaultBroadcasterType();
                    }
                    IntrospectionUtils.setProperty(handler, p.name, p.value);
                }

                config.supportSession = !isJersey;

                if (!reader.supportSession().equals("")) {
                    sessionSupport(Boolean.valueOf(reader.supportSession()));
                }

                for (Property p : reader.getProperty(handlerPath)) {
                    IntrospectionUtils.addProperty(handler, p.name, p.value);
                }

                String broadcasterClass = reader.getBroadcasterClass(handlerPath);
                Broadcaster b;
                /**
                 * If there is more than one AtmosphereHandler defined, their Broadcaster
                 * may clash each other with the BroadcasterFactory. In that case we will use the
                 * last one defined.
                 */
                if (broadcasterClass != null) {
                    broadcasterClassName = broadcasterClass;
                    ClassLoader cl = Thread.currentThread().getContextClassLoader();
                    Class<? extends Broadcaster> bc = (Class<? extends Broadcaster>) cl.loadClass(broadcasterClassName);
                    broadcasterFactory = new DefaultBroadcasterFactory(bc, broadcasterLifeCyclePolicy, config);
                    BroadcasterFactory.setBroadcasterFactory(broadcasterFactory, config);
                }

                b = BroadcasterFactory.getDefault().get(handlerPath);

                AtmosphereHandlerWrapper wrapper = new AtmosphereHandlerWrapper(handler, b);
                addMapping(handlerPath, wrapper);

                String bc = reader.getBroadcasterCache(handlerPath);
                if (bc != null) {
                    broadcasterCacheClassName = bc;
                }

                if (reader.getCometSupportClass() != null) {
                    cometSupport = (CometSupport) c.loadClass(reader.getCometSupportClass())
                            .getDeclaredConstructor(new Class[]{AtmosphereConfig.class})
                            .newInstance(new Object[]{config});
                }

                if (reader.getBroadcastFilterClasses() != null) {
                    broadcasterFilters = reader.getBroadcastFilterClasses();
                }

            } catch (Throwable t) {
                logger.warn("unable to load AtmosphereHandler class: " + handlerClassName, t);
                throw new ServletException(t);
            }
        }
    } ##FSTMerge## protected void loadAtmosphereDotXml(InputStream stream, URLClassLoader c)
            throws IOException, ServletException {

        if (stream == null) {
            return;
        }

        AtmosphereConfigReader reader = new AtmosphereConfigReader(stream);

        Map<String, String> atmosphereHandlerNames = reader.getAtmosphereHandlers();
        Set<Entry<String, String>> entries = atmosphereHandlerNames.entrySet();
        for (Entry<String, String> entry : entries) {
            AtmosphereHandler handler;
            String handlerClassName = entry.getValue();
            String handlerPath = entry.getKey();

            try {
                if (!handlerClassName.equals(ReflectorServletProcessor.class.getName())) {
                    handler = (AtmosphereHandler) c.loadClass(handlerClassName).newInstance();
                    InjectorProvider.getInjector().inject(handler);
                } else {
                    handler = new ReflectorServletProcessor();
                }

                logger.info("Installed AtmosphereHandler {} mapped to context-path: {}", handler, handlerPath);

                AtmosphereHandlerWrapper wrapper = new AtmosphereHandlerWrapper(handler, handlerPath);
                addMapping(handlerPath, wrapper);
                boolean isJersey = false;
                for (Property p : reader.getProperty(handlerPath)) {
                    if (p.value != null && p.value.indexOf("jersey") != -1) {
                        isJersey = true;
                        initParams.put(DISABLE_ONSTATE_EVENT, "true");
                        useStreamForFlushingComments = true;
                        broadcasterClassName = lookupDefaultBroadcasterType();
                    }
                    IntrospectionUtils.setProperty(handler, p.name, p.value);
                }

                config.supportSession = !isJersey;

                if (!reader.supportSession().equals("")) {
                    sessionSupport(Boolean.valueOf(reader.supportSession()));
                }

                for (Property p : reader.getProperty(handlerPath)) {
                    IntrospectionUtils.addProperty(handler, p.name, p.value);
                }

                String broadcasterClass = reader.getBroadcasterClass(handlerPath);
                /**
                 * If there is more than one AtmosphereHandler defined, their Broadcaster
                 * may clash each other with the BroadcasterFactory. In that case we will use the
                 * last one defined.
                 */
                if (broadcasterClass != null) {
                    broadcasterClassName = broadcasterClass;
                    ClassLoader cl = Thread.currentThread().getContextClassLoader();
                    Class<? extends Broadcaster> bc = (Class<? extends Broadcaster>) cl.loadClass(broadcasterClassName);
                    wrapper.broadcaster = BroadcasterFactory.getDefault().get(bc, handlerPath);
                }

                String bc = reader.getBroadcasterCache(handlerPath);
                if (bc != null) {
                    broadcasterCacheClassName = bc;
                }

                if (reader.getCometSupportClass() != null) {
                    cometSupport = (CometSupport) c.loadClass(reader.getCometSupportClass())
                            .getDeclaredConstructor(new Class[]{AtmosphereConfig.class})
                            .newInstance(new Object[]{config});
                }

                if (reader.getBroadcastFilterClasses() != null) {
                    broadcasterFilters = reader.getBroadcastFilterClasses();
                }

            } catch (Throwable t) {
                logger.warn("unable to load AtmosphereHandler class: " + handlerClassName, t);
                throw new ServletException(t);
            }
        }
    } ##FSTMerge## protected void loadAtmosphereDotXml(InputStream stream, URLClassLoader c)
            throws IOException, ServletException {

        if (stream == null) {
            return;
        }

        AtmosphereConfigReader reader = new AtmosphereConfigReader(stream);

        Map<String, String> atmosphereHandlerNames = reader.getAtmosphereHandlers();
        Set<Entry<String, String>> entries = atmosphereHandlerNames.entrySet();
        for (Entry<String, String> entry : entries) {
            AtmosphereHandler handler;
            String handlerClassName = entry.getValue();
            String handlerPath = entry.getKey();

            try {
                if (!handlerClassName.equals(ReflectorServletProcessor.class.getName())) {
                    handler = (AtmosphereHandler) c.loadClass(handlerClassName).newInstance();
                    InjectorProvider.getInjector().inject(handler);
                } else {
                    handler = new ReflectorServletProcessor();
                }

                logger.info("Installed AtmosphereHandler {} mapped to context-path: {}", handler, handlerPath);

                boolean isJersey = false;
                for (Property p : reader.getProperty(handlerPath)) {
                    if (p.value != null && p.value.indexOf("jersey") != -1) {
                        isJersey = true;
                        initParams.put(DISABLE_ONSTATE_EVENT, "true");
                        useStreamForFlushingComments = true;
                        broadcasterClassName = lookupDefaultBroadcasterType();
                    }
                    IntrospectionUtils.setProperty(handler, p.name, p.value);
                }

                config.supportSession = !isJersey;

                if (!reader.supportSession().equals("")) {
                    sessionSupport(Boolean.valueOf(reader.supportSession()));
                }

                for (Property p : reader.getProperty(handlerPath)) {
                    IntrospectionUtils.addProperty(handler, p.name, p.value);
                }

                String broadcasterClass = reader.getBroadcasterClass(handlerPath);
                Broadcaster b;
                /**
                 * If there is more than one AtmosphereHandler defined, their Broadcaster
                 * may clash each other with the BroadcasterFactory. In that case we will use the
                 * last one defined.
                 */
                if (broadcasterClass != null) {
                    broadcasterClassName = broadcasterClass;
                    ClassLoader cl = Thread.currentThread().getContextClassLoader();
                    Class<? extends Broadcaster> bc = (Class<? extends Broadcaster>) cl.loadClass(broadcasterClassName);
                    broadcasterFactory = new DefaultBroadcasterFactory(bc, broadcasterLifeCyclePolicy, config);
                    BroadcasterFactory.setBroadcasterFactory(broadcasterFactory, config);
                }

                b = BroadcasterFactory.getDefault().get(handlerPath);

                AtmosphereHandlerWrapper wrapper = new AtmosphereHandlerWrapper(handler, b);
                addMapping(handlerPath, wrapper);

                String bc = reader.getBroadcasterCache(handlerPath);
                if (bc != null) {
                    broadcasterCacheClassName = bc;
                }

                if (reader.getCometSupportClass() != null) {
                    cometSupport = (CometSupport) c.loadClass(reader.getCometSupportClass())
                            .getDeclaredConstructor(new Class[]{AtmosphereConfig.class})
                            .newInstance(new Object[]{config});
                }

                if (reader.getBroadcastFilterClasses() != null) {
                    broadcasterFilters = reader.getBroadcastFilterClasses();
                }

            } catch (Throwable t) {
                logger.warn("unable to load AtmosphereHandler class: " + handlerClassName, t);
                throw new ServletException(t);
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Action doCometSupport(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {
        req.setAttribute(BROADCASTER_FACTORY, broadcasterFactory);
        req.setAttribute(PROPERTY_USE_STREAM, useStreamForFlushingComments);
        req.setAttribute(BROADCASTER_CLASS, broadcasterClassName);
        req.setAttribute(SUPPORT_TRACKABLE, config.getInitParameter(SUPPORT_TRACKABLE));

        try {
            if (config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST) != null
                    && (isIECandidate(req) || req.getParameter(HeaderConfig.JSONP_CALLBACK_NAME) != null)
                    && req.getAttribute(WebSocket.WEBSOCKET_SUSPEND) == null) {

                Map<String, String> headers = configureQueryStringAsRequest(req);
                String body = headers.remove(ATMOSPHERE_POST_BODY);
                return cometSupport.service(new AtmosphereRequest.Builder()
                        .headers(headers)
                        .method(body != null && req.getMethod().equalsIgnoreCase("GET") ? "POST" : req.getMethod())
                        .body(body)
                        .request(req).build(), res);
            } else {
                return cometSupport.service(req, res);
            }
        } catch (IllegalStateException ex) {
            if (ex.getMessage() != null && ex.getMessage().startsWith("Tomcat failed")) {
                if (!isFilter) {
                    logger.warn("Failed using comet support: {}, error: {} Is the Nio or Apr Connector enabled?", cometSupport.getClass().getName(),
                            ex.getMessage());
                    logger.warn("Using BlockingIOCometSupport.");
                }
                logger.trace(ex.getMessage(), ex);

                cometSupport = new BlockingIOCometSupport(config);
                service(req, res);
            } else {
                logger.error("AtmosphereServlet exception", ex);
                throw ex;
            }
        }
        return null;
    } ##FSTMerge## public Action doCometSupport(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {
        req.setAttribute(BROADCASTER_FACTORY, broadcasterFactory);
        req.setAttribute(PROPERTY_USE_STREAM, useStreamForFlushingComments);
        req.setAttribute(BROADCASTER_CLASS, broadcasterClassName);
        req.setAttribute(SUPPORT_TRACKABLE, config.getInitParameter(SUPPORT_TRACKABLE));

        try {
            if (config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST) != null
                    && isIECandidate(req)
                    && req.getAttribute(WebSocket.WEBSOCKET_SUSPEND) == null) {

                Map<String, String> headers = configureQueryStringAsRequest(req);
                String body = headers.remove(ATMOSPHERE_POST_BODY);
                return cometSupport.service(new AtmosphereRequest.Builder()
                        .headers(headers)
                        .method(body != null ? "POST" : "GET")
                        .body(body)
                        .request(req).build(), res);
            } else {
                return cometSupport.service(req, res);
            }
        } catch (IllegalStateException ex) {
            if (ex.getMessage() != null && ex.getMessage().startsWith("Tomcat failed")) {
                if (!isFilter) {
                    logger.warn("Failed using comet support: {}, error: {} Is the Nio or Apr Connector enabled?", cometSupport.getClass().getName(),
                            ex.getMessage());
                    logger.warn("Using BlockingIOCometSupport.");
                }
                logger.trace(ex.getMessage(), ex);

                cometSupport = new BlockingIOCometSupport(config);
                service(req, res);
            } else {
                logger.error("AtmosphereServlet exception", ex);
                throw ex;
            }
        }
        return null;
    } ##FSTMerge## public Action doCometSupport(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {
        req.setAttribute(BROADCASTER_FACTORY, broadcasterFactory);
        req.setAttribute(PROPERTY_USE_STREAM, useStreamForFlushingComments);
        req.setAttribute(BROADCASTER_CLASS, broadcasterClassName);
        req.setAttribute(SUPPORT_TRACKABLE, config.getInitParameter(SUPPORT_TRACKABLE));
        req.setAttribute(SUPPORT_LOCATION_HEADER, config.getInitParameter(SUPPORT_LOCATION_HEADER));

        AtmosphereRequest r  = null;
        Action a = null;
        try {
            if (config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST) != null
                    && (isIECandidate(req) || req.getParameter(HeaderConfig.JSONP_CALLBACK_NAME) != null)
                    && req.getAttribute(WebSocket.WEBSOCKET_SUSPEND) == null) {

                Map<String, String> headers = configureQueryStringAsRequest(req);
                String body = headers.remove(ATMOSPHERE_POST_BODY);
                r = new AtmosphereRequest.Builder()
                        .headers(headers)
                        .method(body != null && req.getMethod().equalsIgnoreCase("GET") ? "POST" : req.getMethod())
                        .body(body)
                        .request(req).build();

                a = cometSupport.service(r, res);
            } else {
                return cometSupport.service(req, res);
            }
        } catch (IllegalStateException ex) {
            if (ex.getMessage() != null && ex.getMessage().startsWith("Tomcat failed")) {
                if (!isFilter) {
                    logger.warn("Failed using comet support: {}, error: {} Is the Nio or Apr Connector enabled?", cometSupport.getClass().getName(),
                            ex.getMessage());
                    logger.warn("Using BlockingIOCometSupport.");
                }
                logger.trace(ex.getMessage(), ex);

                cometSupport = new BlockingIOCometSupport(config);
                service(req, res);
            } else {
                logger.error("AtmosphereServlet exception", ex);
                throw ex;
            }
        } finally {
           if (r != null && a != null && a.type != Action.TYPE.SUSPEND) {
               r.destroy();
           }
        }
        return null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(final HttpServletRequest request, final String protocol) {
        logger.debug("WebSocket upgrade requested");
        request.setAttribute(WebSocket.WEBSOCKET_INITIATED, true);
        return new JettyWebSocketHandler(request, this, webSocketProtocolClassName);
    } ##FSTMerge## public org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(final HttpServletRequest request, final String protocol) {
        logger.info("WebSocket upgrade requested");
        request.setAttribute(WebSocket.WEBSOCKET_INITIATED, true);
        return new JettyWebSocketHandler(request, this, webSocketProtocolClassName);
    } ##FSTMerge## public org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(final HttpServletRequest request, final String protocol) {
        logger.debug("WebSocket upgrade requested");
        request.setAttribute(WebSocket.WEBSOCKET_INITIATED, true);
        return new JettyWebSocketHandler(request, this, webSocketProtocol);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public static final String SKIP_BROADCASTER_CREATION = AtmosphereResourceImpl.class.getName() + ".skipBroadcasterCreation"; ##FSTMerge## ##FSTMerge## public static final String SKIP_BROADCASTER_CREATION = AtmosphereResourceImpl.class.getName() + ".skipBroadcasterCreation";
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public static final String METEOR = Meteor.class.getName(); ##FSTMerge## ##FSTMerge## public static final String METEOR = Meteor.class.getName();
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void resume() {
        // Strangely but possible two thread try to resume at the same time.
        try {
        synchronized (event) {
            if (!event.isResuming() && !event.isResumedOnTimeout() && event.isSuspended() && isInScope) {
                action.type = AtmosphereServlet.Action.TYPE.RESUME;

                try {
                    logger.debug("Resuming {}", getRequest());
                } catch (Throwable ex) {
                    // Jetty NPE toString()
                    // Ignore
                    // Stop here as the request object as becomes invalid.
                    return;
                }

                // We need it as Jetty doesn't support timeout
                Broadcaster b = getBroadcaster(false);
                if (!b.isDestroyed() && b instanceof DefaultBroadcaster) {
                    ((DefaultBroadcaster) b).broadcastOnResume(this);
                }

                notifyListeners();
                listeners.clear();

                try {
                    if (!b.isDestroyed()) {
                        broadcaster.removeAtmosphereResource(this);
                    }
                } catch (IllegalStateException ex) {
                    logger.warn("Unable to resume", this);
                    logger.debug(ex.getMessage(), ex);
                }

                if (b.getScope() == Broadcaster.SCOPE.REQUEST) {
                    logger.debug("Broadcaster's scope is set to request, destroying it {}", b.getID());
                    b.destroy();
                }

                // Resuming here means we need to pull away from all other Broadcaster, if they exists.
                if (BroadcasterFactory.getDefault() != null) {
                    BroadcasterFactory.getDefault().removeAllAtmosphereResource(this);
                }

                try {
                    req.setAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT, Boolean.FALSE);
                    Meteor m = (Meteor) req.getAttribute(METEOR);
                    if (m!= null) {
                        m.destroy();
                    }
                } catch (Exception ex) {
                    logger.debug("Cannot resume an already resumed/cancelled request");
                }

                if (req.getAttribute(PRE_SUSPEND) == null) {
                    cometSupport.action(this);
                }
            } else {
                logger.debug("Cannot resume an already resumed/cancelled request {}", getRequest());
            }
        }
        } catch (Throwable t) {
            logger.trace("Wasn't able to resume a connection {}", this, t);
        }
    } ##FSTMerge## public void resume() {
        // Strangely but possible two thread try to resume at the same time.
        try {
        synchronized (event) {
            if (!event.isResuming() && !event.isResumedOnTimeout() && event.isSuspended() && isInScope) {
                action.type = AtmosphereServlet.Action.TYPE.RESUME;

                try {
                    logger.debug("Resuming {}", getRequest());
                } catch (Throwable ex) {
                    // Jetty NPE toString()
                    // Ignore
                    // Stop here as the request object as becomes invalid.
                    return;
                }

                // We need it as Jetty doesn't support timeout
                Broadcaster b = getBroadcaster(false);
                if (!b.isDestroyed() && b instanceof DefaultBroadcaster) {
                    ((DefaultBroadcaster) b).broadcastOnResume(this);
                }

                notifyListeners();
                listeners.clear();

                try {
                    if (!b.isDestroyed()) {
                        broadcaster.removeAtmosphereResource(this);
                    }
                } catch (IllegalStateException ex) {
                    logger.warn("Unable to resume", this);
                    logger.debug(ex.getMessage(), ex);
                }

                if (b.getScope() == Broadcaster.SCOPE.REQUEST) {
                    logger.debug("Broadcaster's scope is set to request, destroying it {}", b.getID());
                    b.destroy();
                }

                // Resuming here means we need to pull away from all other Broadcaster, if they exists.
                if (BroadcasterFactory.getDefault() != null) {
                    BroadcasterFactory.getDefault().removeAllAtmosphereResource(this);
                }

                try {
                    req.setAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT, Boolean.FALSE);
                } catch (Exception ex) {
                    logger.debug("Cannot resume an already resumed/cancelled request");
                }
                if (req.getAttribute(PRE_SUSPEND) == null) {
                    cometSupport.action(this);
                }
            } else {
                logger.debug("Cannot resume an already resumed/cancelled request {}", getRequest());
            }
        }
        } catch (Throwable t) {
            logger.trace("Wasn't able to resume a connection {}", this, t);
        }
    } ##FSTMerge## public void resume() {
        // Strangely but possible two thread try to resume at the same time.
        try {
            synchronized (event) {
                if (!isResumed && isInScope) {
                    action.type = AtmosphereServlet.Action.TYPE.RESUME;
                    isResumed = true;

                    try {
                        logger.debug("Resuming {}", getRequest());
                    } catch (Throwable ex) {
                        // Jetty NPE toString()
                        // Ignore
                        // Stop here as the request object as becomes invalid.
                        return;
                    }

                    // We need it as Jetty doesn't support timeout
                    Broadcaster b = getBroadcaster(false);
                    if (!b.isDestroyed() && b instanceof DefaultBroadcaster) {
                        ((DefaultBroadcaster) b).broadcastOnResume(this);
                    }

                    notifyListeners();
                    listeners.clear();

                    try {
                        if (!b.isDestroyed()) {
                            broadcaster.removeAtmosphereResource(this);
                        }
                    } catch (IllegalStateException ex) {
                        logger.warn("Unable to resume", this);
                        logger.debug(ex.getMessage(), ex);
                    }

                    if (b.getScope() == Broadcaster.SCOPE.REQUEST) {
                        logger.debug("Broadcaster's scope is set to request, destroying it {}", b.getID());
                        b.destroy();
                    }

                    // Resuming here means we need to pull away from all other Broadcaster, if they exists.
                    if (BroadcasterFactory.getDefault() != null) {
                        BroadcasterFactory.getDefault().removeAllAtmosphereResource(this);
                    }

                    try {
                        req.setAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT, Boolean.FALSE);
                        Meteor m = (Meteor) req.getAttribute(METEOR);
                        if (m != null) {
                            m.destroy();
                        }
                    } catch (Exception ex) {
                        logger.debug("Cannot resume an already resumed/cancelled request");
                    }

                    if (req.getAttribute(PRE_SUSPEND) == null) {
                        cometSupport.action(this);
                    }
                } else {
                    logger.debug("Cannot resume an already resumed/cancelled request {}", getRequest());
                }

                if (AtmosphereResponse.class.isAssignableFrom(response.getClass())) {
                    AtmosphereResponse.class.cast(response).destroy();
                }

                if (AtmosphereRequest.class.isAssignableFrom(req.getClass())) {
                    AtmosphereRequest.class.cast(req).destroy();
                }
            }
        } catch (Throwable t) {
            logger.trace("Wasn't able to resume a connection {}", this, t);
        } finally {
            event.setMessage(null);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void suspend(long timeout, boolean flushComment) {

        if (event.isSuspended()) return;

        if (config.isSupportSession()
                && req.getSession(false) != null
                && req.getSession().getMaxInactiveInterval() != -1
                && req.getSession().getMaxInactiveInterval() * 1000 < timeout) {
            throw new IllegalStateException("Cannot suspend a " +
                    "response longer than the session timeout. Increase the value of session-timeout in web.xml");
        }

        if (req.getAttribute(DefaultBroadcaster.CACHED) != null) {
            // Do nothing because we have found cached message which was written already, and the handler resumed.
            req.removeAttribute(DefaultBroadcaster.CACHED);
            return;
        }

        if (!event.isResumedOnTimeout()) {

            if (req.getHeaders("Connection") != null && req.getHeaders("Connection").hasMoreElements()) {
                String[] e = req.getHeaders("Connection").nextElement().toString().split(",");
                for (String upgrade : e) {
                    if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) {
                        if (writeHeaders && !cometSupport.supportWebSocket()) {
                            response.addHeader(X_ATMOSPHERE_ERROR, "Websocket protocol not supported");
                        } else {
                            flushComment = false;
                        }
                    }
                }
            }

            if (writeHeaders && injectCacheHeaders) {
                // Set to expire far in the past.
                response.setHeader(EXPIRES, "-1");
                // Set standard HTTP/1.1 no-cache headers.
                response.setHeader(CACHE_CONTROL, "no-store, no-cache, must-revalidate");
                // Set standard HTTP/1.0 no-cache header.
                response.setHeader(PRAGMA, "no-cache");
            }

            if (writeHeaders && enableAccessControl) {
                response.setHeader(ACCESS_CONTROL_ALLOW_ORIGIN, "*");
                response.setHeader(ACCESS_CONTROL_ALLOW_CREDENTIALS, "true");
            }

            if (flushComment) {
                write();
            }
            req.setAttribute(PRE_SUSPEND, "true");
            action.type = AtmosphereServlet.Action.TYPE.SUSPEND;
            action.timeout = timeout;

            // TODO: We can possibly optimize that call by avoiding creating a Broadcaster if we are sure the Broadcaster
            // is unique.
            boolean isJersey = req.getAttribute(FrameworkConfig.CONTAINER_RESPONSE) != null;

            boolean skipCreation = false;
            if (req.getAttribute(SKIP_BROADCASTER_CREATION) != null) {
                skipCreation = true;
            }

            // Null means SCOPE=REQUEST set by a Meteor
            if (!skipCreation && (broadcaster == null || broadcaster.getScope() == Broadcaster.SCOPE.REQUEST) && !isJersey) {
                String id = broadcaster != null ? broadcaster.getID() : getClass().getName();
                Class<? extends Broadcaster> clazz = broadcaster != null ? broadcaster.getClass() : DefaultBroadcaster.class;

                broadcaster = BroadcasterFactory.getDefault().lookup(clazz, id, false);
                if (broadcaster == null || broadcaster.getAtmosphereResources().size() > 0) {
                    broadcaster = BroadcasterFactory.getDefault().lookup(clazz, id + "/" + UUID.randomUUID(), true);
                }
            }

            broadcaster.addAtmosphereResource(this);
            req.removeAttribute(PRE_SUSPEND);
            notifyListeners();
        }
    } ##FSTMerge## public void suspend(long timeout, boolean flushComment) {

        if (req.getSession(false) != null && req.getSession().getMaxInactiveInterval() != -1 && req.getSession().getMaxInactiveInterval() * 1000 < timeout) {
            throw new IllegalStateException("Cannot suspend a " +
                    "response longer than the session timeout. Increase the value of session-timeout in web.xml");
        }

        if (req.getAttribute(DefaultBroadcaster.CACHED) != null) {
            // Do nothing because we have found cached message which was written already, and the handler resumed.
            req.removeAttribute(DefaultBroadcaster.CACHED);
            return;
        }

        if (!event.isResumedOnTimeout()) {

            if (req.getHeaders("Connection") != null && req.getHeaders("Connection").hasMoreElements()) {
                String[] e = req.getHeaders("Connection").nextElement().split(",");
                for (String upgrade : e) {
                    if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) {
                        if (writeHeaders && !cometSupport.supportWebSocket()) {
                            response.addHeader(X_ATMOSPHERE_ERROR, "Websocket protocol not supported");
                        } else {
                            flushComment = false;
                        }
                    }
                }
            }

            if (writeHeaders && injectCacheHeaders) {
                // Set to expire far in the past.
                response.setHeader(EXPIRES, "-1");
                // Set standard HTTP/1.1 no-cache headers.
                response.setHeader(CACHE_CONTROL, "no-store, no-cache, must-revalidate");
                // Set standard HTTP/1.0 no-cache header.
                response.setHeader(PRAGMA, "no-cache");
            }

            if (writeHeaders && enableAccessControl) {
                response.setHeader(ACCESS_CONTROL_ALLOW_ORIGIN, "*");
                response.setHeader(ACCESS_CONTROL_ALLOW_CREDENTIALS, "true");
            }

            if (flushComment) {
                write();
            }
            req.setAttribute(PRE_SUSPEND, "true");
            action.type = AtmosphereServlet.Action.TYPE.SUSPEND;
            action.timeout = timeout;

            // TODO: We can possibly optimize that call by avoiding creating a Broadcaster if we are sure the Broadcaster
            // is unique.
            if (broadcaster.getScope() == Broadcaster.SCOPE.REQUEST) {
                String id = broadcaster.getID();
                Class<? extends Broadcaster> clazz = broadcaster.getClass();
                broadcaster = BroadcasterFactory.getDefault().lookup(clazz, id, false);
                if (broadcaster == null || broadcaster.getAtmosphereResources().size() > 0) {
                    broadcaster = BroadcasterFactory.getDefault().lookup(clazz, id + "/" + UUID.randomUUID(), true);
                }
            }

            broadcaster.addAtmosphereResource(this);
            req.removeAttribute(PRE_SUSPEND);
            notifyListeners();
        }
    } ##FSTMerge## public void suspend(long timeout, boolean flushComment) {

        if (event.isSuspended()) return;

        if (config.isSupportSession()
                && req.getSession(false) != null
                && req.getSession().getMaxInactiveInterval() != -1
                && req.getSession().getMaxInactiveInterval() * 1000 < timeout) {
            throw new IllegalStateException("Cannot suspend a " +
                    "response longer than the session timeout. Increase the value of session-timeout in web.xml");
        }

        if (req.getAttribute(DefaultBroadcaster.CACHED) != null) {
            // Do nothing because we have found cached message which was written already, and the handler resumed.
            req.removeAttribute(DefaultBroadcaster.CACHED);
            return;
        }

        if (!event.isResumedOnTimeout()) {

            if (req.getHeaders("Connection") != null && req.getHeaders("Connection").hasMoreElements()) {
                String[] e = req.getHeaders("Connection").nextElement().toString().split(",");
                for (String upgrade : e) {
                    if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) {
                        if (writeHeaders && !cometSupport.supportWebSocket()) {
                            response.addHeader(X_ATMOSPHERE_ERROR, "Websocket protocol not supported");
                        } else {
                            flushComment = false;
                        }
                    }
                }
            }

            if (writeHeaders && injectCacheHeaders) {
                // Set to expire far in the past.
                response.setHeader(EXPIRES, "-1");
                // Set standard HTTP/1.1 no-cache headers.
                response.setHeader(CACHE_CONTROL, "no-store, no-cache, must-revalidate");
                // Set standard HTTP/1.0 no-cache header.
                response.setHeader(PRAGMA, "no-cache");
            }

            if (writeHeaders && enableAccessControl) {
                response.setHeader(ACCESS_CONTROL_ALLOW_ORIGIN, "*");
                response.setHeader(ACCESS_CONTROL_ALLOW_CREDENTIALS, "true");
            }

            if (flushComment) {
                write();
            }
            req.setAttribute(PRE_SUSPEND, "true");
            action.type = AtmosphereServlet.Action.TYPE.SUSPEND;
            action.timeout = timeout;

            // TODO: We can possibly optimize that call by avoiding creating a Broadcaster if we are sure the Broadcaster
            // is unique.
            boolean isJersey = req.getAttribute(FrameworkConfig.CONTAINER_RESPONSE) != null;

            boolean skipCreation = false;
            if (req.getAttribute(SKIP_BROADCASTER_CREATION) != null) {
                skipCreation = true;
            }

            // Null means SCOPE=REQUEST set by a Meteor
            if (!skipCreation && (broadcaster == null || broadcaster.getScope() == Broadcaster.SCOPE.REQUEST) && !isJersey) {
                String id = broadcaster != null ? broadcaster.getID() : getClass().getName();
                Class<? extends Broadcaster> clazz = broadcaster != null ? broadcaster.getClass() : DefaultBroadcaster.class;

                broadcaster = BroadcasterFactory.getDefault().lookup(clazz, id, false);
                if (broadcaster == null || broadcaster.getAtmosphereResources().size() > 0) {
                    broadcaster = BroadcasterFactory.getDefault().lookup(clazz, id + "/" + UUID.randomUUID(), true);
                }
            }

            broadcaster.addAtmosphereResource(this);
            req.removeAttribute(PRE_SUSPEND);
            notifyListeners();
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected Broadcaster getBroadcaster(boolean autoCreate) {
        if (broadcaster == null) {
            throw new IllegalStateException("No Broadcaster associated with this AtmosphereResource.");
        }

        String s = config.getInitParameter(ApplicationConfig.RECOVER_DEAD_BROADCASTER);
        if (s != null) {
            autoCreate = Boolean.parseBoolean(s);
        }

        if (autoCreate && broadcaster.isDestroyed() && BroadcasterFactory.getDefault() != null) {
            logger.debug("Broadcaster {} has been destroyed and cannot be re-used. Recreating a new one with the same name. You can turn off that" +
                    " mechanism by adding, in web.xml, {} set to false", broadcaster.getID(), ApplicationConfig.RECOVER_DEAD_BROADCASTER);

            Broadcaster.SCOPE scope = broadcaster.getScope();
            synchronized (this) {
                String id = scope != Broadcaster.SCOPE.REQUEST ? broadcaster.getID() : broadcaster.getID() + ".recovered" + UUID.randomUUID();

                // Another Thread may have added the Broadcaster.
                broadcaster = BroadcasterFactory.getDefault().lookup(id, true);
                broadcaster.setScope(scope);
                broadcaster.addAtmosphereResource(this);
            }
        }
        return broadcaster;
    } ##FSTMerge## private Broadcaster getBroadcaster(boolean autoCreate) {
        if (broadcaster == null) {
            throw new IllegalStateException("No Broadcaster associated with this AtmosphereResource.");
        }

        String s = config.getInitParameter(ApplicationConfig.RECOVER_DEAD_BROADCASTER);
        if (s != null) {
            autoCreate = Boolean.parseBoolean(s);
        }

        if (autoCreate && broadcaster.isDestroyed() && BroadcasterFactory.getDefault() != null) {
            logger.warn("Broadcaster {} has been destroyed and cannot be re-used. Recreating a new one with the same name. You can turn off that" +
                    " mechanism by adding, in web.xml, {} set to false", broadcaster.getID(), ApplicationConfig.RECOVER_DEAD_BROADCASTER);

            synchronized (this) {
                String id = broadcaster.getScope() != Broadcaster.SCOPE.REQUEST ? broadcaster.getID() : broadcaster.getID() + ".recovered" + UUID.randomUUID();

                // Another Thread may have added the Broadcaster.
                broadcaster = BroadcasterFactory.getDefault().lookup(id, true);
                broadcaster.addAtmosphereResource(this);
            }
        }
        return broadcaster;
    } ##FSTMerge## protected Broadcaster getBroadcaster(boolean autoCreate) {
        if (broadcaster == null) {
            throw new IllegalStateException("No Broadcaster associated with this AtmosphereResource.");
        }

        String s = config.getInitParameter(ApplicationConfig.RECOVER_DEAD_BROADCASTER);
        if (s != null) {
            autoCreate = Boolean.parseBoolean(s);
        }

        if (autoCreate && broadcaster.isDestroyed() && BroadcasterFactory.getDefault() != null) {
            logger.debug("Broadcaster {} has been destroyed and cannot be re-used. Recreating a new one with the same name. You can turn off that" +
                    " mechanism by adding, in web.xml, {} set to false", broadcaster.getID(), ApplicationConfig.RECOVER_DEAD_BROADCASTER);

            Broadcaster.SCOPE scope = broadcaster.getScope();
            synchronized (this) {
                String id = scope != Broadcaster.SCOPE.REQUEST ? broadcaster.getID() : broadcaster.getID() + ".recovered" + UUID.randomUUID();

                // Another Thread may have added the Broadcaster.
                broadcaster = BroadcasterFactory.getDefault().lookup(id, true);
                broadcaster.setScope(scope);
                broadcaster.addAtmosphereResource(this);
            }
        }
        return broadcaster;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setIsInScope(boolean isInScope) {
        this.isInScope = isInScope;
    } ##FSTMerge## protected void setIsInScope(boolean isInScope) {
        this.isInScope = isInScope;
    } ##FSTMerge## public void setIsInScope(boolean isInScope) {
        this.isInScope = isInScope;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void notifyListeners(AtmosphereResourceEvent event) {
        if (listeners.size() > 0) {
            logger.trace("Invoking listener with {}", event);
        } else {
            return;
        }

        try {
            if (event.isResuming() || event.isResumedOnTimeout()) {
                onResume(event);
            } else if (event.isCancelled()) {
                onDisconnect(event);
            } else if (!isSuspendEvent.getAndSet(true) && event.isSuspended()) {
                onSuspend(event);
            } else if (event.throwable() != null) {
                onThrowable(event);
            } else {
                onBroadcast(event);
            }
        } catch (Throwable t) {
            logger.trace("Listener error {}", t);
            AtmosphereResourceEventImpl.class.cast(event).setThrowable(t);
            try {
                onThrowable(event);
            } catch (Throwable t2) {
                logger.warn("Listener error {}", t2);
            }
        }
    } ##FSTMerge## public void notifyListeners(AtmosphereResourceEvent event) {
        if (listeners.size() > 0) {
            logger.trace("Invoking listener with {}", event);
        } else {
            return;
        }

        if (event.isResuming() || event.isResumedOnTimeout()) {
            onResume(event);
        } else if (event.isCancelled()) {
            onDisconnect(event);
        } else if (!isSuspendEvent.getAndSet(true) && event.isSuspended()) {
            onSuspend(event);
        } else if (event.throwable() != null) {
            onThrowable(event);
        } else {
            onBroadcast(event);
        }
    } ##FSTMerge## public void notifyListeners(AtmosphereResourceEvent event) {
        if (listeners.size() > 0) {
            logger.trace("Invoking listener with {}", event);
        } else {
            return;
        }

        Action oldAction = action;
        try {
            if (event.isResuming() || event.isResumedOnTimeout()) {
                onResume(event);
            } else if (event.isCancelled()) {
                onDisconnect(event);
            } else if (!isSuspendEvent.getAndSet(true) && event.isSuspended()) {
                onSuspend(event);
            } else if (event.throwable() != null) {
                onThrowable(event);
            } else {
                onBroadcast(event);
            }

            if (oldAction.type != action.type) {
                action().type = Action.TYPE.CREATED;
            }
        } catch (Throwable t) {
            logger.trace("Listener error {}", t);
            AtmosphereResourceEventImpl.class.cast(event).setThrowable(t);
            try {
                onThrowable(event);
            } catch (Throwable t2) {
                logger.warn("Listener error {}", t2);
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final String servletPath; ##FSTMerge## ##FSTMerge## private final String servletPath;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final String requestURI; ##FSTMerge## ##FSTMerge## private final String requestURI;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final String requestURL; ##FSTMerge## ##FSTMerge## private final String requestURL;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final Map<String, Object> localAttributes; ##FSTMerge## ##FSTMerge## private final Map<String, Object> localAttributes;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private AtmosphereRequest(Builder b) {
        super(b.request);
        pathInfo = b.pathInfo == null ? b.request.getPathInfo() : b.pathInfo;
        request = b.request;
        headers = b.headers == null ? new HashMap<String, String>() : b.headers;
        queryStrings = b.queryStrings == null ? new HashMap<String, String[]>() : b.queryStrings;
        servletPath = b.servletPath;
        requestURI = b.requestURI;
        requestURL = b.requestURL;
        localAttributes = b.localAttributes;

        if (b.dataBytes != null) {
            bis = new ByteInputStream(b.dataBytes, b.offset, b.length);
            try {
                br = new BufferedReader(new StringReader(new String(b.dataBytes, b.offset, b.length, b.encoding)));
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeException(e);
            }
        } else if (b.data != null) {
            bis = new ByteInputStream(b.data.getBytes(), 0, b.data.getBytes().length);
            br = new BufferedReader(new StringReader(b.data));
        } else {
            bis = null;
            br = null;
        }
        methodType = b.methodType == null ? (request != null ? request.getMethod() : "GET") : b.methodType;
        contentType = b.contentType == null ? (request != null ? request.getContentType() : "text/plain") : b.contentType;
    } ##FSTMerge## private AtmosphereRequest(Builder b) {
        super(b.request);
        pathInfo = b.pathInfo == null ? b.request.getPathInfo() : b.pathInfo;
        request = b.request;
        headers = b.headers;
        queryStrings = b.queryStrings;

        if (b.dataBytes != null) {
            bis = new ByteInputStream(b.dataBytes, b.offset, b.length);
            try {
                br = new BufferedReader(new StringReader(new String(b.dataBytes, b.offset, b.length, b.encoding)));
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeException(e);
            }
        } else if (b.data != null) {
            bis = new ByteInputStream(b.data.getBytes(), 0, b.data.getBytes().length);
            br = new BufferedReader(new StringReader(b.data));
        } else {
            bis = null;
            br = null;
        }
        methodType = b.methodType == null ? b.request.getMethod() : b.methodType;
        contentType = b.contentType == null ? b.request.getContentType() : b.contentType;
    } ##FSTMerge## private AtmosphereRequest(Builder b) {
        super(b.request);
        pathInfo = b.pathInfo == null ? b.request.getPathInfo() : b.pathInfo;
        request = b.request;
        headers = b.headers == null ? new HashMap<String, String>() : b.headers;
        queryStrings = b.queryStrings == null ? new HashMap<String, String[]>() : b.queryStrings;
        servletPath = b.servletPath;
        requestURI = b.requestURI;
        requestURL = b.requestURL;
        localAttributes = b.localAttributes;

        if (b.dataBytes != null) {
            bis = new ByteInputStream(b.dataBytes, b.offset, b.length);
            try {
                br = new BufferedReader(new StringReader(new String(b.dataBytes, b.offset, b.length, b.encoding)));
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeException(e);
            }
        } else if (b.data != null) {
            bis = new ByteInputStream(b.data.getBytes(), 0, b.data.getBytes().length);
            br = new BufferedReader(new StringReader(b.data));
        } else {
            bis = null;
            br = null;
        }
        methodType = b.methodType == null ? (request != null ? request.getMethod() : "GET") : b.methodType;
        contentType = b.contentType == null ? (request != null ? request.getContentType() : "text/plain") : b.contentType;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public String getServletPath() {
        return servletPath != null ? servletPath : super.getServletPath();
    } ##FSTMerge## ##FSTMerge## @Override
    public String getServletPath() {
        return servletPath != null ? servletPath : super.getServletPath();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public String getRequestURI() {
        return requestURI != null ? requestURI : (request != null ? super.getRequestURI() : null);
    } ##FSTMerge## ##FSTMerge## @Override
    public String getRequestURI() {
        return requestURI != null ? requestURI : (request != null ? super.getRequestURI() : null);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public StringBuffer getRequestURL() {
        return requestURL != null ? new StringBuffer(requestURL) : (request != null ? request.getRequestURL() : null);
    } ##FSTMerge## ##FSTMerge## @Override
    public StringBuffer getRequestURL() {
        return requestURL != null ? new StringBuffer(requestURL) : (request != null ? request.getRequestURL() : null);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public Enumeration getHeaders(String name) {
        ArrayList list = Collections.list(super.getHeaders(name));
        if (name.equalsIgnoreCase("content-type")) {
            list.add(contentType);
        }

        if (headers.get(name) != null) {
            list.add(headers.get(name));
        }

        if (request != null) {
            if (list.size() == 0 && name.startsWith(X_ATMOSPHERE)) {
                if (request.getAttribute(name) != null) {
                    list.add(request.getAttribute(name));
                }
            }
        }
        return Collections.enumeration(list);
    } ##FSTMerge## @Override
    public Enumeration getHeaders(String name) {
        ArrayList list = Collections.list(super.getHeaders(name));
        if (name.equalsIgnoreCase("content-type")) {
            list.add(contentType);
        }

        if (headers.get(name) != null) {
            list.add(headers.get(name));
        }

        if (list.size() == 0 && name.startsWith(X_ATMOSPHERE)) {
            if (request.getAttribute(name) != null) {
                list.add(request.getAttribute(name));
            }
        }
        return Collections.enumeration(list);
    } ##FSTMerge## @Override
    public Enumeration getHeaders(String name) {
        ArrayList list = Collections.list(super.getHeaders(name));
        if (name.equalsIgnoreCase("content-type")) {
            list.add(contentType);
        }

        if (headers.get(name) != null) {
            list.add(headers.get(name));
        }

        if (request != null) {
            if (list.size() == 0 && name.startsWith(X_ATMOSPHERE)) {
                if (request.getAttribute(name) != null) {
                    list.add(request.getAttribute(name));
                }
            }
        }
        return Collections.enumeration(list);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public Enumeration<String> getHeaderNames() {
        ArrayList list = Collections.list(super.getHeaderNames());
        list.add("content-type");

        if (request != null) {
            Enumeration e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                String name = e.nextElement().toString();
                if (name.startsWith(X_ATMOSPHERE)) {
                    list.add(name);
                }
            }
        }

        list.addAll(headers.keySet());

        return Collections.enumeration(list);
    } ##FSTMerge## public Enumeration<String> getHeaderNames() {
        ArrayList list = Collections.list(super.getHeaderNames());
        list.add("content-type");

        Enumeration e = request.getAttributeNames();
        while (e.hasMoreElements()) {
            String name = e.nextElement().toString();
            if (name.startsWith(X_ATMOSPHERE)) {
                list.add(name);
            }
        }

        for (String s : headers.keySet()) {
            list.add(s);
        }

        return Collections.enumeration(list);
    } ##FSTMerge## @Override
    public Enumeration<String> getHeaderNames() {
        ArrayList list = Collections.list(super.getHeaderNames());
        list.add("content-type");

        if (request != null) {
            Enumeration e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                String name = e.nextElement().toString();
                if (name.startsWith(X_ATMOSPHERE)) {
                    list.add(name);
                }
            }
        }

        list.addAll(headers.keySet());

        return Collections.enumeration(list);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public String getHeader(String s) {
        if (s.equalsIgnoreCase("Connection")) {
            return "keep-alive";
        } else if ("content-type".equalsIgnoreCase(s)) {
            return contentType;
        } else {
            String name = super.getHeader(s);
            if (name == null) {
                if (headers.get(s) != null) {
                    return headers.get(s);
                }

                if (s.startsWith(X_ATMOSPHERE) && request != null) {
                    return (String) request.getAttribute(s);
                }
            }
            return name;
        }
    } ##FSTMerge## @Override
    public String getHeader(String s) {
        if (s.equalsIgnoreCase("Connection")) {
            return "keep-alive";
        } else if ("content-type".equalsIgnoreCase(s)) {
            return contentType;
        } else {
            String name = super.getHeader(s);
            if (name == null) {
                if (headers.get(s) != null) {
                    return headers.get(s);
                }

                if (s.startsWith(X_ATMOSPHERE)) {
                    return (String) request.getAttribute(s);
                }
            }
            return name;
        }
    } ##FSTMerge## @Override
    public String getHeader(String s) {
        if (s.equalsIgnoreCase("Connection")) {
            return "keep-alive";
        } else if ("content-type".equalsIgnoreCase(s)) {
            return contentType;
        } else {
            String name = super.getHeader(s);
            if (name == null) {
                if (headers.get(s) != null) {
                    return headers.get(s);
                }

                if (s.startsWith(X_ATMOSPHERE) && request != null) {
                    return (String) request.getAttribute(s);
                }
            }
            return name;
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public String getParameter(String s) {
        String name = super.getParameter(s);
        if (name == null) {
            if (queryStrings.get(s) != null) {
                return queryStrings.get(s)[0];
            }
        }
        return name;
    } ##FSTMerge## public String getParameter(String s) {
        String name = super.getParameter(s);
        if (name == null) {
            if (queryStrings.get(s) != null) {
                return queryStrings.get(s)[0];
            }
        }
        return name;
    } ##FSTMerge## @Override
    public String getParameter(String s) {
        String name = super.getParameter(s);
        if (name == null) {
            if (queryStrings.get(s) != null) {
                return queryStrings.get(s)[0];
            }
        }
        return name;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public Map<String, String[]> getParameterMap() {
        Map<String, String[]> m = (request != null ? request.getParameterMap() : Collections.<String, String[]>emptyMap());
        for (Map.Entry<String, String[]> e : m.entrySet()) {
            String[] s = queryStrings.get(e.getKey());
            if (s != null) {
                String[] s1 = new String[s.length + e.getValue().length];
                System.arraycopy(s, 0, s1, 0, s.length);
                System.arraycopy(s1, s.length + 1, e.getValue(), 0, e.getValue().length);
                queryStrings.put(e.getKey(), s1);
            } else {
                queryStrings.put(e.getKey(), e.getValue());
            }
        }
        return Collections.unmodifiableMap(queryStrings);
    } ##FSTMerge## public Map<String, String[]> getParameterMap() {
        Map<String, String[]> m = this.request.getParameterMap();
        for (Map.Entry<String, String[]> e : m.entrySet()) {
            String[] s = queryStrings.get(e.getKey());
            if (s != null) {
                String[] s1 = new String[s.length + e.getValue().length];
                System.arraycopy(s, 0, s1, 0, s.length);
                System.arraycopy(s1, s.length + 1, e.getValue(), 0, e.getValue().length);
                queryStrings.put(e.getKey(), s1);
            } else {
                queryStrings.put(e.getKey(), e.getValue());
            }
        }
        return Collections.unmodifiableMap(queryStrings);
    } ##FSTMerge## @Override
    public Map<String, String[]> getParameterMap() {
        Map<String, String[]> m = (request != null ? request.getParameterMap() : Collections.<String, String[]>emptyMap());
        for (Map.Entry<String, String[]> e : m.entrySet()) {
            String[] s = queryStrings.get(e.getKey());
            if (s != null) {
                String[] s1 = new String[s.length + e.getValue().length];
                System.arraycopy(s, 0, s1, 0, s.length);
                System.arraycopy(s1, s.length + 1, e.getValue(), 0, e.getValue().length);
                queryStrings.put(e.getKey(), s1);
            } else {
                queryStrings.put(e.getKey(), e.getValue());
            }
        }
        return Collections.unmodifiableMap(queryStrings);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public String[] getParameterValues(String s) {
        String[] list = super.getParameterValues(s) == null ? new String[0] : super.getParameterValues(s);
        if (queryStrings.get(s) != null) {
            String[] newList = queryStrings.get(s);
            String[] s1 = new String[list.length + newList.length];
            System.arraycopy(list, 0, s1, 0, list.length);
            System.arraycopy(s1, list.length + 1, newList, 0, newList.length);
        }
        return list;
    } ##FSTMerge## ##FSTMerge## @Override
    public String[] getParameterValues(String s) {
        String[] list = super.getParameterValues(s) == null ? new String[0] : super.getParameterValues(s);
        if (queryStrings.get(s) != null) {
            String[] newList = queryStrings.get(s);
            String[] s1 = new String[list.length + newList.length];
            System.arraycopy(list, 0, s1, 0, list.length);
            System.arraycopy(s1, list.length + 1, newList, 0, newList.length);
        }
        return list;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public ServletInputStream getInputStream() throws IOException {
        return bis == null ? (request != null ? request.getInputStream() : null) : bis;
    } ##FSTMerge## @Override
    public ServletInputStream getInputStream() throws IOException {
        return bis == null ? request.getInputStream() : bis;
    } ##FSTMerge## @Override
    public ServletInputStream getInputStream() throws IOException {
        return bis == null ? (request != null ? request.getInputStream() : null) : bis;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public BufferedReader getReader() throws IOException {
        return br == null ? (request != null ? request.getReader() : null) : br;
    } ##FSTMerge## @Override
    public BufferedReader getReader() throws IOException {
        return br == null ? request.getReader() : br;
    } ##FSTMerge## @Override
    public BufferedReader getReader() throws IOException {
        return br == null ? (request != null ? request.getReader() : null) : br;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final static ##FSTMerge## private static ##FSTMerge## private final static
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void setAttribute(String s, Object o) {
        localAttributes.put(s, o);
    } ##FSTMerge## ##FSTMerge## @Override
    public void setAttribute(String s, Object o) {
        localAttributes.put(s, o);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public Object getAttribute(String s) {
        return localAttributes.get(s) != null ? localAttributes.get(s) : (request != null ? request.getAttribute(s) : null);
    } ##FSTMerge## ##FSTMerge## @Override
    public Object getAttribute(String s) {
        return localAttributes.get(s) != null ? localAttributes.get(s) : (request != null ? request.getAttribute(s) : null);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void removeAttribute(String name) {
        if (localAttributes.remove(name) == null && request != null) {
            request.removeAttribute(name);
        }
    } ##FSTMerge## ##FSTMerge## @Override
    public void removeAttribute(String name) {
        if (localAttributes.remove(name) == null && request != null) {
            request.removeAttribute(name);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public Enumeration<String> getAttributeNames() {
        Map<String, Object> m = new HashMap<String, Object>();
        m.putAll(localAttributes);

        Enumeration<String> e = (request != null ? request.getAttributeNames() : null);
        if (e != null) {
            String s;
            while (e.hasMoreElements()) {
                s = e.nextElement();
                m.put(s, request.getAttribute(s));
            }
        }
        return Collections.enumeration(m.keySet());
    } ##FSTMerge## ##FSTMerge## @Override
    public Enumeration<String> getAttributeNames() {
        Map<String, Object> m = new HashMap<String, Object>();
        m.putAll(localAttributes);

        Enumeration<String> e = (request != null ? request.getAttributeNames() : null);
        if (e != null) {
            String s;
            while (e.hasMoreElements()) {
                s = e.nextElement();
                m.put(s, request.getAttribute(s));
            }
        }
        return Collections.enumeration(m.keySet());
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private String servletPath; ##FSTMerge## ##FSTMerge## private String servletPath;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private String requestURI; ##FSTMerge## ##FSTMerge## private String requestURI;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private String requestURL; ##FSTMerge## ##FSTMerge## private String requestURL;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private Map<String, Object> localAttributes = new HashMap<String, Object>(); ##FSTMerge## ##FSTMerge## private Map<String, Object> localAttributes = new HashMap<String, Object>();
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Builder attributes(Map<String, Object> attributes) {
            localAttributes = attributes;
            return this;
        } ##FSTMerge## ##FSTMerge## public Builder attributes(Map<String, Object> attributes) {
            localAttributes = attributes;
            return this;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Builder servletPath(String servletPath) {
            this.servletPath = servletPath;
            return this;
        } ##FSTMerge## ##FSTMerge## public Builder servletPath(String servletPath) {
            this.servletPath = servletPath;
            return this;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Builder requestURI(String requestURI) {
            this.requestURI = requestURI;
            return this;
        } ##FSTMerge## ##FSTMerge## public Builder requestURI(String requestURI) {
            this.requestURI = requestURI;
            return this;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Builder requestURL(String requestURL) {
            this.requestURL = requestURL;
            return this;
        } ##FSTMerge## ##FSTMerge## public Builder requestURL(String requestURL) {
            this.requestURL = requestURL;
            return this;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ Action action(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        boolean webSocketEnabled = false;
        if (req.getHeaders("Connection") != null && req.getHeaders("Connection").hasMoreElements()) {
            String[] e = req.getHeaders("Connection").nextElement().toString().split(",");
            for (String upgrade : e) {
                if (upgrade.equalsIgnoreCase("Upgrade")) {
                    webSocketEnabled = true;
                    break;
                }
            }
        }

        if (webSocketEnabled && !supportWebSocket()) {
            res.setStatus(501);
            res.addHeader(X_ATMOSPHERE_ERROR, "Websocket protocol not supported");
            res.flushBuffer();
            return new Action();
        }

        if (config.handlers().isEmpty()) {
            logger.error("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
            throw new ServletException("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
        }

        if (supportSession()) {
            // Create the session needed to support the Resume
            // operation from disparate requests.
            HttpSession session = req.getSession(true);
            // Do not allow times out.
            if (session.getMaxInactiveInterval() == DEFAULT_SESSION_TIMEOUT) {
                session.setMaxInactiveInterval(-1);
            }
        }

        req.setAttribute(FrameworkConfig.SUPPORT_SESSION, supportSession());

        AtmosphereHandlerWrapper handlerWrapper = map(req);
        // Check Broadcaster state. If destroyed, replace it.
        Broadcaster b = handlerWrapper.broadcaster;
        if (b.isDestroyed()) {
            synchronized (handlerWrapper) {
                config.getBroadcasterFactory().remove(b, b.getID());
                handlerWrapper.broadcaster = config.getBroadcasterFactory().get(b.getID());
            }
        }
        AtmosphereResourceImpl resource = new AtmosphereResourceImpl(config, handlerWrapper.broadcaster, req, res, this, handlerWrapper.atmosphereHandler);

        req.setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE, resource);
        req.setAttribute(FrameworkConfig.ATMOSPHERE_HANDLER, handlerWrapper.atmosphereHandler);

        try {
            handlerWrapper.atmosphereHandler.onRequest(resource);
        } catch (IOException t) {
            resource.onThrowable(t);
            throw t;
        }

        if (resource.getAtmosphereResourceEvent().isSuspended()) {
            req.setAttribute(MAX_INACTIVE, System.currentTimeMillis());
            aliveRequests.put(req, resource);
        }
        return resource.action();
    } ##FSTMerge## Action action(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        boolean webSocketEnabled = false;
        if (req.getHeaders("Connection") != null && req.getHeaders("Connection").hasMoreElements()) {
            String[] e = req.getHeaders("Connection").nextElement().split(",");
            for (String upgrade : e) {
                if (upgrade.equalsIgnoreCase("Upgrade")) {
                    webSocketEnabled = true;
                    break;
                }
            }
        }

        if (webSocketEnabled && !supportWebSocket()) {
            res.setStatus(501);
            res.addHeader(X_ATMOSPHERE_ERROR, "Websocket protocol not supported");
            res.flushBuffer();
            return new Action();
        }

        if (config.handlers().isEmpty()) {
            logger.error("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
            throw new ServletException("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
        }

        if (supportSession()) {
            // Create the session needed to support the Resume
            // operation from disparate requests.
            HttpSession session = req.getSession(true);
            // Do not allow times out.
            if (session.getMaxInactiveInterval() == DEFAULT_SESSION_TIMEOUT) {
                session.setMaxInactiveInterval(-1);
            }
        }

        req.setAttribute(FrameworkConfig.SUPPORT_SESSION, supportSession());

        AtmosphereHandlerWrapper handlerWrapper = map(req);
        AtmosphereResourceImpl resource = new AtmosphereResourceImpl(config, handlerWrapper.broadcaster, req, res, this, handlerWrapper.atmosphereHandler);

        req.setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE, resource);
        req.setAttribute(FrameworkConfig.ATMOSPHERE_HANDLER, handlerWrapper.atmosphereHandler);

        try {
            handlerWrapper.atmosphereHandler.onRequest(resource);
        } catch (IOException t) {
            resource.onThrowable(t);
            throw t;
        }

        if (resource.getAtmosphereResourceEvent().isSuspended()) {
            req.setAttribute(MAX_INACTIVE, System.currentTimeMillis());
            aliveRequests.put(req, resource);
        }
        return resource.action();
    } ##FSTMerge## Action action(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        boolean webSocketEnabled = false;
        if (req.getHeaders("Connection") != null && req.getHeaders("Connection").hasMoreElements()) {
            String[] e = req.getHeaders("Connection").nextElement().toString().split(",");
            for (String upgrade : e) {
                if (upgrade.equalsIgnoreCase("Upgrade")) {
                    webSocketEnabled = true;
                    break;
                }
            }
        }

        if (webSocketEnabled && !supportWebSocket()) {
            res.setStatus(501);
            res.addHeader(X_ATMOSPHERE_ERROR, "Websocket protocol not supported");
            res.flushBuffer();
            return new Action();
        }

        if (config.handlers().isEmpty()) {
            logger.error("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
            throw new ServletException("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
        }

        if (supportSession()) {
            // Create the session needed to support the Resume
            // operation from disparate requests.
            HttpSession session = req.getSession(true);
            // Do not allow times out.
            if (session.getMaxInactiveInterval() == DEFAULT_SESSION_TIMEOUT) {
                session.setMaxInactiveInterval(-1);
            }
        }

        req.setAttribute(FrameworkConfig.SUPPORT_SESSION, supportSession());

        AtmosphereHandlerWrapper handlerWrapper = map(req);
        // Check Broadcaster state. If destroyed, replace it.
        Broadcaster b = handlerWrapper.broadcaster;
        if (b.isDestroyed()) {
            synchronized (handlerWrapper) {
                config.getBroadcasterFactory().remove(b, b.getID());
                handlerWrapper.broadcaster = config.getBroadcasterFactory().get(b.getID());
            }
        }
        AtmosphereResourceImpl resource = new AtmosphereResourceImpl(config, handlerWrapper.broadcaster, req, res, this, handlerWrapper.atmosphereHandler);

        req.setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE, resource);
        req.setAttribute(FrameworkConfig.ATMOSPHERE_HANDLER, handlerWrapper.atmosphereHandler);

        try {
            handlerWrapper.atmosphereHandler.onRequest(resource);
        } catch (IOException t) {
            resource.onThrowable(t);
            throw t;
        }

        if (trackActiveRequest && resource.getAtmosphereResourceEvent().isSuspended() && req.getAttribute(FrameworkConfig.CANCEL_SUSPEND_OPERATION) == null) {
            req.setAttribute(MAX_INACTIVE, System.currentTimeMillis());
            aliveRequests.put(req, resource);
        }
        return resource.action();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletException {
        String path;
        if (req.getPathInfo() != null) {
            path = req.getServletPath() + req.getPathInfo();
        } else {
            path = req.getServletPath();
        }
        if (path == null || path.length() <= 1) {
            path = "/all";
        }

        AtmosphereHandlerWrapper atmosphereHandlerWrapper = map(path);
        if (atmosphereHandlerWrapper == null) {
            atmosphereHandlerWrapper = map("/all");
        }

        if (atmosphereHandlerWrapper == null) {
            throw new ServletException("No AtmosphereHandler maps request for " + path);
        }
        config.getBroadcasterFactory().add(atmosphereHandlerWrapper.broadcaster,
                atmosphereHandlerWrapper.broadcaster.getID());
        return atmosphereHandlerWrapper;
    } ##FSTMerge## protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletException {
        String path = req.getServletPath() + req.getPathInfo();
        if (path == null || path.length() <= 1) {
            path = "/all";
        }

        AtmosphereHandlerWrapper atmosphereHandlerWrapper = map(path);
        if (atmosphereHandlerWrapper == null) {
            atmosphereHandlerWrapper = map("/all");
        }

        if (atmosphereHandlerWrapper == null){
            throw new ServletException("No AtmosphereHandler maps request for " + path);
        }
        config.getBroadcasterFactory().add(atmosphereHandlerWrapper.broadcaster,
                atmosphereHandlerWrapper.broadcaster.getID());
        return atmosphereHandlerWrapper;
    } ##FSTMerge## protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletException {
        String path = req.getServletPath();
        if (path == null || path.length() == 0) {
            path = "/";
        }

        // The Algorithm as been fixed in 0.9
        AtmosphereHandlerWrapper atmosphereHandlerWrapper = config.handlers().get(path);
        if (atmosphereHandlerWrapper == null) {
            // Try the /*
            if (!path.endsWith("/")) {
                path += "/*";
            } else {
                path += "*";
            }
            atmosphereHandlerWrapper = config.handlers().get(path);
            if (atmosphereHandlerWrapper == null) {
                atmosphereHandlerWrapper = config.handlers().get("/*");
                if (atmosphereHandlerWrapper == null) {

                    if (req.getPathInfo() != null) {
                        // Try appending the pathInfo
                        path = req.getServletPath() + req.getPathInfo();
                    }

                    atmosphereHandlerWrapper = config.handlers().get(path);
                    if (atmosphereHandlerWrapper == null) {
                        String ppath = path;
                        path = path.substring(0, path.lastIndexOf("/")) + "/*";

                        atmosphereHandlerWrapper = config.handlers().get(path);
                        if (atmosphereHandlerWrapper == null) {
                            path = ppath;
                            if (!path.endsWith("/")) {
                                path += "/*";
                            } else {
                                path += "*";
                            }
                            atmosphereHandlerWrapper = config.handlers().get(path);
                            if (atmosphereHandlerWrapper == null) {
                                logger.warn("No AtmosphereHandler maps request for {}", path);
                                for (String m : config.handlers().keySet()) {
                                    logger.warn("\tAtmosphereHandler registered: {}", m);
                                }
                                throw new ServletException("No AtmosphereHandler maps request for " + path);
                            }
                        }
                    }
                }
            }
        }
        config.getBroadcasterFactory().add(atmosphereHandlerWrapper.broadcaster,
                atmosphereHandlerWrapper.broadcaster.getID());
        return atmosphereHandlerWrapper;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Action timedout(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {

        AtmosphereResourceImpl r;
        long l = (Long) request.getAttribute(MAX_INACTIVE);
        if (l == -1) {
            // The closedDetector closed the connection.
            return timedoutAction;
        }
        request.setAttribute(MAX_INACTIVE, (long) -1);

        logger.debug("Timing out the connection for request {}", request);

        // Something went wrong.
        if (request == null || response == null) {
            logger.warn("Invalid Request/Response: {}/{}", request, response);
            return timedoutAction;
        }

        r = (AtmosphereResourceImpl) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);

        if (r != null && r.getAtmosphereResourceEvent().isSuspended()) {
            r.getAtmosphereResourceEvent().setIsResumedOnTimeout(true);

            Broadcaster b = r.getBroadcaster();
            if (b instanceof DefaultBroadcaster) {
                ((DefaultBroadcaster) b).broadcastOnResume(r);
            }

            if (r.getRequest().getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT) != null) {
                r.getAtmosphereResourceEvent().setIsResumedOnTimeout(
                        (Boolean) r.getRequest().getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT));
            }
            invokeAtmosphereHandler(r);
            try {
                r.getResponse().getOutputStream().close();
            } catch (Throwable t) {
                try {
                    r.getResponse().getWriter().close();
                } catch (Throwable t2) {
                }
            }
        }

        return timedoutAction;
    } ##FSTMerge## public Action timedout(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {

        AtmosphereResourceImpl re;
        long l = (Long) request.getAttribute(MAX_INACTIVE);
        if (l == -1) {
            // The closedDetector closed the connection.
            return timedoutAction;
        }
        request.setAttribute(MAX_INACTIVE, (long) -1);

        // Something went wrong.
        if (request == null || response == null) {
            logger.warn("Invalid Request/Response: {}/{}", request, response);
            return timedoutAction;
        }

        re = (AtmosphereResourceImpl) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);

        if (re != null && re.getAtmosphereResourceEvent().isSuspended()) {
            re.getAtmosphereResourceEvent().setIsResumedOnTimeout(true);

            Broadcaster b = re.getBroadcaster();
            if (b instanceof DefaultBroadcaster) {
                ((DefaultBroadcaster) b).broadcastOnResume(re);
            }

            if (re.getRequest().getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT) != null) {
                re.getAtmosphereResourceEvent().setIsResumedOnTimeout(
                        (Boolean) re.getRequest().getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT));
            }
            invokeAtmosphereHandler(re);
        }

        return timedoutAction;
    } ##FSTMerge## public Action timedout(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {

        AtmosphereResourceImpl r = null;
        try {
            if (trackActiveRequest) {
                long l = (Long) request.getAttribute(MAX_INACTIVE);
                if (l == -1) {
                    // The closedDetector closed the connection.
                    return timedoutAction;
                }
                request.setAttribute(MAX_INACTIVE, (long) -1);
            }

            logger.debug("Timing out the connection for request {}", request);

            // Something went wrong.
            if (request == null || response == null) {
                logger.warn("Invalid Request/Response: {}/{}", request, response);
                return timedoutAction;
            }

            r = (AtmosphereResourceImpl) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);

            if (r != null && r.getAtmosphereResourceEvent().isSuspended()) {
                r.getAtmosphereResourceEvent().setIsResumedOnTimeout(true);

                Broadcaster b = r.getBroadcaster();
                if (b instanceof DefaultBroadcaster) {
                    ((DefaultBroadcaster) b).broadcastOnResume(r);
                }

                if (request.getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT) != null) {
                    r.getAtmosphereResourceEvent().setIsResumedOnTimeout(
                            (Boolean) request.getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT));
                }

                invokeAtmosphereHandler(r);

                try {
                    response.getOutputStream().close();
                } catch (Throwable t) {
                    try {
                        response.getWriter().close();
                    } catch (Throwable t2) {
                    }
                }
            }
        } catch (Throwable t) {
            logger.error("failed to timeout resource {}", r, t);
        } finally {
            try {
                if (r != null) {
                    r.cancel();
                    r.notifyListeners();
                }
            } catch (Throwable t) {
                logger.trace("timedout", t);
            } finally {
                if (r != null) {
                    destroyResource(r);
                }
            }
        }

        return timedoutAction;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void invokeAtmosphereHandler(AtmosphereResourceImpl r) throws IOException {
        HttpServletRequest req = r.getRequest();
        HttpServletResponse response = r.getResponse();
        String disableOnEvent = r.getAtmosphereConfig().getInitParameter(ApplicationConfig.DISABLE_ONSTATE_EVENT);

        try {
            if (!r.getResponse().equals(response)) {
                logger.warn("Invalid response: {}", response);
            } else if (disableOnEvent == null || !disableOnEvent.equals(String.valueOf(true))) {
                AtmosphereHandler<HttpServletRequest, HttpServletResponse> atmosphereHandler =
                        (AtmosphereHandler<HttpServletRequest, HttpServletResponse>)
                                req.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);

                synchronized (r) {
                    atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());
                    r.setIsInScope(false);

                    Meteor m = (Meteor) req.getAttribute(AtmosphereResourceImpl.METEOR);
                    if (m != null) {
                        m.destroy();
                    }
                }
            }
        } catch (IOException ex) {
            try {
                r.onThrowable(ex);
            } catch (Throwable t) {
                logger.warn("failed calling onThrowable()", ex);
            }
        } finally {
            try {
                aliveRequests.remove(req);
                r.notifyListeners();
            } finally {
                destroyResource(r);
            }
        }
    } ##FSTMerge## void invokeAtmosphereHandler(AtmosphereResourceImpl r) throws IOException {
        HttpServletRequest req = r.getRequest();
        HttpServletResponse response = r.getResponse();
        String disableOnEvent = r.getAtmosphereConfig().getInitParameter(ApplicationConfig.DISABLE_ONSTATE_EVENT);

        try {
            if (!r.getResponse().equals(response)) {
                logger.warn("Invalid response: {}", response);
            } else if (disableOnEvent == null || !disableOnEvent.equals(String.valueOf(true))) {
                AtmosphereHandler<HttpServletRequest, HttpServletResponse> atmosphereHandler =
                        (AtmosphereHandler<HttpServletRequest, HttpServletResponse>)
                                req.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);
                atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());
            } else {
                r.getResponse().flushBuffer();
            }
        } catch (IOException ex) {
            try {
                r.onThrowable(ex);
            } catch (Throwable t) {
                logger.warn("failed calling onThrowable()", ex);
            }
        } finally {
            try {
                aliveRequests.remove(req);
                r.notifyListeners();
            } finally {
                destroyResource(r);
            }
        }
    } ##FSTMerge## void invokeAtmosphereHandler(AtmosphereResourceImpl r) throws IOException {
        if (!r.isInScope()) return;

        HttpServletRequest req = r.getRequest(false);
        String disableOnEvent = r.getAtmosphereConfig().getInitParameter(ApplicationConfig.DISABLE_ONSTATE_EVENT);

        try {
            if (disableOnEvent == null || !disableOnEvent.equals(String.valueOf(true))) {
                AtmosphereHandler<HttpServletRequest, HttpServletResponse> atmosphereHandler =
                        (AtmosphereHandler<HttpServletRequest, HttpServletResponse>)
                                req.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);

                synchronized (r) {
                    atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());

                    Meteor m = (Meteor) req.getAttribute(AtmosphereResourceImpl.METEOR);
                    if (m != null) {
                        m.destroy();
                    }
                }
                req.removeAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
                r.setIsInScope(false);
            }
        } catch (IOException ex) {
            try {
                r.onThrowable(ex);
            } catch (Throwable t) {
                logger.warn("failed calling onThrowable()", ex);
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public static void destroyResource(AtmosphereResource<?, ?> r) {
        if (r == null) return;

        r.removeEventListeners();
        try {
            AtmosphereResourceImpl.class.cast(r).getBroadcaster(false).removeAtmosphereResource(r);
        } catch (IllegalStateException ex) {
            logger.trace(ex.getMessage(), ex);
        }
        if (BroadcasterFactory.getDefault() != null) {
            BroadcasterFactory.getDefault().removeAllAtmosphereResource(r);
        }
    } ##FSTMerge## ##FSTMerge## public static void destroyResource(AtmosphereResource<?, ?> r) {
        if (r == null) return;

        try {
            r.removeEventListeners();
            try {
                AtmosphereResourceImpl.class.cast(r).getBroadcaster(false).removeAtmosphereResource(r);
            } catch (IllegalStateException ex) {
                logger.trace(ex.getMessage(), ex);
            }
            if (BroadcasterFactory.getDefault() != null) {
                BroadcasterFactory.getDefault().removeAllAtmosphereResource(r);
            }
        } catch (Throwable t) {
            logger.trace("destroyResource", t);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public synchronized Action cancelled(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        AtmosphereResourceImpl r = null;
        long l = (Long) req.getAttribute(MAX_INACTIVE);
        if (l == -1) {
            // The closedDetector closed the connection.
            return timedoutAction;
        }

        logger.debug("Cancelling the connection for request {}", req);

        req.setAttribute(MAX_INACTIVE, (long) -1);

        try {
            r = (AtmosphereResourceImpl) req.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
            if (r != null) {
                r.getAtmosphereResourceEvent().setCancelled(true);
                invokeAtmosphereHandler(r);

                try {
                    r.getResponse().sendError(503);
                    r.getResponse().getOutputStream().close();
                } catch (Throwable t) {
                    try {
                        r.getResponse().getWriter().close();
                    } catch (Throwable t2) {
                    }
                }

                r.setIsInScope(false);
            }
        } catch (Throwable ex) {
            // Something wrong happenned, ignore the exception
            logger.debug("failed to cancel resource: " + r, ex);
        } finally {
            try {
                aliveRequests.remove(req);
                if (r != null) {
                    r.notifyListeners();
                }
            } finally {
                if (r != null) {
                    destroyResource(r);
                }
            }
        }

        return cancelledAction;
    } ##FSTMerge## public synchronized Action cancelled(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        AtmosphereResourceImpl re = null;
        long l = (Long) req.getAttribute(MAX_INACTIVE);
        if (l == -1) {
            // The closedDetector closed the connection.
            return timedoutAction;
        }
        req.setAttribute(MAX_INACTIVE, (long) -1);

        try {
            re = (AtmosphereResourceImpl) req.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
            if (re != null) {
                re.getAtmosphereResourceEvent().setCancelled(true);
                invokeAtmosphereHandler(re);
                re.setIsInScope(false);
            }
        } catch (Throwable ex) {
            // Something wrong happenned, ignore the exception
            logger.debug("failed to cancel resource: " + re, ex);
        } finally {
            try {
                aliveRequests.remove(req);
                if (re != null) {
                    re.notifyListeners();
                }
            } finally {
                if (re != null) {
                    destroyResource(re);
                }
            }
        }

        return cancelledAction;
    } ##FSTMerge## public synchronized Action cancelled(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        AtmosphereResourceImpl r = null;
        try {
            if (trackActiveRequest) {
                long l = (Long) req.getAttribute(MAX_INACTIVE);
                if (l == -1) {
                    // The closedDetector closed the connection.
                    return timedoutAction;
                }
                req.setAttribute(MAX_INACTIVE, (long) -1);
            }

            logger.debug("Cancelling the connection for request {}", req);

            r = (AtmosphereResourceImpl) req.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
            if (r != null) {
                r.getAtmosphereResourceEvent().setCancelled(true);
                invokeAtmosphereHandler(r);

                try {
                    r.getResponse().sendError(503);
                    r.getResponse().getOutputStream().close();
                } catch (Throwable t) {
                    try {
                        r.getResponse().getWriter().close();
                    } catch (Throwable t2) {
                    }
                }

                r.setIsInScope(false);
            }
        } catch (Throwable ex) {
            // Something wrong happenned, ignore the exception
            logger.debug("failed to cancel resource: " + r, ex);
        } finally {
            try {
                if (r != null) {
                    r.cancel();
                    r.notifyListeners();
                }
            } catch (Throwable t) {
                logger.trace("cancel", t);
            } finally {
                if (r != null) {
                    destroyResource(r);
                }
            }
        }

        return cancelledAction;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected AtmosphereHandlerWrapper map(String path) {
        AtmosphereHandlerWrapper atmosphereHandlerWrapper = config.handlers().get(path);
        if (atmosphereHandlerWrapper == null) {
            final Map<String, String> m = new HashMap<String, String>();
            for (Map.Entry<String, AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {
                UriTemplate t = new UriTemplate(e.getKey());
                logger.trace("Trying to map {} to {}", t, path);
                if (t.match(path, m)) {
                    atmosphereHandlerWrapper = e.getValue();
                    logger.trace("Mapped {} to {}", t, e.getValue());
                    break;
                }
            }
        }
        return atmosphereHandlerWrapper;
    } ##FSTMerge## protected AtmosphereHandlerWrapper map(String path) {
        AtmosphereHandlerWrapper atmosphereHandlerWrapper = config.handlers().get(path);
        if (atmosphereHandlerWrapper == null) {
            final Map<String, String> m = new HashMap<String, String>();
            for (Map.Entry<String, AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {
                UriTemplate t = new UriTemplate(e.getKey());
                logger.debug("Trying to map {} to {}", t, path);
                if (t.match(path, m)) {
                    atmosphereHandlerWrapper = e.getValue();
                    logger.trace("Mapped {} to {}", t, e.getValue());
                    break;
                }
            }
        }
        return atmosphereHandlerWrapper;
    } ##FSTMerge##
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String ATMOSPHERE_HANDLER = AtmosphereHandler.class.getName(); ##FSTMerge## ##FSTMerge## String ATMOSPHERE_HANDLER = AtmosphereHandler.class.getName();
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String ATMOSPHERE_HANDLER_MAPPING = AtmosphereHandler.class.getName() + ".contextRoot"; ##FSTMerge## ##FSTMerge## String ATMOSPHERE_HANDLER_MAPPING = AtmosphereHandler.class.getName() + ".contextRoot";
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String SERVLET_CLASS = "org.atmosphere.servlet"; ##FSTMerge## ##FSTMerge## String SERVLET_CLASS = "org.atmosphere.servlet";
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String FILTER_CLASS = "org.atmosphere.filter"; ##FSTMerge## ##FSTMerge## String FILTER_CLASS = "org.atmosphere.filter";
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String MAPPING = "org.atmosphere.mapping"; ##FSTMerge## ##FSTMerge## String MAPPING = "org.atmosphere.mapping";
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String FILTER_NAME = "org.atmosphere.filter.name"; ##FSTMerge## ##FSTMerge## String FILTER_NAME = "org.atmosphere.filter.name";
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String BROADCASTER_CACHE_STRATEGY = BroadcasterCache.class.getName() + ".strategy"; ##FSTMerge## ##FSTMerge## String BROADCASTER_CACHE_STRATEGY = BroadcasterCache.class.getName() + ".strategy";
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);

        // Comet is not enabled.
        if (event == null) {
            throw unableToDetectComet;
        }

        Action action = null;
        // For now, we are just interested in CometEvent.READ
        if (event.getEventType() == EventType.BEGIN) {
            action = suspended(req, res);
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", res);

                // Do nothing except setting the times out
                try {
                    if (action.timeout != -1) {
                        event.setTimeout((int) action.timeout);
                    } else {
                        event.setTimeout(Integer.MAX_VALUE);
                    }
                } catch (UnsupportedOperationException ex) {
                    // Swallow s Tomcat APR isn't supporting time out
                    // TODO: Must implement the same functionality using a Scheduler
                }
            } else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resuming response: {}", res);
                event.close();
            } else {
                event.close();
            }
        } else if (event.getEventType() == EventType.READ) {
            // Not implemented
        } else if (event.getEventSubType() == CometEvent.EventSubType.CLIENT_DISCONNECT) {
            logger.debug("Client closed connection: response: {}", res);

            if (!resumed.remove(event)) {
                logger.debug("Client closed connection: response: {}", res);
                action = cancelled(req, res);
            } else {
                logger.debug("Cancelling response: {}", res);
            }

            event.close();
        } else if (event.getEventSubType() == CometEvent.EventSubType.TIMEOUT) {
            logger.debug("Timing out response: {}", res);

            action = timedout(req, res);
            event.close();
        } else if (event.getEventType() == EventType.ERROR) {
            event.close();
        } else if (event.getEventType() == EventType.END) {
            if (!resumed.remove(event)) {
                logger.debug("Client closed connection: response: {}", res);
                action = cancelled(req, res);
            } else {
                logger.trace("Cancelling response: {}", res);
            }

            event.close();
        }
        return action;
    } ##FSTMerge## public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);

        // Comet is not enabled.
        if (event == null) {
            throw unableToDetectComet;
        }

        Action action = null;
        // For now, we are just interested in CometEvent.READ
        if (event.getEventType() == EventType.BEGIN) {
            action = suspended(req, res);
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", res);

                // Do nothing except setting the times out
                try {
                    if (action.timeout != -1) {
                        event.setTimeout((int) action.timeout);
                    } else {
                        event.setTimeout(Integer.MAX_VALUE);
                    }
                } catch (UnsupportedOperationException ex) {
                    // Swallow s Tomcat APR isn't supporting time out
                    // TODO: Must implement the same functionality using a Scheduler
                }
            } else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resuming response: {}", res);
                event.close();
            } else {
                event.close();
            }
        } else if (event.getEventType() == EventType.READ) {
            // Not implemented
        } else if (event.getEventSubType() == CometEvent.EventSubType.CLIENT_DISCONNECT) {
            logger.debug("Client closed connection: response: {}", res);

            if (!resumed.remove(event)) {
                logger.debug("Client closed connection: response: {}", res);
                action = cancelled(req, res);
            } else {
                logger.debug("Cancelling response: {}", res);
            }

            event.close();
        } else if (event.getEventSubType() == CometEvent.EventSubType.TIMEOUT) {
            logger.debug("Timing out response: {}", res);

            action = timedout(req, res);
            event.close();
        } else if (event.getEventType() == EventType.ERROR) {
            event.close();
        } else if (event.getEventType() == EventType.END) {
            if (!resumed.remove(event)) {
                logger.debug("Client closed connection: response: {}", res);
                action = cancelled(req, res);
            } else {
                logger.debug("Cancelling response: {}", res);
            }

            event.close();
        }
        return action;
    } ##FSTMerge## public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);

        // Comet is not enabled.
        if (event == null) {
            throw unableToDetectComet;
        }

        Action action = null;
        // For now, we are just interested in CometEvent.READ
        if (event.getEventType() == EventType.BEGIN) {
            action = suspended(req, res);
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", res);

                // Do nothing except setting the times out
                try {
                    if (action.timeout != -1) {
                        event.setTimeout((int) action.timeout);
                    } else {
                        event.setTimeout(Integer.MAX_VALUE);
                    }
                } catch (UnsupportedOperationException ex) {
                    // Swallow s Tomcat APR isn't supporting time out
                    // TODO: Must implement the same functionality using a Scheduler
                }
            } else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resuming response: {}", res);
                event.close();
            } else {
                event.close();
            }
        } else if (event.getEventType() == EventType.READ) {
            // Not implemented
        } else if (event.getEventSubType() == CometEvent.EventSubType.CLIENT_DISCONNECT) {
            logger.debug("Client closed connection: response: {}", res);

            if (!resumed.remove(event)) {
                logger.debug("Client closed connection: response: {}", res);
                action = cancelled(req, res);
            } else {
                logger.debug("Cancelling response: {}", res);
            }

            event.close();
        } else if (event.getEventSubType() == CometEvent.EventSubType.TIMEOUT) {
            logger.debug("Timing out response: {}", res);

            action = timedout(req, res);
            event.close();
        } else if (event.getEventType() == EventType.ERROR) {
            event.close();
        } else if (event.getEventType() == EventType.END) {
            if (!resumed.remove(event)) {
                /**
                 * Ignore END (the application just read the complete InputStream
                 */
                //action = cancelled(req, res);
            } else {
                logger.trace("Cancelling response: {}", res);
            }
        }
        return action;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);

        // Comet is not enabled.
        if (event == null) {
            throw unableToDetectComet;
        }

        Action action = null;
        // For now, we are just interested in CometEvent.READ
        if (event.getEventType() == EventType.BEGIN) {
            action = suspended(req, res);
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", res);

                // Do nothing except setting the times out
                try {
                    if (action.timeout != -1) {
                        event.setTimeout((int) action.timeout);
                    } else {
                        event.setTimeout(Integer.MAX_VALUE);
                    }
                } catch (UnsupportedOperationException ex) {
                    // Swallow s Tomcat APR isn't supporting time out
                    // TODO: Must implement the same functionality using a Scheduler
                }
            } else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resuming response: {}", res);
                bz51881(event);
            } else {
                bz51881(event);
            }
        } else if (event.getEventType() == EventType.READ) {
            // Not implemented
        } else if (event.getEventSubType() == CometEvent.EventSubType.CLIENT_DISCONNECT) {
            logger.debug("Client closed connection: response: {}", res);

            if (!resumed.remove(event)) {
                logger.debug("Client closed connection: response: {}", res);
                action = cancelled(req, res);
            } else {
                logger.debug("Cancelling response: {}", res);
            }

            bz51881(event);
        } else if (event.getEventSubType() == CometEvent.EventSubType.TIMEOUT) {
            logger.debug("Timing out response: {}", res);

            action = timedout(req, res);
            bz51881(event);
        } else if (event.getEventType() == EventType.ERROR) {
            bz51881(event);
        } else if (event.getEventType() == EventType.END) {
            if (!resumed.remove(event)) {
                logger.debug("Client closed connection: response: {}", res);
                action = cancelled(req, res);
            } else {
                logger.debug("Cancelling response: {}", res);
            }

            bz51881(event);
        }
        return action;
    } ##FSTMerge## public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);

        // Comet is not enabled.
        if (event == null) {
            throw unableToDetectComet;
        }

        Action action = null;
        // For now, we are just interested in CometEvent.READ
        if (event.getEventType() == EventType.BEGIN) {
            action = suspended(req, res);
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", res);

                // Do nothing except setting the times out
                try {
                    if (action.timeout != -1) {
                        event.setTimeout((int) action.timeout);
                    } else {
                        event.setTimeout(Integer.MAX_VALUE);
                    }
                } catch (UnsupportedOperationException ex) {
                    // Swallow s Tomcat APR isn't supporting time out
                    // TODO: Must implement the same functionality using a Scheduler
                }
            } else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resuming response: {}", res);
                event.close();
            } else {
                event.close();
            }
        } else if (event.getEventType() == EventType.READ) {
            // Not implemented
        } else if (event.getEventSubType() == CometEvent.EventSubType.CLIENT_DISCONNECT) {
            logger.debug("Client closed connection: response: {}", res);

            if (!resumed.remove(event)) {
                logger.debug("Client closed connection: response: {}", res);
                action = cancelled(req, res);
            } else {
                logger.debug("Cancelling response: {}", res);
            }

            event.close();
        } else if (event.getEventSubType() == CometEvent.EventSubType.TIMEOUT) {
            logger.debug("Timing out response: {}", res);

            action = timedout(req, res);
            event.close();
        } else if (event.getEventType() == EventType.ERROR) {
            event.close();
        } else if (event.getEventType() == EventType.END) {
            if (!resumed.remove(event)) {
                logger.debug("Client closed connection: response: {}", res);
                action = cancelled(req, res);
            } else {
                logger.debug("Cancelling response: {}", res);
            }

            event.close();
        }
        return action;
    } ##FSTMerge## public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);

        // Comet is not enabled.
        if (event == null) {
            throw unableToDetectComet;
        }

        Action action = null;
        // For now, we are just interested in CometEvent.READ
        if (event.getEventType() == EventType.BEGIN) {
            action = suspended(req, res);
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", res);

                // Do nothing except setting the times out
                try {
                    if (action.timeout != -1) {
                        event.setTimeout((int) action.timeout);
                    } else {
                        event.setTimeout(Integer.MAX_VALUE);
                    }
                } catch (UnsupportedOperationException ex) {
                    // Swallow s Tomcat APR isn't supporting time out
                    // TODO: Must implement the same functionality using a Scheduler
                }
            } else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resuming response: {}", res);
                bz51881(event);
            } else {
                bz51881(event);
            }
        } else if (event.getEventType() == EventType.READ) {
            // Not implemented
        } else if (event.getEventSubType() == CometEvent.EventSubType.CLIENT_DISCONNECT) {
            logger.debug("Client closed connection: response: {}", res);

            if (!resumed.remove(event)) {
                logger.debug("Client closed connection: response: {}", res);
                action = cancelled(req, res);
            } else {
                logger.debug("Cancelling response: {}", res);
            }

            bz51881(event);
        } else if (event.getEventSubType() == CometEvent.EventSubType.TIMEOUT) {
            logger.debug("Timing out response: {}", res);

            action = timedout(req, res);
            bz51881(event);
        } else if (event.getEventType() == EventType.ERROR) {
            bz51881(event);
        } else if (event.getEventType() == EventType.END) {
            if (!resumed.remove(event)) {
                /**
                 * Ignore END (the application just read the complete InputStream
                 */
                //action = cancelled(req, res);
            } else {
                logger.debug("Cancelling response: {}", res);
                bz51881(event);
            }
        }
        return action;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/Tomcat7CometSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private void bz51881(CometEvent event) throws IOException {
        String[] tomcatVersion =  config.getServletContext().getServerInfo().substring(14).split("\\.");
        String minorVersion = tomcatVersion[2];
        if (minorVersion.indexOf("-") != -1) {
            minorVersion = minorVersion.substring(0, minorVersion.indexOf("-"));
            if (Integer.valueOf(minorVersion) == 22) {
                minorVersion = "23";
            }
        }

        if (Integer.valueOf(tomcatVersion[0]) == 7 && Integer.valueOf(minorVersion) < 23) {
            logger.info("Patching Tomcat 7.0.22 and lower bz51881. Expect NPE inside CoyoteAdapter, just ignore them. Upgrade to 7.0.23");
            try {
                RequestFacade request = RequestFacade.class.cast(event.getHttpServletRequest());
                Field coyoteRequest = RequestFacade.class.getDeclaredField("request");
                coyoteRequest.setAccessible(true);
                Request r = (Request) coyoteRequest.get(request);
                r.recycle();

                Field mappingData = Request.class.getDeclaredField("mappingData");
                mappingData.setAccessible(true);
                MappingData m = new MappingData();
                m.context = null;
                mappingData.set(r, m);
            } catch (Throwable t) {
                logger.trace("Was unable to recycle internal Tomcat object");
            } finally {
                try {
                    event.close();
                } catch (IllegalStateException e) {
                    logger.trace("", e);
                }
            }

            try {
                ResponseFacade response = ResponseFacade.class.cast(event.getHttpServletResponse());
                Field coyoteResponse = ResponseFacade.class.getDeclaredField("response");
                coyoteResponse.setAccessible(true);
                Response r = (Response) coyoteResponse.get(response);
                r.recycle();
            } catch (Throwable t) {
                logger.trace("Was unable to recycle internal Tomcat object");
            }
        } else {
            event.close();
        }
    } ##FSTMerge## ##FSTMerge## private void bz51881(CometEvent event) throws IOException {
        String[] tomcatVersion =  config.getServletContext().getServerInfo().substring(14).split("\\.");
        String minorVersion = tomcatVersion[2];
        if (minorVersion.indexOf("-") != -1) {
            minorVersion = minorVersion.substring(0, minorVersion.indexOf("-"));
            if (Integer.valueOf(minorVersion) == 22) {
                minorVersion = "23";
            }
        }

        if (Integer.valueOf(tomcatVersion[0]) == 7 && Integer.valueOf(minorVersion) < 23) {
            logger.info("Patching Tomcat 7.0.22 and lower bz51881. Expect NPE inside CoyoteAdapter, just ignore them. Upgrade to 7.0.23");
            try {
                RequestFacade request = RequestFacade.class.cast(event.getHttpServletRequest());
                Field coyoteRequest = RequestFacade.class.getDeclaredField("request");
                coyoteRequest.setAccessible(true);
                Request r = (Request) coyoteRequest.get(request);
                r.recycle();

                Field mappingData = Request.class.getDeclaredField("mappingData");
                mappingData.setAccessible(true);
                MappingData m = new MappingData();
                m.context = null;
                mappingData.set(r, m);
            } catch (Throwable t) {
                logger.trace("Was unable to recycle internal Tomcat object");
            } finally {
                try {
                    event.close();
                } catch (IllegalStateException e) {
                    logger.trace("", e);
                }
            }

            try {
                ResponseFacade response = ResponseFacade.class.cast(event.getHttpServletResponse());
                Field coyoteResponse = ResponseFacade.class.getDeclaredField("response");
                coyoteResponse.setAccessible(true);
                Response r = (Response) coyoteResponse.get(response);
                r.recycle();
            } catch (Throwable t) {
                logger.trace("Was unable to recycle internal Tomcat object");
            }
        } else {
            event.close();
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/Tomcat7CometSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void action(AtmosphereResourceImpl resource) {
        super.action(resource);
        if (resource.action().type == Action.TYPE.RESUME && resource.isInScope()) {
            try {
                CometEvent event = (CometEvent) resource.getRequest().getAttribute(COMET_EVENT);
                if (event == null) return;
                resumed.offer(event);

                // Resume without closing the underlying suspended connection.
                if (config.getInitParameter(ApplicationConfig.RESUME_AND_KEEPALIVE) == null
                        || config.getInitParameter(ApplicationConfig.RESUME_AND_KEEPALIVE).equalsIgnoreCase("false")) {
                    bz51881(event);
                }
            } catch (IOException ex) {
                logger.debug("action failed", ex);
            }
        }
    } ##FSTMerge## @Override
    public void action(AtmosphereResourceImpl resource) {
        super.action(resource);
        if (resource.action().type == Action.TYPE.RESUME && resource.isInScope()) {
            try {
                CometEvent event = (CometEvent) resource.getRequest().getAttribute(COMET_EVENT);
                if (event == null) return;
                resumed.offer(event);

                // Resume without closing the underlying suspended connection.
                if (config.getInitParameter(ApplicationConfig.RESUME_AND_KEEPALIVE) == null
                        || config.getInitParameter(ApplicationConfig.RESUME_AND_KEEPALIVE).equalsIgnoreCase("false")) {
                    event.close();
                }
            } catch (IOException ex) {
                logger.debug("action failed", ex);
            }
        }
    } ##FSTMerge## @Override
    public void action(AtmosphereResourceImpl resource) {
        super.action(resource);
        if (resource.action().type == Action.TYPE.RESUME && resource.isInScope()) {
            try {
                CometEvent event = (CometEvent) resource.getRequest().getAttribute(COMET_EVENT);
                if (event == null) return;
                resumed.offer(event);

                // Resume without closing the underlying suspended connection.
                if (config.getInitParameter(ApplicationConfig.RESUME_AND_KEEPALIVE) == null
                        || config.getInitParameter(ApplicationConfig.RESUME_AND_KEEPALIVE).equalsIgnoreCase("false")) {
                    bz51881(event);
                }
            } catch (IOException ex) {
                logger.debug("action failed", ex);
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/Tomcat7CometSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public Action cancelled(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {

        Action action = super.cancelled(req, res);
        if (req.getAttribute(MAX_INACTIVE) != null && Long.class.cast(req.getAttribute(MAX_INACTIVE)) == -1) {
            CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);
            if (event == null) return action;
            resumed.offer(event);
            bz51881(event);
        }
        return action;
    } ##FSTMerge## @Override
    public Action cancelled(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        Action action = super.cancelled(req, res);
        if (req.getAttribute(MAX_INACTIVE) != null && Long.class.cast(req.getAttribute(MAX_INACTIVE)) == -1) {
            CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);
            if (event == null) return action;
            resumed.offer(event);
            event.close();
        }
        return action;
    } ##FSTMerge## @Override
    public Action cancelled(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {

        Action action = super.cancelled(req, res);
        if (req.getAttribute(MAX_INACTIVE) != null && Long.class.cast(req.getAttribute(MAX_INACTIVE)) == -1) {
            CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);
            if (event == null) return action;
            resumed.offer(event);
            bz51881(event);
        }
        return action;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/Tomcat7CometSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void action(AtmosphereResourceImpl actionEvent) {
        super.action(actionEvent);
        if (actionEvent.action().type == Action.TYPE.RESUME && actionEvent.isInScope()) {
            AsyncContext asyncContext =
                    (AsyncContext) actionEvent.getRequest().getAttribute("org.atmosphere.container.asyncContext");

            // Try to find using the Session
            if (asyncContext == null && supportSession()) {
                asyncContext = (AsyncContext) actionEvent.getRequest().getSession()
                        .getAttribute("org.atmosphere.container.asyncContext");
            }

            if (asyncContext != null && (config.getInitParameter(ApplicationConfig.RESUME_AND_KEEPALIVE) == null
                    || config.getInitParameter(ApplicationConfig.RESUME_AND_KEEPALIVE).equalsIgnoreCase("false"))) {
                asyncContext.complete();
            }
        } else {
            if (!actionEvent.isInScope()) {
                logger.debug("Already resumed or cancelled: event: {}", actionEvent);
            }
        }
    } ##FSTMerge## @Override
    public void action(AtmosphereResourceImpl actionEvent) {
        if (actionEvent.action().type == Action.TYPE.RESUME && actionEvent.isInScope()) {
            AsyncContext asyncContext =
                    (AsyncContext) actionEvent.getRequest().getAttribute("org.atmosphere.container.asyncContext");

            // Try to find using the Session
            if (asyncContext == null && supportSession()) {
                asyncContext = (AsyncContext) actionEvent.getRequest().getSession()
                        .getAttribute("org.atmosphere.container.asyncContext");
            }

            if (asyncContext != null && (config.getInitParameter(ApplicationConfig.RESUME_AND_KEEPALIVE) == null
                    || config.getInitParameter(ApplicationConfig.RESUME_AND_KEEPALIVE).equalsIgnoreCase("false"))) {
                asyncContext.complete();
            }
        } else {
            if (!actionEvent.isInScope()) {
                logger.debug("Already resumed or cancelled: event: {}", actionEvent);
            }
        }
    } ##FSTMerge## @Override
    public void action(AtmosphereResourceImpl actionEvent) {
        super.action(actionEvent);
        if (actionEvent.action().type == Action.TYPE.RESUME && actionEvent.isInScope()) {
            AsyncContext asyncContext =
                    (AsyncContext) actionEvent.getRequest().getAttribute("org.atmosphere.container.asyncContext");

            // Try to find using the Session
            if (asyncContext == null && supportSession()) {
                asyncContext = (AsyncContext) actionEvent.getRequest().getSession()
                        .getAttribute("org.atmosphere.container.asyncContext");
            }

            if (asyncContext != null && (config.getInitParameter(ApplicationConfig.RESUME_AND_KEEPALIVE) == null
                    || config.getInitParameter(ApplicationConfig.RESUME_AND_KEEPALIVE).equalsIgnoreCase("false"))) {
                asyncContext.complete();
            }
        } else {
            if (!actionEvent.isInScope()) {
                logger.debug("Already resumed or cancelled: event: {}", actionEvent);
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public Action resumed(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {
        logger.debug("(resumed) invoked:\n HttpServletRequest: {}\n HttpServletResponse: {}", request, response);
        AtmosphereResourceImpl r =
                (AtmosphereResourceImpl)request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
        AtmosphereHandler<HttpServletRequest, HttpServletResponse> atmosphereHandler =
                (AtmosphereHandler<HttpServletRequest, HttpServletResponse>)
                        request.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);

        synchronized(r) {
            atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());
            r.setIsInScope(false);
        }
        return new Action(Action.TYPE.RESUME);
    } ##FSTMerge## @Override
    public Action resumed(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {
        logger.debug("(resumed) invoked:\n HttpServletRequest: {}\n HttpServletResponse: {}", request, response);
        AtmosphereResourceImpl r =
                (AtmosphereResourceImpl)request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
        AtmosphereHandler<HttpServletRequest, HttpServletResponse> atmosphereHandler =
                (AtmosphereHandler<HttpServletRequest, HttpServletResponse>)
                        request.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);
        atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());
        return new Action(Action.TYPE.RESUME);
    } ##FSTMerge## @Override
    public Action resumed(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {
        AtmosphereResourceImpl r =
                (AtmosphereResourceImpl) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
        AtmosphereHandler<HttpServletRequest, HttpServletResponse> atmosphereHandler =
                (AtmosphereHandler<HttpServletRequest, HttpServletResponse>)
                        request.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);

        synchronized (r) {
            atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());
            r.setIsInScope(false);
        }
        return new Action(Action.TYPE.RESUME);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/Jetty7CometSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void init(ServletConfig sc) throws ServletException {
        super.init(sc);
        WebSocketEngine.getEngine().register(new GrizzlyApplication(config));
    } ##FSTMerge## @Override
    public void init(ServletConfig sc) throws ServletException {
        super.init(sc);
        WebSocketEngine.getEngine().register(sc.getServletContext().getContextPath(), new GrizzlyApplication());
    } ##FSTMerge## @Override
    public void init(ServletConfig sc) throws ServletException {
        super.init(sc);
        WebSocketEngine.getEngine().register(new GrizzlyApplication(config));
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final static ##FSTMerge## public ##FSTMerge## private final static
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final AtmosphereConfig config; ##FSTMerge## ##FSTMerge## private final AtmosphereConfig config;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public GrizzlyApplication(AtmosphereConfig config) {
            this.config = config;
        } ##FSTMerge## ##FSTMerge## public GrizzlyApplication(AtmosphereConfig config) {
            this.config = config;
            this.webSocketProtocol = config.getServlet().getWebSocketProtocol();
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void onConnect(com.sun.grizzly.websockets.WebSocket w) {
            super.onConnect(w);
            logger.debug("onOpen");
            if (!DefaultWebSocket.class.isAssignableFrom(w.getClass())) {
                throw new IllegalStateException();
            }

            WebSocketProtocol webSocketProtocol;
            try {
                webSocketProtocol = (WebSocketProtocol) GlassFishWebSocketSupport.class.getClassLoader()
                        .loadClass(config.getServlet().getWebSocketProtocolClassName()).newInstance();
            } catch (Exception ex) {
                logger.error("Cannot load the WebSocketProtocol {}", config.getServlet().getWebSocketProtocolClassName(), ex);
                webSocketProtocol = new SimpleHttpProtocol();
            }
            webSocketProtocol.configure(config.getServlet().getAtmosphereConfig());

            DefaultWebSocket webSocket = DefaultWebSocket.class.cast(w);
            try {
                webSocketProcessor = new WebSocketProcessor(config.getServlet(), new GrizzlyWebSocket(webSocket), webSocketProtocol);
                webSocketProcessor.dispatch(webSocket.getRequest());
            } catch (Exception e) {
                logger.warn("failed to connect to web socket", e);
            }
        } ##FSTMerge## public void onConnect(com.sun.grizzly.websockets.WebSocket w) {

            if (!BaseServerWebSocket.class.isAssignableFrom(w.getClass())) {
                throw new IllegalStateException();
            }

            BaseServerWebSocket webSocket = BaseServerWebSocket.class.cast(w);
            try {

                webSocketProcessor = (WebSocketProcessor) GrizzlyWebSocket.class.getClassLoader()
                        .loadClass(config.getServlet().getWebSocketProtocolClassName())
                        .getDeclaredConstructor(new Class[]{AtmosphereServlet.class, WebSocket.class})
                        .newInstance(new Object[]{config.getServlet(), new GrizzlyWebSocket(webSocket)});

                webSocketProcessor.dispatch(new HttpServletRequestWrapper(webSocket.getRequest()));
            } catch (Exception e) {
                logger.warn("failed to connect to web socket", e);
            }
        } ##FSTMerge## public void onConnect(com.sun.grizzly.websockets.WebSocket w) {
            super.onConnect(w);
            logger.debug("onOpen");
            if (!DefaultWebSocket.class.isAssignableFrom(w.getClass())) {
                throw new IllegalStateException();
            }

            DefaultWebSocket webSocket = DefaultWebSocket.class.cast(w);
            try {
                webSocketProcessor = new WebSocketProcessor(config.getServlet(), new GrizzlyWebSocket(webSocket), webSocketProtocol);
                webSocketProcessor.dispatch(webSocket.getRequest());
            } catch (Exception e) {
                logger.warn("failed to connect to web socket", e);
            }
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void onClose(com.sun.grizzly.websockets.WebSocket w, DataFrame df) {
            super.onClose(w, df);
            logger.debug("onClose {} ");
            webSocketProcessor.close();
        } ##FSTMerge## ##FSTMerge## @Override
        public void onClose(com.sun.grizzly.websockets.WebSocket w, DataFrame df) {
            super.onClose(w, df);
            logger.debug("onClose {} ");
            webSocketProcessor.close();
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void onMessage(com.sun.grizzly.websockets.WebSocket w, String text) {
            logger.debug("onMessage {} ");
            webSocketProcessor.invokeWebSocketProtocol(text);
        } ##FSTMerge## ##FSTMerge## @Override
        public void onMessage(com.sun.grizzly.websockets.WebSocket w, String text) {
            logger.debug("onMessage {} ");
            webSocketProcessor.invokeWebSocketProtocol(text);
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void onMessage(com.sun.grizzly.websockets.WebSocket w, byte[] bytes) {
            logger.debug("onMessage (bytes) {} ");
            webSocketProcessor.invokeWebSocketProtocol(bytes, 0, bytes.length);
        } ##FSTMerge## ##FSTMerge## @Override
        public void onMessage(com.sun.grizzly.websockets.WebSocket w, byte[] bytes) {
            logger.debug("onMessage (bytes) {} ");
            webSocketProcessor.invokeWebSocketProtocol(bytes, 0, bytes.length);
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void onPing(com.sun.grizzly.websockets.WebSocket w, byte[] bytes) {
            logger.debug("onPing (bytes) {} ");
        } ##FSTMerge## ##FSTMerge## @Override
        public void onPing(com.sun.grizzly.websockets.WebSocket w, byte[] bytes) {
            logger.debug("onPing (bytes) {} ");
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void onPong(com.sun.grizzly.websockets.WebSocket w, byte[] bytes) {
            logger.debug("onPong (bytes) {} ");
        } ##FSTMerge## ##FSTMerge## @Override
        public void onPong(com.sun.grizzly.websockets.WebSocket w, byte[] bytes) {
            logger.debug("onPong (bytes) {} ");
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void onFragment(com.sun.grizzly.websockets.WebSocket w, byte[] bytes, boolean last) {
            logger.debug("onFragment (bytes) {} ");
        } ##FSTMerge## ##FSTMerge## @Override
        public void onFragment(com.sun.grizzly.websockets.WebSocket w, byte[] bytes, boolean last) {
            logger.debug("onFragment (bytes) {} ");
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void onFragment(com.sun.grizzly.websockets.WebSocket w, String text, boolean last) {
            logger.debug("onFragment (string) {} ");
        } ##FSTMerge## ##FSTMerge## @Override
        public void onFragment(com.sun.grizzly.websockets.WebSocket w, String text, boolean last) {
            logger.debug("onFragment (string) {} ");
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected ScheduledExecutorService reaper = Executors.newSingleThreadScheduledExecutor(); ##FSTMerge## protected final ScheduledExecutorService reaper = Executors.newSingleThreadScheduledExecutor(); ##FSTMerge## protected ScheduledExecutorService reaper = Executors.newSingleThreadScheduledExecutor();
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cache/BroadcasterCacheBase.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public final void start() {
        reaper.scheduleAtFixedRate(new Runnable() {

            public void run() {
                Iterator<CachedMessage> i = queue.iterator();
                CachedMessage message;
                while (i.hasNext()) {
                    message = i.next();
                    logger.trace("Message: {}", message.message());

                    if (System.currentTimeMillis() - message.currentTime() > maxCachedinMs) {
                        logger.trace("Pruning: {}", message.message());
                        queue.remove(message);
                    } else {
                        break;
                    }
                }
            }
        }, 0, 60, TimeUnit.SECONDS);
    } ##FSTMerge## public final void start() {
        reaper.scheduleAtFixedRate(new Runnable() {

            public void run() {
                Iterator<CachedMessage> i = queue.iterator();
                CachedMessage message;
                while (i.hasNext()) {
                    message = i.next();
                    logger.debug("Message: {}", message.message());

                    if (System.currentTimeMillis() - message.currentTime() > maxCachedinMs) {
                        logger.debug("Pruning: {}", message.message());
                        queue.remove(message);
                    } else {
                        break;
                    }
                }
            }
        }, 0, 60, TimeUnit.SECONDS);
    } ##FSTMerge## public final void start() {
        reaper.scheduleAtFixedRate(new Runnable() {

            public void run() {
                Iterator<CachedMessage> i = queue.iterator();
                CachedMessage message;
                while (i.hasNext()) {
                    message = i.next();
                    logger.trace("Message: {}", message.message());

                    if (System.currentTimeMillis() - message.currentTime() > maxCachedinMs) {
                        logger.trace("Pruning: {}", message.message());
                        queue.remove(message);
                    } else {
                        break;
                    }
                }
            }
        }, 0, 60, TimeUnit.SECONDS);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cache/BroadcasterCacheBase.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setExecutorService(ScheduledExecutorService reaper){
        if (reaper != null) {
            stop();
        }
        this.reaper = reaper;
    } ##FSTMerge## ##FSTMerge## public void setExecutorService(ScheduledExecutorService reaper){
        if (reaper != null) {
            stop();
        }
        this.reaper = reaper;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cache/BroadcasterCacheBase.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public final synchronized void addToCache(
            final AtmosphereResource<HttpServletRequest, HttpServletResponse> resource, final Object object) {
        logger.trace("Adding message for resource: {}, object: {}", resource, object);

        CachedMessage cm = new CachedMessage(object, System.currentTimeMillis(), null);
        CachedMessage prev = null;
        if (!queue.isEmpty()) {
            prev = queue.get(queue.size() - 1);
        }

        if (prev != null) {
            prev.next(cm);
        }

        // Some indexing issue if this return true
        if (!queue.contains(cm)) {
            queue.add(cm);
        }

        if (prev == null) {
            cm = new CachedMessage(true);
        }

        if (resource != null) {
            cache(resource, cm);
        }
    } ##FSTMerge## public final synchronized void addToCache(
            final AtmosphereResource<HttpServletRequest, HttpServletResponse> resource, final Object object) {
        logger.debug("Adding message for resource: {}, object: {}", resource, object);

        CachedMessage cm = new CachedMessage(object, System.currentTimeMillis(), null);
        CachedMessage prev = null;
        if (!queue.isEmpty()) {
            prev = queue.get(queue.size() - 1);
        }

        if (prev != null) {
            prev.next(cm);
        }

        // Some indexing issue if this return true
        if (!queue.contains(cm)) {
            queue.add(cm);
        }

        if (prev == null) {
            cm = new CachedMessage(true);
        }

        if (resource != null) {
            cache(resource, cm);
        }
    } ##FSTMerge## public final synchronized void addToCache(
            final AtmosphereResource<HttpServletRequest, HttpServletResponse> resource, final Object object) {
        logger.trace("Adding message for resource: {}, object: {}", resource, object);

        CachedMessage cm = new CachedMessage(object, System.currentTimeMillis(), null);
        CachedMessage prev = null;
        if (!queue.isEmpty()) {
            prev = queue.get(queue.size() - 1);
        }

        if (prev != null) {
            prev.next(cm);
        }

        // Some indexing issue if this return true
        if (!queue.contains(cm)) {
            queue.add(cm);
        }

        if (prev == null) {
            cm = new CachedMessage(true);
        }

        if (resource != null) {
            cache(resource, cm);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cache/BroadcasterCacheBase.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public RedisFilter(Broadcaster bc, String address) {

        this.bc = bc;
        uri = URI.create(address);

        if (uri == null) return;

        jedisSubscriber = new Jedis(uri.getHost(), uri.getPort());
        try {
            jedisSubscriber.connect();
            auth(jedisSubscriber);
        } catch (JedisException e) {
            logger.error("failed to connect to subscriber: {}", jedisSubscriber, e);
        }

        jedisPublisher = new Jedis(uri.getHost(), uri.getPort());
        try {
            jedisPublisher.connect();
            auth(jedisPublisher);
        } catch (JedisException e) {
            logger.error("failed to connect to publisher: {}", jedisPublisher, e);
        }
    } ##FSTMerge## public RedisFilter(Broadcaster bc, String address) {

        this.bc = bc;
        uri = URI.create(address);

        if (uri == null) return;

        jedisSubscriber = new Jedis(uri.getHost(), uri.getPort());
        try {
            jedisSubscriber.connect();
        } catch (IOException e) {
            logger.error("failed to connect to subscriber: " + jedisSubscriber, e);
        }

        jedisSubscriber.auth(auth);
        jedisSubscriber.flushAll();

        jedisPublisher = new Jedis(uri.getHost(), uri.getPort());
        try {
            jedisPublisher.connect();
        } catch (IOException e) {
            logger.error("failed to connect to publisher: " + jedisPublisher, e);
        }
        jedisPublisher.auth(auth);
        jedisPublisher.flushAll();
    } ##FSTMerge## public RedisFilter(Broadcaster bc, String address) {

        this.bc = bc;
        uri = URI.create(address);

        if (uri == null) return;

        jedisSubscriber = new Jedis(uri.getHost(), uri.getPort());
        try {
            jedisSubscriber.connect();
            auth(jedisSubscriber);
        } catch (JedisException e) {
            logger.error("failed to connect to subscriber: {}", jedisSubscriber, e);
        }

        jedisPublisher = new Jedis(uri.getHost(), uri.getPort());
        try {
            jedisPublisher.connect();
            auth(jedisPublisher);
        } catch (JedisException e) {
            logger.error("failed to connect to publisher: {}", jedisPublisher, e);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void destroy() {
        listener.shutdownNow();
        try {
            jedisPublisher.disconnect();
            jedisSubscriber.disconnect();
        } catch (JedisException e) {
            logger.error("failure encountered during destroy", e);
        }
    } ##FSTMerge## @Override
    public void destroy() {
        listener.shutdownNow();
        try {
            jedisPublisher.disconnect();
            jedisSubscriber.disconnect();
        } catch (IOException e) {
            logger.error("failure encountered during destroy", e);
        }
    } ##FSTMerge## @Override
    public void destroy() {
        listener.shutdownNow();
        try {
            jedisPublisher.disconnect();
            jedisSubscriber.disconnect();
        } catch (JedisException e) {
            logger.error("failure encountered during destroy", e);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public BroadcastFilter.BroadcastAction filter(Object originalMessage, Object o) {
        String contents = originalMessage.toString();

        if (!(receivedMessages.remove(contents))) {
            jedisPublisher.publish(bc.getID(), contents);
        }
        return new BroadcastFilter.BroadcastAction(BroadcastAction.ACTION.CONTINUE, o);
    } ##FSTMerge## @Override
    public BroadcastFilter.BroadcastAction filter(Object originalMessage, Object o) {
        if (!(receivedMessages.remove(originalMessage.toString()))) {
            jedisPublisher.publish(bc.getID(), originalMessage.toString());
        }
        return new BroadcastFilter.BroadcastAction(BroadcastAction.ACTION.CONTINUE, o);
    } ##FSTMerge## @Override
    public BroadcastFilter.BroadcastAction filter(Object originalMessage, Object o) {
        String contents = originalMessage.toString();

        if (!(receivedMessages.remove(contents))) {
            jedisPublisher.publish(bc.getID(), contents);
            return new BroadcastFilter.BroadcastAction(BroadcastAction.ACTION.CONTINUE, o);
        }
        return new BroadcastFilter.BroadcastAction(BroadcastAction.ACTION.ABORT, o);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private void auth(Jedis jedis) {
        if (auth != null) {
            jedis.auth(auth);
        }
        jedis.flushAll();
    } ##FSTMerge## ##FSTMerge## private void auth(Jedis jedis) {
        if (auth != null) {
            jedis.auth(auth);
        }
        jedis.flushAll();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public synchronized void setUp() {

        if (config.getServletConfig().getInitParameter(REDIS_AUTH) != null) {
            authToken = config.getServletConfig().getInitParameter(REDIS_AUTH);
        }

        if (config.getServletConfig().getInitParameter(REDIS_SERVER) != null) {
            uri = URI.create(config.getServletConfig().getInitParameter(REDIS_SERVER));
        } else if (uri == null) {
            throw new NullPointerException("uri cannot be null");
        }

        if (config.getServletConfig().getInitParameter(REDIS_SHARED_POOL) != null) {
            sharedPool = Boolean.parseBoolean(config.getServletConfig().getInitParameter(REDIS_SHARED_POOL));
        }

        logger.info("{} shared connection pool {}", getClass().getName(), sharedPool);

        if (sharedPool) {
            if (config.properties().get(REDIS_SHARED_POOL) != null) {
                jedisPool = (JedisPool) config.properties().get(REDIS_SHARED_POOL);
            }

            // setup is synchronized, no need to sync here as well.
            if (jedisPool == null) {
                GenericObjectPool.Config gConfig = new GenericObjectPool.Config();
                gConfig.testOnBorrow = true;
                gConfig.testWhileIdle = true;

                jedisPool = new JedisPool(gConfig, uri.getHost(), uri.getPort());

                config.properties().put(REDIS_SHARED_POOL, jedisPool);
            } else {
                disconnectSubscriber();
            }
        }

        // We use the pool only for publishing
        jedisSubscriber = new Jedis(uri.getHost(), uri.getPort());
        try {
            jedisSubscriber.connect();
            auth(jedisSubscriber);
        } catch (JedisException e) {
            logger.error("failed to connect subscriber", e);
            disconnectSubscriber();
        }

        jedisPublisher = sharedPool ? null : new Jedis(uri.getHost(), uri.getPort());
        if (!sharedPool) {
            try {
                jedisPublisher.connect();
                auth(jedisPublisher);
            } catch (JedisException e) {
                logger.error("failed to connect publisher", e);
                disconnectPublisher();
            }
        }
    } ##FSTMerge## public synchronized void setUp() {

        if (config.getServletConfig().getInitParameter(REDIS_AUTH) != null) {
            authToken = config.getServletConfig().getInitParameter(REDIS_AUTH);
        }

        if (config.getServletConfig().getInitParameter(REDIS_SERVER) != null) {
            uri = URI.create(config.getServletConfig().getInitParameter(REDIS_SERVER));
        } else if (uri == null) {
            throw new NullPointerException("uri cannot be null");
        }

        if (config.getServletConfig().getInitParameter(REDIS_SHARED_POOL) != null) {
            sharedPool = Boolean.parseBoolean(config.getServletConfig().getInitParameter(REDIS_SHARED_POOL));
        }

        logger.info("{} shared connection pool {}", getClass().getName(), sharedPool);

        if (sharedPool) {
            if (config.properties().get(REDIS_SHARED_POOL) != null) {
                jedisPool = (JedisPool) config.properties().get(REDIS_SHARED_POOL);
            }

            // setup is synchronized, no need to sync here as well.
            if (jedisPool == null) {
                GenericObjectPool.Config gConfig = new GenericObjectPool.Config();
                gConfig.testOnBorrow = true;
                gConfig.testWhileIdle = true;

                jedisPool = new JedisPool(gConfig, uri.getHost(), uri.getPort());

                config.properties().put(REDIS_SHARED_POOL, jedisPool);
            } else {
                if (jedisPublisher != null) {
                    jedisPool.returnResource(jedisPublisher);
                }
                disconnectSubscriber();

            }
        }

        // We use the pool only for publishing
        jedisSubscriber = new Jedis(uri.getHost(), uri.getPort());
        try {
            jedisSubscriber.connect();
            auth(jedisSubscriber);
        } catch (IOException e) {
            logger.error("failed to connect subscriber", e);
            disconnectSubscriber();
        }

        jedisPublisher = sharedPool ? null : new Jedis(uri.getHost(), uri.getPort());
        if (!sharedPool) {
            try {
                jedisPublisher.connect();

                auth(jedisPublisher);
            } catch (IOException e) {
                logger.error("failed to connect publisher", e);
                disconnectPublisher();
            }
        }
    } ##FSTMerge## public synchronized void setUp() {

        if (config.getServletConfig().getInitParameter(REDIS_AUTH) != null) {
            authToken = config.getServletConfig().getInitParameter(REDIS_AUTH);
        }

        if (config.getServletConfig().getInitParameter(REDIS_SERVER) != null) {
            uri = URI.create(config.getServletConfig().getInitParameter(REDIS_SERVER));
        } else if (uri == null) {
            throw new NullPointerException("uri cannot be null");
        }

        if (config.getServletConfig().getInitParameter(REDIS_SHARED_POOL) != null) {
            sharedPool = Boolean.parseBoolean(config.getServletConfig().getInitParameter(REDIS_SHARED_POOL));
        }

        logger.info("{} shared connection pool {}", getClass().getName(), sharedPool);

        if (sharedPool) {
            if (config.properties().get(REDIS_SHARED_POOL) != null) {
                jedisPool = (JedisPool) config.properties().get(REDIS_SHARED_POOL);
            }

            // setup is synchronized, no need to sync here as well.
            if (jedisPool == null) {
                GenericObjectPool.Config gConfig = new GenericObjectPool.Config();
                gConfig.testOnBorrow = true;
                gConfig.testWhileIdle = true;

                jedisPool = new JedisPool(gConfig, uri.getHost(), uri.getPort());

                config.properties().put(REDIS_SHARED_POOL, jedisPool);
            } else {
                disconnectSubscriber();
            }
        }

        // We use the pool only for publishing
        jedisSubscriber = new Jedis(uri.getHost(), uri.getPort());
        try {
            jedisSubscriber.connect();
            auth(jedisSubscriber);
        } catch (JedisException e) {
            logger.error("failed to connect subscriber", e);
            disconnectSubscriber();
        }

        jedisPublisher = sharedPool ? null : new Jedis(uri.getHost(), uri.getPort());
        if (!sharedPool) {
            try {
                jedisPublisher.connect();
                auth(jedisPublisher);
            } catch (JedisException e) {
                logger.error("failed to connect publisher", e);
                disconnectPublisher();
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void destroy() {
        Object lockingObject = getLockingObject();
        super.destroy();
        synchronized (lockingObject) {
            try {
                disconnectPublisher();
                disconnectSubscriber();
                if (jedisPool != null) {
                    jedisPool.destroy();
                }
            } catch (Throwable t) {
                logger.warn("Jedis error on close", t);
            } finally {
                config.properties().put(REDIS_SHARED_POOL, null);
            }
        }
    } ##FSTMerge## @Override
    public void destroy() {
        super.destroy();
        try {
            disconnectPublisher();
            disconnectSubscriber();
        } catch (Throwable t) {
            logger.warn("Jedis error on close", t);
        }
    } ##FSTMerge## @Override
    public void destroy() {
        Object lockingObject = getLockingObject();
        super.destroy();
        synchronized (lockingObject) {
            try {
                disconnectPublisher();
                disconnectSubscriber();
                if (jedisPool != null) {
                    jedisPool.destroy();
                }
            } catch (Throwable t) {
                logger.warn("Jedis error on close", t);
            } finally {
                config.properties().put(REDIS_SHARED_POOL, null);
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void incomingBroadcast() {
        logger.info("Subscribing to: {}", getID());

        jedisSubscriber.subscribe(new JedisPubSub() {

            public void onMessage(String channel, String message) {
                broadcastReceivedMessage(message);
            }

            public void onSubscribe(String channel, int subscribedChannels) {
                logger.debug("onSubscribe: {}", channel);
            }

            public void onUnsubscribe(String channel, int subscribedChannels) {
                logger.debug("onUnsubscribe: {}", channel);
            }

            public void onPSubscribe(String pattern, int subscribedChannels) {
                logger.debug("onPSubscribe: {}", pattern);
            }

            public void onPUnsubscribe(String pattern, int subscribedChannels) {
                logger.debug("onPUnsubscribe: {}", pattern);
            }

            public void onPMessage(String pattern, String channel, String message) {
                logger.debug("onPMessage: pattern: {}, channel: {}, message: {}",
                        new Object[]{pattern, channel, message});
            }
        }, getID());
    } ##FSTMerge## @Override
    public void incomingBroadcast() {
        logger.info("Subscribing to: {}", getID());

        jedisSubscriber.subscribe(new JedisPubSub() {

            public void onMessage(String channel, String message) {
                broadcastReceivedMessage(message);
            }

            public void onSubscribe(String channel, int subscribedChannels) {
                logger.debug("onSubscribe: {}", channel);
            }

            public void onUnsubscribe(String channel, int subscribedChannels) {
                logger.debug("onUnsubscribe: {}", channel);
            }

            public void onPSubscribe(String pattern, int subscribedChannels) {
                logger.debug("onPSubscribe: {}", pattern);
            }

            public void onPUnsubscribe(String pattern, int subscribedChannels) {
                logger.debug("onPUnsubscribe: {}", pattern);
            }

            public void onPMessage(String pattern, String channel, String message) {
                logger.debug("onPMessage: {}", pattern + " " + channel + " " + message);
            }
        }, getID());
    } ##FSTMerge## @Override
    public void incomingBroadcast() {
        logger.info("Subscribing to: {}", getID());

        jedisSubscriber.subscribe(new JedisPubSub() {

            public void onMessage(String channel, String message) {
                broadcastReceivedMessage(message);
            }

            public void onSubscribe(String channel, int subscribedChannels) {
                logger.debug("onSubscribe: {}", channel);
            }

            public void onUnsubscribe(String channel, int subscribedChannels) {
                logger.debug("onUnsubscribe: {}", channel);
            }

            public void onPSubscribe(String pattern, int subscribedChannels) {
                logger.debug("onPSubscribe: {}", pattern);
            }

            public void onPUnsubscribe(String pattern, int subscribedChannels) {
                logger.debug("onPUnsubscribe: {}", pattern);
            }

            public void onPMessage(String pattern, String channel, String message) {
                logger.debug("onPMessage: pattern: {}, channel: {}, message: {}",
                        new Object[]{pattern, channel, message});
            }
        }, getID());
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void outgoingBroadcast(Object message) {
        // Marshal the message outside of the sync block.
        String contents = message.toString();

        Object lockingObject = getLockingObject();
        synchronized (lockingObject) {
            if (destroyed.get()) {
                logger.debug("JedisPool closed. Re-opening");
                setID(getID());
            }

            if (sharedPool) {
                for (int i = 0; i < 10; ++i) {
                    boolean valid = true;
                    Jedis jedis = jedisPool.getResource();

                    try {
                        auth(jedis);
                        jedis.publish(getID(), contents);
                    } catch (JedisException e) {
                        valid = false;
                        logger.warn("outgoingBroadcast exception", e);
                    } finally {
                        if (valid) {
                            jedisPool.returnResource(jedis);
                        } else {
                            jedisPool.returnBrokenResource(jedis);
                        }
                    }

                    if (valid) {
                        break;
                    }
                }
            } else {
                try {
                    jedisPublisher.publish(getID(), contents);
                } catch (JedisException e) {
                    logger.warn("outgoingBroadcast exception", e);
                }
            }
        }
    } ##FSTMerge## @Override
    public void outgoingBroadcast(Object message) {
        // One thread at a time can use a Jedis Connection.
        Object lockingObject = sharedPool ? jedisPool : jedisPublisher;
        boolean valid = true;
        synchronized (lockingObject) {
            try {
                if (sharedPool) {
                    jedisPublisher = jedisPool.getResource();
                    auth(jedisPublisher);
                }
                jedisPublisher.publish(getID(), message.toString());
            } catch (JedisException e) {
                logger.warn("outgoingBroadcast exception", e);
                valid = false;
            } finally {
                if (sharedPool) {
                    if (!valid) {
                        jedisPool.returnBrokenResource(jedisPublisher);
                    } else {
                        jedisPool.returnResource(jedisPublisher);
                    }

                    // This is dangerous to loop.
                    if (!valid) {
                        outgoingBroadcast(message);
                    }
                }
            }
        }
    } ##FSTMerge## @Override
    public void outgoingBroadcast(Object message) {
        // Marshal the message outside of the sync block.
        String contents = message.toString();

        Object lockingObject = getLockingObject();
        synchronized (lockingObject) {
            if (destroyed.get()) {
                logger.debug("JedisPool closed. Re-opening");
                setID(getID());
            }

            if (sharedPool) {
                for (int i = 0; i < 10; ++i) {
                    boolean valid = true;
                    Jedis jedis = jedisPool.getResource();

                    try {
                        auth(jedis);
                        jedis.publish(getID(), contents);
                    } catch (JedisException e) {
                        valid = false;
                        logger.warn("outgoingBroadcast exception", e);
                    } finally {
                        if (valid) {
                            jedisPool.returnResource(jedis);
                        } else {
                            jedisPool.returnBrokenResource(jedis);
                        }
                    }

                    if (valid) {
                        break;
                    }
                }
            } else {
                try {
                    jedisPublisher.publish(getID(), contents);
                } catch (JedisException e) {
                    logger.warn("outgoingBroadcast exception", e);
                }
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private void disconnectSubscriber() {
        if (jedisSubscriber == null) return;

        synchronized (jedisSubscriber) {
            try {
                jedisSubscriber.disconnect();
            } catch (JedisException e) {
                logger.error("failed to disconnect subscriber", e);
            }
        }
    } ##FSTMerge## private void disconnectSubscriber() {
        if (jedisSubscriber == null) return;

        synchronized (jedisSubscriber) {
            try {
                jedisSubscriber.disconnect();
            } catch (IOException e) {
                logger.error("failed to disconnect subscriber", e);
            }
        }
    } ##FSTMerge## private void disconnectSubscriber() {
        if (jedisSubscriber == null) return;

        synchronized (jedisSubscriber) {
            try {
                jedisSubscriber.disconnect();
            } catch (JedisException e) {
                logger.error("failed to disconnect subscriber", e);
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private void disconnectPublisher() {
        if (jedisPublisher == null) return;

        synchronized (jedisPublisher) {
            try {
                jedisPublisher.disconnect();
            } catch (JedisException e) {
                logger.error("failed to disconnect publisher", e);
            }
        }
    } ##FSTMerge## private void disconnectPublisher() {
        if (jedisPublisher == null) return;

        synchronized (jedisPublisher) {
            try {
                jedisPublisher.disconnect();
            } catch (IOException e) {
                logger.error("failed to disconnect publisher", e);
            }
        }
    } ##FSTMerge## private void disconnectPublisher() {
        if (jedisPublisher == null) return;

        synchronized (jedisPublisher) {
            try {
                jedisPublisher.disconnect();
            } catch (JedisException e) {
                logger.error("failed to disconnect publisher", e);
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private Object getLockingObject() {
        return sharedPool ? jedisPool : jedisPublisher;
    } ##FSTMerge## ##FSTMerge## private Object getLockingObject() {
        return sharedPool ? jedisPool : jedisPublisher;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor(); ##FSTMerge## ##FSTMerge## private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void destroy() {
        if (executorService != null) {
            executorService.shutdown();
        }

        if (scheduler != null) {
            scheduler.shutdown();
        }
    } ##FSTMerge## @Override
    public void destroy() {
        if (executorService != null) {
            executorService.shutdown();
        }
    } ##FSTMerge## @Override
    public void destroy() {
        if (executorService != null) {
            executorService.shutdown();
        }

        if (scheduler != null) {
            scheduler.shutdown();
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void reapResources() {
        if (resources != null) {
            for (GwtAtmosphereResource resource : resources.values()) {
                if (!resource.isAlive()) {
                    resources.remove(resource.getConnectionID());
                }
            }
        }
    } ##FSTMerge## protected void reapResources() {
        for (GwtAtmosphereResource resource : resources.values()) {
            if (!resource.isAlive()) {
                resources.remove(resource.getConnectionID());
            }
        }
    } ##FSTMerge## protected void reapResources() {
        if (resources != null) {
            for (GwtAtmosphereResource resource : resources.values()) {
                if (!resource.isAlive()) {
                    resources.remove(resource.getConnectionID());
                }
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private void doCometImpl(GwtAtmosphereResourceImpl resource) throws IOException {

        try {
            // setup the request
            resource.getWriterImpl().initiate();
            if (resources == null) {
                resources = new ConcurrentHashMap<Integer, GwtAtmosphereResource>(5);
                scheduler.scheduleWithFixedDelay(new Runnable() {
                    @Override
                    public void run() {
                        reapResources();
                    }
                }, 30, 10, TimeUnit.SECONDS);
            }
            resources.put(resource.getConnectionID(), resource);
        } catch (IOException e) {
            logger.error("Error initiating GwtComet", e);
            return;
        }

        int timeout;
        try {
            // call the application code
            timeout = doComet(resource);
            if (timeout == -1) {
                logger.info("You have set an infinite timeout for your comet connection this is not recommended");
            }
        } catch (ServletException e) {
            logger.error("Error calling doComet()", e);
//			resource.getResponseWriter().sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());
            return;
        } catch (IOException e) {
            logger.error("Error calling doComet()", e);
//			resource.getResponseWriter().sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());
            return;
        }

        // at this point the application may have spawned threads to process this response
        // so we have to be careful about concurrency from here on
        resource.suspend(timeout);
    } ##FSTMerge## private void doCometImpl(GwtAtmosphereResourceImpl resource) throws IOException {

        try {
            // setup the request
            resource.getWriterImpl().initiate();
            if (resources == null) {
                resources = new ConcurrentHashMap<Integer, GwtAtmosphereResource>(5);
                resource.getBroadcaster().getBroadcasterConfig().getScheduledExecutorService().scheduleWithFixedDelay(new Runnable() {
                    @Override
                    public void run() {
                        reapResources();
                    }
                }, 30, 10, TimeUnit.SECONDS);
            }
            resources.put(resource.getConnectionID(), resource);
        } catch (IOException e) {
            logger.error("Error initiating GwtComet", e);
            return;
        }

        int timeout;
        try {
            // call the application code
            timeout = doComet(resource);
            if (timeout == -1) {
                logger.info("You have set an infinite timeout for your comet connection this is not recommended");
            }
        } catch (ServletException e) {
            logger.error("Error calling doComet()", e);
//			resource.getResponseWriter().sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());
            return;
        } catch (IOException e) {
            logger.error("Error calling doComet()", e);
//			resource.getResponseWriter().sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());
            return;
        }

        // at this point the application may have spawned threads to process this response
        // so we have to be careful about concurrency from here on
        resource.suspend(timeout);
    } ##FSTMerge## private void doCometImpl(GwtAtmosphereResourceImpl resource) throws IOException {

        try {
            // setup the request
            resource.getWriterImpl().initiate();
            if (resources == null) {
                resources = new ConcurrentHashMap<Integer, GwtAtmosphereResource>(5);
                scheduler.scheduleWithFixedDelay(new Runnable() {
                    @Override
                    public void run() {
                        reapResources();
                    }
                }, 30, 10, TimeUnit.SECONDS);
            }
            resources.put(resource.getConnectionID(), resource);
        } catch (IOException e) {
            logger.error("Error initiating GwtComet", e);
            return;
        }

        int timeout;
        try {
            // call the application code
            timeout = doComet(resource);
            if (timeout == -1) {
                logger.info("You have set an infinite timeout for your comet connection this is not recommended");
            }
        } catch (ServletException e) {
            logger.error("Error calling doComet()", e);
//			resource.getResponseWriter().sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());
            return;
        } catch (IOException e) {
            logger.error("Error calling doComet()", e);
//			resource.getResponseWriter().sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());
            return;
        }

        // at this point the application may have spawned threads to process this response
        // so we have to be careful about concurrency from here on
        resource.suspend(timeout);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected int findFreePort() throws IOException {
        ServerSocket socket = null;

        try {
            socket = new ServerSocket(0);

            return socket.getLocalPort();
        } finally {
            if (socket != null) {
                socket.close();
            }
        }
    } ##FSTMerge## ##FSTMerge## protected int findFreePort() throws IOException {
        ServerSocket socket = null;

        try {
            socket = new ServerSocket(0);

            return socket.getLocalPort();
        } finally {
            if (socket != null) {
                socket.close();
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/guice/src/test/java/org/atmosphere/tests/guice/GrizzlyGuiceJerseyTest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @BeforeMethod(alwaysRun = true)
    public void setUpGlobal() throws Exception {
        port = TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", findFreePort());
        urlTarget = "http://127.0.0.1:" + port + "/invoke";
        atmoServlet = new AtmosphereGuiceServlet();
        atmoServlet.addInitParameter("com.sun.jersey.config.property.packages", this.getClass().getPackage().getName());

        configureCometSupport();
        startServer();
    } ##FSTMerge## @BeforeMethod(alwaysRun = true)
    public void setUpGlobal() throws Exception {
        port = TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", 9999);
        urlTarget = "http://127.0.0.1:" + port + "/invoke";
        atmoServlet = new AtmosphereGuiceServlet();
        atmoServlet.addInitParameter("com.sun.jersey.config.property.packages", this.getClass().getPackage().getName());

        configureCometSupport();
        startServer();
    } ##FSTMerge## @BeforeMethod(alwaysRun = true)
    public void setUpGlobal() throws Exception {
        port = TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", findFreePort());
        urlTarget = "http://127.0.0.1:" + port + "/invoke";
        atmoServlet = new AtmosphereGuiceServlet();
        atmoServlet.addInitParameter("com.sun.jersey.config.property.packages", this.getClass().getPackage().getName());

        configureCometSupport();
        startServer();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/guice/src/test/java/org/atmosphere/tests/guice/GrizzlyGuiceJerseyTest.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public ##FSTMerge## public
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/struts-comet/src/main/java/app/SimpleAction.java
############## CONFLICT ##############
Conflict type: ExtendsList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## extends DispatchAction ##FSTMerge## extends DispatchAction
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/struts-comet/src/main/java/app/SimpleAction.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public static final Logger logger = Logger.getLogger(SimpleAction.class); ##FSTMerge## public static final Logger logger = Logger.getLogger(SimpleAction.class);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/struts-comet/src/main/java/app/SimpleAction.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## private final List<BroadcastFilter> list; ##FSTMerge## private final List<BroadcastFilter> list;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/struts-comet/src/main/java/app/SimpleAction.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## private final Broadcaster b = new DefaultBroadcaster("Struts"); ##FSTMerge## private final Broadcaster b = new DefaultBroadcaster("Struts");
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/struts-comet/src/main/java/app/SimpleAction.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public SimpleAction() {
        list = new LinkedList<BroadcastFilter>();
        //list.add(new XSSHtmlFilter());
        //list.add(new JsonpFilter());
    } ##FSTMerge## public SimpleAction() {
        list = new LinkedList<BroadcastFilter>();
        //list.add(new XSSHtmlFilter());
        //list.add(new JsonpFilter());
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/struts-comet/src/main/java/app/SimpleAction.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public ActionForward unspecified(ActionMapping mapping, ActionForm _form, HttpServletRequest req, HttpServletResponse res) throws Exception {
        logger.error("IN ACTION");
        return mapping.findForward("success");
    } ##FSTMerge## public ActionForward unspecified(ActionMapping mapping, ActionForm _form, HttpServletRequest req, HttpServletResponse res) throws Exception {
        logger.error("IN ACTION");
        return mapping.findForward("success");
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/struts-comet/src/main/java/app/SimpleAction.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public ActionForward echo(ActionMapping mapping, ActionForm _form, HttpServletRequest req, HttpServletResponse res) throws Exception {
        logger.info("BEGIN SimpleAction.echo()");
        String value = req.getParameter("value");
        // Do something with value
        res.getWriter().print("{message: 'Server says: " + value + "'}");
        return null;
    } ##FSTMerge## public ActionForward echo(ActionMapping mapping, ActionForm _form, HttpServletRequest req, HttpServletResponse res) throws Exception {
        logger.info("BEGIN SimpleAction.echo()");
        String value = req.getParameter("value");
        // Do something with value
        res.getWriter().print("{message: 'Server says: " + value + "'}");
        return null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/struts-comet/src/main/java/app/SimpleAction.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public ActionForward openCometChannel(ActionMapping mapping, ActionForm _form, HttpServletRequest req, HttpServletResponse res) throws Exception {
        logger.info("BEGIN SimpleAction.openCometChannel()");
        Meteor m = Meteor.build(req, list, null);
        m.setBroadcaster(b);
        req.getSession().setAttribute("meteor", m);
        m.suspend(-1);
        m.broadcast(req.getServerName()
                + "__has suspended a connection from " + req.getRemoteAddr());
        return null;
    } ##FSTMerge## public ActionForward openCometChannel(ActionMapping mapping, ActionForm _form, HttpServletRequest req, HttpServletResponse res) throws Exception {
        logger.info("BEGIN SimpleAction.openCometChannel()");
        Meteor m = Meteor.build(req, list, null);
        m.setBroadcaster(b);
        req.getSession().setAttribute("meteor", m);
        m.suspend(-1);
        m.broadcast(req.getServerName()
                + "__has suspended a connection from " + req.getRemoteAddr());
        return null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/struts-comet/src/main/java/app/SimpleAction.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public ActionForward sendCometMsg(ActionMapping mapping, ActionForm _form, HttpServletRequest req, HttpServletResponse res) throws Exception {
        logger.info("BEGIN SimpleAction.sendCometMsg()");
        Meteor m = (Meteor) req.getSession().getAttribute("meteor");
        logger.info("meteor: " + m);
        res.setCharacterEncoding("UTF-8");
        String value = req.getParameter("value");
        logger.debug("value: " + value);

        m.broadcast("<script>parent.cometMsg('Broadcast: " + value + "');</script>");
        res.getWriter().write("{message:'success'}");
        res.getWriter().flush();
        return null;
    } ##FSTMerge## public ActionForward sendCometMsg(ActionMapping mapping, ActionForm _form, HttpServletRequest req, HttpServletResponse res) throws Exception {
        logger.info("BEGIN SimpleAction.sendCometMsg()");
        Meteor m = (Meteor) req.getSession().getAttribute("meteor");
        logger.info("meteor: " + m);
        res.setCharacterEncoding("UTF-8");
        String value = req.getParameter("value");
        logger.debug("value: " + value);

        m.broadcast("<script>parent.cometMsg('Broadcast: " + value + "');</script>");
        res.getWriter().write("{message:'success'}");
        res.getWriter().flush();
        return null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/struts-comet/src/main/java/app/SimpleAction.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public ##FSTMerge## ##FSTMerge## public
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-websocketprotocol-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
############## CONFLICT ##############
Conflict type: ImplementList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ implements WebSocketProtocol ##FSTMerge## ##FSTMerge## implements WebSocketProtocol
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-websocketprotocol-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private static final Logger logger = LoggerFactory.getLogger(WebSocketPubSub.class); ##FSTMerge## ##FSTMerge## private static final Logger logger = LoggerFactory.getLogger(WebSocketPubSub.class);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-websocketprotocol-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void configure(AtmosphereServlet.AtmosphereConfig config) {
    } ##FSTMerge## ##FSTMerge## @Override
    public void configure(AtmosphereServlet.AtmosphereConfig config) {
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-websocketprotocol-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public AtmosphereRequest onMessage(WebSocket webSocket, String message) {
        AtmosphereResource<HttpServletRequest,HttpServletResponse> r = (AtmosphereResource<HttpServletRequest, HttpServletResponse>) webSocket.resource();
        Broadcaster b = lookupBroadcaster(r.getRequest().getPathInfo());

        if (message != null && message.indexOf("message") != -1) {
            b.broadcast(message.substring("message=".length()));
        }

        //Do not dispatch to another Container
        return null;
    } ##FSTMerge## ##FSTMerge## @Override
    public AtmosphereRequest onMessage(WebSocket webSocket, String message) {
        AtmosphereResource<HttpServletRequest,HttpServletResponse> r = (AtmosphereResource<HttpServletRequest, HttpServletResponse>) webSocket.resource();
        Broadcaster b = lookupBroadcaster(r.getRequest().getPathInfo());

        if (message != null && message.indexOf("message") != -1) {
            b.broadcast(message.substring("message=".length()));
        }

        //Do not dispatch to another Container
        return null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-websocketprotocol-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public AtmosphereRequest onMessage(WebSocket webSocket, byte[] data, int offset, int length) {
        //Do not dispatch to another Container
        return null;
    } ##FSTMerge## ##FSTMerge## @Override
    public AtmosphereRequest onMessage(WebSocket webSocket, byte[] data, int offset, int length) {
        //Do not dispatch to another Container
        return null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-websocketprotocol-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onOpen(WebSocket webSocket) {
        // Accept the handshake by suspending the response.
        AtmosphereResource<HttpServletRequest,HttpServletResponse> r = (AtmosphereResource<HttpServletRequest, HttpServletResponse>) webSocket.resource();
        Broadcaster b = lookupBroadcaster(r.getRequest().getPathInfo());
        r.setBroadcaster(b);
        r.addEventListener(new WebSocketEventListenerAdapter());

        r.suspend(-1);
    } ##FSTMerge## ##FSTMerge## @Override
    public void onOpen(WebSocket webSocket) {
        // Accept the handshake by suspending the response.
        AtmosphereResource<HttpServletRequest,HttpServletResponse> r = (AtmosphereResource<HttpServletRequest, HttpServletResponse>) webSocket.resource();
        Broadcaster b = lookupBroadcaster(r.getRequest().getPathInfo());
        r.setBroadcaster(b);
        r.addEventListener(new WebSocketEventListenerAdapter());

        r.suspend(-1);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-websocketprotocol-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onClose(WebSocket webSocket) {
        // Tell Atmosphere to
        webSocket.resource().resume();
    } ##FSTMerge## ##FSTMerge## @Override
    public void onClose(WebSocket webSocket) {
        // Tell Atmosphere to
        webSocket.resource().resume();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-websocketprotocol-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void onError(WebSocket webSocket, WebSocketProcessor.WebSocketException t) {
        logger.error(t.getMessage() + " Status {} Message {}", t.response().getStatus(), t.response().getStatusMessage());
    } ##FSTMerge## ##FSTMerge## public void onError(WebSocket webSocket, WebSocketProcessor.WebSocketException t) {
        logger.error(t.getMessage() + " Status {} Message {}", t.response().getStatus(), t.response().getStatusMessage());
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-websocketprotocol-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ Broadcaster lookupBroadcaster(String pathInfo) {
        String[] decodedPath = pathInfo.split("/");
        Broadcaster b = BroadcasterFactory.getDefault().lookup(decodedPath[decodedPath.length - 1], true);
        return b;
    } ##FSTMerge## ##FSTMerge## Broadcaster lookupBroadcaster(String pathInfo) {
        String[] decodedPath = pathInfo.split("/");
        Broadcaster b = BroadcasterFactory.getDefault().lookup(decodedPath[decodedPath.length - 1], true);
        return b;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-websocketprotocol-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public boolean inspectResponse() {
        // We don't need to change the final WebSocket message generated by Jersey.
        return false;
    } ##FSTMerge## ##FSTMerge## @Override
    public boolean inspectResponse() {
        // We don't need to change the final WebSocket message generated by Jersey.
        return false;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-websocketprotocol-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public String handleResponse(AtmosphereResponse<?> res, String message) {
        // Should never be called
        return message;
    } ##FSTMerge## ##FSTMerge## @Override
    public String handleResponse(AtmosphereResponse<?> res, String message) {
        // Should never be called
        return message;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-websocketprotocol-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public byte[] handleResponse(AtmosphereResponse<?> res, byte[] message, int offset, int length) {
        // Should never be called
        return message;
    } ##FSTMerge## ##FSTMerge## @Override
    public byte[] handleResponse(AtmosphereResponse<?> res, byte[] message, int offset, int length) {
        // Should never be called
        return message;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-websocketprotocol-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public ##FSTMerge## ##FSTMerge## public
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-meteor-pubsub/src/main/java/org/atmosphere/samples/pubsub/MeteorPubSub.java
############## CONFLICT ##############
Conflict type: ExtendsList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ extends HttpServlet ##FSTMerge## ##FSTMerge## extends HttpServlet
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-meteor-pubsub/src/main/java/org/atmosphere/samples/pubsub/MeteorPubSub.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {
        // Create a Meteor
        Meteor m = Meteor.build(req);

        // Log all events on the console, including WebSocket events.
        m.addListener(new WebSocketEventListenerAdapter());

        // In case we would have tracked instance of Meteor
        //String trackingId = trackingId(req);
        //meteors.put(trackingId, m);

        res.setContentType("text/html;charset=ISO-8859-1");

        Broadcaster b = lookupBroadcaster(req.getPathInfo());
        m.setBroadcaster(b);

        if (req.getHeader(HeaderConfig.X_ATMOSPHERE_TRANSPORT).equalsIgnoreCase(HeaderConfig.LONG_POLLING_TRANSPORT)) {
            req.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, Boolean.TRUE);
            m.suspend(-1, false);
        } else {
            m.suspend(-1);
        }

    } ##FSTMerge## ##FSTMerge## @Override
    public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {
        // Create a Meteor
        Meteor m = Meteor.build(req);

        // Log all events on the console, including WebSocket events.
        m.addListener(new WebSocketEventListenerAdapter());

        // In case we would have tracked instance of Meteor
        //String trackingId = trackingId(req);
        //meteors.put(trackingId, m);

        res.setContentType("text/html;charset=ISO-8859-1");

        Broadcaster b = lookupBroadcaster(req.getPathInfo());
        m.setBroadcaster(b);

        if (req.getHeader(HeaderConfig.X_ATMOSPHERE_TRANSPORT).equalsIgnoreCase(HeaderConfig.LONG_POLLING_TRANSPORT)) {
            req.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, Boolean.TRUE);
            m.suspend(-1, false);
        } else {
            m.suspend(-1);
        }

    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-meteor-pubsub/src/main/java/org/atmosphere/samples/pubsub/MeteorPubSub.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void doPost(HttpServletRequest req, HttpServletResponse res) throws IOException {
        // We could have also retrived the Meteor using the tracking ID
        //Meteor m = meteors.get(trackingId(req));
        Broadcaster b = lookupBroadcaster(req.getPathInfo());

        String message = req.getReader().readLine();

        if (message != null && message.indexOf("message") != -1) {
            // We could also have looked up the Broadcaster using the Meteor
            // m.getBroadcaster().broadcast(message.substring("message=".length()));
            b.broadcast(message.substring("message=".length()));
        }
    } ##FSTMerge## ##FSTMerge## public void doPost(HttpServletRequest req, HttpServletResponse res) throws IOException {
        // We could have also retrived the Meteor using the tracking ID
        //Meteor m = meteors.get(trackingId(req));
        Broadcaster b = lookupBroadcaster(req.getPathInfo());

        String message = req.getReader().readLine();

        if (message != null && message.indexOf("message") != -1) {
            // We could also have looked up the Broadcaster using the Meteor
            // m.getBroadcaster().broadcast(message.substring("message=".length()));
            b.broadcast(message.substring("message=".length()));
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-meteor-pubsub/src/main/java/org/atmosphere/samples/pubsub/MeteorPubSub.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ Broadcaster lookupBroadcaster(String pathInfo) {
        String[] decodedPath = pathInfo.split("/");
        Broadcaster b = BroadcasterFactory.getDefault().lookup(decodedPath[decodedPath.length - 1], true);
        return b;
    } ##FSTMerge## ##FSTMerge## Broadcaster lookupBroadcaster(String pathInfo) {
        String[] decodedPath = pathInfo.split("/");
        Broadcaster b = BroadcasterFactory.getDefault().lookup(decodedPath[decodedPath.length - 1], true);
        return b;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-meteor-pubsub/src/main/java/org/atmosphere/samples/pubsub/MeteorPubSub.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public ##FSTMerge## ##FSTMerge## public
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-atmospherehandler-pubsub/src/main/java/org/atmosphere/samples/pubsub/AtmosphereHandlerPubSub.java
############## CONFLICT ##############
Conflict type: ExtendsList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ extends AbstractReflectorAtmosphereHandler ##FSTMerge## ##FSTMerge## extends AbstractReflectorAtmosphereHandler
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-atmospherehandler-pubsub/src/main/java/org/atmosphere/samples/pubsub/AtmosphereHandlerPubSub.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onRequest(AtmosphereResource<HttpServletRequest, HttpServletResponse> r) throws IOException {

        HttpServletRequest req = r.getRequest();
        HttpServletResponse res = r.getResponse();
        String method = req.getMethod();

        // Suspend the response.
        if ("GET".equalsIgnoreCase(method)) {
            // Log all events on the console, including WebSocket events.
            r.addEventListener(new WebSocketEventListenerAdapter());

            res.setContentType("text/html;charset=ISO-8859-1");

            Broadcaster b = lookupBroadcaster(req.getPathInfo());
            r.setBroadcaster(b);

            if (req.getHeader(HeaderConfig.X_ATMOSPHERE_TRANSPORT).equalsIgnoreCase(HeaderConfig.LONG_POLLING_TRANSPORT)) {
                req.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, Boolean.TRUE);
                r.suspend(-1, false);
            } else {
                r.suspend(-1);
            }
        } else if ("POST".equalsIgnoreCase(method)) {
            Broadcaster b = lookupBroadcaster(req.getPathInfo());

            String message = req.getReader().readLine();

            if (message != null && message.indexOf("message") != -1) {
                b.broadcast(message.substring("message=".length()));
            }
        }
    } ##FSTMerge## ##FSTMerge## @Override
    public void onRequest(AtmosphereResource<HttpServletRequest, HttpServletResponse> r) throws IOException {

        HttpServletRequest req = r.getRequest();
        HttpServletResponse res = r.getResponse();
        String method = req.getMethod();

        // Suspend the response.
        if ("GET".equalsIgnoreCase(method)) {
            // Log all events on the console, including WebSocket events.
            r.addEventListener(new WebSocketEventListenerAdapter());

            res.setContentType("text/html;charset=ISO-8859-1");

            Broadcaster b = lookupBroadcaster(req.getPathInfo());
            r.setBroadcaster(b);

            if (req.getHeader(HeaderConfig.X_ATMOSPHERE_TRANSPORT).equalsIgnoreCase(HeaderConfig.LONG_POLLING_TRANSPORT)) {
                req.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, Boolean.TRUE);
                r.suspend(-1, false);
            } else {
                r.suspend(-1);
            }
        } else if ("POST".equalsIgnoreCase(method)) {
            Broadcaster b = lookupBroadcaster(req.getPathInfo());

            String message = req.getReader().readLine();

            if (message != null && message.indexOf("message") != -1) {
                b.broadcast(message.substring("message=".length()));
            }
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-atmospherehandler-pubsub/src/main/java/org/atmosphere/samples/pubsub/AtmosphereHandlerPubSub.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void destroy() {
    } ##FSTMerge## ##FSTMerge## @Override
    public void destroy() {
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-atmospherehandler-pubsub/src/main/java/org/atmosphere/samples/pubsub/AtmosphereHandlerPubSub.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ Broadcaster lookupBroadcaster(String pathInfo) {
        String[] decodedPath = pathInfo.split("/");
        Broadcaster b = BroadcasterFactory.getDefault().lookup(decodedPath[decodedPath.length - 1], true);
        return b;
    } ##FSTMerge## ##FSTMerge## Broadcaster lookupBroadcaster(String pathInfo) {
        String[] decodedPath = pathInfo.split("/");
        Broadcaster b = BroadcasterFactory.getDefault().lookup(decodedPath[decodedPath.length - 1], true);
        return b;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/samples/jquery-atmospherehandler-pubsub/src/main/java/org/atmosphere/samples/pubsub/AtmosphereHandlerPubSub.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public ##FSTMerge## ##FSTMerge## public
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private AtmosphereConfig config; ##FSTMerge## ##FSTMerge## private AtmosphereConfig config;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private DefaultBroadcasterFactory factory; ##FSTMerge## ##FSTMerge## private DefaultBroadcasterFactory factory;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @BeforeMethod
    public void setUp() throws Exception {
        config = mock(AtmosphereConfig.class);
        factory = new DefaultBroadcasterFactory(DefaultBroadcaster.class, "NEVER", config);
    } ##FSTMerge## ##FSTMerge## @BeforeMethod
    public void setUp() throws Exception {
        config = mock(AtmosphereConfig.class);
        factory = new DefaultBroadcasterFactory(DefaultBroadcaster.class, "NEVER", config);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Test
    public void testGet_0args() {
        Broadcaster result = factory.get();
        assert result != null;
        assert result instanceof DefaultBroadcaster;
    } ##FSTMerge## ##FSTMerge## @Test
    public void testGet_0args() {
        Broadcaster result = factory.get();
        assert result != null;
        assert result instanceof DefaultBroadcaster;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Test
    public void testGet_Object() {
        String id = "id";
        Broadcaster result = factory.get(id);
        assert result != null;
        assert result instanceof DefaultBroadcaster;
        assert id.equals(result.getID());
    } ##FSTMerge## ##FSTMerge## @Test
    public void testGet_Object() {
        String id = "id";
        Broadcaster result = factory.get(id);
        assert result != null;
        assert result instanceof DefaultBroadcaster;
        assert id.equals(result.getID());
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Test(expectedExceptions = IllegalStateException.class)
    public void testGet_Object_Twice() {
        String id = "id";
        factory.get(id);
        factory.get(id);
    } ##FSTMerge## ##FSTMerge## @Test(expectedExceptions = IllegalStateException.class)
    public void testGet_Object_Twice() {
        String id = "id";
        factory.get(id);
        factory.get(id);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Test
    public void testAdd() {
        String id = "id";
        String id2 = "foo";
        Broadcaster b = factory.get(id);
        assert factory.add(b, id) == false;
        assert factory.lookup(id) != null;
        assert factory.add(b, id2) == true;
        assert factory.lookup(id2) != null;
    } ##FSTMerge## ##FSTMerge## @Test
    public void testAdd() {
        String id = "id";
        String id2 = "foo";
        Broadcaster b = factory.get(id);
        assert factory.add(b, id) == false;
        assert factory.lookup(id) != null;
        assert factory.add(b, id2) == true;
        assert factory.lookup(id2) != null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Test
    public void testRemove() {
        String id = "id";
        String id2 = "foo";
        Broadcaster b = factory.get(id);
        Broadcaster b2 = factory.get(id2);
        assert factory.remove(b, id2) == false;
        assert factory.remove(b2, id) == false;
        assert factory.remove(b, id) == true;
        assert factory.lookup(id) == null;
    } ##FSTMerge## ##FSTMerge## @Test
    public void testRemove() {
        String id = "id";
        String id2 = "foo";
        Broadcaster b = factory.get(id);
        Broadcaster b2 = factory.get(id2);
        assert factory.remove(b, id2) == false;
        assert factory.remove(b2, id) == false;
        assert factory.remove(b, id) == true;
        assert factory.lookup(id) == null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Test
    public void testLookup_Class_Object() {
        String id = "id";
        String id2 = "foo";
        Broadcaster b = factory.get(id);
        assert factory.lookup(DefaultBroadcaster.class, id) != null;
        assert factory.lookup(DefaultBroadcaster.class, id2) == null;
    } ##FSTMerge## ##FSTMerge## @Test
    public void testLookup_Class_Object() {
        String id = "id";
        String id2 = "foo";
        assert factory.lookup(DefaultBroadcaster.class, id, true) != null;
        assert factory.lookup(DefaultBroadcaster.class, id2) == null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Test(expectedExceptions = IllegalStateException.class)
    public void testLookup_Class_Object_BadClass() {
        String id = "id";
        factory.get(id);
        factory.lookup(SimpleBroadcaster.class, id);
    } ##FSTMerge## ##FSTMerge## @Test(expectedExceptions = IllegalStateException.class)
    public void testLookup_Class_Object_BadClass() {
        String id = "id";
        factory.get(id);
        factory.lookup(SimpleBroadcaster.class, id);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Test
    public void testLookup_Object() {
        String id = "id";
        String id2 = "foo";
        factory.get(id);
        assert factory.lookup(id) != null;
        assert factory.lookup(id2) == null;
    } ##FSTMerge## ##FSTMerge## @Test
    public void testLookup_Object() {
        String id = "id";
        String id2 = "foo";
        factory.get(id);
        assert factory.lookup(id) != null;
        assert factory.lookup(id2) == null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Test
    public void testLookup_Object_boolean() {
        String id = "id";
        assert factory.lookup(id, false) == null;
        Broadcaster b = factory.lookup(id, true);
        assert b != null;
        assert id.equals(b.getID());
    } ##FSTMerge## ##FSTMerge## @Test
    public void testLookup_Object_boolean() {
        String id = "id";
        assert factory.lookup(id, false) == null;
        Broadcaster b = factory.lookup(id, true);
        assert b != null;
        assert id.equals(b.getID());
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Test
    public void testLookup_Class_Object_boolean() {
        String id = "id";
        assert factory.lookup(DefaultBroadcaster.class, id, false) == null;
        Broadcaster b = factory.lookup(DefaultBroadcaster.class, id, true);
        assert b != null;
        assert b instanceof DefaultBroadcaster;
        assert id.equals(b.getID());
    } ##FSTMerge## ##FSTMerge## @Test
    public void testLookup_Class_Object_boolean() {
        String id = "id";
        assert factory.lookup(DefaultBroadcaster.class, id, false) == null;
        Broadcaster b = factory.lookup(DefaultBroadcaster.class, id, true);
        assert b != null;
        assert b instanceof DefaultBroadcaster;
        assert id.equals(b.getID());
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public abstract ##FSTMerge## ##FSTMerge## public abstract
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketAdapter.java
############## CONFLICT ##############
Conflict type: ImplementList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ implements WebSocket ##FSTMerge## ##FSTMerge## implements WebSocket
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketAdapter.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private AtmosphereResource<?, ?> r; ##FSTMerge## ##FSTMerge## private AtmosphereResource<?, ?> r;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketAdapter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public WebSocketAdapter setAtmosphereResource(AtmosphereResource<?, ?> r) {
        this.r = r;
        return this;
    } ##FSTMerge## ##FSTMerge## public WebSocketAdapter setAtmosphereResource(AtmosphereResource<?, ?> r) {
        this.r = r;
        return this;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketAdapter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void close() throws IOException {
    } ##FSTMerge## ##FSTMerge## @Override
    public void close() throws IOException {
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketAdapter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public AtmosphereResource<?, ?> resource() {
        return r;
    } ##FSTMerge## ##FSTMerge## @Override
    public AtmosphereResource<?, ?> resource() {
        return r;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketAdapter.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public ##FSTMerge## ##FSTMerge## public
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: ExtendsList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ extends HttpServletResponseWrapper ##FSTMerge## ##FSTMerge## extends HttpServletResponseWrapper
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final List<Cookie> cookies = new ArrayList<Cookie>(); ##FSTMerge## ##FSTMerge## private final List<Cookie> cookies = new ArrayList<Cookie>();
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final Map<String, String> headers = new HashMap<String, String>(); ##FSTMerge## ##FSTMerge## private final Map<String, String> headers = new HashMap<String, String>();
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final A asyncIOWriter; ##FSTMerge## ##FSTMerge## private A asyncIOWriter;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private int status = 200; ##FSTMerge## ##FSTMerge## private int status = 200;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private String statusMessage = ""; ##FSTMerge## ##FSTMerge## private String statusMessage = "";
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private String charSet = "UTF-8"; ##FSTMerge## ##FSTMerge## private String charSet = "UTF-8";
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private long contentLength = -1; ##FSTMerge## ##FSTMerge## private long contentLength = -1;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private String contentType = "txt/html"; ##FSTMerge## ##FSTMerge## private String contentType = "txt/html";
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private boolean isCommited = false; ##FSTMerge## ##FSTMerge## private boolean isCommited = false;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private Locale locale; ##FSTMerge## ##FSTMerge## private Locale locale;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final AsyncProtocol asyncProtocol; ##FSTMerge## ##FSTMerge## private AsyncProtocol asyncProtocol;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private boolean headerHandled = false; ##FSTMerge## ##FSTMerge## private boolean headerHandled = false;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final HttpServletRequest atmosphereRequest; ##FSTMerge## ##FSTMerge## private HttpServletRequest atmosphereRequest;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private static final DummyHttpServletResponse dsr = new DummyHttpServletResponse(); ##FSTMerge## ##FSTMerge## private static final DummyHttpServletResponse dsr = new DummyHttpServletResponse();
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public AtmosphereResponse(A asyncIOWriter, AsyncProtocol asyncProtocol, HttpServletRequest atmosphereRequest) {
        super(dsr);
        this.asyncIOWriter = asyncIOWriter;
        this.asyncProtocol = asyncProtocol;
        this.atmosphereRequest = atmosphereRequest;
    } ##FSTMerge## ##FSTMerge## public AtmosphereResponse(A asyncIOWriter, AsyncProtocol asyncProtocol, HttpServletRequest atmosphereRequest) {
        super(dsr);
        this.asyncIOWriter = asyncIOWriter;
        this.asyncProtocol = asyncProtocol;
        this.atmosphereRequest = atmosphereRequest;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public AtmosphereResponse(HttpServletResponse r, A asyncIOWriter, AsyncProtocol asyncProtocol, HttpServletRequest atmosphereRequest) {
        super(r);
        this.asyncIOWriter = asyncIOWriter;
        this.asyncProtocol = asyncProtocol;
        this.atmosphereRequest = atmosphereRequest;
    } ##FSTMerge## ##FSTMerge## public AtmosphereResponse(HttpServletResponse r, A asyncIOWriter, AsyncProtocol asyncProtocol, HttpServletRequest atmosphereRequest) {
        super(r);
        this.asyncIOWriter = asyncIOWriter;
        this.asyncProtocol = asyncProtocol;
        this.atmosphereRequest = atmosphereRequest;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void addCookie(Cookie cookie) {
        cookies.add(cookie);
    } ##FSTMerge## ##FSTMerge## @Override
    public void addCookie(Cookie cookie) {
        cookies.add(cookie);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public boolean containsHeader(String name) {
        return headers.get(name) == null ? false : true;
    } ##FSTMerge## ##FSTMerge## @Override
    public boolean containsHeader(String name) {
        return headers.get(name) == null ? false : true;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void sendError(int sc, String msg) throws IOException {
        setStatus(sc,msg);
        asyncIOWriter.writeError(sc, msg);
    } ##FSTMerge## ##FSTMerge## @Override
    public void sendError(int sc, String msg) throws IOException {
        setStatus(sc,msg);
        asyncIOWriter.writeError(sc, msg);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void sendError(int sc) throws IOException {
        setStatus(sc);
        asyncIOWriter.writeError(sc, "");
    } ##FSTMerge## ##FSTMerge## @Override
    public void sendError(int sc) throws IOException {
        setStatus(sc);
        asyncIOWriter.writeError(sc, "");
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void sendRedirect(String location) throws IOException {
        asyncIOWriter.redirect(location);
    } ##FSTMerge## ##FSTMerge## @Override
    public void sendRedirect(String location) throws IOException {
        asyncIOWriter.redirect(location);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void setDateHeader(String name, long date) {
        headers.put(name, String.valueOf(date));
    } ##FSTMerge## ##FSTMerge## @Override
    public void setDateHeader(String name, long date) {
        headers.put(name, String.valueOf(date));
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void addDateHeader(String name, long date) {
        headers.put(name, String.valueOf(date));
    } ##FSTMerge## ##FSTMerge## @Override
    public void addDateHeader(String name, long date) {
        headers.put(name, String.valueOf(date));
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void setHeader(String name, String value) {
        headers.put(name, value);
    } ##FSTMerge## ##FSTMerge## @Override
    public void setHeader(String name, String value) {
        headers.put(name, value);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void addHeader(String name, String value) {
        headers.put(name, value);
    } ##FSTMerge## ##FSTMerge## @Override
    public void addHeader(String name, String value) {
        headers.put(name, value);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void setIntHeader(String name, int value) {
        headers.put(name, String.valueOf(value));
    } ##FSTMerge## ##FSTMerge## @Override
    public void setIntHeader(String name, int value) {
        headers.put(name, String.valueOf(value));
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void addIntHeader(String name, int value) {
        headers.put(name, String.valueOf(value));
    } ##FSTMerge## ##FSTMerge## @Override
    public void addIntHeader(String name, int value) {
        headers.put(name, String.valueOf(value));
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void setStatus(int status) {
        this.status = status;
    } ##FSTMerge## ##FSTMerge## @Override
    public void setStatus(int status) {
        this.status = status;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void setStatus(int status, String statusMessage) {
        this.statusMessage = statusMessage;
        this.status = status;
    } ##FSTMerge## ##FSTMerge## @Override
    public void setStatus(int status, String statusMessage) {
        this.statusMessage = statusMessage;
        this.status = status;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public int getStatus() {
        return status;
    } ##FSTMerge## ##FSTMerge## @Override
    public int getStatus() {
        return status;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public String getStatusMessage() {
        return statusMessage;
    } ##FSTMerge## ##FSTMerge## public String getStatusMessage() {
        return statusMessage;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Map<String, String> headers() {
        if (!headerHandled) {
            for (Cookie c : cookies) {
                headers.put("Set-Cookie", c.toString());
            }
            headerHandled = false;
        }
        return headers;
    } ##FSTMerge## ##FSTMerge## public Map<String, String> headers() {
        if (!headerHandled) {
            for (Cookie c : cookies) {
                headers.put("Set-Cookie", c.toString());
            }
            headerHandled = false;
        }
        return headers;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public String getHeader(String name) {
        return headers.get(name);
    } ##FSTMerge## ##FSTMerge## @Override
    public String getHeader(String name) {
        return headers.get(name);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public Collection<String> getHeaders(String name) {
        ArrayList<String> s = new ArrayList<String>();
        s.add(headers.get(name));
        return Collections.unmodifiableList(s);
    } ##FSTMerge## ##FSTMerge## @Override
    public Collection<String> getHeaders(String name) {
        ArrayList<String> s = new ArrayList<String>();
        s.add(headers.get(name));
        return Collections.unmodifiableList(s);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public Collection<String> getHeaderNames() {
        return Collections.unmodifiableSet(headers.keySet());
    } ##FSTMerge## ##FSTMerge## @Override
    public Collection<String> getHeaderNames() {
        return Collections.unmodifiableSet(headers.keySet());
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void setCharacterEncoding(String charset) {
        this.charSet = charSet;
    } ##FSTMerge## ##FSTMerge## @Override
    public void setCharacterEncoding(String charset) {
        this.charSet = charSet;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public String getCharacterEncoding() {
        return charSet;
    } ##FSTMerge## ##FSTMerge## @Override
    public String getCharacterEncoding() {
        return charSet;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public ServletOutputStream getOutputStream() throws IOException {
        return new ServletOutputStream() {

            public void write(int i) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, new byte[]{(byte) i}, 0, 1));
                } else {
                    asyncIOWriter.write(new byte[]{(byte) i});
                }
            }


            public void write(byte[] bytes) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, bytes, 0, bytes.length));
                } else {
                    asyncIOWriter.write(bytes);
                }
            }

            public void write(byte[] bytes, int start, int offset) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    byte[] b = asyncProtocol.handleResponse(AtmosphereResponse.this, bytes, start, offset);
                    asyncIOWriter.write(b, 0, b.length);
                } else {
                    asyncIOWriter.write(bytes, start, offset);
                }
            }

        };
    } ##FSTMerge## ##FSTMerge## @Override
    public ServletOutputStream getOutputStream() throws IOException {
        return new ServletOutputStream() {

            public void write(int i) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, new byte[]{(byte) i}, 0, 1));
                } else {
                    asyncIOWriter.write(new byte[]{(byte) i});
                }
            }


            public void write(byte[] bytes) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, bytes, 0, bytes.length));
                } else {
                    asyncIOWriter.write(bytes);
                }
            }

            public void write(byte[] bytes, int start, int offset) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    byte[] b = asyncProtocol.handleResponse(AtmosphereResponse.this, bytes, start, offset);
                    asyncIOWriter.write(b, 0, b.length);
                } else {
                    asyncIOWriter.write(bytes, start, offset);
                }
            }
        };
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public PrintWriter getWriter() throws IOException {
        return new PrintWriter(getOutputStream()) {
            public void write(char[] chars, int offset, int lenght) {
                try {
                    if (asyncProtocol.inspectResponse()) {
                        asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, new String(chars, offset, lenght)));
                    } else {
                        asyncIOWriter.write(new String(chars, offset, lenght));
                    }
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }

            public void write(char[] chars) {
                try {
                    if (asyncProtocol.inspectResponse()) {
                        asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, new String(chars)));
                    } else {
                        asyncIOWriter.write(new String(chars));
                    }
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }

            public void write(String s, int offset, int lenght) {
                try {
                    if (asyncProtocol.inspectResponse()) {
                        asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, new String(s.substring(offset, lenght))));
                    } else {
                        asyncIOWriter.write(new String(s.substring(offset, lenght)));
                    }
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }

            public void write(java.lang.String s) {
                try {
                    if (asyncProtocol.inspectResponse()) {
                        asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, new String(s)));
                    } else {
                        asyncIOWriter.write(new String(s));
                    }
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        };
    } ##FSTMerge## ##FSTMerge## @Override
    public PrintWriter getWriter() throws IOException {
        return new PrintWriter(getOutputStream()) {
            public void write(char[] chars, int offset, int lenght) {
                try {
                    if (asyncProtocol.inspectResponse()) {
                        asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, new String(chars, offset, lenght)));
                    } else {
                        asyncIOWriter.write(new String(chars, offset, lenght));
                    }
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }

            public void write(char[] chars) {
                try {
                    if (asyncProtocol.inspectResponse()) {
                        asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, new String(chars)));
                    } else {
                        asyncIOWriter.write(new String(chars));
                    }
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }

            public void write(String s, int offset, int lenght) {
                try {
                    if (asyncProtocol.inspectResponse()) {
                        asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, new String(s.substring(offset, lenght))));
                    } else {
                        asyncIOWriter.write(new String(s.substring(offset, lenght)));
                    }
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }

            public void write(java.lang.String s) {
                try {
                    if (asyncProtocol.inspectResponse()) {
                        asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, new String(s)));
                    } else {
                        asyncIOWriter.write(new String(s));
                    }
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        };
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void setContentLength(int len) {
        contentLength = len;
    } ##FSTMerge## ##FSTMerge## @Override
    public void setContentLength(int len) {
        contentLength = len;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void setContentType(String contentType) {
        this.contentType = contentType;
    } ##FSTMerge## ##FSTMerge## @Override
    public void setContentType(String contentType) {
        this.contentType = contentType;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public String getContentType() {
        return contentType;
    } ##FSTMerge## ##FSTMerge## @Override
    public String getContentType() {
        return contentType;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public boolean isCommitted() {
        return isCommited;
    } ##FSTMerge## ##FSTMerge## @Override
    public boolean isCommitted() {
        return isCommited;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void setLocale(Locale locale) {
        this.locale = locale;
    } ##FSTMerge## ##FSTMerge## @Override
    public void setLocale(Locale locale) {
        this.locale = locale;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public Locale getLocale() {
        return locale;
    } ##FSTMerge## ##FSTMerge## @Override
    public Locale getLocale() {
        return locale;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public boolean isWrapperFor(ServletResponse wrapped) {
        return false;
    } ##FSTMerge## ##FSTMerge## @Override
    public boolean isWrapperFor(ServletResponse wrapped) {
        return false;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public boolean isWrapperFor(Class wrappedType) {
        return false;
    } ##FSTMerge## ##FSTMerge## @Override
    public boolean isWrapperFor(Class wrappedType) {
        return false;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public A getasyncIOWriter() {
        return asyncIOWriter;
    } ##FSTMerge## ##FSTMerge## public A getasyncIOWriter() {
        return asyncIOWriter;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public HttpServletRequest getRequest() {
        return atmosphereRequest;
    } ##FSTMerge## ##FSTMerge## public HttpServletRequest getRequest() {
        return atmosphereRequest;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final static ##FSTMerge## ##FSTMerge## private final static
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: ImplementList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ implements HttpServletResponse ##FSTMerge## ##FSTMerge## implements HttpServletResponse
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void addCookie(Cookie cookie) {
        } ##FSTMerge## ##FSTMerge## public void addCookie(Cookie cookie) {
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public boolean containsHeader(String name) {
            return false;
        } ##FSTMerge## ##FSTMerge## public boolean containsHeader(String name) {
            return false;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public String encodeURL(String url) {
            return null;
        } ##FSTMerge## ##FSTMerge## public String encodeURL(String url) {
            return null;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public String encodeRedirectURL(String url) {
            return null;
        } ##FSTMerge## ##FSTMerge## public String encodeRedirectURL(String url) {
            return null;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public String encodeUrl(String url) {
            return null;
        } ##FSTMerge## ##FSTMerge## public String encodeUrl(String url) {
            return null;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public String encodeRedirectUrl(String url) {
            return null;
        } ##FSTMerge## ##FSTMerge## public String encodeRedirectUrl(String url) {
            return null;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void sendError(int sc, String msg) throws IOException {
        } ##FSTMerge## ##FSTMerge## public void sendError(int sc, String msg) throws IOException {
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void sendError(int sc) throws IOException {

        } ##FSTMerge## ##FSTMerge## public void sendError(int sc) throws IOException {

        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void sendRedirect(String location) throws IOException {

        } ##FSTMerge## ##FSTMerge## public void sendRedirect(String location) throws IOException {

        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setDateHeader(String name, long date) {

        } ##FSTMerge## ##FSTMerge## public void setDateHeader(String name, long date) {

        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void addDateHeader(String name, long date) {

        } ##FSTMerge## ##FSTMerge## public void addDateHeader(String name, long date) {

        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setHeader(String name, String value) {

        } ##FSTMerge## ##FSTMerge## public void setHeader(String name, String value) {

        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void addHeader(String name, String value) {

        } ##FSTMerge## ##FSTMerge## public void addHeader(String name, String value) {

        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setIntHeader(String name, int value) {

        } ##FSTMerge## ##FSTMerge## public void setIntHeader(String name, int value) {

        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void addIntHeader(String name, int value) {

        } ##FSTMerge## ##FSTMerge## public void addIntHeader(String name, int value) {

        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setStatus(int sc) {

        } ##FSTMerge## ##FSTMerge## public void setStatus(int sc) {

        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setStatus(int sc, String sm) {
        } ##FSTMerge## ##FSTMerge## public void setStatus(int sc, String sm) {
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public int getStatus() {
            return 0;
        } ##FSTMerge## ##FSTMerge## public int getStatus() {
            return 0;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public String getHeader(String name) {
            return null;
        } ##FSTMerge## ##FSTMerge## public String getHeader(String name) {
            return null;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Collection<String> getHeaders(String name) {
            return null;
        } ##FSTMerge## ##FSTMerge## public Collection<String> getHeaders(String name) {
            return null;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Collection<String> getHeaderNames() {
            return null;
        } ##FSTMerge## ##FSTMerge## public Collection<String> getHeaderNames() {
            return null;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public String getCharacterEncoding() {
            return null;
        } ##FSTMerge## ##FSTMerge## public String getCharacterEncoding() {
            return null;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public String getContentType() {
            return null;
        } ##FSTMerge## ##FSTMerge## public String getContentType() {
            return null;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public ServletOutputStream getOutputStream() throws IOException {
            return null;
        } ##FSTMerge## ##FSTMerge## public ServletOutputStream getOutputStream() throws IOException {
            return null;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public PrintWriter getWriter() throws IOException {
            return null;
        } ##FSTMerge## ##FSTMerge## public PrintWriter getWriter() throws IOException {
            return null;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setCharacterEncoding(String charset) {

        } ##FSTMerge## ##FSTMerge## public void setCharacterEncoding(String charset) {

        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setContentLength(int len) {

        } ##FSTMerge## ##FSTMerge## public void setContentLength(int len) {

        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setContentType(String type) {

        } ##FSTMerge## ##FSTMerge## public void setContentType(String type) {

        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setBufferSize(int size) {

        } ##FSTMerge## ##FSTMerge## public void setBufferSize(int size) {

        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public int getBufferSize() {
            return 0;
        } ##FSTMerge## ##FSTMerge## public int getBufferSize() {
            return 0;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void flushBuffer() throws IOException {

        } ##FSTMerge## ##FSTMerge## public void flushBuffer() throws IOException {

        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void resetBuffer() {

        } ##FSTMerge## ##FSTMerge## public void resetBuffer() {

        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public boolean isCommitted() {
            return false;
        } ##FSTMerge## ##FSTMerge## public boolean isCommitted() {
            return false;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void reset() {
        } ##FSTMerge## ##FSTMerge## public void reset() {
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setLocale(Locale loc) {
        } ##FSTMerge## ##FSTMerge## public void setLocale(Locale loc) {
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Locale getLocale() {
            return null;
        } ##FSTMerge## ##FSTMerge## public Locale getLocale() {
            return null;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public ##FSTMerge## ##FSTMerge## public
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncProtocol.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: copiedFile
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ boolean inspectResponse(); ##FSTMerge## ##FSTMerge## boolean inspectResponse();
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncProtocol.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: copiedFile
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ String handleResponse(AtmosphereResponse<?> res, String message); ##FSTMerge## ##FSTMerge## String handleResponse(AtmosphereResponse<?> res, String message);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncProtocol.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: copiedFile
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ byte[] handleResponse(AtmosphereResponse<?> res, byte[] message, int offset, int length); ##FSTMerge## ##FSTMerge## byte[] handleResponse(AtmosphereResponse<?> res, byte[] message, int offset, int length);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncProtocol.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public ##FSTMerge## ##FSTMerge## public
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriter.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: copiedFile
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void redirect(String location) throws IOException; ##FSTMerge## ##FSTMerge## void redirect(String location) throws IOException;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriter.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: copiedFile
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void writeError(int errorCode, String message) throws IOException; ##FSTMerge## ##FSTMerge## void writeError(int errorCode, String message) throws IOException;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriter.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: copiedFile
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void write(String data) throws IOException; ##FSTMerge## ##FSTMerge## void write(String data) throws IOException;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriter.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: copiedFile
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void write(byte[] data) throws IOException; ##FSTMerge## ##FSTMerge## void write(byte[] data) throws IOException;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriter.java
############## CONFLICT ##############
Conflict type: SameSignatureCM
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: copiedFile
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void write(byte[] data, int offset, int length) throws IOException; ##FSTMerge## ##FSTMerge## void write(byte[] data, int offset, int length) throws IOException;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriter.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public ##FSTMerge## ##FSTMerge## public
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: ImplementList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ implements org.eclipse.jetty.websocket.WebSocket,
        org.eclipse.jetty.websocket.WebSocket.OnFrame,
        org.eclipse.jetty.websocket.WebSocket.OnBinaryMessage,
        org.eclipse.jetty.websocket.WebSocket.OnTextMessage,
        org.eclipse.jetty.websocket.WebSocket.OnControl ##FSTMerge## ##FSTMerge## implements org.eclipse.jetty.websocket.WebSocket,
        org.eclipse.jetty.websocket.WebSocket.OnFrame,
        org.eclipse.jetty.websocket.WebSocket.OnBinaryMessage,
        org.eclipse.jetty.websocket.WebSocket.OnTextMessage,
        org.eclipse.jetty.websocket.WebSocket.OnControl
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private static final Logger logger = LoggerFactory.getLogger(JettyWebSocketHandler.class); ##FSTMerge## ##FSTMerge## private static final Logger logger = LoggerFactory.getLogger(JettyWebSocketHandler.class);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private WebSocketProcessor webSocketProcessor; ##FSTMerge## ##FSTMerge## private WebSocketProcessor webSocketProcessor;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final HttpServletRequest request; ##FSTMerge## ##FSTMerge## private final JettyRequestFix request;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final AtmosphereServlet atmosphereServlet; ##FSTMerge## ##FSTMerge## private final AtmosphereServlet atmosphereServlet;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private WebSocketProtocol webSocketProtocol; ##FSTMerge## ##FSTMerge## private WebSocketProtocol webSocketProtocol;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onConnect(org.eclipse.jetty.websocket.WebSocket.Outbound outbound) {

        logger.debug("WebSocket.onConnect (outbound)");
        try {
            webSocketProcessor = new WebSocketProcessor(atmosphereServlet, new JettyWebSocket(outbound), webSocketProtocol);
            webSocketProcessor.dispatch(request);
        } catch (Exception e) {
            logger.warn("failed to connect to web socket", e);
        }
    } ##FSTMerge## ##FSTMerge## @Override
    public void onConnect(org.eclipse.jetty.websocket.WebSocket.Outbound outbound) {

        logger.debug("WebSocket.onConnect (outbound)");
        try {
            webSocketProcessor = new WebSocketProcessor(atmosphereServlet, new JettyWebSocket(outbound), webSocketProtocol);
            webSocketProcessor.dispatch(request);
        } catch (Exception e) {
            logger.warn("failed to connect to web socket", e);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onMessage(byte frame, String data) {
        logger.trace("WebSocket.onMessage (frame/string)");
        webSocketProcessor.invokeWebSocketProtocol(data);
        webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent(data, MESSAGE, webSocketProcessor.webSocket()));
    } ##FSTMerge## ##FSTMerge## @Override
    public void onMessage(byte frame, String data) {
        logger.trace("WebSocket.onMessage (frame/string)");
        webSocketProcessor.invokeWebSocketProtocol(data);
        webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent(data, MESSAGE, webSocketProcessor.webSocket()));
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onMessage(byte frame, byte[] data, int offset, int length) {
        logger.trace("WebSocket.onMessage (frame)");
        webSocketProcessor.invokeWebSocketProtocol(new String(data, offset, length));
        try {
            webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent(new String(data, offset, length, "UTF-8"), MESSAGE, webSocketProcessor.webSocket()));
        } catch (UnsupportedEncodingException e) {
            logger.warn("UnsupportedEncodingException", e);

        }
    } ##FSTMerge## ##FSTMerge## @Override
    public void onMessage(byte frame, byte[] data, int offset, int length) {
        logger.trace("WebSocket.onMessage (frame)");
        webSocketProcessor.invokeWebSocketProtocol(new String(data, offset, length));
        try {
            webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent(new String(data, offset, length, "UTF-8"), MESSAGE, webSocketProcessor.webSocket()));
        } catch (UnsupportedEncodingException e) {
            logger.warn("UnsupportedEncodingException", e);

        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onFragment(boolean more, byte opcode, byte[] data, int offset, int length) {
        logger.trace("WebSocket.onFragment");
        webSocketProcessor.invokeWebSocketProtocol(new String(data, offset, length));
        try {
            webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent(new String(data, offset, length, "UTF-8"), MESSAGE, webSocketProcessor.webSocket()));
        } catch (UnsupportedEncodingException e) {
            logger.warn("UnsupportedEncodingException", e);

        }
    } ##FSTMerge## ##FSTMerge## @Override
    public void onFragment(boolean more, byte opcode, byte[] data, int offset, int length) {
        logger.trace("WebSocket.onFragment");
        webSocketProcessor.invokeWebSocketProtocol(new String(data, offset, length));
        try {
            webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent(new String(data, offset, length, "UTF-8"), MESSAGE, webSocketProcessor.webSocket()));
        } catch (UnsupportedEncodingException e) {
            logger.warn("UnsupportedEncodingException", e);

        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onDisconnect() {
        logger.trace("WebSocket.onDisconnect");
        webSocketProcessor.close();
        webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent("", DISCONNECT, webSocketProcessor.webSocket()));
    } ##FSTMerge## ##FSTMerge## @Override
    public void onDisconnect() {
        request.destroy();
        logger.trace("WebSocket.onDisconnect");
        webSocketProcessor.close();
        webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent("", DISCONNECT, webSocketProcessor.webSocket()));
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onMessage(byte[] data, int offset, int length) {
        logger.trace("WebSocket.onMessage (bytes)");
        webSocketProcessor.invokeWebSocketProtocol(data, offset, length);
        try {
            webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent(new String(data, offset, length, "UTF-8"), MESSAGE, webSocketProcessor.webSocket()));
        } catch (UnsupportedEncodingException e) {
            logger.warn("UnsupportedEncodingException", e);

        }
    } ##FSTMerge## ##FSTMerge## @Override
    public void onMessage(byte[] data, int offset, int length) {
        logger.trace("WebSocket.onMessage (bytes)");
        webSocketProcessor.invokeWebSocketProtocol(data, offset, length);
        try {
            webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent(new String(data, offset, length, "UTF-8"), MESSAGE, webSocketProcessor.webSocket()));
        } catch (UnsupportedEncodingException e) {
            logger.warn("UnsupportedEncodingException", e);

        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public boolean onControl(byte controlCode, byte[] data, int offset, int length) {
        logger.trace("WebSocket.onControl.");
        webSocketProcessor.invokeWebSocketProtocol(data, offset, length);
        try {
            webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent(new String(data, offset, length, "UTF-8"), CONTROL, webSocketProcessor.webSocket()));
        } catch (UnsupportedEncodingException e) {
            logger.warn("UnsupportedEncodingException", e);

        }
        return false;
    } ##FSTMerge## ##FSTMerge## @Override
    public boolean onControl(byte controlCode, byte[] data, int offset, int length) {
        logger.trace("WebSocket.onControl.");
        webSocketProcessor.invokeWebSocketProtocol(data, offset, length);
        try {
            webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent(new String(data, offset, length, "UTF-8"), CONTROL, webSocketProcessor.webSocket()));
        } catch (UnsupportedEncodingException e) {
            logger.warn("UnsupportedEncodingException", e);

        }
        return false;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public boolean onFrame(byte flags, byte opcode, byte[] data, int offset, int length) {
        logger.trace("WebSocket.onFrame.");
        // TODO: onMessage is always invoked after that method gets called, so no need to enable for now.
        //       webSocketProcessor.broadcast(data, offset, length);
        /* try {
            webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent(new String(data, offset, length, "UTF-8"), MESSAGE, webSocketProcessor.webSocket()));
        } catch (UnsupportedEncodingException e) {
            logger.warn("UnsupportedEncodingException", e);

        }*/
        return false;
    } ##FSTMerge## ##FSTMerge## @Override
    public boolean onFrame(byte flags, byte opcode, byte[] data, int offset, int length) {
        logger.trace("WebSocket.onFrame.");
        // TODO: onMessage is always invoked after that method gets called, so no need to enable for now.
        //       webSocketProcessor.broadcast(data, offset, length);
        /* try {
            webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent(new String(data, offset, length, "UTF-8"), MESSAGE, webSocketProcessor.webSocket()));
        } catch (UnsupportedEncodingException e) {
            logger.warn("UnsupportedEncodingException", e);

        }*/
        return false;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onHandshake(org.eclipse.jetty.websocket.WebSocket.FrameConnection connection) {
        logger.trace("WebSocket.onHandshake");
        try {
            webSocketProcessor = new WebSocketProcessor(atmosphereServlet, new Jetty8WebSocket(connection), webSocketProtocol);
        } catch (Exception e) {
            logger.warn("failed to connect to web socket", e);
        }

        webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent("", HANDSHAKE, webSocketProcessor.webSocket()));
    } ##FSTMerge## ##FSTMerge## @Override
    public void onHandshake(org.eclipse.jetty.websocket.WebSocket.FrameConnection connection) {
        logger.trace("WebSocket.onHandshake");
        try {
            webSocketProcessor = new WebSocketProcessor(atmosphereServlet, new Jetty8WebSocket(connection), webSocketProtocol);
        } catch (Exception e) {
            logger.warn("failed to connect to web socket", e);
        }

        webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent("", HANDSHAKE, webSocketProcessor.webSocket()));
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onMessage(String data) {
        logger.trace("WebSocket.onMessage");
        webSocketProcessor.invokeWebSocketProtocol(data);
        webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent(data, MESSAGE, webSocketProcessor.webSocket()));
    } ##FSTMerge## ##FSTMerge## @Override
    public void onMessage(String data) {
        logger.trace("WebSocket.onMessage");
        webSocketProcessor.invokeWebSocketProtocol(data);
        webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent(data, MESSAGE, webSocketProcessor.webSocket()));
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onOpen(org.eclipse.jetty.websocket.WebSocket.Connection connection) {
        logger.trace("WebSocket.onOpen.");
        try {
            webSocketProcessor = new WebSocketProcessor(atmosphereServlet, new Jetty8WebSocket(connection), webSocketProtocol);
            webSocketProcessor.dispatch(request);
            webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent("", CONNECT, webSocketProcessor.webSocket()));
        } catch (Exception e) {
            logger.warn("failed to connect to web socket", e);
        }
    } ##FSTMerge## ##FSTMerge## @Override
    public void onOpen(org.eclipse.jetty.websocket.WebSocket.Connection connection) {
        logger.trace("WebSocket.onOpen.");
        try {
            webSocketProcessor = new WebSocketProcessor(atmosphereServlet, new Jetty8WebSocket(connection), webSocketProtocol);
            webSocketProcessor.dispatch(request);
            webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent("", CONNECT, webSocketProcessor.webSocket()));
        } catch (Exception e) {
            logger.warn("failed to connect to web socket", e);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void onClose(int closeCode, String message) {
        logger.trace("WebSocket.OnClose.");
        webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent("", CLOSE, webSocketProcessor.webSocket()));
        webSocketProcessor.close();
    } ##FSTMerge## ##FSTMerge## @Override
    public void onClose(int closeCode, String message) {
        logger.trace("WebSocket.OnClose.");
        request.destroy();
        if (webSocketProcessor == null) return;

        webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent("", CLOSE, webSocketProcessor.webSocket()));
        webSocketProcessor.close();

    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private static ##FSTMerge## ##FSTMerge## private static
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: ExtendsList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ extends HttpServletRequestWrapper ##FSTMerge## ##FSTMerge## extends HttpServletRequestWrapper
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final String contextPath; ##FSTMerge## ##FSTMerge## private final String contextPath;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final String servletPath; ##FSTMerge## ##FSTMerge## private final String servletPath;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final String pathInfo; ##FSTMerge## ##FSTMerge## private final String pathInfo;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final String requestUri; ##FSTMerge## ##FSTMerge## private final String requestUri;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final HttpSession httpSession; ##FSTMerge## ##FSTMerge## private final FakeHttpSession httpSession;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final StringBuffer requestURL; ##FSTMerge## ##FSTMerge## private final StringBuffer requestURL;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final HashMap<String, Object> attributes = new HashMap<String, Object>(); ##FSTMerge## ##FSTMerge## private final HashMap<String, Object> attributes = new HashMap<String, Object>();
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final HashMap<String, String> headers = new HashMap<String, String>(); ##FSTMerge## ##FSTMerge## private final HashMap<String, String> headers = new HashMap<String, String>();
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final HashMap<String, String[]> parameters = new HashMap<String, String[]>(); ##FSTMerge## ##FSTMerge## private final HashMap<String, String[]> parameters = new HashMap<String, String[]>();
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final String method; ##FSTMerge## ##FSTMerge## private final String method;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final String serverName; ##FSTMerge## ##FSTMerge## private final String serverName;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final int serverPort; ##FSTMerge## ##FSTMerge## private final int serverPort;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public JettyRequestFix(HttpServletRequest request) {
            super(request);
            this.servletPath = request.getServletPath();
            this.contextPath = request.getContextPath();
            this.pathInfo = request.getPathInfo();
            this.requestUri = request.getRequestURI();
            this.requestURL = request.getRequestURL();
            this.method = request.getMethod();
            this.serverName = request.getServerName();
            this.serverPort = request.getServerPort();

            HttpSession session = request.getSession(true);
            httpSession = new FakeHttpSession(session.getId(), session.getServletContext(), session.getCreationTime());

            Enumeration<String> e = request.getHeaderNames();
            String s;
            while (e.hasMoreElements()) {
                s = e.nextElement();
                headers.put(s, request.getHeader(s));
            }

            e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                s = e.nextElement();
                attributes.put(s, request.getAttribute(s));
            }

            e = request.getParameterNames();
            while (e.hasMoreElements()) {
                s = e.nextElement();
                parameters.put(s, request.getParameterValues(s));
            }
        } ##FSTMerge## ##FSTMerge## public JettyRequestFix(HttpServletRequest request) {
            super(request);
            this.servletPath = request.getServletPath();
            this.contextPath = request.getContextPath();
            this.pathInfo = request.getPathInfo();
            this.requestUri = request.getRequestURI();
            this.requestURL = request.getRequestURL();
            this.method = request.getMethod();
            this.serverName = request.getServerName();
            this.serverPort = request.getServerPort();

            HttpSession session = request.getSession(true);
            httpSession = new FakeHttpSession(session.getId(), session.getServletContext(), session.getCreationTime());

            Enumeration<String> e = request.getHeaderNames();
            String s;
            while (e.hasMoreElements()) {
                s = e.nextElement();
                headers.put(s, request.getHeader(s));
            }

            e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                s = e.nextElement();
                attributes.put(s, request.getAttribute(s));
            }

            e = request.getParameterNames();
            while (e.hasMoreElements()) {
                s = e.nextElement();
                parameters.put(s, request.getParameterValues(s));
            }
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public String getServerName() {
            return serverName;
        } ##FSTMerge## ##FSTMerge## @Override
        public String getServerName() {
            return serverName;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public int getServerPort() {
            return serverPort;
        } ##FSTMerge## ##FSTMerge## @Override
        public int getServerPort() {
            return serverPort;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public HttpSession getSession(boolean create) {
            return httpSession;
        } ##FSTMerge## ##FSTMerge## @Override
        public HttpSession getSession(boolean create) {
            return httpSession;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public String getMethod() {
            return method;
        } ##FSTMerge## ##FSTMerge## @Override
        public String getMethod() {
            return method;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public String getHeader(String name) {
            return headers.get(name);
        } ##FSTMerge## ##FSTMerge## @Override
        public String getHeader(String name) {
            return headers.get(name);
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public Enumeration<String> getHeaders(final String name) {
            return new Enumeration<String>() {

                boolean hasNext = true;

                @Override
                public boolean hasMoreElements() {
                    return hasNext && headers.get(name) != null;
                }

                @Override
                public String nextElement() {
                    hasNext = false;
                    return headers.get(name);
                }
            };
        } ##FSTMerge## ##FSTMerge## @Override
        public Enumeration<String> getHeaders(final String name) {
            return new Enumeration<String>() {

                boolean hasNext = true;

                @Override
                public boolean hasMoreElements() {
                    return hasNext && headers.get(name) != null;
                }

                @Override
                public String nextElement() {
                    hasNext = false;
                    return headers.get(name);
                }
            };
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public Enumeration<String> getParameterNames() {
            return Collections.enumeration(parameters.keySet());
        } ##FSTMerge## ##FSTMerge## @Override
        public Enumeration<String> getParameterNames() {
            return Collections.enumeration(parameters.keySet());
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public String getParameter(String name) {
            return parameters.get(name) != null ? parameters.get(name)[0] : null;
        } ##FSTMerge## ##FSTMerge## @Override
        public String getParameter(String name) {
            return parameters.get(name) != null ? parameters.get(name)[0] : null;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public String[] getParameterValues(final String name) {
            return parameters.get(name);
        } ##FSTMerge## ##FSTMerge## @Override
        public String[] getParameterValues(final String name) {
            return parameters.get(name);
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public Enumeration<String> getHeaderNames() {
            return Collections.enumeration(headers.keySet());
        } ##FSTMerge## ##FSTMerge## @Override
        public Enumeration<String> getHeaderNames() {
            return Collections.enumeration(headers.keySet());
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public Object getAttribute(String name) {
            return attributes.get(name);
        } ##FSTMerge## ##FSTMerge## @Override
        public Object getAttribute(String name) {
            return attributes.get(name);
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public Enumeration<String> getAttributeNames() {
            return Collections.enumeration(attributes.keySet());
        } ##FSTMerge## ##FSTMerge## @Override
        public Enumeration<String> getAttributeNames() {
            return Collections.enumeration(attributes.keySet());
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void setAttribute(String name, Object o) {
            attributes.put(name, o);
        } ##FSTMerge## ##FSTMerge## @Override
        public void setAttribute(String name, Object o) {
            attributes.put(name, o);
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void removeAttribute(String name) {
            attributes.remove(name);
        } ##FSTMerge## ##FSTMerge## @Override
        public void removeAttribute(String name) {
            attributes.remove(name);
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public String getContextPath() {
            return contextPath;
        } ##FSTMerge## ##FSTMerge## @Override
        public String getContextPath() {
            return contextPath;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public String getServletPath() {
            return servletPath;
        } ##FSTMerge## ##FSTMerge## @Override
        public String getServletPath() {
            return servletPath;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public String getPathInfo() {
            return pathInfo;
        } ##FSTMerge## ##FSTMerge## @Override
        public String getPathInfo() {
            return pathInfo;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public String getRequestURI() {
            return requestUri;
        } ##FSTMerge## ##FSTMerge## @Override
        public String getRequestURI() {
            return requestUri;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public HttpSession getSession() {
            return httpSession;
        } ##FSTMerge## ##FSTMerge## @Override
        public HttpSession getSession() {
            return httpSession;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public StringBuffer getRequestURL() {
            return requestURL;
        } ##FSTMerge## ##FSTMerge## @Override
        public StringBuffer getRequestURL() {
            return requestURL;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final static ##FSTMerge## ##FSTMerge## private final static
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: ImplementList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ implements HttpSession ##FSTMerge## ##FSTMerge## implements HttpSession
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final long creationTime; ##FSTMerge## ##FSTMerge## private final long creationTime;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final ConcurrentHashMap<String, Object> attributes = new ConcurrentHashMap<String, Object>(); ##FSTMerge## ##FSTMerge## private final ConcurrentHashMap<String, Object> attributes = new ConcurrentHashMap<String, Object>();
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final String sessionId; ##FSTMerge## ##FSTMerge## private final String sessionId;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final ServletContext servletContext; ##FSTMerge## ##FSTMerge## private final ServletContext servletContext;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private int maxInactiveInterval; ##FSTMerge## ##FSTMerge## private int maxInactiveInterval;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public FakeHttpSession(String sessionId, ServletContext servletContext, long creationTime) {
            this.sessionId = sessionId;
            this.servletContext = servletContext;
            this.creationTime = creationTime;
        } ##FSTMerge## ##FSTMerge## public FakeHttpSession(String sessionId, ServletContext servletContext, long creationTime) {
            this.sessionId = sessionId;
            this.servletContext = servletContext;
            this.creationTime = creationTime;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public long getCreationTime() {
            return creationTime;
        } ##FSTMerge## ##FSTMerge## @Override
        public long getCreationTime() {
            return creationTime;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public String getId() {
            return sessionId;
        } ##FSTMerge## ##FSTMerge## @Override
        public String getId() {
            return sessionId;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public long getLastAccessedTime() {
            return 0;
        } ##FSTMerge## ##FSTMerge## @Override
        public long getLastAccessedTime() {
            return 0;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public ServletContext getServletContext() {
            return servletContext;
        } ##FSTMerge## ##FSTMerge## @Override
        public ServletContext getServletContext() {
            return servletContext;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void setMaxInactiveInterval(int interval) {
            this.maxInactiveInterval = interval;
        } ##FSTMerge## ##FSTMerge## @Override
        public void setMaxInactiveInterval(int interval) {
            this.maxInactiveInterval = interval;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public int getMaxInactiveInterval() {
            return maxInactiveInterval;
        } ##FSTMerge## ##FSTMerge## @Override
        public int getMaxInactiveInterval() {
            return maxInactiveInterval;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public HttpSessionContext getSessionContext() {
            return null;
        } ##FSTMerge## ##FSTMerge## @Override
        public HttpSessionContext getSessionContext() {
            return null;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public Object getAttribute(String name) {
            return attributes.get(name);
        } ##FSTMerge## ##FSTMerge## @Override
        public Object getAttribute(String name) {
            return attributes.get(name);
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public Object getValue(String name) {
            return attributes.get(name);
        } ##FSTMerge## ##FSTMerge## @Override
        public Object getValue(String name) {
            return attributes.get(name);
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public Enumeration<String> getAttributeNames() {
            return attributes.keys();
        } ##FSTMerge## ##FSTMerge## @Override
        public Enumeration<String> getAttributeNames() {
            return attributes.keys();
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public String[] getValueNames() {
            return (String[]) Collections.list(attributes.keys()).toArray();
        } ##FSTMerge## ##FSTMerge## @Override
        public String[] getValueNames() {
            return (String[]) Collections.list(attributes.keys()).toArray();
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void setAttribute(String name, Object value) {
            attributes.put(name, value);
        } ##FSTMerge## ##FSTMerge## @Override
        public void setAttribute(String name, Object value) {
            attributes.put(name, value);
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void putValue(String name, Object value) {
            attributes.put(name, value);
        } ##FSTMerge## ##FSTMerge## @Override
        public void putValue(String name, Object value) {
            attributes.put(name, value);
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void removeAttribute(String name) {
            attributes.remove(name);
        } ##FSTMerge## ##FSTMerge## @Override
        public void removeAttribute(String name) {
            attributes.remove(name);
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void removeValue(String name) {
            attributes.remove(name);
        } ##FSTMerge## ##FSTMerge## @Override
        public void removeValue(String name) {
            attributes.remove(name);
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public void invalidate() {
        } ##FSTMerge## ##FSTMerge## @Override
        public void invalidate() {
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
        public boolean isNew() {
            return false;
        } ##FSTMerge## ##FSTMerge## @Override
        public boolean isNew() {
            return false;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public ##FSTMerge## ##FSTMerge## public
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/JettyWebSocket.java
############## CONFLICT ##############
Conflict type: ExtendsList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ extends WebSocketAdapter ##FSTMerge## ##FSTMerge## extends WebSocketAdapter
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/JettyWebSocket.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private static final Logger logger = LoggerFactory.getLogger(JettyWebSocket.class); ##FSTMerge## ##FSTMerge## private static final Logger logger = LoggerFactory.getLogger(JettyWebSocket.class);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/JettyWebSocket.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final Outbound outbound; ##FSTMerge## ##FSTMerge## private final Outbound outbound;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/JettyWebSocket.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final byte frame = 0x00; ##FSTMerge## ##FSTMerge## private final byte frame = 0x00;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/JettyWebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public JettyWebSocket(Outbound outbound) {
        this.outbound = outbound;
    } ##FSTMerge## ##FSTMerge## public JettyWebSocket(Outbound outbound) {
        this.outbound = outbound;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/JettyWebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void writeError(int errorCode, String message) throws IOException {
        logger.debug("{} {}", errorCode, message);
    } ##FSTMerge## ##FSTMerge## @Override
    public void writeError(int errorCode, String message) throws IOException {
        logger.debug("{} {}", errorCode, message);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/JettyWebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void redirect(String location) throws IOException {
        logger.error("redirect not supported");
    } ##FSTMerge## ##FSTMerge## @Override
    public void redirect(String location) throws IOException {
        logger.error("redirect not supported");
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/JettyWebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void write(String data) throws IOException {
        if (!outbound.isOpen()) throw new IOException("Connection remotely closed");
        logger.trace("WebSocket.write()");
        outbound.sendMessage(frame, data);
    } ##FSTMerge## ##FSTMerge## @Override
    public void write(String data) throws IOException {
        if (!outbound.isOpen()) throw new IOException("Connection remotely closed");
        logger.trace("WebSocket.write()");
        outbound.sendMessage(frame, data);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/JettyWebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void write(byte[] data) throws IOException {
        if (!outbound.isOpen()) throw new IOException("Connection remotely closed");
        logger.trace("WebSocket.write()");
        outbound.sendMessage(frame, data, 0, data.length);
    } ##FSTMerge## ##FSTMerge## @Override
    public void write(byte[] data) throws IOException {
        if (!outbound.isOpen()) throw new IOException("Connection remotely closed");
        logger.trace("WebSocket.write()");
        outbound.sendMessage(frame, data, 0, data.length);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/JettyWebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void write(byte[] data, int offset, int length) throws IOException {
        if (!outbound.isOpen()) throw new IOException("Connection remotely closed");
        logger.trace("WebSocket.write()");
        outbound.sendMessage(frame, data, offset, length);
    } ##FSTMerge## ##FSTMerge## @Override
    public void write(byte[] data, int offset, int length) throws IOException {
        if (!outbound.isOpen()) throw new IOException("Connection remotely closed");
        logger.trace("WebSocket.write()");
        outbound.sendMessage(frame, data, offset, length);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/JettyWebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void close() throws IOException {
        outbound.disconnect();
    } ##FSTMerge## ##FSTMerge## @Override
    public void close() throws IOException {
        outbound.disconnect();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/JettyWebSocket.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public ##FSTMerge## ##FSTMerge## public
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
############## CONFLICT ##############
Conflict type: ExtendsList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ extends WebSocketAdapter ##FSTMerge## ##FSTMerge## extends WebSocketAdapter
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private static final Logger logger = LoggerFactory.getLogger(Jetty8WebSocket.class); ##FSTMerge## ##FSTMerge## private static final Logger logger = LoggerFactory.getLogger(Jetty8WebSocket.class);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final Connection connection; ##FSTMerge## ##FSTMerge## private final Connection connection;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Jetty8WebSocket(Connection connection) {
        this.connection = connection;
    } ##FSTMerge## ##FSTMerge## public Jetty8WebSocket(Connection connection) {
        this.connection = connection;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void writeError(int errorCode, String message) throws IOException {
        logger.debug("{} {}", errorCode, message);
    } ##FSTMerge## ##FSTMerge## @Override
    public void writeError(int errorCode, String message) throws IOException {
        logger.debug("{} {}", errorCode, message);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void redirect(String location) throws IOException {
        logger.error("redirect not supported");
    } ##FSTMerge## ##FSTMerge## @Override
    public void redirect(String location) throws IOException {
        logger.error("redirect not supported");
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void write(String data) throws IOException {
        if (!connection.isOpen()) throw new IOException("Connection remotely closed");
        logger.trace("WebSocket.write()");
        connection.sendMessage(data);
    } ##FSTMerge## ##FSTMerge## @Override
    public void write(String data) throws IOException {
        if (!connection.isOpen()) throw new IOException("Connection remotely closed");
        logger.trace("WebSocket.write()");
        connection.sendMessage(data);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void write(byte[] data) throws IOException {
        if (!connection.isOpen()) throw new IOException("Connection remotely closed");
        logger.trace("WebSocket.write()");
        connection.sendMessage(data, 0, data.length);
    } ##FSTMerge## ##FSTMerge## @Override
    public void write(byte[] data) throws IOException {
        if (!connection.isOpen()) throw new IOException("Connection remotely closed");
        logger.trace("WebSocket.write()");
        connection.sendMessage(data, 0, data.length);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void write(byte[] data, int offset, int length) throws IOException {
        if (!connection.isOpen()) throw new IOException("Connection remotely closed");
        logger.trace("WebSocket.write()");
        // Chrome doesn't like it, throwing: Received a binary frame which is not supported yet. So send a String instead
        connection.sendMessage(new String(data, offset, length, "UTF-8"));
    } ##FSTMerge## ##FSTMerge## @Override
    public void write(byte[] data, int offset, int length) throws IOException {
        if (!connection.isOpen()) throw new IOException("Connection remotely closed");
        logger.trace("WebSocket.write()");
        // Chrome doesn't like it, throwing: Received a binary frame which is not supported yet. So send a String instead
        connection.sendMessage(new String(data, offset, length, "UTF-8"));
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void close() throws IOException {
        logger.trace("WebSocket.close()");
        connection.disconnect();
    } ##FSTMerge## ##FSTMerge## @Override
    public void close() throws IOException {
        logger.trace("WebSocket.close()");
        connection.disconnect();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public final ##FSTMerge## ##FSTMerge## public final
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/GrizzlyWebSocket.java
############## CONFLICT ##############
Conflict type: ExtendsList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ extends WebSocketAdapter ##FSTMerge## ##FSTMerge## extends WebSocketAdapter
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/GrizzlyWebSocket.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private static final Logger logger = LoggerFactory.getLogger(Jetty8WebSocket.class); ##FSTMerge## ##FSTMerge## private static final Logger logger = LoggerFactory.getLogger(Jetty8WebSocket.class);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/GrizzlyWebSocket.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final com.sun.grizzly.websockets.WebSocket webSocket; ##FSTMerge## ##FSTMerge## private final com.sun.grizzly.websockets.WebSocket webSocket;
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/GrizzlyWebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public GrizzlyWebSocket(com.sun.grizzly.websockets.WebSocket webSocket) {
        this.webSocket = webSocket;
    } ##FSTMerge## ##FSTMerge## public GrizzlyWebSocket(com.sun.grizzly.websockets.WebSocket webSocket) {
        this.webSocket = webSocket;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/GrizzlyWebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void writeError(int errorCode, String message) throws IOException {
        logger.debug("{} {}", errorCode, message);
        if (resource() != null) {
        }
    } ##FSTMerge## ##FSTMerge## public void writeError(int errorCode, String message) throws IOException {
        logger.debug("{} {}", errorCode, message);
        if (resource() != null) {
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/GrizzlyWebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void redirect(String location) throws IOException {
        logger.error("redirect not supported");
    } ##FSTMerge## ##FSTMerge## public void redirect(String location) throws IOException {
        logger.error("redirect not supported");
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/GrizzlyWebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void write(String data) throws IOException {
        webSocket.send(data);
    } ##FSTMerge## ##FSTMerge## public void write(String data) throws IOException {
        webSocket.send(data);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/GrizzlyWebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void write(byte[] data) throws IOException {
        webSocket.send(new String(data));
    } ##FSTMerge## ##FSTMerge## public void write(byte[] data) throws IOException {
        webSocket.send(new String(data));
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/GrizzlyWebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void write(byte[] data, int offset, int length) throws IOException {
        webSocket.send(new String(data, offset, length));
    } ##FSTMerge## ##FSTMerge## public void write(byte[] data, int offset, int length) throws IOException {
        webSocket.send(new String(data, offset, length));
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/GrizzlyWebSocket.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void close() throws IOException {
        webSocket.close();
    } ##FSTMerge## ##FSTMerge## public void close() throws IOException {
        webSocket.close();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/container/version/GrizzlyWebSocket.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public ##FSTMerge## ##FSTMerge## public
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/client/JSONPTransportFilter.java
############## CONFLICT ##############
Conflict type: ImplementList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ implements PerRequestBroadcastFilter ##FSTMerge## ##FSTMerge## implements PerRequestBroadcastFilter
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/client/JSONPTransportFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public BroadcastAction filter(HttpServletRequest request, HttpServletResponse response, Object message) {

        String s = request.getParameter(HeaderConfig.JSONP_CALLBACK_NAME);
        if (s != null) {
            String contentType = response.getContentType();
            if (contentType == null) {
                contentType = (String) request.getAttribute(FrameworkConfig.EXPECTED_CONTENT_TYPE);
            }
            if (contentType == null || !contentType.contains("json")) {
                String jsonPMessage = s + "({\"message\" : \"" + message + "\"})";
                return new BroadcastAction(jsonPMessage);
            } else {
                String jsonPMessage = s + "({\"message\" :" + message + "})";
                return new BroadcastAction(jsonPMessage);
            }
        }

        return new BroadcastAction(message);
    } ##FSTMerge## ##FSTMerge## @Override
    public BroadcastAction filter(HttpServletRequest request, HttpServletResponse response, Object message) {

        String s = request.getParameter(HeaderConfig.JSONP_CALLBACK_NAME);
        if (s != null) {
            String contentType = response.getContentType();
            if (contentType == null) {
                contentType = (String) request.getAttribute(FrameworkConfig.EXPECTED_CONTENT_TYPE);
            }
            if (contentType == null || !contentType.contains("json")) {
                String jsonPMessage = s + "({\"message\" : \"" + message + "\"})";
                return new BroadcastAction(jsonPMessage);
            } else {
                String jsonPMessage = s + "({\"message\" :" + message + "})";
                return new BroadcastAction(jsonPMessage);
            }
        }

        return new BroadcastAction(message);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/client/JSONPTransportFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public BroadcastAction filter(Object originalMessage, Object message) {
        return new BroadcastAction(message);
    } ##FSTMerge## ##FSTMerge## @Override
    public BroadcastAction filter(Object originalMessage, Object message) {
        return new BroadcastAction(message);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/modules/cpr/src/main/java/org/atmosphere/client/JSONPTransportFilter.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public ##FSTMerge## ##FSTMerge## public
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/spring/src/main/java/org/atmosphere/spring/SpringInjector.java
############## CONFLICT ##############
Conflict type: ImplementList
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ implements Injector ##FSTMerge## ##FSTMerge## implements Injector
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/spring/src/main/java/org/atmosphere/spring/SpringInjector.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private static final Logger LOGGER = LoggerFactory.getLogger(SpringInjector.class); ##FSTMerge## ##FSTMerge## private static final Logger LOGGER = LoggerFactory.getLogger(SpringInjector.class);
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/spring/src/main/java/org/atmosphere/spring/SpringInjector.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: e7bf4df5baad7970851014ce4782bd3924758a11
Parent1 SHA-1: 2cf682db8df049ee7a5a31b876ca3c5012a61ab1
Parent2 SHA-1: c044f718255f1c86693c483f4b48fc4e3f71a7a3
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void inject(final Object o) {
        LOGGER.trace("inject({})", o);
        SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(o);
    } ##FSTMerge## ##FSTMerge## @Override
    public void inject(final Object o) {
        LOGGER.trace("inject({})", o);
        SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(o);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_2cf68_c044f/rev_2cf68-c044f/extras/spring/src/main/java/org/atmosphere/spring/SpringInjector.java

==================================================================================================================
Revision: /tmp/downloads/atmosphere/revisions/rev_89aa8_d8a67/rev_89aa8-d8a67.revisions
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: efa6254e319561845d722b1879e0beac8804458c
Parent1 SHA-1: 89aa85ae1eeef20af08a328e7be28bfd21f62153
Parent2 SHA-1: d8a678e53aefc7696acb93146d79db0b23f2df97
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Test
    public void testLookup_Class_Object() {
        String id = "id";
        String id2 = "foo";
        assert factory.lookup(DefaultBroadcaster.class, id) != null;
        assert factory.lookup(DefaultBroadcaster.class, id2) == null;
    } ##FSTMerge## @Test
    public void testLookup_Class_Object() {
        String id = "id";
        String id2 = "foo";
        Broadcaster b = factory.get(id);
        assert factory.lookup(DefaultBroadcaster.class, id) != null;
        assert factory.lookup(DefaultBroadcaster.class, id2) == null;
    } ##FSTMerge## @Test
    public void testLookup_Class_Object() {
        String id = "id";
        String id2 = "foo";
        Broadcaster b = factory.get(id);
        assert factory.lookup(DefaultBroadcaster.class, id) != null;
        assert factory.lookup(DefaultBroadcaster.class, id2) == null;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_89aa8_d8a67/rev_89aa8-d8a67/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java

==================================================================================================================
Revision: /tmp/downloads/atmosphere/revisions/rev_a32a5_1e2e2/rev_a32a5-1e2e2.revisions
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 974814c41de542ac3060c9046f4865bfa08caebd
Parent1 SHA-1: a32a5b0c34f0a581c9b60637f23d907097fe06bc
Parent2 SHA-1: 1e2e2fbddb521be2f50ee15304370518b6978985
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
            public void removeAllAtmosphereResource(AtmosphereResource<?, ?> r) {
                _get().removeAllAtmosphereResource(r);
            } ##FSTMerge## ##FSTMerge## @Override
            public void removeAllAtmosphereResource(AtmosphereResource<?, ?> r) {
                _get().removeAllAtmosphereResource(r);
            }
File path: /tmp/downloads/atmosphere/revisions/rev_a32a5_1e2e2/rev_a32a5-1e2e2/modules/jersey/src/main/java/org/atmosphere/jersey/BroadcasterFactoryInjector.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 974814c41de542ac3060c9046f4865bfa08caebd
Parent1 SHA-1: a32a5b0c34f0a581c9b60637f23d907097fe06bc
Parent2 SHA-1: 1e2e2fbddb521be2f50ee15304370518b6978985
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public int doComet(GwtAtmosphereResource resource) throws ServletException, IOException {
        Broadcaster broadcaster = BroadcasterFactory.getDefault().lookup(Broadcaster.class, GWT_BROADCASTER_ID);
        if (broadcaster == null) {
            try {
                broadcaster = BroadcasterFactory.getDefault().get(DefaultBroadcaster.class, GWT_BROADCASTER_ID);
            } catch (IllegalAccessException ex) {
                logger.error("Failed to get broadcaster", ex);
            } catch (InstantiationException ex) {
                logger.error("Failed to get broadcaster", ex);
            }
        }
        resource.getAtmosphereResource().setBroadcaster(broadcaster);
        return NO_TIMEOUT;
    } ##FSTMerge## public int doComet(GwtAtmosphereResource resource) throws ServletException, IOException {
        Broadcaster broadcaster = BroadcasterFactory.getDefault().lookup(Broadcaster.class, GWT_BROADCASTER_ID);
        try {
            broadcaster = BroadcasterFactory.getDefault().get(DefaultBroadcaster.class, GWT_BROADCASTER_ID);
        } catch (IllegalAccessException ex) {
            logger.error("Failed to get broadcaster", ex);
        } catch (InstantiationException ex) {
            logger.error("Failed to get broadcaster", ex);
        }
        resource.getAtmosphereResource().setBroadcaster(broadcaster);
        return NO_TIMEOUT;
    } ##FSTMerge## public int doComet(GwtAtmosphereResource resource) throws ServletException, IOException {
        Broadcaster broadcaster = BroadcasterFactory.getDefault().lookup(Broadcaster.class, GWT_BROADCASTER_ID);
        if (broadcaster == null) {
            try {
                broadcaster = BroadcasterFactory.getDefault().get(DefaultBroadcaster.class, GWT_BROADCASTER_ID);
            } catch (IllegalAccessException ex) {
                logger.error("Failed to get broadcaster", ex);
            } catch (InstantiationException ex) {
                logger.error("Failed to get broadcaster", ex);
            }
        }
        resource.getAtmosphereResource().setBroadcaster(broadcaster);
        return NO_TIMEOUT;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_a32a5_1e2e2/rev_a32a5-1e2e2/modules/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 974814c41de542ac3060c9046f4865bfa08caebd
Parent1 SHA-1: a32a5b0c34f0a581c9b60637f23d907097fe06bc
Parent2 SHA-1: 1e2e2fbddb521be2f50ee15304370518b6978985
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
	public RebindResult generateIncrementally(TreeLogger logger, GeneratorContextExt context, String typeName) throws UnableToCompleteException {
		
		TypeOracle typeOracle = context.getTypeOracle();
		
		// Create the CometSerializer impl
		String packageName = "comet";
		String className = typeName.replace('.', '_') + "Impl";
		PrintWriter printWriter = context.tryCreate(logger, packageName, className);
		
		if (printWriter != null) {
			
			try {
				JClassType type = typeOracle.getType(typeName);
				SerialTypes annotation = type.getAnnotation(SerialTypes.class);
				if (annotation == null) {
					logger.log(TreeLogger.ERROR, "No SerialTypes annotation on CometSerializer type: " + typeName);
					throw new UnableToCompleteException();
				}
				
				SerializableTypeOracleBuilder typesSentToBrowserBuilder = new SerializableTypeOracleBuilder(
                        logger, context.getPropertyOracle(), context);
				SerializableTypeOracleBuilder typesSentFromBrowserBuilder = new SerializableTypeOracleBuilder(
                        logger, context.getPropertyOracle(), context);
				
				for (Class<? extends Serializable> serializable : annotation.value()) {
					int rank = 0;
					if (serializable.isArray()) {
						while(serializable.isArray()) {
							serializable = (Class<? extends Serializable>) serializable.getComponentType();
							rank++;
						}
					}
						
					JType resolvedType = typeOracle.getType(serializable.getCanonicalName());
					while (rank > 0) {
						resolvedType = typeOracle.getArrayType(resolvedType);
						rank--;
					}
					
					typesSentToBrowserBuilder.addRootType(logger, resolvedType);
                    typesSentFromBrowserBuilder.addRootType(logger, resolvedType);
				}
				
				// Create a resource file to receive all of the serialization information
				// computed by STOB and mark it as private so it does not end up in the
				// output.
				OutputStream pathInfo = context.tryCreateResource(logger, typeName + ".rpc.log");
				PrintWriter writer = new PrintWriter(new OutputStreamWriter(pathInfo));
				writer.write("====================================\n");
				writer.write("Types potentially sent from server:\n");
				writer.write("====================================\n\n");
				writer.flush();
				
				typesSentToBrowserBuilder.setLogOutputWriter(writer);
				SerializableTypeOracle typesSentToBrowser = typesSentToBrowserBuilder.build(logger);

				writer.write("===================================\n");
				writer.write("Types potentially sent from browser:\n");
				writer.write("===================================\n\n");
				writer.flush();
				typesSentFromBrowserBuilder.setLogOutputWriter(writer);
			    SerializableTypeOracle typesSentFromBrowser = typesSentFromBrowserBuilder.build(logger);
				
				writer.close();
				
				if (pathInfo != null) {
					context.commitResource(logger, pathInfo).setPrivate(true);
				}
				
				// Create the serializer
                final String modifiedTypeName = typeName.replace('.', '_');
                TypeSerializerCreator tsc = new TypeSerializerCreator(logger, typesSentFromBrowser, typesSentToBrowser, context, "comet." + modifiedTypeName, modifiedTypeName);
				String realize = tsc.realize(logger);
				
				// Create the CometSerializer impl
				ClassSourceFileComposerFactory composerFactory = new ClassSourceFileComposerFactory(packageName, className);
				
				composerFactory.addImport(Serializer.class.getName());
				composerFactory.addImport(SerialMode.class.getName());
				
				composerFactory.setSuperclass(typeName);
				// TODO is the SERIALIZER required for DE RPC?
				SourceWriter sourceWriter = composerFactory.createSourceWriter(context, printWriter);
				sourceWriter.print("private Serializer SERIALIZER = new " + realize + "();");
				sourceWriter.print("protected Serializer getSerializer() {return SERIALIZER;}");
				sourceWriter.print("public SerialMode getMode() {return SerialMode." + annotation.mode().name() + ";}");
                sourceWriter.print("public SerialMode getPushMode() {return SerialMode." + annotation.pushmode().name() + ";}");
				sourceWriter.commit(logger);
				
				if (annotation.mode() == SerialMode.DE_RPC) {
					RpcDataArtifact data = new RpcDataArtifact(type.getQualifiedSourceName());
					for (JType t : typesSentToBrowser.getSerializableTypes()) {
						if (!(t instanceof JClassType)) {
							continue;
						}
						JField[] serializableFields = SerializationUtils.getSerializableFields(context.getTypeOracle(), (JClassType) t);
						
						List<String> names = Lists.create();
						for (int i = 0, j = serializableFields.length; i < j; i++) {
							names = Lists.add(names, serializableFields[i].getName());
						}
						
						data.setFields(SerializationUtils.getRpcTypeName(t), names);
					}
					
					context.commitArtifact(logger, data);
				}
			}
			catch (NotFoundException e) {
				logger.log(TreeLogger.ERROR, "", e);
				throw new UnableToCompleteException();
			}
		}
		
		return new RebindResult(RebindStatus.USE_PARTIAL_CACHED, packageName + '.' + className);
	} ##FSTMerge## @Override
	public RebindResult generateIncrementally(TreeLogger logger, GeneratorContextExt context, String typeName) throws UnableToCompleteException {
		
		TypeOracle typeOracle = context.getTypeOracle();
		
		// Create the CometSerializer impl
		String packageName = "comet";
		String className = typeName.replace('.', '_') + "Impl";
		PrintWriter printWriter = context.tryCreate(logger, packageName, className);
		
		if (printWriter != null) {
			
			try {
				JClassType type = typeOracle.getType(typeName);
				SerialTypes annotation = type.getAnnotation(SerialTypes.class);
				if (annotation == null) {
					logger.log(TreeLogger.ERROR, "No SerialTypes annotation on CometSerializer type: " + typeName);
					throw new UnableToCompleteException();
				}
				
				SerializableTypeOracleBuilder typesSentToBrowserBuilder = new SerializableTypeOracleBuilder(logger, context.getPropertyOracle(), typeOracle);
				SerializableTypeOracleBuilder typesSentFromBrowserBuilder = new SerializableTypeOracleBuilder(logger, context.getPropertyOracle(), typeOracle);
				
				for (Class<? extends Serializable> serializable : annotation.value()) {
					int rank = 0;
					if (serializable.isArray()) {
						while(serializable.isArray()) {
							serializable = (Class<? extends Serializable>) serializable.getComponentType();
							rank++;
						}
					}
						
					JType resolvedType = typeOracle.getType(serializable.getCanonicalName());
					while (rank > 0) {
						resolvedType = typeOracle.getArrayType(resolvedType);
						rank--;
					}
					
					typesSentToBrowserBuilder.addRootType(logger, resolvedType);
                    typesSentFromBrowserBuilder.addRootType(logger, resolvedType);
				}
				
				// Create a resource file to receive all of the serialization information
				// computed by STOB and mark it as private so it does not end up in the
				// output.
				OutputStream pathInfo = context.tryCreateResource(logger, typeName + ".rpc.log");
				PrintWriter writer = new PrintWriter(new OutputStreamWriter(pathInfo));
				writer.write("====================================\n");
				writer.write("Types potentially sent from server:\n");
				writer.write("====================================\n\n");
				writer.flush();
				
				typesSentToBrowserBuilder.setLogOutputWriter(writer);
				SerializableTypeOracle typesSentToBrowser = typesSentToBrowserBuilder.build(logger);

				writer.write("===================================\n");
				writer.write("Types potentially sent from browser:\n");
				writer.write("===================================\n\n");
				writer.flush();
				typesSentFromBrowserBuilder.setLogOutputWriter(writer);
			    SerializableTypeOracle typesSentFromBrowser = typesSentFromBrowserBuilder.build(logger);
				
				writer.close();
				
				if (pathInfo != null) {
					context.commitResource(logger, pathInfo).setPrivate(true);
				}
				
				// Create the serializer
                final String modifiedTypeName = typeName.replace('.', '_');
                TypeSerializerCreator tsc = new TypeSerializerCreator(logger, typesSentFromBrowser, typesSentToBrowser, context, "comet." + modifiedTypeName, modifiedTypeName);
				String realize = tsc.realize(logger);
				
				// Create the CometSerializer impl
				ClassSourceFileComposerFactory composerFactory = new ClassSourceFileComposerFactory(packageName, className);
				
				composerFactory.addImport(Serializer.class.getName());
				composerFactory.addImport(SerialMode.class.getName());
				
				composerFactory.setSuperclass(typeName);
				// TODO is the SERIALIZER required for DE RPC?
				SourceWriter sourceWriter = composerFactory.createSourceWriter(context, printWriter);
				sourceWriter.print("private Serializer SERIALIZER = new " + realize + "();");
				sourceWriter.print("protected Serializer getSerializer() {return SERIALIZER;}");
				sourceWriter.print("public SerialMode getMode() {return SerialMode." + annotation.mode().name() + ";}");
                sourceWriter.print("public SerialMode getPushMode() {return SerialMode." + annotation.pushmode().name() + ";}");
				sourceWriter.commit(logger);
				
				if (annotation.mode() == SerialMode.DE_RPC) {
					RpcDataArtifact data = new RpcDataArtifact(type.getQualifiedSourceName());
					for (JType t : typesSentToBrowser.getSerializableTypes()) {
						if (!(t instanceof JClassType)) {
							continue;
						}
						JField[] serializableFields = SerializationUtils.getSerializableFields(context.getTypeOracle(), (JClassType) t);
						
						List<String> names = Lists.create();
						for (int i = 0, j = serializableFields.length; i < j; i++) {
							names = Lists.add(names, serializableFields[i].getName());
						}
						
						data.setFields(SerializationUtils.getRpcTypeName(t), names);
					}
					
					context.commitArtifact(logger, data);
				}
			}
			catch (NotFoundException e) {
				logger.log(TreeLogger.ERROR, "", e);
				throw new UnableToCompleteException();
			}
		}
		
		return new RebindResult(RebindStatus.USE_PARTIAL_CACHED, packageName + '.' + className);
	} ##FSTMerge## @Override
	public RebindResult generateIncrementally(TreeLogger logger, GeneratorContextExt context, String typeName) throws UnableToCompleteException {
		
		TypeOracle typeOracle = context.getTypeOracle();
		
		// Create the CometSerializer impl
		String packageName = "comet";
		String className = typeName.replace('.', '_') + "Impl";
		PrintWriter printWriter = context.tryCreate(logger, packageName, className);
		
		if (printWriter != null) {
			
			try {
				JClassType type = typeOracle.getType(typeName);
				SerialTypes annotation = type.getAnnotation(SerialTypes.class);
				if (annotation == null) {
					logger.log(TreeLogger.ERROR, "No SerialTypes annotation on CometSerializer type: " + typeName);
					throw new UnableToCompleteException();
				}
				
				SerializableTypeOracleBuilder typesSentToBrowserBuilder = new SerializableTypeOracleBuilder(
                        logger, context.getPropertyOracle(), context);
				SerializableTypeOracleBuilder typesSentFromBrowserBuilder = new SerializableTypeOracleBuilder(
                        logger, context.getPropertyOracle(), context);
				
				for (Class<? extends Serializable> serializable : annotation.value()) {
					int rank = 0;
					if (serializable.isArray()) {
						while(serializable.isArray()) {
							serializable = (Class<? extends Serializable>) serializable.getComponentType();
							rank++;
						}
					}
						
					JType resolvedType = typeOracle.getType(serializable.getCanonicalName());
					while (rank > 0) {
						resolvedType = typeOracle.getArrayType(resolvedType);
						rank--;
					}
					
					typesSentToBrowserBuilder.addRootType(logger, resolvedType);
                    typesSentFromBrowserBuilder.addRootType(logger, resolvedType);
				}
				
				// Create a resource file to receive all of the serialization information
				// computed by STOB and mark it as private so it does not end up in the
				// output.
				OutputStream pathInfo = context.tryCreateResource(logger, typeName + ".rpc.log");
				PrintWriter writer = new PrintWriter(new OutputStreamWriter(pathInfo));
				writer.write("====================================\n");
				writer.write("Types potentially sent from server:\n");
				writer.write("====================================\n\n");
				writer.flush();
				
				typesSentToBrowserBuilder.setLogOutputWriter(writer);
				SerializableTypeOracle typesSentToBrowser = typesSentToBrowserBuilder.build(logger);

				writer.write("===================================\n");
				writer.write("Types potentially sent from browser:\n");
				writer.write("===================================\n\n");
				writer.flush();
				typesSentFromBrowserBuilder.setLogOutputWriter(writer);
			    SerializableTypeOracle typesSentFromBrowser = typesSentFromBrowserBuilder.build(logger);
				
				writer.close();
				
				if (pathInfo != null) {
					context.commitResource(logger, pathInfo).setPrivate(true);
				}
				
				// Create the serializer
                final String modifiedTypeName = typeName.replace('.', '_');
                TypeSerializerCreator tsc = new TypeSerializerCreator(logger, typesSentFromBrowser, typesSentToBrowser, context, "comet." + modifiedTypeName, modifiedTypeName);
				String realize = tsc.realize(logger);
				
				// Create the CometSerializer impl
				ClassSourceFileComposerFactory composerFactory = new ClassSourceFileComposerFactory(packageName, className);
				
				composerFactory.addImport(Serializer.class.getName());
				composerFactory.addImport(SerialMode.class.getName());
				
				composerFactory.setSuperclass(typeName);
				// TODO is the SERIALIZER required for DE RPC?
				SourceWriter sourceWriter = composerFactory.createSourceWriter(context, printWriter);
				sourceWriter.print("private Serializer SERIALIZER = new " + realize + "();");
				sourceWriter.print("protected Serializer getSerializer() {return SERIALIZER;}");
				sourceWriter.print("public SerialMode getMode() {return SerialMode." + annotation.mode().name() + ";}");
                sourceWriter.print("public SerialMode getPushMode() {return SerialMode." + annotation.pushmode().name() + ";}");
				sourceWriter.commit(logger);
				
				if (annotation.mode() == SerialMode.DE_RPC) {
					RpcDataArtifact data = new RpcDataArtifact(type.getQualifiedSourceName());
					for (JType t : typesSentToBrowser.getSerializableTypes()) {
						if (!(t instanceof JClassType)) {
							continue;
						}
						JField[] serializableFields = SerializationUtils.getSerializableFields(context.getTypeOracle(), (JClassType) t);
						
						List<String> names = Lists.create();
						for (int i = 0, j = serializableFields.length; i < j; i++) {
							names = Lists.add(names, serializableFields[i].getName());
						}
						
						data.setFields(SerializationUtils.getRpcTypeName(t), names);
					}
					
					context.commitArtifact(logger, data);
				}
			}
			catch (NotFoundException e) {
				logger.log(TreeLogger.ERROR, "", e);
				throw new UnableToCompleteException();
			}
		}
		
		return new RebindResult(RebindStatus.USE_PARTIAL_CACHED, packageName + '.' + className);
	}
File path: /tmp/downloads/atmosphere/revisions/rev_a32a5_1e2e2/rev_a32a5-1e2e2/modules/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/rebind/SerializerGenerator.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 974814c41de542ac3060c9046f4865bfa08caebd
Parent1 SHA-1: a32a5b0c34f0a581c9b60637f23d907097fe06bc
Parent2 SHA-1: 1e2e2fbddb521be2f50ee15304370518b6978985
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void setBroadcasterLifeCyclePolicy(final BroadcasterLifeCyclePolicy lifeCyclePolicy) {
        this.lifeCyclePolicy = lifeCyclePolicy;
        if (currentLifecycleTask != null) {
            currentLifecycleTask.cancel(false);
        }

        if ( lifeCyclePolicy.getLifeCyclePolicy() == BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE
                || lifeCyclePolicy.getLifeCyclePolicy() == BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE_DESTROY ) {

            int time = lifeCyclePolicy.getTimeout();
            if (time == -1) {
                throw new IllegalStateException("BroadcasterLifeCyclePolicy time is not set");
            }

            final AtomicReference<Future<?>> ref = new AtomicReference<Future<?>>();
            currentLifecycleTask = bc.getScheduledExecutorService().scheduleAtFixedRate(new Runnable(){

                @Override
                public void run() {
                    try {
                        if (resources.isEmpty()) {
                            notifyEmptyListener();
                            notifyIdleListener();

                            if (lifeCyclePolicy.getLifeCyclePolicy() == BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE) {
                                releaseExternalResources();
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE policy");
                            } else {
                                notifyDestroyListener();

                                destroy();
                                /**
                                 * The value may be null if the timeout is too low. Hopefully next execution will
                                 * cancel the task properly.
                                 */
                                if (ref.get() != null) {
                                    currentLifecycleTask.cancel(true);
                                }

                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_DESTROY policy");
                            }
                        }
                    } catch (Throwable t) {
                        logger.warn("Scheduled BroadcasterLifeCyclePolicy exception", t);
                    }
                }

            }, time, time, lifeCyclePolicy.getTimeUnit());
            ref.set(currentLifecycleTask);
        }
    } ##FSTMerge## @Override
    public void setBroadcasterLifeCyclePolicy(final BroadcasterLifeCyclePolicy lifeCyclePolicy) {
        this.lifeCyclePolicy = lifeCyclePolicy;
        if (currentLifecycleTask != null) {
            currentLifecycleTask.cancel(false);
        }

        if ( lifeCyclePolicy.getLifeCyclePolicy() == BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE
                || lifeCyclePolicy.getLifeCyclePolicy() == BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE_DESTROY ) {

            int time = lifeCyclePolicy.getTimeout();
            if (time == -1) {
                throw new IllegalStateException("BroadcasterLifeCyclePolicy time is not set");
            }

            final AtomicReference<Future<?>> ref = new AtomicReference<Future<?>>();
            currentLifecycleTask = bc.getScheduledExecutorService().scheduleAtFixedRate(new Runnable(){

                @Override
                public void run() {
                    try {
                        if (resources.isEmpty()) {
                            if (lifeCyclePolicy.getLifeCyclePolicy() == BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE) {
                                releaseExternalResources();
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE policy");
                            } else {
                                destroy();
                                /**
                                 * The value may be null if the timeout is too low. Hopefully next execution will
                                 * cancel the task properly.
                                 */
                                if (ref.get() != null) {
                                    currentLifecycleTask.cancel(true);
                                }

                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_DESTROY policy");
                            }
                        }
                    } catch (Throwable t) {
                        logger.warn("Scheduled BroadcasterLifeCyclePolicy exception", t);
                    }
                }

            }, time, time, lifeCyclePolicy.getTimeUnit());
            ref.set(currentLifecycleTask);
        }
    } ##FSTMerge## @Override
    public void setBroadcasterLifeCyclePolicy(final BroadcasterLifeCyclePolicy lifeCyclePolicy) {
        this.lifeCyclePolicy = lifeCyclePolicy;
        if (currentLifecycleTask != null) {
            currentLifecycleTask.cancel(false);
        }

        if ( lifeCyclePolicy.getLifeCyclePolicy() == BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE
                || lifeCyclePolicy.getLifeCyclePolicy() == BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE_DESTROY ) {

            int time = lifeCyclePolicy.getTimeout();
            if (time == -1) {
                throw new IllegalStateException("BroadcasterLifeCyclePolicy time is not set");
            }

            final AtomicReference<Future<?>> ref = new AtomicReference<Future<?>>();
            currentLifecycleTask = bc.getScheduledExecutorService().scheduleAtFixedRate(new Runnable(){

                @Override
                public void run() {
                    try {
                        if (resources.isEmpty()) {
                            if (lifeCyclePolicy.getLifeCyclePolicy() == BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE) {
                                releaseExternalResources();
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE policy");
                            } else {
                                destroy();
                                /**
                                 * The value may be null if the timeout is too low. Hopefully next execution will
                                 * cancel the task properly.
                                 */
                                if (ref.get() != null) {
                                    currentLifecycleTask.cancel(true);
                                }

                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_DESTROY policy");
                            }
                        }
                    } catch (Throwable t) {
                        logger.warn("Scheduled BroadcasterLifeCyclePolicy exception", t);
                    }
                }

            }, time, time, lifeCyclePolicy.getTimeUnit());
            ref.set(currentLifecycleTask);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_a32a5_1e2e2/rev_a32a5-1e2e2/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 974814c41de542ac3060c9046f4865bfa08caebd
Parent1 SHA-1: a32a5b0c34f0a581c9b60637f23d907097fe06bc
Parent2 SHA-1: 1e2e2fbddb521be2f50ee15304370518b6978985
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public AtmosphereResource<?, ?> addAtmosphereResource(AtmosphereResource<?, ?> r) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {
            throw new IllegalStateException("Broadcaster " + this
                    + " cannot be used as its scope is set to REQUEST");
        }

        if (maxSuspendResource > 0 && resources.size() == maxSuspendResource) {
            // Resume the first in.
            if (policy == POLICY.FIFO) {
                // TODO handle null return from poll()
                AtmosphereResource<?, ?> resource = resources.poll();
                try {
                    logger.warn("Too many resource. Forcing resume of {} ", resource);
                    resource.resume();
                }
                catch (Throwable t) {
                    logger.warn("failed to resume resource {} ", resource, t);
                }
            } else if (policy == POLICY.REJECT) {
                throw new RejectedExecutionException(String.format("Maximum suspended AtmosphereResources %s", maxSuspendResource));
            }
        }

        if (resources.contains(r)) {
            return r;
        }

        // Re-add yourself
        if (resources.isEmpty()) {
            BroadcasterFactory.getDefault().add(this, name);
        }

        resources.add(r);
        checkCachedAndPush(r, r.getAtmosphereResourceEvent());
        return r;
    } ##FSTMerge## @Override
    public AtmosphereResource<?, ?> addAtmosphereResource(AtmosphereResource<?, ?> r) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {
            throw new IllegalStateException("Broadcaster " + this
                    + " cannot be used as its scope is set to REQUEST");
        }

        if (maxSuspendResource > 0 && resources.size() == maxSuspendResource) {
            // Resume the first in.
            if (policy == POLICY.FIFO) {
                // TODO handle null return from poll()
                AtmosphereResource<?, ?> resource = resources.poll();
                try {
                    resource.resume();
                }
                catch (Throwable t) {
                    logger.warn("failed to resume resource: " + resource, t);
                }
            } else if (policy == POLICY.REJECT) {
                throw new RejectedExecutionException(String.format("Maximum suspended AtmosphereResources %s", maxSuspendResource));
            }
        }

        if (resources.contains(r)) {
            return r;
        }

        // Re-add yourself
        if (resources.isEmpty()) {
            BroadcasterFactory.getDefault().add(this, name);
        }

        resources.add(r);
        checkCachedAndPush(r, r.getAtmosphereResourceEvent());
        return r;
    } ##FSTMerge## @Override
    public AtmosphereResource<?, ?> addAtmosphereResource(AtmosphereResource<?, ?> r) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {
            throw new IllegalStateException("Broadcaster " + this
                    + " cannot be used as its scope is set to REQUEST");
        }

        if (maxSuspendResource > 0 && resources.size() == maxSuspendResource) {
            // Resume the first in.
            if (policy == POLICY.FIFO) {
                // TODO handle null return from poll()
                AtmosphereResource<?, ?> resource = resources.poll();
                try {
                    resource.resume();
                }
                catch (Throwable t) {
                    logger.warn("failed to resume resource: " + resource, t);
                }
            } else if (policy == POLICY.REJECT) {
                throw new RejectedExecutionException(String.format("Maximum suspended AtmosphereResources %s", maxSuspendResource));
            }
        }

        if (resources.contains(r)) {
            return r;
        }

        // Re-add yourself
        if (resources.isEmpty()) {
            BroadcasterFactory.getDefault().add(this, name);
        }

        resources.add(r);
        checkCachedAndPush(r, r.getAtmosphereResourceEvent());
        return r;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_a32a5_1e2e2/rev_a32a5-1e2e2/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 974814c41de542ac3060c9046f4865bfa08caebd
Parent1 SHA-1: a32a5b0c34f0a581c9b60637f23d907097fe06bc
Parent2 SHA-1: 1e2e2fbddb521be2f50ee15304370518b6978985
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public AtmosphereResource<?, ?> removeAtmosphereResource(AtmosphereResource r) {
        if (!resources.contains(r)) {
            return null;
        }
        resources.remove(r);

        // Will help preventing OOM.
        if (resources.isEmpty()) {
            notifyEmptyListener();
            if (lifeCyclePolicy.getLifeCyclePolicy() == BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.EMPTY) {
                releaseExternalResources();
            } else if (lifeCyclePolicy.getLifeCyclePolicy() == BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.EMPTY_DESTROY) {
                notifyDestroyListener();
                BroadcasterFactory.getDefault().remove(this, name);                
                destroy();
            }
        }      
        return r;
    } ##FSTMerge## @Override
    public AtmosphereResource<?, ?> removeAtmosphereResource(AtmosphereResource r) {
        if (!resources.contains(r)) {
            return null;
        }
        resources.remove(r);

        // Will help preventing OOM.
        if (resources.isEmpty()) {
            if (lifeCyclePolicy.getLifeCyclePolicy() == BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.EMPTY) {
                releaseExternalResources();
            } else if (lifeCyclePolicy.getLifeCyclePolicy() == BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.EMPTY_DESTROY) {
                BroadcasterFactory.getDefault().remove(this, name);                
                destroy();
            }
        }      
        return r;
    } ##FSTMerge## @Override
    public AtmosphereResource<?, ?> removeAtmosphereResource(AtmosphereResource r) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        if (!resources.contains(r)) {
            return null;
        }
        resources.remove(r);

        // Will help preventing OOM.
        if (resources.isEmpty()) {
            if (lifeCyclePolicy.getLifeCyclePolicy() == BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.EMPTY) {
                releaseExternalResources();
            } else if (lifeCyclePolicy.getLifeCyclePolicy() == BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.EMPTY_DESTROY) {
                BroadcasterFactory.getDefault().remove(this, name);                
                destroy();
            }
        }      
        return r;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_a32a5_1e2e2/rev_a32a5-1e2e2/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 974814c41de542ac3060c9046f4865bfa08caebd
Parent1 SHA-1: a32a5b0c34f0a581c9b60637f23d907097fe06bc
Parent2 SHA-1: 1e2e2fbddb521be2f50ee15304370518b6978985
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public <T> Future<T> delayBroadcast(final T o, long delay, TimeUnit t) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        start();
        final Object msg = filter(o);
        if (msg == null) return null;

        final BroadcasterFuture<Object> future = new BroadcasterFuture<Object>(msg);
        final Entry e = new Entry(msg, null, future, o);
        Future<T> f;
        if (delay > 0) {
            f = bc.getScheduledExecutorService().schedule(new Callable<T>() {

                public T call() throws Exception {
                    delayedBroadcast.remove(e);
                    if (Callable.class.isAssignableFrom(o.getClass())) {
                        try {
                            Object r = Callable.class.cast(o).call();
                            final Object msg = filter(r);
                            if (msg != null) {
                                Entry entry = new Entry(msg, null, null, r);
                                push(entry);
                            }
                            return (T) msg;
                        } catch (Exception e1) {
                            logger.error("", e);
                        }
                    }
                    
                    final Object msg = filter(o);
                    final Entry e = new Entry(msg, null, null, o);
                    push(e);
                    return (T) msg;
                }
            }, delay, t);

            e.future = new BroadcasterFuture<Object>(f, msg);
        }
        delayedBroadcast.offer(e);
        return future;
    } ##FSTMerge## public <T> Future<T> delayBroadcast(final T o, long delay, TimeUnit t) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        final Object msg = filter(o);
        if (msg == null) return null;

        final BroadcasterFuture<Object> future = new BroadcasterFuture<Object>(msg);
        final Entry e = new Entry(msg, null, future, o);
        Future<T> f;
        if (delay > 0) {
            f = bc.getScheduledExecutorService().schedule(new Callable<T>() {

                public T call() throws Exception {
                    delayedBroadcast.remove(e);
                    if (Callable.class.isAssignableFrom(o.getClass())) {
                        try {
                            Object r = Callable.class.cast(o).call();
                            final Object msg = filter(r);
                            if (msg != null) {
                                Entry entry = new Entry(msg, null, null, r);
                                push(entry);
                            }
                            return (T) msg;
                        } catch (Exception e1) {
                            logger.error("", e);
                        }
                    }
                    
                    final Object msg = filter(o);
                    final Entry e = new Entry(msg, null, null, o);
                    push(e);
                    return (T) msg;
                }
            }, delay, t);

            e.future = new BroadcasterFuture<Object>(f, msg);
        }
        delayedBroadcast.offer(e);
        return future;
    } ##FSTMerge## public <T> Future<T> delayBroadcast(final T o, long delay, TimeUnit t) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        start();
        final Object msg = filter(o);
        if (msg == null) return null;

        final BroadcasterFuture<Object> future = new BroadcasterFuture<Object>(msg);
        final Entry e = new Entry(msg, null, future, o);
        Future<T> f;
        if (delay > 0) {
            f = bc.getScheduledExecutorService().schedule(new Callable<T>() {

                public T call() throws Exception {
                    delayedBroadcast.remove(e);
                    if (Callable.class.isAssignableFrom(o.getClass())) {
                        try {
                            Object r = Callable.class.cast(o).call();
                            final Object msg = filter(r);
                            if (msg != null) {
                                Entry entry = new Entry(msg, null, null, r);
                                push(entry);
                            }
                            return (T) msg;
                        } catch (Exception e1) {
                            logger.error("", e);
                        }
                    }
                    
                    final Object msg = filter(o);
                    final Entry e = new Entry(msg, null, null, o);
                    push(e);
                    return (T) msg;
                }
            }, delay, t);

            e.future = new BroadcasterFuture<Object>(f, msg);
        }
        delayedBroadcast.offer(e);
        return future;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_a32a5_1e2e2/rev_a32a5-1e2e2/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 974814c41de542ac3060c9046f4865bfa08caebd
Parent1 SHA-1: a32a5b0c34f0a581c9b60637f23d907097fe06bc
Parent2 SHA-1: 1e2e2fbddb521be2f50ee15304370518b6978985
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Future<?> scheduleFixedBroadcast(final Object o, long waitFor, long period, TimeUnit t) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        if (period == 0 || t == null) {
            return null;
        }

        start();
        final Object msg = filter(o);
        if (msg == null) return null;

        return bc.getScheduledExecutorService().scheduleWithFixedDelay(new Runnable() {
            public void run() {
                if (Callable.class.isAssignableFrom(o.getClass())) {
                    try {
                        Object r = Callable.class.cast(o).call();
                        final Object msg = filter(r);
                        if (msg != null) {
                            Entry entry = new Entry(msg, null, null, r);
                            push(entry);
                        }
                        return;
                    } catch (Exception e) {
                        logger.error("", e);
                    }
                }
                final Object msg = filter(o);
                final Entry e = new Entry(msg, null, null, o);
                push(e);
            }
        }, waitFor, period, t);
    } ##FSTMerge## public Future<?> scheduleFixedBroadcast(final Object o, long waitFor, long period, TimeUnit t) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        if (period == 0 || t == null) {
            return null;
        }

        final Object msg = filter(o);
        if (msg == null) return null;

        return bc.getScheduledExecutorService().scheduleWithFixedDelay(new Runnable() {
            public void run() {
                if (Callable.class.isAssignableFrom(o.getClass())) {
                    try {
                        Object r = Callable.class.cast(o).call();
                        final Object msg = filter(r);
                        if (msg != null) {
                            Entry entry = new Entry(msg, null, null, r);
                            push(entry);
                        }
                        return;
                    } catch (Exception e) {
                        logger.error("", e);
                    }
                }
                final Object msg = filter(o);
                final Entry e = new Entry(msg, null, null, o);
                push(e);
            }
        }, waitFor, period, t);
    } ##FSTMerge## public Future<?> scheduleFixedBroadcast(final Object o, long waitFor, long period, TimeUnit t) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        start();
        if (period == 0 || t == null) {
            return null;
        }

        final Object msg = filter(o);
        if (msg == null) return null;

        return bc.getScheduledExecutorService().scheduleWithFixedDelay(new Runnable() {
            public void run() {
                if (Callable.class.isAssignableFrom(o.getClass())) {
                    try {
                        Object r = Callable.class.cast(o).call();
                        final Object msg = filter(r);
                        if (msg != null) {
                            Entry entry = new Entry(msg, null, null, r);
                            push(entry);
                        }
                        return;
                    } catch (Exception e) {
                        logger.error("", e);
                    }
                }
                final Object msg = filter(o);
                final Entry e = new Entry(msg, null, null, o);
                push(e);
            }
        }, waitFor, period, t);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_a32a5_1e2e2/rev_a32a5-1e2e2/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: 974814c41de542ac3060c9046f4865bfa08caebd
Parent1 SHA-1: a32a5b0c34f0a581c9b60637f23d907097fe06bc
Parent2 SHA-1: 1e2e2fbddb521be2f50ee15304370518b6978985
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public final static String DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER = "org.atmosphere.cpr.dropAccessControlAllowOriginHeader"; ##FSTMerge## ##FSTMerge## public final static String DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER = "org.atmosphere.cpr.dropAccessControlAllowOriginHeader";
File path: /tmp/downloads/atmosphere/revisions/rev_a32a5_1e2e2/rev_a32a5-1e2e2/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 974814c41de542ac3060c9046f4865bfa08caebd
Parent1 SHA-1: a32a5b0c34f0a581c9b60637f23d907097fe06bc
Parent2 SHA-1: 1e2e2fbddb521be2f50ee15304370518b6978985
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void configureBroadcaster() throws ClassNotFoundException, InstantiationException, IllegalAccessException {

        if (broadcasterFactory == null) {
            Class<? extends Broadcaster> bc =
                    (Class<? extends Broadcaster>) Thread.currentThread().getContextClassLoader()
                            .loadClass(broadcasterClassName);
            logger.info("using broadcaster class: {}", bc.getName());

            broadcasterFactory = new DefaultBroadcasterFactory(bc, broadcasterLifeCyclePolicy);
            config.broadcasterFactory = broadcasterFactory;
            BroadcasterFactory.setBroadcasterFactory(broadcasterFactory, config);
        }

        Iterator<Entry<String, AtmosphereHandlerWrapper>> i = atmosphereHandlers.entrySet().iterator();
        AtmosphereHandlerWrapper w;
        Entry<String, AtmosphereHandlerWrapper> e;
        while (i.hasNext()) {
            e = i.next();
            w = e.getValue();
            BroadcasterConfig broadcasterConfig = new BroadcasterConfig(broadcasterFilters, config);

            if (w.broadcaster == null) {
                w.broadcaster = broadcasterFactory.get();
            } else {
                w.broadcaster.setBroadcasterConfig(broadcasterConfig);
                if (broadcasterCacheClassName != null) {
                    BroadcasterCache cache = (BroadcasterCache) Thread.currentThread().getContextClassLoader()
                            .loadClass(broadcasterCacheClassName).newInstance();
                    InjectorProvider.getInjector().inject(cache);
                    broadcasterConfig.setBroadcasterCache(cache);
                }
            }
            w.broadcaster.setID(e.getKey());
        }
    } ##FSTMerge## protected void configureBroadcaster() throws ClassNotFoundException, InstantiationException, IllegalAccessException {

        if (broadcasterFactory == null) {
            Class<? extends Broadcaster> bc =
                    (Class<? extends Broadcaster>) Thread.currentThread().getContextClassLoader()
                            .loadClass(broadcasterClassName);
            logger.info("using broadcaster class: {}", bc.getName());

            broadcasterFactory = new DefaultBroadcasterFactory(bc, broadcasterLifeCyclePolicy);
            config.broadcasterFactory = broadcasterFactory;
        }

        Iterator<Entry<String, AtmosphereHandlerWrapper>> i = atmosphereHandlers.entrySet().iterator();
        AtmosphereHandlerWrapper w;
        Entry<String, AtmosphereHandlerWrapper> e;
        while (i.hasNext()) {
            e = i.next();
            w = e.getValue();
            BroadcasterConfig broadcasterConfig = new BroadcasterConfig(broadcasterFilters, config);

            if (w.broadcaster == null) {
                w.broadcaster = broadcasterFactory.get();
            } else {
                w.broadcaster.setBroadcasterConfig(broadcasterConfig);
                if (broadcasterCacheClassName != null) {
                    BroadcasterCache cache = (BroadcasterCache) Thread.currentThread().getContextClassLoader()
                            .loadClass(broadcasterCacheClassName).newInstance();
                    InjectorProvider.getInjector().inject(cache);
                    broadcasterConfig.setBroadcasterCache(cache);
                }
            }
            w.broadcaster.setID(e.getKey());
        }
    } ##FSTMerge## protected void configureBroadcaster() throws ClassNotFoundException, InstantiationException, IllegalAccessException {

        if (broadcasterFactory == null) {
            Class<? extends Broadcaster> bc =
                    (Class<? extends Broadcaster>) Thread.currentThread().getContextClassLoader()
                            .loadClass(broadcasterClassName);
            logger.info("using broadcaster class: {}", bc.getName());

            broadcasterFactory = new DefaultBroadcasterFactory(bc, broadcasterLifeCyclePolicy);
            config.broadcasterFactory = broadcasterFactory;
            BroadcasterFactory.setBroadcasterFactory(broadcasterFactory, config);
        }

        Iterator<Entry<String, AtmosphereHandlerWrapper>> i = atmosphereHandlers.entrySet().iterator();
        AtmosphereHandlerWrapper w;
        Entry<String, AtmosphereHandlerWrapper> e;
        while (i.hasNext()) {
            e = i.next();
            w = e.getValue();
            BroadcasterConfig broadcasterConfig = new BroadcasterConfig(broadcasterFilters, config);

            if (w.broadcaster == null) {
                w.broadcaster = broadcasterFactory.get();
            } else {
                w.broadcaster.setBroadcasterConfig(broadcasterConfig);
                if (broadcasterCacheClassName != null) {
                    BroadcasterCache cache = (BroadcasterCache) Thread.currentThread().getContextClassLoader()
                            .loadClass(broadcasterCacheClassName).newInstance();
                    InjectorProvider.getInjector().inject(cache);
                    broadcasterConfig.setBroadcasterCache(cache);
                }
            }
            w.broadcaster.setID(e.getKey());
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_a32a5_1e2e2/rev_a32a5-1e2e2/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
############## CONFLICT ##############
Conflict type: AddSameFd
Merge Commit SHA-1: 974814c41de542ac3060c9046f4865bfa08caebd
Parent1 SHA-1: a32a5b0c34f0a581c9b60637f23d907097fe06bc
Parent2 SHA-1: 1e2e2fbddb521be2f50ee15304370518b6978985
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final boolean enableAccessControl; ##FSTMerge## ##FSTMerge## private final boolean enableAccessControl;
File path: /tmp/downloads/atmosphere/revisions/rev_a32a5_1e2e2/rev_a32a5-1e2e2/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 974814c41de542ac3060c9046f4865bfa08caebd
Parent1 SHA-1: a32a5b0c34f0a581c9b60637f23d907097fe06bc
Parent2 SHA-1: 1e2e2fbddb521be2f50ee15304370518b6978985
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public AtmosphereResourceImpl(AtmosphereConfig config, Broadcaster broadcaster,
                                  HttpServletRequest req, HttpServletResponse response,
                                  CometSupport cometSupport, AtmosphereHandler atmosphereHandler) {
        this.req = req;
        this.response = response;
        this.broadcaster = broadcaster;
        this.config = config;
        this.cometSupport = cometSupport;
        this.atmosphereHandler = atmosphereHandler;
        this.event = new AtmosphereResourceEventImpl(this);

        String nocache = config.getInitParameter(AtmosphereServlet.NO_CACHE_HEADERS);
        injectCacheHeaders = nocache != null ? false : true;

        String ac = config.getInitParameter(AtmosphereServlet.DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);
        enableAccessControl =  ac != null ? false : true;
    } ##FSTMerge## public AtmosphereResourceImpl(AtmosphereConfig config, Broadcaster broadcaster,
                                  HttpServletRequest req, HttpServletResponse response,
                                  CometSupport cometSupport, AtmosphereHandler atmosphereHandler) {
        this.req = req;
        this.response = response;
        this.broadcaster = broadcaster;
        this.config = config;
        this.cometSupport = cometSupport;
        this.atmosphereHandler = atmosphereHandler;
        this.event = new AtmosphereResourceEventImpl(this);

        String nocache = config.getInitParameter(AtmosphereServlet.NO_CACHE_HEADERS);
        injectCacheHeaders = nocache != null ? false : true;
    } ##FSTMerge## public AtmosphereResourceImpl(AtmosphereConfig config, Broadcaster broadcaster,
                                  HttpServletRequest req, HttpServletResponse response,
                                  CometSupport cometSupport, AtmosphereHandler atmosphereHandler) {
        this.req = req;
        this.response = response;
        this.broadcaster = broadcaster;
        this.config = config;
        this.cometSupport = cometSupport;
        this.atmosphereHandler = atmosphereHandler;
        this.event = new AtmosphereResourceEventImpl(this);

        String nocache = config.getInitParameter(AtmosphereServlet.NO_CACHE_HEADERS);
        injectCacheHeaders = nocache != null ? false : true;

        String ac = config.getInitParameter(AtmosphereServlet.DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);
        enableAccessControl =  ac != null ? false : true;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_a32a5_1e2e2/rev_a32a5-1e2e2/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 974814c41de542ac3060c9046f4865bfa08caebd
Parent1 SHA-1: a32a5b0c34f0a581c9b60637f23d907097fe06bc
Parent2 SHA-1: 1e2e2fbddb521be2f50ee15304370518b6978985
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void suspend(long timeout, boolean flushComment) {

        if (req.getSession(false) != null && req.getSession().getMaxInactiveInterval() != -1 && req.getSession().getMaxInactiveInterval() * 1000 < timeout) {
            throw new IllegalStateException("Cannot suspend a " +
                    "response longer than the session timeout. Increase the value of session-timeout in web.xml");
        }

        if (!event.isResumedOnTimeout()) {

            String upgrade = req.getHeader("Connection");
            if (upgrade != null && upgrade.equalsIgnoreCase("Upgrade")) {
                if (!cometSupport.supportWebSocket()) {
                    response.addHeader("X-Atmosphere-error", "Websocket protocol not supported");
                } else {
                    flushComment = false;
                }
            }

            if (injectCacheHeaders) {
                // Set to expire far in the past.
                response.setHeader("Expires", "-1");
                // Set standard HTTP/1.1 no-cache headers.
                response.setHeader("Cache-Control", "no-store, no-cache, must-revalidate");
                // Set standard HTTP/1.0 no-cache header.
                response.setHeader("Pragma", "no-cache");
            }

            if (enableAccessControl) {
                response.setHeader("Access-Control-Allow-Origin", "*");
            }

            if (flushComment) {
                write();
            }
            req.setAttribute(PRE_SUSPEND, "true");
            action.type = AtmosphereServlet.Action.TYPE.SUSPEND;
            action.timeout = timeout;

            // TODO: We can possibly optimize that call by avoiding creating a Broadcaster if we are sure the Broadcaster
            // is unique.
            if (broadcaster.getScope() == Broadcaster.SCOPE.REQUEST) {
                String id = broadcaster.getID();
                Class<? extends Broadcaster> clazz = broadcaster.getClass();
                broadcaster = BroadcasterFactory.getDefault().lookup(clazz, id, false);
                if (broadcaster == null || broadcaster.getAtmosphereResources().size() > 0) {
                    broadcaster = BroadcasterFactory.getDefault().lookup(clazz, id + "/" + UUID.randomUUID(), true);
                }
            }

            broadcaster.addAtmosphereResource(this);
            req.removeAttribute(PRE_SUSPEND);
            notifyListeners();
        }
    } ##FSTMerge## public void suspend(long timeout, boolean flushComment) {

        if (req.getSession(false) != null && req.getSession().getMaxInactiveInterval() != -1 && req.getSession().getMaxInactiveInterval() * 1000 < timeout) {
            throw new IllegalStateException("Cannot suspend a " +
                    "response longer than the session timeout. Increase the value of session-timeout in web.xml");
        }

        if (!event.isResumedOnTimeout()) {

            String upgrade = req.getHeader("Connection");
            if (upgrade != null && upgrade.equalsIgnoreCase("Upgrade")) {
                if (!cometSupport.supportWebSocket()) {
                    response.addHeader("X-Atmosphere-error", "Websocket protocol not supported");
                } else {
                    flushComment = false;
                }
            }

            if (injectCacheHeaders) {
                // Set to expire far in the past.
                response.setHeader("Expires", "-1");
                // Set standard HTTP/1.1 no-cache headers.
                response.setHeader("Cache-Control", "no-store, no-cache, must-revalidate");
                // Set standard HTTP/1.0 no-cache header.
                response.setHeader("Pragma", "no-cache");
            }

            if (flushComment) {
                write();
            }
            req.setAttribute(PRE_SUSPEND, "true");
            action.type = AtmosphereServlet.Action.TYPE.SUSPEND;
            action.timeout = timeout;

            // TODO: We can possibly optimize that call by avoiding creating a Broadcaster if we are sure the Broadcaster
            // is unique.
            if (broadcaster.getScope() == Broadcaster.SCOPE.REQUEST) {
                String id = broadcaster.getID();
                Class<? extends Broadcaster> clazz = broadcaster.getClass();
                broadcaster = BroadcasterFactory.getDefault().lookup(clazz, id, false);
                if (broadcaster == null || broadcaster.getAtmosphereResources().size() > 0) {
                    broadcaster = BroadcasterFactory.getDefault().lookup(clazz, id + "/" + UUID.randomUUID(), true);
                }
            }

            broadcaster.addAtmosphereResource(this);
            req.removeAttribute(PRE_SUSPEND);
            notifyListeners();
        }
    } ##FSTMerge## public void suspend(long timeout, boolean flushComment) {

        if (req.getSession(false) != null && req.getSession().getMaxInactiveInterval() != -1 && req.getSession().getMaxInactiveInterval() * 1000 < timeout) {
            throw new IllegalStateException("Cannot suspend a " +
                    "response longer than the session timeout. Increase the value of session-timeout in web.xml");
        }

        if (!event.isResumedOnTimeout()) {

            String upgrade = req.getHeader("Connection");
            if (upgrade != null && upgrade.equalsIgnoreCase("Upgrade")) {
                if (!cometSupport.supportWebSocket()) {
                    response.addHeader("X-Atmosphere-error", "Websocket protocol not supported");
                } else {
                    flushComment = false;
                }
            }

            if (injectCacheHeaders) {
                // Set to expire far in the past.
                response.setHeader("Expires", "-1");
                // Set standard HTTP/1.1 no-cache headers.
                response.setHeader("Cache-Control", "no-store, no-cache, must-revalidate");
                // Set standard HTTP/1.0 no-cache header.
                response.setHeader("Pragma", "no-cache");
            }

            if (enableAccessControl) {
                response.setHeader("Access-Control-Allow-Origin", "*");
            }

            if (flushComment) {
                write();
            }
            req.setAttribute(PRE_SUSPEND, "true");
            action.type = AtmosphereServlet.Action.TYPE.SUSPEND;
            action.timeout = timeout;

            // TODO: We can possibly optimize that call by avoiding creating a Broadcaster if we are sure the Broadcaster
            // is unique.
            if (broadcaster.getScope() == Broadcaster.SCOPE.REQUEST) {
                String id = broadcaster.getID();
                Class<? extends Broadcaster> clazz = broadcaster.getClass();
                broadcaster = BroadcasterFactory.getDefault().lookup(clazz, id, false);
                if (broadcaster == null || broadcaster.getAtmosphereResources().size() > 0) {
                    broadcaster = BroadcasterFactory.getDefault().lookup(clazz, id + "/" + UUID.randomUUID(), true);
                }
            }

            broadcaster.addAtmosphereResource(this);
            req.removeAttribute(PRE_SUSPEND);
            notifyListeners();
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_a32a5_1e2e2/rev_a32a5-1e2e2/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java

==================================================================================================================
Revision: /tmp/downloads/atmosphere/revisions/rev_82471_02c3a/rev_82471-02c3a.revisions
############## CONFLICT ##############
Conflict type: ExtendsList
Merge Commit SHA-1: 25541caf3bf0fdc77b608b322ba03bbe7e31ce6f
Parent1 SHA-1: 824719c508204fcea3dabffd2e1459e7e68ab836
Parent2 SHA-1: 02c3adcaee26fb6d58a3d9eb888035372a6d72d1
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ extends GeneratorExt ##FSTMerge## extends Generator ##FSTMerge## extends GeneratorExt
File path: /tmp/downloads/atmosphere/revisions/rev_82471_02c3a/rev_82471-02c3a/modules/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/rebind/SerializerGenerator.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 25541caf3bf0fdc77b608b322ba03bbe7e31ce6f
Parent1 SHA-1: 824719c508204fcea3dabffd2e1459e7e68ab836
Parent2 SHA-1: 02c3adcaee26fb6d58a3d9eb888035372a6d72d1
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
	public RebindResult generateIncrementally(TreeLogger logger, GeneratorContextExt context, String typeName) throws UnableToCompleteException {
		
		TypeOracle typeOracle = context.getTypeOracle();
		
		// Create the CometSerializer impl
		String packageName = "comet";
		String className = typeName.replace('.', '_') + "Impl";
		PrintWriter printWriter = context.tryCreate(logger, packageName, className);
		
		if (printWriter != null) {
			
			try {
				JClassType type = typeOracle.getType(typeName);
				SerialTypes annotation = type.getAnnotation(SerialTypes.class);
				if (annotation == null) {
					logger.log(TreeLogger.ERROR, "No SerialTypes annotation on CometSerializer type: " + typeName);
					throw new UnableToCompleteException();
				}
				
				SerializableTypeOracleBuilder typesSentToBrowserBuilder = new SerializableTypeOracleBuilder(logger, context.getPropertyOracle(), typeOracle);
				SerializableTypeOracleBuilder typesSentFromBrowserBuilder = new SerializableTypeOracleBuilder(logger, context.getPropertyOracle(), typeOracle);
				
				for (Class<? extends Serializable> serializable : annotation.value()) {
					int rank = 0;
					if (serializable.isArray()) {
						while(serializable.isArray()) {
							serializable = (Class<? extends Serializable>) serializable.getComponentType();
							rank++;
						}
					}
						
					JType resolvedType = typeOracle.getType(serializable.getCanonicalName());
					while (rank > 0) {
						resolvedType = typeOracle.getArrayType(resolvedType);
						rank--;
					}
					
					typesSentToBrowserBuilder.addRootType(logger, resolvedType);
                    typesSentFromBrowserBuilder.addRootType(logger, resolvedType);
				}
				
				// Create a resource file to receive all of the serialization information
				// computed by STOB and mark it as private so it does not end up in the
				// output.
				OutputStream pathInfo = context.tryCreateResource(logger, typeName + ".rpc.log");
				PrintWriter writer = new PrintWriter(new OutputStreamWriter(pathInfo));
				writer.write("====================================\n");
				writer.write("Types potentially sent from server:\n");
				writer.write("====================================\n\n");
				writer.flush();
				
				typesSentToBrowserBuilder.setLogOutputWriter(writer);
				SerializableTypeOracle typesSentToBrowser = typesSentToBrowserBuilder.build(logger);

				writer.write("===================================\n");
				writer.write("Types potentially sent from browser:\n");
				writer.write("===================================\n\n");
				writer.flush();
				typesSentFromBrowserBuilder.setLogOutputWriter(writer);
			    SerializableTypeOracle typesSentFromBrowser = typesSentFromBrowserBuilder.build(logger);
				
				writer.close();
				
				if (pathInfo != null) {
					context.commitResource(logger, pathInfo).setPrivate(true);
				}
				
				// Create the serializer
                final String modifiedTypeName = typeName.replace('.', '_');
                TypeSerializerCreator tsc = new TypeSerializerCreator(logger, typesSentFromBrowser, typesSentToBrowser, context, "comet." + modifiedTypeName, modifiedTypeName);
				String realize = tsc.realize(logger);
				
				// Create the CometSerializer impl
				ClassSourceFileComposerFactory composerFactory = new ClassSourceFileComposerFactory(packageName, className);
				
				composerFactory.addImport(Serializer.class.getName());
				composerFactory.addImport(SerialMode.class.getName());
				
				composerFactory.setSuperclass(typeName);
				// TODO is the SERIALIZER required for DE RPC?
				SourceWriter sourceWriter = composerFactory.createSourceWriter(context, printWriter);
				sourceWriter.print("private Serializer SERIALIZER = new " + realize + "();");
				sourceWriter.print("protected Serializer getSerializer() {return SERIALIZER;}");
				sourceWriter.print("public SerialMode getMode() {return SerialMode." + annotation.mode().name() + ";}");
                sourceWriter.print("public SerialMode getPushMode() {return SerialMode." + annotation.pushmode().name() + ";}");
				sourceWriter.commit(logger);
				
				if (annotation.mode() == SerialMode.DE_RPC) {
					RpcDataArtifact data = new RpcDataArtifact(type.getQualifiedSourceName());
					for (JType t : typesSentToBrowser.getSerializableTypes()) {
						if (!(t instanceof JClassType)) {
							continue;
						}
						JField[] serializableFields = SerializationUtils.getSerializableFields(context.getTypeOracle(), (JClassType) t);
						
						List<String> names = Lists.create();
						for (int i = 0, j = serializableFields.length; i < j; i++) {
							names = Lists.add(names, serializableFields[i].getName());
						}
						
						data.setFields(SerializationUtils.getRpcTypeName(t), names);
					}
					
					context.commitArtifact(logger, data);
				}
			}
			catch (NotFoundException e) {
				logger.log(TreeLogger.ERROR, "", e);
				throw new UnableToCompleteException();
			}
		}
		
		return new RebindResult(RebindStatus.USE_PARTIAL_CACHED, packageName + '.' + className);
	} ##FSTMerge## ##FSTMerge## @Override
	public RebindResult generateIncrementally(TreeLogger logger, GeneratorContextExt context, String typeName) throws UnableToCompleteException {
		
		TypeOracle typeOracle = context.getTypeOracle();
		
		// Create the CometSerializer impl
		String packageName = "comet";
		String className = typeName.replace('.', '_') + "Impl";
		PrintWriter printWriter = context.tryCreate(logger, packageName, className);
		
		if (printWriter != null) {
			
			try {
				JClassType type = typeOracle.getType(typeName);
				SerialTypes annotation = type.getAnnotation(SerialTypes.class);
				if (annotation == null) {
					logger.log(TreeLogger.ERROR, "No SerialTypes annotation on CometSerializer type: " + typeName);
					throw new UnableToCompleteException();
				}
				
				SerializableTypeOracleBuilder typesSentToBrowserBuilder = new SerializableTypeOracleBuilder(logger, context.getPropertyOracle(), typeOracle);
				SerializableTypeOracleBuilder typesSentFromBrowserBuilder = new SerializableTypeOracleBuilder(logger, context.getPropertyOracle(), typeOracle);
				
				for (Class<? extends Serializable> serializable : annotation.value()) {
					int rank = 0;
					if (serializable.isArray()) {
						while(serializable.isArray()) {
							serializable = (Class<? extends Serializable>) serializable.getComponentType();
							rank++;
						}
					}
						
					JType resolvedType = typeOracle.getType(serializable.getCanonicalName());
					while (rank > 0) {
						resolvedType = typeOracle.getArrayType(resolvedType);
						rank--;
					}
					
					typesSentToBrowserBuilder.addRootType(logger, resolvedType);
                    typesSentFromBrowserBuilder.addRootType(logger, resolvedType);
				}
				
				// Create a resource file to receive all of the serialization information
				// computed by STOB and mark it as private so it does not end up in the
				// output.
				OutputStream pathInfo = context.tryCreateResource(logger, typeName + ".rpc.log");
				PrintWriter writer = new PrintWriter(new OutputStreamWriter(pathInfo));
				writer.write("====================================\n");
				writer.write("Types potentially sent from server:\n");
				writer.write("====================================\n\n");
				writer.flush();
				
				typesSentToBrowserBuilder.setLogOutputWriter(writer);
				SerializableTypeOracle typesSentToBrowser = typesSentToBrowserBuilder.build(logger);

				writer.write("===================================\n");
				writer.write("Types potentially sent from browser:\n");
				writer.write("===================================\n\n");
				writer.flush();
				typesSentFromBrowserBuilder.setLogOutputWriter(writer);
			    SerializableTypeOracle typesSentFromBrowser = typesSentFromBrowserBuilder.build(logger);
				
				writer.close();
				
				if (pathInfo != null) {
					context.commitResource(logger, pathInfo).setPrivate(true);
				}
				
				// Create the serializer
                final String modifiedTypeName = typeName.replace('.', '_');
                TypeSerializerCreator tsc = new TypeSerializerCreator(logger, typesSentFromBrowser, typesSentToBrowser, context, "comet." + modifiedTypeName, modifiedTypeName);
				String realize = tsc.realize(logger);
				
				// Create the CometSerializer impl
				ClassSourceFileComposerFactory composerFactory = new ClassSourceFileComposerFactory(packageName, className);
				
				composerFactory.addImport(Serializer.class.getName());
				composerFactory.addImport(SerialMode.class.getName());
				
				composerFactory.setSuperclass(typeName);
				// TODO is the SERIALIZER required for DE RPC?
				SourceWriter sourceWriter = composerFactory.createSourceWriter(context, printWriter);
				sourceWriter.print("private Serializer SERIALIZER = new " + realize + "();");
				sourceWriter.print("protected Serializer getSerializer() {return SERIALIZER;}");
				sourceWriter.print("public SerialMode getMode() {return SerialMode." + annotation.mode().name() + ";}");
                sourceWriter.print("public SerialMode getPushMode() {return SerialMode." + annotation.pushmode().name() + ";}");
				sourceWriter.commit(logger);
				
				if (annotation.mode() == SerialMode.DE_RPC) {
					RpcDataArtifact data = new RpcDataArtifact(type.getQualifiedSourceName());
					for (JType t : typesSentToBrowser.getSerializableTypes()) {
						if (!(t instanceof JClassType)) {
							continue;
						}
						JField[] serializableFields = SerializationUtils.getSerializableFields(context.getTypeOracle(), (JClassType) t);
						
						List<String> names = Lists.create();
						for (int i = 0, j = serializableFields.length; i < j; i++) {
							names = Lists.add(names, serializableFields[i].getName());
						}
						
						data.setFields(SerializationUtils.getRpcTypeName(t), names);

					}
					
					context.commitArtifact(logger, data);
				}
			}
			catch (NotFoundException e) {
				logger.log(TreeLogger.ERROR, "", e);
				throw new UnableToCompleteException();
			}
		}
		
		return new RebindResult(RebindStatus.USE_PARTIAL_CACHED, packageName + '.' + className);
	}
File path: /tmp/downloads/atmosphere/revisions/rev_82471_02c3a/rev_82471-02c3a/modules/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/rebind/SerializerGenerator.java

==================================================================================================================
Revision: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3.revisions
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public ##FSTMerge## public
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: ImplementList
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## implements Broadcaster ##FSTMerge## implements Broadcaster
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## private static final Logger logger = LoggerFactory.getLogger(DefaultBroadcaster.class); ##FSTMerge## private static final Logger logger = LoggerFactory.getLogger(DefaultBroadcaster.class);
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected final ConcurrentLinkedQueue<AtmosphereResource<?, ?>> resources =
            new ConcurrentLinkedQueue<AtmosphereResource<?, ?>>(); ##FSTMerge## protected final ConcurrentLinkedQueue<AtmosphereResource<?, ?>> resources =
            new ConcurrentLinkedQueue<AtmosphereResource<?, ?>>();
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected BroadcasterConfig bc; ##FSTMerge## protected BroadcasterConfig bc;
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected final BlockingQueue<Entry> messages = new LinkedBlockingQueue<Entry>(); ##FSTMerge## protected final BlockingQueue<Entry> messages = new LinkedBlockingQueue<Entry>();
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected final AtomicBoolean started = new AtomicBoolean(false); ##FSTMerge## protected final AtomicBoolean started = new AtomicBoolean(false);
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected final AtomicBoolean destroyed = new AtomicBoolean(false); ##FSTMerge## protected final AtomicBoolean destroyed = new AtomicBoolean(false);
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected SCOPE scope = SCOPE.APPLICATION; ##FSTMerge## protected SCOPE scope = SCOPE.APPLICATION;
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected String name = DefaultBroadcaster.class.getSimpleName(); ##FSTMerge## protected String name = DefaultBroadcaster.class.getSimpleName();
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected final ConcurrentLinkedQueue<Entry> delayedBroadcast = new ConcurrentLinkedQueue<Entry>(); ##FSTMerge## protected final ConcurrentLinkedQueue<Entry> delayedBroadcast = new ConcurrentLinkedQueue<Entry>();
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected final ConcurrentLinkedQueue<Entry> broadcastOnResume = new ConcurrentLinkedQueue<Entry>(); ##FSTMerge## protected final ConcurrentLinkedQueue<Entry> broadcastOnResume = new ConcurrentLinkedQueue<Entry>();
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected Future<?> notifierFuture; ##FSTMerge## protected Future<?> notifierFuture;
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected BroadcasterCache broadcasterCache; ##FSTMerge## protected BroadcasterCache broadcasterCache;
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## private POLICY policy = POLICY.FIFO; ##FSTMerge## private POLICY policy = POLICY.FIFO;
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## private long maxSuspendResource = -1; ##FSTMerge## private long maxSuspendResource = -1;
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## private final AtomicBoolean requestScoped = new AtomicBoolean(false); ##FSTMerge## private final AtomicBoolean requestScoped = new AtomicBoolean(false);
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public DefaultBroadcaster() {
        this(DefaultBroadcaster.class.getSimpleName());
    } ##FSTMerge## public DefaultBroadcaster() {
        this(DefaultBroadcaster.class.getSimpleName());
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public DefaultBroadcaster(String name) {
        this.name = name;
        broadcasterCache = new DefaultBroadcasterCache();
        bc = new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, null);
        setID(name);
    } ##FSTMerge## public DefaultBroadcaster(String name) {
        this.name = name;
        broadcasterCache = new DefaultBroadcasterCache();
        bc = new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, null);
        setID(name);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public void destroy() {
        if (notifierFuture != null) {
            notifierFuture.cancel(true);
        }

        if (bc != null && scope != SCOPE.REQUEST) {
            bc.destroy();
        }

        if (broadcasterCache != null) {
            broadcasterCache.stop();
        }
        resources.clear();
        broadcastOnResume.clear();
        messages.clear();
        delayedBroadcast.clear();
        broadcasterCache = null;
        started.set(false);
        destroyed.set(true);
        if (BroadcasterFactory.getDefault() != null) {
            BroadcasterFactory.getDefault().remove(this, name);
        }
    } ##FSTMerge## public void destroy() {
        releaseExternalResources();
        if (notifierFuture != null) {
            notifierFuture.cancel(true);
        }

        if (bc != null && scope != SCOPE.REQUEST) {
            bc.destroy();
        }

        if (broadcasterCache != null) {
            broadcasterCache.stop();
        }
        resources.clear();
        broadcastOnResume.clear();
        messages.clear();
        delayedBroadcast.clear();
        broadcasterCache = null;
        started.set(false);
        destroyed.set(true);
        if (BroadcasterFactory.getDefault() != null) {
            BroadcasterFactory.getDefault().remove(this, name);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public Collection<AtmosphereResource<?, ?>> getAtmosphereResources() {
        return Collections.unmodifiableCollection(resources);
    } ##FSTMerge## public Collection<AtmosphereResource<?, ?>> getAtmosphereResources() {
        return Collections.unmodifiableCollection(resources);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public void setScope(SCOPE scope) {
        this.scope = scope;
        if (scope != SCOPE.REQUEST) {
            return;
        }

        try {
            for (AtmosphereResource<?, ?> resource : resources) {
                Broadcaster b = BroadcasterFactory.getDefault()
                        .get(getClass(), getClass().getSimpleName() + "/" + UUID.randomUUID());

                if (DefaultBroadcaster.class.isAssignableFrom(this.getClass())) {
                    BroadcasterCache cache = bc.getBroadcasterCache().getClass().newInstance();
                    InjectorProvider.getInjector().inject(cache);
                    DefaultBroadcaster.class.cast(b).broadcasterCache = cache;
                }
                resource.setBroadcaster(b);
                if (resource.getAtmosphereResourceEvent().isSuspended()) {
                    b.addAtmosphereResource(resource);
                }
            }

            if (!resources.isEmpty()) {
                destroy();
            }
        }
        catch (Exception e) {
            logger.error("failed to set request scope for current resources", e);
        }
    } ##FSTMerge## public void setScope(SCOPE scope) {
        this.scope = scope;
        if (scope != SCOPE.REQUEST) {
            return;
        }

        try {
            for (AtmosphereResource<?, ?> resource : resources) {
                Broadcaster b = BroadcasterFactory.getDefault()
                        .get(getClass(), getClass().getSimpleName() + "/" + UUID.randomUUID());

                if (DefaultBroadcaster.class.isAssignableFrom(this.getClass())) {
                    BroadcasterCache cache = bc.getBroadcasterCache().getClass().newInstance();
                    InjectorProvider.getInjector().inject(cache);
                    DefaultBroadcaster.class.cast(b).broadcasterCache = cache;
                }
                resource.setBroadcaster(b);
                if (resource.getAtmosphereResourceEvent().isSuspended()) {
                    b.addAtmosphereResource(resource);
                }
            }

            if (!resources.isEmpty()) {
                destroy();
            }
        }
        catch (Exception e) {
            logger.error("failed to set request scope for current resources", e);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public SCOPE getScope() {
        return scope;
    } ##FSTMerge## public SCOPE getScope() {
        return scope;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public void setID(String id) {
        Broadcaster b = BroadcasterFactory.getDefault().lookup(this.getClass(), id);
        if (b != null && b.getScope() == SCOPE.REQUEST) {
            throw new IllegalStateException("Broadcaster ID already assigned to SCOPE.REQUEST. Cannot change the id");
        }

        BroadcasterFactory.getDefault().remove(this, name);
        this.name = id;
        BroadcasterFactory.getDefault().add(this, name);
    } ##FSTMerge## public void setID(String id) {
        Broadcaster b = BroadcasterFactory.getDefault().lookup(this.getClass(), id);
        if (b != null && b.getScope() == SCOPE.REQUEST) {
            throw new IllegalStateException("Broadcaster ID already assigned to SCOPE.REQUEST. Cannot change the id");
        }

        BroadcasterFactory.getDefault().remove(this, name);
        this.name = id;
        BroadcasterFactory.getDefault().add(this, name);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public String getID() {
        return name;
    } ##FSTMerge## public String getID() {
        return name;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public void resumeAll() {
        for (AtmosphereResource<?, ?> r : resources) {
            r.resume();
        }
    } ##FSTMerge## public void resumeAll() {
        for (AtmosphereResource<?, ?> r : resources) {
            r.resume();
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## @Override
    public void releaseExternalResources() {
    } ##FSTMerge## @Override
    public void releaseExternalResources() {
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public ##FSTMerge## public
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public Object message; ##FSTMerge## public Object message;
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public Object multipleAtmoResources; ##FSTMerge## public Object multipleAtmoResources;
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public BroadcasterFuture<?> future; ##FSTMerge## public BroadcasterFuture<?> future;
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public boolean writeLocally; ##FSTMerge## public boolean writeLocally;
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public Object originalMessage; ##FSTMerge## public Object originalMessage;
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public Entry(Object message, Object multipleAtmoResources, BroadcasterFuture<?> future, Object originalMessage) {
            this.message = message;
            this.multipleAtmoResources = multipleAtmoResources;
            this.future = future;
            this.writeLocally = true;
            this.originalMessage = originalMessage;
        } ##FSTMerge## public Entry(Object message, Object multipleAtmoResources, BroadcasterFuture<?> future, Object originalMessage) {
            this.message = message;
            this.multipleAtmoResources = multipleAtmoResources;
            this.future = future;
            this.writeLocally = true;
            this.originalMessage = originalMessage;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public Entry(Object message, Object multipleAtmoResources, BroadcasterFuture<?> future, boolean writeLocally) {
            this.message = message;
            this.multipleAtmoResources = multipleAtmoResources;
            this.future = future;
            this.writeLocally = writeLocally;
        } ##FSTMerge## public Entry(Object message, Object multipleAtmoResources, BroadcasterFuture<?> future, boolean writeLocally) {
            this.message = message;
            this.multipleAtmoResources = multipleAtmoResources;
            this.future = future;
            this.writeLocally = writeLocally;
        }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## @Override
        public String toString() {
            return "Entry{" +
                    "message=" + message +
                    ", multipleAtmoResources=" + multipleAtmoResources +
                    ", future=" + future +
                    '}';
        } ##FSTMerge## @Override
        public String toString() {
            return "Entry{" +
                    "message=" + message +
                    ", multipleAtmoResources=" + multipleAtmoResources +
                    ", future=" + future +
                    '}';
        }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected Runnable getBroadcastHandler() {
        return new Runnable() {
            public void run() {
                Entry msg = null;
                try {
                    msg = messages.take();
                    // Leader/follower
                    bc.getExecutorService().submit(this);
                    push(msg);
                }
                catch (Throwable ex) {
                    // Catch all exception to avoid killing this thread.
                    // What if the Throwable is OOME?
                    logger.error("failed to submit broadcast handler runnable to broadcast executor service", ex);
                }
                finally {
                    if (msg != null) {
                        // TODO dubious logic, future is always instance of Broadcaster future
                        if (msg.future instanceof BroadcasterFuture) {
                            msg.future.done();
                        }
                        else {
                            msg.future.cancel(true);
                        }
                    }
                }
            }
        };
    } ##FSTMerge## protected Runnable getBroadcastHandler() {
        return new Runnable() {
            public void run() {
                Entry msg = null;
                try {
                    msg = messages.take();
                    // Leader/follower
                    bc.getExecutorService().submit(this);
                    push(msg);
                }
                catch (Throwable ex) {
                    // Catch all exception to avoid killing this thread.
                    // What if the Throwable is OOME?
                    logger.error("failed to submit broadcast handler runnable to broadcast executor service", ex);
                }
            }
        };
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected void start() {
        if (!started.getAndSet(true)) {

            broadcasterCache = bc.getBroadcasterCache();
            broadcasterCache.start();

            notifierFuture = bc.getExecutorService().submit(getBroadcastHandler());
        }
    } ##FSTMerge## protected void start() {
        if (!started.getAndSet(true)) {

            broadcasterCache = bc.getBroadcasterCache();
            broadcasterCache.start();

            notifierFuture = bc.getExecutorService().submit(getBroadcastHandler());
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected void push(Entry msg) {
        String prevMessage = msg.message.toString();
        if (!delayedBroadcast.isEmpty()) {
            Iterator<Entry> i = delayedBroadcast.iterator();
            StringBuilder b = new StringBuilder();
            while (i.hasNext()) {
                Entry e = i.next();
                // TODO dubious logic, future is always instance of Broadcaster future
                if (!(e.future instanceof BroadcasterFuture)) {
                    e.future.cancel(true);
                }
                try {
                    // Append so we do a single flush
                    if (e.message instanceof String
                            && msg.message instanceof String) {
                        b.append(e.message);
                    } else {
                        push(e);
                    }
                } finally {
                    i.remove();
                    // TODO dubious logic, future is always instance of Broadcaster future
                    if (e.future instanceof BroadcasterFuture) {
                        e.future.done();
                    }
                }
            }
            if (b.length() > 0) {
                msg.message = b.append(msg.message).toString();
            }
        }

        if (resources.isEmpty()) {
            trackBroadcastMessage(null, msg.message);
        }

        Object finalMsg = translate(msg.message);
        msg.message = finalMsg;

        if (msg.multipleAtmoResources == null) {
            for (AtmosphereResource<?, ?> r : resources) {
                finalMsg = perRequestFilter(r, msg);
                if (msg.writeLocally) {
                    push(r, finalMsg);
                }
            }                                                                                                                                                                               
        } else if (msg.multipleAtmoResources instanceof AtmosphereResource<?, ?>) {
            finalMsg = perRequestFilter((AtmosphereResource<?, ?>) msg.multipleAtmoResources, msg);

            if (msg.writeLocally) {
                push((AtmosphereResource<?, ?>) msg.multipleAtmoResources, finalMsg);
            }
        } else if (msg.multipleAtmoResources instanceof Set) {
            Set<AtmosphereResource<?, ?>> sub = (Set<AtmosphereResource<?, ?>>) msg.multipleAtmoResources;
            for (AtmosphereResource<?, ?> r : sub) {
                finalMsg = perRequestFilter(r, msg);
                if (msg.writeLocally) {
                    push(r, finalMsg);
                }
            }
        }
        msg.message = prevMessage;
    } ##FSTMerge## protected void push(Entry entry) {
        String prevMessage = entry.message.toString();
        if (!delayedBroadcast.isEmpty()) {
            Iterator<Entry> i = delayedBroadcast.iterator();
            StringBuilder b = new StringBuilder();
            while (i.hasNext()) {
                Entry e = i.next();
                e.future.cancel(true);
                try {
                    // Append so we do a single flush
                    if (e.message instanceof String
                            && entry.message instanceof String) {
                        b.append(e.message);
                    } else {
                        push(e);
                    }
                } finally {
                    i.remove();
                }
            }

            if (b.length() > 0) {
                entry.message = b.append(entry.message).toString();
            }
        }

        if (resources.isEmpty()) {
            trackBroadcastMessage(null, entry.message);
            entry.future.done();
            return;
        }

        Object finalMsg = translate(entry.message);
        entry.message = finalMsg;

        if (entry.multipleAtmoResources == null) {
            for (AtmosphereResource<?, ?> r : resources) {
                finalMsg = perRequestFilter(r, entry);
                if (entry.writeLocally) {
                    executeAsyncWrite(r, finalMsg, entry.future);
                }
            }                                                                                                                                                                               
        } else if (entry.multipleAtmoResources instanceof AtmosphereResource<?, ?>) {
            finalMsg = perRequestFilter((AtmosphereResource<?, ?>) entry.multipleAtmoResources, entry);

            if (entry.writeLocally) {
                executeAsyncWrite((AtmosphereResource<?, ?>) entry.multipleAtmoResources, finalMsg, entry.future);
            }
        } else if (entry.multipleAtmoResources instanceof Set) {
            Set<AtmosphereResource<?, ?>> sub = (Set<AtmosphereResource<?, ?>>) entry.multipleAtmoResources;
            for (AtmosphereResource<?, ?> r : sub) {
                finalMsg = perRequestFilter(r, entry);
                if (entry.writeLocally) {
                    executeAsyncWrite(r, finalMsg, entry.future);
                }
            }
        }
        entry.message = prevMessage;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected Object perRequestFilter(AtmosphereResource<?, ?> r, Entry msg) {
        Object finalMsg = msg.message;
        if (r.getRequest() instanceof HttpServletRequest && bc.hasPerRequestFilters()) {
            Object message = msg.originalMessage;
            BroadcastAction a  = bc.filter( (HttpServletRequest) r.getRequest(), (HttpServletResponse) r.getResponse(), message);
            if (a.action() == BroadcastAction.ACTION.ABORT || a.message() != null) {
               finalMsg = a.message();   
            }
        }
               
        trackBroadcastMessage(r, finalMsg);
        return finalMsg;
    } ##FSTMerge## protected Object perRequestFilter(AtmosphereResource<?, ?> r, Entry msg) {
        Object finalMsg = msg.message;
        if (r.getRequest() instanceof HttpServletRequest && bc.hasPerRequestFilters()) {
            Object message = msg.originalMessage;
            BroadcastAction a  = bc.filter( (HttpServletRequest) r.getRequest(), (HttpServletResponse) r.getResponse(), message);
            if (a.action() == BroadcastAction.ACTION.ABORT || a.message() != null) {
               finalMsg = a.message();   
            }
        }
               
        trackBroadcastMessage(r, finalMsg);
        return finalMsg;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## private Object translate(Object msg) {
        if (Callable.class.isAssignableFrom(msg.getClass())) {
            try {
                return  Callable.class.cast(msg).call();
            } catch (Exception e) {
                logger.error("failed to cast message: " + msg, e);
            }
        }
        return msg;
    } ##FSTMerge## private Object translate(Object msg) {
        if (Callable.class.isAssignableFrom(msg.getClass())) {
            try {
                return  Callable.class.cast(msg).call();
            } catch (Exception e) {
                logger.error("failed to cast message: " + msg, e);
            }
        }
        return msg;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected void checkCachedAndPush(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
        retrieveTrackedBroadcast(r, e);
        if (e.getMessage() instanceof List && !((List) e.getMessage()).isEmpty()) {
            broadcast(r, e);
        }
    } ##FSTMerge## protected void checkCachedAndPush(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
        retrieveTrackedBroadcast(r, e);
        if (e.getMessage() instanceof List && !((List) e.getMessage()).isEmpty()) {
            broadcast(r, e);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected boolean retrieveTrackedBroadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
        List<?> missedMsg = broadcasterCache.retrieveFromCache(r);
        if (!missedMsg.isEmpty()) {
            e.setMessage(missedMsg);
            return true;
        }
        return false;
    } ##FSTMerge## protected boolean retrieveTrackedBroadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
        List<?> missedMsg = broadcasterCache.retrieveFromCache(r);
        if (!missedMsg.isEmpty()) {
            e.setMessage(missedMsg);
            return true;
        }
        return false;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected void trackBroadcastMessage(final AtmosphereResource<?, ?> r, Object msg) {
        broadcasterCache.addToCache(r, msg);
    } ##FSTMerge## protected void trackBroadcastMessage(final AtmosphereResource<?, ?> r, Object msg) {
        broadcasterCache.addToCache(r, msg);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
        try {
            r.getAtmosphereConfig().getAtmosphereHandler(this).onStateChange(e);
        } catch (IOException ex) {
            if (AtmosphereResourceImpl.class.isAssignableFrom(r.getClass())) {
                AtmosphereResourceImpl.class.cast(r).notifyListeners(e);
            }
            onException(ex, r);
        } catch (RuntimeException ex) {
            if (AtmosphereResourceImpl.class.isAssignableFrom(r.getClass())) {
                AtmosphereResourceImpl.class.cast(r).notifyListeners(e);
            }
            onException(ex, r);
        }
    } ##FSTMerge## protected void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
        try {
            r.getAtmosphereConfig().getAtmosphereHandler(this).onStateChange(e);
        } catch (IOException ex) {
            if (AtmosphereResourceImpl.class.isAssignableFrom(r.getClass())) {
                AtmosphereResourceImpl.class.cast(r).notifyListeners(e);
            }
            onException(ex, r);
        } catch (RuntimeException ex) {
            if (AtmosphereResourceImpl.class.isAssignableFrom(r.getClass())) {
                AtmosphereResourceImpl.class.cast(r).notifyListeners(e);
            }
            onException(ex, r);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected void onException(Throwable t, final AtmosphereResource<?, ?> r) {
        logger.debug("onException()", t);

        if (r instanceof AtmosphereEventLifecycle) {
            ((AtmosphereEventLifecycle) r)
                    .notifyListeners(new AtmosphereResourceEventImpl((AtmosphereResourceImpl) r, true, false, t));
            ((AtmosphereEventLifecycle) r).removeEventListeners();
        }

        /**
         * Make sure we resume the connection on every IOException.
         */
        bc.getAsyncWriteService().execute( new Runnable()
        {
            @Override
            public void run()
            {
                r.resume();
            }
        } );

    } ##FSTMerge## protected void onException(Throwable t, final AtmosphereResource<?, ?> r) {
        logger.debug("onException()", t);

        if (r instanceof AtmosphereEventLifecycle) {
            ((AtmosphereEventLifecycle) r)
                    .notifyListeners(new AtmosphereResourceEventImpl((AtmosphereResourceImpl) r, true, false, t));
            ((AtmosphereEventLifecycle) r).removeEventListeners();
        }

        /**
         * Make sure we resume the connection on every IOException.
         */
        bc.getAsyncWriteService().execute( new Runnable()
        {
            @Override
            public void run()
            {
                r.resume();
            }
        } );

    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## @Override
    public void setSuspendPolicy(long maxSuspendResource, POLICY policy) {
        this.maxSuspendResource = maxSuspendResource;
        this.policy = policy;
    } ##FSTMerge## @Override
    public void setSuspendPolicy(long maxSuspendResource, POLICY policy) {
        this.maxSuspendResource = maxSuspendResource;
        this.policy = policy;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## @Override
    public <T> Future<T> broadcast(T msg) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        start();
        Object newMsg = filter(msg);
        if (newMsg == null) return null;

        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        messages.offer(new Entry(newMsg, null, f, msg));
        return f;
    } ##FSTMerge## @Override
    public <T> Future<T> broadcast(T msg) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        start();
        Object newMsg = filter(msg);
        if (newMsg == null) return null;

        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        messages.offer(new Entry(newMsg, null, f, msg));
        return f;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected Object filter(Object msg) {
        BroadcastAction a = bc.filter(msg);
        if (a.action() == BroadcastAction.ACTION.ABORT || msg == null)
            return null;
        else
            return a.message();
    } ##FSTMerge## protected Object filter(Object msg) {
        BroadcastAction a = bc.filter(msg);
        if (a.action() == BroadcastAction.ACTION.ABORT || msg == null)
            return null;
        else
            return a.message();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## @Override
    public <T> Future<T> broadcast(T msg, AtmosphereResource<?, ?> r) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        start();
        Object newMsg = filter(msg);
        if (newMsg == null) return null;

        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        messages.offer(new Entry(newMsg, r, f, msg));
        return f;
    } ##FSTMerge## @Override
    public <T> Future<T> broadcast(T msg, AtmosphereResource<?, ?> r) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        start();
        Object newMsg = filter(msg);
        if (newMsg == null) return null;

        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        messages.offer(new Entry(newMsg, r, f, msg));
        return f;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## @Override
    public <T> Future<T> broadcastOnResume(T msg) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        start();
        Object newMsg = filter(msg);
        if (newMsg == null) return null;

        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        broadcastOnResume.offer(new Entry(newMsg, null, f, msg));
        return f;
    } ##FSTMerge## @Override
    public <T> Future<T> broadcastOnResume(T msg) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        start();
        Object newMsg = filter(msg);
        if (newMsg == null) return null;

        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        broadcastOnResume.offer(new Entry(newMsg, null, f, msg));
        return f;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected void broadcastOnResume(AtmosphereResource<?,?> r){
        // That's suck.
        Iterator<Entry> i = broadcastOnResume.iterator();
        while (i.hasNext()) {
            Entry e = i.next();
            e.multipleAtmoResources = r;
            push(e);
        } 
        
        if (resources.isEmpty()) {
            broadcastOnResume.clear();
        }
    } ##FSTMerge## protected void broadcastOnResume(AtmosphereResource<?,?> r){
        // That's suck.
        Iterator<Entry> i = broadcastOnResume.iterator();
        while (i.hasNext()) {
            Entry e = i.next();
            e.multipleAtmoResources = r;
            push(e);
        } 
        
        if (resources.isEmpty()) {
            broadcastOnResume.clear();
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## @Override
    public <T> Future<T> broadcast(T msg, Set<AtmosphereResource<?, ?>> subset) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        start();
        Object newMsg = filter(msg);
        if (newMsg == null) return null;

        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        messages.offer(new Entry(newMsg, subset, f, msg));
        return f;
    } ##FSTMerge## @Override
    public <T> Future<T> broadcast(T msg, Set<AtmosphereResource<?, ?>> subset) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        start();
        Object newMsg = filter(msg);
        if (newMsg == null) return null;

        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
        messages.offer(new Entry(newMsg, subset, f, msg));
        return f;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## @Override
    public AtmosphereResource<?, ?> addAtmosphereResource(AtmosphereResource<?, ?> r) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {
            throw new IllegalStateException("Broadcaster " + this
                    + " cannot be used as its scope is set to REQUEST");
        }

        if (maxSuspendResource > 0 && resources.size() == maxSuspendResource) {
            // Resume the first in.
            if (policy == POLICY.FIFO) {
                // TODO handle null return from poll()
                AtmosphereResource<?, ?> resource = resources.poll();
                try {
                    resource.resume();
                }
                catch (Throwable t) {
                    logger.warn("failed to resume resource: " + resource, t);
                }
            } else if (policy == POLICY.REJECT) {
                throw new RejectedExecutionException(String.format("Maximum suspended AtmosphereResources %s", maxSuspendResource));
            }
        }

        if (resources.contains(r)) {
            return r;
        }

        // Re-add yourself
        if (resources.isEmpty()) {
            BroadcasterFactory.getDefault().add(this, name);
        }

        resources.add(r);
        checkCachedAndPush(r, r.getAtmosphereResourceEvent());
        return r;
    } ##FSTMerge## @Override
    public AtmosphereResource<?, ?> addAtmosphereResource(AtmosphereResource<?, ?> r) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {
            throw new IllegalStateException("Broadcaster " + this
                    + " cannot be used as its scope is set to REQUEST");
        }

        if (maxSuspendResource > 0 && resources.size() == maxSuspendResource) {
            // Resume the first in.
            if (policy == POLICY.FIFO) {
                // TODO handle null return from poll()
                AtmosphereResource<?, ?> resource = resources.poll();
                try {
                    resource.resume();
                }
                catch (Throwable t) {
                    logger.warn("failed to resume resource: " + resource, t);
                }
            } else if (policy == POLICY.REJECT) {
                throw new RejectedExecutionException(String.format("Maximum suspended AtmosphereResources %s", maxSuspendResource));
            }
        }

        if (resources.contains(r)) {
            return r;
        }

        // Re-add yourself
        if (resources.isEmpty()) {
            BroadcasterFactory.getDefault().add(this, name);
        }

        resources.add(r);
        checkCachedAndPush(r, r.getAtmosphereResourceEvent());
        return r;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## @Override
    public AtmosphereResource<?, ?> removeAtmosphereResource(AtmosphereResource r) {
        if (!resources.contains(r)) {
            return null;
        }
        resources.remove(r);

        // Will help preventing OOM. Here we do not call destroy() as application may still have reference to
        // this broadcaster.
        if (resources.isEmpty()) {
            BroadcasterFactory.getDefault().remove(this, name);
            this.releaseExternalResources();
        }
        return r;
    } ##FSTMerge## @Override
    public AtmosphereResource<?, ?> removeAtmosphereResource(AtmosphereResource r) {
        if (!resources.contains(r)) {
            return null;
        }
        resources.remove(r);

        // Will help preventing OOM. Here we do not call destroy() as application may still have reference to
        // this broadcaster.
        if (resources.isEmpty()) {
            BroadcasterFactory.getDefault().remove(this, name);
        }
        return r;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## @Override
    public void setBroadcasterConfig(BroadcasterConfig bc) {
        this.bc = bc;
    } ##FSTMerge## @Override
    public void setBroadcasterConfig(BroadcasterConfig bc) {
        this.bc = bc;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public BroadcasterConfig getBroadcasterConfig() {
        return bc;
    } ##FSTMerge## public BroadcasterConfig getBroadcasterConfig() {
        return bc;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public <T> Future<T> delayBroadcast(T o) {
        return delayBroadcast(o, 0, null);
    } ##FSTMerge## public <T> Future<T> delayBroadcast(T o) {
        return delayBroadcast(o, 0, null);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public <T> Future<T> delayBroadcast(final T o, long delay, TimeUnit t) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        final Object msg = filter(o);
        if (msg == null) return null;

        final BroadcasterFuture<Object> future = new BroadcasterFuture<Object>(msg);
        final Entry e = new Entry(msg, null, future, o);
        Future<T> f;
        if (delay > 0) {
            f = bc.getScheduledExecutorService().schedule(new Callable<T>() {

                public T call() throws Exception {
                    delayedBroadcast.remove(e);
                    if (Callable.class.isAssignableFrom(o.getClass())) {
                        try {
                            Object r = Callable.class.cast(o).call();
                            final Object msg = filter(r);
                            if (msg != null) {
                                Entry entry = new Entry(msg, null, null, r);
                                push(entry);
                            }
                            return (T) msg;
                        } catch (Exception e1) {
                            logger.error("", e);
                        }
                    }
                    
                    final Object msg = filter(o);
                    final Entry e = new Entry(msg, null, null, o);
                    push(e);
                    return (T) msg;
                }
            }, delay, t);

            e.future = new BroadcasterFuture<Object>(f, msg);
        }
        delayedBroadcast.offer(e);
        return future;
    } ##FSTMerge## public <T> Future<T> delayBroadcast(final T o, long delay, TimeUnit t) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        final Object msg = filter(o);
        if (msg == null) return null;

        final BroadcasterFuture<Object> future = new BroadcasterFuture<Object>(msg);
        final Entry e = new Entry(msg, null, future, o);
        Future<T> f;
        if (delay > 0) {
            f = bc.getScheduledExecutorService().schedule(new Callable<T>() {

                public T call() throws Exception {
                    delayedBroadcast.remove(e);
                    if (Callable.class.isAssignableFrom(o.getClass())) {
                        try {
                            Object r = Callable.class.cast(o).call();
                            final Object msg = filter(r);
                            if (msg != null) {
                                Entry entry = new Entry(msg, null, null, r);
                                push(entry);
                            }
                            return (T) msg;
                        } catch (Exception e1) {
                            logger.error("", e);
                        }
                    }
                    
                    final Object msg = filter(o);
                    final Entry e = new Entry(msg, null, null, o);
                    push(e);
                    return (T) msg;
                }
            }, delay, t);

            e.future = new BroadcasterFuture<Object>(f, msg);
        }
        delayedBroadcast.offer(e);
        return future;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public Future<?> scheduleFixedBroadcast(final Object o, long period, TimeUnit t) {
        return scheduleFixedBroadcast(o, 0, period, t);
    } ##FSTMerge## public Future<?> scheduleFixedBroadcast(final Object o, long period, TimeUnit t) {
        return scheduleFixedBroadcast(o, 0, period, t);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public Future<?> scheduleFixedBroadcast(final Object o, long waitFor, long period, TimeUnit t) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        if (period == 0 || t == null) {
            return null;
        }

        final Object msg = filter(o);
        if (msg == null) return null;

        return bc.getScheduledExecutorService().scheduleWithFixedDelay(new Runnable() {
            public void run() {
                if (Callable.class.isAssignableFrom(o.getClass())) {
                    try {
                        Object r = Callable.class.cast(o).call();
                        final Object msg = filter(r);
                        if (msg != null) {
                            Entry entry = new Entry(msg, null, null, r);
                            push(entry);
                        }
                        return;
                    } catch (Exception e) {
                        logger.error("", e);
                    }
                }
                final Object msg = filter(o);
                final Entry e = new Entry(msg, null, null, o);
                push(e);
            }
        }, waitFor, period, t);
    } ##FSTMerge## public Future<?> scheduleFixedBroadcast(final Object o, long waitFor, long period, TimeUnit t) {

        if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");

        if (period == 0 || t == null) {
            return null;
        }

        final Object msg = filter(o);
        if (msg == null) return null;

        return bc.getScheduledExecutorService().scheduleWithFixedDelay(new Runnable() {
            public void run() {
                if (Callable.class.isAssignableFrom(o.getClass())) {
                    try {
                        Object r = Callable.class.cast(o).call();
                        final Object msg = filter(r);
                        if (msg != null) {
                            Entry entry = new Entry(msg, null, null, r);
                            push(entry);
                        }
                        return;
                    } catch (Exception e) {
                        logger.error("", e);
                    }
                }
                final Object msg = filter(o);
                final Entry e = new Entry(msg, null, null, o);
                push(e);
            }
        }, waitFor, period, t);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 91c589f8ec3d68559de05c92c9dcbaf4c2cfafe2
Parent1 SHA-1: 6f22fa48d60a6fd3b0a31d19d7a8d359b45ce257
Parent2 SHA-1: e89d3ddf7ca216f4f6e9c69e9795a233fdb890b9
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public String toString() {
        return new StringBuilder(this.getClass().getName()).append("@").append(this.hashCode()).append("\n")
                .append("\tName: ").append(name).append("\n")
                .append("\tScope: ").append(scope).append("\n")
                .append("\tBroasdcasterCache ").append(broadcasterCache).append("\n")
                .append("\tAtmosphereResource: ").append(resources.size()).append("\n")
                .toString();
    } ##FSTMerge## public String toString() {
        return new StringBuilder(this.getClass().getName()).append("@").append(this.hashCode()).append("\n")
                .append("\tName: ").append(name).append("\n")
                .append("\tScope: ").append(scope).append("\n")
                .append("\tBroasdcasterCache ").append(broadcasterCache).append("\n")
                .append("\tAtmosphereResource: ").append(resources.size()).append("\n")
                .toString();
    }
File path: /tmp/downloads/atmosphere/revisions/rev_6f22f_e89d3/rev_6f22f-e89d3/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java

==================================================================================================================
Revision: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c.revisions
############## CONFLICT ##############
Conflict type: ImplementList
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ implements ClusterBroadcastFilter ##FSTMerge## implements MessageListener,ClusterBroadcastFilter ##FSTMerge## implements MessageListener,ClusterBroadcastFilter
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
############## CONFLICT ##############
Conflict type: EditSameFd
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ private final Logger logger = LoggerUtils.getLogger(); ##FSTMerge## private static Logger logger = LoggerUtils.getLogger(); ##FSTMerge## private static final Logger logger = LoggerFactory.getLogger(JMSFilter.class);
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public JMSFilter() {
        this(null);
    } ##FSTMerge## public JMSFilter(){
        this(null);
    } ##FSTMerge## public JMSFilter(){
        this(null);
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public JMSFilter(Broadcaster bc) {
        this(bc, "atmosphere-framework");
    } ##FSTMerge## public JMSFilter(Broadcaster bc) {
        this(bc,"atmosphere-framework");
    } ##FSTMerge## public JMSFilter(Broadcaster bc) {
        this(bc,"atmosphere-framework");
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public JMSFilter(Broadcaster bc, String topicId) {
        this.bc = bc;
        this.topicId = topicId;
    } ##FSTMerge## public JMSFilter(Broadcaster bc, String containerName) {
        this(bc,containerName,"cluster-atmosphere");
    } ##FSTMerge## public JMSFilter(Broadcaster bc, String containerName) {
        this(bc,containerName,"cluster-atmosphere");
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public JMSFilter(Broadcaster bc, String containerName, String clusterName) {

    } ##FSTMerge## public JMSFilter(Broadcaster bc, String containerName, String clusterName) {

    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setUri(String clusterName) {
        this.clusterName = clusterName;
    } ##FSTMerge## public void setUri(String clusterName){
        this.clusterName = clusterName;
    } ##FSTMerge## public void setUri(String clusterName){
        this.clusterName = clusterName;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void init() {
        try {
            AtmosphereServlet.AtmosphereConfig config = bc.getBroadcasterConfig().getAtmosphereConfig();
            if (config != null) {

                // For backward compatibility.
                if (config.getInitParameter(JMS_TOPIC) != null) {
                    topicId = config.getInitParameter(JMS_TOPIC);
                }

                if (config.getInitParameter(JNDI_NAMESPACE) != null) {
                    namespace = config.getInitParameter(JNDI_NAMESPACE);
                }

                if (config.getInitParameter(JNDI_FACTORY_NAME) != null) {
                    factoryName = config.getInitParameter(JNDI_FACTORY_NAME);
                }

                if (config.getInitParameter(JNDI_TOPIC) != null) {
                    topicId = config.getInitParameter(JNDI_TOPIC);
                }
            }

            String id = bc.getID();
            if (id.startsWith("/*")) {
                id = "atmosphere";
            }

            logger.info(String.format("Looking up Connection Factory %s", namespace + factoryName));
            Context ctx = new InitialContext();
            ConnectionFactory connectionFactory = (ConnectionFactory) ctx.lookup(namespace + factoryName);

            logger.info(String.format("Looking up topic: %s", topicId));
            Topic topic = (Topic) ctx.lookup(namespace + topicId);

            connection = connectionFactory.createConnection();
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

            logger.info(String.format("Create customer: %s", id));
            String selector = String.format("BroadcasterId = '%s'", id);

            consumer = session.createConsumer(topic, selector);
            consumer.setMessageListener(new MessageListener() {

                @Override
                public void onMessage(Message msg) {
                    try {
                        TextMessage textMessage = (TextMessage) msg;
                        String message = textMessage.getText();

                        if (message != null && bc != null) {
                            receivedMessages.offer(message);
                            bc.broadcast(message);
                        }
                    } catch (JMSException ex) {
                        if (logger.isLoggable(Level.WARNING)) {
                            logger.log(Level.WARNING, "", ex);
                        }

                    }
                }
            });
            publisher = session.createProducer(topic);
            connection.start();
            logger.info(String.format("JMS created for topic %s, with filter %s", topicId, selector));
        } catch (Throwable ex) {
            throw new IllegalStateException("Unable to initialize JMSBroadcaster", ex);
        }
    } ##FSTMerge## public void init() {
        try{

            Context ctx = new InitialContext();
            ConnectionFactory connectionFactory =
                    (ConnectionFactory)ctx.lookup("jms/atmosphereFactory");

            Topic topic =  (Topic)ctx.lookup("jms/" + clusterName);
            connection = connectionFactory.createConnection();
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            consumer = session.createConsumer(topic,clusterName);
            consumer.setMessageListener(this);
            publisher = session.createProducer(topic);

            connection.start();
        } catch(Throwable ex){
            throw new IllegalStateException("Unable to initialize JMSFilter" ,ex);
        }
    } ##FSTMerge## public void init() {
        try{

            Context ctx = new InitialContext();
            ConnectionFactory connectionFactory =
                    (ConnectionFactory)ctx.lookup("jms/atmosphereFactory");

            Topic topic =  (Topic)ctx.lookup("jms/" + clusterName);
            connection = connectionFactory.createConnection();
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            consumer = session.createConsumer(topic,clusterName);
            consumer.setMessageListener(this);
            publisher = session.createProducer(topic);

            connection.start();
        } catch(Throwable ex){
            throw new IllegalStateException("Unable to initialize JMSFilter" ,ex);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void destroy() {
    } ##FSTMerge## public void destroy(){

    } ##FSTMerge## public void destroy(){

    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public void onMessage(Message msg) {
        try {
            TextMessage textMessage = (TextMessage) msg;
            String message = textMessage.getText();
            receivedMessages.offer(message);

            if (message != null && bc != null){
                bc.broadcast(message);
            }
        } catch (JMSException ex) {
            if (logger.isLoggable(Level.WARNING)){
                logger.log(Level.WARNING,"",ex);
            }

        }
    } ##FSTMerge## @Override
    public void onMessage(Message msg) {
        try {
            TextMessage textMessage = (TextMessage) msg;
            String message = textMessage.getText();
            receivedMessages.offer(message);

            if (message != null && bc != null){
                bc.broadcast(message);
            }
        }
        catch (JMSException ex) {
            logger.warn("failed to broadcast message", ex);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public BroadcastAction filter(Object originalMessage, Object o) {
        if (o instanceof String) {
            String message = (String) o;
            // Avoid re-broadcasting
            if (!receivedMessages.remove(message)) {
                try {
                    String id = bc.getID();
                    if (id.startsWith("/*")) {
                        id = "atmosphere";
                    }

                    TextMessage textMessage = session.createTextMessage(message.toString());
                    textMessage.setStringProperty("BroadcasterId", id);
                    publisher.send(textMessage);
                } catch (JMSException ex) {
                    logger.log(Level.WARNING, "", ex);
                }
            }
            return new BroadcastAction(message);
        } else {
            return new BroadcastAction(o);
        }
    } ##FSTMerge## public BroadcastAction filter(Object originalMessage, Object o) {
        if (o instanceof String){
            String message = (String)o;
            try {
                // Avoid re-broadcasting
                if (!receivedMessages.remove(message)) {
                    publisher.send(session.createTextMessage(message));
                }
            } catch (JMSException ex) {
                logger.log(Level.WARNING, "", ex);
            }
            return new BroadcastAction(message);
        } else {
            return new BroadcastAction(o);
        }
    } ##FSTMerge## @Override
    public BroadcastAction filter(Object originalMessage, Object o) {
        if (o instanceof String){
            String message = (String)o;
            try {
                // Avoid re-broadcasting
                if (!receivedMessages.remove(message)) {
                    publisher.send(session.createTextMessage(message));
                }
            }
            catch (JMSException ex) {
                logger.warn("failed to publish message", ex);
            }
            return new BroadcastAction(message);
        } else {
            return new BroadcastAction(o);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Broadcaster getBroadcaster() {
        return bc;
    } ##FSTMerge## public Broadcaster getBroadcaster(){
        return bc;
    } ##FSTMerge## @Override
    public Broadcaster getBroadcaster(){
        return bc;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public void setBroadcaster(Broadcaster bc) {
        this.bc = bc;
    } ##FSTMerge## public void setBroadcaster(Broadcaster bc){
        this.bc = bc;
    } ##FSTMerge## @Override
    public void setBroadcaster(Broadcaster bc){
        this.bc = bc;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public void incomingBroadcast() {
        try {
            if (bc.getAtmosphereConfig() != null) {

                // For backward compatibility.
                if (bc.getAtmosphereConfig().getInitParameter(JMS_TOPIC) != null) {
                    topicId = bc.getAtmosphereConfig().getInitParameter(JMS_TOPIC);
                }

                if (bc.getAtmosphereConfig().getInitParameter(JNDI_NAMESPACE) != null) {
                    namespace = bc.getAtmosphereConfig().getInitParameter(JNDI_NAMESPACE);
                }

                if (bc.getAtmosphereConfig().getInitParameter(JNDI_FACTORY_NAME) != null) {
                    factoryName = bc.getAtmosphereConfig().getInitParameter(JNDI_FACTORY_NAME);
                }

                if (bc.getAtmosphereConfig().getInitParameter(JNDI_TOPIC) != null) {
                    topicId = bc.getAtmosphereConfig().getInitParameter(JNDI_TOPIC);
                }
            }

            String id = getID();
            if (id.startsWith("/*")) {
                id = "atmosphere";
            }

            logger.info(String.format("Looking up Connection Factory %s", namespace + factoryName));
            Context ctx = new InitialContext();
            ConnectionFactory connectionFactory = (ConnectionFactory) ctx.lookup(namespace + factoryName);

            logger.info(String.format("Looking up topic: %s", topicId));
            Topic topic = (Topic) ctx.lookup(namespace + topicId);

            connection = connectionFactory.createConnection();
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

            logger.info(String.format("Create customer: %s", id));
            String selector = String.format("BroadcasterId = '%s'", id);

            consumer = session.createConsumer(topic, selector);
            consumer.setMessageListener(new MessageListener() {

                @Override
                public void onMessage(Message msg) {
                    try {
                        TextMessage textMessage = (TextMessage) msg;
                        String message = textMessage.getText();

                        if (message != null && bc != null) {
                            broadcastReceivedMessage(message);
                        }
                    } catch (JMSException ex) {
                        if (logger.isLoggable(Level.WARNING)) {
                            logger.log(Level.WARNING, "", ex);
                        }

                    }
                }
            });
            publisher = session.createProducer(topic);
            connection.start();
            logger.info(String.format("JMS created for topic %s, with filter %s", topicId, selector));
        } catch (Throwable ex) {
            throw new IllegalStateException("Unable to initialize JMSBroadcaster", ex);
        }
    } ##FSTMerge## @Override
    public void incomingBroadcast() {
        try {
            if (bc.getAtmosphereConfig() != null) {
                if (bc.getAtmosphereConfig().getInitParameter(JMS_TOPIC) != null) {
                    topicId = bc.getAtmosphereConfig().getInitParameter(JMS_TOPIC);
                }
            }

            String id = getID();
            if (id.startsWith("/*")) {
                id = "atmosphere";
            }

            logger.info("Looking up: jms/atmosphereFactory");
            Context ctx = new InitialContext();
            ConnectionFactory connectionFactory = (ConnectionFactory) ctx.lookup("jms/atmosphereFactory");

            logger.info(String.format("Looking up topic: %s", topicId));
            Topic topic = (Topic) ctx.lookup("jms/" + topicId);
            connection = connectionFactory.createConnection();
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

            logger.info(String.format("Create customer: %s", id));
            String selector = String.format("BroadcasterId = '%s'", id);

            consumer = session.createConsumer(topic, selector);
            consumer.setMessageListener(new MessageListener() {

                @Override
                public void onMessage(Message msg) {
                    try {
                        TextMessage textMessage = (TextMessage) msg;
                        String message = textMessage.getText();

                        if (message != null && bc != null) {
                            broadcastReceivedMessage(message);
                        }
                    } catch (JMSException ex) {
                        if (logger.isLoggable(Level.WARNING)) {
                            logger.log(Level.WARNING, "", ex);
                        }

                    }
                }
            });
            publisher = session.createProducer(topic);
            connection.start();
            logger.info(String.format("JMS created for topic %s, with filter %s", topicId, selector));
        } catch (Throwable ex) {
            throw new IllegalStateException("Unable to initialize JMSBroadcaster", ex);
        }
    } ##FSTMerge## @Override
    public void incomingBroadcast() {
        try {
            if (bc.getAtmosphereConfig() != null) {
                if (bc.getAtmosphereConfig().getInitParameter(JMS_TOPIC) != null) {
                    topicId = bc.getAtmosphereConfig().getInitParameter(JMS_TOPIC);
                }
            }

            String id = getID();
            if (id.startsWith("/*")) {
                id = "atmosphere";
            }

            logger.info("Looking up: jms/atmosphereFactory");
            Context ctx = new InitialContext();
            ConnectionFactory connectionFactory = (ConnectionFactory) ctx.lookup("jms/atmosphereFactory");

            logger.info("Looking up topic: {}", topicId);
            Topic topic = (Topic) ctx.lookup("jms/" + topicId);
            connection = connectionFactory.createConnection();
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

            logger.info("Create customer: {}", id);
            String selector = String.format("BroadcasterId = '%s'", id);

            consumer = session.createConsumer(topic, selector);
            consumer.setMessageListener(new MessageListener() {

                @Override
                public void onMessage(Message msg) {
                    try {
                        TextMessage textMessage = (TextMessage) msg;
                        String message = textMessage.getText();

                        if (message != null && bc != null) {
                            broadcastReceivedMessage(message);
                        }
                    }
                    catch (JMSException ex) {
                        logger.warn("failed to broadcast message", ex);
                    }
                }
            });
            publisher = session.createProducer(topic);
            connection.start();

            logger.info("JMS created for topic {}, with filter {}", topicId, selector);
        }
        catch (Throwable ex) {
            throw new IllegalStateException("Unable to initialize JMSBroadcaster", ex);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ void loadWebApplication(ServletConfig sc) throws MalformedURLException,
            InstantiationException, IllegalAccessException, ClassNotFoundException {
        
        URL url = sc.getServletContext().getResource("/WEB-INF/lib/");
        URLClassLoader urlC = new URLClassLoader(new URL[]{url},
                Thread.currentThread().getContextClassLoader());

        if (getServletClassName() != null && servlet == null) {
            try {
                servlet = (Servlet) urlC.loadClass(getServletClassName()).newInstance();
            } catch (NullPointerException ex) {
                // We failed to load the servlet, let's try directly.
                servlet = (Servlet) Thread.currentThread().getContextClassLoader()
                        .loadClass(servletClassName).newInstance();
            }
        }
        filterChain.setServlet(sc, servlet);

        Filter f;
        for (String fClass : filtersClass) {
            try {
                f = (Filter) urlC.loadClass(fClass).newInstance();
            } catch (NullPointerException ex) {
                // We failed to load the Filter, let's try directly.
                f = (Filter) Thread.currentThread().getContextClassLoader()
                        .loadClass(fClass).newInstance();
            }
            FilterConfigImpl fc = new FilterConfigImpl(sc);
            fc.setFilter(f);

            if (filterName == null) {
               if (sc.getInitParameter(APPLICATION_NAME) != null) {
                   filterName = sc.getInitParameter(APPLICATION_NAME);
               } else {
                   filterName = f.getClass().getSimpleName();
               }
            }

            fc.setFilterName(filterName);
            filterChain.addFilter(fc);
        }

    } ##FSTMerge## void loadWebApplication(ServletConfig sc) throws MalformedURLException,
            InstantiationException, IllegalAccessException, ClassNotFoundException {
        URL url = sc.getServletContext().getResource("/WEB-INF/lib/");
        URLClassLoader urlC = new URLClassLoader(new URL[]{url},
                Thread.currentThread().getContextClassLoader());

        if (getServletClassName() != null && servlet == null) {
            try {
                servlet = (Servlet) urlC.loadClass(getServletClassName()).newInstance();
            } catch (NullPointerException ex) {
                // We failed to load the servlet, let's try directly.
                servlet = (Servlet) Thread.currentThread().getContextClassLoader()
                        .loadClass(servletClassName).newInstance();
            }
        }
        filterChain.setServlet(sc, servlet);

        Filter f;
        for (String filterName : filtersClass) {
            try {
                f = (Filter) urlC.loadClass(filterName).newInstance();
            } catch (NullPointerException ex) {
                // We failed to load the servlet, let's try directly.
                f = (Filter) Thread.currentThread().getContextClassLoader()
                        .loadClass(filterName).newInstance();
            }
            FilterConfigImpl fc = new FilterConfigImpl(sc);
            fc.setFilter(f);
            fc.setFilterName("/*");
            filterChain.addFilter(fc);
        }

    } ##FSTMerge## void loadWebApplication(ServletConfig sc) throws MalformedURLException,
            InstantiationException, IllegalAccessException, ClassNotFoundException {
        URL url = sc.getServletContext().getResource("/WEB-INF/lib/");
        URLClassLoader urlC = new URLClassLoader(new URL[]{url},
                Thread.currentThread().getContextClassLoader());

        if (getServletClassName() != null && servlet == null) {
            try {
                servlet = (Servlet) urlC.loadClass(getServletClassName()).newInstance();
            } catch (NullPointerException ex) {
                // We failed to load the servlet, let's try directly.
                servlet = (Servlet) Thread.currentThread().getContextClassLoader()
                        .loadClass(servletClassName).newInstance();
            }
        }
        filterChain.setServlet(sc, servlet);

        Filter f;
        for (String filterName : filtersClass) {
            try {
                f = (Filter) urlC.loadClass(filterName).newInstance();
            } catch (NullPointerException ex) {
                // We failed to load the servlet, let's try directly.
                f = (Filter) Thread.currentThread().getContextClassLoader()
                        .loadClass(filterName).newInstance();
            }
            FilterConfigImpl fc = new FilterConfigImpl(sc);
            fc.setFilter(f);
            fc.setFilterName("/*");
            filterChain.addFilter(fc);
        }

    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public final Broadcaster get(Class<? extends Broadcaster> c, Object id) throws IllegalAccessException, InstantiationException {

        if (id == null) throw new NullPointerException("id is null");
        if (c == null) throw new NullPointerException("Class is null");

        if (getBroadcaster(id) != null) throw new IllegalStateException("Broadcaster already existing. Use BroadcasterFactory.lookup instead");

        Broadcaster b = c.newInstance();
        InjectorProvider.getInjector().inject(b);
        if (AbstractBroadcasterProxy.class.isAssignableFrom(b.getClass())) {
            AbstractBroadcasterProxy.class.cast(b).configure(config);
        }
        b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config));
        b.setID(id.toString());

        store.put(id, b);
        return b;
    } ##FSTMerge## public final Broadcaster get(Class<? extends Broadcaster> c, Object id) throws IllegalAccessException, InstantiationException {

        if (id == null) throw new NullPointerException("id is null");
        if (c == null) throw new NullPointerException("Class is null");

        Broadcaster b = c.newInstance();
        InjectorProvider.getInjector().inject(b);
        if (AbstractBroadcasterProxy.class.isAssignableFrom(b.getClass())) {
            AbstractBroadcasterProxy.class.cast(b).configure(config);
        }
        b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config));
        b.setID(id.toString());

        store.put(id, b);
        return b;
    } ##FSTMerge## public final Broadcaster get(Class<? extends Broadcaster> c, Object id) throws IllegalAccessException, InstantiationException {

        if (id == null) throw new NullPointerException("id is null");
        if (c == null) throw new NullPointerException("Class is null");

        Broadcaster b = c.newInstance();
        InjectorProvider.getInjector().inject(b);
        if (AbstractBroadcasterProxy.class.isAssignableFrom(b.getClass())) {
            AbstractBroadcasterProxy.class.cast(b).configure(config);
        }
        b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config));
        b.setID(id.toString());

        store.put(id, b);
        return b;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ protected void push(final AtmosphereResource<?, ?> r, final Object msg) {

        synchronized (r) {
            if (r.getAtmosphereResourceEvent().isCancelled()) {
                return;
            }

            final AtmosphereResourceEvent e = r.getAtmosphereResourceEvent();
            e.setMessage(msg);

            if (r.getAtmosphereResourceEvent() != null && !r.getAtmosphereResourceEvent().isCancelled()
                    && HttpServletRequest.class.isAssignableFrom(r.getRequest().getClass())) {
                try {
                    HttpServletRequest.class.cast(r.getRequest()).setAttribute(CometSupport.MAX_INACTIVE, (Long) System.currentTimeMillis());
                } catch (Throwable t) {
                    // Shield us from any corrupted Request
                    if (LoggerUtils.getLogger().isLoggable(Level.FINE)) {
                        LoggerUtils.getLogger().log(Level.FINE, "Preventing corruption of a recycled request", e);
                    }
                    resources.remove(r);
                    return;
                }
            }

            bc.getAsyncWriteService().execute(new Runnable(){
                @Override
                public void run() {
                    broadcast(r, e);
                    if (r instanceof AtmosphereEventLifecycle) {
                        ((AtmosphereEventLifecycle) r).notifyListeners();
                    }
                }
            });
        }
    } ##FSTMerge## protected void push(final AtmosphereResource<?, ?> r, final Object msg) {

        synchronized (r) {
            if (r.getAtmosphereResourceEvent().isCancelled()) {
                return;
            }

            final AtmosphereResourceEvent e = r.getAtmosphereResourceEvent();
            e.setMessage(msg);

            if (r.getAtmosphereResourceEvent() != null && !r.getAtmosphereResourceEvent().isCancelled()
                    && HttpServletRequest.class.isAssignableFrom(r.getRequest().getClass())) {
                try {
                    HttpServletRequest.class.cast(r.getRequest()).setAttribute(CometSupport.MAX_INACTIVE, (Long) System.currentTimeMillis());
                } catch (Throwable t) {
                    // Shield us from any corrupted Request
                    if (LoggerUtils.getLogger().isLoggable(Level.FINE)) {
                        LoggerUtils.getLogger().log(Level.FINE, "Preventing corruption of a recycled request", e);
                        resources.remove(r);
                        return;
                    }
                }
            }

            bc.getAsyncWriteService().execute(new Runnable(){
                @Override
                public void run() {
                    broadcast(r, e);
                    if (r instanceof AtmosphereEventLifecycle) {
                        ((AtmosphereEventLifecycle) r).notifyListeners();
                    }
                }
            });
        }
    } ##FSTMerge## protected void push(final AtmosphereResource<?, ?> resource, final Object msg) {

        synchronized (resource) {
            if (resource.getAtmosphereResourceEvent().isCancelled()) {
                return;
            }

            final AtmosphereResourceEvent event = resource.getAtmosphereResourceEvent();
            event.setMessage(msg);

            if (resource.getAtmosphereResourceEvent() != null && !resource.getAtmosphereResourceEvent().isCancelled()
                    && HttpServletRequest.class.isAssignableFrom(resource.getRequest().getClass())) {
                try {
                    HttpServletRequest.class.cast(resource.getRequest())
                            .setAttribute(CometSupport.MAX_INACTIVE, System.currentTimeMillis());
                }
                catch (Exception t) {
                    // Shield us from any corrupted Request
                    logger.warn("Preventing corruption of a recycled request: resource" + resource, event);
                    resources.remove(resource);
                    return;
                }
            }

            bc.getAsyncWriteService().execute(new Runnable(){
                @Override
                public void run() {
                    broadcast(resource, event);
                    if (resource instanceof AtmosphereEventLifecycle) {
                        ((AtmosphereEventLifecycle) resource).notifyListeners();
                    }
                }
            });
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Override
    public AtmosphereResource<?, ?> removeAtmosphereResource(AtmosphereResource r) {
        if (!resources.contains(r)) {
            return null;
        }
        resources.remove(r);

        // Will help preventing OOM. Here we do not call destroy() as application may still have reference to
        // this broadcaster.
        if (resources.isEmpty()) {
            BroadcasterFactory.getDefault().remove(this, name);
            this.releaseExternalResources();
        }
        return r;
    } ##FSTMerge## @Override
    public AtmosphereResource<?, ?> removeAtmosphereResource(AtmosphereResource r) {
        if (!resources.contains(r)) {
            return null;
        }
        resources.remove(r);

        // Will help preventing OOM.
        if (resources.isEmpty()) {
            BroadcasterFactory.getDefault().remove(this, name);
        }
        return r;
    } ##FSTMerge## @Override
    public AtmosphereResource<?, ?> removeAtmosphereResource(AtmosphereResource r) {
        if (!resources.contains(r)) {
            return null;
        }
        resources.remove(r);

        // Will help preventing OOM.
        if (resources.isEmpty()) {
            BroadcasterFactory.getDefault().remove(this, name);
        }
        return r;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        Action action = suspended(req, res);
        if (req.getAttribute(WebSocketSupport.WEBSOCKET_SUSPEND) == null) {
            if (action.type == Action.TYPE.SUSPEND) {
                if (logger.isLoggable(Level.FINE)) {
                    logger.fine("Suspending" + res);
                }
                suspend(action, req, res);
            } else if (action.type == Action.TYPE.RESUME) {
                if (logger.isLoggable(Level.FINE)) {
                    logger.fine("Resuming" + res);
                }

                if (supportSession()) {
                    AsyncContext asyncContext = (AsyncContext)
                            req.getSession().getAttribute("org.atmosphere.container.asyncContext");

                    if (asyncContext != null) {
                        asyncContext.complete();
                    }
                }

                Action nextAction = resumed(req, res);
                if (nextAction.type == Action.TYPE.SUSPEND) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("Suspending after Resuming" + res);
                    }
                    suspend(action, req, res);                    
                }
            }
        } else {
            if (action.type == Action.TYPE.SUSPEND) {
                if (logger.isLoggable(Level.FINE)) {
                    logger.fine("Suspending " + res);
                }
            } else if (action.type == Action.TYPE.RESUME) {
                if (logger.isLoggable(Level.FINE)) {
                    logger.fine("Resume " + res);
                }
                req.setAttribute(WebSocketSupport.WEBSOCKET_RESUME, "true");
            }
        }
        return action;
    } ##FSTMerge## public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        Action action = suspended(req, res);
        if (req.getAttribute(WebSocketSupport.WEBSOCKET_SUSPEND) == null) {
            if (action.type == Action.TYPE.SUSPEND) {
                if (logger.isLoggable(Level.FINE)) {
                    logger.fine("Suspending" + res);
                }
                suspend(action, req, res);
            } else if (action.type == Action.TYPE.RESUME) {
                if (logger.isLoggable(Level.FINE)) {
                    logger.fine("Resuming" + res);
                }

                if (supportSession()) {
                    AsyncContext asyncContext = (AsyncContext)
                            req.getSession().getAttribute("org.atmosphere.container.asyncContext");

                    if (asyncContext != null) {
                        asyncContext.complete();
                    }
                }

                Action nextAction = resumed(req, res);
                if (nextAction.type == Action.TYPE.SUSPEND) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("Suspending after Resuming" + res);
                        suspend(action, req, res);
                    }
                }
            }
        } else {
            if (action.type == Action.TYPE.SUSPEND) {
                if (logger.isLoggable(Level.FINE)) {
                    logger.fine("Suspending " + res);
                }
            } else if (action.type == Action.TYPE.RESUME) {
                if (logger.isLoggable(Level.FINE)) {
                    logger.fine("Resume " + res);
                }
                req.setAttribute(WebSocketSupport.WEBSOCKET_RESUME, "true");
            }
        }
        return action;
    } ##FSTMerge## public Action service(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {

        Action action = suspended(request, response);
        if (request.getAttribute(WebSocketSupport.WEBSOCKET_SUSPEND) == null) {
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", response);
                suspend(action, request, response);
            }
            else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resuming response: {}", response);

                if (supportSession()) {
                    AsyncContext asyncContext =
                            (AsyncContext) request.getSession().getAttribute("org.atmosphere.container.asyncContext");

                    if (asyncContext != null) {
                        asyncContext.complete();
                    }
                }

                Action nextAction = resumed(request, response);
                if (nextAction.type == Action.TYPE.SUSPEND) {
                    logger.debug("Suspending after resuming response: {}", response);
                    suspend(action, request, response);
                }
            }
        }
        else {
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", response);
            }
            else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resume response: {}", response);
                request.setAttribute(WebSocketSupport.WEBSOCKET_RESUME, "true");
            }
        }
        return action;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/modules/cpr/src/main/java/org/atmosphere/container/Servlet30Support.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        Action action = null;
        try {
            action = suspended(req, res);
            if (action.type == Action.TYPE.SUSPEND) {
                if (logger.isLoggable(Level.FINE)) {
                    logger.fine("Suspending" + res);
                }
                suspend(action, req, res);
            } else if (action.type == Action.TYPE.RESUME) {
                if (logger.isLoggable(Level.FINE)) {
                    logger.fine("Resuming" + res);
                }

                int latchId = (req.getAttribute(LATCH) == null ? 0 : (Integer)req.getAttribute(LATCH));
                if (req.getSession(true).getAttribute(LATCH) != null) {
                    latchId = (Integer) req.getSession(true).getAttribute(LATCH);
                }
                CountDownLatch latch = latchs.get(latchId);

                if (latch == null && req.getAttribute(AtmosphereResourceImpl.PRE_SUSPEND) == null) {
                    logger.fine("That response " + res + " wasn't suspended.");
                    return action;
                }

                latch.countDown();
                                                                  
                Action nextAction = resumed(req, res);
                if (nextAction.type == Action.TYPE.SUSPEND) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("Suspending after Resuming" + res);
                    }
                    suspend(action, req, res);                    
                }
            }
        } finally {
            CometEvent event = (CometEvent) req.getAttribute(TomcatCometSupport.COMET_EVENT);
            if (event != null)
                event.close();

            HttpEvent he = (HttpEvent) req.getAttribute(JBossWebCometSupport.HTTP_EVENT);
            if (he != null)
                he.close();
        }
        return action;
    } ##FSTMerge## public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        Action action = null;
        try {
            action = suspended(req, res);
            if (action.type == Action.TYPE.SUSPEND) {
                if (logger.isLoggable(Level.FINE)) {
                    logger.fine("Suspending" + res);
                }
                suspend(action, req, res);
            } else if (action.type == Action.TYPE.RESUME) {
                if (logger.isLoggable(Level.FINE)) {
                    logger.fine("Resuming" + res);
                }

                int latchId = (req.getAttribute(LATCH) == null ? 0 : (Integer)req.getAttribute(LATCH));
                if (req.getSession(true).getAttribute(LATCH) != null) {
                    latchId = (Integer) req.getSession(true).getAttribute(LATCH);
                }
                CountDownLatch latch = latchs.get(latchId);

                if (latch == null && req.getAttribute(AtmosphereResourceImpl.PRE_SUSPEND) == null) {
                    logger.fine("That response " + res + " wasn't suspended.");
                    return action;
                }

                latch.countDown();
                                                                  
                Action nextAction = resumed(req, res);
                if (nextAction.type == Action.TYPE.SUSPEND) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("Suspending after Resuming" + res);
                        suspend(action, req, res);
                    }
                }
            }
        } finally {
            CometEvent event = (CometEvent) req.getAttribute(TomcatCometSupport.COMET_EVENT);
            if (event != null)
                event.close();

            HttpEvent he = (HttpEvent) req.getAttribute(JBossWebCometSupport.HTTP_EVENT);
            if (he != null)
                he.close();
        }
        return action;
    } ##FSTMerge## public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        Action action = null;
        try {
            action = suspended(req, res);
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", res);
                suspend(action, req, res);
            } else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resuming response: {}", res);

                int latchId = (req.getAttribute(LATCH) == null ? 0 : (Integer)req.getAttribute(LATCH));
                if (req.getSession(true).getAttribute(LATCH) != null) {
                    latchId = (Integer) req.getSession(true).getAttribute(LATCH);
                }
                CountDownLatch latch = latchs.get(latchId);

                if (latch == null && req.getAttribute(AtmosphereResourceImpl.PRE_SUSPEND) == null) {
                    logger.debug("response wasn't suspended: {}", res);
                    return action;
                }

                latch.countDown();
                                                                  
                Action nextAction = resumed(req, res);
                if (nextAction.type == Action.TYPE.SUSPEND) {
                    logger.debug("Suspending after resuming response: {}", res);
                    suspend(action, req, res);
                }
            }
        } finally {
            CometEvent event = (CometEvent) req.getAttribute(TomcatCometSupport.COMET_EVENT);
            if (event != null) {
                event.close();
            }

            HttpEvent he = (HttpEvent) req.getAttribute(JBossWebCometSupport.HTTP_EVENT);
            if (he != null) {
                he.close();
            }
        }
        return action;
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/modules/cpr/src/main/java/org/atmosphere/container/BlockingIOCometSupport.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Path("/chat")
@Produces("text/html;charset=ISO-8859-1")
public ##FSTMerge## ##FSTMerge## @Path("/chat")
@Produces("text/html;charset=ISO-8859-1")
public
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/samples/rest-chat/src/main/java/org/atmosphere/commons/jersey/ResourceChat.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Suspend
    @GET
    public String suspend() {
        return "";
    } ##FSTMerge## ##FSTMerge## @Suspend
    @GET
    public String suspend() {
        return "";
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/samples/rest-chat/src/main/java/org/atmosphere/commons/jersey/ResourceChat.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Broadcast({XSSHtmlFilter.class, JsonpFilter.class})
    @Consumes("application/x-www-form-urlencoded")
    @POST
    public String publishMessage(MultivaluedMap<String, String> form) {
        String action = form.getFirst("action");
        String name = form.getFirst("name");

        if ("login".equals(action)) {
            return ("System Message" + "__" + name + " has joined.");
        } else if ("post".equals(action)) {
            return name + "__" + form.getFirst("message");
        } else {
            throw new WebApplicationException(422);
        }
    } ##FSTMerge## ##FSTMerge## @Broadcast({XSSHtmlFilter.class, JsonpFilter.class})
    @Consumes("application/x-www-form-urlencoded")
    @POST
    public String publishMessage(MultivaluedMap<String, String> form) {
        String action = form.getFirst("action");
        String name = form.getFirst("name");

        if ("login".equals(action)) {
            return ("System Message" + "__" + name + " has joined.");
        } else if ("post".equals(action)) {
            return name + "__" + form.getFirst("message");
        } else {
            throw new WebApplicationException(422);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/samples/rest-chat/src/main/java/org/atmosphere/commons/jersey/ResourceChat.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Schedule(period=30)
    @POST
    @Path("/ping")
    public String pingSuspendedClients(){
        return "Atmosphere__ping";
    } ##FSTMerge## ##FSTMerge## @Schedule(period=30)
    @POST
    @Path("/ping")
    public String pingSuspendedClients(){
        return "Atmosphere__ping";
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/samples/rest-chat/src/main/java/org/atmosphere/commons/jersey/ResourceChat.java
############## CONFLICT ##############
Conflict type: ModifierList
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Path("/chat")
@Produces("text/html;charset=ISO-8859-1")
public ##FSTMerge## ##FSTMerge## @Path("/chat")
@Produces("text/html;charset=ISO-8859-1")
public
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/samples/chat-guice/src/main/java/org/atmosphere/commons/jersey/ResourceChat.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Suspend
    @GET
    public String suspend() {
        return "";
    } ##FSTMerge## ##FSTMerge## @Suspend
    @GET
    public String suspend() {
        return "";
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/samples/chat-guice/src/main/java/org/atmosphere/commons/jersey/ResourceChat.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Broadcast({XSSHtmlFilter.class, JsonpFilter.class})
    @Consumes("application/x-www-form-urlencoded")
    @POST
    public String publishMessage(MultivaluedMap<String, String> form) {
        String action = form.getFirst("action");
        String name = form.getFirst("name");

        if ("login".equals(action)) {
            return ("System Message" + "__" + name + " has joined.");
        } else if ("post".equals(action)) {
            return name + "__" + form.getFirst("message");
        } else {
            throw new WebApplicationException(422);
        }
    } ##FSTMerge## ##FSTMerge## @Broadcast({XSSHtmlFilter.class, JsonpFilter.class})
    @Consumes("application/x-www-form-urlencoded")
    @POST
    public String publishMessage(MultivaluedMap<String, String> form) {
        String action = form.getFirst("action");
        String name = form.getFirst("name");

        if ("login".equals(action)) {
            return ("System Message" + "__" + name + " has joined.");
        } else if ("post".equals(action)) {
            return name + "__" + form.getFirst("message");
        } else {
            throw new WebApplicationException(422);
        }
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/samples/chat-guice/src/main/java/org/atmosphere/commons/jersey/ResourceChat.java
############## CONFLICT ##############
Conflict type: EditSameMC
Merge Commit SHA-1: 3fe3c3099ebab0d9290bf9f71b2fe2b197f24e11
Parent1 SHA-1: 00562574841b78ec866a594c55c56015585c1300
Parent2 SHA-1: 0b01c6439eb91b7ca01eb508591a47274535f59d
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
Conflict body: 
~~FSTMerge~~ @Schedule(period=30)
    @POST
    @Path("/ping")
    public String pingSuspendedClients(){
        return "Atmosphere__ping";
    } ##FSTMerge## ##FSTMerge## @Schedule(period=30)
    @POST
    @Path("/ping")
    public String pingSuspendedClients(){
        return "Atmosphere__ping";
    }
File path: /tmp/downloads/atmosphere/revisions/rev_00562_0b01c/rev_00562-0b01c/samples/chat-guice/src/main/java/org/atmosphere/commons/jersey/ResourceChat.java

=========================================================