diff --git a/core/src/main/java/org/elasticsearch/Version.java b/core/src/main/java/org/elasticsearch/Version.java
index e423903..8ce6bec 100644
--- a/core/src/main/java/org/elasticsearch/Version.java
+++ b/core/src/main/java/org/elasticsearch/Version.java
@@ -549,7 +549,7 @@ public class Version {
         }
         String[] parts = version.split("\\.|\\-");
         if (parts.length < 3 || parts.length > 4) {
-            throw new IllegalArgumentException("the version needs to contain major, minor, and revision, and optionally the build: " + version);
+            throw new IllegalArgumentException("the version needs to contain major, minor and revision, and optionally the build: " + version);
         }
 
         try {
diff --git a/core/src/main/java/org/elasticsearch/action/ActionFuture.java b/core/src/main/java/org/elasticsearch/action/ActionFuture.java
index 2d5f678..26a9260 100644
--- a/core/src/main/java/org/elasticsearch/action/ActionFuture.java
+++ b/core/src/main/java/org/elasticsearch/action/ActionFuture.java
@@ -37,6 +37,10 @@ public interface ActionFuture<T> extends Future<T> {
      * Similar to {@link #get()}, just catching the {@link InterruptedException} and throwing
      * an {@link IllegalStateException} instead. Also catches
      * {@link java.util.concurrent.ExecutionException} and throws the actual cause instead.
+     * <p>
+     * Note, the actual cause is unwrapped to the actual failure (for example, unwrapped
+     * from {@link org.elasticsearch.transport.RemoteTransportException}. The root failure is
+     * still accessible using {@link #getRootFailure()}.
      */
     T actionGet();
 
@@ -44,6 +48,10 @@ public interface ActionFuture<T> extends Future<T> {
      * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} and throwing
      * an {@link IllegalStateException} instead. Also catches
      * {@link java.util.concurrent.ExecutionException} and throws the actual cause instead.
+     * <p>
+     * Note, the actual cause is unwrapped to the actual failure (for example, unwrapped
+     * from {@link org.elasticsearch.transport.RemoteTransportException}. The root failure is
+     * still accessible using {@link #getRootFailure()}.
      */
     T actionGet(String timeout);
 
@@ -51,6 +59,10 @@ public interface ActionFuture<T> extends Future<T> {
      * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} and throwing
      * an {@link IllegalStateException} instead. Also catches
      * {@link java.util.concurrent.ExecutionException} and throws the actual cause instead.
+     * <p>
+     * Note, the actual cause is unwrapped to the actual failure (for example, unwrapped
+     * from {@link org.elasticsearch.transport.RemoteTransportException}. The root failure is
+     * still accessible using {@link #getRootFailure()}.
      *
      * @param timeoutMillis Timeout in millis
      */
@@ -60,6 +72,10 @@ public interface ActionFuture<T> extends Future<T> {
      * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} and throwing
      * an {@link IllegalStateException} instead. Also catches
      * {@link java.util.concurrent.ExecutionException} and throws the actual cause instead.
+     * <p>
+     * Note, the actual cause is unwrapped to the actual failure (for example, unwrapped
+     * from {@link org.elasticsearch.transport.RemoteTransportException}. The root failure is
+     * still accessible using {@link #getRootFailure()}.
      */
     T actionGet(long timeout, TimeUnit unit);
 
@@ -67,6 +83,16 @@ public interface ActionFuture<T> extends Future<T> {
      * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} and throwing
      * an {@link IllegalStateException} instead. Also catches
      * {@link java.util.concurrent.ExecutionException} and throws the actual cause instead.
+     * <p>
+     * Note, the actual cause is unwrapped to the actual failure (for example, unwrapped
+     * from {@link org.elasticsearch.transport.RemoteTransportException}. The root failure is
+     * still accessible using {@link #getRootFailure()}.
      */
     T actionGet(TimeValue timeout);
+
+    /**
+     * The root (possibly) wrapped failure.
+     */
+    @Nullable
+    Throwable getRootFailure();
 }
diff --git a/core/src/main/java/org/elasticsearch/action/ActionModule.java b/core/src/main/java/org/elasticsearch/action/ActionModule.java
index f8634b1..5d215fd 100644
--- a/core/src/main/java/org/elasticsearch/action/ActionModule.java
+++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java
@@ -80,6 +80,8 @@ import org.elasticsearch.action.admin.indices.exists.types.TransportTypesExistsA
 import org.elasticsearch.action.admin.indices.exists.types.TypesExistsAction;
 import org.elasticsearch.action.admin.indices.flush.FlushAction;
 import org.elasticsearch.action.admin.indices.flush.TransportFlushAction;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeAction;
+import org.elasticsearch.action.admin.indices.forcemerge.TransportForceMergeAction;
 import org.elasticsearch.action.admin.indices.get.GetIndexAction;
 import org.elasticsearch.action.admin.indices.get.TransportGetIndexAction;
 import org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsAction;
@@ -91,8 +93,6 @@ import org.elasticsearch.action.admin.indices.mapping.put.PutMappingAction;
 import org.elasticsearch.action.admin.indices.mapping.put.TransportPutMappingAction;
 import org.elasticsearch.action.admin.indices.open.OpenIndexAction;
 import org.elasticsearch.action.admin.indices.open.TransportOpenIndexAction;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeAction;
-import org.elasticsearch.action.admin.indices.optimize.TransportOptimizeAction;
 import org.elasticsearch.action.admin.indices.recovery.RecoveryAction;
 import org.elasticsearch.action.admin.indices.recovery.TransportRecoveryAction;
 import org.elasticsearch.action.admin.indices.refresh.RefreshAction;
@@ -295,7 +295,7 @@ public class ActionModule extends AbstractModule {
         registerAction(ValidateQueryAction.INSTANCE, TransportValidateQueryAction.class);
         registerAction(RefreshAction.INSTANCE, TransportRefreshAction.class);
         registerAction(FlushAction.INSTANCE, TransportFlushAction.class);
-        registerAction(OptimizeAction.INSTANCE, TransportOptimizeAction.class);
+        registerAction(ForceMergeAction.INSTANCE, TransportForceMergeAction.class);
         registerAction(UpgradeAction.INSTANCE, TransportUpgradeAction.class);
         registerAction(UpgradeStatusAction.INSTANCE, TransportUpgradeStatusAction.class);
         registerAction(UpgradeSettingsAction.INSTANCE, TransportUpgradeSettingsAction.class);
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/ForceMergeAction.java b/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/ForceMergeAction.java
new file mode 100644
index 0000000..705fc6b
--- /dev/null
+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/ForceMergeAction.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.action.admin.indices.forcemerge;
+
+import org.elasticsearch.action.Action;
+import org.elasticsearch.client.ElasticsearchClient;
+
+/**
+ */
+public class ForceMergeAction extends Action<ForceMergeRequest, ForceMergeResponse, ForceMergeRequestBuilder> {
+
+    public static final ForceMergeAction INSTANCE = new ForceMergeAction();
+    public static final String NAME = "indices:admin/forcemerge";
+
+    private ForceMergeAction() {
+        super(NAME);
+    }
+
+    @Override
+    public ForceMergeResponse newResponse() {
+        return new ForceMergeResponse();
+    }
+
+    @Override
+    public ForceMergeRequestBuilder newRequestBuilder(ElasticsearchClient client) {
+        return new ForceMergeRequestBuilder(client, this);
+    }
+}
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/ForceMergeRequest.java b/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/ForceMergeRequest.java
new file mode 100644
index 0000000..2b8fe5d
--- /dev/null
+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/ForceMergeRequest.java
@@ -0,0 +1,138 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.action.admin.indices.forcemerge;
+
+import org.elasticsearch.action.support.broadcast.BroadcastRequest;
+import org.elasticsearch.common.io.stream.StreamInput;
+import org.elasticsearch.common.io.stream.StreamOutput;
+
+import java.io.IOException;
+
+/**
+ * A request to force merging the segments of one or more indices. In order to
+ * run a merge on all the indices, pass an empty array or <tt>null</tt> for the
+ * indices.
+ * {@link #maxNumSegments(int)} allows to control the number of segments
+ * to force merge down to. Defaults to simply checking if a merge needs
+ * to execute, and if so, executes it
+ *
+ * @see org.elasticsearch.client.Requests#forceMergeRequest(String...)
+ * @see org.elasticsearch.client.IndicesAdminClient#forceMerge(ForceMergeRequest)
+ * @see ForceMergeResponse
+ */
+public class ForceMergeRequest extends BroadcastRequest<ForceMergeRequest> {
+
+    public static final class Defaults {
+        public static final int MAX_NUM_SEGMENTS = -1;
+        public static final boolean ONLY_EXPUNGE_DELETES = false;
+        public static final boolean FLUSH = true;
+    }
+    
+    private int maxNumSegments = Defaults.MAX_NUM_SEGMENTS;
+    private boolean onlyExpungeDeletes = Defaults.ONLY_EXPUNGE_DELETES;
+    private boolean flush = Defaults.FLUSH;
+
+    /**
+     * Constructs a merge request over one or more indices.
+     *
+     * @param indices The indices to merge, no indices passed means all indices will be merged.
+     */
+    public ForceMergeRequest(String... indices) {
+        super(indices);
+    }
+
+    public ForceMergeRequest() {
+
+    }
+
+    /**
+     * Will merge the index down to &lt;= maxNumSegments. By default, will cause the merge
+     * process to merge down to half the configured number of segments.
+     */
+    public int maxNumSegments() {
+        return maxNumSegments;
+    }
+
+    /**
+     * Will merge the index down to &lt;= maxNumSegments. By default, will cause the merge
+     * process to merge down to half the configured number of segments.
+     */
+    public ForceMergeRequest maxNumSegments(int maxNumSegments) {
+        this.maxNumSegments = maxNumSegments;
+        return this;
+    }
+
+    /**
+     * Should the merge only expunge deletes from the index, without full merging.
+     * Defaults to full merging (<tt>false</tt>).
+     */
+    public boolean onlyExpungeDeletes() {
+        return onlyExpungeDeletes;
+    }
+
+    /**
+     * Should the merge only expunge deletes from the index, without full merge.
+     * Defaults to full merging (<tt>false</tt>).
+     */
+    public ForceMergeRequest onlyExpungeDeletes(boolean onlyExpungeDeletes) {
+        this.onlyExpungeDeletes = onlyExpungeDeletes;
+        return this;
+    }
+
+    /**
+     * Should flush be performed after the merge. Defaults to <tt>true</tt>.
+     */
+    public boolean flush() {
+        return flush;
+    }
+
+    /**
+     * Should flush be performed after the merge. Defaults to <tt>true</tt>.
+     */
+    public ForceMergeRequest flush(boolean flush) {
+        this.flush = flush;
+        return this;
+    }
+
+    @Override
+    public void readFrom(StreamInput in) throws IOException {
+        super.readFrom(in);
+        maxNumSegments = in.readInt();
+        onlyExpungeDeletes = in.readBoolean();
+        flush = in.readBoolean();
+    }
+
+    @Override
+    public void writeTo(StreamOutput out) throws IOException {
+        super.writeTo(out);
+        out.writeInt(maxNumSegments);
+        out.writeBoolean(onlyExpungeDeletes);
+        out.writeBoolean(flush);
+    }
+
+    @Override
+    public String toString() {
+        return "ForceMergeRequest{" +
+                "maxNumSegments=" + maxNumSegments +
+                ", onlyExpungeDeletes=" + onlyExpungeDeletes +
+                ", flush=" + flush +
+                '}';
+    }
+}
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/ForceMergeRequestBuilder.java b/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/ForceMergeRequestBuilder.java
new file mode 100644
index 0000000..138db70
--- /dev/null
+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/ForceMergeRequestBuilder.java
@@ -0,0 +1,64 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.action.admin.indices.forcemerge;
+
+import org.elasticsearch.action.support.broadcast.BroadcastOperationRequestBuilder;
+import org.elasticsearch.client.ElasticsearchClient;
+
+/**
+ * A request to force merge one or more indices. In order to force merge all
+ * indices, pass an empty array or <tt>null</tt> for the indices.
+ * {@link #setMaxNumSegments(int)} allows to control the number of segments to force
+ * merge down to. By default, will cause the force merge process to merge down
+ * to half the configured number of segments.
+ */
+public class ForceMergeRequestBuilder extends BroadcastOperationRequestBuilder<ForceMergeRequest, ForceMergeResponse, ForceMergeRequestBuilder> {
+
+    public ForceMergeRequestBuilder(ElasticsearchClient client, ForceMergeAction action) {
+        super(client, action, new ForceMergeRequest());
+    }
+
+    /**
+     * Will force merge the index down to &lt;= maxNumSegments. By default, will
+     * cause the merge process to merge down to half the configured number of
+     * segments.
+     */
+    public ForceMergeRequestBuilder setMaxNumSegments(int maxNumSegments) {
+        request.maxNumSegments(maxNumSegments);
+        return this;
+    }
+
+    /**
+     * Should the merge only expunge deletes from the index, without full merging.
+     * Defaults to full merging (<tt>false</tt>).
+     */
+    public ForceMergeRequestBuilder setOnlyExpungeDeletes(boolean onlyExpungeDeletes) {
+        request.onlyExpungeDeletes(onlyExpungeDeletes);
+        return this;
+    }
+
+    /**
+     * Should flush be performed after the merge. Defaults to <tt>true</tt>.
+     */
+    public ForceMergeRequestBuilder setFlush(boolean flush) {
+        request.flush(flush);
+        return this;
+    }
+}
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/ForceMergeResponse.java b/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/ForceMergeResponse.java
new file mode 100644
index 0000000..5b999c0
--- /dev/null
+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/ForceMergeResponse.java
@@ -0,0 +1,41 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.action.admin.indices.forcemerge;
+
+import org.elasticsearch.action.ShardOperationFailedException;
+import org.elasticsearch.action.support.broadcast.BroadcastResponse;
+import org.elasticsearch.common.io.stream.StreamInput;
+import org.elasticsearch.common.io.stream.StreamOutput;
+
+import java.io.IOException;
+import java.util.List;
+
+/**
+ * A response for force merge action.
+ */
+public class ForceMergeResponse extends BroadcastResponse {
+
+    ForceMergeResponse() {
+    }
+
+    ForceMergeResponse(int totalShards, int successfulShards, int failedShards, List<ShardOperationFailedException> shardFailures) {
+        super(totalShards, successfulShards, failedShards, shardFailures);
+    }
+}
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/TransportForceMergeAction.java b/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/TransportForceMergeAction.java
new file mode 100644
index 0000000..0119b16
--- /dev/null
+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/TransportForceMergeAction.java
@@ -0,0 +1,100 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.action.admin.indices.forcemerge;
+
+import org.elasticsearch.action.ShardOperationFailedException;
+import org.elasticsearch.action.support.ActionFilters;
+import org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;
+import org.elasticsearch.cluster.ClusterService;
+import org.elasticsearch.cluster.ClusterState;
+import org.elasticsearch.cluster.block.ClusterBlockException;
+import org.elasticsearch.cluster.block.ClusterBlockLevel;
+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;
+import org.elasticsearch.cluster.routing.ShardRouting;
+import org.elasticsearch.cluster.routing.ShardsIterator;
+import org.elasticsearch.common.inject.Inject;
+import org.elasticsearch.common.io.stream.StreamInput;
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.index.shard.IndexShard;
+import org.elasticsearch.indices.IndicesService;
+import org.elasticsearch.threadpool.ThreadPool;
+import org.elasticsearch.transport.TransportService;
+
+import java.io.IOException;
+import java.util.List;
+
+/**
+ * ForceMerge index/indices action.
+ */
+public class TransportForceMergeAction extends TransportBroadcastByNodeAction<ForceMergeRequest, ForceMergeResponse, TransportBroadcastByNodeAction.EmptyResult> {
+
+    private final IndicesService indicesService;
+
+    @Inject
+    public TransportForceMergeAction(Settings settings, ThreadPool threadPool, ClusterService clusterService,
+                                   TransportService transportService, IndicesService indicesService,
+                                   ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {
+        super(settings, ForceMergeAction.NAME, threadPool, clusterService, transportService, actionFilters, indexNameExpressionResolver,
+                ForceMergeRequest::new, ThreadPool.Names.FORCE_MERGE);
+        this.indicesService = indicesService;
+    }
+
+    @Override
+    protected EmptyResult readShardResult(StreamInput in) throws IOException {
+        return EmptyResult.readEmptyResultFrom(in);
+    }
+
+    @Override
+    protected ForceMergeResponse newResponse(ForceMergeRequest request, int totalShards, int successfulShards, int failedShards, List<EmptyResult> responses, List<ShardOperationFailedException> shardFailures, ClusterState clusterState) {
+        return new ForceMergeResponse(totalShards, successfulShards, failedShards, shardFailures);
+    }
+
+    @Override
+    protected ForceMergeRequest readRequestFrom(StreamInput in) throws IOException {
+        final ForceMergeRequest request = new ForceMergeRequest();
+        request.readFrom(in);
+        return request;
+    }
+
+    @Override
+    protected EmptyResult shardOperation(ForceMergeRequest request, ShardRouting shardRouting) throws IOException {
+        IndexShard indexShard = indicesService.indexServiceSafe(shardRouting.shardId().getIndex()).getShard(shardRouting.shardId().id());
+        indexShard.forceMerge(request);
+        return EmptyResult.INSTANCE;
+    }
+
+    /**
+     * The refresh request works against *all* shards.
+     */
+    @Override
+    protected ShardsIterator shards(ClusterState clusterState, ForceMergeRequest request, String[] concreteIndices) {
+        return clusterState.routingTable().allShards(concreteIndices);
+    }
+
+    @Override
+    protected ClusterBlockException checkGlobalBlock(ClusterState state, ForceMergeRequest request) {
+        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);
+    }
+
+    @Override
+    protected ClusterBlockException checkRequestBlock(ClusterState state, ForceMergeRequest request, String[] concreteIndices) {
+        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_WRITE, concreteIndices);
+    }
+}
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/package-info.java b/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/package-info.java
new file mode 100644
index 0000000..9394d48
--- /dev/null
+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/forcemerge/package-info.java
@@ -0,0 +1,23 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Force merge index/indices action.
+ */
+package org.elasticsearch.action.admin.indices.forcemerge;
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/OptimizeAction.java b/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/OptimizeAction.java
deleted file mode 100644
index b44d372..0000000
--- a/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/OptimizeAction.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.elasticsearch.action.admin.indices.optimize;
-
-import org.elasticsearch.action.Action;
-import org.elasticsearch.client.ElasticsearchClient;
-
-/**
- */
-public class OptimizeAction extends Action<OptimizeRequest, OptimizeResponse, OptimizeRequestBuilder> {
-
-    public static final OptimizeAction INSTANCE = new OptimizeAction();
-    public static final String NAME = "indices:admin/optimize";
-
-    private OptimizeAction() {
-        super(NAME);
-    }
-
-    @Override
-    public OptimizeResponse newResponse() {
-        return new OptimizeResponse();
-    }
-
-    @Override
-    public OptimizeRequestBuilder newRequestBuilder(ElasticsearchClient client) {
-        return new OptimizeRequestBuilder(client, this);
-    }
-}
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/OptimizeRequest.java b/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/OptimizeRequest.java
deleted file mode 100644
index cf3006b..0000000
--- a/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/OptimizeRequest.java
+++ /dev/null
@@ -1,137 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.elasticsearch.action.admin.indices.optimize;
-
-import org.elasticsearch.action.support.broadcast.BroadcastRequest;
-import org.elasticsearch.common.io.stream.StreamInput;
-import org.elasticsearch.common.io.stream.StreamOutput;
-
-import java.io.IOException;
-
-/**
- * A request to optimize one or more indices. In order to optimize on all the indices, pass an empty array or
- * <tt>null</tt> for the indices.
- * <p>
- * {@link #maxNumSegments(int)} allows to control the number of segments to optimize down to. By default, will
- * cause the optimize process to optimize down to half the configured number of segments.
- *
- * @see org.elasticsearch.client.Requests#optimizeRequest(String...)
- * @see org.elasticsearch.client.IndicesAdminClient#optimize(OptimizeRequest)
- * @see OptimizeResponse
- */
-public class OptimizeRequest extends BroadcastRequest<OptimizeRequest> {
-
-    public static final class Defaults {
-        public static final int MAX_NUM_SEGMENTS = -1;
-        public static final boolean ONLY_EXPUNGE_DELETES = false;
-        public static final boolean FLUSH = true;
-    }
-    
-    private int maxNumSegments = Defaults.MAX_NUM_SEGMENTS;
-    private boolean onlyExpungeDeletes = Defaults.ONLY_EXPUNGE_DELETES;
-    private boolean flush = Defaults.FLUSH;
-
-    /**
-     * Constructs an optimization request over one or more indices.
-     *
-     * @param indices The indices to optimize, no indices passed means all indices will be optimized.
-     */
-    public OptimizeRequest(String... indices) {
-        super(indices);
-    }
-
-    public OptimizeRequest() {
-
-    }
-
-    /**
-     * Will optimize the index down to &lt;= maxNumSegments. By default, will cause the optimize
-     * process to optimize down to half the configured number of segments.
-     */
-    public int maxNumSegments() {
-        return maxNumSegments;
-    }
-
-    /**
-     * Will optimize the index down to &lt;= maxNumSegments. By default, will cause the optimize
-     * process to optimize down to half the configured number of segments.
-     */
-    public OptimizeRequest maxNumSegments(int maxNumSegments) {
-        this.maxNumSegments = maxNumSegments;
-        return this;
-    }
-
-    /**
-     * Should the optimization only expunge deletes from the index, without full optimization.
-     * Defaults to full optimization (<tt>false</tt>).
-     */
-    public boolean onlyExpungeDeletes() {
-        return onlyExpungeDeletes;
-    }
-
-    /**
-     * Should the optimization only expunge deletes from the index, without full optimization.
-     * Defaults to full optimization (<tt>false</tt>).
-     */
-    public OptimizeRequest onlyExpungeDeletes(boolean onlyExpungeDeletes) {
-        this.onlyExpungeDeletes = onlyExpungeDeletes;
-        return this;
-    }
-
-    /**
-     * Should flush be performed after the optimization. Defaults to <tt>true</tt>.
-     */
-    public boolean flush() {
-        return flush;
-    }
-
-    /**
-     * Should flush be performed after the optimization. Defaults to <tt>true</tt>.
-     */
-    public OptimizeRequest flush(boolean flush) {
-        this.flush = flush;
-        return this;
-    }
-
-    @Override
-    public void readFrom(StreamInput in) throws IOException {
-        super.readFrom(in);
-        maxNumSegments = in.readInt();
-        onlyExpungeDeletes = in.readBoolean();
-        flush = in.readBoolean();
-    }
-
-    @Override
-    public void writeTo(StreamOutput out) throws IOException {
-        super.writeTo(out);
-        out.writeInt(maxNumSegments);
-        out.writeBoolean(onlyExpungeDeletes);
-        out.writeBoolean(flush);
-    }
-
-    @Override
-    public String toString() {
-        return "OptimizeRequest{" +
-                "maxNumSegments=" + maxNumSegments +
-                ", onlyExpungeDeletes=" + onlyExpungeDeletes +
-                ", flush=" + flush +
-                '}';
-    }
-}
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/OptimizeRequestBuilder.java b/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/OptimizeRequestBuilder.java
deleted file mode 100644
index d318492..0000000
--- a/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/OptimizeRequestBuilder.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.elasticsearch.action.admin.indices.optimize;
-
-import org.elasticsearch.action.support.broadcast.BroadcastOperationRequestBuilder;
-import org.elasticsearch.client.ElasticsearchClient;
-
-/**
- * A request to optimize one or more indices. In order to optimize on all the indices, pass an empty array or
- * <tt>null</tt> for the indices.
- * <p>{@link #setMaxNumSegments(int)} allows to control the number of segments to optimize down to. By default, will
- * cause the optimize process to optimize down to half the configured number of segments.
- */
-public class OptimizeRequestBuilder extends BroadcastOperationRequestBuilder<OptimizeRequest, OptimizeResponse, OptimizeRequestBuilder> {
-
-    public OptimizeRequestBuilder(ElasticsearchClient client, OptimizeAction action) {
-        super(client, action, new OptimizeRequest());
-    }
-
-    /**
-     * Will optimize the index down to &lt;= maxNumSegments. By default, will cause the optimize
-     * process to optimize down to half the configured number of segments.
-     */
-    public OptimizeRequestBuilder setMaxNumSegments(int maxNumSegments) {
-        request.maxNumSegments(maxNumSegments);
-        return this;
-    }
-
-    /**
-     * Should the optimization only expunge deletes from the index, without full optimization.
-     * Defaults to full optimization (<tt>false</tt>).
-     */
-    public OptimizeRequestBuilder setOnlyExpungeDeletes(boolean onlyExpungeDeletes) {
-        request.onlyExpungeDeletes(onlyExpungeDeletes);
-        return this;
-    }
-
-    /**
-     * Should flush be performed after the optimization. Defaults to <tt>true</tt>.
-     */
-    public OptimizeRequestBuilder setFlush(boolean flush) {
-        request.flush(flush);
-        return this;
-    }
-}
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/OptimizeResponse.java b/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/OptimizeResponse.java
deleted file mode 100644
index 88341ef..0000000
--- a/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/OptimizeResponse.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.elasticsearch.action.admin.indices.optimize;
-
-import org.elasticsearch.action.ShardOperationFailedException;
-import org.elasticsearch.action.support.broadcast.BroadcastResponse;
-import org.elasticsearch.common.io.stream.StreamInput;
-import org.elasticsearch.common.io.stream.StreamOutput;
-
-import java.io.IOException;
-import java.util.List;
-
-/**
- * A response for optimize action.
- *
- *
- */
-public class OptimizeResponse extends BroadcastResponse {
-
-    OptimizeResponse() {
-
-    }
-
-    OptimizeResponse(int totalShards, int successfulShards, int failedShards, List<ShardOperationFailedException> shardFailures) {
-        super(totalShards, successfulShards, failedShards, shardFailures);
-    }
-
-    @Override
-    public void readFrom(StreamInput in) throws IOException {
-        super.readFrom(in);
-    }
-
-    @Override
-    public void writeTo(StreamOutput out) throws IOException {
-        super.writeTo(out);
-    }
-}
\ No newline at end of file
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/TransportOptimizeAction.java b/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/TransportOptimizeAction.java
deleted file mode 100644
index 764022b..0000000
--- a/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/TransportOptimizeAction.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.elasticsearch.action.admin.indices.optimize;
-
-import org.elasticsearch.action.ShardOperationFailedException;
-import org.elasticsearch.action.support.ActionFilters;
-import org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;
-import org.elasticsearch.cluster.ClusterService;
-import org.elasticsearch.cluster.ClusterState;
-import org.elasticsearch.cluster.block.ClusterBlockException;
-import org.elasticsearch.cluster.block.ClusterBlockLevel;
-import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;
-import org.elasticsearch.cluster.routing.ShardRouting;
-import org.elasticsearch.cluster.routing.ShardsIterator;
-import org.elasticsearch.common.inject.Inject;
-import org.elasticsearch.common.io.stream.StreamInput;
-import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.index.shard.IndexShard;
-import org.elasticsearch.indices.IndicesService;
-import org.elasticsearch.threadpool.ThreadPool;
-import org.elasticsearch.transport.TransportService;
-
-import java.io.IOException;
-import java.util.List;
-
-/**
- * Optimize index/indices action.
- */
-public class TransportOptimizeAction extends TransportBroadcastByNodeAction<OptimizeRequest, OptimizeResponse, TransportBroadcastByNodeAction.EmptyResult> {
-
-    private final IndicesService indicesService;
-
-    @Inject
-    public TransportOptimizeAction(Settings settings, ThreadPool threadPool, ClusterService clusterService,
-                                   TransportService transportService, IndicesService indicesService,
-                                   ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {
-        super(settings, OptimizeAction.NAME, threadPool, clusterService, transportService, actionFilters, indexNameExpressionResolver,
-                OptimizeRequest::new, ThreadPool.Names.OPTIMIZE);
-        this.indicesService = indicesService;
-    }
-
-    @Override
-    protected EmptyResult readShardResult(StreamInput in) throws IOException {
-        return EmptyResult.readEmptyResultFrom(in);
-    }
-
-    @Override
-    protected OptimizeResponse newResponse(OptimizeRequest request, int totalShards, int successfulShards, int failedShards, List<EmptyResult> responses, List<ShardOperationFailedException> shardFailures, ClusterState clusterState) {
-        return new OptimizeResponse(totalShards, successfulShards, failedShards, shardFailures);
-    }
-
-    @Override
-    protected OptimizeRequest readRequestFrom(StreamInput in) throws IOException {
-        final OptimizeRequest request = new OptimizeRequest();
-        request.readFrom(in);
-        return request;
-    }
-
-    @Override
-    protected EmptyResult shardOperation(OptimizeRequest request, ShardRouting shardRouting) throws IOException {
-        IndexShard indexShard = indicesService.indexServiceSafe(shardRouting.shardId().getIndex()).getShard(shardRouting.shardId().id());
-        indexShard.optimize(request);
-        return EmptyResult.INSTANCE;
-    }
-
-    /**
-     * The refresh request works against *all* shards.
-     */
-    @Override
-    protected ShardsIterator shards(ClusterState clusterState, OptimizeRequest request, String[] concreteIndices) {
-        return clusterState.routingTable().allShards(concreteIndices);
-    }
-
-    @Override
-    protected ClusterBlockException checkGlobalBlock(ClusterState state, OptimizeRequest request) {
-        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);
-    }
-
-    @Override
-    protected ClusterBlockException checkRequestBlock(ClusterState state, OptimizeRequest request, String[] concreteIndices) {
-        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_WRITE, concreteIndices);
-    }
-}
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/package-info.java b/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/package-info.java
deleted file mode 100644
index e54ff9e..0000000
--- a/core/src/main/java/org/elasticsearch/action/admin/indices/optimize/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-/**
- * Optimize index/indices action.
- */
-package org.elasticsearch.action.admin.indices.optimize;
\ No newline at end of file
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java
index 30aff1f..5e87e91 100644
--- a/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java
+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java
@@ -64,7 +64,7 @@ public class TransportUpgradeAction extends TransportBroadcastByNodeAction<Upgra
     public TransportUpgradeAction(Settings settings, ThreadPool threadPool, ClusterService clusterService,
                                   TransportService transportService, IndicesService indicesService, ActionFilters actionFilters,
                                   IndexNameExpressionResolver indexNameExpressionResolver, TransportUpgradeSettingsAction upgradeSettingsAction) {
-        super(settings, UpgradeAction.NAME, threadPool, clusterService, transportService, actionFilters, indexNameExpressionResolver, UpgradeRequest::new, ThreadPool.Names.OPTIMIZE);
+        super(settings, UpgradeAction.NAME, threadPool, clusterService, transportService, actionFilters, indexNameExpressionResolver, UpgradeRequest::new, ThreadPool.Names.FORCE_MERGE);
         this.indicesService = indicesService;
         this.upgradeSettingsAction = upgradeSettingsAction;
     }
diff --git a/core/src/main/java/org/elasticsearch/action/get/MultiGetRequest.java b/core/src/main/java/org/elasticsearch/action/get/MultiGetRequest.java
index a6af705..030b0ee 100644
--- a/core/src/main/java/org/elasticsearch/action/get/MultiGetRequest.java
+++ b/core/src/main/java/org/elasticsearch/action/get/MultiGetRequest.java
@@ -234,7 +234,7 @@ public class MultiGetRequest extends ActionRequest<MultiGetRequest> implements I
             result = 31 * result + id.hashCode();
             result = 31 * result + (routing != null ? routing.hashCode() : 0);
             result = 31 * result + (fields != null ? Arrays.hashCode(fields) : 0);
-            result = 31 * result + Long.hashCode(version);
+            result = 31 * result + (int) (version ^ (version >>> 32));
             result = 31 * result + versionType.hashCode();
             result = 31 * result + (fetchSourceContext != null ? fetchSourceContext.hashCode() : 0);
             return result;
diff --git a/core/src/main/java/org/elasticsearch/action/support/AdapterActionFuture.java b/core/src/main/java/org/elasticsearch/action/support/AdapterActionFuture.java
index ec2db7a..1a14f34 100644
--- a/core/src/main/java/org/elasticsearch/action/support/AdapterActionFuture.java
+++ b/core/src/main/java/org/elasticsearch/action/support/AdapterActionFuture.java
@@ -36,6 +36,8 @@ import java.util.concurrent.TimeoutException;
  */
 public abstract class AdapterActionFuture<T, L> extends BaseFuture<T> implements ActionFuture<T>, ActionListener<L> {
 
+    private Throwable rootFailure;
+
     @Override
     public T actionGet() {
         try {
@@ -103,4 +105,9 @@ public abstract class AdapterActionFuture<T, L> extends BaseFuture<T> implements
     }
 
     protected abstract T convert(L listenerResponse);
+
+    @Override
+    public Throwable getRootFailure() {
+        return rootFailure;
+    }
 }
diff --git a/core/src/main/java/org/elasticsearch/client/IndicesAdminClient.java b/core/src/main/java/org/elasticsearch/client/IndicesAdminClient.java
index d5d4921..15def3b 100644
--- a/core/src/main/java/org/elasticsearch/client/IndicesAdminClient.java
+++ b/core/src/main/java/org/elasticsearch/client/IndicesAdminClient.java
@@ -53,6 +53,9 @@ import org.elasticsearch.action.admin.indices.exists.types.TypesExistsResponse;
 import org.elasticsearch.action.admin.indices.flush.FlushRequest;
 import org.elasticsearch.action.admin.indices.flush.FlushRequestBuilder;
 import org.elasticsearch.action.admin.indices.flush.FlushResponse;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeRequestBuilder;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeRequest;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeResponse;
 import org.elasticsearch.action.admin.indices.get.GetIndexRequest;
 import org.elasticsearch.action.admin.indices.get.GetIndexRequestBuilder;
 import org.elasticsearch.action.admin.indices.get.GetIndexResponse;
@@ -63,9 +66,6 @@ import org.elasticsearch.action.admin.indices.mapping.put.PutMappingResponse;
 import org.elasticsearch.action.admin.indices.open.OpenIndexRequest;
 import org.elasticsearch.action.admin.indices.open.OpenIndexRequestBuilder;
 import org.elasticsearch.action.admin.indices.open.OpenIndexResponse;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeRequest;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeRequestBuilder;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeResponse;
 import org.elasticsearch.action.admin.indices.recovery.RecoveryRequest;
 import org.elasticsearch.action.admin.indices.recovery.RecoveryRequestBuilder;
 import org.elasticsearch.action.admin.indices.recovery.RecoveryResponse;
@@ -391,28 +391,27 @@ public interface IndicesAdminClient extends ElasticsearchClient {
     FlushRequestBuilder prepareFlush(String... indices);
 
     /**
-     * Explicitly optimize one or more indices into a the number of segments.
+     * Explicitly force merge one or more indices into a the number of segments.
      *
      * @param request The optimize request
      * @return A result future
-     * @see org.elasticsearch.client.Requests#optimizeRequest(String...)
+     * @see org.elasticsearch.client.Requests#forceMergeRequest(String...)
      */
-    ActionFuture<OptimizeResponse> optimize(OptimizeRequest request);
+    ActionFuture<ForceMergeResponse> forceMerge(ForceMergeRequest request);
 
     /**
-     * Explicitly optimize one or more indices into a the number of segments.
+     * Explicitly force merge one or more indices into a the number of segments.
      *
-     * @param request  The optimize request
+     * @param request  The force merge request
      * @param listener A listener to be notified with a result
-     * @see org.elasticsearch.client.Requests#optimizeRequest(String...)
+     * @see org.elasticsearch.client.Requests#forceMergeRequest(String...)
      */
-    void optimize(OptimizeRequest request, ActionListener<OptimizeResponse> listener);
+    void forceMerge(ForceMergeRequest request, ActionListener<ForceMergeResponse> listener);
 
     /**
-     * Explicitly optimize one or more indices into a the number of segments.
+     * Explicitly force mergee one or more indices into a the number of segments.
      */
-    OptimizeRequestBuilder prepareOptimize(String... indices);
-
+    ForceMergeRequestBuilder prepareForceMerge(String... indices);
 
     /**
      * Explicitly upgrade one or more indices
diff --git a/core/src/main/java/org/elasticsearch/client/Requests.java b/core/src/main/java/org/elasticsearch/client/Requests.java
index 45a40ee..b99c99a 100644
--- a/core/src/main/java/org/elasticsearch/client/Requests.java
+++ b/core/src/main/java/org/elasticsearch/client/Requests.java
@@ -45,7 +45,7 @@ import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsReques
 import org.elasticsearch.action.admin.indices.flush.FlushRequest;
 import org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;
 import org.elasticsearch.action.admin.indices.open.OpenIndexRequest;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeRequest;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeRequest;
 import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;
 import org.elasticsearch.action.admin.indices.segments.IndicesSegmentsRequest;
 import org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest;
@@ -279,14 +279,14 @@ public class Requests {
     }
 
     /**
-     * Creates an optimize request.
+     * Creates a force merge request.
      *
-     * @param indices The indices to optimize. Use <tt>null</tt> or <tt>_all</tt> to execute against all indices
-     * @return The optimize request
-     * @see org.elasticsearch.client.IndicesAdminClient#optimize(org.elasticsearch.action.admin.indices.optimize.OptimizeRequest)
+     * @param indices The indices to force merge. Use <tt>null</tt> or <tt>_all</tt> to execute against all indices
+     * @return The force merge request
+     * @see org.elasticsearch.client.IndicesAdminClient#forceMerge(org.elasticsearch.action.admin.indices.forcemerge.ForceMergeRequest)
      */
-    public static OptimizeRequest optimizeRequest(String... indices) {
-        return new OptimizeRequest(indices);
+    public static ForceMergeRequest forceMergeRequest(String... indices) {
+        return new ForceMergeRequest(indices);
     }
 
     /**
diff --git a/core/src/main/java/org/elasticsearch/client/support/AbstractClient.java b/core/src/main/java/org/elasticsearch/client/support/AbstractClient.java
index df6da2d..43051a9 100644
--- a/core/src/main/java/org/elasticsearch/client/support/AbstractClient.java
+++ b/core/src/main/java/org/elasticsearch/client/support/AbstractClient.java
@@ -139,6 +139,10 @@ import org.elasticsearch.action.admin.indices.flush.FlushAction;
 import org.elasticsearch.action.admin.indices.flush.FlushRequest;
 import org.elasticsearch.action.admin.indices.flush.FlushRequestBuilder;
 import org.elasticsearch.action.admin.indices.flush.FlushResponse;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeAction;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeRequest;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeRequestBuilder;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeResponse;
 import org.elasticsearch.action.admin.indices.get.GetIndexAction;
 import org.elasticsearch.action.admin.indices.get.GetIndexRequest;
 import org.elasticsearch.action.admin.indices.get.GetIndexRequestBuilder;
@@ -152,10 +156,6 @@ import org.elasticsearch.action.admin.indices.open.OpenIndexAction;
 import org.elasticsearch.action.admin.indices.open.OpenIndexRequest;
 import org.elasticsearch.action.admin.indices.open.OpenIndexRequestBuilder;
 import org.elasticsearch.action.admin.indices.open.OpenIndexResponse;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeAction;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeRequest;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeRequestBuilder;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeResponse;
 import org.elasticsearch.action.admin.indices.recovery.RecoveryAction;
 import org.elasticsearch.action.admin.indices.recovery.RecoveryRequest;
 import org.elasticsearch.action.admin.indices.recovery.RecoveryRequestBuilder;
@@ -1382,18 +1382,18 @@ public abstract class AbstractClient extends AbstractComponent implements Client
         }
 
         @Override
-        public ActionFuture<OptimizeResponse> optimize(final OptimizeRequest request) {
-            return execute(OptimizeAction.INSTANCE, request);
+        public ActionFuture<ForceMergeResponse> forceMerge(final ForceMergeRequest request) {
+            return execute(ForceMergeAction.INSTANCE, request);
         }
 
         @Override
-        public void optimize(final OptimizeRequest request, final ActionListener<OptimizeResponse> listener) {
-            execute(OptimizeAction.INSTANCE, request, listener);
+        public void forceMerge(final ForceMergeRequest request, final ActionListener<ForceMergeResponse> listener) {
+            execute(ForceMergeAction.INSTANCE, request, listener);
         }
 
         @Override
-        public OptimizeRequestBuilder prepareOptimize(String... indices) {
-            return new OptimizeRequestBuilder(this, OptimizeAction.INSTANCE).setIndices(indices);
+        public ForceMergeRequestBuilder prepareForceMerge(String... indices) {
+            return new ForceMergeRequestBuilder(this, ForceMergeAction.INSTANCE).setIndices(indices);
         }
 
         @Override
diff --git a/core/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java b/core/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java
index 6ee8365..821ab3c 100644
--- a/core/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java
+++ b/core/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java
@@ -152,7 +152,7 @@ public class SnapshotsInProgress extends AbstractDiffable<Custom> implements Cus
             result = 31 * result + shards.hashCode();
             result = 31 * result + indices.hashCode();
             result = 31 * result + waitingIndices.hashCode();
-            result = 31 * result + Long.hashCode(startTime);
+            result = 31 * result + (int) (startTime ^ (startTime >>> 32));
             return result;
         }
 
diff --git a/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java
index bc90241..8ee8205 100644
--- a/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java
+++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java
@@ -654,7 +654,7 @@ public final class ShardRouting implements Streamable, ToXContent {
         result = 31 * result + (relocatingNodeId != null ? relocatingNodeId.hashCode() : 0);
         result = 31 * result + (primary ? 1 : 0);
         result = 31 * result + (state != null ? state.hashCode() : 0);
-        result = 31 * result + Long.hashCode(version);
+        result = 31 * result + (int) (version ^ (version >>> 32));
         result = 31 * result + (restoreSource != null ? restoreSource.hashCode() : 0);
         result = 31 * result + (allocationId != null ? allocationId.hashCode() : 0);
         result = 31 * result + (unassignedInfo != null ? unassignedInfo.hashCode() : 0);
diff --git a/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java
index 384a441..e329541 100644
--- a/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java
+++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java
@@ -311,7 +311,7 @@ public class UnassignedInfo implements ToXContent, Writeable<UnassignedInfo> {
     @Override
     public int hashCode() {
         int result = reason != null ? reason.hashCode() : 0;
-        result = 31 * result + Long.hashCode(timestamp);
+        result = 31 * result + (int) (timestamp ^ (timestamp >>> 32));
         result = 31 * result + (message != null ? message.hashCode() : 0);
         result = 31 * result + (failure != null ? failure.hashCode() : 0);
         return result;
diff --git a/core/src/main/java/org/elasticsearch/common/geo/GeoPoint.java b/core/src/main/java/org/elasticsearch/common/geo/GeoPoint.java
index 1a3b50c..91a6d14 100644
--- a/core/src/main/java/org/elasticsearch/common/geo/GeoPoint.java
+++ b/core/src/main/java/org/elasticsearch/common/geo/GeoPoint.java
@@ -138,9 +138,9 @@ public final class GeoPoint {
         int result;
         long temp;
         temp = lat != +0.0d ? Double.doubleToLongBits(lat) : 0L;
-        result = Long.hashCode(temp);
+        result = (int) (temp ^ (temp >>> 32));
         temp = lon != +0.0d ? Double.doubleToLongBits(lon) : 0L;
-        result = 31 * result + Long.hashCode(temp);
+        result = 31 * result + (int) (temp ^ (temp >>> 32));
         return result;
     }
 
diff --git a/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java
index 93da5ac..4b56027 100644
--- a/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java
+++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java
@@ -602,7 +602,7 @@ public abstract class StreamInput extends InputStream {
      * Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.
      */
     <C> C readNamedWriteable(@SuppressWarnings("unused") Class<C> categoryClass) throws IOException {
-        throw new UnsupportedOperationException("can't read named writeable from StreamInput");
+        throw new UnsupportedOperationException();
     }
 
     /**
diff --git a/core/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java
index d4390fe..a269d23 100644
--- a/core/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java
+++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java
@@ -259,7 +259,7 @@ public class ByteSizeValue implements Streamable {
 
     @Override
     public int hashCode() {
-        int result = Long.hashCode(size);
+        int result = (int) (size ^ (size >>> 32));
         result = 31 * result + (sizeUnit != null ? sizeUnit.hashCode() : 0);
         return result;
     }
diff --git a/core/src/main/java/org/elasticsearch/common/unit/SizeValue.java b/core/src/main/java/org/elasticsearch/common/unit/SizeValue.java
index 3958b19..fcbcff3 100644
--- a/core/src/main/java/org/elasticsearch/common/unit/SizeValue.java
+++ b/core/src/main/java/org/elasticsearch/common/unit/SizeValue.java
@@ -228,7 +228,7 @@ public class SizeValue implements Streamable {
 
     @Override
     public int hashCode() {
-        int result = Long.hashCode(size);
+        int result = (int) (size ^ (size >>> 32));
         result = 31 * result + (sizeUnit != null ? sizeUnit.hashCode() : 0);
         return result;
     }
diff --git a/core/src/main/java/org/elasticsearch/common/unit/TimeValue.java b/core/src/main/java/org/elasticsearch/common/unit/TimeValue.java
index 6be5cc0..5f9eb95 100644
--- a/core/src/main/java/org/elasticsearch/common/unit/TimeValue.java
+++ b/core/src/main/java/org/elasticsearch/common/unit/TimeValue.java
@@ -311,7 +311,7 @@ public class TimeValue implements Streamable {
     @Override
     public int hashCode() {
         long normalized = timeUnit.toNanos(duration);
-        return Long.hashCode(normalized);
+        return (int) (normalized ^ (normalized >>> 32));
     }
 
     public static long nsecToMSec(long ns) {
diff --git a/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java
index 7ed3d36..86b616b 100644
--- a/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java
+++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java
@@ -246,7 +246,7 @@ public final class EngineConfig {
 
     /**
      * Returns a thread-pool mainly used to get estimated time stamps from {@link org.elasticsearch.threadpool.ThreadPool#estimatedTimeInMillis()} and to schedule
-     * async force merge calls on the {@link org.elasticsearch.threadpool.ThreadPool.Names#OPTIMIZE} thread-pool
+     * async force merge calls on the {@link org.elasticsearch.threadpool.ThreadPool.Names#FORCE_MERGE} thread-pool
      */
     public ThreadPool getThreadPool() {
         return threadPool;
diff --git a/core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryBuilder.java b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryBuilder.java
index 55f3a98..ee3d8bc 100644
--- a/core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryBuilder.java
+++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryBuilder.java
@@ -177,7 +177,7 @@ public class GeoDistanceRangeQueryBuilder extends AbstractQueryBuilder<GeoDistan
 
     public GeoDistanceRangeQueryBuilder optimizeBbox(String optimizeBbox) {
         if (optimizeBbox == null) {
-            throw new IllegalArgumentException("optimizeBbox must not be null");
+            throw new IllegalArgumentException("optimizeBox must not be null");
         }
         switch (optimizeBbox) {
             case "none":
@@ -200,7 +200,7 @@ public class GeoDistanceRangeQueryBuilder extends AbstractQueryBuilder<GeoDistan
         this.validationMethod = method;
         return this;
     }
-
+    
     /** Returns validation method for coordinates. */
     public GeoValidationMethod getValidationMethod() {
         return this.validationMethod;
@@ -305,7 +305,7 @@ public class GeoDistanceRangeQueryBuilder extends AbstractQueryBuilder<GeoDistan
 
     @Override
     protected boolean doEquals(GeoDistanceRangeQueryBuilder other) {
-        return ((Objects.equals(fieldName, other.fieldName)) &&
+        return ((Objects.equals(fieldName, other.fieldName)) && 
                 (Objects.equals(point, other.point)) &&
                 (Objects.equals(from, other.from)) &&
                 (Objects.equals(to, other.to)) &&
diff --git a/core/src/main/java/org/elasticsearch/index/query/NotQueryBuilder.java b/core/src/main/java/org/elasticsearch/index/query/NotQueryBuilder.java
new file mode 100644
index 0000000..72b70a7
--- /dev/null
+++ b/core/src/main/java/org/elasticsearch/index/query/NotQueryBuilder.java
@@ -0,0 +1,99 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.index.query;
+
+import org.apache.lucene.search.Query;
+import org.elasticsearch.common.io.stream.StreamInput;
+import org.elasticsearch.common.io.stream.StreamOutput;
+import org.elasticsearch.common.lucene.search.Queries;
+import org.elasticsearch.common.xcontent.XContentBuilder;
+
+import java.io.IOException;
+import java.util.Objects;
+
+/**
+ * A filter that matches documents matching boolean combinations of other filters.
+ */
+public class NotQueryBuilder extends AbstractQueryBuilder<NotQueryBuilder> {
+
+    public static final String NAME = "not";
+
+    private final QueryBuilder filter;
+
+    static final NotQueryBuilder PROTOTYPE = new NotQueryBuilder(EmptyQueryBuilder.PROTOTYPE);
+
+    public NotQueryBuilder(QueryBuilder filter) {
+        if (filter == null) {
+            throw new IllegalArgumentException("inner filter cannot be null");
+        }
+        this.filter = filter;
+    }
+
+    /**
+     * @return the query added to "not".
+     */
+    public QueryBuilder innerQuery() {
+        return this.filter;
+    }
+
+    @Override
+    protected void doXContent(XContentBuilder builder, Params params) throws IOException {
+        builder.startObject(NAME);
+        builder.field("query");
+        filter.toXContent(builder, params);
+        printBoostAndQueryName(builder);
+        builder.endObject();
+    }
+
+    @Override
+    protected Query doToQuery(QueryShardContext context) throws IOException {
+        Query luceneQuery = filter.toFilter(context);
+        if (luceneQuery == null) {
+            return null;
+        }
+        return Queries.not(luceneQuery);
+    }
+
+    @Override
+    protected int doHashCode() {
+        return Objects.hash(filter);
+    }
+
+    @Override
+    protected boolean doEquals(NotQueryBuilder other) {
+        return Objects.equals(filter, other.filter);
+    }
+
+    @Override
+    protected NotQueryBuilder doReadFrom(StreamInput in) throws IOException {
+        QueryBuilder queryBuilder = in.readQuery();
+        return new NotQueryBuilder(queryBuilder);
+    }
+
+    @Override
+    protected void doWriteTo(StreamOutput out) throws IOException {
+        out.writeQuery(filter);
+    }
+
+    @Override
+    public String getWriteableName() {
+        return NAME;
+    }
+}
diff --git a/core/src/main/java/org/elasticsearch/index/query/NotQueryParser.java b/core/src/main/java/org/elasticsearch/index/query/NotQueryParser.java
new file mode 100644
index 0000000..de45820
--- /dev/null
+++ b/core/src/main/java/org/elasticsearch/index/query/NotQueryParser.java
@@ -0,0 +1,90 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.index.query;
+
+import org.elasticsearch.common.ParseField;
+import org.elasticsearch.common.ParsingException;
+import org.elasticsearch.common.xcontent.XContentParser;
+
+import java.io.IOException;
+
+/**
+ * Parser for not query
+ */
+public class NotQueryParser implements QueryParser<NotQueryBuilder> {
+
+    private static final ParseField QUERY_FIELD = new ParseField("query", "filter");
+
+    @Override
+    public String[] names() {
+        return new String[]{NotQueryBuilder.NAME};
+    }
+
+    @Override
+    public NotQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {
+        XContentParser parser = parseContext.parser();
+
+        QueryBuilder query = null;
+        boolean queryFound = false;
+
+        String queryName = null;
+        String currentFieldName = null;
+        float boost = AbstractQueryBuilder.DEFAULT_BOOST;
+        XContentParser.Token token;
+        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {
+            if (token == XContentParser.Token.FIELD_NAME) {
+                currentFieldName = parser.currentName();
+            } else if (parseContext.isDeprecatedSetting(currentFieldName)) {
+                // skip
+            } else if (token == XContentParser.Token.START_OBJECT) {
+                if (parseContext.parseFieldMatcher().match(currentFieldName, QUERY_FIELD)) {
+                    query = parseContext.parseInnerQueryBuilder();
+                    queryFound = true;
+                } else {
+                    queryFound = true;
+                    // its the filter, and the name is the field
+                    query = parseContext.parseInnerQueryBuilderByName(currentFieldName);
+                }
+            } else if (token.isValue()) {
+                if ("_name".equals(currentFieldName)) {
+                    queryName = parser.text();
+                } else if ("boost".equals(currentFieldName)) {
+                    boost = parser.floatValue();
+                } else {
+                    throw new ParsingException(parser.getTokenLocation(), "[not] query does not support [" + currentFieldName + "]");
+                }
+            }
+        }
+
+        if (!queryFound) {
+            throw new ParsingException(parser.getTokenLocation(), "query is required when using `not` query");
+        }
+
+        NotQueryBuilder notQueryBuilder = new NotQueryBuilder(query);
+        notQueryBuilder.queryName(queryName);
+        notQueryBuilder.boost(boost);
+        return notQueryBuilder;
+    }
+
+    @Override
+    public NotQueryBuilder getBuilderPrototype() {
+        return NotQueryBuilder.PROTOTYPE;
+    }
+}
\ No newline at end of file
diff --git a/core/src/main/java/org/elasticsearch/index/query/QueryBuilders.java b/core/src/main/java/org/elasticsearch/index/query/QueryBuilders.java
index 45f97d6..67e654c 100644
--- a/core/src/main/java/org/elasticsearch/index/query/QueryBuilders.java
+++ b/core/src/main/java/org/elasticsearch/index/query/QueryBuilders.java
@@ -831,6 +831,10 @@ public abstract class QueryBuilders {
         return new MissingQueryBuilder(name, nullValue, existence);
     }
 
+    public static NotQueryBuilder notQuery(QueryBuilder filter) {
+        return new NotQueryBuilder(filter);
+    }
+
     private QueryBuilders() {
 
     }
diff --git a/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java
index 0885d04..de85abd 100644
--- a/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java
+++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java
@@ -91,12 +91,7 @@ public class QueryParseContext {
             throw new ParsingException(parser.getTokenLocation(), "[_na] query malformed, no field after start_object");
         }
 
-        QueryParser queryParser = queryParser(queryName);
-        if (queryParser == null) {
-            throw new ParsingException(parser.getTokenLocation(), "No query registered for [" + queryName + "]");
-        }
-
-        QueryBuilder result = queryParser.fromXContent(this);
+        QueryBuilder result = parseInnerQueryBuilderByName(queryName);
         if (parser.currentToken() == XContentParser.Token.END_OBJECT || parser.currentToken() == XContentParser.Token.END_ARRAY) {
             // if we are at END_OBJECT, move to the next one...
             parser.nextToken();
@@ -104,6 +99,14 @@ public class QueryParseContext {
         return result;
     }
 
+    public QueryBuilder parseInnerQueryBuilderByName(String queryName) throws IOException {
+        QueryParser queryParser = queryParser(queryName);
+        if (queryParser == null) {
+            throw new ParsingException(parser.getTokenLocation(), "No query registered for [" + queryName + "]");
+        }
+        return queryParser.fromXContent(this);
+    }
+
     public ParseFieldMatcher parseFieldMatcher() {
         return parseFieldMatcher;
     }
diff --git a/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java
index a93c60e..3f8cc5d 100644
--- a/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java
+++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java
@@ -121,7 +121,6 @@ public class SimpleQueryStringBuilder extends AbstractQueryBuilder<SimpleQuerySt
 
     /** Add several fields to run the query against with a specific boost. */
     public SimpleQueryStringBuilder fields(Map<String, Float> fields) {
-        Objects.requireNonNull(fields, "fields cannot be null");
         this.fieldsAndWeights.putAll(fields);
         return this;
     }
diff --git a/core/src/main/java/org/elasticsearch/index/query/functionscore/random/RandomScoreFunctionBuilder.java b/core/src/main/java/org/elasticsearch/index/query/functionscore/random/RandomScoreFunctionBuilder.java
index 4d57139..e62aabc 100644
--- a/core/src/main/java/org/elasticsearch/index/query/functionscore/random/RandomScoreFunctionBuilder.java
+++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/random/RandomScoreFunctionBuilder.java
@@ -131,6 +131,6 @@ public class RandomScoreFunctionBuilder extends ScoreFunctionBuilder<RandomScore
     }
 
     private static int hash(long value) {
-        return Long.hashCode(value);
+        return (int) (value ^ (value >>> 32));
     }
 }
diff --git a/core/src/main/java/org/elasticsearch/index/search/geo/GeoDistanceRangeQuery.java b/core/src/main/java/org/elasticsearch/index/search/geo/GeoDistanceRangeQuery.java
index 1f3c59b..c590ea0 100644
--- a/core/src/main/java/org/elasticsearch/index/search/geo/GeoDistanceRangeQuery.java
+++ b/core/src/main/java/org/elasticsearch/index/search/geo/GeoDistanceRangeQuery.java
@@ -204,13 +204,13 @@ public class GeoDistanceRangeQuery extends Query {
         int result = super.hashCode();
         long temp;
         temp = lat != +0.0d ? Double.doubleToLongBits(lat) : 0L;
-        result = 31 * result + Long.hashCode(temp);
+        result = 31 * result + (int) (temp ^ (temp >>> 32));
         temp = lon != +0.0d ? Double.doubleToLongBits(lon) : 0L;
-        result = 31 * result + Long.hashCode(temp);
+        result = 31 * result + (int) (temp ^ (temp >>> 32));
         temp = inclusiveLowerPoint != +0.0d ? Double.doubleToLongBits(inclusiveLowerPoint) : 0L;
-        result = 31 * result + Long.hashCode(temp);
+        result = 31 * result + (int) (temp ^ (temp >>> 32));
         temp = inclusiveUpperPoint != +0.0d ? Double.doubleToLongBits(inclusiveUpperPoint) : 0L;
-        result = 31 * result + Long.hashCode(temp);
+        result = 31 * result + (int) (temp ^ (temp >>> 32));
         result = 31 * result + (geoDistance != null ? geoDistance.hashCode() : 0);
         result = 31 * result + indexFieldData.getFieldNames().indexName().hashCode();
         return result;
diff --git a/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java
index a6b86e0..78d63cc 100644
--- a/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java
+++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java
@@ -29,7 +29,7 @@ import org.apache.lucene.util.ThreadInterruptedException;
 import org.elasticsearch.ElasticsearchException;
 import org.elasticsearch.Version;
 import org.elasticsearch.action.admin.indices.flush.FlushRequest;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeRequest;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeRequest;
 import org.elasticsearch.action.admin.indices.upgrade.post.UpgradeRequest;
 import org.elasticsearch.action.termvectors.TermVectorsRequest;
 import org.elasticsearch.action.termvectors.TermVectorsResponse;
@@ -644,12 +644,13 @@ public class IndexShard extends AbstractIndexShardComponent implements IndexSett
 
     }
 
-    public void optimize(OptimizeRequest optimize) throws IOException {
+    public void forceMerge(ForceMergeRequest forceMerge) throws IOException {
         verifyStarted();
         if (logger.isTraceEnabled()) {
-            logger.trace("optimize with {}", optimize);
+            logger.trace("force merge with {}", forceMerge);
         }
-        getEngine().forceMerge(optimize.flush(), optimize.maxNumSegments(), optimize.onlyExpungeDeletes(), false, false);
+        getEngine().forceMerge(forceMerge.flush(), forceMerge.maxNumSegments(),
+                forceMerge.onlyExpungeDeletes(), false, false);
     }
 
     /**
diff --git a/core/src/main/java/org/elasticsearch/index/shard/ShardStateMetaData.java b/core/src/main/java/org/elasticsearch/index/shard/ShardStateMetaData.java
index 6d6d3c7..5c61496 100644
--- a/core/src/main/java/org/elasticsearch/index/shard/ShardStateMetaData.java
+++ b/core/src/main/java/org/elasticsearch/index/shard/ShardStateMetaData.java
@@ -75,7 +75,7 @@ public final class ShardStateMetaData {
 
     @Override
     public int hashCode() {
-        int result = Long.hashCode(version);
+        int result = (int) (version ^ (version >>> 32));
         result = 31 * result + (indexUUID != null ? indexUUID.hashCode() : 0);
         result = 31 * result + (primary ? 1 : 0);
         return result;
diff --git a/core/src/main/java/org/elasticsearch/index/translog/Translog.java b/core/src/main/java/org/elasticsearch/index/translog/Translog.java
index 24f6ac1..4265d61 100644
--- a/core/src/main/java/org/elasticsearch/index/translog/Translog.java
+++ b/core/src/main/java/org/elasticsearch/index/translog/Translog.java
@@ -746,8 +746,8 @@ public class Translog extends AbstractIndexShardComponent implements IndexShardC
 
         @Override
         public int hashCode() {
-            int result = Long.hashCode(generation);
-            result = 31 * result + Long.hashCode(translogLocation);
+            int result = (int) (generation ^ (generation >>> 32));
+            result = 31 * result + (int) (translogLocation ^ (translogLocation >>> 32));
             result = 31 * result + size;
             return result;
         }
@@ -1005,13 +1005,13 @@ public class Translog extends AbstractIndexShardComponent implements IndexShardC
         public int hashCode() {
             int result = id.hashCode();
             result = 31 * result + type.hashCode();
-            result = 31 * result + Long.hashCode(version);
+            result = 31 * result + (int) (version ^ (version >>> 32));
             result = 31 * result + versionType.hashCode();
             result = 31 * result + source.hashCode();
             result = 31 * result + (routing != null ? routing.hashCode() : 0);
             result = 31 * result + (parent != null ? parent.hashCode() : 0);
-            result = 31 * result + Long.hashCode(timestamp);
-            result = 31 * result + Long.hashCode(ttl);
+            result = 31 * result + (int) (timestamp ^ (timestamp >>> 32));
+            result = 31 * result + (int) (ttl ^ (ttl >>> 32));
             return result;
         }
 
@@ -1119,7 +1119,7 @@ public class Translog extends AbstractIndexShardComponent implements IndexShardC
         @Override
         public int hashCode() {
             int result = uid.hashCode();
-            result = 31 * result + Long.hashCode(version);
+            result = 31 * result + (int) (version ^ (version >>> 32));
             result = 31 * result + versionType.hashCode();
             return result;
         }
diff --git a/core/src/main/java/org/elasticsearch/indices/IndicesModule.java b/core/src/main/java/org/elasticsearch/indices/IndicesModule.java
index 69aad95..ff9bd33 100644
--- a/core/src/main/java/org/elasticsearch/indices/IndicesModule.java
+++ b/core/src/main/java/org/elasticsearch/indices/IndicesModule.java
@@ -63,7 +63,7 @@ public class IndicesModule extends AbstractModule {
         this.settings = settings;
         registerBuiltinQueryParsers();
     }
-
+    
     private void registerBuiltinQueryParsers() {
         registerQueryParser(MatchQueryParser.class);
         registerQueryParser(MultiMatchQueryParser.class);
@@ -108,6 +108,7 @@ public class IndicesModule extends AbstractModule {
         registerQueryParser(GeohashCellQuery.Parser.class);
         registerQueryParser(GeoPolygonQueryParser.class);
         registerQueryParser(QueryFilterParser.class);
+        registerQueryParser(NotQueryParser.class);
         registerQueryParser(ExistsQueryParser.class);
         registerQueryParser(MissingQueryParser.class);
         registerQueryParser(MatchNoneQueryParser.class);
diff --git a/core/src/main/java/org/elasticsearch/indices/cache/request/IndicesRequestCache.java b/core/src/main/java/org/elasticsearch/indices/cache/request/IndicesRequestCache.java
index 6628252..723c36e 100644
--- a/core/src/main/java/org/elasticsearch/indices/cache/request/IndicesRequestCache.java
+++ b/core/src/main/java/org/elasticsearch/indices/cache/request/IndicesRequestCache.java
@@ -344,7 +344,7 @@ public class IndicesRequestCache extends AbstractComponent implements RemovalLis
         @Override
         public int hashCode() {
             int result = shard.hashCode();
-            result = 31 * result + Long.hashCode(readerVersion);
+            result = 31 * result + (int) (readerVersion ^ (readerVersion >>> 32));
             result = 31 * result + value.hashCode();
             return result;
         }
@@ -379,7 +379,7 @@ public class IndicesRequestCache extends AbstractComponent implements RemovalLis
         @Override
         public int hashCode() {
             int result = indexShard.hashCode();
-            result = 31 * result + Long.hashCode(readerVersion);
+            result = 31 * result + (int) (readerVersion ^ (readerVersion >>> 32));
             return result;
         }
     }
diff --git a/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java
index 92bfc87..022c326 100644
--- a/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java
+++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java
@@ -690,8 +690,8 @@ public class RecoveryState implements ToXContent, Streamable {
         @Override
         public int hashCode() {
             int result = name.hashCode();
-            result = 31 * result + Long.hashCode(length);
-            result = 31 * result + Long.hashCode(recovered);
+            result = 31 * result + (int) (length ^ (length >>> 32));
+            result = 31 * result + (int) (recovered ^ (recovered >>> 32));
             result = 31 * result + (reused ? 1 : 0);
             return result;
         }
diff --git a/core/src/main/java/org/elasticsearch/rest/action/RestActionModule.java b/core/src/main/java/org/elasticsearch/rest/action/RestActionModule.java
index 02bde5f..0fa45f0 100644
--- a/core/src/main/java/org/elasticsearch/rest/action/RestActionModule.java
+++ b/core/src/main/java/org/elasticsearch/rest/action/RestActionModule.java
@@ -57,12 +57,12 @@ import org.elasticsearch.rest.action.admin.indices.exists.indices.RestIndicesExi
 import org.elasticsearch.rest.action.admin.indices.exists.types.RestTypesExistsAction;
 import org.elasticsearch.rest.action.admin.indices.flush.RestFlushAction;
 import org.elasticsearch.rest.action.admin.indices.flush.RestSyncedFlushAction;
+import org.elasticsearch.rest.action.admin.indices.forcemerge.RestForceMergeAction;
 import org.elasticsearch.rest.action.admin.indices.get.RestGetIndicesAction;
 import org.elasticsearch.rest.action.admin.indices.mapping.get.RestGetFieldMappingAction;
 import org.elasticsearch.rest.action.admin.indices.mapping.get.RestGetMappingAction;
 import org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction;
 import org.elasticsearch.rest.action.admin.indices.open.RestOpenIndexAction;
-import org.elasticsearch.rest.action.admin.indices.optimize.RestOptimizeAction;
 import org.elasticsearch.rest.action.admin.indices.recovery.RestRecoveryAction;
 import org.elasticsearch.rest.action.admin.indices.refresh.RestRefreshAction;
 import org.elasticsearch.rest.action.admin.indices.segments.RestIndicesSegmentsAction;
@@ -200,7 +200,7 @@ public class RestActionModule extends AbstractModule {
         bind(RestRefreshAction.class).asEagerSingleton();
         bind(RestFlushAction.class).asEagerSingleton();
         bind(RestSyncedFlushAction.class).asEagerSingleton();
-        bind(RestOptimizeAction.class).asEagerSingleton();
+        bind(RestForceMergeAction.class).asEagerSingleton();
         bind(RestUpgradeAction.class).asEagerSingleton();
         bind(RestClearIndicesCacheAction.class).asEagerSingleton();
 
diff --git a/core/src/main/java/org/elasticsearch/rest/action/admin/indices/forcemerge/RestForceMergeAction.java b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/forcemerge/RestForceMergeAction.java
new file mode 100644
index 0000000..37c2b4c
--- /dev/null
+++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/forcemerge/RestForceMergeAction.java
@@ -0,0 +1,77 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.rest.action.admin.indices.forcemerge;
+
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeRequest;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeResponse;
+import org.elasticsearch.action.support.IndicesOptions;
+import org.elasticsearch.client.Client;
+import org.elasticsearch.common.Strings;
+import org.elasticsearch.common.inject.Inject;
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.common.xcontent.XContentBuilder;
+import org.elasticsearch.rest.*;
+import org.elasticsearch.rest.action.support.RestBuilderListener;
+
+import static org.elasticsearch.rest.RestRequest.Method.GET;
+import static org.elasticsearch.rest.RestRequest.Method.POST;
+import static org.elasticsearch.rest.RestStatus.OK;
+import static org.elasticsearch.rest.action.support.RestActions.buildBroadcastShardsHeader;
+
+/**
+ *
+ */
+public class RestForceMergeAction extends BaseRestHandler {
+
+    @Inject
+    public RestForceMergeAction(Settings settings, RestController controller, Client client) {
+        super(settings, controller, client);
+        controller.registerHandler(POST, "/_forcemerge", this);
+        controller.registerHandler(POST, "/{index}/_forcemerge", this);
+
+        controller.registerHandler(GET, "/_forcemerge", this);
+        controller.registerHandler(GET, "/{index}/_forcemerge", this);
+
+        // TODO: Remove for 3.0
+        controller.registerHandler(POST, "/_optimize", this);
+        controller.registerHandler(POST, "/{index}/_optimize", this);
+
+        controller.registerHandler(GET, "/_optimize", this);
+        controller.registerHandler(GET, "/{index}/_optimize", this);
+    }
+
+    @Override
+    public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) {
+        ForceMergeRequest mergeRequest = new ForceMergeRequest(Strings.splitStringByCommaToArray(request.param("index")));
+        mergeRequest.indicesOptions(IndicesOptions.fromRequest(request, mergeRequest.indicesOptions()));
+        mergeRequest.maxNumSegments(request.paramAsInt("max_num_segments", mergeRequest.maxNumSegments()));
+        mergeRequest.onlyExpungeDeletes(request.paramAsBoolean("only_expunge_deletes", mergeRequest.onlyExpungeDeletes()));
+        mergeRequest.flush(request.paramAsBoolean("flush", mergeRequest.flush()));
+        client.admin().indices().forceMerge(mergeRequest, new RestBuilderListener<ForceMergeResponse>(channel) {
+            @Override
+            public RestResponse buildResponse(ForceMergeResponse response, XContentBuilder builder) throws Exception {
+                builder.startObject();
+                buildBroadcastShardsHeader(builder, request, response);
+                builder.endObject();
+                return new BytesRestResponse(OK, builder);
+            }
+        });
+    }
+}
diff --git a/core/src/main/java/org/elasticsearch/rest/action/admin/indices/optimize/RestOptimizeAction.java b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/optimize/RestOptimizeAction.java
deleted file mode 100644
index 3ecafae..0000000
--- a/core/src/main/java/org/elasticsearch/rest/action/admin/indices/optimize/RestOptimizeAction.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.elasticsearch.rest.action.admin.indices.optimize;
-
-import org.elasticsearch.action.admin.indices.optimize.OptimizeRequest;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeResponse;
-import org.elasticsearch.action.support.IndicesOptions;
-import org.elasticsearch.client.Client;
-import org.elasticsearch.common.Strings;
-import org.elasticsearch.common.inject.Inject;
-import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.common.xcontent.XContentBuilder;
-import org.elasticsearch.rest.*;
-import org.elasticsearch.rest.action.support.RestBuilderListener;
-
-import static org.elasticsearch.rest.RestRequest.Method.GET;
-import static org.elasticsearch.rest.RestRequest.Method.POST;
-import static org.elasticsearch.rest.RestStatus.OK;
-import static org.elasticsearch.rest.action.support.RestActions.buildBroadcastShardsHeader;
-
-/**
- *
- */
-public class RestOptimizeAction extends BaseRestHandler {
-
-    @Inject
-    public RestOptimizeAction(Settings settings, RestController controller, Client client) {
-        super(settings, controller, client);
-        controller.registerHandler(POST, "/_optimize", this);
-        controller.registerHandler(POST, "/{index}/_optimize", this);
-
-        controller.registerHandler(GET, "/_optimize", this);
-        controller.registerHandler(GET, "/{index}/_optimize", this);
-    }
-
-    @Override
-    public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) {
-        OptimizeRequest optimizeRequest = new OptimizeRequest(Strings.splitStringByCommaToArray(request.param("index")));
-        optimizeRequest.indicesOptions(IndicesOptions.fromRequest(request, optimizeRequest.indicesOptions()));
-        optimizeRequest.maxNumSegments(request.paramAsInt("max_num_segments", optimizeRequest.maxNumSegments()));
-        optimizeRequest.onlyExpungeDeletes(request.paramAsBoolean("only_expunge_deletes", optimizeRequest.onlyExpungeDeletes()));
-        optimizeRequest.flush(request.paramAsBoolean("flush", optimizeRequest.flush()));
-        client.admin().indices().optimize(optimizeRequest, new RestBuilderListener<OptimizeResponse>(channel) {
-            @Override
-            public RestResponse buildResponse(OptimizeResponse response, XContentBuilder builder) throws Exception {
-                builder.startObject();
-                buildBroadcastShardsHeader(builder, request, response);
-                builder.endObject();
-                return new BytesRestResponse(OK, builder);
-            }
-        });
-    }
-}
diff --git a/core/src/main/java/org/elasticsearch/rest/action/cat/RestThreadPoolAction.java b/core/src/main/java/org/elasticsearch/rest/action/cat/RestThreadPoolAction.java
index f1684d0..311c4ec 100644
--- a/core/src/main/java/org/elasticsearch/rest/action/cat/RestThreadPoolAction.java
+++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestThreadPoolAction.java
@@ -62,7 +62,7 @@ public class RestThreadPoolAction extends AbstractCatAction {
             ThreadPool.Names.GET,
             ThreadPool.Names.INDEX,
             ThreadPool.Names.MANAGEMENT,
-            ThreadPool.Names.OPTIMIZE,
+            ThreadPool.Names.FORCE_MERGE,
             ThreadPool.Names.PERCOLATE,
             ThreadPool.Names.REFRESH,
             ThreadPool.Names.SEARCH,
@@ -78,7 +78,7 @@ public class RestThreadPoolAction extends AbstractCatAction {
             "g",
             "i",
             "ma",
-            "o",
+            "fm",
             "p",
             "r",
             "s",
diff --git a/core/src/main/java/org/elasticsearch/snapshots/Snapshot.java b/core/src/main/java/org/elasticsearch/snapshots/Snapshot.java
index d4311ca..d7e0a06 100644
--- a/core/src/main/java/org/elasticsearch/snapshots/Snapshot.java
+++ b/core/src/main/java/org/elasticsearch/snapshots/Snapshot.java
@@ -227,7 +227,7 @@ public class Snapshot implements Comparable<Snapshot>, ToXContent, FromXContentB
     @Override
     public int hashCode() {
         int result = name.hashCode();
-        result = 31 * result + Long.hashCode(startTime);
+        result = 31 * result + (int) (startTime ^ (startTime >>> 32));
         return result;
     }
 
diff --git a/core/src/main/java/org/elasticsearch/threadpool/ThreadPool.java b/core/src/main/java/org/elasticsearch/threadpool/ThreadPool.java
index d20f600..039b46b 100644
--- a/core/src/main/java/org/elasticsearch/threadpool/ThreadPool.java
+++ b/core/src/main/java/org/elasticsearch/threadpool/ThreadPool.java
@@ -81,7 +81,7 @@ public class ThreadPool extends AbstractComponent {
         public static final String REFRESH = "refresh";
         public static final String WARMER = "warmer";
         public static final String SNAPSHOT = "snapshot";
-        public static final String OPTIMIZE = "optimize";
+        public static final String FORCE_MERGE = "force_merge";
         public static final String FETCH_SHARD_STARTED = "fetch_shard_started";
         public static final String FETCH_SHARD_STORE = "fetch_shard_store";
     }
@@ -143,7 +143,7 @@ public class ThreadPool extends AbstractComponent {
                 settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build());
         defaultExecutorTypeSettings.put(Names.SNAPSHOT,
                 settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build());
-        defaultExecutorTypeSettings.put(Names.OPTIMIZE, settingsBuilder().put("type", "fixed").put("size", 1).build());
+        defaultExecutorTypeSettings.put(Names.FORCE_MERGE, settingsBuilder().put("type", "fixed").put("size", 1).build());
         defaultExecutorTypeSettings.put(Names.FETCH_SHARD_STARTED,
                 settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", availableProcessors * 2).build());
         defaultExecutorTypeSettings.put(Names.FETCH_SHARD_STORE,
diff --git a/core/src/test/java/org/apache/lucene/analysis/miscellaneous/TruncateTokenFilterTests.java b/core/src/test/java/org/apache/lucene/analysis/miscellaneous/TruncateTokenFilterTests.java
index 3c77142..6a563af 100644
--- a/core/src/test/java/org/apache/lucene/analysis/miscellaneous/TruncateTokenFilterTests.java
+++ b/core/src/test/java/org/apache/lucene/analysis/miscellaneous/TruncateTokenFilterTests.java
@@ -25,6 +25,7 @@ import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -33,7 +34,9 @@ import static org.hamcrest.Matchers.equalTo;
  */
 
 public class TruncateTokenFilterTests extends ESTestCase {
-    public void testSimple() throws IOException {
+
+    @Test
+    public void simpleTest() throws IOException {
         Analyzer analyzer = new Analyzer() {
             @Override
             protected TokenStreamComponents createComponents(String fieldName) {
diff --git a/core/src/test/java/org/apache/lucene/analysis/miscellaneous/UniqueTokenFilterTests.java b/core/src/test/java/org/apache/lucene/analysis/miscellaneous/UniqueTokenFilterTests.java
index 7756933..25c4a68 100644
--- a/core/src/test/java/org/apache/lucene/analysis/miscellaneous/UniqueTokenFilterTests.java
+++ b/core/src/test/java/org/apache/lucene/analysis/miscellaneous/UniqueTokenFilterTests.java
@@ -25,6 +25,7 @@ import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -33,7 +34,9 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public class UniqueTokenFilterTests extends ESTestCase {
-    public void testSimple() throws IOException {
+
+    @Test
+    public void simpleTest() throws IOException {
         Analyzer analyzer = new Analyzer() {
             @Override
             protected TokenStreamComponents createComponents(String fieldName) {
diff --git a/core/src/test/java/org/apache/lucene/queries/BlendedTermQueryTests.java b/core/src/test/java/org/apache/lucene/queries/BlendedTermQueryTests.java
index 0f29ed5..91eaeb2 100644
--- a/core/src/test/java/org/apache/lucene/queries/BlendedTermQueryTests.java
+++ b/core/src/test/java/org/apache/lucene/queries/BlendedTermQueryTests.java
@@ -23,32 +23,18 @@ import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.TextField;
-import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.IndexOptions;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.MultiReader;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.search.BooleanClause;
-import org.apache.lucene.search.BooleanQuery;
-import org.apache.lucene.search.DisjunctionMaxQuery;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.QueryUtils;
-import org.apache.lucene.search.ScoreDoc;
-import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.index.*;
+import org.apache.lucene.search.*;
 import org.apache.lucene.search.similarities.BM25Similarity;
 import org.apache.lucene.search.similarities.DefaultSimilarity;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.TestUtil;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
 
 import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.hamcrest.Matchers.equalTo;
@@ -56,6 +42,8 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public class BlendedTermQueryTests extends ESTestCase {
+
+    @Test
     public void testBooleanQuery() throws IOException {
         Directory dir = newDirectory();
         IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
@@ -109,6 +97,7 @@ public class BlendedTermQueryTests extends ESTestCase {
 
     }
 
+    @Test
     public void testDismaxQuery() throws IOException {
         Directory dir = newDirectory();
         IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));
@@ -182,6 +171,7 @@ public class BlendedTermQueryTests extends ESTestCase {
         dir.close();
     }
 
+    @Test
     public void testBasics() {
         final int iters = scaledRandomIntBetween(5, 25);
         for (int j = 0; j < iters; j++) {
@@ -219,6 +209,7 @@ public class BlendedTermQueryTests extends ESTestCase {
         return searcher;
     }
 
+    @Test
     public void testExtractTerms() throws IOException {
         Set<Term> terms = new HashSet<>();
         int num = scaledRandomIntBetween(1, 10);
diff --git a/core/src/test/java/org/apache/lucene/search/postingshighlight/CustomPassageFormatterTests.java b/core/src/test/java/org/apache/lucene/search/postingshighlight/CustomPassageFormatterTests.java
index fcddc58..dc176ae 100644
--- a/core/src/test/java/org/apache/lucene/search/postingshighlight/CustomPassageFormatterTests.java
+++ b/core/src/test/java/org/apache/lucene/search/postingshighlight/CustomPassageFormatterTests.java
@@ -23,12 +23,16 @@ import org.apache.lucene.search.highlight.DefaultEncoder;
 import org.apache.lucene.search.highlight.SimpleHTMLEncoder;
 import org.apache.lucene.util.BytesRef;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.notNullValue;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 
 public class CustomPassageFormatterTests extends ESTestCase {
+
+    @Test
     public void testSimpleFormat() {
         String content = "This is a really cool highlighter. Postings highlighter gives nice snippets back. No matches here.";
 
@@ -70,6 +74,7 @@ public class CustomPassageFormatterTests extends ESTestCase {
         assertThat(fragments[2].isHighlighted(), equalTo(false));
     }
 
+    @Test
     public void testHtmlEncodeFormat() {
         String content = "<b>This is a really cool highlighter.</b> Postings highlighter gives nice snippets back.";
 
diff --git a/core/src/test/java/org/apache/lucene/search/postingshighlight/CustomPostingsHighlighterTests.java b/core/src/test/java/org/apache/lucene/search/postingshighlight/CustomPostingsHighlighterTests.java
index 737b3df..58728d8 100644
--- a/core/src/test/java/org/apache/lucene/search/postingshighlight/CustomPostingsHighlighterTests.java
+++ b/core/src/test/java/org/apache/lucene/search/postingshighlight/CustomPostingsHighlighterTests.java
@@ -24,25 +24,21 @@ import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.TextField;
-import org.apache.lucene.index.IndexOptions;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexWriterConfig;
-import org.apache.lucene.index.RandomIndexWriter;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.Sort;
-import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.index.*;
+import org.apache.lucene.search.*;
 import org.apache.lucene.search.highlight.DefaultEncoder;
 import org.apache.lucene.store.Directory;
 import org.elasticsearch.search.highlight.HighlightUtils;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 
 public class CustomPostingsHighlighterTests extends ESTestCase {
+
+    @Test
     public void testCustomPostingsHighlighter() throws Exception {
+
         Directory dir = newDirectory();
         IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));
         iwc.setMergePolicy(newLogMergePolicy());
@@ -110,6 +106,7 @@ public class CustomPostingsHighlighterTests extends ESTestCase {
         dir.close();
     }
 
+    @Test
     public void testNoMatchSize() throws Exception {
         Directory dir = newDirectory();
         IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));
diff --git a/core/src/test/java/org/apache/lucene/search/postingshighlight/CustomSeparatorBreakIteratorTests.java b/core/src/test/java/org/apache/lucene/search/postingshighlight/CustomSeparatorBreakIteratorTests.java
index ac3a243..1be578f 100644
--- a/core/src/test/java/org/apache/lucene/search/postingshighlight/CustomSeparatorBreakIteratorTests.java
+++ b/core/src/test/java/org/apache/lucene/search/postingshighlight/CustomSeparatorBreakIteratorTests.java
@@ -21,6 +21,7 @@ package org.apache.lucene.search.postingshighlight;
 
 import org.elasticsearch.search.highlight.HighlightUtils;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.text.BreakIterator;
 import java.text.CharacterIterator;
@@ -30,6 +31,8 @@ import java.util.Locale;
 import static org.hamcrest.CoreMatchers.equalTo;
 
 public class CustomSeparatorBreakIteratorTests extends ESTestCase {
+
+    @Test
     public void testBreakOnCustomSeparator() throws Exception {
         Character separator = randomSeparator();
         BreakIterator bi = new CustomSeparatorBreakIterator(separator);
@@ -66,6 +69,7 @@ public class CustomSeparatorBreakIteratorTests extends ESTestCase {
         assertThat(source.substring(0, bi.next(3)), equalTo("this" + separator + "is" + separator + "the" + separator));
     }
 
+    @Test
     public void testSingleSentences() throws Exception {
         BreakIterator expected = BreakIterator.getSentenceInstance(Locale.ROOT);
         BreakIterator actual = new CustomSeparatorBreakIterator(randomSeparator());
@@ -75,6 +79,7 @@ public class CustomSeparatorBreakIteratorTests extends ESTestCase {
         assertSameBreaks("", expected, actual);
     }
 
+    @Test
     public void testSliceEnd() throws Exception {
         BreakIterator expected = BreakIterator.getSentenceInstance(Locale.ROOT);
         BreakIterator actual = new CustomSeparatorBreakIterator(randomSeparator());
@@ -84,6 +89,7 @@ public class CustomSeparatorBreakIteratorTests extends ESTestCase {
         assertSameBreaks("000", 0, 0, expected, actual);
     }
 
+    @Test
     public void testSliceStart() throws Exception {
         BreakIterator expected = BreakIterator.getSentenceInstance(Locale.ROOT);
         BreakIterator actual = new CustomSeparatorBreakIterator(randomSeparator());
@@ -93,6 +99,7 @@ public class CustomSeparatorBreakIteratorTests extends ESTestCase {
         assertSameBreaks("000", 3, 0, expected, actual);
     }
 
+    @Test
     public void testSliceMiddle() throws Exception {
         BreakIterator expected = BreakIterator.getSentenceInstance(Locale.ROOT);
         BreakIterator actual = new CustomSeparatorBreakIterator(randomSeparator());
@@ -103,6 +110,7 @@ public class CustomSeparatorBreakIteratorTests extends ESTestCase {
     }
 
     /** the current position must be ignored, initial position is always first() */
+    @Test
     public void testFirstPosition() throws Exception {
         BreakIterator expected = BreakIterator.getSentenceInstance(Locale.ROOT);
         BreakIterator actual = new CustomSeparatorBreakIterator(randomSeparator());
diff --git a/core/src/test/java/org/apache/lucene/util/SloppyMathTests.java b/core/src/test/java/org/apache/lucene/util/SloppyMathTests.java
index abfc7c0..f7d43fd 100644
--- a/core/src/test/java/org/apache/lucene/util/SloppyMathTests.java
+++ b/core/src/test/java/org/apache/lucene/util/SloppyMathTests.java
@@ -22,10 +22,13 @@ package org.apache.lucene.util;
 import org.elasticsearch.common.geo.GeoDistance;
 import org.elasticsearch.common.unit.DistanceUnit;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.number.IsCloseTo.closeTo;
 
 public class SloppyMathTests extends ESTestCase {
+
+    @Test
     public void testAccuracy() {
         for (double lat1 = -89; lat1 <= 89; lat1+=1) {
             final double lon1 = randomLongitude();
@@ -39,6 +42,7 @@ public class SloppyMathTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSloppyMath() {
         testSloppyMath(DistanceUnit.METERS, 0.01, 5, 45, 90);
         testSloppyMath(DistanceUnit.KILOMETERS, 0.01, 5, 45, 90);
@@ -49,7 +53,7 @@ public class SloppyMathTests extends ESTestCase {
     private static double maxError(double distance) {
         return distance / 1000.0;
     }
-
+    
     private void testSloppyMath(DistanceUnit unit, double...deltaDeg) {
         final double lat1 = randomLatitude();
         final double lon1 = randomLongitude();
@@ -64,12 +68,12 @@ public class SloppyMathTests extends ESTestCase {
 
                 final double accurate = GeoDistance.ARC.calculate(lat1, lon1, lat2, lon2, unit);
                 final double dist = GeoDistance.SLOPPY_ARC.calculate(lat1, lon1, lat2, lon2, unit);
-
+    
                 assertThat("distance between("+lat1+", "+lon1+") and ("+lat2+", "+lon2+"))", dist, closeTo(accurate, maxError(accurate)));
             }
         }
     }
-
+        
     private static void assertAccurate(double lat1, double lon1, double lat2, double lon2) {
         double accurate = GeoDistance.ARC.calculate(lat1, lon1, lat2, lon2, DistanceUnit.METERS);
         double sloppy = GeoDistance.SLOPPY_ARC.calculate(lat1, lon1, lat2, lon2, DistanceUnit.METERS);
diff --git a/core/src/test/java/org/elasticsearch/ESExceptionTests.java b/core/src/test/java/org/elasticsearch/ESExceptionTests.java
index 4d81b34..5bb3bf4 100644
--- a/core/src/test/java/org/elasticsearch/ESExceptionTests.java
+++ b/core/src/test/java/org/elasticsearch/ESExceptionTests.java
@@ -37,7 +37,7 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.common.xcontent.XContentLocation;
 import org.elasticsearch.index.Index;
 import org.elasticsearch.index.IndexNotFoundException;
-import org.elasticsearch.index.query.QueryShardException;
+import org.elasticsearch.index.query.*;
 import org.elasticsearch.rest.RestStatus;
 import org.elasticsearch.search.SearchParseException;
 import org.elasticsearch.search.SearchShardTarget;
@@ -47,6 +47,7 @@ import org.elasticsearch.test.VersionUtils;
 import org.elasticsearch.test.hamcrest.ElasticsearchAssertions;
 import org.elasticsearch.transport.RemoteTransportException;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.EOFException;
 import java.io.FileNotFoundException;
@@ -58,6 +59,7 @@ import static org.hamcrest.Matchers.equalTo;
 public class ESExceptionTests extends ESTestCase {
     private static final ToXContent.Params PARAMS = ToXContent.EMPTY_PARAMS;
 
+    @Test
     public void testStatus() {
         ElasticsearchException exception = new ElasticsearchException("test");
         assertThat(exception.status(), equalTo(RestStatus.INTERNAL_SERVER_ERROR));
diff --git a/core/src/test/java/org/elasticsearch/NamingConventionTests.java b/core/src/test/java/org/elasticsearch/NamingConventionTests.java
index 912f892..40868fc 100644
--- a/core/src/test/java/org/elasticsearch/NamingConventionTests.java
+++ b/core/src/test/java/org/elasticsearch/NamingConventionTests.java
@@ -19,14 +19,15 @@
 package org.elasticsearch;
 
 import junit.framework.TestCase;
-
 import org.apache.lucene.util.LuceneTestCase;
 import org.elasticsearch.common.io.PathUtils;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.ESTokenStreamTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
+import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.net.URISyntaxException;
 import java.nio.file.FileVisitResult;
@@ -90,7 +91,7 @@ public class NamingConventionTests extends ESTestCase {
                             } else if (Modifier.isAbstract(clazz.getModifiers()) == false && Modifier.isInterface(clazz.getModifiers()) == false) {
                                 if (isTestCase(clazz)) {
                                     missingSuffix.add(clazz);
-                                } else if (junit.framework.Test.class.isAssignableFrom(clazz)) {
+                                } else if (junit.framework.Test.class.isAssignableFrom(clazz) || hasTestAnnotation(clazz)) {
                                     pureUnitTest.add(clazz);
                                 }
                             }
@@ -101,6 +102,16 @@ public class NamingConventionTests extends ESTestCase {
                     return FileVisitResult.CONTINUE;
                 }
 
+                private boolean hasTestAnnotation(Class<?> clazz) {
+                    for (Method method : clazz.getDeclaredMethods()) {
+                        if (method.getAnnotation(Test.class) != null) {
+                            return true;
+                        }
+                    }
+                    return false;
+
+                }
+
                 private boolean isTestCase(Class<?> clazz) {
                     return LuceneTestCase.class.isAssignableFrom(clazz);
                 }
@@ -134,6 +145,7 @@ public class NamingConventionTests extends ESTestCase {
         assertTrue(innerClasses.remove(InnerTests.class));
         assertTrue(notImplementing.remove(NotImplementingTests.class));
         assertTrue(pureUnitTest.remove(PlainUnit.class));
+        assertTrue(pureUnitTest.remove(PlainUnitTheSecond.class));
 
         String classesToSubclass = String.join(
                 ",",
@@ -175,4 +187,11 @@ public class NamingConventionTests extends ESTestCase {
     public static final class WrongNameTheSecond extends ESTestCase {}
 
     public static final class PlainUnit extends TestCase {}
+
+    public static final class PlainUnitTheSecond {
+        @Test
+        public void foo() {
+        }
+    }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/VersionTests.java b/core/src/test/java/org/elasticsearch/VersionTests.java
index d79d1ee..3adb6d9 100644
--- a/core/src/test/java/org/elasticsearch/VersionTests.java
+++ b/core/src/test/java/org/elasticsearch/VersionTests.java
@@ -25,6 +25,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.VersionUtils;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.lang.reflect.Modifier;
 import java.util.HashMap;
@@ -35,7 +36,6 @@ import static org.elasticsearch.Version.V_0_20_0;
 import static org.elasticsearch.Version.V_0_90_0;
 import static org.elasticsearch.test.VersionUtils.randomVersion;
 import static org.hamcrest.CoreMatchers.equalTo;
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.sameInstance;
 
@@ -102,41 +102,24 @@ public class VersionTests extends ESTestCase {
         }
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testTooLongVersionFromString() {
-        try {
-            Version.fromString("1.0.0.1.3");
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("needs to contain major, minor, and revision"));
-        }
+        Version.fromString("1.0.0.1.3");
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testTooShortVersionFromString() {
-        try {
-            Version.fromString("1.0");
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("needs to contain major, minor, and revision"));
-        }
-
+        Version.fromString("1.0");
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testWrongVersionFromString() {
-        try {
-            Version.fromString("WRONG.VERSION");
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("needs to contain major, minor, and revision"));
-        }
+        Version.fromString("WRONG.VERSION");
     }
 
+    @Test(expected = IllegalStateException.class)
     public void testVersionNoPresentInSettings() {
-        try {
-            Version.indexCreated(Settings.builder().build());
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalStateException e) {
-            assertThat(e.getMessage(), containsString("[index.version.created] is not present"));
-        }
+        Version.indexCreated(Settings.builder().build());
     }
 
     public void testIndexCreatedVersion() {
diff --git a/core/src/test/java/org/elasticsearch/action/ListenerActionIT.java b/core/src/test/java/org/elasticsearch/action/ListenerActionIT.java
index f68cb76..7d52c6c 100644
--- a/core/src/test/java/org/elasticsearch/action/ListenerActionIT.java
+++ b/core/src/test/java/org/elasticsearch/action/ListenerActionIT.java
@@ -25,6 +25,7 @@ import org.elasticsearch.client.Client;
 import org.elasticsearch.client.transport.TransportClient;
 import org.elasticsearch.cluster.node.DiscoveryNode;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicReference;
@@ -32,7 +33,10 @@ import java.util.concurrent.atomic.AtomicReference;
 /**
  */
 public class ListenerActionIT extends ESIntegTestCase {
-    public void testThreadedListeners() throws Throwable {
+
+    @Test
+    public void verifyThreadedListeners() throws Throwable {
+
         final CountDownLatch latch = new CountDownLatch(1);
         final AtomicReference<Throwable> failure = new AtomicReference<>();
         final AtomicReference<String> threadName = new AtomicReference<>();
diff --git a/core/src/test/java/org/elasticsearch/action/OriginalIndicesTests.java b/core/src/test/java/org/elasticsearch/action/OriginalIndicesTests.java
index a19905c..becdb93 100644
--- a/core/src/test/java/org/elasticsearch/action/OriginalIndicesTests.java
+++ b/core/src/test/java/org/elasticsearch/action/OriginalIndicesTests.java
@@ -23,6 +23,7 @@ import org.elasticsearch.action.support.IndicesOptions;
 import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -35,6 +36,7 @@ public class OriginalIndicesTests extends ESTestCase {
             IndicesOptions.lenientExpandOpen() , IndicesOptions.strictExpand(), IndicesOptions.strictExpandOpen(),
             IndicesOptions.strictExpandOpenAndForbidClosed(), IndicesOptions.strictSingleIndexNoExpandForbidClosed()};
 
+    @Test
     public void testOriginalIndicesSerialization() throws IOException {
         int iterations = iterations(10, 30);
         for (int i = 0; i < iterations; i++) {
diff --git a/core/src/test/java/org/elasticsearch/action/RejectionActionIT.java b/core/src/test/java/org/elasticsearch/action/RejectionActionIT.java
index fb0283d..3c59f67 100644
--- a/core/src/test/java/org/elasticsearch/action/RejectionActionIT.java
+++ b/core/src/test/java/org/elasticsearch/action/RejectionActionIT.java
@@ -29,6 +29,7 @@ import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import java.util.Locale;
 import java.util.concurrent.CopyOnWriteArrayList;
@@ -55,7 +56,8 @@ public class RejectionActionIT extends ESIntegTestCase {
     }
 
 
-    public void testSimulatedSearchRejectionLoad() throws Throwable {
+    @Test
+    public void simulateSearchRejectionLoad() throws Throwable {
         for (int i = 0; i < 10; i++) {
             client().prepareIndex("test", "type", Integer.toString(i)).setSource("field", "1").get();
         }
diff --git a/core/src/test/java/org/elasticsearch/action/admin/HotThreadsIT.java b/core/src/test/java/org/elasticsearch/action/admin/HotThreadsIT.java
index a6217d7..47fcdff 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/HotThreadsIT.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/HotThreadsIT.java
@@ -24,6 +24,7 @@ import org.elasticsearch.action.admin.cluster.node.hotthreads.NodesHotThreadsReq
 import org.elasticsearch.action.admin.cluster.node.hotthreads.NodesHotThreadsResponse;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
@@ -40,6 +41,8 @@ import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.hamcrest.Matchers.lessThan;
 
 public class HotThreadsIT extends ESIntegTestCase {
+
+    @Test
     public void testHotThreadsDontFail() throws ExecutionException, InterruptedException {
         /**
          * This test just checks if nothing crashes or gets stuck etc.
diff --git a/core/src/test/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthResponsesTests.java b/core/src/test/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthResponsesTests.java
index ba3b10e..ec05023 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthResponsesTests.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthResponsesTests.java
@@ -41,6 +41,7 @@ import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.rest.RestStatus;
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -164,6 +165,7 @@ public class ClusterHealthResponsesTests extends ESTestCase {
         return builder.build();
     }
 
+    @Test
     public void testClusterIndexHealth() {
         int numberOfShards = randomInt(3) + 1;
         int numberOfReplicas = randomInt(4);
@@ -198,6 +200,7 @@ public class ClusterHealthResponsesTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testClusterHealth() throws IOException {
         ShardCounter counter = new ShardCounter();
         RoutingTable.Builder routingTable = RoutingTable.builder();
@@ -236,6 +239,7 @@ public class ClusterHealthResponsesTests extends ESTestCase {
         return clusterHealth;
     }
 
+    @Test
     public void testValidations() throws IOException {
         IndexMetaData indexMetaData = IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(2).numberOfReplicas(2).build();
         ShardCounter counter = new ShardCounter();
diff --git a/core/src/test/java/org/elasticsearch/action/admin/cluster/repositories/RepositoryBlocksIT.java b/core/src/test/java/org/elasticsearch/action/admin/cluster/repositories/RepositoryBlocksIT.java
index 9c554da..caa88dd 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/cluster/repositories/RepositoryBlocksIT.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/repositories/RepositoryBlocksIT.java
@@ -25,6 +25,7 @@ import org.elasticsearch.cluster.metadata.MetaData;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
@@ -38,6 +39,8 @@ import static org.hamcrest.Matchers.hasSize;
  */
 @ClusterScope(scope = ESIntegTestCase.Scope.TEST)
 public class RepositoryBlocksIT extends ESIntegTestCase {
+
+    @Test
     public void testPutRepositoryWithBlocks() {
         logger.info("-->  registering a repository is blocked when the cluster is read only");
         try {
@@ -57,6 +60,7 @@ public class RepositoryBlocksIT extends ESIntegTestCase {
                 .setSettings(Settings.settingsBuilder().put("location",  randomRepoPath())));
     }
 
+    @Test
     public void testVerifyRepositoryWithBlocks() {
         assertAcked(client().admin().cluster().preparePutRepository("test-repo-blocks")
                 .setType("fs")
@@ -73,6 +77,7 @@ public class RepositoryBlocksIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testDeleteRepositoryWithBlocks() {
         assertAcked(client().admin().cluster().preparePutRepository("test-repo-blocks")
                 .setType("fs")
@@ -91,6 +96,7 @@ public class RepositoryBlocksIT extends ESIntegTestCase {
         assertAcked(client().admin().cluster().prepareDeleteRepository("test-repo-blocks"));
     }
 
+    @Test
     public void testGetRepositoryWithBlocks() {
         assertAcked(client().admin().cluster().preparePutRepository("test-repo-blocks")
                 .setType("fs")
diff --git a/core/src/test/java/org/elasticsearch/action/admin/cluster/snapshots/SnapshotBlocksIT.java b/core/src/test/java/org/elasticsearch/action/admin/cluster/snapshots/SnapshotBlocksIT.java
index f3a23be..2516310 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/cluster/snapshots/SnapshotBlocksIT.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/snapshots/SnapshotBlocksIT.java
@@ -30,9 +30,10 @@ import org.elasticsearch.rest.RestStatus;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.junit.Before;
+import org.junit.Test;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
 import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
 import static org.hamcrest.Matchers.equalTo;
@@ -84,6 +85,7 @@ public class SnapshotBlocksIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
+    @Test
     public void testCreateSnapshotWithBlocks() {
         logger.info("-->  creating a snapshot is allowed when the cluster is read only");
         try {
@@ -100,6 +102,7 @@ public class SnapshotBlocksIT extends ESIntegTestCase {
         assertThat(response.status(), equalTo(RestStatus.OK));
     }
 
+    @Test
     public void testCreateSnapshotWithIndexBlocks() {
         logger.info("-->  creating a snapshot is not blocked when an index is read only");
         try {
@@ -120,6 +123,7 @@ public class SnapshotBlocksIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testDeleteSnapshotWithBlocks() {
         logger.info("-->  deleting a snapshot is allowed when the cluster is read only");
         try {
@@ -130,6 +134,7 @@ public class SnapshotBlocksIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testRestoreSnapshotWithBlocks() {
         assertAcked(client().admin().indices().prepareDelete(INDEX_NAME, OTHER_INDEX_NAME));
         assertFalse(client().admin().indices().prepareExists(INDEX_NAME, OTHER_INDEX_NAME).get().isExists());
@@ -151,6 +156,7 @@ public class SnapshotBlocksIT extends ESIntegTestCase {
         assertTrue(client().admin().indices().prepareExists(OTHER_INDEX_NAME).get().isExists());
     }
 
+    @Test
     public void testGetSnapshotWithBlocks() {
         // This test checks that the Get Snapshot operation is never blocked, even if the cluster is read only.
         try {
@@ -163,6 +169,7 @@ public class SnapshotBlocksIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testSnapshotStatusWithBlocks() {
         // This test checks that the Snapshot Status operation is never blocked, even if the cluster is read only.
         try {
diff --git a/core/src/test/java/org/elasticsearch/action/admin/cluster/state/ClusterStateRequestTests.java b/core/src/test/java/org/elasticsearch/action/admin/cluster/state/ClusterStateRequestTests.java
index a2d838b..5c06275 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/cluster/state/ClusterStateRequestTests.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/state/ClusterStateRequestTests.java
@@ -21,10 +21,11 @@ package org.elasticsearch.action.admin.cluster.state;
 
 import org.elasticsearch.Version;
 import org.elasticsearch.action.support.IndicesOptions;
-import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamInput;
+import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.VersionUtils;
+import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 
@@ -32,6 +33,8 @@ import static org.hamcrest.CoreMatchers.equalTo;
  * Unit tests for the {@link ClusterStateRequest}.
  */
 public class ClusterStateRequestTests extends ESTestCase {
+
+    @Test
     public void testSerialization() throws Exception {
         int iterations = randomIntBetween(5, 20);
         for (int i = 0; i < iterations; i++) {
diff --git a/core/src/test/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsIT.java b/core/src/test/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsIT.java
index e23ce27..2be808e 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsIT.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsIT.java
@@ -28,12 +28,13 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.store.Store;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.hamcrest.Matchers.is;
 
@@ -54,6 +55,7 @@ public class ClusterStatsIT extends ESIntegTestCase {
         assertThat(actionGet.isTimedOut(), is(false));
     }
 
+    @Test
     public void testNodeCounts() {
         ClusterStatsResponse response = client().admin().cluster().prepareClusterStats().get();
         assertCounts(response.getNodesStats().getCounts(), 1, 0, 0, 1, 0);
@@ -82,6 +84,7 @@ public class ClusterStatsIT extends ESIntegTestCase {
         assertThat(stats.getReplication(), Matchers.equalTo(replicationFactor));
     }
 
+    @Test
     public void testIndicesShardStats() {
         ClusterStatsResponse response = client().admin().cluster().prepareClusterStats().get();
         assertThat(response.getStatus(), Matchers.equalTo(ClusterHealthStatus.GREEN));
@@ -126,6 +129,7 @@ public class ClusterStatsIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testValuesSmokeScreen() throws IOException {
         internalCluster().ensureAtMostNumDataNodes(5);
         internalCluster().ensureAtLeastNumDataNodes(1);
diff --git a/core/src/test/java/org/elasticsearch/action/admin/cluster/tasks/PendingTasksBlocksIT.java b/core/src/test/java/org/elasticsearch/action/admin/cluster/tasks/PendingTasksBlocksIT.java
index 95fa5b2..a02860e 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/cluster/tasks/PendingTasksBlocksIT.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/tasks/PendingTasksBlocksIT.java
@@ -21,16 +21,16 @@ package org.elasticsearch.action.admin.cluster.tasks;
 
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import java.util.Arrays;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 
 @ClusterScope(scope = ESIntegTestCase.Scope.TEST)
 public class PendingTasksBlocksIT extends ESIntegTestCase {
+
+    @Test
     public void testPendingTasksWithBlocks() {
         createIndex("test");
         ensureGreen("test");
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/cache/clear/ClearIndicesCacheBlocksIT.java b/core/src/test/java/org/elasticsearch/action/admin/indices/cache/clear/ClearIndicesCacheBlocksIT.java
index dbc7e5c..deb57cf 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/cache/clear/ClearIndicesCacheBlocksIT.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/cache/clear/ClearIndicesCacheBlocksIT.java
@@ -21,19 +21,19 @@ package org.elasticsearch.action.admin.indices.cache.clear;
 
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import java.util.Arrays;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
 import static org.hamcrest.Matchers.equalTo;
 
 @ClusterScope(scope = ESIntegTestCase.Scope.TEST)
 public class ClearIndicesCacheBlocksIT extends ESIntegTestCase {
+
+    @Test
     public void testClearIndicesCacheWithBlocks() {
         createIndex("test");
         ensureGreen("test");
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/create/CreateIndexIT.java b/core/src/test/java/org/elasticsearch/action/admin/indices/create/CreateIndexIT.java
index bb15421..0871491 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/create/CreateIndexIT.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/create/CreateIndexIT.java
@@ -52,7 +52,7 @@ import static org.hamcrest.core.IsNull.notNullValue;
 
 @ClusterScope(scope = Scope.TEST)
 public class CreateIndexIT extends ESIntegTestCase {
-    public void testCreationDateGiven() {
+    public void testCreationDate_Given() {
         prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_CREATION_DATE, 4l)).get();
         ClusterStateResponse response = client().admin().cluster().prepareState().get();
         ClusterState state = response.getState();
@@ -67,7 +67,7 @@ public class CreateIndexIT extends ESIntegTestCase {
         assertThat(index.getCreationDate(), equalTo(4l));
     }
 
-    public void testCreationDateGenerated() {
+    public void testCreationDate_Generated() {
         long timeBeforeRequest = System.currentTimeMillis();
         prepareCreate("test").get();
         long timeAfterRequest = System.currentTimeMillis();
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestBuilderTests.java b/core/src/test/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestBuilderTests.java
index 9737506..98569b7 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestBuilderTests.java
@@ -26,6 +26,7 @@ import org.elasticsearch.rest.NoOpClient;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -55,6 +56,7 @@ public class CreateIndexRequestBuilderTests extends ESTestCase {
     /**
      * test setting the source with available setters
      */
+    @Test
     public void testSetSource() throws IOException {
         CreateIndexRequestBuilder builder = new CreateIndexRequestBuilder(this.testClient, CreateIndexAction.INSTANCE);
         builder.setSource("{\""+KEY+"\" : \""+VALUE+"\"}");
@@ -80,6 +82,7 @@ public class CreateIndexRequestBuilderTests extends ESTestCase {
     /**
      * test setting the settings with available setters
      */
+    @Test
     public void testSetSettings() throws IOException {
         CreateIndexRequestBuilder builder = new CreateIndexRequestBuilder(this.testClient, CreateIndexAction.INSTANCE);
         builder.setSettings(KEY, VALUE);
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/delete/DeleteIndexBlocksIT.java b/core/src/test/java/org/elasticsearch/action/admin/indices/delete/DeleteIndexBlocksIT.java
index a83c209..85e0072 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/delete/DeleteIndexBlocksIT.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/delete/DeleteIndexBlocksIT.java
@@ -21,11 +21,14 @@ package org.elasticsearch.action.admin.indices.delete;
 
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
 
 @ClusterScope(scope = ESIntegTestCase.Scope.TEST)
 public class DeleteIndexBlocksIT extends ESIntegTestCase {
+
+    @Test
     public void testDeleteIndexWithBlocks() {
         createIndex("test");
         ensureGreen("test");
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/flush/FlushBlocksIT.java b/core/src/test/java/org/elasticsearch/action/admin/indices/flush/FlushBlocksIT.java
index 50d5de4..803262f 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/flush/FlushBlocksIT.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/flush/FlushBlocksIT.java
@@ -21,19 +21,19 @@ package org.elasticsearch.action.admin.indices.flush;
 
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import java.util.Arrays;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
 import static org.hamcrest.Matchers.equalTo;
 
 @ClusterScope(scope = ESIntegTestCase.Scope.TEST)
 public class FlushBlocksIT extends ESIntegTestCase {
+
+    @Test
     public void testFlushWithBlocks() {
         createIndex("test");
         ensureGreen("test");
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/forcemerge/ForceMergeBlocksIT.java b/core/src/test/java/org/elasticsearch/action/admin/indices/forcemerge/ForceMergeBlocksIT.java
new file mode 100644
index 0000000..fe9e159
--- /dev/null
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/forcemerge/ForceMergeBlocksIT.java
@@ -0,0 +1,82 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.action.admin.indices.forcemerge;
+
+import org.elasticsearch.test.ESIntegTestCase;
+import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
+
+import java.util.Arrays;
+
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
+import static org.hamcrest.Matchers.equalTo;
+
+@ClusterScope(scope = ESIntegTestCase.Scope.TEST)
+public class ForceMergeBlocksIT extends ESIntegTestCase {
+
+    @Test
+    public void testForceMergeWithBlocks() {
+        createIndex("test");
+        ensureGreen("test");
+
+        NumShards numShards = getNumShards("test");
+
+        int docs = between(10, 100);
+        for (int i = 0; i < docs; i++) {
+            client().prepareIndex("test", "type", "" + i).setSource("test", "init").execute().actionGet();
+        }
+
+        // Request is not blocked
+        for (String blockSetting : Arrays.asList(SETTING_BLOCKS_READ, SETTING_BLOCKS_WRITE)) {
+            try {
+                enableIndexBlock("test", blockSetting);
+                ForceMergeResponse response = client().admin().indices().prepareForceMerge("test").execute().actionGet();
+                assertNoFailures(response);
+                assertThat(response.getSuccessfulShards(), equalTo(numShards.totalNumShards));
+            } finally {
+                disableIndexBlock("test", blockSetting);
+            }
+        }
+
+        // Request is blocked
+        for (String blockSetting : Arrays.asList(SETTING_READ_ONLY, SETTING_BLOCKS_METADATA)) {
+            try {
+                enableIndexBlock("test", blockSetting);
+                assertBlocked(client().admin().indices().prepareForceMerge("test"));
+            } finally {
+                disableIndexBlock("test", blockSetting);
+            }
+        }
+
+        // Merging all indices is blocked when the cluster is read-only
+        try {
+            ForceMergeResponse response = client().admin().indices().prepareForceMerge().execute().actionGet();
+            assertNoFailures(response);
+            assertThat(response.getSuccessfulShards(), equalTo(numShards.totalNumShards));
+
+            setClusterReadOnly(true);
+            assertBlocked(client().admin().indices().prepareForceMerge());
+        } finally {
+            setClusterReadOnly(false);
+        }
+    }
+}
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/get/GetIndexIT.java b/core/src/test/java/org/elasticsearch/action/admin/indices/get/GetIndexIT.java
index e878a3d..9484c5e 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/get/GetIndexIT.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/get/GetIndexIT.java
@@ -28,25 +28,22 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.IndexNotFoundException;
 import org.elasticsearch.search.warmer.IndexWarmersMetaData.Entry;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
-import static org.hamcrest.Matchers.anyOf;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.*;
 
 @ESIntegTestCase.SuiteScopeTestCase
 public class GetIndexIT extends ESIntegTestCase {
+
+    private static final String[] allFeatures = { "_alias", "_aliases", "_mapping", "_mappings", "_settings", "_warmer", "_warmers" };
+
     @Override
     protected void setupSuiteScopeCluster() throws Exception {
         assertAcked(prepareCreate("idx").addAlias(new Alias("alias_idx")).addMapping("type1", "{\"type1\":{}}")
@@ -57,6 +54,7 @@ public class GetIndexIT extends ESIntegTestCase {
         ensureSearchable("idx", "empty_idx");
     }
 
+    @Test
     public void testSimple() {
         GetIndexResponse response = client().admin().indices().prepareGetIndex().addIndices("idx").get();
         String[] indices = response.indices();
@@ -69,15 +67,12 @@ public class GetIndexIT extends ESIntegTestCase {
         assertWarmers(response, "idx");
     }
 
+    @Test(expected=IndexNotFoundException.class)
     public void testSimpleUnknownIndex() {
-        try {
-            client().admin().indices().prepareGetIndex().addIndices("missing_idx").get();
-            fail("Expected IndexNotFoundException");
-        } catch (IndexNotFoundException e) {
-            assertThat(e.getMessage(), is("no such index"));
-        }
+        client().admin().indices().prepareGetIndex().addIndices("missing_idx").get();
     }
 
+    @Test
     public void testEmpty() {
         GetIndexResponse response = client().admin().indices().prepareGetIndex().addIndices("empty_idx").get();
         String[] indices = response.indices();
@@ -90,6 +85,7 @@ public class GetIndexIT extends ESIntegTestCase {
         assertEmptyWarmers(response);
     }
 
+    @Test
     public void testSimpleMapping() {
         GetIndexResponse response = runWithRandomFeatureMethod(client().admin().indices().prepareGetIndex().addIndices("idx"),
                 Feature.MAPPINGS);
@@ -103,6 +99,7 @@ public class GetIndexIT extends ESIntegTestCase {
         assertEmptyWarmers(response);
     }
 
+    @Test
     public void testSimpleAlias() {
         GetIndexResponse response = runWithRandomFeatureMethod(client().admin().indices().prepareGetIndex().addIndices("idx"),
                 Feature.ALIASES);
@@ -116,6 +113,7 @@ public class GetIndexIT extends ESIntegTestCase {
         assertEmptyWarmers(response);
     }
 
+    @Test
     public void testSimpleSettings() {
         GetIndexResponse response = runWithRandomFeatureMethod(client().admin().indices().prepareGetIndex().addIndices("idx"),
                 Feature.SETTINGS);
@@ -129,6 +127,7 @@ public class GetIndexIT extends ESIntegTestCase {
         assertEmptyWarmers(response);
     }
 
+    @Test
     public void testSimpleWarmer() {
         GetIndexResponse response = runWithRandomFeatureMethod(client().admin().indices().prepareGetIndex().addIndices("idx"),
                 Feature.WARMERS);
@@ -142,6 +141,7 @@ public class GetIndexIT extends ESIntegTestCase {
         assertEmptySettings(response);
     }
 
+    @Test
     public void testSimpleMixedFeatures() {
         int numFeatures = randomIntBetween(1, Feature.values().length);
         List<Feature> features = new ArrayList<Feature>(numFeatures);
@@ -176,6 +176,7 @@ public class GetIndexIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testEmptyMixedFeatures() {
         int numFeatures = randomIntBetween(1, Feature.values().length);
         List<Feature> features = new ArrayList<Feature>(numFeatures);
@@ -202,6 +203,7 @@ public class GetIndexIT extends ESIntegTestCase {
         assertEmptyWarmers(response);
     }
 
+    @Test
     public void testGetIndexWithBlocks() {
         for (String block : Arrays.asList(SETTING_BLOCKS_READ, SETTING_BLOCKS_WRITE, SETTING_READ_ONLY)) {
             try {
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/optimize/OptimizeBlocksIT.java b/core/src/test/java/org/elasticsearch/action/admin/indices/optimize/OptimizeBlocksIT.java
deleted file mode 100644
index cfe2c2c..0000000
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/optimize/OptimizeBlocksIT.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.elasticsearch.action.admin.indices.optimize;
-
-import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-
-import java.util.Arrays;
-
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.hamcrest.Matchers.equalTo;
-
-@ClusterScope(scope = ESIntegTestCase.Scope.TEST)
-public class OptimizeBlocksIT extends ESIntegTestCase {
-    public void testOptimizeWithBlocks() {
-        createIndex("test");
-        ensureGreen("test");
-
-        NumShards numShards = getNumShards("test");
-
-        int docs = between(10, 100);
-        for (int i = 0; i < docs; i++) {
-            client().prepareIndex("test", "type", "" + i).setSource("test", "init").execute().actionGet();
-        }
-
-        // Request is not blocked
-        for (String blockSetting : Arrays.asList(SETTING_BLOCKS_READ, SETTING_BLOCKS_WRITE)) {
-            try {
-                enableIndexBlock("test", blockSetting);
-                OptimizeResponse response = client().admin().indices().prepareOptimize("test").execute().actionGet();
-                assertNoFailures(response);
-                assertThat(response.getSuccessfulShards(), equalTo(numShards.totalNumShards));
-            } finally {
-                disableIndexBlock("test", blockSetting);
-            }
-        }
-
-        // Request is blocked
-        for (String blockSetting : Arrays.asList(SETTING_READ_ONLY, SETTING_BLOCKS_METADATA)) {
-            try {
-                enableIndexBlock("test", blockSetting);
-                assertBlocked(client().admin().indices().prepareOptimize("test"));
-            } finally {
-                disableIndexBlock("test", blockSetting);
-            }
-        }
-
-        // Optimizing all indices is blocked when the cluster is read-only
-        try {
-            OptimizeResponse response = client().admin().indices().prepareOptimize().execute().actionGet();
-            assertNoFailures(response);
-            assertThat(response.getSuccessfulShards(), equalTo(numShards.totalNumShards));
-
-            setClusterReadOnly(true);
-            assertBlocked(client().admin().indices().prepareOptimize());
-        } finally {
-            setClusterReadOnly(false);
-        }
-    }
-}
\ No newline at end of file
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/refresh/RefreshBlocksIT.java b/core/src/test/java/org/elasticsearch/action/admin/indices/refresh/RefreshBlocksIT.java
index 33e0301..5815ce8 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/refresh/RefreshBlocksIT.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/refresh/RefreshBlocksIT.java
@@ -22,19 +22,19 @@ package org.elasticsearch.action.admin.indices.refresh;
 
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import java.util.Arrays;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
 import static org.hamcrest.Matchers.equalTo;
 
 @ClusterScope(scope = ESIntegTestCase.Scope.TEST)
 public class RefreshBlocksIT extends ESIntegTestCase {
+
+    @Test
     public void testRefreshWithBlocks() {
         createIndex("test");
         ensureGreen("test");
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/segments/IndicesSegmentsBlocksIT.java b/core/src/test/java/org/elasticsearch/action/admin/indices/segments/IndicesSegmentsBlocksIT.java
index 035c760..fcb7a50 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/segments/IndicesSegmentsBlocksIT.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/segments/IndicesSegmentsBlocksIT.java
@@ -21,18 +21,18 @@ package org.elasticsearch.action.admin.indices.segments;
 
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import java.util.Arrays;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
 
 @ClusterScope(scope = ESIntegTestCase.Scope.TEST)
 public class IndicesSegmentsBlocksIT extends ESIntegTestCase {
+
+    @Test
     public void testIndicesSegmentsWithBlocks() {
         createIndex("test-blocks");
         ensureGreen("test-blocks");
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/segments/IndicesSegmentsRequestTests.java b/core/src/test/java/org/elasticsearch/action/admin/indices/segments/IndicesSegmentsRequestTests.java
index 011ce81..9db47f6 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/segments/IndicesSegmentsRequestTests.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/segments/IndicesSegmentsRequestTests.java
@@ -22,16 +22,14 @@ package org.elasticsearch.action.admin.indices.segments;
 import org.elasticsearch.action.support.IndicesOptions;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.engine.Segment;
-import org.elasticsearch.indices.IndexClosedException;
 import org.elasticsearch.test.ESSingleNodeTestCase;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.List;
 
-import static org.hamcrest.Matchers.is;
-
 public class IndicesSegmentsRequestTests extends ESSingleNodeTestCase {
-
+    
     @Before
     public void setupIndex() {
         Settings settings = Settings.builder()
@@ -53,7 +51,7 @@ public class IndicesSegmentsRequestTests extends ESSingleNodeTestCase {
         List<Segment> segments = rsp.getIndices().get("test").iterator().next().getShards()[0].getSegments();
         assertNull(segments.get(0).ramTree);
     }
-
+    
     public void testVerbose() {
         IndicesSegmentResponse rsp = client().admin().indices().prepareSegments("test").setVerbose(true).get();
         List<Segment> segments = rsp.getIndices().get("test").iterator().next().getShards()[0].getSegments();
@@ -63,14 +61,10 @@ public class IndicesSegmentsRequestTests extends ESSingleNodeTestCase {
     /**
      * with the default IndicesOptions inherited from BroadcastOperationRequest this will raise an exception
      */
+    @Test(expected=org.elasticsearch.indices.IndexClosedException.class)
     public void testRequestOnClosedIndex() {
         client().admin().indices().prepareClose("test").get();
-        try {
-            client().admin().indices().prepareSegments("test").get();
-            fail("Expected IndexClosedException");
-        } catch (IndexClosedException e) {
-            assertThat(e.getMessage(), is("closed"));
-        }
+        client().admin().indices().prepareSegments("test").get();
     }
 
     /**
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoreRequestIT.java b/core/src/test/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoreRequestIT.java
index 8d5fb65..de9eada 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoreRequestIT.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoreRequestIT.java
@@ -20,16 +20,14 @@
 package org.elasticsearch.action.admin.indices.shards;
 
 import com.carrotsearch.hppc.cursors.IntObjectCursor;
-import com.carrotsearch.hppc.cursors.ObjectCursor;
 
+import com.carrotsearch.hppc.cursors.ObjectCursor;
 import org.apache.lucene.index.CorruptIndexException;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.client.Requests;
 import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
-import org.elasticsearch.cluster.routing.IndexRoutingTable;
-import org.elasticsearch.cluster.routing.ShardRouting;
-import org.elasticsearch.cluster.routing.ShardRoutingState;
+import org.elasticsearch.cluster.routing.*;
 import org.elasticsearch.common.collect.ImmutableOpenIntMap;
 import org.elasticsearch.common.collect.ImmutableOpenMap;
 import org.elasticsearch.common.settings.Settings;
@@ -39,31 +37,27 @@ import org.elasticsearch.indices.IndicesService;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.elasticsearch.test.store.MockFSDirectoryService;
+import org.junit.Test;
 
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 import java.util.concurrent.ExecutionException;
 import java.util.function.Predicate;
 
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoTimeout;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST)
 public class IndicesShardStoreRequestIT extends ESIntegTestCase {
+
+    @Test
     public void testEmpty() {
         ensureGreen();
         IndicesShardStoresResponse rsp = client().admin().indices().prepareShardStores().get();
         assertThat(rsp.getStoreStatuses().size(), equalTo(0));
     }
 
+    @Test
     @TestLogging("action.admin.indices.shards:TRACE,cluster.service:TRACE")
     public void testBasic() throws Exception {
         String index = "test";
@@ -114,6 +108,7 @@ public class IndicesShardStoreRequestIT extends ESIntegTestCase {
         enableAllocation(index);
     }
 
+    @Test
     public void testIndices() throws Exception {
         String index1 = "test1";
         String index2 = "test2";
@@ -142,6 +137,7 @@ public class IndicesShardStoreRequestIT extends ESIntegTestCase {
         assertThat(shardStatuses.get(index1).size(), equalTo(2));
     }
 
+    @Test
     @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/12416")
     public void testCorruptedShards() throws Exception {
         String index = "test";
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoreResponseTests.java b/core/src/test/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoreResponseTests.java
index c862583..777555f 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoreResponseTests.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoreResponseTests.java
@@ -26,24 +26,19 @@ import org.elasticsearch.common.bytes.BytesReference;
 import org.elasticsearch.common.collect.ImmutableOpenIntMap;
 import org.elasticsearch.common.collect.ImmutableOpenMap;
 import org.elasticsearch.common.transport.DummyTransportAddress;
-import org.elasticsearch.common.xcontent.ToXContent;
-import org.elasticsearch.common.xcontent.XContentBuilder;
-import org.elasticsearch.common.xcontent.XContentFactory;
-import org.elasticsearch.common.xcontent.XContentParser;
-import org.elasticsearch.common.xcontent.XContentType;
+import org.elasticsearch.common.xcontent.*;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.transport.NodeDisconnectedException;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
 import static org.hamcrest.Matchers.equalTo;
 
 public class IndicesShardStoreResponseTests extends ESTestCase {
+
+    @Test
     public void testBasicSerialization() throws Exception {
         ImmutableOpenMap.Builder<String, ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>>> indexStoreStatuses = ImmutableOpenMap.builder();
         List<IndicesShardStoresResponse.Failure> failures = new ArrayList<>();
@@ -109,6 +104,7 @@ public class IndicesShardStoreResponseTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testStoreStatusOrdering() throws Exception {
         DiscoveryNode node1 = new DiscoveryNode("node1", DummyTransportAddress.INSTANCE, Version.CURRENT);
         List<IndicesShardStoresResponse.StoreStatus> orderedStoreStatuses = new ArrayList<>();
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsBlocksIT.java b/core/src/test/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsBlocksIT.java
index 25fdb7a..125c4e4 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsBlocksIT.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsBlocksIT.java
@@ -23,15 +23,16 @@ import org.elasticsearch.cluster.block.ClusterBlockException;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import java.util.Arrays;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 
 @ClusterScope(scope = ESIntegTestCase.Scope.TEST)
 public class IndicesStatsBlocksIT extends ESIntegTestCase {
+
+    @Test
     public void testIndicesStatsWithBlocks() {
         createIndex("ro");
         ensureGreen("ro");
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/template/put/MetaDataIndexTemplateServiceTests.java b/core/src/test/java/org/elasticsearch/action/admin/indices/template/put/MetaDataIndexTemplateServiceTests.java
index 4abb43e..9c9802d 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/template/put/MetaDataIndexTemplateServiceTests.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/template/put/MetaDataIndexTemplateServiceTests.java
@@ -27,6 +27,7 @@ import org.elasticsearch.cluster.metadata.MetaDataIndexTemplateService.PutReques
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.indices.InvalidIndexTemplateException;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -38,6 +39,7 @@ import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.instanceOf;
 
 public class MetaDataIndexTemplateServiceTests extends ESTestCase {
+    @Test
     public void testIndexTemplateInvalidNumberOfShards() {
         PutRequest request = new PutRequest("test", "test_shards");
         request.template("test_shards*");
@@ -52,6 +54,7 @@ public class MetaDataIndexTemplateServiceTests extends ESTestCase {
         assertThat(throwables.get(0).getMessage(), containsString("index must have 1 or more primary shards"));
     }
 
+    @Test
     public void testIndexTemplateValidationAccumulatesValidationErrors() {
         PutRequest request = new PutRequest("test", "putTemplate shards");
         request.template("_test_shards*");
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/warmer/put/PutWarmerRequestTests.java b/core/src/test/java/org/elasticsearch/action/admin/indices/warmer/put/PutWarmerRequestTests.java
index f20564e..1a17a4c 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/warmer/put/PutWarmerRequestTests.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/warmer/put/PutWarmerRequestTests.java
@@ -20,12 +20,14 @@ package org.elasticsearch.action.admin.indices.warmer.put;
 
 import org.elasticsearch.action.ActionRequestValidationException;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.Matchers.hasSize;
 
 public class PutWarmerRequestTests extends ESTestCase {
-    // issue 4196
+
+    @Test // issue 4196
     public void testThatValidationWithoutSpecifyingSearchRequestFails() {
         PutWarmerRequest putWarmerRequest = new PutWarmerRequest("foo");
         ActionRequestValidationException validationException = putWarmerRequest.validate();
diff --git a/core/src/test/java/org/elasticsearch/action/bulk/BulkIntegrationIT.java b/core/src/test/java/org/elasticsearch/action/bulk/BulkIntegrationIT.java
index 4300a62..7d946ed 100644
--- a/core/src/test/java/org/elasticsearch/action/bulk/BulkIntegrationIT.java
+++ b/core/src/test/java/org/elasticsearch/action/bulk/BulkIntegrationIT.java
@@ -20,14 +20,17 @@
 
 package org.elasticsearch.action.bulk;
 
+import java.nio.charset.StandardCharsets;
+
 import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse;
 import org.elasticsearch.test.ESIntegTestCase;
-
-import java.nio.charset.StandardCharsets;
+import org.junit.Test;
 
 import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;
 
 public class BulkIntegrationIT extends ESIntegTestCase {
+
+    @Test
     public void testBulkIndexCreatesMapping() throws Exception {
         String bulkAction = copyToStringFromClasspath("/org/elasticsearch/action/bulk/bulk-log.json");
         BulkRequestBuilder bulkBuilder = client().prepareBulk();
diff --git a/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorClusterSettingsIT.java b/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorClusterSettingsIT.java
index 35fb73b..b26a10f 100644
--- a/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorClusterSettingsIT.java
+++ b/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorClusterSettingsIT.java
@@ -23,9 +23,12 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0)
 public class BulkProcessorClusterSettingsIT extends ESIntegTestCase {
+
+    @Test
     public void testBulkProcessorAutoCreateRestrictions() throws Exception {
         // See issue #8125
         Settings settings = Settings.settingsBuilder().put("action.auto_create_index", false).build();
diff --git a/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorIT.java b/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorIT.java
index ded2abb..dd39f85 100644
--- a/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorIT.java
+++ b/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorIT.java
@@ -33,6 +33,7 @@ import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.common.unit.ByteSizeValue;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.HashSet;
@@ -44,16 +45,13 @@ import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.hamcrest.Matchers.both;
-import static org.hamcrest.Matchers.either;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
+import static org.hamcrest.Matchers.*;
 
 public class BulkProcessorIT extends ESIntegTestCase {
+
+    @Test
     public void testThatBulkProcessorCountIsCorrect() throws InterruptedException {
+
         final CountDownLatch latch = new CountDownLatch(1);
         BulkProcessorTestListener listener = new BulkProcessorTestListener(latch);
 
@@ -76,6 +74,7 @@ public class BulkProcessorIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testBulkProcessorFlush() throws InterruptedException {
         final CountDownLatch latch = new CountDownLatch(1);
         BulkProcessorTestListener listener = new BulkProcessorTestListener(latch);
@@ -102,6 +101,7 @@ public class BulkProcessorIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testBulkProcessorConcurrentRequests() throws Exception {
         int bulkActions = randomIntBetween(10, 100);
         int numDocs = randomIntBetween(bulkActions, bulkActions + 100);
@@ -153,6 +153,7 @@ public class BulkProcessorIT extends ESIntegTestCase {
         assertMultiGetResponse(multiGetRequestBuilder.get(), numDocs);
     }
 
+    @Test
     //https://github.com/elasticsearch/elasticsearch/issues/5038
     public void testBulkProcessorConcurrentRequestsNoNodeAvailableException() throws Exception {
         //we create a transport client with no nodes to make sure it throws NoNodeAvailableException
@@ -195,6 +196,7 @@ public class BulkProcessorIT extends ESIntegTestCase {
         transportClient.close();
     }
 
+    @Test
     public void testBulkProcessorWaitOnClose() throws Exception {
         BulkProcessorTestListener listener = new BulkProcessorTestListener();
 
@@ -203,7 +205,7 @@ public class BulkProcessorIT extends ESIntegTestCase {
                 //let's make sure that the bulk action limit trips, one single execution will index all the documents
                 .setConcurrentRequests(randomIntBetween(0, 1)).setBulkActions(numDocs)
                 .setFlushInterval(TimeValue.timeValueHours(24)).setBulkSize(new ByteSizeValue(randomIntBetween(1, 10),
-                        RandomPicks.randomFrom(getRandom(), ByteSizeUnit.values())))
+                        (ByteSizeUnit)RandomPicks.randomFrom(getRandom(), ByteSizeUnit.values())))
                 .build();
 
         MultiGetRequestBuilder multiGetRequestBuilder = indexDocs(client(), processor, numDocs);
@@ -225,6 +227,7 @@ public class BulkProcessorIT extends ESIntegTestCase {
         assertMultiGetResponse(multiGetRequestBuilder.get(), numDocs);
     }
 
+    @Test
     public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception {
         createIndex("test-ro");
         assertAcked(client().admin().indices().prepareUpdateSettings("test-ro")
diff --git a/core/src/test/java/org/elasticsearch/action/bulk/BulkRequestTests.java b/core/src/test/java/org/elasticsearch/action/bulk/BulkRequestTests.java
index 0242eda..207ebdb 100644
--- a/core/src/test/java/org/elasticsearch/action/bulk/BulkRequestTests.java
+++ b/core/src/test/java/org/elasticsearch/action/bulk/BulkRequestTests.java
@@ -19,6 +19,8 @@
 
 package org.elasticsearch.action.bulk;
 
+import java.nio.charset.StandardCharsets;
+
 import org.apache.lucene.util.Constants;
 import org.elasticsearch.action.ActionRequest;
 import org.elasticsearch.action.delete.DeleteRequest;
@@ -29,8 +31,8 @@ import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.bytes.BytesArray;
 import org.elasticsearch.script.Script;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -41,6 +43,8 @@ import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.notNullValue;
 
 public class BulkRequestTests extends ESTestCase {
+
+    @Test
     public void testSimpleBulk1() throws Exception {
         String bulkAction = copyToStringFromClasspath("/org/elasticsearch/action/bulk/simple-bulk.json");
         // translate Windows line endings (\r\n) to standard ones (\n)
@@ -55,6 +59,7 @@ public class BulkRequestTests extends ESTestCase {
         assertThat(((IndexRequest) bulkRequest.requests().get(2)).source().toBytes(), equalTo(new BytesArray("{ \"field1\" : \"value3\" }").toBytes()));
     }
 
+    @Test
     public void testSimpleBulk2() throws Exception {
         String bulkAction = copyToStringFromClasspath("/org/elasticsearch/action/bulk/simple-bulk2.json");
         BulkRequest bulkRequest = new BulkRequest();
@@ -62,6 +67,7 @@ public class BulkRequestTests extends ESTestCase {
         assertThat(bulkRequest.numberOfActions(), equalTo(3));
     }
 
+    @Test
     public void testSimpleBulk3() throws Exception {
         String bulkAction = copyToStringFromClasspath("/org/elasticsearch/action/bulk/simple-bulk3.json");
         BulkRequest bulkRequest = new BulkRequest();
@@ -69,6 +75,7 @@ public class BulkRequestTests extends ESTestCase {
         assertThat(bulkRequest.numberOfActions(), equalTo(3));
     }
 
+    @Test
     public void testSimpleBulk4() throws Exception {
         String bulkAction = copyToStringFromClasspath("/org/elasticsearch/action/bulk/simple-bulk4.json");
         BulkRequest bulkRequest = new BulkRequest();
@@ -91,6 +98,7 @@ public class BulkRequestTests extends ESTestCase {
         assertThat(((UpdateRequest) bulkRequest.requests().get(1)).upsertRequest().source().toUtf8(), equalTo("{\"counter\":1}"));
     }
 
+    @Test
     public void testBulkAllowExplicitIndex() throws Exception {
         String bulkAction = copyToStringFromClasspath("/org/elasticsearch/action/bulk/simple-bulk.json");
         try {
@@ -104,6 +112,7 @@ public class BulkRequestTests extends ESTestCase {
         new BulkRequest().add(new BytesArray(bulkAction.getBytes(StandardCharsets.UTF_8)), "test", null, false);
     }
 
+    @Test
     public void testBulkAddIterable() {
         BulkRequest bulkRequest = Requests.bulkRequest();
         List<ActionRequest> requests = new ArrayList<>();
@@ -117,6 +126,7 @@ public class BulkRequestTests extends ESTestCase {
         assertThat(bulkRequest.requests().get(2), instanceOf(DeleteRequest.class));
     }
 
+    @Test
     public void testSimpleBulk6() throws Exception {
         String bulkAction = copyToStringFromClasspath("/org/elasticsearch/action/bulk/simple-bulk6.json");
         BulkRequest bulkRequest = new BulkRequest();
@@ -129,6 +139,7 @@ public class BulkRequestTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSimpleBulk7() throws Exception {
         String bulkAction = copyToStringFromClasspath("/org/elasticsearch/action/bulk/simple-bulk7.json");
         BulkRequest bulkRequest = new BulkRequest();
@@ -141,6 +152,7 @@ public class BulkRequestTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSimpleBulk8() throws Exception {
         String bulkAction = copyToStringFromClasspath("/org/elasticsearch/action/bulk/simple-bulk8.json");
         BulkRequest bulkRequest = new BulkRequest();
@@ -153,6 +165,7 @@ public class BulkRequestTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSimpleBulk9() throws Exception {
         String bulkAction = copyToStringFromClasspath("/org/elasticsearch/action/bulk/simple-bulk9.json");
         BulkRequest bulkRequest = new BulkRequest();
@@ -165,6 +178,7 @@ public class BulkRequestTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSimpleBulk10() throws Exception {
         String bulkAction = copyToStringFromClasspath("/org/elasticsearch/action/bulk/simple-bulk10.json");
         BulkRequest bulkRequest = new BulkRequest();
diff --git a/core/src/test/java/org/elasticsearch/action/get/MultiGetShardRequestTests.java b/core/src/test/java/org/elasticsearch/action/get/MultiGetShardRequestTests.java
index 451ade6..c48f65b 100644
--- a/core/src/test/java/org/elasticsearch/action/get/MultiGetShardRequestTests.java
+++ b/core/src/test/java/org/elasticsearch/action/get/MultiGetShardRequestTests.java
@@ -24,6 +24,7 @@ import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.index.VersionType;
 import org.elasticsearch.search.fetch.source.FetchSourceContext;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -31,6 +32,8 @@ import static org.elasticsearch.test.VersionUtils.randomVersion;
 import static org.hamcrest.CoreMatchers.equalTo;
 
 public class MultiGetShardRequestTests extends ESTestCase {
+
+    @Test
     public void testSerialization() throws IOException {
         MultiGetRequest multiGetRequest = new MultiGetRequest();
         if (randomBoolean()) {
diff --git a/core/src/test/java/org/elasticsearch/action/index/IndexRequestBuilderTests.java b/core/src/test/java/org/elasticsearch/action/index/IndexRequestBuilderTests.java
index badb79e..f9dc86b 100644
--- a/core/src/test/java/org/elasticsearch/action/index/IndexRequestBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/action/index/IndexRequestBuilderTests.java
@@ -27,6 +27,7 @@ import org.elasticsearch.rest.NoOpClient;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.ByteArrayOutputStream;
 import java.util.HashMap;
@@ -54,6 +55,7 @@ public class IndexRequestBuilderTests extends ESTestCase {
     /**
      * test setting the source for the request with different available setters
      */
+    @Test
     public void testSetSource() throws Exception {
         IndexRequestBuilder indexRequestBuilder = new IndexRequestBuilder(this.testClient, IndexAction.INSTANCE);
         Map<String, String> source = new HashMap<>();
diff --git a/core/src/test/java/org/elasticsearch/action/index/IndexRequestTests.java b/core/src/test/java/org/elasticsearch/action/index/IndexRequestTests.java
index 0739b5d..7c08a0d 100644
--- a/core/src/test/java/org/elasticsearch/action/index/IndexRequestTests.java
+++ b/core/src/test/java/org/elasticsearch/action/index/IndexRequestTests.java
@@ -20,19 +20,19 @@ package org.elasticsearch.action.index;
 
 import org.elasticsearch.index.VersionType;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
 
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.empty;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.not;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
 public class IndexRequestTests extends ESTestCase {
+
+    @Test
     public void testIndexRequestOpTypeFromString() throws Exception {
         String create = "create";
         String index = "index";
@@ -45,13 +45,10 @@ public class IndexRequestTests extends ESTestCase {
         assertThat(IndexRequest.OpType.fromString(indexUpper), equalTo(IndexRequest.OpType.INDEX));
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testReadBogusString() {
-        try {
-            IndexRequest.OpType.fromString("foobar");
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("opType [foobar] not allowed"));
-        }
+        String foobar = "foobar";
+        IndexRequest.OpType.fromString(foobar);
     }
 
     public void testCreateOperationRejectsVersions() {
diff --git a/core/src/test/java/org/elasticsearch/action/indexedscripts/get/GetIndexedScriptRequestTests.java b/core/src/test/java/org/elasticsearch/action/indexedscripts/get/GetIndexedScriptRequestTests.java
index af09af9..ea1d3ba 100644
--- a/core/src/test/java/org/elasticsearch/action/indexedscripts/get/GetIndexedScriptRequestTests.java
+++ b/core/src/test/java/org/elasticsearch/action/indexedscripts/get/GetIndexedScriptRequestTests.java
@@ -23,6 +23,7 @@ import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.index.VersionType;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -30,6 +31,8 @@ import static org.elasticsearch.test.VersionUtils.randomVersion;
 import static org.hamcrest.CoreMatchers.equalTo;
 
 public class GetIndexedScriptRequestTests extends ESTestCase {
+
+    @Test
     public void testGetIndexedScriptRequestSerialization() throws IOException {
         GetIndexedScriptRequest request = new GetIndexedScriptRequest("lang", "id");
         if (randomBoolean()) {
diff --git a/core/src/test/java/org/elasticsearch/action/percolate/MultiPercolatorRequestTests.java b/core/src/test/java/org/elasticsearch/action/percolate/MultiPercolatorRequestTests.java
index 1625146..48c75d8 100644
--- a/core/src/test/java/org/elasticsearch/action/percolate/MultiPercolatorRequestTests.java
+++ b/core/src/test/java/org/elasticsearch/action/percolate/MultiPercolatorRequestTests.java
@@ -20,19 +20,20 @@ package org.elasticsearch.action.percolate;
 
 import org.elasticsearch.action.support.IndicesOptions;
 import org.elasticsearch.common.collect.MapBuilder;
+import org.elasticsearch.test.StreamsUtils;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.test.ESTestCase;
-import org.elasticsearch.test.StreamsUtils;
+import org.junit.Test;
 
 import java.util.Map;
 
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
 public class MultiPercolatorRequestTests extends ESTestCase {
+
+    @Test
     public void testParseBulkRequests() throws Exception {
         byte[] data = StreamsUtils.copyToBytesFromClasspath("/org/elasticsearch/action/percolate/mpercolate1.json");
         MultiPercolateRequest request = new MultiPercolateRequest().add(data, 0, data.length);
@@ -149,7 +150,8 @@ public class MultiPercolatorRequestTests extends ESTestCase {
         assertThat(sourceMap.get("doc"), nullValue());
     }
 
-    public void testParseBulkRequestsDefaults() throws Exception {
+    @Test
+    public void testParseBulkRequests_defaults() throws Exception {
         byte[] data = StreamsUtils.copyToBytesFromClasspath("/org/elasticsearch/action/percolate/mpercolate2.json");
         MultiPercolateRequest request = new MultiPercolateRequest();
         request.indices("my-index1").documentType("my-type1").indicesOptions(IndicesOptions.lenientExpandOpen());
diff --git a/core/src/test/java/org/elasticsearch/action/search/MultiSearchRequestTests.java b/core/src/test/java/org/elasticsearch/action/search/MultiSearchRequestTests.java
index ee0ceef..5d486f8 100644
--- a/core/src/test/java/org/elasticsearch/action/search/MultiSearchRequestTests.java
+++ b/core/src/test/java/org/elasticsearch/action/search/MultiSearchRequestTests.java
@@ -33,6 +33,7 @@ import org.elasticsearch.rest.action.search.RestMultiSearchAction;
 import org.elasticsearch.script.ScriptService;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.StreamsUtils;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Collections;
@@ -41,7 +42,9 @@ import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.nullValue;
 
 public class MultiSearchRequestTests extends ESTestCase {
-    public void testSimpleAdd() throws Exception {
+
+    @Test
+    public void simpleAdd() throws Exception {
         IndicesQueriesRegistry registry = new IndicesQueriesRegistry(Settings.EMPTY, Collections.singleton(new MatchAllQueryParser()), new NamedWriteableRegistry());
         byte[] data = StreamsUtils.copyToBytesFromClasspath("/org/elasticsearch/action/search/simple-msearch1.json");
         MultiSearchRequest request = RestMultiSearchAction.parseRequest(new MultiSearchRequest(), new BytesArray(data), false, null, null,
@@ -68,8 +71,9 @@ public class MultiSearchRequestTests extends ESTestCase {
         assertThat(request.requests().get(7).types().length, equalTo(0));
     }
 
-    public void testSimpleAdd2() throws Exception {
-    IndicesQueriesRegistry registry = new IndicesQueriesRegistry(Settings.EMPTY, Collections.singleton(new MatchAllQueryParser()), new NamedWriteableRegistry());
+    @Test
+    public void simpleAdd2() throws Exception {
+        IndicesQueriesRegistry registry = new IndicesQueriesRegistry(Settings.EMPTY, Collections.singleton(new MatchAllQueryParser()), new NamedWriteableRegistry());
         byte[] data = StreamsUtils.copyToBytesFromClasspath("/org/elasticsearch/action/search/simple-msearch2.json");
         MultiSearchRequest request = RestMultiSearchAction.parseRequest(new MultiSearchRequest(), new BytesArray(data), false, null, null,
                 null, null, IndicesOptions.strictExpandOpenAndForbidClosed(), true, registry, ParseFieldMatcher.EMPTY);
@@ -87,7 +91,8 @@ public class MultiSearchRequestTests extends ESTestCase {
         assertThat(request.requests().get(4).types().length, equalTo(0));
     }
 
-    public void testSimpleAdd3() throws Exception {
+    @Test
+    public void simpleAdd3() throws Exception {
         IndicesQueriesRegistry registry = new IndicesQueriesRegistry(Settings.EMPTY, Collections.singleton(new MatchAllQueryParser()), new NamedWriteableRegistry());
         byte[] data = StreamsUtils.copyToBytesFromClasspath("/org/elasticsearch/action/search/simple-msearch3.json");
         MultiSearchRequest request = RestMultiSearchAction.parseRequest(new MultiSearchRequest(), new BytesArray(data), false, null, null,
@@ -107,7 +112,8 @@ public class MultiSearchRequestTests extends ESTestCase {
         assertThat(request.requests().get(3).searchType(), equalTo(SearchType.DFS_QUERY_THEN_FETCH));
     }
 
-    public void testSimpleAdd4() throws Exception {
+    @Test
+    public void simpleAdd4() throws Exception {
         IndicesQueriesRegistry registry = new IndicesQueriesRegistry(Settings.EMPTY, Collections.singleton(new MatchAllQueryParser()), new NamedWriteableRegistry());
         byte[] data = StreamsUtils.copyToBytesFromClasspath("/org/elasticsearch/action/search/simple-msearch4.json");
         MultiSearchRequest request = RestMultiSearchAction.parseRequest(new MultiSearchRequest(), new BytesArray(data), false, null, null,
@@ -129,7 +135,8 @@ public class MultiSearchRequestTests extends ESTestCase {
         assertThat(request.requests().get(2).routing(), equalTo("123"));
     }
 
-    public void testSimpleAdd5() throws Exception {
+    @Test
+    public void simpleAdd5() throws Exception {
         IndicesQueriesRegistry registry = new IndicesQueriesRegistry(Settings.EMPTY, Collections.singleton(new MatchAllQueryParser()), new NamedWriteableRegistry());
         byte[] data = StreamsUtils.copyToBytesFromClasspath("/org/elasticsearch/action/search/simple-msearch5.json");
         MultiSearchRequest request = RestMultiSearchAction.parseRequest(new MultiSearchRequest(), new BytesArray(data), true, null, null,
diff --git a/core/src/test/java/org/elasticsearch/action/search/SearchRequestBuilderTests.java b/core/src/test/java/org/elasticsearch/action/search/SearchRequestBuilderTests.java
index fc64533..34bea06 100644
--- a/core/src/test/java/org/elasticsearch/action/search/SearchRequestBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/action/search/SearchRequestBuilderTests.java
@@ -27,10 +27,12 @@ import org.elasticsearch.search.builder.SearchSourceBuilder;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
+import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 
 public class SearchRequestBuilderTests extends ESTestCase {
+
     private static Client client;
 
     @BeforeClass
@@ -49,23 +51,27 @@ public class SearchRequestBuilderTests extends ESTestCase {
         client = null;
     }
 
+    @Test
     public void testEmptySourceToString() {
         SearchRequestBuilder searchRequestBuilder = client.prepareSearch();
         assertThat(searchRequestBuilder.toString(), equalTo(new SearchSourceBuilder().toString()));
     }
 
+    @Test
     public void testQueryBuilderQueryToString() {
         SearchRequestBuilder searchRequestBuilder = client.prepareSearch();
         searchRequestBuilder.setQuery(QueryBuilders.matchAllQuery());
         assertThat(searchRequestBuilder.toString(), equalTo(new SearchSourceBuilder().query(QueryBuilders.matchAllQuery()).toString()));
     }
 
+    @Test
     public void testSearchSourceBuilderToString() {
         SearchRequestBuilder searchRequestBuilder = client.prepareSearch();
         searchRequestBuilder.setSource(new SearchSourceBuilder().query(QueryBuilders.termQuery("field", "value")));
         assertThat(searchRequestBuilder.toString(), equalTo(new SearchSourceBuilder().query(QueryBuilders.termQuery("field", "value")).toString()));
     }
 
+    @Test
     public void testThatToStringDoesntWipeRequestSource() {
         SearchRequestBuilder searchRequestBuilder = client.prepareSearch().setSource(new SearchSourceBuilder().query(QueryBuilders.termQuery("field", "value")));
         String preToString = searchRequestBuilder.request().toString();
diff --git a/core/src/test/java/org/elasticsearch/action/support/IndicesOptionsTests.java b/core/src/test/java/org/elasticsearch/action/support/IndicesOptionsTests.java
index d5ed530..c681a61 100644
--- a/core/src/test/java/org/elasticsearch/action/support/IndicesOptionsTests.java
+++ b/core/src/test/java/org/elasticsearch/action/support/IndicesOptionsTests.java
@@ -23,11 +23,14 @@ import org.elasticsearch.Version;
 import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.test.VersionUtils.randomVersion;
 import static org.hamcrest.CoreMatchers.equalTo;
 
 public class IndicesOptionsTests extends ESTestCase {
+
+    @Test
     public void testSerialization() throws Exception {
         int iterations = randomIntBetween(5, 20);
         for (int i = 0; i < iterations; i++) {
@@ -52,6 +55,7 @@ public class IndicesOptionsTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testFromOptions() {
         int iterations = randomIntBetween(5, 20);
         for (int i = 0; i < iterations; i++) {
diff --git a/core/src/test/java/org/elasticsearch/action/support/TransportActionFilterChainTests.java b/core/src/test/java/org/elasticsearch/action/support/TransportActionFilterChainTests.java
index f21013b..148fc70 100644
--- a/core/src/test/java/org/elasticsearch/action/support/TransportActionFilterChainTests.java
+++ b/core/src/test/java/org/elasticsearch/action/support/TransportActionFilterChainTests.java
@@ -27,6 +27,7 @@ import org.elasticsearch.action.ActionResponse;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -40,9 +41,7 @@ import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.hamcrest.CoreMatchers.instanceOf;
-import static org.hamcrest.CoreMatchers.notNullValue;
+import static org.hamcrest.CoreMatchers.*;
 
 public class TransportActionFilterChainTests extends ESTestCase {
 
@@ -53,7 +52,9 @@ public class TransportActionFilterChainTests extends ESTestCase {
          counter = new AtomicInteger();
     }
 
+    @Test
     public void testActionFiltersRequest() throws ExecutionException, InterruptedException {
+
         int numFilters = randomInt(10);
         Set<Integer> orders = new HashSet<>(numFilters);
         while (orders.size() < numFilters) {
@@ -133,7 +134,9 @@ public class TransportActionFilterChainTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testActionFiltersResponse() throws ExecutionException, InterruptedException {
+
         int numFilters = randomInt(10);
         Set<Integer> orders = new HashSet<>(numFilters);
         while (orders.size() < numFilters) {
@@ -213,7 +216,9 @@ public class TransportActionFilterChainTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testTooManyContinueProcessingRequest() throws ExecutionException, InterruptedException {
+
         final int additionalContinueCount = randomInt(10);
 
         RequestTestFilter testFilter = new RequestTestFilter(randomInt(), new RequestCallback() {
@@ -269,7 +274,9 @@ public class TransportActionFilterChainTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testTooManyContinueProcessingResponse() throws ExecutionException, InterruptedException {
+
         final int additionalContinueCount = randomInt(10);
 
         ResponseTestFilter testFilter = new ResponseTestFilter(randomInt(), new ResponseCallback() {
diff --git a/core/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java b/core/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java
index 59a6914..d3dd75c 100644
--- a/core/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java
+++ b/core/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java
@@ -49,6 +49,7 @@ import org.elasticsearch.transport.TransportService;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
+import org.junit.Test;
 
 import java.util.HashSet;
 import java.util.Set;
@@ -145,6 +146,7 @@ public class TransportMasterNodeActionTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testLocalOperationWithoutBlocks() throws ExecutionException, InterruptedException {
         final boolean masterOperationFailure = randomBoolean();
 
@@ -180,6 +182,7 @@ public class TransportMasterNodeActionTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testLocalOperationWithBlocks() throws ExecutionException, InterruptedException {
         final boolean retryableBlock = randomBoolean();
         final boolean unblockBeforeTimeout = randomBoolean();
@@ -214,6 +217,7 @@ public class TransportMasterNodeActionTests extends ESTestCase {
         assertListenerThrows("ClusterBlockException should be thrown", listener, ClusterBlockException.class);
     }
 
+    @Test
     public void testForceLocalOperation() throws ExecutionException, InterruptedException {
         Request request = new Request();
         PlainActionFuture<Response> listener = new PlainActionFuture<>();
@@ -231,6 +235,7 @@ public class TransportMasterNodeActionTests extends ESTestCase {
         listener.get();
     }
 
+    @Test
     public void testMasterNotAvailable() throws ExecutionException, InterruptedException {
         Request request = new Request().masterNodeTimeout(TimeValue.timeValueSeconds(0));
         clusterService.setState(ClusterStateCreationUtils.state(localNode, null, allNodes));
@@ -240,6 +245,7 @@ public class TransportMasterNodeActionTests extends ESTestCase {
         assertListenerThrows("MasterNotDiscoveredException should be thrown", listener, MasterNotDiscoveredException.class);
     }
 
+    @Test
     public void testMasterBecomesAvailable() throws ExecutionException, InterruptedException {
         Request request = new Request();
         clusterService.setState(ClusterStateCreationUtils.state(localNode, null, allNodes));
@@ -251,6 +257,7 @@ public class TransportMasterNodeActionTests extends ESTestCase {
         listener.get();
     }
 
+    @Test
     public void testDelegateToMaster() throws ExecutionException, InterruptedException {
         Request request = new Request();
         clusterService.setState(ClusterStateCreationUtils.state(localNode, remoteNode, allNodes));
@@ -279,6 +286,7 @@ public class TransportMasterNodeActionTests extends ESTestCase {
         assertThat(listener.get(), equalTo(response));
     }
 
+    @Test
     public void testDelegateToFailingMaster() throws ExecutionException, InterruptedException {
         boolean failsWithConnectTransportException = randomBoolean();
         Request request = new Request().masterNodeTimeout(TimeValue.timeValueSeconds(failsWithConnectTransportException ? 60 : 0));
diff --git a/core/src/test/java/org/elasticsearch/action/support/replication/BroadcastReplicationTests.java b/core/src/test/java/org/elasticsearch/action/support/replication/BroadcastReplicationTests.java
index d31a024..2fe04bb 100644
--- a/core/src/test/java/org/elasticsearch/action/support/replication/BroadcastReplicationTests.java
+++ b/core/src/test/java/org/elasticsearch/action/support/replication/BroadcastReplicationTests.java
@@ -48,6 +48,7 @@ import org.elasticsearch.transport.local.LocalTransport;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Date;
@@ -58,12 +59,8 @@ import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 
-import static org.elasticsearch.action.support.replication.ClusterStateCreationUtils.state;
-import static org.elasticsearch.action.support.replication.ClusterStateCreationUtils.stateWithAssignedPrimariesAndOneReplica;
-import static org.elasticsearch.action.support.replication.ClusterStateCreationUtils.stateWithNoShard;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
+import static org.elasticsearch.action.support.replication.ClusterStateCreationUtils.*;
+import static org.hamcrest.Matchers.*;
 
 public class BroadcastReplicationTests extends ESTestCase {
 
@@ -95,6 +92,7 @@ public class BroadcastReplicationTests extends ESTestCase {
         threadPool = null;
     }
 
+    @Test
     public void testNotStartedPrimary() throws InterruptedException, ExecutionException, IOException {
         final String index = "test";
         clusterService.setState(state(index, randomBoolean(),
@@ -114,6 +112,7 @@ public class BroadcastReplicationTests extends ESTestCase {
         assertBroadcastResponse(2, 0, 0, response.get(), null);
     }
 
+    @Test
     public void testStartedPrimary() throws InterruptedException, ExecutionException, IOException {
         final String index = "test";
         clusterService.setState(state(index, randomBoolean(),
@@ -129,6 +128,7 @@ public class BroadcastReplicationTests extends ESTestCase {
         assertBroadcastResponse(1, 1, 0, response.get(), null);
     }
 
+    @Test
     public void testResultCombine() throws InterruptedException, ExecutionException, IOException {
         final String index = "test";
         int numShards = randomInt(3);
@@ -161,6 +161,7 @@ public class BroadcastReplicationTests extends ESTestCase {
         assertBroadcastResponse(2 * numShards, succeeded, failed, response.get(), Exception.class);
     }
 
+    @Test
     public void testNoShards() throws InterruptedException, ExecutionException, IOException {
         clusterService.setState(stateWithNoShard());
         logger.debug("--> using initial state:\n{}", clusterService.state().prettyPrint());
@@ -168,6 +169,7 @@ public class BroadcastReplicationTests extends ESTestCase {
         assertBroadcastResponse(0, 0, 0, response, null);
     }
 
+    @Test
     public void testShardsList() throws InterruptedException, ExecutionException {
         final String index = "test";
         final ShardId shardId = new ShardId(index, 0);
diff --git a/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java b/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java
index b015614..d368194 100644
--- a/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java
+++ b/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java
@@ -61,6 +61,7 @@ import org.elasticsearch.transport.TransportService;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.HashSet;
@@ -124,6 +125,7 @@ public class TransportReplicationActionTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testBlocks() throws ExecutionException, InterruptedException {
         Request request = new Request();
         PlainActionFuture<Response> listener = new PlainActionFuture<>();
@@ -160,6 +162,7 @@ public class TransportReplicationActionTests extends ESTestCase {
         assertEquals(1, count.get());
     }
 
+    @Test
     public void testNotStartedPrimary() throws InterruptedException, ExecutionException {
         final String index = "test";
         final ShardId shardId = new ShardId(index, 0);
@@ -189,6 +192,7 @@ public class TransportReplicationActionTests extends ESTestCase {
         assertIndexShardCounter(1);
     }
 
+    @Test
     public void testRoutingToPrimary() {
         final String index = "test";
         final ShardId shardId = new ShardId(index, 0);
@@ -223,6 +227,7 @@ public class TransportReplicationActionTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testWriteConsistency() throws ExecutionException, InterruptedException {
         action = new ActionWithConsistency(Settings.EMPTY, "testActionWithConsistency", transportService, clusterService, threadPool);
         final String index = "test";
@@ -290,6 +295,7 @@ public class TransportReplicationActionTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testReplication() throws ExecutionException, InterruptedException {
         final String index = "test";
         final ShardId shardId = new ShardId(index, 0);
@@ -313,6 +319,7 @@ public class TransportReplicationActionTests extends ESTestCase {
         runReplicateTest(shardRoutingTable, assignedReplicas, totalShards);
     }
 
+    @Test
     public void testReplicationWithShadowIndex() throws ExecutionException, InterruptedException {
         final String index = "test";
         final ShardId shardId = new ShardId(index, 0);
@@ -403,6 +410,7 @@ public class TransportReplicationActionTests extends ESTestCase {
         assertIndexShardCounter(1);
     }
 
+    @Test
     public void testCounterOnPrimary() throws InterruptedException, ExecutionException, IOException {
         final String index = "test";
         final ShardId shardId = new ShardId(index, 0);
@@ -443,6 +451,7 @@ public class TransportReplicationActionTests extends ESTestCase {
         assertThat(transport.capturedRequests().length, equalTo(0));
     }
 
+    @Test
     public void testCounterIncrementedWhileReplicationOngoing() throws InterruptedException, ExecutionException, IOException {
         final String index = "test";
         final ShardId shardId = new ShardId(index, 0);
@@ -470,6 +479,7 @@ public class TransportReplicationActionTests extends ESTestCase {
         assertIndexShardCounter(1);
     }
 
+    @Test
     public void testReplicasCounter() throws Exception {
         final ShardId shardId = new ShardId("test", 0);
         clusterService.setState(state(shardId.index().getName(), true,
@@ -504,6 +514,7 @@ public class TransportReplicationActionTests extends ESTestCase {
         assertIndexShardCounter(1);
     }
 
+    @Test
     public void testCounterDecrementedIfShardOperationThrowsException() throws InterruptedException, ExecutionException, IOException {
         action = new ActionWithExceptions(Settings.EMPTY, "testActionWithExceptions", transportService, clusterService, threadPool);
         final String index = "test";
diff --git a/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsCheckDocFreqIT.java b/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsCheckDocFreqIT.java
index 28d4b0f..1d0c317 100644
--- a/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsCheckDocFreqIT.java
+++ b/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsCheckDocFreqIT.java
@@ -31,6 +31,7 @@ import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -58,6 +59,7 @@ public class GetTermVectorsCheckDocFreqIT extends ESIntegTestCase {
                 .build();
     }
 
+    @Test
     public void testSimpleTermVectors() throws IOException {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties")
diff --git a/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsIT.java b/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsIT.java
index 5507686..6f04697 100644
--- a/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsIT.java
+++ b/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsIT.java
@@ -20,7 +20,6 @@
 package org.elasticsearch.action.termvectors;
 
 import com.carrotsearch.hppc.ObjectIntHashMap;
-
 import org.apache.lucene.analysis.payloads.PayloadHelper;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.index.DirectoryReader;
@@ -42,6 +41,7 @@ import org.elasticsearch.common.xcontent.json.JsonXContent;
 import org.elasticsearch.index.engine.VersionConflictEngineException;
 import org.elasticsearch.index.mapper.FieldMapper;
 import org.hamcrest.Matcher;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -63,6 +63,8 @@ import static org.hamcrest.Matchers.notNullValue;
 import static org.hamcrest.Matchers.nullValue;
 
 public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
+
+    @Test
     public void testNoSuchDoc() throws Exception {
         XContentBuilder mapping = jsonBuilder().startObject().startObject("type1")
                 .startObject("properties")
@@ -89,6 +91,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         }
     }
 
+    @Test
     public void testExistingFieldWithNoTermVectorsNoNPE() throws Exception {
         XContentBuilder mapping = jsonBuilder().startObject().startObject("type1")
                 .startObject("properties")
@@ -116,6 +119,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         assertThat(actionGet.getFields().terms("existingfield"), nullValue());
     }
 
+    @Test
     public void testExistingFieldButNotInDocNPE() throws Exception {
         XContentBuilder mapping = jsonBuilder().startObject().startObject("type1")
                 .startObject("properties")
@@ -146,6 +150,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         assertThat(actionGet.getFields().terms("existingfield"), nullValue());
     }
 
+    @Test
     public void testNotIndexedField() throws Exception {
         // must be of type string and indexed.
         assertAcked(prepareCreate("test")
@@ -188,6 +193,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         }
     }
 
+    @Test
     public void testSimpleTermVectors() throws IOException {
         XContentBuilder mapping = jsonBuilder().startObject().startObject("type1")
                 .startObject("properties")
@@ -225,6 +231,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         }
     }
 
+    @Test
     public void testRandomSingleTermVectors() throws IOException {
         FieldType ft = new FieldType();
         int config = randomInt(6);
@@ -385,6 +392,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         return ret;
     }
 
+    @Test
     public void testDuelESLucene() throws Exception {
         TestFieldSetting[] testFieldSettings = getFieldSettings();
         createIndexBasedOnFieldSettings("test", "alias", testFieldSettings);
@@ -411,6 +419,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         }
     }
 
+    @Test
     public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException {
         //create the test document
         int encoding = randomIntBetween(0, 2);
@@ -578,6 +587,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
     }
 
     // like testSimpleTermVectors but we create fields with no term vectors
+    @Test
     public void testSimpleTermVectorsWithGenerate() throws IOException {
         String[] fieldNames = new String[10];
         for (int i = 0; i < fieldNames.length; i++) {
@@ -670,6 +680,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         assertThat(iterator.next(), nullValue());
     }
 
+    @Test
     public void testDuelWithAndWithoutTermVectors() throws IOException, ExecutionException, InterruptedException {
         // setup indices
         String[] indexNames = new String[] {"with_tv", "without_tv"};
@@ -758,6 +769,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         assertThat(iter1.next(), nullValue());
     }
 
+    @Test
     public void testSimpleWildCards() throws IOException {
         int numFields = 25;
 
@@ -785,6 +797,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         assertThat("All term vectors should have been generated", response.getFields().size(), equalTo(numFields));
     }
 
+    @Test
     public void testArtificialVsExisting() throws ExecutionException, InterruptedException, IOException {
         // setup indices
         Settings.Builder settings = settingsBuilder()
@@ -843,6 +856,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         }
     }
 
+    @Test
     public void testArtificialNoDoc() throws IOException {
         // setup indices
         Settings.Builder settings = settingsBuilder()
@@ -871,6 +885,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         checkBrownFoxTermVector(resp.getFields(), "field1", false);
     }
 
+    @Test
     public void testArtificialNonExistingField() throws Exception {
         // setup indices
         Settings.Builder settings = settingsBuilder()
@@ -918,6 +933,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         }
     }
 
+    @Test
     public void testPerFieldAnalyzer() throws IOException {
         int numFields = 25;
 
@@ -1014,6 +1030,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         return randomBoolean() ? "test" : "alias";
     }
 
+    @Test
     public void testDfs() throws ExecutionException, InterruptedException, IOException {
         logger.info("Setting up the index ...");
         Settings.Builder settings = settingsBuilder()
@@ -1118,6 +1135,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         return lessThan(value);
     }
 
+    @Test
     public void testTermVectorsWithVersion() {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias"))
                 .setSettings(Settings.settingsBuilder().put("index.refresh_interval", -1)));
@@ -1221,6 +1239,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         assertThat(response.getVersion(), equalTo(2l));
     }
 
+    @Test
     public void testFilterLength() throws ExecutionException, InterruptedException, IOException {
         logger.info("Setting up the index ...");
         Settings.Builder settings = settingsBuilder()
@@ -1259,6 +1278,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         }
     }
 
+    @Test
     public void testFilterTermFreq() throws ExecutionException, InterruptedException, IOException {
         logger.info("Setting up the index ...");
         Settings.Builder settings = settingsBuilder()
@@ -1299,6 +1319,7 @@ public class GetTermVectorsIT extends AbstractTermVectorsTestCase {
         }
     }
 
+    @Test
     public void testFilterDocFreq() throws ExecutionException, InterruptedException, IOException {
         logger.info("Setting up the index ...");
         Settings.Builder settings = settingsBuilder()
diff --git a/core/src/test/java/org/elasticsearch/action/termvectors/MultiTermVectorsIT.java b/core/src/test/java/org/elasticsearch/action/termvectors/MultiTermVectorsIT.java
index 516eaf3..e70937e 100644
--- a/core/src/test/java/org/elasticsearch/action/termvectors/MultiTermVectorsIT.java
+++ b/core/src/test/java/org/elasticsearch/action/termvectors/MultiTermVectorsIT.java
@@ -28,16 +28,16 @@ import org.elasticsearch.common.lucene.uid.Versions;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.IndexNotFoundException;
 import org.elasticsearch.index.engine.VersionConflictEngineException;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 public class MultiTermVectorsIT extends AbstractTermVectorsTestCase {
+
+    @Test
     public void testDuelESLucene() throws Exception {
         AbstractTermVectorsTestCase.TestFieldSetting[] testFieldSettings = getFieldSettings();
         createIndexBasedOnFieldSettings("test", "alias", testFieldSettings);
@@ -73,6 +73,7 @@ public class MultiTermVectorsIT extends AbstractTermVectorsTestCase {
 
     }
 
+    @Test
     public void testMissingIndexThrowsMissingIndex() throws Exception {
         TermVectorsRequestBuilder requestBuilder = client().prepareTermVectors("testX", "typeX", Integer.toString(1));
         MultiTermVectorsRequestBuilder mtvBuilder = client().prepareMultiTermVectors();
@@ -83,6 +84,7 @@ public class MultiTermVectorsIT extends AbstractTermVectorsTestCase {
         assertThat(response.getResponses()[0].getFailure().getCause().getMessage(), equalTo("no such index"));
     }
 
+    @Test
     public void testMultiTermVectorsWithVersion() throws Exception {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias"))
                 .setSettings(Settings.settingsBuilder().put("index.refresh_interval", -1)));
diff --git a/core/src/test/java/org/elasticsearch/action/termvectors/TermVectorsUnitTests.java b/core/src/test/java/org/elasticsearch/action/termvectors/TermVectorsUnitTests.java
index cab27df..82809d1 100644
--- a/core/src/test/java/org/elasticsearch/action/termvectors/TermVectorsUnitTests.java
+++ b/core/src/test/java/org/elasticsearch/action/termvectors/TermVectorsUnitTests.java
@@ -20,17 +20,9 @@
 package org.elasticsearch.action.termvectors;
 
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
-import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.StringField;
-import org.apache.lucene.document.TextField;
-import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.Fields;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexWriterConfig;
+import org.apache.lucene.document.*;
+import org.apache.lucene.index.*;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
-import org.apache.lucene.index.Term;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.TermQuery;
@@ -52,6 +44,7 @@ import org.elasticsearch.rest.action.termvectors.RestTermVectorsAction;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.StreamsUtils;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -64,7 +57,10 @@ import java.util.Set;
 import static org.hamcrest.Matchers.equalTo;
 
 public class TermVectorsUnitTests extends ESTestCase {
-    public void testStreamResponse() throws Exception {
+
+    @Test
+    public void streamResponse() throws Exception {
+
         TermVectorsResponse outResponse = new TermVectorsResponse("a", "b", "c");
         outResponse.setExists(true);
         writeStandardTermVector(outResponse);
@@ -173,6 +169,7 @@ public class TermVectorsUnitTests extends ESTestCase {
         assertThat(fields.size(), equalTo(2));
     }
 
+    @Test
     public void testRestRequestParsing() throws Exception {
         BytesReference inputBytes = new BytesArray(
                 " {\"fields\" : [\"a\",  \"b\",\"c\"], \"offsets\":false, \"positions\":false, \"payloads\":true}");
@@ -210,6 +207,7 @@ public class TermVectorsUnitTests extends ESTestCase {
 
     }
 
+    @Test
     public void testRequestParsingThrowsException() throws Exception {
         BytesReference inputBytes = new BytesArray(
                 " {\"fields\" : \"a,  b,c   \", \"offsets\":false, \"positions\":false, \"payloads\":true, \"meaningless_term\":2}");
@@ -225,7 +223,9 @@ public class TermVectorsUnitTests extends ESTestCase {
 
     }
 
-    public void testStreamRequest() throws IOException {
+    @Test
+    public void streamRequest() throws IOException {
+
         for (int i = 0; i < 10; i++) {
             TermVectorsRequest request = new TermVectorsRequest("index", "type", "id");
             request.offsets(random().nextBoolean());
@@ -259,7 +259,8 @@ public class TermVectorsUnitTests extends ESTestCase {
 
         }
     }
-
+    
+    @Test
     public void testFieldTypeToTermVectorString() throws Exception {
         FieldType ft = new FieldType();
         ft.setStoreTermVectorOffsets(false);
@@ -278,6 +279,7 @@ public class TermVectorsUnitTests extends ESTestCase {
         assertThat("TypeParsers.parseTermVector should accept string with_positions_payloads but does not.", exceptiontrown, equalTo(false));
     }
 
+    @Test
     public void testTermVectorStringGenerationWithoutPositions() throws Exception {
         FieldType ft = new FieldType();
         ft.setStoreTermVectorOffsets(true);
@@ -288,13 +290,14 @@ public class TermVectorsUnitTests extends ESTestCase {
         assertThat(ftOpts, equalTo("with_offsets"));
     }
 
+    @Test
     public void testMultiParser() throws Exception {
         byte[] data = StreamsUtils.copyToBytesFromClasspath("/org/elasticsearch/action/termvectors/multiRequest1.json");
         BytesReference bytes = new BytesArray(data);
         MultiTermVectorsRequest request = new MultiTermVectorsRequest();
         request.add(new TermVectorsRequest(), bytes);
         checkParsedParameters(request);
-
+        
         data = StreamsUtils.copyToBytesFromClasspath("/org/elasticsearch/action/termvectors/multiRequest2.json");
         bytes = new BytesArray(data);
         request = new MultiTermVectorsRequest();
@@ -323,7 +326,7 @@ public class TermVectorsUnitTests extends ESTestCase {
         }
     }
 
-    // issue #12311
+    @Test // issue #12311
     public void testMultiParserFilter() throws Exception {
         byte[] data = StreamsUtils.copyToBytesFromClasspath("/org/elasticsearch/action/termvectors/multiRequest3.json");
         BytesReference bytes = new BytesArray(data);
diff --git a/core/src/test/java/org/elasticsearch/action/update/UpdateRequestTests.java b/core/src/test/java/org/elasticsearch/action/update/UpdateRequestTests.java
index bc9bd2b..6be5fe9 100644
--- a/core/src/test/java/org/elasticsearch/action/update/UpdateRequestTests.java
+++ b/core/src/test/java/org/elasticsearch/action/update/UpdateRequestTests.java
@@ -29,17 +29,18 @@ import org.elasticsearch.index.get.GetResult;
 import org.elasticsearch.script.Script;
 import org.elasticsearch.script.ScriptService.ScriptType;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.Map;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
-import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.*;
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
 
 public class UpdateRequestTests extends ESTestCase {
+
+    @Test
     public void testUpdateRequest() throws Exception {
         UpdateRequest request = new UpdateRequest("test", "type", "1");
         // simple script
@@ -125,7 +126,7 @@ public class UpdateRequestTests extends ESTestCase {
         assertThat(((Map) doc.get("compound")).get("field2").toString(), equalTo("value2"));
     }
 
-    // Related to issue 3256
+    @Test // Related to issue 3256
     public void testUpdateRequestWithTTL() throws Exception {
         long providedTTLValue = randomIntBetween(500, 1000);
         Settings settings = settings(Version.CURRENT).build();
diff --git a/core/src/test/java/org/elasticsearch/aliases/IndexAliasesIT.java b/core/src/test/java/org/elasticsearch/aliases/IndexAliasesIT.java
index 81b09c8..2742f55 100644
--- a/core/src/test/java/org/elasticsearch/aliases/IndexAliasesIT.java
+++ b/core/src/test/java/org/elasticsearch/aliases/IndexAliasesIT.java
@@ -44,6 +44,7 @@ import org.elasticsearch.search.aggregations.bucket.global.Global;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.HashSet;
@@ -79,6 +80,8 @@ import static org.hamcrest.Matchers.notNullValue;
 import static org.hamcrest.Matchers.nullValue;
 
 public class IndexAliasesIT extends ESIntegTestCase {
+
+    @Test
     public void testAliases() throws Exception {
         logger.info("--> creating index [test]");
         createIndex("test");
@@ -105,6 +108,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         assertThat(indexResponse.getIndex(), equalTo("test_x"));
     }
 
+    @Test
     public void testFailedFilter() throws Exception {
         logger.info("--> creating index [test]");
         createIndex("test");
@@ -130,6 +134,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testFilteringAliases() throws Exception {
         logger.info("--> creating index [test]");
         assertAcked(prepareCreate("test").addMapping("type", "user", "type=string"));
@@ -148,6 +153,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testEmptyFilter() throws Exception {
         logger.info("--> creating index [test]");
         createIndex("test");
@@ -157,6 +163,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         assertAcked(admin().indices().prepareAliases().addAlias("test", "alias1", "{}"));
     }
 
+    @Test
     public void testSearchingFilteringAliasesSingleIndex() throws Exception {
         logger.info("--> creating index [test]");
         assertAcked(prepareCreate("test").addMapping("type1", "id", "type=string", "name", "type=string"));
@@ -237,6 +244,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         assertHits(searchResponse.getHits(), "1", "2", "3", "4");
     }
 
+    @Test
     public void testSearchingFilteringAliasesTwoIndices() throws Exception {
         logger.info("--> creating index [test1]");
         assertAcked(prepareCreate("test1").addMapping("type1", "name", "type=string"));
@@ -300,6 +308,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         assertThat(client().prepareSearch("foos", "aliasToTests").setSize(0).setQuery(QueryBuilders.termQuery("name", "something")).get().getHits().totalHits(), equalTo(2L));
     }
 
+    @Test
     public void testSearchingFilteringAliasesMultipleIndices() throws Exception {
         logger.info("--> creating indices");
         createIndex("test1", "test2", "test3");
@@ -364,6 +373,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         assertThat(client().prepareSearch("filter23", "filter13", "test1", "test2").setSize(0).setQuery(QueryBuilders.matchAllQuery()).get().getHits().totalHits(), equalTo(8L));
     }
 
+    @Test
     public void testDeletingByQueryFilteringAliases() throws Exception {
         logger.info("--> creating index [test1] and [test2");
         assertAcked(prepareCreate("test1").addMapping("type1", "name", "type=string"));
@@ -401,6 +411,9 @@ public class IndexAliasesIT extends ESIntegTestCase {
         assertThat(client().prepareSearch("bars").setSize(0).setQuery(QueryBuilders.matchAllQuery()).get().getHits().totalHits(), equalTo(1L));
     }
 
+
+
+    @Test
     public void testDeleteAliases() throws Exception {
         logger.info("--> creating index [test1] and [test2]");
         assertAcked(prepareCreate("test1").addMapping("type", "name", "type=string"));
@@ -429,6 +442,8 @@ public class IndexAliasesIT extends ESIntegTestCase {
         assertThat(response.exists(), equalTo(false));
     }
 
+
+    @Test
     public void testWaitForAliasCreationMultipleShards() throws Exception {
         logger.info("--> creating index [test]");
         createIndex("test");
@@ -441,6 +456,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testWaitForAliasCreationSingleShard() throws Exception {
         logger.info("--> creating index [test]");
         assertAcked(admin().indices().create(createIndexRequest("test").settings(settingsBuilder().put("index.numberOfReplicas", 0).put("index.numberOfShards", 1))).get());
@@ -453,6 +469,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testWaitForAliasSimultaneousUpdate() throws Exception {
         final int aliasCount = 10;
 
@@ -480,6 +497,8 @@ public class IndexAliasesIT extends ESIntegTestCase {
         }
     }
 
+
+    @Test
     public void testSameAlias() throws Exception {
         logger.info("--> creating index [test]");
         assertAcked(prepareCreate("test").addMapping("type", "name", "type=string"));
@@ -521,20 +540,18 @@ public class IndexAliasesIT extends ESIntegTestCase {
 
     }
 
+    @Test(expected = AliasesNotFoundException.class)
     public void testIndicesRemoveNonExistingAliasResponds404() throws Exception {
         logger.info("--> creating index [test]");
         createIndex("test");
         ensureGreen();
         logger.info("--> deleting alias1 which does not exist");
-        try {
-            admin().indices().prepareAliases().removeAlias("test", "alias1").get();
-            fail("Expected AliasesNotFoundException");
-        } catch (AliasesNotFoundException e) {
-            assertThat(e.getMessage(), containsString("[alias1] missing"));
-        }
+        assertAcked((admin().indices().prepareAliases().removeAlias("test", "alias1")));
     }
 
+    @Test
     public void testIndicesGetAliases() throws Exception {
+
         logger.info("--> creating indices [foobar, test, test123, foobarbaz, bazbar]");
         createIndex("foobar");
         createIndex("test");
@@ -719,6 +736,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         assertThat(existsResponse.exists(), equalTo(false));
     }
 
+    @Test
     public void testAddAliasNullWithoutExistingIndices() {
         try {
             assertAcked(admin().indices().prepareAliases().addAliasAction(AliasAction.newAddAliasAction(null, "alias1")));
@@ -729,6 +747,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testAddAliasNullWithExistingIndices() throws Exception {
         logger.info("--> creating index [test]");
         createIndex("test");
@@ -745,89 +764,64 @@ public class IndexAliasesIT extends ESIntegTestCase {
         }
     }
 
+    @Test(expected = ActionRequestValidationException.class)
     public void testAddAliasEmptyIndex() {
-        try {
-            admin().indices().prepareAliases().addAliasAction(AliasAction.newAddAliasAction("", "alias1")).get();
-            fail("Expected ActionRequestValidationException");
-        } catch (ActionRequestValidationException e) {
-            assertThat(e.getMessage(), containsString("[index] may not be empty string"));
-        }
+        admin().indices().prepareAliases().addAliasAction(AliasAction.newAddAliasAction("", "alias1")).get();
     }
 
+    @Test(expected = ActionRequestValidationException.class)
     public void testAddAliasNullAlias() {
-        try {
-            admin().indices().prepareAliases().addAliasAction(AliasAction.newAddAliasAction("index1", null)).get();
-            fail("Expected ActionRequestValidationException");
-        } catch (ActionRequestValidationException e) {
-            assertThat(e.getMessage(), containsString("requires an [alias] to be set"));
-        }
+        admin().indices().prepareAliases().addAliasAction(AliasAction.newAddAliasAction("index1", null)).get();
     }
 
+    @Test(expected = ActionRequestValidationException.class)
     public void testAddAliasEmptyAlias() {
-        try {
-            admin().indices().prepareAliases().addAliasAction(AliasAction.newAddAliasAction("index1", "")).get();
-            fail("Expected ActionRequestValidationException");
-        } catch (ActionRequestValidationException e) {
-            assertThat(e.getMessage(), containsString("requires an [alias] to be set"));
-        }
+        admin().indices().prepareAliases().addAliasAction(AliasAction.newAddAliasAction("index1", "")).get();
     }
 
+    @Test
     public void testAddAliasNullAliasNullIndex() {
         try {
             admin().indices().prepareAliases().addAliasAction(AliasAction.newAddAliasAction(null, null)).get();
-            fail("Should throw " + ActionRequestValidationException.class.getSimpleName());
+            assertTrue("Should throw " + ActionRequestValidationException.class.getSimpleName(), false);
         } catch (ActionRequestValidationException e) {
             assertThat(e.validationErrors(), notNullValue());
             assertThat(e.validationErrors().size(), equalTo(2));
         }
     }
 
+    @Test
     public void testAddAliasEmptyAliasEmptyIndex() {
         try {
             admin().indices().prepareAliases().addAliasAction(AliasAction.newAddAliasAction("", "")).get();
-            fail("Should throw " + ActionRequestValidationException.class.getSimpleName());
+            assertTrue("Should throw " + ActionRequestValidationException.class.getSimpleName(), false);
         } catch (ActionRequestValidationException e) {
             assertThat(e.validationErrors(), notNullValue());
             assertThat(e.validationErrors().size(), equalTo(2));
         }
     }
 
-    public void testRemoveAliasNullIndex() {
-        try {
-            admin().indices().prepareAliases().addAliasAction(AliasAction.newRemoveAliasAction(null, "alias1")).get();
-            fail("Expected ActionRequestValidationException");
-        } catch (ActionRequestValidationException e) {
-            assertThat(e.getMessage(), containsString("[index] may not be empty string"));
-        }
+    @Test(expected = ActionRequestValidationException.class)
+    public void tesRemoveAliasNullIndex() {
+        admin().indices().prepareAliases().addAliasAction(AliasAction.newRemoveAliasAction(null, "alias1")).get();
     }
 
-    public void testRemoveAliasEmptyIndex() {
-        try {
-            admin().indices().prepareAliases().addAliasAction(AliasAction.newRemoveAliasAction("", "alias1")).get();
-            fail("Expected ActionRequestValidationException");
-        } catch (ActionRequestValidationException e) {
-            assertThat(e.getMessage(), containsString("[index] may not be empty string"));
-        }
+    @Test(expected = ActionRequestValidationException.class)
+    public void tesRemoveAliasEmptyIndex() {
+        admin().indices().prepareAliases().addAliasAction(AliasAction.newRemoveAliasAction("", "alias1")).get();
     }
 
-    public void testRemoveAliasNullAlias() {
-        try {
-            admin().indices().prepareAliases().addAliasAction(AliasAction.newRemoveAliasAction("index1", null)).get();
-            fail("Expected ActionRequestValidationException");
-        } catch (ActionRequestValidationException e) {
-            assertThat(e.getMessage(), containsString("[alias] may not be empty string"));
-        }
+    @Test(expected = ActionRequestValidationException.class)
+    public void tesRemoveAliasNullAlias() {
+        admin().indices().prepareAliases().addAliasAction(AliasAction.newRemoveAliasAction("index1", null)).get();
     }
 
-    public void testRemoveAliasEmptyAlias() {
-        try {
-            admin().indices().prepareAliases().addAliasAction(AliasAction.newRemoveAliasAction("index1", "")).get();
-            fail("Expected ActionRequestValidationException");
-        } catch (ActionRequestValidationException e) {
-            assertThat(e.getMessage(), containsString("[alias] may not be empty string"));
-        }
+    @Test(expected = ActionRequestValidationException.class)
+    public void tesRemoveAliasEmptyAlias() {
+        admin().indices().prepareAliases().addAliasAction(AliasAction.newRemoveAliasAction("index1", "")).get();
     }
 
+    @Test
     public void testRemoveAliasNullAliasNullIndex() {
         try {
             admin().indices().prepareAliases().addAliasAction(AliasAction.newRemoveAliasAction(null, null)).get();
@@ -838,6 +832,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testRemoveAliasEmptyAliasEmptyIndex() {
         try {
             admin().indices().prepareAliases().addAliasAction(AliasAction.newAddAliasAction("", "")).get();
@@ -848,6 +843,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testGetAllAliasesWorks() {
         createIndex("index1");
         createIndex("index2");
@@ -861,6 +857,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         assertThat(response.getAliases(), hasKey("index1"));
     }
 
+    @Test
     public void testCreateIndexWithAliases() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type", "field", "type=string")
@@ -871,6 +868,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         checkAliases();
     }
 
+    @Test
     public void testCreateIndexWithAliasesInSource() throws Exception {
         assertAcked(prepareCreate("test").setSource("{\n" +
                 "    \"aliases\" : {\n" +
@@ -883,6 +881,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         checkAliases();
     }
 
+    @Test
     public void testCreateIndexWithAliasesSource() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type", "field", "type=string")
@@ -895,6 +894,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         checkAliases();
     }
 
+    @Test
     public void testCreateIndexWithAliasesFilterNotValid() {
         //non valid filter, invalid json
         CreateIndexRequestBuilder createIndexRequestBuilder = prepareCreate("test").addAlias(new Alias("alias2").filter("f"));
@@ -917,6 +917,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     // Before 2.0 alias filters were parsed at alias creation time, in order
     // for filters to work correctly ES required that fields mentioned in those
     // filters exist in the mapping.
@@ -935,6 +936,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
                 .get();
     }
 
+    @Test
     public void testAliasFilterWithNowInRangeFilterAndQuery() throws Exception {
         assertAcked(prepareCreate("my-index").addMapping("my-type", "_timestamp", "enabled=true"));
         assertAcked(admin().indices().prepareAliases().addAlias("my-index", "filter1", rangeQuery("_timestamp").from("now-1d").to("now")));
@@ -954,6 +956,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testAliasesFilterWithHasChildQuery() throws Exception {
         assertAcked(prepareCreate("my-index")
                         .addMapping("parent")
@@ -974,6 +977,7 @@ public class IndexAliasesIT extends ESIntegTestCase {
         assertThat(response.getHits().getAt(0).id(), equalTo("2"));
     }
 
+    @Test
     public void testAliasesWithBlocks() {
         createIndex("test");
         ensureGreen();
diff --git a/core/src/test/java/org/elasticsearch/benchmark/search/aggregations/TimeDataHistogramAggregationBenchmark.java b/core/src/test/java/org/elasticsearch/benchmark/search/aggregations/TimeDataHistogramAggregationBenchmark.java
index efdf7b9..0e16b07 100644
--- a/core/src/test/java/org/elasticsearch/benchmark/search/aggregations/TimeDataHistogramAggregationBenchmark.java
+++ b/core/src/test/java/org/elasticsearch/benchmark/search/aggregations/TimeDataHistogramAggregationBenchmark.java
@@ -143,7 +143,7 @@ public class TimeDataHistogramAggregationBenchmark {
             System.out.println("Time range 1: " + (currentTimeInMillis1[0] - startTimeInMillis) / 1000.0 / 3600 + " hours");
             System.out.println("Time range 2: " + (currentTimeInMillis2[0] - startTimeInMillis) / 1000.0 / 3600 + " hours");
             System.out.println("--> optimizing index");
-            client.admin().indices().prepareOptimize().setMaxNumSegments(1).get();
+            client.admin().indices().prepareForceMerge().setMaxNumSegments(1).get();
         } catch (IndexAlreadyExistsException e) {
             System.out.println("--> Index already exists, ignoring indexing phase, waiting for green");
             ClusterHealthResponse clusterHealthResponse = client.admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("10m").execute().actionGet();
diff --git a/core/src/test/java/org/elasticsearch/blocks/SimpleBlocksIT.java b/core/src/test/java/org/elasticsearch/blocks/SimpleBlocksIT.java
index f7270ca..d256c6a 100644
--- a/core/src/test/java/org/elasticsearch/blocks/SimpleBlocksIT.java
+++ b/core/src/test/java/org/elasticsearch/blocks/SimpleBlocksIT.java
@@ -28,6 +28,7 @@ import org.elasticsearch.action.index.IndexResponse;
 import org.elasticsearch.cluster.block.ClusterBlockException;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.HashMap;
 
@@ -36,7 +37,9 @@ import static org.hamcrest.Matchers.notNullValue;
 
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST)
 public class SimpleBlocksIT extends ESIntegTestCase {
-    public void testVerifyIndexAndClusterReadOnly() throws Exception {
+    
+    @Test
+    public void verifyIndexAndClusterReadOnly() throws Exception {
         // cluster.read_only = null: write and metadata not blocked
         canCreateIndex("test1");
         canIndexDocument("test1");
@@ -79,6 +82,7 @@ public class SimpleBlocksIT extends ESIntegTestCase {
         canIndexExists("ro");
     }
 
+    @Test
     public void testIndexReadWriteMetaDataBlocks() {
         canCreateIndex("test1");
         canIndexDocument("test1");
diff --git a/core/src/test/java/org/elasticsearch/bootstrap/JNANativesTests.java b/core/src/test/java/org/elasticsearch/bootstrap/JNANativesTests.java
index 4768370..8497f91 100644
--- a/core/src/test/java/org/elasticsearch/bootstrap/JNANativesTests.java
+++ b/core/src/test/java/org/elasticsearch/bootstrap/JNANativesTests.java
@@ -21,16 +21,20 @@ package org.elasticsearch.bootstrap;
 
 import org.apache.lucene.util.Constants;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 
 public class JNANativesTests extends ESTestCase {
+
+    @Test
     public void testMlockall() {
         if (Constants.MAC_OS_X) {
             assertFalse("Memory locking is not available on OS X platforms", JNANatives.LOCAL_MLOCKALL);
         }
     }
-
+    
+    @Test
     public void testConsoleCtrlHandler() {
         if (Constants.WINDOWS) {
             assertNotNull(JNAKernel32Library.getInstance());
diff --git a/core/src/test/java/org/elasticsearch/bootstrap/JavaVersionTests.java b/core/src/test/java/org/elasticsearch/bootstrap/JavaVersionTests.java
index 21bfa05..851e0fd 100644
--- a/core/src/test/java/org/elasticsearch/bootstrap/JavaVersionTests.java
+++ b/core/src/test/java/org/elasticsearch/bootstrap/JavaVersionTests.java
@@ -20,12 +20,14 @@
 package org.elasticsearch.bootstrap;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.List;
 
 import static org.hamcrest.CoreMatchers.is;
 
 public class JavaVersionTests extends ESTestCase {
+    @Test
     public void testParse() {
         JavaVersion javaVersion = JavaVersion.parse("1.7.0");
         List<Integer> version = javaVersion.getVersion();
@@ -35,11 +37,13 @@ public class JavaVersionTests extends ESTestCase {
         assertThat(0, is(version.get(2)));
     }
 
+    @Test
     public void testToString() {
         JavaVersion javaVersion = JavaVersion.parse("1.7.0");
         assertThat("1.7.0", is(javaVersion.toString()));
     }
 
+    @Test
     public void testCompare() {
         JavaVersion onePointSix = JavaVersion.parse("1.6");
         JavaVersion onePointSeven = JavaVersion.parse("1.7");
@@ -57,6 +61,7 @@ public class JavaVersionTests extends ESTestCase {
         assertTrue(onePointSevenPointTwo.compareTo(onePointSevenPointTwoPointOne) < 0);
     }
 
+    @Test
     public void testValidVersions() {
         String[] versions = new String[]{"1.7", "1.7.0", "0.1.7", "1.7.0.80"};
         for (String version : versions) {
@@ -64,6 +69,7 @@ public class JavaVersionTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testInvalidVersions() {
         String[] versions = new String[]{"", "1.7.0_80", "1.7."};
         for (String version : versions) {
diff --git a/core/src/test/java/org/elasticsearch/broadcast/BroadcastActionsIT.java b/core/src/test/java/org/elasticsearch/broadcast/BroadcastActionsIT.java
index 18c1572..4b7f602 100644
--- a/core/src/test/java/org/elasticsearch/broadcast/BroadcastActionsIT.java
+++ b/core/src/test/java/org/elasticsearch/broadcast/BroadcastActionsIT.java
@@ -23,6 +23,7 @@ import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -38,6 +39,7 @@ public class BroadcastActionsIT extends ESIntegTestCase {
         return 1;
     }
 
+    @Test
     public void testBroadcastOperations() throws IOException {
         assertAcked(prepareCreate("test", 1).execute().actionGet(5000));
 
diff --git a/core/src/test/java/org/elasticsearch/bwcompat/BasicAnalysisBackwardCompatibilityIT.java b/core/src/test/java/org/elasticsearch/bwcompat/BasicAnalysisBackwardCompatibilityIT.java
index 07d59b8..3a58d71 100644
--- a/core/src/test/java/org/elasticsearch/bwcompat/BasicAnalysisBackwardCompatibilityIT.java
+++ b/core/src/test/java/org/elasticsearch/bwcompat/BasicAnalysisBackwardCompatibilityIT.java
@@ -19,7 +19,6 @@
 package org.elasticsearch.bwcompat;
 
 import com.carrotsearch.randomizedtesting.generators.RandomPicks;
-
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.util.TestUtil;
 import org.elasticsearch.Version;
@@ -27,6 +26,7 @@ import org.elasticsearch.action.admin.indices.analyze.AnalyzeResponse;
 import org.elasticsearch.indices.analysis.PreBuiltAnalyzers;
 import org.elasticsearch.test.ESBackcompatTestCase;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.List;
@@ -48,8 +48,10 @@ public class BasicAnalysisBackwardCompatibilityIT extends ESBackcompatTestCase {
      * Simple upgrade test for analyzers to make sure they analyze to the same tokens after upgrade
      * TODO we need this for random tokenizers / tokenfilters as well
      */
+    @Test
     public void testAnalyzerTokensAfterUpgrade() throws IOException, ExecutionException, InterruptedException {
         int numFields = randomIntBetween(PreBuiltAnalyzers.values().length, PreBuiltAnalyzers.values().length * 10);
+        StringBuilder builder = new StringBuilder();
         String[] fields = new String[numFields * 2];
         int fieldId = 0;
         for (int i = 0; i < fields.length; i++) {
diff --git a/core/src/test/java/org/elasticsearch/bwcompat/BasicBackwardsCompatibilityIT.java b/core/src/test/java/org/elasticsearch/bwcompat/BasicBackwardsCompatibilityIT.java
index e5ed7f1..2be80f7 100644
--- a/core/src/test/java/org/elasticsearch/bwcompat/BasicBackwardsCompatibilityIT.java
+++ b/core/src/test/java/org/elasticsearch/bwcompat/BasicBackwardsCompatibilityIT.java
@@ -19,7 +19,6 @@
 package org.elasticsearch.bwcompat;
 
 import com.carrotsearch.randomizedtesting.generators.RandomPicks;
-
 import org.apache.lucene.index.Fields;
 import org.apache.lucene.util.English;
 import org.elasticsearch.ExceptionsHelper;
@@ -32,11 +31,7 @@ import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.action.delete.DeleteResponse;
 import org.elasticsearch.action.explain.ExplainResponse;
-import org.elasticsearch.action.get.GetResponse;
-import org.elasticsearch.action.get.MultiGetItemResponse;
-import org.elasticsearch.action.get.MultiGetRequest;
-import org.elasticsearch.action.get.MultiGetRequestBuilder;
-import org.elasticsearch.action.get.MultiGetResponse;
+import org.elasticsearch.action.get.*;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.index.IndexResponse;
 import org.elasticsearch.action.search.SearchRequestBuilder;
@@ -63,6 +58,7 @@ import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESBackcompatTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -70,20 +66,11 @@ import java.util.List;
 import java.util.concurrent.ExecutionException;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
-import static org.elasticsearch.index.query.QueryBuilders.constantScoreQuery;
 import static org.elasticsearch.index.query.QueryBuilders.existsQuery;
 import static org.elasticsearch.index.query.QueryBuilders.missingQuery;
-import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchHits;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
-import static org.hamcrest.Matchers.notNullValue;
+import static org.elasticsearch.index.query.QueryBuilders.*;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
@@ -92,6 +79,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
     /**
      * Basic test using Index &amp; Realtime Get with external versioning. This test ensures routing works correctly across versions.
      */
+    @Test
     public void testExternalVersion() throws Exception {
         createIndex("test");
         final boolean routing = randomBoolean();
@@ -115,6 +103,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
     /**
      * Basic test using Index &amp; Realtime Get with internal versioning. This test ensures routing works correctly across versions.
      */
+    @Test
     public void testInternalVersion() throws Exception {
         createIndex("test");
         final boolean routing = randomBoolean();
@@ -138,6 +127,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
     /**
      * Very basic bw compat test with a mixed version cluster random indexing and lookup by ID via term query
      */
+    @Test
     public void testIndexAndSearch() throws Exception {
         createIndex("test");
         int numDocs = randomIntBetween(10, 20);
@@ -154,6 +144,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
         assertVersionCreated(compatibilityVersion(), "test");
     }
 
+    @Test
     public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException {
         if (backwardsCluster().numNewDataNodes() == 0) {
             backwardsCluster().startNewNode();
@@ -210,6 +201,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
     /**
      * Test that ensures that we will never recover from a newer to an older version (we are not forward compatible)
      */
+    @Test
     public void testNoRecoveryFromNewNodes() throws ExecutionException, InterruptedException {
         assertAcked(prepareCreate("test").setSettings(Settings.builder().put("index.routing.allocation.exclude._name", backwardsCluster().backwardsNodePattern()).put(indexSettings())));
         if (backwardsCluster().numNewDataNodes() == 0) {
@@ -277,6 +269,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
     /**
      * Upgrades a single node to the current version
      */
+    @Test
     public void testIndexUpgradeSingleNode() throws Exception {
         assertAcked(prepareCreate("test").setSettings(Settings.builder().put("index.routing.allocation.exclude._name", backwardsCluster().newNodePattern()).put(indexSettings())));
         ensureYellow();
@@ -315,6 +308,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
      * one node after another is shut down and restarted from a newer version and we verify
      * that all documents are still around after each nodes upgrade.
      */
+    @Test
     public void testIndexRollingUpgrade() throws Exception {
         String[] indices = new String[randomIntBetween(1, 3)];
         for (int i = 0; i < indices.length; i++) {
@@ -377,6 +371,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
     }
 
 
+    @Test
     public void testUnsupportedFeatures() throws IOException {
         XContentBuilder mapping = XContentBuilder.builder(JsonXContent.jsonXContent)
                 .startObject()
@@ -404,6 +399,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
      * This filter had a major upgrade in 1.3 where we started to index the field names. Lets see if they still work as expected...
      * this test is basically copied from SimpleQueryTests...
      */
+    @Test
     public void testExistsFilter() throws IOException, ExecutionException, InterruptedException {
         int indexId = 0;
         String indexName;
@@ -476,6 +472,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
         return client().admin().cluster().prepareState().get().getState().nodes().masterNode().getVersion();
     }
 
+    @Test
     public void testDeleteRoutingRequired() throws ExecutionException, InterruptedException, IOException {
         createIndexWithAlias();
         assertAcked(client().admin().indices().preparePutMapping("test").setType("test").setSource(
@@ -512,6 +509,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
         assertThat(searchResponse.getHits().totalHits(), equalTo((long) numDocs - 1));
     }
 
+    @Test
     public void testIndexGetAndDelete() throws ExecutionException, InterruptedException {
         createIndexWithAlias();
         ensureYellow("test");
@@ -548,6 +546,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
         assertThat(searchResponse.getHits().totalHits(), equalTo((long) numDocs - 1));
     }
 
+    @Test
     public void testUpdate() {
         createIndexWithAlias();
         ensureYellow("test");
@@ -578,6 +577,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
         assertThat(getResponse.getSourceAsMap().containsKey("field2"), equalTo(true));
     }
 
+    @Test
     public void testAnalyze() {
         createIndexWithAlias();
         assertAcked(client().admin().indices().preparePutMapping("test").setType("test").setSource("field", "type=string,analyzer=keyword"));
@@ -587,6 +587,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
         assertThat(analyzeResponse.getTokens().get(0).getTerm(), equalTo("this is a test"));
     }
 
+    @Test
     public void testExplain() {
         createIndexWithAlias();
         ensureYellow("test");
@@ -603,6 +604,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
         assertThat(response.getExplanation().getDetails().length, equalTo(1));
     }
 
+    @Test
     public void testGetTermVector() throws IOException {
         createIndexWithAlias();
         assertAcked(client().admin().indices().preparePutMapping("test").setType("type1").setSource("field", "type=string,term_vector=with_positions_offsets_payloads").get());
@@ -620,6 +622,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
         assertThat(fields.terms("field").size(), equalTo(8l));
     }
 
+    @Test
     public void testIndicesStats() {
         createIndex("test");
         ensureYellow("test");
@@ -629,6 +632,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
         assertThat(indicesStatsResponse.getIndices().containsKey("test"), equalTo(true));
     }
 
+    @Test
     public void testMultiGet() throws ExecutionException, InterruptedException {
         createIndexWithAlias();
         ensureYellow("test");
@@ -661,6 +665,7 @@ public class BasicBackwardsCompatibilityIT extends ESBackcompatTestCase {
 
     }
 
+    @Test
     public void testScroll() throws ExecutionException, InterruptedException {
         createIndex("test");
         ensureYellow("test");
diff --git a/core/src/test/java/org/elasticsearch/bwcompat/ClusterStateBackwardsCompatIT.java b/core/src/test/java/org/elasticsearch/bwcompat/ClusterStateBackwardsCompatIT.java
index 665aa52..ed15589 100644
--- a/core/src/test/java/org/elasticsearch/bwcompat/ClusterStateBackwardsCompatIT.java
+++ b/core/src/test/java/org/elasticsearch/bwcompat/ClusterStateBackwardsCompatIT.java
@@ -30,16 +30,17 @@ import org.elasticsearch.cluster.block.ClusterBlocks;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESBackcompatTestCase;
+import org.junit.Test;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 import static org.hamcrest.Matchers.equalTo;
 
 public class ClusterStateBackwardsCompatIT extends ESBackcompatTestCase {
+
+    @Test
     public void testClusterState() throws Exception {
         createIndex("test");
 
@@ -56,6 +57,7 @@ public class ClusterStateBackwardsCompatIT extends ESBackcompatTestCase {
         }
     }
 
+    @Test
     public void testClusterStateWithBlocks() {
         createIndex("test-blocks");
 
diff --git a/core/src/test/java/org/elasticsearch/bwcompat/GetIndexBackwardsCompatibilityIT.java b/core/src/test/java/org/elasticsearch/bwcompat/GetIndexBackwardsCompatibilityIT.java
index 9a87c88..a7e9380 100644
--- a/core/src/test/java/org/elasticsearch/bwcompat/GetIndexBackwardsCompatibilityIT.java
+++ b/core/src/test/java/org/elasticsearch/bwcompat/GetIndexBackwardsCompatibilityIT.java
@@ -30,6 +30,7 @@ import org.elasticsearch.common.collect.ImmutableOpenMap;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.search.warmer.IndexWarmersMetaData.Entry;
 import org.elasticsearch.test.ESBackcompatTestCase;
+import org.junit.Test;
 
 import java.util.List;
 
@@ -39,6 +40,8 @@ import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.notNullValue;
 
 public class GetIndexBackwardsCompatibilityIT extends ESBackcompatTestCase {
+
+    @Test
     public void testGetAliases() throws Exception {
         CreateIndexResponse createIndexResponse = prepareCreate("test").addAlias(new Alias("testAlias")).execute().actionGet();
         assertAcked(createIndexResponse);
@@ -55,6 +58,7 @@ public class GetIndexBackwardsCompatibilityIT extends ESBackcompatTestCase {
         assertThat(alias.alias(), equalTo("testAlias"));
     }
 
+    @Test
     public void testGetMappings() throws Exception {
         CreateIndexResponse createIndexResponse = prepareCreate("test").addMapping("type1", "{\"type1\":{}}").execute().actionGet();
         assertAcked(createIndexResponse);
@@ -75,6 +79,7 @@ public class GetIndexBackwardsCompatibilityIT extends ESBackcompatTestCase {
         assertThat(mapping.type(), equalTo("type1"));
     }
 
+    @Test
     public void testGetSettings() throws Exception {
         CreateIndexResponse createIndexResponse = prepareCreate("test").setSettings(Settings.builder().put("number_of_shards", 1)).execute().actionGet();
         assertAcked(createIndexResponse);
@@ -88,6 +93,7 @@ public class GetIndexBackwardsCompatibilityIT extends ESBackcompatTestCase {
         assertThat(settings.get("index.number_of_shards"), equalTo("1"));
     }
 
+    @Test
     public void testGetWarmers() throws Exception {
         createIndex("test");
         ensureSearchable("test");
diff --git a/core/src/test/java/org/elasticsearch/bwcompat/NodesStatsBasicBackwardsCompatIT.java b/core/src/test/java/org/elasticsearch/bwcompat/NodesStatsBasicBackwardsCompatIT.java
index 5a82384..8cb9fc7 100644
--- a/core/src/test/java/org/elasticsearch/bwcompat/NodesStatsBasicBackwardsCompatIT.java
+++ b/core/src/test/java/org/elasticsearch/bwcompat/NodesStatsBasicBackwardsCompatIT.java
@@ -25,14 +25,17 @@ import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsRequestBuilde
 import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;
 import org.elasticsearch.client.transport.TransportClient;
 import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.test.ESBackcompatTestCase;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.elasticsearch.test.ESBackcompatTestCase;
+import org.junit.Test;
 
 import java.lang.reflect.Method;
 
 
 @ESIntegTestCase.ClusterScope(scope= ESIntegTestCase.Scope.SUITE,  numClientNodes = 0)
 public class NodesStatsBasicBackwardsCompatIT extends ESBackcompatTestCase {
+
+    @Test
     public void testNodeStatsSetIndices() throws Exception {
         createIndex("test");
 
@@ -51,6 +54,7 @@ public class NodesStatsBasicBackwardsCompatIT extends ESBackcompatTestCase {
         }
     }
 
+    @Test
     public void testNodeStatsSetRandom() throws Exception {
         createIndex("test");
 
diff --git a/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java b/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java
index 6459cc4..990c399 100644
--- a/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java
+++ b/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java
@@ -54,6 +54,7 @@ import org.elasticsearch.test.hamcrest.ElasticsearchAssertions;
 import org.hamcrest.Matchers;
 import org.junit.AfterClass;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -70,6 +71,7 @@ import java.util.Locale;
 import java.util.Map;
 import java.util.SortedSet;
 import java.util.TreeSet;
+import java.util.concurrent.Future;
 
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
@@ -275,6 +277,7 @@ public class OldIndexBackwardsCompatibilityIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testHandlingOfUnsupportedDanglingIndexes() throws Exception {
         setupCluster();
         Collections.shuffle(unsupportedIndexes, getRandom());
diff --git a/core/src/test/java/org/elasticsearch/bwcompat/RecoveryWithUnsupportedIndicesIT.java b/core/src/test/java/org/elasticsearch/bwcompat/RecoveryWithUnsupportedIndicesIT.java
index a573a83..8957485 100644
--- a/core/src/test/java/org/elasticsearch/bwcompat/RecoveryWithUnsupportedIndicesIT.java
+++ b/core/src/test/java/org/elasticsearch/bwcompat/RecoveryWithUnsupportedIndicesIT.java
@@ -20,10 +20,13 @@ package org.elasticsearch.bwcompat;
 
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.node.Node;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.containsString;
 
 public class RecoveryWithUnsupportedIndicesIT extends StaticIndexBackwardCompatibilityIT {
+
+    @Test
     public void testUpgradeStartClusterOn_0_20_6() throws Exception {
         String indexName = "unsupported-0.20.6";
 
diff --git a/core/src/test/java/org/elasticsearch/bwcompat/RestoreBackwardsCompatIT.java b/core/src/test/java/org/elasticsearch/bwcompat/RestoreBackwardsCompatIT.java
index bccd429..740b185 100644
--- a/core/src/test/java/org/elasticsearch/bwcompat/RestoreBackwardsCompatIT.java
+++ b/core/src/test/java/org/elasticsearch/bwcompat/RestoreBackwardsCompatIT.java
@@ -34,6 +34,7 @@ import org.elasticsearch.snapshots.SnapshotInfo;
 import org.elasticsearch.snapshots.SnapshotRestoreException;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.lang.reflect.Modifier;
@@ -50,10 +51,7 @@ import java.util.TreeSet;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.*;
 
 @ClusterScope(scope = Scope.TEST)
 public class RestoreBackwardsCompatIT extends AbstractSnapshotIntegTestCase {
@@ -81,7 +79,8 @@ public class RestoreBackwardsCompatIT extends AbstractSnapshotIntegTestCase {
         }
     }
 
-    public void testRestoreOldSnapshots() throws Exception {
+    @Test
+    public void restoreOldSnapshots() throws Exception {
         String repo = "test_repo";
         String snapshot = "test_1";
         List<String> repoVersions = repoVersions();
@@ -116,6 +115,7 @@ public class RestoreBackwardsCompatIT extends AbstractSnapshotIntegTestCase {
         }
     }
 
+    @Test
     public void testRestoreUnsupportedSnapshots() throws Exception {
         String repo = "test_repo";
         String snapshot = "test_1";
diff --git a/core/src/test/java/org/elasticsearch/bwcompat/TransportClientBackwardsCompatibilityIT.java b/core/src/test/java/org/elasticsearch/bwcompat/TransportClientBackwardsCompatibilityIT.java
index 0e2f94e..e071c17 100644
--- a/core/src/test/java/org/elasticsearch/bwcompat/TransportClientBackwardsCompatibilityIT.java
+++ b/core/src/test/java/org/elasticsearch/bwcompat/TransportClientBackwardsCompatibilityIT.java
@@ -29,6 +29,7 @@ import org.elasticsearch.common.transport.TransportAddress;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.test.CompositeTestCluster;
 import org.elasticsearch.test.ESBackcompatTestCase;
+import org.junit.Test;
 
 import java.util.concurrent.ExecutionException;
 
@@ -37,7 +38,10 @@ import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSear
 import static org.hamcrest.CoreMatchers.equalTo;
 
 public class TransportClientBackwardsCompatibilityIT extends ESBackcompatTestCase {
+
+    @Test
     public void testSniffMode() throws ExecutionException, InterruptedException {
+
         Settings settings = Settings.builder().put(requiredSettings()).put("client.transport.nodes_sampler_interval", "1s")
                 .put("name", "transport_client_sniff_mode").put(ClusterName.SETTING, cluster().getClusterName())
                 .put("client.transport.sniff", true).build();
diff --git a/core/src/test/java/org/elasticsearch/bwcompat/UnicastBackwardsCompatibilityIT.java b/core/src/test/java/org/elasticsearch/bwcompat/UnicastBackwardsCompatibilityIT.java
index ab7e958..59dd669 100644
--- a/core/src/test/java/org/elasticsearch/bwcompat/UnicastBackwardsCompatibilityIT.java
+++ b/core/src/test/java/org/elasticsearch/bwcompat/UnicastBackwardsCompatibilityIT.java
@@ -22,10 +22,12 @@ package org.elasticsearch.bwcompat;
 import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESBackcompatTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 
 public class UnicastBackwardsCompatibilityIT extends ESBackcompatTestCase {
+
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return Settings.builder()
@@ -44,6 +46,7 @@ public class UnicastBackwardsCompatibilityIT extends ESBackcompatTestCase {
                 .build();
     }
 
+    @Test
     public void testUnicastDiscovery() {
         ClusterHealthResponse healthResponse = client().admin().cluster().prepareHealth().get();
         assertThat(healthResponse.getNumberOfDataNodes(), equalTo(cluster().numDataNodes()));
diff --git a/core/src/test/java/org/elasticsearch/client/AbstractClientHeadersTestCase.java b/core/src/test/java/org/elasticsearch/client/AbstractClientHeadersTestCase.java
index b814cff..b00b677 100644
--- a/core/src/test/java/org/elasticsearch/client/AbstractClientHeadersTestCase.java
+++ b/core/src/test/java/org/elasticsearch/client/AbstractClientHeadersTestCase.java
@@ -53,6 +53,7 @@ import org.elasticsearch.threadpool.ThreadPool;
 import org.elasticsearch.transport.TransportMessage;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -71,6 +72,7 @@ public abstract class AbstractClientHeadersTestCase extends ESTestCase {
             .put(Headers.PREFIX + ".key2", "val 2")
             .build();
 
+    @SuppressWarnings("unchecked")
     private static final GenericAction[] ACTIONS = new GenericAction[] {
                 // client actions
                 GetAction.INSTANCE, SearchAction.INSTANCE, DeleteAction.INSTANCE, DeleteIndexedScriptAction.INSTANCE,
@@ -105,6 +107,7 @@ public abstract class AbstractClientHeadersTestCase extends ESTestCase {
     protected abstract Client buildClient(Settings headersSettings, GenericAction[] testedActions);
 
 
+    @Test
     public void testActions() {
 
         // TODO this is a really shitty way to test it, we need to figure out a way to test all the client methods
@@ -131,6 +134,7 @@ public abstract class AbstractClientHeadersTestCase extends ESTestCase {
         client.admin().indices().prepareFlush().execute().addListener(new AssertingActionListener<FlushResponse>(FlushAction.NAME));
     }
 
+    @Test
     public void testOverideHeader() throws Exception {
         String key1Val = randomAsciiOfLength(5);
         Map<String, Object> expected = new HashMap<>();
diff --git a/core/src/test/java/org/elasticsearch/client/node/NodeClientIT.java b/core/src/test/java/org/elasticsearch/client/node/NodeClientIT.java
index 966553b..4999980 100644
--- a/core/src/test/java/org/elasticsearch/client/node/NodeClientIT.java
+++ b/core/src/test/java/org/elasticsearch/client/node/NodeClientIT.java
@@ -21,10 +21,11 @@ package org.elasticsearch.client.node;
 import org.elasticsearch.client.Client;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.hamcrest.Matchers.is;
 
 /**
@@ -32,14 +33,17 @@ import static org.hamcrest.Matchers.is;
  */
 @ClusterScope(scope = Scope.SUITE)
 public class NodeClientIT extends ESIntegTestCase {
+
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return settingsBuilder().put(super.nodeSettings(nodeOrdinal)).put(Client.CLIENT_TYPE_SETTING, "anything").build();
     }
 
+    @Test
     public void testThatClientTypeSettingCannotBeChanged() {
         for (Settings settings : internalCluster().getInstances(Settings.class)) {
             assertThat(settings.get(Client.CLIENT_TYPE_SETTING), is("node"));
         }
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/client/transport/TransportClientHeadersTests.java b/core/src/test/java/org/elasticsearch/client/transport/TransportClientHeadersTests.java
index f4b2976..22d5ba2 100644
--- a/core/src/test/java/org/elasticsearch/client/transport/TransportClientHeadersTests.java
+++ b/core/src/test/java/org/elasticsearch/client/transport/TransportClientHeadersTests.java
@@ -46,6 +46,7 @@ import org.elasticsearch.transport.TransportRequestOptions;
 import org.elasticsearch.transport.TransportResponse;
 import org.elasticsearch.transport.TransportResponseHandler;
 import org.elasticsearch.transport.TransportService;
+import org.junit.Test;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
@@ -74,6 +75,7 @@ public class TransportClientHeadersTests extends AbstractClientHeadersTestCase {
         return client;
     }
 
+    @Test
     public void testWithSniffing() throws Exception {
         TransportClient client = TransportClient.builder()
             .settings(Settings.builder()
diff --git a/core/src/test/java/org/elasticsearch/client/transport/TransportClientIT.java b/core/src/test/java/org/elasticsearch/client/transport/TransportClientIT.java
index 4d82445..144d79d 100644
--- a/core/src/test/java/org/elasticsearch/client/transport/TransportClientIT.java
+++ b/core/src/test/java/org/elasticsearch/client/transport/TransportClientIT.java
@@ -28,11 +28,12 @@ import org.elasticsearch.node.Node;
 import org.elasticsearch.node.internal.InternalSettingsPreparer;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.transport.TransportService;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.node.NodeBuilder.nodeBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.hamcrest.Matchers.is;
@@ -40,6 +41,8 @@ import static org.hamcrest.Matchers.startsWith;
 
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0, transportClientRatio = 1.0)
 public class TransportClientIT extends ESIntegTestCase {
+
+    @Test
     public void testPickingUpChangesInDiscoveryNode() {
         String nodeName = internalCluster().startNode(Settings.builder().put("node.data", false));
 
@@ -48,6 +51,7 @@ public class TransportClientIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testNodeVersionIsUpdated() {
         TransportClient client = (TransportClient)  internalCluster().client();
         TransportClientNodesService nodeService = client.nodeService();
@@ -81,12 +85,14 @@ public class TransportClientIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testThatTransportClientSettingIsSet() {
         TransportClient client = (TransportClient)  internalCluster().client();
         Settings settings = client.injector.getInstance(Settings.class);
         assertThat(settings.get(Client.CLIENT_TYPE_SETTING), is("transport"));
     }
 
+    @Test
     public void testThatTransportClientSettingCannotBeChanged() {
         Settings baseSettings = settingsBuilder().put(Client.CLIENT_TYPE_SETTING, "anything").put("path.home", createTempDir()).build();
         try (TransportClient client = TransportClient.builder().settings(baseSettings).build()) {
diff --git a/core/src/test/java/org/elasticsearch/client/transport/TransportClientNodesServiceTests.java b/core/src/test/java/org/elasticsearch/client/transport/TransportClientNodesServiceTests.java
index 89b39f4..98cef97 100644
--- a/core/src/test/java/org/elasticsearch/client/transport/TransportClientNodesServiceTests.java
+++ b/core/src/test/java/org/elasticsearch/client/transport/TransportClientNodesServiceTests.java
@@ -28,12 +28,8 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.transport.LocalTransportAddress;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.threadpool.ThreadPool;
-import org.elasticsearch.transport.BaseTransportResponseHandler;
-import org.elasticsearch.transport.TransportException;
-import org.elasticsearch.transport.TransportRequest;
-import org.elasticsearch.transport.TransportRequestOptions;
-import org.elasticsearch.transport.TransportResponse;
-import org.elasticsearch.transport.TransportService;
+import org.elasticsearch.transport.*;
+import org.junit.Test;
 
 import java.io.Closeable;
 import java.util.Collections;
@@ -43,9 +39,7 @@ import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.hamcrest.CoreMatchers.instanceOf;
-import static org.hamcrest.CoreMatchers.nullValue;
+import static org.hamcrest.CoreMatchers.*;
 import static org.hamcrest.Matchers.lessThanOrEqualTo;
 import static org.hamcrest.Matchers.notNullValue;
 
@@ -95,7 +89,9 @@ public class TransportClientNodesServiceTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testListenerFailures() throws InterruptedException {
+
         int iters = iterations(10, 100);
         for (int i = 0; i <iters; i++) {
             try(final TestIteration iteration = new TestIteration()) {
diff --git a/core/src/test/java/org/elasticsearch/client/transport/TransportClientRetryIT.java b/core/src/test/java/org/elasticsearch/client/transport/TransportClientRetryIT.java
index b28fdba..020106a 100644
--- a/core/src/test/java/org/elasticsearch/client/transport/TransportClientRetryIT.java
+++ b/core/src/test/java/org/elasticsearch/client/transport/TransportClientRetryIT.java
@@ -29,22 +29,26 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.transport.TransportAddress;
 import org.elasticsearch.node.internal.InternalSettingsPreparer;
 import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.elasticsearch.transport.TransportService;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.concurrent.ExecutionException;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 
 @ClusterScope(scope = Scope.TEST, numClientNodes = 0)
 @TestLogging("discovery.zen:TRACE")
 public class TransportClientRetryIT extends ESIntegTestCase {
+
+    @Test
     public void testRetry() throws IOException, ExecutionException, InterruptedException {
+
         Iterable<TransportService> instances = internalCluster().getInstances(TransportService.class);
         TransportAddress[] addresses = new TransportAddress[internalCluster().size()];
         int i = 0;
diff --git a/core/src/test/java/org/elasticsearch/cluster/ClusterHealthIT.java b/core/src/test/java/org/elasticsearch/cluster/ClusterHealthIT.java
index b90a022..f34f693 100644
--- a/core/src/test/java/org/elasticsearch/cluster/ClusterHealthIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/ClusterHealthIT.java
@@ -23,11 +23,15 @@ import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
 import org.elasticsearch.action.admin.cluster.health.ClusterHealthStatus;
 import org.elasticsearch.common.Priority;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 
 public class ClusterHealthIT extends ESIntegTestCase {
-    public void testSimpleLocalHealth() {
+
+
+    @Test
+    public void simpleLocalHealthTest() {
         createIndex("test");
         ensureGreen(); // master should thing it's green now.
 
@@ -39,6 +43,7 @@ public class ClusterHealthIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testHealth() {
         logger.info("--> running cluster health on an index that does not exists");
         ClusterHealthResponse healthResponse = client().admin().cluster().prepareHealth("test1").setWaitForYellowStatus().setTimeout("1s").execute().actionGet();
diff --git a/core/src/test/java/org/elasticsearch/cluster/ClusterInfoServiceIT.java b/core/src/test/java/org/elasticsearch/cluster/ClusterInfoServiceIT.java
index 1cce41e..f938a78 100644
--- a/core/src/test/java/org/elasticsearch/cluster/ClusterInfoServiceIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/ClusterInfoServiceIT.java
@@ -52,6 +52,7 @@ import org.elasticsearch.transport.TransportRequest;
 import org.elasticsearch.transport.TransportRequestOptions;
 import org.elasticsearch.transport.TransportService;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Collection;
@@ -136,6 +137,7 @@ public class ClusterInfoServiceIT extends ESIntegTestCase {
                 MockTransportService.TestPlugin.class);
     }
 
+    @Test
     public void testClusterInfoServiceCollectsInformation() throws Exception {
         internalCluster().startNodesAsync(2,
                 Settings.builder().put(InternalClusterInfoService.INTERNAL_CLUSTER_INFO_UPDATE_INTERVAL, "200ms").build())
@@ -185,6 +187,7 @@ public class ClusterInfoServiceIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testClusterInfoServiceInformationClearOnError() throws InterruptedException, ExecutionException {
         internalCluster().startNodesAsync(2,
                 // manually control publishing
diff --git a/core/src/test/java/org/elasticsearch/cluster/ClusterServiceIT.java b/core/src/test/java/org/elasticsearch/cluster/ClusterServiceIT.java
index 96a865f..aab7e89 100644
--- a/core/src/test/java/org/elasticsearch/cluster/ClusterServiceIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/ClusterServiceIT.java
@@ -37,29 +37,21 @@ import org.elasticsearch.discovery.zen.ZenDiscovery;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.InternalTestCluster;
 import org.elasticsearch.test.MockLogAppender;
 import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.elasticsearch.threadpool.ThreadPool;
+import org.junit.Test;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
@@ -73,6 +65,7 @@ public class ClusterServiceIT extends ESIntegTestCase {
         return pluginList(TestPlugin.class);
     }
 
+    @Test
     public void testTimeoutUpdateTask() throws Exception {
         Settings settings = settingsBuilder()
                 .put("discovery.type", "local")
@@ -141,6 +134,7 @@ public class ClusterServiceIT extends ESIntegTestCase {
         assertThat(executeCalled.get(), equalTo(false));
     }
 
+    @Test
     public void testAckedUpdateTask() throws Exception {
         Settings settings = settingsBuilder()
                 .put("discovery.type", "local")
@@ -217,6 +211,7 @@ public class ClusterServiceIT extends ESIntegTestCase {
         assertThat(processedLatch.await(1, TimeUnit.SECONDS), equalTo(true));
     }
 
+    @Test
     public void testAckedUpdateTaskSameClusterState() throws Exception {
         Settings settings = settingsBuilder()
                 .put("discovery.type", "local")
@@ -288,6 +283,7 @@ public class ClusterServiceIT extends ESIntegTestCase {
         assertThat(processedLatch.await(1, TimeUnit.SECONDS), equalTo(true));
     }
 
+    @Test
     public void testMasterAwareExecution() throws Exception {
         Settings settings = settingsBuilder()
                 .put("discovery.type", "local")
@@ -344,6 +340,7 @@ public class ClusterServiceIT extends ESIntegTestCase {
         assertFalse("non-master cluster state update task was not executed", taskFailed[0]);
     }
 
+    @Test
     public void testAckedUpdateTaskNoAckExpected() throws Exception {
         Settings settings = settingsBuilder()
                 .put("discovery.type", "local")
@@ -416,6 +413,7 @@ public class ClusterServiceIT extends ESIntegTestCase {
         assertThat(onFailure.get(), equalTo(false));
     }
 
+    @Test
     public void testAckedUpdateTaskTimeoutZero() throws Exception {
         Settings settings = settingsBuilder()
                 .put("discovery.type", "local")
@@ -492,6 +490,7 @@ public class ClusterServiceIT extends ESIntegTestCase {
         assertThat(processedLatch.await(1, TimeUnit.SECONDS), equalTo(true));
     }
 
+    @Test
     public void testPendingUpdateTask() throws Exception {
         Settings settings = settingsBuilder()
                 .put("discovery.type", "local")
@@ -627,6 +626,7 @@ public class ClusterServiceIT extends ESIntegTestCase {
         block2.countDown();
     }
 
+    @Test
     public void testLocalNodeMasterListenerCallbacks() throws Exception {
         Settings settings = settingsBuilder()
                 .put("discovery.type", "zen")
@@ -705,6 +705,7 @@ public class ClusterServiceIT extends ESIntegTestCase {
     /**
      * Note, this test can only work as long as we have a single thread executor executing the state update tasks!
      */
+    @Test
     public void testPrioritizedTasks() throws Exception {
         Settings settings = settingsBuilder()
                 .put("discovery.type", "local")
@@ -737,6 +738,7 @@ public class ClusterServiceIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     @TestLogging("cluster:TRACE") // To ensure that we log cluster state events on TRACE level
     public void testClusterStateUpdateLogging() throws Exception {
         Settings settings = settingsBuilder()
@@ -826,6 +828,7 @@ public class ClusterServiceIT extends ESIntegTestCase {
         mockAppender.assertAllExpectationsMatched();
     }
 
+    @Test
     @TestLogging("cluster:WARN") // To ensure that we log cluster state events on WARN level
     public void testLongClusterStateUpdateLogging() throws Exception {
         Settings settings = settingsBuilder()
diff --git a/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffIT.java b/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffIT.java
index c2e646d..301dc8b 100644
--- a/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffIT.java
@@ -53,6 +53,7 @@ import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.search.builder.SearchSourceBuilder;
 import org.elasticsearch.search.warmer.IndexWarmersMetaData;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Collections;
 import java.util.List;
@@ -70,6 +71,8 @@ import static org.hamcrest.Matchers.is;
 
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.SUITE, numDataNodes = 0, numClientNodes = 0)
 public class ClusterStateDiffIT extends ESIntegTestCase {
+
+    @Test
     public void testClusterStateDiffSerialization() throws Exception {
         DiscoveryNode masterNode = new DiscoveryNode("master", new LocalTransportAddress("master"), Version.CURRENT);
         DiscoveryNode otherNode = new DiscoveryNode("other", new LocalTransportAddress("other"), Version.CURRENT);
diff --git a/core/src/test/java/org/elasticsearch/cluster/ClusterStateTests.java b/core/src/test/java/org/elasticsearch/cluster/ClusterStateTests.java
index 9ee095e..19f90f2 100644
--- a/core/src/test/java/org/elasticsearch/cluster/ClusterStateTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/ClusterStateTests.java
@@ -18,6 +18,7 @@
  */
 package org.elasticsearch.cluster;
 
+import com.carrotsearch.randomizedtesting.annotations.Repeat;
 import org.elasticsearch.Version;
 import org.elasticsearch.cluster.node.DiscoveryNode;
 import org.elasticsearch.cluster.node.DiscoveryNodes;
diff --git a/core/src/test/java/org/elasticsearch/cluster/DiskUsageTests.java b/core/src/test/java/org/elasticsearch/cluster/DiskUsageTests.java
index e48ca83..595dbc9 100644
--- a/core/src/test/java/org/elasticsearch/cluster/DiskUsageTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/DiskUsageTests.java
@@ -33,13 +33,16 @@ import org.elasticsearch.index.shard.ShardPath;
 import org.elasticsearch.index.store.StoreStats;
 import org.elasticsearch.monitor.fs.FsInfo;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.nio.file.Path;
 
 import static org.hamcrest.Matchers.equalTo;
 
 public class DiskUsageTests extends ESTestCase {
-    public void testDiskUsageCalc() {
+
+    @Test
+    public void diskUsageCalcTest() {
         DiskUsage du = new DiskUsage("node1", "n1", "random", 100, 40);
         assertThat(du.getFreeDiskAsPercentage(), equalTo(40.0));
         assertThat(du.getUsedDiskAsPercentage(), equalTo(100.0 - 40.0));
@@ -68,7 +71,8 @@ public class DiskUsageTests extends ESTestCase {
         assertThat(du4.getTotalBytes(), equalTo(0L));
     }
 
-    public void testRandomDiskUsage() {
+    @Test
+    public void randomDiskUsageTest() {
         int iters = scaledRandomIntBetween(1000, 10000);
         for (int i = 1; i < iters; i++) {
             long total = between(Integer.MIN_VALUE, Integer.MAX_VALUE);
diff --git a/core/src/test/java/org/elasticsearch/cluster/MinimumMasterNodesIT.java b/core/src/test/java/org/elasticsearch/cluster/MinimumMasterNodesIT.java
index 1ae8398..bb1b381 100644
--- a/core/src/test/java/org/elasticsearch/cluster/MinimumMasterNodesIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/MinimumMasterNodesIT.java
@@ -34,16 +34,12 @@ import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.disruption.NetworkDelaysPartition;
 import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.elasticsearch.test.transport.MockTransportService;
+import org.junit.Test;
 
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
+import java.util.*;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
@@ -51,15 +47,9 @@ import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Predicate;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoTimeout;
-import static org.hamcrest.Matchers.empty;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.isOneOf;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.nullValue;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
+import static org.hamcrest.Matchers.*;
 
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0)
 @ESIntegTestCase.SuppressLocalMode
@@ -72,8 +62,9 @@ public class MinimumMasterNodesIT extends ESIntegTestCase {
         return classes;
     }
 
+    @Test
     @TestLogging("cluster.service:TRACE,discovery.zen:TRACE,gateway:TRACE,transport.tracer:TRACE")
-    public void testSimpleMinimumMasterNodes() throws Exception {
+    public void simpleMinimumMasterNodes() throws Exception {
 
         Settings settings = settingsBuilder()
                 .put("discovery.type", "zen")
@@ -186,7 +177,8 @@ public class MinimumMasterNodesIT extends ESIntegTestCase {
         }
     }
 
-    public void testMultipleNodesShutdownNonMasterNodes() throws Exception {
+    @Test
+    public void multipleNodesShutdownNonMasterNodes() throws Exception {
         Settings settings = settingsBuilder()
                 .put("discovery.type", "zen")
                 .put("discovery.zen.minimum_master_nodes", 3)
@@ -262,7 +254,8 @@ public class MinimumMasterNodesIT extends ESIntegTestCase {
         }
     }
 
-    public void testDynamicUpdateMinimumMasterNodes() throws Exception {
+    @Test
+    public void dynamicUpdateMinimumMasterNodes() throws Exception {
         Settings settings = settingsBuilder()
                 .put("discovery.type", "zen")
                 .put(ZenDiscovery.SETTING_PING_TIMEOUT, "400ms")
@@ -319,6 +312,7 @@ public class MinimumMasterNodesIT extends ESIntegTestCase {
         );
     }
 
+    @Test
     public void testCanNotBringClusterDown() throws ExecutionException, InterruptedException {
         int nodeCount = scaledRandomIntBetween(1, 5);
         Settings.Builder settings = settingsBuilder()
diff --git a/core/src/test/java/org/elasticsearch/cluster/NoMasterNodeIT.java b/core/src/test/java/org/elasticsearch/cluster/NoMasterNodeIT.java
index e0f8b2c..bcc5ede 100644
--- a/core/src/test/java/org/elasticsearch/cluster/NoMasterNodeIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/NoMasterNodeIT.java
@@ -39,23 +39,22 @@ import org.elasticsearch.script.ScriptService;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import java.util.HashMap;
 
 import static org.elasticsearch.action.percolate.PercolateSourceBuilder.docBuilder;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertExists;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertThrows;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.lessThan;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0)
 @ESIntegTestCase.SuppressLocalMode
 public class NoMasterNodeIT extends ESIntegTestCase {
+
+    @Test
     public void testNoMasterActions() throws Exception {
         // note, sometimes, we want to check with the fact that an index gets created, sometimes not...
         boolean autoCreateIndex = randomBoolean();
@@ -212,7 +211,8 @@ public class NoMasterNodeIT extends ESIntegTestCase {
         }
     }
 
-    public void testNoMasterActionsWriteMasterBlock() throws Exception {
+    @Test
+    public void testNoMasterActions_writeMasterBlock() throws Exception {
         Settings settings = settingsBuilder()
                 .put("discovery.type", "zen")
                 .put("action.auto_create_index", false)
diff --git a/core/src/test/java/org/elasticsearch/cluster/SimpleClusterStateIT.java b/core/src/test/java/org/elasticsearch/cluster/SimpleClusterStateIT.java
index d78356c..8433ace 100644
--- a/core/src/test/java/org/elasticsearch/cluster/SimpleClusterStateIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/SimpleClusterStateIT.java
@@ -34,12 +34,11 @@ import org.elasticsearch.index.IndexNotFoundException;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.hamcrest.CollectionAssertions;
 import org.junit.Before;
+import org.junit.Test;
 
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertIndexTemplateExists;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.*;
 
 /**
  * Checking simple filtering capabilites of the cluster state
@@ -55,6 +54,7 @@ public class SimpleClusterStateIT extends ESIntegTestCase {
         refresh();
     }
 
+    @Test
     public void testRoutingTable() throws Exception {
         ClusterStateResponse clusterStateResponseUnfiltered = client().admin().cluster().prepareState().clear().setRoutingTable(true).get();
         assertThat(clusterStateResponseUnfiltered.getState().routingTable().hasIndex("foo"), is(true));
@@ -69,6 +69,7 @@ public class SimpleClusterStateIT extends ESIntegTestCase {
         assertThat(clusterStateResponse.getState().routingTable().hasIndex("non-existent"), is(false));
     }
 
+    @Test
     public void testNodes() throws Exception {
         ClusterStateResponse clusterStateResponse = client().admin().cluster().prepareState().clear().setNodes(true).get();
         assertThat(clusterStateResponse.getState().nodes().nodes().size(), is(cluster().size()));
@@ -77,6 +78,7 @@ public class SimpleClusterStateIT extends ESIntegTestCase {
         assertThat(clusterStateResponseFiltered.getState().nodes().nodes().size(), is(0));
     }
 
+    @Test
     public void testMetadata() throws Exception {
         ClusterStateResponse clusterStateResponseUnfiltered = client().admin().cluster().prepareState().clear().setMetaData(true).get();
         assertThat(clusterStateResponseUnfiltered.getState().metaData().indices().size(), is(3));
@@ -85,6 +87,7 @@ public class SimpleClusterStateIT extends ESIntegTestCase {
         assertThat(clusterStateResponse.getState().metaData().indices().size(), is(0));
     }
 
+    @Test
     public void testIndexTemplates() throws Exception {
         client().admin().indices().preparePutTemplate("foo_template")
                 .setTemplate("te*")
@@ -110,6 +113,7 @@ public class SimpleClusterStateIT extends ESIntegTestCase {
         assertIndexTemplateExists(getIndexTemplatesResponse, "foo_template");
     }
 
+    @Test
     public void testThatFilteringByIndexWorksForMetadataAndRoutingTable() throws Exception {
         ClusterStateResponse clusterStateResponseFiltered = client().admin().cluster().prepareState().clear()
                 .setMetaData(true).setRoutingTable(true).setIndices("foo", "fuu", "non-existent").get();
@@ -125,6 +129,7 @@ public class SimpleClusterStateIT extends ESIntegTestCase {
         assertThat(clusterStateResponseFiltered.getState().routingTable().hasIndex("baz"), is(false));
     }
 
+    @Test
     public void testLargeClusterStatePublishing() throws Exception {
         int estimatedBytesSize = scaledRandomIntBetween(ByteSizeValue.parseBytesSizeValue("10k", "estimatedBytesSize").bytesAsInt(),
                                                         ByteSizeValue.parseBytesSizeValue("256k", "estimatedBytesSize").bytesAsInt());
@@ -157,6 +162,7 @@ public class SimpleClusterStateIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testIndicesOptions() throws Exception {
         ClusterStateResponse clusterStateResponse = client().admin().cluster().prepareState().clear().setMetaData(true).setIndices("f*")
                 .get();
@@ -189,25 +195,17 @@ public class SimpleClusterStateIT extends ESIntegTestCase {
         assertThat(clusterStateResponse.getState().metaData().indices().isEmpty(), is(true));
     }
 
+    @Test(expected=IndexNotFoundException.class)
     public void testIndicesOptionsOnAllowNoIndicesFalse() throws Exception {
         // empty wildcard expansion throws exception when allowNoIndices is turned off
         IndicesOptions allowNoIndices = IndicesOptions.fromOptions(false, false, true, false);
-        try {
-            client().admin().cluster().prepareState().clear().setMetaData(true).setIndices("a*").setIndicesOptions(allowNoIndices).get();
-            fail("Expected IndexNotFoundException");
-        } catch (IndexNotFoundException e) {
-            assertThat(e.getMessage(), is("no such index"));
-        }
+        client().admin().cluster().prepareState().clear().setMetaData(true).setIndices("a*").setIndicesOptions(allowNoIndices).get();
     }
 
+    @Test(expected=IndexNotFoundException.class)
     public void testIndicesIgnoreUnavailableFalse() throws Exception {
         // ignore_unavailable set to false throws exception when allowNoIndices is turned off
         IndicesOptions allowNoIndices = IndicesOptions.fromOptions(false, true, true, false);
-        try {
-            client().admin().cluster().prepareState().clear().setMetaData(true).setIndices("fzzbzz").setIndicesOptions(allowNoIndices).get();
-            fail("Expected IndexNotFoundException");
-        } catch (IndexNotFoundException e) {
-            assertThat(e.getMessage(), is("no such index"));
-        }
+        client().admin().cluster().prepareState().clear().setMetaData(true).setIndices("fzzbzz").setIndicesOptions(allowNoIndices).get();
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/cluster/SimpleDataNodesIT.java b/core/src/test/java/org/elasticsearch/cluster/SimpleDataNodesIT.java
index bc3aea4..2979b1e 100644
--- a/core/src/test/java/org/elasticsearch/cluster/SimpleDataNodesIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/SimpleDataNodesIT.java
@@ -25,11 +25,12 @@ import org.elasticsearch.client.Requests;
 import org.elasticsearch.common.Priority;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import static org.elasticsearch.client.Requests.createIndexRequest;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.common.unit.TimeValue.timeValueSeconds;
+import static org.elasticsearch.test.ESIntegTestCase.*;
 import static org.hamcrest.Matchers.equalTo;
 
 /**
@@ -37,6 +38,8 @@ import static org.hamcrest.Matchers.equalTo;
  */
 @ClusterScope(scope= Scope.TEST, numDataNodes =0)
 public class SimpleDataNodesIT extends ESIntegTestCase {
+
+    @Test
     public void testDataNodes() throws Exception {
         internalCluster().startNode(settingsBuilder().put("node.data", false).build());
         client().admin().indices().create(createIndexRequest("test")).actionGet();
diff --git a/core/src/test/java/org/elasticsearch/cluster/SpecificMasterNodesIT.java b/core/src/test/java/org/elasticsearch/cluster/SpecificMasterNodesIT.java
index 90c39d7..43b403d 100644
--- a/core/src/test/java/org/elasticsearch/cluster/SpecificMasterNodesIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/SpecificMasterNodesIT.java
@@ -25,23 +25,24 @@ import org.elasticsearch.discovery.MasterNotDiscoveredException;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import java.io.IOException;
 
+import static org.elasticsearch.test.ESIntegTestCase.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0)
 @ESIntegTestCase.SuppressLocalMode
 public class SpecificMasterNodesIT extends ESIntegTestCase {
+
     protected final Settings.Builder settingsBuilder() {
         return Settings.builder().put("discovery.type", "zen");
     }
 
-    public void testSimpleOnlyMasterNodeElection() throws IOException {
+    @Test
+    public void simpleOnlyMasterNodeElection() throws IOException {
         logger.info("--> start data node / non master node");
         internalCluster().startNode(settingsBuilder().put("node.data", true).put("node.master", false).put("discovery.initial_state_timeout", "1s"));
         try {
@@ -71,7 +72,8 @@ public class SpecificMasterNodesIT extends ESIntegTestCase {
         assertThat(internalCluster().masterClient().admin().cluster().prepareState().execute().actionGet().getState().nodes().masterNode().name(), equalTo(nextMasterEligibleNodeName));
     }
 
-    public void testElectOnlyBetweenMasterNodes() throws IOException {
+    @Test
+    public void electOnlyBetweenMasterNodes() throws IOException {
         logger.info("--> start data node / non master node");
         internalCluster().startNode(settingsBuilder().put("node.data", true).put("node.master", false).put("discovery.initial_state_timeout", "1s"));
         try {
@@ -101,6 +103,7 @@ public class SpecificMasterNodesIT extends ESIntegTestCase {
      * Tests that putting custom default mapping and then putting a type mapping will have the default mapping merged
      * to the type mapping.
      */
+    @Test
     public void testCustomDefaultMapping() throws Exception {
         logger.info("--> start master node / non data");
         internalCluster().startNode(settingsBuilder().put("node.data", false).put("node.master", true));
@@ -121,6 +124,7 @@ public class SpecificMasterNodesIT extends ESIntegTestCase {
         assertThat(type1Mapping.getSourceAsMap().get("_timestamp"), notNullValue());
     }
 
+    @Test
     public void testAliasFilterValidation() throws Exception {
         logger.info("--> start master node / non data");
         internalCluster().startNode(settingsBuilder().put("node.data", false).put("node.master", true));
diff --git a/core/src/test/java/org/elasticsearch/cluster/UpdateSettingsValidationIT.java b/core/src/test/java/org/elasticsearch/cluster/UpdateSettingsValidationIT.java
index 526f64a..c91915b 100644
--- a/core/src/test/java/org/elasticsearch/cluster/UpdateSettingsValidationIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/UpdateSettingsValidationIT.java
@@ -23,17 +23,20 @@ import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
 import org.elasticsearch.common.Priority;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import java.util.List;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.*;
 import static org.hamcrest.Matchers.equalTo;
 
 /**
  */
 @ClusterScope(scope= Scope.TEST, numDataNodes =0)
 public class UpdateSettingsValidationIT extends ESIntegTestCase {
+
+    @Test
     public void testUpdateSettingsValidation() throws Exception {
         List<String> nodes = internalCluster().startNodesAsync(
                 settingsBuilder().put("node.data", false).build(),
diff --git a/core/src/test/java/org/elasticsearch/cluster/ack/AckClusterUpdateSettingsIT.java b/core/src/test/java/org/elasticsearch/cluster/ack/AckClusterUpdateSettingsIT.java
index 12147ff..d6e4abb 100644
--- a/core/src/test/java/org/elasticsearch/cluster/ack/AckClusterUpdateSettingsIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/ack/AckClusterUpdateSettingsIT.java
@@ -33,9 +33,10 @@ import org.elasticsearch.cluster.routing.allocation.decider.ThrottlingAllocation
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.discovery.DiscoverySettings;
 import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import static org.elasticsearch.test.ESIntegTestCase.Scope.TEST;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.hamcrest.Matchers.equalTo;
@@ -70,6 +71,7 @@ public class AckClusterUpdateSettingsIT extends ESIntegTestCase {
         assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put(DiscoverySettings.PUBLISH_TIMEOUT, "0")));
     }
 
+    @Test
     public void testClusterUpdateSettingsAcknowledgement() {
         createIndex("test");
         ensureGreen();
@@ -110,6 +112,7 @@ public class AckClusterUpdateSettingsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testClusterUpdateSettingsNoAcknowledgement() {
         client().admin().indices().prepareCreate("test")
                 .setSettings(settingsBuilder()
@@ -140,6 +143,7 @@ public class AckClusterUpdateSettingsIT extends ESIntegTestCase {
         return client.admin().cluster().prepareState().setLocal(true).get().getState();
     }
 
+    @Test
     public void testOpenIndexNoAcknowledgement() {
         createIndex("test");
         ensureGreen();
diff --git a/core/src/test/java/org/elasticsearch/cluster/ack/AckIT.java b/core/src/test/java/org/elasticsearch/cluster/ack/AckIT.java
index 47517a7..392528d 100644
--- a/core/src/test/java/org/elasticsearch/cluster/ack/AckIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/ack/AckIT.java
@@ -20,7 +20,6 @@
 package org.elasticsearch.cluster.ack;
 
 import com.carrotsearch.hppc.cursors.ObjectObjectCursor;
-
 import org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteResponse;
 import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;
 import org.elasticsearch.action.admin.indices.alias.IndicesAliasesResponse;
@@ -36,7 +35,6 @@ import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.cluster.metadata.AliasMetaData;
 import org.elasticsearch.cluster.metadata.AliasOrIndex;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
-import org.elasticsearch.cluster.metadata.IndexMetaData.State;
 import org.elasticsearch.cluster.routing.RoutingNode;
 import org.elasticsearch.cluster.routing.ShardRouting;
 import org.elasticsearch.cluster.routing.ShardRoutingState;
@@ -46,18 +44,16 @@ import org.elasticsearch.discovery.DiscoverySettings;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.warmer.IndexWarmersMetaData;
 import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_REPLICAS;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.hamcrest.Matchers.anyOf;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.*;
 
 @ClusterScope(minNumDataNodes = 2)
 public class AckIT extends ESIntegTestCase {
@@ -70,6 +66,7 @@ public class AckIT extends ESIntegTestCase {
                 .put(DiscoverySettings.PUBLISH_TIMEOUT, 0).build();
     }
 
+    @Test
     public void testUpdateSettingsAcknowledgement() {
         createIndex("test");
 
@@ -82,6 +79,7 @@ public class AckIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testUpdateSettingsNoAcknowledgement() {
         createIndex("test");
         UpdateSettingsResponse updateSettingsResponse = client().admin().indices().prepareUpdateSettings("test").setTimeout("0s")
@@ -89,6 +87,7 @@ public class AckIT extends ESIntegTestCase {
         assertThat(updateSettingsResponse.isAcknowledged(), equalTo(false));
     }
 
+    @Test
     public void testPutWarmerAcknowledgement() {
         createIndex("test");
         // make sure one shard is started so the search during put warmer will not fail
@@ -107,6 +106,7 @@ public class AckIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testPutWarmerNoAcknowledgement() throws InterruptedException {
         createIndex("test");
         // make sure one shard is started so the search during put warmer will not fail
@@ -131,6 +131,7 @@ public class AckIT extends ESIntegTestCase {
         assertAcked(client().admin().indices().prepareDeleteWarmer().setIndices("test").setNames("custom_warmer"));
     }
 
+    @Test
     public void testDeleteWarmerAcknowledgement() {
         createIndex("test");
         index("test", "type", "1", "f", 1);
@@ -146,6 +147,7 @@ public class AckIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testDeleteWarmerNoAcknowledgement() throws InterruptedException {
         createIndex("test");
         index("test", "type", "1", "f", 1);
@@ -166,6 +168,7 @@ public class AckIT extends ESIntegTestCase {
         }));
     }
 
+    @Test
     public void testClusterRerouteAcknowledgement() throws InterruptedException {
         assertAcked(prepareCreate("test").setSettings(Settings.builder()
                         .put(indexSettings())
@@ -200,6 +203,7 @@ public class AckIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testClusterRerouteNoAcknowledgement() throws InterruptedException {
         client().admin().indices().prepareCreate("test")
                 .setSettings(settingsBuilder()
@@ -213,6 +217,7 @@ public class AckIT extends ESIntegTestCase {
         assertThat(clusterRerouteResponse.isAcknowledged(), equalTo(false));
     }
 
+    @Test
     public void testClusterRerouteAcknowledgementDryRun() throws InterruptedException {
         client().admin().indices().prepareCreate("test")
                 .setSettings(settingsBuilder()
@@ -245,6 +250,7 @@ public class AckIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testClusterRerouteNoAcknowledgementDryRun() throws InterruptedException {
         client().admin().indices().prepareCreate("test")
                 .setSettings(settingsBuilder()
@@ -287,6 +293,7 @@ public class AckIT extends ESIntegTestCase {
         return new MoveAllocationCommand(shardToBeMoved.shardId(), fromNodeId, toNodeId);
     }
 
+    @Test
     public void testIndicesAliasesAcknowledgement() {
         createIndex("test");
 
@@ -303,6 +310,7 @@ public class AckIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testIndicesAliasesNoAcknowledgement() {
         createIndex("test");
 
@@ -322,6 +330,7 @@ public class AckIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testCloseIndexNoAcknowledgement() {
         createIndex("test");
         ensureGreen();
@@ -330,6 +339,7 @@ public class AckIT extends ESIntegTestCase {
         assertThat(closeIndexResponse.isAcknowledged(), equalTo(false));
     }
 
+    @Test
     public void testOpenIndexAcknowledgement() {
         createIndex("test");
         ensureGreen();
@@ -344,6 +354,7 @@ public class AckIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testPutMappingAcknowledgement() {
         createIndex("test");
         ensureGreen();
@@ -355,6 +366,7 @@ public class AckIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testPutMappingNoAcknowledgement() {
         createIndex("test");
         ensureGreen();
@@ -363,6 +375,7 @@ public class AckIT extends ESIntegTestCase {
         assertThat(putMappingResponse.isAcknowledged(), equalTo(false));
     }
 
+    @Test
     public void testCreateIndexAcknowledgement() {
         createIndex("test");
 
@@ -375,6 +388,7 @@ public class AckIT extends ESIntegTestCase {
         ensureGreen();
     }
 
+    @Test
     public void testCreateIndexNoAcknowledgement() {
         CreateIndexResponse createIndexResponse = client().admin().indices().prepareCreate("test").setTimeout("0s").get();
         assertThat(createIndexResponse.isAcknowledged(), equalTo(false));
diff --git a/core/src/test/java/org/elasticsearch/cluster/allocation/AwarenessAllocationIT.java b/core/src/test/java/org/elasticsearch/cluster/allocation/AwarenessAllocationIT.java
index f915162..8dbad73 100644
--- a/core/src/test/java/org/elasticsearch/cluster/allocation/AwarenessAllocationIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/allocation/AwarenessAllocationIT.java
@@ -20,7 +20,6 @@
 package org.elasticsearch.cluster.allocation;
 
 import com.carrotsearch.hppc.ObjectIntHashMap;
-
 import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
 import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.cluster.routing.IndexRoutingTable;
@@ -35,6 +34,7 @@ import org.elasticsearch.discovery.zen.ZenDiscovery;
 import org.elasticsearch.discovery.zen.elect.ElectMasterService;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import java.util.List;
 import java.util.concurrent.TimeUnit;
@@ -55,6 +55,7 @@ public class AwarenessAllocationIT extends ESIntegTestCase {
         return 1;
     }
 
+    @Test
     public void testSimpleAwareness() throws Exception {
         Settings commonSettings = Settings.settingsBuilder()
                 .put("cluster.routing.allocation.awareness.attributes", "rack_id")
@@ -103,7 +104,8 @@ public class AwarenessAllocationIT extends ESIntegTestCase {
                 TimeUnit.SECONDS
         ), equalTo(true));
     }
-
+    
+    @Test
     public void testAwarenessZones() throws Exception {
         Settings commonSettings = Settings.settingsBuilder()
                 .put(AwarenessAllocationDecider.CLUSTER_ROUTING_ALLOCATION_AWARENESS_FORCE_GROUP + "zone.values", "a,b")
@@ -151,7 +153,8 @@ public class AwarenessAllocationIT extends ESIntegTestCase {
         assertThat(counts.get(A_0), anyOf(equalTo(2),equalTo(3)));
         assertThat(counts.get(B_0), anyOf(equalTo(2),equalTo(3)));
     }
-
+    
+    @Test
     public void testAwarenessZonesIncrementalNodes() throws Exception {
         Settings commonSettings = Settings.settingsBuilder()
                 .put("cluster.routing.allocation.awareness.force.zone.values", "a,b")
@@ -205,7 +208,7 @@ public class AwarenessAllocationIT extends ESIntegTestCase {
         assertThat(counts.get(A_0), equalTo(5));
         assertThat(counts.get(B_0), equalTo(3));
         assertThat(counts.get(B_1), equalTo(2));
-
+        
         String noZoneNode = internalCluster().startNode();
         health = client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().setWaitForNodes("4").execute().actionGet();
         assertThat(health.isTimedOut(), equalTo(false));
@@ -224,7 +227,7 @@ public class AwarenessAllocationIT extends ESIntegTestCase {
                 }
             }
         }
-
+        
         assertThat(counts.get(A_0), equalTo(5));
         assertThat(counts.get(B_0), equalTo(3));
         assertThat(counts.get(B_1), equalTo(2));
@@ -245,7 +248,7 @@ public class AwarenessAllocationIT extends ESIntegTestCase {
                 }
             }
         }
-
+        
         assertThat(counts.get(A_0), equalTo(3));
         assertThat(counts.get(B_0), equalTo(3));
         assertThat(counts.get(B_1), equalTo(2));
diff --git a/core/src/test/java/org/elasticsearch/cluster/allocation/ClusterRerouteIT.java b/core/src/test/java/org/elasticsearch/cluster/allocation/ClusterRerouteIT.java
index fd09a83..2df7958 100644
--- a/core/src/test/java/org/elasticsearch/cluster/allocation/ClusterRerouteIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/allocation/ClusterRerouteIT.java
@@ -45,19 +45,17 @@ import org.elasticsearch.env.NodeEnvironment;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.InternalTestCluster;
+import org.junit.Test;
 
 import java.nio.file.Path;
 import java.util.Arrays;
 import java.util.List;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 import static org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
 import static org.hamcrest.Matchers.equalTo;
@@ -67,9 +65,11 @@ import static org.hamcrest.Matchers.hasSize;
  */
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0)
 public class ClusterRerouteIT extends ESIntegTestCase {
+
     private final ESLogger logger = Loggers.getLogger(ClusterRerouteIT.class);
 
-    public void testRerouteWithCommands_disableAllocationSettings() throws Exception {
+    @Test
+    public void rerouteWithCommands_disableAllocationSettings() throws Exception {
         Settings commonSettings = settingsBuilder()
                 .put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE, "none")
                 .put(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE, "none")
@@ -77,7 +77,8 @@ public class ClusterRerouteIT extends ESIntegTestCase {
         rerouteWithCommands(commonSettings);
     }
 
-    public void testRerouteWithCommands_enableAllocationSettings() throws Exception {
+    @Test
+    public void rerouteWithCommands_enableAllocationSettings() throws Exception {
         Settings commonSettings = settingsBuilder()
                 .put(CLUSTER_ROUTING_ALLOCATION_ENABLE, Allocation.NONE.name())
                 .build();
@@ -145,7 +146,8 @@ public class ClusterRerouteIT extends ESIntegTestCase {
         assertThat(state.getRoutingNodes().node(state.nodes().resolveNode(node_2).id()).get(0).state(), equalTo(ShardRoutingState.STARTED));
     }
 
-    public void testRerouteWithAllocateLocalGateway_disableAllocationSettings() throws Exception {
+    @Test
+    public void rerouteWithAllocateLocalGateway_disableAllocationSettings() throws Exception {
         Settings commonSettings = settingsBuilder()
                 .put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE, "none")
                 .put(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE, "none")
@@ -153,13 +155,15 @@ public class ClusterRerouteIT extends ESIntegTestCase {
         rerouteWithAllocateLocalGateway(commonSettings);
     }
 
-    public void testRerouteWithAllocateLocalGateway_enableAllocationSettings() throws Exception {
+    @Test
+    public void rerouteWithAllocateLocalGateway_enableAllocationSettings() throws Exception {
         Settings commonSettings = settingsBuilder()
                 .put(CLUSTER_ROUTING_ALLOCATION_ENABLE, Allocation.NONE.name())
                 .build();
         rerouteWithAllocateLocalGateway(commonSettings);
     }
 
+    @Test
     public void testDelayWithALargeAmountOfShards() throws Exception {
         Settings commonSettings = settingsBuilder()
                 .put(ThrottlingAllocationDecider.CLUSTER_ROUTING_ALLOCATION_CONCURRENT_RECOVERIES, 1)
@@ -260,7 +264,8 @@ public class ClusterRerouteIT extends ESIntegTestCase {
 
     }
 
-    public void testRerouteExplain() {
+    @Test
+    public void rerouteExplain() {
         Settings commonSettings = settingsBuilder().build();
 
         logger.info("--> starting a node");
@@ -302,6 +307,7 @@ public class ClusterRerouteIT extends ESIntegTestCase {
         assertThat(explanation.decisions().type(), equalTo(Decision.Type.YES));
     }
 
+    @Test
     public void testClusterRerouteWithBlocks() throws Exception {
         List<String> nodesIds = internalCluster().startNodesAsync(2).get();
 
diff --git a/core/src/test/java/org/elasticsearch/cluster/allocation/FilteringAllocationIT.java b/core/src/test/java/org/elasticsearch/cluster/allocation/FilteringAllocationIT.java
index 0c3eed1..ad2715d 100644
--- a/core/src/test/java/org/elasticsearch/cluster/allocation/FilteringAllocationIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/allocation/FilteringAllocationIT.java
@@ -29,11 +29,12 @@ import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import java.util.List;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.*;
 import static org.hamcrest.Matchers.equalTo;
 
 @ClusterScope(scope= Scope.TEST, numDataNodes =0)
@@ -41,13 +42,14 @@ public class FilteringAllocationIT extends ESIntegTestCase {
 
     private final ESLogger logger = Loggers.getLogger(FilteringAllocationIT.class);
 
+    @Test
     public void testDecommissionNodeNoReplicas() throws Exception {
         logger.info("--> starting 2 nodes");
         List<String> nodesIds = internalCluster().startNodesAsync(2).get();
         final String node_0 = nodesIds.get(0);
         final String node_1 = nodesIds.get(1);
         assertThat(cluster().size(), equalTo(2));
-
+        
         logger.info("--> creating an index with no replicas");
         client().admin().indices().prepareCreate("test")
                 .setSettings(settingsBuilder().put("index.number_of_replicas", 0))
@@ -80,6 +82,7 @@ public class FilteringAllocationIT extends ESIntegTestCase {
         assertThat(client().prepareSearch().setSize(0).setQuery(QueryBuilders.matchAllQuery()).execute().actionGet().getHits().totalHits(), equalTo(100l));
     }
 
+    @Test
     public void testDisablingAllocationFiltering() throws Exception {
         logger.info("--> starting 2 nodes");
         List<String> nodesIds = internalCluster().startNodesAsync(2).get();
@@ -115,7 +118,7 @@ public class FilteringAllocationIT extends ESIntegTestCase {
             client().admin().cluster().prepareUpdateSettings()
             .setTransientSettings(settingsBuilder().put("cluster.routing.allocation.node_concurrent_recoveries", numShardsOnNode1)).execute().actionGet();
             // make sure we can recover all the nodes at once otherwise we might run into a state where one of the shards has not yet started relocating
-            // but we already fired up the request to wait for 0 relocating shards.
+            // but we already fired up the request to wait for 0 relocating shards. 
         }
         logger.info("--> remove index from the first node");
         client().admin().indices().prepareUpdateSettings("test")
diff --git a/core/src/test/java/org/elasticsearch/cluster/allocation/SimpleAllocationIT.java b/core/src/test/java/org/elasticsearch/cluster/allocation/SimpleAllocationIT.java
index 565104b..1360937 100644
--- a/core/src/test/java/org/elasticsearch/cluster/allocation/SimpleAllocationIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/allocation/SimpleAllocationIT.java
@@ -18,11 +18,16 @@
  */
 package org.elasticsearch.cluster.allocation;
 
+import org.elasticsearch.cluster.ClusterInfoService;
+import org.elasticsearch.cluster.ClusterService;
 import org.elasticsearch.cluster.ClusterState;
+import org.elasticsearch.cluster.InternalClusterInfoService;
 import org.elasticsearch.cluster.routing.RoutingNode;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_REPLICAS;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.hamcrest.Matchers.equalTo;
@@ -40,9 +45,10 @@ public class SimpleAllocationIT extends ESIntegTestCase {
     }
 
     /**
-     * Test for
+     * Test for 
      * https://groups.google.com/d/msg/elasticsearch/y-SY_HyoB-8/EZdfNt9VO44J
      */
+    @Test
     public void testSaneAllocation() {
         assertAcked(prepareCreate("test", 3));
         ensureGreen();
diff --git a/core/src/test/java/org/elasticsearch/cluster/block/ClusterBlockTests.java b/core/src/test/java/org/elasticsearch/cluster/block/ClusterBlockTests.java
index 0de18e9..0cc7b70 100644
--- a/core/src/test/java/org/elasticsearch/cluster/block/ClusterBlockTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/block/ClusterBlockTests.java
@@ -24,6 +24,7 @@ import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.rest.RestStatus;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.EnumSet;
 
@@ -31,6 +32,8 @@ import static org.elasticsearch.test.VersionUtils.randomVersion;
 import static org.hamcrest.CoreMatchers.equalTo;
 
 public class ClusterBlockTests extends ESTestCase {
+
+    @Test
     public void testSerialization() throws Exception {
         int iterations = randomIntBetween(10, 100);
         for (int i = 0; i < iterations; i++) {
diff --git a/core/src/test/java/org/elasticsearch/cluster/metadata/DateMathExpressionResolverTests.java b/core/src/test/java/org/elasticsearch/cluster/metadata/DateMathExpressionResolverTests.java
index 0215f94..d633193 100644
--- a/core/src/test/java/org/elasticsearch/cluster/metadata/DateMathExpressionResolverTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/metadata/DateMathExpressionResolverTests.java
@@ -30,13 +30,13 @@ import org.elasticsearch.test.ESTestCase;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.format.DateTimeFormat;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.joda.time.DateTimeZone.UTC;
 
@@ -176,44 +176,24 @@ public class DateMathExpressionResolverTests extends ESTestCase {
         assertThat(results.get(0), equalTo(".marvel-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(now.withZone(timeZone))));
     }
 
-    public void testExpressionInvalidUnescaped() throws Exception {
-        try {
-            expressionResolver.resolve(context, Arrays.asList("<.mar}vel-{now/d}>"));
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), containsString("invalid dynamic name expression"));
-            assertThat(e.getMessage(), containsString("invalid character at position ["));
-        }
+    @Test(expected = ElasticsearchParseException.class)
+    public void testExpression_Invalid_Unescaped() throws Exception {
+        expressionResolver.resolve(context, Arrays.asList("<.mar}vel-{now/d}>"));
     }
 
-    public void testExpressionInvalidDateMathFormat() throws Exception {
-        try {
-            expressionResolver.resolve(context, Arrays.asList("<.marvel-{now/d{}>"));
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), containsString("invalid dynamic name expression"));
-            assertThat(e.getMessage(), containsString("date math placeholder is open ended"));
-        }
+    @Test(expected = ElasticsearchParseException.class)
+    public void testExpression_Invalid_DateMathFormat() throws Exception {
+        expressionResolver.resolve(context, Arrays.asList("<.marvel-{now/d{}>"));
     }
 
-    public void testExpressionInvalidEmptyDateMathFormat() throws Exception {
-        try {
-            expressionResolver.resolve(context, Arrays.asList("<.marvel-{now/d{}}>"));
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), containsString("invalid dynamic name expression"));
-            assertThat(e.getMessage(), containsString("missing date format"));
-        }
+    @Test(expected = ElasticsearchParseException.class)
+    public void testExpression_Invalid_EmptyDateMathFormat() throws Exception {
+        expressionResolver.resolve(context, Arrays.asList("<.marvel-{now/d{}}>"));
     }
 
-    public void testExpressionInvalidOpenEnded() throws Exception {
-        try {
-            expressionResolver.resolve(context, Arrays.asList("<.marvel-{now/d>"));
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), containsString("invalid dynamic name expression"));
-            assertThat(e.getMessage(), containsString("date math placeholder is open ended"));
-        }
+    @Test(expected = ElasticsearchParseException.class)
+    public void testExpression_Invalid_OpenEnded() throws Exception {
+        expressionResolver.resolve(context, Arrays.asList("<.marvel-{now/d>"));
     }
 
 }
diff --git a/core/src/test/java/org/elasticsearch/cluster/metadata/HumanReadableIndexSettingsTests.java b/core/src/test/java/org/elasticsearch/cluster/metadata/HumanReadableIndexSettingsTests.java
index 9be087e..4163ad0 100644
--- a/core/src/test/java/org/elasticsearch/cluster/metadata/HumanReadableIndexSettingsTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/metadata/HumanReadableIndexSettingsTests.java
@@ -24,10 +24,13 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTestCase;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
+import org.junit.Test;
 
 import static org.elasticsearch.test.VersionUtils.randomVersion;
 
 public class HumanReadableIndexSettingsTests extends ESTestCase {
+
+    @Test
     public void testHumanReadableSettings() {
         Version versionCreated = randomVersion(random());
         Version versionUpgraded = randomVersion(random());
diff --git a/core/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java b/core/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java
index 11e8b6c..3bae8e1 100644
--- a/core/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java
@@ -29,6 +29,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.IndexNotFoundException;
 import org.elasticsearch.indices.IndexClosedException;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.Collections;
@@ -41,15 +42,16 @@ import static org.hamcrest.Matchers.arrayWithSize;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.emptyArray;
 import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.notNullValue;
 
 /**
  */
 public class IndexNameExpressionResolverTests extends ESTestCase {
+
     private final IndexNameExpressionResolver indexNameExpressionResolver = new IndexNameExpressionResolver(Settings.EMPTY);
 
-    public void testIndexOptionsStrict() {
+    @Test
+    public void testIndexOptions_strict() {
         MetaData.Builder mdBuilder = MetaData.builder()
                 .put(indexBuilder("foo").putAlias(AliasMetaData.builder("foofoobar")))
                 .put(indexBuilder("foobar").putAlias(AliasMetaData.builder("foofoobar")))
@@ -77,7 +79,7 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
             assertThat(results, arrayContainingInAnyOrder("foofoo", "foobar"));
 
             results = indexNameExpressionResolver.concreteIndices(context, "foofoobar");
-            assertEquals(new HashSet<>(Arrays.asList("foo", "foobar")),
+            assertEquals(new HashSet<>(Arrays.asList("foo", "foobar")), 
                          new HashSet<>(Arrays.asList(results)));
 
             try {
@@ -138,7 +140,8 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
         assertThat(results, arrayContainingInAnyOrder("foo", "foobar", "foofoo", "foofoo-closed"));
     }
 
-    public void testIndexOptionsLenient() {
+    @Test
+    public void testIndexOptions_lenient() {
         MetaData.Builder mdBuilder = MetaData.builder()
                 .put(indexBuilder("foo").putAlias(AliasMetaData.builder("foofoobar")))
                 .put(indexBuilder("foobar").putAlias(AliasMetaData.builder("foofoobar")))
@@ -163,7 +166,7 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
 
             results = indexNameExpressionResolver.concreteIndices(context, "foofoobar");
             assertEquals(2, results.length);
-            assertEquals(new HashSet<>(Arrays.asList("foo", "foobar")),
+            assertEquals(new HashSet<>(Arrays.asList("foo", "foobar")), 
                          new HashSet<>(Arrays.asList(results)));
 
             results = indexNameExpressionResolver.concreteIndices(context, "foo", "bar");
@@ -205,7 +208,8 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
         assertThat(results, arrayContainingInAnyOrder("foo", "foobar", "foofoo", "foofoo-closed"));
     }
 
-    public void testIndexOptionsAllowUnavailableDisallowEmpty() {
+    @Test
+    public void testIndexOptions_allowUnavailableDisallowEmpty() {
         MetaData.Builder mdBuilder = MetaData.builder()
                 .put(indexBuilder("foo"))
                 .put(indexBuilder("foobar"))
@@ -254,7 +258,8 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
         assertEquals(4, results.length);
     }
 
-    public void testIndexOptionsWildcardExpansion() {
+    @Test
+    public void testIndexOptions_wildcardExpansion() {
         MetaData.Builder mdBuilder = MetaData.builder()
                 .put(indexBuilder("foo").state(IndexMetaData.State.CLOSE))
                 .put(indexBuilder("bar"))
@@ -324,7 +329,8 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
         }
     }
 
-    public void testIndexOptionsNoExpandWildcards() {
+    @Test
+    public void testIndexOptions_noExpandWildcards() {
         MetaData.Builder mdBuilder = MetaData.builder()
                 .put(indexBuilder("foo").putAlias(AliasMetaData.builder("foofoobar")))
                 .put(indexBuilder("foobar").putAlias(AliasMetaData.builder("foofoobar")))
@@ -417,7 +423,8 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
         }
     }
 
-    public void testIndexOptionsSingleIndexNoExpandWildcards() {
+    @Test
+    public void testIndexOptions_singleIndexNoExpandWildcards() {
         MetaData.Builder mdBuilder = MetaData.builder()
                 .put(indexBuilder("foo").putAlias(AliasMetaData.builder("foofoobar")))
                 .put(indexBuilder("foobar").putAlias(AliasMetaData.builder("foofoobar")))
@@ -474,7 +481,8 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
         assertThat(results, arrayContainingInAnyOrder("foo", "foofoo"));
     }
 
-    public void testIndexOptionsEmptyCluster() {
+    @Test
+    public void testIndexOptions_emptyCluster() {
         ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(MetaData.builder().build()).build();
 
         IndicesOptions options = IndicesOptions.strictExpandOpen();
@@ -519,6 +527,7 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
         return IndexMetaData.builder(index).settings(settings(Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0));
     }
 
+    @Test(expected = IndexNotFoundException.class)
     public void testConcreteIndicesIgnoreIndicesOneMissingIndex() {
         MetaData.Builder mdBuilder = MetaData.builder()
                 .put(indexBuilder("testXXX"))
@@ -526,14 +535,10 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
         ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build();
         IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen());
 
-        try {
-            indexNameExpressionResolver.concreteIndices(context, "testZZZ");
-            fail("Expected IndexNotFoundException");
-        } catch(IndexNotFoundException e) {
-            assertThat(e.getMessage(), is("no such index"));
-        }
+        indexNameExpressionResolver.concreteIndices(context, "testZZZ");
     }
 
+    @Test
     public void testConcreteIndicesIgnoreIndicesOneMissingIndexOtherFound() {
         MetaData.Builder mdBuilder = MetaData.builder()
                 .put(indexBuilder("testXXX"))
@@ -544,6 +549,7 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
         assertThat(newHashSet(indexNameExpressionResolver.concreteIndices(context, "testXXX", "testZZZ")), equalTo(newHashSet("testXXX")));
     }
 
+    @Test(expected = IndexNotFoundException.class)
     public void testConcreteIndicesIgnoreIndicesAllMissing() {
         MetaData.Builder mdBuilder = MetaData.builder()
                 .put(indexBuilder("testXXX"))
@@ -551,14 +557,10 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
         ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build();
         IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen());
 
-        try {
-            indexNameExpressionResolver.concreteIndices(context, "testMo", "testMahdy");
-            fail("Expected IndexNotFoundException");
-        } catch(IndexNotFoundException e) {
-            assertThat(e.getMessage(), is("no such index"));
-        }
+        assertThat(newHashSet(indexNameExpressionResolver.concreteIndices(context, "testMo", "testMahdy")), equalTo(newHashSet("testXXX")));
     }
 
+    @Test
     public void testConcreteIndicesIgnoreIndicesEmptyRequest() {
         MetaData.Builder mdBuilder = MetaData.builder()
                 .put(indexBuilder("testXXX"))
@@ -568,6 +570,7 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
         assertThat(newHashSet(indexNameExpressionResolver.concreteIndices(context, new String[]{})), equalTo(newHashSet("kuku", "testXXX")));
     }
 
+    @Test
     public void testConcreteIndicesWildcardExpansion() {
         MetaData.Builder mdBuilder = MetaData.builder()
                 .put(indexBuilder("testXXX").state(State.OPEN))
@@ -590,6 +593,7 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
     /**
      * test resolving _all pattern (null, empty array or "_all") for random IndicesOptions
      */
+    @Test
     public void testConcreteIndicesAllPatternRandom() {
         for (int i = 0; i < 10; i++) {
             String[] allIndices = null;
@@ -656,6 +660,7 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
     /**
      * test resolving wildcard pattern that matches no index of alias for random IndicesOptions
      */
+    @Test
     public void testConcreteIndicesWildcardNoMatch() {
         for (int i = 0; i < 10; i++) {
             IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean());
@@ -682,76 +687,92 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
         }
     }
 
-    public void testIsAllIndicesNull() throws Exception {
+    @Test
+    public void testIsAllIndices_null() throws Exception {
         assertThat(IndexNameExpressionResolver.isAllIndices(null), equalTo(true));
     }
 
-    public void testIsAllIndicesEmpty() throws Exception {
+    @Test
+    public void testIsAllIndices_empty() throws Exception {
         assertThat(IndexNameExpressionResolver.isAllIndices(Collections.<String>emptyList()), equalTo(true));
     }
 
-    public void testIsAllIndicesExplicitAll() throws Exception {
+    @Test
+    public void testIsAllIndices_explicitAll() throws Exception {
         assertThat(IndexNameExpressionResolver.isAllIndices(Arrays.asList("_all")), equalTo(true));
     }
 
-    public void testIsAllIndicesExplicitAllPlusOther() throws Exception {
+    @Test
+    public void testIsAllIndices_explicitAllPlusOther() throws Exception {
         assertThat(IndexNameExpressionResolver.isAllIndices(Arrays.asList("_all", "other")), equalTo(false));
     }
 
-    public void testIsAllIndicesNormalIndexes() throws Exception {
+    @Test
+    public void testIsAllIndices_normalIndexes() throws Exception {
         assertThat(IndexNameExpressionResolver.isAllIndices(Arrays.asList("index1", "index2", "index3")), equalTo(false));
     }
 
-    public void testIsAllIndicesWildcard() throws Exception {
+    @Test
+    public void testIsAllIndices_wildcard() throws Exception {
         assertThat(IndexNameExpressionResolver.isAllIndices(Arrays.asList("*")), equalTo(false));
     }
 
-    public void testIsExplicitAllIndicesNull() throws Exception {
+    @Test
+    public void testIsExplicitAllIndices_null() throws Exception {
         assertThat(IndexNameExpressionResolver.isExplicitAllPattern(null), equalTo(false));
     }
 
-    public void testIsExplicitAllIndicesEmpty() throws Exception {
+    @Test
+    public void testIsExplicitAllIndices_empty() throws Exception {
         assertThat(IndexNameExpressionResolver.isExplicitAllPattern(Collections.<String>emptyList()), equalTo(false));
     }
 
-    public void testIsExplicitAllIndicesExplicitAll() throws Exception {
+    @Test
+    public void testIsExplicitAllIndices_explicitAll() throws Exception {
         assertThat(IndexNameExpressionResolver.isExplicitAllPattern(Arrays.asList("_all")), equalTo(true));
     }
 
-    public void testIsExplicitAllIndicesExplicitAllPlusOther() throws Exception {
+    @Test
+    public void testIsExplicitAllIndices_explicitAllPlusOther() throws Exception {
         assertThat(IndexNameExpressionResolver.isExplicitAllPattern(Arrays.asList("_all", "other")), equalTo(false));
     }
 
-    public void testIsExplicitAllIndicesNormalIndexes() throws Exception {
+    @Test
+    public void testIsExplicitAllIndices_normalIndexes() throws Exception {
         assertThat(IndexNameExpressionResolver.isExplicitAllPattern(Arrays.asList("index1", "index2", "index3")), equalTo(false));
     }
 
-    public void testIsExplicitAllIndicesWildcard() throws Exception {
+    @Test
+    public void testIsExplicitAllIndices_wildcard() throws Exception {
         assertThat(IndexNameExpressionResolver.isExplicitAllPattern(Arrays.asList("*")), equalTo(false));
     }
 
-    public void testIsPatternMatchingAllIndicesExplicitList() throws Exception {
+    @Test
+    public void testIsPatternMatchingAllIndices_explicitList() throws Exception {
         //even though it does identify all indices, it's not a pattern but just an explicit list of them
         String[] concreteIndices = new String[]{"index1", "index2", "index3"};
         MetaData metaData = metaDataBuilder(concreteIndices);
         assertThat(indexNameExpressionResolver.isPatternMatchingAllIndices(metaData, concreteIndices, concreteIndices), equalTo(false));
     }
 
-    public void testIsPatternMatchingAllIndicesOnlyWildcard() throws Exception {
+    @Test
+    public void testIsPatternMatchingAllIndices_onlyWildcard() throws Exception {
         String[] indicesOrAliases = new String[]{"*"};
         String[] concreteIndices = new String[]{"index1", "index2", "index3"};
         MetaData metaData = metaDataBuilder(concreteIndices);
         assertThat(indexNameExpressionResolver.isPatternMatchingAllIndices(metaData, indicesOrAliases, concreteIndices), equalTo(true));
     }
 
-    public void testIsPatternMatchingAllIndicesMatchingTrailingWildcard() throws Exception {
+    @Test
+    public void testIsPatternMatchingAllIndices_matchingTrailingWildcard() throws Exception {
         String[] indicesOrAliases = new String[]{"index*"};
         String[] concreteIndices = new String[]{"index1", "index2", "index3"};
         MetaData metaData = metaDataBuilder(concreteIndices);
         assertThat(indexNameExpressionResolver.isPatternMatchingAllIndices(metaData, indicesOrAliases, concreteIndices), equalTo(true));
     }
 
-    public void testIsPatternMatchingAllIndicesNonMatchingTrailingWildcard() throws Exception {
+    @Test
+    public void testIsPatternMatchingAllIndices_nonMatchingTrailingWildcard() throws Exception {
         String[] indicesOrAliases = new String[]{"index*"};
         String[] concreteIndices = new String[]{"index1", "index2", "index3"};
         String[] allConcreteIndices = new String[]{"index1", "index2", "index3", "a", "b"};
@@ -759,14 +780,16 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
         assertThat(indexNameExpressionResolver.isPatternMatchingAllIndices(metaData, indicesOrAliases, concreteIndices), equalTo(false));
     }
 
-    public void testIsPatternMatchingAllIndicesMatchingSingleExclusion() throws Exception {
+    @Test
+    public void testIsPatternMatchingAllIndices_matchingSingleExclusion() throws Exception {
         String[] indicesOrAliases = new String[]{"-index1", "+index1"};
         String[] concreteIndices = new String[]{"index1", "index2", "index3"};
         MetaData metaData = metaDataBuilder(concreteIndices);
         assertThat(indexNameExpressionResolver.isPatternMatchingAllIndices(metaData, indicesOrAliases, concreteIndices), equalTo(true));
     }
 
-    public void testIsPatternMatchingAllIndicesNonMatchingSingleExclusion() throws Exception {
+    @Test
+    public void testIsPatternMatchingAllIndices_nonMatchingSingleExclusion() throws Exception {
         String[] indicesOrAliases = new String[]{"-index1"};
         String[] concreteIndices = new String[]{"index2", "index3"};
         String[] allConcreteIndices = new String[]{"index1", "index2", "index3"};
@@ -774,14 +797,16 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
         assertThat(indexNameExpressionResolver.isPatternMatchingAllIndices(metaData, indicesOrAliases, concreteIndices), equalTo(false));
     }
 
-    public void testIsPatternMatchingAllIndicesMatchingTrailingWildcardAndExclusion() throws Exception {
+    @Test
+    public void testIsPatternMatchingAllIndices_matchingTrailingWildcardAndExclusion() throws Exception {
         String[] indicesOrAliases = new String[]{"index*", "-index1", "+index1"};
         String[] concreteIndices = new String[]{"index1", "index2", "index3"};
         MetaData metaData = metaDataBuilder(concreteIndices);
         assertThat(indexNameExpressionResolver.isPatternMatchingAllIndices(metaData, indicesOrAliases, concreteIndices), equalTo(true));
     }
 
-    public void testIsPatternMatchingAllIndicesNonMatchingTrailingWildcardAndExclusion() throws Exception {
+    @Test
+    public void testIsPatternMatchingAllIndices_nonMatchingTrailingWildcardAndExclusion() throws Exception {
         String[] indicesOrAliases = new String[]{"index*", "-index1"};
         String[] concreteIndices = new String[]{"index2", "index3"};
         String[] allConcreteIndices = new String[]{"index1", "index2", "index3"};
@@ -789,7 +814,8 @@ public class IndexNameExpressionResolverTests extends ESTestCase {
         assertThat(indexNameExpressionResolver.isPatternMatchingAllIndices(metaData, indicesOrAliases, concreteIndices), equalTo(false));
     }
 
-    public void testIndexOptionsFailClosedIndicesAndAliases() {
+    @Test
+    public void testIndexOptions_failClosedIndicesAndAliases() {
         MetaData.Builder mdBuilder = MetaData.builder()
                 .put(indexBuilder("foo1-closed").state(IndexMetaData.State.CLOSE).putAlias(AliasMetaData.builder("foobar1-closed")).putAlias(AliasMetaData.builder("foobar2-closed")))
                 .put(indexBuilder("foo2-closed").state(IndexMetaData.State.CLOSE).putAlias(AliasMetaData.builder("foobar2-closed")))
diff --git a/core/src/test/java/org/elasticsearch/cluster/metadata/MappingMetaDataParserTests.java b/core/src/test/java/org/elasticsearch/cluster/metadata/MappingMetaDataParserTests.java
index e446200..2211b20 100644
--- a/core/src/test/java/org/elasticsearch/cluster/metadata/MappingMetaDataParserTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/metadata/MappingMetaDataParserTests.java
@@ -24,12 +24,15 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.mapper.MapperParsingException;
 import org.elasticsearch.index.mapper.internal.TimestampFieldMapper;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.nullValue;
 
 public class MappingMetaDataParserTests extends ESTestCase {
+
+    @Test
     public void testParseIdAlone() throws Exception {
         MappingMetaData md = new MappingMetaData("type1", new CompressedXContent("{}"),
                 new MappingMetaData.Id("id"),
@@ -46,7 +49,8 @@ public class MappingMetaDataParserTests extends ESTestCase {
         assertThat(parseContext.timestamp(), nullValue());
         assertThat(parseContext.timestampResolved(), equalTo(false));
     }
-
+    
+    @Test
     public void testFailIfIdIsNoValue() throws Exception {
         MappingMetaData md = new MappingMetaData("type1", new CompressedXContent("{}"),
                 new MappingMetaData.Id("id"),
@@ -61,7 +65,7 @@ public class MappingMetaDataParserTests extends ESTestCase {
         } catch (MapperParsingException ex) {
             // bogus its an array
         }
-
+        
         bytes = jsonBuilder().startObject().field("field1", "value1").field("field2", "value2")
                 .startObject("id").field("x", "id").endObject().field("routing", "routing_value").field("timestamp", "1").endObject().bytes().toBytes();
         parseContext = md.createParseContext(null, "routing_value", "1");
@@ -73,6 +77,7 @@ public class MappingMetaDataParserTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testParseRoutingAlone() throws Exception {
         MappingMetaData md = new MappingMetaData("type1", new CompressedXContent("{}"),
                 new MappingMetaData.Id("id"),
@@ -90,6 +95,7 @@ public class MappingMetaDataParserTests extends ESTestCase {
         assertThat(parseContext.timestampResolved(), equalTo(false));
     }
 
+    @Test
     public void testParseTimestampAlone() throws Exception {
         MappingMetaData md = new MappingMetaData("type1", new CompressedXContent("{}"),
                 new MappingMetaData.Id("id"),
@@ -107,6 +113,7 @@ public class MappingMetaDataParserTests extends ESTestCase {
         assertThat(parseContext.timestampResolved(), equalTo(true));
     }
 
+    @Test
     public void testParseTimestampEquals() throws Exception {
         MappingMetaData md1 = new MappingMetaData("type1", new CompressedXContent("{}"),
                 new MappingMetaData.Id("id"),
@@ -119,6 +126,7 @@ public class MappingMetaDataParserTests extends ESTestCase {
         assertThat(md1, equalTo(md2));
     }
 
+    @Test
     public void testParseIdAndRoutingAndTimestamp() throws Exception {
         MappingMetaData md = new MappingMetaData("type1", new CompressedXContent("{}"),
                 new MappingMetaData.Id("id"),
@@ -133,6 +141,7 @@ public class MappingMetaDataParserTests extends ESTestCase {
         assertThat(parseContext.timestamp(), equalTo("1"));
     }
 
+    @Test
     public void testParseIdAndRoutingAndTimestampWithPath() throws Exception {
         MappingMetaData md = new MappingMetaData("type1", new CompressedXContent("{}"),
                 new MappingMetaData.Id("obj1.id"),
@@ -150,6 +159,7 @@ public class MappingMetaDataParserTests extends ESTestCase {
         assertThat(parseContext.timestamp(), equalTo("1"));
     }
 
+    @Test
     public void testParseIdWithPath() throws Exception {
         MappingMetaData md = new MappingMetaData("type1", new CompressedXContent("{}"),
                 new MappingMetaData.Id("obj1.id"),
@@ -170,6 +180,7 @@ public class MappingMetaDataParserTests extends ESTestCase {
         assertThat(parseContext.timestampResolved(), equalTo(false));
     }
 
+    @Test
     public void testParseRoutingWithPath() throws Exception {
         MappingMetaData md = new MappingMetaData("type1", new CompressedXContent("{}"),
                 new MappingMetaData.Id("obj1.id"),
@@ -190,6 +201,7 @@ public class MappingMetaDataParserTests extends ESTestCase {
         assertThat(parseContext.timestampResolved(), equalTo(false));
     }
 
+    @Test
     public void testParseTimestampWithPath() throws Exception {
         MappingMetaData md = new MappingMetaData("type1", new CompressedXContent("{}"),
                 new MappingMetaData.Id("obj1.id"),
@@ -210,6 +222,7 @@ public class MappingMetaDataParserTests extends ESTestCase {
         assertThat(parseContext.timestampResolved(), equalTo(true));
     }
 
+    @Test
     public void testParseIdAndRoutingAndTimestampWithinSamePath() throws Exception {
         MappingMetaData md = new MappingMetaData("type1", new CompressedXContent("{}"),
                 new MappingMetaData.Id("obj1.id"),
@@ -227,6 +240,7 @@ public class MappingMetaDataParserTests extends ESTestCase {
         assertThat(parseContext.timestamp(), equalTo("1"));
     }
 
+    @Test
     public void testParseIdAndRoutingAndTimestampWithinSamePathAndMoreLevels() throws Exception {
         MappingMetaData md = new MappingMetaData("type1", new CompressedXContent("{}"),
                 new MappingMetaData.Id("obj1.obj0.id"),
@@ -254,6 +268,8 @@ public class MappingMetaDataParserTests extends ESTestCase {
         assertThat(parseContext.timestamp(), equalTo("1"));
     }
 
+
+    @Test
     public void testParseIdAndRoutingAndTimestampWithSameRepeatedObject() throws Exception {
         MappingMetaData md = new MappingMetaData("type1", new CompressedXContent("{}"),
                 new MappingMetaData.Id("obj1.id"),
@@ -272,6 +288,8 @@ public class MappingMetaDataParserTests extends ESTestCase {
         assertThat(parseContext.timestamp(), equalTo("1"));
     }
 
+    //
+    @Test
     public void testParseIdRoutingTimestampWithRepeatedField() throws Exception {
         MappingMetaData md = new MappingMetaData("type1", new CompressedXContent("{}"),
                 new MappingMetaData.Id("field1"),
@@ -294,6 +312,7 @@ public class MappingMetaDataParserTests extends ESTestCase {
         assertThat(parseContext.timestamp(), equalTo("foo"));
     }
 
+    @Test
     public void testParseNoIdRoutingWithRepeatedFieldAndObject() throws Exception {
         MappingMetaData md = new MappingMetaData("type1", new CompressedXContent("{}"),
                 new MappingMetaData.Id("id"),
@@ -316,6 +335,7 @@ public class MappingMetaDataParserTests extends ESTestCase {
         assertThat(parseContext.timestamp(), equalTo("foo"));
     }
 
+    @Test
     public void testParseRoutingWithRepeatedFieldAndValidRouting() throws Exception {
         MappingMetaData md = new MappingMetaData("type1", new CompressedXContent("{}"),
                 new MappingMetaData.Id(null),
diff --git a/core/src/test/java/org/elasticsearch/cluster/metadata/ToAndFromJsonMetaDataTests.java b/core/src/test/java/org/elasticsearch/cluster/metadata/ToAndFromJsonMetaDataTests.java
index cbb5b7d..dba510a 100644
--- a/core/src/test/java/org/elasticsearch/cluster/metadata/ToAndFromJsonMetaDataTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/metadata/ToAndFromJsonMetaDataTests.java
@@ -23,19 +23,20 @@ import org.elasticsearch.Version;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.common.xcontent.XContentType;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.elasticsearch.cluster.metadata.AliasMetaData.newAliasMetaDataBuilder;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class ToAndFromJsonMetaDataTests extends ESTestCase {
+
+    @Test
     public void testSimpleJsonFromAndTo() throws IOException {
         MetaData metaData = MetaData.builder()
                 .put(IndexMetaData.builder("test1")
diff --git a/core/src/test/java/org/elasticsearch/cluster/metadata/WildcardExpressionResolverTests.java b/core/src/test/java/org/elasticsearch/cluster/metadata/WildcardExpressionResolverTests.java
index 324086a..fa6217e 100644
--- a/core/src/test/java/org/elasticsearch/cluster/metadata/WildcardExpressionResolverTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/metadata/WildcardExpressionResolverTests.java
@@ -24,6 +24,7 @@ import org.elasticsearch.action.support.IndicesOptions;
 import org.elasticsearch.cluster.ClusterName;
 import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 
@@ -31,6 +32,8 @@ import static org.elasticsearch.common.util.set.Sets.newHashSet;
 import static org.hamcrest.Matchers.equalTo;
 
 public class WildcardExpressionResolverTests extends ESTestCase {
+
+    @Test
     public void testConvertWildcardsJustIndicesTests() {
         MetaData.Builder mdBuilder = MetaData.builder()
                 .put(indexBuilder("testXXX"))
@@ -49,6 +52,7 @@ public class WildcardExpressionResolverTests extends ESTestCase {
         assertThat(newHashSet(resolver.resolve(context, Arrays.asList("testX*", "kuku"))), equalTo(newHashSet("testXXX", "testXYY", "kuku")));
     }
 
+    @Test
     public void testConvertWildcardsTests() {
         MetaData.Builder mdBuilder = MetaData.builder()
                 .put(indexBuilder("testXXX").putAlias(AliasMetaData.builder("alias1")).putAlias(AliasMetaData.builder("alias2")))
@@ -66,6 +70,7 @@ public class WildcardExpressionResolverTests extends ESTestCase {
         assertThat(newHashSet(resolver.resolve(context, Arrays.asList("+testYYY", "+testX*"))), equalTo(newHashSet("testXXX", "testXYY", "testYYY")));
     }
 
+    @Test
     public void testConvertWildcardsOpenClosedIndicesTests() {
         MetaData.Builder mdBuilder = MetaData.builder()
                 .put(indexBuilder("testXXX").state(IndexMetaData.State.OPEN))
diff --git a/core/src/test/java/org/elasticsearch/cluster/node/DiscoveryNodeFiltersTests.java b/core/src/test/java/org/elasticsearch/cluster/node/DiscoveryNodeFiltersTests.java
index ef54814..2136d1e 100644
--- a/core/src/test/java/org/elasticsearch/cluster/node/DiscoveryNodeFiltersTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/node/DiscoveryNodeFiltersTests.java
@@ -26,6 +26,7 @@ import org.elasticsearch.common.transport.InetSocketTransportAddress;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
+import org.junit.Test;
 
 import java.net.InetAddress;
 import java.net.UnknownHostException;
@@ -57,7 +58,8 @@ public class DiscoveryNodeFiltersTests extends ESTestCase {
         localAddress = null;
     }
 
-    public void testNameMatch() {
+    @Test
+    public void nameMatch() {
         Settings settings = Settings.settingsBuilder()
                 .put("xxx.name", "name1")
                 .build();
@@ -70,7 +72,8 @@ public class DiscoveryNodeFiltersTests extends ESTestCase {
         assertThat(filters.match(node), equalTo(false));
     }
 
-    public void testIdMatch() {
+    @Test
+    public void idMatch() {
         Settings settings = Settings.settingsBuilder()
                 .put("xxx._id", "id1")
                 .build();
@@ -83,7 +86,8 @@ public class DiscoveryNodeFiltersTests extends ESTestCase {
         assertThat(filters.match(node), equalTo(false));
     }
 
-    public void testIdOrNameMatch() {
+    @Test
+    public void idOrNameMatch() {
         Settings settings = shuffleSettings(Settings.settingsBuilder()
                 .put("xxx._id", "id1,blah")
                 .put("xxx.name", "blah,name2")
@@ -100,7 +104,8 @@ public class DiscoveryNodeFiltersTests extends ESTestCase {
         assertThat(filters.match(node), equalTo(false));
     }
 
-    public void testTagAndGroupMatch() {
+    @Test
+    public void tagAndGroupMatch() {
         Settings settings = shuffleSettings(Settings.settingsBuilder()
                 .put("xxx.tag", "A")
                 .put("xxx.group", "B")
@@ -134,7 +139,8 @@ public class DiscoveryNodeFiltersTests extends ESTestCase {
         assertThat(filters.match(node), equalTo(false));
     }
 
-    public void testStarMatch() {
+    @Test
+    public void starMatch() {
         Settings settings = Settings.settingsBuilder()
                 .put("xxx.name", "*")
                 .build();
@@ -144,7 +150,8 @@ public class DiscoveryNodeFiltersTests extends ESTestCase {
         assertThat(filters.match(node), equalTo(true));
     }
 
-    public void testIpBindFilteringMatchingAnd() {
+    @Test
+    public void ipBindFilteringMatchingAnd() {
         Settings settings = shuffleSettings(Settings.settingsBuilder()
                 .put("xxx.tag", "A")
                 .put("xxx." + randomFrom("_ip", "_host_ip", "_publish_ip"), "192.1.1.54")
@@ -155,7 +162,8 @@ public class DiscoveryNodeFiltersTests extends ESTestCase {
         assertThat(filters.match(node), equalTo(true));
     }
 
-    public void testIpBindFilteringNotMatching() {
+    @Test
+    public void ipBindFilteringNotMatching() {
         Settings settings = shuffleSettings(Settings.settingsBuilder()
                 .put("xxx.tag", "B")
                 .put("xxx." + randomFrom("_ip", "_host_ip", "_publish_ip"), "192.1.1.54")
@@ -166,7 +174,8 @@ public class DiscoveryNodeFiltersTests extends ESTestCase {
         assertThat(filters.match(node), equalTo(false));
     }
 
-    public void testIpBindFilteringNotMatchingAnd() {
+    @Test
+    public void ipBindFilteringNotMatchingAnd() {
         Settings settings = shuffleSettings(Settings.settingsBuilder()
                 .put("xxx.tag", "A")
                 .put("xxx." + randomFrom("_ip", "_host_ip", "_publish_ip"), "8.8.8.8")
@@ -177,7 +186,8 @@ public class DiscoveryNodeFiltersTests extends ESTestCase {
         assertThat(filters.match(node), equalTo(false));
     }
 
-    public void testIpBindFilteringMatchingOr() {
+    @Test
+    public void ipBindFilteringMatchingOr() {
         Settings settings = shuffleSettings(Settings.settingsBuilder()
                 .put("xxx." + randomFrom("_ip", "_host_ip", "_publish_ip"), "192.1.1.54")
                 .put("xxx.tag", "A")
@@ -188,7 +198,8 @@ public class DiscoveryNodeFiltersTests extends ESTestCase {
         assertThat(filters.match(node), equalTo(true));
     }
 
-    public void testIpBindFilteringNotMatchingOr() {
+    @Test
+    public void ipBindFilteringNotMatchingOr() {
         Settings settings = shuffleSettings(Settings.settingsBuilder()
                 .put("xxx.tag", "A")
                 .put("xxx." + randomFrom("_ip", "_host_ip", "_publish_ip"), "8.8.8.8")
@@ -199,7 +210,8 @@ public class DiscoveryNodeFiltersTests extends ESTestCase {
         assertThat(filters.match(node), equalTo(true));
     }
 
-    public void testIpPublishFilteringMatchingAnd() {
+    @Test
+    public void ipPublishFilteringMatchingAnd() {
         Settings settings = shuffleSettings(Settings.settingsBuilder()
                 .put("xxx.tag", "A")
                 .put("xxx._publish_ip", "192.1.1.54")
@@ -210,7 +222,8 @@ public class DiscoveryNodeFiltersTests extends ESTestCase {
         assertThat(filters.match(node), equalTo(true));
     }
 
-    public void testIpPublishFilteringNotMatchingAnd() {
+    @Test
+    public void ipPublishFilteringNotMatchingAnd() {
         Settings settings = shuffleSettings(Settings.settingsBuilder()
                 .put("xxx.tag", "A")
                 .put("xxx._publish_ip", "8.8.8.8")
@@ -221,7 +234,8 @@ public class DiscoveryNodeFiltersTests extends ESTestCase {
         assertThat(filters.match(node), equalTo(false));
     }
 
-    public void testIpPublishFilteringMatchingOr() {
+    @Test
+    public void ipPublishFilteringMatchingOr() {
         Settings settings = shuffleSettings(Settings.settingsBuilder()
                 .put("xxx._publish_ip", "192.1.1.54")
                 .put("xxx.tag", "A")
@@ -232,7 +246,8 @@ public class DiscoveryNodeFiltersTests extends ESTestCase {
         assertThat(filters.match(node), equalTo(true));
     }
 
-    public void testIpPublishFilteringNotMatchingOr() {
+    @Test
+    public void ipPublishFilteringNotMatchingOr() {
         Settings settings = shuffleSettings(Settings.settingsBuilder()
                 .put("xxx.tag", "A")
                 .put("xxx._publish_ip", "8.8.8.8")
@@ -245,11 +260,13 @@ public class DiscoveryNodeFiltersTests extends ESTestCase {
 
     private Settings shuffleSettings(Settings source) {
         Settings.Builder settings = Settings.settingsBuilder();
-        List<String> keys = new ArrayList<>(source.getAsMap().keySet());
+        List<String> keys = new ArrayList(source.getAsMap().keySet());
         Collections.shuffle(keys, getRandom());
         for (String o : keys) {
             settings.put(o, source.getAsMap().get(o));
         }
         return settings.build();
     }
+
+
 }
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/AllocationIdTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/AllocationIdTests.java
index 8d6953e..262b3db 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/AllocationIdTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/AllocationIdTests.java
@@ -20,15 +20,15 @@
 package org.elasticsearch.cluster.routing;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
 public class AllocationIdTests extends ESTestCase {
+
+    @Test
     public void testShardToStarted() {
         logger.info("-- create unassigned shard");
         ShardRouting shard = ShardRouting.newUnassigned("test", 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
@@ -49,6 +49,7 @@ public class AllocationIdTests extends ESTestCase {
         assertThat(allocationId.getRelocationId(), nullValue());
     }
 
+    @Test
     public void testSuccessfulRelocation() {
         logger.info("-- build started shard");
         ShardRouting shard = ShardRouting.newUnassigned("test", 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
@@ -72,6 +73,7 @@ public class AllocationIdTests extends ESTestCase {
         assertThat(target.allocationId().getRelocationId(), nullValue());
     }
 
+    @Test
     public void testCancelRelocation() {
         logger.info("-- build started shard");
         ShardRouting shard = ShardRouting.newUnassigned("test", 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
@@ -92,6 +94,7 @@ public class AllocationIdTests extends ESTestCase {
         assertThat(shard.allocationId().getRelocationId(), nullValue());
     }
 
+    @Test
     public void testMoveToUnassigned() {
         logger.info("-- build started shard");
         ShardRouting shard = ShardRouting.newUnassigned("test", 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
@@ -103,6 +106,7 @@ public class AllocationIdTests extends ESTestCase {
         assertThat(shard.allocationId(), nullValue());
     }
 
+    @Test
     public void testReinitializing() {
         logger.info("-- build started shard");
         ShardRouting shard = ShardRouting.newUnassigned("test", 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/DelayedAllocationIT.java b/core/src/test/java/org/elasticsearch/cluster/routing/DelayedAllocationIT.java
index 6d6f0d6..c6e9f09 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/DelayedAllocationIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/DelayedAllocationIT.java
@@ -26,6 +26,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.InternalTestCluster;
+import org.junit.Test;
 
 import java.util.Collections;
 import java.util.List;
@@ -42,6 +43,7 @@ public class DelayedAllocationIT extends ESIntegTestCase {
      * Verifies that when there is no delay timeout, a 1/1 index shard will immediately
      * get allocated to a free node when the node hosting it leaves the cluster.
      */
+    @Test
     public void testNoDelayedTimeout() throws Exception {
         internalCluster().startNodesAsync(3).get();
         prepareCreate("test").setSettings(Settings.builder()
@@ -61,6 +63,7 @@ public class DelayedAllocationIT extends ESIntegTestCase {
      * get allocated. Once we bring the node back, it gets allocated since it existed
      * on it before.
      */
+    @Test
     public void testDelayedAllocationNodeLeavesAndComesBack() throws Exception {
         internalCluster().startNodesAsync(3).get();
         prepareCreate("test").setSettings(Settings.builder()
@@ -85,6 +88,7 @@ public class DelayedAllocationIT extends ESIntegTestCase {
      * With a very small delay timeout, verify that it expires and we get to green even
      * though the node hosting the shard is not coming back.
      */
+    @Test
     public void testDelayedAllocationTimesOut() throws Exception {
         internalCluster().startNodesAsync(3).get();
         prepareCreate("test").setSettings(Settings.builder()
@@ -107,6 +111,7 @@ public class DelayedAllocationIT extends ESIntegTestCase {
      * allocation to a very small value, it kicks the allocation of the unassigned shard
      * even though the node it was hosted on will not come back.
      */
+    @Test
     public void testDelayedAllocationChangeWithSettingTo100ms() throws Exception {
         internalCluster().startNodesAsync(3).get();
         prepareCreate("test").setSettings(Settings.builder()
@@ -133,6 +138,7 @@ public class DelayedAllocationIT extends ESIntegTestCase {
      * allocation to 0, it kicks the allocation of the unassigned shard
      * even though the node it was hosted on will not come back.
      */
+    @Test
     public void testDelayedAllocationChangeWithSettingTo0() throws Exception {
         internalCluster().startNodesAsync(3).get();
         prepareCreate("test").setSettings(Settings.builder()
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/RoutingServiceTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/RoutingServiceTests.java
index f0df406..9309fa7 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/RoutingServiceTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/RoutingServiceTests.java
@@ -34,6 +34,7 @@ import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.List;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -57,12 +58,14 @@ public class RoutingServiceTests extends ESAllocationTestCase {
         routingService.shutdown();
     }
 
+    @Test
     public void testReroute() {
         assertThat(routingService.hasReroutedAndClear(), equalTo(false));
         routingService.reroute("test");
         assertThat(routingService.hasReroutedAndClear(), equalTo(true));
     }
 
+    @Test
     public void testNoDelayedUnassigned() throws Exception {
         AllocationService allocation = createAllocationService();
         MetaData metaData = MetaData.builder()
@@ -91,6 +94,7 @@ public class RoutingServiceTests extends ESAllocationTestCase {
         assertThat(routingService.hasReroutedAndClear(), equalTo(false));
     }
 
+    @Test
     @TestLogging("_root:DEBUG")
     public void testDelayedUnassignedScheduleReroute() throws Exception {
         AllocationService allocation = createAllocationService();
@@ -138,6 +142,7 @@ public class RoutingServiceTests extends ESAllocationTestCase {
         assertThat(routingService.getRegisteredNextDelaySetting(), equalTo(Long.MAX_VALUE));
     }
 
+    @Test
     public void testDelayedUnassignedDoesNotRerouteForNegativeDelays() throws Exception {
         AllocationService allocation = createAllocationService();
         MetaData metaData = MetaData.builder()
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/RoutingTableTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/RoutingTableTests.java
index d7e5478..2a7ed6a 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/RoutingTableTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/RoutingTableTests.java
@@ -31,6 +31,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.IndexNotFoundException;
 import org.elasticsearch.test.ESAllocationTestCase;
 import org.junit.Before;
+import org.junit.Test;
 
 import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
@@ -108,6 +109,7 @@ public class RoutingTableTests extends ESAllocationTestCase {
                 .numberOfShards(this.numberOfShards);
     }
 
+    @Test
     public void testAllShards() {
         assertThat(this.emptyRoutingTable.allShards().size(), is(0));
         assertThat(this.testRoutingTable.allShards().size(), is(this.totalNumberOfShards));
@@ -121,22 +123,26 @@ public class RoutingTableTests extends ESAllocationTestCase {
         }
     }
 
+    @Test
     public void testHasIndex() {
         assertThat(this.testRoutingTable.hasIndex(TEST_INDEX_1), is(true));
         assertThat(this.testRoutingTable.hasIndex("foobar"), is(false));
     }
 
+    @Test
     public void testIndex() {
         assertThat(this.testRoutingTable.index(TEST_INDEX_1).getIndex(), is(TEST_INDEX_1));
         assertThat(this.testRoutingTable.index("foobar"), is(nullValue()));
     }
 
+    @Test
     public void testIndicesRouting() {
         assertThat(this.testRoutingTable.indicesRouting().size(), is(2));
         assertThat(this.testRoutingTable.getIndicesRouting().size(), is(2));
         assertSame(this.testRoutingTable.getIndicesRouting(), this.testRoutingTable.indicesRouting());
     }
 
+    @Test
     public void testShardsWithState() {
         assertThat(this.testRoutingTable.shardsWithState(ShardRoutingState.UNASSIGNED).size(), is(this.totalNumberOfShards));
 
@@ -162,6 +168,7 @@ public class RoutingTableTests extends ESAllocationTestCase {
         assertThat(this.testRoutingTable.shardsWithState(ShardRoutingState.STARTED).size(), is(this.totalNumberOfShards));
     }
 
+    @Test
     public void testActivePrimaryShardsGrouped() {
         assertThat(this.emptyRoutingTable.activePrimaryShardsGrouped(new String[0], true).size(), is(0));
         assertThat(this.emptyRoutingTable.activePrimaryShardsGrouped(new String[0], false).size(), is(0));
@@ -191,6 +198,7 @@ public class RoutingTableTests extends ESAllocationTestCase {
         }
     }
 
+    @Test
     public void testAllActiveShardsGrouped() {
         assertThat(this.emptyRoutingTable.allActiveShardsGrouped(new String[0], true).size(), is(0));
         assertThat(this.emptyRoutingTable.allActiveShardsGrouped(new String[0], false).size(), is(0));
@@ -219,6 +227,7 @@ public class RoutingTableTests extends ESAllocationTestCase {
         }
     }
 
+    @Test
     public void testAllAssignedShardsGrouped() {
         assertThat(this.testRoutingTable.allAssignedShardsGrouped(new String[]{TEST_INDEX_1}, false).size(), is(0));
         assertThat(this.testRoutingTable.allAssignedShardsGrouped(new String[]{TEST_INDEX_1}, true).size(), is(this.shardsPerIndex));
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/UnassignedInfoTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/UnassignedInfoTests.java
index bd99130..fc7ce64 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/UnassignedInfoTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/UnassignedInfoTests.java
@@ -36,6 +36,7 @@ import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import java.util.Collections;
 import java.util.EnumSet;
@@ -53,6 +54,8 @@ import static org.hamcrest.Matchers.nullValue;
 /**
  */
 public class UnassignedInfoTests extends ESAllocationTestCase {
+
+    @Test
     public void testReasonOrdinalOrder() {
         UnassignedInfo.Reason[] order = new UnassignedInfo.Reason[]{
                 UnassignedInfo.Reason.INDEX_CREATED,
@@ -73,6 +76,7 @@ public class UnassignedInfoTests extends ESAllocationTestCase {
         assertThat(UnassignedInfo.Reason.values().length, equalTo(order.length));
     }
 
+    @Test
     public void testSerialization() throws Exception {
         UnassignedInfo meta = new UnassignedInfo(RandomPicks.randomFrom(getRandom(), UnassignedInfo.Reason.values()), randomBoolean() ? randomAsciiOfLength(4) : null);
         BytesStreamOutput out = new BytesStreamOutput();
@@ -86,6 +90,7 @@ public class UnassignedInfoTests extends ESAllocationTestCase {
         assertThat(read.getDetails(), equalTo(meta.getDetails()));
     }
 
+    @Test
     public void testIndexCreated() {
         MetaData metaData = MetaData.builder()
                 .put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 3)).numberOfReplicas(randomIntBetween(0, 3)))
@@ -98,6 +103,7 @@ public class UnassignedInfoTests extends ESAllocationTestCase {
         }
     }
 
+    @Test
     public void testClusterRecovered() {
         MetaData metaData = MetaData.builder()
                 .put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 3)).numberOfReplicas(randomIntBetween(0, 3)))
@@ -110,6 +116,7 @@ public class UnassignedInfoTests extends ESAllocationTestCase {
         }
     }
 
+    @Test
     public void testIndexReopened() {
         MetaData metaData = MetaData.builder()
                 .put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 3)).numberOfReplicas(randomIntBetween(0, 3)))
@@ -122,6 +129,7 @@ public class UnassignedInfoTests extends ESAllocationTestCase {
         }
     }
 
+    @Test
     public void testNewIndexRestored() {
         MetaData metaData = MetaData.builder()
                 .put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 3)).numberOfReplicas(randomIntBetween(0, 3)))
@@ -134,6 +142,7 @@ public class UnassignedInfoTests extends ESAllocationTestCase {
         }
     }
 
+    @Test
     public void testExistingIndexRestored() {
         MetaData metaData = MetaData.builder()
                 .put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 3)).numberOfReplicas(randomIntBetween(0, 3)))
@@ -146,6 +155,7 @@ public class UnassignedInfoTests extends ESAllocationTestCase {
         }
     }
 
+    @Test
     public void testDanglingIndexImported() {
         MetaData metaData = MetaData.builder()
                 .put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 3)).numberOfReplicas(randomIntBetween(0, 3)))
@@ -158,6 +168,7 @@ public class UnassignedInfoTests extends ESAllocationTestCase {
         }
     }
 
+    @Test
     public void testReplicaAdded() {
         AllocationService allocation = createAllocationService();
         MetaData metaData = MetaData.builder()
@@ -184,6 +195,7 @@ public class UnassignedInfoTests extends ESAllocationTestCase {
     /**
      * The unassigned meta is kept when a shard goes to INITIALIZING, but cleared when it moves to STARTED.
      */
+    @Test
     public void testStateTransitionMetaHandling() {
         ShardRouting shard = TestShardRouting.newShardRouting("test", 1, null, null, null, true, ShardRoutingState.UNASSIGNED, 1, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
         ShardRouting mutable = new ShardRouting(shard);
@@ -199,6 +211,7 @@ public class UnassignedInfoTests extends ESAllocationTestCase {
     /**
      * Tests that during reroute when a node is detected as leaving the cluster, the right unassigned meta is set
      */
+    @Test
     public void testNodeLeave() {
         AllocationService allocation = createAllocationService();
         MetaData metaData = MetaData.builder()
@@ -228,6 +241,7 @@ public class UnassignedInfoTests extends ESAllocationTestCase {
     /**
      * Verifies that when a shard fails, reason is properly set and details are preserved.
      */
+    @Test
     public void testFailedShard() {
         AllocationService allocation = createAllocationService();
         MetaData metaData = MetaData.builder()
@@ -259,6 +273,7 @@ public class UnassignedInfoTests extends ESAllocationTestCase {
     /**
      * Verifies that delayed allocation calculation are correct.
      */
+    @Test
     public void testUnassignedDelayedOnlyOnNodeLeft() throws Exception {
         final UnassignedInfo unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.NODE_LEFT, null);
         long delay = unassignedInfo.getAllocationDelayTimeoutSetting(Settings.builder().put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING, "10h").build(), Settings.EMPTY);
@@ -277,6 +292,7 @@ public class UnassignedInfoTests extends ESAllocationTestCase {
     /**
      * Verifies that delayed allocation is only computed when the reason is NODE_LEFT.
      */
+    @Test
     public void testUnassignedDelayOnlyNodeLeftNonNodeLeftReason() throws Exception {
         EnumSet<UnassignedInfo.Reason> reasons = EnumSet.allOf(UnassignedInfo.Reason.class);
         reasons.remove(UnassignedInfo.Reason.NODE_LEFT);
@@ -288,6 +304,7 @@ public class UnassignedInfoTests extends ESAllocationTestCase {
         assertThat(delay, equalTo(0l));
     }
 
+    @Test
     public void testNumberOfDelayedUnassigned() throws Exception {
         AllocationService allocation = createAllocationService();
         MetaData metaData = MetaData.builder()
@@ -313,6 +330,7 @@ public class UnassignedInfoTests extends ESAllocationTestCase {
                 Settings.builder().put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING, "10h").build(), clusterState), equalTo(2));
     }
 
+    @Test
     public void testFindNextDelayedAllocation() {
         AllocationService allocation = createAllocationService();
         MetaData metaData = MetaData.builder()
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/AddIncrementallyTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/AddIncrementallyTests.java
index 958c2e7..836422f 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/AddIncrementallyTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/AddIncrementallyTests.java
@@ -38,6 +38,7 @@ import org.elasticsearch.common.util.CollectionUtils;
 import org.elasticsearch.test.ESAllocationTestCase;
 import org.hamcrest.Matcher;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -49,6 +50,7 @@ import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 public class AddIncrementallyTests extends ESAllocationTestCase {
     private final ESLogger logger = Loggers.getLogger(AddIncrementallyTests.class);
 
+    @Test
     public void testAddNodesAndIndices() {
         Settings.Builder settings = settingsBuilder();
         settings.put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, ClusterRebalanceAllocationDecider.ClusterRebalanceType.ALWAYS.toString());
@@ -92,6 +94,7 @@ public class AddIncrementallyTests extends ESAllocationTestCase {
         logger.debug("ClusterState: {}", clusterState.getRoutingNodes().prettyPrint());
     }
 
+    @Test
     public void testMinimalRelocations() {
         Settings.Builder settings = settingsBuilder();
         settings.put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, ClusterRebalanceAllocationDecider.ClusterRebalanceType.ALWAYS.toString())
@@ -160,6 +163,7 @@ public class AddIncrementallyTests extends ESAllocationTestCase {
         logger.debug("ClusterState: {}", clusterState.getRoutingNodes().prettyPrint());
     }
 
+    @Test
     public void testMinimalRelocationsNoLimit() {
         Settings.Builder settings = settingsBuilder();
         settings.put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, ClusterRebalanceAllocationDecider.ClusterRebalanceType.ALWAYS.toString())
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/AllocationCommandsTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/AllocationCommandsTests.java
index 6d4013a..96cba27 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/AllocationCommandsTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/AllocationCommandsTests.java
@@ -40,6 +40,7 @@ import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.XContentType;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import static java.util.Collections.singletonMap;
 import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
@@ -51,9 +52,11 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public class AllocationCommandsTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(AllocationCommandsTests.class);
 
-    public void testMoveShardCommand() {
+    @Test
+    public void moveShardCommand() {
         AllocationService allocation = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).build());
 
         logger.info("creating an index with 1 shard, no replica");
@@ -96,7 +99,8 @@ public class AllocationCommandsTests extends ESAllocationTestCase {
         assertThat(clusterState.getRoutingNodes().node(toNodeId).get(0).state(), equalTo(ShardRoutingState.STARTED));
     }
 
-    public void testAllocateCommand() {
+    @Test
+    public void allocateCommand() {
         AllocationService allocation = createAllocationService(settingsBuilder()
                 .put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE, "none")
                 .put(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE, "none")
@@ -184,7 +188,8 @@ public class AllocationCommandsTests extends ESAllocationTestCase {
         }
     }
 
-    public void testCancelCommand() {
+    @Test
+    public void cancelCommand() {
         AllocationService allocation = createAllocationService(settingsBuilder()
                 .put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE, "none")
                 .put(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE, "none")
@@ -333,7 +338,8 @@ public class AllocationCommandsTests extends ESAllocationTestCase {
         assertThat(clusterState.getRoutingNodes().node("node3").size(), equalTo(0));
     }
 
-    public void testSerialization() throws Exception {
+    @Test
+    public void serialization() throws Exception {
         AllocationCommands commands = new AllocationCommands(
                 new AllocateAllocationCommand(new ShardId("test", 1), "node1", true),
                 new MoveAllocationCommand(new ShardId("test", 3), "node2", "node3"),
@@ -357,7 +363,8 @@ public class AllocationCommandsTests extends ESAllocationTestCase {
         assertThat(((CancelAllocationCommand) (sCommands.commands().get(2))).allowPrimary(), equalTo(true));
     }
 
-    public void testXContent() throws Exception {
+    @Test
+    public void xContent() throws Exception {
         String commands = "{\n" +
                 "    \"commands\" : [\n" +
                 "        {\"allocate\" : {\"index\" : \"test\", \"shard\" : 1, \"node\" : \"node1\", \"allow_primary\" : true}}\n" +
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/AwarenessAllocationTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/AwarenessAllocationTests.java
index 91c38e6..e17ac30 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/AwarenessAllocationTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/AwarenessAllocationTests.java
@@ -35,6 +35,7 @@ import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import static java.util.Collections.singletonMap;
 import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
@@ -52,7 +53,8 @@ public class AwarenessAllocationTests extends ESAllocationTestCase {
 
     private final ESLogger logger = Loggers.getLogger(AwarenessAllocationTests.class);
 
-    public void testMoveShardOnceNewNodeWithAttributeAdded1() {
+    @Test
+    public void moveShardOnceNewNodeWithAttributeAdded1() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
                 .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, "always")
@@ -120,7 +122,8 @@ public class AwarenessAllocationTests extends ESAllocationTestCase {
         assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));
     }
 
-    public void testMoveShardOnceNewNodeWithAttributeAdded2() {
+    @Test
+    public void moveShardOnceNewNodeWithAttributeAdded2() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
                 .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, "always")
@@ -189,7 +192,8 @@ public class AwarenessAllocationTests extends ESAllocationTestCase {
         assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));
     }
 
-    public void testMoveShardOnceNewNodeWithAttributeAdded3() {
+    @Test
+    public void moveShardOnceNewNodeWithAttributeAdded3() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.node_concurrent_recoveries", 10)
                 .put("cluster.routing.allocation.node_initial_primaries_recoveries", 10)
@@ -289,7 +293,8 @@ public class AwarenessAllocationTests extends ESAllocationTestCase {
         assertThat(strategy.reroute(clusterState).routingTable(), sameInstance(clusterState.routingTable()));
     }
 
-    public void testMoveShardOnceNewNodeWithAttributeAdded4() {
+    @Test
+    public void moveShardOnceNewNodeWithAttributeAdded4() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.node_concurrent_recoveries", 10)
                 .put("cluster.routing.allocation.node_initial_primaries_recoveries", 10)
@@ -384,7 +389,8 @@ public class AwarenessAllocationTests extends ESAllocationTestCase {
         assertThat(strategy.reroute(clusterState).routingTable(), sameInstance(clusterState.routingTable()));
     }
 
-    public void testMoveShardOnceNewNodeWithAttributeAdded5() {
+    @Test
+    public void moveShardOnceNewNodeWithAttributeAdded5() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
                 .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, "always")
@@ -462,7 +468,8 @@ public class AwarenessAllocationTests extends ESAllocationTestCase {
         assertThat(strategy.reroute(clusterState).routingTable(), sameInstance(clusterState.routingTable()));
     }
 
-    public void testMoveShardOnceNewNodeWithAttributeAdded6() {
+    @Test
+    public void moveShardOnceNewNodeWithAttributeAdded6() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
                 .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, "always")
@@ -542,7 +549,8 @@ public class AwarenessAllocationTests extends ESAllocationTestCase {
         assertThat(strategy.reroute(clusterState).routingTable(), sameInstance(clusterState.routingTable()));
     }
 
-    public void testFullAwareness1() {
+    @Test
+    public void fullAwareness1() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
                 .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, "always")
@@ -609,7 +617,8 @@ public class AwarenessAllocationTests extends ESAllocationTestCase {
         assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));
     }
 
-    public void testFullAwareness2() {
+    @Test
+    public void fullAwareness2() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
                 .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, "always")
@@ -677,7 +686,8 @@ public class AwarenessAllocationTests extends ESAllocationTestCase {
         assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));
     }
 
-    public void testFullAwareness3() {
+    @Test
+    public void fullAwareness3() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.node_concurrent_recoveries", 10)
                 .put("cluster.routing.allocation.node_initial_primaries_recoveries", 10)
@@ -761,6 +771,7 @@ public class AwarenessAllocationTests extends ESAllocationTestCase {
         assertThat(strategy.reroute(clusterState).routingTable(), sameInstance(clusterState.routingTable()));
     }
 
+    @Test
     public void testUnbalancedZones() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.awareness.force.zone.values", "a,b")
@@ -825,6 +836,7 @@ public class AwarenessAllocationTests extends ESAllocationTestCase {
         assertThat(clusterState.getRoutingNodes().node("B-0").size(), equalTo(5));
     }
 
+    @Test
     public void testUnassignedShardsWithUnbalancedZones() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/BalanceConfigurationTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/BalanceConfigurationTests.java
index 8c7ff26..2bd18f8 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/BalanceConfigurationTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/BalanceConfigurationTests.java
@@ -44,6 +44,7 @@ import org.elasticsearch.node.settings.NodeSettingsService;
 import org.elasticsearch.test.ESAllocationTestCase;
 import org.elasticsearch.test.gateway.NoopGatewayAllocator;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
 import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
@@ -58,6 +59,7 @@ public class BalanceConfigurationTests extends ESAllocationTestCase {
     final int numberOfShards = 2;
     final int numberOfReplicas = 2;
 
+    @Test
     public void testIndexBalance() {
         /* Tests balance over indices only */
         final float indexBalance = 1.0f;
@@ -83,6 +85,7 @@ public class BalanceConfigurationTests extends ESAllocationTestCase {
 
     }
 
+    @Test
     public void testReplicaBalance() {
         /* Tests balance over replicas only */
         final float indexBalance = 0.0f;
@@ -277,6 +280,7 @@ public class BalanceConfigurationTests extends ESAllocationTestCase {
         }
     }
 
+    @Test
     public void testPersistedSettings() {
         Settings.Builder settings = settingsBuilder();
         settings.put(BalancedShardsAllocator.SETTING_INDEX_BALANCE_FACTOR, 0.2);
@@ -314,6 +318,7 @@ public class BalanceConfigurationTests extends ESAllocationTestCase {
         assertThat(allocator.getThreshold(), Matchers.equalTo(3.0f));
     }
 
+    @Test
     public void testNoRebalanceOnPrimaryOverload() {
         Settings.Builder settings = settingsBuilder();
         AllocationService strategy = new AllocationService(settings.build(), randomAllocationDeciders(settings.build(),
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/CatAllocationTestCase.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/CatAllocationTestCase.java
index 022e0cc..6253feb 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/CatAllocationTestCase.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/CatAllocationTestCase.java
@@ -19,35 +19,26 @@
 
 package org.elasticsearch.cluster.routing.allocation;
 
+import java.nio.charset.StandardCharsets;
 import org.elasticsearch.Version;
 import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.cluster.metadata.MetaData;
 import org.elasticsearch.cluster.node.DiscoveryNodes;
-import org.elasticsearch.cluster.routing.IndexRoutingTable;
-import org.elasticsearch.cluster.routing.IndexShardRoutingTable;
-import org.elasticsearch.cluster.routing.RoutingTable;
-import org.elasticsearch.cluster.routing.ShardRouting;
-import org.elasticsearch.cluster.routing.ShardRoutingState;
-import org.elasticsearch.cluster.routing.TestShardRouting;
+import org.elasticsearch.cluster.routing.*;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import java.io.BufferedReader;
 import java.io.IOException;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
+import static org.elasticsearch.cluster.routing.ShardRoutingState.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 
 /**
@@ -59,9 +50,11 @@ import static org.elasticsearch.common.settings.Settings.settingsBuilder;
  * This can be used to debug cluster allocation decisions.
  */
 public abstract class CatAllocationTestCase extends ESAllocationTestCase {
+
     protected abstract Path getCatPath() throws IOException;
 
-    public void testRun() throws IOException {
+    @Test
+    public void run() throws IOException {
         Set<String> nodes = new HashSet<>();
         Map<String, Idx> indices = new HashMap<>();
         try (BufferedReader reader = Files.newBufferedReader(getCatPath(), StandardCharsets.UTF_8)) {
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ClusterRebalanceRoutingTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ClusterRebalanceRoutingTests.java
index af71688..59e7529 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ClusterRebalanceRoutingTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ClusterRebalanceRoutingTests.java
@@ -30,17 +30,18 @@ import org.elasticsearch.cluster.routing.allocation.decider.ClusterRebalanceAllo
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.UNASSIGNED;
+import static org.elasticsearch.cluster.routing.ShardRoutingState.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.equalTo;
 
 public class ClusterRebalanceRoutingTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(ClusterRebalanceRoutingTests.class);
 
+    @Test
     public void testAlways() {
         AllocationService strategy = createAllocationService(settingsBuilder().put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE,
                 ClusterRebalanceAllocationDecider.ClusterRebalanceType.ALWAYS.toString()).build());
@@ -127,6 +128,7 @@ public class ClusterRebalanceRoutingTests extends ESAllocationTestCase {
     }
 
 
+    @Test
     public void testClusterPrimariesActive1() {
         AllocationService strategy = createAllocationService(settingsBuilder().put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE,
                 ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE.toString()).build());
@@ -231,6 +233,7 @@ public class ClusterRebalanceRoutingTests extends ESAllocationTestCase {
         assertThat(routingNodes.node("node3").get(0).shardId().index().name(), equalTo("test1"));
     }
 
+    @Test
     public void testClusterPrimariesActive2() {
         AllocationService strategy = createAllocationService(settingsBuilder().put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE,
                 ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE.toString()).build());
@@ -315,6 +318,7 @@ public class ClusterRebalanceRoutingTests extends ESAllocationTestCase {
         assertThat(routingNodes.node("node3").isEmpty(), equalTo(true));
     }
 
+    @Test
     public void testClusterAllActive1() {
         AllocationService strategy = createAllocationService(settingsBuilder().put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE,
                 ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_ALL_ACTIVE.toString()).build());
@@ -438,6 +442,7 @@ public class ClusterRebalanceRoutingTests extends ESAllocationTestCase {
         assertThat(routingNodes.node("node3").get(0).shardId().index().name(), anyOf(equalTo("test1"), equalTo("test2")));
     }
 
+    @Test
     public void testClusterAllActive2() {
         AllocationService strategy = createAllocationService(settingsBuilder().put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE,
                 ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_ALL_ACTIVE.toString()).build());
@@ -522,6 +527,7 @@ public class ClusterRebalanceRoutingTests extends ESAllocationTestCase {
         assertThat(routingNodes.node("node3").isEmpty(), equalTo(true));
     }
 
+    @Test
     public void testClusterAllActive3() {
         AllocationService strategy = createAllocationService(settingsBuilder().put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE,
                 ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_ALL_ACTIVE.toString()).build());
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ConcurrentRebalanceRoutingTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ConcurrentRebalanceRoutingTests.java
index 957dec2..7fe26d0 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ConcurrentRebalanceRoutingTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ConcurrentRebalanceRoutingTests.java
@@ -29,18 +29,18 @@ import org.elasticsearch.cluster.routing.RoutingTable;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.RELOCATING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.UNASSIGNED;
+import static org.elasticsearch.cluster.routing.ShardRoutingState.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.nullValue;
 
 public class ConcurrentRebalanceRoutingTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(ConcurrentRebalanceRoutingTests.class);
 
+    @Test
     public void testClusterConcurrentRebalance() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
@@ -70,6 +70,7 @@ public class ConcurrentRebalanceRoutingTests extends ESAllocationTestCase {
 
         logger.info("start two nodes and fully start the shards");
         clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1")).put(newNode("node2"))).build();
+        RoutingTable prevRoutingTable = routingTable;
         routingTable = strategy.reroute(clusterState).routingTable();
         clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();
 
@@ -81,6 +82,7 @@ public class ConcurrentRebalanceRoutingTests extends ESAllocationTestCase {
 
         logger.info("start all the primary shards, replicas will start initializing");
         RoutingNodes routingNodes = clusterState.getRoutingNodes();
+        prevRoutingTable = routingTable;
         routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable();
         clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();
         routingNodes = clusterState.getRoutingNodes();
@@ -95,6 +97,7 @@ public class ConcurrentRebalanceRoutingTests extends ESAllocationTestCase {
         clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())
                 .put(newNode("node3")).put(newNode("node4")).put(newNode("node5")).put(newNode("node6")).put(newNode("node7")).put(newNode("node8")).put(newNode("node9")).put(newNode("node10")))
                 .build();
+        prevRoutingTable = routingTable;
         routingTable = strategy.reroute(clusterState).routingTable();
         clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();
         routingNodes = clusterState.getRoutingNodes();
@@ -107,6 +110,7 @@ public class ConcurrentRebalanceRoutingTests extends ESAllocationTestCase {
 
         logger.info("start the replica shards, rebalancing should start, but, only 3 should be rebalancing");
         routingNodes = clusterState.getRoutingNodes();
+        prevRoutingTable = routingTable;
         routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable();
         clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();
         routingNodes = clusterState.getRoutingNodes();
@@ -117,6 +121,7 @@ public class ConcurrentRebalanceRoutingTests extends ESAllocationTestCase {
 
         logger.info("finalize this session relocation, 3 more should relocate now");
         routingNodes = clusterState.getRoutingNodes();
+        prevRoutingTable = routingTable;
         routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable();
         clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();
         routingNodes = clusterState.getRoutingNodes();
@@ -127,6 +132,7 @@ public class ConcurrentRebalanceRoutingTests extends ESAllocationTestCase {
 
         logger.info("finalize this session relocation, 2 more should relocate now");
         routingNodes = clusterState.getRoutingNodes();
+        prevRoutingTable = routingTable;
         routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable();
         clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();
         routingNodes = clusterState.getRoutingNodes();
@@ -137,6 +143,7 @@ public class ConcurrentRebalanceRoutingTests extends ESAllocationTestCase {
 
         logger.info("finalize this session relocation, no more relocation");
         routingNodes = clusterState.getRoutingNodes();
+        prevRoutingTable = routingTable;
         routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable();
         clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();
         routingNodes = clusterState.getRoutingNodes();
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/DeadNodesAllocationTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/DeadNodesAllocationTests.java
index 80efb97..43f8479 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/DeadNodesAllocationTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/DeadNodesAllocationTests.java
@@ -31,19 +31,20 @@ import org.elasticsearch.cluster.routing.allocation.decider.ClusterRebalanceAllo
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.RELOCATING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
+import static org.elasticsearch.cluster.routing.ShardRoutingState.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.equalTo;
 
 /**
  */
 public class DeadNodesAllocationTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(DeadNodesAllocationTests.class);
 
-    public void testSimpleDeadNodeOnStartedPrimaryShard() {
+    @Test
+    public void simpleDeadNodeOnStartedPrimaryShard() {
         AllocationService allocation = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
                 .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, "always")
@@ -94,7 +95,8 @@ public class DeadNodesAllocationTests extends ESAllocationTestCase {
         assertThat(clusterState.getRoutingNodes().node(nodeIdRemaining).get(0).state(), equalTo(STARTED));
     }
 
-    public void testDeadNodeWhileRelocatingOnToNode() {
+    @Test
+    public void deadNodeWhileRelocatingOnToNode() {
         AllocationService allocation = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
                 .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, "always")
@@ -168,7 +170,8 @@ public class DeadNodesAllocationTests extends ESAllocationTestCase {
         assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).get(0).state(), equalTo(STARTED));
     }
 
-    public void testDeadNodeWhileRelocatingOnFromNode() {
+    @Test
+    public void deadNodeWhileRelocatingOnFromNode() {
         AllocationService allocation = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
                 .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, "always")
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ElectReplicaAsPrimaryDuringRelocationTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ElectReplicaAsPrimaryDuringRelocationTests.java
index 63dbfa3..d2ece37 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ElectReplicaAsPrimaryDuringRelocationTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ElectReplicaAsPrimaryDuringRelocationTests.java
@@ -30,6 +30,7 @@ import org.elasticsearch.cluster.routing.RoutingTable;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
 import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
@@ -40,8 +41,10 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class ElectReplicaAsPrimaryDuringRelocationTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(ElectReplicaAsPrimaryDuringRelocationTests.class);
 
+    @Test
     public void testElectReplicaAsPrimaryDuringRelocation() {
         AllocationService strategy = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).build());
 
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ExpectedShardSizeAllocationTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ExpectedShardSizeAllocationTests.java
index 7488c97..e6a0ec4 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ExpectedShardSizeAllocationTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ExpectedShardSizeAllocationTests.java
@@ -32,20 +32,28 @@ import org.elasticsearch.cluster.routing.ShardRouting;
 import org.elasticsearch.cluster.routing.ShardRoutingState;
 import org.elasticsearch.cluster.routing.allocation.command.AllocationCommands;
 import org.elasticsearch.cluster.routing.allocation.command.MoveAllocationCommand;
+import org.elasticsearch.cluster.routing.allocation.decider.ShardsLimitAllocationDecider;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
+import java.util.Collections;
+
+import static org.elasticsearch.cluster.routing.ShardRoutingState.*;
+import static org.elasticsearch.cluster.routing.allocation.RoutingNodesUtils.numberOfShardsOfType;
+import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.equalTo;
 
 /**
  */
 public class ExpectedShardSizeAllocationTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(ExpectedShardSizeAllocationTests.class);
 
+    @Test
     public void testInitializingHasExpectedSize() {
         final long byteSize = randomIntBetween(0, Integer.MAX_VALUE);
         AllocationService strategy = createAllocationService(Settings.EMPTY, new ClusterInfoService() {
@@ -104,6 +112,7 @@ public class ExpectedShardSizeAllocationTests extends ESAllocationTestCase {
         assertEquals(byteSize, clusterState.getRoutingNodes().getRoutingTable().shardsWithState(ShardRoutingState.INITIALIZING).get(0).getExpectedShardSize());
     }
 
+    @Test
     public void testExpectedSizeOnMove() {
         final long byteSize = randomIntBetween(0, Integer.MAX_VALUE);
         final AllocationService allocation = createAllocationService(Settings.EMPTY, new ClusterInfoService() {
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/FailedNodeRoutingTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/FailedNodeRoutingTests.java
index c43dd19..70b056b 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/FailedNodeRoutingTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/FailedNodeRoutingTests.java
@@ -31,6 +31,7 @@ import org.elasticsearch.cluster.routing.allocation.decider.ClusterRebalanceAllo
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
 import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
@@ -38,9 +39,11 @@ import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.equalTo;
 
 public class FailedNodeRoutingTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(FailedNodeRoutingTests.class);
 
-    public void testSimpleFailedNodeTest() {
+    @Test
+    public void simpleFailedNodeTest() {
         AllocationService strategy = createAllocationService(settingsBuilder().put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE,
                 ClusterRebalanceAllocationDecider.ClusterRebalanceType.ALWAYS.toString()).build());
 
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/FailedShardsRoutingTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/FailedShardsRoutingTests.java
index 480336e..ff2ae10 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/FailedShardsRoutingTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/FailedShardsRoutingTests.java
@@ -24,36 +24,30 @@ import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.cluster.metadata.MetaData;
 import org.elasticsearch.cluster.node.DiscoveryNodes;
-import org.elasticsearch.cluster.routing.RoutingNodes;
-import org.elasticsearch.cluster.routing.RoutingTable;
-import org.elasticsearch.cluster.routing.ShardRouting;
+import org.elasticsearch.cluster.routing.*;
 import org.elasticsearch.cluster.routing.allocation.command.AllocationCommands;
 import org.elasticsearch.cluster.routing.allocation.command.MoveAllocationCommand;
 import org.elasticsearch.cluster.routing.allocation.decider.ClusterRebalanceAllocationDecider;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collections;
 
-import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.RELOCATING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.UNASSIGNED;
+import static org.elasticsearch.cluster.routing.ShardRoutingState.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.hamcrest.Matchers.anyOf;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.lessThan;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class FailedShardsRoutingTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(FailedShardsRoutingTests.class);
 
+    @Test
     public void testFailedShardPrimaryRelocatingToAndFrom() {
         AllocationService allocation = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
@@ -142,7 +136,8 @@ public class FailedShardsRoutingTests extends ESAllocationTestCase {
         assertThat(clusterState.routingTable().index("test").shard(0).replicaShards().get(0).currentNodeId(), anyOf(equalTo(origPrimaryNodeId), equalTo("node3")));
     }
 
-    public void testFailPrimaryStartedCheckReplicaElected() {
+    @Test
+    public void failPrimaryStartedCheckReplicaElected() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
                 .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, "always")
@@ -223,7 +218,8 @@ public class FailedShardsRoutingTests extends ESAllocationTestCase {
         assertThat(strategy.applyFailedShard(clusterState, shardToFail).changed(), equalTo(false));
     }
 
-    public void testFirstAllocationFailureSingleNode() {
+    @Test
+    public void firstAllocationFailureSingleNode() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
                 .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, "always")
@@ -279,7 +275,8 @@ public class FailedShardsRoutingTests extends ESAllocationTestCase {
         assertThat(strategy.applyFailedShard(clusterState, firstShard).changed(), equalTo(false));
     }
 
-    public void testSingleShardMultipleAllocationFailures() {
+    @Test
+    public void singleShardMultipleAllocationFailures() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
                 .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, "always")
@@ -335,7 +332,8 @@ public class FailedShardsRoutingTests extends ESAllocationTestCase {
         }
     }
 
-    public void testFirstAllocationFailureTwoNodes() {
+    @Test
+    public void firstAllocationFailureTwoNodes() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
                 .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, "always")
@@ -395,7 +393,8 @@ public class FailedShardsRoutingTests extends ESAllocationTestCase {
         assertThat(strategy.applyFailedShard(clusterState, firstShard).changed(), equalTo(false));
     }
 
-    public void testRebalanceFailure() {
+    @Test
+    public void rebalanceFailure() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
                 .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE, "always")
@@ -490,6 +489,7 @@ public class FailedShardsRoutingTests extends ESAllocationTestCase {
         assertThat(routingNodes.node("node3").get(0).shardId(), not(equalTo(shardToFail.shardId())));
     }
 
+    @Test
     public void testFailAllReplicasInitializingOnPrimaryFail() {
         AllocationService allocation = createAllocationService(settingsBuilder()
                 .build());
@@ -536,6 +536,7 @@ public class FailedShardsRoutingTests extends ESAllocationTestCase {
         assertThat(routingResult.changed(), equalTo(false));
     }
 
+    @Test
     public void testFailAllReplicasInitializingOnPrimaryFailWhileHavingAReplicaToElect() {
         AllocationService allocation = createAllocationService(settingsBuilder()
                 .build());
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/FilterRoutingTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/FilterRoutingTests.java
index f7f694d..eb4d62a 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/FilterRoutingTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/FilterRoutingTests.java
@@ -31,6 +31,7 @@ import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.List;
 
@@ -42,8 +43,10 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public class FilterRoutingTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(FilterRoutingTests.class);
 
+    @Test
     public void testClusterFilters() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.include.tag1", "value1,value2")
@@ -89,6 +92,7 @@ public class FilterRoutingTests extends ESAllocationTestCase {
         }
     }
 
+    @Test
     public void testIndexFilters() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .build());
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/IndexBalanceTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/IndexBalanceTests.java
index 1df9de8..aece576 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/IndexBalanceTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/IndexBalanceTests.java
@@ -30,10 +30,9 @@ import org.elasticsearch.cluster.routing.allocation.decider.ClusterRebalanceAllo
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.UNASSIGNED;
+import static org.elasticsearch.cluster.routing.ShardRoutingState.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.nullValue;
@@ -42,8 +41,10 @@ import static org.hamcrest.Matchers.nullValue;
  *
  */
 public class IndexBalanceTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(IndexBalanceTests.class);
 
+    @Test
     public void testBalanceAllNodesStarted() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.node_concurrent_recoveries", 10)
@@ -174,6 +175,7 @@ public class IndexBalanceTests extends ESAllocationTestCase {
         assertThat(routingNodes.node("node3").shardsWithState("test1", STARTED).size(), equalTo(2));
     }
 
+    @Test
     public void testBalanceIncrementallyStartNodes() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.node_concurrent_recoveries", 10)
@@ -336,6 +338,7 @@ public class IndexBalanceTests extends ESAllocationTestCase {
         assertThat(routingNodes.node("node3").shardsWithState("test1", STARTED).size(), equalTo(2));
     }
 
+    @Test
     public void testBalanceAllNodesStartedAddIndex() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.node_concurrent_recoveries", 10)
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/NodeVersionAllocationDeciderTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/NodeVersionAllocationDeciderTests.java
index d7d9a3f..344d6b9 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/NodeVersionAllocationDeciderTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/NodeVersionAllocationDeciderTests.java
@@ -25,36 +25,34 @@ import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.cluster.metadata.MetaData;
 import org.elasticsearch.cluster.node.DiscoveryNode;
 import org.elasticsearch.cluster.node.DiscoveryNodes;
+import org.elasticsearch.cluster.routing.ShardRouting;
 import org.elasticsearch.cluster.routing.RoutingNodes;
 import org.elasticsearch.cluster.routing.RoutingTable;
-import org.elasticsearch.cluster.routing.ShardRouting;
 import org.elasticsearch.cluster.routing.ShardRoutingState;
 import org.elasticsearch.cluster.routing.allocation.decider.ClusterRebalanceAllocationDecider;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
 import org.elasticsearch.test.VersionUtils;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.UNASSIGNED;
+import static org.elasticsearch.cluster.routing.ShardRoutingState.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.test.VersionUtils.randomVersion;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class NodeVersionAllocationDeciderTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(NodeVersionAllocationDeciderTests.class);
 
+    @Test
     public void testDoNotAllocateFromPrimary() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
@@ -169,6 +167,8 @@ public class NodeVersionAllocationDeciderTests extends ESAllocationTestCase {
         }
     }
 
+
+    @Test
     public void testRandom() {
         AllocationService service = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
@@ -218,6 +218,7 @@ public class NodeVersionAllocationDeciderTests extends ESAllocationTestCase {
         }
     }
 
+    @Test
     public void testRollingRestart() {
         AllocationService service = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PreferLocalPrimariesToRelocatingPrimariesTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PreferLocalPrimariesToRelocatingPrimariesTests.java
index bcb4e34..616949e 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PreferLocalPrimariesToRelocatingPrimariesTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PreferLocalPrimariesToRelocatingPrimariesTests.java
@@ -26,6 +26,7 @@ import org.elasticsearch.cluster.node.DiscoveryNodes;
 import org.elasticsearch.cluster.routing.RoutingTable;
 import org.elasticsearch.cluster.routing.ShardRouting;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import static java.util.Collections.singletonMap;
 import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
@@ -38,6 +39,7 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public class PreferLocalPrimariesToRelocatingPrimariesTests extends ESAllocationTestCase {
+    @Test
     public void testPreferLocalPrimaryAllocationOverFiltered() {
         int concurrentRecoveries = randomIntBetween(1, 10);
         int primaryRecoveries = randomIntBetween(1, 10);
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PreferPrimaryAllocationTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PreferPrimaryAllocationTests.java
index 219a7a5..108281e 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PreferPrimaryAllocationTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PreferPrimaryAllocationTests.java
@@ -28,6 +28,7 @@ import org.elasticsearch.cluster.routing.RoutingTable;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
@@ -36,8 +37,10 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public class PreferPrimaryAllocationTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(PreferPrimaryAllocationTests.class);
 
+    @Test
     public void testPreferPrimaryAllocationOverReplicas() {
         logger.info("create an allocation with 1 initial recoveries");
         AllocationService strategy = createAllocationService(settingsBuilder()
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryElectionRoutingTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryElectionRoutingTests.java
index 119348a..69824f1 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryElectionRoutingTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryElectionRoutingTests.java
@@ -29,6 +29,7 @@ import org.elasticsearch.cluster.routing.RoutingTable;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
 import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
@@ -40,8 +41,10 @@ import static org.hamcrest.Matchers.nullValue;
  *
  */
 public class PrimaryElectionRoutingTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(PrimaryElectionRoutingTests.class);
 
+    @Test
     public void testBackupElectionToPrimaryWhenPrimaryCanBeAllocatedToAnotherNode() {
         AllocationService strategy = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).build());
 
@@ -92,6 +95,7 @@ public class PrimaryElectionRoutingTests extends ESAllocationTestCase {
         assertThat(routingTable.index("test").shard(0).replicaShards().get(0).currentNodeId(), equalTo("node3"));
     }
 
+    @Test
     public void testRemovingInitializingReplicasIfPrimariesFails() {
         AllocationService allocation = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).build());
 
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryNotRelocatedWhileBeingRecoveredTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryNotRelocatedWhileBeingRecoveredTests.java
index 8e4d686..c295b4f 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryNotRelocatedWhileBeingRecoveredTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryNotRelocatedWhileBeingRecoveredTests.java
@@ -29,6 +29,7 @@ import org.elasticsearch.cluster.routing.RoutingTable;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
 import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
@@ -39,8 +40,11 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class PrimaryNotRelocatedWhileBeingRecoveredTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(PrimaryNotRelocatedWhileBeingRecoveredTests.class);
 
+
+    @Test
     public void testPrimaryNotRelocatedWhileBeingRecoveredFrom() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.node_concurrent_recoveries", 10)
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/RandomAllocationDeciderTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/RandomAllocationDeciderTests.java
index d0a86c0..4c82860 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/RandomAllocationDeciderTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/RandomAllocationDeciderTests.java
@@ -39,6 +39,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESAllocationTestCase;
 import org.elasticsearch.test.gateway.NoopGatewayAllocator;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.HashSet;
@@ -49,11 +50,13 @@ import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.equalTo;
 
 public class RandomAllocationDeciderTests extends ESAllocationTestCase {
+
     /* This test will make random allocation decision on a growing and shrinking
      * cluster leading to a random distribution of the shards. After a certain
      * amount of iterations the test allows allocation unless the same shard is
      * already allocated on a node and balances the cluster to gain optimal
      * balance.*/
+    @Test
     public void testRandomDecisions() {
         RandomAllocationDecider randomAllocationDecider = new RandomAllocationDecider(getRandom());
         AllocationService strategy = new AllocationService(settingsBuilder().build(), new AllocationDeciders(Settings.EMPTY,
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/RebalanceAfterActiveTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/RebalanceAfterActiveTests.java
index 51e1f89..4dd8850 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/RebalanceAfterActiveTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/RebalanceAfterActiveTests.java
@@ -33,12 +33,13 @@ import org.elasticsearch.cluster.routing.ShardRouting;
 import org.elasticsearch.cluster.routing.allocation.decider.ClusterRebalanceAllocationDecider;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
+import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.RELOCATING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.UNASSIGNED;
+import java.util.Collections;
+
+import static org.elasticsearch.cluster.routing.ShardRoutingState.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.nullValue;
@@ -47,8 +48,10 @@ import static org.hamcrest.Matchers.nullValue;
  *
  */
 public class RebalanceAfterActiveTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(RebalanceAfterActiveTests.class);
 
+    @Test
     public void testRebalanceOnlyAfterAllShardsAreActive() {
         final long[] sizes = new long[5];
         for (int i =0; i < sizes.length; i++) {
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ReplicaAllocatedAfterPrimaryTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ReplicaAllocatedAfterPrimaryTests.java
index decaac5..5444058 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ReplicaAllocatedAfterPrimaryTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ReplicaAllocatedAfterPrimaryTests.java
@@ -29,21 +29,20 @@ import org.elasticsearch.cluster.routing.RoutingTable;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.UNASSIGNED;
+import static org.elasticsearch.cluster.routing.ShardRoutingState.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class ReplicaAllocatedAfterPrimaryTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(ReplicaAllocatedAfterPrimaryTests.class);
 
+    @Test
     public void testBackupIsAllocatedAfterPrimary() {
         AllocationService strategy = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).build());
 
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/RoutingNodesIntegrityTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/RoutingNodesIntegrityTests.java
index 65a654d..9800966 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/RoutingNodesIntegrityTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/RoutingNodesIntegrityTests.java
@@ -31,6 +31,7 @@ import org.elasticsearch.cluster.routing.allocation.decider.ClusterRebalanceAllo
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
 import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
@@ -41,8 +42,10 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class RoutingNodesIntegrityTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(IndexBalanceTests.class);
 
+    @Test
     public void testBalanceAllNodesStarted() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.node_concurrent_recoveries", 10)
@@ -115,6 +118,7 @@ public class RoutingNodesIntegrityTests extends ESAllocationTestCase {
 
     }
 
+    @Test
     public void testBalanceIncrementallyStartNodes() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.node_concurrent_recoveries", 10)
@@ -207,6 +211,7 @@ public class RoutingNodesIntegrityTests extends ESAllocationTestCase {
         assertThat(routingNodes.node("node3").shardsWithState("test1", STARTED).size(), equalTo(2));
     }
 
+    @Test
     public void testBalanceAllNodesStartedAddIndex() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.node_concurrent_recoveries", 1)
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/SameShardRoutingTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/SameShardRoutingTests.java
index 057071e..86369b9 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/SameShardRoutingTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/SameShardRoutingTests.java
@@ -33,6 +33,7 @@ import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.common.transport.DummyTransportAddress;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import static java.util.Collections.emptyMap;
 import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
@@ -43,9 +44,11 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public class SameShardRoutingTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(SameShardRoutingTests.class);
 
-    public void testSameHost() {
+    @Test
+    public void sameHost() {
         AllocationService strategy = createAllocationService(settingsBuilder().put(SameShardAllocationDecider.SAME_HOST_SETTING, true).build());
 
         MetaData metaData = MetaData.builder()
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ShardVersioningTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ShardVersioningTests.java
index 10118fa..1074f8b 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ShardVersioningTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ShardVersioningTests.java
@@ -30,17 +30,18 @@ import org.elasticsearch.cluster.routing.allocation.decider.ClusterRebalanceAllo
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.UNASSIGNED;
+import static org.elasticsearch.cluster.routing.ShardRoutingState.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.equalTo;
 
 public class ShardVersioningTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(ShardVersioningTests.class);
 
-    public void testSimple() {
+    @Test
+    public void simple() {
         AllocationService strategy = createAllocationService(settingsBuilder().put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE,
                 ClusterRebalanceAllocationDecider.ClusterRebalanceType.ALWAYS.toString()).build());
 
@@ -58,6 +59,7 @@ public class ShardVersioningTests extends ESAllocationTestCase {
 
         logger.info("start two nodes");
         clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1")).put(newNode("node2"))).build();
+        RoutingTable prevRoutingTable = routingTable;
         routingTable = strategy.reroute(clusterState).routingTable();
         clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();
 
@@ -77,6 +79,7 @@ public class ShardVersioningTests extends ESAllocationTestCase {
 
         logger.info("start all the primary shards for test1, replicas will start initializing");
         RoutingNodes routingNodes = clusterState.getRoutingNodes();
+        prevRoutingTable = routingTable;
         routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState("test1", INITIALIZING)).routingTable();
         clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();
         routingNodes = clusterState.getRoutingNodes();
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ShardsLimitAllocationTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ShardsLimitAllocationTests.java
index 9ecae9c..c59e90f 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ShardsLimitAllocationTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ShardsLimitAllocationTests.java
@@ -24,18 +24,17 @@ import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.cluster.metadata.MetaData;
 import org.elasticsearch.cluster.node.DiscoveryNodes;
+import org.elasticsearch.cluster.routing.ShardRouting;
 import org.elasticsearch.cluster.routing.RoutingNodes;
 import org.elasticsearch.cluster.routing.RoutingTable;
-import org.elasticsearch.cluster.routing.ShardRouting;
 import org.elasticsearch.cluster.routing.ShardRoutingState;
 import org.elasticsearch.cluster.routing.allocation.decider.ShardsLimitAllocationDecider;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.RELOCATING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
+import static org.elasticsearch.cluster.routing.ShardRoutingState.*;
 import static org.elasticsearch.cluster.routing.allocation.RoutingNodesUtils.numberOfShardsOfType;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.equalTo;
@@ -43,9 +42,11 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public class ShardsLimitAllocationTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(ShardsLimitAllocationTests.class);
 
-    public void testIndexLevelShardsLimitAllocate() {
+    @Test
+    public void indexLevelShardsLimitAllocate() {
         AllocationService strategy = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).build());
 
         logger.info("Building initial routing table");
@@ -87,7 +88,8 @@ public class ShardsLimitAllocationTests extends ESAllocationTestCase {
         clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();
     }
 
-    public void testIndexLevelShardsLimitRemain() {
+    @Test
+    public void indexLevelShardsLimitRemain() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
                 .put("cluster.routing.allocation.node_initial_primaries_recoveries", 10)
@@ -179,7 +181,7 @@ public class ShardsLimitAllocationTests extends ESAllocationTestCase {
         routingNodes = clusterState.getRoutingNodes();
         routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable();
         clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();
-        // now we are done compared to EvenShardCountAllocator since the Balancer is not soely based on the average
+        // now we are done compared to EvenShardCountAllocator since the Balancer is not soely based on the average 
         assertThat(clusterState.getRoutingNodes().node("node1").numberOfShardsWithState(STARTED), equalTo(5));
         assertThat(clusterState.getRoutingNodes().node("node2").numberOfShardsWithState(STARTED), equalTo(5));
     }
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/SingleShardNoReplicasRoutingTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/SingleShardNoReplicasRoutingTests.java
index 7dd9893..e197dbd 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/SingleShardNoReplicasRoutingTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/SingleShardNoReplicasRoutingTests.java
@@ -33,6 +33,7 @@ import org.elasticsearch.cluster.routing.allocation.decider.ClusterRebalanceAllo
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -56,8 +57,10 @@ import static org.hamcrest.Matchers.nullValue;
  *
  */
 public class SingleShardNoReplicasRoutingTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(SingleShardNoReplicasRoutingTests.class);
 
+    @Test
     public void testSingleIndexStartedShard() {
         AllocationService strategy = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).build());
 
@@ -159,6 +162,7 @@ public class SingleShardNoReplicasRoutingTests extends ESAllocationTestCase {
         assertThat(routingTable.index("test").shard(0).shards().get(0).currentNodeId(), equalTo("node2"));
     }
 
+    @Test
     public void testSingleIndexShardFailed() {
         AllocationService strategy = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).build());
 
@@ -208,6 +212,7 @@ public class SingleShardNoReplicasRoutingTests extends ESAllocationTestCase {
         assertThat(routingTable.index("test").shard(0).shards().get(0).currentNodeId(), nullValue());
     }
 
+    @Test
     public void testMultiIndexEvenDistribution() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
@@ -320,6 +325,7 @@ public class SingleShardNoReplicasRoutingTests extends ESAllocationTestCase {
         assertThat(numberOfStartedShards, equalTo(25));
     }
 
+    @Test
     public void testMultiIndexUnevenNodes() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/SingleShardOneReplicaRoutingTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/SingleShardOneReplicaRoutingTests.java
index 405fa81..7ea7e1c 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/SingleShardOneReplicaRoutingTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/SingleShardOneReplicaRoutingTests.java
@@ -29,10 +29,9 @@ import org.elasticsearch.cluster.routing.RoutingTable;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.UNASSIGNED;
+import static org.elasticsearch.cluster.routing.ShardRoutingState.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.nullValue;
@@ -41,8 +40,10 @@ import static org.hamcrest.Matchers.nullValue;
  *
  */
 public class SingleShardOneReplicaRoutingTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(SingleShardOneReplicaRoutingTests.class);
 
+    @Test
     public void testSingleIndexFirstStartPrimaryThenBackups() {
         AllocationService strategy = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).build());
 
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/StartedShardsRoutingTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/StartedShardsRoutingTests.java
index 2803391..1e8a5fb 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/StartedShardsRoutingTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/StartedShardsRoutingTests.java
@@ -32,6 +32,7 @@ import org.elasticsearch.cluster.routing.ShardRouting;
 import org.elasticsearch.cluster.routing.ShardRoutingState;
 import org.elasticsearch.cluster.routing.TestShardRouting;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 
@@ -39,7 +40,9 @@ import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.nullValue;
 
 public class StartedShardsRoutingTests extends ESAllocationTestCase {
-    public void testStartedShardsMatching() {
+
+    @Test
+    public void tesStartedShardsMatching() {
         AllocationService allocation = createAllocationService();
 
         logger.info("--> building initial cluster state");
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/TenShardsOneReplicaRoutingTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/TenShardsOneReplicaRoutingTests.java
index 2e89a4b..d6e7c86 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/TenShardsOneReplicaRoutingTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/TenShardsOneReplicaRoutingTests.java
@@ -30,22 +30,20 @@ import org.elasticsearch.cluster.routing.allocation.decider.ClusterRebalanceAllo
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.RELOCATING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.UNASSIGNED;
+import static org.elasticsearch.cluster.routing.ShardRoutingState.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.lessThan;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class TenShardsOneReplicaRoutingTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(TenShardsOneReplicaRoutingTests.class);
 
+    @Test
     public void testSingleIndexFirstStartPrimaryThenBackups() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.node_concurrent_recoveries", 10)
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ThrottlingAllocationTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ThrottlingAllocationTests.java
index 0c4a7a8..c156aea 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ThrottlingAllocationTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/ThrottlingAllocationTests.java
@@ -28,10 +28,9 @@ import org.elasticsearch.cluster.routing.RoutingTable;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.UNASSIGNED;
+import static org.elasticsearch.cluster.routing.ShardRoutingState.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.equalTo;
 
@@ -39,8 +38,10 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class ThrottlingAllocationTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(ThrottlingAllocationTests.class);
 
+    @Test
     public void testPrimaryRecoveryThrottling() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.node_concurrent_recoveries", 3)
@@ -101,6 +102,7 @@ public class ThrottlingAllocationTests extends ESAllocationTestCase {
         assertThat(routingTable.shardsWithState(UNASSIGNED).size(), equalTo(10));
     }
 
+    @Test
     public void testReplicaAndPrimaryRecoveryThrottling() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 3)
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/UpdateNumberOfReplicasTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/UpdateNumberOfReplicasTests.java
index d8d4fc5..0ae8362 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/UpdateNumberOfReplicasTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/UpdateNumberOfReplicasTests.java
@@ -29,22 +29,20 @@ import org.elasticsearch.cluster.routing.RoutingTable;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
-import static org.elasticsearch.cluster.routing.ShardRoutingState.UNASSIGNED;
+import static org.elasticsearch.cluster.routing.ShardRoutingState.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.hamcrest.Matchers.anyOf;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class UpdateNumberOfReplicasTests extends ESAllocationTestCase {
+
     private final ESLogger logger = Loggers.getLogger(UpdateNumberOfReplicasTests.class);
 
+    @Test
     public void testUpdateNumberOfReplicas() {
         AllocationService strategy = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).build());
 
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java
index 2f9104a..525c446 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java
@@ -49,6 +49,7 @@ import org.elasticsearch.common.transport.LocalTransportAddress;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.test.ESAllocationTestCase;
 import org.elasticsearch.test.gateway.NoopGatewayAllocator;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.HashMap;
@@ -70,7 +71,8 @@ public class DiskThresholdDeciderTests extends ESAllocationTestCase {
         return new ShardsAllocators(NoopGatewayAllocator.INSTANCE);
     }
 
-    public void testDiskThreshold() {
+    @Test
+    public void diskThresholdTest() {
         Settings diskSettings = settingsBuilder()
                 .put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED, true)
                 .put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK, 0.7)
@@ -264,7 +266,8 @@ public class DiskThresholdDeciderTests extends ESAllocationTestCase {
         assertThat(clusterState.getRoutingNodes().node("node4").size(), equalTo(1));
     }
 
-    public void testDiskThresholdWithAbsoluteSizes() {
+    @Test
+    public void diskThresholdWithAbsoluteSizesTest() {
         Settings diskSettings = settingsBuilder()
                 .put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED, true)
                 .put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK, "30b")
@@ -532,7 +535,8 @@ public class DiskThresholdDeciderTests extends ESAllocationTestCase {
         assertThat(clusterState.getRoutingNodes().node("node5").size(), equalTo(1));
     }
 
-    public void testDiskThresholdWithShardSizes() {
+    @Test
+    public void diskThresholdWithShardSizes() {
         Settings diskSettings = settingsBuilder()
                 .put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED, true)
                 .put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK, 0.7)
@@ -599,7 +603,8 @@ public class DiskThresholdDeciderTests extends ESAllocationTestCase {
         assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(0));
     }
 
-    public void testUnknownDiskUsage() {
+    @Test
+    public void unknownDiskUsageTest() {
         Settings diskSettings = settingsBuilder()
                 .put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED, true)
                 .put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK, 0.7)
@@ -673,7 +678,8 @@ public class DiskThresholdDeciderTests extends ESAllocationTestCase {
         assertThat(clusterState.getRoutingNodes().node("node1").size(), equalTo(1));
     }
 
-    public void testAverageUsage() {
+    @Test
+    public void averageUsageUnitTest() {
         RoutingNode rn = new RoutingNode("node1", newNode("node1"));
         DiskThresholdDecider decider = new DiskThresholdDecider(Settings.EMPTY);
 
@@ -686,7 +692,8 @@ public class DiskThresholdDeciderTests extends ESAllocationTestCase {
         assertThat(node1Usage.getFreeBytes(), equalTo(25L));
     }
 
-    public void testFreeDiskPercentageAfterShardAssigned() {
+    @Test
+    public void freeDiskPercentageAfterShardAssignedUnitTest() {
         RoutingNode rn = new RoutingNode("node1", newNode("node1"));
         DiskThresholdDecider decider = new DiskThresholdDecider(Settings.EMPTY);
 
@@ -698,6 +705,7 @@ public class DiskThresholdDeciderTests extends ESAllocationTestCase {
         assertThat(after, equalTo(19.0));
     }
 
+    @Test
     public void testShardRelocationsTakenIntoAccount() {
         Settings diskSettings = settingsBuilder()
                 .put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED, true)
@@ -804,6 +812,7 @@ public class DiskThresholdDeciderTests extends ESAllocationTestCase {
 
     }
 
+    @Test
     public void testCanRemainWithShardRelocatingAway() {
         Settings diskSettings = settingsBuilder()
                 .put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED, true)
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java
index fa31d83..5417a9b 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java
@@ -43,6 +43,7 @@ import org.elasticsearch.common.transport.LocalTransportAddress;
 import org.elasticsearch.common.unit.ByteSizeValue;
 import org.elasticsearch.node.settings.NodeSettingsService;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 
@@ -52,6 +53,8 @@ import static org.hamcrest.CoreMatchers.equalTo;
  * Unit tests for the DiskThresholdDecider
  */
 public class DiskThresholdDeciderUnitTests extends ESTestCase {
+
+    @Test
     public void testDynamicSettings() {
         NodeSettingsService nss = new NodeSettingsService(Settings.EMPTY);
 
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/EnableAllocationTests.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/EnableAllocationTests.java
index 801ffc0..3823893 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/EnableAllocationTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/EnableAllocationTests.java
@@ -20,15 +20,14 @@
 package org.elasticsearch.cluster.routing.allocation.decider;
 
 import com.carrotsearch.randomizedtesting.generators.RandomPicks;
-
 import org.elasticsearch.Version;
 import org.elasticsearch.cluster.ClusterChangedEvent;
 import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.cluster.metadata.MetaData;
 import org.elasticsearch.cluster.node.DiscoveryNodes;
-import org.elasticsearch.cluster.routing.RoutingTable;
 import org.elasticsearch.cluster.routing.ShardRouting;
+import org.elasticsearch.cluster.routing.RoutingTable;
 import org.elasticsearch.cluster.routing.allocation.AllocationService;
 import org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDecider.Allocation;
 import org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDecider.Rebalance;
@@ -37,6 +36,7 @@ import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.node.settings.NodeSettingsService;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import java.util.EnumSet;
 import java.util.List;
@@ -56,6 +56,7 @@ public class EnableAllocationTests extends ESAllocationTestCase {
 
     private final ESLogger logger = Loggers.getLogger(EnableAllocationTests.class);
 
+    @Test
     public void testClusterEnableNone() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put(CLUSTER_ROUTING_ALLOCATION_ENABLE, Allocation.NONE.name())
@@ -84,6 +85,7 @@ public class EnableAllocationTests extends ESAllocationTestCase {
 
     }
 
+    @Test
     public void testClusterEnableOnlyPrimaries() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put(CLUSTER_ROUTING_ALLOCATION_ENABLE, Allocation.PRIMARIES.name())
@@ -117,6 +119,7 @@ public class EnableAllocationTests extends ESAllocationTestCase {
         assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(0));
     }
 
+    @Test
     public void testIndexEnableNone() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .build());
@@ -155,6 +158,10 @@ public class EnableAllocationTests extends ESAllocationTestCase {
         assertThat(clusterState.getRoutingNodes().shardsWithState("disabled", STARTED).size(), equalTo(0));
     }
 
+
+
+
+    @Test
     public void testEnableClusterBalance() {
         final boolean useClusterSetting = randomBoolean();
         final Rebalance allowedOnes = RandomPicks.randomFrom(getRandom(), EnumSet.of(Rebalance.PRIMARIES, Rebalance.REPLICAS, Rebalance.ALL));
@@ -258,6 +265,7 @@ public class EnableAllocationTests extends ESAllocationTestCase {
 
     }
 
+    @Test
     public void testEnableClusterBalanceNoReplicas() {
         final boolean useClusterSetting = randomBoolean();
         Settings build = settingsBuilder()
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/MockDiskUsagesIT.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/MockDiskUsagesIT.java
index 126799f..8396f61 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/MockDiskUsagesIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/MockDiskUsagesIT.java
@@ -30,6 +30,7 @@ import org.elasticsearch.cluster.routing.RoutingNode;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -61,6 +62,7 @@ public class MockDiskUsagesIT extends ESIntegTestCase {
         return pluginList(MockInternalClusterInfoService.TestPlugin.class);
     }
 
+    @Test
     //@TestLogging("org.elasticsearch.cluster:TRACE,org.elasticsearch.cluster.routing.allocation.decider:TRACE")
     public void testRerouteOccursOnDiskPassingHighWatermark() throws Exception {
         List<String> nodes = internalCluster().startNodesAsync(3).get();
diff --git a/core/src/test/java/org/elasticsearch/cluster/serialization/ClusterSerializationTests.java b/core/src/test/java/org/elasticsearch/cluster/serialization/ClusterSerializationTests.java
index 9b01035..308b000 100644
--- a/core/src/test/java/org/elasticsearch/cluster/serialization/ClusterSerializationTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/serialization/ClusterSerializationTests.java
@@ -30,6 +30,7 @@ import org.elasticsearch.cluster.routing.allocation.AllocationService;
 import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 
@@ -37,6 +38,8 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class ClusterSerializationTests extends ESAllocationTestCase {
+
+    @Test
     public void testClusterStateSerialization() throws Exception {
         MetaData metaData = MetaData.builder()
                 .put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(10).numberOfReplicas(1))
@@ -56,10 +59,12 @@ public class ClusterSerializationTests extends ESAllocationTestCase {
         ClusterState serializedClusterState = ClusterState.Builder.fromBytes(ClusterState.Builder.toBytes(clusterState), newNode("node1"));
 
         assertThat(serializedClusterState.getClusterName().value(), equalTo(clusterState.getClusterName().value()));
-
+        
         assertThat(serializedClusterState.routingTable().prettyPrint(), equalTo(clusterState.routingTable().prettyPrint()));
     }
 
+
+    @Test
     public void testRoutingTableSerialization() throws Exception {
         MetaData metaData = MetaData.builder()
                 .put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(10).numberOfReplicas(1))
diff --git a/core/src/test/java/org/elasticsearch/cluster/serialization/ClusterStateToStringTests.java b/core/src/test/java/org/elasticsearch/cluster/serialization/ClusterStateToStringTests.java
index 4c45f40..573cb13 100644
--- a/core/src/test/java/org/elasticsearch/cluster/serialization/ClusterStateToStringTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/serialization/ClusterStateToStringTests.java
@@ -29,6 +29,7 @@ import org.elasticsearch.cluster.routing.RoutingTable;
 import org.elasticsearch.cluster.routing.allocation.AllocationService;
 import org.elasticsearch.common.transport.DummyTransportAddress;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.containsString;
 
@@ -36,6 +37,7 @@ import static org.hamcrest.Matchers.containsString;
  *
  */
 public class ClusterStateToStringTests extends ESAllocationTestCase {
+    @Test
     public void testClusterStateSerialization() throws Exception {
         MetaData metaData = MetaData.builder()
                 .put(IndexMetaData.builder("test_idx").settings(settings(Version.CURRENT)).numberOfShards(10).numberOfReplicas(1))
@@ -59,5 +61,7 @@ public class ClusterStateToStringTests extends ESAllocationTestCase {
         assertThat(clusterStateString, containsString("test_idx"));
         assertThat(clusterStateString, containsString("test_template"));
         assertThat(clusterStateString, containsString("node_foo"));
+
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/cluster/serialization/DiffableTests.java b/core/src/test/java/org/elasticsearch/cluster/serialization/DiffableTests.java
index 6c120e7..87280f6 100644
--- a/core/src/test/java/org/elasticsearch/cluster/serialization/DiffableTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/serialization/DiffableTests.java
@@ -29,6 +29,7 @@ import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.io.stream.StreamableReader;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.HashMap;
@@ -38,6 +39,8 @@ import static java.util.Collections.unmodifiableMap;
 import static org.hamcrest.CoreMatchers.equalTo;
 
 public class DiffableTests extends ESTestCase {
+
+    @Test
     public void testJdkMapDiff() throws IOException {
         Map<String, TestDiffable> before = new HashMap<>();
         before.put("foo", new TestDiffable("1"));
@@ -61,6 +64,7 @@ public class DiffableTests extends ESTestCase {
         assertThat(serialized.get("new").value(), equalTo("5"));
     }
 
+    @Test
     public void testImmutableOpenMapDiff() throws IOException {
         ImmutableOpenMap.Builder<String, TestDiffable> builder = ImmutableOpenMap.builder();
         builder.put("foo", new TestDiffable("1"));
diff --git a/core/src/test/java/org/elasticsearch/cluster/settings/ClusterSettingsIT.java b/core/src/test/java/org/elasticsearch/cluster/settings/ClusterSettingsIT.java
index c2a790c..6b99852 100644
--- a/core/src/test/java/org/elasticsearch/cluster/settings/ClusterSettingsIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/settings/ClusterSettingsIT.java
@@ -31,21 +31,21 @@ import org.elasticsearch.common.util.concurrent.EsExecutors;
 import org.elasticsearch.discovery.DiscoverySettings;
 import org.elasticsearch.indices.store.IndicesStore;
 import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import static org.elasticsearch.test.ESIntegTestCase.Scope.TEST;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 @ClusterScope(scope = TEST)
 public class ClusterSettingsIT extends ESIntegTestCase {
-    public void testClusterNonExistingSettingsUpdate() {
+
+    @Test
+    public void clusterNonExistingSettingsUpdate() {
         String key1 = "no_idea_what_you_are_talking_about";
         int value1 = 10;
 
@@ -58,7 +58,8 @@ public class ClusterSettingsIT extends ESIntegTestCase {
         assertThat(response.getTransientSettings().getAsMap().entrySet(), Matchers.emptyIterable());
     }
 
-    public void testClusterSettingsUpdateResponse() {
+    @Test
+    public void clusterSettingsUpdateResponse() {
         String key1 = IndicesStore.INDICES_STORE_THROTTLE_MAX_BYTES_PER_SEC;
         int value1 = 10;
 
@@ -114,6 +115,7 @@ public class ClusterSettingsIT extends ESIntegTestCase {
         assertThat(response3.getPersistentSettings().get(key2), notNullValue());
     }
 
+    @Test
     public void testUpdateDiscoveryPublishTimeout() {
 
         DiscoverySettings discoverySettings = internalCluster().getInstance(DiscoverySettings.class);
@@ -148,6 +150,7 @@ public class ClusterSettingsIT extends ESIntegTestCase {
         assertThat(discoverySettings.getPublishTimeout().seconds(), equalTo(1l));
     }
 
+    @Test
     public void testClusterUpdateSettingsWithBlocks() {
         String key1 = "cluster.routing.allocation.enable";
         Settings transientSettings = Settings.builder().put(key1, false).build();
@@ -182,18 +185,15 @@ public class ClusterSettingsIT extends ESIntegTestCase {
         assertThat(response.getPersistentSettings().get(key2), notNullValue());
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testMissingUnits() {
         assertAcked(prepareCreate("test"));
 
-        try {
-            client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.refresh_interval", "10")).execute().actionGet();
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("[index.refresh_interval] with value [10]"));
-            assertThat(e.getMessage(), containsString("unit is missing or unrecognized"));
-        }
+        // Should fail (missing units for refresh_interval):
+        client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.refresh_interval", "10")).execute().actionGet();
     }
 
+    @Test
     public void testMissingUnitsLenient() {
         try {
             createNode(Settings.builder().put(Settings.SETTINGS_REQUIRE_UNITS, "false").build());
diff --git a/core/src/test/java/org/elasticsearch/cluster/settings/SettingsFilteringIT.java b/core/src/test/java/org/elasticsearch/cluster/settings/SettingsFilteringIT.java
index c4ecb09..b7670ea 100644
--- a/core/src/test/java/org/elasticsearch/cluster/settings/SettingsFilteringIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/settings/SettingsFilteringIT.java
@@ -28,6 +28,7 @@ import org.elasticsearch.common.settings.SettingsFilter;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -84,7 +85,10 @@ public class SettingsFilteringIT extends ESIntegTestCase {
         }
     }
 
+
+    @Test
     public void testSettingsFiltering() {
+
         assertAcked(client().admin().indices().prepareCreate("test-idx").setSettings(Settings.builder()
                 .put("filter_test.foo", "test")
                 .put("filter_test.bar1", "test")
@@ -101,4 +105,5 @@ public class SettingsFilteringIT extends ESIntegTestCase {
         assertThat(settings.get("index.filter_test.notbar"), equalTo("test"));
         assertThat(settings.get("index.filter_test.notfoo"), equalTo("test"));
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/cluster/settings/SettingsValidatorTests.java b/core/src/test/java/org/elasticsearch/cluster/settings/SettingsValidatorTests.java
index 498acef..1e041aa 100644
--- a/core/src/test/java/org/elasticsearch/cluster/settings/SettingsValidatorTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/settings/SettingsValidatorTests.java
@@ -20,12 +20,13 @@
 package org.elasticsearch.cluster.settings;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 public class SettingsValidatorTests extends ESTestCase {
+
+    @Test
     public void testValidators() throws Exception {
         assertThat(Validator.EMPTY.validate("", "anything goes", null), nullValue());
 
@@ -97,6 +98,7 @@ public class SettingsValidatorTests extends ESTestCase {
         assertThat(Validator.BYTES_SIZE_OR_PERCENTAGE.validate("", "0%", null), nullValue());
     }
 
+    @Test
     public void testDynamicValidators() throws Exception {
         DynamicSettings.Builder ds = new DynamicSettings.Builder();
         ds.addSetting("my.test.*", Validator.POSITIVE_INTEGER);
diff --git a/core/src/test/java/org/elasticsearch/cluster/shards/ClusterSearchShardsIT.java b/core/src/test/java/org/elasticsearch/cluster/shards/ClusterSearchShardsIT.java
index 9c5d80d..422846f 100644
--- a/core/src/test/java/org/elasticsearch/cluster/shards/ClusterSearchShardsIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/shards/ClusterSearchShardsIT.java
@@ -25,15 +25,13 @@ import org.elasticsearch.common.Priority;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import java.util.Arrays;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
 import static org.hamcrest.Matchers.equalTo;
 
@@ -41,7 +39,7 @@ import static org.hamcrest.Matchers.equalTo;
  */
 @ClusterScope(scope= Scope.SUITE, numDataNodes = 2)
 public class ClusterSearchShardsIT extends ESIntegTestCase {
-
+    
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         switch(nodeOrdinal) {
@@ -53,6 +51,7 @@ public class ClusterSearchShardsIT extends ESIntegTestCase {
         return super.nodeSettings(nodeOrdinal);
     }
 
+    @Test
     public void testSingleShardAllocation() throws Exception {
         client().admin().indices().prepareCreate("test").setSettings(settingsBuilder()
                 .put("index.number_of_shards", "1").put("index.number_of_replicas", 0).put("index.routing.allocation.include.tag", "A")).execute().actionGet();
@@ -75,6 +74,7 @@ public class ClusterSearchShardsIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testMultipleShardsSingleNodeAllocation() throws Exception {
         client().admin().indices().prepareCreate("test").setSettings(settingsBuilder()
                 .put("index.number_of_shards", "4").put("index.number_of_replicas", 0).put("index.routing.allocation.include.tag", "A")).execute().actionGet();
@@ -94,6 +94,7 @@ public class ClusterSearchShardsIT extends ESIntegTestCase {
         assertThat(response.getGroups()[0].getShardId(), equalTo(2));
     }
 
+    @Test
     public void testMultipleIndicesAllocation() throws Exception {
         client().admin().indices().prepareCreate("test1").setSettings(settingsBuilder()
                 .put("index.number_of_shards", "4").put("index.number_of_replicas", 1)).execute().actionGet();
@@ -127,6 +128,7 @@ public class ClusterSearchShardsIT extends ESIntegTestCase {
         assertThat(response.getNodes().length, equalTo(2));
     }
 
+    @Test
     public void testClusterSearchShardsWithBlocks() {
         createIndex("test-blocks");
 
diff --git a/core/src/test/java/org/elasticsearch/cluster/structure/RoutingIteratorTests.java b/core/src/test/java/org/elasticsearch/cluster/structure/RoutingIteratorTests.java
index 9947d18..236378e 100644
--- a/core/src/test/java/org/elasticsearch/cluster/structure/RoutingIteratorTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/structure/RoutingIteratorTests.java
@@ -40,6 +40,7 @@ import org.elasticsearch.cluster.routing.allocation.decider.ClusterRebalanceAllo
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -57,6 +58,8 @@ import static org.hamcrest.Matchers.nullValue;
 import static org.hamcrest.Matchers.sameInstance;
 
 public class RoutingIteratorTests extends ESAllocationTestCase {
+
+    @Test
     public void testEmptyIterator() {
         ShardShuffler shuffler = new RotationShardShuffler(0);
         ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()));
@@ -88,6 +91,7 @@ public class RoutingIteratorTests extends ESAllocationTestCase {
         assertThat(shardIterator.remaining(), equalTo(0));
     }
 
+    @Test
     public void testIterator1() {
         MetaData metaData = MetaData.builder()
                 .put(IndexMetaData.builder("test1").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2))
@@ -115,6 +119,7 @@ public class RoutingIteratorTests extends ESAllocationTestCase {
         assertThat(shardIterator.remaining(), equalTo(0));
     }
 
+    @Test
     public void testIterator2() {
         MetaData metaData = MetaData.builder()
                 .put(IndexMetaData.builder("test1").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))
@@ -195,6 +200,7 @@ public class RoutingIteratorTests extends ESAllocationTestCase {
         assertThat(shardRouting10, sameInstance(shardRouting6));
     }
 
+    @Test
     public void testRandomRouting() {
         MetaData metaData = MetaData.builder()
                 .put(IndexMetaData.builder("test1").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))
@@ -222,6 +228,7 @@ public class RoutingIteratorTests extends ESAllocationTestCase {
         assertThat(shardRouting1, sameInstance(shardRouting3));
     }
 
+    @Test
     public void testAttributePreferenceRouting() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
@@ -277,6 +284,7 @@ public class RoutingIteratorTests extends ESAllocationTestCase {
         assertThat(shardRouting.currentNodeId(), equalTo("node2"));
     }
 
+    @Test
     public void testNodeSelectorRouting(){
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
@@ -334,6 +342,7 @@ public class RoutingIteratorTests extends ESAllocationTestCase {
     }
 
 
+    @Test
     public void testShardsAndPreferNodeRouting() {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
@@ -395,6 +404,7 @@ public class RoutingIteratorTests extends ESAllocationTestCase {
         assertThat(shardIterators.iterator().next().nextOrNull().currentNodeId(), equalTo("node1"));
     }
 
+    @Test
     public void testReplicaShardPreferenceIters() throws Exception {
         AllocationService strategy = createAllocationService(settingsBuilder()
                 .put("cluster.routing.allocation.concurrent_recoveries", 10)
diff --git a/core/src/test/java/org/elasticsearch/common/Base64Tests.java b/core/src/test/java/org/elasticsearch/common/Base64Tests.java
index 74691c0..a2bf2da 100644
--- a/core/src/test/java/org/elasticsearch/common/Base64Tests.java
+++ b/core/src/test/java/org/elasticsearch/common/Base64Tests.java
@@ -18,10 +18,11 @@
  */
 package org.elasticsearch.common;
 
+import java.nio.charset.StandardCharsets;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.nio.charset.StandardCharsets;
 import java.util.Locale;
 
 import static org.hamcrest.Matchers.is;
@@ -30,7 +31,8 @@ import static org.hamcrest.Matchers.is;
  *
  */
 public class Base64Tests extends ESTestCase {
-    // issue #6334
+
+    @Test // issue #6334
     public void testBase64DecodeWithExtraCharactersAfterPadding() throws Exception {
         String plain = randomAsciiOfLengthBetween(1, 20) + ":" + randomAsciiOfLengthBetween(1, 20);
         String encoded = Base64.encodeBytes(plain.getBytes(StandardCharsets.UTF_8));
diff --git a/core/src/test/java/org/elasticsearch/common/BooleansTests.java b/core/src/test/java/org/elasticsearch/common/BooleansTests.java
index 6e5446c..0baf433 100644
--- a/core/src/test/java/org/elasticsearch/common/BooleansTests.java
+++ b/core/src/test/java/org/elasticsearch/common/BooleansTests.java
@@ -21,6 +21,7 @@ package org.elasticsearch.common;
 
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.Locale;
 
@@ -28,6 +29,8 @@ import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.nullValue;
 
 public class BooleansTests extends ESTestCase {
+
+    @Test
     public void testIsBoolean() {
         String[] booleans = new String[]{"true", "false", "on", "off", "yes", "no", "0", "1"};
         String[] notBooleans = new String[]{"11", "00", "sdfsdfsf", "F", "T"};
@@ -43,8 +46,8 @@ public class BooleansTests extends ESTestCase {
             assertThat("recognized [" + nb + "] as boolean", Booleans.isBoolean(t.toCharArray(), "prefix".length(), nb.length()), Matchers.equalTo(false));
         }
     }
-
-    public void testParseBoolean() {
+    @Test
+    public void parseBoolean() {
         assertThat(Booleans.parseBoolean(randomFrom("true", "on", "yes", "1"), randomBoolean()), is(true));
         assertThat(Booleans.parseBoolean(randomFrom("false", "off", "no", "0"), randomBoolean()), is(false));
         assertThat(Booleans.parseBoolean(randomFrom("true", "on", "yes").toUpperCase(Locale.ROOT), randomBoolean()), is(true));
@@ -66,7 +69,8 @@ public class BooleansTests extends ESTestCase {
         assertThat(Booleans.parseBoolean(chars,0, chars.length, randomBoolean()), is(true));
     }
 
-    public void testParseBooleanExact() {
+    @Test
+    public void parseBooleanExact() {
         assertThat(Booleans.parseBooleanExact(randomFrom("true", "on", "yes", "1")), is(true));
         assertThat(Booleans.parseBooleanExact(randomFrom("false", "off", "no", "0")), is(false));
         try {
diff --git a/core/src/test/java/org/elasticsearch/common/ChannelsTests.java b/core/src/test/java/org/elasticsearch/common/ChannelsTests.java
index 5bb9c61..46e65ad 100644
--- a/core/src/test/java/org/elasticsearch/common/ChannelsTests.java
+++ b/core/src/test/java/org/elasticsearch/common/ChannelsTests.java
@@ -29,6 +29,7 @@ import org.jboss.netty.buffer.ByteBufferBackedChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.EOFException;
 import java.io.IOException;
@@ -41,8 +42,6 @@ import java.nio.channels.WritableByteChannel;
 import java.nio.file.Path;
 import java.nio.file.StandardOpenOption;
 
-import static org.hamcrest.Matchers.containsString;
-
 public class ChannelsTests extends ESTestCase {
 
     byte[] randomBytes;
@@ -65,6 +64,7 @@ public class ChannelsTests extends ESTestCase {
         super.tearDown();
     }
 
+    @Test
     public void testReadWriteThoughArrays() throws Exception {
         Channels.writeToChannel(randomBytes, fileChannel);
         byte[] readBytes = Channels.readFromFileChannel(fileChannel, 0, randomBytes.length);
@@ -72,6 +72,7 @@ public class ChannelsTests extends ESTestCase {
     }
 
 
+    @Test
     public void testPartialReadWriteThroughArrays() throws Exception {
         int length = randomIntBetween(1, randomBytes.length / 2);
         int offset = randomIntBetween(0, randomBytes.length - length);
@@ -88,17 +89,14 @@ public class ChannelsTests extends ESTestCase {
         assertThat("read bytes didn't match written bytes", source.toBytes(), Matchers.equalTo(read.toBytes()));
     }
 
+    @Test(expected = EOFException.class)
     public void testBufferReadPastEOFWithException() throws Exception {
         int bytesToWrite = randomIntBetween(0, randomBytes.length - 1);
         Channels.writeToChannel(randomBytes, 0, bytesToWrite, fileChannel);
-        try {
-            Channels.readFromFileChannel(fileChannel, 0, bytesToWrite + 1 + randomInt(1000));
-            fail("Expected an EOFException");
-        } catch (EOFException e) {
-            assertThat(e.getMessage(), containsString("read past EOF"));
-        }
+        Channels.readFromFileChannel(fileChannel, 0, bytesToWrite + 1 + randomInt(1000));
     }
 
+    @Test
     public void testBufferReadPastEOFWithoutException() throws Exception {
         int bytesToWrite = randomIntBetween(0, randomBytes.length - 1);
         Channels.writeToChannel(randomBytes, 0, bytesToWrite, fileChannel);
@@ -107,6 +105,7 @@ public class ChannelsTests extends ESTestCase {
         assertThat(read, Matchers.lessThan(0));
     }
 
+    @Test
     public void testReadWriteThroughBuffers() throws IOException {
         ByteBuffer source;
         if (randomBoolean()) {
@@ -131,6 +130,7 @@ public class ChannelsTests extends ESTestCase {
         assertThat("read bytes didn't match written bytes", randomBytes, Matchers.equalTo(copyBytes));
     }
 
+    @Test
     public void testPartialReadWriteThroughBuffers() throws IOException {
         int length = randomIntBetween(1, randomBytes.length / 2);
         int offset = randomIntBetween(0, randomBytes.length - length);
@@ -163,6 +163,7 @@ public class ChannelsTests extends ESTestCase {
     }
 
 
+    @Test
     public void testWriteFromChannel() throws IOException {
         int length = randomIntBetween(1, randomBytes.length / 2);
         int offset = randomIntBetween(0, randomBytes.length - length);
diff --git a/core/src/test/java/org/elasticsearch/common/ParseFieldTests.java b/core/src/test/java/org/elasticsearch/common/ParseFieldTests.java
index f4b8747..b3397a5 100644
--- a/core/src/test/java/org/elasticsearch/common/ParseFieldTests.java
+++ b/core/src/test/java/org/elasticsearch/common/ParseFieldTests.java
@@ -19,14 +19,15 @@
 package org.elasticsearch.common;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.EnumSet;
 
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.CoreMatchers.not;
-import static org.hamcrest.CoreMatchers.sameInstance;
+import static org.hamcrest.CoreMatchers.*;
 
 public class ParseFieldTests extends ESTestCase {
+
+    @Test
     public void testParse() {
         String[] values = new String[]{"foo_bar", "fooBar"};
         ParseField field = new ParseField(randomFrom(values));
@@ -67,6 +68,7 @@ public class ParseFieldTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testAllDeprecated() {
         String[] values = new String[]{"like_text", "likeText"};
 
diff --git a/core/src/test/java/org/elasticsearch/common/PidFileTests.java b/core/src/test/java/org/elasticsearch/common/PidFileTests.java
index 1ea4f30..a98ac1d 100644
--- a/core/src/test/java/org/elasticsearch/common/PidFileTests.java
+++ b/core/src/test/java/org/elasticsearch/common/PidFileTests.java
@@ -19,21 +19,22 @@
 
 package org.elasticsearch.common;
 
+import java.nio.charset.StandardCharsets;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.BufferedWriter;
 import java.io.IOException;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.StandardOpenOption;
 
-import static org.hamcrest.Matchers.containsString;
-
 /**
  * UnitTest for {@link org.elasticsearch.common.PidFile}
  */
 public class PidFileTests extends ESTestCase {
+
+    @Test(expected = IllegalArgumentException.class)
     public void testParentIsFile() throws IOException {
         Path dir = createTempDir();
         Path parent = dir.resolve("foo");
@@ -41,14 +42,10 @@ public class PidFileTests extends ESTestCase {
             stream.write("foo");
         }
 
-        try {
-            PidFile.create(parent.resolve("bar.pid"), false);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("exists but is not a directory"));
-        }
+        PidFile.create(parent.resolve("bar.pid"), false);
     }
 
+    @Test
     public void testPidFile() throws IOException {
         Path dir = createTempDir();
         Path parent = dir.resolve("foo");
diff --git a/core/src/test/java/org/elasticsearch/common/TableTests.java b/core/src/test/java/org/elasticsearch/common/TableTests.java
index 46da201..1afdf59 100644
--- a/core/src/test/java/org/elasticsearch/common/TableTests.java
+++ b/core/src/test/java/org/elasticsearch/common/TableTests.java
@@ -20,80 +20,52 @@
 package org.elasticsearch.common;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.List;
 import java.util.Map;
 
-import static org.hamcrest.Matchers.is;
-
 public class TableTests extends ESTestCase {
+
+    @Test(expected = IllegalStateException.class)
     public void testFailOnStartRowWithoutHeader() {
         Table table = new Table();
-        try {
-            table.startRow();
-            fail("Expected IllegalStateException");
-        } catch (IllegalStateException e) {
-            assertThat(e.getMessage(), is("no headers added..."));
-        }
+        table.startRow();
     }
 
+    @Test(expected = IllegalStateException.class)
     public void testFailOnEndHeadersWithoutStart() {
         Table table = new Table();
-        try {
-            table.endHeaders();
-            fail("Expected IllegalStateException");
-        } catch (IllegalStateException e) {
-            assertThat(e.getMessage(), is("no headers added..."));
-        }
-
+        table.endHeaders();
     }
 
+    @Test(expected = IllegalStateException.class)
     public void testFailOnAddCellWithoutHeader() {
         Table table = new Table();
-        try {
-            table.addCell("error");
-            fail("Expected IllegalStateException");
-        } catch (IllegalStateException e) {
-            assertThat(e.getMessage(), is("no block started..."));
-        }
-
+        table.addCell("error");
     }
 
+    @Test(expected = IllegalStateException.class)
     public void testFailOnAddCellWithoutRow() {
         Table table = this.getTableWithHeaders();
-        try {
-            table.addCell("error");
-            fail("Expected IllegalStateException");
-        } catch (IllegalStateException e) {
-            assertThat(e.getMessage(), is("no block started..."));
-        }
-
+        table.addCell("error");
     }
 
+    @Test(expected = IllegalStateException.class)
     public void testFailOnEndRowWithoutStart() {
         Table table = this.getTableWithHeaders();
-        try {
-            table.endRow();
-            fail("Expected IllegalStateException");
-        } catch (IllegalStateException e) {
-            assertThat(e.getMessage(), is("no row started..."));
-        }
-
+        table.endRow();
     }
 
+    @Test(expected = IllegalStateException.class)
     public void testFailOnLessCellsThanDeclared() {
         Table table = this.getTableWithHeaders();
         table.startRow();
         table.addCell("foo");
-        try {
-            table.endRow(true);
-            fail("Expected IllegalStateException");
-        } catch (IllegalStateException e) {
-            assertThat(e.getMessage(), is("mismatch on number of cells 1 in a row compared to header 2"));
-        }
-
+        table.endRow(true);
     }
 
+    @Test
     public void testOnLessCellsThanDeclaredUnchecked() {
         Table table = this.getTableWithHeaders();
         table.startRow();
@@ -101,20 +73,16 @@ public class TableTests extends ESTestCase {
         table.endRow(false);
     }
 
+    @Test(expected = IllegalStateException.class)
     public void testFailOnMoreCellsThanDeclared() {
         Table table = this.getTableWithHeaders();
         table.startRow();
         table.addCell("foo");
         table.addCell("bar");
-        try {
-            table.addCell("foobar");
-            fail("Expected IllegalStateException");
-        } catch (IllegalStateException e) {
-            assertThat(e.getMessage(), is("can't add more cells to a row than the header"));
-        }
-
+        table.addCell("foobar");
     }
 
+    @Test
     public void testSimple() {
         Table table = this.getTableWithHeaders();
         table.startRow();
diff --git a/core/src/test/java/org/elasticsearch/common/UUIDTests.java b/core/src/test/java/org/elasticsearch/common/UUIDTests.java
index f82e1a4..af5f382 100644
--- a/core/src/test/java/org/elasticsearch/common/UUIDTests.java
+++ b/core/src/test/java/org/elasticsearch/common/UUIDTests.java
@@ -19,32 +19,36 @@
 package org.elasticsearch.common;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.HashSet;
-import java.util.Set;
 
 public class UUIDTests extends ESTestCase {
 
     static UUIDGenerator timeUUIDGen = new TimeBasedUUIDGenerator();
     static UUIDGenerator randomUUIDGen = new RandomBasedUUIDGenerator();
 
+    @Test
     public void testRandomUUID() {
         verifyUUIDSet(100000, randomUUIDGen);
     }
 
+    @Test
     public void testTimeUUID() {
         verifyUUIDSet(100000, timeUUIDGen);
     }
 
+    @Test
     public void testThreadedTimeUUID() {
         testUUIDThreaded(timeUUIDGen);
     }
 
+    @Test
     public void testThreadedRandomUUID() {
         testUUIDThreaded(randomUUIDGen);
     }
 
-    Set<String> verifyUUIDSet(int count, UUIDGenerator uuidSource) {
+    HashSet verifyUUIDSet(int count, UUIDGenerator uuidSource) {
         HashSet<String> uuidSet = new HashSet<>();
         for (int i = 0; i < count; ++i) {
             uuidSet.add(uuidSource.getBase64UUID());
@@ -55,7 +59,7 @@ public class UUIDTests extends ESTestCase {
 
     class UUIDGenRunner implements Runnable {
         int count;
-        public Set<String> uuidSet = null;
+        public HashSet<String> uuidSet = null;
         UUIDGenerator uuidSource;
 
         public UUIDGenRunner(int count, UUIDGenerator uuidSource) {
diff --git a/core/src/test/java/org/elasticsearch/common/blobstore/BlobStoreTests.java b/core/src/test/java/org/elasticsearch/common/blobstore/BlobStoreTests.java
index 80afa5d..fdf07cb 100644
--- a/core/src/test/java/org/elasticsearch/common/blobstore/BlobStoreTests.java
+++ b/core/src/test/java/org/elasticsearch/common/blobstore/BlobStoreTests.java
@@ -27,6 +27,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.common.unit.ByteSizeValue;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -40,6 +41,8 @@ import static org.hamcrest.CoreMatchers.notNullValue;
 
 @LuceneTestCase.SuppressFileSystems("ExtrasFS")
 public class BlobStoreTests extends ESTestCase {
+
+    @Test
     public void testWriteRead() throws IOException {
         final BlobStore store = newBlobStore();
         final BlobContainer container = store.blobContainer(new BlobPath());
@@ -59,6 +62,7 @@ public class BlobStoreTests extends ESTestCase {
         store.close();
     }
 
+    @Test
     public void testMoveAndList() throws IOException {
         final BlobStore store = newBlobStore();
         final BlobContainer container = store.blobContainer(new BlobPath());
diff --git a/core/src/test/java/org/elasticsearch/common/breaker/MemoryCircuitBreakerTests.java b/core/src/test/java/org/elasticsearch/common/breaker/MemoryCircuitBreakerTests.java
index fa4ce35..2a9f87a 100644
--- a/core/src/test/java/org/elasticsearch/common/breaker/MemoryCircuitBreakerTests.java
+++ b/core/src/test/java/org/elasticsearch/common/breaker/MemoryCircuitBreakerTests.java
@@ -26,6 +26,7 @@ import org.elasticsearch.indices.breaker.CircuitBreakerService;
 import org.elasticsearch.indices.breaker.HierarchyCircuitBreakerService;
 import org.elasticsearch.node.settings.NodeSettingsService;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -38,6 +39,8 @@ import static org.hamcrest.Matchers.greaterThanOrEqualTo;
  * Tests for the Memory Aggregating Circuit Breaker
  */
 public class MemoryCircuitBreakerTests extends ESTestCase {
+
+    @Test
     public void testThreadedUpdatesToBreaker() throws Exception {
         final int NUM_THREADS = scaledRandomIntBetween(3, 15);
         final int BYTES_PER_THREAD = scaledRandomIntBetween(500, 4500);
@@ -79,6 +82,7 @@ public class MemoryCircuitBreakerTests extends ESTestCase {
         assertThat("breaker was tripped at least once", breaker.getTrippedCount(), greaterThanOrEqualTo(1L));
     }
 
+    @Test
     public void testThreadedUpdatesToChildBreaker() throws Exception {
         final int NUM_THREADS = scaledRandomIntBetween(3, 15);
         final int BYTES_PER_THREAD = scaledRandomIntBetween(500, 4500);
@@ -136,6 +140,7 @@ public class MemoryCircuitBreakerTests extends ESTestCase {
         assertThat("breaker was tripped at least once", breaker.getTrippedCount(), greaterThanOrEqualTo(1L));
     }
 
+    @Test
     public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception {
         final int NUM_THREADS = scaledRandomIntBetween(3, 15);
         final int BYTES_PER_THREAD = scaledRandomIntBetween(500, 4500);
@@ -207,6 +212,7 @@ public class MemoryCircuitBreakerTests extends ESTestCase {
         assertThat("total breaker was tripped at least once", tripped.get(), greaterThanOrEqualTo(1));
     }
 
+    @Test
     public void testConstantFactor() throws Exception {
         final MemoryCircuitBreaker breaker = new MemoryCircuitBreaker(new ByteSizeValue(15), 1.6, logger);
         String field = "myfield";
diff --git a/core/src/test/java/org/elasticsearch/common/bytes/PagedBytesReferenceTests.java b/core/src/test/java/org/elasticsearch/common/bytes/PagedBytesReferenceTests.java
index 95a65f8..802ea7c 100644
--- a/core/src/test/java/org/elasticsearch/common/bytes/PagedBytesReferenceTests.java
+++ b/core/src/test/java/org/elasticsearch/common/bytes/PagedBytesReferenceTests.java
@@ -32,6 +32,7 @@ import org.hamcrest.Matchers;
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.EOFException;
 import java.io.IOException;
@@ -60,6 +61,7 @@ public class PagedBytesReferenceTests extends ESTestCase {
         super.tearDown();
     }
 
+    @Test
     public void testGet() {
         int length = randomIntBetween(1, PAGE_SIZE * 3);
         BytesReference pbr = getRandomizedPagedBytesReference(length);
diff --git a/core/src/test/java/org/elasticsearch/common/cli/CheckFileCommandTests.java b/core/src/test/java/org/elasticsearch/common/cli/CheckFileCommandTests.java
index 95d0789..d148004 100644
--- a/core/src/test/java/org/elasticsearch/common/cli/CheckFileCommandTests.java
+++ b/core/src/test/java/org/elasticsearch/common/cli/CheckFileCommandTests.java
@@ -19,16 +19,16 @@
 
 package org.elasticsearch.common.cli;
 
+import java.nio.charset.StandardCharsets;
 import com.google.common.jimfs.Configuration;
 import com.google.common.jimfs.Jimfs;
-
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.util.set.Sets;
 import org.elasticsearch.env.Environment;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.FileSystem;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -59,66 +59,79 @@ public class CheckFileCommandTests extends ESTestCase {
         CHANGE, KEEP, DISABLED
     }
 
+    @Test
     public void testThatCommandLogsErrorMessageOnFail() throws Exception {
         executeCommand(jimFsConfiguration, new PermissionCheckFileCommand(createTempDir(), captureOutputTerminal, Mode.CHANGE));
         assertThat(captureOutputTerminal.getTerminalOutput(), hasItem(containsString("Please ensure that the user account running Elasticsearch has read access to this file")));
     }
 
+    @Test
     public void testThatCommandLogsNothingWhenPermissionRemains() throws Exception {
         executeCommand(jimFsConfiguration, new PermissionCheckFileCommand(createTempDir(), captureOutputTerminal, Mode.KEEP));
         assertThat(captureOutputTerminal.getTerminalOutput(), hasSize(0));
     }
 
+    @Test
     public void testThatCommandLogsNothingWhenDisabled() throws Exception {
         executeCommand(jimFsConfiguration, new PermissionCheckFileCommand(createTempDir(), captureOutputTerminal, Mode.DISABLED));
         assertThat(captureOutputTerminal.getTerminalOutput(), hasSize(0));
     }
 
+    @Test
     public void testThatCommandLogsNothingIfFilesystemDoesNotSupportPermissions() throws Exception {
         executeCommand(jimFsConfigurationWithoutPermissions, new PermissionCheckFileCommand(createTempDir(), captureOutputTerminal, Mode.DISABLED));
         assertThat(captureOutputTerminal.getTerminalOutput(), hasSize(0));
     }
 
+    @Test
     public void testThatCommandLogsOwnerChange() throws Exception {
         executeCommand(jimFsConfiguration, new OwnerCheckFileCommand(createTempDir(), captureOutputTerminal, Mode.CHANGE));
         assertThat(captureOutputTerminal.getTerminalOutput(), hasItem(allOf(containsString("Owner of file ["), containsString("] used to be ["), containsString("], but now is ["))));
     }
 
+    @Test
     public void testThatCommandLogsNothingIfOwnerRemainsSame() throws Exception {
         executeCommand(jimFsConfiguration, new OwnerCheckFileCommand(createTempDir(), captureOutputTerminal, Mode.KEEP));
         assertThat(captureOutputTerminal.getTerminalOutput(), hasSize(0));
     }
 
+    @Test
     public void testThatCommandLogsNothingIfOwnerIsDisabled() throws Exception {
         executeCommand(jimFsConfiguration, new OwnerCheckFileCommand(createTempDir(), captureOutputTerminal, Mode.DISABLED));
         assertThat(captureOutputTerminal.getTerminalOutput(), hasSize(0));
     }
 
+    @Test
     public void testThatCommandLogsNothingIfFileSystemDoesNotSupportOwners() throws Exception {
         executeCommand(jimFsConfigurationWithoutPermissions, new OwnerCheckFileCommand(createTempDir(), captureOutputTerminal, Mode.DISABLED));
         assertThat(captureOutputTerminal.getTerminalOutput(), hasSize(0));
     }
 
+    @Test
     public void testThatCommandLogsIfGroupChanges() throws Exception {
         executeCommand(jimFsConfiguration, new GroupCheckFileCommand(createTempDir(), captureOutputTerminal, Mode.CHANGE));
         assertThat(captureOutputTerminal.getTerminalOutput(), hasItem(allOf(containsString("Group of file ["), containsString("] used to be ["), containsString("], but now is ["))));
     }
 
+    @Test
     public void testThatCommandLogsNothingIfGroupRemainsSame() throws Exception {
         executeCommand(jimFsConfiguration, new GroupCheckFileCommand(createTempDir(), captureOutputTerminal, Mode.KEEP));
         assertThat(captureOutputTerminal.getTerminalOutput(), hasSize(0));
     }
 
+    @Test
     public void testThatCommandLogsNothingIfGroupIsDisabled() throws Exception {
         executeCommand(jimFsConfiguration, new GroupCheckFileCommand(createTempDir(), captureOutputTerminal, Mode.DISABLED));
         assertThat(captureOutputTerminal.getTerminalOutput(), hasSize(0));
     }
 
+    @Test
     public void testThatCommandLogsNothingIfFileSystemDoesNotSupportGroups() throws Exception {
         executeCommand(jimFsConfigurationWithoutPermissions, new GroupCheckFileCommand(createTempDir(), captureOutputTerminal, Mode.DISABLED));
         assertThat(captureOutputTerminal.getTerminalOutput(), hasSize(0));
     }
 
+    @Test
     public void testThatCommandDoesNotLogAnythingOnFileCreation() throws Exception {
         Configuration configuration = randomBoolean() ? jimFsConfiguration : jimFsConfigurationWithoutPermissions;
 
@@ -134,6 +147,7 @@ public class CheckFileCommandTests extends ESTestCase {
         assertThat(captureOutputTerminal.getTerminalOutput(), hasSize(0));
     }
 
+    @Test
     public void testThatCommandWorksIfFileIsDeletedByCommand() throws Exception {
         Configuration configuration = randomBoolean() ? jimFsConfiguration : jimFsConfigurationWithoutPermissions;
 
diff --git a/core/src/test/java/org/elasticsearch/common/cli/CliToolTests.java b/core/src/test/java/org/elasticsearch/common/cli/CliToolTests.java
index 20fbaa0..f275d1d 100644
--- a/core/src/test/java/org/elasticsearch/common/cli/CliToolTests.java
+++ b/core/src/test/java/org/elasticsearch/common/cli/CliToolTests.java
@@ -25,6 +25,7 @@ import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.env.Environment;
 import org.elasticsearch.node.internal.InternalSettingsPreparer;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.HashMap;
@@ -46,6 +47,8 @@ import static org.hamcrest.Matchers.is;
  *
  */
 public class CliToolTests extends CliToolTestCase {
+
+    @Test
     public void testOK() throws Exception {
         Terminal terminal = new MockTerminal();
         final AtomicReference<Boolean> executed = new AtomicReference<>(false);
@@ -62,6 +65,7 @@ public class CliToolTests extends CliToolTestCase {
         assertCommandHasBeenExecuted(executed);
     }
 
+    @Test
     public void testUsageError() throws Exception {
         Terminal terminal = new MockTerminal();
         final AtomicReference<Boolean> executed = new AtomicReference<>(false);
@@ -78,6 +82,7 @@ public class CliToolTests extends CliToolTestCase {
         assertCommandHasBeenExecuted(executed);
     }
 
+    @Test
     public void testIOError() throws Exception {
         Terminal terminal = new MockTerminal();
         final AtomicReference<Boolean> executed = new AtomicReference<>(false);
@@ -94,6 +99,7 @@ public class CliToolTests extends CliToolTestCase {
         assertCommandHasBeenExecuted(executed);
     }
 
+    @Test
     public void testCodeError() throws Exception {
         Terminal terminal = new MockTerminal();
         final AtomicReference<Boolean> executed = new AtomicReference<>(false);
@@ -110,6 +116,7 @@ public class CliToolTests extends CliToolTestCase {
         assertCommandHasBeenExecuted(executed);
     }
 
+    @Test
     public void testMultiCommand() {
         Terminal terminal = new MockTerminal();
         int count = randomIntBetween(2, 7);
@@ -137,7 +144,8 @@ public class CliToolTests extends CliToolTestCase {
         }
     }
 
-    public void testMultiCommandUnknownCommand() {
+    @Test
+    public void testMultiCommand_UnknownCommand() {
         Terminal terminal = new MockTerminal();
         int count = randomIntBetween(2, 7);
         final AtomicReference<Boolean>[] executed = new AtomicReference[count];
@@ -163,7 +171,8 @@ public class CliToolTests extends CliToolTestCase {
         }
     }
 
-    public void testSingleCommandToolHelp() throws Exception {
+    @Test
+    public void testSingleCommand_ToolHelp() throws Exception {
         CaptureOutputTerminal terminal = new CaptureOutputTerminal();
         final AtomicReference<Boolean> executed = new AtomicReference<>(false);
         final NamedCommand cmd = new NamedCommand("cmd1", terminal) {
@@ -180,7 +189,8 @@ public class CliToolTests extends CliToolTestCase {
         assertThat(terminal.getTerminalOutput(), hasItem(containsString("cmd1 help")));
     }
 
-    public void testMultiCommandToolHelp() {
+    @Test
+    public void testMultiCommand_ToolHelp() {
         CaptureOutputTerminal terminal = new CaptureOutputTerminal();
         NamedCommand[] cmds = new NamedCommand[2];
         cmds[0] = new NamedCommand("cmd0", terminal) {
@@ -202,7 +212,8 @@ public class CliToolTests extends CliToolTestCase {
         assertThat(terminal.getTerminalOutput(), hasItem(containsString("tool help")));
     }
 
-    public void testMultiCommandCmdHelp() {
+    @Test
+    public void testMultiCommand_CmdHelp() {
         CaptureOutputTerminal terminal = new CaptureOutputTerminal();
         NamedCommand[] cmds = new NamedCommand[2];
         cmds[0] = new NamedCommand("cmd0", terminal) {
@@ -224,6 +235,7 @@ public class CliToolTests extends CliToolTestCase {
         assertThat(terminal.getTerminalOutput(), hasItem(containsString("cmd1 help")));
     }
 
+    @Test
     public void testThatThrowExceptionCanBeLogged() throws Exception {
         CaptureOutputTerminal terminal = new CaptureOutputTerminal();
         NamedCommand cmd = new NamedCommand("cmd", terminal) {
@@ -251,6 +263,7 @@ public class CliToolTests extends CliToolTestCase {
         }
     }
 
+    @Test
     public void testMultipleLaunch() throws Exception {
         Terminal terminal = new MockTerminal();
         final AtomicReference<Boolean> executed = new AtomicReference<>(false);
@@ -267,6 +280,7 @@ public class CliToolTests extends CliToolTestCase {
         tool.parse("cmd", Strings.splitStringByCommaToArray("--help"));
     }
 
+    @Test
     public void testPromptForSetting() throws Exception {
         final AtomicInteger counter = new AtomicInteger();
         final AtomicReference<String> promptedSecretValue = new AtomicReference<>(null);
@@ -309,6 +323,7 @@ public class CliToolTests extends CliToolTestCase {
         assertThat(promptedTextValue.get(), is("replaced"));
     }
 
+    @Test
     public void testStopAtNonOptionParsing() throws Exception {
         final CliToolConfig.Cmd lenientCommand = cmd("lenient", CliTool.Command.Exit.class).stopAtNonOption(true).build();
         final CliToolConfig.Cmd strictCommand = cmd("strict", CliTool.Command.Exit.class).stopAtNonOption(false).build();
diff --git a/core/src/test/java/org/elasticsearch/common/cli/TerminalTests.java b/core/src/test/java/org/elasticsearch/common/cli/TerminalTests.java
index f49e1f3..da03477 100644
--- a/core/src/test/java/org/elasticsearch/common/cli/TerminalTests.java
+++ b/core/src/test/java/org/elasticsearch/common/cli/TerminalTests.java
@@ -19,14 +19,16 @@
 
 package org.elasticsearch.common.cli;
 
-import static org.hamcrest.Matchers.hasItem;
-import static org.hamcrest.Matchers.hasSize;
-import static org.hamcrest.Matchers.is;
+import org.junit.Test;
+
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class TerminalTests extends CliToolTestCase {
+
+    @Test
     public void testVerbosity() throws Exception {
         CaptureOutputTerminal terminal = new CaptureOutputTerminal(Terminal.Verbosity.SILENT);
         assertPrinted(terminal, Terminal.Verbosity.SILENT, "text");
diff --git a/core/src/test/java/org/elasticsearch/common/geo/GeoDistanceTests.java b/core/src/test/java/org/elasticsearch/common/geo/GeoDistanceTests.java
index 8f8e8b4..924926b 100644
--- a/core/src/test/java/org/elasticsearch/common/geo/GeoDistanceTests.java
+++ b/core/src/test/java/org/elasticsearch/common/geo/GeoDistanceTests.java
@@ -22,18 +22,20 @@ import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.unit.DistanceUnit;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.lessThan;
+import static org.hamcrest.Matchers.equalTo;
 
 /**
  * Basic Tests for {@link GeoDistance}
  */
 public class GeoDistanceTests extends ESTestCase {
+
+    @Test
     public void testGeoDistanceSerialization() throws IOException  {
         // make sure that ordinals don't change, because we rely on then in serialization
         assertThat(GeoDistance.PLANE.ordinal(), equalTo(0));
@@ -52,6 +54,7 @@ public class GeoDistanceTests extends ESTestCase {
         }
     }
 
+    @Test(expected = IOException.class)
     public void testInvalidReadFrom() throws Exception {
         try (BytesStreamOutput out = new BytesStreamOutput()) {
             if (randomBoolean()) {
@@ -61,12 +64,11 @@ public class GeoDistanceTests extends ESTestCase {
             }
             try (StreamInput in = StreamInput.wrap(out.bytes())) {
                 GeoDistance.readGeoDistanceFrom(in);
-            } catch (IOException e) {
-                assertThat(e.getMessage(), containsString("Unknown GeoDistance ordinal ["));
             }
         }
     }
 
+    @Test
     public void testDistanceCheck() {
         // Note, is within is an approximation, so, even though 0.52 is outside 50mi, we still get "true"
         GeoDistance.DistanceBoundingCheck check = GeoDistance.distanceBoundingCheck(0, 0, 50, DistanceUnit.MILES);
@@ -79,6 +81,7 @@ public class GeoDistanceTests extends ESTestCase {
         assertThat(check.isWithin(0, -178), equalTo(false));
     }
 
+    @Test
     public void testArcDistanceVsPlaneInEllipsis() {
         GeoPoint centre = new GeoPoint(48.8534100, 2.3488000);
         GeoPoint northernPoint = new GeoPoint(48.8801108681, 2.35152032666);
diff --git a/core/src/test/java/org/elasticsearch/common/geo/GeoHashTests.java b/core/src/test/java/org/elasticsearch/common/geo/GeoHashTests.java
index 934400d..063fd76 100644
--- a/core/src/test/java/org/elasticsearch/common/geo/GeoHashTests.java
+++ b/core/src/test/java/org/elasticsearch/common/geo/GeoHashTests.java
@@ -18,8 +18,9 @@
  */
 package org.elasticsearch.common.geo;
 
-import org.apache.lucene.util.XGeoHashUtils;
 import org.elasticsearch.test.ESTestCase;
+import org.apache.lucene.util.XGeoHashUtils;
+import org.junit.Test;
 
 
 
@@ -27,11 +28,12 @@ import org.elasticsearch.test.ESTestCase;
  * Tests for {@link org.apache.lucene.util.XGeoHashUtils}
  */
 public class GeoHashTests extends ESTestCase {
+    @Test
     public void testGeohashAsLongRoutines()  {
         final GeoPoint expected = new GeoPoint();
         final GeoPoint actual = new GeoPoint();
         //Ensure that for all points at all supported levels of precision
-        // that the long encoding of a geohash is compatible with its
+        // that the long encoding of a geohash is compatible with its 
         // String based counterpart
         for (double lat=-90;lat<90;lat++)
         {
diff --git a/core/src/test/java/org/elasticsearch/common/geo/ShapeBuilderTests.java b/core/src/test/java/org/elasticsearch/common/geo/ShapeBuilderTests.java
index b153d77..703ab2f 100644
--- a/core/src/test/java/org/elasticsearch/common/geo/ShapeBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/common/geo/ShapeBuilderTests.java
@@ -28,15 +28,12 @@ import com.spatial4j.core.shape.impl.PointImpl;
 import com.vividsolutions.jts.geom.Coordinate;
 import com.vividsolutions.jts.geom.LineString;
 import com.vividsolutions.jts.geom.Polygon;
-
 import org.elasticsearch.common.geo.builders.PolygonBuilder;
 import org.elasticsearch.common.geo.builders.ShapeBuilder;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.test.hamcrest.ElasticsearchGeoAssertions.assertMultiLineString;
-import static org.elasticsearch.test.hamcrest.ElasticsearchGeoAssertions.assertMultiPolygon;
-import static org.elasticsearch.test.hamcrest.ElasticsearchGeoAssertions.assertPolygon;
-import static org.hamcrest.Matchers.containsString;
+import static org.elasticsearch.test.hamcrest.ElasticsearchGeoAssertions.*;
 /**
  * Tests for {@link ShapeBuilder}
  */
@@ -108,7 +105,7 @@ public class ShapeBuilderTests extends ESTestCase {
             .point(-45.0, -15.0)
             .point(-110.0, -15.0)
             .point(-110.0, 55.0).build();
-
+        
         // Building a linestring that needs to be wrapped
         ShapeBuilder.newLineString()
         .point(100.0, 50.0)
@@ -120,7 +117,7 @@ public class ShapeBuilderTests extends ESTestCase {
         .point(130.0, -30.0)
         .point(130.0, 60.0)
         .build();
-
+        
         // Building a lineString on the dateline
         ShapeBuilder.newLineString()
         .point(-180.0, 80.0)
@@ -128,7 +125,7 @@ public class ShapeBuilderTests extends ESTestCase {
         .point(-180.0, -40.0)
         .point(-180.0, -80.0)
         .build();
-
+        
         // Building a lineString on the dateline
         ShapeBuilder.newLineString()
         .point(180.0, 80.0)
@@ -154,7 +151,7 @@ public class ShapeBuilderTests extends ESTestCase {
             .end()
             .build();
 
-
+        
         // LineString that needs to be wrappped
         ShapeBuilder.newMultiLinestring()
             .linestring()
@@ -172,18 +169,14 @@ public class ShapeBuilderTests extends ESTestCase {
             .build();
     }
 
+    @Test(expected = InvalidShapeException.class)
     public void testPolygonSelfIntersection() {
-        try {
-            ShapeBuilder.newPolygon()
-                    .point(-40.0, 50.0)
-                    .point(40.0, 50.0)
-                    .point(-40.0, -50.0)
-                    .point(40.0, -50.0)
-                    .close().build();
-            fail("Expected InvalidShapeException");
-        } catch (InvalidShapeException e) {
-            assertThat(e.getMessage(), containsString("Self-intersection at or near point (0.0"));
-        }
+        ShapeBuilder.newPolygon()
+                .point(-40.0, 50.0)
+                .point(40.0, 50.0)
+                .point(-40.0, -50.0)
+                .point(40.0, -50.0)
+                .close().build();
     }
 
     public void testGeoCircle() {
@@ -218,7 +211,7 @@ public class ShapeBuilderTests extends ESTestCase {
             .point(-250.0, -65.0)
             .point(-150.0, -65.0)
             .close().build();
-
+        
         assertMultiPolygon(shape);
     }
 
@@ -495,6 +488,7 @@ public class ShapeBuilderTests extends ESTestCase {
         assertMultiPolygon(shape);
     }
 
+    @Test(expected = InvalidShapeException.class)
     public void testShapeWithInvalidTangentialHole() {
         // test a shape with one invalid tangential (shared) vertex (should throw exception)
         PolygonBuilder builder = ShapeBuilder.newPolygon()
@@ -510,12 +504,8 @@ public class ShapeBuilderTests extends ESTestCase {
                 .point(175, 5)
                 .point(179, -10)
                 .point(164, 0);
-        try {
-            builder.close().build();
-            fail("Expected InvalidShapeException");
-        } catch (InvalidShapeException e) {
-            assertThat(e.getMessage(), containsString("interior cannot share more than one point with the exterior"));
-        }
+        Shape shape = builder.close().build();
+        assertMultiPolygon(shape);
     }
 
     public void testBoundaryShapeWithTangentialHole() {
@@ -542,6 +532,7 @@ public class ShapeBuilderTests extends ESTestCase {
         assertMultiPolygon(shape);
     }
 
+    @Test(expected = InvalidShapeException.class)
     public void testBoundaryShapeWithInvalidTangentialHole() {
         // test shape with two tangential (shared) vertices (should throw exception)
         PolygonBuilder builder = ShapeBuilder.newPolygon()
@@ -557,17 +548,14 @@ public class ShapeBuilderTests extends ESTestCase {
                 .point(180, -5)
                 .point(176, -10)
                 .point(-177, 10);
-        try {
-            builder.close().build();
-            fail("Expected InvalidShapeException");
-        } catch (InvalidShapeException e) {
-            assertThat(e.getMessage(), containsString("interior cannot share more than one point with the exterior"));
-        }
+        Shape shape = builder.close().build();
+        assertMultiPolygon(shape);
     }
 
     /**
      * Test an enveloping polygon around the max mercator bounds
      */
+    @Test
     public void testBoundaryShape() {
         PolygonBuilder builder = ShapeBuilder.newPolygon()
                 .point(-180, 90)
@@ -580,6 +568,7 @@ public class ShapeBuilderTests extends ESTestCase {
         assertPolygon(shape);
     }
 
+    @Test
     public void testShapeWithAlternateOrientation() {
         // cw: should produce a multi polygon spanning hemispheres
         PolygonBuilder builder = ShapeBuilder.newPolygon()
@@ -603,6 +592,7 @@ public class ShapeBuilderTests extends ESTestCase {
         assertMultiPolygon(shape);
      }
 
+    @Test(expected = InvalidShapeException.class)
     public void testInvalidShapeWithConsecutiveDuplicatePoints() {
         PolygonBuilder builder = ShapeBuilder.newPolygon()
                 .point(180, 0)
@@ -610,11 +600,7 @@ public class ShapeBuilderTests extends ESTestCase {
                 .point(176, 4)
                 .point(-176, 4)
                 .point(180, 0);
-        try {
-            builder.close().build();
-            fail("Expected InvalidShapeException");
-        } catch (InvalidShapeException e) {
-            assertThat(e.getMessage(), containsString("duplicate consecutive coordinates at: ("));
-        }
+        Shape shape = builder.close().build();
+        assertPolygon(shape);
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/common/geo/ShapeRelationTests.java b/core/src/test/java/org/elasticsearch/common/geo/ShapeRelationTests.java
index bba56e3..83b6671 100644
--- a/core/src/test/java/org/elasticsearch/common/geo/ShapeRelationTests.java
+++ b/core/src/test/java/org/elasticsearch/common/geo/ShapeRelationTests.java
@@ -22,10 +22,10 @@ package org.elasticsearch.common.geo;
 import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 
 public class ShapeRelationTests extends ESTestCase {
@@ -80,16 +80,13 @@ public class ShapeRelationTests extends ESTestCase {
         }
     }
 
+    @Test(expected = IOException.class)
     public void testInvalidReadFrom() throws Exception {
         try (BytesStreamOutput out = new BytesStreamOutput()) {
             out.writeVInt(randomIntBetween(3, Integer.MAX_VALUE));
             try (StreamInput in = StreamInput.wrap(out.bytes())) {
                 ShapeRelation.DISJOINT.readFrom(in);
-                fail("Expected IOException");
-            } catch(IOException e) {
-                assertThat(e.getMessage(), containsString("Unknown ShapeRelation ordinal ["));
             }
-
         }
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/common/geo/SpatialStrategyTests.java b/core/src/test/java/org/elasticsearch/common/geo/SpatialStrategyTests.java
index e3e99d0..c53a3fb 100644
--- a/core/src/test/java/org/elasticsearch/common/geo/SpatialStrategyTests.java
+++ b/core/src/test/java/org/elasticsearch/common/geo/SpatialStrategyTests.java
@@ -22,10 +22,10 @@ package org.elasticsearch.common.geo;
 import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 
 public class SpatialStrategyTests extends ESTestCase {
@@ -66,14 +66,12 @@ public class SpatialStrategyTests extends ESTestCase {
         }
     }
 
+    @Test(expected = IOException.class)
     public void testInvalidReadFrom() throws Exception {
         try (BytesStreamOutput out = new BytesStreamOutput()) {
             out.writeVInt(randomIntBetween(2, Integer.MAX_VALUE));
             try (StreamInput in = StreamInput.wrap(out.bytes())) {
                 SpatialStrategy.TERM.readFrom(in);
-                fail("Expected IOException");
-            } catch(IOException e) {
-                assertThat(e.getMessage(), containsString("Unknown SpatialStrategy ordinal ["));
             }
         }
     }
diff --git a/core/src/test/java/org/elasticsearch/common/hash/MessageDigestsTests.java b/core/src/test/java/org/elasticsearch/common/hash/MessageDigestsTests.java
index 4063c1b..dbc174b 100644
--- a/core/src/test/java/org/elasticsearch/common/hash/MessageDigestsTests.java
+++ b/core/src/test/java/org/elasticsearch/common/hash/MessageDigestsTests.java
@@ -20,17 +20,21 @@
 package org.elasticsearch.common.hash;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.math.BigInteger;
 import java.nio.charset.StandardCharsets;
 import java.security.MessageDigest;
 
+import static org.junit.Assert.*;
+
 public class MessageDigestsTests extends ESTestCase {
     private void assertHash(String expected, String test, MessageDigest messageDigest) {
         String actual = MessageDigests.toHexString(messageDigest.digest(test.getBytes(StandardCharsets.UTF_8)));
         assertEquals(expected, actual);
     }
 
+    @Test
     public void testMd5() throws Exception {
         assertHash("d41d8cd98f00b204e9800998ecf8427e", "", MessageDigests.md5());
         assertHash("900150983cd24fb0d6963f7d28e17f72", "abc", MessageDigests.md5());
@@ -40,6 +44,7 @@ public class MessageDigestsTests extends ESTestCase {
         assertHash("1055d3e698d289f2af8663725127bd4b", "The quick brown fox jumps over the lazy cog", MessageDigests.md5());
     }
 
+    @Test
     public void testSha1() throws Exception {
         assertHash("da39a3ee5e6b4b0d3255bfef95601890afd80709", "", MessageDigests.sha1());
         assertHash("a9993e364706816aba3e25717850c26c9cd0d89d", "abc", MessageDigests.sha1());
@@ -49,6 +54,7 @@ public class MessageDigestsTests extends ESTestCase {
         assertHash("de9f2c7fd25e1b3afad3e85a0bd17d9b100db4b3", "The quick brown fox jumps over the lazy cog", MessageDigests.sha1());
     }
 
+    @Test
     public void testSha256() throws Exception {
         assertHash("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "", MessageDigests.sha256());
         assertHash("ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad", "abc", MessageDigests.sha256());
@@ -58,6 +64,7 @@ public class MessageDigestsTests extends ESTestCase {
         assertHash("e4c4d8f3bf76b692de791a173e05321150f7a345b46484fe427f6acc7ecc81be", "The quick brown fox jumps over the lazy cog", MessageDigests.sha256());
     }
 
+    @Test
     public void testToHexString() throws Exception {
         for (int i = 0; i < 1024; i++) {
             BigInteger expected = BigInteger.probablePrime(256, random());
diff --git a/core/src/test/java/org/elasticsearch/common/hppc/HppcMapsTests.java b/core/src/test/java/org/elasticsearch/common/hppc/HppcMapsTests.java
index a4f3538..8998d1b 100644
--- a/core/src/test/java/org/elasticsearch/common/hppc/HppcMapsTests.java
+++ b/core/src/test/java/org/elasticsearch/common/hppc/HppcMapsTests.java
@@ -19,9 +19,9 @@
 package org.elasticsearch.common.hppc;
 
 import com.carrotsearch.hppc.ObjectHashSet;
-
 import org.elasticsearch.common.collect.HppcMaps;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -29,6 +29,8 @@ import java.util.List;
 import static org.hamcrest.Matchers.equalTo;
 
 public class HppcMapsTests extends ESTestCase {
+
+    @Test
     public void testIntersection() throws Exception {
         boolean enabled = false;
         assert enabled = true;
diff --git a/core/src/test/java/org/elasticsearch/common/io/FileSystemUtilsTests.java b/core/src/test/java/org/elasticsearch/common/io/FileSystemUtilsTests.java
index a364c15..08b49e8 100644
--- a/core/src/test/java/org/elasticsearch/common/io/FileSystemUtilsTests.java
+++ b/core/src/test/java/org/elasticsearch/common/io/FileSystemUtilsTests.java
@@ -19,14 +19,16 @@
 
 package org.elasticsearch.common.io;
 
-import org.apache.lucene.util.LuceneTestCase.SuppressFileSystems;
+import java.nio.charset.StandardCharsets;
+
 import org.elasticsearch.test.ESTestCase;
+import org.apache.lucene.util.LuceneTestCase.SuppressFileSystems;
 import org.junit.Assert;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.net.URISyntaxException;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.Arrays;
@@ -58,6 +60,7 @@ public class FileSystemUtilsTests extends ESTestCase {
         FileSystemUtils.copyDirectoryRecursively(path, src);
     }
 
+    @Test
     public void testMoveOverExistingFileAndAppend() throws IOException {
 
         FileSystemUtils.moveFilesWithoutOverwriting(src.resolve("v1"), dst, ".new");
@@ -84,6 +87,7 @@ public class FileSystemUtilsTests extends ESTestCase {
         assertFileContent(dst, "dir/subdir/file5.txt", "version1");
     }
 
+    @Test
     public void testMoveOverExistingFileAndIgnore() throws IOException {
         Path dest = createTempDir();
 
@@ -111,6 +115,7 @@ public class FileSystemUtilsTests extends ESTestCase {
         assertFileContent(dest, "dir/subdir/file5.txt", "version1");
     }
 
+    @Test
     public void testMoveFilesDoesNotCreateSameFileWithSuffix() throws Exception {
         Path[] dirs = new Path[] { createTempDir(), createTempDir(), createTempDir()};
         for (Path dir : dirs) {
@@ -157,6 +162,7 @@ public class FileSystemUtilsTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testAppend() {
         assertEquals(FileSystemUtils.append(PathUtils.get("/foo/bar"), PathUtils.get("/hello/world/this_is/awesome"), 0),
             PathUtils.get("/foo/bar/hello/world/this_is/awesome"));
diff --git a/core/src/test/java/org/elasticsearch/common/io/StreamsTests.java b/core/src/test/java/org/elasticsearch/common/io/StreamsTests.java
index 5c6c1e1..1dd809d 100644
--- a/core/src/test/java/org/elasticsearch/common/io/StreamsTests.java
+++ b/core/src/test/java/org/elasticsearch/common/io/StreamsTests.java
@@ -19,27 +19,25 @@
 
 package org.elasticsearch.common.io;
 
+import java.nio.charset.StandardCharsets;
 import org.apache.lucene.util.BytesRef;
 import org.elasticsearch.common.bytes.BytesArray;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.StringReader;
-import java.io.StringWriter;
-import java.nio.charset.StandardCharsets;
+import java.io.*;
 import java.util.Arrays;
 
-import static org.elasticsearch.common.io.Streams.copy;
-import static org.elasticsearch.common.io.Streams.copyToString;
+import static org.elasticsearch.common.io.Streams.*;
 import static org.hamcrest.Matchers.equalTo;
 
 /**
  * Unit tests for {@link org.elasticsearch.common.io.Streams}.
  */
 public class StreamsTests extends ESTestCase {
+
+    @Test
     public void testCopyFromInputStream() throws IOException {
         byte[] content = "content".getBytes(StandardCharsets.UTF_8);
         ByteArrayInputStream in = new ByteArrayInputStream(content);
@@ -50,6 +48,7 @@ public class StreamsTests extends ESTestCase {
         assertThat(Arrays.equals(content, out.toByteArray()), equalTo(true));
     }
 
+    @Test
     public void testCopyFromByteArray() throws IOException {
         byte[] content = "content".getBytes(StandardCharsets.UTF_8);
         ByteArrayOutputStream out = new ByteArrayOutputStream(content.length);
@@ -57,6 +56,7 @@ public class StreamsTests extends ESTestCase {
         assertThat(Arrays.equals(content, out.toByteArray()), equalTo(true));
     }
 
+    @Test
     public void testCopyFromReader() throws IOException {
         String content = "content";
         StringReader in = new StringReader(content);
@@ -66,6 +66,7 @@ public class StreamsTests extends ESTestCase {
         assertThat(out.toString(), equalTo(content));
     }
 
+    @Test
     public void testCopyFromString() throws IOException {
         String content = "content";
         StringWriter out = new StringWriter();
@@ -73,13 +74,15 @@ public class StreamsTests extends ESTestCase {
         assertThat(out.toString(), equalTo(content));
     }
 
+    @Test
     public void testCopyToString() throws IOException {
         String content = "content";
         StringReader in = new StringReader(content);
         String result = copyToString(in);
         assertThat(result, equalTo(content));
     }
-
+    
+    @Test
     public void testBytesStreamInput() throws IOException {
         byte stuff[] = new byte[] { 0, 1, 2, 3 };
         BytesRef stuffRef = new BytesRef(stuff, 2, 2);
@@ -90,4 +93,5 @@ public class StreamsTests extends ESTestCase {
         assertEquals(-1, input.read());
         input.close();
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/common/io/stream/BytesStreamsTests.java b/core/src/test/java/org/elasticsearch/common/io/stream/BytesStreamsTests.java
index 7f23236..50e51ba 100644
--- a/core/src/test/java/org/elasticsearch/common/io/stream/BytesStreamsTests.java
+++ b/core/src/test/java/org/elasticsearch/common/io/stream/BytesStreamsTests.java
@@ -24,18 +24,21 @@ import org.elasticsearch.common.geo.GeoPoint;
 import org.elasticsearch.common.lucene.BytesRefs;
 import org.elasticsearch.common.util.BigArrays;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
+
 import java.util.Objects;
 
 import static org.hamcrest.Matchers.closeTo;
 import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
 
 /**
  * Tests for {@link BytesStreamOutput} paging behaviour.
  */
 public class BytesStreamsTests extends ESTestCase {
+
+    @Test
     public void testEmpty() throws Exception {
         BytesStreamOutput out = new BytesStreamOutput();
 
@@ -46,6 +49,7 @@ public class BytesStreamsTests extends ESTestCase {
         out.close();
     }
 
+    @Test
     public void testSingleByte() throws Exception {
         BytesStreamOutput out = new BytesStreamOutput();
         assertEquals(0, out.size());
@@ -61,6 +65,7 @@ public class BytesStreamsTests extends ESTestCase {
         out.close();
     }
 
+    @Test
     public void testSingleShortPage() throws Exception {
         BytesStreamOutput out = new BytesStreamOutput();
 
@@ -78,6 +83,7 @@ public class BytesStreamsTests extends ESTestCase {
         out.close();
     }
 
+    @Test
     public void testIllegalBulkWrite() throws Exception {
         BytesStreamOutput out = new BytesStreamOutput();
 
@@ -93,6 +99,7 @@ public class BytesStreamsTests extends ESTestCase {
         out.close();
     }
 
+    @Test
     public void testSingleShortPageBulkWrite() throws Exception {
         BytesStreamOutput out = new BytesStreamOutput();
 
@@ -113,6 +120,7 @@ public class BytesStreamsTests extends ESTestCase {
         out.close();
     }
 
+    @Test
     public void testSingleFullPageBulkWrite() throws Exception {
         BytesStreamOutput out = new BytesStreamOutput();
 
@@ -128,6 +136,7 @@ public class BytesStreamsTests extends ESTestCase {
         out.close();
     }
 
+    @Test
     public void testSingleFullPageBulkWriteWithOffset() throws Exception {
         BytesStreamOutput out = new BytesStreamOutput();
 
@@ -147,6 +156,7 @@ public class BytesStreamsTests extends ESTestCase {
         out.close();
     }
 
+    @Test
     public void testSingleFullPageBulkWriteWithOffsetCrossover() throws Exception {
         BytesStreamOutput out = new BytesStreamOutput();
 
@@ -166,6 +176,7 @@ public class BytesStreamsTests extends ESTestCase {
         out.close();
     }
 
+    @Test
     public void testSingleFullPage() throws Exception {
         BytesStreamOutput out = new BytesStreamOutput();
 
@@ -183,6 +194,7 @@ public class BytesStreamsTests extends ESTestCase {
         out.close();
     }
 
+    @Test
     public void testOneFullOneShortPage() throws Exception {
         BytesStreamOutput out = new BytesStreamOutput();
 
@@ -200,6 +212,7 @@ public class BytesStreamsTests extends ESTestCase {
         out.close();
     }
 
+    @Test
     public void testTwoFullOneShortPage() throws Exception {
         BytesStreamOutput out = new BytesStreamOutput();
 
@@ -217,6 +230,7 @@ public class BytesStreamsTests extends ESTestCase {
         out.close();
     }
 
+    @Test
     public void testSeek() throws Exception {
         BytesStreamOutput out = new BytesStreamOutput();
 
@@ -233,6 +247,7 @@ public class BytesStreamsTests extends ESTestCase {
         out.close();
     }
 
+    @Test
     public void testSkip() throws Exception {
         BytesStreamOutput out = new BytesStreamOutput();
 
@@ -246,6 +261,7 @@ public class BytesStreamsTests extends ESTestCase {
         out.close();
     }
 
+    @Test
     public void testSimpleStreams() throws Exception {
         assumeTrue("requires a 64-bit JRE ... ?!", Constants.JRE_IS_64BIT);
         BytesStreamOutput out = new BytesStreamOutput();
@@ -296,6 +312,7 @@ public class BytesStreamsTests extends ESTestCase {
         out.close();
     }
 
+    @Test
     public void testNamedWriteable() throws IOException {
         BytesStreamOutput out = new BytesStreamOutput();
         NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry();
@@ -307,6 +324,7 @@ public class BytesStreamsTests extends ESTestCase {
         assertEquals(namedWriteableOut, namedWriteableIn);
     }
 
+    @Test
     public void testNamedWriteableDuplicates() throws IOException {
         NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry();
         namedWriteableRegistry.registerPrototype(BaseNamedWriteable.class, new TestNamedWriteable(null, null));
@@ -319,6 +337,7 @@ public class BytesStreamsTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testNamedWriteableUnknownCategory() throws IOException {
         BytesStreamOutput out = new BytesStreamOutput();
         out.writeNamedWriteable(new TestNamedWriteable("test1", "test2"));
@@ -332,6 +351,7 @@ public class BytesStreamsTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testNamedWriteableUnknownNamedWriteable() throws IOException {
         NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry();
         namedWriteableRegistry.registerPrototype(BaseNamedWriteable.class, new TestNamedWriteable(null, null));
@@ -361,17 +381,13 @@ public class BytesStreamsTests extends ESTestCase {
         }
     }
 
+    @Test(expected = UnsupportedOperationException.class)
     public void testNamedWriteableNotSupportedWithoutWrapping() throws IOException {
         BytesStreamOutput out = new BytesStreamOutput();
         TestNamedWriteable testNamedWriteable = new TestNamedWriteable("test1", "test2");
         out.writeNamedWriteable(testNamedWriteable);
         StreamInput in = StreamInput.wrap(out.bytes().toBytes());
-        try {
-            in.readNamedWriteable(BaseNamedWriteable.class);
-            fail("Expected UnsupportedOperationException");
-        } catch (UnsupportedOperationException e) {
-            assertThat(e.getMessage(), is("can't read named writeable from StreamInput"));
-        }
+        in.readNamedWriteable(BaseNamedWriteable.class);
     }
 
     private static abstract class BaseNamedWriteable<T> implements NamedWriteable<T> {
@@ -424,6 +440,7 @@ public class BytesStreamsTests extends ESTestCase {
     // we ignore this test for now since all existing callers of BytesStreamOutput happily
     // call bytes() after close().
     @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/12620")
+    @Test
     public void testAccessAfterClose() throws Exception {
         BytesStreamOutput out = new BytesStreamOutput();
 
diff --git a/core/src/test/java/org/elasticsearch/common/joda/DateMathParserTests.java b/core/src/test/java/org/elasticsearch/common/joda/DateMathParserTests.java
index 96a4a3f..6a1f146 100644
--- a/core/src/test/java/org/elasticsearch/common/joda/DateMathParserTests.java
+++ b/core/src/test/java/org/elasticsearch/common/joda/DateMathParserTests.java
@@ -23,12 +23,12 @@ import org.elasticsearch.ElasticsearchParseException;
 import org.elasticsearch.ExceptionsHelper;
 import org.elasticsearch.test.ESTestCase;
 import org.joda.time.DateTimeZone;
+import org.junit.Test;
 
 import java.util.TimeZone;
 import java.util.concurrent.Callable;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 
 public class DateMathParserTests extends ESTestCase {
@@ -48,12 +48,12 @@ public class DateMathParserTests extends ESTestCase {
     void assertDateMathEquals(String toTest, String expected) {
         assertDateMathEquals(toTest, expected, 0, false, null);
     }
-
+    
     void assertDateMathEquals(String toTest, String expected, final long now, boolean roundUp, DateTimeZone timeZone) {
         long gotMillis = parser.parse(toTest, callable(now), roundUp, timeZone);
         assertDateEquals(gotMillis, toTest, expected);
     }
-
+    
     void assertDateEquals(long gotMillis, String original, String expected) {
         long expectedMillis = parser.parse(expected, callable(0));
         if (gotMillis != expectedMillis) {
@@ -65,7 +65,7 @@ public class DateMathParserTests extends ESTestCase {
                 "Actual milliseconds   : " + gotMillis + "\n");
         }
     }
-
+    
     public void testBasicDates() {
         assertDateMathEquals("2014", "2014-01-01T00:00:00.000");
         assertDateMathEquals("2014-05", "2014-05-01T00:00:00.000");
@@ -92,7 +92,7 @@ public class DateMathParserTests extends ESTestCase {
         assertDateMathEquals("2014-05-30T20:21+03:00", "2014-05-30T17:21:00.000", 0, false, DateTimeZone.forID("-08:00"));
         assertDateMathEquals("2014-05-30T20:21Z", "2014-05-30T20:21:00.000", 0, false, DateTimeZone.forID("-08:00"));
     }
-
+    
     public void testBasicMath() {
         assertDateMathEquals("2014-11-18||+y", "2015-11-18");
         assertDateMathEquals("2014-11-18||-2y", "2012-11-18");
@@ -117,7 +117,7 @@ public class DateMathParserTests extends ESTestCase {
         assertDateMathEquals("2014-11-18T14:27:32||+60s", "2014-11-18T14:28:32");
         assertDateMathEquals("2014-11-18T14:27:32||-3600s", "2014-11-18T13:27:32");
     }
-
+    
     public void testLenientEmptyMath() {
         assertDateMathEquals("2014-05-30T20:21||", "2014-05-30T20:21:00.000");
     }
@@ -133,12 +133,12 @@ public class DateMathParserTests extends ESTestCase {
 
     public void testNow() {
         final long now = parser.parse("2014-11-18T14:27:32", callable(0), false, null);
-
+        
         assertDateMathEquals("now", "2014-11-18T14:27:32", now, false, null);
         assertDateMathEquals("now+M", "2014-12-18T14:27:32", now, false, null);
         assertDateMathEquals("now-2d", "2014-11-16T14:27:32", now, false, null);
         assertDateMathEquals("now/m", "2014-11-18T14:27", now, false, null);
-
+        
         // timezone does not affect now
         assertDateMathEquals("now/m", "2014-11-18T14:27", now, false, DateTimeZone.forID("+02:00"));
     }
@@ -151,14 +151,14 @@ public class DateMathParserTests extends ESTestCase {
         // rounding should also take into account time zone
         assertDateMathEquals("2014-11-18||/y", "2013-12-31T23:00:00.000Z", 0, false, DateTimeZone.forID("CET"));
         assertDateMathEquals("2014-11-18||/y", "2014-12-31T22:59:59.999Z", 0, true, DateTimeZone.forID("CET"));
-
+        
         assertDateMathEquals("2014-11-18||/M", "2014-11-01", 0, false, null);
         assertDateMathEquals("2014-11-18||/M", "2014-11-30T23:59:59.999", 0, true, null);
         assertDateMathEquals("2014-11||/M", "2014-11-01", 0, false, null);
         assertDateMathEquals("2014-11||/M", "2014-11-30T23:59:59.999", 0, true, null);
         assertDateMathEquals("2014-11-18||/M", "2014-10-31T23:00:00.000Z", 0, false, DateTimeZone.forID("CET"));
         assertDateMathEquals("2014-11-18||/M", "2014-11-30T22:59:59.999Z", 0, true, DateTimeZone.forID("CET"));
-
+        
         assertDateMathEquals("2014-11-18T14||/w", "2014-11-17", 0, false, null);
         assertDateMathEquals("2014-11-18T14||/w", "2014-11-23T23:59:59.999", 0, true, null);
         assertDateMathEquals("2014-11-18||/w", "2014-11-17", 0, false, null);
@@ -168,12 +168,12 @@ public class DateMathParserTests extends ESTestCase {
         assertDateMathEquals("2014-11-18||/w", "2014-11-16T23:00:00.000Z", 0, false, DateTimeZone.forID("CET"));
         assertDateMathEquals("2014-11-18||/w", "2014-11-23T22:59:59.999Z", 0, true, DateTimeZone.forID("CET"));
         assertDateMathEquals("2014-07-22||/w", "2014-07-20T22:00:00.000Z", 0, false, DateTimeZone.forID("CET")); // with DST
-
+        
         assertDateMathEquals("2014-11-18T14||/d", "2014-11-18", 0, false, null);
         assertDateMathEquals("2014-11-18T14||/d", "2014-11-18T23:59:59.999", 0, true, null);
         assertDateMathEquals("2014-11-18||/d", "2014-11-18", 0, false, null);
         assertDateMathEquals("2014-11-18||/d", "2014-11-18T23:59:59.999", 0, true, null);
-
+        
         assertDateMathEquals("2014-11-18T14:27||/h", "2014-11-18T14", 0, false, null);
         assertDateMathEquals("2014-11-18T14:27||/h", "2014-11-18T14:59:59.999", 0, true, null);
         assertDateMathEquals("2014-11-18T14||/H", "2014-11-18T14", 0, false, null);
@@ -182,12 +182,12 @@ public class DateMathParserTests extends ESTestCase {
         assertDateMathEquals("2014-11-18T14:27||/h", "2014-11-18T14:59:59.999", 0, true, null);
         assertDateMathEquals("2014-11-18T14||/H", "2014-11-18T14", 0, false, null);
         assertDateMathEquals("2014-11-18T14||/H", "2014-11-18T14:59:59.999", 0, true, null);
-
+        
         assertDateMathEquals("2014-11-18T14:27:32||/m", "2014-11-18T14:27", 0, false, null);
         assertDateMathEquals("2014-11-18T14:27:32||/m", "2014-11-18T14:27:59.999", 0, true, null);
         assertDateMathEquals("2014-11-18T14:27||/m", "2014-11-18T14:27", 0, false, null);
         assertDateMathEquals("2014-11-18T14:27||/m", "2014-11-18T14:27:59.999", 0, true, null);
-
+        
         assertDateMathEquals("2014-11-18T14:27:32.123||/s", "2014-11-18T14:27:32", 0, false, null);
         assertDateMathEquals("2014-11-18T14:27:32.123||/s", "2014-11-18T14:27:32.999", 0, true, null);
         assertDateMathEquals("2014-11-18T14:27:32||/s", "2014-11-18T14:27:32", 0, false, null);
@@ -199,12 +199,12 @@ public class DateMathParserTests extends ESTestCase {
 
         // datemath still works on timestamps
         assertDateMathEquals("1418248078000||/m", "2014-12-10T21:47:00.000");
-
+        
         // also check other time units
         DateMathParser parser = new DateMathParser(Joda.forPattern("epoch_second||dateOptionalTime"));
         long datetime = parser.parse("1418248078", callable(0));
         assertDateEquals(datetime, "1418248078", "2014-12-10T21:47:58.000");
-
+        
         // a timestamp before 10000 is a year
         assertDateMathEquals("9999", "9999-01-01T00:00:00.000");
         // 10000 is also a year, breaking bwc, used to be a timestamp
@@ -221,7 +221,7 @@ public class DateMathParserTests extends ESTestCase {
             assertThat(ExceptionsHelper.detailedMessage(e).contains(exc), equalTo(true));
         }
     }
-
+    
     public void testIllegalMathFormat() {
         assertParseException("Expected date math unsupported operator exception", "2014-11-18||*5", "operator not supported");
         assertParseException("Expected date math incompatible rounding exception", "2014-11-18||/2m", "rounding");
@@ -229,7 +229,7 @@ public class DateMathParserTests extends ESTestCase {
         assertParseException("Expected date math truncation exception", "2014-11-18||+12", "truncated");
         assertParseException("Expected date math truncation exception", "2014-11-18||-", "truncated");
     }
-
+    
     public void testIllegalDateFormat() {
         assertParseException("Expected bad timestamp exception", Long.toString(Long.MAX_VALUE) + "0", "failed to parse date field");
         assertParseException("Expected bad date format exception", "123bogus", "with format");
@@ -250,14 +250,9 @@ public class DateMathParserTests extends ESTestCase {
         assertTrue(called.get());
     }
 
+    @Test(expected = ElasticsearchParseException.class)
     public void testThatUnixTimestampMayNotHaveTimeZone() {
         DateMathParser parser = new DateMathParser(Joda.forPattern("epoch_millis"));
-        try {
-            parser.parse("1234567890123", callable(42), false, DateTimeZone.forTimeZone(TimeZone.getTimeZone("CET")));
-            fail("Expected ElasticsearchParseException");
-        } catch(ElasticsearchParseException e) {
-            assertThat(e.getMessage(), containsString("failed to parse date field"));
-            assertThat(e.getMessage(), containsString("with format [epoch_millis]"));
-        }
+        parser.parse("1234567890123", callable(42), false, DateTimeZone.forTimeZone(TimeZone.getTimeZone("CET")));
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/common/logging/jdk/JDKESLoggerTests.java b/core/src/test/java/org/elasticsearch/common/logging/jdk/JDKESLoggerTests.java
index 0c38ee0..748994d 100644
--- a/core/src/test/java/org/elasticsearch/common/logging/jdk/JDKESLoggerTests.java
+++ b/core/src/test/java/org/elasticsearch/common/logging/jdk/JDKESLoggerTests.java
@@ -21,6 +21,7 @@ package org.elasticsearch.common.logging.jdk;
 
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -50,7 +51,8 @@ public class JDKESLoggerTests extends ESTestCase {
         testLogger.addHandler(testHandler);
     }
 
-    public void testLocationInfoTest() {
+    @Test
+    public void locationInfoTest() {
         esTestLogger.error("This is an error");
         esTestLogger.warn("This is a warning");
         esTestLogger.info("This is an info");
@@ -64,31 +66,31 @@ public class JDKESLoggerTests extends ESTestCase {
         assertThat(record.getLevel(), equalTo(Level.SEVERE));
         assertThat(record.getMessage(), equalTo("This is an error"));
         assertThat(record.getSourceClassName(), equalTo(JDKESLoggerTests.class.getCanonicalName()));
-        assertThat(record.getSourceMethodName(), equalTo("testLocationInfoTest"));
+        assertThat(record.getSourceMethodName(), equalTo("locationInfoTest"));
         record = records.get(1);
         assertThat(record, notNullValue());
         assertThat(record.getLevel(), equalTo(Level.WARNING));
         assertThat(record.getMessage(), equalTo("This is a warning"));
         assertThat(record.getSourceClassName(), equalTo(JDKESLoggerTests.class.getCanonicalName()));
-        assertThat(record.getSourceMethodName(), equalTo("testLocationInfoTest"));
+        assertThat(record.getSourceMethodName(), equalTo("locationInfoTest"));
         record = records.get(2);
         assertThat(record, notNullValue());
         assertThat(record.getLevel(), equalTo(Level.INFO));
         assertThat(record.getMessage(), equalTo("This is an info"));
         assertThat(record.getSourceClassName(), equalTo(JDKESLoggerTests.class.getCanonicalName()));
-        assertThat(record.getSourceMethodName(), equalTo("testLocationInfoTest"));
+        assertThat(record.getSourceMethodName(), equalTo("locationInfoTest"));
         record = records.get(3);
         assertThat(record, notNullValue());
         assertThat(record.getLevel(), equalTo(Level.FINE));
         assertThat(record.getMessage(), equalTo("This is a debug"));
         assertThat(record.getSourceClassName(), equalTo(JDKESLoggerTests.class.getCanonicalName()));
-        assertThat(record.getSourceMethodName(), equalTo("testLocationInfoTest"));
+        assertThat(record.getSourceMethodName(), equalTo("locationInfoTest"));
         record = records.get(4);
         assertThat(record, notNullValue());
         assertThat(record.getLevel(), equalTo(Level.FINEST));
         assertThat(record.getMessage(), equalTo("This is a trace"));
         assertThat(record.getSourceClassName(), equalTo(JDKESLoggerTests.class.getCanonicalName()));
-        assertThat(record.getSourceMethodName(), equalTo("testLocationInfoTest"));
+        assertThat(record.getSourceMethodName(), equalTo("locationInfoTest"));
     }
 
     private static class TestHandler extends Handler {
diff --git a/core/src/test/java/org/elasticsearch/common/logging/log4j/Log4jESLoggerTests.java b/core/src/test/java/org/elasticsearch/common/logging/log4j/Log4jESLoggerTests.java
index 8f9c900..d0cd387 100644
--- a/core/src/test/java/org/elasticsearch/common/logging/log4j/Log4jESLoggerTests.java
+++ b/core/src/test/java/org/elasticsearch/common/logging/log4j/Log4jESLoggerTests.java
@@ -29,6 +29,7 @@ import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.After;
+import org.junit.Test;
 
 import java.nio.file.Path;
 import java.util.ArrayList;
@@ -83,7 +84,8 @@ public class Log4jESLoggerTests extends ESTestCase {
         deprecationLogger.removeAppender(deprecationAppender);
     }
 
-    public void testLocationInfoTest() {
+    @Test
+    public void locationInfoTest() {
         esTestLogger.error("This is an error");
         esTestLogger.warn("This is a warning");
         esTestLogger.info("This is an info");
@@ -99,7 +101,7 @@ public class Log4jESLoggerTests extends ESTestCase {
         LocationInfo locationInfo = event.getLocationInformation();
         assertThat(locationInfo, notNullValue());
         assertThat(locationInfo.getClassName(), equalTo(Log4jESLoggerTests.class.getCanonicalName()));
-        assertThat(locationInfo.getMethodName(), equalTo("testLocationInfoTest"));
+        assertThat(locationInfo.getMethodName(), equalTo("locationInfoTest"));
         event = events.get(1);
         assertThat(event, notNullValue());
         assertThat(event.getLevel(), equalTo(Level.WARN));
@@ -107,7 +109,7 @@ public class Log4jESLoggerTests extends ESTestCase {
         locationInfo = event.getLocationInformation();
         assertThat(locationInfo, notNullValue());
         assertThat(locationInfo.getClassName(), equalTo(Log4jESLoggerTests.class.getCanonicalName()));
-        assertThat(locationInfo.getMethodName(), equalTo("testLocationInfoTest"));
+        assertThat(locationInfo.getMethodName(), equalTo("locationInfoTest"));
         event = events.get(2);
         assertThat(event, notNullValue());
         assertThat(event.getLevel(), equalTo(Level.INFO));
@@ -115,7 +117,7 @@ public class Log4jESLoggerTests extends ESTestCase {
         locationInfo = event.getLocationInformation();
         assertThat(locationInfo, notNullValue());
         assertThat(locationInfo.getClassName(), equalTo(Log4jESLoggerTests.class.getCanonicalName()));
-        assertThat(locationInfo.getMethodName(), equalTo("testLocationInfoTest"));
+        assertThat(locationInfo.getMethodName(), equalTo("locationInfoTest"));
         event = events.get(3);
         assertThat(event, notNullValue());
         assertThat(event.getLevel(), equalTo(Level.DEBUG));
@@ -123,7 +125,7 @@ public class Log4jESLoggerTests extends ESTestCase {
         locationInfo = event.getLocationInformation();
         assertThat(locationInfo, notNullValue());
         assertThat(locationInfo.getClassName(), equalTo(Log4jESLoggerTests.class.getCanonicalName()));
-        assertThat(locationInfo.getMethodName(), equalTo("testLocationInfoTest"));
+        assertThat(locationInfo.getMethodName(), equalTo("locationInfoTest"));
         event = events.get(4);
         assertThat(event, notNullValue());
         assertThat(event.getLevel(), equalTo(Level.TRACE));
@@ -131,9 +133,10 @@ public class Log4jESLoggerTests extends ESTestCase {
         locationInfo = event.getLocationInformation();
         assertThat(locationInfo, notNullValue());
         assertThat(locationInfo.getClassName(), equalTo(Log4jESLoggerTests.class.getCanonicalName()));
-        assertThat(locationInfo.getMethodName(), equalTo("testLocationInfoTest"));
+        assertThat(locationInfo.getMethodName(), equalTo("locationInfoTest"));
     }
 
+    @Test
     public void testDeprecationLogger() {
         deprecationLogger.deprecated("This is a deprecation message");
         List<LoggingEvent> deprecationEvents = deprecationAppender.getEvents();
diff --git a/core/src/test/java/org/elasticsearch/common/logging/log4j/LoggingConfigurationTests.java b/core/src/test/java/org/elasticsearch/common/logging/log4j/LoggingConfigurationTests.java
index 2a08dd1..2b84bec 100644
--- a/core/src/test/java/org/elasticsearch/common/logging/log4j/LoggingConfigurationTests.java
+++ b/core/src/test/java/org/elasticsearch/common/logging/log4j/LoggingConfigurationTests.java
@@ -28,16 +28,16 @@ import org.elasticsearch.env.Environment;
 import org.elasticsearch.node.internal.InternalSettingsPreparer;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
+import java.nio.file.OpenOption;
 import java.nio.file.Path;
 import java.nio.file.StandardOpenOption;
 import java.util.Arrays;
 
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
@@ -49,6 +49,7 @@ public class LoggingConfigurationTests extends ESTestCase {
         LogConfigurator.reset();
     }
 
+    @Test
     public void testResolveMultipleConfigs() throws Exception {
         String level = Log4jESLoggerFactory.getLogger("test").getLevel();
         try {
@@ -78,6 +79,7 @@ public class LoggingConfigurationTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testResolveJsonLoggingConfig() throws Exception {
         Path tmpDir = createTempDir();
         Path loggingConf = tmpDir.resolve(loggingConfiguration("json"));
@@ -95,6 +97,7 @@ public class LoggingConfigurationTests extends ESTestCase {
         assertThat(logSettings.get("json"), is("foo"));
     }
 
+    @Test
     public void testResolvePropertiesLoggingConfig() throws Exception {
         Path tmpDir = createTempDir();
         Path loggingConf = tmpDir.resolve(loggingConfiguration("properties"));
@@ -112,6 +115,7 @@ public class LoggingConfigurationTests extends ESTestCase {
         assertThat(logSettings.get("key"), is("value"));
     }
 
+    @Test
     public void testResolveYamlLoggingConfig() throws Exception {
         Path tmpDir = createTempDir();
         Path loggingConf1 = tmpDir.resolve(loggingConfiguration("yml"));
@@ -132,6 +136,7 @@ public class LoggingConfigurationTests extends ESTestCase {
         assertThat(logSettings.get("yaml"), is("bar"));
     }
 
+    @Test
     public void testResolveConfigInvalidFilename() throws Exception {
         Path tmpDir = createTempDir();
         Path invalidSuffix = tmpDir.resolve(loggingConfiguration(randomFrom(LogConfigurator.ALLOWED_SUFFIXES)) + randomInvalidSuffix());
@@ -150,6 +155,7 @@ public class LoggingConfigurationTests extends ESTestCase {
     }
 
     // tests that custom settings are not overwritten by settings in the config file
+    @Test
     public void testResolveOrder() throws Exception {
         Path tmpDir = createTempDir();
         Path loggingConf = tmpDir.resolve(loggingConfiguration("yaml"));
@@ -176,6 +182,7 @@ public class LoggingConfigurationTests extends ESTestCase {
     }
 
     // tests that config file is not read when we call LogConfigurator.configure(Settings, false)
+    @Test
     public void testConfigNotRead() throws Exception {
         Path tmpDir = createTempDir();
         Path loggingConf = tmpDir.resolve(loggingConfiguration("yaml"));
diff --git a/core/src/test/java/org/elasticsearch/common/lucene/LuceneTests.java b/core/src/test/java/org/elasticsearch/common/lucene/LuceneTests.java
index fcd2f7d..2edd266 100644
--- a/core/src/test/java/org/elasticsearch/common/lucene/LuceneTests.java
+++ b/core/src/test/java/org/elasticsearch/common/lucene/LuceneTests.java
@@ -23,14 +23,7 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.document.Field.Store;
 import org.apache.lucene.document.StringField;
 import org.apache.lucene.document.TextField;
-import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexWriterConfig;
-import org.apache.lucene.index.NoDeletionPolicy;
-import org.apache.lucene.index.NoMergePolicy;
-import org.apache.lucene.index.RandomIndexWriter;
-import org.apache.lucene.index.SegmentInfos;
-import org.apache.lucene.index.Term;
+import org.apache.lucene.index.*;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.search.TermQuery;
@@ -39,23 +32,23 @@ import org.apache.lucene.store.MMapDirectory;
 import org.apache.lucene.store.MockDirectoryWrapper;
 import org.apache.lucene.util.Version;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 /**
- *
+ * 
  */
 public class LuceneTests extends ESTestCase {
-    /**
+
+
+    /*
      * simple test that ensures that we bump the version on Upgrade
      */
+    @Test
     public void testVersion() {
         // note this is just a silly sanity check, we test it in lucene, and we point to it this way
         assertEquals(Lucene.VERSION, Version.LATEST);
diff --git a/core/src/test/java/org/elasticsearch/common/lucene/all/SimpleAllTests.java b/core/src/test/java/org/elasticsearch/common/lucene/all/SimpleAllTests.java
index f4f3034..ccf657c 100644
--- a/core/src/test/java/org/elasticsearch/common/lucene/all/SimpleAllTests.java
+++ b/core/src/test/java/org/elasticsearch/common/lucene/all/SimpleAllTests.java
@@ -28,22 +28,14 @@ import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.StoredField;
 import org.apache.lucene.document.TextField;
-import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexWriterConfig;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.search.Explanation;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.MatchAllDocsQuery;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.ScoreDoc;
-import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.index.*;
+import org.apache.lucene.search.*;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.util.BytesRef;
 import org.elasticsearch.common.lucene.Lucene;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -53,6 +45,8 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class SimpleAllTests extends ESTestCase {
+
+    @Test
     public void testBoostOnEagerTokenizer() throws Exception {
         AllEntries allEntries = new AllEntries();
         allEntries.addText("field1", "all", 2.0f);
@@ -97,6 +91,7 @@ public class SimpleAllTests extends ESTestCase {
         assertFalse(ts.incrementToken());
     }
 
+    @Test
     public void testAllEntriesRead() throws Exception {
         AllEntries allEntries = new AllEntries();
         allEntries.addText("field1", "something", 1.0f);
@@ -127,6 +122,7 @@ public class SimpleAllTests extends ESTestCase {
         assertEquals(scoreDoc.score, expl.getValue(), 0.00001f);
     }
 
+    @Test
     public void testSimpleAllNoBoost() throws Exception {
         Directory dir = new RAMDirectory();
         IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
@@ -173,6 +169,7 @@ public class SimpleAllTests extends ESTestCase {
         indexWriter.close();
     }
 
+    @Test
     public void testSimpleAllWithBoost() throws Exception {
         Directory dir = new RAMDirectory();
         IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
@@ -220,6 +217,7 @@ public class SimpleAllTests extends ESTestCase {
         indexWriter.close();
     }
 
+    @Test
     public void testMultipleTokensAllNoBoost() throws Exception {
         Directory dir = new RAMDirectory();
         IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
@@ -270,6 +268,7 @@ public class SimpleAllTests extends ESTestCase {
         indexWriter.close();
     }
 
+    @Test
     public void testMultipleTokensAllWithBoost() throws Exception {
         Directory dir = new RAMDirectory();
         IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
@@ -320,6 +319,7 @@ public class SimpleAllTests extends ESTestCase {
         indexWriter.close();
     }
 
+    @Test
     public void testNoTokensWithKeywordAnalyzer() throws Exception {
         Directory dir = new RAMDirectory();
         IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.KEYWORD_ANALYZER));
diff --git a/core/src/test/java/org/elasticsearch/common/lucene/index/FreqTermsEnumTests.java b/core/src/test/java/org/elasticsearch/common/lucene/index/FreqTermsEnumTests.java
index 96715a0..da9cfe1 100644
--- a/core/src/test/java/org/elasticsearch/common/lucene/index/FreqTermsEnumTests.java
+++ b/core/src/test/java/org/elasticsearch/common/lucene/index/FreqTermsEnumTests.java
@@ -41,6 +41,7 @@ import org.elasticsearch.common.util.BigArrays;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -173,18 +174,21 @@ public class FreqTermsEnumTests extends ESTestCase {
         super.tearDown();
     }
 
+    @Test
     public void testAllFreqs() throws Exception {
         assertAgainstReference(true, true, null, referenceAll);
         assertAgainstReference(true, false, null, referenceAll);
         assertAgainstReference(false, true, null, referenceAll);
     }
 
+    @Test
     public void testNonDeletedFreqs() throws Exception {
         assertAgainstReference(true, true, Queries.newMatchAllQuery(), referenceNotDeleted);
         assertAgainstReference(true, false, Queries.newMatchAllQuery(), referenceNotDeleted);
         assertAgainstReference(false, true, Queries.newMatchAllQuery(), referenceNotDeleted);
     }
 
+    @Test
     public void testFilterFreqs() throws Exception {
         assertAgainstReference(true, true, filter, referenceFilter);
         assertAgainstReference(true, false, filter, referenceFilter);
diff --git a/core/src/test/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQueryTests.java b/core/src/test/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQueryTests.java
index 5cb8060..43e151e 100644
--- a/core/src/test/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQueryTests.java
+++ b/core/src/test/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQueryTests.java
@@ -22,21 +22,19 @@ package org.elasticsearch.common.lucene.search;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.TextField;
-import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexWriterConfig;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.Query;
+import org.apache.lucene.index.*;
+import org.apache.lucene.search.*;
 import org.apache.lucene.store.RAMDirectory;
 import org.elasticsearch.common.lucene.Lucene;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 
 public class MultiPhrasePrefixQueryTests extends ESTestCase {
-    public void testSimple() throws Exception {
+
+    @Test
+    public void simpleTests() throws Exception {
         IndexWriter writer = new IndexWriter(new RAMDirectory(), new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
         Document doc = new Document();
         doc.add(new Field("field", "aaa bbb ccc ddd", TextField.TYPE_NOT_STORED));
@@ -65,6 +63,7 @@ public class MultiPhrasePrefixQueryTests extends ESTestCase {
         assertThat(searcher.count(query), equalTo(0));
     }
 
+    @Test
     public void testBoost() throws Exception {
         IndexWriter writer = new IndexWriter(new RAMDirectory(), new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
         Document doc = new Document();
diff --git a/core/src/test/java/org/elasticsearch/common/lucene/search/function/ScriptScoreFunctionTests.java b/core/src/test/java/org/elasticsearch/common/lucene/search/function/ScriptScoreFunctionTests.java
index 199ffaf..b6c6384 100644
--- a/core/src/test/java/org/elasticsearch/common/lucene/search/function/ScriptScoreFunctionTests.java
+++ b/core/src/test/java/org/elasticsearch/common/lucene/search/function/ScriptScoreFunctionTests.java
@@ -26,15 +26,18 @@ import org.elasticsearch.script.Script;
 import org.elasticsearch.script.ScriptException;
 import org.elasticsearch.script.SearchScript;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.hamcrest.Matchers.equalTo;
 
 public class ScriptScoreFunctionTests extends ESTestCase {
+
     /**
      * Tests https://github.com/elasticsearch/elasticsearch/issues/2426
      */
+    @Test
     public void testScriptScoresReturnsNaN() throws IOException {
         ScoreFunction scoreFunction = new ScriptScoreFunction(new Script("Float.NaN"), new FloatValueScript(Float.NaN));
         LeafScoreFunction leafScoreFunction = scoreFunction.getLeafScoreFunction(null);
diff --git a/core/src/test/java/org/elasticsearch/common/lucene/search/morelikethis/MoreLikeThisQueryTests.java b/core/src/test/java/org/elasticsearch/common/lucene/search/morelikethis/MoreLikeThisQueryTests.java
index 573138c..119c595 100644
--- a/core/src/test/java/org/elasticsearch/common/lucene/search/morelikethis/MoreLikeThisQueryTests.java
+++ b/core/src/test/java/org/elasticsearch/common/lucene/search/morelikethis/MoreLikeThisQueryTests.java
@@ -32,6 +32,7 @@ import org.apache.lucene.store.RAMDirectory;
 import org.elasticsearch.common.lucene.Lucene;
 import org.elasticsearch.common.lucene.search.MoreLikeThisQuery;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 
@@ -39,11 +40,14 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class MoreLikeThisQueryTests extends ESTestCase {
+
+    @Test
     public void testSimple() throws Exception {
         Directory dir = new RAMDirectory();
         IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
         indexWriter.commit();
 
+
         Document document = new Document();
         document.add(new TextField("_id", "1", Field.Store.YES));
         document.add(new TextField("text", "lucene", Field.Store.YES));
diff --git a/core/src/test/java/org/elasticsearch/common/lucene/search/morelikethis/XMoreLikeThisTests.java b/core/src/test/java/org/elasticsearch/common/lucene/search/morelikethis/XMoreLikeThisTests.java
index e1c71b0..29d794a 100644
--- a/core/src/test/java/org/elasticsearch/common/lucene/search/morelikethis/XMoreLikeThisTests.java
+++ b/core/src/test/java/org/elasticsearch/common/lucene/search/morelikethis/XMoreLikeThisTests.java
@@ -32,6 +32,7 @@ import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.store.Directory;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.StringReader;
@@ -39,6 +40,7 @@ import java.util.Arrays;
 import java.util.List;
 
 public class XMoreLikeThisTests extends ESTestCase {
+
     private void addDoc(RandomIndexWriter writer, String[] texts) throws IOException {
         Document doc = new Document();
         for (String text : texts) {
@@ -47,6 +49,7 @@ public class XMoreLikeThisTests extends ESTestCase {
         writer.addDocument(doc);
     }
 
+    @Test
     public void testTopN() throws Exception {
         int numDocs = 100;
         int topN = 25;
diff --git a/core/src/test/java/org/elasticsearch/common/lucene/store/ByteArrayIndexInputTests.java b/core/src/test/java/org/elasticsearch/common/lucene/store/ByteArrayIndexInputTests.java
index 7113a30..8f4f013 100644
--- a/core/src/test/java/org/elasticsearch/common/lucene/store/ByteArrayIndexInputTests.java
+++ b/core/src/test/java/org/elasticsearch/common/lucene/store/ByteArrayIndexInputTests.java
@@ -19,15 +19,18 @@
 
 package org.elasticsearch.common.lucene.store;
 
+import java.nio.charset.StandardCharsets;
 import org.apache.lucene.store.IndexInput;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.nio.charset.StandardCharsets;
 
 import static org.hamcrest.Matchers.containsString;
 
 public class ByteArrayIndexInputTests extends ESTestCase {
+
+    @Test
     public void testRandomReads() throws IOException {
         for (int i = 0; i < 100; i++) {
             byte[] input = randomUnicodeOfLength(randomIntBetween(1, 1000)).getBytes(StandardCharsets.UTF_8);
@@ -39,6 +42,7 @@ public class ByteArrayIndexInputTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testRandomOverflow() throws IOException {
         for (int i = 0; i < 100; i++) {
             byte[] input = randomUnicodeOfLength(randomIntBetween(1, 1000)).getBytes(StandardCharsets.UTF_8);
@@ -57,6 +61,7 @@ public class ByteArrayIndexInputTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSeekOverflow() throws IOException {
         for (int i = 0; i < 100; i++) {
             byte[] input = randomUnicodeOfLength(randomIntBetween(1, 1000)).getBytes(StandardCharsets.UTF_8);
@@ -125,7 +130,7 @@ public class ByteArrayIndexInputTests extends ESTestCase {
                 default:
                     fail();
             }
-            assertEquals(readPos, indexInput.getFilePointer());
+            assertEquals((long) readPos, indexInput.getFilePointer());
         }
         return output;
     }
diff --git a/core/src/test/java/org/elasticsearch/common/lucene/store/InputStreamIndexInputTests.java b/core/src/test/java/org/elasticsearch/common/lucene/store/InputStreamIndexInputTests.java
index 99acdde..e8540d3 100644
--- a/core/src/test/java/org/elasticsearch/common/lucene/store/InputStreamIndexInputTests.java
+++ b/core/src/test/java/org/elasticsearch/common/lucene/store/InputStreamIndexInputTests.java
@@ -24,9 +24,11 @@ import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.store.IndexOutput;
 import org.apache.lucene.store.RAMDirectory;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.lessThan;
 
@@ -34,6 +36,8 @@ import static org.hamcrest.Matchers.lessThan;
  *
  */
 public class InputStreamIndexInputTests extends ESTestCase {
+
+    @Test
     public void testSingleReadSingleByteLimit() throws IOException {
         RAMDirectory dir = new RAMDirectory();
         IndexOutput output = dir.createOutput("test", IOContext.DEFAULT);
@@ -70,6 +74,7 @@ public class InputStreamIndexInputTests extends ESTestCase {
         assertThat(is.read(), equalTo(-1));
     }
 
+    @Test
     public void testReadMultiSingleByteLimit1() throws IOException {
         RAMDirectory dir = new RAMDirectory();
         IndexOutput output = dir.createOutput("test", IOContext.DEFAULT);
@@ -108,6 +113,7 @@ public class InputStreamIndexInputTests extends ESTestCase {
         assertThat(is.read(read), equalTo(-1));
     }
 
+    @Test
     public void testSingleReadTwoBytesLimit() throws IOException {
         RAMDirectory dir = new RAMDirectory();
         IndexOutput output = dir.createOutput("test", IOContext.DEFAULT);
@@ -149,6 +155,7 @@ public class InputStreamIndexInputTests extends ESTestCase {
         assertThat(is.read(), equalTo(-1));
     }
 
+    @Test
     public void testReadMultiTwoBytesLimit1() throws IOException {
         RAMDirectory dir = new RAMDirectory();
         IndexOutput output = dir.createOutput("test", IOContext.DEFAULT);
@@ -192,6 +199,7 @@ public class InputStreamIndexInputTests extends ESTestCase {
         assertThat(is.read(read), equalTo(-1));
     }
 
+    @Test
     public void testReadMultiFourBytesLimit() throws IOException {
         RAMDirectory dir = new RAMDirectory();
         IndexOutput output = dir.createOutput("test", IOContext.DEFAULT);
@@ -230,6 +238,7 @@ public class InputStreamIndexInputTests extends ESTestCase {
         assertThat(is.read(read), equalTo(-1));
     }
 
+    @Test
     public void testMarkRest() throws Exception {
         RAMDirectory dir = new RAMDirectory();
         IndexOutput output = dir.createOutput("test", IOContext.DEFAULT);
diff --git a/core/src/test/java/org/elasticsearch/common/lucene/uid/VersionsTests.java b/core/src/test/java/org/elasticsearch/common/lucene/uid/VersionsTests.java
index fb3c021..6c2397e 100644
--- a/core/src/test/java/org/elasticsearch/common/lucene/uid/VersionsTests.java
+++ b/core/src/test/java/org/elasticsearch/common/lucene/uid/VersionsTests.java
@@ -48,6 +48,7 @@ import org.elasticsearch.index.shard.ElasticsearchMergePolicy;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.MatcherAssert;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -75,7 +76,7 @@ public class VersionsTests extends ESTestCase {
         }
         return newReader;
     }
-
+    @Test
     public void testVersions() throws Exception {
         Directory dir = newDirectory();
         IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
@@ -127,6 +128,7 @@ public class VersionsTests extends ESTestCase {
         dir.close();
     }
 
+    @Test
     public void testNestedDocuments() throws IOException {
         Directory dir = newDirectory();
         IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
@@ -167,6 +169,7 @@ public class VersionsTests extends ESTestCase {
         dir.close();
     }
 
+    @Test
     public void testBackwardCompatibility() throws IOException {
         Directory dir = newDirectory();
         IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
@@ -233,6 +236,7 @@ public class VersionsTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testMergingOldIndices() throws Exception {
         final IndexWriterConfig iwConf = new IndexWriterConfig(new KeywordAnalyzer());
         iwConf.setMergePolicy(new ElasticsearchMergePolicy(iwConf.getMergePolicy()));
diff --git a/core/src/test/java/org/elasticsearch/common/math/MathUtilsTests.java b/core/src/test/java/org/elasticsearch/common/math/MathUtilsTests.java
index a25b7a3..85fd28d 100644
--- a/core/src/test/java/org/elasticsearch/common/math/MathUtilsTests.java
+++ b/core/src/test/java/org/elasticsearch/common/math/MathUtilsTests.java
@@ -20,9 +20,12 @@
 package org.elasticsearch.common.math;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 public class MathUtilsTests extends ESTestCase {
-    public void testMod() {
+
+    @Test
+    public void mod() {
         final int iters = scaledRandomIntBetween(1000, 10000);
         for (int i = 0; i < iters; ++i) {
             final int v = rarely() ? Integer.MIN_VALUE : rarely() ? Integer.MAX_VALUE : randomInt();
@@ -32,4 +35,5 @@ public class MathUtilsTests extends ESTestCase {
             assertTrue(mod < m);
         }
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/common/property/PropertyPlaceholderTests.java b/core/src/test/java/org/elasticsearch/common/property/PropertyPlaceholderTests.java
index 4d8fbc3..bfa08dd 100644
--- a/core/src/test/java/org/elasticsearch/common/property/PropertyPlaceholderTests.java
+++ b/core/src/test/java/org/elasticsearch/common/property/PropertyPlaceholderTests.java
@@ -20,13 +20,14 @@
 package org.elasticsearch.common.property;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.LinkedHashMap;
 import java.util.Map;
 
-import static org.hamcrest.Matchers.is;
-
 public class PropertyPlaceholderTests extends ESTestCase {
+
+    @Test
     public void testSimple() {
         PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder("{", "}", false);
         Map<String, String> map = new LinkedHashMap<>();
@@ -39,6 +40,7 @@ public class PropertyPlaceholderTests extends ESTestCase {
         assertEquals("a bar1 b bar2 c", propertyPlaceholder.replacePlaceholders("a {foo1} b {foo2} c", placeholderResolver));
     }
 
+    @Test
     public void testVariousPrefixSuffix() {
         // Test various prefix/suffix lengths
         PropertyPlaceholder ppEqualsPrefix = new PropertyPlaceholder("{", "}", false);
@@ -52,6 +54,7 @@ public class PropertyPlaceholderTests extends ESTestCase {
         assertEquals("bar", ppShorterPrefix.replacePlaceholders("{foo}}", placeholderResolver));
     }
 
+    @Test
     public void testDefaultValue() {
         PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder("${", "}", false);
         Map<String, String> map = new LinkedHashMap<>();
@@ -60,6 +63,7 @@ public class PropertyPlaceholderTests extends ESTestCase {
         assertEquals("", propertyPlaceholder.replacePlaceholders("${foo:}", placeholderResolver));
     }
 
+    @Test
     public void testIgnoredUnresolvedPlaceholder() {
         PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder("${", "}", true);
         Map<String, String> map = new LinkedHashMap<>();
@@ -67,18 +71,15 @@ public class PropertyPlaceholderTests extends ESTestCase {
         assertEquals("${foo}", propertyPlaceholder.replacePlaceholders("${foo}", placeholderResolver));
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testNotIgnoredUnresolvedPlaceholder() {
         PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder("${", "}", false);
         Map<String, String> map = new LinkedHashMap<>();
         PropertyPlaceholder.PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver(map, false, true);
-        try {
-            propertyPlaceholder.replacePlaceholders("${foo}", placeholderResolver);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("Could not resolve placeholder 'foo'"));
-        }
+        propertyPlaceholder.replacePlaceholders("${foo}", placeholderResolver);
     }
 
+    @Test
     public void testShouldIgnoreMissing() {
         PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder("${", "}", false);
         Map<String, String> map = new LinkedHashMap<>();
@@ -86,6 +87,7 @@ public class PropertyPlaceholderTests extends ESTestCase {
         assertEquals("bar", propertyPlaceholder.replacePlaceholders("bar${foo}", placeholderResolver));
     }
 
+    @Test
     public void testRecursive() {
         PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder("${", "}", false);
         Map<String, String> map = new LinkedHashMap<>();
@@ -97,6 +99,7 @@ public class PropertyPlaceholderTests extends ESTestCase {
         assertEquals("abarb", propertyPlaceholder.replacePlaceholders("a${foo}b", placeholderResolver));
     }
 
+    @Test
     public void testNestedLongerPrefix() {
         PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder("${", "}", false);
         Map<String, String> map = new LinkedHashMap<>();
@@ -108,6 +111,7 @@ public class PropertyPlaceholderTests extends ESTestCase {
         assertEquals("baz", propertyPlaceholder.replacePlaceholders("${bar${foo}}", placeholderResolver));
     }
 
+    @Test
     public void testNestedSameLengthPrefixSuffix() {
         PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder("{", "}", false);
         Map<String, String> map = new LinkedHashMap<>();
@@ -119,6 +123,7 @@ public class PropertyPlaceholderTests extends ESTestCase {
         assertEquals("baz", propertyPlaceholder.replacePlaceholders("{bar{foo}}", placeholderResolver));
     }
 
+    @Test
     public void testNestedShorterPrefix() {
         PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder("{", "}}", false);
         Map<String, String> map = new LinkedHashMap<>();
@@ -130,20 +135,17 @@ public class PropertyPlaceholderTests extends ESTestCase {
         assertEquals("baz", propertyPlaceholder.replacePlaceholders("{bar{foo}}}}", placeholderResolver));
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testCircularReference() {
         PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder("${", "}", false);
         Map<String, String> map = new LinkedHashMap<>();
         map.put("foo", "${bar}");
         map.put("bar", "${foo}");
         PropertyPlaceholder.PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver(map, false, true);
-        try {
-            propertyPlaceholder.replacePlaceholders("${foo}", placeholderResolver);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("Circular placeholder reference 'foo' in property definitions"));
-        }
+        propertyPlaceholder.replacePlaceholders("${foo}", placeholderResolver);
     }
 
+    @Test
     public void testShouldRemoveMissing() {
         PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder("${", "}", false);
         Map<String, String> map = new LinkedHashMap<>();
diff --git a/core/src/test/java/org/elasticsearch/common/regex/RegexTests.java b/core/src/test/java/org/elasticsearch/common/regex/RegexTests.java
index ee0756f..18ff2c1 100644
--- a/core/src/test/java/org/elasticsearch/common/regex/RegexTests.java
+++ b/core/src/test/java/org/elasticsearch/common/regex/RegexTests.java
@@ -19,6 +19,7 @@
 package org.elasticsearch.common.regex;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.Random;
 import java.util.regex.Pattern;
@@ -26,6 +27,8 @@ import java.util.regex.Pattern;
 import static org.hamcrest.Matchers.equalTo;
 
 public class RegexTests extends ESTestCase {
+
+    @Test
     public void testFlags() {
         String[] supportedFlags = new String[]{"CASE_INSENSITIVE", "MULTILINE", "DOTALL", "UNICODE_CASE", "CANON_EQ", "UNIX_LINES",
                 "LITERAL", "COMMENTS", "UNICODE_CHAR_CLASS"};
@@ -52,6 +55,7 @@ public class RegexTests extends ESTestCase {
         }
     }
 
+    @Test(timeout = 1000)
     public void testDoubleWildcardMatch() {
         assertTrue(Regex.simpleMatch("ddd", "ddd"));
         assertTrue(Regex.simpleMatch("d*d*d", "dadd"));
@@ -63,4 +67,5 @@ public class RegexTests extends ESTestCase {
         assertTrue(Regex.simpleMatch("fff*******ddd", "fffabcddd"));
         assertFalse(Regex.simpleMatch("fff******ddd", "fffabcdd"));
     }
+
 }
\ No newline at end of file
diff --git a/core/src/test/java/org/elasticsearch/common/rounding/RoundingTests.java b/core/src/test/java/org/elasticsearch/common/rounding/RoundingTests.java
index 7819e4b..53998c5 100644
--- a/core/src/test/java/org/elasticsearch/common/rounding/RoundingTests.java
+++ b/core/src/test/java/org/elasticsearch/common/rounding/RoundingTests.java
@@ -20,15 +20,18 @@
 package org.elasticsearch.common.rounding;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.lessThanOrEqualTo;
 
 public class RoundingTests extends ESTestCase {
+
     /**
      * simple test case to illustrate how Rounding.Interval works on readable input
      */
+    @Test
     public void testInterval() {
         int interval = 10;
         Rounding.Interval rounding = new Rounding.Interval(interval);
@@ -41,6 +44,7 @@ public class RoundingTests extends ESTestCase {
         assertEquals(message, 0, r % interval);
     }
 
+    @Test
     public void testIntervalRandom() {
         final long interval = randomIntBetween(1, 100);
         Rounding.Interval rounding = new Rounding.Interval(interval);
@@ -61,6 +65,7 @@ public class RoundingTests extends ESTestCase {
      * offset shifts input value back before rounding (so here 6 - 7 -&gt; -1)
      * then shifts rounded Value back  (here -10 -&gt; -3)
      */
+    @Test
     public void testOffsetRounding() {
         final long interval = 10;
         final long offset = 7;
@@ -81,6 +86,7 @@ public class RoundingTests extends ESTestCase {
     /**
      * test OffsetRounding with an internal interval rounding on random inputs
      */
+    @Test
     public void testOffsetRoundingRandom() {
         for (int i = 0; i < 1000; ++i) {
             final long interval = randomIntBetween(1, 100);
diff --git a/core/src/test/java/org/elasticsearch/common/rounding/TimeZoneRoundingTests.java b/core/src/test/java/org/elasticsearch/common/rounding/TimeZoneRoundingTests.java
index e90691e..cc6f9cb 100644
--- a/core/src/test/java/org/elasticsearch/common/rounding/TimeZoneRoundingTests.java
+++ b/core/src/test/java/org/elasticsearch/common/rounding/TimeZoneRoundingTests.java
@@ -24,6 +24,7 @@ import org.elasticsearch.test.ESTestCase;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.format.ISODateTimeFormat;
+import org.junit.Test;
 
 import java.util.concurrent.TimeUnit;
 
@@ -34,8 +35,10 @@ import static org.hamcrest.Matchers.lessThanOrEqualTo;
 /**
  */
 public class TimeZoneRoundingTests extends ESTestCase {
+
     final static DateTimeZone JERUSALEM_TIMEZONE = DateTimeZone.forID("Asia/Jerusalem");
 
+    @Test
     public void testUTCTimeUnitRounding() {
         Rounding tzRounding = TimeZoneRounding.builder(DateTimeUnit.MONTH_OF_YEAR).build();
         assertThat(tzRounding.round(utc("2009-02-03T01:01:01")), equalTo(utc("2009-02-01T00:00:00.000Z")));
@@ -50,6 +53,7 @@ public class TimeZoneRoundingTests extends ESTestCase {
         assertThat(tzRounding.nextRoundingValue(utc("2012-01-08T00:00:00.000Z")), equalTo(utc("2012-01-15T00:00:00.000Z")));
     }
 
+    @Test
     public void testUTCIntervalRounding() {
         Rounding tzRounding = TimeZoneRounding.builder(TimeValue.timeValueHours(12)).build();
         assertThat(tzRounding.round(utc("2009-02-03T01:01:01")), equalTo(utc("2009-02-03T00:00:00.000Z")));
@@ -70,6 +74,7 @@ public class TimeZoneRoundingTests extends ESTestCase {
     /**
      * test TimeIntervalTimeZoneRounding, (interval &lt; 12h) with time zone shift
      */
+    @Test
     public void testTimeIntervalTimeZoneRounding() {
         Rounding tzRounding = TimeZoneRounding.builder(TimeValue.timeValueHours(6)).timeZone(DateTimeZone.forOffsetHours(-1)).build();
         assertThat(tzRounding.round(utc("2009-02-03T00:01:01")), equalTo(utc("2009-02-02T19:00:00.000Z")));
@@ -85,6 +90,7 @@ public class TimeZoneRoundingTests extends ESTestCase {
     /**
      * test DayIntervalTimeZoneRounding, (interval &gt;= 12h) with time zone shift
      */
+    @Test
     public void testDayIntervalTimeZoneRounding() {
         Rounding tzRounding = TimeZoneRounding.builder(TimeValue.timeValueHours(12)).timeZone(DateTimeZone.forOffsetHours(-8)).build();
         assertThat(tzRounding.round(utc("2009-02-03T00:01:01")), equalTo(utc("2009-02-02T20:00:00.000Z")));
@@ -97,6 +103,7 @@ public class TimeZoneRoundingTests extends ESTestCase {
         assertThat(tzRounding.nextRoundingValue(utc("2009-02-03T08:00:00.000Z")), equalTo(utc("2009-02-03T20:00:00.000Z")));
     }
 
+    @Test
     public void testDayTimeZoneRounding() {
         int timezoneOffset = -2;
         Rounding tzRounding = TimeZoneRounding.builder(DateTimeUnit.DAY_OF_MONTH).timeZone(DateTimeZone.forOffsetHours(timezoneOffset))
@@ -132,6 +139,7 @@ public class TimeZoneRoundingTests extends ESTestCase {
         assertThat(tzRounding.nextRoundingValue(utc("2009-02-03T02:00:00")), equalTo(utc("2009-02-04T02:00:00")));
     }
 
+    @Test
     public void testTimeTimeZoneRounding() {
         // hour unit
         Rounding tzRounding = TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).timeZone(DateTimeZone.forOffsetHours(-2)).build();
@@ -143,6 +151,7 @@ public class TimeZoneRoundingTests extends ESTestCase {
         assertThat(tzRounding.nextRoundingValue(utc("2009-02-03T01:00:00")), equalTo(utc("2009-02-03T02:00:00")));
     }
 
+    @Test
     public void testTimeUnitRoundingDST() {
         Rounding tzRounding;
         // testing savings to non savings switch
@@ -194,6 +203,7 @@ public class TimeZoneRoundingTests extends ESTestCase {
     /**
      * randomized test on TimeUnitRounding with random time units and time zone offsets
      */
+    @Test
     public void testTimeZoneRoundingRandom() {
         for (int i = 0; i < 1000; ++i) {
             DateTimeUnit timeUnit = randomTimeUnit();
@@ -213,6 +223,7 @@ public class TimeZoneRoundingTests extends ESTestCase {
     /**
      * randomized test on TimeIntervalRounding with random interval and time zone offsets
      */
+    @Test
     public void testIntervalRoundingRandom() {
         for (int i = 0; i < 1000; ++i) {
             // max random interval is a year, can be negative
@@ -234,6 +245,7 @@ public class TimeZoneRoundingTests extends ESTestCase {
     /**
      * special test for DST switch from #9491
      */
+    @Test
     public void testAmbiguousHoursAfterDSTSwitch() {
         Rounding tzRounding;
         tzRounding = TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).timeZone(JERUSALEM_TIMEZONE).build();
@@ -272,6 +284,7 @@ public class TimeZoneRoundingTests extends ESTestCase {
      * test for #10025, strict local to UTC conversion can cause joda exceptions
      * on DST start
      */
+    @Test
     public void testLenientConversionDST() {
         DateTimeZone tz = DateTimeZone.forID("America/Sao_Paulo");
         long start = time("2014-10-18T20:50:00.000", tz);
diff --git a/core/src/test/java/org/elasticsearch/common/settings/SettingsFilterTests.java b/core/src/test/java/org/elasticsearch/common/settings/SettingsFilterTests.java
index 5eb8ef8..a00c9af 100644
--- a/core/src/test/java/org/elasticsearch/common/settings/SettingsFilterTests.java
+++ b/core/src/test/java/org/elasticsearch/common/settings/SettingsFilterTests.java
@@ -20,15 +20,18 @@ package org.elasticsearch.common.settings;
 
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.json.JsonXContent;
-import org.elasticsearch.rest.RestRequest;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.rest.FakeRestRequest;
+import org.elasticsearch.rest.RestRequest;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 
 public class SettingsFilterTests extends ESTestCase {
+
+    @Test
     public void testAddingAndRemovingFilters() {
         SettingsFilter settingsFilter = new SettingsFilter(Settings.EMPTY);
         settingsFilter.addFilter("foo");
@@ -46,6 +49,7 @@ public class SettingsFilterTests extends ESTestCase {
         assertThat(settingsFilter.getPatterns(), equalTo(""));
     }
 
+    @Test
     public void testSettingsFiltering() throws IOException {
 
         testFiltering(Settings.builder()
diff --git a/core/src/test/java/org/elasticsearch/common/settings/SettingsTests.java b/core/src/test/java/org/elasticsearch/common/settings/SettingsTests.java
index 8cc861a..a17bb4f 100644
--- a/core/src/test/java/org/elasticsearch/common/settings/SettingsTests.java
+++ b/core/src/test/java/org/elasticsearch/common/settings/SettingsTests.java
@@ -19,9 +19,12 @@
 
 package org.elasticsearch.common.settings;
 
+import org.elasticsearch.common.settings.bar.BarTestClass;
+import org.elasticsearch.common.settings.foo.FooTestClass;
 import org.elasticsearch.common.settings.loader.YamlSettingsLoader;
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.List;
@@ -29,17 +32,13 @@ import java.util.Map;
 import java.util.Set;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.hamcrest.Matchers.allOf;
-import static org.hamcrest.Matchers.arrayContaining;
-import static org.hamcrest.Matchers.contains;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
 public class SettingsTests extends ESTestCase {
+
+    @Test
     public void testCamelCaseSupport() {
         Settings settings = settingsBuilder()
                 .put("test.camelCase", "bar")
@@ -48,6 +47,7 @@ public class SettingsTests extends ESTestCase {
         assertThat(settings.get("test.camel_case"), equalTo("bar"));
     }
 
+    @Test
     public void testLoadFromDelimitedString() {
         Settings settings = settingsBuilder()
                 .loadFromDelimitedString("key1=value1;key2=value2", ';')
@@ -66,6 +66,7 @@ public class SettingsTests extends ESTestCase {
         assertThat(settings.toDelimitedString(';'), equalTo("key1=value1;key2=value2;"));
     }
 
+    @Test
     public void testReplacePropertiesPlaceholderSystemProperty() {
         System.setProperty("sysProp1", "sysVal1");
         try {
@@ -91,6 +92,7 @@ public class SettingsTests extends ESTestCase {
         assertThat(settings.get("setting1"), is(nullValue()));
     }
 
+    @Test
     public void testReplacePropertiesPlaceholderIgnoreEnvUnset() {
         Settings settings = settingsBuilder()
                 .put("setting1", "${env.UNSET_ENV_VAR}")
@@ -99,6 +101,7 @@ public class SettingsTests extends ESTestCase {
         assertThat(settings.get("setting1"), is(nullValue()));
     }
 
+    @Test
     public void testReplacePropertiesPlaceholderIgnoresPrompt() {
         Settings settings = settingsBuilder()
                 .put("setting1", "${prompt.text}")
@@ -109,6 +112,7 @@ public class SettingsTests extends ESTestCase {
         assertThat(settings.get("setting2"), is("${prompt.secret}"));
     }
 
+    @Test
     public void testUnFlattenedSettings() {
         Settings settings = settingsBuilder()
                 .put("foo", "abc")
@@ -133,6 +137,7 @@ public class SettingsTests extends ESTestCase {
 
     }
 
+    @Test
     public void testFallbackToFlattenedSettings() {
         Settings settings = settingsBuilder()
                 .put("foo", "abc")
@@ -158,6 +163,7 @@ public class SettingsTests extends ESTestCase {
                 Matchers.<String, Object>hasEntry("foo.baz", "ghi")));
     }
 
+    @Test
     public void testGetAsSettings() {
         Settings settings = settingsBuilder()
                 .put("foo", "abc")
@@ -169,6 +175,7 @@ public class SettingsTests extends ESTestCase {
         assertThat(fooSettings.get("baz"), equalTo("ghi"));
     }
 
+    @Test
     public void testNames() {
         Settings settings = settingsBuilder()
                 .put("bar", "baz")
@@ -188,6 +195,7 @@ public class SettingsTests extends ESTestCase {
         assertTrue(names.contains("baz"));
     }
 
+    @Test
     public void testThatArraysAreOverriddenCorrectly() throws IOException {
         // overriding a single value with an array
         Settings settings = settingsBuilder()
@@ -292,7 +300,9 @@ public class SettingsTests extends ESTestCase {
         assertThat(settings.get("value"), is(nullValue()));
     }
 
+    @Test
     public void testPrefixNormalization() {
+
         Settings settings = settingsBuilder().normalizePrefix("foo.").build();
 
         assertThat(settings.names().size(), equalTo(0));
@@ -327,4 +337,6 @@ public class SettingsTests extends ESTestCase {
         assertThat(settings.getAsMap().size(), equalTo(1));
         assertThat(settings.get("foo.test"), equalTo("test"));
     }
+
+
 }
diff --git a/core/src/test/java/org/elasticsearch/common/settings/loader/JsonSettingsLoaderTests.java b/core/src/test/java/org/elasticsearch/common/settings/loader/JsonSettingsLoaderTests.java
index 18591d9..0f90b8c 100644
--- a/core/src/test/java/org/elasticsearch/common/settings/loader/JsonSettingsLoaderTests.java
+++ b/core/src/test/java/org/elasticsearch/common/settings/loader/JsonSettingsLoaderTests.java
@@ -23,6 +23,7 @@ import org.elasticsearch.ElasticsearchParseException;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.settings.SettingsException;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.equalTo;
@@ -31,6 +32,7 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class JsonSettingsLoaderTests extends ESTestCase {
+    @Test
     public void testSimpleJsonSettings() throws Exception {
         String json = "/org/elasticsearch/common/settings/loader/test-settings.json";
         Settings settings = settingsBuilder()
diff --git a/core/src/test/java/org/elasticsearch/common/settings/loader/YamlSettingsLoaderTests.java b/core/src/test/java/org/elasticsearch/common/settings/loader/YamlSettingsLoaderTests.java
index 4870304..60bf80a 100644
--- a/core/src/test/java/org/elasticsearch/common/settings/loader/YamlSettingsLoaderTests.java
+++ b/core/src/test/java/org/elasticsearch/common/settings/loader/YamlSettingsLoaderTests.java
@@ -23,15 +23,16 @@ import org.elasticsearch.ElasticsearchParseException;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.settings.SettingsException;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 
 /**
  *
  */
 public class YamlSettingsLoaderTests extends ESTestCase {
+    @Test
     public void testSimpleYamlSettings() throws Exception {
         String yaml = "/org/elasticsearch/common/settings/loader/test-settings.yml";
         Settings settings = settingsBuilder()
@@ -50,28 +51,20 @@ public class YamlSettingsLoaderTests extends ESTestCase {
         assertThat(settings.getAsArray("test1.test3")[1], equalTo("test3-2"));
     }
 
+    @Test(expected = SettingsException.class)
     public void testIndentation() {
         String yaml = "/org/elasticsearch/common/settings/loader/indentation-settings.yml";
-        try {
-            settingsBuilder()
-                .loadFromStream(yaml, getClass().getResourceAsStream(yaml))
-                .build();
-            fail("Expected SettingsException");
-        } catch(SettingsException e ) {
-            assertThat(e.getMessage(), containsString("Failed to load settings"));
-        }
+        settingsBuilder()
+            .loadFromStream(yaml, getClass().getResourceAsStream(yaml))
+            .build();
     }
 
+    @Test(expected = SettingsException.class)
     public void testIndentationWithExplicitDocumentStart() {
         String yaml = "/org/elasticsearch/common/settings/loader/indentation-with-explicit-document-start-settings.yml";
-        try {
-            settingsBuilder()
-                    .loadFromStream(yaml, getClass().getResourceAsStream(yaml))
-                    .build();
-            fail("Expected SettingsException");
-        } catch (SettingsException e) {
-            assertThat(e.getMessage(), containsString("Failed to load settings"));
-        }
+        settingsBuilder()
+                .loadFromStream(yaml, getClass().getResourceAsStream(yaml))
+                .build();
     }
 
     public void testDuplicateKeysThrowsException() {
diff --git a/core/src/test/java/org/elasticsearch/common/unit/ByteSizeUnitTests.java b/core/src/test/java/org/elasticsearch/common/unit/ByteSizeUnitTests.java
index 70ea1d1..5e8a55a 100644
--- a/core/src/test/java/org/elasticsearch/common/unit/ByteSizeUnitTests.java
+++ b/core/src/test/java/org/elasticsearch/common/unit/ByteSizeUnitTests.java
@@ -20,19 +20,17 @@
 package org.elasticsearch.common.unit;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.common.unit.ByteSizeUnit.BYTES;
-import static org.elasticsearch.common.unit.ByteSizeUnit.GB;
-import static org.elasticsearch.common.unit.ByteSizeUnit.KB;
-import static org.elasticsearch.common.unit.ByteSizeUnit.MB;
-import static org.elasticsearch.common.unit.ByteSizeUnit.PB;
-import static org.elasticsearch.common.unit.ByteSizeUnit.TB;
+import static org.elasticsearch.common.unit.ByteSizeUnit.*;
 import static org.hamcrest.Matchers.equalTo;
 
 /**
  *
  */
 public class ByteSizeUnitTests extends ESTestCase {
+
+    @Test
     public void testBytes() {
         assertThat(BYTES.toBytes(1), equalTo(1l));
         assertThat(BYTES.toKB(1024), equalTo(1l));
@@ -40,6 +38,7 @@ public class ByteSizeUnitTests extends ESTestCase {
         assertThat(BYTES.toGB(1024 * 1024 * 1024), equalTo(1l));
     }
 
+    @Test
     public void testKB() {
         assertThat(KB.toBytes(1), equalTo(1024l));
         assertThat(KB.toKB(1), equalTo(1l));
@@ -47,6 +46,7 @@ public class ByteSizeUnitTests extends ESTestCase {
         assertThat(KB.toGB(1024 * 1024), equalTo(1l));
     }
 
+    @Test
     public void testMB() {
         assertThat(MB.toBytes(1), equalTo(1024l * 1024));
         assertThat(MB.toKB(1), equalTo(1024l));
@@ -54,6 +54,7 @@ public class ByteSizeUnitTests extends ESTestCase {
         assertThat(MB.toGB(1024), equalTo(1l));
     }
 
+    @Test
     public void testGB() {
         assertThat(GB.toBytes(1), equalTo(1024l * 1024 * 1024));
         assertThat(GB.toKB(1), equalTo(1024l * 1024));
@@ -61,6 +62,7 @@ public class ByteSizeUnitTests extends ESTestCase {
         assertThat(GB.toGB(1), equalTo(1l));
     }
 
+    @Test
     public void testTB() {
         assertThat(TB.toBytes(1), equalTo(1024l * 1024 * 1024 * 1024));
         assertThat(TB.toKB(1), equalTo(1024l * 1024 * 1024));
@@ -69,6 +71,7 @@ public class ByteSizeUnitTests extends ESTestCase {
         assertThat(TB.toTB(1), equalTo(1l));
     }
 
+    @Test
     public void testPB() {
         assertThat(PB.toBytes(1), equalTo(1024l * 1024 * 1024 * 1024 * 1024));
         assertThat(PB.toKB(1), equalTo(1024l * 1024 * 1024 * 1024));
diff --git a/core/src/test/java/org/elasticsearch/common/unit/ByteSizeValueTests.java b/core/src/test/java/org/elasticsearch/common/unit/ByteSizeValueTests.java
index 56e6179..200d04a 100644
--- a/core/src/test/java/org/elasticsearch/common/unit/ByteSizeValueTests.java
+++ b/core/src/test/java/org/elasticsearch/common/unit/ByteSizeValueTests.java
@@ -22,8 +22,8 @@ package org.elasticsearch.common.unit;
 import org.elasticsearch.ElasticsearchParseException;
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.MatcherAssert;
+import org.junit.Test;
 
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 
@@ -31,18 +31,23 @@ import static org.hamcrest.Matchers.is;
  *
  */
 public class ByteSizeValueTests extends ESTestCase {
+
+    @Test
     public void testActualPeta() {
         MatcherAssert.assertThat(new ByteSizeValue(4, ByteSizeUnit.PB).bytes(), equalTo(4503599627370496l));
     }
 
+    @Test
     public void testActualTera() {
         MatcherAssert.assertThat(new ByteSizeValue(4, ByteSizeUnit.TB).bytes(), equalTo(4398046511104l));
     }
 
+    @Test
     public void testActual() {
         MatcherAssert.assertThat(new ByteSizeValue(4, ByteSizeUnit.GB).bytes(), equalTo(4294967296l));
     }
 
+    @Test
     public void testSimple() {
         assertThat(ByteSizeUnit.BYTES.toBytes(10), is(new ByteSizeValue(10, ByteSizeUnit.BYTES).bytes()));
         assertThat(ByteSizeUnit.KB.toKB(10), is(new ByteSizeValue(10, ByteSizeUnit.KB).kb()));
@@ -59,6 +64,7 @@ public class ByteSizeValueTests extends ESTestCase {
         assertThat(value1, equalTo(value2));
     }
 
+    @Test
     public void testToString() {
         assertThat("10b", is(new ByteSizeValue(10, ByteSizeUnit.BYTES).toString()));
         assertThat("1.5kb", is(new ByteSizeValue((long) (1024 * 1.5), ByteSizeUnit.BYTES).toString()));
@@ -69,6 +75,7 @@ public class ByteSizeValueTests extends ESTestCase {
         assertThat("1536pb", is(new ByteSizeValue((long) (1024 * 1.5), ByteSizeUnit.PB).toString()));
     }
 
+    @Test
     public void testParsing() {
         assertThat(ByteSizeValue.parseBytesSizeValue("42PB", "testParsing").toString(), is("42pb"));
         assertThat(ByteSizeValue.parseBytesSizeValue("42 PB", "testParsing").toString(), is("42pb"));
@@ -121,48 +128,28 @@ public class ByteSizeValueTests extends ESTestCase {
         assertThat(ByteSizeValue.parseBytesSizeValue("1 b", "testParsing").toString(), is("1b"));
     }
 
+    @Test(expected = ElasticsearchParseException.class)
     public void testFailOnMissingUnits() {
-        try {
-            ByteSizeValue.parseBytesSizeValue("23", "test");
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), containsString("failed to parse setting [test]"));
-        }
+        ByteSizeValue.parseBytesSizeValue("23", "test");
     }
 
+    @Test(expected = ElasticsearchParseException.class)
     public void testFailOnUnknownUnits() {
-        try {
-            ByteSizeValue.parseBytesSizeValue("23jw", "test");
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), containsString("failed to parse setting [test]"));
-        }
+        ByteSizeValue.parseBytesSizeValue("23jw", "test");
     }
 
+    @Test(expected = ElasticsearchParseException.class)
     public void testFailOnEmptyParsing() {
-        try {
-            assertThat(ByteSizeValue.parseBytesSizeValue("", "emptyParsing").toString(), is("23kb"));
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), containsString("failed to parse setting [emptyParsing]"));
-        }
+        assertThat(ByteSizeValue.parseBytesSizeValue("", "emptyParsing").toString(), is("23kb"));
     }
 
+    @Test(expected = ElasticsearchParseException.class)
     public void testFailOnEmptyNumberParsing() {
-        try {
-            assertThat(ByteSizeValue.parseBytesSizeValue("g", "emptyNumberParsing").toString(), is("23b"));
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), containsString("failed to parse [g]"));
-        }
+        assertThat(ByteSizeValue.parseBytesSizeValue("g", "emptyNumberParsing").toString(), is("23b"));
     }
 
+    @Test(expected = ElasticsearchParseException.class)
     public void testNoDotsAllowed() {
-        try {
-            ByteSizeValue.parseBytesSizeValue("42b.", null, "test");
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), containsString("failed to parse setting [test]"));
-        }
+        ByteSizeValue.parseBytesSizeValue("42b.", null, "test");
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/common/unit/DistanceUnitTests.java b/core/src/test/java/org/elasticsearch/common/unit/DistanceUnitTests.java
index 1010d2a..e29cd1e 100644
--- a/core/src/test/java/org/elasticsearch/common/unit/DistanceUnitTests.java
+++ b/core/src/test/java/org/elasticsearch/common/unit/DistanceUnitTests.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.common.unit;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.closeTo;
 import static org.hamcrest.Matchers.equalTo;
@@ -28,6 +29,8 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class DistanceUnitTests extends ESTestCase {
+
+    @Test
     public void testSimpleDistanceUnit() {
         assertThat(DistanceUnit.KILOMETERS.convert(10, DistanceUnit.MILES), closeTo(16.09344, 0.001));
         assertThat(DistanceUnit.MILES.convert(10, DistanceUnit.MILES), closeTo(10, 0.001));
@@ -38,7 +41,8 @@ public class DistanceUnitTests extends ESTestCase {
         assertThat(DistanceUnit.KILOMETERS.convert(1000,DistanceUnit.METERS), closeTo(1, 0.001));
         assertThat(DistanceUnit.METERS.convert(1, DistanceUnit.KILOMETERS), closeTo(1000, 0.001));
     }
-
+    
+    @Test
     public void testDistanceUnitParsing() {
         assertThat(DistanceUnit.Distance.parseDistance("50km").unit, equalTo(DistanceUnit.KILOMETERS));
         assertThat(DistanceUnit.Distance.parseDistance("500m").unit, equalTo(DistanceUnit.METERS));
@@ -49,7 +53,7 @@ public class DistanceUnitTests extends ESTestCase {
         assertThat(DistanceUnit.Distance.parseDistance("12in").unit, equalTo(DistanceUnit.INCH));
         assertThat(DistanceUnit.Distance.parseDistance("23mm").unit, equalTo(DistanceUnit.MILLIMETERS));
         assertThat(DistanceUnit.Distance.parseDistance("23cm").unit, equalTo(DistanceUnit.CENTIMETERS));
-
+        
         double testValue = 12345.678;
         for (DistanceUnit unit : DistanceUnit.values()) {
             assertThat("Unit can be parsed from '" + unit.toString() + "'", DistanceUnit.fromString(unit.toString()), equalTo(unit));
@@ -57,4 +61,5 @@ public class DistanceUnitTests extends ESTestCase {
             assertThat("Value can be parsed from '" + testValue + unit.toString() + "'", DistanceUnit.Distance.parseDistance(unit.toString(testValue)).value, equalTo(testValue));
         }
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/common/unit/FuzzinessTests.java b/core/src/test/java/org/elasticsearch/common/unit/FuzzinessTests.java
index 4c64e04..807b4a7 100644
--- a/core/src/test/java/org/elasticsearch/common/unit/FuzzinessTests.java
+++ b/core/src/test/java/org/elasticsearch/common/unit/FuzzinessTests.java
@@ -24,16 +24,17 @@ import org.elasticsearch.common.xcontent.XContent;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.XContentType;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
-import static org.hamcrest.CoreMatchers.anyOf;
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.hamcrest.CoreMatchers.sameInstance;
+import static org.hamcrest.CoreMatchers.*;
 import static org.hamcrest.number.IsCloseTo.closeTo;
 
 public class FuzzinessTests extends ESTestCase {
+
+    @Test
     public void testNumerics() {
         String[] options = new String[]{"1.0", "1", "1.000000"};
         assertThat(Fuzziness.build(randomFrom(options)).asByte(), equalTo((byte) 1));
@@ -44,6 +45,7 @@ public class FuzzinessTests extends ESTestCase {
         assertThat(Fuzziness.build(randomFrom(options)).asShort(), equalTo((short) 1));
     }
 
+    @Test
     public void testParseFromXContent() throws IOException {
         final int iters = randomIntBetween(10, 50);
         for (int i = 0; i < iters; i++) {
@@ -59,7 +61,7 @@ public class FuzzinessTests extends ESTestCase {
                 assertThat(parser.nextToken(), equalTo(XContentParser.Token.VALUE_NUMBER));
                 Fuzziness parse = Fuzziness.parse(parser);
                 assertThat(parse.asFloat(), equalTo(floatValue));
-                assertThat(parse.asDouble(), closeTo(floatValue, 0.000001));
+                assertThat(parse.asDouble(), closeTo((double) floatValue, 0.000001));
                 assertThat(parser.nextToken(), equalTo(XContentParser.Token.END_OBJECT));
             }
             {
@@ -138,7 +140,10 @@ public class FuzzinessTests extends ESTestCase {
 
     }
 
+    @Test
     public void testAuto() {
+        final int codePoints = randomIntBetween(0, 10);
+        String string = randomRealisticUnicodeOfCodepointLength(codePoints);
         assertThat(Fuzziness.AUTO.asByte(), equalTo((byte) 1));
         assertThat(Fuzziness.AUTO.asInt(), equalTo(1));
         assertThat(Fuzziness.AUTO.asFloat(), equalTo(1f));
@@ -149,6 +154,7 @@ public class FuzzinessTests extends ESTestCase {
 
     }
 
+    @Test
     public void testAsDistance() {
         final int iters = randomIntBetween(10, 50);
         for (int i = 0; i < iters; i++) {
@@ -158,6 +164,7 @@ public class FuzzinessTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSerialization() throws IOException {
         Fuzziness fuzziness = Fuzziness.AUTO;
         Fuzziness deserializedFuzziness = doSerializeRoundtrip(fuzziness);
@@ -168,6 +175,7 @@ public class FuzzinessTests extends ESTestCase {
         assertEquals(fuzziness, deserializedFuzziness);
     }
 
+    @Test
     public void testSerializationAuto() throws IOException {
         Fuzziness fuzziness = Fuzziness.AUTO;
         Fuzziness deserializedFuzziness = doSerializeRoundtrip(fuzziness);
diff --git a/core/src/test/java/org/elasticsearch/common/unit/RatioValueTests.java b/core/src/test/java/org/elasticsearch/common/unit/RatioValueTests.java
index e918a57..b9ac8e5 100644
--- a/core/src/test/java/org/elasticsearch/common/unit/RatioValueTests.java
+++ b/core/src/test/java/org/elasticsearch/common/unit/RatioValueTests.java
@@ -21,6 +21,7 @@ package org.elasticsearch.common.unit;
 
 import org.elasticsearch.ElasticsearchParseException;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.is;
 
@@ -28,6 +29,8 @@ import static org.hamcrest.Matchers.is;
  * Tests for the {@link RatioValue} class
  */
 public class RatioValueTests extends ESTestCase {
+
+    @Test
     public void testParsing() {
         assertThat(RatioValue.parseRatioValue("100%").toString(), is("100.0%"));
         assertThat(RatioValue.parseRatioValue("0%").toString(), is("0.0%"));
@@ -43,6 +46,7 @@ public class RatioValueTests extends ESTestCase {
         assertThat(RatioValue.parseRatioValue("0.001").toString(), is("0.1%"));
     }
 
+    @Test
     public void testNegativeCase() {
         testInvalidRatio("100.0001%");
         testInvalidRatio("-0.1%");
diff --git a/core/src/test/java/org/elasticsearch/common/unit/SizeValueTests.java b/core/src/test/java/org/elasticsearch/common/unit/SizeValueTests.java
index f2f85e0..c1595ac 100644
--- a/core/src/test/java/org/elasticsearch/common/unit/SizeValueTests.java
+++ b/core/src/test/java/org/elasticsearch/common/unit/SizeValueTests.java
@@ -19,14 +19,16 @@
 package org.elasticsearch.common.unit;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.is;
 
 /**
  *
  */
 public class SizeValueTests extends ESTestCase {
+
+    @Test
     public void testThatConversionWorks() {
         SizeValue sizeValue = new SizeValue(1000);
         assertThat(sizeValue.kilo(), is(1l));
@@ -53,18 +55,15 @@ public class SizeValueTests extends ESTestCase {
         assertThat(sizeValue.toString(), is("1000p"));
     }
 
+    @Test
     public void testThatParsingWorks() {
         assertThat(SizeValue.parseSizeValue("1k").toString(), is(new SizeValue(1000).toString()));
         assertThat(SizeValue.parseSizeValue("1p").toString(), is(new SizeValue(1, SizeUnit.PETA).toString()));
         assertThat(SizeValue.parseSizeValue("1G").toString(), is(new SizeValue(1, SizeUnit.GIGA).toString()));
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testThatNegativeValuesThrowException() {
-        try {
-            new SizeValue(-1);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("may not be negative"));
-        }
+        new SizeValue(-1);
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/common/unit/TimeValueTests.java b/core/src/test/java/org/elasticsearch/common/unit/TimeValueTests.java
index ec0e260..19738bc 100644
--- a/core/src/test/java/org/elasticsearch/common/unit/TimeValueTests.java
+++ b/core/src/test/java/org/elasticsearch/common/unit/TimeValueTests.java
@@ -24,11 +24,11 @@ import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.test.ESTestCase;
 import org.joda.time.PeriodType;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.concurrent.TimeUnit;
 
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.lessThan;
 
@@ -136,30 +136,18 @@ public class TimeValueTests extends ESTestCase {
         assertEqualityAfterSerialize(new TimeValue(1, TimeUnit.NANOSECONDS));
     }
 
+    @Test(expected = ElasticsearchParseException.class)
     public void testFailOnUnknownUnits() {
-        try {
-            TimeValue.parseTimeValue("23tw", null, "test");
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), containsString("Failed to parse"));
-        }
+        TimeValue.parseTimeValue("23tw", null, "test");
     }
 
+    @Test(expected = ElasticsearchParseException.class)
     public void testFailOnMissingUnits() {
-        try {
-            TimeValue.parseTimeValue("42", null, "test");
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), containsString("Failed to parse"));
-        }
+        TimeValue.parseTimeValue("42", null, "test");
     }
 
+    @Test(expected = ElasticsearchParseException.class)
     public void testNoDotsAllowed() {
-        try {
-            TimeValue.parseTimeValue("42ms.", null, "test");
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), containsString("Failed to parse"));
-        }
+        TimeValue.parseTimeValue("42ms.", null, "test");
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/common/util/ArrayUtilsTests.java b/core/src/test/java/org/elasticsearch/common/util/ArrayUtilsTests.java
index 172a064..735fda1 100644
--- a/core/src/test/java/org/elasticsearch/common/util/ArrayUtilsTests.java
+++ b/core/src/test/java/org/elasticsearch/common/util/ArrayUtilsTests.java
@@ -19,20 +19,28 @@
 
 package org.elasticsearch.common.util;
 
+import org.apache.lucene.util.ArrayUtil;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
+import java.lang.reflect.Array;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.BitSet;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 
 /**
  *
  */
 public class ArrayUtilsTests extends ESTestCase {
-    public void testBinarySearch() throws Exception {
+
+    @Test
+    public void binarySearch() throws Exception {
+
         for (int j = 0; j < 100; j++) {
+
             int index = Math.min(randomInt(0, 10), 9);
             double tolerance = Math.random() * 0.01;
             double lookForValue = randomFreq(0.9) ? -1 : Double.NaN; // sometimes we'll look for NaN
@@ -102,4 +110,5 @@ public class ArrayUtilsTests extends ESTestCase {
         }
         assertArrayEquals(sourceOfTruth.toArray(new String[0]), ArrayUtils.concat(first, second));
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/common/util/BytesRefHashTests.java b/core/src/test/java/org/elasticsearch/common/util/BytesRefHashTests.java
index df26f2d..91c7476 100644
--- a/core/src/test/java/org/elasticsearch/common/util/BytesRefHashTests.java
+++ b/core/src/test/java/org/elasticsearch/common/util/BytesRefHashTests.java
@@ -19,21 +19,17 @@
 
 package org.elasticsearch.common.util;
 
-import com.carrotsearch.hppc.ObjectLongHashMap;
 import com.carrotsearch.hppc.ObjectLongMap;
+import com.carrotsearch.hppc.ObjectLongHashMap;
 import com.carrotsearch.hppc.cursors.ObjectLongCursor;
-
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.BytesRefBuilder;
 import org.apache.lucene.util.TestUtil;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Map;
+import java.util.*;
 import java.util.Map.Entry;
-import java.util.Set;
 
 public class BytesRefHashTests extends ESSingleNodeTestCase {
 
@@ -96,6 +92,7 @@ public class BytesRefHashTests extends ESSingleNodeTestCase {
     /**
      * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.
      */
+    @Test
     public void testSize() {
         BytesRefBuilder ref = new BytesRefBuilder();
         int num = scaledRandomIntBetween(2, 20);
@@ -126,6 +123,7 @@ public class BytesRefHashTests extends ESSingleNodeTestCase {
      * {@link org.apache.lucene.util.BytesRefHash#get(int, BytesRef)}
      * .
      */
+    @Test
     public void testGet() {
         BytesRefBuilder ref = new BytesRefBuilder();
         BytesRef scratch = new BytesRef();
@@ -165,6 +163,7 @@ public class BytesRefHashTests extends ESSingleNodeTestCase {
      * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}
      * .
      */
+    @Test
     public void testAdd() {
         BytesRefBuilder ref = new BytesRefBuilder();
         BytesRef scratch = new BytesRef();
@@ -200,6 +199,7 @@ public class BytesRefHashTests extends ESSingleNodeTestCase {
         hash.close();
     }
 
+    @Test
     public void testFind() throws Exception {
         BytesRefBuilder ref = new BytesRefBuilder();
         BytesRef scratch = new BytesRef();
diff --git a/core/src/test/java/org/elasticsearch/common/util/CancellableThreadsTests.java b/core/src/test/java/org/elasticsearch/common/util/CancellableThreadsTests.java
index 5c6a932..2bdaea3 100644
--- a/core/src/test/java/org/elasticsearch/common/util/CancellableThreadsTests.java
+++ b/core/src/test/java/org/elasticsearch/common/util/CancellableThreadsTests.java
@@ -21,11 +21,14 @@ package org.elasticsearch.common.util;
 import org.elasticsearch.common.util.CancellableThreads.Interruptable;
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.concurrent.CountDownLatch;
 
 public class CancellableThreadsTests extends ESTestCase {
+
     public static class CustomException extends RuntimeException {
+
         public CustomException(String msg) {
             super(msg);
         }
@@ -50,6 +53,7 @@ public class CancellableThreadsTests extends ESTestCase {
     }
 
 
+    @Test
     public void testCancellableThreads() throws InterruptedException {
         Thread[] threads = new Thread[randomIntBetween(3, 10)];
         final TestPlan[] plans = new TestPlan[threads.length];
diff --git a/core/src/test/java/org/elasticsearch/common/util/CollectionUtilsTests.java b/core/src/test/java/org/elasticsearch/common/util/CollectionUtilsTests.java
index fe9ba6b..73611c8 100644
--- a/core/src/test/java/org/elasticsearch/common/util/CollectionUtilsTests.java
+++ b/core/src/test/java/org/elasticsearch/common/util/CollectionUtilsTests.java
@@ -24,26 +24,23 @@ import org.apache.lucene.util.BytesRefArray;
 import org.apache.lucene.util.BytesRefBuilder;
 import org.apache.lucene.util.Counter;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.SortedSet;
-import java.util.TreeSet;
+import java.util.*;
 
 import static org.elasticsearch.common.util.CollectionUtils.eagerPartition;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 
 public class CollectionUtilsTests extends ESTestCase {
-    public void testRotateEmpty() {
+
+    @Test
+    public void rotateEmpty() {
         assertTrue(CollectionUtils.rotate(Collections.emptyList(), randomInt()).isEmpty());
     }
 
-    public void testRotate() {
+    @Test
+    public void rotate() {
         final int iters = scaledRandomIntBetween(10, 100);
         for (int k = 0; k < iters; ++k) {
             final int size = randomIntBetween(1, 100);
@@ -68,6 +65,7 @@ public class CollectionUtilsTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSortAndDedupByteRefArray() {
         SortedSet<BytesRef> set = new TreeSet<>();
         final int numValues = scaledRandomIntBetween(0, 10000);
@@ -101,6 +99,7 @@ public class CollectionUtilsTests extends ESTestCase {
 
     }
 
+    @Test
     public void testSortByteRefArray() {
         List<BytesRef> values = new ArrayList<>();
         final int numValues = scaledRandomIntBetween(0, 10000);
diff --git a/core/src/test/java/org/elasticsearch/common/util/LongHashTests.java b/core/src/test/java/org/elasticsearch/common/util/LongHashTests.java
index aa21f32..09221b5 100644
--- a/core/src/test/java/org/elasticsearch/common/util/LongHashTests.java
+++ b/core/src/test/java/org/elasticsearch/common/util/LongHashTests.java
@@ -22,16 +22,13 @@ package org.elasticsearch.common.util;
 import com.carrotsearch.hppc.LongLongHashMap;
 import com.carrotsearch.hppc.LongLongMap;
 import com.carrotsearch.hppc.cursors.LongLongCursor;
-
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 
 public class LongHashTests extends ESSingleNodeTestCase {
+
     LongHash hash;
 
     private void newHash() {
@@ -89,6 +86,7 @@ public class LongHashTests extends ESSingleNodeTestCase {
         hash.close();
     }
 
+    @Test
     public void testSize() {
         int num = scaledRandomIntBetween(2, 20);
         for (int j = 0; j < num; j++) {
@@ -108,6 +106,7 @@ public class LongHashTests extends ESSingleNodeTestCase {
         hash.close();
     }
 
+    @Test
     public void testKey() {
         int num = scaledRandomIntBetween(2, 20);
         for (int j = 0; j < num; j++) {
@@ -139,6 +138,7 @@ public class LongHashTests extends ESSingleNodeTestCase {
         hash.close();
     }
 
+    @Test
     public void testAdd() {
         int num = scaledRandomIntBetween(2, 20);
         for (int j = 0; j < num; j++) {
@@ -167,6 +167,7 @@ public class LongHashTests extends ESSingleNodeTestCase {
         hash.close();
     }
 
+    @Test
     public void testFind() throws Exception {
         int num = scaledRandomIntBetween(2, 20);
         for (int j = 0; j < num; j++) {
@@ -205,4 +206,5 @@ public class LongHashTests extends ESSingleNodeTestCase {
             assertTrue("key: " + key + " count: " + count + " long: " + l, key < count);
         }
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/common/util/LongObjectHashMapTests.java b/core/src/test/java/org/elasticsearch/common/util/LongObjectHashMapTests.java
index 35fa7be..2036535 100644
--- a/core/src/test/java/org/elasticsearch/common/util/LongObjectHashMapTests.java
+++ b/core/src/test/java/org/elasticsearch/common/util/LongObjectHashMapTests.java
@@ -20,11 +20,13 @@
 package org.elasticsearch.common.util;
 
 import com.carrotsearch.hppc.LongObjectHashMap;
-
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 public class LongObjectHashMapTests extends ESSingleNodeTestCase {
-    public void testDuel() {
+
+    @Test
+    public void duel() {
         final LongObjectHashMap<Object> map1 = new LongObjectHashMap<>();
         final LongObjectPagedHashMap<Object> map2 = new LongObjectPagedHashMap<>(randomInt(42), 0.6f + randomFloat() * 0.39f, BigArraysTests.randombigArrays());
         final int maxKey = randomIntBetween(1, 10000);
diff --git a/core/src/test/java/org/elasticsearch/common/util/URIPatternTests.java b/core/src/test/java/org/elasticsearch/common/util/URIPatternTests.java
index 80e2524..4923a3e 100644
--- a/core/src/test/java/org/elasticsearch/common/util/URIPatternTests.java
+++ b/core/src/test/java/org/elasticsearch/common/util/URIPatternTests.java
@@ -19,10 +19,13 @@
 package org.elasticsearch.common.util;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.net.URI;
 
 public class URIPatternTests extends ESTestCase {
+
+    @Test
     public void testURIPattern() throws Exception {
         assertTrue(new URIPattern("http://test.local/").match(new URI("http://test.local/")));
         assertFalse(new URIPattern("http://test.local/somepath").match(new URI("http://test.local/")));
diff --git a/core/src/test/java/org/elasticsearch/common/util/concurrent/CountDownTests.java b/core/src/test/java/org/elasticsearch/common/util/concurrent/CountDownTests.java
index db10add..6a45bfb 100644
--- a/core/src/test/java/org/elasticsearch/common/util/concurrent/CountDownTests.java
+++ b/core/src/test/java/org/elasticsearch/common/util/concurrent/CountDownTests.java
@@ -21,6 +21,7 @@ package org.elasticsearch.common.util.concurrent;
 
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -30,6 +31,8 @@ import static org.hamcrest.Matchers.greaterThan;
 
 
 public class CountDownTests extends ESTestCase {
+
+    @Test
     public void testConcurrent() throws InterruptedException {
         final AtomicInteger count = new AtomicInteger(0);
         final CountDown countDown = new CountDown(scaledRandomIntBetween(10, 1000));
@@ -77,7 +80,8 @@ public class CountDownTests extends ESTestCase {
         assertThat(countDown.isCountedDown(), equalTo(true));
         assertThat(count.get(), Matchers.equalTo(1));
     }
-
+    
+    @Test
     public void testSingleThreaded() {
         int atLeast = scaledRandomIntBetween(10, 1000);
         final CountDown countDown = new CountDown(atLeast);
@@ -96,5 +100,6 @@ public class CountDownTests extends ESTestCase {
             }
             assertThat(atLeast, greaterThan(0));
         }
+
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/common/util/concurrent/PrioritizedExecutorsTests.java b/core/src/test/java/org/elasticsearch/common/util/concurrent/PrioritizedExecutorsTests.java
index 1d2d214..520b619 100644
--- a/core/src/test/java/org/elasticsearch/common/util/concurrent/PrioritizedExecutorsTests.java
+++ b/core/src/test/java/org/elasticsearch/common/util/concurrent/PrioritizedExecutorsTests.java
@@ -22,6 +22,7 @@ import org.elasticsearch.common.Priority;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.threadpool.ThreadPool;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -43,6 +44,8 @@ import static org.hamcrest.Matchers.is;
  *
  */
 public class PrioritizedExecutorsTests extends ESTestCase {
+
+    @Test
     public void testPriorityQueue() throws Exception {
         PriorityBlockingQueue<Priority> queue = new PriorityBlockingQueue<>();
         List<Priority> priorities = Arrays.asList(Priority.values());
@@ -62,6 +65,7 @@ public class PrioritizedExecutorsTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSubmitPrioritizedExecutorWithRunnables() throws Exception {
         ExecutorService executor = EsExecutors.newSinglePrioritizing(getTestName(), EsExecutors.daemonThreadFactory(getTestName()));
         List<Integer> results = new ArrayList<>(8);
@@ -91,6 +95,7 @@ public class PrioritizedExecutorsTests extends ESTestCase {
         terminate(executor);
     }
 
+    @Test
     public void testExecutePrioritizedExecutorWithRunnables() throws Exception {
         ExecutorService executor = EsExecutors.newSinglePrioritizing(getTestName(), EsExecutors.daemonThreadFactory(getTestName()));
         List<Integer> results = new ArrayList<>(8);
@@ -120,6 +125,7 @@ public class PrioritizedExecutorsTests extends ESTestCase {
         terminate(executor);
     }
 
+    @Test
     public void testSubmitPrioritizedExecutorWithCallables() throws Exception {
         ExecutorService executor = EsExecutors.newSinglePrioritizing(getTestName(), EsExecutors.daemonThreadFactory(getTestName()));
         List<Integer> results = new ArrayList<>(8);
@@ -149,6 +155,7 @@ public class PrioritizedExecutorsTests extends ESTestCase {
         terminate(executor);
     }
 
+    @Test
     public void testSubmitPrioritizedExecutorWithMixed() throws Exception {
         ExecutorService executor = EsExecutors.newSinglePrioritizing(getTestName(), EsExecutors.daemonThreadFactory(getTestName()));
         List<Integer> results = new ArrayList<>(8);
@@ -178,6 +185,7 @@ public class PrioritizedExecutorsTests extends ESTestCase {
         terminate(executor);
     }
 
+    @Test
     public void testTimeout() throws Exception {
         ScheduledExecutorService timer = Executors.newSingleThreadScheduledExecutor(EsExecutors.daemonThreadFactory(getTestName()));
         PrioritizedEsThreadPoolExecutor executor = EsExecutors.newSinglePrioritizing(getTestName(), EsExecutors.daemonThreadFactory(getTestName()));
@@ -239,6 +247,7 @@ public class PrioritizedExecutorsTests extends ESTestCase {
         assertTrue(terminate(timer, executor));
     }
 
+    @Test
     public void testTimeoutCleanup() throws Exception {
         ThreadPool threadPool = new ThreadPool("test");
         final ScheduledThreadPoolExecutor timer = (ScheduledThreadPoolExecutor) threadPool.scheduler();
diff --git a/core/src/test/java/org/elasticsearch/common/util/concurrent/RefCountedTests.java b/core/src/test/java/org/elasticsearch/common/util/concurrent/RefCountedTests.java
index 9338bec..9b01b78 100644
--- a/core/src/test/java/org/elasticsearch/common/util/concurrent/RefCountedTests.java
+++ b/core/src/test/java/org/elasticsearch/common/util/concurrent/RefCountedTests.java
@@ -21,6 +21,7 @@ package org.elasticsearch.common.util.concurrent;
 import org.apache.lucene.store.AlreadyClosedException;
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.concurrent.CopyOnWriteArrayList;
@@ -33,6 +34,8 @@ import static org.hamcrest.Matchers.is;
 /**
  */
 public class RefCountedTests extends ESTestCase {
+
+    @Test
     public void testRefCount() throws IOException {
         MyRefCounted counted = new MyRefCounted();
 
@@ -84,6 +87,7 @@ public class RefCountedTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testMultiThreaded() throws InterruptedException {
         final MyRefCounted counted = new MyRefCounted();
         Thread[] threads = new Thread[randomIntBetween(2, 5)];
diff --git a/core/src/test/java/org/elasticsearch/common/util/iterable/IterablesTests.java b/core/src/test/java/org/elasticsearch/common/util/iterable/IterablesTests.java
index 5ce8169..76fc51d 100644
--- a/core/src/test/java/org/elasticsearch/common/util/iterable/IterablesTests.java
+++ b/core/src/test/java/org/elasticsearch/common/util/iterable/IterablesTests.java
@@ -20,12 +20,17 @@
 package org.elasticsearch.common.util.iterable;
 
 import org.elasticsearch.test.ESTestCase;
+import org.hamcrest.Matchers;
 
 import java.util.Arrays;
 import java.util.Iterator;
+import java.util.List;
 import java.util.NoSuchElementException;
 
+import static org.hamcrest.Matchers.contains;
+import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.object.HasToString.hasToString;
+import static org.junit.Assert.*;
 
 public class IterablesTests extends ESTestCase {
     public void testGetOverList() {
diff --git a/core/src/test/java/org/elasticsearch/common/xcontent/XContentFactoryTests.java b/core/src/test/java/org/elasticsearch/common/xcontent/XContentFactoryTests.java
index fb12c75..0f80350 100644
--- a/core/src/test/java/org/elasticsearch/common/xcontent/XContentFactoryTests.java
+++ b/core/src/test/java/org/elasticsearch/common/xcontent/XContentFactoryTests.java
@@ -21,10 +21,10 @@ package org.elasticsearch.common.xcontent;
 
 import com.fasterxml.jackson.dataformat.cbor.CBORConstants;
 import com.fasterxml.jackson.dataformat.smile.SmileConstants;
-
 import org.elasticsearch.common.bytes.BytesArray;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
@@ -35,18 +35,24 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class XContentFactoryTests extends ESTestCase {
+
+
+    @Test
     public void testGuessJson() throws IOException {
         testGuessType(XContentType.JSON);
     }
 
+    @Test
     public void testGuessSmile() throws IOException {
         testGuessType(XContentType.SMILE);
     }
 
+    @Test
     public void testGuessYaml() throws IOException {
         testGuessType(XContentType.YAML);
     }
 
+    @Test
     public void testGuessCbor() throws IOException {
         testGuessType(XContentType.CBOR);
     }
diff --git a/core/src/test/java/org/elasticsearch/common/xcontent/builder/BuilderRawFieldTests.java b/core/src/test/java/org/elasticsearch/common/xcontent/builder/BuilderRawFieldTests.java
index 9bb26b6..9cfedcc 100644
--- a/core/src/test/java/org/elasticsearch/common/xcontent/builder/BuilderRawFieldTests.java
+++ b/core/src/test/java/org/elasticsearch/common/xcontent/builder/BuilderRawFieldTests.java
@@ -25,27 +25,34 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.XContentType;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 
 /**
  *
  */
 public class BuilderRawFieldTests extends ESTestCase {
+
+    @Test
     public void testJsonRawField() throws IOException {
         testRawField(XContentType.JSON);
     }
 
+    @Test
     public void testSmileRawField() throws IOException {
         testRawField(XContentType.SMILE);
     }
 
+    @Test
     public void testYamlRawField() throws IOException {
         testRawField(XContentType.YAML);
     }
 
+    @Test
     public void testCborRawField() throws IOException {
         testRawField(XContentType.CBOR);
     }
diff --git a/core/src/test/java/org/elasticsearch/common/xcontent/builder/XContentBuilderTests.java b/core/src/test/java/org/elasticsearch/common/xcontent/builder/XContentBuilderTests.java
index d6cec17..4ce1a7c 100644
--- a/core/src/test/java/org/elasticsearch/common/xcontent/builder/XContentBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/common/xcontent/builder/XContentBuilderTests.java
@@ -31,6 +31,7 @@ import org.elasticsearch.common.xcontent.XContentGenerator;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.XContentType;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.nio.file.Path;
@@ -53,6 +54,8 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class XContentBuilderTests extends ESTestCase {
+
+    @Test
     public void testPrettyWithLfAtEnd() throws Exception {
         FastCharArrayWriter writer = new FastCharArrayWriter();
         XContentGenerator generator = XContentFactory.xContent(XContentType.JSON).createGenerator(writer);
@@ -71,7 +74,8 @@ public class XContentBuilderTests extends ESTestCase {
         assertThat(writer.unsafeCharArray()[writer.size() - 1], equalTo('\n'));
     }
 
-    public void testReuseJsonGenerator() throws Exception {
+    @Test
+    public void verifyReuseJsonGenerator() throws Exception {
         FastCharArrayWriter writer = new FastCharArrayWriter();
         XContentGenerator generator = XContentFactory.xContent(XContentType.JSON).createGenerator(writer);
         generator.writeStartObject();
@@ -91,6 +95,7 @@ public class XContentBuilderTests extends ESTestCase {
         assertThat(writer.toStringTrim(), equalTo("{\"test\":\"value\"}"));
     }
 
+    @Test
     public void testRaw() throws IOException {
         {
             XContentBuilder xContentBuilder = XContentFactory.contentBuilder(XContentType.JSON);
@@ -136,6 +141,7 @@ public class XContentBuilderTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSimpleGenerator() throws Exception {
         XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON);
         builder.startObject().field("test", "value").endObject();
@@ -146,12 +152,14 @@ public class XContentBuilderTests extends ESTestCase {
         assertThat(builder.string(), equalTo("{\"test\":\"value\"}"));
     }
 
+    @Test
     public void testOverloadedList() throws Exception {
         XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON);
         builder.startObject().field("test", Arrays.asList("1", "2")).endObject();
         assertThat(builder.string(), equalTo("{\"test\":[\"1\",\"2\"]}"));
     }
 
+    @Test
     public void testWritingBinaryToStream() throws Exception {
         BytesStreamOutput bos = new BytesStreamOutput();
 
@@ -169,6 +177,7 @@ public class XContentBuilderTests extends ESTestCase {
         System.out.println("DATA: " + sData);
     }
 
+    @Test
     public void testFieldCaseConversion() throws Exception {
         XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON).fieldCaseConversion(CAMELCASE);
         builder.startObject().field("test_name", "value").endObject();
@@ -179,12 +188,14 @@ public class XContentBuilderTests extends ESTestCase {
         assertThat(builder.string(), equalTo("{\"test_name\":\"value\"}"));
     }
 
+    @Test
     public void testByteConversion() throws Exception {
         XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON);
         builder.startObject().field("test_name", (Byte)(byte)120).endObject();
         assertThat(builder.bytes().toUtf8(), equalTo("{\"test_name\":120}"));
     }
 
+    @Test
     public void testDateTypesConversion() throws Exception {
         Date date = new Date();
         String expectedDate = XContentBuilder.defaultDatePrinter.print(date.getTime());
@@ -211,6 +222,7 @@ public class XContentBuilderTests extends ESTestCase {
         assertThat(builder.string(), equalTo("{\"calendar\":\"" + expectedCalendar + "\"}"));
     }
 
+    @Test
     public void testCopyCurrentStructure() throws Exception {
         XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON);
         builder.startObject()
@@ -265,16 +277,19 @@ public class XContentBuilderTests extends ESTestCase {
         assertThat(i, equalTo(terms.size()));
     }
 
+    @Test
     public void testHandlingOfPath() throws IOException {
         Path path = PathUtils.get("path");
         checkPathSerialization(path);
     }
 
+    @Test
     public void testHandlingOfPath_relative() throws IOException {
         Path path = PathUtils.get("..", "..", "path");
         checkPathSerialization(path);
     }
 
+    @Test
     public void testHandlingOfPath_absolute() throws IOException {
         Path path = createTempDir().toAbsolutePath();
         checkPathSerialization(path);
@@ -290,6 +305,7 @@ public class XContentBuilderTests extends ESTestCase {
         assertThat(pathBuilder.string(), equalTo(stringBuilder.string()));
     }
 
+    @Test
     public void testHandlingOfPath_XContentBuilderStringName() throws IOException {
         Path path = PathUtils.get("path");
         XContentBuilderString name = new XContentBuilderString("file");
@@ -303,6 +319,7 @@ public class XContentBuilderTests extends ESTestCase {
         assertThat(pathBuilder.string(), equalTo(stringBuilder.string()));
     }
 
+    @Test
     public void testHandlingOfCollectionOfPaths() throws IOException {
         Path path = PathUtils.get("path");
 
diff --git a/core/src/test/java/org/elasticsearch/common/xcontent/cbor/CborXContentParserTests.java b/core/src/test/java/org/elasticsearch/common/xcontent/cbor/CborXContentParserTests.java
index 173a58c..20e4d41 100644
--- a/core/src/test/java/org/elasticsearch/common/xcontent/cbor/CborXContentParserTests.java
+++ b/core/src/test/java/org/elasticsearch/common/xcontent/cbor/CborXContentParserTests.java
@@ -24,10 +24,13 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.XContentType;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
 public class CborXContentParserTests extends ESTestCase {
+
+    @Test
     public void testEmptyValue() throws IOException {
         BytesReference ref = XContentFactory.cborBuilder().startObject().field("field", "").endObject().bytes();
 
diff --git a/core/src/test/java/org/elasticsearch/common/xcontent/cbor/JsonVsCborTests.java b/core/src/test/java/org/elasticsearch/common/xcontent/cbor/JsonVsCborTests.java
index bf2dd44..903914b 100644
--- a/core/src/test/java/org/elasticsearch/common/xcontent/cbor/JsonVsCborTests.java
+++ b/core/src/test/java/org/elasticsearch/common/xcontent/cbor/JsonVsCborTests.java
@@ -25,6 +25,7 @@ import org.elasticsearch.common.xcontent.XContentGenerator;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.XContentType;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -35,7 +36,9 @@ import static org.hamcrest.Matchers.nullValue;
  *
  */
 public class JsonVsCborTests extends ESTestCase {
-    public void testCompareParsingTokens() throws IOException {
+
+    @Test
+    public void compareParsingTokens() throws IOException {
         BytesStreamOutput xsonOs = new BytesStreamOutput();
         XContentGenerator xsonGen = XContentFactory.xContent(XContentType.CBOR).createGenerator(xsonOs);
 
diff --git a/core/src/test/java/org/elasticsearch/common/xcontent/smile/JsonVsSmileTests.java b/core/src/test/java/org/elasticsearch/common/xcontent/smile/JsonVsSmileTests.java
index 9e686fe..e1a89ff 100644
--- a/core/src/test/java/org/elasticsearch/common/xcontent/smile/JsonVsSmileTests.java
+++ b/core/src/test/java/org/elasticsearch/common/xcontent/smile/JsonVsSmileTests.java
@@ -25,9 +25,11 @@ import org.elasticsearch.common.xcontent.XContentGenerator;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.XContentType;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.nullValue;
 
@@ -35,7 +37,18 @@ import static org.hamcrest.Matchers.nullValue;
  *
  */
 public class JsonVsSmileTests extends ESTestCase {
-    public void testCompareParsingTokens() throws IOException {
+
+//    @Test public void testBinarySmileField() throws Exception {
+//        JsonGenerator gen = new SmileFactory().createJsonGenerator(new ByteArrayOutputStream());
+////        JsonGenerator gen = new JsonFactory().createJsonGenerator(new ByteArrayOutputStream(), JsonEncoding.UTF8);
+//        gen.writeStartObject();
+//        gen.writeFieldName("field1");
+//        gen.writeBinary(new byte[]{1, 2, 3});
+//        gen.writeEndObject();
+//    }
+
+    @Test
+    public void compareParsingTokens() throws IOException {
         BytesStreamOutput xsonOs = new BytesStreamOutput();
         XContentGenerator xsonGen = XContentFactory.xContent(XContentType.SMILE).createGenerator(xsonOs);
 
diff --git a/core/src/test/java/org/elasticsearch/common/xcontent/support/XContentHelperTests.java b/core/src/test/java/org/elasticsearch/common/xcontent/support/XContentHelperTests.java
index a8091fc..067c553 100644
--- a/core/src/test/java/org/elasticsearch/common/xcontent/support/XContentHelperTests.java
+++ b/core/src/test/java/org/elasticsearch/common/xcontent/support/XContentHelperTests.java
@@ -22,6 +22,7 @@ package org.elasticsearch.common.xcontent.support;
 import org.elasticsearch.common.xcontent.XContentHelper;
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.HashMap;
@@ -50,7 +51,9 @@ public class XContentHelperTests extends ESTestCase {
         return Arrays.asList(values);
     }
 
+    @Test
     public void testMergingListValuesAreMapsOfOne() {
+
         Map<String, Object> defaults = getMap("test", getList(getNamedMap("name1", "t1", "1"), getNamedMap("name2", "t2", "2")));
         Map<String, Object> content = getMap("test", getList(getNamedMap("name2", "t3", "3"), getNamedMap("name4", "t4", "4")));
         Map<String, Object> expected = getMap("test",
diff --git a/core/src/test/java/org/elasticsearch/common/xcontent/support/XContentMapValuesTests.java b/core/src/test/java/org/elasticsearch/common/xcontent/support/XContentMapValuesTests.java
index 1c4ff98..abce42b 100644
--- a/core/src/test/java/org/elasticsearch/common/xcontent/support/XContentMapValuesTests.java
+++ b/core/src/test/java/org/elasticsearch/common/xcontent/support/XContentMapValuesTests.java
@@ -28,6 +28,7 @@ import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.XContentType;
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Arrays;
@@ -47,6 +48,8 @@ import static org.hamcrest.core.IsEqual.equalTo;
 /**
  */
 public class XContentMapValuesTests extends ESTestCase {
+
+    @Test
     public void testFilter() throws Exception {
         XContentBuilder builder = XContentFactory.jsonBuilder().startObject()
                 .field("test1", "value1")
@@ -103,6 +106,7 @@ public class XContentMapValuesTests extends ESTestCase {
     }
 
     @SuppressWarnings({"unchecked"})
+    @Test
     public void testExtractValue() throws Exception {
         XContentBuilder builder = XContentFactory.jsonBuilder().startObject()
                 .field("test", "value")
@@ -192,6 +196,8 @@ public class XContentMapValuesTests extends ESTestCase {
         assertThat(XContentMapValues.extractValue("path1.xxx.path2.yyy.test", map).toString(), equalTo("value"));
     }
 
+    @SuppressWarnings({"unchecked"})
+    @Test
     public void testExtractRawValue() throws Exception {
         XContentBuilder builder = XContentFactory.jsonBuilder().startObject()
                 .field("test", "value")
@@ -231,7 +237,8 @@ public class XContentMapValuesTests extends ESTestCase {
         assertThat(XContentMapValues.extractRawValues("path1.xxx.path2.yyy.test", map).get(0).toString(), equalTo("value"));
     }
 
-    public void testPrefixedNamesFilteringTest() {
+    @Test
+    public void prefixedNamesFilteringTest() {
         Map<String, Object> map = new HashMap<>();
         map.put("obj", "value");
         map.put("obj_name", "value_name");
@@ -241,8 +248,9 @@ public class XContentMapValuesTests extends ESTestCase {
     }
 
 
+    @Test
     @SuppressWarnings("unchecked")
-    public void testNestedFiltering() {
+    public void nestedFilteringTest() {
         Map<String, Object> map = new HashMap<>();
         map.put("field", "value");
         map.put("array",
@@ -287,7 +295,8 @@ public class XContentMapValuesTests extends ESTestCase {
     }
 
     @SuppressWarnings("unchecked")
-    public void testCompleteObjectFiltering() {
+    @Test
+    public void completeObjectFilteringTest() {
         Map<String, Object> map = new HashMap<>();
         map.put("field", "value");
         map.put("obj",
@@ -331,7 +340,8 @@ public class XContentMapValuesTests extends ESTestCase {
     }
 
     @SuppressWarnings("unchecked")
-    public void testFilterIncludesUsingStarPrefix() {
+    @Test
+    public void filterIncludesUsingStarPrefix() {
         Map<String, Object> map = new HashMap<>();
         map.put("field", "value");
         map.put("obj",
@@ -372,7 +382,8 @@ public class XContentMapValuesTests extends ESTestCase {
 
     }
 
-    public void testFilterWithEmptyIncludesExcludes() {
+    @Test
+    public void filterWithEmptyIncludesExcludes() {
         Map<String, Object> map = new HashMap<>();
         map.put("field", "value");
         Map<String, Object> filteredMap = XContentMapValues.filter(map, Strings.EMPTY_ARRAY, Strings.EMPTY_ARRAY);
@@ -381,6 +392,8 @@ public class XContentMapValuesTests extends ESTestCase {
 
     }
 
+    @SuppressWarnings({"unchecked"})
+    @Test
     public void testThatFilterIncludesEmptyObjectWhenUsingIncludes() throws Exception {
         XContentBuilder builder = XContentFactory.jsonBuilder().startObject()
                 .startObject("obj")
@@ -393,6 +406,7 @@ public class XContentMapValuesTests extends ESTestCase {
         assertThat(mapTuple.v2(), equalTo(filteredSource));
     }
 
+    @Test
     public void testThatFilterIncludesEmptyObjectWhenUsingExcludes() throws Exception {
         XContentBuilder builder = XContentFactory.jsonBuilder().startObject()
                 .startObject("obj")
@@ -405,6 +419,7 @@ public class XContentMapValuesTests extends ESTestCase {
         assertThat(mapTuple.v2(), equalTo(filteredSource));
     }
 
+    @Test
     public void testNotOmittingObjectsWithExcludedProperties() throws Exception {
         XContentBuilder builder = XContentFactory.jsonBuilder().startObject()
                 .startObject("obj")
@@ -421,6 +436,7 @@ public class XContentMapValuesTests extends ESTestCase {
     }
 
     @SuppressWarnings({"unchecked"})
+    @Test
     public void testNotOmittingObjectWithNestedExcludedObject() throws Exception {
         XContentBuilder builder = XContentFactory.jsonBuilder().startObject()
                 .startObject("obj1")
@@ -454,6 +470,7 @@ public class XContentMapValuesTests extends ESTestCase {
     }
 
     @SuppressWarnings({"unchecked"})
+    @Test
     public void testIncludingObjectWithNestedIncludedObject() throws Exception {
         XContentBuilder builder = XContentFactory.jsonBuilder().startObject()
                 .startObject("obj1")
@@ -551,4 +568,5 @@ public class XContentMapValuesTests extends ESTestCase {
                     parser.list());
         }
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/common/xcontent/support/filtering/AbstractFilteringJsonGeneratorTestCase.java b/core/src/test/java/org/elasticsearch/common/xcontent/support/filtering/AbstractFilteringJsonGeneratorTestCase.java
index 8073468..9669b09 100644
--- a/core/src/test/java/org/elasticsearch/common/xcontent/support/filtering/AbstractFilteringJsonGeneratorTestCase.java
+++ b/core/src/test/java/org/elasticsearch/common/xcontent/support/filtering/AbstractFilteringJsonGeneratorTestCase.java
@@ -20,12 +20,9 @@
 package org.elasticsearch.common.xcontent.support.filtering;
 
 import org.elasticsearch.common.bytes.BytesReference;
-import org.elasticsearch.common.xcontent.XContent;
-import org.elasticsearch.common.xcontent.XContentBuilder;
-import org.elasticsearch.common.xcontent.XContentFactory;
-import org.elasticsearch.common.xcontent.XContentParser;
-import org.elasticsearch.common.xcontent.XContentType;
+import org.elasticsearch.common.xcontent.*;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
@@ -173,6 +170,7 @@ public abstract class AbstractFilteringJsonGeneratorTestCase extends ESTestCase
         return sample(newXContentBuilder(filters));
     }
 
+    @Test
     public void testNoFiltering() throws Exception {
         XContentBuilder expected = sample();
 
@@ -181,18 +179,23 @@ public abstract class AbstractFilteringJsonGeneratorTestCase extends ESTestCase
         assertXContentBuilder(expected, sample("**"));
     }
 
+    @Test
     public void testNoMatch() throws Exception {
         XContentBuilder expected = newXContentBuilder().startObject().endObject();
 
         assertXContentBuilder(expected, sample("xyz"));
     }
 
+    @Test
     public void testSimpleField() throws Exception {
-        XContentBuilder expected = newXContentBuilder().startObject().field("title", "My awesome book").endObject();
+        XContentBuilder expected = newXContentBuilder().startObject()
+                                                            .field("title", "My awesome book")
+                                                        .endObject();
 
         assertXContentBuilder(expected, sample("title"));
     }
 
+    @Test
     public void testSimpleFieldWithWildcard() throws Exception {
         XContentBuilder expected = newXContentBuilder().startObject()
                                                             .field("price", 27.99)
@@ -249,6 +252,7 @@ public abstract class AbstractFilteringJsonGeneratorTestCase extends ESTestCase
         assertXContentBuilder(expected, sample("pr*"));
     }
 
+    @Test
     public void testMultipleFields() throws Exception {
         XContentBuilder expected = newXContentBuilder().startObject()
                                                             .field("title", "My awesome book")
@@ -258,6 +262,7 @@ public abstract class AbstractFilteringJsonGeneratorTestCase extends ESTestCase
         assertXContentBuilder(expected, sample("title", "pages"));
     }
 
+    @Test
     public void testSimpleArray() throws Exception {
         XContentBuilder expected = newXContentBuilder().startObject()
                                                         .startArray("tags")
@@ -269,6 +274,7 @@ public abstract class AbstractFilteringJsonGeneratorTestCase extends ESTestCase
         assertXContentBuilder(expected, sample("tags"));
     }
 
+    @Test
     public void testSimpleArrayOfObjects() throws Exception {
         XContentBuilder expected = newXContentBuilder().startObject()
                                                         .startArray("authors")
@@ -290,6 +296,7 @@ public abstract class AbstractFilteringJsonGeneratorTestCase extends ESTestCase
         assertXContentBuilder(expected, sample("authors.*name"));
     }
 
+    @Test
     public void testSimpleArrayOfObjectsProperty() throws Exception {
         XContentBuilder expected = newXContentBuilder().startObject()
                                                             .startArray("authors")
@@ -306,6 +313,7 @@ public abstract class AbstractFilteringJsonGeneratorTestCase extends ESTestCase
         assertXContentBuilder(expected, sample("authors.l*"));
     }
 
+    @Test
     public void testRecurseField1() throws Exception {
         XContentBuilder expected = newXContentBuilder().startObject()
                                                             .startArray("authors")
@@ -358,6 +366,7 @@ public abstract class AbstractFilteringJsonGeneratorTestCase extends ESTestCase
         assertXContentBuilder(expected, sample("**.name"));
     }
 
+    @Test
     public void testRecurseField2() throws Exception {
         XContentBuilder expected = newXContentBuilder().startObject()
                                                             .startObject("properties")
@@ -402,6 +411,7 @@ public abstract class AbstractFilteringJsonGeneratorTestCase extends ESTestCase
         assertXContentBuilder(expected, sample("properties.**.name"));
     }
 
+    @Test
     public void testRecurseField3() throws Exception {
         XContentBuilder expected = newXContentBuilder().startObject()
                                                         .startObject("properties")
@@ -431,6 +441,7 @@ public abstract class AbstractFilteringJsonGeneratorTestCase extends ESTestCase
         assertXContentBuilder(expected, sample("properties.*.en.**.name"));
     }
 
+    @Test
     public void testRecurseField4() throws Exception {
         XContentBuilder expected = newXContentBuilder().startObject()
                                                             .startObject("properties")
@@ -462,6 +473,7 @@ public abstract class AbstractFilteringJsonGeneratorTestCase extends ESTestCase
         assertXContentBuilder(expected, sample("properties.**.distributors.name"));
     }
 
+    @Test
     public void testRawField() throws Exception {
 
         XContentBuilder expectedRawField = newXContentBuilder().startObject().field("foo", 0).startObject("raw").field("content", "hello world!").endObject().endObject();
@@ -486,6 +498,7 @@ public abstract class AbstractFilteringJsonGeneratorTestCase extends ESTestCase
         assertXContentBuilder(expectedRawFieldNotFiltered, newXContentBuilder("r*").startObject().field("foo", 0).rawField("raw", new ByteArrayInputStream(raw.toBytes())).endObject());
     }
 
+    @Test
     public void testArrays() throws Exception {
         // Test: Array of values (no filtering)
         XContentBuilder expected = newXContentBuilder().startObject().startArray("tags").value("lorem").value("ipsum").value("dolor").endArray().endObject();
@@ -506,5 +519,6 @@ public abstract class AbstractFilteringJsonGeneratorTestCase extends ESTestCase
         // Test: Array of objects (with partial filtering)
         expected = newXContentBuilder().startObject().startArray("tags").startObject().field("firstname", "ipsum").endObject().endArray().endObject();
         assertXContentBuilder(expected, newXContentBuilder("t*.firstname").startObject().startArray("tags").startObject().field("lastname", "lorem").endObject().startObject().field("firstname", "ipsum").endObject().endArray().endObject());
+
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/consistencylevel/WriteConsistencyLevelIT.java b/core/src/test/java/org/elasticsearch/consistencylevel/WriteConsistencyLevelIT.java
index bb08cd0..50637cb 100644
--- a/core/src/test/java/org/elasticsearch/consistencylevel/WriteConsistencyLevelIT.java
+++ b/core/src/test/java/org/elasticsearch/consistencylevel/WriteConsistencyLevelIT.java
@@ -27,6 +27,7 @@ import org.elasticsearch.common.Priority;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.rest.RestStatus;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.unit.TimeValue.timeValueMillis;
 import static org.elasticsearch.common.unit.TimeValue.timeValueSeconds;
@@ -36,6 +37,9 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class WriteConsistencyLevelIT extends ESIntegTestCase {
+
+
+    @Test
     public void testWriteConsistencyLevelReplication2() throws Exception {
         prepareCreate("test", 1, Settings.settingsBuilder().put("index.number_of_shards", 1).put("index.number_of_replicas", 2)).execute().actionGet();
 
@@ -64,7 +68,7 @@ public class WriteConsistencyLevelIT extends ESIntegTestCase {
         assertThat(clusterHealth.isTimedOut(), equalTo(false));
         assertThat(clusterHealth.getStatus(), equalTo(ClusterHealthStatus.YELLOW));
 
-        // this should work, since we now have
+        // this should work, since we now have 
         client().prepareIndex("test", "type1", "1").setSource(source("1", "test"))
                 .setConsistencyLevel(WriteConsistencyLevel.QUORUM)
                 .setTimeout(timeValueSeconds(1)).execute().actionGet();
diff --git a/core/src/test/java/org/elasticsearch/deps/jackson/JacksonLocationTests.java b/core/src/test/java/org/elasticsearch/deps/jackson/JacksonLocationTests.java
index 8e44c7a..92e68ce 100644
--- a/core/src/test/java/org/elasticsearch/deps/jackson/JacksonLocationTests.java
+++ b/core/src/test/java/org/elasticsearch/deps/jackson/JacksonLocationTests.java
@@ -23,18 +23,21 @@ import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.core.JsonToken;
-
 import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 
 /**
  *
  */
 public class JacksonLocationTests extends ESTestCase {
+
+    @Test
     public void testLocationExtraction() throws IOException {
         // {
         //    "index" : "test",
diff --git a/core/src/test/java/org/elasticsearch/deps/joda/SimpleJodaTests.java b/core/src/test/java/org/elasticsearch/deps/joda/SimpleJodaTests.java
index bb531c4..b1bddc1 100644
--- a/core/src/test/java/org/elasticsearch/deps/joda/SimpleJodaTests.java
+++ b/core/src/test/java/org/elasticsearch/deps/joda/SimpleJodaTests.java
@@ -28,24 +28,20 @@ import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.LocalDateTime;
 import org.joda.time.MutableDateTime;
-import org.joda.time.format.DateTimeFormat;
-import org.joda.time.format.DateTimeFormatter;
-import org.joda.time.format.DateTimeFormatterBuilder;
-import org.joda.time.format.DateTimeParser;
-import org.joda.time.format.ISODateTimeFormat;
+import org.joda.time.format.*;
+import org.junit.Test;
 
 import java.util.Date;
 import java.util.Locale;
 
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.endsWith;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class SimpleJodaTests extends ESTestCase {
+
+    @Test
     public void testMultiParsers() {
         DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
         DateTimeParser[] parsers = new DateTimeParser[3];
@@ -59,6 +55,7 @@ public class SimpleJodaTests extends ESTestCase {
         formatter.parseMillis("2009-11-15 14:12:12");
     }
 
+    @Test
     public void testIsoDateFormatDateTimeNoMillisUTC() {
         DateTimeFormatter formatter = ISODateTimeFormat.dateTimeNoMillis().withZone(DateTimeZone.UTC);
         long millis = formatter.parseMillis("1970-01-01T00:00:00Z");
@@ -66,6 +63,7 @@ public class SimpleJodaTests extends ESTestCase {
         assertThat(millis, equalTo(0l));
     }
 
+    @Test
     public void testUpperBound() {
         MutableDateTime dateTime = new MutableDateTime(3000, 12, 31, 23, 59, 59, 999, DateTimeZone.UTC);
         DateTimeFormatter formatter = ISODateTimeFormat.dateOptionalTimeParser().withZone(DateTimeZone.UTC);
@@ -76,6 +74,7 @@ public class SimpleJodaTests extends ESTestCase {
         assertThat(dateTime.toString(), equalTo("2000-01-01T23:59:59.999Z"));
     }
 
+    @Test
     public void testIsoDateFormatDateOptionalTimeUTC() {
         DateTimeFormatter formatter = ISODateTimeFormat.dateOptionalTimeParser().withZone(DateTimeZone.UTC);
         long millis = formatter.parseMillis("1970-01-01T00:00:00Z");
@@ -106,6 +105,7 @@ public class SimpleJodaTests extends ESTestCase {
         assertThat(millis, equalTo(TimeValue.timeValueHours(2).millis()));
     }
 
+    @Test
     public void testIsoVsCustom() {
         DateTimeFormatter formatter = ISODateTimeFormat.dateOptionalTimeParser().withZone(DateTimeZone.UTC);
         long millis = formatter.parseMillis("1970-01-01T00:00:00");
@@ -120,6 +120,7 @@ public class SimpleJodaTests extends ESTestCase {
         assertThat(millis, equalTo(0l));
     }
 
+    @Test
     public void testWriteAndParse() {
         DateTimeFormatter dateTimeWriter = ISODateTimeFormat.dateTime().withZone(DateTimeZone.UTC);
         DateTimeFormatter formatter = ISODateTimeFormat.dateOptionalTimeParser().withZone(DateTimeZone.UTC);
@@ -127,6 +128,7 @@ public class SimpleJodaTests extends ESTestCase {
         assertThat(formatter.parseMillis(dateTimeWriter.print(date.getTime())), equalTo(date.getTime()));
     }
 
+    @Test
     public void testSlashInFormat() {
         FormatDateTimeFormatter formatter = Joda.forPattern("MM/yyyy");
         formatter.parser().parseMillis("01/2001");
@@ -143,12 +145,14 @@ public class SimpleJodaTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testMultipleFormats() {
         FormatDateTimeFormatter formatter = Joda.forPattern("yyyy/MM/dd HH:mm:ss||yyyy/MM/dd");
         long millis = formatter.parser().parseMillis("1970/01/01 00:00:00");
         assertThat("1970/01/01 00:00:00", is(formatter.printer().print(millis)));
     }
 
+    @Test
     public void testMultipleDifferentFormats() {
         FormatDateTimeFormatter formatter = Joda.forPattern("yyyy/MM/dd HH:mm:ss||yyyy/MM/dd");
         String input = "1970/01/01 00:00:00";
@@ -162,6 +166,7 @@ public class SimpleJodaTests extends ESTestCase {
         Joda.forPattern(" date_time || date_time_no_millis");
     }
 
+    @Test
     public void testInvalidPatterns() {
         expectInvalidPattern("does_not_exist_pattern", "Invalid format: [does_not_exist_pattern]: Illegal pattern component: o");
         expectInvalidPattern("OOOOO", "Invalid format: [OOOOO]: Illegal pattern component: OOOOO");
@@ -181,6 +186,7 @@ public class SimpleJodaTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testRounding() {
         long TIME = utcTimeInMillis("2009-02-03T01:01:01");
         MutableDateTime time = new MutableDateTime(DateTimeZone.UTC);
@@ -192,6 +198,7 @@ public class SimpleJodaTests extends ESTestCase {
         assertThat(time.dayOfMonth().roundFloor().toString(), equalTo("2009-02-03T00:00:00.000Z"));
     }
 
+    @Test
     public void testRoundingSetOnTime() {
         MutableDateTime time = new MutableDateTime(DateTimeZone.UTC);
         time.setRounding(time.getChronology().monthOfYear(), MutableDateTime.ROUND_FLOOR);
@@ -220,6 +227,7 @@ public class SimpleJodaTests extends ESTestCase {
         assertThat(time.getMillis(), equalTo(utcTimeInMillis("2011-05-02T00:00:00.000Z")));
     }
 
+    @Test
     public void testRoundingWithTimeZone() {
         MutableDateTime time = new MutableDateTime(DateTimeZone.UTC);
         time.setZone(DateTimeZone.forOffsetHours(-2));
@@ -244,6 +252,7 @@ public class SimpleJodaTests extends ESTestCase {
         assertThat(time.getMillis(), equalTo(utcTime.getMillis() - TimeValue.timeValueHours(22).millis()));
     }
 
+    @Test
     public void testThatEpochsCanBeParsed() {
         boolean parseMilliSeconds = randomBoolean();
 
@@ -265,6 +274,7 @@ public class SimpleJodaTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testThatNegativeEpochsCanBeParsed() {
         // problem: negative epochs can be arbitrary in size...
         boolean parseMilliSeconds = randomBoolean();
@@ -295,24 +305,16 @@ public class SimpleJodaTests extends ESTestCase {
         }
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testForInvalidDatesInEpochSecond() {
         FormatDateTimeFormatter formatter = Joda.forPattern("epoch_second");
-        try {
-            formatter.parser().parseDateTime(randomFrom("invalid date", "12345678901", "12345678901234"));
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("Invalid format"));
-        }
+        formatter.parser().parseDateTime(randomFrom("invalid date", "12345678901", "12345678901234"));
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testForInvalidDatesInEpochMillis() {
         FormatDateTimeFormatter formatter = Joda.forPattern("epoch_millis");
-        try {
-            formatter.parser().parseDateTime(randomFrom("invalid date", "12345678901234"));
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("Invalid format"));
-        }
+        formatter.parser().parseDateTime(randomFrom("invalid date", "12345678901234"));
     }
 
     public void testThatEpochParserIsPrinter() {
@@ -668,6 +670,7 @@ public class SimpleJodaTests extends ESTestCase {
         assertDateFormatParsingThrowingException("strictYearMonthDay", "2014-05-5");
     }
 
+    @Test
     public void testThatRootObjectParsingIsStrict() throws Exception {
         String[] datesThatWork = new String[] { "2014/10/10", "2014/10/10 12:12:12", "2014-05-05",  "2014-05-05T12:12:12.123Z" };
         String[] datesThatShouldNotWork = new String[]{ "5-05-05", "2014-5-05", "2014-05-5",
diff --git a/core/src/test/java/org/elasticsearch/deps/lucene/SimpleLuceneTests.java b/core/src/test/java/org/elasticsearch/deps/lucene/SimpleLuceneTests.java
index 9c702ac..77fd17e 100644
--- a/core/src/test/java/org/elasticsearch/deps/lucene/SimpleLuceneTests.java
+++ b/core/src/test/java/org/elasticsearch/deps/lucene/SimpleLuceneTests.java
@@ -19,34 +19,9 @@
 
 package org.elasticsearch.deps.lucene;
 
-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
-import org.apache.lucene.document.FieldType;
-import org.apache.lucene.document.IntField;
-import org.apache.lucene.document.SortedDocValuesField;
-import org.apache.lucene.document.TextField;
-import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.FieldInfo;
-import org.apache.lucene.index.IndexOptions;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexWriterConfig;
-import org.apache.lucene.index.IndexableField;
-import org.apache.lucene.index.LeafReader;
-import org.apache.lucene.index.PostingsEnum;
-import org.apache.lucene.index.SlowCompositeReaderWrapper;
-import org.apache.lucene.index.StoredFieldVisitor;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.index.Terms;
-import org.apache.lucene.index.TermsEnum;
-import org.apache.lucene.search.FieldDoc;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.MatchAllDocsQuery;
-import org.apache.lucene.search.Sort;
-import org.apache.lucene.search.SortField;
-import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.TopDocs;
-import org.apache.lucene.search.TopFieldDocs;
+import org.apache.lucene.document.*;
+import org.apache.lucene.index.*;
+import org.apache.lucene.search.*;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.util.BytesRef;
@@ -54,6 +29,7 @@ import org.apache.lucene.util.BytesRefBuilder;
 import org.apache.lucene.util.NumericUtils;
 import org.elasticsearch.common.lucene.Lucene;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -64,6 +40,8 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class SimpleLuceneTests extends ESTestCase {
+
+    @Test
     public void testSortValues() throws Exception {
         Directory dir = new RAMDirectory();
         IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
@@ -83,6 +61,7 @@ public class SimpleLuceneTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSimpleNumericOps() throws Exception {
         Directory dir = new RAMDirectory();
         IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
@@ -114,6 +93,7 @@ public class SimpleLuceneTests extends ESTestCase {
      * of the field. This means that heavily accessed fields that use field selector should be added
      * first (with load and break).
      */
+    @Test
     public void testOrdering() throws Exception {
         Directory dir = new RAMDirectory();
         IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
@@ -142,6 +122,7 @@ public class SimpleLuceneTests extends ESTestCase {
         indexWriter.close();
     }
 
+    @Test
     public void testBoost() throws Exception {
         Directory dir = new RAMDirectory();
         IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
@@ -176,6 +157,7 @@ public class SimpleLuceneTests extends ESTestCase {
         indexWriter.close();
     }
 
+    @Test
     public void testNRTSearchOnClosedWriter() throws Exception {
         Directory dir = new RAMDirectory();
         IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
@@ -200,6 +182,7 @@ public class SimpleLuceneTests extends ESTestCase {
      * A test just to verify that term freqs are not stored for numeric fields. <tt>int1</tt> is not storing termFreq
      * and <tt>int2</tt> does.
      */
+    @Test
     public void testNumericTermDocsFreqs() throws Exception {
         Directory dir = new RAMDirectory();
         IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
diff --git a/core/src/test/java/org/elasticsearch/deps/lucene/VectorHighlighterTests.java b/core/src/test/java/org/elasticsearch/deps/lucene/VectorHighlighterTests.java
index 66dc054..0e0ff0f 100644
--- a/core/src/test/java/org/elasticsearch/deps/lucene/VectorHighlighterTests.java
+++ b/core/src/test/java/org/elasticsearch/deps/lucene/VectorHighlighterTests.java
@@ -22,31 +22,25 @@ package org.elasticsearch.deps.lucene;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.TextField;
-import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexWriterConfig;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.PrefixQuery;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.index.*;
+import org.apache.lucene.search.*;
 import org.apache.lucene.search.vectorhighlight.CustomFieldQuery;
 import org.apache.lucene.search.vectorhighlight.FastVectorHighlighter;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.RAMDirectory;
 import org.elasticsearch.common.lucene.Lucene;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class VectorHighlighterTests extends ESTestCase {
+
+    @Test
     public void testVectorHighlighter() throws Exception {
         Directory dir = new RAMDirectory();
         IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
@@ -69,6 +63,7 @@ public class VectorHighlighterTests extends ESTestCase {
         assertThat(fragment, equalTo("the big <b>bad</b> dog"));
     }
 
+    @Test
     public void testVectorHighlighterPrefixQuery() throws Exception {
         Directory dir = new RAMDirectory();
         IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
@@ -106,6 +101,7 @@ public class VectorHighlighterTests extends ESTestCase {
         assertThat(fragment, notNullValue());
     }
 
+    @Test
     public void testVectorHighlighterNoStore() throws Exception {
         Directory dir = new RAMDirectory();
         IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
@@ -127,6 +123,7 @@ public class VectorHighlighterTests extends ESTestCase {
         assertThat(fragment, nullValue());
     }
 
+    @Test
     public void testVectorHighlighterNoTermVector() throws Exception {
         Directory dir = new RAMDirectory();
         IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
diff --git a/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java
index d44e27c..ded7d9d 100644
--- a/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java
+++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java
@@ -25,11 +25,7 @@ import org.elasticsearch.action.get.GetResponse;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.index.IndexResponse;
 import org.elasticsearch.client.Client;
-import org.elasticsearch.cluster.ClusterChangedEvent;
-import org.elasticsearch.cluster.ClusterService;
-import org.elasticsearch.cluster.ClusterState;
-import org.elasticsearch.cluster.ClusterStateListener;
-import org.elasticsearch.cluster.ClusterStateUpdateTask;
+import org.elasticsearch.cluster.*;
 import org.elasticsearch.cluster.block.ClusterBlock;
 import org.elasticsearch.cluster.block.ClusterBlockLevel;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
@@ -55,20 +51,9 @@ import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.indices.store.IndicesStoreIntegrationIT;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.InternalTestCluster;
 import org.elasticsearch.test.discovery.ClusterDiscoveryConfiguration;
-import org.elasticsearch.test.disruption.BlockClusterStateProcessing;
-import org.elasticsearch.test.disruption.IntermittentLongGCDisruption;
-import org.elasticsearch.test.disruption.LongGCDisruption;
-import org.elasticsearch.test.disruption.NetworkDelaysPartition;
-import org.elasticsearch.test.disruption.NetworkDisconnectPartition;
-import org.elasticsearch.test.disruption.NetworkPartition;
-import org.elasticsearch.test.disruption.NetworkUnresponsivePartition;
-import org.elasticsearch.test.disruption.ServiceDisruptionScheme;
-import org.elasticsearch.test.disruption.SingleNodeDisruption;
-import org.elasticsearch.test.disruption.SlowClusterStateProcessing;
+import org.elasticsearch.test.disruption.*;
 import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.elasticsearch.test.transport.MockTransportService;
 import org.elasticsearch.transport.TransportException;
@@ -76,33 +61,20 @@ import org.elasticsearch.transport.TransportRequest;
 import org.elasticsearch.transport.TransportRequestOptions;
 import org.elasticsearch.transport.TransportService;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.Semaphore;
-import java.util.concurrent.TimeUnit;
+import java.util.*;
+import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0, transportClientRatio = 0)
 @ESIntegTestCase.SuppressLocalMode
@@ -198,7 +170,9 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
     /**
      * Test that no split brain occurs under partial network partition. See https://github.com/elasticsearch/elasticsearch/issues/2488
      */
-    public void testFailWithMinimumMasterNodesConfigured() throws Exception {
+    @Test
+    public void failWithMinimumMasterNodesConfigured() throws Exception {
+
         List<String> nodes = startCluster(3);
 
         // Figure out what is the elected master node
@@ -239,6 +213,7 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
     /**
      * Verify that nodes fault detection works after master (re) election
      */
+    @Test
     public void testNodesFDAfterMasterReelection() throws Exception {
         startCluster(4);
 
@@ -269,6 +244,7 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
     /**
      * Verify that the proper block is applied when nodes loose their master
      */
+    @Test
     public void testVerifyApiBlocksDuringPartition() throws Exception {
         startCluster(3);
 
@@ -350,6 +326,7 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
      * This test isolates the master from rest of the cluster, waits for a new master to be elected, restores the partition
      * and verifies that all node agree on the new cluster state
      */
+    @Test
     public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception {
         final List<String> nodes = startCluster(3);
 
@@ -417,6 +394,7 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
      * <p>
      * This test is a superset of tests run in the Jepsen test suite, with the exception of versioned updates
      */
+    @Test
     // NOTE: if you remove the awaitFix, make sure to port the test to the 1.x branch
     @LuceneTestCase.AwaitsFix(bugUrl = "needs some more work to stabilize")
     @TestLogging("action.index:TRACE,action.get:TRACE,discovery:TRACE,cluster.service:TRACE,indices.recovery:TRACE,indices.cluster:TRACE")
@@ -552,6 +530,7 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
     /**
      * Test that cluster recovers from a long GC on master that causes other nodes to elect a new one
      */
+    @Test
     public void testMasterNodeGCs() throws Exception {
         List<String> nodes = startCluster(3, -1);
 
@@ -593,6 +572,7 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
      * that already are following another elected master node. These nodes should reject this cluster state and prevent
      * them from following the stale master.
      */
+    @Test
     public void testStaleMasterNotHijackingMajority() throws Exception {
         // 3 node cluster with unicast discovery and minimum_master_nodes set to 2:
         final List<String> nodes = startCluster(3, 2);
@@ -702,6 +682,7 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
      * Test that a document which is indexed on the majority side of a partition, is available from the minority side,
      * once the partition is healed
      */
+    @Test
     @TestLogging(value = "cluster.service:TRACE")
     public void testRejoinDocumentExistsInAllShardCopies() throws Exception {
         List<String> nodes = startCluster(3);
@@ -757,7 +738,8 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
      * The temporal unicast responses is empty. When partition is solved the one ping response contains a master node.
      * The rejoining node should take this master node and connect.
      */
-    public void testUnicastSinglePingResponseContainsMaster() throws Exception {
+    @Test
+    public void unicastSinglePingResponseContainsMaster() throws Exception {
         List<String> nodes = startCluster(4, -1, new int[]{0});
         // Figure out what is the elected master node
         final String masterNode = internalCluster().getMasterName();
@@ -792,8 +774,9 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
         assertMaster(masterNode, nodes);
     }
 
+    @Test
     @TestLogging("discovery.zen:TRACE,cluster.service:TRACE")
-    public void testIsolatedUnicastNodes() throws Exception {
+    public void isolatedUnicastNodes() throws Exception {
         List<String> nodes = startCluster(4, -1, new int[]{0});
         // Figure out what is the elected master node
         final String unicastTarget = nodes.get(0);
@@ -831,6 +814,7 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
     /**
      * Test cluster join with issues in cluster state publishing *
      */
+    @Test
     public void testClusterJoinDespiteOfPublishingIssues() throws Exception {
         List<String> nodes = startCluster(2, 1);
 
@@ -883,6 +867,8 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
         internalCluster().stopRandomNonMasterNode();
     }
 
+
+    @Test
     public void testClusterFormingWithASlowNode() throws Exception {
         configureUnicastCluster(3, null, 2);
 
@@ -908,6 +894,7 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
      * sure that the node is removed form the cluster, that the node start pinging and that
      * the cluster reforms when healed.
      */
+    @Test
     @TestLogging("discovery.zen:TRACE,action:TRACE")
     public void testNodeNotReachableFromMaster() throws Exception {
         startCluster(3);
@@ -945,7 +932,8 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
      * This test creates a scenario where a primary shard (0 replicas) relocates and is in POST_RECOVERY on the target
      * node but already deleted on the source node. Search request should still work.
      */
-    public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception {
+    @Test
+    public void searchWithRelocationAndSlowClusterStateProcessing() throws Exception {
         configureUnicastCluster(3, null, 1);
         InternalTestCluster.Async<String> masterNodeFuture = internalCluster().startMasterOnlyNodeAsync();
         InternalTestCluster.Async<String> node_1Future = internalCluster().startDataOnlyNodeAsync();
@@ -984,6 +972,7 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
         assertThat(client().prepareSearch().setSize(0).get().getHits().totalHits(), equalTo(100l));
     }
 
+    @Test
     public void testIndexImportedFromDataOnlyNodesIfMasterLostDataFolder() throws Exception {
         // test for https://github.com/elastic/elasticsearch/issues/8823
         configureUnicastCluster(2, null, 1);
@@ -1008,6 +997,7 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
 
     // tests if indices are really deleted even if a master transition inbetween
     @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/11665")
+    @Test
     public void testIndicesDeleted() throws Exception {
         configureUnicastCluster(3, null, 2);
         InternalTestCluster.Async<List<String>> masterNodes= internalCluster().startMasterOnlyNodesAsync(2);
diff --git a/core/src/test/java/org/elasticsearch/discovery/ZenFaultDetectionTests.java b/core/src/test/java/org/elasticsearch/discovery/ZenFaultDetectionTests.java
index d9a75b2..9d1ce5c 100644
--- a/core/src/test/java/org/elasticsearch/discovery/ZenFaultDetectionTests.java
+++ b/core/src/test/java/org/elasticsearch/discovery/ZenFaultDetectionTests.java
@@ -39,6 +39,7 @@ import org.hamcrest.Matcher;
 import org.hamcrest.Matchers;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
@@ -47,6 +48,7 @@ import static java.util.Collections.emptyMap;
 import static org.hamcrest.Matchers.equalTo;
 
 public class ZenFaultDetectionTests extends ESTestCase {
+
     protected ThreadPool threadPool;
 
     protected static final Version version0 = Version.fromId(/*0*/99);
@@ -127,6 +129,7 @@ public class ZenFaultDetectionTests extends ESTestCase {
         return builder.build();
     }
 
+    @Test
     public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException {
         Settings.Builder settings = Settings.builder();
         boolean shouldRetry = randomBoolean();
@@ -175,7 +178,9 @@ public class ZenFaultDetectionTests extends ESTestCase {
         assertThat(failureReason[0], matcher);
     }
 
+    @Test
     public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException {
+
         Settings.Builder settings = Settings.builder();
         boolean shouldRetry = randomBoolean();
         // make sure we don't ping
diff --git a/core/src/test/java/org/elasticsearch/discovery/ZenUnicastDiscoveryIT.java b/core/src/test/java/org/elasticsearch/discovery/ZenUnicastDiscoveryIT.java
index efbfa80..ec7d81b 100644
--- a/core/src/test/java/org/elasticsearch/discovery/ZenUnicastDiscoveryIT.java
+++ b/core/src/test/java/org/elasticsearch/discovery/ZenUnicastDiscoveryIT.java
@@ -28,6 +28,7 @@ import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.discovery.ClusterDiscoveryConfiguration;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.List;
 import java.util.concurrent.ExecutionException;
@@ -50,6 +51,7 @@ public class ZenUnicastDiscoveryIT extends ESIntegTestCase {
         discoveryConfig = null;
     }
 
+    @Test
     public void testNormalClusterForming() throws ExecutionException, InterruptedException {
         int currentNumNodes = randomIntBetween(3, 5);
 
@@ -72,6 +74,7 @@ public class ZenUnicastDiscoveryIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     // Without the 'include temporalResponses responses to nodesToConnect' improvement in UnicastZenPing#sendPings this
     // test fails, because 2 nodes elect themselves as master and the health request times out b/c waiting_for_nodes=N
     // can't be satisfied.
diff --git a/core/src/test/java/org/elasticsearch/discovery/zen/ElectMasterServiceTests.java b/core/src/test/java/org/elasticsearch/discovery/zen/ElectMasterServiceTests.java
index e7bded3..eddc4d9 100644
--- a/core/src/test/java/org/elasticsearch/discovery/zen/ElectMasterServiceTests.java
+++ b/core/src/test/java/org/elasticsearch/discovery/zen/ElectMasterServiceTests.java
@@ -25,12 +25,9 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.transport.DummyTransportAddress;
 import org.elasticsearch.discovery.zen.elect.ElectMasterService;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
 public class ElectMasterServiceTests extends ESTestCase {
 
@@ -57,7 +54,8 @@ public class ElectMasterServiceTests extends ESTestCase {
         return nodes;
     }
 
-    public void testSortByMasterLikelihood() {
+    @Test
+    public void sortByMasterLikelihood() {
         List<DiscoveryNode> nodes = generateRandomNodes();
         List<DiscoveryNode> sortedNodes = electMasterService().sortByMasterLikelihood(nodes);
         assertEquals(nodes.size(), sortedNodes.size());
@@ -74,7 +72,8 @@ public class ElectMasterServiceTests extends ESTestCase {
 
     }
 
-    public void testElectMaster() {
+    @Test
+    public void electMaster() {
         List<DiscoveryNode> nodes = generateRandomNodes();
         ElectMasterService service = electMasterService();
         int min_master_nodes = randomIntBetween(0, nodes.size());
diff --git a/core/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryIT.java b/core/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryIT.java
index 11d94be..fbe6baa 100644
--- a/core/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryIT.java
+++ b/core/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryIT.java
@@ -48,6 +48,7 @@ import org.elasticsearch.transport.TransportException;
 import org.elasticsearch.transport.TransportResponse;
 import org.elasticsearch.transport.TransportService;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.net.InetAddress;
@@ -70,6 +71,8 @@ import static org.hamcrest.Matchers.sameInstance;
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0, numClientNodes = 0)
 @ESIntegTestCase.SuppressLocalMode
 public class ZenDiscoveryIT extends ESIntegTestCase {
+
+    @Test
     public void testChangeRejoinOnMasterOptionIsDynamic() throws Exception {
         Settings nodeSettings = Settings.settingsBuilder()
                 .put("discovery.type", "zen") // <-- To override the local setting if set externally
@@ -85,6 +88,7 @@ public class ZenDiscoveryIT extends ESIntegTestCase {
         assertThat(zenDiscovery.isRejoinOnMasterGone(), is(false));
     }
 
+    @Test
     public void testNoShardRelocationsOccurWhenElectedMasterNodeFails() throws Exception {
         Settings defaultSettings = Settings.builder()
                 .put(FaultDetection.SETTING_PING_TIMEOUT, "1s")
@@ -131,6 +135,7 @@ public class ZenDiscoveryIT extends ESIntegTestCase {
         assertThat(numRecoveriesAfterNewMaster, equalTo(numRecoveriesBeforeNewMaster));
     }
 
+    @Test
     @TestLogging(value = "action.admin.cluster.health:TRACE")
     public void testNodeFailuresAreProcessedOnce() throws ExecutionException, InterruptedException, IOException {
         Settings defaultSettings = Settings.builder()
@@ -175,6 +180,7 @@ public class ZenDiscoveryIT extends ESIntegTestCase {
         assertThat(statesFound, Matchers.hasSize(2));
     }
 
+    @Test
     public void testNodeRejectsClusterStateWithWrongMasterNode() throws Exception {
         Settings settings = Settings.builder()
                 .put("discovery.type", "zen")
@@ -223,6 +229,7 @@ public class ZenDiscoveryIT extends ESIntegTestCase {
         assertThat(ExceptionsHelper.detailedMessage(reference.get()), containsString("cluster state from a different master than the current one, rejecting"));
     }
 
+    @Test
     public void testHandleNodeJoin_incompatibleMinVersion() throws UnknownHostException {
         Settings nodeSettings = Settings.settingsBuilder()
                 .put("discovery.type", "zen") // <-- To override the local setting if set externally
@@ -247,6 +254,7 @@ public class ZenDiscoveryIT extends ESIntegTestCase {
         assertThat(holder.get().getMessage(), equalTo("Can't handle join request from a node with a version [1.6.0] that is lower than the minimum compatible version [" + Version.V_2_0_0_beta1.minimumCompatibilityVersion() + "]"));
     }
 
+    @Test
     public void testJoinElectedMaster_incompatibleMinVersion() {
         ElectMasterService electMasterService = new ElectMasterService(Settings.EMPTY, Version.V_2_0_0_beta1);
 
diff --git a/core/src/test/java/org/elasticsearch/discovery/zen/ZenPingTests.java b/core/src/test/java/org/elasticsearch/discovery/zen/ZenPingTests.java
index 82733d9..e35f8d5 100644
--- a/core/src/test/java/org/elasticsearch/discovery/zen/ZenPingTests.java
+++ b/core/src/test/java/org/elasticsearch/discovery/zen/ZenPingTests.java
@@ -25,6 +25,7 @@ import org.elasticsearch.cluster.node.DiscoveryNode;
 import org.elasticsearch.common.transport.DummyTransportAddress;
 import org.elasticsearch.discovery.zen.ping.ZenPing;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -32,6 +33,8 @@ import java.util.Collections;
 import static org.hamcrest.Matchers.equalTo;
 
 public class ZenPingTests extends ESTestCase {
+
+    @Test
     public void testPingCollection() {
         DiscoveryNode[] nodes = new DiscoveryNode[randomIntBetween(1, 30)];
         long maxIdPerNode[] = new long[nodes.length];
diff --git a/core/src/test/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPingIT.java b/core/src/test/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPingIT.java
index a3b2cac..509740e 100644
--- a/core/src/test/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPingIT.java
+++ b/core/src/test/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPingIT.java
@@ -38,12 +38,15 @@ import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.elasticsearch.transport.TransportService;
 import org.elasticsearch.transport.netty.NettyTransport;
+import org.junit.Test;
 
 import java.net.InetSocketAddress;
 
 import static org.hamcrest.Matchers.equalTo;
 
 public class UnicastZenPingIT extends ESTestCase {
+
+    @Test
     public void testSimplePings() throws InterruptedException {
         Settings settings = Settings.EMPTY;
         int startPort = 11000 + randomIntBetween(0, 1000);
diff --git a/core/src/test/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateActionTests.java b/core/src/test/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateActionTests.java
index d33aadd..7bc4ac5 100644
--- a/core/src/test/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateActionTests.java
+++ b/core/src/test/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateActionTests.java
@@ -21,11 +21,7 @@ package org.elasticsearch.discovery.zen.publish;
 
 import org.elasticsearch.ElasticsearchException;
 import org.elasticsearch.Version;
-import org.elasticsearch.cluster.ClusterChangedEvent;
-import org.elasticsearch.cluster.ClusterName;
-import org.elasticsearch.cluster.ClusterState;
-import org.elasticsearch.cluster.ClusterStateListener;
-import org.elasticsearch.cluster.Diff;
+import org.elasticsearch.cluster.*;
 import org.elasticsearch.cluster.block.ClusterBlocks;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.cluster.metadata.MetaData;
@@ -47,38 +43,25 @@ import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.elasticsearch.test.transport.MockTransportService;
 import org.elasticsearch.threadpool.ThreadPool;
-import org.elasticsearch.transport.BytesTransportRequest;
-import org.elasticsearch.transport.TransportChannel;
-import org.elasticsearch.transport.TransportConnectionListener;
-import org.elasticsearch.transport.TransportResponse;
-import org.elasticsearch.transport.TransportResponseOptions;
-import org.elasticsearch.transport.TransportService;
+import org.elasticsearch.transport.*;
 import org.elasticsearch.transport.local.LocalTransport;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.emptyIterable;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 @TestLogging("discovery.zen.publish:TRACE")
 public class PublishClusterStateActionTests extends ESTestCase {
+
     protected ThreadPool threadPool;
     protected Map<String, MockNode> nodes = new HashMap<>();
 
@@ -241,6 +224,7 @@ public class PublishClusterStateActionTests extends ESTestCase {
         return new MockPublishAction(settings, transportService, nodesProvider, listener, discoverySettings, ClusterName.DEFAULT);
     }
 
+    @Test
     public void testSimpleClusterStatePublishing() throws Exception {
         MockNode nodeA = createMockNode("nodeA", Settings.EMPTY, Version.CURRENT).setAsMaster();
         MockNode nodeB = createMockNode("nodeB", Settings.EMPTY, Version.CURRENT);
@@ -320,7 +304,9 @@ public class PublishClusterStateActionTests extends ESTestCase {
         assertSameStateFromFull(nodeC.clusterState, clusterState);
     }
 
+    @Test
     public void testUnexpectedDiffPublishing() throws Exception {
+
         MockNode nodeA = createMockNode("nodeA", Settings.EMPTY, Version.CURRENT, new ClusterStateListener() {
             @Override
             public void clusterChanged(ClusterChangedEvent event) {
@@ -344,6 +330,7 @@ public class PublishClusterStateActionTests extends ESTestCase {
         assertSameStateFromDiff(nodeB.clusterState, clusterState);
     }
 
+    @Test
     public void testDisablingDiffPublishing() throws Exception {
         Settings noDiffPublishingSettings = Settings.builder().put(DiscoverySettings.PUBLISH_DIFF_ENABLE, false).build();
 
@@ -381,6 +368,7 @@ public class PublishClusterStateActionTests extends ESTestCase {
     /**
      * Test not waiting on publishing works correctly (i.e., publishing times out)
      */
+    @Test
     public void testSimultaneousClusterStatePublishing() throws Exception {
         int numberOfNodes = randomIntBetween(2, 10);
         int numberOfIterations = scaledRandomIntBetween(5, 50);
@@ -428,7 +416,9 @@ public class PublishClusterStateActionTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSerializationFailureDuringDiffPublishing() throws Exception {
+
         MockNode nodeA = createMockNode("nodeA", Settings.EMPTY, Version.CURRENT, new ClusterStateListener() {
             @Override
             public void clusterChanged(ClusterChangedEvent event) {
diff --git a/core/src/test/java/org/elasticsearch/document/DocumentActionsIT.java b/core/src/test/java/org/elasticsearch/document/DocumentActionsIT.java
index 7b2690c..62cdbf6 100644
--- a/core/src/test/java/org/elasticsearch/document/DocumentActionsIT.java
+++ b/core/src/test/java/org/elasticsearch/document/DocumentActionsIT.java
@@ -22,7 +22,7 @@ package org.elasticsearch.document;
 import org.elasticsearch.action.admin.cluster.health.ClusterHealthStatus;
 import org.elasticsearch.action.admin.indices.cache.clear.ClearIndicesCacheResponse;
 import org.elasticsearch.action.admin.indices.flush.FlushResponse;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeResponse;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeResponse;
 import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;
 import org.elasticsearch.action.bulk.BulkResponse;
 import org.elasticsearch.action.delete.DeleteResponse;
@@ -32,13 +32,11 @@ import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
-import static org.elasticsearch.client.Requests.clearIndicesCacheRequest;
-import static org.elasticsearch.client.Requests.getRequest;
-import static org.elasticsearch.client.Requests.indexRequest;
-import static org.elasticsearch.client.Requests.refreshRequest;
+import static org.elasticsearch.client.Requests.*;
 import static org.elasticsearch.index.query.QueryBuilders.termQuery;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
 import static org.hamcrest.Matchers.equalTo;
@@ -48,14 +46,17 @@ import static org.hamcrest.Matchers.nullValue;
  *
  */
 public class DocumentActionsIT extends ESIntegTestCase {
+
     protected void createIndex() {
         createIndex(getConcreteIndexName());
     }
 
+
     protected String getConcreteIndexName() {
         return "test";
     }
 
+    @Test
     public void testIndexActions() throws Exception {
         createIndex();
         NumShards numShards = getNumShards(getConcreteIndexName());
@@ -80,10 +81,10 @@ public class DocumentActionsIT extends ESIntegTestCase {
         assertNoFailures(clearIndicesCacheResponse);
         assertThat(clearIndicesCacheResponse.getSuccessfulShards(), equalTo(numShards.totalNumShards));
 
-        logger.info("Optimizing");
+        logger.info("Force Merging");
         waitForRelocation(ClusterHealthStatus.GREEN);
-        OptimizeResponse optimizeResponse = optimize();
-        assertThat(optimizeResponse.getSuccessfulShards(), equalTo(numShards.totalNumShards));
+        ForceMergeResponse mergeResponse = forceMerge();
+        assertThat(mergeResponse.getSuccessfulShards(), equalTo(numShards.totalNumShards));
 
         GetResponse getResult;
 
@@ -170,6 +171,7 @@ public class DocumentActionsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testBulk() throws Exception {
         createIndex();
         NumShards numShards = getNumShards(getConcreteIndexName());
diff --git a/core/src/test/java/org/elasticsearch/document/ShardInfoIT.java b/core/src/test/java/org/elasticsearch/document/ShardInfoIT.java
index d4907d8..529b605 100644
--- a/core/src/test/java/org/elasticsearch/document/ShardInfoIT.java
+++ b/core/src/test/java/org/elasticsearch/document/ShardInfoIT.java
@@ -32,6 +32,7 @@ import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.hamcrest.Matchers.equalTo;
@@ -42,9 +43,11 @@ import static org.hamcrest.Matchers.nullValue;
 /**
  */
 public class ShardInfoIT extends ESIntegTestCase {
+
     private int numCopies;
     private int numNodes;
 
+    @Test
     public void testIndexAndDelete() throws Exception {
         prepareIndex(1);
         IndexResponse indexResponse = client().prepareIndex("idx", "type").setSource("{}").get();
@@ -53,13 +56,15 @@ public class ShardInfoIT extends ESIntegTestCase {
         assertShardInfo(deleteResponse);
     }
 
+    @Test
     public void testUpdate() throws Exception {
         prepareIndex(1);
         UpdateResponse updateResponse = client().prepareUpdate("idx", "type", "1").setDoc("{}").setDocAsUpsert(true).get();
         assertShardInfo(updateResponse);
     }
 
-    public void testBulkWithIndexAndDeleteItems() throws Exception {
+    @Test
+    public void testBulk_withIndexAndDeleteItems() throws Exception {
         prepareIndex(1);
         BulkRequestBuilder bulkRequestBuilder = client().prepareBulk();
         for (int i = 0; i < 10; i++) {
@@ -81,7 +86,8 @@ public class ShardInfoIT extends ESIntegTestCase {
         }
     }
 
-    public void testBulkWithUpdateItems() throws Exception {
+    @Test
+    public void testBulk_withUpdateItems() throws Exception {
         prepareIndex(1);
         BulkRequestBuilder bulkRequestBuilder = client().prepareBulk();
         for (int i = 0; i < 10; i++) {
diff --git a/core/src/test/java/org/elasticsearch/env/EnvironmentTests.java b/core/src/test/java/org/elasticsearch/env/EnvironmentTests.java
index 79f9efb..06cf1e2 100644
--- a/core/src/test/java/org/elasticsearch/env/EnvironmentTests.java
+++ b/core/src/test/java/org/elasticsearch/env/EnvironmentTests.java
@@ -20,6 +20,7 @@ package org.elasticsearch.env;
 
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.net.URL;
@@ -33,6 +34,7 @@ import static org.hamcrest.CoreMatchers.nullValue;
  * Simple unit-tests for Environment.java
  */
 public class EnvironmentTests extends ESTestCase {
+
     public Environment newEnvironment() throws IOException {
         return newEnvironment(Settings.EMPTY);
     }
@@ -45,6 +47,7 @@ public class EnvironmentTests extends ESTestCase {
         return new Environment(build);
     }
 
+    @Test
     public void testRepositoryResolution() throws IOException {
         Environment environment = newEnvironment();
         assertThat(environment.resolveRepoFile("/test/repos/repo1"), nullValue());
diff --git a/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java b/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java
index 6a31456..6b766e5 100644
--- a/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java
+++ b/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java
@@ -28,6 +28,7 @@ import org.elasticsearch.common.util.concurrent.AbstractRunnable;
 import org.elasticsearch.index.Index;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.nio.file.Files;
@@ -44,8 +45,10 @@ import static org.hamcrest.CoreMatchers.equalTo;
 
 @LuceneTestCase.SuppressFileSystems("ExtrasFS") // TODO: fix test to allow extras
 public class NodeEnvironmentTests extends ESTestCase {
+
     private final Settings idxSettings = Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).build();
 
+    @Test
     public void testNodeLockSingleEnvironment() throws IOException {
         NodeEnvironment env = newNodeEnvironment(Settings.builder()
                 .put("node.max_local_storage_nodes", 1).build());
@@ -72,6 +75,7 @@ public class NodeEnvironmentTests extends ESTestCase {
 
     }
 
+    @Test
     public void testNodeLockMultipleEnvironment() throws IOException {
         final NodeEnvironment first = newNodeEnvironment();
         String[] dataPaths = first.getSettings().getAsArray("path.data");
@@ -84,6 +88,7 @@ public class NodeEnvironmentTests extends ESTestCase {
         IOUtils.close(first, second);
     }
 
+    @Test
     public void testShardLock() throws IOException {
         final NodeEnvironment env = newNodeEnvironment();
 
@@ -124,6 +129,7 @@ public class NodeEnvironmentTests extends ESTestCase {
         env.close();
     }
 
+    @Test
     public void testGetAllIndices() throws Exception {
         final NodeEnvironment env = newNodeEnvironment();
         final int numIndices = randomIntBetween(1, 10);
@@ -141,6 +147,7 @@ public class NodeEnvironmentTests extends ESTestCase {
         env.close();
     }
 
+    @Test
     public void testDeleteSafe() throws IOException, InterruptedException {
         final NodeEnvironment env = newNodeEnvironment();
         ShardLock fooLock = env.shardLock(new ShardId("foo", 0));
@@ -228,6 +235,7 @@ public class NodeEnvironmentTests extends ESTestCase {
         env.close();
     }
 
+    @Test
     public void testStressShardLock() throws IOException, InterruptedException {
         class Int {
             int value = 0;
@@ -289,6 +297,7 @@ public class NodeEnvironmentTests extends ESTestCase {
         env.close();
     }
 
+    @Test
     public void testCustomDataPaths() throws Exception {
         String[] dataPaths = tmpPaths();
         NodeEnvironment env = newNodeEnvironment(dataPaths, "/tmp", Settings.EMPTY);
diff --git a/core/src/test/java/org/elasticsearch/exists/SimpleExistsIT.java b/core/src/test/java/org/elasticsearch/exists/SimpleExistsIT.java
index 7cf4150..3046a85 100644
--- a/core/src/test/java/org/elasticsearch/exists/SimpleExistsIT.java
+++ b/core/src/test/java/org/elasticsearch/exists/SimpleExistsIT.java
@@ -23,12 +23,16 @@ import org.elasticsearch.action.exists.ExistsResponse;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.index.query.QueryBuilders.boolQuery;
 import static org.elasticsearch.index.query.QueryBuilders.rangeQuery;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertExists;
 
 public class SimpleExistsIT extends ESIntegTestCase {
+
+
+    @Test
     public void testExistsRandomPreference() throws Exception {
         createIndex("test");
         indexRandom(true, client().prepareIndex("test", "type", "1").setSource("field", "value"),
@@ -52,7 +56,9 @@ public class SimpleExistsIT extends ESIntegTestCase {
         }
     }
 
-    public void testSimpleIp() throws Exception {
+
+    @Test
+    public void simpleIpTests() throws Exception {
         createIndex("test");
 
         client().admin().indices().preparePutMapping("test").setType("type1")
@@ -74,7 +80,8 @@ public class SimpleExistsIT extends ESIntegTestCase {
         assertExists(existsResponse, false);
     }
 
-    public void testSimpleId() {
+    @Test
+    public void simpleIdTests() {
         createIndex("test");
 
         client().prepareIndex("test", "type", "XXX1").setSource("field", "value").setRefresh(true).execute().actionGet();
@@ -92,7 +99,8 @@ public class SimpleExistsIT extends ESIntegTestCase {
         assertExists(existsResponse, true);
     }
 
-    public void testSimpleNonExistence() throws Exception {
+    @Test
+    public void simpleNonExistenceTests() throws Exception {
         createIndex("test");
         client().prepareIndex("test", "type1", "1").setSource("field", 2).execute().actionGet();
         client().prepareIndex("test", "type1", "2").setSource("field", 5).execute().actionGet();
diff --git a/core/src/test/java/org/elasticsearch/explain/ExplainActionIT.java b/core/src/test/java/org/elasticsearch/explain/ExplainActionIT.java
index 54480e0..d2b1e6d 100644
--- a/core/src/test/java/org/elasticsearch/explain/ExplainActionIT.java
+++ b/core/src/test/java/org/elasticsearch/explain/ExplainActionIT.java
@@ -32,6 +32,7 @@ import org.elasticsearch.test.ESIntegTestCase;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.format.ISODateTimeFormat;
+import org.junit.Test;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -49,6 +50,8 @@ import static org.hamcrest.Matchers.notNullValue;
 /**
  */
 public class ExplainActionIT extends ESIntegTestCase {
+
+    @Test
     public void testSimple() throws Exception {
         assertAcked(prepareCreate("test")
                 .addAlias(new Alias("alias"))
@@ -113,6 +116,8 @@ public class ExplainActionIT extends ESIntegTestCase {
         assertThat(response.getId(), equalTo("2"));
     }
 
+    @SuppressWarnings("unchecked")
+    @Test
     public void testExplainWithFields() throws Exception {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias")));
         ensureGreen("test");
@@ -172,6 +177,7 @@ public class ExplainActionIT extends ESIntegTestCase {
     }
 
     @SuppressWarnings("unchecked")
+    @Test
     public void testExplainWitSource() throws Exception {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias")));
         ensureGreen("test");
@@ -207,6 +213,7 @@ public class ExplainActionIT extends ESIntegTestCase {
         assertThat(((Map<String, Object>) response.getGetResult().getSource().get("obj1")).get("field1").toString(), equalTo("value1"));
     }
 
+    @Test
     public void testExplainWithFilteredAlias() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("test", "field2", "type=string")
@@ -223,6 +230,7 @@ public class ExplainActionIT extends ESIntegTestCase {
         assertFalse(response.isMatch());
     }
 
+    @Test
     public void testExplainWithFilteredAliasFetchSource() throws Exception {
         assertAcked(client().admin().indices().prepareCreate("test")
                 .addMapping("test", "field2", "type=string")
@@ -249,7 +257,8 @@ public class ExplainActionIT extends ESIntegTestCase {
         assertThat((String)response.getGetResult().getSource().get("field1"), equalTo("value1"));
     }
 
-    public void testExplainDateRangeInQueryString() {
+    @Test
+    public void explainDateRangeInQueryString() {
         createIndex("test");
 
         String aMonthAgo = ISODateTimeFormat.yearMonthDay().print(new DateTime(DateTimeZone.UTC).minusMonths(1));
@@ -268,7 +277,10 @@ public class ExplainActionIT extends ESIntegTestCase {
         return randomBoolean() ? "test" : "alias";
     }
 
-    public void testStreamExplain() throws Exception {
+
+    @Test
+    public void streamExplainTest() throws Exception {
+
         Explanation exp = Explanation.match(2f, "some explanation");
 
         // write
@@ -296,5 +308,6 @@ public class ExplainActionIT extends ESIntegTestCase {
 
         result = Lucene.readExplanation(esBuffer);
         assertThat(exp.toString(),equalTo(result.toString()));
+
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/gateway/AsyncShardFetchTests.java b/core/src/test/java/org/elasticsearch/gateway/AsyncShardFetchTests.java
index e81db45..88f47e7 100644
--- a/core/src/test/java/org/elasticsearch/gateway/AsyncShardFetchTests.java
+++ b/core/src/test/java/org/elasticsearch/gateway/AsyncShardFetchTests.java
@@ -31,6 +31,7 @@ import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -44,6 +45,7 @@ import static org.hamcrest.Matchers.sameInstance;
 /**
  */
 public class AsyncShardFetchTests extends ESTestCase {
+
     private final DiscoveryNode node1 = new DiscoveryNode("node1", DummyTransportAddress.INSTANCE, Version.CURRENT);
     private final Response response1 = new Response(node1);
     private final Throwable failure1 = new Throwable("simulated failure 1");
@@ -67,6 +69,7 @@ public class AsyncShardFetchTests extends ESTestCase {
         terminate(threadPool);
     }
 
+    @Test
     public void testClose() throws Exception {
         DiscoveryNodes nodes = DiscoveryNodes.builder().put(node1).build();
         test.addSimulation(node1.getId(), response1);
@@ -89,6 +92,8 @@ public class AsyncShardFetchTests extends ESTestCase {
         }
     }
 
+
+    @Test
     public void testFullCircleSingleNodeSuccess() throws Exception {
         DiscoveryNodes nodes = DiscoveryNodes.builder().put(node1).build();
         test.addSimulation(node1.getId(), response1);
@@ -108,6 +113,7 @@ public class AsyncShardFetchTests extends ESTestCase {
         assertThat(fetchData.getData().get(node1), sameInstance(response1));
     }
 
+    @Test
     public void testFullCircleSingleNodeFailure() throws Exception {
         DiscoveryNodes nodes = DiscoveryNodes.builder().put(node1).build();
         // add a failed response for node1
@@ -140,6 +146,7 @@ public class AsyncShardFetchTests extends ESTestCase {
         assertThat(fetchData.getData().get(node1), sameInstance(response1));
     }
 
+    @Test
     public void testTwoNodesOnSetup() throws Exception {
         DiscoveryNodes nodes = DiscoveryNodes.builder().put(node1).put(node2).build();
         test.addSimulation(node1.getId(), response1);
@@ -168,6 +175,7 @@ public class AsyncShardFetchTests extends ESTestCase {
         assertThat(fetchData.getData().get(node2), sameInstance(response2));
     }
 
+    @Test
     public void testTwoNodesOnSetupAndFailure() throws Exception {
         DiscoveryNodes nodes = DiscoveryNodes.builder().put(node1).put(node2).build();
         test.addSimulation(node1.getId(), response1);
@@ -194,6 +202,7 @@ public class AsyncShardFetchTests extends ESTestCase {
         assertThat(fetchData.getData().get(node1), sameInstance(response1));
     }
 
+    @Test
     public void testTwoNodesAddedInBetween() throws Exception {
         DiscoveryNodes nodes = DiscoveryNodes.builder().put(node1).build();
         test.addSimulation(node1.getId(), response1);
diff --git a/core/src/test/java/org/elasticsearch/gateway/DanglingIndicesStateTests.java b/core/src/test/java/org/elasticsearch/gateway/DanglingIndicesStateTests.java
index 6b28b7f..e9b0e4a 100644
--- a/core/src/test/java/org/elasticsearch/gateway/DanglingIndicesStateTests.java
+++ b/core/src/test/java/org/elasticsearch/gateway/DanglingIndicesStateTests.java
@@ -26,22 +26,26 @@ import org.elasticsearch.env.NodeEnvironment;
 import org.elasticsearch.index.Index;
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.Map;
 
 import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.hasSize;
 
 /**
  */
 public class DanglingIndicesStateTests extends ESTestCase {
+
     private static Settings indexSettings = Settings.builder()
             .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)
             .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)
             .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)
             .build();
 
+    @Test
     public void testCleanupWhenEmpty() throws Exception {
         try (NodeEnvironment env = newNodeEnvironment()) {
             MetaStateService metaStateService = new MetaStateService(Settings.EMPTY, env);
@@ -54,6 +58,7 @@ public class DanglingIndicesStateTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testDanglingProcessing() throws Exception {
         try (NodeEnvironment env = newNodeEnvironment()) {
             MetaStateService metaStateService = new MetaStateService(Settings.EMPTY, env);
@@ -97,6 +102,7 @@ public class DanglingIndicesStateTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testRenameOfIndexState() throws Exception {
         try (NodeEnvironment env = newNodeEnvironment()) {
             MetaStateService metaStateService = new MetaStateService(Settings.EMPTY, env);
diff --git a/core/src/test/java/org/elasticsearch/gateway/GatewayIndexStateIT.java b/core/src/test/java/org/elasticsearch/gateway/GatewayIndexStateIT.java
index c804239..4cc1d61 100644
--- a/core/src/test/java/org/elasticsearch/gateway/GatewayIndexStateIT.java
+++ b/core/src/test/java/org/elasticsearch/gateway/GatewayIndexStateIT.java
@@ -34,11 +34,12 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.indices.IndexClosedException;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.InternalTestCluster.RestartCallback;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
 import static org.hamcrest.Matchers.equalTo;
@@ -49,7 +50,9 @@ public class GatewayIndexStateIT extends ESIntegTestCase {
 
     private final ESLogger logger = Loggers.getLogger(GatewayIndexStateIT.class);
 
+    @Test
     public void testMappingMetaDataParsed() throws Exception {
+
         logger.info("--> starting 1 nodes");
         internalCluster().startNode();
 
@@ -76,7 +79,9 @@ public class GatewayIndexStateIT extends ESIntegTestCase {
         assertThat(mappingMd.routing().required(), equalTo(true));
     }
 
+    @Test
     public void testSimpleOpenClose() throws Exception {
+
         logger.info("--> starting 2 nodes");
         internalCluster().startNodesAsync(2).get();
 
@@ -176,6 +181,7 @@ public class GatewayIndexStateIT extends ESIntegTestCase {
         client().prepareIndex("test", "type1", "2").setSource("field1", "value1").execute().actionGet();
     }
 
+    @Test
     public void testJustMasterNode() throws Exception {
         logger.info("--> cleaning nodes");
 
@@ -200,6 +206,7 @@ public class GatewayIndexStateIT extends ESIntegTestCase {
         assertThat(clusterStateResponse.getState().metaData().hasIndex("test"), equalTo(true));
     }
 
+    @Test
     public void testJustMasterNodeAndJustDataNode() throws Exception {
         logger.info("--> cleaning nodes");
 
@@ -216,6 +223,7 @@ public class GatewayIndexStateIT extends ESIntegTestCase {
         client().prepareIndex("test", "type1").setSource("field1", "value1").setTimeout("100ms").execute().actionGet();
     }
 
+    @Test
     public void testTwoNodesSingleDoc() throws Exception {
         logger.info("--> cleaning nodes");
 
@@ -255,6 +263,7 @@ public class GatewayIndexStateIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testDanglingIndicesConflictWithAlias() throws Exception {
         logger.info("--> starting two nodes");
         internalCluster().startNodesAsync(2).get();
@@ -314,6 +323,7 @@ public class GatewayIndexStateIT extends ESIntegTestCase {
         assertThat(client().prepareGet("test", "type1", "1").execute().actionGet().isExists(), equalTo(true));
     }
 
+    @Test
     public void testDanglingIndices() throws Exception {
         logger.info("--> starting two nodes");
 
diff --git a/core/src/test/java/org/elasticsearch/gateway/GatewayMetaStateTests.java b/core/src/test/java/org/elasticsearch/gateway/GatewayMetaStateTests.java
index bf7a726..62e2e23 100644
--- a/core/src/test/java/org/elasticsearch/gateway/GatewayMetaStateTests.java
+++ b/core/src/test/java/org/elasticsearch/gateway/GatewayMetaStateTests.java
@@ -29,6 +29,7 @@ import org.elasticsearch.cluster.routing.RoutingTable;
 import org.elasticsearch.cluster.routing.allocation.AllocationService;
 import org.elasticsearch.cluster.routing.allocation.decider.ClusterRebalanceAllocationDecider;
 import org.elasticsearch.test.ESAllocationTestCase;
+import org.junit.Test;
 
 import java.util.HashMap;
 import java.util.Iterator;
@@ -190,6 +191,7 @@ public class GatewayMetaStateTests extends ESAllocationTestCase {
         }
     }
 
+    @Test
     public void testVersionChangeIsAlwaysWritten() throws Exception {
         // test that version changes are always written
         boolean initializing = randomBoolean();
@@ -201,6 +203,7 @@ public class GatewayMetaStateTests extends ESAllocationTestCase {
         assertState(event, stateInMemory, expectMetaData);
     }
 
+    @Test
     public void testNewShardsAlwaysWritten() throws Exception {
         // make sure new shards on data only node always written
         boolean initializing = true;
@@ -212,6 +215,7 @@ public class GatewayMetaStateTests extends ESAllocationTestCase {
         assertState(event, stateInMemory, expectMetaData);
     }
 
+    @Test
     public void testAllUpToDateNothingWritten() throws Exception {
         // make sure state is not written again if we wrote already
         boolean initializing = false;
@@ -223,6 +227,7 @@ public class GatewayMetaStateTests extends ESAllocationTestCase {
         assertState(event, stateInMemory, expectMetaData);
     }
 
+    @Test
     public void testNoWriteIfNothingChanged() throws Exception {
         boolean initializing = false;
         boolean versionChanged = false;
@@ -234,6 +239,7 @@ public class GatewayMetaStateTests extends ESAllocationTestCase {
         assertState(newEventWithNothingChanged, stateInMemory, expectMetaData);
     }
 
+    @Test
     public void testWriteClosedIndex() throws Exception {
         // test that the closing of an index is written also on data only node
         boolean masterEligible = randomBoolean();
diff --git a/core/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java b/core/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java
index 486092f..ccb0746 100644
--- a/core/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java
+++ b/core/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java
@@ -24,10 +24,14 @@ import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.cluster.NoopClusterService;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 
+
 public class GatewayServiceTests extends ESTestCase {
+
+
     private GatewayService createService(Settings.Builder settings) {
         return new GatewayService(Settings.builder()
                 .put("http.enabled", "false")
@@ -36,7 +40,9 @@ public class GatewayServiceTests extends ESTestCase {
 
     }
 
+    @Test
     public void testDefaultRecoverAfterTime() throws IOException {
+
         // check that the default is not set
         GatewayService service = createService(Settings.builder());
         assertNull(service.recoverAfterTime());
diff --git a/core/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java b/core/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java
index d7f4c91..ba417ac 100644
--- a/core/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java
+++ b/core/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java
@@ -39,9 +39,10 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.XContentType;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import java.io.IOException;
 import java.io.InputStream;
+import java.io.IOException;
 import java.io.OutputStream;
 import java.net.URISyntaxException;
 import java.nio.ByteBuffer;
@@ -67,6 +68,8 @@ import static org.hamcrest.Matchers.startsWith;
 
 @LuceneTestCase.SuppressFileSystems("ExtrasFS") // TODO: fix test to work with ExtrasFS
 public class MetaDataStateFormatTests extends ESTestCase {
+
+
     /**
      * Ensure we can read a pre-generated cluster state.
      */
@@ -135,6 +138,7 @@ public class MetaDataStateFormatTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testVersionMismatch() throws IOException {
         Path[] dirs = new Path[randomIntBetween(1, 5)];
         for (int i = 0; i < dirs.length; i++) {
@@ -204,7 +208,7 @@ public class MetaDataStateFormatTests extends ESTestCase {
                 long filePointer = raf.position();
                 ByteBuffer bb = ByteBuffer.wrap(new byte[1]);
                 raf.read(bb);
-
+                
                 bb.flip();
                 byte oldValue = bb.get(0);
                 byte newValue = (byte) ~oldValue;
@@ -311,6 +315,7 @@ public class MetaDataStateFormatTests extends ESTestCase {
         assertEquals(state.clusterUUID(), uuid);
     }
 
+    @Test
     public void testLoadState() throws IOException {
         final ToXContent.Params params = ToXContent.EMPTY_PARAMS;
         final Path[] dirs = new Path[randomIntBetween(1, 5)];
@@ -484,9 +489,9 @@ public class MetaDataStateFormatTests extends ESTestCase {
             long temp;
             result = string.hashCode();
             result = 31 * result + aInt;
-            result = 31 * result + Long.hashCode(aLong);
+            result = 31 * result + (int) (aLong ^ (aLong >>> 32));
             temp = Double.doubleToLongBits(aDouble);
-            result = 31 * result + Long.hashCode(temp);
+            result = 31 * result + (int) (temp ^ (temp >>> 32));
             result = 31 * result + (aBoolean ? 1 : 0);
             return result;
         }
diff --git a/core/src/test/java/org/elasticsearch/gateway/MetaDataWriteDataNodesIT.java b/core/src/test/java/org/elasticsearch/gateway/MetaDataWriteDataNodesIT.java
index 1c3ec79..970819d 100644
--- a/core/src/test/java/org/elasticsearch/gateway/MetaDataWriteDataNodesIT.java
+++ b/core/src/test/java/org/elasticsearch/gateway/MetaDataWriteDataNodesIT.java
@@ -30,20 +30,23 @@ import org.elasticsearch.env.NodeEnvironment;
 import org.elasticsearch.index.Index;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.InternalTestCluster;
-import org.elasticsearch.test.InternalTestCluster.RestartCallback;
+import org.junit.Test;
 
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.LinkedHashMap;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
+import static org.elasticsearch.test.InternalTestCluster.RestartCallback;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.hamcrest.Matchers.equalTo;
 
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0)
 public class MetaDataWriteDataNodesIT extends ESIntegTestCase {
+
+    @Test
     public void testMetaWrittenAlsoOnDataNode() throws Exception {
         // this test checks that index state is written on data only nodes if they have a shard allocated
         String masterNode = internalCluster().startMasterOnlyNode(Settings.EMPTY);
@@ -55,6 +58,7 @@ public class MetaDataWriteDataNodesIT extends ESIntegTestCase {
         assertIndexInMetaState(masterNode, "test");
     }
 
+    @Test
     public void testMetaIsRemovedIfAllShardsFromIndexRemoved() throws Exception {
         // this test checks that the index state is removed from a data only node once all shards have been allocated away from it
         String masterNode = internalCluster().startMasterOnlyNode(Settings.EMPTY);
@@ -80,6 +84,7 @@ public class MetaDataWriteDataNodesIT extends ESIntegTestCase {
         assertIndexInMetaState(masterNode, index);
     }
 
+    @Test
     public void testMetaWrittenWhenIndexIsClosedAndMetaUpdated() throws Exception {
         String masterNode = internalCluster().startMasterOnlyNode(Settings.EMPTY);
         final String dataNode = internalCluster().startDataOnlyNode(Settings.EMPTY);
diff --git a/core/src/test/java/org/elasticsearch/gateway/MetaStateServiceTests.java b/core/src/test/java/org/elasticsearch/gateway/MetaStateServiceTests.java
index 8bcb9c4..de66f95 100644
--- a/core/src/test/java/org/elasticsearch/gateway/MetaStateServiceTests.java
+++ b/core/src/test/java/org/elasticsearch/gateway/MetaStateServiceTests.java
@@ -25,6 +25,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.XContentType;
 import org.elasticsearch.env.NodeEnvironment;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.nullValue;
@@ -32,12 +33,14 @@ import static org.hamcrest.Matchers.nullValue;
 /**
  */
 public class MetaStateServiceTests extends ESTestCase {
+
     private static Settings indexSettings = Settings.builder()
             .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)
             .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)
             .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)
             .build();
 
+    @Test
     public void testWriteLoadIndex() throws Exception {
         try (NodeEnvironment env = newNodeEnvironment()) {
             MetaStateService metaStateService = new MetaStateService(randomSettings(), env);
@@ -48,6 +51,7 @@ public class MetaStateServiceTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testLoadMissingIndex() throws Exception {
         try (NodeEnvironment env = newNodeEnvironment()) {
             MetaStateService metaStateService = new MetaStateService(randomSettings(), env);
@@ -55,6 +59,7 @@ public class MetaStateServiceTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testWriteLoadGlobal() throws Exception {
         try (NodeEnvironment env = newNodeEnvironment()) {
             MetaStateService metaStateService = new MetaStateService(randomSettings(), env);
@@ -67,6 +72,7 @@ public class MetaStateServiceTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testWriteGlobalStateWithIndexAndNoIndexIsLoaded() throws Exception {
         try (NodeEnvironment env = newNodeEnvironment()) {
             MetaStateService metaStateService = new MetaStateService(randomSettings(), env);
@@ -83,7 +89,8 @@ public class MetaStateServiceTests extends ESTestCase {
         }
     }
 
-    public void testLoadGlobal() throws Exception {
+    @Test
+    public void tesLoadGlobal() throws Exception {
         try (NodeEnvironment env = newNodeEnvironment()) {
             MetaStateService metaStateService = new MetaStateService(randomSettings(), env);
 
diff --git a/core/src/test/java/org/elasticsearch/gateway/PrimaryShardAllocatorTests.java b/core/src/test/java/org/elasticsearch/gateway/PrimaryShardAllocatorTests.java
index 2598215..ce6a8b0 100644
--- a/core/src/test/java/org/elasticsearch/gateway/PrimaryShardAllocatorTests.java
+++ b/core/src/test/java/org/elasticsearch/gateway/PrimaryShardAllocatorTests.java
@@ -27,13 +27,7 @@ import org.elasticsearch.cluster.metadata.MetaData;
 import org.elasticsearch.cluster.metadata.SnapshotId;
 import org.elasticsearch.cluster.node.DiscoveryNode;
 import org.elasticsearch.cluster.node.DiscoveryNodes;
-import org.elasticsearch.cluster.routing.RestoreSource;
-import org.elasticsearch.cluster.routing.RoutingNodes;
-import org.elasticsearch.cluster.routing.RoutingTable;
-import org.elasticsearch.cluster.routing.ShardRouting;
-import org.elasticsearch.cluster.routing.ShardRoutingState;
-import org.elasticsearch.cluster.routing.TestShardRouting;
-import org.elasticsearch.cluster.routing.UnassignedInfo;
+import org.elasticsearch.cluster.routing.*;
 import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;
 import org.elasticsearch.cluster.routing.allocation.decider.AllocationDeciders;
 import org.elasticsearch.common.Nullable;
@@ -41,6 +35,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.test.ESAllocationTestCase;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Collections;
@@ -48,9 +43,7 @@ import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 
-import static org.hamcrest.Matchers.anyOf;
-import static org.hamcrest.Matchers.contains;
-import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
@@ -71,11 +64,13 @@ public class PrimaryShardAllocatorTests extends ESAllocationTestCase {
      * Verifies that the canProcess method of primary allocation behaves correctly
      * and processes only the applicable shard.
      */
+    @Test
     public void testNoProcessReplica() {
         ShardRouting shard = TestShardRouting.newShardRouting("test", 0, null, null, null, false, ShardRoutingState.UNASSIGNED, 0, new UnassignedInfo(UnassignedInfo.Reason.CLUSTER_RECOVERED, null));
         assertThat(testAllocator.needToFindPrimaryCopy(shard), equalTo(false));
     }
 
+    @Test
     public void testNoProcessPrimayNotAllcoatedBefore() {
         ShardRouting shard = TestShardRouting.newShardRouting("test", 0, null, null, null, true, ShardRoutingState.UNASSIGNED, 0, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
         assertThat(testAllocator.needToFindPrimaryCopy(shard), equalTo(false));
@@ -84,6 +79,7 @@ public class PrimaryShardAllocatorTests extends ESAllocationTestCase {
     /**
      * Tests that when async fetch returns that there is no data, the shard will not be allocated.
      */
+    @Test
     public void testNoAsyncFetchData() {
         RoutingAllocation allocation = routingAllocationWithOnePrimaryNoReplicas(yesAllocationDeciders());
         boolean changed = testAllocator.allocateUnassigned(allocation);
@@ -95,6 +91,7 @@ public class PrimaryShardAllocatorTests extends ESAllocationTestCase {
     /**
      * Tests when the node returns that no data was found for it (-1), it will be moved to ignore unassigned.
      */
+    @Test
     public void testNoAllocationFound() {
         RoutingAllocation allocation = routingAllocationWithOnePrimaryNoReplicas(yesAllocationDeciders());
         testAllocator.addData(node1, -1);
@@ -107,6 +104,7 @@ public class PrimaryShardAllocatorTests extends ESAllocationTestCase {
     /**
      * Tests when the node returns that no data was found for it (-1), it will be moved to ignore unassigned.
      */
+    @Test
     public void testStoreException() {
         RoutingAllocation allocation = routingAllocationWithOnePrimaryNoReplicas(yesAllocationDeciders());
         testAllocator.addData(node1, 3, new CorruptIndexException("test", "test"));
@@ -119,6 +117,7 @@ public class PrimaryShardAllocatorTests extends ESAllocationTestCase {
     /**
      * Tests that when there is a node to allocate the shard to, it will be allocated to it.
      */
+    @Test
     public void testFoundAllocationAndAllocating() {
         RoutingAllocation allocation = routingAllocationWithOnePrimaryNoReplicas(yesAllocationDeciders());
         testAllocator.addData(node1, 10);
@@ -133,6 +132,7 @@ public class PrimaryShardAllocatorTests extends ESAllocationTestCase {
      * Tests that when there is a node to allocate to, but it is throttling (and it is the only one),
      * it will be moved to ignore unassigned until it can be allocated to.
      */
+    @Test
     public void testFoundAllocationButThrottlingDecider() {
         RoutingAllocation allocation = routingAllocationWithOnePrimaryNoReplicas(throttleAllocationDeciders());
         testAllocator.addData(node1, 10);
@@ -146,6 +146,7 @@ public class PrimaryShardAllocatorTests extends ESAllocationTestCase {
      * Tests that when there is a node to be allocated to, but it the decider said "no", we still
      * force the allocation to it.
      */
+    @Test
     public void testFoundAllocationButNoDecider() {
         RoutingAllocation allocation = routingAllocationWithOnePrimaryNoReplicas(noAllocationDeciders());
         testAllocator.addData(node1, 10);
@@ -159,6 +160,7 @@ public class PrimaryShardAllocatorTests extends ESAllocationTestCase {
     /**
      * Tests that the highest version node is chosed for allocation.
      */
+    @Test
     public void testAllocateToTheHighestVersion() {
         RoutingAllocation allocation = routingAllocationWithOnePrimaryNoReplicas(yesAllocationDeciders());
         testAllocator.addData(node1, 10).addData(node2, 12);
@@ -173,6 +175,7 @@ public class PrimaryShardAllocatorTests extends ESAllocationTestCase {
      * Tests that when restoring from snapshot, even if we didn't find any node to allocate on, the shard
      * will remain in the unassigned list to be allocated later.
      */
+    @Test
     public void testRestoreIgnoresNoNodesToAllocate() {
         MetaData metaData = MetaData.builder()
                 .put(IndexMetaData.builder(shardId.getIndex()).settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))
@@ -196,6 +199,7 @@ public class PrimaryShardAllocatorTests extends ESAllocationTestCase {
      * Tests that only when enough copies of the shard exists we are going to allocate it. This test
      * verifies that with same version (1), and quorum allocation.
      */
+    @Test
     public void testEnoughCopiesFoundForAllocation() {
         MetaData metaData = MetaData.builder()
                 .put(IndexMetaData.builder(shardId.getIndex()).settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2))
@@ -237,6 +241,7 @@ public class PrimaryShardAllocatorTests extends ESAllocationTestCase {
      * Tests that only when enough copies of the shard exists we are going to allocate it. This test
      * verifies that even with different version, we treat different versions as a copy, and count them.
      */
+    @Test
     public void testEnoughCopiesFoundForAllocationWithDifferentVersion() {
         MetaData metaData = MetaData.builder()
                 .put(IndexMetaData.builder(shardId.getIndex()).settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2))
@@ -274,6 +279,7 @@ public class PrimaryShardAllocatorTests extends ESAllocationTestCase {
         assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(), equalTo(node2.id()));
     }
 
+    @Test
     public void testAllocationOnAnyNodeWithSharedFs() {
         ShardRouting shard = TestShardRouting.newShardRouting("test", 0, null, null, null, false,
                 ShardRoutingState.UNASSIGNED, 0,
@@ -298,6 +304,8 @@ public class PrimaryShardAllocatorTests extends ESAllocationTestCase {
         assertThat(nAndV.nodes, contains(node2, node1, node3));
     }
 
+
+    @Test
     public void testAllocationOnAnyNodeShouldPutNodesWithExceptionsLast() {
         ShardRouting shard = TestShardRouting.newShardRouting("test", 0, null, null, null, false,
                 ShardRoutingState.UNASSIGNED, 0,
diff --git a/core/src/test/java/org/elasticsearch/gateway/QuorumGatewayIT.java b/core/src/test/java/org/elasticsearch/gateway/QuorumGatewayIT.java
index 3932101..ee8a520 100644
--- a/core/src/test/java/org/elasticsearch/gateway/QuorumGatewayIT.java
+++ b/core/src/test/java/org/elasticsearch/gateway/QuorumGatewayIT.java
@@ -26,8 +26,8 @@ import org.elasticsearch.client.Client;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.InternalTestCluster.RestartCallback;
+import org.junit.Test;
 
 import java.util.concurrent.TimeUnit;
 
@@ -35,6 +35,7 @@ import static org.elasticsearch.client.Requests.clusterHealthRequest;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
 import static org.hamcrest.Matchers.equalTo;
@@ -46,11 +47,13 @@ import static org.hamcrest.Matchers.notNullValue;
  */
 @ClusterScope(numDataNodes =0, scope= Scope.TEST)
 public class QuorumGatewayIT extends ESIntegTestCase {
+
     @Override
     protected int numberOfReplicas() {
         return 2;
     }
 
+    @Test
     public void testChangeInitialShardsRecovery() throws Exception {
         logger.info("--> starting 3 nodes");
         final String[] nodes = internalCluster().startNodesAsync(3).get().toArray(new String[0]);
@@ -70,7 +73,7 @@ public class QuorumGatewayIT extends ESIntegTestCase {
         for (int i = 0; i < 10; i++) {
             assertHitCount(client().prepareSearch().setSize(0).setQuery(matchAllQuery()).get(), 2l);
         }
-
+        
         final String nodeToRemove = nodes[between(0,2)];
         logger.info("--> restarting 1 nodes -- kill 2");
         internalCluster().fullRestart(new RestartCallback() {
@@ -78,7 +81,7 @@ public class QuorumGatewayIT extends ESIntegTestCase {
             public Settings onNodeStopped(String nodeName) throws Exception {
                 return Settings.EMPTY;
             }
-
+            
             @Override
             public boolean doRestart(String nodeName) {
                 return nodeToRemove.equals(nodeName);
@@ -112,7 +115,9 @@ public class QuorumGatewayIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testQuorumRecovery() throws Exception {
+
         logger.info("--> starting 3 nodes");
         internalCluster().startNodesAsync(3).get();
         // we are shutting down nodes - make sure we don't have 2 clusters if we test network
@@ -157,7 +162,7 @@ public class QuorumGatewayIT extends ESIntegTestCase {
                     }
                 }
             }
-
+            
         });
         logger.info("--> all nodes are started back, verifying we got the latest version");
         logger.info("--> running cluster_health (wait for the shards to startup)");
diff --git a/core/src/test/java/org/elasticsearch/gateway/RecoverAfterNodesIT.java b/core/src/test/java/org/elasticsearch/gateway/RecoverAfterNodesIT.java
index 3dd6597..5766ef3 100644
--- a/core/src/test/java/org/elasticsearch/gateway/RecoverAfterNodesIT.java
+++ b/core/src/test/java/org/elasticsearch/gateway/RecoverAfterNodesIT.java
@@ -27,6 +27,7 @@ import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import java.util.Set;
 
@@ -36,6 +37,7 @@ import static org.hamcrest.Matchers.hasItem;
 
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0)
 public class RecoverAfterNodesIT extends ESIntegTestCase {
+
     private final static TimeValue BLOCK_WAIT_TIMEOUT = TimeValue.timeValueSeconds(10);
 
     public Set<ClusterBlock> waitForNoBlocksOnNode(TimeValue timeout, Client nodeClient) throws InterruptedException {
@@ -54,6 +56,7 @@ public class RecoverAfterNodesIT extends ESIntegTestCase {
         return internalCluster().client(name);
     }
 
+    @Test
     public void testRecoverAfterNodes() throws Exception {
         logger.info("--> start node (1)");
         Client clientNode1 = startNode(settingsBuilder().put("gateway.recover_after_nodes", 3));
@@ -79,6 +82,7 @@ public class RecoverAfterNodesIT extends ESIntegTestCase {
         assertThat(waitForNoBlocksOnNode(BLOCK_WAIT_TIMEOUT, clientNode3).isEmpty(), equalTo(true));
     }
 
+    @Test
     public void testRecoverAfterMasterNodes() throws Exception {
         logger.info("--> start master_node (1)");
         Client master1 = startNode(settingsBuilder().put("gateway.recover_after_master_nodes", 2).put("node.data", false).put("node.master", true));
@@ -115,6 +119,7 @@ public class RecoverAfterNodesIT extends ESIntegTestCase {
         assertThat(waitForNoBlocksOnNode(BLOCK_WAIT_TIMEOUT, data2).isEmpty(), equalTo(true));
     }
 
+    @Test
     public void testRecoverAfterDataNodes() throws Exception {
         logger.info("--> start master_node (1)");
         Client master1 = startNode(settingsBuilder().put("gateway.recover_after_data_nodes", 2).put("node.data", false).put("node.master", true));
diff --git a/core/src/test/java/org/elasticsearch/gateway/RecoveryBackwardsCompatibilityIT.java b/core/src/test/java/org/elasticsearch/gateway/RecoveryBackwardsCompatibilityIT.java
index 2184fda..d55343b 100644
--- a/core/src/test/java/org/elasticsearch/gateway/RecoveryBackwardsCompatibilityIT.java
+++ b/core/src/test/java/org/elasticsearch/gateway/RecoveryBackwardsCompatibilityIT.java
@@ -29,6 +29,7 @@ import org.elasticsearch.common.xcontent.XContentHelper;
 import org.elasticsearch.indices.recovery.RecoveryState;
 import org.elasticsearch.test.ESBackcompatTestCase;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.HashMap;
 
@@ -39,6 +40,8 @@ import static org.hamcrest.Matchers.greaterThan;
 
 @ESIntegTestCase.ClusterScope(numDataNodes = 0, scope = ESIntegTestCase.Scope.TEST, numClientNodes = 0, transportClientRatio = 0.0)
 public class RecoveryBackwardsCompatibilityIT extends ESBackcompatTestCase {
+
+
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return Settings.builder()
@@ -57,6 +60,7 @@ public class RecoveryBackwardsCompatibilityIT extends ESBackcompatTestCase {
         return 3;
     }
 
+    @Test
     public void testReusePeerRecovery() throws Exception {
         assertAcked(prepareCreate("test").setSettings(Settings.builder().put(indexSettings())
                 .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)
diff --git a/core/src/test/java/org/elasticsearch/gateway/RecoveryFromGatewayIT.java b/core/src/test/java/org/elasticsearch/gateway/RecoveryFromGatewayIT.java
index 665eec8..77e63ff 100644
--- a/core/src/test/java/org/elasticsearch/gateway/RecoveryFromGatewayIT.java
+++ b/core/src/test/java/org/elasticsearch/gateway/RecoveryFromGatewayIT.java
@@ -34,10 +34,10 @@ import org.elasticsearch.indices.flush.SyncedFlushUtil;
 import org.elasticsearch.indices.recovery.RecoveryState;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.InternalTestCluster.RestartCallback;
 import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.elasticsearch.test.store.MockFSDirectoryService;
+import org.junit.Test;
 
 import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_REPLICAS;
 import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;
@@ -45,6 +45,7 @@ import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
 import static org.elasticsearch.index.query.QueryBuilders.termQuery;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
 import static org.hamcrest.Matchers.equalTo;
@@ -54,6 +55,8 @@ import static org.hamcrest.Matchers.notNullValue;
 
 @ClusterScope(numDataNodes = 0, scope = Scope.TEST)
 public class RecoveryFromGatewayIT extends ESIntegTestCase {
+
+    @Test
     public void testOneNodeRecoverFromGateway() throws Exception {
 
         internalCluster().startNode();
@@ -95,7 +98,9 @@ public class RecoveryFromGatewayIT extends ESIntegTestCase {
         assertHitCount(client().prepareSearch().setSize(0).setQuery(termQuery("appAccountIds", 179)).execute().actionGet(), 2);
     }
 
+    @Test
     public void testSingleNodeNoFlush() throws Exception {
+
         internalCluster().startNode();
 
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
@@ -178,8 +183,10 @@ public class RecoveryFromGatewayIT extends ESIntegTestCase {
             assertHitCount(client().prepareSearch().setSize(0).setQuery(termQuery("num", 179)).get(), value1Docs);
         }
     }
-
+    
+    @Test
     public void testSingleNodeWithFlush() throws Exception {
+
         internalCluster().startNode();
         client().prepareIndex("test", "type1", "1").setSource(jsonBuilder().startObject().field("field", "value1").endObject()).execute().actionGet();
         flush();
@@ -210,7 +217,9 @@ public class RecoveryFromGatewayIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testTwoNodeFirstNodeCleared() throws Exception {
+
         final String firstNode = internalCluster().startNode();
         internalCluster().startNode();
 
@@ -247,6 +256,7 @@ public class RecoveryFromGatewayIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testLatestVersionLoaded() throws Exception {
         // clean two nodes
         internalCluster().startNodesAsync(2, settingsBuilder().put("gateway.recover_after_nodes", 2).build()).get();
@@ -319,6 +329,7 @@ public class RecoveryFromGatewayIT extends ESIntegTestCase {
         assertThat(state.metaData().index("test").getAliases().get("test_alias").filter(), notNullValue());
     }
 
+    @Test
     @TestLogging("gateway:TRACE,indices.recovery:TRACE,index.engine:TRACE")
     public void testReusePeerRecovery() throws Exception {
         final Settings settings = settingsBuilder()
@@ -349,7 +360,7 @@ public class RecoveryFromGatewayIT extends ESIntegTestCase {
         }
         logger.info("Running Cluster Health");
         ensureGreen();
-        client().admin().indices().prepareOptimize("test").setMaxNumSegments(100).get(); // just wait for merges
+        client().admin().indices().prepareForceMerge("test").setMaxNumSegments(100).get(); // just wait for merges
         client().admin().indices().prepareFlush().setWaitIfOngoing(true).setForce(true).get();
 
         boolean useSyncIds = randomBoolean();
@@ -427,6 +438,7 @@ public class RecoveryFromGatewayIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testRecoveryDifferentNodeOrderStartup() throws Exception {
         // we need different data paths so we make sure we start the second node fresh
 
diff --git a/core/src/test/java/org/elasticsearch/gateway/ReplicaShardAllocatorTests.java b/core/src/test/java/org/elasticsearch/gateway/ReplicaShardAllocatorTests.java
index 6a0aabe..e692b62 100644
--- a/core/src/test/java/org/elasticsearch/gateway/ReplicaShardAllocatorTests.java
+++ b/core/src/test/java/org/elasticsearch/gateway/ReplicaShardAllocatorTests.java
@@ -50,6 +50,7 @@ import org.elasticsearch.index.store.StoreFileMetaData;
 import org.elasticsearch.indices.store.TransportNodesListShardStoreMetaData;
 import org.elasticsearch.test.ESAllocationTestCase;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.Collections;
 import java.util.EnumSet;
@@ -63,6 +64,7 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public class ReplicaShardAllocatorTests extends ESAllocationTestCase {
+
     private final ShardId shardId = new ShardId("test", 0);
     private final DiscoveryNode node1 = newNode("node1");
     private final DiscoveryNode node2 = newNode("node2");
@@ -78,6 +80,7 @@ public class ReplicaShardAllocatorTests extends ESAllocationTestCase {
     /**
      * Verifies that when we are still fetching data in an async manner, the replica shard moves to ignore unassigned.
      */
+    @Test
     public void testNoAsyncFetchData() {
         RoutingAllocation allocation = onePrimaryOnNode1And1Replica(yesAllocationDeciders());
         testAllocator.clean();
@@ -90,6 +93,7 @@ public class ReplicaShardAllocatorTests extends ESAllocationTestCase {
      * Verifies that on index creation, we don't go and fetch data, but keep the replica shard unassigned to let
      * the shard allocator to allocate it. There isn't a copy around to find anyhow.
      */
+    @Test
     public void testNoAsyncFetchOnIndexCreation() {
         RoutingAllocation allocation = onePrimaryOnNode1And1Replica(yesAllocationDeciders(), Settings.EMPTY, UnassignedInfo.Reason.INDEX_CREATED);
         testAllocator.clean();
@@ -103,6 +107,7 @@ public class ReplicaShardAllocatorTests extends ESAllocationTestCase {
      * Verifies that for anything but index creation, fetch data ends up being called, since we need to go and try
      * and find a better copy for the shard.
      */
+    @Test
     public void testAsyncFetchOnAnythingButIndexCreation() {
         UnassignedInfo.Reason reason = RandomPicks.randomFrom(getRandom(), EnumSet.complementOf(EnumSet.of(UnassignedInfo.Reason.INDEX_CREATED)));
         RoutingAllocation allocation = onePrimaryOnNode1And1Replica(yesAllocationDeciders(), Settings.EMPTY, reason);
@@ -114,6 +119,7 @@ public class ReplicaShardAllocatorTests extends ESAllocationTestCase {
     /**
      * Verifies that when there is a full match (syncId and files) we allocate it to matching node.
      */
+    @Test
     public void testSimpleFullMatchAllocation() {
         RoutingAllocation allocation = onePrimaryOnNode1And1Replica(yesAllocationDeciders());
         DiscoveryNode nodeToMatch = randomBoolean() ? node2 : node3;
@@ -127,6 +133,7 @@ public class ReplicaShardAllocatorTests extends ESAllocationTestCase {
     /**
      * Verifies that when there is a sync id match but no files match, we allocate it to matching node.
      */
+    @Test
     public void testSyncIdMatch() {
         RoutingAllocation allocation = onePrimaryOnNode1And1Replica(yesAllocationDeciders());
         DiscoveryNode nodeToMatch = randomBoolean() ? node2 : node3;
@@ -140,6 +147,7 @@ public class ReplicaShardAllocatorTests extends ESAllocationTestCase {
     /**
      * Verifies that when there is no sync id match but files match, we allocate it to matching node.
      */
+    @Test
     public void testFileChecksumMatch() {
         RoutingAllocation allocation = onePrimaryOnNode1And1Replica(yesAllocationDeciders());
         DiscoveryNode nodeToMatch = randomBoolean() ? node2 : node3;
@@ -156,6 +164,7 @@ public class ReplicaShardAllocatorTests extends ESAllocationTestCase {
      * adding a replica and having that replica actually recover and cause the corruption to be identified
      * See CorruptFileTest#
      */
+    @Test
     public void testNoPrimaryData() {
         RoutingAllocation allocation = onePrimaryOnNode1And1Replica(yesAllocationDeciders());
         testAllocator.addData(node2, true, "MATCH", new StoreFileMetaData("file1", 10, "MATCH_CHECKSUM"));
@@ -168,6 +177,7 @@ public class ReplicaShardAllocatorTests extends ESAllocationTestCase {
      * Verifies that when there is primary data, but no data at all on other nodes, the shard keeps
      * unassigned to be allocated later on.
      */
+    @Test
     public void testNoDataForReplicaOnAnyNode() {
         RoutingAllocation allocation = onePrimaryOnNode1And1Replica(yesAllocationDeciders());
         testAllocator.addData(node1, true, "MATCH", new StoreFileMetaData("file1", 10, "MATCH_CHECKSUM"));
@@ -180,6 +190,7 @@ public class ReplicaShardAllocatorTests extends ESAllocationTestCase {
      * Verifies that when there is primary data, but no matching data at all on other nodes, the shard keeps
      * unassigned to be allocated later on.
      */
+    @Test
     public void testNoMatchingFilesForReplicaOnAnyNode() {
         RoutingAllocation allocation = onePrimaryOnNode1And1Replica(yesAllocationDeciders());
         testAllocator.addData(node1, true, "MATCH", new StoreFileMetaData("file1", 10, "MATCH_CHECKSUM"))
@@ -193,6 +204,7 @@ public class ReplicaShardAllocatorTests extends ESAllocationTestCase {
      * When there is no decision or throttle decision across all nodes for the shard, make sure the shard
      * moves to the ignore unassigned list.
      */
+    @Test
     public void testNoOrThrottleDecidersRemainsInUnassigned() {
         RoutingAllocation allocation = onePrimaryOnNode1And1Replica(randomBoolean() ? noAllocationDeciders() : throttleAllocationDeciders());
         testAllocator.addData(node1, true, "MATCH", new StoreFileMetaData("file1", 10, "MATCH_CHECKSUM"))
@@ -206,6 +218,7 @@ public class ReplicaShardAllocatorTests extends ESAllocationTestCase {
      * Tests when the node to allocate to due to matching is being throttled, we move the shard to ignored
      * to wait till throttling on it is done.
      */
+    @Test
     public void testThrottleWhenAllocatingToMatchingNode() {
         RoutingAllocation allocation = onePrimaryOnNode1And1Replica(new AllocationDeciders(Settings.EMPTY,
                 new AllocationDecider[]{new TestAllocateDecision(Decision.YES), new AllocationDecider(Settings.EMPTY) {
@@ -224,6 +237,7 @@ public class ReplicaShardAllocatorTests extends ESAllocationTestCase {
         assertThat(allocation.routingNodes().unassigned().ignored().get(0).shardId(), equalTo(shardId));
     }
 
+    @Test
     public void testDelayedAllocation() {
         RoutingAllocation allocation = onePrimaryOnNode1And1Replica(yesAllocationDeciders(),
                 Settings.builder().put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING, TimeValue.timeValueHours(1)).build(), UnassignedInfo.Reason.NODE_LEFT);
@@ -246,6 +260,7 @@ public class ReplicaShardAllocatorTests extends ESAllocationTestCase {
         assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(), equalTo(node2.id()));
     }
 
+    @Test
     public void testCancelRecoveryBetterSyncId() {
         RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders());
         testAllocator.addData(node1, true, "MATCH", new StoreFileMetaData("file1", 10, "MATCH_CHECKSUM"))
@@ -257,6 +272,7 @@ public class ReplicaShardAllocatorTests extends ESAllocationTestCase {
         assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).get(0).shardId(), equalTo(shardId));
     }
 
+    @Test
     public void testNotCancellingRecoveryIfSyncedOnExistingRecovery() {
         RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders());
         testAllocator.addData(node1, true, "MATCH", new StoreFileMetaData("file1", 10, "MATCH_CHECKSUM"))
@@ -267,6 +283,7 @@ public class ReplicaShardAllocatorTests extends ESAllocationTestCase {
         assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).size(), equalTo(0));
     }
 
+    @Test
     public void testNotCancellingRecovery() {
         RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders());
         testAllocator.addData(node1, true, "MATCH", new StoreFileMetaData("file1", 10, "MATCH_CHECKSUM"))
diff --git a/core/src/test/java/org/elasticsearch/get/GetActionIT.java b/core/src/test/java/org/elasticsearch/get/GetActionIT.java
index 1b58ea5..b26e3ec 100644
--- a/core/src/test/java/org/elasticsearch/get/GetActionIT.java
+++ b/core/src/test/java/org/elasticsearch/get/GetActionIT.java
@@ -25,11 +25,7 @@ import org.elasticsearch.action.ShardOperationFailedException;
 import org.elasticsearch.action.admin.indices.alias.Alias;
 import org.elasticsearch.action.admin.indices.flush.FlushResponse;
 import org.elasticsearch.action.delete.DeleteResponse;
-import org.elasticsearch.action.get.GetRequestBuilder;
-import org.elasticsearch.action.get.GetResponse;
-import org.elasticsearch.action.get.MultiGetRequest;
-import org.elasticsearch.action.get.MultiGetRequestBuilder;
-import org.elasticsearch.action.get.MultiGetResponse;
+import org.elasticsearch.action.get.*;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.Strings;
@@ -42,6 +38,7 @@ import org.elasticsearch.index.engine.VersionConflictEngineException;
 import org.elasticsearch.index.mapper.internal.TimestampFieldMapper;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.junit.annotations.TestLogging;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Collections;
@@ -52,17 +49,12 @@ import java.util.Set;
 import static java.util.Collections.singleton;
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.hasKey;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
-import static org.hamcrest.Matchers.startsWith;
+import static org.hamcrest.Matchers.*;
 
 public class GetActionIT extends ESIntegTestCase {
-    public void testSimpleGet() {
+
+    @Test
+    public void simpleGetTests() {
         assertAcked(prepareCreate("test")
                 .setSettings(Settings.settingsBuilder().put("index.refresh_interval", -1))
                 .addAlias(new Alias("alias")));
@@ -190,7 +182,8 @@ public class GetActionIT extends ESIntegTestCase {
         return randomBoolean() ? "test" : "alias";
     }
 
-    public void testSimpleMultiGet() throws Exception {
+    @Test
+    public void simpleMultiGetTests() throws Exception {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias"))
                 .setSettings(Settings.settingsBuilder().put("index.refresh_interval", -1)));
         ensureGreen();
@@ -242,7 +235,8 @@ public class GetActionIT extends ESIntegTestCase {
         assertThat(response.getResponses()[0].getResponse().getField("field").getValues().get(0).toString(), equalTo("value1"));
     }
 
-    public void testRealtimeGetWithCompressBackcompat() throws Exception {
+    @Test
+    public void realtimeGetWithCompressBackcompat() throws Exception {
         assertAcked(prepareCreate("test")
                 .setSettings(Settings.settingsBuilder().put("index.refresh_interval", -1).put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id))
                 .addMapping("type", jsonBuilder().startObject().startObject("type").startObject("_source").field("compress", true).endObject().endObject().endObject()));
@@ -261,6 +255,7 @@ public class GetActionIT extends ESIntegTestCase {
         assertThat(getResponse.getSourceAsMap().get("field").toString(), equalTo(fieldValue));
     }
 
+    @Test
     public void testGetDocWithMultivaluedFields() throws Exception {
         String mapping1 = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties")
@@ -335,6 +330,7 @@ public class GetActionIT extends ESIntegTestCase {
         assertThat(response.getFields().get("field").getValues().get(1).toString(), equalTo("2"));
     }
 
+    @Test
     public void testThatGetFromTranslogShouldWorkWithExcludeBackcompat() throws Exception {
         String index = "test";
         String type = "type1";
@@ -368,6 +364,7 @@ public class GetActionIT extends ESIntegTestCase {
         assertThat(responseBeforeFlush.getSourceAsString(), is(responseAfterFlush.getSourceAsString()));
     }
 
+    @Test
     public void testThatGetFromTranslogShouldWorkWithIncludeBackcompat() throws Exception {
         String index = "test";
         String type = "type1";
@@ -402,6 +399,7 @@ public class GetActionIT extends ESIntegTestCase {
     }
 
     @SuppressWarnings("unchecked")
+    @Test
     public void testThatGetFromTranslogShouldWorkWithIncludeExcludeAndFieldsBackcompat() throws Exception {
         String index = "test";
         String type = "type1";
@@ -457,6 +455,7 @@ public class GetActionIT extends ESIntegTestCase {
         assertThat(responseBeforeFlushWithExtraFilters.getSourceAsString(), is(responseAfterFlushWithExtraFilters.getSourceAsString()));
     }
 
+    @Test
     public void testGetWithVersion() {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias"))
                 .setSettings(Settings.settingsBuilder().put("index.refresh_interval", -1)));
@@ -556,6 +555,7 @@ public class GetActionIT extends ESIntegTestCase {
         assertThat(response.getVersion(), equalTo(2l));
     }
 
+    @Test
     public void testMultiGetWithVersion() throws Exception {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias"))
                 .setSettings(Settings.settingsBuilder().put("index.refresh_interval", -1)));
@@ -671,7 +671,8 @@ public class GetActionIT extends ESIntegTestCase {
         assertThat(response.getResponses()[2].getResponse().getSourceAsMap().get("field").toString(), equalTo("value2"));
     }
 
-    public void testGetFieldsMetaData() throws Exception {
+    @Test
+    public void testGetFields_metaData() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
                 .addMapping("my-type1", "_timestamp", "enabled=true", "_ttl", "enabled=true", "_parent", "type=parent")
@@ -725,7 +726,8 @@ public class GetActionIT extends ESIntegTestCase {
         assertThat(getResponse.getField("_parent").getValue().toString(), equalTo("parent_1"));
     }
 
-    public void testGetFieldsNonLeafField() throws Exception {
+    @Test
+    public void testGetFields_nonLeafField() throws Exception {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias"))
                 .addMapping("my-type1", jsonBuilder().startObject().startObject("my-type1").startObject("properties")
                         .startObject("field1").startObject("properties")
@@ -755,8 +757,9 @@ public class GetActionIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     @TestLogging("index.shard.service:TRACE,cluster.service:TRACE,action.admin.indices.flush:TRACE")
-    public void testGetFieldsComplexField() throws Exception {
+    public void testGetFields_complexField() throws Exception {
         assertAcked(prepareCreate("my-index")
                 .setSettings(Settings.settingsBuilder().put("index.refresh_interval", -1))
                 .addMapping("my-type2", jsonBuilder().startObject().startObject("my-type2").startObject("properties")
@@ -847,7 +850,8 @@ public class GetActionIT extends ESIntegTestCase {
         assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"));
     }
 
-    public void testGetAllField() throws Exception {
+    @Test
+    public void testGet_allField() throws Exception {
         assertAcked(prepareCreate("test")
                 .addAlias(new Alias("alias"))
                 .addMapping("my-type1", jsonBuilder()
@@ -871,6 +875,7 @@ public class GetActionIT extends ESIntegTestCase {
         assertThat(getResponse.getField("_all").getValue().toString(), equalTo("some text" + " "));
     }
 
+    @Test
     public void testUngeneratedFieldsThatAreNeverStored() throws IOException {
         String createIndexSource = "{\n" +
                 "  \"settings\": {\n" +
@@ -911,6 +916,7 @@ public class GetActionIT extends ESIntegTestCase {
         assertGetFieldsAlwaysNull(indexOrAlias(), "doc", "1", fieldsList);
     }
 
+    @Test
     public void testUngeneratedFieldsThatAreAlwaysStored() throws IOException {
         String createIndexSource = "{\n" +
                 "  \"settings\": {\n" +
@@ -949,6 +955,7 @@ public class GetActionIT extends ESIntegTestCase {
         assertGetFieldsAlwaysWorks(indexOrAlias(), "doc", "1", fieldsList, "1");
     }
 
+    @Test
     public void testUngeneratedFieldsPartOfSourceUnstoredSourceDisabledBackcompat() throws IOException {
         indexSingleDocumentWithUngeneratedFieldsThatArePartOf_source(false, false);
         String[] fieldsList = {};
@@ -962,6 +969,7 @@ public class GetActionIT extends ESIntegTestCase {
         assertGetFieldsAlwaysNull(indexOrAlias(), "doc", "1", fieldsList);
     }
 
+    @Test
     public void testUngeneratedFieldsPartOfSourceEitherStoredOrSourceEnabledBackcompat() throws IOException {
         boolean stored = randomBoolean();
         boolean sourceEnabled = true;
@@ -1006,6 +1014,7 @@ public class GetActionIT extends ESIntegTestCase {
         client().prepareIndex("test", "doc").setId("1").setSource(doc).setRouting("1").get();
     }
 
+    @Test
     public void testUngeneratedFieldsNotPartOfSourceStored() throws IOException {
         String createIndexSource = "{\n" +
             "  \"settings\": {\n" +
@@ -1039,6 +1048,7 @@ public class GetActionIT extends ESIntegTestCase {
         assertGetFieldsAlwaysWorks(indexOrAlias(), "doc", "1", fieldsList, "1");
     }
 
+    @Test
     public void testGeneratedStringFieldsUnstored() throws IOException {
         indexSingleDocumentWithStringFieldsGeneratedFromText(false, randomBoolean());
         String[] fieldsList = {"_all", "_field_names"};
@@ -1052,6 +1062,7 @@ public class GetActionIT extends ESIntegTestCase {
         assertGetFieldsAlwaysNull(indexOrAlias(), "doc", "1", fieldsList);
     }
 
+    @Test
     public void testGeneratedStringFieldsStored() throws IOException {
         indexSingleDocumentWithStringFieldsGeneratedFromText(true, randomBoolean());
         String[] fieldsList = {"_all"};
@@ -1096,6 +1107,8 @@ public class GetActionIT extends ESIntegTestCase {
         index("test", "doc", "1", doc);
     }
 
+
+    @Test
     public void testGeneratedNumberFieldsUnstored() throws IOException {
         indexSingleDocumentWithNumericFieldsGeneratedFromText(false, randomBoolean());
         String[] fieldsList = {"token_count", "text.token_count"};
@@ -1109,6 +1122,7 @@ public class GetActionIT extends ESIntegTestCase {
         assertGetFieldsAlwaysNull(indexOrAlias(), "doc", "1", fieldsList);
     }
 
+    @Test
     public void testGeneratedNumberFieldsStored() throws IOException {
         indexSingleDocumentWithNumericFieldsGeneratedFromText(true, randomBoolean());
         String[] fieldsList = {"token_count", "text.token_count"};
diff --git a/core/src/test/java/org/elasticsearch/http/netty/HttpPublishPortIT.java b/core/src/test/java/org/elasticsearch/http/netty/HttpPublishPortIT.java
index 4d73b52..687c015 100644
--- a/core/src/test/java/org/elasticsearch/http/netty/HttpPublishPortIT.java
+++ b/core/src/test/java/org/elasticsearch/http/netty/HttpPublishPortIT.java
@@ -25,16 +25,16 @@ import org.elasticsearch.common.transport.BoundTransportAddress;
 import org.elasticsearch.common.transport.InetSocketTransportAddress;
 import org.elasticsearch.node.Node;
 import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
+import static org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.Matchers.arrayWithSize;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.instanceOf;
+import static org.hamcrest.Matchers.*;
 
 @ClusterScope(scope = Scope.SUITE, numDataNodes = 1)
 public class HttpPublishPortIT extends ESIntegTestCase {
+
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return Settings.settingsBuilder()
@@ -44,6 +44,7 @@ public class HttpPublishPortIT extends ESIntegTestCase {
                 .build();
     }
 
+    @Test
     public void testHttpPublishPort() throws Exception {
         NodesInfoResponse response = client().admin().cluster().prepareNodesInfo().clear().setHttp(true).get();
         assertThat(response.getNodes(), arrayWithSize(greaterThanOrEqualTo(1)));
diff --git a/core/src/test/java/org/elasticsearch/http/netty/NettyHttpChannelTests.java b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpChannelTests.java
index cb111a7..0a4b057 100644
--- a/core/src/test/java/org/elasticsearch/http/netty/NettyHttpChannelTests.java
+++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpChannelTests.java
@@ -19,42 +19,33 @@
 
 package org.elasticsearch.http.netty;
 
-import org.elasticsearch.cache.recycler.MockPageCacheRecycler;
 import org.elasticsearch.common.bytes.BytesArray;
 import org.elasticsearch.common.bytes.BytesReference;
 import org.elasticsearch.common.network.NetworkService;
 import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.common.util.MockBigArrays;
 import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
 import org.elasticsearch.rest.RestResponse;
 import org.elasticsearch.rest.RestStatus;
 import org.elasticsearch.test.ESTestCase;
+import org.elasticsearch.common.util.MockBigArrays;
+import org.elasticsearch.cache.recycler.MockPageCacheRecycler;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
-import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelConfig;
-import org.jboss.netty.channel.ChannelFactory;
-import org.jboss.netty.channel.ChannelFuture;
-import org.jboss.netty.channel.ChannelPipeline;
-import org.jboss.netty.handler.codec.http.DefaultHttpHeaders;
-import org.jboss.netty.handler.codec.http.HttpHeaders;
-import org.jboss.netty.handler.codec.http.HttpMethod;
-import org.jboss.netty.handler.codec.http.HttpRequest;
-import org.jboss.netty.handler.codec.http.HttpResponse;
-import org.jboss.netty.handler.codec.http.HttpVersion;
+import org.jboss.netty.channel.*;
+import org.jboss.netty.handler.codec.http.*;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.net.SocketAddress;
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 public class NettyHttpChannelTests extends ESTestCase {
+
     private NetworkService networkService;
     private ThreadPool threadPool;
     private MockBigArrays bigArrays;
@@ -78,6 +69,7 @@ public class NettyHttpChannelTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testCorsEnabledWithoutAllowOrigins() {
         // Set up a HTTP transport with only the CORS enabled setting
         Settings settings = Settings.builder()
@@ -101,6 +93,7 @@ public class NettyHttpChannelTests extends ESTestCase {
         assertThat(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN), nullValue());
     }
 
+    @Test
     public void testCorsEnabledWithAllowOrigins() {
         // create a http transport with CORS enabled and allow origin configured
         Settings settings = Settings.builder()
diff --git a/core/src/test/java/org/elasticsearch/http/netty/NettyHttpServerPipeliningTests.java b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpServerPipeliningTests.java
index 53c743d..74e30d5 100644
--- a/core/src/test/java/org/elasticsearch/http/netty/NettyHttpServerPipeliningTests.java
+++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpServerPipeliningTests.java
@@ -18,13 +18,13 @@
  */
 package org.elasticsearch.http.netty;
 
+import java.nio.charset.StandardCharsets;
 import org.elasticsearch.cache.recycler.MockPageCacheRecycler;
 import org.elasticsearch.common.network.NetworkService;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.transport.InetSocketTransportAddress;
 import org.elasticsearch.common.util.MockBigArrays;
 import org.elasticsearch.http.HttpServerTransport;
-import org.elasticsearch.http.netty.NettyHttpServerTransport.HttpChannelPipelineFactory;
 import org.elasticsearch.http.netty.pipelining.OrderedDownstreamChannelEvent;
 import org.elasticsearch.http.netty.pipelining.OrderedUpstreamMessageEvent;
 import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
@@ -44,8 +44,8 @@ import org.jboss.netty.handler.codec.http.HttpResponse;
 import org.jboss.netty.handler.codec.http.QueryStringDecoder;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
-import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -55,9 +55,8 @@ import java.util.concurrent.Executors;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.http.netty.NettyHttpClient.returnHttpResponseBodies;
-import static org.hamcrest.Matchers.contains;
-import static org.hamcrest.Matchers.hasSize;
-import static org.hamcrest.Matchers.is;
+import static org.elasticsearch.http.netty.NettyHttpServerTransport.HttpChannelPipelineFactory;
+import static org.hamcrest.Matchers.*;
 import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.CONTENT_LENGTH;
 import static org.jboss.netty.handler.codec.http.HttpResponseStatus.OK;
 import static org.jboss.netty.handler.codec.http.HttpVersion.HTTP_1_1;
@@ -66,6 +65,7 @@ import static org.jboss.netty.handler.codec.http.HttpVersion.HTTP_1_1;
  * This test just tests, if he pipelining works in general with out any connection the elasticsearch handler
  */
 public class NettyHttpServerPipeliningTests extends ESTestCase {
+
     private NetworkService networkService;
     private ThreadPool threadPool;
     private MockPageCacheRecycler mockPageCacheRecycler;
@@ -90,6 +90,7 @@ public class NettyHttpServerPipeliningTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testThatHttpPipeliningWorksWhenEnabled() throws Exception {
         Settings settings = settingsBuilder().put("http.pipelining", true).build();
         httpServerTransport = new CustomNettyHttpServerTransport(settings);
@@ -104,6 +105,7 @@ public class NettyHttpServerPipeliningTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testThatHttpPipeliningCanBeDisabled() throws Exception {
         Settings settings = settingsBuilder().put("http.pipelining", false).build();
         httpServerTransport = new CustomNettyHttpServerTransport(settings);
diff --git a/core/src/test/java/org/elasticsearch/http/netty/NettyPipeliningDisabledIT.java b/core/src/test/java/org/elasticsearch/http/netty/NettyPipeliningDisabledIT.java
index f4ce375..964f985 100644
--- a/core/src/test/java/org/elasticsearch/http/netty/NettyPipeliningDisabledIT.java
+++ b/core/src/test/java/org/elasticsearch/http/netty/NettyPipeliningDisabledIT.java
@@ -23,9 +23,8 @@ import org.elasticsearch.common.transport.InetSocketTransportAddress;
 import org.elasticsearch.http.HttpServerTransport;
 import org.elasticsearch.node.Node;
 import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.jboss.netty.handler.codec.http.HttpResponse;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -35,6 +34,8 @@ import java.util.Locale;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.http.netty.NettyHttpClient.returnOpaqueIds;
+import static org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.hamcrest.Matchers.hasSize;
 
@@ -43,11 +44,13 @@ import static org.hamcrest.Matchers.hasSize;
  */
 @ClusterScope(scope = Scope.TEST, numDataNodes = 1)
 public class NettyPipeliningDisabledIT extends ESIntegTestCase {
+
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return settingsBuilder().put(super.nodeSettings(nodeOrdinal)).put(Node.HTTP_ENABLED, true).put("http.pipelining", false).build();
     }
 
+    @Test
     public void testThatNettyHttpServerDoesNotSupportPipelining() throws Exception {
         ensureGreen();
         List<String> requests = Arrays.asList("/", "/_nodes/stats", "/", "/_cluster/state", "/", "/_nodes", "/");
diff --git a/core/src/test/java/org/elasticsearch/http/netty/NettyPipeliningEnabledIT.java b/core/src/test/java/org/elasticsearch/http/netty/NettyPipeliningEnabledIT.java
index 9e5971c..eafd242 100644
--- a/core/src/test/java/org/elasticsearch/http/netty/NettyPipeliningEnabledIT.java
+++ b/core/src/test/java/org/elasticsearch/http/netty/NettyPipeliningEnabledIT.java
@@ -23,9 +23,8 @@ import org.elasticsearch.common.transport.InetSocketTransportAddress;
 import org.elasticsearch.http.HttpServerTransport;
 import org.elasticsearch.node.Node;
 import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.jboss.netty.handler.codec.http.HttpResponse;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.Collection;
@@ -34,17 +33,21 @@ import java.util.Locale;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.http.netty.NettyHttpClient.returnOpaqueIds;
+import static org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.hamcrest.Matchers.hasSize;
 import static org.hamcrest.Matchers.is;
 
 
 @ClusterScope(scope = Scope.TEST, numDataNodes = 1)
 public class NettyPipeliningEnabledIT extends ESIntegTestCase {
+
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return settingsBuilder().put(super.nodeSettings(nodeOrdinal)).put(Node.HTTP_ENABLED, true).put("http.pipelining", true).build();
     }
 
+    @Test
     public void testThatNettyHttpServerSupportsPipelining() throws Exception {
         List<String> requests = Arrays.asList("/", "/_nodes/stats", "/", "/_cluster/state", "/");
 
diff --git a/core/src/test/java/org/elasticsearch/http/netty/pipelining/HttpPipeliningHandlerTests.java b/core/src/test/java/org/elasticsearch/http/netty/pipelining/HttpPipeliningHandlerTests.java
index 166d394..f21153e 100644
--- a/core/src/test/java/org/elasticsearch/http/netty/pipelining/HttpPipeliningHandlerTests.java
+++ b/core/src/test/java/org/elasticsearch/http/netty/pipelining/HttpPipeliningHandlerTests.java
@@ -22,31 +22,16 @@ import org.elasticsearch.common.network.NetworkAddress;
 import org.elasticsearch.test.ESTestCase;
 import org.jboss.netty.bootstrap.ClientBootstrap;
 import org.jboss.netty.bootstrap.ServerBootstrap;
-import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelFuture;
-import org.jboss.netty.channel.ChannelHandlerContext;
-import org.jboss.netty.channel.ChannelPipeline;
-import org.jboss.netty.channel.ChannelPipelineFactory;
-import org.jboss.netty.channel.Channels;
-import org.jboss.netty.channel.MessageEvent;
-import org.jboss.netty.channel.SimpleChannelUpstreamHandler;
+import org.jboss.netty.channel.*;
 import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;
 import org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory;
-import org.jboss.netty.handler.codec.http.DefaultHttpChunk;
-import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
-import org.jboss.netty.handler.codec.http.DefaultHttpResponse;
-import org.jboss.netty.handler.codec.http.HttpChunk;
-import org.jboss.netty.handler.codec.http.HttpClientCodec;
-import org.jboss.netty.handler.codec.http.HttpMethod;
-import org.jboss.netty.handler.codec.http.HttpRequest;
-import org.jboss.netty.handler.codec.http.HttpRequestDecoder;
-import org.jboss.netty.handler.codec.http.HttpResponse;
-import org.jboss.netty.handler.codec.http.HttpResponseEncoder;
+import org.jboss.netty.handler.codec.http.*;
 import org.jboss.netty.util.HashedWheelTimer;
 import org.jboss.netty.util.Timeout;
 import org.jboss.netty.util.TimerTask;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
@@ -58,10 +43,7 @@ import java.util.concurrent.atomic.AtomicBoolean;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static org.jboss.netty.buffer.ChannelBuffers.EMPTY_BUFFER;
 import static org.jboss.netty.buffer.ChannelBuffers.copiedBuffer;
-import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.CONNECTION;
-import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.CONTENT_TYPE;
-import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.HOST;
-import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.TRANSFER_ENCODING;
+import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.*;
 import static org.jboss.netty.handler.codec.http.HttpHeaders.Values.CHUNKED;
 import static org.jboss.netty.handler.codec.http.HttpHeaders.Values.KEEP_ALIVE;
 import static org.jboss.netty.handler.codec.http.HttpResponseStatus.OK;
@@ -133,7 +115,8 @@ public class HttpPipeliningHandlerTests extends ESTestCase {
         clientBootstrap.releaseExternalResources();
     }
 
-    public void testShouldReturnMessagesInOrder() throws InterruptedException {
+    @Test
+    public void shouldReturnMessagesInOrder() throws InterruptedException {
         responsesIn = new CountDownLatch(1);
         responses.clear();
 
diff --git a/core/src/test/java/org/elasticsearch/index/IndexRequestBuilderIT.java b/core/src/test/java/org/elasticsearch/index/IndexRequestBuilderIT.java
index c41051e..5db3e54 100644
--- a/core/src/test/java/org/elasticsearch/index/IndexRequestBuilderIT.java
+++ b/core/src/test/java/org/elasticsearch/index/IndexRequestBuilderIT.java
@@ -25,14 +25,16 @@ import org.elasticsearch.common.bytes.BytesArray;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.hamcrest.ElasticsearchAssertions;
+import org.junit.Test;
 
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.ExecutionException;
 
-import static org.hamcrest.Matchers.containsString;
-
 public class IndexRequestBuilderIT extends ESIntegTestCase {
+    
+    
+    @Test
     public void testSetSource() throws InterruptedException, ExecutionException {
         createIndex("test");
         ensureYellow();
@@ -50,13 +52,10 @@ public class IndexRequestBuilderIT extends ESIntegTestCase {
         SearchResponse searchResponse = client().prepareSearch("test").setQuery(QueryBuilders.termQuery("test_field", "foobar")).get();
         ElasticsearchAssertions.assertHitCount(searchResponse, builders.length);
     }
-
-    public void testOddNumberOfSourceObjects() {
-        try {
-            client().prepareIndex("test", "test").setSource("test_field", "foobar", new Object());
-            fail ("Expected IllegalArgumentException");
-        } catch(IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("The number of object passed must be even but was [3]"));
-        }
+    
+    @Test(expected = IllegalArgumentException.class)
+    public void testOddNumberOfSourceObjetc() {
+        client().prepareIndex("test", "test").setSource((Object)"test_field", (Object)"foobar", new Object());
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/index/IndexServiceTests.java b/core/src/test/java/org/elasticsearch/index/IndexServiceTests.java
index 72b2622..412141c 100644
--- a/core/src/test/java/org/elasticsearch/index/IndexServiceTests.java
+++ b/core/src/test/java/org/elasticsearch/index/IndexServiceTests.java
@@ -30,16 +30,18 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.query.QueryBuilder;
 import org.elasticsearch.indices.InvalidAliasNameException;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.elasticsearch.index.query.QueryBuilders.termQuery;
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.nullValue;
 
 /** Unit test(s) for IndexService */
 public class IndexServiceTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testDetermineShadowEngineShouldBeUsed() {
         Settings regularSettings = Settings.builder()
                 .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 2)
@@ -71,7 +73,9 @@ public class IndexServiceTests extends ESSingleNodeTestCase {
         return new CompressedXContent(builder.string());
     }
 
+    @Test
     public void testFilteringAliases() throws Exception {
+
         IndexService indexService = newIndexService();
         add(indexService, "cats", filter(termQuery("animal", "cat")));
         add(indexService, "dogs", filter(termQuery("animal", "dog")));
@@ -94,6 +98,7 @@ public class IndexServiceTests extends ESSingleNodeTestCase {
         assertThat(indexService.aliasFilter("dogs", "cats").toString(), equalTo("animal:canine animal:feline"));
     }
 
+    @Test
     public void testAliasFilters() throws Exception {
         IndexService indexService = newIndexService();
         add(indexService, "cats", filter(termQuery("animal", "cat")));
@@ -109,19 +114,17 @@ public class IndexServiceTests extends ESSingleNodeTestCase {
         assertThat(indexService.aliasFilter("dogs", "cats").toString(), equalTo("animal:canine animal:feline"));
     }
 
+    @Test(expected = InvalidAliasNameException.class)
     public void testRemovedAliasFilter() throws Exception {
         IndexService indexService = newIndexService();
 
         add(indexService, "cats", filter(termQuery("animal", "cat")));
         remove(indexService, "cats");
-        try {
-            indexService.aliasFilter("cats");
-            fail("Expected InvalidAliasNameException");
-        } catch (InvalidAliasNameException e) {
-            assertThat(e.getMessage(), containsString("Invalid alias name [cats]"));
-        }
+        indexService.aliasFilter("cats");
     }
 
+
+    @Test
     public void testUnknownAliasFilter() throws Exception {
         IndexService indexService = newIndexService();
         add(indexService, "cats", filter(termQuery("animal", "cat")));
diff --git a/core/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasIT.java b/core/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasIT.java
index ed1ce65..dd73e41 100644
--- a/core/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasIT.java
+++ b/core/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasIT.java
@@ -25,6 +25,7 @@ import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRes
 import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;
 import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;
 import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;
+import org.elasticsearch.action.admin.indices.stats.ShardStats;
 import org.elasticsearch.action.get.GetResponse;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.index.IndexResponse;
@@ -51,11 +52,12 @@ import org.elasticsearch.transport.TransportException;
 import org.elasticsearch.transport.TransportRequest;
 import org.elasticsearch.transport.TransportRequestOptions;
 import org.elasticsearch.transport.TransportService;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.nio.file.Path;
-import java.util.ArrayList;
 import java.util.Collection;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CountDownLatch;
@@ -64,13 +66,8 @@ import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertOrderedSearchHits;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
+import static org.hamcrest.Matchers.*;
 
 /**
  * Tests for indices that use shadow replicas and a shared filesystem
@@ -170,6 +167,7 @@ public class IndexWithShadowReplicasIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testIndexWithFewDocuments() throws Exception {
         final Path dataPath = createTempDir();
         Settings nodeSettings = nodeSettings(dataPath);
@@ -248,6 +246,7 @@ public class IndexWithShadowReplicasIT extends ESIntegTestCase {
         assertAcked(client().admin().indices().prepareDelete(IDX));
     }
 
+    @Test
     public void testReplicaToPrimaryPromotion() throws Exception {
         Path dataPath = createTempDir();
         Settings nodeSettings = nodeSettings(dataPath);
@@ -306,6 +305,7 @@ public class IndexWithShadowReplicasIT extends ESIntegTestCase {
         assertThat(gResp2.getField("foo").getValue().toString(), equalTo("foobar"));
     }
 
+    @Test
     public void testPrimaryRelocation() throws Exception {
         Path dataPath = createTempDir();
         Settings nodeSettings = nodeSettings(dataPath);
@@ -366,6 +366,7 @@ public class IndexWithShadowReplicasIT extends ESIntegTestCase {
         assertThat(gResp2.getField("foo").getValue().toString(), equalTo("bar"));
     }
 
+    @Test
     public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable {
         Path dataPath = createTempDir();
         Settings nodeSettings = nodeSettings(dataPath);
@@ -438,6 +439,7 @@ public class IndexWithShadowReplicasIT extends ESIntegTestCase {
         assertHitCount(resp, numPhase1Docs + numPhase2Docs);
     }
 
+    @Test
     public void testPrimaryRelocationWhereRecoveryFails() throws Exception {
         Path dataPath = createTempDir();
         Settings nodeSettings = Settings.builder()
@@ -533,6 +535,7 @@ public class IndexWithShadowReplicasIT extends ESIntegTestCase {
         assertHitCount(resp, counter.get());
     }
 
+    @Test
     public void testIndexWithShadowReplicasCleansUp() throws Exception {
         Path dataPath = createTempDir();
         Settings nodeSettings = nodeSettings(dataPath);
@@ -573,6 +576,7 @@ public class IndexWithShadowReplicasIT extends ESIntegTestCase {
      * Tests that shadow replicas can be "naturally" rebalanced and relocated
      * around the cluster. By "naturally" I mean without using the reroute API
      */
+    @Test
     public void testShadowReplicaNaturalRelocation() throws Exception {
         Path dataPath = createTempDir();
         Settings nodeSettings = nodeSettings(dataPath);
@@ -626,6 +630,7 @@ public class IndexWithShadowReplicasIT extends ESIntegTestCase {
         assertPathHasBeenCleared(dataPath);
     }
 
+    @Test
     public void testShadowReplicasUsingFieldData() throws Exception {
         Path dataPath = createTempDir();
         Settings nodeSettings = nodeSettings(dataPath);
@@ -694,6 +699,7 @@ public class IndexWithShadowReplicasIT extends ESIntegTestCase {
         });
     }
 
+    @Test
     public void testIndexOnSharedFSRecoversToAnyNode() throws Exception {
         Path dataPath = createTempDir();
         Settings nodeSettings = nodeSettings(dataPath);
diff --git a/core/src/test/java/org/elasticsearch/index/TransportIndexFailuresIT.java b/core/src/test/java/org/elasticsearch/index/TransportIndexFailuresIT.java
index 5348211..aed603c 100644
--- a/core/src/test/java/org/elasticsearch/index/TransportIndexFailuresIT.java
+++ b/core/src/test/java/org/elasticsearch/index/TransportIndexFailuresIT.java
@@ -34,6 +34,7 @@ import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.transport.MockTransportService;
 import org.elasticsearch.transport.TransportService;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.List;
@@ -75,6 +76,7 @@ public class TransportIndexFailuresIT extends ESIntegTestCase {
         return 1;
     }
 
+    @Test
     public void testNetworkPartitionDuringReplicaIndexOp() throws Exception {
         final String INDEX = "testidx";
 
diff --git a/core/src/test/java/org/elasticsearch/index/VersionTypeTests.java b/core/src/test/java/org/elasticsearch/index/VersionTypeTests.java
index d54d1a9..3f7ea54 100644
--- a/core/src/test/java/org/elasticsearch/index/VersionTypeTests.java
+++ b/core/src/test/java/org/elasticsearch/index/VersionTypeTests.java
@@ -21,11 +21,14 @@ package org.elasticsearch.index;
 
 import org.elasticsearch.common.lucene.uid.Versions;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 
 public class VersionTypeTests extends ESTestCase {
+    @Test
     public void testInternalVersionConflict() throws Exception {
+
         assertFalse(VersionType.INTERNAL.isVersionConflictForWrites(10, Versions.MATCH_ANY, randomBoolean()));
         assertFalse(VersionType.INTERNAL.isVersionConflictForReads(10, Versions.MATCH_ANY));
         // if we don't have a version in the index we accept everything
@@ -67,6 +70,7 @@ public class VersionTypeTests extends ESTestCase {
 //        updatedVersion = (currentVersion == Versions.NOT_SET || currentVersion == Versions.NOT_FOUND) ? 1 : currentVersion + 1;
     }
 
+    @Test
     public void testVersionValidation() {
         assertTrue(VersionType.EXTERNAL.validateVersionForWrites(randomIntBetween(1, Integer.MAX_VALUE)));
         assertFalse(VersionType.EXTERNAL.validateVersionForWrites(Versions.MATCH_ANY));
@@ -97,7 +101,9 @@ public class VersionTypeTests extends ESTestCase {
         assertFalse(VersionType.INTERNAL.validateVersionForReads(randomIntBetween(Integer.MIN_VALUE, -1)));
     }
 
+    @Test
     public void testExternalVersionConflict() throws Exception {
+
         assertFalse(VersionType.EXTERNAL.isVersionConflictForWrites(Versions.NOT_FOUND, 10, randomBoolean()));
         assertFalse(VersionType.EXTERNAL.isVersionConflictForWrites(Versions.NOT_SET, 10, randomBoolean()));
         // MATCH_ANY must throw an exception in the case of external version, as the version must be set! it used as the new value
@@ -133,7 +139,9 @@ public class VersionTypeTests extends ESTestCase {
 //        updatedVersion = index.version();
     }
 
+    @Test
     public void testExternalGTEVersionConflict() throws Exception {
+
         assertFalse(VersionType.EXTERNAL_GTE.isVersionConflictForWrites(Versions.NOT_FOUND, 10, randomBoolean()));
         assertFalse(VersionType.EXTERNAL_GTE.isVersionConflictForWrites(Versions.NOT_SET, 10, randomBoolean()));
         // MATCH_ANY must throw an exception in the case of external version, as the version must be set! it used as the new value
@@ -160,7 +168,9 @@ public class VersionTypeTests extends ESTestCase {
 
     }
 
+    @Test
     public void testForceVersionConflict() throws Exception {
+
         assertFalse(VersionType.FORCE.isVersionConflictForWrites(Versions.NOT_FOUND, 10, randomBoolean()));
         assertFalse(VersionType.FORCE.isVersionConflictForWrites(Versions.NOT_SET, 10, randomBoolean()));
 
@@ -191,7 +201,9 @@ public class VersionTypeTests extends ESTestCase {
         assertFalse(VersionType.FORCE.isVersionConflictForReads(10, Versions.MATCH_ANY));
     }
 
+    @Test
     public void testUpdateVersion() {
+
         assertThat(VersionType.INTERNAL.updateVersion(Versions.NOT_SET, 10), equalTo(1l));
         assertThat(VersionType.INTERNAL.updateVersion(Versions.NOT_FOUND, 10), equalTo(1l));
         assertThat(VersionType.INTERNAL.updateVersion(1, 1), equalTo(2l));
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/ASCIIFoldingTokenFilterFactoryTests.java b/core/src/test/java/org/elasticsearch/index/analysis/ASCIIFoldingTokenFilterFactoryTests.java
index 17bd9d5..d31cc0a 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/ASCIIFoldingTokenFilterFactoryTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/ASCIIFoldingTokenFilterFactoryTests.java
@@ -22,6 +22,7 @@ package org.elasticsearch.index.analysis;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.WhitespaceTokenizer;
 import org.elasticsearch.test.ESTokenStreamTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.StringReader;
@@ -29,6 +30,7 @@ import java.io.StringReader;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 
 public class ASCIIFoldingTokenFilterFactoryTests extends ESTokenStreamTestCase {
+    @Test
     public void testDefault() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromSettings(settingsBuilder()
                 .put("path.home", createTempDir().toString())
@@ -42,6 +44,7 @@ public class ASCIIFoldingTokenFilterFactoryTests extends ESTokenStreamTestCase {
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected);
     }
 
+    @Test
     public void testPreserveOriginal() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromSettings(settingsBuilder()
                 .put("path.home", createTempDir().toString())
@@ -55,4 +58,5 @@ public class ASCIIFoldingTokenFilterFactoryTests extends ESTokenStreamTestCase {
         tokenizer.setReader(new StringReader(source));
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected);
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/AnalysisTests.java b/core/src/test/java/org/elasticsearch/index/analysis/AnalysisTests.java
index 061e0d9..abfe520 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/AnalysisTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/AnalysisTests.java
@@ -22,12 +22,15 @@ package org.elasticsearch.index.analysis;
 import org.apache.lucene.analysis.util.CharArraySet;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.is;
 
 public class AnalysisTests extends ESTestCase {
+    @Test
     public void testParseStemExclusion() {
+
         /* Comma separated list */
         Settings settings = settingsBuilder().put("stem_exclusion", "foo,bar").build();
         CharArraySet set = Analysis.parseStemExclusion(settings, CharArraySet.EMPTY_SET);
@@ -42,4 +45,5 @@ public class AnalysisTests extends ESTestCase {
         assertThat(set.contains("bar"), is(true));
         assertThat(set.contains("baz"), is(false));
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/CJKFilterFactoryTests.java b/core/src/test/java/org/elasticsearch/index/analysis/CJKFilterFactoryTests.java
index d2e2d4c..98ed9d2 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/CJKFilterFactoryTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/CJKFilterFactoryTests.java
@@ -22,13 +22,16 @@ package org.elasticsearch.index.analysis;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.standard.StandardTokenizer;
 import org.elasticsearch.test.ESTokenStreamTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.StringReader;
 
 public class CJKFilterFactoryTests extends ESTokenStreamTestCase {
+
     private static final String RESOURCE = "/org/elasticsearch/index/analysis/cjk_analysis.json";
 
+    @Test
     public void testDefault() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromClassPath(createTempDir(), RESOURCE);
         TokenFilterFactory tokenFilter = analysisService.tokenFilter("cjk_bigram");
@@ -39,6 +42,7 @@ public class CJKFilterFactoryTests extends ESTokenStreamTestCase {
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected);
     }
 
+    @Test
     public void testNoFlags() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromClassPath(createTempDir(), RESOURCE);
         TokenFilterFactory tokenFilter = analysisService.tokenFilter("cjk_no_flags");
@@ -48,7 +52,8 @@ public class CJKFilterFactoryTests extends ESTokenStreamTestCase {
         tokenizer.setReader(new StringReader(source));
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected);
     }
-
+    
+    @Test
     public void testHanOnly() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromClassPath(createTempDir(), RESOURCE);
         TokenFilterFactory tokenFilter = analysisService.tokenFilter("cjk_han_only");
@@ -58,7 +63,8 @@ public class CJKFilterFactoryTests extends ESTokenStreamTestCase {
         tokenizer.setReader(new StringReader(source));
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected);
     }
-
+    
+    @Test
     public void testHanUnigramOnly() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromClassPath(createTempDir(), RESOURCE);
         TokenFilterFactory tokenFilter = analysisService.tokenFilter("cjk_han_unigram_only");
@@ -68,4 +74,7 @@ public class CJKFilterFactoryTests extends ESTokenStreamTestCase {
         tokenizer.setReader(new StringReader(source));
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected);
     }
+    
+
+
 }
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/CharFilterTests.java b/core/src/test/java/org/elasticsearch/index/analysis/CharFilterTests.java
index 9f3544e..0171b4c 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/CharFilterTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/CharFilterTests.java
@@ -31,12 +31,15 @@ import org.elasticsearch.index.IndexNameModule;
 import org.elasticsearch.index.settings.IndexSettingsModule;
 import org.elasticsearch.indices.analysis.IndicesAnalysisService;
 import org.elasticsearch.test.ESTokenStreamTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 
 /**
  */
 public class CharFilterTests extends ESTokenStreamTestCase {
+
+    @Test
     public void testMappingCharFilter() throws Exception {
         Index index = new Index("test");
         Settings settings = settingsBuilder()
@@ -57,13 +60,14 @@ public class CharFilterTests extends ESTokenStreamTestCase {
         AnalysisService analysisService = injector.getInstance(AnalysisService.class);
 
         NamedAnalyzer analyzer1 = analysisService.analyzer("custom_with_char_filter");
-
+        
         assertTokenStreamContents(analyzer1.tokenStream("test", "jeff quit phish"), new String[]{"jeff", "qit", "fish"});
 
         // Repeat one more time to make sure that char filter is reinitialized correctly
         assertTokenStreamContents(analyzer1.tokenStream("test", "jeff quit phish"), new String[]{"jeff", "qit", "fish"});
     }
 
+    @Test
     public void testHtmlStripCharFilter() throws Exception {
         Index index = new Index("test");
         Settings settings = settingsBuilder()
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/CompoundAnalysisTests.java b/core/src/test/java/org/elasticsearch/index/analysis/CompoundAnalysisTests.java
index 523760c..28b30e9 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/CompoundAnalysisTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/CompoundAnalysisTests.java
@@ -40,6 +40,7 @@ import org.elasticsearch.index.settings.IndexSettingsModule;
 import org.elasticsearch.indices.analysis.IndicesAnalysisService;
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.MatcherAssert;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -53,6 +54,8 @@ import static org.hamcrest.Matchers.instanceOf;
 /**
  */
 public class CompoundAnalysisTests extends ESTestCase {
+
+    @Test
     public void testDefaultsCompoundAnalysis() throws Exception {
         Index index = new Index("test");
         Settings settings = getJsonSettings();
@@ -71,6 +74,7 @@ public class CompoundAnalysisTests extends ESTestCase {
         MatcherAssert.assertThat(filterFactory, instanceOf(DictionaryCompoundWordTokenFilterFactory.class));
     }
 
+    @Test
     public void testDictionaryDecompounder() throws Exception {
         Settings[] settingsArr = new Settings[]{getJsonSettings(), getYamlSettings()};
         for (Settings settings : settingsArr) {
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/HunspellTokenFilterFactoryTests.java b/core/src/test/java/org/elasticsearch/index/analysis/HunspellTokenFilterFactoryTests.java
index 02c4e1a..f81fef1 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/HunspellTokenFilterFactoryTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/HunspellTokenFilterFactoryTests.java
@@ -20,6 +20,7 @@ package org.elasticsearch.index.analysis;
 
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -28,6 +29,8 @@ import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 
 public class HunspellTokenFilterFactoryTests extends ESTestCase {
+
+    @Test
     public void testDedup() throws IOException {
         Settings settings = settingsBuilder()
                 .put("path.home", createTempDir().toString())
@@ -56,4 +59,5 @@ public class HunspellTokenFilterFactoryTests extends ESTestCase {
         hunspellTokenFilter = (HunspellTokenFilterFactory) tokenFilter;
         assertThat(hunspellTokenFilter.dedup(), is(false));
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/KeepFilterFactoryTests.java b/core/src/test/java/org/elasticsearch/index/analysis/KeepFilterFactoryTests.java
index fc1459a..df382b7 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/KeepFilterFactoryTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/KeepFilterFactoryTests.java
@@ -22,8 +22,10 @@ package org.elasticsearch.index.analysis;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.WhitespaceTokenizer;
 import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.common.settings.SettingsException;
 import org.elasticsearch.test.ESTokenStreamTestCase;
 import org.junit.Assert;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.StringReader;
@@ -31,14 +33,18 @@ import java.io.StringReader;
 import static org.hamcrest.Matchers.instanceOf;
 
 public class KeepFilterFactoryTests extends ESTokenStreamTestCase {
+
     private static final String RESOURCE = "/org/elasticsearch/index/analysis/keep_analysis.json";
 
+
+    @Test
     public void testLoadWithoutSettings() {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromClassPath(createTempDir(), RESOURCE);
         TokenFilterFactory tokenFilter = analysisService.tokenFilter("keep");
         Assert.assertNull(tokenFilter);
     }
 
+    @Test
     public void testLoadOverConfiguredSettings() {
         Settings settings = Settings.settingsBuilder()
                 .put("path.home", createTempDir().toString())
@@ -54,6 +60,7 @@ public class KeepFilterFactoryTests extends ESTokenStreamTestCase {
         }
     }
 
+    @Test
     public void testKeepWordsPathSettings() {
         Settings settings = Settings.settingsBuilder()
                 .put("path.home", createTempDir().toString())
@@ -81,6 +88,7 @@ public class KeepFilterFactoryTests extends ESTokenStreamTestCase {
 
     }
 
+    @Test
     public void testCaseInsensitiveMapping() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromClassPath(createTempDir(), RESOURCE);
         TokenFilterFactory tokenFilter = analysisService.tokenFilter("my_keep_filter");
@@ -92,6 +100,7 @@ public class KeepFilterFactoryTests extends ESTokenStreamTestCase {
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected, new int[]{1, 2});
     }
 
+    @Test
     public void testCaseSensitiveMapping() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromClassPath(createTempDir(), RESOURCE);
         TokenFilterFactory tokenFilter = analysisService.tokenFilter("my_case_sensitive_keep_filter");
@@ -102,4 +111,5 @@ public class KeepFilterFactoryTests extends ESTokenStreamTestCase {
         tokenizer.setReader(new StringReader(source));
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected, new int[]{1});
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/KeepTypesFilterFactoryTests.java b/core/src/test/java/org/elasticsearch/index/analysis/KeepTypesFilterFactoryTests.java
index 1e8a0ba..fd8f70f 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/KeepTypesFilterFactoryTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/KeepTypesFilterFactoryTests.java
@@ -23,6 +23,7 @@ import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.standard.StandardTokenizer;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTokenStreamTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.StringReader;
@@ -30,6 +31,8 @@ import java.io.StringReader;
 import static org.hamcrest.Matchers.instanceOf;
 
 public class KeepTypesFilterFactoryTests extends ESTokenStreamTestCase {
+
+    @Test
     public void testKeepTypes() throws IOException {
         Settings settings = Settings.settingsBuilder()
                 .put("path.home", createTempDir().toString())
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/LimitTokenCountFilterFactoryTests.java b/core/src/test/java/org/elasticsearch/index/analysis/LimitTokenCountFilterFactoryTests.java
index e133ffc..6f283f9 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/LimitTokenCountFilterFactoryTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/LimitTokenCountFilterFactoryTests.java
@@ -23,11 +23,14 @@ import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.WhitespaceTokenizer;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTokenStreamTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.StringReader;
 
 public class LimitTokenCountFilterFactoryTests extends ESTokenStreamTestCase {
+
+    @Test
     public void testDefault() throws IOException {
         Settings settings = Settings.settingsBuilder()
                 .put("index.analysis.filter.limit_default.type", "limit")
@@ -52,6 +55,7 @@ public class LimitTokenCountFilterFactoryTests extends ESTokenStreamTestCase {
         }
     }
 
+    @Test
     public void testSettings() throws IOException {
         {
             Settings settings = Settings.settingsBuilder()
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/NGramTokenizerFactoryTests.java b/core/src/test/java/org/elasticsearch/index/analysis/NGramTokenizerFactoryTests.java
index 1fddd12..11fcf06 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/NGramTokenizerFactoryTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/NGramTokenizerFactoryTests.java
@@ -22,12 +22,7 @@ package org.elasticsearch.index.analysis;
 import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.Tokenizer;
-import org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter;
-import org.apache.lucene.analysis.ngram.EdgeNGramTokenizer;
-import org.apache.lucene.analysis.ngram.Lucene43EdgeNGramTokenFilter;
-import org.apache.lucene.analysis.ngram.Lucene43EdgeNGramTokenizer;
-import org.apache.lucene.analysis.ngram.Lucene43NGramTokenizer;
-import org.apache.lucene.analysis.ngram.NGramTokenizer;
+import org.apache.lucene.analysis.ngram.*;
 import org.apache.lucene.analysis.reverse.ReverseStringFilter;
 import org.elasticsearch.Version;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
@@ -35,6 +30,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.settings.Settings.Builder;
 import org.elasticsearch.index.Index;
 import org.elasticsearch.test.ESTokenStreamTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.StringReader;
@@ -49,6 +45,9 @@ import static com.carrotsearch.randomizedtesting.RandomizedTest.scaledRandomIntB
 import static org.hamcrest.Matchers.instanceOf;
 
 public class NGramTokenizerFactoryTests extends ESTokenStreamTestCase {
+
+
+    @Test
     public void testParseTokenChars() {
         final Index index = new Index("test");
         final String name = "ngr";
@@ -69,6 +68,7 @@ public class NGramTokenizerFactoryTests extends ESTokenStreamTestCase {
         }
     }
 
+    @Test
     public void testNoTokenChars() throws IOException {
         final Index index = new Index("test");
         final String name = "ngr";
@@ -79,6 +79,7 @@ public class NGramTokenizerFactoryTests extends ESTokenStreamTestCase {
         assertTokenStreamContents(tokenizer, new String[] {"1.", "1.3", "1.34", ".3", ".34", "34"});
     }
 
+    @Test
     public void testPreTokenization() throws IOException {
         // Make sure that pretokenization works well and that it can be used even with token chars which are supplementary characters
         final Index index = new Index("test");
@@ -96,6 +97,7 @@ public class NGramTokenizerFactoryTests extends ESTokenStreamTestCase {
             new String[] {" a", " a!", "a!", "a!$", "!$", "!$ ", "$ ", "$ 9", " 9"});
     }
 
+    @Test
     public void testPreTokenizationEdge() throws IOException {
         // Make sure that pretokenization works well and that it can be used even with token chars which are supplementary characters
         final Index index = new Index("test");
@@ -112,7 +114,8 @@ public class NGramTokenizerFactoryTests extends ESTokenStreamTestCase {
         assertTokenStreamContents(tokenizer,
                 new String[] {" a", " a!"});
     }
-
+    
+    @Test
     public void testBackwardsCompatibilityEdgeNgramTokenizer() throws Exception {
         int iters = scaledRandomIntBetween(20, 100);
         final Index index = new Index("test");
@@ -151,9 +154,10 @@ public class NGramTokenizerFactoryTests extends ESTokenStreamTestCase {
             fail("should fail side:back is not supported anymore");
         } catch (IllegalArgumentException ex) {
         }
-
+        
     }
-
+    
+    @Test
     public void testBackwardsCompatibilityNgramTokenizer() throws Exception {
         int iters = scaledRandomIntBetween(20, 100);
         for (int i = 0; i < iters; i++) {
@@ -170,7 +174,7 @@ public class NGramTokenizerFactoryTests extends ESTokenStreamTestCase {
                 Settings indexSettings = newAnalysisSettingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED, v.id).build();
                 Tokenizer nGramTokenizer = new NGramTokenizerFactory(index, indexSettings, name, settings).create();
                 nGramTokenizer.setReader(new StringReader("foo bar"));
-                if (compatVersion) {
+                if (compatVersion) { 
                     assertThat(nGramTokenizer, instanceOf(Lucene43NGramTokenizer.class));
                 } else {
                     assertThat(nGramTokenizer, instanceOf(NGramTokenizer.class));
@@ -185,7 +189,8 @@ public class NGramTokenizerFactoryTests extends ESTokenStreamTestCase {
             }
         }
     }
-
+    
+    @Test
     public void testBackwardsCompatibilityEdgeNgramTokenFilter() throws Exception {
         int iters = scaledRandomIntBetween(20, 100);
         for (int i = 0; i < iters; i++) {
@@ -209,7 +214,7 @@ public class NGramTokenizerFactoryTests extends ESTokenStreamTestCase {
                 TokenStream edgeNGramTokenFilter = new EdgeNGramTokenFilterFactory(index, indexSettings, name, settings).create(tokenizer);
                 if (reverse) {
                     assertThat(edgeNGramTokenFilter, instanceOf(ReverseStringFilter.class));
-                } else if (compatVersion) {
+                } else if (compatVersion) { 
                     assertThat(edgeNGramTokenFilter, instanceOf(Lucene43EdgeNGramTokenFilter.class));
                 } else {
                     assertThat(edgeNGramTokenFilter, instanceOf(EdgeNGramTokenFilter.class));
@@ -235,7 +240,7 @@ public class NGramTokenizerFactoryTests extends ESTokenStreamTestCase {
         }
     }
 
-
+    
     private Version randomVersion(Random random) throws IllegalArgumentException, IllegalAccessException {
         Field[] declaredFields = Version.class.getDeclaredFields();
         List<Field> versionFields = new ArrayList<>();
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/NumericAnalyzerTests.java b/core/src/test/java/org/elasticsearch/index/analysis/NumericAnalyzerTests.java
index 8994055..a9ca96c 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/NumericAnalyzerTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/NumericAnalyzerTests.java
@@ -24,6 +24,7 @@ import org.apache.lucene.analysis.NumericTokenStream.NumericTermAttribute;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -31,6 +32,8 @@ import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 
 public class NumericAnalyzerTests extends ESTestCase {
+
+    @Test
     public void testAttributeEqual() throws IOException {
         final int precisionStep = 8;
         final double value = randomDouble();
@@ -56,4 +59,5 @@ public class NumericAnalyzerTests extends ESTestCase {
         ts1.end();
         ts2.end();
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/PatternCaptureTokenFilterTests.java b/core/src/test/java/org/elasticsearch/index/analysis/PatternCaptureTokenFilterTests.java
index 880d222..6a7275b 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/PatternCaptureTokenFilterTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/PatternCaptureTokenFilterTests.java
@@ -32,11 +32,13 @@ import org.elasticsearch.index.IndexNameModule;
 import org.elasticsearch.index.settings.IndexSettingsModule;
 import org.elasticsearch.indices.analysis.IndicesAnalysisService;
 import org.elasticsearch.test.ESTokenStreamTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.hamcrest.Matchers.containsString;
 
 public class PatternCaptureTokenFilterTests extends ESTokenStreamTestCase {
+
+    @Test
     public void testPatternCaptureTokenFilter() throws Exception {
         String json = "/org/elasticsearch/index/analysis/pattern_capture.json";
         Index index = new Index("test");
@@ -66,14 +68,11 @@ public class PatternCaptureTokenFilterTests extends ESTokenStreamTestCase {
 
         assertTokenStreamContents(analyzer3.tokenStream("test", "foobarbaz"), new String[]{"foobar","foo"});
     }
-
+    
+    
+    @Test(expected=IllegalArgumentException.class)
     public void testNoPatterns() {
-        try {
-            new PatternCaptureGroupTokenFilterFactory(new Index("test"), settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build(), "pattern_capture", settingsBuilder().put("pattern", "foobar").build());
-            fail ("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("required setting 'patterns' is missing"));
-        }
+        new PatternCaptureGroupTokenFilterFactory(new Index("test"), settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build(), "pattern_capture", settingsBuilder().put("pattern", "foobar").build());
     }
 
 }
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltAnalyzerProviderFactoryTests.java b/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltAnalyzerProviderFactoryTests.java
index 2cb8f99..c18e4fd 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltAnalyzerProviderFactoryTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltAnalyzerProviderFactoryTests.java
@@ -23,6 +23,7 @@ import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.indices.analysis.PreBuiltAnalyzers;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
@@ -31,6 +32,8 @@ import static org.hamcrest.Matchers.not;
  *
  */
 public class PreBuiltAnalyzerProviderFactoryTests extends ESTestCase {
+
+    @Test
     public void testVersioningInFactoryProvider() throws Exception {
         PreBuiltAnalyzerProviderFactory factory = new PreBuiltAnalyzerProviderFactory("default", AnalyzerScope.INDEX, PreBuiltAnalyzers.STANDARD.getAnalyzer(Version.CURRENT));
 
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltAnalyzerTests.java b/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltAnalyzerTests.java
index fecb7e9..77eb0cd 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltAnalyzerTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltAnalyzerTests.java
@@ -29,6 +29,7 @@ import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.FieldMapper;
 import org.elasticsearch.indices.analysis.PreBuiltAnalyzers;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -36,15 +37,14 @@ import java.util.List;
 import java.util.Locale;
 
 import static org.elasticsearch.test.VersionUtils.randomVersion;
-import static org.hamcrest.Matchers.contains;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.not;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class PreBuiltAnalyzerTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testThatDefaultAndStandardAnalyzerAreTheSameInstance() {
         Analyzer currentStandardAnalyzer = PreBuiltAnalyzers.STANDARD.getAnalyzer(Version.CURRENT);
         Analyzer currentDefaultAnalyzer = PreBuiltAnalyzers.DEFAULT.getAnalyzer(Version.CURRENT);
@@ -53,6 +53,7 @@ public class PreBuiltAnalyzerTests extends ESSingleNodeTestCase {
         assertThat(currentDefaultAnalyzer, is(currentStandardAnalyzer));
     }
 
+    @Test
     public void testThatDefaultAndStandardAnalyzerChangedIn10Beta1() throws IOException {
         Analyzer currentStandardAnalyzer = PreBuiltAnalyzers.STANDARD.getAnalyzer(Version.V_1_0_0_Beta1);
         Analyzer currentDefaultAnalyzer = PreBuiltAnalyzers.DEFAULT.getAnalyzer(Version.V_1_0_0_Beta1);
@@ -89,6 +90,7 @@ public class PreBuiltAnalyzerTests extends ESSingleNodeTestCase {
         }
     }
 
+    @Test
     public void testAnalyzerChangedIn10RC1() throws IOException {
         Analyzer pattern = PreBuiltAnalyzers.PATTERN.getAnalyzer(Version.V_1_0_0_RC1);
         Analyzer standardHtml = PreBuiltAnalyzers.STANDARD_HTML_STRIP.getAnalyzer(Version.V_1_0_0_RC1);
@@ -123,11 +125,13 @@ public class PreBuiltAnalyzerTests extends ESSingleNodeTestCase {
         }
     }
 
+    @Test
     public void testThatInstancesAreTheSameAlwaysForKeywordAnalyzer() {
         assertThat(PreBuiltAnalyzers.KEYWORD.getAnalyzer(Version.CURRENT),
                 is(PreBuiltAnalyzers.KEYWORD.getAnalyzer(Version.V_0_18_0)));
     }
 
+    @Test
     public void testThatInstancesAreCachedAndReused() {
         assertThat(PreBuiltAnalyzers.ARABIC.getAnalyzer(Version.CURRENT),
                 is(PreBuiltAnalyzers.ARABIC.getAnalyzer(Version.CURRENT)));
@@ -135,12 +139,14 @@ public class PreBuiltAnalyzerTests extends ESSingleNodeTestCase {
                 is(PreBuiltAnalyzers.ARABIC.getAnalyzer(Version.V_0_18_0)));
     }
 
+    @Test
     public void testThatInstancesWithSameLuceneVersionAreReused() {
         // both are lucene 4.4 and should return the same instance
         assertThat(PreBuiltAnalyzers.CATALAN.getAnalyzer(Version.V_0_90_4),
                 is(PreBuiltAnalyzers.CATALAN.getAnalyzer(Version.V_0_90_5)));
     }
 
+    @Test
     public void testThatAnalyzersAreUsedInMapping() throws IOException {
         int randomInt = randomInt(PreBuiltAnalyzers.values().length-1);
         PreBuiltAnalyzers randomPreBuiltAnalyzer = PreBuiltAnalyzers.values()[randomInt];
@@ -158,7 +164,7 @@ public class PreBuiltAnalyzerTests extends ESSingleNodeTestCase {
 
         FieldMapper fieldMapper = docMapper.mappers().getMapper("field");
         assertThat(fieldMapper.fieldType().searchAnalyzer(), instanceOf(NamedAnalyzer.class));
-        NamedAnalyzer fieldMapperNamedAnalyzer = fieldMapper.fieldType().searchAnalyzer();
+        NamedAnalyzer fieldMapperNamedAnalyzer = (NamedAnalyzer) fieldMapper.fieldType().searchAnalyzer();
 
         assertThat(fieldMapperNamedAnalyzer.analyzer(), is(namedAnalyzer.analyzer()));
     }
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltCharFilterFactoryFactoryTests.java b/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltCharFilterFactoryFactoryTests.java
index a506488..863ed96 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltCharFilterFactoryFactoryTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltCharFilterFactoryFactoryTests.java
@@ -23,13 +23,17 @@ import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.indices.analysis.PreBuiltCharFilters;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.*;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  *
  */
 public class PreBuiltCharFilterFactoryFactoryTests extends ESTestCase {
+
+    @Test
     public void testThatDifferentVersionsCanBeLoaded() {
         PreBuiltCharFilterFactoryFactory factory = new PreBuiltCharFilterFactoryFactory(PreBuiltCharFilters.HTML_STRIP.getCharFilterFactory(Version.CURRENT));
 
@@ -40,4 +44,5 @@ public class PreBuiltCharFilterFactoryFactoryTests extends ESTestCase {
         assertThat(currentTokenizerFactory, is(former090TokenizerFactory));
         assertThat(currentTokenizerFactory, is(former090TokenizerFactoryCopy));
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltTokenFilterFactoryFactoryTests.java b/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltTokenFilterFactoryFactoryTests.java
index 2711379..c1cbc12 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltTokenFilterFactoryFactoryTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltTokenFilterFactoryFactoryTests.java
@@ -23,14 +23,16 @@ import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.indices.analysis.PreBuiltTokenFilters;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.CoreMatchers.not;
+import static org.hamcrest.CoreMatchers.*;
 
 /**
  *
  */
 public class PreBuiltTokenFilterFactoryFactoryTests extends ESTestCase {
+
+    @Test
     public void testThatCachingWorksForCachingStrategyOne() {
         PreBuiltTokenFilterFactoryFactory factory = new PreBuiltTokenFilterFactoryFactory(PreBuiltTokenFilters.WORD_DELIMITER.getTokenFilterFactory(Version.CURRENT));
 
@@ -42,6 +44,7 @@ public class PreBuiltTokenFilterFactoryFactoryTests extends ESTestCase {
         assertThat(currentTokenizerFactory, is(former090TokenizerFactoryCopy));
     }
 
+    @Test
     public void testThatDifferentVersionsCanBeLoaded() {
         PreBuiltTokenFilterFactoryFactory factory = new PreBuiltTokenFilterFactoryFactory(PreBuiltTokenFilters.STOP.getTokenFilterFactory(Version.CURRENT));
 
@@ -52,4 +55,5 @@ public class PreBuiltTokenFilterFactoryFactoryTests extends ESTestCase {
         assertThat(currentTokenizerFactory, is(not(former090TokenizerFactory)));
         assertThat(former090TokenizerFactory, is(former090TokenizerFactoryCopy));
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltTokenizerFactoryFactoryTests.java b/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltTokenizerFactoryFactoryTests.java
index ecf52a9..a9e8f7b 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltTokenizerFactoryFactoryTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/PreBuiltTokenizerFactoryFactoryTests.java
@@ -23,14 +23,16 @@ import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.indices.analysis.PreBuiltTokenizers;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.CoreMatchers.not;
+import static org.hamcrest.CoreMatchers.*;
 
 /**
  *
  */
 public class PreBuiltTokenizerFactoryFactoryTests extends ESTestCase {
+
+    @Test
     public void testThatDifferentVersionsCanBeLoaded() {
         PreBuiltTokenizerFactoryFactory factory = new PreBuiltTokenizerFactoryFactory(PreBuiltTokenizers.STANDARD.getTokenizerFactory(Version.CURRENT));
 
@@ -43,4 +45,5 @@ public class PreBuiltTokenizerFactoryFactoryTests extends ESTestCase {
         assertThat(currentTokenizerFactory, is(not(former090TokenizerFactoryCopy)));
         assertThat(former090TokenizerFactory, is(former090TokenizerFactoryCopy));
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/ShingleTokenFilterFactoryTests.java b/core/src/test/java/org/elasticsearch/index/analysis/ShingleTokenFilterFactoryTests.java
index 2e2a45f..26883f5 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/ShingleTokenFilterFactoryTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/ShingleTokenFilterFactoryTests.java
@@ -21,12 +21,12 @@ package org.elasticsearch.index.analysis;
 
 import com.carrotsearch.randomizedtesting.annotations.ThreadLeakScope;
 import com.carrotsearch.randomizedtesting.annotations.ThreadLeakScope.Scope;
-
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.StopFilter;
 import org.apache.lucene.analysis.core.WhitespaceTokenizer;
 import org.elasticsearch.test.ESTokenStreamTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.StringReader;
@@ -35,8 +35,10 @@ import static org.hamcrest.Matchers.instanceOf;
 
 @ThreadLeakScope(Scope.NONE)
 public class ShingleTokenFilterFactoryTests extends ESTokenStreamTestCase {
+
     private static final String RESOURCE = "/org/elasticsearch/index/analysis/shingle_analysis.json";
 
+    @Test
     public void testDefault() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromClassPath(createTempDir(), RESOURCE);
         TokenFilterFactory tokenFilter = analysisService.tokenFilter("shingle");
@@ -47,6 +49,7 @@ public class ShingleTokenFilterFactoryTests extends ESTokenStreamTestCase {
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected);
     }
 
+    @Test
     public void testInverseMapping() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromClassPath(createTempDir(), RESOURCE);
         TokenFilterFactory tokenFilter = analysisService.tokenFilter("shingle_inverse");
@@ -58,6 +61,7 @@ public class ShingleTokenFilterFactoryTests extends ESTokenStreamTestCase {
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected);
     }
 
+    @Test
     public void testInverseMappingNoShingles() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromClassPath(createTempDir(), RESOURCE);
         TokenFilterFactory tokenFilter = analysisService.tokenFilter("shingle_inverse");
@@ -69,6 +73,7 @@ public class ShingleTokenFilterFactoryTests extends ESTokenStreamTestCase {
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected);
     }
 
+    @Test
     public void testFillerToken() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromClassPath(createTempDir(), RESOURCE);
         TokenFilterFactory tokenFilter = analysisService.tokenFilter("shingle_filler");
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/StemmerTokenFilterFactoryTests.java b/core/src/test/java/org/elasticsearch/index/analysis/StemmerTokenFilterFactoryTests.java
index 737a991..22a7eff 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/StemmerTokenFilterFactoryTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/StemmerTokenFilterFactoryTests.java
@@ -18,8 +18,8 @@
  */
 package org.elasticsearch.index.analysis;
 
-import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.Tokenizer;
+import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.core.WhitespaceTokenizer;
 import org.apache.lucene.analysis.en.PorterStemFilter;
 import org.apache.lucene.analysis.snowball.SnowballFilter;
@@ -27,6 +27,7 @@ import org.elasticsearch.Version;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTokenStreamTestCase;
 import org.elasticsearch.test.VersionUtils;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.StringReader;
@@ -39,6 +40,8 @@ import static org.hamcrest.Matchers.instanceOf;
  *
  */
 public class StemmerTokenFilterFactoryTests extends ESTokenStreamTestCase {
+
+    @Test
     public void testEnglishBackwardsCompatibility() throws IOException {
         int iters = scaledRandomIntBetween(20, 100);
         for (int i = 0; i < iters; i++) {
@@ -72,6 +75,7 @@ public class StemmerTokenFilterFactoryTests extends ESTokenStreamTestCase {
 
     }
 
+    @Test
     public void testPorter2BackwardsCompatibility() throws IOException {
         int iters = scaledRandomIntBetween(20, 100);
         for (int i = 0; i < iters; i++) {
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/StopAnalyzerTests.java b/core/src/test/java/org/elasticsearch/index/analysis/StopAnalyzerTests.java
index c48d723..9265587 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/StopAnalyzerTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/StopAnalyzerTests.java
@@ -32,10 +32,13 @@ import org.elasticsearch.index.IndexNameModule;
 import org.elasticsearch.index.settings.IndexSettingsModule;
 import org.elasticsearch.indices.analysis.IndicesAnalysisService;
 import org.elasticsearch.test.ESTokenStreamTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 
 public class StopAnalyzerTests extends ESTokenStreamTestCase {
+
+    @Test
     public void testDefaultsCompoundAnalysis() throws Exception {
         String json = "/org/elasticsearch/index/analysis/stop.json";
         Index index = new Index("test");
@@ -61,4 +64,5 @@ public class StopAnalyzerTests extends ESTokenStreamTestCase {
 
         assertTokenStreamContents(analyzer2.tokenStream("test", "to be or not to be"), new String[0]);
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/StopTokenFilterTests.java b/core/src/test/java/org/elasticsearch/index/analysis/StopTokenFilterTests.java
index 79e49cd..2d52599 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/StopTokenFilterTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/StopTokenFilterTests.java
@@ -19,8 +19,8 @@
 
 package org.elasticsearch.index.analysis;
 
-import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.Tokenizer;
+import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.core.Lucene43StopFilter;
 import org.apache.lucene.analysis.core.StopFilter;
 import org.apache.lucene.analysis.core.WhitespaceTokenizer;
@@ -30,15 +30,17 @@ import org.elasticsearch.common.inject.ProvisionException;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.settings.Settings.Builder;
 import org.elasticsearch.test.ESTokenStreamTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.StringReader;
 
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.instanceOf;
 
 
 public class StopTokenFilterTests extends ESTokenStreamTestCase {
+
+    @Test(expected = ProvisionException.class)
     public void testPositionIncrementSetting() throws IOException {
         Builder builder = Settings.settingsBuilder().put("index.analysis.filter.my_stop.type", "stop")
                 .put("index.analysis.filter.my_stop.enable_position_increments", false);
@@ -47,14 +49,11 @@ public class StopTokenFilterTests extends ESTokenStreamTestCase {
         }
         builder.put("path.home", createTempDir().toString());
         Settings settings = builder.build();
-        try {
-            AnalysisTestsHelper.createAnalysisServiceFromSettings(settings);
-            fail("Expected ProvisionException");
-        } catch (ProvisionException e) {
-            assertThat(e.getMessage(), containsString("enable_position_increments is not supported anymore"));
-        }
+        AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromSettings(settings);
+        analysisService.tokenFilter("my_stop");
     }
 
+    @Test
     public void testCorrectPositionIncrementSetting() throws IOException {
         Builder builder = Settings.settingsBuilder().put("index.analysis.filter.my_stop.type", "stop");
         int thingToDo = random().nextInt(3);
@@ -82,6 +81,7 @@ public class StopTokenFilterTests extends ESTokenStreamTestCase {
         }
     }
 
+    @Test
     public void testDeprecatedPositionIncrementSettingWithVersions() throws IOException {
         Settings settings = Settings.settingsBuilder()
                 .put("index.analysis.filter.my_stop.type", "stop")
@@ -98,6 +98,7 @@ public class StopTokenFilterTests extends ESTokenStreamTestCase {
         assertThat(create, instanceOf(Lucene43StopFilter.class));
     }
 
+    @Test
     public void testThatSuggestStopFilterWorks() throws Exception {
         Settings settings = Settings.settingsBuilder()
                 .put("index.analysis.filter.my_stop.type", "stop")
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/WordDelimiterTokenFilterFactoryTests.java b/core/src/test/java/org/elasticsearch/index/analysis/WordDelimiterTokenFilterFactoryTests.java
index 5481002..d29b2eb 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/WordDelimiterTokenFilterFactoryTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/WordDelimiterTokenFilterFactoryTests.java
@@ -22,6 +22,7 @@ package org.elasticsearch.index.analysis;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.WhitespaceTokenizer;
 import org.elasticsearch.test.ESTokenStreamTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.StringReader;
@@ -29,6 +30,8 @@ import java.io.StringReader;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 
 public class WordDelimiterTokenFilterFactoryTests extends ESTokenStreamTestCase {
+
+    @Test
     public void testDefault() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromSettings(settingsBuilder()
                 .put("path.home", createTempDir().toString())
@@ -42,6 +45,7 @@ public class WordDelimiterTokenFilterFactoryTests extends ESTokenStreamTestCase
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected);
     }
 
+    @Test
     public void testCatenateWords() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromSettings(settingsBuilder()
                 .put("path.home", createTempDir().toString())
@@ -57,6 +61,7 @@ public class WordDelimiterTokenFilterFactoryTests extends ESTokenStreamTestCase
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected);
     }
 
+    @Test
     public void testCatenateNumbers() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromSettings(settingsBuilder()
                 .put("path.home", createTempDir().toString())
@@ -72,6 +77,7 @@ public class WordDelimiterTokenFilterFactoryTests extends ESTokenStreamTestCase
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected);
     }
 
+    @Test
     public void testCatenateAll() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromSettings(settingsBuilder()
                 .put("path.home", createTempDir().toString())
@@ -88,6 +94,7 @@ public class WordDelimiterTokenFilterFactoryTests extends ESTokenStreamTestCase
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected);
     }
 
+    @Test
     public void testSplitOnCaseChange() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromSettings(settingsBuilder()
                 .put("path.home", createTempDir().toString())
@@ -102,6 +109,7 @@ public class WordDelimiterTokenFilterFactoryTests extends ESTokenStreamTestCase
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected);
     }
 
+    @Test
     public void testPreserveOriginal() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromSettings(settingsBuilder()
                 .put("path.home", createTempDir().toString())
@@ -116,6 +124,7 @@ public class WordDelimiterTokenFilterFactoryTests extends ESTokenStreamTestCase
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected);
     }
 
+    @Test
     public void testStemEnglishPossessive() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromSettings(settingsBuilder()
                 .put("path.home", createTempDir().toString())
@@ -131,6 +140,7 @@ public class WordDelimiterTokenFilterFactoryTests extends ESTokenStreamTestCase
     }
 
     /** Correct offset order when doing both parts and concatenation: PowerShot is a synonym of Power */
+    @Test
     public void testPartsAndCatenate() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromSettings(settingsBuilder()
                 .put("path.home", createTempDir().toString())
@@ -145,9 +155,10 @@ public class WordDelimiterTokenFilterFactoryTests extends ESTokenStreamTestCase
         tokenizer.setReader(new StringReader(source));
         assertTokenStreamContents(tokenFilter.create(tokenizer), expected);
     }
-
-    /** Back compat:
+     
+    /** Back compat: 
      * old offset order when doing both parts and concatenation: PowerShot is a synonym of Shot */
+    @Test
     public void testDeprecatedPartsAndCatenate() throws IOException {
         AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromSettings(settingsBuilder()
                 .put("path.home", createTempDir().toString())
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/commongrams/CommonGramsTokenFilterFactoryTests.java b/core/src/test/java/org/elasticsearch/index/analysis/commongrams/CommonGramsTokenFilterFactoryTests.java
index e7a1ebf..c1bb7f8 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/commongrams/CommonGramsTokenFilterFactoryTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/commongrams/CommonGramsTokenFilterFactoryTests.java
@@ -22,12 +22,14 @@ package org.elasticsearch.index.analysis.commongrams;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.WhitespaceTokenizer;
+import org.elasticsearch.common.io.FileSystemUtils;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.analysis.AnalysisService;
 import org.elasticsearch.index.analysis.AnalysisTestsHelper;
 import org.elasticsearch.index.analysis.TokenFilterFactory;
 import org.elasticsearch.test.ESTokenStreamTestCase;
 import org.junit.Assert;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -37,6 +39,8 @@ import java.nio.file.Path;
 
 import static org.hamcrest.Matchers.instanceOf;
 public class CommonGramsTokenFilterFactoryTests extends ESTokenStreamTestCase {
+
+    @Test
     public void testDefault() throws IOException {
         Settings settings = Settings.settingsBuilder()
                                 .put("index.analysis.filter.common_grams_default.type", "common_grams")
@@ -50,7 +54,7 @@ public class CommonGramsTokenFilterFactoryTests extends ESTokenStreamTestCase {
             assertThat(e.getCause(), instanceOf(IllegalArgumentException.class));
         }
     }
-
+    @Test
     public void testWithoutCommonWordsMatch() throws IOException {
         {
             Settings settings = Settings.settingsBuilder().put("index.analysis.filter.common_grams_default.type", "common_grams")
@@ -87,6 +91,7 @@ public class CommonGramsTokenFilterFactoryTests extends ESTokenStreamTestCase {
         }
     }
 
+    @Test
     public void testSettings() throws IOException {
         {
             Settings settings = Settings.settingsBuilder().put("index.analysis.filter.common_grams_1.type", "common_grams")
@@ -131,6 +136,7 @@ public class CommonGramsTokenFilterFactoryTests extends ESTokenStreamTestCase {
         }
     }
 
+    @Test
     public void testCommonGramsAnalysis() throws IOException {
         String json = "/org/elasticsearch/index/analysis/commongrams/commongrams.json";
         Settings settings = Settings.settingsBuilder()
@@ -153,6 +159,7 @@ public class CommonGramsTokenFilterFactoryTests extends ESTokenStreamTestCase {
         }
     }
 
+    @Test
     public void testQueryModeSettings() throws IOException {
         {
             Settings settings = Settings.settingsBuilder().put("index.analysis.filter.common_grams_1.type", "common_grams")
@@ -214,6 +221,7 @@ public class CommonGramsTokenFilterFactoryTests extends ESTokenStreamTestCase {
         }
     }
 
+    @Test
     public void testQueryModeCommonGramsAnalysis() throws IOException {
         String json = "/org/elasticsearch/index/analysis/commongrams/commongrams_query_mode.json";
         Settings settings = Settings.settingsBuilder()
diff --git a/core/src/test/java/org/elasticsearch/index/analysis/synonyms/SynonymsAnalysisTests.java b/core/src/test/java/org/elasticsearch/index/analysis/synonyms/SynonymsAnalysisTests.java
index 65c2fa2..f695b1b 100644
--- a/core/src/test/java/org/elasticsearch/index/analysis/synonyms/SynonymsAnalysisTests.java
+++ b/core/src/test/java/org/elasticsearch/index/analysis/synonyms/SynonymsAnalysisTests.java
@@ -42,6 +42,7 @@ import org.elasticsearch.index.settings.IndexSettingsModule;
 import org.elasticsearch.indices.analysis.IndicesAnalysisService;
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.MatcherAssert;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -54,9 +55,11 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public class SynonymsAnalysisTests extends ESTestCase {
+
     protected final ESLogger logger = Loggers.getLogger(getClass());
     private AnalysisService analysisService;
 
+    @Test
     public void testSynonymsAnalysis() throws IOException {
         InputStream synonyms = getClass().getResourceAsStream("synonyms.txt");
         InputStream synonymsWordnet = getClass().getResourceAsStream("synonyms_wordnet.txt");
diff --git a/core/src/test/java/org/elasticsearch/index/cache/bitset/BitSetFilterCacheTests.java b/core/src/test/java/org/elasticsearch/index/cache/bitset/BitSetFilterCacheTests.java
index 4c93eca..416c04d 100644
--- a/core/src/test/java/org/elasticsearch/index/cache/bitset/BitSetFilterCacheTests.java
+++ b/core/src/test/java/org/elasticsearch/index/cache/bitset/BitSetFilterCacheTests.java
@@ -42,6 +42,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.Index;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -50,6 +51,7 @@ import java.util.concurrent.atomic.AtomicLong;
 import static org.hamcrest.Matchers.equalTo;
 
 public class BitSetFilterCacheTests extends ESTestCase {
+
     private static int matchCount(BitSetProducer producer, IndexReader reader) throws IOException {
         int count = 0;
         for (LeafReaderContext ctx : reader.leaves()) {
@@ -61,6 +63,7 @@ public class BitSetFilterCacheTests extends ESTestCase {
         return count;
     }
 
+    @Test
     public void testInvalidateEntries() throws Exception {
         IndexWriter writer = new IndexWriter(
                 new RAMDirectory(),
diff --git a/core/src/test/java/org/elasticsearch/index/codec/CodecTests.java b/core/src/test/java/org/elasticsearch/index/codec/CodecTests.java
index 570ea35..30a8e33 100644
--- a/core/src/test/java/org/elasticsearch/index/codec/CodecTests.java
+++ b/core/src/test/java/org/elasticsearch/index/codec/CodecTests.java
@@ -41,11 +41,14 @@ import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.IndexService;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.instanceOf;
 
 @SuppressCodecs("*") // we test against default codec so never get a random one here!
 public class CodecTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testResolveDefaultCodecs() throws Exception {
         CodecService codecService = createCodecService();
         assertThat(codecService.codec("default"), instanceOf(PerFieldMappingPostingFormatCodec.class));
@@ -59,17 +62,17 @@ public class CodecTests extends ESSingleNodeTestCase {
         assertThat(codecService.codec("Lucene41"), instanceOf(Lucene41Codec.class));
         assertThat(codecService.codec("Lucene42"), instanceOf(Lucene42Codec.class));
     }
-
+    
     public void testDefault() throws Exception {
         Codec codec = createCodecService().codec("default");
         assertCompressionEquals(Mode.BEST_SPEED, codec);
     }
-
+    
     public void testBestCompression() throws Exception {
         Codec codec = createCodecService().codec("best_compression");
         assertCompressionEquals(Mode.BEST_COMPRESSION, codec);
     }
-
+    
     // write some docs with it, inspect .si to see this was the used compression
     private void assertCompressionEquals(Mode expected, Codec actual) throws Exception {
         Directory dir = newDirectory();
diff --git a/core/src/test/java/org/elasticsearch/index/engine/InternalEngineIT.java b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineIT.java
index 76c07ed..bae6be5 100644
--- a/core/src/test/java/org/elasticsearch/index/engine/InternalEngineIT.java
+++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineIT.java
@@ -26,12 +26,15 @@ import org.elasticsearch.action.admin.indices.segments.ShardSegments;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Set;
 
 public class InternalEngineIT extends ESIntegTestCase {
+
+    @Test
     public void testSetIndexCompoundOnFlush() {
         client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put("number_of_replicas", 0).put("number_of_shards", 1)).get();
         ensureGreen();
diff --git a/core/src/test/java/org/elasticsearch/index/engine/InternalEngineMergeIT.java b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineMergeIT.java
index a844f97..1ac7678 100644
--- a/core/src/test/java/org/elasticsearch/index/engine/InternalEngineMergeIT.java
+++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineMergeIT.java
@@ -25,19 +25,22 @@ import org.elasticsearch.client.Requests;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.concurrent.ExecutionException;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
 
 @ClusterScope(numDataNodes = 1, scope = Scope.SUITE)
 public class InternalEngineMergeIT extends ESIntegTestCase {
+
+    @Test
     public void testMergesHappening() throws InterruptedException, IOException, ExecutionException {
         final int numOfShards = randomIntBetween(1,5);
         // some settings to keep num segments low
diff --git a/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java
index a7df234..2a61502 100644
--- a/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java
+++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java
@@ -83,23 +83,21 @@ import org.elasticsearch.index.mapper.ParsedDocument;
 import org.elasticsearch.index.mapper.internal.SourceFieldMapper;
 import org.elasticsearch.index.mapper.internal.UidFieldMapper;
 import org.elasticsearch.index.mapper.object.RootObjectMapper;
-import org.elasticsearch.index.shard.IndexSearcherWrapper;
-import org.elasticsearch.index.shard.MergeSchedulerConfig;
-import org.elasticsearch.index.shard.ShardId;
-import org.elasticsearch.index.shard.ShardUtils;
-import org.elasticsearch.index.shard.TranslogRecoveryPerformer;
+import org.elasticsearch.index.shard.*;
 import org.elasticsearch.index.similarity.SimilarityService;
 import org.elasticsearch.index.store.DirectoryService;
 import org.elasticsearch.index.store.DirectoryUtils;
 import org.elasticsearch.index.store.Store;
 import org.elasticsearch.index.translog.Translog;
 import org.elasticsearch.index.translog.TranslogConfig;
+import org.elasticsearch.index.translog.TranslogTests;
 import org.elasticsearch.test.DummyShardLock;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.hamcrest.MatcherAssert;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -110,6 +108,7 @@ import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -287,6 +286,7 @@ public class InternalEngineTests extends ESTestCase {
     protected static final BytesReference B_2 = new BytesArray(new byte[]{2});
     protected static final BytesReference B_3 = new BytesArray(new byte[]{3});
 
+    @Test
     public void testSegments() throws Exception {
         try (Store store = createStore();
             Engine engine = createEngine(defaultSettings, store, createTempDir(), new MergeSchedulerConfig(defaultSettings), NoMergePolicy.INSTANCE)) {
@@ -437,8 +437,11 @@ public class InternalEngineTests extends ESTestCase {
             assertThat(segments.get(1).ramTree, notNullValue());
             assertThat(segments.get(2).ramTree, notNullValue());
         }
+
     }
 
+
+    @Test
     public void testSegmentsWithMergeFlag() throws Exception {
         try (Store store = createStore();
              Engine engine = createEngine(defaultSettings, store, createTempDir(), new MergeSchedulerConfig(defaultSettings), new TieredMergePolicy())) {
@@ -513,6 +516,7 @@ public class InternalEngineTests extends ESTestCase {
         assertThat(stats2.getUserData().get(Translog.TRANSLOG_UUID_KEY), equalTo(stats1.getUserData().get(Translog.TRANSLOG_UUID_KEY)));
     }
 
+    @Test
     public void testIndexSearcherWrapper() throws Exception {
         final AtomicInteger counter = new AtomicInteger();
         IndexSearcherWrapper wrapper = new IndexSearcherWrapper() {
@@ -541,6 +545,8 @@ public class InternalEngineTests extends ESTestCase {
         IOUtils.close(store, engine);
     }
 
+    @Test
+    /* */
     public void testConcurrentGetAndFlush() throws Exception {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocumentWithTextField(), B_1, null);
         engine.index(new Engine.Index(newUid("1"), doc));
@@ -578,6 +584,7 @@ public class InternalEngineTests extends ESTestCase {
         latestGetResult.get().release();
     }
 
+    @Test
     public void testSimpleOperations() throws Exception {
         Engine.Searcher searchResult = engine.acquireSearcher("test");
         MatcherAssert.assertThat(searchResult, EngineSearcherTotalHitsMatcher.engineSearcherTotalHits(0));
@@ -732,6 +739,7 @@ public class InternalEngineTests extends ESTestCase {
         searchResult.close();
     }
 
+    @Test
     public void testSearchResultRelease() throws Exception {
         Engine.Searcher searchResult = engine.acquireSearcher("test");
         MatcherAssert.assertThat(searchResult, EngineSearcherTotalHitsMatcher.engineSearcherTotalHits(0));
@@ -837,6 +845,7 @@ public class InternalEngineTests extends ESTestCase {
         assertNull("Sync ID must be gone since we have a document to replay", engine.getLastCommittedSegmentInfos().getUserData().get(Engine.SYNC_COMMIT_ID));
     }
 
+    @Test
     public void testVersioningNewCreate() {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocument(), B_1, null);
         Engine.Index create = new Engine.Index(newUid("1"), doc, Versions.MATCH_DELETED);
@@ -848,6 +857,7 @@ public class InternalEngineTests extends ESTestCase {
         assertThat(create.version(), equalTo(1l));
     }
 
+    @Test
     public void testVersioningNewIndex() {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocument(), B_1, null);
         Engine.Index index = new Engine.Index(newUid("1"), doc);
@@ -859,6 +869,7 @@ public class InternalEngineTests extends ESTestCase {
         assertThat(index.version(), equalTo(1l));
     }
 
+    @Test
     public void testExternalVersioningNewIndex() {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocument(), B_1, null);
         Engine.Index index = new Engine.Index(newUid("1"), doc, 12, VersionType.EXTERNAL, PRIMARY, 0);
@@ -870,6 +881,7 @@ public class InternalEngineTests extends ESTestCase {
         assertThat(index.version(), equalTo(12l));
     }
 
+    @Test
     public void testVersioningIndexConflict() {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocument(), B_1, null);
         Engine.Index index = new Engine.Index(newUid("1"), doc);
@@ -898,6 +910,7 @@ public class InternalEngineTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testExternalVersioningIndexConflict() {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocument(), B_1, null);
         Engine.Index index = new Engine.Index(newUid("1"), doc, 12, VersionType.EXTERNAL, PRIMARY, 0);
@@ -917,6 +930,7 @@ public class InternalEngineTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testVersioningIndexConflictWithFlush() {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocument(), B_1, null);
         Engine.Index index = new Engine.Index(newUid("1"), doc);
@@ -947,6 +961,7 @@ public class InternalEngineTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testExternalVersioningIndexConflictWithFlush() {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocument(), B_1, null);
         Engine.Index index = new Engine.Index(newUid("1"), doc, 12, VersionType.EXTERNAL, PRIMARY, 0);
@@ -1063,6 +1078,7 @@ public class InternalEngineTests extends ESTestCase {
 
     }
 
+    @Test
     public void testVersioningDeleteConflict() {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocument(), B_1, null);
         Engine.Index index = new Engine.Index(newUid("1"), doc);
@@ -1113,6 +1129,7 @@ public class InternalEngineTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testVersioningDeleteConflictWithFlush() {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocument(), B_1, null);
         Engine.Index index = new Engine.Index(newUid("1"), doc);
@@ -1169,6 +1186,7 @@ public class InternalEngineTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testVersioningCreateExistsException() {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocument(), B_1, null);
         Engine.Index create = new Engine.Index(newUid("1"), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, 0);
@@ -1184,6 +1202,7 @@ public class InternalEngineTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testVersioningCreateExistsExceptionWithFlush() {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocument(), B_1, null);
         Engine.Index create = new Engine.Index(newUid("1"), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, 0);
@@ -1201,6 +1220,7 @@ public class InternalEngineTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testVersioningReplicaConflict1() {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocument(), B_1, null);
         Engine.Index index = new Engine.Index(newUid("1"), doc);
@@ -1236,6 +1256,7 @@ public class InternalEngineTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testVersioningReplicaConflict2() {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocument(), B_1, null);
         Engine.Index index = new Engine.Index(newUid("1"), doc);
@@ -1284,6 +1305,8 @@ public class InternalEngineTests extends ESTestCase {
         }
     }
 
+
+    @Test
     public void testBasicCreatedFlag() {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocument(), B_1, null);
         Engine.Index index = new Engine.Index(newUid("1"), doc);
@@ -1298,6 +1321,7 @@ public class InternalEngineTests extends ESTestCase {
         assertTrue(engine.index(index));
     }
 
+    @Test
     public void testCreatedFlagAfterFlush() {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocument(), B_1, null);
         Engine.Index index = new Engine.Index(newUid("1"), doc);
@@ -1342,6 +1366,7 @@ public class InternalEngineTests extends ESTestCase {
     // #5891: make sure IndexWriter's infoStream output is
     // sent to lucene.iw with log level TRACE:
 
+    @Test
     public void testIndexWriterInfoStream() {
         assumeFalse("who tests the tester?", VERBOSE);
         MockAppender mockAppender = new MockAppender();
@@ -1407,6 +1432,7 @@ public class InternalEngineTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testEnableGcDeletes() throws Exception {
         try (Store store = createStore();
              Engine engine = new InternalEngine(config(defaultSettings, store, createTempDir(), new MergeSchedulerConfig(defaultSettings), newMergePolicy()), false)) {
@@ -1470,6 +1496,7 @@ public class InternalEngineTests extends ESTestCase {
         return new Term("_uid", id);
     }
 
+    @Test
     public void testExtractShardId() {
         try (Engine.Searcher test = this.engine.acquireSearcher("test")) {
             ShardId shardId = ShardUtils.extractShardId(test.getDirectoryReader());
@@ -1482,6 +1509,7 @@ public class InternalEngineTests extends ESTestCase {
      * Random test that throws random exception and ensures all references are
      * counted down / released and resources are closed.
      */
+    @Test
     public void testFailStart() throws IOException {
         // this test fails if any reader, searcher or directory is not closed - MDW FTW
         final int iters = scaledRandomIntBetween(10, 100);
@@ -1522,6 +1550,7 @@ public class InternalEngineTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSettings() {
         CodecService codecService = new CodecService(shardId.index());
         LiveIndexWriterConfig currentIndexWriterConfig = engine.getCurrentIndexWriterConfig();
@@ -1531,6 +1560,7 @@ public class InternalEngineTests extends ESTestCase {
     }
 
     // #10312
+    @Test
     public void testDeletesAloneCanTriggerRefresh() throws Exception {
         try (Store store = createStore();
             Engine engine = new InternalEngine(config(defaultSettings, store, createTempDir(), new MergeSchedulerConfig(defaultSettings), newMergePolicy()),
@@ -1639,6 +1669,7 @@ public class InternalEngineTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSkipTranslogReplay() throws IOException {
         final int numDocs = randomIntBetween(1, 10);
         for (int i = 0; i < numDocs; i++) {
diff --git a/core/src/test/java/org/elasticsearch/index/engine/ShadowEngineTests.java b/core/src/test/java/org/elasticsearch/index/engine/ShadowEngineTests.java
index 8bcc5d7..7dadafb 100644
--- a/core/src/test/java/org/elasticsearch/index/engine/ShadowEngineTests.java
+++ b/core/src/test/java/org/elasticsearch/index/engine/ShadowEngineTests.java
@@ -23,13 +23,7 @@ import org.apache.lucene.codecs.Codec;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.NumericDocValuesField;
 import org.apache.lucene.document.TextField;
-import org.apache.lucene.index.IndexWriterConfig;
-import org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy;
-import org.apache.lucene.index.LiveIndexWriterConfig;
-import org.apache.lucene.index.MergePolicy;
-import org.apache.lucene.index.NoMergePolicy;
-import org.apache.lucene.index.SnapshotDeletionPolicy;
-import org.apache.lucene.index.Term;
+import org.apache.lucene.index.*;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.store.Directory;
@@ -66,6 +60,7 @@ import org.elasticsearch.threadpool.ThreadPool;
 import org.hamcrest.MatcherAssert;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.nio.file.Path;
@@ -75,12 +70,7 @@ import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.hasKey;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  * TODO: document me!
@@ -268,6 +258,8 @@ public class ShadowEngineTests extends ESTestCase {
         assertThat(stats2.getUserData().get(Translog.TRANSLOG_UUID_KEY), equalTo(stats1.getUserData().get(Translog.TRANSLOG_UUID_KEY)));
     }
 
+
+    @Test
     public void testSegments() throws Exception {
         primaryEngine.close(); // recreate without merging
         primaryEngine = createInternalEngine(defaultSettings, store, createTempDir(), NoMergePolicy.INSTANCE);
@@ -441,6 +433,7 @@ public class ShadowEngineTests extends ESTestCase {
         assertThat(segments.get(2).isCompound(), equalTo(true));
     }
 
+    @Test
     public void testVerboseSegments() throws Exception {
         primaryEngine.close(); // recreate without merging
         primaryEngine = createInternalEngine(defaultSettings, store, createTempDir(), NoMergePolicy.INSTANCE);
@@ -480,6 +473,7 @@ public class ShadowEngineTests extends ESTestCase {
 
     }
 
+    @Test
     public void testShadowEngineIgnoresWriteOperations() throws Exception {
         // create a document
         ParseContext.Document document = testDocumentWithTextField();
@@ -569,6 +563,7 @@ public class ShadowEngineTests extends ESTestCase {
         getResult.release();
     }
 
+    @Test
     public void testSimpleOperations() throws Exception {
         Engine.Searcher searchResult = primaryEngine.acquireSearcher("test");
         MatcherAssert.assertThat(searchResult, EngineSearcherTotalHitsMatcher.engineSearcherTotalHits(0));
@@ -781,6 +776,7 @@ public class ShadowEngineTests extends ESTestCase {
         searchResult.close();
     }
 
+    @Test
     public void testSearchResultRelease() throws Exception {
         Engine.Searcher searchResult = replicaEngine.acquireSearcher("test");
         MatcherAssert.assertThat(searchResult, EngineSearcherTotalHitsMatcher.engineSearcherTotalHits(0));
@@ -831,6 +827,7 @@ public class ShadowEngineTests extends ESTestCase {
         searchResult.close();
     }
 
+    @Test
     public void testFailEngineOnCorruption() {
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocumentWithTextField(), B_1, null);
         primaryEngine.index(new Engine.Index(newUid("1"), doc));
@@ -855,6 +852,7 @@ public class ShadowEngineTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testExtractShardId() {
         try (Engine.Searcher test = replicaEngine.acquireSearcher("test")) {
             ShardId shardId = ShardUtils.extractShardId(test.getDirectoryReader());
@@ -867,6 +865,7 @@ public class ShadowEngineTests extends ESTestCase {
      * Random test that throws random exception and ensures all references are
      * counted down / released and resources are closed.
      */
+    @Test
     public void testFailStart() throws IOException {
         // Need a commit point for this
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocumentWithTextField(), B_1, null);
@@ -911,11 +910,13 @@ public class ShadowEngineTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSettings() {
         CodecService codecService = new CodecService(shardId.index());
         assertEquals(replicaEngine.config().getCodec().getName(), codecService.codec(codecName).getName());
     }
 
+    @Test
     public void testShadowEngineCreationRetry() throws Exception {
         final Path srDir = createTempDir();
         final Store srStore = createStore(srDir);
diff --git a/core/src/test/java/org/elasticsearch/index/fielddata/AbstractFieldDataImplTestCase.java b/core/src/test/java/org/elasticsearch/index/fielddata/AbstractFieldDataImplTestCase.java
index 743be63..ff07223 100644
--- a/core/src/test/java/org/elasticsearch/index/fielddata/AbstractFieldDataImplTestCase.java
+++ b/core/src/test/java/org/elasticsearch/index/fielddata/AbstractFieldDataImplTestCase.java
@@ -21,18 +21,13 @@ package org.elasticsearch.index.fielddata;
 
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.LeafReaderContext;
-import org.apache.lucene.search.FieldDoc;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.MatchAllDocsQuery;
-import org.apache.lucene.search.Sort;
-import org.apache.lucene.search.SortField;
-import org.apache.lucene.search.TopFieldDocs;
+import org.apache.lucene.search.*;
 import org.apache.lucene.util.BytesRef;
 import org.elasticsearch.common.Strings;
 import org.elasticsearch.search.MultiValueMode;
+import org.junit.Test;
 
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
+import static org.hamcrest.Matchers.*;
 
 public abstract class AbstractFieldDataImplTestCase extends AbstractFieldDataTestCase {
 
@@ -68,6 +63,7 @@ public abstract class AbstractFieldDataImplTestCase extends AbstractFieldDataTes
         return 1;
     }
 
+    @Test
     public void testDeletedDocs() throws Exception {
         add2SingleValuedDocumentsAndDeleteOneOfThem();
         IndexFieldData indexFieldData = getForField("value");
@@ -80,6 +76,7 @@ public abstract class AbstractFieldDataImplTestCase extends AbstractFieldDataTes
         }
     }
 
+    @Test
     public void testSingleValueAllSet() throws Exception {
         fillSingleValueAllSet();
         IndexFieldData indexFieldData = getForField("value");
@@ -125,7 +122,7 @@ public abstract class AbstractFieldDataImplTestCase extends AbstractFieldDataTes
     }
 
     protected abstract void fillSingleValueWithMissing() throws Exception;
-
+    
     public void assertValues(SortedBinaryDocValues values, int docId, BytesRef... actualValues) {
         values.setDocument(docId);
         assertThat(values.count(), equalTo(actualValues.length));
@@ -133,7 +130,7 @@ public abstract class AbstractFieldDataImplTestCase extends AbstractFieldDataTes
             assertThat(values.valueAt(i), equalTo(actualValues[i]));
         }
     }
-
+    
     public void assertValues(SortedBinaryDocValues values, int docId, String... actualValues) {
         values.setDocument(docId);
         assertThat(values.count(), equalTo(actualValues.length));
@@ -142,6 +139,8 @@ public abstract class AbstractFieldDataImplTestCase extends AbstractFieldDataTes
         }
     }
 
+
+    @Test
     public void testSingleValueWithMissing() throws Exception {
         fillSingleValueWithMissing();
         IndexFieldData indexFieldData = getForField("value");
@@ -158,6 +157,7 @@ public abstract class AbstractFieldDataImplTestCase extends AbstractFieldDataTes
 
     protected abstract void fillMultiValueAllSet() throws Exception;
 
+    @Test
     public void testMultiValueAllSet() throws Exception {
         fillMultiValueAllSet();
         IndexFieldData indexFieldData = getForField("value");
@@ -169,7 +169,7 @@ public abstract class AbstractFieldDataImplTestCase extends AbstractFieldDataTes
         assertValues(bytesValues, 0, two(), four());
         assertValues(bytesValues, 1, one());
         assertValues(bytesValues, 2, three());
-
+        
         IndexSearcher searcher = new IndexSearcher(DirectoryReader.open(writer, true));
         TopFieldDocs topDocs = searcher.search(new MatchAllDocsQuery(), 10, new Sort(new SortField("value", indexFieldData.comparatorSource(null, MultiValueMode.MIN, null))));
         assertThat(topDocs.totalHits, equalTo(3));
@@ -188,6 +188,7 @@ public abstract class AbstractFieldDataImplTestCase extends AbstractFieldDataTes
 
     protected abstract void fillMultiValueWithMissing() throws Exception;
 
+    @Test
     public void testMultiValueWithMissing() throws Exception {
         fillMultiValueWithMissing();
         IndexFieldData indexFieldData = getForField("value");
@@ -222,6 +223,7 @@ public abstract class AbstractFieldDataImplTestCase extends AbstractFieldDataTes
 
     protected abstract void fillAllMissing() throws Exception;
 
+    @Test
     public void testSortMultiValuesFields() throws Exception {
         fillExtendedMvSet();
         IndexFieldData indexFieldData = getForField("value");
diff --git a/core/src/test/java/org/elasticsearch/index/fielddata/AbstractNumericFieldDataTestCase.java b/core/src/test/java/org/elasticsearch/index/fielddata/AbstractNumericFieldDataTestCase.java
index 8303f8e..5c28a8f 100644
--- a/core/src/test/java/org/elasticsearch/index/fielddata/AbstractNumericFieldDataTestCase.java
+++ b/core/src/test/java/org/elasticsearch/index/fielddata/AbstractNumericFieldDataTestCase.java
@@ -24,14 +24,10 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.document.StringField;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.SortedNumericDocValues;
-import org.apache.lucene.search.FieldDoc;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.MatchAllDocsQuery;
-import org.apache.lucene.search.Sort;
-import org.apache.lucene.search.SortField;
-import org.apache.lucene.search.TopFieldDocs;
+import org.apache.lucene.search.*;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.search.MultiValueMode;
+import org.junit.Test;
 
 import java.util.Locale;
 
@@ -40,6 +36,7 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public abstract class AbstractNumericFieldDataTestCase extends AbstractFieldDataImplTestCase {
+
     @Override
     protected abstract FieldDataType getFieldDataType();
 
@@ -53,6 +50,7 @@ public abstract class AbstractNumericFieldDataTestCase extends AbstractFieldData
         return builder;
     }
 
+    @Test
     public void testSingleValueAllSetNumber() throws Exception {
         fillSingleValueAllSet();
         IndexNumericFieldData indexFieldData = getForField("value");
@@ -108,6 +106,7 @@ public abstract class AbstractNumericFieldDataTestCase extends AbstractFieldData
         assertThat(topDocs.scoreDocs[2].doc, equalTo(1));
     }
 
+    @Test
     public void testSingleValueWithMissingNumber() throws Exception {
         fillSingleValueWithMissing();
         IndexNumericFieldData indexFieldData = getForField("value");
@@ -189,6 +188,7 @@ public abstract class AbstractNumericFieldDataTestCase extends AbstractFieldData
         assertThat(topDocs.scoreDocs[2].doc, equalTo(1));
     }
 
+    @Test
     public void testMultiValueAllSetNumber() throws Exception {
         fillMultiValueAllSet();
         IndexNumericFieldData indexFieldData = getForField("value");
@@ -229,6 +229,7 @@ public abstract class AbstractNumericFieldDataTestCase extends AbstractFieldData
         assertThat(doubleValues.valueAt(0), equalTo(3d));
     }
 
+    @Test
     public void testMultiValueWithMissingNumber() throws Exception {
         fillMultiValueWithMissing();
         IndexNumericFieldData indexFieldData = getForField("value");
@@ -269,6 +270,7 @@ public abstract class AbstractNumericFieldDataTestCase extends AbstractFieldData
     }
 
     @Override
+    @Test
     public void testMissingValueForAll() throws Exception {
         fillAllMissing();
         IndexNumericFieldData indexFieldData = getForField("value");
@@ -318,6 +320,7 @@ public abstract class AbstractNumericFieldDataTestCase extends AbstractFieldData
     }
 
     @Override
+    @Test
     public void testSortMultiValuesFields() throws Exception {
         fillExtendedMvSet();
         IndexFieldData indexFieldData = getForField("value");
diff --git a/core/src/test/java/org/elasticsearch/index/fielddata/AbstractStringFieldDataTestCase.java b/core/src/test/java/org/elasticsearch/index/fielddata/AbstractStringFieldDataTestCase.java
index b1f9d73..29e171c 100644
--- a/core/src/test/java/org/elasticsearch/index/fielddata/AbstractStringFieldDataTestCase.java
+++ b/core/src/test/java/org/elasticsearch/index/fielddata/AbstractStringFieldDataTestCase.java
@@ -26,11 +26,7 @@ import org.apache.lucene.document.Field;
 import org.apache.lucene.document.Field.Store;
 import org.apache.lucene.document.SortedSetDocValuesField;
 import org.apache.lucene.document.StringField;
-import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.LeafReaderContext;
-import org.apache.lucene.index.RandomAccessOrds;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.index.TermsEnum;
+import org.apache.lucene.index.*;
 import org.apache.lucene.search.ConstantScoreQuery;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.MatchAllDocsQuery;
@@ -54,6 +50,7 @@ import org.elasticsearch.index.fielddata.IndexFieldData.XFieldComparatorSource.N
 import org.elasticsearch.index.fielddata.fieldcomparator.BytesRefFieldComparatorSource;
 import org.elasticsearch.index.fielddata.ordinals.GlobalOrdinalsIndexFieldData;
 import org.elasticsearch.search.MultiValueMode;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -69,6 +66,7 @@ import static org.hamcrest.Matchers.sameInstance;
 /**
  */
 public abstract class AbstractStringFieldDataTestCase extends AbstractFieldDataImplTestCase {
+
     private void addField(Document d, String name, String value) {
         d.add(new StringField(name, value, Field.Store.YES));
         d.add(new SortedSetDocValuesField(name, new BytesRef(value)));
@@ -465,6 +463,7 @@ public abstract class AbstractStringFieldDataTestCase extends AbstractFieldDataI
         }
     }
 
+    @Test
     public void testGlobalOrdinals() throws Exception {
         fillExtendedMvSet();
         refreshReader();
@@ -555,6 +554,7 @@ public abstract class AbstractStringFieldDataTestCase extends AbstractFieldDataI
         assertThat(values.lookupOrd(ord).utf8ToString(), equalTo("!10"));
     }
 
+    @Test
     public void testTermsEnum() throws Exception {
         fillExtendedMvSet();
         LeafReaderContext atomicReaderContext = refreshReader();
@@ -590,6 +590,7 @@ public abstract class AbstractStringFieldDataTestCase extends AbstractFieldDataI
         assertThat(size, equalTo(3));
     }
 
+    @Test
     public void testGlobalOrdinalsGetRemovedOnceIndexReaderCloses() throws Exception {
         fillExtendedMvSet();
         refreshReader();
diff --git a/core/src/test/java/org/elasticsearch/index/fielddata/BinaryDVFieldDataTests.java b/core/src/test/java/org/elasticsearch/index/fielddata/BinaryDVFieldDataTests.java
index 73fdd79..bc63ed9 100644
--- a/core/src/test/java/org/elasticsearch/index/fielddata/BinaryDVFieldDataTests.java
+++ b/core/src/test/java/org/elasticsearch/index/fielddata/BinaryDVFieldDataTests.java
@@ -20,7 +20,6 @@
 package org.elasticsearch.index.fielddata;
 
 import com.carrotsearch.hppc.ObjectArrayList;
-
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.util.BytesRef;
 import org.elasticsearch.common.settings.Settings;
@@ -29,6 +28,7 @@ import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.ParsedDocument;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 
@@ -36,11 +36,13 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class BinaryDVFieldDataTests extends AbstractFieldDataTestCase {
+
     @Override
     protected boolean hasDocValues() {
         return true;
     }
 
+    @Test
     public void testDocValue() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("test")
                 .startObject("properties")
diff --git a/core/src/test/java/org/elasticsearch/index/fielddata/DuelFieldDataTests.java b/core/src/test/java/org/elasticsearch/index/fielddata/DuelFieldDataTests.java
index 171e48f..f02c286 100644
--- a/core/src/test/java/org/elasticsearch/index/fielddata/DuelFieldDataTests.java
+++ b/core/src/test/java/org/elasticsearch/index/fielddata/DuelFieldDataTests.java
@@ -20,7 +20,6 @@ package org.elasticsearch.index.fielddata;
 
 import com.carrotsearch.randomizedtesting.generators.RandomPicks;
 import com.carrotsearch.randomizedtesting.generators.RandomStrings;
-
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.SortedSetDocValuesField;
@@ -42,6 +41,7 @@ import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.ParsedDocument;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -54,16 +54,16 @@ import java.util.Map.Entry;
 import java.util.Random;
 import java.util.Set;
 
-import static org.hamcrest.Matchers.closeTo;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.lessThan;
+import static org.hamcrest.Matchers.*;
 
 public class DuelFieldDataTests extends AbstractFieldDataTestCase {
+
     @Override
     protected FieldDataType getFieldDataType() {
         return null;
     }
 
+    @Test
     public void testDuelAllTypesSingleValue() throws Exception {
         final String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties")
@@ -140,6 +140,8 @@ public class DuelFieldDataTests extends AbstractFieldDataTestCase {
         }
     }
 
+
+    @Test
     public void testDuelIntegers() throws Exception {
         final String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties")
@@ -161,7 +163,7 @@ public class DuelFieldDataTests extends AbstractFieldDataTestCase {
             for (int j = 0; j < numValues; ++j) {
                 vals.add(randomByte());
             }
-
+            
             numValues = vals.size();
             int upto = 0;
             for (Byte bb : vals) {
@@ -223,6 +225,7 @@ public class DuelFieldDataTests extends AbstractFieldDataTestCase {
 
     }
 
+    @Test
     public void testDuelDoubles() throws Exception {
         final String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties")
@@ -305,6 +308,8 @@ public class DuelFieldDataTests extends AbstractFieldDataTestCase {
 
     }
 
+
+    @Test
     public void testDuelStrings() throws Exception {
         Random random = getRandom();
         int atLeast = scaledRandomIntBetween(200, 1500);
diff --git a/core/src/test/java/org/elasticsearch/index/fielddata/FieldDataFilterIntegrationIT.java b/core/src/test/java/org/elasticsearch/index/fielddata/FieldDataFilterIntegrationIT.java
index adb511f..393f481 100644
--- a/core/src/test/java/org/elasticsearch/index/fielddata/FieldDataFilterIntegrationIT.java
+++ b/core/src/test/java/org/elasticsearch/index/fielddata/FieldDataFilterIntegrationIT.java
@@ -27,6 +27,7 @@ import org.elasticsearch.search.aggregations.Aggregations;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -41,6 +42,7 @@ public class FieldDataFilterIntegrationIT extends ESIntegTestCase {
         return 0;
     }
 
+    @Test
     public void testRegexpFilter() throws IOException {
         CreateIndexRequestBuilder builder = prepareCreate("test");
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
@@ -76,7 +78,7 @@ public class FieldDataFilterIntegrationIT extends ESIntegTestCase {
         Terms nameAgg = aggs.get("name");
         assertThat(nameAgg.getBuckets().size(), Matchers.equalTo(1));
         assertThat(nameAgg.getBuckets().iterator().next().getKeyAsString(), Matchers.equalTo("bacon"));
-
+        
         Terms notFilteredAgg = aggs.get("not_filtered");
         assertThat(notFilteredAgg.getBuckets().size(), Matchers.equalTo(2));
         assertThat(notFilteredAgg.getBuckets().get(0).getKeyAsString(), Matchers.isOneOf("bacon", "bastards"));
diff --git a/core/src/test/java/org/elasticsearch/index/fielddata/FieldDataLoadingIT.java b/core/src/test/java/org/elasticsearch/index/fielddata/FieldDataLoadingIT.java
index fc8a830..12aeb70 100644
--- a/core/src/test/java/org/elasticsearch/index/fielddata/FieldDataLoadingIT.java
+++ b/core/src/test/java/org/elasticsearch/index/fielddata/FieldDataLoadingIT.java
@@ -21,6 +21,7 @@ package org.elasticsearch.index.fielddata;
 
 import org.elasticsearch.action.admin.cluster.stats.ClusterStatsResponse;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
@@ -29,6 +30,8 @@ import static org.hamcrest.Matchers.greaterThan;
 /**
  */
 public class FieldDataLoadingIT extends ESIntegTestCase {
+
+    @Test
     public void testEagerFieldDataLoading() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type", jsonBuilder().startObject().startObject("type").startObject("properties")
@@ -46,6 +49,7 @@ public class FieldDataLoadingIT extends ESIntegTestCase {
         assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), greaterThan(0l));
     }
 
+    @Test
     public void testEagerGlobalOrdinalsFieldDataLoading() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type", jsonBuilder().startObject().startObject("type").startObject("properties")
diff --git a/core/src/test/java/org/elasticsearch/index/fielddata/FilterFieldDataTests.java b/core/src/test/java/org/elasticsearch/index/fielddata/FilterFieldDataTests.java
index 49cb414..4b9d0e1 100644
--- a/core/src/test/java/org/elasticsearch/index/fielddata/FilterFieldDataTests.java
+++ b/core/src/test/java/org/elasticsearch/index/fielddata/FilterFieldDataTests.java
@@ -24,18 +24,21 @@ import org.apache.lucene.document.StringField;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.RandomAccessOrds;
 import org.elasticsearch.common.settings.Settings;
+import org.junit.Test;
 
 import java.util.Random;
 
 import static org.hamcrest.Matchers.equalTo;
 
 public class FilterFieldDataTests extends AbstractFieldDataTestCase {
+
     @Override
     protected FieldDataType getFieldDataType() {
         // TODO Auto-generated method stub
         return null;
     }
 
+    @Test
     public void testFilterByFrequency() throws Exception {
         Random random = getRandom();
         for (int i = 0; i < 1000; i++) {
@@ -58,7 +61,7 @@ public class FilterFieldDataTests extends AbstractFieldDataTestCase {
         writer.forceMerge(1, true);
         LeafReaderContext context = refreshReader();
         String[] formats = new String[] { "paged_bytes"};
-
+        
         for (String format : formats) {
             {
                 ifdService.clear();
@@ -81,7 +84,7 @@ public class FilterFieldDataTests extends AbstractFieldDataTestCase {
                 assertThat(1L, equalTo(bytesValues.getValueCount()));
                 assertThat(bytesValues.lookupOrd(0).utf8ToString(), equalTo("5"));
             }
-
+            
             {
                 ifdService.clear(); // test # docs with value
                 FieldDataType fieldDataType = new FieldDataType("string", Settings.builder().put("format", format)
@@ -93,7 +96,7 @@ public class FilterFieldDataTests extends AbstractFieldDataTestCase {
                 assertThat(bytesValues.lookupOrd(0).utf8ToString(), equalTo("10"));
                 assertThat(bytesValues.lookupOrd(1).utf8ToString(), equalTo("100"));
             }
-
+            
             {
                 ifdService.clear();
                 FieldDataType fieldDataType = new FieldDataType("string", Settings.builder().put("format", format)
@@ -105,7 +108,7 @@ public class FilterFieldDataTests extends AbstractFieldDataTestCase {
                 assertThat(bytesValues.lookupOrd(0).utf8ToString(), equalTo("10"));
                 assertThat(bytesValues.lookupOrd(1).utf8ToString(), equalTo("100"));
             }
-
+            
             {
                 ifdService.clear();
                 FieldDataType fieldDataType = new FieldDataType("string", Settings.builder().put("format", format)
@@ -122,8 +125,10 @@ public class FilterFieldDataTests extends AbstractFieldDataTestCase {
         }
 
     }
-
+    
+    @Test
     public void testFilterByRegExp() throws Exception {
+
         int hundred  = 0;
         int ten  = 0;
         int five  = 0;
@@ -177,6 +182,6 @@ public class FilterFieldDataTests extends AbstractFieldDataTestCase {
 
     @Override
     public void testEmpty() throws Exception {
-        assumeTrue("No need to test empty usage here", false);
+        // No need to test empty usage here
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/index/fielddata/LongFieldDataTests.java b/core/src/test/java/org/elasticsearch/index/fielddata/LongFieldDataTests.java
index f9bb02e..f47b94d 100644
--- a/core/src/test/java/org/elasticsearch/index/fielddata/LongFieldDataTests.java
+++ b/core/src/test/java/org/elasticsearch/index/fielddata/LongFieldDataTests.java
@@ -29,6 +29,7 @@ import org.apache.lucene.document.StringField;
 import org.apache.lucene.index.SortedNumericDocValues;
 import org.apache.lucene.index.Term;
 import org.joda.time.DateTimeZone;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -66,6 +67,7 @@ public class LongFieldDataTests extends AbstractNumericFieldDataTestCase {
         writer.deleteDocuments(new Term("_id", "1"));
     }
 
+    @Test
     public void testOptimizeTypeLong() throws Exception {
         Document d = new Document();
         d.add(new StringField("_id", "1", Field.Store.NO));
@@ -79,8 +81,8 @@ public class LongFieldDataTests extends AbstractNumericFieldDataTestCase {
 
         IndexNumericFieldData indexFieldData = getForField("value");
         AtomicNumericFieldData fieldData = indexFieldData.load(refreshReader());
-        assertThat(getFirst(fieldData.getLongValues(), 0), equalTo(Integer.MAX_VALUE + 1l));
-        assertThat(getFirst(fieldData.getLongValues(), 1), equalTo(Integer.MIN_VALUE - 1l));
+        assertThat(getFirst(fieldData.getLongValues(), 0), equalTo((long) Integer.MAX_VALUE + 1l));
+        assertThat(getFirst(fieldData.getLongValues(), 1), equalTo((long) Integer.MIN_VALUE - 1l));
     }
 
     private static long getFirst(SortedNumericDocValues values, int docId) {
@@ -90,6 +92,14 @@ public class LongFieldDataTests extends AbstractNumericFieldDataTestCase {
         return values.valueAt(0);
     }
 
+    private static double getFirst(SortedNumericDoubleValues values, int docId) {
+        values.setDocument(docId);
+        final int numValues = values.count();
+        assertThat(numValues, is(1));
+        return values.valueAt(0);
+    }
+
+    @Test
     public void testDateScripts() throws Exception {
         fillSingleValueAllSet();
         IndexNumericFieldData indexFieldData = getForField("value");
diff --git a/core/src/test/java/org/elasticsearch/index/fielddata/NoOrdinalsStringFieldDataTests.java b/core/src/test/java/org/elasticsearch/index/fielddata/NoOrdinalsStringFieldDataTests.java
index 230330d..982f5e4 100644
--- a/core/src/test/java/org/elasticsearch/index/fielddata/NoOrdinalsStringFieldDataTests.java
+++ b/core/src/test/java/org/elasticsearch/index/fielddata/NoOrdinalsStringFieldDataTests.java
@@ -19,13 +19,14 @@
 
 package org.elasticsearch.index.fielddata;
 
-import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.LeafReaderContext;
+import org.apache.lucene.index.IndexReader;
 import org.elasticsearch.index.Index;
 import org.elasticsearch.index.fielddata.IndexFieldData.XFieldComparatorSource.Nested;
 import org.elasticsearch.index.fielddata.fieldcomparator.BytesRefFieldComparatorSource;
 import org.elasticsearch.index.mapper.MappedFieldType.Names;
 import org.elasticsearch.search.MultiValueMode;
+import org.junit.Test;
 
 /** Returns an implementation based on paged bytes which doesn't implement WithOrdinals in order to visit different paths in the code,
  *  eg. BytesRefFieldComparatorSource makes decisions based on whether the field data implements WithOrdinals. */
@@ -78,8 +79,9 @@ public class NoOrdinalsStringFieldDataTests extends PagedBytesStringFieldDataTes
         return hideOrdinals(super.getForField(fieldName));
     }
 
+    @Test
     @Override
     public void testTermsEnum() throws Exception {
-        assumeTrue("We can't test this, since the returned IFD instance doesn't implement IndexFieldData.WithOrdinals", false);
+        // We can't test this, since the returned IFD instance doesn't implement IndexFieldData.WithOrdinals
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/index/fielddata/ParentChildFieldDataTests.java b/core/src/test/java/org/elasticsearch/index/fielddata/ParentChildFieldDataTests.java
index eefe8c8..b265988 100644
--- a/core/src/test/java/org/elasticsearch/index/fielddata/ParentChildFieldDataTests.java
+++ b/core/src/test/java/org/elasticsearch/index/fielddata/ParentChildFieldDataTests.java
@@ -26,12 +26,7 @@ import org.apache.lucene.document.StringField;
 import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.SortedDocValues;
-import org.apache.lucene.search.FieldDoc;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.MatchAllDocsQuery;
-import org.apache.lucene.search.Sort;
-import org.apache.lucene.search.SortField;
-import org.apache.lucene.search.TopFieldDocs;
+import org.apache.lucene.search.*;
 import org.apache.lucene.util.BytesRef;
 import org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;
 import org.elasticsearch.common.compress.CompressedXContent;
@@ -41,6 +36,7 @@ import org.elasticsearch.index.mapper.internal.ParentFieldMapper;
 import org.elasticsearch.index.mapper.internal.UidFieldMapper;
 import org.elasticsearch.search.MultiValueMode;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -53,6 +49,7 @@ import static org.hamcrest.Matchers.nullValue;
 /**
  */
 public class ParentChildFieldDataTests extends AbstractFieldDataTestCase {
+
     private final String parentType = "parent";
     private final String childType = "child";
     private final String grandChildType = "grand-child";
@@ -121,6 +118,7 @@ public class ParentChildFieldDataTests extends AbstractFieldDataTestCase {
         return new SortedDocValuesField(ParentFieldMapper.joinField(parentType), new BytesRef(id));
     }
 
+    @Test
     public void testGetBytesValues() throws Exception {
         IndexFieldData indexFieldData = getForField(childType);
         AtomicFieldData fieldData = indexFieldData.load(refreshReader());
@@ -162,6 +160,7 @@ public class ParentChildFieldDataTests extends AbstractFieldDataTestCase {
         assertThat(bytesValues.count(), equalTo(0));
     }
 
+    @Test
     public void testSorting() throws Exception {
         IndexFieldData indexFieldData = getForField(childType);
         IndexSearcher searcher = new IndexSearcher(DirectoryReader.open(writer, true));
diff --git a/core/src/test/java/org/elasticsearch/index/fielddata/ordinals/MultiOrdinalsTests.java b/core/src/test/java/org/elasticsearch/index/fielddata/ordinals/MultiOrdinalsTests.java
index 655483f..f855d3f 100644
--- a/core/src/test/java/org/elasticsearch/index/fielddata/ordinals/MultiOrdinalsTests.java
+++ b/core/src/test/java/org/elasticsearch/index/fielddata/ordinals/MultiOrdinalsTests.java
@@ -25,15 +25,10 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.fielddata.FieldData;
 import org.elasticsearch.search.MultiValueMode;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Random;
-import java.util.Set;
+import java.util.*;
 
 import static org.hamcrest.Matchers.equalTo;
 
@@ -50,6 +45,8 @@ public class MultiOrdinalsTests extends ESTestCase {
         return builder.build(settings.build());
     }
 
+
+    @Test
     public void testRandomValues() throws IOException {
         Random random = getRandom();
         int numDocs = 100 + random.nextInt(1000);
@@ -185,6 +182,7 @@ public class MultiOrdinalsTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testOrdinals() throws Exception {
         int maxDoc = 7;
         long maxOrds = 32;
@@ -229,6 +227,7 @@ public class MultiOrdinalsTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testMultiValuesDocsWithOverlappingStorageArrays() throws Exception {
         int maxDoc = 7;
         long maxOrds = 15;
diff --git a/core/src/test/java/org/elasticsearch/index/fielddata/ordinals/SingleOrdinalsTests.java b/core/src/test/java/org/elasticsearch/index/fielddata/ordinals/SingleOrdinalsTests.java
index 3e0d5f6..59be0f9 100644
--- a/core/src/test/java/org/elasticsearch/index/fielddata/ordinals/SingleOrdinalsTests.java
+++ b/core/src/test/java/org/elasticsearch/index/fielddata/ordinals/SingleOrdinalsTests.java
@@ -23,18 +23,19 @@ import org.apache.lucene.index.RandomAccessOrds;
 import org.apache.lucene.index.SortedDocValues;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
 
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.not;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
 public class SingleOrdinalsTests extends ESTestCase {
+
+    @Test
     public void testSvValues() throws IOException {
         int numDocs = 1000000;
         int numOrdinals = numDocs / 4;
@@ -60,6 +61,7 @@ public class SingleOrdinalsTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testMvOrdinalsTrigger() throws IOException {
         int numDocs = 1000000;
         OrdinalsBuilder builder = new OrdinalsBuilder(numDocs);
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java b/core/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java
index b373928..add7ee6 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java
@@ -23,18 +23,21 @@ import org.elasticsearch.Version;
 import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;
 import org.elasticsearch.test.ESSingleNodeTestCase;
 import org.junit.Rule;
+import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
 import static org.elasticsearch.test.VersionUtils.getFirstVersion;
 import static org.elasticsearch.test.VersionUtils.getPreviousVersion;
 import static org.elasticsearch.test.VersionUtils.randomVersionBetween;
 import static org.hamcrest.CoreMatchers.containsString;
+import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.Matchers.hasToString;
 
 public class MapperServiceTests extends ESSingleNodeTestCase {
     @Rule
     public ExpectedException expectedException = ExpectedException.none();
 
+    @Test
     public void testTypeNameStartsWithIllegalDot() {
         expectedException.expect(MapperParsingException.class);
         expectedException.expect(hasToString(containsString("mapping type name [.test-type] must not start with a '.'")));
@@ -50,6 +53,7 @@ public class MapperServiceTests extends ESSingleNodeTestCase {
                 .actionGet();
     }
 
+    @Test
     public void testThatLongTypeNameIsNotRejectedOnPreElasticsearchVersionTwo() {
         String index = "text-index";
         String field = "field";
@@ -67,6 +71,7 @@ public class MapperServiceTests extends ESSingleNodeTestCase {
         assertNotNull(response);
     }
 
+    @Test
     public void testTypeNameTooLong() {
         String index = "text-index";
         String field = "field";
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/UidTests.java b/core/src/test/java/org/elasticsearch/index/mapper/UidTests.java
index 860c668..d6a5c9f 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/UidTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/UidTests.java
@@ -20,10 +20,13 @@ package org.elasticsearch.index.mapper;
 
 import org.apache.lucene.util.BytesRef;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 
 public class UidTests extends ESTestCase {
+    
+    @Test
     public void testCreateAndSplitId() {
         BytesRef createUid = Uid.createUidAsBytes("foo", "bar");
         BytesRef[] splitUidIntoTypeAndId = Uid.splitUidIntoTypeAndId(createUid);
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java b/core/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java
index 9e64097..0e3a04a 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java
@@ -43,10 +43,12 @@ import org.elasticsearch.index.mapper.DocumentMapperParser;
 import org.elasticsearch.index.mapper.MapperParsingException;
 import org.elasticsearch.index.mapper.ParseContext.Document;
 import org.elasticsearch.index.mapper.ParsedDocument;
+import org.elasticsearch.index.mapper.SourceToParse;
 import org.elasticsearch.index.mapper.internal.AllFieldMapper;
-import org.elasticsearch.index.mapper.internal.TimestampFieldMapper;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.elasticsearch.index.mapper.internal.TimestampFieldMapper;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -55,9 +57,9 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.test.StreamsUtils.copyToBytesFromClasspath;
 import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;
+import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.empty;
 import static org.hamcrest.Matchers.equalTo;
@@ -347,39 +349,24 @@ public class SimpleAllMapperTests extends ESSingleNodeTestCase {
         assertThat(allEntries.fields(), hasItem("foo.bar"));
     }
 
+    @Test(expected = MapperParsingException.class)
     public void testMisplacedTypeInRoot() throws IOException {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/all/misplaced_type_in_root.json");
-        try {
-            createIndex("test").mapperService().documentMapperParser().parse("test", mapping);
-            fail("Expected MapperParsingException");
-        } catch (MapperParsingException e) {
-            assertThat(e.getMessage(), containsString("Root mapping definition has unsupported parameters"));
-            assertThat(e.getMessage(), containsString("[type : string]"));
-        }
+        DocumentMapper docMapper = createIndex("test").mapperService().documentMapperParser().parse("test", mapping);
     }
 
     // related to https://github.com/elasticsearch/elasticsearch/issues/5864
+    @Test(expected = MapperParsingException.class)
     public void testMistypedTypeInRoot() throws IOException {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/all/mistyped_type_in_root.json");
-        try {
-            createIndex("test").mapperService().documentMapperParser().parse("test", mapping);
-            fail("Expected MapperParsingException");
-        } catch (MapperParsingException e) {
-            assertThat(e.getMessage(), containsString("Root mapping definition has unsupported parameters"));
-            assertThat(e.getMessage(), containsString("type=string"));
-        }
+        DocumentMapper docMapper = createIndex("test").mapperService().documentMapperParser().parse("test", mapping);
     }
 
     // issue https://github.com/elasticsearch/elasticsearch/issues/5864
+    @Test(expected = MapperParsingException.class)
     public void testMisplacedMappingAsRoot() throws IOException {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/all/misplaced_mapping_key_in_root.json");
-        try {
-            createIndex("test").mapperService().documentMapperParser().parse("test", mapping);
-            fail("Expected MapperParsingException");
-        } catch (MapperParsingException e) {
-            assertThat(e.getMessage(), containsString("Root mapping definition has unsupported parameters"));
-            assertThat(e.getMessage(), containsString("type=string"));
-        }
+        DocumentMapper docMapper = createIndex("test").mapperService().documentMapperParser().parse("test", mapping);
     }
 
     // issue https://github.com/elasticsearch/elasticsearch/issues/5864
@@ -412,7 +399,7 @@ public class SimpleAllMapperTests extends ESSingleNodeTestCase {
         mapping += "\"properties\":{}}" ;
         createIndex("test").mapperService().documentMapperParser().parse("test", mapping);
     }
-
+    
     public void testDocValuesNotAllowed() throws IOException {
         String mapping = jsonBuilder().startObject().startObject("type")
             .startObject("_all")
@@ -424,7 +411,7 @@ public class SimpleAllMapperTests extends ESSingleNodeTestCase {
         } catch (MapperParsingException e) {
             assertThat(e.getDetailedMessage(), containsString("[_all] is always tokenized and cannot have doc values"));
         }
-
+        
 
         mapping = jsonBuilder().startObject().startObject("type")
             .startObject("_all")
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/boost/CustomBoostMappingTests.java b/core/src/test/java/org/elasticsearch/index/mapper/boost/CustomBoostMappingTests.java
index 05a0a03..d18acfe 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/boost/CustomBoostMappingTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/boost/CustomBoostMappingTests.java
@@ -23,10 +23,13 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.ParsedDocument;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 
 public class CustomBoostMappingTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testCustomBoostValues() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties")
                 .startObject("s_field").field("type", "string").endObject()
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/boost/FieldLevelBoostTests.java b/core/src/test/java/org/elasticsearch/index/mapper/boost/FieldLevelBoostTests.java
index c9320e2..5c5ce7b 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/boost/FieldLevelBoostTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/boost/FieldLevelBoostTests.java
@@ -26,12 +26,15 @@ import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.MapperParsingException;
 import org.elasticsearch.index.mapper.ParseContext.Document;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.closeTo;
 
 /**
  */
 public class FieldLevelBoostTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testFieldLevelBoost() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("person").startObject("properties")
                 .startObject("str_field").field("type", "string").endObject()
@@ -82,6 +85,7 @@ public class FieldLevelBoostTests extends ESSingleNodeTestCase {
         assertThat((double) f.boost(), closeTo(9.0, 0.001));
     }
 
+    @Test
     public void testInvalidFieldLevelBoost() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("person").startObject("properties")
                 .startObject("str_field").field("type", "string").endObject()
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/camelcase/CamelCaseFieldNameTests.java b/core/src/test/java/org/elasticsearch/index/mapper/camelcase/CamelCaseFieldNameTests.java
index 1cfee0d..89e1864 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/camelcase/CamelCaseFieldNameTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/camelcase/CamelCaseFieldNameTests.java
@@ -24,11 +24,14 @@ import org.elasticsearch.index.IndexService;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.ParsedDocument;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 /**
  *
  */
 public class CamelCaseFieldNameTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testCamelCaseFieldNameStaysAsIs() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .endObject().endObject().string();
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/completion/CompletionFieldMapperTests.java b/core/src/test/java/org/elasticsearch/index/mapper/completion/CompletionFieldMapperTests.java
index 10094cc..717823d 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/completion/CompletionFieldMapperTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/completion/CompletionFieldMapperTests.java
@@ -25,6 +25,7 @@ import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.FieldMapper;
 import org.elasticsearch.index.mapper.core.CompletionFieldMapper;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Map;
@@ -34,6 +35,8 @@ import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 
 public class CompletionFieldMapperTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testDefaultConfiguration() throws IOException {
         String mapping = jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("completion")
@@ -50,6 +53,7 @@ public class CompletionFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(completionFieldMapper.isStoringPayloads(), is(false));
     }
 
+    @Test
     public void testThatSerializationIncludesAllElements() throws Exception {
         String mapping = jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("completion")
@@ -86,6 +90,7 @@ public class CompletionFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(Integer.valueOf(configMap.get("max_input_length").toString()), is(14));
     }
 
+    @Test
     public void testThatSerializationCombinesToOneAnalyzerFieldIfBothAreEqual() throws Exception {
         String mapping = jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("completion")
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/compound/CompoundTypesTests.java b/core/src/test/java/org/elasticsearch/index/mapper/compound/CompoundTypesTests.java
index 4dc017a..fa2e1a1 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/compound/CompoundTypesTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/compound/CompoundTypesTests.java
@@ -23,11 +23,14 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.ParsedDocument;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.closeTo;
 import static org.hamcrest.Matchers.equalTo;
 
 public class CompoundTypesTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testStringType() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties")
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/copyto/CopyToMapperIntegrationIT.java b/core/src/test/java/org/elasticsearch/index/mapper/copyto/CopyToMapperIntegrationIT.java
index 1d6e728..5919c52 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/copyto/CopyToMapperIntegrationIT.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/copyto/CopyToMapperIntegrationIT.java
@@ -27,6 +27,7 @@ import org.elasticsearch.search.aggregations.AggregationBuilders;
 import org.elasticsearch.search.aggregations.Aggregator.SubAggCollectionMode;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -36,6 +37,9 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public class CopyToMapperIntegrationIT extends ESIntegTestCase {
+
+
+    @Test
     public void testDynamicTemplateCopyTo() throws Exception {
         assertAcked(
                 client().admin().indices().prepareCreate("test-idx")
@@ -52,7 +56,7 @@ public class CopyToMapperIntegrationIT extends ESIntegTestCase {
         client().admin().indices().prepareRefresh("test-idx").execute().actionGet();
 
         SubAggCollectionMode aggCollectionMode = randomFrom(SubAggCollectionMode.values());
-
+        
         SearchResponse response = client().prepareSearch("test-idx")
                 .setQuery(QueryBuilders.termQuery("even", true))
                 .addAggregation(AggregationBuilders.terms("test").field("test_field").size(recordCount * 2)
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/copyto/CopyToMapperTests.java b/core/src/test/java/org/elasticsearch/index/mapper/copyto/CopyToMapperTests.java
index 301d6b1..419dde4 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/copyto/CopyToMapperTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/copyto/CopyToMapperTests.java
@@ -38,6 +38,7 @@ import org.elasticsearch.index.mapper.ParsedDocument;
 import org.elasticsearch.index.mapper.core.LongFieldMapper;
 import org.elasticsearch.index.mapper.core.StringFieldMapper;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.List;
@@ -53,7 +54,9 @@ import static org.hamcrest.Matchers.startsWith;
  *
  */
 public class CopyToMapperTests extends ESSingleNodeTestCase {
+
     @SuppressWarnings("unchecked")
+    @Test
     public void testCopyToFieldsParsing() throws Exception {
         String mapping = jsonBuilder().startObject().startObject("type1").startObject("properties")
                 .startObject("copy_test")
@@ -132,6 +135,8 @@ public class CopyToMapperTests extends ESSingleNodeTestCase {
         assertThat(fieldMapper, instanceOf(LongFieldMapper.class));
     }
 
+    @SuppressWarnings("unchecked")
+    @Test
     public void testCopyToFieldsInnerObjectParsing() throws Exception {
         String mapping = jsonBuilder().startObject().startObject("type1").startObject("properties")
 
@@ -167,6 +172,8 @@ public class CopyToMapperTests extends ESSingleNodeTestCase {
 
     }
 
+    @SuppressWarnings("unchecked")
+    @Test
     public void testCopyToFieldsNonExistingInnerObjectParsing() throws Exception {
         String mapping = jsonBuilder().startObject().startObject("type1").startObject("properties")
 
@@ -191,7 +198,9 @@ public class CopyToMapperTests extends ESSingleNodeTestCase {
         }
     }
 
+    @Test
     public void testCopyToFieldMerge() throws Exception {
+
         String mappingBefore = jsonBuilder().startObject().startObject("type1").startObject("properties")
 
                 .startObject("copy_test")
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/core/TokenCountFieldMapperIntegrationIT.java b/core/src/test/java/org/elasticsearch/index/mapper/core/TokenCountFieldMapperIntegrationIT.java
index abca559..613cdde 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/core/TokenCountFieldMapperIntegrationIT.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/core/TokenCountFieldMapperIntegrationIT.java
@@ -21,7 +21,6 @@ package org.elasticsearch.index.mapper.core;
 
 import com.carrotsearch.randomizedtesting.annotations.Name;
 import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;
-
 import org.elasticsearch.ElasticsearchException;
 import org.elasticsearch.action.bulk.BulkResponse;
 import org.elasticsearch.action.index.IndexRequestBuilder;
@@ -32,6 +31,7 @@ import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.search.aggregations.AggregationBuilders;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -39,10 +39,7 @@ import java.util.Arrays;
 import java.util.List;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
-import static org.hamcrest.Matchers.containsInAnyOrder;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 public class TokenCountFieldMapperIntegrationIT extends ESIntegTestCase {
     @ParametersFactory
@@ -68,7 +65,8 @@ public class TokenCountFieldMapperIntegrationIT extends ESIntegTestCase {
     /**
      * It is possible to get the token count in a search response.
      */
-    public void testSearchReturnsTokenCount() throws IOException {
+    @Test
+    public void searchReturnsTokenCount() throws IOException {
         init();
 
         assertSearchReturns(searchById("single"), "single");
@@ -82,7 +80,8 @@ public class TokenCountFieldMapperIntegrationIT extends ESIntegTestCase {
     /**
      * It is possible to search by token count.
      */
-    public void testSearchByTokenCount() throws IOException {
+    @Test
+    public void searchByTokenCount() throws IOException {
         init();
 
         assertSearchReturns(searchByNumericRange(4, 4).get(), "single");
@@ -95,7 +94,8 @@ public class TokenCountFieldMapperIntegrationIT extends ESIntegTestCase {
     /**
      * It is possible to search by token count.
      */
-    public void testFacetByTokenCount() throws IOException {
+    @Test
+    public void facetByTokenCount() throws IOException {
         init();
 
         String facetField = randomFrom(Arrays.asList(
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/core/TokenCountFieldMapperTests.java b/core/src/test/java/org/elasticsearch/index/mapper/core/TokenCountFieldMapperTests.java
index b1224d5..5a644e5 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/core/TokenCountFieldMapperTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/core/TokenCountFieldMapperTests.java
@@ -29,6 +29,7 @@ import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.DocumentMapperParser;
 import org.elasticsearch.index.mapper.MergeResult;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Arrays;
@@ -40,6 +41,7 @@ import static org.hamcrest.Matchers.equalTo;
  * Test for {@link TokenCountFieldMapper}.
  */
 public class TokenCountFieldMapperTests extends ESSingleNodeTestCase {
+    @Test
     public void testMerge() throws IOException {
         String stage1Mapping = XContentFactory.jsonBuilder().startObject()
                 .startObject("person")
@@ -75,6 +77,7 @@ public class TokenCountFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(((TokenCountFieldMapper) stage1.mappers().smartNameFieldMapper("tc")).analyzer(), equalTo("standard"));
     }
 
+    @Test
     public void testCountPositions() throws IOException {
         // We're looking to make sure that we:
         Token t1 = new Token();      // Don't count tokens without an increment
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/dynamictemplate/genericstore/GenericStoreDynamicTemplateTests.java b/core/src/test/java/org/elasticsearch/index/mapper/dynamictemplate/genericstore/GenericStoreDynamicTemplateTests.java
index d07e617..7638340 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/dynamictemplate/genericstore/GenericStoreDynamicTemplateTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/dynamictemplate/genericstore/GenericStoreDynamicTemplateTests.java
@@ -27,6 +27,7 @@ import org.elasticsearch.index.mapper.FieldMapper;
 import org.elasticsearch.index.mapper.ParseContext.Document;
 import org.elasticsearch.index.mapper.ParsedDocument;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.test.StreamsUtils.copyToBytesFromClasspath;
 import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;
@@ -36,6 +37,8 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class GenericStoreDynamicTemplateTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testSimple() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/dynamictemplate/genericstore/test-mapping.json");
         IndexService index = createIndex("test");
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/dynamictemplate/pathmatch/PathMatchDynamicTemplateTests.java b/core/src/test/java/org/elasticsearch/index/mapper/dynamictemplate/pathmatch/PathMatchDynamicTemplateTests.java
index 829730e..34c855f 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/dynamictemplate/pathmatch/PathMatchDynamicTemplateTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/dynamictemplate/pathmatch/PathMatchDynamicTemplateTests.java
@@ -24,9 +24,10 @@ import org.elasticsearch.common.bytes.BytesArray;
 import org.elasticsearch.index.IndexService;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.FieldMapper;
-import org.elasticsearch.index.mapper.ParseContext.Document;
 import org.elasticsearch.index.mapper.ParsedDocument;
+import org.elasticsearch.index.mapper.ParseContext.Document;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.test.StreamsUtils.copyToBytesFromClasspath;
 import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;
@@ -36,6 +37,8 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class PathMatchDynamicTemplateTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testSimple() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/dynamictemplate/pathmatch/test-mapping.json");
         IndexService index = createIndex("test");
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/dynamictemplate/simple/SimpleDynamicTemplatesTests.java b/core/src/test/java/org/elasticsearch/index/mapper/dynamictemplate/simple/SimpleDynamicTemplatesTests.java
index 014f029..09358b5 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/dynamictemplate/simple/SimpleDynamicTemplatesTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/dynamictemplate/simple/SimpleDynamicTemplatesTests.java
@@ -25,13 +25,11 @@ import org.elasticsearch.common.bytes.BytesArray;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.json.JsonXContent;
 import org.elasticsearch.index.IndexService;
-import org.elasticsearch.index.mapper.DocumentFieldMappers;
-import org.elasticsearch.index.mapper.DocumentMapper;
-import org.elasticsearch.index.mapper.FieldMapper;
+import org.elasticsearch.index.mapper.*;
 import org.elasticsearch.index.mapper.ParseContext.Document;
-import org.elasticsearch.index.mapper.ParsedDocument;
 import org.elasticsearch.test.ESSingleNodeTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import static org.elasticsearch.test.StreamsUtils.copyToBytesFromClasspath;
 import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;
@@ -41,6 +39,8 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class SimpleDynamicTemplatesTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testMatchTypeOnly() throws Exception {
         XContentBuilder builder = JsonXContent.contentBuilder();
         builder.startObject().startObject("person").startArray("dynamic_templates").startObject().startObject("test")
@@ -66,6 +66,8 @@ public class SimpleDynamicTemplatesTests extends ESSingleNodeTestCase {
 
     }
 
+
+    @Test
     public void testSimple() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/dynamictemplate/simple/test-mapping.json");
         IndexService index = createIndex("test");
@@ -122,6 +124,7 @@ public class SimpleDynamicTemplatesTests extends ESSingleNodeTestCase {
         assertNotNull(fieldMapper);
     }
 
+    @Test
     public void testSimpleWithXContentTraverse() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/dynamictemplate/simple/test-mapping.json");
         IndexService index = createIndex("test");
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/externalvalues/ExternalValuesMapperIntegrationIT.java b/core/src/test/java/org/elasticsearch/index/mapper/externalvalues/ExternalValuesMapperIntegrationIT.java
index 2e763e2..6d28f2d 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/externalvalues/ExternalValuesMapperIntegrationIT.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/externalvalues/ExternalValuesMapperIntegrationIT.java
@@ -26,17 +26,20 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Collection;
 
 import static org.hamcrest.Matchers.equalTo;
 
 public class ExternalValuesMapperIntegrationIT extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return pluginList(ExternalMapperPlugin.class);
     }
 
+    @Test
     public void testExternalValues() throws Exception {
         prepareCreate("test-idx").addMapping("type",
                 XContentFactory.jsonBuilder().startObject().startObject("type")
@@ -81,6 +84,7 @@ public class ExternalValuesMapperIntegrationIT extends ESIntegTestCase {
         assertThat(response.getHits().totalHits(), equalTo((long) 1));
     }
 
+    @Test
     public void testExternalValuesWithMultifield() throws Exception {
         prepareCreate("test-idx").addMapping("doc",
                 XContentFactory.jsonBuilder().startObject().startObject("doc").startObject("properties")
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/externalvalues/SimpleExternalMappingTests.java b/core/src/test/java/org/elasticsearch/index/mapper/externalvalues/SimpleExternalMappingTests.java
index 658217c..bc808ab 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/externalvalues/SimpleExternalMappingTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/externalvalues/SimpleExternalMappingTests.java
@@ -24,6 +24,7 @@ import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.MapperService;
 import org.elasticsearch.index.mapper.ParsedDocument;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.notNullValue;
@@ -31,6 +32,8 @@ import static org.hamcrest.Matchers.notNullValue;
 /**
  */
 public class SimpleExternalMappingTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testExternalValues() throws Exception {
         MapperService mapperService = createIndex("test").mapperService();
         mapperService.documentMapperParser().putRootTypeParser(ExternalMetadataMapper.CONTENT_TYPE,
@@ -69,6 +72,7 @@ public class SimpleExternalMappingTests extends ESSingleNodeTestCase {
 
     }
 
+    @Test
     public void testExternalValuesWithMultifield() throws Exception {
         MapperService mapperService = createIndex("test").mapperService();
         mapperService.documentMapperParser().putTypeParser(RegisterExternalTypes.EXTERNAL,
@@ -116,6 +120,7 @@ public class SimpleExternalMappingTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().getField("field.field.raw").stringValue(), is("foo"));
     }
 
+    @Test
     public void testExternalValuesWithMultifieldTwoLevels() throws Exception {
         MapperService mapperService = createIndex("test").mapperService();
 
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapperTests.java b/core/src/test/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapperTests.java
index 1892081..1c5a847 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapperTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapperTests.java
@@ -34,6 +34,7 @@ import org.elasticsearch.index.mapper.ParsedDocument;
 import org.elasticsearch.search.SearchHitField;
 import org.elasticsearch.test.ESSingleNodeTestCase;
 import org.elasticsearch.test.VersionUtils;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -42,14 +43,12 @@ import java.util.Map;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.*;
 import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.isIn;
-import static org.hamcrest.Matchers.notNullValue;
 import static org.hamcrest.Matchers.nullValue;
 
 public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
+    @Test
     public void testLatLonValues() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", true).endObject().endObject()
@@ -71,6 +70,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("point"), equalTo("1.2,1.3"));
     }
 
+    @Test
     public void testLatLonValuesWithGeohash() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", true).field("geohash", true).endObject().endObject()
@@ -89,6 +89,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("point.geohash"), equalTo(XGeoHashUtils.stringEncode(1.3, 1.2)));
     }
 
+    @Test
     public void testLatLonInOneValueWithGeohash() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", true).field("geohash", true).endObject().endObject()
@@ -107,6 +108,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("point.geohash"), equalTo(XGeoHashUtils.stringEncode(1.3, 1.2)));
     }
 
+    @Test
     public void testGeoHashIndexValue() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", true).field("geohash", true).endObject().endObject()
@@ -125,6 +127,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("point.geohash"), equalTo(XGeoHashUtils.stringEncode(1.3, 1.2)));
     }
 
+    @Test
     public void testGeoHashValue() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", true).endObject().endObject()
@@ -143,6 +146,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("point"), notNullValue());
     }
 
+    @Test
     public void testNormalizeLatLonValuesDefault() throws Exception {
         // default to normalize
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
@@ -177,6 +181,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("point"), equalTo("-1.0,-179.0"));
     }
 
+    @Test
     public void testValidateLatLonValues() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", true).field("coerce", false)
@@ -237,6 +242,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
         }
     }
 
+    @Test
     public void testNoValidateLatLonValues() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", true).field("coerce", false)
@@ -277,6 +283,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
                 .bytes());
     }
 
+    @Test
     public void testLatLonValuesStored() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", true).field("store", "yes").endObject().endObject()
@@ -298,6 +305,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("point"), equalTo("1.2,1.3"));
     }
 
+    @Test
     public void testArrayLatLonValues() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", true).field("store", "yes").endObject().endObject()
@@ -324,6 +332,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().getFields("point")[1].stringValue(), equalTo("1.4,1.5"));
     }
 
+    @Test
     public void testLatLonInOneValue() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", true).endObject().endObject()
@@ -342,6 +351,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("point"), equalTo("1.2,1.3"));
     }
 
+    @Test
     public void testLatLonInOneValueStored() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", true).field("store", "yes").endObject().endObject()
@@ -362,6 +372,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("point"), equalTo("1.2,1.3"));
     }
 
+    @Test
     public void testLatLonInOneValueArray() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", true).field("store", "yes").endObject().endObject()
@@ -388,6 +399,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().getFields("point")[1].stringValue(), equalTo("1.4,1.5"));
     }
 
+    @Test
     public void testLonLatArray() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", true).endObject().endObject()
@@ -406,6 +418,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("point"), equalTo("1.2,1.3"));
     }
 
+    @Test
     public void testLonLatArrayDynamic() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startArray("dynamic_templates").startObject()
@@ -426,6 +439,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("point"), equalTo("1.2,1.3"));
     }
 
+    @Test
     public void testLonLatArrayStored() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", true).field("store", "yes").endObject().endObject()
@@ -446,6 +460,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("point"), equalTo("1.2,1.3"));
     }
 
+    @Test
     public void testLonLatArrayArrayStored() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", true).field("store", "yes").endObject().endObject()
@@ -476,6 +491,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
     /**
      * Test that expected exceptions are thrown when creating a new index with deprecated options
      */
+    @Test
     public void testOptionDeprecation() throws Exception {
         DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser();
         // test deprecation exceptions on newly created indexes
@@ -550,6 +566,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
     /**
      * Test backward compatibility
      */
+    @Test
     public void testBackwardCompatibleOptions() throws Exception {
         // backward compatibility testing
         Settings settings = Settings.settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED, VersionUtils.randomVersionBetween(random(), Version.V_1_0_0,
@@ -601,6 +618,7 @@ public class GeoPointFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(parser.parse(mapping).mapping().toString(), containsString("\"coerce\":true"));
     }
 
+    @Test
     public void testGeoPointMapperMerge() throws Exception {
         String stage1Mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", true).field("geohash", true)
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/geo/GeoShapeFieldMapperTests.java b/core/src/test/java/org/elasticsearch/index/mapper/geo/GeoShapeFieldMapperTests.java
index c00bd31..26f7129 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/geo/GeoShapeFieldMapperTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/geo/GeoShapeFieldMapperTests.java
@@ -30,6 +30,7 @@ import org.elasticsearch.index.mapper.DocumentMapperParser;
 import org.elasticsearch.index.mapper.FieldMapper;
 import org.elasticsearch.index.mapper.MergeResult;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -40,6 +41,8 @@ import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.isIn;
 
 public class GeoShapeFieldMapperTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testDefaultConfiguration() throws IOException {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("location")
@@ -132,6 +135,7 @@ public class GeoShapeFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(coerce, equalTo(false));
     }
 
+    @Test
     public void testGeohashConfiguration() throws IOException {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("location")
@@ -154,6 +158,7 @@ public class GeoShapeFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(strategy.getGrid().getMaxLevels(), equalTo(4));
     }
 
+    @Test
     public void testQuadtreeConfiguration() throws IOException {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("location")
@@ -177,7 +182,8 @@ public class GeoShapeFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(strategy.getGrid().getMaxLevels(), equalTo(6));
         assertThat(strategy.isPointsOnly(), equalTo(true));
     }
-
+    
+    @Test
     public void testLevelPrecisionConfiguration() throws IOException {
         DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser();
 
@@ -192,7 +198,7 @@ public class GeoShapeFieldMapperTests extends ESSingleNodeTestCase {
                     .endObject().endObject()
                     .endObject().endObject().string();
 
-
+            
             DocumentMapper defaultMapper = parser.parse(mapping);
             FieldMapper fieldMapper = defaultMapper.mappers().getMapper("location");
             assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));
@@ -203,7 +209,7 @@ public class GeoShapeFieldMapperTests extends ESSingleNodeTestCase {
             assertThat(strategy.getDistErrPct(), equalTo(0.5));
             assertThat(strategy.getGrid(), instanceOf(QuadPrefixTree.class));
             // 70m is more precise so it wins
-            assertThat(strategy.getGrid().getMaxLevels(), equalTo(GeoUtils.quadTreeLevelsForPrecision(70d)));
+            assertThat(strategy.getGrid().getMaxLevels(), equalTo(GeoUtils.quadTreeLevelsForPrecision(70d))); 
         }
 
         {
@@ -231,7 +237,7 @@ public class GeoShapeFieldMapperTests extends ESSingleNodeTestCase {
             // 70m is less precise so it loses
             assertThat(strategy.getGrid().getMaxLevels(), equalTo(26));
         }
-
+        
         {
             String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
                     .startObject("properties").startObject("location")
@@ -253,9 +259,9 @@ public class GeoShapeFieldMapperTests extends ESSingleNodeTestCase {
             assertThat(strategy.getDistErrPct(), equalTo(0.5));
             assertThat(strategy.getGrid(), instanceOf(GeohashPrefixTree.class));
             // 70m is more precise so it wins
-            assertThat(strategy.getGrid().getMaxLevels(), equalTo(GeoUtils.geoHashLevelsForPrecision(70d)));
+            assertThat(strategy.getGrid().getMaxLevels(), equalTo(GeoUtils.geoHashLevelsForPrecision(70d))); 
         }
-
+        
         {
             String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
                     .startObject("properties").startObject("location")
@@ -276,9 +282,9 @@ public class GeoShapeFieldMapperTests extends ESSingleNodeTestCase {
 
             assertThat(strategy.getDistErrPct(), equalTo(0.5));
             assertThat(strategy.getGrid(), instanceOf(GeohashPrefixTree.class));
-            assertThat(strategy.getGrid().getMaxLevels(),  equalTo(GeoUtils.geoHashLevelsForPrecision(70d)+1));
+            assertThat(strategy.getGrid().getMaxLevels(),  equalTo(GeoUtils.geoHashLevelsForPrecision(70d)+1)); 
         }
-
+        
         {
             String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
                     .startObject("properties").startObject("location")
@@ -299,10 +305,11 @@ public class GeoShapeFieldMapperTests extends ESSingleNodeTestCase {
 
             assertThat(strategy.getDistErrPct(), equalTo(0.5));
             assertThat(strategy.getGrid(), instanceOf(QuadPrefixTree.class));
-            assertThat(strategy.getGrid().getMaxLevels(), equalTo(GeoUtils.quadTreeLevelsForPrecision(70d)+1));
+            assertThat(strategy.getGrid().getMaxLevels(), equalTo(GeoUtils.quadTreeLevelsForPrecision(70d)+1)); 
         }
     }
 
+    @Test
     public void testPointsOnlyOption() throws IOException {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("location")
@@ -323,6 +330,7 @@ public class GeoShapeFieldMapperTests extends ESSingleNodeTestCase {
         assertThat(strategy.isPointsOnly(), equalTo(true));
     }
 
+    @Test
     public void testLevelDefaults() throws IOException {
         DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser();
         {
@@ -334,7 +342,7 @@ public class GeoShapeFieldMapperTests extends ESSingleNodeTestCase {
                     .endObject().endObject()
                     .endObject().endObject().string();
 
-
+            
             DocumentMapper defaultMapper = parser.parse(mapping);
             FieldMapper fieldMapper = defaultMapper.mappers().getMapper("location");
             assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));
@@ -345,9 +353,9 @@ public class GeoShapeFieldMapperTests extends ESSingleNodeTestCase {
             assertThat(strategy.getDistErrPct(), equalTo(0.5));
             assertThat(strategy.getGrid(), instanceOf(QuadPrefixTree.class));
             /* 50m is default */
-            assertThat(strategy.getGrid().getMaxLevels(), equalTo(GeoUtils.quadTreeLevelsForPrecision(50d)));
+            assertThat(strategy.getGrid().getMaxLevels(), equalTo(GeoUtils.quadTreeLevelsForPrecision(50d))); 
         }
-
+        
         {
             String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
                     .startObject("properties").startObject("location")
@@ -367,10 +375,11 @@ public class GeoShapeFieldMapperTests extends ESSingleNodeTestCase {
             assertThat(strategy.getDistErrPct(), equalTo(0.5));
             assertThat(strategy.getGrid(), instanceOf(GeohashPrefixTree.class));
             /* 50m is default */
-            assertThat(strategy.getGrid().getMaxLevels(), equalTo(GeoUtils.geoHashLevelsForPrecision(50d)));
+            assertThat(strategy.getGrid().getMaxLevels(), equalTo(GeoUtils.geoHashLevelsForPrecision(50d))); 
         }
     }
 
+    @Test
     public void testGeoShapeMapperMerge() throws Exception {
         String stage1Mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties")
                 .startObject("shape").field("type", "geo_shape").field("tree", "geohash").field("strategy", "recursive")
@@ -388,7 +397,7 @@ public class GeoShapeFieldMapperTests extends ESSingleNodeTestCase {
         // check correct conflicts
         assertThat(mergeResult.hasConflicts(), equalTo(true));
         assertThat(mergeResult.buildConflicts().length, equalTo(4));
-        ArrayList<String> conflicts = new ArrayList<>(Arrays.asList(mergeResult.buildConflicts()));
+        ArrayList conflicts = new ArrayList<>(Arrays.asList(mergeResult.buildConflicts()));
         assertThat("mapper [shape] has different [strategy]", isIn(conflicts));
         assertThat("mapper [shape] has different [tree]", isIn(conflicts));
         assertThat("mapper [shape] has different [tree_levels]", isIn(conflicts));
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/geo/GeohashMappingGeoPointTests.java b/core/src/test/java/org/elasticsearch/index/mapper/geo/GeohashMappingGeoPointTests.java
index 0e4da76..6338f4b 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/geo/GeohashMappingGeoPointTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/geo/GeohashMappingGeoPointTests.java
@@ -26,17 +26,16 @@ import org.elasticsearch.index.mapper.FieldMapper;
 import org.elasticsearch.index.mapper.ParsedDocument;
 import org.elasticsearch.test.ESSingleNodeTestCase;
 import org.hamcrest.MatcherAssert;
+import org.junit.Test;
 
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class GeohashMappingGeoPointTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testLatLonValues() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", false).endObject().endObject()
@@ -55,6 +54,7 @@ public class GeohashMappingGeoPointTests extends ESSingleNodeTestCase {
         MatcherAssert.assertThat(doc.rootDoc().get("point"), equalTo("1.2,1.3"));
     }
 
+    @Test
     public void testLatLonInOneValue() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("lat_lon", false).endObject().endObject()
@@ -73,6 +73,7 @@ public class GeohashMappingGeoPointTests extends ESSingleNodeTestCase {
         MatcherAssert.assertThat(doc.rootDoc().get("point"), equalTo("1.2,1.3"));
     }
 
+    @Test
     public void testGeoHashValue() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("geohash", true).endObject().endObject()
@@ -92,6 +93,7 @@ public class GeohashMappingGeoPointTests extends ESSingleNodeTestCase {
         MatcherAssert.assertThat(doc.rootDoc().get("point"), notNullValue());
     }
 
+    @Test
     public void testGeoHashPrecisionAsInteger() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("geohash", true).field("geohash_precision", 10).endObject().endObject()
@@ -103,6 +105,7 @@ public class GeohashMappingGeoPointTests extends ESSingleNodeTestCase {
         assertThat(geoPointFieldMapper.fieldType().geohashPrecision(), is(10));
     }
 
+    @Test
     public void testGeoHashPrecisionAsLength() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").field("geohash", true).field("geohash_precision", "5m").endObject().endObject()
@@ -114,6 +117,7 @@ public class GeohashMappingGeoPointTests extends ESSingleNodeTestCase {
         assertThat(geoPointFieldMapper.fieldType().geohashPrecision(), is(10));
     }
 
+    @Test
     public void testNullValue() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("point").field("type", "geo_point").endObject().endObject()
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/ip/SimpleIpMappingTests.java b/core/src/test/java/org/elasticsearch/index/mapper/ip/SimpleIpMappingTests.java
index 4245641..07d0940 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/ip/SimpleIpMappingTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/ip/SimpleIpMappingTests.java
@@ -25,6 +25,7 @@ import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.MapperParsingException;
 import org.elasticsearch.index.mapper.ParsedDocument;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.containsString;
@@ -37,6 +38,8 @@ import static org.hamcrest.Matchers.nullValue;
  *
  */
 public class SimpleIpMappingTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testSimpleMapping() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("ip").field("type", "ip").endObject().endObject()
@@ -54,10 +57,12 @@ public class SimpleIpMappingTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("ip"), is("2130706433"));
     }
 
+    @Test
     public void testThatValidIpCanBeConvertedToLong() throws Exception {
         assertThat(IpFieldMapper.ipToLong("127.0.0.1"), is(2130706433L));
     }
 
+    @Test
     public void testThatInvalidIpThrowsException() throws Exception {
         try {
             IpFieldMapper.ipToLong("127.0.011.1111111");
@@ -67,6 +72,7 @@ public class SimpleIpMappingTests extends ESSingleNodeTestCase {
         }
     }
 
+    @Test
     public void testThatIpv6AddressThrowsException() throws Exception {
         try {
             IpFieldMapper.ipToLong("2001:db8:0:8d3:0:8a2e:70:7344");
@@ -76,6 +82,7 @@ public class SimpleIpMappingTests extends ESSingleNodeTestCase {
         }
     }
 
+    @Test
     public void testIgnoreMalformedOption() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field1")
                 .field("type", "ip").field("ignore_malformed", true).endObject().startObject("field2").field("type", "ip")
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/lucene/DoubleIndexingDocTests.java b/core/src/test/java/org/elasticsearch/index/mapper/lucene/DoubleIndexingDocTests.java
index 656599c..9aade61 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/lucene/DoubleIndexingDocTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/lucene/DoubleIndexingDocTests.java
@@ -30,6 +30,7 @@ import org.elasticsearch.index.IndexService;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.ParsedDocument;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 
@@ -37,6 +38,8 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class DoubleIndexingDocTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testDoubleIndexingSameDoc() throws Exception {
         Directory dir = newDirectory();
         IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), Lucene.STANDARD_ANALYZER));
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/lucene/StoredNumericValuesTests.java b/core/src/test/java/org/elasticsearch/index/mapper/lucene/StoredNumericValuesTests.java
index d67b97c..380e8e3 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/lucene/StoredNumericValuesTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/lucene/StoredNumericValuesTests.java
@@ -35,6 +35,7 @@ import org.elasticsearch.index.fieldvisitor.CustomFieldsVisitor;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.ParsedDocument;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.HashSet;
@@ -46,6 +47,8 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class StoredNumericValuesTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testBytesAndNumericRepresentation() throws Exception {
         IndexWriter writer = new IndexWriter(new RAMDirectory(), new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
 
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldTests.java b/core/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldTests.java
index e1efd40..dc14ebe 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldTests.java
@@ -40,18 +40,19 @@ import org.elasticsearch.index.mapper.core.StringFieldMapper;
 import org.elasticsearch.index.mapper.core.TokenCountFieldMapper;
 import org.elasticsearch.index.mapper.geo.GeoPointFieldMapper;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Map;
 import java.util.TreeMap;
 
+import static org.elasticsearch.test.StreamsUtils.copyToBytesFromClasspath;
+import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.index.mapper.MapperBuilders.doc;
 import static org.elasticsearch.index.mapper.MapperBuilders.rootObject;
 import static org.elasticsearch.index.mapper.MapperBuilders.stringField;
-import static org.elasticsearch.test.StreamsUtils.copyToBytesFromClasspath;
-import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.notNullValue;
@@ -60,12 +61,15 @@ import static org.hamcrest.Matchers.notNullValue;
  *
  */
 public class MultiFieldTests extends ESSingleNodeTestCase {
-    public void testMultiFieldMultiFieldType() throws Exception {
+
+    @Test
+    public void testMultiField_multiFieldType() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/test-multi-field-type.json");
         testMultiField(mapping);
     }
 
-    public void testMultiFieldMultiFields() throws Exception {
+    @Test
+    public void testMultiField_multiFields() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/test-multi-fields.json");
         testMultiField(mapping);
     }
@@ -141,6 +145,7 @@ public class MultiFieldTests extends ESSingleNodeTestCase {
         assertThat(docMapper.mappers().getMapper("object1.multi1.string").fieldType().tokenized(), equalTo(false));
     }
 
+    @Test
     public void testBuildThenParse() throws Exception {
         IndexService indexService = createIndex("test");
         Settings settings = indexService.settingsService().getSettings();
@@ -181,6 +186,7 @@ public class MultiFieldTests extends ESSingleNodeTestCase {
         assertEquals(IndexOptions.NONE, f.fieldType().indexOptions());
     }
 
+    @Test
     public void testConvertMultiFieldNoDefaultField() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/test-multi-field-type-no-default-field.json");
         DocumentMapper docMapper = createIndex("test").mapperService().documentMapperParser().parse(mapping);
@@ -250,6 +256,7 @@ public class MultiFieldTests extends ESSingleNodeTestCase {
         assertThat(docMapper.mappers().getMapper("age.stored").fieldType().tokenized(), equalTo(false));
     }
 
+    @Test
     public void testConvertMultiFieldGeoPoint() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/test-multi-field-type-geo_point.json");
         DocumentMapper docMapper = createIndex("test").mapperService().documentMapperParser().parse(mapping);
@@ -346,6 +353,7 @@ public class MultiFieldTests extends ESSingleNodeTestCase {
         assertNotSame(IndexOptions.NONE, f.fieldType().indexOptions());
     }
 
+    @Test
     public void testConvertMultiFieldCompletion() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/test-multi-field-type-completion.json");
         DocumentMapper docMapper = createIndex("test").mapperService().documentMapperParser().parse(mapping);
@@ -413,6 +421,7 @@ public class MultiFieldTests extends ESSingleNodeTestCase {
         assertNotSame(IndexOptions.NONE, f.fieldType().indexOptions());
     }
 
+    @Test
     // The underlying order of the fields in multi fields in the mapping source should always be consistent, if not this
     // can to unnecessary re-syncing of the mappings between the local instance and cluster state
     public void testMultiFieldsInConsistentOrder() throws Exception {
@@ -442,11 +451,12 @@ public class MultiFieldTests extends ESSingleNodeTestCase {
             assertThat(field, equalTo(multiFieldNames[i++]));
         }
     }
-
+    
+    @Test
     // The fielddata settings need to be the same after deserializing/re-serialsing, else unneccesary mapping sync's can be triggered
     public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception {
         final String MY_MULTI_FIELD = "multi_field";
-
+        
         // Possible fielddata settings
         Map<String, Object> possibleSettings = new TreeMap<String, Object>();
         possibleSettings.put("filter.frequency.min", 1);
@@ -456,7 +466,7 @@ public class MultiFieldTests extends ESSingleNodeTestCase {
         possibleSettings.put("foo", "bar");
         possibleSettings.put("zetting", "zValue");
         possibleSettings.put("aSetting", "aValue");
-
+        
         // Generate a mapping with the a random subset of possible fielddata settings
         XContentBuilder builder = jsonBuilder().startObject().startObject("type").startObject("properties")
             .startObject("my_field").field("type", "string").startObject("fields").startObject(MY_MULTI_FIELD)
@@ -466,8 +476,8 @@ public class MultiFieldTests extends ESSingleNodeTestCase {
         for(int i = randomIntBetween(0, possibleSettings.size()-1); i >= 0; --i)
             builder.field(keys[i], possibleSettings.get(keys[i]));
         builder.endObject().endObject().endObject().endObject().endObject().endObject().endObject();
-
-        // Check the mapping remains identical when deserialed/re-serialsed
+        
+        // Check the mapping remains identical when deserialed/re-serialsed 
         final DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser();
         DocumentMapper docMapper = parser.parse(builder.string());
         DocumentMapper docMapper2 = parser.parse(docMapper.mappingSource().string());
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldsIntegrationIT.java b/core/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldsIntegrationIT.java
index 20ef622..25b9f2b 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldsIntegrationIT.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldsIntegrationIT.java
@@ -27,22 +27,20 @@ import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.common.xcontent.support.XContentMapValues;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Map;
 
-import static org.elasticsearch.index.query.QueryBuilders.constantScoreQuery;
-import static org.elasticsearch.index.query.QueryBuilders.geoDistanceQuery;
-import static org.elasticsearch.index.query.QueryBuilders.matchQuery;
+import static org.elasticsearch.index.query.QueryBuilders.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
 public class MultiFieldsIntegrationIT extends ESIntegTestCase {
+
+    @Test
     public void testMultiFields() throws Exception {
         assertAcked(
             client().admin().indices().prepareCreate("my-index")
@@ -100,6 +98,7 @@ public class MultiFieldsIntegrationIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
     }
 
+    @Test
     public void testGeoPointMultiField() throws Exception {
         assertAcked(
                 client().admin().indices().prepareCreate("my-index")
@@ -130,6 +129,7 @@ public class MultiFieldsIntegrationIT extends ESIntegTestCase {
         assertThat(countResponse.getHits().totalHits(), equalTo(1l));
     }
 
+    @Test
     public void testTokenCountMultiField() throws Exception {
         assertAcked(
                 client().admin().indices().prepareCreate("my-index")
@@ -168,6 +168,7 @@ public class MultiFieldsIntegrationIT extends ESIntegTestCase {
         assertThat(countResponse.getHits().totalHits(), equalTo(1l));
     }
 
+    @Test
     public void testCompletionMultiField() throws Exception {
         assertAcked(
                 client().admin().indices().prepareCreate("my-index")
@@ -193,6 +194,7 @@ public class MultiFieldsIntegrationIT extends ESIntegTestCase {
         assertThat(countResponse.getHits().totalHits(), equalTo(1l));
     }
 
+    @Test
     public void testIpMultiField() throws Exception {
         assertAcked(
                 client().admin().indices().prepareCreate("my-index")
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/multifield/merge/JavaMultiFieldMergeTests.java b/core/src/test/java/org/elasticsearch/index/mapper/multifield/merge/JavaMultiFieldMergeTests.java
index 07671a2..eec0002 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/multifield/merge/JavaMultiFieldMergeTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/multifield/merge/JavaMultiFieldMergeTests.java
@@ -28,18 +28,19 @@ import org.elasticsearch.index.mapper.DocumentMapperParser;
 import org.elasticsearch.index.mapper.MergeResult;
 import org.elasticsearch.index.mapper.ParseContext.Document;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 
 import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class JavaMultiFieldMergeTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testMergeMultiField() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json");
         DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser();
@@ -111,6 +112,7 @@ public class JavaMultiFieldMergeTests extends ESSingleNodeTestCase {
         assertThat(docMapper.mappers().getMapper("name.not_indexed3"), notNullValue());
     }
 
+    @Test
     public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json");
         DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser();
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/nested/NestedMappingTests.java b/core/src/test/java/org/elasticsearch/index/mapper/nested/NestedMappingTests.java
index be27e9f..5ae90bd 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/nested/NestedMappingTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/nested/NestedMappingTests.java
@@ -26,12 +26,15 @@ import org.elasticsearch.index.mapper.internal.TypeFieldMapper;
 import org.elasticsearch.index.mapper.object.ObjectMapper;
 import org.elasticsearch.index.mapper.object.ObjectMapper.Dynamic;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.nullValue;
 
 public class NestedMappingTests extends ESSingleNodeTestCase {
-    public void testEmptyNested() throws Exception {
+
+    @Test
+    public void emptyNested() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties")
                 .startObject("nested1").field("type", "nested").endObject()
                 .endObject().endObject().endObject().string();
@@ -57,7 +60,8 @@ public class NestedMappingTests extends ESSingleNodeTestCase {
         assertThat(doc.docs().size(), equalTo(1));
     }
 
-    public void testSingleNested() throws Exception {
+    @Test
+    public void singleNested() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties")
                 .startObject("nested1").field("type", "nested").endObject()
                 .endObject().endObject().endObject().string();
@@ -104,7 +108,8 @@ public class NestedMappingTests extends ESSingleNodeTestCase {
         assertThat(doc.docs().get(2).get("field"), equalTo("value"));
     }
 
-    public void testMultiNested() throws Exception {
+    @Test
+    public void multiNested() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties")
                 .startObject("nested1").field("type", "nested").startObject("properties")
                 .startObject("nested2").field("type", "nested")
@@ -155,7 +160,8 @@ public class NestedMappingTests extends ESSingleNodeTestCase {
         assertThat(doc.docs().get(6).get("nested1.nested2.field2"), nullValue());
     }
 
-    public void testMultiObjectAndNested1() throws Exception {
+    @Test
+    public void multiObjectAndNested1() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties")
                 .startObject("nested1").field("type", "nested").startObject("properties")
                 .startObject("nested2").field("type", "nested").field("include_in_parent", true)
@@ -206,7 +212,8 @@ public class NestedMappingTests extends ESSingleNodeTestCase {
         assertThat(doc.docs().get(6).get("nested1.nested2.field2"), nullValue());
     }
 
-    public void testMultiObjectAndNested2() throws Exception {
+    @Test
+    public void multiObjectAndNested2() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties")
                 .startObject("nested1").field("type", "nested").field("include_in_parent", true).startObject("properties")
                 .startObject("nested2").field("type", "nested").field("include_in_parent", true)
@@ -257,7 +264,8 @@ public class NestedMappingTests extends ESSingleNodeTestCase {
         assertThat(doc.docs().get(6).getFields("nested1.nested2.field2").length, equalTo(4));
     }
 
-    public void testMultiRootAndNested1() throws Exception {
+    @Test
+    public void multiRootAndNested1() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties")
                 .startObject("nested1").field("type", "nested").startObject("properties")
                 .startObject("nested2").field("type", "nested").field("include_in_root", true)
@@ -308,7 +316,8 @@ public class NestedMappingTests extends ESSingleNodeTestCase {
         assertThat(doc.docs().get(6).getFields("nested1.nested2.field2").length, equalTo(4));
     }
 
-    public void testNestedArrayStrict() throws Exception {
+    @Test
+    public void nestedArray_strict() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties")
                 .startObject("nested1").field("type", "nested").field("dynamic", "strict").startObject("properties")
                 .startObject("field1").field("type", "string")
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/null_value/NullValueTests.java b/core/src/test/java/org/elasticsearch/index/mapper/null_value/NullValueTests.java
index fedb2d8..d7aa84c 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/null_value/NullValueTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/null_value/NullValueTests.java
@@ -22,16 +22,19 @@ package org.elasticsearch.index.mapper.null_value;
 
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.XContentFactory;
-import org.elasticsearch.index.IndexService;
 import org.elasticsearch.index.mapper.MapperParsingException;
+import org.elasticsearch.index.IndexService;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
-import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
 public class NullValueTests extends ESSingleNodeTestCase {
-    public void testNullNullValue() throws Exception {
+
+    @Test
+    public void testNullNull_Value() throws Exception {
         IndexService indexService = createIndex("test", Settings.settingsBuilder().build());
         String[] typesToTest = {"integer", "long", "double", "float", "short", "date", "ip", "string", "boolean", "byte"};
 
@@ -54,6 +57,9 @@ public class NullValueTests extends ESSingleNodeTestCase {
             } catch (MapperParsingException e) {
                 assertThat(e.getMessage(), equalTo("Property [null_value] cannot be null."));
             }
+
         }
+
+
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/numeric/SimpleNumericTests.java b/core/src/test/java/org/elasticsearch/index/mapper/numeric/SimpleNumericTests.java
index de2957c..728152a 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/numeric/SimpleNumericTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/numeric/SimpleNumericTests.java
@@ -39,6 +39,7 @@ import org.elasticsearch.index.mapper.core.NumberFieldMapper;
 import org.elasticsearch.index.mapper.core.StringFieldMapper;
 import org.elasticsearch.index.mapper.string.SimpleStringMappingTests;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -51,6 +52,8 @@ import static org.hamcrest.Matchers.nullValue;
 /**
  */
 public class SimpleNumericTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testNumericDetectionEnabled() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .field("numeric_detection", true)
@@ -76,6 +79,7 @@ public class SimpleNumericTests extends ESSingleNodeTestCase {
         assertThat(mapper, instanceOf(DoubleFieldMapper.class));
     }
 
+    @Test
     public void testNumericDetectionDefault() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .endObject().endObject().string();
@@ -100,6 +104,7 @@ public class SimpleNumericTests extends ESSingleNodeTestCase {
         assertThat(mapper, instanceOf(StringFieldMapper.class));
     }
 
+    @Test
     public void testIgnoreMalformedOption() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties")
@@ -163,6 +168,7 @@ public class SimpleNumericTests extends ESSingleNodeTestCase {
         }
     }
 
+    @Test
     public void testCoerceOption() throws Exception {
         String [] nonFractionNumericFieldTypes={"integer","long","short"};
         //Test co-ercion policies on all non-fraction numerics
@@ -195,7 +201,7 @@ public class SimpleNumericTests extends ESSingleNodeTestCase {
             assertThat(doc.rootDoc().getField("noErrorCoerceField"), notNullValue());
             //Default is ignore_malformed=true and coerce=true
             assertThat(doc.rootDoc().getField("errorDefaultCoerce"), notNullValue());
-
+            
             //Test valid case of numbers passed as numbers
             int validNumber=1;
             doc = defaultMapper.parse("test", "type", "1", XContentFactory.jsonBuilder()
@@ -208,7 +214,7 @@ public class SimpleNumericTests extends ESSingleNodeTestCase {
             assertEquals(validNumber,doc.rootDoc().getField("noErrorNoCoerceField").numericValue().intValue());
             assertEquals(validNumber,doc.rootDoc().getField("noErrorCoerceField").numericValue().intValue());
             assertEquals(validNumber,doc.rootDoc().getField("errorDefaultCoerce").numericValue().intValue());
-
+            
             //Test valid case of negative numbers passed as numbers
             int validNegativeNumber=-1;
             doc = defaultMapper.parse("test", "type", "1", XContentFactory.jsonBuilder()
@@ -221,7 +227,7 @@ public class SimpleNumericTests extends ESSingleNodeTestCase {
             assertEquals(validNegativeNumber,doc.rootDoc().getField("noErrorNoCoerceField").numericValue().intValue());
             assertEquals(validNegativeNumber,doc.rootDoc().getField("noErrorCoerceField").numericValue().intValue());
             assertEquals(validNegativeNumber,doc.rootDoc().getField("errorDefaultCoerce").numericValue().intValue());
-
+            
 
             try {
                 defaultMapper.parse("test", "type", "1", XContentFactory.jsonBuilder()
@@ -232,8 +238,8 @@ public class SimpleNumericTests extends ESSingleNodeTestCase {
             } catch (MapperParsingException e) {
                 assertThat(e.getCause(), instanceOf(IllegalArgumentException.class));
             }
-
-
+            
+            
             //Test questionable case of floats passed to ints
             float invalidJsonForInteger=1.9f;
             int coercedFloatValue=1; //This is what the JSON parser will do to a float - truncate not round
@@ -248,7 +254,7 @@ public class SimpleNumericTests extends ESSingleNodeTestCase {
             assertEquals(coercedFloatValue,doc.rootDoc().getField("noErrorCoerceField").numericValue().intValue());
             //Default is ignore_malformed=true and coerce=true
             assertEquals(coercedFloatValue,doc.rootDoc().getField("errorDefaultCoerce").numericValue().intValue());
-
+            
             try {
                 defaultMapper.parse("test", "type", "1", XContentFactory.jsonBuilder()
                         .startObject()
@@ -260,8 +266,8 @@ public class SimpleNumericTests extends ESSingleNodeTestCase {
             }
         }
     }
-
-
+    
+    
     public void testDocValues() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties")
@@ -340,8 +346,9 @@ public class SimpleNumericTests extends ESSingleNodeTestCase {
             assertEquals(DocValuesType.SORTED_NUMERIC, SimpleStringMappingTests.docValuesType(doc, "nested.double"));
         }
     }
-
+    
     /** Test default precision step for autodetected numeric types */
+    @Test
     public void testPrecisionStepDefaultsDetected() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .field("numeric_detection", true)
@@ -357,16 +364,17 @@ public class SimpleNumericTests extends ESSingleNodeTestCase {
                 .field("date",   "2010-01-01")
                 .endObject()
                 .bytes());
-
+        
         assertEquals(1, doc.docs().size());
         Document luceneDoc = doc.docs().get(0);
-
+        
         assertPrecisionStepEquals(NumberFieldMapper.Defaults.PRECISION_STEP_64_BIT, luceneDoc.getField("long"));
         assertPrecisionStepEquals(NumberFieldMapper.Defaults.PRECISION_STEP_64_BIT, luceneDoc.getField("double"));
         assertPrecisionStepEquals(NumberFieldMapper.Defaults.PRECISION_STEP_64_BIT, luceneDoc.getField("date"));
     }
-
+    
     /** Test default precision step for numeric types */
+    @Test
     public void testPrecisionStepDefaultsMapped() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties")
@@ -394,12 +402,12 @@ public class SimpleNumericTests extends ESSingleNodeTestCase {
                 .startObject("ip")
                     .field("type", "ip")
                 .endObject()
-
+                
                 .endObject()
                 .endObject().endObject().string();
 
         DocumentMapper mapper = createIndex("test").mapperService().documentMapperParser().parse(mapping);
-
+        
         ParsedDocument doc = mapper.parse("test", "type", "1", XContentFactory.jsonBuilder()
                 .startObject()
                 .field("int",    "100")
@@ -412,23 +420,24 @@ public class SimpleNumericTests extends ESSingleNodeTestCase {
                 .field("ip",     "255.255.255.255")
                 .endObject()
                 .bytes());
-
+        
         assertEquals(1, doc.docs().size());
         Document luceneDoc = doc.docs().get(0);
-
+        
         assertPrecisionStepEquals(NumberFieldMapper.Defaults.PRECISION_STEP_64_BIT, luceneDoc.getField("long"));
         assertPrecisionStepEquals(NumberFieldMapper.Defaults.PRECISION_STEP_64_BIT, luceneDoc.getField("double"));
         assertPrecisionStepEquals(NumberFieldMapper.Defaults.PRECISION_STEP_64_BIT, luceneDoc.getField("date"));
         assertPrecisionStepEquals(NumberFieldMapper.Defaults.PRECISION_STEP_64_BIT, luceneDoc.getField("ip"));
-
+        
         assertPrecisionStepEquals(NumberFieldMapper.Defaults.PRECISION_STEP_32_BIT, luceneDoc.getField("int"));
         assertPrecisionStepEquals(NumberFieldMapper.Defaults.PRECISION_STEP_32_BIT, luceneDoc.getField("float"));
-
+        
         assertPrecisionStepEquals(NumberFieldMapper.Defaults.PRECISION_STEP_16_BIT, luceneDoc.getField("short"));
         assertPrecisionStepEquals(NumberFieldMapper.Defaults.PRECISION_STEP_8_BIT,  luceneDoc.getField("byte"));
     }
-
+    
     /** Test precision step set to silly explicit values */
+    @Test
     public void testPrecisionStepExplicit() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties")
@@ -464,12 +473,12 @@ public class SimpleNumericTests extends ESSingleNodeTestCase {
                     .field("type", "ip")
                     .field("precision_step", "2")
                 .endObject()
-
+                
                 .endObject()
                 .endObject().endObject().string();
 
         DocumentMapper mapper = createIndex("test").mapperService().documentMapperParser().parse(mapping);
-
+        
         ParsedDocument doc = mapper.parse("test", "type", "1", XContentFactory.jsonBuilder()
                 .startObject()
                 .field("int",    "100")
@@ -482,10 +491,10 @@ public class SimpleNumericTests extends ESSingleNodeTestCase {
                 .field("ip",     "255.255.255.255")
                 .endObject()
                 .bytes());
-
+        
         assertEquals(1, doc.docs().size());
         Document luceneDoc = doc.docs().get(0);
-
+        
         assertPrecisionStepEquals(1, luceneDoc.getField("int"));
         assertPrecisionStepEquals(2, luceneDoc.getField("float"));
         assertPrecisionStepEquals(1, luceneDoc.getField("long"));
@@ -496,18 +505,18 @@ public class SimpleNumericTests extends ESSingleNodeTestCase {
         assertPrecisionStepEquals(2, luceneDoc.getField("ip"));
 
     }
-
+    
     /** checks precisionstep on both the fieldtype and the tokenstream */
     private static void assertPrecisionStepEquals(int expected, IndexableField field) throws IOException {
         assertNotNull(field);
         assertThat(field, instanceOf(Field.class));
-
+        
         // check fieldtype's precisionstep
         assertEquals(expected, ((Field)field).fieldType().numericPrecisionStep());
-
+        
         // check the tokenstream actually used by the indexer
         TokenStream ts = field.tokenStream(null, null);
-        assertThat(ts, instanceOf(NumericTokenStream.class));
+        assertThat(ts, instanceOf(NumericTokenStream.class)); 
         assertEquals(expected, ((NumericTokenStream)ts).getPrecisionStep());
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/object/NullValueObjectMappingTests.java b/core/src/test/java/org/elasticsearch/index/mapper/object/NullValueObjectMappingTests.java
index b13fcc8..f2b0b19 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/object/NullValueObjectMappingTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/object/NullValueObjectMappingTests.java
@@ -23,6 +23,7 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.ParsedDocument;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -32,6 +33,8 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class NullValueObjectMappingTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testNullValueObject() throws IOException {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("obj1").field("type", "object").endObject().endObject()
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/object/SimpleObjectMappingTests.java b/core/src/test/java/org/elasticsearch/index/mapper/object/SimpleObjectMappingTests.java
index 917ee98..ee604e0 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/object/SimpleObjectMappingTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/object/SimpleObjectMappingTests.java
@@ -24,12 +24,13 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.MapperParsingException;
 import org.elasticsearch.test.ESSingleNodeTestCase;
-
-import static org.hamcrest.Matchers.containsString;
+import org.junit.Test;
 
 /**
  */
 public class SimpleObjectMappingTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testDifferentInnerObjectTokenFailure() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .endObject().endObject().string();
@@ -55,6 +56,7 @@ public class SimpleObjectMappingTests extends ESSingleNodeTestCase {
         }
     }
 
+    @Test
     public void testEmptyArrayProperties() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startArray("properties").endArray()
@@ -62,7 +64,8 @@ public class SimpleObjectMappingTests extends ESSingleNodeTestCase {
         createIndex("test").mapperService().documentMapperParser().parse(mapping);
     }
 
-    public void testEmptyFieldsArrayMultiFields() throws Exception {
+    @Test
+    public void emptyFieldsArrayMultiFieldsTest() throws Exception {
         String mapping = XContentFactory.jsonBuilder()
                                         .startObject()
                                             .startObject("tweet")
@@ -80,7 +83,8 @@ public class SimpleObjectMappingTests extends ESSingleNodeTestCase {
         createIndex("test").mapperService().documentMapperParser().parse(mapping);
     }
 
-    public void testFieldsArrayMultiFieldsShouldThrowException() throws Exception {
+    @Test(expected = MapperParsingException.class)
+    public void fieldsArrayMultiFieldsShouldThrowExceptionTest() throws Exception {
         String mapping = XContentFactory.jsonBuilder()
                 .startObject()
                     .startObject("tweet")
@@ -97,16 +101,11 @@ public class SimpleObjectMappingTests extends ESSingleNodeTestCase {
                     .endObject()
                 .endObject()
                 .string();
-        try {
-            createIndex("test").mapperService().documentMapperParser().parse(mapping);
-            fail("Expected MapperParsingException");
-        } catch(MapperParsingException e) {
-            assertThat(e.getMessage(), containsString("expected map for property [fields]"));
-            assertThat(e.getMessage(), containsString("but got a class java.util.ArrayList"));
-        }
+        createIndex("test").mapperService().documentMapperParser().parse(mapping);
     }
 
-    public void testEmptyFieldsArray() throws Exception {
+    @Test
+    public void emptyFieldsArrayTest() throws Exception {
         String mapping = XContentFactory.jsonBuilder()
                                         .startObject()
                                             .startObject("tweet")
@@ -120,7 +119,8 @@ public class SimpleObjectMappingTests extends ESSingleNodeTestCase {
         createIndex("test").mapperService().documentMapperParser().parse(mapping);
     }
 
-    public void testFieldsWithFilledArrayShouldThrowException() throws Exception {
+    @Test(expected = MapperParsingException.class)
+    public void fieldsWithFilledArrayShouldThrowExceptionTest() throws Exception {
         String mapping = XContentFactory.jsonBuilder()
                 .startObject()
                     .startObject("tweet")
@@ -133,15 +133,11 @@ public class SimpleObjectMappingTests extends ESSingleNodeTestCase {
                     .endObject()
                 .endObject()
                 .string();
-        try {
-            createIndex("test").mapperService().documentMapperParser().parse(mapping);
-            fail("Expected MapperParsingException");
-        } catch (MapperParsingException e) {
-            assertThat(e.getMessage(), containsString("Expected map for property [fields]"));
-        }
+        createIndex("test").mapperService().documentMapperParser().parse(mapping);
     }
 
-    public void testFieldPropertiesArray() throws Exception {
+    @Test
+    public void fieldPropertiesArrayTest() throws Exception {
         String mapping = XContentFactory.jsonBuilder()
                                         .startObject()
                                             .startObject("tweet")
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/path/PathMapperTests.java b/core/src/test/java/org/elasticsearch/index/mapper/path/PathMapperTests.java
index 2582562..06ef922 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/path/PathMapperTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/path/PathMapperTests.java
@@ -21,6 +21,7 @@ package org.elasticsearch.index.mapper.path;
 
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -32,6 +33,8 @@ import static org.hamcrest.Matchers.nullValue;
  *
  */
 public class PathMapperTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testPathMapping() throws IOException {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/path/test-mapping.json");
         DocumentMapper docMapper = createIndex("test").mapperService().documentMapperParser().parse(mapping);
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/simple/SimpleMapperTests.java b/core/src/test/java/org/elasticsearch/index/mapper/simple/SimpleMapperTests.java
index edd1f0f..d89ae84 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/simple/SimpleMapperTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/simple/SimpleMapperTests.java
@@ -19,32 +19,28 @@
 
 package org.elasticsearch.index.mapper.simple;
 
+import java.nio.charset.StandardCharsets;
 import org.elasticsearch.common.bytes.BytesArray;
 import org.elasticsearch.common.bytes.BytesReference;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.XContentFactory;
-import org.elasticsearch.index.IndexService;
-import org.elasticsearch.index.mapper.DocumentMapper;
-import org.elasticsearch.index.mapper.DocumentMapperParser;
-import org.elasticsearch.index.mapper.MapperParsingException;
+import org.elasticsearch.index.mapper.*;
 import org.elasticsearch.index.mapper.ParseContext.Document;
-import org.elasticsearch.index.mapper.Uid;
+import org.elasticsearch.index.IndexService;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
-import java.nio.charset.StandardCharsets;
-
-import static org.elasticsearch.index.mapper.MapperBuilders.doc;
-import static org.elasticsearch.index.mapper.MapperBuilders.object;
-import static org.elasticsearch.index.mapper.MapperBuilders.rootObject;
-import static org.elasticsearch.index.mapper.MapperBuilders.stringField;
 import static org.elasticsearch.test.StreamsUtils.copyToBytesFromClasspath;
 import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;
+import static org.elasticsearch.index.mapper.MapperBuilders.*;
 import static org.hamcrest.Matchers.equalTo;
 
 /**
  *
  */
 public class SimpleMapperTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testSimpleMapper() throws Exception {
         IndexService indexService = createIndex("test");
         Settings settings = indexService.settingsService().getSettings();
@@ -58,22 +54,31 @@ public class SimpleMapperTests extends ESSingleNodeTestCase {
         Document doc = docMapper.parse("test", "person", "1", json).rootDoc();
 
         assertThat(doc.get(docMapper.mappers().getMapper("name.first").fieldType().names().indexName()), equalTo("shay"));
+//        System.out.println("Document: " + doc);
+//        System.out.println("Json: " + docMapper.sourceMapper().value(doc));
         doc = docMapper.parse("test", "person", "1", json).rootDoc();
+//        System.out.println("Document: " + doc);
+//        System.out.println("Json: " + docMapper.sourceMapper().value(doc));
     }
 
+    @Test
     public void testParseToJsonAndParse() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/simple/test-mapping.json");
         DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser();
         DocumentMapper docMapper = parser.parse(mapping);
         String builtMapping = docMapper.mappingSource().string();
+//        System.out.println(builtMapping);
         // reparse it
         DocumentMapper builtDocMapper = parser.parse(builtMapping);
         BytesReference json = new BytesArray(copyToBytesFromClasspath("/org/elasticsearch/index/mapper/simple/test1.json"));
         Document doc = builtDocMapper.parse("test", "person", "1", json).rootDoc();
         assertThat(doc.get(docMapper.uidMapper().fieldType().names().indexName()), equalTo(Uid.createUid("person", "1")));
         assertThat(doc.get(docMapper.mappers().getMapper("name.first").fieldType().names().indexName()), equalTo("shay"));
+//        System.out.println("Document: " + doc);
+//        System.out.println("Json: " + docMapper.sourceMapper().value(doc));
     }
 
+    @Test
     public void testSimpleParser() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/simple/test-mapping.json");
         DocumentMapper docMapper = createIndex("test").mapperService().documentMapperParser().parse(mapping);
@@ -84,8 +89,11 @@ public class SimpleMapperTests extends ESSingleNodeTestCase {
         Document doc = docMapper.parse("test", "person", "1", json).rootDoc();
         assertThat(doc.get(docMapper.uidMapper().fieldType().names().indexName()), equalTo(Uid.createUid("person", "1")));
         assertThat(doc.get(docMapper.mappers().getMapper("name.first").fieldType().names().indexName()), equalTo("shay"));
+//        System.out.println("Document: " + doc);
+//        System.out.println("Json: " + docMapper.sourceMapper().value(doc));
     }
 
+    @Test
     public void testSimpleParserNoTypeNoId() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/simple/test-mapping.json");
         DocumentMapper docMapper = createIndex("test").mapperService().documentMapperParser().parse(mapping);
@@ -93,8 +101,11 @@ public class SimpleMapperTests extends ESSingleNodeTestCase {
         Document doc = docMapper.parse("test", "person", "1", json).rootDoc();
         assertThat(doc.get(docMapper.uidMapper().fieldType().names().indexName()), equalTo(Uid.createUid("person", "1")));
         assertThat(doc.get(docMapper.mappers().getMapper("name.first").fieldType().names().indexName()), equalTo("shay"));
+//        System.out.println("Document: " + doc);
+//        System.out.println("Json: " + docMapper.sourceMapper().value(doc));
     }
 
+    @Test
     public void testAttributes() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/simple/test-mapping.json");
         DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser();
@@ -107,6 +118,7 @@ public class SimpleMapperTests extends ESSingleNodeTestCase {
         assertThat((String) builtDocMapper.meta().get("param1"), equalTo("value1"));
     }
 
+    @Test
     public void testNoDocumentSent() throws Exception {
         IndexService indexService = createIndex("test");
         Settings settings = indexService.settingsService().getSettings();
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/source/CompressSourceMappingTests.java b/core/src/test/java/org/elasticsearch/index/mapper/source/CompressSourceMappingTests.java
index 7c1875b..56c188b 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/source/CompressSourceMappingTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/source/CompressSourceMappingTests.java
@@ -29,6 +29,7 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.ParsedDocument;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 
@@ -38,6 +39,7 @@ import static org.hamcrest.Matchers.equalTo;
 public class CompressSourceMappingTests extends ESSingleNodeTestCase {
     Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();
 
+    @Test
     public void testCompressDisabled() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_source").field("compress", false).endObject()
@@ -53,6 +55,7 @@ public class CompressSourceMappingTests extends ESSingleNodeTestCase {
         assertThat(CompressorFactory.isCompressed(new BytesArray(bytes)), equalTo(false));
     }
 
+    @Test
     public void testCompressEnabled() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_source").field("compress", true).endObject()
@@ -69,6 +72,7 @@ public class CompressSourceMappingTests extends ESSingleNodeTestCase {
         assertThat(CompressorFactory.isCompressed(new BytesArray(bytes)), equalTo(true));
     }
 
+    @Test
     public void testCompressThreshold() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_source").field("compress_threshold", "200b").endObject()
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/string/SimpleStringMappingTests.java b/core/src/test/java/org/elasticsearch/index/mapper/string/SimpleStringMappingTests.java
index 3dfd2b4..a54b63d 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/string/SimpleStringMappingTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/string/SimpleStringMappingTests.java
@@ -47,6 +47,7 @@ import org.elasticsearch.index.mapper.core.StringFieldMapper.Builder;
 import org.elasticsearch.test.ESSingleNodeTestCase;
 import org.elasticsearch.test.VersionUtils;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.Map;
@@ -60,6 +61,7 @@ import static org.hamcrest.Matchers.nullValue;
 /**
  */
 public class SimpleStringMappingTests extends ESSingleNodeTestCase {
+
     private static Settings DOC_VALUES_SETTINGS = Settings.builder().put(FieldDataType.FORMAT_KEY, FieldDataType.DOC_VALUES_FORMAT_VALUE).build();
 
     IndexService indexService;
@@ -71,6 +73,7 @@ public class SimpleStringMappingTests extends ESSingleNodeTestCase {
         parser = indexService.mapperService().documentMapperParser();
     }
 
+    @Test
     public void testLimit() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("field").field("type", "string").field("ignore_above", 5).endObject().endObject()
@@ -131,6 +134,7 @@ public class SimpleStringMappingTests extends ESSingleNodeTestCase {
         assertEquals(expected, doc.rootDoc().getField("field").fieldType());
     }
 
+    @Test
     public void testDefaultsForAnalyzed() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("field").field("type", "string").endObject().endObject()
@@ -149,6 +153,7 @@ public class SimpleStringMappingTests extends ESSingleNodeTestCase {
         assertParseIdemPotent(fieldType, defaultMapper);
     }
 
+    @Test
     public void testDefaultsForNotAnalyzed() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("field").field("type", "string").field("index", "not_analyzed").endObject().endObject()
@@ -213,6 +218,7 @@ public class SimpleStringMappingTests extends ESSingleNodeTestCase {
         assertParseIdemPotent(fieldType, defaultMapper);
     }
 
+    @Test
     public void testSearchQuoteAnalyzerSerialization() throws Exception {
         // Cases where search_quote_analyzer should not be added to the mapping.
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
@@ -288,6 +294,7 @@ public class SimpleStringMappingTests extends ESSingleNodeTestCase {
         return result;
     }
 
+    @Test
     public void testTermVectors() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties")
@@ -473,6 +480,7 @@ public class SimpleStringMappingTests extends ESSingleNodeTestCase {
         return DocValuesType.NONE;
     }
 
+    @Test
     public void testDisableNorms() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").startObject("field").field("type", "string").endObject().endObject()
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/timestamp/TimestampMappingTests.java b/core/src/test/java/org/elasticsearch/index/mapper/timestamp/TimestampMappingTests.java
index df9cc10..e51b6a6 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/timestamp/TimestampMappingTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/timestamp/TimestampMappingTests.java
@@ -37,15 +37,10 @@ import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.json.JsonXContent;
-import org.elasticsearch.index.mapper.DocumentMapper;
-import org.elasticsearch.index.mapper.DocumentMapperParser;
-import org.elasticsearch.index.mapper.MappedFieldType;
-import org.elasticsearch.index.mapper.MapperParsingException;
-import org.elasticsearch.index.mapper.MergeResult;
-import org.elasticsearch.index.mapper.ParsedDocument;
-import org.elasticsearch.index.mapper.SourceToParse;
+import org.elasticsearch.index.mapper.*;
 import org.elasticsearch.index.mapper.internal.TimestampFieldMapper;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
@@ -60,20 +55,14 @@ import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.test.VersionUtils.randomVersion;
 import static org.elasticsearch.test.VersionUtils.randomVersionBetween;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.hasKey;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.isIn;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
-import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
 public class TimestampMappingTests extends ESSingleNodeTestCase {
     Settings BWC_SETTINGS = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();
 
+    @Test
     public void testSimpleDisabled() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").endObject().string();
         DocumentMapper docMapper = createIndex("test").mapperService().documentMapperParser().parse(mapping);
@@ -87,6 +76,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().getField("_timestamp"), equalTo(null));
     }
 
+    @Test
     public void testEnabled() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp").field("enabled", "yes").endObject()
@@ -104,6 +94,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().getField("_timestamp").tokenStream(docMapper.mappers().indexAnalyzer(), null), notNullValue());
     }
 
+    @Test
     public void testDefaultValues() throws Exception {
         for (Version version : Arrays.asList(V_1_5_0, V_2_0_0_beta1, randomVersion(random()))) {
             for (String mapping : Arrays.asList(
@@ -123,6 +114,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         }
     }
 
+    @Test
     public void testBackcompatSetValues() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp")
@@ -140,6 +132,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         assertThat(docMapper.timestampFieldMapper().fieldType().hasDocValues(), equalTo(true));
     }
 
+    @Test
     public void testThatDisablingDuringMergeIsWorking() throws Exception {
         String enabledMapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp").field("enabled", true).endObject()
@@ -157,7 +150,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         assertThat(enabledMapper.timestampFieldMapper().enabled(), is(false));
     }
 
-    // issue 3174
+    @Test // issue 3174
     public void testThatSerializationWorksCorrectlyForIndexField() throws Exception {
         String enabledMapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp").field("enabled", true).field("store", "yes").field("index", "no").endObject()
@@ -178,7 +171,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         assertThat(timestampConfiguration.get("index").toString(), is("no"));
     }
 
-    // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
+    @Test // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
     public void testBackcompatPathMissingDefaultValue() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp")
@@ -206,7 +199,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         }
     }
 
-    // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
+    @Test // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
     public void testTimestampDefaultValue() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp")
@@ -232,7 +225,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         assertThat(delay, lessThanOrEqualTo(60000L));
     }
 
-    // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
+    @Test // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
     public void testBackcompatPathMissingDefaultToEpochValue() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp")
@@ -258,7 +251,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         assertThat(request.timestamp(), is(MappingMetaData.Timestamp.parseStringTimestamp("1970-01-01", Joda.forPattern("YYYY-MM-dd"), Version.CURRENT)));
     }
 
-    // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
+    @Test // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
     public void testTimestampMissingDefaultToEpochValue() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp")
@@ -283,7 +276,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         assertThat(request.timestamp(), is(MappingMetaData.Timestamp.parseStringTimestamp("1970-01-01", Joda.forPattern("YYYY-MM-dd"), Version.CURRENT)));
     }
 
-    // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
+    @Test // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
     public void testBackcompatPathMissingNowDefaultValue() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp")
@@ -312,7 +305,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         assertThat(delay, lessThanOrEqualTo(60000L));
     }
 
-    // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
+    @Test // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
     public void testTimestampMissingNowDefaultValue() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp")
@@ -340,7 +333,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         assertThat(delay, lessThanOrEqualTo(60000L));
     }
 
-    // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
+    @Test // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
     public void testPathMissingWithForcedNullDefaultShouldFail() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp")
@@ -357,7 +350,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         }
     }
 
-    // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
+    @Test // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
     public void testBackcompatPathMissingShouldFail() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp")
@@ -385,7 +378,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         }
     }
 
-    // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
+    @Test // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
     public void testTimestampMissingWithForcedNullDefaultShouldFail() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp")
@@ -402,7 +395,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         }
     }
 
-    // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
+    @Test // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
     public void testTimestampDefaultAndIgnore() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp")
@@ -420,7 +413,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         }
     }
 
-    // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
+    @Test // Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
     public void testTimestampMissingShouldNotFail() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp")
@@ -447,6 +440,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         assertThat(delay, lessThanOrEqualTo(60000L));
     }
 
+    @Test
     public void testDefaultTimestampStream() throws IOException {
         // Testing null value for default timestamp
         {
@@ -500,6 +494,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         }
     }
 
+    @Test
     public void testMergingFielddataLoadingWorks() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp").field("enabled", randomBoolean()).startObject("fielddata").field("loading", "lazy").field("format", "doc_values").endObject().field("store", "yes").endObject()
@@ -520,6 +515,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         assertThat(docMapper.timestampFieldMapper().fieldType().fieldDataType().getFormat(indexSettings), equalTo("array"));
     }
 
+    @Test
     public void testParsingNotDefaultTwiceDoesNotChangeMapping() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp")
@@ -533,6 +529,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         assertThat(docMapper.mappingSource().string(), equalTo(mapping));
     }
 
+    @Test
     public void testBackcompatParsingTwiceDoesNotChangeTokenizeValue() throws Exception {
         String[] index_options = {"no", "analyzed", "not_analyzed"};
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
@@ -554,6 +551,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         assertThat(tokenized, equalTo(docMapper.timestampFieldMapper().fieldType().tokenized()));
     }
 
+    @Test
     public void testMergingConflicts() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp").field("enabled", true)
@@ -595,6 +593,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         assertThat(docMapper.timestampFieldMapper().fieldType().fieldDataType().getFormat(indexSettings), equalTo("doc_values"));
     }
 
+    @Test
     public void testBackcompatMergingConflictsForIndexValues() throws Exception {
         List<String> indexValues = new ArrayList<>();
         indexValues.add("analyzed");
@@ -634,6 +633,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
     /**
      * Test for issue #9223
      */
+    @Test
     public void testInitMappers() throws IOException {
         String mapping = XContentFactory.jsonBuilder().startObject()
                 .startObject("type")
@@ -646,6 +646,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
         new MappingMetaData(new CompressedXContent(mapping));
     }
 
+    @Test
     public void testBackcompatMergePaths() throws Exception {
         String[] possiblePathValues = {"some_path", "anotherPath", null};
         DocumentMapperParser parser = createIndex("test", BWC_SETTINGS).mapperService().documentMapperParser();
@@ -680,7 +681,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
             assertThat(mergeResult.buildConflicts()[0], containsString(conflict));
         }
     }
-
+    
     public void testBackcompatDocValuesSerialization() throws Exception {
         // default
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
@@ -725,7 +726,7 @@ public class TimestampMappingTests extends ESSingleNodeTestCase {
             .endObject().endObject().endObject().string();
         assertDocValuesSerialization(mapping);
     }
-
+    
     void assertDocValuesSerialization(String mapping) throws Exception {
         DocumentMapperParser parser = createIndex("test_doc_values", BWC_SETTINGS).mapperService().documentMapperParser();
         DocumentMapper docMapper = parser.parse(mapping);
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/ttl/TTLMappingTests.java b/core/src/test/java/org/elasticsearch/index/mapper/ttl/TTLMappingTests.java
index 7802e86..b9f7a98 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/ttl/TTLMappingTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/ttl/TTLMappingTests.java
@@ -31,16 +31,11 @@ import org.elasticsearch.common.compress.CompressedXContent;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
-import org.elasticsearch.index.IndexService;
-import org.elasticsearch.index.mapper.DocumentMapper;
-import org.elasticsearch.index.mapper.DocumentMapperParser;
-import org.elasticsearch.index.mapper.MapperParsingException;
-import org.elasticsearch.index.mapper.MergeMappingException;
-import org.elasticsearch.index.mapper.MergeResult;
-import org.elasticsearch.index.mapper.ParsedDocument;
-import org.elasticsearch.index.mapper.SourceToParse;
+import org.elasticsearch.index.mapper.*;
 import org.elasticsearch.index.mapper.internal.TTLFieldMapper;
+import org.elasticsearch.index.IndexService;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -50,6 +45,7 @@ import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.notNullValue;
 
 public class TTLMappingTests extends ESSingleNodeTestCase {
+    @Test
     public void testSimpleDisabled() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").endObject().string();
         DocumentMapper docMapper = createIndex("test").mapperService().documentMapperParser().parse(mapping);
@@ -63,6 +59,7 @@ public class TTLMappingTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().getField("_ttl"), equalTo(null));
     }
 
+    @Test
     public void testEnabled() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_ttl").field("enabled", "yes").endObject()
@@ -80,6 +77,7 @@ public class TTLMappingTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().getField("_ttl").tokenStream(docMapper.mappers().indexAnalyzer(), null), notNullValue());
     }
 
+    @Test
     public void testDefaultValues() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").endObject().string();
         DocumentMapper docMapper = createIndex("test").mapperService().documentMapperParser().parse(mapping);
@@ -88,6 +86,8 @@ public class TTLMappingTests extends ESSingleNodeTestCase {
         assertThat(docMapper.TTLFieldMapper().fieldType().indexOptions(), equalTo(TTLFieldMapper.Defaults.TTL_FIELD_TYPE.indexOptions()));
     }
 
+
+    @Test
     public void testSetValuesBackcompat() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_ttl")
@@ -101,6 +101,7 @@ public class TTLMappingTests extends ESSingleNodeTestCase {
 
     }
 
+    @Test
     public void testThatEnablingTTLFieldOnMergeWorks() throws Exception {
         String mappingWithoutTtl = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties").field("field").startObject().field("type", "string").endObject().endObject()
@@ -123,6 +124,7 @@ public class TTLMappingTests extends ESSingleNodeTestCase {
         assertThat(mapperWithoutTtl.TTLFieldMapper().enabled(), equalTo(true));
     }
 
+    @Test
     public void testThatChangingTTLKeepsMapperEnabled() throws Exception {
         String mappingWithTtl = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_ttl")
@@ -148,6 +150,7 @@ public class TTLMappingTests extends ESSingleNodeTestCase {
         assertThat(initialMapper.TTLFieldMapper().enabled(), equalTo(true));
     }
 
+    @Test
     public void testThatDisablingTTLReportsConflict() throws Exception {
         String mappingWithTtl = getMappingWithTtlEnabled().string();
         String mappingWithTtlDisabled = getMappingWithTtlDisabled().string();
@@ -161,6 +164,7 @@ public class TTLMappingTests extends ESSingleNodeTestCase {
         assertThat(initialMapper.TTLFieldMapper().enabled(), equalTo(true));
     }
 
+    @Test
     public void testThatDisablingTTLReportsConflictOnCluster() throws Exception {
         String mappingWithTtl = getMappingWithTtlEnabled().string();
         String mappingWithTtlDisabled = getMappingWithTtlDisabled().string();
@@ -176,6 +180,7 @@ public class TTLMappingTests extends ESSingleNodeTestCase {
         assertThat(mappingsBeforeUpdateResponse.getMappings().get("testindex").get("type").source(), equalTo(mappingsAfterUpdateResponse.getMappings().get("testindex").get("type").source()));
     }
 
+    @Test
     public void testThatEnablingTTLAfterFirstDisablingWorks() throws Exception {
         String mappingWithTtl = getMappingWithTtlEnabled().string();
         String withTtlDisabled = getMappingWithTtlDisabled().string();
@@ -187,6 +192,7 @@ public class TTLMappingTests extends ESSingleNodeTestCase {
         assertThat(mappingsAfterUpdateResponse.getMappings().get("testindex").get("type").sourceAsMap().get("_ttl").toString(), equalTo("{enabled=true}"));
     }
 
+    @Test
     public void testNoConflictIfNothingSetAndDisabledLater() throws Exception {
         IndexService indexService = createIndex("testindex", Settings.settingsBuilder().build(), "type");
         XContentBuilder mappingWithTtlDisabled = getMappingWithTtlDisabled("7d");
@@ -194,6 +200,7 @@ public class TTLMappingTests extends ESSingleNodeTestCase {
         assertFalse(mergeResult.hasConflicts());
     }
 
+    @Test
     public void testNoConflictIfNothingSetAndEnabledLater() throws Exception {
         IndexService indexService = createIndex("testindex", Settings.settingsBuilder().build(), "type");
         XContentBuilder mappingWithTtlEnabled = getMappingWithTtlEnabled("7d");
@@ -201,6 +208,7 @@ public class TTLMappingTests extends ESSingleNodeTestCase {
         assertFalse(mergeResult.hasConflicts());
     }
 
+    @Test
     public void testMergeWithOnlyDefaultSet() throws Exception {
         XContentBuilder mappingWithTtlEnabled = getMappingWithTtlEnabled("7d");
         IndexService indexService = createIndex("testindex", Settings.settingsBuilder().build(), "type", mappingWithTtlEnabled);
@@ -211,6 +219,7 @@ public class TTLMappingTests extends ESSingleNodeTestCase {
         assertThat(mappingAfterMerge, equalTo(new CompressedXContent("{\"type\":{\"_ttl\":{\"enabled\":true,\"default\":360000},\"properties\":{\"field\":{\"type\":\"string\"}}}}")));
     }
 
+    @Test
     public void testMergeWithOnlyDefaultSetTtlDisabled() throws Exception {
         XContentBuilder mappingWithTtlEnabled = getMappingWithTtlDisabled("7d");
         IndexService indexService = createIndex("testindex", Settings.settingsBuilder().build(), "type", mappingWithTtlEnabled);
@@ -223,7 +232,9 @@ public class TTLMappingTests extends ESSingleNodeTestCase {
         assertThat(mappingAfterMerge, equalTo(new CompressedXContent("{\"type\":{\"_ttl\":{\"enabled\":false},\"properties\":{\"field\":{\"type\":\"string\"}}}}")));
     }
 
+    @Test
     public void testThatSimulatedMergingLeavesStateUntouched() throws Exception {
+
         //check if default ttl changed when simulate set to true
         XContentBuilder mappingWithTtl = getMappingWithTtlEnabled("6d");
         IndexService indexService = createIndex("testindex", Settings.settingsBuilder().build(), "type", mappingWithTtl);
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/typelevels/ParseDocumentTypeLevelsTests.java b/core/src/test/java/org/elasticsearch/index/mapper/typelevels/ParseDocumentTypeLevelsTests.java
index 26d710b..21ee965 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/typelevels/ParseDocumentTypeLevelsTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/typelevels/ParseDocumentTypeLevelsTests.java
@@ -23,6 +23,7 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.ParsedDocument;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 
@@ -30,6 +31,8 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class ParseDocumentTypeLevelsTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testNoLevel() throws Exception {
         String defaultMapping = XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject().string();
 
@@ -48,6 +51,7 @@ public class ParseDocumentTypeLevelsTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("inner.inner_field"), equalTo("inner_value"));
     }
 
+    @Test
     public void testTypeLevel() throws Exception {
         String defaultMapping = XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject().string();
 
@@ -66,6 +70,7 @@ public class ParseDocumentTypeLevelsTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("type.inner.inner_field"), equalTo("inner_value"));
     }
 
+    @Test
     public void testNoLevelWithFieldTypeAsValue() throws Exception {
         String defaultMapping = XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject().string();
 
@@ -86,6 +91,7 @@ public class ParseDocumentTypeLevelsTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("inner.inner_field"), equalTo("inner_value"));
     }
 
+    @Test
     public void testTypeLevelWithFieldTypeAsValue() throws Exception {
         String defaultMapping = XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject().string();
 
@@ -106,6 +112,7 @@ public class ParseDocumentTypeLevelsTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("type.inner.inner_field"), equalTo("inner_value"));
     }
 
+    @Test
     public void testNoLevelWithFieldTypeAsObject() throws Exception {
         String defaultMapping = XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject().string();
 
@@ -126,6 +133,7 @@ public class ParseDocumentTypeLevelsTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("test2"), equalTo("value2"));
     }
 
+    @Test
     public void testTypeLevelWithFieldTypeAsObject() throws Exception {
         String defaultMapping = XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject().string();
 
@@ -146,6 +154,7 @@ public class ParseDocumentTypeLevelsTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("type.inner.inner_field"), equalTo("inner_value"));
     }
 
+    @Test
     public void testNoLevelWithFieldTypeAsValueNotFirst() throws Exception {
         String defaultMapping = XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject().string();
 
@@ -166,6 +175,7 @@ public class ParseDocumentTypeLevelsTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("type.inner.inner_field"), equalTo("inner_value"));
     }
 
+    @Test
     public void testTypeLevelWithFieldTypeAsValueNotFirst() throws Exception {
         String defaultMapping = XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject().string();
 
@@ -186,6 +196,7 @@ public class ParseDocumentTypeLevelsTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("type.inner.inner_field"), equalTo("inner_value"));
     }
 
+    @Test
     public void testNoLevelWithFieldTypeAsObjectNotFirst() throws Exception {
         String defaultMapping = XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject().string();
 
@@ -207,6 +218,7 @@ public class ParseDocumentTypeLevelsTests extends ESSingleNodeTestCase {
         assertThat(doc.rootDoc().get("inner.inner_field"), equalTo("inner_value"));
     }
 
+    @Test
     public void testTypeLevelWithFieldTypeAsObjectNotFirst() throws Exception {
         String defaultMapping = XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject().string();
 
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/typelevels/ParseMappingTypeLevelTests.java b/core/src/test/java/org/elasticsearch/index/mapper/typelevels/ParseMappingTypeLevelTests.java
index d99efee..f675475 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/typelevels/ParseMappingTypeLevelTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/typelevels/ParseMappingTypeLevelTests.java
@@ -23,11 +23,14 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.DocumentMapperParser;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 
 // TODO: move this test...it doesn't need to be by itself
 public class ParseMappingTypeLevelTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testTypeLevel() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("_timestamp").field("enabled", true).endObject()
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/update/UpdateMappingOnClusterIT.java b/core/src/test/java/org/elasticsearch/index/mapper/update/UpdateMappingOnClusterIT.java
index bf97cec..4ae039a 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/update/UpdateMappingOnClusterIT.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/update/UpdateMappingOnClusterIT.java
@@ -26,27 +26,32 @@ import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.index.mapper.MapperParsingException;
 import org.elasticsearch.index.mapper.MergeMappingException;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.HashMap;
 
-import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;
+import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 
 public class UpdateMappingOnClusterIT extends ESIntegTestCase {
+
     private static final String INDEX = "index";
     private static final String TYPE = "type";
 
-    public void testAllEnabled() throws Exception {
+
+    @Test
+    public void test_all_enabled() throws Exception {
         XContentBuilder mapping = jsonBuilder().startObject().startObject("mappings").startObject(TYPE).startObject("_all").field("enabled", "false").endObject().endObject().endObject().endObject();
         XContentBuilder mappingUpdate = jsonBuilder().startObject().startObject("_all").field("enabled", "true").endObject().startObject("properties").startObject("text").field("type", "string").endObject().endObject().endObject();
         String errorMessage = "[_all] enabled is false now encountering true";
         testConflict(mapping.string(), mappingUpdate.string(), errorMessage);
     }
 
-    public void testAllConflicts() throws Exception {
+    @Test
+    public void test_all_conflicts() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/update/all_mapping_create_index.json");
         String mappingUpdate = copyToStringFromClasspath("/org/elasticsearch/index/mapper/update/all_mapping_update_with_conflicts.json");
         String[] errorMessage = {"[_all] enabled is true now encountering false",
@@ -62,7 +67,9 @@ public class UpdateMappingOnClusterIT extends ESIntegTestCase {
         testConflict(mapping, mappingUpdate, errorMessage);
     }
 
-    public void testAllWithDefault() throws Exception {
+
+    @Test
+    public void test_all_with_default() throws Exception {
         String defaultMapping = jsonBuilder().startObject().startObject("_default_")
                 .startObject("_all")
                 .field("enabled", false)
@@ -108,7 +115,8 @@ public class UpdateMappingOnClusterIT extends ESIntegTestCase {
 
     }
 
-    public void testDocValuesInvalidMapping() throws Exception {
+    @Test
+    public void test_doc_valuesInvalidMapping() throws Exception {
         String mapping = jsonBuilder().startObject().startObject("mappings").startObject(TYPE).startObject("_all").startObject("fielddata").field("format", "doc_values").endObject().endObject().endObject().endObject().endObject().string();
         try {
             prepareCreate(INDEX).setSource(mapping).get();
@@ -118,7 +126,8 @@ public class UpdateMappingOnClusterIT extends ESIntegTestCase {
         }
     }
 
-    public void testDocValuesInvalidMappingOnUpdate() throws Exception {
+    @Test
+    public void test_doc_valuesInvalidMappingOnUpdate() throws Exception {
         String mapping = jsonBuilder().startObject().startObject(TYPE).startObject("properties").startObject("text").field("type", "string").endObject().endObject().endObject().string();
         prepareCreate(INDEX).addMapping(TYPE, mapping).get();
         String mappingUpdate = jsonBuilder().startObject().startObject(TYPE).startObject("_all").startObject("fielddata").field("format", "doc_values").endObject().endObject().endObject().endObject().string();
@@ -134,6 +143,7 @@ public class UpdateMappingOnClusterIT extends ESIntegTestCase {
     }
 
     // checks if the setting for timestamp and size are kept even if disabled
+    @Test
     public void testDisabledSizeTimestampIndexDoNotLooseMappings() throws Exception {
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/update/default_mapping_with_disabled_root_types.json");
         prepareCreate(INDEX).addMapping(TYPE, mapping).get();
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/update/UpdateMappingTests.java b/core/src/test/java/org/elasticsearch/index/mapper/update/UpdateMappingTests.java
index 5149ab1..c10dc3b 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/update/UpdateMappingTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/update/UpdateMappingTests.java
@@ -26,11 +26,12 @@ import org.elasticsearch.common.compress.CompressedXContent;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
-import org.elasticsearch.index.IndexService;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.MapperService;
+import org.elasticsearch.index.IndexService;
 import org.elasticsearch.index.mapper.MergeResult;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.LinkedHashMap;
@@ -40,32 +41,38 @@ import static org.hamcrest.CoreMatchers.equalTo;
 
 
 public class UpdateMappingTests extends ESSingleNodeTestCase {
-    public void testAllEnabledAfterDisabled() throws Exception {
+
+    @Test
+    public void test_all_enabled_after_disabled() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("_all").field("enabled", false).endObject().endObject();
         XContentBuilder mappingUpdate = XContentFactory.jsonBuilder().startObject().startObject("_all").field("enabled", true).endObject().startObject("properties").startObject("text").field("type", "string").endObject().endObject().endObject();
         testConflictWhileMergingAndMappingUnchanged(mapping, mappingUpdate);
     }
 
-    public void testAllDisabledAfterEnabled() throws Exception {
+    @Test
+    public void test_all_disabled_after_enabled() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("_all").field("enabled", true).endObject().endObject();
         XContentBuilder mappingUpdate = XContentFactory.jsonBuilder().startObject().startObject("_all").field("enabled", false).endObject().startObject("properties").startObject("text").field("type", "string").endObject().endObject().endObject();
         testConflictWhileMergingAndMappingUnchanged(mapping, mappingUpdate);
     }
 
-    public void testAllDisabledAfterDefaultEnabled() throws Exception {
+    @Test
+    public void test_all_disabled_after_default_enabled() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("properties").startObject("some_text").field("type", "string").endObject().endObject().endObject();
         XContentBuilder mappingUpdate = XContentFactory.jsonBuilder().startObject().startObject("_all").field("enabled", false).endObject().startObject("properties").startObject("text").field("type", "string").endObject().endObject().endObject();
         testConflictWhileMergingAndMappingUnchanged(mapping, mappingUpdate);
     }
 
-    public void testAllEnabledAfterEnabled() throws Exception {
+    @Test
+    public void test_all_enabled_after_enabled() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("_all").field("enabled", true).endObject().endObject();
         XContentBuilder mappingUpdate = XContentFactory.jsonBuilder().startObject().startObject("_all").field("enabled", true).endObject().startObject("properties").startObject("text").field("type", "string").endObject().endObject().endObject();
         XContentBuilder expectedMapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_all").field("enabled", true).endObject().startObject("properties").startObject("text").field("type", "string").endObject().endObject().endObject().endObject();
         testNoConflictWhileMergingAndMappingChanged(mapping, mappingUpdate, expectedMapping);
     }
 
-    public void testAllDisabledAfterDisabled() throws Exception {
+    @Test
+    public void test_all_disabled_after_disabled() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("_all").field("enabled", false).endObject().endObject();
         XContentBuilder mappingUpdate = XContentFactory.jsonBuilder().startObject().startObject("_all").field("enabled", false).endObject().startObject("properties").startObject("text").field("type", "string").endObject().endObject().endObject();
         XContentBuilder expectedMapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_all").field("enabled", false).endObject().startObject("properties").startObject("text").field("type", "string").endObject().endObject().endObject().endObject();
@@ -107,6 +114,7 @@ public class UpdateMappingTests extends ESSingleNodeTestCase {
         assertThat(mappingAfterUpdate, equalTo(mappingBeforeUpdate));
     }
 
+    @Test
     public void testIndexFieldParsingBackcompat() throws IOException {
         IndexService indexService = createIndex("test", Settings.settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build());
         XContentBuilder indexMapping = XContentFactory.jsonBuilder();
@@ -124,6 +132,7 @@ public class UpdateMappingTests extends ESSingleNodeTestCase {
         assertThat(documentMapper.indexMapper().enabled(), equalTo(enabled));
     }
 
+    @Test
     public void testTimestampParsing() throws IOException {
         IndexService indexService = createIndex("test", Settings.settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build());
         XContentBuilder indexMapping = XContentFactory.jsonBuilder();
@@ -149,6 +158,7 @@ public class UpdateMappingTests extends ESSingleNodeTestCase {
         assertTrue(documentMapper.timestampFieldMapper().fieldType().stored());
     }
 
+    @Test
     public void testSizeTimestampIndexParsing() throws IOException {
         IndexService indexService = createIndex("test", Settings.settingsBuilder().build());
         String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/update/default_mapping_with_disabled_root_types.json");
@@ -158,6 +168,7 @@ public class UpdateMappingTests extends ESSingleNodeTestCase {
         assertThat(documentMapper.mappingSource().string(), equalTo(mapping));
     }
 
+    @Test
     public void testDefaultApplied() throws IOException {
         createIndex("test1", Settings.settingsBuilder().build());
         createIndex("test2", Settings.settingsBuilder().build());
diff --git a/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java
index 2812938..f8a6673 100644
--- a/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java
+++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java
@@ -91,6 +91,7 @@ import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.lang.reflect.InvocationHandler;
@@ -309,6 +310,7 @@ public abstract class AbstractQueryTestCase<QB extends AbstractQueryBuilder<QB>>
      * Generic test that creates new query from the test query and checks both for equality
      * and asserts equality on the two queries.
      */
+    @Test
     public void testFromXContent() throws IOException {
         QB testQuery = createTestQueryBuilder();
         assertParsedQuery(testQuery.toString(), testQuery);
@@ -364,6 +366,7 @@ public abstract class AbstractQueryTestCase<QB extends AbstractQueryBuilder<QB>>
      * Test creates the {@link Query} from the {@link QueryBuilder} under test and delegates the
      * assertions being made on the result to the implementing subclass.
      */
+    @Test
     public void testToQuery() throws IOException {
         QueryShardContext context = createShardContext();
         context.setAllowUnmappedFields(true);
@@ -447,6 +450,7 @@ public abstract class AbstractQueryTestCase<QB extends AbstractQueryBuilder<QB>>
     /**
      * Test serialization and deserialization of the test query.
      */
+    @Test
     public void testSerialization() throws IOException {
         QB testQuery = createTestQueryBuilder();
         assertSerialization(testQuery);
@@ -470,6 +474,7 @@ public abstract class AbstractQueryTestCase<QB extends AbstractQueryBuilder<QB>>
         }
     }
 
+    @Test
     public void testEqualsAndHashcode() throws IOException {
         QB firstQuery = createTestQueryBuilder();
         assertFalse("query is equal to null", firstQuery.equals(null));
diff --git a/core/src/test/java/org/elasticsearch/index/query/AbstractTermQueryTestCase.java b/core/src/test/java/org/elasticsearch/index/query/AbstractTermQueryTestCase.java
index 161e758..adab170 100644
--- a/core/src/test/java/org/elasticsearch/index/query/AbstractTermQueryTestCase.java
+++ b/core/src/test/java/org/elasticsearch/index/query/AbstractTermQueryTestCase.java
@@ -21,10 +21,13 @@ package org.elasticsearch.index.query;
 
 import com.fasterxml.jackson.core.io.JsonStringEncoder;
 
+import org.junit.Test;
+
 import java.util.HashMap;
 import java.util.Map;
 
 public abstract class AbstractTermQueryTestCase<QB extends BaseTermQueryBuilder<QB>> extends AbstractQueryTestCase<QB> {
+
     @Override
     protected final QB doCreateTestQueryBuilder() {
         String fieldName = null;
@@ -72,6 +75,7 @@ public abstract class AbstractTermQueryTestCase<QB extends BaseTermQueryBuilder<
 
     protected abstract QB createQueryBuilder(String fieldName, Object value);
 
+    @Test
     public void testIllegalArguments() throws QueryShardException {
         try {
             if (randomBoolean()) {
diff --git a/core/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java
index 04f07a9..68e739c 100644
--- a/core/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java
@@ -21,6 +21,7 @@ package org.elasticsearch.index.query;
 
 import org.apache.lucene.search.*;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.*;
@@ -31,6 +32,7 @@ import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.instanceOf;
 
 public class BoolQueryBuilderTests extends AbstractQueryTestCase<BoolQueryBuilder> {
+
     @Override
     protected BoolQueryBuilder doCreateTestQueryBuilder() {
         BoolQueryBuilder query = new BoolQueryBuilder();
@@ -144,6 +146,7 @@ public class BoolQueryBuilderTests extends AbstractQueryTestCase<BoolQueryBuilde
         return alternateVersions;
     }
 
+    @Test
     public void testIllegalArguments() {
         BoolQueryBuilder booleanQuery = new BoolQueryBuilder();
 
@@ -173,6 +176,7 @@ public class BoolQueryBuilderTests extends AbstractQueryTestCase<BoolQueryBuilde
     }
 
     // https://github.com/elasticsearch/elasticsearch/issues/7240
+    @Test
     public void testEmptyBooleanQuery() throws Exception {
         String query = jsonBuilder().startObject().startObject("bool").endObject().endObject().string();
         Query parsedQuery = parseQuery(query).toQuery(createShardContext());
diff --git a/core/src/test/java/org/elasticsearch/index/query/BoostingQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/BoostingQueryBuilderTests.java
index 17610f2..57fab99 100644
--- a/core/src/test/java/org/elasticsearch/index/query/BoostingQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/BoostingQueryBuilderTests.java
@@ -21,6 +21,7 @@ package org.elasticsearch.index.query;
 
 import org.apache.lucene.queries.BoostingQuery;
 import org.apache.lucene.search.Query;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -47,6 +48,7 @@ public class BoostingQueryBuilderTests extends AbstractQueryTestCase<BoostingQue
         }
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             new BoostingQueryBuilder(null, new MatchAllQueryBuilder());
diff --git a/core/src/test/java/org/elasticsearch/index/query/CommonTermsQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/CommonTermsQueryBuilderTests.java
index cfe2284..04f8437 100644
--- a/core/src/test/java/org/elasticsearch/index/query/CommonTermsQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/CommonTermsQueryBuilderTests.java
@@ -21,6 +21,7 @@ package org.elasticsearch.index.query;
 
 import org.apache.lucene.queries.ExtendedCommonTermsQuery;
 import org.apache.lucene.search.Query;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -45,7 +46,7 @@ public class CommonTermsQueryBuilderTests extends AbstractQueryTestCase<CommonTe
         }
 
         if (randomBoolean()) {
-            query.cutoffFrequency(randomIntBetween(1, 10));
+            query.cutoffFrequency((float) randomIntBetween(1, 10));
         }
 
         if (randomBoolean()) {
@@ -84,6 +85,7 @@ public class CommonTermsQueryBuilderTests extends AbstractQueryTestCase<CommonTe
         assertThat(extendedCommonTermsQuery.getLowFreqMinimumNumberShouldMatchSpec(), equalTo(queryBuilder.lowFreqMinimumShouldMatch()));
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             if (randomBoolean()) {
@@ -104,6 +106,7 @@ public class CommonTermsQueryBuilderTests extends AbstractQueryTestCase<CommonTe
         }
     }
 
+    @Test
     public void testNoTermsFromQueryString() throws IOException {
         CommonTermsQueryBuilder builder = new CommonTermsQueryBuilder(STRING_FIELD_NAME, "");
         QueryShardContext context = createShardContext();
@@ -111,6 +114,7 @@ public class CommonTermsQueryBuilderTests extends AbstractQueryTestCase<CommonTe
         assertNull(builder.toQuery(context));
     }
 
+    @Test
     public void testCommonTermsQuery1() throws IOException {
         String query = copyToStringFromClasspath("/org/elasticsearch/index/query/commonTerms-query1.json");
         Query parsedQuery = parseQuery(query).toQuery(createShardContext());
@@ -120,6 +124,7 @@ public class CommonTermsQueryBuilderTests extends AbstractQueryTestCase<CommonTe
         assertThat(ectQuery.getLowFreqMinimumNumberShouldMatchSpec(), equalTo("2"));
     }
 
+    @Test
     public void testCommonTermsQuery2() throws IOException {
         String query = copyToStringFromClasspath("/org/elasticsearch/index/query/commonTerms-query2.json");
         Query parsedQuery = parseQuery(query).toQuery(createShardContext());
@@ -129,6 +134,7 @@ public class CommonTermsQueryBuilderTests extends AbstractQueryTestCase<CommonTe
         assertThat(ectQuery.getLowFreqMinimumNumberShouldMatchSpec(), equalTo("5<20%"));
     }
 
+    @Test
     public void testCommonTermsQuery3() throws IOException {
         String query = copyToStringFromClasspath("/org/elasticsearch/index/query/commonTerms-query3.json");
         Query parsedQuery = parseQuery(query).toQuery(createShardContext());
@@ -138,7 +144,7 @@ public class CommonTermsQueryBuilderTests extends AbstractQueryTestCase<CommonTe
         assertThat(ectQuery.getLowFreqMinimumNumberShouldMatchSpec(), equalTo("2"));
     }
 
-    // see #11730
+    @Test // see #11730
     public void testCommonTermsQuery4() throws IOException {
         boolean disableCoord = randomBoolean();
         Query parsedQuery = parseQuery(commonTermsQuery("field", "text").disableCoord(disableCoord).buildAsBytes()).toQuery(createShardContext());
@@ -146,4 +152,5 @@ public class CommonTermsQueryBuilderTests extends AbstractQueryTestCase<CommonTe
         ExtendedCommonTermsQuery ectQuery = (ExtendedCommonTermsQuery) parsedQuery;
         assertThat(ectQuery.isCoordDisabled(), equalTo(disableCoord));
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/index/query/CommonTermsQueryParserTests.java b/core/src/test/java/org/elasticsearch/index/query/CommonTermsQueryParserTests.java
index 8430e11..d339a5d 100644
--- a/core/src/test/java/org/elasticsearch/index/query/CommonTermsQueryParserTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/CommonTermsQueryParserTests.java
@@ -21,10 +21,12 @@ package org.elasticsearch.index.query;
 
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
 public class CommonTermsQueryParserTests extends ESSingleNodeTestCase {
+    @Test
     public void testWhenParsedQueryIsNullNoNullPointerExceptionIsThrown() throws IOException {
         final String index = "test-index";
         final String type = "test-type";
diff --git a/core/src/test/java/org/elasticsearch/index/query/ConstantScoreQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/ConstantScoreQueryBuilderTests.java
index 44bcbee..2bafc95 100644
--- a/core/src/test/java/org/elasticsearch/index/query/ConstantScoreQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/ConstantScoreQueryBuilderTests.java
@@ -22,14 +22,15 @@ package org.elasticsearch.index.query;
 import org.apache.lucene.search.ConstantScoreQuery;
 import org.apache.lucene.search.Query;
 import org.elasticsearch.common.ParsingException;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.hamcrest.CoreMatchers.nullValue;
-import static org.hamcrest.Matchers.containsString;
 
 public class ConstantScoreQueryBuilderTests extends AbstractQueryTestCase<ConstantScoreQueryBuilder> {
+
     /**
      * @return a {@link ConstantScoreQueryBuilder} with random boost between 0.1f and 2.0f
      */
@@ -53,16 +54,13 @@ public class ConstantScoreQueryBuilderTests extends AbstractQueryTestCase<Consta
     /**
      * test that missing "filter" element causes {@link ParsingException}
      */
+    @Test(expected=ParsingException.class)
     public void testFilterElement() throws IOException {
         String queryString = "{ \"" + ConstantScoreQueryBuilder.NAME + "\" : {}";
-        try {
-            parseQuery(queryString);
-            fail("Expected ParsingException");
-        } catch (ParsingException e) {
-            assertThat(e.getMessage(), containsString("requires a 'filter' element"));
-        }
+        parseQuery(queryString);
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             new ConstantScoreQueryBuilder(null);
diff --git a/core/src/test/java/org/elasticsearch/index/query/DisMaxQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/DisMaxQueryBuilderTests.java
index 3c6efd4..0dac9c9 100644
--- a/core/src/test/java/org/elasticsearch/index/query/DisMaxQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/DisMaxQueryBuilderTests.java
@@ -23,20 +23,16 @@ import org.apache.lucene.index.Term;
 import org.apache.lucene.search.DisjunctionMaxQuery;
 import org.apache.lucene.search.PrefixQuery;
 import org.apache.lucene.search.Query;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
 import static org.hamcrest.CoreMatchers.nullValue;
-import static org.hamcrest.Matchers.closeTo;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
+import static org.hamcrest.Matchers.*;
 
 public class DisMaxQueryBuilderTests extends AbstractQueryTestCase<DisMaxQueryBuilder> {
+
     /**
      * @return a {@link DisMaxQueryBuilder} with random inner queries
      */
@@ -88,6 +84,7 @@ public class DisMaxQueryBuilderTests extends AbstractQueryTestCase<DisMaxQueryBu
     /**
      * test `null`return value for missing inner queries
      */
+    @Test
     public void testNoInnerQueries() throws IOException {
         DisMaxQueryBuilder disMaxBuilder = new DisMaxQueryBuilder();
         assertNull(disMaxBuilder.toQuery(createShardContext()));
@@ -98,6 +95,7 @@ public class DisMaxQueryBuilderTests extends AbstractQueryTestCase<DisMaxQueryBu
      * Those should be ignored upstream. To test this, we use inner {@link ConstantScoreQueryBuilder}
      * with empty inner filter.
      */
+    @Test
     public void testInnerQueryReturnsNull() throws IOException {
         String queryString = "{ \"" + ConstantScoreQueryBuilder.NAME + "\" : { \"filter\" : { } } }";
         QueryBuilder<?> innerQueryBuilder = parseQuery(queryString);
@@ -105,6 +103,7 @@ public class DisMaxQueryBuilderTests extends AbstractQueryTestCase<DisMaxQueryBu
         assertNull(disMaxBuilder.toQuery(createShardContext()));
     }
 
+    @Test
     public void testIllegalArguments() {
         DisMaxQueryBuilder disMaxQuery = new DisMaxQueryBuilder();
         try {
@@ -115,6 +114,7 @@ public class DisMaxQueryBuilderTests extends AbstractQueryTestCase<DisMaxQueryBu
         }
     }
 
+    @Test
     public void testToQueryInnerPrefixQuery() throws Exception {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String queryAsString = "{\n" +
diff --git a/core/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java
index 1464822..92523bb 100644
--- a/core/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java
@@ -25,6 +25,7 @@ import org.apache.lucene.search.ConstantScoreQuery;
 import org.apache.lucene.search.Query;
 import org.elasticsearch.cluster.metadata.MetaData;
 import org.elasticsearch.index.mapper.object.ObjectMapper;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Collection;
@@ -33,6 +34,7 @@ import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.instanceOf;
 
 public class ExistsQueryBuilderTests extends AbstractQueryTestCase<ExistsQueryBuilder> {
+
     @Override
     protected ExistsQueryBuilder doCreateTestQueryBuilder() {
         String fieldPattern;
@@ -78,6 +80,7 @@ public class ExistsQueryBuilderTests extends AbstractQueryTestCase<ExistsQueryBu
         }
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             if (randomBoolean()) {
diff --git a/core/src/test/java/org/elasticsearch/index/query/FieldMaskingSpanQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/FieldMaskingSpanQueryBuilderTests.java
index 5dd9263..64724d2 100644
--- a/core/src/test/java/org/elasticsearch/index/query/FieldMaskingSpanQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/FieldMaskingSpanQueryBuilderTests.java
@@ -22,6 +22,7 @@ package org.elasticsearch.index.query;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.spans.FieldMaskingSpanQuery;
 import org.elasticsearch.index.mapper.MappedFieldType;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -29,6 +30,7 @@ import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.instanceOf;
 
 public class FieldMaskingSpanQueryBuilderTests extends AbstractQueryTestCase<FieldMaskingSpanQueryBuilder> {
+
     @Override
     protected FieldMaskingSpanQueryBuilder doCreateTestQueryBuilder() {
         String fieldName;
@@ -54,6 +56,7 @@ public class FieldMaskingSpanQueryBuilderTests extends AbstractQueryTestCase<Fie
         assertThat(fieldMaskingSpanQuery.getMaskedQuery(), equalTo(queryBuilder.innerQuery().toQuery(context)));
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             new FieldMaskingSpanQueryBuilder(null, "maskedField");
diff --git a/core/src/test/java/org/elasticsearch/index/query/FuzzyQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/FuzzyQueryBuilderTests.java
index c778786..13fdb95 100644
--- a/core/src/test/java/org/elasticsearch/index/query/FuzzyQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/FuzzyQueryBuilderTests.java
@@ -26,6 +26,7 @@ import org.apache.lucene.search.Query;
 import org.elasticsearch.common.collect.Tuple;
 import org.elasticsearch.common.unit.Fuzziness;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -65,6 +66,7 @@ public class FuzzyQueryBuilderTests extends AbstractQueryTestCase<FuzzyQueryBuil
         }
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             new FuzzyQueryBuilder(null, "text");
@@ -88,6 +90,7 @@ public class FuzzyQueryBuilderTests extends AbstractQueryTestCase<FuzzyQueryBuil
         }
     }
 
+    @Test
     public void testUnsupportedFuzzinessForStringType() throws IOException {
         QueryShardContext context = createShardContext();
         context.setAllowUnmappedFields(true);
@@ -103,6 +106,7 @@ public class FuzzyQueryBuilderTests extends AbstractQueryTestCase<FuzzyQueryBuil
         }
     }
 
+    @Test
     public void testToQueryWithStringField() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -124,6 +128,7 @@ public class FuzzyQueryBuilderTests extends AbstractQueryTestCase<FuzzyQueryBuil
         assertThat(fuzzyQuery.getBoost(), equalTo(2.0f));
     }
 
+    @Test
     public void testToQueryWithNumericField() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
diff --git a/core/src/test/java/org/elasticsearch/index/query/GeoBoundingBoxQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/GeoBoundingBoxQueryBuilderTests.java
index fb38512..c138ad0 100644
--- a/core/src/test/java/org/elasticsearch/index/query/GeoBoundingBoxQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/GeoBoundingBoxQueryBuilderTests.java
@@ -21,28 +21,22 @@ package org.elasticsearch.index.query;
 
 import com.spatial4j.core.io.GeohashUtils;
 import com.spatial4j.core.shape.Rectangle;
-
-import org.apache.lucene.search.BooleanClause;
-import org.apache.lucene.search.BooleanQuery;
-import org.apache.lucene.search.ConstantScoreQuery;
-import org.apache.lucene.search.NumericRangeQuery;
-import org.apache.lucene.search.Query;
+import org.apache.lucene.search.*;
 import org.elasticsearch.common.geo.GeoPoint;
 import org.elasticsearch.common.geo.GeoUtils;
 import org.elasticsearch.index.search.geo.InMemoryGeoBoundingBoxQuery;
 import org.elasticsearch.test.geo.RandomShapeGenerator;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.hamcrest.Matchers.closeTo;
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
 
 public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBoundingBoxQueryBuilder> {
     /** Randomly generate either NaN or one of the two infinity values. */
     private static Double[] brokenDoubles = {Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY};
-
+    
     @Override
     protected GeoBoundingBoxQueryBuilder doCreateTestQueryBuilder() {
         GeoBoundingBoxQueryBuilder builder = new GeoBoundingBoxQueryBuilder(GEO_POINT_FIELD_NAME);
@@ -54,7 +48,7 @@ public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBo
             switch (path) {
             case 0:
                 builder.setCorners(
-                        new GeoPoint(box.getMaxY(), box.getMinX()),
+                        new GeoPoint(box.getMaxY(), box.getMinX()), 
                         new GeoPoint(box.getMinY(), box.getMaxX()));
                 break;
             case 1:
@@ -86,51 +80,38 @@ public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBo
         return builder;
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testValidationNullFieldname() {
-        try {
-            new GeoBoundingBoxQueryBuilder(null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("Field name must not be empty."));
-        }
+        new GeoBoundingBoxQueryBuilder(null);
     }
 
+
+    @Test(expected = IllegalArgumentException.class)
     public void testValidationNullType() {
         GeoBoundingBoxQueryBuilder qb = new GeoBoundingBoxQueryBuilder("teststring");
-        try {
-            qb.type((GeoExecType) null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("Type is not allowed to be null."));
-        }
+        qb.type((GeoExecType) null);
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testValidationNullTypeString() {
         GeoBoundingBoxQueryBuilder qb = new GeoBoundingBoxQueryBuilder("teststring");
-        try {
-            qb.type((String) null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("cannot parse type from null string"));
-        }
+        qb.type((String) null);
     }
 
+    @Test
     @Override
     public void testToQuery() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         super.testToQuery();
     }
-
+    
+    @Test(expected = QueryShardException.class)
     public void testExceptionOnMissingTypes() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length == 0);
-        try {
-            super.testToQuery();
-            fail("Expected IllegalArgumentException");
-        } catch (QueryShardException e) {
-            assertThat(e.getMessage(), is("failed to find geo_point field [mapped_geo_point]"));
-        }
+        super.testToQuery();
     }
 
+    @Test
     public void testBrokenCoordinateCannotBeSet() {
         PointTester[] testers = { new TopTester(), new LeftTester(), new BottomTester(), new RightTester() };
 
@@ -147,6 +128,7 @@ public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBo
         }
     }
 
+    @Test
     public void testBrokenCoordinateCanBeSetWithIgnoreMalformed() {
         PointTester[] testers = { new TopTester(), new LeftTester(), new BottomTester(), new RightTester() };
 
@@ -158,6 +140,8 @@ public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBo
         }
     }
 
+
+    @Test
     public void testValidation() {
         PointTester[] testers = { new TopTester(), new LeftTester(), new BottomTester(), new RightTester() };
 
@@ -199,6 +183,7 @@ public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBo
         }
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testTopBottomCannotBeFlipped() {
         GeoBoundingBoxQueryBuilder builder = createTestQueryBuilder();
         double top = builder.topLeft().getLat();
@@ -207,15 +192,11 @@ public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBo
         double right = builder.bottomRight().getLon();
 
         assumeTrue("top should not be equal to bottom for flip check", top != bottom);
-        logger.info("top: {} bottom: {}", top, bottom);
-        try {
-            builder.setValidationMethod(GeoValidationMethod.STRICT).setCorners(bottom, left, top, right);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("top is below bottom corner:"));
-        }
+        System.out.println("top: " + top + " bottom: " + bottom);
+        builder.setValidationMethod(GeoValidationMethod.STRICT).setCorners(bottom, left, top, right);
     }
 
+    @Test
     public void testTopBottomCanBeFlippedOnIgnoreMalformed() {
         GeoBoundingBoxQueryBuilder builder = createTestQueryBuilder();
         double top = builder.topLeft().getLat();
@@ -227,17 +208,19 @@ public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBo
         builder.setValidationMethod(GeoValidationMethod.IGNORE_MALFORMED).setCorners(bottom, left, top, right);
     }
 
+    @Test
     public void testLeftRightCanBeFlipped() {
         GeoBoundingBoxQueryBuilder builder = createTestQueryBuilder();
         double top = builder.topLeft().getLat();
         double left = builder.topLeft().getLon();
         double bottom = builder.bottomRight().getLat();
         double right = builder.bottomRight().getLon();
-
+        
         builder.setValidationMethod(GeoValidationMethod.IGNORE_MALFORMED).setCorners(top, right, bottom, left);
         builder.setValidationMethod(GeoValidationMethod.STRICT).setCorners(top, right, bottom, left);
     }
 
+    @Test
     public void testNormalization() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         GeoBoundingBoxQueryBuilder qb = createTestQueryBuilder();
@@ -260,8 +243,9 @@ public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBo
             }
         }
     }
-
-    public void testStrictnessDefault() {
+    
+    @Test
+    public void checkStrictnessDefault() {
         assertFalse("Someone changed the default for coordinate validation - were the docs changed as well?", GeoValidationMethod.DEFAULT_LENIENT_PARSING);
     }
 
@@ -327,7 +311,7 @@ public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBo
     public class RightTester extends PointTester {
         public RightTester() {
             super(randomDoubleBetween(GeoUtils.MAX_LON, Double.MAX_VALUE, true));
-        }
+        } 
 
         @Override
         public void fillIn(double coordinate, GeoBoundingBoxQueryBuilder qb) {
@@ -335,6 +319,7 @@ public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBo
         }
     }
 
+    @Test
     public void testParsingAndToQuery1() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -348,6 +333,7 @@ public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBo
         assertGeoBoundingBoxQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery2() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -367,6 +353,7 @@ public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBo
         assertGeoBoundingBoxQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery3() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -380,6 +367,7 @@ public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBo
         assertGeoBoundingBoxQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery4() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -393,6 +381,7 @@ public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBo
         assertGeoBoundingBoxQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery5() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -406,6 +395,7 @@ public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBo
         assertGeoBoundingBoxQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery6() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -420,7 +410,7 @@ public class GeoBoundingBoxQueryBuilderTests extends AbstractQueryTestCase<GeoBo
                 "}\n";
         assertGeoBoundingBoxQuery(query);
     }
-
+    
     private void assertGeoBoundingBoxQuery(String query) throws IOException {
         Query parsedQuery = parseQuery(query).toQuery(createShardContext());
         InMemoryGeoBoundingBoxQuery filter = (InMemoryGeoBoundingBoxQuery) parsedQuery;
diff --git a/core/src/test/java/org/elasticsearch/index/query/GeoDistanceQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/GeoDistanceQueryBuilderTests.java
index edb2b65..6912049 100644
--- a/core/src/test/java/org/elasticsearch/index/query/GeoDistanceQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/GeoDistanceQueryBuilderTests.java
@@ -27,6 +27,7 @@ import org.elasticsearch.common.geo.GeoPoint;
 import org.elasticsearch.common.unit.DistanceUnit;
 import org.elasticsearch.index.search.geo.GeoDistanceRangeQuery;
 import org.elasticsearch.test.geo.RandomShapeGenerator;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -151,6 +152,7 @@ public class GeoDistanceQueryBuilderTests extends AbstractQueryTestCase<GeoDista
      * explicitly mapped
      */
     @Override
+    @Test
     public void testToQuery() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         super.testToQuery();
@@ -174,6 +176,7 @@ public class GeoDistanceQueryBuilderTests extends AbstractQueryTestCase<GeoDista
         assertThat(geoQuery.maxInclusiveDistance(), closeTo(distance, Math.abs(distance) / 1000));
     }
 
+    @Test
     public void testParsingAndToQuery1() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -188,6 +191,7 @@ public class GeoDistanceQueryBuilderTests extends AbstractQueryTestCase<GeoDista
         assertGeoDistanceRangeQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery2() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -199,6 +203,7 @@ public class GeoDistanceQueryBuilderTests extends AbstractQueryTestCase<GeoDista
         assertGeoDistanceRangeQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery3() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -210,6 +215,7 @@ public class GeoDistanceQueryBuilderTests extends AbstractQueryTestCase<GeoDista
         assertGeoDistanceRangeQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery4() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -221,6 +227,7 @@ public class GeoDistanceQueryBuilderTests extends AbstractQueryTestCase<GeoDista
         assertGeoDistanceRangeQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery5() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -236,6 +243,7 @@ public class GeoDistanceQueryBuilderTests extends AbstractQueryTestCase<GeoDista
         assertGeoDistanceRangeQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery6() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -251,6 +259,7 @@ public class GeoDistanceQueryBuilderTests extends AbstractQueryTestCase<GeoDista
         assertGeoDistanceRangeQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery7() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -271,6 +280,7 @@ public class GeoDistanceQueryBuilderTests extends AbstractQueryTestCase<GeoDista
         assertThat(filter.maxInclusiveDistance(), closeTo(DistanceUnit.DEFAULT.convert(0.012, DistanceUnit.MILES), 0.00001));
     }
 
+    @Test
     public void testParsingAndToQuery8() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -291,6 +301,7 @@ public class GeoDistanceQueryBuilderTests extends AbstractQueryTestCase<GeoDista
         assertThat(filter.maxInclusiveDistance(), closeTo(DistanceUnit.KILOMETERS.convert(12, DistanceUnit.MILES), 0.00001));
     }
 
+    @Test
     public void testParsingAndToQuery9() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -306,6 +317,7 @@ public class GeoDistanceQueryBuilderTests extends AbstractQueryTestCase<GeoDista
         assertGeoDistanceRangeQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery10() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -321,6 +333,7 @@ public class GeoDistanceQueryBuilderTests extends AbstractQueryTestCase<GeoDista
         assertGeoDistanceRangeQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery11() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -335,6 +348,7 @@ public class GeoDistanceQueryBuilderTests extends AbstractQueryTestCase<GeoDista
         assertGeoDistanceRangeQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery12() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
diff --git a/core/src/test/java/org/elasticsearch/index/query/GeoDistanceRangeQueryTests.java b/core/src/test/java/org/elasticsearch/index/query/GeoDistanceRangeQueryTests.java
index 2165507..19e48aa 100644
--- a/core/src/test/java/org/elasticsearch/index/query/GeoDistanceRangeQueryTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/GeoDistanceRangeQueryTests.java
@@ -25,13 +25,13 @@ import org.elasticsearch.common.geo.GeoPoint;
 import org.elasticsearch.common.geo.GeoUtils;
 import org.elasticsearch.common.unit.DistanceUnit;
 import org.elasticsearch.index.search.geo.GeoDistanceRangeQuery;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.hamcrest.Matchers.closeTo;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
 
 public class GeoDistanceRangeQueryTests extends AbstractQueryTestCase<GeoDistanceRangeQueryBuilder> {
 
@@ -145,101 +145,69 @@ public class GeoDistanceRangeQueryTests extends AbstractQueryTestCase<GeoDistanc
      * explicitly mapped
      */
     @Override
+    @Test
     public void testToQuery() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         super.testToQuery();
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testNullFieldName() {
-        try {
-            if (randomBoolean()) {
-                new GeoDistanceRangeQueryBuilder(null, new GeoPoint());
-            } else {
-                new GeoDistanceRangeQueryBuilder("", new GeoPoint());
-            }
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("fieldName must not be null"));
+        if (randomBoolean()) {
+            new GeoDistanceRangeQueryBuilder(null, new GeoPoint());
+        } else {
+            new GeoDistanceRangeQueryBuilder("", new GeoPoint());
         }
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testNoPoint() {
-        try {
-            if (randomBoolean()) {
-                new GeoDistanceRangeQueryBuilder(GEO_POINT_FIELD_NAME, (GeoPoint) null);
-            } else {
-                new GeoDistanceRangeQueryBuilder(GEO_POINT_FIELD_NAME, (String) null);
-            }
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("point must not be null"));
+        if (randomBoolean()) {
+            new GeoDistanceRangeQueryBuilder(GEO_POINT_FIELD_NAME, (GeoPoint) null);
+        } else {
+            new GeoDistanceRangeQueryBuilder(GEO_POINT_FIELD_NAME, (String) null);
         }
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testInvalidFrom() {
         GeoDistanceRangeQueryBuilder builder = new GeoDistanceRangeQueryBuilder(GEO_POINT_FIELD_NAME, new GeoPoint());
-        try {
-            if (randomBoolean()) {
-                builder.from((String) null);
-            } else {
-                builder.from((Number) null);
-            }
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("[from] must not be null"));
+        if (randomBoolean()) {
+            builder.from((String) null);
+        } else {
+            builder.from((Number) null);
         }
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testInvalidTo() {
         GeoDistanceRangeQueryBuilder builder = new GeoDistanceRangeQueryBuilder(GEO_POINT_FIELD_NAME, new GeoPoint());
-        try {
-            if (randomBoolean()) {
-                builder.to((String) null);
-            } else {
-                builder.to((Number) null);
-            }
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("[to] must not be null"));
+        if (randomBoolean()) {
+            builder.to((String) null);
+        } else {
+            builder.to((Number) null);
         }
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testInvalidOptimizeBBox() {
         GeoDistanceRangeQueryBuilder builder = new GeoDistanceRangeQueryBuilder(GEO_POINT_FIELD_NAME, new GeoPoint());
         if (randomBoolean()) {
-            try {
-                builder.optimizeBbox(null);
-                fail("Expected IllegalArgumentException");
-            } catch (IllegalArgumentException e) {
-                assertThat(e.getMessage(), is("optimizeBbox must not be null"));
-            }
+            builder.optimizeBbox(null);
         } else {
-            try {
-                builder.optimizeBbox("foo");
-                fail("Expected IllegalArgumentException");
-            } catch (IllegalArgumentException e) {
-                assertThat(e.getMessage(), is("optimizeBbox must be one of [none, memory, indexed]"));
-            }
+            builder.optimizeBbox("foo");
         }
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testInvalidGeoDistance() {
         GeoDistanceRangeQueryBuilder builder = new GeoDistanceRangeQueryBuilder(GEO_POINT_FIELD_NAME, new GeoPoint());
-        try {
-            builder.geoDistance(null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("geoDistance calculation mode must not be null"));
-        }
+        builder.geoDistance(null);
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testInvalidDistanceUnit() {
         GeoDistanceRangeQueryBuilder builder = new GeoDistanceRangeQueryBuilder(GEO_POINT_FIELD_NAME, new GeoPoint());
-        try {
-            builder.unit(null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("distance unit must not be null"));
-        }
+        builder.unit(null);
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/index/query/GeoPolygonQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/GeoPolygonQueryBuilderTests.java
index eb9da71..e49d15d 100644
--- a/core/src/test/java/org/elasticsearch/index/query/GeoPolygonQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/GeoPolygonQueryBuilderTests.java
@@ -32,6 +32,7 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.search.geo.GeoPolygonQuery;
 import org.elasticsearch.test.geo.RandomShapeGenerator;
 import org.elasticsearch.test.geo.RandomShapeGenerator.ShapeType;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -41,9 +42,9 @@ import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;
 import static org.hamcrest.Matchers.closeTo;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
 
 public class GeoPolygonQueryBuilderTests extends AbstractQueryTestCase<GeoPolygonQueryBuilder> {
+
     @Override
     protected GeoPolygonQueryBuilder doCreateTestQueryBuilder() {
         List<GeoPoint> polygon = randomPolygon(randomIntBetween(4, 50));
@@ -104,51 +105,36 @@ public class GeoPolygonQueryBuilderTests extends AbstractQueryTestCase<GeoPolygo
         return polygonPoints;
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testNullFieldName() {
-        try {
-            new GeoPolygonQueryBuilder(null, randomPolygon(5));
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("fieldName must not be null"));
-        }
+        new GeoPolygonQueryBuilder(null, randomPolygon(5));
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testEmptyPolygon() {
-        try {
-            if (randomBoolean()) {
-                new GeoPolygonQueryBuilder(GEO_POINT_FIELD_NAME, new ArrayList<GeoPoint>());
-            } else {
-                new GeoPolygonQueryBuilder(GEO_POINT_FIELD_NAME, null);
-            }
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("polygon must not be null or empty"));
+        if (randomBoolean()) {
+            new GeoPolygonQueryBuilder(GEO_POINT_FIELD_NAME, new ArrayList<GeoPoint>());
+        } else {
+            new GeoPolygonQueryBuilder(GEO_POINT_FIELD_NAME, null);
         }
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testInvalidClosedPolygon() {
         List<GeoPoint> points = new ArrayList<>();
         points.add(new GeoPoint(0, 90));
         points.add(new GeoPoint(90, 90));
         points.add(new GeoPoint(0, 90));
-        try {
-            new GeoPolygonQueryBuilder(GEO_POINT_FIELD_NAME, points);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("too few points defined for geo_polygon query"));
-        }
+        new GeoPolygonQueryBuilder(GEO_POINT_FIELD_NAME, points);
+
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testInvalidOpenPolygon() {
         List<GeoPoint> points = new ArrayList<>();
         points.add(new GeoPoint(0, 90));
         points.add(new GeoPoint(90, 90));
-        try {
-            new GeoPolygonQueryBuilder(GEO_POINT_FIELD_NAME, points);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("too few points defined for geo_polygon query"));
-        }
+        new GeoPolygonQueryBuilder(GEO_POINT_FIELD_NAME, points);
     }
 
     public void testDeprecatedXContent() throws IOException {
@@ -174,6 +160,7 @@ public class GeoPolygonQueryBuilderTests extends AbstractQueryTestCase<GeoPolygo
         }
     }
 
+    @Test
     public void testParsingAndToQueryParsingExceptions() throws IOException {
         String[] brokenFiles = new String[]{
                 "/org/elasticsearch/index/query/geo_polygon_exception_1.json",
@@ -193,6 +180,7 @@ public class GeoPolygonQueryBuilderTests extends AbstractQueryTestCase<GeoPolygo
         }
     }
 
+    @Test
     public void testParsingAndToQuery1() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -209,6 +197,7 @@ public class GeoPolygonQueryBuilderTests extends AbstractQueryTestCase<GeoPolygo
         assertGeoPolygonQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery2() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -234,6 +223,7 @@ public class GeoPolygonQueryBuilderTests extends AbstractQueryTestCase<GeoPolygo
         assertGeoPolygonQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery3() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -250,6 +240,7 @@ public class GeoPolygonQueryBuilderTests extends AbstractQueryTestCase<GeoPolygo
         assertGeoPolygonQuery(query);
     }
 
+    @Test
     public void testParsingAndToQuery4() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
diff --git a/core/src/test/java/org/elasticsearch/index/query/GeoShapeQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/GeoShapeQueryBuilderTests.java
index 3280ef2..0a2034d 100644
--- a/core/src/test/java/org/elasticsearch/index/query/GeoShapeQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/GeoShapeQueryBuilderTests.java
@@ -36,13 +36,13 @@ import org.elasticsearch.common.xcontent.json.JsonXContent;
 import org.elasticsearch.index.get.GetResult;
 import org.elasticsearch.test.geo.RandomShapeGenerator;
 import org.junit.After;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.notNullValue;
 
 public class GeoShapeQueryBuilderTests extends AbstractQueryTestCase<GeoShapeQueryBuilder> {
@@ -140,16 +140,13 @@ public class GeoShapeQueryBuilderTests extends AbstractQueryTestCase<GeoShapeQue
         super.testToQuery();
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testNoFieldName() throws Exception {
         ShapeBuilder shape = RandomShapeGenerator.createShapeWithin(getRandom(), null);
-        try {
-            new GeoShapeQueryBuilder(null, shape);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("fieldName is required"));
-        }
+        new GeoShapeQueryBuilder(null, shape);
     }
 
+    @Test
     public void testNoShape() throws IOException {
         try {
             new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, (ShapeBuilder) null);
@@ -159,35 +156,24 @@ public class GeoShapeQueryBuilderTests extends AbstractQueryTestCase<GeoShapeQue
         }
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testNoIndexedShape() throws IOException {
-        try {
-            new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, null, "type");
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("either shapeBytes or indexedShapeId and indexedShapeType are required"));
-        }
+        new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, null, "type");
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testNoIndexedShapeType() throws IOException {
-        try {
-            new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, "id", null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("indexedShapeType is required if indexedShapeId is specified"));
-        }
+        new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, "id", null);
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testNoRelation() throws IOException {
         ShapeBuilder shape = RandomShapeGenerator.createShapeWithin(getRandom(), null);
         GeoShapeQueryBuilder builder = new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, shape);
-        try {
-            builder.relation(null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("No Shape Relation defined"));
-        }
+        builder.relation(null);
     }
 
+    @Test
     public void testInvalidRelation() throws IOException {
         ShapeBuilder shape = RandomShapeGenerator.createShapeWithin(getRandom(), null);
         GeoShapeQueryBuilder builder = new GeoShapeQueryBuilder(GEO_SHAPE_FIELD_NAME, shape);
@@ -208,7 +194,7 @@ public class GeoShapeQueryBuilderTests extends AbstractQueryTestCase<GeoShapeQue
         }
     }
 
-    // see #3878
+    @Test // see #3878
     public void testThatXContentSerializationInsideOfArrayWorks() throws Exception {
         EnvelopeBuilder envelopeBuilder = ShapeBuilder.newEnvelope().topLeft(0, 0).bottomRight(10, 10);
         GeoShapeQueryBuilder geoQuery = QueryBuilders.geoShapeQuery("searchGeometry", envelopeBuilder);
diff --git a/core/src/test/java/org/elasticsearch/index/query/GeohashCellQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/GeohashCellQueryBuilderTests.java
index afacce8..022c2e1 100644
--- a/core/src/test/java/org/elasticsearch/index/query/GeohashCellQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/GeohashCellQueryBuilderTests.java
@@ -30,13 +30,12 @@ import org.elasticsearch.common.unit.DistanceUnit;
 import org.elasticsearch.index.mapper.geo.GeoPointFieldMapper;
 import org.elasticsearch.index.query.GeohashCellQuery.Builder;
 import org.elasticsearch.test.geo.RandomShapeGenerator;
+import org.junit.Test;
 
 import java.io.IOException;
 
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
 
 public class GeohashCellQueryBuilderTests extends AbstractQueryTestCase<Builder> {
 
@@ -85,42 +84,31 @@ public class GeohashCellQueryBuilderTests extends AbstractQueryTestCase<Builder>
         super.testToQuery();
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testNullField() {
-        try {
-            if (randomBoolean()) {
-                new Builder(null, new GeoPoint());
-            } else {
-                new Builder("", new GeoPoint());
-            }
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("fieldName must not be null"));
+        if (randomBoolean()) {
+            new Builder(null, new GeoPoint());
+        } else {
+            new Builder("", new GeoPoint());
         }
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testNullGeoPoint() {
-        try {
-            if (randomBoolean()) {
-                new Builder(GEO_POINT_FIELD_NAME, (GeoPoint) null);
-            } else {
-                new Builder(GEO_POINT_FIELD_NAME, "");
-            }
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("geohash or point must be defined"));
+        if (randomBoolean()) {
+            new Builder(GEO_POINT_FIELD_NAME, (GeoPoint) null);
+        } else {
+            new Builder(GEO_POINT_FIELD_NAME, "");
         }
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testInvalidPrecision() {
         GeohashCellQuery.Builder builder = new Builder(GEO_POINT_FIELD_NAME, new GeoPoint());
-        try {
-            builder.precision(-1);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("precision must be greater than 0"));
-        }
+        builder.precision(-1);
     }
 
+    @Test
     public void testLocationParsing() throws IOException {
         Point point = RandomShapeGenerator.xRandomPoint(getRandom());
         Builder pointTestBuilder = new GeohashCellQuery.Builder("pin", new GeoPoint(point.getY(), point.getX()));
diff --git a/core/src/test/java/org/elasticsearch/index/query/HasChildQueryParserTests.java b/core/src/test/java/org/elasticsearch/index/query/HasChildQueryParserTests.java
index 7be9a6c..bdf7efb 100644
--- a/core/src/test/java/org/elasticsearch/index/query/HasChildQueryParserTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/HasChildQueryParserTests.java
@@ -20,52 +20,51 @@ package org.elasticsearch.index.query;
 
 import org.apache.lucene.search.join.ScoreMode;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
 
 public class HasChildQueryParserTests extends ESTestCase {
-    public void testMinFromString() {
+
+    @Test
+    public void minFromString() {
         assertThat("fromString(min) != MIN", ScoreMode.Min, equalTo(HasChildQueryParser.parseScoreMode("min")));
     }
 
-    public void testMaxFromString() {
+    @Test
+    public void maxFromString() {
         assertThat("fromString(max) != MAX", ScoreMode.Max, equalTo(HasChildQueryParser.parseScoreMode("max")));
     }
 
-    public void testAvgFromString() {
+    @Test
+    public void avgFromString() {
         assertThat("fromString(avg) != AVG", ScoreMode.Avg, equalTo(HasChildQueryParser.parseScoreMode("avg")));
     }
 
-    public void testSumFromString() {
+    @Test
+    public void sumFromString() {
         assertThat("fromString(total) != SUM", ScoreMode.Total, equalTo(HasChildQueryParser.parseScoreMode("total")));
     }
 
-    public void testNoneFromString() {
+    @Test
+    public void noneFromString() {
         assertThat("fromString(none) != NONE", ScoreMode.None, equalTo(HasChildQueryParser.parseScoreMode("none")));
     }
 
     /**
      * Should throw {@link IllegalArgumentException} instead of NPE.
      */
-    public void testThatNullFromStringThrowsException() {
-        try {
-            HasChildQueryParser.parseScoreMode(null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("No score mode for child query [null] found"));
-        }
+    @Test(expected = IllegalArgumentException.class)
+    public void nullFromString_throwsException() {
+        HasChildQueryParser.parseScoreMode(null);
     }
 
     /**
      * Failure should not change (and the value should never match anything...).
      */
-    public void testThatUnrecognizedFromStringThrowsException() {
-        try {
-            HasChildQueryParser.parseScoreMode("unrecognized value");
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("No score mode for child query [unrecognized value] found"));
-        }
+    @Test(expected = IllegalArgumentException.class)
+    public void unrecognizedFromString_throwsException() {
+        HasChildQueryParser.parseScoreMode("unrecognized value");
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/index/query/IdsQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/IdsQueryBuilderTests.java
index a88a573..665b4b0 100644
--- a/core/src/test/java/org/elasticsearch/index/query/IdsQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/IdsQueryBuilderTests.java
@@ -25,6 +25,7 @@ import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.Query;
 import org.elasticsearch.cluster.metadata.MetaData;
 import org.elasticsearch.common.ParsingException;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.HashMap;
@@ -32,21 +33,16 @@ import java.util.Map;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.instanceOf;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.is;
 
 public class IdsQueryBuilderTests extends AbstractQueryTestCase<IdsQueryBuilder> {
+
     /**
-     * Check that parser throws exception on missing values field.
+     * check that parser throws exception on missing values field
      */
+    @Test(expected=ParsingException.class)
     public void testIdsNotProvided() throws IOException {
         String noIdsFieldQuery = "{\"ids\" : { \"type\" : \"my_type\"  }";
-        try {
-            parseQuery(noIdsFieldQuery);
-            fail("Expected ParsingException");
-        } catch (ParsingException e) {
-            assertThat(e.getMessage(), containsString("no ids values provided"));
-        }
+        parseQuery(noIdsFieldQuery);
     }
 
     @Override
@@ -142,14 +138,9 @@ public class IdsQueryBuilderTests extends AbstractQueryTestCase<IdsQueryBuilder>
         }
     }
 
-    // see #7686.
+    @Test(expected= ParsingException.class) // see #7686.
     public void testIdsQueryWithInvalidValues() throws Exception {
         String query = "{ \"ids\": { \"values\": [[1]] } }";
-        try {
-            parseQuery(query);
-            fail("Expected ParsingException");
-        } catch (ParsingException e) {
-            assertThat(e.getMessage(), is("Illegal value for id, expecting a string or number, got: START_ARRAY"));
-        }
+        parseQuery(query);
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/index/query/IndicesQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/IndicesQueryBuilderTests.java
index 6be5cce..8db4317 100644
--- a/core/src/test/java/org/elasticsearch/index/query/IndicesQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/IndicesQueryBuilderTests.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.index.query;
 
 import org.apache.lucene.search.Query;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -67,6 +68,7 @@ public class IndicesQueryBuilderTests extends AbstractQueryTestCase<IndicesQuery
         //nothing to do here, boost check is already included in equality check done as part of doAssertLuceneQuery above
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             new IndicesQueryBuilder(null, "index");
diff --git a/core/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java
index 45b508b..f9da80d 100644
--- a/core/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java
@@ -20,29 +20,24 @@
 package org.elasticsearch.index.query;
 
 import org.apache.lucene.queries.ExtendedCommonTermsQuery;
-import org.apache.lucene.search.BooleanClause;
-import org.apache.lucene.search.BooleanQuery;
-import org.apache.lucene.search.FuzzyQuery;
-import org.apache.lucene.search.MatchAllDocsQuery;
-import org.apache.lucene.search.PhraseQuery;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.*;
 import org.elasticsearch.common.lucene.search.MultiPhrasePrefixQuery;
 import org.elasticsearch.common.lucene.search.Queries;
 import org.elasticsearch.index.mapper.MappedFieldType;
 import org.elasticsearch.index.search.MatchQuery;
 import org.elasticsearch.index.search.MatchQuery.ZeroTermsQuery;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Locale;
 
 import static org.hamcrest.CoreMatchers.either;
 import static org.hamcrest.CoreMatchers.instanceOf;
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.notNullValue;
 
 public class MatchQueryBuilderTests extends AbstractQueryTestCase<MatchQueryBuilder> {
+
     @Override
     protected MatchQueryBuilder doCreateTestQueryBuilder() {
         String fieldName = randomFrom(STRING_FIELD_NAME, BOOLEAN_FIELD_NAME, INT_FIELD_NAME,
@@ -233,14 +228,10 @@ public class MatchQueryBuilderTests extends AbstractQueryTestCase<MatchQueryBuil
         }
     }
 
+    @Test(expected = QueryShardException.class)
     public void testBadAnalyzer() throws IOException {
         MatchQueryBuilder matchQuery = new MatchQueryBuilder("fieldName", "text");
         matchQuery.analyzer("bogusAnalyzer");
-        try {
-            matchQuery.toQuery(createShardContext());
-            fail("Expected QueryShardException");
-        } catch (QueryShardException e) {
-            assertThat(e.getMessage(), containsString("analyzer [bogusAnalyzer] not found"));
-        }
+        matchQuery.toQuery(createShardContext());
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/index/query/MissingQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/MissingQueryBuilderTests.java
index 0a66d7a..0314ca9 100644
--- a/core/src/test/java/org/elasticsearch/index/query/MissingQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/MissingQueryBuilderTests.java
@@ -20,11 +20,10 @@
 package org.elasticsearch.index.query;
 
 import org.apache.lucene.search.Query;
+import org.junit.Test;
 
 import java.io.IOException;
 
-import static org.hamcrest.Matchers.containsString;
-
 public class MissingQueryBuilderTests extends AbstractQueryTestCase<MissingQueryBuilder> {
 
     @Override
@@ -44,10 +43,10 @@ public class MissingQueryBuilderTests extends AbstractQueryTestCase<MissingQuery
 
     @Override
     protected void doAssertLuceneQuery(MissingQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException {
-        // too many mapping dependent cases to test, we don't want to end up
-        // duplication the toQuery method
+        //too many mapping dependent cases to test, we don't want to end up duplication the toQuery method
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             if (randomBoolean()) {
@@ -75,14 +74,10 @@ public class MissingQueryBuilderTests extends AbstractQueryTestCase<MissingQuery
         }
     }
 
+    @Test(expected = QueryShardException.class)
     public void testBothNullValueAndExistenceFalse() throws IOException {
         QueryShardContext context = createShardContext();
         context.setAllowUnmappedFields(true);
-        try {
-            MissingQueryBuilder.newFilter(context, "field", false, false);
-            fail("Expected QueryShardException");
-        } catch (QueryShardException e) {
-            assertThat(e.getMessage(), containsString("missing must have either existence, or null_value"));
-        }
+        MissingQueryBuilder.newFilter(context, "field", false, false);
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilderTests.java
index 663e37e..7e9f97d 100644
--- a/core/src/test/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilderTests.java
@@ -42,6 +42,7 @@ import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.index.VersionType;
 import org.elasticsearch.index.query.MoreLikeThisQueryBuilder.Item;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Arrays;
@@ -243,26 +244,19 @@ public class MoreLikeThisQueryBuilderTests extends AbstractQueryTestCase<MoreLik
         }
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testValidateEmptyFields() {
-        try {
-            new MoreLikeThisQueryBuilder(new String[0], new String[]{"likeText"}, null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("requires 'fields' to be specified"));
-        }
+        new MoreLikeThisQueryBuilder(new String[0], new String[]{"likeText"}, null);
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testValidateEmptyLike() {
         String[] likeTexts = randomBoolean() ? null : new String[0];
         Item[] likeItems = randomBoolean() ? null : new Item[0];
-        try {
-            new MoreLikeThisQueryBuilder(likeTexts, likeItems);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("requires either 'like' texts or items to be specified"));
-        }
+        new MoreLikeThisQueryBuilder(likeTexts, likeItems);
     }
 
+    @Test
     public void testUnsupportedFields() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String unsupportedField = randomFrom(INT_FIELD_NAME, DOUBLE_FIELD_NAME, DATE_FIELD_NAME);
@@ -276,6 +270,7 @@ public class MoreLikeThisQueryBuilderTests extends AbstractQueryTestCase<MoreLik
         }
     }
 
+    @Test
     public void testMoreLikeThisBuilder() throws Exception {
         Query parsedQuery = parseQuery(moreLikeThisQuery(new String[]{"name.first", "name.last"}, new String[]{"something"}, null).minTermFreq(1).maxQueryTerms(12).buildAsBytes()).toQuery(createShardContext());
         assertThat(parsedQuery, instanceOf(MoreLikeThisQuery.class));
@@ -286,6 +281,7 @@ public class MoreLikeThisQueryBuilderTests extends AbstractQueryTestCase<MoreLik
         assertThat(mltQuery.getMaxQueryTerms(), equalTo(12));
     }
 
+    @Test
     public void testItemSerialization() throws IOException {
         Item expectedItem = generateRandomItem();
         BytesStreamOutput output = new BytesStreamOutput();
@@ -294,6 +290,7 @@ public class MoreLikeThisQueryBuilderTests extends AbstractQueryTestCase<MoreLik
         assertEquals(expectedItem, newItem);
     }
 
+    @Test
     public void testItemFromXContent() throws IOException {
         Item expectedItem = generateRandomItem();
         String json = expectedItem.toXContent(XContentFactory.jsonBuilder(), ToXContent.EMPTY_PARAMS).string();
diff --git a/core/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java
index 796ac22..8014597 100644
--- a/core/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java
@@ -21,17 +21,11 @@ package org.elasticsearch.index.query;
 
 import org.apache.lucene.index.Term;
 import org.apache.lucene.queries.ExtendedCommonTermsQuery;
-import org.apache.lucene.search.BooleanQuery;
-import org.apache.lucene.search.DisjunctionMaxQuery;
-import org.apache.lucene.search.FuzzyQuery;
-import org.apache.lucene.search.MatchAllDocsQuery;
-import org.apache.lucene.search.MatchNoDocsQuery;
-import org.apache.lucene.search.PhraseQuery;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.*;
 import org.elasticsearch.common.lucene.all.AllTermQuery;
 import org.elasticsearch.common.lucene.search.MultiPhrasePrefixQuery;
 import org.elasticsearch.index.search.MatchQuery;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.HashMap;
@@ -40,9 +34,7 @@ import java.util.Map;
 
 import static org.elasticsearch.index.query.QueryBuilders.multiMatchQuery;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBooleanSubQuery;
-import static org.hamcrest.CoreMatchers.either;
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.hamcrest.CoreMatchers.instanceOf;
+import static org.hamcrest.CoreMatchers.*;
 
 public class MultiMatchQueryBuilderTests extends AbstractQueryTestCase<MultiMatchQueryBuilder> {
 
@@ -134,6 +126,7 @@ public class MultiMatchQueryBuilderTests extends AbstractQueryTestCase<MultiMatc
                 .or(instanceOf(MatchNoDocsQuery.class)).or(instanceOf(PhraseQuery.class)));
     }
 
+    @Test
     public void testIllegaArguments() {
         try {
             new MultiMatchQueryBuilder(null, "field");
@@ -169,6 +162,7 @@ public class MultiMatchQueryBuilderTests extends AbstractQueryTestCase<MultiMatc
         //we delegate boost checks to specific boost tests below
     }
 
+    @Test
     public void testToQueryBoost() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         QueryShardContext shardContext = createShardContext();
@@ -186,6 +180,7 @@ public class MultiMatchQueryBuilderTests extends AbstractQueryTestCase<MultiMatc
         assertThat(query.getBoost(), equalTo(10f));
     }
 
+    @Test
     public void testToQueryMultipleTermsBooleanQuery() throws Exception {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         Query query = multiMatchQuery("test1 test2").field(STRING_FIELD_NAME).useDisMax(false).toQuery(createShardContext());
@@ -196,6 +191,7 @@ public class MultiMatchQueryBuilderTests extends AbstractQueryTestCase<MultiMatc
         assertThat(assertBooleanSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME, "test2")));
     }
 
+    @Test
     public void testToQueryMultipleFieldsBooleanQuery() throws Exception {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         Query query = multiMatchQuery("test").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).useDisMax(false).toQuery(createShardContext());
@@ -206,6 +202,7 @@ public class MultiMatchQueryBuilderTests extends AbstractQueryTestCase<MultiMatc
         assertThat(assertBooleanSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, "test")));
     }
 
+    @Test
     public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         Query query = multiMatchQuery("test").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).useDisMax(true).toQuery(createShardContext());
@@ -216,6 +213,7 @@ public class MultiMatchQueryBuilderTests extends AbstractQueryTestCase<MultiMatc
         assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, "test")));
     }
 
+    @Test
     public void testToQueryFieldsWildcard() throws Exception {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         Query query = multiMatchQuery("test").field("mapped_str*").useDisMax(false).toQuery(createShardContext());
diff --git a/core/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java
index fde284a..0299068 100644
--- a/core/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java
@@ -27,10 +27,7 @@ import org.apache.lucene.search.join.ToParentBlockJoinQuery;
 import org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;
 import org.elasticsearch.common.ParseFieldMatcher;
 import org.elasticsearch.common.compress.CompressedXContent;
-import org.elasticsearch.common.xcontent.XContentBuilder;
-import org.elasticsearch.common.xcontent.XContentFactory;
-import org.elasticsearch.common.xcontent.XContentParser;
-import org.elasticsearch.common.xcontent.XContentType;
+import org.elasticsearch.common.xcontent.*;
 import org.elasticsearch.index.fielddata.IndexFieldDataService;
 import org.elasticsearch.index.mapper.MapperService;
 import org.elasticsearch.index.query.support.QueryInnerHits;
@@ -39,6 +36,7 @@ import org.elasticsearch.search.fetch.innerhits.InnerHitsContext;
 import org.elasticsearch.search.internal.SearchContext;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.TestSearchContext;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Arrays;
@@ -163,6 +161,7 @@ public class NestedQueryBuilderTests extends AbstractQueryTestCase<NestedQueryBu
         assertEquals(tqb.values(), Arrays.asList("a", "b"));
     }
 
+    @Test
     public void testValidate() {
         try {
             new NestedQueryBuilder(null, EmptyQueryBuilder.PROTOTYPE);
diff --git a/core/src/test/java/org/elasticsearch/index/query/NotQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/NotQueryBuilderTests.java
new file mode 100644
index 0000000..4b3c7db
--- /dev/null
+++ b/core/src/test/java/org/elasticsearch/index/query/NotQueryBuilderTests.java
@@ -0,0 +1,112 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.index.query;
+
+import org.apache.lucene.search.BooleanClause;
+import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.MatchAllDocsQuery;
+import org.apache.lucene.search.Query;
+import org.elasticsearch.common.ParseFieldMatcher;
+import org.elasticsearch.common.ParsingException;
+import org.junit.Test;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.instanceOf;
+import static org.hamcrest.CoreMatchers.nullValue;
+
+public class NotQueryBuilderTests extends AbstractQueryTestCase<NotQueryBuilder> {
+
+    /**
+     * @return a NotQueryBuilder with random limit between 0 and 20
+     */
+    @Override
+    protected NotQueryBuilder doCreateTestQueryBuilder() {
+        return new NotQueryBuilder(RandomQueryBuilder.createQuery(random()));
+    }
+
+    @Override
+    protected void doAssertLuceneQuery(NotQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException {
+        Query filter = queryBuilder.innerQuery().toQuery(context);
+        if (filter == null) {
+            assertThat(query, nullValue());
+        } else {
+            assertThat(query, instanceOf(BooleanQuery.class));
+            BooleanQuery booleanQuery = (BooleanQuery) query;
+            assertThat(booleanQuery.clauses().size(), equalTo(2));
+            assertThat(booleanQuery.clauses().get(0).getOccur(), equalTo(BooleanClause.Occur.MUST));
+            assertThat(booleanQuery.clauses().get(0).getQuery(), instanceOf(MatchAllDocsQuery.class));
+            assertThat(booleanQuery.clauses().get(1).getOccur(), equalTo(BooleanClause.Occur.MUST_NOT));
+            assertThat(booleanQuery.clauses().get(1).getQuery(), instanceOf(filter.getClass()));
+        }
+    }
+
+    @Test(expected=ParsingException.class)
+    public void testMissingFilterSection() throws IOException {
+        String queryString = "{ \"not\" : {}";
+        parseQuery(queryString);
+    }
+
+    @Override
+    protected Map<String, NotQueryBuilder> getAlternateVersions() {
+        Map<String, NotQueryBuilder> alternateVersions = new HashMap<>();
+        QueryBuilder innerQuery = createTestQueryBuilder().innerQuery();
+        //not doesn't support empty query when query/filter element is not specified
+        if (innerQuery != EmptyQueryBuilder.PROTOTYPE) {
+            NotQueryBuilder testQuery2 = new NotQueryBuilder(innerQuery);
+            String contentString2 = "{\n" +
+                    "    \"not\" : " + testQuery2.innerQuery().toString() +  "\n}";
+            alternateVersions.put(contentString2, testQuery2);
+        }
+
+        return alternateVersions;
+    }
+
+
+    public void testDeprecatedXContent() throws IOException {
+        String deprecatedJson = "{\n" +
+                "    \"not\" : {\n" +
+                "        \"filter\" : " + EmptyQueryBuilder.PROTOTYPE.toString() + "\n" +
+                "    }\n" +
+                "}";
+        try {
+            parseQuery(deprecatedJson);
+            fail("filter is deprecated");
+        } catch (IllegalArgumentException ex) {
+            assertEquals("Deprecated field [filter] used, expected [query] instead", ex.getMessage());
+        }
+
+        NotQueryBuilder queryBuilder = (NotQueryBuilder) parseQuery(deprecatedJson, ParseFieldMatcher.EMPTY);
+        assertEquals(EmptyQueryBuilder.PROTOTYPE, queryBuilder.innerQuery());
+    }
+
+    @Test
+    public void testValidate() {
+        try {
+            new NotQueryBuilder(null);
+            fail("cannot be null");
+        } catch (IllegalArgumentException e) {
+            // expected
+        }
+    }
+}
diff --git a/core/src/test/java/org/elasticsearch/index/query/PrefixQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/PrefixQueryBuilderTests.java
index 7466f2d..7d7a3a4 100644
--- a/core/src/test/java/org/elasticsearch/index/query/PrefixQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/PrefixQueryBuilderTests.java
@@ -23,6 +23,7 @@ import org.apache.lucene.index.Term;
 import org.apache.lucene.search.MultiTermQuery;
 import org.apache.lucene.search.PrefixQuery;
 import org.apache.lucene.search.Query;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Arrays;
@@ -53,6 +54,7 @@ public class PrefixQueryBuilderTests extends AbstractQueryTestCase<PrefixQueryBu
         assertThat(prefixQuery.getPrefix().text(), equalTo(queryBuilder.value()));
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             if (randomBoolean()) {
@@ -73,6 +75,7 @@ public class PrefixQueryBuilderTests extends AbstractQueryTestCase<PrefixQueryBu
         }
     }
 
+    @Test
     public void testBlendedRewriteMethod() throws IOException {
         for (String rewrite : Arrays.asList("top_terms_blended_freqs_10", "topTermsBlendedFreqs10")) {
             Query parsedQuery = parseQuery(prefixQuery("field", "val").rewrite(rewrite).buildAsBytes()).toQuery(createShardContext());
diff --git a/core/src/test/java/org/elasticsearch/index/query/QueryDSLDocumentationTests.java b/core/src/test/java/org/elasticsearch/index/query/QueryDSLDocumentationTests.java
index 88cc951..04a3ea7 100644
--- a/core/src/test/java/org/elasticsearch/index/query/QueryDSLDocumentationTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/QueryDSLDocumentationTests.java
@@ -31,6 +31,7 @@ import org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilder.Fil
 import org.elasticsearch.script.Script;
 import org.elasticsearch.script.ScriptService.ScriptType;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -38,60 +39,18 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import static org.elasticsearch.index.query.QueryBuilders.boolQuery;
-import static org.elasticsearch.index.query.QueryBuilders.boostingQuery;
-import static org.elasticsearch.index.query.QueryBuilders.commonTermsQuery;
-import static org.elasticsearch.index.query.QueryBuilders.constantScoreQuery;
-import static org.elasticsearch.index.query.QueryBuilders.disMaxQuery;
-import static org.elasticsearch.index.query.QueryBuilders.existsQuery;
-import static org.elasticsearch.index.query.QueryBuilders.functionScoreQuery;
-import static org.elasticsearch.index.query.QueryBuilders.fuzzyQuery;
-import static org.elasticsearch.index.query.QueryBuilders.geoBoundingBoxQuery;
-import static org.elasticsearch.index.query.QueryBuilders.geoDistanceQuery;
-import static org.elasticsearch.index.query.QueryBuilders.geoDistanceRangeQuery;
-import static org.elasticsearch.index.query.QueryBuilders.geoHashCellQuery;
-import static org.elasticsearch.index.query.QueryBuilders.geoPolygonQuery;
-import static org.elasticsearch.index.query.QueryBuilders.geoShapeQuery;
-import static org.elasticsearch.index.query.QueryBuilders.hasChildQuery;
-import static org.elasticsearch.index.query.QueryBuilders.hasParentQuery;
-import static org.elasticsearch.index.query.QueryBuilders.idsQuery;
-import static org.elasticsearch.index.query.QueryBuilders.indicesQuery;
-import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
-import static org.elasticsearch.index.query.QueryBuilders.matchQuery;
-import static org.elasticsearch.index.query.QueryBuilders.missingQuery;
-import static org.elasticsearch.index.query.QueryBuilders.moreLikeThisQuery;
-import static org.elasticsearch.index.query.QueryBuilders.multiMatchQuery;
-import static org.elasticsearch.index.query.QueryBuilders.nestedQuery;
-import static org.elasticsearch.index.query.QueryBuilders.prefixQuery;
-import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;
-import static org.elasticsearch.index.query.QueryBuilders.rangeQuery;
-import static org.elasticsearch.index.query.QueryBuilders.regexpQuery;
-import static org.elasticsearch.index.query.QueryBuilders.scriptQuery;
-import static org.elasticsearch.index.query.QueryBuilders.simpleQueryStringQuery;
-import static org.elasticsearch.index.query.QueryBuilders.spanContainingQuery;
-import static org.elasticsearch.index.query.QueryBuilders.spanFirstQuery;
-import static org.elasticsearch.index.query.QueryBuilders.spanMultiTermQueryBuilder;
-import static org.elasticsearch.index.query.QueryBuilders.spanNearQuery;
-import static org.elasticsearch.index.query.QueryBuilders.spanNotQuery;
-import static org.elasticsearch.index.query.QueryBuilders.spanOrQuery;
-import static org.elasticsearch.index.query.QueryBuilders.spanTermQuery;
-import static org.elasticsearch.index.query.QueryBuilders.spanWithinQuery;
-import static org.elasticsearch.index.query.QueryBuilders.templateQuery;
-import static org.elasticsearch.index.query.QueryBuilders.termQuery;
-import static org.elasticsearch.index.query.QueryBuilders.termsQuery;
-import static org.elasticsearch.index.query.QueryBuilders.typeQuery;
-import static org.elasticsearch.index.query.QueryBuilders.wildcardQuery;
-import static org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders.exponentialDecayFunction;
-import static org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders.randomFunction;
+import static org.elasticsearch.index.query.QueryBuilders.*;
+import static org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders.*;
 
 /**
  * If one of the following tests doesn't compile make sure to not only fix the compilation error here
  * but also the documentation under ./docs/java-api/query-dsl/bool-query.asciidoc
- *
+ * 
  * There are no assertions here on purpose - all of these tests ((ideally) should) equal to what is
- * documented in the java api query dsl part of our reference guide.
+ * documented in the java api query dsl part of our reference guide. 
  * */
 public class QueryDSLDocumentationTests extends ESTestCase {
+    @Test
     public void testBool() {
         boolQuery()
                 .must(termQuery("content", "test1"))
@@ -101,20 +60,24 @@ public class QueryDSLDocumentationTests extends ESTestCase {
                 .filter(termQuery("content", "test5"));
     }
 
+    @Test
     public void testBoosting() {
         boostingQuery(termQuery("name","kimchy"), termQuery("name","dadoonet"))
-                .negativeBoost(0.2f);
+                .negativeBoost(0.2f); 
     }
-
+    
+    @Test
     public void testCommonTerms() {
         commonTermsQuery("name", "kimchy");
     }
-
+    
+    @Test
     public void testConstantScore() {
         constantScoreQuery(termQuery("name","kimchy"))
-            .boost(2.0f);
+            .boost(2.0f);  
     }
-
+    
+    @Test
     public void testDisMax() {
         disMaxQuery()
                 .add(termQuery("name", "kimchy"))
@@ -122,11 +85,13 @@ public class QueryDSLDocumentationTests extends ESTestCase {
                 .boost(1.2f)
                 .tieBreaker(0.7f);
     }
-
+    
+    @Test
     public void testExists() {
         existsQuery("name");
     }
 
+    @Test
     public void testFunctionScore() {
         FilterFunctionBuilder[] functions = {
                 new FunctionScoreQueryBuilder.FilterFunctionBuilder(
@@ -137,15 +102,18 @@ public class QueryDSLDocumentationTests extends ESTestCase {
         };
         functionScoreQuery(functions);
     }
-
+    
+    @Test
     public void testFuzzy() {
         fuzzyQuery("name", "kimchy");
     }
-
+    
+    @Test
     public void testGeoBoundingBox() {
         geoBoundingBoxQuery("pin.location").setCorners(40.73, -74.1, 40.717, -73.99);
     }
-
+    
+    @Test
     public void testGeoDistance() {
         geoDistanceQuery("pin.location")
             .point(40, -70)
@@ -153,7 +121,8 @@ public class QueryDSLDocumentationTests extends ESTestCase {
             .optimizeBbox("memory")                     // TODO switch to geoexectype see also bounding box
             .geoDistance(GeoDistance.ARC);
     }
-
+    
+    @Test
     public void testGeoDistanceRange() {
         geoDistanceRangeQuery("pin.location", new GeoPoint(40, -70)) // TODO check why I need the point here but not above
             .from("200km")
@@ -163,7 +132,8 @@ public class QueryDSLDocumentationTests extends ESTestCase {
             .optimizeBbox("memory")
             .geoDistance(GeoDistance.ARC);
     }
-
+    
+    @Test
     public void testGeoPolygon() {
         List<GeoPoint> points = new ArrayList<GeoPoint>();
         points.add(new GeoPoint(40, -70));
@@ -171,7 +141,8 @@ public class QueryDSLDocumentationTests extends ESTestCase {
         points.add(new GeoPoint(20, -90));
         geoPolygonQuery("pin.location", points);
     }
-
+    
+    @Test
     public void testGeoShape() throws IOException {
         GeoShapeQueryBuilder qb = geoShapeQuery(
                 "pin.location",
@@ -191,35 +162,40 @@ public class QueryDSLDocumentationTests extends ESTestCase {
             .indexedShapeIndex("shapes")
             .indexedShapePath("location");
     }
-
+    
+    @Test
     public void testGeoHashCell() {
         geoHashCellQuery("pin.location",
                 new GeoPoint(13.4080, 52.5186))
             .neighbors(true)
-            .precision(3);
+            .precision(3);          
     }
-
+    
+    @Test
     public void testHasChild() {
         hasChildQuery(
                 "blog_tag",
                 termQuery("tag","something")
             );
     }
-
+    
+    @Test
     public void testHasParent() {
         hasParentQuery(
             "blog",
             termQuery("tag","something")
         );
     }
-
+    
+    @Test
     public void testIds() {
         idsQuery("my_type", "type2")
                 .addIds("1", "4", "100");
 
         idsQuery().addIds("1", "4", "100");
     }
-
+    
+    @Test
     public void testIndices() {
         indicesQuery(
                 termQuery("tag", "wow"),
@@ -229,35 +205,41 @@ public class QueryDSLDocumentationTests extends ESTestCase {
         indicesQuery(
                 termQuery("tag", "wow"),
                 "index1", "index2"
-            ).noMatchQuery("all");
+            ).noMatchQuery("all");         
     }
-
+    
+    @Test
     public void testMatchAll() {
         matchAllQuery();
     }
-
+    
+    @Test
     public void testMatch() {
         matchQuery("name", "kimchy elasticsearch");
     }
-
+    
+    @Test
     public void testMissing() {
         missingQuery("user", true, true);
     }
-
+    
+    @Test
     public void testMLT() {
         String[] fields = {"name.first", "name.last"};
         String[] texts = {"text like this one"};
         Item[] items = null;
-
+        
         moreLikeThisQuery(fields, texts, items)
         .minTermFreq(1)
-        .maxQueryTerms(12);
+        .maxQueryTerms(12); 
     }
-
+    
+    @Test
     public void testMultiMatch() {
         multiMatchQuery("kimchy elasticsearch", "user", "message");
     }
-
+    
+    @Test
     public void testNested() {
         nestedQuery(
                 "obj1",
@@ -267,15 +249,23 @@ public class QueryDSLDocumentationTests extends ESTestCase {
             )
             .scoreMode(ScoreMode.Avg);
     }
-
+    
+    @Test
+    public void testNot() {
+        notQuery(rangeQuery("price").from("1").to("2"));
+    }
+    
+    @Test
     public void testPrefix() {
         prefixQuery("brand", "heine");
     }
-
+    
+    @Test
     public void testQueryString() {
         queryStringQuery("+kimchy -elasticsearch");
     }
-
+    
+    @Test
     public void testRange() {
         rangeQuery("price")
         .from(5)
@@ -285,18 +275,20 @@ public class QueryDSLDocumentationTests extends ESTestCase {
 
         rangeQuery("age")
         .gte("10")
-        .lt("20");
+        .lt("20"); 
     }
-
+    
+    @Test
     public void testRegExp() {
         regexpQuery("name.first", "s.*y");
     }
-
+    
+    @Test
     public void testScript() {
         scriptQuery(
                 new Script("doc['num1'].value > 1")
             );
-
+        
         Map<String, Integer> parameters = new HashMap<>();
         parameters.put("param1", 5);
         scriptQuery(
@@ -308,11 +300,13 @@ public class QueryDSLDocumentationTests extends ESTestCase {
             );
 
     }
-
+    
+    @Test
     public void testSimpleQueryString() {
         simpleQueryStringQuery("+kimchy -elasticsearch");
     }
-
+    
+    @Test
     public void testSpanContaining() {
         spanContainingQuery(
                 spanNearQuery(spanTermQuery("field1","bar"), 5)
@@ -320,7 +314,8 @@ public class QueryDSLDocumentationTests extends ESTestCase {
                     .inOrder(true),
                 spanTermQuery("field1","foo"));
     }
-
+    
+    @Test
     public void testSpanFirst() {
         spanFirstQuery(
                 spanTermQuery("user", "kimchy"),
@@ -328,10 +323,12 @@ public class QueryDSLDocumentationTests extends ESTestCase {
             );
     }
 
+    @Test
     public void testSpanMultiTerm() {
         spanMultiTermQueryBuilder(prefixQuery("user", "ki"));
     }
-
+    
+    @Test
     public void testSpanNear() {
         spanNearQuery(spanTermQuery("field","value1"), 12)
         .clause(spanTermQuery("field","value2"))
@@ -339,22 +336,26 @@ public class QueryDSLDocumentationTests extends ESTestCase {
         .inOrder(false)
         .collectPayloads(false);
     }
-
+    
+    @Test
     public void testSpanNot() {
         spanNotQuery(spanTermQuery("field","value1"),
                 spanTermQuery("field","value2"));
     }
-
+    
+    @Test
     public void testSpanOr() {
         spanOrQuery(spanTermQuery("field","value1"))
         .clause(spanTermQuery("field","value2"))
         .clause(spanTermQuery("field","value3"));
     }
-
+    
+    @Test
     public void testSpanTerm() {
         spanTermQuery("user", "kimchy");
     }
-
+    
+    @Test
     public void testSpanWithin() {
         spanWithinQuery(
                 spanNearQuery(spanTermQuery("field1", "bar"), 5)
@@ -362,26 +363,31 @@ public class QueryDSLDocumentationTests extends ESTestCase {
                     .inOrder(true),
                 spanTermQuery("field1", "foo"));
     }
-
+    
+    @Test
     public void testTemplate() {
         templateQuery(
                 "gender_template",
                 ScriptType.INDEXED,
-                new HashMap<>());
+                new HashMap<>()); 
     }
-
+    
+    @Test
     public void testTerm() {
         termQuery("name", "kimchy");
     }
-
+    
+    @Test
     public void testTerms() {
         termsQuery("tags", "blue", "pill");
     }
-
+    
+    @Test
     public void testType() {
         typeQuery("my_type");
     }
-
+    
+    @Test
     public void testWildcard() {
         wildcardQuery("user", "k?mch*");
     }
diff --git a/core/src/test/java/org/elasticsearch/index/query/QueryFilterBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/QueryFilterBuilderTests.java
index d98dbd0..15075b3 100644
--- a/core/src/test/java/org/elasticsearch/index/query/QueryFilterBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/QueryFilterBuilderTests.java
@@ -21,12 +21,11 @@ package org.elasticsearch.index.query;
 
 import org.apache.lucene.search.ConstantScoreQuery;
 import org.apache.lucene.search.Query;
+import org.junit.Test;
 
 import java.io.IOException;
 
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.hamcrest.CoreMatchers.instanceOf;
-import static org.hamcrest.CoreMatchers.nullValue;
+import static org.hamcrest.CoreMatchers.*;
 
 @SuppressWarnings("deprecation")
 public class QueryFilterBuilderTests extends AbstractQueryTestCase<QueryFilterBuilder> {
@@ -57,6 +56,7 @@ public class QueryFilterBuilderTests extends AbstractQueryTestCase<QueryFilterBu
     /**
      * test that wrapping an inner filter that returns <tt>null</tt> also returns <tt>null</tt> to pass on upwards
      */
+    @Test
     public void testInnerQueryReturnsNull() throws IOException {
         // create inner filter
         String queryString = "{ \"constant_score\" : { \"filter\" : {} } }";
@@ -66,6 +66,7 @@ public class QueryFilterBuilderTests extends AbstractQueryTestCase<QueryFilterBu
         assertNull(queryFilterQuery.toQuery(createShardContext()));
     }
 
+    @Test
     public void testValidate() {
         try {
             new QueryFilterBuilder(null);
diff --git a/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java
index 00b1390..1b85a26 100644
--- a/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java
@@ -20,20 +20,12 @@
 package org.elasticsearch.index.query;
 
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.BooleanQuery;
-import org.apache.lucene.search.BoostQuery;
-import org.apache.lucene.search.DisjunctionMaxQuery;
-import org.apache.lucene.search.MatchAllDocsQuery;
-import org.apache.lucene.search.MatchNoDocsQuery;
-import org.apache.lucene.search.NumericRangeQuery;
-import org.apache.lucene.search.PhraseQuery;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.RegexpQuery;
-import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.*;
 import org.apache.lucene.util.automaton.TooComplexToDeterminizeException;
 import org.elasticsearch.common.lucene.all.AllTermQuery;
 import org.hamcrest.Matchers;
 import org.joda.time.DateTimeZone;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.List;
@@ -43,8 +35,7 @@ import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBool
 import static org.hamcrest.CoreMatchers.either;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.instanceOf;
-import static org.hamcrest.Matchers.closeTo;
-import static org.hamcrest.Matchers.containsString;
+import static org.hamcrest.Matchers.*;
 
 public class QueryStringQueryBuilderTests extends AbstractQueryTestCase<QueryStringQueryBuilder> {
 
@@ -154,6 +145,7 @@ public class QueryStringQueryBuilderTests extends AbstractQueryTestCase<QueryStr
         }
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             new QueryStringQueryBuilder(null);
@@ -163,11 +155,13 @@ public class QueryStringQueryBuilderTests extends AbstractQueryTestCase<QueryStr
         }
     }
 
+    @Test
     public void testToQueryMatchAllQuery() throws Exception {
         Query query = queryStringQuery("*:*").toQuery(createShardContext());
         assertThat(query, instanceOf(MatchAllDocsQuery.class));
     }
 
+    @Test
     public void testToQueryTermQuery() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         Query query = queryStringQuery("test").defaultField(STRING_FIELD_NAME).toQuery(createShardContext());
@@ -176,6 +170,7 @@ public class QueryStringQueryBuilderTests extends AbstractQueryTestCase<QueryStr
         assertThat(termQuery.getTerm(), equalTo(new Term(STRING_FIELD_NAME, "test")));
     }
 
+    @Test
     public void testToQueryPhraseQuery() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         Query query = queryStringQuery("\"term1 term2\"").defaultField(STRING_FIELD_NAME).phraseSlop(3).toQuery(createShardContext());
@@ -190,6 +185,7 @@ public class QueryStringQueryBuilderTests extends AbstractQueryTestCase<QueryStr
         assertThat(phraseQuery.getSlop(), equalTo(3));
     }
 
+    @Test
     public void testToQueryBoosts() throws Exception {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         QueryShardContext shardContext = createShardContext();
@@ -225,6 +221,7 @@ public class QueryStringQueryBuilderTests extends AbstractQueryTestCase<QueryStr
         assertThat(boostQuery.getBoost(), equalTo(6.0f));
     }
 
+    @Test
     public void testToQueryMultipleTermsBooleanQuery() throws Exception {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         Query query = queryStringQuery("test1 test2").field(STRING_FIELD_NAME).useDisMax(false).toQuery(createShardContext());
@@ -235,6 +232,7 @@ public class QueryStringQueryBuilderTests extends AbstractQueryTestCase<QueryStr
         assertThat(assertBooleanSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME, "test2")));
     }
 
+    @Test
     public void testToQueryMultipleFieldsBooleanQuery() throws Exception {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         Query query = queryStringQuery("test").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).useDisMax(false).toQuery(createShardContext());
@@ -245,6 +243,7 @@ public class QueryStringQueryBuilderTests extends AbstractQueryTestCase<QueryStr
         assertThat(assertBooleanSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, "test")));
     }
 
+    @Test
     public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         Query query = queryStringQuery("test").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).useDisMax(true).toQuery(createShardContext());
@@ -255,6 +254,7 @@ public class QueryStringQueryBuilderTests extends AbstractQueryTestCase<QueryStr
         assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, "test")));
     }
 
+    @Test
     public void testToQueryFieldsWildcard() throws Exception {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         Query query = queryStringQuery("test").field("mapped_str*").useDisMax(false).toQuery(createShardContext());
@@ -265,6 +265,7 @@ public class QueryStringQueryBuilderTests extends AbstractQueryTestCase<QueryStr
         assertThat(assertBooleanSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, "test")));
     }
 
+    @Test
     public void testToQueryDisMaxQuery() throws Exception {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         Query query = queryStringQuery("test").field(STRING_FIELD_NAME, 2.2f).field(STRING_FIELD_NAME_2).useDisMax(true).toQuery(createShardContext());
@@ -277,6 +278,7 @@ public class QueryStringQueryBuilderTests extends AbstractQueryTestCase<QueryStr
         assertThat((double) disjuncts.get(1).getBoost(), closeTo(1, 0.01));
     }
 
+    @Test
     public void testToQueryRegExpQuery() throws Exception {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         Query query = queryStringQuery("/foo*bar/").defaultField(STRING_FIELD_NAME).maxDeterminizedStates(5000).toQuery(createShardContext());
@@ -285,25 +287,23 @@ public class QueryStringQueryBuilderTests extends AbstractQueryTestCase<QueryStr
         assertTrue(regexpQuery.toString().contains("/foo*bar/"));
     }
 
+    @Test(expected = TooComplexToDeterminizeException.class)
     public void testToQueryRegExpQueryTooComplex() throws Exception {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
-        try {
-            queryStringQuery("/[ac]*a[ac]{50,200}/").defaultField(STRING_FIELD_NAME).toQuery(createShardContext());
-            fail("Expected TooComplexToDeterminizeException");
-        } catch (TooComplexToDeterminizeException e) {
-            assertThat(e.getMessage(), containsString("Determinizing [ac]*"));
-            assertThat(e.getMessage(), containsString("would result in more than 10000 states"));
-        }
+        queryStringQuery("/[ac]*a[ac]{50,200}/").defaultField(STRING_FIELD_NAME).toQuery(createShardContext());
     }
 
+    @Test
     public void testToQueryNumericRangeQuery() throws Exception {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         Query query = queryStringQuery("12~0.2").defaultField(INT_FIELD_NAME).toQuery(createShardContext());
         NumericRangeQuery fuzzyQuery = (NumericRangeQuery) query;
         assertThat(fuzzyQuery.getMin().longValue(), equalTo(12l));
         assertThat(fuzzyQuery.getMax().longValue(), equalTo(12l));
+
     }
 
+    @Test
     public void testTimezone() throws Exception {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String queryAsString = "{\n" +
diff --git a/core/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java
index 0eabede..14c1d4f 100644
--- a/core/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java
@@ -26,17 +26,14 @@ import org.elasticsearch.ElasticsearchParseException;
 import org.elasticsearch.common.lucene.BytesRefs;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
 
 import static org.elasticsearch.index.query.QueryBuilders.rangeQuery;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
+import static org.hamcrest.Matchers.*;
 
 public class RangeQueryBuilderTests extends AbstractQueryTestCase<RangeQueryBuilder> {
 
@@ -129,6 +126,7 @@ public class RangeQueryBuilderTests extends AbstractQueryTestCase<RangeQueryBuil
         }
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             if (randomBoolean()) {
@@ -168,31 +166,25 @@ public class RangeQueryBuilderTests extends AbstractQueryTestCase<RangeQueryBuil
     /**
      * Specifying a timezone together with a numeric range query should throw an exception.
      */
+    @Test(expected=QueryShardException.class)
     public void testToQueryNonDateWithTimezone() throws QueryShardException, IOException {
         RangeQueryBuilder query = new RangeQueryBuilder(INT_FIELD_NAME);
         query.from(1).to(10).timeZone("UTC");
-        try {
-            query.toQuery(createShardContext());
-            fail("Expected QueryShardException");
-        } catch (QueryShardException e) {
-            assertThat(e.getMessage(), containsString("[range] time_zone can not be applied"));
-        }
+        query.toQuery(createShardContext());
     }
 
     /**
      * Specifying a timezone together with an unmapped field should throw an exception.
      */
+    @Test(expected=QueryShardException.class)
     public void testToQueryUnmappedWithTimezone() throws QueryShardException, IOException {
         RangeQueryBuilder query = new RangeQueryBuilder("bogus_field");
         query.from(1).to(10).timeZone("UTC");
-        try {
-            query.toQuery(createShardContext());
-            fail("Expected QueryShardException");
-        } catch (QueryShardException e) {
-            assertThat(e.getMessage(), containsString("[range] time_zone can not be applied"));
-        }
+        query.toQuery(createShardContext());
     }
 
+
+    @Test
     public void testToQueryNumericField() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         Query parsedQuery = rangeQuery(INT_FIELD_NAME).from(23).to(54).includeLower(true).includeUpper(false).toQuery(createShardContext());
@@ -206,6 +198,7 @@ public class RangeQueryBuilderTests extends AbstractQueryTestCase<RangeQueryBuil
         assertThat(rangeQuery.includesMax(), equalTo(false));
     }
 
+    @Test
     public void testDateRangeQueryFormat() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         // We test 01/01/2012 from gte and 2030 for lt
@@ -247,6 +240,7 @@ public class RangeQueryBuilderTests extends AbstractQueryTestCase<RangeQueryBuil
         }
     }
 
+    @Test
     public void testDateRangeBoundaries() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String query = "{\n" +
@@ -290,6 +284,7 @@ public class RangeQueryBuilderTests extends AbstractQueryTestCase<RangeQueryBuil
         assertFalse(rangeQuery.includesMax());
     }
 
+    @Test
     public void testDateRangeQueryTimezone() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         long startDate = System.currentTimeMillis();
diff --git a/core/src/test/java/org/elasticsearch/index/query/RegexpQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/RegexpQueryBuilderTests.java
index 526fbc0..4649dec 100644
--- a/core/src/test/java/org/elasticsearch/index/query/RegexpQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/RegexpQueryBuilderTests.java
@@ -21,6 +21,7 @@ package org.elasticsearch.index.query;
 
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.RegexpQuery;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -62,6 +63,7 @@ public class RegexpQueryBuilderTests extends AbstractQueryTestCase<RegexpQueryBu
         assertThat(regexpQuery.getField(), equalTo(queryBuilder.fieldName()));
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             if (randomBoolean()) {
diff --git a/core/src/test/java/org/elasticsearch/index/query/ScriptQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/ScriptQueryBuilderTests.java
index 6077fe8..87384f7 100644
--- a/core/src/test/java/org/elasticsearch/index/query/ScriptQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/ScriptQueryBuilderTests.java
@@ -23,6 +23,7 @@ import org.apache.lucene.search.Query;
 import org.elasticsearch.script.MockScriptEngine;
 import org.elasticsearch.script.Script;
 import org.elasticsearch.script.ScriptService.ScriptType;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Collections;
@@ -31,6 +32,7 @@ import java.util.Map;
 import static org.hamcrest.Matchers.instanceOf;
 
 public class ScriptQueryBuilderTests extends AbstractQueryTestCase<ScriptQueryBuilder> {
+
     @Override
     protected ScriptQueryBuilder doCreateTestQueryBuilder() {
         String script = "5";
@@ -43,6 +45,7 @@ public class ScriptQueryBuilderTests extends AbstractQueryTestCase<ScriptQueryBu
         assertThat(query, instanceOf(ScriptQueryBuilder.ScriptQuery.class));
     }
 
+    @Test
     public void testIllegalConstructorArg() {
         try {
             new ScriptQueryBuilder(null);
diff --git a/core/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java
index 480517b..2ca9441 100644
--- a/core/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java
@@ -29,6 +29,7 @@ import org.elasticsearch.Version;
 import org.elasticsearch.cluster.metadata.MetaData;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.common.xcontent.XContentParser;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.HashMap;
@@ -95,6 +96,7 @@ public class SimpleQueryStringBuilderTests extends AbstractQueryTestCase<SimpleQ
         return result;
     }
 
+    @Test
     public void testDefaults() {
         SimpleQueryStringBuilder qb = new SimpleQueryStringBuilder("The quick brown fox.");
 
@@ -125,6 +127,7 @@ public class SimpleQueryStringBuilderTests extends AbstractQueryTestCase<SimpleQ
         assertEquals("Wrong default default locale field.", Locale.ROOT, SimpleQueryStringBuilder.DEFAULT_LOCALE);
     }
 
+    @Test
     public void testDefaultNullLocale() {
         SimpleQueryStringBuilder qb = new SimpleQueryStringBuilder("The quick brown fox.");
         qb.locale(null);
@@ -132,6 +135,7 @@ public class SimpleQueryStringBuilderTests extends AbstractQueryTestCase<SimpleQ
                 qb.locale());
     }
 
+    @Test
     public void testDefaultNullComplainFlags() {
         SimpleQueryStringBuilder qb = new SimpleQueryStringBuilder("The quick brown fox.");
         qb.flags((SimpleQueryStringFlag[]) null);
@@ -139,6 +143,7 @@ public class SimpleQueryStringBuilderTests extends AbstractQueryTestCase<SimpleQ
                 qb.flags());
     }
 
+    @Test
     public void testDefaultEmptyComplainFlags() {
         SimpleQueryStringBuilder qb = new SimpleQueryStringBuilder("The quick brown fox.");
         qb.flags(new SimpleQueryStringFlag[]{});
@@ -146,6 +151,7 @@ public class SimpleQueryStringBuilderTests extends AbstractQueryTestCase<SimpleQ
                 qb.flags());
     }
 
+    @Test
     public void testDefaultNullComplainOp() {
         SimpleQueryStringBuilder qb = new SimpleQueryStringBuilder("The quick brown fox.");
         qb.defaultOperator(null);
@@ -154,6 +160,7 @@ public class SimpleQueryStringBuilderTests extends AbstractQueryTestCase<SimpleQ
     }
 
     // Check operator handling, and default field handling.
+    @Test
     public void testDefaultOperatorHandling() throws IOException {
         SimpleQueryStringBuilder qb = new SimpleQueryStringBuilder("The quick brown fox.").field(STRING_FIELD_NAME);
         QueryShardContext shardContext = createShardContext();
@@ -173,6 +180,7 @@ public class SimpleQueryStringBuilderTests extends AbstractQueryTestCase<SimpleQ
         assertThat(shouldClauses(boolQuery), is(4));
     }
 
+    @Test
     public void testIllegalConstructorArg() {
         try {
             new SimpleQueryStringBuilder(null);
@@ -182,60 +190,41 @@ public class SimpleQueryStringBuilderTests extends AbstractQueryTestCase<SimpleQ
         }
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testFieldCannotBeNull() {
         SimpleQueryStringBuilder qb = createTestQueryBuilder();
-        try {
-            qb.field(null);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("supplied field is null or empty."));
-        }
+        qb.field(null);
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testFieldCannotBeNullAndWeighted() {
         SimpleQueryStringBuilder qb = createTestQueryBuilder();
-        try {
-            qb.field(null, AbstractQueryBuilder.DEFAULT_BOOST);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("supplied field is null or empty."));
-        }
+        qb.field(null, AbstractQueryBuilder.DEFAULT_BOOST);
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testFieldCannotBeEmpty() {
         SimpleQueryStringBuilder qb = createTestQueryBuilder();
-        try {
-            qb.field("");
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("supplied field is null or empty."));
-        }
+        qb.field("");
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testFieldCannotBeEmptyAndWeighted() {
         SimpleQueryStringBuilder qb = createTestQueryBuilder();
-        try {
-            qb.field("", AbstractQueryBuilder.DEFAULT_BOOST);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("supplied field is null or empty."));
-        }
+        qb.field("", AbstractQueryBuilder.DEFAULT_BOOST);
     }
 
     /**
      * The following should fail fast - never silently set the map containing
      * fields and weights to null but refuse to accept null instead.
      * */
+    @Test(expected = NullPointerException.class)
     public void testFieldsCannotBeSetToNull() {
         SimpleQueryStringBuilder qb = createTestQueryBuilder();
-        try {
-            qb.fields(null);
-            fail("Expected NullPointerException");
-        } catch (NullPointerException e) {
-            assertThat(e.getMessage(), is("fields cannot be null"));
-        }
+        qb.fields(null);
     }
 
+    @Test
     public void testDefaultFieldParsing() throws IOException {
         QueryParseContext context = createParseContext();
         String query = randomAsciiOfLengthBetween(1, 10).toLowerCase(Locale.ROOT);
@@ -323,6 +312,7 @@ public class SimpleQueryStringBuilderTests extends AbstractQueryTestCase<SimpleQ
         //instead of trying to reparse the query and guess what the boost should be, we delegate boost checks to specific boost tests below
     }
 
+
     private int shouldClauses(BooleanQuery query) {
         int result = 0;
         for (BooleanClause c : query.clauses()) {
@@ -333,6 +323,7 @@ public class SimpleQueryStringBuilderTests extends AbstractQueryTestCase<SimpleQ
         return result;
     }
 
+    @Test
     public void testToQueryBoost() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         QueryShardContext shardContext = createShardContext();
diff --git a/core/src/test/java/org/elasticsearch/index/query/SpanContainingQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/SpanContainingQueryBuilderTests.java
index 2e51975..ff5882a 100644
--- a/core/src/test/java/org/elasticsearch/index/query/SpanContainingQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/SpanContainingQueryBuilderTests.java
@@ -21,12 +21,14 @@ package org.elasticsearch.index.query;
 
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.spans.SpanContainingQuery;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.hamcrest.CoreMatchers.instanceOf;
 
 public class SpanContainingQueryBuilderTests extends AbstractQueryTestCase<SpanContainingQueryBuilder> {
+
     @Override
     protected SpanContainingQueryBuilder doCreateTestQueryBuilder() {
         SpanTermQueryBuilder[] spanTermQueries = new SpanTermQueryBuilderTests().createSpanTermQueryBuilders(2);
@@ -38,6 +40,7 @@ public class SpanContainingQueryBuilderTests extends AbstractQueryTestCase<SpanC
         assertThat(query, instanceOf(SpanContainingQuery.class));
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             new SpanContainingQueryBuilder(null, SpanTermQueryBuilder.PROTOTYPE);
diff --git a/core/src/test/java/org/elasticsearch/index/query/SpanFirstQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/SpanFirstQueryBuilderTests.java
index 204bb79..325db41 100644
--- a/core/src/test/java/org/elasticsearch/index/query/SpanFirstQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/SpanFirstQueryBuilderTests.java
@@ -24,6 +24,7 @@ import org.apache.lucene.search.spans.SpanFirstQuery;
 import org.elasticsearch.common.ParsingException;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -31,6 +32,7 @@ import static org.elasticsearch.index.query.QueryBuilders.spanTermQuery;
 import static org.hamcrest.CoreMatchers.instanceOf;
 
 public class SpanFirstQueryBuilderTests extends AbstractQueryTestCase<SpanFirstQueryBuilder> {
+
     @Override
     protected SpanFirstQueryBuilder doCreateTestQueryBuilder() {
         SpanTermQueryBuilder[] spanTermQueries = new SpanTermQueryBuilderTests().createSpanTermQueryBuilders(1);
@@ -45,7 +47,9 @@ public class SpanFirstQueryBuilderTests extends AbstractQueryTestCase<SpanFirstQ
     /**
      * test exception on missing `end` and `match` parameter in parser
      */
+    @Test
     public void testParseEnd() throws IOException {
+
         {
             XContentBuilder builder = XContentFactory.jsonBuilder();
             builder.startObject();
@@ -62,6 +66,7 @@ public class SpanFirstQueryBuilderTests extends AbstractQueryTestCase<SpanFirstQ
                 assertTrue(e.getMessage().contains("spanFirst must have [end] set"));
             }
         }
+
         {
             XContentBuilder builder = XContentFactory.jsonBuilder();
             builder.startObject();
diff --git a/core/src/test/java/org/elasticsearch/index/query/SpanMultiTermQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/SpanMultiTermQueryBuilderTests.java
index ba6030f..7c9e50a 100644
--- a/core/src/test/java/org/elasticsearch/index/query/SpanMultiTermQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/SpanMultiTermQueryBuilderTests.java
@@ -22,6 +22,7 @@ package org.elasticsearch.index.query;
 import org.apache.lucene.search.MultiTermQuery;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -29,6 +30,7 @@ import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.instanceOf;
 
 public class SpanMultiTermQueryBuilderTests extends AbstractQueryTestCase<SpanMultiTermQueryBuilder> {
+
     @Override
     protected SpanMultiTermQueryBuilder doCreateTestQueryBuilder() {
         MultiTermQueryBuilder multiTermQueryBuilder = RandomQueryBuilder.createMultiTermQuery(random());
@@ -44,6 +46,7 @@ public class SpanMultiTermQueryBuilderTests extends AbstractQueryTestCase<SpanMu
         assertThat(spanMultiTermQueryWrapper.getWrappedQuery(), equalTo(new SpanMultiTermQueryWrapper<>((MultiTermQuery)multiTermQuery).getWrappedQuery()));
     }
 
+    @Test
     public void testIllegalArgument() {
         try {
             new SpanMultiTermQueryBuilder(null);
@@ -59,6 +62,7 @@ public class SpanMultiTermQueryBuilderTests extends AbstractQueryTestCase<SpanMu
      * This is currently the case for {@link RangeQueryBuilder} when the target field is mapped
      * to a date.
      */
+    @Test
     public void testUnsupportedInnerQueryType() throws IOException {
         QueryShardContext context = createShardContext();
         // test makes only sense if we have at least one type registered with date field mapping
diff --git a/core/src/test/java/org/elasticsearch/index/query/SpanNearQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/SpanNearQueryBuilderTests.java
index 6560bfc..02dcddb 100644
--- a/core/src/test/java/org/elasticsearch/index/query/SpanNearQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/SpanNearQueryBuilderTests.java
@@ -22,6 +22,7 @@ package org.elasticsearch.index.query;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.spans.SpanNearQuery;
 import org.apache.lucene.search.spans.SpanQuery;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Iterator;
@@ -30,6 +31,7 @@ import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.instanceOf;
 
 public class SpanNearQueryBuilderTests extends AbstractQueryTestCase<SpanNearQueryBuilder> {
+
     @Override
     protected SpanNearQueryBuilder doCreateTestQueryBuilder() {
         SpanTermQueryBuilder[] spanTermQueries = new SpanTermQueryBuilderTests().createSpanTermQueryBuilders(randomIntBetween(1, 6));
@@ -55,6 +57,7 @@ public class SpanNearQueryBuilderTests extends AbstractQueryTestCase<SpanNearQue
         }
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             new SpanNearQueryBuilder(null, 1);
diff --git a/core/src/test/java/org/elasticsearch/index/query/SpanNotQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/SpanNotQueryBuilderTests.java
index 6c84186..1b711f1 100644
--- a/core/src/test/java/org/elasticsearch/index/query/SpanNotQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/SpanNotQueryBuilderTests.java
@@ -24,16 +24,16 @@ import org.apache.lucene.search.spans.SpanNotQuery;
 import org.elasticsearch.common.ParsingException;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.elasticsearch.index.query.QueryBuilders.spanNearQuery;
 import static org.elasticsearch.index.query.QueryBuilders.spanTermQuery;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
+import static org.hamcrest.Matchers.*;
 
 public class SpanNotQueryBuilderTests extends AbstractQueryTestCase<SpanNotQueryBuilder> {
+
     @Override
     protected SpanNotQueryBuilder doCreateTestQueryBuilder() {
         SpanTermQueryBuilder[] spanTermQueries = new SpanTermQueryBuilderTests().createSpanTermQueryBuilders(2);
@@ -60,6 +60,7 @@ public class SpanNotQueryBuilderTests extends AbstractQueryTestCase<SpanNotQuery
         assertThat(spanNotQuery.getInclude(), equalTo(queryBuilder.includeQuery().toQuery(context)));
     }
 
+    @Test
     public void testIllegalArgument() {
         try {
             new SpanNotQueryBuilder(null, SpanTermQueryBuilder.PROTOTYPE);
@@ -75,6 +76,7 @@ public class SpanNotQueryBuilderTests extends AbstractQueryTestCase<SpanNotQuery
         }
     }
 
+    @Test
     public void testDist() {
         SpanNotQueryBuilder builder = new SpanNotQueryBuilder(new SpanTermQueryBuilder("name1", "value1"), new SpanTermQueryBuilder("name2", "value2"));
         assertThat(builder.pre(), equalTo(0));
@@ -87,6 +89,7 @@ public class SpanNotQueryBuilderTests extends AbstractQueryTestCase<SpanNotQuery
         assertThat(builder.post(), equalTo(4));
     }
 
+    @Test
     public void testPrePost() {
         SpanNotQueryBuilder builder = new SpanNotQueryBuilder(new SpanTermQueryBuilder("name1", "value1"), new SpanTermQueryBuilder("name2", "value2"));
         assertThat(builder.pre(), equalTo(0));
@@ -102,6 +105,7 @@ public class SpanNotQueryBuilderTests extends AbstractQueryTestCase<SpanNotQuery
     /**
      * test correct parsing of `dist` parameter, this should create builder with pre/post set to same value
      */
+    @Test
     public void testParseDist() throws IOException {
         XContentBuilder builder = XContentFactory.jsonBuilder();
         builder.startObject();
@@ -124,7 +128,9 @@ public class SpanNotQueryBuilderTests extends AbstractQueryTestCase<SpanNotQuery
     /**
      * test exceptions for three types of broken json, missing include / exclude and both dist and pre/post specified
      */
+    @Test
     public void testParserExceptions() throws IOException {
+
         {
             XContentBuilder builder = XContentFactory.jsonBuilder();
             builder.startObject();
@@ -142,6 +148,7 @@ public class SpanNotQueryBuilderTests extends AbstractQueryTestCase<SpanNotQuery
                 assertThat("ParsingException should have been caught", e.getDetailedMessage(), containsString("spanNot must have [include]"));
             }
         }
+
         {
             XContentBuilder builder = XContentFactory.jsonBuilder();
             builder.startObject();
@@ -160,6 +167,7 @@ public class SpanNotQueryBuilderTests extends AbstractQueryTestCase<SpanNotQuery
                 assertThat("ParsingException should have been caught", e.getDetailedMessage(), containsString("spanNot must have [exclude]"));
             }
         }
+
         {
             XContentBuilder builder = XContentFactory.jsonBuilder();
             builder.startObject();
diff --git a/core/src/test/java/org/elasticsearch/index/query/SpanOrQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/SpanOrQueryBuilderTests.java
index c40680a..eaa7035 100644
--- a/core/src/test/java/org/elasticsearch/index/query/SpanOrQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/SpanOrQueryBuilderTests.java
@@ -22,6 +22,7 @@ package org.elasticsearch.index.query;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.spans.SpanOrQuery;
 import org.apache.lucene.search.spans.SpanQuery;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Iterator;
@@ -30,6 +31,7 @@ import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.instanceOf;
 
 public class SpanOrQueryBuilderTests extends AbstractQueryTestCase<SpanOrQueryBuilder> {
+
     @Override
     protected SpanOrQueryBuilder doCreateTestQueryBuilder() {
         SpanTermQueryBuilder[] spanTermQueries = new SpanTermQueryBuilderTests().createSpanTermQueryBuilders(randomIntBetween(1, 6));
@@ -51,6 +53,7 @@ public class SpanOrQueryBuilderTests extends AbstractQueryTestCase<SpanOrQueryBu
         }
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             new SpanOrQueryBuilder(null);
diff --git a/core/src/test/java/org/elasticsearch/index/query/SpanWithinQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/SpanWithinQueryBuilderTests.java
index 0e4d7f9..87b2380 100644
--- a/core/src/test/java/org/elasticsearch/index/query/SpanWithinQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/SpanWithinQueryBuilderTests.java
@@ -21,12 +21,14 @@ package org.elasticsearch.index.query;
 
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.spans.SpanWithinQuery;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.hamcrest.CoreMatchers.instanceOf;
 
 public class SpanWithinQueryBuilderTests extends AbstractQueryTestCase<SpanWithinQueryBuilder> {
+
     @Override
     protected SpanWithinQueryBuilder doCreateTestQueryBuilder() {
         SpanTermQueryBuilder[] spanTermQueries = new SpanTermQueryBuilderTests().createSpanTermQueryBuilders(2);
@@ -38,6 +40,7 @@ public class SpanWithinQueryBuilderTests extends AbstractQueryTestCase<SpanWithi
         assertThat(query, instanceOf(SpanWithinQuery.class));
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             new SpanWithinQueryBuilder(null, SpanTermQueryBuilder.PROTOTYPE);
diff --git a/core/src/test/java/org/elasticsearch/index/query/TemplateQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/TemplateQueryBuilderTests.java
index 3039cc1..62a04c4 100644
--- a/core/src/test/java/org/elasticsearch/index/query/TemplateQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/TemplateQueryBuilderTests.java
@@ -26,6 +26,7 @@ import org.elasticsearch.common.xcontent.XContentType;
 import org.elasticsearch.script.ScriptService.ScriptType;
 import org.elasticsearch.script.Template;
 import org.junit.BeforeClass;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.HashMap;
@@ -58,6 +59,7 @@ public class TemplateQueryBuilderTests extends AbstractQueryTestCase<TemplateQue
         assertEquals(templateBase.toQuery(context), query);
     }
 
+    @Test
     public void testIllegalArgument() {
         try {
             new TemplateQueryBuilder(null);
@@ -72,6 +74,7 @@ public class TemplateQueryBuilderTests extends AbstractQueryTestCase<TemplateQue
         //no-op boost is checked already above as part of doAssertLuceneQuery as we rely on lucene equals impl
     }
 
+    @Test
     public void testJSONGeneration() throws IOException {
         Map<String, Object> vars = new HashMap<>();
         vars.put("template", "filled");
@@ -86,6 +89,7 @@ public class TemplateQueryBuilderTests extends AbstractQueryTestCase<TemplateQue
                 content.string());
     }
 
+    @Test
     public void testRawEscapedTemplate() throws IOException {
         String expectedTemplateString = "{\"match_{{template}}\": {}}\"";
         String query = "{\"template\": {\"query\": \"{\\\"match_{{template}}\\\": {}}\\\"\",\"params\" : {\"template\" : \"all\"}}}";
@@ -96,6 +100,7 @@ public class TemplateQueryBuilderTests extends AbstractQueryTestCase<TemplateQue
         assertParsedQuery(query, expectedBuilder);
     }
 
+    @Test
     public void testRawTemplate() throws IOException {
         XContentBuilder builder = XContentFactory.jsonBuilder();
         builder.startObject();
@@ -110,4 +115,5 @@ public class TemplateQueryBuilderTests extends AbstractQueryTestCase<TemplateQue
                 XContentType.JSON, params));
         assertParsedQuery(query, expectedBuilder);
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/index/query/TemplateQueryIT.java b/core/src/test/java/org/elasticsearch/index/query/TemplateQueryIT.java
index c495164..71dd323 100644
--- a/core/src/test/java/org/elasticsearch/index/query/TemplateQueryIT.java
+++ b/core/src/test/java/org/elasticsearch/index/query/TemplateQueryIT.java
@@ -38,6 +38,7 @@ import org.elasticsearch.script.mustache.MustacheScriptEngineService;
 import org.elasticsearch.search.builder.SearchSourceBuilder;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -50,7 +51,6 @@ import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertFailures;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 
@@ -76,6 +76,7 @@ public class TemplateQueryIT extends ESIntegTestCase {
                 .put("path.conf", this.getDataPath("config")).build();
     }
 
+    @Test
     public void testTemplateInBody() throws IOException {
         Map<String, Object> vars = new HashMap<>();
         vars.put("template", "all");
@@ -87,6 +88,7 @@ public class TemplateQueryIT extends ESIntegTestCase {
         assertHitCount(sr, 2);
     }
 
+    @Test
     public void testTemplateInBodyWithSize() throws IOException {
         String request = "{\n" +
                 "    \"size\":0," +
@@ -111,6 +113,7 @@ public class TemplateQueryIT extends ESIntegTestCase {
         assertThat(sr.getHits().hits().length, equalTo(0));
     }
 
+    @Test
     public void testTemplateWOReplacementInBody() throws IOException {
         Map<String, Object> vars = new HashMap<>();
 
@@ -121,6 +124,7 @@ public class TemplateQueryIT extends ESIntegTestCase {
         assertHitCount(sr, 2);
     }
 
+    @Test
     public void testTemplateInFile() {
         Map<String, Object> vars = new HashMap<>();
         vars.put("template", "all");
@@ -132,6 +136,7 @@ public class TemplateQueryIT extends ESIntegTestCase {
         assertHitCount(sr, 2);
     }
 
+    @Test
     public void testRawFSTemplate() throws IOException {
         Map<String, Object> params = new HashMap<>();
         params.put("template", "all");
@@ -140,6 +145,7 @@ public class TemplateQueryIT extends ESIntegTestCase {
         assertHitCount(sr, 2);
     }
 
+    @Test
     public void testSearchRequestTemplateSource() throws Exception {
         SearchRequest searchRequest = new SearchRequest();
         searchRequest.indices("_all");
@@ -157,6 +163,7 @@ public class TemplateQueryIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     // Releates to #6318
     public void testSearchRequestFail() throws Exception {
         SearchRequest searchRequest = new SearchRequest();
@@ -176,6 +183,7 @@ public class TemplateQueryIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().hits().length, equalTo(1));
     }
 
+    @Test
     public void testThatParametersCanBeSet() throws Exception {
         index("test", "type", "1", jsonBuilder().startObject().field("theField", "foo").endObject());
         index("test", "type", "2", jsonBuilder().startObject().field("theField", "foo 2").endObject());
@@ -203,6 +211,7 @@ public class TemplateQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 1);
     }
 
+    @Test
     public void testSearchTemplateQueryFromFile() throws Exception {
         SearchRequest searchRequest = new SearchRequest();
         searchRequest.indices("_all");
@@ -216,6 +225,7 @@ public class TemplateQueryIT extends ESIntegTestCase {
     /**
      * Test that template can be expressed as a single escaped string.
      */
+    @Test
     public void testTemplateQueryAsEscapedString() throws Exception {
         SearchRequest searchRequest = new SearchRequest();
         searchRequest.indices("_all");
@@ -230,6 +240,7 @@ public class TemplateQueryIT extends ESIntegTestCase {
      * Test that template can contain conditional clause. In this case it is at
      * the beginning of the string.
      */
+    @Test
     public void testTemplateQueryAsEscapedStringStartingWithConditionalClause() throws Exception {
         SearchRequest searchRequest = new SearchRequest();
         searchRequest.indices("_all");
@@ -245,6 +256,7 @@ public class TemplateQueryIT extends ESIntegTestCase {
      * Test that template can contain conditional clause. In this case it is at
      * the end of the string.
      */
+    @Test
     public void testTemplateQueryAsEscapedStringWithConditionalClauseAtEnd() throws Exception {
         SearchRequest searchRequest = new SearchRequest();
         searchRequest.indices("_all");
@@ -256,6 +268,7 @@ public class TemplateQueryIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().hits().length, equalTo(1));
     }
 
+    @Test(expected = SearchPhaseExecutionException.class)
     public void testIndexedTemplateClient() throws Exception {
         createIndex(ScriptService.SCRIPT_INDEX);
         ensureGreen(ScriptService.SCRIPT_INDEX);
@@ -310,18 +323,14 @@ public class TemplateQueryIT extends ESIntegTestCase {
         getResponse = client().prepareGetIndexedScript(MustacheScriptEngineService.NAME, "testTemplate").get();
         assertFalse(getResponse.isExists());
 
-        try {
-            client().prepareSearch("test")
-                    .setTypes("type")
-                    .setTemplate(
-                            new Template("/template_index/mustache/1000", ScriptType.INDEXED, MustacheScriptEngineService.NAME, null,
-                                    templateParams)).get();
-            fail("Expected SearchPhaseExecutionException");
-        } catch (SearchPhaseExecutionException e) {
-            assertThat(e.getCause().getMessage(), containsString("Illegal index script format"));
-        }
+        client().prepareSearch("test")
+                .setTypes("type")
+                .setTemplate(
+                        new Template("/template_index/mustache/1000", ScriptType.INDEXED, MustacheScriptEngineService.NAME, null,
+                                templateParams)).get();
     }
 
+    @Test
     public void testIndexedTemplate() throws Exception {
         createIndex(ScriptService.SCRIPT_INDEX);
         ensureGreen(ScriptService.SCRIPT_INDEX);
@@ -432,6 +441,7 @@ public class TemplateQueryIT extends ESIntegTestCase {
     }
 
     // Relates to #10397
+    @Test
     public void testIndexedTemplateOverwrite() throws Exception {
         createIndex("testindex");
         ensureGreen("testindex");
@@ -477,6 +487,8 @@ public class TemplateQueryIT extends ESIntegTestCase {
         }
     }
 
+
+    @Test
     public void testIndexedTemplateWithArray() throws Exception {
       createIndex(ScriptService.SCRIPT_INDEX);
       ensureGreen(ScriptService.SCRIPT_INDEX);
diff --git a/core/src/test/java/org/elasticsearch/index/query/TemplateQueryParserTests.java b/core/src/test/java/org/elasticsearch/index/query/TemplateQueryParserTests.java
index 4e2c43a..985fbfd 100644
--- a/core/src/test/java/org/elasticsearch/index/query/TemplateQueryParserTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/TemplateQueryParserTests.java
@@ -53,12 +53,11 @@ import org.elasticsearch.threadpool.ThreadPool;
 import org.elasticsearch.threadpool.ThreadPoolModule;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.lang.reflect.Proxy;
 
-import static org.hamcrest.Matchers.containsString;
-
 /**
  * Test parsing and executing a template request.
  */
@@ -121,6 +120,7 @@ public class TemplateQueryParserTests extends ESTestCase {
         terminate(injector.getInstance(ThreadPool.class));
     }
 
+    @Test
     public void testParser() throws IOException {
         String templateString = "{" + "\"query\":{\"match_{{template}}\": {}}," + "\"params\":{\"template\":\"all\"}" + "}";
 
@@ -133,6 +133,7 @@ public class TemplateQueryParserTests extends ESTestCase {
         assertTrue("Parsing template query failed.", query instanceof MatchAllDocsQuery);
     }
 
+    @Test
     public void testParseTemplateAsSingleStringWithConditionalClause() throws IOException {
         String templateString = "{" + "  \"inline\" : \"{ \\\"match_{{#use_it}}{{template}}{{/use_it}}\\\":{} }\"," + "  \"params\":{"
                 + "    \"template\":\"all\"," + "    \"use_it\": true" + "  }" + "}";
@@ -149,6 +150,7 @@ public class TemplateQueryParserTests extends ESTestCase {
      * expressed as a single string but still it expects only the query
      * specification (thus this test should fail with specific exception).
      */
+    @Test(expected = ParsingException.class)
     public void testParseTemplateFailsToParseCompleteQueryAsSingleString() throws IOException {
         String templateString = "{" + "  \"inline\" : \"{ \\\"size\\\": \\\"{{size}}\\\", \\\"query\\\":{\\\"match_all\\\":{}}}\","
                 + "  \"params\":{" + "    \"size\":2" + "  }\n" + "}";
@@ -157,14 +159,10 @@ public class TemplateQueryParserTests extends ESTestCase {
         context.reset(templateSourceParser);
 
         TemplateQueryParser parser = injector.getInstance(TemplateQueryParser.class);
-        try {
-            parser.fromXContent(context.parseContext()).toQuery(context);
-            fail("Expected ParsingException");
-        } catch (ParsingException e) {
-            assertThat(e.getMessage(), containsString("query malformed, no field after start_object"));
-        }
+        parser.fromXContent(context.parseContext()).toQuery(context);
     }
 
+    @Test
     public void testParserCanExtractTemplateNames() throws Exception {
         String templateString = "{ \"file\": \"storedTemplate\" ,\"params\":{\"template\":\"all\" } } ";
 
diff --git a/core/src/test/java/org/elasticsearch/index/query/TermQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/TermQueryBuilderTests.java
index 42de6bf..f79e249 100644
--- a/core/src/test/java/org/elasticsearch/index/query/TermQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/TermQueryBuilderTests.java
@@ -25,14 +25,15 @@ import org.apache.lucene.util.BytesRef;
 import org.elasticsearch.common.ParsingException;
 import org.elasticsearch.common.lucene.BytesRefs;
 import org.elasticsearch.index.mapper.MappedFieldType;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.instanceOf;
-import static org.hamcrest.Matchers.is;
 
 public class TermQueryBuilderTests extends AbstractTermQueryTestCase<TermQueryBuilder> {
+
     /**
      * @return a TermQuery with random field name and value, optional random boost and queryname
      */
@@ -55,17 +56,13 @@ public class TermQueryBuilderTests extends AbstractTermQueryTestCase<TermQueryBu
         }
     }
 
+    @Test(expected = ParsingException.class)
     public void testTermArray() throws IOException {
         String queryAsString = "{\n" +
                 "    \"term\": {\n" +
                 "        \"age\": [34, 35]\n" +
                 "    }\n" +
                 "}";
-        try {
-            parseQuery(queryAsString);
-            fail("Expected ParsingException");
-        } catch (ParsingException e) {
-            assertThat(e.getMessage(), is("[term] query does not support array of values"));
-        }
+        parseQuery(queryAsString);
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/index/query/TermsQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/TermsQueryBuilderTests.java
index d326bea..b810d6b 100644
--- a/core/src/test/java/org/elasticsearch/index/query/TermsQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/TermsQueryBuilderTests.java
@@ -39,17 +39,15 @@ import org.elasticsearch.index.get.GetResult;
 import org.elasticsearch.indices.cache.query.terms.TermsLookup;
 import org.hamcrest.Matchers;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
+import java.util.*;
 
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.*;
 
 public class TermsQueryBuilderTests extends AbstractQueryTestCase<TermsQueryBuilder> {
+
     private List<Object> randomTerms;
     private String termsPath;
 
@@ -130,28 +128,21 @@ public class TermsQueryBuilderTests extends AbstractQueryTestCase<TermsQueryBuil
         assertEquals(expectedTerms + " vs. " + booleanTerms, expectedTerms, booleanTerms);
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testEmtpyFieldName() {
-        try {
-            if (randomBoolean()) {
-                new TermsQueryBuilder(null, "term");
-            } else {
-                new TermsQueryBuilder("", "term");
-            }
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("field name cannot be null."));
+        if (randomBoolean()) {
+            new TermsQueryBuilder(null, "term");
+        } else {
+            new TermsQueryBuilder("", "term");
         }
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testEmtpyTermsLookup() {
-        try {
-            new TermsQueryBuilder("field", (TermsLookup) null);
-            fail("Expected IllegalArgumentException");
-        } catch(IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("No value or termsLookup specified for terms query"));
-        }
+        new TermsQueryBuilder("field", (TermsLookup) null);
     }
 
+    @Test
     public void testNullValues() {
         try {
             switch (randomInt(6)) {
@@ -183,6 +174,7 @@ public class TermsQueryBuilderTests extends AbstractQueryTestCase<TermsQueryBuil
         }
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testBothValuesAndLookupSet() throws IOException {
         String query = "{\n" +
                 "  \"terms\": {\n" +
@@ -198,12 +190,7 @@ public class TermsQueryBuilderTests extends AbstractQueryTestCase<TermsQueryBuil
                 "    }\n" +
                 "  }\n" +
                 "}";
-        try {
-            parseQuery(query);
-            fail("Expected IllegalArgumentException");
-        } catch(IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("Both values and termsLookup specified for terms query"));
-        }
+        QueryBuilder termsQueryBuilder = parseQuery(query);
     }
 
     public void testDeprecatedXContent() throws IOException {
@@ -302,6 +289,7 @@ public class TermsQueryBuilderTests extends AbstractQueryTestCase<TermsQueryBuil
         }
     }
 
+    @Test
     public void testTermsQueryWithMultipleFields() throws IOException {
         String query = XContentFactory.jsonBuilder().startObject()
                 .startObject("terms").array("foo", 123).array("bar", 456).endObject()
diff --git a/core/src/test/java/org/elasticsearch/index/query/TypeQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/TypeQueryBuilderTests.java
index 1940a50..af5c63c 100644
--- a/core/src/test/java/org/elasticsearch/index/query/TypeQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/TypeQueryBuilderTests.java
@@ -23,12 +23,11 @@ import org.apache.lucene.search.ConstantScoreQuery;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.TermQuery;
 import org.elasticsearch.index.mapper.internal.TypeFieldMapper;
+import org.junit.Test;
 
 import java.io.IOException;
 
-import static org.hamcrest.Matchers.either;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
+import static org.hamcrest.Matchers.*;
 
 public class TypeQueryBuilderTests extends AbstractQueryTestCase<TypeQueryBuilder> {
 
@@ -49,6 +48,7 @@ public class TypeQueryBuilderTests extends AbstractQueryTestCase<TypeQueryBuilde
         assertThat(termQuery.getTerm().text(), equalTo(queryBuilder.type()));
     }
 
+    @Test
     public void testIllegalArgument() {
         try {
             new TypeQueryBuilder((String) null);
diff --git a/core/src/test/java/org/elasticsearch/index/query/WildcardQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/WildcardQueryBuilderTests.java
index 572bfec..83f274e 100644
--- a/core/src/test/java/org/elasticsearch/index/query/WildcardQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/WildcardQueryBuilderTests.java
@@ -21,6 +21,7 @@ package org.elasticsearch.index.query;
 
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.WildcardQuery;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -55,6 +56,7 @@ public class WildcardQueryBuilderTests extends AbstractQueryTestCase<WildcardQue
         assertThat(wildcardQuery.getTerm().text(), equalTo(queryBuilder.value()));
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             if (randomBoolean()) {
@@ -75,6 +77,7 @@ public class WildcardQueryBuilderTests extends AbstractQueryTestCase<WildcardQue
         }
     }
 
+    @Test
     public void testEmptyValue() throws IOException {
         QueryShardContext context = createShardContext();
         context.setAllowUnmappedFields(true);
diff --git a/core/src/test/java/org/elasticsearch/index/query/WrapperQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/WrapperQueryBuilderTests.java
index 0cd3020..ea04b79 100644
--- a/core/src/test/java/org/elasticsearch/index/query/WrapperQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/WrapperQueryBuilderTests.java
@@ -25,6 +25,7 @@ import org.elasticsearch.common.bytes.BytesArray;
 import org.elasticsearch.common.bytes.BytesReference;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.common.xcontent.XContentParser;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -68,6 +69,7 @@ public class WrapperQueryBuilderTests extends AbstractQueryTestCase<WrapperQuery
         //no-op boost is checked already above as part of doAssertLuceneQuery as we rely on lucene equals impl
     }
 
+    @Test
     public void testIllegalArgument() {
         try {
             if (randomBoolean()) {
diff --git a/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java
index 69aeb82..58193ab 100644
--- a/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java
@@ -20,26 +20,14 @@
 package org.elasticsearch.index.query.functionscore;
 
 import com.fasterxml.jackson.core.JsonParseException;
-
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.TermQuery;
 import org.elasticsearch.common.ParsingException;
-import org.elasticsearch.common.lucene.search.function.CombineFunction;
-import org.elasticsearch.common.lucene.search.function.FieldValueFactorFunction;
-import org.elasticsearch.common.lucene.search.function.FiltersFunctionScoreQuery;
-import org.elasticsearch.common.lucene.search.function.FunctionScoreQuery;
-import org.elasticsearch.common.lucene.search.function.WeightFactorFunction;
+import org.elasticsearch.common.lucene.search.function.*;
 import org.elasticsearch.common.xcontent.XContentType;
-import org.elasticsearch.index.query.AbstractQueryBuilder;
-import org.elasticsearch.index.query.AbstractQueryTestCase;
-import org.elasticsearch.index.query.MatchAllQueryBuilder;
-import org.elasticsearch.index.query.QueryBuilder;
-import org.elasticsearch.index.query.QueryBuilders;
-import org.elasticsearch.index.query.QueryShardContext;
-import org.elasticsearch.index.query.RandomQueryBuilder;
-import org.elasticsearch.index.query.TermQueryBuilder;
+import org.elasticsearch.index.query.*;
 import org.elasticsearch.index.query.functionscore.exp.ExponentialDecayFunctionBuilder;
 import org.elasticsearch.index.query.functionscore.fieldvaluefactor.FieldValueFactorFunctionBuilder;
 import org.elasticsearch.index.query.functionscore.gauss.GaussDecayFunctionBuilder;
@@ -51,6 +39,7 @@ import org.elasticsearch.script.MockScriptEngine;
 import org.elasticsearch.script.Script;
 import org.elasticsearch.script.ScriptService;
 import org.elasticsearch.search.MultiValueMode;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Collections;
@@ -60,12 +49,7 @@ import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.functionScoreQuery;
 import static org.elasticsearch.index.query.QueryBuilders.termQuery;
 import static org.elasticsearch.test.StreamsUtils.copyToStringFromClasspath;
-import static org.hamcrest.Matchers.closeTo;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.either;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 public class FunctionScoreQueryBuilderTests extends AbstractQueryTestCase<FunctionScoreQueryBuilder> {
 
@@ -196,6 +180,7 @@ public class FunctionScoreQueryBuilderTests extends AbstractQueryTestCase<Functi
         super.testToQuery();
     }
 
+    @Test
     public void testIllegalArguments() {
         try {
             new FunctionScoreQueryBuilder((QueryBuilder<?>)null);
@@ -289,6 +274,7 @@ public class FunctionScoreQueryBuilderTests extends AbstractQueryTestCase<Functi
         }
     }
 
+    @Test
     public void testParseFunctionsArray() throws IOException {
         String functionScoreQuery = "{\n" +
                     "    \"function_score\":{\n" +
@@ -373,6 +359,7 @@ public class FunctionScoreQueryBuilderTests extends AbstractQueryTestCase<Functi
         }
     }
 
+    @Test
     public void testParseSingleFunction() throws IOException {
         String functionScoreQuery = "{\n" +
                 "    \"function_score\":{\n" +
@@ -420,6 +407,7 @@ public class FunctionScoreQueryBuilderTests extends AbstractQueryTestCase<Functi
         }
     }
 
+    @Test
     public void testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody() throws IOException {
         //without a functions array, we support only a single function, weight can't be associated with the function either.
         String functionScoreQuery = "{\n" +
@@ -438,6 +426,7 @@ public class FunctionScoreQueryBuilderTests extends AbstractQueryTestCase<Functi
         }
     }
 
+    @Test
     public void testProperErrorMessageWhenTwoFunctionsDefinedInFunctionsArray() throws IOException {
         String functionScoreQuery = "{\n" +
                 "    \"function_score\":{\n" +
@@ -468,6 +457,7 @@ public class FunctionScoreQueryBuilderTests extends AbstractQueryTestCase<Functi
         }
     }
 
+    @Test
     public void testProperErrorMessageWhenMissingFunction() throws IOException {
         String functionScoreQuery = "{\n" +
                 "    \"function_score\":{\n" +
@@ -490,6 +480,7 @@ public class FunctionScoreQueryBuilderTests extends AbstractQueryTestCase<Functi
         }
     }
 
+    @Test
     public void testWeight1fStillProducesWeightFunction() throws IOException {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
         String queryString = jsonBuilder().startObject()
@@ -524,6 +515,7 @@ public class FunctionScoreQueryBuilderTests extends AbstractQueryTestCase<Functi
         assertThat(weightFactorFunction.getScoreFunction(), instanceOf(FieldValueFactorFunction.class));
     }
 
+    @Test
     public void testProperErrorMessagesForMisplacedWeightsAndFunctions() throws IOException {
         String query = jsonBuilder().startObject().startObject("function_score")
                 .startArray("functions")
@@ -551,16 +543,13 @@ public class FunctionScoreQueryBuilderTests extends AbstractQueryTestCase<Functi
         }
     }
 
-    public void testMalformedThrowsException() throws IOException {
-        try {
-            parseQuery(copyToStringFromClasspath("/org/elasticsearch/index/query/faulty-function-score-query.json"));
-            fail("Expected JsonParseException");
-        } catch (JsonParseException e) {
-            assertThat(e.getMessage(), containsString("Unexpected character ('{"));
-        }
+    @Test(expected = JsonParseException.class)
+    public void ensureMalformedThrowsException() throws IOException {
+        parseQuery(copyToStringFromClasspath("/org/elasticsearch/index/query/faulty-function-score-query.json"));
     }
 
-    public void testCustomWeightFactorQueryBuilderWithFunctionScore() throws IOException {
+    @Test
+    public void testCustomWeightFactorQueryBuilder_withFunctionScore() throws IOException {
         Query parsedQuery = parseQuery(functionScoreQuery(termQuery("name.last", "banon"), ScoreFunctionBuilders.weightFactorFunction(1.3f)).buildAsBytes()).toQuery(createShardContext());
         assertThat(parsedQuery, instanceOf(FunctionScoreQuery.class));
         FunctionScoreQuery functionScoreQuery = (FunctionScoreQuery) parsedQuery;
@@ -568,7 +557,8 @@ public class FunctionScoreQueryBuilderTests extends AbstractQueryTestCase<Functi
         assertThat((double) ((WeightFactorFunction) functionScoreQuery.getFunction()).getWeight(), closeTo(1.3, 0.001));
     }
 
-    public void testCustomWeightFactorQueryBuilderWithFunctionScoreWithoutQueryGiven() throws IOException {
+    @Test
+    public void testCustomWeightFactorQueryBuilder_withFunctionScoreWithoutQueryGiven() throws IOException {
         Query parsedQuery = parseQuery(functionScoreQuery(ScoreFunctionBuilders.weightFactorFunction(1.3f)).buildAsBytes()).toQuery(createShardContext());
         assertThat(parsedQuery, instanceOf(FunctionScoreQuery.class));
         FunctionScoreQuery functionScoreQuery = (FunctionScoreQuery) parsedQuery;
@@ -576,6 +566,7 @@ public class FunctionScoreQueryBuilderTests extends AbstractQueryTestCase<Functi
         assertThat((double) ((WeightFactorFunction) functionScoreQuery.getFunction()).getWeight(), closeTo(1.3, 0.001));
     }
 
+    @Test
     public void testFieldValueFactorFactorArray() throws IOException {
         // don't permit an array of factors
         String querySource = "{" +
diff --git a/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreTests.java b/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreTests.java
index 21667e9..11d6ebc 100644
--- a/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreTests.java
@@ -23,39 +23,15 @@ import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.TextField;
-import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.LeafReaderContext;
-import org.apache.lucene.index.SortedNumericDocValues;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.search.Explanation;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.MatchAllDocsQuery;
-import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.TopDocs;
-import org.apache.lucene.search.Weight;
+import org.apache.lucene.index.*;
+import org.apache.lucene.search.*;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.Accountable;
 import org.apache.lucene.util.BytesRef;
 import org.elasticsearch.common.Nullable;
-import org.elasticsearch.common.lucene.search.function.CombineFunction;
-import org.elasticsearch.common.lucene.search.function.FieldValueFactorFunction;
-import org.elasticsearch.common.lucene.search.function.FiltersFunctionScoreQuery;
-import org.elasticsearch.common.lucene.search.function.FunctionScoreQuery;
-import org.elasticsearch.common.lucene.search.function.LeafScoreFunction;
-import org.elasticsearch.common.lucene.search.function.RandomScoreFunction;
-import org.elasticsearch.common.lucene.search.function.ScoreFunction;
-import org.elasticsearch.common.lucene.search.function.WeightFactorFunction;
+import org.elasticsearch.common.lucene.search.function.*;
 import org.elasticsearch.index.Index;
-import org.elasticsearch.index.fielddata.AtomicFieldData;
-import org.elasticsearch.index.fielddata.AtomicNumericFieldData;
-import org.elasticsearch.index.fielddata.FieldDataType;
-import org.elasticsearch.index.fielddata.IndexFieldData;
-import org.elasticsearch.index.fielddata.IndexNumericFieldData;
-import org.elasticsearch.index.fielddata.ScriptDocValues;
-import org.elasticsearch.index.fielddata.SortedBinaryDocValues;
-import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;
+import org.elasticsearch.index.fielddata.*;
 import org.elasticsearch.index.mapper.MappedFieldType;
 import org.elasticsearch.index.query.functionscore.exp.ExponentialDecayFunctionBuilder;
 import org.elasticsearch.index.query.functionscore.gauss.GaussDecayFunctionBuilder;
@@ -64,6 +40,7 @@ import org.elasticsearch.search.MultiValueMode;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Collection;
@@ -284,6 +261,7 @@ public class FunctionScoreTests extends ESTestCase {
         dir.close();
     }
 
+    @Test
     public void testExplainFunctionScoreQuery() throws IOException {
 
         Explanation functionExplanation = getFunctionScoreExplanation(searcher, RANDOM_SCORE_FUNCTION);
@@ -329,6 +307,7 @@ public class FunctionScoreTests extends ESTestCase {
         assertThat(randomExplanation.getDetails()[0].getDescription(), equalTo(functionExpl));
     }
 
+    @Test
     public void testExplainFiltersFunctionScoreQuery() throws IOException {
         Explanation functionExplanation = getFiltersFunctionScoreExplanation(searcher, RANDOM_SCORE_FUNCTION);
         checkFiltersFunctionScoreExplanation(functionExplanation, "random score function (seed: 0)", 0);
@@ -458,7 +437,8 @@ public class FunctionScoreTests extends ESTestCase {
         }
     }
 
-    public void testSimpleWeightedFunction() throws IOException, ExecutionException, InterruptedException {
+    @Test
+    public void simpleWeightedFunctionsTest() throws IOException, ExecutionException, InterruptedException {
         int numFunctions = randomIntBetween(1, 3);
         float[] weights = randomFloats(numFunctions);
         double[] scores = randomDoubles(numFunctions);
@@ -554,7 +534,8 @@ public class FunctionScoreTests extends ESTestCase {
         assertThat(explainedScore / scoreWithWeight, is(1f));
     }
 
-    public void testWeightOnlyCreatesBoostFunction() throws IOException {
+    @Test
+    public void checkWeightOnlyCreatesBoostFunction() throws IOException {
         FunctionScoreQuery filtersFunctionScoreQueryWithWeights = new FunctionScoreQuery(new MatchAllDocsQuery(), new WeightFactorFunction(2), 0.0f, CombineFunction.MULTIPLY, 100);
         TopDocs topDocsWithWeights = searcher.search(filtersFunctionScoreQueryWithWeights, 1);
         float score = topDocsWithWeights.scoreDocs[0].score;
diff --git a/core/src/test/java/org/elasticsearch/index/query/plugin/CustomQueryParserIT.java b/core/src/test/java/org/elasticsearch/index/query/plugin/CustomQueryParserIT.java
index fc0328c..c015052 100644
--- a/core/src/test/java/org/elasticsearch/index/query/plugin/CustomQueryParserIT.java
+++ b/core/src/test/java/org/elasticsearch/index/query/plugin/CustomQueryParserIT.java
@@ -29,6 +29,7 @@ import org.elasticsearch.indices.IndicesService;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.Collection;
 
@@ -38,12 +39,12 @@ import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitC
 import static org.hamcrest.Matchers.instanceOf;
 
 public class CustomQueryParserIT extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return pluginList(DummyQueryParserPlugin.class);
     }
 
-    @Override
     @Before
     public void setUp() throws Exception {
         super.setUp();
@@ -58,10 +59,12 @@ public class CustomQueryParserIT extends ESIntegTestCase {
         return cluster().numDataNodes();
     }
 
+    @Test
     public void testCustomDummyQuery() {
         assertHitCount(client().prepareSearch("index").setQuery(new DummyQueryParserPlugin.DummyQueryBuilder()).get(), 1l);
     }
 
+    @Test
     public void testCustomDummyQueryWithinBooleanQuery() {
         assertHitCount(client().prepareSearch("index").setQuery(new BoolQueryBuilder().must(new DummyQueryParserPlugin.DummyQueryBuilder())).get(), 1l);
     }
@@ -71,7 +74,7 @@ public class CustomQueryParserIT extends ESIntegTestCase {
         return indicesService.indexServiceSafe("index").queryParserService();
     }
 
-    //see #11120
+    @Test //see #11120
     public void testConstantScoreParsesFilter() throws Exception {
         IndexQueryParserService queryParser = queryParser();
         Query q = constantScoreQuery(new DummyQueryParserPlugin.DummyQueryBuilder()).toQuery(queryParser.getShardContext());
@@ -80,7 +83,7 @@ public class CustomQueryParserIT extends ESIntegTestCase {
         assertEquals(true, ((DummyQueryParserPlugin.DummyQuery) inner).isFilter);
     }
 
-    //see #11120
+    @Test //see #11120
     public void testBooleanParsesFilter() throws Exception {
         IndexQueryParserService queryParser = queryParser();
         // single clause, serialized as inner object
diff --git a/core/src/test/java/org/elasticsearch/index/search/geo/GeoPointParsingTests.java b/core/src/test/java/org/elasticsearch/index/search/geo/GeoPointParsingTests.java
index d82cddc..27046a9 100644
--- a/core/src/test/java/org/elasticsearch/index/search/geo/GeoPointParsingTests.java
+++ b/core/src/test/java/org/elasticsearch/index/search/geo/GeoPointParsingTests.java
@@ -28,15 +28,17 @@ import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.json.JsonXContent;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.geo.RandomGeoGenerator;
+import org.junit.Test;
 
 import java.io.IOException;
 
-import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.closeTo;
 
 
 public class GeoPointParsingTests  extends ESTestCase {
     static double TOLERANCE = 1E-5;
 
+    @Test
     public void testGeoPointReset() throws IOException {
         double lat = 1 + randomDouble() * 89;
         double lon = 1 + randomDouble() * 179;
@@ -57,6 +59,7 @@ public class GeoPointParsingTests  extends ESTestCase {
         assertPointsEqual(point.reset(0, 0), point2.reset(0, 0));
     }
 
+    @Test
     public void testEqualsHashCodeContract() {
         // generate a random geopoint
         final GeoPoint x = RandomGeoGenerator.randomPoint(random());
@@ -86,6 +89,7 @@ public class GeoPointParsingTests  extends ESTestCase {
         assertFalse(x.hashCode() == a.hashCode());
     }
 
+    @Test
     public void testGeoPointParsing() throws IOException {
         GeoPoint randomPt = RandomGeoGenerator.randomPoint(random());
 
@@ -102,7 +106,8 @@ public class GeoPointParsingTests  extends ESTestCase {
         assertCloseTo(point, randomPt.lat(), randomPt.lon());
     }
 
-    // Based on #5390
+    // Based on issue5390
+    @Test(expected = ElasticsearchParseException.class)
     public void testInvalidPointEmbeddedObject() throws IOException {
         XContentBuilder content = JsonXContent.contentBuilder();
         content.startObject();
@@ -114,14 +119,10 @@ public class GeoPointParsingTests  extends ESTestCase {
         XContentParser parser = JsonXContent.jsonXContent.createParser(content.bytes());
         parser.nextToken();
 
-        try {
-            GeoUtils.parseGeoPoint(parser);
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), is("field must be either [lat], [lon] or [geohash]"));
-        }
+        GeoUtils.parseGeoPoint(parser);
     }
 
+    @Test(expected = ElasticsearchParseException.class)
     public void testInvalidPointLatHashMix() throws IOException {
         XContentBuilder content = JsonXContent.contentBuilder();
         content.startObject();
@@ -131,14 +132,10 @@ public class GeoPointParsingTests  extends ESTestCase {
         XContentParser parser = JsonXContent.jsonXContent.createParser(content.bytes());
         parser.nextToken();
 
-        try {
-            GeoUtils.parseGeoPoint(parser);
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), is("field must be either lat/lon or geohash"));
-        }
+        GeoUtils.parseGeoPoint(parser);
     }
 
+    @Test(expected = ElasticsearchParseException.class)
     public void testInvalidPointLonHashMix() throws IOException {
         XContentBuilder content = JsonXContent.contentBuilder();
         content.startObject();
@@ -148,14 +145,10 @@ public class GeoPointParsingTests  extends ESTestCase {
         XContentParser parser = JsonXContent.jsonXContent.createParser(content.bytes());
         parser.nextToken();
 
-        try {
-            GeoUtils.parseGeoPoint(parser);
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), is("field must be either lat/lon or geohash"));
-        }
+        GeoUtils.parseGeoPoint(parser);
     }
 
+    @Test(expected = ElasticsearchParseException.class)
     public void testInvalidField() throws IOException {
         XContentBuilder content = JsonXContent.contentBuilder();
         content.startObject();
@@ -165,12 +158,7 @@ public class GeoPointParsingTests  extends ESTestCase {
         XContentParser parser = JsonXContent.jsonXContent.createParser(content.bytes());
         parser.nextToken();
 
-        try {
-            GeoUtils.parseGeoPoint(parser);
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), is("field must be either [lat], [lon] or [geohash]"));
-        }
+        GeoUtils.parseGeoPoint(parser);
     }
 
     private static XContentParser objectLatLon(double lat, double lon) throws IOException {
@@ -216,4 +204,5 @@ public class GeoPointParsingTests  extends ESTestCase {
         assertEquals(point.lat(), lat, TOLERANCE);
         assertEquals(point.lon(), lon, TOLERANCE);
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/index/search/geo/GeoUtilsTests.java b/core/src/test/java/org/elasticsearch/index/search/geo/GeoUtilsTests.java
index 81c8371..bf5b7f9 100644
--- a/core/src/test/java/org/elasticsearch/index/search/geo/GeoUtilsTests.java
+++ b/core/src/test/java/org/elasticsearch/index/search/geo/GeoUtilsTests.java
@@ -21,7 +21,6 @@ package org.elasticsearch.index.search.geo;
 
 import com.spatial4j.core.context.SpatialContext;
 import com.spatial4j.core.distance.DistanceUtils;
-
 import org.apache.lucene.spatial.prefix.tree.Cell;
 import org.apache.lucene.spatial.prefix.tree.GeohashPrefixTree;
 import org.apache.lucene.spatial.prefix.tree.QuadPrefixTree;
@@ -34,25 +33,21 @@ import org.elasticsearch.common.xcontent.XContentHelper;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.XContentParser.Token;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
-import static org.hamcrest.Matchers.allOf;
-import static org.hamcrest.Matchers.closeTo;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
-import static org.hamcrest.Matchers.not;
+import static org.hamcrest.Matchers.*;
 
 public class GeoUtilsTests extends ESTestCase {
+    
     private static final char[] BASE_32 = {'0', '1', '2', '3', '4', '5', '6',
         '7', '8', '9', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'm', 'n',
         'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
     private static final double MAX_ACCEPTABLE_ERROR = 0.000000001;
 
+    @Test
     public void testGeohashCellWidth() {
         double equatorialDistance = 2 * Math.PI * 6378137.0;
         assertThat(GeoUtils.geoHashCellWidth(0), equalTo(equatorialDistance));
@@ -70,6 +65,7 @@ public class GeoUtilsTests extends ESTestCase {
         assertThat(GeoUtils.geoHashCellWidth(12), equalTo(equatorialDistance / 1073741824));
     }
 
+    @Test
     public void testGeohashCellHeight() {
         double polarDistance = Math.PI * 6356752.314245;
         assertThat(GeoUtils.geoHashCellHeight(0), equalTo(polarDistance));
@@ -87,6 +83,7 @@ public class GeoUtilsTests extends ESTestCase {
         assertThat(GeoUtils.geoHashCellHeight(12), equalTo(polarDistance / 1073741824));
     }
 
+    @Test
     public void testGeohashCellSize() {
         double equatorialDistance = 2 * Math.PI * 6378137.0;
         double polarDistance = Math.PI * 6356752.314245;
@@ -115,6 +112,7 @@ public class GeoUtilsTests extends ESTestCase {
                 equalTo(Math.sqrt(Math.pow(polarDistance / 1073741824, 2) + Math.pow(equatorialDistance / 1073741824, 2))));
     }
 
+    @Test
     public void testGeoHashLevelsForPrecision() {
         for (int i = 0; i < 100; i++) {
             double precision = randomDouble() * 100;
@@ -123,6 +121,7 @@ public class GeoUtilsTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testGeoHashLevelsForPrecision_String() {
         for (int i = 0; i < 100; i++) {
             double precision = randomDouble() * 100;
@@ -132,6 +131,7 @@ public class GeoUtilsTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testQuadTreeCellWidth() {
         double equatorialDistance = 2 * Math.PI * 6378137.0;
         assertThat(GeoUtils.quadTreeCellWidth(0), equalTo(equatorialDistance));
@@ -149,6 +149,7 @@ public class GeoUtilsTests extends ESTestCase {
         assertThat(GeoUtils.quadTreeCellWidth(12), equalTo(equatorialDistance / 4096));
     }
 
+    @Test
     public void testQuadTreeCellHeight() {
         double polarDistance = Math.PI * 6356752.314245;
         assertThat(GeoUtils.quadTreeCellHeight(0), equalTo(polarDistance));
@@ -166,6 +167,7 @@ public class GeoUtilsTests extends ESTestCase {
         assertThat(GeoUtils.quadTreeCellHeight(12), equalTo(polarDistance / 4096));
     }
 
+    @Test
     public void testQuadTreeCellSize() {
         double equatorialDistance = 2 * Math.PI * 6378137.0;
         double polarDistance = Math.PI * 6356752.314245;
@@ -190,6 +192,7 @@ public class GeoUtilsTests extends ESTestCase {
                 equalTo(Math.sqrt(Math.pow(polarDistance / 4096, 2) + Math.pow(equatorialDistance / 4096, 2))));
     }
 
+    @Test
     public void testQuadTreeLevelsForPrecision() {
         for (int i = 0; i < 100; i++) {
             double precision = randomDouble() * 100;
@@ -198,7 +201,8 @@ public class GeoUtilsTests extends ESTestCase {
         }
     }
 
-    public void testQuadTreeLevelsForPrecisionString() {
+    @Test
+    public void testQuadTreeLevelsForPrecision_String() {
         for (int i = 0; i < 100; i++) {
             double precision = randomDouble() * 100;
             String precisionString = precision + "m";
@@ -207,14 +211,16 @@ public class GeoUtilsTests extends ESTestCase {
         }
     }
 
-    public void testNormalizeLatInNormalRange() {
+    @Test
+    public void testNormalizeLat_inNormalRange() {
         for (int i = 0; i < 100; i++) {
             double testValue = (randomDouble() * 180.0) - 90.0;
             assertThat(GeoUtils.normalizeLat(testValue), closeTo(testValue, MAX_ACCEPTABLE_ERROR));
         }
     }
 
-    public void testNormalizeLatOutsideNormalRange() {
+    @Test
+    public void testNormalizeLat_outsideNormalRange() {
         for (int i = 0; i < 100; i++) {
             double normalisedValue = (randomDouble() * 180.0) - 90.0;
             int shift = (randomBoolean() ? 1 : -1) * randomIntBetween(1, 10000);
@@ -224,7 +230,8 @@ public class GeoUtilsTests extends ESTestCase {
         }
     }
 
-    public void testNormalizeLatHuge() {
+    @Test
+    public void testNormalizeLat_Huge() {
         assertThat(GeoUtils.normalizeLat(-18000000000091.0), equalTo(GeoUtils.normalizeLat(-091.0)));
         assertThat(GeoUtils.normalizeLat(-18000000000090.0), equalTo(GeoUtils.normalizeLat(-090.0)));
         assertThat(GeoUtils.normalizeLat(-18000000000089.0), equalTo(GeoUtils.normalizeLat(-089.0)));
@@ -239,7 +246,8 @@ public class GeoUtilsTests extends ESTestCase {
         assertThat(GeoUtils.normalizeLat(+18000000000091.0), equalTo(GeoUtils.normalizeLat(+091.0)));
     }
 
-    public void testNormalizeLatEdgeCases() {
+    @Test
+    public void testNormalizeLat_edgeCases() {
         assertThat(GeoUtils.normalizeLat(Double.POSITIVE_INFINITY), equalTo(Double.NaN));
         assertThat(GeoUtils.normalizeLat(Double.NEGATIVE_INFINITY), equalTo(Double.NaN));
         assertThat(GeoUtils.normalizeLat(Double.NaN), equalTo(Double.NaN));
@@ -252,14 +260,16 @@ public class GeoUtilsTests extends ESTestCase {
         assertThat(GeoUtils.normalizeLat(90.0), equalTo(90.0));
     }
 
-    public void testNormalizeLonInNormalRange() {
+    @Test
+    public void testNormalizeLon_inNormalRange() {
         for (int i = 0; i < 100; i++) {
             double testValue = (randomDouble() * 360.0) - 180.0;
             assertThat(GeoUtils.normalizeLon(testValue), closeTo(testValue, MAX_ACCEPTABLE_ERROR));
         }
     }
 
-    public void testNormalizeLonOutsideNormalRange() {
+    @Test
+    public void testNormalizeLon_outsideNormalRange() {
         for (int i = 0; i < 100; i++) {
             double normalisedValue = (randomDouble() * 360.0) - 180.0;
             double testValue = normalisedValue + ((randomBoolean() ? 1 : -1) * 360.0 * randomIntBetween(1, 10000));
@@ -267,7 +277,8 @@ public class GeoUtilsTests extends ESTestCase {
         }
     }
 
-    public void testNormalizeLonHuge() {
+    @Test
+    public void testNormalizeLon_Huge() {
         assertThat(GeoUtils.normalizeLon(-36000000000181.0), equalTo(GeoUtils.normalizeLon(-181.0)));
         assertThat(GeoUtils.normalizeLon(-36000000000180.0), equalTo(GeoUtils.normalizeLon(-180.0)));
         assertThat(GeoUtils.normalizeLon(-36000000000179.0), equalTo(GeoUtils.normalizeLon(-179.0)));
@@ -282,7 +293,8 @@ public class GeoUtilsTests extends ESTestCase {
         assertThat(GeoUtils.normalizeLon(+36000000000181.0), equalTo(GeoUtils.normalizeLon(+181.0)));
     }
 
-    public void testNormalizeLonEdgeCases() {
+    @Test
+    public void testNormalizeLon_edgeCases() {
         assertThat(GeoUtils.normalizeLon(Double.POSITIVE_INFINITY), equalTo(Double.NaN));
         assertThat(GeoUtils.normalizeLon(Double.NEGATIVE_INFINITY), equalTo(Double.NaN));
         assertThat(GeoUtils.normalizeLon(Double.NaN), equalTo(Double.NaN));
@@ -295,7 +307,8 @@ public class GeoUtilsTests extends ESTestCase {
         assertThat(GeoUtils.normalizeLon(180.0), equalTo(180.0));
     }
 
-    public void testNormalizePointInNormalRange() {
+    @Test
+    public void testNormalizePoint_inNormalRange() {
         for (int i = 0; i < 100; i++) {
             double testLat = (randomDouble() * 180.0) - 90.0;
             double testLon = (randomDouble() * 360.0) - 180.0;
@@ -304,7 +317,8 @@ public class GeoUtilsTests extends ESTestCase {
         }
     }
 
-    public void testNormalizePointOutsideNormalRange() {
+    @Test
+    public void testNormalizePoint_outsideNormalRange() {
         for (int i = 0; i < 100; i++) {
             double normalisedLat = (randomDouble() * 180.0) - 90.0;
             double normalisedLon = (randomDouble() * 360.0) - 180.0;
@@ -323,7 +337,8 @@ public class GeoUtilsTests extends ESTestCase {
         }
     }
 
-    public void testNormalizePointOutsideNormalRange_withOptions() {
+    @Test
+    public void testNormalizePoint_outsideNormalRange_withOptions() {
         for (int i = 0; i < 100; i++) {
             boolean normalize = randomBoolean();
             double normalisedLat = (randomDouble() * 180.0) - 90.0;
@@ -352,7 +367,8 @@ public class GeoUtilsTests extends ESTestCase {
         }
     }
 
-    public void testNormalizePointHuge() {
+    @Test
+    public void testNormalizePoint_Huge() {
         assertNormalizedPoint(new GeoPoint(-18000000000091.0, -36000000000181.0), new GeoPoint(-089.0, -001.0));
         assertNormalizedPoint(new GeoPoint(-18000000000090.0, -36000000000180.0), new GeoPoint(-090.0, +180.0));
         assertNormalizedPoint(new GeoPoint(-18000000000089.0, -36000000000179.0), new GeoPoint(-089.0, -179.0));
@@ -368,7 +384,8 @@ public class GeoUtilsTests extends ESTestCase {
 
     }
 
-    public void testNormalizePointEdgeCases() {
+    @Test
+    public void testNormalizePoint_edgeCases() {
         assertNormalizedPoint(new GeoPoint(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY), new GeoPoint(Double.NaN, Double.NaN));
         assertNormalizedPoint(new GeoPoint(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY), new GeoPoint(Double.NaN, Double.NaN));
         assertNormalizedPoint(new GeoPoint(Double.NaN, Double.NaN), new GeoPoint(Double.NaN, Double.NaN));
@@ -381,6 +398,7 @@ public class GeoUtilsTests extends ESTestCase {
         assertNormalizedPoint(new GeoPoint(90.0, 180.0), new GeoPoint(90.0, 180.0));
     }
 
+    @Test
     public void testParseGeoPoint() throws IOException {
         for (int i = 0; i < 100; i++) {
             double lat = randomDouble() * 180 - 90 + randomIntBetween(-1000, 1000) * 180;
@@ -412,7 +430,8 @@ public class GeoUtilsTests extends ESTestCase {
         }
     }
 
-    public void testParseGeoPointGeohash() throws IOException {
+    @Test
+    public void testParseGeoPoint_geohash() throws IOException {
         for (int i = 0; i < 100; i++) {
             int geoHashLength = randomIntBetween(1, XGeoHashUtils.PRECISION);
             StringBuilder geohashBuilder = new StringBuilder(geoHashLength);
@@ -436,85 +455,62 @@ public class GeoUtilsTests extends ESTestCase {
         }
     }
 
-    public void testParseGeoPointGeohashWrongType() throws IOException {
-        BytesReference jsonBytes = jsonBuilder().startObject().field("geohash", 1.0).endObject().bytes();
-        XContentParser parser = XContentHelper.createParser(jsonBytes);
-        parser.nextToken();
-        try {
+    @Test(expected=ElasticsearchParseException.class)
+    public void testParseGeoPoint_geohashWrongType() throws IOException {
+            BytesReference jsonBytes = jsonBuilder().startObject().field("geohash", 1.0).endObject().bytes();
+            XContentParser parser = XContentHelper.createParser(jsonBytes);
+            parser.nextToken();
             GeoUtils.parseGeoPoint(parser);
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), containsString("geohash must be a string"));
-        }
     }
 
-    public void testParseGeoPointLatNoLon() throws IOException {
-        double lat = 0.0;
-        BytesReference jsonBytes = jsonBuilder().startObject().field("lat", lat).endObject().bytes();
-        XContentParser parser = XContentHelper.createParser(jsonBytes);
-        parser.nextToken();
-        try {
+    @Test(expected=ElasticsearchParseException.class)
+    public void testParseGeoPoint_LatNoLon() throws IOException {
+            double lat = 0.0;
+            BytesReference jsonBytes = jsonBuilder().startObject().field("lat", lat).endObject().bytes();
+            XContentParser parser = XContentHelper.createParser(jsonBytes);
+            parser.nextToken();
             GeoUtils.parseGeoPoint(parser);
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), is("field [lon] missing"));
-        }
     }
 
-    public void testParseGeoPointLonNoLat() throws IOException {
-        double lon = 0.0;
-        BytesReference jsonBytes = jsonBuilder().startObject().field("lon", lon).endObject().bytes();
-        XContentParser parser = XContentHelper.createParser(jsonBytes);
-        parser.nextToken();
-        try {
+    @Test(expected=ElasticsearchParseException.class)
+    public void testParseGeoPoint_LonNoLat() throws IOException {
+            double lon = 0.0;
+            BytesReference jsonBytes = jsonBuilder().startObject().field("lon", lon).endObject().bytes();
+            XContentParser parser = XContentHelper.createParser(jsonBytes);
+            parser.nextToken();
             GeoUtils.parseGeoPoint(parser);
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), is("field [lat] missing"));
-        }
     }
 
-    public void testParseGeoPointLonWrongType() throws IOException {
-        double lat = 0.0;
-        BytesReference jsonBytes = jsonBuilder().startObject().field("lat", lat).field("lon", false).endObject().bytes();
-        XContentParser parser = XContentHelper.createParser(jsonBytes);
-        parser.nextToken();
-        try {
+    @Test(expected=ElasticsearchParseException.class)
+    public void testParseGeoPoint_LonWrongType() throws IOException {
+            double lat = 0.0;
+            BytesReference jsonBytes = jsonBuilder().startObject().field("lat", lat).field("lon", false).endObject().bytes();
+            XContentParser parser = XContentHelper.createParser(jsonBytes);
+            parser.nextToken();
             GeoUtils.parseGeoPoint(parser);
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), is("longitude must be a number"));
-        }
     }
 
-    public void testParseGeoPointLatWrongType() throws IOException {
-        double lon = 0.0;
-        BytesReference jsonBytes = jsonBuilder().startObject().field("lat", false).field("lon", lon).endObject().bytes();
-        XContentParser parser = XContentHelper.createParser(jsonBytes);
-        parser.nextToken();
-        try {
+    @Test(expected=ElasticsearchParseException.class)
+    public void testParseGeoPoint_LatWrongType() throws IOException {
+            double lon = 0.0;
+            BytesReference jsonBytes = jsonBuilder().startObject().field("lat", false).field("lon", lon).endObject().bytes();
+            XContentParser parser = XContentHelper.createParser(jsonBytes);
+            parser.nextToken();
             GeoUtils.parseGeoPoint(parser);
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), is("latitude must be a number"));
-        }
     }
 
-    public void testParseGeoPointExtraField() throws IOException {
+    @Test(expected=ElasticsearchParseException.class)
+    public void testParseGeoPoint_ExtraField() throws IOException {
         double lat = 0.0;
         double lon = 0.0;
-        BytesReference jsonBytes = jsonBuilder().startObject().field("lat", lat).field("lon", lon).field("foo", true).endObject().bytes();
-        XContentParser parser = XContentHelper.createParser(jsonBytes);
-        parser.nextToken();
-        try {
+            BytesReference jsonBytes = jsonBuilder().startObject().field("lat", lat).field("lon", lon).field("foo", true).endObject().bytes();
+            XContentParser parser = XContentHelper.createParser(jsonBytes);
+            parser.nextToken();
             GeoUtils.parseGeoPoint(parser);
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), is("field must be either [lat], [lon] or [geohash]"));
-        }
     }
 
-    public void testParseGeoPointLonLatGeoHash() throws IOException {
+    @Test(expected=ElasticsearchParseException.class)
+    public void testParseGeoPoint_LonLatGeoHash() throws IOException {
         double lat = 0.0;
         double lon = 0.0;
         String geohash = "abcd";
@@ -522,62 +518,45 @@ public class GeoUtilsTests extends ESTestCase {
                 .bytes();
         XContentParser parser = XContentHelper.createParser(jsonBytes);
         parser.nextToken();
-        try {
-            GeoUtils.parseGeoPoint(parser);
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), containsString("field must be either lat/lon or geohash"));
-        }
+        GeoUtils.parseGeoPoint(parser);
     }
 
-    public void testParseGeoPointArrayTooManyValues() throws IOException {
-        double lat = 0.0;
-        double lon = 0.0;
-        double elev = 0.0;
-        BytesReference jsonBytes = jsonBuilder().startObject().startArray("foo").value(lon).value(lat).value(elev).endArray().endObject()
-                .bytes();
-        XContentParser parser = XContentHelper.createParser(jsonBytes);
-        while (parser.currentToken() != Token.START_ARRAY) {
-            parser.nextToken();
-        }
-        try {
+    @Test(expected=ElasticsearchParseException.class)
+    public void testParseGeoPoint_ArrayTooManyValues() throws IOException {
+            double lat = 0.0;
+            double lon = 0.0;
+            double elev = 0.0;
+            BytesReference jsonBytes = jsonBuilder().startObject().startArray("foo").value(lon).value(lat).value(elev).endArray().endObject().bytes();
+            XContentParser parser = XContentHelper.createParser(jsonBytes);
+            while (parser.currentToken() != Token.START_ARRAY) {
+                parser.nextToken();
+            }
             GeoUtils.parseGeoPoint(parser);
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), is("only two values allowed"));
-        }
     }
 
-    public void testParseGeoPointArrayWrongType() throws IOException {
-        double lat = 0.0;
-        boolean lon = false;
-        BytesReference jsonBytes = jsonBuilder().startObject().startArray("foo").value(lon).value(lat).endArray().endObject().bytes();
-        XContentParser parser = XContentHelper.createParser(jsonBytes);
-        while (parser.currentToken() != Token.START_ARRAY) {
-            parser.nextToken();
-        }
-        try {
+    @Test(expected=ElasticsearchParseException.class)
+    public void testParseGeoPoint_ArrayWrongType() throws IOException {
+            double lat = 0.0;
+            boolean lon = false;
+            BytesReference jsonBytes = jsonBuilder().startObject().startArray("foo").value(lon).value(lat).endArray().endObject().bytes();
+            XContentParser parser = XContentHelper.createParser(jsonBytes);
+            while (parser.currentToken() != Token.START_ARRAY) {
+                parser.nextToken();
+            }
             GeoUtils.parseGeoPoint(parser);
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), is("numeric value expected"));
-        }
     }
 
-    public void testParseGeoPointInvalidType() throws IOException {
+    @Test(expected=ElasticsearchParseException.class)
+    public void testParseGeoPoint_InvalidType() throws IOException {
         BytesReference jsonBytes = jsonBuilder().startObject().field("foo", 5).endObject().bytes();
         XContentParser parser = XContentHelper.createParser(jsonBytes);
         while (parser.currentToken() != Token.VALUE_NUMBER) {
             parser.nextToken();
         }
-        try {
-            GeoUtils.parseGeoPoint(parser);
-            fail("Expected ElasticsearchParseException");
-        } catch (ElasticsearchParseException e) {
-            assertThat(e.getMessage(), is("geo_point expected"));
-        }
+        GeoUtils.parseGeoPoint(parser);
     }
 
+    @Test
     public void testPrefixTreeCellSizes() {
         assertThat(GeoUtils.EARTH_SEMI_MAJOR_AXIS, equalTo(DistanceUtils.EARTH_EQUATORIAL_RADIUS_KM * 1000));
         assertThat(GeoUtils.quadTreeCellWidth(0), lessThanOrEqualTo(GeoUtils.EARTH_EQUATOR));
diff --git a/core/src/test/java/org/elasticsearch/index/search/nested/AbstractNumberNestedSortingTestCase.java b/core/src/test/java/org/elasticsearch/index/search/nested/AbstractNumberNestedSortingTestCase.java
index 297875b..426edf8 100644
--- a/core/src/test/java/org/elasticsearch/index/search/nested/AbstractNumberNestedSortingTestCase.java
+++ b/core/src/test/java/org/elasticsearch/index/search/nested/AbstractNumberNestedSortingTestCase.java
@@ -42,6 +42,7 @@ import org.elasticsearch.index.fielddata.IndexFieldData;
 import org.elasticsearch.index.fielddata.IndexFieldData.XFieldComparatorSource;
 import org.elasticsearch.index.fielddata.IndexFieldData.XFieldComparatorSource.Nested;
 import org.elasticsearch.search.MultiValueMode;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -52,6 +53,8 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public abstract class AbstractNumberNestedSortingTestCase extends AbstractFieldDataTestCase {
+
+    @Test
     public void testNestedSorting() throws Exception {
         List<Document> docs = new ArrayList<>();
         Document document = new Document();
diff --git a/core/src/test/java/org/elasticsearch/index/search/nested/NestedSortingTests.java b/core/src/test/java/org/elasticsearch/index/search/nested/NestedSortingTests.java
index 49af5f0..da4eddf 100644
--- a/core/src/test/java/org/elasticsearch/index/search/nested/NestedSortingTests.java
+++ b/core/src/test/java/org/elasticsearch/index/search/nested/NestedSortingTests.java
@@ -50,6 +50,7 @@ import org.elasticsearch.index.fielddata.NoOrdinalsStringFieldDataTests;
 import org.elasticsearch.index.fielddata.fieldcomparator.BytesRefFieldComparatorSource;
 import org.elasticsearch.index.fielddata.plain.PagedBytesIndexFieldData;
 import org.elasticsearch.search.MultiValueMode;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -61,11 +62,13 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public class NestedSortingTests extends AbstractFieldDataTestCase {
+
     @Override
     protected FieldDataType getFieldDataType() {
         return new FieldDataType("string", Settings.builder().put("format", "paged_bytes"));
     }
 
+    @Test
     public void testDuel() throws Exception {
         final int numDocs = scaledRandomIntBetween(100, 1000);
         for (int i = 0; i < numDocs; ++i) {
@@ -119,6 +122,7 @@ public class NestedSortingTests extends AbstractFieldDataTestCase {
         return searcher.search(query, n, sort);
     }
 
+    @Test
     public void testNestedSorting() throws Exception {
         List<Document> docs = new ArrayList<>();
         Document document = new Document();
diff --git a/core/src/test/java/org/elasticsearch/index/shard/CommitPointsTests.java b/core/src/test/java/org/elasticsearch/index/shard/CommitPointsTests.java
index 8821f0b..3ac624c 100644
--- a/core/src/test/java/org/elasticsearch/index/shard/CommitPointsTests.java
+++ b/core/src/test/java/org/elasticsearch/index/shard/CommitPointsTests.java
@@ -19,11 +19,12 @@
 
 package org.elasticsearch.index.shard;
 
+import java.nio.charset.StandardCharsets;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 
 import static org.hamcrest.Matchers.equalTo;
@@ -33,8 +34,10 @@ import static org.hamcrest.Matchers.nullValue;
  *
  */
 public class CommitPointsTests extends ESTestCase {
+
     private final ESLogger logger = Loggers.getLogger(CommitPointsTests.class);
 
+    @Test
     public void testCommitPointXContent() throws Exception {
         ArrayList<CommitPoint.FileInfo> indexFiles = new ArrayList<>();
         indexFiles.add(new CommitPoint.FileInfo("file1", "file1_p", 100, "ck1"));
diff --git a/core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java b/core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java
index c73420a..baf4ee6 100644
--- a/core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java
+++ b/core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java
@@ -20,16 +20,8 @@ package org.elasticsearch.index.shard;
 
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.NumericDocValuesField;
-import org.apache.lucene.index.CorruptIndexException;
-import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.FieldFilterLeafReader;
-import org.apache.lucene.index.FilterDirectoryReader;
-import org.apache.lucene.index.IndexCommit;
-import org.apache.lucene.index.LeafReader;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.TermQuery;
-import org.apache.lucene.search.TopDocs;
+import org.apache.lucene.index.*;
+import org.apache.lucene.search.*;
 import org.apache.lucene.store.IOContext;
 import org.apache.lucene.store.LockObtainFailedException;
 import org.apache.lucene.util.Constants;
@@ -49,12 +41,8 @@ import org.elasticsearch.cluster.InternalClusterInfoService;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.cluster.metadata.SnapshotId;
 import org.elasticsearch.cluster.node.DiscoveryNode;
-import org.elasticsearch.cluster.routing.RestoreSource;
-import org.elasticsearch.cluster.routing.ShardRouting;
-import org.elasticsearch.cluster.routing.ShardRoutingHelper;
-import org.elasticsearch.cluster.routing.ShardRoutingState;
-import org.elasticsearch.cluster.routing.TestShardRouting;
-import org.elasticsearch.cluster.routing.UnassignedInfo;
+import org.elasticsearch.cluster.routing.*;
+import org.elasticsearch.common.ParsingException;
 import org.elasticsearch.common.bytes.BytesArray;
 import org.elasticsearch.common.bytes.BytesReference;
 import org.elasticsearch.common.io.stream.BytesStreamOutput;
@@ -80,11 +68,7 @@ import org.elasticsearch.index.fielddata.IndexFieldData;
 import org.elasticsearch.index.flush.FlushStats;
 import org.elasticsearch.index.indexing.IndexingOperationListener;
 import org.elasticsearch.index.indexing.ShardIndexingService;
-import org.elasticsearch.index.mapper.MappedFieldType;
-import org.elasticsearch.index.mapper.Mapping;
-import org.elasticsearch.index.mapper.ParseContext;
-import org.elasticsearch.index.mapper.ParsedDocument;
-import org.elasticsearch.index.mapper.Uid;
+import org.elasticsearch.index.mapper.*;
 import org.elasticsearch.index.mapper.internal.UidFieldMapper;
 import org.elasticsearch.index.settings.IndexSettingsService;
 import org.elasticsearch.index.snapshots.IndexShardRepository;
@@ -97,6 +81,7 @@ import org.elasticsearch.indices.recovery.RecoveryState;
 import org.elasticsearch.test.DummyShardLock;
 import org.elasticsearch.test.ESSingleNodeTestCase;
 import org.elasticsearch.test.VersionUtils;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.nio.file.Files;
@@ -110,23 +95,19 @@ import java.util.concurrent.BrokenBarrierException;
 import java.util.concurrent.CyclicBarrier;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_REPLICAS;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_VERSION_CREATED;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchHits;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
 import static org.hamcrest.Matchers.equalTo;
 
 /**
  * Simple unit-test IndexShard related operations.
  */
 public class IndexShardTests extends ESSingleNodeTestCase {
+
     public void testFlushOnDeleteSetting() throws Exception {
         boolean initValue = randomBoolean();
         createIndex("test", settingsBuilder().put(IndexShard.INDEX_FLUSH_ON_CLOSE, initValue).build());
@@ -172,6 +153,7 @@ public class IndexShardTests extends ESSingleNodeTestCase {
         }
     }
 
+    @Test
     public void testLockTryingToDelete() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -318,6 +300,7 @@ public class IndexShardTests extends ESSingleNodeTestCase {
 
     }
 
+    @Test
     public void testDeleteIndexDecreasesCounter() throws InterruptedException, ExecutionException, IOException {
         assertAcked(client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0)).get());
         ensureGreen("test");
@@ -334,6 +317,7 @@ public class IndexShardTests extends ESSingleNodeTestCase {
         }
     }
 
+    @Test
     public void testIndexShardCounter() throws InterruptedException, ExecutionException, IOException {
         assertAcked(client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0)).get());
         ensureGreen("test");
@@ -350,6 +334,7 @@ public class IndexShardTests extends ESSingleNodeTestCase {
         assertEquals(0, indexShard.getOperationsCount());
     }
 
+    @Test
     public void testMarkAsInactiveTriggersSyncedFlush() throws Exception {
         assertAcked(client().admin().indices().prepareCreate("test")
                 .setSettings(SETTING_NUMBER_OF_SHARDS, 1, SETTING_NUMBER_OF_REPLICAS, 0));
@@ -735,7 +720,6 @@ public class IndexShardTests extends ESSingleNodeTestCase {
         CyclicBarrier barrier = new CyclicBarrier(numThreads + 1);
         for (int i = 0; i < threads.length; i++) {
             threads[i] = new Thread() {
-                @Override
                 public void run() {
                     try {
                         barrier.await();
@@ -1052,6 +1036,7 @@ public class IndexShardTests extends ESSingleNodeTestCase {
     }
 
     private static class FieldMaskingReader extends FilterDirectoryReader {
+
         private final String field;
         public FieldMaskingReader(String field, DirectoryReader in) throws IOException {
             super(in, new SubReaderWrapper() {
diff --git a/core/src/test/java/org/elasticsearch/index/shard/MergePolicySettingsTests.java b/core/src/test/java/org/elasticsearch/index/shard/MergePolicySettingsTests.java
index 76051d7..0f6b2bd 100644
--- a/core/src/test/java/org/elasticsearch/index/shard/MergePolicySettingsTests.java
+++ b/core/src/test/java/org/elasticsearch/index/shard/MergePolicySettingsTests.java
@@ -26,6 +26,7 @@ import org.elasticsearch.common.unit.ByteSizeValue;
 import org.elasticsearch.index.Index;
 import org.elasticsearch.index.settings.IndexSettingsService;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -33,9 +34,12 @@ import static org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
 import static org.hamcrest.Matchers.equalTo;
 
 public class MergePolicySettingsTests extends ESTestCase {
+
     protected final ShardId shardId = new ShardId(new Index("index"), 1);
 
+    @Test
     public void testCompoundFileSettings() throws IOException {
+
         assertThat(new MergePolicyConfig(logger, EMPTY_SETTINGS).getMergePolicy().getNoCFSRatio(), equalTo(0.1));
         assertThat(new MergePolicyConfig(logger, build(true)).getMergePolicy().getNoCFSRatio(), equalTo(1.0));
         assertThat(new MergePolicyConfig(logger, build(0.5)).getMergePolicy().getNoCFSRatio(), equalTo(0.5));
@@ -54,6 +58,7 @@ public class MergePolicySettingsTests extends ESTestCase {
         assertTrue(mp.getMergePolicy() instanceof NoMergePolicy);
     }
 
+    @Test
     public void testUpdateSettings() throws IOException {
         {
             IndexSettingsService service = new IndexSettingsService(new Index("test"), EMPTY_SETTINGS);
diff --git a/core/src/test/java/org/elasticsearch/index/shard/ShardPathTests.java b/core/src/test/java/org/elasticsearch/index/shard/ShardPathTests.java
index 0d653c0..32d2019 100644
--- a/core/src/test/java/org/elasticsearch/index/shard/ShardPathTests.java
+++ b/core/src/test/java/org/elasticsearch/index/shard/ShardPathTests.java
@@ -18,21 +18,23 @@
  */
 package org.elasticsearch.index.shard;
 
+import com.carrotsearch.randomizedtesting.annotations.Repeat;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.env.NodeEnvironment;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.nio.file.Path;
+import java.util.Set;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.is;
 
 /**
  */
 public class ShardPathTests extends ESTestCase {
+
     public void testLoadShardPath() throws IOException {
         try (final NodeEnvironment env = newNodeEnvironment(settingsBuilder().build())) {
             Settings.Builder builder = settingsBuilder().put(IndexMetaData.SETTING_INDEX_UUID, "0xDEADBEEF");
@@ -50,6 +52,7 @@ public class ShardPathTests extends ESTestCase {
         }
     }
 
+    @Test(expected = IllegalStateException.class)
     public void testFailLoadShardPathOnMultiState() throws IOException {
         try (final NodeEnvironment env = newNodeEnvironment(settingsBuilder().build())) {
             Settings.Builder builder = settingsBuilder().put(IndexMetaData.SETTING_INDEX_UUID, "0xDEADBEEF");
@@ -60,12 +63,10 @@ public class ShardPathTests extends ESTestCase {
             int id = randomIntBetween(1, 10);
             ShardStateMetaData.FORMAT.write(new ShardStateMetaData(id, true, "0xDEADBEEF"), id, paths);
             ShardPath.loadShardPath(logger, env, shardId, settings);
-            fail("Expected IllegalStateException");
-        } catch (IllegalStateException e) {
-            assertThat(e.getMessage(), containsString("more than one shard state found"));
         }
     }
 
+    @Test(expected = IllegalStateException.class)
     public void testFailLoadShardPathIndexUUIDMissmatch() throws IOException {
         try (final NodeEnvironment env = newNodeEnvironment(settingsBuilder().build())) {
             Settings.Builder builder = settingsBuilder().put(IndexMetaData.SETTING_INDEX_UUID, "foobar");
@@ -76,20 +77,13 @@ public class ShardPathTests extends ESTestCase {
             int id = randomIntBetween(1, 10);
             ShardStateMetaData.FORMAT.write(new ShardStateMetaData(id, true, "0xDEADBEEF"), id, path);
             ShardPath.loadShardPath(logger, env, shardId, settings);
-            fail("Expected IllegalStateException");
-        } catch (IllegalStateException e) {
-            assertThat(e.getMessage(), containsString("expected: foobar on shard path"));
         }
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testIllegalCustomDataPath() {
         final Path path = createTempDir().resolve("foo").resolve("0");
-        try {
-            new ShardPath(true, path, path, "foo", new ShardId("foo", 0));
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("shard state path must be different to the data path when using custom data paths"));
-        }
+        new ShardPath(true, path, path, "foo", new ShardId("foo", 0));
     }
 
     public void testValidCtor() {
diff --git a/core/src/test/java/org/elasticsearch/index/similarity/SimilarityTests.java b/core/src/test/java/org/elasticsearch/index/similarity/SimilarityTests.java
index 9659162..28f5e5c 100644
--- a/core/src/test/java/org/elasticsearch/index/similarity/SimilarityTests.java
+++ b/core/src/test/java/org/elasticsearch/index/similarity/SimilarityTests.java
@@ -19,22 +19,13 @@
 
 package org.elasticsearch.index.similarity;
 
-import org.apache.lucene.search.similarities.AfterEffectL;
-import org.apache.lucene.search.similarities.BM25Similarity;
-import org.apache.lucene.search.similarities.BasicModelG;
-import org.apache.lucene.search.similarities.DFRSimilarity;
-import org.apache.lucene.search.similarities.DefaultSimilarity;
-import org.apache.lucene.search.similarities.DistributionSPL;
-import org.apache.lucene.search.similarities.IBSimilarity;
-import org.apache.lucene.search.similarities.LMDirichletSimilarity;
-import org.apache.lucene.search.similarities.LMJelinekMercerSimilarity;
-import org.apache.lucene.search.similarities.LambdaTTF;
-import org.apache.lucene.search.similarities.NormalizationH2;
+import org.apache.lucene.search.similarities.*;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.IndexService;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -42,12 +33,15 @@ import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.instanceOf;
 
 public class SimilarityTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testResolveDefaultSimilarities() {
         SimilarityService similarityService = createIndex("foo").similarityService();
         assertThat(similarityService.getSimilarity("default").get(), instanceOf(DefaultSimilarity.class));
         assertThat(similarityService.getSimilarity("BM25").get(), instanceOf(BM25Similarity.class));
     }
 
+    @Test
     public void testResolveSimilaritiesFromMapping_default() throws IOException {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties")
@@ -67,6 +61,7 @@ public class SimilarityTests extends ESSingleNodeTestCase {
         assertThat(similarity.getDiscountOverlaps(), equalTo(false));
     }
 
+    @Test
     public void testResolveSimilaritiesFromMapping_bm25() throws IOException {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties")
@@ -90,6 +85,7 @@ public class SimilarityTests extends ESSingleNodeTestCase {
         assertThat(similarity.getDiscountOverlaps(), equalTo(false));
     }
 
+    @Test
     public void testResolveSimilaritiesFromMapping_DFR() throws IOException {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties")
@@ -115,6 +111,7 @@ public class SimilarityTests extends ESSingleNodeTestCase {
         assertThat(((NormalizationH2) similarity.getNormalization()).getC(), equalTo(3f));
     }
 
+    @Test
     public void testResolveSimilaritiesFromMapping_IB() throws IOException {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties")
@@ -140,6 +137,7 @@ public class SimilarityTests extends ESSingleNodeTestCase {
         assertThat(((NormalizationH2) similarity.getNormalization()).getC(), equalTo(3f));
     }
 
+    @Test
     public void testResolveSimilaritiesFromMapping_LMDirichlet() throws IOException {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties")
@@ -159,6 +157,7 @@ public class SimilarityTests extends ESSingleNodeTestCase {
         assertThat(similarity.getMu(), equalTo(3000f));
     }
 
+    @Test
     public void testResolveSimilaritiesFromMapping_LMJelinekMercer() throws IOException {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
                 .startObject("properties")
diff --git a/core/src/test/java/org/elasticsearch/index/snapshots/blobstore/FileInfoTests.java b/core/src/test/java/org/elasticsearch/index/snapshots/blobstore/FileInfoTests.java
index 650388c..cd1b05f 100644
--- a/core/src/test/java/org/elasticsearch/index/snapshots/blobstore/FileInfoTests.java
+++ b/core/src/test/java/org/elasticsearch/index/snapshots/blobstore/FileInfoTests.java
@@ -22,14 +22,11 @@ import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.Version;
 import org.elasticsearch.ElasticsearchParseException;
 import org.elasticsearch.common.unit.ByteSizeValue;
-import org.elasticsearch.common.xcontent.ToXContent;
-import org.elasticsearch.common.xcontent.XContentBuilder;
-import org.elasticsearch.common.xcontent.XContentFactory;
-import org.elasticsearch.common.xcontent.XContentParser;
-import org.elasticsearch.common.xcontent.XContentType;
-import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardSnapshot.FileInfo.Fields;
+import org.elasticsearch.common.xcontent.*;
 import org.elasticsearch.index.store.StoreFileMetaData;
 import org.elasticsearch.test.ESTestCase;
+import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardSnapshot.FileInfo.Fields;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -40,6 +37,8 @@ import static org.hamcrest.Matchers.is;
 /**
  */
 public class FileInfoTests extends ESTestCase {
+
+    @Test
     public void testToFromXContent() throws IOException {
         final int iters = scaledRandomIntBetween(1, 10);
         for (int iter = 0; iter < iters; iter++) {
@@ -72,6 +71,7 @@ public class FileInfoTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testInvalidFieldsInFromXContent() throws IOException {
         final int iters = scaledRandomIntBetween(1, 10);
         for (int iter = 0; iter < iters; iter++) {
diff --git a/core/src/test/java/org/elasticsearch/index/snapshots/blobstore/SlicedInputStreamTests.java b/core/src/test/java/org/elasticsearch/index/snapshots/blobstore/SlicedInputStreamTests.java
index 38fc17c..e9deadb 100644
--- a/core/src/test/java/org/elasticsearch/index/snapshots/blobstore/SlicedInputStreamTests.java
+++ b/core/src/test/java/org/elasticsearch/index/snapshots/blobstore/SlicedInputStreamTests.java
@@ -19,20 +19,18 @@
 package org.elasticsearch.index.snapshots.blobstore;
 
 import com.carrotsearch.randomizedtesting.generators.RandomInts;
-
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.FilterInputStream;
-import java.io.IOException;
-import java.io.InputStream;
+import java.io.*;
 import java.util.Random;
 
 import static org.hamcrest.Matchers.equalTo;
 
 public class SlicedInputStreamTests extends ESTestCase {
-    public void testReadRandom() throws IOException {
+
+    @Test
+    public void readRandom() throws IOException {
         int parts = randomIntBetween(1, 20);
         ByteArrayOutputStream stream = new ByteArrayOutputStream();
         int numWriteOps = scaledRandomIntBetween(1000, 10000);
diff --git a/core/src/test/java/org/elasticsearch/index/store/CorruptedFileIT.java b/core/src/test/java/org/elasticsearch/index/store/CorruptedFileIT.java
index b9282ea..17e677a 100644
--- a/core/src/test/java/org/elasticsearch/index/store/CorruptedFileIT.java
+++ b/core/src/test/java/org/elasticsearch/index/store/CorruptedFileIT.java
@@ -19,6 +19,7 @@
 package org.elasticsearch.index.store;
 
 import com.carrotsearch.randomizedtesting.generators.RandomPicks;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.lucene.index.CheckIndex;
 import org.apache.lucene.index.IndexFileNames;
@@ -64,8 +65,8 @@ import org.elasticsearch.indices.recovery.RecoveryTarget;
 import org.elasticsearch.monitor.fs.FsInfo;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.snapshots.SnapshotState;
-import org.elasticsearch.test.CorruptionUtils;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.elasticsearch.test.CorruptionUtils;
 import org.elasticsearch.test.InternalTestCluster;
 import org.elasticsearch.test.store.MockFSDirectoryService;
 import org.elasticsearch.test.transport.MockTransportService;
@@ -73,11 +74,11 @@ import org.elasticsearch.transport.TransportException;
 import org.elasticsearch.transport.TransportRequest;
 import org.elasticsearch.transport.TransportRequestOptions;
 import org.elasticsearch.transport.TransportService;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.PrintStream;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.DirectoryStream;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -110,6 +111,7 @@ import static org.hamcrest.Matchers.notNullValue;
 
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.SUITE)
 public class CorruptedFileIT extends ESIntegTestCase {
+
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return Settings.builder()
@@ -131,6 +133,7 @@ public class CorruptedFileIT extends ESIntegTestCase {
     /**
      * Tests that we can actually recover from a corruption on the primary given that we have replica shards around.
      */
+    @Test
     public void testCorruptFileAndRecover() throws ExecutionException, InterruptedException, IOException {
         int numDocs = scaledRandomIntBetween(100, 1000);
         // have enough space for 3 copies
@@ -198,7 +201,7 @@ public class CorruptedFileIT extends ESIntegTestCase {
             @Override
             public void afterIndexShardClosed(ShardId sid, @Nullable IndexShard indexShard, @IndexSettings Settings indexSettings) {
                 if (indexShard != null) {
-                    Store store = indexShard.store();
+                    Store store = ((IndexShard) indexShard).store();
                     store.incRef();
                     try {
                         if (!Lucene.indexExists(store.directory()) && indexShard.state() == IndexShardState.STARTED) {
@@ -243,6 +246,7 @@ public class CorruptedFileIT extends ESIntegTestCase {
      * Tests corruption that happens on a single shard when no replicas are present. We make sure that the primary stays unassigned
      * and all other replicas for the healthy shards happens
      */
+    @Test
     public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException {
         int numDocs = scaledRandomIntBetween(100, 1000);
         internalCluster().ensureAtLeastNumDataNodes(2);
@@ -371,6 +375,7 @@ public class CorruptedFileIT extends ESIntegTestCase {
      * Tests corruption that happens on the network layer and that the primary does not get affected by corruption that happens on the way
      * to the replica. The file on disk stays uncorrupted
      */
+    @Test
     public void testCorruptionOnNetworkLayer() throws ExecutionException, InterruptedException {
         int numDocs = scaledRandomIntBetween(100, 1000);
         internalCluster().ensureAtLeastNumDataNodes(2);
@@ -469,6 +474,7 @@ public class CorruptedFileIT extends ESIntegTestCase {
      * TODO once checksum verification on snapshotting is implemented this test needs to be fixed or split into several
      * parts... We should also corrupt files on the actual snapshot and check that we don't restore the corrupted shard.
      */
+    @Test
     public void testCorruptFileThenSnapshotAndRestore() throws ExecutionException, InterruptedException, IOException {
         int numDocs = scaledRandomIntBetween(100, 1000);
         internalCluster().ensureAtLeastNumDataNodes(2);
@@ -523,6 +529,7 @@ public class CorruptedFileIT extends ESIntegTestCase {
      * nodes, so that replica won't be sneaky and allocated on a node that doesn't have a corrupted
      * replica.
      */
+    @Test
     public void testReplicaCorruption() throws Exception {
         int numDocs = scaledRandomIntBetween(100, 1000);
         internalCluster().ensureAtLeastNumDataNodes(2);
diff --git a/core/src/test/java/org/elasticsearch/index/store/CorruptedTranslogIT.java b/core/src/test/java/org/elasticsearch/index/store/CorruptedTranslogIT.java
index 653a7d0..c5158b7 100644
--- a/core/src/test/java/org/elasticsearch/index/store/CorruptedTranslogIT.java
+++ b/core/src/test/java/org/elasticsearch/index/store/CorruptedTranslogIT.java
@@ -20,7 +20,6 @@
 package org.elasticsearch.index.store;
 
 import com.carrotsearch.randomizedtesting.generators.RandomPicks;
-
 import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.search.SearchPhaseExecutionException;
@@ -38,6 +37,7 @@ import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.engine.MockEngineSupport;
 import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.elasticsearch.test.transport.MockTransportService;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
@@ -62,6 +62,7 @@ import static org.hamcrest.Matchers.notNullValue;
  */
 @ESIntegTestCase.ClusterScope(scope= ESIntegTestCase.Scope.SUITE, numDataNodes = 0)
 public class CorruptedTranslogIT extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         // we really need local GW here since this also checks for corruption etc.
@@ -69,6 +70,7 @@ public class CorruptedTranslogIT extends ESIntegTestCase {
         return pluginList(MockTransportService.TestPlugin.class);
     }
 
+    @Test
     @TestLogging("index.translog:TRACE,index.gateway:TRACE")
     public void testCorruptTranslogFiles() throws Exception {
         internalCluster().startNodesAsync(1, Settings.EMPTY).get();
@@ -151,12 +153,12 @@ public class CorruptedTranslogIT extends ESIntegTestCase {
                     ByteBuffer bb = ByteBuffer.wrap(new byte[1]);
                     raf.read(bb);
                     bb.flip();
-
+                    
                     // corrupt
                     byte oldValue = bb.get(0);
                     byte newValue = (byte) (oldValue + 1);
                     bb.put(0, newValue);
-
+                    
                     // rewrite
                     raf.position(filePointer);
                     raf.write(bb);
diff --git a/core/src/test/java/org/elasticsearch/index/store/DirectoryUtilsTests.java b/core/src/test/java/org/elasticsearch/index/store/DirectoryUtilsTests.java
index 5726587..04ae467 100644
--- a/core/src/test/java/org/elasticsearch/index/store/DirectoryUtilsTests.java
+++ b/core/src/test/java/org/elasticsearch/index/store/DirectoryUtilsTests.java
@@ -18,23 +18,20 @@
  */
 package org.elasticsearch.index.store;
 
-import org.apache.lucene.store.BaseDirectoryWrapper;
-import org.apache.lucene.store.FSDirectory;
-import org.apache.lucene.store.FileSwitchDirectory;
-import org.apache.lucene.store.FilterDirectory;
-import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.store.*;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.nio.file.Path;
 import java.util.Collections;
 import java.util.Set;
 
-import static org.hamcrest.CoreMatchers.notNullValue;
-import static org.hamcrest.CoreMatchers.nullValue;
-import static org.hamcrest.CoreMatchers.sameInstance;
+import static org.hamcrest.CoreMatchers.*;
 
 public class DirectoryUtilsTests extends ESTestCase {
+
+    @Test
     public void testGetLeave() throws IOException {
         Path file = createTempDir();
         final int iters = scaledRandomIntBetween(10, 100);
diff --git a/core/src/test/java/org/elasticsearch/index/store/ExceptionRetryIT.java b/core/src/test/java/org/elasticsearch/index/store/ExceptionRetryIT.java
index cc3c786..91d17f4 100644
--- a/core/src/test/java/org/elasticsearch/index/store/ExceptionRetryIT.java
+++ b/core/src/test/java/org/elasticsearch/index/store/ExceptionRetryIT.java
@@ -26,17 +26,15 @@ import org.elasticsearch.action.bulk.BulkResponse;
 import org.elasticsearch.action.bulk.TransportShardBulkAction;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.cluster.node.DiscoveryNode;
+import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.discovery.Discovery;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.transport.MockTransportService;
-import org.elasticsearch.transport.ConnectTransportException;
-import org.elasticsearch.transport.TransportException;
-import org.elasticsearch.transport.TransportRequest;
-import org.elasticsearch.transport.TransportRequestOptions;
-import org.elasticsearch.transport.TransportService;
+import org.elasticsearch.transport.*;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Collection;
@@ -47,9 +45,7 @@ import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.termQuery;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.Matchers.greaterThan;
 
@@ -64,7 +60,7 @@ public class ExceptionRetryIT extends ESIntegTestCase {
     @Override
     protected void beforeIndexDeletion() {
         // a write operation might still be in flight when the test has finished
-        // so we should not check the operation counter here
+        // so we should not check the operation counter here 
     }
 
     /**
@@ -72,6 +68,7 @@ public class ExceptionRetryIT extends ESIntegTestCase {
      * If auto generated ids are used this must not lead to duplicate ids
      * see https://github.com/elasticsearch/elasticsearch/issues/8788
      */
+    @Test
     public void testRetryDueToExceptionOnNetworkLayer() throws ExecutionException, InterruptedException, IOException {
         final AtomicBoolean exceptionThrown = new AtomicBoolean(false);
         int numDocs = scaledRandomIntBetween(100, 1000);
diff --git a/core/src/test/java/org/elasticsearch/index/store/StoreTests.java b/core/src/test/java/org/elasticsearch/index/store/StoreTests.java
index 7e81861..123e4e0 100644
--- a/core/src/test/java/org/elasticsearch/index/store/StoreTests.java
+++ b/core/src/test/java/org/elasticsearch/index/store/StoreTests.java
@@ -73,6 +73,7 @@ import org.elasticsearch.indices.store.TransportNodesListShardStoreMetaData;
 import org.elasticsearch.test.DummyShardLock;
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -106,6 +107,8 @@ import static org.hamcrest.Matchers.notNullValue;
 import static org.hamcrest.Matchers.nullValue;
 
 public class StoreTests extends ESTestCase {
+
+    @Test
     public void testRefCount() throws IOException {
         final ShardId shardId = new ShardId(new Index("index"), 1);
         DirectoryService directoryService = new LuceneManagedDirectoryService(random());
@@ -159,6 +162,7 @@ public class StoreTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testVerifyingIndexOutput() throws IOException {
         Directory dir = newDirectory();
         IndexOutput output = dir.createOutput("foo.bar", IOContext.DEFAULT);
@@ -272,6 +276,7 @@ public class StoreTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testVerifyingIndexOutputWithBogusInput() throws IOException {
         Directory dir = newDirectory();
         int length = scaledRandomIntBetween(10, 1024);
@@ -354,6 +359,7 @@ public class StoreTests extends ESTestCase {
     // The test currently fails because the segment infos and the index don't
     // agree on the oldest version of a segment. We should fix this test by
     // switching to a static bw index
+    @Test
     public void testWriteLegacyChecksums() throws IOException {
         final ShardId shardId = new ShardId(new Index("index"), 1);
         DirectoryService directoryService = new LuceneManagedDirectoryService(random());
@@ -438,6 +444,7 @@ public class StoreTests extends ESTestCase {
 
     }
 
+    @Test
     public void testNewChecksums() throws IOException {
         final ShardId shardId = new ShardId(new Index("index"), 1);
         DirectoryService directoryService = new LuceneManagedDirectoryService(random());
@@ -497,6 +504,7 @@ public class StoreTests extends ESTestCase {
         IOUtils.close(store);
     }
 
+    @Test
     public void testMixedChecksums() throws IOException {
         final ShardId shardId = new ShardId(new Index("index"), 1);
         DirectoryService directoryService = new LuceneManagedDirectoryService(random());
@@ -588,6 +596,7 @@ public class StoreTests extends ESTestCase {
         IOUtils.close(store);
     }
 
+    @Test
     public void testRenameFile() throws IOException {
         final ShardId shardId = new ShardId(new Index("index"), 1);
         DirectoryService directoryService = new LuceneManagedDirectoryService(random(), false);
@@ -704,6 +713,7 @@ public class StoreTests extends ESTestCase {
 
     }
 
+    @Test
     public void testVerifyingIndexInput() throws IOException {
         Directory dir = newDirectory();
         IndexOutput output = dir.createOutput("foo.bar", IOContext.DEFAULT);
@@ -833,6 +843,7 @@ public class StoreTests extends ESTestCase {
      * Legacy indices without lucene CRC32 did never write or calculate checksums for segments_N files
      * but for other files
      */
+    @Test
     public void testRecoveryDiffWithLegacyCommit() {
         Map<String, StoreFileMetaData> metaDataMap = new HashMap<>();
         metaDataMap.put("segments_1", new StoreFileMetaData("segments_1", 50, null, null, new BytesRef(new byte[]{1})));
@@ -844,6 +855,8 @@ public class StoreTests extends ESTestCase {
         assertEquals(recoveryDiff.toString(), recoveryDiff.different.size(), 2);
     }
 
+
+    @Test
     public void testRecoveryDiff() throws IOException, InterruptedException {
         int numDocs = 2 + random().nextInt(100);
         List<Document> docs = new ArrayList<>();
@@ -988,6 +1001,7 @@ public class StoreTests extends ESTestCase {
         IOUtils.close(store);
     }
 
+    @Test
     public void testCleanupFromSnapshot() throws IOException {
         final ShardId shardId = new ShardId(new Index("index"), 1);
         DirectoryService directoryService = new LuceneManagedDirectoryService(random());
@@ -1097,6 +1111,7 @@ public class StoreTests extends ESTestCase {
         IOUtils.close(store);
     }
 
+    @Test
     public void testCleanUpWithLegacyChecksums() throws IOException {
         Map<String, StoreFileMetaData> metaDataMap = new HashMap<>();
         metaDataMap.put("segments_1", new StoreFileMetaData("segments_1", 50, null, null, new BytesRef(new byte[]{1})));
@@ -1143,6 +1158,7 @@ public class StoreTests extends ESTestCase {
         assertEquals(count.get(), 1);
     }
 
+    @Test
     public void testStoreStats() throws IOException {
         final ShardId shardId = new ShardId(new Index("index"), 1);
         DirectoryService directoryService = new LuceneManagedDirectoryService(random());
@@ -1201,7 +1217,9 @@ public class StoreTests extends ESTestCase {
         return numNonExtra;
     }
 
+    @Test
     public void testMetadataSnapshotStreaming() throws Exception {
+
         Store.MetadataSnapshot outMetadataSnapshot = createMetaDataSnapshot();
         org.elasticsearch.Version targetNodeVersion = randomVersion(random());
 
@@ -1235,6 +1253,7 @@ public class StoreTests extends ESTestCase {
         return new Store.MetadataSnapshot(unmodifiableMap(storeFileMetaDataMap), unmodifiableMap(commitUserData), 0);
     }
 
+    @Test
     public void testUserDataRead() throws IOException {
         final ShardId shardId = new ShardId(new Index("index"), 1);
         DirectoryService directoryService = new LuceneManagedDirectoryService(random());
@@ -1269,6 +1288,7 @@ public class StoreTests extends ESTestCase {
         IOUtils.close(store);
     }
 
+    @Test
     public void testStreamStoreFilesMetaData() throws Exception {
         Store.MetadataSnapshot metadataSnapshot = createMetaDataSnapshot();
         TransportNodesListShardStoreMetaData.StoreFilesMetaData outStoreFileMetaData = new TransportNodesListShardStoreMetaData.StoreFilesMetaData(randomBoolean(), new ShardId("test", 0),metadataSnapshot);
diff --git a/core/src/test/java/org/elasticsearch/index/suggest/stats/SuggestStatsIT.java b/core/src/test/java/org/elasticsearch/index/suggest/stats/SuggestStatsIT.java
index 68c19d5..02d5279 100644
--- a/core/src/test/java/org/elasticsearch/index/suggest/stats/SuggestStatsIT.java
+++ b/core/src/test/java/org/elasticsearch/index/suggest/stats/SuggestStatsIT.java
@@ -32,6 +32,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder;
 import org.elasticsearch.search.suggest.term.TermSuggestionBuilder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.HashSet;
 import java.util.Set;
@@ -40,20 +41,19 @@ import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF
 import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAllSuccessful;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
 @ESIntegTestCase.ClusterScope(minNumDataNodes = 2)
 public class SuggestStatsIT extends ESIntegTestCase {
+
     @Override
     protected int numberOfReplicas() {
         return 0;
     }
 
+    @Test
     public void testSimpleStats() throws Exception {
         // clear all stats first
         client().admin().indices().prepareStats().clear().execute().actionGet();
diff --git a/core/src/test/java/org/elasticsearch/index/translog/TranslogTests.java b/core/src/test/java/org/elasticsearch/index/translog/TranslogTests.java
index 49a6f42..0b3e12d 100644
--- a/core/src/test/java/org/elasticsearch/index/translog/TranslogTests.java
+++ b/core/src/test/java/org/elasticsearch/index/translog/TranslogTests.java
@@ -20,19 +20,21 @@
 package org.elasticsearch.index.translog;
 
 import com.carrotsearch.randomizedtesting.generators.RandomPicks;
-
 import org.apache.lucene.codecs.CodecUtil;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.store.AlreadyClosedException;
 import org.apache.lucene.store.ByteArrayDataOutput;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util.TestUtil;
 import org.elasticsearch.ElasticsearchException;
+import org.elasticsearch.Version;
 import org.elasticsearch.common.bytes.BytesArray;
 import org.elasticsearch.common.io.FileSystemUtils;
 import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.common.unit.ByteSizeValue;
 import org.elasticsearch.common.util.BigArrays;
 import org.elasticsearch.common.util.concurrent.AbstractRunnable;
 import org.elasticsearch.common.util.concurrent.ConcurrentCollections;
@@ -43,39 +45,25 @@ import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.Matchers;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.EOFException;
 import java.io.IOException;
+import java.io.InputStream;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
 import java.nio.charset.Charset;
-import java.nio.file.Files;
-import java.nio.file.InvalidPathException;
-import java.nio.file.Path;
-import java.nio.file.StandardOpenOption;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.ArrayBlockingQueue;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.BrokenBarrierException;
-import java.util.concurrent.CopyOnWriteArrayList;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.CyclicBarrier;
-import java.util.concurrent.TimeUnit;
+import java.nio.file.*;
+import java.util.*;
+import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
+import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
@@ -194,6 +182,7 @@ public class TranslogTests extends ESTestCase {
         return string;
     }
 
+    @Test
     public void testRead() throws IOException {
         Translog.Location loc1 = translog.add(new Translog.Index("test", "1", new byte[]{1}));
         Translog.Location loc2 = translog.add(new Translog.Index("test", "2", new byte[]{2}));
@@ -220,6 +209,7 @@ public class TranslogTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSimpleOperations() throws IOException {
         ArrayList<Translog.Operation> ops = new ArrayList<>();
         Translog.Snapshot snapshot = translog.newSnapshot();
@@ -282,6 +272,7 @@ public class TranslogTests extends ESTestCase {
         return stats;
     }
 
+    @Test
     public void testStats() throws IOException {
         final long firstOperationPosition = translog.getFirstOperationPosition();
         TranslogStats stats = stats();
@@ -345,6 +336,7 @@ public class TranslogTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSnapshot() {
         ArrayList<Translog.Operation> ops = new ArrayList<>();
         Translog.Snapshot snapshot = translog.newSnapshot();
@@ -371,6 +363,7 @@ public class TranslogTests extends ESTestCase {
         snapshot1.close();
     }
 
+    @Test
     public void testSnapshotWithNewTranslog() throws IOException {
         ArrayList<Translog.Operation> ops = new ArrayList<>();
         Translog.Snapshot snapshot = translog.newSnapshot();
@@ -408,7 +401,8 @@ public class TranslogTests extends ESTestCase {
         }
     }
 
-    public void testDeleteOnSnapshotRelease() throws Exception {
+    @Test
+    public void deleteOnSnapshotRelease() throws Exception {
         ArrayList<Translog.Operation> firstOps = new ArrayList<>();
         addToTranslogAndList(translog, firstOps, new Translog.Index("test", "1", new byte[]{1}));
 
@@ -463,6 +457,7 @@ public class TranslogTests extends ESTestCase {
 
     }
 
+    @Test
     public void testConcurrentWritesWithVaryingSize() throws Throwable {
         final int opsPerThread = randomIntBetween(10, 200);
         int threadCount = 2 + randomInt(5);
@@ -548,6 +543,7 @@ public class TranslogTests extends ESTestCase {
 
     }
 
+    @Test
     public void testTranslogChecksums() throws Exception {
         List<Translog.Location> locations = new ArrayList<>();
 
@@ -571,6 +567,7 @@ public class TranslogTests extends ESTestCase {
         assertThat("at least one corruption was caused and caught", corruptionsCaught.get(), greaterThanOrEqualTo(1));
     }
 
+    @Test
     public void testTruncatedTranslogs() throws Exception {
         List<Translog.Location> locations = new ArrayList<>();
 
@@ -637,6 +634,8 @@ public class TranslogTests extends ESTestCase {
         return new Term("_uid", id);
     }
 
+
+    @Test
     public void testVerifyTranslogIsNotDeleted() throws IOException {
         assertFileIsPresent(translog, 1);
         translog.add(new Translog.Index("test", "1", new byte[]{1}));
@@ -656,6 +655,7 @@ public class TranslogTests extends ESTestCase {
     }
 
     /** Tests that concurrent readers and writes maintain view and snapshot semantics */
+    @Test
     public void testConcurrentWriteViewsAndSnapshot() throws Throwable {
         final Thread[] writers = new Thread[randomIntBetween(1, 10)];
         final Thread[] readers = new Thread[randomIntBetween(1, 10)];
diff --git a/core/src/test/java/org/elasticsearch/index/translog/TranslogVersionTests.java b/core/src/test/java/org/elasticsearch/index/translog/TranslogVersionTests.java
index 68f26c5..283124d 100644
--- a/core/src/test/java/org/elasticsearch/index/translog/TranslogVersionTests.java
+++ b/core/src/test/java/org/elasticsearch/index/translog/TranslogVersionTests.java
@@ -22,6 +22,7 @@ package org.elasticsearch.index.translog;
 import org.apache.lucene.util.IOUtils;
 import org.elasticsearch.index.VersionType;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.nio.channels.FileChannel;
@@ -35,6 +36,8 @@ import static org.hamcrest.Matchers.equalTo;
  * Tests for reading old and new translog files
  */
 public class TranslogVersionTests extends ESTestCase {
+
+    @Test
     public void testV0LegacyTranslogVersion() throws Exception {
         Path translogFile = getDataPath("/org/elasticsearch/index/translog/translog-v0.binary");
         assertThat("test file should exist", Files.exists(translogFile), equalTo(true));
@@ -59,6 +62,7 @@ public class TranslogVersionTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testV1ChecksummedTranslogVersion() throws Exception {
         Path translogFile = getDataPath("/org/elasticsearch/index/translog/translog-v1.binary");
         assertThat("test file should exist", Files.exists(translogFile), equalTo(true));
@@ -91,6 +95,7 @@ public class TranslogVersionTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testCorruptedTranslogs() throws Exception {
         try {
             Path translogFile = getDataPath("/org/elasticsearch/index/translog/translog-v1-corrupted-magic.binary");
@@ -130,6 +135,7 @@ public class TranslogVersionTests extends ESTestCase {
 
     }
 
+    @Test
     public void testTruncatedTranslog() throws Exception {
         try {
             Path translogFile = getDataPath("/org/elasticsearch/index/translog/translog-v1-truncated.binary");
diff --git a/core/src/test/java/org/elasticsearch/indexing/IndexActionIT.java b/core/src/test/java/org/elasticsearch/indexing/IndexActionIT.java
index f4a70a2..1c914c1 100644
--- a/core/src/test/java/org/elasticsearch/indexing/IndexActionIT.java
+++ b/core/src/test/java/org/elasticsearch/indexing/IndexActionIT.java
@@ -25,6 +25,7 @@ import org.elasticsearch.cluster.metadata.MetaDataCreateIndexService;
 import org.elasticsearch.index.VersionType;
 import org.elasticsearch.indices.InvalidIndexNameException;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -43,10 +44,12 @@ import static org.hamcrest.Matchers.lessThanOrEqualTo;
  *
  */
 public class IndexActionIT extends ESIntegTestCase {
+
     /**
      * This test tries to simulate load while creating an index and indexing documents
      * while the index is being created.
      */
+    @Test
     public void testAutoGenerateIdNoDuplicates() throws Exception {
         int numberOfIterations = scaledRandomIntBetween(10, 50);
         for (int i = 0; i < numberOfIterations; i++) {
@@ -89,6 +92,7 @@ public class IndexActionIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testCreatedFlag() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -106,6 +110,7 @@ public class IndexActionIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testCreatedFlagWithFlush() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -121,6 +126,7 @@ public class IndexActionIT extends ESIntegTestCase {
         assertTrue(indexResponse.isCreated());
     }
 
+    @Test
     public void testCreatedFlagParallelExecution() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -153,6 +159,7 @@ public class IndexActionIT extends ESIntegTestCase {
         terminate(threadPool);
     }
 
+    @Test
     public void testCreatedFlagWithExternalVersioning() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -162,6 +169,7 @@ public class IndexActionIT extends ESIntegTestCase {
         assertTrue(indexResponse.isCreated());
     }
 
+    @Test
     public void testCreateFlagWithBulk() {
         createIndex("test");
         ensureGreen();
@@ -173,6 +181,7 @@ public class IndexActionIT extends ESIntegTestCase {
         assertTrue(indexResponse.isCreated());
     }
 
+    @Test
     public void testCreateIndexWithLongName() {
         int min = MetaDataCreateIndexService.MAX_INDEX_NAME_BYTES + 1;
         int max = MetaDataCreateIndexService.MAX_INDEX_NAME_BYTES * 2;
diff --git a/core/src/test/java/org/elasticsearch/indexlifecycle/IndexLifecycleActionIT.java b/core/src/test/java/org/elasticsearch/indexlifecycle/IndexLifecycleActionIT.java
index 1f4e7c6..8fe2bf0 100644
--- a/core/src/test/java/org/elasticsearch/indexlifecycle/IndexLifecycleActionIT.java
+++ b/core/src/test/java/org/elasticsearch/indexlifecycle/IndexLifecycleActionIT.java
@@ -31,8 +31,8 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.discovery.Discovery;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.InternalTestCluster;
+import org.junit.Test;
 
 import java.util.Set;
 import java.util.stream.Collectors;
@@ -46,6 +46,7 @@ import static org.elasticsearch.cluster.routing.ShardRoutingState.INITIALIZING;
 import static org.elasticsearch.cluster.routing.ShardRoutingState.RELOCATING;
 import static org.elasticsearch.cluster.routing.ShardRoutingState.STARTED;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.hamcrest.Matchers.equalTo;
@@ -58,6 +59,8 @@ import static org.hamcrest.Matchers.nullValue;
  */
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0)
 public class IndexLifecycleActionIT extends ESIntegTestCase {
+
+    @Test
     public void testIndexLifecycleActionsWith11Shards1Backup() throws Exception {
         Settings settings = settingsBuilder()
                 .put(SETTING_NUMBER_OF_SHARDS, 11)
diff --git a/core/src/test/java/org/elasticsearch/indices/IndicesLifecycleListenerIT.java b/core/src/test/java/org/elasticsearch/indices/IndicesLifecycleListenerIT.java
index 9ea4e38..bf3b84e 100644
--- a/core/src/test/java/org/elasticsearch/indices/IndicesLifecycleListenerIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/IndicesLifecycleListenerIT.java
@@ -38,6 +38,7 @@ import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.List;
 import java.util.Map;
@@ -63,6 +64,8 @@ import static org.hamcrest.Matchers.hasSize;
 
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0)
 public class IndicesLifecycleListenerIT extends ESIntegTestCase {
+
+    @Test
     public void testBeforeIndexAddedToCluster() throws Exception {
         String node1 = internalCluster().startNode();
         String node2 = internalCluster().startNode();
@@ -110,6 +113,7 @@ public class IndicesLifecycleListenerIT extends ESIntegTestCase {
      * Tests that if an *index* structure creation fails on relocation to a new node, the shard
      * is not stuck but properly failed.
      */
+    @Test
     public void testIndexShardFailedOnRelocation() throws Throwable {
         String node1 = internalCluster().startNode();
         client().admin().indices().prepareCreate("index1").setSettings(SETTING_NUMBER_OF_SHARDS, 1, SETTING_NUMBER_OF_REPLICAS, 0).get();
@@ -129,7 +133,9 @@ public class IndicesLifecycleListenerIT extends ESIntegTestCase {
         assertThat(state.nodes().resolveNode(shard.get(0).currentNodeId()).getName(), Matchers.equalTo(node1));
     }
 
+    @Test
     public void testIndexStateShardChanged() throws Throwable {
+
         //start with a single node
         String node1 = internalCluster().startNode();
         IndexShardStateChangeListener stateChangeListenerNode1 = new IndexShardStateChangeListener();
diff --git a/core/src/test/java/org/elasticsearch/indices/IndicesLifecycleListenerSingleNodeTests.java b/core/src/test/java/org/elasticsearch/indices/IndicesLifecycleListenerSingleNodeTests.java
index 037e9b9..9f9ed46 100644
--- a/core/src/test/java/org/elasticsearch/indices/IndicesLifecycleListenerSingleNodeTests.java
+++ b/core/src/test/java/org/elasticsearch/indices/IndicesLifecycleListenerSingleNodeTests.java
@@ -24,6 +24,7 @@ import org.elasticsearch.index.IndexService;
 import org.elasticsearch.index.settings.IndexSettings;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -32,12 +33,15 @@ import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 
 public class IndicesLifecycleListenerSingleNodeTests extends ESSingleNodeTestCase {
+
     @Override
     protected boolean resetNodeAfterTest() {
         return true;
     }
 
+    @Test
     public void testCloseDeleteCallback() throws Throwable {
+
         final AtomicInteger counter = new AtomicInteger(1);
         assertAcked(client().admin().indices().prepareCreate("test")
                 .setSettings(SETTING_NUMBER_OF_SHARDS, 1, SETTING_NUMBER_OF_REPLICAS, 0));
@@ -82,5 +86,5 @@ public class IndicesLifecycleListenerSingleNodeTests extends ESSingleNodeTestCas
         assertAcked(client().admin().indices().prepareDelete("test").get());
         assertEquals(7, counter.get());
     }
-
+    
 }
diff --git a/core/src/test/java/org/elasticsearch/indices/IndicesOptionsIntegrationIT.java b/core/src/test/java/org/elasticsearch/indices/IndicesOptionsIntegrationIT.java
index c959ba1..4fd7f153 100644
--- a/core/src/test/java/org/elasticsearch/indices/IndicesOptionsIntegrationIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/IndicesOptionsIntegrationIT.java
@@ -27,9 +27,9 @@ import org.elasticsearch.action.admin.indices.alias.get.GetAliasesRequestBuilder
 import org.elasticsearch.action.admin.indices.cache.clear.ClearIndicesCacheRequestBuilder;
 import org.elasticsearch.action.admin.indices.exists.types.TypesExistsRequestBuilder;
 import org.elasticsearch.action.admin.indices.flush.FlushRequestBuilder;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeRequestBuilder;
 import org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsRequestBuilder;
 import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsRequestBuilder;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeRequestBuilder;
 import org.elasticsearch.action.admin.indices.refresh.RefreshRequestBuilder;
 import org.elasticsearch.action.admin.indices.segments.IndicesSegmentsRequestBuilder;
 import org.elasticsearch.action.admin.indices.settings.get.GetSettingsRequestBuilder;
@@ -54,6 +54,7 @@ import org.elasticsearch.search.builder.SearchSourceBuilder;
 import org.elasticsearch.search.suggest.SuggestBuilders;
 import org.elasticsearch.search.warmer.IndexWarmersMetaData;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.action.percolate.PercolateSourceBuilder.docBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
@@ -64,7 +65,9 @@ import static org.hamcrest.Matchers.notNullValue;
 import static org.hamcrest.Matchers.nullValue;
 
 public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
-    public void testSpecifiedIndexUnavailableMultipleIndices() throws Exception {
+
+    @Test
+    public void testSpecifiedIndexUnavailable_multipleIndices() throws Exception {
         createIndex("test1");
         ensureYellow();
 
@@ -75,7 +78,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(_flush("test1", "test2"),true);
         verify(segments("test1", "test2"), true);
         verify(stats("test1", "test2"), true);
-        verify(optimize("test1", "test2"), true);
+        verify(forceMerge("test1", "test2"), true);
         verify(refresh("test1", "test2"), true);
         verify(validateQuery("test1", "test2"), true);
         verify(aliasExists("test1", "test2"), true);
@@ -96,7 +99,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(_flush("test1", "test2").setIndicesOptions(options),true);
         verify(segments("test1", "test2").setIndicesOptions(options), true);
         verify(stats("test1", "test2").setIndicesOptions(options), true);
-        verify(optimize("test1", "test2").setIndicesOptions(options), true);
+        verify(forceMerge("test1", "test2").setIndicesOptions(options), true);
         verify(refresh("test1", "test2").setIndicesOptions(options), true);
         verify(validateQuery("test1", "test2").setIndicesOptions(options), true);
         verify(aliasExists("test1", "test2").setIndicesOptions(options), true);
@@ -117,7 +120,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(_flush("test1", "test2").setIndicesOptions(options), false);
         verify(segments("test1", "test2").setIndicesOptions(options), false);
         verify(stats("test1", "test2").setIndicesOptions(options), false);
-        verify(optimize("test1", "test2").setIndicesOptions(options), false);
+        verify(forceMerge("test1", "test2").setIndicesOptions(options), false);
         verify(refresh("test1", "test2").setIndicesOptions(options), false);
         verify(validateQuery("test1", "test2").setIndicesOptions(options), false);
         verify(aliasExists("test1", "test2").setIndicesOptions(options), false);
@@ -140,7 +143,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(_flush("test1", "test2").setIndicesOptions(options),false);
         verify(segments("test1", "test2").setIndicesOptions(options), false);
         verify(stats("test1", "test2").setIndicesOptions(options), false);
-        verify(optimize("test1", "test2").setIndicesOptions(options), false);
+        verify(forceMerge("test1", "test2").setIndicesOptions(options), false);
         verify(refresh("test1", "test2").setIndicesOptions(options), false);
         verify(validateQuery("test1", "test2").setIndicesOptions(options), false);
         verify(aliasExists("test1", "test2").setIndicesOptions(options), false);
@@ -155,7 +158,8 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(getSettings("test1", "test2").setIndicesOptions(options), false);
     }
 
-    public void testSpecifiedIndexUnavailableSingleIndexThatIsClosed() throws Exception {
+    @Test
+    public void testSpecifiedIndexUnavailable_singleIndexThatIsClosed() throws Exception {
         assertAcked(prepareCreate("test1"));
         // we need to wait until all shards are allocated since recovery from
         // gateway will fail unless the majority of the replicas was allocated
@@ -171,7 +175,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(_flush("test1").setIndicesOptions(options),true);
         verify(segments("test1").setIndicesOptions(options), true);
         verify(stats("test1").setIndicesOptions(options), true);
-        verify(optimize("test1").setIndicesOptions(options), true);
+        verify(forceMerge("test1").setIndicesOptions(options), true);
         verify(refresh("test1").setIndicesOptions(options), true);
         verify(validateQuery("test1").setIndicesOptions(options), true);
         verify(aliasExists("test1").setIndicesOptions(options), true);
@@ -192,7 +196,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(_flush("test1").setIndicesOptions(options),false);
         verify(segments("test1").setIndicesOptions(options), false);
         verify(stats("test1").setIndicesOptions(options), false);
-        verify(optimize("test1").setIndicesOptions(options), false);
+        verify(forceMerge("test1").setIndicesOptions(options), false);
         verify(refresh("test1").setIndicesOptions(options), false);
         verify(validateQuery("test1").setIndicesOptions(options), false);
         verify(aliasExists("test1").setIndicesOptions(options), false);
@@ -216,7 +220,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(_flush("test1").setIndicesOptions(options),false);
         verify(segments("test1").setIndicesOptions(options), false);
         verify(stats("test1").setIndicesOptions(options), false);
-        verify(optimize("test1").setIndicesOptions(options), false);
+        verify(forceMerge("test1").setIndicesOptions(options), false);
         verify(refresh("test1").setIndicesOptions(options), false);
         verify(validateQuery("test1").setIndicesOptions(options), false);
         verify(aliasExists("test1").setIndicesOptions(options), false);
@@ -231,7 +235,8 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(getSettings("test1").setIndicesOptions(options), false);
     }
 
-    public void testSpecifiedIndexUnavailableSingleIndex() throws Exception {
+    @Test
+    public void testSpecifiedIndexUnavailable_singleIndex() throws Exception {
         IndicesOptions options = IndicesOptions.strictExpandOpenAndForbidClosed();
         verify(search("test1").setIndicesOptions(options), true);
         verify(msearch(options, "test1"), true);
@@ -239,7 +244,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(_flush("test1").setIndicesOptions(options),true);
         verify(segments("test1").setIndicesOptions(options), true);
         verify(stats("test1").setIndicesOptions(options), true);
-        verify(optimize("test1").setIndicesOptions(options), true);
+        verify(forceMerge("test1").setIndicesOptions(options), true);
         verify(refresh("test1").setIndicesOptions(options), true);
         verify(validateQuery("test1").setIndicesOptions(options), true);
         verify(aliasExists("test1").setIndicesOptions(options), true);
@@ -259,7 +264,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(_flush("test1").setIndicesOptions(options),false);
         verify(segments("test1").setIndicesOptions(options), false);
         verify(stats("test1").setIndicesOptions(options), false);
-        verify(optimize("test1").setIndicesOptions(options), false);
+        verify(forceMerge("test1").setIndicesOptions(options), false);
         verify(refresh("test1").setIndicesOptions(options), false);
         verify(validateQuery("test1").setIndicesOptions(options), false);
         verify(aliasExists("test1").setIndicesOptions(options), false);
@@ -282,7 +287,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(_flush("test1").setIndicesOptions(options),false);
         verify(segments("test1").setIndicesOptions(options), false);
         verify(stats("test1").setIndicesOptions(options), false);
-        verify(optimize("test1").setIndicesOptions(options), false);
+        verify(forceMerge("test1").setIndicesOptions(options), false);
         verify(refresh("test1").setIndicesOptions(options), false);
         verify(validateQuery("test1").setIndicesOptions(options), false);
         verify(aliasExists("test1").setIndicesOptions(options), false);
@@ -296,7 +301,8 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(getSettings("test1").setIndicesOptions(options), false);
     }
 
-    public void testSpecifiedIndexUnavailableSnapshotRestore() throws Exception {
+    @Test
+    public void testSpecifiedIndexUnavailable_snapshotRestore() throws Exception {
         createIndex("test1");
         ensureGreen("test1");
         waitForRelocation();
@@ -326,6 +332,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(restore("snap3", "test1", "test2").setIndicesOptions(options), false);
     }
 
+    @Test
     public void testWildcardBehaviour() throws Exception {
         // Verify defaults for wildcards, when specifying no indices (*, _all, /)
         String[] indices = Strings.EMPTY_ARRAY;
@@ -335,7 +342,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(_flush(indices),false);
         verify(segments(indices), false);
         verify(stats(indices), false);
-        verify(optimize(indices), false);
+        verify(forceMerge(indices), false);
         verify(refresh(indices), false);
         verify(validateQuery(indices), true);
         verify(aliasExists(indices), false);
@@ -357,7 +364,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(_flush(indices).setIndicesOptions(options),false);
         verify(segments(indices).setIndicesOptions(options), false);
         verify(stats(indices).setIndicesOptions(options), false);
-        verify(optimize(indices).setIndicesOptions(options), false);
+        verify(forceMerge(indices).setIndicesOptions(options), false);
         verify(refresh(indices).setIndicesOptions(options), false);
         verify(validateQuery(indices).setIndicesOptions(options), false);
         verify(aliasExists(indices).setIndicesOptions(options), false);
@@ -382,7 +389,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(_flush(indices),false);
         verify(segments(indices), false);
         verify(stats(indices), false);
-        verify(optimize(indices), false);
+        verify(forceMerge(indices), false);
         verify(refresh(indices), false);
         verify(validateQuery(indices), false);
         verify(aliasExists(indices), false);
@@ -404,7 +411,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(_flush(indices),false);
         verify(segments(indices), false);
         verify(stats(indices), false);
-        verify(optimize(indices), false);
+        verify(forceMerge(indices), false);
         verify(refresh(indices), false);
         verify(validateQuery(indices), true);
         verify(aliasExists(indices), false);
@@ -426,7 +433,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(_flush(indices).setIndicesOptions(options),false);
         verify(segments(indices).setIndicesOptions(options), false);
         verify(stats(indices).setIndicesOptions(options), false);
-        verify(optimize(indices).setIndicesOptions(options), false);
+        verify(forceMerge(indices).setIndicesOptions(options), false);
         verify(refresh(indices).setIndicesOptions(options), false);
         verify(validateQuery(indices).setIndicesOptions(options), false);
         verify(aliasExists(indices).setIndicesOptions(options), false);
@@ -441,7 +448,8 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(getSettings(indices).setIndicesOptions(options), false);
     }
 
-    public void testWildcardBehaviourSnapshotRestore() throws Exception {
+    @Test
+    public void testWildcardBehaviour_snapshotRestore() throws Exception {
         createIndex("foobar");
         ensureGreen("foobar");
         waitForRelocation();
@@ -472,7 +480,8 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(restore("snap3", "foo*", "baz*").setIndicesOptions(options), true);
     }
 
-    public void testAllMissingLenient() throws Exception {
+    @Test
+    public void testAllMissing_lenient() throws Exception {
         createIndex("test1");
         client().prepareIndex("test1", "type", "1").setSource("k", "v").setRefresh(true).execute().actionGet();
         SearchResponse response = client().prepareSearch("test2")
@@ -494,7 +503,8 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         assertHitCount(response, 1l);
     }
 
-    public void testAllMissingStrict() throws Exception {
+    @Test
+    public void testAllMissing_strict() throws Exception {
         createIndex("test1");
         ensureYellow();
         try {
@@ -517,8 +527,9 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         client().prepareSearch().setQuery(matchAllQuery()).execute().actionGet();
     }
 
+    @Test
     // For now don't handle closed indices
-    public void testCloseApiSpecifiedIndices() throws Exception {
+    public void testCloseApi_specifiedIndices() throws Exception {
         createIndex("test1", "test2");
         ensureGreen();
         verify(search("test1", "test2"), false);
@@ -534,7 +545,8 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(search("t*"), false);
     }
 
-    public void testCloseApiWildcards() throws Exception {
+    @Test
+    public void testCloseApi_wildcards() throws Exception {
         createIndex("foo", "foobar", "bar", "barbaz");
         ensureGreen();
 
@@ -550,6 +562,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         verify(client().admin().indices().prepareOpen("_all"), true);
     }
 
+    @Test
     public void testDeleteIndex() throws Exception {
         createIndex("foobar");
         ensureYellow();
@@ -560,7 +573,8 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         assertThat(client().admin().indices().prepareExists("foobar").get().isExists(), equalTo(false));
     }
 
-    public void testDeleteIndexWildcard() throws Exception {
+    @Test
+    public void testDeleteIndex_wildcard() throws Exception {
         verify(client().admin().indices().prepareDelete("_all"), false);
 
         createIndex("foo", "foobar", "bar", "barbaz");
@@ -581,6 +595,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         assertThat(client().admin().indices().prepareExists("barbaz").get().isExists(), equalTo(false));
     }
 
+    @Test
     public void testPutWarmer() throws Exception {
         createIndex("foobar");
         ensureYellow();
@@ -589,7 +604,8 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
 
     }
 
-    public void testPutWarmerWildcard() throws Exception {
+    @Test
+    public void testPutWarmer_wildcard() throws Exception {
         createIndex("foo", "foobar", "bar", "barbaz");
         ensureYellow();
 
@@ -609,6 +625,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testPutAlias() throws Exception {
         createIndex("foobar");
         ensureYellow();
@@ -617,7 +634,8 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
 
     }
 
-    public void testPutAliasWildcard() throws Exception {
+    @Test
+    public void testPutAlias_wildcard() throws Exception {
         createIndex("foo", "foobar", "bar", "barbaz");
         ensureYellow();
 
@@ -635,6 +653,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testDeleteWarmer() throws Exception {
         SearchSourceBuilder source = new SearchSourceBuilder();
         source.query(QueryBuilders.matchAllQuery());
@@ -648,7 +667,8 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         assertThat(client().admin().indices().prepareGetWarmers("foobar").setWarmers("test1").get().getWarmers().size(), equalTo(0));
     }
 
-    public void testDeleteWarmerWildcard() throws Exception {
+    @Test
+    public void testDeleteWarmer_wildcard() throws Exception {
         verify(client().admin().indices().prepareDeleteWarmer().setIndices("_all").setNames("test1"), true);
 
         SearchSourceBuilder source = new SearchSourceBuilder();
@@ -675,6 +695,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         assertThat(client().admin().indices().prepareGetWarmers("barbaz").setWarmers("test1").get().getWarmers().size(), equalTo(0));
     }
 
+    @Test
     public void testPutMapping() throws Exception {
         verify(client().admin().indices().preparePutMapping("foo").setType("type1").setSource("field", "type=string"), true);
         verify(client().admin().indices().preparePutMapping("_all").setType("type1").setSource("field", "type=string"), true);
@@ -706,6 +727,7 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         assertThat(client().admin().indices().prepareGetMappings("barbaz").get().mappings().get("barbaz").get("type4"), notNullValue());
     }
 
+    @Test
     public void testUpdateSettings() throws Exception {
         verify(client().admin().indices().prepareUpdateSettings("foo").setSettings(Settings.builder().put("a", "b")), true);
         verify(client().admin().indices().prepareUpdateSettings("_all").setSettings(Settings.builder().put("a", "b")), true);
@@ -766,8 +788,8 @@ public class IndicesOptionsIntegrationIT extends ESIntegTestCase {
         return client().admin().indices().prepareStats(indices);
     }
 
-    private static OptimizeRequestBuilder optimize(String... indices) {
-        return client().admin().indices().prepareOptimize(indices);
+    private static ForceMergeRequestBuilder forceMerge(String... indices) {
+        return client().admin().indices().prepareForceMerge(indices);
     }
 
     private static RefreshRequestBuilder refresh(String... indices) {
diff --git a/core/src/test/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzerIntegrationIT.java b/core/src/test/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzerIntegrationIT.java
index 4130cf5..208922b 100644
--- a/core/src/test/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzerIntegrationIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzerIntegrationIT.java
@@ -27,6 +27,7 @@ import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESBackcompatTestCase;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -44,11 +45,13 @@ import static org.hamcrest.Matchers.notNullValue;
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.SUITE)
 @ESBackcompatTestCase.CompatibilityVersion(version = Version.V_1_2_0_ID) // we throw an exception if we create an index with _field_names that is 1.3
 public class PreBuiltAnalyzerIntegrationIT extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return pluginList(DummyAnalysisPlugin.class);
     }
 
+    @Test
     public void testThatPreBuiltAnalyzersAreNotClosedOnIndexClose() throws Exception {
         Map<PreBuiltAnalyzers, List<Version>> loadedAnalyzers = new HashMap<>();
         List<String> indexNames = new ArrayList<>();
@@ -118,6 +121,7 @@ public class PreBuiltAnalyzerIntegrationIT extends ESIntegTestCase {
      * Test case for #5030: Upgrading analysis plugins fails
      * See https://github.com/elasticsearch/elasticsearch/issues/5030
      */
+    @Test
     public void testThatPluginAnalyzersCanBeUpdated() throws Exception {
         final XContentBuilder mapping = jsonBuilder().startObject()
             .startObject("type")
diff --git a/core/src/test/java/org/elasticsearch/indices/analyze/AnalyzeActionIT.java b/core/src/test/java/org/elasticsearch/indices/analyze/AnalyzeActionIT.java
index 9f4f2b5..a9de21b 100644
--- a/core/src/test/java/org/elasticsearch/indices/analyze/AnalyzeActionIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/analyze/AnalyzeActionIT.java
@@ -24,25 +24,24 @@ import org.elasticsearch.action.admin.indices.analyze.AnalyzeRequestBuilder;
 import org.elasticsearch.action.admin.indices.analyze.AnalyzeResponse;
 import org.elasticsearch.common.bytes.BytesArray;
 import org.elasticsearch.common.bytes.BytesReference;
-import org.elasticsearch.common.xcontent.XContentFactory;
+import org.elasticsearch.common.xcontent.*;
 import org.elasticsearch.rest.action.admin.indices.analyze.RestAnalyzeAction;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.hasSize;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.startsWith;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class AnalyzeActionIT extends ESIntegTestCase {
-    public void testSimpleAnalyzerTests() throws Exception {
+    
+    @Test
+    public void simpleAnalyzerTests() throws Exception {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias")));
         ensureGreen();
 
@@ -71,8 +70,9 @@ public class AnalyzeActionIT extends ESIntegTestCase {
             assertThat(token.getPosition(), equalTo(3));
         }
     }
-
-    public void testAnalyzeNumericField() throws IOException {
+    
+    @Test
+    public void analyzeNumericField() throws IOException {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias")).addMapping("test", "long", "type=long", "double", "type=double"));
         ensureGreen("test");
 
@@ -90,7 +90,9 @@ public class AnalyzeActionIT extends ESIntegTestCase {
         }
     }
 
-    public void testAnalyzeWithNoIndex() throws Exception {
+    @Test
+    public void analyzeWithNoIndex() throws Exception {
+
         AnalyzeResponse analyzeResponse = client().admin().indices().prepareAnalyze("THIS IS A TEST").setAnalyzer("simple").get();
         assertThat(analyzeResponse.getTokens().size(), equalTo(4));
 
@@ -118,7 +120,9 @@ public class AnalyzeActionIT extends ESIntegTestCase {
 
     }
 
-    public void testAnalyzeWithCharFilters() throws Exception {
+    @Test
+    public void analyzeWithCharFilters() throws Exception {
+
         assertAcked(prepareCreate("test").addAlias(new Alias("alias"))
                 .setSettings(settingsBuilder().put(indexSettings())
                         .put("index.analysis.char_filter.custom_mapping.type", "mapping")
@@ -148,7 +152,8 @@ public class AnalyzeActionIT extends ESIntegTestCase {
         assertThat(token.getTerm(), equalTo("fish"));
     }
 
-    public void testAnalyzerWithFieldOrTypeTests() throws Exception {
+    @Test
+    public void analyzerWithFieldOrTypeTests() throws Exception {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias")));
         ensureGreen();
 
@@ -168,7 +173,7 @@ public class AnalyzeActionIT extends ESIntegTestCase {
         }
     }
 
-    // issue #5974
+    @Test // issue #5974
     public void testThatStandardAndDefaultAnalyzersAreSame() throws Exception {
         AnalyzeResponse response = client().admin().indices().prepareAnalyze("this is a test").setAnalyzer("standard").get();
         assertTokens(response, "this", "is", "a", "test");
@@ -191,6 +196,7 @@ public class AnalyzeActionIT extends ESIntegTestCase {
         return randomBoolean() ? "test" : "alias";
     }
 
+    @Test
     public void testParseXContentForAnalyzeReuqest() throws Exception {
         BytesReference content =  XContentFactory.jsonBuilder()
             .startObject()
@@ -209,6 +215,7 @@ public class AnalyzeActionIT extends ESIntegTestCase {
         assertThat(analyzeRequest.tokenFilters(), equalTo(new String[]{"lowercase"}));
     }
 
+    @Test
     public void testParseXContentForAnalyzeRequestWithInvalidJsonThrowsException() throws Exception {
         AnalyzeRequest analyzeRequest = new AnalyzeRequest("for test");
 
@@ -221,6 +228,7 @@ public class AnalyzeActionIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testParseXContentForAnalyzeRequestWithUnknownParamThrowsException() throws Exception {
         AnalyzeRequest analyzeRequest = new AnalyzeRequest("for test");
         BytesReference invalidContent =XContentFactory.jsonBuilder()
@@ -238,7 +246,9 @@ public class AnalyzeActionIT extends ESIntegTestCase {
         }
     }
 
-    public void testAnalyzerWithMultiValues() throws Exception {
+    @Test
+    public void analyzerWithMultiValues() throws Exception {
+
         assertAcked(prepareCreate("test").addAlias(new Alias("alias")));
         ensureGreen();
 
diff --git a/core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java b/core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java
index 722a4eb..96fc85a 100644
--- a/core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java
@@ -27,9 +27,9 @@ import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
-import static org.elasticsearch.indices.analysis.HunspellService.HUNSPELL_IGNORE_CASE;
-import static org.elasticsearch.indices.analysis.HunspellService.HUNSPELL_LAZY_LOAD;
+import static org.elasticsearch.indices.analysis.HunspellService.*;
 import static org.hamcrest.Matchers.notNullValue;
 
 /**
@@ -37,6 +37,8 @@ import static org.hamcrest.Matchers.notNullValue;
  */
 @ClusterScope(scope= Scope.TEST, numDataNodes=0)
 public class HunspellServiceIT extends ESIntegTestCase {
+
+    @Test
     public void testLocaleDirectoryWithNodeLevelConfig() throws Exception {
         Settings settings = Settings.settingsBuilder()
                 .put("path.conf", getDataPath("/indices/analyze/conf_dir"))
@@ -50,6 +52,7 @@ public class HunspellServiceIT extends ESIntegTestCase {
         assertIgnoreCase(true, dictionary);
     }
 
+    @Test
     public void testLocaleDirectoryWithLocaleSpecificConfig() throws Exception {
         Settings settings = Settings.settingsBuilder()
                 .put("path.conf", getDataPath("/indices/analyze/conf_dir"))
@@ -72,6 +75,7 @@ public class HunspellServiceIT extends ESIntegTestCase {
         assertIgnoreCase(true, dictionary);
     }
 
+    @Test
     public void testDicWithNoAff() throws Exception {
         Settings settings = Settings.settingsBuilder()
                 .put("path.conf", getDataPath("/indices/analyze/no_aff_conf_dir"))
@@ -90,6 +94,7 @@ public class HunspellServiceIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testDicWithTwoAffs() throws Exception {
         Settings settings = Settings.settingsBuilder()
                 .put("path.conf", getDataPath("/indices/analyze/two_aff_conf_dir"))
diff --git a/core/src/test/java/org/elasticsearch/indices/cache/query/terms/TermsLookupTests.java b/core/src/test/java/org/elasticsearch/indices/cache/query/terms/TermsLookupTests.java
index bf03949..6474547 100644
--- a/core/src/test/java/org/elasticsearch/indices/cache/query/terms/TermsLookupTests.java
+++ b/core/src/test/java/org/elasticsearch/indices/cache/query/terms/TermsLookupTests.java
@@ -22,12 +22,13 @@ package org.elasticsearch.indices.cache.query.terms;
 import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
-import static org.hamcrest.Matchers.containsString;
-
 public class TermsLookupTests extends ESTestCase {
+
+    @Test
     public void testTermsLookup() {
         String index = randomAsciiOfLengthBetween(1, 10);
         String type = randomAsciiOfLengthBetween(1, 10);
@@ -43,28 +44,23 @@ public class TermsLookupTests extends ESTestCase {
         assertEquals(routing, termsLookup.routing());
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testIllegalArguments() {
         String type = randomAsciiOfLength(5);
         String id = randomAsciiOfLength(5);
         String path = randomAsciiOfLength(5);
         switch (randomIntBetween(0, 2)) {
         case 0:
-            type = null;
-            break;
+            type = null; break;
         case 1:
-            id = null;
-            break;
+            id = null; break;
         case 2:
-            path = null;
-            break;
-        }
-        try {
-            new TermsLookup(null, type, id, path);
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("[terms] query lookup element requires specifying"));
+            path = null; break;
         }
+        new TermsLookup(null, type, id, path);
     }
 
+    @Test
     public void testSerialization() throws IOException {
         TermsLookup termsLookup = randomTermsLookup();
         try (BytesStreamOutput output = new BytesStreamOutput()) {
diff --git a/core/src/test/java/org/elasticsearch/indices/exists/indices/IndicesExistsIT.java b/core/src/test/java/org/elasticsearch/indices/exists/indices/IndicesExistsIT.java
index 38bea16..199f4b6 100644
--- a/core/src/test/java/org/elasticsearch/indices/exists/indices/IndicesExistsIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/exists/indices/IndicesExistsIT.java
@@ -23,15 +23,16 @@ import org.elasticsearch.action.support.IndicesOptions;
 import org.elasticsearch.cluster.block.ClusterBlockException;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 import static org.hamcrest.Matchers.equalTo;
 
 public class IndicesExistsIT extends ESIntegTestCase {
+
+    @Test
     // Indices exists never throws IndexMissingException, the indices options control its behaviour (return true or false)
     public void testIndicesExists() throws Exception {
         assertThat(client().admin().indices().prepareExists("foo").get().isExists(), equalTo(false));
@@ -50,6 +51,7 @@ public class IndicesExistsIT extends ESIntegTestCase {
         assertThat(client().admin().indices().prepareExists("_all").get().isExists(), equalTo(true));
     }
 
+    @Test
     public void testIndicesExistsWithBlocks() {
         createIndex("ro");
         ensureYellow();
diff --git a/core/src/test/java/org/elasticsearch/indices/exists/types/TypesExistsIT.java b/core/src/test/java/org/elasticsearch/indices/exists/types/TypesExistsIT.java
index 407ee6f..ffb2e2e 100644
--- a/core/src/test/java/org/elasticsearch/indices/exists/types/TypesExistsIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/exists/types/TypesExistsIT.java
@@ -24,19 +24,20 @@ import org.elasticsearch.client.Client;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.index.IndexNotFoundException;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Arrays;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
 import static org.hamcrest.Matchers.equalTo;
 
 public class TypesExistsIT extends ESIntegTestCase {
+
+    @Test
     public void testSimple() throws Exception {
         Client client = client();
         client.admin().indices().prepareCreate("test1")
@@ -75,6 +76,7 @@ public class TypesExistsIT extends ESIntegTestCase {
         assertThat(response.isExists(), equalTo(false));
     }
 
+    @Test
     public void testTypesExistsWithBlocks() throws IOException {
         assertAcked(prepareCreate("ro").addMapping("type1", jsonBuilder().startObject().startObject("type1").endObject().endObject()));
         ensureGreen("ro");
diff --git a/core/src/test/java/org/elasticsearch/indices/flush/FlushIT.java b/core/src/test/java/org/elasticsearch/indices/flush/FlushIT.java
index aa8c9f1..5e0fde7 100644
--- a/core/src/test/java/org/elasticsearch/indices/flush/FlushIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/flush/FlushIT.java
@@ -31,6 +31,7 @@ import org.elasticsearch.index.engine.Engine;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.junit.annotations.TestLogging;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Arrays;
@@ -46,6 +47,8 @@ import static org.hamcrest.Matchers.emptyIterable;
 import static org.hamcrest.Matchers.equalTo;
 
 public class FlushIT extends ESIntegTestCase {
+
+    @Test
     public void testWaitIfOngoing() throws InterruptedException {
         createIndex("test");
         ensureGreen("test");
@@ -207,6 +210,7 @@ public class FlushIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testUnallocatedShardsDoesNotHang() throws InterruptedException {
         //  create an index but disallow allocation
         prepareCreate("test").setSettings(Settings.builder().put("index.routing.allocation.include._name", "nonexistent")).get();
@@ -218,4 +222,5 @@ public class FlushIT extends ESIntegTestCase {
         assertThat(shardsResult.size(), equalTo(numShards));
         assertThat(shardsResult.get(0).failureReason(), equalTo("no active shards"));
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/indices/mapping/ConcurrentDynamicTemplateIT.java b/core/src/test/java/org/elasticsearch/indices/mapping/ConcurrentDynamicTemplateIT.java
index 0946d51..f9d597c 100644
--- a/core/src/test/java/org/elasticsearch/indices/mapping/ConcurrentDynamicTemplateIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/mapping/ConcurrentDynamicTemplateIT.java
@@ -24,6 +24,7 @@ import org.elasticsearch.action.ActionListener;
 import org.elasticsearch.action.index.IndexResponse;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.HashMap;
 import java.util.List;
@@ -31,15 +32,17 @@ import java.util.Map;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CountDownLatch;
 
+import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
 import static org.hamcrest.Matchers.emptyIterable;
 
 @ESIntegTestCase.ClusterScope(randomDynamicTemplates = false) // this test takes a long time to delete the idx if all fields are eager loading
 public class ConcurrentDynamicTemplateIT extends ESIntegTestCase {
+
     private final String mappingType = "test-mapping";
 
-    // see #3544
+    @Test // see #3544
     public void testConcurrentDynamicMapping() throws Exception {
         final String fieldName = "field";
         final String mapping = "{ \"" + mappingType + "\": {" +
diff --git a/core/src/test/java/org/elasticsearch/indices/mapping/SimpleGetMappingsIT.java b/core/src/test/java/org/elasticsearch/indices/mapping/SimpleGetMappingsIT.java
index 2f4970e..504d9a5 100644
--- a/core/src/test/java/org/elasticsearch/indices/mapping/SimpleGetMappingsIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/mapping/SimpleGetMappingsIT.java
@@ -25,15 +25,12 @@ import org.elasticsearch.common.Priority;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Arrays;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
 import static org.hamcrest.Matchers.equalTo;
@@ -44,20 +41,25 @@ import static org.hamcrest.Matchers.notNullValue;
  */
 @ClusterScope(randomDynamicTemplates = false)
 public class SimpleGetMappingsIT extends ESIntegTestCase {
-    public void testGetMappingsWhereThereAreNone() {
+
+    @Test
+    public void getMappingsWhereThereAreNone() {
         createIndex("index");
         GetMappingsResponse response = client().admin().indices().prepareGetMappings().execute().actionGet();
         assertThat(response.mappings().containsKey("index"), equalTo(true));
         assertThat(response.mappings().get("index").size(), equalTo(0));
     }
 
+
     private XContentBuilder getMappingForType(String type) throws IOException {
         return jsonBuilder().startObject().startObject(type).startObject("properties")
                 .startObject("field1").field("type", "string").endObject()
                 .endObject().endObject().endObject();
     }
 
-    public void testSimpleGetMappings() throws Exception {
+
+    @Test
+    public void simpleGetMappings() throws Exception {
         client().admin().indices().prepareCreate("indexa")
                 .addMapping("typeA", getMappingForType("typeA"))
                 .addMapping("typeB", getMappingForType("typeB"))
@@ -144,6 +146,7 @@ public class SimpleGetMappingsIT extends ESIntegTestCase {
         assertThat(response.mappings().get("indexb").get("Btype"), notNullValue());
     }
 
+    @Test
     public void testGetMappingsWithBlocks() throws IOException {
         client().admin().indices().prepareCreate("test")
                 .addMapping("typeA", getMappingForType("typeA"))
diff --git a/core/src/test/java/org/elasticsearch/indices/mapping/UpdateMappingIntegrationIT.java b/core/src/test/java/org/elasticsearch/indices/mapping/UpdateMappingIntegrationIT.java
index 305688b..b706db0 100644
--- a/core/src/test/java/org/elasticsearch/indices/mapping/UpdateMappingIntegrationIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/mapping/UpdateMappingIntegrationIT.java
@@ -35,6 +35,7 @@ import org.elasticsearch.index.mapper.MergeMappingException;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -43,23 +44,16 @@ import java.util.Map;
 import java.util.concurrent.CyclicBarrier;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertThrows;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.hasEntry;
-import static org.hamcrest.Matchers.hasKey;
-import static org.hamcrest.Matchers.not;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
+import static org.hamcrest.Matchers.*;
 
 @ClusterScope(randomDynamicTemplates = false)
 public class UpdateMappingIntegrationIT extends ESIntegTestCase {
-    public void testDynamicUpdates() throws Exception {
+
+    @Test
+    public void dynamicUpdates() throws Exception {
         client().admin().indices().prepareCreate("test")
                 .setSettings(
                         settingsBuilder()
@@ -93,7 +87,8 @@ public class UpdateMappingIntegrationIT extends ESIntegTestCase {
         }
     }
 
-    public void testUpdateMappingWithoutType() throws Exception {
+    @Test
+    public void updateMappingWithoutType() throws Exception {
         client().admin().indices().prepareCreate("test")
                 .setSettings(
                         settingsBuilder()
@@ -114,7 +109,8 @@ public class UpdateMappingIntegrationIT extends ESIntegTestCase {
                 equalTo("{\"doc\":{\"properties\":{\"body\":{\"type\":\"string\"},\"date\":{\"type\":\"integer\"}}}}"));
     }
 
-    public void testUpdateMappingWithoutTypeMultiObjects() throws Exception {
+    @Test
+    public void updateMappingWithoutTypeMultiObjects() throws Exception {
         client().admin().indices().prepareCreate("test")
                 .setSettings(
                         settingsBuilder()
@@ -134,7 +130,9 @@ public class UpdateMappingIntegrationIT extends ESIntegTestCase {
                 equalTo("{\"doc\":{\"properties\":{\"date\":{\"type\":\"integer\"}}}}"));
     }
 
-    public void testUpdateMappingWithConflicts() throws Exception {
+    @Test(expected = MergeMappingException.class)
+    public void updateMappingWithConflicts() throws Exception {
+
         client().admin().indices().prepareCreate("test")
                 .setSettings(
                         settingsBuilder()
@@ -144,33 +142,29 @@ public class UpdateMappingIntegrationIT extends ESIntegTestCase {
                 .execute().actionGet();
         client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();
 
-        try {
-            client().admin().indices().preparePutMapping("test").setType("type")
-                    .setSource("{\"type\":{\"properties\":{\"body\":{\"type\":\"integer\"}}}}").execute().actionGet();
-            fail("Expected MergeMappingException");
-        } catch (MergeMappingException e) {
-            assertThat(e.getMessage(), containsString("mapper [body] of different type"));
-        }
+        PutMappingResponse putMappingResponse = client().admin().indices().preparePutMapping("test").setType("type")
+                .setSource("{\"type\":{\"properties\":{\"body\":{\"type\":\"integer\"}}}}")
+                .execute().actionGet();
+
+        assertThat(putMappingResponse.isAcknowledged(), equalTo(true));
     }
 
-    public void testUpdateMappingWithNormsConflicts() throws Exception {
+    @Test(expected = MergeMappingException.class)
+    public void updateMappingWithNormsConflicts() throws Exception {
         client().admin().indices().prepareCreate("test")
                 .addMapping("type", "{\"type\":{\"properties\":{\"body\":{\"type\":\"string\", \"norms\": { \"enabled\": false }}}}}")
                 .execute().actionGet();
-        try {
-            client().admin().indices().preparePutMapping("test").setType("type")
-                    .setSource("{\"type\":{\"properties\":{\"body\":{\"type\":\"string\", \"norms\": { \"enabled\": true }}}}}").execute()
-                    .actionGet();
-            fail("Expected MergeMappingException");
-        } catch (MergeMappingException e) {
-            assertThat(e.getMessage(), containsString("mapper [body] has different [omit_norms]"));
-        }
+        PutMappingResponse putMappingResponse = client().admin().indices().preparePutMapping("test").setType("type")
+                .setSource("{\"type\":{\"properties\":{\"body\":{\"type\":\"string\", \"norms\": { \"enabled\": true }}}}}")
+                .execute().actionGet();
     }
 
     /*
     Second regression test for https://github.com/elasticsearch/elasticsearch/issues/3381
      */
-    public void testUpdateMappingNoChanges() throws Exception {
+    @Test
+    public void updateMappingNoChanges() throws Exception {
+
         client().admin().indices().prepareCreate("test")
                 .setSettings(
                         settingsBuilder()
@@ -189,7 +183,9 @@ public class UpdateMappingIntegrationIT extends ESIntegTestCase {
     }
 
     @SuppressWarnings("unchecked")
-    public void testUpdateDefaultMappingSettings() throws Exception {
+    @Test
+    public void updateDefaultMappingSettings() throws Exception {
+
         logger.info("Creating index with _default_ mappings");
         client().admin().indices().prepareCreate("test").addMapping(MapperService.DEFAULT_MAPPING,
                 JsonXContent.contentBuilder().startObject().startObject(MapperService.DEFAULT_MAPPING)
@@ -249,7 +245,8 @@ public class UpdateMappingIntegrationIT extends ESIntegTestCase {
 
     }
 
-    public void testUpdateMappingConcurrently() throws Throwable {
+    @Test
+    public void updateMappingConcurrently() throws Throwable {
         createIndex("test1", "test2");
 
         // This is important. The test assumes all nodes are aware of all indices. Due to initializing shard throttling
@@ -315,6 +312,7 @@ public class UpdateMappingIntegrationIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testPutMappingsWithBlocks() throws Exception {
         createIndex("test");
         ensureGreen();
diff --git a/core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerIT.java b/core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerIT.java
index 4013031..e14cc22 100644
--- a/core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerIT.java
@@ -24,17 +24,21 @@ import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.ByteSizeValue;
 import org.elasticsearch.common.util.concurrent.EsExecutors;
+import org.elasticsearch.index.engine.EngineConfig;
 import org.elasticsearch.index.shard.IndexShard;
 import org.elasticsearch.node.internal.InternalSettingsPreparer;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0)
 public class IndexingMemoryControllerIT extends ESIntegTestCase {
+
     private long getIWBufferSize(String indexName) {
         return client().admin().indices().prepareStats(indexName).get().getTotal().getSegments().getIndexWriterMaxMemoryInBytes();
     }
 
+    @Test
     public void testIndexBufferPushedToEngine() throws InterruptedException {
         createNode(Settings.builder().put(IndexingMemoryController.SHARD_INACTIVE_TIME_SETTING, "100000h",
                                           IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING, "32mb",
@@ -64,6 +68,7 @@ public class IndexingMemoryControllerIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testInactivePushedToShard() throws InterruptedException {
         createNode(Settings.builder().put(IndexingMemoryController.SHARD_INACTIVE_TIME_SETTING, "100ms",
                 IndexingMemoryController.SHARD_INACTIVE_INTERVAL_TIME_SETTING, "100ms",
diff --git a/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerNoopIT.java b/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerNoopIT.java
index 3398839..4992b9f 100644
--- a/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerNoopIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerNoopIT.java
@@ -25,6 +25,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.indices.breaker.HierarchyCircuitBreakerService;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -38,6 +39,7 @@ import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcke
 /** Tests for the noop breakers, which are non-dynamic settings */
 @ESIntegTestCase.ClusterScope(scope= ESIntegTestCase.Scope.SUITE, numDataNodes=0)
 public class CircuitBreakerNoopIT extends ESIntegTestCase {
+
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return Settings.builder()
@@ -50,6 +52,7 @@ public class CircuitBreakerNoopIT extends ESIntegTestCase {
                 .build();
     }
 
+    @Test
     public void testNoopRequestBreaker() throws Exception {
         assertAcked(prepareCreate("cb-test", 1, settingsBuilder().put(SETTING_NUMBER_OF_REPLICAS, between(0, 1))));
         Client client = client();
@@ -67,6 +70,7 @@ public class CircuitBreakerNoopIT extends ESIntegTestCase {
         // no exception because the breaker is a noop
     }
 
+    @Test
     public void testNoopFielddataBreaker() throws Exception {
         assertAcked(prepareCreate("cb-test", 1, settingsBuilder().put(SETTING_NUMBER_OF_REPLICAS, between(0, 1))));
         Client client = client();
diff --git a/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceIT.java b/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceIT.java
index fcd94d9..4ffe636 100644
--- a/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceIT.java
@@ -38,6 +38,7 @@ import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -59,6 +60,7 @@ import static org.hamcrest.Matchers.greaterThanOrEqualTo;
  */
 @ClusterScope(scope = TEST, randomDynamicTemplates = false)
 public class CircuitBreakerServiceIT extends ESIntegTestCase {
+
     /** Reset all breaker settings back to their defaults */
     private void reset() {
         logger.info("--> resetting breaker settings");
@@ -98,6 +100,7 @@ public class CircuitBreakerServiceIT extends ESIntegTestCase {
         return false;
     }
 
+    @Test
     public void testMemoryBreaker() throws Exception {
         if (noopBreakerUsed()) {
             logger.info("--> noop breakers used, skipping test");
@@ -139,6 +142,7 @@ public class CircuitBreakerServiceIT extends ESIntegTestCase {
         assertThat(breaks, greaterThanOrEqualTo(1));
     }
 
+    @Test
     public void testRamAccountingTermsEnum() throws Exception {
         if (noopBreakerUsed()) {
             logger.info("--> noop breakers used, skipping test");
@@ -192,6 +196,7 @@ public class CircuitBreakerServiceIT extends ESIntegTestCase {
      * Test that a breaker correctly redistributes to a different breaker, in
      * this case, the fielddata breaker borrows space from the request breaker
      */
+    @Test
     public void testParentChecking() throws Exception {
         if (noopBreakerUsed()) {
             logger.info("--> noop breakers used, skipping test");
@@ -251,6 +256,7 @@ public class CircuitBreakerServiceIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testRequestBreaker() throws Exception {
         if (noopBreakerUsed()) {
             logger.info("--> noop breakers used, skipping test");
@@ -301,6 +307,7 @@ public class CircuitBreakerServiceIT extends ESIntegTestCase {
         }, 30, TimeUnit.SECONDS);
     }
 
+    @Test
     public void testCustomCircuitBreakerRegistration() throws Exception {
         Iterable<CircuitBreakerService> serviceIter = internalCluster().getInstances(CircuitBreakerService.class);
 
diff --git a/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerUnitTests.java b/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerUnitTests.java
index 741ea30..013bc71 100644
--- a/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerUnitTests.java
+++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerUnitTests.java
@@ -26,20 +26,20 @@ import org.elasticsearch.indices.breaker.CircuitBreakerService;
 import org.elasticsearch.indices.breaker.HierarchyCircuitBreakerService;
 import org.elasticsearch.node.settings.NodeSettingsService;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  * Unit tests for the circuit breaker
  */
 public class CircuitBreakerUnitTests extends ESTestCase {
+
     public static long pctBytes(String percentString) {
         return Settings.EMPTY.getAsMemory("", percentString).bytes();
     }
 
+    @Test
     public void testBreakerSettingsValidationWithValidSettings() {
         // parent: {:limit 70}, fd: {:limit 50}, request: {:limit 20}
         BreakerSettings fd = new BreakerSettings(CircuitBreaker.FIELDDATA, pctBytes("50%"), 1.0);
@@ -52,6 +52,7 @@ public class CircuitBreakerUnitTests extends ESTestCase {
         HierarchyCircuitBreakerService.validateSettings(new BreakerSettings[]{fd, request});
     }
 
+    @Test
     public void testBreakerSettingsValidationNegativeOverhead() {
         // parent: {:limit 70}, fd: {:limit 50}, request: {:limit 20}
         BreakerSettings fd = new BreakerSettings(CircuitBreaker.FIELDDATA, pctBytes("50%"), -0.1);
@@ -65,6 +66,7 @@ public class CircuitBreakerUnitTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testRegisterCustomBreaker() throws Exception {
         CircuitBreakerService service = new HierarchyCircuitBreakerService(Settings.EMPTY, new NodeSettingsService(Settings.EMPTY));
         String customName = "custom";
@@ -76,4 +78,5 @@ public class CircuitBreakerUnitTests extends ESTestCase {
         assertThat(breaker, instanceOf(CircuitBreaker.class));
         assertThat(breaker.getName(), is(customName));
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/indices/memory/breaker/RandomExceptionCircuitBreakerIT.java b/core/src/test/java/org/elasticsearch/indices/memory/breaker/RandomExceptionCircuitBreakerIT.java
index d9a114a..4f0bd60 100644
--- a/core/src/test/java/org/elasticsearch/indices/memory/breaker/RandomExceptionCircuitBreakerIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/RandomExceptionCircuitBreakerIT.java
@@ -41,6 +41,7 @@ import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.engine.MockEngineSupport;
 import org.elasticsearch.test.engine.MockEngineSupportModule;
 import org.elasticsearch.test.engine.ThrowingLeafReaderWrapper;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Arrays;
@@ -56,11 +57,13 @@ import static org.hamcrest.Matchers.equalTo;
  * Tests for the circuit breaker while random exceptions are happening
  */
 public class RandomExceptionCircuitBreakerIT extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return pluginList(RandomExceptionDirectoryReaderWrapper.TestPlugin.class);
     }
 
+    @Test
     public void testBreakerWithRandomExceptions() throws IOException, InterruptedException, ExecutionException {
         for (NodeStats node : client().admin().cluster().prepareNodesStats()
                 .clear().setBreaker(true).execute().actionGet().getNodes()) {
diff --git a/core/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java b/core/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java
index 883d04e..0bab80a 100644
--- a/core/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java
@@ -49,7 +49,6 @@ import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.snapshots.SnapshotState;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.InternalTestCluster;
 import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.elasticsearch.test.store.MockFSDirectoryService;
@@ -60,6 +59,7 @@ import org.elasticsearch.transport.TransportException;
 import org.elasticsearch.transport.TransportRequest;
 import org.elasticsearch.transport.TransportRequestOptions;
 import org.elasticsearch.transport.TransportService;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -70,6 +70,7 @@ import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
 import static org.hamcrest.Matchers.arrayWithSize;
@@ -157,7 +158,8 @@ public class IndexRecoveryIT extends ESIntegTestCase {
                 .get().isAcknowledged());
     }
 
-    public void testGatewayRecovery() throws Exception {
+    @Test
+    public void gatewayRecoveryTest() throws Exception {
         logger.info("--> start nodes");
         String node = internalCluster().startNode();
 
@@ -182,7 +184,8 @@ public class IndexRecoveryIT extends ESIntegTestCase {
         validateIndexRecoveryState(recoveryState.getIndex());
     }
 
-    public void testGatewayRecoveryTestActiveOnly() throws Exception {
+    @Test
+    public void gatewayRecoveryTestActiveOnly() throws Exception {
         logger.info("--> start nodes");
         internalCluster().startNode();
 
@@ -199,7 +202,8 @@ public class IndexRecoveryIT extends ESIntegTestCase {
         assertThat(recoveryStates.size(), equalTo(0));  // Should not expect any responses back
     }
 
-    public void testReplicaRecovery() throws Exception {
+    @Test
+    public void replicaRecoveryTest() throws Exception {
         logger.info("--> start node A");
         String nodeA = internalCluster().startNode();
 
@@ -239,8 +243,9 @@ public class IndexRecoveryIT extends ESIntegTestCase {
         validateIndexRecoveryState(nodeBRecoveryState.getIndex());
     }
 
+    @Test
     @TestLogging("indices.recovery:TRACE")
-    public void testRerouteRecovery() throws Exception {
+    public void rerouteRecoveryTest() throws Exception {
         logger.info("--> start node A");
         final String nodeA = internalCluster().startNode();
 
@@ -428,7 +433,8 @@ public class IndexRecoveryIT extends ESIntegTestCase {
         validateIndexRecoveryState(nodeCRecoveryStates.get(0).getIndex());
     }
 
-    public void testSnapshotRecovery() throws Exception {
+    @Test
+    public void snapshotRecoveryTest() throws Exception {
         logger.info("--> start node A");
         String nodeA = internalCluster().startNode();
 
@@ -522,7 +528,8 @@ public class IndexRecoveryIT extends ESIntegTestCase {
         assertThat(indexState.recoveredBytesPercent(), lessThanOrEqualTo(100.0f));
     }
 
-    public void testDisconnectsWhileRecovering() throws Exception {
+    @Test
+    public void disconnectsWhileRecoveringTest() throws Exception {
         final String indexName = "test";
         final Settings nodeSettings = Settings.builder()
                 .put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK, "100ms")
diff --git a/core/src/test/java/org/elasticsearch/indices/recovery/RecoveryStateTests.java b/core/src/test/java/org/elasticsearch/indices/recovery/RecoveryStateTests.java
index fea8f0f..3a571a6 100644
--- a/core/src/test/java/org/elasticsearch/indices/recovery/RecoveryStateTests.java
+++ b/core/src/test/java/org/elasticsearch/indices/recovery/RecoveryStateTests.java
@@ -26,14 +26,9 @@ import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.Streamable;
 import org.elasticsearch.common.transport.DummyTransportAddress;
 import org.elasticsearch.index.shard.ShardId;
-import org.elasticsearch.indices.recovery.RecoveryState.File;
-import org.elasticsearch.indices.recovery.RecoveryState.Index;
-import org.elasticsearch.indices.recovery.RecoveryState.Stage;
-import org.elasticsearch.indices.recovery.RecoveryState.Timer;
-import org.elasticsearch.indices.recovery.RecoveryState.Translog;
-import org.elasticsearch.indices.recovery.RecoveryState.Type;
-import org.elasticsearch.indices.recovery.RecoveryState.VerifyIndex;
+import org.elasticsearch.indices.recovery.RecoveryState.*;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -43,17 +38,12 @@ import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 
 import static org.elasticsearch.test.VersionUtils.randomVersion;
-import static org.hamcrest.Matchers.arrayContainingInAnyOrder;
-import static org.hamcrest.Matchers.closeTo;
-import static org.hamcrest.Matchers.either;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.lessThan;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
+import static org.hamcrest.Matchers.*;
 
 public class RecoveryStateTests extends ESTestCase {
+
     abstract class Streamer<T extends Streamable> extends Thread {
+
         private T lastRead;
         final private AtomicBoolean shouldStop;
         final private T source;
@@ -495,6 +485,7 @@ public class RecoveryStateTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testConcurrentModificationIndexFileDetailsMap() throws InterruptedException {
         final Index index = new Index();
         final AtomicBoolean stop = new AtomicBoolean(false);
@@ -505,7 +496,6 @@ public class RecoveryStateTests extends ESTestCase {
             }
         };
         Thread modifyThread = new Thread() {
-            @Override
             public void run() {
                 for (int i = 0; i < 1000; i++) {
                     index.addFileDetail(randomAsciiOfLength(10), 100, true);
@@ -520,6 +510,7 @@ public class RecoveryStateTests extends ESTestCase {
         assertThat(readWriteIndex.error.get(), equalTo(null));
     }
 
+    @Test
     public void testFileHashCodeAndEquals() {
         File f = new File("foo", randomIntBetween(0, 100), randomBoolean());
         File anotherFile = new File(f.name(), f.length(), f.reused());
@@ -535,5 +526,6 @@ public class RecoveryStateTests extends ESTestCase {
                assertFalse(f.equals(anotherFile));
             }
         }
+
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/indices/recovery/StartRecoveryRequestTests.java b/core/src/test/java/org/elasticsearch/indices/recovery/StartRecoveryRequestTests.java
index 4ad298e..4df8257 100644
--- a/core/src/test/java/org/elasticsearch/indices/recovery/StartRecoveryRequestTests.java
+++ b/core/src/test/java/org/elasticsearch/indices/recovery/StartRecoveryRequestTests.java
@@ -27,16 +27,20 @@ import org.elasticsearch.common.transport.LocalTransportAddress;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.index.store.Store;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 
 import static org.elasticsearch.test.VersionUtils.randomVersion;
 import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.nullValue;
 
 /**
  */
 public class StartRecoveryRequestTests extends ESTestCase {
+
+    @Test
     public void testSerialization() throws Exception {
         Version targetNodeVersion = randomVersion(random());
         StartRecoveryRequest outRequest = new StartRecoveryRequest(
diff --git a/core/src/test/java/org/elasticsearch/indices/settings/GetSettingsBlocksIT.java b/core/src/test/java/org/elasticsearch/indices/settings/GetSettingsBlocksIT.java
index a2a7c5f..357e87f 100644
--- a/core/src/test/java/org/elasticsearch/indices/settings/GetSettingsBlocksIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/settings/GetSettingsBlocksIT.java
@@ -22,19 +22,19 @@ package org.elasticsearch.indices.settings;
 import org.elasticsearch.action.admin.indices.settings.get.GetSettingsResponse;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 
 public class GetSettingsBlocksIT extends ESIntegTestCase {
+
+    @Test
     public void testGetSettingsWithBlocks() throws Exception {
         assertAcked(prepareCreate("test")
                 .setSettings(Settings.settingsBuilder()
diff --git a/core/src/test/java/org/elasticsearch/indices/settings/UpdateNumberOfReplicasIT.java b/core/src/test/java/org/elasticsearch/indices/settings/UpdateNumberOfReplicasIT.java
index 01c740c..4dd9b96 100644
--- a/core/src/test/java/org/elasticsearch/indices/settings/UpdateNumberOfReplicasIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/settings/UpdateNumberOfReplicasIT.java
@@ -26,6 +26,7 @@ import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.Priority;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -38,12 +39,14 @@ import static org.hamcrest.Matchers.equalTo;
 
 @ESIntegTestCase.ClusterScope(minNumDataNodes = 2)
 public class UpdateNumberOfReplicasIT extends ESIntegTestCase {
+
     @Override
     protected int maximumNumberOfReplicas() {
         return 1;
     }
 
-    public void testSimpleUpdateNumberOfReplicas() throws Exception {
+    @Test
+    public void simpleUpdateNumberOfReplicasIT() throws Exception {
         logger.info("Creating index test");
         assertAcked(prepareCreate("test", 2));
         logger.info("Running Cluster Health");
@@ -119,6 +122,7 @@ public class UpdateNumberOfReplicasIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testAutoExpandNumberOfReplicas0ToData() throws IOException {
         internalCluster().ensureAtMostNumDataNodes(2);
         logger.info("--> creating index test with auto expand replicas");
@@ -174,6 +178,7 @@ public class UpdateNumberOfReplicasIT extends ESIntegTestCase {
         assertThat(clusterHealth.getIndices().get("test").getActiveShards(), equalTo(numShards.numPrimaries));
     }
 
+    @Test
     public void testAutoExpandNumberReplicas1ToData() throws IOException {
         logger.info("--> creating index test with auto expand replicas");
         internalCluster().ensureAtMostNumDataNodes(2);
@@ -229,6 +234,7 @@ public class UpdateNumberOfReplicasIT extends ESIntegTestCase {
         assertThat(clusterHealth.getIndices().get("test").getActiveShards(), equalTo(numShards.numPrimaries));
     }
 
+    @Test
     public void testAutoExpandNumberReplicas2() {
         logger.info("--> creating index test with auto expand replicas set to 0-2");
         assertAcked(prepareCreate("test", 3, settingsBuilder().put("auto_expand_replicas", "0-2")));
@@ -261,6 +267,7 @@ public class UpdateNumberOfReplicasIT extends ESIntegTestCase {
         assertThat(clusterHealth.getIndices().get("test").getActiveShards(), equalTo(numShards.numPrimaries * 4));
     }
 
+    @Test
     public void testUpdateWithInvalidNumberOfReplicas() {
         createIndex("test");
         try {
diff --git a/core/src/test/java/org/elasticsearch/indices/settings/UpdateSettingsIT.java b/core/src/test/java/org/elasticsearch/indices/settings/UpdateSettingsIT.java
index afd3bde..6b0f19e 100644
--- a/core/src/test/java/org/elasticsearch/indices/settings/UpdateSettingsIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/settings/UpdateSettingsIT.java
@@ -23,6 +23,7 @@ import org.apache.log4j.AppenderSkeleton;
 import org.apache.log4j.Level;
 import org.apache.log4j.Logger;
 import org.apache.log4j.spi.LoggingEvent;
+import org.elasticsearch.index.shard.MergeSchedulerConfig;
 import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
 import org.elasticsearch.action.admin.cluster.node.stats.NodeStats;
 import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;
@@ -32,24 +33,21 @@ import org.elasticsearch.common.Priority;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.engine.VersionConflictEngineException;
 import org.elasticsearch.index.shard.MergePolicyConfig;
-import org.elasticsearch.index.shard.MergeSchedulerConfig;
 import org.elasticsearch.index.store.IndexStore;
 import org.elasticsearch.index.store.Store;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertThrows;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.nullValue;
 
 public class UpdateSettingsIT extends ESIntegTestCase {
+
+    @Test
     public void testOpenCloseUpdateSettings() throws Exception {
         createIndex("test");
         try {
@@ -121,6 +119,7 @@ public class UpdateSettingsIT extends ESIntegTestCase {
         assertThat(getSettingsResponse.getSetting("test", "index.cache.filter.type"), equalTo("none"));
     }
 
+    @Test
     public void testEngineGCDeletesSetting() throws InterruptedException {
         createIndex("test");
         client().prepareIndex("test", "type", "1").setSource("f", 1).get(); // set version to 1
@@ -138,7 +137,9 @@ public class UpdateSettingsIT extends ESIntegTestCase {
     }
 
     // #6626: make sure we can update throttle settings and the changes take effect
+    @Test
     public void testUpdateThrottleSettings() {
+
         // No throttling at first, only 1 non-replicated shard, force lots of merging:
         assertAcked(prepareCreate("test")
                     .setSettings(Settings.builder()
@@ -213,7 +214,7 @@ public class UpdateSettingsIT extends ESIntegTestCase {
         }
 
         logger.info("test: disable merge throttling");
-
+        
         // Now updates settings to disable merge throttling
         client()
             .admin()
@@ -225,7 +226,7 @@ public class UpdateSettingsIT extends ESIntegTestCase {
 
         // Optimize does a waitForMerges, which we must do to make sure all in-flight (throttled) merges finish:
         logger.info("test: optimize");
-        client().admin().indices().prepareOptimize("test").setMaxNumSegments(1).get();
+        client().admin().indices().prepareForceMerge("test").setMaxNumSegments(1).get();
         logger.info("test: optimize done");
 
         // Record current throttling so far
@@ -263,13 +264,16 @@ public class UpdateSettingsIT extends ESIntegTestCase {
         // when ESIntegTestCase.after tries to remove indices created by the test:
 
         // Wait for merges to finish
-        client().admin().indices().prepareOptimize("test").get();
+        client().admin().indices().prepareForceMerge("test").get();
         flush();
 
         logger.info("test: test done");
     }
 
     private static class MockAppender extends AppenderSkeleton {
+        public boolean sawIndexWriterMessage;
+        public boolean sawFlushDeletes;
+        public boolean sawMergeThreadPaused;
         public boolean sawUpdateMaxThreadCount;
         public boolean sawUpdateAutoThrottle;
 
@@ -278,6 +282,8 @@ public class UpdateSettingsIT extends ESIntegTestCase {
             String message = event.getMessage().toString();
             if (event.getLevel() == Level.TRACE &&
                 event.getLoggerName().endsWith("lucene.iw")) {
+                sawFlushDeletes |= message.contains("IW: apply all deletes during flush");
+                sawMergeThreadPaused |= message.contains("CMS: pause thread");
             }
             if (event.getLevel() == Level.INFO && message.contains("updating [index.merge.scheduler.max_thread_count] from [10000] to [1]")) {
                 sawUpdateMaxThreadCount = true;
@@ -297,7 +303,9 @@ public class UpdateSettingsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testUpdateAutoThrottleSettings() {
+
         MockAppender mockAppender = new MockAppender();
         Logger rootLogger = Logger.getRootLogger();
         Level savedLevel = rootLogger.getLevel();
@@ -339,7 +347,9 @@ public class UpdateSettingsIT extends ESIntegTestCase {
     }
 
     // #6882: make sure we can change index.merge.scheduler.max_thread_count live
+    @Test
     public void testUpdateMergeMaxThreadCount() {
+
         MockAppender mockAppender = new MockAppender();
         Logger rootLogger = Logger.getRootLogger();
         Level savedLevel = rootLogger.getLevel();
@@ -369,7 +379,7 @@ public class UpdateSettingsIT extends ESIntegTestCase {
                              .put(MergeSchedulerConfig.MAX_THREAD_COUNT, "1")
                              )
                 .get();
-
+            
             // Make sure we log the change:
             assertTrue(mockAppender.sawUpdateMaxThreadCount);
 
@@ -383,6 +393,7 @@ public class UpdateSettingsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testUpdateSettingsWithBlocks() {
         createIndex("test");
         ensureGreen("test");
diff --git a/core/src/test/java/org/elasticsearch/indices/state/CloseIndexDisableCloseAllIT.java b/core/src/test/java/org/elasticsearch/indices/state/CloseIndexDisableCloseAllIT.java
index 326c5bb..daebe71 100644
--- a/core/src/test/java/org/elasticsearch/indices/state/CloseIndexDisableCloseAllIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/state/CloseIndexDisableCloseAllIT.java
@@ -26,14 +26,17 @@ import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
+import static org.elasticsearch.test.ESIntegTestCase.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.notNullValue;
 
 @ClusterScope(scope= Scope.TEST, numDataNodes =2)
 public class CloseIndexDisableCloseAllIT extends ESIntegTestCase {
+
+    @Test
     // Combined multiple tests into one, because cluster scope is test.
     // The cluster scope is test b/c we can't clear cluster settings.
     public void testCloseAllRequiresName() {
diff --git a/core/src/test/java/org/elasticsearch/indices/state/OpenCloseIndexIT.java b/core/src/test/java/org/elasticsearch/indices/state/OpenCloseIndexIT.java
index e17b2a5..5556b67 100644
--- a/core/src/test/java/org/elasticsearch/indices/state/OpenCloseIndexIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/state/OpenCloseIndexIT.java
@@ -34,25 +34,20 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.IndexNotFoundException;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.concurrent.ExecutionException;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.hamcrest.Matchers.containsString;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
 import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.notNullValue;
 
 public class OpenCloseIndexIT extends ESIntegTestCase {
+
+    @Test
     public void testSimpleCloseOpen() {
         Client client = client();
         createIndex("test1");
@@ -68,39 +63,28 @@ public class OpenCloseIndexIT extends ESIntegTestCase {
         assertIndexIsOpened("test1");
     }
 
+    @Test(expected = IndexNotFoundException.class)
     public void testSimpleCloseMissingIndex() {
         Client client = client();
-        try {
-            client.admin().indices().prepareClose("test1").execute().actionGet();
-            fail("Expected IndexNotFoundException");
-        } catch (IndexNotFoundException e) {
-            assertThat(e.getMessage(), is("no such index"));
-        }
+        client.admin().indices().prepareClose("test1").execute().actionGet();
     }
 
+    @Test(expected = IndexNotFoundException.class)
     public void testSimpleOpenMissingIndex() {
         Client client = client();
-        try {
-            client.admin().indices().prepareOpen("test1").execute().actionGet();
-            fail("Expected IndexNotFoundException");
-        } catch (IndexNotFoundException e) {
-            assertThat(e.getMessage(), is("no such index"));
-        }
+        client.admin().indices().prepareOpen("test1").execute().actionGet();
     }
 
+    @Test(expected = IndexNotFoundException.class)
     public void testCloseOneMissingIndex() {
         Client client = client();
         createIndex("test1");
         ClusterHealthResponse healthResponse = client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();
         assertThat(healthResponse.isTimedOut(), equalTo(false));
-        try {
-            client.admin().indices().prepareClose("test1", "test2").execute().actionGet();
-            fail("Expected IndexNotFoundException");
-        } catch (IndexNotFoundException e) {
-            assertThat(e.getMessage(), is("no such index"));
-        }
+        client.admin().indices().prepareClose("test1", "test2").execute().actionGet();
     }
 
+    @Test
     public void testCloseOneMissingIndexIgnoreMissing() {
         Client client = client();
         createIndex("test1");
@@ -112,19 +96,16 @@ public class OpenCloseIndexIT extends ESIntegTestCase {
         assertIndexIsClosed("test1");
     }
 
+    @Test(expected = IndexNotFoundException.class)
     public void testOpenOneMissingIndex() {
         Client client = client();
         createIndex("test1");
         ClusterHealthResponse healthResponse = client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();
         assertThat(healthResponse.isTimedOut(), equalTo(false));
-        try {
-            client.admin().indices().prepareOpen("test1", "test2").execute().actionGet();
-            fail("Expected IndexNotFoundException");
-        } catch (IndexNotFoundException e) {
-            assertThat(e.getMessage(), is("no such index"));
-        }
+        client.admin().indices().prepareOpen("test1", "test2").execute().actionGet();
     }
 
+    @Test
     public void testOpenOneMissingIndexIgnoreMissing() {
         Client client = client();
         createIndex("test1");
@@ -136,6 +117,7 @@ public class OpenCloseIndexIT extends ESIntegTestCase {
         assertIndexIsOpened("test1");
     }
 
+    @Test
     public void testCloseOpenMultipleIndices() {
         Client client = client();
         createIndex("test1", "test2", "test3");
@@ -156,6 +138,7 @@ public class OpenCloseIndexIT extends ESIntegTestCase {
         assertIndexIsOpened("test1", "test2", "test3");
     }
 
+    @Test
     public void testCloseOpenWildcard() {
         Client client = client();
         createIndex("test1", "test2", "a");
@@ -172,6 +155,7 @@ public class OpenCloseIndexIT extends ESIntegTestCase {
         assertIndexIsOpened("test1", "test2", "a");
     }
 
+    @Test
     public void testCloseOpenAll() {
         Client client = client();
         createIndex("test1", "test2", "test3");
@@ -187,6 +171,7 @@ public class OpenCloseIndexIT extends ESIntegTestCase {
         assertIndexIsOpened("test1", "test2", "test3");
     }
 
+    @Test
     public void testCloseOpenAllWildcard() {
         Client client = client();
         createIndex("test1", "test2", "test3");
@@ -202,46 +187,31 @@ public class OpenCloseIndexIT extends ESIntegTestCase {
         assertIndexIsOpened("test1", "test2", "test3");
     }
 
+    @Test(expected = ActionRequestValidationException.class)
     public void testCloseNoIndex() {
         Client client = client();
-        try {
-            client.admin().indices().prepareClose().execute().actionGet();
-            fail("Expected ActionRequestValidationException");
-        } catch (ActionRequestValidationException e) {
-            assertThat(e.getMessage(), containsString("index is missing"));
-        }
+        client.admin().indices().prepareClose().execute().actionGet();
     }
 
+    @Test(expected = ActionRequestValidationException.class)
     public void testCloseNullIndex() {
         Client client = client();
-        try {
-            client.admin().indices().prepareClose((String[])null).execute().actionGet();
-            fail("Expected ActionRequestValidationException");
-        } catch (ActionRequestValidationException e) {
-            assertThat(e.getMessage(), containsString("index is missing"));
-        }
+        client.admin().indices().prepareClose((String[])null).execute().actionGet();
     }
 
+    @Test(expected = ActionRequestValidationException.class)
     public void testOpenNoIndex() {
         Client client = client();
-        try {
-            client.admin().indices().prepareOpen().execute().actionGet();
-            fail("Expected ActionRequestValidationException");
-        } catch (ActionRequestValidationException e) {
-            assertThat(e.getMessage(), containsString("index is missing"));
-        }
+        client.admin().indices().prepareOpen().execute().actionGet();
     }
 
+    @Test(expected = ActionRequestValidationException.class)
     public void testOpenNullIndex() {
         Client client = client();
-        try {
-            client.admin().indices().prepareOpen((String[])null).execute().actionGet();
-            fail("Expected ActionRequestValidationException");
-        } catch (ActionRequestValidationException e) {
-            assertThat(e.getMessage(), containsString("index is missing"));
-        }
+        client.admin().indices().prepareOpen((String[])null).execute().actionGet();
     }
 
+    @Test
     public void testOpenAlreadyOpenedIndex() {
         Client client = client();
         createIndex("test1");
@@ -254,6 +224,7 @@ public class OpenCloseIndexIT extends ESIntegTestCase {
         assertIndexIsOpened("test1");
     }
 
+    @Test
     public void testCloseAlreadyClosedIndex() {
         Client client = client();
         createIndex("test1");
@@ -271,6 +242,7 @@ public class OpenCloseIndexIT extends ESIntegTestCase {
         assertIndexIsClosed("test1");
     }
 
+    @Test
     public void testSimpleCloseOpenAlias() {
         Client client = client();
         createIndex("test1");
@@ -289,6 +261,7 @@ public class OpenCloseIndexIT extends ESIntegTestCase {
         assertIndexIsOpened("test1");
     }
 
+    @Test
     public void testCloseOpenAliasMultipleIndices() {
         Client client = client();
         createIndex("test1", "test2");
@@ -326,6 +299,7 @@ public class OpenCloseIndexIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testOpenCloseWithDocs() throws IOException, ExecutionException, InterruptedException {
         String mapping = XContentFactory.jsonBuilder().
                 startObject().
@@ -361,6 +335,7 @@ public class OpenCloseIndexIT extends ESIntegTestCase {
         assertHitCount(searchResponse, docs);
     }
 
+    @Test
     public void testOpenCloseIndexWithBlocks() {
         createIndex("test");
         ensureGreen("test");
diff --git a/core/src/test/java/org/elasticsearch/indices/state/RareClusterStateIT.java b/core/src/test/java/org/elasticsearch/indices/state/RareClusterStateIT.java
index 1dc9e02..dbdfc2b 100644
--- a/core/src/test/java/org/elasticsearch/indices/state/RareClusterStateIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/state/RareClusterStateIT.java
@@ -54,6 +54,7 @@ import org.elasticsearch.indices.IndicesService;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.disruption.BlockClusterStateProcessing;
 import org.elasticsearch.test.junit.annotations.TestLogging;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Arrays;
@@ -75,6 +76,7 @@ import static org.hamcrest.Matchers.instanceOf;
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0, numClientNodes = 0, transportClientRatio = 0)
 @ESIntegTestCase.SuppressLocalMode
 public class RareClusterStateIT extends ESIntegTestCase {
+
     @Override
     protected int numberOfShards() {
         return 1;
@@ -85,6 +87,7 @@ public class RareClusterStateIT extends ESIntegTestCase {
         return 0;
     }
 
+    @Test
     public void testUnassignedShardAndEmptyNodesInRoutingTable() throws Exception {
         internalCluster().startNode();
         createIndex("a");
@@ -103,6 +106,7 @@ public class RareClusterStateIT extends ESIntegTestCase {
         allocator.allocateUnassigned(routingAllocation);
     }
 
+    @Test
     @TestLogging("gateway:TRACE")
     public void testAssignmentWithJustAddedNodes() throws Exception {
         internalCluster().startNode();
@@ -167,7 +171,9 @@ public class RareClusterStateIT extends ESIntegTestCase {
         });
     }
 
-    @TestLogging("cluster.service:TRACE")
+
+    @Test
+    @TestLogging(value = "cluster.service:TRACE")
     public void testDeleteCreateInOneBulk() throws Exception {
         internalCluster().startNodesAsync(2, Settings.builder()
                 .put(DiscoveryModule.DISCOVERY_TYPE_KEY, "zen")
diff --git a/core/src/test/java/org/elasticsearch/indices/state/SimpleIndexStateIT.java b/core/src/test/java/org/elasticsearch/indices/state/SimpleIndexStateIT.java
index ad64e4a..73f53ac 100644
--- a/core/src/test/java/org/elasticsearch/indices/state/SimpleIndexStateIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/state/SimpleIndexStateIT.java
@@ -35,6 +35,7 @@ import org.elasticsearch.index.IndexNotFoundException;
 import org.elasticsearch.indices.IndexClosedException;
 import org.elasticsearch.indices.IndexPrimaryShardNotAllocatedException;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.equalTo;
@@ -45,8 +46,10 @@ import static org.hamcrest.Matchers.nullValue;
  */
 @ESIntegTestCase.ClusterScope(minNumDataNodes = 2)
 public class SimpleIndexStateIT extends ESIntegTestCase {
+
     private final ESLogger logger = Loggers.getLogger(SimpleIndexStateIT.class);
 
+    @Test
     public void testSimpleOpenClose() {
         logger.info("--> creating test index");
         createIndex("test");
@@ -97,6 +100,7 @@ public class SimpleIndexStateIT extends ESIntegTestCase {
         client().prepareIndex("test", "type1", "1").setSource("field1", "value1").get();
     }
 
+    @Test
     public void testFastCloseAfterCreateDoesNotClose() {
         logger.info("--> creating test index that cannot be allocated");
         client().admin().indices().prepareCreate("test").setSettings(Settings.settingsBuilder()
@@ -131,7 +135,9 @@ public class SimpleIndexStateIT extends ESIntegTestCase {
         client().prepareIndex("test", "type1", "1").setSource("field1", "value1").get();
     }
 
+    @Test
     public void testConsistencyAfterIndexCreationFailure() {
+
         logger.info("--> deleting test index....");
         try {
             client().admin().indices().prepareDelete("test").get();
@@ -151,4 +157,5 @@ public class SimpleIndexStateIT extends ESIntegTestCase {
         CreateIndexResponse response = client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("number_of_shards", 1)).get();
         assertThat(response.isAcknowledged(), equalTo(true));
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/indices/stats/IndexStatsIT.java b/core/src/test/java/org/elasticsearch/indices/stats/IndexStatsIT.java
index a42ac5e..d22bd88 100644
--- a/core/src/test/java/org/elasticsearch/indices/stats/IndexStatsIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/stats/IndexStatsIT.java
@@ -19,6 +19,10 @@
 
 package org.elasticsearch.indices.stats;
 
+import org.elasticsearch.index.VersionType;
+import org.elasticsearch.index.cache.IndexCacheModule;
+import org.elasticsearch.index.engine.VersionConflictEngineException;
+import org.elasticsearch.index.shard.MergeSchedulerConfig;
 import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
 import org.apache.lucene.util.Version;
 import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;
@@ -35,22 +39,19 @@ import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.action.search.SearchType;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.bytes.BytesReference;
-import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamInput;
+import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.index.VersionType;
-import org.elasticsearch.index.cache.IndexCacheModule;
 import org.elasticsearch.index.cache.query.QueryCacheStats;
-import org.elasticsearch.index.engine.VersionConflictEngineException;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.index.shard.MergePolicyConfig;
-import org.elasticsearch.index.shard.MergeSchedulerConfig;
 import org.elasticsearch.index.store.IndexStore;
 import org.elasticsearch.indices.cache.request.IndicesRequestCache;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.EnumSet;
@@ -72,6 +73,7 @@ import static org.hamcrest.Matchers.nullValue;
 @ClusterScope(scope = Scope.SUITE, numDataNodes = 2, numClientNodes = 0, randomDynamicTemplates = false)
 @SuppressCodecs("*") // requires custom completion format
 public class IndexStatsIT extends ESIntegTestCase {
+
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         //Filter/Query cache is cleaned periodically, default is 60s, so make sure it runs often. Thread.sleep for 60s is bad
@@ -82,6 +84,7 @@ public class IndexStatsIT extends ESIntegTestCase {
                 .build();
     }
 
+    @Test
     public void testFieldDataStats() {
         client().admin().indices().prepareCreate("test").setSettings(Settings.settingsBuilder().put("index.number_of_shards", 2)).execute().actionGet();
         ensureGreen();
@@ -126,6 +129,7 @@ public class IndexStatsIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testClearAllCaches() throws Exception {
         client().admin().indices().prepareCreate("test")
                 .setSettings(Settings.settingsBuilder().put("index.number_of_replicas", 0).put("index.number_of_shards", 2))
@@ -182,6 +186,7 @@ public class IndexStatsIT extends ESIntegTestCase {
         assertThat(indicesStats.getTotal().getQueryCache().getMemorySizeInBytes(), equalTo(0l));
     }
 
+    @Test
     public void testQueryCache() throws Exception {
         assertAcked(client().admin().indices().prepareCreate("idx").setSettings(IndicesRequestCache.INDEX_CACHE_REQUEST_ENABLED, true).get());
         ensureGreen();
@@ -272,7 +277,9 @@ public class IndexStatsIT extends ESIntegTestCase {
         assertThat(client().admin().indices().prepareStats("idx").setRequestCache(true).get().getTotal().getRequestCache().getMemorySizeInBytes(), greaterThan(0l));
     }
 
-    public void testNonThrottleStats() throws Exception {
+
+    @Test
+    public void nonThrottleStats() throws Exception {
         assertAcked(prepareCreate("test")
                 .setSettings(Settings.builder()
                                 .put(IndexStore.INDEX_STORE_THROTTLE_TYPE, "merge")
@@ -304,7 +311,8 @@ public class IndexStatsIT extends ESIntegTestCase {
         assertThat(stats.getPrimaries().getIndexing().getTotal().getThrottleTimeInMillis(), equalTo(0l));
     }
 
-    public void testThrottleStats() throws Exception {
+    @Test
+    public void throttleStats() throws Exception {
         assertAcked(prepareCreate("test")
                     .setSettings(Settings.builder()
                                  .put(IndexStore.INDEX_STORE_THROTTLE_TYPE, "merge")
@@ -348,12 +356,13 @@ public class IndexStatsIT extends ESIntegTestCase {
         // Optimize & flush and wait; else we sometimes get a "Delete Index failed - not acked"
         // when ESIntegTestCase.after tries to remove indices created by the test:
         logger.info("test: now optimize");
-        client().admin().indices().prepareOptimize("test").get();
+        client().admin().indices().prepareForceMerge("test").get();
         flush();
         logger.info("test: test done");
     }
 
-    public void testSimpleStats() throws Exception {
+    @Test
+    public void simpleStats() throws Exception {
         createIndex("test1", "test2");
         ensureGreen();
 
@@ -482,6 +491,7 @@ public class IndexStatsIT extends ESIntegTestCase {
         assertThat(stats.getTotal().getIndexing().getTotal().getIndexFailedCount(), equalTo(3L));
     }
 
+    @Test
     public void testMergeStats() {
         createIndex("test1");
 
@@ -509,7 +519,7 @@ public class IndexStatsIT extends ESIntegTestCase {
             client().prepareIndex("test1", "type2", Integer.toString(i)).setSource("field", "value").execute().actionGet();
             client().admin().indices().prepareFlush().execute().actionGet();
         }
-        client().admin().indices().prepareOptimize().setMaxNumSegments(1).execute().actionGet();
+        client().admin().indices().prepareForceMerge().setMaxNumSegments(1).execute().actionGet();
         stats = client().admin().indices().prepareStats()
                 .setMerge(true)
                 .execute().actionGet();
@@ -518,6 +528,7 @@ public class IndexStatsIT extends ESIntegTestCase {
         assertThat(stats.getTotal().getMerge().getTotal(), greaterThan(0l));
     }
 
+    @Test
     public void testSegmentsStats() {
         assertAcked(prepareCreate("test1", 2, settingsBuilder().put(SETTING_NUMBER_OF_REPLICAS, between(0, 1))));
         ensureGreen();
@@ -535,7 +546,7 @@ public class IndexStatsIT extends ESIntegTestCase {
         assertThat(stats.getTotal().getSegments().getVersionMapMemoryInBytes(), greaterThan(0l));
 
         client().admin().indices().prepareFlush().get();
-        client().admin().indices().prepareOptimize().setMaxNumSegments(1).execute().actionGet();
+        client().admin().indices().prepareForceMerge().setMaxNumSegments(1).execute().actionGet();
         stats = client().admin().indices().prepareStats().setSegments(true).get();
 
         assertThat(stats.getTotal().getSegments(), notNullValue());
@@ -544,6 +555,7 @@ public class IndexStatsIT extends ESIntegTestCase {
         assertThat(stats.getTotal().getSegments().getMemoryInBytes(), greaterThan(0l));
     }
 
+    @Test
     public void testAllFlags() throws Exception {
         // rely on 1 replica for this tests
         createIndex("test1");
@@ -605,6 +617,7 @@ public class IndexStatsIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testEncodeDecodeCommonStats() throws IOException {
         CommonStatsFlags flags = new CommonStatsFlags();
         Flag[] values = CommonStatsFlags.Flag.values();
@@ -648,6 +661,7 @@ public class IndexStatsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testFlagOrdinalOrder() {
         Flag[] flags = new Flag[]{Flag.Store, Flag.Indexing, Flag.Get, Flag.Search, Flag.Merge, Flag.Flush, Flag.Refresh,
                 Flag.QueryCache, Flag.FieldData, Flag.Docs, Flag.Warmer, Flag.Percolate, Flag.Completion, Flag.Segments,
@@ -659,7 +673,9 @@ public class IndexStatsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testMultiIndex() throws Exception {
+
         createIndex("test1");
         createIndex("test2");
 
@@ -698,7 +714,9 @@ public class IndexStatsIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testFieldDataFieldsParam() throws Exception {
+
         createIndex("test1");
 
         ensureGreen();
@@ -743,7 +761,9 @@ public class IndexStatsIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testCompletionFieldsParam() throws Exception {
+
         assertAcked(prepareCreate("test1")
                 .addMapping(
                         "bar",
@@ -788,7 +808,9 @@ public class IndexStatsIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testGroupsParam() throws Exception {
+
         createIndex("test1");
 
         ensureGreen();
@@ -822,7 +844,9 @@ public class IndexStatsIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testTypesParam() throws Exception {
+
         createIndex("test1");
         createIndex("test2");
 
diff --git a/core/src/test/java/org/elasticsearch/indices/store/IndicesStoreIntegrationIT.java b/core/src/test/java/org/elasticsearch/indices/store/IndicesStoreIntegrationIT.java
index b56e3ad..8562b09 100644
--- a/core/src/test/java/org/elasticsearch/indices/store/IndicesStoreIntegrationIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/store/IndicesStoreIntegrationIT.java
@@ -27,13 +27,7 @@ import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.cluster.ClusterStateUpdateTask;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.cluster.node.DiscoveryNode;
-import org.elasticsearch.cluster.routing.IndexRoutingTable;
-import org.elasticsearch.cluster.routing.IndexShardRoutingTable;
-import org.elasticsearch.cluster.routing.RoutingNode;
-import org.elasticsearch.cluster.routing.RoutingTable;
-import org.elasticsearch.cluster.routing.ShardRouting;
-import org.elasticsearch.cluster.routing.ShardRoutingState;
-import org.elasticsearch.cluster.routing.TestShardRouting;
+import org.elasticsearch.cluster.routing.*;
 import org.elasticsearch.cluster.routing.allocation.command.MoveAllocationCommand;
 import org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDecider;
 import org.elasticsearch.cluster.routing.allocation.decider.FilterAllocationDecider;
@@ -50,17 +44,13 @@ import org.elasticsearch.indices.recovery.RecoverySource;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.InternalTestCluster;
 import org.elasticsearch.test.disruption.BlockClusterStateProcessing;
 import org.elasticsearch.test.disruption.SingleNodeDisruption;
 import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.elasticsearch.test.transport.MockTransportService;
-import org.elasticsearch.transport.ConnectTransportException;
-import org.elasticsearch.transport.TransportException;
-import org.elasticsearch.transport.TransportRequest;
-import org.elasticsearch.transport.TransportRequestOptions;
-import org.elasticsearch.transport.TransportService;
+import org.elasticsearch.transport.*;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.nio.file.Files;
@@ -73,6 +63,7 @@ import java.util.concurrent.TimeUnit;
 
 import static java.lang.Thread.sleep;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.hamcrest.Matchers.equalTo;
 
@@ -81,6 +72,7 @@ import static org.hamcrest.Matchers.equalTo;
  */
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0)
 public class IndicesStoreIntegrationIT extends ESIntegTestCase {
+
     @Override
     protected Settings nodeSettings(int nodeOrdinal) { // simplify this and only use a single data path
         return Settings.settingsBuilder().put(super.nodeSettings(nodeOrdinal)).put("path.data", "")
@@ -102,7 +94,8 @@ public class IndicesStoreIntegrationIT extends ESIntegTestCase {
         // so we cannot check state consistency of this cluster
     }
 
-    public void testIndexCleanup() throws Exception {
+    @Test
+    public void indexCleanup() throws Exception {
         final String masterNode = internalCluster().startNode(Settings.builder().put("node.data", false));
         final String node_1 = internalCluster().startNode(Settings.builder().put("node.master", false));
         final String node_2 = internalCluster().startNode(Settings.builder().put("node.master", false));
@@ -171,8 +164,9 @@ public class IndicesStoreIntegrationIT extends ESIntegTestCase {
 
     }
 
+    @Test
     /* Test that shard is deleted in case ShardActiveRequest after relocation and next incoming cluster state is an index delete. */
-    public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception {
+    public void shardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception {
         final String node_1 = internalCluster().startNode();
         logger.info("--> creating index [test] with one shard and on replica");
         assertAcked(prepareCreate("test").setSettings(
@@ -232,7 +226,8 @@ public class IndicesStoreIntegrationIT extends ESIntegTestCase {
         assertThat(Files.exists(indexDirectory(node_2, "test")), equalTo(false));
     }
 
-    public void testShardsCleanup() throws Exception {
+    @Test
+    public void shardsCleanup() throws Exception {
         final String node_1 = internalCluster().startNode();
         final String node_2 = internalCluster().startNode();
         logger.info("--> creating index [test] with one shard and on replica");
@@ -291,6 +286,8 @@ public class IndicesStoreIntegrationIT extends ESIntegTestCase {
         assertThat(waitForShardDeletion(node_4, "test", 0), equalTo(false));
     }
 
+
+    @Test
     @TestLogging("cluster.service:TRACE")
     public void testShardActiveElsewhereDoesNotDeleteAnother() throws Exception {
         InternalTestCluster.Async<String> masterFuture = internalCluster().startNodeAsync(
@@ -370,6 +367,7 @@ public class IndicesStoreIntegrationIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testShardActiveElseWhere() throws Exception {
         List<String> nodes = internalCluster().startNodesAsync(2).get();
 
diff --git a/core/src/test/java/org/elasticsearch/indices/store/IndicesStoreTests.java b/core/src/test/java/org/elasticsearch/indices/store/IndicesStoreTests.java
index ec6a3b3..890b94d 100644
--- a/core/src/test/java/org/elasticsearch/indices/store/IndicesStoreTests.java
+++ b/core/src/test/java/org/elasticsearch/indices/store/IndicesStoreTests.java
@@ -26,14 +26,12 @@ import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.cluster.metadata.MetaData;
 import org.elasticsearch.cluster.node.DiscoveryNode;
 import org.elasticsearch.cluster.node.DiscoveryNodes;
-import org.elasticsearch.cluster.routing.IndexShardRoutingTable;
-import org.elasticsearch.cluster.routing.ShardRoutingState;
-import org.elasticsearch.cluster.routing.TestShardRouting;
-import org.elasticsearch.cluster.routing.UnassignedInfo;
+import org.elasticsearch.cluster.routing.*;
 import org.elasticsearch.common.transport.LocalTransportAddress;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.HashSet;
@@ -41,10 +39,12 @@ import java.util.Set;
 
 import static org.elasticsearch.Version.CURRENT;
 import static org.elasticsearch.test.VersionUtils.randomVersion;
+import static org.hamcrest.Matchers.is;
 
 /**
  */
 public class IndicesStoreTests extends ESTestCase {
+
     private final static ShardRoutingState[] NOT_STARTED_STATES;
 
     static {
@@ -63,7 +63,8 @@ public class IndicesStoreTests extends ESTestCase {
         indicesStore = new IndicesStore();
     }
 
-    public void testShardCanBeDeletedNoShardRouting() throws Exception {
+    @Test
+    public void testShardCanBeDeleted_noShardRouting() throws Exception {
         int numShards = randomIntBetween(1, 7);
         int numReplicas = randomInt(2);
 
@@ -74,7 +75,8 @@ public class IndicesStoreTests extends ESTestCase {
         assertFalse(indicesStore.shardCanBeDeleted(clusterState.build(), routingTable.build()));
     }
 
-    public void testShardCanBeDeletedNoShardStarted() throws Exception {
+    @Test
+    public void testShardCanBeDeleted_noShardStarted() throws Exception {
         int numShards = randomIntBetween(1, 7);
         int numReplicas = randomInt(2);
 
@@ -101,7 +103,8 @@ public class IndicesStoreTests extends ESTestCase {
         assertFalse(indicesStore.shardCanBeDeleted(clusterState.build(), routingTable.build()));
     }
 
-    public void testShardCanBeDeletedShardExistsLocally() throws Exception {
+    @Test
+    public void testShardCanBeDeleted_shardExistsLocally() throws Exception {
         int numShards = randomIntBetween(1, 7);
         int numReplicas = randomInt(2);
 
@@ -123,7 +126,8 @@ public class IndicesStoreTests extends ESTestCase {
         assertFalse(indicesStore.shardCanBeDeleted(clusterState.build(), routingTable.build()));
     }
 
-    public void testShardCanBeDeletedNodeNotInList() throws Exception {
+    @Test
+    public void testShardCanBeDeleted_nodeNotInList() throws Exception {
         int numShards = randomIntBetween(1, 7);
         int numReplicas = randomInt(2);
 
@@ -143,7 +147,8 @@ public class IndicesStoreTests extends ESTestCase {
         assertFalse(indicesStore.shardCanBeDeleted(clusterState.build(), routingTable.build()));
     }
 
-    public void testShardCanBeDeletedNodeVersion() throws Exception {
+    @Test
+    public void testShardCanBeDeleted_nodeVersion() throws Exception {
         int numShards = randomIntBetween(1, 7);
         int numReplicas = randomInt(2);
 
@@ -164,7 +169,8 @@ public class IndicesStoreTests extends ESTestCase {
         assertTrue(indicesStore.shardCanBeDeleted(clusterState.build(), routingTable.build()));
     }
 
-    public void testShardCanBeDeletedRelocatingNode() throws Exception {
+    @Test
+    public void testShardCanBeDeleted_relocatingNode() throws Exception {
         int numShards = randomIntBetween(1, 7);
         int numReplicas = randomInt(2);
 
@@ -188,4 +194,5 @@ public class IndicesStoreTests extends ESTestCase {
         // shard exist on other node (abc and def)
         assertTrue(indicesStore.shardCanBeDeleted(clusterState.build(), routingTable.build()));
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/indices/template/IndexTemplateBlocksIT.java b/core/src/test/java/org/elasticsearch/indices/template/IndexTemplateBlocksIT.java
index c46c038..c1c41cf 100644
--- a/core/src/test/java/org/elasticsearch/indices/template/IndexTemplateBlocksIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/template/IndexTemplateBlocksIT.java
@@ -24,6 +24,7 @@ import org.elasticsearch.action.admin.indices.template.get.GetIndexTemplatesResp
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -32,6 +33,8 @@ import static org.hamcrest.Matchers.hasSize;
 
 @ClusterScope(scope = ESIntegTestCase.Scope.TEST)
 public class IndexTemplateBlocksIT extends ESIntegTestCase {
+
+    @Test
     public void testIndexTemplatesWithBlocks() throws IOException {
         // creates a simple index template
         client().admin().indices().preparePutTemplate("template_blocks")
diff --git a/core/src/test/java/org/elasticsearch/indices/template/IndexTemplateFilteringIT.java b/core/src/test/java/org/elasticsearch/indices/template/IndexTemplateFilteringIT.java
index ee0f874..f67e120 100644
--- a/core/src/test/java/org/elasticsearch/indices/template/IndexTemplateFilteringIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/template/IndexTemplateFilteringIT.java
@@ -26,10 +26,12 @@ import org.elasticsearch.cluster.metadata.IndexTemplateFilter;
 import org.elasticsearch.cluster.metadata.IndexTemplateMetaData;
 import org.elasticsearch.cluster.metadata.MappingMetaData;
 import org.elasticsearch.common.collect.ImmutableOpenMap;
+import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import java.util.Collection;
 
@@ -39,11 +41,13 @@ import static org.hamcrest.core.IsNull.notNullValue;
 
 @ClusterScope(scope = Scope.SUITE)
 public class IndexTemplateFilteringIT extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return pluginList(TestPlugin.class);
     }
 
+    @Test
     public void testTemplateFiltering() throws Exception {
         client().admin().indices().preparePutTemplate("template1")
                 .setTemplate("test*")
@@ -66,6 +70,7 @@ public class IndexTemplateFilteringIT extends ESIntegTestCase {
         assertThat(metadata.get("type2"), notNullValue());
     }
 
+
     public static class TestFilter implements IndexTemplateFilter {
         @Override
         public boolean apply(CreateIndexClusterStateUpdateRequest request, IndexTemplateMetaData template) {
diff --git a/core/src/test/java/org/elasticsearch/indices/template/SimpleIndexTemplateIT.java b/core/src/test/java/org/elasticsearch/indices/template/SimpleIndexTemplateIT.java
index b9da71d..1084d4d 100644
--- a/core/src/test/java/org/elasticsearch/indices/template/SimpleIndexTemplateIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/template/SimpleIndexTemplateIT.java
@@ -29,14 +29,15 @@ import org.elasticsearch.action.bulk.BulkResponse;
 import org.elasticsearch.action.index.IndexRequest;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.cluster.metadata.AliasMetaData;
-import org.elasticsearch.common.ParsingException;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.query.QueryBuilders;
+import org.elasticsearch.common.ParsingException;
 import org.elasticsearch.indices.IndexTemplateAlreadyExistsException;
 import org.elasticsearch.indices.InvalidAliasNameException;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -63,7 +64,9 @@ import static org.hamcrest.Matchers.nullValue;
  *
  */
 public class SimpleIndexTemplateIT extends ESIntegTestCase {
-    public void testSimpleIndexTemplateTests() throws Exception {
+
+    @Test
+    public void simpleIndexTemplateTests() throws Exception {
         // clean all templates setup by the framework.
         client().admin().indices().prepareDeleteTemplate("*").get();
 
@@ -136,6 +139,7 @@ public class SimpleIndexTemplateIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).field("field2").value().toString(), equalTo("value 2"));
     }
 
+    @Test
     public void testDeleteIndexTemplate() throws Exception {
         final int existingTemplates = admin().cluster().prepareState().execute().actionGet().getState().metaData().templates().size();
         logger.info("--> put template_1 and template_2");
@@ -182,6 +186,7 @@ public class SimpleIndexTemplateIT extends ESIntegTestCase {
         assertThat(admin().cluster().prepareState().execute().actionGet().getState().metaData().templates().size(), equalTo(0));
     }
 
+    @Test
     public void testThatGetIndexTemplatesWorks() throws Exception {
         logger.info("--> put template_1");
         client().admin().indices().preparePutTemplate("template_1")
@@ -205,6 +210,7 @@ public class SimpleIndexTemplateIT extends ESIntegTestCase {
         assertThat(getTemplate2Response.getIndexTemplates(), hasSize(0));
     }
 
+    @Test
     public void testThatGetIndexTemplatesWithSimpleRegexWorks() throws Exception {
         logger.info("--> put template_1");
         client().admin().indices().preparePutTemplate("template_1")
@@ -265,6 +271,7 @@ public class SimpleIndexTemplateIT extends ESIntegTestCase {
         assertThat(templateNames, containsInAnyOrder("template_1", "template_2"));
     }
 
+    @Test
     public void testThatInvalidGetIndexTemplatesFails() throws Exception {
         logger.info("--> get template null");
         testExpectActionRequestValidationException((String[])null);
@@ -285,6 +292,7 @@ public class SimpleIndexTemplateIT extends ESIntegTestCase {
                 "get template with " + Arrays.toString(names));
     }
 
+    @Test
     @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/pull/8802")
     public void testBrokenMapping() throws Exception {
         // clean all templates setup by the framework.
@@ -312,6 +320,7 @@ public class SimpleIndexTemplateIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testInvalidSettings() throws Exception {
         // clean all templates setup by the framework.
         client().admin().indices().prepareDeleteTemplate("*").get();
@@ -389,6 +398,7 @@ public class SimpleIndexTemplateIT extends ESIntegTestCase {
         assertThat(types, containsInAnyOrder("typeX", "typeY", "typeZ"));
     }
 
+    @Test
     public void testIndexTemplateWithAliasesInSource() {
         client().admin().indices().preparePutTemplate("template_1")
                 .setSource("{\n" +
@@ -424,6 +434,7 @@ public class SimpleIndexTemplateIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).type(), equalTo("type2"));
     }
 
+    @Test
     public void testIndexTemplateWithAliasesSource() {
         client().admin().indices().preparePutTemplate("template_1")
                 .setTemplate("te*")
@@ -462,6 +473,7 @@ public class SimpleIndexTemplateIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).type(), equalTo("type2"));
     }
 
+    @Test
     public void testDuplicateAlias() throws Exception {
         client().admin().indices().preparePutTemplate("template_1")
                 .setTemplate("te*")
@@ -475,7 +487,9 @@ public class SimpleIndexTemplateIT extends ESIntegTestCase {
         assertThat(response.getIndexTemplates().get(0).getAliases().get("my_alias").filter().string(), containsString("\"value1\""));
     }
 
+    @Test
     public void testAliasInvalidFilterValidJson() throws Exception {
+
         //invalid filter but valid json: put index template works fine, fails during index creation
         client().admin().indices().preparePutTemplate("template_1")
                 .setTemplate("te*")
@@ -496,7 +510,9 @@ public class SimpleIndexTemplateIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testAliasInvalidFilterInvalidJson() throws Exception {
+
         //invalid json: put index template fails
         PutIndexTemplateRequestBuilder putIndexTemplateRequestBuilder = client().admin().indices().preparePutTemplate("template_1")
                 .setTemplate("te*")
@@ -512,7 +528,9 @@ public class SimpleIndexTemplateIT extends ESIntegTestCase {
         assertThat(response.getIndexTemplates().size(), equalTo(0));
     }
 
+    @Test
     public void testAliasNameExistingIndex() throws Exception {
+
         createIndex("index");
 
         client().admin().indices().preparePutTemplate("template_1")
@@ -527,6 +545,7 @@ public class SimpleIndexTemplateIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testAliasEmptyName() throws Exception {
         PutIndexTemplateRequestBuilder putIndexTemplateRequestBuilder = client().admin().indices().preparePutTemplate("template_1")
                 .setTemplate("te*")
@@ -540,6 +559,7 @@ public class SimpleIndexTemplateIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testAliasWithMultipleIndexRoutings() throws Exception {
         PutIndexTemplateRequestBuilder putIndexTemplateRequestBuilder = client().admin().indices().preparePutTemplate("template_1")
                 .setTemplate("te*")
@@ -553,6 +573,7 @@ public class SimpleIndexTemplateIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testMultipleAliasesPrecedence() throws Exception {
         client().admin().indices().preparePutTemplate("template1")
                 .setTemplate("*")
@@ -590,6 +611,7 @@ public class SimpleIndexTemplateIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testStrictAliasParsingInIndicesCreatedViaTemplates() throws Exception {
         // Indexing into a should succeed, because the field mapping for field 'field' is defined in the test mapping.
         client().admin().indices().preparePutTemplate("template1")
diff --git a/core/src/test/java/org/elasticsearch/indices/warmer/GatewayIndicesWarmerIT.java b/core/src/test/java/org/elasticsearch/indices/warmer/GatewayIndicesWarmerIT.java
index 7c5a154..1c1b193 100644
--- a/core/src/test/java/org/elasticsearch/indices/warmer/GatewayIndicesWarmerIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/warmer/GatewayIndicesWarmerIT.java
@@ -28,10 +28,11 @@ import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.warmer.IndexWarmersMetaData;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.InternalTestCluster.RestartCallback;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
+import static org.elasticsearch.test.ESIntegTestCase.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.hamcrest.Matchers.equalTo;
 
@@ -39,9 +40,12 @@ import static org.hamcrest.Matchers.equalTo;
  */
 @ClusterScope(numDataNodes =0, scope= Scope.TEST)
 public class GatewayIndicesWarmerIT extends ESIntegTestCase {
+
     private final ESLogger logger = Loggers.getLogger(GatewayIndicesWarmerIT.class);
 
+    @Test
     public void testStatePersistence() throws Exception {
+
         logger.info("--> starting 1 nodes");
         internalCluster().startNode();
 
diff --git a/core/src/test/java/org/elasticsearch/indices/warmer/IndicesWarmerBlocksIT.java b/core/src/test/java/org/elasticsearch/indices/warmer/IndicesWarmerBlocksIT.java
index 62bac50..0ee4ab6 100644
--- a/core/src/test/java/org/elasticsearch/indices/warmer/IndicesWarmerBlocksIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/warmer/IndicesWarmerBlocksIT.java
@@ -21,23 +21,17 @@ package org.elasticsearch.indices.warmer;
 
 
 import com.carrotsearch.hppc.cursors.ObjectObjectCursor;
-
 import org.elasticsearch.action.admin.indices.warmer.get.GetWarmersResponse;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.warmer.IndexWarmersMetaData;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.List;
 
-import static org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_BLOCK;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_BLOCK;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_METADATA;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_READ;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_BLOCKS_WRITE;
-import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_READ_ONLY;
+import static org.elasticsearch.cluster.metadata.IndexMetaData.*;
 import static org.elasticsearch.cluster.metadata.MetaData.CLUSTER_READ_ONLY_BLOCK;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
@@ -45,6 +39,8 @@ import static org.hamcrest.Matchers.equalTo;
 
 @ClusterScope(scope = ESIntegTestCase.Scope.TEST)
 public class IndicesWarmerBlocksIT extends ESIntegTestCase {
+
+    @Test
     public void testPutWarmerWithBlocks() {
         createIndex("test-blocks");
         ensureGreen("test-blocks");
@@ -95,6 +91,7 @@ public class IndicesWarmerBlocksIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testGetWarmerWithBlocks() {
         createIndex("test-blocks");
         ensureGreen("test-blocks");
@@ -127,6 +124,7 @@ public class IndicesWarmerBlocksIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testDeleteWarmerWithBlocks() {
         createIndex("test-blocks");
         ensureGreen("test-blocks");
diff --git a/core/src/test/java/org/elasticsearch/indices/warmer/SimpleIndicesWarmerIT.java b/core/src/test/java/org/elasticsearch/indices/warmer/SimpleIndicesWarmerIT.java
index 8470020..82e0858 100644
--- a/core/src/test/java/org/elasticsearch/indices/warmer/SimpleIndicesWarmerIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/warmer/SimpleIndicesWarmerIT.java
@@ -33,6 +33,7 @@ import org.elasticsearch.search.warmer.IndexWarmerMissingException;
 import org.elasticsearch.search.warmer.IndexWarmersMetaData;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.List;
 
@@ -43,7 +44,9 @@ import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.hamcrest.Matchers.is;
 
 public class SimpleIndicesWarmerIT extends ESIntegTestCase {
-    public void testSimpleWarmers() {
+
+    @Test
+    public void simpleWarmerTests() {
         createIndex("test");
         ensureGreen();
 
@@ -96,7 +99,8 @@ public class SimpleIndicesWarmerIT extends ESIntegTestCase {
         assertThat(getWarmersResponse.getWarmers().size(), equalTo(0));
     }
 
-    public void testTtemplateWarmer() {
+    @Test
+    public void templateWarmer() {
         client().admin().indices().preparePutTemplate("template_1")
                 .setSource("{\n" +
                         "    \"template\" : \"*\",\n" +
@@ -125,7 +129,8 @@ public class SimpleIndicesWarmerIT extends ESIntegTestCase {
         client().prepareIndex("test", "type1", "2").setSource("field", "value2").setRefresh(true).execute().actionGet();
     }
 
-    public void testCreateIndexWarmer() {
+    @Test
+    public void createIndexWarmer() {
         assertAcked(prepareCreate("test")
                 .setSource("{\n" +
                         "    \"warmers\" : {\n" +
@@ -149,7 +154,8 @@ public class SimpleIndicesWarmerIT extends ESIntegTestCase {
         client().prepareIndex("test", "type1", "2").setSource("field", "value2").setRefresh(true).execute().actionGet();
     }
 
-    public void testDeleteNonExistentIndexWarmer() {
+    @Test
+    public void deleteNonExistentIndexWarmerTest() {
         createIndex("test");
         try {
             client().admin().indices().prepareDeleteWarmer().setIndices("test").setNames("foo").execute().actionGet();
@@ -159,8 +165,8 @@ public class SimpleIndicesWarmerIT extends ESIntegTestCase {
         }
     }
 
-    // issue 8991
-    public void testDeleteAllIndexWarmerDoesNotThrowWhenNoWarmers() {
+    @Test // issue 8991
+    public void deleteAllIndexWarmerDoesNotThrowWhenNoWarmers() {
         createIndex("test");
         DeleteWarmerResponse deleteWarmerResponse = client().admin().indices().prepareDeleteWarmer()
                 .setIndices("test").setNames("_all").execute().actionGet();
@@ -171,7 +177,8 @@ public class SimpleIndicesWarmerIT extends ESIntegTestCase {
         assertThat(deleteWarmerResponse.isAcknowledged(), equalTo(true));
     }
 
-    public void testDeleteIndexWarmerTest() {
+    @Test
+    public void deleteIndexWarmerTest() {
         createIndex("test");
         ensureGreen();
 
@@ -194,8 +201,8 @@ public class SimpleIndicesWarmerIT extends ESIntegTestCase {
         assertThat(getWarmersResponse.warmers().size(), equalTo(0));
     }
 
-    // issue 3246
-    public void testEnsureThatIndexWarmersCanBeChangedOnRuntime() throws Exception {
+    @Test // issue 3246
+    public void ensureThatIndexWarmersCanBeChangedOnRuntime() throws Exception {
         createIndex("test");
         ensureGreen();
 
@@ -217,7 +224,8 @@ public class SimpleIndicesWarmerIT extends ESIntegTestCase {
         assertThat(getWarmerRuns(), equalTo(warmerRunsAfterDisabling));
     }
 
-    public void testGettingAllWarmersUsingAllAndWildcardsShouldWork() throws Exception {
+    @Test
+    public void gettingAllWarmersUsingAllAndWildcardsShouldWork() throws Exception {
         createIndex("test");
         ensureGreen();
 
diff --git a/core/src/test/java/org/elasticsearch/mget/SimpleMgetIT.java b/core/src/test/java/org/elasticsearch/mget/SimpleMgetIT.java
index b661e78..7716bf7 100644
--- a/core/src/test/java/org/elasticsearch/mget/SimpleMgetIT.java
+++ b/core/src/test/java/org/elasticsearch/mget/SimpleMgetIT.java
@@ -29,18 +29,18 @@ import org.elasticsearch.common.bytes.BytesReference;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.search.fetch.source.FetchSourceContext;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Map;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.hasKey;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 public class SimpleMgetIT extends ESIntegTestCase {
+
+    @Test
     public void testThatMgetShouldWorkWithOneIndexMissing() throws IOException {
         createIndex("test");
         ensureYellow();
@@ -74,6 +74,7 @@ public class SimpleMgetIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testThatParentPerDocumentIsSupported() throws Exception {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias"))
                 .addMapping("test", jsonBuilder()
@@ -105,6 +106,7 @@ public class SimpleMgetIT extends ESIntegTestCase {
     }
 
     @SuppressWarnings("unchecked")
+    @Test
     public void testThatSourceFilteringIsSupported() throws Exception {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias")));
         ensureYellow();
@@ -144,6 +146,7 @@ public class SimpleMgetIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testThatRoutingPerDocumentIsSupported() throws Exception {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias"))
                 .setSettings(Settings.builder()
diff --git a/core/src/test/java/org/elasticsearch/monitor/fs/FsProbeTests.java b/core/src/test/java/org/elasticsearch/monitor/fs/FsProbeTests.java
index 26a5652..383bd0c 100644
--- a/core/src/test/java/org/elasticsearch/monitor/fs/FsProbeTests.java
+++ b/core/src/test/java/org/elasticsearch/monitor/fs/FsProbeTests.java
@@ -22,14 +22,15 @@ package org.elasticsearch.monitor.fs;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.env.NodeEnvironment;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.isEmptyOrNullString;
-import static org.hamcrest.Matchers.not;
+import static org.hamcrest.Matchers.*;
 
 public class FsProbeTests extends ESTestCase {
+
+    @Test
     public void testFsInfo() throws IOException {
         try (NodeEnvironment env = newNodeEnvironment()) {
             FsProbe probe = new FsProbe(Settings.EMPTY, env);
diff --git a/core/src/test/java/org/elasticsearch/monitor/jvm/JvmStatsTests.java b/core/src/test/java/org/elasticsearch/monitor/jvm/JvmStatsTests.java
index d0b1d54..011edcb 100644
--- a/core/src/test/java/org/elasticsearch/monitor/jvm/JvmStatsTests.java
+++ b/core/src/test/java/org/elasticsearch/monitor/jvm/JvmStatsTests.java
@@ -22,17 +22,17 @@ package org.elasticsearch.monitor.jvm;
 import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.unit.ByteSizeValue;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
 
-import static org.hamcrest.Matchers.anyOf;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
+import static org.hamcrest.Matchers.*;
 
 public class JvmStatsTests extends ESTestCase {
+
+    @Test
     public void testJvmStats() throws IOException {
         JvmStats stats = JvmStats.jvmStats();
         assertNotNull(stats);
diff --git a/core/src/test/java/org/elasticsearch/monitor/os/OsProbeTests.java b/core/src/test/java/org/elasticsearch/monitor/os/OsProbeTests.java
index 4d1dde5..6b8818a 100644
--- a/core/src/test/java/org/elasticsearch/monitor/os/OsProbeTests.java
+++ b/core/src/test/java/org/elasticsearch/monitor/os/OsProbeTests.java
@@ -21,18 +21,15 @@ package org.elasticsearch.monitor.os;
 
 import org.apache.lucene.util.Constants;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import static org.hamcrest.Matchers.allOf;
-import static org.hamcrest.Matchers.anyOf;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.lessThan;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
+import static org.hamcrest.Matchers.*;
 
 public class OsProbeTests extends ESTestCase {
+
     OsProbe probe = OsProbe.getInstance();
 
+    @Test
     public void testOsInfo() {
         OsInfo info = probe.osInfo();
         assertNotNull(info);
@@ -43,6 +40,7 @@ public class OsProbeTests extends ESTestCase {
         assertThat(info.getAvailableProcessors(), equalTo(Runtime.getRuntime().availableProcessors()));
     }
 
+    @Test
     public void testOsStats() {
         OsStats stats = probe.osStats();
         assertNotNull(stats);
diff --git a/core/src/test/java/org/elasticsearch/monitor/process/ProcessProbeTests.java b/core/src/test/java/org/elasticsearch/monitor/process/ProcessProbeTests.java
index 1819325..18b5f7a 100644
--- a/core/src/test/java/org/elasticsearch/monitor/process/ProcessProbeTests.java
+++ b/core/src/test/java/org/elasticsearch/monitor/process/ProcessProbeTests.java
@@ -22,19 +22,16 @@ package org.elasticsearch.monitor.process;
 import org.apache.lucene.util.Constants;
 import org.elasticsearch.bootstrap.BootstrapInfo;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.monitor.jvm.JvmInfo.jvmInfo;
-import static org.hamcrest.Matchers.allOf;
-import static org.hamcrest.Matchers.anyOf;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.lessThan;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
+import static org.hamcrest.Matchers.*;
 
 public class ProcessProbeTests extends ESTestCase {
+
     ProcessProbe probe = ProcessProbe.getInstance();
 
+    @Test
     public void testProcessInfo() {
         ProcessInfo info = probe.processInfo();
         assertNotNull(info);
@@ -43,6 +40,7 @@ public class ProcessProbeTests extends ESTestCase {
         assertThat(info.isMlockall(), equalTo(BootstrapInfo.isMemoryLocked()));
     }
 
+    @Test
     public void testProcessStats() {
         ProcessStats stats = probe.processStats();
         assertNotNull(stats);
diff --git a/core/src/test/java/org/elasticsearch/nodesinfo/SimpleNodesInfoIT.java b/core/src/test/java/org/elasticsearch/nodesinfo/SimpleNodesInfoIT.java
index 5ae598f..406cf68 100644
--- a/core/src/test/java/org/elasticsearch/nodesinfo/SimpleNodesInfoIT.java
+++ b/core/src/test/java/org/elasticsearch/nodesinfo/SimpleNodesInfoIT.java
@@ -24,25 +24,28 @@ import org.elasticsearch.action.admin.cluster.node.info.NodesInfoResponse;
 import org.elasticsearch.cluster.ClusterService;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import java.util.List;
 
 import static org.elasticsearch.client.Requests.nodesInfoRequest;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 @ClusterScope(scope= Scope.TEST, numDataNodes =0)
 public class SimpleNodesInfoIT extends ESIntegTestCase {
+
     static final class Fields {
         static final String SITE_PLUGIN = "dummy";
         static final String SITE_PLUGIN_DESCRIPTION = "This is a description for a dummy test site plugin.";
         static final String SITE_PLUGIN_VERSION = "0.0.7-BOND-SITE";
     }
 
+
+    @Test
     public void testNodesInfos() throws Exception {
         List<String> nodesIds = internalCluster().startNodesAsync(2).get();
         final String node_1 = nodesIds.get(0);
diff --git a/core/src/test/java/org/elasticsearch/operateAllIndices/DestructiveOperationsIntegrationIT.java b/core/src/test/java/org/elasticsearch/operateAllIndices/DestructiveOperationsIntegrationIT.java
index 49d22b8..3e2d0e7 100644
--- a/core/src/test/java/org/elasticsearch/operateAllIndices/DestructiveOperationsIntegrationIT.java
+++ b/core/src/test/java/org/elasticsearch/operateAllIndices/DestructiveOperationsIntegrationIT.java
@@ -22,6 +22,7 @@ package org.elasticsearch.operateAllIndices;
 import org.elasticsearch.action.support.DestructiveOperations;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.hamcrest.Matchers.equalTo;
@@ -30,6 +31,8 @@ import static org.hamcrest.Matchers.equalTo;
  */
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST)
 public class DestructiveOperationsIntegrationIT extends ESIntegTestCase {
+
+    @Test
     // One test for test performance, since cluster scope is test
     // The cluster scope is test b/c we can't clear cluster settings.
     public void testDestructiveOperations() throws Exception {
diff --git a/core/src/test/java/org/elasticsearch/options/detailederrors/DetailedErrorsDisabledIT.java b/core/src/test/java/org/elasticsearch/options/detailederrors/DetailedErrorsDisabledIT.java
index a0751df..e6282d8 100644
--- a/core/src/test/java/org/elasticsearch/options/detailederrors/DetailedErrorsDisabledIT.java
+++ b/core/src/test/java/org/elasticsearch/options/detailederrors/DetailedErrorsDisabledIT.java
@@ -30,6 +30,7 @@ import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.rest.client.http.HttpDeleteWithEntity;
 import org.elasticsearch.test.rest.client.http.HttpRequestBuilder;
 import org.elasticsearch.test.rest.client.http.HttpResponse;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.is;
 
@@ -38,6 +39,7 @@ import static org.hamcrest.Matchers.is;
  */
 @ClusterScope(scope = Scope.TEST, numDataNodes = 1)
 public class DetailedErrorsDisabledIT extends ESIntegTestCase {
+
     // Build our cluster settings
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
@@ -48,6 +50,7 @@ public class DetailedErrorsDisabledIT extends ESIntegTestCase {
                 .build();
     }
 
+    @Test
     public void testThatErrorTraceParamReturns400() throws Exception {
         // Make the HTTP request
         HttpResponse response = new HttpRequestBuilder(HttpClients.createDefault())
diff --git a/core/src/test/java/org/elasticsearch/options/detailederrors/DetailedErrorsEnabledIT.java b/core/src/test/java/org/elasticsearch/options/detailederrors/DetailedErrorsEnabledIT.java
index 935b4e2..050d88c 100644
--- a/core/src/test/java/org/elasticsearch/options/detailederrors/DetailedErrorsEnabledIT.java
+++ b/core/src/test/java/org/elasticsearch/options/detailederrors/DetailedErrorsEnabledIT.java
@@ -29,6 +29,7 @@ import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.rest.client.http.HttpDeleteWithEntity;
 import org.elasticsearch.test.rest.client.http.HttpRequestBuilder;
 import org.elasticsearch.test.rest.client.http.HttpResponse;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.not;
@@ -38,6 +39,8 @@ import static org.hamcrest.Matchers.not;
  */
 @ClusterScope(scope = Scope.TEST, numDataNodes = 1)
 public class DetailedErrorsEnabledIT extends ESIntegTestCase {
+
+    // Build our cluster settings
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return Settings.settingsBuilder()
@@ -46,6 +49,7 @@ public class DetailedErrorsEnabledIT extends ESIntegTestCase {
                 .build();
     }
 
+    @Test
     public void testThatErrorTraceWorksByDefault() throws Exception {
         // Make the HTTP request
         HttpResponse response = new HttpRequestBuilder(HttpClients.createDefault())
diff --git a/core/src/test/java/org/elasticsearch/percolator/ConcurrentPercolatorIT.java b/core/src/test/java/org/elasticsearch/percolator/ConcurrentPercolatorIT.java
index b11f243..4a6b835 100644
--- a/core/src/test/java/org/elasticsearch/percolator/ConcurrentPercolatorIT.java
+++ b/core/src/test/java/org/elasticsearch/percolator/ConcurrentPercolatorIT.java
@@ -26,6 +26,7 @@ import org.elasticsearch.common.util.concurrent.ConcurrentCollections;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Random;
 import java.util.Set;
@@ -40,19 +41,15 @@ import static org.elasticsearch.index.query.QueryBuilders.termQuery;
 import static org.elasticsearch.percolator.PercolatorTestUtil.convertFromTextArray;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.hamcrest.Matchers.arrayContaining;
-import static org.hamcrest.Matchers.arrayContainingInAnyOrder;
-import static org.hamcrest.Matchers.arrayWithSize;
-import static org.hamcrest.Matchers.emptyArray;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 
 /**
  *
  */
 public class ConcurrentPercolatorIT extends ESIntegTestCase {
+
+    @Test
     public void testSimpleConcurrentPercolator() throws Exception {
         // We need to index a document / define mapping, otherwise field1 doesn't get reconized as number field.
         // If we don't do this, then 'test2' percolate query gets parsed as a TermQuery and not a RangeQuery.
@@ -147,6 +144,7 @@ public class ConcurrentPercolatorIT extends ESIntegTestCase {
         assertThat(assertionError + " should be null", assertionError, nullValue());
     }
 
+    @Test
     public void testConcurrentAddingAndPercolating() throws Exception {
         assertAcked(prepareCreate("index").addMapping("type", "field1", "type=string", "field2", "type=string"));
         ensureGreen();
@@ -293,6 +291,7 @@ public class ConcurrentPercolatorIT extends ESIntegTestCase {
         assertThat(exceptionsHolder.isEmpty(), equalTo(true));
     }
 
+    @Test
     public void testConcurrentAddingAndRemovingWhilePercolating() throws Exception {
         assertAcked(prepareCreate("index").addMapping("type", "field1", "type=string"));
         ensureGreen();
diff --git a/core/src/test/java/org/elasticsearch/percolator/MultiPercolatorIT.java b/core/src/test/java/org/elasticsearch/percolator/MultiPercolatorIT.java
index 7674ef8..2eb7639 100644
--- a/core/src/test/java/org/elasticsearch/percolator/MultiPercolatorIT.java
+++ b/core/src/test/java/org/elasticsearch/percolator/MultiPercolatorIT.java
@@ -26,33 +26,27 @@ import org.elasticsearch.action.percolate.PercolateSourceBuilder;
 import org.elasticsearch.client.Requests;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
+import org.elasticsearch.index.query.MatchQueryBuilder;
 import org.elasticsearch.index.query.Operator;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.elasticsearch.action.percolate.PercolateSourceBuilder.docBuilder;
-import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
-import static org.elasticsearch.common.xcontent.XContentFactory.smileBuilder;
-import static org.elasticsearch.common.xcontent.XContentFactory.yamlBuilder;
-import static org.elasticsearch.index.query.QueryBuilders.boolQuery;
-import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
-import static org.elasticsearch.index.query.QueryBuilders.matchQuery;
+import static org.elasticsearch.common.xcontent.XContentFactory.*;
+import static org.elasticsearch.index.query.QueryBuilders.*;
 import static org.elasticsearch.percolator.PercolatorTestUtil.convertFromTextArray;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertMatchCount;
-import static org.hamcrest.Matchers.arrayContaining;
-import static org.hamcrest.Matchers.arrayContainingInAnyOrder;
-import static org.hamcrest.Matchers.arrayWithSize;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
 public class MultiPercolatorIT extends ESIntegTestCase {
+
+    @Test
     public void testBasics() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type", "field1", "type=string"));
         ensureGreen();
@@ -122,6 +116,7 @@ public class MultiPercolatorIT extends ESIntegTestCase {
         assertThat(item.getErrorMessage(), containsString("document missing"));
     }
 
+    @Test
     public void testWithRouting() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type", "field1", "type=string"));
         ensureGreen();
@@ -200,6 +195,7 @@ public class MultiPercolatorIT extends ESIntegTestCase {
         assertThat(item.getErrorMessage(), containsString("document missing"));
     }
 
+    @Test
     public void testExistingDocsOnly() throws Exception {
         createIndex("test");
 
@@ -269,6 +265,7 @@ public class MultiPercolatorIT extends ESIntegTestCase {
         assertThat(response.items()[numPercolateRequest].getResponse().getMatches().length, equalTo(numQueries));
     }
 
+    @Test
     public void testWithDocsOnly() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -341,6 +338,8 @@ public class MultiPercolatorIT extends ESIntegTestCase {
         assertThat(response.items()[numPercolateRequest].getResponse().getMatches().length, equalTo(numQueries));
     }
 
+
+    @Test
     public void testNestedMultiPercolation() throws IOException {
         initNestedIndexAndPercolation();
         MultiPercolateRequestBuilder mpercolate= client().prepareMultiPercolate();
diff --git a/core/src/test/java/org/elasticsearch/percolator/PercolatorBackwardsCompatibilityIT.java b/core/src/test/java/org/elasticsearch/percolator/PercolatorBackwardsCompatibilityIT.java
index 8254932..f250e92 100644
--- a/core/src/test/java/org/elasticsearch/percolator/PercolatorBackwardsCompatibilityIT.java
+++ b/core/src/test/java/org/elasticsearch/percolator/PercolatorBackwardsCompatibilityIT.java
@@ -23,8 +23,9 @@ import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.percolate.PercolateResponse;
 import org.elasticsearch.action.percolate.PercolateSourceBuilder;
 import org.elasticsearch.index.percolator.PercolatorException;
-import org.elasticsearch.index.query.QueryShardException;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.elasticsearch.index.query.QueryShardException;
+import org.junit.Test;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.termQuery;
@@ -35,6 +36,8 @@ import static org.hamcrest.Matchers.instanceOf;
 /**
  */
 public class PercolatorBackwardsCompatibilityIT extends ESIntegTestCase {
+
+    @Test
     public void testPercolatorUpgrading() throws Exception {
         // Simulates an index created on an node before 1.4.0 where the field resolution isn't strict.
         assertAcked(prepareCreate("test")
@@ -50,7 +53,7 @@ public class PercolatorBackwardsCompatibilityIT extends ESIntegTestCase {
         PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type")
                 .setPercolateDoc(new PercolateSourceBuilder.DocBuilder().setDoc("field1", "value"))
                 .get();
-        assertMatchCount(response, numDocs);
+        assertMatchCount(response, (long) numDocs);
 
         // After upgrade indices, indices created before the upgrade allow that queries refer to fields not available in mapping
         client().prepareIndex("test", PercolatorService.TYPE_NAME)
diff --git a/core/src/test/java/org/elasticsearch/percolator/PercolatorFacetsAndAggregationsIT.java b/core/src/test/java/org/elasticsearch/percolator/PercolatorFacetsAndAggregationsIT.java
index 85783e3..c132684 100644
--- a/core/src/test/java/org/elasticsearch/percolator/PercolatorFacetsAndAggregationsIT.java
+++ b/core/src/test/java/org/elasticsearch/percolator/PercolatorFacetsAndAggregationsIT.java
@@ -31,6 +31,7 @@ import org.elasticsearch.search.aggregations.bucket.terms.Terms.Order;
 import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders;
 import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.InternalBucketMetricValue;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -50,6 +51,8 @@ import static org.hamcrest.Matchers.notNullValue;
  *
  */
 public class PercolatorFacetsAndAggregationsIT extends ESIntegTestCase {
+
+    @Test
     // Just test the integration with facets and aggregations, not the facet and aggregation functionality!
     public void testFacetsAndAggregations() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type", "field1", "type=string", "field2", "type=string"));
@@ -112,6 +115,7 @@ public class PercolatorFacetsAndAggregationsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     // Just test the integration with facets and aggregations, not the facet and aggregation functionality!
     public void testAggregationsAndPipelineAggregations() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type", "field1", "type=string", "field2", "type=string"));
@@ -184,6 +188,7 @@ public class PercolatorFacetsAndAggregationsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testSignificantAggs() throws Exception {
         client().admin().indices().prepareCreate("test").execute().actionGet();
         ensureGreen();
@@ -194,6 +199,7 @@ public class PercolatorFacetsAndAggregationsIT extends ESIntegTestCase {
         assertNoFailures(response);
     }
 
+    @Test
     public void testSingleShardAggregations() throws Exception {
         assertAcked(prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).put("SETTING_NUMBER_OF_SHARDS", 1))
                 .addMapping("type", "field1", "type=string", "field2", "type=string"));
diff --git a/core/src/test/java/org/elasticsearch/percolator/PercolatorIT.java b/core/src/test/java/org/elasticsearch/percolator/PercolatorIT.java
index f627e02..306b140 100644
--- a/core/src/test/java/org/elasticsearch/percolator/PercolatorIT.java
+++ b/core/src/test/java/org/elasticsearch/percolator/PercolatorIT.java
@@ -50,59 +50,27 @@ import org.elasticsearch.rest.RestStatus;
 import org.elasticsearch.search.highlight.HighlightBuilder;
 import org.elasticsearch.search.sort.SortBuilders;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.NavigableSet;
-import java.util.Set;
-import java.util.TreeSet;
+import java.util.*;
 
 import static org.elasticsearch.action.percolate.PercolateSourceBuilder.docBuilder;
 import static org.elasticsearch.common.settings.Settings.builder;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
-import static org.elasticsearch.common.xcontent.XContentFactory.smileBuilder;
-import static org.elasticsearch.common.xcontent.XContentFactory.yamlBuilder;
-import static org.elasticsearch.index.query.QueryBuilders.boolQuery;
-import static org.elasticsearch.index.query.QueryBuilders.constantScoreQuery;
-import static org.elasticsearch.index.query.QueryBuilders.functionScoreQuery;
-import static org.elasticsearch.index.query.QueryBuilders.hasChildQuery;
-import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
-import static org.elasticsearch.index.query.QueryBuilders.matchQuery;
-import static org.elasticsearch.index.query.QueryBuilders.nestedQuery;
-import static org.elasticsearch.index.query.QueryBuilders.rangeQuery;
-import static org.elasticsearch.index.query.QueryBuilders.termQuery;
+import static org.elasticsearch.common.xcontent.XContentFactory.*;
+import static org.elasticsearch.index.query.QueryBuilders.*;
 import static org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders.fieldValueFactorFunction;
 import static org.elasticsearch.percolator.PercolatorTestUtil.convertFromTextArray;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAllSuccessful;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertMatchCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.hamcrest.Matchers.anyOf;
-import static org.hamcrest.Matchers.arrayContaining;
-import static org.hamcrest.Matchers.arrayContainingInAnyOrder;
-import static org.hamcrest.Matchers.arrayWithSize;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.emptyArray;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class PercolatorIT extends ESIntegTestCase {
+
+    @Test
     public void testSimple1() throws Exception {
         client().admin().indices().prepareCreate("test").execute().actionGet();
         ensureGreen();
@@ -181,6 +149,7 @@ public class PercolatorIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testSimple2() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", "field1", "type=long,doc_values=true"));
         ensureGreen();
@@ -232,6 +201,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContaining("test1"));
     }
 
+    @Test
     public void testPercolateQueriesWithRouting() throws Exception {
         client().admin().indices().prepareCreate("test")
                 .setSettings(settingsBuilder().put("index.number_of_shards", 2))
@@ -273,7 +243,8 @@ public class PercolatorIT extends ESIntegTestCase {
         assertThat(response.getMatches(), arrayWithSize(50));
     }
 
-    public void testStorePeroclateQueriesOnRecreatedIndex() throws Exception {
+    @Test
+    public void storePeroclateQueriesOnRecreatedIndex() throws Exception {
         createIndex("test");
         ensureGreen();
 
@@ -302,8 +273,9 @@ public class PercolatorIT extends ESIntegTestCase {
                 .execute().actionGet();
     }
 
+    @Test
     // see #2814
-    public void testPercolateCustomAnalyzer() throws Exception {
+    public void percolateCustomAnalyzer() throws Exception {
         Builder builder = builder();
         builder.put("index.analysis.analyzer.lwhitespacecomma.tokenizer", "whitespacecomma");
         builder.putArray("index.analysis.analyzer.lwhitespacecomma.filter", "lowercase");
@@ -340,7 +312,8 @@ public class PercolatorIT extends ESIntegTestCase {
 
     }
 
-    public void testCreateIndexAndThenRegisterPercolator() throws Exception {
+    @Test
+    public void createIndexAndThenRegisterPercolator() throws Exception {
         prepareCreate("test")
                 .addMapping("type1", "field1", "type=string")
                 .get();
@@ -390,7 +363,8 @@ public class PercolatorIT extends ESIntegTestCase {
         assertHitCount(countResponse, 0l);
     }
 
-    public void testMultiplePercolators() throws Exception {
+    @Test
+    public void multiplePercolators() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", "field1", "type=string"));
         ensureGreen();
 
@@ -430,7 +404,8 @@ public class PercolatorIT extends ESIntegTestCase {
 
     }
 
-    public void testDynamicAddingRemovingQueries() throws Exception {
+    @Test
+    public void dynamicAddingRemovingQueries() throws Exception {
         assertAcked(
                 prepareCreate("test")
                         .addMapping("type1", "field1", "type=string")
@@ -504,6 +479,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertThat(percolate.getMatches(), emptyArray());
     }
 
+    @Test
     public void testPercolateStatistics() throws Exception {
         client().admin().indices().prepareCreate("test").execute().actionGet();
         ensureGreen();
@@ -588,6 +564,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertThat(percolateSumTime, greaterThan(0l));
     }
 
+    @Test
     public void testPercolatingExistingDocs() throws Exception {
         client().admin().indices().prepareCreate("test").execute().actionGet();
         ensureGreen();
@@ -661,6 +638,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(3).type(), equalTo("type"));
     }
 
+    @Test
     public void testPercolatingExistingDocs_routing() throws Exception {
         client().admin().indices().prepareCreate("test").execute().actionGet();
         ensureGreen();
@@ -726,6 +704,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContaining("4"));
     }
 
+    @Test
     public void testPercolatingExistingDocs_versionCheck() throws Exception {
         client().admin().indices().prepareCreate("test").execute().actionGet();
         ensureGreen();
@@ -786,6 +765,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContainingInAnyOrder("2", "4"));
     }
 
+    @Test
     public void testPercolateMultipleIndicesAndAliases() throws Exception {
         createIndex("test1", "test2");
         ensureGreen();
@@ -863,6 +843,7 @@ public class PercolatorIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testPercolateWithAliasFilter() throws Exception {
         assertAcked(prepareCreate("my-index")
                         .addMapping(PercolatorService.TYPE_NAME, "a", "type=string,index=not_analyzed")
@@ -940,6 +921,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertThat(response.getCount(), equalTo(0l));
     }
 
+    @Test
     public void testCountPercolation() throws Exception {
         client().admin().indices().prepareCreate("test").execute().actionGet();
         ensureGreen();
@@ -1008,6 +990,7 @@ public class PercolatorIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testCountPercolatingExistingDocs() throws Exception {
         client().admin().indices().prepareCreate("test").execute().actionGet();
         ensureGreen();
@@ -1069,6 +1052,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertThat(response.getMatches(), nullValue());
     }
 
+    @Test
     public void testPercolateSizingWithQueryAndFilter() throws Exception {
         client().admin().indices().prepareCreate("test").execute().actionGet();
         ensureGreen();
@@ -1157,6 +1141,7 @@ public class PercolatorIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testPercolateScoreAndSorting() throws Exception {
         createIndex("my-index");
         ensureGreen();
@@ -1246,6 +1231,7 @@ public class PercolatorIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testPercolateSortingWithNoSize() throws Exception {
         createIndex("my-index");
         ensureGreen();
@@ -1283,7 +1269,8 @@ public class PercolatorIT extends ESIntegTestCase {
         }
     }
 
-    public void testPercolateSortingUnsupportedField() throws Exception {
+    @Test
+    public void testPercolateSorting_unsupportedField() throws Exception {
         client().admin().indices().prepareCreate("my-index")
                 .addMapping("my-type", "field", "type=string")
                 .addMapping(PercolatorService.TYPE_NAME, "level", "type=integer", "query", "type=object,enabled=false")
@@ -1310,6 +1297,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertThat(response.getShardFailures()[0].reason(), containsString("Only _score desc is supported"));
     }
 
+    @Test
     public void testPercolateOnEmptyIndex() throws Exception {
         client().admin().indices().prepareCreate("my-index").execute().actionGet();
         ensureGreen();
@@ -1323,6 +1311,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertMatchCount(response, 0l);
     }
 
+    @Test
     public void testPercolateNotEmptyIndexButNoRefresh() throws Exception {
         client().admin().indices().prepareCreate("my-index")
                 .setSettings(settingsBuilder().put("index.refresh_interval", -1))
@@ -1342,6 +1331,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertMatchCount(response, 0l);
     }
 
+    @Test
     public void testPercolatorWithHighlighting() throws Exception {
         StringBuilder fieldMapping = new StringBuilder("type=string")
                 .append(",store=").append(randomBoolean());
@@ -1557,7 +1547,8 @@ public class PercolatorIT extends ESIntegTestCase {
         assertThat(matches[4].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown <em>fox</em> jumps over the lazy dog"));
     }
 
-    public void testPercolateNonMatchingConstantScoreQuery() throws Exception {
+    @Test
+    public void percolateNonMatchingConstantScoreQuery() throws Exception {
         assertAcked(prepareCreate("test").addMapping("doc", "message", "type=string"));
         ensureGreen();
 
@@ -1581,6 +1572,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertMatchCount(percolate, 0l);
     }
 
+    @Test
     public void testNestedPercolation() throws IOException {
         initNestedIndexAndPercolation();
         PercolateResponse response = client().preparePercolate().setPercolateDoc(new PercolateSourceBuilder.DocBuilder().setDoc(getNotMatchingNestedDoc())).setIndices("nestedindex").setDocumentType("company").get();
@@ -1590,7 +1582,8 @@ public class PercolatorIT extends ESIntegTestCase {
         assertEquals(response.getMatches()[0].getId().string(), "Q");
     }
 
-    public void testNonNestedDocumentDoesNotTriggerAssertion() throws IOException {
+    @Test
+    public void makeSureNonNestedDocumentDoesNotTriggerAssertion() throws IOException {
         initNestedIndexAndPercolation();
         XContentBuilder doc = jsonBuilder();
         doc.startObject();
@@ -1599,6 +1592,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertNoFailures(response);
     }
 
+    @Test
     public void testNestedPercolationOnExistingDoc() throws IOException {
         initNestedIndexAndPercolation();
         client().prepareIndex("nestedindex", "company", "notmatching").setSource(getNotMatchingNestedDoc()).get();
@@ -1611,6 +1605,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertEquals(response.getMatches()[0].getId().string(), "Q");
     }
 
+    @Test
     public void testPercolationWithDynamicTemplates() throws Exception {
         assertAcked(prepareCreate("idx").addMapping("type", jsonBuilder().startObject().startObject("type")
                 .field("dynamic", false)
@@ -1667,6 +1662,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertThat(percolateResponse.getMatches()[0].getId().string(), equalTo("2"));
     }
 
+    @Test
     public void testUpdateMappingDynamicallyWhilePercolating() throws Exception {
         createIndex("test");
         ensureSearchable();
@@ -1695,6 +1691,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertThat(((Map<String, String>) properties.get("field2")).get("type"), equalTo("string"));
     }
 
+    @Test
     public void testDontReportDeletedPercolatorDocs() throws Exception {
         client().admin().indices().prepareCreate("test").execute().actionGet();
         ensureGreen();
@@ -1717,6 +1714,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContainingInAnyOrder("1"));
     }
 
+    @Test
     public void testAddQueryWithNoMapping() throws Exception {
         client().admin().indices().prepareCreate("test").get();
         ensureGreen();
@@ -1740,6 +1738,7 @@ public class PercolatorIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testPercolatorQueryWithNowRange() throws Exception {
         client().admin().indices().prepareCreate("test")
                 .addMapping("my-type", "timestamp", "type=date,format=epoch_millis")
@@ -1799,6 +1798,7 @@ public class PercolatorIT extends ESIntegTestCase {
     }
 
     // issue
+    @Test
     public void testNestedDocFilter() throws IOException {
         String mapping = "{\n" +
                 "    \"doc\": {\n" +
@@ -1935,6 +1935,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertMatchCount(response, 3l);
     }
 
+    @Test
     public void testMapUnmappedFieldAsString() throws IOException{
         // If index.percolator.map_unmapped_fields_as_string is set to true, unmapped field is mapped as an analyzed string.
         Settings.Builder settings = Settings.settingsBuilder()
@@ -1953,6 +1954,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertThat(response1.getMatches(), arrayWithSize(1));
     }
 
+    @Test
     public void testFailNicelyWithInnerHits() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject()
                 .startObject("mapping")
@@ -1980,6 +1982,7 @@ public class PercolatorIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testParentChild() throws Exception {
         // We don't fail p/c queries, but those queries are unusable because only a single document can be provided in
         // the percolate api
@@ -1990,6 +1993,7 @@ public class PercolatorIT extends ESIntegTestCase {
                 .execute().actionGet();
     }
 
+    @Test
     public void testPercolateDocumentWithParentField() throws Exception {
         assertAcked(prepareCreate("index").addMapping("child", "_parent", "type=parent").addMapping("parent"));
         client().prepareIndex("index", PercolatorService.TYPE_NAME, "1")
@@ -2005,6 +2009,7 @@ public class PercolatorIT extends ESIntegTestCase {
         assertThat(response.getMatches()[0].getId().string(), equalTo("1"));
     }
 
+    @Test
     public void testFilterByNow() throws Exception {
         client().prepareIndex("index", PercolatorService.TYPE_NAME, "1")
                 .setSource(jsonBuilder().startObject().field("query", matchAllQuery()).field("created", "2015-07-10T14:41:54+0000").endObject())
@@ -2019,5 +2024,6 @@ public class PercolatorIT extends ESIntegTestCase {
                 .get();
         assertMatchCount(response, 1);
     }
+
 }
 
diff --git a/core/src/test/java/org/elasticsearch/percolator/RecoveryPercolatorIT.java b/core/src/test/java/org/elasticsearch/percolator/RecoveryPercolatorIT.java
index db66069..935b5f8 100644
--- a/core/src/test/java/org/elasticsearch/percolator/RecoveryPercolatorIT.java
+++ b/core/src/test/java/org/elasticsearch/percolator/RecoveryPercolatorIT.java
@@ -33,8 +33,7 @@ import org.elasticsearch.common.Priority;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
@@ -48,6 +47,8 @@ import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
 import static org.elasticsearch.index.query.QueryBuilders.rangeQuery;
 import static org.elasticsearch.index.query.QueryBuilders.termQuery;
 import static org.elasticsearch.percolator.PercolatorTestUtil.convertFromTextArray;
+import static org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertMatchCount;
@@ -60,11 +61,13 @@ import static org.hamcrest.Matchers.nullValue;
 
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0, numClientNodes = 0, transportClientRatio = 0)
 public class RecoveryPercolatorIT extends ESIntegTestCase {
+
     @Override
     protected int numberOfShards() {
         return 1;
     }
 
+    @Test
     public void testRestartNodePercolator1() throws Exception {
         internalCluster().startNode();
         assertAcked(prepareCreate("test").addMapping("type1", "field1", "type=string").addMapping(PercolatorService.TYPE_NAME, "color", "type=string"));
@@ -101,6 +104,7 @@ public class RecoveryPercolatorIT extends ESIntegTestCase {
         assertThat(percolate.getMatches(), arrayWithSize(1));
     }
 
+    @Test
     public void testRestartNodePercolator2() throws Exception {
         internalCluster().startNode();
         assertAcked(prepareCreate("test").addMapping("type1", "field1", "type=string").addMapping(PercolatorService.TYPE_NAME, "color", "type=string"));
@@ -172,6 +176,7 @@ public class RecoveryPercolatorIT extends ESIntegTestCase {
         assertThat(percolate.getMatches(), arrayWithSize(1));
     }
 
+    @Test
     public void testLoadingPercolateQueriesDuringCloseAndOpen() throws Exception {
         internalCluster().startNode();
         internalCluster().startNode();
@@ -218,11 +223,13 @@ public class RecoveryPercolatorIT extends ESIntegTestCase {
         assertThat(response.getMatches()[0].getId().string(), equalTo("100"));
     }
 
-    public void testSinglePercolatorRecovery() throws Exception {
+    @Test
+    public void testSinglePercolator_recovery() throws Exception {
         percolatorRecovery(false);
     }
 
-    public void testMultiPercolatorRecovery() throws Exception {
+    @Test
+    public void testMultiPercolator_recovery() throws Exception {
         percolatorRecovery(true);
     }
 
diff --git a/core/src/test/java/org/elasticsearch/percolator/TTLPercolatorIT.java b/core/src/test/java/org/elasticsearch/percolator/TTLPercolatorIT.java
index 4b4d4a8..7fbedca 100644
--- a/core/src/test/java/org/elasticsearch/percolator/TTLPercolatorIT.java
+++ b/core/src/test/java/org/elasticsearch/percolator/TTLPercolatorIT.java
@@ -30,6 +30,7 @@ import org.elasticsearch.index.mapper.MapperParsingException;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.concurrent.TimeUnit;
@@ -47,6 +48,7 @@ import static org.hamcrest.Matchers.equalTo;
  */
 @ClusterScope(scope = ESIntegTestCase.Scope.TEST)
 public class TTLPercolatorIT extends ESIntegTestCase {
+
     private static final long PURGE_INTERVAL = 200;
 
     @Override
@@ -61,6 +63,7 @@ public class TTLPercolatorIT extends ESIntegTestCase {
                 .build();
     }
 
+    @Test
     public void testPercolatingWithTimeToLive() throws Exception {
         final Client client = client();
         ensureGreen();
@@ -152,6 +155,8 @@ public class TTLPercolatorIT extends ESIntegTestCase {
         assertThat(percolateResponse.getMatches(), emptyArray());
     }
 
+
+    @Test
     public void testEnsureTTLDoesNotCreateIndex() throws IOException, InterruptedException {
         ensureGreen();
         client().admin().cluster().prepareUpdateSettings().setTransientSettings(settingsBuilder()
@@ -202,5 +207,8 @@ public class TTLPercolatorIT extends ESIntegTestCase {
         client().admin().indices().prepareCreate("test")
                 .addMapping("type1", typeMapping)
                 .execute().actionGet();
+
+
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/plugins/PluggableTransportModuleIT.java b/core/src/test/java/org/elasticsearch/plugins/PluggableTransportModuleIT.java
index 7831b7c..a6ac6bf 100644
--- a/core/src/test/java/org/elasticsearch/plugins/PluggableTransportModuleIT.java
+++ b/core/src/test/java/org/elasticsearch/plugins/PluggableTransportModuleIT.java
@@ -25,30 +25,26 @@ import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.discovery.DiscoveryModule;
 import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.transport.AssertingLocalTransport;
 import org.elasticsearch.threadpool.ThreadPool;
-import org.elasticsearch.transport.Transport;
-import org.elasticsearch.transport.TransportException;
-import org.elasticsearch.transport.TransportModule;
-import org.elasticsearch.transport.TransportRequest;
-import org.elasticsearch.transport.TransportRequestOptions;
+import org.elasticsearch.transport.*;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Collection;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
+import static org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 @ClusterScope(scope = Scope.SUITE, numDataNodes = 2)
 public class PluggableTransportModuleIT extends ESIntegTestCase {
+
     public static final AtomicInteger SENT_REQUEST_COUNTER = new AtomicInteger(0);
 
     @Override
@@ -69,6 +65,7 @@ public class PluggableTransportModuleIT extends ESIntegTestCase {
         return pluginList(CountingSentRequestsPlugin.class);
     }
 
+    @Test
     public void testThatPluginFunctionalityIsLoadedWithoutConfiguration() throws Exception {
         for (Transport transport : internalCluster().getInstances(Transport.class)) {
             assertThat(transport, instanceOf(CountingAssertingLocalTransport.class));
diff --git a/core/src/test/java/org/elasticsearch/plugins/PluginInfoTests.java b/core/src/test/java/org/elasticsearch/plugins/PluginInfoTests.java
index ba94b12f..27379df 100644
--- a/core/src/test/java/org/elasticsearch/plugins/PluginInfoTests.java
+++ b/core/src/test/java/org/elasticsearch/plugins/PluginInfoTests.java
@@ -205,7 +205,7 @@ public class PluginInfoTests extends ESTestCase {
             PluginInfo.readFromProperties(pluginDir);
             fail("expected bogus elasticsearch version exception");
         } catch (IllegalArgumentException e) {
-            assertTrue(e.getMessage().contains("version needs to contain major, minor, and revision"));
+            assertTrue(e.getMessage().contains("version needs to contain major, minor and revision"));
         }
     }
 
diff --git a/core/src/test/java/org/elasticsearch/plugins/PluginManagerCliTests.java b/core/src/test/java/org/elasticsearch/plugins/PluginManagerCliTests.java
index f16f998..f21609a 100644
--- a/core/src/test/java/org/elasticsearch/plugins/PluginManagerCliTests.java
+++ b/core/src/test/java/org/elasticsearch/plugins/PluginManagerCliTests.java
@@ -21,18 +21,19 @@ package org.elasticsearch.plugins;
 
 import org.elasticsearch.common.cli.CliTool;
 import org.elasticsearch.common.cli.CliToolTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.nio.file.Path;
 
-import static org.elasticsearch.common.cli.CliTool.ExitStatus.IO_ERROR;
 import static org.elasticsearch.common.cli.CliTool.ExitStatus.OK_AND_EXIT;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.hasItem;
-import static org.hamcrest.Matchers.is;
+import static org.elasticsearch.common.cli.CliTool.ExitStatus.IO_ERROR;
+import static org.hamcrest.Matchers.*;
 
 public class PluginManagerCliTests extends CliToolTestCase {
+
+    @Test
     public void testHelpWorks() throws IOException {
         CliToolTestCase.CaptureOutputTerminal terminal = new CliToolTestCase.CaptureOutputTerminal();
         assertThat(new PluginManagerCliParser(terminal).execute(args("--help")), is(OK_AND_EXIT));
diff --git a/core/src/test/java/org/elasticsearch/plugins/PluginManagerUnitTests.java b/core/src/test/java/org/elasticsearch/plugins/PluginManagerUnitTests.java
index 8814a21..81c834a 100644
--- a/core/src/test/java/org/elasticsearch/plugins/PluginManagerUnitTests.java
+++ b/core/src/test/java/org/elasticsearch/plugins/PluginManagerUnitTests.java
@@ -26,6 +26,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.env.Environment;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.After;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.net.URL;
@@ -43,11 +44,13 @@ import static org.hamcrest.Matchers.is;
  *
  */
 public class PluginManagerUnitTests extends ESTestCase {
+
     @After
     public void cleanSystemProperty() {
         System.clearProperty(PluginManager.PROPERTY_SUPPORT_STAGING_URLS);
     }
 
+    @Test
     public void testThatConfigDirectoryCanBeOutsideOfElasticsearchHomeDirectory() throws IOException {
         String pluginName = randomAsciiOfLength(10);
         Path homeFolder = createTempDir();
@@ -65,6 +68,7 @@ public class PluginManagerUnitTests extends ESTestCase {
         assertEquals(configDirPath, expectedDirPath);
     }
 
+    @Test
     public void testSimplifiedNaming() throws IOException {
         String pluginName = randomAsciiOfLength(10);
         PluginManager.PluginHandle handle = PluginManager.PluginHandle.parse(pluginName);
@@ -89,6 +93,7 @@ public class PluginManagerUnitTests extends ESTestCase {
         assertThat(iterator.hasNext(), is(false));
     }
 
+    @Test
     public void testOfficialPluginName() throws IOException {
         String randomPluginName = randomFrom(new ArrayList<>(PluginManager.OFFICIAL_PLUGINS));
         PluginManager.PluginHandle handle = PluginManager.PluginHandle.parse(randomPluginName);
@@ -114,6 +119,7 @@ public class PluginManagerUnitTests extends ESTestCase {
         assertThat(iterator.hasNext(), is(false));
     }
 
+    @Test
     public void testGithubPluginName() throws IOException {
         String user = randomAsciiOfLength(6);
         String pluginName = randomAsciiOfLength(10);
@@ -123,6 +129,7 @@ public class PluginManagerUnitTests extends ESTestCase {
         assertThat(handle.urls().get(0).toExternalForm(), is(new URL("https", "github.com", "/" + user + "/" + pluginName + "/" + "archive/master.zip").toExternalForm()));
     }
 
+    @Test
     public void testDownloadHelperChecksums() throws Exception {
         // Sanity check to make sure the checksum functions never change how they checksum things
         assertEquals("0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33",
diff --git a/core/src/test/java/org/elasticsearch/plugins/ResponseHeaderPluginIT.java b/core/src/test/java/org/elasticsearch/plugins/ResponseHeaderPluginIT.java
index 5d7b806..d958085 100644
--- a/core/src/test/java/org/elasticsearch/plugins/ResponseHeaderPluginIT.java
+++ b/core/src/test/java/org/elasticsearch/plugins/ResponseHeaderPluginIT.java
@@ -22,13 +22,14 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.plugins.responseheader.TestResponseHeaderPlugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.rest.client.http.HttpResponse;
+import org.junit.Test;
 
 import java.util.Collection;
 
 import static org.elasticsearch.rest.RestStatus.OK;
 import static org.elasticsearch.rest.RestStatus.UNAUTHORIZED;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.hasStatus;
 import static org.hamcrest.Matchers.equalTo;
 
@@ -37,6 +38,7 @@ import static org.hamcrest.Matchers.equalTo;
  */
 @ClusterScope(scope = Scope.SUITE, numDataNodes = 1)
 public class ResponseHeaderPluginIT extends ESIntegTestCase {
+
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return Settings.settingsBuilder()
@@ -50,6 +52,7 @@ public class ResponseHeaderPluginIT extends ESIntegTestCase {
         return pluginList(TestResponseHeaderPlugin.class);
     }
 
+    @Test
     public void testThatSettingHeadersWorks() throws Exception {
         ensureGreen();
         HttpResponse response = httpClient().method("GET").path("/_protected").execute();
@@ -60,4 +63,5 @@ public class ResponseHeaderPluginIT extends ESIntegTestCase {
         assertThat(authResponse, hasStatus(OK));
         assertThat(authResponse.getHeaders().get("Secret"), equalTo("granted"));
     }
+    
 }
\ No newline at end of file
diff --git a/core/src/test/java/org/elasticsearch/plugins/SitePluginIT.java b/core/src/test/java/org/elasticsearch/plugins/SitePluginIT.java
index 4609ec1..6e62fd9 100644
--- a/core/src/test/java/org/elasticsearch/plugins/SitePluginIT.java
+++ b/core/src/test/java/org/elasticsearch/plugins/SitePluginIT.java
@@ -25,9 +25,9 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.http.HttpServerTransport;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.rest.client.http.HttpRequestBuilder;
 import org.elasticsearch.test.rest.client.http.HttpResponse;
+import org.junit.Test;
 
 import java.nio.file.Path;
 import java.util.ArrayList;
@@ -35,10 +35,8 @@ import java.util.List;
 import java.util.Locale;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.elasticsearch.rest.RestStatus.FORBIDDEN;
-import static org.elasticsearch.rest.RestStatus.MOVED_PERMANENTLY;
-import static org.elasticsearch.rest.RestStatus.NOT_FOUND;
-import static org.elasticsearch.rest.RestStatus.OK;
+import static org.elasticsearch.rest.RestStatus.*;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.hasStatus;
 import static org.hamcrest.Matchers.containsString;
 
@@ -47,6 +45,8 @@ import static org.hamcrest.Matchers.containsString;
  */
 @ClusterScope(scope = Scope.SUITE, numDataNodes = 1)
 public class SitePluginIT extends ESIntegTestCase {
+
+
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         Path pluginDir = getDataPath("/org/elasticsearch/test_plugins");
@@ -57,13 +57,13 @@ public class SitePluginIT extends ESIntegTestCase {
                 .build();
     }
 
-    @Override
     public HttpRequestBuilder httpClient() {
         RequestConfig.Builder builder = RequestConfig.custom().setRedirectsEnabled(false);
         CloseableHttpClient httpClient = HttpClients.custom().setDefaultRequestConfig(builder.build()).build();
         return new HttpRequestBuilder(httpClient).httpTransport(internalCluster().getDataNodeInstance(HttpServerTransport.class));
     }
 
+    @Test
     public void testRedirectSitePlugin() throws Exception {
         // We use an HTTP Client to test redirection
         HttpResponse response = httpClient().method("GET").path("/_plugin/dummy").execute();
@@ -79,6 +79,7 @@ public class SitePluginIT extends ESIntegTestCase {
     /**
      * Test direct access to an existing file (index.html)
      */
+    @Test
     public void testAnyPage() throws Exception {
         HttpResponse response = httpClient().path("/_plugin/dummy/index.html").execute();
         assertThat(response, hasStatus(OK));
@@ -88,6 +89,7 @@ public class SitePluginIT extends ESIntegTestCase {
     /**
      * Test normalizing of path
      */
+    @Test
     public void testThatPathsAreNormalized() throws Exception {
         // more info: https://www.owasp.org/index.php/Path_Traversal
         List<String> notFoundUris = new ArrayList<>();
@@ -116,6 +118,7 @@ public class SitePluginIT extends ESIntegTestCase {
      * Test case for #4845: https://github.com/elasticsearch/elasticsearch/issues/4845
      * Serving _site plugins do not pick up on index.html for sub directories
      */
+    @Test
     public void testWelcomePageInSubDirs() throws Exception {
         HttpResponse response = httpClient().path("/_plugin/subdir/dir/").execute();
         assertThat(response, hasStatus(OK));
diff --git a/core/src/test/java/org/elasticsearch/plugins/SitePluginRelativePathConfigIT.java b/core/src/test/java/org/elasticsearch/plugins/SitePluginRelativePathConfigIT.java
index 1cde90d..ed30626 100644
--- a/core/src/test/java/org/elasticsearch/plugins/SitePluginRelativePathConfigIT.java
+++ b/core/src/test/java/org/elasticsearch/plugins/SitePluginRelativePathConfigIT.java
@@ -27,6 +27,7 @@ import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.rest.client.http.HttpRequestBuilder;
 import org.elasticsearch.test.rest.client.http.HttpResponse;
+import org.junit.Test;
 
 import java.nio.file.Path;
 
@@ -38,6 +39,7 @@ import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.hasStatus;
 
 @ClusterScope(scope = SUITE, numDataNodes = 1)
 public class SitePluginRelativePathConfigIT extends ESIntegTestCase {
+
     private final Path root = PathUtils.get(".").toAbsolutePath().getRoot();
 
     @Override
@@ -58,6 +60,7 @@ public class SitePluginRelativePathConfigIT extends ESIntegTestCase {
                 .build();
     }
 
+    @Test
     public void testThatRelativePathsDontAffectPlugins() throws Exception {
         HttpResponse response = httpClient().method("GET").path("/_plugin/dummy/").execute();
         assertThat(response, hasStatus(OK));
@@ -80,7 +83,6 @@ public class SitePluginRelativePathConfigIT extends ESIntegTestCase {
         return sb.toString();
     }
 
-    @Override
     public HttpRequestBuilder httpClient() {
         CloseableHttpClient httpClient = HttpClients.createDefault();
         return new HttpRequestBuilder(httpClient).httpTransport(internalCluster().getDataNodeInstance(HttpServerTransport.class));
diff --git a/core/src/test/java/org/elasticsearch/recovery/FullRollingRestartIT.java b/core/src/test/java/org/elasticsearch/recovery/FullRollingRestartIT.java
index cab052a..4ce213c 100644
--- a/core/src/test/java/org/elasticsearch/recovery/FullRollingRestartIT.java
+++ b/core/src/test/java/org/elasticsearch/recovery/FullRollingRestartIT.java
@@ -27,9 +27,10 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.discovery.zen.ZenDiscovery;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
 
 /**
@@ -37,6 +38,7 @@ import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitC
  */
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0, transportClientRatio = 0.0)
 public class FullRollingRestartIT extends ESIntegTestCase {
+
     protected void assertTimeout(ClusterHealthRequestBuilder requestBuilder) {
         ClusterHealthResponse clusterHealth = requestBuilder.get();
         if (clusterHealth.isTimedOut()) {
@@ -50,6 +52,7 @@ public class FullRollingRestartIT extends ESIntegTestCase {
         return 1;
     }
 
+    @Test
     public void testFullRollingRestart() throws Exception {
         Settings settings = Settings.builder().put(ZenDiscovery.SETTING_JOIN_TIMEOUT, "30s").build();
         internalCluster().startNode(settings);
diff --git a/core/src/test/java/org/elasticsearch/recovery/RecoveriesCollectionTests.java b/core/src/test/java/org/elasticsearch/recovery/RecoveriesCollectionTests.java
index 4cad0b2..5a5f316 100644
--- a/core/src/test/java/org/elasticsearch/recovery/RecoveriesCollectionTests.java
+++ b/core/src/test/java/org/elasticsearch/recovery/RecoveriesCollectionTests.java
@@ -34,6 +34,7 @@ import org.elasticsearch.indices.recovery.RecoveryStatus;
 import org.elasticsearch.indices.recovery.RecoveryTarget;
 import org.elasticsearch.test.ESSingleNodeTestCase;
 import org.elasticsearch.threadpool.ThreadPool;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.concurrent.CountDownLatch;
@@ -45,6 +46,7 @@ import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.lessThan;
 
 public class RecoveriesCollectionTests extends ESSingleNodeTestCase {
+
     final static RecoveryTarget.RecoveryListener listener = new RecoveryTarget.RecoveryListener() {
         @Override
         public void onRecoveryDone(RecoveryState state) {
@@ -57,6 +59,7 @@ public class RecoveriesCollectionTests extends ESSingleNodeTestCase {
         }
     };
 
+    @Test
     public void testLastAccessTimeUpdate() throws Exception {
         createIndex();
         final RecoveriesCollection collection = new RecoveriesCollection(logger, getInstanceFromNode(ThreadPool.class));
@@ -76,6 +79,7 @@ public class RecoveriesCollectionTests extends ESSingleNodeTestCase {
         }
     }
 
+    @Test
     public void testRecoveryTimeout() throws InterruptedException {
         createIndex();
         final RecoveriesCollection collection = new RecoveriesCollection(logger, getInstanceFromNode(ThreadPool.class));
@@ -102,6 +106,7 @@ public class RecoveriesCollectionTests extends ESSingleNodeTestCase {
 
     }
 
+    @Test
     public void testRecoveryCancellationNoPredicate() throws Exception {
         createIndex();
         final RecoveriesCollection collection = new RecoveriesCollection(logger, getInstanceFromNode(ThreadPool.class));
@@ -117,6 +122,7 @@ public class RecoveriesCollectionTests extends ESSingleNodeTestCase {
         }
     }
 
+    @Test
     public void testRecoveryCancellationPredicate() throws Exception {
         createIndex();
         final RecoveriesCollection collection = new RecoveriesCollection(logger, getInstanceFromNode(ThreadPool.class));
diff --git a/core/src/test/java/org/elasticsearch/recovery/RecoverySettingsTests.java b/core/src/test/java/org/elasticsearch/recovery/RecoverySettingsTests.java
index b028804..a722e3a 100644
--- a/core/src/test/java/org/elasticsearch/recovery/RecoverySettingsTests.java
+++ b/core/src/test/java/org/elasticsearch/recovery/RecoverySettingsTests.java
@@ -22,15 +22,18 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.indices.recovery.RecoverySettings;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.util.concurrent.TimeUnit;
 
 public class RecoverySettingsTests extends ESSingleNodeTestCase {
+
     @Override
     protected boolean resetNodeAfterTest() {
         return true;
     }
 
+    @Test
     public void testAllSettingsAreDynamicallyUpdatable() {
         innerTestSettings(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE, randomIntBetween(1, 200), ByteSizeUnit.BYTES, new Validator() {
             @Override
diff --git a/core/src/test/java/org/elasticsearch/recovery/RecoveryWhileUnderLoadIT.java b/core/src/test/java/org/elasticsearch/recovery/RecoveryWhileUnderLoadIT.java
index 8c0c734..29eb826 100644
--- a/core/src/test/java/org/elasticsearch/recovery/RecoveryWhileUnderLoadIT.java
+++ b/core/src/test/java/org/elasticsearch/recovery/RecoveryWhileUnderLoadIT.java
@@ -32,6 +32,7 @@ import org.elasticsearch.index.translog.Translog;
 import org.elasticsearch.index.translog.TranslogConfig;
 import org.elasticsearch.test.BackgroundIndexer;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.concurrent.TimeUnit;
@@ -46,9 +47,11 @@ import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitC
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoTimeout;
 
 public class RecoveryWhileUnderLoadIT extends ESIntegTestCase {
+
     private final ESLogger logger = Loggers.getLogger(RecoveryWhileUnderLoadIT.class);
 
-    public void testRecoverWhileUnderLoadAllocateReplicasTest() throws Exception {
+    @Test
+    public void recoverWhileUnderLoadAllocateReplicasTest() throws Exception {
         logger.info("--> creating test index ...");
         int numberOfShards = numberOfShards();
         assertAcked(prepareCreate("test", 1, settingsBuilder().put(SETTING_NUMBER_OF_SHARDS, numberOfShards).put(SETTING_NUMBER_OF_REPLICAS, 1).put(TranslogConfig.INDEX_TRANSLOG_DURABILITY, Translog.Durabilty.ASYNC)));
@@ -101,7 +104,8 @@ public class RecoveryWhileUnderLoadIT extends ESIntegTestCase {
         }
     }
 
-    public void testRecoverWhileUnderLoadAllocateReplicasRelocatePrimariesTest() throws Exception {
+    @Test
+    public void recoverWhileUnderLoadAllocateReplicasRelocatePrimariesTest() throws Exception {
         logger.info("--> creating test index ...");
         int numberOfShards = numberOfShards();
         assertAcked(prepareCreate("test", 1, settingsBuilder().put(SETTING_NUMBER_OF_SHARDS, numberOfShards).put(SETTING_NUMBER_OF_REPLICAS, 1).put(TranslogConfig.INDEX_TRANSLOG_DURABILITY, Translog.Durabilty.ASYNC)));
@@ -152,7 +156,8 @@ public class RecoveryWhileUnderLoadIT extends ESIntegTestCase {
         }
     }
 
-    public void testRecoverWhileUnderLoadWithReducedAllowedNodes() throws Exception {
+    @Test
+    public void recoverWhileUnderLoadWithReducedAllowedNodes() throws Exception {
         logger.info("--> creating test index ...");
         int numberOfShards = numberOfShards();
         assertAcked(prepareCreate("test", 2, settingsBuilder().put(SETTING_NUMBER_OF_SHARDS, numberOfShards).put(SETTING_NUMBER_OF_REPLICAS, 1).put(TranslogConfig.INDEX_TRANSLOG_DURABILITY, Translog.Durabilty.ASYNC)));
@@ -221,7 +226,8 @@ public class RecoveryWhileUnderLoadIT extends ESIntegTestCase {
         }
     }
 
-    public void testRecoverWhileRelocating() throws Exception {
+    @Test
+    public void recoverWhileRelocating() throws Exception {
         final int numShards = between(2, 10);
         final int numReplicas = 0;
         logger.info("--> creating test index ...");
diff --git a/core/src/test/java/org/elasticsearch/recovery/RelocationIT.java b/core/src/test/java/org/elasticsearch/recovery/RelocationIT.java
index 5f99f80..2eea223 100644
--- a/core/src/test/java/org/elasticsearch/recovery/RelocationIT.java
+++ b/core/src/test/java/org/elasticsearch/recovery/RelocationIT.java
@@ -21,7 +21,6 @@ package org.elasticsearch.recovery;
 
 import com.carrotsearch.hppc.IntHashSet;
 import com.carrotsearch.hppc.procedures.IntProcedure;
-
 import org.apache.lucene.index.IndexFileNames;
 import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
 import org.elasticsearch.action.index.IndexRequestBuilder;
@@ -52,14 +51,10 @@ import org.elasticsearch.search.SearchHits;
 import org.elasticsearch.test.BackgroundIndexer;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.elasticsearch.test.transport.MockTransportService;
-import org.elasticsearch.transport.Transport;
-import org.elasticsearch.transport.TransportException;
-import org.elasticsearch.transport.TransportRequest;
-import org.elasticsearch.transport.TransportRequestOptions;
-import org.elasticsearch.transport.TransportService;
+import org.elasticsearch.transport.*;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.nio.file.FileVisitResult;
@@ -76,11 +71,10 @@ import java.util.concurrent.TimeUnit;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.startsWith;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
@@ -94,6 +88,7 @@ public class RelocationIT extends ESIntegTestCase {
         return pluginList(MockTransportService.TestPlugin.class);
     }
 
+    @Test
     public void testSimpleRelocationNoIndexing() {
         logger.info("--> starting [node1] ...");
         final String node_1 = internalCluster().startNode();
@@ -141,6 +136,7 @@ public class RelocationIT extends ESIntegTestCase {
         assertThat(client().prepareSearch("test").setSize(0).execute().actionGet().getHits().totalHits(), equalTo(20l));
     }
 
+    @Test
     public void testRelocationWhileIndexingRandom() throws Exception {
         int numberOfRelocations = scaledRandomIntBetween(1, rarely() ? 10 : 4);
         int numberOfReplicas = randomBoolean() ? 0 : 1;
@@ -249,6 +245,7 @@ public class RelocationIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testRelocationWhileRefreshing() throws Exception {
         int numberOfRelocations = scaledRandomIntBetween(1, rarely() ? 10 : 4);
         int numberOfReplicas = randomBoolean() ? 0 : 1;
@@ -348,6 +345,7 @@ public class RelocationIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testCancellationCleansTempFiles() throws Exception {
         final String indexName = "test";
 
diff --git a/core/src/test/java/org/elasticsearch/recovery/SimpleRecoveryIT.java b/core/src/test/java/org/elasticsearch/recovery/SimpleRecoveryIT.java
index 26291b7..d19117e 100644
--- a/core/src/test/java/org/elasticsearch/recovery/SimpleRecoveryIT.java
+++ b/core/src/test/java/org/elasticsearch/recovery/SimpleRecoveryIT.java
@@ -24,16 +24,15 @@ import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;
 import org.elasticsearch.action.get.GetResponse;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.client.Requests.flushRequest;
-import static org.elasticsearch.client.Requests.getRequest;
-import static org.elasticsearch.client.Requests.indexRequest;
-import static org.elasticsearch.client.Requests.refreshRequest;
+import static org.elasticsearch.client.Requests.*;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.hamcrest.Matchers.equalTo;
 
 public class SimpleRecoveryIT extends ESIntegTestCase {
+
     @Override
     public Settings indexSettings() {
         return settingsBuilder().put(super.indexSettings()).put(recoverySettings()).build();
@@ -48,6 +47,7 @@ public class SimpleRecoveryIT extends ESIntegTestCase {
         return 1;
     }
 
+    @Test
     public void testSimpleRecovery() throws Exception {
         assertAcked(prepareCreate("test", 1).execute().actionGet());
 
diff --git a/core/src/test/java/org/elasticsearch/recovery/TruncatedRecoveryIT.java b/core/src/test/java/org/elasticsearch/recovery/TruncatedRecoveryIT.java
index df0f905..2d2bddb 100644
--- a/core/src/test/java/org/elasticsearch/recovery/TruncatedRecoveryIT.java
+++ b/core/src/test/java/org/elasticsearch/recovery/TruncatedRecoveryIT.java
@@ -37,10 +37,8 @@ import org.elasticsearch.indices.recovery.RecoveryTarget;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.transport.MockTransportService;
-import org.elasticsearch.transport.TransportException;
-import org.elasticsearch.transport.TransportRequest;
-import org.elasticsearch.transport.TransportRequestOptions;
-import org.elasticsearch.transport.TransportService;
+import org.elasticsearch.transport.*;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -58,6 +56,7 @@ import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 @ESIntegTestCase.ClusterScope(numDataNodes = 2, numClientNodes = 0, scope = ESIntegTestCase.Scope.TEST)
 @SuppressCodecs("*") // test relies on exact file extensions
 public class TruncatedRecoveryIT extends ESIntegTestCase {
+
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         Settings.Builder builder = Settings.builder()
@@ -77,6 +76,7 @@ public class TruncatedRecoveryIT extends ESIntegTestCase {
      * we just throw an exception to make sure the recovery fails and we leave some half baked files on the target.
      * Later we allow full recovery to ensure we can still recover and don't run into corruptions.
      */
+    @Test
     public void testCancelRecoveryAndResume() throws Exception {
         NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats().get();
         List<NodeStats> dataNodeStats = new ArrayList<>();
@@ -115,7 +115,7 @@ public class TruncatedRecoveryIT extends ESIntegTestCase {
         ensureGreen();
         // ensure we have flushed segments and make them a big one via optimize
         client().admin().indices().prepareFlush().setForce(true).setWaitIfOngoing(true).get();
-        client().admin().indices().prepareOptimize().setMaxNumSegments(1).setFlush(true).get();
+        client().admin().indices().prepareForceMerge().setMaxNumSegments(1).setFlush(true).get();
 
         final CountDownLatch latch = new CountDownLatch(1);
         final AtomicBoolean truncate = new AtomicBoolean(true);
@@ -155,4 +155,4 @@ public class TruncatedRecoveryIT extends ESIntegTestCase {
             assertHitCount(client().prepareSearch().setQuery(QueryBuilders.termQuery("the_id", id)).get(), 1);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/core/src/test/java/org/elasticsearch/rest/BytesRestResponseTests.java b/core/src/test/java/org/elasticsearch/rest/BytesRestResponseTests.java
index 0a40da3..76d08ea 100644
--- a/core/src/test/java/org/elasticsearch/rest/BytesRestResponseTests.java
+++ b/core/src/test/java/org/elasticsearch/rest/BytesRestResponseTests.java
@@ -28,20 +28,19 @@ import org.elasticsearch.search.SearchShardTarget;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.rest.FakeRestRequest;
 import org.elasticsearch.transport.RemoteTransportException;
+import org.junit.Test;
 
 import java.io.FileNotFoundException;
 import java.io.IOException;
 
-import static org.hamcrest.Matchers.contains;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class BytesRestResponseTests extends ESTestCase {
 
+    @Test
     public void testWithHeaders() throws Exception {
         RestRequest request = new FakeRestRequest();
         RestChannel channel = randomBoolean() ? new DetailedExceptionRestChannel(request) : new SimpleExceptionRestChannel(request);
@@ -53,6 +52,7 @@ public class BytesRestResponseTests extends ESTestCase {
         assertThat(response.getHeaders().get("n2"), contains("v21", "v22"));
     }
 
+    @Test
     public void testSimpleExceptionMessage() throws Exception {
         RestRequest request = new FakeRestRequest();
         RestChannel channel = new SimpleExceptionRestChannel(request);
@@ -66,6 +66,7 @@ public class BytesRestResponseTests extends ESTestCase {
         assertThat(text, not(containsString("error_trace")));
     }
 
+    @Test
     public void testDetailedExceptionMessage() throws Exception {
         RestRequest request = new FakeRestRequest();
         RestChannel channel = new DetailedExceptionRestChannel(request);
@@ -77,6 +78,7 @@ public class BytesRestResponseTests extends ESTestCase {
         assertThat(text, containsString("{\"type\":\"file_not_found_exception\",\"reason\":\"/foo/bar\"}"));
     }
 
+    @Test
     public void testNonElasticsearchExceptionIsNotShownAsSimpleMessage() throws Exception {
         RestRequest request = new FakeRestRequest();
         RestChannel channel = new SimpleExceptionRestChannel(request);
@@ -90,6 +92,7 @@ public class BytesRestResponseTests extends ESTestCase {
         assertThat(text, containsString("\"error\":\"No ElasticsearchException found\""));
     }
 
+    @Test
     public void testErrorTrace() throws Exception {
         RestRequest request = new FakeRestRequest();
         request.params().put("error_trace", "true");
@@ -120,6 +123,7 @@ public class BytesRestResponseTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testNullThrowable() throws Exception {
         RestRequest request = new FakeRestRequest();
         RestChannel channel = new SimpleExceptionRestChannel(request);
@@ -130,6 +134,7 @@ public class BytesRestResponseTests extends ESTestCase {
         assertThat(text, not(containsString("error_trace")));
     }
 
+    @Test
     public void testConvert() throws IOException {
         RestRequest request = new FakeRestRequest();
         RestChannel channel = new DetailedExceptionRestChannel(request);
diff --git a/core/src/test/java/org/elasticsearch/rest/CorsRegexDefaultIT.java b/core/src/test/java/org/elasticsearch/rest/CorsRegexDefaultIT.java
index 2b7533c..fa7eccd 100644
--- a/core/src/test/java/org/elasticsearch/rest/CorsRegexDefaultIT.java
+++ b/core/src/test/java/org/elasticsearch/rest/CorsRegexDefaultIT.java
@@ -22,10 +22,9 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.node.Node;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.rest.client.http.HttpResponse;
+import org.junit.Test;
 
-import static org.hamcrest.Matchers.hasKey;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.not;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
@@ -39,6 +38,7 @@ public class CorsRegexDefaultIT extends ESIntegTestCase {
             .put(super.nodeSettings(nodeOrdinal)).build();
     }
 
+    @Test
     public void testCorsSettingDefaultBehaviourDoesNotReturnAnything() throws Exception {
         String corsValue = "http://localhost:9200";
         HttpResponse response = httpClient().method("GET").path("/").addHeader("User-Agent", "Mozilla Bar").addHeader("Origin", corsValue).execute();
@@ -48,6 +48,7 @@ public class CorsRegexDefaultIT extends ESIntegTestCase {
         assertThat(response.getHeaders(), not(hasKey("Access-Control-Allow-Credentials")));
     }
 
+    @Test
     public void testThatOmittingCorsHeaderDoesNotReturnAnything() throws Exception {
         HttpResponse response = httpClient().method("GET").path("/").execute();
 
diff --git a/core/src/test/java/org/elasticsearch/rest/CorsRegexIT.java b/core/src/test/java/org/elasticsearch/rest/CorsRegexIT.java
index 3828ae0..d0e0282 100644
--- a/core/src/test/java/org/elasticsearch/rest/CorsRegexIT.java
+++ b/core/src/test/java/org/elasticsearch/rest/CorsRegexIT.java
@@ -23,16 +23,16 @@ import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.node.Node;
 import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.rest.client.http.HttpResponse;
+import org.junit.Test;
 
-import static org.elasticsearch.http.netty.NettyHttpServerTransport.SETTING_CORS_ALLOW_CREDENTIALS;
 import static org.elasticsearch.http.netty.NettyHttpServerTransport.SETTING_CORS_ALLOW_ORIGIN;
+import static org.elasticsearch.http.netty.NettyHttpServerTransport.SETTING_CORS_ALLOW_CREDENTIALS;
 import static org.elasticsearch.http.netty.NettyHttpServerTransport.SETTING_CORS_ENABLED;
-import static org.hamcrest.Matchers.hasKey;
+import static org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
+import static org.hamcrest.Matchers.*;
 import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.not;
 
 /**
  *
@@ -53,6 +53,7 @@ public class CorsRegexIT extends ESIntegTestCase {
                 .build();
     }
 
+    @Test
     public void testThatRegularExpressionWorksOnMatch() throws Exception {
         String corsValue = "http://localhost:9200";
         HttpResponse response = httpClient().method("GET").path("/").addHeader("User-Agent", "Mozilla Bar").addHeader("Origin", corsValue).execute();
@@ -65,29 +66,34 @@ public class CorsRegexIT extends ESIntegTestCase {
         assertThat(response.getHeaders().get("Access-Control-Allow-Credentials"), is("true"));
     }
 
+    @Test
     public void testThatRegularExpressionReturnsNullOnNonMatch() throws Exception {
         HttpResponse response = httpClient().method("GET").path("/").addHeader("User-Agent", "Mozilla Bar").addHeader("Origin", "http://evil-host:9200").execute();
         assertResponseWithOriginheader(response, "null");
     }
 
+    @Test
     public void testThatSendingNoOriginHeaderReturnsNoAccessControlHeader() throws Exception {
         HttpResponse response = httpClient().method("GET").path("/").addHeader("User-Agent", "Mozilla Bar").execute();
         assertThat(response.getStatusCode(), is(200));
         assertThat(response.getHeaders(), not(hasKey("Access-Control-Allow-Origin")));
     }
 
+    @Test
     public void testThatRegularExpressionIsNotAppliedWithoutCorrectBrowserOnMatch() throws Exception {
         HttpResponse response = httpClient().method("GET").path("/").execute();
         assertThat(response.getStatusCode(), is(200));
         assertThat(response.getHeaders(), not(hasKey("Access-Control-Allow-Origin")));
     }
 
+    @Test
     public void testThatPreFlightRequestWorksOnMatch() throws Exception {
         String corsValue = "http://localhost:9200";
         HttpResponse response = httpClient().method("OPTIONS").path("/").addHeader("User-Agent", "Mozilla Bar").addHeader("Origin", corsValue).execute();
         assertResponseWithOriginheader(response, corsValue);
     }
 
+    @Test
     public void testThatPreFlightRequestReturnsNullOnNonMatch() throws Exception {
         HttpResponse response = httpClient().method("OPTIONS").path("/").addHeader("User-Agent", "Mozilla Bar").addHeader("Origin", "http://evil-host:9200").execute();
         assertResponseWithOriginheader(response, "null");
diff --git a/core/src/test/java/org/elasticsearch/rest/HeadersAndContextCopyClientTests.java b/core/src/test/java/org/elasticsearch/rest/HeadersAndContextCopyClientTests.java
index 2a82992..b099f97 100644
--- a/core/src/test/java/org/elasticsearch/rest/HeadersAndContextCopyClientTests.java
+++ b/core/src/test/java/org/elasticsearch/rest/HeadersAndContextCopyClientTests.java
@@ -36,6 +36,7 @@ import org.elasticsearch.common.collect.ImmutableOpenMap;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.rest.FakeRestRequest;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.HashMap;
@@ -52,6 +53,7 @@ import static org.hamcrest.Matchers.is;
 
 public class HeadersAndContextCopyClientTests extends ESTestCase {
 
+    @Test
     public void testRegisterRelevantHeaders() throws InterruptedException {
 
         final RestController restController = new RestController(Settings.EMPTY);
@@ -89,6 +91,7 @@ public class HeadersAndContextCopyClientTests extends ESTestCase {
         assertThat(relevantHeaders, equalTo(headersArray));
     }
 
+    @Test
     public void testCopyHeadersRequest() {
         Map<String, String> transportHeaders = randomHeaders(randomIntBetween(0, 10));
         Map<String, String> restHeaders = randomHeaders(randomIntBetween(0, 10));
@@ -134,6 +137,7 @@ public class HeadersAndContextCopyClientTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testCopyHeadersClusterAdminRequest() {
         Map<String, String> transportHeaders = randomHeaders(randomIntBetween(0, 10));
         Map<String, String> restHeaders = randomHeaders(randomIntBetween(0, 10));
@@ -179,6 +183,7 @@ public class HeadersAndContextCopyClientTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testCopyHeadersIndicesAdminRequest() {
         Map<String, String> transportHeaders = randomHeaders(randomIntBetween(0, 10));
         Map<String, String> restHeaders = randomHeaders(randomIntBetween(0, 10));
@@ -224,6 +229,7 @@ public class HeadersAndContextCopyClientTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testCopyHeadersRequestBuilder() {
         Map<String, String> transportHeaders = randomHeaders(randomIntBetween(0, 10));
         Map<String, String> restHeaders = randomHeaders(randomIntBetween(0, 10));
@@ -264,6 +270,7 @@ public class HeadersAndContextCopyClientTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testCopyHeadersClusterAdminRequestBuilder() {
         Map<String, String> transportHeaders = randomHeaders(randomIntBetween(0, 10));
         Map<String, String> restHeaders = randomHeaders(randomIntBetween(0, 10));
@@ -303,6 +310,7 @@ public class HeadersAndContextCopyClientTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testCopyHeadersIndicesAdminRequestBuilder() {
         Map<String, String> transportHeaders = randomHeaders(randomIntBetween(0, 10));
         Map<String, String> restHeaders = randomHeaders(randomIntBetween(0, 10));
diff --git a/core/src/test/java/org/elasticsearch/rest/RestFilterChainTests.java b/core/src/test/java/org/elasticsearch/rest/RestFilterChainTests.java
index b66d00c..5760c28 100644
--- a/core/src/test/java/org/elasticsearch/rest/RestFilterChainTests.java
+++ b/core/src/test/java/org/elasticsearch/rest/RestFilterChainTests.java
@@ -26,6 +26,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.rest.FakeRestRequest;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -41,6 +42,8 @@ import java.util.concurrent.atomic.AtomicInteger;
 import static org.hamcrest.CoreMatchers.equalTo;
 
 public class RestFilterChainTests extends ESTestCase {
+
+    @Test
     public void testRestFilters() throws InterruptedException {
 
         RestController restController = new RestController(Settings.EMPTY);
@@ -117,6 +120,7 @@ public class RestFilterChainTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testTooManyContinueProcessing() throws InterruptedException {
 
         final int additionalContinueCount = randomInt(10);
diff --git a/core/src/test/java/org/elasticsearch/rest/RestRequestTests.java b/core/src/test/java/org/elasticsearch/rest/RestRequestTests.java
index 8e60b28..12bbef4 100644
--- a/core/src/test/java/org/elasticsearch/rest/RestRequestTests.java
+++ b/core/src/test/java/org/elasticsearch/rest/RestRequestTests.java
@@ -22,16 +22,18 @@ package org.elasticsearch.rest;
 import org.elasticsearch.common.bytes.BytesReference;
 import org.elasticsearch.common.collect.ImmutableOpenMap;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.Map;
 
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class RestRequestTests extends ESTestCase {
+
+    @Test
     public void testContext() throws Exception {
         int count = randomInt(10);
         Request request = new Request();
diff --git a/core/src/test/java/org/elasticsearch/rest/action/support/RestTableTests.java b/core/src/test/java/org/elasticsearch/rest/action/support/RestTableTests.java
index 161668d..237c62d 100644
--- a/core/src/test/java/org/elasticsearch/rest/action/support/RestTableTests.java
+++ b/core/src/test/java/org/elasticsearch/rest/action/support/RestTableTests.java
@@ -23,14 +23,13 @@ import org.elasticsearch.common.Table;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.rest.FakeRestRequest;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
 
 import static org.elasticsearch.rest.action.support.RestTable.buildDisplayHeaders;
-import static org.hamcrest.Matchers.contains;
-import static org.hamcrest.Matchers.hasItem;
-import static org.hamcrest.Matchers.not;
+import static org.hamcrest.Matchers.*;
 
 public class RestTableTests extends ESTestCase {
 
@@ -52,6 +51,7 @@ public class RestTableTests extends ESTestCase {
         table.endHeaders();
     }
 
+    @Test
     public void testThatDisplayHeadersSupportWildcards() throws Exception {
         restRequest.params().put("h", "bulk*");
         List<RestTable.DisplayHeader> headers = buildDisplayHeaders(table, restRequest);
@@ -61,6 +61,7 @@ public class RestTableTests extends ESTestCase {
         assertThat(headerNames, not(hasItem("unmatched")));
     }
 
+    @Test
     public void testThatDisplayHeadersAreNotAddedTwice() throws Exception {
         restRequest.params().put("h", "nonexistent,bulk*,bul*");
         List<RestTable.DisplayHeader> headers = buildDisplayHeaders(table, restRequest);
diff --git a/core/src/test/java/org/elasticsearch/rest/util/RestUtilsTests.java b/core/src/test/java/org/elasticsearch/rest/util/RestUtilsTests.java
index e60a120..c095b8d 100644
--- a/core/src/test/java/org/elasticsearch/rest/util/RestUtilsTests.java
+++ b/core/src/test/java/org/elasticsearch/rest/util/RestUtilsTests.java
@@ -21,6 +21,7 @@ package org.elasticsearch.rest.util;
 
 import org.elasticsearch.rest.support.RestUtils;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.HashMap;
 import java.util.Locale;
@@ -34,6 +35,7 @@ import static org.hamcrest.Matchers.*;
  */
 public class RestUtilsTests extends ESTestCase {
 
+    @Test
     public void testDecodeQueryString() {
         Map<String, String> params = new HashMap<>();
 
@@ -60,6 +62,7 @@ public class RestUtilsTests extends ESTestCase {
         assertThat(params.size(), equalTo(0));
     }
 
+    @Test
     public void testDecodeQueryStringEdgeCases() {
         Map<String, String> params = new HashMap<>();
 
@@ -120,6 +123,7 @@ public class RestUtilsTests extends ESTestCase {
         assertThat(params.get("p1"), equalTo("v1"));
     }
 
+    @Test
     public void testCorsSettingIsARegex() {
         assertCorsSettingRegex("/foo/", Pattern.compile("foo"));
         assertCorsSettingRegex("/.*/", Pattern.compile(".*"));
diff --git a/core/src/test/java/org/elasticsearch/routing/AliasResolveRoutingIT.java b/core/src/test/java/org/elasticsearch/routing/AliasResolveRoutingIT.java
index 2740dd7..2d82329 100644
--- a/core/src/test/java/org/elasticsearch/routing/AliasResolveRoutingIT.java
+++ b/core/src/test/java/org/elasticsearch/routing/AliasResolveRoutingIT.java
@@ -23,6 +23,7 @@ import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;
 import org.elasticsearch.common.Priority;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -37,6 +38,8 @@ import static org.hamcrest.Matchers.nullValue;
  *
  */
 public class AliasResolveRoutingIT extends ESIntegTestCase {
+
+    @Test
     public void testResolveIndexRouting() throws Exception {
         createIndex("test1");
         createIndex("test2");
@@ -75,6 +78,8 @@ public class AliasResolveRoutingIT extends ESIntegTestCase {
         }
     }
 
+
+    @Test
     public void testResolveSearchRouting() throws Exception {
         createIndex("test1");
         createIndex("test2");
diff --git a/core/src/test/java/org/elasticsearch/routing/AliasRoutingIT.java b/core/src/test/java/org/elasticsearch/routing/AliasRoutingIT.java
index 9fc6bcf..5538def 100644
--- a/core/src/test/java/org/elasticsearch/routing/AliasRoutingIT.java
+++ b/core/src/test/java/org/elasticsearch/routing/AliasRoutingIT.java
@@ -24,6 +24,7 @@ import org.elasticsearch.action.search.SearchType;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.cluster.metadata.AliasAction.newAddAliasAction;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
@@ -39,6 +40,7 @@ public class AliasRoutingIT extends ESIntegTestCase {
         return 2;
     }
 
+    @Test
     public void testAliasCrudRouting() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -100,6 +102,7 @@ public class AliasRoutingIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testAliasSearchRouting() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -194,6 +197,7 @@ public class AliasRoutingIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testAliasSearchRoutingWithTwoIndices() throws Exception {
         createIndex("test-a");
         createIndex("test-b");
@@ -254,6 +258,7 @@ public class AliasRoutingIT extends ESIntegTestCase {
     to the other indices (without routing) were not taken into account in PlainOperationRouting#searchShards.
     That affected the number of shards that we executed the search on, thus some documents were missing in the search results.
      */
+    @Test
     public void testAliasSearchRoutingWithConcreteAndAliasedIndices_issue2682() throws Exception {
         createIndex("index", "index_2");
         ensureGreen();
@@ -279,6 +284,7 @@ public class AliasRoutingIT extends ESIntegTestCase {
     That could cause returning 1, which led to forcing the QUERY_AND_FETCH mode.
     As a result, (size * number of hit shards) results were returned and no reduce phase was taking place.
      */
+    @Test
     public void testAliasSearchRoutingWithConcreteAndAliasedIndices_issue3268() throws Exception {
         createIndex("index", "index_2");
         ensureGreen();
@@ -299,6 +305,7 @@ public class AliasRoutingIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getHits().length, equalTo(1));
     }
 
+    @Test
     public void testIndexingAliasesOverTime() throws Exception {
         createIndex("test");
         ensureGreen();
diff --git a/core/src/test/java/org/elasticsearch/script/NativeScriptTests.java b/core/src/test/java/org/elasticsearch/script/NativeScriptTests.java
index f386e82..9998234 100644
--- a/core/src/test/java/org/elasticsearch/script/NativeScriptTests.java
+++ b/core/src/test/java/org/elasticsearch/script/NativeScriptTests.java
@@ -32,6 +32,7 @@ import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.elasticsearch.threadpool.ThreadPoolModule;
 import org.elasticsearch.watcher.ResourceWatcherService;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -44,6 +45,8 @@ import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.notNullValue;
 
 public class NativeScriptTests extends ESTestCase {
+
+    @Test
     public void testNativeScript() throws InterruptedException {
         ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder();
         Settings settings = Settings.settingsBuilder()
@@ -66,6 +69,7 @@ public class NativeScriptTests extends ESTestCase {
         terminate(injector.getInstance(ThreadPool.class));
     }
 
+    @Test
     public void testFineGrainedSettingsDontAffectNativeScripts() throws IOException {
         ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder();
         Settings.Builder builder = Settings.settingsBuilder();
diff --git a/core/src/test/java/org/elasticsearch/script/ScriptContextRegistryTests.java b/core/src/test/java/org/elasticsearch/script/ScriptContextRegistryTests.java
index a43589f..c7d3a52 100644
--- a/core/src/test/java/org/elasticsearch/script/ScriptContextRegistryTests.java
+++ b/core/src/test/java/org/elasticsearch/script/ScriptContextRegistryTests.java
@@ -21,14 +21,15 @@ package org.elasticsearch.script;
 
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.Collections;
 
-import static org.hamcrest.Matchers.containsString;
-
 public class ScriptContextRegistryTests extends ESTestCase {
+
+    @Test
     public void testValidateCustomScriptContextsOperation() throws IOException {
         for (final String rejectedContext : ScriptContextRegistry.RESERVED_SCRIPT_CONTEXTS) {
             try {
@@ -41,6 +42,7 @@ public class ScriptContextRegistryTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testValidateCustomScriptContextsPluginName() throws IOException {
         for (final String rejectedContext : ScriptContextRegistry.RESERVED_SCRIPT_CONTEXTS) {
             try {
@@ -53,34 +55,28 @@ public class ScriptContextRegistryTests extends ESTestCase {
         }
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testValidateCustomScriptContextsEmptyPluginName() throws IOException {
-        try {
-            new ScriptContext.Plugin(randomBoolean() ? null : "", "test");
-            fail("Expected exception");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("plugin name cannot be empty"));
-        }
+        new ScriptContext.Plugin(randomBoolean() ? null : "", "test");
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testValidateCustomScriptContextsEmptyOperation() throws IOException {
-        try {
-            new ScriptContext.Plugin("test", randomBoolean() ? null : "");
-            fail("Expected exception");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("operation name cannot be empty"));
-        }
+        new ScriptContext.Plugin("test", randomBoolean() ? null : "");
     }
 
+    @Test
     public void testDuplicatedPluginScriptContexts() throws IOException {
         try {
             //try to register a prohibited script context
             new ScriptContextRegistry(Arrays.asList(new ScriptContext.Plugin("testplugin", "test"), new ScriptContext.Plugin("testplugin", "test")));
             fail("ScriptContextRegistry initialization should have failed");
         } catch(IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("script context [testplugin_test] cannot be registered twice"));
+            assertThat(e.getMessage(), Matchers.containsString("script context [testplugin_test] cannot be registered twice"));
         }
     }
 
+    @Test
     public void testNonDuplicatedPluginScriptContexts() throws IOException {
         new ScriptContextRegistry(Arrays.asList(new ScriptContext.Plugin("testplugin1", "test"), new ScriptContext.Plugin("testplugin2", "test")));
     }
diff --git a/core/src/test/java/org/elasticsearch/script/ScriptContextTests.java b/core/src/test/java/org/elasticsearch/script/ScriptContextTests.java
index 0edaedb..e3fba01 100644
--- a/core/src/test/java/org/elasticsearch/script/ScriptContextTests.java
+++ b/core/src/test/java/org/elasticsearch/script/ScriptContextTests.java
@@ -30,8 +30,6 @@ import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
-import static org.hamcrest.Matchers.containsString;
-
 public class ScriptContextTests extends ESTestCase {
 
     private static final String PLUGIN_NAME = "testplugin";
@@ -61,7 +59,7 @@ public class ScriptContextTests extends ESTestCase {
                 scriptService.compile(script, new ScriptContext.Plugin(PLUGIN_NAME, "custom_globally_disabled_op"), contextAndHeaders);
                 fail("script compilation should have been rejected");
             } catch (ScriptException e) {
-                assertThat(e.getMessage(), containsString("scripts of type [" + scriptType + "], operation [" + PLUGIN_NAME + "_custom_globally_disabled_op] and lang [" + MockScriptEngine.NAME + "] are disabled"));
+                assertTrue(e.getMessage(), e.getMessage().contains("scripts of type [" + scriptType + "], operation [" + PLUGIN_NAME + "_custom_globally_disabled_op] and lang [" + MockScriptEngine.NAME + "] are disabled"));
             }
         }
     }
diff --git a/core/src/test/java/org/elasticsearch/script/ScriptFieldIT.java b/core/src/test/java/org/elasticsearch/script/ScriptFieldIT.java
index 71a4175..4fdfbb0 100644
--- a/core/src/test/java/org/elasticsearch/script/ScriptFieldIT.java
+++ b/core/src/test/java/org/elasticsearch/script/ScriptFieldIT.java
@@ -21,6 +21,7 @@ package org.elasticsearch.script;
 
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.common.Nullable;
+import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.script.ScriptService.ScriptType;
@@ -33,6 +34,7 @@ import java.util.Collection;
 import java.util.Map;
 import java.util.concurrent.ExecutionException;
 
+import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.equalTo;
 
 @ClusterScope(scope = Scope.SUITE, numDataNodes = 3)
diff --git a/core/src/test/java/org/elasticsearch/script/ScriptModesTests.java b/core/src/test/java/org/elasticsearch/script/ScriptModesTests.java
index 38ab78b..e38c993 100644
--- a/core/src/test/java/org/elasticsearch/script/ScriptModesTests.java
+++ b/core/src/test/java/org/elasticsearch/script/ScriptModesTests.java
@@ -27,6 +27,7 @@ import org.elasticsearch.search.lookup.SearchLookup;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -40,7 +41,6 @@ import static java.util.Collections.unmodifiableSet;
 import static org.elasticsearch.common.util.set.Sets.newHashSet;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.notNullValue;
-import static org.hamcrest.Matchers.containsString;
 
 // TODO: this needs to be a base test class, and all scripting engines extend it
 public class ScriptModesTests extends ESTestCase {
@@ -102,23 +102,21 @@ public class ScriptModesTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testDefaultSettings() {
         this.scriptModes = new ScriptModes(scriptEngines, scriptContextRegistry, Settings.EMPTY);
         assertScriptModesAllOps(ScriptMode.ON, ALL_LANGS, ScriptType.FILE);
         assertScriptModesAllOps(ScriptMode.SANDBOX, ALL_LANGS, ScriptType.INDEXED, ScriptType.INLINE);
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testMissingSetting() {
         assertAllSettingsWereChecked = false;
         this.scriptModes = new ScriptModes(scriptEngines, scriptContextRegistry, Settings.EMPTY);
-        try {
-            scriptModes.getScriptMode("non_existing", randomFrom(ScriptType.values()), randomFrom(scriptContexts));
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("not found for lang [non_existing]"));
-        }
+        scriptModes.getScriptMode("non_existing", randomFrom(ScriptType.values()), randomFrom(scriptContexts));
     }
 
+    @Test
     public void testScriptTypeGenericSettings() {
         int randomInt = randomIntBetween(1, ScriptType.values().length - 1);
         Set<ScriptType> randomScriptTypesSet = new HashSet<>();
@@ -151,6 +149,7 @@ public class ScriptModesTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testScriptContextGenericSettings() {
         int randomInt = randomIntBetween(1, scriptContexts.length - 1);
         Set<ScriptContext> randomScriptContextsSet = new HashSet<>();
@@ -178,6 +177,7 @@ public class ScriptModesTests extends ESTestCase {
         assertScriptModes(ScriptMode.SANDBOX, ALL_LANGS, new ScriptType[]{ScriptType.INDEXED, ScriptType.INLINE}, complementOf);
     }
 
+    @Test
     public void testConflictingScriptTypeAndOpGenericSettings() {
         ScriptContext scriptContext = randomFrom(scriptContexts);
         Settings.Builder builder = Settings.builder().put(ScriptModes.SCRIPT_SETTINGS_PREFIX + scriptContext.getKey(), randomFrom(DISABLE_VALUES))
@@ -190,6 +190,7 @@ public class ScriptModesTests extends ESTestCase {
         assertScriptModes(ScriptMode.SANDBOX, ALL_LANGS, new ScriptType[]{ScriptType.INLINE}, complementOf);
     }
 
+    @Test
     public void testInteractionBetweenGenericAndEngineSpecificSettings() {
         Settings.Builder builder = Settings.builder().put("script.inline", randomFrom(DISABLE_VALUES))
                 .put(specificEngineOpSettings(MustacheScriptEngineService.NAME, ScriptType.INLINE, ScriptContext.Standard.AGGS), randomFrom(ENABLE_VALUES))
diff --git a/core/src/test/java/org/elasticsearch/script/ScriptParameterParserTests.java b/core/src/test/java/org/elasticsearch/script/ScriptParameterParserTests.java
index c3c80c5..85dc650 100644
--- a/core/src/test/java/org/elasticsearch/script/ScriptParameterParserTests.java
+++ b/core/src/test/java/org/elasticsearch/script/ScriptParameterParserTests.java
@@ -30,22 +30,17 @@ import org.elasticsearch.script.Script.ScriptParseException;
 import org.elasticsearch.script.ScriptParameterParser.ScriptParameterValue;
 import org.elasticsearch.script.ScriptService.ScriptType;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.Set;
-
-import static java.util.Collections.singleton;
-import static org.hamcrest.Matchers.containsString;
+import java.util.*;
+
 import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.nullValue;
 
 public class ScriptParameterParserTests extends ESTestCase {
+
+    @Test
     public void testTokenDefaultInline() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"script\" : \"scriptValue\" }"));
         Token token = parser.nextToken();
@@ -66,6 +61,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testTokenDefaultFile() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"script_file\" : \"scriptValue\" }"));
         Token token = parser.nextToken();
@@ -88,6 +84,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testTokenDefaultIndexed() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"script_id\" : \"scriptValue\" }"));
         Token token = parser.nextToken();
@@ -110,6 +107,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testTokenDefaultNotFound() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"foo\" : \"bar\" }"));
         Token token = parser.nextToken();
@@ -123,6 +121,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testTokenSingleParameter() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"foo\" : \"scriptValue\" }"));
         Token token = parser.nextToken();
@@ -137,6 +136,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testTokenSingleParameterFile() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"foo_file\" : \"scriptValue\" }"));
         Token token = parser.nextToken();
@@ -151,6 +151,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testTokenSingleParameterIndexed() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"foo_id\" : \"scriptValue\" }"));
         Token token = parser.nextToken();
@@ -165,6 +166,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testTokenSingleParameterDelcaredTwiceInlineFile() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"foo\" : \"scriptValue\", \"foo_file\" : \"scriptValue\" }"));
         Token token = parser.nextToken();
@@ -181,14 +183,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         while (token != Token.VALUE_STRING) {
             token = parser.nextToken();
         }
-        try {
-            paramParser.token(parser.currentName(), parser.currentToken(), parser, ParseFieldMatcher.STRICT);
-            fail("Expected ScriptParseException");
-        } catch (ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.token(parser.currentName(), parser.currentToken(), parser, ParseFieldMatcher.STRICT);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testTokenSingleParameterDelcaredTwiceInlineIndexed() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"foo\" : \"scriptValue\", \"foo_id\" : \"scriptValue\" }"));
         Token token = parser.nextToken();
@@ -205,14 +203,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         while (token != Token.VALUE_STRING) {
             token = parser.nextToken();
         }
-        try {
-            paramParser.token(parser.currentName(), parser.currentToken(), parser, ParseFieldMatcher.STRICT);
-            fail("Expected ScriptParseException");
-        } catch (ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.token(parser.currentName(), parser.currentToken(), parser, ParseFieldMatcher.STRICT);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testTokenSingleParameterDelcaredTwiceFileInline() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"foo_file\" : \"scriptValue\", \"foo\" : \"scriptValue\" }"));
         Token token = parser.nextToken();
@@ -229,14 +223,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         while (token != Token.VALUE_STRING) {
             token = parser.nextToken();
         }
-        try {
-            paramParser.token(parser.currentName(), parser.currentToken(), parser, ParseFieldMatcher.STRICT);
-            fail("Expected ScriptParseException");
-        } catch (ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.token(parser.currentName(), parser.currentToken(), parser, ParseFieldMatcher.STRICT);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testTokenSingleParameterDelcaredTwiceFileIndexed() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"foo_file\" : \"scriptValue\", \"foo_id\" : \"scriptValue\" }"));
         Token token = parser.nextToken();
@@ -253,14 +243,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         while (token != Token.VALUE_STRING) {
             token = parser.nextToken();
         }
-        try {
-            paramParser.token(parser.currentName(), parser.currentToken(), parser, ParseFieldMatcher.STRICT);
-            fail("Expected ScriptParseException");
-        } catch (ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.token(parser.currentName(), parser.currentToken(), parser, ParseFieldMatcher.STRICT);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testTokenSingleParameterDelcaredTwiceIndexedInline() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"foo_id\" : \"scriptValue\", \"foo\" : \"scriptValue\" }"));
         Token token = parser.nextToken();
@@ -277,14 +263,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         while (token != Token.VALUE_STRING) {
             token = parser.nextToken();
         }
-        try {
-            paramParser.token(parser.currentName(), parser.currentToken(), parser, ParseFieldMatcher.STRICT);
-            fail("Expected ScriptParseException");
-        } catch (ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.token(parser.currentName(), parser.currentToken(), parser, ParseFieldMatcher.STRICT);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testTokenSingleParameterDelcaredTwiceIndexedFile() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"foo_id\" : \"scriptValue\", \"foo_file\" : \"scriptValue\" }"));
         Token token = parser.nextToken();
@@ -301,14 +283,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         while (token != Token.VALUE_STRING) {
             token = parser.nextToken();
         }
-        try {
-            paramParser.token(parser.currentName(), parser.currentToken(), parser, ParseFieldMatcher.STRICT);
-            fail("Expected ScriptParseException");
-        } catch (ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.token(parser.currentName(), parser.currentToken(), parser, ParseFieldMatcher.STRICT);
     }
 
+    @Test
     public void testTokenMultipleParameters() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"foo\" : \"fooScriptValue\", \"bar_file\" : \"barScriptValue\", \"baz_id\" : \"bazScriptValue\" }"));
         Set<String> parameters = new HashSet<>();
@@ -357,6 +335,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testTokenMultipleParametersWithLang() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"foo\" : \"fooScriptValue\", \"bar_file\" : \"barScriptValue\", \"lang\" : \"myLang\", \"baz_id\" : \"bazScriptValue\" }"));
         Set<String> parameters = new HashSet<>();
@@ -416,6 +395,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), equalTo("myLang"));
     }
 
+    @Test
     public void testTokenMultipleParametersNotFound() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"other\" : \"scriptValue\" }"));
         Set<String> parameters = new HashSet<>();
@@ -443,6 +423,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testTokenMultipleParametersSomeNotFound() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"foo\" : \"fooScriptValue\", \"other_file\" : \"barScriptValue\", \"baz_id\" : \"bazScriptValue\" }"));
         Set<String> parameters = new HashSet<>();
@@ -499,6 +480,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testTokenMultipleParametersWrongType() throws IOException {
         XContentParser parser = XContentHelper.createParser(new BytesArray("{ \"foo\" : \"fooScriptValue\", \"bar_file\" : \"barScriptValue\", \"baz_id\" : \"bazScriptValue\" }"));
         Set<String> parameters = new HashSet<>();
@@ -521,15 +503,13 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test(expected=IllegalArgumentException.class)
     public void testReservedParameters() {
-        try {
-            new ScriptParameterParser(singleton("lang"));
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("lang is reserved"));
-        }
+        Set<String> parameterNames = Collections.singleton("lang");
+        new ScriptParameterParser(parameterNames );
     }
 
+    @Test
     public void testConfigDefaultInline() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("script", "scriptValue");
@@ -554,6 +534,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(config.isEmpty(), equalTo(true));
     }
 
+    @Test
     public void testConfigDefaultFile() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("script_file", "scriptValue");
@@ -572,6 +553,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(config.isEmpty(), equalTo(true));
     }
 
+    @Test
     public void testConfigDefaultIndexed() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("script_id", "scriptValue");
@@ -590,6 +572,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(config.isEmpty(), equalTo(true));
     }
 
+    @Test
     public void testConfigDefaultIndexedNoRemove() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("script_id", "scriptValue");
@@ -610,6 +593,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat((String) config.get("scriptId"), equalTo("scriptValue"));
     }
 
+    @Test
     public void testConfigDefaultNotFound() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("foo", "bar");
@@ -622,6 +606,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat((String) config.get("foo"), equalTo("bar"));
     }
 
+    @Test
     public void testConfigSingleParameter() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("foo", "scriptValue");
@@ -634,6 +619,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(config.isEmpty(), equalTo(true));
     }
 
+    @Test
     public void testConfigSingleParameterFile() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("foo_file", "scriptValue");
@@ -646,6 +632,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(config.isEmpty(), equalTo(true));
     }
 
+    @Test
     public void testConfigSingleParameterIndexed() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("foo_id", "scriptValue");
@@ -658,6 +645,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(config.isEmpty(), equalTo(true));
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testConfigSingleParameterDelcaredTwiceInlineFile() throws IOException {
         Map<String, Object> config = new LinkedHashMap<>();
         config.put("foo", "scriptValue");
@@ -665,14 +653,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         Set<String> parameters = Collections.singleton("foo");
         ScriptParameterParser paramParser = new ScriptParameterParser(parameters);
         assertThat(paramParser.getScriptParameterValue("foo"), nullValue());
-        try {
-            paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
-            fail("Expected ScriptParseException");
-        } catch (ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testConfigSingleParameterDelcaredTwiceInlineIndexed() throws IOException {
         Map<String, Object> config = new LinkedHashMap<>();
         config.put("foo", "scriptValue");
@@ -680,14 +664,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         Set<String> parameters = Collections.singleton("foo");
         ScriptParameterParser paramParser = new ScriptParameterParser(parameters);
         assertThat(paramParser.getScriptParameterValue("foo"), nullValue());
-        try {
-            paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
-            fail("Expected ScriptParseException");
-        } catch (ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testConfigSingleParameterDelcaredTwiceFileInline() throws IOException {
         Map<String, Object> config = new LinkedHashMap<>();
         config.put("foo_file", "scriptValue");
@@ -695,14 +675,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         Set<String> parameters = Collections.singleton("foo");
         ScriptParameterParser paramParser = new ScriptParameterParser(parameters);
         assertThat(paramParser.getScriptParameterValue("foo"), nullValue());
-        try {
-            paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
-            fail("Expected ScriptParseException");
-        } catch (ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testConfigSingleParameterDelcaredTwiceFileIndexed() throws IOException {
         Map<String, Object> config = new LinkedHashMap<>();
         config.put("foo_file", "scriptValue");
@@ -710,14 +686,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         Set<String> parameters = Collections.singleton("foo");
         ScriptParameterParser paramParser = new ScriptParameterParser(parameters);
         assertThat(paramParser.getScriptParameterValue("foo"), nullValue());
-        try {
-            paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
-            fail("Expected ScriptParseException");
-        } catch (ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testConfigSingleParameterDelcaredTwiceIndexedInline() throws IOException {
         Map<String, Object> config = new LinkedHashMap<>();
         config.put("foo_id", "scriptValue");
@@ -725,14 +697,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         Set<String> parameters = Collections.singleton("foo");
         ScriptParameterParser paramParser = new ScriptParameterParser(parameters);
         assertThat(paramParser.getScriptParameterValue("foo"), nullValue());
-        try {
-            paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
-            fail("Expected ScriptParseException");
-        } catch (ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testConfigSingleParameterDelcaredTwiceIndexedFile() throws IOException {
         Map<String, Object> config = new LinkedHashMap<>();
         config.put("foo_id", "scriptValue");
@@ -740,14 +708,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         Set<String> parameters = Collections.singleton("foo");
         ScriptParameterParser paramParser = new ScriptParameterParser(parameters);
         assertThat(paramParser.getScriptParameterValue("foo"), nullValue());
-        try {
-            paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
-            fail("Expected ScriptParseException");
-        } catch (ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
     }
 
+    @Test
     public void testConfigMultipleParameters() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("foo", "fooScriptValue");
@@ -774,6 +738,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(config.isEmpty(), equalTo(true));
     }
 
+    @Test
     public void testConfigMultipleParametersWithLang() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("foo", "fooScriptValue");
@@ -801,6 +766,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(config.isEmpty(), equalTo(true));
     }
 
+    @Test
     public void testConfigMultipleParametersWithLangNoRemove() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("foo", "fooScriptValue");
@@ -832,6 +798,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat((String) config.get("lang"), equalTo("myLang"));
     }
 
+    @Test
     public void testConfigMultipleParametersNotFound() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("other", "scriptValue");
@@ -858,6 +825,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat((String) config.get("other"), equalTo("scriptValue"));
     }
 
+    @Test
     public void testConfigMultipleParametersSomeNotFound() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("foo", "fooScriptValue");
@@ -889,6 +857,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat((String) config.get("other_file"), equalTo("barScriptValue"));
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testConfigMultipleParametersInlineWrongType() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("foo", 1l);
@@ -906,14 +875,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.getScriptParameterValue("bar_file"), nullValue());
         assertThat(paramParser.getScriptParameterValue("baz_id"), nullValue());
         assertThat(paramParser.lang(), nullValue());
-        try {
-            paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
-            fail("Expected ScriptParseException");
-        } catch (ScriptParseException e) {
-            assertThat(e.getMessage(), is("Value must be of type String: [foo]"));
-        }
+        paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testConfigMultipleParametersFileWrongType() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("foo", "fooScriptValue");
@@ -931,15 +896,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.getScriptParameterValue("bar_file"), nullValue());
         assertThat(paramParser.getScriptParameterValue("baz_id"), nullValue());
         assertThat(paramParser.lang(), nullValue());
-        try {
-            paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
-            fail("Expected ScriptParseException");
-        } catch (ScriptParseException e) {
-            assertThat(e.getMessage(), is("Value must be of type String: [bar_file]"));
-        }
-
+        paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testConfigMultipleParametersIndexedWrongType() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("foo", "fooScriptValue");
@@ -957,14 +917,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.getScriptParameterValue("bar_file"), nullValue());
         assertThat(paramParser.getScriptParameterValue("baz_id"), nullValue());
         assertThat(paramParser.lang(), nullValue());
-        try {
-            paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
-            fail("Expected ScriptParseException");
-        } catch (ScriptParseException e) {
-            assertThat(e.getMessage(), is("Value must be of type String: [baz_id]"));
-        }
+        paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testConfigMultipleParametersLangWrongType() throws IOException {
         Map<String, Object> config = new HashMap<>();
         config.put("foo", "fooScriptValue");
@@ -982,14 +938,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.getScriptParameterValue("bar_file"), nullValue());
         assertThat(paramParser.getScriptParameterValue("baz_id"), nullValue());
         assertThat(paramParser.lang(), nullValue());
-        try {
-            paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
-            fail("Expected ScriptParseException");
-        } catch (ScriptParseException e) {
-            assertThat(e.getMessage(), is("Value must be of type String: [lang]"));
-        }
+        paramParser.parseConfig(config, true, ParseFieldMatcher.STRICT);
     }
 
+    @Test
     public void testParamsDefaultInline() throws IOException {
         Map<String, String> config = new HashMap<>();
         config.put("script", "scriptValue");
@@ -998,7 +950,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         paramParser.parseParams(params);
         assertDefaultParameterValue(paramParser, "scriptValue", ScriptType.INLINE);
         assertThat(paramParser.lang(), nullValue());
-
+        
         paramParser = new ScriptParameterParser(null);
         paramParser.parseParams(params);
         assertDefaultParameterValue(paramParser, "scriptValue", ScriptType.INLINE);
@@ -1010,6 +962,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testParamsDefaultFile() throws IOException {
         Map<String, String> config = new HashMap<>();
         config.put("script_file", "scriptValue");
@@ -1020,6 +973,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testParamsDefaultIndexed() throws IOException {
         Map<String, String> config = new HashMap<>();
         config.put("script_id", "scriptValue");
@@ -1030,6 +984,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testParamsDefaultNotFound() throws IOException {
         Map<String, String> config = new HashMap<>();
         config.put("foo", "bar");
@@ -1041,6 +996,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testParamsSingleParameter() throws IOException {
         Map<String, String> config = new HashMap<>();
         config.put("foo", "scriptValue");
@@ -1053,6 +1009,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testParamsSingleParameterFile() throws IOException {
         Map<String, String> config = new HashMap<>();
         config.put("foo_file", "scriptValue");
@@ -1065,6 +1022,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testParamsSingleParameterIndexed() throws IOException {
         Map<String, String> config = new HashMap<>();
         config.put("foo_id", "scriptValue");
@@ -1077,6 +1035,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testParamsSingleParameterDelcaredTwiceInlineFile() throws IOException {
         Map<String, String> config = new LinkedHashMap<>();
         config.put("foo", "scriptValue");
@@ -1085,14 +1044,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         ScriptParameterParser paramParser = new ScriptParameterParser(parameters);
         assertThat(paramParser.getScriptParameterValue("foo"), nullValue());
         MapParams params = new MapParams(config);
-        try {
-            paramParser.parseParams(params);
-            fail("Expected ScriptParseException");
-        } catch(ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.parseParams(params);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testParamsSingleParameterDelcaredTwiceInlineIndexed() throws IOException {
         Map<String, String> config = new LinkedHashMap<>();
         config.put("foo", "scriptValue");
@@ -1101,14 +1056,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         ScriptParameterParser paramParser = new ScriptParameterParser(parameters);
         assertThat(paramParser.getScriptParameterValue("foo"), nullValue());
         MapParams params = new MapParams(config);
-        try {
-            paramParser.parseParams(params);
-            fail("Expected ScriptParseException");
-        } catch(ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.parseParams(params);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testParamsSingleParameterDelcaredTwiceFileInline() throws IOException {
         Map<String, String> config = new LinkedHashMap<>();
         config.put("foo_file", "scriptValue");
@@ -1117,14 +1068,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         ScriptParameterParser paramParser = new ScriptParameterParser(parameters);
         assertThat(paramParser.getScriptParameterValue("foo"), nullValue());
         MapParams params = new MapParams(config);
-        try {
-            paramParser.parseParams(params);
-            fail("Expected ScriptParseException");
-        } catch(ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.parseParams(params);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testParamsSingleParameterDelcaredTwiceFileIndexed() throws IOException {
         Map<String, String> config = new LinkedHashMap<>();
         config.put("foo_file", "scriptValue");
@@ -1133,14 +1080,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         ScriptParameterParser paramParser = new ScriptParameterParser(parameters);
         assertThat(paramParser.getScriptParameterValue("foo"), nullValue());
         MapParams params = new MapParams(config);
-        try {
-            paramParser.parseParams(params);
-            fail("Expected ScriptParseException");
-        } catch(ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.parseParams(params);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testParamsSingleParameterDelcaredTwiceIndexedInline() throws IOException {
         Map<String, String> config = new LinkedHashMap<>();
         config.put("foo_id", "scriptValue");
@@ -1149,14 +1092,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         ScriptParameterParser paramParser = new ScriptParameterParser(parameters);
         assertThat(paramParser.getScriptParameterValue("foo"), nullValue());
         MapParams params = new MapParams(config);
-        try {
-            paramParser.parseParams(params);
-            fail("Expected ScriptParseException");
-        } catch(ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.parseParams(params);
     }
 
+    @Test(expected = ScriptParseException.class)
     public void testParamsSingleParameterDelcaredTwiceIndexedFile() throws IOException {
         Map<String, String> config = new LinkedHashMap<>();
         config.put("foo_id", "scriptValue");
@@ -1165,14 +1104,10 @@ public class ScriptParameterParserTests extends ESTestCase {
         ScriptParameterParser paramParser = new ScriptParameterParser(parameters);
         assertThat(paramParser.getScriptParameterValue("foo"), nullValue());
         MapParams params = new MapParams(config);
-        try {
-            paramParser.parseParams(params);
-            fail("Expected ScriptParseException");
-        } catch(ScriptParseException e) {
-            assertThat(e.getMessage(), is("Only one of [foo, foo_file, foo_id] is allowed."));
-        }
+        paramParser.parseParams(params);
     }
 
+    @Test
     public void testParamsMultipleParameters() throws IOException {
         Map<String, String> config = new HashMap<>();
         config.put("foo", "fooScriptValue");
@@ -1199,6 +1134,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testParamsMultipleParametersWithLang() throws IOException {
         Map<String, String> config = new HashMap<>();
         config.put("foo", "fooScriptValue");
@@ -1226,6 +1162,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), equalTo("myLang"));
     }
 
+    @Test
     public void testParamsMultipleParametersWithLangNoRemove() throws IOException {
         Map<String, String> config = new HashMap<>();
         config.put("foo", "fooScriptValue");
@@ -1253,6 +1190,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), equalTo("myLang"));
     }
 
+    @Test
     public void testParamsMultipleParametersNotFound() throws IOException {
         Map<String, String> config = new HashMap<>();
         config.put("other", "scriptValue");
@@ -1278,6 +1216,7 @@ public class ScriptParameterParserTests extends ESTestCase {
         assertThat(paramParser.lang(), nullValue());
     }
 
+    @Test
     public void testParamsMultipleParametersSomeNotFound() throws IOException {
         Map<String, String> config = new HashMap<>();
         config.put("foo", "fooScriptValue");
diff --git a/core/src/test/java/org/elasticsearch/script/ScriptServiceTests.java b/core/src/test/java/org/elasticsearch/script/ScriptServiceTests.java
index aa7df3f..26ba580 100644
--- a/core/src/test/java/org/elasticsearch/script/ScriptServiceTests.java
+++ b/core/src/test/java/org/elasticsearch/script/ScriptServiceTests.java
@@ -30,6 +30,7 @@ import org.elasticsearch.search.lookup.SearchLookup;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.watcher.ResourceWatcherService;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.nio.file.Files;
@@ -73,7 +74,7 @@ public class ScriptServiceTests extends ESTestCase {
                 .put("path.conf", genericConfigFolder)
                 .build();
         resourceWatcherService = new ResourceWatcherService(baseSettings, null);
-        scriptEngineServices = newHashSet(new TestEngineService(),
+        scriptEngineServices = newHashSet(new TestEngineService(), 
                                                new MustacheScriptEngineService(baseSettings));
         scriptEnginesByLangMap = ScriptModesTests.buildScriptEnginesByLangMap(scriptEngineServices);
         //randomly register custom script contexts
@@ -111,6 +112,7 @@ public class ScriptServiceTests extends ESTestCase {
         };
     }
 
+    @Test
     public void testNotSupportedDisableDynamicSetting() throws IOException {
         try {
             buildScriptService(Settings.builder().put(ScriptService.DISABLE_DYNAMIC_SCRIPTING_SETTING, randomUnicodeOfLength(randomIntBetween(1, 10))).build());
@@ -120,6 +122,7 @@ public class ScriptServiceTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testScriptsWithoutExtensions() throws IOException {
 
         ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder();
@@ -151,6 +154,7 @@ public class ScriptServiceTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testInlineScriptCompiledOnceCache() throws IOException {
         ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder();
         buildScriptService(Settings.EMPTY);
@@ -161,6 +165,7 @@ public class ScriptServiceTests extends ESTestCase {
         assertThat(compiledScript1.compiled(), sameInstance(compiledScript2.compiled()));
     }
 
+    @Test
     public void testInlineScriptCompiledOnceMultipleLangAcronyms() throws IOException {
         ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder();
         buildScriptService(Settings.EMPTY);
@@ -171,6 +176,7 @@ public class ScriptServiceTests extends ESTestCase {
         assertThat(compiledScript1.compiled(), sameInstance(compiledScript2.compiled()));
     }
 
+    @Test
     public void testFileScriptCompiledOnceMultipleLangAcronyms() throws IOException {
         ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder();
         buildScriptService(Settings.EMPTY);
@@ -182,6 +188,7 @@ public class ScriptServiceTests extends ESTestCase {
         assertThat(compiledScript1.compiled(), sameInstance(compiledScript2.compiled()));
     }
 
+    @Test
     public void testDefaultBehaviourFineGrainedSettings() throws IOException {
         ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder();
         Settings.Builder builder = Settings.builder();
@@ -210,6 +217,7 @@ public class ScriptServiceTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testFineGrainedSettings() throws IOException {
         ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder();
         //collect the fine-grained settings to set for this run
@@ -334,6 +342,7 @@ public class ScriptServiceTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testCompileNonRegisteredContext() throws IOException {
         ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder();
         buildScriptService(Settings.EMPTY);
@@ -357,6 +366,7 @@ public class ScriptServiceTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testCompileCountedInCompilationStats() throws IOException {
         ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder();
         buildScriptService(Settings.EMPTY);
@@ -364,6 +374,7 @@ public class ScriptServiceTests extends ESTestCase {
         assertEquals(1L, scriptService.stats().getCompilations());
     }
 
+    @Test
     public void testExecutableCountedInCompilationStats() throws IOException {
         ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder();
         buildScriptService(Settings.EMPTY);
@@ -371,12 +382,14 @@ public class ScriptServiceTests extends ESTestCase {
         assertEquals(1L, scriptService.stats().getCompilations());
     }
 
+    @Test
     public void testSearchCountedInCompilationStats() throws IOException {
         buildScriptService(Settings.EMPTY);
         scriptService.search(null, new Script("1+1", ScriptType.INLINE, "test", null), randomFrom(scriptContexts));
         assertEquals(1L, scriptService.stats().getCompilations());
     }
 
+    @Test
     public void testMultipleCompilationsCountedInCompilationStats() throws IOException {
         ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder();
         buildScriptService(Settings.EMPTY);
@@ -388,6 +401,7 @@ public class ScriptServiceTests extends ESTestCase {
         assertEquals(numberOfCompilations, scriptService.stats().getCompilations());
     }
 
+    @Test
     public void testCompilationStatsOnCacheHit() throws IOException {
         ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder();
         Settings.Builder builder = Settings.builder();
@@ -398,6 +412,7 @@ public class ScriptServiceTests extends ESTestCase {
         assertEquals(1L, scriptService.stats().getCompilations());
     }
 
+    @Test
     public void testFileScriptCountedInCompilationStats() throws IOException {
         ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder();
         buildScriptService(Settings.EMPTY);
@@ -406,6 +421,7 @@ public class ScriptServiceTests extends ESTestCase {
         assertEquals(1L, scriptService.stats().getCompilations());
     }
 
+    @Test
     public void testIndexedScriptCountedInCompilationStats() throws IOException {
         ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder();
         buildScriptService(Settings.EMPTY);
@@ -413,6 +429,7 @@ public class ScriptServiceTests extends ESTestCase {
         assertEquals(1L, scriptService.stats().getCompilations());
     }
 
+    @Test
     public void testCacheEvictionCountedInCacheEvictionsStats() throws IOException {
         ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder();
         Settings.Builder builder = Settings.builder();
diff --git a/core/src/test/java/org/elasticsearch/script/mustache/MustacheScriptEngineTests.java b/core/src/test/java/org/elasticsearch/script/mustache/MustacheScriptEngineTests.java
index ce29bf2..28ae808 100644
--- a/core/src/test/java/org/elasticsearch/script/mustache/MustacheScriptEngineTests.java
+++ b/core/src/test/java/org/elasticsearch/script/mustache/MustacheScriptEngineTests.java
@@ -24,6 +24,7 @@ import org.elasticsearch.script.CompiledScript;
 import org.elasticsearch.script.ScriptService;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.StringWriter;
@@ -46,6 +47,7 @@ public class MustacheScriptEngineTests extends ESTestCase {
         escaper = new JsonEscapingMustacheFactory();
     }
 
+    @Test
     public void testSimpleParameterReplace() {
         {
             String template = "GET _search {\"query\": " + "{\"boosting\": {" + "\"positive\": {\"match\": {\"body\": \"gift\"}},"
@@ -70,6 +72,7 @@ public class MustacheScriptEngineTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testEscapeJson() throws IOException {
         {
             StringWriter writer = new StringWriter();
@@ -83,9 +86,9 @@ public class MustacheScriptEngineTests extends ESTestCase {
         }
 
         Character[] specialChars = new Character[]{
-                '\"',
-                '\\',
-                '\u0000',
+                '\"', 
+                '\\', 
+                '\u0000', 
                 '\u0001',
                 '\u0002',
                 '\u0003',
@@ -101,9 +104,9 @@ public class MustacheScriptEngineTests extends ESTestCase {
                 '\u000F',
                 '\u001F'};
         String[] escapedChars = new String[]{
-                "\\\"",
-                "\\\\",
-                "\\u0000",
+                "\\\"", 
+                "\\\\", 
+                "\\u0000", 
                 "\\u0001",
                 "\\u0002",
                 "\\u0003",
@@ -147,14 +150,14 @@ public class MustacheScriptEngineTests extends ESTestCase {
         }
         return string;
     }
-
+    
     /**
      * From https://www.ietf.org/rfc/rfc4627.txt:
-     *
+     * 
      * All Unicode characters may be placed within the
      * quotation marks except for the characters that must be escaped:
      * quotation mark, reverse solidus, and the control characters (U+0000
-     * through U+001F).
+     * through U+001F). 
      * */
     private static boolean isEscapeChar(char c) {
         switch (c) {
@@ -162,7 +165,7 @@ public class MustacheScriptEngineTests extends ESTestCase {
         case '\\':
             return true;
         }
-
+        
         if (c < '\u002F')
             return true;
         return false;
diff --git a/core/src/test/java/org/elasticsearch/script/mustache/MustacheTests.java b/core/src/test/java/org/elasticsearch/script/mustache/MustacheTests.java
index 76c8678..9bda581 100644
--- a/core/src/test/java/org/elasticsearch/script/mustache/MustacheTests.java
+++ b/core/src/test/java/org/elasticsearch/script/mustache/MustacheTests.java
@@ -21,8 +21,8 @@ package org.elasticsearch.script.mustache;
 import com.github.mustachejava.DefaultMustacheFactory;
 import com.github.mustachejava.Mustache;
 import com.github.mustachejava.MustacheFactory;
-
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.StringReader;
 import java.io.StringWriter;
@@ -32,6 +32,8 @@ import java.util.HashMap;
  * Figure out how Mustache works for the simplest use case. Leaving in here for now for reference.
  * */
 public class MustacheTests extends ESTestCase {
+
+    @Test
     public void test() {
         HashMap<String, Object> scopes = new HashMap<>();
         scopes.put("boost_val", "0.2");
diff --git a/core/src/test/java/org/elasticsearch/search/SearchWithRejectionsIT.java b/core/src/test/java/org/elasticsearch/search/SearchWithRejectionsIT.java
index a8c6a19..b12843b 100644
--- a/core/src/test/java/org/elasticsearch/search/SearchWithRejectionsIT.java
+++ b/core/src/test/java/org/elasticsearch/search/SearchWithRejectionsIT.java
@@ -24,6 +24,7 @@ import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.action.search.SearchType;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
@@ -43,6 +44,7 @@ public class SearchWithRejectionsIT extends ESIntegTestCase {
                 .build();
     }
 
+    @Test
     public void testOpenContextsAfterRejections() throws InterruptedException {
         createIndex("test");
         ensureGreen("test");
diff --git a/core/src/test/java/org/elasticsearch/search/StressSearchServiceReaperIT.java b/core/src/test/java/org/elasticsearch/search/StressSearchServiceReaperIT.java
index addfe14..c97e29a 100644
--- a/core/src/test/java/org/elasticsearch/search/StressSearchServiceReaperIT.java
+++ b/core/src/test/java/org/elasticsearch/search/StressSearchServiceReaperIT.java
@@ -25,6 +25,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import java.util.concurrent.ExecutionException;
 
@@ -43,7 +44,7 @@ public class StressSearchServiceReaperIT extends ESIntegTestCase {
                 .put(SearchService.KEEPALIVE_INTERVAL_KEY, TimeValue.timeValueMillis(1)).build();
     }
 
-    // see issue #5165 - this test fails each time without the fix in pull #5170
+    @Test // see issue #5165 - this test fails each time without the fix in pull #5170
     public void testStressReaper() throws ExecutionException, InterruptedException {
         int num = randomIntBetween(100, 150);
         IndexRequestBuilder[] builders = new IndexRequestBuilder[num];
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/AggregationsBinaryIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/AggregationsBinaryIT.java
index 80227ff..e5634fe 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/AggregationsBinaryIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/AggregationsBinaryIT.java
@@ -31,6 +31,7 @@ import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket;
 import org.elasticsearch.search.aggregations.bucket.terms.TermsBuilder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -60,6 +61,7 @@ public class AggregationsBinaryIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
+    @Test
     public void testAggregationsBinary() throws Exception {
         TermsBuilder termsBuilder = AggregationBuilders.terms("terms").field(STRING_FIELD_NAME);
         TermsBuilder subTerm = AggregationBuilders.terms("subterms").field(INT_FIELD_NAME);
@@ -99,6 +101,7 @@ public class AggregationsBinaryIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testAggregationsBinarySameContentType() throws Exception {
         TermsBuilder termsBuilder = AggregationBuilders.terms("terms").field(STRING_FIELD_NAME);
         TermsBuilder subTerm = AggregationBuilders.terms("subterms").field(INT_FIELD_NAME);
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/CombiIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/CombiIT.java
index 5154dcc..8282a53 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/CombiIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/CombiIT.java
@@ -19,8 +19,8 @@
 
 package org.elasticsearch.search.aggregations;
 
-import com.carrotsearch.hppc.IntIntHashMap;
 import com.carrotsearch.hppc.IntIntMap;
+import com.carrotsearch.hppc.IntIntHashMap;
 
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.search.SearchResponse;
@@ -30,6 +30,7 @@ import org.elasticsearch.search.aggregations.bucket.missing.Missing;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.Collection;
 
@@ -54,7 +55,8 @@ public class CombiIT extends ESIntegTestCase {
      * it as "numeric", it didn't work. Now we cache the Value Sources by a custom key (field name + ValueSource type)
      * so there's no conflict there.
      */
-    public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception {
+    @Test
+    public void multipleAggs_OnSameField_WithDifferentRequiredValueSourceType() throws Exception {
 
         createIndex("idx");
         IndexRequestBuilder[] builders = new IndexRequestBuilder[randomInt(30)];
@@ -113,7 +115,8 @@ public class CombiIT extends ESIntegTestCase {
      * when the sub aggregator is then created, it will take this estimation into account. This used to cause
      * and an ArrayIndexOutOfBoundsException...
      */
-    public void testSubAggregationForTopAggregationOnUnmappedField() throws Exception {
+    @Test
+    public void subAggregationForTopAggregationOnUnmappedField() throws Exception {
 
         prepareCreate("idx").addMapping("type", jsonBuilder()
                 .startObject()
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/MetaDataIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/MetaDataIT.java
index 9d83428..c83ad57 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/MetaDataIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/MetaDataIT.java
@@ -19,13 +19,13 @@
 
 package org.elasticsearch.search.aggregations;
 
-import com.carrotsearch.hppc.IntIntHashMap;
 import com.carrotsearch.hppc.IntIntMap;
-
+import com.carrotsearch.hppc.IntIntHashMap;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.search.aggregations.bucket.missing.Missing;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -47,7 +47,8 @@ public class MetaDataIT extends ESIntegTestCase {
      * it as "numeric", it didn't work. Now we cache the Value Sources by a custom key (field name + ValueSource type)
      * so there's no conflict there.
      */
-    public void testMetaDataSetOnAggregationResult() throws Exception {
+    @Test
+    public void meta_data_set_on_aggregation_result() throws Exception {
 
         createIndex("idx");
         IndexRequestBuilder[] builders = new IndexRequestBuilder[randomInt(30)];
@@ -111,4 +112,6 @@ public class MetaDataIT extends ESIntegTestCase {
         Map<String, Object> nestedMap = (Map<String, Object>)nestedObject;
         assertEquals("value", nestedMap.get("nested"));
     }
+
+
 }
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/ParsingIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/ParsingIT.java
index 1ac06e6..87307c0 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/ParsingIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/ParsingIT.java
@@ -19,7 +19,19 @@
 
 package org.elasticsearch.search.aggregations;
 
-// NORELEASE move these tests to unit tests when aggs refactoring is done
+import com.carrotsearch.randomizedtesting.generators.RandomStrings;
+import org.elasticsearch.action.search.SearchPhaseExecutionException;
+import org.elasticsearch.common.xcontent.json.JsonXContent;
+import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
+
+import java.security.SecureRandom;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public class ParsingIT extends ESIntegTestCase {
+
+    // NORELEASE move these tests to unit tests when aggs refactoring is done
 //    @Test(expected=SearchPhaseExecutionException.class)
 //    public void testTwoTypes() throws Exception {
 //        createIndex("idx");
@@ -166,3 +178,4 @@ package org.elasticsearch.search.aggregations;
 //            .endObject()).execute().actionGet();
 //    }
 
+}
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/BooleanTermsIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/BooleanTermsIT.java
index 0a660b8..b4c28ac 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/BooleanTermsIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/BooleanTermsIT.java
@@ -23,6 +23,7 @@ import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.search.aggregations.Aggregator.SubAggCollectionMode;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.terms;
@@ -84,7 +85,8 @@ public class BooleanTermsIT extends ESIntegTestCase {
         indexRandom(true, builders);
     }
 
-    public void testSingleValueField() throws Exception {
+    @Test
+    public void singleValueField() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -116,7 +118,8 @@ public class BooleanTermsIT extends ESIntegTestCase {
         }
     }
 
-    public void testMultiValueField() throws Exception {
+    @Test
+    public void multiValueField() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(MULTI_VALUED_FIELD_NAME)
@@ -148,7 +151,8 @@ public class BooleanTermsIT extends ESIntegTestCase {
         }
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx_unmapped").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ChildrenIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ChildrenIT.java
index b6611a9..c729c2f 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ChildrenIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ChildrenIT.java
@@ -30,6 +30,7 @@ import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.search.aggregations.metrics.tophits.TopHits;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -41,18 +42,9 @@ import java.util.Set;
 import static org.elasticsearch.index.query.QueryBuilders.hasChildQuery;
 import static org.elasticsearch.index.query.QueryBuilders.matchQuery;
 import static org.elasticsearch.index.query.QueryBuilders.termQuery;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.children;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.sum;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.terms;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.topHits;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.sameInstance;
+import static org.elasticsearch.search.aggregations.AggregationBuilders.*;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
@@ -128,6 +120,7 @@ public class ChildrenIT extends ESIntegTestCase {
         ensureSearchable("test");
     }
 
+    @Test
     public void testChildrenAggs() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("test")
                 .setQuery(matchQuery("randomized", true))
@@ -169,6 +162,7 @@ public class ChildrenIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testParentWithMultipleBuckets() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("test")
                 .setQuery(matchQuery("randomized", false))
@@ -231,6 +225,7 @@ public class ChildrenIT extends ESIntegTestCase {
         assertThat(topHits.getHits().getAt(0).getType(), equalTo("comment"));
     }
 
+    @Test
     public void testWithDeletes() throws Exception {
         String indexName = "xyz";
         assertAcked(
@@ -275,6 +270,7 @@ public class ChildrenIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testNonExistingChildType() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("test")
                 .addAggregation(
@@ -287,6 +283,7 @@ public class ChildrenIT extends ESIntegTestCase {
         assertThat(children.getDocCount(), equalTo(0l));
     }
 
+    @Test
     public void testPostCollection() throws Exception {
         String indexName = "prodcatalog";
         String masterType = "masterprod";
@@ -346,6 +343,7 @@ public class ChildrenIT extends ESIntegTestCase {
         assertThat(termsAgg.getBucketByKey("44").getDocCount(), equalTo(1l));
     }
 
+    @Test
     public void testHierarchicalChildrenAggs() {
         String indexName = "geo";
         String grandParentType = "continent";
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramOffsetIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramOffsetIT.java
index bb22361..08e0767 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramOffsetIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramOffsetIT.java
@@ -31,6 +31,7 @@ import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.List;
@@ -83,7 +84,8 @@ public class DateHistogramOffsetIT extends ESIntegTestCase {
         indexRandom(true, reqs);
     }
 
-    public void testSingleValueWithPositiveOffset() throws Exception {
+    @Test
+    public void singleValue_WithPositiveOffset() throws Exception {
         prepareIndex(date("2014-03-11T00:00:00+00:00"), 5, 1, 0);
 
         SearchResponse response = client().prepareSearch("idx2")
@@ -105,7 +107,8 @@ public class DateHistogramOffsetIT extends ESIntegTestCase {
         checkBucketFor(buckets.get(1), new DateTime(2014, 3, 11, 2, 0, DateTimeZone.UTC), 3l);
     }
 
-    public void testSingleValueWithNegativeOffset() throws Exception {
+    @Test
+    public void singleValue_WithNegativeOffset() throws Exception {
         prepareIndex(date("2014-03-11T00:00:00+00:00"), 5, -1, 0);
 
         SearchResponse response = client().prepareSearch("idx2")
@@ -130,7 +133,8 @@ public class DateHistogramOffsetIT extends ESIntegTestCase {
     /**
      * Set offset so day buckets start at 6am. Index first 12 hours for two days, with one day gap.
      */
-    public void testSingleValueWithOffsetMinDocCount() throws Exception {
+    @Test
+    public void singleValue_WithOffset_MinDocCount() throws Exception {
         prepareIndex(date("2014-03-11T00:00:00+00:00"), 12, 1, 0);
         prepareIndex(date("2014-03-14T00:00:00+00:00"), 12, 1, 13);
 
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/FilterIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/FilterIT.java
index b447580..47de43d 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/FilterIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/FilterIT.java
@@ -29,6 +29,7 @@ import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
 import org.elasticsearch.search.aggregations.metrics.avg.Avg;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -90,7 +91,8 @@ public class FilterIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testSimple() throws Exception {
+    @Test
+    public void simple() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(filter("tag1").filter(termQuery("tag", "tag1")))
                 .execute().actionGet();
@@ -106,7 +108,8 @@ public class FilterIT extends ESIntegTestCase {
 
     // See NullPointer issue when filters are empty:
     // https://github.com/elasticsearch/elasticsearch/issues/8438
-    public void testEmptyFilterDeclarations() throws Exception {
+    @Test
+    public void emptyFilterDeclarations() throws Exception {
         QueryBuilder emptyFilter = new BoolQueryBuilder();
         SearchResponse response = client().prepareSearch("idx").addAggregation(filter("tag1").filter(emptyFilter)).execute().actionGet();
 
@@ -117,7 +120,8 @@ public class FilterIT extends ESIntegTestCase {
         assertThat(filter.getDocCount(), equalTo((long) numDocs));
     }
 
-    public void testWithSubAggregation() throws Exception {
+    @Test
+    public void withSubAggregation() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(filter("tag1")
                         .filter(termQuery("tag", "tag1"))
@@ -145,7 +149,9 @@ public class FilterIT extends ESIntegTestCase {
         assertThat((double) filter.getProperty("avg_value.value"), equalTo((double) sum / numTag1Docs));
     }
 
-    public void testWithContextBasedSubAggregation() throws Exception {
+    @Test
+    public void withContextBasedSubAggregation() throws Exception {
+
         try {
             client().prepareSearch("idx")
                     .addAggregation(filter("tag1")
@@ -156,12 +162,12 @@ public class FilterIT extends ESIntegTestCase {
             fail("expected execution to fail - an attempt to have a context based numeric sub-aggregation, but there is not value source" +
                     "context which the sub-aggregation can inherit");
 
-        } catch (ElasticsearchException e) {
-            assertThat(e.getMessage(), is("all shards failed"));
+        } catch (ElasticsearchException ese) {
         }
     }
 
-    public void testEmptyAggregation() throws Exception {
+    @Test
+    public void emptyAggregation() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0)
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/FiltersIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/FiltersIT.java
index 42e1967..e3ff341 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/FiltersIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/FiltersIT.java
@@ -30,6 +30,7 @@ import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
 import org.elasticsearch.search.aggregations.metrics.avg.Avg;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -107,7 +108,8 @@ public class FiltersIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testSimple() throws Exception {
+    @Test
+    public void simple() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(
                         filters("tags")
@@ -134,7 +136,8 @@ public class FiltersIT extends ESIntegTestCase {
 
     // See NullPointer issue when filters are empty:
     // https://github.com/elasticsearch/elasticsearch/issues/8438
-    public void testEmptyFilterDeclarations() throws Exception {
+    @Test
+    public void emptyFilterDeclarations() throws Exception {
         QueryBuilder emptyFilter = new BoolQueryBuilder();
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(filters("tags").filter("all", emptyFilter).filter("tag1", termQuery("tag", "tag1"))).execute()
@@ -152,7 +155,8 @@ public class FiltersIT extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo((long) numTag1Docs));
     }
 
-    public void testWithSubAggregation() throws Exception {
+    @Test
+    public void withSubAggregation() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(
                         filters("tags")
@@ -205,7 +209,8 @@ public class FiltersIT extends ESIntegTestCase {
         assertThat((double) propertiesCounts[1], equalTo((double) sum / numTag2Docs));
     }
 
-    public void testWithContextBasedSubAggregation() throws Exception {
+    @Test
+    public void withContextBasedSubAggregation() throws Exception {
 
         try {
             client().prepareSearch("idx")
@@ -220,12 +225,12 @@ public class FiltersIT extends ESIntegTestCase {
             fail("expected execution to fail - an attempt to have a context based numeric sub-aggregation, but there is not value source" +
                     "context which the sub-aggregation can inherit");
 
-        } catch (ElasticsearchException e) {
-            assertThat(e.getMessage(), is("all shards failed"));
+        } catch (ElasticsearchException ese) {
         }
     }
 
-    public void testEmptyAggregation() throws Exception {
+    @Test
+    public void emptyAggregation() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0)
@@ -246,7 +251,8 @@ public class FiltersIT extends ESIntegTestCase {
         assertThat(all.getDocCount(), is(0l));
     }
 
-    public void testSimpleNonKeyed() throws Exception {
+    @Test
+    public void simple_nonKeyed() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(
                         filters("tags")
@@ -274,7 +280,8 @@ public class FiltersIT extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo((long) numTag2Docs));
     }
 
-    public void testOtherBucket() throws Exception {
+    @Test
+    public void otherBucket() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -304,7 +311,8 @@ public class FiltersIT extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo((long) numOtherDocs));
     }
 
-    public void testOtherNamedBucket() throws Exception {
+    @Test
+    public void otherNamedBucket() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -334,7 +342,8 @@ public class FiltersIT extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo((long) numOtherDocs));
     }
 
-    public void testOtherNonKeyed() throws Exception {
+    @Test
+    public void other_nonKeyed() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(
                         filters("tags").otherBucket(true)
@@ -366,7 +375,8 @@ public class FiltersIT extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo((long) numOtherDocs));
     }
 
-    public void testOtherWithSubAggregation() throws Exception {
+    @Test
+    public void otherWithSubAggregation() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(
                         filters("tags").otherBucket(true)
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GeoDistanceIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GeoDistanceIT.java
index e0a3e64..6bbbdb5 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GeoDistanceIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GeoDistanceIT.java
@@ -29,6 +29,7 @@ import org.elasticsearch.search.aggregations.bucket.range.Range.Bucket;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -122,7 +123,8 @@ public class GeoDistanceIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testSimple() throws Exception {
+    @Test
+    public void simple() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(geoDistance("amsterdam_rings")
                         .field("location")
@@ -144,7 +146,7 @@ public class GeoDistanceIT extends ESIntegTestCase {
 
         Range.Bucket bucket = buckets.get(0);
         assertThat(bucket, notNullValue());
-        assertThat((String) bucket.getKey(), equalTo("*-500.0"));
+        assertThat((String) (String) bucket.getKey(), equalTo("*-500.0"));
         assertThat(((Number) bucket.getFrom()).doubleValue(), equalTo(0.0));
         assertThat(((Number) bucket.getTo()).doubleValue(), equalTo(500.0));
         assertThat(bucket.getFromAsString(), equalTo("0.0"));
@@ -153,7 +155,7 @@ public class GeoDistanceIT extends ESIntegTestCase {
 
         bucket = buckets.get(1);
         assertThat(bucket, notNullValue());
-        assertThat((String) bucket.getKey(), equalTo("500.0-1000.0"));
+        assertThat((String) (String) bucket.getKey(), equalTo("500.0-1000.0"));
         assertThat(((Number) bucket.getFrom()).doubleValue(), equalTo(500.0));
         assertThat(((Number) bucket.getTo()).doubleValue(), equalTo(1000.0));
         assertThat(bucket.getFromAsString(), equalTo("500.0"));
@@ -170,7 +172,8 @@ public class GeoDistanceIT extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(1l));
     }
 
-    public void testSimpleWithCustomKeys() throws Exception {
+    @Test
+    public void simple_WithCustomKeys() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(geoDistance("amsterdam_rings")
                         .field("location")
@@ -218,7 +221,8 @@ public class GeoDistanceIT extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(1l));
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         client().admin().cluster().prepareHealth("idx_unmapped").setWaitForYellowStatus().execute().actionGet();
 
         SearchResponse response = client().prepareSearch("idx_unmapped")
@@ -268,7 +272,8 @@ public class GeoDistanceIT extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(0l));
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx", "idx_unmapped")
                 .addAggregation(geoDistance("amsterdam_rings")
                         .field("location")
@@ -316,7 +321,9 @@ public class GeoDistanceIT extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(1l));
     }
 
-    public void testWithSubAggregation() throws Exception {
+
+    @Test
+    public void withSubAggregation() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(geoDistance("amsterdam_rings")
                         .field("location")
@@ -402,7 +409,8 @@ public class GeoDistanceIT extends ESIntegTestCase {
         assertThat((Terms) propertiesCities[2], sameInstance(cities));
     }
 
-    public void testEmptyAggregation() throws Exception {
+    @Test
+    public void emptyAggregation() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0)
@@ -429,7 +437,8 @@ public class GeoDistanceIT extends ESIntegTestCase {
         assertThat(buckets.get(0).getDocCount(), equalTo(0l));
     }
 
-    public void testMultiValues() throws Exception {
+    @Test
+    public void multiValues() throws Exception {
         SearchResponse response = client().prepareSearch("idx-multi")
                 .addAggregation(geoDistance("amsterdam_rings")
                         .field("location")
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GeoHashGridIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GeoHashGridIT.java
index 534e781..82196cc 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GeoHashGridIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GeoHashGridIT.java
@@ -24,6 +24,7 @@ import com.carrotsearch.hppc.ObjectObjectHashMap;
 import com.carrotsearch.hppc.ObjectObjectMap;
 import com.carrotsearch.hppc.cursors.ObjectIntCursor;
 
+import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.XGeoHashUtils;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.search.SearchResponse;
@@ -35,6 +36,7 @@ import org.elasticsearch.search.aggregations.bucket.filter.Filter;
 import org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGrid;
 import org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGrid.Bucket;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -130,7 +132,9 @@ public class GeoHashGridIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testSimple() throws Exception {
+
+    @Test
+    public void simple() throws Exception {
         for (int precision = 1; precision <= XGeoHashUtils.PRECISION; precision++) {
             SearchResponse response = client().prepareSearch("idx")
                     .addAggregation(geohashGrid("geohashgrid")
@@ -161,7 +165,8 @@ public class GeoHashGridIT extends ESIntegTestCase {
         }
     }
 
-    public void testMultivalued() throws Exception {
+    @Test
+    public void multivalued() throws Exception {
         for (int precision = 1; precision <= XGeoHashUtils.PRECISION; precision++) {
             SearchResponse response = client().prepareSearch("multi_valued_idx")
                     .addAggregation(geohashGrid("geohashgrid")
@@ -185,7 +190,8 @@ public class GeoHashGridIT extends ESIntegTestCase {
         }
     }
 
-    public void testFiltered() throws Exception {
+    @Test
+    public void filtered() throws Exception {
         GeoBoundingBoxQueryBuilder bbox = new GeoBoundingBoxQueryBuilder("location");
         bbox.setCorners(smallestGeoHash, smallestGeoHash).queryName("bbox");
         for (int precision = 1; precision <= XGeoHashUtils.PRECISION; precision++) {
@@ -218,7 +224,8 @@ public class GeoHashGridIT extends ESIntegTestCase {
         }
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         for (int precision = 1; precision <= XGeoHashUtils.PRECISION; precision++) {
             SearchResponse response = client().prepareSearch("idx_unmapped")
                     .addAggregation(geohashGrid("geohashgrid")
@@ -235,7 +242,8 @@ public class GeoHashGridIT extends ESIntegTestCase {
 
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         for (int precision = 1; precision <= XGeoHashUtils.PRECISION; precision++) {
             SearchResponse response = client().prepareSearch("idx", "idx_unmapped")
                     .addAggregation(geohashGrid("geohashgrid")
@@ -259,6 +267,7 @@ public class GeoHashGridIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testTopMatch() throws Exception {
         for (int precision = 1; precision <= XGeoHashUtils.PRECISION; precision++) {
             SearchResponse response = client().prepareSearch("idx")
@@ -291,8 +300,9 @@ public class GeoHashGridIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     // making sure this doesn't runs into an OOME
-    public void testSizeIsZero() {
+    public void sizeIsZero() {
         for (int precision = 1; precision <= XGeoHashUtils.PRECISION; precision++) {
             final int size = randomBoolean() ? 0 : randomIntBetween(1, Integer.MAX_VALUE);
             final int shardSize = randomBoolean() ? -1 : 0;
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GlobalIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GlobalIT.java
index 9cebfeb..a313d15 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GlobalIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GlobalIT.java
@@ -18,6 +18,9 @@
  */
 package org.elasticsearch.search.aggregations.bucket;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import org.elasticsearch.ElasticsearchException;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.search.SearchResponse;
@@ -25,9 +28,7 @@ import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.aggregations.bucket.global.Global;
 import org.elasticsearch.search.aggregations.metrics.stats.Stats;
 import org.elasticsearch.test.ESIntegTestCase;
-
-import java.util.ArrayList;
-import java.util.List;
+import org.junit.Test;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.global;
@@ -71,7 +72,8 @@ public class GlobalIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testWithStatsSubAggregator() throws Exception {
+    @Test
+    public void withStatsSubAggregator() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .setQuery(QueryBuilders.termQuery("tag", "tag1"))
                 .addAggregation(global("global")
@@ -103,8 +105,11 @@ public class GlobalIT extends ESIntegTestCase {
         assertThat(stats.getSum(), equalTo((double) sum));
     }
 
-    public void testNonTopLevel() throws Exception {
+    @Test
+    public void nonTopLevel() throws Exception {
+
         try {
+
             client().prepareSearch("idx")
                     .setQuery(QueryBuilders.termQuery("tag", "tag1"))
                     .addAggregation(global("global")
@@ -114,8 +119,7 @@ public class GlobalIT extends ESIntegTestCase {
             fail("expected to fail executing non-top-level global aggregator. global aggregations are only allowed as top level" +
                     "aggregations");
 
-        } catch (ElasticsearchException e) {
-            assertThat(e.getMessage(), is("all shards failed"));
+        } catch (ElasticsearchException ese) {
         }
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/MissingIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/MissingIT.java
index 924ba72..9b5df37 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/MissingIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/MissingIT.java
@@ -25,6 +25,7 @@ import org.elasticsearch.search.aggregations.bucket.missing.Missing;
 import org.elasticsearch.search.aggregations.metrics.avg.Avg;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -87,7 +88,8 @@ public class MissingIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse response = client().prepareSearch("unmapped_idx")
                 .addAggregation(missing("missing_tag").field("tag"))
                 .execute().actionGet();
@@ -101,7 +103,8 @@ public class MissingIT extends ESIntegTestCase {
         assertThat(missing.getDocCount(), equalTo((long) numDocsUnmapped));
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx", "unmapped_idx")
                 .addAggregation(missing("missing_tag").field("tag"))
                 .execute().actionGet();
@@ -115,7 +118,8 @@ public class MissingIT extends ESIntegTestCase {
         assertThat(missing.getDocCount(), equalTo((long) numDocsMissing + numDocsUnmapped));
     }
 
-    public void testSimple() throws Exception {
+    @Test
+    public void simple() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(missing("missing_tag").field("tag"))
                 .execute().actionGet();
@@ -129,7 +133,8 @@ public class MissingIT extends ESIntegTestCase {
         assertThat(missing.getDocCount(), equalTo((long) numDocsMissing));
     }
 
-    public void testWithSubAggregation() throws Exception {
+    @Test
+    public void withSubAggregation() throws Exception {
         SearchResponse response = client().prepareSearch("idx", "unmapped_idx")
                 .addAggregation(missing("missing_tag").field("tag")
                         .subAggregation(avg("avg_value").field("value")))
@@ -160,7 +165,9 @@ public class MissingIT extends ESIntegTestCase {
         assertThat((double) missing.getProperty("avg_value.value"), equalTo((double) sum / (numDocsMissing + numDocsUnmapped)));
     }
 
-    public void testWithInheritedSubMissing() throws Exception {
+    @Test
+    public void withInheritedSubMissing() throws Exception {
+
         SearchResponse response = client().prepareSearch("idx", "unmapped_idx")
                 .addAggregation(missing("top_missing").field("tag")
                         .subAggregation(missing("sub_missing")))
@@ -181,7 +188,8 @@ public class MissingIT extends ESIntegTestCase {
         assertThat(subMissing.getDocCount(), equalTo((long) numDocsMissing + numDocsUnmapped));
     }
 
-    public void testEmptyAggregation() throws Exception {
+    @Test
+    public void emptyAggregation() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0)
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/NaNSortingIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/NaNSortingIT.java
index bfd6837..3825901 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/NaNSortingIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/NaNSortingIT.java
@@ -30,6 +30,7 @@ import org.elasticsearch.search.aggregations.metrics.MetricsAggregationBuilder;
 import org.elasticsearch.search.aggregations.metrics.avg.Avg;
 import org.elasticsearch.search.aggregations.metrics.stats.extended.ExtendedStats;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.avg;
@@ -147,19 +148,23 @@ public class NaNSortingIT extends ESIntegTestCase {
         assertCorrectlySorted(terms, asc, agg);
     }
 
-    public void testStringTerms() {
+    @Test
+    public void stringTerms() {
         testTerms("string_value");
     }
 
-    public void testLongTerms() {
+    @Test
+    public void longTerms() {
         testTerms("long_value");
     }
 
-    public void testDoubleTerms() {
+    @Test
+    public void doubleTerms() {
         testTerms("double_value");
     }
 
-    public void testLongHistogram() {
+    @Test
+    public void longHistogram() {
         final boolean asc = randomBoolean();
         SubAggregation agg = randomFrom(SubAggregation.values());
         SearchResponse response = client().prepareSearch("idx")
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/NestedIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/NestedIT.java
index a1f4b20..7842fd8 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/NestedIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/NestedIT.java
@@ -36,6 +36,7 @@ import org.elasticsearch.search.aggregations.metrics.stats.Stats;
 import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -165,7 +166,8 @@ public class NestedIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testSimple() throws Exception {
+    @Test
+    public void simple() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(nested("nested").path("nested")
                         .subAggregation(stats("nested_value_stats").field("nested.value")))
@@ -203,7 +205,8 @@ public class NestedIT extends ESIntegTestCase {
         assertThat(stats.getAvg(), equalTo((double) sum / count));
     }
 
-    public void testNonExistingNestedField() throws Exception {
+    @Test
+    public void nonExistingNestedField() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .addAggregation(nested("nested").path("value")
                         .subAggregation(stats("nested_value_stats").field("nested.value")))
@@ -215,7 +218,8 @@ public class NestedIT extends ESIntegTestCase {
         assertThat(nested.getDocCount(), is(0l));
     }
 
-    public void testNestedWithSubTermsAgg() throws Exception {
+    @Test
+    public void nestedWithSubTermsAgg() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(nested("nested").path("nested")
                         .subAggregation(terms("values").field("nested.value").size(100)
@@ -266,7 +270,8 @@ public class NestedIT extends ESIntegTestCase {
         assertThat((LongTerms) nested.getProperty("values"), sameInstance(values));
     }
 
-    public void testNestedAsSubAggregation() throws Exception {
+    @Test
+    public void nestedAsSubAggregation() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(terms("top_values").field("value").size(100)
                         .collectMode(aggCollectionMode)
@@ -294,7 +299,8 @@ public class NestedIT extends ESIntegTestCase {
         }
     }
 
-    public void testNestNestedAggs() throws Exception {
+    @Test
+    public void nestNestedAggs() throws Exception {
         SearchResponse response = client().prepareSearch("idx_nested_nested_aggs")
                 .addAggregation(nested("level1").path("nested1")
                         .subAggregation(terms("a").field("nested1.a")
@@ -329,7 +335,9 @@ public class NestedIT extends ESIntegTestCase {
         assertThat(sum.getValue(), equalTo(2d));
     }
 
-    public void testEmptyAggregation() throws Exception {
+
+    @Test
+    public void emptyAggregation() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0)
@@ -348,7 +356,8 @@ public class NestedIT extends ESIntegTestCase {
         assertThat(nested.getDocCount(), is(0l));
     }
 
-    public void testNestedOnObjectField() throws Exception {
+    @Test
+    public void nestedOnObjectField() throws Exception {
         try {
             client().prepareSearch("idx")
                     .setQuery(matchAllQuery())
@@ -360,6 +369,7 @@ public class NestedIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     // Test based on: https://github.com/elasticsearch/elasticsearch/issues/9280
     public void testParentFilterResolvedCorrectly() throws Exception {
         XContentBuilder mapping = jsonBuilder().startObject().startObject("provider").startObject("properties")
@@ -458,7 +468,8 @@ public class NestedIT extends ESIntegTestCase {
         assertThat(tags.getBuckets().size(), equalTo(0)); // and this must be empty
     }
 
-    public void testNestedSameDocIdProcessedMultipleTime() throws Exception {
+    @Test
+    public void nestedSameDocIdProcessedMultipleTime() throws Exception {
         assertAcked(
                 prepareCreate("idx4")
                         .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).put(SETTING_NUMBER_OF_REPLICAS, 0))
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ParentIdAggIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ParentIdAggIT.java
index 44bd22a..75751c1 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ParentIdAggIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ParentIdAggIT.java
@@ -23,6 +23,7 @@ import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.search.aggregations.AggregationBuilders;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -34,6 +35,8 @@ import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.instanceOf;
 
 public class ParentIdAggIT extends ESIntegTestCase {
+
+    @Test
     public void testParentIdAggregation() throws IOException {
         XContentBuilder mapping = jsonBuilder().startObject()
                 .startObject("childtype")
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ReverseNestedIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ReverseNestedIT.java
index 8800063..2a7be3b 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ReverseNestedIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ReverseNestedIT.java
@@ -30,6 +30,7 @@ import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.search.aggregations.metrics.valuecount.ValueCount;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -136,7 +137,8 @@ public class ReverseNestedIT extends ESIntegTestCase {
         indexRandom(false, client().prepareIndex("idx", "type2").setRouting("1").setSource(source));
     }
 
-    public void testSimpleReverseNestedToRoot() throws Exception {
+    @Test
+    public void simple_reverseNestedToRoot() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type1")
                 .addAggregation(nested("nested1").path("nested1")
                         .subAggregation(
@@ -324,7 +326,8 @@ public class ReverseNestedIT extends ESIntegTestCase {
         assertThat(tagsBuckets.get(3).getDocCount(), equalTo(1l));
     }
 
-    public void testSimpleNested1ToRootToNested2() throws Exception {
+    @Test
+    public void simple_nested1ToRootToNested2() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type2")
                 .addAggregation(nested("nested1").path("nested1")
                                 .subAggregation(
@@ -346,7 +349,8 @@ public class ReverseNestedIT extends ESIntegTestCase {
         assertThat(nested.getDocCount(), equalTo(27l));
     }
 
-    public void testSimpleReverseNestedToNested1() throws Exception {
+    @Test
+    public void simple_reverseNestedToNested1() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type2")
                 .addAggregation(nested("nested1").path("nested1.nested2")
                                 .subAggregation(
@@ -448,26 +452,23 @@ public class ReverseNestedIT extends ESIntegTestCase {
         assertThat(tagsBuckets.get(1).getKeyAsString(), equalTo("f"));
     }
 
-    public void testReverseNestedAggWithoutNestedAgg() {
-        try {
-            client().prepareSearch("idx")
-                    .addAggregation(terms("field2").field("nested1.nested2.field2")
-                            .collectMode(randomFrom(SubAggCollectionMode.values()))
-                                    .subAggregation(
-                                            reverseNested("nested1_to_field1")
-                                                    .subAggregation(
-                                                            terms("field1").field("nested1.field1")
-                                                            .collectMode(randomFrom(SubAggCollectionMode.values()))
-                                                    )
-                                    )
-                    ).get();
-            fail("Expected SearchPhaseExecutionException");
-        } catch (SearchPhaseExecutionException e) {
-            assertThat(e.getMessage(), is("all shards failed"));
-        }
+    @Test(expected = SearchPhaseExecutionException.class)
+    public void testReverseNestedAggWithoutNestedAgg() throws Exception {
+        client().prepareSearch("idx")
+                .addAggregation(terms("field2").field("nested1.nested2.field2")
+                        .collectMode(randomFrom(SubAggCollectionMode.values()))
+                                .subAggregation(
+                                        reverseNested("nested1_to_field1")
+                                                .subAggregation(
+                                                        terms("field1").field("nested1.field1")
+                                                        .collectMode(randomFrom(SubAggCollectionMode.values()))
+                                                )
+                                )
+                ).get();
     }
 
-    public void testNonExistingNestedField() throws Exception {
+    @Test
+    public void nonExistingNestedField() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(nested("nested2").path("nested1.nested2").subAggregation(reverseNested("incorrect").path("nested3")))
@@ -481,6 +482,7 @@ public class ReverseNestedIT extends ESIntegTestCase {
         assertThat(reverseNested.getDocCount(), is(0l));
     }
 
+    @Test
     public void testSameParentDocHavingMultipleBuckets() throws Exception {
         XContentBuilder mapping = jsonBuilder().startObject().startObject("product").field("dynamic", "strict").startObject("properties")
                 .startObject("id").field("type", "long").endObject()
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SamplerIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SamplerIT.java
index 2535ca3..5898722 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SamplerIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SamplerIT.java
@@ -30,6 +30,7 @@ import org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket;
 import org.elasticsearch.search.aggregations.bucket.terms.TermsBuilder;
 import org.elasticsearch.search.aggregations.metrics.max.Max;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Collection;
 
@@ -57,7 +58,7 @@ public class SamplerIT extends ESIntegTestCase {
         return randomBoolean() ? null : randomFrom(SamplerAggregator.ExecutionMode.values()).toString();
     }
 
-
+    
     @Override
     public void setupSuiteScopeCluster() throws Exception {
         assertAcked(prepareCreate("test").setSettings(SETTING_NUMBER_OF_SHARDS, NUM_SHARDS, SETTING_NUMBER_OF_REPLICAS, 0).addMapping(
@@ -69,7 +70,7 @@ public class SamplerIT extends ESIntegTestCase {
                 .addMapping("book", "name", "type=string,index=analyzed", "genre", "type=string,index=not_analyzed", "price", "type=float"));
 
         ensureGreen();
-        String data[] = {
+        String data[] = {                    
                 // "id,cat,name,price,inStock,author_t,series_t,sequence_i,genre_s",
                 "0553573403,book,A Game of Thrones,7.99,true,George R.R. Martin,A Song of Ice and Fire,1,fantasy",
                 "0553579908,book,A Clash of Kings,7.99,true,George R.R. Martin,A Song of Ice and Fire,2,fantasy",
@@ -83,7 +84,7 @@ public class SamplerIT extends ESIntegTestCase {
                 "080508049X,book,The Black Cauldron,5.99,true,Lloyd Alexander,The Chronicles of Prydain,2,fantasy"
 
             };
-
+            
         for (int i = 0; i < data.length; i++) {
             String[] parts = data[i].split(",");
             client().prepareIndex("test", "book", "" + i).setSource("author", parts[5], "name", parts[2], "genre", parts[8], "price",Float.parseFloat(parts[3])).get();
@@ -91,11 +92,12 @@ public class SamplerIT extends ESIntegTestCase {
         }
         client().admin().indices().refresh(new RefreshRequest("test")).get();
     }
-
-    public void testIssue10719() throws Exception {
+    
+    @Test
+    public void issue10719() throws Exception {
         // Tests that we can refer to nested elements under a sample in a path
         // statement
-        boolean asc = randomBoolean();
+        boolean asc = randomBoolean();        
         SearchResponse response = client().prepareSearch("test").setTypes("book").setSearchType(SearchType.QUERY_AND_FETCH)
                 .addAggregation(terms("genres")
                         .field("genre")
@@ -123,7 +125,8 @@ public class SamplerIT extends ESIntegTestCase {
 
     }
 
-    public void testNoDiversity() throws Exception {
+    @Test
+    public void noDiversity() throws Exception {
         SamplerAggregationBuilder sampleAgg = new SamplerAggregationBuilder("sample").shardSize(100);
         sampleAgg.subAggregation(new TermsBuilder("authors").field("author"));
         SearchResponse response = client().prepareSearch("test").setSearchType(SearchType.QUERY_AND_FETCH)
@@ -140,7 +143,8 @@ public class SamplerIT extends ESIntegTestCase {
         assertThat(maxBooksPerAuthor, equalTo(3l));
     }
 
-    public void testSimpleDiversity() throws Exception {
+    @Test
+    public void simpleDiversity() throws Exception {
         int MAX_DOCS_PER_AUTHOR = 1;
         SamplerAggregationBuilder sampleAgg = new SamplerAggregationBuilder("sample").shardSize(100);
         sampleAgg.field("author").maxDocsPerValue(MAX_DOCS_PER_AUTHOR).executionHint(randomExecutionHint());
@@ -156,13 +160,14 @@ public class SamplerIT extends ESIntegTestCase {
         Sampler sample = response.getAggregations().get("sample");
         Terms authors = sample.getAggregations().get("authors");
         Collection<Bucket> testBuckets = authors.getBuckets();
-
+    
         for (Terms.Bucket testBucket : testBuckets) {
             assertThat(testBucket.getDocCount(), lessThanOrEqualTo((long) NUM_SHARDS * MAX_DOCS_PER_AUTHOR));
-        }
+        }        
     }
 
-    public void testNestedDiversity() throws Exception {
+    @Test
+    public void nestedDiversity() throws Exception {
         // Test multiple samples gathered under buckets made by a parent agg
         int MAX_DOCS_PER_AUTHOR = 1;
         TermsBuilder rootTerms = new TermsBuilder("genres").field("genre");
@@ -188,7 +193,8 @@ public class SamplerIT extends ESIntegTestCase {
         }
     }
 
-    public void testNestedSamples() throws Exception {
+    @Test
+    public void nestedSamples() throws Exception {
         // Test samples nested under samples
         int MAX_DOCS_PER_AUTHOR = 1;
         int MAX_DOCS_PER_GENRE = 2;
@@ -220,7 +226,8 @@ public class SamplerIT extends ESIntegTestCase {
         }
     }
 
-    public void testUnmappedChildAggNoDiversity() throws Exception {
+    @Test
+    public void unmappedChildAggNoDiversity() throws Exception {
         SamplerAggregationBuilder sampleAgg = new SamplerAggregationBuilder("sample").shardSize(100);
         sampleAgg.subAggregation(new TermsBuilder("authors").field("author"));
         SearchResponse response = client().prepareSearch("idx_unmapped")
@@ -237,7 +244,10 @@ public class SamplerIT extends ESIntegTestCase {
         assertThat(authors.getBuckets().size(), equalTo(0));
     }
 
-    public void testPartiallyUnmappedChildAggNoDiversity() throws Exception {
+
+
+    @Test
+    public void partiallyUnmappedChildAggNoDiversity() throws Exception {
         SamplerAggregationBuilder sampleAgg = new SamplerAggregationBuilder("sample").shardSize(100);
         sampleAgg.subAggregation(new TermsBuilder("authors").field("author"));
         SearchResponse response = client().prepareSearch("idx_unmapped", "test")
@@ -254,7 +264,8 @@ public class SamplerIT extends ESIntegTestCase {
         assertThat(authors.getBuckets().size(), greaterThan(0));
     }
 
-    public void testPartiallyUnmappedDiversifyField() throws Exception {
+    @Test
+    public void partiallyUnmappedDiversifyField() throws Exception {
         // One of the indexes is missing the "author" field used for
         // diversifying results
         SamplerAggregationBuilder sampleAgg = new SamplerAggregationBuilder("sample").shardSize(100).field("author").maxDocsPerValue(1);
@@ -269,8 +280,9 @@ public class SamplerIT extends ESIntegTestCase {
         assertThat(authors.getBuckets().size(), greaterThan(0));
     }
 
-    public void testWhollyUnmappedDiversifyField() throws Exception {
-        //All of the indices are missing the "author" field used for diversifying results
+    @Test
+    public void whollyUnmappedDiversifyField() throws Exception {
+        //All of the indices are missing the "author" field used for diversifying results        
         int MAX_DOCS_PER_AUTHOR = 1;
         SamplerAggregationBuilder sampleAgg = new SamplerAggregationBuilder("sample").shardSize(100);
         sampleAgg.field("author").maxDocsPerValue(MAX_DOCS_PER_AUTHOR).executionHint(randomExecutionHint());
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ShardReduceIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ShardReduceIT.java
index 7e3b959..b71ee5b 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ShardReduceIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ShardReduceIT.java
@@ -33,6 +33,7 @@ import org.elasticsearch.search.aggregations.bucket.nested.Nested;
 import org.elasticsearch.search.aggregations.bucket.range.Range;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.dateHistogram;
@@ -87,7 +88,9 @@ public class ShardReduceIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
+    @Test
     public void testGlobal() throws Exception {
+
         SearchResponse response = client().prepareSearch("idx")
                 .setQuery(QueryBuilders.matchAllQuery())
                 .addAggregation(global("global")
@@ -101,7 +104,9 @@ public class ShardReduceIT extends ESIntegTestCase {
         assertThat(histo.getBuckets().size(), equalTo(4));
     }
 
+    @Test
     public void testFilter() throws Exception {
+
         SearchResponse response = client().prepareSearch("idx")
                 .setQuery(QueryBuilders.matchAllQuery())
                 .addAggregation(filter("filter").filter(QueryBuilders.matchAllQuery())
@@ -115,7 +120,9 @@ public class ShardReduceIT extends ESIntegTestCase {
         assertThat(histo.getBuckets().size(), equalTo(4));
     }
 
+    @Test
     public void testMissing() throws Exception {
+
         SearchResponse response = client().prepareSearch("idx")
                 .setQuery(QueryBuilders.matchAllQuery())
                 .addAggregation(missing("missing").field("foobar")
@@ -129,7 +136,9 @@ public class ShardReduceIT extends ESIntegTestCase {
         assertThat(histo.getBuckets().size(), equalTo(4));
     }
 
+    @Test
     public void testGlobalWithFilterWithMissing() throws Exception {
+
         SearchResponse response = client().prepareSearch("idx")
                 .setQuery(QueryBuilders.matchAllQuery())
                 .addAggregation(global("global")
@@ -147,7 +156,9 @@ public class ShardReduceIT extends ESIntegTestCase {
         assertThat(histo.getBuckets().size(), equalTo(4));
     }
 
+    @Test
     public void testNested() throws Exception {
+
         SearchResponse response = client().prepareSearch("idx")
                 .setQuery(QueryBuilders.matchAllQuery())
                 .addAggregation(nested("nested").path("nested")
@@ -161,7 +172,9 @@ public class ShardReduceIT extends ESIntegTestCase {
         assertThat(histo.getBuckets().size(), equalTo(4));
     }
 
+    @Test
     public void testStringTerms() throws Exception {
+
         SearchResponse response = client().prepareSearch("idx")
                 .setQuery(QueryBuilders.matchAllQuery())
                 .addAggregation(terms("terms").field("term-s")
@@ -176,7 +189,9 @@ public class ShardReduceIT extends ESIntegTestCase {
         assertThat(histo.getBuckets().size(), equalTo(4));
     }
 
+    @Test
     public void testLongTerms() throws Exception {
+
         SearchResponse response = client().prepareSearch("idx")
                 .setQuery(QueryBuilders.matchAllQuery())
                 .addAggregation(terms("terms").field("term-l")
@@ -191,7 +206,9 @@ public class ShardReduceIT extends ESIntegTestCase {
         assertThat(histo.getBuckets().size(), equalTo(4));
     }
 
+    @Test
     public void testDoubleTerms() throws Exception {
+
         SearchResponse response = client().prepareSearch("idx")
                 .setQuery(QueryBuilders.matchAllQuery())
                 .addAggregation(terms("terms").field("term-d")
@@ -206,7 +223,9 @@ public class ShardReduceIT extends ESIntegTestCase {
         assertThat(histo.getBuckets().size(), equalTo(4));
     }
 
+    @Test
     public void testRange() throws Exception {
+
         SearchResponse response = client().prepareSearch("idx")
                 .setQuery(QueryBuilders.matchAllQuery())
                 .addAggregation(range("range").field("value").addRange("r1", 0, 10)
@@ -220,7 +239,9 @@ public class ShardReduceIT extends ESIntegTestCase {
         assertThat(histo.getBuckets().size(), equalTo(4));
     }
 
+    @Test
     public void testDateRange() throws Exception {
+
         SearchResponse response = client().prepareSearch("idx")
                 .setQuery(QueryBuilders.matchAllQuery())
                 .addAggregation(dateRange("range").field("date").addRange("r1", "2014-01-01", "2014-01-10")
@@ -234,7 +255,9 @@ public class ShardReduceIT extends ESIntegTestCase {
         assertThat(histo.getBuckets().size(), equalTo(4));
     }
 
+    @Test
     public void testIpRange() throws Exception {
+
         SearchResponse response = client().prepareSearch("idx")
                 .setQuery(QueryBuilders.matchAllQuery())
                 .addAggregation(ipRange("range").field("ip").addRange("r1", "10.0.0.1", "10.0.0.10")
@@ -248,7 +271,9 @@ public class ShardReduceIT extends ESIntegTestCase {
         assertThat(histo.getBuckets().size(), equalTo(4));
     }
 
+    @Test
     public void testHistogram() throws Exception {
+
         SearchResponse response = client().prepareSearch("idx")
                 .setQuery(QueryBuilders.matchAllQuery())
                 .addAggregation(histogram("topHisto").field("value").interval(5)
@@ -262,7 +287,9 @@ public class ShardReduceIT extends ESIntegTestCase {
         assertThat(histo.getBuckets().size(), equalTo(4));
     }
 
+    @Test
     public void testDateHistogram() throws Exception {
+
         SearchResponse response = client().prepareSearch("idx")
                 .setQuery(QueryBuilders.matchAllQuery())
                 .addAggregation(dateHistogram("topHisto").field("date").interval(DateHistogramInterval.MONTH)
@@ -277,7 +304,9 @@ public class ShardReduceIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testGeoHashGrid() throws Exception {
+
         SearchResponse response = client().prepareSearch("idx")
                 .setQuery(QueryBuilders.matchAllQuery())
                 .addAggregation(geohashGrid("grid").field("location")
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ShardSizeTermsIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ShardSizeTermsIT.java
index 78e4f7a..e76f48a 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ShardSizeTermsIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ShardSizeTermsIT.java
@@ -21,6 +21,7 @@ package org.elasticsearch.search.aggregations.bucket;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.search.aggregations.Aggregator.SubAggCollectionMode;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.HashMap;
@@ -31,7 +32,9 @@ import static org.elasticsearch.search.aggregations.AggregationBuilders.terms;
 import static org.hamcrest.Matchers.equalTo;
 
 public class ShardSizeTermsIT extends ShardSizeTestCase {
-    public void testNoShardSizeString() throws Exception {
+
+    @Test
+    public void noShardSize_string() throws Exception {
         createIdx("type=string,index=not_analyzed");
 
         indexData();
@@ -54,7 +57,8 @@ public class ShardSizeTermsIT extends ShardSizeTestCase {
         }
     }
 
-    public void testShardSizeEqualsSizeString() throws Exception {
+    @Test
+    public void shardSizeEqualsSize_string() throws Exception {
         createIdx("type=string,index=not_analyzed");
 
         indexData();
@@ -77,7 +81,8 @@ public class ShardSizeTermsIT extends ShardSizeTestCase {
         }
     }
 
-    public void testWithShardSizeString() throws Exception {
+    @Test
+    public void withShardSize_string() throws Exception {
 
         createIdx("type=string,index=not_analyzed");
 
@@ -101,7 +106,8 @@ public class ShardSizeTermsIT extends ShardSizeTestCase {
         }
     }
 
-    public void testWithShardSizeStringSingleShard() throws Exception {
+    @Test
+    public void withShardSize_string_singleShard() throws Exception {
 
         createIdx("type=string,index=not_analyzed");
 
@@ -125,7 +131,8 @@ public class ShardSizeTermsIT extends ShardSizeTestCase {
         }
     }
 
-    public void testNoShardSizeTermOrderString() throws Exception {
+    @Test
+    public void noShardSizeTermOrder_string() throws Exception {
         createIdx("type=string,index=not_analyzed");
 
         indexData();
@@ -148,7 +155,9 @@ public class ShardSizeTermsIT extends ShardSizeTestCase {
         }
     }
 
-    public void testNoShardSizeLong() throws Exception {
+    @Test
+    public void noShardSize_long() throws Exception {
+
         createIdx("type=long");
 
         indexData();
@@ -171,7 +180,9 @@ public class ShardSizeTermsIT extends ShardSizeTestCase {
         }
     }
 
-    public void testShardSizeEqualsSizeLong() throws Exception {
+    @Test
+    public void shardSizeEqualsSize_long() throws Exception {
+
         createIdx("type=long");
 
         indexData();
@@ -194,7 +205,9 @@ public class ShardSizeTermsIT extends ShardSizeTestCase {
         }
     }
 
-    public void testWithShardSizeLong() throws Exception {
+    @Test
+    public void withShardSize_long() throws Exception {
+
         createIdx("type=long");
 
         indexData();
@@ -217,7 +230,8 @@ public class ShardSizeTermsIT extends ShardSizeTestCase {
         }
     }
 
-    public void testWithShardSizeLongSingleShard() throws Exception {
+    @Test
+    public void withShardSize_long_singleShard() throws Exception {
 
         createIdx("type=long");
 
@@ -241,7 +255,9 @@ public class ShardSizeTermsIT extends ShardSizeTestCase {
         }
     }
 
-    public void testNoShardSizeTermOrderLong() throws Exception {
+    @Test
+    public void noShardSizeTermOrder_long() throws Exception {
+
         createIdx("type=long");
 
         indexData();
@@ -264,7 +280,9 @@ public class ShardSizeTermsIT extends ShardSizeTestCase {
         }
     }
 
-    public void testNoShardSizeDouble() throws Exception {
+    @Test
+    public void noShardSize_double() throws Exception {
+
         createIdx("type=double");
 
         indexData();
@@ -287,7 +305,9 @@ public class ShardSizeTermsIT extends ShardSizeTestCase {
         }
     }
 
-    public void testShardSizeEqualsSizeDouble() throws Exception {
+    @Test
+    public void shardSizeEqualsSize_double() throws Exception {
+
         createIdx("type=double");
 
         indexData();
@@ -310,7 +330,9 @@ public class ShardSizeTermsIT extends ShardSizeTestCase {
         }
     }
 
-    public void testWithShardSizeDouble() throws Exception {
+    @Test
+    public void withShardSize_double() throws Exception {
+
         createIdx("type=double");
 
         indexData();
@@ -333,7 +355,9 @@ public class ShardSizeTermsIT extends ShardSizeTestCase {
         }
     }
 
-    public void testWithShardSizeDoubleSingleShard() throws Exception {
+    @Test
+    public void withShardSize_double_singleShard() throws Exception {
+
         createIdx("type=double");
 
         indexData();
@@ -356,7 +380,9 @@ public class ShardSizeTermsIT extends ShardSizeTestCase {
         }
     }
 
-    public void testNoShardSizeTermOrderDouble() throws Exception {
+    @Test
+    public void noShardSizeTermOrder_double() throws Exception {
+
         createIdx("type=double");
 
         indexData();
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsBackwardCompatibilityIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsBackwardCompatibilityIT.java
index 5b79760..556c012 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsBackwardCompatibilityIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsBackwardCompatibilityIT.java
@@ -27,6 +27,7 @@ import org.elasticsearch.search.aggregations.bucket.terms.StringTerms;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.search.aggregations.bucket.terms.TermsBuilder;
 import org.elasticsearch.test.ESBackcompatTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -50,7 +51,9 @@ public class SignificantTermsBackwardCompatibilityIT extends ESBackcompatTestCas
     /**
      * Simple upgrade test for streaming significant terms buckets
      */
+    @Test
     public void testBucketStreaming() throws IOException, ExecutionException, InterruptedException {
+
         logger.debug("testBucketStreaming: indexing documents");
         String type = randomBoolean() ? "string" : "long";
         String settings = "{\"index.number_of_shards\": 5, \"index.number_of_replicas\": 0}";
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsIT.java
index 7582d75..882f2b7 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsIT.java
@@ -36,6 +36,7 @@ import org.elasticsearch.search.aggregations.bucket.significant.heuristics.Perce
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.search.aggregations.bucket.terms.TermsBuilder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.HashMap;
@@ -71,7 +72,7 @@ public class SignificantTermsIT extends ESIntegTestCase {
     public static final int MUSIC_CATEGORY=1;
     public static final int OTHER_CATEGORY=2;
     public static final int SNOWBOARDING_CATEGORY=3;
-
+    
     @Override
     public void setupSuiteScopeCluster() throws Exception {
         assertAcked(prepareCreate("test").setSettings(SETTING_NUMBER_OF_SHARDS, 5, SETTING_NUMBER_OF_REPLICAS, 0).addMapping("fact",
@@ -80,7 +81,7 @@ public class SignificantTermsIT extends ESIntegTestCase {
         createIndex("idx_unmapped");
 
         ensureGreen();
-        String data[] = {
+        String data[] = {                    
                     "A\t1\tpaul weller was lead singer of the jam before the style council",
                     "B\t1\tpaul weller left the jam to form the style council",
                     "A\t2\tpaul smith is a designer in the fashion industry",
@@ -99,9 +100,9 @@ public class SignificantTermsIT extends ESIntegTestCase {
                     "B\t3\tterje haakonsen has credited craig kelly as his snowboard mentor",
                     "A\t3\tterje haakonsen and craig kelly were some of the first snowboarders sponsored by burton snowboards",
                     "B\t3\tlike craig kelly before him terje won the mt baker banked slalom many times - once riding switch",
-                    "A\t3\tterje haakonsen has been a team rider for burton snowboards for over 20 years"
+                    "A\t3\tterje haakonsen has been a team rider for burton snowboards for over 20 years"                         
             };
-
+            
         for (int i = 0; i < data.length; i++) {
             String[] parts = data[i].split("\t");
             client().prepareIndex("test", "fact", "" + i)
@@ -111,7 +112,8 @@ public class SignificantTermsIT extends ESIntegTestCase {
         client().admin().indices().refresh(new RefreshRequest("test")).get();
     }
 
-    public void testStructuredAnalysis() throws Exception {
+    @Test
+    public void structuredAnalysis() throws Exception {
         SearchResponse response = client().prepareSearch("test")
                 .setSearchType(SearchType.QUERY_AND_FETCH)
                 .setQuery(new TermQueryBuilder("_all", "terje"))
@@ -125,8 +127,9 @@ public class SignificantTermsIT extends ESIntegTestCase {
         Number topCategory = (Number) topTerms.getBuckets().iterator().next().getKey();
         assertTrue(topCategory.equals(new Long(SNOWBOARDING_CATEGORY)));
     }
-
-    public void testStructuredAnalysisWithIncludeExclude() throws Exception {
+    
+    @Test
+    public void structuredAnalysisWithIncludeExclude() throws Exception {
         long[] excludeTerms = { MUSIC_CATEGORY };
         SearchResponse response = client().prepareSearch("test")
                 .setSearchType(SearchType.QUERY_AND_FETCH)
@@ -142,7 +145,8 @@ public class SignificantTermsIT extends ESIntegTestCase {
         assertTrue(topCategory.equals(new Long(OTHER_CATEGORY)));
     }
 
-    public void testIncludeExclude() throws Exception {
+    @Test
+    public void includeExclude() throws Exception {
         SearchResponse response = client().prepareSearch("test")
                 .setQuery(new TermQueryBuilder("_all", "weller"))
                 .addAggregation(new SignificantTermsBuilder("mySignificantTerms").field("description").executionHint(randomExecutionHint())
@@ -176,8 +180,9 @@ public class SignificantTermsIT extends ESIntegTestCase {
         assertThat(terms, hasSize(1));
         assertThat(terms.contains("weller"), is(true));
     }
-
-    public void testIncludeExcludeExactValues() throws Exception {
+    
+    @Test
+    public void includeExcludeExactValues() throws Exception {
         String []incExcTerms={"weller","nosuchterm"};
         SearchResponse response = client().prepareSearch("test")
                 .setQuery(new TermQueryBuilder("_all", "weller"))
@@ -205,9 +210,10 @@ public class SignificantTermsIT extends ESIntegTestCase {
         }
         assertThat(terms, hasSize(1));
         assertThat(terms.contains("weller"), is(true));
-    }
-
-    public void testUnmapped() throws Exception {
+    }    
+    
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx_unmapped")
                 .setSearchType(SearchType.QUERY_AND_FETCH)
                 .setQuery(new TermQueryBuilder("_all", "terje"))
@@ -217,11 +223,12 @@ public class SignificantTermsIT extends ESIntegTestCase {
                 .execute()
                 .actionGet();
         assertSearchResponse(response);
-        SignificantTerms topTerms = response.getAggregations().get("mySignificantTerms");
+        SignificantTerms topTerms = response.getAggregations().get("mySignificantTerms");        
         assertThat(topTerms.getBuckets().size(), equalTo(0));
     }
 
-    public void testTextAnalysis() throws Exception {
+    @Test
+    public void textAnalysis() throws Exception {
         SearchResponse response = client().prepareSearch("test")
                 .setSearchType(SearchType.QUERY_AND_FETCH)
                 .setQuery(new TermQueryBuilder("_all", "terje"))
@@ -235,7 +242,8 @@ public class SignificantTermsIT extends ESIntegTestCase {
         checkExpectedStringTermsFound(topTerms);
     }
 
-    public void testTextAnalysisGND() throws Exception {
+    @Test
+    public void textAnalysisGND() throws Exception {
         SearchResponse response = client().prepareSearch("test")
                 .setSearchType(SearchType.QUERY_AND_FETCH)
                 .setQuery(new TermQueryBuilder("_all", "terje"))
@@ -249,7 +257,8 @@ public class SignificantTermsIT extends ESIntegTestCase {
         checkExpectedStringTermsFound(topTerms);
     }
 
-    public void testTextAnalysisChiSquare() throws Exception {
+    @Test
+    public void textAnalysisChiSquare() throws Exception {
         SearchResponse response = client().prepareSearch("test")
                 .setSearchType(SearchType.QUERY_AND_FETCH)
                 .setQuery(new TermQueryBuilder("_all", "terje"))
@@ -263,7 +272,8 @@ public class SignificantTermsIT extends ESIntegTestCase {
         checkExpectedStringTermsFound(topTerms);
     }
 
-    public void testTextAnalysisPercentageScore() throws Exception {
+    @Test
+    public void textAnalysisPercentageScore() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("test")
                 .setSearchType(SearchType.QUERY_AND_FETCH)
@@ -279,15 +289,16 @@ public class SignificantTermsIT extends ESIntegTestCase {
         checkExpectedStringTermsFound(topTerms);
     }
 
-    public void testBadFilteredAnalysis() throws Exception {
+    @Test
+    public void badFilteredAnalysis() throws Exception {
         // Deliberately using a bad choice of filter here for the background context in order
-        // to test robustness.
+        // to test robustness. 
         // We search for the name of a snowboarder but use music-related content (fact_category:1)
         // as the background source of term statistics.
         SearchResponse response = client().prepareSearch("test")
                 .setSearchType(SearchType.QUERY_AND_FETCH)
                 .setQuery(new TermQueryBuilder("_all", "terje"))
-                .setFrom(0).setSize(60).setExplain(true)
+                .setFrom(0).setSize(60).setExplain(true)                
                 .addAggregation(new SignificantTermsBuilder("mySignificantTerms").field("description")
                            .minDocCount(2).backgroundFilter(QueryBuilders.termQuery("fact_category", 1)))
                 .execute()
@@ -305,13 +316,15 @@ public class SignificantTermsIT extends ESIntegTestCase {
             }
         }
         assertTrue(hasMissingBackgroundTerms);
-    }
-
-    public void testFilteredAnalysis() throws Exception {
+    }       
+    
+    
+    @Test
+    public void filteredAnalysis() throws Exception {
         SearchResponse response = client().prepareSearch("test")
                 .setSearchType(SearchType.QUERY_AND_FETCH)
                 .setQuery(new TermQueryBuilder("_all", "weller"))
-                .setFrom(0).setSize(60).setExplain(true)
+                .setFrom(0).setSize(60).setExplain(true)                
                 .addAggregation(new SignificantTermsBuilder("mySignificantTerms").field("description")
                            .minDocCount(1).backgroundFilter(QueryBuilders.termsQuery("description",  "paul")))
                 .execute()
@@ -322,15 +335,16 @@ public class SignificantTermsIT extends ESIntegTestCase {
         for (Bucket topTerm : topTerms) {
             topWords.add(topTerm.getKeyAsString());
         }
-        //The word "paul" should be a constant of all docs in the background set and therefore not seen as significant
+        //The word "paul" should be a constant of all docs in the background set and therefore not seen as significant 
         assertFalse(topWords.contains("paul"));
-        //"Weller" is the only Paul who was in The Jam and therefore this should be identified as a differentiator from the background of all other Pauls.
+        //"Weller" is the only Paul who was in The Jam and therefore this should be identified as a differentiator from the background of all other Pauls. 
         assertTrue(topWords.contains("jam"));
-    }
+    }       
 
-    public void testNestedAggs() throws Exception {
+    @Test
+    public void nestedAggs() throws Exception {
         String[][] expectedKeywordsByCategory={
-                { "paul", "weller", "jam", "style", "council" },
+                { "paul", "weller", "jam", "style", "council" },                
                 { "paul", "smith" },
                 { "craig", "kelly", "terje", "haakonsen", "burton" }};
         SearchResponse response = client().prepareSearch("test")
@@ -355,9 +369,11 @@ public class SignificantTermsIT extends ESIntegTestCase {
                 assertTrue(expectedKeyword + " missing from category keywords", foundTopWords.contains(expectedKeyword));
             }
         }
-    }
+    }    
+
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx_unmapped", "test")
                 .setSearchType(SearchType.QUERY_AND_FETCH)
                 .setQuery(new TermQueryBuilder("_all", "terje"))
@@ -405,6 +421,7 @@ public class SignificantTermsIT extends ESIntegTestCase {
         checkExpectedStringTermsFound(topTerms);
     }
 
+    @Test
     public void testMutualInformation() throws Exception {
         SearchResponse response = client().prepareSearch("test")
                 .setSearchType(SearchType.QUERY_AND_FETCH)
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/TermsDocCountErrorIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/TermsDocCountErrorIT.java
index 79aa6b2..db6f5be 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/TermsDocCountErrorIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/TermsDocCountErrorIT.java
@@ -29,6 +29,7 @@ import org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms.Order;
 import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregatorFactory.ExecutionMode;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -102,7 +103,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertThat(accurateTerms, notNullValue());
         assertThat(accurateTerms.getName(), equalTo("terms"));
         assertThat(accurateTerms.getDocCountError(), equalTo(0l));
-
+    
         Terms testTerms = testResponse.getAggregations().get("terms");
         assertThat(testTerms, notNullValue());
         assertThat(testTerms.getName(), equalTo("terms"));
@@ -110,7 +111,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         Collection<Bucket> testBuckets = testTerms.getBuckets();
         assertThat(testBuckets.size(), lessThanOrEqualTo(size));
         assertThat(accurateTerms.getBuckets().size(), greaterThanOrEqualTo(testBuckets.size()));
-
+    
         for (Terms.Bucket testBucket : testBuckets) {
             assertThat(testBucket, notNullValue());
             Terms.Bucket accurateBucket = accurateTerms.getBucketByKey(testBucket.getKeyAsString());
@@ -120,14 +121,14 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
             assertThat(testBucket.getDocCount() + testBucket.getDocCountError(), greaterThanOrEqualTo(accurateBucket.getDocCount()));
             assertThat(testBucket.getDocCount() - testBucket.getDocCountError(), lessThanOrEqualTo(accurateBucket.getDocCount()));
         }
-
+        
         for (Terms.Bucket accurateBucket: accurateTerms.getBuckets()) {
             assertThat(accurateBucket, notNullValue());
             Terms.Bucket testBucket = accurateTerms.getBucketByKey(accurateBucket.getKeyAsString());
             if (testBucket == null) {
                 assertThat(accurateBucket.getDocCount(), lessThanOrEqualTo(testTerms.getDocCountError()));
             }
-
+            
         }
     }
 
@@ -136,7 +137,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertThat(accurateTerms, notNullValue());
         assertThat(accurateTerms.getName(), equalTo("terms"));
         assertThat(accurateTerms.getDocCountError(), equalTo(0l));
-
+    
         Terms testTerms = testResponse.getAggregations().get("terms");
         assertThat(testTerms, notNullValue());
         assertThat(testTerms.getName(), equalTo("terms"));
@@ -144,7 +145,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         Collection<Bucket> testBuckets = testTerms.getBuckets();
         assertThat(testBuckets.size(), lessThanOrEqualTo(size));
         assertThat(accurateTerms.getBuckets().size(), greaterThanOrEqualTo(testBuckets.size()));
-
+    
         for (Terms.Bucket testBucket : testBuckets) {
             assertThat(testBucket, notNullValue());
             Terms.Bucket accurateBucket = accurateTerms.getBucketByKey(testBucket.getKeyAsString());
@@ -161,7 +162,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertThat(testTerms.getDocCountError(), equalTo(0l));
         Collection<Bucket> testBuckets = testTerms.getBuckets();
         assertThat(testBuckets.size(), lessThanOrEqualTo(size));
-
+    
         for (Terms.Bucket testBucket : testBuckets) {
             assertThat(testBucket, notNullValue());
             assertThat(testBucket.getDocCountError(), equalTo(0l));
@@ -173,7 +174,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertThat(accurateTerms, notNullValue());
         assertThat(accurateTerms.getName(), equalTo("terms"));
         assertThat(accurateTerms.getDocCountError(), equalTo(0l));
-
+    
         Terms testTerms = testResponse.getAggregations().get("terms");
         assertThat(testTerms, notNullValue());
         assertThat(testTerms.getName(), equalTo("terms"));
@@ -181,7 +182,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         Collection<Bucket> testBuckets = testTerms.getBuckets();
         assertThat(testBuckets.size(), lessThanOrEqualTo(size));
         assertThat(accurateTerms.getBuckets().size(), greaterThanOrEqualTo(testBuckets.size()));
-
+    
         for (Terms.Bucket testBucket : testBuckets) {
             assertThat(testBucket, notNullValue());
             Terms.Bucket accurateBucket = accurateTerms.getBucketByKey(testBucket.getKeyAsString());
@@ -191,7 +192,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         }
     }
 
-    public void testStringValueField() throws Exception {
+    @Test
+    public void stringValueField() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx").setTypes("type")
@@ -205,7 +207,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -221,7 +223,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertDocCountErrorWithinBounds(size, accurateResponse, testResponse);
     }
 
-    public void testStringValueFieldSingleShard() throws Exception {
+    @Test
+    public void stringValueField_singleShard() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -235,7 +238,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -251,10 +254,11 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertNoDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testStringValueFieldWithRouting() throws Exception {
+    @Test
+    public void stringValueField_withRouting() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_with_routing").setTypes("type").setRouting(String.valueOf(between(1, numRoutingValues)))
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -270,7 +274,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertNoDocCountErrorSingleResponse(size, testResponse);
     }
 
-    public void testStringValueFieldDocCountAsc() throws Exception {
+    @Test
+    public void stringValueField_docCountAsc() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -285,7 +290,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -302,7 +307,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertUnboundedDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testStringValueFieldTermSortAsc() throws Exception {
+    @Test
+    public void stringValueField_termSortAsc() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -317,7 +323,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -334,7 +340,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertNoDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testStringValueFieldTermSortDesc() throws Exception {
+    @Test
+    public void stringValueField_termSortDesc() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -349,7 +356,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -366,7 +373,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertNoDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testStringValueFieldSubAggAsc() throws Exception {
+    @Test
+    public void stringValueField_subAggAsc() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -382,7 +390,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -400,7 +408,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertUnboundedDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testStringValueFieldSubAggDesc() throws Exception {
+    @Test
+    public void stringValueField_subAggDesc() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -416,7 +425,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -434,7 +443,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertUnboundedDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testLongValueField() throws Exception {
+    @Test
+    public void longValueField() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx").setTypes("type")
@@ -448,7 +458,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -464,7 +474,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertDocCountErrorWithinBounds(size, accurateResponse, testResponse);
     }
 
-    public void testLongValueFieldSingleShard() throws Exception {
+    @Test
+    public void longValueField_singleShard() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -478,7 +489,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -494,10 +505,11 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertNoDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testLongValueFieldWithRouting() throws Exception {
+    @Test
+    public void longValueField_withRouting() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_with_routing").setTypes("type").setRouting(String.valueOf(between(1, numRoutingValues)))
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -513,7 +525,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertNoDocCountErrorSingleResponse(size, testResponse);
     }
 
-    public void testLongValueFieldDocCountAsc() throws Exception {
+    @Test
+    public void longValueField_docCountAsc() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -528,7 +541,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -545,7 +558,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertUnboundedDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testLongValueFieldTermSortAsc() throws Exception {
+    @Test
+    public void longValueField_termSortAsc() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -560,7 +574,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -577,7 +591,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertNoDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testLongValueFieldTermSortDesc() throws Exception {
+    @Test
+    public void longValueField_termSortDesc() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -592,7 +607,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -609,7 +624,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertNoDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testLongValueFieldSubAggAsc() throws Exception {
+    @Test
+    public void longValueField_subAggAsc() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -625,7 +641,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -643,7 +659,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertUnboundedDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testLongValueFieldSubAggDesc() throws Exception {
+    @Test
+    public void longValueField_subAggDesc() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -659,7 +676,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -677,7 +694,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertUnboundedDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testDoubleValueField() throws Exception {
+    @Test
+    public void doubleValueField() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx").setTypes("type")
@@ -691,7 +709,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -707,7 +725,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertDocCountErrorWithinBounds(size, accurateResponse, testResponse);
     }
 
-    public void testDoubleValueFieldSingleShard() throws Exception {
+    @Test
+    public void doubleValueField_singleShard() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -721,7 +740,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -737,10 +756,11 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertNoDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testDoubleValueFieldWithRouting() throws Exception {
+    @Test
+    public void doubleValueField_withRouting() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_with_routing").setTypes("type").setRouting(String.valueOf(between(1, numRoutingValues)))
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -756,7 +776,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertNoDocCountErrorSingleResponse(size, testResponse);
     }
 
-    public void testDoubleValueFieldDocCountAsc() throws Exception {
+    @Test
+    public void doubleValueField_docCountAsc() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -771,7 +792,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -788,7 +809,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertUnboundedDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testDoubleValueFieldTermSortAsc() throws Exception {
+    @Test
+    public void doubleValueField_termSortAsc() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -803,7 +825,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -820,7 +842,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertNoDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testDoubleValueFieldTermSortDesc() throws Exception {
+    @Test
+    public void doubleValueField_termSortDesc() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -835,7 +858,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -852,7 +875,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertNoDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testDoubleValueFieldSubAggAsc() throws Exception {
+    @Test
+    public void doubleValueField_subAggAsc() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -868,7 +892,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
@@ -886,7 +910,8 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
         assertUnboundedDocCountError(size, accurateResponse, testResponse);
     }
 
-    public void testDoubleValueFieldSubAggDesc() throws Exception {
+    @Test
+    public void doubleValueField_subAggDesc() throws Exception {
         int size = randomIntBetween(1, 20);
         int shardSize = randomIntBetween(size, size * 2);
         SearchResponse accurateResponse = client().prepareSearch("idx_single_shard").setTypes("type")
@@ -902,7 +927,7 @@ public class TermsDocCountErrorIT extends ESIntegTestCase {
                 .execute().actionGet();
 
         assertSearchResponse(accurateResponse);
-
+        
         SearchResponse testResponse = client().prepareSearch("idx_single_shard").setTypes("type")
                 .addAggregation(terms("terms")
                         .executionHint(randomExecutionHint())
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/TermsShardMinDocCountIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/TermsShardMinDocCountIT.java
index 9a7b337..03aebd6 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/TermsShardMinDocCountIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/TermsShardMinDocCountIT.java
@@ -29,6 +29,7 @@ import org.elasticsearch.search.aggregations.bucket.significant.SignificantTerms
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.search.aggregations.bucket.terms.TermsBuilder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -50,7 +51,9 @@ public class TermsShardMinDocCountIT extends ESIntegTestCase {
     }
 
     // see https://github.com/elasticsearch/elasticsearch/issues/5998
-    public void testShardMinDocCountSignificantTermsTest() throws Exception {
+    @Test
+    public void shardMinDocCountSignificantTermsTest() throws Exception {
+
         String termtype = "string";
         if (randomBoolean()) {
             termtype = "long";
@@ -108,7 +111,8 @@ public class TermsShardMinDocCountIT extends ESIntegTestCase {
     }
 
     // see https://github.com/elasticsearch/elasticsearch/issues/5998
-    public void testShardMinDocCountTermsTest() throws Exception {
+    @Test
+    public void shardMinDocCountTermsTest() throws Exception {
         final String [] termTypes = {"string", "long", "integer", "float", "double"};
         String termtype = termTypes[randomInt(termTypes.length - 1)];
 
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregatorTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregatorTests.java
index b5ef5d9..56eb619 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregatorTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregatorTests.java
@@ -38,6 +38,7 @@ import org.elasticsearch.common.lucene.search.Queries;
 import org.elasticsearch.index.IndexService;
 import org.elasticsearch.index.mapper.internal.TypeFieldMapper;
 import org.elasticsearch.index.mapper.internal.UidFieldMapper;
+import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.search.aggregations.Aggregator;
 import org.elasticsearch.search.aggregations.AggregatorFactories;
 import org.elasticsearch.search.aggregations.BucketCollector;
@@ -45,6 +46,7 @@ import org.elasticsearch.search.aggregations.SearchContextAggregations;
 import org.elasticsearch.search.aggregations.support.AggregationContext;
 import org.elasticsearch.search.internal.SearchContext;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -55,6 +57,8 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public class NestedAggregatorTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testResetRootDocId() throws Exception {
         Directory directory = newDirectory();
         IndexWriterConfig iwc = new IndexWriterConfig(null);
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/significant/SignificanceHeuristicTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/significant/SignificanceHeuristicTests.java
index c911da0..aea11ba 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/significant/SignificanceHeuristicTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/significant/SignificanceHeuristicTests.java
@@ -34,13 +34,17 @@ import org.elasticsearch.search.aggregations.bucket.significant.heuristics.GND;
 import org.elasticsearch.search.aggregations.bucket.significant.heuristics.JLHScore;
 import org.elasticsearch.search.aggregations.bucket.significant.heuristics.MutualInformation;
 import org.elasticsearch.search.aggregations.bucket.significant.heuristics.PercentageScore;
+import org.elasticsearch.search.aggregations.bucket.significant.heuristics.ScriptHeuristic;
 import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristic;
 import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristicBuilder;
 import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristicParser;
 import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristicParserMapper;
+import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristicStreams;
+import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;
 import org.elasticsearch.search.internal.SearchContext;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.TestSearchContext;
+import org.junit.Test;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -75,7 +79,8 @@ public class SignificanceHeuristicTests extends ESTestCase {
     }
 
     // test that stream output can actually be read - does not replace bwc test
-    public void testStreamResponse() throws Exception {
+    @Test
+    public void streamResponse() throws Exception {
         Version version = randomVersion(random());
         InternalSignificantTerms[] sigTerms = getRandomSignificantTerms(getRandomSignificanceheuristic());
 
@@ -103,13 +108,13 @@ public class SignificanceHeuristicTests extends ESTestCase {
             BytesRef term = new BytesRef("123.0");
             buckets.add(new SignificantLongTerms.Bucket(1, 2, 3, 4, 123, InternalAggregations.EMPTY, null));
             sTerms[0] = new SignificantLongTerms(10, 20, "some_name", null, 1, 1, heuristic, buckets,
-                    Collections.EMPTY_LIST, null);
+                    (List<PipelineAggregator>) Collections.EMPTY_LIST, null);
             sTerms[1] = new SignificantLongTerms();
         } else {
 
             BytesRef term = new BytesRef("someterm");
             buckets.add(new SignificantStringTerms.Bucket(term, 1, 2, 3, 4, InternalAggregations.EMPTY));
-            sTerms[0] = new SignificantStringTerms(10, 20, "some_name", 1, 1, heuristic, buckets, Collections.EMPTY_LIST,
+            sTerms[0] = new SignificantStringTerms(10, 20, "some_name", 1, 1, heuristic, buckets, (List<PipelineAggregator>) Collections.EMPTY_LIST,
                     null);
             sTerms[1] = new SignificantStringTerms();
         }
@@ -128,6 +133,7 @@ public class SignificanceHeuristicTests extends ESTestCase {
     // test that
     // 1. The output of the builders can actually be parsed
     // 2. The parser does not swallow parameters after a significance heuristic was defined
+    @Test
     public void testBuilderAndParser() throws Exception {
 
         Set<SignificanceHeuristicParser> parsers = new HashSet<>();
@@ -302,6 +308,7 @@ public class SignificanceHeuristicTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testAssertions() throws Exception {
         testBackgroundAssertions(new MutualInformation(true, true), new MutualInformation(true, false));
         testBackgroundAssertions(new ChiSquare(true, true), new ChiSquare(true, false));
@@ -310,7 +317,8 @@ public class SignificanceHeuristicTests extends ESTestCase {
         testAssertions(JLHScore.INSTANCE);
     }
 
-    public void testBasicScoreProperties() {
+    @Test
+    public void basicScoreProperties() {
         basicScoreProperties(JLHScore.INSTANCE, true);
         basicScoreProperties(new GND(true), true);
         basicScoreProperties(PercentageScore.INSTANCE, true);
@@ -319,6 +327,7 @@ public class SignificanceHeuristicTests extends ESTestCase {
     }
 
     public void basicScoreProperties(SignificanceHeuristic heuristic, boolean test0) {
+
         assertThat(heuristic.getScore(1, 1, 1, 3), greaterThan(0.0));
         assertThat(heuristic.getScore(1, 1, 2, 3), lessThan(heuristic.getScore(1, 1, 1, 3)));
         assertThat(heuristic.getScore(1, 1, 3, 4), lessThan(heuristic.getScore(1, 1, 2, 4)));
@@ -338,7 +347,8 @@ public class SignificanceHeuristicTests extends ESTestCase {
         assertThat(score, greaterThanOrEqualTo(0.0));
     }
 
-    public void testScoreMutual() throws Exception {
+    @Test
+    public void scoreMutual() throws Exception {
         SignificanceHeuristic heuristic = new MutualInformation(true, true);
         assertThat(heuristic.getScore(1, 1, 1, 3), greaterThan(0.0));
         assertThat(heuristic.getScore(1, 1, 2, 3), lessThan(heuristic.getScore(1, 1, 1, 3)));
@@ -374,6 +384,7 @@ public class SignificanceHeuristicTests extends ESTestCase {
         assertThat(score, lessThanOrEqualTo(1.0));
     }
 
+    @Test
     public void testGNDCornerCases() throws Exception {
         GND gnd = new GND(true);
         //term is only in the subset, not at all in the other set but that is because the other set is empty.
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/AbstractNumericTestCase.java b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/AbstractNumericTestCase.java
index a2aa586..d60a870 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/AbstractNumericTestCase.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/AbstractNumericTestCase.java
@@ -31,6 +31,7 @@ import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
  */
 @ESIntegTestCase.SuiteScopeTestCase
 public abstract class AbstractNumericTestCase extends ESIntegTestCase {
+
     protected static long minValue, maxValue, minValues, maxValues;
 
     @Override
@@ -76,29 +77,30 @@ public abstract class AbstractNumericTestCase extends ESIntegTestCase {
 
     public abstract void testSingleValuedField() throws Exception;
 
-    public abstract void testSingleValuedFieldGetProperty() throws Exception;
+    public abstract void testSingleValuedField_getProperty() throws Exception;
 
-    public abstract void testSingleValuedFieldPartiallyUnmapped() throws Exception;
+    public abstract void testSingleValuedField_PartiallyUnmapped() throws Exception;
 
-    public abstract void testSingleValuedFieldWithValueScript() throws Exception;
+    public abstract void testSingleValuedField_WithValueScript() throws Exception;
 
-    public abstract void testSingleValuedFieldWithValueScriptWithParams() throws Exception;
+    public abstract void testSingleValuedField_WithValueScript_WithParams() throws Exception;
 
     public abstract void testMultiValuedField() throws Exception;
 
-    public abstract void testMultiValuedFieldWithValueScript() throws Exception;
+    public abstract void testMultiValuedField_WithValueScript() throws Exception;
+
+    public abstract void testMultiValuedField_WithValueScript_WithParams() throws Exception;
 
-    public abstract void testMultiValuedFieldWithValueScriptWithParams() throws Exception;
+    public abstract void testScript_SingleValued() throws Exception;
 
-    public abstract void testScriptSingleValued() throws Exception;
+    public abstract void testScript_SingleValued_WithParams() throws Exception;
 
-    public abstract void testScriptSingleValuedWithParams() throws Exception;
+    public abstract void testScript_ExplicitSingleValued_WithParams() throws Exception;
 
-    public abstract void testScriptExplicitSingleValuedWithParams() throws Exception;
+    public abstract void testScript_MultiValued() throws Exception;
 
-    public abstract void testScriptMultiValued() throws Exception;
+    public abstract void testScript_ExplicitMultiValued() throws Exception;
 
-    public abstract void testScriptExplicitMultiValued() throws Exception;
+    public abstract void testScript_MultiValued_WithParams() throws Exception;
 
-    public abstract void testScriptMultiValuedWithParams() throws Exception;
 }
\ No newline at end of file
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsIT.java
index 0504cb6..056fc59 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsIT.java
@@ -28,6 +28,7 @@ import org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket;
 import org.elasticsearch.search.aggregations.metrics.geobounds.GeoBounds;
 import org.elasticsearch.search.aggregations.metrics.geobounds.GeoBoundsAggregator;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.List;
 
@@ -48,9 +49,11 @@ import static org.hamcrest.Matchers.sameInstance;
  */
 @ESIntegTestCase.SuiteScopeTestCase
 public class GeoBoundsIT extends AbstractGeoTestCase {
+
     private static final String aggName = "geoBounds";
 
-    public void testSingleValuedField() throws Exception {
+    @Test
+    public void singleValuedField() throws Exception {
         SearchResponse response = client().prepareSearch(IDX_NAME)
                 .addAggregation(geoBounds(aggName).field(SINGLE_VALUED_FIELD_NAME)
                         .wrapLongitude(false))
@@ -69,6 +72,7 @@ public class GeoBoundsIT extends AbstractGeoTestCase {
         assertThat(bottomRight.lon(), equalTo(singleBottomRight.lon()));
     }
 
+    @Test
     public void testSingleValuedField_getProperty() throws Exception {
         SearchResponse searchResponse = client()
                 .prepareSearch(IDX_NAME)
@@ -102,9 +106,10 @@ public class GeoBoundsIT extends AbstractGeoTestCase {
         assertThat((double) global.getProperty(aggName + ".right"), equalTo(singleBottomRight.lon()));
     }
 
-    public void testMultiValuedField() throws Exception {
+    @Test
+    public void multiValuedField() throws Exception {
         SearchResponse response = client().prepareSearch(IDX_NAME)
-            .addAggregation(geoBounds(aggName).field(MULTI_VALUED_FIELD_NAME)
+                .addAggregation(geoBounds(aggName).field(MULTI_VALUED_FIELD_NAME)
                         .wrapLongitude(false))
                 .execute().actionGet();
 
@@ -122,7 +127,8 @@ public class GeoBoundsIT extends AbstractGeoTestCase {
         assertThat(bottomRight.lon(), equalTo(multiBottomRight.lon()));
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse response = client().prepareSearch(UNMAPPED_IDX_NAME)
                 .addAggregation(geoBounds(aggName).field(SINGLE_VALUED_FIELD_NAME)
                         .wrapLongitude(false))
@@ -139,7 +145,8 @@ public class GeoBoundsIT extends AbstractGeoTestCase {
         assertThat(bottomRight, equalTo(null));
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         SearchResponse response = client().prepareSearch(IDX_NAME, UNMAPPED_IDX_NAME)
                 .addAggregation(geoBounds(aggName).field(SINGLE_VALUED_FIELD_NAME)
                         .wrapLongitude(false))
@@ -158,7 +165,8 @@ public class GeoBoundsIT extends AbstractGeoTestCase {
         assertThat(bottomRight.lon(), equalTo(singleBottomRight.lon()));
     }
 
-    public void testEmptyAggregation() throws Exception {
+    @Test
+    public void emptyAggregation() throws Exception {
         SearchResponse searchResponse = client().prepareSearch(EMPTY_IDX_NAME)
                 .setQuery(matchAllQuery())
                 .addAggregation(geoBounds(aggName).field(SINGLE_VALUED_FIELD_NAME)
@@ -175,7 +183,8 @@ public class GeoBoundsIT extends AbstractGeoTestCase {
         assertThat(bottomRight, equalTo(null));
     }
 
-    public void testSingleValuedFieldNearDateLine() throws Exception {
+    @Test
+    public void singleValuedFieldNearDateLine() throws Exception {        
         SearchResponse response = client().prepareSearch(DATELINE_IDX_NAME)
                 .addAggregation(geoBounds(aggName).field(SINGLE_VALUED_FIELD_NAME)
                         .wrapLongitude(false))
@@ -197,16 +206,18 @@ public class GeoBoundsIT extends AbstractGeoTestCase {
         assertThat(bottomRight.lon(), equalTo(geoValuesBottomRight.lon()));
     }
 
-    public void testSingleValuedFieldNearDateLineWrapLongitude() throws Exception {
+    @Test
+    public void singleValuedFieldNearDateLineWrapLongitude() throws Exception {
 
         GeoPoint geoValuesTopLeft = new GeoPoint(38, 170);
         GeoPoint geoValuesBottomRight = new GeoPoint(-24, -175);
+        
         SearchResponse response = client().prepareSearch(DATELINE_IDX_NAME)
                 .addAggregation(geoBounds(aggName).field(SINGLE_VALUED_FIELD_NAME).wrapLongitude(true))
                 .execute().actionGet();
 
         assertSearchResponse(response);
-
+        
         GeoBounds geoBounds = response.getAggregations().get(aggName);
         assertThat(geoBounds, notNullValue());
         assertThat(geoBounds.getName(), equalTo(aggName));
@@ -221,7 +232,8 @@ public class GeoBoundsIT extends AbstractGeoTestCase {
     /**
      * This test forces the {@link GeoBoundsAggregator} to resize the {@link BigArray}s it uses to ensure they are resized correctly
      */
-    public void testSingleValuedFieldAsSubAggToHighCardTermsAgg() {
+    @Test
+    public void singleValuedFieldAsSubAggToHighCardTermsAgg() {
         SearchResponse response = client().prepareSearch(HIGH_CARD_IDX_NAME)
                 .addAggregation(terms("terms").field(NUMBER_FIELD_NAME).subAggregation(geoBounds(aggName).field(SINGLE_VALUED_FIELD_NAME)
                         .wrapLongitude(false)))
@@ -248,7 +260,8 @@ public class GeoBoundsIT extends AbstractGeoTestCase {
         }
     }
 
-    public void testSingleValuedFieldWithZeroLon() throws Exception {
+    @Test
+    public void singleValuedFieldWithZeroLon() throws Exception {
         SearchResponse response = client().prepareSearch(IDX_ZERO_NAME)
                 .addAggregation(geoBounds(aggName).field(SINGLE_VALUED_FIELD_NAME).wrapLongitude(false)).execute().actionGet();
 
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoCentroidIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoCentroidIT.java
index e0d260f..9d2670c 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoCentroidIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoCentroidIT.java
@@ -25,6 +25,7 @@ import org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGrid;
 import org.elasticsearch.search.aggregations.bucket.global.Global;
 import org.elasticsearch.search.aggregations.metrics.geocentroid.GeoCentroid;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.List;
 
@@ -33,10 +34,7 @@ import static org.elasticsearch.search.aggregations.AggregationBuilders.geoCentr
 import static org.elasticsearch.search.aggregations.AggregationBuilders.geohashGrid;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.global;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
-import static org.hamcrest.Matchers.closeTo;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.sameInstance;
+import static org.hamcrest.Matchers.*;
 
 /**
  * Integration Test for GeoCentroid metric aggregator
@@ -45,7 +43,8 @@ import static org.hamcrest.Matchers.sameInstance;
 public class GeoCentroidIT extends AbstractGeoTestCase {
     private static final String aggName = "geoCentroid";
 
-    public void testEmptyAggregation() throws Exception {
+    @Test
+    public void emptyAggregation() throws Exception {
         SearchResponse response = client().prepareSearch(EMPTY_IDX_NAME)
                 .setQuery(matchAllQuery())
                 .addAggregation(geoCentroid(aggName).field(SINGLE_VALUED_FIELD_NAME))
@@ -60,7 +59,8 @@ public class GeoCentroidIT extends AbstractGeoTestCase {
         assertThat(centroid, equalTo(null));
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse response = client().prepareSearch(UNMAPPED_IDX_NAME)
                 .addAggregation(geoCentroid(aggName).field(SINGLE_VALUED_FIELD_NAME))
                 .execute().actionGet();
@@ -73,7 +73,8 @@ public class GeoCentroidIT extends AbstractGeoTestCase {
         assertThat(centroid, equalTo(null));
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         SearchResponse response = client().prepareSearch(IDX_NAME, UNMAPPED_IDX_NAME)
                 .addAggregation(geoCentroid(aggName).field(SINGLE_VALUED_FIELD_NAME))
                 .execute().actionGet();
@@ -87,7 +88,8 @@ public class GeoCentroidIT extends AbstractGeoTestCase {
         assertThat(centroid.lon(), closeTo(singleCentroid.lon(), GEOHASH_TOLERANCE));
     }
 
-    public void testSingleValuedField() throws Exception {
+    @Test
+    public void singleValuedField() throws Exception {
         SearchResponse response = client().prepareSearch(IDX_NAME)
                 .setQuery(matchAllQuery())
                 .addAggregation(geoCentroid(aggName).field(SINGLE_VALUED_FIELD_NAME))
@@ -102,7 +104,8 @@ public class GeoCentroidIT extends AbstractGeoTestCase {
         assertThat(centroid.lon(), closeTo(singleCentroid.lon(), GEOHASH_TOLERANCE));
     }
 
-    public void testSingleValueFieldGetProperty() throws Exception {
+    @Test
+    public void singleValueField_getProperty() throws Exception {
         SearchResponse response = client().prepareSearch(IDX_NAME)
                 .setQuery(matchAllQuery())
                 .addAggregation(global("global").subAggregation(geoCentroid(aggName).field(SINGLE_VALUED_FIELD_NAME)))
@@ -129,7 +132,8 @@ public class GeoCentroidIT extends AbstractGeoTestCase {
         assertThat((double) global.getProperty(aggName + ".lon"), closeTo(singleCentroid.lon(), GEOHASH_TOLERANCE));
     }
 
-    public void testMultiValuedField() throws Exception {
+    @Test
+    public void multiValuedField() throws Exception {
         SearchResponse searchResponse = client().prepareSearch(IDX_NAME)
                 .setQuery(matchAllQuery())
                 .addAggregation(geoCentroid(aggName).field(MULTI_VALUED_FIELD_NAME))
@@ -144,7 +148,8 @@ public class GeoCentroidIT extends AbstractGeoTestCase {
         assertThat(centroid.lon(), closeTo(multiCentroid.lon(), GEOHASH_TOLERANCE));
     }
 
-    public void testSingleValueFieldAsSubAggToGeohashGrid() throws Exception {
+    @Test
+    public void singleValueFieldAsSubAggToGeohashGrid() throws Exception {
         SearchResponse response = client().prepareSearch(HIGH_CARD_IDX_NAME)
                 .addAggregation(geohashGrid("geoGrid").field(SINGLE_VALUED_FIELD_NAME)
                 .subAggregation(geoCentroid(aggName)))
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsIT.java
index 985e040..71c7ccd 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsIT.java
@@ -46,6 +46,7 @@ import org.elasticsearch.search.highlight.HighlightField;
 import org.elasticsearch.search.sort.SortBuilders;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -87,7 +88,7 @@ public class TopHitsIT extends ESIntegTestCase {
 
     private static final String TERMS_AGGS_FIELD = "terms";
     private static final String SORT_FIELD = "sort";
-
+    
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(MockScriptEngine.TestPlugin.class);
@@ -248,6 +249,7 @@ public class TopHitsIT extends ESIntegTestCase {
         return bucket.getKeyAsString();
     }
 
+    @Test
     public void testBasics() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -287,6 +289,7 @@ public class TopHitsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testIssue11119() throws Exception {
         // Test that top_hits aggregation is fed scores if query results size=0
         SearchResponse response = client()
@@ -345,6 +348,7 @@ public class TopHitsIT extends ESIntegTestCase {
     }
 
 
+    @Test
     public void testBreadthFirst() throws Exception {
         // breadth_first will be ignored since we need scores
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
@@ -376,7 +380,8 @@ public class TopHitsIT extends ESIntegTestCase {
         }
     }
 
-    public void testBasicsGetProperty() throws Exception {
+    @Test
+    public void testBasics_getProperty() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(global("global").subAggregation(topHits("hits"))).execute().actionGet();
 
@@ -395,6 +400,7 @@ public class TopHitsIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testPagination() throws Exception {
         int size = randomIntBetween(1, 10);
         int from = randomIntBetween(0, 10);
@@ -440,6 +446,7 @@ public class TopHitsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testSortByBucket() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
@@ -479,6 +486,7 @@ public class TopHitsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testFieldCollapsing() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -522,6 +530,7 @@ public class TopHitsIT extends ESIntegTestCase {
         assertThat(hits.getAt(0).id(), equalTo("2"));
     }
 
+    @Test
     public void testFetchFeatures() {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .setQuery(matchQuery("text", "text").queryName("test"))
@@ -576,6 +585,7 @@ public class TopHitsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testInvalidSortField() throws Exception {
         try {
             client().prepareSearch("idx").setTypes("type")
@@ -592,6 +602,7 @@ public class TopHitsIT extends ESIntegTestCase {
         }
     }
 
+    // @Test
     // public void testFailWithSubAgg() throws Exception {
     // String source = "{\n" +
     // "  \"aggs\": {\n" +
@@ -625,6 +636,7 @@ public class TopHitsIT extends ESIntegTestCase {
     // }
     // } NORELEASE this needs to be tested in a top_hits aggregations unit test
 
+    @Test
     public void testEmptyIndex() throws Exception {
         SearchResponse response = client().prepareSearch("empty").setTypes("type")
                 .addAggregation(topHits("hits"))
@@ -637,6 +649,7 @@ public class TopHitsIT extends ESIntegTestCase {
         assertThat(hits.getHits().totalHits(), equalTo(0l));
     }
 
+    @Test
     public void testTrackScores() throws Exception {
         boolean[] trackScores = new boolean[]{true, false};
         for (boolean trackScore : trackScores) {
@@ -683,6 +696,7 @@ public class TopHitsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testTopHitsInNestedSimple() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("articles")
                 .setQuery(matchQuery("title", "title"))
@@ -734,6 +748,7 @@ public class TopHitsIT extends ESIntegTestCase {
         assertThat((Integer) searchHits.getAt(0).getSource().get("date"), equalTo(4));
     }
 
+    @Test
     public void testTopHitsInSecondLayerNested() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("articles")
                 .setQuery(matchQuery("title", "title"))
@@ -834,6 +849,7 @@ public class TopHitsIT extends ESIntegTestCase {
         assertThat(topReviewers.getHits().getAt(0).getNestedIdentity().getChild().getOffset(), equalTo(0));
     }
 
+    @Test
     public void testNestedFetchFeatures() {
         String hlType = randomFrom("plain", "fvh", "postings");
         HighlightBuilder.Field hlField = new HighlightBuilder.Field("comments.message")
@@ -886,6 +902,7 @@ public class TopHitsIT extends ESIntegTestCase {
         assertThat(searchHit.sourceAsMap().get("message").toString(), equalTo("some comment"));
     }
 
+    @Test
     public void testTopHitsInNested() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("articles")
                 .addAggregation(
@@ -927,6 +944,7 @@ public class TopHitsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testDontExplode() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/cardinality/HyperLogLogPlusPlusTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/cardinality/HyperLogLogPlusPlusTests.java
index 9a00297..684a433 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/cardinality/HyperLogLogPlusPlusTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/cardinality/HyperLogLogPlusPlusTests.java
@@ -21,16 +21,18 @@ package org.elasticsearch.search.aggregations.metrics.cardinality;
 
 import com.carrotsearch.hppc.BitMixer;
 import com.carrotsearch.hppc.IntHashSet;
-
 import org.elasticsearch.common.util.BigArrays;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.search.aggregations.metrics.cardinality.HyperLogLogPlusPlus.MAX_PRECISION;
 import static org.elasticsearch.search.aggregations.metrics.cardinality.HyperLogLogPlusPlus.MIN_PRECISION;
 import static org.hamcrest.Matchers.closeTo;
 
 public class HyperLogLogPlusPlusTests extends ESTestCase {
-    public void testEncodeDecode() {
+
+    @Test
+    public void encodeDecode() {
         final int iters = scaledRandomIntBetween(100000, 500000);
         // random hashes
         for (int i = 0; i < iters; ++i) {
@@ -54,7 +56,8 @@ public class HyperLogLogPlusPlusTests extends ESTestCase {
         assertEquals(runLen, HyperLogLogPlusPlus.decodeRunLen(encoded, p1));
     }
 
-    public void testAccuracy() {
+    @Test
+    public void accuracy() {
         final long bucket = randomInt(20);
         final int numValues = randomIntBetween(1, 100000);
         final int maxValue = randomIntBetween(1, randomBoolean() ? 1000: 100000);
@@ -74,7 +77,8 @@ public class HyperLogLogPlusPlusTests extends ESTestCase {
         assertThat((double) e.cardinality(bucket), closeTo(set.size(), 0.1 * set.size()));
     }
 
-    public void testMerge() {
+    @Test
+    public void merge() {
         final int p = randomIntBetween(MIN_PRECISION, MAX_PRECISION);
         final HyperLogLogPlusPlus single = new HyperLogLogPlusPlus(p, BigArrays.NON_RECYCLING_INSTANCE, 0);
         final HyperLogLogPlusPlus[] multi = new HyperLogLogPlusPlus[randomIntBetween(2, 100)];
@@ -102,7 +106,8 @@ public class HyperLogLogPlusPlusTests extends ESTestCase {
         }
     }
 
-    public void testFakeHashes() {
+    @Test
+    public void fakeHashes() {
         // hashes with lots of leading zeros trigger different paths in the code that we try to go through here
         final int p = randomIntBetween(MIN_PRECISION, MAX_PRECISION);
         final HyperLogLogPlusPlus counts = new HyperLogLogPlusPlus(p, BigArrays.NON_RECYCLING_INSTANCE, 0);
@@ -118,7 +123,8 @@ public class HyperLogLogPlusPlusTests extends ESTestCase {
         assertEquals(1, counts.cardinality(0));
     }
 
-    public void testPrecisionFromThreshold() {
+    @Test
+    public void precisionFromThreshold() {
         assertEquals(4, HyperLogLogPlusPlus.precisionFromThreshold(0));
         assertEquals(6, HyperLogLogPlusPlus.precisionFromThreshold(10));
         assertEquals(10, HyperLogLogPlusPlus.precisionFromThreshold(100));
@@ -127,4 +133,5 @@ public class HyperLogLogPlusPlusTests extends ESTestCase {
         assertEquals(18, HyperLogLogPlusPlus.precisionFromThreshold(100000));
         assertEquals(18, HyperLogLogPlusPlus.precisionFromThreshold(1000000));
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/AvgBucketIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/AvgBucketIT.java
index ea0eb7f..a18f129 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/AvgBucketIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/AvgBucketIT.java
@@ -28,15 +28,17 @@ import org.elasticsearch.search.aggregations.bucket.terms.Terms.Order;
 import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.search.aggregations.pipeline.BucketHelpers.GapPolicy;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
 
+import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.avgBucket;
+
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.histogram;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.sum;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.terms;
-import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.avgBucket;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
 import static org.hamcrest.Matchers.equalTo;
@@ -89,7 +91,8 @@ public class AvgBucketIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testDocCountTopLevel() throws Exception {
+    @Test
+    public void testDocCount_topLevel() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval)
                         .extendedBounds((long) minRandomValue, (long) maxRandomValue))
@@ -121,7 +124,8 @@ public class AvgBucketIT extends ESIntegTestCase {
         assertThat(avgBucketValue.value(), equalTo(avgValue));
     }
 
-    public void testDocCountAsSubAgg() throws Exception {
+    @Test
+    public void testDocCount_asSubAgg() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -169,7 +173,8 @@ public class AvgBucketIT extends ESIntegTestCase {
         }
     }
 
-    public void testMetricTopLevel() throws Exception {
+    @Test
+    public void testMetric_topLevel() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(terms("terms").field("tag").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -203,7 +208,8 @@ public class AvgBucketIT extends ESIntegTestCase {
         assertThat(avgBucketValue.value(), equalTo(avgValue));
     }
 
-    public void testMetricAsSubAgg() throws Exception {
+    @Test
+    public void testMetric_asSubAgg() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -256,7 +262,8 @@ public class AvgBucketIT extends ESIntegTestCase {
         }
     }
 
-    public void testMetricAsSubAggWithInsertZeros() throws Exception {
+    @Test
+    public void testMetric_asSubAggWithInsertZeros() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -309,6 +316,7 @@ public class AvgBucketIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testNoBuckets() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(terms("terms").field("tag").exclude("tag.*").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -328,6 +336,7 @@ public class AvgBucketIT extends ESIntegTestCase {
         assertThat(avgBucketValue.value(), equalTo(Double.NaN));
     }
 
+    @Test
     public void testNested() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/CumulativeSumIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/CumulativeSumIT.java
index 6f10e5d..1d844e1 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/CumulativeSumIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/CumulativeSumIT.java
@@ -25,6 +25,7 @@ import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
 import org.elasticsearch.search.aggregations.bucket.histogram.Histogram.Bucket;
 import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -85,6 +86,7 @@ public class CumulativeSumIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
+    @Test
     public void testDocCount() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval)
@@ -114,6 +116,7 @@ public class CumulativeSumIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testMetric() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -146,6 +149,7 @@ public class CumulativeSumIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testNoBuckets() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/DateDerivativeIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/DateDerivativeIT.java
index 3058d1f..569830b 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/DateDerivativeIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/DateDerivativeIT.java
@@ -34,16 +34,17 @@ import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.format.DateTimeFormat;
 import org.junit.After;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
+import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.derivative;
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.dateHistogram;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.sum;
-import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.derivative;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
 import static org.hamcrest.Matchers.closeTo;
 import static org.hamcrest.Matchers.equalTo;
@@ -104,7 +105,8 @@ public class DateDerivativeIT extends ESIntegTestCase {
         internalCluster().wipeIndices("idx2");
     }
 
-    public void testSingleValuedField() throws Exception {
+    @Test
+    public void singleValuedField() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -146,7 +148,8 @@ public class DateDerivativeIT extends ESIntegTestCase {
         assertThat(docCountDeriv.value(), equalTo(1d));
     }
 
-    public void testSingleValuedFieldNormalised() throws Exception {
+    @Test
+    public void singleValuedField_normalised() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -191,7 +194,8 @@ public class DateDerivativeIT extends ESIntegTestCase {
         assertThat(docCountDeriv.normalizedValue(), closeTo(1d / 29d, 0.00001));
     }
 
-    public void testSingleValuedFieldWithSubAggregation() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -260,7 +264,8 @@ public class DateDerivativeIT extends ESIntegTestCase {
         assertThat((double) propertiesCounts[2], equalTo(15.0));
     }
 
-    public void testMultiValuedField() throws Exception {
+    @Test
+    public void multiValuedField() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -315,7 +320,8 @@ public class DateDerivativeIT extends ESIntegTestCase {
         assertThat(docCountDeriv.value(), equalTo(-2.0));
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx_unmapped")
                 .addAggregation(
@@ -330,7 +336,8 @@ public class DateDerivativeIT extends ESIntegTestCase {
         assertThat(deriv.getBuckets().size(), equalTo(0));
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx", "idx_unmapped")
                 .addAggregation(
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/DerivativeIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/DerivativeIT.java
index b65a86a..fbbb173 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/DerivativeIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/DerivativeIT.java
@@ -36,6 +36,7 @@ import org.elasticsearch.search.aggregations.pipeline.derivative.Derivative;
 import org.elasticsearch.search.aggregations.support.AggregationPath;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -166,7 +167,8 @@ public class DerivativeIT extends ESIntegTestCase {
     /**
      * test first and second derivative on the sing
      */
-    public void testDocCountDerivative() {
+    @Test
+    public void docCountDerivative() {
 
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -206,7 +208,9 @@ public class DerivativeIT extends ESIntegTestCase {
     /**
      * test first and second derivative on the sing
      */
-    public void testSingleValuedField_normalised() {
+    @Test
+    public void singleValuedField_normalised() {
+
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -244,7 +248,8 @@ public class DerivativeIT extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValueAggDerivative() throws Exception {
+    @Test
+    public void singleValueAggDerivative() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -289,7 +294,8 @@ public class DerivativeIT extends ESIntegTestCase {
         }
     }
 
-    public void testMultiValueAggDerivative() throws Exception {
+    @Test
+    public void multiValueAggDerivative() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -334,7 +340,8 @@ public class DerivativeIT extends ESIntegTestCase {
         }
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx_unmapped")
                 .addAggregation(
@@ -349,7 +356,8 @@ public class DerivativeIT extends ESIntegTestCase {
         assertThat(deriv.getBuckets().size(), equalTo(0));
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx", "idx_unmapped")
                 .addAggregation(
@@ -377,7 +385,8 @@ public class DerivativeIT extends ESIntegTestCase {
         }
     }
 
-    public void testDocCountDerivativeWithGaps() throws Exception {
+    @Test
+    public void docCountDerivativeWithGaps() throws Exception {
         SearchResponse searchResponse = client()
                 .prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
@@ -405,7 +414,8 @@ public class DerivativeIT extends ESIntegTestCase {
         }
     }
 
-    public void testDocCountDerivativeWithGaps_random() throws Exception {
+    @Test
+    public void docCountDerivativeWithGaps_random() throws Exception {
         SearchResponse searchResponse = client()
                 .prepareSearch("empty_bucket_idx_rnd")
                 .setQuery(matchAllQuery())
@@ -435,7 +445,8 @@ public class DerivativeIT extends ESIntegTestCase {
         }
     }
 
-    public void testDocCountDerivativeWithGaps_insertZeros() throws Exception {
+    @Test
+    public void docCountDerivativeWithGaps_insertZeros() throws Exception {
         SearchResponse searchResponse = client()
                 .prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
@@ -464,7 +475,8 @@ public class DerivativeIT extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValueAggDerivativeWithGaps() throws Exception {
+    @Test
+    public void singleValueAggDerivativeWithGaps() throws Exception {
         SearchResponse searchResponse = client()
                 .prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
@@ -505,7 +517,8 @@ public class DerivativeIT extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValueAggDerivativeWithGaps_insertZeros() throws Exception {
+    @Test
+    public void singleValueAggDerivativeWithGaps_insertZeros() throws Exception {
         SearchResponse searchResponse = client()
                 .prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
@@ -543,7 +556,8 @@ public class DerivativeIT extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValueAggDerivativeWithGaps_random() throws Exception {
+    @Test
+    public void singleValueAggDerivativeWithGaps_random() throws Exception {
         GapPolicy gapPolicy = randomFrom(GapPolicy.values());
         SearchResponse searchResponse = client()
                 .prepareSearch("empty_bucket_idx_rnd")
@@ -586,7 +600,8 @@ public class DerivativeIT extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValueAggDerivative_invalidPath() throws Exception {
+    @Test
+    public void singleValueAggDerivative_invalidPath() throws Exception {
         try {
             client().prepareSearch("idx")
                     .addAggregation(
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/ExtendedStatsBucketIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/ExtendedStatsBucketIT.java
index 6c7ae23..3c3d705 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/ExtendedStatsBucketIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/ExtendedStatsBucketIT.java
@@ -30,15 +30,17 @@ import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.search.aggregations.pipeline.BucketHelpers.GapPolicy;
 import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.stats.extended.ExtendedStatsBucket;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
 
+import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.extendedStatsBucket;
+
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.histogram;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.sum;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.terms;
-import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.extendedStatsBucket;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
 import static org.hamcrest.Matchers.equalTo;
@@ -91,7 +93,8 @@ public class ExtendedStatsBucketIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testDocCountTopLevel() throws Exception {
+    @Test
+    public void testDocCount_topLevel() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval)
                         .extendedBounds((long) minRandomValue, (long) maxRandomValue))
@@ -132,7 +135,8 @@ public class ExtendedStatsBucketIT extends ESIntegTestCase {
         assertThat(extendedStatsBucketValue.getSumOfSquares(), equalTo(sumOfSquares));
     }
 
-    public void testDocCountAsSubAgg() throws Exception {
+    @Test
+    public void testDocCount_asSubAgg() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -189,7 +193,8 @@ public class ExtendedStatsBucketIT extends ESIntegTestCase {
         }
     }
 
-    public void testMetricTopLevel() throws Exception {
+    @Test
+    public void testMetric_topLevel() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(terms("terms").field("tag").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -232,7 +237,8 @@ public class ExtendedStatsBucketIT extends ESIntegTestCase {
         assertThat(extendedStatsBucketValue.getSumOfSquares(), equalTo(sumOfSquares));
     }
 
-    public void testMetricAsSubAgg() throws Exception {
+    @Test
+    public void testMetric_asSubAgg() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -294,7 +300,8 @@ public class ExtendedStatsBucketIT extends ESIntegTestCase {
         }
     }
 
-    public void testMetricAsSubAggWithInsertZeros() throws Exception {
+    @Test
+    public void testMetric_asSubAggWithInsertZeros() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -356,6 +363,7 @@ public class ExtendedStatsBucketIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testNoBuckets() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(terms("terms").field("tag").exclude("tag.*").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -375,7 +383,8 @@ public class ExtendedStatsBucketIT extends ESIntegTestCase {
         assertThat(extendedStatsBucketValue.getAvg(), equalTo(Double.NaN));
     }
 
-    public void testBadSigmaAsSubAgg() throws Exception {
+    @Test
+    public void testBadSigma_asSubAgg() throws Exception {
         try {
             SearchResponse response = client()
                     .prepareSearch("idx")
@@ -395,6 +404,7 @@ public class ExtendedStatsBucketIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testNested() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/MaxBucketIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/MaxBucketIT.java
index 81b5735..bacb6bd 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/MaxBucketIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/MaxBucketIT.java
@@ -30,6 +30,7 @@ import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.search.aggregations.pipeline.BucketHelpers.GapPolicy;
 import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.InternalBucketMetricValue;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -93,7 +94,8 @@ public class MaxBucketIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testDocCountTopLevel() throws Exception {
+    @Test
+    public void testDocCount_topLevel() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval)
                         .extendedBounds((long) minRandomValue, (long) maxRandomValue))
@@ -130,7 +132,8 @@ public class MaxBucketIT extends ESIntegTestCase {
         assertThat(maxBucketValue.keys(), equalTo(maxKeys.toArray(new String[maxKeys.size()])));
     }
 
-    public void testDocCountAsSubAgg() throws Exception {
+    @Test
+    public void testDocCount_asSubAgg() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -183,7 +186,8 @@ public class MaxBucketIT extends ESIntegTestCase {
         }
     }
 
-    public void testMetricTopLevel() throws Exception {
+    @Test
+    public void testMetric_topLevel() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(terms("terms").field("tag").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -222,7 +226,8 @@ public class MaxBucketIT extends ESIntegTestCase {
         assertThat(maxBucketValue.keys(), equalTo(maxKeys.toArray(new String[maxKeys.size()])));
     }
 
-    public void testMetricAsSubAgg() throws Exception {
+    @Test
+    public void testMetric_asSubAgg() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -280,7 +285,8 @@ public class MaxBucketIT extends ESIntegTestCase {
         }
     }
 
-    public void testMetricAsSubAggOfSingleBucketAgg() throws Exception {
+    @Test
+    public void testMetric_asSubAggOfSingleBucketAgg() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -328,7 +334,8 @@ public class MaxBucketIT extends ESIntegTestCase {
         assertThat(maxBucketValue.keys(), equalTo(maxKeys.toArray(new String[maxKeys.size()])));
     }
 
-    public void testMetricAsSubAggWithInsertZeros() throws Exception {
+    @Test
+    public void testMetric_asSubAggWithInsertZeros() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -385,6 +392,7 @@ public class MaxBucketIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testNoBuckets() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(terms("terms").field("tag").exclude("tag.*").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -405,6 +413,7 @@ public class MaxBucketIT extends ESIntegTestCase {
         assertThat(maxBucketValue.keys(), equalTo(new String[0]));
     }
 
+    @Test
     public void testNested() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/MinBucketIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/MinBucketIT.java
index f02a85f..cb83f60 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/MinBucketIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/MinBucketIT.java
@@ -29,15 +29,16 @@ import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.search.aggregations.pipeline.BucketHelpers.GapPolicy;
 import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.InternalBucketMetricValue;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
 
+import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.minBucket;
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.histogram;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.sum;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.terms;
-import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.minBucket;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
 import static org.hamcrest.Matchers.equalTo;
@@ -90,7 +91,8 @@ public class MinBucketIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testDocCountTopLevel() throws Exception {
+    @Test
+    public void testDocCount_topLevel() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval)
                         .extendedBounds((long) minRandomValue, (long) maxRandomValue))
@@ -127,7 +129,8 @@ public class MinBucketIT extends ESIntegTestCase {
         assertThat(minBucketValue.keys(), equalTo(minKeys.toArray(new String[minKeys.size()])));
     }
 
-    public void testDocCountAsSubAgg() throws Exception {
+    @Test
+    public void testDocCount_asSubAgg() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -180,7 +183,8 @@ public class MinBucketIT extends ESIntegTestCase {
         }
     }
 
-    public void testMetricTopLevel() throws Exception {
+    @Test
+    public void testMetric_topLevel() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(terms("terms").field("tag").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -219,7 +223,8 @@ public class MinBucketIT extends ESIntegTestCase {
         assertThat(minBucketValue.keys(), equalTo(minKeys.toArray(new String[minKeys.size()])));
     }
 
-    public void testMetricAsSubAgg() throws Exception {
+    @Test
+    public void testMetric_asSubAgg() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -277,7 +282,8 @@ public class MinBucketIT extends ESIntegTestCase {
         }
     }
 
-    public void testMetricAsSubAggWithInsertZeros() throws Exception {
+    @Test
+    public void testMetric_asSubAggWithInsertZeros() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -334,6 +340,7 @@ public class MinBucketIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testNoBuckets() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(terms("terms").field("tag").exclude("tag.*").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -354,6 +361,7 @@ public class MinBucketIT extends ESIntegTestCase {
         assertThat(minBucketValue.keys(), equalTo(new String[0]));
     }
 
+    @Test
     public void testNested() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/PercentilesBucketIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/PercentilesBucketIT.java
index c4dc267..f7c1d06 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/PercentilesBucketIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/PercentilesBucketIT.java
@@ -29,6 +29,7 @@ import org.elasticsearch.search.aggregations.metrics.percentiles.Percentile;
 import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.percentile.PercentilesBucket;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -93,7 +94,8 @@ public class PercentilesBucketIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testDocCountopLevel() throws Exception {
+    @Test
+    public void testDocCount_topLevel() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval)
                         .extendedBounds((long) minRandomValue, (long) maxRandomValue))
@@ -130,7 +132,8 @@ public class PercentilesBucketIT extends ESIntegTestCase {
 
     }
 
-    public void testDocCountAsSubAgg() throws Exception {
+    @Test
+    public void testDocCount_asSubAgg() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -182,7 +185,8 @@ public class PercentilesBucketIT extends ESIntegTestCase {
         }
     }
 
-    public void testMetricTopLevel() throws Exception {
+    @Test
+    public void testMetric_topLevel() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(terms("terms").field("tag").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -220,7 +224,8 @@ public class PercentilesBucketIT extends ESIntegTestCase {
         }
     }
 
-    public void testMetricTopLevelDefaultPercents() throws Exception {
+    @Test
+    public void testMetric_topLevelDefaultPercents() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(terms("terms").field("tag").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -258,7 +263,8 @@ public class PercentilesBucketIT extends ESIntegTestCase {
         }
     }
 
-    public void testMetricAsSubAgg() throws Exception {
+    @Test
+    public void testMetric_asSubAgg() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -315,7 +321,8 @@ public class PercentilesBucketIT extends ESIntegTestCase {
         }
     }
 
-    public void testMetricAsSubAggWithInsertZeros() throws Exception {
+    @Test
+    public void testMetric_asSubAggWithInsertZeros() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -373,6 +380,7 @@ public class PercentilesBucketIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testNoBuckets() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(terms("terms").field("tag").exclude("tag.*").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -396,6 +404,7 @@ public class PercentilesBucketIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testWrongPercents() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(terms("terms").field("tag").exclude("tag.*").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -423,6 +432,7 @@ public class PercentilesBucketIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testBadPercents() throws Exception {
         Double[] badPercents = {-1.0, 110.0};
 
@@ -443,6 +453,7 @@ public class PercentilesBucketIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testBadPercents_asSubAgg() throws Exception {
         Double[] badPercents = {-1.0, 110.0};
 
@@ -470,6 +481,7 @@ public class PercentilesBucketIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testNested() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -535,6 +547,7 @@ public class PercentilesBucketIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testNestedWithDecimal() throws Exception {
         Double[] percent = {99.9};
         SearchResponse response = client()
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/StatsBucketIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/StatsBucketIT.java
index 92325cc..866fdc0 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/StatsBucketIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/StatsBucketIT.java
@@ -29,15 +29,17 @@ import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.search.aggregations.pipeline.BucketHelpers.GapPolicy;
 import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.stats.StatsBucket;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
 
+import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.statsBucket;
+
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.histogram;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.sum;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.terms;
-import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.statsBucket;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
 import static org.hamcrest.Matchers.equalTo;
@@ -90,7 +92,8 @@ public class StatsBucketIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testDocCountTopLevel() throws Exception {
+    @Test
+    public void testDocCount_topLevel() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval)
                         .extendedBounds((long) minRandomValue, (long) maxRandomValue))
@@ -128,7 +131,8 @@ public class StatsBucketIT extends ESIntegTestCase {
         assertThat(statsBucketValue.getMax(), equalTo(max));
     }
 
-    public void testDocCountAsSubAgg() throws Exception {
+    @Test
+    public void testDocCount_asSubAgg() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -182,7 +186,8 @@ public class StatsBucketIT extends ESIntegTestCase {
         }
     }
 
-    public void testMetricTopLevel() throws Exception {
+    @Test
+    public void testMetric_topLevel() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(terms("terms").field("tag").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -222,7 +227,8 @@ public class StatsBucketIT extends ESIntegTestCase {
         assertThat(statsBucketValue.getMax(), equalTo(max));
     }
 
-    public void testMetricAsSubAgg() throws Exception {
+    @Test
+    public void testMetric_asSubAgg() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -281,7 +287,8 @@ public class StatsBucketIT extends ESIntegTestCase {
         }
     }
 
-    public void testMetricAsSubAggWithInsertZeros() throws Exception {
+    @Test
+    public void testMetric_asSubAggWithInsertZeros() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -340,6 +347,7 @@ public class StatsBucketIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testNoBuckets() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(terms("terms").field("tag").exclude("tag.*").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -359,6 +367,7 @@ public class StatsBucketIT extends ESIntegTestCase {
         assertThat(statsBucketValue.getAvg(), equalTo(Double.NaN));
     }
 
+    @Test
     public void testNested() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/SumBucketIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/SumBucketIT.java
index ba13b55..be11f90 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/SumBucketIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/SumBucketIT.java
@@ -28,15 +28,17 @@ import org.elasticsearch.search.aggregations.bucket.terms.Terms.Order;
 import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.search.aggregations.pipeline.BucketHelpers.GapPolicy;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
 
+import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.sumBucket;
+
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.histogram;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.sum;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.terms;
-import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.sumBucket;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
 import static org.hamcrest.Matchers.equalTo;
@@ -89,7 +91,8 @@ public class SumBucketIT extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testDocCountTopLevel() throws Exception {
+    @Test
+    public void testDocCount_topLevel() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval)
                         .extendedBounds((long) minRandomValue, (long) maxRandomValue))
@@ -118,7 +121,8 @@ public class SumBucketIT extends ESIntegTestCase {
         assertThat(sumBucketValue.value(), equalTo(sum));
     }
 
-    public void testDocCountAsSubAgg() throws Exception {
+    @Test
+    public void testDocCount_asSubAgg() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -163,7 +167,8 @@ public class SumBucketIT extends ESIntegTestCase {
         }
     }
 
-    public void testMetricTopLevel() throws Exception {
+    @Test
+    public void testMetric_topLevel() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(terms("terms").field("tag").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -194,7 +199,8 @@ public class SumBucketIT extends ESIntegTestCase {
         assertThat(sumBucketValue.value(), equalTo(bucketSum));
     }
 
-    public void testMetricAsSubAgg() throws Exception {
+    @Test
+    public void testMetric_asSubAgg() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -244,7 +250,8 @@ public class SumBucketIT extends ESIntegTestCase {
         }
     }
 
-    public void testMetricAsSubAggWithInsertZeros() throws Exception {
+    @Test
+    public void testMetric_asSubAggWithInsertZeros() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -294,6 +301,7 @@ public class SumBucketIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testNoBuckets() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(terms("terms").field("tag").exclude("tag.*").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -313,6 +321,7 @@ public class SumBucketIT extends ESIntegTestCase {
         assertThat(sumBucketValue.value(), equalTo(0.0));
     }
 
+    @Test
     public void testNested() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/moving/avg/MovAvgIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/moving/avg/MovAvgIT.java
index e5c1e8d..ac4fcf8 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/moving/avg/MovAvgIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/moving/avg/MovAvgIT.java
@@ -32,41 +32,28 @@ import org.elasticsearch.search.aggregations.pipeline.BucketHelpers;
 import org.elasticsearch.search.aggregations.pipeline.PipelineAggregationHelperTests;
 import org.elasticsearch.search.aggregations.pipeline.SimpleValue;
 import org.elasticsearch.search.aggregations.pipeline.derivative.Derivative;
-import org.elasticsearch.search.aggregations.pipeline.movavg.models.EwmaModel;
-import org.elasticsearch.search.aggregations.pipeline.movavg.models.HoltLinearModel;
-import org.elasticsearch.search.aggregations.pipeline.movavg.models.HoltWintersModel;
-import org.elasticsearch.search.aggregations.pipeline.movavg.models.LinearModel;
-import org.elasticsearch.search.aggregations.pipeline.movavg.models.MovAvgModelBuilder;
-import org.elasticsearch.search.aggregations.pipeline.movavg.models.SimpleModel;
+import org.elasticsearch.search.aggregations.pipeline.movavg.models.*;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.avg;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.histogram;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.max;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.min;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.range;
+import static org.elasticsearch.search.aggregations.AggregationBuilders.*;
 import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.derivative;
 import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.movingAvg;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
 import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
 import static org.hamcrest.core.IsNull.notNullValue;
 import static org.hamcrest.core.IsNull.nullValue;
 
 @ESIntegTestCase.SuiteScopeTestCase
 public class MovAvgIT extends ESIntegTestCase {
+
     private static final String INTERVAL_FIELD = "l_value";
     private static final String VALUE_FIELD = "v_value";
+    private static final String GAP_FIELD = "g_value";
 
     static int interval;
     static int numBuckets;
@@ -92,7 +79,6 @@ public class MovAvgIT extends ESIntegTestCase {
             name = s;
         }
 
-        @Override
         public String toString(){
             return name;
         }
@@ -107,7 +93,6 @@ public class MovAvgIT extends ESIntegTestCase {
             name = s;
         }
 
-        @Override
         public String toString(){
             return name;
         }
@@ -357,8 +342,8 @@ public class MovAvgIT extends ESIntegTestCase {
             s += vs[i];
             b += (vs[i + period] - vs[i]) / period;
         }
-        s /= period;
-        b /= period;
+        s /= (double) period;
+        b /= (double) period;
         last_s = s;
 
         // Calculate first seasonal
@@ -403,7 +388,9 @@ public class MovAvgIT extends ESIntegTestCase {
     /**
      * test simple moving average on single value field
      */
-    public void testSimpleSingleValuedField() {
+    @Test
+    public void simpleSingleValuedField() {
+
         SearchResponse response = client()
                 .prepareSearch("idx").setTypes("type")
                 .addAggregation(
@@ -453,7 +440,9 @@ public class MovAvgIT extends ESIntegTestCase {
         }
     }
 
-    public void testLinearSingleValuedField() {
+    @Test
+    public void linearSingleValuedField() {
+
         SearchResponse response = client()
                 .prepareSearch("idx").setTypes("type")
                 .addAggregation(
@@ -503,7 +492,9 @@ public class MovAvgIT extends ESIntegTestCase {
         }
     }
 
-    public void testEwmaSingleValuedField() {
+    @Test
+    public void ewmaSingleValuedField() {
+
         SearchResponse response = client()
                 .prepareSearch("idx").setTypes("type")
                 .addAggregation(
@@ -553,7 +544,9 @@ public class MovAvgIT extends ESIntegTestCase {
         }
     }
 
-    public void testHoltSingleValuedField() {
+    @Test
+    public void holtSingleValuedField() {
+
         SearchResponse response = client()
                 .prepareSearch("idx").setTypes("type")
                 .addAggregation(
@@ -603,7 +596,9 @@ public class MovAvgIT extends ESIntegTestCase {
         }
     }
 
-    public void testHoltWintersValuedField() {
+    @Test
+    public void HoltWintersValuedField() {
+
         SearchResponse response = client()
                 .prepareSearch("idx").setTypes("type")
                 .addAggregation(
@@ -657,6 +652,7 @@ public class MovAvgIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testPredictNegativeKeysAtStart() {
 
         SearchResponse response = client()
@@ -708,6 +704,8 @@ public class MovAvgIT extends ESIntegTestCase {
         }
     }
 
+
+    @Test
     public void testSizeZeroWindow() {
         try {
             client()
@@ -723,11 +721,13 @@ public class MovAvgIT extends ESIntegTestCase {
                                             .setBucketsPaths("the_metric"))
                     ).execute().actionGet();
             fail("MovingAvg should not accept a window that is zero");
-        } catch (SearchPhaseExecutionException e) {
-           assertThat(e.getMessage(), is("all shards failed"));
+
+        } catch (SearchPhaseExecutionException exception) {
+           // All good
         }
     }
 
+    @Test
     public void testBadParent() {
         try {
             client()
@@ -748,6 +748,7 @@ public class MovAvgIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testNegativeWindow() {
         try {
             client()
@@ -771,6 +772,7 @@ public class MovAvgIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testNoBucketsInHistogram() {
 
         SearchResponse response = client()
@@ -795,6 +797,7 @@ public class MovAvgIT extends ESIntegTestCase {
         assertThat(buckets.size(), equalTo(0));
     }
 
+    @Test
     public void testNoBucketsInHistogramWithPredict() {
         int numPredictions = randomIntBetween(1,10);
         SearchResponse response = client()
@@ -820,6 +823,7 @@ public class MovAvgIT extends ESIntegTestCase {
         assertThat(buckets.size(), equalTo(0));
     }
 
+    @Test
     public void testZeroPrediction() {
         try {
             client()
@@ -842,6 +846,7 @@ public class MovAvgIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testNegativePrediction() {
         try {
             client()
@@ -864,6 +869,7 @@ public class MovAvgIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testHoltWintersNotEnoughData() {
         try {
             SearchResponse response = client()
@@ -891,7 +897,9 @@ public class MovAvgIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testTwoMovAvgsWithPredictions() {
+
         SearchResponse response = client()
                 .prepareSearch("double_predict")
                 .setTypes("type")
@@ -1003,6 +1011,7 @@ public class MovAvgIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testBadModelParams() {
         try {
             SearchResponse response = client()
@@ -1023,7 +1032,9 @@ public class MovAvgIT extends ESIntegTestCase {
 
     }
 
-    public void testHoltWintersMinimization() {
+    @Test
+    public void HoltWintersMinimization() {
+
         SearchResponse response = client()
                 .prepareSearch("idx").setTypes("type")
                 .addAggregation(
@@ -1111,7 +1122,9 @@ public class MovAvgIT extends ESIntegTestCase {
      *
      * We can simulate this by setting the window size == size of histo
      */
-    public void testMinimizeNotEnoughData() {
+    @Test
+    public void minimizeNotEnoughData() {
+
         SearchResponse response = client()
                 .prepareSearch("idx").setTypes("type")
                 .addAggregation(
@@ -1166,7 +1179,9 @@ public class MovAvgIT extends ESIntegTestCase {
     /**
      * Only some models can be minimized, should throw exception for: simple, linear
      */
-    public void testCheckIfNonTunableCanBeMinimized() {
+    @Test
+    public void checkIfNonTunableCanBeMinimized() {
+
         try {
             client()
                 .prepareSearch("idx").setTypes("type")
@@ -1209,7 +1224,9 @@ public class MovAvgIT extends ESIntegTestCase {
     /**
      * These models are all minimizable, so they should not throw exceptions
      */
-    public void testCheckIfTunableCanBeMinimized() {
+    @Test
+    public void checkIfTunableCanBeMinimized() {
+
         MovAvgModelBuilder[] builders = new MovAvgModelBuilder[]{
                 new EwmaModel.EWMAModelBuilder(),
                 new HoltLinearModel.HoltLinearModelBuilder(),
@@ -1237,7 +1254,9 @@ public class MovAvgIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testUnrecognizedParams() {
+
         MovAvgModelBuilder[] builders = new MovAvgModelBuilder[]{
                 new SimpleModel.SimpleModelBuilder(),
                 new LinearModel.LinearModelBuilder(),
@@ -1356,7 +1375,7 @@ public class MovAvgIT extends ESIntegTestCase {
                 return new SimpleModel.SimpleModelBuilder();
         }
     }
-
+    
     private ValuesSourceMetricsAggregationBuilder randomMetric(String name, String field) {
         int rand = randomIntBetween(0,3);
 
@@ -1369,7 +1388,7 @@ public class MovAvgIT extends ESIntegTestCase {
                 return avg(name).field(field);
             default:
                 return avg(name).field(field);
-        }
+        }    
     }
 
 }
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/moving/avg/MovAvgUnitTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/moving/avg/MovAvgUnitTests.java
index da9c823..11c5e40 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/moving/avg/MovAvgUnitTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/moving/avg/MovAvgUnitTests.java
@@ -21,24 +21,18 @@ package org.elasticsearch.search.aggregations.pipeline.moving.avg;
 
 import org.elasticsearch.common.ParseFieldMatcher;
 import org.elasticsearch.common.collect.EvictingQueue;
-import org.elasticsearch.search.aggregations.pipeline.movavg.models.EwmaModel;
-import org.elasticsearch.search.aggregations.pipeline.movavg.models.HoltLinearModel;
-import org.elasticsearch.search.aggregations.pipeline.movavg.models.HoltWintersModel;
-import org.elasticsearch.search.aggregations.pipeline.movavg.models.LinearModel;
-import org.elasticsearch.search.aggregations.pipeline.movavg.models.MovAvgModel;
-import org.elasticsearch.search.aggregations.pipeline.movavg.models.SimpleModel;
+import org.elasticsearch.search.aggregations.pipeline.movavg.models.*;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.text.ParseException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
 import static org.hamcrest.Matchers.equalTo;
 
 public class MovAvgUnitTests extends ESTestCase {
+
+    @Test
     public void testSimpleMovAvgModel() {
         MovAvgModel model = new SimpleModel();
 
@@ -67,6 +61,7 @@ public class MovAvgUnitTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSimplePredictionModel() {
         MovAvgModel model = new SimpleModel();
 
@@ -92,6 +87,7 @@ public class MovAvgUnitTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testLinearMovAvgModel() {
         MovAvgModel model = new LinearModel();
 
@@ -123,6 +119,7 @@ public class MovAvgUnitTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testLinearPredictionModel() {
         MovAvgModel model = new LinearModel();
 
@@ -153,6 +150,7 @@ public class MovAvgUnitTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testEWMAMovAvgModel() {
         double alpha = randomDouble();
         MovAvgModel model = new EwmaModel(alpha);
@@ -187,6 +185,7 @@ public class MovAvgUnitTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testEWMAPredictionModel() {
         double alpha = randomDouble();
         MovAvgModel model = new EwmaModel(alpha);
@@ -219,6 +218,7 @@ public class MovAvgUnitTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testHoltLinearMovAvgModel() {
         double alpha = randomDouble();
         double beta = randomDouble();
@@ -267,6 +267,7 @@ public class MovAvgUnitTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testHoltLinearPredictionModel() {
         double alpha = randomDouble();
         double beta = randomDouble();
@@ -312,6 +313,7 @@ public class MovAvgUnitTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testHoltWintersMultiplicativePadModel() {
         double alpha = randomDouble();
         double beta = randomDouble();
@@ -351,8 +353,8 @@ public class MovAvgUnitTests extends ESTestCase {
             s += vs[i];
             b += (vs[i + period] - vs[i]) / period;
         }
-        s /= period;
-        b /= period;
+        s /= (double) period;
+        b /= (double) period;
         last_s = s;
 
         // Calculate first seasonal
@@ -379,6 +381,7 @@ public class MovAvgUnitTests extends ESTestCase {
         assertThat(Double.compare(expected, actual), equalTo(0));
     }
 
+    @Test
     public void testHoltWintersMultiplicativePadPredictionModel() {
         double alpha = randomDouble();
         double beta = randomDouble();
@@ -421,8 +424,8 @@ public class MovAvgUnitTests extends ESTestCase {
             s += vs[i];
             b += (vs[i + period] - vs[i]) / period;
         }
-        s /= period;
-        b /= period;
+        s /= (double) period;
+        b /= (double) period;
         last_s = s;
 
         // Calculate first seasonal
@@ -452,6 +455,7 @@ public class MovAvgUnitTests extends ESTestCase {
 
     }
 
+    @Test
     public void testHoltWintersAdditiveModel() {
         double alpha = randomDouble();
         double beta = randomDouble();
@@ -490,8 +494,8 @@ public class MovAvgUnitTests extends ESTestCase {
             s += vs[i];
             b += (vs[i + period] - vs[i]) / period;
         }
-        s /= period;
-        b /= period;
+        s /= (double) period;
+        b /= (double) period;
         last_s = s;
 
         // Calculate first seasonal
@@ -518,6 +522,7 @@ public class MovAvgUnitTests extends ESTestCase {
         assertThat(Double.compare(expected, actual), equalTo(0));
     }
 
+    @Test
     public void testHoltWintersAdditivePredictionModel() {
         double alpha = randomDouble();
         double beta = randomDouble();
@@ -559,8 +564,8 @@ public class MovAvgUnitTests extends ESTestCase {
             s += vs[i];
             b += (vs[i + period] - vs[i]) / period;
         }
-        s /= period;
-        b /= period;
+        s /= (double) period;
+        b /= (double) period;
         last_s = s;
 
         // Calculate first seasonal
@@ -589,7 +594,9 @@ public class MovAvgUnitTests extends ESTestCase {
 
     }
 
+    @Test
     public void testNumericValidation() {
+
         List<MovAvgModel.AbstractModelParser> parsers = new ArrayList<>(5);
 
         // Simple and Linear don't have any settings to test
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/serialdiff/SerialDiffIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/serialdiff/SerialDiffIT.java
index aebd6a7..ccd4dcb 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/serialdiff/SerialDiffIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/serialdiff/SerialDiffIT.java
@@ -31,23 +31,16 @@ import org.elasticsearch.search.aggregations.pipeline.PipelineAggregationHelperT
 import org.elasticsearch.search.aggregations.pipeline.SimpleValue;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.avg;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.histogram;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.max;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.min;
+import static org.elasticsearch.search.aggregations.AggregationBuilders.*;
 import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.diff;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
 import static org.hamcrest.Matchers.closeTo;
 import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
 import static org.hamcrest.core.IsNull.notNullValue;
 import static org.hamcrest.core.IsNull.nullValue;
 
@@ -74,7 +67,6 @@ public class SerialDiffIT extends ESIntegTestCase {
             name = s;
         }
 
-        @Override
         public String toString(){
             return name;
         }
@@ -226,7 +218,9 @@ public class SerialDiffIT extends ESIntegTestCase {
         testValues.put(target.toString(), values);
     }
 
-    public void testBasicDiff() {
+    @Test
+    public void basicDiff() {
+
         SearchResponse response = client()
                 .prepareSearch("idx").setTypes("type")
                 .addAggregation(
@@ -274,7 +268,8 @@ public class SerialDiffIT extends ESIntegTestCase {
         }
     }
 
-    public void testInvalidLagSize() {
+    @Test
+    public void invalidLagSize() {
         try {
             client()
                 .prepareSearch("idx").setTypes("type")
@@ -288,7 +283,9 @@ public class SerialDiffIT extends ESIntegTestCase {
                                         .setBucketsPaths("_count"))
                 ).execute().actionGet();
         } catch (SearchPhaseExecutionException e) {
-            assertThat(e.getMessage(), is("all shards failed"));
+            // All good
         }
     }
+
+
 }
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/support/PathTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/support/PathTests.java
index 4602035..77a3e12 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/support/PathTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/support/PathTests.java
@@ -21,6 +21,7 @@ package org.elasticsearch.search.aggregations.support;
 
 import org.elasticsearch.search.aggregations.AggregationExecutionException;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -31,6 +32,8 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class PathTests extends ESTestCase {
+
+    @Test
     public void testInvalidPaths() throws Exception {
         assertInvalidPath("[foo]", "brackets at the beginning of the token expression");
         assertInvalidPath("foo[bar", "open brackets without closing at the token expression");
@@ -41,6 +44,7 @@ public class PathTests extends ESTestCase {
         assertInvalidPath("foo.", "dot separator at the end of the token expression");
     }
 
+    @Test
     public void testValidPaths() throws Exception {
         assertValidPath("foo>bar", tokens().add("foo").add("bar"));
         assertValidPath("foo.bar", tokens().add("foo", "bar"));
@@ -77,6 +81,7 @@ public class PathTests extends ESTestCase {
     }
 
     private static class Tokens {
+
         private List<AggregationPath.PathElement> tokens = new ArrayList<>();
 
         Tokens add(String name) {
@@ -96,5 +101,8 @@ public class PathTests extends ESTestCase {
         AggregationPath.PathElement[] toArray() {
             return tokens.toArray(new AggregationPath.PathElement[tokens.size()]);
         }
+
+
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/support/ScriptValuesTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/support/ScriptValuesTests.java
index 18e9365..d1a97c7 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/support/ScriptValuesTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/support/ScriptValuesTests.java
@@ -28,6 +28,7 @@ import org.elasticsearch.search.aggregations.support.values.ScriptBytesValues;
 import org.elasticsearch.search.aggregations.support.values.ScriptDoubleValues;
 import org.elasticsearch.search.aggregations.support.values.ScriptLongValues;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.Map;
@@ -35,10 +36,10 @@ import java.util.Map;
 public class ScriptValuesTests extends ESTestCase {
 
     private static class FakeSearchScript implements LeafSearchScript {
-
+        
         private final Object[][] values;
         int index;
-
+        
         FakeSearchScript(Object[][] values) {
             this.values = values;
             index = -1;
@@ -93,7 +94,8 @@ public class ScriptValuesTests extends ESTestCase {
 
     }
 
-    public void testLongs() {
+    @Test
+    public void longs() {
         final Object[][] values = new Long[randomInt(10)][];
         for (int i = 0; i < values.length; ++i) {
             Long[] longs = new Long[randomInt(8)];
@@ -114,7 +116,8 @@ public class ScriptValuesTests extends ESTestCase {
         }
     }
 
-    public void testDoubles() {
+    @Test
+    public void doubles() {
         final Object[][] values = new Double[randomInt(10)][];
         for (int i = 0; i < values.length; ++i) {
             Double[] doubles = new Double[randomInt(8)];
@@ -135,7 +138,8 @@ public class ScriptValuesTests extends ESTestCase {
         }
     }
 
-    public void testBytes() {
+    @Test
+    public void bytes() {
         final String[][] values = new String[randomInt(10)][];
         for (int i = 0; i < values.length; ++i) {
             String[] strings = new String[randomInt(8)];
diff --git a/core/src/test/java/org/elasticsearch/search/basic/SearchWhileCreatingIndexIT.java b/core/src/test/java/org/elasticsearch/search/basic/SearchWhileCreatingIndexIT.java
index 2821b07..cea6f92 100644
--- a/core/src/test/java/org/elasticsearch/search/basic/SearchWhileCreatingIndexIT.java
+++ b/core/src/test/java/org/elasticsearch/search/basic/SearchWhileCreatingIndexIT.java
@@ -25,6 +25,7 @@ import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.client.Client;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
@@ -35,18 +36,23 @@ import static org.hamcrest.Matchers.greaterThanOrEqualTo;
  * shards possibly not active at all (cause they haven't allocated) will still work.
  */
 public class SearchWhileCreatingIndexIT extends ESIntegTestCase {
+
+    @Test
     public void testIndexCausesIndexCreation() throws Exception {
         searchWhileCreatingIndex(false, 1); // 1 replica in our default...
     }
 
+    @Test
     public void testNoReplicas() throws Exception {
         searchWhileCreatingIndex(true, 0);
     }
 
+    @Test
     public void testOneReplica() throws Exception {
         searchWhileCreatingIndex(true, 1);
     }
 
+    @Test
     public void testTwoReplicas() throws Exception {
         searchWhileCreatingIndex(true, 2);
     }
diff --git a/core/src/test/java/org/elasticsearch/search/basic/SearchWhileRelocatingIT.java b/core/src/test/java/org/elasticsearch/search/basic/SearchWhileRelocatingIT.java
index 69c4bbd..86b27f2 100644
--- a/core/src/test/java/org/elasticsearch/search/basic/SearchWhileRelocatingIT.java
+++ b/core/src/test/java/org/elasticsearch/search/basic/SearchWhileRelocatingIT.java
@@ -28,6 +28,7 @@ import org.elasticsearch.common.Priority;
 import org.elasticsearch.search.SearchHits;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -43,16 +44,20 @@ import static org.hamcrest.Matchers.is;
 
 @ESIntegTestCase.ClusterScope(minNumDataNodes = 2)
 public class SearchWhileRelocatingIT extends ESIntegTestCase {
+
+    @Test
     @Nightly
     public void testSearchAndRelocateConcurrently0Replicas() throws Exception {
         testSearchAndRelocateConcurrently(0);
     }
 
+    @Test
     @Nightly
     public void testSearchAndRelocateConcurrently1Replicas() throws Exception {
         testSearchAndRelocateConcurrently(1);
     }
 
+    @Test
     public void testSearchAndRelocateConcurrentlyRanodmReplicas() throws Exception {
         testSearchAndRelocateConcurrently(randomIntBetween(0, 1));
     }
@@ -72,7 +77,7 @@ public class SearchWhileRelocatingIT extends ESIntegTestCase {
                                     .endObject().endObject()));
         }
         indexRandom(true, indexBuilders.toArray(new IndexRequestBuilder[indexBuilders.size()]));
-        assertHitCount(client().prepareSearch().get(), (numDocs));
+        assertHitCount(client().prepareSearch().get(), (long) (numDocs));
         final int numIters = scaledRandomIntBetween(5, 20);
         for (int i = 0; i < numIters; i++) {
             final AtomicBoolean stop = new AtomicBoolean(false);
@@ -93,7 +98,7 @@ public class SearchWhileRelocatingIT extends ESIntegTestCase {
                                 // request comes in. It's a small window but a known limitation.
                                 //
                                 criticalException = sr.getTotalShards() == sr.getSuccessfulShards() || sr.getFailedShards() > 0;
-                                assertHitCount(sr, (numDocs));
+                                assertHitCount(sr, (long) (numDocs));
                                 criticalException = true;
                                 final SearchHits sh = sr.getHits();
                                 assertThat("Expected hits to be the same size the actual hits array", sh.getTotalHits(),
diff --git a/core/src/test/java/org/elasticsearch/search/basic/TransportSearchFailuresIT.java b/core/src/test/java/org/elasticsearch/search/basic/TransportSearchFailuresIT.java
index cf58c52..eba86f3 100644
--- a/core/src/test/java/org/elasticsearch/search/basic/TransportSearchFailuresIT.java
+++ b/core/src/test/java/org/elasticsearch/search/basic/TransportSearchFailuresIT.java
@@ -33,6 +33,7 @@ import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.index.query.GeohashCellQuery;
 import org.elasticsearch.search.builder.SearchSourceBuilder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -47,11 +48,13 @@ import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.instanceOf;
 
 public class TransportSearchFailuresIT extends ESIntegTestCase {
+
     @Override
     protected int maximumNumberOfReplicas() {
         return 1;
     }
 
+    @Test
     public void testFailedSearchWithWrongQuery() throws Exception {
         logger.info("Start Testing failed search with wrong query");
         assertAcked(prepareCreate("test", 1, settingsBuilder().put("routing.hash.type", "simple")));
diff --git a/core/src/test/java/org/elasticsearch/search/basic/TransportTwoNodesSearchIT.java b/core/src/test/java/org/elasticsearch/search/basic/TransportTwoNodesSearchIT.java
index 6d239a8..6781c7c 100644
--- a/core/src/test/java/org/elasticsearch/search/basic/TransportTwoNodesSearchIT.java
+++ b/core/src/test/java/org/elasticsearch/search/basic/TransportTwoNodesSearchIT.java
@@ -41,6 +41,7 @@ import org.elasticsearch.search.aggregations.bucket.global.Global;
 import org.elasticsearch.search.builder.SearchSourceBuilder;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.HashSet;
@@ -120,6 +121,7 @@ public class TransportTwoNodesSearchIT extends ESIntegTestCase {
                 .endObject();
     }
 
+    @Test
     public void testDfsQueryThenFetch() throws Exception {
         Settings.Builder settingsBuilder = settingsBuilder()
             .put(indexSettings())
@@ -159,6 +161,7 @@ public class TransportTwoNodesSearchIT extends ESIntegTestCase {
         assertEquals(100, total);
     }
 
+    @Test
     public void testDfsQueryThenFetchWithSort() throws Exception {
         prepareData();
 
@@ -183,6 +186,7 @@ public class TransportTwoNodesSearchIT extends ESIntegTestCase {
         assertEquals(100, total);
     }
 
+    @Test
     public void testQueryThenFetch() throws Exception {
         prepareData();
 
@@ -207,6 +211,7 @@ public class TransportTwoNodesSearchIT extends ESIntegTestCase {
         assertEquals(100, total);
     }
 
+    @Test
     public void testQueryThenFetchWithFrom() throws Exception {
         Set<String> fullExpectedIds = prepareData();
 
@@ -235,6 +240,7 @@ public class TransportTwoNodesSearchIT extends ESIntegTestCase {
         assertThat(collectedIds, equalTo(fullExpectedIds));
     }
 
+    @Test
     public void testQueryThenFetchWithSort() throws Exception {
         prepareData();
 
@@ -259,6 +265,7 @@ public class TransportTwoNodesSearchIT extends ESIntegTestCase {
         assertEquals(100, total);
     }
 
+    @Test
     public void testQueryAndFetch() throws Exception {
         prepareData(3);
 
@@ -298,6 +305,7 @@ public class TransportTwoNodesSearchIT extends ESIntegTestCase {
         assertThat("make sure we got all [" + expectedIds + "]", expectedIds.size(), equalTo(0));
     }
 
+    @Test
     public void testDfsQueryAndFetch() throws Exception {
         prepareData(3);
 
@@ -339,6 +347,7 @@ public class TransportTwoNodesSearchIT extends ESIntegTestCase {
         assertThat("make sure we got all [" + expectedIds + "]", expectedIds.size(), equalTo(0));
     }
 
+    @Test
     public void testSimpleFacets() throws Exception {
         prepareData();
 
@@ -360,6 +369,7 @@ public class TransportTwoNodesSearchIT extends ESIntegTestCase {
         assertThat(all.getDocCount(), equalTo(100l));
     }
 
+    @Test
     public void testFailedSearchWithWrongQuery() throws Exception {
         prepareData();
 
@@ -380,6 +390,7 @@ public class TransportTwoNodesSearchIT extends ESIntegTestCase {
         logger.info("Done Testing failed search");
      }
 
+    @Test
     public void testFailedSearchWithWrongFrom() throws Exception {
         prepareData();
 
@@ -410,6 +421,7 @@ public class TransportTwoNodesSearchIT extends ESIntegTestCase {
         logger.info("Done Testing failed search");
     }
 
+    @Test
     public void testFailedMultiSearchWithWrongQuery() throws Exception {
         prepareData();
 
@@ -433,7 +445,8 @@ public class TransportTwoNodesSearchIT extends ESIntegTestCase {
         logger.info("Done Testing failed search");
     }
 
-    public void testFailedMultiSearchWithWrongQueryWithFunctionScore() throws Exception {
+    @Test
+    public void testFailedMultiSearchWithWrongQuery_withFunctionScore() throws Exception {
         prepareData();
 
         logger.info("Start Testing failed multi search with a wrong query");
diff --git a/core/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java b/core/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java
index 1841973..50da272 100644
--- a/core/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java
@@ -57,6 +57,7 @@ import org.elasticsearch.threadpool.ThreadPool;
 import org.elasticsearch.threadpool.ThreadPoolModule;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -66,6 +67,7 @@ import java.util.concurrent.TimeUnit;
 import static org.hamcrest.Matchers.equalTo;
 
 public class SearchSourceBuilderTests extends ESTestCase {
+
     private static Injector injector;
 
     private static NamedWriteableRegistry namedWriteableRegistry;
@@ -291,6 +293,7 @@ public class SearchSourceBuilderTests extends ESTestCase {
         return builder;
     }
 
+    @Test
     public void testFromXContent() throws IOException {
         SearchSourceBuilder testBuilder = createSearchSourceBuilder();
         String builderAsString = testBuilder.toString();
@@ -317,6 +320,7 @@ public class SearchSourceBuilderTests extends ESTestCase {
         return context;
     }
 
+    @Test
     public void testSerialization() throws IOException {
         SearchSourceBuilder testBuilder = createSearchSourceBuilder();
         try (BytesStreamOutput output = new BytesStreamOutput()) {
@@ -330,6 +334,7 @@ public class SearchSourceBuilderTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testEqualsAndHashcode() throws IOException {
         SearchSourceBuilder firstBuilder = createSearchSourceBuilder();
         assertFalse("source builder is equal to null", firstBuilder.equals(null));
@@ -384,6 +389,7 @@ public class SearchSourceBuilderTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testParseSort() throws IOException {
         {
             String restContent = " { \"sort\": \"foo\"}";
@@ -414,6 +420,7 @@ public class SearchSourceBuilderTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testEmptyPostFilter() throws IOException {
         SearchSourceBuilder builder = new SearchSourceBuilder();
         builder.postFilter(EmptyQueryBuilder.PROTOTYPE);
diff --git a/core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java b/core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java
index f856e0d..325f87d 100644
--- a/core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java
+++ b/core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java
@@ -25,6 +25,7 @@ import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.action.explain.ExplainResponse;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.search.SearchPhaseExecutionException;
+import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.action.search.SearchType;
 import org.elasticsearch.common.lucene.search.function.CombineFunction;
 import org.elasticsearch.common.lucene.search.function.FiltersFunctionScoreQuery;
@@ -49,6 +50,7 @@ import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -68,6 +70,7 @@ import static org.elasticsearch.index.query.QueryBuilders.idsQuery;
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
 import static org.elasticsearch.index.query.QueryBuilders.matchQuery;
 import static org.elasticsearch.index.query.QueryBuilders.multiMatchQuery;
+import static org.elasticsearch.index.query.QueryBuilders.notQuery;
 import static org.elasticsearch.index.query.QueryBuilders.prefixQuery;
 import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;
 import static org.elasticsearch.index.query.QueryBuilders.termQuery;
@@ -93,6 +96,7 @@ import static org.hamcrest.Matchers.notNullValue;
  */
 @ClusterScope(scope = Scope.SUITE)
 public class ChildQuerySearchIT extends ESIntegTestCase {
+
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return Settings.settingsBuilder().put(super.nodeSettings(nodeOrdinal))
@@ -102,6 +106,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
                 .build();
     }
 
+    @Test
     public void testSelfReferentialIsForbidden() {
         try {
             prepareCreate("test").addMapping("type", "_parent", "type=type").get();
@@ -113,7 +118,8 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         }
     }
 
-    public void testMultiLevelChild() throws Exception {
+    @Test
+    public void multiLevelChild() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
                 .addMapping("child", "_parent", "type=parent")
@@ -166,6 +172,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).id(), equalTo("gc1"));
     }
 
+    @Test
     // see #2744
     public void test2744() throws IOException {
         assertAcked(prepareCreate("test")
@@ -185,7 +192,8 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
 
     }
 
-    public void testSimpleChildQuery() throws Exception {
+    @Test
+    public void simpleChildQuery() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
                 .addMapping("child", "_parent", "type=parent"));
@@ -257,8 +265,9 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(1).id(), equalTo("c2"));
     }
 
-    // Issue #3290
-    public void testCachingBugWithFqueryFilter() throws Exception {
+    @Test
+    // See: https://github.com/elasticsearch/elasticsearch/issues/3290
+    public void testCachingBug_withFqueryFilter() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
                 .addMapping("child", "_parent", "type=parent"));
@@ -297,6 +306,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testHasParentFilter() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
@@ -346,7 +356,8 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         }
     }
 
-    public void testSimpleChildQueryWithFlush() throws Exception {
+    @Test
+    public void simpleChildQueryWithFlush() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
                 .addMapping("child", "_parent", "type=parent"));
@@ -409,6 +420,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo("p2"), equalTo("p1")));
     }
 
+    @Test
     public void testScopedFacet() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
@@ -446,6 +458,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertThat(termsFacet.getBuckets().get(1).getDocCount(), equalTo(1L));
     }
 
+    @Test
     public void testDeletedParent() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
@@ -481,6 +494,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).sourceAsString(), containsString("\"p_value1_updated\""));
     }
 
+    @Test
     public void testDfsSearchType() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
@@ -507,6 +521,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertNoFailures(searchResponse);
     }
 
+    @Test
     public void testHasChildAndHasParentFailWhenSomeSegmentsDontContainAnyParentOrChildDocs() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
@@ -531,6 +546,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
     }
 
+    @Test
     public void testCountApiUsage() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
@@ -559,6 +575,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertHitCount(countResponse, 1l);
     }
 
+    @Test
     public void testExplainUsage() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
@@ -647,7 +664,8 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         return indexBuilders;
     }
 
-    public void testScoreForParentChildQueriesWithFunctionScore() throws Exception {
+    @Test
+    public void testScoreForParentChildQueries_withFunctionScore() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
                 .addMapping("child", "_parent", "type=parent")
@@ -733,7 +751,8 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertThat(response.getHits().hits()[6].score(), equalTo(5f));
     }
 
-    // Issue #2536
+    @Test
+    // https://github.com/elasticsearch/elasticsearch/issues/2536
     public void testParentChildQueriesCanHandleNoRelevantTypesInIndex() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
@@ -767,6 +786,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertThat(response.getHits().totalHits(), equalTo(0l));
     }
 
+    @Test
     public void testHasChildAndHasParentFilter_withFilter() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
@@ -793,6 +813,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().hits()[0].id(), equalTo("2"));
     }
 
+    @Test
     public void testHasChildAndHasParentWrappedInAQueryFilter() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
@@ -822,6 +843,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertSearchHit(searchResponse, 1, hasId("2"));
     }
 
+    @Test
     public void testSimpleQueryRewrite() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent", "p_field", "type=string")
@@ -868,7 +890,9 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         }
     }
 
-    // Issue #3144
+    @Test
+    // See also issue:
+    // https://github.com/elasticsearch/elasticsearch/issues/3144
     public void testReIndexingParentAndChildDocuments() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
@@ -929,7 +953,9 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(1).id(), Matchers.anyOf(equalTo("c3"), equalTo("c4")));
     }
 
-    // Issue #3203
+    @Test
+    // See also issue:
+    // https://github.com/elasticsearch/elasticsearch/issues/3203
     public void testHasChildQueryWithMinimumScore() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
@@ -954,6 +980,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).score(), equalTo(3.0f));
     }
 
+    @Test
     public void testParentFieldFilter() throws Exception {
         assertAcked(prepareCreate("test")
                 .setSettings(settingsBuilder().put(indexSettings())
@@ -1020,6 +1047,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertHitCount(response, 2l);
     }
 
+    @Test
     public void testHasChildNotBeingCached() throws IOException {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
@@ -1081,7 +1109,8 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         }
     }
 
-    // Issue #3818
+    @Test
+    // Relates to bug: https://github.com/elasticsearch/elasticsearch/issues/3818
     public void testHasChildQueryOnlyReturnsSingleChildType() {
         assertAcked(prepareCreate("grandissue")
                 .addMapping("grandparent", "name", "type=string")
@@ -1134,7 +1163,8 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 0l);
     }
 
-    public void testIndexChildDocWithNoParentMapping() throws IOException {
+    @Test
+    public void indexChildDocWithNoParentMapping() throws IOException {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
                 .addMapping("child1"));
@@ -1157,6 +1187,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         refresh();
     }
 
+    @Test
     public void testAddingParentToExistingMapping() throws IOException {
         createIndex("test");
         ensureGreen();
@@ -1181,6 +1212,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testHasChildQueryWithNestedInnerObjects() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent", "objects", "type=nested")
@@ -1210,18 +1242,19 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
 
         ScoreMode scoreMode = randomFrom(ScoreMode.values());
         SearchResponse searchResponse = client().prepareSearch("test")
-                .setQuery(boolQuery().must(QueryBuilders.hasChildQuery("child", termQuery("c_field", "blue")).scoreMode(scoreMode)).filter(boolQuery().mustNot(termQuery("p_field", "3"))))
+                .setQuery(boolQuery().must(QueryBuilders.hasChildQuery("child", termQuery("c_field", "blue")).scoreMode(scoreMode)).filter(notQuery(termQuery("p_field", "3"))))
                 .get();
         assertNoFailures(searchResponse);
         assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
 
         searchResponse = client().prepareSearch("test")
-                .setQuery(boolQuery().must(QueryBuilders.hasChildQuery("child", termQuery("c_field", "red")).scoreMode(scoreMode)).filter(boolQuery().mustNot(termQuery("p_field", "3"))))
+                .setQuery(boolQuery().must(QueryBuilders.hasChildQuery("child", termQuery("c_field", "red")).scoreMode(scoreMode)).filter(notQuery(termQuery("p_field", "3"))))
                 .get();
         assertNoFailures(searchResponse);
         assertThat(searchResponse.getHits().totalHits(), equalTo(2l));
     }
 
+    @Test
     public void testNamedFilters() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
@@ -1258,6 +1291,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).getMatchedQueries()[0], equalTo("test"));
     }
 
+    @Test
     public void testParentChildQueriesNoParentType() throws Exception {
         assertAcked(prepareCreate("test")
                 .setSettings(settingsBuilder()
@@ -1315,7 +1349,8 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         }
     }
 
-    public void testAddParentFieldAfterIndexingParentDocButBeforeIndexingChildDoc() throws Exception {
+    @Test
+    public void testAdd_ParentFieldAfterIndexingParentDocButBeforeIndexingChildDoc() throws Exception {
         assertAcked(prepareCreate("test")
                 .setSettings(settingsBuilder()
                         .put(indexSettings())
@@ -1338,6 +1373,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testParentChildCaching() throws Exception {
         assertAcked(prepareCreate("test")
                 .setSettings(
@@ -1355,7 +1391,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         client().prepareIndex("test", "child", "c1").setParent("p1").setSource("c_field", "blue").get();
         client().prepareIndex("test", "child", "c2").setParent("p1").setSource("c_field", "red").get();
         client().prepareIndex("test", "child", "c3").setParent("p2").setSource("c_field", "red").get();
-        client().admin().indices().prepareOptimize("test").setMaxNumSegments(1).setFlush(true).get();
+        client().admin().indices().prepareForceMerge("test").setMaxNumSegments(1).setFlush(true).get();
         client().prepareIndex("test", "parent", "p3").setSource("p_field", "p_value3").get();
         client().prepareIndex("test", "parent", "p4").setSource("p_field", "p_value4").get();
         client().prepareIndex("test", "child", "c4").setParent("p3").setSource("c_field", "green").get();
@@ -1386,6 +1422,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
     }
 
+    @Test
     public void testParentChildQueriesViaScrollApi() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
@@ -1429,7 +1466,8 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         }
     }
 
-    // Issue #5783
+    // https://github.com/elasticsearch/elasticsearch/issues/5783
+    @Test
     public void testQueryBeforeChildType() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("features")
@@ -1448,7 +1486,8 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertHitCount(resp, 1L);
     }
 
-    // Issue #6256
+    @Test
+    // https://github.com/elasticsearch/elasticsearch/issues/6256
     public void testParentFieldInMultiMatchField() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1")
@@ -1467,6 +1506,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         assertThat(response.getHits().getAt(0).id(), equalTo("1"));
     }
 
+    @Test
     public void testTypeIsAppliedInHasParentInnerQuery() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent")
@@ -1480,12 +1520,12 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         indexRandom(true, indexRequests);
 
         SearchResponse searchResponse = client().prepareSearch("test")
-                .setQuery(constantScoreQuery(hasParentQuery("parent", boolQuery().mustNot(termQuery("field1", "a")))))
+                .setQuery(constantScoreQuery(hasParentQuery("parent", notQuery(termQuery("field1", "a")))))
                 .get();
         assertHitCount(searchResponse, 0l);
 
         searchResponse = client().prepareSearch("test")
-                .setQuery(hasParentQuery("parent", constantScoreQuery(boolQuery().mustNot(termQuery("field1", "a")))))
+                .setQuery(hasParentQuery("parent", constantScoreQuery(notQuery(termQuery("field1", "a")))))
                 .get();
         assertHitCount(searchResponse, 0l);
 
@@ -1557,6 +1597,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
                 .addSort("_score", SortOrder.DESC).addSort("id", SortOrder.ASC).get();
     }
 
+    @Test
     public void testMinMaxChildren() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent", "id", "type=long")
@@ -1887,6 +1928,7 @@ public class ChildQuerySearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testParentFieldToNonExistingType() {
         assertAcked(prepareCreate("test").addMapping("parent").addMapping("child", "_parent", "type=parent2"));
         client().prepareIndex("test", "parent", "1").setSource("{}").get();
diff --git a/core/src/test/java/org/elasticsearch/search/compress/SearchSourceCompressTests.java b/core/src/test/java/org/elasticsearch/search/compress/SearchSourceCompressTests.java
index d98574b..d3b5160 100644
--- a/core/src/test/java/org/elasticsearch/search/compress/SearchSourceCompressTests.java
+++ b/core/src/test/java/org/elasticsearch/search/compress/SearchSourceCompressTests.java
@@ -32,12 +32,15 @@ import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.hamcrest.Matchers.equalTo;
 
-public class SearchSourceCompressTests extends ESSingleNodeTestCase {
+public class SearchSourceCompressTests  extends ESSingleNodeTestCase {
+    
+    @Test
     public void testSourceCompressionLZF() throws IOException {
         final Compressor defaultCompressor = CompressorFactory.defaultCompressor();
         try {
diff --git a/core/src/test/java/org/elasticsearch/search/fetch/FetchSubPhasePluginIT.java b/core/src/test/java/org/elasticsearch/search/fetch/FetchSubPhasePluginIT.java
index 1eff57a..26fd0cb 100644
--- a/core/src/test/java/org/elasticsearch/search/fetch/FetchSubPhasePluginIT.java
+++ b/core/src/test/java/org/elasticsearch/search/fetch/FetchSubPhasePluginIT.java
@@ -40,6 +40,7 @@ import org.elasticsearch.search.internal.SearchContext;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -58,11 +59,13 @@ import static org.hamcrest.CoreMatchers.equalTo;
  */
 @ClusterScope(scope = Scope.SUITE, numDataNodes = 1)
 public class FetchSubPhasePluginIT extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return pluginList(FetchTermVectorsPlugin.class);
     }
 
+    @Test
     public void testPlugin() throws Exception {
         client().admin()
                 .indices()
diff --git a/core/src/test/java/org/elasticsearch/search/fetch/FieldDataFieldsTests.java b/core/src/test/java/org/elasticsearch/search/fetch/FieldDataFieldsTests.java
index 7405cee..7fce514 100644
--- a/core/src/test/java/org/elasticsearch/search/fetch/FieldDataFieldsTests.java
+++ b/core/src/test/java/org/elasticsearch/search/fetch/FieldDataFieldsTests.java
@@ -27,8 +27,7 @@ import org.elasticsearch.search.fetch.fielddata.FieldDataFieldsParseElement;
 import org.elasticsearch.search.internal.SearchContext;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.TestSearchContext;
-
-import static org.hamcrest.Matchers.containsString;
+import org.junit.Test;
 
 public class FieldDataFieldsTests extends ESTestCase {
 
@@ -56,6 +55,7 @@ public class FieldDataFieldsTests extends ESTestCase {
         parseElement.parse(parser, context);
     }
 
+    @Test(expected = IllegalStateException.class)
     public void testInvalidFieldDataField() throws Exception {
         FieldDataFieldsParseElement parseElement = new FieldDataFieldsParseElement();
 
@@ -70,11 +70,6 @@ public class FieldDataFieldsTests extends ESTestCase {
         parser.nextToken();
         parser.nextToken();
         SearchContext context = new TestSearchContext();
-        try {
-            parseElement.parse(parser, context);
-            fail("Expected IllegalStateException");
-        } catch (IllegalStateException e) {
-            assertThat(e.getMessage(), containsString("Expected either a VALUE_STRING or an START_ARRAY but got "));
-        }
+        parseElement.parse(parser, context);
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/search/fetch/innerhits/NestedChildrenFilterTests.java b/core/src/test/java/org/elasticsearch/search/fetch/innerhits/NestedChildrenFilterTests.java
index f00b72b..870a672 100644
--- a/core/src/test/java/org/elasticsearch/search/fetch/innerhits/NestedChildrenFilterTests.java
+++ b/core/src/test/java/org/elasticsearch/search/fetch/innerhits/NestedChildrenFilterTests.java
@@ -40,6 +40,7 @@ import org.apache.lucene.store.Directory;
 import org.elasticsearch.search.fetch.FetchSubPhase;
 import org.elasticsearch.search.fetch.innerhits.InnerHitsContext.NestedInnerHits.NestedChildrenQuery;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -49,6 +50,8 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public class NestedChildrenFilterTests extends ESTestCase {
+
+    @Test
     public void testNestedChildrenFilter() throws Exception {
         int numParentDocs = scaledRandomIntBetween(0, 32);
         int maxChildDocsPerParent = scaledRandomIntBetween(8, 16);
diff --git a/core/src/test/java/org/elasticsearch/search/functionscore/DecayFunctionScoreIT.java b/core/src/test/java/org/elasticsearch/search/functionscore/DecayFunctionScoreIT.java
index f78ef2e..d362b36 100644
--- a/core/src/test/java/org/elasticsearch/search/functionscore/DecayFunctionScoreIT.java
+++ b/core/src/test/java/org/elasticsearch/search/functionscore/DecayFunctionScoreIT.java
@@ -34,10 +34,13 @@ import org.elasticsearch.search.SearchHits;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
+import org.junit.Test;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
+import java.util.concurrent.ExecutionException;
 
 import static org.elasticsearch.client.Requests.indexRequest;
 import static org.elasticsearch.client.Requests.searchRequest;
@@ -55,12 +58,15 @@ import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertOrde
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchHits;
 import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.closeTo;
+import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.isOneOf;
 import static org.hamcrest.Matchers.lessThan;
 
+
 public class DecayFunctionScoreIT extends ESIntegTestCase {
+
+    @Test
     public void testDistanceScoreGeoLinGaussExp() throws Exception {
         assertAcked(prepareCreate("test").addMapping(
                 "type1",
@@ -159,6 +165,7 @@ public class DecayFunctionScoreIT extends ESIntegTestCase {
         assertThat(sh.getAt(1).getId(), equalTo("2"));
     }
 
+    @Test
     public void testDistanceScoreGeoLinGaussExpWithOffset() throws Exception {
         assertAcked(prepareCreate("test").addMapping(
                 "type1",
@@ -233,6 +240,7 @@ public class DecayFunctionScoreIT extends ESIntegTestCase {
         assertThat(sh.getAt(1).score(), equalTo(sh.getAt(0).score()));
     }
 
+    @Test
     public void testBoostModeSettingWorks() throws Exception {
         assertAcked(prepareCreate("test").addMapping(
                 "type1",
@@ -287,6 +295,7 @@ public class DecayFunctionScoreIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testParseGeoPoint() throws Exception {
         assertAcked(prepareCreate("test").addMapping(
                 "type1",
@@ -327,7 +336,9 @@ public class DecayFunctionScoreIT extends ESIntegTestCase {
         assertThat((double) sh.getAt(0).score(), closeTo(0.30685282, 1.e-5));
     }
 
+    @Test
     public void testCombineModes() throws Exception {
+
         assertAcked(prepareCreate("test").addMapping(
                 "type1",
                 jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type", "string")
@@ -408,6 +419,7 @@ public class DecayFunctionScoreIT extends ESIntegTestCase {
 
     }
 
+    @Test(expected = SearchPhaseExecutionException.class)
     public void testExceptionThrownIfScaleLE0() throws Exception {
         assertAcked(prepareCreate("test").addMapping(
                 "type1",
@@ -426,15 +438,14 @@ public class DecayFunctionScoreIT extends ESIntegTestCase {
                 searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(
                         searchSource().query(
                                 functionScoreQuery(termQuery("test", "value"), gaussDecayFunction("num1", "2013-05-28", "-1d")))));
-        try {
-            response.actionGet();
-            fail("Expected SearchPhaseExecutionException");
-        } catch (SearchPhaseExecutionException e) {
-            assertThat(e.getMessage(), is("all shards failed"));
-        }
+
+        SearchResponse sr = response.actionGet();
+        assertOrderedSearchHits(sr, "2", "1");
     }
 
+    @Test
     public void testParseDateMath() throws Exception {
+
         assertAcked(prepareCreate("test").addMapping(
                 "type1",
                 jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type", "string")
@@ -466,7 +477,9 @@ public class DecayFunctionScoreIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testValueMissingLin() throws Exception {
+
         assertAcked(prepareCreate("test").addMapping(
                 "type1",
                 jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type", "string")
@@ -515,6 +528,7 @@ public class DecayFunctionScoreIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testDateWithoutOrigin() throws Exception {
         DateTime dt = new DateTime(DateTimeZone.UTC);
 
@@ -564,6 +578,7 @@ public class DecayFunctionScoreIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testManyDocsLin() throws Exception {
         assertAcked(prepareCreate("test").addMapping(
                 "type",
@@ -616,6 +631,7 @@ public class DecayFunctionScoreIT extends ESIntegTestCase {
         }
     }
 
+    @Test(expected = SearchPhaseExecutionException.class)
     public void testParsingExceptionIfFieldDoesNotExist() throws Exception {
         assertAcked(prepareCreate("test").addMapping(
                 "type",
@@ -637,14 +653,10 @@ public class DecayFunctionScoreIT extends ESIntegTestCase {
                                 .size(numDocs)
                                 .query(functionScoreQuery(termQuery("test", "value"), linearDecayFunction("type1.geo", lonlat, "1000km"))
                                         .scoreMode(FiltersFunctionScoreQuery.ScoreMode.MULTIPLY))));
-        try {
-            response.actionGet();
-            fail("Expected SearchPhaseExecutionException");
-        } catch (SearchPhaseExecutionException e) {
-            assertThat(e.getMessage(), is("all shards failed"));
-        }
+        SearchResponse sr = response.actionGet();
     }
 
+    @Test(expected = SearchPhaseExecutionException.class)
     public void testParsingExceptionIfFieldTypeDoesNotMatch() throws Exception {
         assertAcked(prepareCreate("test").addMapping(
                 "type",
@@ -660,14 +672,10 @@ public class DecayFunctionScoreIT extends ESIntegTestCase {
                 searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(
                         searchSource().query(
                                 functionScoreQuery(termQuery("test", "value"), linearDecayFunction("num", 1.0, 0.5)).scoreMode(FiltersFunctionScoreQuery.ScoreMode.MULTIPLY))));
-        try {
-            response.actionGet();
-            fail("Expected SearchPhaseExecutionException");
-        } catch (SearchPhaseExecutionException e) {
-            assertThat(e.getMessage(), is("all shards failed"));
-        }
+        response.actionGet();
     }
 
+    @Test
     public void testNoQueryGiven() throws Exception {
         assertAcked(prepareCreate("test").addMapping(
                 "type",
@@ -687,6 +695,7 @@ public class DecayFunctionScoreIT extends ESIntegTestCase {
         response.actionGet();
     }
 
+    @Test
     public void testMultiFieldOptions() throws Exception {
         assertAcked(prepareCreate("test").addMapping(
                 "type1",
diff --git a/core/src/test/java/org/elasticsearch/search/functionscore/ExplainableScriptIT.java b/core/src/test/java/org/elasticsearch/search/functionscore/ExplainableScriptIT.java
index 39ce61f..eb7903f 100644
--- a/core/src/test/java/org/elasticsearch/search/functionscore/ExplainableScriptIT.java
+++ b/core/src/test/java/org/elasticsearch/search/functionscore/ExplainableScriptIT.java
@@ -27,11 +27,7 @@ import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.lucene.search.function.CombineFunction;
 import org.elasticsearch.index.fielddata.ScriptDocValues;
 import org.elasticsearch.plugins.Plugin;
-import org.elasticsearch.script.AbstractDoubleSearchScript;
-import org.elasticsearch.script.ExecutableScript;
-import org.elasticsearch.script.ExplainableSearchScript;
-import org.elasticsearch.script.NativeScriptFactory;
-import org.elasticsearch.script.Script;
+import org.elasticsearch.script.*;
 import org.elasticsearch.script.ScriptService.ScriptType;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.search.SearchHits;
@@ -39,6 +35,7 @@ import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.hamcrest.ElasticsearchAssertions;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -58,12 +55,15 @@ import static org.hamcrest.Matchers.equalTo;
 
 @ClusterScope(scope = Scope.SUITE, numDataNodes = 1)
 public class ExplainableScriptIT extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return pluginList(ExplainableScriptPlugin.class);
     }
 
+    @Test
     public void testNativeExplainScript() throws InterruptedException, IOException, ExecutionException {
+
         List<IndexRequestBuilder> indexRequests = new ArrayList<>();
         for (int i = 0; i < 20; i++) {
             indexRequests.add(client().prepareIndex("test", "type").setId(Integer.toString(i)).setSource(
diff --git a/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScoreBackwardCompatibilityIT.java b/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScoreBackwardCompatibilityIT.java
index db5f1ed..8bf957d 100644
--- a/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScoreBackwardCompatibilityIT.java
+++ b/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScoreBackwardCompatibilityIT.java
@@ -25,6 +25,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilder;
 import org.elasticsearch.script.Script;
 import org.elasticsearch.test.ESBackcompatTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -33,23 +34,22 @@ import java.util.concurrent.ExecutionException;
 
 import static org.elasticsearch.client.Requests.searchRequest;
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
-import static org.elasticsearch.index.query.QueryBuilders.functionScoreQuery;
 import static org.elasticsearch.index.query.QueryBuilders.termQuery;
-import static org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders.gaussDecayFunction;
-import static org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders.scriptFunction;
-import static org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders.weightFactorFunction;
+import static org.elasticsearch.index.query.QueryBuilders.functionScoreQuery;
+import static org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders.*;
 import static org.elasticsearch.search.builder.SearchSourceBuilder.searchSource;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertOrderedSearchHits;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
 
 /**
  */
 public class FunctionScoreBackwardCompatibilityIT extends ESBackcompatTestCase {
+
     /**
-     * Simple upgrade test for function score.
+     * Simple upgrade test for function score
      */
+    @Test
     public void testSimpleFunctionScoreParsingWorks() throws IOException, ExecutionException, InterruptedException {
+
         assertAcked(prepareCreate("test").addMapping(
                 "type1",
                 jsonBuilder().startObject()
diff --git a/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScoreFieldValueIT.java b/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScoreFieldValueIT.java
index 5331dfe..419861d 100644
--- a/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScoreFieldValueIT.java
+++ b/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScoreFieldValueIT.java
@@ -23,22 +23,21 @@ import org.elasticsearch.action.search.SearchPhaseExecutionException;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.common.lucene.search.function.FieldValueFactorFunction;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
-import static org.elasticsearch.index.query.QueryBuilders.functionScoreQuery;
-import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
-import static org.elasticsearch.index.query.QueryBuilders.simpleQueryStringQuery;
+import static org.elasticsearch.index.query.QueryBuilders.*;
 import static org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders.fieldValueFactorFunction;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertFailures;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertOrderedSearchHits;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
 
 /**
  * Tests for the {@code field_value_factor} function in a function_score query.
  */
 public class FunctionScoreFieldValueIT extends ESIntegTestCase {
+
+    @Test
     public void testFieldValueFactor() throws IOException {
         assertAcked(prepareCreate("test").addMapping(
                 "type1",
diff --git a/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScorePluginIT.java b/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScorePluginIT.java
index b428d91..4dab3c3 100644
--- a/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScorePluginIT.java
+++ b/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScorePluginIT.java
@@ -35,6 +35,7 @@ import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.hamcrest.ElasticsearchAssertions;
+import org.junit.Test;
 
 import java.util.Collection;
 
@@ -51,11 +52,13 @@ import static org.hamcrest.Matchers.equalTo;
  */
 @ClusterScope(scope = Scope.SUITE, numDataNodes = 1)
 public class FunctionScorePluginIT extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return pluginList(CustomDistanceScorePlugin.class);
     }
 
+    @Test
     public void testPlugin() throws Exception {
         client().admin()
                 .indices()
diff --git a/core/src/test/java/org/elasticsearch/search/functionscore/QueryRescorerIT.java b/core/src/test/java/org/elasticsearch/search/functionscore/QueryRescorerIT.java
index 861701a..dce6ef3 100644
--- a/core/src/test/java/org/elasticsearch/search/functionscore/QueryRescorerIT.java
+++ b/core/src/test/java/org/elasticsearch/search/functionscore/QueryRescorerIT.java
@@ -40,6 +40,7 @@ import org.elasticsearch.search.SearchHits;
 import org.elasticsearch.search.rescore.RescoreBuilder;
 import org.elasticsearch.search.rescore.RescoreBuilder.QueryRescorer;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.Comparator;
@@ -65,6 +66,8 @@ import static org.hamcrest.Matchers.notNullValue;
  *
  */
 public class QueryRescorerIT extends ESIntegTestCase {
+
+    @Test
     public void testEnforceWindowSize() {
         createIndex("test");
         // this
@@ -98,6 +101,7 @@ public class QueryRescorerIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testRescorePhrase() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping(
@@ -144,6 +148,7 @@ public class QueryRescorerIT extends ESIntegTestCase {
         assertThirdHit(searchResponse, hasId("3"));
     }
 
+    @Test
     public void testMoreDocs() throws Exception {
         Builder builder = Settings.builder();
         builder.put("index.analysis.analyzer.synonym.tokenizer", "whitespace");
@@ -222,6 +227,7 @@ public class QueryRescorerIT extends ESIntegTestCase {
     }
 
     // Tests a rescore window smaller than number of hits:
+    @Test
     public void testSmallRescoreWindow() throws Exception {
         Builder builder = Settings.builder();
         builder.put("index.analysis.analyzer.synonym.tokenizer", "whitespace");
@@ -292,6 +298,7 @@ public class QueryRescorerIT extends ESIntegTestCase {
     }
 
     // Tests a rescorer that penalizes the scores:
+    @Test
     public void testRescorerMadeScoresWorse() throws Exception {
         Builder builder = Settings.builder();
         builder.put("index.analysis.analyzer.synonym.tokenizer", "whitespace");
@@ -404,6 +411,7 @@ public class QueryRescorerIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     // forces QUERY_THEN_FETCH because of https://github.com/elasticsearch/elasticsearch/issues/4829
     public void testEquivalence() throws Exception {
         // no dummy docs since merges can change scores while we run queries.
@@ -488,6 +496,7 @@ public class QueryRescorerIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testExplain() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping(
@@ -587,6 +596,7 @@ public class QueryRescorerIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testScoring() throws Exception {
         int numDocs = indexRandomNumbers("keyword");
 
@@ -679,6 +689,7 @@ public class QueryRescorerIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testMultipleRescores() throws Exception {
         int numDocs = indexRandomNumbers("keyword", 1, true);
         QueryRescorer eightIsGreat = RescoreBuilder.queryRescorer(
diff --git a/core/src/test/java/org/elasticsearch/search/geo/GeoBoundingBoxIT.java b/core/src/test/java/org/elasticsearch/search/geo/GeoBoundingBoxIT.java
index 518e4fc..b61b389 100644
--- a/core/src/test/java/org/elasticsearch/search/geo/GeoBoundingBoxIT.java
+++ b/core/src/test/java/org/elasticsearch/search/geo/GeoBoundingBoxIT.java
@@ -25,11 +25,11 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.query.GeoValidationMethod;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.boolQuery;
-import static org.elasticsearch.index.query.QueryBuilders.geoBoundingBoxQuery;
-import static org.elasticsearch.index.query.QueryBuilders.termQuery;
+import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
+import static org.elasticsearch.index.query.QueryBuilders.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.equalTo;
@@ -38,7 +38,9 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class GeoBoundingBoxIT extends ESIntegTestCase {
-    public void testSimpleBoundingBoxTest() throws Exception {
+
+    @Test
+    public void simpleBoundingBoxTest() throws Exception {
         XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("location").field("type", "geo_point").field("lat_lon", true).endObject().endObject()
                 .endObject().endObject();
@@ -107,7 +109,8 @@ public class GeoBoundingBoxIT extends ESIntegTestCase {
         }
     }
 
-    public void testLimitsBoundingBox() throws Exception {
+    @Test
+    public void limitsBoundingBoxTest() throws Exception {
         XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("location").field("type", "geo_point").field("lat_lon", true).endObject().endObject()
                 .endObject().endObject();
@@ -209,7 +212,8 @@ public class GeoBoundingBoxIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).id(), equalTo("9"));
     }
 
-    public void testLimit2BoundingBox() throws Exception {
+    @Test
+    public void limit2BoundingBoxTest() throws Exception {
         XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("location").field("type", "geo_point").field("lat_lon", true).endObject().endObject()
                 .endObject().endObject();
@@ -259,7 +263,8 @@ public class GeoBoundingBoxIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
     }
 
-    public void testCompleteLonRange() throws Exception {
+    @Test
+    public void completeLonRangeTest() throws Exception {
         XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("location").field("type", "geo_point").field("lat_lon", true).endObject().endObject()
                 .endObject().endObject();
diff --git a/core/src/test/java/org/elasticsearch/search/geo/GeoFilterIT.java b/core/src/test/java/org/elasticsearch/search/geo/GeoFilterIT.java
index 5bbc181..152c3c9 100644
--- a/core/src/test/java/org/elasticsearch/search/geo/GeoFilterIT.java
+++ b/core/src/test/java/org/elasticsearch/search/geo/GeoFilterIT.java
@@ -49,6 +49,7 @@ import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.junit.BeforeClass;
+import org.junit.Test;
 
 import java.io.ByteArrayOutputStream;
 import java.io.FileNotFoundException;
@@ -110,7 +111,9 @@ public class GeoFilterIT extends ESIntegTestCase {
         return out.toByteArray();
     }
 
+    @Test
     public void testShapeBuilders() {
+
         try {
             // self intersection polygon
             ShapeBuilder.newPolygon()
@@ -220,11 +223,14 @@ public class GeoFilterIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testShapeRelations() throws Exception {
+
         assertTrue( "Intersect relation is not supported", intersectSupport);
         assertTrue("Disjoint relation is not supported", disjointSupport);
         assertTrue("within relation is not supported", withinSupport);
 
+
         String mapping = XContentFactory.jsonBuilder()
                 .startObject()
                 .startObject("polygon")
@@ -396,7 +402,8 @@ public class GeoFilterIT extends ESIntegTestCase {
         assertHitCount(result, 1);
     }
 
-    public void testBulk() throws Exception {
+    @Test
+    public void bulktest() throws Exception {
         byte[] bulkAction = unZipData("/org/elasticsearch/search/geo/gzippedmap.gz");
 
         String mapping = XContentFactory.jsonBuilder()
@@ -461,6 +468,7 @@ public class GeoFilterIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testGeohashCellFilter() throws IOException {
         String geohash = randomhash(10);
         logger.info("Testing geohash_cell filter for [{}]", geohash);
@@ -534,6 +542,7 @@ public class GeoFilterIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testNeighbors() {
         // Simple root case
         assertThat(XGeoHashUtils.addNeighbors("7", new ArrayList<String>()), containsInAnyOrder("4", "5", "6", "d", "e", "h", "k", "s"));
diff --git a/core/src/test/java/org/elasticsearch/search/geo/GeoPolygonIT.java b/core/src/test/java/org/elasticsearch/search/geo/GeoPolygonIT.java
index b364826..248c62b 100644
--- a/core/src/test/java/org/elasticsearch/search/geo/GeoPolygonIT.java
+++ b/core/src/test/java/org/elasticsearch/search/geo/GeoPolygonIT.java
@@ -25,6 +25,7 @@ import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -86,7 +87,8 @@ public class GeoPolygonIT extends ESIntegTestCase {
         ensureSearchable("test");
     }
 
-    public void testSimplePolygon() throws Exception {
+    @Test
+    public void simplePolygonTest() throws Exception {
         List<GeoPoint> points = new ArrayList<>();
         points.add(new GeoPoint(40.7, -74.0));
         points.add(new GeoPoint(40.7, -74.1));
@@ -103,7 +105,8 @@ public class GeoPolygonIT extends ESIntegTestCase {
         }
     }
 
-    public void testSimpleUnclosedPolygon() throws Exception {
+    @Test
+    public void simpleUnclosedPolygon() throws Exception {
         List<GeoPoint> points = new ArrayList<>();
         points.add(new GeoPoint(40.7, -74.0));
         points.add(new GeoPoint(40.7, -74.1));
diff --git a/core/src/test/java/org/elasticsearch/search/geo/GeoShapeIntegrationIT.java b/core/src/test/java/org/elasticsearch/search/geo/GeoShapeIntegrationIT.java
index e1f45d7..1f057af 100644
--- a/core/src/test/java/org/elasticsearch/search/geo/GeoShapeIntegrationIT.java
+++ b/core/src/test/java/org/elasticsearch/search/geo/GeoShapeIntegrationIT.java
@@ -38,6 +38,7 @@ import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.indices.IndicesService;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.geo.RandomShapeGenerator;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Locale;
@@ -54,6 +55,8 @@ import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.nullValue;
 
 public class GeoShapeIntegrationIT extends ESIntegTestCase {
+
+    @Test
     public void testNullShape() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("location")
@@ -68,6 +71,7 @@ public class GeoShapeIntegrationIT extends ESIntegTestCase {
         assertThat(result.getField("location"), nullValue());
     }
 
+    @Test
     public void testIndexPointsFilterRectangle() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("location")
@@ -117,7 +121,9 @@ public class GeoShapeIntegrationIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).id(), equalTo("1"));
     }
 
+    @Test
     public void testEdgeCases() throws Exception {
+
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("location")
                 .field("type", "geo_shape")
@@ -155,6 +161,7 @@ public class GeoShapeIntegrationIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).id(), equalTo("blakely"));
     }
 
+    @Test
     public void testIndexedShapeReference() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("location")
@@ -198,6 +205,7 @@ public class GeoShapeIntegrationIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).id(), equalTo("1"));
     }
 
+    @Test
     public void testReusableBuilder() throws IOException {
         ShapeBuilder polygon = ShapeBuilder.newPolygon()
                 .point(170, -10).point(190, -10).point(190, 10).point(170, 10)
@@ -217,6 +225,7 @@ public class GeoShapeIntegrationIT extends ESIntegTestCase {
         assertThat(before, equalTo(after));
     }
 
+    @Test
     public void testShapeFetchingPath() throws Exception {
         createIndex("shapes");
         assertAcked(prepareCreate("test").addMapping("type", "location", "type=geo_shape"));
@@ -299,6 +308,7 @@ public class GeoShapeIntegrationIT extends ESIntegTestCase {
     }
 
     @LuceneTestCase.AwaitsFix(bugUrl = "https://github.com/elasticsearch/elasticsearch/issues/9904")
+    @Test
     public void testShapeFilterWithRandomGeoCollection() throws Exception {
         // Create a random geometry collection.
         GeometryCollectionBuilder gcb = RandomShapeGenerator.createGeometryCollection(getRandom());
@@ -323,6 +333,7 @@ public class GeoShapeIntegrationIT extends ESIntegTestCase {
         assertHitCount(result, 1);
     }
 
+    @Test
     public void testShapeFilterWithDefinedGeoCollection() throws Exception {
         createIndex("shapes");
         assertAcked(prepareCreate("test").addMapping("type", "location", "type=geo_shape"));
@@ -437,6 +448,7 @@ public class GeoShapeIntegrationIT extends ESIntegTestCase {
         assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW));
     }
 
+    @Test
     public void testPointsOnly() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("location")
diff --git a/core/src/test/java/org/elasticsearch/search/highlight/CustomHighlighterSearchIT.java b/core/src/test/java/org/elasticsearch/search/highlight/CustomHighlighterSearchIT.java
index 07045cc..5f5ecfc 100644
--- a/core/src/test/java/org/elasticsearch/search/highlight/CustomHighlighterSearchIT.java
+++ b/core/src/test/java/org/elasticsearch/search/highlight/CustomHighlighterSearchIT.java
@@ -25,6 +25,7 @@ import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Collection;
@@ -55,6 +56,7 @@ public class CustomHighlighterSearchIT extends ESIntegTestCase {
         ensureYellow();
     }
 
+    @Test
     public void testThatCustomHighlightersAreSupported() throws IOException {
         SearchResponse searchResponse = client().prepareSearch("test").setTypes("test")
                 .setQuery(QueryBuilders.matchAllQuery())
@@ -63,6 +65,7 @@ public class CustomHighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "name", 0, equalTo("standard response for name at position 1"));
     }
 
+    @Test
     public void testThatCustomHighlighterCanBeConfiguredPerField() throws Exception {
         HighlightBuilder.Field highlightConfig = new HighlightBuilder.Field("name");
         highlightConfig.highlighterType("test-custom");
@@ -79,6 +82,7 @@ public class CustomHighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "name", 1, equalTo("field:myFieldOption:someValue"));
     }
 
+    @Test
     public void testThatCustomHighlighterCanBeConfiguredGlobally() throws Exception {
         Map<String, Object> options = new HashMap<>();
         options.put("myGlobalOption", "someValue");
@@ -91,6 +95,7 @@ public class CustomHighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "name", 1, equalTo("field:myGlobalOption:someValue"));
     }
 
+    @Test
     public void testThatCustomHighlighterReceivesFieldsInOrder() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("test").setTypes("test")
                 .setQuery(QueryBuilders.boolQuery().must(QueryBuilders.matchAllQuery()).should(QueryBuilders
diff --git a/core/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchIT.java b/core/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchIT.java
index 865c5bf..93fd7eb 100644
--- a/core/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchIT.java
+++ b/core/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchIT.java
@@ -42,6 +42,7 @@ import org.elasticsearch.search.highlight.HighlightBuilder.Field;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matcher;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.HashMap;
@@ -80,11 +81,12 @@ import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasKey;
-import static org.hamcrest.Matchers.lessThan;
 import static org.hamcrest.Matchers.not;
 import static org.hamcrest.Matchers.startsWith;
 
 public class HighlighterSearchIT extends ESIntegTestCase {
+
+    @Test
     public void testHighlightingWithWildcardName() throws IOException {
         // test the kibana case with * as fieldname that will try highlight all fields including meta fields
         XContentBuilder mappings = jsonBuilder();
@@ -113,6 +115,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(search, 0, "text", 0, equalTo("<em>text</em>"));
     }
 
+    @Test
     public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException {
         XContentBuilder mappings = jsonBuilder();
         mappings.startObject();
@@ -162,6 +165,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertThat(search.getHits().getAt(0).getHighlightFields().size(), equalTo(0));
     }
 
+    @Test
     public void testHighlightingWhenFieldsAreNotStoredThereIsNoSource() throws IOException {
         XContentBuilder mappings = jsonBuilder();
         mappings.startObject();
@@ -202,6 +206,8 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertThat(search.getHits().getAt(0).getHighlightFields().size(), equalTo(0));
     }
 
+
+    @Test
     // see #3486
     public void testHighTermFrequencyDoc() throws IOException {
         assertAcked(prepareCreate("test")
@@ -220,6 +226,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(search, 0, "name", 0, startsWith("<em>abc</em> <em>abc</em> <em>abc</em> <em>abc</em>"));
     }
 
+    @Test
     public void testNgramHighlightingWithBrokenPositions() throws IOException {
         assertAcked(prepareCreate("test")
                 .addMapping("test", jsonBuilder()
@@ -277,6 +284,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(search, 0, "name.autocomplete", 0, equalTo("ARCO<em>TEL</em> Ho<em>tel</em>s <em>Deut</em>schland"));
     }
 
+    @Test
     public void testMultiPhraseCutoff() throws IOException {
         /*
          * MultiPhraseQuery can literally kill an entire node if there are too many terms in the
@@ -320,7 +328,9 @@ public class HighlighterSearchIT extends ESIntegTestCase {
                 equalTo("<em>Test</em>: <em>http://www.facebook.com</em> <em>http://elasticsearch.org</em> <em>http://xing.com</em> <em>http://cnn.com</em> http://quora.com"));
     }
 
+    @Test
     public void testNgramHighlightingPreLucene42() throws IOException {
+
         assertAcked(prepareCreate("test")
                 .addMapping("test",
                         "name", "type=string,analyzer=name_index_analyzer,search_analyzer=name_search_analyzer," + randomStoreField() + "term_vector=with_positions_offsets",
@@ -392,6 +402,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
                 equalTo("avinci, unilog avinci, <em>logica</em>cmg, <em>logica</em>")));
     }
 
+    @Test
     public void testNgramHighlighting() throws IOException {
         assertAcked(prepareCreate("test")
                 .addMapping("test",
@@ -437,6 +448,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(search, 0, "name2", 0, equalTo("<em>logicacmg</em> ehemals avinci - the know how company"));
     }
 
+    @Test
     public void testEnsureNoNegativeOffsets() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1",
@@ -470,6 +482,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(search, 0, "no_long_term", 0, 1, equalTo("a <b>test</b> where <b>foo</b> is <b>highlighed</b> and"));
     }
 
+    @Test
     public void testSourceLookupHighlightingUsingPlainHighlighter() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties")
@@ -509,6 +522,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testSourceLookupHighlightingUsingFastVectorHighlighter() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties")
@@ -548,6 +562,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testSourceLookupHighlightingUsingPostingsHighlighter() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties")
@@ -599,6 +614,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testHighlightIssue1994() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "title", "type=string,store=no", "titleTV", "type=string,store=no,term_vector=with_positions_offsets"));
@@ -630,6 +646,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(search, 0, "titleTV", 1, 2, equalTo("<em>highlight</em> other text"));
     }
 
+    @Test
     public void testGlobalHighlightingSettingsOverriddenAtFieldLevel() {
         createIndex("test");
         ensureGreen();
@@ -653,7 +670,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("this is another <field2>test</field2>"));
     }
 
-    // Issue #5175
+    @Test //https://github.com/elasticsearch/elasticsearch/issues/5175
     public void testHighlightingOnWildcardFields() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1",
@@ -681,7 +698,9 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field-plain", 0, 1, equalTo("This is the <xxx>test</xxx> for the plain highlighter"));
     }
 
+    @Test
     public void testForceSourceWithSourceDisabled() throws Exception {
+
         assertAcked(prepareCreate("test")
                 .addMapping("type1", jsonBuilder().startObject().startObject("type1")
                         .startObject("_source").field("enabled", false).endObject()
@@ -740,6 +759,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
                 matches("source is forced for fields \\[field\\d, field\\d\\] but type \\[type1\\] has disabled _source"));
     }
 
+    @Test
     public void testPlainHighlighter() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -802,6 +822,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("The <xxx>quick</xxx> brown fox jumps over the lazy dog"));
     }
 
+    @Test
     public void testFastVectorHighlighter() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()));
         ensureGreen();
@@ -851,9 +872,9 @@ public class HighlighterSearchIT extends ESIntegTestCase {
     }
 
     /**
-     * The FHV can spend a long time highlighting degenerate documents if
-     * phraseLimit is not set. Its default is now reasonably low.
+     * The FHV can spend a long time highlighting degenerate documents if phraseLimit is not set.
      */
+    @Test(timeout=120000)
     public void testFVHManyMatches() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()));
         ensureGreen();
@@ -865,33 +886,22 @@ public class HighlighterSearchIT extends ESIntegTestCase {
                 .setSource("field1", value).get();
         refresh();
 
-        logger.info("--> highlighting and searching on field1 with default phrase limit");
+        logger.info("--> highlighting and searching on field1");
         SearchSourceBuilder source = searchSource()
                 .query(termQuery("field1", "t"))
                 .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>"));
-        SearchResponse defaultPhraseLimit = client().search(searchRequest("test").source(source)).actionGet();
-        assertHighlight(defaultPhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"));
-
-        logger.info("--> highlighting and searching on field1 with large phrase limit");
-        source = searchSource()
-                .query(termQuery("field1", "t"))
-                .highlighter(highlight().highlighterType("fvh").field("field1", 20, 1).order("score").preTags("<xxx>").postTags("</xxx>").phraseLimit(30000));
-        SearchResponse largePhraseLimit = client().search(searchRequest("test").source(source)).actionGet();
-        assertHighlight(largePhraseLimit, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"));
-
-        /*
-         * I hate comparing times because it can be inconsistent but default is
-         * in the neighborhood of 300ms and the large phrase limit is in the
-         * neighborhood of 8 seconds.
-         */
-        assertThat(defaultPhraseLimit.getTookInMillis(), lessThan(largePhraseLimit.getTookInMillis()));
+        SearchResponse searchResponse = client().search(searchRequest("test").source(source)).actionGet();
+        assertHighlight(searchResponse, 0, "field1", 0, 1, containsString("<xxx>t</xxx>"));
+        logger.info("--> done");
     }
 
 
+    @Test
     public void testMatchedFieldsFvhRequireFieldMatch() throws Exception {
         checkMatchedFieldsCase(true);
     }
 
+    @Test
     public void testMatchedFieldsFvhNoRequireFieldMatch() throws Exception {
         checkMatchedFieldsCase(false);
     }
@@ -1057,6 +1067,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
                  RestStatus.INTERNAL_SERVER_ERROR, containsString("IndexOutOfBoundsException"));
     }
 
+    @Test
     public void testFastVectorHighlighterManyDocs() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()));
         ensureGreen();
@@ -1103,6 +1114,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
                 .endObject().endObject();
     }
 
+    @Test
     public void testSameContent() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "title", "type=string,store=yes,term_vector=with_positions_offsets"));
@@ -1125,6 +1137,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testFastVectorHighlighterOffsetParameter() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "title", "type=string,store=yes,term_vector=with_positions_offsets").get());
@@ -1148,6 +1161,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testEscapeHtml() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "title", "type=string,store=yes"));
@@ -1170,7 +1184,8 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         }
     }
 
-    public void testEscapeHtmlVector() throws Exception {
+    @Test
+    public void testEscapeHtml_vector() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "title", "type=string,store=yes,term_vector=with_positions_offsets"));
         ensureYellow();
@@ -1192,6 +1207,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testMultiMapperVectorWithStore() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties")
@@ -1220,6 +1236,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(search, 0, "title.key", 0, 1, equalTo("<em>this</em> <em>is</em> <em>a</em> <em>test</em>"));
     }
 
+    @Test
     public void testMultiMapperVectorFromSource() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties")
@@ -1250,6 +1267,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(search, 0, "title.key", 0, 1, equalTo("<em>this</em> <em>is</em> <em>a</em> <em>test</em>"));
     }
 
+    @Test
     public void testMultiMapperNoVectorWithStore() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties")
@@ -1280,6 +1298,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(search, 0, "title.key", 0, 1, equalTo("<em>this</em> <em>is</em> <em>a</em> <em>test</em>"));
     }
 
+    @Test
     public void testMultiMapperNoVectorFromSource() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties")
@@ -1309,6 +1328,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(search, 0, "title.key", 0, 1, equalTo("<em>this</em> <em>is</em> <em>a</em> <em>test</em>"));
     }
 
+    @Test
     public void testFastVectorHighlighterShouldFailIfNoTermVectors() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "title", "type=string,store=yes,term_vector=no"));
@@ -1339,6 +1359,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
                 .highlighter(new HighlightBuilder().field("tit*", 50, 1, 10).highlighterType("fast-vector-highlighter")).get());
     }
 
+    @Test
     public void testDisableFastVectorHighlighter() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "title", "type=string,store=yes,term_vector=with_positions_offsets,analyzer=classic"));
@@ -1384,6 +1405,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testFSHHighlightAllMvFragments() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "tags", "type=string,term_vector=with_positions_offsets"));
@@ -1402,6 +1424,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(response, 0, "tags", 1, 2, equalTo("here is another one that is very long and has the <em>tag</em> token near the end"));
     }
 
+    @Test
     public void testBoostingQuery() {
         createIndex("test");
         ensureGreen();
@@ -1419,6 +1442,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("The quick <x>brown</x> fox jumps over the lazy dog"));
     }
 
+    @Test
     @AwaitsFix(bugUrl="Broken now that BoostingQuery does not extend BooleanQuery anymore")
     public void testBoostingQueryTermVector() throws IOException {
         assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()));
@@ -1437,6 +1461,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("The quick <x>brown</x> fox jumps over the lazy dog"));
     }
 
+    @Test
     public void testCommonTermsQuery() {
         createIndex("test");
         ensureGreen();
@@ -1455,6 +1480,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("The <x>quick</x> <x>brown</x> fox jumps over the lazy dog"));
     }
 
+    @Test
     public void testCommonTermsTermVector() throws IOException {
         assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()));
         ensureGreen();
@@ -1470,6 +1496,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("The <x>quick</x> <x>brown</x> fox jumps over the lazy dog"));
     }
 
+    @Test
     public void testPhrasePrefix() throws IOException {
         Builder builder = settingsBuilder()
                 .put(indexSettings())
@@ -1540,6 +1567,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field4", 0, 1, equalTo("<x>a quick fast blue car</x>"));
     }
 
+    @Test
     public void testPlainHighlightDifferentFragmenter() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "tags", "type=string"));
@@ -1577,6 +1605,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
                 containsString("unknown fragmenter option [invalid] for the field [tags]"));
     }
 
+    @Test
     public void testPlainHighlighterMultipleFields() {
         createIndex("test");
         ensureGreen();
@@ -1595,6 +1624,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(response, 0, "field2", 0, 1, equalTo("The <b>slow<b> brown <2>fox</2>"));
     }
 
+    @Test
     public void testFastVectorHighlighterMultipleFields() {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "field1", "type=string,term_vector=with_positions_offsets", "field2", "type=string,term_vector=with_positions_offsets"));
@@ -1614,6 +1644,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(response, 0, "field2", 0, 1, equalTo("The <b>slow<b> brown <2>fox</2>"));
     }
 
+    @Test
     public void testMissingStoredField() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "highlight_field", "type=string,store=yes"));
@@ -1633,7 +1664,8 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertThat(response.getHits().hits()[0].highlightFields().isEmpty(), equalTo(true));
     }
 
-    // Issue #3211
+    @Test
+    // https://github.com/elasticsearch/elasticsearch/issues/3211
     public void testNumericHighlighting() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("test", "text", "type=string,index=analyzed",
@@ -1656,7 +1688,8 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHitCount(response, 1l);
     }
 
-    // Issue #3200
+    @Test
+    // https://github.com/elasticsearch/elasticsearch/issues/3200
     public void testResetTwice() throws Exception {
         assertAcked(prepareCreate("test")
                 .setSettings(settingsBuilder()
@@ -1677,6 +1710,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHitCount(response, 1l);
     }
 
+    @Test
     public void testHighlightUsesHighlightQuery() throws IOException {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "text", "type=string," + randomStoreField() + "term_vector=with_positions_offsets,index_options=offsets"));
@@ -1743,6 +1777,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         return "";
     }
 
+    @Test
     public void testHighlightNoMatchSize() throws IOException {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "text", "type=string," + randomStoreField() + "term_vector=with_positions_offsets,index_options=offsets"));
@@ -1851,6 +1886,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertNotHighlighted(response, 0, "text");
     }
 
+    @Test
     public void testHighlightNoMatchSizeWithMultivaluedFields() throws IOException {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "text", "type=string," + randomStoreField() + "term_vector=with_positions_offsets,index_options=offsets"));
@@ -1963,6 +1999,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertNotHighlighted(response, 0, "text");
     }
 
+    @Test
     public void testHighlightNoMatchSizeNumberOfFragments() throws IOException {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "text", "type=string," + randomStoreField() + "term_vector=with_positions_offsets,index_options=offsets"));
@@ -2010,6 +2047,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(response, 0, "text", 1, 2, equalTo("This is the <em>fifth</em> sentence"));
     }
 
+    @Test
     public void testPostingsHighlighter() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         ensureGreen();
@@ -2065,6 +2103,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("The <xxx>quick</xxx> <xxx>brown</xxx> fox jumps over the lazy <xxx>quick</xxx> dog"));
     }
 
+    @Test
     public void testPostingsHighlighterMultipleFields() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()).get());
         ensureGreen();
@@ -2081,6 +2120,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(response, 0, "field1", 0, 1, equalTo("The <b>quick<b> brown <1>fox</1>."));
     }
 
+    @Test
     public void testPostingsHighlighterNumberOfFragments() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         ensureGreen();
@@ -2127,6 +2167,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testMultiMatchQueryHighlight() throws IOException {
         String[] highlighterTypes = new String[] {"fvh", "plain", "postings"};
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
@@ -2167,6 +2208,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testPostingsHighlighterOrderByScore() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         ensureGreen();
@@ -2195,6 +2237,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertThat(field1.fragments()[4].string(), equalTo("One <em>sentence</em> match here and scored lower since the text is quite long, not that appealing."));
     }
 
+    @Test
     public void testPostingsHighlighterEscapeHtml() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "title", "type=string," + randomStoreField() + "index_options=offsets"));
@@ -2216,6 +2259,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testPostingsHighlighterMultiMapperWithStore() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", jsonBuilder().startObject().startObject("type1")
@@ -2249,6 +2293,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "title.key", 0, 1, equalTo("<em>this</em> <em>is</em> <em>a</em> <em>test</em> ."));
     }
 
+    @Test
     public void testPostingsHighlighterMultiMapperFromSource() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties")
@@ -2278,6 +2323,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "title.key", 0, 1, equalTo("<em>this</em> <em>is</em> <em>a</em> <em>test</em>"));
     }
 
+    @Test
     public void testPostingsHighlighterShouldFailIfNoOffsets() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties")
@@ -2317,6 +2363,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
                 .highlighter(new HighlightBuilder().field("tit*").highlighterType("postings")).get());
     }
 
+    @Test
     public void testPostingsHighlighterBoostingQuery() throws IOException {
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         ensureGreen();
@@ -2333,6 +2380,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("The quick <x>brown</x> fox jumps over the lazy dog!"));
     }
 
+    @Test
     public void testPostingsHighlighterCommonTermsQuery() throws IOException {
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         ensureGreen();
@@ -2357,6 +2405,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
                 .endObject().endObject();
     }
 
+    @Test
     public void testPostingsHighlighterPrefixQuery() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         ensureGreen();
@@ -2372,6 +2421,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testPostingsHighlighterFuzzyQuery() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         ensureGreen();
@@ -2386,6 +2436,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("The <em>quick</em> brown fox jumps over the lazy dog!"));
     }
 
+    @Test
     public void testPostingsHighlighterRegexpQuery() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         ensureGreen();
@@ -2400,6 +2451,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("The <em>quick</em> brown fox jumps over the lazy dog!"));
     }
 
+    @Test
     public void testPostingsHighlighterWildcardQuery() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         ensureGreen();
@@ -2421,6 +2473,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("The <em>quick</em> brown fox jumps over the lazy dog!"));
     }
 
+    @Test
     public void testPostingsHighlighterTermRangeQuery() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         ensureGreen();
@@ -2435,6 +2488,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("<em>aaab</em>"));
     }
 
+    @Test
     public void testPostingsHighlighterQueryString() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         ensureGreen();
@@ -2448,7 +2502,9 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("The <em>quick</em> brown fox jumps over the lazy dog!"));
     }
 
+    @Test
     public void testPostingsHighlighterRegexpQueryWithinConstantScoreQuery() throws Exception {
+
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         ensureGreen();
 
@@ -2462,7 +2518,9 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field1", 0, 1, equalTo("The <em>photography</em> word will get highlighted"));
     }
 
+    @Test
     public void testPostingsHighlighterMultiTermQueryMultipleLevels() throws Exception {
+
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         ensureGreen();
 
@@ -2479,7 +2537,9 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field1", 0, 1, equalTo("The <em>photography</em> word will get highlighted"));
     }
 
+    @Test
     public void testPostingsHighlighterPrefixQueryWithinBooleanQuery() throws Exception {
+
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         ensureGreen();
 
@@ -2493,7 +2553,9 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field1", 0, 1, equalTo("The <em>photography</em> word will get highlighted"));
     }
 
+    @Test
     public void testPostingsHighlighterQueryStringWithinFilteredQuery() throws Exception {
+
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         ensureGreen();
 
@@ -2507,6 +2569,7 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         assertHighlight(searchResponse, 0, "field1", 0, 1, equalTo("The <em>photography</em> word will get highlighted"));
     }
 
+    @Test
     public void testPostingsHighlighterManyDocs() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         ensureGreen();
@@ -2541,12 +2604,14 @@ public class HighlighterSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     @AwaitsFix(bugUrl="Broken now that BoostingQuery does not extend BooleanQuery anymore")
     public void testFastVectorHighlighterPhraseBoost() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()));
         phraseBoostTestCase("fvh");
     }
 
+    @Test
     public void testPostingsHighlighterPhraseBoost() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));
         phraseBoostTestCase("postings");
diff --git a/core/src/test/java/org/elasticsearch/search/indicesboost/SimpleIndicesBoostSearchIT.java b/core/src/test/java/org/elasticsearch/search/indicesboost/SimpleIndicesBoostSearchIT.java
index f9245a3..589f79a 100644
--- a/core/src/test/java/org/elasticsearch/search/indicesboost/SimpleIndicesBoostSearchIT.java
+++ b/core/src/test/java/org/elasticsearch/search/indicesboost/SimpleIndicesBoostSearchIT.java
@@ -22,6 +22,7 @@ package org.elasticsearch.search.indicesboost;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.action.search.SearchType;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.client.Requests.indexRequest;
 import static org.elasticsearch.client.Requests.searchRequest;
@@ -35,6 +36,8 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class SimpleIndicesBoostSearchIT extends ESIntegTestCase {
+
+    @Test
     public void testIndicesBoost() throws Exception {
         assertHitCount(client().prepareSearch().setQuery(termQuery("test", "value")).get(), 0);
 
diff --git a/core/src/test/java/org/elasticsearch/search/innerhits/InnerHitsIT.java b/core/src/test/java/org/elasticsearch/search/innerhits/InnerHitsIT.java
index ece9cc0..e87b1eb 100644
--- a/core/src/test/java/org/elasticsearch/search/innerhits/InnerHitsIT.java
+++ b/core/src/test/java/org/elasticsearch/search/innerhits/InnerHitsIT.java
@@ -40,6 +40,7 @@ import org.elasticsearch.search.highlight.HighlightBuilder;
 import org.elasticsearch.search.sort.SortBuilders;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -70,11 +71,13 @@ import static org.hamcrest.Matchers.nullValue;
 /**
  */
 public class InnerHitsIT extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(MockScriptEngine.TestPlugin.class);
     }
 
+    @Test
     public void testSimpleNested() throws Exception {
         assertAcked(prepareCreate("articles").addMapping("article", jsonBuilder().startObject().startObject("article").startObject("properties")
                 .startObject("comments")
@@ -204,6 +207,7 @@ public class InnerHitsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testRandomNested() throws Exception {
         assertAcked(prepareCreate("idx").addMapping("type", "field1", "type=nested", "field2", "type=nested"));
         int numDocs = scaledRandomIntBetween(25, 100);
@@ -280,6 +284,7 @@ public class InnerHitsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testSimpleParentChild() throws Exception {
         assertAcked(prepareCreate("articles")
                 .addMapping("article", "title", "type=string")
@@ -390,6 +395,7 @@ public class InnerHitsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testRandomParentChild() throws Exception {
         assertAcked(prepareCreate("idx")
                         .addMapping("parent")
@@ -485,6 +491,7 @@ public class InnerHitsIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     @AwaitsFix(bugUrl = "need validation of type or path defined in InnerHitsBuilder")
     public void testPathOrTypeMustBeDefined() {
         createIndex("articles");
@@ -501,6 +508,7 @@ public class InnerHitsIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testInnerHitsOnHasParent() throws Exception {
         assertAcked(prepareCreate("stack")
                         .addMapping("question", "body", "type=string")
@@ -539,6 +547,7 @@ public class InnerHitsIT extends ESIntegTestCase {
         assertThat(searchHit.getInnerHits().get("question").getAt(0).id(), equalTo("2"));
     }
 
+    @Test
     public void testParentChildMultipleLayers() throws Exception {
         assertAcked(prepareCreate("articles")
                         .addMapping("article", "title", "type=string")
@@ -608,6 +617,7 @@ public class InnerHitsIT extends ESIntegTestCase {
         assertThat(innerHits.getAt(0).type(), equalTo("remark"));
     }
 
+    @Test
     public void testNestedMultipleLayers() throws Exception {
         assertAcked(prepareCreate("articles").addMapping("article", jsonBuilder().startObject().startObject("article").startObject("properties")
                 .startObject("comments")
@@ -726,7 +736,8 @@ public class InnerHitsIT extends ESIntegTestCase {
         assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getOffset(), equalTo(0));
     }
 
-    // Issue #9723
+    @Test
+    // https://github.com/elasticsearch/elasticsearch/issues/9723
     public void testNestedDefinedAsObject() throws Exception {
         assertAcked(prepareCreate("articles").addMapping("article", "comments", "type=nested", "title", "type=string"));
 
@@ -750,6 +761,7 @@ public class InnerHitsIT extends ESIntegTestCase {
         assertThat(response.getHits().getAt(0).getInnerHits().get("comments").getAt(0).getNestedIdentity().getChild(), nullValue());
     }
 
+    @Test
     public void testNestedInnerHitsWithStoredFieldsAndNoSourceBackcompat() throws Exception {
         assertAcked(prepareCreate("articles")
                 .setSettings(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id)
@@ -788,6 +800,7 @@ public class InnerHitsIT extends ESIntegTestCase {
         assertThat(response.getHits().getAt(0).getInnerHits().get("comments").getAt(0).fields().get("comments.message").getValue(), equalTo("fox eat quick"));
     }
 
+    @Test
     public void testNestedInnerHitsWithHighlightOnStoredFieldBackcompat() throws Exception {
         assertAcked(prepareCreate("articles")
                 .setSettings(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id)
@@ -827,6 +840,7 @@ public class InnerHitsIT extends ESIntegTestCase {
         assertThat(String.valueOf(response.getHits().getAt(0).getInnerHits().get("comments").getAt(0).highlightFields().get("comments.message").getFragments()[0]), equalTo("<em>fox</em> eat quick"));
     }
 
+    @Test
     public void testNestedInnerHitsWithExcludeSourceBackcompat() throws Exception {
         assertAcked(prepareCreate("articles").setSettings(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id)
                         .addMapping("article", jsonBuilder().startObject()
@@ -866,6 +880,7 @@ public class InnerHitsIT extends ESIntegTestCase {
         assertThat(response.getHits().getAt(0).getInnerHits().get("comments").getAt(0).fields().get("comments.message").getValue(), equalTo("fox eat quick"));
     }
 
+    @Test
     public void testNestedInnerHitsHiglightWithExcludeSourceBackcompat() throws Exception {
         assertAcked(prepareCreate("articles").setSettings(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id)
                         .addMapping("article", jsonBuilder().startObject()
@@ -904,6 +919,7 @@ public class InnerHitsIT extends ESIntegTestCase {
         assertThat(String.valueOf(response.getHits().getAt(0).getInnerHits().get("comments").getAt(0).highlightFields().get("comments.message").getFragments()[0]), equalTo("<em>fox</em> eat quick"));
     }
 
+    @Test
     public void testInnerHitsWithObjectFieldThatHasANestedField() throws Exception {
         assertAcked(prepareCreate("articles")
                         .addMapping("article", jsonBuilder().startObject()
@@ -975,6 +991,7 @@ public class InnerHitsIT extends ESIntegTestCase {
         assertThat(response.getHits().getAt(0).getInnerHits().get("comments.messages").getAt(0).getNestedIdentity().getChild(), nullValue());
     }
 
+    @Test
     public void testRoyals() throws Exception {
         assertAcked(
                 prepareCreate("royals")
@@ -1052,7 +1069,8 @@ public class InnerHitsIT extends ESIntegTestCase {
         assertThat(innerInnerHits.getAt(0).getId(), equalTo("king"));
     }
 
-    public void testMatchesQueriesNestedInnerHits() throws Exception {
+    @Test
+    public void matchesQueries_nestedInnerHits() throws Exception {
         XContentBuilder builder = jsonBuilder().startObject()
                 .startObject("type1")
                 .startObject("properties")
@@ -1149,7 +1167,8 @@ public class InnerHitsIT extends ESIntegTestCase {
         }
     }
 
-    public void testMatchesQueriesParentChildInnerHits() throws Exception {
+    @Test
+    public void matchesQueries_parentChildInnerHits() throws Exception {
         assertAcked(prepareCreate("index").addMapping("child", "_parent", "type=parent"));
         List<IndexRequestBuilder> requests = new ArrayList<>();
         requests.add(client().prepareIndex("index", "parent", "1").setSource("{}"));
@@ -1185,6 +1204,7 @@ public class InnerHitsIT extends ESIntegTestCase {
         assertThat(response.getHits().getAt(0).getInnerHits().get("child").getAt(0).getMatchedQueries()[0], equalTo("_name2"));
     }
 
+    @Test
     public void testDontExplode() throws Exception {
         assertAcked(prepareCreate("index1").addMapping("child", "_parent", "type=parent"));
         List<IndexRequestBuilder> requests = new ArrayList<>();
diff --git a/core/src/test/java/org/elasticsearch/search/matchedqueries/MatchedQueriesIT.java b/core/src/test/java/org/elasticsearch/search/matchedqueries/MatchedQueriesIT.java
index d8c1628..acd36e1 100644
--- a/core/src/test/java/org/elasticsearch/search/matchedqueries/MatchedQueriesIT.java
+++ b/core/src/test/java/org/elasticsearch/search/matchedqueries/MatchedQueriesIT.java
@@ -24,17 +24,9 @@ import org.elasticsearch.index.query.QueryBuilder;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.index.query.QueryBuilders.boolQuery;
-import static org.elasticsearch.index.query.QueryBuilders.constantScoreQuery;
-import static org.elasticsearch.index.query.QueryBuilders.indicesQuery;
-import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
-import static org.elasticsearch.index.query.QueryBuilders.matchQuery;
-import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;
-import static org.elasticsearch.index.query.QueryBuilders.rangeQuery;
-import static org.elasticsearch.index.query.QueryBuilders.termQuery;
-import static org.elasticsearch.index.query.QueryBuilders.termsQuery;
-import static org.elasticsearch.index.query.QueryBuilders.wrapperQuery;
+import static org.elasticsearch.index.query.QueryBuilders.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasItemInArray;
@@ -43,7 +35,9 @@ import static org.hamcrest.Matchers.hasItemInArray;
  *
  */
 public class MatchedQueriesIT extends ESIntegTestCase {
-    public void testSimpleMatchedQueryFromFilteredQuery() throws Exception {
+
+    @Test
+    public void simpleMatchedQueryFromFilteredQuery() throws Exception {
         createIndex("test");
         ensureGreen();
 
@@ -83,7 +77,8 @@ public class MatchedQueriesIT extends ESIntegTestCase {
         }
     }
 
-    public void testSimpleMatchedQueryFromTopLevelFilter() throws Exception {
+    @Test
+    public void simpleMatchedQueryFromTopLevelFilter() throws Exception {
         createIndex("test");
         ensureGreen();
 
@@ -132,7 +127,8 @@ public class MatchedQueriesIT extends ESIntegTestCase {
         }
     }
 
-    public void testSimpleMatchedQueryFromTopLevelFilterAndFilteredQuery() throws Exception {
+    @Test
+    public void simpleMatchedQueryFromTopLevelFilterAndFilteredQuery() throws Exception {
         createIndex("test");
         ensureGreen();
 
@@ -170,6 +166,7 @@ public class MatchedQueriesIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testIndicesFilterSupportsName() {
         createIndex("test1", "test2");
         ensureGreen();
@@ -208,6 +205,7 @@ public class MatchedQueriesIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testRegExpQuerySupportsName() {
         createIndex("test1");
         ensureGreen();
@@ -229,6 +227,7 @@ public class MatchedQueriesIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testPrefixQuerySupportsName() {
         createIndex("test1");
         ensureGreen();
@@ -250,6 +249,7 @@ public class MatchedQueriesIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testFuzzyQuerySupportsName() {
         createIndex("test1");
         ensureGreen();
@@ -271,6 +271,7 @@ public class MatchedQueriesIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testWildcardQuerySupportsName() {
         createIndex("test1");
         ensureGreen();
@@ -292,6 +293,7 @@ public class MatchedQueriesIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testSpanFirstQuerySupportsName() {
         createIndex("test1");
         ensureGreen();
@@ -316,6 +318,7 @@ public class MatchedQueriesIT extends ESIntegTestCase {
     /**
      * Test case for issue #4361: https://github.com/elasticsearch/elasticsearch/issues/4361
      */
+    @Test
     public void testMatchedWithShould() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -352,6 +355,7 @@ public class MatchedQueriesIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testMatchedWithWrapperQuery() throws Exception {
         createIndex("test");
         ensureGreen();
diff --git a/core/src/test/java/org/elasticsearch/search/morelikethis/MoreLikeThisIT.java b/core/src/test/java/org/elasticsearch/search/morelikethis/MoreLikeThisIT.java
index 9c93f1a..0e70015 100644
--- a/core/src/test/java/org/elasticsearch/search/morelikethis/MoreLikeThisIT.java
+++ b/core/src/test/java/org/elasticsearch/search/morelikethis/MoreLikeThisIT.java
@@ -32,28 +32,21 @@ import org.elasticsearch.index.query.MoreLikeThisQueryBuilder;
 import org.elasticsearch.index.query.MoreLikeThisQueryBuilder.Item;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 
-import static org.elasticsearch.client.Requests.indexAliasesRequest;
-import static org.elasticsearch.client.Requests.indexRequest;
-import static org.elasticsearch.client.Requests.refreshRequest;
+import static org.elasticsearch.index.query.MoreLikeThisQueryBuilder.ids;
+import static org.elasticsearch.client.Requests.*;
 import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_REPLICAS;
 import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
-import static org.elasticsearch.index.query.MoreLikeThisQueryBuilder.ids;
 import static org.elasticsearch.index.query.QueryBuilders.moreLikeThisQuery;
 import static org.elasticsearch.index.query.QueryBuilders.termQuery;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertOrderedSearchHits;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchHits;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertThrows;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.notNullValue;
 
@@ -61,6 +54,8 @@ import static org.hamcrest.Matchers.notNullValue;
  *
  */
 public class MoreLikeThisIT extends ESIntegTestCase {
+
+    @Test
     public void testSimpleMoreLikeThis() throws Exception {
         logger.info("Creating index test");
         assertAcked(prepareCreate("test").addMapping("type1",
@@ -82,6 +77,7 @@ public class MoreLikeThisIT extends ESIntegTestCase {
         assertHitCount(response, 1l);
     }
 
+    @Test
     public void testSimpleMoreLikeOnLongField() throws Exception {
         logger.info("Creating index test");
         assertAcked(prepareCreate("test").addMapping("type1", "some_long", "type=long"));
@@ -101,6 +97,7 @@ public class MoreLikeThisIT extends ESIntegTestCase {
         assertHitCount(response, 0l);
     }
 
+    @Test
     public void testMoreLikeThisWithAliases() throws Exception {
         logger.info("Creating index test");
         assertAcked(prepareCreate("test").addMapping("type1",
@@ -145,6 +142,7 @@ public class MoreLikeThisIT extends ESIntegTestCase {
         assertThat(response.getHits().getAt(0).id(), equalTo("3"));
     }
 
+    @Test
     public void testMoreLikeThisIssue2197() throws Exception {
         Client client = client();
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("bar")
@@ -168,7 +166,8 @@ public class MoreLikeThisIT extends ESIntegTestCase {
         assertThat(response, notNullValue());
     }
 
-    // Issue #2489
+    @Test
+    // See: https://github.com/elasticsearch/elasticsearch/issues/2489
     public void testMoreLikeWithCustomRouting() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("bar")
                 .startObject("properties")
@@ -189,7 +188,8 @@ public class MoreLikeThisIT extends ESIntegTestCase {
         assertThat(response, notNullValue());
     }
 
-    // Issue #3039
+    @Test
+    // See issue: https://github.com/elasticsearch/elasticsearch/issues/3039
     public void testMoreLikeThisIssueRoutingNotSerialized() throws Exception {
         String mapping = XContentFactory.jsonBuilder().startObject().startObject("bar")
                 .startObject("properties")
@@ -211,7 +211,8 @@ public class MoreLikeThisIT extends ESIntegTestCase {
         assertThat(response, notNullValue());
     }
 
-    // Issue #3252
+    @Test
+    // See issue https://github.com/elasticsearch/elasticsearch/issues/3252
     public void testNumericField() throws Exception {
         final String[] numericTypes = new String[]{"byte", "short", "integer", "long"};
         prepareCreate("test").addMapping("type", jsonBuilder()
@@ -271,6 +272,7 @@ public class MoreLikeThisIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 0l);
     }
 
+    @Test
     public void testSimpleMoreLikeInclude() throws Exception {
         logger.info("Creating index test");
         assertAcked(prepareCreate("test").addMapping("type1",
@@ -330,6 +332,7 @@ public class MoreLikeThisIT extends ESIntegTestCase {
         assertHitCount(mltResponse, 3l);
     }
 
+    @Test
     public void testSimpleMoreLikeThisIdsMultipleTypes() throws Exception {
         logger.info("Creating index test");
         int numOfTypes = randomIntBetween(2, 10);
@@ -362,6 +365,7 @@ public class MoreLikeThisIT extends ESIntegTestCase {
         assertHitCount(mltResponse, numOfTypes);
     }
 
+    @Test
     public void testMoreLikeThisMultiValueFields() throws Exception {
         logger.info("Creating the index ...");
         assertAcked(prepareCreate("test")
@@ -394,6 +398,7 @@ public class MoreLikeThisIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testMinimumShouldMatch() throws ExecutionException, InterruptedException {
         logger.info("Creating the index ...");
         assertAcked(prepareCreate("test")
@@ -431,6 +436,7 @@ public class MoreLikeThisIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testMoreLikeThisArtificialDocs() throws Exception {
         int numFields = randomIntBetween(5, 10);
 
@@ -457,6 +463,7 @@ public class MoreLikeThisIT extends ESIntegTestCase {
         assertHitCount(response, 1);
     }
 
+    @Test
     public void testMoreLikeThisMalformedArtificialDocs() throws Exception {
         logger.info("Creating the index ...");
         assertAcked(prepareCreate("test")
@@ -523,6 +530,7 @@ public class MoreLikeThisIT extends ESIntegTestCase {
         assertHitCount(response, 1);
     }
 
+    @Test
     public void testMoreLikeThisUnlike() throws ExecutionException, InterruptedException, IOException {
         createIndex("test");
         ensureGreen();
@@ -570,6 +578,7 @@ public class MoreLikeThisIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testSelectFields() throws IOException, ExecutionException, InterruptedException {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "text", "type=string,analyzer=whitespace", "text1", "type=string,analyzer=whitespace"));
diff --git a/core/src/test/java/org/elasticsearch/search/msearch/SimpleMultiSearchIT.java b/core/src/test/java/org/elasticsearch/search/msearch/SimpleMultiSearchIT.java
index c7454a5..53f7e61 100644
--- a/core/src/test/java/org/elasticsearch/search/msearch/SimpleMultiSearchIT.java
+++ b/core/src/test/java/org/elasticsearch/search/msearch/SimpleMultiSearchIT.java
@@ -22,17 +22,17 @@ package org.elasticsearch.search.msearch;
 import org.elasticsearch.action.search.MultiSearchResponse;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertFirstHit;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.hasId;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
 import static org.hamcrest.Matchers.equalTo;
 
 /**
  */
 public class SimpleMultiSearchIT extends ESIntegTestCase {
-    public void testSimpleMultiSearch() {
+
+    @Test
+    public void simpleMultiSearch() {
         createIndex("test");
         ensureGreen();
         client().prepareIndex("test", "type", "1").setSource("field", "xxx").execute().actionGet();
@@ -43,7 +43,7 @@ public class SimpleMultiSearchIT extends ESIntegTestCase {
                 .add(client().prepareSearch("test").setQuery(QueryBuilders.termQuery("field", "yyy")))
                 .add(client().prepareSearch("test").setQuery(QueryBuilders.matchAllQuery()))
                 .execute().actionGet();
-
+        
         for (MultiSearchResponse.Item item : response) {
            assertNoFailures(item.getResponse());
         }
diff --git a/core/src/test/java/org/elasticsearch/search/nested/SimpleNestedIT.java b/core/src/test/java/org/elasticsearch/search/nested/SimpleNestedIT.java
index 88f0fbc..23f6e6f 100644
--- a/core/src/test/java/org/elasticsearch/search/nested/SimpleNestedIT.java
+++ b/core/src/test/java/org/elasticsearch/search/nested/SimpleNestedIT.java
@@ -36,24 +36,18 @@ import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.sort.SortBuilders;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
-import static org.elasticsearch.index.query.QueryBuilders.boolQuery;
-import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
-import static org.elasticsearch.index.query.QueryBuilders.nestedQuery;
-import static org.elasticsearch.index.query.QueryBuilders.termQuery;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.startsWith;
+import static org.elasticsearch.index.query.QueryBuilders.*;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
+import static org.hamcrest.Matchers.*;
 
 public class SimpleNestedIT extends ESIntegTestCase {
-    public void testSimpleNested() throws Exception {
+
+    @Test
+    public void simpleNested() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", "nested1", "type=nested").addMapping("type2", "nested1", "type=nested"));
         ensureGreen();
 
@@ -162,7 +156,8 @@ public class SimpleNestedIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
     }
 
-    public void testMultiNested() throws Exception {
+    @Test
+    public void multiNested() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties")
                         .startObject("nested1")
@@ -231,9 +226,11 @@ public class SimpleNestedIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().totalHits(), equalTo(0l));
     }
 
+    @Test
     // When IncludeNestedDocsQuery is wrapped in a FilteredQuery then a in-finite loop occurs b/c of a bug in IncludeNestedDocsQuery#advance()
     // This IncludeNestedDocsQuery also needs to be aware of the filter from alias
     public void testDeleteNestedDocsWithAlias() throws Exception {
+
         assertAcked(prepareCreate("test")
                 .setSettings(settingsBuilder().put(indexSettings()).put("index.referesh_interval", -1).build())
                 .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties")
@@ -285,7 +282,9 @@ public class SimpleNestedIT extends ESIntegTestCase {
         assertDocumentCount("test", 6);
     }
 
+    @Test
     public void testExplain() throws Exception {
+
         assertAcked(prepareCreate("test")
                 .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties")
                         .startObject("nested1")
@@ -326,6 +325,7 @@ public class SimpleNestedIT extends ESIntegTestCase {
 //        assertThat(explanation.getDetails()[1].getDescription(), equalTo("Child[1]"));
     }
 
+    @Test
     public void testSimpleNestedSorting() throws Exception {
         assertAcked(prepareCreate("test")
                 .setSettings(settingsBuilder()
@@ -408,7 +408,9 @@ public class SimpleNestedIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().hits()[2].sortValues()[0].toString(), equalTo("2"));
     }
 
-    public void testSimpleNestedSortingWithNestedFilterMissing() throws Exception {
+
+    @Test
+    public void testSimpleNestedSorting_withNestedFilterMissing() throws Exception {
         assertAcked(prepareCreate("test")
                 .setSettings(settingsBuilder()
                         .put(indexSettings())
@@ -508,6 +510,7 @@ public class SimpleNestedIT extends ESIntegTestCase {
         client().prepareClearScroll().addScrollId("_all").get();
     }
 
+    @Test
     public void testSortNestedWithNestedFilter() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", XContentFactory.jsonBuilder().startObject()
@@ -864,7 +867,8 @@ public class SimpleNestedIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getHits()[2].sortValues()[0].toString(), equalTo("3"));
     }
 
-    // Issue #9305
+    @Test
+    // https://github.com/elasticsearch/elasticsearch/issues/9305
     public void testNestedSortingWithNestedFilterAsFilter() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type", jsonBuilder().startObject().startObject("properties")
                 .startObject("officelocation").field("type", "string").endObject()
@@ -1000,6 +1004,7 @@ public class SimpleNestedIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(1).sortValues()[1].toString(), equalTo("fname3"));
     }
 
+    @Test
     public void testCheckFixedBitSetCache() throws Exception {
         boolean loadFixedBitSeLazily = randomBoolean();
         Settings.Builder settingsBuilder = Settings.builder().put(indexSettings())
diff --git a/core/src/test/java/org/elasticsearch/search/preference/SearchPreferenceIT.java b/core/src/test/java/org/elasticsearch/search/preference/SearchPreferenceIT.java
index fa46ea4..a9cd6de 100644
--- a/core/src/test/java/org/elasticsearch/search/preference/SearchPreferenceIT.java
+++ b/core/src/test/java/org/elasticsearch/search/preference/SearchPreferenceIT.java
@@ -24,6 +24,7 @@ import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.client.Client;
 import org.elasticsearch.rest.RestStatus;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -31,14 +32,12 @@ import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.not;
+import static org.hamcrest.Matchers.*;
 
 @ESIntegTestCase.ClusterScope(minNumDataNodes = 2)
 public class SearchPreferenceIT extends ESIntegTestCase {
-    // see #2896
+
+    @Test // see #2896
     public void testStopOneNodePreferenceWithRedState() throws InterruptedException, IOException {
         assertAcked(prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards", cluster().numDataNodes()+2).put("index.number_of_replicas", 0)));
         ensureGreen();
@@ -68,13 +67,14 @@ public class SearchPreferenceIT extends ESIntegTestCase {
         assertThat("_only_local", searchResponse.getFailedShards(), greaterThanOrEqualTo(0));
     }
 
-    public void testNoPreferenceRandom() throws Exception {
+    @Test
+    public void noPreferenceRandom() throws Exception {
         assertAcked(prepareCreate("test").setSettings(
                 //this test needs at least a replica to make sure two consecutive searches go to two different copies of the same data
                 settingsBuilder().put(indexSettings()).put(SETTING_NUMBER_OF_REPLICAS, between(1, maximumNumberOfReplicas()))
         ));
         ensureGreen();
-
+        
         client().prepareIndex("test", "type1").setSource("field1", "value1").execute().actionGet();
         refresh();
 
@@ -87,7 +87,8 @@ public class SearchPreferenceIT extends ESIntegTestCase {
         assertThat(firstNodeId, not(equalTo(secondNodeId)));
     }
 
-    public void testSimplePreference() throws Exception {
+    @Test
+    public void simplePreferenceTests() throws Exception {
         client().admin().indices().prepareCreate("test").setSettings("number_of_replicas=1").get();
         ensureGreen();
 
@@ -120,6 +121,7 @@ public class SearchPreferenceIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
     }
 
+    @Test
     public void testReplicaPreference() throws Exception {
         client().admin().indices().prepareCreate("test").setSettings("number_of_replicas=0").get();
         ensureGreen();
@@ -144,15 +146,11 @@ public class SearchPreferenceIT extends ESIntegTestCase {
         assertThat(resp.getHits().totalHits(), equalTo(1l));
     }
 
+    @Test (expected = IllegalArgumentException.class)
     public void testThatSpecifyingNonExistingNodesReturnsUsefulError() throws Exception {
         createIndex("test");
         ensureGreen();
 
-        try {
-            client().prepareSearch().setQuery(matchAllQuery()).setPreference("_only_node:DOES-NOT-EXIST").execute().actionGet();
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("No data node with id[DOES-NOT-EXIST] found"));
-        }
+        client().prepareSearch().setQuery(matchAllQuery()).setPreference("_only_node:DOES-NOT-EXIST").execute().actionGet();
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/search/query/MultiMatchQueryIT.java b/core/src/test/java/org/elasticsearch/search/query/MultiMatchQueryIT.java
index 235438c..d931147 100644
--- a/core/src/test/java/org/elasticsearch/search/query/MultiMatchQueryIT.java
+++ b/core/src/test/java/org/elasticsearch/search/query/MultiMatchQueryIT.java
@@ -19,17 +19,13 @@
 package org.elasticsearch.search.query;
 
 import com.carrotsearch.randomizedtesting.generators.RandomPicks;
-
 import org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.common.util.set.Sets;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
-import org.elasticsearch.index.query.MatchQueryBuilder;
-import org.elasticsearch.index.query.MultiMatchQueryBuilder;
-import org.elasticsearch.index.query.Operator;
-import org.elasticsearch.index.query.QueryBuilders;
+import org.elasticsearch.index.query.*;
 import org.elasticsearch.index.search.MatchQuery;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.search.SearchHits;
@@ -37,6 +33,7 @@ import org.elasticsearch.search.sort.SortBuilders;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -168,6 +165,7 @@ public class MultiMatchQueryIT extends ESIntegTestCase {
                 .endObject().endObject();
     }
 
+    @Test
     public void testDefaults() throws ExecutionException, InterruptedException {
         MatchQuery.Type type = randomBoolean() ? MatchQueryBuilder.DEFAULT_TYPE : MatchQuery.Type.BOOLEAN;
         SearchResponse searchResponse = client().prepareSearch("test")
@@ -207,6 +205,7 @@ public class MultiMatchQueryIT extends ESIntegTestCase {
         assertFirstHit(searchResponse, hasId("theone"));
     }
 
+    @Test
     public void testPhraseType() {
         SearchResponse searchResponse = client().prepareSearch("test")
                 .setQuery(randomizeType(multiMatchQuery("Man the Ultimate", "full_name_phrase", "first_name_phrase", "last_name_phrase", "category_phrase")
@@ -226,6 +225,7 @@ public class MultiMatchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 2l);
     }
 
+    @Test
     public void testSingleField() throws NoSuchFieldException, IllegalAccessException {
         SearchResponse searchResponse = client().prepareSearch("test")
                 .setQuery(randomizeType(multiMatchQuery("15", "skill"))).get();
@@ -271,6 +271,7 @@ public class MultiMatchQueryIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testCutoffFreq() throws ExecutionException, InterruptedException {
         final long numDocs = client().prepareSearch("test").setSize(0)
                 .setQuery(matchAllQuery()).get().getHits().totalHits();
@@ -330,6 +331,8 @@ public class MultiMatchQueryIT extends ESIntegTestCase {
         assertFirstHit(searchResponse, hasId("theother"));
     }
 
+
+    @Test
     public void testEquivalence() {
 
         final int numDocs = (int) client().prepareSearch("test").setSize(0)
@@ -424,6 +427,7 @@ public class MultiMatchQueryIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testCrossFieldMode() throws ExecutionException, InterruptedException {
         SearchResponse searchResponse = client().prepareSearch("test")
                 .setQuery(randomizeType(multiMatchQuery("captain america", "full_name", "first_name", "last_name")
diff --git a/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java b/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java
index 358122f..b394d10 100644
--- a/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java
+++ b/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java
@@ -28,6 +28,7 @@ import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.index.query.SimpleQueryStringFlag;
 import org.elasticsearch.search.builder.SearchSourceBuilder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Locale;
@@ -51,6 +52,8 @@ import static org.hamcrest.Matchers.equalTo;
  * Tests for the {@code simple_query_string} query
  */
 public class SimpleQueryStringIT extends ESIntegTestCase {
+
+    @Test
     public void testSimpleQueryString() throws ExecutionException, InterruptedException {
         createIndex("test");
         indexRandom(true, false,
@@ -100,6 +103,7 @@ public class SimpleQueryStringIT extends ESIntegTestCase {
         assertSearchHits(searchResponse, "5", "6");
     }
 
+    @Test
     public void testSimpleQueryStringMinimumShouldMatch() throws Exception {
         createIndex("test");
         ensureGreen("test");
@@ -147,6 +151,7 @@ public class SimpleQueryStringIT extends ESIntegTestCase {
         assertSearchHits(searchResponse, "6", "7", "8");
     }
 
+    @Test
     public void testSimpleQueryStringLowercasing() {
         createIndex("test");
         client().prepareIndex("test", "type1", "1").setSource("body", "Professional").get();
@@ -170,6 +175,7 @@ public class SimpleQueryStringIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 0l);
     }
 
+    @Test
     public void testQueryStringLocale() {
         createIndex("test");
         client().prepareIndex("test", "type1", "1").setSource("body", "bılly").get();
@@ -190,6 +196,7 @@ public class SimpleQueryStringIT extends ESIntegTestCase {
         assertSearchHits(searchResponse, "1");
     }
 
+    @Test
     public void testNestedFieldSimpleQueryString() throws IOException {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", jsonBuilder()
@@ -229,6 +236,7 @@ public class SimpleQueryStringIT extends ESIntegTestCase {
         assertSearchHits(searchResponse, "1");
     }
 
+    @Test
     public void testSimpleQueryStringFlags() throws ExecutionException, InterruptedException {
         createIndex("test");
         indexRandom(true,
@@ -280,6 +288,7 @@ public class SimpleQueryStringIT extends ESIntegTestCase {
         assertFirstHit(searchResponse, hasId("4"));
     }
 
+    @Test
     public void testSimpleQueryStringLenient() throws ExecutionException, InterruptedException {
         createIndex("test1", "test2");
         indexRandom(true, client().prepareIndex("test1", "type1", "1").setSource("field", "foo"),
@@ -297,7 +306,7 @@ public class SimpleQueryStringIT extends ESIntegTestCase {
         assertSearchHits(searchResponse, "1");
     }
 
-    // Issue #7967
+    @Test // see: https://github.com/elasticsearch/elasticsearch/issues/7967
     public void testLenientFlagBeingTooLenient() throws Exception {
         indexRandom(true,
                 client().prepareIndex("test", "doc", "1").setSource("num", 1, "body", "foo bar baz"),
@@ -312,6 +321,7 @@ public class SimpleQueryStringIT extends ESIntegTestCase {
         assertSearchHits(resp, "1");
     }
 
+    @Test
     public void testSimpleQueryStringAnalyzeWildcard() throws ExecutionException, InterruptedException, IOException {
         String mapping = XContentFactory.jsonBuilder()
                 .startObject()
@@ -335,4 +345,5 @@ public class SimpleQueryStringIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 1l);
         assertSearchHits(searchResponse, "1");
     }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/search/scroll/DuelScrollIT.java b/core/src/test/java/org/elasticsearch/search/scroll/DuelScrollIT.java
index 720d515..efa26f2 100644
--- a/core/src/test/java/org/elasticsearch/search/scroll/DuelScrollIT.java
+++ b/core/src/test/java/org/elasticsearch/search/scroll/DuelScrollIT.java
@@ -34,6 +34,7 @@ import org.elasticsearch.search.sort.SortBuilder;
 import org.elasticsearch.search.sort.SortBuilders;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 
@@ -45,7 +46,9 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public class DuelScrollIT extends ESIntegTestCase {
-    public void testDuelQueryThenFetch() throws Exception {
+
+    @Test
+    public void testDuel_queryThenFetch() throws Exception {
         TestContext context = create(SearchType.DFS_QUERY_THEN_FETCH, SearchType.QUERY_THEN_FETCH);
 
         SearchResponse control = client().prepareSearch("index")
@@ -100,7 +103,8 @@ public class DuelScrollIT extends ESIntegTestCase {
         clearScroll(scrollId);
     }
 
-    public void testDuelQueryAndFetch() throws Exception {
+    @Test
+    public void testDuel_queryAndFetch() throws Exception {
         // *_QUERY_AND_FETCH search types are tricky: the ordering can be incorrect, since it returns num_shards * (from + size)
         // a subsequent scroll call can return hits that should have been in the hits of the first scroll call.
 
diff --git a/core/src/test/java/org/elasticsearch/search/scroll/SearchScrollIT.java b/core/src/test/java/org/elasticsearch/search/scroll/SearchScrollIT.java
index bb81f28..363721a 100644
--- a/core/src/test/java/org/elasticsearch/search/scroll/SearchScrollIT.java
+++ b/core/src/test/java/org/elasticsearch/search/scroll/SearchScrollIT.java
@@ -19,12 +19,7 @@
 
 package org.elasticsearch.search.scroll;
 
-import org.elasticsearch.action.search.ClearScrollRequest;
-import org.elasticsearch.action.search.ClearScrollResponse;
-import org.elasticsearch.action.search.SearchRequestBuilder;
-import org.elasticsearch.action.search.SearchResponse;
-import org.elasticsearch.action.search.SearchScrollRequest;
-import org.elasticsearch.action.search.SearchType;
+import org.elasticsearch.action.search.*;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.Priority;
 import org.elasticsearch.common.bytes.BytesArray;
@@ -45,32 +40,22 @@ import org.elasticsearch.search.sort.FieldSortBuilder;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.hamcrest.ElasticsearchAssertions;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Map;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
-import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
-import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;
-import static org.elasticsearch.index.query.QueryBuilders.termQuery;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoSearchHits;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchHits;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertThrows;
-import static org.hamcrest.Matchers.contains;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.startsWith;
+import static org.elasticsearch.index.query.QueryBuilders.*;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class SearchScrollIT extends ESIntegTestCase {
+
+    @Test
     public void testSimpleScrollQueryThenFetch() throws Exception {
         client().admin().indices().prepareCreate("test").setSettings(Settings.settingsBuilder().put("index.number_of_shards", 3)).execute().actionGet();
         client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();
@@ -122,6 +107,7 @@ public class SearchScrollIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testSimpleScrollQueryThenFetchSmallSizeUnevenDistribution() throws Exception {
         client().admin().indices().prepareCreate("test").setSettings(Settings.settingsBuilder().put("index.number_of_shards", 3)).execute().actionGet();
         client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();
@@ -195,6 +181,7 @@ public class SearchScrollIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testScrollAndUpdateIndex() throws Exception {
         client().admin().indices().prepareCreate("test").setSettings(Settings.settingsBuilder().put("index.number_of_shards", 5)).execute().actionGet();
         client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();
@@ -239,6 +226,7 @@ public class SearchScrollIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testSimpleScrollQueryThenFetch_clearScrollIds() throws Exception {
         client().admin().indices().prepareCreate("test").setSettings(Settings.settingsBuilder().put("index.number_of_shards", 3)).execute().actionGet();
         client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();
@@ -315,6 +303,7 @@ public class SearchScrollIT extends ESIntegTestCase {
         assertThrows(client().prepareSearchScroll(searchResponse2.getScrollId()).setScroll(TimeValue.timeValueMinutes(2)), RestStatus.NOT_FOUND);
     }
 
+    @Test
     public void testClearNonExistentScrollId() throws Exception {
         createIndex("idx");
         ClearScrollResponse response = client().prepareClearScroll()
@@ -328,6 +317,7 @@ public class SearchScrollIT extends ESIntegTestCase {
         assertToXContentResponse(response, true, response.getNumFreed());
     }
 
+    @Test
     public void testClearIllegalScrollId() throws Exception {
         createIndex("idx");
         try {
@@ -350,7 +340,8 @@ public class SearchScrollIT extends ESIntegTestCase {
         }
     }
 
-    public void testSimpleScrollQueryThenFetchClearAllScrollIds() throws Exception {
+    @Test
+    public void testSimpleScrollQueryThenFetch_clearAllScrollIds() throws Exception {
         client().admin().indices().prepareCreate("test").setSettings(Settings.settingsBuilder().put("index.number_of_shards", 3)).execute().actionGet();
         client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();
 
@@ -449,6 +440,7 @@ public class SearchScrollIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testThatNonExistingScrollIdReturnsCorrectException() throws Exception {
         client().prepareIndex("index", "type", "1").setSource("field", "value").execute().get();
         refresh();
@@ -462,6 +454,7 @@ public class SearchScrollIT extends ESIntegTestCase {
         assertThrows(internalCluster().transportClient().prepareSearchScroll(searchResponse.getScrollId()), RestStatus.NOT_FOUND);
     }
 
+    @Test
     public void testStringSortMissingAscTerminates() throws Exception {
         assertAcked(prepareCreate("test")
                 .setSettings(Settings.settingsBuilder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0))
@@ -495,6 +488,7 @@ public class SearchScrollIT extends ESIntegTestCase {
         assertThat(response.getHits().getHits().length, equalTo(0));
     }
 
+    @Test
     public void testParseSearchScrollRequest() throws Exception {
         BytesReference content = XContentFactory.jsonBuilder()
             .startObject()
@@ -509,6 +503,7 @@ public class SearchScrollIT extends ESIntegTestCase {
         assertThat(searchScrollRequest.scroll().keepAlive(), equalTo(TimeValue.parseTimeValue("1m", null, "scroll")));
     }
 
+    @Test
     public void testParseSearchScrollRequestWithInvalidJsonThrowsException() throws Exception {
         SearchScrollRequest searchScrollRequest = new SearchScrollRequest();
         try {
@@ -520,6 +515,7 @@ public class SearchScrollIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testParseSearchScrollRequestWithUnknownParamThrowsException() throws Exception {
         SearchScrollRequest searchScrollRequest = new SearchScrollRequest();
         BytesReference invalidContent = XContentFactory.jsonBuilder().startObject()
@@ -536,6 +532,7 @@ public class SearchScrollIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testParseClearScrollRequest() throws Exception {
         BytesReference content = XContentFactory.jsonBuilder().startObject()
             .array("scroll_id", "value_1", "value_2")
@@ -545,6 +542,7 @@ public class SearchScrollIT extends ESIntegTestCase {
         assertThat(clearScrollRequest.scrollIds(), contains("value_1", "value_2"));
     }
 
+    @Test
     public void testParseClearScrollRequestWithInvalidJsonThrowsException() throws Exception {
         ClearScrollRequest clearScrollRequest = new ClearScrollRequest();
 
@@ -557,6 +555,7 @@ public class SearchScrollIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testParseClearScrollRequestWithUnknownParamThrowsException() throws Exception {
         BytesReference invalidContent = XContentFactory.jsonBuilder().startObject()
             .array("scroll_id", "value_1", "value_2")
diff --git a/core/src/test/java/org/elasticsearch/search/scroll/SearchScrollWithFailingNodesIT.java b/core/src/test/java/org/elasticsearch/search/scroll/SearchScrollWithFailingNodesIT.java
index 96f2e23..a037a6d 100644
--- a/core/src/test/java/org/elasticsearch/search/scroll/SearchScrollWithFailingNodesIT.java
+++ b/core/src/test/java/org/elasticsearch/search/scroll/SearchScrollWithFailingNodesIT.java
@@ -25,6 +25,7 @@ import org.elasticsearch.cluster.routing.allocation.decider.ShardsLimitAllocatio
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -33,14 +34,13 @@ import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAllSuccessful;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.lessThan;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0, numClientNodes = 0)
 public class SearchScrollWithFailingNodesIT extends ESIntegTestCase {
+
     @Override
     protected int numberOfShards() {
         return 2;
@@ -51,6 +51,7 @@ public class SearchScrollWithFailingNodesIT extends ESIntegTestCase {
         return 0;
     }
 
+    @Test
     public void testScanScrollWithShardExceptions() throws Exception {
         internalCluster().startNode();
         internalCluster().startNode();
diff --git a/core/src/test/java/org/elasticsearch/search/sort/SortParserTests.java b/core/src/test/java/org/elasticsearch/search/sort/SortParserTests.java
index e39fd81..84295b7 100644
--- a/core/src/test/java/org/elasticsearch/search/sort/SortParserTests.java
+++ b/core/src/test/java/org/elasticsearch/search/sort/SortParserTests.java
@@ -17,8 +17,10 @@
  * under the License.
  */
 
+
 package org.elasticsearch.search.sort;
 
+
 import org.elasticsearch.common.geo.GeoPoint;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.XContentBuilder;
@@ -27,10 +29,13 @@ import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.index.IndexService;
 import org.elasticsearch.test.ESSingleNodeTestCase;
 import org.elasticsearch.test.TestSearchContext;
+import org.junit.Test;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 
 public class SortParserTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testGeoDistanceSortParserManyPointsNoException() throws Exception {
         XContentBuilder mapping = jsonBuilder();
         mapping.startObject().startObject("type").startObject("properties").startObject("location").field("type", "geo_point").endObject().endObject().endObject().endObject();
diff --git a/core/src/test/java/org/elasticsearch/search/source/SourceFetchingIT.java b/core/src/test/java/org/elasticsearch/search/source/SourceFetchingIT.java
index 76086da..d6a8e86 100644
--- a/core/src/test/java/org/elasticsearch/search/source/SourceFetchingIT.java
+++ b/core/src/test/java/org/elasticsearch/search/source/SourceFetchingIT.java
@@ -21,12 +21,15 @@ package org.elasticsearch.search.source;
 
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.notNullValue;
 import static org.hamcrest.Matchers.nullValue;
 import static org.hamcrest.core.IsEqual.equalTo;
 
 public class SourceFetchingIT extends ESIntegTestCase {
+
+    @Test
     public void testSourceDefaultBehavior() {
         createIndex("test");
         ensureGreen();
@@ -45,6 +48,7 @@ public class SourceFetchingIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testSourceFiltering() {
         createIndex("test");
         ensureGreen();
@@ -78,6 +82,7 @@ public class SourceFetchingIT extends ESIntegTestCase {
      * Test Case for #5132: Source filtering with wildcards broken when given multiple patterns
      * https://github.com/elasticsearch/elasticsearch/issues/5132
      */
+    @Test
     public void testSourceWithWildcardFiltering() {
         createIndex("test");
         ensureGreen();
diff --git a/core/src/test/java/org/elasticsearch/search/stats/SearchStatsUnitTests.java b/core/src/test/java/org/elasticsearch/search/stats/SearchStatsUnitTests.java
index 76f20c8..7c1b443 100644
--- a/core/src/test/java/org/elasticsearch/search/stats/SearchStatsUnitTests.java
+++ b/core/src/test/java/org/elasticsearch/search/stats/SearchStatsUnitTests.java
@@ -22,11 +22,14 @@ package org.elasticsearch.search.stats;
 import org.elasticsearch.index.search.stats.SearchStats;
 import org.elasticsearch.index.search.stats.SearchStats.Stats;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.HashMap;
 import java.util.Map;
 
 public class SearchStatsUnitTests extends ESTestCase {
+
+    @Test
     // https://github.com/elasticsearch/elasticsearch/issues/7644
     public void testShardLevelSearchGroupStats() throws Exception {
         // let's create two dummy search stats with groups
diff --git a/core/src/test/java/org/elasticsearch/search/suggest/CompletionSuggestSearchIT.java b/core/src/test/java/org/elasticsearch/search/suggest/CompletionSuggestSearchIT.java
index 96eba93..31e2544 100644
--- a/core/src/test/java/org/elasticsearch/search/suggest/CompletionSuggestSearchIT.java
+++ b/core/src/test/java/org/elasticsearch/search/suggest/CompletionSuggestSearchIT.java
@@ -20,10 +20,9 @@ package org.elasticsearch.search.suggest;
 
 import com.carrotsearch.hppc.ObjectLongHashMap;
 import com.carrotsearch.randomizedtesting.generators.RandomStrings;
-
 import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
 import org.elasticsearch.action.admin.indices.mapping.put.PutMappingResponse;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeResponse;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeResponse;
 import org.elasticsearch.action.admin.indices.segments.IndexShardSegments;
 import org.elasticsearch.action.admin.indices.segments.ShardSegments;
 import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;
@@ -47,6 +46,7 @@ import org.elasticsearch.search.suggest.completion.CompletionSuggestion;
 import org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder;
 import org.elasticsearch.search.suggest.completion.CompletionSuggestionFuzzyBuilder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -65,22 +65,17 @@ import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAllSuccessful;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.hasItem;
-import static org.hamcrest.Matchers.hasItems;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.*;
 
 @SuppressCodecs("*") // requires custom completion format
 public class CompletionSuggestSearchIT extends ESIntegTestCase {
+
     private final String INDEX = RandomStrings.randomAsciiOfLength(getRandom(), 10).toLowerCase(Locale.ROOT);
     private final String TYPE = RandomStrings.randomAsciiOfLength(getRandom(), 10).toLowerCase(Locale.ROOT);
     private final String FIELD = RandomStrings.randomAsciiOfLength(getRandom(), 10).toLowerCase(Locale.ROOT);
     private final CompletionMappingBuilder completionMappingBuilder = new CompletionMappingBuilder();
 
+    @Test
     public void testSimple() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
         String[][] input = {{"Foo Fighters"}, {"Foo Fighters"}, {"Foo Fighters"}, {"Foo Fighters"},
@@ -104,6 +99,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestionsNotInOrder("t", "The Prodigy", "Turbonegro", "Turbonegro Get it on", "The Prodigy Firestarter");
     }
 
+    @Test
     public void testSuggestFieldWithPercolateApi() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
         String[][] input = {{"Foo Fighters"}, {"Foo Fighters"}, {"Foo Fighters"}, {"Foo Fighters"},
@@ -133,6 +129,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertThat(response.getCount(), equalTo(1l));
     }
 
+    @Test
     public void testBasicPrefixSuggestion() throws Exception {
         completionMappingBuilder.payloads(true);
         createIndexAndMapping(completionMappingBuilder);
@@ -145,6 +142,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testThatWeightsAreWorking() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
 
@@ -164,6 +162,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions("the", "the", "The the", "The Verve", "The Prodigy");
     }
 
+    @Test
     public void testThatWeightMustBeAnInteger() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
 
@@ -180,6 +179,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testThatWeightCanBeAString() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
 
@@ -206,6 +206,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
     }
 
 
+    @Test
     public void testThatWeightMustNotBeANonNumberString() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
 
@@ -222,6 +223,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testThatWeightAsStringMustBeInt() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
 
@@ -239,6 +241,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testThatInputCanBeAStringInsteadOfAnArray() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
 
@@ -254,6 +257,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions("f", "Boo Fighters");
     }
 
+    @Test
     public void testThatPayloadsAreArbitraryJsonObjects() throws Exception {
         completionMappingBuilder.payloads(true);
         createIndexAndMapping(completionMappingBuilder);
@@ -287,6 +291,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertThat(listValues, hasItems("spam", "eggs"));
     }
 
+    @Test
     public void testPayloadAsNumeric() throws Exception {
         completionMappingBuilder.payloads(true);
         createIndexAndMapping(completionMappingBuilder);
@@ -314,6 +319,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertThat(prefixOption.getPayloadAsLong(), equalTo(1l));
     }
 
+    @Test
     public void testPayloadAsString() throws Exception {
         completionMappingBuilder.payloads(true);
         createIndexAndMapping(completionMappingBuilder);
@@ -341,24 +347,21 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertThat(prefixOption.getPayloadAsString(), equalTo("test"));
     }
 
+    @Test(expected = MapperException.class)
     public void testThatExceptionIsThrownWhenPayloadsAreDisabledButInIndexRequest() throws Exception {
         completionMappingBuilder.payloads(false);
         createIndexAndMapping(completionMappingBuilder);
 
-        try {
-            client().prepareIndex(INDEX, TYPE, "1").setSource(jsonBuilder()
-                    .startObject().startObject(FIELD)
-                    .startArray("input").value("Foo Fighters").endArray()
-                    .field("output", "Boo Fighters")
-                    .startArray("payload").value("spam").value("eggs").endArray()
-                    .endObject().endObject()
-            ).get();
-            fail("Expected MapperException");
-        } catch (MapperException e) {
-            assertThat(e.getMessage(), is("failed to parse"));
-        }
+        client().prepareIndex(INDEX, TYPE, "1").setSource(jsonBuilder()
+                .startObject().startObject(FIELD)
+                .startArray("input").value("Foo Fighters").endArray()
+                .field("output", "Boo Fighters")
+                .startArray("payload").value("spam").value("eggs").endArray()
+                .endObject().endObject()
+        ).get();
     }
 
+    @Test
     public void testDisabledPreserveSeparators() throws Exception {
         completionMappingBuilder.preserveSeparators(false);
         createIndexAndMapping(completionMappingBuilder);
@@ -382,6 +385,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions("foof", "Foof", "Foo Fighters");
     }
 
+    @Test
     public void testEnabledPreserveSeparators() throws Exception {
         completionMappingBuilder.preserveSeparators(true);
         createIndexAndMapping(completionMappingBuilder);
@@ -403,6 +407,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions("foof", "Foof");
     }
 
+    @Test
     public void testThatMultipleInputsAreSupported() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
 
@@ -419,6 +424,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions("fu", "The incredible Foo Fighters");
     }
 
+    @Test
     public void testThatShortSyntaxIsWorking() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
 
@@ -434,6 +440,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions("f", "Firestarter");
     }
 
+    @Test
     public void testThatDisablingPositionIncrementsWorkForStopwords() throws Exception {
         // analyzer which removes stopwords... so may not be the simple one
         completionMappingBuilder.searchAnalyzer("classic").indexAnalyzer("classic").preservePositionIncrements(false);
@@ -450,6 +457,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions("b", "The Beatles");
     }
 
+    @Test
     public void testThatSynonymsWork() throws Exception {
         Settings.Builder settingsBuilder = settingsBuilder()
                 .put("analysis.analyzer.suggest_analyzer_synonyms.type", "custom")
@@ -472,6 +480,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions("r", "Foo Fighters");
     }
 
+    @Test
     public void testThatUpgradeToMultiFieldTypeWorks() throws Exception {
         final XContentBuilder mapping = jsonBuilder()
                 .startObject()
@@ -515,6 +524,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions(afterReindexingResponse, "suggs", "Foo Fighters");
     }
 
+    @Test
     public void testThatUpgradeToMultiFieldsWorks() throws Exception {
         final XContentBuilder mapping = jsonBuilder()
                 .startObject()
@@ -557,6 +567,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions(afterReindexingResponse, "suggs", "Foo Fighters");
     }
 
+    @Test
     public void testThatFuzzySuggesterWorks() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
 
@@ -579,6 +590,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions(suggestResponse, false, "foo", "Nirvana");
     }
 
+    @Test
     public void testThatFuzzySuggesterSupportsEditDistances() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
 
@@ -603,6 +615,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions(suggestResponse, false, "foo", "Nirvana");
     }
 
+    @Test
     public void testThatFuzzySuggesterSupportsTranspositions() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
 
@@ -625,6 +638,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions(suggestResponse, false, "foo", "Nirvana");
     }
 
+    @Test
     public void testThatFuzzySuggesterSupportsMinPrefixLength() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
 
@@ -647,6 +661,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions(suggestResponse, false, "foo", "Nirvana");
     }
 
+    @Test
     public void testThatFuzzySuggesterSupportsNonPrefixLength() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
 
@@ -669,6 +684,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions(suggestResponse, false, "foo", "Nirvana");
     }
 
+    @Test
     public void testThatFuzzySuggesterIsUnicodeAware() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
 
@@ -698,6 +714,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions(suggestResponse, false, "foo", "ööööö");
     }
 
+    @Test
     public void testThatStatsAreWorking() throws Exception {
         String otherField = "testOtherField";
 
@@ -739,6 +756,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertThat(regexSizeInBytes, is(totalSizeInBytes));
     }
 
+    @Test
     public void testThatSortingOnCompletionFieldReturnsUsefulException() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
 
@@ -758,6 +776,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testThatSuggestStopFilterWorks() throws Exception {
         Settings.Builder settingsBuilder = settingsBuilder()
                 .put("index.analysis.analyzer.stoptest.tokenizer", "standard")
@@ -798,19 +817,15 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         assertSuggestions("feed the t");
     }
 
+    @Test(expected = MapperParsingException.class)
     public void testThatIndexingInvalidFieldsInCompletionFieldResultsInException() throws Exception {
         CompletionMappingBuilder completionMappingBuilder = new CompletionMappingBuilder();
         createIndexAndMapping(completionMappingBuilder);
 
-        try {
-            client().prepareIndex(INDEX, TYPE, "1").setSource(jsonBuilder()
-                    .startObject().startObject(FIELD)
-                    .startArray("FRIGGININVALID").value("Nirvana").endArray()
-                    .endObject().endObject()).get();
-            fail("Expected MapperParsingException");
-        } catch (MapperParsingException e) {
-            assertThat(e.getMessage(), containsString("failed to parse"));
-        }
+        client().prepareIndex(INDEX, TYPE, "1").setSource(jsonBuilder()
+                .startObject().startObject(FIELD)
+                .startArray("FRIGGININVALID").value("Nirvana").endArray()
+                .endObject().endObject()).get();
     }
 
 
@@ -934,11 +949,11 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         if (optimize) {
             // make sure merging works just fine
             client().admin().indices().prepareFlush(INDEX).execute().actionGet();
-            client().admin().indices().prepareOptimize(INDEX).setMaxNumSegments(randomIntBetween(1, 5)).get();
+            client().admin().indices().prepareForceMerge(INDEX).setMaxNumSegments(randomIntBetween(1, 5)).get();
         }
     }
 
-    // see #3555
+    @Test // see #3555
     public void testPrunedSegments() throws IOException {
         createIndexAndMappingAndSettings(settingsBuilder().put(SETTING_NUMBER_OF_SHARDS, 1).put(SETTING_NUMBER_OF_REPLICAS, 0).build(), completionMappingBuilder);
 
@@ -952,7 +967,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
                 .field("somefield", "somevalue")
                 .endObject()
         ).get(); // we have 2 docs in a segment...
-        OptimizeResponse actionGet = client().admin().indices().prepareOptimize().setFlush(true).setMaxNumSegments(1).execute().actionGet();
+        ForceMergeResponse actionGet = client().admin().indices().prepareForceMerge().setFlush(true).setMaxNumSegments(1).execute().actionGet();
         assertAllSuccessful(actionGet);
         refresh();
         // update the first one and then merge.. the target segment will have no value in FIELD
@@ -961,7 +976,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
                 .field("somefield", "somevalue")
                 .endObject()
         ).get();
-        actionGet = client().admin().indices().prepareOptimize().setFlush(true).setMaxNumSegments(1).execute().actionGet();
+        actionGet = client().admin().indices().prepareForceMerge().setFlush(true).setMaxNumSegments(1).execute().actionGet();
         assertAllSuccessful(actionGet);
         refresh();
 
@@ -975,6 +990,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testMaxFieldLength() throws IOException {
         client().admin().indices().prepareCreate(INDEX).get();
         ensureGreen();
@@ -1012,6 +1028,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     // see #3596
     public void testVeryLongInput() throws IOException {
         assertAcked(client().admin().indices().prepareCreate(INDEX).addMapping(TYPE, jsonBuilder().startObject()
@@ -1034,6 +1051,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
     }
 
     // see #3648
+    @Test(expected = MapperParsingException.class)
     public void testReservedChars() throws IOException {
         assertAcked(client().admin().indices().prepareCreate(INDEX).addMapping(TYPE, jsonBuilder().startObject()
                 .startObject(TYPE).startObject("properties")
@@ -1045,20 +1063,15 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
         ensureYellow();
         // can cause stack overflow without the default max_input_length
         String string = "foo" + (char) 0x00 + "bar";
-        try {
-            client().prepareIndex(INDEX, TYPE, "1").setSource(jsonBuilder()
-                    .startObject().startObject(FIELD)
-                    .startArray("input").value(string).endArray()
-                    .field("output", "foobar")
-                    .endObject().endObject()
-            ).setRefresh(true).get();
-            fail("Expected MapperParsingException");
-        } catch (MapperParsingException e) {
-            assertThat(e.getMessage(), containsString("failed to parse"));
-        }
+        client().prepareIndex(INDEX, TYPE, "1").setSource(jsonBuilder()
+                .startObject().startObject(FIELD)
+                .startArray("input").value(string).endArray()
+                .field("output", "foobar")
+                .endObject().endObject()
+        ).setRefresh(true).get();
     }
 
-    // see #5930
+    @Test // see #5930
     public void testIssue5930() throws IOException {
         assertAcked(client().admin().indices().prepareCreate(INDEX).addMapping(TYPE, jsonBuilder().startObject()
                 .startObject(TYPE).startObject("properties")
@@ -1086,6 +1099,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
     }
 
     // see issue #6399
+    @Test
     public void testIndexingUnrelatedNullValue() throws Exception {
         String mapping = jsonBuilder()
                 .startObject()
@@ -1113,6 +1127,7 @@ public class CompletionSuggestSearchIT extends ESIntegTestCase {
             // make sure that the exception has the name of the field causing the error
             assertTrue(e.getDetailedMessage().contains(FIELD));
         }
+
     }
 
     private static String replaceReservedChars(String input, char replacement) {
diff --git a/core/src/test/java/org/elasticsearch/search/suggest/CompletionTokenStreamTests.java b/core/src/test/java/org/elasticsearch/search/suggest/CompletionTokenStreamTests.java
index f2e8364..d7280c8 100644
--- a/core/src/test/java/org/elasticsearch/search/suggest/CompletionTokenStreamTests.java
+++ b/core/src/test/java/org/elasticsearch/search/suggest/CompletionTokenStreamTests.java
@@ -19,18 +19,14 @@
 package org.elasticsearch.search.suggest;
 
 import org.apache.lucene.analysis.MockTokenizer;
+import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.TokenStream;
-import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.SimpleAnalyzer;
 import org.apache.lucene.analysis.synonym.SynonymFilter;
 import org.apache.lucene.analysis.synonym.SynonymMap;
 import org.apache.lucene.analysis.synonym.SynonymMap.Builder;
-import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
-import org.apache.lucene.analysis.tokenattributes.PayloadAttribute;
-import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
-import org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute;
-import org.apache.lucene.analysis.tokenattributes.TypeAttribute;
+import org.apache.lucene.analysis.tokenattributes.*;
 import org.apache.lucene.search.suggest.analyzing.XAnalyzingSuggester;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.CharsRef;
@@ -38,17 +34,19 @@ import org.apache.lucene.util.IntsRef;
 import org.elasticsearch.search.suggest.completion.CompletionTokenStream;
 import org.elasticsearch.search.suggest.completion.CompletionTokenStream.ByteTermAttribute;
 import org.elasticsearch.test.ESTokenStreamTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.StringReader;
 import java.util.Set;
 
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 
 public class CompletionTokenStreamTests extends ESTokenStreamTestCase {
+
     final XAnalyzingSuggester suggester = new XAnalyzingSuggester(new SimpleAnalyzer());
 
+    @Test
     public void testSuggestTokenFilter() throws Exception {
         Tokenizer tokenStream = new MockTokenizer(MockTokenizer.WHITESPACE, true);
         tokenStream.setReader(new StringReader("mykeyword"));
@@ -62,6 +60,7 @@ public class CompletionTokenStreamTests extends ESTokenStreamTestCase {
         assertTokenStreamContents(suggestTokenStream, new String[] {"mykeyword"}, null, null, new String[] {"Surface keyword|friggin payload|10"}, new int[] { 1 }, null, null);
     }
 
+    @Test
     public void testSuggestTokenFilterWithSynonym() throws Exception {
         Builder builder = new SynonymMap.Builder(true);
         builder.add(new CharsRef("mykeyword"), new CharsRef("mysynonym"), true);
@@ -80,6 +79,7 @@ public class CompletionTokenStreamTests extends ESTokenStreamTestCase {
         assertTokenStreamContents(suggestTokenStream, new String[] {"mysynonym", "mykeyword"}, null, null, new String[] {"Surface keyword|friggin payload|10", "Surface keyword|friggin payload|10"}, new int[] { 2, 0 }, null, null);
     }
 
+    @Test
     public void testValidNumberOfExpansions() throws IOException {
         Builder builder = new SynonymMap.Builder(true);
         for (int i = 0; i < 256; i++) {
@@ -93,7 +93,7 @@ public class CompletionTokenStreamTests extends ESTokenStreamTestCase {
         MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, true);
         tokenizer.setReader(new StringReader(valueBuilder.toString()));
         SynonymFilter filter = new SynonymFilter(tokenizer, builder.build(), true);
-
+       
         TokenStream suggestTokenStream = new CompletionTokenStream(filter, new BytesRef("Surface keyword|friggin payload|10"), new CompletionTokenStream.ToFiniteStrings() {
             @Override
             public Set<IntsRef> toFiniteStrings(TokenStream stream) throws IOException {
@@ -101,7 +101,7 @@ public class CompletionTokenStreamTests extends ESTokenStreamTestCase {
                 return finiteStrings;
             }
         });
-
+        
         suggestTokenStream.reset();
         ByteTermAttribute attr = suggestTokenStream.addAttribute(ByteTermAttribute.class);
         PositionIncrementAttribute posAttr = suggestTokenStream.addAttribute(PositionIncrementAttribute.class);
@@ -118,7 +118,8 @@ public class CompletionTokenStreamTests extends ESTokenStreamTestCase {
         assertEquals(count, maxPos);
 
     }
-
+    
+    @Test(expected = IllegalArgumentException.class)
     public void testInValidNumberOfExpansions() throws IOException {
         Builder builder = new SynonymMap.Builder(true);
         for (int i = 0; i < 256; i++) {
@@ -132,7 +133,7 @@ public class CompletionTokenStreamTests extends ESTokenStreamTestCase {
         MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, true);
         tokenizer.setReader(new StringReader(valueBuilder.toString()));
         SynonymFilter filter = new SynonymFilter(tokenizer, builder.build(), true);
-
+       
         TokenStream suggestTokenStream = new CompletionTokenStream(filter, new BytesRef("Surface keyword|friggin payload|10"), new CompletionTokenStream.ToFiniteStrings() {
             @Override
             public Set<IntsRef> toFiniteStrings(TokenStream stream) throws IOException {
@@ -140,18 +141,14 @@ public class CompletionTokenStreamTests extends ESTokenStreamTestCase {
                 return finiteStrings;
             }
         });
-
+        
         suggestTokenStream.reset();
-        try {
-            suggestTokenStream.incrementToken();
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("Only <= 256 finite strings are supported"));
-        } finally {
-            suggestTokenStream.close();
-        }
+        suggestTokenStream.incrementToken();
+        suggestTokenStream.close();
+
     }
 
+    @Test
     public void testSuggestTokenFilterProperlyDelegateInputStream() throws Exception {
         Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, true);
         tokenizer.setReader(new StringReader("mykeyword"));
diff --git a/core/src/test/java/org/elasticsearch/search/suggest/ContextSuggestSearchIT.java b/core/src/test/java/org/elasticsearch/search/suggest/ContextSuggestSearchIT.java
index 8deeb0d..48048b7 100644
--- a/core/src/test/java/org/elasticsearch/search/suggest/ContextSuggestSearchIT.java
+++ b/core/src/test/java/org/elasticsearch/search/suggest/ContextSuggestSearchIT.java
@@ -19,6 +19,7 @@
 package org.elasticsearch.search.suggest;
 
 import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
+
 import org.apache.lucene.util.XGeoHashUtils;
 import org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;
 import org.elasticsearch.action.suggest.SuggestRequest;
@@ -39,6 +40,7 @@ import org.elasticsearch.search.suggest.context.ContextBuilder;
 import org.elasticsearch.search.suggest.context.ContextMapping;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -54,7 +56,6 @@ import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFa
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSuggestion;
 import static org.elasticsearch.test.hamcrest.ElasticsearchGeoAssertions.assertDistance;
 import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.is;
 
 @SuppressCodecs("*") // requires custom completion format
 public class ContextSuggestSearchIT extends ESIntegTestCase {
@@ -82,6 +83,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
             { "Smythe, Alistair", "Alistair Smythe", "Alistair" }, { "Smythe, Spencer", "Spencer Smythe", "Spencer" },
             { "Whitemane, Aelfyre", "Aelfyre Whitemane", "Aelfyre" }, { "Whitemane, Kofi", "Kofi Whitemane", "Kofi" } };
 
+    @Test
     public void testBasicGeo() throws Exception {
         assertAcked(prepareCreate(INDEX).addMapping(TYPE, createMapping(TYPE, ContextBuilder.location("st").precision("5km").neighbors(true))));
         ensureYellow();
@@ -107,18 +109,19 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         client().prepareIndex(INDEX, TYPE, "2").setSource(source2).execute().actionGet();
 
         client().admin().indices().prepareRefresh(INDEX).get();
-
+        
         String suggestionName = randomAsciiOfLength(10);
         CompletionSuggestionBuilder context = SuggestBuilders.completionSuggestion(suggestionName).field(FIELD).text("h").size(10)
                 .addGeoLocation("st", 52.52, 13.4);
-
+        
         SuggestRequestBuilder suggestionRequest = client().prepareSuggest(INDEX).addSuggestion(context);
         SuggestResponse suggestResponse = suggestionRequest.execute().actionGet();
-
+        
         assertEquals(suggestResponse.getSuggest().size(), 1);
         assertEquals("Hotel Amsterdam in Berlin", suggestResponse.getSuggest().getSuggestion(suggestionName).iterator().next().getOptions().iterator().next().getText().string());
     }
-
+    
+    @Test
     public void testMultiLevelGeo() throws Exception {
         assertAcked(prepareCreate(INDEX).addMapping(TYPE, createMapping(TYPE, ContextBuilder.location("st")
                 .precision(1)
@@ -147,7 +150,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         client().prepareIndex(INDEX, TYPE, "1").setSource(source1).execute().actionGet();
 
         client().admin().indices().prepareRefresh(INDEX).get();
-
+        
         for (int precision = 1; precision <= 12; precision++) {
             String suggestionName = randomAsciiOfLength(10);
             CompletionSuggestionBuilder context = new CompletionSuggestionBuilder(suggestionName).field(FIELD).text("h").size(10)
@@ -157,10 +160,11 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
             SuggestResponse suggestResponse = suggestionRequest.execute().actionGet();
             assertEquals(suggestResponse.getSuggest().size(), 1);
             assertEquals("Hotel Amsterdam in Berlin", suggestResponse.getSuggest().getSuggestion(suggestionName).iterator().next()
-                    .getOptions().iterator().next().getText().string());
+                    .getOptions().iterator().next().getText().string()); 
         }
     }
 
+    @Test
     public void testMappingIdempotency() throws Exception {
         List<Integer> precisions = new ArrayList<>();
         for (int i = 0; i < randomIntBetween(4, 12); i++) {
@@ -195,7 +199,10 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         assertAcked(client().admin().indices().preparePutMapping(INDEX).setType(TYPE).setSource(mapping.string()).get());
     }
 
+
+    @Test
     public void testGeoField() throws Exception {
+
         XContentBuilder mapping = jsonBuilder();
         mapping.startObject();
         mapping.startObject(TYPE);
@@ -242,17 +249,18 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         client().prepareIndex(INDEX, TYPE, "2").setSource(source2).execute().actionGet();
 
         refresh();
-
+        
         String suggestionName = randomAsciiOfLength(10);
         CompletionSuggestionBuilder context = SuggestBuilders.completionSuggestion(suggestionName).field(FIELD).text("h").size(10)
                 .addGeoLocation("st", 52.52, 13.4);
         SuggestRequestBuilder suggestionRequest = client().prepareSuggest(INDEX).addSuggestion(context);
         SuggestResponse suggestResponse = suggestionRequest.execute().actionGet();
-
+        
         assertEquals(suggestResponse.getSuggest().size(), 1);
         assertEquals("Hotel Amsterdam in Berlin", suggestResponse.getSuggest().getSuggestion(suggestionName).iterator().next().getOptions().iterator().next().getText().string());
     }
-
+    
+    @Test
     public void testSimpleGeo() throws Exception {
         String reinickendorf = "u337p3mp11e2";
         String pankow = "u33e0cyyjur4";
@@ -307,6 +315,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         assertGeoSuggestionsInRange(treptow, "pizza", precision);
     }
 
+    @Test
     public void testSimplePrefix() throws Exception {
         assertAcked(prepareCreate(INDEX).addMapping(TYPE, createMapping(TYPE, ContextBuilder.category("st"))));
         ensureYellow();
@@ -332,6 +341,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         assertPrefixSuggestions(2, "w", "Whitemane, Kofi");
     }
 
+    @Test
     public void testTypeCategoryIsActuallyCalledCategory() throws Exception {
         XContentBuilder mapping = jsonBuilder();
         mapping.startObject().startObject(TYPE).startObject("properties")
@@ -387,6 +397,8 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         }
     }
 
+
+    @Test
     public void testBasic() throws Exception {
         assertAcked(prepareCreate(INDEX).addMapping(TYPE, createMapping(TYPE, false, ContextBuilder.reference("st", "_type"), ContextBuilder.reference("nd", "_type"))));
         ensureYellow();
@@ -403,6 +415,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         assertDoubleFieldSuggestions(TYPE, TYPE, "m", "my hotel");
     }
 
+    @Test
     public void testSimpleField() throws Exception {
         assertAcked(prepareCreate(INDEX).addMapping(TYPE, createMapping(TYPE, ContextBuilder.reference("st", "category"))));
         ensureYellow();
@@ -429,7 +442,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
 
     }
 
-    // see issue #10987
+    @Test // see issue #10987
     public void testEmptySuggestion() throws Exception {
         String mapping = jsonBuilder()
                 .startObject()
@@ -457,6 +470,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testMultiValueField() throws Exception {
         assertAcked(prepareCreate(INDEX).addMapping(TYPE, createMapping(TYPE, ContextBuilder.reference("st", "category"))));
         ensureYellow();
@@ -482,6 +496,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         assertFieldSuggestions("2", "w", "Whitemane, Kofi");
     }
 
+    @Test
     public void testMultiContext() throws Exception {
         assertAcked(prepareCreate(INDEX).addMapping(TYPE, createMapping(TYPE, ContextBuilder.reference("st", "categoryA"), ContextBuilder.reference("nd", "categoryB"))));
         ensureYellow();
@@ -508,6 +523,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         assertMultiContextSuggestions("2", "C", "w", "Whitemane, Kofi");
     }
 
+    @Test
     public void testMultiContextWithFuzzyLogic() throws Exception {
         assertAcked(prepareCreate(INDEX).addMapping(TYPE, createMapping(TYPE, ContextBuilder.reference("st", "categoryA"), ContextBuilder.reference("nd", "categoryB"))));
         ensureYellow();
@@ -538,6 +554,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
                 "Mary MacPherran", "Mary MacPherran \"Skeeter\"", "Mikhail", "Mikhail Rasputin", "Moira", "Moira MacTaggert");
     }
 
+    @Test
     public void testSimpleType() throws Exception {
         String[] types = { TYPE + "A", TYPE + "B", TYPE + "C" };
 
@@ -569,7 +586,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         assertFieldSuggestions(types[2], "w", "Whitemane, Kofi");
     }
 
-    // issue 5525, default location didnt work with lat/lon map, and did not set default location appropriately
+    @Test // issue 5525, default location didnt work with lat/lon map, and did not set default location appropriately
     public void testGeoContextDefaultMapping() throws Exception {
         GeoPoint berlinAlexanderplatz = GeoPoint.fromGeohash("u33dc1");
 
@@ -595,7 +612,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         assertSuggestion(suggestResponse.getSuggest(), 0, "suggestion", "Berlin Alexanderplatz");
     }
 
-    // issue 5525, setting the path of a category context and then indexing a document without that field returned an error
+    @Test // issue 5525, setting the path of a category context and then indexing a document without that field returned an error
     public void testThatMissingPrefixesForContextReturnException() throws Exception {
         XContentBuilder xContentBuilder = jsonBuilder().startObject()
             .startObject("service").startObject("properties").startObject("suggest")
@@ -622,7 +639,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         }
     }
 
-    // issue 5525, the geo point parser did not work when the lat/lon values were inside of a value object
+    @Test // issue 5525, the geo point parser did not work when the lat/lon values were inside of a value object
     public void testThatLocationVenueCanBeParsedAsDocumented() throws Exception {
         XContentBuilder xContentBuilder = jsonBuilder().startObject()
             .startObject("poi").startObject("properties").startObject("suggest")
@@ -653,6 +670,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         assertNoFailures(suggestResponse);
     }
 
+    @Test
     public void testThatCategoryDefaultWorks() throws Exception {
         XContentBuilder xContentBuilder = jsonBuilder().startObject()
                 .startObject("item").startObject("properties").startObject("suggest")
@@ -675,6 +693,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         assertSuggestion(suggestResponse.getSuggest(), 0, "suggestion", "Hoodie red");
     }
 
+    @Test
     public void testThatDefaultCategoryAndPathWorks() throws Exception {
         XContentBuilder xContentBuilder = jsonBuilder().startObject()
                 .startObject("item").startObject("properties").startObject("suggest")
@@ -699,6 +718,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         assertSuggestion(suggestResponse.getSuggest(), 0, "suggestion", "Hoodie red");
     }
 
+    @Test
     public void testThatGeoPrecisionIsWorking() throws Exception {
         XContentBuilder xContentBuilder = jsonBuilder().startObject()
                 .startObject("item").startObject("properties").startObject("suggest")
@@ -731,6 +751,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         assertSuggestion(suggestResponse.getSuggest(), 0, "suggestion", "Berlin Alexanderplatz", "Berlin Poelchaustr.", "Berlin Dahlem");
     }
 
+    @Test
     public void testThatNeighborsCanBeExcluded() throws Exception {
         XContentBuilder xContentBuilder = jsonBuilder().startObject()
                 .startObject("item").startObject("properties").startObject("suggest")
@@ -760,6 +781,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         assertSuggestion(suggestResponse.getSuggest(), 0, "suggestion", "Berlin Alexanderplatz");
     }
 
+    @Test
     public void testThatGeoPathCanBeSelected() throws Exception {
         XContentBuilder xContentBuilder = jsonBuilder().startObject()
                 .startObject("item").startObject("properties").startObject("suggest")
@@ -784,6 +806,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
         assertSuggestion(suggestResponse.getSuggest(), 0, "suggestion", "Berlin Alexanderplatz");
     }
 
+    @Test(expected = MapperParsingException.class)
     public void testThatPrecisionIsRequired() throws Exception {
         XContentBuilder xContentBuilder = jsonBuilder().startObject()
                 .startObject("item").startObject("properties").startObject("suggest")
@@ -795,14 +818,10 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
                 .endObject().endObject().endObject()
                 .endObject();
 
-        try {
-            prepareCreate(INDEX).addMapping("item", xContentBuilder).get();
-            fail("Expected MapperParsingException");
-        } catch (MapperParsingException e) {
-            assertThat(e.getMessage(), is("Failed to parse mapping [item]: field [precision] is missing"));
-        }
+        assertAcked(prepareCreate(INDEX).addMapping("item", xContentBuilder));
     }
 
+    @Test
     public void testThatLatLonParsingFromSourceWorks() throws Exception {
         XContentBuilder xContentBuilder = jsonBuilder().startObject()
                 .startObject("mappings").startObject("test").startObject("properties").startObject("suggest_geo")
@@ -855,7 +874,7 @@ public class ContextSuggestSearchIT extends ESIntegTestCase {
                 assertTrue(options.iterator().hasNext());
                 for (CompletionSuggestion.Entry.Option option : options) {
                     String target = option.getPayloadAsString();
-                    assertDistance(location, target, Matchers.lessThanOrEqualTo(precision));
+                    assertDistance(location, target, Matchers.lessThanOrEqualTo(precision));                    
                 }
             }
         }
diff --git a/core/src/test/java/org/elasticsearch/search/suggest/CustomSuggesterSearchIT.java b/core/src/test/java/org/elasticsearch/search/suggest/CustomSuggesterSearchIT.java
index 18b4fa5..df04d43 100644
--- a/core/src/test/java/org/elasticsearch/search/suggest/CustomSuggesterSearchIT.java
+++ b/core/src/test/java/org/elasticsearch/search/suggest/CustomSuggesterSearchIT.java
@@ -26,6 +26,7 @@ import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Collection;
@@ -41,11 +42,13 @@ import static org.hamcrest.Matchers.is;
  */
 @ClusterScope(scope= Scope.SUITE, numDataNodes =1)
 public class CustomSuggesterSearchIT extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return pluginList(CustomSuggesterPlugin.class);
     }
 
+    @Test
     public void testThatCustomSuggestersCanBeRegisteredAndWork() throws Exception {
         createIndex("test");
         client().prepareIndex("test", "test", "1").setSource(jsonBuilder()
diff --git a/core/src/test/java/org/elasticsearch/search/suggest/SuggestSearchIT.java b/core/src/test/java/org/elasticsearch/search/suggest/SuggestSearchIT.java
index 1850abc..c5e0912 100644
--- a/core/src/test/java/org/elasticsearch/search/suggest/SuggestSearchIT.java
+++ b/core/src/test/java/org/elasticsearch/search/suggest/SuggestSearchIT.java
@@ -39,17 +39,13 @@ import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder.DirectCan
 import org.elasticsearch.search.suggest.term.TermSuggestionBuilder;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.hamcrest.ElasticsearchAssertions;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.net.URISyntaxException;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 import java.util.concurrent.ExecutionException;
 
 import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_REPLICAS;
@@ -77,7 +73,8 @@ import static org.hamcrest.Matchers.nullValue;
  * request, modify again, request again, etc.  This makes it very obvious what changes between requests.
  */
 public class SuggestSearchIT extends ESIntegTestCase {
-    // see #3196
+
+    @Test // see #3196
     public void testSuggestAcrossMultipleIndices() throws IOException {
         createIndex("test");
         ensureGreen();
@@ -168,7 +165,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
         }
     }
 
-    // see #3037
+    @Test // see #3037
     public void testSuggestModes() throws IOException {
         CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder()
                 .put(SETTING_NUMBER_OF_SHARDS, 1)
@@ -178,7 +175,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
                 .put("index.analysis.filter.shingler.type", "shingle")
                 .put("index.analysis.filter.shingler.min_shingle_size", 2)
                 .put("index.analysis.filter.shingler.max_shingle_size", 3));
-
+        
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties")
                 .startObject("name")
@@ -198,7 +195,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
                 .endObject().endObject();
         assertAcked(builder.addMapping("type1", mapping));
         ensureGreen();
-
+        
 
         index("test", "type1", "1", "name", "I like iced tea");
         index("test", "type1", "2", "name", "I like tea.");
@@ -216,8 +213,8 @@ public class SuggestSearchIT extends ESIntegTestCase {
         searchSuggest = searchSuggest( "ice tea", phraseSuggestion);
         assertSuggestionSize(searchSuggest, 0, 0, "did_you_mean");
     }
-
-    // see #2729
+    
+    @Test // see #2729
     public void testSizeOneShard() throws Exception {
         prepareCreate("test").setSettings(
                 SETTING_NUMBER_OF_SHARDS, 1,
@@ -231,7 +228,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
 
         SearchResponse search = client().prepareSearch().setQuery(matchQuery("text", "spellchecker")).get();
         assertThat("didn't ask for suggestions but got some", search.getSuggest(), nullValue());
-
+        
         TermSuggestionBuilder termSuggestion = termSuggestion("test")
                 .suggestMode("always") // Always, otherwise the results can vary between requests.
                 .text("abcd")
@@ -244,7 +241,8 @@ public class SuggestSearchIT extends ESIntegTestCase {
         suggest = searchSuggest( termSuggestion);
         assertSuggestion(suggest, 0, "test", 5, "abc0");
     }
-
+    
+    @Test
     public void testUnmappedField() throws IOException, InterruptedException, ExecutionException {
         CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder()
                 .put(indexSettings())
@@ -297,6 +295,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testSimple() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -306,10 +305,10 @@ public class SuggestSearchIT extends ESIntegTestCase {
         index("test", "type1", "3", "text", "abbd");
         index("test", "type1", "4", "text", "abcc");
         refresh();
-
+        
         SearchResponse search = client().prepareSearch().setQuery(matchQuery("text", "spellcecker")).get();
         assertThat("didn't ask for suggestions but got some", search.getSuggest(), nullValue());
-
+        
         TermSuggestionBuilder termSuggest = termSuggestion("test")
                 .suggestMode("always") // Always, otherwise the results can vary between requests.
                 .text("abcd")
@@ -323,6 +322,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
         assertThat(suggest.getSuggestion("test").getEntries().get(0).getText().string(), equalTo("abcd"));
     }
 
+    @Test
     public void testEmpty() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -343,6 +343,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
         assertThat(suggest.getSuggestion("test").getEntries().get(0).getText().string(), equalTo("abcd"));
     }
 
+    @Test
     public void testWithMultipleCommands() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -371,6 +372,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
         assertSuggestionSize(suggest, 0, 0, "accuracy");
     }
 
+    @Test
     public void testSizeAndSort() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -418,8 +420,8 @@ public class SuggestSearchIT extends ESIntegTestCase {
         // assertThat(suggest.get(3).getSuggestedWords().get("prefix_abcd").get(4).getTerm(), equalTo("prefix_abcc"));
         // assertThat(suggest.get(3).getSuggestedWords().get("prefix_abcd").get(4).getTerm(), equalTo("prefix_accd"));
     }
-
-    // see #2817
+    
+    @Test // see #2817
     public void testStopwordsOnlyPhraseSuggest() throws IOException {
         assertAcked(prepareCreate("test").addMapping("typ1", "body", "type=string,analyzer=stopwd").setSettings(
                 settingsBuilder()
@@ -436,8 +438,9 @@ public class SuggestSearchIT extends ESIntegTestCase {
                         .size(1));
         assertSuggestionSize(searchSuggest, 0, 0, "simple_phrase");
     }
-
-    public void testPrefixLength() throws IOException {
+    
+    @Test
+    public void testPrefixLength() throws IOException {  // Stopped here
         CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder()
                 .put(SETTING_NUMBER_OF_SHARDS, 1)
                 .put("index.analysis.analyzer.reverse.tokenizer", "standard")
@@ -471,14 +474,15 @@ public class SuggestSearchIT extends ESIntegTestCase {
                         .addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("body").prefixLength(4).minWordLength(1).suggestMode("always"))
                         .size(1).confidence(1.0f));
         assertSuggestion(searchSuggest, 0, "simple_phrase", "hello words");
-
+        
         searchSuggest = searchSuggest( "hello word",
                 phraseSuggestion("simple_phrase").field("body")
                         .addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("body").prefixLength(2).minWordLength(1).suggestMode("always"))
                         .size(1).confidence(1.0f));
         assertSuggestion(searchSuggest, 0, "simple_phrase", "hello world");
     }
-
+    
+    @Test
     @Nightly
     public void testMarvelHerosPhraseSuggest() throws IOException, URISyntaxException {
         CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder()
@@ -582,7 +586,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
 
         searchSuggest = searchSuggest( "american ame", phraseSuggest);
         assertSuggestion(searchSuggest, 0, "simple_phrase", "american ace");
-
+        
         // try all smoothing methods
         phraseSuggest.smoothingModel(new PhraseSuggestionBuilder.LinearInterpolation(0.4,0.4,0.2));
         searchSuggest = searchSuggest( "Xor the Got-Jewel", phraseSuggest);
@@ -612,6 +616,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
         return Files.readAllLines(PathUtils.get(SuggestSearchIT.class.getResource("/config/names.txt").toURI()), StandardCharsets.UTF_8);
     }
 
+    @Test
     public void testSizePararm() throws IOException {
         CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder()
                 .put(SETTING_NUMBER_OF_SHARDS, 1)
@@ -625,7 +630,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
                 .put("index.analysis.filter.my_shingle.output_unigrams", false)
                 .put("index.analysis.filter.my_shingle.min_shingle_size", 2)
                 .put("index.analysis.filter.my_shingle.max_shingle_size", 2));
-
+        
         XContentBuilder mapping = XContentFactory.jsonBuilder()
                 .startObject()
                     .startObject("type1")
@@ -677,6 +682,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
         assertSuggestion(searchSuggest, 0, "simple_phrase", "xorr the god jewel");
     }
 
+    @Test
     @Nightly
     public void testPhraseBoundaryCases() throws IOException, URISyntaxException {
         CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder()
@@ -697,7 +703,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
                 .put("index.analysis.filter.my_shingle2.output_unigrams", true)
                 .put("index.analysis.filter.my_shingle2.min_shingle_size", 2)
                 .put("index.analysis.filter.my_shingle2.max_shingle_size", 2));
-
+        
         XContentBuilder mapping = XContentFactory.jsonBuilder()
                     .startObject().startObject("type1")
                     .startObject("_all").field("store", "yes").field("termVector", "with_positions_offsets").endObject()
@@ -770,6 +776,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
         assertSuggestion(suggest, 0, "simple_phrase", "xorr the god jewel");
     }
 
+    @Test
     public void testDifferentShardSize() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -783,7 +790,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
         ElasticsearchAssertions.assertSuggestionSize(suggest, 0, 3, "simple");
     }
 
-    // see #3469
+    @Test // see #3469
     public void testShardFailures() throws IOException, InterruptedException {
         CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder()
                 .put(indexSettings())
@@ -837,7 +844,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
         ElasticsearchAssertions.assertSuggestion(searchResponse.getSuggest(), 0, 0, "did_you_mean", "testing suggestions");
     }
 
-    // see #3469
+    @Test // see #3469
     public void testEmptyShards() throws IOException, InterruptedException {
         XContentBuilder mappingBuilder = XContentFactory.jsonBuilder().
                 startObject().
@@ -886,6 +893,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
      * Searching for a rare phrase shouldn't provide any suggestions if confidence &gt; 1.  This was possible before we rechecked the cutoff
      * score during the reduce phase.  Failures don't occur every time - maybe two out of five tries but we don't repeat it to save time.
      */
+    @Test
     public void testSearchForRarePhrase() throws IOException {
         // If there isn't enough chaf per shard then shards can become unbalanced, making the cutoff recheck this is testing do more harm then good.
         int chafPerShard = 100;
@@ -949,8 +957,12 @@ public class SuggestSearchIT extends ESIntegTestCase {
         assertSuggestion(searchSuggest, 0, 0, "simple_phrase", "nobel prize");
     }
 
+    /**
+     * If the suggester finds tons of options then picking the right one is slow without &lt;&lt;&lt;INSERT SOLUTION HERE&gt;&gt;&gt;.
+     */
+    @Test
     @Nightly
-    public void testSuggestWithManyCandidates() throws InterruptedException, ExecutionException, IOException {
+    public void suggestWithManyCandidates() throws InterruptedException, ExecutionException, IOException {
         CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder()
                 .put(indexSettings())
                 .put(SETTING_NUMBER_OF_SHARDS, 1) // A single shard will help to keep the tests repeatable.
@@ -1095,6 +1107,7 @@ public class SuggestSearchIT extends ESIntegTestCase {
         // assertThat(total, lessThan(1000L)); // Takes many seconds without fix - just for debugging
     }
 
+    @Test
     public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException {
         CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder()
                 .put(indexSettings())
diff --git a/core/src/test/java/org/elasticsearch/search/suggest/completion/CompletionPostingsFormatTests.java b/core/src/test/java/org/elasticsearch/search/suggest/completion/CompletionPostingsFormatTests.java
index 9e3043d..ff672fb 100644
--- a/core/src/test/java/org/elasticsearch/search/suggest/completion/CompletionPostingsFormatTests.java
+++ b/core/src/test/java/org/elasticsearch/search/suggest/completion/CompletionPostingsFormatTests.java
@@ -57,8 +57,10 @@ import org.elasticsearch.search.suggest.SuggestUtils;
 import org.elasticsearch.search.suggest.completion.Completion090PostingsFormat.LookupFactory;
 import org.elasticsearch.search.suggest.context.ContextMapping;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
+import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
@@ -69,6 +71,7 @@ import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 
 public class CompletionPostingsFormatTests extends ESTestCase {
+
     Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT.id).build();
     static final CompletionFieldMapper.CompletionFieldType FIELD_TYPE = CompletionFieldMapper.Defaults.FIELD_TYPE.clone();
     static final NamedAnalyzer analyzer = new NamedAnalyzer("foo", new StandardAnalyzer());
@@ -79,6 +82,7 @@ public class CompletionPostingsFormatTests extends ESTestCase {
         FIELD_TYPE.freeze();
     }
 
+    @Test
     public void testCompletionPostingsFormat() throws IOException {
         AnalyzingCompletionLookupProviderV1 providerV1 = new AnalyzingCompletionLookupProviderV1(true, false, true, true);
         AnalyzingCompletionLookupProvider currentProvider = new AnalyzingCompletionLookupProvider(true, false, true, true);
@@ -99,6 +103,7 @@ public class CompletionPostingsFormatTests extends ESTestCase {
         dir.close();
     }
 
+    @Test
     public void testProviderBackwardCompatibilityForVersion1() throws IOException {
         AnalyzingCompletionLookupProviderV1 providerV1 = new AnalyzingCompletionLookupProviderV1(true, false, true, true);
         AnalyzingCompletionLookupProvider currentProvider = new AnalyzingCompletionLookupProvider(true, false, true, true);
@@ -117,6 +122,7 @@ public class CompletionPostingsFormatTests extends ESTestCase {
         dir.close();
     }
 
+    @Test
     public void testProviderVersion2() throws IOException {
         AnalyzingCompletionLookupProvider currentProvider = new AnalyzingCompletionLookupProvider(true, false, true, true);
 
@@ -134,6 +140,7 @@ public class CompletionPostingsFormatTests extends ESTestCase {
         dir.close();
     }
 
+    @Test
     public void testDuellCompletions() throws IOException, NoSuchFieldException, SecurityException, IllegalArgumentException,
             IllegalAccessException {
         final boolean preserveSeparators = getRandom().nextBoolean();
@@ -141,7 +148,7 @@ public class CompletionPostingsFormatTests extends ESTestCase {
         final boolean usePayloads = getRandom().nextBoolean();
         final int options = preserveSeparators ? AnalyzingSuggester.PRESERVE_SEP : 0;
 
-        XAnalyzingSuggester reference = new XAnalyzingSuggester(new StandardAnalyzer(), null, new StandardAnalyzer(),
+        XAnalyzingSuggester reference = new XAnalyzingSuggester(new StandardAnalyzer(), null, new StandardAnalyzer(), 
                 options, 256, -1, preservePositionIncrements, null, false, 1, XAnalyzingSuggester.SEP_LABEL, XAnalyzingSuggester.PAYLOAD_SEP, XAnalyzingSuggester.END_BYTE, XAnalyzingSuggester.HOLE_CHARACTER);
         LineFileDocs docs = new LineFileDocs(getRandom());
         int num = scaledRandomIntBetween(150, 300);
@@ -152,7 +159,7 @@ public class CompletionPostingsFormatTests extends ESTestCase {
             IndexableField field = nextDoc.getField("title");
             titles[i] = field.stringValue();
             weights[i] = between(0, 100);
-
+           
         }
         docs.close();
         final InputIterator primaryIter = new InputIterator() {
@@ -216,7 +223,7 @@ public class CompletionPostingsFormatTests extends ESTestCase {
                 public boolean hasPayloads() {
                     return true;
                 }
-
+                
                 @Override
                 public Set<BytesRef> contexts() {
                     return null;
@@ -263,7 +270,7 @@ public class CompletionPostingsFormatTests extends ESTestCase {
                         lookup.get(j).value, equalTo(refLookup.get(j).value));
                 assertThat(lookup.get(j).payload, equalTo(refLookup.get(j).payload));
                 if (usePayloads) {
-                    assertThat(lookup.get(j).payload.utf8ToString(),  equalTo(Long.toString(lookup.get(j).value)));
+                    assertThat(lookup.get(j).payload.utf8ToString(),  equalTo(Long.toString(lookup.get(j).value)));    
                 }
             }
         }
@@ -273,7 +280,6 @@ public class CompletionPostingsFormatTests extends ESTestCase {
             throws IOException {
         RAMDirectory dir = new RAMDirectory();
         Codec codec = new Lucene53Codec() {
-            @Override
             public PostingsFormat getPostingsFormatForField(String field) {
                 final PostingsFormat in = super.getPostingsFormatForField(field);
                 return mapper.fieldType().postingsFormat(in);
@@ -306,7 +312,7 @@ public class CompletionPostingsFormatTests extends ESTestCase {
         dir.close();
         return lookup;
     }
-
+    @Test
     public void testNoDocs() throws IOException {
         AnalyzingCompletionLookupProvider provider = new AnalyzingCompletionLookupProvider(true, false, true, true);
         RAMDirectory dir = new RAMDirectory();
diff --git a/core/src/test/java/org/elasticsearch/search/suggest/context/GeoLocationContextMappingTests.java b/core/src/test/java/org/elasticsearch/search/suggest/context/GeoLocationContextMappingTests.java
index 4d66c7f..b525c4a 100644
--- a/core/src/test/java/org/elasticsearch/search/suggest/context/GeoLocationContextMappingTests.java
+++ b/core/src/test/java/org/elasticsearch/search/suggest/context/GeoLocationContextMappingTests.java
@@ -25,6 +25,7 @@ import org.elasticsearch.common.xcontent.XContentHelper;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.search.suggest.context.ContextMapping.ContextConfig;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -36,6 +37,8 @@ import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
  *
  */
 public class GeoLocationContextMappingTests extends ESTestCase {
+
+    @Test
     public void testThatParsingGeoPointsWorksWithCoercion() throws Exception {
         XContentBuilder builder = jsonBuilder().startObject().field("lat", "52").field("lon", "4").endObject();
         XContentParser parser = XContentHelper.createParser(builder.bytes());
@@ -46,7 +49,9 @@ public class GeoLocationContextMappingTests extends ESTestCase {
         GeolocationContextMapping mapping = GeolocationContextMapping.load("foo", config);
         mapping.parseQuery("foo", parser);
     }
+    
 
+    @Test
     public void testUseWithDefaultGeoHash() throws Exception {
         XContentBuilder builder = jsonBuilder().startObject().field("lat", 52d).field("lon", 4d).endObject();
         XContentParser parser = XContentHelper.createParser(builder.bytes());
@@ -58,8 +63,9 @@ public class GeoLocationContextMappingTests extends ESTestCase {
         config.put("default", geohash);
         GeolocationContextMapping mapping = GeolocationContextMapping.load("foo", config);
         mapping.parseQuery("foo", parser);
-    }
-
+    }    
+    
+    @Test
     public void testUseWithDefaultLatLon() throws Exception {
         XContentBuilder builder = jsonBuilder().startObject().field("lat", 52d).field("lon", 4d).endObject();
         XContentParser parser = XContentHelper.createParser(builder.bytes());
@@ -73,8 +79,9 @@ public class GeoLocationContextMappingTests extends ESTestCase {
         config.put("default", pointAsMap);
         GeolocationContextMapping mapping = GeolocationContextMapping.load("foo", config);
         mapping.parseQuery("foo", parser);
-    }
-
+    } 
+    
+    @Test
     public void testUseWithDefaultBadLatLon() throws Exception {
         XContentBuilder builder = jsonBuilder().startObject().field("lat", 52d).field("lon", 4d).endObject();
         XContentParser parser = XContentHelper.createParser(builder.bytes());
@@ -95,8 +102,9 @@ public class GeoLocationContextMappingTests extends ESTestCase {
             expected = e;
         }
         assertNotNull(expected);
-    }
-
+    }  
+    
+    @Test
     public void testUseWithMultiplePrecisions() throws Exception {
         XContentBuilder builder = jsonBuilder().startObject().field("lat", 52d).field("lon", 4d).endObject();
         XContentParser parser = XContentHelper.createParser(builder.bytes());
@@ -112,7 +120,8 @@ public class GeoLocationContextMappingTests extends ESTestCase {
         GeolocationContextMapping mapping = GeolocationContextMapping.load("foo", config);
         mapping.parseQuery("foo", parser);
     }
-
+    
+    @Test
     public void testHashcode() throws Exception {
         HashMap<String, Object> config = new HashMap<>();
         if (randomBoolean()) {
@@ -134,6 +143,7 @@ public class GeoLocationContextMappingTests extends ESTestCase {
         assertEquals(mapping.hashCode(), mapping2.hashCode());
     }
 
+    @Test
     public void testUseWithBadGeoContext() throws Exception {
         double lon = 4d;
         String badLat = "W";
@@ -155,6 +165,7 @@ public class GeoLocationContextMappingTests extends ESTestCase {
         assertNotNull(expected);
     }
 
+    @Test
     public void testUseWithLonLatGeoContext() throws Exception {
         double lon = 4d;
         double lat = 52d;
diff --git a/core/src/test/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellCheckerTests.java b/core/src/test/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellCheckerTests.java
index 812928d..b02c421 100644
--- a/core/src/test/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellCheckerTests.java
+++ b/core/src/test/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellCheckerTests.java
@@ -18,6 +18,7 @@
  */
 package org.elasticsearch.search.suggest.phrase;
 
+import java.nio.charset.StandardCharsets;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.Tokenizer;
@@ -42,12 +43,9 @@ import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.util.BytesRef;
 import org.elasticsearch.search.suggest.phrase.NoisyChannelSpellChecker.Result;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.StringReader;
-import java.nio.charset.StandardCharsets;
+import java.io.*;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -59,6 +57,7 @@ public class NoisyChannelSpellCheckerTests extends ESTestCase {
     private final BytesRef preTag = new BytesRef("<em>");
     private final BytesRef postTag = new BytesRef("</em>");
 
+    @Test
     public void testMarvelHeros() throws IOException {
         RAMDirectory dir = new RAMDirectory();
         Map<String, Analyzer> mapping = new HashMap<>();
@@ -98,7 +97,7 @@ public class NoisyChannelSpellCheckerTests extends ESTestCase {
 
         DirectoryReader ir = DirectoryReader.open(writer, false);
         WordScorer wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, "body_ngram"), "body_ngram", 0.95d, new BytesRef(" "), 0.5f);
-
+        
         NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker();
         DirectSpellChecker spellchecker = new DirectSpellChecker();
         spellchecker.setMinQueryLength(1);
@@ -109,7 +108,7 @@ public class NoisyChannelSpellCheckerTests extends ESTestCase {
         assertThat(corrections[0].join(space).utf8ToString(), equalTo("american ace"));
         assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo("american <em>ace</em>"));
         assertThat(result.cutoffScore, greaterThan(0d));
-
+        
         result = suggester.getCorrections(wrapper, new BytesRef("american ame"), generator, 1, 1, ir, "body", wordScorer, 0, 1);
         corrections = result.corrections;
         assertThat(corrections.length, equalTo(1));
@@ -129,14 +128,14 @@ public class NoisyChannelSpellCheckerTests extends ESTestCase {
         assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo("xor the <em>god</em> jewel"));
         assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo("<em>xorn</em> the <em>god</em> jewel"));
         assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo("<em>xorr</em> the got jewel"));
-
+        
         corrections = suggester.getCorrections(wrapper, new BytesRef("Xor the Got-Jewel"), generator, 0.5f, 4, ir, "body", wordScorer, 1, 2).corrections;
         assertThat(corrections.length, equalTo(4));
         assertThat(corrections[0].join(space).utf8ToString(), equalTo("xorr the god jewel"));
         assertThat(corrections[1].join(space).utf8ToString(), equalTo("xor the god jewel"));
         assertThat(corrections[2].join(space).utf8ToString(), equalTo("xorn the god jewel"));
         assertThat(corrections[3].join(space).utf8ToString(), equalTo("xorr the got jewel"));
-
+        
         // Test some of the highlighting corner cases
         suggester = new NoisyChannelSpellChecker(0.85);
         wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, "body_ngram"), "body_ngram", 0.85d, new BytesRef(" "), 0.5f);
@@ -152,7 +151,7 @@ public class NoisyChannelSpellCheckerTests extends ESTestCase {
         assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo("xor teh <em>god</em> jewel"));
 
         // test synonyms
-
+        
         Analyzer analyzer = new Analyzer() {
 
             @Override
@@ -161,7 +160,7 @@ public class NoisyChannelSpellCheckerTests extends ESTestCase {
                 TokenFilter filter = new LowerCaseFilter(t);
                 try {
                     SolrSynonymParser parser = new SolrSynonymParser(true, false, new WhitespaceAnalyzer());
-                    parser.parse(new StringReader("usa => usa, america, american\nursa => usa, america, american"));
+                    ((SolrSynonymParser) parser).parse(new StringReader("usa => usa, america, american\nursa => usa, america, american"));
                     filter = new SynonymFilter(filter, parser.build(), true);
                 } catch (Exception e) {
                     throw new RuntimeException(e);
@@ -169,7 +168,7 @@ public class NoisyChannelSpellCheckerTests extends ESTestCase {
                 return new TokenStreamComponents(t, filter);
             }
         };
-
+        
         spellchecker.setAccuracy(0.0f);
         spellchecker.setMinPrefix(1);
         spellchecker.setMinQueryLength(1);
@@ -178,7 +177,7 @@ public class NoisyChannelSpellCheckerTests extends ESTestCase {
         corrections = suggester.getCorrections(analyzer, new BytesRef("captian usa"), generator, 2, 4, ir, "body", wordScorer, 1, 2).corrections;
         assertThat(corrections[0].join(space).utf8ToString(), equalTo("captain america"));
         assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo("<em>captain america</em>"));
-
+        
         generator = new DirectCandidateGenerator(spellchecker, "body", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85, 10, null, analyzer, MultiFields.getTerms(ir, "body"));
         corrections = suggester.getCorrections(analyzer, new BytesRef("captian usw"), generator, 2, 4, ir, "body", wordScorer, 1, 2).corrections;
         assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("captain america"));
@@ -190,7 +189,8 @@ public class NoisyChannelSpellCheckerTests extends ESTestCase {
         assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("captain america"));
         assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo("captain <em>america</em>"));
     }
-
+    
+    @Test
     public void testMarvelHerosMultiGenerator() throws IOException {
         RAMDirectory dir = new RAMDirectory();
         Map<String, Analyzer> mapping = new HashMap<>();
@@ -246,23 +246,23 @@ public class NoisyChannelSpellCheckerTests extends ESTestCase {
         DirectCandidateGenerator forward = new DirectCandidateGenerator(spellchecker, "body", SuggestMode.SUGGEST_ALWAYS, ir, 0.95, 10);
         DirectCandidateGenerator reverse = new DirectCandidateGenerator(spellchecker, "body_reverse", SuggestMode.SUGGEST_ALWAYS, ir, 0.95, 10, wrapper, wrapper,  MultiFields.getTerms(ir, "body_reverse"));
         CandidateGenerator generator = new MultiCandidateGeneratorWrapper(10, forward, reverse);
-
+        
         Correction[] corrections = suggester.getCorrections(wrapper, new BytesRef("american cae"), generator, 1, 1, ir, "body", wordScorer, 1, 2).corrections;
         assertThat(corrections.length, equalTo(1));
         assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("american ace"));
-
+        
         generator = new MultiCandidateGeneratorWrapper(5, forward, reverse);
         corrections = suggester.getCorrections(wrapper, new BytesRef("american ame"), generator, 1, 1, ir, "body", wordScorer, 1, 2).corrections;
         assertThat(corrections.length, equalTo(1));
         assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("american ace"));
-
+        
         corrections = suggester.getCorrections(wrapper, new BytesRef("american cae"), forward, 1, 1, ir, "body", wordScorer, 1, 2).corrections;
         assertThat(corrections.length, equalTo(0)); // only use forward with constant prefix
-
+        
         corrections = suggester.getCorrections(wrapper, new BytesRef("america cae"), generator, 2, 1, ir, "body", wordScorer, 1, 2).corrections;
         assertThat(corrections.length, equalTo(1));
         assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("american ace"));
-
+        
         corrections = suggester.getCorrections(wrapper, new BytesRef("Zorr the Got-Jewel"), generator, 0.5f, 4, ir, "body", wordScorer, 0, 2).corrections;
         assertThat(corrections.length, equalTo(4));
         assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("xorr the god jewel"));
@@ -273,18 +273,21 @@ public class NoisyChannelSpellCheckerTests extends ESTestCase {
         corrections = suggester.getCorrections(wrapper, new BytesRef("Zorr the Got-Jewel"), generator, 0.5f, 1, ir, "body", wordScorer, 1.5f, 2).corrections;
         assertThat(corrections.length, equalTo(1));
         assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("xorr the god jewel"));
-
+        
         corrections = suggester.getCorrections(wrapper, new BytesRef("Xor the Got-Jewel"), generator, 0.5f, 1, ir, "body", wordScorer, 1.5f, 2).corrections;
         assertThat(corrections.length, equalTo(1));
         assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("xorr the god jewel"));
 
-        // Test a special case where one of the suggest term is unchanged by the postFilter, 'II' here is unchanged by the reverse analyzer.
+        // Test a special case where one of the suggest term is unchanged by the postFilter, 'II' here is unchanged by the reverse analyzer.  
         corrections = suggester.getCorrections(wrapper, new BytesRef("Quazar II"), generator, 1, 1, ir, "body", wordScorer, 1, 2).corrections;
         assertThat(corrections.length, equalTo(1));
         assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("quasar ii"));
     }
 
+    @Test
     public void testMarvelHerosTrigram() throws IOException {
+        
+      
         RAMDirectory dir = new RAMDirectory();
         Map<String, Analyzer> mapping = new HashMap<>();
         mapping.put("body_ngram", new Analyzer() {
@@ -331,11 +334,11 @@ public class NoisyChannelSpellCheckerTests extends ESTestCase {
         Correction[] corrections = suggester.getCorrections(wrapper, new BytesRef("american ame"), generator, 1, 1, ir, "body", wordScorer, 1, 3).corrections;
         assertThat(corrections.length, equalTo(1));
         assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("american ace"));
-
+        
         corrections = suggester.getCorrections(wrapper, new BytesRef("american ame"), generator, 1, 1, ir, "body", wordScorer, 1, 1).corrections;
         assertThat(corrections.length, equalTo(0));
 //        assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("american ape"));
-
+        
         wordScorer = new LinearInterpoatingScorer(ir, MultiFields.getTerms(ir, "body_ngram"), "body_ngram", 0.85d, new BytesRef(" "), 0.5, 0.4, 0.1);
         corrections = suggester.getCorrections(wrapper, new BytesRef("Xor the Got-Jewel"), generator, 0.5f, 4, ir, "body", wordScorer, 0, 3).corrections;
         assertThat(corrections.length, equalTo(4));
@@ -343,25 +346,25 @@ public class NoisyChannelSpellCheckerTests extends ESTestCase {
         assertThat(corrections[1].join(new BytesRef(" ")).utf8ToString(), equalTo("xor the god jewel"));
         assertThat(corrections[2].join(new BytesRef(" ")).utf8ToString(), equalTo("xorn the god jewel"));
         assertThat(corrections[3].join(new BytesRef(" ")).utf8ToString(), equalTo("xorr the got jewel"));
+        
+      
 
-
-
-
+        
         corrections = suggester.getCorrections(wrapper, new BytesRef("Xor the Got-Jewel"), generator, 0.5f, 4, ir, "body", wordScorer, 1, 3).corrections;
         assertThat(corrections.length, equalTo(4));
         assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("xorr the god jewel"));
         assertThat(corrections[1].join(new BytesRef(" ")).utf8ToString(), equalTo("xor the god jewel"));
         assertThat(corrections[2].join(new BytesRef(" ")).utf8ToString(), equalTo("xorn the god jewel"));
         assertThat(corrections[3].join(new BytesRef(" ")).utf8ToString(), equalTo("xorr the got jewel"));
-
+        
 
         corrections = suggester.getCorrections(wrapper, new BytesRef("Xor the Got-Jewel"), generator, 0.5f, 1, ir, "body", wordScorer, 100, 3).corrections;
         assertThat(corrections.length, equalTo(1));
         assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("xorr the god jewel"));
-
+        
 
         // test synonyms
-
+        
         Analyzer analyzer = new Analyzer() {
 
             @Override
@@ -370,7 +373,7 @@ public class NoisyChannelSpellCheckerTests extends ESTestCase {
                 TokenFilter filter = new LowerCaseFilter(t);
                 try {
                     SolrSynonymParser parser = new SolrSynonymParser(true, false, new WhitespaceAnalyzer());
-                    parser.parse(new StringReader("usa => usa, america, american\nursa => usa, america, american"));
+                    ((SolrSynonymParser) parser).parse(new StringReader("usa => usa, america, american\nursa => usa, america, american"));
                     filter = new SynonymFilter(filter, parser.build(), true);
                 } catch (Exception e) {
                     throw new RuntimeException(e);
@@ -378,7 +381,7 @@ public class NoisyChannelSpellCheckerTests extends ESTestCase {
                 return new TokenStreamComponents(t, filter);
             }
         };
-
+        
         spellchecker.setAccuracy(0.0f);
         spellchecker.setMinPrefix(1);
         spellchecker.setMinQueryLength(1);
@@ -386,12 +389,12 @@ public class NoisyChannelSpellCheckerTests extends ESTestCase {
         wordScorer = new LinearInterpoatingScorer(ir, MultiFields.getTerms(ir, "body_ngram"), "body_ngram", 0.95d, new BytesRef(" "),  0.5, 0.4, 0.1);
         corrections = suggester.getCorrections(analyzer, new BytesRef("captian usa"), generator, 2, 4, ir, "body", wordScorer, 1, 3).corrections;
         assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("captain america"));
-
+        
         generator = new DirectCandidateGenerator(spellchecker, "body", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.95, 10, null, analyzer, MultiFields.getTerms(ir, "body"));
         corrections = suggester.getCorrections(analyzer, new BytesRef("captian usw"), generator, 2, 4, ir, "body", wordScorer, 1, 3).corrections;
         assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("captain america"));
-
-
+        
+        
         wordScorer = new StupidBackoffScorer(ir, MultiFields.getTerms(ir, "body_ngram"), "body_ngram", 0.85d, new BytesRef(" "), 0.4);
         corrections = suggester.getCorrections(wrapper, new BytesRef("Xor the Got-Jewel"), generator, 0.5f, 2, ir, "body", wordScorer, 0, 3).corrections;
         assertThat(corrections.length, equalTo(2));
diff --git a/core/src/test/java/org/elasticsearch/similarity/SimilarityIT.java b/core/src/test/java/org/elasticsearch/similarity/SimilarityIT.java
index ab6a10f..d486cdb 100644
--- a/core/src/test/java/org/elasticsearch/similarity/SimilarityIT.java
+++ b/core/src/test/java/org/elasticsearch/similarity/SimilarityIT.java
@@ -22,6 +22,7 @@ package org.elasticsearch.similarity;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.matchQuery;
@@ -29,6 +30,8 @@ import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.not;
 
 public class SimilarityIT  extends ESIntegTestCase {
+
+    @Test
     public void testCustomBM25Similarity() throws Exception {
         try {
             client().admin().indices().prepareDelete("test").execute().actionGet();
diff --git a/core/src/test/java/org/elasticsearch/snapshots/BlobStoreFormatIT.java b/core/src/test/java/org/elasticsearch/snapshots/BlobStoreFormatIT.java
index 666ef9d..9047c71 100644
--- a/core/src/test/java/org/elasticsearch/snapshots/BlobStoreFormatIT.java
+++ b/core/src/test/java/org/elasticsearch/snapshots/BlobStoreFormatIT.java
@@ -34,26 +34,17 @@ import org.elasticsearch.common.io.Streams;
 import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.common.xcontent.FromXContentBuilder;
-import org.elasticsearch.common.xcontent.ToXContent;
-import org.elasticsearch.common.xcontent.XContentBuilder;
-import org.elasticsearch.common.xcontent.XContentFactory;
-import org.elasticsearch.common.xcontent.XContentParser;
-import org.elasticsearch.common.xcontent.XContentType;
+import org.elasticsearch.common.xcontent.*;
 import org.elasticsearch.index.translog.BufferedChecksumStreamOutput;
 import org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat;
 import org.elasticsearch.repositories.blobstore.LegacyBlobStoreFormat;
+import org.junit.Test;
 
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Map;
-import java.util.concurrent.Callable;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.TimeUnit;
+import java.util.concurrent.*;
 
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.greaterThan;
@@ -108,7 +99,6 @@ public class BlobStoreFormatIT extends AbstractSnapshotIntegTestCase {
             return new BlobObj(text);
         }
 
-        @Override
         public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {
             builder.field("text", getText());
             return builder;
@@ -157,6 +147,7 @@ public class BlobStoreFormatIT extends AbstractSnapshotIntegTestCase {
         }
     }
 
+    @Test
     public void testBlobStoreOperations() throws IOException {
         BlobStore blobStore = createTestBlobStore();
         BlobContainer blobContainer = blobStore.blobContainer(BlobPath.cleanPath());
@@ -192,6 +183,8 @@ public class BlobStoreFormatIT extends AbstractSnapshotIntegTestCase {
         assertEquals(legacySMILE.read(blobContainer, "legacy-smile-comp").getText(), "legacy smile compressed");
     }
 
+
+    @Test
     public void testCompressionIsApplied() throws IOException {
         BlobStore blobStore = createTestBlobStore();
         BlobContainer blobContainer = blobStore.blobContainer(BlobPath.cleanPath());
@@ -209,6 +202,7 @@ public class BlobStoreFormatIT extends AbstractSnapshotIntegTestCase {
         assertThat(blobs.get("blob-not-comp").length(), greaterThan(blobs.get("blob-comp").length()));
     }
 
+    @Test
     public void testBlobCorruption() throws IOException {
         BlobStore blobStore = createTestBlobStore();
         BlobContainer blobContainer = blobStore.blobContainer(BlobPath.cleanPath());
diff --git a/core/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java b/core/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java
index f939283..8b69ae3 100644
--- a/core/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java
+++ b/core/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java
@@ -21,7 +21,6 @@ package org.elasticsearch.snapshots;
 
 import com.carrotsearch.hppc.IntHashSet;
 import com.carrotsearch.hppc.IntSet;
-
 import org.elasticsearch.ElasticsearchParseException;
 import org.elasticsearch.action.ListenableActionFuture;
 import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryResponse;
@@ -65,10 +64,9 @@ import org.elasticsearch.rest.action.admin.cluster.repositories.get.RestGetRepos
 import org.elasticsearch.rest.action.admin.cluster.state.RestClusterStateAction;
 import org.elasticsearch.snapshots.mockstore.MockRepository;
 import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.InternalTestCluster;
 import org.elasticsearch.test.rest.FakeRestRequest;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.nio.file.Path;
@@ -82,30 +80,24 @@ import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertThrows;
-import static org.hamcrest.Matchers.allOf;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.lessThan;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0, transportClientRatio = 0)
 @ESIntegTestCase.SuppressLocalMode // TODO only restorePersistentSettingsTest needs this maybe factor out?
 public class DedicatedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return pluginList(MockRepository.Plugin.class);
     }
 
-    public void testRestorePersistentSettings() throws Exception {
+    @Test
+    public void restorePersistentSettingsTest() throws Exception {
         logger.info("--> start 2 nodes");
         Settings nodeSettings = settingsBuilder()
                 .put("discovery.type", "zen")
@@ -165,7 +157,8 @@ public class DedicatedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTest
                 .getMetaData().persistentSettings().getAsInt(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES, -1), not(equalTo(2)));
     }
 
-    public void testRestoreCustomMetadata() throws Exception {
+    @Test
+    public void restoreCustomMetadata() throws Exception {
         Path tempDir = randomRepoPath();
 
         logger.info("--> start node");
@@ -293,7 +286,8 @@ public class DedicatedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTest
         public ClusterState execute(ClusterState currentState) throws Exception;
     }
 
-    public void testSnapshotDuringNodeShutdown() throws Exception {
+    @Test
+    public void snapshotDuringNodeShutdownTest() throws Exception {
         logger.info("--> start 2 nodes");
         Client client = client();
 
@@ -338,7 +332,8 @@ public class DedicatedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTest
         logger.info("--> done");
     }
 
-    public void testSnapshotWithStuckNode() throws Exception {
+    @Test
+    public void snapshotWithStuckNodeTest() throws Exception {
         logger.info("--> start 2 nodes");
         ArrayList<String> nodes = new ArrayList<>();
         nodes.add(internalCluster().startNode());
@@ -402,7 +397,8 @@ public class DedicatedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTest
         logger.info("--> done");
     }
 
-    public void testRestoreIndexWithMissingShards() throws Exception {
+    @Test
+    public void restoreIndexWithMissingShards() throws Exception {
         logger.info("--> start 2 nodes");
         internalCluster().startNode();
         internalCluster().startNode();
@@ -551,7 +547,8 @@ public class DedicatedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTest
         assertThat(client().prepareSearch("test-idx-some").setSize(0).get().getHits().totalHits(), allOf(greaterThan(0L), lessThan(100L)));
     }
 
-    public void testRestoreIndexWithShardsMissingInLocalGateway() throws Exception {
+    @Test
+    public void restoreIndexWithShardsMissingInLocalGateway() throws Exception {
         logger.info("--> start 2 nodes");
         Settings nodeSettings = settingsBuilder()
                 .put(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE, EnableAllocationDecider.Rebalance.NONE)
@@ -610,7 +607,9 @@ public class DedicatedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTest
         assertThat(reusedShards.size(), greaterThanOrEqualTo(numberOfShards / 2));
     }
 
-    public void testRegistrationFailure() {
+
+    @Test
+    public void registrationFailureTest() {
         logger.info("--> start first node");
         internalCluster().startNode();
         logger.info("--> start second node");
@@ -629,6 +628,7 @@ public class DedicatedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTest
 
     }
 
+    @Test
     public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception {
         Settings nodeSettings = settingsBuilder().put().build();
         logger.info("--> start two nodes");
@@ -683,11 +683,12 @@ public class DedicatedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTest
         if (clusterStateError.get() != null) {
             throw clusterStateError.get();
         }
-
+        
     }
 
+    @Test
     @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/12621")
-    public void testChaosSnapshot() throws Exception {
+    public void chaosSnapshotTest() throws Exception {
         final List<String> indices = new CopyOnWriteArrayList<>();
         Settings settings = settingsBuilder().put("action.write_consistency", "one").build();
         int initialNodes = between(1, 3);
@@ -789,7 +790,9 @@ public class DedicatedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTest
         logger.info("--> done");
     }
 
-    public void testMasterShutdownDuringSnapshot() throws Exception {
+    @Test
+    public void masterShutdownDuringSnapshotTest() throws Exception {
+
         Settings masterSettings = settingsBuilder().put("node.data", false).build();
         Settings dataSettings = settingsBuilder().put("node.master", false).build();
 
diff --git a/core/src/test/java/org/elasticsearch/snapshots/RepositoriesIT.java b/core/src/test/java/org/elasticsearch/snapshots/RepositoriesIT.java
index 0bfc76f..c5221d1 100644
--- a/core/src/test/java/org/elasticsearch/snapshots/RepositoriesIT.java
+++ b/core/src/test/java/org/elasticsearch/snapshots/RepositoriesIT.java
@@ -33,6 +33,7 @@ import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.repositories.RepositoryException;
 import org.elasticsearch.repositories.RepositoryVerificationException;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.nio.file.Path;
 import java.util.List;
@@ -47,6 +48,8 @@ import static org.hamcrest.Matchers.notNullValue;
  */
 @ESIntegTestCase.ClusterScope(minNumDataNodes = 2)
 public class RepositoriesIT extends AbstractSnapshotIntegTestCase {
+
+    @Test
     public void testRepositoryCreation() throws Exception {
         Client client = client();
 
@@ -120,6 +123,7 @@ public class RepositoriesIT extends AbstractSnapshotIntegTestCase {
         return null;
     }
 
+    @Test
     public void testMisconfiguredRepository() throws Exception {
         Client client = client();
 
@@ -166,7 +170,8 @@ public class RepositoriesIT extends AbstractSnapshotIntegTestCase {
         }
     }
 
-    public void testRepositoryAckTimeout() throws Exception {
+    @Test
+    public void repositoryAckTimeoutTest() throws Exception {
         logger.info("-->  creating repository test-repo-1 with 0s timeout - shouldn't ack");
         PutRepositoryResponse putRepositoryResponse = client().admin().cluster().preparePutRepository("test-repo-1")
                 .setType("fs").setSettings(Settings.settingsBuilder()
@@ -196,7 +201,8 @@ public class RepositoriesIT extends AbstractSnapshotIntegTestCase {
         assertThat(deleteRepositoryResponse.isAcknowledged(), equalTo(true));
     }
 
-    public void testRepositoryVerification() throws Exception {
+    @Test
+    public void repositoryVerificationTest() throws Exception {
         Client client = client();
 
         Settings settings = Settings.settingsBuilder()
@@ -230,7 +236,8 @@ public class RepositoriesIT extends AbstractSnapshotIntegTestCase {
         }
     }
 
-    public void testRepositoryVerificationTimeout() throws Exception {
+    @Test
+    public void repositoryVerificationTimeoutTest() throws Exception {
         Client client = client();
 
         Settings settings = Settings.settingsBuilder()
diff --git a/core/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java b/core/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java
index 8043137..b909272 100644
--- a/core/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java
+++ b/core/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java
@@ -64,6 +64,7 @@ import org.elasticsearch.indices.InvalidIndexNameException;
 import org.elasticsearch.repositories.RepositoriesService;
 import org.elasticsearch.repositories.RepositoryException;
 import org.elasticsearch.test.junit.annotations.TestLogging;
+import org.junit.Test;
 
 import java.nio.channels.SeekableByteChannel;
 import java.nio.file.Files;
@@ -103,7 +104,9 @@ import static org.hamcrest.Matchers.nullValue;
 import static org.hamcrest.Matchers.startsWith;
 
 public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCase {
-    public void testBasicWorkFlow() throws Exception {
+
+    @Test
+    public void basicWorkFlowTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -200,7 +203,9 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         }
     }
 
-    public void testSingleGetAfterRestore() throws Exception {
+
+    @Test
+    public void singleGetAfterRestoreTest() throws Exception {
         String indexName = "testindex";
         String repoName = "test-restore-snapshot-repo";
         String snapshotName = "test-restore-snapshot";
@@ -240,6 +245,7 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         assertThat(client.prepareGet(restoredIndexName, typeName, docId).get().isExists(), equalTo(true));
     }
 
+    @Test
     public void testFreshIndexUUID() {
         Client client = client();
 
@@ -288,7 +294,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         assertFalse("UUID has been reused on restore: " + copyRestoreUUID + " vs. " + originalIndexUUID, copyRestoreUUID.equals(originalIndexUUID));
     }
 
-    public void testRestoreWithDifferentMappingsAndSettings() throws Exception {
+    @Test
+    public void restoreWithDifferentMappingsAndSettingsTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -336,7 +343,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         assertThat(getSettingsResponse.getSetting("test-idx", "index.refresh_interval"), equalTo("10000ms"));
     }
 
-    public void testEmptySnapshot() throws Exception {
+    @Test
+    public void emptySnapshotTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -352,7 +360,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         assertThat(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").get().getSnapshots().get(0).state(), equalTo(SnapshotState.SUCCESS));
     }
 
-    public void testRestoreAliases() throws Exception {
+    @Test
+    public void restoreAliasesTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -407,7 +416,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
 
     }
 
-    public void testRestoreTemplates() throws Exception {
+    @Test
+    public void restoreTemplatesTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -439,7 +449,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
 
     }
 
-    public void testIncludeGlobalState() throws Exception {
+    @Test
+    public void includeGlobalStateTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -517,7 +528,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
 
     }
 
-    public void testSnapshotFileFailureDuringSnapshot() throws Exception {
+    @Test
+    public void snapshotFileFailureDuringSnapshotTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -567,7 +579,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         }
     }
 
-    public void testDataFileFailureDuringSnapshot() throws Exception {
+    @Test
+    public void dataFileFailureDuringSnapshotTest() throws Exception {
         Client client = client();
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
@@ -630,9 +643,11 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
             }
             assertThat(indexStatus.getShardsStats().getFailedShards(), equalTo(numberOfFailures));
         }
+
     }
 
-    public void testDataFileFailureDuringRestore() throws Exception {
+    @Test
+    public void dataFileFailureDuringRestoreTest() throws Exception {
         Path repositoryLocation = randomRepoPath();
         Client client = client();
         logger.info("-->  creating repository");
@@ -673,7 +688,9 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         logger.info("--> total number of simulated failures during restore: [{}]", getFailureCount("test-repo"));
     }
 
-    public void testDeletionOfFailingToRecoverIndexShouldStopRestore() throws Exception {
+
+    @Test
+    public void deletionOfFailingToRecoverIndexShouldStopRestore() throws Exception {
         Path repositoryLocation = randomRepoPath();
         Client client = client();
         logger.info("-->  creating repository");
@@ -736,7 +753,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
 
     }
 
-    public void testUnallocatedShards() throws Exception {
+    @Test
+    public void unallocatedShardsTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -755,7 +773,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         assertThat(createSnapshotResponse.getSnapshotInfo().reason(), startsWith("Indices don't have primary shards"));
     }
 
-    public void testDeleteSnapshot() throws Exception {
+    @Test
+    public void deleteSnapshotTest() throws Exception {
         final int numberOfSnapshots = between(5, 15);
         Client client = client();
 
@@ -812,7 +831,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         assertThat(numberOfFiles(repo), equalTo(numberOfFiles[0]));
     }
 
-    public void testDeleteSnapshotWithMissingIndexAndShardMetadata() throws Exception {
+    @Test
+    public void deleteSnapshotWithMissingIndexAndShardMetadataTest() throws Exception {
         Client client = client();
 
         Path repo = randomRepoPath();
@@ -850,7 +870,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         assertThrows(client.admin().cluster().prepareGetSnapshots("test-repo").addSnapshots("test-snap-1"), SnapshotMissingException.class);
     }
 
-    public void testDeleteSnapshotWithMissingMetadata() throws Exception {
+    @Test
+    public void deleteSnapshotWithMissingMetadataTest() throws Exception {
         Client client = client();
 
         Path repo = randomRepoPath();
@@ -884,7 +905,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         assertThrows(client.admin().cluster().prepareGetSnapshots("test-repo").addSnapshots("test-snap-1"), SnapshotMissingException.class);
     }
 
-    public void testDeleteSnapshotWithCorruptedSnapshotFile() throws Exception {
+    @Test
+    public void deleteSnapshotWithCorruptedSnapshotFileTest() throws Exception {
         Client client = client();
 
         Path repo = randomRepoPath();
@@ -924,7 +946,9 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));
     }
 
-    public void testSnapshotClosedIndex() throws Exception {
+
+    @Test
+    public void snapshotClosedIndexTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -952,7 +976,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         assertBlocked(client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx", "test-idx-closed"), MetaDataIndexStateService.INDEX_CLOSED_BLOCK);
     }
 
-    public void testSnapshotSingleClosedIndex() throws Exception {
+    @Test
+    public void snapshotSingleClosedIndexTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -970,7 +995,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
                 .setWaitForCompletion(true).setIndices("test-idx"), MetaDataIndexStateService.INDEX_CLOSED_BLOCK);
     }
 
-    public void testRenameOnRestore() throws Exception {
+    @Test
+    public void renameOnRestoreTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -1089,7 +1115,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
 
     }
 
-    public void testMoveShardWhileSnapshotting() throws Exception {
+    @Test
+    public void moveShardWhileSnapshottingTest() throws Exception {
         Client client = client();
         Path repositoryLocation = randomRepoPath();
         logger.info("-->  creating repository");
@@ -1150,7 +1177,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         assertThat(client.prepareSearch("test-idx").setSize(0).get().getHits().totalHits(), equalTo(100L));
     }
 
-    public void testDeleteRepositoryWhileSnapshotting() throws Exception {
+    @Test
+    public void deleteRepositoryWhileSnapshottingTest() throws Exception {
         Client client = client();
         Path repositoryLocation = randomRepoPath();
         logger.info("-->  creating repository");
@@ -1232,7 +1260,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         assertThat(client.prepareSearch("test-idx").setSize(0).get().getHits().totalHits(), equalTo(100L));
     }
 
-    public void testUrlRepository() throws Exception {
+    @Test
+    public void urlRepositoryTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -1289,7 +1318,9 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         assertThat(getSnapshotsResponse.getSnapshots().size(), equalTo(0));
     }
 
-    public void testReadonlyRepository() throws Exception {
+
+    @Test
+    public void readonlyRepositoryTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -1344,7 +1375,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         assertThrows(client.admin().cluster().prepareCreateSnapshot("readonly-repo", "test-snap-2").setWaitForCompletion(true).setIndices("test-idx"), RepositoryException.class, "cannot create snapshot in a readonly repository");
     }
 
-    public void testThrottling() throws Exception {
+    @Test
+    public void throttlingTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -1402,7 +1434,9 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         }
     }
 
-    public void testSnapshotStatus() throws Exception {
+
+    @Test
+    public void snapshotStatusTest() throws Exception {
         Client client = client();
         Path repositoryLocation = randomRepoPath();
         logger.info("-->  creating repository");
@@ -1500,7 +1534,9 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         }
     }
 
-    public void testSnapshotRelocatingPrimary() throws Exception {
+
+    @Test
+    public void snapshotRelocatingPrimary() throws Exception {
         Client client = client();
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
@@ -1569,7 +1605,7 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         }
         indexRandom(true, builders);
         flushAndRefresh();
-        assertNoFailures(client().admin().indices().prepareOptimize("test").setFlush(true).setMaxNumSegments(1).get());
+        assertNoFailures(client().admin().indices().prepareForceMerge("test").setFlush(true).setMaxNumSegments(1).get());
 
         CreateSnapshotResponse createSnapshotResponseFirst = client.admin().cluster().prepareCreateSnapshot("test-repo", "test").setWaitForCompletion(true).setIndices("test").get();
         assertThat(createSnapshotResponseFirst.getSnapshotInfo().successfulShards(), greaterThan(0));
@@ -1609,7 +1645,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         }
     }
 
-    public void testChangeSettingsOnRestore() throws Exception {
+    @Test
+    public void changeSettingsOnRestoreTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -1723,7 +1760,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
 
     }
 
-    public void testRecreateBlocksOnRestore() throws Exception {
+    @Test
+    public void recreateBlocksOnRestoreTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -1812,7 +1850,8 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         }
     }
 
-    public void testDeleteIndexDuringSnapshot() throws Exception {
+    @Test
+    public void deleteIndexDuringSnapshotTest() throws Exception {
         Client client = client();
 
         boolean allowPartial = randomBoolean();
@@ -1864,7 +1903,9 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         }
     }
 
-    public void testDeleteOrphanSnapshot() throws Exception {
+
+    @Test
+    public void deleteOrphanSnapshotTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
@@ -1929,8 +1970,10 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         return awaitBusy(() -> client().admin().cluster().prepareHealth(index).execute().actionGet().getRelocatingShards() > 0, timeout.millis(), TimeUnit.MILLISECONDS);
     }
 
+    @Test
     @TestLogging("cluster:DEBUG")
-    public void testBatchingShardUpdateTask() throws Exception {
+    public void batchingShardUpdateTaskTest() throws Exception {
+
         final Client client = client();
 
         logger.info("-->  creating repository");
@@ -2009,7 +2052,9 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
         assertEquals(1, restoreListener.count());
     }
 
-    public void testSnapshotName() throws Exception {
+    @Test
+    public void snapshotNameTest() throws Exception {
+
         final Client client = client();
 
         logger.info("-->  creating repository");
@@ -2047,4 +2092,4 @@ public class SharedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTestCas
             assertThat(ex.getMessage(), containsString("Invalid snapshot name"));
         }
     }
-}
\ No newline at end of file
+}
diff --git a/core/src/test/java/org/elasticsearch/snapshots/SnapshotBackwardsCompatibilityIT.java b/core/src/test/java/org/elasticsearch/snapshots/SnapshotBackwardsCompatibilityIT.java
index b66d457..c6de3ea 100644
--- a/core/src/test/java/org/elasticsearch/snapshots/SnapshotBackwardsCompatibilityIT.java
+++ b/core/src/test/java/org/elasticsearch/snapshots/SnapshotBackwardsCompatibilityIT.java
@@ -33,6 +33,7 @@ import org.elasticsearch.common.io.FileSystemUtils;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.test.ESBackcompatTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.nio.file.Files;
@@ -49,6 +50,8 @@ import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.lessThan;
 
 public class SnapshotBackwardsCompatibilityIT extends ESBackcompatTestCase {
+
+    @Test
     public void testSnapshotAndRestore() throws ExecutionException, InterruptedException, IOException {
         logger.info("-->  creating repository");
         assertAcked(client().admin().cluster().preparePutRepository("test-repo")
@@ -182,7 +185,7 @@ public class SnapshotBackwardsCompatibilityIT extends ESBackcompatTestCase {
         }
         indexRandom(true, builders);
         flushAndRefresh();
-        assertNoFailures(client().admin().indices().prepareOptimize("test").setFlush(true).setMaxNumSegments(1).get());
+        assertNoFailures(client().admin().indices().prepareForceMerge("test").setFlush(true).setMaxNumSegments(1).get());
 
         CreateSnapshotResponse createSnapshotResponseFirst = client.admin().cluster().prepareCreateSnapshot("test-repo", "test").setWaitForCompletion(true).setIndices("test").get();
         assertThat(createSnapshotResponseFirst.getSnapshotInfo().successfulShards(), greaterThan(0));
diff --git a/core/src/test/java/org/elasticsearch/snapshots/SnapshotRequestsTests.java b/core/src/test/java/org/elasticsearch/snapshots/SnapshotRequestsTests.java
index 38d858c..7cf56bf 100644
--- a/core/src/test/java/org/elasticsearch/snapshots/SnapshotRequestsTests.java
+++ b/core/src/test/java/org/elasticsearch/snapshots/SnapshotRequestsTests.java
@@ -24,13 +24,16 @@ import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotR
 import org.elasticsearch.action.support.IndicesOptions;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 
 public class SnapshotRequestsTests extends ESTestCase {
+    @Test
     public void testRestoreSnapshotRequestParsing() throws IOException {
+
         RestoreSnapshotRequest request = new RestoreSnapshotRequest("test-repo", "test-snap");
 
         XContentBuilder builder = jsonBuilder().startObject();
@@ -91,7 +94,9 @@ public class SnapshotRequestsTests extends ESTestCase {
 
     }
 
+    @Test
     public void testCreateSnapshotRequestParsing() throws IOException {
+
         CreateSnapshotRequest request = new CreateSnapshotRequest("test-repo", "test-snap");
 
         XContentBuilder builder = jsonBuilder().startObject();
diff --git a/core/src/test/java/org/elasticsearch/snapshots/SnapshotUtilsTests.java b/core/src/test/java/org/elasticsearch/snapshots/SnapshotUtilsTests.java
index a121427..8e9d7cb 100644
--- a/core/src/test/java/org/elasticsearch/snapshots/SnapshotUtilsTests.java
+++ b/core/src/test/java/org/elasticsearch/snapshots/SnapshotUtilsTests.java
@@ -20,6 +20,7 @@ package org.elasticsearch.snapshots;
 
 import org.elasticsearch.action.support.IndicesOptions;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.List;
@@ -29,6 +30,7 @@ import static org.hamcrest.Matchers.containsInAnyOrder;
 /**
  */
 public class SnapshotUtilsTests extends ESTestCase {
+    @Test
     public void testIndexNameFiltering() {
         assertIndexNameFiltering(new String[]{"foo", "bar", "baz"}, new String[]{}, new String[]{"foo", "bar", "baz"});
         assertIndexNameFiltering(new String[]{"foo", "bar", "baz"}, new String[]{"*"}, new String[]{"foo", "bar", "baz"});
diff --git a/core/src/test/java/org/elasticsearch/test/ESIntegTestCase.java b/core/src/test/java/org/elasticsearch/test/ESIntegTestCase.java
index 1c9c82c..912660b 100644
--- a/core/src/test/java/org/elasticsearch/test/ESIntegTestCase.java
+++ b/core/src/test/java/org/elasticsearch/test/ESIntegTestCase.java
@@ -24,7 +24,6 @@ import com.carrotsearch.randomizedtesting.Randomness;
 import com.carrotsearch.randomizedtesting.annotations.TestGroup;
 import com.carrotsearch.randomizedtesting.generators.RandomInts;
 import com.carrotsearch.randomizedtesting.generators.RandomPicks;
-
 import org.apache.http.impl.client.HttpClients;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
@@ -44,7 +43,7 @@ import org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;
 import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsResponse;
 import org.elasticsearch.action.admin.indices.flush.FlushResponse;
 import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeResponse;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeResponse;
 import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;
 import org.elasticsearch.action.admin.indices.segments.IndicesSegmentResponse;
 import org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;
@@ -129,33 +128,15 @@ import org.junit.BeforeClass;
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.lang.annotation.Annotation;
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Inherited;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
+import java.lang.annotation.*;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.UnknownHostException;
 import java.nio.file.DirectoryStream;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.IdentityHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
-import java.util.Set;
-import java.util.concurrent.Callable;
-import java.util.concurrent.CopyOnWriteArrayList;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.TimeUnit;
+import java.util.*;
+import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.function.BooleanSupplier;
@@ -167,15 +148,8 @@ import static org.elasticsearch.common.util.CollectionUtils.eagerPartition;
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
 import static org.elasticsearch.test.XContentTestUtils.convertToMap;
 import static org.elasticsearch.test.XContentTestUtils.differenceBetweenMapsIgnoringArrayOrder;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoTimeout;
-import static org.hamcrest.Matchers.emptyArray;
-import static org.hamcrest.Matchers.emptyIterable;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.startsWith;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
+import static org.hamcrest.Matchers.*;
 
 /**
  * {@link ESIntegTestCase} is an abstract base class to run integration
@@ -194,7 +168,7 @@ import static org.hamcrest.Matchers.startsWith;
  * <pre>
  *
  * @ClusterScope(scope=Scope.TEST) public class SomeIT extends ESIntegTestCase {
- * public void testMethod() {}
+ * @Test public void testMethod() {}
  * }
  * </pre>
  * <p>
@@ -206,7 +180,7 @@ import static org.hamcrest.Matchers.startsWith;
  *  <pre>
  * @ClusterScope(scope=Scope.SUITE, numDataNodes=3)
  * public class SomeIT extends ESIntegTestCase {
- * public void testMethod() {}
+ * @Test public void testMethod() {}
  * }
  * </pre>
  * <p>
@@ -1276,11 +1250,11 @@ public abstract class ESIntegTestCase extends ESTestCase {
     }
 
     /**
-     * Waits for all relocations and optimized all indices in the cluster to 1 segment.
+     * Waits for all relocations and force merge all indices in the cluster to 1 segment.
      */
-    protected OptimizeResponse optimize() {
+    protected ForceMergeResponse forceMerge() {
         waitForRelocation();
-        OptimizeResponse actionGet = client().admin().indices().prepareOptimize().setMaxNumSegments(1).execute().actionGet();
+        ForceMergeResponse actionGet = client().admin().indices().prepareForceMerge().setMaxNumSegments(1).execute().actionGet();
         assertNoFailures(actionGet);
         return actionGet;
     }
@@ -1498,7 +1472,7 @@ public abstract class ESIntegTestCase extends ESTestCase {
     }
 
     /**
-     * Maybe refresh, optimize, or flush then always make sure there aren't too many in flight async operations.
+     * Maybe refresh, force merge, or flush then always make sure there aren't too many in flight async operations.
      */
     private void postIndexAsyncActions(String[] indices, List<CountDownLatch> inFlightAsyncOperations, boolean maybeFlush) throws InterruptedException {
         if (rarely()) {
@@ -1514,8 +1488,8 @@ public abstract class ESIntegTestCase extends ESTestCase {
                             new LatchedActionListener<>(newLatch(inFlightAsyncOperations)));
                 }
             } else if (rarely()) {
-                client().admin().indices().prepareOptimize(indices).setIndicesOptions(IndicesOptions.lenientExpandOpen()).setMaxNumSegments(between(1, 10)).setFlush(maybeFlush && randomBoolean()).execute(
-                        new LatchedActionListener<>(newLatch(inFlightAsyncOperations)));
+                client().admin().indices().prepareForceMerge(indices).setIndicesOptions(IndicesOptions.lenientExpandOpen()).setMaxNumSegments(between(1, 10)).setFlush(maybeFlush && randomBoolean()).execute(
+                        new LatchedActionListener<ForceMergeResponse>(newLatch(inFlightAsyncOperations)));
             }
         }
         while (inFlightAsyncOperations.size() > MAX_IN_FLIGHT_ASYNC_INDEXES) {
diff --git a/core/src/test/java/org/elasticsearch/test/InternalTestCluster.java b/core/src/test/java/org/elasticsearch/test/InternalTestCluster.java
index b61e41f..19ded47 100644
--- a/core/src/test/java/org/elasticsearch/test/InternalTestCluster.java
+++ b/core/src/test/java/org/elasticsearch/test/InternalTestCluster.java
@@ -409,7 +409,7 @@ public final class InternalTestCluster extends TestCluster {
         if (random.nextBoolean()) {
             // change threadpool types to make sure we don't have components that rely on the type of thread pools
             for (String name : Arrays.asList(ThreadPool.Names.BULK, ThreadPool.Names.FLUSH, ThreadPool.Names.GET,
-                    ThreadPool.Names.INDEX, ThreadPool.Names.MANAGEMENT, ThreadPool.Names.OPTIMIZE,
+                    ThreadPool.Names.INDEX, ThreadPool.Names.MANAGEMENT, ThreadPool.Names.FORCE_MERGE,
                     ThreadPool.Names.PERCOLATE, ThreadPool.Names.REFRESH, ThreadPool.Names.SEARCH, ThreadPool.Names.SNAPSHOT,
                     ThreadPool.Names.SUGGEST, ThreadPool.Names.WARMER)) {
                 if (random.nextBoolean()) {
diff --git a/core/src/test/java/org/elasticsearch/test/disruption/NetworkPartitionIT.java b/core/src/test/java/org/elasticsearch/test/disruption/NetworkPartitionIT.java
index b1ce973..fc2b946 100644
--- a/core/src/test/java/org/elasticsearch/test/disruption/NetworkPartitionIT.java
+++ b/core/src/test/java/org/elasticsearch/test/disruption/NetworkPartitionIT.java
@@ -17,22 +17,27 @@
  * under the License.
  */
 
+
 package org.elasticsearch.test.disruption;
 
+
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.InternalTestCluster;
 import org.elasticsearch.test.transport.MockTransportService;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Collection;
 
 public class NetworkPartitionIT extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return pluginList(MockTransportService.TestPlugin.class);
     }
 
+    @Test
     public void testNetworkPartitionWithNodeShutdown() throws IOException {
         internalCluster().ensureAtLeastNumDataNodes(2);
         String[] nodeNames = internalCluster().getNodeNames();
diff --git a/core/src/test/java/org/elasticsearch/test/rest/ESRestTestCase.java b/core/src/test/java/org/elasticsearch/test/rest/ESRestTestCase.java
index 8058089..33ddea0 100644
--- a/core/src/test/java/org/elasticsearch/test/rest/ESRestTestCase.java
+++ b/core/src/test/java/org/elasticsearch/test/rest/ESRestTestCase.java
@@ -22,7 +22,6 @@ package org.elasticsearch.test.rest;
 import com.carrotsearch.randomizedtesting.RandomizedTest;
 import com.carrotsearch.randomizedtesting.annotations.TestGroup;
 import com.carrotsearch.randomizedtesting.annotations.TimeoutSuite;
-
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase.SuppressCodecs;
 import org.apache.lucene.util.LuceneTestCase.SuppressFsync;
@@ -50,6 +49,7 @@ import org.elasticsearch.test.rest.support.FileUtils;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -158,7 +158,7 @@ public abstract class ESRestTestCase extends ESIntegTestCase {
             .put("node.testattr", "test")
             .put(super.nodeSettings(nodeOrdinal)).build();
     }
-
+    
     public static Iterable<Object[]> createParameters(int id, int count) throws IOException, RestTestParseException {
         TestGroup testGroup = Rest.class.getAnnotation(TestGroup.class);
         String sysProperty = TestGroup.Utilities.getSysProperty(Rest.class);
@@ -217,7 +217,7 @@ public abstract class ESRestTestCase extends ESIntegTestCase {
 
         return testCandidates;
     }
-
+    
     private static boolean mustExecute(String test, int id, int count) {
         int hash = (int) (Math.abs((long)test.hashCode()) % count);
         return hash == id;
@@ -239,13 +239,13 @@ public abstract class ESRestTestCase extends ESIntegTestCase {
     @SuppressForbidden(reason = "proper use of URL, hack around a JDK bug")
     static FileSystem getFileSystem() throws IOException {
         // REST suite handling is currently complicated, with lots of filtering and so on
-        // For now, to work embedded in a jar, return a ZipFileSystem over the jar contents.
+        // For now, to work embedded in a jar, return a ZipFileSystem over the jar contents. 
         URL codeLocation = FileUtils.class.getProtectionDomain().getCodeSource().getLocation();
         boolean loadPackaged = RandomizedTest.systemPropertyAsBoolean(REST_LOAD_PACKAGED_TESTS, true);
         if (codeLocation.getFile().endsWith(".jar") && loadPackaged) {
             try {
                 // hack around a bug in the zipfilesystem implementation before java 9,
-                // its checkWritable was incorrect and it won't work without write permissions.
+                // its checkWritable was incorrect and it won't work without write permissions. 
                 // if we add the permission, it will open jars r/w, which is too scary! so copy to a safe r-w location.
                 Path tmp = Files.createTempFile(null, ".jar");
                 try (InputStream in = codeLocation.openStream()) {
@@ -352,6 +352,7 @@ public abstract class ESRestTestCase extends ESIntegTestCase {
         return messageBuilder.toString();
     }
 
+    @Test
     public void test() throws IOException {
         //let's check that there is something to run, otherwise there might be a problem with the test section
         if (testCandidate.getTestSection().getExecutableSections().size() == 0) {
diff --git a/core/src/test/java/org/elasticsearch/test/rest/test/AssertionParsersTests.java b/core/src/test/java/org/elasticsearch/test/rest/test/AssertionParsersTests.java
index 68b84b9..b316ae0 100644
--- a/core/src/test/java/org/elasticsearch/test/rest/test/AssertionParsersTests.java
+++ b/core/src/test/java/org/elasticsearch/test/rest/test/AssertionParsersTests.java
@@ -19,28 +19,18 @@
 package org.elasticsearch.test.rest.test;
 
 import org.elasticsearch.common.xcontent.yaml.YamlXContent;
-import org.elasticsearch.test.rest.parser.GreaterThanParser;
-import org.elasticsearch.test.rest.parser.IsFalseParser;
-import org.elasticsearch.test.rest.parser.IsTrueParser;
-import org.elasticsearch.test.rest.parser.LengthParser;
-import org.elasticsearch.test.rest.parser.LessThanParser;
-import org.elasticsearch.test.rest.parser.MatchParser;
-import org.elasticsearch.test.rest.parser.RestTestSuiteParseContext;
-import org.elasticsearch.test.rest.section.GreaterThanAssertion;
-import org.elasticsearch.test.rest.section.IsFalseAssertion;
-import org.elasticsearch.test.rest.section.IsTrueAssertion;
-import org.elasticsearch.test.rest.section.LengthAssertion;
-import org.elasticsearch.test.rest.section.LessThanAssertion;
-import org.elasticsearch.test.rest.section.MatchAssertion;
+import org.elasticsearch.test.rest.parser.*;
+import org.elasticsearch.test.rest.section.*;
+import org.junit.Test;
 
 import java.util.List;
 import java.util.Map;
 
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.*;
 
 public class AssertionParsersTests extends AbstractParserTestCase {
+
+    @Test
     public void testParseIsTrue() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "get.fields._timestamp"
@@ -53,6 +43,7 @@ public class AssertionParsersTests extends AbstractParserTestCase {
         assertThat(trueAssertion.getField(), equalTo("get.fields._timestamp"));
     }
 
+    @Test
     public void testParseIsFalse() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "docs.1._source"
@@ -65,6 +56,7 @@ public class AssertionParsersTests extends AbstractParserTestCase {
         assertThat(falseAssertion.getField(), equalTo("docs.1._source"));
     }
 
+    @Test
     public void testParseGreaterThan() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "{ field: 3}"
@@ -78,6 +70,7 @@ public class AssertionParsersTests extends AbstractParserTestCase {
         assertThat((Integer) greaterThanAssertion.getExpectedValue(), equalTo(3));
     }
 
+    @Test
     public void testParseLessThan() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "{ field: 3}"
@@ -91,6 +84,7 @@ public class AssertionParsersTests extends AbstractParserTestCase {
         assertThat((Integer) lessThanAssertion.getExpectedValue(), equalTo(3));
     }
 
+    @Test
     public void testParseLength() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "{ _id: 22}"
@@ -104,6 +98,8 @@ public class AssertionParsersTests extends AbstractParserTestCase {
         assertThat((Integer) lengthAssertion.getExpectedValue(), equalTo(22));
     }
 
+    @Test
+    @SuppressWarnings("unchecked")
     public void testParseMatchSimpleIntegerValue() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "{ field: 10 }"
@@ -118,6 +114,8 @@ public class AssertionParsersTests extends AbstractParserTestCase {
         assertThat((Integer) matchAssertion.getExpectedValue(), equalTo(10));
     }
 
+    @Test
+    @SuppressWarnings("unchecked")
     public void testParseMatchSimpleStringValue() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "{ foo: bar }"
@@ -132,6 +130,8 @@ public class AssertionParsersTests extends AbstractParserTestCase {
         assertThat(matchAssertion.getExpectedValue().toString(), equalTo("bar"));
     }
 
+    @Test
+    @SuppressWarnings("unchecked")
     public void testParseMatchArray() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "{'matches': ['test_percolator_1', 'test_percolator_2']}"
@@ -149,6 +149,7 @@ public class AssertionParsersTests extends AbstractParserTestCase {
         assertThat(strings.get(1).toString(), equalTo("test_percolator_2"));
     }
 
+    @Test
     @SuppressWarnings("unchecked")
     public void testParseMatchSourceValues() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
diff --git a/core/src/test/java/org/elasticsearch/test/rest/test/DoSectionParserTests.java b/core/src/test/java/org/elasticsearch/test/rest/test/DoSectionParserTests.java
index 5f0f2bd..c3aba81 100644
--- a/core/src/test/java/org/elasticsearch/test/rest/test/DoSectionParserTests.java
+++ b/core/src/test/java/org/elasticsearch/test/rest/test/DoSectionParserTests.java
@@ -27,16 +27,18 @@ import org.elasticsearch.test.rest.parser.RestTestSuiteParseContext;
 import org.elasticsearch.test.rest.section.ApiCallSection;
 import org.elasticsearch.test.rest.section.DoSection;
 import org.hamcrest.MatcherAssert;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Map;
 
 import static org.hamcrest.CoreMatchers.equalTo;
-import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.notNullValue;
 import static org.hamcrest.Matchers.nullValue;
 
 public class DoSectionParserTests extends AbstractParserTestCase {
+
+    @Test
     public void testParseDoSectionNoBody() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "get:\n" +
@@ -58,6 +60,7 @@ public class DoSectionParserTests extends AbstractParserTestCase {
         assertThat(apiCallSection.hasBody(), equalTo(false));
     }
 
+    @Test
     public void testParseDoSectionNoParamsNoBody() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "cluster.node_info: {}"
@@ -73,6 +76,7 @@ public class DoSectionParserTests extends AbstractParserTestCase {
         assertThat(apiCallSection.hasBody(), equalTo(false));
     }
 
+    @Test
     public void testParseDoSectionWithJsonBody() throws Exception {
         String body = "{ \"include\": { \"field1\": \"v1\", \"field2\": \"v2\" }, \"count\": 1 }";
         parser = YamlXContent.yamlXContent.createParser(
@@ -98,6 +102,7 @@ public class DoSectionParserTests extends AbstractParserTestCase {
         assertJsonEquals(apiCallSection.getBodies().get(0), body);
     }
 
+    @Test
     public void testParseDoSectionWithJsonMultipleBodiesAsLongString() throws Exception {
         String bodies[] = new String[]{
                 "{ \"index\": { \"_index\":\"test_index\", \"_type\":\"test_type\", \"_id\":\"test_id\" } }\n",
@@ -127,6 +132,7 @@ public class DoSectionParserTests extends AbstractParserTestCase {
         assertThat(apiCallSection.getBodies().size(), equalTo(4));
     }
 
+    @Test
     public void testParseDoSectionWithJsonMultipleBodiesRepeatedProperty() throws Exception {
         String[] bodies = new String[] {
                 "{ \"index\": { \"_index\":\"test_index\", \"_type\":\"test_type\", \"_id\":\"test_id\" } }",
@@ -156,6 +162,7 @@ public class DoSectionParserTests extends AbstractParserTestCase {
         }
     }
 
+    @Test
     public void testParseDoSectionWithYamlBody() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "search:\n" +
@@ -177,6 +184,7 @@ public class DoSectionParserTests extends AbstractParserTestCase {
         assertJsonEquals(apiCallSection.getBodies().get(0), body);
     }
 
+    @Test
     public void testParseDoSectionWithYamlMultipleBodies() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "bulk:\n" +
@@ -217,6 +225,7 @@ public class DoSectionParserTests extends AbstractParserTestCase {
         }
     }
 
+    @Test
     public void testParseDoSectionWithYamlMultipleBodiesRepeatedProperty() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "bulk:\n" +
@@ -250,6 +259,7 @@ public class DoSectionParserTests extends AbstractParserTestCase {
         }
     }
 
+    @Test
     public void testParseDoSectionWithYamlBodyMultiGet() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "mget:\n" +
@@ -275,6 +285,7 @@ public class DoSectionParserTests extends AbstractParserTestCase {
         assertJsonEquals(apiCallSection.getBodies().get(0), body);
     }
 
+    @Test
     public void testParseDoSectionWithBodyStringified() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "index:\n" +
@@ -300,6 +311,7 @@ public class DoSectionParserTests extends AbstractParserTestCase {
         assertJsonEquals(apiCallSection.getBodies().get(0), "{ _source: true, query: { match_all: {} } }");
     }
 
+    @Test
     public void testParseDoSectionWithBodiesStringifiedAndNot() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "index:\n" +
@@ -323,6 +335,7 @@ public class DoSectionParserTests extends AbstractParserTestCase {
         assertJsonEquals(apiCallSection.getBodies().get(1), body);
     }
 
+    @Test
     public void testParseDoSectionWithCatch() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "catch: missing\n" +
@@ -341,20 +354,17 @@ public class DoSectionParserTests extends AbstractParserTestCase {
         assertThat(doSection.getApiCallSection().hasBody(), equalTo(false));
     }
 
+    @Test (expected = RestTestParseException.class)
     public void testParseDoSectionWithoutClientCallSection() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "catch: missing\n"
         );
 
         DoSectionParser doSectionParser = new DoSectionParser();
-        try {
-            doSectionParser.parse(new RestTestSuiteParseContext("api", "suite", parser));
-            fail("Expected RestTestParseException");
-        } catch (RestTestParseException e) {
-            assertThat(e.getMessage(), is("client call section is mandatory within a do section"));
-        }
+        doSectionParser.parse(new RestTestSuiteParseContext("api", "suite", parser));
     }
 
+    @Test
     public void testParseDoSectionMultivaluedField() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "indices.get_field_mapping:\n" +
diff --git a/core/src/test/java/org/elasticsearch/test/rest/test/FileUtilsTests.java b/core/src/test/java/org/elasticsearch/test/rest/test/FileUtilsTests.java
index 20bd7a2..2aad874 100644
--- a/core/src/test/java/org/elasticsearch/test/rest/test/FileUtilsTests.java
+++ b/core/src/test/java/org/elasticsearch/test/rest/test/FileUtilsTests.java
@@ -20,6 +20,7 @@ package org.elasticsearch.test.rest.test;
 
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.rest.support.FileUtils;
+import org.junit.Test;
 
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -31,6 +32,8 @@ import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.hamcrest.Matchers.greaterThan;
 
 public class FileUtilsTests extends ESTestCase {
+
+    @Test
     public void testLoadSingleYamlSuite() throws Exception {
         Map<String,Set<Path>> yamlSuites = FileUtils.findYamlSuites(null, "/rest-api-spec/test", "/rest-api-spec/test/get/10_basic");
         assertSingleFile(yamlSuites, "get", "10_basic.yaml");
@@ -44,6 +47,7 @@ public class FileUtilsTests extends ESTestCase {
         assertSingleFile(yamlSuites, "get", "10_basic.yaml");
     }
 
+    @Test
     public void testLoadMultipleYamlSuites() throws Exception {
         //single directory
         Map<String,Set<Path>> yamlSuites = FileUtils.findYamlSuites(null, "/rest-api-spec/test", "get");
diff --git a/core/src/test/java/org/elasticsearch/test/rest/test/JsonPathTests.java b/core/src/test/java/org/elasticsearch/test/rest/test/JsonPathTests.java
index fefcd57..dfc1225 100644
--- a/core/src/test/java/org/elasticsearch/test/rest/test/JsonPathTests.java
+++ b/core/src/test/java/org/elasticsearch/test/rest/test/JsonPathTests.java
@@ -21,19 +21,17 @@ package org.elasticsearch.test.rest.test;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.rest.Stash;
 import org.elasticsearch.test.rest.json.JsonPath;
+import org.junit.Test;
 
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import static org.hamcrest.Matchers.contains;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 public class JsonPathTests extends ESTestCase {
+
+    @Test
     public void testEvaluateObjectPathEscape() throws Exception {
         String json = "{ \"field1\": { \"field2.field3\" : \"value2\" } }";
         JsonPath jsonPath = new JsonPath(json);
@@ -42,6 +40,7 @@ public class JsonPathTests extends ESTestCase {
         assertThat((String)object, equalTo("value2"));
     }
 
+    @Test
     public void testEvaluateObjectPathWithDoubleDot() throws Exception {
         String json = "{ \"field1\": { \"field2\" : \"value2\" } }";
         JsonPath jsonPath = new JsonPath(json);
@@ -50,6 +49,7 @@ public class JsonPathTests extends ESTestCase {
         assertThat((String)object, equalTo("value2"));
     }
 
+    @Test
     public void testEvaluateObjectPathEndsWithDot() throws Exception {
         String json = "{ \"field1\": { \"field2\" : \"value2\" } }";
         JsonPath jsonPath = new JsonPath(json);
@@ -58,6 +58,7 @@ public class JsonPathTests extends ESTestCase {
         assertThat((String)object, equalTo("value2"));
     }
 
+    @Test
     public void testEvaluateString() throws Exception {
         String json = "{ \"field1\": { \"field2\" : \"value2\" } }";
         JsonPath jsonPath = new JsonPath(json);
@@ -66,6 +67,7 @@ public class JsonPathTests extends ESTestCase {
         assertThat((String)object, equalTo("value2"));
     }
 
+    @Test
     public void testEvaluateInteger() throws Exception {
         String json = "{ \"field1\": { \"field2\" : 333 } }";
         JsonPath jsonPath = new JsonPath(json);
@@ -74,6 +76,7 @@ public class JsonPathTests extends ESTestCase {
         assertThat((Integer)object, equalTo(333));
     }
 
+    @Test
     public void testEvaluateDouble() throws Exception {
         String json = "{ \"field1\": { \"field2\" : 3.55 } }";
         JsonPath jsonPath = new JsonPath(json);
@@ -82,6 +85,7 @@ public class JsonPathTests extends ESTestCase {
         assertThat((Double)object, equalTo(3.55));
     }
 
+    @Test
     public void testEvaluateArray() throws Exception {
         String json = "{ \"field1\": { \"array1\" : [ \"value1\", \"value2\" ] } }";
         JsonPath jsonPath = new JsonPath(json);
@@ -95,6 +99,7 @@ public class JsonPathTests extends ESTestCase {
         assertThat((String)list.get(1), equalTo("value2"));
     }
 
+    @Test
     public void testEvaluateArrayElement() throws Exception {
         String json = "{ \"field1\": { \"array1\" : [ \"value1\", \"value2\" ] } }";
         JsonPath jsonPath = new JsonPath(json);
@@ -103,6 +108,7 @@ public class JsonPathTests extends ESTestCase {
         assertThat((String)object, equalTo("value2"));
     }
 
+    @Test
     public void testEvaluateArrayElementObject() throws Exception {
         String json = "{ \"field1\": { \"array1\" : [ {\"element\": \"value1\"}, {\"element\":\"value2\"} ] } }";
         JsonPath jsonPath = new JsonPath(json);
@@ -111,6 +117,7 @@ public class JsonPathTests extends ESTestCase {
         assertThat((String)object, equalTo("value2"));
     }
 
+    @Test
     public void testEvaluateArrayElementObjectWrongPath() throws Exception {
         String json = "{ \"field1\": { \"array1\" : [ {\"element\": \"value1\"}, {\"element\":\"value2\"} ] } }";
         JsonPath jsonPath = new JsonPath(json);
@@ -118,6 +125,7 @@ public class JsonPathTests extends ESTestCase {
         assertThat(object, nullValue());
     }
 
+    @Test
     @SuppressWarnings("unchecked")
     public void testEvaluateObjectKeys() throws Exception {
         String json = "{ \"metadata\": { \"templates\" : {\"template_1\": { \"field\" : \"value\"}, \"template_2\": { \"field\" : \"value\"} } } }";
@@ -130,6 +138,7 @@ public class JsonPathTests extends ESTestCase {
         assertThat(strings, contains("template_1", "template_2"));
     }
 
+    @Test
     @SuppressWarnings("unchecked")
     public void testEvaluateEmptyPath() throws Exception {
         String json = "{ \"field1\": { \"array1\" : [ {\"element\": \"value1\"}, {\"element\":\"value2\"} ] } }";
@@ -140,6 +149,7 @@ public class JsonPathTests extends ESTestCase {
         assertThat(((Map<String, Object>)object).containsKey("field1"), equalTo(true));
     }
 
+    @Test
     public void testEvaluateStashInPropertyName() throws Exception {
         String json = "{ \"field1\": { \"elements\" : {\"element1\": \"value1\"}}}";
         JsonPath jsonPath = new JsonPath(json);
diff --git a/core/src/test/java/org/elasticsearch/test/rest/test/RestApiParserFailingTests.java b/core/src/test/java/org/elasticsearch/test/rest/test/RestApiParserFailingTests.java
index e2f321c..c25ebd4 100644
--- a/core/src/test/java/org/elasticsearch/test/rest/test/RestApiParserFailingTests.java
+++ b/core/src/test/java/org/elasticsearch/test/rest/test/RestApiParserFailingTests.java
@@ -22,6 +22,7 @@ import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.json.JsonXContent;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.rest.spec.RestApiParser;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -31,11 +32,14 @@ import static org.hamcrest.Matchers.containsString;
  *
  */
 public class RestApiParserFailingTests extends ESTestCase {
-    public void testBrokenSpecShouldThrowUsefulExceptionWhenParsingFailsOnParams() throws Exception {
+
+    @Test
+    public void brokenSpecShouldThrowUsefulExceptionWhenParsingFailsOnParams() throws Exception {
         parseAndExpectFailure(BROKEN_SPEC_PARAMS, "Expected params field in rest api definition to contain an object");
     }
 
-    public void testBrokenSpecShouldThrowUsefulExceptionWhenParsingFailsOnParts() throws Exception {
+    @Test
+    public void brokenSpecShouldThrowUsefulExceptionWhenParsingFailsOnParts() throws Exception {
         parseAndExpectFailure(BROKEN_SPEC_PARTS, "Expected parts field in rest api definition to contain an object");
     }
 
@@ -47,6 +51,7 @@ public class RestApiParserFailingTests extends ESTestCase {
         } catch (IOException e) {
             assertThat(e.getMessage(), containsString(expectedErrorMessage));
         }
+
     }
 
     // see params section is broken, an inside param is missing
diff --git a/core/src/test/java/org/elasticsearch/test/rest/test/RestApiParserTests.java b/core/src/test/java/org/elasticsearch/test/rest/test/RestApiParserTests.java
index 262b155..7f4cdf1 100644
--- a/core/src/test/java/org/elasticsearch/test/rest/test/RestApiParserTests.java
+++ b/core/src/test/java/org/elasticsearch/test/rest/test/RestApiParserTests.java
@@ -21,12 +21,15 @@ package org.elasticsearch.test.rest.test;
 import org.elasticsearch.common.xcontent.json.JsonXContent;
 import org.elasticsearch.test.rest.spec.RestApi;
 import org.elasticsearch.test.rest.spec.RestApiParser;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.contains;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.notNullValue;
 
 public class RestApiParserTests extends AbstractParserTestCase {
+
+    @Test
     public void testParseRestSpecIndexApi() throws Exception {
         parser = JsonXContent.jsonXContent.createParser(REST_SPEC_INDEX_API);
         RestApi restApi = new RestApiParser().parse(parser);
@@ -49,6 +52,7 @@ public class RestApiParserTests extends AbstractParserTestCase {
         assertThat(restApi.isBodyRequired(), equalTo(true));
     }
 
+    @Test
     public void testParseRestSpecGetTemplateApi() throws Exception {
         parser = JsonXContent.jsonXContent.createParser(REST_SPEC_GET_TEMPLATE_API);
         RestApi restApi = new RestApiParser().parse(parser);
@@ -66,6 +70,7 @@ public class RestApiParserTests extends AbstractParserTestCase {
         assertThat(restApi.isBodyRequired(), equalTo(false));
     }
 
+    @Test
     public void testParseRestSpecCountApi() throws Exception {
         parser = JsonXContent.jsonXContent.createParser(REST_SPEC_COUNT_API);
         RestApi restApi = new RestApiParser().parse(parser);
diff --git a/core/src/test/java/org/elasticsearch/test/rest/test/RestTestParserTests.java b/core/src/test/java/org/elasticsearch/test/rest/test/RestTestParserTests.java
index e15b621..5a31bfb 100644
--- a/core/src/test/java/org/elasticsearch/test/rest/test/RestTestParserTests.java
+++ b/core/src/test/java/org/elasticsearch/test/rest/test/RestTestParserTests.java
@@ -30,16 +30,14 @@ import org.elasticsearch.test.rest.section.IsTrueAssertion;
 import org.elasticsearch.test.rest.section.MatchAssertion;
 import org.elasticsearch.test.rest.section.RestTestSuite;
 import org.junit.After;
+import org.junit.Test;
 
 import java.util.Map;
 
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 public class RestTestParserTests extends ESTestCase {
+
     private XContentParser parser;
 
     @Override
@@ -54,6 +52,7 @@ public class RestTestParserTests extends ESTestCase {
         parser.close();
     }
 
+    @Test
     public void testParseTestSetupAndSections() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                         "setup:\n" +
@@ -140,6 +139,7 @@ public class RestTestParserTests extends ESTestCase {
         assertThat(matchAssertion.getExpectedValue().toString(), equalTo("whitespace"));
     }
 
+    @Test
     public void testParseTestSingleTestSection() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
         "---\n" +
@@ -238,6 +238,7 @@ public class RestTestParserTests extends ESTestCase {
         assertThat(((Map) matchAssertion.getExpectedValue()).get("foo").toString(), equalTo("bar"));
     }
 
+    @Test
     public void testParseTestMultipleTestSections() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
         "---\n" +
@@ -329,6 +330,7 @@ public class RestTestParserTests extends ESTestCase {
         assertThat(doSection.getApiCallSection().hasBody(), equalTo(true));
     }
 
+    @Test(expected = RestTestParseException.class)
     public void testParseTestDuplicateTestSections() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "---\n" +
@@ -359,11 +361,6 @@ public class RestTestParserTests extends ESTestCase {
         );
 
         RestTestSuiteParser testParser = new RestTestSuiteParser();
-        try {
-            testParser.parse(new RestTestSuiteParseContext("api", "suite", parser));
-            fail("Expected RestTestParseException");
-        } catch (RestTestParseException e) {
-            assertThat(e.getMessage(), containsString("duplicate test section"));
-        }
+        testParser.parse(new RestTestSuiteParseContext("api", "suite", parser));
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/test/rest/test/SetSectionParserTests.java b/core/src/test/java/org/elasticsearch/test/rest/test/SetSectionParserTests.java
index c2b6637..ba28a48 100644
--- a/core/src/test/java/org/elasticsearch/test/rest/test/SetSectionParserTests.java
+++ b/core/src/test/java/org/elasticsearch/test/rest/test/SetSectionParserTests.java
@@ -23,12 +23,14 @@ import org.elasticsearch.test.rest.parser.RestTestParseException;
 import org.elasticsearch.test.rest.parser.RestTestSuiteParseContext;
 import org.elasticsearch.test.rest.parser.SetSectionParser;
 import org.elasticsearch.test.rest.section.SetSection;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.notNullValue;
 
 public class SetSectionParserTests extends AbstractParserTestCase {
+
+    @Test
     public void testParseSetSectionSingleValue() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                         "{ _id: id }"
@@ -44,6 +46,7 @@ public class SetSectionParserTests extends AbstractParserTestCase {
         assertThat(setSection.getStash().get("_id"), equalTo("id"));
     }
 
+    @Test
     public void testParseSetSectionMultipleValues() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "{ _id: id, _type: type, _index: index }"
@@ -61,17 +64,14 @@ public class SetSectionParserTests extends AbstractParserTestCase {
         assertThat(setSection.getStash().get("_index"), equalTo("index"));
     }
 
+    @Test(expected = RestTestParseException.class)
     public void testParseSetSectionNoValues() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "{ }"
         );
 
         SetSectionParser setSectionParser = new SetSectionParser();
-        try {
-            setSectionParser.parse(new RestTestSuiteParseContext("api", "suite", parser));
-            fail("Expected RestTestParseException");
-        } catch (RestTestParseException e) {
-            assertThat(e.getMessage(), is("set section must set at least a value"));
-        }
+
+        setSectionParser.parse(new RestTestSuiteParseContext("api", "suite", parser));
     }
 }
\ No newline at end of file
diff --git a/core/src/test/java/org/elasticsearch/test/rest/test/SetupSectionParserTests.java b/core/src/test/java/org/elasticsearch/test/rest/test/SetupSectionParserTests.java
index 9dd3880..beb7449 100644
--- a/core/src/test/java/org/elasticsearch/test/rest/test/SetupSectionParserTests.java
+++ b/core/src/test/java/org/elasticsearch/test/rest/test/SetupSectionParserTests.java
@@ -23,12 +23,16 @@ import org.elasticsearch.common.xcontent.yaml.YamlXContent;
 import org.elasticsearch.test.rest.parser.RestTestSuiteParseContext;
 import org.elasticsearch.test.rest.parser.SetupSectionParser;
 import org.elasticsearch.test.rest.section.SetupSection;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.notNullValue;
 
 public class SetupSectionParserTests extends AbstractParserTestCase {
+
+    @Test
     public void testParseSetupSection() throws Exception {
+
         parser = YamlXContent.yamlXContent.createParser(
                 "  - do:\n" +
                 "      index1:\n" +
@@ -54,7 +58,9 @@ public class SetupSectionParserTests extends AbstractParserTestCase {
         assertThat(setupSection.getDoSections().get(1).getApiCallSection().getApi(), equalTo("index2"));
     }
 
+    @Test
     public void testParseSetupAndSkipSectionNoSkip() throws Exception {
+
         parser = YamlXContent.yamlXContent.createParser(
                 "  - skip:\n" +
                         "      version:  \"0.90.0 - 0.90.7\"\n" +
diff --git a/core/src/test/java/org/elasticsearch/test/rest/test/SkipSectionParserTests.java b/core/src/test/java/org/elasticsearch/test/rest/test/SkipSectionParserTests.java
index 5864e78..a697427 100644
--- a/core/src/test/java/org/elasticsearch/test/rest/test/SkipSectionParserTests.java
+++ b/core/src/test/java/org/elasticsearch/test/rest/test/SkipSectionParserTests.java
@@ -25,13 +25,13 @@ import org.elasticsearch.test.rest.parser.RestTestParseException;
 import org.elasticsearch.test.rest.parser.RestTestSuiteParseContext;
 import org.elasticsearch.test.rest.parser.SkipSectionParser;
 import org.elasticsearch.test.rest.section.SkipSection;
+import org.junit.Test;
 
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 public class SkipSectionParserTests extends AbstractParserTestCase {
+
+    @Test
     public void testParseSkipSectionVersionNoFeature() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "version:     \" - 0.90.2\"\n" +
@@ -66,6 +66,7 @@ public class SkipSectionParserTests extends AbstractParserTestCase {
         assertThat(skipSection.getReason(), equalTo("Delete ignores the parent param"));
     }
 
+    @Test
     public void testParseSkipSectionFeatureNoVersion() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "features:     regex"
@@ -82,6 +83,7 @@ public class SkipSectionParserTests extends AbstractParserTestCase {
         assertThat(skipSection.getReason(), nullValue());
     }
 
+    @Test
     public void testParseSkipSectionFeaturesNoVersion() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "features:     [regex1,regex2,regex3]"
@@ -100,6 +102,7 @@ public class SkipSectionParserTests extends AbstractParserTestCase {
         assertThat(skipSection.getReason(), nullValue());
     }
 
+    @Test(expected = RestTestParseException.class)
     public void testParseSkipSectionBothFeatureAndVersion() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "version:     \" - 0.90.2\"\n" +
@@ -109,39 +112,26 @@ public class SkipSectionParserTests extends AbstractParserTestCase {
 
         SkipSectionParser skipSectionParser = new SkipSectionParser();
 
-        try {
-            skipSectionParser.parse(new RestTestSuiteParseContext("api", "suite", parser));
-            fail("Expected RestTestParseException");
-        } catch (RestTestParseException e) {
-            assertThat(e.getMessage(), is("version or features are mutually exclusive"));
-        }
+        skipSectionParser.parse(new RestTestSuiteParseContext("api", "suite", parser));
     }
 
+    @Test(expected = RestTestParseException.class)
     public void testParseSkipSectionNoReason() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "version:     \" - 0.90.2\"\n"
         );
 
         SkipSectionParser skipSectionParser = new SkipSectionParser();
-        try {
-            skipSectionParser.parse(new RestTestSuiteParseContext("api", "suite", parser));
-            fail("Expected RestTestParseException");
-        } catch (RestTestParseException e) {
-            assertThat(e.getMessage(), is("reason is mandatory within skip version section"));
-        }
+        skipSectionParser.parse(new RestTestSuiteParseContext("api", "suite", parser));
     }
 
+    @Test(expected = RestTestParseException.class)
     public void testParseSkipSectionNoVersionNorFeature() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "reason:      Delete ignores the parent param\n"
         );
 
         SkipSectionParser skipSectionParser = new SkipSectionParser();
-        try {
-            skipSectionParser.parse(new RestTestSuiteParseContext("api", "suite", parser));
-            fail("Expected RestTestParseException");
-        } catch (RestTestParseException e) {
-            assertThat(e.getMessage(), is("version or features is mandatory within skip section"));
-        }
+        skipSectionParser.parse(new RestTestSuiteParseContext("api", "suite", parser));
     }
 }
\ No newline at end of file
diff --git a/core/src/test/java/org/elasticsearch/test/rest/test/TestSectionParserTests.java b/core/src/test/java/org/elasticsearch/test/rest/test/TestSectionParserTests.java
index c157610..ac6a3c1 100644
--- a/core/src/test/java/org/elasticsearch/test/rest/test/TestSectionParserTests.java
+++ b/core/src/test/java/org/elasticsearch/test/rest/test/TestSectionParserTests.java
@@ -22,25 +22,16 @@ import org.elasticsearch.Version;
 import org.elasticsearch.common.xcontent.yaml.YamlXContent;
 import org.elasticsearch.test.rest.parser.RestTestSectionParser;
 import org.elasticsearch.test.rest.parser.RestTestSuiteParseContext;
-import org.elasticsearch.test.rest.section.DoSection;
-import org.elasticsearch.test.rest.section.GreaterThanAssertion;
-import org.elasticsearch.test.rest.section.IsFalseAssertion;
-import org.elasticsearch.test.rest.section.IsTrueAssertion;
-import org.elasticsearch.test.rest.section.LengthAssertion;
-import org.elasticsearch.test.rest.section.LessThanAssertion;
-import org.elasticsearch.test.rest.section.MatchAssertion;
-import org.elasticsearch.test.rest.section.SetSection;
-import org.elasticsearch.test.rest.section.SkipSection;
-import org.elasticsearch.test.rest.section.TestSection;
+import org.elasticsearch.test.rest.section.*;
+import org.junit.Test;
 
 import java.util.Map;
 
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 public class TestSectionParserTests extends AbstractParserTestCase {
+
+    @Test
     public void testParseTestSectionWithDoSection() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "\"First test section\": \n" +
@@ -66,6 +57,7 @@ public class TestSectionParserTests extends AbstractParserTestCase {
         assertThat(doSection.getApiCallSection().hasBody(), equalTo(false));
     }
 
+    @Test
     public void testParseTestSectionWithDoSetAndSkipSectionsNoSkip() throws Exception {
         String yaml =
                 "\"First test section\": \n" +
@@ -102,6 +94,7 @@ public class TestSectionParserTests extends AbstractParserTestCase {
         assertThat(setSection.getStash().get("_scroll_id"), equalTo("scroll_id"));
     }
 
+    @Test
     public void testParseTestSectionWithMultipleDoSections() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "\"Basic\":\n" +
@@ -140,6 +133,7 @@ public class TestSectionParserTests extends AbstractParserTestCase {
         assertThat(doSection.getApiCallSection().hasBody(), equalTo(false));
     }
 
+    @Test
     public void testParseTestSectionWithDoSectionsAndAssertions() throws Exception {
         parser = YamlXContent.yamlXContent.createParser(
                 "\"Basic\":\n" +
@@ -234,7 +228,9 @@ public class TestSectionParserTests extends AbstractParserTestCase {
         assertThat((Integer) lessThanAssertion.getExpectedValue(), equalTo(10));
     }
 
+    @Test
     public void testSmallSection() throws Exception {
+
         parser = YamlXContent.yamlXContent.createParser(
                 "\"node_info test\":\n" +
                 "  - do:\n" +
diff --git a/core/src/test/java/org/elasticsearch/test/test/LoggingListenerTests.java b/core/src/test/java/org/elasticsearch/test/test/LoggingListenerTests.java
index 3c8913f..e4c5f2e 100644
--- a/core/src/test/java/org/elasticsearch/test/test/LoggingListenerTests.java
+++ b/core/src/test/java/org/elasticsearch/test/test/LoggingListenerTests.java
@@ -24,6 +24,7 @@ import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.elasticsearch.test.junit.listeners.LoggingListener;
+import org.junit.Test;
 import org.junit.runner.Description;
 import org.junit.runner.Result;
 
@@ -33,7 +34,10 @@ import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.nullValue;
 
 public class LoggingListenerTests extends ESTestCase {
+
+    @Test
     public void testCustomLevelPerMethod() throws Exception {
+
         LoggingListener loggingListener = new LoggingListener();
 
         Description suiteDescription = Description.createSuiteDescription(TestClass.class);
@@ -63,7 +67,9 @@ public class LoggingListenerTests extends ESTestCase {
         assertThat(abcLogger.getLevel(), nullValue());
     }
 
+    @Test
     public void testCustomLevelPerClass() throws Exception {
+
         LoggingListener loggingListener = new LoggingListener();
 
         Description suiteDescription = Description.createSuiteDescription(AnnotatedTestClass.class);
@@ -91,7 +97,9 @@ public class LoggingListenerTests extends ESTestCase {
         assertThat(xyzLogger.getLevel(), nullValue());
     }
 
+    @Test
     public void testCustomLevelPerClassAndPerMethod() throws Exception {
+
         LoggingListener loggingListener = new LoggingListener();
 
         Description suiteDescription = Description.createSuiteDescription(AnnotatedTestClass.class);
diff --git a/core/src/test/java/org/elasticsearch/test/test/TestScopeClusterIT.java b/core/src/test/java/org/elasticsearch/test/test/TestScopeClusterIT.java
index 8c3c184..5233bae 100644
--- a/core/src/test/java/org/elasticsearch/test/test/TestScopeClusterIT.java
+++ b/core/src/test/java/org/elasticsearch/test/test/TestScopeClusterIT.java
@@ -20,6 +20,7 @@ package org.elasticsearch.test.test;
 
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.TestCluster;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -35,6 +36,7 @@ public class TestScopeClusterIT extends ESIntegTestCase {
     private static long[] SEQUENCE = new long[100];
     private static Long CLUSTER_SEED = null;
 
+    @Test
     public void testReproducible() throws IOException {
         if (ITER++ == 0) {
             CLUSTER_SEED = cluster().seed();
diff --git a/core/src/test/java/org/elasticsearch/threadpool/SimpleThreadPoolIT.java b/core/src/test/java/org/elasticsearch/threadpool/SimpleThreadPoolIT.java
index d52f67d..0bf0491 100644
--- a/core/src/test/java/org/elasticsearch/threadpool/SimpleThreadPoolIT.java
+++ b/core/src/test/java/org/elasticsearch/threadpool/SimpleThreadPoolIT.java
@@ -32,12 +32,12 @@ import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.node.NodeBuilder;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.ESSingleNodeTestCase;
 import org.elasticsearch.test.InternalTestCluster;
 import org.elasticsearch.test.hamcrest.RegexMatcher;
 import org.elasticsearch.threadpool.ThreadPool.Names;
 import org.elasticsearch.tribe.TribeIT;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.lang.management.ManagementFactory;
@@ -55,6 +55,7 @@ import java.util.regex.Pattern;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
@@ -65,12 +66,15 @@ import static org.hamcrest.Matchers.sameInstance;
  */
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0, numClientNodes = 0)
 public class SimpleThreadPoolIT extends ESIntegTestCase {
+
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return Settings.settingsBuilder().put(super.nodeSettings(nodeOrdinal)).put("threadpool.search.type", "cached").build();
     }
 
-    public void testThreadNames() throws Exception {
+    @Test
+    public void verifyThreadNames() throws Exception {
+
         ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();
         Set<String> preNodeStartThreadNames = new HashSet<>();
         for (long l : threadBean.getAllThreadIds()) {
@@ -126,6 +130,7 @@ public class SimpleThreadPoolIT extends ESIntegTestCase {
         }
     }
 
+    @Test(timeout = 20000)
     public void testUpdatingThreadPoolSettings() throws Exception {
         internalCluster().startNodesAsync(2).get();
         ThreadPool threadPool = internalCluster().getDataNodeInstance(ThreadPool.class);
@@ -154,7 +159,7 @@ public class SimpleThreadPoolIT extends ESIntegTestCase {
         assertThat(((ThreadPoolExecutor) oldExecutor).isShutdown(), equalTo(true));
         assertThat(((ThreadPoolExecutor) oldExecutor).isTerminating(), equalTo(true));
         assertThat(((ThreadPoolExecutor) oldExecutor).isTerminated(), equalTo(false));
-        barrier.await(10, TimeUnit.SECONDS);
+        barrier.await();
 
         // Make sure that new thread executor is functional
         threadPool.executor(Names.SEARCH).execute(new Runnable() {
@@ -170,10 +175,8 @@ public class SimpleThreadPoolIT extends ESIntegTestCase {
             }
         });
         client().admin().cluster().prepareUpdateSettings().setTransientSettings(settingsBuilder().put("threadpool.search.type", "fixed").build()).execute().actionGet();
-        barrier.await(10, TimeUnit.SECONDS);
-
-        // This was here: Thread.sleep(200);
-        // Why? What was it for?
+        barrier.await();
+        Thread.sleep(200);
 
         // Check that node info is correct
         NodesInfoResponse nodesInfoResponse = client().admin().cluster().prepareNodesInfo().all().execute().actionGet();
@@ -188,9 +191,12 @@ public class SimpleThreadPoolIT extends ESIntegTestCase {
                 }
             }
             assertThat(found, equalTo(true));
+
+            Map<String, Object> poolMap = getPoolSettingsThroughJson(nodeInfo.getThreadPool(), Names.SEARCH);
         }
     }
 
+    @Test
     public void testThreadPoolLeakingThreadsWithTribeNode() {
         Settings settings = Settings.builder()
                 .put("node.name", "thread_pool_leaking_threads_tribe_node")
diff --git a/core/src/test/java/org/elasticsearch/threadpool/ThreadPoolSerializationTests.java b/core/src/test/java/org/elasticsearch/threadpool/ThreadPoolSerializationTests.java
index cb27fd7..be33df3 100644
--- a/core/src/test/java/org/elasticsearch/threadpool/ThreadPoolSerializationTests.java
+++ b/core/src/test/java/org/elasticsearch/threadpool/ThreadPoolSerializationTests.java
@@ -30,6 +30,7 @@ import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.Map;
 
@@ -43,8 +44,10 @@ import static org.hamcrest.Matchers.nullValue;
  *
  */
 public class ThreadPoolSerializationTests extends ESTestCase {
+
     BytesStreamOutput output = new BytesStreamOutput();
 
+    @Test
     public void testThatQueueSizeSerializationWorks() throws Exception {
         ThreadPool.Info info = new ThreadPool.Info("foo", "search", 1, 10, TimeValue.timeValueMillis(3000), SizeValue.parseSizeValue("10k"));
         output.setVersion(Version.CURRENT);
@@ -57,6 +60,7 @@ public class ThreadPoolSerializationTests extends ESTestCase {
         assertThat(newInfo.getQueueSize().singles(), is(10000l));
     }
 
+    @Test
     public void testThatNegativeQueueSizesCanBeSerialized() throws Exception {
         ThreadPool.Info info = new ThreadPool.Info("foo", "search", 1, 10, TimeValue.timeValueMillis(3000), null);
         output.setVersion(Version.CURRENT);
@@ -69,6 +73,7 @@ public class ThreadPoolSerializationTests extends ESTestCase {
         assertThat(newInfo.getQueueSize(), is(nullValue()));
     }
 
+    @Test
     public void testThatToXContentWritesOutUnboundedCorrectly() throws Exception {
         ThreadPool.Info info = new ThreadPool.Info("foo", "search", 1, 10, TimeValue.timeValueMillis(3000), null);
         XContentBuilder builder = jsonBuilder();
@@ -87,6 +92,7 @@ public class ThreadPoolSerializationTests extends ESTestCase {
         assertThat(map.get("queue_size").toString(), is("-1"));
     }
 
+    @Test
     public void testThatNegativeSettingAllowsToStart() throws InterruptedException {
         Settings settings = settingsBuilder().put("name", "index").put("threadpool.index.queue_size", "-1").build();
         ThreadPool threadPool = new ThreadPool(settings);
@@ -94,6 +100,7 @@ public class ThreadPoolSerializationTests extends ESTestCase {
         terminate(threadPool);
     }
 
+    @Test
     public void testThatToXContentWritesInteger() throws Exception {
         ThreadPool.Info info = new ThreadPool.Info("foo", "search", 1, 10, TimeValue.timeValueMillis(3000), SizeValue.parseSizeValue("1k"));
         XContentBuilder builder = jsonBuilder();
diff --git a/core/src/test/java/org/elasticsearch/threadpool/ThreadPoolStatsTests.java b/core/src/test/java/org/elasticsearch/threadpool/ThreadPoolStatsTests.java
index 69fe3b3..feecb04 100644
--- a/core/src/test/java/org/elasticsearch/threadpool/ThreadPoolStatsTests.java
+++ b/core/src/test/java/org/elasticsearch/threadpool/ThreadPoolStatsTests.java
@@ -25,6 +25,7 @@ import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.XContentType;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -35,6 +36,8 @@ import static org.hamcrest.Matchers.contains;
 import static org.hamcrest.Matchers.equalTo;
 
 public class ThreadPoolStatsTests extends ESTestCase {
+
+    @Test
     public void testThreadPoolStatsSort() throws IOException {
         List<ThreadPoolStats.Stats> stats = new ArrayList<>();
         stats.add(new ThreadPoolStats.Stats("z", -1, 0, 0, 0, 0, 0L));
@@ -61,6 +64,7 @@ public class ThreadPoolStatsTests extends ESTestCase {
         assertThat(threads, contains(-1, -1, 1, 2, 3,-1,-1));
     }
 
+    @Test
     public void testThreadPoolStatsToXContent() throws IOException {
         try (BytesStreamOutput os = new BytesStreamOutput()) {
 
@@ -69,7 +73,7 @@ public class ThreadPoolStatsTests extends ESTestCase {
             stats.add(new ThreadPoolStats.Stats(ThreadPool.Names.SEARCH, -1, 0, 0, 0, 0, 0L));
             stats.add(new ThreadPoolStats.Stats(ThreadPool.Names.WARMER, -1, 0, 0, 0, 0, 0L));
             stats.add(new ThreadPoolStats.Stats(ThreadPool.Names.GENERIC, -1, 0, 0, 0, 0, 0L));
-            stats.add(new ThreadPoolStats.Stats(ThreadPool.Names.OPTIMIZE, -1, 0, 0, 0, 0, 0L));
+            stats.add(new ThreadPoolStats.Stats(ThreadPool.Names.FORCE_MERGE, -1, 0, 0, 0, 0, 0L));
             stats.add(new ThreadPoolStats.Stats(ThreadPool.Names.PERCOLATE, -1, 0, 0, 0, 0, 0L));
             stats.add(new ThreadPoolStats.Stats(ThreadPool.Names.SAME, -1, 0, 0, 0, 0, 0L));
 
@@ -101,8 +105,8 @@ public class ThreadPoolStatsTests extends ESTestCase {
                     parser.skipChildren();
                     token = parser.nextToken();
                 }
-                assertThat(names, contains(ThreadPool.Names.GENERIC,
-                        ThreadPool.Names.OPTIMIZE,
+                assertThat(names, contains(ThreadPool.Names.FORCE_MERGE,
+                        ThreadPool.Names.GENERIC,
                         ThreadPool.Names.PERCOLATE,
                         ThreadPool.Names.SAME,
                         ThreadPool.Names.SEARCH,
diff --git a/core/src/test/java/org/elasticsearch/threadpool/UpdateThreadPoolSettingsTests.java b/core/src/test/java/org/elasticsearch/threadpool/UpdateThreadPoolSettingsTests.java
index cd252b6..562adaa 100644
--- a/core/src/test/java/org/elasticsearch/threadpool/UpdateThreadPoolSettingsTests.java
+++ b/core/src/test/java/org/elasticsearch/threadpool/UpdateThreadPoolSettingsTests.java
@@ -23,6 +23,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.threadpool.ThreadPool.Names;
+import org.junit.Test;
 
 import java.lang.reflect.Field;
 import java.util.concurrent.CountDownLatch;
@@ -31,16 +32,12 @@ import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.nullValue;
-import static org.hamcrest.Matchers.sameInstance;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
 public class UpdateThreadPoolSettingsTests extends ESTestCase {
+
     private ThreadPool.Info info(ThreadPool threadPool, String name) {
         for (ThreadPool.Info info : threadPool.info()) {
             if (info.getName().equals(name)) {
@@ -50,6 +47,7 @@ public class UpdateThreadPoolSettingsTests extends ESTestCase {
         return null;
     }
 
+    @Test
     public void testCachedExecutorType() throws InterruptedException {
         ThreadPool threadPool = new ThreadPool(
                 Settings.settingsBuilder()
@@ -105,6 +103,7 @@ public class UpdateThreadPoolSettingsTests extends ESTestCase {
         terminate(threadPool);
     }
 
+    @Test
     public void testFixedExecutorType() throws InterruptedException {
         ThreadPool threadPool = new ThreadPool(settingsBuilder()
                 .put("threadpool.search.type", "fixed")
@@ -163,6 +162,8 @@ public class UpdateThreadPoolSettingsTests extends ESTestCase {
         terminate(threadPool);
     }
 
+
+    @Test
     public void testScalingExecutorType() throws InterruptedException {
         ThreadPool threadPool = new ThreadPool(settingsBuilder()
                 .put("threadpool.search.type", "scaling")
@@ -197,18 +198,19 @@ public class UpdateThreadPoolSettingsTests extends ESTestCase {
         terminate(threadPool);
     }
 
-    public void testShutdownNowInterrupts() throws Exception {
+    @Test(timeout = 10000)
+    public void testShutdownDownNowDoesntBlock() throws Exception {
         ThreadPool threadPool = new ThreadPool(Settings.settingsBuilder()
                 .put("threadpool.search.type", "cached")
                 .put("name","testCachedExecutorType").build());
 
         final CountDownLatch latch = new CountDownLatch(1);
-        ThreadPoolExecutor oldExecutor = (ThreadPoolExecutor) threadPool.executor(Names.SEARCH);
+        Executor oldExecutor = threadPool.executor(Names.SEARCH);
         threadPool.executor(Names.SEARCH).execute(new Runnable() {
             @Override
             public void run() {
                 try {
-                    new CountDownLatch(1).await();
+                    Thread.sleep(20000);
                 } catch (InterruptedException ex) {
                     latch.countDown();
                     Thread.currentThread().interrupt();
@@ -217,14 +219,15 @@ public class UpdateThreadPoolSettingsTests extends ESTestCase {
         });
         threadPool.updateSettings(settingsBuilder().put("threadpool.search.type", "fixed").build());
         assertThat(threadPool.executor(Names.SEARCH), not(sameInstance(oldExecutor)));
-        assertThat(oldExecutor.isShutdown(), equalTo(true));
-        assertThat(oldExecutor.isTerminating(), equalTo(true));
-        assertThat(oldExecutor.isTerminated(), equalTo(false));
-        threadPool.shutdownNow(); // should interrupt the thread
-        latch.await(3, TimeUnit.SECONDS); // If this throws then shotdownNow didn't interrupt
+        assertThat(((ThreadPoolExecutor) oldExecutor).isShutdown(), equalTo(true));
+        assertThat(((ThreadPoolExecutor) oldExecutor).isTerminating(), equalTo(true));
+        assertThat(((ThreadPoolExecutor) oldExecutor).isTerminated(), equalTo(false));
+        threadPool.shutdownNow(); // interrupt the thread
+        latch.await();
         terminate(threadPool);
     }
 
+    @Test
     public void testCustomThreadPool() throws Exception {
         ThreadPool threadPool = new ThreadPool(Settings.settingsBuilder()
                 .put("threadpool.my_pool1.type", "cached")
diff --git a/core/src/test/java/org/elasticsearch/timestamp/SimpleTimestampIT.java b/core/src/test/java/org/elasticsearch/timestamp/SimpleTimestampIT.java
index 30ed8fe..3cfbd42 100644
--- a/core/src/test/java/org/elasticsearch/timestamp/SimpleTimestampIT.java
+++ b/core/src/test/java/org/elasticsearch/timestamp/SimpleTimestampIT.java
@@ -26,6 +26,7 @@ import org.elasticsearch.cluster.metadata.MappingMetaData;
 import org.elasticsearch.common.Priority;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Locale;
 
@@ -39,8 +40,11 @@ import static org.hamcrest.Matchers.notNullValue;
 
 /**
  */
-public class SimpleTimestampIT extends ESIntegTestCase {
+public class SimpleTimestampIT  extends ESIntegTestCase {
+
+    @Test
     public void testSimpleTimestamp() throws Exception {
+
         client().admin().indices().prepareCreate("test")
                 .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("_timestamp").field("enabled", true).endObject().endObject().endObject())
                 .execute().actionGet();
@@ -90,7 +94,7 @@ public class SimpleTimestampIT extends ESIntegTestCase {
         assertThat(((Number) getResponse.getField("_timestamp").getValue()).longValue(), equalTo(timestamp));
     }
 
-    // issue #5053
+    @Test // issue 5053
     public void testThatUpdatingMappingShouldNotRemoveTimestampConfiguration() throws Exception {
         String index = "foo";
         String type = "mytype";
@@ -110,6 +114,7 @@ public class SimpleTimestampIT extends ESIntegTestCase {
         assertTimestampMappingEnabled(index, type, true);
     }
 
+    @Test
     public void testThatTimestampCanBeSwitchedOnAndOff() throws Exception {
         String index = "foo";
         String type = "mytype";
diff --git a/core/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTestCase.java b/core/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTestCase.java
index 643b4fe..c423fb7 100644
--- a/core/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTestCase.java
+++ b/core/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTestCase.java
@@ -33,6 +33,7 @@ import org.elasticsearch.test.transport.MockTransportService;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.concurrent.CountDownLatch;
@@ -125,6 +126,7 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
         terminate(threadPool);
     }
 
+    @Test
     public void testHelloWorld() {
         serviceA.registerRequestHandler("sayHello", StringMessageRequest::new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() {
             @Override
@@ -204,6 +206,7 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
         serviceA.removeHandler("sayHello");
     }
 
+    @Test
     public void testLocalNodeConnection() throws InterruptedException {
         assertTrue("serviceA is not connected to nodeA", serviceA.nodeConnected(nodeA));
         if (((TransportService) serviceA).getLocalNode() != null) {
@@ -251,6 +254,7 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
         assertThat(responseString.get(), equalTo("test"));
     }
 
+    @Test
     public void testVoidMessageCompressed() {
         serviceA.registerRequestHandler("sayHello", TransportRequest.Empty::new, ThreadPool.Names.GENERIC, new TransportRequestHandler<TransportRequest.Empty>() {
             @Override
@@ -297,6 +301,7 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
         serviceA.removeHandler("sayHello");
     }
 
+    @Test
     public void testHelloWorldCompressed() {
         serviceA.registerRequestHandler("sayHello", StringMessageRequest::new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() {
             @Override
@@ -345,6 +350,7 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
         serviceA.removeHandler("sayHello");
     }
 
+    @Test
     public void testErrorMessage() {
         serviceA.registerRequestHandler("sayHelloException", StringMessageRequest::new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() {
             @Override
@@ -387,6 +393,7 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
         serviceA.removeHandler("sayHelloException");
     }
 
+    @Test
     public void testDisconnectListener() throws Exception {
         final CountDownLatch latch = new CountDownLatch(1);
         TransportConnectionListener disconnectListener = new TransportConnectionListener() {
@@ -405,6 +412,7 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
         assertThat(latch.await(5, TimeUnit.SECONDS), equalTo(true));
     }
 
+    @Test
     public void testNotifyOnShutdown() throws Exception {
         final CountDownLatch latch2 = new CountDownLatch(1);
 
@@ -432,6 +440,7 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
         serviceA.removeHandler("sayHelloTimeoutDelayedResponse");
     }
 
+    @Test
     public void testTimeoutSendExceptionWithNeverSendingBackResponse() throws Exception {
         serviceA.registerRequestHandler("sayHelloTimeoutNoResponse", StringMessageRequest::new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() {
             @Override
@@ -480,6 +489,7 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
         serviceA.removeHandler("sayHelloTimeoutNoResponse");
     }
 
+    @Test
     public void testTimeoutSendExceptionWithDelayedResponse() throws Exception {
         serviceA.registerRequestHandler("sayHelloTimeoutDelayedResponse", StringMessageRequest::new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() {
             @Override
@@ -566,6 +576,8 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
         serviceA.removeHandler("sayHelloTimeoutDelayedResponse");
     }
 
+
+    @Test
     @TestLogging(value = "test. transport.tracer:TRACE")
     public void testTracerLog() throws InterruptedException {
         TransportRequestHandler handler = new TransportRequestHandler<StringMessageRequest>() {
@@ -871,7 +883,8 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
         }
     }
 
-    public void testVersionFrom0to1() throws Exception {
+    @Test
+    public void testVersion_from0to1() throws Exception {
         serviceB.registerRequestHandler("/version", Version1Request::new, ThreadPool.Names.SAME, new TransportRequestHandler<Version1Request>() {
             @Override
             public void messageReceived(Version1Request request, TransportChannel channel) throws Exception {
@@ -912,7 +925,8 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
         assertThat(version0Response.value1, equalTo(1));
     }
 
-    public void testVersionFrom1to0() throws Exception {
+    @Test
+    public void testVersion_from1to0() throws Exception {
         serviceA.registerRequestHandler("/version", Version0Request::new, ThreadPool.Names.SAME, new TransportRequestHandler<Version0Request>() {
             @Override
             public void messageReceived(Version0Request request, TransportChannel channel) throws Exception {
@@ -954,7 +968,8 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
         assertThat(version1Response.value2, equalTo(0));
     }
 
-    public void testVersionFrom1to1() throws Exception {
+    @Test
+    public void testVersion_from1to1() throws Exception {
         serviceB.registerRequestHandler("/version", Version1Request::new, ThreadPool.Names.SAME, new TransportRequestHandler<Version1Request>() {
             @Override
             public void messageReceived(Version1Request request, TransportChannel channel) throws Exception {
@@ -998,7 +1013,8 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
         assertThat(version1Response.value2, equalTo(2));
     }
 
-    public void testVersionFrom0to0() throws Exception {
+    @Test
+    public void testVersion_from0to0() throws Exception {
         serviceA.registerRequestHandler("/version", Version0Request::new, ThreadPool.Names.SAME, new TransportRequestHandler<Version0Request>() {
             @Override
             public void messageReceived(Version0Request request, TransportChannel channel) throws Exception {
@@ -1037,6 +1053,7 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
         assertThat(version0Response.value1, equalTo(1));
     }
 
+    @Test
     public void testMockFailToSendNoConnectRule() {
         serviceA.registerRequestHandler("sayHello", StringMessageRequest::new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() {
             @Override
@@ -1095,6 +1112,7 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
         serviceA.removeHandler("sayHello");
     }
 
+    @Test
     public void testMockUnresponsiveRule() {
         serviceA.registerRequestHandler("sayHello", StringMessageRequest::new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() {
             @Override
@@ -1154,6 +1172,7 @@ public abstract class AbstractSimpleTransportTestCase extends ESTestCase {
     }
 
 
+    @Test
     public void testHostOnMessages() throws InterruptedException {
         final CountDownLatch latch = new CountDownLatch(2);
         final AtomicReference<TransportAddress> addressA = new AtomicReference<>();
diff --git a/core/src/test/java/org/elasticsearch/transport/ActionNamesIT.java b/core/src/test/java/org/elasticsearch/transport/ActionNamesIT.java
index d790137..d3b8533 100644
--- a/core/src/test/java/org/elasticsearch/transport/ActionNamesIT.java
+++ b/core/src/test/java/org/elasticsearch/transport/ActionNamesIT.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.transport;
 
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.either;
 import static org.hamcrest.CoreMatchers.startsWith;
@@ -41,6 +42,9 @@ import static org.hamcrest.CoreMatchers.startsWith;
  * we use the `[n]` suffix to identify node actions and the `[s]` suffix to identify shard actions.
  */
 public class ActionNamesIT extends ESIntegTestCase {
+
+    @Test
+    @SuppressWarnings("unchecked")
     public void testActionNamesCategories() throws NoSuchFieldException, IllegalAccessException {
         TransportService transportService = internalCluster().getInstance(TransportService.class);
         for (String action : transportService.requestHandlers.keySet()) {
diff --git a/core/src/test/java/org/elasticsearch/transport/NettySizeHeaderFrameDecoderTests.java b/core/src/test/java/org/elasticsearch/transport/NettySizeHeaderFrameDecoderTests.java
index c8a566a..44039ce 100644
--- a/core/src/test/java/org/elasticsearch/transport/NettySizeHeaderFrameDecoderTests.java
+++ b/core/src/test/java/org/elasticsearch/transport/NettySizeHeaderFrameDecoderTests.java
@@ -19,27 +19,29 @@
 
 package org.elasticsearch.transport;
 
+import java.nio.charset.StandardCharsets;
+
 import org.elasticsearch.Version;
-import org.elasticsearch.cache.recycler.MockPageCacheRecycler;
 import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
 import org.elasticsearch.common.network.NetworkService;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.transport.InetSocketTransportAddress;
 import org.elasticsearch.common.util.BigArrays;
-import org.elasticsearch.common.util.MockBigArrays;
 import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
 import org.elasticsearch.node.settings.NodeSettingsService;
 import org.elasticsearch.test.ESTestCase;
+import org.elasticsearch.common.util.MockBigArrays;
+import org.elasticsearch.cache.recycler.MockPageCacheRecycler;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.elasticsearch.transport.netty.NettyTransport;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.Socket;
-import java.nio.charset.StandardCharsets;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.is;
@@ -80,6 +82,7 @@ public class NettySizeHeaderFrameDecoderTests extends ESTestCase {
         terminate(threadPool);
     }
 
+    @Test
     public void testThatTextMessageIsReturnedOnHTTPLikeRequest() throws Exception {
         String randomMethod = randomFrom("GET", "POST", "PUT", "DELETE", "HEAD", "OPTIONS", "PATCH");
         String data = randomMethod + " / HTTP/1.1";
@@ -94,6 +97,7 @@ public class NettySizeHeaderFrameDecoderTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testThatNothingIsReturnedForOtherInvalidPackets() throws Exception {
         try (Socket socket = new Socket(host, port)) {
             socket.getOutputStream().write("FOOBAR".getBytes(StandardCharsets.UTF_8));
diff --git a/core/src/test/java/org/elasticsearch/transport/TransportMessageTests.java b/core/src/test/java/org/elasticsearch/transport/TransportMessageTests.java
index a94b06f..bb907e5 100644
--- a/core/src/test/java/org/elasticsearch/transport/TransportMessageTests.java
+++ b/core/src/test/java/org/elasticsearch/transport/TransportMessageTests.java
@@ -23,6 +23,7 @@ import org.elasticsearch.Version;
 import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
@@ -31,6 +32,8 @@ import static org.hamcrest.Matchers.is;
  *
  */
 public class TransportMessageTests extends ESTestCase {
+
+    @Test
     public void testSerialization() throws Exception {
         Message message = new Message();
         message.putHeader("key1", "value1");
@@ -54,6 +57,7 @@ public class TransportMessageTests extends ESTestCase {
         assertThat(key1, is("value1"));
     }
 
+    @Test
     public void testCopyHeadersAndContext() throws Exception {
         Message m1 = new Message();
         m1.putHeader("key1", "value1");
diff --git a/core/src/test/java/org/elasticsearch/transport/netty/KeyedLockTests.java b/core/src/test/java/org/elasticsearch/transport/netty/KeyedLockTests.java
index cbac0ad..43d0372 100644
--- a/core/src/test/java/org/elasticsearch/transport/netty/KeyedLockTests.java
+++ b/core/src/test/java/org/elasticsearch/transport/netty/KeyedLockTests.java
@@ -22,6 +22,7 @@ package org.elasticsearch.transport.netty;
 import org.elasticsearch.common.util.concurrent.KeyedLock;
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.Map.Entry;
 import java.util.Set;
@@ -29,13 +30,13 @@ import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
 
 public class KeyedLockTests extends ESTestCase {
-    public void testIfMapEmptyAfterLotsOfAcquireAndReleases() throws InterruptedException {
+
+    @Test
+    public void checkIfMapEmptyAfterLotsOfAcquireAndReleases() throws InterruptedException {
         ConcurrentHashMap<String, Integer> counter = new ConcurrentHashMap<>();
         ConcurrentHashMap<String, AtomicInteger> safeCounter = new ConcurrentHashMap<>();
         KeyedLock<String> connectionLock = new KeyedLock<String>(randomBoolean());
@@ -68,27 +69,19 @@ public class KeyedLockTests extends ESTestCase {
         }
     }
 
-    public void testCannotAcquireTwoLocks() throws InterruptedException {
+    @Test(expected = IllegalStateException.class)
+    public void checkCannotAcquireTwoLocks() throws InterruptedException {
         KeyedLock<String> connectionLock = new KeyedLock<String>();
         String name = randomRealisticUnicodeOfLength(scaledRandomIntBetween(10, 50));
         connectionLock.acquire(name);
-        try {
-            connectionLock.acquire(name);
-            fail("Expected IllegalStateException");
-        } catch (IllegalStateException e) {
-            assertThat(e.getMessage(), containsString("Lock already acquired"));
-        }
+        connectionLock.acquire(name);
     }
 
-    public void testCannotReleaseUnacquiredLock() throws InterruptedException {
+    @Test(expected = IllegalStateException.class)
+    public void checkCannotReleaseUnacquiredLock() throws InterruptedException {
         KeyedLock<String> connectionLock = new KeyedLock<String>();
         String name = randomRealisticUnicodeOfLength(scaledRandomIntBetween(10, 50));
-        try {
-            connectionLock.release(name);
-            fail("Expected IllegalStateException");
-        } catch (IllegalStateException e) {
-            assertThat(e.getMessage(), is("Lock not acquired"));
-        }
+        connectionLock.release(name);
     }
 
     public static class AcquireAndReleaseThread extends Thread {
diff --git a/core/src/test/java/org/elasticsearch/transport/netty/NettyScheduledPingTests.java b/core/src/test/java/org/elasticsearch/transport/netty/NettyScheduledPingTests.java
index 9634af7..4e03b8e 100644
--- a/core/src/test/java/org/elasticsearch/transport/netty/NettyScheduledPingTests.java
+++ b/core/src/test/java/org/elasticsearch/transport/netty/NettyScheduledPingTests.java
@@ -36,6 +36,7 @@ import org.elasticsearch.transport.TransportRequestHandler;
 import org.elasticsearch.transport.TransportRequestOptions;
 import org.elasticsearch.transport.TransportResponse;
 import org.elasticsearch.transport.TransportResponseOptions;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -46,6 +47,8 @@ import static org.hamcrest.Matchers.greaterThan;
 /**
  */
 public class NettyScheduledPingTests extends ESTestCase {
+
+    @Test
     public void testScheduledPing() throws Exception {
         ThreadPool threadPool = new ThreadPool(getClass().getName());
 
diff --git a/core/src/test/java/org/elasticsearch/transport/netty/NettyTransportIT.java b/core/src/test/java/org/elasticsearch/transport/netty/NettyTransportIT.java
index 688ecd5..2870124 100644
--- a/core/src/test/java/org/elasticsearch/transport/netty/NettyTransportIT.java
+++ b/core/src/test/java/org/elasticsearch/transport/netty/NettyTransportIT.java
@@ -35,8 +35,6 @@ import org.elasticsearch.common.util.BigArrays;
 import org.elasticsearch.common.util.concurrent.AbstractRunnable;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.elasticsearch.transport.ActionNotFoundTransportException;
 import org.elasticsearch.transport.RequestHandlerRegistry;
@@ -45,12 +43,15 @@ import org.elasticsearch.transport.TransportRequest;
 import org.jboss.netty.channel.Channel;
 import org.jboss.netty.channel.ChannelPipeline;
 import org.jboss.netty.channel.ChannelPipelineFactory;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.util.Collection;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
+import static org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.is;
 
@@ -59,6 +60,7 @@ import static org.hamcrest.Matchers.is;
  */
 @ClusterScope(scope = Scope.TEST, numDataNodes = 1)
 public class NettyTransportIT extends ESIntegTestCase {
+
     // static so we can use it in anonymous classes
     private static String channelProfileName = null;
 
@@ -74,6 +76,7 @@ public class NettyTransportIT extends ESIntegTestCase {
         return pluginList(ExceptionThrowingNettyTransport.TestPlugin.class);
     }
 
+    @Test
     public void testThatConnectionFailsAsIntended() throws Exception {
         Client transportClient = internalCluster().transportClient();
         ClusterHealthResponse clusterIndexHealths = transportClient.admin().cluster().prepareHealth().get();
diff --git a/core/src/test/java/org/elasticsearch/transport/netty/NettyTransportMultiPortIntegrationIT.java b/core/src/test/java/org/elasticsearch/transport/netty/NettyTransportMultiPortIntegrationIT.java
index 369e853..9a64861 100644
--- a/core/src/test/java/org/elasticsearch/transport/netty/NettyTransportMultiPortIntegrationIT.java
+++ b/core/src/test/java/org/elasticsearch/transport/netty/NettyTransportMultiPortIntegrationIT.java
@@ -28,22 +28,17 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.transport.InetSocketTransportAddress;
 import org.elasticsearch.common.transport.TransportAddress;
 import org.elasticsearch.test.ESIntegTestCase;
-import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
-import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.junit.annotations.Network;
 import org.elasticsearch.transport.TransportModule;
+import org.junit.Test;
 
 import java.net.InetAddress;
 import java.util.Locale;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
-import static org.hamcrest.Matchers.allOf;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.hasKey;
-import static org.hamcrest.Matchers.hasSize;
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
+import static org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import static org.elasticsearch.test.ESIntegTestCase.Scope;
+import static org.hamcrest.Matchers.*;
 
 @ClusterScope(scope = Scope.SUITE, numDataNodes = 1, numClientNodes = 0)
 public class NettyTransportMultiPortIntegrationIT extends ESIntegTestCase {
@@ -69,6 +64,7 @@ public class NettyTransportMultiPortIntegrationIT extends ESIntegTestCase {
         return builder.build();
     }
 
+    @Test
     public void testThatTransportClientCanConnect() throws Exception {
         Settings settings = settingsBuilder()
                 .put("cluster.name", internalCluster().getClusterName())
@@ -82,6 +78,7 @@ public class NettyTransportMultiPortIntegrationIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     @Network
     public void testThatInfosAreExposed() throws Exception {
         NodesInfoResponse response = client().admin().cluster().prepareNodesInfo().clear().setTransport(true).get();
diff --git a/core/src/test/java/org/elasticsearch/transport/netty/NettyTransportMultiPortTests.java b/core/src/test/java/org/elasticsearch/transport/netty/NettyTransportMultiPortTests.java
index 0281952..9d9c093 100644
--- a/core/src/test/java/org/elasticsearch/transport/netty/NettyTransportMultiPortTests.java
+++ b/core/src/test/java/org/elasticsearch/transport/netty/NettyTransportMultiPortTests.java
@@ -19,7 +19,7 @@
 package org.elasticsearch.transport.netty;
 
 import com.carrotsearch.hppc.IntHashSet;
-
+import java.nio.charset.StandardCharsets;
 import org.elasticsearch.Version;
 import org.elasticsearch.cache.recycler.PageCacheRecycler;
 import org.elasticsearch.common.component.Lifecycle;
@@ -29,15 +29,16 @@ import org.elasticsearch.common.network.NetworkUtils;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.transport.InetSocketTransportAddress;
 import org.elasticsearch.common.util.BigArrays;
-import org.elasticsearch.common.util.MockBigArrays;
 import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
 import org.elasticsearch.test.ESTestCase;
+import org.elasticsearch.common.util.MockBigArrays;
 import org.elasticsearch.test.junit.rule.RepeatOnExceptionRule;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.elasticsearch.transport.BindTransportException;
 import org.elasticsearch.transport.TransportService;
 import org.junit.Before;
 import org.junit.Rule;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.OutputStream;
@@ -45,7 +46,6 @@ import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
-import java.nio.charset.StandardCharsets;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.is;
@@ -71,6 +71,7 @@ public class NettyTransportMultiPortTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testThatNettyCanBindToMultiplePorts() throws Exception {
         int[] ports = getRandomPorts(3);
 
@@ -91,6 +92,7 @@ public class NettyTransportMultiPortTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testThatDefaultProfileInheritsFromStandardSettings() throws Exception {
         int[] ports = getRandomPorts(2);
 
@@ -109,6 +111,7 @@ public class NettyTransportMultiPortTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testThatProfileWithoutPortSettingsFails() throws Exception {
         int[] ports = getRandomPorts(1);
 
@@ -126,6 +129,7 @@ public class NettyTransportMultiPortTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testThatDefaultProfilePortOverridesGeneralConfiguration() throws Exception {
         int[] ports = getRandomPorts(3);
 
@@ -146,6 +150,7 @@ public class NettyTransportMultiPortTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testThatProfileWithoutValidNameIsIgnored() throws Exception {
         int[] ports = getRandomPorts(3);
 
diff --git a/core/src/test/java/org/elasticsearch/transport/netty/SimpleNettyTransportTests.java b/core/src/test/java/org/elasticsearch/transport/netty/SimpleNettyTransportTests.java
index c18597f..923ed63 100644
--- a/core/src/test/java/org/elasticsearch/transport/netty/SimpleNettyTransportTests.java
+++ b/core/src/test/java/org/elasticsearch/transport/netty/SimpleNettyTransportTests.java
@@ -29,13 +29,13 @@ import org.elasticsearch.common.util.BigArrays;
 import org.elasticsearch.test.transport.MockTransportService;
 import org.elasticsearch.transport.AbstractSimpleTransportTestCase;
 import org.elasticsearch.transport.ConnectTransportException;
+import org.junit.Test;
 
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 
-import static org.hamcrest.Matchers.containsString;
-
 public class SimpleNettyTransportTests extends AbstractSimpleTransportTestCase {
+
     @Override
     protected MockTransportService build(Settings settings, Version version, NamedWriteableRegistry namedWriteableRegistry) {
         int startPort = 11000 + randomIntBetween(0, 255);
@@ -46,13 +46,8 @@ public class SimpleNettyTransportTests extends AbstractSimpleTransportTestCase {
         return transportService;
     }
 
+    @Test(expected = ConnectTransportException.class)
     public void testConnectException() throws UnknownHostException {
-        try {
-            serviceA.connectToNode(new DiscoveryNode("C", new InetSocketTransportAddress(InetAddress.getByName("localhost"), 9876), Version.CURRENT));
-            fail("Expected ConnectTransportException");
-        } catch (ConnectTransportException e) {
-            assertThat(e.getMessage(), containsString("connect_timeout"));
-            assertThat(e.getMessage(), containsString("[localhost/127.0.0.1:9876]"));
-        }
+        serviceA.connectToNode(new DiscoveryNode("C", new InetSocketTransportAddress(InetAddress.getByName("localhost"), 9876), Version.CURRENT));
     }
 }
\ No newline at end of file
diff --git a/core/src/test/java/org/elasticsearch/tribe/TribeIT.java b/core/src/test/java/org/elasticsearch/tribe/TribeIT.java
index 627d0c1..b0b9123 100644
--- a/core/src/test/java/org/elasticsearch/tribe/TribeIT.java
+++ b/core/src/test/java/org/elasticsearch/tribe/TribeIT.java
@@ -45,15 +45,14 @@ import org.elasticsearch.test.TestCluster;
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Map;
 
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.notNullValue;
 
@@ -137,6 +136,7 @@ public class TribeIT extends ESIntegTestCase {
         tribeClient = tribeNode.client();
     }
 
+    @Test
     public void testGlobalReadWriteBlocks() throws Exception {
         logger.info("create 2 indices, test1 on t1, and test2 on t2");
         internalCluster().client().admin().indices().prepareCreate("test1").get();
@@ -161,19 +161,20 @@ public class TribeIT extends ESIntegTestCase {
             // all is well!
         }
         try {
-            tribeClient.admin().indices().prepareOptimize("test1").execute().actionGet();
+            tribeClient.admin().indices().prepareForceMerge("test1").execute().actionGet();
             fail("cluster block should be thrown");
         } catch (ClusterBlockException e) {
             // all is well!
         }
         try {
-            tribeClient.admin().indices().prepareOptimize("test2").execute().actionGet();
+            tribeClient.admin().indices().prepareForceMerge("test2").execute().actionGet();
             fail("cluster block should be thrown");
         } catch (ClusterBlockException e) {
             // all is well!
         }
     }
 
+    @Test
     public void testIndexWriteBlocks() throws Exception {
         logger.info("create 2 indices, test1 on t1, and test2 on t2");
         assertAcked(internalCluster().client().admin().indices().prepareCreate("test1"));
@@ -207,6 +208,7 @@ public class TribeIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testOnConflictDrop() throws Exception {
         logger.info("create 2 indices, test1 on t1, and test2 on t2");
         assertAcked(cluster().client().admin().indices().prepareCreate("conflict"));
@@ -230,6 +232,7 @@ public class TribeIT extends ESIntegTestCase {
         assertThat(tribeClient.admin().cluster().prepareState().get().getState().getMetaData().hasIndex("conflict"), equalTo(false));
     }
 
+    @Test
     public void testOnConflictPrefer() throws Exception {
         testOnConflictPrefer(randomBoolean() ? "t1" : "t2");
     }
@@ -257,6 +260,7 @@ public class TribeIT extends ESIntegTestCase {
         assertThat(tribeClient.admin().cluster().prepareState().get().getState().getMetaData().index("conflict").getSettings().get(TribeService.TRIBE_NAME), equalTo(tribe));
     }
 
+    @Test
     public void testTribeOnOneCluster() throws Exception {
         setupTribeNode(Settings.EMPTY);
         logger.info("create 2 indices, test1 on t1, and test2 on t2");
@@ -333,6 +337,7 @@ public class TribeIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testCloseAndOpenIndex() throws Exception {
         //create an index and close it even before starting the tribe node
         assertAcked(internalCluster().client().admin().indices().prepareCreate("test1"));
diff --git a/core/src/test/java/org/elasticsearch/tribe/TribeUnitTests.java b/core/src/test/java/org/elasticsearch/tribe/TribeUnitTests.java
index 9652537..10b4501 100644
--- a/core/src/test/java/org/elasticsearch/tribe/TribeUnitTests.java
+++ b/core/src/test/java/org/elasticsearch/tribe/TribeUnitTests.java
@@ -31,6 +31,7 @@ import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.InternalTestCluster;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
+import org.junit.Test;
 
 import java.nio.file.Path;
 
@@ -69,6 +70,7 @@ public class TribeUnitTests extends ESTestCase {
         tribe2 = null;
     }
 
+    @Test
     public void testThatTribeClientsIgnoreGlobalSysProps() throws Exception {
         System.setProperty("es.cluster.name", "tribe_node_cluster");
         System.setProperty("es.tribe.t1.cluster.name", "tribe1");
@@ -83,6 +85,7 @@ public class TribeUnitTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testThatTribeClientsIgnoreGlobalConfig() throws Exception {
         Path pathConf = getDataPath("elasticsearch.yml").getParent();
         Settings settings = Settings.builder().put(InternalSettingsPreparer.IGNORE_SYSTEM_PROPERTIES_SETTING, true).put("path.conf", pathConf).build();
diff --git a/core/src/test/java/org/elasticsearch/ttl/SimpleTTLIT.java b/core/src/test/java/org/elasticsearch/ttl/SimpleTTLIT.java
index 468bca2..f871995 100644
--- a/core/src/test/java/org/elasticsearch/ttl/SimpleTTLIT.java
+++ b/core/src/test/java/org/elasticsearch/ttl/SimpleTTLIT.java
@@ -170,7 +170,7 @@ public class SimpleTTLIT extends ESIntegTestCase {
                     if (rarely()) {
                         client().admin().indices().prepareFlush("test").get();
                     } else if (rarely()) {
-                        client().admin().indices().prepareOptimize("test").setMaxNumSegments(1).get();
+                        client().admin().indices().prepareForceMerge("test").setMaxNumSegments(1).get();
                     }
                     IndicesStatsResponse indicesStatsResponse = client().admin().indices().prepareStats("test").clear().setIndexing(true).get();
                     // TTL deletes two docs, but it is indexed in the primary shard and replica shard.
diff --git a/core/src/test/java/org/elasticsearch/update/UpdateByNativeScriptIT.java b/core/src/test/java/org/elasticsearch/update/UpdateByNativeScriptIT.java
index dc10c97..1faee88 100644
--- a/core/src/test/java/org/elasticsearch/update/UpdateByNativeScriptIT.java
+++ b/core/src/test/java/org/elasticsearch/update/UpdateByNativeScriptIT.java
@@ -30,6 +30,7 @@ import org.elasticsearch.script.ScriptService;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.HashMap;
@@ -49,6 +50,7 @@ public class UpdateByNativeScriptIT extends ESIntegTestCase {
         return pluginList(CustomNativeScriptFactory.TestPlugin.class);
     }
 
+    @Test
     public void testThatUpdateUsingNativeScriptWorks() throws Exception {
         createIndex("test");
         ensureYellow();
diff --git a/core/src/test/java/org/elasticsearch/update/UpdateIT.java b/core/src/test/java/org/elasticsearch/update/UpdateIT.java
index a197e91..8c62d97 100644
--- a/core/src/test/java/org/elasticsearch/update/UpdateIT.java
+++ b/core/src/test/java/org/elasticsearch/update/UpdateIT.java
@@ -47,15 +47,10 @@ import org.elasticsearch.script.ScriptService;
 import org.elasticsearch.script.SearchScript;
 import org.elasticsearch.search.lookup.SearchLookup;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Semaphore;
@@ -64,14 +59,7 @@ import java.util.concurrent.TimeUnit;
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertThrows;
-import static org.hamcrest.Matchers.allOf;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.*;
 
 public class UpdateIT extends ESIntegTestCase {
 
@@ -469,6 +457,7 @@ public class UpdateIT extends ESIntegTestCase {
                         .endObject()));
     }
 
+    @Test
     public void testUpsert() throws Exception {
         createTestIndex();
         ensureGreen();
@@ -498,6 +487,7 @@ public class UpdateIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testScriptedUpsert() throws Exception {
         createTestIndex();
         ensureGreen();
@@ -541,6 +531,7 @@ public class UpdateIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testUpsertDoc() throws Exception {
         createTestIndex();
         ensureGreen();
@@ -556,7 +547,8 @@ public class UpdateIT extends ESIntegTestCase {
         assertThat(updateResponse.getGetResult().sourceAsMap().get("bar").toString(), equalTo("baz"));
     }
 
-    // Issue #3265
+    @Test
+    // See: https://github.com/elasticsearch/elasticsearch/issues/3265
     public void testNotUpsertDoc() throws Exception {
         createTestIndex();
         ensureGreen();
@@ -568,6 +560,7 @@ public class UpdateIT extends ESIntegTestCase {
                 .execute(), DocumentMissingException.class);
     }
 
+    @Test
     public void testUpsertFields() throws Exception {
         createTestIndex();
         ensureGreen();
@@ -597,6 +590,7 @@ public class UpdateIT extends ESIntegTestCase {
         assertThat(updateResponse.getGetResult().sourceAsMap().get("extra").toString(), equalTo("foo"));
     }
 
+    @Test
     public void testVersionedUpdate() throws Exception {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias")));
         ensureGreen();
@@ -657,6 +651,7 @@ public class UpdateIT extends ESIntegTestCase {
         assertThrows(client().prepareUpdate(indexOrAlias(), "type", "1").setVersion(10).setRetryOnConflict(5), ActionRequestValidationException.class);
     }
 
+    @Test
     public void testIndexAutoCreation() throws Exception {
         UpdateResponse updateResponse = client().prepareUpdate("test", "type1", "1")
                 .setUpsert(XContentFactory.jsonBuilder().startObject().field("bar", "baz").endObject())
@@ -671,6 +666,7 @@ public class UpdateIT extends ESIntegTestCase {
         assertThat(updateResponse.getGetResult().sourceAsMap().get("extra"), nullValue());
     }
 
+    @Test
     public void testUpdate() throws Exception {
         createTestIndex();
         ensureGreen();
@@ -817,6 +813,7 @@ public class UpdateIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testUpdateRequestWithBothScriptAndDoc() throws Exception {
         createTestIndex();
         ensureGreen();
@@ -834,6 +831,7 @@ public class UpdateIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testUpdateRequestWithScriptAndShouldUpsertDoc() throws Exception {
         createTestIndex();
         ensureGreen();
@@ -850,6 +848,7 @@ public class UpdateIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testContextVariables() throws Exception {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias"))
                         .addMapping("type1", XContentFactory.jsonBuilder()
@@ -928,6 +927,7 @@ public class UpdateIT extends ESIntegTestCase {
         assertNull(updateContext.get("_ttl"));
     }
 
+    @Test
     public void testConcurrentUpdateWithRetryOnConflict() throws Exception {
         final boolean useBulkApi = randomBoolean();
         createTestIndex();
@@ -985,7 +985,8 @@ public class UpdateIT extends ESIntegTestCase {
         }
     }
 
-    public void testStressUpdateDeleteConcurrency() throws Exception {
+    @Test
+    public void stressUpdateDeleteConcurrency() throws Exception {
         //We create an index with merging disabled so that deletes don't get merged away
         assertAcked(prepareCreate("test")
                 .addMapping("type1", XContentFactory.jsonBuilder()
diff --git a/core/src/test/java/org/elasticsearch/update/UpdateNoopIT.java b/core/src/test/java/org/elasticsearch/update/UpdateNoopIT.java
index b4b5eef..499fb52 100644
--- a/core/src/test/java/org/elasticsearch/update/UpdateNoopIT.java
+++ b/core/src/test/java/org/elasticsearch/update/UpdateNoopIT.java
@@ -25,6 +25,7 @@ import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
 
@@ -34,7 +35,8 @@ import static org.hamcrest.Matchers.notNullValue;
  * Tests for noop updates.
  */
 public class UpdateNoopIT extends ESIntegTestCase {
-    public void testSingleField() throws Exception {
+    @Test
+    public void singleField() throws Exception {
         updateAndCheckSource(1, fields("bar", "baz"));
         updateAndCheckSource(1, fields("bar", "baz"));
         updateAndCheckSource(2, fields("bar", "bir"));
@@ -49,7 +51,8 @@ public class UpdateNoopIT extends ESIntegTestCase {
         assertEquals(4, totalNoopUpdates());
     }
 
-    public void testTwoFields() throws Exception {
+    @Test
+    public void twoFields() throws Exception {
         // Use random keys so we get random iteration order.
         String key1 = 1 + randomAsciiOfLength(3);
         String key2 = 2 + randomAsciiOfLength(3);
@@ -71,7 +74,8 @@ public class UpdateNoopIT extends ESIntegTestCase {
         assertEquals(5, totalNoopUpdates());
     }
 
-    public void testArrayField() throws Exception {
+    @Test
+    public void arrayField() throws Exception {
         updateAndCheckSource(1, fields("bar", "baz"));
         updateAndCheckSource(2, fields("bar", new String[] {"baz", "bort"}));
         updateAndCheckSource(2, fields("bar", new String[] {"baz", "bort"}));
@@ -88,7 +92,8 @@ public class UpdateNoopIT extends ESIntegTestCase {
         assertEquals(5, totalNoopUpdates());
     }
 
-    public void testMap() throws Exception {
+    @Test
+    public void map() throws Exception {
         // Use random keys so we get variable iteration order.
         String key1 = 1 + randomAsciiOfLength(3);
         String key2 = 2 + randomAsciiOfLength(3);
@@ -138,7 +143,8 @@ public class UpdateNoopIT extends ESIntegTestCase {
         assertEquals(3, totalNoopUpdates());
     }
 
-    public void testMapAndField() throws Exception {
+    @Test
+    public void mapAndField() throws Exception {
         updateAndCheckSource(1, XContentFactory.jsonBuilder().startObject()
                 .field("f", "foo")
                 .startObject("m")
@@ -210,7 +216,8 @@ public class UpdateNoopIT extends ESIntegTestCase {
      * Totally empty requests are noop if and only if detect noops is true and
      * its true by default.
      */
-    public void testTotallyEmpty() throws Exception {
+    @Test
+    public void totallyEmpty() throws Exception {
         updateAndCheckSource(1, XContentFactory.jsonBuilder().startObject()
                 .field("f", "foo")
                 .startObject("m")
diff --git a/core/src/test/java/org/elasticsearch/validate/RenderSearchTemplateIT.java b/core/src/test/java/org/elasticsearch/validate/RenderSearchTemplateIT.java
index e819286..10812c1 100644
--- a/core/src/test/java/org/elasticsearch/validate/RenderSearchTemplateIT.java
+++ b/core/src/test/java/org/elasticsearch/validate/RenderSearchTemplateIT.java
@@ -29,6 +29,7 @@ import org.elasticsearch.script.ScriptService.ScriptType;
 import org.elasticsearch.script.Template;
 import org.elasticsearch.script.mustache.MustacheScriptEngineService;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -39,21 +40,23 @@ import static org.hamcrest.Matchers.notNullValue;
 
 @ESIntegTestCase.SuiteScopeTestCase
 public class RenderSearchTemplateIT extends ESIntegTestCase {
-    private static final String TEMPLATE_CONTENTS = "{\"size\":\"{{size}}\",\"query\":{\"match\":{\"foo\":\"{{value}}\"}},\"aggs\":{\"objects\":{\"terms\":{\"field\":\"{{value}}\",\"size\":\"{{size}}\"}}}}";
 
+    private static final String TEMPLATE_CONTENTS = "{\"size\":\"{{size}}\",\"query\":{\"match\":{\"foo\":\"{{value}}\"}},\"aggs\":{\"objects\":{\"terms\":{\"field\":\"{{value}}\",\"size\":\"{{size}}\"}}}}";
+    
     @Override
     protected void setupSuiteScopeCluster() throws Exception {
         client().preparePutIndexedScript(MustacheScriptEngineService.NAME, "index_template_1", "{ \"template\": " + TEMPLATE_CONTENTS + " }").get();
     }
-
+    
     @Override
     public Settings nodeSettings(int nodeOrdinal) {
         //Set path so ScriptService will pick up the test scripts
         return settingsBuilder().put(super.nodeSettings(nodeOrdinal))
                 .put("path.conf", this.getDataPath("config")).build();
     }
-
-    public void testInlineTemplate() {
+    
+    @Test
+    public void inlineTemplate() {
         Map<String, Object> params = new HashMap<>();
         params.put("value", "bar");
         params.put("size", 20);
@@ -67,7 +70,7 @@ public class RenderSearchTemplateIT extends ESIntegTestCase {
         String expected = TEMPLATE_CONTENTS.replace("{{value}}", "bar").replace("{{size}}", "20");
         Map<String, Object> expectedMap = XContentHelper.convertToMap(new BytesArray(expected), false).v2();
         assertThat(sourceAsMap, equalTo(expectedMap));
-
+        
         params = new HashMap<>();
         params.put("value", "baz");
         params.put("size", 100);
@@ -81,8 +84,9 @@ public class RenderSearchTemplateIT extends ESIntegTestCase {
         expectedMap = XContentHelper.convertToMap(new BytesArray(expected), false).v2();
         assertThat(sourceAsMap, equalTo(expectedMap));
     }
-
-    public void testIndexedTemplate() {
+    
+    @Test
+    public void indexedTemplate() {
         Map<String, Object> params = new HashMap<>();
         params.put("value", "bar");
         params.put("size", 20);
@@ -96,7 +100,7 @@ public class RenderSearchTemplateIT extends ESIntegTestCase {
         String expected = TEMPLATE_CONTENTS.replace("{{value}}", "bar").replace("{{size}}", "20");
         Map<String, Object> expectedMap = XContentHelper.convertToMap(new BytesArray(expected), false).v2();
         assertThat(sourceAsMap, equalTo(expectedMap));
-
+        
         params = new HashMap<>();
         params.put("value", "baz");
         params.put("size", 100);
@@ -110,8 +114,9 @@ public class RenderSearchTemplateIT extends ESIntegTestCase {
         expectedMap = XContentHelper.convertToMap(new BytesArray(expected), false).v2();
         assertThat(sourceAsMap, equalTo(expectedMap));
     }
-
-    public void testFileTemplate() {
+    
+    @Test
+    public void fileTemplate() {
         Map<String, Object> params = new HashMap<>();
         params.put("value", "bar");
         params.put("size", 20);
@@ -125,7 +130,7 @@ public class RenderSearchTemplateIT extends ESIntegTestCase {
         String expected = TEMPLATE_CONTENTS.replace("{{value}}", "bar").replace("{{size}}", "20");
         Map<String, Object> expectedMap = XContentHelper.convertToMap(new BytesArray(expected), false).v2();
         assertThat(sourceAsMap, equalTo(expectedMap));
-
+        
         params = new HashMap<>();
         params.put("value", "baz");
         params.put("size", 100);
diff --git a/core/src/test/java/org/elasticsearch/validate/SimpleValidateQueryIT.java b/core/src/test/java/org/elasticsearch/validate/SimpleValidateQueryIT.java
index 81aaa5d..22c959f 100644
--- a/core/src/test/java/org/elasticsearch/validate/SimpleValidateQueryIT.java
+++ b/core/src/test/java/org/elasticsearch/validate/SimpleValidateQueryIT.java
@@ -18,6 +18,7 @@
  */
 package org.elasticsearch.validate;
 
+import java.nio.charset.StandardCharsets;
 import org.elasticsearch.action.admin.indices.alias.Alias;
 import org.elasticsearch.action.admin.indices.validate.query.ValidateQueryResponse;
 import org.elasticsearch.client.Client;
@@ -36,9 +37,9 @@ import org.hamcrest.Matcher;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.format.ISODateTimeFormat;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.nio.charset.StandardCharsets;
 
 import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;
 import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;
@@ -46,7 +47,6 @@ import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcke
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.nullValue;
 
 /**
@@ -54,7 +54,9 @@ import static org.hamcrest.Matchers.nullValue;
  */
 @ClusterScope(randomDynamicTemplates = false, scope = Scope.SUITE)
 public class SimpleValidateQueryIT extends ESIntegTestCase {
-    public void testSimpleValidateQuery() throws Exception {
+
+    @Test
+    public void simpleValidateQuery() throws Exception {
         createIndex("test");
         ensureGreen();
         client().admin().indices().preparePutMapping("test").setType("type1")
@@ -78,7 +80,8 @@ public class SimpleValidateQueryIT extends ESIntegTestCase {
         assertThat(client().admin().indices().prepareValidateQuery("test").setQuery(QueryBuilders.queryStringQuery("foo:1 AND")).execute().actionGet().isValid(), equalTo(false));
     }
 
-    public void testExplainValidateQueryTwoNodes() throws IOException {
+    @Test
+    public void explainValidateQueryTwoNodes() throws IOException {
         createIndex("test");
         ensureGreen();
         client().admin().indices().preparePutMapping("test").setType("type1")
@@ -116,8 +119,8 @@ public class SimpleValidateQueryIT extends ESIntegTestCase {
         }
     }
 
-    // Issue #3629
-    public void testExplainDateRangeInQueryString() {
+    @Test //https://github.com/elasticsearch/elasticsearch/issues/3629
+    public void explainDateRangeInQueryString() {
         assertAcked(prepareCreate("test").setSettings(Settings.settingsBuilder()
                 .put(indexSettings())
                 .put("index.number_of_shards", 1)));
@@ -142,16 +145,13 @@ public class SimpleValidateQueryIT extends ESIntegTestCase {
         assertThat(response.isValid(), equalTo(true));
     }
 
-    public void testValidateEmptyCluster() {
-        try {
-            client().admin().indices().prepareValidateQuery().get();
-            fail("Expected IndexNotFoundException");
-        } catch (IndexNotFoundException e) {
-            assertThat(e.getMessage(), is("no such index"));
-        }
+    @Test(expected = IndexNotFoundException.class)
+    public void validateEmptyCluster() {
+        client().admin().indices().prepareValidateQuery().get();
     }
 
-    public void testExplainNoQuery() {
+    @Test
+    public void explainNoQuery() {
         createIndex("test");
         ensureGreen();
 
@@ -162,7 +162,8 @@ public class SimpleValidateQueryIT extends ESIntegTestCase {
         assertThat(validateQueryResponse.getQueryExplanation().get(0).getExplanation(), equalTo("*:*"));
     }
 
-    public void testExplainFilteredAlias() {
+    @Test
+    public void explainFilteredAlias() {
         assertAcked(prepareCreate("test")
                 .addMapping("test", "field", "type=string")
                 .addAlias(new Alias("alias").filter(QueryBuilders.termQuery("field", "value1"))));
@@ -176,7 +177,8 @@ public class SimpleValidateQueryIT extends ESIntegTestCase {
         assertThat(validateQueryResponse.getQueryExplanation().get(0).getExplanation(), containsString("field:value1"));
     }
 
-    public void testExplainMatchPhrasePrefix() {
+    @Test
+    public void explainMatchPhrasePrefix() {
         assertAcked(prepareCreate("test").setSettings(
                 Settings.settingsBuilder().put(indexSettings())
                         .put("index.analysis.filter.syns.type", "synonym")
@@ -212,7 +214,8 @@ public class SimpleValidateQueryIT extends ESIntegTestCase {
         assertThat(validateQueryResponse.getQueryExplanation().get(0).getExplanation(), containsString("field:\"foo (one* two*)\""));
     }
 
-    public void testExplainWithRewriteValidateQuery() throws Exception {
+    @Test
+    public void explainWithRewriteValidateQuery() throws Exception {
         client().admin().indices().prepareCreate("test")
                 .addMapping("type1", "field", "type=string,analyzer=whitespace")
                 .setSettings(SETTING_NUMBER_OF_SHARDS, 1).get();
@@ -255,7 +258,8 @@ public class SimpleValidateQueryIT extends ESIntegTestCase {
                 containsString("field:huge field:pidgin"), true);
     }
 
-    public void testIrrelevantPropertiesBeforeQuery() throws IOException {
+    @Test
+    public void irrelevantPropertiesBeforeQuery() throws IOException {
         createIndex("test");
         ensureGreen();
         refresh();
@@ -263,7 +267,8 @@ public class SimpleValidateQueryIT extends ESIntegTestCase {
         assertThat(client().admin().indices().prepareValidateQuery("test").setSource(new BytesArray("{\"foo\": \"bar\", \"query\": {\"term\" : { \"user\" : \"kimchy\" }}}")).get().isValid(), equalTo(false));
     }
 
-    public void testIrrelevantPropertiesAfterQuery() throws IOException {
+    @Test
+    public void irrelevantPropertiesAfterQuery() throws IOException {
         createIndex("test");
         ensureGreen();
         refresh();
diff --git a/core/src/test/java/org/elasticsearch/versioning/ConcurrentDocumentOperationIT.java b/core/src/test/java/org/elasticsearch/versioning/ConcurrentDocumentOperationIT.java
index bb8636d..402ec0d 100644
--- a/core/src/test/java/org/elasticsearch/versioning/ConcurrentDocumentOperationIT.java
+++ b/core/src/test/java/org/elasticsearch/versioning/ConcurrentDocumentOperationIT.java
@@ -22,6 +22,7 @@ package org.elasticsearch.versioning;
 import org.elasticsearch.action.ActionListener;
 import org.elasticsearch.action.index.IndexResponse;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
@@ -36,7 +37,10 @@ import static org.hamcrest.Matchers.nullValue;
  *
  */
 public class ConcurrentDocumentOperationIT extends ESIntegTestCase {
-    public void testConcurrentOperationOnSameDoc() throws Exception {
+
+    @Test
+    public void concurrentOperationOnSameDocTest() throws Exception {
+
         logger.info("--> create an index with 1 shard and max replicas based on nodes");
         assertAcked(prepareCreate("test")
                 .setSettings(settingsBuilder().put(indexSettings()).put("index.number_of_shards", 1)));
diff --git a/core/src/test/java/org/elasticsearch/versioning/SimpleVersioningIT.java b/core/src/test/java/org/elasticsearch/versioning/SimpleVersioningIT.java
index edbbebb..93c29e0 100644
--- a/core/src/test/java/org/elasticsearch/versioning/SimpleVersioningIT.java
+++ b/core/src/test/java/org/elasticsearch/versioning/SimpleVersioningIT.java
@@ -31,13 +31,9 @@ import org.elasticsearch.index.VersionType;
 import org.elasticsearch.index.engine.FlushNotAllowedEngineException;
 import org.elasticsearch.index.engine.VersionConflictEngineException;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Random;
-import java.util.Set;
+import java.util.*;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -51,6 +47,8 @@ import static org.hamcrest.Matchers.lessThanOrEqualTo;
  *
  */
 public class SimpleVersioningIT extends ESIntegTestCase {
+
+    @Test
     public void testExternalVersioningInitialDelete() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -71,6 +69,7 @@ public class SimpleVersioningIT extends ESIntegTestCase {
         assertThat(indexResponse.getVersion(), equalTo(18L));
     }
 
+    @Test
     public void testForce() throws Exception {
         createIndex("test");
         ensureGreen("test"); // we are testing force here which doesn't work if we are recovering at the same time - zzzzz...
@@ -101,6 +100,7 @@ public class SimpleVersioningIT extends ESIntegTestCase {
         assertThat(deleteResponse.getVersion(), equalTo(v));
     }
 
+    @Test
     public void testExternalGTE() throws Exception {
         createIndex("test");
 
@@ -147,6 +147,7 @@ public class SimpleVersioningIT extends ESIntegTestCase {
         assertThat(deleteResponse.getVersion(), equalTo(18l));
     }
 
+    @Test
     public void testExternalVersioning() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -210,6 +211,7 @@ public class SimpleVersioningIT extends ESIntegTestCase {
         assertThat(indexResponse.getVersion(), equalTo(20l));
     }
 
+    @Test
     public void testRequireUnitsOnUpdateSettings() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -224,6 +226,7 @@ public class SimpleVersioningIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testInternalVersioningInitialDelete() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -236,6 +239,8 @@ public class SimpleVersioningIT extends ESIntegTestCase {
         assertThat(indexResponse.getVersion(), equalTo(1l));
     }
 
+
+    @Test
     public void testInternalVersioning() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -293,6 +298,7 @@ public class SimpleVersioningIT extends ESIntegTestCase {
         assertThat(deleteResponse.getVersion(), equalTo(4l));
     }
 
+    @Test
     public void testSimpleVersioningWithFlush() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -330,6 +336,7 @@ public class SimpleVersioningIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testVersioningWithBulk() {
         createIndex("test");
         ensureGreen();
@@ -514,6 +521,8 @@ public class SimpleVersioningIT extends ESIntegTestCase {
         }
     }
 
+
+    @Test
     public void testRandomIDsAndVersions() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -710,6 +719,7 @@ public class SimpleVersioningIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testDeleteNotLost() throws Exception {
 
         // We require only one shard for this test, so that the 2nd delete provokes pruning the deletes map:
@@ -789,7 +799,9 @@ public class SimpleVersioningIT extends ESIntegTestCase {
                 equalTo(-1L));
     }
 
+    @Test
     public void testGCDeletesZero() throws Exception {
+
         createIndex("test");
         ensureGreen();
 
diff --git a/core/src/test/java/org/elasticsearch/watcher/FileWatcherTests.java b/core/src/test/java/org/elasticsearch/watcher/FileWatcherTests.java
index 5b5a16c..14f7eca 100644
--- a/core/src/test/java/org/elasticsearch/watcher/FileWatcherTests.java
+++ b/core/src/test/java/org/elasticsearch/watcher/FileWatcherTests.java
@@ -21,6 +21,7 @@ package org.elasticsearch.watcher;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.BufferedWriter;
 import java.io.IOException;
@@ -31,13 +32,13 @@ import java.nio.file.StandardOpenOption;
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.hamcrest.Matchers.contains;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.hasSize;
+import static org.hamcrest.Matchers.*;
 
 @LuceneTestCase.SuppressFileSystems("ExtrasFS")
 public class FileWatcherTests extends ESTestCase {
+
     private class RecordingChangeListener extends FileChangesListener {
+
         private Path rootDir;
 
         private RecordingChangeListener(Path rootDir) {
@@ -90,6 +91,7 @@ public class FileWatcherTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSimpleFileOperations() throws IOException {
         Path tempDir = createTempDir();
         RecordingChangeListener changes = new RecordingChangeListener(tempDir);
@@ -118,6 +120,7 @@ public class FileWatcherTests extends ESTestCase {
 
     }
 
+    @Test
     public void testSimpleDirectoryOperations() throws IOException {
         Path tempDir = createTempDir();
         RecordingChangeListener changes = new RecordingChangeListener(tempDir);
@@ -207,6 +210,7 @@ public class FileWatcherTests extends ESTestCase {
 
     }
 
+    @Test
     public void testNestedDirectoryOperations() throws IOException {
         Path tempDir = createTempDir();
         RecordingChangeListener changes = new RecordingChangeListener(tempDir);
@@ -272,6 +276,7 @@ public class FileWatcherTests extends ESTestCase {
         ));
     }
 
+    @Test
     public void testFileReplacingDirectory() throws IOException {
         Path tempDir = createTempDir();
         RecordingChangeListener changes = new RecordingChangeListener(tempDir);
@@ -318,6 +323,7 @@ public class FileWatcherTests extends ESTestCase {
         ));
     }
 
+    @Test
     public void testEmptyDirectory() throws IOException {
         Path tempDir = createTempDir();
         RecordingChangeListener changes = new RecordingChangeListener(tempDir);
@@ -340,6 +346,7 @@ public class FileWatcherTests extends ESTestCase {
         ));
     }
 
+    @Test
     public void testNoDirectoryOnInit() throws IOException {
         Path tempDir = createTempDir();
         RecordingChangeListener changes = new RecordingChangeListener(tempDir);
@@ -363,6 +370,7 @@ public class FileWatcherTests extends ESTestCase {
         ));
     }
 
+    @Test
     public void testNoFileOnInit() throws IOException {
         Path tempDir = createTempDir();
         RecordingChangeListener changes = new RecordingChangeListener(tempDir);
@@ -381,11 +389,11 @@ public class FileWatcherTests extends ESTestCase {
                 equalTo("onFileCreated: testfile.txt")
         ));
     }
-
+    
     static void touch(Path path) throws IOException {
         Files.newOutputStream(path).close();
     }
-
+    
     static void append(String string, Path path, Charset cs) throws IOException {
         try (BufferedWriter writer = Files.newBufferedWriter(path, cs, StandardOpenOption.APPEND)) {
             writer.append(string);
diff --git a/core/src/test/java/org/elasticsearch/watcher/ResourceWatcherServiceTests.java b/core/src/test/java/org/elasticsearch/watcher/ResourceWatcherServiceTests.java
index 6c6c45e..b503436 100644
--- a/core/src/test/java/org/elasticsearch/watcher/ResourceWatcherServiceTests.java
+++ b/core/src/test/java/org/elasticsearch/watcher/ResourceWatcherServiceTests.java
@@ -22,16 +22,17 @@ package org.elasticsearch.watcher;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.threadpool.ThreadPool;
+import org.junit.Test;
 
 import static org.elasticsearch.common.unit.TimeValue.timeValueSeconds;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class ResourceWatcherServiceTests extends ESTestCase {
+
+    @Test
     public void testSettings() throws Exception {
         ThreadPool threadPool = new ThreadPool("test");
 
@@ -64,6 +65,8 @@ public class ResourceWatcherServiceTests extends ESTestCase {
         terminate(threadPool);
     }
 
+
+    @Test
     public void testHandle() throws Exception {
         ThreadPool threadPool = new ThreadPool("test");
         Settings settings = Settings.builder().build();
diff --git a/dev-tools/src/main/resources/forbidden/test-signatures.txt b/dev-tools/src/main/resources/forbidden/test-signatures.txt
index bd6744e..3cde735 100644
--- a/dev-tools/src/main/resources/forbidden/test-signatures.txt
+++ b/dev-tools/src/main/resources/forbidden/test-signatures.txt
@@ -21,5 +21,3 @@ com.carrotsearch.randomizedtesting.annotations.Repeat @ Don't commit hardcoded r
 org.apache.lucene.codecs.Codec#setDefault(org.apache.lucene.codecs.Codec) @ Use the SuppressCodecs("*") annotation instead
 org.apache.lucene.util.LuceneTestCase$Slow @ Don't write slow tests
 org.junit.Ignore @ Use AwaitsFix instead
-
-org.junit.Test @defaultMessage Just name your test method testFooBar
diff --git a/docs/java-api/query-dsl/compound-queries.asciidoc b/docs/java-api/query-dsl/compound-queries.asciidoc
index 6d7e5e1..96b0fd2 100644
--- a/docs/java-api/query-dsl/compound-queries.asciidoc
+++ b/docs/java-api/query-dsl/compound-queries.asciidoc
@@ -48,4 +48,6 @@ include::dis-max-query.asciidoc[]
 include::function-score-query.asciidoc[]
 include::boosting-query.asciidoc[]
 include::indices-query.asciidoc[]
+include::not-query.asciidoc[]
+
 
diff --git a/docs/java-api/query-dsl/not-query.asciidoc b/docs/java-api/query-dsl/not-query.asciidoc
new file mode 100644
index 0000000..b9c08d4
--- /dev/null
+++ b/docs/java-api/query-dsl/not-query.asciidoc
@@ -0,0 +1,15 @@
+[[java-query-dsl-not-query]]
+==== Not Query
+
+See {ref}/query-dsl-not-query.html[Not Query]
+
+
+[source,java]
+--------------------------------------------------
+QueryBuilder qb = notQuery(
+    rangeQuery("price").from("1").to("2")  <1>
+);
+--------------------------------------------------
+<1> query
+
+
diff --git a/docs/reference/cat/thread_pool.asciidoc b/docs/reference/cat/thread_pool.asciidoc
index 508b3ee..f50dc36 100644
--- a/docs/reference/cat/thread_pool.asciidoc
+++ b/docs/reference/cat/thread_pool.asciidoc
@@ -57,7 +57,7 @@ Currently available <<modules-threadpool,thread pools>>:
 |`get` |`g` |Thread pool used for <<docs-get,get>> operations
 |`index` |`i` |Thread pool used for <<docs-index_,index>>/<<docs-delete,delete>> operations
 |`management` |`ma` |Thread pool used for management of Elasticsearch (e.g. cluster management)
-|`optimize` |`o` |Thread pool used for <<indices-optimize,optimize>> operations
+|`force_merge` |`fm` |Thread pool used for <<indices-forcemerge,force merge>> operations
 |`percolate` |`p` |Thread pool used for <<search-percolate,percolator>> operations
 |`refresh` |`r` |Thread pool used for <<indices-refresh,refresh>> operations
 |`search` |`s` |Thread pool used for <<search-search,search>>/<<search-count,count>> operations
@@ -107,4 +107,4 @@ other details like the `ip` of the responding node(s).
 |`host` |`h` |The hostname for the current node
 |`ip` |`i` |The IP address for the current node
 |`port` |`po` |The bound transport port for the current node
-|=======================================================================
\ No newline at end of file
+|=======================================================================
diff --git a/docs/reference/indices.asciidoc b/docs/reference/indices.asciidoc
index 634e488..da41ac5 100644
--- a/docs/reference/indices.asciidoc
+++ b/docs/reference/indices.asciidoc
@@ -59,7 +59,7 @@ and warmers.
 * <<indices-clearcache>>
 * <<indices-refresh>>
 * <<indices-flush>>
-* <<indices-optimize>>
+* <<indices-forcemerge>>
 * <<indices-upgrade>>
 
 --
@@ -110,7 +110,7 @@ include::indices/flush.asciidoc[]
 
 include::indices/refresh.asciidoc[]
 
-include::indices/optimize.asciidoc[]
+include::indices/forcemerge.asciidoc[]
 
 include::indices/upgrade.asciidoc[]
 
diff --git a/docs/reference/indices/forcemerge.asciidoc b/docs/reference/indices/forcemerge.asciidoc
new file mode 100644
index 0000000..a33b7fd
--- /dev/null
+++ b/docs/reference/indices/forcemerge.asciidoc
@@ -0,0 +1,51 @@
+[[indices-forcemerge]]
+== Force Merge
+
+The force merge API allows to force merging of one or more indices through an
+API. The merge relates to the number of segments a Lucene index holds within
+each shard. The force merge operation allows to reduce the number of segments by
+merging them.
+
+This call will block until the merge is complete. If the http connection is
+lost, the request will continue in the background, and any new requests will
+block until the previous force merge is complete.
+
+[source,js]
+--------------------------------------------------
+$ curl -XPOST 'http://localhost:9200/twitter/_forcemerge'
+--------------------------------------------------
+
+[float]
+[[forcemerge-parameters]]
+=== Request Parameters
+
+The force merge API accepts the following request parameters:
+
+[horizontal]
+`max_num_segments`:: The number of segments to merge to. To fully
+merge the index, set it to `1`. Defaults to simply checking if a
+merge needs to execute, and if so, executes it.
+
+`only_expunge_deletes`:: Should the merge process only expunge segments with
+deletes in it. In Lucene, a document is not deleted from a segment, just marked
+as deleted. During a merge process of segments, a new segment is created that
+does not have those deletes. This flag allows to only merge segments that have
+deletes. Defaults to `false`.  Note that this won't override the
+`index.merge.policy.expunge_deletes_allowed` threshold.
+
+`flush`::  Should a flush be performed after the forced merge. Defaults to
+`true`.
+
+[float]
+[[forcemerge-multi-index]]
+=== Multi Index
+
+The force merge API can be applied to more than one index with a single call, or
+even on `_all` the indices.
+
+[source,js]
+--------------------------------------------------
+$ curl -XPOST 'http://localhost:9200/kimchy,elasticsearch/_forcemerge'
+
+$ curl -XPOST 'http://localhost:9200/_forcemerge'
+--------------------------------------------------
diff --git a/docs/reference/indices/optimize.asciidoc b/docs/reference/indices/optimize.asciidoc
index 799f067..8a9462c 100644
--- a/docs/reference/indices/optimize.asciidoc
+++ b/docs/reference/indices/optimize.asciidoc
@@ -1,6 +1,8 @@
 [[indices-optimize]]
 == Optimize
 
+deprecated[2.1.0,Optimize API has been renamed to the force merge API]
+
 The optimize API allows to optimize one or more indices through an API.
 The optimize process basically optimizes the index for faster search
 operations (and relates to the number of segments a Lucene index holds
diff --git a/docs/reference/indices/update-settings.asciidoc b/docs/reference/indices/update-settings.asciidoc
index d5d0004..5745651 100644
--- a/docs/reference/indices/update-settings.asciidoc
+++ b/docs/reference/indices/update-settings.asciidoc
@@ -63,11 +63,11 @@ curl -XPUT localhost:9200/test/_settings -d '{
     } }'
 --------------------------------------------------
 
-And, an optimize should be called:
+And, a force merge should be called:
 
 [source,js]
 --------------------------------------------------
-curl -XPOST 'http://localhost:9200/test/_optimize?max_num_segments=5'
+curl -XPOST 'http://localhost:9200/test/_forcemerge?max_num_segments=5'
 --------------------------------------------------
 
 [float]
diff --git a/docs/reference/indices/upgrade.asciidoc b/docs/reference/indices/upgrade.asciidoc
index f381526..c9d371b 100644
--- a/docs/reference/indices/upgrade.asciidoc
+++ b/docs/reference/indices/upgrade.asciidoc
@@ -70,7 +70,7 @@ $ curl -XPOST 'http://localhost:9200/twitter/_upgrade'
 
 NOTE: Upgrading is an I/O intensive operation, and is limited to processing a
 single shard per node at a time.  It also is not allowed to run at the same
-time as optimize.
+time as an optimize/force-merge.
 
 This call will block until the upgrade is complete. If the http connection
 is lost, the request will continue in the background, and
@@ -131,4 +131,4 @@ curl 'http://localhost:9200/twitter/_upgrade?pretty&human'
 The level of details in the upgrade status command can be controlled by
 setting `level` parameter to `cluster`, `index` (default) or `shard` levels.
 For example, you can run the upgrade status command with `level=shard` to
-get detailed upgrade information of each individual shard.
\ No newline at end of file
+get detailed upgrade information of each individual shard.
diff --git a/docs/reference/migration/migrate_2_1.asciidoc b/docs/reference/migration/migrate_2_1.asciidoc
index 1dbef8b..cf8c16e 100644
--- a/docs/reference/migration/migrate_2_1.asciidoc
+++ b/docs/reference/migration/migrate_2_1.asciidoc
@@ -65,4 +65,10 @@ MoreLikeThisBuilder#addLikeItem.
 
 If sorting on field inside a nested object then the `nested_path` should be specified.
 Before there was an attempt to resolve the nested path automatically, but that was sometimes incorrect.
-To avoid confusion the `nested_path` should always be specified.
\ No newline at end of file
+To avoid confusion the `nested_path` should always be specified.
+
+=== Deprecations
+
+==== Optimize API
+
+The Optimize API has been deprecated, all new optimize actions should use the new Force Merge API.
diff --git a/docs/reference/migration/migrate_3_0.asciidoc b/docs/reference/migration/migrate_3_0.asciidoc
index 20dd483..8fb3c6b 100644
--- a/docs/reference/migration/migrate_3_0.asciidoc
+++ b/docs/reference/migration/migrate_3_0.asciidoc
@@ -285,12 +285,6 @@ The two individual setters for existence() and nullValue() were removed in favou
 optional constructor settings in order to better capture and validate their interdependent
 settings at construction time.
 
-==== NotQueryBuilder
-
-The NotQueryBuilder which was deprecated in 2.1.0 is removed. As a replacement use BoolQueryBuilder
-with added mustNot() clause. So instead of using `new NotQueryBuilder(filter)` now use 
-`new BoolQueryBuilder().mustNot(filter)`. 
-
 ==== TermsQueryBuilder
 
 Remove the setter for `termsLookup()`, making it only possible to either use a TermsLookup object or
diff --git a/docs/reference/query-dsl.asciidoc b/docs/reference/query-dsl.asciidoc
index 1eb6fbd..b4a82af 100644
--- a/docs/reference/query-dsl.asciidoc
+++ b/docs/reference/query-dsl.asciidoc
@@ -20,7 +20,7 @@ Compound query clauses::
 Compound query clauses wrap other leaf *or* compound queries and are used to combine
 multiple queries in a logical fashion (such as the
 <<query-dsl-bool-query,`bool`>> or <<query-dsl-dis-max-query,`dis_max`>> query),
-or to alter their behaviour (such as the
+or to alter their behaviour (such as the <<query-dsl-not-query,`not`>> or
 <<query-dsl-constant-score-query,`constant_score`>> query).
 
 Query clauses behave differently depending on whether they are used in
diff --git a/docs/reference/query-dsl/compound-queries.asciidoc b/docs/reference/query-dsl/compound-queries.asciidoc
index 07624f0..c6a1f0f 100644
--- a/docs/reference/query-dsl/compound-queries.asciidoc
+++ b/docs/reference/query-dsl/compound-queries.asciidoc
@@ -48,3 +48,5 @@ include::dis-max-query.asciidoc[]
 include::function-score-query.asciidoc[]
 include::boosting-query.asciidoc[]
 include::indices-query.asciidoc[]
+include::not-query.asciidoc[]
+
diff --git a/docs/reference/query-dsl/not-query.asciidoc b/docs/reference/query-dsl/not-query.asciidoc
new file mode 100644
index 0000000..7854ee9
--- /dev/null
+++ b/docs/reference/query-dsl/not-query.asciidoc
@@ -0,0 +1,51 @@
+[[query-dsl-not-query]]
+=== Not Query
+
+A query that filters out matched documents using a query. For example:
+
+[source,js]
+--------------------------------------------------
+{
+    "bool" : {
+        "must" : {
+            "term" : { "name.first" : "shay" }
+        },
+        "filter" : {
+            "not" : {
+                "range" : {
+                    "postDate" : {
+                        "from" : "2010-03-01",
+                        "to" : "2010-04-01"
+                    }
+                }
+            }
+        }
+    }
+}
+--------------------------------------------------
+
+Or, in a longer form with a `filter` element:
+
+[source,js]
+--------------------------------------------------
+{
+    "bool" : {
+        "must" : {
+            "term" : { "name.first" : "shay" }
+        },
+        "filter" : {
+            "not" : {
+                "filter" :  {
+                    "range" : {
+                        "postDate" : {
+                            "from" : "2010-03-01",
+                            "to" : "2010-04-01"
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
+--------------------------------------------------
+
diff --git a/docs/reference/redirects.asciidoc b/docs/reference/redirects.asciidoc
index e8b01ac..922216a 100644
--- a/docs/reference/redirects.asciidoc
+++ b/docs/reference/redirects.asciidoc
@@ -80,7 +80,9 @@ in ``query context'' and as a filter in ``filter context'' (see <<query-dsl>>).
 [role="exclude",id="query-dsl-not-filter"]
 === Not Filter
 
-The `not` query has been replaced by using a `mustNot` clause in a Boolean query.
+The `not` filter has been replaced by the <<query-dsl-not-query>>.  It behaves
+as a query in ``query context'' and as a filter in ``filter context'' (see
+<<query-dsl>>).
 
 [role="exclude",id="query-dsl-bool-filter"]
 === Bool Filter
@@ -441,8 +443,3 @@ parameter of search requests.
 
 The `limit` filter is replaced in favour of the <<search-request-body,terminate_after>>
 parameter of search requests.
-
-[role="exclude",id="query-dsl-not-query"]
-=== Not query
-
-The `not` query has been replaced by using a `mustNot` clause in a Boolean query.
diff --git a/docs/reference/testing/testing-framework.asciidoc b/docs/reference/testing/testing-framework.asciidoc
index a2d3f39..9c0e5f4 100644
--- a/docs/reference/testing/testing-framework.asciidoc
+++ b/docs/reference/testing/testing-framework.asciidoc
@@ -81,7 +81,7 @@ There are a couple of helper methods in `ESIntegTestCase`, which will make your
 `createIndex(name)`::   Creates an index with the specified name
 `flush()`::             Flushes all indices in a cluster
 `flushAndRefresh()`::   Combines `flush()` and `refresh()` calls
-`optimize()`::          Waits for all relocations and optimized all indices in the cluster to one segment.
+`forceMerge()`::        Waits for all relocations and force merges all indices in the cluster to one segment.
 `indexExists(name)`::   Checks if given index exists
 `admin()`::             Returns an `AdminClient` for administrative tasks
 `clusterService()`::    Returns the cluster service java class
diff --git a/plugins/analysis-icu/src/test/java/org/elasticsearch/index/analysis/SimpleIcuAnalysisTests.java b/plugins/analysis-icu/src/test/java/org/elasticsearch/index/analysis/SimpleIcuAnalysisTests.java
index 5dfff29..8369809 100644
--- a/plugins/analysis-icu/src/test/java/org/elasticsearch/index/analysis/SimpleIcuAnalysisTests.java
+++ b/plugins/analysis-icu/src/test/java/org/elasticsearch/index/analysis/SimpleIcuAnalysisTests.java
@@ -21,6 +21,7 @@ package org.elasticsearch.index.analysis;
 
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.index.analysis.AnalysisTestUtils.createAnalysisService;
@@ -28,6 +29,8 @@ import static org.hamcrest.Matchers.instanceOf;
 /**
  */
 public class SimpleIcuAnalysisTests extends ESTestCase {
+
+    @Test
     public void testDefaultsIcuAnalysis() {
         Settings settings = settingsBuilder()
                 .put("path.home", createTempDir()).build();
diff --git a/plugins/analysis-icu/src/test/java/org/elasticsearch/index/analysis/SimpleIcuCollationTokenFilterTests.java b/plugins/analysis-icu/src/test/java/org/elasticsearch/index/analysis/SimpleIcuCollationTokenFilterTests.java
index 9e59b8e..6be0b2f 100644
--- a/plugins/analysis-icu/src/test/java/org/elasticsearch/index/analysis/SimpleIcuCollationTokenFilterTests.java
+++ b/plugins/analysis-icu/src/test/java/org/elasticsearch/index/analysis/SimpleIcuCollationTokenFilterTests.java
@@ -22,13 +22,13 @@ package org.elasticsearch.index.analysis;
 import com.ibm.icu.text.Collator;
 import com.ibm.icu.text.RuleBasedCollator;
 import com.ibm.icu.util.ULocale;
-
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.KeywordTokenizer;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.StringReader;
@@ -38,12 +38,14 @@ import static org.hamcrest.Matchers.equalTo;
 
 // Tests borrowed from Solr's Icu collation key filter factory test.
 public class SimpleIcuCollationTokenFilterTests extends ESTestCase {
+
     /*
     * Turkish has some funny casing.
     * This test shows how you can solve this kind of thing easily with collation.
     * Instead of using LowerCaseFilter, use a turkish collator with primary strength.
     * Then things will sort and match correctly.
     */
+    @Test
     public void testBasicUsage() throws Exception {
         Settings settings = Settings.settingsBuilder()
                 .put("path.home", createTempDir())
@@ -60,6 +62,7 @@ public class SimpleIcuCollationTokenFilterTests extends ESTestCase {
     /*
     * Test usage of the decomposition option for unicode normalization.
     */
+    @Test
     public void testNormalization() throws IOException {
         Settings settings = Settings.settingsBuilder()
                 .put("path.home", createTempDir())
@@ -77,6 +80,7 @@ public class SimpleIcuCollationTokenFilterTests extends ESTestCase {
     /*
     * Test secondary strength, for english case is not significant.
     */
+    @Test
     public void testSecondaryStrength() throws IOException {
         Settings settings = Settings.settingsBuilder()
                 .put("path.home", createTempDir())
@@ -95,6 +99,7 @@ public class SimpleIcuCollationTokenFilterTests extends ESTestCase {
     * Setting alternate=shifted to shift whitespace, punctuation and symbols
     * to quaternary level
     */
+    @Test
     public void testIgnorePunctuation() throws IOException {
         Settings settings = Settings.settingsBuilder()
                 .put("path.home", createTempDir())
@@ -113,6 +118,7 @@ public class SimpleIcuCollationTokenFilterTests extends ESTestCase {
     * Setting alternate=shifted and variableTop to shift whitespace, but not
     * punctuation or symbols, to quaternary level
     */
+    @Test
     public void testIgnoreWhitespace() throws IOException {
         Settings settings = Settings.settingsBuilder()
                 .put("path.home", createTempDir())
@@ -134,6 +140,7 @@ public class SimpleIcuCollationTokenFilterTests extends ESTestCase {
     * Setting numeric to encode digits with numeric value, so that
     * foobar-9 sorts before foobar-10
     */
+    @Test
     public void testNumerics() throws IOException {
         Settings settings = Settings.settingsBuilder()
                 .put("path.home", createTempDir())
@@ -151,6 +158,7 @@ public class SimpleIcuCollationTokenFilterTests extends ESTestCase {
     * Setting caseLevel=true to create an additional case level between
     * secondary and tertiary
     */
+    @Test
     public void testIgnoreAccentsButNotCase() throws IOException {
         Settings settings = Settings.settingsBuilder()
                 .put("path.home", createTempDir())
@@ -172,6 +180,7 @@ public class SimpleIcuCollationTokenFilterTests extends ESTestCase {
     * Setting caseFirst=upper to cause uppercase strings to sort
     * before lowercase ones.
     */
+    @Test
     public void testUpperCaseFirst() throws IOException {
         Settings settings = Settings.settingsBuilder()
                 .put("path.home", createTempDir())
@@ -193,6 +202,7 @@ public class SimpleIcuCollationTokenFilterTests extends ESTestCase {
     * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.
     *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383
     */
+    @Test
     public void testCustomRules() throws Exception {
         RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale("de_DE"));
         String DIN5007_2_tailorings =
@@ -214,20 +224,20 @@ public class SimpleIcuCollationTokenFilterTests extends ESTestCase {
         TokenFilterFactory filterFactory = analysisService.tokenFilter("myCollator");
         assertCollatesToSame(filterFactory, "Töne", "Toene");
     }
-
+    
     private void assertCollatesToSame(TokenFilterFactory factory, String string1, String string2) throws IOException {
         assertCollation(factory, string1, string2, 0);
     }
-
+    
     private void assertCollation(TokenFilterFactory factory, String string1, String string2, int comparison) throws IOException {
         Tokenizer tokenizer = new KeywordTokenizer();
         tokenizer.setReader(new StringReader(string1));
         TokenStream stream1 = factory.create(tokenizer);
-
+    
         tokenizer = new KeywordTokenizer();
         tokenizer.setReader(new StringReader(string2));
         TokenStream stream2 = factory.create(tokenizer);
-
+      
         assertCollation(stream1, stream2, comparison);
     }
 
@@ -243,10 +253,10 @@ public class SimpleIcuCollationTokenFilterTests extends ESTestCase {
         assertThat(Integer.signum(term1.toString().compareTo(term2.toString())), equalTo(Integer.signum(comparison)));
         assertThat(stream1.incrementToken(), equalTo(false));
         assertThat(stream2.incrementToken(), equalTo(false));
-
+        
         stream1.end();
         stream2.end();
-
+        
         stream1.close();
         stream2.close();
     }
diff --git a/plugins/analysis-icu/src/test/java/org/elasticsearch/index/analysis/SimpleIcuNormalizerCharFilterTests.java b/plugins/analysis-icu/src/test/java/org/elasticsearch/index/analysis/SimpleIcuNormalizerCharFilterTests.java
index bd2f959..748b439 100644
--- a/plugins/analysis-icu/src/test/java/org/elasticsearch/index/analysis/SimpleIcuNormalizerCharFilterTests.java
+++ b/plugins/analysis-icu/src/test/java/org/elasticsearch/index/analysis/SimpleIcuNormalizerCharFilterTests.java
@@ -20,10 +20,10 @@
 package org.elasticsearch.index.analysis;
 
 import com.ibm.icu.text.Normalizer2;
-
 import org.apache.lucene.analysis.CharFilter;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.StringReader;
 
@@ -33,7 +33,10 @@ import static org.elasticsearch.index.analysis.AnalysisTestUtils.createAnalysisS
  * Test
  */
 public class SimpleIcuNormalizerCharFilterTests extends ESTestCase {
+
+    @Test
     public void testDefaultSetting() throws Exception {
+
         Settings settings = Settings.settingsBuilder()
             .put("path.home", createTempDir())
             .put("index.analysis.char_filter.myNormalizerChar.type", "icu_normalizer")
@@ -56,7 +59,10 @@ public class SimpleIcuNormalizerCharFilterTests extends ESTestCase {
         assertEquals(expectedOutput, output.toString());
     }
 
+
+    @Test
     public void testNameAndModeSetting() throws Exception {
+
         Settings settings = Settings.settingsBuilder()
             .put("path.home", createTempDir())
             .put("index.analysis.char_filter.myNormalizerChar.type", "icu_normalizer")
diff --git a/plugins/analysis-kuromoji/src/test/java/org/elasticsearch/index/analysis/KuromojiAnalysisTests.java b/plugins/analysis-kuromoji/src/test/java/org/elasticsearch/index/analysis/KuromojiAnalysisTests.java
index 212ab0d..b39103b 100644
--- a/plugins/analysis-kuromoji/src/test/java/org/elasticsearch/index/analysis/KuromojiAnalysisTests.java
+++ b/plugins/analysis-kuromoji/src/test/java/org/elasticsearch/index/analysis/KuromojiAnalysisTests.java
@@ -38,6 +38,7 @@ import org.elasticsearch.index.settings.IndexSettingsModule;
 import org.elasticsearch.indices.analysis.IndicesAnalysisService;
 import org.elasticsearch.plugin.analysis.kuromoji.AnalysisKuromojiPlugin;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -54,6 +55,8 @@ import static org.hamcrest.Matchers.notNullValue;
 /**
  */
 public class KuromojiAnalysisTests extends ESTestCase {
+
+    @Test
     public void testDefaultsKuromojiAnalysis() throws IOException {
         AnalysisService analysisService = createAnalysisService();
 
@@ -87,6 +90,7 @@ public class KuromojiAnalysisTests extends ESTestCase {
 
     }
 
+    @Test
     public void testBaseFormFilterFactory() throws IOException {
         AnalysisService analysisService = createAnalysisService();
         TokenFilterFactory tokenFilter = analysisService.tokenFilter("kuromoji_pos");
@@ -98,6 +102,7 @@ public class KuromojiAnalysisTests extends ESTestCase {
         assertSimpleTSOutput(tokenFilter.create(tokenizer), expected);
     }
 
+    @Test
     public void testReadingFormFilterFactory() throws IOException {
         AnalysisService analysisService = createAnalysisService();
         TokenFilterFactory tokenFilter = analysisService.tokenFilter("kuromoji_rf");
@@ -118,6 +123,7 @@ public class KuromojiAnalysisTests extends ESTestCase {
         assertSimpleTSOutput(tokenFilter.create(tokenizer), expected_tokens_katakana);
     }
 
+    @Test
     public void testKatakanaStemFilter() throws IOException {
         AnalysisService analysisService = createAnalysisService();
         TokenFilterFactory tokenFilter = analysisService.tokenFilter("kuromoji_stemmer");
@@ -142,7 +148,7 @@ public class KuromojiAnalysisTests extends ESTestCase {
         expected_tokens_katakana = new String[]{"明後日", "パーティー", "に", "行く", "予定", "が", "ある", "図書館", "で", "資料", "を", "コピー", "し", "まし", "た"};
         assertSimpleTSOutput(tokenFilter.create(tokenizer), expected_tokens_katakana);
     }
-
+    @Test
     public void testIterationMarkCharFilter() throws IOException {
         AnalysisService analysisService = createAnalysisService();
         // test only kanji
@@ -176,6 +182,7 @@ public class KuromojiAnalysisTests extends ESTestCase {
         assertCharFilterEquals(charFilterFactory.create(new StringReader(source)), expected);
     }
 
+    @Test
     public void testJapaneseStopFilterFactory() throws IOException {
         AnalysisService analysisService = createAnalysisService();
         TokenFilterFactory tokenFilter = analysisService.tokenFilter("ja_stop");
@@ -249,6 +256,7 @@ public class KuromojiAnalysisTests extends ESTestCase {
         return buffer.toString();
     }
 
+    @Test
     public void testKuromojiUserDict() throws IOException {
         AnalysisService analysisService = createAnalysisService();
         TokenizerFactory tokenizerFactory = analysisService.tokenizer("kuromoji_user_dict");
@@ -261,9 +269,11 @@ public class KuromojiAnalysisTests extends ESTestCase {
     }
 
     // fix #59
+    @Test
     public void testKuromojiEmptyUserDict() throws IOException {
         AnalysisService analysisService = createAnalysisService();
         TokenizerFactory tokenizerFactory = analysisService.tokenizer("kuromoji_empty_user_dict");
         assertThat(tokenizerFactory, instanceOf(KuromojiTokenizerFactory.class));
     }
+
 }
diff --git a/plugins/analysis-phonetic/src/test/java/org/elasticsearch/index/analysis/SimplePhoneticAnalysisTests.java b/plugins/analysis-phonetic/src/test/java/org/elasticsearch/index/analysis/SimplePhoneticAnalysisTests.java
index bf763cf..1467626 100644
--- a/plugins/analysis-phonetic/src/test/java/org/elasticsearch/index/analysis/SimplePhoneticAnalysisTests.java
+++ b/plugins/analysis-phonetic/src/test/java/org/elasticsearch/index/analysis/SimplePhoneticAnalysisTests.java
@@ -33,6 +33,7 @@ import org.elasticsearch.index.settings.IndexSettingsModule;
 import org.elasticsearch.indices.analysis.IndicesAnalysisService;
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.MatcherAssert;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.instanceOf;
@@ -40,6 +41,8 @@ import static org.hamcrest.Matchers.instanceOf;
 /**
  */
 public class SimplePhoneticAnalysisTests extends ESTestCase {
+
+    @Test
     public void testPhoneticTokenFilterFactory() {
         String yaml = "/org/elasticsearch/index/analysis/phonetic-1.yml";
         Settings settings = settingsBuilder().loadFromStream(yaml, getClass().getResourceAsStream(yaml))
diff --git a/plugins/analysis-smartcn/src/test/java/org/elasticsearch/index/analysis/SimpleSmartChineseAnalysisTests.java b/plugins/analysis-smartcn/src/test/java/org/elasticsearch/index/analysis/SimpleSmartChineseAnalysisTests.java
index 7c6f358..0f5d300 100644
--- a/plugins/analysis-smartcn/src/test/java/org/elasticsearch/index/analysis/SimpleSmartChineseAnalysisTests.java
+++ b/plugins/analysis-smartcn/src/test/java/org/elasticsearch/index/analysis/SimpleSmartChineseAnalysisTests.java
@@ -33,14 +33,17 @@ import org.elasticsearch.index.settings.IndexSettingsModule;
 import org.elasticsearch.indices.analysis.IndicesAnalysisService;
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.MatcherAssert;
+import org.junit.Test;
 
-import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
+import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.instanceOf;
 
 /**
  */
 public class SimpleSmartChineseAnalysisTests extends ESTestCase {
+
+    @Test
     public void testDefaultsIcuAnalysis() {
         Index index = new Index("test");
         Settings settings = settingsBuilder()
diff --git a/plugins/analysis-stempel/src/test/java/org/elasticsearch/index/analysis/PolishAnalysisTests.java b/plugins/analysis-stempel/src/test/java/org/elasticsearch/index/analysis/PolishAnalysisTests.java
index e488293..b17f3a1 100644
--- a/plugins/analysis-stempel/src/test/java/org/elasticsearch/index/analysis/PolishAnalysisTests.java
+++ b/plugins/analysis-stempel/src/test/java/org/elasticsearch/index/analysis/PolishAnalysisTests.java
@@ -37,14 +37,17 @@ import org.elasticsearch.index.settings.IndexSettingsModule;
 import org.elasticsearch.indices.analysis.IndicesAnalysisService;
 import org.elasticsearch.test.ESTestCase;
 import org.hamcrest.MatcherAssert;
+import org.junit.Test;
 
-import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
+import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.Matchers.instanceOf;
 
 /**
  */
 public class PolishAnalysisTests extends ESTestCase {
+
+    @Test
     public void testDefaultsPolishAnalysis() {
         Index index = new Index("test");
         Settings settings = settingsBuilder()
diff --git a/plugins/analysis-stempel/src/test/java/org/elasticsearch/index/analysis/SimplePolishTokenFilterTests.java b/plugins/analysis-stempel/src/test/java/org/elasticsearch/index/analysis/SimplePolishTokenFilterTests.java
index e55ffa8..7046541 100644
--- a/plugins/analysis-stempel/src/test/java/org/elasticsearch/index/analysis/SimplePolishTokenFilterTests.java
+++ b/plugins/analysis-stempel/src/test/java/org/elasticsearch/index/analysis/SimplePolishTokenFilterTests.java
@@ -38,6 +38,7 @@ import org.elasticsearch.index.analysis.pl.PolishAnalysisBinderProcessor;
 import org.elasticsearch.index.settings.IndexSettingsModule;
 import org.elasticsearch.indices.analysis.IndicesAnalysisService;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.io.StringReader;
@@ -45,6 +46,8 @@ import java.io.StringReader;
 import static org.hamcrest.Matchers.equalTo;
 
 public class SimplePolishTokenFilterTests extends ESTestCase {
+
+    @Test
     public void testBasicUsage() throws Exception {
         testToken("kwiaty", "kwć");
         testToken("canona", "ć");
diff --git a/plugins/delete-by-query/src/test/java/org/elasticsearch/action/deletebyquery/IndexDeleteByQueryResponseTests.java b/plugins/delete-by-query/src/test/java/org/elasticsearch/action/deletebyquery/IndexDeleteByQueryResponseTests.java
index ea814b4..f11a004 100644
--- a/plugins/delete-by-query/src/test/java/org/elasticsearch/action/deletebyquery/IndexDeleteByQueryResponseTests.java
+++ b/plugins/delete-by-query/src/test/java/org/elasticsearch/action/deletebyquery/IndexDeleteByQueryResponseTests.java
@@ -24,10 +24,13 @@ import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.VersionUtils;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 
 public class IndexDeleteByQueryResponseTests extends ESTestCase {
+
+    @Test
     public void testIncrements() {
         String indexName = randomAsciiOfLength(5);
 
@@ -67,6 +70,7 @@ public class IndexDeleteByQueryResponseTests extends ESTestCase {
         assertThat(response.getFailed(), equalTo(failed + 1 + inc));
     }
 
+    @Test
     public void testNegativeCounters() {
         assumeTrue("assertions must be enable for this test to pass", assertionsEnabled());
         try {
@@ -102,6 +106,7 @@ public class IndexDeleteByQueryResponseTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testNegativeIncrements() {
         assumeTrue("assertions must be enable for this test to pass", assertionsEnabled());
         try {
@@ -141,6 +146,7 @@ public class IndexDeleteByQueryResponseTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSerialization() throws Exception {
         IndexDeleteByQueryResponse response = new IndexDeleteByQueryResponse(randomAsciiOfLength(5), Math.abs(randomLong()), Math.abs(randomLong()), Math.abs(randomLong()), Math.abs(randomLong()));
         Version testVersion = VersionUtils.randomVersionBetween(random(), Version.CURRENT.minimumCompatibilityVersion(), Version.CURRENT);
@@ -159,4 +165,5 @@ public class IndexDeleteByQueryResponseTests extends ESTestCase {
         assertThat(deserializedResponse.getMissing(), equalTo(response.getMissing()));
         assertThat(deserializedResponse.getFailed(), equalTo(response.getFailed()));
     }
+
 }
diff --git a/plugins/delete-by-query/src/test/java/org/elasticsearch/action/deletebyquery/TransportDeleteByQueryActionTests.java b/plugins/delete-by-query/src/test/java/org/elasticsearch/action/deletebyquery/TransportDeleteByQueryActionTests.java
index 2b70834..cc50e6e 100644
--- a/plugins/delete-by-query/src/test/java/org/elasticsearch/action/deletebyquery/TransportDeleteByQueryActionTests.java
+++ b/plugins/delete-by-query/src/test/java/org/elasticsearch/action/deletebyquery/TransportDeleteByQueryActionTests.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.action.deletebyquery;
 
 import org.elasticsearch.action.ActionListener;
+import org.elasticsearch.action.ShardOperationFailedException;
 import org.elasticsearch.action.admin.cluster.node.stats.NodeStats;
 import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;
 import org.elasticsearch.action.bulk.BulkItemResponse;
@@ -36,6 +37,7 @@ import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.search.SearchShardTarget;
 import org.elasticsearch.search.internal.InternalSearchHit;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.junit.Test;
 
 import static org.elasticsearch.index.query.QueryBuilders.boolQuery;
 import static org.elasticsearch.index.query.QueryBuilders.rangeQuery;
@@ -44,6 +46,8 @@ import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 
 public class TransportDeleteByQueryActionTests extends ESSingleNodeTestCase {
+
+    @Test
     public void testExecuteScanFailsOnMissingIndex() {
         DeleteByQueryRequest delete = new DeleteByQueryRequest().indices(new String[]{"none"});
         TestActionListener listener = new TestActionListener();
@@ -55,6 +59,7 @@ public class TransportDeleteByQueryActionTests extends ESSingleNodeTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testExecuteScan() {
         createIndex("test");
         final int numDocs = randomIntBetween(1, 200);
@@ -79,6 +84,7 @@ public class TransportDeleteByQueryActionTests extends ESSingleNodeTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testExecuteScrollFailsOnMissingScrollId() {
         DeleteByQueryRequest delete = new DeleteByQueryRequest();
         TestActionListener listener = new TestActionListener();
@@ -90,6 +96,7 @@ public class TransportDeleteByQueryActionTests extends ESSingleNodeTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testExecuteScrollFailsOnMalformedScrollId() {
         DeleteByQueryRequest delete = new DeleteByQueryRequest();
         TestActionListener listener = new TestActionListener();
@@ -101,6 +108,7 @@ public class TransportDeleteByQueryActionTests extends ESSingleNodeTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testExecuteScrollFailsOnExpiredScrollId() {
         final long numDocs = randomIntBetween(1, 100);
         for (int i = 1; i <= numDocs; i++) {
@@ -129,6 +137,7 @@ public class TransportDeleteByQueryActionTests extends ESSingleNodeTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testExecuteScrollTimedOut() throws InterruptedException {
         client().prepareIndex("test", "type", "1").setSource("num", "1").get();
         client().prepareIndex("test", "type", "2").setSource("num", "1").get();
@@ -154,6 +163,7 @@ public class TransportDeleteByQueryActionTests extends ESSingleNodeTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testExecuteScrollNoDocuments() {
         createIndex("test");
         SearchResponse searchResponse = client().prepareSearch("test").setScroll(TimeValue.timeValueSeconds(10)).get();
@@ -173,6 +183,7 @@ public class TransportDeleteByQueryActionTests extends ESSingleNodeTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testExecuteScroll() {
         final int numDocs = randomIntBetween(1, 100);
         for (int i = 1; i <= numDocs; i++) {
@@ -209,6 +220,7 @@ public class TransportDeleteByQueryActionTests extends ESSingleNodeTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testOnBulkResponse() {
         final int nbItems = randomIntBetween(0, 20);
         long deleted = 0;
@@ -254,6 +266,7 @@ public class TransportDeleteByQueryActionTests extends ESSingleNodeTestCase {
         }
     }
 
+    @Test
     public void testOnBulkResponseMultipleIndices() {
         final int nbIndices = randomIntBetween(2, 5);
 
@@ -324,6 +337,7 @@ public class TransportDeleteByQueryActionTests extends ESSingleNodeTestCase {
         }
     }
 
+    @Test
     public void testOnBulkFailureNoDocuments() {
         DeleteByQueryRequest delete = new DeleteByQueryRequest();
         TestActionListener listener = new TestActionListener();
@@ -334,6 +348,7 @@ public class TransportDeleteByQueryActionTests extends ESSingleNodeTestCase {
         assertFailure(listener, "This is a bulk failure");
     }
 
+    @Test
     public void testOnBulkFailure() {
         final int nbDocs = randomIntBetween(0, 20);
         SearchHit[] docs = new SearchHit[nbDocs];
@@ -356,6 +371,7 @@ public class TransportDeleteByQueryActionTests extends ESSingleNodeTestCase {
         assertThat(response.getTotalDeleted(), equalTo(0L));
     }
 
+    @Test
     public void testFinishHim() {
         TestActionListener listener = new TestActionListener();
         newAsyncAction(new DeleteByQueryRequest(), listener).finishHim(null, false, null);
@@ -417,7 +433,19 @@ public class TransportDeleteByQueryActionTests extends ESSingleNodeTestCase {
         assertThat(t.toString(), containsString(expectedFailure));
     }
 
+    private void assertShardFailuresContains(ShardOperationFailedException[] shardFailures, String expectedFailure) {
+        assertNotNull(shardFailures);
+        for (ShardOperationFailedException failure : shardFailures) {
+            Throwable t = failure.getCause();
+            if (t.toString().contains(expectedFailure)) {
+                return;
+            }
+        }
+        fail("failed to find shard failure [" + expectedFailure + "]");
+    }
+
     private class TestActionListener implements ActionListener<DeleteByQueryResponse> {
+
         private final CountDown count = new CountDown(1);
 
         private DeleteByQueryResponse response;
diff --git a/plugins/delete-by-query/src/test/java/org/elasticsearch/plugin/deletebyquery/DeleteByQueryTests.java b/plugins/delete-by-query/src/test/java/org/elasticsearch/plugin/deletebyquery/DeleteByQueryTests.java
index a4aa334..f523f71 100644
--- a/plugins/delete-by-query/src/test/java/org/elasticsearch/plugin/deletebyquery/DeleteByQueryTests.java
+++ b/plugins/delete-by-query/src/test/java/org/elasticsearch/plugin/deletebyquery/DeleteByQueryTests.java
@@ -38,6 +38,7 @@ import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.concurrent.CountDownLatch;
@@ -46,29 +47,25 @@ import java.util.concurrent.atomic.AtomicReference;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.test.ESIntegTestCase.Scope.SUITE;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.hamcrest.Matchers.containsString;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.nullValue;
 
 @ClusterScope(scope = SUITE, transportClientRatio = 0)
 public class DeleteByQueryTests extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return pluginList(DeleteByQueryPlugin.class);
     }
 
+    @Test(expected = ActionRequestValidationException.class)
     public void testDeleteByQueryWithNoSource() {
-        try {
-            newDeleteByQuery().get();
-            fail("should have thrown a validation exception because of the missing source");
-        } catch (ActionRequestValidationException e) {
-            assertThat(e.getMessage(), containsString("source is missing"));
-        }
+        newDeleteByQuery().get();
+        fail("should have thrown a validation exception because of the missing source");
     }
 
+    @Test
     public void testDeleteByQueryWithNoIndices() throws Exception {
         DeleteByQueryRequestBuilder delete = newDeleteByQuery().setQuery(QueryBuilders.matchAllQuery());
         delete.setIndicesOptions(IndicesOptions.fromOptions(false, true, true, false));
@@ -76,6 +73,7 @@ public class DeleteByQueryTests extends ESIntegTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testDeleteByQueryWithOneIndex() throws Exception {
         final long docs = randomIntBetween(1, 50);
         for (int i = 0; i < docs; i++) {
@@ -91,6 +89,7 @@ public class DeleteByQueryTests extends ESIntegTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testDeleteByQueryWithMultipleIndices() throws Exception {
         final int indices = randomIntBetween(2, 5);
         final int docs = randomIntBetween(2, 10) * 2;
@@ -144,6 +143,7 @@ public class DeleteByQueryTests extends ESIntegTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testDeleteByQueryWithMissingIndex() throws Exception {
         client().prepareIndex("test", "test")
                 .setSource(jsonBuilder().startObject().field("field1", 1).endObject())
@@ -166,6 +166,7 @@ public class DeleteByQueryTests extends ESIntegTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testDeleteByQueryWithTypes() throws Exception {
         final long docs = randomIntBetween(1, 50);
         for (int i = 0; i < docs; i++) {
@@ -187,6 +188,7 @@ public class DeleteByQueryTests extends ESIntegTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testDeleteByQueryWithRouting() throws Exception {
         assertAcked(prepareCreate("test").setSettings("number_of_shards", 2));
         ensureGreen("test");
@@ -215,6 +217,7 @@ public class DeleteByQueryTests extends ESIntegTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testDeleteByFieldQuery() throws Exception {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias")));
 
@@ -237,6 +240,7 @@ public class DeleteByQueryTests extends ESIntegTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testDeleteByQueryWithDateMath() throws Exception {
         index("test", "type", "1", "d", "2013-01-01");
         ensureGreen();
@@ -250,6 +254,7 @@ public class DeleteByQueryTests extends ESIntegTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testDeleteByTermQuery() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -276,6 +281,8 @@ public class DeleteByQueryTests extends ESIntegTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
+
     public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -335,6 +342,7 @@ public class DeleteByQueryTests extends ESIntegTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception {
         assertAcked(prepareCreate("test").setSettings(Settings.settingsBuilder().put("index.refresh_interval", -1)));
         ensureGreen();
@@ -394,6 +402,7 @@ public class DeleteByQueryTests extends ESIntegTestCase {
         assertSearchContextsClosed();
     }
 
+    @Test
     public void testDeleteByQueryOnReadOnlyIndex() throws Exception {
         createIndex("test");
         ensureGreen();
diff --git a/plugins/discovery-azure/src/test/java/org/elasticsearch/discovery/azure/AzureMinimumMasterNodesTests.java b/plugins/discovery-azure/src/test/java/org/elasticsearch/discovery/azure/AzureMinimumMasterNodesTests.java
index 19d6d03..75ae011 100644
--- a/plugins/discovery-azure/src/test/java/org/elasticsearch/discovery/azure/AzureMinimumMasterNodesTests.java
+++ b/plugins/discovery-azure/src/test/java/org/elasticsearch/discovery/azure/AzureMinimumMasterNodesTests.java
@@ -19,13 +19,14 @@
 
 package org.elasticsearch.discovery.azure;
 
-import org.apache.lucene.util.LuceneTestCase.AwaitsFix;
 import org.elasticsearch.cloud.azure.AbstractAzureComputeServiceTestCase;
 import org.elasticsearch.cloud.azure.AzureComputeServiceTwoNodesMock;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.discovery.MasterNotDiscoveredException;
 import org.elasticsearch.discovery.zen.ZenDiscovery;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
+import org.apache.lucene.util.LuceneTestCase.AwaitsFix;
 
 import java.io.IOException;
 
@@ -59,7 +60,8 @@ public class AzureMinimumMasterNodesTests extends AbstractAzureComputeServiceTes
         return builder.build();
     }
 
-    public void testSimpleOnlyMasterNodeElection() throws IOException {
+    @Test
+    public void simpleOnlyMasterNodeElection() throws IOException {
         logger.info("--> start data node / non master node");
         internalCluster().startNode();
         try {
diff --git a/plugins/discovery-azure/src/test/java/org/elasticsearch/discovery/azure/AzureSimpleTests.java b/plugins/discovery-azure/src/test/java/org/elasticsearch/discovery/azure/AzureSimpleTests.java
index cc4021f..74daf1a 100644
--- a/plugins/discovery-azure/src/test/java/org/elasticsearch/discovery/azure/AzureSimpleTests.java
+++ b/plugins/discovery-azure/src/test/java/org/elasticsearch/discovery/azure/AzureSimpleTests.java
@@ -20,11 +20,12 @@
 package org.elasticsearch.discovery.azure;
 
 import org.elasticsearch.cloud.azure.AbstractAzureComputeServiceTestCase;
-import org.elasticsearch.cloud.azure.AzureComputeServiceSimpleMock;
 import org.elasticsearch.cloud.azure.management.AzureComputeService.Discovery;
 import org.elasticsearch.cloud.azure.management.AzureComputeService.Management;
+import org.elasticsearch.cloud.azure.AzureComputeServiceSimpleMock;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.notNullValue;
 
@@ -33,11 +34,13 @@ import static org.hamcrest.Matchers.notNullValue;
         transportClientRatio = 0.0,
         numClientNodes = 0)
 public class AzureSimpleTests extends AbstractAzureComputeServiceTestCase {
+
     public AzureSimpleTests() {
         super(AzureComputeServiceSimpleMock.TestPlugin.class);
     }
 
-    public void testOneNodeDhouldRunUsingPrivateIp() {
+    @Test
+    public void one_node_should_run_using_private_ip() {
         Settings.Builder settings = Settings.settingsBuilder()
                 .put(Management.SERVICE_NAME, "dummy")
                 .put(Discovery.HOST_TYPE, "private_ip");
@@ -50,7 +53,8 @@ public class AzureSimpleTests extends AbstractAzureComputeServiceTestCase {
         checkNumberOfNodes(1);
     }
 
-    public void testOneNodeShouldRunUsingPublicIp() {
+    @Test
+    public void one_node_should_run_using_public_ip() {
         Settings.Builder settings = Settings.settingsBuilder()
                 .put(Management.SERVICE_NAME, "dummy")
                 .put(Discovery.HOST_TYPE, "public_ip");
@@ -63,7 +67,8 @@ public class AzureSimpleTests extends AbstractAzureComputeServiceTestCase {
         checkNumberOfNodes(1);
     }
 
-    public void testOneNodeShouldRunUsingWrongSettings() {
+    @Test
+    public void one_node_should_run_using_wrong_settings() {
         Settings.Builder settings = Settings.settingsBuilder()
                 .put(Management.SERVICE_NAME, "dummy")
                 .put(Discovery.HOST_TYPE, "do_not_exist");
diff --git a/plugins/discovery-azure/src/test/java/org/elasticsearch/discovery/azure/AzureTwoStartedNodesTests.java b/plugins/discovery-azure/src/test/java/org/elasticsearch/discovery/azure/AzureTwoStartedNodesTests.java
index 2d134d0..dbccc4a 100644
--- a/plugins/discovery-azure/src/test/java/org/elasticsearch/discovery/azure/AzureTwoStartedNodesTests.java
+++ b/plugins/discovery-azure/src/test/java/org/elasticsearch/discovery/azure/AzureTwoStartedNodesTests.java
@@ -20,11 +20,12 @@
 package org.elasticsearch.discovery.azure;
 
 import org.elasticsearch.cloud.azure.AbstractAzureComputeServiceTestCase;
-import org.elasticsearch.cloud.azure.AzureComputeServiceTwoNodesMock;
 import org.elasticsearch.cloud.azure.management.AzureComputeService.Discovery;
 import org.elasticsearch.cloud.azure.management.AzureComputeService.Management;
+import org.elasticsearch.cloud.azure.AzureComputeServiceTwoNodesMock;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.notNullValue;
 
@@ -38,8 +39,9 @@ public class AzureTwoStartedNodesTests extends AbstractAzureComputeServiceTestCa
         super(AzureComputeServiceTwoNodesMock.TestPlugin.class);
     }
 
+    @Test
     @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/11533")
-    public void testTwoNodesShouldRunUsingPrivateIp() {
+    public void two_nodes_should_run_using_private_ip() {
         Settings.Builder settings = Settings.settingsBuilder()
                 .put(Management.SERVICE_NAME, "dummy")
                 .put(Discovery.HOST_TYPE, "private_ip");
@@ -56,8 +58,9 @@ public class AzureTwoStartedNodesTests extends AbstractAzureComputeServiceTestCa
         checkNumberOfNodes(2);
     }
 
+    @Test
     @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/11533")
-    public void testTwoNodesShouldRunUsingPublicIp() {
+    public void two_nodes_should_run_using_public_ip() {
         Settings.Builder settings = Settings.settingsBuilder()
                 .put(Management.SERVICE_NAME, "dummy")
                 .put(Discovery.HOST_TYPE, "public_ip");
diff --git a/plugins/discovery-ec2/src/test/java/org/elasticsearch/cloud/aws/AWSSignersTests.java b/plugins/discovery-ec2/src/test/java/org/elasticsearch/cloud/aws/AWSSignersTests.java
index d69d939..c1d5daf 100644
--- a/plugins/discovery-ec2/src/test/java/org/elasticsearch/cloud/aws/AWSSignersTests.java
+++ b/plugins/discovery-ec2/src/test/java/org/elasticsearch/cloud/aws/AWSSignersTests.java
@@ -20,12 +20,14 @@
 package org.elasticsearch.cloud.aws;
 
 import com.amazonaws.ClientConfiguration;
-
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.is;
 
 public class AWSSignersTests extends ESTestCase {
+
+    @Test
     public void testSigners() {
         assertThat(signerTester(null), is(false));
         assertThat(signerTester("QueryStringSignerType"), is(true));
diff --git a/plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/Ec2DiscoveryTests.java b/plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/Ec2DiscoveryTests.java
index ca9493b..1d7b525 100644
--- a/plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/Ec2DiscoveryTests.java
+++ b/plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/Ec2DiscoveryTests.java
@@ -20,7 +20,6 @@
 package org.elasticsearch.discovery.ec2;
 
 import com.amazonaws.services.ec2.model.Tag;
-
 import org.elasticsearch.Version;
 import org.elasticsearch.cloud.aws.AwsEc2Service;
 import org.elasticsearch.cloud.aws.AwsEc2Service.DISCOVERY_EC2;
@@ -36,11 +35,11 @@ import org.elasticsearch.transport.local.LocalTransport;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.hasSize;
 import static org.hamcrest.Matchers.is;
 
@@ -87,7 +86,8 @@ public class Ec2DiscoveryTests extends ESTestCase {
         return discoveryNodes;
     }
 
-    public void testDefaultSettings() throws InterruptedException {
+    @Test
+    public void defaultSettings() throws InterruptedException {
         int nodes = randomInt(10);
         Settings nodeSettings = Settings.builder()
                 .build();
@@ -95,7 +95,8 @@ public class Ec2DiscoveryTests extends ESTestCase {
         assertThat(discoveryNodes, hasSize(nodes));
     }
 
-    public void testPrivateIp() throws InterruptedException {
+    @Test
+    public void privateIp() throws InterruptedException {
         int nodes = randomInt(10);
         Settings nodeSettings = Settings.builder()
                 .put(DISCOVERY_EC2.HOST_TYPE, "private_ip")
@@ -111,7 +112,8 @@ public class Ec2DiscoveryTests extends ESTestCase {
         }
     }
 
-    public void testPublicIp() throws InterruptedException {
+    @Test
+    public void publicIp() throws InterruptedException {
         int nodes = randomInt(10);
         Settings nodeSettings = Settings.builder()
                 .put(DISCOVERY_EC2.HOST_TYPE, "public_ip")
@@ -127,7 +129,8 @@ public class Ec2DiscoveryTests extends ESTestCase {
         }
     }
 
-    public void testPrivateDns() throws InterruptedException {
+    @Test
+    public void privateDns() throws InterruptedException {
         int nodes = randomInt(10);
         Settings nodeSettings = Settings.builder()
                 .put(DISCOVERY_EC2.HOST_TYPE, "private_dns")
@@ -145,7 +148,8 @@ public class Ec2DiscoveryTests extends ESTestCase {
         }
     }
 
-    public void testPublicDns() throws InterruptedException {
+    @Test
+    public void publicDns() throws InterruptedException {
         int nodes = randomInt(10);
         Settings nodeSettings = Settings.builder()
                 .put(DISCOVERY_EC2.HOST_TYPE, "public_dns")
@@ -163,19 +167,16 @@ public class Ec2DiscoveryTests extends ESTestCase {
         }
     }
 
-    public void testInvalidHostType() throws InterruptedException {
+    @Test(expected = IllegalArgumentException.class)
+    public void invalidHostType() throws InterruptedException {
         Settings nodeSettings = Settings.builder()
                 .put(DISCOVERY_EC2.HOST_TYPE, "does_not_exist")
                 .build();
-        try {
-            buildDynamicNodes(nodeSettings, 1);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), containsString("No enum constant"));
-        }
+        buildDynamicNodes(nodeSettings, 1);
     }
 
-    public void testFilterByTags() throws InterruptedException {
+    @Test
+    public void filterByTags() throws InterruptedException {
         int nodes = randomIntBetween(5, 10);
         Settings nodeSettings = Settings.builder()
                 .put(DISCOVERY_EC2.TAG_PREFIX + "stage", "prod")
@@ -200,7 +201,8 @@ public class Ec2DiscoveryTests extends ESTestCase {
         assertThat(discoveryNodes, hasSize(prodInstances));
     }
 
-    public void testFilterByMultipleTags() throws InterruptedException {
+    @Test
+    public void filterByMultipleTags() throws InterruptedException {
         int nodes = randomIntBetween(5, 10);
         Settings nodeSettings = Settings.builder()
                 .putArray(DISCOVERY_EC2.TAG_PREFIX + "stage", "prod", "preprod")
diff --git a/plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/Ec2DiscoveryUpdateSettingsTests.java b/plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/Ec2DiscoveryUpdateSettingsTests.java
index 68596ce..de3efcf 100644
--- a/plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/Ec2DiscoveryUpdateSettingsTests.java
+++ b/plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/Ec2DiscoveryUpdateSettingsTests.java
@@ -26,6 +26,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.plugin.discovery.ec2.Ec2DiscoveryPlugin;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.CoreMatchers.is;
@@ -37,6 +38,8 @@ import static org.hamcrest.CoreMatchers.is;
  */
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0, numClientNodes = 0, transportClientRatio = 0.0)
 public class Ec2DiscoveryUpdateSettingsTests extends AbstractAwsTestCase {
+
+    @Test
     public void testMinimumMasterNodesStart() {
         Settings nodeSettings = settingsBuilder()
                 .put("plugin.types", Ec2DiscoveryPlugin.class.getName())
@@ -54,4 +57,5 @@ public class Ec2DiscoveryUpdateSettingsTests extends AbstractAwsTestCase {
         Integer min = response.getPersistentSettings().getAsInt("discovery.zen.minimum_master_nodes", null);
         assertThat(min, is(1));
     }
+
 }
diff --git a/plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/Ec2NetworkTests.java b/plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/Ec2NetworkTests.java
index 4c94395..8aa9ca5 100644
--- a/plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/Ec2NetworkTests.java
+++ b/plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/Ec2NetworkTests.java
@@ -23,6 +23,7 @@ import org.elasticsearch.cloud.aws.network.Ec2NameResolver;
 import org.elasticsearch.common.network.NetworkService;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.net.InetAddress;
@@ -34,10 +35,12 @@ import static org.hamcrest.Matchers.containsString;
  * Test for EC2 network.host settings.
  */
 public class Ec2NetworkTests extends ESTestCase {
+
     /**
      * Test for network.host: _ec2_
      */
-    public void testNetworkHostEc2() throws IOException {
+    @Test
+    public void networkHostEc2() throws IOException {
         Settings nodeSettings = Settings.builder()
                 .put("network.host", "_ec2_")
                 .build();
@@ -55,7 +58,8 @@ public class Ec2NetworkTests extends ESTestCase {
     /**
      * Test for network.host: _ec2:publicIp_
      */
-    public void testNetworkHostEc2PublicIp() throws IOException {
+    @Test
+    public void networkHostEc2PublicIp() throws IOException {
         Settings nodeSettings = Settings.builder()
                 .put("network.host", "_ec2:publicIp_")
                 .build();
@@ -73,7 +77,8 @@ public class Ec2NetworkTests extends ESTestCase {
     /**
      * Test for network.host: _ec2:privateIp_
      */
-    public void testNetworkHostEc2PrivateIp() throws IOException {
+    @Test
+    public void networkHostEc2PrivateIp() throws IOException {
         Settings nodeSettings = Settings.builder()
                 .put("network.host", "_ec2:privateIp_")
                 .build();
@@ -91,7 +96,8 @@ public class Ec2NetworkTests extends ESTestCase {
     /**
      * Test for network.host: _ec2:privateIpv4_
      */
-    public void testNetworkHostEc2PrivateIpv4() throws IOException {
+    @Test
+    public void networkHostEc2PrivateIpv4() throws IOException {
         Settings nodeSettings = Settings.builder()
                 .put("network.host", "_ec2:privateIpv4_")
                 .build();
@@ -109,7 +115,8 @@ public class Ec2NetworkTests extends ESTestCase {
     /**
      * Test for network.host: _ec2:privateDns_
      */
-    public void testNetworkHostEc2PrivateDns() throws IOException {
+    @Test
+    public void networkHostEc2PrivateDns() throws IOException {
         Settings nodeSettings = Settings.builder()
                 .put("network.host", "_ec2:privateDns_")
                 .build();
@@ -127,7 +134,8 @@ public class Ec2NetworkTests extends ESTestCase {
     /**
      * Test for network.host: _ec2:publicIpv4_
      */
-    public void testNetworkHostEc2PublicIpv4() throws IOException {
+    @Test
+    public void networkHostEc2PublicIpv4() throws IOException {
         Settings nodeSettings = Settings.builder()
                 .put("network.host", "_ec2:publicIpv4_")
                 .build();
@@ -145,7 +153,8 @@ public class Ec2NetworkTests extends ESTestCase {
     /**
      * Test for network.host: _ec2:publicDns_
      */
-    public void testNetworkHostEc2PublicDns() throws IOException {
+    @Test
+    public void networkHostEc2PublicDns() throws IOException {
         Settings nodeSettings = Settings.builder()
                 .put("network.host", "_ec2:publicDns_")
                 .build();
@@ -164,7 +173,8 @@ public class Ec2NetworkTests extends ESTestCase {
      * Test that we don't have any regression with network host core settings such as
      * network.host: _local_
      */
-    public void testNetworkHostCoreLocal() throws IOException {
+    @Test
+    public void networkHostCoreLocal() throws IOException {
         Settings nodeSettings = Settings.builder()
                 .put("network.host", "_local_")
                 .build();
diff --git a/plugins/discovery-gce/pom.xml b/plugins/discovery-gce/pom.xml
index 2baf3df..b7c1c0a 100644
--- a/plugins/discovery-gce/pom.xml
+++ b/plugins/discovery-gce/pom.xml
@@ -28,6 +28,7 @@ governing permissions and limitations under the License. -->
     <properties>
         <elasticsearch.plugin.classname>org.elasticsearch.plugin.discovery.gce.GceDiscoveryPlugin</elasticsearch.plugin.classname>
         <google.gce.version>v1-rev71-1.20.0</google.gce.version>
+        <!-- currently has no unit tests -->
         <tests.rest.suite>discovery_gce</tests.rest.suite>
         <tests.rest.load_packaged>false</tests.rest.load_packaged>
         <xlint.options>-Xlint:-rawtypes,-unchecked</xlint.options>
diff --git a/plugins/discovery-gce/src/main/java/org/elasticsearch/plugin/discovery/gce/GceDiscoveryPlugin.java b/plugins/discovery-gce/src/main/java/org/elasticsearch/plugin/discovery/gce/GceDiscoveryPlugin.java
index 5f01a98..a17c396 100644
--- a/plugins/discovery-gce/src/main/java/org/elasticsearch/plugin/discovery/gce/GceDiscoveryPlugin.java
+++ b/plugins/discovery-gce/src/main/java/org/elasticsearch/plugin/discovery/gce/GceDiscoveryPlugin.java
@@ -19,10 +19,6 @@
 
 package org.elasticsearch.plugin.discovery.gce;
 
-import com.google.api.client.http.HttpHeaders;
-import com.google.api.client.util.ClassInfo;
-
-import org.elasticsearch.SpecialPermission;
 import org.elasticsearch.cloud.gce.GceComputeService;
 import org.elasticsearch.cloud.gce.GceModule;
 import org.elasticsearch.common.Strings;
@@ -36,34 +32,11 @@ import org.elasticsearch.discovery.gce.GceDiscovery;
 import org.elasticsearch.discovery.gce.GceUnicastHostsProvider;
 import org.elasticsearch.plugins.Plugin;
 
-import java.security.AccessController;
-import java.security.PrivilegedAction;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 
 public class GceDiscoveryPlugin extends Plugin {
-    static {
-        /*
-         * GCE's http client changes access levels because its silly and we
-         * can't allow that on any old stack stack so we pull it here, up front,
-         * so we can cleanly check the permissions for it. Without this changing
-         * the permission can fail if any part of core is on the stack because
-         * our plugin permissions don't allow core to "reach through" plugins to
-         * change the permission. Because that'd be silly.
-         */
-        SecurityManager sm = System.getSecurityManager();
-        if (sm != null) {
-            sm.checkPermission(new SpecialPermission());
-        }
-        AccessController.doPrivileged(new PrivilegedAction<Void>() {
-            @Override
-            public Void run() {
-                ClassInfo.of(HttpHeaders.class, true);
-                return null;
-            }
-        });
-    }
 
     private final Settings settings;
     protected final ESLogger logger = Loggers.getLogger(GceDiscoveryPlugin.class);
diff --git a/plugins/discovery-gce/src/test/java/org/elasticsearch/discovery/gce/GceDiscoveryTests.java b/plugins/discovery-gce/src/test/java/org/elasticsearch/discovery/gce/GceDiscoveryTests.java
index eafd399..450ff72 100644
--- a/plugins/discovery-gce/src/test/java/org/elasticsearch/discovery/gce/GceDiscoveryTests.java
+++ b/plugins/discovery-gce/src/test/java/org/elasticsearch/discovery/gce/GceDiscoveryTests.java
@@ -29,10 +29,7 @@ import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.transport.MockTransportService;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.elasticsearch.transport.local.LocalTransport;
-import org.junit.After;
-import org.junit.AfterClass;
-import org.junit.Before;
-import org.junit.BeforeClass;
+import org.junit.*;
 
 import java.util.List;
 import java.util.Locale;
@@ -48,7 +45,7 @@ import static org.hamcrest.Matchers.is;
  *
  * compute/v1/projects/[project-id]/zones/[zone]
  *
- * By default, project-id is the test method name, lowercase and missing the "test" prefix.
+ * By default, project-id is the test method name, lowercase.
  *
  * For example, if you create a test `myNewAwesomeTest` with following settings:
  *
@@ -86,10 +83,6 @@ public class GceDiscoveryTests extends ESTestCase {
     @Before
     public void setProjectName() {
         projectName = getTestName().toLowerCase(Locale.ROOT);
-        // Slice off the "test" part of the method names so the project names
-        if (projectName.startsWith("test")) {
-            projectName = projectName.substring("test".length());
-        }
     }
 
     @Before
@@ -120,7 +113,8 @@ public class GceDiscoveryTests extends ESTestCase {
         return discoveryNodes;
     }
 
-    public void testNodesWithDifferentTagsAndNoTagSet() {
+    @Test
+    public void nodesWithDifferentTagsAndNoTagSet() {
         Settings nodeSettings = Settings.builder()
                 .put(GceComputeService.Fields.PROJECT, projectName)
                 .put(GceComputeService.Fields.ZONE, "europe-west1-b")
@@ -130,7 +124,8 @@ public class GceDiscoveryTests extends ESTestCase {
         assertThat(discoveryNodes, hasSize(2));
     }
 
-    public void testNodesWithDifferentTagsAndOneTagSet() {
+    @Test
+    public void nodesWithDifferentTagsAndOneTagSet() {
         Settings nodeSettings = Settings.builder()
                 .put(GceComputeService.Fields.PROJECT, projectName)
                 .put(GceComputeService.Fields.ZONE, "europe-west1-b")
@@ -142,7 +137,8 @@ public class GceDiscoveryTests extends ESTestCase {
         assertThat(discoveryNodes.get(0).getId(), is("#cloud-test2-0"));
     }
 
-    public void testNodesWithDifferentTagsAndTwoTagSet() {
+    @Test
+    public void nodesWithDifferentTagsAndTwoTagSet() {
         Settings nodeSettings = Settings.builder()
                 .put(GceComputeService.Fields.PROJECT, projectName)
                 .put(GceComputeService.Fields.ZONE, "europe-west1-b")
@@ -154,7 +150,8 @@ public class GceDiscoveryTests extends ESTestCase {
         assertThat(discoveryNodes.get(0).getId(), is("#cloud-test2-0"));
     }
 
-    public void testNodesWithSameTagsAndNoTagSet() {
+    @Test
+    public void nodesWithSameTagsAndNoTagSet() {
         Settings nodeSettings = Settings.builder()
                 .put(GceComputeService.Fields.PROJECT, projectName)
                 .put(GceComputeService.Fields.ZONE, "europe-west1-b")
@@ -164,7 +161,8 @@ public class GceDiscoveryTests extends ESTestCase {
         assertThat(discoveryNodes, hasSize(2));
     }
 
-    public void testNodesWithSameTagsAndOneTagSet() {
+    @Test
+    public void nodesWithSameTagsAndOneTagSet() {
         Settings nodeSettings = Settings.builder()
                 .put(GceComputeService.Fields.PROJECT, projectName)
                 .put(GceComputeService.Fields.ZONE, "europe-west1-b")
@@ -175,7 +173,8 @@ public class GceDiscoveryTests extends ESTestCase {
         assertThat(discoveryNodes, hasSize(2));
     }
 
-    public void testNodesWithSameTagsAndTwoTagsSet() {
+    @Test
+    public void nodesWithSameTagsAndTwoTagsSet() {
         Settings nodeSettings = Settings.builder()
                 .put(GceComputeService.Fields.PROJECT, projectName)
                 .put(GceComputeService.Fields.ZONE, "europe-west1-b")
@@ -186,7 +185,8 @@ public class GceDiscoveryTests extends ESTestCase {
         assertThat(discoveryNodes, hasSize(2));
     }
 
-    public void testMultipleZonesAndTwoNodesInSameZone() {
+    @Test
+    public void multipleZonesAndTwoNodesInSameZone() {
         Settings nodeSettings = Settings.builder()
                 .put(GceComputeService.Fields.PROJECT, projectName)
                 .putArray(GceComputeService.Fields.ZONE, "us-central1-a", "europe-west1-b")
@@ -196,7 +196,8 @@ public class GceDiscoveryTests extends ESTestCase {
         assertThat(discoveryNodes, hasSize(2));
     }
 
-    public void testMultipleZonesAndTwoNodesInDifferentZones() {
+    @Test
+    public void multipleZonesAndTwoNodesInDifferentZones() {
         Settings nodeSettings = Settings.builder()
                 .put(GceComputeService.Fields.PROJECT, projectName)
                 .putArray(GceComputeService.Fields.ZONE, "us-central1-a", "europe-west1-b")
@@ -209,7 +210,8 @@ public class GceDiscoveryTests extends ESTestCase {
     /**
      * For issue https://github.com/elastic/elasticsearch-cloud-gce/issues/43
      */
-    public void testZeroNode43() {
+    @Test
+    public void zeroNode43() {
         Settings nodeSettings = Settings.builder()
                 .put(GceComputeService.Fields.PROJECT, projectName)
                 .putArray(GceComputeService.Fields.ZONE, "us-central1-a", "us-central1-b")
diff --git a/plugins/discovery-gce/src/test/java/org/elasticsearch/discovery/gce/GceNetworkTests.java b/plugins/discovery-gce/src/test/java/org/elasticsearch/discovery/gce/GceNetworkTests.java
index dfa41f4..7550cdc 100644
--- a/plugins/discovery-gce/src/test/java/org/elasticsearch/discovery/gce/GceNetworkTests.java
+++ b/plugins/discovery-gce/src/test/java/org/elasticsearch/discovery/gce/GceNetworkTests.java
@@ -23,6 +23,7 @@ import org.elasticsearch.cloud.gce.network.GceNameResolver;
 import org.elasticsearch.common.network.NetworkService;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.net.InetAddress;
@@ -35,24 +36,28 @@ import static org.hamcrest.Matchers.containsString;
  * Related to https://github.com/elastic/elasticsearch/issues/13605
  */
 public class GceNetworkTests extends ESTestCase {
+
     /**
      * Test for network.host: _gce_
      */
-    public void testNetworkHostGceDefault() throws IOException {
+    @Test
+    public void networkHostGceDefault() throws IOException {
         resolveGce("_gce_", InetAddress.getByName("10.240.0.2"));
     }
 
     /**
      * Test for network.host: _gce:privateIp_
      */
-    public void testNetworkHostPrivateIp() throws IOException {
+    @Test
+    public void networkHostPrivateIp() throws IOException {
         resolveGce("_gce:privateIp_", InetAddress.getByName("10.240.0.2"));
     }
 
     /**
      * Test for network.host: _gce:hostname_
      */
-    public void testNetworkHostPrivateDns() throws IOException {
+    @Test
+    public void networkHostPrivateDns() throws IOException {
         resolveGce("_gce:hostname_", InetAddress.getByName("localhost"));
     }
 
@@ -60,7 +65,8 @@ public class GceNetworkTests extends ESTestCase {
      * Test for network.host: _gce:doesnotexist_
      * This should raise an IllegalArgumentException as this setting does not exist
      */
-    public void testNetworkHostWrongSetting() throws IOException {
+    @Test
+    public void networkHostWrongSetting() throws IOException {
         resolveGce("_gce:doesnotexist_", (InetAddress) null);
     }
 
@@ -69,7 +75,8 @@ public class GceNetworkTests extends ESTestCase {
      * network.host: _gce:privateIp:0_
      * network.host: _gce:privateIp:1_
      */
-    public void testNetworkHostPrivateIpInterface() throws IOException {
+    @Test
+    public void networkHostPrivateIpInterface() throws IOException {
         resolveGce("_gce:privateIp:0_", InetAddress.getByName("10.240.0.2"));
         resolveGce("_gce:privateIp:1_", InetAddress.getByName("10.150.0.1"));
     }
@@ -78,7 +85,8 @@ public class GceNetworkTests extends ESTestCase {
      * Test that we don't have any regression with network host core settings such as
      * network.host: _local_
      */
-    public void testNetworkHostCoreLocal() throws IOException {
+    @Test
+    public void networkHostCoreLocal() throws IOException {
         resolveGce("_local_", new NetworkService(Settings.EMPTY).resolveBindHostAddress(NetworkService.DEFAULT_NETWORK_HOST));
     }
 
diff --git a/plugins/discovery-gce/src/test/java/org/elasticsearch/discovery/gce/RetryHttpInitializerWrapperTests.java b/plugins/discovery-gce/src/test/java/org/elasticsearch/discovery/gce/RetryHttpInitializerWrapperTests.java
index dcbd878..eb3bbad 100644
--- a/plugins/discovery-gce/src/test/java/org/elasticsearch/discovery/gce/RetryHttpInitializerWrapperTests.java
+++ b/plugins/discovery-gce/src/test/java/org/elasticsearch/discovery/gce/RetryHttpInitializerWrapperTests.java
@@ -20,13 +20,7 @@
 package org.elasticsearch.discovery.gce;
 
 import com.google.api.client.googleapis.testing.auth.oauth2.MockGoogleCredential;
-import com.google.api.client.http.GenericUrl;
-import com.google.api.client.http.HttpRequest;
-import com.google.api.client.http.HttpResponse;
-import com.google.api.client.http.HttpResponseException;
-import com.google.api.client.http.HttpStatusCodes;
-import com.google.api.client.http.LowLevelHttpRequest;
-import com.google.api.client.http.LowLevelHttpResponse;
+import com.google.api.client.http.*;
 import com.google.api.client.json.JsonFactory;
 import com.google.api.client.json.jackson2.JacksonFactory;
 import com.google.api.client.testing.http.MockHttpTransport;
@@ -34,15 +28,16 @@ import com.google.api.client.testing.http.MockLowLevelHttpRequest;
 import com.google.api.client.testing.http.MockLowLevelHttpResponse;
 import com.google.api.client.testing.util.MockSleeper;
 import com.google.api.services.compute.Compute;
-
-import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.lessThan;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.fail;
 
-public class RetryHttpInitializerWrapperTests extends ESTestCase {
+public class RetryHttpInitializerWrapperTests {
 
     static private class FailThenSuccessBackoffTransport extends MockHttpTransport {
 
@@ -93,7 +88,9 @@ public class RetryHttpInitializerWrapperTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testSimpleRetry() throws Exception {
+
         FailThenSuccessBackoffTransport fakeTransport =
                 new FailThenSuccessBackoffTransport(HttpStatusCodes.STATUS_CODE_SERVER_ERROR, 3);
 
@@ -115,6 +112,7 @@ public class RetryHttpInitializerWrapperTests extends ESTestCase {
         assertThat(response.getStatusCode(), equalTo(200));
     }
 
+    @Test
     public void testRetryWaitTooLong() throws Exception {
         int maxWaitTime = 10;
         int maxRetryTimes = 50;
@@ -151,7 +149,9 @@ public class RetryHttpInitializerWrapperTests extends ESTestCase {
         }
     }
 
+    @Test
     public void testIOExceptionRetry() throws Exception {
+
         FailThenSuccessBackoffTransport fakeTransport =
                 new FailThenSuccessBackoffTransport(HttpStatusCodes.STATUS_CODE_SERVER_ERROR, 1, true);
 
@@ -172,3 +172,4 @@ public class RetryHttpInitializerWrapperTests extends ESTestCase {
         assertThat(response.getStatusCode(), equalTo(200));
     }
 }
+
diff --git a/plugins/discovery-multicast/src/test/java/org/elasticsearch/plugin/discovery/multicast/MulticastZenPingTests.java b/plugins/discovery-multicast/src/test/java/org/elasticsearch/plugin/discovery/multicast/MulticastZenPingTests.java
index b9be113..7ab0aa7 100644
--- a/plugins/discovery-multicast/src/test/java/org/elasticsearch/plugin/discovery/multicast/MulticastZenPingTests.java
+++ b/plugins/discovery-multicast/src/test/java/org/elasticsearch/plugin/discovery/multicast/MulticastZenPingTests.java
@@ -39,12 +39,14 @@ import org.elasticsearch.transport.TransportService;
 import org.elasticsearch.transport.local.LocalTransport;
 import org.hamcrest.Matchers;
 import org.junit.Assert;
+import org.junit.Test;
 
 import java.net.DatagramPacket;
 import java.net.InetAddress;
 import java.net.MulticastSocket;
 
 public class MulticastZenPingTests extends ESTestCase {
+
     private Settings buildRandomMulticast(Settings settings) {
         Settings.Builder builder = Settings.builder().put(settings);
         builder.put("discovery.zen.ping.multicast.group", "224.2.3." + randomIntBetween(0, 255));
@@ -56,6 +58,7 @@ public class MulticastZenPingTests extends ESTestCase {
         return builder.build();
     }
 
+    @Test
     public void testSimplePings() throws InterruptedException {
         Settings settings = Settings.EMPTY;
         settings = buildRandomMulticast(settings);
@@ -129,7 +132,7 @@ public class MulticastZenPingTests extends ESTestCase {
         }
     }
 
-    @SuppressForbidden(reason = "I bind to wildcard addresses. I am a total nightmare")
+    @Test @SuppressForbidden(reason = "I bind to wildcard addresses. I am a total nightmare")
     public void testExternalPing() throws Exception {
         Settings settings = Settings.EMPTY;
         settings = buildRandomMulticast(settings);
diff --git a/plugins/lang-expression/src/test/java/org/elasticsearch/script/expression/IndexedExpressionTests.java b/plugins/lang-expression/src/test/java/org/elasticsearch/script/expression/IndexedExpressionTests.java
index 65b47b9..b8d7044 100644
--- a/plugins/lang-expression/src/test/java/org/elasticsearch/script/expression/IndexedExpressionTests.java
+++ b/plugins/lang-expression/src/test/java/org/elasticsearch/script/expression/IndexedExpressionTests.java
@@ -27,6 +27,7 @@ import org.elasticsearch.script.ScriptService.ScriptType;
 import org.elasticsearch.search.aggregations.AggregationBuilders;
 import org.elasticsearch.search.builder.SearchSourceBuilder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Collection;
@@ -36,6 +37,7 @@ import static org.hamcrest.Matchers.containsString;
 
 //TODO: please convert to unit tests!
 public class IndexedExpressionTests extends ESIntegTestCase {
+
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         Settings.Builder builder = Settings.builder().put(super.nodeSettings(nodeOrdinal));
@@ -51,6 +53,7 @@ public class IndexedExpressionTests extends ESIntegTestCase {
         return Collections.singleton(ExpressionPlugin.class);
     }
 
+    @Test
     public void testAllOpsDisabledIndexedScripts() throws IOException {
         if (randomBoolean()) {
             client().preparePutIndexedScript(ExpressionScriptEngineService.NAME, "script1", "{\"script\":\"2\"}").get();
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/AvgTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/AvgTests.java
index 9317be7..8ee84f1 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/AvgTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/AvgTests.java
@@ -27,6 +27,7 @@ import org.elasticsearch.search.aggregations.bucket.global.Global;
 import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
 import org.elasticsearch.search.aggregations.metrics.AbstractNumericTestCase;
 import org.elasticsearch.search.aggregations.metrics.avg.Avg;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -46,12 +47,14 @@ import static org.hamcrest.Matchers.notNullValue;
  *
  */
 public class AvgTests extends AbstractNumericTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     @Override
+    @Test
     public void testEmptyAggregation() throws Exception {
 
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
@@ -72,6 +75,7 @@ public class AvgTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testUnmapped() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx_unmapped")
                 .setQuery(matchAllQuery())
@@ -87,6 +91,7 @@ public class AvgTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testSingleValuedField() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -102,7 +107,8 @@ public class AvgTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldGetProperty() throws Exception {
+    @Test
+    public void testSingleValuedField_getProperty() throws Exception {
 
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(global("global").subAggregation(avg("avg").field("value"))).execute().actionGet();
@@ -127,7 +133,7 @@ public class AvgTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldPartiallyUnmapped() throws Exception {
+    public void testSingleValuedField_PartiallyUnmapped() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx", "idx_unmapped")
                 .setQuery(matchAllQuery())
                 .addAggregation(avg("avg").field("value"))
@@ -142,7 +148,8 @@ public class AvgTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(avg("avg").field("value").script(new Script("_value + 1")))
@@ -157,7 +164,8 @@ public class AvgTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -187,6 +195,7 @@ public class AvgTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testMultiValuedField() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -202,7 +211,8 @@ public class AvgTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(avg("avg").field("values").script(new Script("_value + 1")))
@@ -217,7 +227,8 @@ public class AvgTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -234,7 +245,8 @@ public class AvgTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValued() throws Exception {
+    @Test
+    public void testScript_SingleValued() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(avg("avg").script(new Script("doc['value'].value")))
@@ -249,7 +261,8 @@ public class AvgTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_SingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -266,7 +279,8 @@ public class AvgTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_ExplicitSingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -283,7 +297,8 @@ public class AvgTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void testScript_MultiValued() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(avg("avg").script(new Script("[ doc['value'].value, doc['value'].value + 1 ]")))
@@ -298,7 +313,8 @@ public class AvgTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitMultiValued() throws Exception {
+    @Test
+    public void testScript_ExplicitMultiValued() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(avg("avg").script(new Script("[ doc['value'].value, doc['value'].value + 1 ]")))
@@ -313,7 +329,8 @@ public class AvgTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValuedWithParams() throws Exception {
+    @Test
+    public void testScript_MultiValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/BucketScriptTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/BucketScriptTests.java
index 06119fd..af17e46 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/BucketScriptTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/BucketScriptTests.java
@@ -34,6 +34,7 @@ import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.search.aggregations.pipeline.BucketHelpers.GapPolicy;
 import org.elasticsearch.search.aggregations.pipeline.SimpleValue;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -69,7 +70,7 @@ public class BucketScriptTests extends ESIntegTestCase {
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     @Override
     public void setupSuiteScopeCluster() throws Exception {
         createIndex("idx");
@@ -102,7 +103,9 @@ public class BucketScriptTests extends ESIntegTestCase {
         return jsonBuilder;
     }
 
-    public void testInlineScript() {
+    @Test
+    public void inlineScript() {
+
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -146,7 +149,9 @@ public class BucketScriptTests extends ESIntegTestCase {
         }
     }
 
-    public void testInlineScript2() {
+    @Test
+    public void inlineScript2() {
+
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -190,7 +195,9 @@ public class BucketScriptTests extends ESIntegTestCase {
         }
     }
 
-    public void testInlineScriptSingleVariable() {
+    @Test
+    public void inlineScriptSingleVariable() {
+
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -226,7 +233,9 @@ public class BucketScriptTests extends ESIntegTestCase {
         }
     }
 
-    public void testInlineScriptNamedVars() {
+    @Test
+    public void inlineScriptNamedVars() {
+
         Map<String, String> bucketsPathsMap = new HashMap<>();
         bucketsPathsMap.put("foo", "field2Sum");
         bucketsPathsMap.put("bar", "field3Sum");
@@ -274,7 +283,9 @@ public class BucketScriptTests extends ESIntegTestCase {
         }
     }
 
-    public void testInlineScriptWithParams() {
+    @Test
+    public void inlineScriptWithParams() {
+
         Map<String, Object> params = new HashMap<>();
         params.put("factor", 3);
         SearchResponse response = client()
@@ -320,7 +331,9 @@ public class BucketScriptTests extends ESIntegTestCase {
         }
     }
 
-    public void testInlineScriptInsertZeros() {
+    @Test
+    public void inlineScriptInsertZeros() {
+
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -366,7 +379,9 @@ public class BucketScriptTests extends ESIntegTestCase {
         }
     }
 
-    public void testIndexedScript() {
+    @Test
+    public void indexedScript() {
+
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -410,7 +425,8 @@ public class BucketScriptTests extends ESIntegTestCase {
         }
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx_unmapped")
                 .addAggregation(
@@ -433,7 +449,8 @@ public class BucketScriptTests extends ESIntegTestCase {
         assertThat(deriv.getBuckets().size(), equalTo(0));
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx", "idx_unmapped")
                 .addAggregation(
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/BucketSelectorTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/BucketSelectorTests.java
index 2883b74..7b14bca 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/BucketSelectorTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/BucketSelectorTests.java
@@ -33,6 +33,7 @@ import org.elasticsearch.search.aggregations.bucket.histogram.InternalHistogram.
 import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.search.aggregations.pipeline.BucketHelpers.GapPolicy;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -69,7 +70,7 @@ public class BucketSelectorTests extends ESIntegTestCase {
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     @Override
     public void setupSuiteScopeCluster() throws Exception {
         createIndex("idx");
@@ -103,7 +104,9 @@ public class BucketSelectorTests extends ESIntegTestCase {
         return jsonBuilder;
     }
 
-    public void testInlineScript() {
+    @Test
+    public void inlineScript() {
+
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -137,7 +140,9 @@ public class BucketSelectorTests extends ESIntegTestCase {
         }
     }
 
-    public void testInlineScriptNoBucketsPruned() {
+    @Test
+    public void inlineScriptNoBucketsPruned() {
+
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -171,7 +176,9 @@ public class BucketSelectorTests extends ESIntegTestCase {
         }
     }
 
-    public void testInlineScriptNoBucketsLeft() {
+    @Test
+    public void inlineScriptNoBucketsLeft() {
+
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -194,7 +201,9 @@ public class BucketSelectorTests extends ESIntegTestCase {
         assertThat(buckets.size(), equalTo(0));
     }
 
-    public void testInlineScript2() {
+    @Test
+    public void inlineScript2() {
+
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -227,7 +236,9 @@ public class BucketSelectorTests extends ESIntegTestCase {
         }
     }
 
-    public void testInlineScriptSingleVariable() {
+    @Test
+    public void inlineScriptSingleVariable() {
+
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -256,7 +267,9 @@ public class BucketSelectorTests extends ESIntegTestCase {
         }
     }
 
-    public void testInlineScriptNamedVars() {
+    @Test
+    public void inlineScriptNamedVars() {
+
         Map<String, String> bucketPathsMap = new HashMap<>();
         bucketPathsMap.put("my_value1", "field2Sum");
         bucketPathsMap.put("my_value2", "field3Sum");
@@ -294,7 +307,9 @@ public class BucketSelectorTests extends ESIntegTestCase {
         }
     }
 
-    public void testInlineScriptWithParams() {
+    @Test
+    public void inlineScriptWithParams() {
+
         Map<String, Object> params = new HashMap<>();
         params.put("threshold", 100);
         SearchResponse response = client()
@@ -330,7 +345,9 @@ public class BucketSelectorTests extends ESIntegTestCase {
         }
     }
 
-    public void testInlineScriptInsertZeros() {
+    @Test
+    public void inlineScriptInsertZeros() {
+
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -363,7 +380,9 @@ public class BucketSelectorTests extends ESIntegTestCase {
         }
     }
 
-    public void testIndexedScript() {
+    @Test
+    public void indexedScript() {
+
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -395,7 +414,9 @@ public class BucketSelectorTests extends ESIntegTestCase {
         }
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
+
         SearchResponse response = client()
                 .prepareSearch("idx_unmapped")
                 .addAggregation(
@@ -418,7 +439,9 @@ public class BucketSelectorTests extends ESIntegTestCase {
         assertThat(deriv.getBuckets().size(), equalTo(0));
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
+
         SearchResponse response = client()
                 .prepareSearch("idx", "idx_unmapped")
                 .addAggregation(
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/BulkTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/BulkTests.java
index d893b27..4cd8016 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/BulkTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/BulkTests.java
@@ -45,6 +45,7 @@ import org.elasticsearch.script.Script;
 import org.elasticsearch.script.ScriptService;
 import org.elasticsearch.script.groovy.GroovyPlugin;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
@@ -53,23 +54,18 @@ import java.util.Collections;
 import java.util.concurrent.CyclicBarrier;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertExists;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchHits;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.nullValue;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
+import static org.hamcrest.Matchers.*;
 
 public class BulkTests extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
-    public void testBulkUpdateSimple() throws Exception {
+    
+    @Test
+    public void testBulkUpdate_simple() throws Exception {
         assertAcked(prepareCreate("test").addAlias(new Alias("alias")));
         ensureGreen();
 
@@ -160,6 +156,7 @@ public class BulkTests extends ESIntegTestCase {
         assertThat(((Long) getResponse.getField("field").getValue()), equalTo(4l));
     }
 
+    @Test
     public void testBulkVersioning() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -206,7 +203,9 @@ public class BulkTests extends ESIntegTestCase {
         assertThat(((UpdateResponse) bulkResponse.getItems()[2].getResponse()).getVersion(), equalTo(21l));
     }
 
-    public void testBulkUpdateMalformedScripts() throws Exception {
+    @Test
+    public void testBulkUpdate_malformedScripts() throws Exception {
+
         createIndex("test");
         ensureGreen();
 
@@ -245,7 +244,8 @@ public class BulkTests extends ESIntegTestCase {
         assertThat(bulkResponse.getItems()[2].getResponse(), nullValue());
     }
 
-    public void testBulkUpdateLargerVolume() throws Exception {
+    @Test
+    public void testBulkUpdate_largerVolume() throws Exception {
         createIndex("test");
         ensureGreen();
 
@@ -378,7 +378,9 @@ public class BulkTests extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testBulkIndexingWhileInitializing() throws Exception {
+
         int replica = randomInt(2);
 
         internalCluster().ensureAtLeastNumDataNodes(1 + replica);
@@ -412,6 +414,7 @@ public class BulkTests extends ESIntegTestCase {
     /*
     Test for https://github.com/elasticsearch/elasticsearch/issues/3444
      */
+    @Test
     public void testBulkUpdateDocAsUpsertWithParent() throws Exception {
         client().admin().indices().prepareCreate("test")
                 .addMapping("parent", "{\"parent\":{}}")
@@ -449,6 +452,7 @@ public class BulkTests extends ESIntegTestCase {
     /*
     Test for https://github.com/elasticsearch/elasticsearch/issues/3444
      */
+    @Test
     public void testBulkUpdateUpsertWithParent() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("parent", "{\"parent\":{}}")
@@ -483,6 +487,7 @@ public class BulkTests extends ESIntegTestCase {
     /*
      * Test for https://github.com/elasticsearch/elasticsearch/issues/8365
      */
+    @Test
     public void testBulkUpdateChildMissingParentRouting() throws Exception {
         assertAcked(prepareCreate("test").addMapping("parent", "{\"parent\":{}}").addMapping("child",
                 "{\"child\": {\"_parent\": {\"type\": \"parent\"}}}"));
@@ -513,6 +518,7 @@ public class BulkTests extends ESIntegTestCase {
         assertThat(bulkResponse.getItems()[3].isFailed(), equalTo(false));
     }
 
+    @Test
     public void testFailingVersionedUpdatedOnBulk() throws Exception {
         createIndex("test");
         index("test", "type", "1", "field", "1");
@@ -555,8 +561,8 @@ public class BulkTests extends ESIntegTestCase {
         assertThat(successes, equalTo(1));
     }
 
-    // issue 4745
-    public void testPreParsingSourceDueToMappingShouldNotBreakCompleteBulkRequest() throws Exception {
+    @Test // issue 4745
+    public void preParsingSourceDueToMappingShouldNotBreakCompleteBulkRequest() throws Exception {
         XContentBuilder builder = jsonBuilder().startObject()
                     .startObject("type")
                         .startObject("_timestamp")
@@ -581,8 +587,8 @@ public class BulkTests extends ESIntegTestCase {
         assertExists(get("test", "type", "2"));
     }
 
-    // issue 4745
-    public void testPreParsingSourceDueToRoutingShouldNotBreakCompleteBulkRequest() throws Exception {
+    @Test // issue 4745
+    public void preParsingSourceDueToRoutingShouldNotBreakCompleteBulkRequest() throws Exception {
         XContentBuilder builder = jsonBuilder().startObject()
                     .startObject("type")
                         .startObject("_routing")
@@ -609,8 +615,8 @@ public class BulkTests extends ESIntegTestCase {
     }
 
 
-    // issue 4745
-    public void testPreParsingSourceDueToIdShouldNotBreakCompleteBulkRequest() throws Exception {
+    @Test // issue 4745
+    public void preParsingSourceDueToIdShouldNotBreakCompleteBulkRequest() throws Exception {
         XContentBuilder builder = jsonBuilder().startObject()
                     .startObject("type")
                         .startObject("_id")
@@ -635,7 +641,7 @@ public class BulkTests extends ESIntegTestCase {
         assertExists(get("test", "type", "48"));
     }
 
-    // issue 4987
+    @Test // issue 4987
     public void testThatInvalidIndexNamesShouldNotBreakCompleteBulkRequest() {
         int bulkEntryCount = randomIntBetween(10, 50);
         BulkRequestBuilder builder = client().prepareBulk();
@@ -663,7 +669,7 @@ public class BulkTests extends ESIntegTestCase {
         }
     }
 
-    // issue 6630
+    @Test // issue 6630
     public void testThatFailedUpdateRequestReturnsCorrectType() throws Exception {
         BulkResponse indexBulkItemResponse = client().prepareBulk()
                 .add(new IndexRequest("test", "type", "3").source("{ \"title\" : \"Great Title of doc 3\" }"))
@@ -698,7 +704,7 @@ public class BulkTests extends ESIntegTestCase {
         return randomBoolean() ? "test" : "alias";
     }
 
-    // issue 6410
+    @Test // issue 6410
     public void testThatMissingIndexDoesNotAbortFullBulkRequest() throws Exception{
         createIndex("bulkindex1", "bulkindex2");
         ensureYellow();
@@ -721,7 +727,7 @@ public class BulkTests extends ESIntegTestCase {
         assertThat(bulkResponse.getItems().length, is(5));
     }
 
-    // issue 9821
+    @Test // issue 9821
     public void testFailedRequestsOnClosedIndex() throws Exception {
         createIndex("bulkindex1");
         ensureYellow();
@@ -743,7 +749,7 @@ public class BulkTests extends ESIntegTestCase {
         assertThat(responseItems[2].getOpType(), is("delete"));
     }
 
-    // issue 9821
+    @Test // issue 9821
     public void testInvalidIndexNamesCorrectOpType() {
         BulkResponse bulkResponse = client().prepareBulk()
                 .add(client().prepareIndex().setIndex("INVALID.NAME").setType("type1").setId("1").setSource("field", 1))
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/CardinalityTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/CardinalityTests.java
index 4c034b9..37ed5a6 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/CardinalityTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/CardinalityTests.java
@@ -30,6 +30,7 @@ import org.elasticsearch.search.aggregations.bucket.global.Global;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.search.aggregations.metrics.cardinality.Cardinality;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -51,7 +52,7 @@ public class CardinalityTests extends ESIntegTestCase {
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     @Override
     public Settings indexSettings() {
         return Settings.builder()
@@ -131,7 +132,8 @@ public class CardinalityTests extends ESIntegTestCase {
         return randomBoolean() ? "l_values" : "d_values";
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx_unmapped").setTypes("type")
                 .addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field("str_value"))
                 .execute().actionGet();
@@ -144,7 +146,8 @@ public class CardinalityTests extends ESIntegTestCase {
         assertCount(count, 0);
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx", "idx_unmapped").setTypes("type")
                 .addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field("str_value"))
                 .execute().actionGet();
@@ -157,7 +160,8 @@ public class CardinalityTests extends ESIntegTestCase {
         assertCount(count, numDocs);
     }
 
-    public void testSingleValuedString() throws Exception {
+    @Test
+    public void singleValuedString() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field("str_value"))
                 .execute().actionGet();
@@ -170,7 +174,8 @@ public class CardinalityTests extends ESIntegTestCase {
         assertCount(count, numDocs);
     }
 
-    public void testSingleValuedNumeric() throws Exception {
+    @Test
+    public void singleValuedNumeric() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field(singleNumericField()))
                 .execute().actionGet();
@@ -183,7 +188,9 @@ public class CardinalityTests extends ESIntegTestCase {
         assertCount(count, numDocs);
     }
 
-    public void testSingleValuedNumericGetProperty() throws Exception {
+    @Test
+    public void singleValuedNumeric_getProperty() throws Exception {
+
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(
                         global("global").subAggregation(
@@ -209,7 +216,8 @@ public class CardinalityTests extends ESIntegTestCase {
         assertThat((double) cardinality.getProperty("value"), equalTo((double) cardinality.getValue()));
     }
 
-    public void testSingleValuedNumericHashed() throws Exception {
+    @Test
+    public void singleValuedNumericHashed() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field(singleNumericField()))
                 .execute().actionGet();
@@ -222,7 +230,8 @@ public class CardinalityTests extends ESIntegTestCase {
         assertCount(count, numDocs);
     }
 
-    public void testMultiValuedString() throws Exception {
+    @Test
+    public void multiValuedString() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field("str_values"))
                 .execute().actionGet();
@@ -235,7 +244,8 @@ public class CardinalityTests extends ESIntegTestCase {
         assertCount(count, numDocs * 2);
     }
 
-    public void testMultiValuedNumeric() throws Exception {
+    @Test
+    public void multiValuedNumeric() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field(multiNumericField(false)))
                 .execute().actionGet();
@@ -248,7 +258,8 @@ public class CardinalityTests extends ESIntegTestCase {
         assertCount(count, numDocs * 2);
     }
 
-    public void testMultiValuedNumericHashed() throws Exception {
+    @Test
+    public void multiValuedNumericHashed() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field(multiNumericField(true)))
                 .execute().actionGet();
@@ -261,7 +272,8 @@ public class CardinalityTests extends ESIntegTestCase {
         assertCount(count, numDocs * 2);
     }
 
-    public void testSingleValuedStringScript() throws Exception {
+    @Test
+    public void singleValuedStringScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(
                         cardinality("cardinality").precisionThreshold(precisionThreshold).script(new Script("doc['str_value'].value")))
@@ -275,7 +287,8 @@ public class CardinalityTests extends ESIntegTestCase {
         assertCount(count, numDocs);
     }
 
-    public void testMultiValuedStringScript() throws Exception {
+    @Test
+    public void multiValuedStringScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(
                         cardinality("cardinality").precisionThreshold(precisionThreshold).script(new Script("doc['str_values'].values")))
@@ -289,7 +302,8 @@ public class CardinalityTests extends ESIntegTestCase {
         assertCount(count, numDocs * 2);
     }
 
-    public void testSingleValuedNumericScript() throws Exception {
+    @Test
+    public void singleValuedNumericScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(
                         cardinality("cardinality").precisionThreshold(precisionThreshold).script(
@@ -304,7 +318,8 @@ public class CardinalityTests extends ESIntegTestCase {
         assertCount(count, numDocs);
     }
 
-    public void testMultiValuedNumericScript() throws Exception {
+    @Test
+    public void multiValuedNumericScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(
                         cardinality("cardinality").precisionThreshold(precisionThreshold).script(
@@ -319,7 +334,8 @@ public class CardinalityTests extends ESIntegTestCase {
         assertCount(count, numDocs * 2);
     }
 
-    public void testSingleValuedStringValueScript() throws Exception {
+    @Test
+    public void singleValuedStringValueScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(
                         cardinality("cardinality").precisionThreshold(precisionThreshold).field("str_value").script(new Script("_value")))
@@ -333,7 +349,8 @@ public class CardinalityTests extends ESIntegTestCase {
         assertCount(count, numDocs);
     }
 
-    public void testMultiValuedStringValueScript() throws Exception {
+    @Test
+    public void multiValuedStringValueScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(
                         cardinality("cardinality").precisionThreshold(precisionThreshold).field("str_values").script(new Script("_value")))
@@ -347,7 +364,8 @@ public class CardinalityTests extends ESIntegTestCase {
         assertCount(count, numDocs * 2);
     }
 
-    public void testSingleValuedNumericValueScript() throws Exception {
+    @Test
+    public void singleValuedNumericValueScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(
                         cardinality("cardinality").precisionThreshold(precisionThreshold).field(singleNumericField())
@@ -362,7 +380,8 @@ public class CardinalityTests extends ESIntegTestCase {
         assertCount(count, numDocs);
     }
 
-    public void testMultiValuedNumericValueScript() throws Exception {
+    @Test
+    public void multiValuedNumericValueScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(
                         cardinality("cardinality").precisionThreshold(precisionThreshold).field(multiNumericField(false))
@@ -377,7 +396,8 @@ public class CardinalityTests extends ESIntegTestCase {
         assertCount(count, numDocs * 2);
     }
 
-    public void testAsSubAgg() throws Exception {
+    @Test
+    public void asSubAgg() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms").field("str_value")
                         .collectMode(randomFrom(SubAggCollectionMode.values()))
@@ -394,4 +414,5 @@ public class CardinalityTests extends ESIntegTestCase {
             assertCount(count, 2);
         }
     }
+
 }
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ContextAndHeaderTransportTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ContextAndHeaderTransportTests.java
index 1362975..81971d6 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ContextAndHeaderTransportTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ContextAndHeaderTransportTests.java
@@ -77,6 +77,7 @@ import org.elasticsearch.test.rest.client.http.HttpRequestBuilder;
 import org.elasticsearch.test.rest.client.http.HttpResponse;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -107,6 +108,7 @@ import static org.hamcrest.Matchers.is;
 
 @ClusterScope(scope = SUITE)
 public class ContextAndHeaderTransportTests extends ESIntegTestCase {
+
     private static final List<ActionRequest> requests =  new CopyOnWriteArrayList<>();
     private String randomHeaderKey = randomAsciiOfLength(10);
     private String randomHeaderValue = randomAsciiOfLength(20);
@@ -155,6 +157,7 @@ public class ContextAndHeaderTransportTests extends ESIntegTestCase {
         assertRequestsContainHeader(RefreshRequest.class);
     }
 
+    @Test
     public void testThatTermsLookupGetRequestContainsContextAndHeaders() throws Exception {
         transportClient().prepareIndex(lookupIndex, "type", "1")
                 .setSource(jsonBuilder().startObject().array("followers", "foo", "bar", "baz").endObject()).get();
@@ -175,6 +178,7 @@ public class ContextAndHeaderTransportTests extends ESIntegTestCase {
         assertGetRequestsContainHeaders();
     }
 
+    @Test
     public void testThatGeoShapeQueryGetRequestContainsContextAndHeaders() throws Exception {
         transportClient().prepareIndex(lookupIndex, "type", "1").setSource(jsonBuilder().startObject()
                 .field("name", "Munich Suburban Area")
@@ -216,6 +220,7 @@ public class ContextAndHeaderTransportTests extends ESIntegTestCase {
         assertGetRequestsContainHeaders();
     }
 
+    @Test
     public void testThatMoreLikeThisQueryMultiTermVectorRequestContainsContextAndHeaders() throws Exception {
         transportClient().prepareIndex(lookupIndex, "type", "1")
                 .setSource(jsonBuilder().startObject().field("name", "Star Wars - The new republic").endObject())
@@ -243,6 +248,7 @@ public class ContextAndHeaderTransportTests extends ESIntegTestCase {
         assertRequestsContainHeader(MultiTermVectorsRequest.class);
     }
 
+    @Test
     public void testThatPercolatingExistingDocumentGetRequestContainsContextAndHeaders() throws Exception {
         transportClient().prepareIndex(lookupIndex, ".percolator", "1")
                 .setSource(jsonBuilder().startObject().startObject("query").startObject("match").field("name", "star wars").endObject().endObject().endObject())
@@ -259,6 +265,7 @@ public class ContextAndHeaderTransportTests extends ESIntegTestCase {
         assertGetRequestsContainHeaders();
     }
 
+    @Test
     public void testThatIndexedScriptGetRequestContainsContextAndHeaders() throws Exception {
         PutIndexedScriptResponse scriptResponse = transportClient().preparePutIndexedScript(GroovyScriptEngineService.NAME, "my_script",
                 jsonBuilder().startObject().field("script", "_score * 10").endObject().string()
@@ -284,6 +291,7 @@ public class ContextAndHeaderTransportTests extends ESIntegTestCase {
         assertRequestsContainHeader(PutIndexedScriptRequest.class);
     }
 
+    @Test
     public void testThatIndexedScriptGetRequestInTemplateQueryContainsContextAndHeaders() throws Exception {
         PutIndexedScriptResponse scriptResponse = transportClient()
                 .preparePutIndexedScript(
@@ -309,6 +317,7 @@ public class ContextAndHeaderTransportTests extends ESIntegTestCase {
         assertRequestsContainHeader(PutIndexedScriptRequest.class);
     }
 
+    @Test
     public void testThatIndexedScriptGetRequestInReducePhaseContainsContextAndHeaders() throws Exception {
         PutIndexedScriptResponse scriptResponse = transportClient().preparePutIndexedScript(GroovyScriptEngineService.NAME, "my_script",
                 jsonBuilder().startObject().field("script", "_value0 * 10").endObject().string()).get();
@@ -335,6 +344,7 @@ public class ContextAndHeaderTransportTests extends ESIntegTestCase {
         assertRequestsContainHeader(PutIndexedScriptRequest.class);
     }
 
+    @Test
     public void testThatSearchTemplatesWithIndexedTemplatesGetRequestContainsContextAndHeaders() throws Exception {
         PutIndexedScriptResponse scriptResponse = transportClient().preparePutIndexedScript(MustacheScriptEngineService.NAME, "the_template",
                 jsonBuilder().startObject().startObject("template").startObject("query").startObject("match")
@@ -360,6 +370,7 @@ public class ContextAndHeaderTransportTests extends ESIntegTestCase {
         assertRequestsContainHeader(PutIndexedScriptRequest.class);
     }
 
+    @Test
     public void testThatIndexedScriptGetRequestInPhraseSuggestContainsContextAndHeaders() throws Exception {
         CreateIndexRequestBuilder builder = transportClient().admin().indices().prepareCreate("test").setSettings(settingsBuilder()
                 .put(indexSettings())
@@ -450,6 +461,8 @@ public class ContextAndHeaderTransportTests extends ESIntegTestCase {
         assertRequestsContainHeader(PutIndexedScriptRequest.class);
     }
 
+
+    @Test
     public void testThatRelevantHttpHeadersBecomeRequestHeaders() throws Exception {
         String releventHeaderName = "relevant_" + randomHeaderKey;
         for (RestController restController : internalCluster().getDataNodeInstances(RestController.class)) {
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/DateHistogramTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/DateHistogramTests.java
index d65b469..cea4a32 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/DateHistogramTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/DateHistogramTests.java
@@ -40,6 +40,7 @@ import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.format.DateTimeFormat;
 import org.junit.After;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -53,18 +54,9 @@ import java.util.concurrent.TimeUnit;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.dateHistogram;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.histogram;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.max;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.stats;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.sum;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchHits;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.is;
+import static org.elasticsearch.search.aggregations.AggregationBuilders.*;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
+import static org.hamcrest.Matchers.*;
 import static org.hamcrest.core.IsNull.notNullValue;
 
 /**
@@ -77,7 +69,7 @@ public class DateHistogramTests extends ESIntegTestCase {
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     private DateTime date(int month, int day) {
         return new DateTime(2012, month, day, 0, 0, DateTimeZone.UTC);
     }
@@ -145,7 +137,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         return Joda.forPattern(DateFieldMapper.Defaults.DATE_TIME_FORMATTER.format()).printer().withZone(tz).print(key);
     }
 
-    public void testSingleValuedField() throws Exception {
+    @Test
+    public void singleValuedField() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo").field("date").interval(DateHistogramInterval.MONTH))
                 .execute().actionGet();
@@ -180,7 +173,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(3l));
     }
 
-    public void testSingleValuedFieldWithTimeZone() throws Exception {
+    @Test
+    public void singleValuedField_WithTimeZone() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo").field("date").interval(DateHistogramInterval.DAY).minDocCount(1).timeZone("+01:00")).execute()
                 .actionGet();
@@ -236,7 +230,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(1l));
     }
 
-    public void testSingleValuedFieldOrderedByKeyAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByKeyAsc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo")
                         .field("date")
@@ -259,7 +254,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByKeyDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByKeyDesc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo")
                         .field("date")
@@ -281,7 +277,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByCountAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByCountAsc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo")
                         .field("date")
@@ -303,7 +300,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByCountDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByCountDesc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo")
                         .field("date")
@@ -325,7 +323,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldWithSubAggregation() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo").field("date").interval(DateHistogramInterval.MONTH)
                         .subAggregation(sum("sum").field("value")))
@@ -382,7 +381,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         assertThat((double) propertiesCounts[2], equalTo(15.0));
     }
 
-    public void testSingleValuedFieldWithSubAggregationInherited() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation_Inherited() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo").field("date").interval(DateHistogramInterval.MONTH)
                         .subAggregation(max("max")))
@@ -427,7 +427,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         assertThat(max.getValue(), equalTo((double) new DateTime(2012, 3, 23, 0, 0, DateTimeZone.UTC).getMillis()));
     }
 
-    public void testSingleValuedFieldOrderedBySubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySubAggregationAsc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo")
                         .field("date")
@@ -450,7 +451,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedBySubAggregationDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySubAggregationDesc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo")
                         .field("date")
@@ -473,7 +475,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByMultiValuedSubAggregationAscInherited() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValuedSubAggregationAsc_Inherited() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo")
                         .field("date")
@@ -496,7 +499,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByMultiValuedSubAggregationDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValuedSubAggregationDesc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo")
                         .field("date")
@@ -519,7 +523,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void singleValuedField_WithValueScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo")
                         .field("date")
@@ -568,7 +573,8 @@ public class DateHistogramTests extends ESIntegTestCase {
     [ Mar 23, Apr 24]
      */
 
-    public void testMultiValuedField() throws Exception {
+    @Test
+    public void multiValuedField() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo").field("dates").interval(DateHistogramInterval.MONTH))
                 .execute().actionGet();
@@ -610,7 +616,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(3l));
     }
 
-    public void testMultiValuedFieldOrderedByKeyDesc() throws Exception {
+    @Test
+    public void multiValuedField_OrderedByKeyDesc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo")
                         .field("dates")
@@ -655,7 +662,8 @@ public class DateHistogramTests extends ESIntegTestCase {
      * doc 5: [ Apr 15, May 16]
      * doc 6: [ Apr 23, May 24]
      */
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo")
                         .field("dates")
@@ -709,7 +717,8 @@ public class DateHistogramTests extends ESIntegTestCase {
      * doc 5: [ Apr 15, May 16]
      * doc 6: [ Apr 23, May 24]
      */
-    public void testMultiValuedFieldWithValueScriptWithInheritedSubAggregator() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript_WithInheritedSubAggregator() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo")
                         .field("dates")
@@ -773,7 +782,8 @@ public class DateHistogramTests extends ESIntegTestCase {
      * Mar 15
      * Mar 23
      */
-    public void testScriptSingleValue() throws Exception {
+    @Test
+    public void script_SingleValue() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo").script(new Script("doc['date'].value")).interval(DateHistogramInterval.MONTH))
                 .execute().actionGet();
@@ -808,7 +818,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(3l));
     }
 
-    public void testScriptSingleValueWithSubAggregatorInherited() throws Exception {
+    @Test
+    public void script_SingleValue_WithSubAggregator_Inherited() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo")
                         .script(new Script("doc['date'].value")).interval(DateHistogramInterval.MONTH)
@@ -853,7 +864,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         assertThat(max.getValue(), equalTo((double) new DateTime(2012, 3, 23, 0, 0, DateTimeZone.UTC).getMillis()));
     }
 
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void script_MultiValued() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo").script(new Script("doc['dates'].values")).interval(DateHistogramInterval.MONTH))
                 .execute().actionGet();
@@ -906,7 +918,8 @@ public class DateHistogramTests extends ESIntegTestCase {
     [ Mar 23, Apr 24]
      */
 
-    public void testScriptMultiValuedWithAggregatorInherited() throws Exception {
+    @Test
+    public void script_MultiValued_WithAggregatorInherited() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo")
                         .script(new Script("doc['dates'].values")).interval(DateHistogramInterval.MONTH)
@@ -961,7 +974,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         assertThat((long) max.getValue(), equalTo(new DateTime(2012, 4, 24, 0, 0, DateTimeZone.UTC).getMillis()));
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx_unmapped")
                 .addAggregation(dateHistogram("histo").field("date").interval(DateHistogramInterval.MONTH))
                 .execute().actionGet();
@@ -974,7 +988,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         assertThat(histo.getBuckets().size(), equalTo(0));
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx", "idx_unmapped")
                 .addAggregation(dateHistogram("histo").field("date").interval(DateHistogramInterval.MONTH))
                 .execute().actionGet();
@@ -1009,7 +1024,8 @@ public class DateHistogramTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(3l));
     }
 
-    public void testEmptyAggregation() throws Exception {
+    @Test
+    public void emptyAggregation() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0).subAggregation(dateHistogram("date_histo").interval(1)))
@@ -1032,7 +1048,8 @@ public class DateHistogramTests extends ESIntegTestCase {
 
     }
 
-    public void testSingleValueWithTimeZone() throws Exception {
+    @Test
+    public void singleValue_WithTimeZone() throws Exception {
         prepareCreate("idx2").addMapping("type", "date", "type=date").execute().actionGet();
         IndexRequestBuilder[] reqs = new IndexRequestBuilder[5];
         DateTime date = date("2014-03-11T00:00:00+00:00");
@@ -1068,7 +1085,9 @@ public class DateHistogramTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(3l));
     }
 
-    public void testSingleValueFieldWithExtendedBounds() throws Exception {
+    @Test
+    public void singleValueField_WithExtendedBounds() throws Exception {
+
         String pattern = "yyyy-MM-dd";
         // we're testing on days, so the base must be rounded to a day
         int interval = randomIntBetween(1, 2); // in days
@@ -1183,7 +1202,9 @@ public class DateHistogramTests extends ESIntegTestCase {
      * Test date histogram aggregation with hour interval, timezone shift and
      * extended bounds (see https://github.com/elastic/elasticsearch/issues/12278)
      */
-    public void testSingleValueFieldWithExtendedBoundsTimezone() throws Exception {
+    @Test
+    public void singleValueField_WithExtendedBoundsTimezone() throws Exception {
+
         String index = "test12278";
         prepareCreate(index)
                 .setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1).put("index.number_of_replicas", 0))
@@ -1242,7 +1263,9 @@ public class DateHistogramTests extends ESIntegTestCase {
         internalCluster().wipeIndices("test12278");
     }
 
-    public void testSingleValueWithMultipleDateFormatsFromMapping() throws Exception {
+    @Test
+    public void singleValue_WithMultipleDateFormatsFromMapping() throws Exception {
+
         String mappingJson = jsonBuilder().startObject().startObject("type").startObject("properties").startObject("date").field("type", "date").field("format", "dateOptionalTime||dd-MM-yyyy").endObject().endObject().endObject().endObject().string();
         prepareCreate("idx2").addMapping("type", mappingJson).execute().actionGet();
         IndexRequestBuilder[] reqs = new IndexRequestBuilder[5];
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/DateRangeTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/DateRangeTests.java
index ba4ca38..f6425fc 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/DateRangeTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/DateRangeTests.java
@@ -34,6 +34,7 @@ import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -65,7 +66,7 @@ public class DateRangeTests extends ESIntegTestCase {
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     private static IndexRequestBuilder indexDoc(int month, int day, int value) throws Exception {
         return client().prepareIndex("idx", "type").setSource(jsonBuilder()
                 .startObject()
@@ -111,7 +112,8 @@ public class DateRangeTests extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testDateMath() throws Exception {
+    @Test
+    public void dateMath() throws Exception {
         DateRangeBuilder rangeBuilder = dateRange("range");
         if (randomBoolean()) {
             rangeBuilder.field("date");
@@ -150,7 +152,8 @@ public class DateRangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(0L));
     }
 
-    public void testSingleValueField() throws Exception {
+    @Test
+    public void singleValueField() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateRange("range")
                         .field("date")
@@ -196,7 +199,8 @@ public class DateRangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(numDocs - 4l));
     }
 
-    public void testSingleValueFieldWithStringDates() throws Exception {
+    @Test
+    public void singleValueField_WithStringDates() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateRange("range")
                         .field("date")
@@ -242,7 +246,8 @@ public class DateRangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(numDocs - 4l));
     }
 
-    public void testSingleValueFieldWithStringDatesWithCustomFormat() throws Exception {
+    @Test
+    public void singleValueField_WithStringDates_WithCustomFormat() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateRange("range")
                         .field("date")
@@ -289,7 +294,8 @@ public class DateRangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(numDocs - 4l));
     }
 
-    public void testSingleValueFieldWithDateMath() throws Exception {
+    @Test
+    public void singleValueField_WithDateMath() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateRange("range")
                         .field("date")
@@ -335,7 +341,8 @@ public class DateRangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(numDocs - 4l));
     }
 
-    public void testSingleValueFieldWithCustomKey() throws Exception {
+    @Test
+    public void singleValueField_WithCustomKey() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateRange("range")
                         .field("date")
@@ -390,7 +397,8 @@ public class DateRangeTests extends ESIntegTestCase {
         Mar 23,     6
      */
 
-    public void testSingleValuedFieldWithSubAggregation() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateRange("range")
                         .field("date")
@@ -456,7 +464,8 @@ public class DateRangeTests extends ESIntegTestCase {
         assertThat((long) propertiesDocCounts[2], equalTo(numDocs - 4l));
     }
 
-    public void testSingleValuedFieldWithSubAggregationInherited() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation_Inherited() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateRange("range")
                         .field("date")
@@ -521,7 +530,8 @@ public class DateRangeTests extends ESIntegTestCase {
         Mar 23, Apr 24      6
      */
 
-    public void testMultiValuedField() throws Exception {
+    @Test
+    public void multiValuedField() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateRange("range")
                         .field("dates")
@@ -577,7 +587,8 @@ public class DateRangeTests extends ESIntegTestCase {
      */
 
 
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateRange("range")
                         .field("dates")
@@ -621,7 +632,7 @@ public class DateRangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(numDocs - 1l));
     }
 
-
+    
 
     /*
         Feb 2,  Mar 3,      1
@@ -632,7 +643,8 @@ public class DateRangeTests extends ESIntegTestCase {
         Apr 23, May 24      6
      */
 
-    public void testMultiValuedFieldWithValueScriptWithInheritedSubAggregator() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript_WithInheritedSubAggregator() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateRange("range")
                         .field("dates")
@@ -684,7 +696,8 @@ public class DateRangeTests extends ESIntegTestCase {
         assertThat(max, notNullValue());
     }
 
-    public void testScriptSingleValue() throws Exception {
+    @Test
+    public void script_SingleValue() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateRange("range")
 .script(new Script("doc['date'].value"))
@@ -730,7 +743,8 @@ public class DateRangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(numDocs - 4l));
     }
 
-    public void testScriptSingleValueWithSubAggregatorInherited() throws Exception {
+    @Test
+    public void script_SingleValue_WithSubAggregator_Inherited() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -782,7 +796,7 @@ public class DateRangeTests extends ESIntegTestCase {
         assertThat(max, notNullValue());
     }
 
-
+    
 
     /*
         Jan 2,  Feb 3,      1
@@ -793,7 +807,8 @@ public class DateRangeTests extends ESIntegTestCase {
         Mar 23, Apr 24      6
      */
 
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void script_MultiValued() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -836,7 +851,8 @@ public class DateRangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(numDocs - 2l));
     }
 
-    public void testScriptMultiValuedWithAggregatorInherited() throws Exception {
+    @Test
+    public void script_MultiValued_WithAggregatorInherited() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateRange("range")
 .script(new Script("doc['dates'].values")).addUnboundedTo(date(2, 15))
@@ -888,7 +904,8 @@ public class DateRangeTests extends ESIntegTestCase {
         assertThat(min.getValue(), equalTo((double) date(2, 15).getMillis()));
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         client().admin().cluster().prepareHealth("idx_unmapped").setWaitForYellowStatus().execute().actionGet();
 
         SearchResponse response = client().prepareSearch("idx_unmapped")
@@ -936,7 +953,8 @@ public class DateRangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(0l));
     }
 
-    public void testUnmappedWithStringDates() throws Exception {
+    @Test
+    public void unmapped_WithStringDates() throws Exception {
         SearchResponse response = client().prepareSearch("idx_unmapped")
                 .addAggregation(dateRange("range")
                         .field("date")
@@ -982,7 +1000,8 @@ public class DateRangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(0l));
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx", "idx_unmapped")
                 .addAggregation(dateRange("range")
                         .field("date")
@@ -1028,7 +1047,8 @@ public class DateRangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(numDocs - 4l));
     }
 
-    public void testEmptyAggregation() throws Exception {
+    @Test
+    public void emptyAggregation() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0).subAggregation(dateRange("date_range").addRange("0-1", 0, 1)))
@@ -1051,5 +1071,6 @@ public class DateRangeTests extends ESIntegTestCase {
         assertThat(((DateTime) buckets.get(0).getTo()).getMillis(), equalTo(1l));
         assertThat(buckets.get(0).getDocCount(), equalTo(0l));
         assertThat(buckets.get(0).getAggregations().asList().isEmpty(), is(true));
+
     }
 }
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/DoubleTermsTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/DoubleTermsTests.java
index d0de4c7..78398a1 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/DoubleTermsTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/DoubleTermsTests.java
@@ -38,6 +38,7 @@ import org.elasticsearch.search.aggregations.metrics.stats.extended.ExtendedStat
 import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -76,7 +77,7 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     private static final int NUM_DOCS = 5; // TODO: randomize the size?
     private static final String SINGLE_VALUED_FIELD_NAME = "d_value";
     private static final String MULTI_VALUED_FIELD_NAME = "d_values";
@@ -232,8 +233,9 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         return bucket.getKeyAsString();
     }
 
+    @Test
     // the main purpose of this test is to make sure we're not allocating 2GB of memory per shard
-    public void testSizeIsZero() {
+    public void sizeIsZero() {
         SearchResponse response = client().prepareSearch("idx").setTypes("high_card_type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -250,7 +252,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         assertThat(terms.getBuckets().size(), equalTo(100));
     }
 
-    public void testSingleValueField() throws Exception {
+    @Test
+    public void singleValueField() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -274,7 +277,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValueFieldWithMaxSize() throws Exception {
+    @Test
+    public void singleValueField_WithMaxSize() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("high_card_type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -299,8 +303,9 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
             assertThat(bucket.getDocCount(), equalTo(1l));
         }
     }
-
-    public void testSingleValueFieldWithFiltering() throws Exception {
+    
+    @Test
+    public void singleValueFieldWithFiltering() throws Exception {
         double includes[] = { 1, 2, 3, 98.2 };
         double excludes[] = { 2, 4, 99 };
         double empty[] = {};
@@ -329,8 +334,10 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
             assertThat(bucket.getDocCount(), equalTo(1l));
         }
     }
+    
 
-    public void testSingleValueFieldOrderedByTermAsc() throws Exception {
+    @Test
+    public void singleValueField_OrderedByTermAsc() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -356,7 +363,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValueFieldOrderedByTermDesc() throws Exception {
+    @Test
+    public void singleValueField_OrderedByTermDesc() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -382,7 +390,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldWithSubAggregation() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -416,7 +425,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldWithSubAggregationInherited() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation_Inherited() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -444,7 +454,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void singleValuedField_WithValueScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -469,7 +480,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testMultiValuedField() throws Exception {
+    @Test
+    public void multiValuedField() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(MULTI_VALUED_FIELD_NAME)
@@ -497,7 +509,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(MULTI_VALUED_FIELD_NAME)
@@ -526,7 +539,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testMultiValuedFieldWithValueScriptNotUnique() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript_NotUnique() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(MULTI_VALUED_FIELD_NAME)
@@ -566,7 +580,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
 
     */
 
-    public void testMultiValuedFieldWithValueScriptWithInheritedSubAggregator() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript_WithInheritedSubAggregator() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(MULTI_VALUED_FIELD_NAME)
@@ -603,7 +618,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testScriptSingleValue() throws Exception {
+    @Test
+    public void script_SingleValue() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -627,7 +643,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testScriptSingleValueWithSubAggregatorInherited() throws Exception {
+    @Test
+    public void script_SingleValue_WithSubAggregator_Inherited() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -655,7 +672,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void script_MultiValued() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -683,7 +701,9 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testScriptMultiValuedWithAggregatorInheritedNoExplicitType() throws Exception {
+    @Test
+    public void script_MultiValued_WithAggregatorInherited_NoExplicitType() throws Exception {
+
         // since no type is explicitly defined, es will assume all values returned by the script to be strings (bytes),
         // so the aggregation should fail, since the "sum" aggregation can only operation on numeric values.
 
@@ -705,7 +725,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
 
     }
 
-    public void testScriptMultiValuedWithAggregatorInheritedWithExplicitType() throws Exception {
+    @Test
+    public void script_MultiValued_WithAggregatorInherited_WithExplicitType() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .collectMode(randomFrom(SubAggCollectionMode.values()))
@@ -742,7 +763,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx_unmapped").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -759,7 +781,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         assertThat(terms.getBuckets().size(), equalTo(0));
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx_unmapped", "idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -783,7 +806,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testEmptyAggregation() throws Exception {
+    @Test
+    public void emptyAggregation() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(1l).minDocCount(0)
@@ -802,7 +826,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         assertThat(terms.getBuckets().isEmpty(), is(true));
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAsc() throws Exception {
         boolean asc = true;
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -831,7 +856,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscWithSubTermsAgg() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAscWithSubTermsAgg() throws Exception {
         boolean asc = true;
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -876,7 +902,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedBySingleBucketSubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleBucketSubAggregationAsc() throws Exception {
         boolean asc = randomBoolean();
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -913,7 +940,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         assertThat(filter.getDocCount(), equalTo(asc ? 3l : 2l));
     }
 
-    public void testSingleValuedFieldOrderedBySubAggregationAscMultiHierarchyLevels() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySubAggregationAsc_MultiHierarchyLevels() throws Exception {
         boolean asc = randomBoolean();
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -970,7 +998,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         assertThat(max.getValue(), equalTo(asc ? 4.0 : 2.0));
     }
 
-    public void testSingleValuedFieldOrderedByMissingSubAggregation() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMissingSubAggregation() throws Exception {
         for (String index : Arrays.asList("idx", "idx_unmapped")) {
             try {
                 client().prepareSearch(index)
@@ -987,7 +1016,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByNonMetricsOrMultiBucketSubAggregation() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByNonMetricsOrMultiBucketSubAggregation() throws Exception {
         for (String index : Arrays.asList("idx", "idx_unmapped")) {
             try {
                 client().prepareSearch(index)
@@ -1009,7 +1039,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByMultiValuedSubAggregationWithUknownMetric() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValuedSubAggregation_WithUknownMetric() throws Exception {
         for (String index : Arrays.asList("idx", "idx_unmapped")) {
             try {
                 client().prepareSearch(index)
@@ -1028,7 +1059,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByMultiValuedSubAggregationWithoutMetric() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValuedSubAggregation_WithoutMetric() throws Exception {
         for (String index : Arrays.asList("idx", "idx_unmapped")) {
             try {
                 client().prepareSearch(index)
@@ -1047,7 +1079,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationDesc() throws Exception {
         boolean asc = false;
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -1076,9 +1109,11 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
             assertThat(avg, notNullValue());
             assertThat(avg.getValue(), equalTo((double) i));
         }
+
     }
 
-    public void testSingleValuedFieldOrderedByMultiValueSubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValueSubAggregationAsc() throws Exception {
         boolean asc = true;
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -1105,9 +1140,11 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
             assertThat(stats, notNullValue());
             assertThat(stats.getMax(), equalTo((double) i));
         }
+
     }
 
-    public void testSingleValuedFieldOrderedByMultiValueSubAggregationDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValueSubAggregationDesc() throws Exception {
         boolean asc = false;
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -1134,9 +1171,11 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
             assertThat(stats, notNullValue());
             assertThat(stats.getMax(), equalTo((double) i));
         }
+
     }
 
-    public void testSingleValuedFieldOrderedByMultiValueExtendedStatsAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValueExtendedStatsAsc() throws Exception {
         boolean asc = true;
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -1166,7 +1205,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
 
     }
 
-    public void testScriptScore() {
+    @Test
+    public void script_Score() {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -1192,37 +1232,44 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscAndTermsDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAscAndTermsDesc() throws Exception {
         double[] expectedKeys = new double[] { 1, 2, 4, 3, 7, 6, 5 };
         assertMultiSortResponse(expectedKeys, Terms.Order.aggregation("avg_l", true), Terms.Order.term(false));
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscAndTermsAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAscAndTermsAsc() throws Exception {
         double[] expectedKeys = new double[] { 1, 2, 3, 4, 5, 6, 7 };
         assertMultiSortResponse(expectedKeys, Terms.Order.aggregation("avg_l", true), Terms.Order.term(true));
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationDescAndTermsAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationDescAndTermsAsc() throws Exception {
         double[] expectedKeys = new double[] { 5, 6, 7, 3, 4, 2, 1 };
         assertMultiSortResponse(expectedKeys, Terms.Order.aggregation("avg_l", false), Terms.Order.term(true));
     }
 
-    public void testSingleValuedFieldOrderedByCountAscAndSingleValueSubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByCountAscAndSingleValueSubAggregationAsc() throws Exception {
         double[] expectedKeys = new double[] { 6, 7, 3, 4, 5, 1, 2 };
         assertMultiSortResponse(expectedKeys, Terms.Order.count(true), Terms.Order.aggregation("avg_l", true));
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscSingleValueSubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAscSingleValueSubAggregationAsc() throws Exception {
         double[] expectedKeys = new double[] { 6, 7, 3, 5, 4, 1, 2 };
         assertMultiSortResponse(expectedKeys, Terms.Order.aggregation("sum_d", true), Terms.Order.aggregation("avg_l", true));
     }
 
-    public void testSingleValuedFieldOrderedByThreeCriteria() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByThreeCriteria() throws Exception {
         double[] expectedKeys = new double[] { 2, 1, 4, 5, 3, 6, 7 };
         assertMultiSortResponse(expectedKeys, Terms.Order.count(false), Terms.Order.aggregation("sum_d", false), Terms.Order.aggregation("avg_l", false));
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscAsCompound() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAscAsCompound() throws Exception {
         double[] expectedKeys = new double[] { 1, 2, 3, 4, 5, 6, 7 };
         assertMultiSortResponse(expectedKeys, Terms.Order.aggregation("avg_l", true));
     }
@@ -1258,7 +1305,8 @@ public class DoubleTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testOtherDocCount() {
+    @Test
+    public void otherDocCount() {
         testOtherDocCount(SINGLE_VALUED_FIELD_NAME, MULTI_VALUED_FIELD_NAME);
     }
 }
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ExtendedStatsTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ExtendedStatsTests.java
index 67ddc23..47cdc42 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ExtendedStatsTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ExtendedStatsTests.java
@@ -28,6 +28,7 @@ import org.elasticsearch.search.aggregations.bucket.global.Global;
 import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
 import org.elasticsearch.search.aggregations.metrics.AbstractNumericTestCase;
 import org.elasticsearch.search.aggregations.metrics.stats.extended.ExtendedStats;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -48,6 +49,7 @@ import static org.hamcrest.Matchers.sameInstance;
  *
  */
 public class ExtendedStatsTests extends AbstractNumericTestCase {
+    
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
@@ -68,7 +70,9 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testEmptyAggregation() throws Exception {
+
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0).subAggregation(extendedStats("stats")))
@@ -95,6 +99,7 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testUnmapped() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx_unmapped")
                 .setQuery(matchAllQuery())
@@ -119,6 +124,7 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testSingleValuedField() throws Exception {
         double sigma = randomDouble() * randomIntBetween(1, 10);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -142,7 +148,9 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
         checkUpperLowerBounds(stats, sigma);
     }
 
+    @Test
     public void testSingleValuedFieldDefaultSigma() throws Exception {
+
         // Same as previous test, but uses a default value for sigma
 
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -196,7 +204,9 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldGetProperty() throws Exception {
+    @Test
+    public void testSingleValuedField_getProperty() throws Exception {
+
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(global("global").subAggregation(extendedStats("stats").field("value"))).execute().actionGet();
 
@@ -242,7 +252,8 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldPartiallyUnmapped() throws Exception {
+    @Test
+    public void testSingleValuedField_PartiallyUnmapped() throws Exception {
         double sigma = randomDouble() * randomIntBetween(1, 10);
         SearchResponse searchResponse = client().prepareSearch("idx", "idx_unmapped")
                 .setQuery(matchAllQuery())
@@ -266,7 +277,8 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript() throws Exception {
         double sigma = randomDouble() * randomIntBetween(1, 10);
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -290,7 +302,8 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         double sigma = randomDouble() * randomIntBetween(1, 10);
@@ -318,6 +331,7 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testMultiValuedField() throws Exception {
         double sigma = randomDouble() * randomIntBetween(1, 10);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -342,7 +356,8 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript() throws Exception {
         double sigma = randomDouble() * randomIntBetween(1, 10);
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -366,7 +381,8 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         double sigma = randomDouble() * randomIntBetween(1, 10);
@@ -394,7 +410,8 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValued() throws Exception {
+    @Test
+    public void testScript_SingleValued() throws Exception {
         double sigma = randomDouble() * randomIntBetween(1, 10);
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -418,7 +435,8 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_SingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         double sigma = randomDouble() * randomIntBetween(1, 10);
@@ -445,7 +463,8 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_ExplicitSingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         double sigma = randomDouble() * randomIntBetween(1, 10);
@@ -472,7 +491,8 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void testScript_MultiValued() throws Exception {
         double sigma = randomDouble() * randomIntBetween(1, 10);
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -496,7 +516,8 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitMultiValued() throws Exception {
+    @Test
+    public void testScript_ExplicitMultiValued() throws Exception {
         double sigma = randomDouble() * randomIntBetween(1, 10);
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -522,7 +543,8 @@ public class ExtendedStatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValuedWithParams() throws Exception {
+    @Test
+    public void testScript_MultiValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         double sigma = randomDouble() * randomIntBetween(1, 10);
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/FunctionScoreTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/FunctionScoreTests.java
index 22bb778..8b7cdba 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/FunctionScoreTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/FunctionScoreTests.java
@@ -30,6 +30,7 @@ import org.elasticsearch.script.Script;
 import org.elasticsearch.script.groovy.GroovyPlugin;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -51,6 +52,7 @@ import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 
 public class FunctionScoreTests extends ESIntegTestCase {
+
     static final String TYPE = "type";
     static final String INDEX = "index";
 
@@ -58,7 +60,9 @@ public class FunctionScoreTests extends ESIntegTestCase {
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
+    
 
+    @Test
     public void testScriptScoresNested() throws IOException {
         createIndex(INDEX);
         ensureYellow();
@@ -80,6 +84,7 @@ public class FunctionScoreTests extends ESIntegTestCase {
         assertThat(response.getHits().getAt(0).score(), equalTo(1.0f));
     }
 
+    @Test
     public void testScriptScoresWithAgg() throws IOException {
         createIndex(INDEX);
         ensureYellow();
@@ -127,6 +132,7 @@ public class FunctionScoreTests extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testMinScoreFunctionScoreManyDocsAndRandomMinScore() throws IOException, ExecutionException, InterruptedException {
         List<IndexRequestBuilder> docs = new ArrayList<>();
         int numDocs = randomIntBetween(1, 100);
@@ -169,6 +175,7 @@ public class FunctionScoreTests extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testWithEmptyFunctions() throws IOException, ExecutionException, InterruptedException {
         assertAcked(prepareCreate("test"));
         ensureYellow();
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/GeoDistanceTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/GeoDistanceTests.java
index 066645e..4e601c2 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/GeoDistanceTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/GeoDistanceTests.java
@@ -36,6 +36,7 @@ import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.search.sort.SortBuilders;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -65,12 +66,14 @@ import static org.hamcrest.Matchers.equalTo;
 /**
  */
 public class GeoDistanceTests extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
-    public void testSimpleDistance() throws Exception {
+    
+    @Test
+    public void simpleDistanceTests() throws Exception {
         XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("location").field("type", "geo_point").field("lat_lon", true)
                 .startObject("fielddata").field("format", randomNumericFieldDataFormat()).endObject().endObject().endObject()
@@ -222,6 +225,7 @@ public class GeoDistanceTests extends ESIntegTestCase {
         assertOrderedSearchHits(searchResponse, "7", "2", "6", "5", "4", "3", "1");
     }
 
+    @Test
     public void testDistanceSortingMVFields() throws Exception {
         XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject("type1")
                 .startObject("properties").startObject("locations").field("type", "geo_point").field("lat_lon", true)
@@ -356,6 +360,7 @@ public class GeoDistanceTests extends ESIntegTestCase {
                 containsString("sort_mode [sum] isn't supported for sorting by geo distance"));
     }
 
+    @Test
     // Regression bug: https://github.com/elasticsearch/elasticsearch/issues/2851
     public void testDistanceSortingWithMissingGeoPoint() throws Exception {
         XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject("type1")
@@ -403,7 +408,8 @@ public class GeoDistanceTests extends ESIntegTestCase {
         assertThat(((Number) searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(), closeTo(5286d, 10d));
     }
 
-    public void testDistanceScript() throws Exception {
+    @Test
+    public void distanceScriptTests() throws Exception {
         double source_lat = 32.798;
         double source_long = -117.151;
         double target_lat = 32.81;
@@ -483,6 +489,8 @@ public class GeoDistanceTests extends ESIntegTestCase {
                 closeTo(GeoDistance.PLANE.calculate(source_lat, source_long, target_lat, target_long, DistanceUnit.MILES), 0.0001d));
     }
 
+
+    @Test
     public void testDistanceSortingNestedFields() throws Exception {
         XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject("company")
                 .startObject("properties")
@@ -646,6 +654,7 @@ public class GeoDistanceTests extends ESIntegTestCase {
     /**
      * Issue 3073
      */
+    @Test
     public void testGeoDistanceFilter() throws IOException {
         double lat = 40.720611;
         double lon = -73.998776;
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/HDRPercentileRanksTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/HDRPercentileRanksTests.java
index bb6bebb..b22455a 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/HDRPercentileRanksTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/HDRPercentileRanksTests.java
@@ -31,6 +31,7 @@ import org.elasticsearch.search.aggregations.metrics.AbstractNumericTestCase;
 import org.elasticsearch.search.aggregations.metrics.percentiles.Percentile;
 import org.elasticsearch.search.aggregations.metrics.percentiles.PercentileRanks;
 import org.elasticsearch.search.aggregations.metrics.percentiles.PercentilesMethod;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.Collection;
@@ -41,26 +42,22 @@ import java.util.Map;
 
 import static org.elasticsearch.common.util.CollectionUtils.iterableAsArrayList;
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.global;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.histogram;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.percentileRanks;
+import static org.elasticsearch.search.aggregations.AggregationBuilders.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.sameInstance;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class HDRPercentileRanksTests extends AbstractNumericTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     private static double[] randomPercents(long minValue, long maxValue) {
+
         final int length = randomIntBetween(1, 20);
         final double[] percents = new double[length];
         for (int i = 0; i < percents.length; ++i) {
@@ -110,7 +107,9 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testEmptyAggregation() throws Exception {
+
         int sigDigits = randomSignificantDigits();
         SearchResponse searchResponse = client()
                 .prepareSearch("empty_bucket_idx")
@@ -138,6 +137,7 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testUnmapped() throws Exception {
         int sigDigits = randomSignificantDigits();
         SearchResponse searchResponse = client()
@@ -159,6 +159,7 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testSingleValuedField() throws Exception {
         int sigDigits = randomSignificantDigits();
         final double[] pcts = randomPercents(minValue, maxValue);
@@ -176,7 +177,8 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldGetProperty() throws Exception {
+    @Test
+    public void testSingleValuedField_getProperty() throws Exception {
         int sigDigits = randomSignificantDigits();
         final double[] pcts = randomPercents(minValue, maxValue);
         SearchResponse searchResponse = client()
@@ -203,6 +205,7 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
 
     }
 
+    @Test
     public void testSingleValuedFieldOutsideRange() throws Exception {
         int sigDigits = randomSignificantDigits();
         final double[] pcts = new double[] { minValue - 1, maxValue + 1 };
@@ -220,7 +223,8 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldPartiallyUnmapped() throws Exception {
+    @Test
+    public void testSingleValuedField_PartiallyUnmapped() throws Exception {
         int sigDigits = randomSignificantDigits();
         final double[] pcts = randomPercents(minValue, maxValue);
         SearchResponse searchResponse = client()
@@ -237,7 +241,8 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript() throws Exception {
         int sigDigits = randomSignificantDigits();
         final double[] pcts = randomPercents(minValue - 1, maxValue - 1);
         SearchResponse searchResponse = client()
@@ -254,7 +259,8 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript_WithParams() throws Exception {
         int sigDigits = randomSignificantDigits();
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
@@ -274,6 +280,7 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testMultiValuedField() throws Exception {
         int sigDigits = randomSignificantDigits();
         final double[] pcts = randomPercents(minValues, maxValues);
@@ -291,7 +298,8 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript() throws Exception {
         int sigDigits = randomSignificantDigits();
         final double[] pcts = randomPercents(minValues - 1, maxValues - 1);
         SearchResponse searchResponse = client()
@@ -307,7 +315,8 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
         assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1, sigDigits);
     }
 
-    public void testMultiValuedFieldWithValueScriptReverse() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript_Reverse() throws Exception {
         int sigDigits = randomSignificantDigits();
         final double[] pcts = randomPercents(20 - maxValues, 20 - minValues);
         SearchResponse searchResponse = client()
@@ -324,7 +333,8 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript_WithParams() throws Exception {
         int sigDigits = randomSignificantDigits();
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
@@ -344,7 +354,8 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValued() throws Exception {
+    @Test
+    public void testScript_SingleValued() throws Exception {
         int sigDigits = randomSignificantDigits();
         final double[] pcts = randomPercents(minValue, maxValue);
         SearchResponse searchResponse = client()
@@ -361,7 +372,8 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_SingleValued_WithParams() throws Exception {
         int sigDigits = randomSignificantDigits();
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
@@ -381,7 +393,8 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_ExplicitSingleValued_WithParams() throws Exception {
         int sigDigits = randomSignificantDigits();
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
@@ -401,7 +414,8 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void testScript_MultiValued() throws Exception {
         int sigDigits = randomSignificantDigits();
         final double[] pcts = randomPercents(minValues, maxValues);
         SearchResponse searchResponse = client()
@@ -418,7 +432,8 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitMultiValued() throws Exception {
+    @Test
+    public void testScript_ExplicitMultiValued() throws Exception {
         int sigDigits = randomSignificantDigits();
         final double[] pcts = randomPercents(minValues, maxValues);
         SearchResponse searchResponse = client()
@@ -435,7 +450,8 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValuedWithParams() throws Exception {
+    @Test
+    public void testScript_MultiValued_WithParams() throws Exception {
         int sigDigits = randomSignificantDigits();
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
@@ -457,6 +473,7 @@ public class HDRPercentileRanksTests extends AbstractNumericTestCase {
         assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1, sigDigits);
     }
 
+    @Test
     public void testOrderBySubAggregation() {
         int sigDigits = randomSignificantDigits();
         boolean asc = randomBoolean();
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/HDRPercentilesTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/HDRPercentilesTests.java
index c40b0fd..07e9d10 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/HDRPercentilesTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/HDRPercentilesTests.java
@@ -32,6 +32,7 @@ import org.elasticsearch.search.aggregations.metrics.AbstractNumericTestCase;
 import org.elasticsearch.search.aggregations.metrics.percentiles.Percentile;
 import org.elasticsearch.search.aggregations.metrics.percentiles.Percentiles;
 import org.elasticsearch.search.aggregations.metrics.percentiles.PercentilesMethod;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.Collection;
@@ -41,26 +42,20 @@ import java.util.List;
 import java.util.Map;
 
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.global;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.histogram;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.percentiles;
+import static org.elasticsearch.search.aggregations.AggregationBuilders.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.hamcrest.Matchers.closeTo;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.sameInstance;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class HDRPercentilesTests extends AbstractNumericTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     private static double[] randomPercentiles() {
         final int length = randomIntBetween(1, 20);
         final double[] percentiles = new double[length];
@@ -111,6 +106,7 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testEmptyAggregation() throws Exception {
         int sigDigits = randomSignificantDigits();
         SearchResponse searchResponse = client()
@@ -140,6 +136,7 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testUnmapped() throws Exception {
         int sigDigits = randomSignificantDigits();
         SearchResponse searchResponse = client()
@@ -161,6 +158,7 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testSingleValuedField() throws Exception {
         final double[] pcts = randomPercentiles();
         int sigDigits = randomIntBetween(1, 5);
@@ -179,7 +177,8 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldGetProperty() throws Exception {
+    @Test
+    public void testSingleValuedField_getProperty() throws Exception {
         final double[] pcts = randomPercentiles();
         int sigDigits = randomSignificantDigits();
         SearchResponse searchResponse = client()
@@ -208,7 +207,8 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldPartiallyUnmapped() throws Exception {
+    @Test
+    public void testSingleValuedField_PartiallyUnmapped() throws Exception {
         final double[] pcts = randomPercentiles();
         int sigDigits = randomSignificantDigits();
         SearchResponse searchResponse = client()
@@ -226,7 +226,8 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript() throws Exception {
         final double[] pcts = randomPercentiles();
         int sigDigits = randomSignificantDigits();
         SearchResponse searchResponse = client()
@@ -243,7 +244,8 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         final double[] pcts = randomPercentiles();
@@ -263,6 +265,7 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testMultiValuedField() throws Exception {
         final double[] pcts = randomPercentiles();
         int sigDigits = randomSignificantDigits();
@@ -281,7 +284,8 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript() throws Exception {
         final double[] pcts = randomPercentiles();
         int sigDigits = randomSignificantDigits();
         SearchResponse searchResponse = client()
@@ -297,7 +301,8 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
         assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1, sigDigits);
     }
 
-    public void testMultiValuedFieldWithValueScriptReverse() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript_Reverse() throws Exception {
         final double[] pcts = randomPercentiles();
         int sigDigits = randomSignificantDigits();
         SearchResponse searchResponse = client()
@@ -314,7 +319,8 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         final double[] pcts = randomPercentiles();
@@ -334,7 +340,8 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValued() throws Exception {
+    @Test
+    public void testScript_SingleValued() throws Exception {
         final double[] pcts = randomPercentiles();
         int sigDigits = randomSignificantDigits();
         SearchResponse searchResponse = client()
@@ -351,7 +358,8 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_SingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         final double[] pcts = randomPercentiles();
@@ -371,7 +379,8 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_ExplicitSingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         final double[] pcts = randomPercentiles();
@@ -391,7 +400,8 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void testScript_MultiValued() throws Exception {
         final double[] pcts = randomPercentiles();
         int sigDigits = randomSignificantDigits();
         SearchResponse searchResponse = client()
@@ -408,7 +418,8 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitMultiValued() throws Exception {
+    @Test
+    public void testScript_ExplicitMultiValued() throws Exception {
         final double[] pcts = randomPercentiles();
         int sigDigits = randomSignificantDigits();
         SearchResponse searchResponse = client()
@@ -425,7 +436,8 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValuedWithParams() throws Exception {
+    @Test
+    public void testScript_MultiValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         final double[] pcts = randomPercentiles();
@@ -447,6 +459,7 @@ public class HDRPercentilesTests extends AbstractNumericTestCase {
         assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1, sigDigits);
     }
 
+    @Test
     public void testOrderBySubAggregation() {
         int sigDigits = randomSignificantDigits();
         boolean asc = randomBoolean();
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/HistogramTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/HistogramTests.java
index d679983..e36e38e 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/HistogramTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/HistogramTests.java
@@ -36,6 +36,7 @@ import org.elasticsearch.search.aggregations.metrics.stats.Stats;
 import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -78,7 +79,7 @@ public class HistogramTests extends ESIntegTestCase {
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     @Override
     public void setupSuiteScopeCluster() throws Exception {
         createIndex("idx");
@@ -127,7 +128,8 @@ public class HistogramTests extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testSingleValuedField() throws Exception {
+    @Test
+    public void singleValuedField() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval))
                 .execute().actionGet();
@@ -180,7 +182,8 @@ public class HistogramTests extends ESIntegTestCase {
      * Shift buckets by random offset between [2..interval]. From setup we have 1 doc per values from 1..numdocs.
      * Special care needs to be taken for expecations on counts in first and last bucket.
      */
-    public void testSingleValuedFieldWithRandomOffset() throws Exception {
+    @Test
+    public void singleValuedField_withRandomOffset() throws Exception {
         int offset = randomIntBetween(2, interval);
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -215,7 +218,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByKeyAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByKeyAsc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).order(Histogram.Order.KEY_ASC))
                 .execute().actionGet();
@@ -238,7 +242,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testsingleValuedFieldOrderedByKeyDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByKeyDesc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).order(Histogram.Order.KEY_DESC))
                 .execute().actionGet();
@@ -261,7 +266,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByCountAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByCountAsc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).order(Histogram.Order.COUNT_ASC))
                 .execute().actionGet();
@@ -290,7 +296,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByCountDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByCountDesc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).order(Histogram.Order.COUNT_DESC))
                 .execute().actionGet();
@@ -319,7 +326,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldWithSubAggregation() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval)
                         .subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -359,7 +367,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldWithSubAggregationInherited() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation_Inherited() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval)
                         .subAggregation(sum("sum")))
@@ -393,7 +402,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedBySubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySubAggregationAsc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).order(Histogram.Order.aggregation("sum", true))
                         .subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -433,7 +443,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedBySubAggregationDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySubAggregationDesc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).order(Histogram.Order.aggregation("sum", false))
                         .subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)))
@@ -473,7 +484,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByMultiValuedSubAggregationAscInherited() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValuedSubAggregationAsc_Inherited() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).order(Histogram.Order.aggregation("stats.sum", true))
                         .subAggregation(stats("stats")))
@@ -513,7 +525,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByMultiValuedSubAggregationDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValuedSubAggregationDesc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).order(Histogram.Order.aggregation("stats.sum", false))
                         .subAggregation(stats("stats").field(SINGLE_VALUED_FIELD_NAME)))
@@ -553,7 +566,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedBySubAggregationDescDeepOrderPath() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySubAggregationDesc_DeepOrderPath() throws Exception {
         boolean asc = randomBoolean();
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).order(Histogram.Order.aggregation("filter>max", asc))
@@ -591,7 +605,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void singleValuedField_WithValueScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).script(new Script("_value + 1")).interval(interval))
                 .execute().actionGet();
@@ -619,7 +634,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testMultiValuedField() throws Exception {
+    @Test
+    public void multiValuedField() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(MULTI_VALUED_FIELD_NAME).interval(interval))
                 .execute().actionGet();
@@ -641,7 +657,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testMultiValuedFieldOrderedByKeyDesc() throws Exception {
+    @Test
+    public void multiValuedField_OrderedByKeyDesc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(MULTI_VALUED_FIELD_NAME).interval(interval).order(Histogram.Order.KEY_DESC))
                 .execute().actionGet();
@@ -664,7 +681,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").field(MULTI_VALUED_FIELD_NAME).script(new Script("_value + 1")).interval(interval))
                 .execute().actionGet();
@@ -697,7 +715,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testMultiValuedFieldWithValueScriptWithInheritedSubAggregator() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript_WithInheritedSubAggregator() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(
                         histogram("histo")
@@ -746,7 +765,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testScriptSingleValue() throws Exception {
+    @Test
+    public void script_SingleValue() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").script(new Script("doc['" + SINGLE_VALUED_FIELD_NAME + "'].value")).interval(interval))
                 .execute().actionGet();
@@ -767,7 +787,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testScriptSingleValueWithSubAggregatorInherited() throws Exception {
+    @Test
+    public void script_SingleValue_WithSubAggregator_Inherited() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -801,7 +822,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void script_MultiValued() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(histogram("histo").script(new Script("doc['" + MULTI_VALUED_FIELD_NAME + "']")).interval(interval))
                 .execute().actionGet();
@@ -822,7 +844,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testScriptMultiValuedWithAggregatorInherited() throws Exception {
+    @Test
+    public void script_MultiValued_WithAggregatorInherited() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -856,7 +879,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx_unmapped")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval))
                 .execute().actionGet();
@@ -870,7 +894,8 @@ public class HistogramTests extends ESIntegTestCase {
         assertThat(histo.getBuckets().size(), equalTo(0));
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx", "idx_unmapped")
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval))
                 .execute().actionGet();
@@ -892,7 +917,8 @@ public class HistogramTests extends ESIntegTestCase {
         }
     }
 
-    public void testEmptyAggregation() throws Exception {
+    @Test
+    public void emptyAggregation() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(1l).minDocCount(0)
@@ -912,7 +938,8 @@ public class HistogramTests extends ESIntegTestCase {
         assertThat(histo.getBuckets().isEmpty(), is(true));
     }
 
-    public void testSingleValuedFieldWithExtendedBounds() throws Exception {
+    @Test
+    public void singleValuedField_WithExtendedBounds() throws Exception {
         int lastDataBucketKey = (numValueBuckets - 1) * interval;
 
         // randomizing the number of buckets on the min bound
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IPv4RangeTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IPv4RangeTests.java
index b93d090..7ade58c 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IPv4RangeTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IPv4RangeTests.java
@@ -31,6 +31,7 @@ import org.elasticsearch.search.aggregations.metrics.max.Max;
 import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -60,7 +61,7 @@ public class IPv4RangeTests extends ESIntegTestCase {
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     @Override
     public void setupSuiteScopeCluster() throws Exception {
         {
@@ -121,7 +122,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testSingleValueField() throws Exception {
+    @Test
+    public void singleValueField() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(ipRange("range")
                         .field("ip")
@@ -141,25 +143,25 @@ public class IPv4RangeTests extends ESIntegTestCase {
 
         Range.Bucket bucket = buckets.get(0);
         assertThat(bucket, notNullValue());
-        assertThat((String) bucket.getKey(), equalTo("*-10.0.0.100"));
-        assertThat(((Number) bucket.getFrom()).doubleValue(), equalTo(Double.NEGATIVE_INFINITY));
+        assertThat((String) (String) bucket.getKey(), equalTo("*-10.0.0.100"));
+        assertThat(((Number) ((Number) bucket.getFrom())).doubleValue(), equalTo(Double.NEGATIVE_INFINITY));
         assertThat(bucket.getFromAsString(), nullValue());
         assertThat(bucket.getToAsString(), equalTo("10.0.0.100"));
-        assertThat(((Number) bucket.getTo()).doubleValue(), equalTo((double) IpFieldMapper.ipToLong("10.0.0.100")));
+        assertThat(((Number) ((Number) bucket.getTo())).doubleValue(), equalTo((double) IpFieldMapper.ipToLong("10.0.0.100")));
         assertThat(bucket.getDocCount(), equalTo(100l));
 
         bucket = buckets.get(1);
         assertThat(bucket, notNullValue());
-        assertThat((String) bucket.getKey(), equalTo("10.0.0.100-10.0.0.200"));
+        assertThat((String) (String) bucket.getKey(), equalTo("10.0.0.100-10.0.0.200"));
         assertThat(bucket.getFromAsString(), equalTo("10.0.0.100"));
-        assertThat(((Number) bucket.getFrom()).doubleValue(), equalTo((double) IpFieldMapper.ipToLong("10.0.0.100")));
+        assertThat(((Number) ((Number) bucket.getFrom())).doubleValue(), equalTo((double) IpFieldMapper.ipToLong("10.0.0.100")));
         assertThat(bucket.getToAsString(), equalTo("10.0.0.200"));
-        assertThat(((Number) bucket.getTo()).doubleValue(), equalTo((double) IpFieldMapper.ipToLong("10.0.0.200")));
+        assertThat(((Number) ((Number) bucket.getTo())).doubleValue(), equalTo((double) IpFieldMapper.ipToLong("10.0.0.200")));
         assertThat(bucket.getDocCount(), equalTo(100l));
 
         bucket = buckets.get(2);
         assertThat(bucket, notNullValue());
-        assertThat((String) bucket.getKey(), equalTo("10.0.0.200-*"));
+        assertThat((String) (String) bucket.getKey(), equalTo("10.0.0.200-*"));
         assertThat(bucket.getFromAsString(), equalTo("10.0.0.200"));
         assertThat(((Number) bucket.getFrom()).doubleValue(), equalTo((double) IpFieldMapper.ipToLong("10.0.0.200")));
         assertThat(((Number) bucket.getTo()).doubleValue(), equalTo(Double.POSITIVE_INFINITY));
@@ -167,7 +169,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(55l));
     }
 
-    public void testSingleValueFieldWithMaskRange() throws Exception {
+    @Test
+    public void singleValueField_WithMaskRange() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(ipRange("range")
                         .field("ip")
@@ -203,7 +206,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(127l)); // include 10.0.0.128
     }
 
-    public void testSingleValueFieldWithCustomKey() throws Exception {
+    @Test
+    public void singleValueField_WithCustomKey() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(ipRange("range")
                         .field("ip")
@@ -249,7 +253,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(55l));
     }
 
-    public void testSingleValuedFieldWithSubAggregation() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(ipRange("range")
                         .field("ip")
@@ -317,7 +322,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
         assertThat((double) propertiesCounts[2], equalTo((double) 55 * 3));
     }
 
-    public void testSingleValuedFieldWithSubAggregationInherited() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation_Inherited() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(ipRange("range")
                         .field("ip")
@@ -373,7 +379,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
         assertThat(max.getValue(), equalTo((double) IpFieldMapper.ipToLong("10.0.0.254")));
     }
 
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void singleValuedField_WithValueScript() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -433,7 +440,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
     [255, 256]
      */
 
-    public void testMultiValuedField() throws Exception {
+    @Test
+    public void multiValuedField() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(ipRange("range")
                         .field("ips")
@@ -479,7 +487,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(56l));
     }
 
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -523,7 +532,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(56l));
     }
 
-    public void testMultiValuedFieldWithValueScriptWithInheritedSubAggregator() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript_WithInheritedSubAggregator() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -576,7 +586,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
         assertThat((long) max.getValue(), equalTo(IpFieldMapper.ipToLong("10.0.0.255")));
     }
 
-    public void testScriptSingleValue() throws Exception {
+    @Test
+    public void script_SingleValue() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -620,7 +631,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(55l));
     }
 
-    public void testScriptSingleValueWithSubAggregatorInherited() throws Exception {
+    @Test
+    public void script_SingleValue_WithSubAggregator_Inherited() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -674,7 +686,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
         assertThat(max.getValue(), equalTo((double) IpFieldMapper.ipToLong("10.0.0.254")));
     }
 
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void script_MultiValued() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -718,7 +731,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(56l));
     }
 
-    public void testScriptMultiValuedWithAggregatorInherited() throws Exception {
+    @Test
+    public void script_MultiValued_WithAggregatorInherited() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -772,7 +786,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
         assertThat((long) max.getValue(), equalTo(IpFieldMapper.ipToLong("10.0.0.255")));
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx_unmapped")
                 .addAggregation(ipRange("range")
                         .field("ip")
@@ -818,7 +833,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(0l));
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx", "idx_unmapped")
                 .addAggregation(ipRange("range")
                         .field("ip")
@@ -864,7 +880,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(55l));
     }
 
-    public void testEmptyAggregation() throws Exception {
+    @Test
+    public void emptyAggregation() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0)
@@ -889,7 +906,8 @@ public class IPv4RangeTests extends ESIntegTestCase {
         assertThat(buckets.get(0).getDocCount(), equalTo(0l));
     }
 
-    public void testMask0() {
+    @Test
+    public void mask0() {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(ipRange("range")
                         .field("ip")
@@ -912,7 +930,10 @@ public class IPv4RangeTests extends ESIntegTestCase {
         assertEquals(255l, bucket.getDocCount());
     }
 
-    public void testMask0SpecialIps() {
+
+    @Test
+    public void mask0SpecialIps() {
+
         SearchResponse response = client().prepareSearch("range_idx")
                 .addAggregation(ipRange("range")
                         .field("ip")
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IndexLookupTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IndexLookupTests.java
index f972f3b..b1c2a33 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IndexLookupTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IndexLookupTests.java
@@ -33,6 +33,7 @@ import org.elasticsearch.script.groovy.GroovyPlugin;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -48,6 +49,7 @@ import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitC
 import static org.hamcrest.Matchers.equalTo;
 
 public class IndexLookupTests extends ESIntegTestCase {
+
     String includeAllFlag = "_FREQUENCIES | _OFFSETS | _PAYLOADS | _POSITIONS | _CACHE";
     String includeAllWithoutRecordFlag = "_FREQUENCIES | _OFFSETS | _PAYLOADS | _POSITIONS ";
     private HashMap<String, List<Object>> expectedEndOffsetsArray;
@@ -60,7 +62,7 @@ public class IndexLookupTests extends ESIntegTestCase {
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     void initTestData() throws InterruptedException, ExecutionException, IOException {
         emptyArray = new HashMap<>();
         List<Object> empty1 = new ArrayList<>();
@@ -152,7 +154,9 @@ public class IndexLookupTests extends ESIntegTestCase {
         ensureGreen();
     }
 
+    @Test
     public void testTwoScripts() throws Exception {
+
         initTestData();
 
         // check term frequencies for 'a'
@@ -172,7 +176,9 @@ public class IndexLookupTests extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testCallWithDifferentFlagsFails() throws Exception {
+
         initTestData();
 
         // should throw an exception, we cannot call with different flags twice
@@ -206,7 +212,9 @@ public class IndexLookupTests extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testDocumentationExample() throws Exception {
+
         initTestData();
 
         Script script = new Script("term = _index['float_payload_field'].get('b'," + includeAllFlag
@@ -229,7 +237,9 @@ public class IndexLookupTests extends ESIntegTestCase {
         checkValueInEachDoc(script, zeroArray, 3);
     }
 
+    @Test
     public void testIteratorAndRecording() throws Exception {
+
         initTestData();
 
         // call twice with record: should work as expected
@@ -290,7 +300,9 @@ public class IndexLookupTests extends ESIntegTestCase {
         return new Script(script);
     }
 
+    @Test
     public void testFlags() throws Exception {
+
         initTestData();
 
         // check default flag
@@ -397,6 +409,7 @@ public class IndexLookupTests extends ESIntegTestCase {
         assertThat(nullCounter, equalTo(expectedArray.size()));
     }
 
+    @Test
     public void testAllExceptPosAndOffset() throws Exception {
         XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties")
                 .startObject("float_payload_field").field("type", "string").field("index_options", "offsets").field("term_vector", "no")
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IndexedScriptTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IndexedScriptTests.java
index a3a786a..d5c2f55 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IndexedScriptTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IndexedScriptTests.java
@@ -26,17 +26,18 @@ import org.elasticsearch.action.indexedscripts.put.PutIndexedScriptResponse;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.TimeValue;
-import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.script.Script;
 import org.elasticsearch.script.ScriptService;
-import org.elasticsearch.script.ScriptService.ScriptType;
 import org.elasticsearch.script.groovy.GroovyPlugin;
+import org.elasticsearch.index.query.QueryBuilders;
+import org.elasticsearch.script.ScriptService.ScriptType;
 import org.elasticsearch.script.groovy.GroovyScriptEngineService;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.search.aggregations.AggregationBuilders;
 import org.elasticsearch.search.builder.SearchSourceBuilder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -52,6 +53,7 @@ import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.notNullValue;
 
 public class IndexedScriptTests extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
@@ -71,6 +73,7 @@ public class IndexedScriptTests extends ESIntegTestCase {
         return builder.build();
     }
 
+    @Test
     public void testFieldIndexedScript()  throws ExecutionException, InterruptedException {
         List<IndexRequestBuilder> builders = new ArrayList<>();
         builders.add(client().prepareIndex(ScriptService.SCRIPT_INDEX, "groovy", "script1").setSource("{" +
@@ -109,6 +112,7 @@ public class IndexedScriptTests extends ESIntegTestCase {
     }
 
     // Relates to #10397
+    @Test
     public void testUpdateScripts() {
         createIndex("test_index");
         ensureGreen("test_index");
@@ -117,7 +121,7 @@ public class IndexedScriptTests extends ESIntegTestCase {
 
         int iterations = randomIntBetween(2, 11);
         for (int i = 1; i < iterations; i++) {
-            PutIndexedScriptResponse response =
+            PutIndexedScriptResponse response = 
                     client().preparePutIndexedScript(GroovyScriptEngineService.NAME, "script1", "{\"script\":\"" + i + "\"}").get();
             assertEquals(i, response.getVersion());
             SearchResponse searchResponse = client()
@@ -132,6 +136,7 @@ public class IndexedScriptTests extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testDisabledUpdateIndexedScriptsOnly() {
         if (randomBoolean()) {
             client().preparePutIndexedScript(GroovyScriptEngineService.NAME, "script1", "{\"script\":\"2\"}").get();
@@ -150,6 +155,7 @@ public class IndexedScriptTests extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testDisabledAggsDynamicScripts() {
         //dynamic scripts don't need to be enabled for an indexed script to be indexed and later on executed
         if (randomBoolean()) {
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IndicesRequestTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IndicesRequestTests.java
index 86d1755..147de1e 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IndicesRequestTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IndicesRequestTests.java
@@ -31,6 +31,8 @@ import org.elasticsearch.action.admin.indices.delete.DeleteIndexAction;
 import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;
 import org.elasticsearch.action.admin.indices.flush.FlushRequest;
 import org.elasticsearch.action.admin.indices.flush.TransportShardFlushAction;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeAction;
+import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeRequest;
 import org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsAction;
 import org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsRequest;
 import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsAction;
@@ -39,8 +41,6 @@ import org.elasticsearch.action.admin.indices.mapping.put.PutMappingAction;
 import org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;
 import org.elasticsearch.action.admin.indices.open.OpenIndexAction;
 import org.elasticsearch.action.admin.indices.open.OpenIndexRequest;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeAction;
-import org.elasticsearch.action.admin.indices.optimize.OptimizeRequest;
 import org.elasticsearch.action.admin.indices.recovery.RecoveryAction;
 import org.elasticsearch.action.admin.indices.recovery.RecoveryRequest;
 import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;
@@ -98,36 +98,22 @@ import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.threadpool.ThreadPool;
-import org.elasticsearch.transport.Transport;
-import org.elasticsearch.transport.TransportChannel;
-import org.elasticsearch.transport.TransportModule;
-import org.elasticsearch.transport.TransportRequest;
-import org.elasticsearch.transport.TransportRequestHandler;
-import org.elasticsearch.transport.TransportService;
+import org.elasticsearch.transport.*;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
+import java.util.concurrent.Callable;
 import java.util.function.Supplier;
 
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.hamcrest.Matchers.emptyIterable;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.hasItem;
-import static org.hamcrest.Matchers.instanceOf;
+import static org.hamcrest.Matchers.*;
 
 @ClusterScope(scope = Scope.SUITE, numClientNodes = 1, minNumDataNodes = 2)
 public class IndicesRequestTests extends ESIntegTestCase {
+
     private final List<String> indices = new ArrayList<>();
 
     @Override
@@ -173,6 +159,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         indices.clear();
     }
 
+    @Test
     public void testGetFieldMappings() {
         String getFieldMappingsShardAction = GetFieldMappingsAction.NAME + "[index][s]";
         interceptTransportActions(getFieldMappingsShardAction);
@@ -185,6 +172,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(getFieldMappingsRequest, getFieldMappingsShardAction);
     }
 
+    @Test
     public void testAnalyze() {
         String analyzeShardAction = AnalyzeAction.NAME + "[s]";
         interceptTransportActions(analyzeShardAction);
@@ -197,6 +185,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(analyzeRequest, analyzeShardAction);
     }
 
+    @Test
     public void testIndex() {
         String[] indexShardActions = new String[]{IndexAction.NAME, IndexAction.NAME + "[r]"};
         interceptTransportActions(indexShardActions);
@@ -208,6 +197,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(indexRequest, indexShardActions);
     }
 
+    @Test
     public void testDelete() {
         String[] deleteShardActions = new String[]{DeleteAction.NAME, DeleteAction.NAME + "[r]"};
         interceptTransportActions(deleteShardActions);
@@ -219,6 +209,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(deleteRequest, deleteShardActions);
     }
 
+    @Test
     public void testUpdate() {
         //update action goes to the primary, index op gets executed locally, then replicated
         String[] updateShardActions = new String[]{UpdateAction.NAME + "[s]", IndexAction.NAME + "[r]"};
@@ -234,6 +225,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(updateRequest, updateShardActions);
     }
 
+    @Test
     public void testUpdateUpsert() {
         //update action goes to the primary, index op gets executed locally, then replicated
         String[] updateShardActions = new String[]{UpdateAction.NAME + "[s]", IndexAction.NAME + "[r]"};
@@ -248,6 +240,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(updateRequest, updateShardActions);
     }
 
+    @Test
     public void testUpdateDelete() {
         //update action goes to the primary, delete op gets executed locally, then replicated
         String[] updateShardActions = new String[]{UpdateAction.NAME + "[s]", DeleteAction.NAME + "[r]"};
@@ -263,6 +256,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(updateRequest, updateShardActions);
     }
 
+    @Test
     public void testBulk() {
         String[] bulkShardActions = new String[]{BulkAction.NAME + "[s]", BulkAction.NAME + "[s][r]"};
         interceptTransportActions(bulkShardActions);
@@ -294,6 +288,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertIndicesSubset(indices, bulkShardActions);
     }
 
+    @Test
     public void testGet() {
         String getShardAction = GetAction.NAME + "[s]";
         interceptTransportActions(getShardAction);
@@ -305,6 +300,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(getRequest, getShardAction);
     }
 
+    @Test
     public void testExplain() {
         String explainShardAction = ExplainAction.NAME + "[s]";
         interceptTransportActions(explainShardAction);
@@ -316,6 +312,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(explainRequest, explainShardAction);
     }
 
+    @Test
     public void testTermVector() {
         String termVectorShardAction = TermVectorsAction.NAME + "[s]";
         interceptTransportActions(termVectorShardAction);
@@ -327,6 +324,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(termVectorsRequest, termVectorShardAction);
     }
 
+    @Test
     public void testMultiTermVector() {
         String multiTermVectorsShardAction = MultiTermVectorsAction.NAME + "[shard][s]";
         interceptTransportActions(multiTermVectorsShardAction);
@@ -345,6 +343,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertIndicesSubset(indices, multiTermVectorsShardAction);
     }
 
+    @Test
     public void testMultiGet() {
         String multiGetShardAction = MultiGetAction.NAME + "[shard][s]";
         interceptTransportActions(multiGetShardAction);
@@ -363,6 +362,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertIndicesSubset(indices, multiGetShardAction);
     }
 
+    @Test
     public void testExists() {
         String existsShardAction = ExistsAction.NAME + "[s]";
         interceptTransportActions(existsShardAction);
@@ -374,6 +374,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(existsRequest, existsShardAction);
     }
 
+    @Test
     public void testFlush() {
         String[] indexShardActions = new String[]{TransportShardFlushAction.NAME + "[r]", TransportShardFlushAction.NAME};
         interceptTransportActions(indexShardActions);
@@ -386,17 +387,19 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertIndicesSubset(Arrays.asList(indices), indexShardActions);
     }
 
-    public void testOptimize() {
-        String optimizeShardAction = OptimizeAction.NAME + "[n]";
-        interceptTransportActions(optimizeShardAction);
+    @Test
+    public void testForceMerge() {
+        String mergeShardAction = ForceMergeAction.NAME + "[n]";
+        interceptTransportActions(mergeShardAction);
 
-        OptimizeRequest optimizeRequest = new OptimizeRequest(randomIndicesOrAliases());
-        internalCluster().clientNodeClient().admin().indices().optimize(optimizeRequest).actionGet();
+        ForceMergeRequest mergeRequest = new ForceMergeRequest(randomIndicesOrAliases());
+        internalCluster().clientNodeClient().admin().indices().forceMerge(mergeRequest).actionGet();
 
         clearInterceptedActions();
-        assertSameIndices(optimizeRequest, optimizeShardAction);
+        assertSameIndices(mergeRequest, mergeShardAction);
     }
 
+    @Test
     public void testRefresh() {
         String[] indexShardActions = new String[]{TransportShardRefreshAction.NAME + "[r]", TransportShardRefreshAction.NAME};
         interceptTransportActions(indexShardActions);
@@ -409,6 +412,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertIndicesSubset(Arrays.asList(indices), indexShardActions);
     }
 
+    @Test
     public void testClearCache() {
         String clearCacheAction = ClearIndicesCacheAction.NAME + "[n]";
         interceptTransportActions(clearCacheAction);
@@ -420,6 +424,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(clearIndicesCacheRequest, clearCacheAction);
     }
 
+    @Test
     public void testRecovery() {
         String recoveryAction = RecoveryAction.NAME + "[n]";
         interceptTransportActions(recoveryAction);
@@ -431,6 +436,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(recoveryRequest, recoveryAction);
     }
 
+    @Test
     public void testSegments() {
         String segmentsAction = IndicesSegmentsAction.NAME + "[n]";
         interceptTransportActions(segmentsAction);
@@ -442,6 +448,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(segmentsRequest, segmentsAction);
     }
 
+    @Test
     public void testIndicesStats() {
         String indicesStats = IndicesStatsAction.NAME + "[n]";
         interceptTransportActions(indicesStats);
@@ -453,6 +460,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(indicesStatsRequest, indicesStats);
     }
 
+    @Test
     public void testSuggest() {
         String suggestAction = SuggestAction.NAME + "[s]";
         interceptTransportActions(suggestAction);
@@ -464,6 +472,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(suggestRequest, suggestAction);
     }
 
+    @Test
     public void testValidateQuery() {
         String validateQueryShardAction = ValidateQueryAction.NAME + "[s]";
         interceptTransportActions(validateQueryShardAction);
@@ -475,6 +484,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(validateQueryRequest, validateQueryShardAction);
     }
 
+    @Test
     public void testPercolate() {
         String percolateShardAction = PercolateAction.NAME + "[s]";
         interceptTransportActions(percolateShardAction);
@@ -493,6 +503,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(percolateRequest, percolateShardAction);
     }
 
+    @Test
     public void testMultiPercolate() {
         String multiPercolateShardAction = MultiPercolateAction.NAME + "[shard][s]";
         interceptTransportActions(multiPercolateShardAction);
@@ -520,6 +531,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertIndicesSubset(indices, multiPercolateShardAction);
     }
 
+    @Test
     public void testOpenIndex() {
         interceptTransportActions(OpenIndexAction.NAME);
 
@@ -530,6 +542,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(openIndexRequest, OpenIndexAction.NAME);
     }
 
+    @Test
     public void testCloseIndex() {
         interceptTransportActions(CloseIndexAction.NAME);
 
@@ -540,6 +553,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(closeIndexRequest, CloseIndexAction.NAME);
     }
 
+    @Test
     public void testDeleteIndex() {
         interceptTransportActions(DeleteIndexAction.NAME);
 
@@ -551,6 +565,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(deleteIndexRequest, DeleteIndexAction.NAME);
     }
 
+    @Test
     public void testGetMappings() {
         interceptTransportActions(GetMappingsAction.NAME);
 
@@ -561,6 +576,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(getMappingsRequest, GetMappingsAction.NAME);
     }
 
+    @Test
     public void testPutMapping() {
         interceptTransportActions(PutMappingAction.NAME);
 
@@ -571,6 +587,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(putMappingRequest, PutMappingAction.NAME);
     }
 
+    @Test
     public void testGetSettings() {
         interceptTransportActions(GetSettingsAction.NAME);
 
@@ -581,6 +598,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(getSettingsRequest, GetSettingsAction.NAME);
     }
 
+    @Test
     public void testUpdateSettings() {
         interceptTransportActions(UpdateSettingsAction.NAME);
 
@@ -591,6 +609,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndices(updateSettingsRequest, UpdateSettingsAction.NAME);
     }
 
+    @Test
     public void testSearchQueryThenFetch() throws Exception {
         interceptTransportActions(SearchServiceTransportAction.QUERY_ACTION_NAME,
                 SearchServiceTransportAction.FETCH_ID_ACTION_NAME, SearchServiceTransportAction.FREE_CONTEXT_ACTION_NAME);
@@ -612,6 +631,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndicesOptionalRequests(searchRequest, SearchServiceTransportAction.FREE_CONTEXT_ACTION_NAME);
     }
 
+    @Test
     public void testSearchDfsQueryThenFetch() throws Exception {
         interceptTransportActions(SearchServiceTransportAction.DFS_ACTION_NAME, SearchServiceTransportAction.QUERY_ID_ACTION_NAME,
                 SearchServiceTransportAction.FETCH_ID_ACTION_NAME, SearchServiceTransportAction.FREE_CONTEXT_ACTION_NAME);
@@ -634,6 +654,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndicesOptionalRequests(searchRequest, SearchServiceTransportAction.FREE_CONTEXT_ACTION_NAME);
     }
 
+    @Test
     public void testSearchQueryAndFetch() throws Exception {
         interceptTransportActions(SearchServiceTransportAction.QUERY_FETCH_ACTION_NAME,
                 SearchServiceTransportAction.FREE_CONTEXT_ACTION_NAME);
@@ -655,6 +676,7 @@ public class IndicesRequestTests extends ESIntegTestCase {
         assertSameIndicesOptionalRequests(searchRequest, SearchServiceTransportAction.FREE_CONTEXT_ACTION_NAME);
     }
 
+    @Test
     public void testSearchDfsQueryAndFetch() throws Exception {
         interceptTransportActions(SearchServiceTransportAction.QUERY_QUERY_FETCH_ACTION_NAME,
                 SearchServiceTransportAction.FREE_CONTEXT_ACTION_NAME);
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/LongTermsTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/LongTermsTests.java
index 638d923..8657534 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/LongTermsTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/LongTermsTests.java
@@ -37,6 +37,7 @@ import org.elasticsearch.search.aggregations.metrics.stats.extended.ExtendedStat
 import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -74,7 +75,7 @@ public class LongTermsTests extends AbstractTermsTestCase {
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     private static final int NUM_DOCS = 5; // TODO randomize the size?
     private static final String SINGLE_VALUED_FIELD_NAME = "l_value";
     private static final String MULTI_VALUED_FIELD_NAME = "l_values";
@@ -234,8 +235,9 @@ public class LongTermsTests extends AbstractTermsTestCase {
         return bucket.getKeyAsString();
     }
 
+    @Test
     // the main purpose of this test is to make sure we're not allocating 2GB of memory per shard
-    public void testSizeIsZero() {
+    public void sizeIsZero() {
         SearchResponse response = client().prepareSearch("idx").setTypes("high_card_type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -252,7 +254,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         assertThat(terms.getBuckets().size(), equalTo(100));
     }
 
-    public void testSingleValueField() throws Exception {
+    @Test
+    public void singleValueField() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -276,7 +279,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValueFieldWithFiltering() throws Exception {
+    @Test
+    public void singleValueFieldWithFiltering() throws Exception {
         long includes[] = { 1, 2, 3, 98 };
         long excludes[] = { -1, 2, 4 };
         long empty[] = {};
@@ -306,7 +310,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValueFieldWithMaxSize() throws Exception {
+    @Test
+    public void singleValueField_WithMaxSize() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("high_card_type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -332,7 +337,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValueFieldOrderedByTermAsc() throws Exception {
+    @Test
+    public void singleValueField_OrderedByTermAsc() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -356,7 +362,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValueFieldOrderedByTermDesc() throws Exception {
+    @Test
+    public void singleValueField_OrderedByTermDesc() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -382,7 +389,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldWithSubAggregation() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -416,7 +424,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldWithSubAggregationInherited() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation_Inherited() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -444,7 +453,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void singleValuedField_WithValueScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -469,7 +479,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testMultiValuedField() throws Exception {
+    @Test
+    public void multiValuedField() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(MULTI_VALUED_FIELD_NAME)
@@ -497,7 +508,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(MULTI_VALUED_FIELD_NAME)
@@ -526,7 +538,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testMultiValuedFieldWithValueScriptNotUnique() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript_NotUnique() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(MULTI_VALUED_FIELD_NAME)
@@ -566,7 +579,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
 
     */
 
-    public void testMultiValuedFieldWithValueScriptWithInheritedSubAggregator() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript_WithInheritedSubAggregator() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(MULTI_VALUED_FIELD_NAME)
@@ -603,11 +617,12 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testScriptSingleValue() throws Exception {
+    @Test
+    public void script_SingleValue() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .collectMode(randomFrom(SubAggCollectionMode.values()))
-                        .script(
+.script(
                                 new Script("doc['" + SINGLE_VALUED_FIELD_NAME + "'].value")))
                 .execute().actionGet();
 
@@ -628,7 +643,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testScriptSingleValueWithSubAggregatorInherited() throws Exception {
+    @Test
+    public void script_SingleValue_WithSubAggregator_Inherited() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -656,11 +672,12 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void script_MultiValued() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .collectMode(randomFrom(SubAggCollectionMode.values()))
-                        .script(
+.script(
                                 new Script("doc['" + MULTI_VALUED_FIELD_NAME + "']")))
                 .execute().actionGet();
 
@@ -685,23 +702,30 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testScriptMultiValuedWithAggregatorInheritedNoExplicitType() throws Exception {
+    @Test
+    public void script_MultiValued_WithAggregatorInherited_NoExplicitType() throws Exception {
+
         // since no type ie explicitly defined, es will assume all values returned by the script to be strings (bytes),
         // so the aggregation should fail, since the "sum" aggregation can only operation on numeric values.
+
         try {
+
             client().prepareSearch("idx").setTypes("type")
                     .addAggregation(terms("terms")
                             .collectMode(randomFrom(SubAggCollectionMode.values()))
                                     .script(new Script("doc['" + MULTI_VALUED_FIELD_NAME + "']"))
                             .subAggregation(sum("sum")))
                     .execute().actionGet();
+
             fail("expected to fail as sub-aggregation sum requires a numeric value source context, but there is none");
+
         } catch (Exception e) {
             // expected
         }
     }
 
-    public void testScriptMultiValuedWithAggregatorInheritedWithExplicitType() throws Exception {
+    @Test
+    public void script_MultiValued_WithAggregatorInherited_WithExplicitType() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .collectMode(randomFrom(SubAggCollectionMode.values()))
@@ -738,7 +762,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx_unmapped").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -755,7 +780,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         assertThat(terms.getBuckets().size(), equalTo(0));
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx_unmapped", "idx").setTypes("type")
                 .addAggregation(terms("terms")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -779,7 +805,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testEmptyAggregation() throws Exception {
+    @Test
+    public void emptyAggregation() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(1l).minDocCount(0)
@@ -798,7 +825,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         assertThat(terms.getBuckets().isEmpty(), is(true));
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAsc() throws Exception {
         boolean asc = true;
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
@@ -827,7 +855,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscWithTermsSubAgg() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAscWithTermsSubAgg() throws Exception {
         boolean asc = true;
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
@@ -869,7 +898,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedBySingleBucketSubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleBucketSubAggregationAsc() throws Exception {
         boolean asc = randomBoolean();
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("num_tags")
@@ -906,7 +936,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         assertThat(filter.getDocCount(), equalTo(asc ? 3l : 2l));
     }
 
-    public void testSingleValuedFieldOrderedBySubAggregationAscMultiHierarchyLevels() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySubAggregationAsc_MultiHierarchyLevels() throws Exception {
         boolean asc = randomBoolean();
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("tags")
@@ -960,7 +991,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         assertThat(max.getValue(), equalTo(asc ? 4.0 : 2.0));
     }
 
-    public void testSingleValuedFieldOrderedByMissingSubAggregation() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMissingSubAggregation() throws Exception {
         for (String index : Arrays.asList("idx", "idx_unmapped")) {
             try {
                 client().prepareSearch(index).setTypes("type")
@@ -978,7 +1010,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByNonMetricsOrMultiBucketSubAggregation() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByNonMetricsOrMultiBucketSubAggregation() throws Exception {
         for (String index : Arrays.asList("idx", "idx_unmapped")) {
             try {
                 client().prepareSearch(index).setTypes("type")
@@ -998,7 +1031,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByMultiValuedSubAggregationWithUknownMetric() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValuedSubAggregation_WithUknownMetric() throws Exception {
         for (String index : Arrays.asList("idx", "idx_unmapped")) {
             try {
                 client().prepareSearch(index).setTypes("type")
@@ -1018,7 +1052,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByMultiValuedSubAggregationWithoutMetric() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValuedSubAggregation_WithoutMetric() throws Exception {
         for (String index : Arrays.asList("idx", "idx_unmapped")) {
             try {
                 client().prepareSearch(index).setTypes("type")
@@ -1038,7 +1073,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationDesc() throws Exception {
         boolean asc = false;
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
@@ -1070,7 +1106,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
 
     }
 
-    public void testSingleValuedFieldOrderedByMultiValueSubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValueSubAggregationAsc() throws Exception {
         boolean asc = true;
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
@@ -1100,7 +1137,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
 
     }
 
-    public void testSingleValuedFieldOrderedByMultiValueSubAggregationDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValueSubAggregationDesc() throws Exception {
         boolean asc = false;
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
@@ -1130,7 +1168,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
 
     }
 
-    public void testSingleValuedFieldOrderedByMultiValueExtendedStatsAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValueExtendedStatsAsc() throws Exception {
         boolean asc = true;
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
@@ -1160,37 +1199,44 @@ public class LongTermsTests extends AbstractTermsTestCase {
 
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscAndTermsDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAscAndTermsDesc() throws Exception {
         long[] expectedKeys = new long[] { 1, 2, 4, 3, 7, 6, 5 };
         assertMultiSortResponse(expectedKeys, Terms.Order.aggregation("avg_l", true), Terms.Order.term(false));
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscAndTermsAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAscAndTermsAsc() throws Exception {
         long[] expectedKeys = new long[] { 1, 2, 3, 4, 5, 6, 7 };
         assertMultiSortResponse(expectedKeys, Terms.Order.aggregation("avg_l", true), Terms.Order.term(true));
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationDescAndTermsAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationDescAndTermsAsc() throws Exception {
         long[] expectedKeys = new long[] { 5, 6, 7, 3, 4, 2, 1 };
         assertMultiSortResponse(expectedKeys, Terms.Order.aggregation("avg_l", false), Terms.Order.term(true));
     }
 
-    public void testSingleValuedFieldOrderedByCountAscAndSingleValueSubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByCountAscAndSingleValueSubAggregationAsc() throws Exception {
         long[] expectedKeys = new long[] { 6, 7, 3, 4, 5, 1, 2 };
         assertMultiSortResponse(expectedKeys, Terms.Order.count(true), Terms.Order.aggregation("avg_l", true));
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscSingleValueSubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAscSingleValueSubAggregationAsc() throws Exception {
         long[] expectedKeys = new long[] { 6, 7, 3, 5, 4, 1, 2 };
         assertMultiSortResponse(expectedKeys, Terms.Order.aggregation("sum_d", true), Terms.Order.aggregation("avg_l", true));
     }
 
-    public void testSingleValuedFieldOrderedByThreeCriteria() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByThreeCriteria() throws Exception {
         long[] expectedKeys = new long[] { 2, 1, 4, 5, 3, 6, 7 };
         assertMultiSortResponse(expectedKeys, Terms.Order.count(false), Terms.Order.aggregation("sum_d", false), Terms.Order.aggregation("avg_l", false));
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscAsCompound() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAscAsCompound() throws Exception {
         long[] expectedKeys = new long[] { 1, 2, 3, 4, 5, 6, 7 };
         assertMultiSortResponse(expectedKeys, Terms.Order.aggregation("avg_l", true));
     }
@@ -1227,7 +1273,8 @@ public class LongTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testOtherDocCount() {
+    @Test
+    public void otherDocCount() {
         testOtherDocCount(SINGLE_VALUED_FIELD_NAME, MULTI_VALUED_FIELD_NAME);
     }
 }
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/MaxTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/MaxTests.java
index ae4fc2b..ec21ddc 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/MaxTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/MaxTests.java
@@ -27,6 +27,7 @@ import org.elasticsearch.search.aggregations.bucket.global.Global;
 import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
 import org.elasticsearch.search.aggregations.metrics.AbstractNumericTestCase;
 import org.elasticsearch.search.aggregations.metrics.max.Max;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -45,13 +46,16 @@ import static org.hamcrest.Matchers.notNullValue;
  *
  */
 public class MaxTests extends AbstractNumericTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     @Override
+    @Test
     public void testEmptyAggregation() throws Exception {
+
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0).subAggregation(max("max")))
@@ -68,9 +72,10 @@ public class MaxTests extends AbstractNumericTestCase {
         assertThat(max.getName(), equalTo("max"));
         assertThat(max.getValue(), equalTo(Double.NEGATIVE_INFINITY));
     }
-
     @Override
+    @Test
     public void testUnmapped() throws Exception {
+
         SearchResponse searchResponse = client().prepareSearch("idx_unmapped")
                 .setQuery(matchAllQuery())
                 .addAggregation(max("max").field("value"))
@@ -85,6 +90,7 @@ public class MaxTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testSingleValuedField() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -99,7 +105,8 @@ public class MaxTests extends AbstractNumericTestCase {
         assertThat(max.getValue(), equalTo(10.0));
     }
 
-    public void testSingleValuedFieldWithFormatter() throws Exception {
+    @Test
+    public void testSingleValuedField_WithFormatter() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(max("max").format("0000.0").field("value")).execute().actionGet();
 
@@ -113,7 +120,9 @@ public class MaxTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldGetProperty() throws Exception {
+    @Test
+    public void testSingleValuedField_getProperty() throws Exception {
+
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(global("global").subAggregation(max("max").field("value"))).execute().actionGet();
 
@@ -137,7 +146,8 @@ public class MaxTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldPartiallyUnmapped() throws Exception {
+    @Test
+    public void testSingleValuedField_PartiallyUnmapped() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx", "idx_unmapped")
                 .setQuery(matchAllQuery())
                 .addAggregation(max("max").field("value"))
@@ -152,7 +162,8 @@ public class MaxTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(max("max").field("value").script(new Script("_value + 1")))
@@ -167,7 +178,8 @@ public class MaxTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -184,6 +196,7 @@ public class MaxTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testMultiValuedField() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -199,7 +212,8 @@ public class MaxTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(max("max").field("values").script(new Script("_value + 1")))
@@ -214,7 +228,8 @@ public class MaxTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -231,7 +246,8 @@ public class MaxTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValued() throws Exception {
+    @Test
+    public void testScript_SingleValued() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(max("max").script(new Script("doc['value'].value")))
@@ -246,7 +262,8 @@ public class MaxTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_SingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -263,7 +280,8 @@ public class MaxTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_ExplicitSingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -280,7 +298,8 @@ public class MaxTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void testScript_MultiValued() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(max("max").script(new Script("doc['values'].values")))
@@ -295,7 +314,8 @@ public class MaxTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitMultiValued() throws Exception {
+    @Test
+    public void testScript_ExplicitMultiValued() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(max("max").script(new Script("doc['values'].values")))
@@ -310,7 +330,8 @@ public class MaxTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValuedWithParams() throws Exception {
+    @Test
+    public void testScript_MultiValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/MinTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/MinTests.java
index a6bf986..27086bb 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/MinTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/MinTests.java
@@ -27,6 +27,7 @@ import org.elasticsearch.search.aggregations.bucket.global.Global;
 import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
 import org.elasticsearch.search.aggregations.metrics.AbstractNumericTestCase;
 import org.elasticsearch.search.aggregations.metrics.min.Min;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -45,13 +46,16 @@ import static org.hamcrest.Matchers.notNullValue;
  *
  */
 public class MinTests extends AbstractNumericTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     @Override
+    @Test
     public void testEmptyAggregation() throws Exception {
+
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0).subAggregation(min("min")))
@@ -70,6 +74,7 @@ public class MinTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testUnmapped() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx_unmapped")
                 .setQuery(matchAllQuery())
@@ -85,6 +90,7 @@ public class MinTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testSingleValuedField() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -99,7 +105,8 @@ public class MinTests extends AbstractNumericTestCase {
         assertThat(min.getValue(), equalTo(1.0));
     }
 
-    public void testSingleValuedFieldWithFormatter() throws Exception {
+    @Test
+    public void testSingleValuedField_WithFormatter() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(min("min").format("0000.0").field("value")).execute().actionGet();
 
@@ -113,7 +120,8 @@ public class MinTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldGetProperty() throws Exception {
+    @Test
+    public void testSingleValuedField_getProperty() throws Exception {
 
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(global("global").subAggregation(min("min").field("value"))).execute().actionGet();
@@ -138,7 +146,8 @@ public class MinTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldPartiallyUnmapped() throws Exception {
+    @Test
+    public void testSingleValuedField_PartiallyUnmapped() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx", "idx_unmapped")
                 .setQuery(matchAllQuery())
                 .addAggregation(min("min").field("value"))
@@ -153,7 +162,8 @@ public class MinTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(min("min").field("value").script(new Script("_value - 1")))
@@ -168,7 +178,8 @@ public class MinTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -185,6 +196,7 @@ public class MinTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testMultiValuedField() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -200,7 +212,8 @@ public class MinTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(min("min").field("values").script(new Script("_value - 1"))).execute().actionGet();
@@ -213,7 +226,8 @@ public class MinTests extends AbstractNumericTestCase {
         assertThat(min.getValue(), equalTo(1.0));
     }
 
-    public void testMultiValuedFieldWithValueScriptReverse() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript_Reverse() throws Exception {
         // test what happens when values arrive in reverse order since the min
         // aggregator is optimized to work on sorted values
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
@@ -228,7 +242,8 @@ public class MinTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
@@ -244,7 +259,8 @@ public class MinTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValued() throws Exception {
+    @Test
+    public void testScript_SingleValued() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(min("min").script(new Script("doc['value'].value"))).execute().actionGet();
 
@@ -257,7 +273,8 @@ public class MinTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_SingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
@@ -273,7 +290,8 @@ public class MinTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_ExplicitSingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
@@ -289,7 +307,8 @@ public class MinTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void testScript_MultiValued() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(min("min").script(new Script("doc['values'].values"))).execute().actionGet();
 
@@ -302,7 +321,8 @@ public class MinTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitMultiValued() throws Exception {
+    @Test
+    public void testScript_ExplicitMultiValued() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(min("min").script(new Script("doc['values'].values"))).execute().actionGet();
 
@@ -315,7 +335,8 @@ public class MinTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValuedWithParams() throws Exception {
+    @Test
+    public void testScript_MultiValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         SearchResponse searchResponse = client()
@@ -334,4 +355,5 @@ public class MinTests extends AbstractNumericTestCase {
         assertThat(min.getName(), equalTo("min"));
         assertThat(min.getValue(), equalTo(1.0));
     }
+
 }
\ No newline at end of file
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/RangeTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/RangeTests.java
index 5d78b99..0ab0b1b 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/RangeTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/RangeTests.java
@@ -32,6 +32,7 @@ import org.elasticsearch.search.aggregations.metrics.avg.Avg;
 import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -66,7 +67,7 @@ public class RangeTests extends ESIntegTestCase {
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     @Override
     public void setupSuiteScopeCluster() throws Exception {
         createIndex("idx");
@@ -92,7 +93,8 @@ public class RangeTests extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testRangeAsSubAggregation() throws Exception {
+    @Test
+    public void rangeAsSubAggregation() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(terms("terms").field(MULTI_VALUED_FIELD_NAME).size(100)
                         .collectMode(randomFrom(SubAggCollectionMode.values())).subAggregation(
@@ -155,7 +157,8 @@ public class RangeTests extends ESIntegTestCase {
         }
     }
 
-    public void testSingleValueField() throws Exception {
+    @Test
+    public void singleValueField() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(range("range")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -176,8 +179,8 @@ public class RangeTests extends ESIntegTestCase {
         Range.Bucket bucket = buckets.get(0);
         assertThat(bucket, notNullValue());
         assertThat((String) bucket.getKey(), equalTo("*-3.0"));
-        assertThat(((Number) bucket.getFrom()).doubleValue(), equalTo(Double.NEGATIVE_INFINITY));
-        assertThat(((Number) bucket.getTo()).doubleValue(), equalTo(3.0));
+        assertThat(((Number) ((Number) bucket.getFrom())).doubleValue(), equalTo(Double.NEGATIVE_INFINITY));
+        assertThat(((Number) ((Number) bucket.getTo())).doubleValue(), equalTo(3.0));
         assertThat(bucket.getFromAsString(), nullValue());
         assertThat(bucket.getToAsString(), equalTo("3.0"));
         assertThat(bucket.getDocCount(), equalTo(2l));
@@ -201,7 +204,8 @@ public class RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(numDocs - 5L));
     }
 
-    public void testSingleValueFieldWithFormat() throws Exception {
+    @Test
+    public void singleValueField_WithFormat() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -245,7 +249,8 @@ public class RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(numDocs - 5L));
     }
 
-    public void testSingleValueFieldWithCustomKey() throws Exception {
+    @Test
+    public void singleValueField_WithCustomKey() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(range("range")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -291,7 +296,8 @@ public class RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(numDocs - 5L));
     }
 
-    public void testSingleValuedFieldWithSubAggregation() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(range("range")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -363,7 +369,8 @@ public class RangeTests extends ESIntegTestCase {
         assertThat((double) propertiesCounts[2], equalTo((double) total));
     }
 
-    public void testSingleValuedFieldWithSubAggregationInherited() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation_Inherited() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(range("range")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -423,7 +430,8 @@ public class RangeTests extends ESIntegTestCase {
         assertThat(avg.getValue(), equalTo((double) total / (numDocs - 5))); // (6 + 7 + 8 + 9 + 10) / 5
     }
 
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void singleValuedField_WithValueScript() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -479,7 +487,8 @@ public class RangeTests extends ESIntegTestCase {
     [10, 11]
      */
 
-    public void testMultiValuedField() throws Exception {
+    @Test
+    public void multiValuedField() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(range("range")
                         .field(MULTI_VALUED_FIELD_NAME)
@@ -538,7 +547,8 @@ public class RangeTests extends ESIntegTestCase {
     [11, 12]
      */
 
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -599,7 +609,8 @@ public class RangeTests extends ESIntegTestCase {
     r3: 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12
      */
 
-    public void testMultiValuedFieldWithValueScriptWithInheritedSubAggregator() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript_WithInheritedSubAggregator() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -659,7 +670,8 @@ public class RangeTests extends ESIntegTestCase {
         assertThat(sum.getValue(), equalTo((double) total));
     }
 
-    public void testScriptSingleValue() throws Exception {
+    @Test
+    public void script_SingleValue() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -703,7 +715,8 @@ public class RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(numDocs - 5l));
     }
 
-    public void testScriptSingleValueWithSubAggregatorInherited() throws Exception {
+    @Test
+    public void script_SingleValue_WithSubAggregator_Inherited() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -760,7 +773,8 @@ public class RangeTests extends ESIntegTestCase {
         assertThat(avg.getValue(), equalTo((double) total / (numDocs - 5))); // (6 + 7 + 8 + 9 + 10) / 5
     }
 
-    public void testEmptyRange() throws Exception {
+    @Test
+    public void emptyRange() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(range("range")
                         .field(MULTI_VALUED_FIELD_NAME)
@@ -796,7 +810,8 @@ public class RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(0l));
     }
 
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void script_MultiValued() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -839,7 +854,7 @@ public class RangeTests extends ESIntegTestCase {
         assertThat(bucket.getToAsString(), nullValue());
         assertThat(bucket.getDocCount(), equalTo(numDocs - 4l));
     }
-
+    
     /*
     [1, 2]
     [2, 3]
@@ -851,13 +866,14 @@ public class RangeTests extends ESIntegTestCase {
     [8, 9]
     [9, 10]
     [10, 11]
-
+    
     r1: 1, 2, 2
     r2: 3, 3, 4, 4, 5, 5
     r3: 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11
      */
 
-    public void testScriptMultiValuedWithAggregatorInherited() throws Exception {
+    @Test
+    public void script_MultiValued_WithAggregatorInherited() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .addAggregation(
@@ -917,7 +933,8 @@ public class RangeTests extends ESIntegTestCase {
         assertThat(sum.getValue(), equalTo((double) total));
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse response = client().prepareSearch("idx_unmapped")
                 .addAggregation(range("range")
                         .field(SINGLE_VALUED_FIELD_NAME)
@@ -963,7 +980,8 @@ public class RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(0l));
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         client().admin().cluster().prepareHealth("idx_unmapped").setWaitForYellowStatus().execute().actionGet();
 
         SearchResponse response = client().prepareSearch("idx", "idx_unmapped")
@@ -1011,7 +1029,8 @@ public class RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(numDocs - 5l));
     }
 
-    public void testOverlappingRanges() throws Exception {
+    @Test
+    public void overlappingRanges() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(range("range")
                         .field(MULTI_VALUED_FIELD_NAME)
@@ -1067,7 +1086,8 @@ public class RangeTests extends ESIntegTestCase {
         assertThat(bucket.getDocCount(), equalTo(numDocs - 2l));
     }
 
-    public void testEmptyAggregation() throws Exception {
+    @Test
+    public void emptyAggregation() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(1l).minDocCount(0)
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ScriptIndexSettingsTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ScriptIndexSettingsTests.java
index 34ca4f4..06db7e8 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ScriptIndexSettingsTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ScriptIndexSettingsTests.java
@@ -23,6 +23,7 @@ import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsReques
 import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsResponse;
 import org.elasticsearch.action.admin.indices.settings.get.GetSettingsRequest;
 import org.elasticsearch.action.admin.indices.settings.get.GetSettingsResponse;
+import org.elasticsearch.action.indexedscripts.get.GetIndexedScriptResponse;
 import org.elasticsearch.action.indexedscripts.put.PutIndexedScriptResponse;
 import org.elasticsearch.action.support.IndicesOptions;
 import org.elasticsearch.index.IndexNotFoundException;
@@ -30,19 +31,20 @@ import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.script.ScriptService;
 import org.elasticsearch.script.groovy.GroovyPlugin;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.Collections;
 
-import static org.hamcrest.Matchers.is;
-
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST)
 public class ScriptIndexSettingsTests extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
 
+    @Test
     public void testScriptIndexSettings() {
         PutIndexedScriptResponse putIndexedScriptResponse =
                 client().preparePutIndexedScript().setId("foobar").setScriptLang("groovy").setSource("{ \"script\": 1 }")
@@ -75,6 +77,7 @@ public class ScriptIndexSettingsTests extends ESIntegTestCase {
         assertEquals("Auto expand replicas should be 0-all", "0-all", numberOfReplicas);
     }
 
+    @Test
     public void testDeleteScriptIndex() {
         PutIndexedScriptResponse putIndexedScriptResponse =
                 client().preparePutIndexedScript().setId("foobar").setScriptLang("groovy").setSource("{ \"script\": 1 }")
@@ -84,10 +87,13 @@ public class ScriptIndexSettingsTests extends ESIntegTestCase {
         assertTrue(deleteResponse.isAcknowledged());
         ensureGreen();
         try {
-            client().prepareGetIndexedScript("groovy","foobar").get();
-            fail("Expected IndexNotFoundException");
-        } catch (IndexNotFoundException e) {
-            assertThat(e.getMessage(), is("no such index"));
+            GetIndexedScriptResponse response = client().prepareGetIndexedScript("groovy","foobar").get();
+            assertTrue(false); //This should not happen
+        } catch (IndexNotFoundException ime) {
+            assertTrue(true);
         }
     }
+
+
+
 }
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ScriptQuerySearchTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ScriptQuerySearchTests.java
index 2b419c4..2726217 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ScriptQuerySearchTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ScriptQuerySearchTests.java
@@ -22,12 +22,14 @@ package org.elasticsearch.messy.tests;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.cache.IndexCacheModule;
+import org.elasticsearch.index.cache.query.index.IndexQueryCache;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.script.Script;
 import org.elasticsearch.script.ScriptService.ScriptType;
 import org.elasticsearch.script.groovy.GroovyPlugin;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -36,6 +38,7 @@ import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
+import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
 import static org.elasticsearch.index.query.QueryBuilders.scriptQuery;
 import static org.hamcrest.Matchers.equalTo;
 
@@ -44,11 +47,12 @@ import static org.hamcrest.Matchers.equalTo;
  */
 @ESIntegTestCase.ClusterScope(scope= ESIntegTestCase.Scope.SUITE)
 public class ScriptQuerySearchTests extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return Settings.settingsBuilder().put(super.nodeSettings(nodeOrdinal))
@@ -58,6 +62,7 @@ public class ScriptQuerySearchTests extends ESIntegTestCase {
                 .build();
     }
 
+    @Test
     public void testCustomScriptBoost() throws Exception {
         createIndex("test");
         client().prepareIndex("test", "type1", "1")
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ScriptedMetricTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ScriptedMetricTests.java
index c54510a..e28554a 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ScriptedMetricTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ScriptedMetricTests.java
@@ -37,6 +37,7 @@ import org.elasticsearch.search.aggregations.metrics.scripted.ScriptedMetric;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -71,7 +72,7 @@ public class ScriptedMetricTests extends ESIntegTestCase {
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     @Override
     public void setupSuiteScopeCluster() throws Exception {
         createIndex("idx");
@@ -115,7 +116,7 @@ public class ScriptedMetricTests extends ESIntegTestCase {
                 "{\"script\":\"newaggregation = []; sum = 0;for (agg in _aggs) { for (a in agg) { sum += a} }; newaggregation.add(sum); return newaggregation\"}")
                 .get();
         assertThat(indexScriptResponse.isCreated(), equalTo(true));
-
+        
         indexRandom(true, builders);
         ensureSearchable();
     }
@@ -129,6 +130,7 @@ public class ScriptedMetricTests extends ESIntegTestCase {
         return settings;
     }
 
+    @Test
     public void testMap() {
         SearchResponse response = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(scriptedMetric("scripted").mapScript(new Script("_agg['count'] = 1"))).execute().actionGet();
@@ -162,7 +164,8 @@ public class ScriptedMetricTests extends ESIntegTestCase {
         assertThat(numShardsRun, greaterThan(0));
     }
 
-    public void testMapWithParams() {
+    @Test
+    public void testMap_withParams() {
         Map<String, Object> params = new HashMap<>();
         params.put("_agg", new ArrayList<>());
 
@@ -196,7 +199,8 @@ public class ScriptedMetricTests extends ESIntegTestCase {
         assertThat(totalCount, equalTo(numDocs));
     }
 
-    public void testInitMapWithParams() {
+    @Test
+    public void testInitMap_withParams() {
         Map<String, Object> varsMap = new HashMap<>();
         varsMap.put("multiplier", 1);
         Map<String, Object> params = new HashMap<>();
@@ -237,7 +241,8 @@ public class ScriptedMetricTests extends ESIntegTestCase {
         assertThat(totalCount, equalTo(numDocs * 3));
     }
 
-    public void testMapCombineWithParams() {
+    @Test
+    public void testMapCombine_withParams() {
         Map<String, Object> varsMap = new HashMap<>();
         varsMap.put("multiplier", 1);
         Map<String, Object> params = new HashMap<>();
@@ -286,7 +291,8 @@ public class ScriptedMetricTests extends ESIntegTestCase {
         assertThat(totalCount, equalTo(numDocs));
     }
 
-    public void testInitMapCombineWithParams() {
+    @Test
+    public void testInitMapCombine_withParams() {
         Map<String, Object> varsMap = new HashMap<>();
         varsMap.put("multiplier", 1);
         Map<String, Object> params = new HashMap<>();
@@ -336,7 +342,8 @@ public class ScriptedMetricTests extends ESIntegTestCase {
         assertThat(totalCount, equalTo(numDocs * 3));
     }
 
-    public void testInitMapCombineReduceWithParams() {
+    @Test
+    public void testInitMapCombineReduce_withParams() {
         Map<String, Object> varsMap = new HashMap<>();
         varsMap.put("multiplier", 1);
         Map<String, Object> params = new HashMap<>();
@@ -376,8 +383,9 @@ public class ScriptedMetricTests extends ESIntegTestCase {
         assertThat(((Number) object).longValue(), equalTo(numDocs * 3));
     }
 
-    @SuppressWarnings("rawtypes")
-    public void testInitMapCombineReduceGetProperty() throws Exception {
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    @Test
+    public void testInitMapCombineReduce_getProperty() throws Exception {
         Map<String, Object> varsMap = new HashMap<>();
         varsMap.put("multiplier", 1);
         Map<String, Object> params = new HashMap<>();
@@ -428,7 +436,8 @@ public class ScriptedMetricTests extends ESIntegTestCase {
 
     }
 
-    public void testMapCombineReduceWithParams() {
+    @Test
+    public void testMapCombineReduce_withParams() {
         Map<String, Object> varsMap = new HashMap<>();
         varsMap.put("multiplier", 1);
         Map<String, Object> params = new HashMap<>();
@@ -467,7 +476,8 @@ public class ScriptedMetricTests extends ESIntegTestCase {
         assertThat(((Number) object).longValue(), equalTo(numDocs));
     }
 
-    public void testInitMapReduceWithParams() {
+    @Test
+    public void testInitMapReduce_withParams() {
         Map<String, Object> varsMap = new HashMap<>();
         varsMap.put("multiplier", 1);
         Map<String, Object> params = new HashMap<>();
@@ -504,7 +514,8 @@ public class ScriptedMetricTests extends ESIntegTestCase {
         assertThat(((Number) object).longValue(), equalTo(numDocs * 3));
     }
 
-    public void testMapReduceWithParams() {
+    @Test
+    public void testMapReduce_withParams() {
         Map<String, Object> varsMap = new HashMap<>();
         varsMap.put("multiplier", 1);
         Map<String, Object> params = new HashMap<>();
@@ -540,7 +551,8 @@ public class ScriptedMetricTests extends ESIntegTestCase {
         assertThat(((Number) object).longValue(), equalTo(numDocs));
     }
 
-    public void testInitMapCombineReduceWithParamsAndReduceParams() {
+    @Test
+    public void testInitMapCombineReduce_withParamsAndReduceParams() {
         Map<String, Object> varsMap = new HashMap<>();
         varsMap.put("multiplier", 1);
         Map<String, Object> params = new HashMap<>();
@@ -583,7 +595,8 @@ public class ScriptedMetricTests extends ESIntegTestCase {
         assertThat(((Number) object).longValue(), equalTo(numDocs * 12));
     }
 
-    public void testInitMapCombineReduceWithParamsIndexed() {
+    @Test
+    public void testInitMapCombineReduce_withParams_Indexed() {
         Map<String, Object> varsMap = new HashMap<>();
         varsMap.put("multiplier", 1);
         Map<String, Object> params = new HashMap<>();
@@ -617,7 +630,9 @@ public class ScriptedMetricTests extends ESIntegTestCase {
         assertThat(((Number) object).longValue(), equalTo(numDocs * 3));
     }
 
-    public void testInitMapCombineReduceWithParamsFile() {
+    @Test
+    public void testInitMapCombineReduce_withParams_File() {
+
         Map<String, Object> varsMap = new HashMap<>();
         varsMap.put("multiplier", 1);
         Map<String, Object> params = new HashMap<>();
@@ -650,7 +665,8 @@ public class ScriptedMetricTests extends ESIntegTestCase {
         assertThat(((Number) object).longValue(), equalTo(numDocs * 3));
     }
 
-    public void testInitMapCombineReduceWithParamsAsSubAgg() {
+    @Test
+    public void testInitMapCombineReduce_withParams_asSubAgg() {
         Map<String, Object> varsMap = new HashMap<>();
         varsMap.put("multiplier", 1);
         Map<String, Object> params = new HashMap<>();
@@ -707,6 +723,7 @@ public class ScriptedMetricTests extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testEmptyAggregation() throws Exception {
         Map<String, Object> varsMap = new HashMap<>();
         varsMap.put("multiplier", 1);
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SearchFieldsTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SearchFieldsTests.java
index 632f93d..a7618f0 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SearchFieldsTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SearchFieldsTests.java
@@ -44,6 +44,7 @@ import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -74,11 +75,13 @@ import static org.hamcrest.Matchers.nullValue;
  *
  */
 public class SearchFieldsTests extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
 
+    @Test
     public void testStoredFields() throws Exception {
         createIndex("test");
         client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().execute().actionGet();
@@ -138,6 +141,7 @@ public class SearchFieldsTests extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).fields().get("field3").value().toString(), equalTo("value3"));
     }
 
+    @Test
     public void testScriptDocAndFields() throws Exception {
         createIndex("test");
         client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().execute().actionGet();
@@ -222,6 +226,7 @@ public class SearchFieldsTests extends ESIntegTestCase {
         assertThat((Double) response.getHits().getAt(2).fields().get("sNum1").values().get(0), equalTo(6.0));
     }
 
+    @Test
     public void testUidBasedScriptFields() throws Exception {
         prepareCreate("test").addMapping("type1", "num1", "type=long").execute().actionGet();
         ensureYellow();
@@ -298,6 +303,7 @@ public class SearchFieldsTests extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testScriptFieldUsingSource() throws Exception {
         createIndex("test");
         client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().execute().actionGet();
@@ -341,6 +347,7 @@ public class SearchFieldsTests extends ESIntegTestCase {
         assertThat(((Map) sObj2Arr3.get(0)).get("arr3_field1").toString(), equalTo("arr3_value1"));
     }
 
+    @Test
     public void testPartialFields() throws Exception {
         createIndex("test");
         client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().execute().actionGet();
@@ -360,6 +367,7 @@ public class SearchFieldsTests extends ESIntegTestCase {
         client().admin().indices().prepareRefresh().execute().actionGet();
     }
 
+    @Test
     public void testStoredFieldsWithoutSource() throws Exception {
         createIndex("test");
         client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().execute().actionGet();
@@ -426,7 +434,8 @@ public class SearchFieldsTests extends ESIntegTestCase {
 
     }
 
-    public void testSearchFieldsMetaData() throws Exception {
+    @Test
+    public void testSearchFields_metaData() throws Exception {
         client().prepareIndex("my-index", "my-type1", "1")
                 .setRouting("1")
                 .setSource(jsonBuilder().startObject().field("field1", "value").endObject())
@@ -445,7 +454,8 @@ public class SearchFieldsTests extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).field("_routing").getValue().toString(), equalTo("1"));
     }
 
-    public void testSearchFieldsNonLeafField() throws Exception {
+    @Test
+    public void testSearchFields_nonLeafField() throws Exception {
         client().prepareIndex("my-index", "my-type1", "1")
                 .setSource(jsonBuilder().startObject().startObject("field1").field("field2", "value1").endObject().endObject())
                 .setRefresh(true)
@@ -456,7 +466,8 @@ public class SearchFieldsTests extends ESIntegTestCase {
                 containsString("field [field1] isn't a leaf field"));
     }
 
-    public void testGetFieldsComplexField() throws Exception {
+    @Test
+    public void testGetFields_complexField() throws Exception {
         client().admin().indices().prepareCreate("my-index")
                 .setSettings(Settings.settingsBuilder().put("index.refresh_interval", -1))
                 .addMapping("my-type2", jsonBuilder().startObject().startObject("my-type2").startObject("properties")
@@ -513,7 +524,7 @@ public class SearchFieldsTests extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).field(field).getValues().get(1).toString(), equalTo("value2"));
     }
 
-    // see #8203
+    @Test // see #8203
     public void testSingleValueFieldDatatField() throws ExecutionException, InterruptedException {
         createIndex("test");
         indexRandom(true, client().prepareIndex("test", "type", "1").setSource("test_field", "foobar"));
@@ -525,6 +536,7 @@ public class SearchFieldsTests extends ESIntegTestCase {
         assertThat((String)fields.get("test_field").value(), equalTo("foobar"));
     }
 
+    @Test
     public void testFieldsPulledFromFieldData() throws Exception {
         createIndex("test");
         client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().execute().actionGet();
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SearchStatsTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SearchStatsTests.java
index c301f97..89d1670 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SearchStatsTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SearchStatsTests.java
@@ -36,6 +36,7 @@ import org.elasticsearch.script.Script;
 import org.elasticsearch.script.groovy.GroovyPlugin;
 import org.elasticsearch.search.highlight.HighlightBuilder;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -60,6 +61,7 @@ import static org.hamcrest.Matchers.nullValue;
  */
 @ESIntegTestCase.ClusterScope(minNumDataNodes = 2)
 public class SearchStatsTests extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
@@ -70,6 +72,7 @@ public class SearchStatsTests extends ESIntegTestCase {
         return 0;
     }
 
+    @Test
     public void testSimpleStats() throws Exception {
         // clear all stats first
         client().admin().indices().prepareStats().clear().execute().actionGet();
@@ -144,9 +147,9 @@ public class SearchStatsTests extends ESIntegTestCase {
                 assertThat(total.getQueryTimeInMillis(), equalTo(0l));
             }
         }
-
+        
         assertThat(num, greaterThan(0));
-
+     
     }
 
     private Set<String> nodeIdsWithIndex(String... indices) {
@@ -164,6 +167,7 @@ public class SearchStatsTests extends ESIntegTestCase {
         return nodes;
     }
 
+    @Test
     public void testOpenContexts() {
         String index = "test1";
         createIndex(index);
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SearchTimeoutTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SearchTimeoutTests.java
index 219773b..1b53550 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SearchTimeoutTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SearchTimeoutTests.java
@@ -26,6 +26,7 @@ import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.script.Script;
 import org.elasticsearch.script.groovy.GroovyPlugin;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -43,13 +44,14 @@ public class SearchTimeoutTests extends ESIntegTestCase {
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return Settings.settingsBuilder().put(super.nodeSettings(nodeOrdinal)).build();
     }
 
-    public void testSimpleTimeout() throws Exception {
+    @Test
+    public void simpleTimeoutTest() throws Exception {
         client().prepareIndex("test", "type", "1").setSource("field", "value").setRefresh(true).execute().actionGet();
 
         SearchResponse searchResponse = client().prepareSearch("test")
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SignificantTermsSignificanceScoreTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SignificantTermsSignificanceScoreTests.java
index 8828d06..5e6625a 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SignificantTermsSignificanceScoreTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SignificantTermsSignificanceScoreTests.java
@@ -59,6 +59,7 @@ import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.search.aggregations.bucket.terms.TermsBuilder;
 import org.elasticsearch.search.internal.SearchContext;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -84,6 +85,7 @@ import static org.hamcrest.Matchers.is;
  */
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.SUITE)
 public class SignificantTermsSignificanceScoreTests extends ESIntegTestCase {
+
     static final String INDEX_NAME = "testidx";
     static final String DOC_TYPE = "doc";
     static final String TEXT_FIELD = "text";
@@ -106,6 +108,7 @@ public class SignificantTermsSignificanceScoreTests extends ESIntegTestCase {
         return randomBoolean() ? null : randomFrom(SignificantTermsAggregatorFactory.ExecutionMode.values()).toString();
     }
 
+    @Test
     public void testPlugin() throws Exception {
         String type = randomBoolean() ? "string" : "long";
         String settings = "{\"index.number_of_shards\": 1, \"index.number_of_replicas\": 0}";
@@ -256,7 +259,10 @@ public class SignificantTermsSignificanceScoreTests extends ESIntegTestCase {
         }
     }
 
+
+    @Test
     public void testXContentResponse() throws Exception {
+
         String type = randomBoolean() ? "string" : "long";
         String settings = "{\"index.number_of_shards\": 1, \"index.number_of_replicas\": 0}";
         index01Docs(type, settings);
@@ -289,6 +295,7 @@ public class SignificantTermsSignificanceScoreTests extends ESIntegTestCase {
 
     }
 
+    @Test
     public void testDeletesIssue7951() throws Exception {
         String settings = "{\"index.number_of_shards\": 1, \"index.number_of_replicas\": 0}";
         String mappings = "{\"doc\": {\"properties\":{\"text\": {\"type\":\"string\",\"index\":\"not_analyzed\"}}}}";
@@ -331,6 +338,7 @@ public class SignificantTermsSignificanceScoreTests extends ESIntegTestCase {
                 .actionGet();
     }
 
+    @Test
     public void testBackgroundVsSeparateSet() throws Exception {
         String type = randomBoolean() ? "string" : "long";
         String settings = "{\"index.number_of_shards\": 1, \"index.number_of_replicas\": 0}";
@@ -417,6 +425,7 @@ public class SignificantTermsSignificanceScoreTests extends ESIntegTestCase {
         indexRandom(true, false, indexRequestBuilderList);
     }
 
+    @Test
     public void testScoresEqualForPositiveAndNegative() throws Exception {
         indexEqualTestData();
         testScoresEqualForPositiveAndNegative(new MutualInformation.MutualInformationBuilder(true, true));
@@ -482,6 +491,7 @@ public class SignificantTermsSignificanceScoreTests extends ESIntegTestCase {
         indexRandom(true, false, indexRequestBuilders);
     }
 
+    @Test
     public void testScriptScore() throws ExecutionException, InterruptedException, IOException {
         indexRandomFrequencies01(randomBoolean() ? "string" : "long");
         ScriptHeuristic.ScriptHeuristicBuilder scriptHeuristicBuilder = getScriptSignificanceHeuristicBuilder();
@@ -502,6 +512,7 @@ public class SignificantTermsSignificanceScoreTests extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testNoNumberFormatExceptionWithDefaultScriptingEngine() throws ExecutionException, InterruptedException, IOException {
         assertAcked(client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put("index.number_of_shards", 1)));
         index("test", "doc", "1", "{\"field\":\"a\"}");
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SimpleSortTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SimpleSortTests.java
index 8d2c72e..e4710f8 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SimpleSortTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SimpleSortTests.java
@@ -45,62 +45,35 @@ import org.elasticsearch.script.Script;
 import org.elasticsearch.script.groovy.GroovyPlugin;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.search.SearchHitField;
-import org.elasticsearch.search.builder.SearchSourceBuilder;
 import org.elasticsearch.search.sort.FieldSortBuilder;
 import org.elasticsearch.search.sort.GeoDistanceSortBuilder;
 import org.elasticsearch.search.sort.ScriptSortBuilder;
 import org.elasticsearch.search.sort.SortBuilders;
 import org.elasticsearch.search.sort.SortOrder;
+import org.elasticsearch.search.builder.SearchSourceBuilder;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
+import java.util.*;
 import java.util.Map.Entry;
-import java.util.Random;
-import java.util.Set;
-import java.util.TreeMap;
 import java.util.concurrent.ExecutionException;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
-import static org.elasticsearch.index.query.QueryBuilders.functionScoreQuery;
-import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
-import static org.elasticsearch.index.query.QueryBuilders.termQuery;
+import static org.elasticsearch.index.query.QueryBuilders.*;
 import static org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders.fieldValueFactorFunction;
 import static org.elasticsearch.search.sort.SortBuilders.fieldSort;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertFirstHit;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertOrderedSearchHits;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSecondHit;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSortValues;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.hasId;
-import static org.hamcrest.Matchers.closeTo;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.lessThan;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.nullValue;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
+import static org.hamcrest.Matchers.*;
 
 
 /**
  *
  */
 public class SimpleSortTests extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
@@ -209,6 +182,7 @@ public class SimpleSortTests extends ESIntegTestCase {
         assertOrderedSearchHits(searchResponse, "data.activity.6", "data.activity.5");
     }
 
+    @Test
     public void testTrackScores() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -325,6 +299,8 @@ public class SimpleSortTests extends ESIntegTestCase {
         }
     }
 
+
+    @Test
     public void test3078() {
         createIndex("test");
         ensureGreen();
@@ -355,8 +331,8 @@ public class SimpleSortTests extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(1).sortValues()[0].toString(), equalTo("10"));
         assertThat(searchResponse.getHits().getAt(2).sortValues()[0].toString(), equalTo("100"));
 
-        // optimize
-        optimize();
+        // force merge
+        forceMerge();
         refresh();
 
         client().prepareIndex("test", "type", Integer.toString(1)).setSource("field", Integer.toString(1)).execute().actionGet();
@@ -372,6 +348,7 @@ public class SimpleSortTests extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(2).sortValues()[0].toString(), equalTo("100"));
     }
 
+    @Test
     public void testScoreSortDirection() throws Exception {
         createIndex("test");
         ensureGreen();
@@ -414,7 +391,9 @@ public class SimpleSortTests extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).getId(), equalTo("1"));
     }
 
-    public void testScoreSortDirectionWithFunctionScore() throws Exception {
+
+    @Test
+    public void testScoreSortDirection_withFunctionScore() throws Exception {
         createIndex("test");
         ensureGreen();
 
@@ -449,6 +428,7 @@ public class SimpleSortTests extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).getId(), equalTo("1"));
     }
 
+    @Test
     public void testIssue2986() {
         createIndex("test");
 
@@ -463,6 +443,7 @@ public class SimpleSortTests extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testIssue2991() {
         for (int i = 1; i < 4; i++) {
             try {
@@ -498,6 +479,7 @@ public class SimpleSortTests extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testSimpleSorts() throws Exception {
         Random random = getRandom();
         assertAcked(prepareCreate("test")
@@ -752,6 +734,7 @@ public class SimpleSortTests extends ESIntegTestCase {
         assertNoFailures(searchResponse);
     }
 
+    @Test
     public void test2920() throws IOException {
         assertAcked(prepareCreate("test").addMapping(
                 "test",
@@ -768,6 +751,7 @@ public class SimpleSortTests extends ESIntegTestCase {
         assertNoFailures(searchResponse);
     }
 
+    @Test
     public void testSortMinValueScript() throws IOException {
         String mapping = jsonBuilder().startObject().startObject("type1").startObject("properties")
                 .startObject("lvalue").field("type", "long").endObject()
@@ -855,6 +839,7 @@ public class SimpleSortTests extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testDocumentsWithNullValue() throws Exception {
         // TODO: sort shouldn't fail when sort field is mapped dynamically
         // We have to specify mapping explicitly because by the time search is performed dynamic mapping might not
@@ -948,6 +933,7 @@ public class SimpleSortTests extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(0).field("id").value(), equalTo("2"));
     }
 
+    @Test
     public void testSortMissingNumbers() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1",
                 XContentFactory.jsonBuilder()
@@ -1022,6 +1008,7 @@ public class SimpleSortTests extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(2).id(), equalTo("3"));
     }
 
+    @Test
     public void testSortMissingStrings() throws IOException {
         assertAcked(prepareCreate("test").addMapping("type1",
                 XContentFactory.jsonBuilder()
@@ -1109,6 +1096,7 @@ public class SimpleSortTests extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getAt(2).id(), equalTo("3"));
     }
 
+    @Test
     public void testIgnoreUnmapped() throws Exception {
         createIndex("test");
         ensureYellow();
@@ -1140,6 +1128,7 @@ public class SimpleSortTests extends ESIntegTestCase {
         assertNoFailures(searchResponse);
     }
 
+    @Test
     public void testSortMVField() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties")
@@ -1454,6 +1443,7 @@ public class SimpleSortTests extends ESIntegTestCase {
         assertThat(((Text) searchResponse.getHits().getAt(2).sortValues()[0]).string(), equalTo("03"));
     }
 
+    @Test
     public void testSortOnRareField() throws IOException {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties")
@@ -1619,6 +1609,7 @@ public class SimpleSortTests extends ESIntegTestCase {
     /**
      * Test case for issue 6150: https://github.com/elasticsearch/elasticsearch/issues/6150
      */
+    @Test
     public void testNestedSort() throws IOException, InterruptedException, ExecutionException {
         assertAcked(prepareCreate("test")
                 .addMapping("type",
@@ -1686,6 +1677,7 @@ public class SimpleSortTests extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testSortDuelBetweenSingleShardAndMultiShardIndex() throws Exception {
         String sortField = "sortField";
         assertAcked(prepareCreate("test1")
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/StatsTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/StatsTests.java
index 0b519fa..dfc3745 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/StatsTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/StatsTests.java
@@ -28,6 +28,7 @@ import org.elasticsearch.search.aggregations.bucket.global.Global;
 import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
 import org.elasticsearch.search.aggregations.metrics.AbstractNumericTestCase;
 import org.elasticsearch.search.aggregations.metrics.stats.Stats;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -48,13 +49,16 @@ import static org.hamcrest.Matchers.sameInstance;
  *
  */
 public class StatsTests extends AbstractNumericTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     @Override
+    @Test
     public void testEmptyAggregation() throws Exception {
+
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0).subAggregation(stats("stats")))
@@ -79,6 +83,7 @@ public class StatsTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testUnmapped() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx_unmapped")
                 .setQuery(matchAllQuery())
@@ -100,6 +105,7 @@ public class StatsTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testSingleValuedField() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -143,7 +149,9 @@ public class StatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldGetProperty() throws Exception {
+    @Test
+    public void testSingleValuedField_getProperty() throws Exception {
+
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(global("global").subAggregation(stats("stats").field("value"))).execute().actionGet();
 
@@ -180,7 +188,8 @@ public class StatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldPartiallyUnmapped() throws Exception {
+    @Test
+    public void testSingleValuedField_PartiallyUnmapped() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx", "idx_unmapped")
                 .setQuery(matchAllQuery())
                 .addAggregation(stats("stats").field("value"))
@@ -201,7 +210,8 @@ public class StatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(stats("stats").field("value").script(new Script("_value + 1")))
@@ -222,7 +232,8 @@ public class StatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -245,6 +256,7 @@ public class StatsTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testMultiValuedField() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -266,7 +278,8 @@ public class StatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(stats("stats").field("values").script(new Script("_value - 1")))
@@ -287,7 +300,8 @@ public class StatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -310,7 +324,8 @@ public class StatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValued() throws Exception {
+    @Test
+    public void testScript_SingleValued() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(stats("stats").script(new Script("doc['value'].value")))
@@ -331,7 +346,8 @@ public class StatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_SingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -354,7 +370,8 @@ public class StatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_ExplicitSingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -377,7 +394,8 @@ public class StatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void testScript_MultiValued() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(stats("stats").script(new Script("doc['values'].values")))
@@ -398,7 +416,8 @@ public class StatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitMultiValued() throws Exception {
+    @Test
+    public void testScript_ExplicitMultiValued() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(stats("stats").script(new Script("doc['values'].values")))
@@ -419,7 +438,8 @@ public class StatsTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValuedWithParams() throws Exception {
+    @Test
+    public void testScript_MultiValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/StringTermsTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/StringTermsTests.java
index 55672a0..be9e90f 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/StringTermsTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/StringTermsTests.java
@@ -43,6 +43,7 @@ import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.search.aggregations.metrics.valuecount.ValueCount;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.text.NumberFormat;
@@ -78,6 +79,7 @@ import static org.hamcrest.core.IsNull.nullValue;
  */
 @ESIntegTestCase.SuiteScopeTestCase
 public class StringTermsTests extends AbstractTermsTestCase {
+
     private static final String SINGLE_VALUED_FIELD_NAME = "s_value";
     private static final String MULTI_VALUED_FIELD_NAME = "s_values";
     private static Map<String, Map<String, Object>> expectedMultiSortBuckets;
@@ -86,7 +88,7 @@ public class StringTermsTests extends AbstractTermsTestCase {
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     @Override
     public void setupSuiteScopeCluster() throws Exception {
         createIndex("idx");
@@ -191,8 +193,9 @@ public class StringTermsTests extends AbstractTermsTestCase {
         return bucket.getKeyAsString();
     }
 
+    @Test
     // the main purpose of this test is to make sure we're not allocating 2GB of memory per shard
-    public void testSizeIsZero() {
+    public void sizeIsZero() {
         final int minDocCount = randomInt(1);
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -210,7 +213,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         assertThat(terms.getBuckets().size(), equalTo(minDocCount == 0 ? 105 : 100)); // 105 because of the other type
     }
 
-    public void testSingleValueField() throws Exception {
+    @Test
+    public void singleValueField() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -237,7 +241,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValueFieldWithGlobalOrdinals() throws Exception {
+    @Test
+    public void singleValueField_withGlobalOrdinals() throws Exception {
         ExecutionMode[] executionModes = new ExecutionMode[] { null, ExecutionMode.GLOBAL_ORDINALS, ExecutionMode.GLOBAL_ORDINALS_HASH,
                 ExecutionMode.GLOBAL_ORDINALS_LOW_CARDINALITY };
         for (ExecutionMode executionMode : executionModes) {
@@ -264,7 +269,9 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValueFieldWithRegexFiltering() throws Exception {
+    @Test
+    public void singleValueField_WithRegexFiltering() throws Exception {
+
         // include without exclude
         // we should be left with: val000, val001, val002, val003, val004, val005, val006, val007, val008, val009
 
@@ -339,7 +346,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValueFieldWithExactTermFiltering() throws Exception {
+    @Test
+    public void singleValueField_WithExactTermFiltering() throws Exception {
         // include without exclude
         String incVals[] = { "val000", "val001", "val002", "val003", "val004", "val005", "val006", "val007", "val008", "val009" };
         SearchResponse response = client()
@@ -420,7 +428,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
 
     }
 
-    public void testSingleValueFieldWithMaxSize() throws Exception {
+    @Test
+    public void singleValueField_WithMaxSize() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("high_card_type")
@@ -444,7 +453,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValueFieldOrderedByTermAsc() throws Exception {
+    @Test
+    public void singleValueField_OrderedByTermAsc() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -469,7 +479,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValueFieldOrderedByTermDesc() throws Exception {
+    @Test
+    public void singleValueField_OrderedByTermDesc() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -494,7 +505,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldWithSubAggregation() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -527,7 +539,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldWithSubAggregation_Inherited() throws Exception {
+    @Test
+    public void singleValuedField_WithSubAggregation_Inherited() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -554,7 +567,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void singleValuedField_WithValueScript() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -578,7 +592,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testMultiValuedFieldWithValueScriptNotUnique() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript_NotUnique() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -600,7 +615,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         assertThat(bucket.getDocCount(), equalTo(5l));
     }
 
-    public void testMultiValuedField() throws Exception {
+    @Test
+    public void multiValuedField() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -627,7 +643,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testMultiValuedScript() throws Exception {
+    @Test
+    public void multiValuedScript() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -654,7 +671,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -694,7 +712,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
      * doc_count: 1 - val_count: 2
      */
 
-    public void testMultiValuedFieldWithValueScriptWithInheritedSubAggregator() throws Exception {
+    @Test
+    public void multiValuedField_WithValueScript_WithInheritedSubAggregator() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -728,7 +747,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testScriptSingleValue() throws Exception {
+    @Test
+    public void script_SingleValue() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -751,7 +771,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testScriptSingleValueExplicitSingleValue() throws Exception {
+    @Test
+    public void script_SingleValue_ExplicitSingleValue() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -774,7 +795,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testScriptSingleValueWithSubAggregatorInherited() throws Exception {
+    @Test
+    public void script_SingleValue_WithSubAggregator_Inherited() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -801,7 +823,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void script_MultiValued() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -828,7 +851,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testScriptMultiValuedWithAggregatorInherited() throws Exception {
+    @Test
+    public void script_MultiValued_WithAggregatorInherited() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx")
                 .setTypes("type")
@@ -862,7 +886,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx_unmapped")
                 .setTypes("type")
@@ -878,7 +903,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         assertThat(terms.getBuckets().size(), equalTo(0));
     }
 
-    public void testPartiallyUnmapped() throws Exception {
+    @Test
+    public void partiallyUnmapped() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx", "idx_unmapped")
                 .setTypes("type")
@@ -901,7 +927,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testStringTermsNestedIntoPerBucketAggregator() throws Exception {
+    @Test
+    public void stringTermsNestedIntoPerBucketAggregator() throws Exception {
         // no execution hint so that the logic that decides whether or not to use ordinals is executed
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -928,7 +955,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testEmptyAggregation() throws Exception {
+    @Test
+    public void emptyAggregation() throws Exception {
         SearchResponse searchResponse = client()
                 .prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
@@ -948,7 +976,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         assertThat(terms.getBuckets().isEmpty(), is(true));
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAsc() throws Exception {
         boolean asc = true;
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -977,7 +1006,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByIllegalAgg() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByIllegalAgg() throws Exception {
         boolean asc = true;
         try {
             client()
@@ -1006,7 +1036,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedBySingleBucketSubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleBucketSubAggregationAsc() throws Exception {
         boolean asc = randomBoolean();
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -1042,7 +1073,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         assertThat(filter.getDocCount(), equalTo(asc ? 3l : 2l));
     }
 
-    public void testSingleValuedFieldOrderedBySubAggregationAscMultiHierarchyLevels() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySubAggregationAsc_MultiHierarchyLevels() throws Exception {
         boolean asc = randomBoolean();
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -1099,7 +1131,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         assertThat(stats.getMax(), equalTo(asc ? 4.0 : 2.0));
     }
 
-    public void testSingleValuedFieldOrderedBySubAggregationAscMultiHierarchyLevelsSpecialChars() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySubAggregationAsc_MultiHierarchyLevels_specialChars() throws Exception {
         StringBuilder filter2NameBuilder = new StringBuilder("filt.er2");
         filter2NameBuilder.append(randomAsciiOfLengthBetween(3, 10).replace("[", "").replace("]", "").replace(">", ""));
         String filter2Name = filter2NameBuilder.toString();
@@ -1162,7 +1195,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         assertThat(stats.getMax(), equalTo(asc ? 4.0 : 2.0));
     }
 
-    public void testSingleValuedFieldOrderedBySubAggregationAscMultiHierarchyLevelsSpecialCharsNoDotNotation() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySubAggregationAsc_MultiHierarchyLevels_specialCharsNoDotNotation() throws Exception {
         StringBuilder filter2NameBuilder = new StringBuilder("filt.er2");
         filter2NameBuilder.append(randomAsciiOfLengthBetween(3, 10).replace("[", "").replace("]", "").replace(">", ""));
         String filter2Name = filter2NameBuilder.toString();
@@ -1225,7 +1259,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         assertThat(stats.getMax(), equalTo(asc ? 4.0 : 2.0));
     }
 
-    public void testSingleValuedFieldOrderedByMissingSubAggregation() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMissingSubAggregation() throws Exception {
         for (String index : Arrays.asList("idx", "idx_unmapped")) {
             try {
                 client().prepareSearch(index)
@@ -1243,7 +1278,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByNonMetricsOrMultiBucketSubAggregation() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByNonMetricsOrMultiBucketSubAggregation() throws Exception {
         for (String index : Arrays.asList("idx", "idx_unmapped")) {
             try {
                 client().prepareSearch(index)
@@ -1263,7 +1299,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByMultiValuedSubAggregationWithUknownMetric() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValuedSubAggregation_WithUknownMetric() throws Exception {
         for (String index : Arrays.asList("idx", "idx_unmapped")) {
             try {
                 SearchResponse response = client()
@@ -1283,7 +1320,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedByMultiValuedSubAggregationWithoutMetric() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValuedSubAggregation_WithoutMetric() throws Exception {
         for (String index : Arrays.asList("idx", "idx_unmapped")) {
             try {
                 client().prepareSearch(index)
@@ -1303,7 +1341,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationDesc() throws Exception {
         boolean asc = false;
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -1334,7 +1373,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
 
     }
 
-    public void testSingleValuedFieldOrderedByMultiValueSubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValueSubAggregationAsc() throws Exception {
         boolean asc = true;
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -1362,9 +1402,11 @@ public class StringTermsTests extends AbstractTermsTestCase {
             assertThat(stats.getMax(), equalTo((double) i));
             i++;
         }
+
     }
 
-    public void testSingleValuedFieldOrderedByMultiValueSubAggregationDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValueSubAggregationDesc() throws Exception {
         boolean asc = false;
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -1395,7 +1437,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
 
     }
 
-    public void testSingleValuedFieldOrderedByMultiValueExtendedStatsAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByMultiValueExtendedStatsAsc() throws Exception {
         boolean asc = true;
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -1427,7 +1470,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
 
     }
 
-    public void testSingleValuedFieldOrderedByStatsAggAscWithTermsSubAgg() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByStatsAggAscWithTermsSubAgg() throws Exception {
         boolean asc = true;
         SearchResponse response = client()
                 .prepareSearch("idx")
@@ -1472,38 +1516,45 @@ public class StringTermsTests extends AbstractTermsTestCase {
 
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscAndTermsDesc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAscAndTermsDesc() throws Exception {
         String[] expectedKeys = new String[] { "val1", "val2", "val4", "val3", "val7", "val6", "val5" };
         assertMultiSortResponse(expectedKeys, Terms.Order.aggregation("avg_l", true), Terms.Order.term(false));
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscAndTermsAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAscAndTermsAsc() throws Exception {
         String[] expectedKeys = new String[] { "val1", "val2", "val3", "val4", "val5", "val6", "val7" };
         assertMultiSortResponse(expectedKeys, Terms.Order.aggregation("avg_l", true), Terms.Order.term(true));
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationDescAndTermsAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationDescAndTermsAsc() throws Exception {
         String[] expectedKeys = new String[] { "val5", "val6", "val7", "val3", "val4", "val2", "val1" };
         assertMultiSortResponse(expectedKeys, Terms.Order.aggregation("avg_l", false), Terms.Order.term(true));
     }
 
-    public void testSingleValuedFieldOrderedByCountAscAndSingleValueSubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByCountAscAndSingleValueSubAggregationAsc() throws Exception {
         String[] expectedKeys = new String[] { "val6", "val7", "val3", "val4", "val5", "val1", "val2" };
         assertMultiSortResponse(expectedKeys, Terms.Order.count(true), Terms.Order.aggregation("avg_l", true));
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscSingleValueSubAggregationAsc() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAscSingleValueSubAggregationAsc() throws Exception {
         String[] expectedKeys = new String[] { "val6", "val7", "val3", "val5", "val4", "val1", "val2" };
         assertMultiSortResponse(expectedKeys, Terms.Order.aggregation("sum_d", true), Terms.Order.aggregation("avg_l", true));
     }
 
-    public void testSingleValuedFieldOrderedByThreeCriteria() throws Exception {
+    @Test
+    public void singleValuedField_OrderedByThreeCriteria() throws Exception {
         String[] expectedKeys = new String[] { "val2", "val1", "val4", "val5", "val3", "val6", "val7" };
         assertMultiSortResponse(expectedKeys, Terms.Order.count(false), Terms.Order.aggregation("sum_d", false),
                 Terms.Order.aggregation("avg_l", false));
     }
 
-    public void testSingleValuedFieldOrderedBySingleValueSubAggregationAscAsCompound() throws Exception {
+    @Test
+    public void singleValuedField_OrderedBySingleValueSubAggregationAscAsCompound() throws Exception {
         String[] expectedKeys = new String[] { "val1", "val2", "val3", "val4", "val5", "val6", "val7" };
         assertMultiSortResponse(expectedKeys, Terms.Order.aggregation("avg_l", true));
     }
@@ -1539,7 +1590,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         }
     }
 
-    public void testIndexMetaField() throws Exception {
+    @Test
+    public void indexMetaField() throws Exception {
         SearchResponse response = client()
                 .prepareSearch("idx", "empty_bucket_idx")
                 .setTypes("type")
@@ -1569,7 +1621,8 @@ public class StringTermsTests extends AbstractTermsTestCase {
         assertEquals(5L, terms.getBucketByKey("i").getDocCount());
     }
 
-    public void testOtherDocCount() {
+    @Test
+    public void otherDocCount() {
         testOtherDocCount(SINGLE_VALUED_FIELD_NAME, MULTI_VALUED_FIELD_NAME);
     }
 }
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SumTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SumTests.java
index 4b9ba48..d36d833 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SumTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SumTests.java
@@ -27,6 +27,7 @@ import org.elasticsearch.search.aggregations.bucket.global.Global;
 import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
 import org.elasticsearch.search.aggregations.metrics.AbstractNumericTestCase;
 import org.elasticsearch.search.aggregations.metrics.sum.Sum;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -45,12 +46,14 @@ import static org.hamcrest.Matchers.notNullValue;
  *
  */
 public class SumTests extends AbstractNumericTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     @Override
+    @Test
     public void testEmptyAggregation() throws Exception {
 
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
@@ -71,6 +74,7 @@ public class SumTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testUnmapped() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx_unmapped")
                 .setQuery(matchAllQuery())
@@ -86,6 +90,7 @@ public class SumTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testSingleValuedField() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -100,7 +105,8 @@ public class SumTests extends AbstractNumericTestCase {
         assertThat(sum.getValue(), equalTo((double) 1+2+3+4+5+6+7+8+9+10));
     }
 
-    public void testSingleValuedFieldWithFormatter() throws Exception {
+    @Test
+    public void testSingleValuedField_WithFormatter() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(sum("sum").format("0000.0").field("value")).execute().actionGet();
 
@@ -114,7 +120,8 @@ public class SumTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldGetProperty() throws Exception {
+    @Test
+    public void testSingleValuedField_getProperty() throws Exception {
 
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(global("global").subAggregation(sum("sum").field("value"))).execute().actionGet();
@@ -139,7 +146,7 @@ public class SumTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldPartiallyUnmapped() throws Exception {
+    public void testSingleValuedField_PartiallyUnmapped() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx", "idx_unmapped")
                 .setQuery(matchAllQuery())
                 .addAggregation(sum("sum").field("value"))
@@ -154,7 +161,8 @@ public class SumTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(sum("sum").field("value").script(new Script("_value + 1")))
@@ -169,7 +177,8 @@ public class SumTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("increment", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -186,7 +195,8 @@ public class SumTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValued() throws Exception {
+    @Test
+    public void testScript_SingleValued() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(sum("sum").script(new Script("doc['value'].value")))
@@ -201,7 +211,8 @@ public class SumTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_SingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -218,7 +229,8 @@ public class SumTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_ExplicitSingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -236,7 +248,8 @@ public class SumTests extends AbstractNumericTestCase {
 
 
     @Override
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void testScript_MultiValued() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(sum("sum").script(new Script("[ doc['value'].value, doc['value'].value + 1 ]")))
@@ -251,7 +264,8 @@ public class SumTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitMultiValued() throws Exception {
+    @Test
+    public void testScript_ExplicitMultiValued() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(sum("sum").script(new Script("[ doc['value'].value, doc['value'].value + 1 ]")))
@@ -266,7 +280,8 @@ public class SumTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValuedWithParams() throws Exception {
+    @Test
+    public void testScript_MultiValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("inc", 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -284,6 +299,7 @@ public class SumTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testMultiValuedField() throws Exception {
 
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -300,7 +316,8 @@ public class SumTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript() throws Exception {
 
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -315,7 +332,8 @@ public class SumTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("increment", 1);
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/TDigestPercentileRanksTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/TDigestPercentileRanksTests.java
index e32a7f0..0c5aef4 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/TDigestPercentileRanksTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/TDigestPercentileRanksTests.java
@@ -32,6 +32,7 @@ import org.elasticsearch.search.aggregations.metrics.AbstractNumericTestCase;
 import org.elasticsearch.search.aggregations.metrics.percentiles.Percentile;
 import org.elasticsearch.search.aggregations.metrics.percentiles.PercentileRanks;
 import org.elasticsearch.search.aggregations.metrics.percentiles.PercentileRanksBuilder;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.Collection;
@@ -41,25 +42,20 @@ import java.util.List;
 import java.util.Map;
 
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.global;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.histogram;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.percentileRanks;
+import static org.elasticsearch.search.aggregations.AggregationBuilders.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.sameInstance;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     private static double[] randomPercents(long minValue, long maxValue) {
 
         final int length = randomIntBetween(1, 20);
@@ -112,7 +108,9 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testEmptyAggregation() throws Exception {
+
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0)
@@ -134,6 +132,7 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testUnmapped() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx_unmapped")
                 .setQuery(matchAllQuery())
@@ -154,6 +153,7 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testSingleValuedField() throws Exception {
         final double[] pcts = randomPercents(minValue, maxValue);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -170,7 +170,8 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldGetProperty() throws Exception {
+    @Test
+    public void testSingleValuedField_getProperty() throws Exception {
         final double[] pcts = randomPercents(minValue, maxValue);
         SearchResponse searchResponse = client()
                 .prepareSearch("idx")
@@ -196,6 +197,7 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
 
     }
 
+    @Test
     public void testSingleValuedFieldOutsideRange() throws Exception {
         final double[] pcts = new double[] {minValue - 1, maxValue + 1};
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -212,7 +214,8 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldPartiallyUnmapped() throws Exception {
+    @Test
+    public void testSingleValuedField_PartiallyUnmapped() throws Exception {
         final double[] pcts = randomPercents(minValue, maxValue);
         SearchResponse searchResponse = client().prepareSearch("idx", "idx_unmapped")
                 .setQuery(matchAllQuery())
@@ -228,7 +231,8 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript() throws Exception {
         final double[] pcts = randomPercents(minValue - 1, maxValue - 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -244,7 +248,8 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         final double[] pcts = randomPercents(minValue - 1, maxValue - 1);
@@ -263,6 +268,7 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testMultiValuedField() throws Exception {
         final double[] pcts = randomPercents(minValues, maxValues);
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -279,7 +285,8 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript() throws Exception {
         final double[] pcts = randomPercents(minValues - 1, maxValues - 1);
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -294,7 +301,8 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
         assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1);
     }
 
-    public void testMultiValuedFieldWithValueScriptReverse() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript_Reverse() throws Exception {
         final double[] pcts = randomPercents(-maxValues, -minValues);
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -310,7 +318,8 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         final double[] pcts = randomPercents(minValues - 1, maxValues - 1);
@@ -329,7 +338,8 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValued() throws Exception {
+    @Test
+    public void testScript_SingleValued() throws Exception {
         final double[] pcts = randomPercents(minValue, maxValue);
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -345,7 +355,8 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_SingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         final double[] pcts = randomPercents(minValue - 1, maxValue - 1);
@@ -364,7 +375,8 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_ExplicitSingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         final double[] pcts = randomPercents(minValue -1 , maxValue - 1);
@@ -383,7 +395,8 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void testScript_MultiValued() throws Exception {
         final double[] pcts = randomPercents(minValues, maxValues);
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -399,7 +412,8 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitMultiValued() throws Exception {
+    @Test
+    public void testScript_ExplicitMultiValued() throws Exception {
         final double[] pcts = randomPercents(minValues, maxValues);
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -415,7 +429,8 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValuedWithParams() throws Exception {
+    @Test
+    public void testScript_MultiValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         final double[] pcts = randomPercents(minValues - 1, maxValues - 1);
@@ -434,6 +449,7 @@ public class TDigestPercentileRanksTests extends AbstractNumericTestCase {
         assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1);
     }
 
+    @Test
     public void testOrderBySubAggregation() {
         boolean asc = randomBoolean();
         SearchResponse searchResponse = client().prepareSearch("idx")
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/TDigestPercentilesTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/TDigestPercentilesTests.java
index 68975ae..afa9f20 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/TDigestPercentilesTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/TDigestPercentilesTests.java
@@ -32,6 +32,7 @@ import org.elasticsearch.search.aggregations.metrics.AbstractNumericTestCase;
 import org.elasticsearch.search.aggregations.metrics.percentiles.Percentile;
 import org.elasticsearch.search.aggregations.metrics.percentiles.Percentiles;
 import org.elasticsearch.search.aggregations.metrics.percentiles.PercentilesBuilder;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.Collection;
@@ -41,25 +42,20 @@ import java.util.List;
 import java.util.Map;
 
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.global;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.histogram;
-import static org.elasticsearch.search.aggregations.AggregationBuilders.percentiles;
+import static org.elasticsearch.search.aggregations.AggregationBuilders.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.lessThanOrEqualTo;
-import static org.hamcrest.Matchers.notNullValue;
-import static org.hamcrest.Matchers.sameInstance;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
  */
 public class TDigestPercentilesTests extends AbstractNumericTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     private static double[] randomPercentiles() {
         final int length = randomIntBetween(1, 20);
         final double[] percentiles = new double[length];
@@ -112,7 +108,9 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testEmptyAggregation() throws Exception {
+
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0)
@@ -134,6 +132,7 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testUnmapped() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx_unmapped")
                 .setQuery(matchAllQuery())
@@ -154,6 +153,7 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testSingleValuedField() throws Exception {
         final double[] pcts = randomPercentiles();
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -170,7 +170,8 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldGetProperty() throws Exception {
+    @Test
+    public void testSingleValuedField_getProperty() throws Exception {
         final double[] pcts = randomPercentiles();
         SearchResponse searchResponse = client()
                 .prepareSearch("idx")
@@ -196,7 +197,8 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldPartiallyUnmapped() throws Exception {
+    @Test
+    public void testSingleValuedField_PartiallyUnmapped() throws Exception {
         final double[] pcts = randomPercentiles();
         SearchResponse searchResponse = client().prepareSearch("idx", "idx_unmapped")
                 .setQuery(matchAllQuery())
@@ -212,7 +214,8 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript() throws Exception {
         final double[] pcts = randomPercentiles();
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -228,7 +231,8 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testSingleValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testSingleValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         final double[] pcts = randomPercentiles();
@@ -247,6 +251,7 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
+    @Test
     public void testMultiValuedField() throws Exception {
         final double[] pcts = randomPercentiles();
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -263,7 +268,8 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScript() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript() throws Exception {
         final double[] pcts = randomPercentiles();
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -278,12 +284,13 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
         assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1);
     }
 
-    public void testMultiValuedFieldWithValueScriptReverse() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript_Reverse() throws Exception {
         final double[] pcts = randomPercentiles();
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(randomCompression(percentiles("percentiles"))
-                        .field("values").script(new Script("_value * -1"))
+.field("values").script(new Script("_value * -1"))
                         .percentiles(pcts))
                 .execute().actionGet();
 
@@ -294,7 +301,8 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testMultiValuedFieldWithValueScriptWithParams() throws Exception {
+    @Test
+    public void testMultiValuedField_WithValueScript_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         final double[] pcts = randomPercentiles();
@@ -313,7 +321,8 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValued() throws Exception {
+    @Test
+    public void testScript_SingleValued() throws Exception {
         final double[] pcts = randomPercentiles();
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -329,14 +338,15 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_SingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         final double[] pcts = randomPercentiles();
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(randomCompression(percentiles("percentiles"))
-                        .script(
+.script(
                                 new Script("doc['value'].value - dec", ScriptType.INLINE, null, params))
                         .percentiles(pcts))
                 .execute().actionGet();
@@ -348,14 +358,15 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitSingleValuedWithParams() throws Exception {
+    @Test
+    public void testScript_ExplicitSingleValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         final double[] pcts = randomPercentiles();
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(randomCompression(percentiles("percentiles"))
-                        .script(
+.script(
                                 new Script("doc['value'].value - dec", ScriptType.INLINE, null, params))
                         .percentiles(pcts))
                 .execute().actionGet();
@@ -367,7 +378,8 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValued() throws Exception {
+    @Test
+    public void testScript_MultiValued() throws Exception {
         final double[] pcts = randomPercentiles();
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
@@ -383,12 +395,13 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptExplicitMultiValued() throws Exception {
+    @Test
+    public void testScript_ExplicitMultiValued() throws Exception {
         final double[] pcts = randomPercentiles();
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(randomCompression(percentiles("percentiles"))
-                        .script(new Script("doc['values'].values"))
+.script(new Script("doc['values'].values"))
                         .percentiles(pcts))
                 .execute().actionGet();
 
@@ -399,7 +412,8 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
     }
 
     @Override
-    public void testScriptMultiValuedWithParams() throws Exception {
+    @Test
+    public void testScript_MultiValued_WithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("dec", 1);
         final double[] pcts = randomPercentiles();
@@ -418,6 +432,7 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
         assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1);
     }
 
+    @Test
     public void testOrderBySubAggregation() {
         boolean asc = randomBoolean();
         SearchResponse searchResponse = client().prepareSearch("idx")
@@ -443,4 +458,5 @@ public class TDigestPercentilesTests extends AbstractNumericTestCase {
             previous = p99;
         }
     }
+
 }
\ No newline at end of file
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/TransformOnIndexMapperTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/TransformOnIndexMapperTests.java
index 2041196..69da9c7 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/TransformOnIndexMapperTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/TransformOnIndexMapperTests.java
@@ -32,6 +32,7 @@ import org.elasticsearch.script.groovy.GroovyScriptEngineService;
 import org.elasticsearch.search.suggest.SuggestBuilders;
 import org.elasticsearch.search.suggest.completion.CompletionSuggestion;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Collection;
@@ -56,12 +57,14 @@ import static org.hamcrest.Matchers.not;
  */
 @SuppressCodecs("*") // requires custom completion format
 public class TransformOnIndexMapperTests extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
 
-    public void testSearchOnTransformed() throws Exception {
+    @Test
+    public void searchOnTransformed() throws Exception {
         setup(true);
 
         // Searching by the field created in the transport finds the entry
@@ -76,7 +79,8 @@ public class TransformOnIndexMapperTests extends ESIntegTestCase {
         assertHitCount(response, 0);
     }
 
-    public void testGetTransformed() throws Exception {
+    @Test
+    public void getTransformed() throws Exception {
         setup(getRandom().nextBoolean());
         GetResponse response = client().prepareGet("test", "test", "righttitle").get();
         assertExists(response);
@@ -90,7 +94,8 @@ public class TransformOnIndexMapperTests extends ESIntegTestCase {
     // TODO: the completion suggester currently returns payloads with no reencoding so this test
     // exists to make sure that _source transformation and completion work well together. If we
     // ever fix the completion suggester to reencode the payloads then we can remove this test.
-    public void testContextSuggestPayloadTransformed() throws Exception {
+    @Test
+    public void contextSuggestPayloadTransformed() throws Exception {
         XContentBuilder builder = XContentFactory.jsonBuilder().startObject();
         builder.startObject("properties");
         builder.startObject("suggest").field("type", "completion").field("payloads", true).endObject();
@@ -177,4 +182,5 @@ public class TransformOnIndexMapperTests extends ESIntegTestCase {
     private void assertRightTitleSourceTransformed(Map<String, Object> source) {
         assertThat(source, both(hasEntry("destination", (Object) "findme")).and(not(hasKey("content"))));
     }
+
 }
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ValueCountTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ValueCountTests.java
index 8bb6b1a..ca2cffc 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ValueCountTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ValueCountTests.java
@@ -26,6 +26,7 @@ import org.elasticsearch.script.groovy.GroovyPlugin;
 import org.elasticsearch.search.aggregations.bucket.global.Global;
 import org.elasticsearch.search.aggregations.metrics.valuecount.ValueCount;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -50,7 +51,7 @@ public class ValueCountTests extends ESIntegTestCase {
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
     @Override
     public void setupSuiteScopeCluster() throws Exception {
         createIndex("idx");
@@ -68,7 +69,8 @@ public class ValueCountTests extends ESIntegTestCase {
         ensureSearchable();
     }
 
-    public void testUnmapped() throws Exception {
+    @Test
+    public void unmapped() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx_unmapped")
                 .setQuery(matchAllQuery())
                 .addAggregation(count("count").field("value"))
@@ -82,7 +84,9 @@ public class ValueCountTests extends ESIntegTestCase {
         assertThat(valueCount.getValue(), equalTo(0l));
     }
 
-    public void testSingleValuedField() throws Exception {
+    @Test
+    public void singleValuedField() throws Exception {
+
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(count("count").field("value"))
@@ -96,7 +100,9 @@ public class ValueCountTests extends ESIntegTestCase {
         assertThat(valueCount.getValue(), equalTo(10l));
     }
 
-    public void testSingleValuedFieldGetProperty() throws Exception {
+    @Test
+    public void singleValuedField_getProperty() throws Exception {
+
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(global("global").subAggregation(count("count").field("value"))).execute().actionGet();
 
@@ -118,7 +124,8 @@ public class ValueCountTests extends ESIntegTestCase {
         assertThat((double) valueCount.getProperty("value"), equalTo(10d));
     }
 
-    public void testSingleValuedFieldPartiallyUnmapped() throws Exception {
+    @Test
+    public void singleValuedField_PartiallyUnmapped() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx", "idx_unmapped")
                 .setQuery(matchAllQuery())
                 .addAggregation(count("count").field("value"))
@@ -132,7 +139,9 @@ public class ValueCountTests extends ESIntegTestCase {
         assertThat(valueCount.getValue(), equalTo(10l));
     }
 
-    public void testMultiValuedField() throws Exception {
+    @Test
+    public void multiValuedField() throws Exception {
+
         SearchResponse searchResponse = client().prepareSearch("idx")
                 .setQuery(matchAllQuery())
                 .addAggregation(count("count").field("values"))
@@ -146,7 +155,8 @@ public class ValueCountTests extends ESIntegTestCase {
         assertThat(valueCount.getValue(), equalTo(20l));
     }
 
-    public void testSingleValuedScript() throws Exception {
+    @Test
+    public void singleValuedScript() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(count("count").script(new Script("doc['value'].value"))).execute().actionGet();
 
@@ -158,7 +168,8 @@ public class ValueCountTests extends ESIntegTestCase {
         assertThat(valueCount.getValue(), equalTo(10l));
     }
 
-    public void testMultiValuedScript() throws Exception {
+    @Test
+    public void multiValuedScript() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
                 .addAggregation(count("count").script(new Script("doc['values'].values"))).execute().actionGet();
 
@@ -170,7 +181,8 @@ public class ValueCountTests extends ESIntegTestCase {
         assertThat(valueCount.getValue(), equalTo(20l));
     }
 
-    public void testSingleValuedScriptWithParams() throws Exception {
+    @Test
+    public void singleValuedScriptWithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("s", "value");
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
@@ -184,7 +196,8 @@ public class ValueCountTests extends ESIntegTestCase {
         assertThat(valueCount.getValue(), equalTo(10l));
     }
 
-    public void testMultiValuedScriptWithParams() throws Exception {
+    @Test
+    public void multiValuedScriptWithParams() throws Exception {
         Map<String, Object> params = new HashMap<>();
         params.put("s", "values");
         SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
@@ -197,4 +210,5 @@ public class ValueCountTests extends ESIntegTestCase {
         assertThat(valueCount.getName(), equalTo("count"));
         assertThat(valueCount.getValue(), equalTo(20l));
     }
+
 }
\ No newline at end of file
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/script/groovy/GroovyScriptTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/script/groovy/GroovyScriptTests.java
index dcc3abf..337f4eb 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/script/groovy/GroovyScriptTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/script/groovy/GroovyScriptTests.java
@@ -23,13 +23,15 @@ import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.search.SearchPhaseExecutionException;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.common.lucene.search.function.CombineFunction;
-import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.script.Script;
+import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.script.ScriptService.ScriptType;
+import org.elasticsearch.script.groovy.GroovyScriptEngineService;
 import org.elasticsearch.search.builder.SearchSourceBuilder;
 import org.elasticsearch.search.sort.SortBuilders;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -51,11 +53,13 @@ import static org.hamcrest.Matchers.equalTo;
  */
 // TODO: refactor into unit test or proper rest tests
 public class GroovyScriptTests extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return Collections.singleton(GroovyPlugin.class);
     }
-
+    
+    @Test
     public void testGroovyBigDecimalTransformation() {
         client().prepareIndex("test", "doc", "1").setSource("foo", 5).setRefresh(true).get();
 
@@ -73,6 +77,7 @@ public class GroovyScriptTests extends ESIntegTestCase {
         assertNoFailures(resp);
     }
 
+    @Test
     public void testGroovyExceptionSerialization() throws Exception {
         List<IndexRequestBuilder> reqs = new ArrayList<>();
         for (int i = 0; i < randomIntBetween(50, 500); i++) {
@@ -108,6 +113,7 @@ public class GroovyScriptTests extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testGroovyScriptAccess() {
         client().prepareIndex("test", "doc", "1").setSource("foo", "quick brow fox jumped over the lazy dog", "bar", 1).get();
         client().prepareIndex("test", "doc", "2").setSource("foo", "fast jumping spiders", "bar", 2).get();
@@ -121,7 +127,7 @@ public class GroovyScriptTests extends ESIntegTestCase {
         assertNoFailures(resp);
         assertOrderedSearchHits(resp, "3", "2", "1");
     }
-
+    
     public void testScoreAccess() {
         client().prepareIndex("test", "doc", "1").setSource("foo", "quick brow fox jumped over the lazy dog", "bar", 1).get();
         client().prepareIndex("test", "doc", "2").setSource("foo", "fast jumping spiders", "bar", 2).get();
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/script/groovy/GroovySecurityTests.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/script/groovy/GroovySecurityTests.java
index 1e5b451..f002bd1 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/script/groovy/GroovySecurityTests.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/script/groovy/GroovySecurityTests.java
@@ -31,6 +31,7 @@ import org.elasticsearch.script.ScriptService.ScriptType;
 import org.elasticsearch.search.builder.SearchSourceBuilder;
 import org.elasticsearch.search.sort.SortBuilders;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.nio.file.Path;
 import java.util.Collection;
@@ -47,6 +48,7 @@ import static org.hamcrest.CoreMatchers.instanceOf;
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0)
 // TODO: refactor into unit test, or, proper REST test
 public class GroovySecurityTests extends ESIntegTestCase {
+    
     @Override
     public void setUp() throws Exception {
         super.setUp();
@@ -58,6 +60,7 @@ public class GroovySecurityTests extends ESIntegTestCase {
         return Collections.singleton(GroovyPlugin.class);
     }
 
+    @Test
     public void testEvilGroovyScripts() throws Exception {
         int nodes = randomIntBetween(1, 3);
         Settings nodeSettings = Settings.builder()
@@ -106,7 +109,7 @@ public class GroovySecurityTests extends ESIntegTestCase {
 
         // AccessControlException[access denied ("java.io.FilePermission" "<<ALL FILES>>" "execute")]
         assertFailure("def methodName = 'ex'; Runtime.\"${'get' + 'Runtime'}\"().\"${methodName}ec\"(\"touch /tmp/gotcha2\")");
-
+        
         // test a directory we normally have access to, but the groovy script does not.
         Path dir = createTempDir();
         // TODO: figure out the necessary escaping for windows paths here :)
diff --git a/plugins/lang-groovy/src/test/java/org/elasticsearch/search/query/SearchQueryIT.java b/plugins/lang-groovy/src/test/java/org/elasticsearch/search/query/SearchQueryIT.java
index f3b0a57..2384231 100644
--- a/plugins/lang-groovy/src/test/java/org/elasticsearch/search/query/SearchQueryIT.java
+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/search/query/SearchQueryIT.java
@@ -51,6 +51,7 @@ import org.elasticsearch.test.ESIntegTestCase;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.format.ISODateTimeFormat;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Random;
@@ -72,6 +73,7 @@ import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
 import static org.elasticsearch.index.query.QueryBuilders.matchQuery;
 import static org.elasticsearch.index.query.QueryBuilders.missingQuery;
 import static org.elasticsearch.index.query.QueryBuilders.multiMatchQuery;
+import static org.elasticsearch.index.query.QueryBuilders.notQuery;
 import static org.elasticsearch.index.query.QueryBuilders.prefixQuery;
 import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;
 import static org.elasticsearch.index.query.QueryBuilders.rangeQuery;
@@ -119,6 +121,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         return Math.min(2, cluster().numDataNodes() - 1);
     }
 
+    @Test
     public void testOmitNormsOnAll() throws ExecutionException, InterruptedException, IOException {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", jsonBuilder().startObject().startObject("type1")
@@ -150,7 +153,7 @@ public class SearchQueryIT extends ESIntegTestCase {
 
     }
 
-    // see #3952
+    @Test // see #3952
     public void testEmptyQueryString() throws ExecutionException, InterruptedException, IOException {
         createIndex("test");
         indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("field1", "the quick brown fox jumps"),
@@ -161,7 +164,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(client().prepareSearch().setQuery(queryStringQuery("")).get(), 0l); // return no docs
     }
 
-    // see https://github.com/elasticsearch/elasticsearch/issues/3177
+    @Test // see https://github.com/elasticsearch/elasticsearch/issues/3177
     public void testIssue3177() {
         createIndex("test");
         client().prepareIndex("test", "type1", "1").setSource("field1", "value1").get();
@@ -169,7 +172,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         client().prepareIndex("test", "type1", "3").setSource("field1", "value3").get();
         ensureGreen();
         waitForRelocation();
-        optimize();
+        forceMerge();
         refresh();
         assertHitCount(
                 client().prepareSearch()
@@ -177,7 +180,7 @@ public class SearchQueryIT extends ESIntegTestCase {
                         .setPostFilter(
                                 boolQuery().must(
                                         matchAllQuery()).must(
-                                        boolQuery().mustNot(boolQuery().must(termQuery("field1", "value1")).must(
+                                        notQuery(boolQuery().must(termQuery("field1", "value1")).must(
                                                 termQuery("field1", "value2"))))).get(),
                 3l);
         assertHitCount(
@@ -186,14 +189,15 @@ public class SearchQueryIT extends ESIntegTestCase {
                                 boolQuery().must(
                                         boolQuery().should(termQuery("field1", "value1")).should(termQuery("field1", "value2"))
                                                 .should(termQuery("field1", "value3"))).filter(
-                                        boolQuery().mustNot(boolQuery().must(termQuery("field1", "value1")).must(
+                                        notQuery(boolQuery().must(termQuery("field1", "value1")).must(
                                                 termQuery("field1", "value2"))))).get(),
                 3l);
         assertHitCount(
-                client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(boolQuery().mustNot(termQuery("field1", "value3"))).get(),
+                client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(notQuery(termQuery("field1", "value3"))).get(),
                 2l);
     }
 
+    @Test
     public void testIndexOptions() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "field1", "type=string,index_options=docs"));
@@ -209,7 +213,7 @@ public class SearchQueryIT extends ESIntegTestCase {
                     containsString("field \"field1\" was indexed without position data; cannot run PhraseQuery"));
     }
 
-    // see #3521
+    @Test // see #3521
     public void testConstantScoreQuery() throws Exception {
         Random random = getRandom();
         createIndex("test");
@@ -271,7 +275,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         }
     }
 
-    // see #3521
+    @Test // see #3521
     public void testAllDocsQueryString() throws InterruptedException, ExecutionException {
         createIndex("test");
         indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("foo", "bar"),
@@ -291,6 +295,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testCommonTermsQueryOnAllField() throws Exception {
         client().admin().indices().prepareCreate("test")
                 .addMapping("type1", "message", "type=string", "comment", "type=string,boost=5.0")
@@ -305,6 +310,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().getHits()[0].getScore(), greaterThan(searchResponse.getHits().getHits()[1].getScore()));
     }
 
+    @Test
     public void testCommonTermsQuery() throws Exception {
         client().admin().indices().prepareCreate("test")
                 .addMapping("type1", "field1", "type=string,analyzer=whitespace")
@@ -385,6 +391,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertThirdHit(searchResponse, hasId("2"));
     }
 
+    @Test
     public void testCommonTermsQueryStackedTokens() throws Exception {
         assertAcked(prepareCreate("test")
                 .setSettings(settingsBuilder()
@@ -477,6 +484,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertThirdHit(searchResponse, hasId("2"));
     }
 
+    @Test
     public void testOmitTermFreqsAndPositions() throws Exception {
         cluster().wipeTemplates(); // no randomized template for this test -- we are testing bwc compat and set version explicitly this might cause failures if an unsupported feature
                                    // is added randomly via an index template.
@@ -510,7 +518,8 @@ public class SearchQueryIT extends ESIntegTestCase {
         }
     }
 
-    public void testQueryStringAnalyzedWildcard() throws Exception {
+    @Test
+    public void queryStringAnalyzedWildcard() throws Exception {
         createIndex("test");
 
         client().prepareIndex("test", "type1", "1").setSource("field1", "value_1", "field2", "value_2").get();
@@ -532,6 +541,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 1l);
     }
 
+    @Test
     public void testLowercaseExpandedTerms() {
         createIndex("test");
 
@@ -552,7 +562,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 0l);
     }
 
-    // Issue #3540
+    @Test //https://github.com/elasticsearch/elasticsearch/issues/3540
     public void testDateRangeInQueryString() {
         //the mapping needs to be provided upfront otherwise we are not sure how many failures we get back
         //as with dynamic mappings some shards might be lacking behind and parse a different query
@@ -580,7 +590,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         }
     }
 
-    // Issue #7880
+    @Test // https://github.com/elasticsearch/elasticsearch/issues/7880
     public void testDateRangeInQueryStringWithTimeZone_7880() {
         //the mapping needs to be provided upfront otherwise we are not sure how many failures we get back
         //as with dynamic mappings some shards might be lacking behind and parse a different query
@@ -599,7 +609,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 1l);
     }
 
-    // Issue #10477
+    @Test // https://github.com/elasticsearch/elasticsearch/issues/10477
     public void testDateRangeInQueryStringWithTimeZone_10477() {
         //the mapping needs to be provided upfront otherwise we are not sure how many failures we get back
         //as with dynamic mappings some shards might be lacking behind and parse a different query
@@ -636,11 +646,13 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 0l);
     }
 
-    public void testTypeFilterTypeIndexedTests() throws Exception {
+    @Test
+    public void typeFilterTypeIndexedTests() throws Exception {
         typeFilterTests("not_analyzed");
     }
 
-    public void testTypeFilterTypeNotIndexedTests() throws Exception {
+    @Test
+    public void typeFilterTypeNotIndexedTests() throws Exception {
         typeFilterTests("no");
     }
 
@@ -669,11 +681,13 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(client().prepareSearch().setTypes("type1", "type2").setQuery(matchAllQuery()).get(), 5l);
     }
 
-    public void testIdsQueryTestsIdIndexed() throws Exception {
+    @Test
+    public void idsQueryTestsIdIndexed() throws Exception {
         idsQueryTests("not_analyzed");
     }
 
-    public void testIdsQueryTestsIdNotIndexed() throws Exception {
+    @Test
+    public void idsQueryTestsIdNotIndexed() throws Exception {
         idsQueryTests("no");
     }
 
@@ -715,15 +729,17 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertSearchHits(searchResponse, "1", "3");
     }
 
-    public void testTermIndexQueryIndexed() throws Exception {
-        termIndexQueryTests("not_analyzed");
+    @Test
+    public void term_indexQueryTestsIndexed() throws Exception {
+        term_indexQueryTests("not_analyzed");
     }
 
-    public void testTermIndexQueryNotIndexed() throws Exception {
-        termIndexQueryTests("no");
+    @Test
+    public void term_indexQueryTestsNotIndexed() throws Exception {
+        term_indexQueryTests("no");
     }
 
-    private void termIndexQueryTests(String index) throws Exception {
+    private void term_indexQueryTests(String index) throws Exception {
         Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();
         String[] indexNames = { "test1", "test2" };
         for (String indexName : indexNames) {
@@ -766,7 +782,8 @@ public class SearchQueryIT extends ESIntegTestCase {
         }
     }
 
-    public void testFilterExistsMissing() throws Exception {
+    @Test
+    public void filterExistsMissingTests() throws Exception {
         createIndex("test");
 
         indexRandom(true,
@@ -833,7 +850,8 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertSearchHits(searchResponse, "3", "4");
     }
 
-    public void testPassQueryOrFilterAsJSONString() throws Exception {
+    @Test
+    public void passQueryOrFilterAsJSONStringTest() throws Exception {
         createIndex("test");
 
         client().prepareIndex("test", "type1", "1").setSource("field1", "value1_1", "field2", "value2_1").setRefresh(true).get();
@@ -848,6 +866,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(client().prepareSearch().setPostFilter(wrapperFilter).get(), 1l);
     }
 
+    @Test
     public void testFiltersWithCustomCacheKey() throws Exception {
         createIndex("test");
 
@@ -866,6 +885,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 1l);
     }
 
+    @Test
     public void testMatchQueryNumeric() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", "long", "type=long", "double", "type=double"));
 
@@ -888,6 +908,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testMultiMatchQuery() throws Exception {
         createIndex("test");
 
@@ -951,6 +972,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertFirstHit(searchResponse, hasId("1"));
     }
 
+    @Test
     public void testMatchQueryZeroTermsQuery() {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "field1", "type=string,analyzer=classic", "field2", "type=string,analyzer=classic"));
@@ -1000,6 +1022,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 2l);
     }
 
+    @Test
     public void testMultiMatchQueryMinShouldMatch() {
         createIndex("test");
         client().prepareIndex("test", "type1", "1").setSource("field1", new String[]{"value1", "value2", "value3"}).get();
@@ -1045,6 +1068,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertFirstHit(searchResponse, hasId("1"));
     }
 
+    @Test
     public void testFuzzyQueryString() {
         createIndex("test");
         client().prepareIndex("test", "type1", "1").setSource("str", "kimchy", "date", "2012-02-01", "num", 12).get();
@@ -1065,6 +1089,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertFirstHit(searchResponse, hasId("1"));
     }
 
+    @Test
     public void testQuotedQueryStringWithBoost() throws InterruptedException, ExecutionException {
         float boost = 10.0f;
         assertAcked(prepareCreate("test").setSettings(SETTING_NUMBER_OF_SHARDS, 1));
@@ -1088,6 +1113,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertThat((double)searchResponse.getHits().getAt(0).score(), closeTo(boost * searchResponse.getHits().getAt(1).score(), .1));
     }
 
+    @Test
     public void testSpecialRangeSyntaxInQueryString() {
         createIndex("test");
         client().prepareIndex("test", "type1", "1").setSource("str", "kimchy", "date", "2012-02-01", "num", 12).get();
@@ -1118,6 +1144,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 1l);
     }
 
+    @Test
     public void testEmptytermsQuery() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type", "term", "type=string"));
 
@@ -1134,6 +1161,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 0l);
     }
 
+    @Test
     public void testTermsQuery() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type", "str", "type=string", "lng", "type=long", "dbl", "type=double"));
 
@@ -1201,6 +1229,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 0l);
     }
 
+    @Test
     public void testTermsLookupFilter() throws Exception {
         assertAcked(prepareCreate("lookup").addMapping("type", "terms","type=string", "other", "type=string"));
         assertAcked(prepareCreate("lookup2").addMapping("type",
@@ -1288,6 +1317,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 0l);
     }
 
+    @Test
     public void testBasicQueryById() throws Exception {
         createIndex("test");
 
@@ -1320,6 +1350,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertThat(searchResponse.getHits().hits().length, equalTo(2));
     }
 
+    @Test
     public void testNumericTermsAndRanges() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1",
@@ -1419,6 +1450,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertFirstHit(searchResponse, hasId("1"));
     }
 
+    @Test
     public void testNumericRangeFilter_2826() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1",
@@ -1457,7 +1489,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 2l);
     }
 
-    // see #2926
+    @Test // see #2926
     public void testMustNot() throws IOException, ExecutionException, InterruptedException {
         assertAcked(prepareCreate("test")
                 //issue manifested only with shards>=2
@@ -1480,7 +1512,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 2l);
     }
 
-    // see #2994
+    @Test // see #2994
     public void testSimpleSpan() throws IOException, ExecutionException, InterruptedException {
         createIndex("test");
 
@@ -1500,6 +1532,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 3l);
     }
 
+    @Test
     public void testSpanMultiTermQuery() throws IOException {
         createIndex("test");
 
@@ -1531,6 +1564,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(response, 3);
     }
 
+    @Test
     public void testSpanNot() throws IOException, ExecutionException, InterruptedException {
         createIndex("test");
 
@@ -1554,6 +1588,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 1l);
     }
 
+    @Test
     public void testSimpleDFSQuery() throws IOException {
         assertAcked(prepareCreate("test")
             .addMapping("s", jsonBuilder()
@@ -1608,6 +1643,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertNoFailures(response);
     }
 
+    @Test
     public void testMultiFieldQueryString() {
         client().prepareIndex("test", "s", "1").setSource("field1", "value1", "field2", "value2").setRefresh(true).get();
 
@@ -1629,6 +1665,7 @@ public class SearchQueryIT extends ESIntegTestCase {
     }
 
     // see #3881 - for extensive description of the issue
+    @Test
     public void testMatchQueryWithSynonyms() throws IOException {
         CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder()
                 .put(indexSettings())
@@ -1659,6 +1696,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 2);
     }
 
+    @Test
     public void testMatchQueryWithStackedStems() throws IOException {
         CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder()
                 .put(indexSettings())
@@ -1683,6 +1721,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 2);
     }
 
+    @Test
     public void testQueryStringWithSynonyms() throws IOException {
         CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder()
                 .put(indexSettings())
@@ -1715,7 +1754,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 2);
     }
 
-    // see #3898
+    @Test // see https://github.com/elasticsearch/elasticsearch/issues/3898
     public void testCustomWordDelimiterQueryString() {
         assertAcked(client().admin().indices().prepareCreate("test")
                 .setSettings("analysis.analyzer.my_analyzer.type", "custom",
@@ -1742,7 +1781,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(response, 1l);
     }
 
-    // see #3797
+    @Test // see https://github.com/elasticsearch/elasticsearch/issues/3797
     public void testMultiMatchLenientIssue3797() {
         createIndex("test");
 
@@ -1762,12 +1801,14 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(searchResponse, 1l);
     }
 
+    @Test
     public void testAllFieldEmptyMapping() throws Exception {
         client().prepareIndex("myindex", "mytype").setId("1").setSource("{}").setRefresh(true).get();
         SearchResponse response = client().prepareSearch("myindex").setQuery(matchQuery("_all", "foo")).get();
         assertNoFailures(response);
     }
 
+    @Test
     public void testAllDisabledButQueried() throws Exception {
         createIndex("myindex");
         assertAcked(client().admin().indices().preparePutMapping("myindex").setType("mytype").setSource(
@@ -1778,6 +1819,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(response, 0);
     }
 
+    @Test
     public void testIndicesQuery() throws Exception {
         createIndex("index1", "index2", "index3");
 
@@ -1811,7 +1853,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertFirstHit(searchResponse, hasId("1"));
     }
 
-    // See #2416
+    @Test // https://github.com/elasticsearch/elasticsearch/issues/2416
     public void testIndicesQuerySkipParsing() throws Exception {
         createIndex("simple");
         assertAcked(prepareCreate("related")
@@ -1843,6 +1885,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertSearchHits(searchResponse, "1", "2");
     }
 
+    @Test
     public void testIndicesQueryMissingIndices() throws IOException, ExecutionException, InterruptedException {
         createIndex("index1");
         createIndex("index2");
@@ -1911,6 +1954,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testMinScore() throws ExecutionException, InterruptedException {
         createIndex("test");
 
@@ -1927,6 +1971,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertSecondHit(searchResponse, hasId("1"));
     }
 
+    @Test
     public void testQueryStringWithSlopAndFields() {
         createIndex("test");
 
@@ -1955,6 +2000,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testDateProvidedAsNumber() throws ExecutionException, InterruptedException {
         createIndex("test");
         assertAcked(client().admin().indices().preparePutMapping("test").setType("type").setSource("field", "type=date,format=epoch_millis").get());
@@ -1967,6 +2013,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(client().prepareSearch("test").setSize(0).setQuery(rangeQuery("field").lte(-999999999999L)).get(), 3);
     }
 
+    @Test
     public void testRangeQueryWithTimeZone() throws Exception {
         assertAcked(prepareCreate("test")
                 .addMapping("type1", "date", "type=date", "num", "type=integer"));
@@ -2061,6 +2108,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         }
     }
 
+    @Test
     public void testSearchEmptyDoc() {
         assertAcked(prepareCreate("test").setSettings("{\"index.analysis.analyzer.default.type\":\"keyword\"}"));
         client().prepareIndex("test", "type1", "1").setSource("{}").get();
@@ -2069,7 +2117,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertHitCount(client().prepareSearch().setQuery(matchAllQuery()).get(), 1l);
     }
 
-    // see #5120
+    @Test  // see #5120
     public void testNGramCopyField() {
         CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder()
                 .put(indexSettings())
@@ -2135,6 +2183,7 @@ public class SearchQueryIT extends ESIntegTestCase {
         assertSearchHits(searchResponse, "2");
     }
 
+    @Test
     public void testQueryStringParserCache() throws Exception {
         createIndex("test");
         indexRandom(true, false, client().prepareIndex("test", "type", "1").setSource("nameTokens", "xyz"));
diff --git a/plugins/lang-javascript/src/test/java/org/elasticsearch/script/javascript/JavaScriptScriptEngineTests.java b/plugins/lang-javascript/src/test/java/org/elasticsearch/script/javascript/JavaScriptScriptEngineTests.java
index fe9cc32..f0a3181 100644
--- a/plugins/lang-javascript/src/test/java/org/elasticsearch/script/javascript/JavaScriptScriptEngineTests.java
+++ b/plugins/lang-javascript/src/test/java/org/elasticsearch/script/javascript/JavaScriptScriptEngineTests.java
@@ -27,6 +27,7 @@ import org.elasticsearch.script.ScriptService;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.HashMap;
@@ -40,6 +41,7 @@ import static org.hamcrest.Matchers.instanceOf;
  *
  */
 public class JavaScriptScriptEngineTests extends ESTestCase {
+
     private JavaScriptScriptEngineService se;
 
     @Before
@@ -52,12 +54,14 @@ public class JavaScriptScriptEngineTests extends ESTestCase {
         se.close();
     }
 
+    @Test
     public void testSimpleEquation() {
         Map<String, Object> vars = new HashMap<String, Object>();
         Object o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testSimpleEquation", "js", se.compile("1 + 2")), vars).run();
         assertThat(((Number) o).intValue(), equalTo(3));
     }
 
+    @Test
     public void testMapAccess() {
         Map<String, Object> vars = new HashMap<String, Object>();
 
@@ -74,6 +78,7 @@ public class JavaScriptScriptEngineTests extends ESTestCase {
         assertThat(((String) o), equalTo("2"));
     }
 
+    @Test
     public void testJavaScriptObjectToMap() {
         Map<String, Object> vars = new HashMap<String, Object>();
         Object o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testJavaScriptObjectToMap", "js",
@@ -83,6 +88,7 @@ public class JavaScriptScriptEngineTests extends ESTestCase {
         assertThat((String) ((Map<String, Object>) obj1.get("obj2")).get("prop2"), equalTo("value2"));
     }
 
+    @Test
     public void testJavaScriptObjectMapInter() {
         Map<String, Object> vars = new HashMap<String, Object>();
         Map<String, Object> ctx = new HashMap<String, Object>();
@@ -101,6 +107,7 @@ public class JavaScriptScriptEngineTests extends ESTestCase {
         assertThat((String) ((Map<String, Object>) ctx.get("obj2")).get("prop2"), equalTo("value2"));
     }
 
+    @Test
     public void testJavaScriptInnerArrayCreation() {
         Map<String, Object> ctx = new HashMap<String, Object>();
         Map<String, Object> doc = new HashMap<String, Object>();
@@ -117,6 +124,7 @@ public class JavaScriptScriptEngineTests extends ESTestCase {
         assertThat(((Map) unwrap.get("doc")).get("field1"), instanceOf(List.class));
     }
 
+    @Test
     public void testAccessListInScript() {
         Map<String, Object> vars = new HashMap<String, Object>();
         Map<String, Object> obj2 = MapBuilder.<String, Object>newMapBuilder().put("prop2", "value2").map();
@@ -142,6 +150,7 @@ public class JavaScriptScriptEngineTests extends ESTestCase {
         assertThat(((String) o), equalTo("value1"));
     }
 
+    @Test
     public void testChangingVarsCrossExecution1() {
         Map<String, Object> vars = new HashMap<String, Object>();
         Map<String, Object> ctx = new HashMap<String, Object>();
@@ -159,6 +168,7 @@ public class JavaScriptScriptEngineTests extends ESTestCase {
         assertThat(((Number) o).intValue(), equalTo(2));
     }
 
+    @Test
     public void testChangingVarsCrossExecution2() {
         Map<String, Object> vars = new HashMap<String, Object>();
         Object compiledScript = se.compile("value");
diff --git a/plugins/lang-javascript/src/test/java/org/elasticsearch/script/javascript/JavaScriptScriptMultiThreadedTests.java b/plugins/lang-javascript/src/test/java/org/elasticsearch/script/javascript/JavaScriptScriptMultiThreadedTests.java
index 2308e66..b639ed9 100644
--- a/plugins/lang-javascript/src/test/java/org/elasticsearch/script/javascript/JavaScriptScriptMultiThreadedTests.java
+++ b/plugins/lang-javascript/src/test/java/org/elasticsearch/script/javascript/JavaScriptScriptMultiThreadedTests.java
@@ -24,6 +24,7 @@ import org.elasticsearch.script.CompiledScript;
 import org.elasticsearch.script.ExecutableScript;
 import org.elasticsearch.script.ScriptService;
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -38,6 +39,8 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class JavaScriptScriptMultiThreadedTests extends ESTestCase {
+
+    @Test
     public void testExecutableNoRuntimeParams() throws Exception {
         final JavaScriptScriptEngineService se = new JavaScriptScriptEngineService(Settings.Builder.EMPTY_SETTINGS);
         final Object compiled = se.compile("x + y");
@@ -80,6 +83,8 @@ public class JavaScriptScriptMultiThreadedTests extends ESTestCase {
         assertThat(failed.get(), equalTo(false));
     }
 
+
+    @Test
     public void testExecutableWithRuntimeParams() throws Exception {
         final JavaScriptScriptEngineService se = new JavaScriptScriptEngineService(Settings.Builder.EMPTY_SETTINGS);
         final Object compiled = se.compile("x + y");
@@ -122,6 +127,7 @@ public class JavaScriptScriptMultiThreadedTests extends ESTestCase {
         assertThat(failed.get(), equalTo(false));
     }
 
+    @Test
     public void testExecute() throws Exception {
         final JavaScriptScriptEngineService se = new JavaScriptScriptEngineService(Settings.Builder.EMPTY_SETTINGS);
         final Object compiled = se.compile("x + y");
diff --git a/plugins/lang-python/src/test/java/org/elasticsearch/script/python/PythonScriptEngineTests.java b/plugins/lang-python/src/test/java/org/elasticsearch/script/python/PythonScriptEngineTests.java
index 3569135..979da65 100644
--- a/plugins/lang-python/src/test/java/org/elasticsearch/script/python/PythonScriptEngineTests.java
+++ b/plugins/lang-python/src/test/java/org/elasticsearch/script/python/PythonScriptEngineTests.java
@@ -27,6 +27,7 @@ import org.elasticsearch.script.ScriptService;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.Arrays;
 import java.util.HashMap;
@@ -39,6 +40,7 @@ import static org.hamcrest.Matchers.instanceOf;
  *
  */
 public class PythonScriptEngineTests extends ESTestCase {
+
     private PythonScriptEngineService se;
 
     @Before
@@ -54,12 +56,14 @@ public class PythonScriptEngineTests extends ESTestCase {
         se.close();
     }
 
+    @Test
     public void testSimpleEquation() {
         Map<String, Object> vars = new HashMap<String, Object>();
         Object o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testSimpleEquation", "python", se.compile("1 + 2")), vars).run();
         assertThat(((Number) o).intValue(), equalTo(3));
     }
 
+    @Test
     public void testMapAccess() {
         Map<String, Object> vars = new HashMap<String, Object>();
 
@@ -76,6 +80,7 @@ public class PythonScriptEngineTests extends ESTestCase {
         assertThat(((String) o), equalTo("2"));
     }
 
+    @Test
     public void testObjectMapInter() {
         Map<String, Object> vars = new HashMap<String, Object>();
         Map<String, Object> ctx = new HashMap<String, Object>();
@@ -94,7 +99,9 @@ public class PythonScriptEngineTests extends ESTestCase {
         assertThat((String) ((Map<String, Object>) ctx.get("obj2")).get("prop2"), equalTo("value2"));
     }
 
+    @Test
     public void testAccessListInScript() {
+
         Map<String, Object> vars = new HashMap<String, Object>();
         Map<String, Object> obj2 = MapBuilder.<String, Object>newMapBuilder().put("prop2", "value2").map();
         Map<String, Object> obj1 = MapBuilder.<String, Object>newMapBuilder().put("prop1", "value1").put("obj2", obj2).map();
@@ -115,6 +122,7 @@ public class PythonScriptEngineTests extends ESTestCase {
         assertThat(((String) o), equalTo("value1"));
     }
 
+    @Test
     public void testChangingVarsCrossExecution1() {
         Map<String, Object> vars = new HashMap<String, Object>();
         Map<String, Object> ctx = new HashMap<String, Object>();
@@ -131,6 +139,7 @@ public class PythonScriptEngineTests extends ESTestCase {
         assertThat(((Number) o).intValue(), equalTo(2));
     }
 
+    @Test
     public void testChangingVarsCrossExecution2() {
         Map<String, Object> vars = new HashMap<String, Object>();
         Map<String, Object> ctx = new HashMap<String, Object>();
diff --git a/plugins/lang-python/src/test/java/org/elasticsearch/script/python/PythonScriptMultiThreadedTests.java b/plugins/lang-python/src/test/java/org/elasticsearch/script/python/PythonScriptMultiThreadedTests.java
index f0d6895..81ebf69 100644
--- a/plugins/lang-python/src/test/java/org/elasticsearch/script/python/PythonScriptMultiThreadedTests.java
+++ b/plugins/lang-python/src/test/java/org/elasticsearch/script/python/PythonScriptMultiThreadedTests.java
@@ -25,6 +25,7 @@ import org.elasticsearch.script.ExecutableScript;
 import org.elasticsearch.script.ScriptService;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.After;
+import org.junit.Test;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -39,6 +40,7 @@ import static org.hamcrest.Matchers.equalTo;
  *
  */
 public class PythonScriptMultiThreadedTests extends ESTestCase {
+
     @After
     public void close() {
         // We need to clear some system properties
@@ -46,6 +48,7 @@ public class PythonScriptMultiThreadedTests extends ESTestCase {
         System.clearProperty("python.console.encoding");
     }
 
+    @Test
     public void testExecutableNoRuntimeParams() throws Exception {
         final PythonScriptEngineService se = new PythonScriptEngineService(Settings.Builder.EMPTY_SETTINGS);
         final Object compiled = se.compile("x + y");
@@ -90,7 +93,7 @@ public class PythonScriptMultiThreadedTests extends ESTestCase {
     }
 
 
-//    public void testExecutableWithRuntimeParams() throws Exception {
+//    @Test public void testExecutableWithRuntimeParams() throws Exception {
 //        final PythonScriptEngineService se = new PythonScriptEngineService(Settings.Builder.EMPTY_SETTINGS);
 //        final Object compiled = se.compile("x + y");
 //        final AtomicBoolean failed = new AtomicBoolean();
@@ -132,6 +135,7 @@ public class PythonScriptMultiThreadedTests extends ESTestCase {
 //        assertThat(failed.get(), equalTo(false));
 //    }
 
+    @Test
     public void testExecute() throws Exception {
         final PythonScriptEngineService se = new PythonScriptEngineService(Settings.Builder.EMPTY_SETTINGS);
         final Object compiled = se.compile("x + y");
diff --git a/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureSnapshotRestoreServiceTests.java b/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureSnapshotRestoreServiceTests.java
index 995ae92..7c843b5 100644
--- a/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureSnapshotRestoreServiceTests.java
+++ b/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureSnapshotRestoreServiceTests.java
@@ -30,6 +30,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.snapshots.SnapshotState;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThan;
@@ -40,10 +41,12 @@ import static org.hamcrest.Matchers.greaterThan;
         numClientNodes = 0,
         transportClientRatio = 0.0)
 public class AzureSnapshotRestoreServiceTests extends AbstractAzureRepositoryServiceTestCase {
+
     public AzureSnapshotRestoreServiceTests() {
         super("/snapshot-test/repo-" + randomInt());
     }
 
+    @Test
     public void testSimpleWorkflow() {
         Client client = client();
         logger.info("-->  creating azure repository with path [{}]", basePath);
diff --git a/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureSnapshotRestoreTests.java b/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureSnapshotRestoreTests.java
index c0b01ce..237011a 100644
--- a/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureSnapshotRestoreTests.java
+++ b/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureSnapshotRestoreTests.java
@@ -22,7 +22,6 @@ package org.elasticsearch.repositories.azure;
 
 import com.carrotsearch.randomizedtesting.RandomizedTest;
 import com.microsoft.azure.storage.StorageException;
-
 import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryResponse;
 import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;
 import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;
@@ -45,6 +44,7 @@ import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.store.MockFSDirectoryService;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.net.URISyntaxException;
 import java.util.Locale;
@@ -63,6 +63,7 @@ import static org.hamcrest.Matchers.greaterThan;
         numDataNodes = 1,
         transportClientRatio = 0.0)
 public class AzureSnapshotRestoreTests extends AbstractAzureWithThirdPartyTestCase {
+
     private String getRepositoryPath() {
         String testName = "it-".concat(Strings.toUnderscoreCase(getTestName()).replaceAll("_", "-"));
         return testName.contains(" ") ? Strings.split(testName, " ")[0] : testName;
@@ -100,6 +101,7 @@ public class AzureSnapshotRestoreTests extends AbstractAzureWithThirdPartyTestCa
             getContainerName().concat("-2"));
     }
 
+    @Test
     public void testSimpleWorkflow() {
         Client client = client();
         logger.info("-->  creating azure repository with path [{}]", getRepositoryPath());
@@ -175,6 +177,7 @@ public class AzureSnapshotRestoreTests extends AbstractAzureWithThirdPartyTestCa
     /**
      * For issue #51: https://github.com/elasticsearch/elasticsearch-cloud-azure/issues/51
      */
+    @Test
     public void testMultipleSnapshots() throws URISyntaxException, StorageException {
         final String indexName = "test-idx-1";
         final String typeName = "doc";
@@ -231,6 +234,7 @@ public class AzureSnapshotRestoreTests extends AbstractAzureWithThirdPartyTestCa
         assertThat(client.prepareSearch(indexName).setSize(0).get().getHits().totalHits(), equalTo(1L));
     }
 
+    @Test
     public void testMultipleRepositories() {
         Client client = client();
         logger.info("-->  creating azure repository with path [{}]", getRepositoryPath());
@@ -299,6 +303,7 @@ public class AzureSnapshotRestoreTests extends AbstractAzureWithThirdPartyTestCa
     /**
      * For issue #26: https://github.com/elasticsearch/elasticsearch-cloud-azure/issues/26
      */
+    @Test
     public void testListBlobs_26() throws StorageException, URISyntaxException {
         createIndex("test-idx-1", "test-idx-2", "test-idx-3");
         ensureGreen();
@@ -357,6 +362,7 @@ public class AzureSnapshotRestoreTests extends AbstractAzureWithThirdPartyTestCa
     /**
      * For issue #28: https://github.com/elasticsearch/elasticsearch-cloud-azure/issues/28
      */
+    @Test
     public void testGetDeleteNonExistingSnapshot_28() throws StorageException, URISyntaxException {
         ClusterAdminClient client = client().admin().cluster();
         logger.info("-->  creating azure repository without any path");
@@ -384,6 +390,7 @@ public class AzureSnapshotRestoreTests extends AbstractAzureWithThirdPartyTestCa
     /**
      * For issue #21: https://github.com/elasticsearch/elasticsearch-cloud-azure/issues/21
      */
+    @Test
     public void testForbiddenContainerName() throws Exception {
         checkContainerName("", false);
         checkContainerName("es", false);
@@ -408,7 +415,6 @@ public class AzureSnapshotRestoreTests extends AbstractAzureWithThirdPartyTestCa
         // we can not create it yet.
         assertBusy(new Runnable() {
 
-            @Override
             public void run() {
                 try {
                     PutRepositoryResponse putRepositoryResponse = client().admin().cluster().preparePutRepository("test-repo")
@@ -438,6 +444,7 @@ public class AzureSnapshotRestoreTests extends AbstractAzureWithThirdPartyTestCa
     /**
      * Test case for issue #23: https://github.com/elasticsearch/elasticsearch-cloud-azure/issues/23
      */
+    @Test
     public void testNonExistingRepo_23() {
         Client client = client();
         logger.info("-->  creating azure repository with path [{}]", getRepositoryPath());
@@ -461,6 +468,7 @@ public class AzureSnapshotRestoreTests extends AbstractAzureWithThirdPartyTestCa
     /**
      * When a user remove a container you can not immediately create it again.
      */
+    @Test
     public void testRemoveAndCreateContainer() throws Exception {
         final String container = getContainerName().concat("-testremove");
         final AzureStorageService storageService = internalCluster().getInstance(AzureStorageService.class);
@@ -469,7 +477,6 @@ public class AzureSnapshotRestoreTests extends AbstractAzureWithThirdPartyTestCa
         // so we might need some time to be able to create the container
         assertBusy(new Runnable() {
 
-            @Override
             public void run()  {
                 try {
                     storageService.createContainer(container);
diff --git a/plugins/repository-s3/src/test/java/org/elasticsearch/cloud/aws/AWSSignersTests.java b/plugins/repository-s3/src/test/java/org/elasticsearch/cloud/aws/AWSSignersTests.java
index cd3584d..03048c6 100644
--- a/plugins/repository-s3/src/test/java/org/elasticsearch/cloud/aws/AWSSignersTests.java
+++ b/plugins/repository-s3/src/test/java/org/elasticsearch/cloud/aws/AWSSignersTests.java
@@ -20,12 +20,14 @@
 package org.elasticsearch.cloud.aws;
 
 import com.amazonaws.ClientConfiguration;
-
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.is;
 
 public class AWSSignersTests extends ESTestCase {
+
+    @Test
     public void testSigners() {
         assertThat(signerTester(null), is(false));
         assertThat(signerTester("QueryStringSignerType"), is(true));
diff --git a/plugins/repository-s3/src/test/java/org/elasticsearch/cloud/aws/blobstore/S3OutputStreamTests.java b/plugins/repository-s3/src/test/java/org/elasticsearch/cloud/aws/blobstore/S3OutputStreamTests.java
index f023b64..f40065c 100644
--- a/plugins/repository-s3/src/test/java/org/elasticsearch/cloud/aws/blobstore/S3OutputStreamTests.java
+++ b/plugins/repository-s3/src/test/java/org/elasticsearch/cloud/aws/blobstore/S3OutputStreamTests.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.cloud.aws.blobstore;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Test;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -27,14 +28,15 @@ import java.util.Arrays;
 
 import static org.elasticsearch.common.io.Streams.copy;
 import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.is;
 
 /**
  * Unit test for {@link S3OutputStream}.
  */
 public class S3OutputStreamTests extends ESTestCase {
+
     private static final int BUFFER_SIZE = S3BlobStore.MIN_BUFFER_SIZE.bytesAsInt();
 
+    @Test
     public void testWriteLessDataThanBufferSize() throws IOException {
         MockDefaultS3OutputStream out = newS3OutputStream(BUFFER_SIZE);
         byte[] content = randomUnicodeOfLengthBetween(1, 512).getBytes("UTF-8");
@@ -52,6 +54,7 @@ public class S3OutputStreamTests extends ESTestCase {
 
     }
 
+    @Test
     public void testWriteSameDataThanBufferSize() throws IOException {
         int size = randomIntBetween(BUFFER_SIZE, 2 * BUFFER_SIZE);
         MockDefaultS3OutputStream out = newS3OutputStream(size);
@@ -74,6 +77,7 @@ public class S3OutputStreamTests extends ESTestCase {
 
     }
 
+    @Test
     public void testWriteExactlyNTimesMoreDataThanBufferSize() throws IOException {
         int n = randomIntBetween(2, 3);
         int length = n * BUFFER_SIZE;
@@ -98,6 +102,7 @@ public class S3OutputStreamTests extends ESTestCase {
         assertTrue(out.isMultipart());
     }
 
+    @Test
     public void testWriteRandomNumberOfBytes() throws IOException {
         Integer randomBufferSize = randomIntBetween(BUFFER_SIZE, 2 * BUFFER_SIZE);
         MockDefaultS3OutputStream out = newS3OutputStream(randomBufferSize);
@@ -124,14 +129,11 @@ public class S3OutputStreamTests extends ESTestCase {
         }
     }
 
+    @Test(expected = IllegalArgumentException.class)
     public void testWrongBufferSize() throws IOException {
         Integer randomBufferSize = randomIntBetween(1, 4 * 1024 * 1024);
-        try {
-            newS3OutputStream(randomBufferSize);
-            fail("Buffer size can't be smaller than 5mb");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(), is("Buffer size can't be smaller than 5mb"));
-        }
+        MockDefaultS3OutputStream out = newS3OutputStream(randomBufferSize);
+        fail("Buffer size can't be smaller than 5mb");
     }
 
     private MockDefaultS3OutputStream newS3OutputStream(int bufferSizeInBytes) {
diff --git a/plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/AbstractS3SnapshotRestoreTest.java b/plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/AbstractS3SnapshotRestoreTest.java
index 9ffa128..1c9b453 100644
--- a/plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/AbstractS3SnapshotRestoreTest.java
+++ b/plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/AbstractS3SnapshotRestoreTest.java
@@ -43,18 +43,18 @@ import org.elasticsearch.test.ESIntegTestCase.Scope;
 import org.elasticsearch.test.store.MockFSDirectoryService;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  */
 @ClusterScope(scope = Scope.SUITE, numDataNodes = 2, numClientNodes = 0, transportClientRatio = 0.0)
 abstract public class AbstractS3SnapshotRestoreTest extends AbstractAwsTestCase {
+
     @Override
     public Settings indexSettings() {
         // During restore we frequently restore index to exactly the same state it was before, that might cause the same
@@ -83,7 +83,7 @@ abstract public class AbstractS3SnapshotRestoreTest extends AbstractAwsTestCase
         cleanRepositoryFiles(basePath);
     }
 
-    @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch-cloud-aws/issues/211")
+    @Test @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch-cloud-aws/issues/211")
     public void testSimpleWorkflow() {
         Client client = client();
         Settings.Builder settings = Settings.settingsBuilder()
@@ -161,7 +161,7 @@ abstract public class AbstractS3SnapshotRestoreTest extends AbstractAwsTestCase
         assertThat(clusterState.getMetaData().hasIndex("test-idx-2"), equalTo(false));
     }
 
-    @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch-cloud-aws/issues/211")
+    @Test @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch-cloud-aws/issues/211")
     public void testEncryption() {
         Client client = client();
         logger.info("-->  creating s3 repository with bucket[{}] and path [{}]", internalCluster().getInstance(Settings.class).get("repositories.s3.bucket"), basePath);
@@ -254,21 +254,20 @@ abstract public class AbstractS3SnapshotRestoreTest extends AbstractAwsTestCase
      * This test verifies that the test configuration is set up in a manner that
      * does not make the test {@link #testRepositoryWithCustomCredentials()} pointless.
      */
-    public void testRepositoryWithCustomCredentialsIsNotAccessibleByDefaultCredentials() {
+    @Test(expected = RepositoryVerificationException.class)
+    public void assertRepositoryWithCustomCredentialsIsNotAccessibleByDefaultCredentials() {
         Client client = client();
         Settings bucketSettings = internalCluster().getInstance(Settings.class).getByPrefix("repositories.s3.private-bucket.");
         logger.info("-->  creating s3 repository with bucket[{}] and path [{}]", bucketSettings.get("bucket"), basePath);
-        try {
-            client.admin().cluster().preparePutRepository("test-repo")
-                .setType("s3").setSettings(Settings.settingsBuilder()
-                        .put("base_path", basePath)
-                        .put("bucket", bucketSettings.get("bucket"))
-                        ).get();
-            fail("repository verification should have raise an exception!");
-        } catch (RepositoryVerificationException e) {
-        }
+        client.admin().cluster().preparePutRepository("test-repo")
+        .setType("s3").setSettings(Settings.settingsBuilder()
+                .put("base_path", basePath)
+                .put("bucket", bucketSettings.get("bucket"))
+                ).get();
+        fail("repository verification should have raise an exception!");
     }
 
+    @Test
     public void testRepositoryWithCustomCredentials() {
         Client client = client();
         Settings bucketSettings = internalCluster().getInstance(Settings.class).getByPrefix("repositories.s3.private-bucket.");
@@ -286,7 +285,7 @@ abstract public class AbstractS3SnapshotRestoreTest extends AbstractAwsTestCase
         assertRepositoryIsOperational(client, "test-repo");
     }
 
-    @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch-cloud-aws/issues/211")
+    @Test @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch-cloud-aws/issues/211")
     public void testRepositoryWithCustomEndpointProtocol() {
         Client client = client();
         Settings bucketSettings = internalCluster().getInstance(Settings.class).getByPrefix("repositories.s3.external-bucket.");
@@ -307,24 +306,23 @@ abstract public class AbstractS3SnapshotRestoreTest extends AbstractAwsTestCase
      * This test verifies that the test configuration is set up in a manner that
      * does not make the test {@link #testRepositoryInRemoteRegion()} pointless.
      */
-    public void testRepositoryInRemoteRegionIsRemote() {
+    @Test(expected = RepositoryVerificationException.class)
+    public void assertRepositoryInRemoteRegionIsRemote() {
         Client client = client();
         Settings bucketSettings = internalCluster().getInstance(Settings.class).getByPrefix("repositories.s3.remote-bucket.");
         logger.info("-->  creating s3 repository with bucket[{}] and path [{}]", bucketSettings.get("bucket"), basePath);
-        try {
-            client.admin().cluster().preparePutRepository("test-repo")
-                .setType("s3").setSettings(Settings.settingsBuilder()
-                    .put("base_path", basePath)
-                    .put("bucket", bucketSettings.get("bucket"))
-                    // Below setting intentionally omitted to assert bucket is not available in default region.
-                    //                        .put("region", privateBucketSettings.get("region"))
-                    ).get();
-            fail("repository verification should have raise an exception!");
-        } catch (RepositoryVerificationException e) {
-        }
+        client.admin().cluster().preparePutRepository("test-repo")
+        .setType("s3").setSettings(Settings.settingsBuilder()
+                .put("base_path", basePath)
+                .put("bucket", bucketSettings.get("bucket"))
+                // Below setting intentionally omitted to assert bucket is not available in default region.
+                //                        .put("region", privateBucketSettings.get("region"))
+                ).get();
+
+        fail("repository verification should have raise an exception!");
     }
 
-    @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch-cloud-aws/issues/211")
+    @Test @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch-cloud-aws/issues/211")
     public void testRepositoryInRemoteRegion() {
         Client client = client();
         Settings settings = internalCluster().getInstance(Settings.class);
@@ -344,7 +342,8 @@ abstract public class AbstractS3SnapshotRestoreTest extends AbstractAwsTestCase
     /**
      * Test case for issue #86: https://github.com/elasticsearch/elasticsearch-cloud-aws/issues/86
      */
-    public void testNonExistingRepo86() {
+    @Test
+    public void testNonExistingRepo_86() {
         Client client = client();
         logger.info("-->  creating s3 repository with bucket[{}] and path [{}]", internalCluster().getInstance(Settings.class).get("repositories.s3.bucket"), basePath);
         PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo")
@@ -365,7 +364,8 @@ abstract public class AbstractS3SnapshotRestoreTest extends AbstractAwsTestCase
     /**
      * For issue #86: https://github.com/elasticsearch/elasticsearch-cloud-aws/issues/86
      */
-    public void testGetDeleteNonExistingSnapshot86() {
+    @Test
+    public void testGetDeleteNonExistingSnapshot_86() {
         ClusterAdminClient client = client().admin().cluster();
         logger.info("-->  creating s3 repository without any path");
         PutRepositoryResponse putRepositoryResponse = client.preparePutRepository("test-repo")
diff --git a/plugins/store-smb/src/test/java/org/elasticsearch/index/store/AbstractAzureFsTestCase.java b/plugins/store-smb/src/test/java/org/elasticsearch/index/store/AbstractAzureFsTestCase.java
index 9e29d6f..770e819 100644
--- a/plugins/store-smb/src/test/java/org/elasticsearch/index/store/AbstractAzureFsTestCase.java
+++ b/plugins/store-smb/src/test/java/org/elasticsearch/index/store/AbstractAzureFsTestCase.java
@@ -23,17 +23,20 @@ import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.plugin.store.smb.SMBStorePlugin;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
+import org.junit.Test;
 
 import java.util.Collection;
 
 import static org.hamcrest.Matchers.is;
 
 abstract public class AbstractAzureFsTestCase extends ESIntegTestCase {
+
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
         return pluginList(SMBStorePlugin.class);
     }
 
+    @Test
     public void testAzureFs() {
         // Create an index and index some documents
         createIndex("test");
diff --git a/qa/smoke-test-client/src/test/java/org/elasticsearch/smoketest/SmokeTestClientIT.java b/qa/smoke-test-client/src/test/java/org/elasticsearch/smoketest/SmokeTestClientIT.java
index 4c5b38c..4c324b0 100644
--- a/qa/smoke-test-client/src/test/java/org/elasticsearch/smoketest/SmokeTestClientIT.java
+++ b/qa/smoke-test-client/src/test/java/org/elasticsearch/smoketest/SmokeTestClientIT.java
@@ -22,14 +22,17 @@ package org.elasticsearch.smoketest;
 import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.client.Client;
+import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.Matchers.greaterThan;
 
 public class SmokeTestClientIT extends ESSmokeClientTestCase {
+
     /**
      * Check that we are connected to a cluster named "elasticsearch".
      */
+    @Test
     public void testSimpleClient() {
         Client client = getClient();
 
@@ -44,6 +47,7 @@ public class SmokeTestClientIT extends ESSmokeClientTestCase {
     /**
      * Create an index and index some docs
      */
+    @Test
     public void testPutDocument() {
         Client client = getClient();
 
diff --git a/rest-api-spec/src/main/resources/rest-api-spec/api/indices.forcemerge.json b/rest-api-spec/src/main/resources/rest-api-spec/api/indices.forcemerge.json
new file mode 100644
index 0000000..0e6c6ab
--- /dev/null
+++ b/rest-api-spec/src/main/resources/rest-api-spec/api/indices.forcemerge.json
@@ -0,0 +1,52 @@
+{
+  "indices.forcemerge": {
+    "documentation": "http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-forcemerge.html",
+    "methods": ["POST", "GET"],
+    "url": {
+      "path": "/_forcemerge",
+      "paths": ["/_forcemerge", "/{index}/_forcemerge"],
+      "parts": {
+        "index": {
+          "type" : "list",
+          "description" : "A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"
+        }
+      },
+      "params": {
+        "flush": {
+          "type" : "boolean",
+          "description" : "Specify whether the index should be flushed after performing the operation (default: true)"
+        },
+        "ignore_unavailable": {
+            "type" : "boolean",
+            "description" : "Whether specified concrete indices should be ignored when unavailable (missing or closed)"
+        },
+        "allow_no_indices": {
+            "type" : "boolean",
+            "description" : "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"
+        },
+        "expand_wildcards": {
+            "type" : "enum",
+            "options" : ["open","closed","none","all"],
+            "default" : "open",
+            "description" : "Whether to expand wildcard expression to concrete indices that are open, closed or both."
+        },
+        "max_num_segments": {
+          "type" : "number",
+          "description" : "The number of segments the index should be merged into (default: dynamic)"
+        },
+        "only_expunge_deletes": {
+          "type" : "boolean",
+          "description" : "Specify whether the operation should only expunge deleted documents"
+        },
+        "operation_threading": {
+          "description" : "TODO: ?"
+        },
+        "wait_for_merge": {
+          "type" : "boolean",
+          "description" : "Specify whether the request should block until the merge process is finished (default: true)"
+        }
+      }
+    },
+    "body": null
+  }
+}
diff --git a/rest-api-spec/src/main/resources/rest-api-spec/test/cat.thread_pool/10_basic.yaml b/rest-api-spec/src/main/resources/rest-api-spec/test/cat.thread_pool/10_basic.yaml
index 0c8ac5b..d362c15 100755
--- a/rest-api-spec/src/main/resources/rest-api-spec/test/cat.thread_pool/10_basic.yaml
+++ b/rest-api-spec/src/main/resources/rest-api-spec/test/cat.thread_pool/10_basic.yaml
@@ -29,13 +29,13 @@
 
   - do:
       cat.thread_pool:
-          h: id,ba,fa,gea,ga,ia,maa,ma,oa,pa
+          h: id,ba,fa,gea,ga,ia,maa,ma,fma,pa
           v: true
           full_id: true
 
   - match:
       $body: |
-               /^  id   \s+  ba   \s+  fa   \s+  gea  \s+  ga   \s+  ia   \s+  maa  \s+  oa   \s+  pa  \s+  \n
+               /^  id   \s+  ba   \s+  fa   \s+  gea  \s+  ga   \s+  ia   \s+  maa  \s+  fma   \s+  pa  \s+  \n
                   (\S+  \s+  \d+  \s+  \d+  \s+  \d+  \s+  \d+  \s+  \d+  \s+  \d+  \s+  \d+  \s+  \d+ \s+  \n)+  $/
 
   - do:
@@ -100,12 +100,12 @@
 
   - do:
       cat.thread_pool:
-          h: id,optimize.type,optimize.active,optimize.size,optimize.queue,optimize.queueSize,optimize.rejected,optimize.largest,optimize.completed,optimize.min,optimize.max,optimize.keepAlive
+          h: id,force_merge.type,force_merge.active,force_merge.size,force_merge.queue,force_merge.queueSize,force_merge.rejected,force_merge.largest,force_merge.completed,force_merge.min,force_merge.max,force_merge.keepAlive
           v: true
 
   - match:
       $body: |
-               /^  id  \s+  optimize.type            \s+  optimize.active  \s+  optimize.size  \s+  optimize.queue  \s+  optimize.queueSize  \s+  optimize.rejected  \s+  optimize.largest  \s+  optimize.completed  \s+  optimize.min  \s+  optimize.max  \s+  optimize.keepAlive  \s+  \n
+               /^  id  \s+  force_merge.type            \s+  force_merge.active  \s+  force_merge.size  \s+  force_merge.queue  \s+  force_merge.queueSize  \s+  force_merge.rejected  \s+  force_merge.largest  \s+  force_merge.completed  \s+  force_merge.min  \s+  force_merge.max  \s+  force_merge.keepAlive  \s+  \n
                   (\S+ \s+  (cached|fixed|scaling)?  \s+              \d+  \s+            \d+  \s+             \d+  \s+                 \d*  \s+                \d+  \s+               \d+  \s+                 \d+  \s+           \d*  \s+           \d*  \s+                 \S*  \s+  \n)+  $/
 
   - do:
diff --git a/rest-api-spec/src/main/resources/rest-api-spec/test/indices.forcemerge/10_basic.yaml b/rest-api-spec/src/main/resources/rest-api-spec/test/indices.forcemerge/10_basic.yaml
new file mode 100644
index 0000000..6f1c6ea
--- /dev/null
+++ b/rest-api-spec/src/main/resources/rest-api-spec/test/indices.forcemerge/10_basic.yaml
@@ -0,0 +1,10 @@
+---
+"Force merge index tests":
+  - do:
+      indices.create:
+        index: testing
+
+  - do:
+      indices.forcemerge:
+        index: testing
+        max_num_segments: 1
