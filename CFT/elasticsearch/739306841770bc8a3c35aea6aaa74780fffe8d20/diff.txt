diff --git a/core/pom.xml b/core/pom.xml
index 5c0dd25..3186718 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -162,10 +162,6 @@
             <artifactId>HdrHistogram</artifactId>
         </dependency>
         <dependency>
-            <groupId>org.apache.commons</groupId>
-            <artifactId>commons-lang3</artifactId>
-        </dependency>
-        <dependency>
             <groupId>commons-cli</groupId>
             <artifactId>commons-cli</artifactId>
         </dependency>
diff --git a/core/src/main/assemblies/common-bin.xml b/core/src/main/assemblies/common-bin.xml
index d402994..35c522e 100644
--- a/core/src/main/assemblies/common-bin.xml
+++ b/core/src/main/assemblies/common-bin.xml
@@ -23,7 +23,6 @@
                 <include>com.ning:compress-lzf</include>
                 <include>com.github.spullara.mustache.java:compiler</include>
                 <include>com.tdunning:t-digest</include>
-                <include>org.apache.commons:commons-lang3</include>
                 <include>commons-cli:commons-cli</include>
                 <include>com.twitter:jsr166e</include>
                 <include>org.hdrhistogram:HdrHistogram</include>
diff --git a/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java
index 5ae074a..be609e4 100644
--- a/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java
+++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java
@@ -260,7 +260,7 @@ public class TransportClient extends AbstractClient {
             // ignore, might not be bounded
         }
 
-        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).nodeServices()) {
+        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).services()) {
             injector.getInstance(plugin).close();
         }
         try {
diff --git a/core/src/main/java/org/elasticsearch/common/cli/CheckFileCommand.java b/core/src/main/java/org/elasticsearch/common/cli/CheckFileCommand.java
index 3273daf..2c8aa70 100644
--- a/core/src/main/java/org/elasticsearch/common/cli/CheckFileCommand.java
+++ b/core/src/main/java/org/elasticsearch/common/cli/CheckFileCommand.java
@@ -76,7 +76,7 @@ public abstract class CheckFileCommand extends CliTool.Command {
         if (paths != null && paths.length > 0) {
             for (Path path : paths) {
                 try {
-                    boolean supportsPosixPermissions = Files.getFileStore(path).supportsFileAttributeView(PosixFileAttributeView.class);
+                    boolean supportsPosixPermissions = Environment.getFileStore(path).supportsFileAttributeView(PosixFileAttributeView.class);
                     if (supportsPosixPermissions) {
                         PosixFileAttributes attributes = Files.readAttributes(path, PosixFileAttributes.class);
                         permissions.put(path, attributes.permissions());
diff --git a/core/src/main/java/org/elasticsearch/common/cli/CliTool.java b/core/src/main/java/org/elasticsearch/common/cli/CliTool.java
index 6b11e65..b3533b5 100644
--- a/core/src/main/java/org/elasticsearch/common/cli/CliTool.java
+++ b/core/src/main/java/org/elasticsearch/common/cli/CliTool.java
@@ -23,7 +23,6 @@ import com.google.common.base.Preconditions;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.CommandLineParser;
 import org.apache.commons.cli.DefaultParser;
-import org.apache.commons.cli.GnuParser;
 import org.elasticsearch.common.collect.Tuple;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.env.Environment;
diff --git a/core/src/main/java/org/elasticsearch/common/collect/CopyOnWriteHashMap.java b/core/src/main/java/org/elasticsearch/common/collect/CopyOnWriteHashMap.java
index 6bd3a5b..0675f55 100644
--- a/core/src/main/java/org/elasticsearch/common/collect/CopyOnWriteHashMap.java
+++ b/core/src/main/java/org/elasticsearch/common/collect/CopyOnWriteHashMap.java
@@ -22,9 +22,9 @@ package org.elasticsearch.common.collect;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Maps;
 import com.google.common.collect.UnmodifiableIterator;
-import org.apache.commons.lang3.ArrayUtils;
 import org.apache.lucene.util.mutable.MutableValueInt;
 
+import java.lang.reflect.Array;
 import java.util.*;
 
 /**
@@ -134,12 +134,13 @@ public final class CopyOnWriteHashMap<K, V> extends AbstractMap<K, V> {
 
         @Override
         V get(Object key, int hash) {
-            final int slot = ArrayUtils.indexOf(keys, key);
-            if (slot < 0) {
-                return null;
-            } else {
-                return values[slot];
+            for (int i = 0; i < keys.length; i++) {
+                if (key.equals(keys[i])) {
+                    return values[i];
+                }
             }
+            return null;
+
         }
 
         private static <T> T[] replace(T[] array, int index, T value) {
@@ -151,14 +152,20 @@ public final class CopyOnWriteHashMap<K, V> extends AbstractMap<K, V> {
         @Override
         Leaf<K, V> put(K key, int hash, int hashBits, V value, MutableValueInt newValue) {
             assert hashBits <= 0 : hashBits;
-            final int slot = ArrayUtils.indexOf(keys, key);
+            int slot = -1;
+            for (int i = 0; i < keys.length; i++) {
+                if (key.equals(keys[i])) {
+                    slot = i;
+                    break;
+                }
+            }
 
             final K[] keys2;
             final V[] values2;
 
             if (slot < 0) {
-                keys2 = ArrayUtils.add(keys, key);
-                values2 = ArrayUtils.add(values, value);
+                keys2 = appendElement(keys, key);
+                values2 = appendElement(values, value);
                 newValue.value = 1;
             } else {
                 keys2 = replace(keys, slot, key);
@@ -170,16 +177,49 @@ public final class CopyOnWriteHashMap<K, V> extends AbstractMap<K, V> {
 
         @Override
         Leaf<K, V> remove(Object key, int hash) {
-            final int slot = ArrayUtils.indexOf(keys, key);
+            int slot = -1;
+            for (int i = 0; i < keys.length; i++) {
+                if (key.equals(keys[i])) {
+                    slot = i;
+                    break;
+                }
+            }
             if (slot < 0) {
                 return this;
             }
-            final K[] keys2 = ArrayUtils.remove(keys, slot);
-            final V[] values2 = ArrayUtils.remove(values, slot);
+            final K[] keys2 = removeArrayElement(keys, slot);
+            final V[] values2 = removeArrayElement(values, slot);
             return new Leaf<>(keys2, values2);
         }
     }
 
+    private static <T> T[] removeArrayElement(T[] array, int index) {
+        final Object result = Array.newInstance(array.getClass().getComponentType(), array.length - 1);
+        System.arraycopy(array, 0, result, 0, index);
+        if (index < array.length - 1) {
+            System.arraycopy(array, index + 1, result, index, array.length - index - 1);
+        }
+
+        return (T[]) result;
+    }
+
+    public static <T> T[] appendElement(final T[] array, final T element) {
+        final T[] newArray = Arrays.copyOf(array, array.length + 1);
+        newArray[newArray.length - 1] = element;
+        return newArray;
+    }
+
+    public static <T> T[] insertElement(final T[] array, final T element, final int index) {
+        final T[] result = Arrays.copyOf(array, array.length + 1);
+        System.arraycopy(array, 0, result, 0, index);
+        result[index] = element;
+        if (index < array.length) {
+            System.arraycopy(array, index, result, index + 1, array.length - index);
+        }
+        return result;
+    }
+
+
     /**
      * An inner node in this trie. Inner nodes store up to 64 key-value pairs
      * and use a bitmap in order to associate hashes to them. For example, if
@@ -320,8 +360,8 @@ public final class CopyOnWriteHashMap<K, V> extends AbstractMap<K, V> {
 
         private InnerNode<K, V> putNew(K key, int hash6, int slot, V value) {
             final long mask2 = mask | (1L << hash6);
-            final K[] keys2 = ArrayUtils.add(keys, slot, key);
-            final Object[] subNodes2 = ArrayUtils.add(subNodes, slot, value);
+            final K[] keys2 = insertElement(keys, key, slot);
+            final Object[] subNodes2 = insertElement(subNodes, value, slot);
             return new InnerNode<>(mask2, keys2, subNodes2);
         }
 
@@ -342,8 +382,8 @@ public final class CopyOnWriteHashMap<K, V> extends AbstractMap<K, V> {
 
         private InnerNode<K, V> removeSlot(int hash6, int slot) {
             final long mask2 = mask  & ~(1L << hash6);
-            final K[] keys2 = ArrayUtils.remove(keys, slot);
-            final Object[] subNodes2 = ArrayUtils.remove(subNodes, slot);
+            final K[] keys2 = removeArrayElement(keys, slot);
+            final Object[] subNodes2 = removeArrayElement(subNodes, slot);
             return new InnerNode<>(mask2, keys2, subNodes2);
         }
 
diff --git a/core/src/main/java/org/elasticsearch/common/geo/builders/BasePolygonBuilder.java b/core/src/main/java/org/elasticsearch/common/geo/builders/BasePolygonBuilder.java
index c1cb9bb..c37c8a6 100644
--- a/core/src/main/java/org/elasticsearch/common/geo/builders/BasePolygonBuilder.java
+++ b/core/src/main/java/org/elasticsearch/common/geo/builders/BasePolygonBuilder.java
@@ -23,7 +23,7 @@ import com.google.common.collect.Sets;
 import com.spatial4j.core.exception.InvalidShapeException;
 import com.spatial4j.core.shape.Shape;
 import com.vividsolutions.jts.geom.*;
-import org.apache.commons.lang3.tuple.Pair;
+import org.elasticsearch.common.collect.Tuple;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 
 import java.io.IOException;
@@ -98,7 +98,6 @@ public abstract class BasePolygonBuilder<E extends BasePolygonBuilder<E>> extend
 
     /**
      * build new hole to the polygon
-     * @param hole linear ring defining the hole
      * @return this
      */
     public Ring<E> hole() {
@@ -285,7 +284,7 @@ public abstract class BasePolygonBuilder<E extends BasePolygonBuilder<E>> extend
         Edge current = edge;
         Edge prev = edge;
         // bookkeep the source and sink of each visited coordinate
-        HashMap<Coordinate, Pair<Edge, Edge>> visitedEdge = new HashMap<>();
+        HashMap<Coordinate, Tuple<Edge, Edge>> visitedEdge = new HashMap<>();
         do {
             current.coordinate = shift(current.coordinate, shiftOffset);
             current.component = id;
@@ -301,7 +300,7 @@ public abstract class BasePolygonBuilder<E extends BasePolygonBuilder<E>> extend
                     // since we're splitting connected components, we want the edges method to visit
                     // the newly separated component
                     final int visitID = -id;
-                    Edge firstAppearance = visitedEdge.get(current.coordinate).getRight();
+                    Edge firstAppearance = visitedEdge.get(current.coordinate).v2();
                     // correct the graph pointers by correcting the 'next' pointer for both the
                     // first appearance and this appearance of the edge
                     Edge temp = firstAppearance.next;
@@ -312,12 +311,12 @@ public abstract class BasePolygonBuilder<E extends BasePolygonBuilder<E>> extend
                     // a non-visited value (anything positive)
                     do {
                         prev.component = visitID;
-                        prev = visitedEdge.get(prev.coordinate).getLeft();
+                        prev = visitedEdge.get(prev.coordinate).v1();
                         ++splitIndex;
                     } while (!current.coordinate.equals(prev.coordinate));
                     ++connectedComponents;
                 } else {
-                    visitedEdge.put(current.coordinate, Pair.of(prev, current));
+                    visitedEdge.put(current.coordinate, new Tuple<Edge, Edge>(prev, current));
                 }
                 edges.add(current);
                 prev = current;
diff --git a/core/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilder.java b/core/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilder.java
index 2443e51..bfb4109 100644
--- a/core/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilder.java
+++ b/core/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilder.java
@@ -26,9 +26,8 @@ import com.spatial4j.core.shape.jts.JtsGeometry;
 import com.vividsolutions.jts.geom.Coordinate;
 import com.vividsolutions.jts.geom.Geometry;
 import com.vividsolutions.jts.geom.GeometryFactory;
-import org.apache.commons.lang3.tuple.Pair;
 import org.elasticsearch.ElasticsearchParseException;
-import org.elasticsearch.common.Explicit;
+import org.elasticsearch.common.collect.Tuple;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.ESLoggerFactory;
 import org.elasticsearch.common.unit.DistanceUnit.Distance;
@@ -487,7 +486,7 @@ public abstract class ShapeBuilder implements ToXContent {
             return top;
         }
 
-        private static final Pair range(Coordinate[] points, int offset, int length) {
+        private static final double[] range(Coordinate[] points, int offset, int length) {
             double minX = points[0].x;
             double maxX = points[0].x;
             double minY = points[0].y;
@@ -507,7 +506,7 @@ public abstract class ShapeBuilder implements ToXContent {
                     maxY = points[offset + i].y;
                 }
             }
-            return Pair.of(Pair.of(minX, maxX), Pair.of(minY, maxY));
+            return new double[] {minX, maxX, minY, maxY};
         }
 
         /**
@@ -585,8 +584,8 @@ public abstract class ShapeBuilder implements ToXContent {
             // and convert to a right handed system
 
             // compute the bounding box and calculate range
-            Pair<Pair, Pair> range = range(points, offset, length);
-            final double rng = (Double)range.getLeft().getRight() - (Double)range.getLeft().getLeft();
+            double[] range = range(points, offset, length);
+            final double rng = range[1] - range[0];
             // translate the points if the following is true
             //   1.  shell orientation is cw and range is greater than a hemisphere (180 degrees) but not spanning 2 hemispheres 
             //       (translation would result in a collapsed poly)
diff --git a/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java
index 258aa30..4a5b3fc 100644
--- a/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java
+++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java
@@ -131,13 +131,16 @@ public abstract class ExtensionPoint {
          * the settings object.
          *
          * @param binder       the binder to use
-         * @param settings     the settings to look up the key to find the implemetation to bind
+         * @param settings     the settings to look up the key to find the implementation to bind
          * @param settingsKey  the key to use with the settings
-         * @param defaultValue the default value if they settings doesn't contain the key
+         * @param defaultValue the default value if the settings do not contain the key, or null if there is no default
          * @return the actual bound type key
          */
         public String bindType(Binder binder, Settings settings, String settingsKey, String defaultValue) {
             final String type = settings.get(settingsKey, defaultValue);
+            if (type == null) {
+                throw new IllegalArgumentException("Missing setting [" + settingsKey + "]");
+            }
             final Class<? extends T> instance = getExtension(type);
             if (instance == null) {
                 throw new IllegalArgumentException("Unknown [" + this.name + "] type [" + type + "]");
diff --git a/core/src/main/java/org/elasticsearch/env/ESFileStore.java b/core/src/main/java/org/elasticsearch/env/ESFileStore.java
index 8963d78..d74432c 100644
--- a/core/src/main/java/org/elasticsearch/env/ESFileStore.java
+++ b/core/src/main/java/org/elasticsearch/env/ESFileStore.java
@@ -26,10 +26,12 @@ import org.elasticsearch.common.io.PathUtils;
 
 import java.io.IOException;
 import java.nio.file.FileStore;
+import java.nio.file.FileSystemException;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.attribute.FileAttributeView;
 import java.nio.file.attribute.FileStoreAttributeView;
+import java.util.Arrays;
 
 /** 
  * Implementation of FileStore that supports
@@ -73,13 +75,16 @@ class ESFileStore extends FileStore {
         }
     }
     
-    /** Files.getFileStore(Path) useless here!  Don't complain, just try it yourself. */
-    static FileStore getMatchingFileStore(Path path, FileStore fileStores[]) throws IOException {
-        FileStore store = Files.getFileStore(path);
-        
+    /** 
+     * Files.getFileStore(Path) useless here!  Don't complain, just try it yourself. 
+     */
+    @SuppressForbidden(reason = "works around the bugs")
+    static FileStore getMatchingFileStore(Path path, FileStore fileStores[]) throws IOException {       
         if (Constants.WINDOWS) {
-            return store; // be defensive, don't even try to do anything fancy.
+            return getFileStoreWindows(path, fileStores);
         }
+        
+        FileStore store = Files.getFileStore(path);
 
         try {
             String mount = getMountPointLinux(store);
@@ -110,6 +115,57 @@ class ESFileStore extends FileStore {
         // fall back to crappy one we got from Files.getFileStore
         return store;    
     }
+    
+    /** 
+     * remove this code and just use getFileStore for windows on java 9
+     * works around https://bugs.openjdk.java.net/browse/JDK-8034057
+     */
+    @SuppressForbidden(reason = "works around https://bugs.openjdk.java.net/browse/JDK-8034057")
+    static FileStore getFileStoreWindows(Path path, FileStore fileStores[]) throws IOException {
+        assert Constants.WINDOWS;
+        
+        try {
+            return Files.getFileStore(path);
+        } catch (FileSystemException possibleBug) {
+            final char driveLetter;
+            // look for a drive letter to see if its the SUBST bug,
+            // it might be some other type of path, like a windows share
+            // if something goes wrong, we just deliver the original exception
+            try {
+                String root = path.toRealPath().getRoot().toString();
+                if (root.length() < 2) {
+                    throw new RuntimeException("root isn't a drive letter: " + root);
+                }
+                driveLetter = Character.toLowerCase(root.charAt(0));
+                if (Character.isAlphabetic(driveLetter) == false || root.charAt(1) != ':') {
+                    throw new RuntimeException("root isn't a drive letter: " + root);
+                }
+            } catch (Throwable checkFailed) {
+                // something went wrong, 
+                possibleBug.addSuppressed(checkFailed);
+                throw possibleBug;
+            }
+            
+            // we have a drive letter: the hack begins!!!!!!!!
+            try {
+                // we have no choice but to parse toString of all stores and find the matching drive letter
+                for (FileStore store : fileStores) {
+                    String toString = store.toString();
+                    int length = toString.length();
+                    if (length > 3 && toString.endsWith(":)") && toString.charAt(length - 4) == '(') {
+                        if (Character.toLowerCase(toString.charAt(length - 3)) == driveLetter) {
+                            return store;
+                        }
+                    }
+                }
+                throw new RuntimeException("no filestores matched");
+            } catch (Throwable weTried) {
+                IOException newException = new IOException("Unable to retrieve filestore for '" + path + "', tried matching against " + Arrays.toString(fileStores), weTried);
+                newException.addSuppressed(possibleBug);
+                throw newException;
+            }
+        }
+    }
 
     @Override
     public String name() {
diff --git a/core/src/main/java/org/elasticsearch/env/Environment.java b/core/src/main/java/org/elasticsearch/env/Environment.java
index f50405e..a82dab9 100644
--- a/core/src/main/java/org/elasticsearch/env/Environment.java
+++ b/core/src/main/java/org/elasticsearch/env/Environment.java
@@ -19,6 +19,7 @@
 
 package org.elasticsearch.env;
 
+import org.apache.lucene.util.Constants;
 import org.elasticsearch.cluster.ClusterName;
 import org.elasticsearch.common.SuppressForbidden;
 import org.elasticsearch.common.io.PathUtils;
@@ -302,9 +303,37 @@ public class Environment {
      *   <li>Only requires the security permissions of {@link Files#getFileStore(Path)},
      *       no permissions to the actual mount point are required.
      *   <li>Exception handling has the same semantics as {@link Files#getFileStore(Path)}.
+     *   <li>Works around https://bugs.openjdk.java.net/browse/JDK-8034057.
      * </ul>
      */
-    public FileStore getFileStore(Path path) throws IOException {
+    public static FileStore getFileStore(Path path) throws IOException {
         return ESFileStore.getMatchingFileStore(path, fileStores);
     }
+    
+    /**
+     * Returns true if the path is writable.
+     * Acts just like {@link Files#isWritable(Path)}, except won't
+     * falsely return false for paths on SUBST'd drive letters
+     * See https://bugs.openjdk.java.net/browse/JDK-8034057
+     * Note this will set the file modification time (to its already-set value)
+     * to test access.
+     */
+    @SuppressForbidden(reason = "works around https://bugs.openjdk.java.net/browse/JDK-8034057")
+    public static boolean isWritable(Path path) throws IOException {
+        boolean v = Files.isWritable(path);
+        if (v || Constants.WINDOWS == false) {
+            return v;
+        }
+
+        // isWritable returned false on windows, the hack begins!!!!!!
+        // resetting the modification time is the least destructive/simplest
+        // way to check for both files and directories, and fails early just
+        // in getting the current value if file doesn't exist, etc
+        try {
+            Files.setLastModifiedTime(path, Files.getLastModifiedTime(path));
+            return true;
+        } catch (Throwable e) {
+            return false;
+        }
+    }
 }
diff --git a/core/src/main/java/org/elasticsearch/node/Node.java b/core/src/main/java/org/elasticsearch/node/Node.java
index 45e5522..7b9ed73 100644
--- a/core/src/main/java/org/elasticsearch/node/Node.java
+++ b/core/src/main/java/org/elasticsearch/node/Node.java
@@ -230,7 +230,7 @@ public class Node implements Releasable {
         // hack around dependency injection problem (for now...)
         injector.getInstance(Discovery.class).setRoutingService(injector.getInstance(RoutingService.class));
 
-        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {
+        for (Class<? extends LifecycleComponent> plugin : pluginsService.services()) {
             injector.getInstance(plugin).start();
         }
 
@@ -297,7 +297,7 @@ public class Node implements Releasable {
         injector.getInstance(RestController.class).stop();
         injector.getInstance(TransportService.class).stop();
 
-        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {
+        for (Class<? extends LifecycleComponent> plugin : pluginsService.services()) {
             injector.getInstance(plugin).stop();
         }
         // we should stop this last since it waits for resources to get released
@@ -364,7 +364,7 @@ public class Node implements Releasable {
         stopWatch.stop().start("percolator_service");
         injector.getInstance(PercolatorService.class).close();
 
-        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {
+        for (Class<? extends LifecycleComponent> plugin : pluginsService.services()) {
             stopWatch.stop().start("plugin(" + plugin.getName() + ")");
             injector.getInstance(plugin).close();
         }
diff --git a/core/src/main/java/org/elasticsearch/plugins/AbstractPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AbstractPlugin.java
index e33a277..0beff24 100644
--- a/core/src/main/java/org/elasticsearch/plugins/AbstractPlugin.java
+++ b/core/src/main/java/org/elasticsearch/plugins/AbstractPlugin.java
@@ -19,17 +19,103 @@
 
 package org.elasticsearch.plugins;
 
+import com.google.common.collect.ImmutableList;
 import org.elasticsearch.common.component.LifecycleComponent;
 import org.elasticsearch.common.inject.Module;
 import org.elasticsearch.common.settings.Settings;
 
 import java.io.Closeable;
 import java.util.Collection;
-import java.util.Collections;
 
 /**
- * A base class for a plugin which returns no services or modules.
+ * A base class for a plugin.
+ * <p/>
+ * A plugin can be dynamically injected with {@link Module} by implementing <tt>onModule(AnyModule)</tt> method
+ * removing the need to override {@link #processModule(org.elasticsearch.common.inject.Module)} and check using
+ * instanceof.
  */
-public abstract class AbstractPlugin extends Plugin {
+public abstract class AbstractPlugin implements Plugin {
+
+    /**
+     * Defaults to return an empty list.
+     */
+    @Override
+    public Collection<Class<? extends Module>> modules() {
+        return ImmutableList.of();
+    }
+
+    /**
+     * Defaults to return an empty list.
+     */
+    @Override
+    public Collection<Module> modules(Settings settings) {
+        return ImmutableList.of();
+    }
+
+    /**
+     * Defaults to return an empty list.
+     */
+    @Override
+    public Collection<Class<? extends LifecycleComponent>> services() {
+        return ImmutableList.of();
+    }
+
+    /**
+     * Defaults to return an empty list.
+     */
+    @Override
+    public Collection<Class<? extends Module>> indexModules() {
+        return ImmutableList.of();
+    }
+
+    /**
+     * Defaults to return an empty list.
+     */
+    @Override
+    public Collection<Module> indexModules(Settings settings) {
+        return ImmutableList.of();
+    }
+
+    /**
+     * Defaults to return an empty list.
+     */
+    @Override
+    public Collection<Class<? extends Closeable>> indexServices() {
+        return ImmutableList.of();
+    }
+
+    /**
+     * Defaults to return an empty list.
+     */
+    @Override
+    public Collection<Class<? extends Module>> shardModules() {
+        return ImmutableList.of();
+    }
+
+    /**
+     * Defaults to return an empty list.
+     */
+    @Override
+    public Collection<Module> shardModules(Settings settings) {
+        return ImmutableList.of();
+    }
+
+    /**
+     * Defaults to return an empty list.
+     */
+    @Override
+    public Collection<Class<? extends Closeable>> shardServices() {
+        return ImmutableList.of();
+    }
+
+    @Override
+    public void processModule(Module module) {
+        // nothing to do here
+    }
+
+    @Override
+    public Settings additionalSettings() {
+        return Settings.Builder.EMPTY_SETTINGS;
+    }
 
 }
diff --git a/core/src/main/java/org/elasticsearch/plugins/IndexPluginsModule.java b/core/src/main/java/org/elasticsearch/plugins/IndexPluginsModule.java
index a45f7d7..d9f35ae 100644
--- a/core/src/main/java/org/elasticsearch/plugins/IndexPluginsModule.java
+++ b/core/src/main/java/org/elasticsearch/plugins/IndexPluginsModule.java
@@ -19,12 +19,18 @@
 
 package org.elasticsearch.plugins;
 
+import com.google.common.collect.Lists;
 import org.elasticsearch.common.inject.AbstractModule;
 import org.elasticsearch.common.inject.Module;
 import org.elasticsearch.common.inject.PreProcessModule;
 import org.elasticsearch.common.inject.SpawnModules;
 import org.elasticsearch.common.settings.Settings;
 
+import java.util.Collection;
+import java.util.List;
+
+import static org.elasticsearch.common.inject.Modules.createModule;
+
 /**
  *
  */
@@ -41,7 +47,13 @@ public class IndexPluginsModule extends AbstractModule implements SpawnModules,
 
     @Override
     public Iterable<? extends Module> spawnModules() {
-        return pluginsService.indexModules(settings);
+        List<Module> modules = Lists.newArrayList();
+        Collection<Class<? extends Module>> modulesClasses = pluginsService.indexModules();
+        for (Class<? extends Module> moduleClass : modulesClasses) {
+            modules.add(createModule(moduleClass, settings));
+        }
+        modules.addAll(pluginsService.indexModules(settings));
+        return modules;
     }
 
     @Override
diff --git a/core/src/main/java/org/elasticsearch/plugins/Plugin.java b/core/src/main/java/org/elasticsearch/plugins/Plugin.java
index 986d397..0a459a5 100644
--- a/core/src/main/java/org/elasticsearch/plugins/Plugin.java
+++ b/core/src/main/java/org/elasticsearch/plugins/Plugin.java
@@ -25,73 +25,82 @@ import org.elasticsearch.common.settings.Settings;
 
 import java.io.Closeable;
 import java.util.Collection;
-import java.util.Collections;
 
 /**
  * An extension point allowing to plug in custom functionality.
  * <p/>
- * A plugin can be register custom extensions to builtin behavior by implementing <tt>onModule(AnyModule)</tt>,
- * and registering the extension with the given module.
+ * A plugin can be dynamically injected with {@link Module} by implementing <tt>onModule(AnyModule)</tt> method
+ * removing the need to override {@link #processModule(org.elasticsearch.common.inject.Module)} and check using
+ * instanceof.
  */
-public abstract class Plugin {
+public interface Plugin {
 
     /**
      * The name of the plugin.
      */
-    public abstract String name();
+    String name();
 
     /**
      * The description of the plugin.
      */
-    public abstract String description();
+    String description();
 
     /**
-     * Node level modules.
+     * Node level modules (classes, will automatically be created).
      */
-    public Collection<Module> nodeModules() {
-        return Collections.emptyList();
-    }
+    Collection<Class<? extends Module>> modules();
+
+    /**
+     * Node level modules (instances)
+     *
+     * @param settings The node level settings.
+     */
+    Collection<? extends Module> modules(Settings settings);
 
     /**
      * Node level services that will be automatically started/stopped/closed.
      */
-    public Collection<Class<? extends LifecycleComponent>> nodeServices() {
-        return Collections.emptyList();
-    }
+    Collection<Class<? extends LifecycleComponent>> services();
+
+    /**
+     * Per index modules.
+     */
+    Collection<Class<? extends Module>> indexModules();
 
     /**
      * Per index modules.
      */
-    public Collection<Module> indexModules(Settings indexSettings) {
-        return Collections.emptyList();
-    }
+    Collection<? extends Module> indexModules(Settings settings);
 
     /**
      * Per index services that will be automatically closed.
      */
-    public Collection<Class<? extends Closeable>> indexServices() {
-        return Collections.emptyList();
-    }
+    Collection<Class<? extends Closeable>> indexServices();
 
     /**
      * Per index shard module.
      */
-    public Collection<Module> shardModules(Settings indexSettings) {
-        return Collections.emptyList();
-    }
+    Collection<Class<? extends Module>> shardModules();
+
+    /**
+     * Per index shard module.
+     */
+    Collection<? extends Module> shardModules(Settings settings);
 
     /**
      * Per index shard service that will be automatically closed.
      */
-    public Collection<Class<? extends Closeable>> shardServices() {
-        return Collections.emptyList();
-    }
+    Collection<Class<? extends Closeable>> shardServices();
+
+    /**
+     * Process a specific module. Note, its simpler to implement a custom <tt>onModule(AnyModule module)</tt>
+     * method, which will be automatically be called by the relevant type.
+     */
+    void processModule(Module module);
 
     /**
      * Additional node settings loaded by the plugin. Note that settings that are explicit in the nodes settings can't be
      * overwritten with the additional settings. These settings added if they don't exist.
      */
-    public Settings additionalSettings() {
-        return Settings.Builder.EMPTY_SETTINGS;
-    }
+    Settings additionalSettings();
 }
diff --git a/core/src/main/java/org/elasticsearch/plugins/PluginManager.java b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java
index fbd5b74..234d719 100644
--- a/core/src/main/java/org/elasticsearch/plugins/PluginManager.java
+++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java
@@ -112,7 +112,7 @@ public class PluginManager {
             Files.createDirectory(environment.pluginsFile());
         }
 
-        if (!Files.isWritable(environment.pluginsFile())) {
+        if (!Environment.isWritable(environment.pluginsFile())) {
             throw new IOException("plugin directory " + environment.pluginsFile() + " is read only");
         }
 
@@ -246,7 +246,7 @@ public class PluginManager {
             } catch (IOException e) {
                 throw new IOException("Could not move [" + binFile + "] to [" + toLocation + "]", e);
             }
-            if (Files.getFileStore(toLocation).supportsFileAttributeView(PosixFileAttributeView.class)) {
+            if (Environment.getFileStore(toLocation).supportsFileAttributeView(PosixFileAttributeView.class)) {
                 // add read and execute permissions to existing perms, so execution will work.
                 // read should generally be set already, but set it anyway: don't rely on umask...
                 final Set<PosixFilePermission> executePerms = new HashSet<>();
diff --git a/core/src/main/java/org/elasticsearch/plugins/PluginsModule.java b/core/src/main/java/org/elasticsearch/plugins/PluginsModule.java
index 050a901..baf9f59 100644
--- a/core/src/main/java/org/elasticsearch/plugins/PluginsModule.java
+++ b/core/src/main/java/org/elasticsearch/plugins/PluginsModule.java
@@ -19,12 +19,18 @@
 
 package org.elasticsearch.plugins;
 
+import com.google.common.collect.Lists;
 import org.elasticsearch.common.inject.AbstractModule;
 import org.elasticsearch.common.inject.Module;
 import org.elasticsearch.common.inject.PreProcessModule;
 import org.elasticsearch.common.inject.SpawnModules;
 import org.elasticsearch.common.settings.Settings;
 
+import java.util.Collection;
+import java.util.List;
+
+import static org.elasticsearch.common.inject.Modules.createModule;
+
 /**
  *
  */
@@ -41,7 +47,13 @@ public class PluginsModule extends AbstractModule implements SpawnModules, PrePr
 
     @Override
     public Iterable<? extends Module> spawnModules() {
-        return pluginsService.nodeModules();
+        List<Module> modules = Lists.newArrayList();
+        Collection<Class<? extends Module>> modulesClasses = pluginsService.modules();
+        for (Class<? extends Module> moduleClass : modulesClasses) {
+            modules.add(createModule(moduleClass, settings));
+        }
+        modules.addAll(pluginsService.modules(settings));
+        return modules;
     }
 
     @Override
diff --git a/core/src/main/java/org/elasticsearch/plugins/PluginsService.java b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java
index b3a4a73..c1dfd74 100644
--- a/core/src/main/java/org/elasticsearch/plugins/PluginsService.java
+++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java
@@ -47,6 +47,7 @@ import java.nio.file.DirectoryStream;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
@@ -183,6 +184,7 @@ public class PluginsService extends AbstractComponent {
 
     public void processModule(Module module) {
         for (Tuple<PluginInfo, Plugin> plugin : plugins()) {
+            plugin.v2().processModule(module);
             // see if there are onModule references
             List<OnModuleReference> references = onModuleReferences.get(plugin.v2());
             if (references != null) {
@@ -200,33 +202,58 @@ public class PluginsService extends AbstractComponent {
     }
 
     public Settings updatedSettings() {
+        Map<String, String> foundSettings = new HashMap<>();
         final Settings.Builder builder = Settings.settingsBuilder();
         for (Tuple<PluginInfo, Plugin> plugin : plugins) {
-            builder.put(plugin.v2().additionalSettings());
+            Settings settings = plugin.v2().additionalSettings();
+            for (String setting : settings.getAsMap().keySet()) {
+                String oldPlugin = foundSettings.put(setting, plugin.v1().getName());
+                if (oldPlugin != null) {
+                    throw new IllegalArgumentException("Cannot have additional setting [" + setting + "] " +
+                        "in plugin [" + plugin.v1().getName() + "], already added in plugin [" + oldPlugin + "]");
+                }
+            }
+            builder.put(settings);
         }
         return builder.put(this.settings).build();
     }
 
-    public Collection<Module> nodeModules() {
+    public Collection<Class<? extends Module>> modules() {
+        List<Class<? extends Module>> modules = new ArrayList<>();
+        for (Tuple<PluginInfo, Plugin> plugin : plugins) {
+            modules.addAll(plugin.v2().modules());
+        }
+        return modules;
+    }
+
+    public Collection<Module> modules(Settings settings) {
         List<Module> modules = new ArrayList<>();
         for (Tuple<PluginInfo, Plugin> plugin : plugins) {
-            modules.addAll(plugin.v2().nodeModules());
+            modules.addAll(plugin.v2().modules(settings));
         }
         return modules;
     }
 
-    public Collection<Class<? extends LifecycleComponent>> nodeServices() {
+    public Collection<Class<? extends LifecycleComponent>> services() {
         List<Class<? extends LifecycleComponent>> services = new ArrayList<>();
         for (Tuple<PluginInfo, Plugin> plugin : plugins) {
-            services.addAll(plugin.v2().nodeServices());
+            services.addAll(plugin.v2().services());
         }
         return services;
     }
 
-    public Collection<Module> indexModules(Settings indexSettings) {
+    public Collection<Class<? extends Module>> indexModules() {
+        List<Class<? extends Module>> modules = new ArrayList<>();
+        for (Tuple<PluginInfo, Plugin> plugin : plugins) {
+            modules.addAll(plugin.v2().indexModules());
+        }
+        return modules;
+    }
+
+    public Collection<Module> indexModules(Settings settings) {
         List<Module> modules = new ArrayList<>();
         for (Tuple<PluginInfo, Plugin> plugin : plugins) {
-            modules.addAll(plugin.v2().indexModules(indexSettings));
+            modules.addAll(plugin.v2().indexModules(settings));
         }
         return modules;
     }
@@ -239,10 +266,18 @@ public class PluginsService extends AbstractComponent {
         return services;
     }
 
-    public Collection<Module> shardModules(Settings indexSettings) {
+    public Collection<Class<? extends Module>> shardModules() {
+        List<Class<? extends Module>> modules = new ArrayList<>();
+        for (Tuple<PluginInfo, Plugin> plugin : plugins) {
+            modules.addAll(plugin.v2().shardModules());
+        }
+        return modules;
+    }
+
+    public Collection<Module> shardModules(Settings settings) {
         List<Module> modules = new ArrayList<>();
         for (Tuple<PluginInfo, Plugin> plugin : plugins) {
-            modules.addAll(plugin.v2().shardModules(indexSettings));
+            modules.addAll(plugin.v2().shardModules(settings));
         }
         return modules;
     }
diff --git a/core/src/main/java/org/elasticsearch/plugins/ShardsPluginsModule.java b/core/src/main/java/org/elasticsearch/plugins/ShardsPluginsModule.java
index 5797b2d..b9e2178 100644
--- a/core/src/main/java/org/elasticsearch/plugins/ShardsPluginsModule.java
+++ b/core/src/main/java/org/elasticsearch/plugins/ShardsPluginsModule.java
@@ -19,12 +19,18 @@
 
 package org.elasticsearch.plugins;
 
+import com.google.common.collect.Lists;
 import org.elasticsearch.common.inject.AbstractModule;
 import org.elasticsearch.common.inject.Module;
 import org.elasticsearch.common.inject.PreProcessModule;
 import org.elasticsearch.common.inject.SpawnModules;
 import org.elasticsearch.common.settings.Settings;
 
+import java.util.Collection;
+import java.util.List;
+
+import static org.elasticsearch.common.inject.Modules.createModule;
+
 /**
  *
  */
@@ -41,7 +47,13 @@ public class ShardsPluginsModule extends AbstractModule implements SpawnModules,
 
     @Override
     public Iterable<? extends Module> spawnModules() {
-        return pluginsService.shardModules(settings);
+        List<Module> modules = Lists.newArrayList();
+        Collection<Class<? extends Module>> modulesClasses = pluginsService.shardModules();
+        for (Class<? extends Module> moduleClass : modulesClasses) {
+            modules.add(createModule(moduleClass, settings));
+        }
+        modules.addAll(pluginsService.shardModules(settings));
+        return modules;
     }
 
     @Override
diff --git a/core/src/main/java/org/elasticsearch/plugins/SitePlugin.java b/core/src/main/java/org/elasticsearch/plugins/SitePlugin.java
index 4c12f20..0f49764 100644
--- a/core/src/main/java/org/elasticsearch/plugins/SitePlugin.java
+++ b/core/src/main/java/org/elasticsearch/plugins/SitePlugin.java
@@ -19,8 +19,16 @@
 
 package org.elasticsearch.plugins;
 
+import org.elasticsearch.common.component.LifecycleComponent;
+import org.elasticsearch.common.inject.Module;
+import org.elasticsearch.common.settings.Settings;
+
+import java.io.Closeable;
+import java.util.Collection;
+import java.util.Collections;
+
 /** A site-only plugin, just serves resources */
-final class SitePlugin extends Plugin {
+final class SitePlugin implements Plugin {
     final String name;
     final String description;
     
@@ -38,4 +46,58 @@ final class SitePlugin extends Plugin {
     public String description() {
         return description;
     }
+
+    @Override
+    public Collection<Class<? extends Module>> modules() {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public Collection<? extends Module> modules(Settings settings) {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public Collection<Class<? extends LifecycleComponent>> services() {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public Collection<Class<? extends Module>> indexModules() {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public Collection<? extends Module> indexModules(Settings settings) {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public Collection<Class<? extends Closeable>> indexServices() {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public Collection<Class<? extends Module>> shardModules() {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public Collection<? extends Module> shardModules(Settings settings) {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public Collection<Class<? extends Closeable>> shardServices() {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public void processModule(Module module) {
+    }
+
+    @Override
+    public Settings additionalSettings() {
+        return Settings.EMPTY;
+    }
 }
diff --git a/core/src/main/java/org/elasticsearch/repositories/RepositoriesModule.java b/core/src/main/java/org/elasticsearch/repositories/RepositoriesModule.java
index bf74590..acad275 100644
--- a/core/src/main/java/org/elasticsearch/repositories/RepositoriesModule.java
+++ b/core/src/main/java/org/elasticsearch/repositories/RepositoriesModule.java
@@ -19,44 +19,33 @@
 
 package org.elasticsearch.repositories;
 
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Maps;
 import org.elasticsearch.action.admin.cluster.snapshots.status.TransportNodesSnapshotsStatus;
 import org.elasticsearch.common.inject.AbstractModule;
-import org.elasticsearch.common.inject.Module;
+import org.elasticsearch.index.snapshots.IndexShardRepository;
+import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository;
 import org.elasticsearch.repositories.fs.FsRepository;
-import org.elasticsearch.repositories.fs.FsRepositoryModule;
 import org.elasticsearch.repositories.uri.URLRepository;
-import org.elasticsearch.repositories.uri.URLRepositoryModule;
 import org.elasticsearch.snapshots.RestoreService;
-import org.elasticsearch.snapshots.SnapshotsService;
 import org.elasticsearch.snapshots.SnapshotShardsService;
-
-import java.util.Map;
+import org.elasticsearch.snapshots.SnapshotsService;
 
 /**
- * Module responsible for registering other repositories.
- * <p/>
- * Repositories implemented as plugins should implement {@code onModule(RepositoriesModule module)} method, in which
- * they should register repository using {@link #registerRepository(String, Class)} method.
+ * Sets up classes for Snapshot/Restore.
+ *
+ * Plugins can add custom repository types by calling {@link #registerRepository(String, Class, Class)}.
  */
 public class RepositoriesModule extends AbstractModule {
 
-    private Map<String, Class<? extends Module>> repositoryTypes = Maps.newHashMap();
+    private final RepositoryTypesRegistry repositoryTypes = new RepositoryTypesRegistry();
 
     public RepositoriesModule() {
-        registerRepository(FsRepository.TYPE, FsRepositoryModule.class);
-        registerRepository(URLRepository.TYPE, URLRepositoryModule.class);
+        registerRepository(FsRepository.TYPE, FsRepository.class, BlobStoreIndexShardRepository.class);
+        registerRepository(URLRepository.TYPE, URLRepository.class, BlobStoreIndexShardRepository.class);
     }
 
-    /**
-     * Registers a custom repository type name against a module.
-     *
-     * @param type   The type
-     * @param module The module
-     */
-    public void registerRepository(String type, Class<? extends Module> module) {
-        repositoryTypes.put(type, module);
+    /** Registers a custom repository type to the given {@link Repository} and {@link IndexShardRepository}. */
+    public void registerRepository(String type, Class<? extends Repository> repositoryType, Class<? extends IndexShardRepository> shardRepositoryType) {
+        repositoryTypes.registerRepository(type, repositoryType, shardRepositoryType);
     }
 
     @Override
@@ -66,6 +55,6 @@ public class RepositoriesModule extends AbstractModule {
         bind(SnapshotShardsService.class).asEagerSingleton();
         bind(TransportNodesSnapshotsStatus.class).asEagerSingleton();
         bind(RestoreService.class).asEagerSingleton();
-        bind(RepositoryTypesRegistry.class).toInstance(new RepositoryTypesRegistry(ImmutableMap.copyOf(repositoryTypes)));
+        bind(RepositoryTypesRegistry.class).toInstance(repositoryTypes);
     }
 }
diff --git a/core/src/main/java/org/elasticsearch/repositories/RepositoryModule.java b/core/src/main/java/org/elasticsearch/repositories/RepositoryModule.java
index 2dccc2b..eca82cc 100644
--- a/core/src/main/java/org/elasticsearch/repositories/RepositoryModule.java
+++ b/core/src/main/java/org/elasticsearch/repositories/RepositoryModule.java
@@ -19,7 +19,6 @@
 
 package org.elasticsearch.repositories;
 
-import com.google.common.collect.ImmutableList;
 import org.elasticsearch.common.inject.AbstractModule;
 import org.elasticsearch.common.inject.Module;
 import org.elasticsearch.common.inject.Modules;
@@ -29,12 +28,10 @@ import org.elasticsearch.common.settings.Settings;
 import java.util.Arrays;
 import java.util.Collections;
 
-import static org.elasticsearch.common.Strings.toCamelCase;
-
 /**
- * This module spawns specific repository module
+ * Binds repository classes for the specific repository type.
  */
-public class RepositoryModule extends AbstractModule implements SpawnModules {
+public class RepositoryModule extends AbstractModule {
 
     private RepositoryName repositoryName;
 
@@ -60,27 +57,11 @@ public class RepositoryModule extends AbstractModule implements SpawnModules {
     }
 
     /**
-     * Returns repository module.
-     * <p/>
-     * First repository type is looked up in typesRegistry and if it's not found there, this module tries to
-     * load repository by it's class name.
-     *
-     * @return repository module
-     */
-    @Override
-    public Iterable<? extends Module> spawnModules() {
-        Class<? extends Module> repoModuleClass = typesRegistry.type(repositoryName.type());
-        if (repoModuleClass == null) {
-            throw new IllegalArgumentException("Could not find repository type [" + repositoryName.getType() + "] for repository [" + repositoryName.getName() + "]");
-        }
-        return Collections.unmodifiableList(Arrays.asList(Modules.createModule(repoModuleClass, globalSettings)));
-    }
-
-    /**
      * {@inheritDoc}
      */
     @Override
     protected void configure() {
+        typesRegistry.bindType(binder(), repositoryName.type());
         bind(RepositorySettings.class).toInstance(new RepositorySettings(globalSettings, settings));
     }
 }
diff --git a/core/src/main/java/org/elasticsearch/repositories/RepositoryTypesRegistry.java b/core/src/main/java/org/elasticsearch/repositories/RepositoryTypesRegistry.java
index 1322b65..d2f02aa 100644
--- a/core/src/main/java/org/elasticsearch/repositories/RepositoryTypesRegistry.java
+++ b/core/src/main/java/org/elasticsearch/repositories/RepositoryTypesRegistry.java
@@ -19,31 +19,34 @@
 
 package org.elasticsearch.repositories;
 
-import com.google.common.collect.ImmutableMap;
-import org.elasticsearch.common.inject.Module;
+import org.elasticsearch.common.inject.Binder;
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.common.util.ExtensionPoint;
+import org.elasticsearch.index.snapshots.IndexShardRepository;
 
 /**
- * Map of registered repository types and associated with these types modules
+ * A mapping from type name to implementations of {@link Repository} and {@link IndexShardRepository}.
  */
 public class RepositoryTypesRegistry {
-    private final ImmutableMap<String, Class<? extends Module>> repositoryTypes;
+    // invariant: repositories and shardRepositories have the same keyset
+    private final ExtensionPoint.SelectedType<Repository> repositoryTypes =
+        new ExtensionPoint.SelectedType<>("repository", Repository.class);
+    private final ExtensionPoint.SelectedType<IndexShardRepository> shardRepositoryTypes =
+        new ExtensionPoint.SelectedType<>("index_repository", IndexShardRepository.class);
 
-    /**
-     * Creates new repository with given map of types
-     *
-     * @param repositoryTypes
-     */
-    public RepositoryTypesRegistry(ImmutableMap<String, Class<? extends Module>> repositoryTypes) {
-        this.repositoryTypes = repositoryTypes;
+    /** Adds a new repository type to the registry, bound to the given implementation classes. */
+    public void registerRepository(String name, Class<? extends Repository> repositoryType, Class<? extends IndexShardRepository> shardRepositoryType) {
+        repositoryTypes.registerExtension(name, repositoryType);
+        shardRepositoryTypes.registerExtension(name, shardRepositoryType);
     }
 
     /**
-     * Returns repository module class for the given type
-     *
-     * @param type repository type
-     * @return repository module class or null if type is not found
+     * Looks up the given type and binds the implementation into the given binder.
+     * Throws an {@link IllegalArgumentException} if the given type does not exist.
      */
-    public Class<? extends Module> type(String type) {
-        return repositoryTypes.get(type);
+    public void bindType(Binder binder, String type) {
+        Settings settings = Settings.builder().put("type", type).build();
+        repositoryTypes.bindType(binder, settings, "type", null);
+        shardRepositoryTypes.bindType(binder, settings, "type", null);
     }
 }
diff --git a/core/src/main/java/org/elasticsearch/repositories/fs/FsRepositoryModule.java b/core/src/main/java/org/elasticsearch/repositories/fs/FsRepositoryModule.java
deleted file mode 100644
index 2b8a4f4..0000000
--- a/core/src/main/java/org/elasticsearch/repositories/fs/FsRepositoryModule.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.elasticsearch.repositories.fs;
-
-import org.elasticsearch.common.inject.AbstractModule;
-import org.elasticsearch.index.snapshots.IndexShardRepository;
-import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository;
-import org.elasticsearch.repositories.Repository;
-
-/**
- * File system repository module
- */
-public class FsRepositoryModule extends AbstractModule {
-
-    public FsRepositoryModule() {
-        super();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    protected void configure() {
-        bind(Repository.class).to(FsRepository.class).asEagerSingleton();
-        bind(IndexShardRepository.class).to(BlobStoreIndexShardRepository.class).asEagerSingleton();
-    }
-
-}
-
diff --git a/core/src/main/java/org/elasticsearch/repositories/uri/URLRepositoryModule.java b/core/src/main/java/org/elasticsearch/repositories/uri/URLRepositoryModule.java
deleted file mode 100644
index 949a1b7..0000000
--- a/core/src/main/java/org/elasticsearch/repositories/uri/URLRepositoryModule.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.elasticsearch.repositories.uri;
-
-import org.elasticsearch.common.inject.AbstractModule;
-import org.elasticsearch.index.snapshots.IndexShardRepository;
-import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository;
-import org.elasticsearch.repositories.Repository;
-
-/**
- * URL repository module
- */
-public class URLRepositoryModule extends AbstractModule {
-
-    public URLRepositoryModule() {
-        super();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    protected void configure() {
-        bind(Repository.class).to(URLRepository.class).asEagerSingleton();
-        bind(IndexShardRepository.class).to(BlobStoreIndexShardRepository.class).asEagerSingleton();
-    }
-
-}
-
diff --git a/core/src/test/java/org/elasticsearch/action/IndicesRequestIT.java b/core/src/test/java/org/elasticsearch/action/IndicesRequestIT.java
index 10b3449..3d017cf 100644
--- a/core/src/test/java/org/elasticsearch/action/IndicesRequestIT.java
+++ b/core/src/test/java/org/elasticsearch/action/IndicesRequestIT.java
@@ -89,7 +89,7 @@ import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.index.query.QueryBuilders;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.script.Script;
 import org.elasticsearch.search.action.SearchServiceTransportAction;
 import org.elasticsearch.test.ESIntegTestCase;
@@ -144,7 +144,7 @@ public class IndicesRequestIT extends ESIntegTestCase {
     protected Settings nodeSettings(int nodeOrdinal) {
         return Settings.settingsBuilder()
                 .put(super.nodeSettings(nodeOrdinal))
-                .extendArray("plugin.types", InterceptingTransportService.TestPlugin.class.getName())
+                .extendArray("plugin.types", InterceptingTransportService.Plugin.class.getName())
                 .build();
     }
 
@@ -844,7 +844,7 @@ public class IndicesRequestIT extends ESIntegTestCase {
 
     public static class InterceptingTransportService extends TransportService {
 
-        public static class TestPlugin extends Plugin {
+        public static class Plugin extends AbstractPlugin {
             @Override
             public String name() {
                 return "intercepting-transport-service";
diff --git a/core/src/test/java/org/elasticsearch/benchmark/scripts/expression/NativeScriptPlugin.java b/core/src/test/java/org/elasticsearch/benchmark/scripts/expression/NativeScriptPlugin.java
index 92f19a7..c2e8bb9 100644
--- a/core/src/test/java/org/elasticsearch/benchmark/scripts/expression/NativeScriptPlugin.java
+++ b/core/src/test/java/org/elasticsearch/benchmark/scripts/expression/NativeScriptPlugin.java
@@ -19,10 +19,10 @@
 
 package org.elasticsearch.benchmark.scripts.expression;
 
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.script.ScriptModule;
 
-public class NativeScriptPlugin extends Plugin {
+public class NativeScriptPlugin extends AbstractPlugin {
 
     @Override
     public String name() {
diff --git a/core/src/test/java/org/elasticsearch/benchmark/scripts/score/plugin/NativeScriptExamplesPlugin.java b/core/src/test/java/org/elasticsearch/benchmark/scripts/score/plugin/NativeScriptExamplesPlugin.java
index 2a25f8f..0d90d9f 100644
--- a/core/src/test/java/org/elasticsearch/benchmark/scripts/score/plugin/NativeScriptExamplesPlugin.java
+++ b/core/src/test/java/org/elasticsearch/benchmark/scripts/score/plugin/NativeScriptExamplesPlugin.java
@@ -18,15 +18,11 @@
  */
 package org.elasticsearch.benchmark.scripts.score.plugin;
 
-import org.elasticsearch.benchmark.scripts.score.script.NativeConstantForLoopScoreScript;
-import org.elasticsearch.benchmark.scripts.score.script.NativeConstantScoreScript;
-import org.elasticsearch.benchmark.scripts.score.script.NativeNaiveTFIDFScoreScript;
-import org.elasticsearch.benchmark.scripts.score.script.NativePayloadSumNoRecordScoreScript;
-import org.elasticsearch.benchmark.scripts.score.script.NativePayloadSumScoreScript;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.benchmark.scripts.score.script.*;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.script.ScriptModule;
 
-public class NativeScriptExamplesPlugin extends Plugin {
+public class NativeScriptExamplesPlugin extends AbstractPlugin {
 
 
     @Override
diff --git a/core/src/test/java/org/elasticsearch/cache/recycler/MockPageCacheRecycler.java b/core/src/test/java/org/elasticsearch/cache/recycler/MockPageCacheRecycler.java
index ef5e50c..1f8ec84 100644
--- a/core/src/test/java/org/elasticsearch/cache/recycler/MockPageCacheRecycler.java
+++ b/core/src/test/java/org/elasticsearch/cache/recycler/MockPageCacheRecycler.java
@@ -25,6 +25,8 @@ import com.google.common.collect.Sets;
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.recycler.Recycler.V;
 import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.node.NodeModule;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.InternalTestCluster;
 import org.elasticsearch.threadpool.ThreadPool;
diff --git a/core/src/test/java/org/elasticsearch/client/transport/TransportClientHeadersTests.java b/core/src/test/java/org/elasticsearch/client/transport/TransportClientHeadersTests.java
index 20d14f3..758dc3f 100644
--- a/core/src/test/java/org/elasticsearch/client/transport/TransportClientHeadersTests.java
+++ b/core/src/test/java/org/elasticsearch/client/transport/TransportClientHeadersTests.java
@@ -35,17 +35,9 @@ import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.transport.LocalTransportAddress;
 import org.elasticsearch.common.transport.TransportAddress;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.threadpool.ThreadPool;
-import org.elasticsearch.transport.ConnectTransportException;
-import org.elasticsearch.transport.Transport;
-import org.elasticsearch.transport.TransportException;
-import org.elasticsearch.transport.TransportModule;
-import org.elasticsearch.transport.TransportRequest;
-import org.elasticsearch.transport.TransportRequestOptions;
-import org.elasticsearch.transport.TransportResponse;
-import org.elasticsearch.transport.TransportResponseHandler;
-import org.elasticsearch.transport.TransportService;
+import org.elasticsearch.transport.*;
 import org.junit.Test;
 
 import java.util.concurrent.CountDownLatch;
@@ -66,7 +58,7 @@ public class TransportClientHeadersTests extends AbstractClientHeadersTests {
         TransportClient client = TransportClient.builder().settings(Settings.builder()
                 .put("client.transport.sniff", false)
                 .put("node.name", "transport_client_" + this.getTestName())
-                .put("plugin.types", InternalTransportService.TestPlugin.class.getName())
+                .put("plugin.types", InternalTransportService.Plugin.class.getName())
                 .put(headersSettings)
                 .build()).build();
 
@@ -81,7 +73,7 @@ public class TransportClientHeadersTests extends AbstractClientHeadersTests {
                 .put("cluster.name", "cluster1")
                 .put("node.name", "transport_client_" + this.getTestName() + "_1")
             .put("client.transport.nodes_sampler_interval", "1s")
-            .put("plugin.types", InternalTransportService.TestPlugin.class.getName())
+            .put("plugin.types", InternalTransportService.Plugin.class.getName())
                 .put(HEADER_SETTINGS)
                 .put("path.home", createTempDir().toString())
                 .build()).build();
@@ -104,7 +96,7 @@ public class TransportClientHeadersTests extends AbstractClientHeadersTests {
 
     public static class InternalTransportService extends TransportService {
 
-        public static class TestPlugin extends Plugin {
+        public static class Plugin extends AbstractPlugin {
             @Override
             public String name() {
                 return "mock-transport-service";
diff --git a/core/src/test/java/org/elasticsearch/cluster/ClusterInfoServiceIT.java b/core/src/test/java/org/elasticsearch/cluster/ClusterInfoServiceIT.java
index 6368e5a..40dec51 100644
--- a/core/src/test/java/org/elasticsearch/cluster/ClusterInfoServiceIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/ClusterInfoServiceIT.java
@@ -35,14 +35,11 @@ import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.store.Store;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.InternalTestCluster;
 import org.elasticsearch.test.transport.MockTransportService;
-import org.elasticsearch.transport.TransportException;
-import org.elasticsearch.transport.TransportRequest;
-import org.elasticsearch.transport.TransportRequestOptions;
-import org.elasticsearch.transport.TransportService;
+import org.elasticsearch.transport.*;
 import org.hamcrest.Matchers;
 import org.junit.Test;
 
@@ -67,7 +64,7 @@ import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0)
 public class ClusterInfoServiceIT extends ESIntegTestCase {
 
-    public static class TestPlugin extends Plugin {
+    public static class Plugin extends AbstractPlugin {
 
         @Override
         public String name() {
@@ -146,7 +143,7 @@ public class ClusterInfoServiceIT extends ESIntegTestCase {
         return Settings.builder()
                 // manual collection or upon cluster forming.
                 .put(InternalClusterInfoService.INTERNAL_CLUSTER_INFO_TIMEOUT, "1s")
-                .putArray("plugin.types", TestPlugin.class.getName(), MockTransportService.TestPlugin.class.getName())
+                .putArray("plugin.types", Plugin.class.getName(), MockTransportService.Plugin.class.getName())
                 .build();
     }
 
diff --git a/core/src/test/java/org/elasticsearch/cluster/ClusterServiceIT.java b/core/src/test/java/org/elasticsearch/cluster/ClusterServiceIT.java
index 71c2c29..a174215 100644
--- a/core/src/test/java/org/elasticsearch/cluster/ClusterServiceIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/ClusterServiceIT.java
@@ -20,6 +20,7 @@ package org.elasticsearch.cluster;
 
 import com.google.common.base.Predicate;
 import com.google.common.util.concurrent.ListenableFuture;
+
 import org.apache.log4j.Level;
 import org.apache.log4j.Logger;
 import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
@@ -35,7 +36,7 @@ import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.inject.Singleton;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.TimeValue;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.MockLogAppender;
@@ -43,12 +44,7 @@ import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.junit.Test;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -56,11 +52,7 @@ import java.util.concurrent.atomic.AtomicBoolean;
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.greaterThanOrEqualTo;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
@@ -1000,7 +992,7 @@ public class ClusterServiceIT extends ESIntegTestCase {
         }
     }
 
-    public static class TestPlugin extends Plugin {
+    public static class TestPlugin extends AbstractPlugin {
 
         @Override
         public String name() {
@@ -1013,7 +1005,7 @@ public class ClusterServiceIT extends ESIntegTestCase {
         }
 
         @Override
-        public Collection<Class<? extends LifecycleComponent>> nodeServices() {
+        public Collection<Class<? extends LifecycleComponent>> services() {
             List<Class<? extends LifecycleComponent>> services = new ArrayList<>(1);
             services.add(MasterAwareService.class);
             return services;
diff --git a/core/src/test/java/org/elasticsearch/cluster/MockInternalClusterInfoService.java b/core/src/test/java/org/elasticsearch/cluster/MockInternalClusterInfoService.java
index 33ae26e..9331834 100644
--- a/core/src/test/java/org/elasticsearch/cluster/MockInternalClusterInfoService.java
+++ b/core/src/test/java/org/elasticsearch/cluster/MockInternalClusterInfoService.java
@@ -28,7 +28,7 @@ import org.elasticsearch.cluster.routing.allocation.decider.MockDiskUsagesIT;
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.node.settings.NodeSettingsService;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.threadpool.ThreadPool;
 
 import java.util.concurrent.CountDownLatch;
@@ -39,7 +39,7 @@ import java.util.concurrent.CountDownLatch;
  */
 public class MockInternalClusterInfoService extends InternalClusterInfoService {
 
-    public static class TestPlugin extends Plugin {
+    public static class Plugin extends AbstractPlugin {
         @Override
         public String name() {
             return "mock-cluster-info-service";
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/MockDiskUsagesIT.java b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/MockDiskUsagesIT.java
index 35b5ffe..b0ae30a 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/MockDiskUsagesIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/MockDiskUsagesIT.java
@@ -51,7 +51,7 @@ public class MockDiskUsagesIT extends ESIntegTestCase {
         return Settings.builder()
                 .put(super.nodeSettings(nodeOrdinal))
                     // Use the mock internal cluster info service, which has fake-able disk usages
-                .extendArray("plugin.types", MockInternalClusterInfoService.TestPlugin.class.getName())
+                .extendArray("plugin.types", MockInternalClusterInfoService.Plugin.class.getName())
                         // Update more frequently
                 .put(InternalClusterInfoService.INTERNAL_CLUSTER_INFO_UPDATE_INTERVAL, "1s")
                 .build();
diff --git a/core/src/test/java/org/elasticsearch/cluster/settings/SettingsFilteringIT.java b/core/src/test/java/org/elasticsearch/cluster/settings/SettingsFilteringIT.java
index 32551a4..8b3b871 100644
--- a/core/src/test/java/org/elasticsearch/cluster/settings/SettingsFilteringIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/settings/SettingsFilteringIT.java
@@ -25,13 +25,12 @@ import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.inject.Module;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.settings.SettingsFilter;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.junit.Test;
 
 import java.util.Collection;
-import java.util.Collections;
 
 import static com.google.common.collect.Lists.newArrayList;
 import static org.elasticsearch.test.ESIntegTestCase.Scope.SUITE;
@@ -50,7 +49,7 @@ public class SettingsFilteringIT extends ESIntegTestCase {
                 .build();
     }
 
-    public static class SettingsFilteringPlugin extends Plugin {
+    public static class SettingsFilteringPlugin extends AbstractPlugin {
         /**
          * The name of the plugin.
          */
@@ -68,8 +67,10 @@ public class SettingsFilteringIT extends ESIntegTestCase {
         }
 
         @Override
-        public Collection<Module> indexModules(Settings indexSettings) {
-            return Collections.<Module>singletonList(new SettingsFilteringModule());
+        public Collection<Class<? extends Module>> indexModules() {
+            Collection<Class<? extends Module>> modules = newArrayList();
+            modules.add(SettingsFilteringModule.class);
+            return modules;
         }
     }
 
diff --git a/core/src/test/java/org/elasticsearch/common/ParseFieldTests.java b/core/src/test/java/org/elasticsearch/common/ParseFieldTests.java
index 6df6a50..b3397a5 100644
--- a/core/src/test/java/org/elasticsearch/common/ParseFieldTests.java
+++ b/core/src/test/java/org/elasticsearch/common/ParseFieldTests.java
@@ -18,7 +18,6 @@
  */
 package org.elasticsearch.common;
 
-import org.apache.commons.lang3.ArrayUtils;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.Test;
 
@@ -77,7 +76,10 @@ public class ParseFieldTests extends ESTestCase {
         String[] deprecated = new String[]{"text", "same_as_text"};
         String[] allValues = values;
         if (withDeprecatedNames) {
-            allValues = ArrayUtils.addAll(values, deprecated);
+            String[] newArray = new String[allValues.length + deprecated.length];
+            System.arraycopy(allValues, 0, newArray, 0, allValues.length);
+            System.arraycopy(deprecated, 0, newArray, allValues.length, deprecated.length);
+            allValues = newArray;
         }
 
         ParseField field = new ParseField(randomFrom(values));
diff --git a/core/src/test/java/org/elasticsearch/common/util/MockBigArrays.java b/core/src/test/java/org/elasticsearch/common/util/MockBigArrays.java
index 1e94285..4eb4a37 100644
--- a/core/src/test/java/org/elasticsearch/common/util/MockBigArrays.java
+++ b/core/src/test/java/org/elasticsearch/common/util/MockBigArrays.java
@@ -24,12 +24,14 @@ import com.carrotsearch.randomizedtesting.SeedUtils;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+
 import org.apache.lucene.util.Accountable;
 import org.apache.lucene.util.Accountables;
 import org.apache.lucene.util.BytesRef;
 import org.elasticsearch.cache.recycler.PageCacheRecycler;
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.indices.breaker.CircuitBreakerService;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.test.ESTestCase;
 
 import java.util.Collection;
diff --git a/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java
index 84b206d..6c46659 100644
--- a/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java
+++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java
@@ -143,7 +143,7 @@ public class DiscoveryWithServiceDisruptionsIT extends ESIntegTestCase {
             .put(DiscoverySettings.PUBLISH_TIMEOUT, "1s") // <-- for hitting simulated network failures quickly
             .put("http.enabled", false) // just to make test quicker
             .put("gateway.local.list_timeout", "10s") // still long to induce failures but to long so test won't time out
-            .put("plugin.types", MockTransportService.TestPlugin.class.getName())
+            .put("plugin.types", MockTransportService.Plugin.class.getName())
             .build();
 
     private void configureCluster(int numberOfNodes, int minimumMasterNode) throws ExecutionException, InterruptedException {
diff --git a/core/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasIT.java b/core/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasIT.java
index ee85af9..0df33c5 100644
--- a/core/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasIT.java
+++ b/core/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasIT.java
@@ -416,7 +416,7 @@ public class IndexWithShadowReplicasIT extends ESIntegTestCase {
         Path dataPath = createTempDir();
         Settings nodeSettings = Settings.builder()
                 .put("node.add_id_to_custom_path", false)
-                .put("plugin.types", MockTransportService.TestPlugin.class.getName())
+                .put("plugin.types", MockTransportService.Plugin.class.getName())
                 .put("path.shared_data", dataPath)
                 .build();
 
diff --git a/core/src/test/java/org/elasticsearch/index/TransportIndexFailuresIT.java b/core/src/test/java/org/elasticsearch/index/TransportIndexFailuresIT.java
index 7725047..7efc561 100644
--- a/core/src/test/java/org/elasticsearch/index/TransportIndexFailuresIT.java
+++ b/core/src/test/java/org/elasticsearch/index/TransportIndexFailuresIT.java
@@ -56,7 +56,7 @@ public class TransportIndexFailuresIT extends ESIntegTestCase {
             .put(FaultDetection.SETTING_PING_RETRIES, "1") // <-- for hitting simulated network failures quickly
             .put(DiscoverySettings.PUBLISH_TIMEOUT, "1s") // <-- for hitting simulated network failures quickly
             .put("discovery.zen.minimum_master_nodes", 1)
-            .put("plugin.types", MockTransportService.TestPlugin.class.getName())
+            .put("plugin.types", MockTransportService.Plugin.class.getName())
             .build();
 
     @Override
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/externalvalues/ExternalMapperPlugin.java b/core/src/test/java/org/elasticsearch/index/mapper/externalvalues/ExternalMapperPlugin.java
index d9cee69..d9821af 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/externalvalues/ExternalMapperPlugin.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/externalvalues/ExternalMapperPlugin.java
@@ -20,25 +20,33 @@
 package org.elasticsearch.index.mapper.externalvalues;
 
 import org.elasticsearch.common.inject.Module;
-import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 
 import java.util.Collection;
-import java.util.Collections;
 
-public class ExternalMapperPlugin extends Plugin {
+import static com.google.common.collect.Lists.newArrayList;
+
+public class ExternalMapperPlugin extends AbstractPlugin {
+    /**
+     * The name of the plugin.
+     */
     @Override
     public String name() {
         return "external-mappers";
     }
 
+    /**
+     * The description of the plugin.
+     */
     @Override
     public String description() {
         return "External Mappers Plugin";
     }
 
     @Override
-    public Collection<Module> indexModules(Settings indexSettings) {
-        return Collections.<Module>singletonList(new ExternalIndexModule());
+    public Collection<Class<? extends Module>> indexModules() {
+        Collection<Class<? extends Module>> modules = newArrayList();
+        modules.add(ExternalIndexModule.class);
+        return modules;
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/index/query/plugin/DummyQueryParserPlugin.java b/core/src/test/java/org/elasticsearch/index/query/plugin/DummyQueryParserPlugin.java
index dbbc358..cdffcc8 100644
--- a/core/src/test/java/org/elasticsearch/index/query/plugin/DummyQueryParserPlugin.java
+++ b/core/src/test/java/org/elasticsearch/index/query/plugin/DummyQueryParserPlugin.java
@@ -30,11 +30,11 @@ import org.elasticsearch.index.query.QueryParseContext;
 import org.elasticsearch.index.query.QueryParser;
 import org.elasticsearch.index.query.QueryParsingException;
 import org.elasticsearch.indices.IndicesModule;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 
 import java.io.IOException;
 
-public class DummyQueryParserPlugin extends Plugin {
+public class DummyQueryParserPlugin extends AbstractPlugin {
 
     @Override
     public String name() {
diff --git a/core/src/test/java/org/elasticsearch/index/shard/MockEngineFactoryPlugin.java b/core/src/test/java/org/elasticsearch/index/shard/MockEngineFactoryPlugin.java
index d1b5048..8ed6060 100644
--- a/core/src/test/java/org/elasticsearch/index/shard/MockEngineFactoryPlugin.java
+++ b/core/src/test/java/org/elasticsearch/index/shard/MockEngineFactoryPlugin.java
@@ -19,16 +19,16 @@
 package org.elasticsearch.index.shard;
 
 import org.elasticsearch.common.inject.Module;
-import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.test.engine.MockEngineFactory;
 import org.elasticsearch.test.engine.MockEngineSupportModule;
 
+import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
+import java.util.List;
 
 // this must exist in the same package as IndexShardModule to allow access to setting the impl
-public class MockEngineFactoryPlugin extends Plugin {
+public class MockEngineFactoryPlugin extends AbstractPlugin {
     @Override
     public String name() {
         return "mock-engine-factory";
@@ -38,8 +38,10 @@ public class MockEngineFactoryPlugin extends Plugin {
         return "a mock engine factory for testing";
     }
     @Override
-    public Collection<Module> indexModules(Settings indexSettings) {
-        return Collections.<Module>singletonList(new MockEngineSupportModule());
+    public Collection<Class<? extends Module>> indexModules() {
+        List<Class<? extends Module>> modules = new ArrayList<>();
+        modules.add(MockEngineSupportModule.class);
+        return modules;
     }
     public void onModule(IndexShardModule module) {
         module.engineFactoryImpl = MockEngineFactory.class;
diff --git a/core/src/test/java/org/elasticsearch/index/store/CorruptedFileIT.java b/core/src/test/java/org/elasticsearch/index/store/CorruptedFileIT.java
index b9d0074..4a2f560 100644
--- a/core/src/test/java/org/elasticsearch/index/store/CorruptedFileIT.java
+++ b/core/src/test/java/org/elasticsearch/index/store/CorruptedFileIT.java
@@ -98,7 +98,7 @@ public class CorruptedFileIT extends ESIntegTestCase {
                 // we really need local GW here since this also checks for corruption etc.
                 // and we need to make sure primaries are not just trashed if we don't have replicas
                 .put(super.nodeSettings(nodeOrdinal))
-                .extendArray("plugin.types", MockTransportService.TestPlugin.class.getName())
+                .extendArray("plugin.types", MockTransportService.Plugin.class.getName())
                         // speed up recoveries
                 .put(RecoverySettings.INDICES_RECOVERY_CONCURRENT_STREAMS, 10)
                 .put(RecoverySettings.INDICES_RECOVERY_CONCURRENT_SMALL_FILE_STREAMS, 10)
diff --git a/core/src/test/java/org/elasticsearch/index/store/CorruptedTranslogIT.java b/core/src/test/java/org/elasticsearch/index/store/CorruptedTranslogIT.java
index 04b0ed3..ec5d242 100644
--- a/core/src/test/java/org/elasticsearch/index/store/CorruptedTranslogIT.java
+++ b/core/src/test/java/org/elasticsearch/index/store/CorruptedTranslogIT.java
@@ -66,7 +66,7 @@ public class CorruptedTranslogIT extends ESIntegTestCase {
                 // we really need local GW here since this also checks for corruption etc.
                 // and we need to make sure primaries are not just trashed if we don't have replicas
                 .put(super.nodeSettings(nodeOrdinal))
-                .extendArray("plugin.types", MockTransportService.TestPlugin.class.getName()).build();
+                .extendArray("plugin.types", MockTransportService.Plugin.class.getName()).build();
     }
 
     @Test
diff --git a/core/src/test/java/org/elasticsearch/index/store/ExceptionRetryIT.java b/core/src/test/java/org/elasticsearch/index/store/ExceptionRetryIT.java
index 9fe2a0f..bd2adc1 100644
--- a/core/src/test/java/org/elasticsearch/index/store/ExceptionRetryIT.java
+++ b/core/src/test/java/org/elasticsearch/index/store/ExceptionRetryIT.java
@@ -54,7 +54,7 @@ public class ExceptionRetryIT extends ESIntegTestCase {
     protected Settings nodeSettings(int nodeOrdinal) {
         return Settings.builder()
                 .put(super.nodeSettings(nodeOrdinal))
-                .extendArray("plugin.types", MockTransportService.TestPlugin.class.getName())
+                .extendArray("plugin.types", MockTransportService.Plugin.class.getName())
                 .build();
     }
 
diff --git a/core/src/test/java/org/elasticsearch/indices/analysis/DummyAnalysisPlugin.java b/core/src/test/java/org/elasticsearch/indices/analysis/DummyAnalysisPlugin.java
index 003771f..55d22eb 100644
--- a/core/src/test/java/org/elasticsearch/indices/analysis/DummyAnalysisPlugin.java
+++ b/core/src/test/java/org/elasticsearch/indices/analysis/DummyAnalysisPlugin.java
@@ -19,14 +19,14 @@
 
 package org.elasticsearch.indices.analysis;
 
+import com.google.common.collect.ImmutableList;
 import org.elasticsearch.common.inject.Module;
 import org.elasticsearch.index.analysis.AnalysisModule;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 
 import java.util.Collection;
-import java.util.Collections;
 
-public class DummyAnalysisPlugin extends Plugin {
+public class DummyAnalysisPlugin extends AbstractPlugin {
     /**
      * The name of the plugin.
      */
@@ -44,8 +44,8 @@ public class DummyAnalysisPlugin extends Plugin {
     }
 
     @Override
-    public Collection<Module> nodeModules() {
-        return Collections.<Module>singletonList(new DummyIndicesAnalysisModule());
+    public Collection<Class<? extends Module>> modules() {
+        return ImmutableList.<Class<? extends Module>>of(DummyIndicesAnalysisModule.class);
     }
 
     public void onModule(AnalysisModule module) {
diff --git a/core/src/test/java/org/elasticsearch/indices/memory/breaker/RandomExceptionCircuitBreakerIT.java b/core/src/test/java/org/elasticsearch/indices/memory/breaker/RandomExceptionCircuitBreakerIT.java
index 6ff35da..2e8c165 100644
--- a/core/src/test/java/org/elasticsearch/indices/memory/breaker/RandomExceptionCircuitBreakerIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/RandomExceptionCircuitBreakerIT.java
@@ -35,7 +35,7 @@ import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.engine.MockEngineSupport;
@@ -107,7 +107,7 @@ public class RandomExceptionCircuitBreakerIT extends ESIntegTestCase {
 
         Settings.Builder settings = settingsBuilder()
                 .put(indexSettings())
-                .extendArray("plugin.types", RandomExceptionDirectoryReaderWrapper.TestPlugin.class.getName())
+                .extendArray("plugin.types", RandomExceptionDirectoryReaderWrapper.Plugin.class.getName())
                 .put(EXCEPTION_TOP_LEVEL_RATIO_KEY, topLevelRate)
                 .put(EXCEPTION_LOW_LEVEL_RATIO_KEY, lowLevelRate)
                 .put(MockEngineSupport.WRAP_READER_RATIO, 1.0d);
@@ -202,7 +202,7 @@ public class RandomExceptionCircuitBreakerIT extends ESIntegTestCase {
     // TODO: Generalize this class and add it as a utility
     public static class RandomExceptionDirectoryReaderWrapper extends MockEngineSupport.DirectoryReaderWrapper {
 
-        public static class TestPlugin extends Plugin {
+        public static class Plugin extends AbstractPlugin {
             @Override
             public String name() {
                 return "random-exception-reader-wrapper";
diff --git a/core/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java b/core/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java
index c2860c7..a6263ee 100644
--- a/core/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java
@@ -519,7 +519,7 @@ public class IndexRecoveryIT extends ESIntegTestCase {
         final Settings nodeSettings = Settings.builder()
                 .put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK, "100ms")
                 .put(RecoverySettings.INDICES_RECOVERY_INTERNAL_ACTION_TIMEOUT, "1s")
-                .put("plugin.types", MockTransportService.TestPlugin.class.getName())
+                .put("plugin.types", MockTransportService.Plugin.class.getName())
                 .put(MockFSDirectoryService.RANDOM_PREVENT_DOUBLE_WRITE, false) // restarted recoveries will delete temp files and write them again
                 .build();
         // start a master node
diff --git a/core/src/test/java/org/elasticsearch/indices/store/IndicesStoreIntegrationIT.java b/core/src/test/java/org/elasticsearch/indices/store/IndicesStoreIntegrationIT.java
index 8984151..8417b22 100644
--- a/core/src/test/java/org/elasticsearch/indices/store/IndicesStoreIntegrationIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/store/IndicesStoreIntegrationIT.java
@@ -87,7 +87,7 @@ public class IndicesStoreIntegrationIT extends ESIntegTestCase {
                 // which is between 1 and 2 sec can cause each of the shard deletion requests to timeout.
                 // to prevent this we are setting the timeout here to something highish ie. the default in practice
                 .put(IndicesStore.INDICES_STORE_DELETE_SHARD_TIMEOUT, new TimeValue(30, TimeUnit.SECONDS))
-                .extendArray("plugin.types", MockTransportService.TestPlugin.class.getName())
+                .extendArray("plugin.types", MockTransportService.Plugin.class.getName())
                 .build();
     }
 
diff --git a/core/src/test/java/org/elasticsearch/indices/template/IndexTemplateFilteringIT.java b/core/src/test/java/org/elasticsearch/indices/template/IndexTemplateFilteringIT.java
index e441a95..fdabe10 100644
--- a/core/src/test/java/org/elasticsearch/indices/template/IndexTemplateFilteringIT.java
+++ b/core/src/test/java/org/elasticsearch/indices/template/IndexTemplateFilteringIT.java
@@ -27,7 +27,7 @@ import org.elasticsearch.cluster.metadata.IndexTemplateMetaData;
 import org.elasticsearch.cluster.metadata.MappingMetaData;
 import org.elasticsearch.common.collect.ImmutableOpenMap;
 import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.ESIntegTestCase.ClusterScope;
 import org.elasticsearch.test.ESIntegTestCase.Scope;
@@ -80,7 +80,7 @@ public class IndexTemplateFilteringIT extends ESIntegTestCase {
         }
     }
 
-    public static class TestPlugin extends Plugin {
+    public static class TestPlugin extends AbstractPlugin {
         @Override
         public String name() {
             return "test-plugin";
diff --git a/core/src/test/java/org/elasticsearch/node/NodeMocksPlugin.java b/core/src/test/java/org/elasticsearch/node/NodeMocksPlugin.java
index f958b2b..8eed1e1 100644
--- a/core/src/test/java/org/elasticsearch/node/NodeMocksPlugin.java
+++ b/core/src/test/java/org/elasticsearch/node/NodeMocksPlugin.java
@@ -20,9 +20,9 @@ package org.elasticsearch.node;
 
 import org.elasticsearch.cache.recycler.MockPageCacheRecycler;
 import org.elasticsearch.common.util.MockBigArrays;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 
-public class NodeMocksPlugin extends Plugin {
+public class NodeMocksPlugin extends AbstractPlugin {
 
     @Override
     public String name() {
diff --git a/core/src/test/java/org/elasticsearch/nodesinfo/plugin/dummy1/TestPlugin.java b/core/src/test/java/org/elasticsearch/nodesinfo/plugin/dummy1/TestPlugin.java
index 8455a3b..274e5e5 100644
--- a/core/src/test/java/org/elasticsearch/nodesinfo/plugin/dummy1/TestPlugin.java
+++ b/core/src/test/java/org/elasticsearch/nodesinfo/plugin/dummy1/TestPlugin.java
@@ -19,9 +19,9 @@
 
 package org.elasticsearch.nodesinfo.plugin.dummy1;
 
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 
-public class TestPlugin extends Plugin {
+public class TestPlugin extends AbstractPlugin {
 
     static final public class Fields {
         static public final String NAME = "test-plugin";
diff --git a/core/src/test/java/org/elasticsearch/nodesinfo/plugin/dummy2/TestNoVersionPlugin.java b/core/src/test/java/org/elasticsearch/nodesinfo/plugin/dummy2/TestNoVersionPlugin.java
new file mode 100644
index 0000000..58b5ee0
--- /dev/null
+++ b/core/src/test/java/org/elasticsearch/nodesinfo/plugin/dummy2/TestNoVersionPlugin.java
@@ -0,0 +1,40 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.nodesinfo.plugin.dummy2;
+
+import org.elasticsearch.plugins.AbstractPlugin;
+
+public class TestNoVersionPlugin extends AbstractPlugin {
+
+    static final public class Fields {
+        static public final String NAME = "test-no-version-plugin";
+        static public final String DESCRIPTION = NAME + " description";
+    }
+
+    @Override
+    public String name() {
+        return Fields.NAME;
+    }
+
+    @Override
+    public String description() {
+        return Fields.DESCRIPTION;
+    }
+}
diff --git a/core/src/test/java/org/elasticsearch/plugins/PluggableTransportModuleIT.java b/core/src/test/java/org/elasticsearch/plugins/PluggableTransportModuleIT.java
index 0790438..514e846 100644
--- a/core/src/test/java/org/elasticsearch/plugins/PluggableTransportModuleIT.java
+++ b/core/src/test/java/org/elasticsearch/plugins/PluggableTransportModuleIT.java
@@ -73,7 +73,7 @@ public class PluggableTransportModuleIT extends ESIntegTestCase {
         assertThat("Expected send request counter to be greather than zero", countAfterRequest, is(greaterThan(countBeforeRequest)));
     }
 
-    public static class CountingSentRequestsPlugin extends Plugin {
+    public static class CountingSentRequestsPlugin extends AbstractPlugin {
         @Override
         public String name() {
             return "counting-pipelines-plugin";
diff --git a/core/src/test/java/org/elasticsearch/plugins/PluginsServiceTests.java b/core/src/test/java/org/elasticsearch/plugins/PluginsServiceTests.java
new file mode 100644
index 0000000..8a1c8b1
--- /dev/null
+++ b/core/src/test/java/org/elasticsearch/plugins/PluginsServiceTests.java
@@ -0,0 +1,85 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.plugins;
+
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.env.Environment;
+import org.elasticsearch.index.store.IndexStoreModule;
+import org.elasticsearch.test.ESTestCase;
+
+public class PluginsServiceTests extends ESTestCase {
+    public static class AdditionalSettingsPlugin1 extends AbstractPlugin {
+        @Override
+        public String name() {
+            return "additional-settings1";
+        }
+        @Override
+        public String description() {
+            return "adds additional setting 'foo.bar'";
+        }
+        @Override
+        public Settings additionalSettings() {
+            return Settings.builder().put("foo.bar", "1").put(IndexStoreModule.STORE_TYPE, IndexStoreModule.Type.MMAPFS.getSettingsKey()).build();
+        }
+    }
+    public static class AdditionalSettingsPlugin2 extends AbstractPlugin {
+        @Override
+        public String name() {
+            return "additional-settings2";
+        }
+        @Override
+        public String description() {
+            return "adds additional setting 'foo.bar'";
+        }
+        @Override
+        public Settings additionalSettings() {
+            return Settings.builder().put("foo.bar", "2").build();
+        }
+    }
+
+    public void testAdditionalSettings() {
+        Settings settings = Settings.builder()
+            .put("path.home", createTempDir())
+            .put("my.setting", "test")
+            .put(IndexStoreModule.STORE_TYPE, IndexStoreModule.Type.SIMPLEFS.getSettingsKey())
+            .putArray("plugin.types", AdditionalSettingsPlugin1.class.getName()).build();
+        PluginsService service = new PluginsService(settings, new Environment(settings));
+        Settings newSettings = service.updatedSettings();
+        assertEquals("test", newSettings.get("my.setting")); // previous settings still exist
+        assertEquals("1", newSettings.get("foo.bar")); // added setting exists
+        assertEquals(IndexStoreModule.Type.SIMPLEFS.getSettingsKey(), newSettings.get(IndexStoreModule.STORE_TYPE)); // does not override pre existing settings
+    }
+
+    public void testAdditionalSettingsClash() {
+        Settings settings = Settings.builder()
+            .put("path.home", createTempDir())
+            .putArray("plugin.types", AdditionalSettingsPlugin1.class.getName(), AdditionalSettingsPlugin2.class.getName()).build();
+        PluginsService service = new PluginsService(settings, new Environment(settings));
+        try {
+            service.updatedSettings();
+            fail("Expected exception when building updated settings");
+        } catch (IllegalArgumentException e) {
+            String msg = e.getMessage();
+            assertTrue(msg, msg.contains("Cannot have additional setting [foo.bar]"));
+            assertTrue(msg, msg.contains("plugin [additional-settings1]"));
+            assertTrue(msg, msg.contains("plugin [additional-settings2]"));
+        }
+    }
+}
diff --git a/core/src/test/java/org/elasticsearch/plugins/loading/classpath/InClassPathPlugin.java b/core/src/test/java/org/elasticsearch/plugins/loading/classpath/InClassPathPlugin.java
index 79b1f24..cf4959e 100644
--- a/core/src/test/java/org/elasticsearch/plugins/loading/classpath/InClassPathPlugin.java
+++ b/core/src/test/java/org/elasticsearch/plugins/loading/classpath/InClassPathPlugin.java
@@ -19,9 +19,9 @@
 
 package org.elasticsearch.plugins.loading.classpath;
 
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 
-public class InClassPathPlugin extends Plugin {
+public class InClassPathPlugin extends AbstractPlugin {
 
     @Override
     public String name() {
diff --git a/core/src/test/java/org/elasticsearch/plugins/responseheader/TestResponseHeaderPlugin.java b/core/src/test/java/org/elasticsearch/plugins/responseheader/TestResponseHeaderPlugin.java
index b9282cf..48b00b2 100644
--- a/core/src/test/java/org/elasticsearch/plugins/responseheader/TestResponseHeaderPlugin.java
+++ b/core/src/test/java/org/elasticsearch/plugins/responseheader/TestResponseHeaderPlugin.java
@@ -19,10 +19,10 @@
 
 package org.elasticsearch.plugins.responseheader;
 
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.rest.RestModule;
 
-public class TestResponseHeaderPlugin extends Plugin {
+public class TestResponseHeaderPlugin extends AbstractPlugin {
 
     @Override
     public String name() {
diff --git a/core/src/test/java/org/elasticsearch/recovery/RelocationIT.java b/core/src/test/java/org/elasticsearch/recovery/RelocationIT.java
index 3962228..53a71e1 100644
--- a/core/src/test/java/org/elasticsearch/recovery/RelocationIT.java
+++ b/core/src/test/java/org/elasticsearch/recovery/RelocationIT.java
@@ -102,7 +102,7 @@ public class RelocationIT extends ESIntegTestCase {
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return Settings.builder()
-            .put("plugin.types", MockTransportService.TestPlugin.class.getName()).build();
+            .put("plugin.types", MockTransportService.Plugin.class.getName()).build();
     }
 
 
diff --git a/core/src/test/java/org/elasticsearch/recovery/TruncatedRecoveryIT.java b/core/src/test/java/org/elasticsearch/recovery/TruncatedRecoveryIT.java
index 943a148..c8943d1 100644
--- a/core/src/test/java/org/elasticsearch/recovery/TruncatedRecoveryIT.java
+++ b/core/src/test/java/org/elasticsearch/recovery/TruncatedRecoveryIT.java
@@ -58,7 +58,7 @@ public class TruncatedRecoveryIT extends ESIntegTestCase {
     protected Settings nodeSettings(int nodeOrdinal) {
         Settings.Builder builder = Settings.builder()
                 .put(super.nodeSettings(nodeOrdinal))
-                .extendArray("plugin.types", MockTransportService.TestPlugin.class.getName())
+                .extendArray("plugin.types", MockTransportService.Plugin.class.getName())
                 .put(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE, new ByteSizeValue(randomIntBetween(50, 300), ByteSizeUnit.BYTES));
         return builder.build();
     }
diff --git a/core/src/test/java/org/elasticsearch/script/CustomScriptContextIT.java b/core/src/test/java/org/elasticsearch/script/CustomScriptContextIT.java
index efac975..ef9c4e3 100644
--- a/core/src/test/java/org/elasticsearch/script/CustomScriptContextIT.java
+++ b/core/src/test/java/org/elasticsearch/script/CustomScriptContextIT.java
@@ -20,8 +20,10 @@
 package org.elasticsearch.script;
 
 import com.google.common.collect.ImmutableSet;
+
+import org.elasticsearch.common.inject.Module;
 import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.script.expression.ExpressionScriptEngineService;
 import org.elasticsearch.script.groovy.GroovyScriptEngineService;
 import org.elasticsearch.script.mustache.MustacheScriptEngineService;
@@ -115,7 +117,7 @@ public class CustomScriptContextIT extends ESIntegTestCase {
         }
     }
 
-    public static class CustomScriptContextPlugin extends Plugin {
+    public static class CustomScriptContextPlugin extends AbstractPlugin {
         @Override
         public String name() {
             return "custom_script_context_plugin";
@@ -126,10 +128,14 @@ public class CustomScriptContextIT extends ESIntegTestCase {
             return "Custom script context plugin";
         }
 
-        public void onModule(ScriptModule scriptModule) {
-            scriptModule.registerScriptContext(new ScriptContext.Plugin(PLUGIN_NAME, "custom_op"));
-            scriptModule.registerScriptContext(new ScriptContext.Plugin(PLUGIN_NAME, "custom_exp_disabled_op"));
-            scriptModule.registerScriptContext(new ScriptContext.Plugin(PLUGIN_NAME, "custom_globally_disabled_op"));
+        @Override
+        public void processModule(Module module) {
+            if (module instanceof ScriptModule) {
+                ScriptModule scriptModule = (ScriptModule) module;
+                scriptModule.registerScriptContext(new ScriptContext.Plugin(PLUGIN_NAME, "custom_op"));
+                scriptModule.registerScriptContext(new ScriptContext.Plugin(PLUGIN_NAME, "custom_exp_disabled_op"));
+                scriptModule.registerScriptContext(new ScriptContext.Plugin(PLUGIN_NAME, "custom_globally_disabled_op"));
+            }
         }
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/script/NativeScriptTests.java b/core/src/test/java/org/elasticsearch/script/NativeScriptTests.java
index 3c35a28..2ad584b 100644
--- a/core/src/test/java/org/elasticsearch/script/NativeScriptTests.java
+++ b/core/src/test/java/org/elasticsearch/script/NativeScriptTests.java
@@ -21,6 +21,7 @@ package org.elasticsearch.script;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
+
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.inject.Injector;
 import org.elasticsearch.common.inject.ModulesBuilder;
@@ -28,6 +29,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.settings.SettingsModule;
 import org.elasticsearch.env.Environment;
 import org.elasticsearch.env.EnvironmentModule;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.script.ScriptService.ScriptType;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.threadpool.ThreadPool;
diff --git a/core/src/test/java/org/elasticsearch/script/ScriptFieldIT.java b/core/src/test/java/org/elasticsearch/script/ScriptFieldIT.java
index c9707f7..471cbb4 100644
--- a/core/src/test/java/org/elasticsearch/script/ScriptFieldIT.java
+++ b/core/src/test/java/org/elasticsearch/script/ScriptFieldIT.java
@@ -23,7 +23,7 @@ import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.query.QueryBuilders;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.script.ScriptService.ScriptType;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.test.ESIntegTestCase;
@@ -152,7 +152,7 @@ public class ScriptFieldIT extends ESIntegTestCase {
         }
     }
 
-    public static class CustomScriptPlugin extends Plugin {
+    public static class CustomScriptPlugin extends AbstractPlugin {
 
         @Override
         public String name() {
diff --git a/core/src/test/java/org/elasticsearch/search/MockSearchService.java b/core/src/test/java/org/elasticsearch/search/MockSearchService.java
index 9a7a3ef..077f730 100644
--- a/core/src/test/java/org/elasticsearch/search/MockSearchService.java
+++ b/core/src/test/java/org/elasticsearch/search/MockSearchService.java
@@ -28,8 +28,9 @@ import org.elasticsearch.indices.IndicesService;
 import org.elasticsearch.indices.IndicesWarmer;
 import org.elasticsearch.indices.cache.request.IndicesRequestCache;
 import org.elasticsearch.node.settings.NodeSettingsService;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.script.ScriptService;
+import org.elasticsearch.search.SearchService;
 import org.elasticsearch.search.dfs.DfsPhase;
 import org.elasticsearch.search.fetch.FetchPhase;
 import org.elasticsearch.search.internal.SearchContext;
@@ -42,7 +43,7 @@ import java.util.concurrent.ConcurrentHashMap;
 
 public class MockSearchService extends SearchService {
 
-    public static class TestPlugin extends Plugin {
+    public static class Plugin extends AbstractPlugin {
         @Override
         public String name() {
             return "mock-search-service";
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsSignificanceScoreIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsSignificanceScoreIT.java
index c3780e9..f167ce3 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsSignificanceScoreIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsSignificanceScoreIT.java
@@ -30,7 +30,7 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.index.query.QueryParsingException;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.script.Script;
 import org.elasticsearch.script.ScriptModule;
 import org.elasticsearch.script.ScriptService;
@@ -45,14 +45,7 @@ import org.elasticsearch.search.aggregations.bucket.significant.SignificantStrin
 import org.elasticsearch.search.aggregations.bucket.significant.SignificantTerms;
 import org.elasticsearch.search.aggregations.bucket.significant.SignificantTermsAggregatorFactory;
 import org.elasticsearch.search.aggregations.bucket.significant.SignificantTermsBuilder;
-import org.elasticsearch.search.aggregations.bucket.significant.heuristics.ChiSquare;
-import org.elasticsearch.search.aggregations.bucket.significant.heuristics.GND;
-import org.elasticsearch.search.aggregations.bucket.significant.heuristics.MutualInformation;
-import org.elasticsearch.search.aggregations.bucket.significant.heuristics.ScriptHeuristic;
-import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristic;
-import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristicBuilder;
-import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristicParser;
-import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristicStreams;
+import org.elasticsearch.search.aggregations.bucket.significant.heuristics.*;
 import org.elasticsearch.search.aggregations.bucket.terms.StringTerms;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.search.aggregations.bucket.terms.TermsBuilder;
@@ -60,12 +53,7 @@ import org.elasticsearch.test.ESIntegTestCase;
 import org.junit.Test;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 import java.util.concurrent.ExecutionException;
 
 import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_REPLICAS;
@@ -73,10 +61,7 @@ import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
-import static org.hamcrest.Matchers.closeTo;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.*;
 
 /**
  *
@@ -169,7 +154,7 @@ public class SignificantTermsSignificanceScoreIT extends ESIntegTestCase {
         }
     }
 
-    public static class CustomSignificanceHeuristicPlugin extends Plugin {
+    public static class CustomSignificanceHeuristicPlugin extends AbstractPlugin {
 
         @Override
         public String name() {
diff --git a/core/src/test/java/org/elasticsearch/search/basic/SearchWithRandomExceptionsIT.java b/core/src/test/java/org/elasticsearch/search/basic/SearchWithRandomExceptionsIT.java
index 76e2446..6437513 100644
--- a/core/src/test/java/org/elasticsearch/search/basic/SearchWithRandomExceptionsIT.java
+++ b/core/src/test/java/org/elasticsearch/search/basic/SearchWithRandomExceptionsIT.java
@@ -35,7 +35,7 @@ import org.elasticsearch.common.settings.Settings.Builder;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.query.QueryBuilders;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.search.sort.SortOrder;
 import org.elasticsearch.test.ESIntegTestCase;
@@ -252,7 +252,7 @@ public class SearchWithRandomExceptionsIT extends ESIntegTestCase {
 
         Builder settings = settingsBuilder()
                 .put(indexSettings())
-                .extendArray("plugin.types", RandomExceptionDirectoryReaderWrapper.TestPlugin.class.getName())
+                .extendArray("plugin.types", RandomExceptionDirectoryReaderWrapper.Plugin.class.getName())
                 .put(EXCEPTION_TOP_LEVEL_RATIO_KEY, topLevelRate)
                 .put(EXCEPTION_LOW_LEVEL_RATIO_KEY, lowLevelRate)
                 .put(MockEngineSupport.WRAP_READER_RATIO, 1.0d);
@@ -313,7 +313,7 @@ public class SearchWithRandomExceptionsIT extends ESIntegTestCase {
 
     public static class RandomExceptionDirectoryReaderWrapper extends MockEngineSupport.DirectoryReaderWrapper {
 
-        public static class TestPlugin extends Plugin {
+        public static class Plugin extends AbstractPlugin {
             @Override
             public String name() {
                 return "random-exception-reader-wrapper";
diff --git a/core/src/test/java/org/elasticsearch/search/fetch/FetchSubPhasePluginIT.java b/core/src/test/java/org/elasticsearch/search/fetch/FetchSubPhasePluginIT.java
index 58ec58b..daf4d11 100644
--- a/core/src/test/java/org/elasticsearch/search/fetch/FetchSubPhasePluginIT.java
+++ b/core/src/test/java/org/elasticsearch/search/fetch/FetchSubPhasePluginIT.java
@@ -29,7 +29,7 @@ import org.elasticsearch.action.termvectors.TermVectorsResponse;
 import org.elasticsearch.common.Priority;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.XContentParser;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.search.SearchHitField;
 import org.elasticsearch.search.SearchModule;
 import org.elasticsearch.search.SearchParseElement;
@@ -99,7 +99,7 @@ public class FetchSubPhasePluginIT extends ESIntegTestCase {
         assertThat(((Map<String, Integer>) response.getHits().getAt(0).field("term_vectors_fetch").getValues().get(0)).get("sam"), equalTo(1));
     }
 
-    public static class FetchTermVectorsPlugin extends Plugin {
+    public static class FetchTermVectorsPlugin extends AbstractPlugin {
 
         @Override
         public String name() {
diff --git a/core/src/test/java/org/elasticsearch/search/functionscore/ExplainableScriptPlugin.java b/core/src/test/java/org/elasticsearch/search/functionscore/ExplainableScriptPlugin.java
index a32baa5..d30c945 100644
--- a/core/src/test/java/org/elasticsearch/search/functionscore/ExplainableScriptPlugin.java
+++ b/core/src/test/java/org/elasticsearch/search/functionscore/ExplainableScriptPlugin.java
@@ -19,10 +19,10 @@
 
 package org.elasticsearch.search.functionscore;
 
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.script.ScriptModule;
 
-public class ExplainableScriptPlugin extends Plugin {
+public class ExplainableScriptPlugin extends AbstractPlugin {
 
     public ExplainableScriptPlugin() {}
     @Override
diff --git a/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScorePluginIT.java b/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScorePluginIT.java
index d1dd06d..61f50a1 100644
--- a/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScorePluginIT.java
+++ b/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScorePluginIT.java
@@ -28,7 +28,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.query.functionscore.DecayFunction;
 import org.elasticsearch.index.query.functionscore.DecayFunctionBuilder;
 import org.elasticsearch.index.query.functionscore.DecayFunctionParser;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.search.SearchHits;
 import org.elasticsearch.search.SearchModule;
 import org.elasticsearch.test.ESIntegTestCase;
@@ -95,7 +95,7 @@ public class FunctionScorePluginIT extends ESIntegTestCase {
 
     }
 
-    public static class CustomDistanceScorePlugin extends Plugin {
+    public static class CustomDistanceScorePlugin extends AbstractPlugin {
 
         @Override
         public String name() {
diff --git a/core/src/test/java/org/elasticsearch/search/highlight/CustomHighlighterPlugin.java b/core/src/test/java/org/elasticsearch/search/highlight/CustomHighlighterPlugin.java
index 80e39a2..705265e 100644
--- a/core/src/test/java/org/elasticsearch/search/highlight/CustomHighlighterPlugin.java
+++ b/core/src/test/java/org/elasticsearch/search/highlight/CustomHighlighterPlugin.java
@@ -19,10 +19,10 @@
 
 package org.elasticsearch.search.highlight;
 
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.search.SearchModule;
 
-public class CustomHighlighterPlugin extends Plugin {
+public class CustomHighlighterPlugin extends AbstractPlugin {
 
     @Override
     public String name() {
diff --git a/core/src/test/java/org/elasticsearch/search/suggest/CustomSuggesterPlugin.java b/core/src/test/java/org/elasticsearch/search/suggest/CustomSuggesterPlugin.java
index c5e36da..9ba9c53 100644
--- a/core/src/test/java/org/elasticsearch/search/suggest/CustomSuggesterPlugin.java
+++ b/core/src/test/java/org/elasticsearch/search/suggest/CustomSuggesterPlugin.java
@@ -18,13 +18,13 @@
  */
 package org.elasticsearch.search.suggest;
 
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.search.SearchModule;
 
 /**
  *
  */
-public class CustomSuggesterPlugin extends Plugin {
+public class CustomSuggesterPlugin extends AbstractPlugin {
 
     @Override
     public String name() {
diff --git a/core/src/test/java/org/elasticsearch/snapshots/AbstractSnapshotIntegTestCase.java b/core/src/test/java/org/elasticsearch/snapshots/AbstractSnapshotIntegTestCase.java
index a9e2bc5..4e30e3c 100644
--- a/core/src/test/java/org/elasticsearch/snapshots/AbstractSnapshotIntegTestCase.java
+++ b/core/src/test/java/org/elasticsearch/snapshots/AbstractSnapshotIntegTestCase.java
@@ -35,7 +35,6 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.repositories.RepositoriesService;
 import org.elasticsearch.snapshots.mockstore.MockRepository;
-import org.elasticsearch.snapshots.mockstore.MockRepositoryPlugin;
 import org.elasticsearch.test.ESIntegTestCase;
 
 import java.io.IOException;
@@ -58,10 +57,10 @@ public abstract class AbstractSnapshotIntegTestCase extends ESIntegTestCase {
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return settingsBuilder().put(super.nodeSettings(nodeOrdinal))
-                // Rebalancing is causing some checks after restore to randomly fail
-                // due to https://github.com/elastic/elasticsearch/issues/9421
-                .put(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE, EnableAllocationDecider.Rebalance.NONE)
-                .extendArray("plugin.types", MockRepositoryPlugin.class.getName()).build();
+            // Rebalancing is causing some checks after restore to randomly fail
+            // due to https://github.com/elastic/elasticsearch/issues/9421
+            .put(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE, EnableAllocationDecider.Rebalance.NONE)
+            .extendArray("plugin.types", MockRepository.Plugin.class.getName()).build();
     }
 
     public static long getFailureCount(String repository) {
diff --git a/core/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java b/core/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java
index fa0ebde..cea3233 100644
--- a/core/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java
+++ b/core/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java
@@ -21,10 +21,8 @@ package org.elasticsearch.snapshots;
 
 import com.carrotsearch.hppc.IntHashSet;
 import com.carrotsearch.hppc.IntSet;
-import com.google.common.base.Predicate;
 import com.google.common.collect.ImmutableList;
 import com.google.common.util.concurrent.ListenableFuture;
-
 import org.elasticsearch.ElasticsearchParseException;
 import org.elasticsearch.action.ListenableActionFuture;
 import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryResponse;
@@ -41,8 +39,8 @@ import org.elasticsearch.cluster.AbstractDiffable;
 import org.elasticsearch.cluster.ClusterService;
 import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.cluster.ProcessedClusterStateUpdateTask;
-import org.elasticsearch.cluster.metadata.MetaData.Custom;
 import org.elasticsearch.cluster.metadata.MetaData;
+import org.elasticsearch.cluster.metadata.MetaData.Custom;
 import org.elasticsearch.cluster.metadata.MetaDataIndexStateService;
 import org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDecider;
 import org.elasticsearch.common.Nullable;
@@ -64,11 +62,9 @@ import org.elasticsearch.rest.RestRequest;
 import org.elasticsearch.rest.RestResponse;
 import org.elasticsearch.rest.action.admin.cluster.repositories.get.RestGetRepositoriesAction;
 import org.elasticsearch.rest.action.admin.cluster.state.RestClusterStateAction;
-import org.elasticsearch.snapshots.mockstore.MockRepositoryModule;
-import org.elasticsearch.snapshots.mockstore.MockRepositoryPlugin;
+import org.elasticsearch.snapshots.mockstore.MockRepository;
 import org.elasticsearch.test.InternalTestCluster;
 import org.elasticsearch.test.rest.FakeRestRequest;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.IOException;
@@ -88,7 +84,15 @@ import static org.elasticsearch.test.ESIntegTestCase.Scope;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertBlocked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertThrows;
-import static org.hamcrest.Matchers.*;
+import static org.hamcrest.Matchers.allOf;
+import static org.hamcrest.Matchers.containsString;
+import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.greaterThan;
+import static org.hamcrest.Matchers.greaterThanOrEqualTo;
+import static org.hamcrest.Matchers.lessThan;
+import static org.hamcrest.Matchers.not;
+import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.nullValue;
 
 /**
  */
@@ -466,18 +470,16 @@ public class DedicatedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTest
             client().admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-2")
                     .setIndices("test-idx-all", "test-idx-none", "test-idx-some")
                     .setWaitForCompletion(false).setPartial(true).execute().actionGet();
-            awaitBusy(new Predicate<Object>() {
+            assertBusy(new Runnable() {
                 @Override
-                public boolean apply(Object o) {
+                public void run() {
                     SnapshotsStatusResponse snapshotsStatusResponse = client().admin().cluster().prepareSnapshotStatus("test-repo").setSnapshots("test-snap-2").get();
                     ImmutableList<SnapshotStatus> snapshotStatuses = snapshotsStatusResponse.getSnapshots();
-                    if (snapshotStatuses.size() == 1) {
-                        logger.trace("current snapshot status [{}]", snapshotStatuses.get(0));
-                        return snapshotStatuses.get(0).getState().completed();
-                    }
-                    return false;
+                    assertEquals(snapshotStatuses.size(), 1);
+                    logger.trace("current snapshot status [{}]", snapshotStatuses.get(0));
+                    assertTrue(snapshotStatuses.get(0).getState().completed());
                 }
-            });
+            }, 1, TimeUnit.MINUTES);
             SnapshotsStatusResponse snapshotsStatusResponse = client().admin().cluster().prepareSnapshotStatus("test-repo").setSnapshots("test-snap-2").get();
             ImmutableList<SnapshotStatus> snapshotStatuses = snapshotsStatusResponse.getSnapshots();
             assertThat(snapshotStatuses.size(), equalTo(1));
@@ -489,19 +491,16 @@ public class DedicatedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTest
 
             // There is slight delay between snapshot being marked as completed in the cluster state and on the file system
             // After it was marked as completed in the cluster state - we need to check if it's completed on the file system as well
-            awaitBusy(new Predicate<Object>() {
+            assertBusy(new Runnable() {
                 @Override
-                public boolean apply(Object o) {
+                public void run() {
                     GetSnapshotsResponse response = client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap-2").get();
                     assertThat(response.getSnapshots().size(), equalTo(1));
                     SnapshotInfo snapshotInfo = response.getSnapshots().get(0);
-                    if (snapshotInfo.state().completed()) {
-                        assertThat(snapshotInfo.state(), equalTo(SnapshotState.PARTIAL));
-                        return true;
-                    }
-                    return false;
+                    assertTrue(snapshotInfo.state().completed());
+                    assertEquals(SnapshotState.PARTIAL, snapshotInfo.state());
                 }
-            });
+            }, 1, TimeUnit.MINUTES);
         } else {
             logger.info("checking snapshot completion using wait_for_completion flag");
             createSnapshotResponse = client().admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-2")
@@ -615,7 +614,7 @@ public class DedicatedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTest
     @Test
     public void registrationFailureTest() {
         logger.info("--> start first node");
-        internalCluster().startNode(settingsBuilder().put("plugin.types", MockRepositoryPlugin.class.getName()));
+        internalCluster().startNode(settingsBuilder().put("plugin.types", MockRepository.Plugin.class.getName()));
         logger.info("--> start second node");
         // Make sure the first node is elected as master
         internalCluster().startNode(settingsBuilder().put("node.master", false));
@@ -634,7 +633,7 @@ public class DedicatedClusterSnapshotRestoreIT extends AbstractSnapshotIntegTest
 
     @Test
     public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception {
-        Settings nodeSettings = settingsBuilder().put("plugin.types", MockRepositoryPlugin.class.getName()).build();
+        Settings nodeSettings = settingsBuilder().put("plugin.types", MockRepository.Plugin.class.getName()).build();
         logger.info("--> start two nodes");
         internalCluster().startNodesAsync(2, nodeSettings).get();
         // Register mock repositories
diff --git a/core/src/test/java/org/elasticsearch/snapshots/RepositoriesIT.java b/core/src/test/java/org/elasticsearch/snapshots/RepositoriesIT.java
index 27a6758..c5221d1 100644
--- a/core/src/test/java/org/elasticsearch/snapshots/RepositoriesIT.java
+++ b/core/src/test/java/org/elasticsearch/snapshots/RepositoriesIT.java
@@ -32,15 +32,12 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.repositories.RepositoryException;
 import org.elasticsearch.repositories.RepositoryVerificationException;
-import org.elasticsearch.snapshots.mockstore.MockRepositoryModule;
-import org.elasticsearch.snapshots.mockstore.MockRepositoryPlugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.junit.Test;
 
 import java.nio.file.Path;
 import java.util.List;
 
-import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertThrows;
 import static org.hamcrest.Matchers.containsString;
diff --git a/core/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepository.java b/core/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepository.java
index 12e5147..c346e58 100644
--- a/core/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepository.java
+++ b/core/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepository.java
@@ -19,10 +19,8 @@
 
 package org.elasticsearch.snapshots.mockstore;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
-
 import org.elasticsearch.ElasticsearchException;
+import org.elasticsearch.Version;
 import org.elasticsearch.cluster.ClusterService;
 import org.elasticsearch.cluster.metadata.MetaData;
 import org.elasticsearch.cluster.metadata.SnapshotId;
@@ -30,11 +28,17 @@ import org.elasticsearch.common.blobstore.BlobContainer;
 import org.elasticsearch.common.blobstore.BlobMetaData;
 import org.elasticsearch.common.blobstore.BlobPath;
 import org.elasticsearch.common.blobstore.BlobStore;
+import org.elasticsearch.common.inject.AbstractModule;
 import org.elasticsearch.common.inject.Inject;
+import org.elasticsearch.common.inject.Module;
 import org.elasticsearch.common.io.PathUtils;
 import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.common.settings.SettingsFilter;
 import org.elasticsearch.env.Environment;
 import org.elasticsearch.index.snapshots.IndexShardRepository;
+import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository;
+import org.elasticsearch.plugins.AbstractPlugin;
+import org.elasticsearch.repositories.RepositoriesModule;
 import org.elasticsearch.repositories.RepositoryName;
 import org.elasticsearch.repositories.RepositorySettings;
 import org.elasticsearch.repositories.fs.FsRepository;
@@ -46,6 +50,10 @@ import java.io.UnsupportedEncodingException;
 import java.nio.file.Path;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -54,10 +62,48 @@ import java.util.concurrent.atomic.AtomicLong;
 
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 
-/**
- */
 public class MockRepository extends FsRepository {
 
+    public static class Plugin extends AbstractPlugin {
+
+        @Override
+        public String name() {
+            return "mock-repository";
+        }
+
+        @Override
+        public String description() {
+            return "Mock Repository";
+        }
+
+        public void onModule(RepositoriesModule repositoriesModule) {
+            repositoriesModule.registerRepository("mock", MockRepository.class, BlobStoreIndexShardRepository.class);
+        }
+
+        @Override
+        public Collection<Class<? extends Module>> modules() {
+            Collection<Class<? extends Module>> modules = new ArrayList<>();
+            modules.add(SettingsFilteringModule.class);
+            return modules;
+        }
+
+        public static class SettingsFilteringModule extends AbstractModule {
+
+            @Override
+            protected void configure() {
+                bind(SettingsFilteringService.class).asEagerSingleton();
+            }
+        }
+
+        public static class SettingsFilteringService {
+            @Inject
+            public SettingsFilteringService(SettingsFilter settingsFilter) {
+                settingsFilter.addFilter("secret.mock.password");
+            }
+        }
+
+    }
+
     private final AtomicLong failureCounter = new AtomicLong();
 
     public long getFailureCount() {
diff --git a/core/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepositoryModule.java b/core/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepositoryModule.java
deleted file mode 100644
index 0da50f1..0000000
--- a/core/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepositoryModule.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.elasticsearch.snapshots.mockstore;
-
-import org.elasticsearch.common.inject.AbstractModule;
-import org.elasticsearch.index.snapshots.IndexShardRepository;
-import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository;
-import org.elasticsearch.repositories.Repository;
-
-/**
- */
-public class MockRepositoryModule extends AbstractModule {
-
-    public MockRepositoryModule() {
-        super();
-    }
-
-    @Override
-    protected void configure() {
-        bind(Repository.class).to(MockRepository.class).asEagerSingleton();
-        bind(IndexShardRepository.class).to(BlobStoreIndexShardRepository.class).asEagerSingleton();
-    }
-
-}
-
diff --git a/core/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepositoryPlugin.java b/core/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepositoryPlugin.java
deleted file mode 100644
index 5a6f135..0000000
--- a/core/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepositoryPlugin.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.elasticsearch.snapshots.mockstore;
-
-import org.elasticsearch.common.inject.AbstractModule;
-import org.elasticsearch.common.inject.Inject;
-import org.elasticsearch.common.inject.Module;
-import org.elasticsearch.common.settings.SettingsFilter;
-import org.elasticsearch.plugins.Plugin;
-import org.elasticsearch.repositories.RepositoriesModule;
-
-import java.util.Collection;
-import java.util.Collections;
-
-public class MockRepositoryPlugin extends Plugin {
-
-    @Override
-    public String name() {
-        return "mock-repository";
-    }
-
-    @Override
-    public String description() {
-        return "Mock Repository";
-    }
-
-    public void onModule(RepositoriesModule repositoriesModule) {
-        repositoriesModule.registerRepository("mock", MockRepositoryModule.class);
-    }
-
-    @Override
-    public Collection<Module> nodeModules() {
-        return Collections.<Module>singletonList(new SettingsFilteringModule());
-    }
-
-    public static class SettingsFilteringModule extends AbstractModule {
-
-        @Override
-        protected void configure() {
-            bind(SettingsFilteringService.class).asEagerSingleton();
-        }
-    }
-
-    public static class SettingsFilteringService {
-        @Inject
-        public SettingsFilteringService(SettingsFilter settingsFilter) {
-            settingsFilter.addFilter("secret.mock.password");
-        }
-    }
-
-}
diff --git a/core/src/test/java/org/elasticsearch/test/ESBackcompatTestCase.java b/core/src/test/java/org/elasticsearch/test/ESBackcompatTestCase.java
index 4c8c0f9..39780db 100644
--- a/core/src/test/java/org/elasticsearch/test/ESBackcompatTestCase.java
+++ b/core/src/test/java/org/elasticsearch/test/ESBackcompatTestCase.java
@@ -19,7 +19,6 @@
 package org.elasticsearch.test;
 
 import com.carrotsearch.randomizedtesting.annotations.TestGroup;
-import org.apache.commons.lang3.ArrayUtils;
 import org.elasticsearch.Version;
 import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.cluster.routing.IndexRoutingTable;
@@ -32,13 +31,8 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.indices.recovery.RecoverySettings;
 import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.elasticsearch.test.junit.listeners.LoggingListener;
-import org.elasticsearch.test.transport.AssertingLocalTransport;
-import org.elasticsearch.test.transport.MockTransportService;
 import org.elasticsearch.transport.Transport;
 import org.elasticsearch.transport.TransportModule;
-import org.elasticsearch.transport.TransportService;
-import org.elasticsearch.transport.netty.NettyTransport;
-import org.junit.Ignore;
 
 import java.io.IOException;
 import java.lang.annotation.ElementType;
diff --git a/core/src/test/java/org/elasticsearch/test/ESIntegTestCase.java b/core/src/test/java/org/elasticsearch/test/ESIntegTestCase.java
index 4bb9b7b..80a60ff 100644
--- a/core/src/test/java/org/elasticsearch/test/ESIntegTestCase.java
+++ b/core/src/test/java/org/elasticsearch/test/ESIntegTestCase.java
@@ -28,12 +28,10 @@ import com.google.common.base.Joiner;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
 
-import org.apache.commons.lang3.StringUtils;
 import org.apache.http.impl.client.HttpClients;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.cluster.routing.UnassignedInfo;
 import org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDecider;
-import org.elasticsearch.env.NodeEnvironment;
 import org.elasticsearch.index.shard.MergeSchedulerConfig;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
@@ -80,7 +78,6 @@ import org.elasticsearch.common.Priority;
 import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.collect.ImmutableOpenMap;
 import org.elasticsearch.common.collect.Tuple;
-import org.elasticsearch.common.io.PathUtils;
 import org.elasticsearch.common.regex.Regex;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.transport.InetSocketTransportAddress;
@@ -1920,7 +1917,11 @@ public abstract class ESIntegTestCase extends ESTestCase {
         }
 
         if (list.length != 1) {
-            throw new IllegalStateException("Backwards index must contain exactly one cluster\n" + StringUtils.join(list, "\n"));
+            StringBuilder builder = new StringBuilder("Backwards index must contain exactly one cluster\n");
+            for (Path line : list) {
+                builder.append(line.toString()).append('\n');
+            }
+            throw new IllegalStateException(builder.toString());
         }
         Path src = list[0];
         Path dest = dataDir.resolve(internalCluster().getClusterName());
diff --git a/core/src/test/java/org/elasticsearch/test/InternalTestCluster.java b/core/src/test/java/org/elasticsearch/test/InternalTestCluster.java
index 31ddd96..edf133e 100644
--- a/core/src/test/java/org/elasticsearch/test/InternalTestCluster.java
+++ b/core/src/test/java/org/elasticsearch/test/InternalTestCluster.java
@@ -384,14 +384,14 @@ public final class InternalTestCluster extends TestCluster {
                 .put(SETTING_CLUSTER_NODE_SEED, seed);
         if (ENABLE_MOCK_MODULES && usually(random)) {
             builder.extendArray("plugin.types",
-                MockTransportService.TestPlugin.class.getName(),
-                MockFSIndexStore.TestPlugin.class.getName(),
+                MockTransportService.Plugin.class.getName(),
+                MockFSIndexStore.Plugin.class.getName(),
                 NodeMocksPlugin.class.getName(),
                 MockEngineFactoryPlugin.class.getName(),
-                MockSearchService.TestPlugin.class.getName());
+                MockSearchService.Plugin.class.getName());
         }
         if (isLocalTransportConfigured()) {
-            builder.extendArray("plugin.types", AssertingLocalTransport.TestPlugin.class.getName());
+            builder.extendArray("plugin.types", AssertingLocalTransport.Plugin.class.getName());
         } else {
             builder.put(Transport.TransportSettings.TRANSPORT_TCP_COMPRESS, rarely(random));
         }
diff --git a/core/src/test/java/org/elasticsearch/test/disruption/NetworkPartitionIT.java b/core/src/test/java/org/elasticsearch/test/disruption/NetworkPartitionIT.java
index e0cbfa5..a1ec62b 100644
--- a/core/src/test/java/org/elasticsearch/test/disruption/NetworkPartitionIT.java
+++ b/core/src/test/java/org/elasticsearch/test/disruption/NetworkPartitionIT.java
@@ -35,7 +35,7 @@ public class NetworkPartitionIT extends ESIntegTestCase {
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         return Settings.builder()
-                .put("plugin.types", MockTransportService.TestPlugin.class.getName())
+                .put("plugin.types", MockTransportService.Plugin.class.getName())
                 .build();
     }
 
diff --git a/core/src/test/java/org/elasticsearch/test/store/MockFSIndexStore.java b/core/src/test/java/org/elasticsearch/test/store/MockFSIndexStore.java
index c5b5ac3..47b0baa 100644
--- a/core/src/test/java/org/elasticsearch/test/store/MockFSIndexStore.java
+++ b/core/src/test/java/org/elasticsearch/test/store/MockFSIndexStore.java
@@ -28,11 +28,11 @@ import org.elasticsearch.index.store.DirectoryService;
 import org.elasticsearch.index.store.IndexStore;
 import org.elasticsearch.index.store.IndexStoreModule;
 import org.elasticsearch.indices.store.IndicesStore;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 
 public class MockFSIndexStore extends IndexStore {
 
-    public static class TestPlugin extends Plugin {
+    public static class Plugin extends AbstractPlugin {
         @Override
         public String name() {
             return "mock-index-store";
diff --git a/core/src/test/java/org/elasticsearch/test/transport/AssertingLocalTransport.java b/core/src/test/java/org/elasticsearch/test/transport/AssertingLocalTransport.java
index d9b9b49..7bda47b 100644
--- a/core/src/test/java/org/elasticsearch/test/transport/AssertingLocalTransport.java
+++ b/core/src/test/java/org/elasticsearch/test/transport/AssertingLocalTransport.java
@@ -24,17 +24,12 @@ import org.elasticsearch.cluster.node.DiscoveryNode;
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
 import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.VersionUtils;
 import org.elasticsearch.test.hamcrest.ElasticsearchAssertions;
 import org.elasticsearch.threadpool.ThreadPool;
-import org.elasticsearch.transport.TransportException;
-import org.elasticsearch.transport.TransportModule;
-import org.elasticsearch.transport.TransportRequest;
-import org.elasticsearch.transport.TransportRequestOptions;
-import org.elasticsearch.transport.TransportResponse;
-import org.elasticsearch.transport.TransportResponseHandler;
+import org.elasticsearch.transport.*;
 import org.elasticsearch.transport.local.LocalTransport;
 
 import java.io.IOException;
@@ -42,7 +37,7 @@ import java.util.Random;
 
 public class AssertingLocalTransport extends LocalTransport {
 
-    public static class TestPlugin extends Plugin {
+    public static class Plugin extends AbstractPlugin {
         @Override
         public String name() {
             return "asserting-local-transport";
diff --git a/core/src/test/java/org/elasticsearch/test/transport/MockTransportService.java b/core/src/test/java/org/elasticsearch/test/transport/MockTransportService.java
index 0aa2e34..ce381af 100644
--- a/core/src/test/java/org/elasticsearch/test/transport/MockTransportService.java
+++ b/core/src/test/java/org/elasticsearch/test/transport/MockTransportService.java
@@ -32,24 +32,12 @@ import org.elasticsearch.common.transport.TransportAddress;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.common.util.concurrent.AbstractRunnable;
 import org.elasticsearch.common.util.concurrent.ConcurrentCollections;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.threadpool.ThreadPool;
-import org.elasticsearch.transport.ConnectTransportException;
-import org.elasticsearch.transport.RequestHandlerRegistry;
-import org.elasticsearch.transport.Transport;
-import org.elasticsearch.transport.TransportException;
-import org.elasticsearch.transport.TransportModule;
-import org.elasticsearch.transport.TransportRequest;
-import org.elasticsearch.transport.TransportRequestOptions;
-import org.elasticsearch.transport.TransportService;
-import org.elasticsearch.transport.TransportServiceAdapter;
+import org.elasticsearch.transport.*;
 
 import java.io.IOException;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 
@@ -58,7 +46,7 @@ import java.util.concurrent.CopyOnWriteArrayList;
  */
 public class MockTransportService extends TransportService {
 
-    public static class TestPlugin extends Plugin {
+    public static class Plugin extends AbstractPlugin {
         @Override
         public String name() {
             return "mock-transport-service";
diff --git a/core/src/test/java/org/elasticsearch/transport/ContextAndHeaderTransportIT.java b/core/src/test/java/org/elasticsearch/transport/ContextAndHeaderTransportIT.java
index 811f6e5..ff6a21b 100644
--- a/core/src/test/java/org/elasticsearch/transport/ContextAndHeaderTransportIT.java
+++ b/core/src/test/java/org/elasticsearch/transport/ContextAndHeaderTransportIT.java
@@ -21,12 +21,7 @@ package org.elasticsearch.transport;
 
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.client.HttpClients;
-import org.elasticsearch.action.Action;
-import org.elasticsearch.action.ActionListener;
-import org.elasticsearch.action.ActionModule;
-import org.elasticsearch.action.ActionRequest;
-import org.elasticsearch.action.ActionRequestBuilder;
-import org.elasticsearch.action.ActionResponse;
+import org.elasticsearch.action.*;
 import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;
 import org.elasticsearch.action.get.GetRequest;
 import org.elasticsearch.action.index.IndexRequest;
@@ -46,12 +41,8 @@ import org.elasticsearch.common.inject.PreProcessModule;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.http.HttpServerTransport;
-import org.elasticsearch.index.query.BoolQueryBuilder;
-import org.elasticsearch.index.query.GeoShapeQueryBuilder;
-import org.elasticsearch.index.query.MoreLikeThisQueryBuilder;
-import org.elasticsearch.index.query.QueryBuilders;
-import org.elasticsearch.index.query.TermsLookupQueryBuilder;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.index.query.*;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.rest.RestController;
 import org.elasticsearch.script.ScriptService;
 import org.elasticsearch.script.groovy.GroovyScriptEngineService;
@@ -64,13 +55,7 @@ import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
+import java.util.*;
 import java.util.concurrent.CopyOnWriteArrayList;
 
 import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;
@@ -79,13 +64,8 @@ import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.node.Node.HTTP_ENABLED;
 import static org.elasticsearch.rest.RestStatus.OK;
 import static org.elasticsearch.test.ESIntegTestCase.Scope.SUITE;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.hasStatus;
-import static org.hamcrest.Matchers.greaterThan;
-import static org.hamcrest.Matchers.hasSize;
-import static org.hamcrest.Matchers.is;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
+import static org.hamcrest.Matchers.*;
 
 @ClusterScope(scope = SUITE)
 public class ContextAndHeaderTransportIT extends ESIntegTestCase {
@@ -385,7 +365,7 @@ public class ContextAndHeaderTransportIT extends ESIntegTestCase {
         return filterClient;
     }
 
-    public static class ActionLoggingPlugin extends Plugin {
+    public static class ActionLoggingPlugin extends AbstractPlugin {
 
         @Override
         public String name() {
@@ -398,8 +378,10 @@ public class ContextAndHeaderTransportIT extends ESIntegTestCase {
         }
 
         @Override
-        public Collection<Module> nodeModules() {
-            return Collections.<Module>singletonList(new ActionLoggingModule());
+        public Collection<Class<? extends Module>> modules() {
+            Collection<Class<? extends Module>> classes = new ArrayList<>();
+            classes.add(ActionLoggingModule.class);
+            return classes;
         }
     }
 
diff --git a/core/src/test/java/org/elasticsearch/transport/netty/NettyTransportIT.java b/core/src/test/java/org/elasticsearch/transport/netty/NettyTransportIT.java
index e26998c..ad38b4c 100644
--- a/core/src/test/java/org/elasticsearch/transport/netty/NettyTransportIT.java
+++ b/core/src/test/java/org/elasticsearch/transport/netty/NettyTransportIT.java
@@ -33,7 +33,7 @@ import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.transport.InetSocketTransportAddress;
 import org.elasticsearch.common.util.BigArrays;
 import org.elasticsearch.common.util.concurrent.AbstractRunnable;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.elasticsearch.transport.ActionNotFoundTransportException;
@@ -67,7 +67,7 @@ public class NettyTransportIT extends ESIntegTestCase {
     protected Settings nodeSettings(int nodeOrdinal) {
         return settingsBuilder().put(super.nodeSettings(nodeOrdinal))
                 .put("node.mode", "network")
-                .extendArray("plugin.types", ExceptionThrowingNettyTransport.TestPlugin.class.getName()).build();
+                .extendArray("plugin.types", ExceptionThrowingNettyTransport.Plugin.class.getName()).build();
     }
 
     @Test
@@ -87,7 +87,7 @@ public class NettyTransportIT extends ESIntegTestCase {
 
     public static final class ExceptionThrowingNettyTransport extends NettyTransport {
 
-        public static class TestPlugin extends Plugin {
+        public static class Plugin extends AbstractPlugin {
             @Override
             public String name() {
                 return "exception-throwing-netty-transport";
diff --git a/core/src/test/java/org/elasticsearch/update/UpdateByNativeScriptIT.java b/core/src/test/java/org/elasticsearch/update/UpdateByNativeScriptIT.java
index 2e2edb6..8a72792 100644
--- a/core/src/test/java/org/elasticsearch/update/UpdateByNativeScriptIT.java
+++ b/core/src/test/java/org/elasticsearch/update/UpdateByNativeScriptIT.java
@@ -19,9 +19,10 @@
 package org.elasticsearch.update;
 
 import com.google.common.collect.Maps;
+
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.script.AbstractExecutableScript;
 import org.elasticsearch.script.ExecutableScript;
 import org.elasticsearch.script.NativeScriptEngineService;
@@ -49,7 +50,7 @@ public class UpdateByNativeScriptIT extends ESIntegTestCase {
     protected Settings nodeSettings(int nodeOrdinal) {
         return Settings.settingsBuilder()
                 .put(super.nodeSettings(nodeOrdinal))
-                .extendArray("plugin.types", CustomNativeScriptFactory.TestPlugin.class.getName())
+                .extendArray("plugin.types", CustomNativeScriptFactory.Plugin.class.getName())
                 .build();
     }
 
@@ -71,7 +72,7 @@ public class UpdateByNativeScriptIT extends ESIntegTestCase {
     }
 
     public static class CustomNativeScriptFactory implements NativeScriptFactory {
-        public static class TestPlugin extends Plugin {
+        public static class Plugin extends AbstractPlugin {
             @Override
             public String name() {
                 return "mock-native-script";
diff --git a/dev-tools/src/main/resources/ant/integration-tests.xml b/dev-tools/src/main/resources/ant/integration-tests.xml
index d710e57..f5e87c0 100644
--- a/dev-tools/src/main/resources/ant/integration-tests.xml
+++ b/dev-tools/src/main/resources/ant/integration-tests.xml
@@ -93,21 +93,11 @@
         </nested>
       </run-script>
 
-      <!-- check that plugin was installed into correct place -->
-      <local name="longname"/>
-      <property name="longname" value="@{name}"/>
-      <local name="shortname"/>
-      <filter-property src="longname" dest="shortname">
-        <chain>
-          <replaceregex pattern="^elasticsearch-" replace=""/>
-        </chain>
-      </filter-property>
-
-      <fail message="did not find plugin installed as ${shortname}">
+      <fail message="did not find plugin installed as @{name}">
         <condition>
           <not>
             <resourceexists>
-              <file file="@{home}/plugins/${shortname}"/>
+              <file file="@{home}/plugins/@{name}"/>
             </resourceexists>
           </not>
         </condition>
@@ -203,8 +193,8 @@
   </macrodef>
 
   <!-- Takes a plugin zip file and return the plugin name. For instance
-       'elasticsearch-analysis-icu-2.0.0.zip' would return
-       'elasticsearch-analysis-icu'. -->
+       'analysis-icu-2.0.0.zip' would return
+       'analysis-icu'. -->
   <macrodef name="convert-plugin-name">
       <attribute name="file"/>
       <attribute name="outputproperty"/>
@@ -213,7 +203,6 @@
       <basename file="@{file}" property="file.base"/>
       <filter-property src="file.base" dest="@{outputproperty}">
         <chain>
-          <replaceregex pattern="^elasticsearch-" replace=""/>
           <replacestring from="-${elasticsearch.version}.zip" to=""/>
         </chain>
       </filter-property>
diff --git a/dev-tools/src/main/resources/forbidden/all-signatures.txt b/dev-tools/src/main/resources/forbidden/all-signatures.txt
index f697b32..e61d58d 100644
--- a/dev-tools/src/main/resources/forbidden/all-signatures.txt
+++ b/dev-tools/src/main/resources/forbidden/all-signatures.txt
@@ -56,3 +56,6 @@ java.io.ObjectInputStream
 java.io.ObjectInput
 
 java.nio.file.Files#isHidden(java.nio.file.Path) @ Dependent on the operating system, use FileSystemUtils.isHidden instead
+
+java.nio.file.Files#getFileStore(java.nio.file.Path) @ Use Environment.getFileStore() instead, impacted by JDK-8034057
+java.nio.file.Files#isWritable(java.nio.file.Path) @ Use Environment.isWritable() instead, impacted by JDK-8034057
diff --git a/distribution/licenses/commons-lang3-3.3.2.jar.sha1 b/distribution/licenses/commons-lang3-3.3.2.jar.sha1
deleted file mode 100644
index bdd913c..0000000
--- a/distribution/licenses/commons-lang3-3.3.2.jar.sha1
+++ /dev/null
@@ -1 +0,0 @@
-90a3822c38ec8c996e84c16a3477ef632cbc87a3
diff --git a/distribution/licenses/commons-lang3-LICENSE.txt b/distribution/licenses/commons-lang3-LICENSE.txt
deleted file mode 100644
index d645695..0000000
--- a/distribution/licenses/commons-lang3-LICENSE.txt
+++ /dev/null
@@ -1,202 +0,0 @@
-
-                                 Apache License
-                           Version 2.0, January 2004
-                        http://www.apache.org/licenses/
-
-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-   1. Definitions.
-
-      "License" shall mean the terms and conditions for use, reproduction,
-      and distribution as defined by Sections 1 through 9 of this document.
-
-      "Licensor" shall mean the copyright owner or entity authorized by
-      the copyright owner that is granting the License.
-
-      "Legal Entity" shall mean the union of the acting entity and all
-      other entities that control, are controlled by, or are under common
-      control with that entity. For the purposes of this definition,
-      "control" means (i) the power, direct or indirect, to cause the
-      direction or management of such entity, whether by contract or
-      otherwise, or (ii) ownership of fifty percent (50%) or more of the
-      outstanding shares, or (iii) beneficial ownership of such entity.
-
-      "You" (or "Your") shall mean an individual or Legal Entity
-      exercising permissions granted by this License.
-
-      "Source" form shall mean the preferred form for making modifications,
-      including but not limited to software source code, documentation
-      source, and configuration files.
-
-      "Object" form shall mean any form resulting from mechanical
-      transformation or translation of a Source form, including but
-      not limited to compiled object code, generated documentation,
-      and conversions to other media types.
-
-      "Work" shall mean the work of authorship, whether in Source or
-      Object form, made available under the License, as indicated by a
-      copyright notice that is included in or attached to the work
-      (an example is provided in the Appendix below).
-
-      "Derivative Works" shall mean any work, whether in Source or Object
-      form, that is based on (or derived from) the Work and for which the
-      editorial revisions, annotations, elaborations, or other modifications
-      represent, as a whole, an original work of authorship. For the purposes
-      of this License, Derivative Works shall not include works that remain
-      separable from, or merely link (or bind by name) to the interfaces of,
-      the Work and Derivative Works thereof.
-
-      "Contribution" shall mean any work of authorship, including
-      the original version of the Work and any modifications or additions
-      to that Work or Derivative Works thereof, that is intentionally
-      submitted to Licensor for inclusion in the Work by the copyright owner
-      or by an individual or Legal Entity authorized to submit on behalf of
-      the copyright owner. For the purposes of this definition, "submitted"
-      means any form of electronic, verbal, or written communication sent
-      to the Licensor or its representatives, including but not limited to
-      communication on electronic mailing lists, source code control systems,
-      and issue tracking systems that are managed by, or on behalf of, the
-      Licensor for the purpose of discussing and improving the Work, but
-      excluding communication that is conspicuously marked or otherwise
-      designated in writing by the copyright owner as "Not a Contribution."
-
-      "Contributor" shall mean Licensor and any individual or Legal Entity
-      on behalf of whom a Contribution has been received by Licensor and
-      subsequently incorporated within the Work.
-
-   2. Grant of Copyright License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      copyright license to reproduce, prepare Derivative Works of,
-      publicly display, publicly perform, sublicense, and distribute the
-      Work and such Derivative Works in Source or Object form.
-
-   3. Grant of Patent License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      (except as stated in this section) patent license to make, have made,
-      use, offer to sell, sell, import, and otherwise transfer the Work,
-      where such license applies only to those patent claims licensable
-      by such Contributor that are necessarily infringed by their
-      Contribution(s) alone or by combination of their Contribution(s)
-      with the Work to which such Contribution(s) was submitted. If You
-      institute patent litigation against any entity (including a
-      cross-claim or counterclaim in a lawsuit) alleging that the Work
-      or a Contribution incorporated within the Work constitutes direct
-      or contributory patent infringement, then any patent licenses
-      granted to You under this License for that Work shall terminate
-      as of the date such litigation is filed.
-
-   4. Redistribution. You may reproduce and distribute copies of the
-      Work or Derivative Works thereof in any medium, with or without
-      modifications, and in Source or Object form, provided that You
-      meet the following conditions:
-
-      (a) You must give any other recipients of the Work or
-          Derivative Works a copy of this License; and
-
-      (b) You must cause any modified files to carry prominent notices
-          stating that You changed the files; and
-
-      (c) You must retain, in the Source form of any Derivative Works
-          that You distribute, all copyright, patent, trademark, and
-          attribution notices from the Source form of the Work,
-          excluding those notices that do not pertain to any part of
-          the Derivative Works; and
-
-      (d) If the Work includes a "NOTICE" text file as part of its
-          distribution, then any Derivative Works that You distribute must
-          include a readable copy of the attribution notices contained
-          within such NOTICE file, excluding those notices that do not
-          pertain to any part of the Derivative Works, in at least one
-          of the following places: within a NOTICE text file distributed
-          as part of the Derivative Works; within the Source form or
-          documentation, if provided along with the Derivative Works; or,
-          within a display generated by the Derivative Works, if and
-          wherever such third-party notices normally appear. The contents
-          of the NOTICE file are for informational purposes only and
-          do not modify the License. You may add Your own attribution
-          notices within Derivative Works that You distribute, alongside
-          or as an addendum to the NOTICE text from the Work, provided
-          that such additional attribution notices cannot be construed
-          as modifying the License.
-
-      You may add Your own copyright statement to Your modifications and
-      may provide additional or different license terms and conditions
-      for use, reproduction, or distribution of Your modifications, or
-      for any such Derivative Works as a whole, provided Your use,
-      reproduction, and distribution of the Work otherwise complies with
-      the conditions stated in this License.
-
-   5. Submission of Contributions. Unless You explicitly state otherwise,
-      any Contribution intentionally submitted for inclusion in the Work
-      by You to the Licensor shall be under the terms and conditions of
-      this License, without any additional terms or conditions.
-      Notwithstanding the above, nothing herein shall supersede or modify
-      the terms of any separate license agreement you may have executed
-      with Licensor regarding such Contributions.
-
-   6. Trademarks. This License does not grant permission to use the trade
-      names, trademarks, service marks, or product names of the Licensor,
-      except as required for reasonable and customary use in describing the
-      origin of the Work and reproducing the content of the NOTICE file.
-
-   7. Disclaimer of Warranty. Unless required by applicable law or
-      agreed to in writing, Licensor provides the Work (and each
-      Contributor provides its Contributions) on an "AS IS" BASIS,
-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-      implied, including, without limitation, any warranties or conditions
-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
-      PARTICULAR PURPOSE. You are solely responsible for determining the
-      appropriateness of using or redistributing the Work and assume any
-      risks associated with Your exercise of permissions under this License.
-
-   8. Limitation of Liability. In no event and under no legal theory,
-      whether in tort (including negligence), contract, or otherwise,
-      unless required by applicable law (such as deliberate and grossly
-      negligent acts) or agreed to in writing, shall any Contributor be
-      liable to You for damages, including any direct, indirect, special,
-      incidental, or consequential damages of any character arising as a
-      result of this License or out of the use or inability to use the
-      Work (including but not limited to damages for loss of goodwill,
-      work stoppage, computer failure or malfunction, or any and all
-      other commercial damages or losses), even if such Contributor
-      has been advised of the possibility of such damages.
-
-   9. Accepting Warranty or Additional Liability. While redistributing
-      the Work or Derivative Works thereof, You may choose to offer,
-      and charge a fee for, acceptance of support, warranty, indemnity,
-      or other liability obligations and/or rights consistent with this
-      License. However, in accepting such obligations, You may act only
-      on Your own behalf and on Your sole responsibility, not on behalf
-      of any other Contributor, and only if You agree to indemnify,
-      defend, and hold each Contributor harmless for any liability
-      incurred by, or claims asserted against, such Contributor by reason
-      of your accepting any such warranty or additional liability.
-
-   END OF TERMS AND CONDITIONS
-
-   APPENDIX: How to apply the Apache License to your work.
-
-      To apply the Apache License to your work, attach the following
-      boilerplate notice, with the fields enclosed by brackets "[]"
-      replaced with your own identifying information. (Don't include
-      the brackets!)  The text should be enclosed in the appropriate
-      comment syntax for the file format. We also recommend that a
-      file or class name and description of purpose be included on the
-      same "printed page" as the copyright notice for easier
-      identification within third-party archives.
-
-   Copyright [yyyy] [name of copyright owner]
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
diff --git a/distribution/licenses/commons-lang3-NOTICE.txt b/distribution/licenses/commons-lang3-NOTICE.txt
deleted file mode 100644
index 0782824..0000000
--- a/distribution/licenses/commons-lang3-NOTICE.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-Apache Commons Lang
-Copyright 2001-2014 The Apache Software Foundation
-
-This product includes software developed at
-The Apache Software Foundation (http://www.apache.org/).
-
-This product includes software from the Spring Framework,
-under the Apache License 2.0 (see: StringUtils.containsWhitespace())
diff --git a/docs/plugins/api.asciidoc b/docs/plugins/api.asciidoc
index 343d246..9e3b8f3 100644
--- a/docs/plugins/api.asciidoc
+++ b/docs/plugins/api.asciidoc
@@ -15,12 +15,6 @@ The delete by query plugin adds support for deleting all of the documents
 replacement for the problematic _delete-by-query_ functionality which has been
 removed from Elasticsearch core.
 
-https://github.com/elasticsearch/elasticsearch-mapper-attachments[Mapper Attachments Type plugin]::
-
-Integrates http://lucene.apache.org/tika/[Apache Tika] to provide a new field
-type `attachment` to allow indexing of documents such as PDFs and Microsoft
-Word.
-
 [float]
 === Community contributed API extension plugins
 
diff --git a/docs/plugins/cloud-aws.asciidoc b/docs/plugins/cloud-aws.asciidoc
index 34cac79..7b0fee3 100644
--- a/docs/plugins/cloud-aws.asciidoc
+++ b/docs/plugins/cloud-aws.asciidoc
@@ -259,8 +259,8 @@ The following settings are supported:
 
 `base_path`::
 
-    Specifies the path within bucket to repository data. Defaults to root
-    directory.
+    Specifies the path within bucket to repository data. Defaults to
+    value of `repositories.s3.base_path` or to root directory if not set.
 
 `access_key`::
 
diff --git a/docs/plugins/cloud-azure.asciidoc b/docs/plugins/cloud-azure.asciidoc
index 151cd33..80fd189 100644
--- a/docs/plugins/cloud-azure.asciidoc
+++ b/docs/plugins/cloud-azure.asciidoc
@@ -13,7 +13,7 @@ This plugin can be installed using the plugin manager:
 
 [source,sh]
 ----------------------------------------------------------------
-sudo bin/plugin install cloud-aws
+sudo bin/plugin install cloud-azure
 ----------------------------------------------------------------
 
 The plugin must be installed on every node in the cluster, and each node must
@@ -27,7 +27,7 @@ The plugin can be removed with the following command:
 
 [source,sh]
 ----------------------------------------------------------------
-sudo bin/plugin remove cloud-aws
+sudo bin/plugin remove cloud-azure
 ----------------------------------------------------------------
 
 The node must be stopped before removing the plugin.
diff --git a/docs/plugins/mapper.asciidoc b/docs/plugins/mapper.asciidoc
index 226fc4e..c6a3a7b 100644
--- a/docs/plugins/mapper.asciidoc
+++ b/docs/plugins/mapper.asciidoc
@@ -8,6 +8,12 @@ Mapper plugins allow new field datatypes to be added to Elasticsearch.
 
 The core mapper plugins are:
 
+https://github.com/elasticsearch/elasticsearch-mapper-attachments[Mapper Attachments Type plugin]::
+
+Integrates http://lucene.apache.org/tika/[Apache Tika] to provide a new field
+type `attachment` to allow indexing of documents such as PDFs and Microsoft
+Word.
+
 <<mapper-size>>::
 
 The mapper-size plugin provides the `_size` meta field which, when enabled,
diff --git a/docs/plugins/plugin-script.asciidoc b/docs/plugins/plugin-script.asciidoc
index ce6bbf6..06263d7 100644
--- a/docs/plugins/plugin-script.asciidoc
+++ b/docs/plugins/plugin-script.asciidoc
@@ -223,18 +223,3 @@ plugin.mandatory: mapper-attachments,lang-groovy
 
 For safety reasons, a node will not start if it is missing a mandatory plugin.
 
-[float]
-=== Lucene version dependent plugins
-
-For some plugins, such as analysis plugins, a specific major Lucene version is
-required to run. In that case, the plugin provides in its
-`es-plugin.properties` file the Lucene version for which the plugin was built for.
-
-If present at startup the node will check the Lucene version before loading
-the plugin. You can disable that check using
-
-[source,yaml]
---------------------------------------------------
-plugins.check_lucene: false
---------------------------------------------------
-
diff --git a/docs/reference/migration/migrate_2_0/removals.asciidoc b/docs/reference/migration/migrate_2_0/removals.asciidoc
index ab76469..afdc109 100644
--- a/docs/reference/migration/migrate_2_0/removals.asciidoc
+++ b/docs/reference/migration/migrate_2_0/removals.asciidoc
@@ -16,6 +16,11 @@ Facets, deprecated since 1.0, have now been removed.  Instead, use the much
 more powerful and flexible <<search-aggregations,aggregations>> framework.
 This also means that Kibana 3 will not work with Elasticsearch 2.0.
 
+==== MVEL has been removed
+
+The MVEL scripting language has been removed.  The default scripting language
+is now Groovy.
+
 ==== Delete-by-query is now a plugin
 
 The old delete-by-query functionality was fast but unsafe.  It could lead to
diff --git a/plugins/analysis-icu/src/main/java/org/elasticsearch/plugin/analysis/icu/AnalysisICUPlugin.java b/plugins/analysis-icu/src/main/java/org/elasticsearch/plugin/analysis/icu/AnalysisICUPlugin.java
index 6b9314c..be73376 100644
--- a/plugins/analysis-icu/src/main/java/org/elasticsearch/plugin/analysis/icu/AnalysisICUPlugin.java
+++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/plugin/analysis/icu/AnalysisICUPlugin.java
@@ -23,15 +23,15 @@ import org.elasticsearch.common.inject.Module;
 import org.elasticsearch.index.analysis.AnalysisModule;
 import org.elasticsearch.index.analysis.IcuAnalysisBinderProcessor;
 import org.elasticsearch.indices.analysis.IcuIndicesAnalysisModule;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 
+import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 
 /**
  *
  */
-public class AnalysisICUPlugin extends Plugin {
+public class AnalysisICUPlugin extends AbstractPlugin {
 
     @Override
     public String name() {
@@ -44,8 +44,10 @@ public class AnalysisICUPlugin extends Plugin {
     }
 
     @Override
-    public Collection<Module> nodeModules() {
-        return Collections.<Module>singletonList(new IcuIndicesAnalysisModule());
+    public Collection<Class<? extends Module>> modules() {
+        Collection<Class<? extends Module>> classes = new ArrayList<>();
+        classes.add(IcuIndicesAnalysisModule.class);
+        return classes;
     }
 
     /**
diff --git a/plugins/analysis-kuromoji/src/main/java/org/elasticsearch/plugin/analysis/kuromoji/AnalysisKuromojiPlugin.java b/plugins/analysis-kuromoji/src/main/java/org/elasticsearch/plugin/analysis/kuromoji/AnalysisKuromojiPlugin.java
index 46dce43..88d3cee 100644
--- a/plugins/analysis-kuromoji/src/main/java/org/elasticsearch/plugin/analysis/kuromoji/AnalysisKuromojiPlugin.java
+++ b/plugins/analysis-kuromoji/src/main/java/org/elasticsearch/plugin/analysis/kuromoji/AnalysisKuromojiPlugin.java
@@ -20,25 +20,17 @@
 package org.elasticsearch.plugin.analysis.kuromoji;
 
 import org.elasticsearch.common.inject.Module;
-import org.elasticsearch.index.analysis.AnalysisModule;
-import org.elasticsearch.index.analysis.JapaneseStopTokenFilterFactory;
-import org.elasticsearch.index.analysis.KuromojiAnalyzerProvider;
-import org.elasticsearch.index.analysis.KuromojiBaseFormFilterFactory;
-import org.elasticsearch.index.analysis.KuromojiIterationMarkCharFilterFactory;
-import org.elasticsearch.index.analysis.KuromojiKatakanaStemmerFactory;
-import org.elasticsearch.index.analysis.KuromojiPartOfSpeechFilterFactory;
-import org.elasticsearch.index.analysis.KuromojiReadingFormFilterFactory;
-import org.elasticsearch.index.analysis.KuromojiTokenizerFactory;
+import org.elasticsearch.index.analysis.*;
 import org.elasticsearch.indices.analysis.KuromojiIndicesAnalysisModule;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 
+import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 
 /**
  *
  */
-public class AnalysisKuromojiPlugin extends Plugin {
+public class AnalysisKuromojiPlugin extends AbstractPlugin {
 
     @Override
     public String name() {
@@ -51,8 +43,10 @@ public class AnalysisKuromojiPlugin extends Plugin {
     }
 
     @Override
-    public Collection<Module> nodeModules() {
-        return Collections.<Module>singletonList(new KuromojiIndicesAnalysisModule());
+    public Collection<Class<? extends Module>> modules() {
+        Collection<Class<? extends Module>> classes = new ArrayList<>();
+        classes.add(KuromojiIndicesAnalysisModule.class);
+        return classes;
     }
 
     public void onModule(AnalysisModule module) {
diff --git a/plugins/analysis-phonetic/src/main/java/org/elasticsearch/plugin/analysis/AnalysisPhoneticPlugin.java b/plugins/analysis-phonetic/src/main/java/org/elasticsearch/plugin/analysis/AnalysisPhoneticPlugin.java
index 1ef97c6..dacea45 100644
--- a/plugins/analysis-phonetic/src/main/java/org/elasticsearch/plugin/analysis/AnalysisPhoneticPlugin.java
+++ b/plugins/analysis-phonetic/src/main/java/org/elasticsearch/plugin/analysis/AnalysisPhoneticPlugin.java
@@ -21,11 +21,11 @@ package org.elasticsearch.plugin.analysis;
 
 import org.elasticsearch.index.analysis.AnalysisModule;
 import org.elasticsearch.index.analysis.PhoneticAnalysisBinderProcessor;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 
 /**
  */
-public class AnalysisPhoneticPlugin extends Plugin {
+public class AnalysisPhoneticPlugin extends AbstractPlugin {
 
     @Override
     public String name() {
diff --git a/plugins/analysis-smartcn/src/main/java/org/elasticsearch/plugin/analysis/smartcn/AnalysisSmartChinesePlugin.java b/plugins/analysis-smartcn/src/main/java/org/elasticsearch/plugin/analysis/smartcn/AnalysisSmartChinesePlugin.java
index 92b933f..08759e2 100644
--- a/plugins/analysis-smartcn/src/main/java/org/elasticsearch/plugin/analysis/smartcn/AnalysisSmartChinesePlugin.java
+++ b/plugins/analysis-smartcn/src/main/java/org/elasticsearch/plugin/analysis/smartcn/AnalysisSmartChinesePlugin.java
@@ -23,15 +23,15 @@ import org.elasticsearch.common.inject.Module;
 import org.elasticsearch.index.analysis.AnalysisModule;
 import org.elasticsearch.index.analysis.SmartChineseAnalysisBinderProcessor;
 import org.elasticsearch.indices.analysis.smartcn.SmartChineseIndicesAnalysisModule;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 
+import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 
 /**
  *
  */
-public class AnalysisSmartChinesePlugin extends Plugin {
+public class AnalysisSmartChinesePlugin extends AbstractPlugin {
 
     @Override
     public String name() {
@@ -44,8 +44,10 @@ public class AnalysisSmartChinesePlugin extends Plugin {
     }
 
     @Override
-    public Collection<Module> nodeModules() {
-        return Collections.<Module>singletonList(new SmartChineseIndicesAnalysisModule());
+    public Collection<Class<? extends Module>> modules() {
+        Collection<Class<? extends Module>> classes = new ArrayList<>();
+        classes.add(SmartChineseIndicesAnalysisModule.class);
+        return classes;
     }
 
     public void onModule(AnalysisModule module) {
diff --git a/plugins/analysis-stempel/src/main/java/org/elasticsearch/plugin/analysis/stempel/AnalysisStempelPlugin.java b/plugins/analysis-stempel/src/main/java/org/elasticsearch/plugin/analysis/stempel/AnalysisStempelPlugin.java
index b22cda1..8f9fa7d 100644
--- a/plugins/analysis-stempel/src/main/java/org/elasticsearch/plugin/analysis/stempel/AnalysisStempelPlugin.java
+++ b/plugins/analysis-stempel/src/main/java/org/elasticsearch/plugin/analysis/stempel/AnalysisStempelPlugin.java
@@ -23,15 +23,14 @@ import org.elasticsearch.common.inject.Module;
 import org.elasticsearch.index.analysis.AnalysisModule;
 import org.elasticsearch.index.analysis.pl.PolishAnalysisBinderProcessor;
 import org.elasticsearch.indices.analysis.pl.PolishIndicesAnalysisModule;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 
-import java.util.Collection;
-import java.util.Collections;
+import java.util.*;
 
 /**
  *
  */
-public class AnalysisStempelPlugin extends Plugin {
+public class AnalysisStempelPlugin extends AbstractPlugin {
 
     @Override
     public String name() {
@@ -44,8 +43,10 @@ public class AnalysisStempelPlugin extends Plugin {
     }
 
     @Override
-    public Collection<Module> nodeModules() {
-        return Collections.<Module>singletonList(new PolishIndicesAnalysisModule());
+    public Collection<Class<? extends Module>> modules() {
+        Collection<Class<? extends Module>> classes = new ArrayList<>();
+        classes.add(PolishIndicesAnalysisModule.class);
+        return classes;
     }
 
     public void onModule(AnalysisModule module) {
diff --git a/plugins/cloud-aws/src/main/java/org/elasticsearch/plugin/cloud/aws/CloudAwsPlugin.java b/plugins/cloud-aws/src/main/java/org/elasticsearch/plugin/cloud/aws/CloudAwsPlugin.java
index 0923191..55a0ae5 100644
--- a/plugins/cloud-aws/src/main/java/org/elasticsearch/plugin/cloud/aws/CloudAwsPlugin.java
+++ b/plugins/cloud-aws/src/main/java/org/elasticsearch/plugin/cloud/aws/CloudAwsPlugin.java
@@ -26,10 +26,10 @@ import org.elasticsearch.common.inject.Module;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.discovery.DiscoveryModule;
 import org.elasticsearch.discovery.ec2.Ec2Discovery;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.repositories.RepositoriesModule;
 import org.elasticsearch.repositories.s3.S3Repository;
-import org.elasticsearch.repositories.s3.S3RepositoryModule;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -37,7 +37,7 @@ import java.util.Collection;
 /**
  *
  */
-public class CloudAwsPlugin extends Plugin {
+public class CloudAwsPlugin extends AbstractPlugin {
 
     private final Settings settings;
 
@@ -56,7 +56,7 @@ public class CloudAwsPlugin extends Plugin {
     }
 
     @Override
-    public Collection<Module> nodeModules() {
+    public Collection<Module> modules(Settings settings) {
         Collection<Module> modules = new ArrayList<>();
         if (settings.getAsBoolean("cloud.enabled", true)) {
             modules.add(new AwsModule());
@@ -65,7 +65,7 @@ public class CloudAwsPlugin extends Plugin {
     }
 
     @Override
-    public Collection<Class<? extends LifecycleComponent>> nodeServices() {
+    public Collection<Class<? extends LifecycleComponent>> services() {
         Collection<Class<? extends LifecycleComponent>> services = new ArrayList<>();
         if (settings.getAsBoolean("cloud.enabled", true)) {
             services.add(AwsModule.getS3ServiceImpl());
@@ -76,7 +76,7 @@ public class CloudAwsPlugin extends Plugin {
 
     public void onModule(RepositoriesModule repositoriesModule) {
         if (settings.getAsBoolean("cloud.enabled", true)) {
-            repositoriesModule.registerRepository(S3Repository.TYPE, S3RepositoryModule.class);
+            repositoriesModule.registerRepository(S3Repository.TYPE, S3Repository.class, BlobStoreIndexShardRepository.class);
         }
     }
 
diff --git a/plugins/cloud-aws/src/main/java/org/elasticsearch/repositories/s3/S3RepositoryModule.java b/plugins/cloud-aws/src/main/java/org/elasticsearch/repositories/s3/S3RepositoryModule.java
deleted file mode 100644
index 6d51d61..0000000
--- a/plugins/cloud-aws/src/main/java/org/elasticsearch/repositories/s3/S3RepositoryModule.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.elasticsearch.repositories.s3;
-
-import org.elasticsearch.common.inject.AbstractModule;
-import org.elasticsearch.index.snapshots.IndexShardRepository;
-import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository;
-import org.elasticsearch.repositories.Repository;
-
-/**
- * S3 repository module
- */
-public class S3RepositoryModule extends AbstractModule {
-
-    public S3RepositoryModule() {
-        super();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    protected void configure() {
-        bind(Repository.class).to(S3Repository.class).asEagerSingleton();
-        bind(IndexShardRepository.class).to(BlobStoreIndexShardRepository.class).asEagerSingleton();
-    }
-}
-
diff --git a/plugins/cloud-aws/src/test/java/org/elasticsearch/cloud/aws/AbstractAwsTest.java b/plugins/cloud-aws/src/test/java/org/elasticsearch/cloud/aws/AbstractAwsTest.java
index a44a0f4..082f9ca 100644
--- a/plugins/cloud-aws/src/test/java/org/elasticsearch/cloud/aws/AbstractAwsTest.java
+++ b/plugins/cloud-aws/src/test/java/org/elasticsearch/cloud/aws/AbstractAwsTest.java
@@ -75,7 +75,7 @@ public abstract class AbstractAwsTest extends ESIntegTestCase {
                 Settings.Builder settings = Settings.builder()
                 .put(super.nodeSettings(nodeOrdinal))
                 .put("path.home", createTempDir())
-                .extendArray("plugin.types", CloudAwsPlugin.class.getName(), TestAwsS3Service.TestPlugin.class.getName())
+                .extendArray("plugin.types", CloudAwsPlugin.class.getName(), TestAwsS3Service.Plugin.class.getName())
                 .put("cloud.aws.test.random", randomInt())
                 .put("cloud.aws.test.write_failures", 0.1)
                 .put("cloud.aws.test.read_failures", 0.1);
diff --git a/plugins/cloud-aws/src/test/java/org/elasticsearch/cloud/aws/TestAwsS3Service.java b/plugins/cloud-aws/src/test/java/org/elasticsearch/cloud/aws/TestAwsS3Service.java
index 92e4d72..1124150 100644
--- a/plugins/cloud-aws/src/test/java/org/elasticsearch/cloud/aws/TestAwsS3Service.java
+++ b/plugins/cloud-aws/src/test/java/org/elasticsearch/cloud/aws/TestAwsS3Service.java
@@ -22,12 +22,12 @@ import com.amazonaws.services.s3.AmazonS3;
 import org.elasticsearch.ElasticsearchException;
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 
 import java.util.IdentityHashMap;
 
 public class TestAwsS3Service extends InternalAwsS3Service {
-    public static class TestPlugin extends Plugin {
+    public static class Plugin extends AbstractPlugin {
         @Override
         public String name() {
             return "mock-s3-service";
diff --git a/plugins/cloud-azure/licenses/commons-lang3-3.3.2.jar.sha1 b/plugins/cloud-azure/licenses/commons-lang3-3.3.2.jar.sha1
new file mode 100644
index 0000000..bdd913c
--- /dev/null
+++ b/plugins/cloud-azure/licenses/commons-lang3-3.3.2.jar.sha1
@@ -0,0 +1 @@
+90a3822c38ec8c996e84c16a3477ef632cbc87a3
diff --git a/plugins/cloud-azure/licenses/commons-lang3-LICENSE.txt b/plugins/cloud-azure/licenses/commons-lang3-LICENSE.txt
new file mode 100644
index 0000000..d645695
--- /dev/null
+++ b/plugins/cloud-azure/licenses/commons-lang3-LICENSE.txt
@@ -0,0 +1,202 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
diff --git a/plugins/cloud-azure/licenses/commons-lang3-NOTICE.txt b/plugins/cloud-azure/licenses/commons-lang3-NOTICE.txt
new file mode 100644
index 0000000..0782824
--- /dev/null
+++ b/plugins/cloud-azure/licenses/commons-lang3-NOTICE.txt
@@ -0,0 +1,8 @@
+Apache Commons Lang
+Copyright 2001-2014 The Apache Software Foundation
+
+This product includes software developed at
+The Apache Software Foundation (http://www.apache.org/).
+
+This product includes software from the Spring Framework,
+under the Apache License 2.0 (see: StringUtils.containsWhitespace())
diff --git a/plugins/cloud-azure/src/main/java/org/elasticsearch/cloud/azure/AzureModule.java b/plugins/cloud-azure/src/main/java/org/elasticsearch/cloud/azure/AzureModule.java
index eec355a..29d260f 100644
--- a/plugins/cloud-azure/src/main/java/org/elasticsearch/cloud/azure/AzureModule.java
+++ b/plugins/cloud-azure/src/main/java/org/elasticsearch/cloud/azure/AzureModule.java
@@ -27,6 +27,7 @@ import org.elasticsearch.cloud.azure.management.AzureComputeSettingsFilter;
 import org.elasticsearch.cloud.azure.storage.AzureStorageService;
 import org.elasticsearch.cloud.azure.storage.AzureStorageService.Storage;
 import org.elasticsearch.cloud.azure.storage.AzureStorageServiceImpl;
+import org.elasticsearch.cloud.azure.storage.AzureStorageSettingsFilter;
 import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.inject.AbstractModule;
 import org.elasticsearch.common.inject.Inject;
@@ -73,6 +74,7 @@ public class AzureModule extends AbstractModule {
     @Override
     protected void configure() {
         logger.debug("starting azure services");
+        bind(AzureStorageSettingsFilter.class).asEagerSingleton();
         bind(AzureComputeSettingsFilter.class).asEagerSingleton();
 
         // If we have set discovery to azure, let's start the azure compute service
diff --git a/plugins/cloud-azure/src/main/java/org/elasticsearch/plugin/cloud/azure/CloudAzurePlugin.java b/plugins/cloud-azure/src/main/java/org/elasticsearch/plugin/cloud/azure/CloudAzurePlugin.java
index c8c8f83..f60f05d 100644
--- a/plugins/cloud-azure/src/main/java/org/elasticsearch/plugin/cloud/azure/CloudAzurePlugin.java
+++ b/plugins/cloud-azure/src/main/java/org/elasticsearch/plugin/cloud/azure/CloudAzurePlugin.java
@@ -26,22 +26,23 @@ import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.discovery.DiscoveryModule;
 import org.elasticsearch.discovery.azure.AzureDiscovery;
+import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository;
 import org.elasticsearch.index.store.IndexStoreModule;
 import org.elasticsearch.index.store.smbmmapfs.SmbMmapFsIndexStore;
 import org.elasticsearch.index.store.smbsimplefs.SmbSimpleFsIndexStore;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.repositories.RepositoriesModule;
 import org.elasticsearch.repositories.azure.AzureRepository;
-import org.elasticsearch.repositories.azure.AzureRepositoryModule;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.List;
+
+import static org.elasticsearch.cloud.azure.AzureModule.isSnapshotReady;
 
 /**
  *
  */
-public class CloudAzurePlugin extends Plugin {
+public class CloudAzurePlugin extends AbstractPlugin {
 
     private final Settings settings;
     protected final ESLogger logger = Loggers.getLogger(CloudAzurePlugin.class);
@@ -62,16 +63,18 @@ public class CloudAzurePlugin extends Plugin {
     }
 
     @Override
-    public Collection<Module> nodeModules() {
-        List<Module> modules = new ArrayList<>();
+    public Collection<Class<? extends Module>> modules() {
+        Collection<Class<? extends Module>> modules = new ArrayList<>();
         if (AzureModule.isCloudReady(settings)) {
-            modules.add(new AzureModule(settings));
+            modules.add(AzureModule.class);
         }
         return modules;
     }
 
     public void onModule(RepositoriesModule module) {
-        module.registerRepository(AzureRepository.TYPE, AzureRepositoryModule.class);
+        if (isSnapshotReady(settings, logger)) {
+            module.registerRepository(AzureRepository.TYPE, AzureRepository.class, BlobStoreIndexShardRepository.class);
+        }
     }
 
     public void onModule(DiscoveryModule discoveryModule) {
diff --git a/plugins/cloud-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepositoryModule.java b/plugins/cloud-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepositoryModule.java
deleted file mode 100644
index 11d420b..0000000
--- a/plugins/cloud-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepositoryModule.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.elasticsearch.repositories.azure;
-
-import org.elasticsearch.cloud.azure.AzureModule;
-import org.elasticsearch.cloud.azure.storage.AzureStorageSettingsFilter;
-import org.elasticsearch.common.inject.AbstractModule;
-import org.elasticsearch.common.logging.ESLogger;
-import org.elasticsearch.common.logging.Loggers;
-import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.index.snapshots.IndexShardRepository;
-import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository;
-import org.elasticsearch.repositories.Repository;
-
-/**
- * Azure repository module
- */
-public class AzureRepositoryModule extends AbstractModule {
-
-    protected final ESLogger logger;
-    private Settings settings;
-
-    public AzureRepositoryModule(Settings settings) {
-        super();
-        this.logger = Loggers.getLogger(getClass(), settings);
-        this.settings = settings;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    protected void configure() {
-        bind(AzureStorageSettingsFilter.class).asEagerSingleton();
-        if (AzureModule.isSnapshotReady(settings, logger)) {
-            bind(Repository.class).to(AzureRepository.class).asEagerSingleton();
-            bind(IndexShardRepository.class).to(BlobStoreIndexShardRepository.class).asEagerSingleton();
-        } else {
-            logger.debug("disabling azure snapshot and restore features");
-        }
-    }
-
-}
-
diff --git a/plugins/cloud-azure/src/test/java/org/elasticsearch/cloud/azure/AbstractAzureComputeServiceTest.java b/plugins/cloud-azure/src/test/java/org/elasticsearch/cloud/azure/AbstractAzureComputeServiceTest.java
index 2dc5add..620c104 100644
--- a/plugins/cloud-azure/src/test/java/org/elasticsearch/cloud/azure/AbstractAzureComputeServiceTest.java
+++ b/plugins/cloud-azure/src/test/java/org/elasticsearch/cloud/azure/AbstractAzureComputeServiceTest.java
@@ -20,10 +20,14 @@
 package org.elasticsearch.cloud.azure;
 
 import org.elasticsearch.action.admin.cluster.node.info.NodesInfoResponse;
+import org.elasticsearch.cloud.azure.AzureModule;
+import org.elasticsearch.cloud.azure.management.AzureComputeService;
 import org.elasticsearch.cloud.azure.management.AzureComputeService.Discovery;
 import org.elasticsearch.cloud.azure.management.AzureComputeService.Management;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.plugin.cloud.azure.CloudAzurePlugin;
+import org.elasticsearch.plugins.AbstractPlugin;
+import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESIntegTestCase;
 
 public abstract class AbstractAzureComputeServiceTest extends ESIntegTestCase {
diff --git a/plugins/cloud-azure/src/test/java/org/elasticsearch/cloud/azure/AbstractAzureRepositoryServiceTest.java b/plugins/cloud-azure/src/test/java/org/elasticsearch/cloud/azure/AbstractAzureRepositoryServiceTest.java
index fa4131c..9fae815 100644
--- a/plugins/cloud-azure/src/test/java/org/elasticsearch/cloud/azure/AbstractAzureRepositoryServiceTest.java
+++ b/plugins/cloud-azure/src/test/java/org/elasticsearch/cloud/azure/AbstractAzureRepositoryServiceTest.java
@@ -26,7 +26,7 @@ import org.elasticsearch.cloud.azure.storage.AzureStorageServiceMock;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.plugin.cloud.azure.CloudAzurePlugin;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.repositories.RepositoryMissingException;
 import org.elasticsearch.test.store.MockFSDirectoryService;
 import org.junit.After;
@@ -36,7 +36,7 @@ import java.net.URISyntaxException;
 
 public abstract class AbstractAzureRepositoryServiceTest extends AbstractAzureTest {
 
-    public static class TestPlugin extends Plugin {
+    public static class Plugin extends AbstractPlugin {
         @Override
         public String name() {
             return "mock-stoarge-service";
@@ -77,7 +77,7 @@ public abstract class AbstractAzureRepositoryServiceTest extends AbstractAzureTe
     @Override
     protected Settings nodeSettings(int nodeOrdinal) {
         Settings.Builder builder = Settings.settingsBuilder()
-                .extendArray("plugin.types", CloudAzurePlugin.class.getName(), TestPlugin.class.getName())
+                .extendArray("plugin.types", CloudAzurePlugin.class.getName(), Plugin.class.getName())
                 .put(Storage.API_IMPLEMENTATION, mock)
                 .put(Storage.CONTAINER, "snapshots");
 
diff --git a/plugins/cloud-azure/src/test/java/org/elasticsearch/cloud/azure/AzureComputeServiceSimpleMock.java b/plugins/cloud-azure/src/test/java/org/elasticsearch/cloud/azure/AzureComputeServiceSimpleMock.java
index 6323e91..2f161bb 100644
--- a/plugins/cloud-azure/src/test/java/org/elasticsearch/cloud/azure/AzureComputeServiceSimpleMock.java
+++ b/plugins/cloud-azure/src/test/java/org/elasticsearch/cloud/azure/AzureComputeServiceSimpleMock.java
@@ -19,16 +19,12 @@
 
 package org.elasticsearch.cloud.azure;
 
-import com.microsoft.windowsazure.management.compute.models.DeploymentSlot;
-import com.microsoft.windowsazure.management.compute.models.DeploymentStatus;
-import com.microsoft.windowsazure.management.compute.models.HostedServiceGetDetailedResponse;
-import com.microsoft.windowsazure.management.compute.models.InstanceEndpoint;
-import com.microsoft.windowsazure.management.compute.models.RoleInstance;
+import com.microsoft.windowsazure.management.compute.models.*;
 import org.elasticsearch.cloud.azure.management.AzureComputeServiceAbstractMock;
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.util.CollectionUtils;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 
 import java.net.InetAddress;
 
@@ -37,7 +33,7 @@ import java.net.InetAddress;
  */
 public class AzureComputeServiceSimpleMock extends AzureComputeServiceAbstractMock {
 
-    public static class TestPlugin extends Plugin {
+    public static class Plugin extends AbstractPlugin {
         @Override
         public String name() {
             return "mock-compute-service";
diff --git a/plugins/cloud-azure/src/test/java/org/elasticsearch/cloud/azure/AzureComputeServiceTwoNodesMock.java b/plugins/cloud-azure/src/test/java/org/elasticsearch/cloud/azure/AzureComputeServiceTwoNodesMock.java
index a87a4ef..e8f7fa9 100644
--- a/plugins/cloud-azure/src/test/java/org/elasticsearch/cloud/azure/AzureComputeServiceTwoNodesMock.java
+++ b/plugins/cloud-azure/src/test/java/org/elasticsearch/cloud/azure/AzureComputeServiceTwoNodesMock.java
@@ -20,11 +20,13 @@
 package org.elasticsearch.cloud.azure;
 
 import com.microsoft.windowsazure.management.compute.models.*;
+import org.elasticsearch.cloud.azure.AzureModule;
 import org.elasticsearch.cloud.azure.management.AzureComputeServiceAbstractMock;
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.network.NetworkService;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.util.CollectionUtils;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.plugins.Plugin;
 
 import java.net.InetAddress;
@@ -34,7 +36,7 @@ import java.net.InetAddress;
  * Mock Azure API with two started nodes
  */
 public class AzureComputeServiceTwoNodesMock extends AzureComputeServiceAbstractMock {
-    public static class TestPlugin extends Plugin {
+    public static class Plugin extends AbstractPlugin {
         @Override
         public String name() {
             return "mock-compute-service";
diff --git a/plugins/cloud-azure/src/test/java/org/elasticsearch/discovery/azure/AzureMinimumMasterNodesTest.java b/plugins/cloud-azure/src/test/java/org/elasticsearch/discovery/azure/AzureMinimumMasterNodesTest.java
index 2cbdf4e..c0cde86 100644
--- a/plugins/cloud-azure/src/test/java/org/elasticsearch/discovery/azure/AzureMinimumMasterNodesTest.java
+++ b/plugins/cloud-azure/src/test/java/org/elasticsearch/discovery/azure/AzureMinimumMasterNodesTest.java
@@ -44,7 +44,7 @@ import static org.hamcrest.Matchers.nullValue;
 public class AzureMinimumMasterNodesTest extends AbstractAzureComputeServiceTest {
 
     public AzureMinimumMasterNodesTest() {
-        super(AzureComputeServiceTwoNodesMock.TestPlugin.class.getName());
+        super(AzureComputeServiceTwoNodesMock.Plugin.class.getName());
     }
 
     @Override
diff --git a/plugins/cloud-azure/src/test/java/org/elasticsearch/discovery/azure/AzureSimpleTest.java b/plugins/cloud-azure/src/test/java/org/elasticsearch/discovery/azure/AzureSimpleTest.java
index be69bde..d99267e 100644
--- a/plugins/cloud-azure/src/test/java/org/elasticsearch/discovery/azure/AzureSimpleTest.java
+++ b/plugins/cloud-azure/src/test/java/org/elasticsearch/discovery/azure/AzureSimpleTest.java
@@ -36,7 +36,7 @@ import static org.hamcrest.Matchers.notNullValue;
 public class AzureSimpleTest extends AbstractAzureComputeServiceTest {
 
     public AzureSimpleTest() {
-        super(AzureComputeServiceSimpleMock.TestPlugin.class.getName());
+        super(AzureComputeServiceSimpleMock.Plugin.class.getName());
     }
 
     @Test
diff --git a/plugins/cloud-azure/src/test/java/org/elasticsearch/discovery/azure/AzureTwoStartedNodesTest.java b/plugins/cloud-azure/src/test/java/org/elasticsearch/discovery/azure/AzureTwoStartedNodesTest.java
index f5ec742..818d828 100644
--- a/plugins/cloud-azure/src/test/java/org/elasticsearch/discovery/azure/AzureTwoStartedNodesTest.java
+++ b/plugins/cloud-azure/src/test/java/org/elasticsearch/discovery/azure/AzureTwoStartedNodesTest.java
@@ -36,7 +36,7 @@ import static org.hamcrest.Matchers.notNullValue;
 public class AzureTwoStartedNodesTest extends AbstractAzureComputeServiceTest {
 
     public AzureTwoStartedNodesTest() {
-        super(AzureComputeServiceTwoNodesMock.TestPlugin.class.getName());
+        super(AzureComputeServiceTwoNodesMock.Plugin.class.getName());
     }
 
     @Test
diff --git a/plugins/cloud-gce/src/main/java/org/elasticsearch/plugin/cloud/gce/CloudGcePlugin.java b/plugins/cloud-gce/src/main/java/org/elasticsearch/plugin/cloud/gce/CloudGcePlugin.java
index 8b2a3d2..465b680 100644
--- a/plugins/cloud-gce/src/main/java/org/elasticsearch/plugin/cloud/gce/CloudGcePlugin.java
+++ b/plugins/cloud-gce/src/main/java/org/elasticsearch/plugin/cloud/gce/CloudGcePlugin.java
@@ -25,16 +25,15 @@ import org.elasticsearch.common.inject.Module;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.discovery.DiscoveryModule;
 import org.elasticsearch.discovery.gce.GceDiscovery;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.List;
 
 /**
  *
  */
-public class CloudGcePlugin extends Plugin {
+public class CloudGcePlugin extends AbstractPlugin {
 
     private final Settings settings;
 
@@ -53,16 +52,16 @@ public class CloudGcePlugin extends Plugin {
     }
 
     @Override
-    public Collection<Module> nodeModules() {
-        List<Module> modules = new ArrayList<>();
+    public Collection<Class<? extends Module>> modules() {
+        Collection<Class<? extends Module>> modules = new ArrayList<>();
         if (settings.getAsBoolean("cloud.enabled", true)) {
-            modules.add(new GceModule());
+            modules.add(GceModule.class);
         }
         return modules;
     }
 
     @Override
-    public Collection<Class<? extends LifecycleComponent>> nodeServices() {
+    public Collection<Class<? extends LifecycleComponent>> services() {
         Collection<Class<? extends LifecycleComponent>> services = new ArrayList<>();
         if (settings.getAsBoolean("cloud.enabled", true)) {
             services.add(GceModule.getComputeServiceImpl());
diff --git a/plugins/delete-by-query/src/main/java/org/elasticsearch/plugin/deletebyquery/DeleteByQueryPlugin.java b/plugins/delete-by-query/src/main/java/org/elasticsearch/plugin/deletebyquery/DeleteByQueryPlugin.java
index 7e50e93..bcc1317 100644
--- a/plugins/delete-by-query/src/main/java/org/elasticsearch/plugin/deletebyquery/DeleteByQueryPlugin.java
+++ b/plugins/delete-by-query/src/main/java/org/elasticsearch/plugin/deletebyquery/DeleteByQueryPlugin.java
@@ -20,12 +20,13 @@
 package org.elasticsearch.plugin.deletebyquery;
 
 import org.elasticsearch.common.inject.Module;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.plugins.AbstractPlugin;
 
+import java.util.Arrays;
 import java.util.Collection;
-import java.util.Collections;
 
-public class DeleteByQueryPlugin extends Plugin {
+public class DeleteByQueryPlugin extends AbstractPlugin {
 
     public static final String NAME = "delete-by-query";
 
@@ -40,7 +41,7 @@ public class DeleteByQueryPlugin extends Plugin {
     }
 
     @Override
-    public Collection<Module> nodeModules() {
-        return Collections.<Module>singletonList(new DeleteByQueryModule());
+    public Collection<Module> modules(Settings settings) {
+        return Arrays.asList((Module) new DeleteByQueryModule());
     }
 }
diff --git a/plugins/jvm-example/src/main/java/org/elasticsearch/plugin/example/ExamplePluginConfiguration.java b/plugins/jvm-example/src/main/java/org/elasticsearch/plugin/example/ExamplePluginConfiguration.java
index 430d880..8b8dc25 100644
--- a/plugins/jvm-example/src/main/java/org/elasticsearch/plugin/example/ExamplePluginConfiguration.java
+++ b/plugins/jvm-example/src/main/java/org/elasticsearch/plugin/example/ExamplePluginConfiguration.java
@@ -20,17 +20,28 @@
 package org.elasticsearch.plugin.example;
 
 import org.elasticsearch.ElasticsearchParseException;
+import org.elasticsearch.common.inject.AbstractModule;
 import org.elasticsearch.common.inject.Inject;
+import org.elasticsearch.common.inject.Module;
+import org.elasticsearch.common.inject.multibindings.Multibinder;
+import org.elasticsearch.common.inject.name.Names;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.yaml.YamlXContent;
+import org.elasticsearch.common.logging.ESLogger;
+import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.env.Environment;
+import org.elasticsearch.plugins.AbstractPlugin;
+import org.elasticsearch.rest.action.cat.AbstractCatAction;
 
 import java.io.IOException;
 import java.nio.file.Path;
+import java.util.ArrayList;
+import java.util.Collection;
+
+import static org.elasticsearch.common.io.Streams.copyToString;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static java.nio.file.Files.newBufferedReader;
-import static org.elasticsearch.common.io.Streams.copyToString;
 
 /**
  * Example configuration.
diff --git a/plugins/jvm-example/src/main/java/org/elasticsearch/plugin/example/JvmExamplePlugin.java b/plugins/jvm-example/src/main/java/org/elasticsearch/plugin/example/JvmExamplePlugin.java
index fc9de89..b67765a 100644
--- a/plugins/jvm-example/src/main/java/org/elasticsearch/plugin/example/JvmExamplePlugin.java
+++ b/plugins/jvm-example/src/main/java/org/elasticsearch/plugin/example/JvmExamplePlugin.java
@@ -25,6 +25,7 @@ import org.elasticsearch.common.inject.Module;
 import org.elasticsearch.common.inject.multibindings.Multibinder;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.repositories.RepositoriesModule;
 import org.elasticsearch.rest.action.cat.AbstractCatAction;
 
@@ -36,7 +37,7 @@ import java.util.Collections;
 /**
  * Example of a plugin.
  */
-public class JvmExamplePlugin extends Plugin {
+public class JvmExamplePlugin implements Plugin {
 
     private final Settings settings;
 
@@ -55,18 +56,31 @@ public class JvmExamplePlugin extends Plugin {
     }
 
     @Override
-    public Collection<Module> nodeModules() {
-        return Collections.<Module>singletonList(new ConfiguredExampleModule());
+    public Collection<Class<? extends Module>> modules() {
+        Collection<Class<? extends Module>> modules = new ArrayList<>();
+        modules.add(ConfiguredExampleModule.class);
+        return modules;
     }
 
     @Override
-    public Collection<Class<? extends LifecycleComponent>> nodeServices() {
+    public Collection<Module> modules(Settings settings) {
+        Collection<Module> modules = new ArrayList<>();
+        return modules;
+    }
+
+    @Override
+    public Collection<Class<? extends LifecycleComponent>> services() {
         Collection<Class<? extends LifecycleComponent>> services = new ArrayList<>();
         return services;
     }
 
     @Override
-    public Collection<Module> indexModules(Settings indexSettings) {
+    public Collection<Class<? extends Module>> indexModules() {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public Collection<? extends Module> indexModules(Settings settings) {
         return Collections.emptyList();
     }
 
@@ -76,7 +90,12 @@ public class JvmExamplePlugin extends Plugin {
     }
 
     @Override
-    public Collection<Module> shardModules(Settings indexSettings) {
+    public Collection<Class<? extends Module>> shardModules() {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public Collection<? extends Module> shardModules(Settings settings) {
         return Collections.emptyList();
     }
 
@@ -86,6 +105,11 @@ public class JvmExamplePlugin extends Plugin {
     }
 
     @Override
+    public void processModule(Module module) {
+
+    }
+
+    @Override
     public Settings additionalSettings() {
         return Settings.EMPTY;
     }
diff --git a/plugins/lang-javascript/src/main/java/org/elasticsearch/plugin/javascript/JavaScriptPlugin.java b/plugins/lang-javascript/src/main/java/org/elasticsearch/plugin/javascript/JavaScriptPlugin.java
index a6832fe..0b4ffd7 100644
--- a/plugins/lang-javascript/src/main/java/org/elasticsearch/plugin/javascript/JavaScriptPlugin.java
+++ b/plugins/lang-javascript/src/main/java/org/elasticsearch/plugin/javascript/JavaScriptPlugin.java
@@ -19,14 +19,14 @@
 
 package org.elasticsearch.plugin.javascript;
 
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.script.ScriptModule;
 import org.elasticsearch.script.javascript.JavaScriptScriptEngineService;
 
 /**
  *
  */
-public class JavaScriptPlugin extends Plugin {
+public class JavaScriptPlugin extends AbstractPlugin {
 
     @Override
     public String name() {
diff --git a/plugins/lang-python/src/main/java/org/elasticsearch/plugin/python/PythonPlugin.java b/plugins/lang-python/src/main/java/org/elasticsearch/plugin/python/PythonPlugin.java
index 28dad51..78f0531 100644
--- a/plugins/lang-python/src/main/java/org/elasticsearch/plugin/python/PythonPlugin.java
+++ b/plugins/lang-python/src/main/java/org/elasticsearch/plugin/python/PythonPlugin.java
@@ -19,14 +19,14 @@
 
 package org.elasticsearch.plugin.python;
 
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 import org.elasticsearch.script.ScriptModule;
 import org.elasticsearch.script.python.PythonScriptEngineService;
 
 /**
  *
  */
-public class PythonPlugin extends Plugin {
+public class PythonPlugin extends AbstractPlugin {
 
     @Override
     public String name() {
diff --git a/plugins/mapper-size/src/main/java/org/elasticsearch/plugin/mapper/MapperSizePlugin.java b/plugins/mapper-size/src/main/java/org/elasticsearch/plugin/mapper/MapperSizePlugin.java
index df95a4e..20f5254 100644
--- a/plugins/mapper-size/src/main/java/org/elasticsearch/plugin/mapper/MapperSizePlugin.java
+++ b/plugins/mapper-size/src/main/java/org/elasticsearch/plugin/mapper/MapperSizePlugin.java
@@ -20,13 +20,12 @@
 package org.elasticsearch.plugin.mapper;
 
 import org.elasticsearch.common.inject.Module;
-import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.plugins.AbstractPlugin;
 
 import java.util.Collection;
 import java.util.Collections;
 
-public class MapperSizePlugin extends Plugin {
+public class MapperSizePlugin extends AbstractPlugin {
 
     @Override
     public String name() {
@@ -39,8 +38,8 @@ public class MapperSizePlugin extends Plugin {
     }
 
     @Override
-    public Collection<Module> indexModules(Settings indexSettings) {
-        return Collections.<Module>singletonList(new MapperSizeIndexModule());
+    public Collection<Class<? extends Module>> indexModules() {
+        return Collections.<Class<? extends Module>>singleton(MapperSizeIndexModule.class);
     }
 
 }
diff --git a/plugins/pom.xml b/plugins/pom.xml
index e87ef1e..5bc7f5f 100644
--- a/plugins/pom.xml
+++ b/plugins/pom.xml
@@ -178,11 +178,6 @@
             <scope>provided</scope>
         </dependency>
         <dependency>
-            <groupId>org.apache.commons</groupId>
-            <artifactId>commons-lang3</artifactId>
-            <scope>provided</scope>
-        </dependency>
-        <dependency>
             <groupId>commons-cli</groupId>
             <artifactId>commons-cli</artifactId>
             <scope>provided</scope>
diff --git a/pom.xml b/pom.xml
index 71129a6..d82b7ca 100644
--- a/pom.xml
+++ b/pom.xml
@@ -410,12 +410,6 @@
             </dependency>
 
             <dependency>
-                <groupId>org.apache.commons</groupId>
-                <artifactId>commons-lang3</artifactId>
-                <version>3.3.2</version>
-            </dependency>
-
-            <dependency>
                 <groupId>commons-cli</groupId>
                 <artifactId>commons-cli</artifactId>
                 <version>1.3.1</version>
diff --git a/qa/smoke-test-multinode/pom.xml b/qa/smoke-test-multinode/pom.xml
index 4b44c58..4c23f7b 100644
--- a/qa/smoke-test-multinode/pom.xml
+++ b/qa/smoke-test-multinode/pom.xml
@@ -166,11 +166,6 @@
       <scope>provided</scope>
     </dependency>
     <dependency>
-      <groupId>org.apache.commons</groupId>
-      <artifactId>commons-lang3</artifactId>
-      <scope>provided</scope>
-    </dependency>
-    <dependency>
       <groupId>commons-cli</groupId>
       <artifactId>commons-cli</artifactId>
       <scope>provided</scope>
diff --git a/qa/smoke-test-plugins/pom.xml b/qa/smoke-test-plugins/pom.xml
index 8a08bcd..9714885 100644
--- a/qa/smoke-test-plugins/pom.xml
+++ b/qa/smoke-test-plugins/pom.xml
@@ -171,11 +171,6 @@
       <scope>provided</scope>
     </dependency>
     <dependency>
-      <groupId>org.apache.commons</groupId>
-      <artifactId>commons-lang3</artifactId>
-      <scope>provided</scope>
-    </dependency>
-    <dependency>
       <groupId>commons-cli</groupId>
       <artifactId>commons-cli</artifactId>
       <scope>provided</scope>
diff --git a/qa/vagrant/pom.xml b/qa/vagrant/pom.xml
index 26636be..8f3b8ad 100644
--- a/qa/vagrant/pom.xml
+++ b/qa/vagrant/pom.xml
@@ -94,7 +94,7 @@
                                 </artifactItem>
                                 <artifactItem>
                                     <groupId>org.elasticsearch.plugin</groupId>
-                                    <artifactId>elasticsearch-jvm-example</artifactId>
+                                    <artifactId>jvm-example</artifactId>
                                     <version>${elasticsearch.version}</version>
                                     <type>zip</type>
                                 </artifactItem>
diff --git a/qa/vagrant/src/test/resources/packaging/scripts/25_tar_plugins.bats b/qa/vagrant/src/test/resources/packaging/scripts/25_tar_plugins.bats
index efc0c2e..2b8fe63 100644
--- a/qa/vagrant/src/test/resources/packaging/scripts/25_tar_plugins.bats
+++ b/qa/vagrant/src/test/resources/packaging/scripts/25_tar_plugins.bats
@@ -61,7 +61,7 @@ setup() {
     assert_file_exist "/tmp/elasticsearch/config/jvm-example/example.yaml"
     assert_file_exist "/tmp/elasticsearch/plugins/jvm-example"
     assert_file_exist "/tmp/elasticsearch/plugins/jvm-example/plugin-descriptor.properties"
-    assert_file_exist "/tmp/elasticsearch/plugins/jvm-example/elasticsearch-jvm-example-"*".jar"
+    assert_file_exist "/tmp/elasticsearch/plugins/jvm-example/jvm-example-"*".jar"
     echo "Running jvm-example's bin script...."
     /tmp/elasticsearch/bin/jvm-example/test | grep test
 
@@ -106,7 +106,7 @@ setup() {
     assert_file_exist "/tmp/elasticsearch/config/jvm-example/example.yaml"
     assert_file_exist "$TEMP_PLUGINS_DIR/jvm-example"
     assert_file_exist "$TEMP_PLUGINS_DIR/jvm-example/plugin-descriptor.properties"
-    assert_file_exist "$TEMP_PLUGINS_DIR/jvm-example/elasticsearch-jvm-example-"*".jar"
+    assert_file_exist "$TEMP_PLUGINS_DIR/jvm-example/jvm-example-"*".jar"
 
     # Remove the plugin
     run /tmp/elasticsearch/bin/plugin remove jvm-example
@@ -156,7 +156,7 @@ setup() {
     assert_file_exist "$TEMP_CONFIG_DIR/jvm-example/example.yaml"
     assert_file_exist "/tmp/elasticsearch/plugins/jvm-example"
     assert_file_exist "/tmp/elasticsearch/plugins/jvm-example/plugin-descriptor.properties"
-    assert_file_exist "/tmp/elasticsearch/plugins/jvm-example/elasticsearch-jvm-example-"*".jar"
+    assert_file_exist "/tmp/elasticsearch/plugins/jvm-example/jvm-example-"*".jar"
 
     # Remove the plugin
     run /tmp/elasticsearch/bin/plugin remove jvm-example
@@ -210,7 +210,7 @@ setup() {
     assert_file_exist "$TEMP_CONFIG_DIR/jvm-example/example.yaml"
     assert_file_exist "/tmp/elasticsearch/plugins/jvm-example"
     assert_file_exist "/tmp/elasticsearch/plugins/jvm-example/plugin-descriptor.properties"
-    assert_file_exist "/tmp/elasticsearch/plugins/jvm-example/elasticsearch-jvm-example-"*".jar"
+    assert_file_exist "/tmp/elasticsearch/plugins/jvm-example/jvm-example-"*".jar"
 
     # Remove the plugin
     run /tmp/elasticsearch/bin/plugin remove jvm-example
@@ -254,7 +254,7 @@ setup() {
     assert_file_exist "$ES_DIR/config/jvm-example/example.yaml"
     assert_file_exist "$ES_DIR/plugins/jvm-example"
     assert_file_exist "$ES_DIR/plugins/jvm-example/plugin-descriptor.properties"
-    assert_file_exist "$ES_DIR/plugins/jvm-example/elasticsearch-jvm-example-"*".jar"
+    assert_file_exist "$ES_DIR/plugins/jvm-example/jvm-example-"*".jar"
 
     # Remove the plugin
     run "$ES_DIR/bin/plugin" remove jvm-example
@@ -298,7 +298,7 @@ setup() {
     assert_file_exist "/tmp/elasticsearch/config/jvm-example/example.yaml"
     assert_file_exist "/tmp/elasticsearch/plugins/jvm-example"
     assert_file_exist "/tmp/elasticsearch/plugins/jvm-example/plugin-descriptor.properties"
-    assert_file_exist "/tmp/elasticsearch/plugins/jvm-example/elasticsearch-jvm-example-"*".jar"
+    assert_file_exist "/tmp/elasticsearch/plugins/jvm-example/jvm-example-"*".jar"
 
     # Remove the plugin
     run /tmp/elasticsearch/bin/plugin remove jvm-example
diff --git a/qa/vagrant/src/test/resources/packaging/scripts/50_plugins.bats b/qa/vagrant/src/test/resources/packaging/scripts/50_plugins.bats
index c739296..77ce7f0 100644
--- a/qa/vagrant/src/test/resources/packaging/scripts/50_plugins.bats
+++ b/qa/vagrant/src/test/resources/packaging/scripts/50_plugins.bats
@@ -74,7 +74,7 @@ install_package() {
     assert_file_exist "/etc/elasticsearch/jvm-example/example.yaml"
     assert_file_exist "/usr/share/elasticsearch/plugins/jvm-example"
     assert_file_exist "/usr/share/elasticsearch/plugins/jvm-example/plugin-descriptor.properties"
-    assert_file_exist "/usr/share/elasticsearch/plugins/jvm-example/elasticsearch-jvm-example-"*".jar"
+    assert_file_exist "/usr/share/elasticsearch/plugins/jvm-example/jvm-example-"*".jar"
 
     # Remove the plugin
     run /usr/share/elasticsearch/bin/plugin remove jvm-example
@@ -121,7 +121,7 @@ install_package() {
     assert_file_exist "/etc/elasticsearch/jvm-example/example.yaml"
     assert_file_exist "$TEMP_PLUGINS_DIR/jvm-example"
     assert_file_exist "$TEMP_PLUGINS_DIR/jvm-example/plugin-descriptor.properties"
-    assert_file_exist "$TEMP_PLUGINS_DIR/jvm-example/elasticsearch-jvm-example-"*".jar"
+    assert_file_exist "$TEMP_PLUGINS_DIR/jvm-example/jvm-example-"*".jar"
 
 
     # Remove the plugin
@@ -183,7 +183,7 @@ install_package() {
     assert_file_exist "$TEMP_CONFIG_DIR/jvm-example/example.yaml"
     assert_file_exist "/usr/share/elasticsearch/plugins/jvm-example"
     assert_file_exist "/usr/share/elasticsearch/plugins/jvm-example/plugin-descriptor.properties"
-    assert_file_exist "/usr/share/elasticsearch/plugins/jvm-example/elasticsearch-jvm-example-"*".jar"
+    assert_file_exist "/usr/share/elasticsearch/plugins/jvm-example/jvm-example-"*".jar"
 
     # Remove the plugin
     run /usr/share/elasticsearch/bin/plugin remove jvm-example
@@ -241,7 +241,7 @@ install_package() {
     assert_file_exist "$TEMP_CONFIG_DIR/jvm-example/example.yaml"
     assert_file_exist "/usr/share/elasticsearch/plugins/jvm-example"
     assert_file_exist "/usr/share/elasticsearch/plugins/jvm-example/plugin-descriptor.properties"
-    assert_file_exist "/usr/share/elasticsearch/plugins/jvm-example/elasticsearch-jvm-example-"*".jar"
+    assert_file_exist "/usr/share/elasticsearch/plugins/jvm-example/jvm-example-"*".jar"
 
     # Remove the plugin
     run /usr/share/elasticsearch/bin/plugin remove jvm-example
diff --git a/qa/vagrant/src/test/resources/packaging/scripts/packaging_test_utils.bash b/qa/vagrant/src/test/resources/packaging/scripts/packaging_test_utils.bash
index a1b16a6..c3773b5 100644
--- a/qa/vagrant/src/test/resources/packaging/scripts/packaging_test_utils.bash
+++ b/qa/vagrant/src/test/resources/packaging/scripts/packaging_test_utils.bash
@@ -27,7 +27,7 @@
 
 
 # Variables used by tests
-EXAMPLE_PLUGIN_ZIP=$(readlink -m elasticsearch-jvm-example-*.zip)
+EXAMPLE_PLUGIN_ZIP=$(readlink -m jvm-example-*.zip)
 
 # Checks if necessary commands are available to run the tests
 
