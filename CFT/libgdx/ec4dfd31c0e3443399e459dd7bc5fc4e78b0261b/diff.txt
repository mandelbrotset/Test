diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/physics/box2d/Contact.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/physics/box2d/Contact.java
index 4296a20..39ed0b2 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/physics/box2d/Contact.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/physics/box2d/Contact.java
@@ -113,4 +113,12 @@ public class Contact {
 	public void ResetRestitution () {
 		contact.resetRestitution();
 	}
+	
+	public float getTangentSpeed () {
+		return contact.getTangentSpeed();
+	}
+	
+	public void setTangentSpeed (float speed) {
+		contact.setTangentSpeed(speed);
+	}
 }
diff --git a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/mappings/Ouya.java b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/mappings/Ouya.java
index 23d6929..1e3fab0 100755
--- a/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/mappings/Ouya.java
+++ b/extensions/gdx-controllers/gdx-controllers/src/com/badlogic/gdx/controllers/mappings/Ouya.java
@@ -15,6 +15,7 @@ public class Ouya {
 	public static final int BUTTON_U;
 	public static final int BUTTON_Y;
 	public static final int BUTTON_A;
+	public static final int BUTTON_MENU;
 	public static final int BUTTON_DPAD_UP;
 	public static final int BUTTON_DPAD_DOWN;
 	public static final int BUTTON_DPAD_RIGHT;
@@ -31,6 +32,7 @@ public class Ouya {
 	public static final int AXIS_RIGHT_X;
 	public static final int AXIS_RIGHT_Y;
 	public static final int AXIS_RIGHT_TRIGGER;
+	public static final float STICK_DEADZONE = 0.25F;
 	/** whether the app is running on a real Ouya device **/
 	public static final boolean runningOnOuya;
 	
@@ -50,6 +52,7 @@ public class Ouya {
 			BUTTON_U = 99;
 			BUTTON_Y = 100;
 			BUTTON_A = 97;
+			BUTTON_MENU = 82;
 			BUTTON_DPAD_UP = 19;
 			BUTTON_DPAD_DOWN = 20;
 			BUTTON_DPAD_RIGHT = 22;
@@ -71,6 +74,7 @@ public class Ouya {
 			BUTTON_U = 97;
 			BUTTON_Y = 98;
 			BUTTON_A = 99;
+			BUTTON_MENU = 108;
 			BUTTON_DPAD_UP = 104;
 			BUTTON_DPAD_DOWN = 105;
 			BUTTON_DPAD_RIGHT = 108;
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.CircleShape.h b/gdx/jni/com.badlogic.gdx.physics.box2d.CircleShape.h
index 507a791..3c32c3d 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.CircleShape.h
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.CircleShape.h
@@ -1,37 +1,37 @@
-/* DO NOT EDIT THIS FILE - it is machine generated */
-#include <jni.h>
-/* Header for class com_badlogic_gdx_physics_box2d_CircleShape */
-
-#ifndef _Included_com_badlogic_gdx_physics_box2d_CircleShape
-#define _Included_com_badlogic_gdx_physics_box2d_CircleShape
-#ifdef __cplusplus
-extern "C" {
-#endif
-/*
- * Class:     com_badlogic_gdx_physics_box2d_CircleShape
- * Method:    newCircleShape
- * Signature: ()J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_CircleShape_newCircleShape
-  (JNIEnv *, jobject);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_CircleShape
- * Method:    jniGetPosition
- * Signature: (J[F)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_CircleShape_jniGetPosition
-  (JNIEnv *, jobject, jlong, jfloatArray);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_CircleShape
- * Method:    jniSetPosition
- * Signature: (JFF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_CircleShape_jniSetPosition
-  (JNIEnv *, jobject, jlong, jfloat, jfloat);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
+/* DO NOT EDIT THIS FILE - it is machine generated */
+#include <jni.h>
+/* Header for class com_badlogic_gdx_physics_box2d_CircleShape */
+
+#ifndef _Included_com_badlogic_gdx_physics_box2d_CircleShape
+#define _Included_com_badlogic_gdx_physics_box2d_CircleShape
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_CircleShape
+ * Method:    newCircleShape
+ * Signature: ()J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_CircleShape_newCircleShape
+  (JNIEnv *, jobject);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_CircleShape
+ * Method:    jniGetPosition
+ * Signature: (J[F)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_CircleShape_jniGetPosition
+  (JNIEnv *, jobject, jlong, jfloatArray);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_CircleShape
+ * Method:    jniSetPosition
+ * Signature: (JFF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_CircleShape_jniSetPosition
+  (JNIEnv *, jobject, jlong, jfloat, jfloat);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.Contact.cpp b/gdx/jni/com.badlogic.gdx.physics.box2d.Contact.cpp
index a5408ed..d9d5134 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.Contact.cpp
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.Contact.cpp
@@ -179,3 +179,25 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniResetResti
 
 }
 
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniGetTangentSpeed(JNIEnv* env, jobject object, jlong addr) {
+
+
+//@line:216
+
+	  	b2Contact* contact = (b2Contact*)addr;
+		return contact->GetTangentSpeed();
+	
+
+}
+
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniSetTangentSpeed(JNIEnv* env, jobject object, jlong addr, jfloat speed) {
+
+
+//@line:226
+
+	  	b2Contact* contact = (b2Contact*)addr;
+		contact->SetTangentSpeed(speed);
+	
+
+}
+
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.Contact.h b/gdx/jni/com.badlogic.gdx.physics.box2d.Contact.h
index fa8f005..0dbeaf8 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.Contact.h
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.Contact.h
@@ -1,125 +1,141 @@
-/* DO NOT EDIT THIS FILE - it is machine generated */
-#include <jni.h>
-/* Header for class com_badlogic_gdx_physics_box2d_Contact */
-
-#ifndef _Included_com_badlogic_gdx_physics_box2d_Contact
-#define _Included_com_badlogic_gdx_physics_box2d_Contact
-#ifdef __cplusplus
-extern "C" {
-#endif
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Contact
- * Method:    jniGetWorldManifold
- * Signature: (J[F)I
- */
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniGetWorldManifold
-  (JNIEnv *, jobject, jlong, jfloatArray);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Contact
- * Method:    jniIsTouching
- * Signature: (J)Z
- */
-JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniIsTouching
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Contact
- * Method:    jniSetEnabled
- * Signature: (JZ)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniSetEnabled
-  (JNIEnv *, jobject, jlong, jboolean);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Contact
- * Method:    jniIsEnabled
- * Signature: (J)Z
- */
-JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniIsEnabled
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Contact
- * Method:    jniGetFixtureA
- * Signature: (J)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniGetFixtureA
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Contact
- * Method:    jniGetFixtureB
- * Signature: (J)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniGetFixtureB
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Contact
- * Method:    jniGetChildIndexA
- * Signature: (J)I
- */
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniGetChildIndexA
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Contact
- * Method:    jniGetChildIndexB
- * Signature: (J)I
- */
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniGetChildIndexB
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Contact
- * Method:    jniSetFriction
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniSetFriction
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Contact
- * Method:    jniGetFriction
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniGetFriction
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Contact
- * Method:    jniResetFriction
- * Signature: (J)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniResetFriction
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Contact
- * Method:    jniSetRestitution
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniSetRestitution
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Contact
- * Method:    jniGetRestitution
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniGetRestitution
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Contact
- * Method:    jniResetRestitution
- * Signature: (J)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniResetRestitution
-  (JNIEnv *, jobject, jlong);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
+/* DO NOT EDIT THIS FILE - it is machine generated */
+#include <jni.h>
+/* Header for class com_badlogic_gdx_physics_box2d_Contact */
+
+#ifndef _Included_com_badlogic_gdx_physics_box2d_Contact
+#define _Included_com_badlogic_gdx_physics_box2d_Contact
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Contact
+ * Method:    jniGetWorldManifold
+ * Signature: (J[F)I
+ */
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniGetWorldManifold
+  (JNIEnv *, jobject, jlong, jfloatArray);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Contact
+ * Method:    jniIsTouching
+ * Signature: (J)Z
+ */
+JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniIsTouching
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Contact
+ * Method:    jniSetEnabled
+ * Signature: (JZ)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniSetEnabled
+  (JNIEnv *, jobject, jlong, jboolean);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Contact
+ * Method:    jniIsEnabled
+ * Signature: (J)Z
+ */
+JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniIsEnabled
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Contact
+ * Method:    jniGetFixtureA
+ * Signature: (J)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniGetFixtureA
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Contact
+ * Method:    jniGetFixtureB
+ * Signature: (J)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniGetFixtureB
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Contact
+ * Method:    jniGetChildIndexA
+ * Signature: (J)I
+ */
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniGetChildIndexA
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Contact
+ * Method:    jniGetChildIndexB
+ * Signature: (J)I
+ */
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniGetChildIndexB
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Contact
+ * Method:    jniSetFriction
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniSetFriction
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Contact
+ * Method:    jniGetFriction
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniGetFriction
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Contact
+ * Method:    jniResetFriction
+ * Signature: (J)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniResetFriction
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Contact
+ * Method:    jniSetRestitution
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniSetRestitution
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Contact
+ * Method:    jniGetRestitution
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniGetRestitution
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Contact
+ * Method:    jniResetRestitution
+ * Signature: (J)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniResetRestitution
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Contact
+ * Method:    jniGetTangentSpeed
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniGetTangentSpeed
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Contact
+ * Method:    jniSetTangentSpeed
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Contact_jniSetTangentSpeed
+  (JNIEnv *, jobject, jlong, jfloat);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.Fixture.h b/gdx/jni/com.badlogic.gdx.physics.box2d.Fixture.h
index 85b5c94..41471f6 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.Fixture.h
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.Fixture.h
@@ -1,125 +1,125 @@
-/* DO NOT EDIT THIS FILE - it is machine generated */
-#include <jni.h>
-/* Header for class com_badlogic_gdx_physics_box2d_Fixture */
-
-#ifndef _Included_com_badlogic_gdx_physics_box2d_Fixture
-#define _Included_com_badlogic_gdx_physics_box2d_Fixture
-#ifdef __cplusplus
-extern "C" {
-#endif
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Fixture
- * Method:    jniGetType
- * Signature: (J)I
- */
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniGetType
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Fixture
- * Method:    jniGetShape
- * Signature: (J)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniGetShape
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Fixture
- * Method:    jniSetSensor
- * Signature: (JZ)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniSetSensor
-  (JNIEnv *, jobject, jlong, jboolean);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Fixture
- * Method:    jniIsSensor
- * Signature: (J)Z
- */
-JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniIsSensor
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Fixture
- * Method:    jniSetFilterData
- * Signature: (JSSS)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniSetFilterData
-  (JNIEnv *, jobject, jlong, jshort, jshort, jshort);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Fixture
- * Method:    jniGetFilterData
- * Signature: (J[S)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniGetFilterData
-  (JNIEnv *, jobject, jlong, jshortArray);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Fixture
- * Method:    jniRefilter
- * Signature: (J)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniRefilter
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Fixture
- * Method:    jniTestPoint
- * Signature: (JFF)Z
- */
-JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniTestPoint
-  (JNIEnv *, jobject, jlong, jfloat, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Fixture
- * Method:    jniSetDensity
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniSetDensity
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Fixture
- * Method:    jniGetDensity
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniGetDensity
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Fixture
- * Method:    jniGetFriction
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniGetFriction
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Fixture
- * Method:    jniSetFriction
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniSetFriction
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Fixture
- * Method:    jniGetRestitution
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniGetRestitution
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Fixture
- * Method:    jniSetRestitution
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniSetRestitution
-  (JNIEnv *, jobject, jlong, jfloat);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
+/* DO NOT EDIT THIS FILE - it is machine generated */
+#include <jni.h>
+/* Header for class com_badlogic_gdx_physics_box2d_Fixture */
+
+#ifndef _Included_com_badlogic_gdx_physics_box2d_Fixture
+#define _Included_com_badlogic_gdx_physics_box2d_Fixture
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Fixture
+ * Method:    jniGetType
+ * Signature: (J)I
+ */
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniGetType
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Fixture
+ * Method:    jniGetShape
+ * Signature: (J)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniGetShape
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Fixture
+ * Method:    jniSetSensor
+ * Signature: (JZ)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniSetSensor
+  (JNIEnv *, jobject, jlong, jboolean);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Fixture
+ * Method:    jniIsSensor
+ * Signature: (J)Z
+ */
+JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniIsSensor
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Fixture
+ * Method:    jniSetFilterData
+ * Signature: (JSSS)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniSetFilterData
+  (JNIEnv *, jobject, jlong, jshort, jshort, jshort);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Fixture
+ * Method:    jniGetFilterData
+ * Signature: (J[S)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniGetFilterData
+  (JNIEnv *, jobject, jlong, jshortArray);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Fixture
+ * Method:    jniRefilter
+ * Signature: (J)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniRefilter
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Fixture
+ * Method:    jniTestPoint
+ * Signature: (JFF)Z
+ */
+JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniTestPoint
+  (JNIEnv *, jobject, jlong, jfloat, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Fixture
+ * Method:    jniSetDensity
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniSetDensity
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Fixture
+ * Method:    jniGetDensity
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniGetDensity
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Fixture
+ * Method:    jniGetFriction
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniGetFriction
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Fixture
+ * Method:    jniSetFriction
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniSetFriction
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Fixture
+ * Method:    jniGetRestitution
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniGetRestitution
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Fixture
+ * Method:    jniSetRestitution
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Fixture_jniSetRestitution
+  (JNIEnv *, jobject, jlong, jfloat);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.Joint.h b/gdx/jni/com.badlogic.gdx.physics.box2d.Joint.h
index 7c8a0ad..240cfef 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.Joint.h
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.Joint.h
@@ -1,77 +1,77 @@
-/* DO NOT EDIT THIS FILE - it is machine generated */
-#include <jni.h>
-/* Header for class com_badlogic_gdx_physics_box2d_Joint */
-
-#ifndef _Included_com_badlogic_gdx_physics_box2d_Joint
-#define _Included_com_badlogic_gdx_physics_box2d_Joint
-#ifdef __cplusplus
-extern "C" {
-#endif
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Joint
- * Method:    jniGetType
- * Signature: (J)I
- */
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetType
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Joint
- * Method:    jniGetBodyA
- * Signature: (J)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetBodyA
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Joint
- * Method:    jniGetBodyB
- * Signature: (J)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetBodyB
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Joint
- * Method:    jniGetAnchorA
- * Signature: (J[F)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetAnchorA
-  (JNIEnv *, jobject, jlong, jfloatArray);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Joint
- * Method:    jniGetAnchorB
- * Signature: (J[F)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetAnchorB
-  (JNIEnv *, jobject, jlong, jfloatArray);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Joint
- * Method:    jniGetReactionForce
- * Signature: (JF[F)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetReactionForce
-  (JNIEnv *, jobject, jlong, jfloat, jfloatArray);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Joint
- * Method:    jniGetReactionTorque
- * Signature: (JF)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetReactionTorque
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Joint
- * Method:    jniIsActive
- * Signature: (J)Z
- */
-JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniIsActive
-  (JNIEnv *, jobject, jlong);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
+/* DO NOT EDIT THIS FILE - it is machine generated */
+#include <jni.h>
+/* Header for class com_badlogic_gdx_physics_box2d_Joint */
+
+#ifndef _Included_com_badlogic_gdx_physics_box2d_Joint
+#define _Included_com_badlogic_gdx_physics_box2d_Joint
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Joint
+ * Method:    jniGetType
+ * Signature: (J)I
+ */
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetType
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Joint
+ * Method:    jniGetBodyA
+ * Signature: (J)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetBodyA
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Joint
+ * Method:    jniGetBodyB
+ * Signature: (J)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetBodyB
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Joint
+ * Method:    jniGetAnchorA
+ * Signature: (J[F)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetAnchorA
+  (JNIEnv *, jobject, jlong, jfloatArray);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Joint
+ * Method:    jniGetAnchorB
+ * Signature: (J[F)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetAnchorB
+  (JNIEnv *, jobject, jlong, jfloatArray);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Joint
+ * Method:    jniGetReactionForce
+ * Signature: (JF[F)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetReactionForce
+  (JNIEnv *, jobject, jlong, jfloat, jfloatArray);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Joint
+ * Method:    jniGetReactionTorque
+ * Signature: (JF)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetReactionTorque
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Joint
+ * Method:    jniIsActive
+ * Signature: (J)Z
+ */
+JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniIsActive
+  (JNIEnv *, jobject, jlong);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.Shape.h b/gdx/jni/com.badlogic.gdx.physics.box2d.Shape.h
index e21c172..3062b61 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.Shape.h
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.Shape.h
@@ -1,64 +1,64 @@
-/* DO NOT EDIT THIS FILE - it is machine generated */
-#include <jni.h>
-/* Header for class com_badlogic_gdx_physics_box2d_Shape */
-
-#ifndef _Included_com_badlogic_gdx_physics_box2d_Shape
-#define _Included_com_badlogic_gdx_physics_box2d_Shape
-#ifdef __cplusplus
-extern "C" {
-#endif
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Shape
- * Method:    jniGetRadius
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Shape_jniGetRadius
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Shape
- * Method:    jniSetRadius
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Shape_jniSetRadius
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Shape
- * Method:    jniDispose
- * Signature: (J)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Shape_jniDispose
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Shape
- * Method:    jniGetType
- * Signature: (J)I
- */
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_Shape_jniGetType
-  (JNIEnv *, jclass, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_Shape
- * Method:    jniGetChildCount
- * Signature: (J)I
- */
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_Shape_jniGetChildCount
-  (JNIEnv *, jobject, jlong);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
-/* Header for class com_badlogic_gdx_physics_box2d_Shape_Type */
-
-#ifndef _Included_com_badlogic_gdx_physics_box2d_Shape_Type
-#define _Included_com_badlogic_gdx_physics_box2d_Shape_Type
-#ifdef __cplusplus
-extern "C" {
-#endif
-#ifdef __cplusplus
-}
-#endif
-#endif
+/* DO NOT EDIT THIS FILE - it is machine generated */
+#include <jni.h>
+/* Header for class com_badlogic_gdx_physics_box2d_Shape */
+
+#ifndef _Included_com_badlogic_gdx_physics_box2d_Shape
+#define _Included_com_badlogic_gdx_physics_box2d_Shape
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Shape
+ * Method:    jniGetRadius
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Shape_jniGetRadius
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Shape
+ * Method:    jniSetRadius
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Shape_jniSetRadius
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Shape
+ * Method:    jniDispose
+ * Signature: (J)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Shape_jniDispose
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Shape
+ * Method:    jniGetType
+ * Signature: (J)I
+ */
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_Shape_jniGetType
+  (JNIEnv *, jclass, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_Shape
+ * Method:    jniGetChildCount
+ * Signature: (J)I
+ */
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_Shape_jniGetChildCount
+  (JNIEnv *, jobject, jlong);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
+/* Header for class com_badlogic_gdx_physics_box2d_Shape_Type */
+
+#ifndef _Included_com_badlogic_gdx_physics_box2d_Shape_Type
+#define _Included_com_badlogic_gdx_physics_box2d_Shape_Type
+#ifdef __cplusplus
+extern "C" {
+#endif
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.World.cpp b/gdx/jni/com.badlogic.gdx.physics.box2d.World.cpp
index 7590d29..4b0729e 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.World.cpp
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.World.cpp
@@ -147,6 +147,7 @@ b2ContactFilter defaultFilter;
 		}
 	
 		b2World* world = new b2World( b2Vec2( gravityX, gravityY ));
+		world->SetAllowSleeping( doSleep );
 		return (jlong)world;
 	
 
@@ -155,7 +156,7 @@ b2ContactFilter defaultFilter;
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_setUseDefaultContactFilter(JNIEnv* env, jobject object, jboolean use) {
 
 
-//@line:261
+//@line:262
 
 		// FIXME
 	
@@ -165,7 +166,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_setUseDefaultCo
 JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateBody(JNIEnv* env, jobject object, jlong addr, jint type, jfloat positionX, jfloat positionY, jfloat angle, jfloat linearVelocityX, jfloat linearVelocityY, jfloat angularVelocity, jfloat linearDamping, jfloat angularDamping, jboolean allowSleep, jboolean awake, jboolean fixedRotation, jboolean bullet, jboolean active, jfloat inertiaScale) {
 
 
-//@line:284
+//@line:285
 
 		b2BodyDef bodyDef;
 		bodyDef.type = getBodyType(type);
@@ -192,7 +193,7 @@ JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateBody(
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniDestroyBody(JNIEnv* env, jobject object, jlong addr, jlong bodyAddr) {
 
 
-//@line:323
+//@line:324
 
 		b2World* world = (b2World*)addr;
 		b2Body* body = (b2Body*)bodyAddr;
@@ -204,7 +205,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniDestroyBody(
 JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateWheelJoint(JNIEnv* env, jobject object, jlong addr, jlong bodyA, jlong bodyB, jboolean collideConnected, jfloat localAnchorAX, jfloat localAnchorAY, jfloat localAnchorBX, jfloat localAnchorBY, jfloat localAxisAX, jfloat localAxisAY, jboolean enableMotor, jfloat maxMotorTorque, jfloat motorSpeed, jfloat frequencyHz, jfloat dampingRatio) {
 
 
-//@line:416
+//@line:417
 
 		b2World* world = (b2World*)addr;
 		b2WheelJointDef def;
@@ -228,7 +229,7 @@ JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateWheel
 JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateRopeJoint(JNIEnv* env, jobject object, jlong addr, jlong bodyA, jlong bodyB, jboolean collideConnected, jfloat localAnchorAX, jfloat localAnchorAY, jfloat localAnchorBX, jfloat localAnchorBY, jfloat maxLength) {
 
 
-//@line:435
+//@line:436
 
 		b2World* world = (b2World*)addr;
 		b2RopeJointDef def;
@@ -247,7 +248,7 @@ JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateRopeJ
 JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateDistanceJoint(JNIEnv* env, jobject object, jlong addr, jlong bodyA, jlong bodyB, jboolean collideConnected, jfloat localAnchorAX, jfloat localAnchorAY, jfloat localAnchorBX, jfloat localAnchorBY, jfloat length, jfloat frequencyHz, jfloat dampingRatio) {
 
 
-//@line:449
+//@line:450
 
 		b2World* world = (b2World*)addr;
 		b2DistanceJointDef def;
@@ -268,7 +269,7 @@ JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateDista
 JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateFrictionJoint(JNIEnv* env, jobject object, jlong addr, jlong bodyA, jlong bodyB, jboolean collideConnected, jfloat localAnchorAX, jfloat localAnchorAY, jfloat localAnchorBX, jfloat localAnchorBY, jfloat maxForce, jfloat maxTorque) {
 
 
-//@line:465
+//@line:466
 
 		b2World* world = (b2World*)addr;
 		b2FrictionJointDef def;
@@ -287,7 +288,7 @@ JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateFrict
 JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateGearJoint(JNIEnv* env, jobject object, jlong addr, jlong bodyA, jlong bodyB, jboolean collideConnected, jlong joint1, jlong joint2, jfloat ratio) {
 
 
-//@line:479
+//@line:480
 
 		b2World* world = (b2World*)addr;
 		b2GearJointDef def;
@@ -305,7 +306,7 @@ JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateGearJ
 JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateMouseJoint(JNIEnv* env, jobject object, jlong addr, jlong bodyA, jlong bodyB, jboolean collideConnected, jfloat targetX, jfloat targetY, jfloat maxForce, jfloat frequencyHz, jfloat dampingRatio) {
 
 
-//@line:492
+//@line:493
 
 		b2World* world = (b2World*)addr;
 		b2MouseJointDef def;
@@ -324,7 +325,7 @@ JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateMouse
 JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreatePrismaticJoint(JNIEnv* env, jobject object, jlong addr, jlong bodyA, jlong bodyB, jboolean collideConnected, jfloat localAnchorAX, jfloat localAnchorAY, jfloat localAnchorBX, jfloat localAnchorBY, jfloat localAxisAX, jfloat localAxisAY, jfloat referenceAngle, jboolean enableLimit, jfloat lowerTranslation, jfloat upperTranslation, jboolean enableMotor, jfloat maxMotorForce, jfloat motorSpeed) {
 
 
-//@line:508
+//@line:509
 
 		b2World* world = (b2World*)addr;
 		b2PrismaticJointDef def;
@@ -349,7 +350,7 @@ JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreatePrism
 JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreatePulleyJoint(JNIEnv* env, jobject object, jlong addr, jlong bodyA, jlong bodyB, jboolean collideConnected, jfloat groundAnchorAX, jfloat groundAnchorAY, jfloat groundAnchorBX, jfloat groundAnchorBY, jfloat localAnchorAX, jfloat localAnchorAY, jfloat localAnchorBX, jfloat localAnchorBY, jfloat lengthA, jfloat lengthB, jfloat ratio) {
 
 
-//@line:529
+//@line:530
 
 		b2World* world = (b2World*)addr;
 		b2PulleyJointDef def;
@@ -372,7 +373,7 @@ JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreatePulle
 JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateRevoluteJoint(JNIEnv* env, jobject object, jlong addr, jlong bodyA, jlong bodyB, jboolean collideConnected, jfloat localAnchorAX, jfloat localAnchorAY, jfloat localAnchorBX, jfloat localAnchorBY, jfloat referenceAngle, jboolean enableLimit, jfloat lowerAngle, jfloat upperAngle, jboolean enableMotor, jfloat motorSpeed, jfloat maxMotorTorque) {
 
 
-//@line:548
+//@line:549
 
 		b2World* world = (b2World*)addr;
 		b2RevoluteJointDef def;
@@ -396,7 +397,7 @@ JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateRevol
 JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateWeldJoint(JNIEnv* env, jobject object, jlong addr, jlong bodyA, jlong bodyB, jboolean collideConnected, jfloat localAnchorAX, jfloat localAnchorAY, jfloat localAnchorBX, jfloat localAnchorBY, jfloat referenceAngle) {
 
 
-//@line:567
+//@line:568
 
 		b2World* world = (b2World*)addr;
 		b2WeldJointDef def;
@@ -415,7 +416,7 @@ JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateWeldJ
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniDestroyJoint(JNIEnv* env, jobject object, jlong addr, jlong jointAddr) {
 
 
-//@line:590
+//@line:591
 
 		b2World* world = (b2World*)addr;
 		b2Joint* joint = (b2Joint*)jointAddr;
@@ -427,7 +428,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniDestroyJoint
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniStep(JNIEnv* env, jobject object, jlong addr, jfloat timeStep, jint velocityIterations, jint positionIterations) {
 
 
-//@line:604
+//@line:605
 
 		b2World* world = (b2World*)addr;
 		CustomContactFilter contactFilter(env, object);
@@ -444,7 +445,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniStep(JNIEnv*
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniClearForces(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:624
+//@line:625
 
 		b2World* world = (b2World*)addr;
 		world->ClearForces();
@@ -455,7 +456,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniClearForces(
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetWarmStarting(JNIEnv* env, jobject object, jlong addr, jboolean flag) {
 
 
-//@line:634
+//@line:635
 
 		b2World* world = (b2World*)addr;
 		world->SetWarmStarting(flag);
@@ -466,7 +467,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetWarmStart
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetContiousPhysics(JNIEnv* env, jobject object, jlong addr, jboolean flag) {
 
 
-//@line:644
+//@line:645
 
 		b2World* world = (b2World*)addr;
 		world->SetContinuousPhysics(flag);
@@ -477,7 +478,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetContiousP
 JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetProxyCount(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:654
+//@line:655
 
 		b2World* world = (b2World*)addr;
 		return world->GetProxyCount();
@@ -488,7 +489,7 @@ JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetProxyCoun
 JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetBodyCount(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:664
+//@line:665
 
 		b2World* world = (b2World*)addr;
 		return world->GetBodyCount();
@@ -499,7 +500,7 @@ JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetBodyCount
 JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetJointcount(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:674
+//@line:675
 
 		b2World* world = (b2World*)addr;
 		return world->GetJointCount();
@@ -510,7 +511,7 @@ JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetJointcoun
 JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetContactCount(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:684
+//@line:685
 
 		b2World* world = (b2World*)addr;
 		return world->GetContactCount();
@@ -521,7 +522,7 @@ JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetContactCo
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetGravity(JNIEnv* env, jobject object, jlong addr, jfloat gravityX, jfloat gravityY) {
 
 
-//@line:694
+//@line:695
 
 		b2World* world = (b2World*)addr;
 		world->SetGravity( b2Vec2( gravityX, gravityY ) );
@@ -533,7 +534,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetGravity(J
 	float* gravity = (float*)env->GetPrimitiveArrayCritical(obj_gravity, 0);
 
 
-//@line:710
+//@line:711
 
 		b2World* world = (b2World*)addr;
 		b2Vec2 g = world->GetGravity();
@@ -547,7 +548,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetGravity(J
 JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniIsLocked(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:722
+//@line:723
 
 		b2World* world = (b2World*)addr;
 		return world->IsLocked();
@@ -558,7 +559,7 @@ JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniIsLocked
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetAutoClearForces(JNIEnv* env, jobject object, jlong addr, jboolean flag) {
 
 
-//@line:732
+//@line:733
 
 		b2World* world = (b2World*)addr;
 		world->SetAutoClearForces(flag);
@@ -569,7 +570,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetAutoClear
 JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetAutoClearForces(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:742
+//@line:743
 
 		b2World* world = (b2World*)addr;
 		return world->GetAutoClearForces();
@@ -580,7 +581,7 @@ JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetAutoC
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniQueryAABB(JNIEnv* env, jobject object, jlong addr, jfloat lowX, jfloat lowY, jfloat upX, jfloat upY) {
 
 
-//@line:760
+//@line:761
 
 		b2World* world = (b2World*)addr;
 		b2AABB aabb;
@@ -597,7 +598,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetContactLi
 	long long* contacts = (long long*)env->GetPrimitiveArrayCritical(obj_contacts, 0);
 
 
-//@line:828
+//@line:829
 
 		b2World* world = (b2World*)addr;
 	
@@ -616,7 +617,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetContactLi
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniDispose(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:844
+//@line:845
 
 		b2World* world = (b2World*)(addr);
 		delete world;
@@ -627,7 +628,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniDispose(JNIE
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_setVelocityThreshold(JNIEnv* env, jclass clazz, jfloat threshold) {
 
 
-//@line:904
+//@line:905
 
 		b2_velocityThreshold = threshold;
 	
@@ -637,7 +638,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_setVelocityThre
 JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_World_getVelocityThreshold(JNIEnv* env, jclass clazz) {
 
 
-//@line:909
+//@line:910
 
 		return b2_velocityThreshold;
 	
@@ -647,7 +648,7 @@ JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_World_getVelocityTh
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniRayCast(JNIEnv* env, jobject object, jlong addr, jfloat aX, jfloat aY, jfloat bX, jfloat bY) {
 
 
-//@line:924
+//@line:925
 
 		b2World *world = (b2World*)addr;
 		CustomRayCastCallback callback( env, object );	
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.World.h b/gdx/jni/com.badlogic.gdx.physics.box2d.World.h
index e0ee6ec..989bb36 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.World.h
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.World.h
@@ -1,285 +1,285 @@
-/* DO NOT EDIT THIS FILE - it is machine generated */
-#include <jni.h>
-/* Header for class com_badlogic_gdx_physics_box2d_World */
-
-#ifndef _Included_com_badlogic_gdx_physics_box2d_World
-#define _Included_com_badlogic_gdx_physics_box2d_World
-#ifdef __cplusplus
-extern "C" {
-#endif
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    newWorld
- * Signature: (FFZ)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_newWorld
-  (JNIEnv *, jobject, jfloat, jfloat, jboolean);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    setUseDefaultContactFilter
- * Signature: (Z)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_setUseDefaultContactFilter
-  (JNIEnv *, jobject, jboolean);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniCreateBody
- * Signature: (JIFFFFFFFFZZZZZF)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateBody
-  (JNIEnv *, jobject, jlong, jint, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jboolean, jboolean, jboolean, jboolean, jboolean, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniDestroyBody
- * Signature: (JJ)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniDestroyBody
-  (JNIEnv *, jobject, jlong, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniCreateWheelJoint
- * Signature: (JJJZFFFFFFZFFFF)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateWheelJoint
-  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jboolean, jfloat, jfloat, jfloat, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniCreateRopeJoint
- * Signature: (JJJZFFFFF)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateRopeJoint
-  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniCreateDistanceJoint
- * Signature: (JJJZFFFFFFF)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateDistanceJoint
-  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniCreateFrictionJoint
- * Signature: (JJJZFFFFFF)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateFrictionJoint
-  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniCreateGearJoint
- * Signature: (JJJZJJF)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateGearJoint
-  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jlong, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniCreateMouseJoint
- * Signature: (JJJZFFFFF)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateMouseJoint
-  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniCreatePrismaticJoint
- * Signature: (JJJZFFFFFFFZFFZFF)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreatePrismaticJoint
-  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jboolean, jfloat, jfloat, jboolean, jfloat, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniCreatePulleyJoint
- * Signature: (JJJZFFFFFFFFFFF)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreatePulleyJoint
-  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniCreateRevoluteJoint
- * Signature: (JJJZFFFFFZFFZFF)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateRevoluteJoint
-  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat, jboolean, jfloat, jfloat, jboolean, jfloat, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniCreateWeldJoint
- * Signature: (JJJZFFFFF)J
- */
-JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateWeldJoint
-  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniDestroyJoint
- * Signature: (JJ)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniDestroyJoint
-  (JNIEnv *, jobject, jlong, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniStep
- * Signature: (JFII)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniStep
-  (JNIEnv *, jobject, jlong, jfloat, jint, jint);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniClearForces
- * Signature: (J)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniClearForces
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniSetWarmStarting
- * Signature: (JZ)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetWarmStarting
-  (JNIEnv *, jobject, jlong, jboolean);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniSetContiousPhysics
- * Signature: (JZ)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetContiousPhysics
-  (JNIEnv *, jobject, jlong, jboolean);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniGetProxyCount
- * Signature: (J)I
- */
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetProxyCount
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniGetBodyCount
- * Signature: (J)I
- */
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetBodyCount
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniGetJointcount
- * Signature: (J)I
- */
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetJointcount
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniGetContactCount
- * Signature: (J)I
- */
-JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetContactCount
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniSetGravity
- * Signature: (JFF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetGravity
-  (JNIEnv *, jobject, jlong, jfloat, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniGetGravity
- * Signature: (J[F)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetGravity
-  (JNIEnv *, jobject, jlong, jfloatArray);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniIsLocked
- * Signature: (J)Z
- */
-JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniIsLocked
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniSetAutoClearForces
- * Signature: (JZ)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetAutoClearForces
-  (JNIEnv *, jobject, jlong, jboolean);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniGetAutoClearForces
- * Signature: (J)Z
- */
-JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetAutoClearForces
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniQueryAABB
- * Signature: (JFFFF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniQueryAABB
-  (JNIEnv *, jobject, jlong, jfloat, jfloat, jfloat, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniGetContactList
- * Signature: (J[J)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetContactList
-  (JNIEnv *, jobject, jlong, jlongArray);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniDispose
- * Signature: (J)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniDispose
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    setVelocityThreshold
- * Signature: (F)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_setVelocityThreshold
-  (JNIEnv *, jclass, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    getVelocityThreshold
- * Signature: ()F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_World_getVelocityThreshold
-  (JNIEnv *, jclass);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_World
- * Method:    jniRayCast
- * Signature: (JFFFF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniRayCast
-  (JNIEnv *, jobject, jlong, jfloat, jfloat, jfloat, jfloat);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
+/* DO NOT EDIT THIS FILE - it is machine generated */
+#include <jni.h>
+/* Header for class com_badlogic_gdx_physics_box2d_World */
+
+#ifndef _Included_com_badlogic_gdx_physics_box2d_World
+#define _Included_com_badlogic_gdx_physics_box2d_World
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    newWorld
+ * Signature: (FFZ)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_newWorld
+  (JNIEnv *, jobject, jfloat, jfloat, jboolean);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    setUseDefaultContactFilter
+ * Signature: (Z)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_setUseDefaultContactFilter
+  (JNIEnv *, jobject, jboolean);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniCreateBody
+ * Signature: (JIFFFFFFFFZZZZZF)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateBody
+  (JNIEnv *, jobject, jlong, jint, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jboolean, jboolean, jboolean, jboolean, jboolean, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniDestroyBody
+ * Signature: (JJ)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniDestroyBody
+  (JNIEnv *, jobject, jlong, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniCreateWheelJoint
+ * Signature: (JJJZFFFFFFZFFFF)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateWheelJoint
+  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jboolean, jfloat, jfloat, jfloat, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniCreateRopeJoint
+ * Signature: (JJJZFFFFF)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateRopeJoint
+  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniCreateDistanceJoint
+ * Signature: (JJJZFFFFFFF)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateDistanceJoint
+  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniCreateFrictionJoint
+ * Signature: (JJJZFFFFFF)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateFrictionJoint
+  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniCreateGearJoint
+ * Signature: (JJJZJJF)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateGearJoint
+  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jlong, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniCreateMouseJoint
+ * Signature: (JJJZFFFFF)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateMouseJoint
+  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniCreatePrismaticJoint
+ * Signature: (JJJZFFFFFFFZFFZFF)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreatePrismaticJoint
+  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jboolean, jfloat, jfloat, jboolean, jfloat, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniCreatePulleyJoint
+ * Signature: (JJJZFFFFFFFFFFF)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreatePulleyJoint
+  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniCreateRevoluteJoint
+ * Signature: (JJJZFFFFFZFFZFF)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateRevoluteJoint
+  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat, jboolean, jfloat, jfloat, jboolean, jfloat, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniCreateWeldJoint
+ * Signature: (JJJZFFFFF)J
+ */
+JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateWeldJoint
+  (JNIEnv *, jobject, jlong, jlong, jlong, jboolean, jfloat, jfloat, jfloat, jfloat, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniDestroyJoint
+ * Signature: (JJ)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniDestroyJoint
+  (JNIEnv *, jobject, jlong, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniStep
+ * Signature: (JFII)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniStep
+  (JNIEnv *, jobject, jlong, jfloat, jint, jint);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniClearForces
+ * Signature: (J)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniClearForces
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniSetWarmStarting
+ * Signature: (JZ)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetWarmStarting
+  (JNIEnv *, jobject, jlong, jboolean);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniSetContiousPhysics
+ * Signature: (JZ)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetContiousPhysics
+  (JNIEnv *, jobject, jlong, jboolean);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniGetProxyCount
+ * Signature: (J)I
+ */
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetProxyCount
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniGetBodyCount
+ * Signature: (J)I
+ */
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetBodyCount
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniGetJointcount
+ * Signature: (J)I
+ */
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetJointcount
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniGetContactCount
+ * Signature: (J)I
+ */
+JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetContactCount
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniSetGravity
+ * Signature: (JFF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetGravity
+  (JNIEnv *, jobject, jlong, jfloat, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniGetGravity
+ * Signature: (J[F)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetGravity
+  (JNIEnv *, jobject, jlong, jfloatArray);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniIsLocked
+ * Signature: (J)Z
+ */
+JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniIsLocked
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniSetAutoClearForces
+ * Signature: (JZ)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetAutoClearForces
+  (JNIEnv *, jobject, jlong, jboolean);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniGetAutoClearForces
+ * Signature: (J)Z
+ */
+JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetAutoClearForces
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniQueryAABB
+ * Signature: (JFFFF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniQueryAABB
+  (JNIEnv *, jobject, jlong, jfloat, jfloat, jfloat, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniGetContactList
+ * Signature: (J[J)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetContactList
+  (JNIEnv *, jobject, jlong, jlongArray);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniDispose
+ * Signature: (J)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniDispose
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    setVelocityThreshold
+ * Signature: (F)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_setVelocityThreshold
+  (JNIEnv *, jclass, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    getVelocityThreshold
+ * Signature: ()F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_World_getVelocityThreshold
+  (JNIEnv *, jclass);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_World
+ * Method:    jniRayCast
+ * Signature: (JFFFF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniRayCast
+  (JNIEnv *, jobject, jlong, jfloat, jfloat, jfloat, jfloat);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.joints.DistanceJoint.h b/gdx/jni/com.badlogic.gdx.physics.box2d.joints.DistanceJoint.h
index 928e21e..fe62d95 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.joints.DistanceJoint.h
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.joints.DistanceJoint.h
@@ -1,61 +1,61 @@
-/* DO NOT EDIT THIS FILE - it is machine generated */
-#include <jni.h>
-/* Header for class com_badlogic_gdx_physics_box2d_joints_DistanceJoint */
-
-#ifndef _Included_com_badlogic_gdx_physics_box2d_joints_DistanceJoint
-#define _Included_com_badlogic_gdx_physics_box2d_joints_DistanceJoint
-#ifdef __cplusplus
-extern "C" {
-#endif
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_DistanceJoint
- * Method:    jniSetLength
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_DistanceJoint_jniSetLength
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_DistanceJoint
- * Method:    jniGetLength
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_DistanceJoint_jniGetLength
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_DistanceJoint
- * Method:    jniSetFrequency
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_DistanceJoint_jniSetFrequency
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_DistanceJoint
- * Method:    jniGetFrequency
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_DistanceJoint_jniGetFrequency
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_DistanceJoint
- * Method:    jniSetDampingRatio
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_DistanceJoint_jniSetDampingRatio
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_DistanceJoint
- * Method:    jniGetDampingRatio
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_DistanceJoint_jniGetDampingRatio
-  (JNIEnv *, jobject, jlong);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
+/* DO NOT EDIT THIS FILE - it is machine generated */
+#include <jni.h>
+/* Header for class com_badlogic_gdx_physics_box2d_joints_DistanceJoint */
+
+#ifndef _Included_com_badlogic_gdx_physics_box2d_joints_DistanceJoint
+#define _Included_com_badlogic_gdx_physics_box2d_joints_DistanceJoint
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_DistanceJoint
+ * Method:    jniSetLength
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_DistanceJoint_jniSetLength
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_DistanceJoint
+ * Method:    jniGetLength
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_DistanceJoint_jniGetLength
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_DistanceJoint
+ * Method:    jniSetFrequency
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_DistanceJoint_jniSetFrequency
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_DistanceJoint
+ * Method:    jniGetFrequency
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_DistanceJoint_jniGetFrequency
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_DistanceJoint
+ * Method:    jniSetDampingRatio
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_DistanceJoint_jniSetDampingRatio
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_DistanceJoint
+ * Method:    jniGetDampingRatio
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_DistanceJoint_jniGetDampingRatio
+  (JNIEnv *, jobject, jlong);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.joints.FrictionJoint.h b/gdx/jni/com.badlogic.gdx.physics.box2d.joints.FrictionJoint.h
index 314a8a8..c4348bd 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.joints.FrictionJoint.h
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.joints.FrictionJoint.h
@@ -1,45 +1,45 @@
-/* DO NOT EDIT THIS FILE - it is machine generated */
-#include <jni.h>
-/* Header for class com_badlogic_gdx_physics_box2d_joints_FrictionJoint */
-
-#ifndef _Included_com_badlogic_gdx_physics_box2d_joints_FrictionJoint
-#define _Included_com_badlogic_gdx_physics_box2d_joints_FrictionJoint
-#ifdef __cplusplus
-extern "C" {
-#endif
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_FrictionJoint
- * Method:    jniSetMaxForce
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_FrictionJoint_jniSetMaxForce
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_FrictionJoint
- * Method:    jniGetMaxForce
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_FrictionJoint_jniGetMaxForce
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_FrictionJoint
- * Method:    jniSetMaxTorque
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_FrictionJoint_jniSetMaxTorque
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_FrictionJoint
- * Method:    jniGetMaxTorque
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_FrictionJoint_jniGetMaxTorque
-  (JNIEnv *, jobject, jlong);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
+/* DO NOT EDIT THIS FILE - it is machine generated */
+#include <jni.h>
+/* Header for class com_badlogic_gdx_physics_box2d_joints_FrictionJoint */
+
+#ifndef _Included_com_badlogic_gdx_physics_box2d_joints_FrictionJoint
+#define _Included_com_badlogic_gdx_physics_box2d_joints_FrictionJoint
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_FrictionJoint
+ * Method:    jniSetMaxForce
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_FrictionJoint_jniSetMaxForce
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_FrictionJoint
+ * Method:    jniGetMaxForce
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_FrictionJoint_jniGetMaxForce
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_FrictionJoint
+ * Method:    jniSetMaxTorque
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_FrictionJoint_jniSetMaxTorque
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_FrictionJoint
+ * Method:    jniGetMaxTorque
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_FrictionJoint_jniGetMaxTorque
+  (JNIEnv *, jobject, jlong);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.joints.GearJoint.h b/gdx/jni/com.badlogic.gdx.physics.box2d.joints.GearJoint.h
index bc3a8dc..cc7909c 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.joints.GearJoint.h
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.joints.GearJoint.h
@@ -1,29 +1,29 @@
-/* DO NOT EDIT THIS FILE - it is machine generated */
-#include <jni.h>
-/* Header for class com_badlogic_gdx_physics_box2d_joints_GearJoint */
-
-#ifndef _Included_com_badlogic_gdx_physics_box2d_joints_GearJoint
-#define _Included_com_badlogic_gdx_physics_box2d_joints_GearJoint
-#ifdef __cplusplus
-extern "C" {
-#endif
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_GearJoint
- * Method:    jniSetRatio
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_GearJoint_jniSetRatio
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_GearJoint
- * Method:    jniGetRatio
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_GearJoint_jniGetRatio
-  (JNIEnv *, jobject, jlong);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
+/* DO NOT EDIT THIS FILE - it is machine generated */
+#include <jni.h>
+/* Header for class com_badlogic_gdx_physics_box2d_joints_GearJoint */
+
+#ifndef _Included_com_badlogic_gdx_physics_box2d_joints_GearJoint
+#define _Included_com_badlogic_gdx_physics_box2d_joints_GearJoint
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_GearJoint
+ * Method:    jniSetRatio
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_GearJoint_jniSetRatio
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_GearJoint
+ * Method:    jniGetRatio
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_GearJoint_jniGetRatio
+  (JNIEnv *, jobject, jlong);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.joints.PulleyJoint.h b/gdx/jni/com.badlogic.gdx.physics.box2d.joints.PulleyJoint.h
index ad1f100..fefbd1b 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.joints.PulleyJoint.h
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.joints.PulleyJoint.h
@@ -1,53 +1,53 @@
-/* DO NOT EDIT THIS FILE - it is machine generated */
-#include <jni.h>
-/* Header for class com_badlogic_gdx_physics_box2d_joints_PulleyJoint */
-
-#ifndef _Included_com_badlogic_gdx_physics_box2d_joints_PulleyJoint
-#define _Included_com_badlogic_gdx_physics_box2d_joints_PulleyJoint
-#ifdef __cplusplus
-extern "C" {
-#endif
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_PulleyJoint
- * Method:    jniGetGroundAnchorA
- * Signature: (J[F)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_PulleyJoint_jniGetGroundAnchorA
-  (JNIEnv *, jobject, jlong, jfloatArray);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_PulleyJoint
- * Method:    jniGetGroundAnchorB
- * Signature: (J[F)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_PulleyJoint_jniGetGroundAnchorB
-  (JNIEnv *, jobject, jlong, jfloatArray);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_PulleyJoint
- * Method:    jniGetLength1
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_PulleyJoint_jniGetLength1
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_PulleyJoint
- * Method:    jniGetLength2
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_PulleyJoint_jniGetLength2
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_PulleyJoint
- * Method:    jniGetRatio
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_PulleyJoint_jniGetRatio
-  (JNIEnv *, jobject, jlong);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
+/* DO NOT EDIT THIS FILE - it is machine generated */
+#include <jni.h>
+/* Header for class com_badlogic_gdx_physics_box2d_joints_PulleyJoint */
+
+#ifndef _Included_com_badlogic_gdx_physics_box2d_joints_PulleyJoint
+#define _Included_com_badlogic_gdx_physics_box2d_joints_PulleyJoint
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_PulleyJoint
+ * Method:    jniGetGroundAnchorA
+ * Signature: (J[F)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_PulleyJoint_jniGetGroundAnchorA
+  (JNIEnv *, jobject, jlong, jfloatArray);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_PulleyJoint
+ * Method:    jniGetGroundAnchorB
+ * Signature: (J[F)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_PulleyJoint_jniGetGroundAnchorB
+  (JNIEnv *, jobject, jlong, jfloatArray);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_PulleyJoint
+ * Method:    jniGetLength1
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_PulleyJoint_jniGetLength1
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_PulleyJoint
+ * Method:    jniGetLength2
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_PulleyJoint_jniGetLength2
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_PulleyJoint
+ * Method:    jniGetRatio
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_PulleyJoint_jniGetRatio
+  (JNIEnv *, jobject, jlong);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.joints.RevoluteJoint.h b/gdx/jni/com.badlogic.gdx.physics.box2d.joints.RevoluteJoint.h
index 4d3f3c7..dd3545f 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.joints.RevoluteJoint.h
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.joints.RevoluteJoint.h
@@ -1,117 +1,117 @@
-/* DO NOT EDIT THIS FILE - it is machine generated */
-#include <jni.h>
-/* Header for class com_badlogic_gdx_physics_box2d_joints_RevoluteJoint */
-
-#ifndef _Included_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
-#define _Included_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
-#ifdef __cplusplus
-extern "C" {
-#endif
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
- * Method:    jniGetJointAngle
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniGetJointAngle
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
- * Method:    jniGetJointSpeed
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniGetJointSpeed
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
- * Method:    jniIsLimitEnabled
- * Signature: (J)Z
- */
-JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniIsLimitEnabled
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
- * Method:    jniEnableLimit
- * Signature: (JZ)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniEnableLimit
-  (JNIEnv *, jobject, jlong, jboolean);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
- * Method:    jniGetLowerLimit
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniGetLowerLimit
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
- * Method:    jniGetUpperLimit
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniGetUpperLimit
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
- * Method:    jniSetLimits
- * Signature: (JFF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniSetLimits
-  (JNIEnv *, jobject, jlong, jfloat, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
- * Method:    jniIsMotorEnabled
- * Signature: (J)Z
- */
-JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniIsMotorEnabled
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
- * Method:    jniEnableMotor
- * Signature: (JZ)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniEnableMotor
-  (JNIEnv *, jobject, jlong, jboolean);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
- * Method:    jniSetMotorSpeed
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniSetMotorSpeed
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
- * Method:    jniGetMotorSpeed
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniGetMotorSpeed
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
- * Method:    jniSetMaxMotorTorque
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniSetMaxMotorTorque
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
- * Method:    jniGetMotorTorque
- * Signature: (JF)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniGetMotorTorque
-  (JNIEnv *, jobject, jlong, jfloat);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
+/* DO NOT EDIT THIS FILE - it is machine generated */
+#include <jni.h>
+/* Header for class com_badlogic_gdx_physics_box2d_joints_RevoluteJoint */
+
+#ifndef _Included_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
+#define _Included_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
+ * Method:    jniGetJointAngle
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniGetJointAngle
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
+ * Method:    jniGetJointSpeed
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniGetJointSpeed
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
+ * Method:    jniIsLimitEnabled
+ * Signature: (J)Z
+ */
+JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniIsLimitEnabled
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
+ * Method:    jniEnableLimit
+ * Signature: (JZ)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniEnableLimit
+  (JNIEnv *, jobject, jlong, jboolean);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
+ * Method:    jniGetLowerLimit
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniGetLowerLimit
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
+ * Method:    jniGetUpperLimit
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniGetUpperLimit
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
+ * Method:    jniSetLimits
+ * Signature: (JFF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniSetLimits
+  (JNIEnv *, jobject, jlong, jfloat, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
+ * Method:    jniIsMotorEnabled
+ * Signature: (J)Z
+ */
+JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniIsMotorEnabled
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
+ * Method:    jniEnableMotor
+ * Signature: (JZ)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniEnableMotor
+  (JNIEnv *, jobject, jlong, jboolean);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
+ * Method:    jniSetMotorSpeed
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniSetMotorSpeed
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
+ * Method:    jniGetMotorSpeed
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniGetMotorSpeed
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
+ * Method:    jniSetMaxMotorTorque
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniSetMaxMotorTorque
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_RevoluteJoint
+ * Method:    jniGetMotorTorque
+ * Signature: (JF)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RevoluteJoint_jniGetMotorTorque
+  (JNIEnv *, jobject, jlong, jfloat);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.joints.RopeJoint.h b/gdx/jni/com.badlogic.gdx.physics.box2d.joints.RopeJoint.h
index d5b4198..115b31f 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.joints.RopeJoint.h
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.joints.RopeJoint.h
@@ -1,29 +1,29 @@
-/* DO NOT EDIT THIS FILE - it is machine generated */
-#include <jni.h>
-/* Header for class com_badlogic_gdx_physics_box2d_joints_RopeJoint */
-
-#ifndef _Included_com_badlogic_gdx_physics_box2d_joints_RopeJoint
-#define _Included_com_badlogic_gdx_physics_box2d_joints_RopeJoint
-#ifdef __cplusplus
-extern "C" {
-#endif
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_RopeJoint
- * Method:    jniGetMaxLength
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RopeJoint_jniGetMaxLength
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_RopeJoint
- * Method:    jniSetMaxLength
- * Signature: (JF)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RopeJoint_jniSetMaxLength
-  (JNIEnv *, jobject, jlong, jfloat);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
+/* DO NOT EDIT THIS FILE - it is machine generated */
+#include <jni.h>
+/* Header for class com_badlogic_gdx_physics_box2d_joints_RopeJoint */
+
+#ifndef _Included_com_badlogic_gdx_physics_box2d_joints_RopeJoint
+#define _Included_com_badlogic_gdx_physics_box2d_joints_RopeJoint
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_RopeJoint
+ * Method:    jniGetMaxLength
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RopeJoint_jniGetMaxLength
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_RopeJoint
+ * Method:    jniSetMaxLength
+ * Signature: (JF)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_RopeJoint_jniSetMaxLength
+  (JNIEnv *, jobject, jlong, jfloat);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.joints.WheelJoint.h b/gdx/jni/com.badlogic.gdx.physics.box2d.joints.WheelJoint.h
index 84acf6a..546f55f 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.joints.WheelJoint.h
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.joints.WheelJoint.h
@@ -1,117 +1,117 @@
-/* DO NOT EDIT THIS FILE - it is machine generated */
-#include <jni.h>
-/* Header for class com_badlogic_gdx_physics_box2d_joints_WheelJoint */
-
-#ifndef _Included_com_badlogic_gdx_physics_box2d_joints_WheelJoint
-#define _Included_com_badlogic_gdx_physics_box2d_joints_WheelJoint
-#ifdef __cplusplus
-extern "C" {
-#endif
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
- * Method:    jniGetJointTranslation
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniGetJointTranslation
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
- * Method:    jniGetJointSpeed
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniGetJointSpeed
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
- * Method:    jniIsMotorEnabled
- * Signature: (J)Z
- */
-JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniIsMotorEnabled
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
- * Method:    jniEnableMotor
- * Signature: (JZ)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniEnableMotor
-  (JNIEnv *, jobject, jlong, jboolean);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
- * Method:    jniSetMotorSpeed
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniSetMotorSpeed
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
- * Method:    jniGetMotorSpeed
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniGetMotorSpeed
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
- * Method:    jniSetMaxMotorTorque
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniSetMaxMotorTorque
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
- * Method:    jniGetMaxMotorTorque
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniGetMaxMotorTorque
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
- * Method:    jniGetMotorTorque
- * Signature: (JF)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniGetMotorTorque
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
- * Method:    jniSetSpringFrequencyHz
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniSetSpringFrequencyHz
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
- * Method:    jniGetSpringFrequencyHz
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniGetSpringFrequencyHz
-  (JNIEnv *, jobject, jlong);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
- * Method:    jniSetSpringDampingRatio
- * Signature: (JF)V
- */
-JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniSetSpringDampingRatio
-  (JNIEnv *, jobject, jlong, jfloat);
-
-/*
- * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
- * Method:    jniGetSpringDampingRatio
- * Signature: (J)F
- */
-JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniGetSpringDampingRatio
-  (JNIEnv *, jobject, jlong);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
+/* DO NOT EDIT THIS FILE - it is machine generated */
+#include <jni.h>
+/* Header for class com_badlogic_gdx_physics_box2d_joints_WheelJoint */
+
+#ifndef _Included_com_badlogic_gdx_physics_box2d_joints_WheelJoint
+#define _Included_com_badlogic_gdx_physics_box2d_joints_WheelJoint
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
+ * Method:    jniGetJointTranslation
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniGetJointTranslation
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
+ * Method:    jniGetJointSpeed
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniGetJointSpeed
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
+ * Method:    jniIsMotorEnabled
+ * Signature: (J)Z
+ */
+JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniIsMotorEnabled
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
+ * Method:    jniEnableMotor
+ * Signature: (JZ)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniEnableMotor
+  (JNIEnv *, jobject, jlong, jboolean);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
+ * Method:    jniSetMotorSpeed
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniSetMotorSpeed
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
+ * Method:    jniGetMotorSpeed
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniGetMotorSpeed
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
+ * Method:    jniSetMaxMotorTorque
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniSetMaxMotorTorque
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
+ * Method:    jniGetMaxMotorTorque
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniGetMaxMotorTorque
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
+ * Method:    jniGetMotorTorque
+ * Signature: (JF)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniGetMotorTorque
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
+ * Method:    jniSetSpringFrequencyHz
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniSetSpringFrequencyHz
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
+ * Method:    jniGetSpringFrequencyHz
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniGetSpringFrequencyHz
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
+ * Method:    jniSetSpringDampingRatio
+ * Signature: (JF)V
+ */
+JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniSetSpringDampingRatio
+  (JNIEnv *, jobject, jlong, jfloat);
+
+/*
+ * Class:     com_badlogic_gdx_physics_box2d_joints_WheelJoint
+ * Method:    jniGetSpringDampingRatio
+ * Signature: (J)F
+ */
+JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_joints_WheelJoint_jniGetSpringDampingRatio
+  (JNIEnv *, jobject, jlong);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/gdx/src/com/badlogic/gdx/graphics/TextureDict.java b/gdx/src/com/badlogic/gdx/graphics/TextureDict.java
new file mode 100644
index 0000000..bedea20
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/TextureDict.java
@@ -0,0 +1,82 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics;
+
+import com.badlogic.gdx.Files.FileType;
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.Texture.TextureFilter;
+import com.badlogic.gdx.graphics.Texture.TextureWrap;
+import com.badlogic.gdx.utils.ObjectMap;
+
+/** <p>
+ * A texture dictionary is used to track the usage of your textures and supply a single point of access for texture resources. It
+ * stores {@link TextureRef}s by their path. If you need to load the same texture in different parts of your application it will
+ * only be loaded into memory once by the dictionary.
+ * </p>
+ * @deprecated
+ * @author Dave Clayton <contact@redskyforge.com> */
+public class TextureDict {
+
+	private static ObjectMap<String, TextureRef> sDictionary = new ObjectMap<String, TextureRef>();
+
+	/** Loads a new texture into the dictionary as a reference counted {@link TextureRef}.
+	 * @param path the path to the texture image.
+	 * @return the {@TextureRef} representing the texture. */
+	public static TextureRef loadTexture (String path) {
+		return loadTexture(path, TextureFilter.MipMap, TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge);
+	}
+
+	/** Loads a new texture into the dictionary as a reference counted {@link TextureRef}.
+	 * @param path the path to the texture image.
+	 * @param minFilter minFilter {@link TextureFilter}.
+	 * @param magFilter magFilter {@link TextureFilter}.
+	 * @param uwrap u-wrapping.
+	 * @param vwrap v-wrapping.
+	 * @return the {@TextureRef} representing the texture. */
+	public static TextureRef loadTexture (String path, TextureFilter minFilter, TextureFilter magFilter, TextureWrap uwrap,
+		TextureWrap vwrap) {
+		if (sDictionary.containsKey(path)) {
+			TextureRef ref = sDictionary.get(path);
+			ref.addRef();
+			return ref;
+		}
+		// load new texture
+		FileHandle texFile = Gdx.app.getFiles().getFileHandle(path, FileType.Internal);
+		Texture newTex = new Texture(texFile, minFilter.isMipMap() || magFilter.isMipMap() ? true : false);
+		newTex.setFilter(minFilter, magFilter);
+		newTex.setWrap(uwrap, vwrap);
+		TextureRef ref = new TextureRef(path, newTex);
+		sDictionary.put(path, ref);
+		return ref;
+	}
+
+	/** Removes a texture from the dictionary. In general you should probably not use this - use {@link TextureRef#unload()}
+	 * instead.
+	 * @param path to the texture. */
+	public static void removeTexture (String path) {
+		sDictionary.remove(path);
+	}
+
+	/** Unloads all of the currently managed textures. */
+	public static void unloadAll () {
+		for (TextureRef tex : sDictionary.values()) {
+			tex.dispose();
+		}
+		sDictionary.clear();
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/TextureRef.java b/gdx/src/com/badlogic/gdx/graphics/TextureRef.java
new file mode 100644
index 0000000..7bbbe75
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/TextureRef.java
@@ -0,0 +1,69 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics;
+
+/** <p>
+ * A reference counted wrapper for a {@link Texture}. TextureRefs are managed by the {@link TextureDict}.
+ * </p>
+ * @deprecated
+ * @author Dave Clayton <contact@redskyforge.com> */
+public class TextureRef {
+	public String Name;
+	private int mRefCount;
+	private Texture mTexture;
+
+	/** Create a new TextureRef with the given name and texture.
+	 * @param name The texture's name, typically its filesystem path.
+	 * @param texture The texture it reference counts. */
+	public TextureRef (String name, Texture texture) {
+		Name = name;
+		mTexture = texture;
+		mRefCount = 1;
+	}
+
+	/** Adds a reference to the texture. */
+	public void addRef () {
+		mRefCount++;
+	}
+
+	/** Removes a reference to the texture. If the internal reference count reaches 0, the texture is disposed.
+	 * @return the new reference count. */
+	public int unload () {
+		if (--mRefCount == 0) {
+			mTexture.dispose();
+			mTexture = null;
+			// Note: This doesn't seem the best way to do this, but it works. Re-factoring welcome :)
+			TextureDict.removeTexture(Name);
+		}
+		return mRefCount;
+	}
+
+	public void dispose () {
+		mTexture.dispose();
+	}
+
+	/** Binds the texture in OpenGL. */
+	public void bind () {
+		mTexture.bind();
+	}
+
+	/** Gets the wrapped texture.
+	 * @return the texture. */
+	public Texture get () {
+		return mTexture;
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java b/gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
index 101c7fb..f12fae1 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
@@ -582,6 +582,7 @@ public class TextureAtlas implements Disposable {
 
 		public void flip (boolean x, boolean y) {
 			// Flip texture.
+
 			super.flip(x, y);
 
 			float oldOriginX = getOriginX();
diff --git a/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java b/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java
index bd1cf61..9c30d19 100644
--- a/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java
+++ b/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java
@@ -80,7 +80,9 @@ public class ShapeRenderer {
 	/** Shape types to be used with {@link #begin(ShapeType)}.
 	 * @author mzechner, stbachmann */
 	public enum ShapeType {
-		Point(GL10.GL_POINTS), Line(GL10.GL_LINES), Filled(GL10.GL_TRIANGLES);
+		Point(GL10.GL_POINTS),
+		Line(GL10.GL_LINES),
+		Filled(GL10.GL_TRIANGLES);
 
 		private final int glType;
 
@@ -92,7 +94,7 @@ public class ShapeRenderer {
 			return glType;
 		}
 	}
-
+	
 	ImmediateModeRenderer renderer;
 	boolean matrixDirty = false;
 	Matrix4 projView = new Matrix4();
@@ -114,7 +116,7 @@ public class ShapeRenderer {
 		projView.setToOrtho2D(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		matrixDirty = true;
 	}
-
+	
 	/** Sets the {@link Color} to be used by shapes.
 	 * @param color */
 	public void setColor (Color color) {
@@ -183,7 +185,7 @@ public class ShapeRenderer {
 		transform.scale(scaleX, scaleY, scaleZ);
 		matrixDirty = true;
 	}
-
+	
 	/** Starts a new batch of shapes. All shapes within the batch have to have the type specified. E.g. if {@link ShapeType#Point}
 	 * is specified, only call #point().
 	 * 
@@ -202,12 +204,12 @@ public class ShapeRenderer {
 		}
 		renderer.begin(combined, currType.getGlType());
 	}
-
+	
 	/** Draws a point. The {@link ShapeType} passed to begin has to be {@link ShapeType#Point}.
 	 * @param x
 	 * @param y
 	 * @param z */
-	public void point (float x, float y, float z) {
+	public void point(float x, float y, float z){
 		if (currType != ShapeType.Point) throw new GdxRuntimeException("Must call begin(ShapeType.Point)");
 		checkDirty();
 		checkFlush(1);
@@ -222,7 +224,7 @@ public class ShapeRenderer {
 	 * @param x2
 	 * @param y2
 	 * @param z2 */
-	public void line (float x, float y, float z, float x2, float y2, float z2) {
+	public void line(float x, float y, float z, float x2, float y2, float z2){
 		if (currType != ShapeType.Line) throw new GdxRuntimeException("Must call begin(ShapeType.Line)");
 		checkDirty();
 		checkFlush(2);
@@ -231,13 +233,13 @@ public class ShapeRenderer {
 		renderer.color(color.r, color.g, color.b, color.a);
 		renderer.vertex(x2, y2, z2);
 	}
-
+	
 	/** Draws a line in the x/y plane. The {@link ShapeType} passed to begin has to be {@link ShapeType#Line}.
 	 * @param x
 	 * @param y
 	 * @param x2
 	 * @param y2 */
-	public void line (float x, float y, float x2, float y2) {
+	public void line(float x, float y, float x2, float y2){
 		if (currType != ShapeType.Line) throw new GdxRuntimeException("Must call begin(ShapeType.Line)");
 		checkDirty();
 		checkFlush(2);
@@ -246,8 +248,26 @@ public class ShapeRenderer {
 		renderer.color(color.r, color.g, color.b, color.a);
 		renderer.vertex(x2, y2, 0);
 	}
-
-	public void curve (float x1, float y1, float cx1, float cy1, float cx2, float cy2, float x2, float y2, int segments) {
+	
+	/** Draws a line in the x/y plane. The {@link ShapeType} passed to begin has to be {@link ShapeType#Line}. The line
+	 * is drawn with 2 colors interpolated between start & end point.
+	 * @param x
+	 * @param y
+	 * @param x2
+	 * @param y2 
+	 * @param c1 Color at start of the line 
+	 * @param c2 Color at end of the line */
+	public void line(float x, float y, float x2, float y2, Color c1, Color c2){
+		if (currType != ShapeType.Line) throw new GdxRuntimeException("Must call begin(ShapeType.Line)");
+		checkDirty();
+		checkFlush(2);
+		renderer.color(c1.r, c1.g, c1.b, c1.a);
+		renderer.vertex(x, y, 0);
+		renderer.color(c2.r, c2.g, c2.b, c2.a);
+		renderer.vertex(x2, y2, 0);
+	}
+	
+	public void curve(float x1, float y1, float cx1, float cy1, float cx2, float cy2, float x2, float y2, int segments){
 		if (currType != ShapeType.Line) throw new GdxRuntimeException("Must call begin(ShapeType.Line)");
 		checkDirty();
 		checkFlush(segments * 2 + 2);
@@ -297,28 +317,29 @@ public class ShapeRenderer {
 		renderer.color(color.r, color.g, color.b, color.a);
 		renderer.vertex(x2, y2, 0);
 	}
-
-	public void triangle (float x1, float y1, float x2, float y2, float x3, float y3) {
-		if (currType != ShapeType.Filled && currType != ShapeType.Line)
+	
+	public void triangle(float x1, float y1, float x2, float y2, float x3, float y3){
+		if (currType != ShapeType.Filled && currType != ShapeType.Line) 
 			throw new GdxRuntimeException("Must call begin(ShapeType.Filled) or begin(ShapeType.Line)");
 		checkDirty();
 		checkFlush(6);
-		if (currType == ShapeType.Line) {
+		if(currType == ShapeType.Line){
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x1, y1, 0);
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x2, y2, 0);
-
+	
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x2, y2, 0);
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x3, y3, 0);
-
+	
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x3, y3, 0);
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x1, y1, 0);
-		} else {
+		}
+		else {
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x1, y1, 0);
 			renderer.color(color.r, color.g, color.b, color.a);
@@ -327,41 +348,42 @@ public class ShapeRenderer {
 			renderer.vertex(x3, y3, 0);
 		}
 	}
-
+	
 	/** Draws a rectangle in the x/y plane. The x and y coordinate specify the bottom left corner of the rectangle. The
-	 * {@link ShapeType} passed to begin has to be {@link ShapeType#Filled} or {@link ShapeType#Line}.
+	 * {@link ShapeType} passed to begin has to be {@link ShapeType#Filled} or  {@link ShapeType#Line}.
 	 * @param x
 	 * @param y
 	 * @param width
 	 * @param height */
-	public void rect (float x, float y, float width, float height) {
-		if (currType != ShapeType.Filled && currType != ShapeType.Line)
+	public void rect(float x, float y, float width, float height){
+		if (currType != ShapeType.Filled && currType != ShapeType.Line) 
 			throw new GdxRuntimeException("Must call begin(ShapeType.Filled) or begin(ShapeType.Line)");
-
+		
 		checkDirty();
 		checkFlush(8);
-
-		if (currType == ShapeType.Line) {
+		
+		if(currType == ShapeType.Line){
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x, y, 0);
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x + width, y, 0);
-
+	
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x + width, y, 0);
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x + width, y + height, 0);
-
+	
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x + width, y + height, 0);
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x, y + height, 0);
-
+	
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x, y + height, 0);
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x, y, 0);
-		} else {
+		}
+		else {
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x, y, 0);
 			renderer.color(color.r, color.g, color.b, color.a);
@@ -377,45 +399,47 @@ public class ShapeRenderer {
 			renderer.vertex(x, y, 0);
 		}
 	}
-
+	
+	
 	/** Draws a rectangle in the x/y plane. The x and y coordinate specify the bottom left corner of the rectangle. The
-	 * {@link ShapeType} passed to begin has to be {@link ShapeType#Filled} or {@link ShapeType#Line}.
+	 * {@link ShapeType} passed to begin has to be {@link ShapeType#Filled} or  {@link ShapeType#Line}.
 	 * @param x
 	 * @param y
 	 * @param width
-	 * @param height
-	 * @param col1 The color at (x, y)
+	 * @param height 
+	 * @param col1 The color at (x, y) 
 	 * @param col2 The color at (x + width, y)
 	 * @param col3 The color at (x + width, y + height)
 	 * @param col4 The color at (x, y + height) */
-	public void rect (float x, float y, float width, float height, Color col1, Color col2, Color col3, Color col4) {
-		if (currType != ShapeType.Filled && currType != ShapeType.Line)
+	public void rect(float x, float y, float width, float height, Color col1, Color col2, Color col3, Color col4){
+		if (currType != ShapeType.Filled && currType != ShapeType.Line) 
 			throw new GdxRuntimeException("Must call begin(ShapeType.Filled) or begin(ShapeType.Line)");
-
+		
 		checkDirty();
 		checkFlush(8);
-
-		if (currType == ShapeType.Line) {
+		
+		if(currType == ShapeType.Line){
 			renderer.color(col1.r, col1.g, col1.b, col1.a);
 			renderer.vertex(x, y, 0);
 			renderer.color(col2.r, col2.g, col2.b, col2.a);
 			renderer.vertex(x + width, y, 0);
-
+	
 			renderer.color(col2.r, col2.g, col2.b, col2.a);
 			renderer.vertex(x + width, y, 0);
 			renderer.color(col3.r, col3.g, col3.b, col3.a);
 			renderer.vertex(x + width, y + height, 0);
-
+	
 			renderer.color(col3.r, col3.g, col3.b, col3.a);
 			renderer.vertex(x + width, y + height, 0);
 			renderer.color(col4.r, col4.g, col4.b, col4.a);
 			renderer.vertex(x, y + height, 0);
-
+	
 			renderer.color(col4.r, col4.g, col4.b, col4.a);
 			renderer.vertex(x, y + height, 0);
 			renderer.color(col1.r, col1.g, col1.b, col1.a);
 			renderer.vertex(x, y, 0);
-		} else {
+		}
+		else {
 			renderer.color(col1.r, col1.g, col1.b, col1.a);
 			renderer.vertex(x, y, 0);
 			renderer.color(col2.r, col2.g, col2.b, col2.a);
@@ -431,21 +455,21 @@ public class ShapeRenderer {
 			renderer.vertex(x, y, 0);
 		}
 	}
-
+	
 	/** Draws a box. The x, y and z coordinate specify the bottom left front corner of the rectangle. The {@link ShapeType} passed
 	 * to begin has to be {@link ShapeType#Line}.
 	 * @param x
 	 * @param y
 	 * @param width
 	 * @param height */
-	public void box (float x, float y, float z, float width, float height, float depth) {
+	public void box(float x, float y, float z, float width, float height, float depth){
 		if (currType != ShapeType.Line) throw new GdxRuntimeException("Must call begin(ShapeType.Line)");
-
+		
 		checkDirty();
 		checkFlush(16);
-
+		
 		depth = -depth;
-
+		
 		renderer.color(color.r, color.g, color.b, color.a);
 		renderer.vertex(x, y, z);
 		renderer.color(color.r, color.g, color.b, color.a);
@@ -513,15 +537,15 @@ public class ShapeRenderer {
 		line(x - radius, y - radius, x + radius, y + radius);
 		line(x - radius, y + radius, x + radius, y - radius);
 	}
-
+	
 	/** Calls {@link #circle(float, float, float, int)} by estimating the number of segments needed for a smooth circle. */
 	public void circle (float x, float y, float radius) {
 		circle(x, y, radius, (int)(6 * (float)Math.cbrt(radius)));
 	}
-
-	public void circle (float x, float y, float radius, int segments) {
+	
+	public void circle(float x, float y, float radius, int segments){
 		if (segments <= 0) throw new IllegalArgumentException("segments must be >= 0.");
-		if (currType != ShapeType.Filled && currType != ShapeType.Line)
+		if (currType != ShapeType.Filled && currType != ShapeType.Line) 
 			throw new GdxRuntimeException("Must call begin(ShapeType.Filled) or begin(ShapeType.Line)");
 		checkDirty();
 		checkFlush(segments * 2 + 2);
@@ -530,7 +554,7 @@ public class ShapeRenderer {
 		float cos = MathUtils.cos(angle);
 		float sin = MathUtils.sin(angle);
 		float cx = radius, cy = 0;
-		if (currType == ShapeType.Line) {
+		if(currType == ShapeType.Line){
 			for (int i = 0; i < segments; i++) {
 				renderer.color(color.r, color.g, color.b, color.a);
 				renderer.vertex(x + cx, y + cy, 0);
@@ -543,7 +567,8 @@ public class ShapeRenderer {
 			// Ensure the last segment is identical to the first.
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x + cx, y + cy, 0);
-		} else {
+		}
+		else {
 			segments--;
 			for (int i = 0; i < segments; i++) {
 				renderer.color(color.r, color.g, color.b, color.a);
@@ -562,22 +587,22 @@ public class ShapeRenderer {
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x + cx, y + cy, 0);
 		}
-
+		
 		float temp = cx;
 		cx = radius;
 		cy = 0;
 		renderer.color(color.r, color.g, color.b, color.a);
 		renderer.vertex(x + cx, y + cy, 0);
 	}
-
+	
 	/** Calls {@link #ellipse(float, float, float, float, int)} by estimating the number of segments needed for a smooth ellipse. */
-	public void ellipse (float x, float y, float width, float height) {
-		ellipse(x, y, width, height, (int)(12 * (float)Math.cbrt(Math.max(width * 0.5f, height * 0.5f))));
+	public void ellipse(float x, float y, float width, float height) {
+		ellipse(x, y, width, height, (int)(12 * (float) Math.cbrt(Math.max(width * 0.5f,  height * 0.5f))));
 	}
-
-	public void ellipse (float x, float y, float width, float height, int segments) {
+	
+	public void ellipse(float x, float y, float width, float height, int segments) {
 		if (segments <= 0) throw new IllegalArgumentException("segments must be >= 0.");
-		if (currType != ShapeType.Filled && currType != ShapeType.Line)
+		if (currType != ShapeType.Filled && currType != ShapeType.Line) 
 			throw new GdxRuntimeException("Must call begin(ShapeType.Filled) or begin(ShapeType.Line)");
 		checkDirty();
 		checkFlush(segments * 2 + 2);
@@ -585,39 +610,38 @@ public class ShapeRenderer {
 		float angle = 2 * 3.1415926f / segments;
 
 		float cx = x + width / 2, cy = y + height / 2;
-		if (currType == ShapeType.Line) {
+		if(currType == ShapeType.Line){
 			for (int i = 0; i < segments; i++) {
 				renderer.color(color.r, color.g, color.b, color.a);
 				renderer.vertex(cx + (width * 0.5f * MathUtils.cos(i * angle)), cy + (height * 0.5f * MathUtils.sin(i * angle)), 0);
-
+				
 				renderer.color(color.r, color.g, color.b, color.a);
-				renderer.vertex(cx + (width * 0.5f * MathUtils.cos((i + 1) * angle)),
-					cy + (height * 0.5f * MathUtils.sin((i + 1) * angle)), 0);
+				renderer.vertex(cx + (width * 0.5f * MathUtils.cos((i + 1) * angle)), cy + (height * 0.5f * MathUtils.sin((i + 1) * angle)), 0);
 			}
-		} else {
+		}
+		else {
 			for (int i = 0; i < segments; i++) {
 				renderer.color(color.r, color.g, color.b, color.a);
 				renderer.vertex(cx + (width * 0.5f * MathUtils.cos(i * angle)), cy + (height * 0.5f * MathUtils.sin(i * angle)), 0);
-
+			
 				renderer.color(color.r, color.g, color.b, color.a);
 				renderer.vertex(cx, cy, 0);
-
+				
 				renderer.color(color.r, color.g, color.b, color.a);
-				renderer.vertex(cx + (width * 0.5f * MathUtils.cos((i + 1) * angle)),
-					cy + (height * 0.5f * MathUtils.sin((i + 1) * angle)), 0);
+				renderer.vertex(cx + (width * 0.5f * MathUtils.cos((i + 1) * angle)), cy + (height * 0.5f * MathUtils.sin((i + 1) * angle)), 0);
 			}
 		}
 	}
-
+	
 	/** Calls {@link #cone(float, float, float, float, float, int)} by estimating the number of segments needed for a smooth
 	 * circular base. */
 	public void cone (float x, float y, float z, float radius, float height) {
 		cone(x, y, z, radius, height, (int)(4 * (float)Math.sqrt(radius)));
 	}
-
-	public void cone (float x, float y, float z, float radius, float height, int segments) {
+	
+	public void cone(float x, float y, float z, float radius, float height, int segments){
 		if (segments <= 0) throw new IllegalArgumentException("segments must be >= 0.");
-		if (currType != ShapeType.Filled && currType != ShapeType.Line)
+		if (currType != ShapeType.Filled && currType != ShapeType.Line) 
 			throw new GdxRuntimeException("Must call begin(ShapeType.Filled) or begin(ShapeType.Line)");
 		checkDirty();
 		checkFlush(segments * 4 + 2);
@@ -625,7 +649,7 @@ public class ShapeRenderer {
 		float cos = MathUtils.cos(angle);
 		float sin = MathUtils.sin(angle);
 		float cx = radius, cy = 0;
-		if (currType == ShapeType.Line) {
+		if(currType == ShapeType.Line){
 			for (int i = 0; i < segments; i++) {
 				renderer.color(color.r, color.g, color.b, color.a);
 				renderer.vertex(x + cx, y + cy, z);
@@ -642,7 +666,8 @@ public class ShapeRenderer {
 			// Ensure the last segment is identical to the first.
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x + cx, y + cy, z);
-		} else {
+		}
+		else {
 			segments--;
 			for (int i = 0; i < segments; i++) {
 				renderer.color(color.r, color.g, color.b, color.a);
@@ -673,65 +698,57 @@ public class ShapeRenderer {
 		renderer.color(color.r, color.g, color.b, color.a);
 		renderer.vertex(x + cx, y + cy, z);
 	}
-
-	/** @see #polygon(float[], int, int) */
-	public void polygon (float[] vertices) {
-		polygon(vertices, 0, vertices.length);
-	}
-
-	/** Draws a polygon in the x/y plane. The vertices must contain at least 3 points (6 floats x,y). The {@link ShapeType} passed
-	 * to begin has to be {@link ShapeType#Line}.
+	
+	/** Draws a polygon in the x/y plane. The vertices must contain at least 3 points (6 floats x,y). The
+	 * {@link ShapeType} passed to begin has to be {@link ShapeType#Line}.
 	 * @param vertices */
-	public void polygon (float[] vertices, int offset, int count) {
+	public void polygon(float[] vertices){
 		if (currType != ShapeType.Line) throw new GdxRuntimeException("Must call begin(ShapeType.Line)");
-		if (count < 6) throw new IllegalArgumentException("Polygons must contain at least 3 points.");
-		if (count % 2 != 0) throw new IllegalArgumentException("Polygons must have a pair number of vertices.");
-
+		if (vertices.length < 6) throw new IllegalArgumentException("Polygons must contain at least 3 points.");
+		if (vertices.length % 2 != 0) throw new IllegalArgumentException("Polygons must have a pair number of vertices.");
+		final int numFloats = vertices.length;
+		
 		checkDirty();
-		checkFlush(count);
-
+		checkFlush(numFloats);
+		
 		float firstX = vertices[0];
 		float firstY = vertices[1];
-
-		for (int i = offset, n = offset + count; i < n; i += 2) {
+		
+		for (int i = 0; i < numFloats; i += 2) {
 			float x1 = vertices[i];
 			float y1 = vertices[i + 1];
-
+			
 			float x2;
 			float y2;
-
-			if (i + 2 >= count) {
+			
+			if(i + 2 >= numFloats){
 				x2 = firstX;
 				y2 = firstY;
-			} else {
+			}else{
 				x2 = vertices[i + 2];
 				y2 = vertices[i + 3];
 			}
-
+			
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x1, y1, 0);
 			renderer.color(color.r, color.g, color.b, color.a);
 			renderer.vertex(x2, y2, 0);
 		}
 	}
-
-	/** @see #polyline(float[], int, int) */
-	public void polyline (float[] vertices) {
-		polyline(vertices, 0, vertices.length);
-	}
-
-	/** Draws a polyline in the x/y plane. The vertices must contain at least 2 points (4 floats x,y). The {@link ShapeType} passed
-	 * to begin has to be {@link ShapeType#Line}.
+	
+	/** Draws a polyline in the x/y plane. The vertices must contain at least 2 points (4 floats x,y). The
+	 * {@link ShapeType} passed to begin has to be {@link ShapeType#Line}.
 	 * @param vertices */
-	public void polyline (float[] vertices, int offset, int count) {
+	public void polyline(float[] vertices) {
 		if (currType != ShapeType.Line) throw new GdxRuntimeException("Must call begin(ShapeType.Line)");
-		if (count < 4) throw new IllegalArgumentException("Polylines must contain at least 2 points.");
-		if (count % 2 != 0) throw new IllegalArgumentException("Polylines must have a pair number of vertices.");
+		if (vertices.length < 4) throw new IllegalArgumentException("Polylines must contain at least 2 points.");
+		if (vertices.length % 2 != 0) throw new IllegalArgumentException("Polylines must have a pair number of vertices.");
+		final int numFloats = vertices.length;
 
 		checkDirty();
-		checkFlush(count);
+		checkFlush(numFloats);
 
-		for (int i = offset, n = offset + count - 2; i < n; i += 2) {
+		for (int i = 0; i < numFloats - 2; i += 2) {
 			float x1 = vertices[i];
 			float y1 = vertices[i + 1];
 
@@ -773,7 +790,7 @@ public class ShapeRenderer {
 		end();
 		begin(type);
 	}
-
+	
 	/** Returns the current {@link ShapeType} used */
 	public ShapeType getCurrentType () {
 		return currType;
diff --git a/gdx/src/com/badlogic/gdx/math/Rectangle.java b/gdx/src/com/badlogic/gdx/math/Rectangle.java
index f79542e..40cb7e2 100644
--- a/gdx/src/com/badlogic/gdx/math/Rectangle.java
+++ b/gdx/src/com/badlogic/gdx/math/Rectangle.java
@@ -105,6 +105,21 @@ public class Rectangle implements Serializable {
 		this.height = height;
 	}
 
+	/** Sets the width and height of this rectangle
+	 * @param width The width
+	 * @param height The height */
+	public void setSize (float width, float height) {
+		this.width = width;
+		this.height = height;
+	}
+
+	/** Sets the squared size of this rectangle
+	 * @param sizeXY The size */
+	public void setSize (float sizeXY) {
+		this.width = sizeXY;
+		this.height = sizeXY;
+	}
+
 	/** @param x point x coordinate
 	 * @param y point y coordinate
 	 * @return whether the point is contained in the rectangle */
diff --git a/gdx/src/com/badlogic/gdx/physics/box2d/Contact.java b/gdx/src/com/badlogic/gdx/physics/box2d/Contact.java
index c77db86..fdb98de 100644
--- a/gdx/src/com/badlogic/gdx/physics/box2d/Contact.java
+++ b/gdx/src/com/badlogic/gdx/physics/box2d/Contact.java
@@ -207,4 +207,24 @@ public class Contact {
 	  	b2Contact* contact = (b2Contact*)addr;
 		contact->ResetRestitution();
 	*/
+		
+	/** Get the tangent speed. */
+	public float getTangentSpeed () {
+		return jniGetTangentSpeed(addr);
+	}
+
+	private native float jniGetTangentSpeed (long addr); /*
+	  	b2Contact* contact = (b2Contact*)addr;
+		return contact->GetTangentSpeed();
+	*/
+
+	/** Set the tangent speed. */
+	public void setTangentSpeed (float speed) {
+		jniSetTangentSpeed(addr, speed);
+	}
+
+	private native void jniSetTangentSpeed (long addr, float speed); /*
+	  	b2Contact* contact = (b2Contact*)addr;
+		contact->SetTangentSpeed(speed);
+	*/
 }
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTestCollection.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTestCollection.java
index 5711f24..52cebd1 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTestCollection.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DTestCollection.java
@@ -32,6 +32,7 @@ import com.badlogic.gdx.tests.box2d.Chain;
 import com.badlogic.gdx.tests.box2d.CharacterCollision;
 import com.badlogic.gdx.tests.box2d.CollisionFiltering;
 import com.badlogic.gdx.tests.box2d.ContinuousTest;
+import com.badlogic.gdx.tests.box2d.ConveyorBelt;
 import com.badlogic.gdx.tests.box2d.DebugRendererTest;
 import com.badlogic.gdx.tests.box2d.OneSidedPlatform;
 import com.badlogic.gdx.tests.box2d.Prismatic;
@@ -45,7 +46,7 @@ import com.badlogic.gdx.tests.utils.GdxTest;
 public class Box2DTestCollection extends GdxTest implements InputProcessor, GestureListener {
 	private final Box2DTest[] tests = {new DebugRendererTest(), new CollisionFiltering(), new Chain(), new Bridge(),
 		new SphereStack(), new Cantilever(), new ApplyForce(), new ContinuousTest(), new Prismatic(), new CharacterCollision(),
-		new BodyTypes(), new SimpleTest(), new Pyramid(), new OneSidedPlatform(), new VerticalStack(), new VaryingRestitution()};
+		new BodyTypes(), new SimpleTest(), new Pyramid(), new OneSidedPlatform(), new VerticalStack(), new VaryingRestitution(), new ConveyorBelt()};
 
 	private int testIndex = 0;
 
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/ConveyorBelt.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/ConveyorBelt.java
new file mode 100644
index 0000000..f52b8a2
--- /dev/null
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/ConveyorBelt.java
@@ -0,0 +1,84 @@
+
+package com.badlogic.gdx.tests.box2d;
+
+import com.badlogic.gdx.math.Vector2;
+import com.badlogic.gdx.physics.box2d.Body;
+import com.badlogic.gdx.physics.box2d.BodyDef;
+import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
+import com.badlogic.gdx.physics.box2d.Contact;
+import com.badlogic.gdx.physics.box2d.ContactImpulse;
+import com.badlogic.gdx.physics.box2d.ContactListener;
+import com.badlogic.gdx.physics.box2d.EdgeShape;
+import com.badlogic.gdx.physics.box2d.Fixture;
+import com.badlogic.gdx.physics.box2d.FixtureDef;
+import com.badlogic.gdx.physics.box2d.Manifold;
+import com.badlogic.gdx.physics.box2d.PolygonShape;
+import com.badlogic.gdx.physics.box2d.World;
+
+public class ConveyorBelt extends Box2DTest implements ContactListener {
+	Fixture m_platform;
+
+	@Override
+	protected void createWorld (World world) {
+		world.setContactListener(this);
+		
+		// Ground
+		{
+			BodyDef bodyDef = new BodyDef();
+			groundBody = world.createBody(bodyDef);
+			
+			EdgeShape shape = new EdgeShape();
+			shape.set(new Vector2(-20.0f, 0.0f), new Vector2(20.0f, 0.0f));
+			groundBody.createFixture(shape, 0.0f);
+		}
+
+		// Platform
+		{
+			BodyDef bd = new BodyDef();
+			bd.position.set(-5.0f, 5.0f);
+			Body body = world.createBody(bd);
+
+			PolygonShape shape = new PolygonShape();
+			shape.setAsBox(10.0f, 0.5f);
+
+			FixtureDef fd = new FixtureDef();
+			fd.shape = shape;
+			fd.friction = 0.8f;
+			m_platform = body.createFixture(fd);
+		}
+
+		// Boxes
+		for (int i = 0; i < 5; ++i) {
+			BodyDef bd = new BodyDef();
+			bd.type = BodyType.DynamicBody;
+			bd.position.set(-10.0f + 2.0f * i, 7.0f);
+			Body body = world.createBody(bd);
+
+			PolygonShape shape = new PolygonShape();
+			shape.setAsBox(0.5f, 0.5f);
+			body.createFixture(shape, 20.0f);
+		}
+	}
+
+	public void preSolve (Contact contact, Manifold oldManifold) {
+		Fixture fixtureA = contact.getFixtureA();
+		Fixture fixtureB = contact.getFixtureB();
+
+		if (fixtureA == m_platform || fixtureB == m_platform) {
+			contact.setTangentSpeed(5.0f);
+		}
+	}
+
+	@Override
+	public void beginContact (Contact contact) {
+		
+	}
+
+	@Override
+	public void endContact (Contact contact) {
+	}
+
+	@Override
+	public void postSolve (Contact contact, ContactImpulse impulse) {
+	}
+}
