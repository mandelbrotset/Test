diff --git a/CHANGES b/CHANGES
index d038d80..8f987ce 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,12 +1,4 @@
 [1.0.1]
-- Tiled maps are now always y-up
-- Tiled maps now support drawing offsets for tiles
-- FileHandle#list is now supported in GWT!
-- FileHandle#list now supports FileFilters
-- Controllers now reinitialize on the desktop when switching between windowed/fullscreen
-- added a Texture unpacker that will extract all images from a texture atlas, see https://github.com/libgdx/libgdx/pull/1774
-- updates to gdx-setup 
-- CustomCollisionDispatcher in bullet, see https://github.com/libgdx/libgdx/commit/916fc85cecf433c3461b458e00f8afc516ad21e3
 
 [1.0.0]
 - Box2D is no longer in the core, it has been moved to an extension. See http://www.badlogicgames.com/wordpress/?p=3404
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFileHandle.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFileHandle.java
index 3f9ceb2..ec65238 100644
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFileHandle.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFileHandle.java
@@ -17,16 +17,14 @@
 package com.badlogic.gdx.backends.android;
 
 import java.io.File;
-import java.io.FileFilter;
-import java.io.FilenameFilter;
 import java.io.IOException;
 import java.io.InputStream;
 
 import android.content.res.AssetFileDescriptor;
 import android.content.res.AssetManager;
 
-import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Files.FileType;
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
@@ -95,56 +93,6 @@ public class AndroidFileHandle extends FileHandle {
 		return super.list();
 	}
 
-	public FileHandle[] list (FileFilter filter) {
-		if (type == FileType.Internal) {
-			try {
-				String[] relativePaths = assets.list(file.getPath());
-				FileHandle[] handles = new FileHandle[relativePaths.length];
-				int count = 0;
-				for (int i = 0, n = handles.length; i < n; i++) {
-					String path = relativePaths[i];
-					if (!filter.accept(file)) continue;
-					handles[count] = new AndroidFileHandle(assets, new File(file, path), type);
-					count++;
-				}
-				if (count < relativePaths.length) {
-					FileHandle[] newHandles = new FileHandle[count];
-					System.arraycopy(handles, 0, newHandles, 0, count);
-					handles = newHandles;
-				}
-				return handles;
-			} catch (Exception ex) {
-				throw new GdxRuntimeException("Error listing children: " + file + " (" + type + ")", ex);
-			}
-		}
-		return super.list(filter);
-	}
-
-	public FileHandle[] list (FilenameFilter filter) {
-		if (type == FileType.Internal) {
-			try {
-				String[] relativePaths = assets.list(file.getPath());
-				FileHandle[] handles = new FileHandle[relativePaths.length];
-				int count = 0;
-				for (int i = 0, n = handles.length; i < n; i++) {
-					String path = relativePaths[i];
-					if (!filter.accept(file, path)) continue;
-					handles[count] = new AndroidFileHandle(assets, new File(file, path), type);
-					count++;
-				}
-				if (count < relativePaths.length) {
-					FileHandle[] newHandles = new FileHandle[count];
-					System.arraycopy(handles, 0, newHandles, 0, count);
-					handles = newHandles;
-				}
-				return handles;
-			} catch (Exception ex) {
-				throw new GdxRuntimeException("Error listing children: " + file + " (" + type + ")", ex);
-			}
-		}
-		return super.list(filter);
-	}
-
 	public FileHandle[] list (String suffix) {
 		if (type == FileType.Internal) {
 			try {
diff --git a/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/OpenALMusic.java b/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/OpenALMusic.java
index 8f4527e..c6af490 100644
--- a/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/OpenALMusic.java
+++ b/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/audio/OpenALMusic.java
@@ -77,17 +77,11 @@ public abstract class OpenALMusic implements Music {
 			}
 			alSourcei(sourceID, AL_LOOPING, AL_FALSE);
 			setPan(pan, volume);
-			int filled = 0; // check if there's anything to play actually, see #1770
 			for (int i = 0; i < bufferCount; i++) {
 				int bufferID = buffers.get(i);
 				if (!fill(bufferID)) break;
-				filled++;
 				alSourceQueueBuffers(sourceID, bufferID);
 			}
-			if(filled == 0) {
-				if(onCompletionListener != null) onCompletionListener.onCompletion(this);
-			}
-			
 			if (alGetError() != AL_NO_ERROR) {
 				stop();
 				return;
diff --git a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
index ecd88ca..09c9f6e 100644
--- a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
+++ b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java
@@ -27,7 +27,6 @@ import org.robovm.apple.uikit.UIApplication;
 import org.robovm.apple.uikit.UIApplicationDelegateAdapter;
 import org.robovm.apple.uikit.UIDevice;
 import org.robovm.apple.uikit.UIInterfaceOrientation;
-import org.robovm.apple.uikit.UIPasteboard;
 import org.robovm.apple.uikit.UIScreen;
 import org.robovm.apple.uikit.UIUserInterfaceIdiom;
 import org.robovm.apple.uikit.UIViewController;
@@ -48,11 +47,11 @@ import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Clipboard;
 
 public class IOSApplication implements Application {
-
+	
 	public static abstract class Delegate extends UIApplicationDelegateAdapter {
 		private IOSApplication app;
-
-		protected abstract IOSApplication createApplication ();
+		
+		protected abstract IOSApplication createApplication();
 
 		@Override
 		public boolean didFinishLaunching (UIApplication application, NSDictionary<NSString, ?> launchOptions) {
@@ -65,7 +64,7 @@ public class IOSApplication implements Application {
 		public void didBecomeActive (UIApplication application) {
 			app.didBecomeActive(application);
 		}
-
+		
 		@Override
 		public void willResignActive (UIApplication application) {
 			app.willResignActive(application);
@@ -76,7 +75,7 @@ public class IOSApplication implements Application {
 			app.willTerminate(application);
 		}
 	}
-
+	
 	UIApplication uiApp;
 	UIWindow uiWindow;
 	ApplicationListener listener;
@@ -99,7 +98,7 @@ public class IOSApplication implements Application {
 		this.listener = listener;
 		this.config = config;
 	}
-
+	
 	final boolean didFinishLaunching (UIApplication uiApp, NSDictionary<?, ?> options) {
 		Gdx.app = this;
 		this.uiApp = uiApp;
@@ -117,7 +116,8 @@ public class IOSApplication implements Application {
 				// it's an iPod or iPhone
 				displayScaleFactor = config.displayScaleSmallScreenIfRetina * 2.0f;
 			}
-		} else {
+		} 
+		else {
 			// no retina screen: no scaling!
 			if (UIDevice.getCurrentDevice().getUserInterfaceIdiom() == UIUserInterfaceIdiom.Pad) {
 				// it's an iPad!
@@ -129,10 +129,10 @@ public class IOSApplication implements Application {
 		}
 
 		GL20 gl20 = new IOSGLES20();
-
+		
 		Gdx.gl = gl20;
 		Gdx.gl20 = gl20;
-
+		
 		// setup libgdx
 		this.input = new IOSInput(this);
 		this.graphics = new IOSGraphics(getBounds(null), this, config, input, gl20);
@@ -154,16 +154,20 @@ public class IOSApplication implements Application {
 		Gdx.app.debug("IOSApplication", "created");
 		return true;
 	}
-
-	/** Return the UI view controller of IOSApplication
-	 * @return the view controller of IOSApplication */
-	public UIViewController getUIViewController () {
+	
+	/**
+	 * Return the UI view controller of IOSApplication
+	 * @return the view controller of IOSApplication
+	 */
+	public UIViewController getUIViewController(){
 		return graphics.viewController;
 	}
 
-	/** Return the UI Window of IOSApplication
-	 * @return the window */
-	public UIWindow getUIWindow () {
+	/**
+	 * Return the UI Window of IOSApplication
+	 * @return the window
+	 */
+	public UIWindow getUIWindow() {
 		return uiWindow;
 	}
 
@@ -173,7 +177,7 @@ public class IOSApplication implements Application {
 	 * @return Or real display dimension. */
 	CGSize getBounds (UIViewController viewController) {
 		// or screen size (always portrait)
-// CGSize bounds = UIScreen.getMainScreen().getBounds().size();
+//		CGSize bounds = UIScreen.getMainScreen().getBounds().size();
 		CGSize bounds = UIScreen.getMainScreen().getApplicationFrame().size();
 
 		// determine orientation and resulting width + height
@@ -182,10 +186,11 @@ public class IOSApplication implements Application {
 			orientation = viewController.getInterfaceOrientation();
 		} else if (config.orientationLandscape == config.orientationPortrait) {
 			/*
-			 * if the app has orientation in any side then we can only check status bar orientation
+			 * if the app has orientation in any side then we can only check
+			 * status bar orientation
 			 */
 			orientation = uiApp.getStatusBarOrientation();
-		} else if (config.orientationLandscape) {// is landscape true and portrait false
+		} else if (config.orientationLandscape) {// is landscape true and portrait false 
 			orientation = UIInterfaceOrientation.LandscapeRight;
 		} else {// is portrait true and landscape false
 			orientation = UIInterfaceOrientation.Portrait;
@@ -204,7 +209,7 @@ public class IOSApplication implements Application {
 			height = (int)bounds.height();
 		}
 
-		// update width/height depending on display scaling selected
+		// update width/height depending on display scaling selected 
 		width *= displayScaleFactor;
 		height *= displayScaleFactor;
 
@@ -219,7 +224,7 @@ public class IOSApplication implements Application {
 		Gdx.app.debug("IOSApplication", "resumed");
 		// workaround for ObjectAL crash problem
 		// see: https://groups.google.com/forum/?fromgroups=#!topic/objectal-for-iphone/ubRWltp_i1Q
-		// OALAudioSession.sharedInstance().forceEndInterrupt();
+		//	OALAudioSession.sharedInstance().forceEndInterrupt();
 		graphics.makeCurrent();
 		graphics.resume();
 	}
@@ -235,8 +240,8 @@ public class IOSApplication implements Application {
 		Gdx.app.debug("IOSApplication", "disposed");
 		graphics.makeCurrent();
 		Array<LifecycleListener> listeners = lifecycleListeners;
-		synchronized (listeners) {
-			for (LifecycleListener listener : listeners) {
+		synchronized(listeners) {
+			for(LifecycleListener listener: listeners) {
 				listener.pause();
 			}
 		}
@@ -248,7 +253,7 @@ public class IOSApplication implements Application {
 	public ApplicationListener getApplicationListener () {
 		return listener;
 	}
-
+	
 	@Override
 	public Graphics getGraphics () {
 		return graphics;
@@ -325,7 +330,7 @@ public class IOSApplication implements Application {
 	}
 
 	@Override
-	public int getLogLevel () {
+	public int getLogLevel() {
 		return logLevel;
 	}
 
@@ -353,11 +358,11 @@ public class IOSApplication implements Application {
 	public Preferences getPreferences (String name) {
 		File libraryPath = new File(System.getenv("HOME"), "Library");
 		File finalPath = new File(libraryPath, name + ".plist");
-
+		
 		Gdx.app.debug("IOSApplication", "Loading NSDictionary from file " + finalPath);
 		@SuppressWarnings("unchecked")
-		NSMutableDictionary<NSString, NSObject> nsDictionary = (NSMutableDictionary<NSString, NSObject>)NSMutableDictionary
-			.read(finalPath);
+		NSMutableDictionary<NSString, NSObject> nsDictionary = 
+			(NSMutableDictionary<NSString, NSObject>) NSMutableDictionary.read(finalPath);
 
 		// if it fails to get an existing dictionary, create a new one.
 		if (nsDictionary == null) {
@@ -366,7 +371,7 @@ public class IOSApplication implements Application {
 			boolean fileWritten = nsDictionary.write(finalPath, false);
 			if (fileWritten)
 				Gdx.app.debug("IOSApplication", "NSDictionary file written");
-			else
+			else 
 				Gdx.app.debug("IOSApplication", "Failed to write NSDictionary to file " + finalPath);
 		}
 		return new IOSPreferences(nsDictionary, finalPath.getAbsolutePath());
@@ -401,30 +406,30 @@ public class IOSApplication implements Application {
 
 	@Override
 	public Clipboard getClipboard () {
+		// FIXME implement clipboard
 		return new Clipboard() {
 			@Override
 			public void setContents (String content) {
-				UIPasteboard.getGeneral().setString(content);
 			}
 
 			@Override
 			public String getContents () {
-				return UIPasteboard.getGeneral().getString();
+				return null;
 			}
 		};
 	}
-
+	
 	@Override
 	public void addLifecycleListener (LifecycleListener listener) {
-		synchronized (lifecycleListeners) {
+		synchronized(lifecycleListeners) {
 			lifecycleListeners.add(listener);
 		}
 	}
 
 	@Override
 	public void removeLifecycleListener (LifecycleListener listener) {
-		synchronized (lifecycleListeners) {
+		synchronized(lifecycleListeners) {
 			lifecycleListeners.removeValue(listener, true);
-		}
+		}		
 	}
 }
diff --git a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplicationConfiguration.java b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplicationConfiguration.java
index bfe4fae..295e176 100644
--- a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplicationConfiguration.java
+++ b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplicationConfiguration.java
@@ -22,69 +22,80 @@ import org.robovm.apple.glkit.GLKViewDrawableMultisample;
 import org.robovm.apple.glkit.GLKViewDrawableStencilFormat;
 
 public class IOSApplicationConfiguration {
+	// FIXME add compass, framebuffer bit depth, stencil, just like on Android if possible
 	/** whether to enable screen dimming. */
 	public boolean preventScreenDimming = true;
 	/** whether or not portrait orientation is supported. */
 	public boolean orientationPortrait = true;
 	/** whether or not landscape orientation is supported. */
 	public boolean orientationLandscape = true;
-
+	
 	/** the color format, RGB565 is the default **/
 	public GLKViewDrawableColorFormat colorFormat = GLKViewDrawableColorFormat.RGB565;
-
+	
 	/** the depth buffer format, Format16 is default **/
 	public GLKViewDrawableDepthFormat depthFormat = GLKViewDrawableDepthFormat._16;
-
+	
 	/** the stencil buffer format, None is default **/
 	public GLKViewDrawableStencilFormat stencilFormat = GLKViewDrawableStencilFormat.None;
-
+	
 	/** the multisample format, None is default **/
 	public GLKViewDrawableMultisample multisample = GLKViewDrawableMultisample.None;
-
+	
 	/** number of frames per second, 60 is default **/
 	public int preferredFramesPerSecond = 60;
-
-	/** Scale factor to use on large screens with retina display, i.e. iPad 3+ (has no effect on non-retina screens).
+	
+	/**
+	 * Scale factor to use on large screens  with retina display, i.e. iPad 3+ (has no effect on non-retina screens).
 	 * <ul>
-	 * <li>1.0 = no scaling (everything is in pixels)
-	 * <li>0.5 = LibGDX will behave as you would only have half the pixels. I.e. instead of 2048x1536 you will work in 1024x768.
-	 * This looks pixel perfect and will save you the trouble to create bigger graphics for the retina display.
-	 * <li>any other value: scales the screens according to your scale factor. A scale factor oof 0.75, 0.8, 1.2, 1.5 etc. works
-	 * very well without any artifacts!
-	 * </ul> */
+	 *   <li>1.0 = no scaling (everything is in pixels)
+	 *   <li>0.5 = LibGDX will behave as you would only have half the pixels. I.e. instead of 2048x1536 you 
+	 *       will work in 1024x768. This looks pixel perfect and will save you the trouble to create bigger
+	 *       graphics for the retina display. 
+	 *   <li>any other value: scales the screens according to your scale factor. A scale factor
+	 *       oof 0.75, 0.8, 1.2, 1.5 etc. works very well without any artifacts! 
+	 * </ul>
+    */
 	public float displayScaleLargeScreenIfRetina = 1.0f;
-	/** Scale factor to use on small screens with retina display, i.e. iPhone 4+, iPod 4+ (has no effect on non-retina screens).
+	/**
+	 * Scale factor to use on small screens with retina display, i.e. iPhone 4+, iPod 4+ (has no effect on non-retina screens).
 	 * <ul>
-	 * <li>1.0 = no scaling (everything is in pixels)
-	 * <li>0.5 = LibGDX will behave as you would only have half the pixels. I.e. instead of 960x640 you will work in 480x320. This
-	 * looks pixel perfect and will save you the trouble to create bigger graphics for the retina display.
-	 * <li>any other value: scales the screens according to your scale factor. A scale factor of 0.75, 0.8, 1.2, 1.5 etc. works
-	 * very well without any artifacts!
-	 * </ul> */
+	 *   <li>1.0 = no scaling (everything is in pixels)
+	 *   <li>0.5 = LibGDX will behave as you would only have half the pixels. I.e. instead of 960x640 you 
+	 *       will work in 480x320. This looks pixel perfect and will save you the trouble to create bigger
+	 *       graphics for the retina display. 
+	 *   <li>any other value: scales the screens according to your scale factor. A scale factor
+	 *       of 0.75, 0.8, 1.2, 1.5 etc. works very well without any artifacts! 
+	 * </ul>
+    */
 	public float displayScaleSmallScreenIfRetina = 1.0f;
-	/** Scale factor to use on large screens without retina display, i.e. iPad 1+2 (has no effect on retina screens).
+	/**
+	 * Scale factor to use on large screens  without retina display, i.e. iPad 1+2 (has no effect on retina screens).
 	 * <ul>
-	 * <li>1.0 = no scaling (everything is in pixels)
-	 * <li>any other value: scales the screens according to your scale factor. A scale factor of 0.75, 0.8, 1.2, 1.5 etc. works
-	 * very well without any artifacts!
-	 * </ul> */
+	 *   <li>1.0 = no scaling (everything is in pixels)
+	 *   <li>any other value: scales the screens according to your scale factor. A scale factor
+	 *       of 0.75, 0.8, 1.2, 1.5 etc. works very well without any artifacts! 
+	 * </ul>
+    */
 	public float displayScaleLargeScreenIfNonRetina = 1.0f;
-	/** Scale factor to use on small screens without retina display, i.e. iPhone 1-3, iPod 1-3 (has no effect on retina screens).
+	/**
+	 * Scale factor to use on small screens without retina display, i.e. iPhone 1-3, iPod 1-3 (has no effect on retina screens).
 	 * <ul>
-	 * <li>1.0 = no scaling (everything is in pixels)
-	 * <li>any other value: scales the screens according to your scale factor. A scale factor of 0.75, 0.8, 1.2, 1.5 etc. works
-	 * very well without any artifacts!
-	 * </ul> */
+	 *   <li>1.0 = no scaling (everything is in pixels)
+	 *   <li>any other value: scales the screens according to your scale factor. A scale factor
+	 *       of 0.75, 0.8, 1.2, 1.5 etc. works very well without any artifacts! 
+	 * </ul>
+    */
 	public float displayScaleSmallScreenIfNonRetina = 1.0f;
-
+	
 	/** whether to use the accelerometer, default true **/
 	public boolean useAccelerometer = true;
 	/** the update interval to poll the accelerometer with, in seconds **/
 	public float accelerometerUpdate = 0.05f;
-
+	
 	/** whether to use the compass, default true **/
 	public boolean useCompass = true;
-
+	
 	/** whether or not to allow background music from iPod **/
 	public boolean allowIpod = false;
-}
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSAudio.java b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSAudio.java
index 2d94e8e..900f88d 100644
--- a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSAudio.java
+++ b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSAudio.java
@@ -28,11 +28,11 @@ import com.badlogic.gdx.utils.GdxRuntimeException;
 
 public class IOSAudio implements Audio {
 
-	public IOSAudio (IOSApplicationConfiguration config) {
+	public IOSAudio(IOSApplicationConfiguration config) {
 		OALSimpleAudio.sharedInstance().setAllowIpod(config.allowIpod);
 		OALSimpleAudio.sharedInstance().setHonorSilentSwitch(true);
 	}
-
+	
 	@Override
 	public AudioDevice newAudioDevice (int samplingRate, boolean isMono) {
 		// TODO Auto-generated method stub
@@ -62,4 +62,4 @@ public class IOSAudio implements Audio {
 		throw new GdxRuntimeException("Error opening music file at " + path);
 	}
 
-}
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSFileHandle.java b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSFileHandle.java
index d5fcd6d..04b3e12 100644
--- a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSFileHandle.java
+++ b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSFileHandle.java
@@ -12,55 +12,51 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.backends.iosrobovm;
-
-import java.io.File;
-
-import com.badlogic.gdx.Files.FileType;
-import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-
-public class IOSFileHandle extends FileHandle {
-	protected IOSFileHandle (String fileName, FileType type) {
-		super(fileName, type);
-	}
-
-	protected IOSFileHandle (File file, FileType type) {
-		super(file, type);
-	}
-
-	@Override
-	public FileHandle child (String name) {
-		if (file.getPath().length() == 0) return new IOSFileHandle(new File(name), type);
-		return new IOSFileHandle(new File(file, name), type);
-	}
-
-	@Override
-	public FileHandle parent () {
-		File parent = file.getParentFile();
-		if (parent == null) {
-			if (type == FileType.Absolute)
-				parent = new File("/");
-			else
-				parent = new File("");
-		}
-		return new IOSFileHandle(parent, type);
-	}
-
-	@Override
-	public FileHandle sibling (String name) {
-		if (file.getPath().length() == 0) throw new GdxRuntimeException("Cannot get the sibling of the root.");
-		return new IOSFileHandle(new File(file.getParent(), name), type);
-	}
-
-	@Override
-	public File file () {
-		if (type == FileType.Internal) return new File(IOSFiles.internalPath, file.getPath());
-		if (type == FileType.External) return new File(IOSFiles.externalPath, file.getPath());
-		if (type == FileType.Local) return new File(IOSFiles.localPath, file.getPath());
-		return file;
-	}
-
-}
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.iosrobovm;
+
+import java.io.File;
+
+import com.badlogic.gdx.Files.FileType;
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+
+public class IOSFileHandle extends FileHandle {
+	protected IOSFileHandle (String fileName, FileType type) {
+		super(fileName, type);
+	}
+
+	protected IOSFileHandle (File file, FileType type) {
+		super(file, type);
+	}
+
+	public FileHandle child (String name) {
+		if (file.getPath().length() == 0) return new IOSFileHandle(new File(name), type);
+		return new IOSFileHandle(new File(file, name), type);
+	}
+
+	public FileHandle parent () {
+		File parent = file.getParentFile();
+		if (parent == null) {
+			if (type == FileType.Absolute)
+				parent = new File("/");
+			else
+				parent = new File("");
+		}
+		return new IOSFileHandle(parent, type);
+	}
+
+	public FileHandle sibling (String name) {
+		if (file.getPath().length() == 0) throw new GdxRuntimeException("Cannot get the sibling of the root.");
+		return new IOSFileHandle(new File(file.getParent(), name), type);
+	}
+
+	public File file () {
+		if (type == FileType.Internal) return new File(IOSFiles.internalPath, file.getPath());
+		if (type == FileType.External) return new File(IOSFiles.externalPath, file.getPath());
+		if (type == FileType.Local) return new File(IOSFiles.localPath, file.getPath());
+		return file;
+	}
+
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSFiles.java b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSFiles.java
index e038118..8d3bb18 100644
--- a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSFiles.java
+++ b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSFiles.java
@@ -12,75 +12,75 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.backends.iosrobovm;
-
-import org.robovm.apple.foundation.NSBundle;
-
-import com.badlogic.gdx.Files;
-import com.badlogic.gdx.files.FileHandle;
-
-public class IOSFiles implements Files {
-	// TODO: Use NSSearchPathForDirectoriesInDomains instead?
-	// $HOME should point to the app root dir.
-	static final String appDir = System.getenv("HOME");
-	static final String externalPath = appDir + "/Documents";
-	static final String localPath = appDir + "/Library/local";
-	static final String internalPath = NSBundle.getMainBundle().getBundlePath();
-
-	public IOSFiles () {
-		new FileHandle(externalPath).mkdirs();
-		new FileHandle(localPath).mkdirs();
-	}
-
-	@Override
-	public FileHandle getFileHandle (String fileName, FileType type) {
-		return new IOSFileHandle(fileName, type);
-	}
-
-	@Override
-	public FileHandle classpath (String path) {
-		return new IOSFileHandle(path, FileType.Classpath);
-	}
-
-	@Override
-	public FileHandle internal (String path) {
-		return new IOSFileHandle(path, FileType.Internal);
-	}
-
-	@Override
-	public FileHandle external (String path) {
-		return new IOSFileHandle(path, FileType.External);
-	}
-
-	@Override
-	public FileHandle absolute (String path) {
-		return new IOSFileHandle(path, FileType.Absolute);
-	}
-
-	@Override
-	public FileHandle local (String path) {
-		return new IOSFileHandle(path, FileType.Local);
-	}
-
-	@Override
-	public String getExternalStoragePath () {
-		return externalPath;
-	}
-
-	@Override
-	public boolean isExternalStorageAvailable () {
-		return true;
-	}
-
-	@Override
-	public String getLocalStoragePath () {
-		return localPath;
-	}
-
-	@Override
-	public boolean isLocalStorageAvailable () {
-		return true;
-	}
-}
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.iosrobovm;
+
+import org.robovm.apple.foundation.NSBundle;
+
+import com.badlogic.gdx.Files;
+import com.badlogic.gdx.files.FileHandle;
+
+public class IOSFiles implements Files {
+	// TODO: Use NSSearchPathForDirectoriesInDomains instead?
+	// $HOME should point to the app root dir.
+	static final String appDir = System.getenv("HOME");
+	static final String externalPath = appDir + "/Documents";
+	static final String localPath = appDir + "/Library/local";
+	static final String internalPath = NSBundle.getMainBundle().getBundlePath();
+	
+	public IOSFiles() {
+		new FileHandle(externalPath).mkdirs();
+		new FileHandle(localPath).mkdirs();
+	}
+	
+	@Override
+	public FileHandle getFileHandle (String fileName, FileType type) {
+		return new IOSFileHandle(fileName, type);
+	}
+
+	@Override
+	public FileHandle classpath (String path) {
+		return new IOSFileHandle(path, FileType.Classpath);
+	}
+
+	@Override
+	public FileHandle internal (String path) {
+		return new IOSFileHandle(path, FileType.Internal);
+	}
+
+	@Override
+	public FileHandle external (String path) {
+		return new IOSFileHandle(path, FileType.External);
+	}
+
+	@Override
+	public FileHandle absolute (String path) {
+		return new IOSFileHandle(path, FileType.Absolute);
+	}
+
+	@Override
+	public FileHandle local (String path) {
+		return new IOSFileHandle(path, FileType.Local);
+	}
+
+	@Override
+	public String getExternalStoragePath() {
+		return externalPath;
+	}
+
+	@Override
+	public boolean isExternalStorageAvailable() {
+		return true;
+	}
+
+	@Override
+	public String getLocalStoragePath() {
+		return localPath;
+	}
+
+	@Override
+	public boolean isLocalStorageAvailable() {
+		return true;
+	}
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java
index 6670cb2..9d1f81f 100644
--- a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java
+++ b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java
@@ -20,7 +20,6 @@ import org.robovm.apple.coregraphics.CGPoint;
 import org.robovm.apple.coregraphics.CGRect;
 import org.robovm.apple.coregraphics.CGSize;
 import org.robovm.apple.foundation.NSObject;
-import org.robovm.apple.foundation.NSSet;
 import org.robovm.apple.glkit.GLKView;
 import org.robovm.apple.glkit.GLKViewController;
 import org.robovm.apple.glkit.GLKViewControllerDelegate;
@@ -35,11 +34,12 @@ import org.robovm.apple.uikit.UIDevice;
 import org.robovm.apple.uikit.UIEvent;
 import org.robovm.apple.uikit.UIInterfaceOrientation;
 import org.robovm.apple.uikit.UIScreen;
-import org.robovm.apple.uikit.UITouch;
 import org.robovm.apple.uikit.UIUserInterfaceIdiom;
 import org.robovm.objc.Selector;
 import org.robovm.objc.annotation.BindSelector;
+import org.robovm.objc.annotation.Method;
 import org.robovm.rt.bro.annotation.Callback;
+import org.robovm.rt.bro.annotation.Pointer;
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Graphics;
@@ -48,6 +48,7 @@ import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.GL30;
 import com.badlogic.gdx.utils.Array;
 
+// FIXME add GL 1.x support by ripping Android's classes
 public class IOSGraphics extends NSObject implements Graphics, GLKViewDelegate, GLKViewControllerDelegate {
 
 	private static final String tag = "IOSGraphics";
@@ -141,27 +142,23 @@ public class IOSGraphics extends NSObject implements Graphics, GLKViewDelegate,
 		context = new EAGLContext(EAGLRenderingAPI.OpenGLES2);
 
 		view = new GLKView(new CGRect(new CGPoint(0, 0), bounds), context) {
-			@Override
-			public void touchesBegan (NSSet<UITouch> touches, UIEvent event) {
-				super.touchesBegan(touches, event);
+			@Method(selector = "touchesBegan:withEvent:")
+			public void touchesBegan (@Pointer long touches, UIEvent event) {
 				IOSGraphics.this.input.touchDown(touches, event);
 			}
 
-			@Override
-			public void touchesCancelled (NSSet<UITouch> touches, UIEvent event) {
-				super.touchesCancelled(touches, event);
+			@Method(selector = "touchesCancelled:withEvent:")
+			public void touchesCancelled (@Pointer long touches, UIEvent event) {
 				IOSGraphics.this.input.touchUp(touches, event);
 			}
 
-			@Override
-			public void touchesEnded (NSSet<UITouch> touches, UIEvent event) {
-				super.touchesEnded(touches, event);
+			@Method(selector = "touchesEnded:withEvent:")
+			public void touchesEnded (@Pointer long touches, UIEvent event) {
 				IOSGraphics.this.input.touchUp(touches, event);
 			}
 
-			@Override
-			public void touchesMoved (NSSet<UITouch> touches, UIEvent event) {
-				super.touchesMoved(touches, event);
+			@Method(selector = "touchesMoved:withEvent:")
+			public void touchesMoved (@Pointer long touches, UIEvent event) {
 				IOSGraphics.this.input.touchMoved(touches, event);
 			}
 
@@ -186,6 +183,8 @@ public class IOSGraphics extends NSObject implements Graphics, GLKViewDelegate,
 		this.app = app;
 		this.input = input;
 
+		// FIXME fix this if we add rgba/depth/stencil flags to
+		// IOSApplicationConfiguration
 		int r = 0, g = 0, b = 0, a = 0, depth = 0, stencil = 0, samples = 0;
 		if (config.colorFormat == GLKViewDrawableColorFormat.RGB565) {
 			r = 5;
@@ -257,7 +256,7 @@ public class IOSGraphics extends NSObject implements Graphics, GLKViewDelegate,
 	public void pause () {
 		if (paused) return;
 		paused = true;
-
+		
 		Array<LifecycleListener> listeners = app.lifecycleListeners;
 		synchronized (listeners) {
 			for (LifecycleListener listener : listeners) {
@@ -275,7 +274,7 @@ public class IOSGraphics extends NSObject implements Graphics, GLKViewDelegate,
 		// massive hack, GLKView resets the viewport on each draw call, so IOSGLES20
 		// stores the last known viewport and we reset it here...
 		gl20.glViewport(IOSGLES20.x, IOSGLES20.y, IOSGLES20.width, IOSGLES20.height);
-
+		
 		if (!created) {
 			gl20.glViewport(0, 0, width, height);
 			app.listener.create();
diff --git a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSInput.java b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSInput.java
index d965b53..4e36e03 100644
--- a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSInput.java
+++ b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSInput.java
@@ -18,8 +18,9 @@ package com.badlogic.gdx.backends.iosrobovm;
 
 import org.robovm.apple.coregraphics.CGPoint;
 import org.robovm.apple.coregraphics.CGRect;
+import org.robovm.apple.foundation.NSExtensions;
+import org.robovm.apple.foundation.NSObject;
 import org.robovm.apple.foundation.NSRange;
-import org.robovm.apple.foundation.NSSet;
 import org.robovm.apple.uikit.UIAcceleration;
 import org.robovm.apple.uikit.UIAccelerometer;
 import org.robovm.apple.uikit.UIAccelerometerDelegate;
@@ -41,6 +42,12 @@ import org.robovm.apple.uikit.UITextFieldDelegateAdapter;
 import org.robovm.apple.uikit.UITextSpellCheckingType;
 import org.robovm.apple.uikit.UITouch;
 import org.robovm.apple.uikit.UITouchPhase;
+import org.robovm.objc.ObjCClass;
+import org.robovm.objc.annotation.Method;
+import org.robovm.rt.VM;
+import org.robovm.rt.bro.NativeObject;
+import org.robovm.rt.bro.annotation.MachineSizedUInt;
+import org.robovm.rt.bro.annotation.Pointer;
 
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.InputProcessor;
@@ -52,6 +59,36 @@ import com.badlogic.gdx.utils.Pool;
 public class IOSInput implements Input {
 	static final int MAX_TOUCHES = 20;
 
+	static {
+		// HACK: Make sure UITouch has been registered
+		ObjCClass.getByType(UITouch.class);
+	}
+	
+	private static class NSObjectWrapper<T extends NSObject> {
+		private static final long HANDLE_OFFSET;
+		static {
+			try {
+				HANDLE_OFFSET = VM.getInstanceFieldOffset(VM.getFieldAddress(NativeObject.class.getDeclaredField("handle")));
+			} catch (Throwable t) {
+				throw new Error(t);
+			}
+		}
+
+		private final T instance;
+
+		public NSObjectWrapper (Class<T> cls) {
+			instance = VM.allocateObject(cls);
+		}
+
+		public T wrap (long handle) {
+			VM.setLong(VM.getObjectAddress(instance) + HANDLE_OFFSET, handle);
+			return instance;
+		}
+	}
+
+	private static final NSObjectWrapper<UITouch> UI_TOUCH_WRAPPER = new NSObjectWrapper<UITouch>(UITouch.class);
+	private static final NSObjectWrapper<UIAcceleration> UI_ACCELERATION_WRAPPER = new NSObjectWrapper<UIAcceleration>(UIAcceleration.class);
+
 	IOSApplication app;
 	IOSApplicationConfiguration config;
 	int[] deltaX = new int[MAX_TOUCHES];
@@ -64,7 +101,7 @@ public class IOSInput implements Input {
 	boolean justTouched = false;
 	Pool<TouchEvent> touchEventPool = new Pool<TouchEvent>() {
 		@Override
-		protected TouchEvent newObject () {
+		protected TouchEvent newObject() {
 			return new TouchEvent();
 		}
 	};
@@ -75,36 +112,34 @@ public class IOSInput implements Input {
 	// We need to hold on to the reference to this delegate or else its
 	// ObjC peer will get released when the Java peer is GCed.
 	UIAccelerometerDelegate accelerometerDelegate;
-
-	public IOSInput (IOSApplication app) {
+	
+	public IOSInput(IOSApplication app) {
 		this.app = app;
 		this.config = app.config;
 	}
-
-	void setupPeripherals () {
+	
+	void setupPeripherals() {
 		setupAccelerometer();
 		setupCompass();
 	}
 
 	private void setupCompass () {
-		if (config.useCompass) {
+		if(config.useCompass) {
 			// FIXME implement compass
 		}
 	}
 
-	private void setupAccelerometer () {
-		if (config.useAccelerometer) {
+	private void setupAccelerometer() {
+		if(config.useAccelerometer) {
 			accelerometerDelegate = new UIAccelerometerDelegateAdapter() {
 
-				@Override
-				public void didAccelerate (UIAccelerometer accelerometer, UIAcceleration values) {
+				@Method(selector = "accelerometer:didAccelerate:")
+				public void didAccelerate (UIAccelerometer accelerometer, @Pointer long valuesPtr) {
+					UIAcceleration values = UI_ACCELERATION_WRAPPER.wrap(valuesPtr);
 					float x = (float)values.getX() * 10;
 					float y = (float)values.getY() * 10;
 					float z = (float)values.getZ() * 10;
 
-					UIInterfaceOrientation orientation = app.graphics.viewController != null ? app.graphics.viewController
-						.getInterfaceOrientation() : UIApplication.getSharedApplication().getStatusBarOrientation();
-
 					acceleration[0] = -x;
 					acceleration[1] = -y;
 					acceleration[2] = -z;
@@ -116,110 +151,110 @@ public class IOSInput implements Input {
 	}
 
 	@Override
-	public float getAccelerometerX () {
+	public float getAccelerometerX() {
 		return acceleration[0];
 	}
 
 	@Override
-	public float getAccelerometerY () {
+	public float getAccelerometerY() {
 		return acceleration[1];
 	}
 
 	@Override
-	public float getAccelerometerZ () {
+	public float getAccelerometerZ() {
 		return acceleration[2];
 	}
 
 	@Override
-	public float getAzimuth () {
+	public float getAzimuth() {
 		// FIXME implement this
 		return 0;
 	}
 
 	@Override
-	public float getPitch () {
+	public float getPitch() {
 		// FIXME implement this
 		return 0;
 	}
 
 	@Override
-	public float getRoll () {
+	public float getRoll() {
 		// FIXME implement this
 		return 0;
 	}
 
 	@Override
-	public void getRotationMatrix (float[] matrix) {
+	public void getRotationMatrix(float[] matrix) {
 		// FIXME implement this
 	}
 
 	@Override
-	public int getX () {
+	public int getX() {
 		return touchX[0];
 	}
 
 	@Override
-	public int getX (int pointer) {
+	public int getX(int pointer) {
 		return touchX[pointer];
 	}
 
 	@Override
-	public int getDeltaX () {
+	public int getDeltaX() {
 		return deltaX[0];
 	}
 
 	@Override
-	public int getDeltaX (int pointer) {
+	public int getDeltaX(int pointer) {
 		return deltaX[pointer];
 	}
 
 	@Override
-	public int getY () {
+	public int getY() {
 		return touchY[0];
 	}
 
 	@Override
-	public int getY (int pointer) {
+	public int getY(int pointer) {
 		return touchY[pointer];
 	}
 
 	@Override
-	public int getDeltaY () {
+	public int getDeltaY() {
 		return deltaY[0];
 	}
 
 	@Override
-	public int getDeltaY (int pointer) {
+	public int getDeltaY(int pointer) {
 		return deltaY[pointer];
 	}
 
 	@Override
-	public boolean isTouched () {
+	public boolean isTouched() {
 		return touchDown[0] != 0;
 	}
 
 	@Override
-	public boolean justTouched () {
+	public boolean justTouched() {
 		return justTouched;
 	}
 
 	@Override
-	public boolean isTouched (int pointer) {
+	public boolean isTouched(int pointer) {
 		return touchDown[pointer] != 0;
 	}
 
 	@Override
-	public boolean isButtonPressed (int button) {
+	public boolean isButtonPressed(int button) {
 		return button == Buttons.LEFT && numTouched > 0;
 	}
 
 	@Override
-	public boolean isKeyPressed (int key) {
+	public boolean isKeyPressed(int key) {
 		return false;
 	}
 
 	@Override
-	public void getTextInput (TextInputListener listener, String title, String text) {
+	public void getTextInput(TextInputListener listener, String title, String text) {
 		final UIAlertView uiAlertView = buildUIAlertView(listener, title, text, null);
 		uiAlertView.show();
 	}
@@ -229,7 +264,7 @@ public class IOSInput implements Input {
 	// see: http://www.badlogicgames.com/forum/viewtopic.php?f=17&t=11788
 
 	private class HiddenTextField extends UITextField {
-		public HiddenTextField (CGRect frame) {
+		public HiddenTextField(CGRect frame) {
 			super(frame);
 
 			setKeyboardType(UIKeyboardType.Default);
@@ -241,18 +276,18 @@ public class IOSInput implements Input {
 		}
 
 		@Override
-		public void deleteBackward () {
+		public void deleteBackward() {
 			app.input.inputProcessor.keyTyped((char)8);
 			super.deleteBackward();
 		}
 	}
 
 	private UITextField textfield = null;
-	private final UITextFieldDelegate textDelegate = new UITextFieldDelegateAdapter() {
+	private UITextFieldDelegate textDelegate = new UITextFieldDelegateAdapter() {
 		@Override
-		public boolean shouldChangeCharacters (UITextField textField, NSRange range, String string) {
+		public boolean shouldChangeCharacters(UITextField textField, NSRange range, String string) {
 			for (int i = 0; i < range.length(); i++) {
-				app.input.inputProcessor.keyTyped((char)8);
+				app.input.inputProcessor.keyTyped((char) 8);
 			}
 
 			if (string.isEmpty()) {
@@ -270,33 +305,34 @@ public class IOSInput implements Input {
 		}
 
 		@Override
-		public boolean shouldEndEditing (UITextField textField) {
-			// Text field needs to have at least one symbol - so we can use backspace
+		public boolean shouldEndEditing(UITextField textField) {
+			//Text field needs to have at least one symbol - so we can use backspace
 			textField.setText("x");
 
 			return true;
 		}
 
 		@Override
-		public boolean shouldReturn (UITextField textField) {
+		public boolean shouldReturn(UITextField textField) {
 			textField.resignFirstResponder();
 			return false;
 		}
 	};
 
+
 	@Override
-	public void setOnscreenKeyboardVisible (boolean visible) {
+	public void setOnscreenKeyboardVisible(boolean visible) {
 		if (textfield == null) {
-			// Making simple textField
+			//Making simple textField
 			textfield = new UITextField(new CGRect(10, 10, 100, 50));
-			// Setting parameters
+			//Setting parameters
 			textfield.setKeyboardType(UIKeyboardType.Default);
 			textfield.setReturnKeyType(UIReturnKeyType.Done);
 			textfield.setAutocapitalizationType(UITextAutocapitalizationType.None);
 			textfield.setAutocorrectionType(UITextAutocorrectionType.No);
 			textfield.setSpellCheckingType(UITextSpellCheckingType.No);
 			textfield.setHidden(true);
-			// Text field needs to have at least one symbol - so we can use backspace
+			//Text field needs to have at least one symbol - so we can use backspace
 			textfield.setText("x");
 			app.getUIViewController().getView().addSubview(textfield);
 		}
@@ -310,7 +346,7 @@ public class IOSInput implements Input {
 
 	// Issue 773 indicates this may solve a premature GC issue
 	UIAlertViewDelegate delegate;
-
+	
 	/** Builds an {@link UIAlertView} with an added {@link UITextField} for inputting text.
 	 * @param listener Text input listener
 	 * @param title Dialog title
@@ -354,123 +390,126 @@ public class IOSInput implements Input {
 	}
 
 	@Override
-	public void getPlaceholderTextInput (TextInputListener listener, String title, String placeholder) {
+	public void getPlaceholderTextInput(TextInputListener listener, String title, String placeholder) {
 		final UIAlertView uiAlertView = buildUIAlertView(listener, title, null, placeholder);
 		uiAlertView.show();
 	}
 
 	@Override
-	public void vibrate (int milliseconds) {
+	public void vibrate(int milliseconds) {
 		// FIXME implement this
 	}
 
 	@Override
-	public void vibrate (long[] pattern, int repeat) {
+	public void vibrate(long[] pattern, int repeat) {
 		// FIXME implement this
 	}
 
 	@Override
-	public void cancelVibrate () {
+	public void cancelVibrate() {
 		// FIXME implement this
 	}
 
 	@Override
-	public long getCurrentEventTime () {
+	public long getCurrentEventTime() {
 		return currentEvent.timestamp;
 	}
 
 	@Override
-	public void setCatchBackKey (boolean catchBack) {
+	public void setCatchBackKey(boolean catchBack) {
 	}
 
 	@Override
-	public void setCatchMenuKey (boolean catchMenu) {
+	public void setCatchMenuKey(boolean catchMenu) {
 	}
 
 	@Override
-	public void setInputProcessor (InputProcessor processor) {
+	public void setInputProcessor(InputProcessor processor) {
 		this.inputProcessor = processor;
 	}
 
 	@Override
-	public InputProcessor getInputProcessor () {
+	public InputProcessor getInputProcessor() {
 		return inputProcessor;
 	}
 
 	@Override
-	public boolean isPeripheralAvailable (Peripheral peripheral) {
-		if (peripheral == Peripheral.Accelerometer && config.useAccelerometer) return true;
-		if (peripheral == Peripheral.MultitouchScreen) return true;
-		if (peripheral == Peripheral.OnscreenKeyboard) return true;
+	public boolean isPeripheralAvailable(Peripheral peripheral) {
+		if(peripheral == Peripheral.Accelerometer && config.useAccelerometer) return true;
+		if(peripheral == Peripheral.MultitouchScreen) return true;
+		// FIXME implement this (not sure if possible)
+//		if(peripheral == Peripheral.OnscreenKeyboard) return true;
 		// FIXME implement this
-// if(peripheral == Peripheral.Compass) return true;
-
+//		if(peripheral == Peripheral.Compass) return true;
+		
 		return false;
 	}
 
 	@Override
-	public int getRotation () {
-		UIInterfaceOrientation orientation = app.graphics.viewController != null ? app.graphics.viewController
-			.getInterfaceOrientation() : UIApplication.getSharedApplication().getStatusBarOrientation();
+	public int getRotation() {
+		UIInterfaceOrientation orientation = app.graphics.viewController != null 
+					? app.graphics.viewController.getInterfaceOrientation() 
+					: UIApplication.getSharedApplication().getStatusBarOrientation();
 		// we measure orientation counter clockwise, just like on Android
-		if (orientation == UIInterfaceOrientation.Portrait) return 0;
-		if (orientation == UIInterfaceOrientation.LandscapeLeft) return 270;
-		if (orientation == UIInterfaceOrientation.PortraitUpsideDown) return 180;
-		if (orientation == UIInterfaceOrientation.LandscapeRight) return 90;
+		if(orientation == UIInterfaceOrientation.Portrait) return 0;
+		if(orientation == UIInterfaceOrientation.LandscapeLeft) return 270;
+		if(orientation == UIInterfaceOrientation.PortraitUpsideDown) return 180;
+		if(orientation == UIInterfaceOrientation.LandscapeRight) return 90;
 		return 0;
 	}
 
 	@Override
-	public Orientation getNativeOrientation () {
+	public Orientation getNativeOrientation() {
 		return Orientation.Portrait;
 	}
 
 	@Override
-	public void setCursorCatched (boolean catched) {
+	public void setCursorCatched(boolean catched) {
 	}
 
 	@Override
-	public boolean isCursorCatched () {
+	public boolean isCursorCatched() {
 		return false;
 	}
 
 	@Override
-	public void setCursorPosition (int x, int y) {
+	public void setCursorPosition(int x, int y) {
 	}
 
-	@Override
-	public void setCursorImage (Pixmap pixmap, int xHotspot, int yHotspot) {
-	}
+  @Override
+  public void setCursorImage(Pixmap pixmap, int xHotspot, int yHotspot) {
+  }
 
-	public void touchDown (NSSet<UITouch> touches, UIEvent event) {
+	public void touchDown (long touches, UIEvent event) {
 		toTouchEvents(touches, event);
 	}
 
-	public void touchUp (NSSet<UITouch> touches, UIEvent event) {
+	public void touchUp (long touches, UIEvent event) {
 		toTouchEvents(touches, event);
 	}
 
-	public void touchMoved (NSSet<UITouch> touches, UIEvent event) {
+	public void touchMoved (long touches, UIEvent event) {
 		toTouchEvents(touches, event);
 	}
-
-	void processEvents () {
-		synchronized (touchEvents) {
+	
+	void processEvents() {
+		synchronized(touchEvents) {
 			justTouched = false;
-			for (TouchEvent event : touchEvents) {
+			for(TouchEvent event: touchEvents) {
 				currentEvent = event;
-				switch (event.phase) {
+				switch(event.phase) {
 				case Began:
-					if (inputProcessor != null) inputProcessor.touchDown(event.x, event.y, event.pointer, Buttons.LEFT);
-					if (numTouched == 1) justTouched = true;
+					if(inputProcessor != null) inputProcessor.touchDown(event.x, event.y, event.pointer, Buttons.LEFT);
+					if(numTouched == 1)
+						justTouched = true;
 					break;
 				case Cancelled:
 				case Ended:
-					if (inputProcessor != null) inputProcessor.touchUp(event.x, event.y, event.pointer, Buttons.LEFT);
+					if(inputProcessor != null) inputProcessor.touchUp(event.x, event.y, event.pointer, Buttons.LEFT);
 					break;
 				case Moved:
 				case Stationary:
-					if (inputProcessor != null) inputProcessor.touchDragged(event.x, event.y, event.pointer);
+					if(inputProcessor != null) inputProcessor.touchDragged(event.x, event.y, event.pointer);
 					break;
 				}
 			}
@@ -478,54 +517,74 @@ public class IOSInput implements Input {
 			touchEvents.clear();
 		}
 	}
-
-	private int getFreePointer () {
-		for (int i = 0; i < touchDown.length; i++) {
-			if (touchDown[i] == 0) return i;
+	
+	private int getFreePointer() {
+		for(int i = 0; i < touchDown.length; i++) {
+			if(touchDown[i] == 0) return i;
 		}
 		throw new GdxRuntimeException("Couldn't find free pointer id!");
 	}
-
-	private int findPointer (UITouch touch) {
+	
+	private int findPointer(UITouch touch) {
 		long ptr = touch.getHandle();
-		for (int i = 0; i < touchDown.length; i++) {
-			if (touchDown[i] == ptr) return i;
+		for(int i = 0; i < touchDown.length; i++) {
+			if(touchDown[i] == ptr) return i;
 		}
 		throw new GdxRuntimeException("Couldn't find pointer id for touch event!");
 	}
 
-	private void toTouchEvents (NSSet<UITouch> touches, UIEvent uiEvent) {
-		for (UITouch touch : touches) {
+	private static class NSSetExtensions extends NSExtensions {
+		@Method(selector = "allObjects")
+		public static native @Pointer long allObjects (@Pointer long thiz);
+	}
+
+	private static class NSArrayExtensions extends NSExtensions {
+		@Method(selector = "objectAtIndex:")
+		public static native @Pointer long objectAtIndex$ (@Pointer long thiz, @MachineSizedUInt long index);
+
+		@Method(selector = "count")
+		public static native @MachineSizedUInt long count (@Pointer long thiz);
+	}
+
+	private void toTouchEvents (long touches, UIEvent uiEvent) {
+		long array = NSSetExtensions.allObjects(touches);
+		int length = (int) NSArrayExtensions.count(array);
+		for (int i = 0; i < length; i++) {
+			long touchHandle = NSArrayExtensions.objectAtIndex$(array, i);
+			UITouch touch = UI_TOUCH_WRAPPER.wrap(touchHandle);
 			CGPoint loc = touch.getLocation(touch.getView());
-			synchronized (touchEvents) {
+			synchronized(touchEvents) {
+				UITouchPhase phase = touch.getPhase();
 				TouchEvent event = touchEventPool.obtain();
 				event.x = (int)(loc.x() * app.displayScaleFactor);
 				event.y = (int)(loc.y() * app.displayScaleFactor);
-				event.phase = touch.getPhase();
+				event.phase = phase;
 				event.timestamp = (long)(touch.getTimestamp() * 1000000000);
 				touchEvents.add(event);
-
-				if (touch.getPhase() == UITouchPhase.Began) {
+				
+				if(phase == UITouchPhase.Began) {
 					event.pointer = getFreePointer();
-					touchDown[event.pointer] = (int)touch.getHandle();
+					touchDown[event.pointer] = (int) touch.getHandle();
 					touchX[event.pointer] = event.x;
 					touchY[event.pointer] = event.y;
 					deltaX[event.pointer] = 0;
-					deltaY[event.pointer] = 0;
+					deltaY[event.pointer] = 0; 
 					numTouched++;
 				}
-
-				if (touch.getPhase() == UITouchPhase.Moved || touch.getPhase() == UITouchPhase.Stationary) {
+				
+				if(phase == UITouchPhase.Moved ||
+					phase == UITouchPhase.Stationary) {
 					event.pointer = findPointer(touch);
 					deltaX[event.pointer] = event.x - touchX[event.pointer];
-					deltaY[event.pointer] = event.y - touchY[event.pointer];
+					deltaY[event.pointer] = event.y - touchY[event.pointer]; 
 					touchX[event.pointer] = event.x;
 					touchY[event.pointer] = event.y;
 				}
-
-				if (touch.getPhase() == UITouchPhase.Cancelled || touch.getPhase() == UITouchPhase.Ended) {
+				
+				if(phase == UITouchPhase.Cancelled ||
+					phase == UITouchPhase.Ended) {
 					event.pointer = findPointer(touch);
-					touchDown[event.pointer] = 0;
+					touchDown[event.pointer] = 0; 
 					touchX[event.pointer] = event.x;
 					touchY[event.pointer] = event.y;
 					deltaX[event.pointer] = 0;
@@ -535,11 +594,11 @@ public class IOSInput implements Input {
 			}
 		}
 	}
-
+	
 	static class TouchEvent {
 		UITouchPhase phase;
 		long timestamp;
 		int x, y;
 		int pointer;
 	}
-}
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java
index 37093ce..092dfb2 100644
--- a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java
+++ b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java
@@ -23,16 +23,19 @@ import com.badlogic.gdx.audio.Music;
 import com.badlogic.gdx.backends.iosrobovm.objectal.AVAudioPlayerDelegateAdapter;
 import com.badlogic.gdx.backends.iosrobovm.objectal.OALAudioTrack;
 
-/** @author Niklas Therning */
+/** 
+ * 
+ * @author Niklas Therning
+ */
 public class IOSMusic implements Music {
 	private final OALAudioTrack track;
 	OnCompletionListener onCompletionListener;
 
-	public IOSMusic (OALAudioTrack track) {
+	public IOSMusic(OALAudioTrack track) {
 		this.track = track;
 		this.track.setDelegate(new AVAudioPlayerDelegateAdapter() {
 			@Override
-			public void didFinishPlaying (NSObject player, boolean success) {
+			public void didFinishPlaying(NSObject player, boolean success) {
 				final OnCompletionListener listener = onCompletionListener;
 				if (listener != null) {
 					Gdx.app.postRunnable(new Runnable() {
@@ -45,7 +48,7 @@ public class IOSMusic implements Music {
 			}
 		});
 	}
-
+	
 	@Override
 	public void play () {
 		if (track.isPaused()) {
@@ -93,7 +96,7 @@ public class IOSMusic implements Music {
 
 	@Override
 	public float getPosition () {
-		return (float)(track.getCurrentTime() * 1000.0);
+		return (float) (track.getCurrentTime() * 1000.0);
 	}
 
 	@Override
@@ -102,12 +105,12 @@ public class IOSMusic implements Music {
 	}
 
 	@Override
-	public float getVolume () {
+	public float getVolume() {
 		return track.getVolume();
 	}
 
 	@Override
-	public void setPan (float pan, float volume) {
+	public void setPan(float pan, float volume) {
 		track.setPan(pan);
 		track.setVolume(volume);
 	}
@@ -117,4 +120,4 @@ public class IOSMusic implements Music {
 		this.onCompletionListener = listener;
 	}
 
-}
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSNet.java b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSNet.java
index cbd3c5f..8eb9180 100644
--- a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSNet.java
+++ b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSNet.java
@@ -12,53 +12,53 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.backends.iosrobovm;
-
-import org.robovm.apple.foundation.NSURL;
-import org.robovm.apple.uikit.UIApplication;
-
-import com.badlogic.gdx.Net;
-import com.badlogic.gdx.net.NetJavaImpl;
-import com.badlogic.gdx.net.NetJavaServerSocketImpl;
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.iosrobovm;
+
+import org.robovm.apple.foundation.NSURL;
+import org.robovm.apple.uikit.UIApplication;
+
+import com.badlogic.gdx.Net;
+import com.badlogic.gdx.net.NetJavaImpl;
+import com.badlogic.gdx.net.ServerSocket;
+import com.badlogic.gdx.net.ServerSocketHints;
+import com.badlogic.gdx.net.Socket;
+import com.badlogic.gdx.net.SocketHints;
 import com.badlogic.gdx.net.NetJavaSocketImpl;
-import com.badlogic.gdx.net.ServerSocket;
-import com.badlogic.gdx.net.ServerSocketHints;
-import com.badlogic.gdx.net.Socket;
-import com.badlogic.gdx.net.SocketHints;
-
-public class IOSNet implements Net {
-
-	NetJavaImpl netJavaImpl = new NetJavaImpl();
-	final UIApplication uiApp;
-
-	public IOSNet (IOSApplication app) {
-		uiApp = app.uiApp;
-	}
-
-	@Override
-	public void sendHttpRequest (HttpRequest httpRequest, HttpResponseListener httpResponseListener) {
-		netJavaImpl.sendHttpRequest(httpRequest, httpResponseListener);
+import com.badlogic.gdx.net.NetJavaServerSocketImpl;
+
+public class IOSNet implements Net {
+
+	NetJavaImpl netJavaImpl = new NetJavaImpl();
+	final UIApplication uiApp;
+
+	public IOSNet (IOSApplication app) {
+		uiApp = app.uiApp;
+	}
+
+	@Override
+	public void sendHttpRequest (HttpRequest httpRequest, HttpResponseListener httpResponseListener) {
+		netJavaImpl.sendHttpRequest(httpRequest, httpResponseListener);
 	}
-
+	
 	@Override
 	public void cancelHttpRequest (HttpRequest httpRequest) {
 		netJavaImpl.cancelHttpRequest(httpRequest);
-	}
-
-	@Override
-	public ServerSocket newServerSocket (Protocol protocol, int port, ServerSocketHints hints) {
-		return new NetJavaServerSocketImpl(protocol, port, hints);
-	}
-
-	@Override
-	public Socket newClientSocket (Protocol protocol, String host, int port, SocketHints hints) {
-		return new NetJavaSocketImpl(protocol, host, port, hints);
-	}
-
-	@Override
-	public void openURI (String URI) {
-		uiApp.openURL(new NSURL(URI));
-	}
-}
+	}
+
+	@Override
+	public ServerSocket newServerSocket (Protocol protocol, int port, ServerSocketHints hints) {
+		return new NetJavaServerSocketImpl(protocol, port, hints);
+	}
+
+	@Override
+	public Socket newClientSocket (Protocol protocol, String host, int port, SocketHints hints) {
+		return new NetJavaSocketImpl(protocol, host, port, hints);
+	}
+
+	@Override
+	public void openURI (String URI) {
+		uiApp.openURL(new NSURL(URI));
+	}
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSPreferences.java b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSPreferences.java
index 1306195..4f9ea07 100644
--- a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSPreferences.java
+++ b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSPreferences.java
@@ -12,10 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.backends.iosrobovm;
-
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.iosrobovm;
+
 import java.io.File;
 import java.util.HashMap;
 import java.util.Map;
@@ -25,165 +25,174 @@ import org.robovm.apple.foundation.NSMutableDictionary;
 import org.robovm.apple.foundation.NSNumber;
 import org.robovm.apple.foundation.NSObject;
 import org.robovm.apple.foundation.NSString;
+import org.robovm.objc.ObjCClass;
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Preferences;
-
-public class IOSPreferences implements Preferences {
-
-	NSMutableDictionary<NSString, NSObject> nsDictionary;
-	String filePath;
-
-	public IOSPreferences (NSMutableDictionary<NSString, NSObject> nsDictionary, String filePath) {
-		this.nsDictionary = nsDictionary;
-		this.filePath = filePath;
-	}
-
-	@Override
-	public void putBoolean (String key, boolean val) {
-		nsDictionary.put(convertKey(key), NSNumber.valueOf(val));
-	}
-
-	@Override
-	public void putInteger (String key, int val) {
-		nsDictionary.put(convertKey(key), NSNumber.valueOf(val));
-	}
-
-	@Override
-	public void putLong (String key, long val) {
-		nsDictionary.put(convertKey(key), NSNumber.valueOf(val));
-	}
-
-	@Override
-	public void putFloat (String key, float val) {
-		nsDictionary.put(convertKey(key), NSNumber.valueOf(val));
-	}
-
-	@Override
-	public void putString (String key, String val) {
-		nsDictionary.put(convertKey(key), new NSString(val));
-	}
-
-	@Override
-	public void put (Map<String, ?> vals) {
-		Set<String> keySet = vals.keySet();
-		for (String key : keySet) {
-			Object value = vals.get(key);
-			if (value instanceof String) {
-				putString(key, (String)value);
-			} else if (value instanceof Boolean) {
-				putBoolean(key, (Boolean)value);
-			} else if (value instanceof Integer) {
-				putInteger(key, (Integer)value);
-			} else if (value instanceof Long) {
-				putLong(key, (Long)value);
-			} else if (value instanceof Float) {
-				putFloat(key, (Float)value);
-			}
-		}
-	}
-
-	@Override
-	public boolean getBoolean (String key) {
-		NSNumber value = (NSNumber)nsDictionary.get(convertKey(key));
-		if (value == null) return false;
-		return value.booleanValue();
-	}
-
-	@Override
-	public int getInteger (String key) {
-		NSNumber value = (NSNumber)nsDictionary.get(convertKey(key));
-		if (value == null) return 0;
-		return value.intValue();
-	}
-
-	@Override
-	public long getLong (String key) {
-		NSNumber value = (NSNumber)nsDictionary.get(convertKey(key));
-		if (value == null) return 0L;
-		return value.longValue();
-	}
-
-	@Override
-	public float getFloat (String key) {
-		NSNumber value = (NSNumber)nsDictionary.get(convertKey(key));
-		if (value == null) return 0f;
-		return value.floatValue();
-	}
-
-	@Override
-	public String getString (String key) {
-		NSString value = (NSString)nsDictionary.get(convertKey(key));
-		if (value == null) return "";
-		return value.toString();
-	}
-
-	@Override
-	public boolean getBoolean (String key, boolean defValue) {
-		if (!contains(key)) return defValue;
-		return getBoolean(key);
-	}
-
-	@Override
-	public int getInteger (String key, int defValue) {
-		if (!contains(key)) return defValue;
-		return getInteger(key);
-	}
-
-	@Override
-	public long getLong (String key, long defValue) {
-		if (!contains(key)) return defValue;
-		return getLong(key);
-	}
-
-	@Override
-	public float getFloat (String key, float defValue) {
-		if (!contains(key)) return defValue;
-		return getFloat(key);
-	}
-
-	@Override
-	public String getString (String key, String defValue) {
-		if (!contains(key)) return defValue;
-		return getString(key);
-	}
-
-	@Override
-	public Map<String, ?> get () {
-		Map<String, Object> map = new HashMap<String, Object>();
-		for (NSString key : nsDictionary.keySet()) {
-			NSObject value = nsDictionary.get(key);
-			map.put(key.toString(), value.toString());
-		}
-		return map;
-	}
-
-	@Override
-	public boolean contains (String key) {
-		return nsDictionary.containsKey(convertKey(key));
-	}
-
-	@Override
-	public void clear () {
-		nsDictionary.clear();
-	}
-
-	@Override
-	public void remove (String key) {
-		nsDictionary.remove(convertKey(key));
-	}
-
-	private NSString convertKey (String key) {
-		return new NSString(key);
-	}
-
-	@Override
-	public void flush () {
-		boolean fileWritten = nsDictionary.write(new File(filePath), false);
-		if (fileWritten)
-			Gdx.app.debug("IOSPreferences", "NSDictionary file written");
-		else
-			Gdx.app.debug("IOSPreferences", "Failed to write NSDictionary to file " + filePath);
-	}
-
-}
+
+public class IOSPreferences implements Preferences {
+
+	static {
+		// FIXME: Work around for a bug in RoboVM (https://github.com/robovm/robovm/issues/155).
+		//        These calls make sure NSNumber and NSString have been registered properly with the
+		//        RoboVM Objective-C bridge. Without them the get-methods below may throw ClassCastException.
+		ObjCClass.getByType(NSNumber.class);
+		ObjCClass.getByType(NSString.class);
+	}
+	
+	NSMutableDictionary<NSString, NSObject> nsDictionary;
+	String filePath;
+
+	public IOSPreferences (NSMutableDictionary<NSString, NSObject> nsDictionary, String filePath) {
+		this.nsDictionary = nsDictionary;
+		this.filePath = filePath;
+	}
+
+	@Override
+	public void putBoolean (String key, boolean val) {
+		nsDictionary.put(convertKey(key), NSNumber.valueOf(val));
+	}
+
+	@Override
+	public void putInteger (String key, int val) {
+		nsDictionary.put(convertKey(key), NSNumber.valueOf(val));
+	}
+
+	@Override
+	public void putLong (String key, long val) {
+		nsDictionary.put(convertKey(key), NSNumber.valueOf(val));
+	}
+
+	@Override
+	public void putFloat (String key, float val) {
+		nsDictionary.put(convertKey(key), NSNumber.valueOf(val));
+	}
+
+	@Override
+	public void putString (String key, String val) {
+		nsDictionary.put(convertKey(key), new NSString(val));
+	}
+
+	@Override
+	public void put (Map<String, ?> vals) {
+		Set<String> keySet = vals.keySet();
+		for (String key : keySet) {
+			Object value = vals.get(key);
+			if (value instanceof String) {
+				putString(key, (String)value);
+			} else if (value instanceof Boolean) {
+				putBoolean(key, (Boolean)value);
+			} else if (value instanceof Integer) {
+				putInteger(key, (Integer)value);
+			} else if (value instanceof Long) {
+				putLong(key, (Long)value);
+			} else if (value instanceof Float) {
+				putFloat(key, (Float)value);
+			}
+		}
+	}
+
+	@Override
+	public boolean getBoolean (String key) {
+		NSNumber value = (NSNumber)nsDictionary.get(convertKey(key));
+		if (value == null) return false;
+		return value.booleanValue();
+	}
+
+	@Override
+	public int getInteger (String key) {
+		NSNumber value = (NSNumber)nsDictionary.get(convertKey(key));
+		if (value == null) return 0;
+		return value.intValue();
+	}
+
+	@Override
+	public long getLong (String key) {
+		NSNumber value = (NSNumber)nsDictionary.get(convertKey(key));
+		if (value == null) return 0L;
+		return value.longValue();
+	}
+
+	@Override
+	public float getFloat (String key) {
+		NSNumber value = (NSNumber)nsDictionary.get(convertKey(key));
+		if (value == null) return 0f;
+		return value.floatValue();
+	}
+
+	@Override
+	public String getString (String key) {
+		NSString value = (NSString)nsDictionary.get(convertKey(key));
+		if (value == null) return "";
+		return value.toString();
+	}
+
+	@Override
+	public boolean getBoolean (String key, boolean defValue) {
+		if (!contains(key)) return defValue;
+		return getBoolean(key);
+	}
+
+	@Override
+	public int getInteger (String key, int defValue) {
+		if (!contains(key)) return defValue;
+		return getInteger(key);
+	}
+
+	@Override
+	public long getLong (String key, long defValue) {
+		if (!contains(key)) return defValue;
+		return getLong(key);
+	}
+
+	@Override
+	public float getFloat (String key, float defValue) {
+		if (!contains(key)) return defValue;
+		return getFloat(key);
+	}
+
+	@Override
+	public String getString (String key, String defValue) {
+		if (!contains(key)) return defValue;
+		return getString(key);
+	}
+
+	@Override
+	public Map<String, ?> get () {
+		 Map<String, Object> map = new HashMap<String, Object>();
+		 for (NSString key : nsDictionary.keySet()) {
+			 NSObject value = nsDictionary.get(key);
+			 map.put(key.toString(), value.toString());
+		 }
+		 return map;
+	}
+
+	@Override
+	public boolean contains (String key) {
+		return nsDictionary.containsKey(convertKey(key));
+	}
+
+	@Override
+	public void clear () {
+		nsDictionary.clear();
+	}
+
+	@Override
+	public void remove (String key) {
+		nsDictionary.remove(convertKey(key));
+	}
+
+	private NSString convertKey (String key) {
+		return new NSString(key);
+	}
+
+	@Override
+	public void flush () {
+		boolean fileWritten = nsDictionary.write(new File(filePath), false);
+		if (fileWritten)
+			Gdx.app.debug("IOSPreferences", "NSDictionary file written");
+		else
+			Gdx.app.debug("IOSPreferences", "Failed to write NSDictionary to file " + filePath);
+	}
+
+}
\ No newline at end of file
diff --git a/backends/gdx-backends-gwt/issues.txt b/backends/gdx-backends-gwt/issues.txt
index 061aebc..d6e9e6e 100644
--- a/backends/gdx-backends-gwt/issues.txt
+++ b/backends/gdx-backends-gwt/issues.txt
@@ -11,6 +11,8 @@ DIFFERENCES TO MAIN APIs/UNSUSPECTED BEHAVIOUR
 
 [GwtFileHandle]
 - only internal and defined classpath files are supported.
+- FileHandle#list will not work.
+- Checking FileHandles of directories for their existance will not work, you can however create children etc.
 - if you try to access an audio file or an image file via FileHandle#read() and other such methods,
 you won't get anything sensible.
 - binary files specified in the assets.txt file can be opened but are slow to read, avoid if possible.
@@ -19,6 +21,12 @@ you won't get anything sensible.
 - Reflection is available for defined classes. Please see http://code.google.com/p/libgdx/wiki/Reflection 
 
 DIFFERENCES IN EMULATION
+[Box2D emu]
+- GearJoint, WheelJoint and RopeJoint are not implemented.
+- minor things that could be optimized, e.g. caching of query/contact listeners.
+- PrismaticJoint#getJointTranslation always returns 0, not implemented in JBox2D
+- Contact always reports 2 manifold points, JBox2D doesn't specify the amount of manifold points.
+
 [BufferUtils emu]
 - BufferUtils#newLongBuffer() works but will not return a direct buffer. Since we don't pass long
   buffers to OpenGL ES we should be fine.
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFileHandle.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFileHandle.java
index cb1d435..900f984 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFileHandle.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFileHandle.java
@@ -19,8 +19,6 @@ package com.badlogic.gdx.backends.gwt;
 import java.io.BufferedInputStream;
 import java.io.BufferedReader;
 import java.io.File;
-import java.io.FileFilter;
-import java.io.FilenameFilter;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
@@ -40,18 +38,17 @@ public class GwtFileHandle extends FileHandle {
 	private final String file;
 	private final FileType type;
 
-	public GwtFileHandle (Preloader preloader, String fileName, FileType type) {
-		if (type != FileType.Internal && type != FileType.Classpath)
-			throw new GdxRuntimeException("FileType '" + type + "' Not supported in GWT backend");
+	protected GwtFileHandle (Preloader preloader, String fileName, FileType type) {
+		if (type != FileType.Internal && type != FileType.Classpath) throw new GdxRuntimeException("FileType '" + type + "' Not supported in GWT backend");
 		this.preloader = preloader;
-		this.file = fixSlashes(fileName);
+		this.file = fileName.replace('\\', '/');
 		this.type = type;
 	}
 
 	public GwtFileHandle (String path) {
 		this.type = FileType.Internal;
 		this.preloader = ((GwtApplication)Gdx.app).getPreloader();
-		this.file = fixSlashes(path);
+		this.file = path.replace('\\', '/');
 	}
 
 	public String path () {
@@ -60,7 +57,9 @@ public class GwtFileHandle extends FileHandle {
 
 	public String name () {
 		int index = file.lastIndexOf('/');
+		index = Math.max(index, file.lastIndexOf('\\'));
 		if (index < 0) return file;
+		// FIXME for paths
 		return file.substring(index + 1);
 	}
 
@@ -83,7 +82,7 @@ public class GwtFileHandle extends FileHandle {
 		String path = file;
 		int dotIndex = path.lastIndexOf('.');
 		if (dotIndex == -1) return path;
-		return path.substring(0, dotIndex);
+		return path.substring(0, dotIndex).replace('\\', '/');
 	}
 
 	public FileType type () {
@@ -292,28 +291,12 @@ public class GwtFileHandle extends FileHandle {
 		return preloader.list(file);
 	}
 
-	/** Returns the paths to the children of this directory that satisfy the specified filter. Returns an empty list if this file
-	 * handle represents a file and not a directory. On the desktop, an {@link FileType#Internal} handle to a directory on the
-	 * classpath will return a zero length array.
-	 * @throw GdxRuntimeException if this file is an {@link FileType#Classpath} file. */
-	public FileHandle[] list (FileFilter filter) {
-		return preloader.list(file, filter);
-	}
-
-	/** Returns the paths to the children of this directory that satisfy the specified filter. Returns an empty list if this file
-	 * handle represents a file and not a directory. On the desktop, an {@link FileType#Internal} handle to a directory on the
-	 * classpath will return a zero length array.
-	 * @throw GdxRuntimeException if this file is an {@link FileType#Classpath} file. */
-	public FileHandle[] list (FilenameFilter filter) {
-		return preloader.list(file, filter);
-	}
-
 	/** Returns the paths to the children of this directory with the specified suffix. Returns an empty list if this file handle
 	 * represents a file and not a directory. On the desktop, an {@link FileType#Internal} handle to a directory on the classpath
 	 * will return a zero length array.
 	 * @throw GdxRuntimeException if this file is an {@link FileType#Classpath} file. */
 	public FileHandle[] list (String suffix) {
-		return preloader.list(file, suffix);
+		throw new GdxRuntimeException("Not implemented");
 	}
 
 	/** Returns true if this file is a directory. Always returns false for classpath files. On Android, an {@link FileType#Internal}
@@ -327,19 +310,19 @@ public class GwtFileHandle extends FileHandle {
 	 * @throw GdxRuntimeException if this file handle is a {@link FileType#Classpath} or {@link FileType#Internal} and the child
 	 *        doesn't exist. */
 	public FileHandle child (String name) {
-		return new GwtFileHandle(preloader, (file.isEmpty() ? "" : (file + (file.endsWith("/") ? "" : "/"))) + name,
-			FileType.Internal);
+		return new GwtFileHandle(preloader, (file.isEmpty() ? "" : (file + (file.endsWith("/") ? "" : "/"))) + name, FileType.Internal);
 	}
 
 	public FileHandle parent () {
 		int index = file.lastIndexOf("/");
 		String dir = "";
-		if (index > 0) dir = file.substring(0, index);
+		if (index > 0) dir = file.substring(0, index + 1);
 		return new GwtFileHandle(preloader, dir, type);
 	}
 
 	public FileHandle sibling (String name) {
-		return parent().child(fixSlashes(name));
+		name = name.replace('\\', '/');
+		return parent().child(name);
 	}
 
 	/** @throw GdxRuntimeException if this file handle is a {@link FileType#Classpath} or {@link FileType#Internal} file. */
@@ -400,13 +383,4 @@ public class GwtFileHandle extends FileHandle {
 	public String toString () {
 		return file;
 	}
-
-	private static String fixSlashes(String path) {
-		path = path.replace('\\', '/');
-		if (path.endsWith("/")) {
-			path = path.substring(0, path.length() - 1);
-		}
-		return path;
-	}
-
 }
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/files/FileHandle.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/files/FileHandle.java
index 50300f0..a8a8529 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/files/FileHandle.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/files/FileHandle.java
@@ -18,8 +18,6 @@ package com.badlogic.gdx.files;
 
 import java.io.BufferedInputStream;
 import java.io.BufferedReader;
-import java.io.FileFilter;
-import java.io.FilenameFilter;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.Reader;
@@ -193,22 +191,6 @@ public class FileHandle {
 		throw new GdxRuntimeException("Stub");
 	}
 
-	/** Returns the paths to the children of this directory that satisfy the specified filter. Returns an empty list if this file
-	 * handle represents a file and not a directory. On the desktop, an {@link FileType#Internal} handle to a directory on the
-	 * classpath will return a zero length array.
-	 * @throw GdxRuntimeException if this file is an {@link FileType#Classpath} file. */
-	public FileHandle[] list (FileFilter filter) {
-		throw new GdxRuntimeException("Stub");
-	}
-
-	/** Returns the paths to the children of this directory that satisfy the specified filter. Returns an empty list if this file
-	 * handle represents a file and not a directory. On the desktop, an {@link FileType#Internal} handle to a directory on the
-	 * classpath will return a zero length array.
-	 * @throw GdxRuntimeException if this file is an {@link FileType#Classpath} file. */
-	public FileHandle[] list (FilenameFilter filter) {
-		throw new GdxRuntimeException("Stub");
-	}
-
 	/** Returns the paths to the children of this directory. Returns an empty list if this file handle represents a file and not a
 	 * directory. On the desktop, an {@link FileType#Internal} handle to a directory on the classpath will return a zero length
 	 * array.
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/java/io/FileFilter.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/java/io/FileFilter.java
deleted file mode 100644
index c2599b5..0000000
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/java/io/FileFilter.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package java.io;
-
-public interface FileFilter {
-
-	boolean accept (File file);
-
-}
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/Preloader.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/Preloader.java
index e093b4e..07a96b9 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/Preloader.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/Preloader.java
@@ -17,14 +17,9 @@
 package com.badlogic.gdx.backends.gwt.preloader;
 
 import java.io.ByteArrayInputStream;
-import java.io.File;
-import java.io.FileFilter;
-import java.io.FilenameFilter;
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
 
-import com.badlogic.gdx.Files.FileType;
-import com.badlogic.gdx.backends.gwt.GwtFileHandle;
 import com.badlogic.gdx.backends.gwt.preloader.AssetDownloader.AssetLoaderListener;
 import com.badlogic.gdx.backends.gwt.preloader.AssetFilter.AssetType;
 import com.badlogic.gdx.files.FileHandle;
@@ -44,7 +39,6 @@ public class Preloader {
 		
 	}
 
-	public ObjectMap<String, Void> directories = new ObjectMap<String, Void>();
 	public ObjectMap<String, ImageElement> images = new ObjectMap<String, ImageElement>();
 	public ObjectMap<String, Void> audio = new ObjectMap<String, Void>();
 	public ObjectMap<String, String> texts = new ObjectMap<String, String>();
@@ -184,7 +178,6 @@ public class Preloader {
 								audio.put(asset.url, null);
 								break;
 							case Directory:
-								directories.put(asset.url, null);
 								break;
 							}
 							asset.succeed = true;
@@ -218,7 +211,8 @@ public class Preloader {
 	}
 
 	public boolean contains (String url) {
-		return texts.containsKey(url) || images.containsKey(url) || binaries.containsKey(url) || audio.containsKey(url) || directories.containsKey(url);
+		// FIXME should also check if directory exists
+		return texts.containsKey(url) || images.containsKey(url) || binaries.containsKey(url) || audio.containsKey(url);
 	}
 
 	public boolean isText (String url) {
@@ -237,60 +231,12 @@ public class Preloader {
 		return audio.containsKey(url);
 	}
 
-	public boolean isDirectory (String url) {
-		return directories.containsKey(url);
-	}
-
-	private boolean isChild(String path, String url) {
-		return path.startsWith(url) && (path.indexOf('/', url.length() + 1) < 0);
-	}
-
 	public FileHandle[] list (String url) {
-		Array<FileHandle> files = new Array<FileHandle>();
-		for (String path : texts.keys()) {
-			if (isChild(path, url)) {
-				files.add(new GwtFileHandle(this, path, FileType.Internal));
-			}
-		}
-		FileHandle[] list = new FileHandle[files.size];
-		System.arraycopy(files.items, 0, list, 0, list.length);
-		return list;
+		throw new GdxRuntimeException("Not implemented"); // FIXME
 	}
 
-	public FileHandle[] list (String url, FileFilter filter) {
-		Array<FileHandle> files = new Array<FileHandle>();
-		for (String path : texts.keys()) {
-			if (isChild(path, url) && filter.accept(new File(path))) {
-				files.add(new GwtFileHandle(this, path, FileType.Internal));
-			}
-		}
-		FileHandle[] list = new FileHandle[files.size];
-		System.arraycopy(files.items, 0, list, 0, list.length);
-		return list;
-	}
-
-	public FileHandle[] list (String url, FilenameFilter filter) {
-		Array<FileHandle> files = new Array<FileHandle>();
-		for (String path : texts.keys()) {
-			if (isChild(path, url) && filter.accept(new File(url), path.substring(url.length() + 1))) {
-				files.add(new GwtFileHandle(this, path, FileType.Internal));
-			}
-		}
-		FileHandle[] list = new FileHandle[files.size];
-		System.arraycopy(files.items, 0, list, 0, list.length);
-		return list;
-	}
-
-	public FileHandle[] list (String url, String suffix) {
-		Array<FileHandle> files = new Array<FileHandle>();
-		for (String path : texts.keys()) {
-			if (isChild(path, url) && path.endsWith(suffix)) {
-				files.add(new GwtFileHandle(this, path, FileType.Internal));
-			}
-		}
-		FileHandle[] list = new FileHandle[files.size];
-		System.arraycopy(files.items, 0, list, 0, list.length);
-		return list;
+	public boolean isDirectory (String url) {
+		throw new GdxRuntimeException("Not implemented"); // FIXME
 	}
 
 	public long length (String url) {
@@ -312,5 +258,4 @@ public class Preloader {
 		}
 		return 0;
 	}
-
 }
diff --git a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/OisControllers.java b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/OisControllers.java
index a3bdf64..566609c 100644
--- a/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/OisControllers.java
+++ b/extensions/gdx-controllers/gdx-controllers-desktop/src/com/badlogic/gdx/controllers/desktop/OisControllers.java
@@ -40,11 +40,10 @@ import javax.swing.SwingUtilities;
 /** @author Nathan Sweet */
 public class OisControllers {
 	final DesktopControllerManager manager;
-	long hwnd = getWindowHandle();
-	Ois ois = new Ois(hwnd);
-	OisController[] controllers;
+	final Ois ois = new Ois(getWindowHandle());
+	final OisController[] controllers;
 
-	public OisControllers (final DesktopControllerManager manager) {
+	public OisControllers (DesktopControllerManager manager) {
 		this.manager = manager;
 		ArrayList<OisJoystick> joysticks = ois.getJoysticks();
 		controllers = new OisController[joysticks.size()];
@@ -56,20 +55,6 @@ public class OisControllers {
 
 		new Runnable() {
 			public void run () {
-				long newWindowHandle = getWindowHandle();
-				if(hwnd != newWindowHandle){
-					hwnd = newWindowHandle;
-					ois = new Ois(newWindowHandle);
-					
-					ArrayList<OisJoystick> joysticks = ois.getJoysticks();
-					controllers = new OisController[joysticks.size()];
-					manager.controllers.clear();
-					for (int i = 0, n = joysticks.size(); i < n; i++) {
-						OisJoystick joystick = joysticks.get(i);
-						controllers[i] = new OisController(joystick);
-						manager.controllers.add(controllers[i]);
-					}
-				}
 				ois.update();
 				Gdx.app.postRunnable(this);
 			}
diff --git a/extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java b/extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
index 3cd4192..78c86a5 100644
--- a/extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
+++ b/extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java
@@ -158,34 +158,12 @@ public class FreeTypeFontGenerator implements Disposable {
 
 	/** Uses ascender and descender of font to calculate real height that makes all glyphs to fit in given pixel size. Source:
 	 * http://nothings.org/stb/stb_truetype.h / stbtt_ScaleForPixelHeight */
-	public int scaleForPixelHeight (int height) {
-		if (!bitmapped && !FreeType.setPixelSizes(face, 0, height)) throw new GdxRuntimeException("Couldn't set size for font");
-		SizeMetrics fontMetrics = face.getSize().getMetrics();
-		int ascent = FreeType.toInt(fontMetrics.getAscender());
-		int descent = FreeType.toInt(fontMetrics.getDescender());
-		return height * height / (ascent - descent);
-	}
-	
-	/** Uses max advance, ascender and descender of font to calculate real height that makes any n glyphs to fit in given pixel width. 
-	 * @param width the max width to fit (in pixels)
-	 * @param numChars max number of characters that to fill width */
-	public int scaleForPixelWidth(int width, int numChars) {
+	public int scaleForPixelHeight (int size) {
+		if (!bitmapped && !FreeType.setPixelSizes(face, 0, size)) throw new GdxRuntimeException("Couldn't set size for font");
 		SizeMetrics fontMetrics = face.getSize().getMetrics();
-		int advance = FreeType.toInt(fontMetrics.getMaxAdvance());
 		int ascent = FreeType.toInt(fontMetrics.getAscender());
 		int descent = FreeType.toInt(fontMetrics.getDescender());
-		int unscaledHeight = ascent - descent;
-		int height = unscaledHeight * width / (advance * numChars);
-		if (!bitmapped && !FreeType.setPixelSizes(face, 0, height)) throw new GdxRuntimeException("Couldn't set size for font");
-		return height;
-	}
-	
-	/** Uses max advance, ascender and descender of font to calculate real height that makes any n glyphs to fit in given pixel width and height. 
-	 * @param width the max width to fit (in pixels)
-	 * @param height the max height to fit (in pixels)
-	 * @param numChars max number of characters that to fill width */
-	public int scaleToFitSquare(int width, int height, int numChars) {
-		return Math.min(scaleForPixelHeight(height), scaleForPixelWidth(width, numChars));
+		return size * size / (ascent - descent);
 	}
 
 	public class GlyphAndBitmap {
diff --git a/extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java b/extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
index c6e9e75..1a51ac8 100644
--- a/extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
+++ b/extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java
@@ -11,16 +11,14 @@ public class DependencyBank {
 	//Temporary snapshot version, we need a more dynamic solution for pointing to the latest nightly
 	static String libgdxNightlyVersion = "1.0.1-SNAPSHOT";
 	static String roboVMVersion = "0.0.11";
-	static String buildToolsVersion = "19.0.3";
-	static String androidAPILevel = "19";
 
 	//Repositories
 	static String gwtPluginUrl = "https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/";
 	static String libGDXSnapshotsUrl = "https://oss.sonatype.org/content/repositories/snapshots/";
 
 	//Project plugins
-	static String gwtPluginImport = "de.richsource.gradle.plugins:gwt-gradle-plugin:0.4";
-	static String androidPluginImport = "com.android.tools.build:gradle:0.10+";
+	static String gwtPluginImport = "de.richsource.gradle.plugins:gwt-gradle-plugin:0.3";
+	static String androidPluginImport = "com.android.tools.build:gradle:0.9+";
 	static String roboVMPluginImport = "com.github.jtakakura:gradle-robovm-plugin:0.0.7";
 
 	HashMap<ProjectDependency, Dependency> gdxDependencies = new HashMap<ProjectDependency, Dependency>();
@@ -80,17 +78,17 @@ public class DependencyBank {
 			null
 		),
 		TOOLS(
-			new String[]{},
+			null,
 			new String[]{"com.badlogicgames.gdx:gdx-tools:$gdxVersion"},
-			new String[]{},
-			new String[]{},
-			new String[]{}
+			null,
+			null,
+			null
 		),
 		CONTROLLERS(
 			new String[]{"com.badlogicgames.gdx:gdx-controllers:$gdxVersion"},
 			new String[]{"com.badlogicgames.gdx:gdx-controllers-desktop:$gdxVersion", "com.badlogicgames.gdx:gdx-controllers-platform:$gdxVersion:natives-desktop"},
 			new String[]{"com.badlogicgames.gdx:gdx-controllers:$gdxVersion", "com.badlogicgames.gdx:gdx-controllers-android:$gdxVersion"},
-			new String[] {}, // works on iOS but never reports any controllers :)
+			new String[] { }, // works on iOS but never reports any controllers :)
 			new String[]{"com.badlogicgames.gdx:gdx-controllers:$gdxVersion:sources", "com.badlogicgames.gdx:gdx-controllers-gwt:$gdxVersion", "com.badlogicgames.gdx:gdx-controllers-gwt:$gdxVersion:sources"}
 		),
 		BOX2D(
diff --git a/extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java b/extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
index 4b46879..62dffb4 100644
--- a/extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
+++ b/extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetup.java
@@ -41,29 +41,6 @@ public class GdxSetup {
 		}
 	}
 
-	public static boolean isSdkUpToDate (String sdkLocation) {
-		boolean hasTools = false;
-		boolean hasApi = false;
-		File buildTools = new File(sdkLocation, "build-tools");
-		if (!buildTools.exists()) {
-			return false;
-		}
-		for (File toolsVersion : buildTools.listFiles()) {
-			if (toolsVersion.getName().equals(DependencyBank.buildToolsVersion)) {
-				hasTools = true;
-				break;
-			}
-		}
-		File apis = new File(sdkLocation, "platforms");
-		for (File api : apis.listFiles()) {
-			if (api.getName().equals("android-" + DependencyBank.androidAPILevel)) {
-				hasApi = true;
-				break;
-			}
-		}
-		return hasTools && hasApi;
-	}
-
 	public void build (ProjectBuilder builder, String outputDir, String appName, String packageName, String mainClass,
 		String sdkLocation, CharCallback callback) {
 		Project project = new Project();
@@ -155,8 +132,6 @@ public class GdxSetup {
 		values.put("%MAIN_CLASS%", mainClass);
 		values.put("%ANDROID_SDK%", sdkPath);
 		values.put("%ASSET_PATH%", assetPath);
-		values.put("%BUILD_TOOLS_VERSION%", DependencyBank.buildToolsVersion);
-		values.put("%API_LEVEL%", DependencyBank.androidAPILevel);
 		if (builder.modules.contains(ProjectType.HTML)) {
 			values.put("%GWT_INHERITS%", parseGwtInherits(builder.bank.gwtInheritances, builder));
 		}
diff --git a/extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java b/extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java
index db56d46..8a9d9b3 100644
--- a/extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java
+++ b/extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java
@@ -155,10 +155,6 @@ public class GdxSetupUI extends JFrame {
 			return;
 		}
 
-		if (!GdxSetup.isSdkUpToDate(sdkLocation) && modules.contains(ProjectType.ANDROID)) {
-			JOptionPane.showMessageDialog(this, "Please update your Android SDK, you need: \nAndroid API " + DependencyBank.androidAPILevel + "\nAndroid Build Tools " + DependencyBank.buildToolsVersion);
-		}
-
 		if (!GdxSetup.isEmptyDirectory(destination)) {
 			int value = JOptionPane.showConfirmDialog(this, "The destination is not empty, do you want to overwrite?", "Warning!", JOptionPane.YES_NO_OPTION);
 			if (value == 1) {
@@ -492,7 +488,7 @@ public class GdxSetupUI extends JFrame {
 			versionButton.addItemListener(new ItemListener() {
 				@Override
 				public void itemStateChanged (ItemEvent e) {
-					JComboBox list = (JComboBox) e.getSource();
+					JComboBox list = (JComboBox)e.getSource();
 					if (list.getSelectedItem().equals("Nightlies")) {
 						nightlyWarning.setVisible(true);
 					} else {
diff --git a/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/android/AndroidManifest.xml b/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/android/AndroidManifest.xml
index 9fb29d1..fcc4d8e 100644
--- a/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/android/AndroidManifest.xml
+++ b/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/android/AndroidManifest.xml
@@ -4,7 +4,7 @@
     android:versionCode="1"
     android:versionName="1.0" >
 
-    <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="%API_LEVEL%" />
+    <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />
 
     <application
         android:allowBackup="true"
diff --git a/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/android/build.gradle b/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/android/build.gradle
index f22bd9c..798d49e 100644
--- a/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/android/build.gradle
+++ b/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/android/build.gradle
@@ -1,6 +1,6 @@
 android {
-    buildToolsVersion "%BUILD_TOOLS_VERSION%"
-    compileSdkVersion %API_LEVEL%
+    buildToolsVersion "19.0.3"
+    compileSdkVersion 19
     sourceSets {
         main {
             manifest.srcFile 'AndroidManifest.xml'
diff --git a/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/gitignore b/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/gitignore
index c51d55f..96996af 100644
--- a/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/gitignore
+++ b/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/gitignore
@@ -7,21 +7,21 @@ hs_err_pid*
 
 ## GWT
 war/
-html/war/gwt_bree/
-html/gwt-unitCache/
+war/gwt_bree/
+gwt-unitCache/
 .apt_generated/
-html/war/WEB-INF/deploy/
-html/war/WEB-INF/classes/
+war/WEB-INF/deploy/
+war/WEB-INF/classes/
 .gwt/
 gwt-unitCache/
 www-test/
 .gwt-tmp/
 
 ## Android Studio and Intellij and Android in general
-android/libs/armeabi/
-android/libs/armeabi-v7a/
-android/libs/x86/
-android/gen/
+libs/armeabi/
+libs/armeabi-v7a/
+libs/x86/
+gen/
 .idea/
 *.ipr
 *.iws
@@ -33,7 +33,7 @@ com_crashlytics_export_strings.xml
 .classpath
 .project
 .metadata
-**/bin/
+bin/
 tmp/
 *.tmp
 *.bak
@@ -46,7 +46,7 @@ local.properties
 *.launch
 
 ## NetBeans
-**/nbproject/private/
+nbproject/private/
 build/
 nbbuild/
 dist/
diff --git a/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/gradle/wrapper/gradle-wrapper.properties b/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/gradle/wrapper/gradle-wrapper.properties
index 2aa11d3..07867f6 100644
--- a/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/gradle/wrapper/gradle-wrapper.properties
+++ b/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=http\://services.gradle.org/distributions/gradle-1.11-all.zip
+distributionUrl=http\://services.gradle.org/distributions/gradle-1.10-all.zip
diff --git a/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/html/build.gradle b/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/html/build.gradle
index 4733666..78e2868 100644
--- a/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/html/build.gradle
+++ b/extensions/gdx-setup/src/com/badlogic/gdx/setup/resources/html/build.gradle
@@ -30,7 +30,7 @@ task superDev(type: de.richsource.gradle.plugins.gwt.GwtSuperDev) {
     gwt.modules = gwt.devModules
 }
 
-task dist(dependsOn: [clean, compileGwt]) {
+task dist(dependsOn: compileGwt) {
     doLast {
         file("build/dist").mkdirs()
         copy {
diff --git a/extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePacker.java b/extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePacker.java
index 1d8c88f..9d63052 100644
--- a/extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePacker.java
+++ b/extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePacker.java
@@ -296,7 +296,6 @@ public class TexturePacker {
 		FileWriter writer = new FileWriter(packFile, true);
 		for (Page page : pages) {
 			writer.write("\n" + page.imageName + "\n");
-			writer.write("size: " + page.width + "," + page.height + "\n");
 			writer.write("format: " + settings.format + "\n");
 			writer.write("filter: " + settings.filterMin + "," + settings.filterMag + "\n");
 			writer.write("repeat: " + getRepeatValue() + "\n");
diff --git a/extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TextureUnpacker.java b/extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TextureUnpacker.java
index bffb63c..a26ecc6 100644
--- a/extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TextureUnpacker.java
+++ b/extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TextureUnpacker.java
@@ -16,53 +16,47 @@
 
 package com.badlogic.gdx.tools.texturepacker;
 
-import java.awt.geom.AffineTransform;
-import java.awt.image.AffineTransformOp;
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.Pixmap.Format;
+import com.badlogic.gdx.graphics.Texture.TextureFilter;
+import com.badlogic.gdx.graphics.Texture.TextureWrap;
+import com.badlogic.gdx.graphics.g2d.TextureAtlas;
+import com.badlogic.gdx.graphics.g2d.TextureAtlas.TextureAtlasData;
+import com.badlogic.gdx.graphics.g2d.TextureAtlas.TextureAtlasData.Region;
+import com.badlogic.gdx.math.MathUtils;
+import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+
+import java.awt.Color;
+import java.awt.Graphics2D;
 import java.awt.image.BufferedImage;
 import java.io.File;
-import java.io.FileOutputStream;
+import java.io.FileWriter;
 import java.io.IOException;
+import java.util.Comparator;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
 
+import javax.imageio.IIOImage;
 import javax.imageio.ImageIO;
+import javax.imageio.ImageWriteParam;
+import javax.imageio.ImageWriter;
+import javax.imageio.stream.ImageOutputStream;
 
-import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.g2d.TextureAtlas.TextureAtlasData;
-import com.badlogic.gdx.graphics.g2d.TextureAtlas.TextureAtlasData.Region;
-
-/** @author Nathan Sweet, Michael Bazos */
+/** @author Nathan Sweet */
 public class TextureUnpacker {
-	/** @param output Directory where the images will be written.
-	 * @throws IOException */
-	static public void process (TextureAtlasData atlasData, String output) throws IOException {
-		for (Region region : atlasData.getRegions()) {
-			BufferedImage src = ImageIO.read(region.page.textureFile.read());
-			BufferedImage subimage = null;
-
-			System.out.println(String.format("processing image for %s x[%s] y[%s] w[%s] h[%s], rotate[%s]", region.name,
-				region.left, region.top, region.width, region.height, region.rotate));
-
-			if (region.rotate) {
-				BufferedImage unRotatedImage = src.getSubimage(region.left, region.top, region.height, region.width);
-				double rotationRequired = Math.toRadians(90.0);
-				double locationX = unRotatedImage.getWidth() / 2;
-				double locationY = unRotatedImage.getHeight() / 2;
-				AffineTransform tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
-				AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);
-				subimage = op.filter(unRotatedImage, subimage);
-
-			} else {
-				subimage = src.getSubimage(region.left, region.top, region.width, region.height);
-			}
-
-			ImageIO.write(subimage, "PNG", new FileOutputStream(output + File.separator + region.name + ".png"));
-		}
+	/** @param output Directory where the images will be written. */
+	static public void process (TextureAtlas atlas, String output) {
 
 	}
 
 	static public void main (String[] args) throws Exception {
-		String input = null, output = null;
+		String input = null, output = null, packFileName = "pack.atlas";
 
 		switch (args.length) {
+		case 3:
+			packFileName = args[2];
 		case 2:
 			output = args[1];
 		case 1:
@@ -73,19 +67,11 @@ public class TextureUnpacker {
 			System.exit(0);
 		}
 
-		FileHandle inputFileHandle = new FileHandle(input);
-		File inputFile = inputFileHandle.file();
-
 		if (output == null) {
-			File outputFile = new File(inputFile.getParentFile(), "output");
-			if (!outputFile.exists()) {
-				outputFile.mkdir();
-			}
-			output = outputFile.getAbsolutePath();
+			File inputFile = new File(input);
+			output = new File(inputFile.getParentFile(), inputFile.getName() + "-packed").getAbsolutePath();
 		}
 
-		TextureAtlasData atlasData = new TextureAtlasData(inputFileHandle, inputFileHandle.parent(), false);
-
-		process(atlasData, output);
+		// process(input, output, packFileName);
 	}
 }
diff --git a/gdx/src/com/badlogic/gdx.gwt.xml b/gdx/src/com/badlogic/gdx.gwt.xml
index 4add890..a0695cc 100644
--- a/gdx/src/com/badlogic/gdx.gwt.xml
+++ b/gdx/src/com/badlogic/gdx.gwt.xml
@@ -258,7 +258,6 @@
 		<include name="maps/tiled/renderers/HexagonalTiledMapRenderer.java"/>
 		<include name="maps/tiled/renderers/IsometricStaggeredTiledMapRenderer.java"/>
 		<include name="maps/tiled/renderers/IsometricTiledMapRenderer.java"/>
-		<include name="maps/tiled/renderers/OrthoCachedTiledMapRenderer.java"/>
 		<include name="maps/tiled/renderers/OrthogonalTiledMapRenderer.java"/>
 
 	<!-- maps/tiles/tiles -->
diff --git a/gdx/src/com/badlogic/gdx/assets/loaders/MusicLoader.java b/gdx/src/com/badlogic/gdx/assets/loaders/MusicLoader.java
index 8030d92..f4dea3e 100644
--- a/gdx/src/com/badlogic/gdx/assets/loaders/MusicLoader.java
+++ b/gdx/src/com/badlogic/gdx/assets/loaders/MusicLoader.java
@@ -41,8 +41,6 @@ public class MusicLoader extends AsynchronousAssetLoader<Music, MusicLoader.Musi
 
 	@Override
 	public Music loadSync (AssetManager manager, String fileName, FileHandle file, MusicParameter parameter) {
-		Music music = this.music;
-		this.music = null;
 		return music;
 	}
 
diff --git a/gdx/src/com/badlogic/gdx/assets/loaders/PixmapLoader.java b/gdx/src/com/badlogic/gdx/assets/loaders/PixmapLoader.java
index af7336e..d454755 100644
--- a/gdx/src/com/badlogic/gdx/assets/loaders/PixmapLoader.java
+++ b/gdx/src/com/badlogic/gdx/assets/loaders/PixmapLoader.java
@@ -40,8 +40,6 @@ public class PixmapLoader extends AsynchronousAssetLoader<Pixmap, PixmapLoader.P
 
 	@Override
 	public Pixmap loadSync (AssetManager manager, String fileName, FileHandle file, PixmapParameter parameter) {
-		Pixmap pixmap = this.pixmap;
-		this.pixmap = null;
 		return pixmap;
 	}
 
diff --git a/gdx/src/com/badlogic/gdx/assets/loaders/SoundLoader.java b/gdx/src/com/badlogic/gdx/assets/loaders/SoundLoader.java
index 28a097c..ac54e9b 100644
--- a/gdx/src/com/badlogic/gdx/assets/loaders/SoundLoader.java
+++ b/gdx/src/com/badlogic/gdx/assets/loaders/SoundLoader.java
@@ -41,8 +41,6 @@ public class SoundLoader extends AsynchronousAssetLoader<Sound, SoundLoader.Soun
 
 	@Override
 	public Sound loadSync (AssetManager manager, String fileName, FileHandle file, SoundParameter parameter) {
-		Sound sound = this.sound;
-		this.sound = null;
 		return sound;
 	}
 
diff --git a/gdx/src/com/badlogic/gdx/files/FileHandle.java b/gdx/src/com/badlogic/gdx/files/FileHandle.java
index ac4899f..7614cc3 100644
--- a/gdx/src/com/badlogic/gdx/files/FileHandle.java
+++ b/gdx/src/com/badlogic/gdx/files/FileHandle.java
@@ -16,14 +16,18 @@
 
 package com.badlogic.gdx.files;
 
+import com.badlogic.gdx.Files;
+import com.badlogic.gdx.Files.FileType;
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+import com.badlogic.gdx.utils.StreamUtils;
+
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
 import java.io.BufferedReader;
 import java.io.File;
-import java.io.FileFilter;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
-import java.io.FilenameFilter;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
@@ -33,12 +37,6 @@ import java.io.Reader;
 import java.io.UnsupportedEncodingException;
 import java.io.Writer;
 
-import com.badlogic.gdx.Files;
-import com.badlogic.gdx.Files.FileType;
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-import com.badlogic.gdx.utils.StreamUtils;
-
 /** Represents a file or directory on the filesystem, classpath, Android SD card, or Android assets directory. FileHandles are
  * created via a {@link Files} instance.
  * 
@@ -398,58 +396,6 @@ public class FileHandle {
 		return handles;
 	}
 
-	/** Returns the paths to the children of this directory that satisfy the specified filter. Returns an empty list if this file
-	 * handle represents a file and not a directory. On the desktop, an {@link FileType#Internal} handle to a directory on the
-	 * classpath will return a zero length array.
-	 * @param filter the {@link FileFilter} to filter files
-	 * @throws GdxRuntimeException if this file is an {@link FileType#Classpath} file. */
-	public FileHandle[] list (FileFilter filter) {
-		if (type == FileType.Classpath) throw new GdxRuntimeException("Cannot list a classpath directory: " + file);
-		File file = file();
-		String[] relativePaths = file.list();
-		if (relativePaths == null) return new FileHandle[0];
-		FileHandle[] handles = new FileHandle[relativePaths.length];
-		int count = 0;
-		for (int i = 0, n = relativePaths.length; i < n; i++) {
-			String path = relativePaths[i];
-			if (!filter.accept(file)) continue;
-			handles[count] = child(path);
-			count++;
-		}
-		if (count < relativePaths.length) {
-			FileHandle[] newHandles = new FileHandle[count];
-			System.arraycopy(handles, 0, newHandles, 0, count);
-			handles = newHandles;
-		}
-		return handles;
-	}
-
-	/** Returns the paths to the children of this directory that satisfy the specified filter. Returns an empty list if this file
-	 * handle represents a file and not a directory. On the desktop, an {@link FileType#Internal} handle to a directory on the
-	 * classpath will return a zero length array.
-	 * @param filter the {@link FilenameFilter} to filter files
-	 * @throws GdxRuntimeException if this file is an {@link FileType#Classpath} file. */
-	public FileHandle[] list (FilenameFilter filter) {
-		if (type == FileType.Classpath) throw new GdxRuntimeException("Cannot list a classpath directory: " + file);
-		File file = file();
-		String[] relativePaths = file.list();
-		if (relativePaths == null) return new FileHandle[0];
-		FileHandle[] handles = new FileHandle[relativePaths.length];
-		int count = 0;
-		for (int i = 0, n = relativePaths.length; i < n; i++) {
-			String path = relativePaths[i];
-			if (!filter.accept(file, path)) continue;
-			handles[count] = child(path);
-			count++;
-		}
-		if (count < relativePaths.length) {
-			FileHandle[] newHandles = new FileHandle[count];
-			System.arraycopy(handles, 0, newHandles, 0, count);
-			handles = newHandles;
-		}
-		return handles;
-	}
-
 	/** Returns the paths to the children of this directory with the specified suffix. Returns an empty list if this file handle
 	 * represents a file and not a directory. On the desktop, an {@link FileType#Internal} handle to a directory on the classpath
 	 * will return a zero length array.
diff --git a/gdx/src/com/badlogic/gdx/graphics/g2d/NinePatch.java b/gdx/src/com/badlogic/gdx/graphics/g2d/NinePatch.java
index d1ff25a..f1119ea 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g2d/NinePatch.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g2d/NinePatch.java
@@ -493,18 +493,6 @@ public class NinePatch {
 		this.padBottom = bottom;
 	}
 
-	/** Multiplies the top/left/bottom/right sizes and padding by the specified amount. */
-	public void scale (float scaleX, float scaleY) {
-		leftWidth *= scaleX;
-		rightWidth *= scaleX;
-		topHeight *= scaleY;
-		bottomHeight *= scaleY;
-		padLeft *= scaleX;
-		padRight *= scaleX;
-		padTop *= scaleY;
-		padBottom *= scaleY;
-	}
-
 	public Texture getTexture () {
 		return texture;
 	}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java b/gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
index 5ae4edf..d6224cd 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
@@ -201,22 +201,6 @@ public class Sprite extends TextureRegion {
 	public void setY (float y) {
 		translateY(y - this.y);
 	}
-	
-	/** Sets the x position so that it is centered on the given x parameter */
-	public void setCenterX(float x){
-		setX(x - width / 2);
-	}
-	
-	/** Sets the y position so that it is centered on the given x parameter */
-	public void setCenterY(float y){
-		setY(y - height / 2);
-	}
-	
-	/** Sets the position so that the sprite is centered on (x, y) */
-	public void setCenter(float x, float y){
-		setCenterX(x);
-		setCenterY(y);
-	}
 
 	/** Sets the x position relative to the current position where the sprite will be drawn. If origin, rotation, or scale are
 	 * changed, it is slightly more efficient to translate after those operations. */
diff --git a/gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java b/gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
index 2714827..42edbc6 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java
@@ -56,7 +56,6 @@ public class TextureAtlas implements Disposable {
 		public static class Page {
 			public final FileHandle textureFile;
 			public Texture texture;
-			public final float width, height;
 			public final boolean useMipMaps;
 			public final Format format;
 			public final TextureFilter minFilter;
@@ -64,10 +63,8 @@ public class TextureAtlas implements Disposable {
 			public final TextureWrap uWrap;
 			public final TextureWrap vWrap;
 
-			public Page (FileHandle handle, float width, float height, boolean useMipMaps, Format format, TextureFilter minFilter,
-				TextureFilter magFilter, TextureWrap uWrap, TextureWrap vWrap) {
-				this.width = width;
-				this.height = height;
+			public Page (FileHandle handle, boolean useMipMaps, Format format, TextureFilter minFilter, TextureFilter magFilter,
+				TextureWrap uWrap, TextureWrap vWrap) {
 				this.textureFile = handle;
 				this.useMipMaps = useMipMaps;
 				this.format = format;
@@ -111,13 +108,7 @@ public class TextureAtlas implements Disposable {
 					else if (pageImage == null) {
 						FileHandle file = imagesDir.child(line);
 
-						float width = 0, height = 0;
-						if (readTuple(reader) == 2) { // size is only optional for an atlas packed with an old TexturePacker.
-							width = Integer.parseInt(tuple[0]);
-							height = Integer.parseInt(tuple[1]);
-							readTuple(reader);
-						}
-						Format format = Format.valueOf(tuple[0]);
+						Format format = Format.valueOf(readValue(reader));
 
 						readTuple(reader);
 						TextureFilter min = TextureFilter.valueOf(tuple[0]);
@@ -135,7 +126,7 @@ public class TextureAtlas implements Disposable {
 							repeatY = Repeat;
 						}
 
-						pageImage = new Page(file, width, height, min.isMipMap(), format, min, max, repeatX, repeatY);
+						pageImage = new Page(file, min.isMipMap(), format, min, max, repeatX, repeatY);
 						pages.add(pageImage);
 					} else {
 						boolean rotate = Boolean.valueOf(readValue(reader));
@@ -436,7 +427,7 @@ public class TextureAtlas implements Disposable {
 		return line.substring(colon + 1).trim();
 	}
 
-	/** Returns the number of tuple values read (1, 2 or 4). */
+	/** Returns the number of tuple values read (2 or 4). */
 	static int readTuple (BufferedReader reader) throws IOException {
 		String line = reader.readLine();
 		int colon = line.indexOf(':');
@@ -444,7 +435,10 @@ public class TextureAtlas implements Disposable {
 		int i = 0, lastMatch = colon + 1;
 		for (i = 0; i < 3; i++) {
 			int comma = line.indexOf(',', lastMatch);
-			if (comma == -1) break;
+			if (comma == -1) {
+				if (i == 0) throw new GdxRuntimeException("Invalid line: " + line);
+				break;
+			}
 			tuple[i] = line.substring(lastMatch, comma).trim();
 			lastMatch = comma + 1;
 		}
@@ -602,7 +596,7 @@ public class TextureAtlas implements Disposable {
 		}
 
 		@Override
-		public void setOriginCenter () {
+		public void setOriginCenter() {
 			super.setOrigin(width / 2 - region.offsetX, height / 2 - region.offsetY);
 		}
 
diff --git a/gdx/src/com/badlogic/gdx/graphics/g2d/TextureRegion.java b/gdx/src/com/badlogic/gdx/graphics/g2d/TextureRegion.java
index 195b029..ff3fd78 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g2d/TextureRegion.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g2d/TextureRegion.java
@@ -235,7 +235,7 @@ public class TextureRegion {
 		}
 	}
 
-	/** Helper function to create tiles out of this TextureRegion starting from the top left corner going to the right and ending at
+	/** Helper function to create tiles out of this TextureRegion starting from the top left corner going to the left and ending at
 	 * the bottom right corner. Only complete tiles will be returned so if the region's width or height are not a multiple of the
 	 * tile width and height not all of the region will be used. This will not work on texture regions returned form a TextureAtlas
 	 * that either have whitespace removed or where flipped before the region is split.
@@ -264,7 +264,7 @@ public class TextureRegion {
 		return tiles;
 	}
 
-	/** Helper function to create tiles out of the given {@link Texture} starting from the top left corner going to the right and
+	/** Helper function to create tiles out of the given {@link Texture} starting from the top left corner going to the left and
 	 * ending at the bottom right corner. Only complete tiles will be returned so if the texture's width or height are not a
 	 * multiple of the tile width and height not all of the texture will be used.
 	 * 
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/FirstPersonCameraController.java b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/FirstPersonCameraController.java
index 87ba514..e2a2f1e 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/FirstPersonCameraController.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/FirstPersonCameraController.java
@@ -37,6 +37,7 @@ public class FirstPersonCameraController extends InputAdapter {
 	private float velocity = 5;
 	private float degreesPerPixel = 0.5f;
 	private final Vector3 tmp = new Vector3();
+	private final Vector3 tmp2 = new Vector3();
 
 	public FirstPersonCameraController (Camera camera) {
 		this.camera = camera;
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureProvider.java b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureProvider.java
index e7606e7..a1cc9f4 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureProvider.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureProvider.java
@@ -31,10 +31,7 @@ public interface TextureProvider {
 	public static class FileTextureProvider implements TextureProvider {
 		@Override
 		public Texture load (String fileName) {
-			Texture result = new Texture(Gdx.files.internal(fileName));
-			result.setFilter(Texture.TextureFilter.Linear, Texture.TextureFilter.Linear);
-			result.setWrap(Texture.TextureWrap.Repeat, Texture.TextureWrap.Repeat);
-			return result;
+			return new Texture(Gdx.files.internal(fileName));
 		}
 	}
 
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/AtlasTmxMapLoader.java b/gdx/src/com/badlogic/gdx/maps/tiled/AtlasTmxMapLoader.java
index 8291852..db77fe1 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/AtlasTmxMapLoader.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/AtlasTmxMapLoader.java
@@ -58,6 +58,8 @@ import com.badlogic.gdx.utils.XmlReader.Element;
 public class AtlasTmxMapLoader extends AsynchronousAssetLoader<TiledMap, AtlasTmxMapLoader.AtlasTiledMapLoaderParameters> {
 
 	public static class AtlasTiledMapLoaderParameters extends AssetLoaderParameters<TiledMap> {
+		/** Whether to load the map for a y-up coordinate system */
+		public boolean yUp = true;
 		/** force texture filters? **/
 		public boolean forceTextureFilters = false;
 		/** The TextureFilter to use for minification, if forceTextureFilter is enabled **/
@@ -75,6 +77,7 @@ public class AtlasTmxMapLoader extends AsynchronousAssetLoader<TiledMap, AtlasTm
 
 	protected XmlReader xml = new XmlReader();
 	protected Element root;
+	protected boolean yUp;
 	protected boolean convertObjectToTileSpace;
 
 	protected int mapTileWidth;
@@ -156,8 +159,10 @@ public class AtlasTmxMapLoader extends AsynchronousAssetLoader<TiledMap, AtlasTm
 	public TiledMap load (String fileName, AtlasTiledMapLoaderParameters parameter) {
 		try {
 			if (parameter != null) {
+				yUp = parameter.yUp;
 				convertObjectToTileSpace = parameter.convertObjectToTileSpace;
 			} else {
+				yUp = true;
 				convertObjectToTileSpace = false;
 			}
 
@@ -223,8 +228,10 @@ public class AtlasTmxMapLoader extends AsynchronousAssetLoader<TiledMap, AtlasTm
 		map = null;
 
 		if (parameter != null) {
+			yUp = parameter.yUp;
 			convertObjectToTileSpace = parameter.convertObjectToTileSpace;
 		} else {
+			yUp = true;
 			convertObjectToTileSpace = false;
 		}
 
@@ -298,9 +305,6 @@ public class AtlasTmxMapLoader extends AsynchronousAssetLoader<TiledMap, AtlasTm
 			int margin = element.getIntAttribute("margin", 0);
 			String source = element.getAttribute("source", null);
 
-			int offsetX = 0;
-			int offsetY = 0;
-
 			String imageSource = "";
 			int imageWidth = 0, imageHeight = 0;
 
@@ -314,11 +318,6 @@ public class AtlasTmxMapLoader extends AsynchronousAssetLoader<TiledMap, AtlasTm
 					tileheight = element.getIntAttribute("tileheight", 0);
 					spacing = element.getIntAttribute("spacing", 0);
 					margin = element.getIntAttribute("margin", 0);
-					Element offset = element.getChildByName("tileoffset");
-					if (offset != null) {
-						offsetX = offset.getIntAttribute("x", 0);
-						offsetY = offset.getIntAttribute("y", 0);
-					}
 					Element imageElement = element.getChildByName("image");
 					imageSource = imageElement.getAttribute("source");
 					imageWidth = imageElement.getIntAttribute("width", 0);
@@ -327,11 +326,6 @@ public class AtlasTmxMapLoader extends AsynchronousAssetLoader<TiledMap, AtlasTm
 					throw new GdxRuntimeException("Error parsing external tileset.");
 				}
 			} else {
-				Element offset = element.getChildByName("tileoffset");
-				if (offset != null) {
-					offsetX = offset.getIntAttribute("x", 0);
-					offsetY = offset.getIntAttribute("y", 0);
-				}
 				Element imageElement = element.getChildByName("image");
 				if (imageElement != null) {
 					imageSource = imageElement.getAttribute("source");
@@ -377,10 +371,13 @@ public class AtlasTmxMapLoader extends AsynchronousAssetLoader<TiledMap, AtlasTm
 				// handle unused tile ids
 				if (region != null) {
 					StaticTiledMapTile tile = new StaticTiledMapTile(region);
+
+					if (!yUp) {
+						region.flip(false, true);
+					}
+
 					int tileid = firstgid + region.index;
 					tile.setId(tileid);
-					tile.setOffsetX(offsetX);
-					tile.setOffsetY(-offsetY);
 					tileset.putTile(tileid, tile);
 				}
 			}
@@ -397,9 +394,8 @@ public class AtlasTmxMapLoader extends AsynchronousAssetLoader<TiledMap, AtlasTm
 						AtlasRegion region = atlas.findRegion(regionName);
 						if (region == null) throw new GdxRuntimeException("Tileset region not found: " + regionName);
 						tile = new StaticTiledMapTile(region);
+						if (!yUp) region.flip(false, true);
 						tile.setId(tileid);
-						tile.setOffsetX(offsetX);
-						tile.setOffsetY(-offsetY);
 						tileset.putTile(tileid, tile);
 					}
 				}
@@ -454,7 +450,7 @@ public class AtlasTmxMapLoader extends AsynchronousAssetLoader<TiledMap, AtlasTm
 					if (tile != null) {
 						Cell cell = createTileLayerCell(flipHorizontally, flipVertically, flipDiagonally);
 						cell.setTile(tile);
-						layer.setCell(x, height - 1 - y, cell);
+						layer.setCell(x, yUp ? height - 1 - y : y, cell);
 					}
 				}
 			}
@@ -493,7 +489,7 @@ public class AtlasTmxMapLoader extends AsynchronousAssetLoader<TiledMap, AtlasTm
 			float scaleY = convertObjectToTileSpace ? 1.0f / mapTileHeight : 1.0f;
 
 			float x = element.getFloatAttribute("x", 0) * scaleX;
-			float y = (mapHeightInPixels - element.getFloatAttribute("y", 0)) * scaleY;
+			float y = (yUp ? mapHeightInPixels - element.getFloatAttribute("y", 0) : element.getFloatAttribute("y", 0)) * scaleY;
 
 			float width = element.getFloatAttribute("width", 0) * scaleX;
 			float height = element.getFloatAttribute("height", 0) * scaleY;
@@ -506,7 +502,10 @@ public class AtlasTmxMapLoader extends AsynchronousAssetLoader<TiledMap, AtlasTm
 					for (int i = 0; i < points.length; i++) {
 						String[] point = points[i].split(",");
 						vertices[i * 2] = Float.parseFloat(point[0]) * scaleX;
-						vertices[i * 2 + 1] = -Float.parseFloat(point[1]) * scaleY;
+						vertices[i * 2 + 1] = Float.parseFloat(point[1]) * scaleY;
+						if (yUp) {
+							vertices[i * 2 + 1] *= -1;
+						}
 					}
 					Polygon polygon = new Polygon(vertices);
 					polygon.setPosition(x, y);
@@ -517,17 +516,20 @@ public class AtlasTmxMapLoader extends AsynchronousAssetLoader<TiledMap, AtlasTm
 					for (int i = 0; i < points.length; i++) {
 						String[] point = points[i].split(",");
 						vertices[i * 2] = Float.parseFloat(point[0]) * scaleX;
-						vertices[i * 2 + 1] = -Float.parseFloat(point[1]) * scaleY;
+						vertices[i * 2 + 1] = Float.parseFloat(point[1]) * scaleY;
+						if (yUp) {
+							vertices[i * 2 + 1] *= -1;
+						}
 					}
 					Polyline polyline = new Polyline(vertices);
 					polyline.setPosition(x, y);
 					object = new PolylineMapObject(polyline);
 				} else if ((child = element.getChildByName("ellipse")) != null) {
-					object = new EllipseMapObject(x, y - height, width, height);
+					object = new EllipseMapObject(x, yUp ? y - height : y, width, height);
 				}
 			}
 			if (object == null) {
-				object = new RectangleMapObject(x, y - height, width, height);
+				object = new RectangleMapObject(x, yUp ? y - height : y, width, height);
 			}
 			object.setName(element.getAttribute("name", null));
 			String type = element.getAttribute("type", null);
@@ -539,7 +541,7 @@ public class AtlasTmxMapLoader extends AsynchronousAssetLoader<TiledMap, AtlasTm
 				object.getProperties().put("gid", gid);
 			}
 			object.getProperties().put("x", x * scaleX);
-			object.getProperties().put("y", (y - height) * scaleY);
+			object.getProperties().put("y", (yUp ? y - height : y) * scaleY);
 			object.setVisible(element.getIntAttribute("visible", 1) == 1);
 			Element properties = element.getChildByName("properties");
 			if (properties != null) {
@@ -567,14 +569,14 @@ public class AtlasTmxMapLoader extends AsynchronousAssetLoader<TiledMap, AtlasTm
 		if (flipDiagonally) {
 			if (flipHorizontally && flipVertically) {
 				cell.setFlipHorizontally(true);
-				cell.setRotation(Cell.ROTATE_270);
+				cell.setRotation(yUp ? Cell.ROTATE_270 : Cell.ROTATE_90);
 			} else if (flipHorizontally) {
-				cell.setRotation(Cell.ROTATE_270);
+				cell.setRotation(yUp ? Cell.ROTATE_270 : Cell.ROTATE_90);
 			} else if (flipVertically) {
-				cell.setRotation(Cell.ROTATE_90);
+				cell.setRotation(yUp ? Cell.ROTATE_90 : Cell.ROTATE_270);
 			} else {
 				cell.setFlipVertically(true);
-				cell.setRotation(Cell.ROTATE_270);
+				cell.setRotation(yUp ? Cell.ROTATE_270 : Cell.ROTATE_90);
 			}
 		} else {
 			cell.setFlipHorizontally(flipHorizontally);
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/TideMapLoader.java b/gdx/src/com/badlogic/gdx/maps/tiled/TideMapLoader.java
index b1a314f..473c870 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/TideMapLoader.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/TideMapLoader.java
@@ -167,6 +167,8 @@ public class TideMapLoader extends SynchronousAssetLoader<TiledMap, TideMapLoade
 			FileHandle image = getRelativeFileHandle(tideFile, imageSource);
 			TextureRegion texture = imageResolver.getImage(image.path());
 
+			// TODO: Actually load the tilesheet
+			// Need to make global ids as Tide doesn't have global ids.
 			TiledMapTileSets tilesets = map.getTileSets();
 			int firstgid = 1;
 			for (TiledMapTileSet tileset : tilesets) {
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/TiledMapTile.java b/gdx/src/com/badlogic/gdx/maps/tiled/TiledMapTile.java
index 8b79063..7af2e55 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/TiledMapTile.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/TiledMapTile.java
@@ -41,18 +41,6 @@ public interface TiledMapTile {
 	/** @return texture region used to render the tile */
 	public TextureRegion getTextureRegion ();
 
-	/** @return the amount to offset the x position when rendering the tile */
-	public float getOffsetX();
-
-	/** Set the amount to offset the x position when rendering the tile */
-	public void setOffsetX(float offsetX);
-
-	/** @return the amount to offset the y position when rendering the tile */
-	public float getOffsetY();
-
-	/** Set the amount to offset the y position when rendering the tile */
-	public void setOffsetY(float offsetY);
-
 	/** @return tile's properties set */
 	public MapProperties getProperties ();
 
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java b/gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
index a44647e..dc4d65e 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
@@ -55,6 +55,8 @@ import com.badlogic.gdx.utils.XmlReader.Element;
 public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader.Parameters> {
 
 	public static class Parameters extends AssetLoaderParameters<TiledMap> {
+		/** Whether to load the map for a y-up coordinate system */
+		public boolean yUp = true;
 		/** generate mipmaps? **/
 		public boolean generateMipMaps = false;
 		/** The TextureFilter to use for minification **/
@@ -72,6 +74,7 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 
 	protected XmlReader xml = new XmlReader();
 	protected Element root;
+	protected boolean yUp;
 	protected boolean convertObjectToTileSpace;
 
 	protected int mapTileWidth;
@@ -108,6 +111,7 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 	 * @return the TiledMap */
 	public TiledMap load (String fileName, TmxMapLoader.Parameters parameters) {
 		try {
+			this.yUp = parameters.yUp;
 			this.convertObjectToTileSpace = parameters.convertObjectToTileSpace;
 			FileHandle tmxFile = resolve(fileName);
 			root = xml.parse(tmxFile);
@@ -131,8 +135,10 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 		map = null;
 
 		if (parameter != null) {
+			yUp = parameter.yUp;
 			convertObjectToTileSpace = parameter.convertObjectToTileSpace;
 		} else {
+			yUp = true;
 			convertObjectToTileSpace = false;
 		}
 		try {
@@ -283,9 +289,6 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			int margin = element.getIntAttribute("margin", 0);
 			String source = element.getAttribute("source", null);
 
-			int offsetX = 0;
-			int offsetY = 0;
-
 			String imageSource = "";
 			int imageWidth = 0, imageHeight = 0;
 
@@ -299,11 +302,6 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 					tileheight = element.getIntAttribute("tileheight", 0);
 					spacing = element.getIntAttribute("spacing", 0);
 					margin = element.getIntAttribute("margin", 0);
-					Element offset = element.getChildByName("tileoffset");
-					if (offset != null) {
-						offsetX = offset.getIntAttribute("x", 0);
-						offsetY = offset.getIntAttribute("y", 0);
-					}
 					imageSource = element.getChildByName("image").getAttribute("source");
 					imageWidth = element.getChildByName("image").getIntAttribute("width", 0);
 					imageHeight = element.getChildByName("image").getIntAttribute("height", 0);
@@ -312,11 +310,6 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 					throw new GdxRuntimeException("Error parsing external tileset.");
 				}
 			} else {
-				Element offset = element.getChildByName("tileoffset");
-				if (offset != null) {
-					offsetX = offset.getIntAttribute("x", 0);
-					offsetY = offset.getIntAttribute("y", 0);
-				}
 				imageSource = element.getChildByName("image").getAttribute("source");
 				imageWidth = element.getChildByName("image").getIntAttribute("width", 0);
 				imageHeight = element.getChildByName("image").getIntAttribute("height", 0);
@@ -345,10 +338,11 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			for (int y = margin; y <= stopHeight; y += tileheight + spacing) {
 				for (int x = margin; x <= stopWidth; x += tilewidth + spacing) {
 					TextureRegion tileRegion = new TextureRegion(texture, x, y, tilewidth, tileheight);
+					if (!yUp) {
+						tileRegion.flip(false, true);
+					}
 					TiledMapTile tile = new StaticTiledMapTile(tileRegion);
 					tile.setId(id);
-					tile.setOffsetX(offsetX);
-					tile.setOffsetY(-offsetY);
 					tileset.putTile(id++, tile);
 				}
 			}
@@ -412,7 +406,7 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 					if (tile != null) {
 						Cell cell = createTileLayerCell(flipHorizontally, flipVertically, flipDiagonally);
 						cell.setTile(tile);
-						layer.setCell(x, height - 1 - y, cell);
+						layer.setCell(x, yUp ? height - 1 - y : y, cell);
 					}
 				}
 			}
@@ -451,7 +445,7 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			float scaleY = convertObjectToTileSpace ? 1.0f / mapTileHeight : 1.0f;
 
 			float x = element.getFloatAttribute("x", 0) * scaleX;
-			float y = (mapHeightInPixels - element.getFloatAttribute("y", 0)) * scaleY;
+			float y = (yUp ? mapHeightInPixels - element.getFloatAttribute("y", 0) : element.getFloatAttribute("y", 0)) * scaleY;
 
 			float width = element.getFloatAttribute("width", 0) * scaleX;
 			float height = element.getFloatAttribute("height", 0) * scaleY;
@@ -464,7 +458,10 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 					for (int i = 0; i < points.length; i++) {
 						String[] point = points[i].split(",");
 						vertices[i * 2] = Float.parseFloat(point[0]) * scaleX;
-						vertices[i * 2 + 1] = -Float.parseFloat(point[1]) * scaleY;
+						vertices[i * 2 + 1] = Float.parseFloat(point[1]) * scaleY;
+						if (yUp) {
+							vertices[i * 2 + 1] *= -1;
+						}
 					}
 					Polygon polygon = new Polygon(vertices);
 					polygon.setPosition(x, y);
@@ -475,17 +472,20 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 					for (int i = 0; i < points.length; i++) {
 						String[] point = points[i].split(",");
 						vertices[i * 2] = Float.parseFloat(point[0]) * scaleX;
-						vertices[i * 2 + 1] = -Float.parseFloat(point[1]) * scaleY;
+						vertices[i * 2 + 1] = Float.parseFloat(point[1]) * scaleY;
+						if (yUp) {
+							vertices[i * 2 + 1] *= -1;
+						}
 					}
 					Polyline polyline = new Polyline(vertices);
 					polyline.setPosition(x, y);
 					object = new PolylineMapObject(polyline);
 				} else if ((child = element.getChildByName("ellipse")) != null) {
-					object = new EllipseMapObject(x, y - height, width, height);
+					object = new EllipseMapObject(x, yUp ? y - height : y, width, height);
 				}
 			}
 			if (object == null) {
-				object = new RectangleMapObject(x, y - height, width, height);
+				object = new RectangleMapObject(x, yUp ? y - height : y, width, height);
 			}
 			object.setName(element.getAttribute("name", null));
 			String type = element.getAttribute("type", null);
@@ -497,7 +497,7 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 				object.getProperties().put("gid", gid);
 			}
 			object.getProperties().put("x", x * scaleX);
-			object.getProperties().put("y", (y - height) * scaleY);
+			object.getProperties().put("y", (yUp ? y - height : y) * scaleY);
 			object.setVisible(element.getIntAttribute("visible", 1) == 1);
 			Element properties = element.getChildByName("properties");
 			if (properties != null) {
@@ -525,14 +525,14 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 		if (flipDiagonally) {
 			if (flipHorizontally && flipVertically) {
 				cell.setFlipHorizontally(true);
-				cell.setRotation(Cell.ROTATE_270);
+				cell.setRotation(yUp ? Cell.ROTATE_270 : Cell.ROTATE_90);
 			} else if (flipHorizontally) {
-				cell.setRotation(Cell.ROTATE_270);
+				cell.setRotation(yUp ? Cell.ROTATE_270 : Cell.ROTATE_90);
 			} else if (flipVertically) {
-				cell.setRotation(Cell.ROTATE_90);
+				cell.setRotation(yUp ? Cell.ROTATE_90 : Cell.ROTATE_270);
 			} else {
 				cell.setFlipVertically(true);
-				cell.setRotation(Cell.ROTATE_270);
+				cell.setRotation(yUp ? Cell.ROTATE_270 : Cell.ROTATE_90);
 			}
 		} else {
 			cell.setFlipHorizontally(flipHorizontally);
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java
index 58143ff..6360010 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java
@@ -28,6 +28,15 @@ import com.badlogic.gdx.maps.tiled.TiledMapTileLayer;
 import com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile;
 
 public class HexagonalTiledMapRenderer extends BatchTiledMapRenderer {
+	private boolean yDown = false;
+
+	public boolean isYdown () {
+		return yDown;
+	}
+
+	public void setYDown (boolean yDown) {
+		this.yDown = yDown;
+	}
 
 	public HexagonalTiledMapRenderer (TiledMap map) {
 		super(map);
@@ -73,7 +82,7 @@ public class HexagonalTiledMapRenderer extends BatchTiledMapRenderer {
 		for (int row = row1; row < row2; row++) {
 			for (int col = col1; col < col2; col++) {
 				float x = layerTileWidth75 * col;
-				float y = (col % 2 == 1 ? 0 : layerTileHeight50) + (layerTileHeight * row);
+				float y = (col % 2 == (yDown ? 0 : 1) ? 0 : layerTileHeight50) + (layerTileHeight * row);
 
 				final TiledMapTileLayer.Cell cell = layer.getCell(col, row);
 				if (cell == null) {
@@ -90,8 +99,8 @@ public class HexagonalTiledMapRenderer extends BatchTiledMapRenderer {
 
 					TextureRegion region = tile.getTextureRegion();
 
-					float x1 = x + tile.getOffsetX() * unitScale;
-					float y1 = y + tile.getOffsetY() * unitScale;
+					float x1 = x;
+					float y1 = y;
 					float x2 = x1 + region.getRegionWidth() * unitScale;
 					float y2 = y1 + region.getRegionHeight() * unitScale;
 
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricStaggeredTiledMapRenderer.java b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricStaggeredTiledMapRenderer.java
index 66ced1d..68a229a 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricStaggeredTiledMapRenderer.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricStaggeredTiledMapRenderer.java
@@ -85,8 +85,8 @@ public class IsometricStaggeredTiledMapRenderer extends BatchTiledMapRenderer {
 					final int rotations = cell.getRotation();
 					TextureRegion region = tile.getTextureRegion();
 
-					float x1 = x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale;
-					float y1 = y * layerTileHeight50 + tile.getOffsetY() * unitScale;
+					float x1 = x * layerTileWidth - offsetX;
+					float y1 = y * layerTileHeight50;
 					float x2 = x1 + region.getRegionWidth() * unitScale;
 					float y2 = y1 + region.getRegionHeight() * unitScale;
 
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricTiledMapRenderer.java b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricTiledMapRenderer.java
index 1dddbc7..00ba47c 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricTiledMapRenderer.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricTiledMapRenderer.java
@@ -131,8 +131,8 @@ public class IsometricTiledMapRenderer extends BatchTiledMapRenderer {
 
 					TextureRegion region = tile.getTextureRegion();
 
-					float x1 = x + tile.getOffsetX() * unitScale;
-					float y1 = y + tile.getOffsetY() * unitScale;
+					float x1 = x;
+					float y1 = y;
 					float x2 = x1 + region.getRegionWidth() * unitScale;
 					float y2 = y1 + region.getRegionHeight() * unitScale;
 
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthoCachedTiledMapRenderer.java b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthoCachedTiledMapRenderer.java
index c731d19..4e6b731 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthoCachedTiledMapRenderer.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthoCachedTiledMapRenderer.java
@@ -219,7 +219,7 @@ public class OrthoCachedTiledMapRenderer implements TiledMapRenderer, Disposable
 		canCacheMoreS = row1 > 0;
 
 		float[] vertices = this.vertices;
-		for (int row = row2; row >= row1; row--) {
+		for (int row = row1; row < row2; row++) {
 			for (int col = col1; col < col2; col++) {
 				final TiledMapTileLayer.Cell cell = layer.getCell(col, row);
 				if (cell == null) continue;
@@ -235,8 +235,8 @@ public class OrthoCachedTiledMapRenderer implements TiledMapRenderer, Disposable
 				final TextureRegion region = tile.getTextureRegion();
 				final Texture texture = region.getTexture();
 
-				final float x1 = col * layerTileWidth + tile.getOffsetX() * unitScale;
-				final float y1 = row * layerTileHeight + tile.getOffsetY() * unitScale;
+				final float x1 = col * layerTileWidth;
+				final float y1 = row * layerTileHeight;
 				final float x2 = x1 + region.getRegionWidth() * unitScale;
 				final float y2 = y1 + region.getRegionHeight() * unitScale;
 
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthogonalTiledMapRenderer.java b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthogonalTiledMapRenderer.java
index 26f95cd..5b06bb0 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthogonalTiledMapRenderer.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthogonalTiledMapRenderer.java
@@ -86,11 +86,11 @@ public class OrthogonalTiledMapRenderer extends BatchTiledMapRenderer {
 		final int row1 = Math.max(0, (int)(viewBounds.y / layerTileHeight));
 		final int row2 = Math.min(layerHeight, (int)((viewBounds.y + viewBounds.height + layerTileHeight) / layerTileHeight));
 
-		float y = row2 * layerTileHeight;
+		float y = row1 * layerTileHeight;
 		float xStart = col1 * layerTileWidth;
 		final float[] vertices = this.vertices;
 
-		for (int row = row2; row >= row1; row--) {
+		for (int row = row1; row < row2; row++) {
 			float x = xStart;
 			for (int col = col1; col < col2; col++) {
 				final TiledMapTileLayer.Cell cell = layer.getCell(col, row);
@@ -107,8 +107,8 @@ public class OrthogonalTiledMapRenderer extends BatchTiledMapRenderer {
 
 					TextureRegion region = tile.getTextureRegion();
 
-					float x1 = x + tile.getOffsetX() * unitScale;
-					float y1 = y + tile.getOffsetY() * unitScale;
+					float x1 = x;
+					float y1 = y;
 					float x2 = x1 + region.getRegionWidth() * unitScale;
 					float y2 = y1 + region.getRegionHeight() * unitScale;
 
@@ -208,7 +208,7 @@ public class OrthogonalTiledMapRenderer extends BatchTiledMapRenderer {
 				}
 				x += layerTileWidth;
 			}
-			y -= layerTileHeight;
+			y += layerTileHeight;
 		}
 	}
 }
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/tiles/AnimatedTiledMapTile.java b/gdx/src/com/badlogic/gdx/maps/tiled/tiles/AnimatedTiledMapTile.java
index 4127cd1..f3f78c9 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/tiles/AnimatedTiledMapTile.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/tiles/AnimatedTiledMapTile.java
@@ -20,7 +20,6 @@ import com.badlogic.gdx.graphics.g2d.TextureRegion;
 import com.badlogic.gdx.maps.MapProperties;
 import com.badlogic.gdx.maps.tiled.TiledMapTile;
 import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.TimeUtils;
 
 /** @brief Represents a changing {@link TiledMapTile}. */
@@ -67,28 +66,6 @@ public class AnimatedTiledMapTile implements TiledMapTile {
 	}
 
 	@Override
-	public float getOffsetX () {
-		long currentFrame = (lastTiledMapRenderTime / (long)(animationInterval * 1000f)) % frameCount;
-		return frameTiles.get((int)currentFrame).getOffsetX();
-	}
-
-	@Override
-	public void setOffsetX (float offsetX) {
-		throw new GdxRuntimeException("Cannot set offset of AnimatedTiledMapTile.");
-	}
-
-	@Override
-	public float getOffsetY () {
-		long currentFrame = (lastTiledMapRenderTime / (long)(animationInterval * 1000f)) % frameCount;
-		return frameTiles.get((int)currentFrame).getOffsetY();
-	}
-
-	@Override
-	public void setOffsetY (float offsetY) {
-		throw new GdxRuntimeException("Cannot set offset of AnimatedTiledMapTile.");
-	}
-
-	@Override
 	public MapProperties getProperties () {
 		if (properties == null) {
 			properties = new MapProperties();
@@ -111,5 +88,4 @@ public class AnimatedTiledMapTile implements TiledMapTile {
 		this.animationInterval = interval;
 		this.frameCount = frameTiles.size;
 	}
-
 }
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/tiles/StaticTiledMapTile.java b/gdx/src/com/badlogic/gdx/maps/tiled/tiles/StaticTiledMapTile.java
index 57dc96c..0b348d6 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/tiles/StaticTiledMapTile.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/tiles/StaticTiledMapTile.java
@@ -31,10 +31,6 @@ public class StaticTiledMapTile implements TiledMapTile {
 
 	private TextureRegion textureRegion;
 
-	private float offsetX;
-
-	private float offsetY;
-
 	@Override
 	public int getId () {
 		return id;
@@ -70,26 +66,6 @@ public class StaticTiledMapTile implements TiledMapTile {
 		return textureRegion;
 	}
 
-	@Override
-	public float getOffsetX () {
-		return offsetX;
-	}
-
-	@Override
-	public void setOffsetX (float offsetX) {
-		this.offsetX = offsetX;
-	}
-
-	@Override
-	public float getOffsetY () {
-		return offsetY;
-	}
-
-	@Override
-	public void setOffsetY (float offsetY) {
-		this.offsetY = offsetY;
-	}
-
 	/** Creates a static tile with the given region
 	 * 
 	 * @param textureRegion the {@link TextureRegion} to use. */
diff --git a/gdx/src/com/badlogic/gdx/math/BSpline.java b/gdx/src/com/badlogic/gdx/math/BSpline.java
index 2a8a26c..b80694c 100644
--- a/gdx/src/com/badlogic/gdx/math/BSpline.java
+++ b/gdx/src/com/badlogic/gdx/math/BSpline.java
@@ -34,7 +34,7 @@ public class BSpline<T extends Vector<T>> implements Path<T> {
 		final int n = continuous ? points.length : points.length - 3;
 		float u = t * n;
 		int i = (t >= 1f) ? (n - 1) : (int)u;
-		u -= i;
+		u -= (float)i;
 		return cubic(out, i, u, points, continuous, tmp);
 	}
 
@@ -50,7 +50,7 @@ public class BSpline<T extends Vector<T>> implements Path<T> {
 		final int n = continuous ? points.length : points.length - 3;
 		float u = t * n;
 		int i = (t >= 1f) ? (n - 1) : (int)u;
-		u -= i;
+		u -= (float)i;
 		return cubic(out, i, u, points, continuous, tmp);
 	}
 
@@ -109,7 +109,7 @@ public class BSpline<T extends Vector<T>> implements Path<T> {
 		final int n = continuous ? points.length : points.length - degree;
 		float u = t * n;
 		int i = (t >= 1f) ? (n - 1) : (int)u;
-		u -= i;
+		u -= (float)i;
 		return calculate(out, i, u, points, degree, continuous, tmp);
 	}
 
@@ -126,7 +126,7 @@ public class BSpline<T extends Vector<T>> implements Path<T> {
 		final int n = continuous ? points.length : points.length - degree;
 		float u = t * n;
 		int i = (t >= 1f) ? (n - 1) : (int)u;
-		u -= i;
+		u -= (float)i;
 		return derivative(out, i, u, points, degree, continuous, tmp);
 	}
 
@@ -172,8 +172,6 @@ public class BSpline<T extends Vector<T>> implements Path<T> {
 	public boolean continuous;
 	public int spanCount;
 	private T tmp;
-	private T tmp2;
-	private T tmp3;
 
 	public BSpline () {
 	}
@@ -184,8 +182,6 @@ public class BSpline<T extends Vector<T>> implements Path<T> {
 
 	public BSpline set (final T[] controlPoints, final int degree, final boolean continuous) {
 		if (tmp == null) tmp = controlPoints[0].cpy();
-		if (tmp2 == null) tmp2 = controlPoints[0].cpy();
-		if (tmp3 == null) tmp3 = controlPoints[0].cpy();
 		this.controlPoints = controlPoints;
 		this.degree = degree;
 		this.continuous = continuous;
@@ -207,7 +203,7 @@ public class BSpline<T extends Vector<T>> implements Path<T> {
 		final int n = spanCount;
 		float u = t * n;
 		int i = (t >= 1f) ? (n - 1) : (int)u;
-		u -= i;
+		u -= (float)i;
 		return valueAt(out, i, u);
 	}
 
@@ -221,7 +217,7 @@ public class BSpline<T extends Vector<T>> implements Path<T> {
 		final int n = spanCount;
 		float u = t * n;
 		int i = (t >= 1f) ? (n - 1) : (int)u;
-		u -= i;
+		u -= (float)i;
 		return derivativeAt(out, i, u);
 	}
 
@@ -284,7 +280,7 @@ public class BSpline<T extends Vector<T>> implements Path<T> {
 		float L3 = P3.dst(P1);
 		float s = (L2 * L2 + L1 * L1 - L3 * L3) / (2 * L1);
 		float u = MathUtils.clamp((L1 - s) / L1, 0f, 1f);
-		return (n + u) / spanCount;
+		return ((float)n + u) / spanCount;
 	}
 
 	@Override
@@ -292,15 +288,4 @@ public class BSpline<T extends Vector<T>> implements Path<T> {
 		// TODO Add a precise method
 		return approximate(v);
 	}
-
-	@Override
-	public float approxLength (int samples) {
-		float tempLength = 0;
-		for (int i = 0; i < samples; ++i) {
-			tmp2.set(tmp3);
-			valueAt(tmp3, (i) / ((float)samples - 1));
-			if (i > 0) tempLength += tmp2.dst(tmp3);
-		}
-		return tempLength;
-	}
 }
diff --git a/gdx/src/com/badlogic/gdx/math/Bezier.java b/gdx/src/com/badlogic/gdx/math/Bezier.java
index c14a765..7e3a9c4 100644
--- a/gdx/src/com/badlogic/gdx/math/Bezier.java
+++ b/gdx/src/com/badlogic/gdx/math/Bezier.java
@@ -116,8 +116,6 @@ public class Bezier<T extends Vector<T>> implements Path<T> {
 
 	public Array<T> points = new Array<T>();
 	private T tmp;
-	private T tmp2;
-	private T tmp3;
 
 	public Bezier () {
 	}
@@ -142,8 +140,6 @@ public class Bezier<T extends Vector<T>> implements Path<T> {
 		if (length < 2 || length > 4)
 			throw new GdxRuntimeException("Only first, second and third degree Bezier curves are supported.");
 		if (tmp == null) tmp = points[0].cpy();
-		if (tmp2 == null) tmp2 = points[0].cpy();
-		if (tmp3 == null) tmp3 = points[0].cpy();
 		this.points.clear();
 		this.points.addAll(points, offset, length);
 		return this;
@@ -198,15 +194,4 @@ public class Bezier<T extends Vector<T>> implements Path<T> {
 		// TODO implement a precise method
 		return approximate(v);
 	}
-
-	@Override
-	public float approxLength (int samples) {
-		float tempLength = 0;
-		for (int i = 0; i < samples; ++i) {
-			tmp2.set(tmp3);
-			valueAt(tmp3, (i) / ((float)samples - 1));
-			if (i > 0) tempLength += tmp2.dst(tmp3);
-		}
-		return tempLength;
-	}
 }
diff --git a/gdx/src/com/badlogic/gdx/math/CatmullRomSpline.java b/gdx/src/com/badlogic/gdx/math/CatmullRomSpline.java
index dd26597..134b7d5 100644
--- a/gdx/src/com/badlogic/gdx/math/CatmullRomSpline.java
+++ b/gdx/src/com/badlogic/gdx/math/CatmullRomSpline.java
@@ -16,6 +16,9 @@
 
 package com.badlogic.gdx.math;
 
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.utils.Array;
+
 /** @author Xoppa */
 public class CatmullRomSpline<T extends Vector<T>> implements Path<T> {
 	/** Calculates the catmullrom value for the given position (t).
@@ -30,7 +33,7 @@ public class CatmullRomSpline<T extends Vector<T>> implements Path<T> {
 		final int n = continuous ? points.length : points.length - 3;
 		float u = t * n;
 		int i = (t >= 1f) ? (n - 1) : (int)u;
-		u -= i;
+		u -= (float)i;
 		return calculate(out, i, u, points, continuous, tmp);
 	}
 
@@ -66,7 +69,7 @@ public class CatmullRomSpline<T extends Vector<T>> implements Path<T> {
 		final int n = continuous ? points.length : points.length - 3;
 		float u = t * n;
 		int i = (t >= 1f) ? (n - 1) : (int)u;
-		u -= i;
+		u -= (float)i;
 		return derivative(out, i, u, points, continuous, tmp);
 	}
 
@@ -98,7 +101,6 @@ public class CatmullRomSpline<T extends Vector<T>> implements Path<T> {
 	public int spanCount;
 	private T tmp;
 	private T tmp2;
-	private T tmp3;
 
 	public CatmullRomSpline () {
 	}
@@ -110,7 +112,6 @@ public class CatmullRomSpline<T extends Vector<T>> implements Path<T> {
 	public CatmullRomSpline set (final T[] controlPoints, final boolean continuous) {
 		if (tmp == null) tmp = controlPoints[0].cpy();
 		if (tmp2 == null) tmp2 = controlPoints[0].cpy();
-		if (tmp3 == null) tmp3 = controlPoints[0].cpy();
 		this.controlPoints = controlPoints;
 		this.continuous = continuous;
 		this.spanCount = continuous ? controlPoints.length : controlPoints.length - 3;
@@ -122,7 +123,7 @@ public class CatmullRomSpline<T extends Vector<T>> implements Path<T> {
 		final int n = spanCount;
 		float u = t * n;
 		int i = (t >= 1f) ? (n - 1) : (int)u;
-		u -= i;
+		u -= (float)i;
 		return valueAt(out, i, u);
 	}
 
@@ -131,12 +132,11 @@ public class CatmullRomSpline<T extends Vector<T>> implements Path<T> {
 		return calculate(out, continuous ? span : (span + 1), u, controlPoints, continuous, tmp);
 	}
 
-	@Override
 	public T derivativeAt (T out, float t) {
 		final int n = spanCount;
 		float u = t * n;
 		int i = (t >= 1f) ? (n - 1) : (int)u;
-		u -= i;
+		u -= (float)i;
 		return derivativeAt(out, i, u);
 	}
 
@@ -200,22 +200,11 @@ public class CatmullRomSpline<T extends Vector<T>> implements Path<T> {
 		float L1 = (float)Math.sqrt(L1Sqr);
 		float s = (L2Sqr + L1Sqr - L3Sqr) / (2f * L1);
 		float u = MathUtils.clamp((L1 - s) / L1, 0f, 1f);
-		return (n + u) / spanCount;
+		return ((float)n + u) / spanCount;
 	}
 
 	@Override
 	public float locate (T v) {
 		return approximate(v);
 	}
-
-	@Override
-	public float approxLength (int samples) {
-		float tempLength = 0;
-	   for(int i = 0; i < samples; ++i) {
-	       tmp2.set(tmp3);
-	       valueAt(tmp3, (i)/((float)samples-1));
-	       if(i>0) tempLength += tmp2.dst(tmp3);
-	   }
-	   return tempLength;
-	}
 }
diff --git a/gdx/src/com/badlogic/gdx/math/Intersector.java b/gdx/src/com/badlogic/gdx/math/Intersector.java
index 3c64302..c92c9b1 100644
--- a/gdx/src/com/badlogic/gdx/math/Intersector.java
+++ b/gdx/src/com/badlogic/gdx/math/Intersector.java
@@ -16,6 +16,7 @@
 
 package com.badlogic.gdx.math;
 
+import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.math.Plane.PlaneSide;
 import com.badlogic.gdx.math.collision.BoundingBox;
 import com.badlogic.gdx.math.collision.Ray;
@@ -668,25 +669,26 @@ public final class Intersector {
 	 * @param polygon The polygon
 	 * @return Whether polygon and line intersects */
 	public static boolean intersectLinePolygon (Vector2 p1, Vector2 p2, Polygon polygon) {
-		 float[] vertices = polygon.getTransformedVertices();
-		 float x1 = p1.x, y1 = p1.y, x2 = p2.x, y2 = p2.y;
-		 int n = vertices.length;
-		 float x3 = vertices[n - 2], y3 = vertices[n - 1];
-		 for (int i = 0; i < n; i += 2) {
-			  float x4 = vertices[i], y4 = vertices[i + 1];
-			  float d = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
-			  if (d != 0) {
-					float yd = y1 - y3;
-					float xd = x1 - x3;
-					float ua = ((x4 - x3) * yd - (y4 - y3) * xd) / d;
-					if (ua >= 0 && ua <= 1) {
-						 return true;
-					}
-			  }
-			  x3 = x4;
-			  y3 = y4;
-		 }
-		 return false;
+		float[] vertices = polygon.getTransformedVertices();
+		float x1 = p1.x, y1 = p1.y, x2 = p2.x, y2 = p2.y;
+		float width12 = x1 - x2, height12 = y1 - y2;
+		float det1 = x1 * y2 - y1 * x2;
+		int n = vertices.length;
+		float x3 = vertices[n - 2], y3 = vertices[n - 1];
+		for (int i = 0; i < n; i += 2) {
+			float x4 = vertices[i], y4 = vertices[i + 1];
+			float det2 = x3 * y4 - y3 * x4;
+			float width34 = x3 - x4, height34 = y3 - y4;
+			float det3 = width12 * height34 - height12 * width34;
+			float x = (det1 * width34 - width12 * det2) / det3;
+			if ((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) {
+				float y = (det1 * height34 - height12 * det2) / det3;
+				if ((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) return true;
+			}
+			x3 = x4;
+			y3 = y4;
+		}
+		return false;
 	}
 
 	/** Determines whether the given rectangles intersect and, if they do, sets the supplied {@code intersection} rectangle to the
@@ -704,34 +706,32 @@ public final class Intersector {
 		return false;
 	}
 
-	 /** Check whether the given line segment and {@link Polygon} intersect.
-	  * @param p1 The first point of the segment
-	  * @param p2 The second point of the segment
-	  * @return Whether polygon and segment intersect */
-	 public static boolean intersectSegmentPolygon (Vector2 p1, Vector2 p2, Polygon polygon) {
-		  float[] vertices = polygon.getTransformedVertices();
-		  float x1 = p1.x, y1 = p1.y, x2 = p2.x, y2 = p2.y;
-		  int n = vertices.length;
-		  float x3 = vertices[n - 2], y3 = vertices[n - 1];
-		  for (int i = 0; i < n; i += 2) {
-				float x4 = vertices[i], y4 = vertices[i + 1];
-				float d = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
-				if (d != 0) {
-					 float yd = y1 - y3;
-					 float xd = x1 - x3;
-					 float ua = ((x4 - x3) * yd - (y4 - y3) * xd) / d;
-					 if (ua >= 0 && ua <= 1) {
-						  float ub = ((x2 - x1) * yd - (y2 - y1) * xd) / d;
-						  if (ub >= 0 && ub <= 1) {
-								return true;
-						  }
-					 }
-				}
-				x3 = x4;
-				y3 = y4;
-		  }
-		  return false;
-	 }
+	/** Check whether the given line segment and {@link Polygon} intersect.
+	 * @param p1 The first point of the segment
+	 * @param p2 The second point of the segment
+	 * @return Whether polygon and line intersects */
+	public static boolean intersectSegmentPolygon (Vector2 p1, Vector2 p2, Polygon polygon) {
+		float[] vertices = polygon.getTransformedVertices();
+		float x1 = p1.x, y1 = p1.y, x2 = p2.x, y2 = p2.y;
+		float width12 = x1 - x2, height12 = y1 - y2;
+		float det1 = x1 * y2 - y1 * x2;
+		int n = vertices.length;
+		float x3 = vertices[n - 2], y3 = vertices[n - 1];
+		for (int i = 0; i < n; i += 2) {
+			float x4 = vertices[i], y4 = vertices[i + 1];
+			float det2 = x3 * y4 - y3 * x4;
+			float width34 = x3 - x4, height34 = y3 - y4;
+			float det3 = width12 * height34 - height12 * width34;
+			float x = (det1 * width34 - width12 * det2) / det3;
+			if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1))) {
+				float y = (det1 * height34 - height12 * det2) / det3;
+				if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;
+			}
+			x3 = x4;
+			y3 = y4;
+		}
+		return false;
+	}
 
 	/** Intersects the two line segments and returns the intersection point in intersection.
 	 * 
diff --git a/gdx/src/com/badlogic/gdx/math/MathUtils.java b/gdx/src/com/badlogic/gdx/math/MathUtils.java
index 7d03a3b..61a69e8 100644
--- a/gdx/src/com/badlogic/gdx/math/MathUtils.java
+++ b/gdx/src/com/badlogic/gdx/math/MathUtils.java
@@ -18,6 +18,8 @@ package com.badlogic.gdx.math;
 
 import java.util.Random;
 
+import com.badlogic.gdx.utils.NumberUtils;
+
 /** Utility and fast math functions.
  * <p>
  * Thanks to Riven on JavaGaming.org for the basis of sin/cos/atan2/floor/ceil.
@@ -59,22 +61,22 @@ public final class MathUtils {
 	}
 
 	/** Returns the sine in radians from a lookup table. */
-	static public float sin (float radians) {
+	static public final float sin (float radians) {
 		return Sin.table[(int)(radians * radToIndex) & SIN_MASK];
 	}
 
 	/** Returns the cosine in radians from a lookup table. */
-	static public float cos (float radians) {
+	static public final float cos (float radians) {
 		return Sin.table[(int)((radians + PI / 2) * radToIndex) & SIN_MASK];
 	}
 
 	/** Returns the sine in radians from a lookup table. */
-	static public float sinDeg (float degrees) {
+	static public final float sinDeg (float degrees) {
 		return Sin.table[(int)(degrees * degToIndex) & SIN_MASK];
 	}
 
 	/** Returns the cosine in radians from a lookup table. */
-	static public float cosDeg (float degrees) {
+	static public final float cosDeg (float degrees) {
 		return Sin.table[(int)((degrees + 90) * degToIndex) & SIN_MASK];
 	}
 
@@ -101,7 +103,7 @@ public final class MathUtils {
 	}
 
 	/** Returns atan2 in radians from a lookup table. */
-	static public float atan2 (float y, float x) {
+	static public final float atan2 (float y, float x) {
 		float add, mul;
 		if (x < 0) {
 			if (y < 0) {
@@ -133,37 +135,37 @@ public final class MathUtils {
 	static public Random random = new Random();
 
 	/** Returns a random number between 0 (inclusive) and the specified value (inclusive). */
-	static public int random (int range) {
+	static public final int random (int range) {
 		return random.nextInt(range + 1);
 	}
 
 	/** Returns a random number between start (inclusive) and end (inclusive). */
-	static public int random (int start, int end) {
+	static public final int random (int start, int end) {
 		return start + random.nextInt(end - start + 1);
 	}
 
 	/** Returns a random boolean value. */
-	static public boolean randomBoolean () {
+	static public final boolean randomBoolean () {
 		return random.nextBoolean();
 	}
 
 	/** Returns true if a random value between 0 and 1 is less than the specified value. */
-	static public boolean randomBoolean (float chance) {
+	static public final boolean randomBoolean (float chance) {
 		return MathUtils.random() < chance;
 	}
 
 	/** Returns random number between 0.0 (inclusive) and 1.0 (exclusive). */
-	static public float random () {
+	static public final float random () {
 		return random.nextFloat();
 	}
 
 	/** Returns a random number between 0 (inclusive) and the specified value (exclusive). */
-	static public float random (float range) {
+	static public final float random (float range) {
 		return random.nextFloat() * range;
 	}
 
 	/** Returns a random number between start (inclusive) and end (exclusive). */
-	static public float random (float start, float end) {
+	static public final float random (float start, float end) {
 		return start + random.nextFloat() * (end - start);
 	}
 
@@ -207,16 +209,11 @@ public final class MathUtils {
 
 	// ---
 
-	/** Linearly interpolates between fromValue to toValue on progress position. */
-	static public float lerp (float fromValue, float toValue, float progress) {
-		return fromValue + (toValue - fromValue) * progress;
-	}
-
-	// ---
-
 	static private final int BIG_ENOUGH_INT = 16 * 1024;
 	static private final double BIG_ENOUGH_FLOOR = BIG_ENOUGH_INT;
 	static private final double CEIL = 0.9999999;
+// static private final double BIG_ENOUGH_CEIL = NumberUtils
+// .longBitsToDouble(NumberUtils.doubleToLongBits(BIG_ENOUGH_INT + 1) - 1);
 	static private final double BIG_ENOUGH_CEIL = 16384.999999999996;
 	static private final double BIG_ENOUGH_ROUND = BIG_ENOUGH_INT + 0.5f;
 
diff --git a/gdx/src/com/badlogic/gdx/math/Path.java b/gdx/src/com/badlogic/gdx/math/Path.java
index efd4640..4898771 100644
--- a/gdx/src/com/badlogic/gdx/math/Path.java
+++ b/gdx/src/com/badlogic/gdx/math/Path.java
@@ -33,14 +33,4 @@ public interface Path<T> {
 	 *         implementation of this method might be CPU intensive, see {@link #approximate(Object)} for a faster (but less
 	 *         precise) method. */
 	float locate (T v);
-	
-	
-	/**
-	 * @param samples The amount of divisions used to approximate length. Higher values will produce more precise results,
-	 * 		but will be more CPU intensive.
-	 * @return An approximated length of the spline through sampling the curve and accumulating the euclidean distances between
-	 *       the sample points.
-	 */
-	float approxLength(int samples);
-	
-}
\ No newline at end of file
+}
diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java
index 73cdd6c..5df81f4 100644
--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java
+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java
@@ -186,11 +186,7 @@ public class List<T> extends Widget implements Cullable {
 	public void setSelectedIndex (int index) {
 		if (index < -1 || index >= items.size)
 			throw new IllegalArgumentException("index must be >= -1 and < " + items.size + ": " + index);
-		if (index == -1) {
-			selection.clear();
-		} else {
-			selection.set(items.get(index));
-		}
+		selection.set(items.get(index));
 	}
 
 	public void setItems (T... newItems) {
diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
index 010612a..5c4c3e9 100644
--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java
@@ -210,38 +210,38 @@ public class Table extends WidgetGroup {
 	}
 
 	/** Adds a new cell with a label. This may only be called if {@link Table#Table(Skin)} or {@link #setSkin(Skin)} was used. */
-	public Cell<Label> add (String text) {
+	public Cell add (String text) {
 		if (skin == null) throw new IllegalStateException("Table must have a skin set to use this method.");
 		return add(new Label(text, skin));
 	}
 
 	/** Adds a new cell with a label. This may only be called if {@link Table#Table(Skin)} or {@link #setSkin(Skin)} was used. */
-	public Cell<Label> add (String text, String labelStyleName) {
+	public Cell add (String text, String labelStyleName) {
 		if (skin == null) throw new IllegalStateException("Table must have a skin set to use this method.");
 		return add(new Label(text, skin.get(labelStyleName, LabelStyle.class)));
 	}
 
 	/** Adds a new cell with a label. This may only be called if {@link Table#Table(Skin)} or {@link #setSkin(Skin)} was used. */
-	public Cell<Label> add (String text, String fontName, Color color) {
+	public Cell add (String text, String fontName, Color color) {
 		if (skin == null) throw new IllegalStateException("Table must have a skin set to use this method.");
 		return add(new Label(text, new LabelStyle(skin.getFont(fontName), color)));
 	}
 
 	/** Adds a new cell with a label. This may only be called if {@link Table#Table(Skin)} or {@link #setSkin(Skin)} was used. */
-	public Cell<Label> add (String text, String fontName, String colorName) {
+	public Cell add (String text, String fontName, String colorName) {
 		if (skin == null) throw new IllegalStateException("Table must have a skin set to use this method.");
 		return add(new Label(text, new LabelStyle(skin.getFont(fontName), skin.getColor(colorName))));
 	}
 
 	/** Adds a cell without a widget. */
-	public Cell<Actor> add () {
+	public Cell add () {
 		return layout.add(null);
 	}
 
 	/** Adds a new cell to the table with the specified actor.
 	 * @param actor May be null to add a cell without an actor. */
-	public <T extends Actor> Cell<T> add (T actor) {
-		return (Cell<T>)layout.add(actor);
+	public Cell add (Actor actor) {
+		return layout.add(actor);
 	}
 
 	public void add (Actor... actors) {
@@ -258,7 +258,7 @@ public class Table extends WidgetGroup {
 
 	/** Adds a new cell to the table with the specified actors in a {@link Stack}.
 	 * @param actors May be null to add a stack without any actors. */
-	public Cell<Stack> stack (Actor... actors) {
+	public Cell stack (Actor... actors) {
 		Stack stack = new Stack();
 		if (actors != null) {
 			for (int i = 0, n = actors.length; i < n; i++)
@@ -295,8 +295,8 @@ public class Table extends WidgetGroup {
 	}
 
 	/** Returns the cell for the specified widget in this table, or null. */
-	public <T extends Actor> Cell<T> getCell (T actor) {
-		return (Cell<T>)layout.getCell(actor);
+	public Cell getCell (Actor actor) {
+		return layout.getCell(actor);
 	}
 
 	/** Returns the cells for this table. */
diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Touchpad.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Touchpad.java
index 7970ac3..a20564e 100644
--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Touchpad.java
+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Touchpad.java
@@ -38,7 +38,6 @@ import com.badlogic.gdx.utils.Pools;
 public class Touchpad extends Widget {
 	private TouchpadStyle style;
 	boolean touched;
-	boolean resetOnTouchUp = true;
 	private float deadzoneRadius;
 	private final Circle knobBounds = new Circle(0, 0, 0);
 	private final Circle touchBounds = new Circle(0, 0, 0);
@@ -83,7 +82,7 @@ public class Touchpad extends Widget {
 			@Override
 			public void touchUp (InputEvent event, float x, float y, int pointer, int button) {
 				touched = false;
-				calculatePositionAndValue(x, y, resetOnTouchUp);
+				calculatePositionAndValue(x, y, true);
 			}
 		});
 	}
@@ -188,15 +187,6 @@ public class Touchpad extends Widget {
 		return touched;
 	}
 
-	public boolean getResetOnTouchUp () {
-		return resetOnTouchUp;
-	}
-
-	/** @param reset Whether to reset the knob to the center on touch up. */
-	public void setResetOnTouchUp (boolean reset) {
-		this.resetOnTouchUp = reset;
-	}
-
 	/** @param deadzoneRadius The distance in pixels from the center of the touchpad required for the knob to be moved. */
 	public void setDeadzone (float deadzoneRadius) {
 		if (deadzoneRadius < 0) throw new IllegalArgumentException("deadzoneRadius must be > 0");
diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ClickListener.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ClickListener.java
index 54411d9..609d00c 100644
--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ClickListener.java
+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ClickListener.java
@@ -147,7 +147,7 @@ public class ClickListener extends InputListener {
 	public boolean isVisualPressed () {
 		if (pressed) return true;
 		if (visualPressedTime <= 0) return false;
-		if (visualPressedTime > TimeUtils.nanoTime() && Gdx.graphics.isContinuousRendering()) return true;
+		if (visualPressedTime > TimeUtils.nanoTime()) return true;
 		visualPressedTime = 0;
 		return false;
 	}
diff --git a/gdx/src/com/badlogic/gdx/utils/JsonReader.java b/gdx/src/com/badlogic/gdx/utils/JsonReader.java
index 146ae3f..b715021 100644
--- a/gdx/src/com/badlogic/gdx/utils/JsonReader.java
+++ b/gdx/src/com/badlogic/gdx/utils/JsonReader.java
@@ -84,7 +84,7 @@ public class JsonReader implements BaseJsonReader {
 
 		int s = 0;
 		Array<String> names = new Array(8);
-		boolean needsUnescape = false, stringIsName = false, stringIsUnquoted = false;
+		boolean needsUnescape = false;
 		RuntimeException parseRuntimeEx = null;
 
 		boolean debug = false;
@@ -168,7 +168,6 @@ public class JsonReader implements BaseJsonReader {
 							}
 						} while (false);
 
-						_trans = _json_indicies[_trans];
 						cs = _json_trans_targs[_trans];
 
 						if (_json_trans_actions[_trans] != 0) {
@@ -177,60 +176,61 @@ public class JsonReader implements BaseJsonReader {
 							while (_nacts-- > 0) {
 								switch (_json_actions[_acts++]) {
 								case 0:
-								// line 108 "JsonReader.rl"
+								// line 104 "JsonReader.rl"
 								{
-									stringIsName = true;
+									s = p;
+									needsUnescape = false;
 								}
 									break;
 								case 1:
+								// line 108 "JsonReader.rl"
+								{
+									needsUnescape = true;
+								}
+									break;
+								case 2:
 								// line 111 "JsonReader.rl"
 								{
+									String name = new String(data, s, p - s);
+									s = p;
+									if (needsUnescape) name = unescape(name);
+									if (debug) System.out.println("name: " + name);
+									names.add(name);
+								}
+									break;
+								case 3:
+								// line 118 "JsonReader.rl"
+								{
 									String value = new String(data, s, p - s);
 									s = p;
 									if (needsUnescape) value = unescape(value);
-									outer:
-									if (stringIsName) {
-										stringIsName = false;
-										if (debug) System.out.println("name: " + value);
-										names.add(value);
-									} else {
-										String name = names.size > 0 ? names.pop() : null;
-										if (stringIsUnquoted) {
-											if (value.equals("true")) {
-												if (debug) System.out.println("boolean: " + name + "=true");
-												bool(name, true);
-												break outer;
-											} else if (value.equals("false")) {
-												if (debug) System.out.println("boolean: " + name + "=false");
-												bool(name, false);
-												break outer;
-											} else if (value.equals("null")) {
-												string(name, null);
-												break outer;
-											} else if (value.indexOf('.') != -1) {
-												try {
-													if (debug) System.out.println("double: " + name + "=" + Double.parseDouble(value));
-													number(name, Double.parseDouble(value));
-													break outer;
-												} catch (NumberFormatException ignored) {
-												}
-											} else {
-												try {
-													if (debug) System.out.println("double: " + name + "=" + Double.parseDouble(value));
-													number(name, Long.parseLong(value));
-													break outer;
-												} catch (NumberFormatException ignored) {
-												}
-											}
-										}
-										if (debug) System.out.println("string: " + name + "=" + value);
-										string(name, value);
-									}
-									stringIsUnquoted = false;
+									String name = names.size > 0 ? names.pop() : null;
+									if (debug) System.out.println("string: " + name + "=" + value);
+									string(name, value);
 								}
 									break;
-								case 2:
-								// line 153 "JsonReader.rl"
+								case 4:
+								// line 126 "JsonReader.rl"
+								{
+									String value = new String(data, s, p - s);
+									s = p;
+									String name = names.size > 0 ? names.pop() : null;
+									if (debug) System.out.println("double: " + name + "=" + Double.parseDouble(value));
+									number(name, Double.parseDouble(value));
+								}
+									break;
+								case 5:
+								// line 133 "JsonReader.rl"
+								{
+									String value = new String(data, s, p - s);
+									s = p;
+									String name = names.size > 0 ? names.pop() : null;
+									if (debug) System.out.println("long: " + name + "=" + Long.parseLong(value));
+									number(name, Long.parseLong(value));
+								}
+									break;
+								case 6:
+								// line 140 "JsonReader.rl"
 								{
 									String name = names.size > 0 ? names.pop() : null;
 									if (debug) System.out.println("startObject: " + name);
@@ -243,15 +243,15 @@ public class JsonReader implements BaseJsonReader {
 										}
 										{
 											stack[top++] = cs;
-											cs = 5;
+											cs = 10;
 											_goto_targ = 2;
 											if (true) continue _goto;
 										}
 									}
 								}
 									break;
-								case 3:
-								// line 159 "JsonReader.rl"
+								case 7:
+								// line 146 "JsonReader.rl"
 								{
 									if (debug) System.out.println("endObject");
 									pop();
@@ -262,8 +262,8 @@ public class JsonReader implements BaseJsonReader {
 									}
 								}
 									break;
-								case 4:
-								// line 164 "JsonReader.rl"
+								case 8:
+								// line 151 "JsonReader.rl"
 								{
 									String name = names.size > 0 ? names.pop() : null;
 									if (debug) System.out.println("startArray: " + name);
@@ -276,15 +276,15 @@ public class JsonReader implements BaseJsonReader {
 										}
 										{
 											stack[top++] = cs;
-											cs = 22;
+											cs = 41;
 											_goto_targ = 2;
 											if (true) continue _goto;
 										}
 									}
 								}
 									break;
-								case 5:
-								// line 170 "JsonReader.rl"
+								case 9:
+								// line 157 "JsonReader.rl"
 								{
 									if (debug) System.out.println("endArray");
 									pop();
@@ -295,8 +295,8 @@ public class JsonReader implements BaseJsonReader {
 									}
 								}
 									break;
-								case 6:
-								// line 175 "JsonReader.rl"
+								case 10:
+								// line 162 "JsonReader.rl"
 								{
 									if (debug) System.out.println("comment /" + data[p]);
 									if (data[p++] == '/') {
@@ -309,70 +309,51 @@ public class JsonReader implements BaseJsonReader {
 									}
 								}
 									break;
-								case 7:
-								// line 186 "JsonReader.rl"
+								case 11:
+								// line 173 "JsonReader.rl"
 								{
-									if (debug) System.out.println("unquotedChars");
-									s = p;
-									needsUnescape = false;
-									stringIsUnquoted = true;
-									if (stringIsName) {
-										outer:
-										while (true) {
-											switch (data[p]) {
-											case ':':
-											case ' ':
-											case '\r':
-											case '\n':
-											case '\t':
-												break outer;
-											}
-											// if (debug) System.out.println("unquotedChar (name): '" + data[p] + "'");
-											p++;
-										}
-									} else {
-										outer:
-										while (true) {
-											switch (data[p]) {
-											case '}':
-											case ']':
-											case ',':
-											case ' ':
-											case '\r':
-											case '\n':
-											case '\t':
-												break outer;
-											}
-											// if (debug) System.out.println("unquotedChar (value): '" + data[p] + "'");
-											p++;
-										}
-									}
-									p--;
-								}
-									break;
-								case 8:
-								// line 224 "JsonReader.rl"
-								{
-									if (debug) System.out.println("quotedChars");
-									s = ++p;
-									needsUnescape = false;
+									// Skips characters that are valid for an unquoted name or value.
 									outer:
 									while (true) {
 										switch (data[p]) {
-										case '\\':
-											needsUnescape = true;
-											p++;
-											break;
-										case '"':
+										case ':':
+										case '}':
+										case ']':
+										case ',':
+										case ' ':
+										case '\r':
+										case '\n':
+										case '\t':
 											break outer;
 										}
-										// if (debug) System.out.println("quotedChar: '" + data[p] + "'");
 										p++;
 									}
 									p--;
 								}
 									break;
-								// line 262 "JsonReader.java"
+								case 12:
+								// line 192 "JsonReader.rl"
+								{
+									String value = new String(data, s, p - s);
+									s = p;
+									String name = names.size > 0 ? names.pop() : null;
+									if (value.equals("null")) {
+										if (debug) System.out.println("null: " + name);
+										string(name, null);
+									} else if (value.equals("true")) {
+										if (debug) System.out.println("boolean: " + name + "=true");
+										bool(name, true);
+									} else if (value.equals("false")) {
+										if (debug) System.out.println("boolean: " + name + "=false");
+										bool(name, false);
+									} else {
+										if (needsUnescape) value = unescape(value);
+										if (debug) System.out.println("unquotedString: " + name + "=" + value);
+										string(name, value);
+									}
+								}
+									break;
+								// line 245 "JsonReader.java"
 								}
 							}
 						}
@@ -392,54 +373,49 @@ public class JsonReader implements BaseJsonReader {
 							int __nacts = (int)_json_actions[__acts++];
 							while (__nacts-- > 0) {
 								switch (_json_actions[__acts++]) {
-								case 1:
-								// line 111 "JsonReader.rl"
+								case 4:
+								// line 126 "JsonReader.rl"
 								{
 									String value = new String(data, s, p - s);
 									s = p;
-									if (needsUnescape) value = unescape(value);
-									outer:
-									if (stringIsName) {
-										stringIsName = false;
-										if (debug) System.out.println("name: " + value);
-										names.add(value);
+									String name = names.size > 0 ? names.pop() : null;
+									if (debug) System.out.println("double: " + name + "=" + Double.parseDouble(value));
+									number(name, Double.parseDouble(value));
+								}
+									break;
+								case 5:
+								// line 133 "JsonReader.rl"
+								{
+									String value = new String(data, s, p - s);
+									s = p;
+									String name = names.size > 0 ? names.pop() : null;
+									if (debug) System.out.println("long: " + name + "=" + Long.parseLong(value));
+									number(name, Long.parseLong(value));
+								}
+									break;
+								case 12:
+								// line 192 "JsonReader.rl"
+								{
+									String value = new String(data, s, p - s);
+									s = p;
+									String name = names.size > 0 ? names.pop() : null;
+									if (value.equals("null")) {
+										if (debug) System.out.println("null: " + name);
+										string(name, null);
+									} else if (value.equals("true")) {
+										if (debug) System.out.println("boolean: " + name + "=true");
+										bool(name, true);
+									} else if (value.equals("false")) {
+										if (debug) System.out.println("boolean: " + name + "=false");
+										bool(name, false);
 									} else {
-										String name = names.size > 0 ? names.pop() : null;
-										if (stringIsUnquoted) {
-											if (value.equals("true")) {
-												if (debug) System.out.println("boolean: " + name + "=true");
-												bool(name, true);
-												break outer;
-											} else if (value.equals("false")) {
-												if (debug) System.out.println("boolean: " + name + "=false");
-												bool(name, false);
-												break outer;
-											} else if (value.equals("null")) {
-												string(name, null);
-												break outer;
-											} else if (value.indexOf('.') != -1) {
-												try {
-													if (debug) System.out.println("double: " + name + "=" + Double.parseDouble(value));
-													number(name, Double.parseDouble(value));
-													break outer;
-												} catch (NumberFormatException ignored) {
-												}
-											} else {
-												try {
-													if (debug) System.out.println("double: " + name + "=" + Double.parseDouble(value));
-													number(name, Long.parseLong(value));
-													break outer;
-												} catch (NumberFormatException ignored) {
-												}
-											}
-										}
-										if (debug) System.out.println("string: " + name + "=" + value);
+										if (needsUnescape) value = unescape(value);
+										if (debug) System.out.println("unquotedString: " + name + "=" + value);
 										string(name, value);
 									}
-									stringIsUnquoted = false;
 								}
 									break;
-								// line 328 "JsonReader.java"
+								// line 308 "JsonReader.java"
 								}
 							}
 						}
@@ -450,7 +426,7 @@ public class JsonReader implements BaseJsonReader {
 				}
 			}
 
-			// line 254 "JsonReader.rl"
+			// line 237 "JsonReader.rl"
 
 		} catch (RuntimeException ex) {
 			parseRuntimeEx = ex;
@@ -480,102 +456,108 @@ public class JsonReader implements BaseJsonReader {
 		return root;
 	}
 
-	// line 338 "JsonReader.java"
+	// line 318 "JsonReader.java"
 	private static byte[] init__json_actions_0 () {
-		return new byte[] {0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 2, 0, 7, 2, 0, 8, 2, 1, 3, 2, 1, 5, 2, 6, 1, 2, 7, 6,
-			3, 0, 7, 6};
+		return new byte[] {0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 12, 2, 0, 2, 2, 0, 3, 2, 0, 11,
+			2, 4, 7, 2, 4, 9, 2, 5, 7, 2, 5, 9, 2, 12, 7, 2, 12, 9};
 	}
 
 	private static final byte _json_actions[] = init__json_actions_0();
 
 	private static short[] init__json_key_offsets_0 () {
-		return new short[] {0, 0, 12, 14, 15, 28, 40, 46, 52, 54, 66, 73, 80, 92, 93, 100, 113, 115, 116, 124, 137, 144, 157, 169,
-			176, 183, 195, 196, 204, 217, 219, 227, 240, 245, 250, 256, 256};
+		return new short[] {0, 0, 16, 18, 20, 22, 31, 33, 37, 39, 41, 57, 59, 61, 66, 68, 84, 86, 88, 94, 109, 114, 116, 119, 128,
+			132, 134, 141, 143, 151, 153, 162, 168, 170, 179, 189, 193, 195, 203, 205, 214, 216, 234, 236, 238, 244, 261, 267, 269,
+			271, 280, 290, 294, 296, 304, 306, 315, 317, 321, 325, 332, 340, 346, 346};
 	}
 
 	private static final short _json_key_offsets[] = init__json_key_offsets_0();
 
 	private static char[] init__json_trans_keys_0 () {
-		return new char[] {13, 32, 34, 44, 47, 58, 91, 93, 123, 125, 9, 10, 42, 47, 34, 13, 32, 34, 42, 44, 47, 58, 91, 93, 123,
-			125, 9, 10, 13, 32, 34, 44, 47, 58, 91, 93, 123, 125, 9, 10, 13, 32, 47, 58, 9, 10, 13, 32, 47, 58, 9, 10, 42, 47, 13,
-			32, 34, 44, 47, 58, 91, 93, 123, 125, 9, 10, 13, 32, 44, 47, 125, 9, 10, 13, 32, 44, 47, 125, 9, 10, 13, 32, 34, 44, 47,
-			58, 91, 93, 123, 125, 9, 10, 34, 13, 32, 42, 47, 58, 9, 10, 13, 32, 34, 42, 44, 47, 58, 91, 93, 123, 125, 9, 10, 42, 47,
-			34, 13, 32, 42, 44, 47, 125, 9, 10, 13, 32, 34, 42, 44, 47, 58, 91, 93, 123, 125, 9, 10, 13, 32, 42, 47, 58, 9, 10, 13,
-			32, 34, 42, 44, 47, 58, 91, 93, 123, 125, 9, 10, 13, 32, 34, 44, 47, 58, 91, 93, 123, 125, 9, 10, 13, 32, 44, 47, 93, 9,
-			10, 13, 32, 44, 47, 93, 9, 10, 13, 32, 34, 44, 47, 58, 91, 93, 123, 125, 9, 10, 34, 13, 32, 42, 44, 47, 93, 9, 10, 13,
-			32, 34, 42, 44, 47, 58, 91, 93, 123, 125, 9, 10, 42, 47, 13, 32, 42, 44, 47, 93, 9, 10, 13, 32, 34, 42, 44, 47, 58, 91,
-			93, 123, 125, 9, 10, 13, 32, 47, 9, 10, 13, 32, 47, 9, 10, 13, 32, 42, 47, 9, 10, 0};
+		return new char[] {32, 34, 36, 45, 47, 91, 95, 123, 9, 13, 48, 57, 65, 90, 97, 122, 34, 92, 34, 92, 42, 47, 34, 47, 92, 98,
+			102, 110, 114, 116, 117, 48, 57, 43, 45, 48, 57, 48, 57, 42, 47, 32, 34, 36, 44, 45, 47, 95, 125, 9, 13, 48, 57, 65, 90,
+			97, 122, 34, 92, 34, 92, 32, 47, 58, 9, 13, 42, 47, 32, 34, 36, 45, 47, 91, 95, 123, 9, 13, 48, 57, 65, 90, 97, 122, 34,
+			92, 34, 92, 32, 44, 47, 125, 9, 13, 32, 34, 36, 45, 47, 95, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 47, 58, 9, 13, 48,
+			57, 46, 48, 57, 32, 47, 58, 69, 101, 9, 13, 48, 57, 43, 45, 48, 57, 48, 57, 32, 47, 58, 9, 13, 48, 57, 42, 47, 32, 46,
+			47, 58, 9, 13, 48, 57, 42, 47, 34, 47, 92, 98, 102, 110, 114, 116, 117, 32, 44, 47, 125, 9, 13, 48, 57, 32, 44, 46, 47,
+			125, 9, 13, 48, 57, 32, 44, 47, 69, 101, 125, 9, 13, 48, 57, 43, 45, 48, 57, 48, 57, 32, 44, 47, 125, 9, 13, 48, 57, 42,
+			47, 34, 47, 92, 98, 102, 110, 114, 116, 117, 42, 47, 32, 34, 36, 44, 45, 47, 91, 93, 95, 123, 9, 13, 48, 57, 65, 90, 97,
+			122, 34, 92, 34, 92, 32, 44, 47, 93, 9, 13, 32, 34, 36, 45, 47, 91, 93, 95, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 44,
+			47, 93, 9, 13, 42, 47, 48, 57, 32, 44, 46, 47, 93, 9, 13, 48, 57, 32, 44, 47, 69, 93, 101, 9, 13, 48, 57, 43, 45, 48,
+			57, 48, 57, 32, 44, 47, 93, 9, 13, 48, 57, 42, 47, 34, 47, 92, 98, 102, 110, 114, 116, 117, 42, 47, 32, 47, 9, 13, 32,
+			47, 9, 13, 32, 46, 47, 9, 13, 48, 57, 32, 47, 69, 101, 9, 13, 48, 57, 32, 47, 9, 13, 48, 57, 0};
 	}
 
 	private static final char _json_trans_keys[] = init__json_trans_keys_0();
 
 	private static byte[] init__json_single_lengths_0 () {
-		return new byte[] {0, 10, 2, 1, 11, 10, 4, 4, 2, 10, 5, 5, 10, 1, 5, 11, 2, 1, 6, 11, 5, 11, 10, 5, 5, 10, 1, 6, 11, 2, 6,
-			11, 3, 3, 4, 0, 0};
+		return new byte[] {0, 8, 2, 2, 2, 7, 0, 2, 0, 2, 8, 2, 2, 3, 2, 8, 2, 2, 4, 7, 3, 0, 1, 5, 2, 0, 3, 2, 4, 2, 7, 4, 0, 5, 6,
+			2, 0, 4, 2, 7, 2, 10, 2, 2, 4, 9, 4, 2, 0, 5, 6, 2, 0, 4, 2, 7, 2, 2, 2, 3, 4, 2, 0, 0};
 	}
 
 	private static final byte _json_single_lengths[] = init__json_single_lengths_0();
 
 	private static byte[] init__json_range_lengths_0 () {
-		return new byte[] {0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1,
-			0, 0};
+		return new byte[] {0, 4, 0, 0, 0, 1, 1, 1, 1, 0, 4, 0, 0, 1, 0, 4, 0, 0, 1, 4, 1, 1, 1, 2, 1, 1, 2, 0, 2, 0, 1, 1, 1, 2, 2,
+			1, 1, 2, 0, 1, 0, 4, 0, 0, 1, 4, 1, 0, 1, 2, 2, 1, 1, 2, 0, 1, 0, 1, 1, 2, 2, 2, 0, 0};
 	}
 
 	private static final byte _json_range_lengths[] = init__json_range_lengths_0();
 
 	private static short[] init__json_index_offsets_0 () {
-		return new short[] {0, 0, 12, 15, 17, 30, 42, 48, 54, 57, 69, 76, 83, 95, 97, 104, 117, 120, 122, 130, 143, 150, 163, 175,
-			182, 189, 201, 203, 211, 224, 227, 235, 248, 253, 258, 264, 265};
+		return new short[] {0, 0, 13, 16, 19, 22, 31, 33, 37, 39, 42, 55, 58, 61, 66, 69, 82, 85, 88, 94, 106, 111, 113, 116, 124,
+			128, 130, 136, 139, 146, 149, 158, 164, 166, 174, 183, 187, 189, 196, 199, 208, 211, 226, 229, 232, 238, 252, 258, 261,
+			263, 271, 280, 284, 286, 293, 296, 305, 308, 312, 316, 322, 329, 334, 335};
 	}
 
 	private static final short _json_index_offsets[] = init__json_index_offsets_0();
 
-	private static byte[] init__json_indicies_0 () {
-		return new byte[] {1, 1, 2, 3, 4, 3, 5, 3, 6, 3, 1, 0, 7, 7, 3, 8, 3, 1, 1, 2, 9, 3, 10, 3, 5, 3, 6, 3, 1, 0, 12, 12, 13,
-			14, 15, 3, 3, 3, 3, 16, 12, 11, 17, 17, 18, 19, 17, 3, 20, 20, 21, 22, 20, 3, 23, 23, 3, 22, 22, 25, 3, 26, 3, 27, 3,
-			28, 3, 22, 24, 29, 29, 30, 31, 32, 29, 3, 33, 33, 14, 34, 16, 33, 3, 14, 14, 13, 3, 35, 3, 3, 3, 3, 16, 14, 11, 17, 3,
-			17, 17, 36, 37, 19, 17, 3, 14, 14, 13, 38, 3, 39, 3, 3, 3, 3, 16, 14, 11, 40, 40, 3, 29, 3, 29, 29, 41, 30, 42, 32, 29,
-			3, 22, 22, 25, 43, 3, 44, 3, 27, 3, 28, 3, 22, 24, 17, 17, 45, 46, 19, 17, 3, 12, 12, 13, 38, 14, 47, 3, 3, 3, 3, 16,
-			12, 11, 49, 49, 50, 51, 52, 3, 53, 54, 55, 3, 49, 48, 56, 56, 57, 58, 59, 56, 3, 60, 60, 51, 61, 54, 60, 3, 51, 51, 50,
-			3, 62, 3, 53, 54, 55, 3, 51, 48, 56, 3, 56, 56, 63, 57, 64, 59, 56, 3, 51, 51, 50, 65, 3, 66, 3, 53, 54, 55, 3, 51, 48,
-			67, 67, 3, 56, 56, 68, 57, 69, 59, 56, 3, 49, 49, 50, 65, 51, 70, 3, 53, 54, 55, 3, 49, 48, 8, 8, 71, 8, 3, 72, 72, 73,
-			72, 3, 8, 8, 74, 75, 8, 3, 3, 3, 0};
-	}
-
-	private static final byte _json_indicies[] = init__json_indicies_0();
-
 	private static byte[] init__json_trans_targs_0 () {
-		return new byte[] {32, 1, 3, 0, 34, 33, 33, 33, 33, 32, 34, 6, 5, 13, 12, 20, 35, 7, 8, 9, 7, 8, 9, 7, 10, 17, 18, 11, 11,
-			11, 12, 16, 35, 11, 16, 14, 12, 15, 6, 14, 11, 9, 19, 10, 18, 5, 21, 20, 23, 22, 26, 25, 30, 24, 36, 24, 24, 25, 29, 36,
-			24, 29, 27, 25, 28, 23, 27, 24, 22, 31, 30, 2, 33, 2, 1, 4};
+		return new byte[] {1, 2, 58, 6, 9, 57, 58, 57, 1, 59, 58, 58, 0, 57, 5, 3, 57, 5, 3, 57, 57, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0,
+			59, 0, 8, 8, 61, 0, 61, 0, 1, 1, 0, 10, 11, 20, 19, 21, 40, 20, 62, 10, 28, 20, 20, 0, 13, 39, 12, 13, 39, 12, 13, 14,
+			15, 13, 0, 13, 13, 0, 15, 16, 31, 32, 38, 18, 31, 18, 15, 33, 31, 31, 0, 18, 30, 17, 18, 30, 17, 18, 19, 29, 62, 18, 0,
+			19, 11, 20, 21, 27, 20, 62, 19, 28, 20, 20, 0, 13, 14, 15, 13, 0, 22, 0, 23, 22, 0, 13, 14, 15, 24, 24, 13, 23, 0, 25,
+			25, 26, 0, 26, 0, 13, 14, 15, 13, 26, 0, 19, 19, 0, 13, 23, 14, 15, 13, 22, 0, 18, 18, 0, 17, 17, 17, 17, 17, 17, 17,
+			17, 0, 18, 19, 29, 62, 18, 0, 33, 0, 18, 19, 34, 29, 62, 18, 33, 0, 18, 19, 29, 35, 35, 62, 18, 34, 0, 36, 36, 37, 0,
+			37, 0, 18, 19, 29, 62, 18, 37, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 0, 10, 10, 0, 41, 42, 46, 45, 48, 56, 44,
+			63, 46, 44, 41, 49, 46, 46, 0, 44, 55, 43, 44, 55, 43, 44, 45, 47, 63, 44, 0, 45, 42, 46, 48, 54, 44, 63, 46, 44, 45,
+			49, 46, 46, 0, 44, 45, 47, 63, 44, 0, 44, 44, 0, 49, 0, 44, 45, 50, 47, 63, 44, 49, 0, 44, 45, 47, 51, 63, 51, 44, 50,
+			0, 52, 52, 53, 0, 53, 0, 44, 45, 47, 63, 44, 53, 0, 45, 45, 0, 43, 43, 43, 43, 43, 43, 43, 43, 0, 41, 41, 0, 57, 4, 57,
+			0, 57, 4, 57, 0, 57, 60, 4, 57, 59, 0, 57, 4, 7, 7, 57, 60, 0, 57, 4, 57, 61, 0, 0, 0, 0};
 	}
 
 	private static final byte _json_trans_targs[] = init__json_trans_targs_0();
 
 	private static byte[] init__json_trans_actions_0 () {
-		return new byte[] {13, 0, 15, 0, 13, 7, 3, 11, 1, 32, 32, 17, 0, 20, 0, 17, 5, 1, 1, 1, 0, 0, 0, 11, 13, 15, 13, 7, 3, 1,
-			1, 1, 23, 0, 0, 17, 11, 29, 35, 35, 11, 11, 29, 32, 32, 11, 29, 35, 13, 0, 15, 0, 13, 7, 9, 3, 1, 1, 1, 26, 0, 0, 13,
-			11, 29, 32, 32, 11, 11, 29, 32, 1, 0, 0, 11, 29};
+		return new byte[] {0, 0, 31, 1, 0, 17, 31, 13, 0, 1, 31, 31, 0, 28, 1, 1, 7, 0, 0, 21, 21, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0,
+			0, 0, 0, 0, 0, 0, 0, 21, 21, 0, 0, 0, 31, 0, 1, 0, 31, 15, 0, 31, 31, 31, 0, 25, 1, 1, 5, 0, 0, 0, 0, 0, 0, 0, 21, 21,
+			0, 0, 0, 31, 1, 0, 17, 31, 13, 0, 1, 31, 31, 0, 28, 1, 1, 7, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 31, 1, 0, 31, 15, 0, 31, 31,
+			31, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 21, 21, 0, 5, 0, 5, 5,
+			5, 0, 0, 21, 21, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 23, 23, 23, 46, 23, 0, 0, 0, 11, 11, 0, 11, 40, 11, 0, 0, 9, 9, 9, 0, 0,
+			34, 9, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 34, 9, 0, 0, 21, 21, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 21, 21, 0, 0, 0, 31, 0, 1, 0,
+			17, 19, 31, 13, 0, 1, 31, 31, 0, 28, 1, 1, 7, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 31, 1, 0, 17, 19, 31, 13, 0, 1, 31, 31, 0,
+			23, 23, 23, 49, 23, 0, 21, 21, 0, 0, 0, 11, 11, 0, 11, 43, 11, 0, 0, 9, 9, 9, 0, 37, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9,
+			9, 37, 9, 0, 0, 21, 21, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 21, 21, 0, 0, 0, 0, 0, 23, 23, 23, 0, 11, 0, 11, 11, 0, 0, 9, 9,
+			0, 0, 9, 0, 0, 9, 9, 9, 0, 0, 0, 0, 0};
 	}
 
 	private static final byte _json_trans_actions[] = init__json_trans_actions_0();
 
 	private static byte[] init__json_eof_actions_0 () {
-		return new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,
-			0, 0};
+		return new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 11, 9, 9, 0, 0};
 	}
 
 	private static final byte _json_eof_actions[] = init__json_eof_actions_0();
 
 	static final int json_start = 1;
-	static final int json_first_final = 32;
+	static final int json_first_final = 57;
 	static final int json_error = 0;
 
-	static final int json_en_object = 5;
-	static final int json_en_array = 22;
+	static final int json_en_object = 10;
+	static final int json_en_array = 41;
 	static final int json_en_main = 1;
 
-	// line 284 "JsonReader.rl"
+	// line 267 "JsonReader.rl"
 
 	private final Array<JsonValue> elements = new Array(8);
 	private final Array<JsonValue> lastChild = new Array(8);
diff --git a/gdx/src/com/badlogic/gdx/utils/JsonReader.rl b/gdx/src/com/badlogic/gdx/utils/JsonReader.rl
index bc8c8b7..043cd93 100644
--- a/gdx/src/com/badlogic/gdx/utils/JsonReader.rl
+++ b/gdx/src/com/badlogic/gdx/utils/JsonReader.rl
@@ -83,7 +83,7 @@ public class JsonReader implements BaseJsonReader {
 
 		int s = 0;
 		Array<String> names = new Array(8);
-		boolean needsUnescape = false, stringIsName = false, stringIsUnquoted = false;
+		boolean needsUnescape = false;
 		RuntimeException parseRuntimeEx = null;
 
 		boolean debug = false;
@@ -105,50 +105,37 @@ public class JsonReader implements BaseJsonReader {
 				s = p;
 				needsUnescape = false;
 			}
+			action needsUnescape {
+				needsUnescape = true;
+			}
 			action name {
-				stringIsName = true;
+				String name = new String(data, s, p - s);
+				s = p;
+				if (needsUnescape) name = unescape(name);
+				if (debug) System.out.println("name: " + name);
+				names.add(name);
 			}
 			action string {
 				String value = new String(data, s, p - s);
 				s = p;
 				if (needsUnescape) value = unescape(value);
-				outer:
-				if (stringIsName) {
-					stringIsName = false;
-					if (debug) System.out.println("name: " + value);
-					names.add(value);
-				} else {
-					String name = names.size > 0 ? names.pop() : null;
-					if (stringIsUnquoted) {
-						if (value.equals("true")) {
-							if (debug) System.out.println("boolean: " + name + "=true");
-							bool(name, true);
-							break outer;
-						} else if (value.equals("false")) {
-							if (debug) System.out.println("boolean: " + name + "=false");
-							bool(name, false);
-							break outer;
-						} else if (value.equals("null")) {
-							string(name, null);
-							break outer;
-						} else if (value.indexOf('.') != -1) {
-							try {
-								if (debug) System.out.println("double: " + name + "=" + Double.parseDouble(value));
-								number(name, Double.parseDouble(value));
-								break outer;
-							} catch (NumberFormatException ignored) {}
-						} else {
-							try {
-								if (debug) System.out.println("double: " + name + "=" + Double.parseDouble(value));
-								number(name, Long.parseLong(value));
-								break outer;
-							} catch (NumberFormatException ignored) {}
-						}
-					}
-					if (debug) System.out.println("string: " + name + "=" + value);
-					string(name, value);
-				}
-				stringIsUnquoted = false;
+				String name = names.size > 0 ? names.pop() : null;
+				if (debug) System.out.println("string: " + name + "=" + value);
+				string(name, value);
+			}
+			action double {
+				String value = new String(data, s, p - s);
+				s = p;
+				String name = names.size > 0 ? names.pop() : null;
+				if (debug) System.out.println("double: " + name + "=" + Double.parseDouble(value));
+				number(name, Double.parseDouble(value));
+			}
+			action long {
+				String value = new String(data, s, p - s);
+				s = p;
+				String name = names.size > 0 ? names.pop() : null;
+				if (debug) System.out.println("long: " + name + "=" + Long.parseLong(value));
+				number(name, Long.parseLong(value));
 			}
 			action startObject {
 				String name = names.size > 0 ? names.pop() : null;
@@ -184,69 +171,65 @@ public class JsonReader implements BaseJsonReader {
 				}
 			}
 			action unquotedChars {
-				if (debug) System.out.println("unquotedChars");
-				s = p;
-				needsUnescape = false;
-				stringIsUnquoted = true;
-				if (stringIsName) {
-					outer:
-					while (true) {
-						switch (data[p]) {
-						case ':':
-						case ' ':
-						case '\r':
-						case '\n':
-						case '\t':
-							break outer;
-						}
-						// if (debug) System.out.println("unquotedChar (name): '" + data[p] + "'");
-						p++;
-					}
-				} else {
-					outer:
-					while (true) {
-						switch (data[p]) {
-						case '}':
-						case ']':
-						case ',':
-						case ' ':
-						case '\r':
-						case '\n':
-						case '\t':
-							break outer;
-						}
-						// if (debug) System.out.println("unquotedChar (value): '" + data[p] + "'");
-						p++;
-					}
-				}
-				p--;
-			}
-			action quotedChars {
-				if (debug) System.out.println("quotedChars");
-				s = ++p;
-				needsUnescape = false;
+				// Skips characters that are valid for an unquoted name or value.
 				outer:
 				while (true) {
 					switch (data[p]) {
-					case '\\':
-						needsUnescape = true;
-						p++;
-						break;
-					case '"':
+					case ':':
+					case '}':
+					case ']':
+					case ',':
+					case ' ':
+					case '\r':
+					case '\n':
+					case '\t':
 						break outer;
 					}
-					// if (debug) System.out.println("quotedChar: '" + data[p] + "'");
 					p++;
 				}
 				p--;
 			}
+			action unquotedString {
+				String value = new String(data, s, p - s);
+				s = p;
+				String name = names.size > 0 ? names.pop() : null;
+				if (value.equals("null")) {
+					if (debug) System.out.println("null: " + name);
+					string(name, null);
+				} else if (value.equals("true")) {
+					if (debug) System.out.println("boolean: " + name + "=true");
+					bool(name, true);
+				} else if (value.equals("false")) {
+					if (debug) System.out.println("boolean: " + name + "=false");
+					bool(name, false);
+				} else {
+					if (needsUnescape) value = unescape(value);
+					if (debug) System.out.println("unquotedString: " + name + "=" + value);
+					string(name, value);
+				}
+			}
+
+			ws = space | (('//' | '/*') @comment);
+			doubleChars = '-'? [0-9]+ '.' [0-9]+? ([eE] [+\-]? [0-9]+)?;
+			longChars = '-'? [0-9]+;
+			quotedChars = (^["\\] | ('\\' ["\\/bfnrtu] >needsUnescape))*;
+			unquotedNameChars = [a-zA-Z0-9_$] >unquotedChars;
+			unquotedValueChars = [a-zA-Z_$]  >unquotedChars;
+			name = ('"' quotedChars >buffer %name '"') | unquotedNameChars >buffer %name | doubleChars >buffer %name;
+
+			startObject = '{' @startObject;
+			startArray = '[' @startArray;
+			string = '"' quotedChars >buffer %string '"';
+			unquotedString = unquotedValueChars >buffer %unquotedString;
+			number = longChars >buffer %long | doubleChars >buffer %double $-1;
+			value = startObject | startArray | number | string | unquotedString $-1;
+
+			nameValue = name ws* ':' ws* value;
+
+			object := ws* (nameValue ws*)? (',' ws* nameValue ws*)** ','? ws* '}' @endObject;
+
+			array := ws* (value ws*)? (',' ws* value ws*)** ','? ws* ']' @endArray;
 
-			ws = [ \r\n\t] | (('//' | '/*') @comment);
-			string = '"' @quotedChars %string '"' | ^[{}\[\],:"\r\n\t ] >unquotedChars %string;
-			value = '{' @startObject | '[' @startArray | string;
-			nameValue = string >name ws* ':' ws* value;
-			object := ws* nameValue? ws* (',' ws* nameValue ws*)** ','? ws* '}' @endObject;
-			array := ws* value? ws* (',' ws* value ws*)** ','? ws* ']' @endArray;
 			main := ws* value ws*;
 
 			write init;
diff --git a/gdx/src/com/badlogic/gdx/utils/JsonWriter.java b/gdx/src/com/badlogic/gdx/utils/JsonWriter.java
index d452247..6bf0aa4 100644
--- a/gdx/src/com/badlogic/gdx/utils/JsonWriter.java
+++ b/gdx/src/com/badlogic/gdx/utils/JsonWriter.java
@@ -158,33 +158,33 @@ public class JsonWriter extends Writer {
 		json,
 		/** Like JSON, but names are only quoted if necessary. */
 		javascript,
-		/** Like JSON, but names and values are only quoted if they don't contain <code>\r\n\t</code> or <code>space</code> and don't
-		 * begin with <code>{}[]:,"</code>. Additionally, names cannot contain <code>:</code> and values cannot contain
-		 * <code>}],</code>. */
+		/** Like JSON, but names and values are only quoted if necessary. */
 		minimal;
 
 		static private Pattern javascriptPattern = Pattern.compile("[a-zA-Z_$][a-zA-Z_$0-9]*");
-		static private Pattern minimalNamePattern = Pattern.compile("[^{}\\[\\],\":\\r\\n\\t ][^:\\r\\n\\t ]*");
-		static private Pattern minimalValuePattern = Pattern.compile("[^{}\\[\\],\":\\r\\n\\t ][^}\\],\\r\\n\\t ]*");
+		static private Pattern minimalValuePattern = Pattern.compile("[a-zA-Z_$][^:}\\], ]*");
+		static private Pattern minimalNamePattern = Pattern.compile("[a-zA-Z0-9_$][^:}\\], ]*");
 
 		public String quoteValue (Object value) {
 			if (value == null || value instanceof Number || value instanceof Boolean) return String.valueOf(value);
-			String string = String.valueOf(value).replace("\\", "\\\\").replace("\r", "\\r").replace("\n", "\\n")
-				.replace("\t", "\\t");
+			String string = String.valueOf(value).replace("\\", "\\\\");
 			if (this == OutputType.minimal && !string.equals("true") && !string.equals("false") && !string.equals("null")
 				&& minimalValuePattern.matcher(string).matches()) return string;
 			return '"' + string.replace("\"", "\\\"") + '"';
 		}
 
 		public String quoteName (String value) {
-			value = value.replace("\\", "\\\\").replace("\r", "\\r").replace("\n", "\\n").replace("\t", "\\t");
+			value = value.replace("\\", "\\\\");
 			switch (this) {
 			case minimal:
 				if (minimalNamePattern.matcher(value).matches()) return value;
+				return '"' + value.replace("\"", "\\\"") + '"';
 			case javascript:
 				if (javascriptPattern.matcher(value).matches()) return value;
+				return '"' + value.replace("\"", "\\\"") + '"';
+			default:
+				return '"' + value.replace("\"", "\\\"") + '"';
 			}
-			return '"' + value.replace("\"", "\\\"") + '"';
 		}
 	}
 }
diff --git a/gdx/src/com/badlogic/gdx/utils/ShortArray.java b/gdx/src/com/badlogic/gdx/utils/ShortArray.java
index e38ce78..3693c88 100644
--- a/gdx/src/com/badlogic/gdx/utils/ShortArray.java
+++ b/gdx/src/com/badlogic/gdx/utils/ShortArray.java
@@ -128,7 +128,7 @@ public class ShortArray {
 	}
 
 	public void insert (int index, short value) {
-		if (index > size) throw new IndexOutOfBoundsException("index can't be > size: " + index + " > " + size);
+		if (index >= size) throw new IndexOutOfBoundsException("index can't be >= size: " + index + " >= " + size);
 		short[] items = this.items;
 		if (size == items.length) items = resize(Math.max(8, (int)(size * 1.75f)));
 		if (ordered)
diff --git a/gdx/src/com/esotericsoftware/tablelayout/BaseTableLayout.java b/gdx/src/com/esotericsoftware/tablelayout/BaseTableLayout.java
index 05ae85e..9e1a9e9 100644
--- a/gdx/src/com/esotericsoftware/tablelayout/BaseTableLayout.java
+++ b/gdx/src/com/esotericsoftware/tablelayout/BaseTableLayout.java
@@ -206,7 +206,7 @@ abstract public class BaseTableLayout<C, T extends C, L extends BaseTableLayout,
 	}
 
 	/** Returns the cell for the specified widget in this table, or null. */
-	public Cell<C> getCell (C widget) {
+	public Cell getCell (C widget) {
 		for (int i = 0, n = cells.size(); i < n; i++) {
 			Cell c = cells.get(i);
 			if (c.widget == widget) return c;
diff --git a/gdx/src/com/esotericsoftware/tablelayout/Cell.java b/gdx/src/com/esotericsoftware/tablelayout/Cell.java
index 25e868c..5f8ba0f 100644
--- a/gdx/src/com/esotericsoftware/tablelayout/Cell.java
+++ b/gdx/src/com/esotericsoftware/tablelayout/Cell.java
@@ -114,7 +114,7 @@ public class Cell<C> {
 	}
 
 	/** Sets the widget in this cell and adds the widget to the cell's table. If null, removes any current widget. */
-	public Cell<C> setWidget (C widget) {
+	public Cell setWidget (C widget) {
 		layout.toolkit.setWidget(layout, this, widget);
 		return this;
 	}
@@ -130,7 +130,7 @@ public class Cell<C> {
 	}
 
 	/** Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified value. */
-	public Cell<C> size (Value size) {
+	public Cell size (Value size) {
 		minWidth = size;
 		minHeight = size;
 		prefWidth = size;
@@ -141,7 +141,7 @@ public class Cell<C> {
 	}
 
 	/** Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified values. */
-	public Cell<C> size (Value width, Value height) {
+	public Cell size (Value width, Value height) {
 		minWidth = width;
 		minHeight = height;
 		prefWidth = width;
@@ -152,19 +152,19 @@ public class Cell<C> {
 	}
 
 	/** Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified value. */
-	public Cell<C> size (float size) {
+	public Cell size (float size) {
 		size(new FixedValue(size));
 		return this;
 	}
 
 	/** Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified values. */
-	public Cell<C> size (float width, float height) {
+	public Cell size (float width, float height) {
 		size(new FixedValue(width), new FixedValue(height));
 		return this;
 	}
 
 	/** Sets the minWidth, prefWidth, and maxWidth to the specified value. */
-	public Cell<C> width (Value width) {
+	public Cell width (Value width) {
 		minWidth = width;
 		prefWidth = width;
 		maxWidth = width;
@@ -172,13 +172,13 @@ public class Cell<C> {
 	}
 
 	/** Sets the minWidth, prefWidth, and maxWidth to the specified value. */
-	public Cell<C> width (float width) {
+	public Cell width (float width) {
 		width(new FixedValue(width));
 		return this;
 	}
 
 	/** Sets the minHeight, prefHeight, and maxHeight to the specified value. */
-	public Cell<C> height (Value height) {
+	public Cell height (Value height) {
 		minHeight = height;
 		prefHeight = height;
 		maxHeight = height;
@@ -186,157 +186,157 @@ public class Cell<C> {
 	}
 
 	/** Sets the minHeight, prefHeight, and maxHeight to the specified value. */
-	public Cell<C> height (float height) {
+	public Cell height (float height) {
 		height(new FixedValue(height));
 		return this;
 	}
 
 	/** Sets the minWidth and minHeight to the specified value. */
-	public Cell<C> minSize (Value size) {
+	public Cell minSize (Value size) {
 		minWidth = size;
 		minHeight = size;
 		return this;
 	}
 
 	/** Sets the minWidth and minHeight to the specified values. */
-	public Cell<C> minSize (Value width, Value height) {
+	public Cell minSize (Value width, Value height) {
 		minWidth = width;
 		minHeight = height;
 		return this;
 	}
 
-	public Cell<C> minWidth (Value minWidth) {
+	public Cell minWidth (Value minWidth) {
 		this.minWidth = minWidth;
 		return this;
 	}
 
-	public Cell<C> minHeight (Value minHeight) {
+	public Cell minHeight (Value minHeight) {
 		this.minHeight = minHeight;
 		return this;
 	}
 
 	/** Sets the minWidth and minHeight to the specified value. */
-	public Cell<C> minSize (float size) {
+	public Cell minSize (float size) {
 		minWidth = new FixedValue(size);
 		minHeight = new FixedValue(size);
 		return this;
 	}
 
 	/** Sets the minWidth and minHeight to the specified values. */
-	public Cell<C> minSize (float width, float height) {
+	public Cell minSize (float width, float height) {
 		minWidth = new FixedValue(width);
 		minHeight = new FixedValue(height);
 		return this;
 	}
 
-	public Cell<C> minWidth (float minWidth) {
+	public Cell minWidth (float minWidth) {
 		this.minWidth = new FixedValue(minWidth);
 		return this;
 	}
 
-	public Cell<C> minHeight (float minHeight) {
+	public Cell minHeight (float minHeight) {
 		this.minHeight = new FixedValue(minHeight);
 		return this;
 	}
 
 	/** Sets the prefWidth and prefHeight to the specified value. */
-	public Cell<C> prefSize (Value size) {
+	public Cell prefSize (Value size) {
 		prefWidth = size;
 		prefHeight = size;
 		return this;
 	}
 
 	/** Sets the prefWidth and prefHeight to the specified values. */
-	public Cell<C> prefSize (Value width, Value height) {
+	public Cell prefSize (Value width, Value height) {
 		prefWidth = width;
 		prefHeight = height;
 		return this;
 	}
 
-	public Cell<C> prefWidth (Value prefWidth) {
+	public Cell prefWidth (Value prefWidth) {
 		this.prefWidth = prefWidth;
 		return this;
 	}
 
-	public Cell<C> prefHeight (Value prefHeight) {
+	public Cell prefHeight (Value prefHeight) {
 		this.prefHeight = prefHeight;
 		return this;
 	}
 
 	/** Sets the prefWidth and prefHeight to the specified value. */
-	public Cell<C> prefSize (float width, float height) {
+	public Cell prefSize (float width, float height) {
 		prefWidth = new FixedValue(width);
 		prefHeight = new FixedValue(height);
 		return this;
 	}
 
 	/** Sets the prefWidth and prefHeight to the specified values. */
-	public Cell<C> prefSize (float size) {
+	public Cell prefSize (float size) {
 		prefWidth = new FixedValue(size);
 		prefHeight = new FixedValue(size);
 		return this;
 	}
 
-	public Cell<C> prefWidth (float prefWidth) {
+	public Cell prefWidth (float prefWidth) {
 		this.prefWidth = new FixedValue(prefWidth);
 		return this;
 	}
 
-	public Cell<C> prefHeight (float prefHeight) {
+	public Cell prefHeight (float prefHeight) {
 		this.prefHeight = new FixedValue(prefHeight);
 		return this;
 	}
 
 	/** Sets the maxWidth and maxHeight to the specified value. */
-	public Cell<C> maxSize (Value size) {
+	public Cell maxSize (Value size) {
 		maxWidth = size;
 		maxHeight = size;
 		return this;
 	}
 
 	/** Sets the maxWidth and maxHeight to the specified values. */
-	public Cell<C> maxSize (Value width, Value height) {
+	public Cell maxSize (Value width, Value height) {
 		maxWidth = width;
 		maxHeight = height;
 		return this;
 	}
 
-	public Cell<C> maxWidth (Value maxWidth) {
+	public Cell maxWidth (Value maxWidth) {
 		this.maxWidth = maxWidth;
 		return this;
 	}
 
-	public Cell<C> maxHeight (Value maxHeight) {
+	public Cell maxHeight (Value maxHeight) {
 		this.maxHeight = maxHeight;
 		return this;
 	}
 
 	/** Sets the maxWidth and maxHeight to the specified value. */
-	public Cell<C> maxSize (float size) {
+	public Cell maxSize (float size) {
 		maxWidth = new FixedValue(size);
 		maxHeight = new FixedValue(size);
 		return this;
 	}
 
 	/** Sets the maxWidth and maxHeight to the specified values. */
-	public Cell<C> maxSize (float width, float height) {
+	public Cell maxSize (float width, float height) {
 		maxWidth = new FixedValue(width);
 		maxHeight = new FixedValue(height);
 		return this;
 	}
 
-	public Cell<C> maxWidth (float maxWidth) {
+	public Cell maxWidth (float maxWidth) {
 		this.maxWidth = new FixedValue(maxWidth);
 		return this;
 	}
 
-	public Cell<C> maxHeight (float maxHeight) {
+	public Cell maxHeight (float maxHeight) {
 		this.maxHeight = new FixedValue(maxHeight);
 		return this;
 	}
 
 	/** Sets the spaceTop, spaceLeft, spaceBottom, and spaceRight to the specified value. */
-	public Cell<C> space (Value space) {
+	public Cell space (Value space) {
 		spaceTop = space;
 		spaceLeft = space;
 		spaceBottom = space;
@@ -344,7 +344,7 @@ public class Cell<C> {
 		return this;
 	}
 
-	public Cell<C> space (Value top, Value left, Value bottom, Value right) {
+	public Cell space (Value top, Value left, Value bottom, Value right) {
 		spaceTop = top;
 		spaceLeft = left;
 		spaceBottom = bottom;
@@ -352,28 +352,28 @@ public class Cell<C> {
 		return this;
 	}
 
-	public Cell<C> spaceTop (Value spaceTop) {
+	public Cell spaceTop (Value spaceTop) {
 		this.spaceTop = spaceTop;
 		return this;
 	}
 
-	public Cell<C> spaceLeft (Value spaceLeft) {
+	public Cell spaceLeft (Value spaceLeft) {
 		this.spaceLeft = spaceLeft;
 		return this;
 	}
 
-	public Cell<C> spaceBottom (Value spaceBottom) {
+	public Cell spaceBottom (Value spaceBottom) {
 		this.spaceBottom = spaceBottom;
 		return this;
 	}
 
-	public Cell<C> spaceRight (Value spaceRight) {
+	public Cell spaceRight (Value spaceRight) {
 		this.spaceRight = spaceRight;
 		return this;
 	}
 
 	/** Sets the spaceTop, spaceLeft, spaceBottom, and spaceRight to the specified value. */
-	public Cell<C> space (float space) {
+	public Cell space (float space) {
 		if (space < 0) throw new IllegalArgumentException("space cannot be < 0.");
 		Value value = new FixedValue(space);
 		spaceTop = value;
@@ -383,7 +383,7 @@ public class Cell<C> {
 		return this;
 	}
 
-	public Cell<C> space (float top, float left, float bottom, float right) {
+	public Cell space (float top, float left, float bottom, float right) {
 		if (top < 0) throw new IllegalArgumentException("top cannot be < 0.");
 		if (left < 0) throw new IllegalArgumentException("left cannot be < 0.");
 		if (bottom < 0) throw new IllegalArgumentException("bottom cannot be < 0.");
@@ -395,32 +395,32 @@ public class Cell<C> {
 		return this;
 	}
 
-	public Cell<C> spaceTop (float spaceTop) {
+	public Cell spaceTop (float spaceTop) {
 		if (spaceTop < 0) throw new IllegalArgumentException("spaceTop cannot be < 0.");
 		this.spaceTop = new FixedValue(spaceTop);
 		return this;
 	}
 
-	public Cell<C> spaceLeft (float spaceLeft) {
+	public Cell spaceLeft (float spaceLeft) {
 		if (spaceLeft < 0) throw new IllegalArgumentException("spaceLeft cannot be < 0.");
 		this.spaceLeft = new FixedValue(spaceLeft);
 		return this;
 	}
 
-	public Cell<C> spaceBottom (float spaceBottom) {
+	public Cell spaceBottom (float spaceBottom) {
 		if (spaceBottom < 0) throw new IllegalArgumentException("spaceBottom cannot be < 0.");
 		this.spaceBottom = new FixedValue(spaceBottom);
 		return this;
 	}
 
-	public Cell<C> spaceRight (float spaceRight) {
+	public Cell spaceRight (float spaceRight) {
 		if (spaceRight < 0) throw new IllegalArgumentException("spaceRight cannot be < 0.");
 		this.spaceRight = new FixedValue(spaceRight);
 		return this;
 	}
 
 	/** Sets the padTop, padLeft, padBottom, and padRight to the specified value. */
-	public Cell<C> pad (Value pad) {
+	public Cell pad (Value pad) {
 		padTop = pad;
 		padLeft = pad;
 		padBottom = pad;
@@ -428,7 +428,7 @@ public class Cell<C> {
 		return this;
 	}
 
-	public Cell<C> pad (Value top, Value left, Value bottom, Value right) {
+	public Cell pad (Value top, Value left, Value bottom, Value right) {
 		padTop = top;
 		padLeft = left;
 		padBottom = bottom;
@@ -436,28 +436,28 @@ public class Cell<C> {
 		return this;
 	}
 
-	public Cell<C> padTop (Value padTop) {
+	public Cell padTop (Value padTop) {
 		this.padTop = padTop;
 		return this;
 	}
 
-	public Cell<C> padLeft (Value padLeft) {
+	public Cell padLeft (Value padLeft) {
 		this.padLeft = padLeft;
 		return this;
 	}
 
-	public Cell<C> padBottom (Value padBottom) {
+	public Cell padBottom (Value padBottom) {
 		this.padBottom = padBottom;
 		return this;
 	}
 
-	public Cell<C> padRight (Value padRight) {
+	public Cell padRight (Value padRight) {
 		this.padRight = padRight;
 		return this;
 	}
 
 	/** Sets the padTop, padLeft, padBottom, and padRight to the specified value. */
-	public Cell<C> pad (float pad) {
+	public Cell pad (float pad) {
 		Value value = new FixedValue(pad);
 		padTop = value;
 		padLeft = value;
@@ -466,7 +466,7 @@ public class Cell<C> {
 		return this;
 	}
 
-	public Cell<C> pad (float top, float left, float bottom, float right) {
+	public Cell pad (float top, float left, float bottom, float right) {
 		padTop = new FixedValue(top);
 		padLeft = new FixedValue(left);
 		padBottom = new FixedValue(bottom);
@@ -474,60 +474,60 @@ public class Cell<C> {
 		return this;
 	}
 
-	public Cell<C> padTop (float padTop) {
+	public Cell padTop (float padTop) {
 		this.padTop = new FixedValue(padTop);
 		return this;
 	}
 
-	public Cell<C> padLeft (float padLeft) {
+	public Cell padLeft (float padLeft) {
 		this.padLeft = new FixedValue(padLeft);
 		return this;
 	}
 
-	public Cell<C> padBottom (float padBottom) {
+	public Cell padBottom (float padBottom) {
 		this.padBottom = new FixedValue(padBottom);
 		return this;
 	}
 
-	public Cell<C> padRight (float padRight) {
+	public Cell padRight (float padRight) {
 		this.padRight = new FixedValue(padRight);
 		return this;
 	}
 
 	/** Sets fillX and fillY to 1. */
-	public Cell<C> fill () {
+	public Cell fill () {
 		fillX = 1f;
 		fillY = 1f;
 		return this;
 	}
 
 	/** Sets fillX to 1. */
-	public Cell<C> fillX () {
+	public Cell fillX () {
 		fillX = 1f;
 		return this;
 	}
 
 	/** Sets fillY to 1. */
-	public Cell<C> fillY () {
+	public Cell fillY () {
 		fillY = 1f;
 		return this;
 	}
 
-	public Cell<C> fill (Float x, Float y) {
+	public Cell fill (Float x, Float y) {
 		fillX = x;
 		fillY = y;
 		return this;
 	}
 
 	/** Sets fillX and fillY to 1 if true, 0 if false. */
-	public Cell<C> fill (boolean x, boolean y) {
+	public Cell fill (boolean x, boolean y) {
 		fillX = x ? 1f : 0;
 		fillY = y ? 1f : 0;
 		return this;
 	}
 
 	/** Sets fillX and fillY to 1 if true, 0 if false. */
-	public Cell<C> fill (boolean fill) {
+	public Cell fill (boolean fill) {
 		fillX = fill ? 1f : 0;
 		fillY = fill ? 1f : 0;
 		return this;
@@ -535,19 +535,19 @@ public class Cell<C> {
 
 	/** Sets the alignment of the widget within the cell. Set to {@link #CENTER}, {@link #TOP}, {@link #BOTTOM}, {@link #LEFT},
 	 * {@link #RIGHT}, or any combination of those. */
-	public Cell<C> align (Integer align) {
+	public Cell align (Integer align) {
 		this.align = align;
 		return this;
 	}
 
 	/** Sets the alignment of the widget within the cell to {@link #CENTER}. This clears any other alignment. */
-	public Cell<C> center () {
+	public Cell center () {
 		align = CENTER;
 		return this;
 	}
 
 	/** Adds {@link #TOP} and clears {@link #BOTTOM} for the alignment of the widget within the cell. */
-	public Cell<C> top () {
+	public Cell top () {
 		if (align == null)
 			align = TOP;
 		else {
@@ -558,7 +558,7 @@ public class Cell<C> {
 	}
 
 	/** Adds {@link #LEFT} and clears {@link #RIGHT} for the alignment of the widget within the cell. */
-	public Cell<C> left () {
+	public Cell left () {
 		if (align == null)
 			align = LEFT;
 		else {
@@ -569,7 +569,7 @@ public class Cell<C> {
 	}
 
 	/** Adds {@link #BOTTOM} and clears {@link #TOP} for the alignment of the widget within the cell. */
-	public Cell<C> bottom () {
+	public Cell bottom () {
 		if (align == null)
 			align = BOTTOM;
 		else {
@@ -580,7 +580,7 @@ public class Cell<C> {
 	}
 
 	/** Adds {@link #RIGHT} and clears {@link #LEFT} for the alignment of the widget within the cell. */
-	public Cell<C> right () {
+	public Cell right () {
 		if (align == null)
 			align = RIGHT;
 		else {
@@ -591,44 +591,44 @@ public class Cell<C> {
 	}
 
 	/** Sets expandX and expandY to 1. */
-	public Cell<C> expand () {
+	public Cell expand () {
 		expandX = 1;
 		expandY = 1;
 		return this;
 	}
 
 	/** Sets expandX to 1. */
-	public Cell<C> expandX () {
+	public Cell expandX () {
 		expandX = 1;
 		return this;
 	}
 
 	/** Sets expandY to 1. */
-	public Cell<C> expandY () {
+	public Cell expandY () {
 		expandY = 1;
 		return this;
 	}
 
-	public Cell<C> expand (Integer x, Integer y) {
+	public Cell expand (Integer x, Integer y) {
 		expandX = x;
 		expandY = y;
 		return this;
 	}
 
 	/** Sets expandX and expandY to 1 if true, 0 if false. */
-	public Cell<C> expand (boolean x, boolean y) {
+	public Cell expand (boolean x, boolean y) {
 		expandX = x ? 1 : 0;
 		expandY = y ? 1 : 0;
 		return this;
 	}
 
-	public Cell<C> ignore (Boolean ignore) {
+	public Cell ignore (Boolean ignore) {
 		this.ignore = ignore;
 		return this;
 	}
 
 	/** Sets ignore to true. */
-	public Cell<C> ignore () {
+	public Cell ignore () {
 		this.ignore = true;
 		return this;
 	}
@@ -637,31 +637,31 @@ public class Cell<C> {
 		return ignore != null && ignore == true;
 	}
 
-	public Cell<C> colspan (Integer colspan) {
+	public Cell colspan (Integer colspan) {
 		this.colspan = colspan;
 		return this;
 	}
 
 	/** Sets uniformX and uniformY to true. */
-	public Cell<C> uniform () {
+	public Cell uniform () {
 		uniformX = true;
 		uniformY = true;
 		return this;
 	}
 
 	/** Sets uniformX to true. */
-	public Cell<C> uniformX () {
+	public Cell uniformX () {
 		uniformX = true;
 		return this;
 	}
 
 	/** Sets uniformY to true. */
-	public Cell<C> uniformY () {
+	public Cell uniformY () {
 		uniformY = true;
 		return this;
 	}
 
-	public Cell<C> uniform (Boolean x, Boolean y) {
+	public Cell uniform (Boolean x, Boolean y) {
 		uniformX = x;
 		uniformY = y;
 		return this;
@@ -905,7 +905,7 @@ public class Cell<C> {
 		return computedPadRight;
 	}
 
-	public Cell<C> row () {
+	public Cell row () {
 		return layout.row();
 	}
 
diff --git a/gdx/src/com/esotericsoftware/tablelayout/Toolkit.java b/gdx/src/com/esotericsoftware/tablelayout/Toolkit.java
index 14a14de..cb85570 100644
--- a/gdx/src/com/esotericsoftware/tablelayout/Toolkit.java
+++ b/gdx/src/com/esotericsoftware/tablelayout/Toolkit.java
@@ -34,7 +34,7 @@ import com.esotericsoftware.tablelayout.BaseTableLayout.Debug;
 public abstract class Toolkit<C, T extends C, L extends BaseTableLayout> {
 	static public Toolkit instance;
 
-	abstract public Cell<C> obtainCell (L layout);
+	abstract public Cell obtainCell (L layout);
 
 	abstract public void freeCell (Cell cell);
 
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/PathTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/PathTest.java
index 24367a1..224e3ab 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/PathTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/PathTest.java
@@ -34,69 +34,54 @@ import com.badlogic.gdx.utils.Array;
 /** @author Xoppa */
 public class PathTest extends GdxTest {
 	int SAMPLE_POINTS = 100;
-	float SAMPLE_POINT_DISTANCE = 1f / SAMPLE_POINTS;
+	float SAMPLE_POINT_DISTANCE = 1f/SAMPLE_POINTS;
 	float ZIGZAG_SCALE;
-
+	
 	SpriteBatch spriteBatch;
 	ImmediateModeRenderer20 renderer;
 	Sprite obj;
-	Sprite obj2;
 	Array<Path<Vector2>> paths = new Array<Path<Vector2>>();
 	int currentPath = 0;
 	float t;
-	float t2;
 	float zt;
-	float speed = 0.2f;
+	float speed = 0.3f;
 	float zspeed = 1.0f;
 	float wait = 0f;
 	boolean zigzag = false;
-
+	
 	@Override
 	public void create () {
 		renderer = new ImmediateModeRenderer20(false, false, 0);
 		spriteBatch = new SpriteBatch();
 		obj = new Sprite(new Texture(Gdx.files.internal("data/badlogicsmall.jpg")));
-		obj.setSize(40, 40);
-		obj.setOriginCenter();
-		obj2 = new Sprite(new Texture(Gdx.files.internal("data/bobrgb888-32x32.png")));
-		obj2.setSize(40, 40);
-		obj2.setOriginCenter();
-		ZIGZAG_SCALE = Gdx.graphics.getDensity() * 96; // 96DP
-
+		ZIGZAG_SCALE = Gdx.graphics.getDensity() * 96; //96DP
+		
 		float w = Gdx.graphics.getWidth() - obj.getWidth();
 		float h = Gdx.graphics.getHeight() - obj.getHeight();
-
-		paths.add(new Bezier<Vector2>(new Vector2(0, 0), new Vector2(w, h)));
-		paths.add(new Bezier<Vector2>(new Vector2(0, 0), new Vector2(0, h), new Vector2(w, h)));
-		paths.add(new Bezier<Vector2>(new Vector2(0, 0), new Vector2(w, 0), new Vector2(0, h), new Vector2(w, h)));
-
-		Vector2 cp[] = new Vector2[] {new Vector2(0, 0), new Vector2(w * 0.25f, h * 0.5f), new Vector2(0, h),
-			new Vector2(w * 0.5f, h * 0.75f), new Vector2(w, h), new Vector2(w * 0.75f, h * 0.5f), new Vector2(w, 0),
-			new Vector2(w * 0.5f, h * 0.25f)};
+		
+		paths.add(new Bezier<Vector2>(new Vector2(0,0), new Vector2(w, h)));
+		paths.add(new Bezier<Vector2>(new Vector2(0,0), new Vector2(0, h), new Vector2(w, h)));
+		paths.add(new Bezier<Vector2>(new Vector2(0,0), new Vector2(w, 0), new Vector2(0, h), new Vector2(w, h)));
+		
+		Vector2 cp[] = new Vector2[]{
+			new Vector2(0, 0), new Vector2(w * 0.25f, h * 0.5f), new Vector2(0, h), new Vector2(w*0.5f, h*0.75f),
+			new Vector2(w, h), new Vector2(w * 0.75f, h * 0.5f), new Vector2(w, 0), new Vector2(w*0.5f, h*0.25f)
+		};
 		paths.add(new BSpline<Vector2>(cp, 3, true));
-
+		
 		paths.add(new CatmullRomSpline<Vector2>(cp, true));
-
-		pathLength = paths.get(currentPath).approxLength(500);
-		avg_speed = speed * pathLength;
-
+		
 		Gdx.input.setInputProcessor(this);
 	}
-
+	
 	final Vector2 tmpV = new Vector2();
 	final Vector2 tmpV2 = new Vector2();
-	final Vector2 tmpV3 = new Vector2();
-	final Vector2 tmpV4 = new Vector2();
-
-	float pathLength;
-	float avg_speed;
-
 	@Override
 	public void render () {
 		GL20 gl = Gdx.graphics.getGL20();
 		gl.glClearColor(0.7f, 0.7f, 0.7f, 1);
 		gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-
+		
 		if (wait > 0)
 			wait -= Gdx.graphics.getDeltaTime();
 		else {
@@ -104,49 +89,33 @@ public class PathTest extends GdxTest {
 			zt += zspeed * Gdx.graphics.getDeltaTime();
 			while (t >= 1f) {
 				currentPath = (currentPath + 1) % paths.size;
-				pathLength = paths.get(currentPath).approxLength(500);
-				if (currentPath > 2) {
-					avg_speed = speed * pathLength / 8.0f;
-				} else {
-					avg_speed = speed * pathLength;
-				}
-
-				if (currentPath == 0) {
+				if(currentPath == 0) {
 					zigzag = !zigzag;
 					zt = 0;
 				}
 				t -= 1f;
-				t2 = 0f;
-
 			}
-
+			
 			paths.get(currentPath).valueAt(tmpV, t);
 			paths.get(currentPath).derivativeAt(tmpV2, t);
-
-			paths.get(currentPath).derivativeAt(tmpV3, t2);
-			t2 += avg_speed * Gdx.graphics.getDeltaTime() / tmpV3.len();
-
-			paths.get(currentPath).valueAt(tmpV4, t2);
-			// obj.setRotation(tmpV2.angle());
-			// obj2.setRotation(tmpV3.angle());
-
-			if (zigzag) {
+			
+			obj.setRotation(tmpV2.angle());
+			
+			if(zigzag){
 				tmpV2.nor();
 				tmpV2.set(-tmpV2.y, tmpV2.x);
 				tmpV2.scl((float)Math.sin(zt) * ZIGZAG_SCALE);
 				tmpV.add(tmpV2);
 			}
-
 			obj.setPosition(tmpV.x, tmpV.y);
-			obj2.setPosition(tmpV4.x, tmpV4.y);
-
+			
 		}
-
+			
 		renderer.begin(spriteBatch.getProjectionMatrix(), GL20.GL_LINE_STRIP);
 		float val = 0f;
 		while (val <= 1f) {
 			renderer.color(0f, 0f, 0f, 1f);
-			paths.get(currentPath).valueAt(/* out: */tmpV, val);
+			paths.get(currentPath).valueAt(/*out:*/tmpV, val);
 			renderer.vertex(tmpV.x, tmpV.y, 0);
 			val += SAMPLE_POINT_DISTANCE;
 		}
@@ -154,26 +123,25 @@ public class PathTest extends GdxTest {
 
 		spriteBatch.begin();
 		obj.draw(spriteBatch);
-		obj2.draw(spriteBatch);
 		spriteBatch.end();
 	}
-
-	private void touch (int x, int y) {
-		t = paths.get(currentPath).locate(tmpV.set(x, Gdx.graphics.getHeight() - y));
+	
+	private void touch(int x, int y) {
+		t = paths.get(currentPath).locate(tmpV.set(x, Gdx.graphics.getHeight()-y));
 		paths.get(currentPath).valueAt(tmpV, t);
 		obj.setPosition(tmpV.x, tmpV.y);
-		wait = 0.2f;
+		wait = 0.2f;		
 	}
-
+	
 	@Override
 	public boolean touchUp (int screenX, int screenY, int pointer, int button) {
 		touch(screenX, screenY);
 		return super.touchUp(screenX, screenY, pointer, button);
 	}
-
+	
 	@Override
 	public boolean touchDragged (int screenX, int screenY, int pointer) {
 		touch(screenX, screenY);
 		return super.touchDragged(screenX, screenY, pointer);
 	}
-}
+}
\ No newline at end of file
