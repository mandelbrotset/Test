diff --git a/CHANGES b/CHANGES
index 5d4ac94..52eb815 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,4 +1,6 @@
 [0.9.9]
+- Updated to LWJGL 2.9.0
+- refactored JSON API, see http://www.badlogicgames.com/wordpress/?p=2993
 - Updated Box2D to the latest trunk. Body#applyXXX methods now take an additional boolean parameter.
 - TmxMapLoader has a flag in Parameters that lets you specify whether to generate mipmaps
 - Animation#isAnimationFinished was fixed to behave as per javadocs (ignores looping)
@@ -16,6 +18,10 @@
 - scene2d, no longer use getters/setters internally for Actor x, y, width, height, scalex, scaley and rotation.
 - Array, detect nested iterator usage and throw exception.
 - Added getVolume to Music class and Android, IOS and GWT backends
+- 1381, fixed JSON parsing of longs. In addition to Float, it now parses Long if no decimal point is found.
+- Changed Array constructors that took an array to have offset and count
+- Json refactoring, see http://www.badlogicgames.com/wordpress/?p=2993
+- scene2d, Actor parentToLocalCoordinates and localToParentCoordinates refactoring, see http://www.badlogicgames.com/forum/viewtopic.php?p=40441#p40441
 
 [0.9.8]
 - see http://www.badlogicgames.com/wordpress/?p=2791
diff --git a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
index 2397264..4a1fc3d 100755
--- a/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
+++ b/backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidLiveWallpaperService.java
@@ -190,7 +190,7 @@ public abstract class AndroidLiveWallpaperService extends WallpaperService {
 		
 		app.initialize(listener, config);
 		
-		if (config.getTouchEventsForLiveWallpaper && Integer.parseInt(android.os.Build.VERSION.SDK) < 9)
+		if (config.getTouchEventsForLiveWallpaper && Integer.parseInt(android.os.Build.VERSION.SDK) >= 7)
 			linkedEngine.setTouchEventsEnabled(true);
 		
 		//onResume(); do not call it there
@@ -338,11 +338,11 @@ public abstract class AndroidLiveWallpaperService extends WallpaperService {
 				onCreateApplication();
 				if (app.graphics == null)
 					throw new Error("You must override 'AndroidLiveWallpaperService.onCreateApplication' method and call 'initialize' from its body.");
-				
-				view = (SurfaceHolder.Callback)app.graphics.view;
-				this.getSurfaceHolder().removeCallback(view);	// we are going to call this events manually
 			}
 
+			view = (SurfaceHolder.Callback)app.graphics.view;
+			this.getSurfaceHolder().removeCallback(view);	// we are going to call this events manually
+
 			// inherit format from shared surface view
 			engineFormat = viewFormat;
 			engineWidth = viewWidth;
diff --git a/backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSAudio.java b/backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSAudio.java
index dd0faee..275d6b5 100644
--- a/backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSAudio.java
+++ b/backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSAudio.java
@@ -102,14 +102,15 @@ public class IOSAudio implements Audio {
 		verify(fileHandle);
 
 		// create audio player - from file path
+		String path = fileHandle.file().getPath().replace('\\', '/');
 		NSError[] error = new NSError[1];
-		AVAudioPlayer player = AVAudioPlayer.FromUrl(NSUrl.FromFilename(fileHandle.path()), error);
+		AVAudioPlayer player = AVAudioPlayer.FromUrl(NSUrl.FromFilename(path), error);
 		if (error[0] == null) {
 			// no error: return the music object
 			return new IOSMusic(player);
 		} else {
 			// throw an exception
-			throw new GdxRuntimeException("Error opening music file at " + fileHandle.path() + ": " + error[0].ToString());
+			throw new GdxRuntimeException("Error opening music file at " + path + ": " + error[0].ToString());
 		}
 	}
 }
diff --git a/backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSMonotouchGLES20.java b/backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSMonotouchGLES20.java
index f0ac001..b8c1d54 100644
--- a/backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSMonotouchGLES20.java
+++ b/backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSMonotouchGLES20.java
@@ -278,8 +278,10 @@ public class IOSMonotouchGLES20 implements GL20, GLCommon {
 	@Override
 	public void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type,
 		Buffer pixels) {
+		// pixels can be null by OpenGL definition if an blank image is to be created (e.g. for buffering)
+		IntPtr pixelsPointer = pixels != null ? IntPtr.op_Explicit(BufferUtils.getUnsafeBufferAddress(pixels)) : null;
 		GL.TexImage2D(TextureTarget.wrap(target), level, PixelInternalFormat.wrap(internalformat), width, height, border,
-			PixelFormat.wrap(format), PixelType.wrap(type), IntPtr.op_Explicit(BufferUtils.getUnsafeBufferAddress(pixels)));
+			PixelFormat.wrap(format), PixelType.wrap(type), pixelsPointer);
 	}
 
 	@Override
diff --git a/backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSNet.java b/backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSNet.java
index 39aab17..0902452 100755
--- a/backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSNet.java
+++ b/backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSNet.java
@@ -128,12 +128,11 @@ public class IOSNet implements Net {
 					String method = httpRequest.getMethod();
 
 					if (method.equalsIgnoreCase(HttpMethods.GET)) {
-						String queryString = "";
 						String value = httpRequest.getContent();
 						if (value != null && !"".equals(value)) url += "?" + value;
 					}
 
-					HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(httpRequest.getUrl());
+					HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(url);
 
 					int timeOut = httpRequest.getTimeOut();
 					if (timeOut > 0)
@@ -150,7 +149,7 @@ public class IOSNet implements Net {
 						webHeaderCollection.Add(key, headers.get(key));
 					httpWebRequest.set_Headers(webHeaderCollection);
 
-					if (method.equalsIgnoreCase(HttpMethods.POST)) {
+					if (method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT)) {
 						InputStream contentAsStream = httpRequest.getContentStream();
 						String contentAsString = httpRequest.getContent();
 
diff --git a/backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSObjectALSound.java b/backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSObjectALSound.java
index ba329ab..623278c 100644
--- a/backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSObjectALSound.java
+++ b/backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSObjectALSound.java
@@ -33,7 +33,7 @@ public class IOSObjectALSound implements Sound {
 	private String soundPath;
 
 	public IOSObjectALSound (FileHandle filePath) {
-		soundPath = filePath.path();
+		soundPath = filePath.file().getPath().replace('\\', '/');
 		soundBuffer = OALSimpleAudio.sharedInstance().preloadEffect(soundPath);
 	}
 
diff --git a/backends/gdx-backend-lwjgl/libs/gdx-backend-lwjgl-natives.jar b/backends/gdx-backend-lwjgl/libs/gdx-backend-lwjgl-natives.jar
index f7f2119..4f03e04 100644
Binary files a/backends/gdx-backend-lwjgl/libs/gdx-backend-lwjgl-natives.jar and b/backends/gdx-backend-lwjgl/libs/gdx-backend-lwjgl-natives.jar differ
diff --git a/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTCanvas.java b/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTCanvas.java
index 46fca94..d5d1e76 100644
--- a/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTCanvas.java
+++ b/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglAWTCanvas.java
@@ -149,7 +149,7 @@ public class LwjglAWTCanvas implements Application {
 
 	protected void setTitle (String title) {
 	}
-	
+
 	@Override
 	public ApplicationListener getApplicationListener () {
 		return listener;
@@ -273,14 +273,23 @@ public class LwjglAWTCanvas implements Application {
 		running = false;
 		setGlobals();
 		Array<LifecycleListener> listeners = lifecycleListeners;
-		synchronized(listeners) {
-			for(LifecycleListener listener: listeners) {
+		synchronized (listeners) {
+			for (LifecycleListener listener : listeners) {
 				listener.pause();
 				listener.dispose();
 			}
 		}
 		listener.pause();
 		listener.dispose();
+
+		if (audio != null) {
+			audio.dispose();
+			Gdx.audio = null;
+		}
+
+		if (files != null) Gdx.files = null;
+
+		if (net != null) Gdx.net = null;
 	}
 
 	@Override
@@ -372,16 +381,7 @@ public class LwjglAWTCanvas implements Application {
 		postRunnable(new Runnable() {
 			@Override
 			public void run () {
-				setGlobals();
-				Array<LifecycleListener> listeners = lifecycleListeners;
-				synchronized(listeners) {
-					for(LifecycleListener listener: listeners) {
-						listener.pause();
-						listener.dispose();
-					}
-				}
-				LwjglAWTCanvas.this.listener.pause();
-				LwjglAWTCanvas.this.listener.dispose();
+				stop();
 				System.exit(-1);
 			}
 		});
@@ -399,7 +399,7 @@ public class LwjglAWTCanvas implements Application {
 	}
 
 	/** Test whether the canvas' context is current. */
-	public boolean isCurrent() {
+	public boolean isCurrent () {
 		try {
 			return canvas.isCurrent();
 		} catch (LWJGLException ex) {
@@ -411,18 +411,18 @@ public class LwjglAWTCanvas implements Application {
 	public void setCursor (Cursor cursor) {
 		this.cursor = cursor;
 	}
-	
+
 	@Override
 	public void addLifecycleListener (LifecycleListener listener) {
-		synchronized(lifecycleListeners) {
+		synchronized (lifecycleListeners) {
 			lifecycleListeners.add(listener);
 		}
 	}
 
 	@Override
 	public void removeLifecycleListener (LifecycleListener listener) {
-		synchronized(lifecycleListeners) {
+		synchronized (lifecycleListeners) {
 			lifecycleListeners.removeValue(listener, true);
-		}		
+		}
 	}
 }
diff --git a/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java b/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
index 52ff810..e8bb718 100644
--- a/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
+++ b/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java
@@ -200,7 +200,7 @@ public class LwjglApplication implements Application {
 			if (shouldRender) {
 				graphics.updateTime();
 				listener.render();
-				Display.update();
+				Display.update(false);
 			} else {
 				// Sleeps to avoid wasting CPU in an empty loop.
 				if (frameRate == -1) frameRate = 10;
diff --git a/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL20.java b/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL20.java
index 394ec92..aa420a0 100644
--- a/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL20.java
+++ b/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL20.java
@@ -144,7 +144,12 @@ final class LwjglGL20 implements com.badlogic.gdx.graphics.GL20 {
 
 	public void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border,
 		int imageSize, Buffer data) {
-		throw new GdxRuntimeException("not implemented");
+		if (data instanceof ByteBuffer) {
+	       GL13.glCompressedTexImage2D(target, level, internalformat, width, height, border, (ByteBuffer)data);
+	    } else {
+	        throw new GdxRuntimeException("Can't use " + data.getClass().getName()
+	           + " with this method. Use ByteBuffer instead.");
+	    }
 	}
 
 	public void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format,
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFileHandle.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFileHandle.java
index b5dd15b..80c5e27 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFileHandle.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtFileHandle.java
@@ -310,7 +310,7 @@ public class GwtFileHandle extends FileHandle {
 	 * @throw GdxRuntimeException if this file handle is a {@link FileType#Classpath} or {@link FileType#Internal} and the child
 	 *        doesn't exist. */
 	public FileHandle child (String name) {
-		return new GwtFileHandle(preloader, file + (file.endsWith("/") ? "" : "/") + name, FileType.Internal);
+		return new GwtFileHandle(preloader, file.isEmpty() ? "" : (file + (file.endsWith("/") ? "" : "/")) + name, FileType.Internal);
 	}
 
 	public FileHandle parent () {
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGL20Debug.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGL20Debug.java
index 15662be..4e85a60 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGL20Debug.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtGL20Debug.java
@@ -44,49 +44,49 @@ public class GwtGL20Debug extends GwtGL20 {
 
 	@Override
 	public void glBindTexture (int target, int texture) {
-		 
+		// TODO Auto-generated method stub
 		super.glBindTexture(target, texture);
 		checkError();
 	}
 
 	@Override
 	public void glBlendFunc (int sfactor, int dfactor) {
-		 
+		// TODO Auto-generated method stub
 		super.glBlendFunc(sfactor, dfactor);
 		checkError();
 	}
 
 	@Override
 	public void glClear (int mask) {
-		 
+		// TODO Auto-generated method stub
 		super.glClear(mask);
 		checkError();
 	}
 
 	@Override
 	public void glClearColor (float red, float green, float blue, float alpha) {
-		 
+		// TODO Auto-generated method stub
 		super.glClearColor(red, green, blue, alpha);
 		checkError();
 	}
 
 	@Override
 	public void glClearDepthf (float depth) {
-		 
+		// TODO Auto-generated method stub
 		super.glClearDepthf(depth);
 		checkError();
 	}
 
 	@Override
 	public void glClearStencil (int s) {
-		 
+		// TODO Auto-generated method stub
 		super.glClearStencil(s);
 		checkError();
 	}
 
 	@Override
 	public void glColorMask (boolean red, boolean green, boolean blue, boolean alpha) {
-		 
+		// TODO Auto-generated method stub
 		super.glColorMask(red, green, blue, alpha);
 		checkError();
 	}
@@ -94,7 +94,7 @@ public class GwtGL20Debug extends GwtGL20 {
 	@Override
 	public void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border,
 		int imageSize, Buffer data) {
-		 
+		// TODO Auto-generated method stub
 		super.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
 		checkError();
 	}
@@ -102,194 +102,194 @@ public class GwtGL20Debug extends GwtGL20 {
 	@Override
 	public void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format,
 		int imageSize, Buffer data) {
-		 
+		// TODO Auto-generated method stub
 		super.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
 		checkError();
 	}
 
 	@Override
 	public void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {
-		 
+		// TODO Auto-generated method stub
 		super.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
 		checkError();
 	}
 
 	@Override
 	public void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
-		 
+		// TODO Auto-generated method stub
 		super.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
 		checkError();
 	}
 
 	@Override
 	public void glCullFace (int mode) {
-		 
+		// TODO Auto-generated method stub
 		super.glCullFace(mode);
 		checkError();
 	}
 
 	@Override
 	public void glDeleteTextures (int n, IntBuffer textures) {
-		 
+		// TODO Auto-generated method stub
 		super.glDeleteTextures(n, textures);
 		checkError();
 	}
 
 	@Override
 	public void glDepthFunc (int func) {
-		 
+		// TODO Auto-generated method stub
 		super.glDepthFunc(func);
 		checkError();
 	}
 
 	@Override
 	public void glDepthMask (boolean flag) {
-		 
+		// TODO Auto-generated method stub
 		super.glDepthMask(flag);
 		checkError();
 	}
 
 	@Override
 	public void glDepthRangef (float zNear, float zFar) {
-		 
+		// TODO Auto-generated method stub
 		super.glDepthRangef(zNear, zFar);
 		checkError();
 	}
 
 	@Override
 	public void glDisable (int cap) {
-		 
+		// TODO Auto-generated method stub
 		super.glDisable(cap);
 		checkError();
 	}
 
 	@Override
 	public void glDrawArrays (int mode, int first, int count) {
-		 
+		// TODO Auto-generated method stub
 		super.glDrawArrays(mode, first, count);
 		checkError();
 	}
 
 	@Override
 	public void glDrawElements (int mode, int count, int type, Buffer indices) {
-		 
+		// TODO Auto-generated method stub
 		super.glDrawElements(mode, count, type, indices);
 		checkError();
 	}
 
 	@Override
 	public void glEnable (int cap) {
-		 
+		// TODO Auto-generated method stub
 		super.glEnable(cap);
 		checkError();
 	}
 
 	@Override
 	public void glFinish () {
-		 
+		// TODO Auto-generated method stub
 		super.glFinish();
 		checkError();
 	}
 
 	@Override
 	public void glFlush () {
-		 
+		// TODO Auto-generated method stub
 		super.glFlush();
 		checkError();
 	}
 
 	@Override
 	public void glFrontFace (int mode) {
-		 
+		// TODO Auto-generated method stub
 		super.glFrontFace(mode);
 		checkError();
 	}
 
 	@Override
 	public void glGenTextures (int n, IntBuffer textures) {
-		 
+		// TODO Auto-generated method stub
 		super.glGenTextures(n, textures);
 		checkError();
 	}
 
 	@Override
 	public int glGetError () {
-		 
+		// TODO Auto-generated method stub
 		return super.glGetError();
 	}
 
 	@Override
 	public void glGetIntegerv (int pname, IntBuffer params) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetIntegerv(pname, params);
 		checkError();
 	}
 
 	@Override
 	public String glGetString (int name) {
-		 
+		// TODO Auto-generated method stub
 		return super.glGetString(name);
 	}
 
 	@Override
 	public void glHint (int target, int mode) {
-		 
+		// TODO Auto-generated method stub
 		super.glHint(target, mode);
 		checkError();
 	}
 
 	@Override
 	public void glLineWidth (float width) {
-		 
+		// TODO Auto-generated method stub
 		super.glLineWidth(width);
 		checkError();
 	}
 
 	@Override
 	public void glPixelStorei (int pname, int param) {
-		 
+		// TODO Auto-generated method stub
 		super.glPixelStorei(pname, param);
 		checkError();
 	}
 
 	@Override
 	public void glPolygonOffset (float factor, float units) {
-		 
+		// TODO Auto-generated method stub
 		super.glPolygonOffset(factor, units);
 		checkError();
 	}
 
 	@Override
 	public void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {
-		 
+		// TODO Auto-generated method stub
 		super.glReadPixels(x, y, width, height, format, type, pixels);
 		checkError();
 	}
 
 	@Override
 	public void glScissor (int x, int y, int width, int height) {
-		 
+		// TODO Auto-generated method stub
 		super.glScissor(x, y, width, height);
 		checkError();
 	}
 
 	@Override
 	public void glStencilFunc (int func, int ref, int mask) {
-		 
+		// TODO Auto-generated method stub
 		super.glStencilFunc(func, ref, mask);
 		checkError();
 	}
 
 	@Override
 	public void glStencilMask (int mask) {
-		 
+		// TODO Auto-generated method stub
 		super.glStencilMask(mask);
 		checkError();
 	}
 
 	@Override
 	public void glStencilOp (int fail, int zfail, int zpass) {
-		 
+		// TODO Auto-generated method stub
 		super.glStencilOp(fail, zfail, zpass);
 		checkError();
 	}
@@ -297,14 +297,14 @@ public class GwtGL20Debug extends GwtGL20 {
 	@Override
 	public void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type,
 		Buffer pixels) {
-		 
+		// TODO Auto-generated method stub
 		super.glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
 		checkError();
 	}
 
 	@Override
 	public void glTexParameterf (int target, int pname, float param) {
-		 
+		// TODO Auto-generated method stub
 		super.glTexParameterf(target, pname, param);
 		checkError();
 	}
@@ -312,111 +312,111 @@ public class GwtGL20Debug extends GwtGL20 {
 	@Override
 	public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
 		Buffer pixels) {
-		 
+		// TODO Auto-generated method stub
 		super.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
 		checkError();
 	}
 
 	@Override
 	public void glViewport (int x, int y, int width, int height) {
-		 
+		// TODO Auto-generated method stub
 		super.glViewport(x, y, width, height);
 		checkError();
 	}
 
 	@Override
 	public void glAttachShader (int program, int shader) {
-		 
+		// TODO Auto-generated method stub
 		super.glAttachShader(program, shader);
 		checkError();
 	}
 
 	@Override
 	public void glBindAttribLocation (int program, int index, String name) {
-		 
+		// TODO Auto-generated method stub
 		super.glBindAttribLocation(program, index, name);
 		checkError();
 	}
 
 	@Override
 	public void glBindBuffer (int target, int buffer) {
-		 
+		// TODO Auto-generated method stub
 		super.glBindBuffer(target, buffer);
 		checkError();
 	}
 
 	@Override
 	public void glBindFramebuffer (int target, int framebuffer) {
-		 
+		// TODO Auto-generated method stub
 		super.glBindFramebuffer(target, framebuffer);
 		checkError();
 	}
 
 	@Override
 	public void glBindRenderbuffer (int target, int renderbuffer) {
-		 
+		// TODO Auto-generated method stub
 		super.glBindRenderbuffer(target, renderbuffer);
 		checkError();
 	}
 
 	@Override
 	public void glBlendColor (float red, float green, float blue, float alpha) {
-		 
+		// TODO Auto-generated method stub
 		super.glBlendColor(red, green, blue, alpha);
 		checkError();
 	}
 
 	@Override
 	public void glBlendEquation (int mode) {
-		 
+		// TODO Auto-generated method stub
 		super.glBlendEquation(mode);
 		checkError();
 	}
 
 	@Override
 	public void glBlendEquationSeparate (int modeRGB, int modeAlpha) {
-		 
+		// TODO Auto-generated method stub
 		super.glBlendEquationSeparate(modeRGB, modeAlpha);
 		checkError();
 	}
 
 	@Override
 	public void glBlendFuncSeparate (int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) {
-		 
+		// TODO Auto-generated method stub
 		super.glBlendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
 		checkError();
 	}
 
 	@Override
 	public void glBufferData (int target, int size, Buffer data, int usage) {
-		 
+		// TODO Auto-generated method stub
 		super.glBufferData(target, size, data, usage);
 		checkError();
 	}
 
 	@Override
 	public void glBufferSubData (int target, int offset, int size, Buffer data) {
-		 
+		// TODO Auto-generated method stub
 		super.glBufferSubData(target, offset, size, data);
 		checkError();
 	}
 
 	@Override
 	public int glCheckFramebufferStatus (int target) {
-		 
+		// TODO Auto-generated method stub
 		return super.glCheckFramebufferStatus(target);
 	}
 
 	@Override
 	public void glCompileShader (int shader) {
-		 
+		// TODO Auto-generated method stub
 		super.glCompileShader(shader);
 		checkError();
 	}
 
 	@Override
 	public int glCreateProgram () {
-		 
+		// TODO Auto-generated method stub
 		int program = super.glCreateProgram();
 		checkError();
 		return program;
@@ -424,7 +424,7 @@ public class GwtGL20Debug extends GwtGL20 {
 
 	@Override
 	public int glCreateShader (int type) {
-		 
+		// TODO Auto-generated method stub
 		int shader = super.glCreateShader(type);
 		checkError();
 		return shader;
@@ -432,112 +432,112 @@ public class GwtGL20Debug extends GwtGL20 {
 
 	@Override
 	public void glDeleteBuffers (int n, IntBuffer buffers) {
-		 
+		// TODO Auto-generated method stub
 		super.glDeleteBuffers(n, buffers);
 		checkError();
 	}
 
 	@Override
 	public void glDeleteFramebuffers (int n, IntBuffer framebuffers) {
-		 
+		// TODO Auto-generated method stub
 		super.glDeleteFramebuffers(n, framebuffers);
 		checkError();
 	}
 
 	@Override
 	public void glDeleteProgram (int program) {
-		 
+		// TODO Auto-generated method stub
 		super.glDeleteProgram(program);
 		checkError();
 	}
 
 	@Override
 	public void glDeleteRenderbuffers (int n, IntBuffer renderbuffers) {
-		 
+		// TODO Auto-generated method stub
 		super.glDeleteRenderbuffers(n, renderbuffers);
 		checkError();
 	}
 
 	@Override
 	public void glDeleteShader (int shader) {
-		 
+		// TODO Auto-generated method stub
 		super.glDeleteShader(shader);
 		checkError();
 	}
 
 	@Override
 	public void glDetachShader (int program, int shader) {
-		 
+		// TODO Auto-generated method stub
 		super.glDetachShader(program, shader);
 		checkError();
 	}
 
 	@Override
 	public void glDisableVertexAttribArray (int index) {
-		 
+		// TODO Auto-generated method stub
 		super.glDisableVertexAttribArray(index);
 		checkError();
 	}
 
 	@Override
 	public void glDrawElements (int mode, int count, int type, int indices) {
-		 
+		// TODO Auto-generated method stub
 		super.glDrawElements(mode, count, type, indices);
 		checkError();
 	}
 
 	@Override
 	public void glEnableVertexAttribArray (int index) {
-		 
+		// TODO Auto-generated method stub
 		super.glEnableVertexAttribArray(index);
 		checkError();
 	}
 
 	@Override
 	public void glFramebufferRenderbuffer (int target, int attachment, int renderbuffertarget, int renderbuffer) {
-		 
+		// TODO Auto-generated method stub
 		super.glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
 		checkError();
 	}
 
 	@Override
 	public void glFramebufferTexture2D (int target, int attachment, int textarget, int texture, int level) {
-		 
+		// TODO Auto-generated method stub
 		super.glFramebufferTexture2D(target, attachment, textarget, texture, level);
 		checkError();
 	}
 
 	@Override
 	public void glGenBuffers (int n, IntBuffer buffers) {
-		 
+		// TODO Auto-generated method stub
 		super.glGenBuffers(n, buffers);
 		checkError();
 	}
 
 	@Override
 	public void glGenerateMipmap (int target) {
-		 
+		// TODO Auto-generated method stub
 		super.glGenerateMipmap(target);
 		checkError();
 	}
 
 	@Override
 	public void glGenFramebuffers (int n, IntBuffer framebuffers) {
-		 
+		// TODO Auto-generated method stub
 		super.glGenFramebuffers(n, framebuffers);
 		checkError();
 	}
 
 	@Override
 	public void glGenRenderbuffers (int n, IntBuffer renderbuffers) {
-		 
+		// TODO Auto-generated method stub
 		super.glGenRenderbuffers(n, renderbuffers);
 		checkError();
 	}
 
 	@Override
 	public String glGetActiveAttrib (int program, int index, IntBuffer size, Buffer type) {
-		 
+		// TODO Auto-generated method stub
 		String attrib = super.glGetActiveAttrib(program, index, size, type);
 		checkError();
 		return attrib;
@@ -545,7 +545,7 @@ public class GwtGL20Debug extends GwtGL20 {
 
 	@Override
 	public String glGetActiveUniform (int program, int index, IntBuffer size, Buffer type) {
-		 
+		// TODO Auto-generated method stub
 		String uniform = super.glGetActiveUniform(program, index, size, type);
 		checkError();
 		return uniform;
@@ -553,14 +553,14 @@ public class GwtGL20Debug extends GwtGL20 {
 
 	@Override
 	public void glGetAttachedShaders (int program, int maxcount, Buffer count, IntBuffer shaders) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetAttachedShaders(program, maxcount, count, shaders);
 		checkError();
 	}
 
 	@Override
 	public int glGetAttribLocation (int program, String name) {
-		 
+		// TODO Auto-generated method stub
 		int loc = super.glGetAttribLocation(program, name);
 		checkError();
 		return loc;
@@ -568,42 +568,42 @@ public class GwtGL20Debug extends GwtGL20 {
 
 	@Override
 	public void glGetBooleanv (int pname, Buffer params) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetBooleanv(pname, params);
 		checkError();
 	}
 
 	@Override
 	public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetBufferParameteriv(target, pname, params);
 		checkError();
 	}
 
 	@Override
 	public void glGetFloatv (int pname, FloatBuffer params) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetFloatv(pname, params);
 		checkError();
 	}
 
 	@Override
 	public void glGetFramebufferAttachmentParameteriv (int target, int attachment, int pname, IntBuffer params) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
 		checkError();
 	}
 
 	@Override
 	public void glGetProgramiv (int program, int pname, IntBuffer params) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetProgramiv(program, pname, params);
 		checkError();
 	}
 
 	@Override
 	public String glGetProgramInfoLog (int program) {
-		 
+		// TODO Auto-generated method stub
 		String info = super.glGetProgramInfoLog(program);
 		checkError();
 		return info;
@@ -611,21 +611,21 @@ public class GwtGL20Debug extends GwtGL20 {
 
 	@Override
 	public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetRenderbufferParameteriv(target, pname, params);
 		checkError();
 	}
 
 	@Override
 	public void glGetShaderiv (int shader, int pname, IntBuffer params) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetShaderiv(shader, pname, params);
 		checkError();
 	}
 
 	@Override
 	public String glGetShaderInfoLog (int shader) {
-		 
+		// TODO Auto-generated method stub
 		String info = super.glGetShaderInfoLog(shader);
 		checkError();
 		return info;
@@ -633,49 +633,49 @@ public class GwtGL20Debug extends GwtGL20 {
 
 	@Override
 	public void glGetShaderPrecisionFormat (int shadertype, int precisiontype, IntBuffer range, IntBuffer precision) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
 		checkError();
 	}
 
 	@Override
 	public void glGetShaderSource (int shader, int bufsize, Buffer length, String source) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetShaderSource(shader, bufsize, length, source);
 		checkError();
 	}
 
 	@Override
 	public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetTexParameterfv(target, pname, params);
 		checkError();
 	}
 
 	@Override
 	public void glGetTexParameteriv (int target, int pname, IntBuffer params) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetTexParameteriv(target, pname, params);
 		checkError();
 	}
 
 	@Override
 	public void glGetUniformfv (int program, int location, FloatBuffer params) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetUniformfv(program, location, params);
 		checkError();
 	}
 
 	@Override
 	public void glGetUniformiv (int program, int location, IntBuffer params) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetUniformiv(program, location, params);
 		checkError();
 	}
 
 	@Override
 	public int glGetUniformLocation (int program, String name) {
-		 
+		// TODO Auto-generated method stub
 		int loc = super.glGetUniformLocation(program, name);
 		checkError();
 		return loc;
@@ -683,28 +683,28 @@ public class GwtGL20Debug extends GwtGL20 {
 
 	@Override
 	public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetVertexAttribfv(index, pname, params);
 		checkError();
 	}
 
 	@Override
 	public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetVertexAttribiv(index, pname, params);
 		checkError();
 	}
 
 	@Override
 	public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
-		 
+		// TODO Auto-generated method stub
 		super.glGetVertexAttribPointerv(index, pname, pointer);
 		checkError();
 	}
 
 	@Override
 	public boolean glIsBuffer (int buffer) {
-		 
+		// TODO Auto-generated method stub
 		boolean res = super.glIsBuffer(buffer);
 		checkError();
 		return res;
@@ -712,7 +712,7 @@ public class GwtGL20Debug extends GwtGL20 {
 
 	@Override
 	public boolean glIsEnabled (int cap) {
-		 
+		// TODO Auto-generated method stub
 		boolean res = super.glIsEnabled(cap);
 		checkError();
 		return res;
@@ -720,7 +720,7 @@ public class GwtGL20Debug extends GwtGL20 {
 
 	@Override
 	public boolean glIsFramebuffer (int framebuffer) {
-		 
+		// TODO Auto-generated method stub
 		boolean res = super.glIsFramebuffer(framebuffer);
 		checkError();
 		return res;
@@ -728,7 +728,7 @@ public class GwtGL20Debug extends GwtGL20 {
 
 	@Override
 	public boolean glIsProgram (int program) {
-		 
+		// TODO Auto-generated method stub
 		boolean res = super.glIsProgram(program);
 		checkError();
 		return res;
@@ -736,7 +736,7 @@ public class GwtGL20Debug extends GwtGL20 {
 
 	@Override
 	public boolean glIsRenderbuffer (int renderbuffer) {
-		 
+		// TODO Auto-generated method stub
 		boolean res = super.glIsRenderbuffer(renderbuffer);
 		checkError();
 		return res;
@@ -744,7 +744,7 @@ public class GwtGL20Debug extends GwtGL20 {
 
 	@Override
 	public boolean glIsShader (int shader) {
-		 
+		// TODO Auto-generated method stub
 		boolean res = super.glIsShader(shader);
 		checkError();
 		return res;
@@ -752,7 +752,7 @@ public class GwtGL20Debug extends GwtGL20 {
 
 	@Override
 	public boolean glIsTexture (int texture) {
-		 
+		// TODO Auto-generated method stub
 		boolean res = super.glIsTexture(texture);
 		checkError();
 		return res;
@@ -760,301 +760,301 @@ public class GwtGL20Debug extends GwtGL20 {
 
 	@Override
 	public void glLinkProgram (int program) {
-		 
+		// TODO Auto-generated method stub
 		super.glLinkProgram(program);
 		checkError();
 	}
 
 	@Override
 	public void glReleaseShaderCompiler () {
-		 
+		// TODO Auto-generated method stub
 		super.glReleaseShaderCompiler();
 		checkError();
 	}
 
 	@Override
 	public void glRenderbufferStorage (int target, int internalformat, int width, int height) {
-		 
+		// TODO Auto-generated method stub
 		super.glRenderbufferStorage(target, internalformat, width, height);
 		checkError();
 	}
 
 	@Override
 	public void glSampleCoverage (float value, boolean invert) {
-		 
+		// TODO Auto-generated method stub
 		super.glSampleCoverage(value, invert);
 		checkError();
 	}
 
 	@Override
 	public void glShaderBinary (int n, IntBuffer shaders, int binaryformat, Buffer binary, int length) {
-		 
+		// TODO Auto-generated method stub
 		super.glShaderBinary(n, shaders, binaryformat, binary, length);
 		checkError();
 	}
 
 	@Override
 	public void glShaderSource (int shader, String source) {
-		 
+		// TODO Auto-generated method stub
 		super.glShaderSource(shader, source);
 		checkError();
 	}
 
 	@Override
 	public void glStencilFuncSeparate (int face, int func, int ref, int mask) {
-		 
+		// TODO Auto-generated method stub
 		super.glStencilFuncSeparate(face, func, ref, mask);
 		checkError();
 	}
 
 	@Override
 	public void glStencilMaskSeparate (int face, int mask) {
-		 
+		// TODO Auto-generated method stub
 		super.glStencilMaskSeparate(face, mask);
 		checkError();
 	}
 
 	@Override
 	public void glStencilOpSeparate (int face, int fail, int zfail, int zpass) {
-		 
+		// TODO Auto-generated method stub
 		super.glStencilOpSeparate(face, fail, zfail, zpass);
 		checkError();
 	}
 
 	@Override
 	public void glTexParameterfv (int target, int pname, FloatBuffer params) {
-		 
+		// TODO Auto-generated method stub
 		super.glTexParameterfv(target, pname, params);
 		checkError();
 	}
 
 	@Override
 	public void glTexParameteri (int target, int pname, int param) {
-		 
+		// TODO Auto-generated method stub
 		super.glTexParameteri(target, pname, param);
 		checkError();
 	}
 
 	@Override
 	public void glTexParameteriv (int target, int pname, IntBuffer params) {
-		 
+		// TODO Auto-generated method stub
 		super.glTexParameteriv(target, pname, params);
 		checkError();
 	}
 
 	@Override
 	public void glUniform1f (int location, float x) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniform1f(location, x);
 		checkError();
 	}
 
 	@Override
 	public void glUniform1fv (int location, int count, FloatBuffer v) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniform1fv(location, count, v);
 		checkError();
 	}
 
 	@Override
 	public void glUniform1i (int location, int x) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniform1i(location, x);
 		checkError();
 	}
 
 	@Override
 	public void glUniform1iv (int location, int count, IntBuffer v) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniform1iv(location, count, v);
 		checkError();
 	}
 
 	@Override
 	public void glUniform2f (int location, float x, float y) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniform2f(location, x, y);
 		checkError();
 	}
 
 	@Override
 	public void glUniform2fv (int location, int count, FloatBuffer v) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniform2fv(location, count, v);
 		checkError();
 	}
 
 	@Override
 	public void glUniform2i (int location, int x, int y) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniform2i(location, x, y);
 		checkError();
 	}
 
 	@Override
 	public void glUniform2iv (int location, int count, IntBuffer v) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniform2iv(location, count, v);
 		checkError();
 	}
 
 	@Override
 	public void glUniform3f (int location, float x, float y, float z) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniform3f(location, x, y, z);
 		checkError();
 	}
 
 	@Override
 	public void glUniform3fv (int location, int count, FloatBuffer v) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniform3fv(location, count, v);
 		checkError();
 	}
 
 	@Override
 	public void glUniform3i (int location, int x, int y, int z) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniform3i(location, x, y, z);
 		checkError();
 	}
 
 	@Override
 	public void glUniform3iv (int location, int count, IntBuffer v) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniform3iv(location, count, v);
 		checkError();
 	}
 
 	@Override
 	public void glUniform4f (int location, float x, float y, float z, float w) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniform4f(location, x, y, z, w);
 		checkError();
 	}
 
 	@Override
 	public void glUniform4fv (int location, int count, FloatBuffer v) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniform4fv(location, count, v);
 		checkError();
 	}
 
 	@Override
 	public void glUniform4i (int location, int x, int y, int z, int w) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniform4i(location, x, y, z, w);
 		checkError();
 	}
 
 	@Override
 	public void glUniform4iv (int location, int count, IntBuffer v) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniform4iv(location, count, v);
 		checkError();
 	}
 
 	@Override
 	public void glUniformMatrix2fv (int location, int count, boolean transpose, FloatBuffer value) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniformMatrix2fv(location, count, transpose, value);
 		checkError();
 	}
 
 	@Override
 	public void glUniformMatrix3fv (int location, int count, boolean transpose, FloatBuffer value) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniformMatrix3fv(location, count, transpose, value);
 		checkError();
 	}
 
 	@Override
 	public void glUniformMatrix4fv (int location, int count, boolean transpose, FloatBuffer value) {
-		 
+		// TODO Auto-generated method stub
 		super.glUniformMatrix4fv(location, count, transpose, value);
 		checkError();
 	}
 
 	@Override
 	public void glUseProgram (int program) {
-		 
+		// TODO Auto-generated method stub
 		super.glUseProgram(program);
 		checkError();
 	}
 
 	@Override
 	public void glValidateProgram (int program) {
-		 
+		// TODO Auto-generated method stub
 		super.glValidateProgram(program);
 		checkError();
 	}
 
 	@Override
 	public void glVertexAttrib1f (int indx, float x) {
-		 
+		// TODO Auto-generated method stub
 		super.glVertexAttrib1f(indx, x);
 		checkError();
 	}
 
 	@Override
 	public void glVertexAttrib1fv (int indx, FloatBuffer values) {
-		 
+		// TODO Auto-generated method stub
 		super.glVertexAttrib1fv(indx, values);
 		checkError();
 	}
 
 	@Override
 	public void glVertexAttrib2f (int indx, float x, float y) {
-		 
+		// TODO Auto-generated method stub
 		super.glVertexAttrib2f(indx, x, y);
 		checkError();
 	}
 
 	@Override
 	public void glVertexAttrib2fv (int indx, FloatBuffer values) {
-		 
+		// TODO Auto-generated method stub
 		super.glVertexAttrib2fv(indx, values);
 		checkError();
 	}
 
 	@Override
 	public void glVertexAttrib3f (int indx, float x, float y, float z) {
-		 
+		// TODO Auto-generated method stub
 		super.glVertexAttrib3f(indx, x, y, z);
 		checkError();
 	}
 
 	@Override
 	public void glVertexAttrib3fv (int indx, FloatBuffer values) {
-		 
+		// TODO Auto-generated method stub
 		super.glVertexAttrib3fv(indx, values);
 		checkError();
 	}
 
 	@Override
 	public void glVertexAttrib4f (int indx, float x, float y, float z, float w) {
-		 
+		// TODO Auto-generated method stub
 		super.glVertexAttrib4f(indx, x, y, z, w);
 		checkError();
 	}
 
 	@Override
 	public void glVertexAttrib4fv (int indx, FloatBuffer values) {
-		 
+		// TODO Auto-generated method stub
 		super.glVertexAttrib4fv(indx, values);
 		checkError();
 	}
 
 	@Override
 	public void glVertexAttribPointer (int indx, int size, int type, boolean normalized, int stride, Buffer ptr) {
-		 
+		// TODO Auto-generated method stub
 		super.glVertexAttribPointer(indx, size, type, normalized, stride, ptr);
 		checkError();
 	}
 
 	@Override
 	public void glVertexAttribPointer (int indx, int size, int type, boolean normalized, int stride, int ptr) {
-		 
+		// TODO Auto-generated method stub
 		super.glVertexAttribPointer(indx, size, type, normalized, stride, ptr);
 		checkError();
 	}
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/Pixmap.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/Pixmap.java
index 29b6363..825e77c 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/Pixmap.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/Pixmap.java
@@ -173,10 +173,10 @@ public class Pixmap implements Disposable {
 	/** Sets the color for the following drawing operations
 	 * @param color the color, encoded as RGBA8888 */
 	public void setColor (int color) {
-		a = ((color >>> 24) & 0xff) / 255f;
-		r = (color >>> 16) & 0xff;
-		g = (color >>> 8) & 0xff;
-		b = (color & 0xff);
+		r = (color >>> 24) & 0xff;
+		g = (color >>> 16) & 0xff;
+		b = (color >>> 8) & 0xff;
+		a = (color & 0xff) / 255f;
 		this.color = make(r, g, b, a);
 		context.setFillStyle(this.color);
 		context.setStrokeStyle(this.color);
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/g3d/loaders/md5/MD5Tokenizer.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/g3d/loaders/md5/MD5Tokenizer.java
deleted file mode 100644
index be31e6d..0000000
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/graphics/g3d/loaders/md5/MD5Tokenizer.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.loaders.md5;
-
-import java.util.List;
-
-import com.google.gwt.core.client.JsArrayString;
-
-public class MD5Tokenizer {
-
-	public static void tokenize (String line, List<String> tokens) {
-		tokens.clear();
-		JsArrayString nativeTokens = nativeTokenize(line);
-		for (int i = 0, j = nativeTokens.length(); i < j; i++) {
-			String string = nativeTokens.get(i);
-			tokens.add(string);
-		}
-	}
-	
-	public static native JsArrayString nativeTokenize(String line) /*-{
-		var tokens = [];
-		var m = new RegExp(/\"([^\"]*)\"|(\S+)/g);
-		while ((match = m.exec(line)) != null) {
-			if (match[1] != null) {            
-				tokens.push(match[1]);
-			} else {
-				tokens.push(match[2]);
-			}
-		}
-		return tokens;
-	}-*/;		
-}
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/maps/tiled/TmxMapLoader.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
index b02a1d4..26a15d3 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
@@ -13,6 +13,7 @@ import com.badlogic.gdx.assets.loaders.TextureLoader.TextureParameter;
 import com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver;
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
 import com.badlogic.gdx.maps.ImageResolver;
 import com.badlogic.gdx.maps.ImageResolver.AssetManagerImageResolver;
@@ -35,87 +36,83 @@ import com.badlogic.gdx.utils.ObjectMap;
 import com.badlogic.gdx.utils.XmlReader;
 import com.badlogic.gdx.utils.XmlReader.Element;
 
-/**
- * @brief synchronous loader for TMX maps created with the Tiled tool
- */
+/** @brief synchronous loader for TMX maps created with the Tiled tool */
 public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader.Parameters> {
 
 	public static class Parameters extends AssetLoaderParameters<TiledMap> {
 		/** Whether to load the map for a y-up coordinate system */
-		boolean yUp = true;
+		public boolean yUp = true;
 		/** generate mipmaps? **/
-		public boolean generateMipMaps = false;		
+		public boolean generateMipMaps = false;
+		/** The TextureFilter to use for minification **/
+		public TextureFilter textureMinFilter = TextureFilter.Nearest;
+		/** The TextureFilter to use for magnification **/
+		public TextureFilter textureMagFilter = TextureFilter.Nearest;
 	}
-	
+
 	protected static final int FLAG_FLIP_HORIZONTALLY = 0x80000000;
 	protected static final int FLAG_FLIP_VERTICALLY = 0x40000000;
 	protected static final int FLAG_FLIP_DIAGONALLY = 0x20000000;
-	protected static final int MASK_CLEAR  = 0xE0000000;
-	
+	protected static final int MASK_CLEAR = 0xE0000000;
+
 	protected XmlReader xml = new XmlReader();
 	protected Element root;
 	protected boolean yUp;
 
 	protected int mapWidthInPixels;
 	protected int mapHeightInPixels;
-	
+
 	protected TiledMap map;
-	
-	public TmxMapLoader() {
+
+	public TmxMapLoader () {
 		super(new InternalFileHandleResolver());
 	}
-	
-	/**
-	 * Creates loader 
-	 *  
-	 * @param resolver
-	 */
-	public TmxMapLoader(FileHandleResolver resolver) {
+
+	/** Creates loader
+	 * 
+	 * @param resolver */
+	public TmxMapLoader (FileHandleResolver resolver) {
 		super(resolver);
 	}
 
-	/**
-	 * Loads the {@link TiledMap} from the given file. The file is
-	 * resolved via the {@link FileHandleResolver} set in the constructor
-	 * of this class. By default it will resolve to an internal file. The
-	 * map will be loaded for a y-up coordinate system.
+	/** Loads the {@link TiledMap} from the given file. The file is resolved via the {@link FileHandleResolver} set in the
+	 * constructor of this class. By default it will resolve to an internal file. The map will be loaded for a y-up coordinate
+	 * system.
 	 * @param fileName the filename
-	 * @return the TiledMap
-	 */
-	public TiledMap load(String fileName) {
+	 * @return the TiledMap */
+	public TiledMap load (String fileName) {
 		return load(fileName, new TmxMapLoader.Parameters());
 	}
 
-	/**
-	 * Loads the {@link TiledMap} from the given file. The file is
-	 * resolved via the {@link FileHandleResolver} set in the constructor
-	 * of this class. By default it will resolve to an internal file.
+	/** Loads the {@link TiledMap} from the given file. The file is resolved via the {@link FileHandleResolver} set in the
+	 * constructor of this class. By default it will resolve to an internal file.
 	 * @param fileName the filename
 	 * @param parameters specifies whether to use y-up, generate mip maps etc.
-	 * @return the TiledMap
-	 */
-	public TiledMap load(String fileName, TmxMapLoader.Parameters parameters) {
+	 * @return the TiledMap */
+	public TiledMap load (String fileName, TmxMapLoader.Parameters parameters) {
 		try {
 			this.yUp = parameters.yUp;
 			FileHandle tmxFile = resolve(fileName);
 			root = xml.parse(tmxFile);
 			ObjectMap<String, Texture> textures = new ObjectMap<String, Texture>();
-			for(FileHandle textureFile: loadTilesets(root, tmxFile)) {
-				textures.put(textureFile.path(), new Texture(textureFile, parameters.generateMipMaps));
+			for (FileHandle textureFile : loadTilesets(root, tmxFile)) {
+				Texture texture = new Texture(textureFile, parameters.generateMipMaps);
+				texture.setFilter(parameters.textureMinFilter, parameters.textureMagFilter);
+				textures.put(textureFile.path(), texture);
 			}
 			DirectImageResolver imageResolver = new DirectImageResolver(textures);
 			TiledMap map = loadTilemap(root, tmxFile, imageResolver);
 			map.setOwnedTextures(textures.values().toArray());
 			return map;
-		} catch(IOException e) {
+		} catch (IOException e) {
 			throw new GdxRuntimeException("Couldn't load tilemap '" + fileName + "'", e);
 		}
 	}
 
 	@Override
-	public void loadAsync (AssetManager manager, String fileName, Parameters parameter) {
+	public void loadAsync (AssetManager manager, String fileName, TmxMapLoader.Parameters parameter) {
 		map = null;
-		
+
 		FileHandle tmxFile = resolve(fileName);
 		if (parameter != null) {
 			yUp = parameter.yUp;
@@ -129,29 +126,30 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 		}
 	}
 
-
 	@Override
-	public TiledMap loadSync (AssetManager manager, String fileName, Parameters parameter) {
+	public TiledMap loadSync (AssetManager manager, String fileName, TmxMapLoader.Parameters parameter) {
 		return map;
 	}
-	
-	/**
-	 * Retrieves TiledMap resource dependencies
+
+	/** Retrieves TiledMap resource dependencies
 	 * 
 	 * @param fileName
 	 * @param parameter not used for now
-	 * @return dependencies for the given .tmx file
-	 */
+	 * @return dependencies for the given .tmx file */
 	@Override
-	public Array<AssetDescriptor> getDependencies(String fileName, Parameters parameter) {
+	public Array<AssetDescriptor> getDependencies (String fileName, Parameters parameter) {
 		Array<AssetDescriptor> dependencies = new Array<AssetDescriptor>();
 		try {
 			FileHandle tmxFile = resolve(fileName);
 			root = xml.parse(tmxFile);
-			boolean generateMipMaps = (parameter!=null?parameter.generateMipMaps: false);
+			boolean generateMipMaps = (parameter != null ? parameter.generateMipMaps : false);
 			TextureLoader.TextureParameter texParams = new TextureParameter();
 			texParams.genMipMaps = generateMipMaps;
-			for(FileHandle image: loadTilesets(root, tmxFile)) {
+			if (parameter != null) {
+				texParams.minFilter = parameter.textureMinFilter;
+				texParams.magFilter = parameter.textureMagFilter;
+			}
+			for (FileHandle image : loadTilesets(root, tmxFile)) {
 				dependencies.add(new AssetDescriptor(image.path(), Texture.class, texParams));
 			}
 			return dependencies;
@@ -159,28 +157,25 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			throw new GdxRuntimeException("Couldn't load tilemap '" + fileName + "'", e);
 		}
 	}
-	
-	/**
-	 * Loads the map data, given the XML root element and an {@link ImageResolver} used
-	 * to return the tileset Textures
-	 * @param root the XML root element 
+
+	/** Loads the map data, given the XML root element and an {@link ImageResolver} used to return the tileset Textures
+	 * @param root the XML root element
 	 * @param tmxFile the Filehandle of the tmx file
 	 * @param imageResolver the {@link ImageResolver}
-	 * @return the {@link TiledMap}
-	 */
-	protected TiledMap loadTilemap(Element root, FileHandle tmxFile, ImageResolver imageResolver) {
+	 * @return the {@link TiledMap} */
+	protected TiledMap loadTilemap (Element root, FileHandle tmxFile, ImageResolver imageResolver) {
 		TiledMap map = new TiledMap();
-		
+
 		String mapOrientation = root.getAttribute("orientation", null);
 		int mapWidth = root.getIntAttribute("width", 0);
 		int mapHeight = root.getIntAttribute("height", 0);
 		int tileWidth = root.getIntAttribute("tilewidth", 0);
 		int tileHeight = root.getIntAttribute("tileheight", 0);
 		String mapBackgroundColor = root.getAttribute("backgroundcolor", null);
-		
+
 		MapProperties mapProperties = map.getProperties();
 		if (mapOrientation != null) {
-			mapProperties.put("orientation", mapBackgroundColor);
+			mapProperties.put("orientation", mapOrientation);
 		}
 		mapProperties.put("width", mapWidth);
 		mapProperties.put("height", mapHeight);
@@ -191,7 +186,7 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 		}
 		mapWidthInPixels = mapWidth * tileWidth;
 		mapHeightInPixels = mapHeight * tileHeight;
-		
+
 		Element properties = root.getChildByName("properties");
 		if (properties != null) {
 			loadProperties(map.getProperties(), properties);
@@ -212,14 +207,12 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 		}
 		return map;
 	}
-	
-	/**
-	 * Loads the tilesets
+
+	/** Loads the tilesets
 	 * @param root the root XML element
 	 * @return a list of filenames for images containing tiles
-	 * @throws IOException 
-	 */
-	protected Array<FileHandle> loadTilesets(Element root, FileHandle tmxFile) throws IOException {
+	 * @throws IOException */
+	protected Array<FileHandle> loadTilesets (Element root, FileHandle tmxFile) throws IOException {
 		Array<FileHandle> images = new Array<FileHandle>();
 		for (Element tileset : root.getChildrenByName("tileset")) {
 			String source = tileset.getAttribute("source", null);
@@ -238,14 +231,13 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 		return images;
 	}
 
-	/**
-	 * Loads the specified tileset data, adding it to the collection of the specified map, given the XML element, the tmxFile 
-	 * and an {@link ImageResolver} used to retrieve the tileset Textures.
-	 *
+	/** Loads the specified tileset data, adding it to the collection of the specified map, given the XML element, the tmxFile and
+	 * an {@link ImageResolver} used to retrieve the tileset Textures.
+	 * 
 	 * <p>
 	 * Default tileset's property keys that are loaded by default are:
 	 * </p>
-	 *
+	 * 
 	 * <ul>
 	 * <li><em>firstgid</em>, (int, defaults to 1) the first valid global id used for tile numbering</li>
 	 * <li><em>imagesource</em>, (String, defaults to empty string) the tileset source image filename</li>
@@ -256,23 +248,22 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 	 * <li><em>margin</em>, (int, defaults to 0) the tileset margin</li>
 	 * <li><em>spacing</em>, (int, defaults to 0) the tileset spacing</li>
 	 * </ul>
-	 *
+	 * 
 	 * <p>
 	 * The values are extracted from the specified Tmx file, if a value can't be found then the default is used.
 	 * </p>
 	 * @param map the Map whose tilesets collection will be populated
 	 * @param element the XML element identifying the tileset to load
 	 * @param tmxFile the Filehandle of the tmx file
-	 * @param imageResolver the {@link ImageResolver}
-	 */
-	protected void loadTileSet(TiledMap map, Element element, FileHandle tmxFile, ImageResolver imageResolver) {
+	 * @param imageResolver the {@link ImageResolver} */
+	protected void loadTileSet (TiledMap map, Element element, FileHandle tmxFile, ImageResolver imageResolver) {
 		if (element.getName().equals("tileset")) {
 			String name = element.get("name", null);
 			int firstgid = element.getIntAttribute("firstgid", 1);
 			int tilewidth = element.getIntAttribute("tilewidth", 0);
 			int tileheight = element.getIntAttribute("tileheight", 0);
 			int spacing = element.getIntAttribute("spacing", 0);
-			int margin = element.getIntAttribute("margin", 0);			
+			int margin = element.getIntAttribute("margin", 0);
 			String source = element.getAttribute("source", null);
 
 			String imageSource = "";
@@ -320,7 +311,7 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			int stopHeight = texture.getRegionHeight() - tileheight;
 
 			int id = firstgid;
-			
+
 			for (int y = margin; y <= stopHeight; y += tileheight + spacing) {
 				for (int x = margin; x <= stopWidth; x += tilewidth + spacing) {
 					TextureRegion tileRegion = new TextureRegion(texture, x, y, tilewidth, tileheight);
@@ -332,33 +323,32 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 					tileset.putTile(id++, tile);
 				}
 			}
-			
+
 			Array<Element> tileElements = element.getChildrenByName("tile");
-			
+
 			for (Element tileElement : tileElements) {
 				int localtid = tileElement.getIntAttribute("id", 0);
 				TiledMapTile tile = tileset.getTile(firstgid + localtid);
-				if (tile!= null) {
+				if (tile != null) {
 					Element properties = tileElement.getChildByName("properties");
 					if (properties != null) {
 						loadProperties(tile.getProperties(), properties);
 					}
 				}
 			}
-			
+
 			Element properties = element.getChildByName("properties");
 			if (properties != null) {
 				loadProperties(tileset.getProperties(), properties);
 			}
 			map.getTileSets().addTileSet(tileset);
-		}		
+		}
 	}
-		
+
 	/** Load one layer (a 'layer' tag).
 	 * @param map
-	 * @param element
-	 */
-	protected void loadTileLayer(TiledMap map, Element element) {
+	 * @param element */
+	protected void loadTileLayer (TiledMap map, Element element) {
 		if (element.getName().equals("layer")) {
 			String name = element.getAttribute("name", null);
 			int width = element.getIntAttribute("width", 0);
@@ -371,92 +361,57 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			layer.setVisible(visible);
 			layer.setOpacity(opacity);
 			layer.setName(name);
-			
+
 			TiledMapTileSets tilesets = map.getTileSets();
-			
+
 			Element data = element.getChildByName("data");
 			String encoding = data.getAttribute("encoding", null);
 			String compression = data.getAttribute("compression", null);
-			if (encoding == null) {	  // no 'encoding' attribute means that the encoding is XML
+			if (encoding == null) { // no 'encoding' attribute means that the encoding is XML
 				throw new GdxRuntimeException("Unsupported encoding (XML) for TMX Layer Data");
 			}
 			if (encoding.equals("csv")) {
 				String[] array = data.getText().split(",");
 				for (int y = 0; y < height; y++) {
 					for (int x = 0; x < width; x++) {
-						int id = (int) Long.parseLong(array[y * width + x].trim());
-						
+						int id = (int)Long.parseLong(array[y * width + x].trim());
+
 						final boolean flipHorizontally = ((id & FLAG_FLIP_HORIZONTALLY) != 0);
 						final boolean flipVertically = ((id & FLAG_FLIP_VERTICALLY) != 0);
 						final boolean flipDiagonally = ((id & FLAG_FLIP_DIAGONALLY) != 0);
 
 						id = id & ~MASK_CLEAR;
-						
+
 						tilesets.getTile(id);
 						TiledMapTile tile = tilesets.getTile(id);
 						if (tile != null) {
-							Cell cell = new Cell();
-							if (flipDiagonally) {
-								if (flipHorizontally && flipVertically) {
-									cell.setFlipHorizontally(true);
-									cell.setRotation(Cell.ROTATE_270);
-								} else if (flipHorizontally) {
-									cell.setRotation(Cell.ROTATE_270);
-								} else if (flipVertically) {
-									cell.setRotation(Cell.ROTATE_90);
-								} else {
-									cell.setFlipVertically(true);
-									cell.setRotation(Cell.ROTATE_270);
-								}
-							} else {
-								cell.setFlipHorizontally(flipHorizontally);
-								cell.setFlipVertically(flipVertically);
-							}
+							Cell cell = createTileLayerCell(flipHorizontally, flipVertically, flipDiagonally);
 							cell.setTile(tile);
 							layer.setCell(x, yUp ? height - 1 - y : y, cell);
 						}
 					}
 				}
 			} else {
-				if(encoding.equals("base64")) {
+				if (encoding.equals("base64")) {
 					byte[] bytes = Base64Coder.decode(data.getText());
 					if (compression == null) {
 						int read = 0;
 						for (int y = 0; y < height; y++) {
 							for (int x = 0; x < width; x++) {
-								
-								int id =
-								unsignedByteToInt(bytes[read++]) |
-								unsignedByteToInt(bytes[read++]) << 8 |
-								unsignedByteToInt(bytes[read++]) << 16 |
-								unsignedByteToInt(bytes[read++]) << 24;
-								
+
+								int id = unsignedByteToInt(bytes[read++]) | unsignedByteToInt(bytes[read++]) << 8
+									| unsignedByteToInt(bytes[read++]) << 16 | unsignedByteToInt(bytes[read++]) << 24;
+
 								final boolean flipHorizontally = ((id & FLAG_FLIP_HORIZONTALLY) != 0);
 								final boolean flipVertically = ((id & FLAG_FLIP_VERTICALLY) != 0);
 								final boolean flipDiagonally = ((id & FLAG_FLIP_DIAGONALLY) != 0);
 
 								id = id & ~MASK_CLEAR;
-								
+
 								tilesets.getTile(id);
 								TiledMapTile tile = tilesets.getTile(id);
 								if (tile != null) {
-									Cell cell = new Cell();
-									if (flipDiagonally) {
-										if (flipHorizontally && flipVertically) {
-											cell.setFlipHorizontally(true);
-											cell.setRotation(Cell.ROTATE_270);
-										} else if (flipHorizontally) {
-											cell.setRotation(Cell.ROTATE_270);
-										} else if (flipVertically) {
-											cell.setRotation(Cell.ROTATE_90);
-										} else {
-											cell.setFlipVertically(true);
-											cell.setRotation(Cell.ROTATE_270);
-										}
-									} else {
-										cell.setFlipHorizontally(flipHorizontally);
-										cell.setFlipVertically(flipVertically);
-									}
+									Cell cell = createTileLayerCell(flipHorizontally, flipVertically, flipDiagonally);
 									cell.setTile(tile);
 									layer.setCell(x, yUp ? height - 1 - y : y, cell);
 								}
@@ -467,8 +422,8 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 					} else if (compression.equals("zlib")) {
 						throw new GdxRuntimeException("ZLIB compression not supported in GWT backend");
 					}
-				}
-				else {         // any other value of 'encoding' is one we're not aware of, probably a feature of a future version of Tiled or another editor
+				} else {
+					// any other value of 'encoding' is one we're not aware of, probably a feature of a future version of Tiled
 					throw new GdxRuntimeException("Unrecognised encoding (" + encoding + ") for TMX Layer Data");
 				}
 			}
@@ -477,10 +432,10 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 				loadProperties(layer.getProperties(), properties);
 			}
 			map.getLayers().add(layer);
-		}		
+		}
 	}
-	
-	protected void loadObjectGroup(TiledMap map, Element element) {
+
+	protected void loadObjectGroup (TiledMap map, Element element) {
 		if (element.getName().equals("objectgroup")) {
 			String name = element.getAttribute("name", null);
 			MapLayer layer = new MapLayer();
@@ -489,7 +444,7 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			if (properties != null) {
 				loadProperties(layer.getProperties(), properties);
 			}
-			
+
 			for (Element objectElement : element.getChildrenByName("object")) {
 				loadObject(layer, objectElement);
 			}
@@ -497,17 +452,17 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			map.getLayers().add(layer);
 		}
 	}
-	
-	protected void loadObject(MapLayer layer, Element element) {
+
+	protected void loadObject (MapLayer layer, Element element) {
 		if (element.getName().equals("object")) {
 			MapObject object = null;
-			
+
 			int x = element.getIntAttribute("x", 0);
 			int y = (yUp ? mapHeightInPixels - element.getIntAttribute("y", 0) : element.getIntAttribute("y", 0));
 
 			int width = element.getIntAttribute("width", 0);
 			int height = element.getIntAttribute("height", 0);
-			
+
 			if (element.getChildCount() > 0) {
 				Element child = null;
 				if ((child = element.getChildByName("polygon")) != null) {
@@ -560,8 +515,8 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			layer.getObjects().add(object);
 		}
 	}
-	
-	protected void loadProperties(MapProperties properties, Element element) {
+
+	protected void loadProperties (MapProperties properties, Element element) {
 		if (element.getName().equals("properties")) {
 			for (Element property : element.getChildrenByName("property")) {
 				String name = property.getAttribute("name", null);
@@ -573,8 +528,29 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			}
 		}
 	}
-	
-	protected static FileHandle getRelativeFileHandle(FileHandle file, String path) {
+
+	protected Cell createTileLayerCell (boolean flipHorizontally, boolean flipVertically, boolean flipDiagonally) {
+		Cell cell = new Cell();
+		if (flipDiagonally) {
+			if (flipHorizontally && flipVertically) {
+				cell.setFlipHorizontally(true);
+				cell.setRotation(yUp ? Cell.ROTATE_270 : Cell.ROTATE_90);
+			} else if (flipHorizontally) {
+				cell.setRotation(yUp ? Cell.ROTATE_270 : Cell.ROTATE_90);
+			} else if (flipVertically) {
+				cell.setRotation(yUp ? Cell.ROTATE_90 : Cell.ROTATE_270);
+			} else {
+				cell.setFlipVertically(true);
+				cell.setRotation(yUp ? Cell.ROTATE_270 : Cell.ROTATE_90);
+			}
+		} else {
+			cell.setFlipHorizontally(flipHorizontally);
+			cell.setFlipVertically(flipVertically);
+		}
+		return cell;
+	}
+
+	protected static FileHandle getRelativeFileHandle (FileHandle file, String path) {
 		StringTokenizer tokenizer = new StringTokenizer(path, "\\/");
 		FileHandle result = file.parent();
 		while (tokenizer.hasMoreElements()) {
@@ -585,11 +561,11 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 				result = result.child(token);
 			}
 		}
-		return result;		
+		return result;
 	}
-	
+
 	protected static int unsignedByteToInt (byte b) {
-		return (int) b & 0xFF;
+		return (int)b & 0xFF;
 	}
 
-}
+}
\ No newline at end of file
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/math/Matrix4.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/math/Matrix4.java
index ebebd71..1851d8e 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/math/Matrix4.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/math/Matrix4.java
@@ -692,7 +692,7 @@ public class Matrix4 implements Serializable {
 	public Matrix4 setToLookAt (Vector3 position, Vector3 target, Vector3 up) {
 		tmpVec.set(target).sub(position);
 		setToLookAt(tmpVec, up);
-		this.mul(tmpMat.setToTranslation(position.tmp().mul(-1)));
+		this.mul(tmpMat.setToTranslation(position.tmp().scl(-1)));
 
 		return this;
 	}
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/scenes/scene2d/ui/Skin.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
index 4bb09a3..c0583c1 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
@@ -36,6 +36,7 @@ import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.Json;
+import com.badlogic.gdx.utils.JsonValue;
 import com.badlogic.gdx.utils.Json.ReadOnlySerializer;
 import com.badlogic.gdx.utils.ObjectMap;
 import com.badlogic.gdx.utils.ObjectMap.Entry;
@@ -361,11 +362,11 @@ public class Skin implements Disposable {
 
 		final Json json = new Json() {
 			@Override
-			public <T> T readValue (Class<T> type, Class elementType, Object jsonData) {
+			public <T> T readValue (Class<T> type, Class elementType, JsonValue jsonData) {
 				// If the JSON is a string but the type is not, look up the actual value by name.
-				if (jsonData instanceof String
+				if (jsonData.isString()
 					&& !ReflectionCache.getType(type).isAssignableFrom(ReflectionCache.getType(CharSequence.class)))
-					return get((String)jsonData, type);
+					return get(jsonData.asString(), type);
 				return super.readValue(type, elementType, jsonData);
 			}
 		};
@@ -373,13 +374,10 @@ public class Skin implements Disposable {
 		json.setUsePrototypes(false);
 
 		json.setSerializer(Skin.class, new ReadOnlySerializer<Skin>() {
-			public Skin read (Json json, Object jsonData, Class ignored) {
-				ObjectMap<String, ObjectMap> typeToValueMap = (ObjectMap)jsonData;
-				for (Entry<String, ObjectMap> typeEntry : typeToValueMap.entries()) {
-					String className = typeEntry.key;
-					ObjectMap<String, ObjectMap> valueMap = (ObjectMap)typeEntry.value;
+			public Skin read (Json json, JsonValue typeToValueMap, Class ignored) {
+				for (JsonValue valueMap = typeToValueMap.child(); valueMap != null; valueMap = valueMap.next()) {
 					try {
-						readNamedObjects(json, ReflectionCache.forName(className).getClassOfType(), valueMap);
+						readNamedObjects(json, ReflectionCache.forName(valueMap.name()).getClassOfType(), valueMap);
 					} catch (ClassNotFoundException ex) {
 						throw new SerializationException(ex);
 					}
@@ -387,23 +385,22 @@ public class Skin implements Disposable {
 				return skin;
 			}
 
-			private void readNamedObjects (Json json, Class type, ObjectMap<String, ObjectMap> valueMap) {
+			private void readNamedObjects (Json json, Class type, JsonValue valueMap) {
 				Class addType = type == TintedDrawable.class ? Drawable.class : type;
-				for (Entry<String, ObjectMap> valueEntry : valueMap.entries()) {
-					String name = valueEntry.key;
-					Object object = json.readValue(type, valueEntry.value);
+				for (JsonValue valueEntry = valueMap.child(); valueEntry != null; valueEntry = valueEntry.next()) {
+					Object object = json.readValue(type, valueEntry);
 					if (object == null) continue;
 					try {
-						add(name, object, addType);
+						add(valueEntry.name(), object, addType);
 					} catch (Exception ex) {
-						throw new SerializationException("Error reading " + type.getName() + ": " + valueEntry.key, ex);
+						throw new SerializationException("Error reading " + type.getName() + ": " + valueEntry.name(), ex);
 					}
 				}
 			}
 		});
 
 		json.setSerializer(BitmapFont.class, new ReadOnlySerializer<BitmapFont>() {
-			public BitmapFont read (Json json, Object jsonData, Class type) {
+			public BitmapFont read (Json json, JsonValue jsonData, Class type) {
 				String path = json.readValue("file", String.class, jsonData);
 
 				FileHandle fontFile = skinFile.parent().child(path);
@@ -430,9 +427,10 @@ public class Skin implements Disposable {
 		});
 
 		json.setSerializer(Color.class, new ReadOnlySerializer<Color>() {
-			public Color read (Json json, Object jsonData, Class type) {
-				if (jsonData instanceof String) return get((String)jsonData, Color.class);
-				ObjectMap map = (ObjectMap)jsonData;
+			public Color read (Json json, JsonValue jsonData, Class type) {
+				if (jsonData.isString()) return get(jsonData.asString(), Color.class);
+				String hex = json.readValue("hex", String.class, (String)null, jsonData);
+				if (hex != null) return Color.valueOf(hex);
 				float r = json.readValue("r", float.class, 0f, jsonData);
 				float g = json.readValue("g", float.class, 0f, jsonData);
 				float b = json.readValue("b", float.class, 0f, jsonData);
@@ -442,7 +440,7 @@ public class Skin implements Disposable {
 		});
 
 		json.setSerializer(TintedDrawable.class, new ReadOnlySerializer() {
-			public Object read (Json json, Object jsonData, Class type) {
+			public Object read (Json json, JsonValue jsonData, Class type) {
 				String name = json.readValue("name", String.class, jsonData);
 				Color color = json.readValue("color", Color.class, jsonData);
 				return newDrawable(name, color);
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/Array.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/Array.java
index 75ac848..439f360 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/Array.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/Array.java
@@ -68,6 +68,16 @@ public class Array<T> implements Iterable<T> {
 	public Array (Class<T> arrayType) {
 		this(true, 16, arrayType);
 	}
+	
+	/** Creates a new array containing the elements in the specified array. The new array will have the same type of backing array.
+	* The capacity is set to the number of elements, so any subsequent elements added will cause the backing array to be grown.
+	* @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a
+	* memory copy. */
+	public Array (boolean ordered, T[] array, int start, int count) {
+		this(ordered, array.length, (Class)array.getClass().getComponentType());
+		size = array.length;
+		System.arraycopy(array, 0, items, 0, size);
+	}
 
 	/** Creates a new array containing the elements in the specified array. The new array will have the same type of backing array
 	 * and will be ordered if the specified array is ordered. The capacity is set to the number of elements, so any subsequent
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/Json.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/Json.java
index 6b4bfc7..1539fad 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/Json.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/Json.java
@@ -31,6 +31,7 @@ import java.util.Map;
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.utils.JsonWriter.OutputType;
 import com.badlogic.gdx.utils.ObjectMap.Entry;
+import com.badlogic.gdx.utils.ObjectMap.Values;
 import com.badlogic.gwtref.client.Constructor;
 import com.badlogic.gwtref.client.Field;
 import com.badlogic.gwtref.client.ReflectionCache;
@@ -230,7 +231,7 @@ public class Json {
 		ObjectMap<String, FieldMetadata> fields = typeToFields.get(type);
 		if (fields == null) fields = cacheFields(type);
 		int i = 0;
-		for (FieldMetadata metadata : fields.values()) {
+		for (FieldMetadata metadata : new Values<FieldMetadata>(fields)) {
 			Field field = metadata.field;
 			try {
 				Object value = field.get(object);
@@ -374,7 +375,7 @@ public class Json {
 	}
 
 	/** @param value May be null.
-	 * @param knownType May be null if the type is unknown.
+	 * @param knownClass May be null if the type is unknown.
 	 * @param elementType May be null if the type is unknown. */
 	public void writeValue (Object value, Class knownClass, Class elementType) {
 		try {
@@ -477,7 +478,7 @@ public class Json {
 			}
 
 			if (value instanceof Map) {
-				if (knownType == null) knownType = ReflectionCache.getType(OrderedMap.class);
+				if (knownType == null) knownType = ReflectionCache.getType(HashMap.class);
 				writeObjectStart(actualType.getClassOfType(), knownType.getClassOfType());
 				for (Map.Entry entry : ((Map<?, ?>)value).entrySet()) {
 					writer.name(convertToString(entry.getKey()));
@@ -654,28 +655,27 @@ public class Json {
 		return (T)readValue(type, elementType, new JsonReader().parse(json));
 	}
 
-	public void readField (Object object, String name, Object jsonData) {
+	public void readField (Object object, String name, JsonValue jsonData) {
 		readField(object, name, name, null, jsonData);
 	}
 
-	public void readField (Object object, String name, Class elementType, Object jsonData) {
+	public void readField (Object object, String name, Class elementType, JsonValue jsonData) {
 		readField(object, name, name, elementType, jsonData);
 	}
 
-	public void readField (Object object, String fieldName, String jsonName, Object jsonData) {
+	public void readField (Object object, String fieldName, String jsonName, JsonValue jsonData) {
 		readField(object, fieldName, jsonName, null, jsonData);
 	}
 
 	/** @param elementType May be null if the type is unknown. */
-	public void readField (Object object, String fieldName, String jsonName, Class elementType, Object jsonData) {
-		OrderedMap jsonMap = (OrderedMap)jsonData;
+	public void readField (Object object, String fieldName, String jsonName, Class elementType, JsonValue jsonMap) {
 		Type type = ReflectionCache.getType(object.getClass());
 		ObjectMap<String, FieldMetadata> fields = typeToFields.get(type);
 		if (fields == null) fields = cacheFields(type);
 		FieldMetadata metadata = fields.get(fieldName);
 		if (metadata == null) throw new SerializationException("Field not found: " + fieldName + " (" + type.getName() + ")");
 		Field field = metadata.field;
-		Object jsonValue = jsonMap.get(jsonName);
+		JsonValue jsonValue = jsonMap.get(jsonName);
 		if (jsonValue == null) return;
 		if (elementType == null) elementType = metadata.elementType;
 		try {
@@ -692,24 +692,23 @@ public class Json {
 		}
 	}
 
-	public void readFields (Object object, Object jsonData) {
-		OrderedMap<String, Object> jsonMap = (OrderedMap)jsonData;
+	public void readFields (Object object, JsonValue jsonMap) {
 		Type type = ReflectionCache.getType(object.getClass());
 		ObjectMap<String, FieldMetadata> fields = typeToFields.get(type);
 		if (fields == null) fields = cacheFields(type);
-		for (Entry<String, Object> entry : jsonMap.entries()) {
-			FieldMetadata metadata = fields.get(entry.key);
+		for (JsonValue child = jsonMap.child(); child != null; child = child.next()) {
+			FieldMetadata metadata = fields.get(child.name());
 			if (metadata == null) {
 				if (ignoreUnknownFields) {
-					if (debug) System.out.println("Ignoring unknown field: " + entry.key + " (" + type.getName() + ")");
+					if (debug) System.out.println("Ignoring unknown field: " + child.name() + " (" + type.getName() + ")");
 					continue;
 				} else
-					throw new SerializationException("Field not found: " + entry.key + " (" + type.getName() + ")");
+					throw new SerializationException("Field not found: " + child.name() + " (" + type.getName() + ")");
 			}
 			Field field = metadata.field;
-			if (entry.value == null) continue;
+			// if (entry.value == null) continue; // I don't remember what this did. :(
 			try {
-				field.set(object, readValue(field.getType().getClassOfType(), metadata.elementType, entry.value));
+				field.set(object, readValue(field.getType().getClassOfType(), metadata.elementType, child));
 			} catch (IllegalAccessException ex) {
 				throw new SerializationException("Error accessing field: " + field.getName() + " (" + type.getName() + ")", ex);
 			} catch (SerializationException ex) {
@@ -725,16 +724,14 @@ public class Json {
 
 	/** @param type May be null if the type is unknown.
 	 * @return May be null. */
-	public <T> T readValue (String name, Class<T> type, Object jsonData) {
-		OrderedMap jsonMap = (OrderedMap)jsonData;
+	public <T> T readValue (String name, Class<T> type, JsonValue jsonMap) {
 		return (T)readValue(type, null, jsonMap.get(name));
 	}
 
 	/** @param type May be null if the type is unknown.
 	 * @return May be null. */
-	public <T> T readValue (String name, Class<T> type, T defaultValue, Object jsonData) {
-		OrderedMap jsonMap = (OrderedMap)jsonData;
-		Object jsonValue = jsonMap.get(name);
+	public <T> T readValue (String name, Class<T> type, T defaultValue, JsonValue jsonMap) {
+		JsonValue jsonValue = jsonMap.get(name);
 		if (jsonValue == null) return defaultValue;
 		return (T)readValue(type, null, jsonValue);
 	}
@@ -742,17 +739,15 @@ public class Json {
 	/** @param type May be null if the type is unknown.
 	 * @param elementType May be null if the type is unknown.
 	 * @return May be null. */
-	public <T> T readValue (String name, Class<T> type, Class elementType, Object jsonData) {
-		OrderedMap jsonMap = (OrderedMap)jsonData;
+	public <T> T readValue (String name, Class<T> type, Class elementType, JsonValue jsonMap) {
 		return (T)readValue(type, elementType, jsonMap.get(name));
 	}
 
 	/** @param type May be null if the type is unknown.
 	 * @param elementType May be null if the type is unknown.
 	 * @return May be null. */
-	public <T> T readValue (String name, Class<T> type, Class elementType, T defaultValue, Object jsonData) {
-		OrderedMap jsonMap = (OrderedMap)jsonData;
-		Object jsonValue = jsonMap.get(name);
+	public <T> T readValue (String name, Class<T> type, Class elementType, T defaultValue, JsonValue jsonMap) {
+		JsonValue jsonValue = jsonMap.get(name);
 		if (jsonValue == null) return defaultValue;
 		return (T)readValue(type, elementType, jsonValue);
 	}
@@ -760,28 +755,27 @@ public class Json {
 	/** @param type May be null if the type is unknown.
 	 * @param elementType May be null if the type is unknown.
 	 * @return May be null. */
-	public <T> T readValue (Class<T> type, Class elementType, T defaultValue, Object jsonData) {
+	public <T> T readValue (Class<T> type, Class elementType, T defaultValue, JsonValue jsonData) {
 		return (T)readValue(type, elementType, jsonData);
 	}
 
 	/** @param type May be null if the type is unknown.
 	 * @return May be null. */
-	public <T> T readValue (Class<T> type, Object jsonData) {
+	public <T> T readValue (Class<T> type, JsonValue jsonData) {
 		return (T)readValue(type, null, jsonData);
 	}
 
-	/** @param type May be null if the type is unknown.
+	/** @param clazz May be null if the type is unknown.
 	 * @param elementType May be null if the type is unknown.
 	 * @return May be null. */
-	public <T> T readValue (Class<T> clazz, Class elementType, Object jsonData) {
+	public <T> T readValue (Class<T> clazz, Class elementType, JsonValue jsonData) {
 		if (jsonData == null) return null;
 
 		Type type = ReflectionCache.getType(clazz);
-		if (jsonData instanceof OrderedMap) {
-			OrderedMap<String, Object> jsonMap = (OrderedMap)jsonData;
-
-			String className = typeName == null ? null : (String)jsonMap.remove(typeName);
+		if (jsonData.isObject()) {
+			String className = typeName == null ? null : jsonData.getString(typeName, null);
 			if (className != null) {
+				jsonData.remove(typeName);
 				try {
 					type = ReflectionCache.forName(className);
 				} catch (ClassNotFoundException ex) {
@@ -793,19 +787,19 @@ public class Json {
 			Object object;
 			if (type != null) {
 				Serializer serializer = classToSerializer.get(type);
-				if (serializer != null) return (T)serializer.read(this, jsonMap, type.getClassOfType());
+				if (serializer != null) return (T)serializer.read(this, jsonData, type.getClassOfType());
 
 				object = newInstance(type);
 
 				if (object instanceof Serializable) {
-					((Serializable)object).read(this, jsonMap);
+					((Serializable)object).read(this, jsonData);
 					return (T)object;
 				}
 
 				if (object instanceof HashMap) {
 					HashMap result = (HashMap)object;
-					for (Entry entry : jsonMap.entries())
-						result.put(entry.key, readValue(elementType, null, entry.value));
+					for (JsonValue child = jsonData.child(); child != null; child = child.next())
+						result.put(child.name(), readValue(elementType, null, child));
 					return (T)result;
 				}
 			} else
@@ -813,12 +807,12 @@ public class Json {
 
 			if (object instanceof ObjectMap) {
 				ObjectMap result = (ObjectMap)object;
-				for (String key : jsonMap.orderedKeys())
-					result.put(key, readValue(elementType, null, jsonMap.get(key)));
+				for (JsonValue child = jsonData.child(); child != null; child = child.next())
+					result.put(child.name(), readValue(elementType, null, child));
 				return (T)result;
 			}
 
-			readFields(object, jsonMap);
+			readFields(object, jsonData);
 			return (T)object;
 		}
 
@@ -827,52 +821,58 @@ public class Json {
 			if (serializer != null) return (T)serializer.read(this, jsonData, type.getClassOfType());
 		}
 
-		if (jsonData instanceof Array) {
-			Array array = (Array)jsonData;
+		if (jsonData.isArray()) {
 			if (type == null || type.isAssignableFrom(ReflectionCache.getType(Array.class))) {
-				Array newArray = new Array(array.size);
-				for (int i = 0, n = array.size; i < n; i++)
-					newArray.add(readValue(elementType, null, array.get(i)));
+				Array newArray = new Array();
+				for (JsonValue child = jsonData.child(); child != null; child = child.next())
+					newArray.add(readValue(elementType, null, child));
 				return (T)newArray;
 			}
 			if (type.isAssignableFrom(ReflectionCache.getType(ArrayList.class))) {
-				ArrayList newArray = new ArrayList(array.size);
-				for (int i = 0, n = array.size; i < n; i++)
-					newArray.add(readValue(elementType, null, array.get(i)));
+				ArrayList newArray = new ArrayList();
+				for (JsonValue child = jsonData.child(); child != null; child = child.next())
+					newArray.add(readValue(elementType, null, child));
 				return (T)newArray;
 			}
 			if (type.isArray()) {
 				Class componentType = type.getComponentType();
 				if (elementType == null) elementType = componentType;
-				Object newArray = ReflectionCache.newArray(componentType, array.size);
+				Object newArray = ReflectionCache.newArray(componentType, jsonData.size());
 				Type arrayType = ReflectionCache.getType(newArray.getClass());
-				for (int i = 0, n = array.size; i < n; i++)
-					arrayType.setArrayElement(newArray, i, readValue(elementType, null, array.get(i)));
+				int i = 0;
+				for (JsonValue child = jsonData.child(); child != null; child = child.next())
+					arrayType.setArrayElement(newArray, i++, readValue(elementType, null, child));
 				return (T)newArray;
 			}
 			throw new SerializationException("Unable to convert value to required type: " + jsonData + " (" + type.getName() + ")");
 		}
 
-		Class t = type.getClassOfType();
-		if (jsonData instanceof Float) {
-			Float floatValue = (Float)jsonData;
+		Class t = type == null ? null : type.getClassOfType();
+		if (jsonData.isNumber()) {
 			try {
-				if (t == null || t == float.class || t == Float.class) return (T)(Float)floatValue;
-				if (t == int.class || t == Integer.class) return (T)(Integer)floatValue.intValue();
-				if (t == long.class || t == Long.class) return (T)(Long)floatValue.longValue();
-				if (t == double.class || t == Double.class) return (T)(Double)floatValue.doubleValue();
-				if (t == short.class || t == Short.class) return (T)(Short)floatValue.shortValue();
-				if (t == byte.class || t == Byte.class) return (T)(Byte)floatValue.byteValue();
+				if (type == null || t == float.class || t == Float.class) return (T)(Float)jsonData.asFloat();
+				if (t == int.class || t == Integer.class) return (T)(Integer)jsonData.asInt();
+				if (t == long.class || t == Long.class) return (T)(Long)jsonData.asLong();
+				if (t == double.class || t == Double.class) return (T)(Double)(double)jsonData.asFloat();
+				if (t == String.class) return (T)Float.toString(jsonData.asFloat());
+				if (t == short.class || t == Short.class) return (T)(Short)(short)jsonData.asInt();
+				if (t == byte.class || t == Byte.class) return (T)(Byte)(byte)jsonData.asInt();
 			} catch (NumberFormatException ignored) {
 			}
-			jsonData = String.valueOf(jsonData);
+			jsonData = new JsonValue(jsonData.asString());
 		}
 
-		if (jsonData instanceof Boolean) jsonData = String.valueOf(jsonData);
+		if (jsonData.isBoolean()) {
+			try {
+				if (type == null || t == boolean.class || t == Boolean.class) return (T)(Boolean)jsonData.asBoolean();
+			} catch (NumberFormatException ignored) {
+			}
+			jsonData = new JsonValue(jsonData.asString());
+		}
 
-		if (jsonData instanceof String) {
-			String string = (String)jsonData;
-			if (type == null || t == String.class) return (T)jsonData;
+		if (jsonData.isString()) {
+			String string = jsonData.asString();
+			if (type == null || t == String.class) return (T)string;
 			try {
 				if (t == int.class || t == Integer.class) return (T)Integer.valueOf(string);
 				if (t == float.class || t == Float.class) return (T)Float.valueOf(string);
@@ -938,101 +938,7 @@ public class Json {
 	}
 
 	public String prettyPrint (String json, int singleLineColumns) {
-		StringBuilder buffer = new StringBuilder(512);
-		prettyPrint(new JsonReader().parse(json), buffer, 0, singleLineColumns);
-		return buffer.toString();
-	}
-
-	private void prettyPrint (Object object, StringBuilder buffer, int indent, int singleLineColumns) {
-		if (object instanceof OrderedMap) {
-			OrderedMap<String, ?> map = (OrderedMap)object;
-			if (map.size == 0) {
-				buffer.append("{}");
-			} else {
-				boolean newLines = !isFlat(map);
-				int start = buffer.length();
-				outer:
-				while (true) {
-					buffer.append(newLines ? "{\n" : "{ ");
-					int i = 0;
-					for (String key : map.orderedKeys()) {
-						if (newLines) indent(indent, buffer);
-						buffer.append(outputType.quoteName(key));
-						buffer.append(": ");
-						prettyPrint(map.get(key), buffer, indent + 1, singleLineColumns);
-						if (i++ < map.size - 1) buffer.append(",");
-						buffer.append(newLines ? '\n' : ' ');
-						if (!newLines && buffer.length() - start > singleLineColumns) {
-							buffer.setLength(start);
-							newLines = true;
-							continue outer;
-						}
-					}
-					break;
-				}
-				if (newLines) indent(indent - 1, buffer);
-				buffer.append('}');
-			}
-		} else if (object instanceof Array) {
-			Array array = (Array)object;
-			if (array.size == 0) {
-				buffer.append("[]");
-			} else {
-				boolean newLines = !isFlat(array);
-				int start = buffer.length();
-				outer:
-				while (true) {
-					buffer.append(newLines ? "[\n" : "[ ");
-					for (int i = 0, n = array.size; i < n; i++) {
-						if (newLines) indent(indent, buffer);
-						prettyPrint(array.get(i), buffer, indent + 1, singleLineColumns);
-						if (i < array.size - 1) buffer.append(",");
-						buffer.append(newLines ? '\n' : ' ');
-						if (!newLines && buffer.length() - start > singleLineColumns) {
-							buffer.setLength(start);
-							newLines = true;
-							continue outer;
-						}
-					}
-					break;
-				}
-				if (newLines) indent(indent - 1, buffer);
-				buffer.append(']');
-			}
-		} else if (object instanceof String) {
-			buffer.append(outputType.quoteValue((String)object));
-		} else if (object instanceof Float) {
-			Float floatValue = (Float)object;
-			int intValue = floatValue.intValue();
-			buffer.append(floatValue - intValue == 0 ? intValue : object);
-		} else if (object instanceof Boolean) {
-			buffer.append(object);
-		} else if (object == null) {
-			buffer.append("null");
-		} else
-			throw new SerializationException("Unknown object type: " + object.getClass());
-	}
-
-	static private boolean isFlat (ObjectMap<?, ?> map) {
-		for (Entry entry : map.entries()) {
-			if (entry.value instanceof ObjectMap) return false;
-			if (entry.value instanceof Array) return false;
-		}
-		return true;
-	}
-
-	static private boolean isFlat (Array array) {
-		for (int i = 0, n = array.size; i < n; i++) {
-			Object value = array.get(i);
-			if (value instanceof ObjectMap) return false;
-			if (value instanceof Array) return false;
-		}
-		return true;
-	}
-
-	static private void indent (int count, StringBuilder buffer) {
-		for (int i = 0; i < count; i++)
-			buffer.append('\t');
+		return new JsonReader().parse(json).prettyPrint(outputType, singleLineColumns);
 	}
 
 	static private class FieldMetadata {
@@ -1047,19 +953,19 @@ public class Json {
 	static public interface Serializer<T> {
 		public void write (Json json, T object, Class knownType);
 
-		public T read (Json json, Object jsonData, Class type);
+		public T read (Json json, JsonValue jsonData, Class type);
 	}
 
 	static abstract public class ReadOnlySerializer<T> implements Serializer<T> {
 		public void write (Json json, T object, Class knownType) {
 		}
 
-		abstract public T read (Json json, Object jsonData, Class type);
+		abstract public T read (Json json, JsonValue jsonData, Class type);
 	}
 
 	static public interface Serializable {
 		public void write (Json json);
 
-		public void read (Json json, OrderedMap<String, Object> jsonData);
+		public void read (Json json, JsonValue jsonData);
 	}
 }
diff --git a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/Preloader.java b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/Preloader.java
index e2c9d7f..2eab4ca 100644
--- a/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/Preloader.java
+++ b/backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/preloader/Preloader.java
@@ -61,12 +61,15 @@ public class Preloader {
 		GWT.create(PreloaderBundle.class);
 	}
 
+	public Array<Asset> assets;
+	public int loaded = 0;
+	
 	public void preload (final String assetFileUrl, final PreloaderCallback callback) {
 		new TextLoader(baseUrl + assetFileUrl, new LoaderCallback<String>() {
 			@Override
 			public void success (String result) {
 				String[] lines = result.split("\n");
-				Array<Asset> assets = new Array<Asset>();
+				assets = new Array<Asset>();
 				for (String line : lines) {
 					String[] tokens = line.split(":");
 					if (tokens.length != 2) continue; // FIXME :p
@@ -77,8 +80,9 @@ public class Preloader {
 					if (tokens[0].equals("d")) type = AssetType.Directory;
 					assets.add(new Asset(tokens[1].trim(), type));
 				}
-
-				loadNextAsset(assets, 0, callback);
+				for (Asset asset : assets) {
+					beginLoadingAsset(asset, callback);
+				}
 			}
 
 			@Override
@@ -88,27 +92,18 @@ public class Preloader {
 		});
 	}
 
-	private void loadNextAsset (final Array<Asset> assets, final int next, final PreloaderCallback callback) {
-
-		if (next == assets.size) {
-			callback.done();
-			return;
-		}
-
-		final Asset asset = assets.get(next);
+	public void beginLoadingAsset (final Asset asset, final PreloaderCallback callback) {
 		if (asset.type == AssetType.Text) {
 			new TextLoader(baseUrl + asset.url, new LoaderCallback<String>() {
 				@Override
 				public void success (String result) {
-					texts.put(asset.url, result);
-					callback.loaded(asset.url, next + 1, assets.size);
-					loadNextAsset(assets, next + 1, callback);
+					texts.put(asset.url, result);					
+					finishLoadingAsset(asset, callback, true);
 				}
 
 				@Override
 				public void error () {
-					callback.error(asset.url);
-					loadNextAsset(assets, next + 1, callback);
+					finishLoadingAsset(asset, callback, false);
 				}
 			});
 		}
@@ -118,14 +113,12 @@ public class Preloader {
 				@Override
 				public void success (ImageElement result) {
 					images.put(asset.url, result);
-					callback.loaded(asset.url, next + 1, assets.size);
-					loadNextAsset(assets, next + 1, callback);
+					finishLoadingAsset(asset, callback, true);
 				}
 
 				@Override
 				public void error () {
-					callback.error(asset.url);
-					loadNextAsset(assets, next + 1, callback);
+					finishLoadingAsset(asset, callback, false);
 				}
 			});
 		}
@@ -135,14 +128,12 @@ public class Preloader {
 				@Override
 				public void success (Blob result) {
 					binaries.put(asset.url, result);
-					callback.loaded(asset.url, next + 1, assets.size);
-					loadNextAsset(assets, next + 1, callback);
+					finishLoadingAsset(asset, callback, true);
 				}
 
 				@Override
 				public void error () {
-					callback.error(asset.url);
-					loadNextAsset(assets, next + 1, callback);
+					finishLoadingAsset(asset, callback, false);
 				}
 			});
 		}
@@ -152,20 +143,30 @@ public class Preloader {
 				@Override
 				public void success (Void result) {
 					audio.put(asset.url, null);
-					callback.loaded(asset.url, next + 1, assets.size);
-					loadNextAsset(assets, next + 1, callback);
+					finishLoadingAsset(asset, callback, true);
 				}
 
 				@Override
 				public void error () {
-					callback.error(asset.url);
-					loadNextAsset(assets, next + 1, callback);
+					finishLoadingAsset(asset, callback, false);
 				}
 			});
 		}
 
 		if (asset.type == AssetType.Directory) {
-			loadNextAsset(assets, next + 1, callback);
+			finishLoadingAsset(asset, callback, true);
+		}
+	}
+	
+	public void finishLoadingAsset (final Asset asset, final PreloaderCallback callback, boolean success) {
+		loaded++;
+		if (success) {
+			callback.loaded(asset.url, loaded, assets.size);
+		} else {
+			callback.error(asset.url);
+		}
+		if (loaded == assets.size) {
+			callback.done();
 		}
 	}
 
diff --git a/backends/gdx-openal/libs/lwjgl-debug.jar b/backends/gdx-openal/libs/lwjgl-debug.jar
index 6190b42..4625bff 100644
Binary files a/backends/gdx-openal/libs/lwjgl-debug.jar and b/backends/gdx-openal/libs/lwjgl-debug.jar differ
diff --git a/backends/gdx-openal/libs/lwjgl.jar b/backends/gdx-openal/libs/lwjgl.jar
index 966b9b8..4cb7cda 100644
Binary files a/backends/gdx-openal/libs/lwjgl.jar and b/backends/gdx-openal/libs/lwjgl.jar differ
diff --git a/backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALMusic.java b/backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALMusic.java
index 74086f1..8330ec2 100644
--- a/backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALMusic.java
+++ b/backends/gdx-openal/src/com/badlogic/gdx/backends/openal/OpenALMusic.java
@@ -121,6 +121,10 @@ public abstract class OpenALMusic implements Music {
 		if (audio.noDevice) return;
 		if (sourceID != -1) alSourcef(sourceID, AL_GAIN, volume);
 	}
+	
+	public float getVolume() {
+		return this.volume;
+	}
 
 	public float getPosition () {
 		if (audio.noDevice) return 0;
diff --git a/demos/cuboc/cuboc/src/com/badlogic/cubocy/Bob.java b/demos/cuboc/cuboc/src/com/badlogic/cubocy/Bob.java
index d11319a..6de4adc 100644
--- a/demos/cuboc/cuboc/src/com/badlogic/cubocy/Bob.java
+++ b/demos/cuboc/cuboc/src/com/badlogic/cubocy/Bob.java
@@ -48,14 +48,14 @@ public class Bob {
 		processKeys();
 
 		accel.y = -GRAVITY;
-		accel.mul(deltaTime);
+		accel.scl(deltaTime);
 		vel.add(accel.x, accel.y);
 		if (accel.x == 0) vel.x *= DAMP;
 		if (vel.x > MAX_VEL) vel.x = MAX_VEL;
 		if (vel.x < -MAX_VEL) vel.x = -MAX_VEL;
-		vel.mul(deltaTime);
+		vel.scl(deltaTime);
 		tryMove();
-		vel.mul(1.0f / deltaTime);
+		vel.scl(1.0f / deltaTime);
 
 		if (state == SPAWN) {
 			if (stateTime > 0.4f) {
diff --git a/demos/cuboc/cuboc/src/com/badlogic/cubocy/Cube.java b/demos/cuboc/cuboc/src/com/badlogic/cubocy/Cube.java
index 66193b9..6e749fe 100644
--- a/demos/cuboc/cuboc/src/com/badlogic/cubocy/Cube.java
+++ b/demos/cuboc/cuboc/src/com/badlogic/cubocy/Cube.java
@@ -46,13 +46,13 @@ public class Cube {
 			if (map.bob.dir == Bob.LEFT) target.x++;
 			target.y += 0.2f;
 
-			vel.set(target).sub(pos).mul(Math.min(4, pos.dst(target)) * deltaTime);
-			if (vel.len() > MAX_VELOCITY) vel.nor().mul(MAX_VELOCITY);
+			vel.set(target).sub(pos).scl(Math.min(4, pos.dst(target)) * deltaTime);
+			if (vel.len() > MAX_VELOCITY) vel.nor().scl(MAX_VELOCITY);
 			tryMove();
 		}
 
 		if (state == CONTROLLED) {
-			accel.mul(deltaTime);
+			accel.scl(deltaTime);
 			vel.add(accel.x, accel.y);
 			if (accel.x == 0) vel.x *= DAMP;
 			if (accel.y == 0) vel.y *= DAMP;
@@ -60,9 +60,9 @@ public class Cube {
 			if (vel.x < -MAX_VELOCITY) vel.x = -MAX_VELOCITY;
 			if (vel.y > MAX_VELOCITY) vel.y = MAX_VELOCITY;
 			if (vel.y < -MAX_VELOCITY) vel.y = -MAX_VELOCITY;
-			vel.mul(deltaTime);
+			vel.scl(deltaTime);
 			tryMove();
-			vel.mul(1.0f / deltaTime);
+			vel.scl(1.0f / deltaTime);
 		}
 
 		if (state == FIXED) {
diff --git a/demos/cuboc/cuboc/src/com/badlogic/cubocy/MovingSpikes.java b/demos/cuboc/cuboc/src/com/badlogic/cubocy/MovingSpikes.java
index 9e391c0..99cd61c 100644
--- a/demos/cuboc/cuboc/src/com/badlogic/cubocy/MovingSpikes.java
+++ b/demos/cuboc/cuboc/src/com/badlogic/cubocy/MovingSpikes.java
@@ -74,9 +74,9 @@ public class MovingSpikes {
 			pos.x -= vel.x * deltaTime;
 			pos.y -= vel.y * deltaTime;
 			state = -state;
-			vel.mul(-1);
-			if (state == FORWARD) vel.nor().mul(FORWARD_VEL);
-			if (state == BACKWARD) vel.nor().mul(BACKWARD_VEL);
+			vel.scl(-1);
+			if (state == FORWARD) vel.nor().scl(FORWARD_VEL);
+			if (state == BACKWARD) vel.nor().scl(BACKWARD_VEL);
 		}
 
 		bounds.x = pos.x;
diff --git a/demos/cuboc/cuboc/src/com/badlogic/cubocy/Rocket.java b/demos/cuboc/cuboc/src/com/badlogic/cubocy/Rocket.java
index e9fee5f..d45b4c4 100644
--- a/demos/cuboc/cuboc/src/com/badlogic/cubocy/Rocket.java
+++ b/demos/cuboc/cuboc/src/com/badlogic/cubocy/Rocket.java
@@ -34,7 +34,7 @@ public class Rocket {
 // if(pos.dst(map.bob.pos) < pos.dst(map.cube.pos)) vel.set(map.bob.pos);
 // else vel.set(map.cube.pos);
 			vel.set(map.bob.pos);
-			vel.sub(pos).nor().mul(VELOCITY);
+			vel.sub(pos).nor().scl(VELOCITY);
 			pos.add(vel.x * deltaTime, vel.y * deltaTime);
 			bounds.x = pos.x + 0.2f;
 			bounds.y = pos.y + 0.2f;
diff --git a/demos/invaders/gdx-invaders-android/src/com/badlogic/gdxinvaders/GdxInvadersAndroid.java b/demos/invaders/gdx-invaders-android/src/com/badlogic/gdxinvaders/GdxInvadersAndroid.java
index 8d57169..4e73d35 100644
--- a/demos/invaders/gdx-invaders-android/src/com/badlogic/gdxinvaders/GdxInvadersAndroid.java
+++ b/demos/invaders/gdx-invaders-android/src/com/badlogic/gdxinvaders/GdxInvadersAndroid.java
@@ -15,7 +15,7 @@ public class GdxInvadersAndroid extends AndroidApplication {
 		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
 		AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
 		config.useWakelock = true;
-		config.useGL20 = true;
+		config.useGL20 = false;
 		initialize(new GdxInvaders(), config);
 	}
 }
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvadersDesktop.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvadersDesktop.java
index 742301d..918c061 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvadersDesktop.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/GdxInvadersDesktop.java
@@ -23,7 +23,7 @@ public class GdxInvadersDesktop {
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.title = "Gdx Invaders";
 		config.vSyncEnabled = true;
-		config.useGL20 = true;
+		config.useGL20 = false;
 		new LwjglApplication(new GdxInvaders(), config);
 	}
 }
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/Renderer.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/Renderer.java
index 1f6edd2..149a96a 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/Renderer.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/Renderer.java
@@ -1,162 +1,10 @@
-/*
- * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
- * License. You may obtain a copy of the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
- * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
- * governing permissions and limitations under the License.
- */
 
 package com.badlogic.gdxinvaders;
 
-import java.util.ArrayList;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.GLCommon;
-import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.PerspectiveCamera;
-import com.badlogic.gdx.graphics.Pixmap.Format;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.Texture.TextureFilter;
-import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g2d.BitmapFont;
-import com.badlogic.gdx.graphics.g2d.SpriteBatch;
-import com.badlogic.gdx.graphics.g3d.Light;
-import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.RenderableProvider;
-import com.badlogic.gdx.graphics.g3d.lights.DirectionalLight;
-import com.badlogic.gdx.graphics.g3d.lights.Lights;
-import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
-import com.badlogic.gdx.math.Matrix3;
-import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-import com.badlogic.gdxinvaders.simulation.Block;
-import com.badlogic.gdxinvaders.simulation.Explosion;
-import com.badlogic.gdxinvaders.simulation.Invader;
-import com.badlogic.gdxinvaders.simulation.Ship;
-import com.badlogic.gdxinvaders.simulation.Shot;
 import com.badlogic.gdxinvaders.simulation.Simulation;
 
-/** The renderer receives a simulation and renders it.
- * @author mzechner */
-public class Renderer {
-	/** sprite batch to draw text **/
-	private SpriteBatch spriteBatch;
-	/** the background texture **/
-	private Texture backgroundTexture;
-	/** the font **/
-	private BitmapFont font;
-	/** the rotation angle of all invaders around y **/
-	private float invaderAngle = 0;
-	/** status string **/
-	private String status = "";
-	/** keeping track of the last score so we don't constantly construct a new string **/
-	private int lastScore = 0;
-	private int lastLives = 0;
-	private int lastWave = 0;
-
-	/** view and transform matrix for text rendering and transforming 3D objects **/
-	private final Matrix4 viewMatrix = new Matrix4();
-	private final Matrix4 transform = new Matrix4();
-	private final Matrix4 normal = new Matrix4();
-	private final Matrix3 normal3 = new Matrix3();
-
-	/** perspective camera **/
-	private PerspectiveCamera camera;
-
-	/** the directional light **/
-	Lights lights = new Lights(Color.BLACK, new DirectionalLight().set(Color.WHITE, new Vector3(-1, -0.5f, 0).nor()));
-
-	ModelBatch modelBatch;
-	
-	final Vector3 tmpV = new Vector3();
-
-	public Renderer () {
-		try {
-			spriteBatch = new SpriteBatch();
-			modelBatch = new ModelBatch();
-
-			backgroundTexture = new Texture(Gdx.files.internal("data/planet.jpg"), Format.RGB565, true);
-			backgroundTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
-
-			font = new BitmapFont(Gdx.files.internal("data/font10.fnt"), Gdx.files.internal("data/font10.png"), false);
-
-			camera = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-	}
-
-	public void render (Simulation simulation, float delta) {
-		// We explicitly require GL10, otherwise we could've used the GLCommon
-		// interface via Gdx.gl
-		GLCommon gl = Gdx.gl;
-		gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
-		renderBackground();
-		gl.glEnable(GL10.GL_DEPTH_TEST);
-		gl.glEnable(GL10.GL_CULL_FACE);
-		setProjectionAndCamera(simulation.ship);
-		
-		modelBatch.begin(camera);
-		modelBatch.render(simulation.explosions);
-		if (!simulation.ship.isExploding)
-			modelBatch.render(simulation.ship, lights);
-		modelBatch.render(simulation.invaders, lights);
-		modelBatch.render(simulation.blocks);
-		modelBatch.render(simulation.shots);
-		modelBatch.end();
-		
-		gl.glDisable(GL10.GL_CULL_FACE);
-		gl.glDisable(GL10.GL_DEPTH_TEST);
-
-		spriteBatch.setProjectionMatrix(viewMatrix);
-		spriteBatch.begin();
-		if (simulation.ship.lives != lastLives || simulation.score != lastScore || simulation.wave != lastWave) {
-			status = "lives: " + simulation.ship.lives + " wave: " + simulation.wave + " score: " + simulation.score;
-			lastLives = simulation.ship.lives;
-			lastScore = simulation.score;
-			lastWave = simulation.wave;
-		}
-		spriteBatch.enableBlending();
-		font.draw(spriteBatch, status, 0, 320);
-		spriteBatch.end();
-
-		invaderAngle += delta * 90;
-		if (invaderAngle > 360) invaderAngle -= 360;
-	}
-
-	private void renderBackground () {
-		viewMatrix.setToOrtho2D(0, 0, 400, 320);
-		spriteBatch.setProjectionMatrix(viewMatrix);
-		spriteBatch.begin();
-		spriteBatch.disableBlending();
-		spriteBatch.setColor(Color.WHITE);
-		spriteBatch.draw(backgroundTexture, 0, 0, 480, 320, 0, 0, 512, 512, false, false);
-		spriteBatch.end();
-	}
-
-	final Vector3 dir = new Vector3();
-
-	private void setProjectionAndCamera (Ship ship) {
-		ship.transform.getTranslation(tmpV);
-		camera.position.set(tmpV.x, 6, 2);
-		camera.direction.set(tmpV.x, 0, -4).sub(camera.position).nor();
-		camera.update();
-	}
+public interface Renderer {
+	public void render (Simulation sim, float delta);
 
-	public void dispose () {
-		spriteBatch.dispose();
-		backgroundTexture.dispose();
-		font.dispose();
-	}
+	public void dispose ();
 }
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/RendererGL10.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/RendererGL10.java
new file mode 100644
index 0000000..b54a8fb
--- /dev/null
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/RendererGL10.java
@@ -0,0 +1,304 @@
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
+ * License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
+ * governing permissions and limitations under the License.
+ */
+
+package com.badlogic.gdxinvaders;
+
+import java.io.InputStream;
+import java.util.ArrayList;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.Color;
+import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.Mesh;
+import com.badlogic.gdx.graphics.PerspectiveCamera;
+import com.badlogic.gdx.graphics.Pixmap.Format;
+import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.Texture.TextureFilter;
+import com.badlogic.gdx.graphics.VertexAttribute;
+import com.badlogic.gdx.graphics.VertexAttributes.Usage;
+import com.badlogic.gdx.graphics.g2d.BitmapFont;
+import com.badlogic.gdx.graphics.g2d.SpriteBatch;
+import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.loaders.wavefront.ObjLoader;
+import com.badlogic.gdx.graphics.g3d.model.SubMesh;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.math.Matrix4;
+import com.badlogic.gdx.math.Vector3;
+import com.badlogic.gdxinvaders.simulation.Block;
+import com.badlogic.gdxinvaders.simulation.Explosion;
+import com.badlogic.gdxinvaders.simulation.Invader;
+import com.badlogic.gdxinvaders.simulation.Ship;
+import com.badlogic.gdxinvaders.simulation.Shot;
+import com.badlogic.gdxinvaders.simulation.Simulation;
+
+/** The renderer receives a simulation and renders it.
+ * @author mzechner */
+public class RendererGL10 implements Renderer {
+	/** sprite batch to draw text **/
+	private SpriteBatch spriteBatch;
+	/** the ship mesh **/
+	private StillModel shipMesh;
+	/** the ship texture **/
+	private Texture shipTexture;
+	/** the invader mesh **/
+	private StillModel invaderMesh;
+	/** the invader texture **/
+	private Texture invaderTexture;
+	/** the block mesh **/
+	private StillModel blockMesh;
+	/** the shot mesh **/
+	private StillModel shotMesh;
+	/** the background texture **/
+	private Texture backgroundTexture;
+	/** the explosion mesh **/
+	private Mesh explosionMesh;
+	/** the explosion texture **/
+	private Texture explosionTexture;
+	/** the font **/
+	private BitmapFont font;
+	/** the rotation angle of all invaders around y **/
+	private float invaderAngle = 0;
+	/** status string **/
+	private String status = "";
+	/** keeping track of the last score so we don't constantly construct a new string **/
+	private int lastScore = 0;
+	private int lastLives = 0;
+	private int lastWave = 0;
+
+	/** view and transform matrix for text rendering **/
+	private final Matrix4 viewMatrix = new Matrix4();
+	private final Matrix4 transformMatrix = new Matrix4();
+
+	/** perspective camera **/
+	private PerspectiveCamera camera;
+
+	public RendererGL10 () {
+		try {
+			spriteBatch = new SpriteBatch();
+
+			shipMesh = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/ship.obj"));
+			invaderMesh = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/invader.obj"));
+			blockMesh = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/block.obj"));
+			shotMesh = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/shot.obj"));
+
+			shipTexture = new Texture(Gdx.files.internal("data/ship.png"), Format.RGB565, true);
+			shipTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
+			invaderTexture = new Texture(Gdx.files.internal("data/invader.png"), Format.RGB565, true);
+			invaderTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
+			backgroundTexture = new Texture(Gdx.files.internal("data/planet.jpg"), Format.RGB565, true);
+			backgroundTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
+			explosionTexture = new Texture(Gdx.files.internal("data/explode.png"), Format.RGBA4444, true);
+			explosionTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
+
+			explosionMesh = new Mesh(true, 4 * 16, 0, new VertexAttribute(Usage.Position, 3, "a_position"), new VertexAttribute(
+				Usage.TextureCoordinates, 2, "a_texCoord"));
+
+			float[] vertices = new float[4 * 16 * (3 + 2)];
+			int idx = 0;
+			for (int row = 0; row < 4; row++) {
+				for (int column = 0; column < 4; column++) {
+					vertices[idx++] = 1;
+					vertices[idx++] = 1;
+					vertices[idx++] = 0;
+					vertices[idx++] = 0.25f + column * 0.25f;
+					vertices[idx++] = 0 + row * 0.25f;
+
+					vertices[idx++] = -1;
+					vertices[idx++] = 1;
+					vertices[idx++] = 0;
+					vertices[idx++] = 0 + column * 0.25f;
+					vertices[idx++] = 0 + row * 0.25f;
+
+					vertices[idx++] = -1;
+					vertices[idx++] = -1;
+					vertices[idx++] = 0;
+					vertices[idx++] = 0f + column * 0.25f;
+					vertices[idx++] = 0.25f + row * 0.25f;
+
+					vertices[idx++] = 1;
+					vertices[idx++] = -1;
+					vertices[idx++] = 0;
+					vertices[idx++] = 0.25f + column * 0.25f;
+					vertices[idx++] = 0.25f + row * 0.25f;
+				}
+			}
+
+			explosionMesh.setVertices(vertices);
+			font = new BitmapFont(Gdx.files.internal("data/font10.fnt"), Gdx.files.internal("data/font10.png"), false);
+
+			camera = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		} catch (Exception ex) {
+			ex.printStackTrace();
+		}
+	}
+
+	public void render (Simulation simulation, float delta) {
+		// We explicitly require GL10, otherwise we could've used the GLCommon
+		// interface via Gdx.gl
+		GL10 gl = Gdx.graphics.getGL10();
+		gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
+		gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+
+		renderBackground();
+
+		gl.glDisable(GL10.GL_DITHER);
+		gl.glEnable(GL10.GL_DEPTH_TEST);
+		gl.glEnable(GL10.GL_CULL_FACE);
+
+		setProjectionAndCamera(gl, simulation.ship);
+		setLighting(gl);
+
+		gl.glEnable(GL10.GL_TEXTURE_2D);
+
+		renderShip(gl, simulation.ship);
+		renderInvaders(gl, simulation.invaders);
+
+		gl.glDisable(GL10.GL_TEXTURE_2D);
+		renderBlocks(gl, simulation.blocks);
+
+		gl.glDisable(GL10.GL_LIGHTING);
+		renderShots(gl, simulation.shots);
+
+		gl.glEnable(GL10.GL_TEXTURE_2D);
+		renderExplosions(gl, simulation.explosions);
+
+		gl.glDisable(GL10.GL_CULL_FACE);
+		gl.glDisable(GL10.GL_DEPTH_TEST);
+
+		spriteBatch.setProjectionMatrix(viewMatrix);
+		spriteBatch.setTransformMatrix(transformMatrix);
+		spriteBatch.begin();
+		if (simulation.ship.lives != lastLives || simulation.score != lastScore || simulation.wave != lastWave) {
+			status = "lives: " + simulation.ship.lives + " wave: " + simulation.wave + " score: " + simulation.score;
+			lastLives = simulation.ship.lives;
+			lastScore = simulation.score;
+			lastWave = simulation.wave;
+		}
+		spriteBatch.enableBlending();
+		spriteBatch.setBlendFunction(GL10.GL_ONE, GL10.GL_ONE_MINUS_SRC_ALPHA);
+		font.draw(spriteBatch, status, 0, 320);
+		spriteBatch.end();
+
+		invaderAngle += delta * 90;
+		if (invaderAngle > 360) invaderAngle -= 360;
+	}
+
+	private void renderBackground () {
+		viewMatrix.setToOrtho2D(0, 0, 400, 320);
+		spriteBatch.setProjectionMatrix(viewMatrix);
+		spriteBatch.setTransformMatrix(transformMatrix);
+		spriteBatch.begin();
+		spriteBatch.disableBlending();
+		spriteBatch.setColor(Color.WHITE);
+		spriteBatch.draw(backgroundTexture, 0, 0, 480, 320, 0, 0, 512, 512, false, false);
+		spriteBatch.end();
+	}
+
+	final Vector3 dir = new Vector3();
+
+	private void setProjectionAndCamera (GL10 gl, Ship ship) {
+		camera.position.set(ship.position.x, 6, 2);
+		camera.direction.set(ship.position.x, 0, -4).sub(camera.position).nor();
+		camera.update();
+		camera.apply(gl);
+	}
+
+	float[] direction = {1, 0.5f, 0, 0};
+
+	private void setLighting (GL10 gl) {
+		gl.glEnable(GL10.GL_LIGHTING);
+		gl.glEnable(GL10.GL_LIGHT0);
+		gl.glLightfv(GL10.GL_LIGHT0, GL10.GL_POSITION, direction, 0);
+		gl.glEnable(GL10.GL_COLOR_MATERIAL);
+	}
+
+	private void renderShip (GL10 gl, Ship ship) {
+		if (ship.isExploding) return;
+
+		shipTexture.bind();
+		gl.glPushMatrix();
+		gl.glTranslatef(ship.position.x, ship.position.y, ship.position.z);
+		gl.glRotatef(45 * (-Gdx.input.getAccelerometerY() / 5), 0, 0, 1);
+		gl.glRotatef(180, 0, 1, 0);
+		shipMesh.render();
+		gl.glPopMatrix();
+	}
+
+	private void renderInvaders (GL10 gl, ArrayList<Invader> invaders) {
+		invaderTexture.bind();
+		Mesh mesh = invaderMesh.getSubMeshes()[0].mesh;
+		for (int i = 0; i < invaders.size(); i++) {
+			Invader invader = invaders.get(i);
+			gl.glPushMatrix();
+			gl.glTranslatef(invader.position.x, invader.position.y, invader.position.z);
+			gl.glRotatef(invaderAngle, 0, 1, 0);
+			mesh.render(GL10.GL_TRIANGLES);
+			gl.glPopMatrix();
+		}
+	}
+
+	private void renderBlocks (GL10 gl, ArrayList<Block> blocks) {
+		gl.glEnable(GL10.GL_BLEND);
+		gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
+		gl.glColor4f(0.2f, 0.2f, 1, 0.7f);
+		for (int i = 0; i < blocks.size(); i++) {
+			Block block = blocks.get(i);
+			gl.glPushMatrix();
+			gl.glTranslatef(block.position.x, block.position.y, block.position.z);
+			blockMesh.render();
+			gl.glPopMatrix();
+		}
+		gl.glColor4f(1, 1, 1, 1);
+		gl.glDisable(GL10.GL_BLEND);
+	}
+
+	private void renderShots (GL10 gl, ArrayList<Shot> shots) {
+		gl.glColor4f(1, 1, 0, 1);
+		for (int i = 0; i < shots.size(); i++) {
+			Shot shot = shots.get(i);
+			gl.glPushMatrix();
+			gl.glTranslatef(shot.position.x, shot.position.y, shot.position.z);
+			shotMesh.render();
+			gl.glPopMatrix();
+		}
+		gl.glColor4f(1, 1, 1, 1);
+	}
+
+	private void renderExplosions (GL10 gl, ArrayList<Explosion> explosions) {
+		gl.glEnable(GL10.GL_BLEND);
+		gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
+		explosionTexture.bind();
+		for (int i = 0; i < explosions.size(); i++) {
+			Explosion explosion = explosions.get(i);
+			gl.glPushMatrix();
+			gl.glTranslatef(explosion.position.x, explosion.position.y, explosion.position.z);
+			explosionMesh.render(GL10.GL_TRIANGLE_FAN, (int)(explosion.aliveTime / Explosion.EXPLOSION_LIVE_TIME * 15) * 4, 4);
+			gl.glPopMatrix();
+		}
+		gl.glDisable(GL10.GL_BLEND);
+	}
+
+	public void dispose () {
+		spriteBatch.dispose();
+		shipTexture.dispose();
+		invaderTexture.dispose();
+		backgroundTexture.dispose();
+		explosionTexture.dispose();
+		font.dispose();
+		explosionMesh.dispose();
+		shipMesh.dispose();
+		invaderMesh.dispose();
+		shotMesh.dispose();
+		blockMesh.dispose();
+	}
+}
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/RendererGL20.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/RendererGL20.java
new file mode 100644
index 0000000..8aa58e7
--- /dev/null
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/RendererGL20.java
@@ -0,0 +1,312 @@
+/*
+ * Copyright 2010 Mario Zechner (contact@badlogicgames.com), Nathan Sweet (admin@esotericsoftware.com)
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
+ * License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
+ * governing permissions and limitations under the License.
+ */
+
+package com.badlogic.gdxinvaders;
+
+import java.util.ArrayList;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.Color;
+import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GLCommon;
+import com.badlogic.gdx.graphics.Mesh;
+import com.badlogic.gdx.graphics.PerspectiveCamera;
+import com.badlogic.gdx.graphics.Pixmap.Format;
+import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.Texture.TextureFilter;
+import com.badlogic.gdx.graphics.VertexAttribute;
+import com.badlogic.gdx.graphics.VertexAttributes.Usage;
+import com.badlogic.gdx.graphics.g2d.BitmapFont;
+import com.badlogic.gdx.graphics.g2d.SpriteBatch;
+import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.math.Matrix3;
+import com.badlogic.gdx.math.Matrix4;
+import com.badlogic.gdx.math.Vector3;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+import com.badlogic.gdxinvaders.simulation.Block;
+import com.badlogic.gdxinvaders.simulation.Explosion;
+import com.badlogic.gdxinvaders.simulation.Invader;
+import com.badlogic.gdxinvaders.simulation.Ship;
+import com.badlogic.gdxinvaders.simulation.Shot;
+import com.badlogic.gdxinvaders.simulation.Simulation;
+
+/** The renderer receives a simulation and renders it.
+ * @author mzechner */
+public class RendererGL20 implements Renderer {
+	/** sprite batch to draw text **/
+	private SpriteBatch spriteBatch;
+	/** the ship mesh **/
+	private StillModel shipMesh;
+	/** the ship texture **/
+	private Texture shipTexture;
+	/** the invader mesh **/
+	private StillModel invaderMesh;
+	/** the invader texture **/
+	private Texture invaderTexture;
+	/** the block mesh **/
+	private StillModel blockMesh;
+	/** the shot mesh **/
+	private StillModel shotMesh;
+	/** the background texture **/
+	private Texture backgroundTexture;
+	/** the explosion mesh **/
+	private Mesh explosionMesh;
+	/** the explosion texture **/
+	private Texture explosionTexture;
+	/** the font **/
+	private BitmapFont font;
+	/** the rotation angle of all invaders around y **/
+	private float invaderAngle = 0;
+	/** status string **/
+	private String status = "";
+	/** keeping track of the last score so we don't constantly construct a new string **/
+	private int lastScore = 0;
+	private int lastLives = 0;
+	private int lastWave = 0;
+
+	/** view and transform matrix for text rendering and transforming 3D objects **/
+	private final Matrix4 viewMatrix = new Matrix4();
+	private final Matrix4 transform = new Matrix4();
+	private final Matrix4 normal = new Matrix4();
+	private final Matrix3 normal3 = new Matrix3();
+
+	/** perspective camera **/
+	private PerspectiveCamera camera;
+
+	/** shaders **/
+	ShaderProgram texShader;
+	ShaderProgram colorShader;
+	ShaderProgram lightTexShader;
+
+	public RendererGL20 () {
+		try {
+			spriteBatch = new SpriteBatch();
+
+			texShader = new ShaderProgram(Gdx.files.internal("data/shaders/tex-vs.glsl"),
+				Gdx.files.internal("data/shaders/tex-fs.glsl"));
+			colorShader = new ShaderProgram(Gdx.files.internal("data/shaders/color-vs.glsl"),
+				Gdx.files.internal("data/shaders/color-fs.glsl"));
+			lightTexShader = new ShaderProgram(Gdx.files.internal("data/shaders/light-tex-vs.glsl"),
+				Gdx.files.internal("data/shaders/light-tex-fs.glsl"));
+
+			if (!texShader.isCompiled()) throw new GdxRuntimeException("Couldn't compile tex shader");
+			if (!colorShader.isCompiled()) throw new GdxRuntimeException("Couldn't compile color shader");
+			if (!lightTexShader.isCompiled()) throw new GdxRuntimeException("Couldn't compile light/tex shader");
+
+			shipMesh = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/ship.obj"));
+			invaderMesh = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/invader.obj"));
+			blockMesh = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/block.obj"));
+			shotMesh = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/shot.obj"));
+
+			shipTexture = new Texture(Gdx.files.internal("data/ship.png"), Format.RGB565, true);
+			shipTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
+			invaderTexture = new Texture(Gdx.files.internal("data/invader.png"), Format.RGB565, true);
+			invaderTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
+			backgroundTexture = new Texture(Gdx.files.internal("data/planet.jpg"), Format.RGB565, true);
+			backgroundTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
+			explosionTexture = new Texture(Gdx.files.internal("data/explode.png"), Format.RGBA4444, true);
+			explosionTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
+
+			explosionMesh = new Mesh(true, 4 * 16, 0, new VertexAttribute(Usage.Position, 3, "a_position"), new VertexAttribute(
+				Usage.TextureCoordinates, 2, "a_texCoord0"));
+
+			float[] vertices = new float[4 * 16 * (3 + 2)];
+			int idx = 0;
+			for (int row = 0; row < 4; row++) {
+				for (int column = 0; column < 4; column++) {
+					vertices[idx++] = 1;
+					vertices[idx++] = 1;
+					vertices[idx++] = 0;
+					vertices[idx++] = 0.25f + column * 0.25f;
+					vertices[idx++] = 0 + row * 0.25f;
+
+					vertices[idx++] = -1;
+					vertices[idx++] = 1;
+					vertices[idx++] = 0;
+					vertices[idx++] = 0 + column * 0.25f;
+					vertices[idx++] = 0 + row * 0.25f;
+
+					vertices[idx++] = -1;
+					vertices[idx++] = -1;
+					vertices[idx++] = 0;
+					vertices[idx++] = 0f + column * 0.25f;
+					vertices[idx++] = 0.25f + row * 0.25f;
+
+					vertices[idx++] = 1;
+					vertices[idx++] = -1;
+					vertices[idx++] = 0;
+					vertices[idx++] = 0.25f + column * 0.25f;
+					vertices[idx++] = 0.25f + row * 0.25f;
+				}
+			}
+
+			explosionMesh.setVertices(vertices);
+			font = new BitmapFont(Gdx.files.internal("data/font10.fnt"), Gdx.files.internal("data/font10.png"), false);
+
+			camera = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
+		} catch (Exception ex) {
+			ex.printStackTrace();
+		}
+	}
+
+	public void render (Simulation simulation, float delta) {
+		// We explicitly require GL10, otherwise we could've used the GLCommon
+		// interface via Gdx.gl
+		GLCommon gl = Gdx.gl;
+		gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
+		renderBackground();
+		gl.glEnable(GL10.GL_DEPTH_TEST);
+		gl.glEnable(GL10.GL_CULL_FACE);
+		setProjectionAndCamera(simulation.ship);
+		renderShip(simulation.ship);
+		renderInvaders(simulation.invaders);
+		renderBlocks(simulation.blocks);
+		renderShots(simulation.shots);
+		renderExplosions(simulation.explosions);
+		gl.glDisable(GL10.GL_CULL_FACE);
+		gl.glDisable(GL10.GL_DEPTH_TEST);
+
+		spriteBatch.setProjectionMatrix(viewMatrix);
+		spriteBatch.begin();
+		if (simulation.ship.lives != lastLives || simulation.score != lastScore || simulation.wave != lastWave) {
+			status = "lives: " + simulation.ship.lives + " wave: " + simulation.wave + " score: " + simulation.score;
+			lastLives = simulation.ship.lives;
+			lastScore = simulation.score;
+			lastWave = simulation.wave;
+		}
+		spriteBatch.enableBlending();
+		font.draw(spriteBatch, status, 0, 320);
+		spriteBatch.end();
+
+		invaderAngle += delta * 90;
+		if (invaderAngle > 360) invaderAngle -= 360;
+	}
+
+	private void renderBackground () {
+		viewMatrix.setToOrtho2D(0, 0, 400, 320);
+		spriteBatch.setProjectionMatrix(viewMatrix);
+		spriteBatch.begin();
+		spriteBatch.disableBlending();
+		spriteBatch.setColor(Color.WHITE);
+		spriteBatch.draw(backgroundTexture, 0, 0, 480, 320, 0, 0, 512, 512, false, false);
+		spriteBatch.end();
+	}
+
+	final Vector3 dir = new Vector3();
+
+	private void setProjectionAndCamera (Ship ship) {
+		camera.position.set(ship.position.x, 6, 2);
+		camera.direction.set(ship.position.x, 0, -4).sub(camera.position).nor();
+		camera.update();
+	}
+
+	private void renderShip (Ship ship) {
+		if (ship.isExploding) return;
+
+		shipTexture.bind();
+		lightTexShader.begin();
+		lightTexShader.setUniformi("u_diffuse", 0);
+		transform.set(camera.combined);
+		transform.translate(ship.position.x, ship.position.y, ship.position.z);
+		transform.rotate(0, 0, 1, 45 * (-Gdx.input.getAccelerometerY() / 5));
+		transform.rotate(0, 1, 0, 180);
+		lightTexShader.setUniformMatrix("u_projView", transform);
+		normal.idt();
+		normal.rotate(0, 1, 0, 180);
+		normal3.set(normal.toNormalMatrix());
+		lightTexShader.setUniformMatrix("u_normal", normal3);
+		shipMesh.render(lightTexShader);
+		lightTexShader.end();
+	}
+
+	private void renderInvaders (ArrayList<Invader> invaders) {
+		lightTexShader.begin();
+		normal.idt();
+		normal.rotate(0, 1, 0, invaderAngle);
+		normal3.set(normal.toNormalMatrix());
+		lightTexShader.setUniformMatrix("u_normal", normal3);
+		invaderTexture.bind();
+		for (int i = 0; i < invaders.size(); i++) {
+			Invader invader = invaders.get(i);
+			transform.set(camera.combined);
+			transform.translate(invader.position.x, invader.position.y, invader.position.z);
+			transform.rotate(0, 1, 0, invaderAngle);
+			lightTexShader.setUniformMatrix("u_projView", transform);
+			invaderMesh.render(lightTexShader);
+		}
+		lightTexShader.end();
+	}
+
+	private void renderBlocks (ArrayList<Block> blocks) {
+		Gdx.gl.glEnable(GL10.GL_BLEND);
+		Gdx.gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
+		colorShader.begin();
+		colorShader.setUniformf("u_color", 0, 0, 1, 0.5f);
+		for (int i = 0; i < blocks.size(); i++) {
+			Block block = blocks.get(i);
+			transform.set(camera.combined);
+			transform.translate(block.position.x, block.position.y, block.position.z);
+			colorShader.setUniformMatrix("u_projView", transform);
+			blockMesh.render(colorShader);
+		}
+		colorShader.end();
+		Gdx.gl.glDisable(GL10.GL_BLEND);
+	}
+
+	private void renderShots (ArrayList<Shot> shots) {
+		colorShader.begin();
+		colorShader.setUniformf("u_color", 1, 1, 0, 1f);
+		for (int i = 0; i < shots.size(); i++) {
+			Shot shot = shots.get(i);
+			transform.set(camera.combined);
+			transform.translate(shot.position.x, shot.position.y, shot.position.z);
+			colorShader.setUniformMatrix("u_projView", transform);
+			shotMesh.render(colorShader);
+		}
+		colorShader.end();
+	}
+
+	private void renderExplosions (ArrayList<Explosion> explosions) {
+		Gdx.gl.glEnable(GL10.GL_BLEND);
+		Gdx.gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
+		explosionTexture.bind();
+		texShader.begin();
+		texShader.setUniformi("u_diffuse", 0);
+		for (int i = 0; i < explosions.size(); i++) {
+			Explosion explosion = explosions.get(i);
+			transform.set(camera.combined);
+			transform.translate(explosion.position.x, explosion.position.y, explosion.position.z);
+			texShader.setUniformMatrix("u_projView", transform);
+			explosionMesh.render(texShader, GL10.GL_TRIANGLE_FAN,
+				(int)(explosion.aliveTime / Explosion.EXPLOSION_LIVE_TIME * 15) * 4, 4);
+		}
+		texShader.end();
+		Gdx.gl.glDisable(GL10.GL_BLEND);
+	}
+
+	public void dispose () {
+		spriteBatch.dispose();
+		shipTexture.dispose();
+		invaderTexture.dispose();
+		backgroundTexture.dispose();
+		explosionTexture.dispose();
+		font.dispose();
+		explosionMesh.dispose();
+		shipMesh.dispose();
+		invaderMesh.dispose();
+		shotMesh.dispose();
+		blockMesh.dispose();
+	}
+}
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameLoop.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameLoop.java
index a492bf0..489bee3 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameLoop.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/screens/GameLoop.java
@@ -22,6 +22,8 @@ import com.badlogic.gdx.controllers.ControllerListener;
 import com.badlogic.gdx.controllers.Controllers;
 import com.badlogic.gdx.controllers.mappings.Ouya;
 import com.badlogic.gdxinvaders.Renderer;
+import com.badlogic.gdxinvaders.RendererGL10;
+import com.badlogic.gdxinvaders.RendererGL20;
 import com.badlogic.gdxinvaders.simulation.Simulation;
 import com.badlogic.gdxinvaders.simulation.SimulationListener;
 
@@ -54,7 +56,7 @@ public class GameLoop extends InvadersScreen implements SimulationListener {
 	public GameLoop () {
 		simulation = new Simulation();
 		simulation.listener = this;
-		renderer = new Renderer();
+		renderer = Gdx.graphics.isGL20Available() ? new RendererGL20() : new RendererGL10();
 		explosion = Gdx.audio.newSound(Gdx.files.internal("data/explosion.wav"));
 		shot = Gdx.audio.newSound(Gdx.files.internal("data/shot.wav"));
 		
@@ -74,9 +76,7 @@ public class GameLoop extends InvadersScreen implements SimulationListener {
 		renderer.dispose();
 		shot.dispose();
 		explosion.dispose();
-		if (controller != null)
-			controller.removeListener(listener);
-		simulation.dispose();
+		controller.removeListener(listener);
 	}
 
 	@Override
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Block.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Block.java
index 129f474..3f4569b 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Block.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Block.java
@@ -13,14 +13,14 @@
 
 package com.badlogic.gdxinvaders.simulation;
 
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
 import com.badlogic.gdx.math.Vector3;
 
-public class Block extends ModelInstance {
+public class Block {
 	public final static float BLOCK_RADIUS = 0.5f;
 
-	public Block (Model model, float x, float y, float z) {
-		super(model, x,y,z);
+	public Vector3 position = new Vector3();
+
+	public Block (Vector3 position) {
+		this.position.set(position);
 	}
 }
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Explosion.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Explosion.java
index 490e336..9ab069d 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Explosion.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Explosion.java
@@ -13,31 +13,18 @@
 
 package com.badlogic.gdxinvaders.simulation;
 
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.g3d.Renderable;
 import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.Pool;
 
-public class Explosion extends ModelInstance {
+public class Explosion {
 	public static final float EXPLOSION_LIVE_TIME = 1;
 	public float aliveTime = 0;
+	public final Vector3 position = new Vector3();
 
-	public Explosion (Model model, Vector3 position) {
-		super(model, position);
+	public Explosion (Vector3 position) {
+		this.position.set(position);
 	}
 
 	public void update (float delta) {
 		aliveTime += delta;
 	}
-	
-	@Override
-	public void getRenderables (Array<Renderable> renderables, Pool<Renderable> pool) {
-		super.getRenderables(renderables, pool);
-		Renderable r = renderables.get(renderables.size-1);
-		r.meshPartOffset = 6 * (int)(15 * aliveTime / EXPLOSION_LIVE_TIME);
-		r.meshPartSize = 6;
-	}
 }
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Invader.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Invader.java
index d2c0c0b..c2c680d 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Invader.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Invader.java
@@ -13,12 +13,9 @@
 
 package com.badlogic.gdxinvaders.simulation;
 
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
 import com.badlogic.gdx.math.Vector3;
 
-public class Invader extends ModelInstance {
-	public static float INVADER_ROTATION = 45f;
+public class Invader {
 	public static float INVADER_RADIUS = 0.75f;
 	public static float INVADER_VELOCITY = 1;
 	public static int INVADER_POINTS = 40;
@@ -26,18 +23,19 @@ public class Invader extends ModelInstance {
 	public final static int STATE_MOVE_DOWN = 1;
 	public final static int STATE_MOVE_RIGHT = 2;
 
+	public final Vector3 position = new Vector3();
 	public int state = STATE_MOVE_LEFT;
 	public boolean wasLastStateLeft = true;
 	public float movedDistance = Simulation.PLAYFIELD_MAX_X / 2;;
 
-	public Invader (Model model, float x, float y, float z) {
-		super(model, x, y, z);
+	public Invader (Vector3 position) {
+		this.position.set(position);
 	}
 
 	public void update (float delta, float speedMultiplier) {
 		movedDistance += delta * INVADER_VELOCITY * speedMultiplier;
 		if (state == STATE_MOVE_LEFT) {
-			transform.trn(-delta * INVADER_VELOCITY * speedMultiplier, 0, 0);
+			position.x -= delta * INVADER_VELOCITY * speedMultiplier;
 			if (movedDistance > Simulation.PLAYFIELD_MAX_X) {
 				state = STATE_MOVE_DOWN;
 				movedDistance = 0;
@@ -45,7 +43,7 @@ public class Invader extends ModelInstance {
 			}
 		}
 		if (state == STATE_MOVE_RIGHT) {
-			transform.trn(delta * INVADER_VELOCITY * speedMultiplier, 0, 0);
+			position.x += delta * INVADER_VELOCITY * speedMultiplier;
 			if (movedDistance > Simulation.PLAYFIELD_MAX_X) {
 				state = STATE_MOVE_DOWN;
 				movedDistance = 0;
@@ -53,7 +51,7 @@ public class Invader extends ModelInstance {
 			}
 		}
 		if (state == STATE_MOVE_DOWN) {
-			transform.trn(0,0,delta * INVADER_VELOCITY * speedMultiplier);
+			position.z += delta * INVADER_VELOCITY * speedMultiplier;
 			if (movedDistance > 1) {
 				if (wasLastStateLeft)
 					state = STATE_MOVE_RIGHT;
@@ -62,6 +60,5 @@ public class Invader extends ModelInstance {
 				movedDistance = 0;
 			}
 		}
-		transform.rotate(0, 1, 0, INVADER_ROTATION * delta);
 	}
 }
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Ship.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Ship.java
index b963d53..0f5de76 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Ship.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Ship.java
@@ -13,20 +13,15 @@
 
 package com.badlogic.gdxinvaders.simulation;
 
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
 import com.badlogic.gdx.math.Vector3;
 
-public class Ship extends ModelInstance {
+public class Ship {
 	public static final float SHIP_RADIUS = 1;
 	public static final float SHIP_VELOCITY = 20;
+	public final Vector3 position = new Vector3(0, 0, 0);
 	public int lives = 3;
 	public boolean isExploding = false;
 	public float explodeTime = 0;
-	
-	public Ship(Model model) {
-		super(model);
-	}
 
 	public void update (float delta) {
 		if (isExploding) {
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Shot.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Shot.java
index 8c78ab2..6443831 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Shot.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Shot.java
@@ -13,30 +13,26 @@
 
 package com.badlogic.gdxinvaders.simulation;
 
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
 import com.badlogic.gdx.math.Vector3;
 
-public class Shot extends ModelInstance {
+public class Shot {
 	public static float SHOT_VELOCITY = 10;
+	public final Vector3 position = new Vector3();
 	public boolean isInvaderShot;
 	public boolean hasLeftField = false;
-	private final static Vector3 tmpV = new Vector3();
 
-	public Shot (Model model, Vector3 position, boolean isInvaderShot) {
-		super(model, position);
-		// this.position.set(position);
+	public Shot (Vector3 position, boolean isInvaderShot) {
+		this.position.set(position);
 		this.isInvaderShot = isInvaderShot;
 	}
 
 	public void update (float delta) {
 		if (isInvaderShot)
-			transform.trn(0, 0, SHOT_VELOCITY * delta);
+			position.z += SHOT_VELOCITY * delta;
 		else
-			transform.trn(0, 0, -SHOT_VELOCITY * delta);
+			position.z -= SHOT_VELOCITY * delta;
 
-		transform.getTranslation(tmpV);
-		if (tmpV.z > Simulation.PLAYFIELD_MAX_Z) hasLeftField = true;
-		if (tmpV.z < Simulation.PLAYFIELD_MIN_Z) hasLeftField = true;
+		if (position.z > Simulation.PLAYFIELD_MAX_Z) hasLeftField = true;
+		if (position.z < Simulation.PLAYFIELD_MIN_Z) hasLeftField = true;
 	}
 }
diff --git a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Simulation.java b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Simulation.java
index 480267c..e7f9fbd 100644
--- a/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Simulation.java
+++ b/demos/invaders/gdx-invaders/src/com/badlogic/gdxinvaders/simulation/Simulation.java
@@ -15,27 +15,9 @@ package com.badlogic.gdxinvaders.simulation;
 
 import java.util.ArrayList;
 
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.Pixmap.Format;
-import com.badlogic.gdx.graphics.Texture.TextureFilter;
-import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Light;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
-import com.badlogic.gdx.graphics.g3d.materials.BlendingAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
-import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
 import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.utils.Disposable;
 
-public class Simulation implements Disposable {
+public class Simulation {
 	public final static float PLAYFIELD_MIN_X = -14;
 	public final static float PLAYFIELD_MAX_X = 14;
 	public final static float PLAYFIELD_MIN_Z = -15;
@@ -52,110 +34,29 @@ public class Simulation implements Disposable {
 	public int score;
 	public int wave = 1;
 
-	public Model shipModel;
-	public Model invaderModel;
-	public Model blockModel;
-	public Model shotModel;
-	public Model explosionModel;
-	
 	private ArrayList<Shot> removedShots = new ArrayList<Shot>();
 	private ArrayList<Explosion> removedExplosions = new ArrayList<Explosion>();
-	
-	private final Vector3 tmpV1 = new Vector3();
-	private final Vector3 tmpV2 = new Vector3();
 
 	public Simulation () {
 		populate();
 	}
 
 	private void populate () {
-		ObjLoader objLoader = new ObjLoader();
-		shipModel = objLoader.loadObj(Gdx.files.internal("data/ship.obj"));
-		invaderModel = objLoader.loadObj(Gdx.files.internal("data/invader.obj"));
-		blockModel = objLoader.loadObj(Gdx.files.internal("data/block.obj"));
-		shotModel = objLoader.loadObj(Gdx.files.internal("data/shot.obj"));
-		
-		final Texture shipTexture = new Texture(Gdx.files.internal("data/ship.png"), Format.RGB565, true);
-		shipTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
-		final Texture invaderTexture = new Texture(Gdx.files.internal("data/invader.png"), Format.RGB565, true);
-		invaderTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
-		shipModel.materials.get(0).set(TextureAttribute.createDiffuse(shipTexture));
-		invaderModel.materials.get(0).set(TextureAttribute.createDiffuse(invaderTexture));
-		
-		((ColorAttribute)blockModel.materials.get(0).get(ColorAttribute.Diffuse)).color.set(0, 0, 1, 0.5f);
-		blockModel.materials.get(0).set(new BlendingAttribute(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA));
-		
-		shotModel.materials.get(0).set(ColorAttribute.createDiffuse(1, 1, 0, 1f));
-		
-		final Texture explosionTexture = new Texture(Gdx.files.internal("data/explode.png"), Format.RGBA4444, true);
-		explosionTexture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
-
-		final Mesh explosionMesh = new Mesh(true, 4 * 16, 6 * 16, new VertexAttribute(Usage.Position, 3, "a_position"), 
-			new VertexAttribute(Usage.TextureCoordinates, 2, "a_texCoord0"));
-
-		float[] vertices = new float[4 * 16 * (3 + 2)];
-		short[] indices = new short[6 * 16];
-		int idx = 0;
-		int index = 0;
-		for (int row = 0; row < 4; row++) {
-			for (int column = 0; column < 4; column++) {
-				vertices[idx++] = 1;
-				vertices[idx++] = 1;
-				vertices[idx++] = 0;
-				vertices[idx++] = 0.25f + column * 0.25f;
-				vertices[idx++] = 0 + row * 0.25f;
-
-				vertices[idx++] = -1;
-				vertices[idx++] = 1;
-				vertices[idx++] = 0;
-				vertices[idx++] = 0 + column * 0.25f;
-				vertices[idx++] = 0 + row * 0.25f;
-
-				vertices[idx++] = -1;
-				vertices[idx++] = -1;
-				vertices[idx++] = 0;
-				vertices[idx++] = 0f + column * 0.25f;
-				vertices[idx++] = 0.25f + row * 0.25f;
-
-				vertices[idx++] = 1;
-				vertices[idx++] = -1;
-				vertices[idx++] = 0;
-				vertices[idx++] = 0.25f + column * 0.25f;
-				vertices[idx++] = 0.25f + row * 0.25f;
-				
-				final int t = (4*row+column)*4;
-				indices[index++] = (short)(t);
-				indices[index++] = (short)(t+1);
-				indices[index++] = (short)(t+2);
-				indices[index++] = (short)(t);
-				indices[index++] = (short)(t+2);
-				indices[index++] = (short)(t+3);
-			}
-		}
-
-		explosionMesh.setVertices(vertices);
-		explosionMesh.setIndices(indices);
-		
-		explosionModel = ModelBuilder.createFromMesh(explosionMesh, GL10.GL_TRIANGLES, 
-			new Material(new BlendingAttribute(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA), 
-				TextureAttribute.createDiffuse(explosionTexture)));
-		
-		ship = new Ship(shipModel);
-		ship.transform.rotate(0, 1, 0, 180);
+		ship = new Ship();
 
 		for (int row = 0; row < 4; row++) {
 			for (int column = 0; column < 8; column++) {
-				Invader invader = new Invader(invaderModel, -PLAYFIELD_MAX_X / 2 + column * 2f, 0, PLAYFIELD_MIN_Z + row * 2f);
+				Invader invader = new Invader(new Vector3(-PLAYFIELD_MAX_X / 2 + column * 2f, 0, PLAYFIELD_MIN_Z + row * 2f));
 				invaders.add(invader);
 			}
 		}
 
 		for (int shield = 0; shield < 3; shield++) {
-			blocks.add(new Block(blockModel, -10 + shield * 10 - 1, 0, -2));
-			blocks.add(new Block(blockModel, -10 + shield * 10 - 1, 0, -3));
-			blocks.add(new Block(blockModel, -10 + shield * 10 + 0, 0, -3));
-			blocks.add(new Block(blockModel, -10 + shield * 10 + 1, 0, -3));
-			blocks.add(new Block(blockModel, -10 + shield * 10 + 1, 0, -2));
+			blocks.add(new Block(new Vector3(-10 + shield * 10 - 1, 0, -2)));
+			blocks.add(new Block(new Vector3(-10 + shield * 10 - 1, 0, -3)));
+			blocks.add(new Block(new Vector3(-10 + shield * 10 + 0, 0, -3)));
+			blocks.add(new Block(new Vector3(-10 + shield * 10 + 1, 0, -3)));
+			blocks.add(new Block(new Vector3(-10 + shield * 10 + 1, 0, -2)));
 		}
 	}
 
@@ -192,8 +93,7 @@ public class Simulation implements Disposable {
 
 		if (Math.random() < 0.01 * multiplier && invaders.size() > 0) {
 			int index = (int)(Math.random() * (invaders.size() - 1));
-			invaders.get(index).transform.getTranslation(tmpV1);
-			Shot shot = new Shot(shotModel, tmpV1, true);
+			Shot shot = new Shot(invaders.get(index).position, true);
 			shots.add(shot);
 			if (listener != null) listener.shot();
 		}
@@ -216,13 +116,11 @@ public class Simulation implements Disposable {
 
 		for (int j = 0; j < invaders.size(); j++) {
 			Invader invader = invaders.get(j);
-			invader.transform.getTranslation(tmpV1);
-			shipShot.transform.getTranslation(tmpV2);
-			if (tmpV1.dst(tmpV2) < Invader.INVADER_RADIUS) {
+			if (invader.position.dst(shipShot.position) < Invader.INVADER_RADIUS) {
 				shots.remove(shipShot);
 				shipShot = null;
 				invaders.remove(invader);
-				explosions.add(new Explosion(explosionModel, tmpV1));
+				explosions.add(new Explosion(invader.position));
 				if (listener != null) listener.explosion();
 				score += Invader.INVADER_POINTS;
 				break;
@@ -234,17 +132,16 @@ public class Simulation implements Disposable {
 		removedShots.clear();
 
 		if (!ship.isExploding) {
-			ship.transform.getTranslation(tmpV1);
 			for (int i = 0; i < shots.size(); i++) {
 				Shot shot = shots.get(i);
 				if (!shot.isInvaderShot) continue;
-				shot.transform.getTranslation(tmpV2);
-				if (tmpV1.dst(tmpV2) < Ship.SHIP_RADIUS) {
+
+				if (ship.position.dst(shot.position) < Ship.SHIP_RADIUS) {
 					removedShots.add(shot);
 					shot.hasLeftField = true;
 					ship.lives--;
 					ship.isExploding = true;
-					explosions.add(new Explosion(explosionModel, tmpV1));
+					explosions.add(new Explosion(ship.position));
 					if (listener != null) listener.explosion();
 					break;
 				}
@@ -254,16 +151,14 @@ public class Simulation implements Disposable {
 				shots.remove(removedShots.get(i));
 		}
 
-		ship.transform.getTranslation(tmpV2);
 		for (int i = 0; i < invaders.size(); i++) {
 			Invader invader = invaders.get(i);
-			invader.transform.getTranslation(tmpV1);
-			if (tmpV1.dst(tmpV2) < Ship.SHIP_RADIUS) {
+			if (invader.position.dst(ship.position) < Ship.SHIP_RADIUS) {
 				ship.lives--;
 				invaders.remove(invader);
 				ship.isExploding = true;
-				explosions.add(new Explosion(explosionModel, tmpV1));
-				explosions.add(new Explosion(explosionModel, tmpV2));
+				explosions.add(new Explosion(invader.position));
+				explosions.add(new Explosion(ship.position));
 				if (listener != null) listener.explosion();
 				break;
 			}
@@ -275,12 +170,10 @@ public class Simulation implements Disposable {
 
 		for (int i = 0; i < shots.size(); i++) {
 			Shot shot = shots.get(i);
-			shot.transform.getTranslation(tmpV2);
 
 			for (int j = 0; j < blocks.size(); j++) {
 				Block block = blocks.get(j);
-				block.transform.getTranslation(tmpV1);
-				if (tmpV1.dst(tmpV2) < Block.BLOCK_RADIUS) {
+				if (block.position.dst(shot.position) < Block.BLOCK_RADIUS) {
 					removedShots.add(shot);
 					shot.hasLeftField = true;
 					blocks.remove(block);
@@ -298,10 +191,10 @@ public class Simulation implements Disposable {
 			blocks.clear();
 			shots.clear();
 			shipShot = null;
-			ship.transform.getTranslation(tmpV1);
+			Vector3 shipPosition = ship.position;
 			int lives = ship.lives;
 			populate();
-			ship.transform.setToTranslation(tmpV1);
+			ship.position.set(shipPosition);
 			ship.lives = lives;
 			multiplier += 0.2f;
 			wave++;
@@ -311,34 +204,22 @@ public class Simulation implements Disposable {
 	public void moveShipLeft (float delta, float scale) {
 		if (ship.isExploding) return;
 
-		ship.transform.trn(-delta * Ship.SHIP_VELOCITY * scale, 0, 0);
-		ship.transform.getTranslation(tmpV1);
-		if (tmpV1.x < PLAYFIELD_MIN_X) ship.transform.trn(PLAYFIELD_MIN_X - tmpV1.x, 0,0);
+		ship.position.x -= delta * Ship.SHIP_VELOCITY * scale;
+		if (ship.position.x < PLAYFIELD_MIN_X) ship.position.x = PLAYFIELD_MIN_X;
 	}
 
 	public void moveShipRight (float delta, float scale) {
 		if (ship.isExploding) return;
 
-		ship.transform.trn(+delta * Ship.SHIP_VELOCITY * scale, 0, 0);
-		ship.transform.getTranslation(tmpV1);
-		if (tmpV1.x > PLAYFIELD_MAX_X) ship.transform.trn(tmpV1.x - PLAYFIELD_MAX_X, 0,0);
+		ship.position.x += delta * Ship.SHIP_VELOCITY * scale;
+		if (ship.position.x > PLAYFIELD_MAX_X) ship.position.x = PLAYFIELD_MAX_X;
 	}
 
 	public void shot () {
 		if (shipShot == null && !ship.isExploding) {
-			ship.transform.getTranslation(tmpV1);
-			shipShot = new Shot(shotModel, tmpV1, false);
+			shipShot = new Shot(ship.position, false);
 			shots.add(shipShot);
 			if (listener != null) listener.shot();
 		}
 	}
-
-	@Override
-	public void dispose () {
-		shipModel.dispose();
-		invaderModel.dispose();
-		blockModel.dispose();
-		shotModel.dispose();
-		explosionModel.dispose();
-	}
 }
diff --git a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/GameScreen.java b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/GameScreen.java
index 88d9cca..af62398 100755
--- a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/GameScreen.java
+++ b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/GameScreen.java
@@ -414,7 +414,7 @@ public class GameScreen extends DefaultScreen implements InputProcessor {
 	public Array<Vector2> generatePositions(int n) {
 		Array<Vector2> positions = new Array<Vector2>();
 		for (int i = 1; i <= n; ++i) {
-			positions.add(new Vector2(MathUtils.cos(i / n), MathUtils.sin(i / n)).mul(200));
+			positions.add(new Vector2(MathUtils.cos(i / n), MathUtils.sin(i / n)).scl(200));
 		}
 		return positions;
 	}
diff --git a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/Ship.java b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/Ship.java
index 8f658c1..7775095 100755
--- a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/Ship.java
+++ b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/Ship.java
@@ -66,9 +66,9 @@ public class Ship extends Sprite {
 		collisionPoints.get(2).set( this.getVertices()[10], this.getVertices()[11]);
 		collisionPoints.get(3).set( this.getVertices()[15], this.getVertices()[16]);
 		
-		collisionCenter.set(collisionPoints.get(2)).mul(0.5f).add(collisionPoints.get(0));
+		collisionCenter.set(collisionPoints.get(2)).scl(0.5f).add(collisionPoints.get(0));
 
-		velocity.mul( (float) Math.pow(0.97f, delta * 30.f));
+		velocity.scl( (float) Math.pow(0.97f, delta * 30.f));
 		position.add(velocity.x * delta, velocity.y * delta);
 		
 		this.setRotation(facing.angle());
@@ -114,7 +114,7 @@ public class Ship extends Sprite {
 	public void goTowardsOrAway(Vector2 targetPos, boolean forceThrust, boolean isAway) {
 		target_direction.set(targetPos).sub(collisionCenter);
 		if (isAway) {
-			target_direction.mul(-1);
+			target_direction.scl(-1);
 		}
 
 		if (facing.crs(target_direction) > 0) {
diff --git a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/background/Debris.java b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/background/Debris.java
index d47608c..810f87b 100755
--- a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/background/Debris.java
+++ b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/background/Debris.java
@@ -58,7 +58,7 @@ public class Debris extends Sprite {
 		since_alive += delta;
 
 		facing.rotate((SPEED + random_speed) * delta).nor();
-		position.add(facing.mul((SPEED + random_speed) * delta));
+		position.add(facing.scl((SPEED + random_speed) * delta));
 		this.setPosition(position.x, position.y);
 
 		if (since_alive < FADE_TIME) {
diff --git a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/bomber/Bomb.java b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/bomber/Bomb.java
index 662644a..7ad0821 100755
--- a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/bomber/Bomb.java
+++ b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/bomber/Bomb.java
@@ -10,7 +10,7 @@ public class Bomb extends Bullet {
 	public Bomb(int id, Vector2 position, Vector2 facing) {
 		super(id, position, facing);
 		bulletSpeed = 150;
-		this.velocity = new Vector2().set(facing).mul(bulletSpeed);
+		this.velocity = new Vector2().set(facing).scl(bulletSpeed);
 		damage = 300;
 		
 		this.set(Resources.getInstance().bomb);
diff --git a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/fighter/Laser.java b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/fighter/Laser.java
index c17c004..0405dd9 100755
--- a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/fighter/Laser.java
+++ b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/fighter/Laser.java
@@ -2,11 +2,9 @@ package de.swagner.paxbritannica.fighter;
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
-import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.math.Vector2;
 
 import de.swagner.paxbritannica.Bullet;
-import de.swagner.paxbritannica.GameInstance;
 import de.swagner.paxbritannica.Resources;
 
 public class Laser extends Bullet {
@@ -19,7 +17,7 @@ public class Laser extends Bullet {
 		bulletSpeed = 1000;
 		damage = 10;
 		
-		this.velocity = new Vector2().set(facing).mul(bulletSpeed);
+		this.velocity = new Vector2().set(facing).scl(bulletSpeed);
 		
 		this.set(Resources.getInstance().laser);
 		this.setOrigin(0,0);
@@ -28,7 +26,7 @@ public class Laser extends Bullet {
 	@Override
 	public void draw(SpriteBatch spriteBatch) {
 		delta = Math.min(0.06f, Gdx.graphics.getDeltaTime());
-		velocity.mul( (float) Math.pow(1.03f, delta * 30.f));
+		velocity.scl( (float) Math.pow(1.03f, delta * 30.f));
 		super.draw(spriteBatch);
 	}
 	
diff --git a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/frigate/FrigateAI.java b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/frigate/FrigateAI.java
index 6e594e6..253c5fd 100755
--- a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/frigate/FrigateAI.java
+++ b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/frigate/FrigateAI.java
@@ -33,7 +33,7 @@ public class FrigateAI {
 		if (target != null) {
 			Vector2 random = new Vector2(MathUtils.cos((float) ((MathUtils.random() * MathUtils.PI * 2) * Math.sqrt(MathUtils.random()))),
 										MathUtils.sin((float) ((MathUtils.random() * MathUtils.PI * 2) * Math.sqrt(MathUtils.random()))));
-			target_fuzzy_pos.set(target.collisionCenter).add(random.mul(250));
+			target_fuzzy_pos.set(target.collisionCenter).add(random.scl(250));
 		}
 	}
 
diff --git a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/frigate/Missile.java b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/frigate/Missile.java
index 03e7d32..edbf18d 100755
--- a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/frigate/Missile.java
+++ b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/frigate/Missile.java
@@ -15,7 +15,7 @@ public class Missile extends Bullet {
 		turnSpeed = 300f;
 		accel = 300.0f;	
 		bulletSpeed = 50;
-		this.velocity = new Vector2().set(facing).mul(bulletSpeed);
+		this.velocity = new Vector2().set(facing).scl(bulletSpeed);
 		damage = 50;
 		
 		this.set(Resources.getInstance().missile);
diff --git a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/frigate/MissileAI.java b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/frigate/MissileAI.java
index d517d6b..5c50e99 100755
--- a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/frigate/MissileAI.java
+++ b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/frigate/MissileAI.java
@@ -52,7 +52,7 @@ public class MissileAI {
 		toTarget.set(target.collisionCenter).sub(missile.collisionCenter);
 		if (missile.velocity.dot(toTarget) != 0) {
 			float time_to_target = toTarget.dot(toTarget) / relativeVel.dot(toTarget);
-			return new Vector2(target.collisionCenter).sub(relativeVel.mul(Math.max(0, time_to_target)));
+			return new Vector2(target.collisionCenter).sub(relativeVel.scl(Math.max(0, time_to_target)));
 		} else {
 			return target.collisionCenter;
 		}
diff --git a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/particlesystem/ExplosionParticleEmitter.java b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/particlesystem/ExplosionParticleEmitter.java
index 8c856d6..0df1915 100755
--- a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/particlesystem/ExplosionParticleEmitter.java
+++ b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/particlesystem/ExplosionParticleEmitter.java
@@ -29,17 +29,17 @@ public class ExplosionParticleEmitter extends ParticleEmitter {
 				(float) (MathUtils.sin(MathUtils.random() * MathUtils.PI * 2f) * Math.sqrt(MathUtils.random())));
 		for (int i = 1; i <= 20; ++i) {
 			Vector2 vel = new Vector2().set(random).add(random);
-			Vector2 velp = new Vector2().set(vel).mul(i / 20.f * 2.f);
-			Vector2 offset = new Vector2().set(random).mul(10);
+			Vector2 velp = new Vector2().set(vel).scl(i / 20.f * 2.f);
+			Vector2 offset = new Vector2().set(random).scl(10);
 			GameInstance.getInstance().sparkParticles.addLaserExplosion(new Vector2(position.x + offset.x, position.y + offset.y), velp);
 		}
 		for (int i = 1; i <= 5; ++i) {
-			Vector2 vel = new Vector2(MathUtils.random() * 2 - 1, MathUtils.random() * 2 - 1).mul(4);
-			Vector2 offset = new Vector2().set(random).mul(3);
+			Vector2 vel = new Vector2(MathUtils.random() * 2 - 1, MathUtils.random() * 2 - 1).scl(4);
+			Vector2 offset = new Vector2().set(random).scl(3);
 			GameInstance.getInstance().sparkParticles.addLaserExplosion(new Vector2(position.x + offset.x, position.y + offset.y), vel);
 		}
 		for (int i = 1; i <= 50; ++i) {
-			Vector2 offset = new Vector2().set(random).mul(17);
+			Vector2 offset = new Vector2().set(random).scl(17);
 			GameInstance.getInstance().bigBubbleParticles.addParticle(new Vector2(position.x + offset.x, position.y + offset.y));
 		}
 	}
@@ -51,17 +51,17 @@ public class ExplosionParticleEmitter extends ParticleEmitter {
 				(float) (MathUtils.sin(MathUtils.random() * MathUtils.PI * 2f) * Math.sqrt(MathUtils.random())));
 		for (int i = 1; i <= 10; ++i) {
 			Vector2 vel = new Vector2().set(random).add(random);
-			Vector2 velp = new Vector2().set(vel).mul(i / 20.f * 2.f);
-			Vector2 offset = new Vector2().set(random).mul(10);
+			Vector2 velp = new Vector2().set(vel).scl(i / 20.f * 2.f);
+			Vector2 offset = new Vector2().set(random).scl(10);
 			GameInstance.getInstance().sparkParticles.addLaserExplosion(new Vector2(position.x + offset.x, position.y + offset.y), velp);
 		}
 		for (int i = 1; i <= 3; ++i) {
-			Vector2 vel = new Vector2(MathUtils.random() * 2 - 1, MathUtils.random() * 2 - 1).mul(3);
-			Vector2 offset = new Vector2().set(random).mul(3);
+			Vector2 vel = new Vector2(MathUtils.random() * 2 - 1, MathUtils.random() * 2 - 1).scl(3);
+			Vector2 offset = new Vector2().set(random).scl(3);
 			GameInstance.getInstance().sparkParticles.addLaserExplosion(new Vector2(position.x + offset.x, position.y + offset.y), vel);
 		}
 		for (int i = 1; i <= 20; ++i) {
-			Vector2 offset = new Vector2().set(random).mul(2);
+			Vector2 offset = new Vector2().set(random).scl(2);
 			GameInstance.getInstance().bigBubbleParticles.addParticle(new Vector2(position.x + offset.x, position.y + offset.y));
 		}
 	}
@@ -73,17 +73,17 @@ public class ExplosionParticleEmitter extends ParticleEmitter {
 				(float) (MathUtils.sin(MathUtils.random() * MathUtils.PI * 2f) * Math.sqrt(MathUtils.random())));
 		for (int i = 1; i <= 2; ++i) {
 			Vector2 vel = new Vector2().set(random).add(random);
-			Vector2 velp = new Vector2().set(vel).mul(i / 20.f * 2.f);
-			Vector2 offset = new Vector2().set(random).mul(10);
+			Vector2 velp = new Vector2().set(vel).scl(i / 20.f * 2.f);
+			Vector2 offset = new Vector2().set(random).scl(10);
 			GameInstance.getInstance().sparkParticles.addLaserExplosion(new Vector2(position.x + offset.x, position.y + offset.y), velp);
 		}
 		for (int i = 1; i <= 2; ++i) {
-			Vector2 vel = new Vector2(MathUtils.random() * 2 - 1, MathUtils.random() * 2 - 1).mul(2);
-			Vector2 offset = new Vector2().set(random).mul(3);
+			Vector2 vel = new Vector2(MathUtils.random() * 2 - 1, MathUtils.random() * 2 - 1).scl(2);
+			Vector2 offset = new Vector2().set(random).scl(3);
 			GameInstance.getInstance().sparkParticles.addLaserExplosion(new Vector2(position.x + offset.x, position.y + offset.y), vel);
 		}
 		for (int i = 1; i <= 10; ++i) {
-			Vector2 offset = new Vector2().set(random).mul(2);
+			Vector2 offset = new Vector2().set(random).scl(2);
 			GameInstance.getInstance().bigBubbleParticles.addParticle(new Vector2(position.x + offset.x, position.y + offset.y));
 		}
 	}
@@ -95,17 +95,17 @@ public class ExplosionParticleEmitter extends ParticleEmitter {
 				(float) (MathUtils.sin(MathUtils.random() * MathUtils.PI * 2f) * Math.sqrt(MathUtils.random())));
 		for (int i = 1; i <= 1; ++i) {
 			Vector2 vel = new Vector2().set(random).add(random);
-			Vector2 velp = new Vector2().set(vel).mul(i / 20.f * 2.f);
-			Vector2 offset = new Vector2().set(random).mul(10);
+			Vector2 velp = new Vector2().set(vel).scl(i / 20.f * 2.f);
+			Vector2 offset = new Vector2().set(random).scl(10);
 			GameInstance.getInstance().sparkParticles.addLaserExplosion(new Vector2(position.x + offset.x, position.y + offset.y), velp);
 		}
 		for (int i = 1; i <= 1; ++i) {
 			Vector2 vel = new Vector2(MathUtils.random() * 2 - 1, MathUtils.random() * 2 - 1);
-			Vector2 offset = new Vector2().set(random).mul(3);
+			Vector2 offset = new Vector2().set(random).scl(3);
 			GameInstance.getInstance().sparkParticles.addLaserExplosion(new Vector2(position.x + offset.x, position.y + offset.y), vel);
 		}
 		for (int i = 1; i <= 5; ++i) {
-			Vector2 offset = new Vector2().set(random).mul(17);
+			Vector2 offset = new Vector2().set(random).scl(17);
 			GameInstance.getInstance().bigBubbleParticles.addParticle(new Vector2(position.x + offset.x, position.y + offset.y));
 		}
 	}
diff --git a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/particlesystem/ParticleEmitter.java b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/particlesystem/ParticleEmitter.java
index 1bd578a..52aed07 100755
--- a/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/particlesystem/ParticleEmitter.java
+++ b/demos/pax-britannica/pax-britannica/src/de/swagner/paxbritannica/particlesystem/ParticleEmitter.java
@@ -59,7 +59,7 @@ public class ParticleEmitter extends Sprite {
 		if (particle.life > 0) {
 			particle.life -= delta;
 			particle.position.add(particle.velocity.x * delta*10,particle.velocity.y * delta*10);
-			particle.velocity.mul((float) Math.pow(damping, delta));
+			particle.velocity.scl((float) Math.pow(damping, delta));
 			particle.scale += this.delta_scale * delta/5f;
 		}
 	}
diff --git a/demos/very-angry-robots/very-angry-robots/src/com/badlydrawngames/veryangryrobots/WorldView.java b/demos/very-angry-robots/very-angry-robots/src/com/badlydrawngames/veryangryrobots/WorldView.java
index f516787..f64b7fd 100644
--- a/demos/very-angry-robots/very-angry-robots/src/com/badlydrawngames/veryangryrobots/WorldView.java
+++ b/demos/very-angry-robots/very-angry-robots/src/com/badlydrawngames/veryangryrobots/WorldView.java
@@ -433,7 +433,7 @@ public class WorldView {
 			worldCam.unproject(dragPoint.set(Gdx.input.getX(), Gdx.input.getY(), 0));
 			float dx = dragPoint.x - touchPoint.x;
 			float dy = dragPoint.y - touchPoint.y;
-			joystick.set(dx, dy).mul(JOYSTICK_DISTANCE_MULTIPLIER);
+			joystick.set(dx, dy).scl(JOYSTICK_DISTANCE_MULTIPLIER);
 			float len = joystick.len();
 			if (len > 1) {
 				joystick.nor();
diff --git a/extensions/gdx-bullet/jni/build-ios32.xml b/extensions/gdx-bullet/jni/build-ios32.xml
index 634fbd5..9e9a83a 100755
--- a/extensions/gdx-bullet/jni/build-ios32.xml
+++ b/extensions/gdx-bullet/jni/build-ios32.xml
@@ -12,9 +12,9 @@
 	<!-- the compilerPrefix for the C & C++ compilers -->
 	<property name="compilerPrefix" value=""/>	
 	<property name="iphoneos-platform" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin"/>
-	<property name="iphoneos-sdk" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.0.sdk/"/>
+	<property name="iphoneos-sdk" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk/"/>
 	<property name="iphonesimulator-platform" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin"/>
-	<property name="iphonesimulator-sdk" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.0.sdk/"/>
+	<property name="iphonesimulator-sdk" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.1.sdk/"/>
 	
 	<!-- define gcc compiler, options and files to compile -->
 	<property name="gcc" value="${compilerPrefix}gcc"/>	
diff --git a/extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBvhTriangleMeshShape.java b/extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBvhTriangleMeshShape.java
index ab235e2..148b824 100755
--- a/extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBvhTriangleMeshShape.java
+++ b/extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btBvhTriangleMeshShape.java
@@ -100,31 +100,31 @@ public class btBvhTriangleMeshShape extends btTriangleMeshShape {
 		this(true, new btTriangleIndexVertexArray(meshes), useQuantizedAabbCompression, bvhAabbMin, bvhAabbMax);
 	}
 	
-	/** Construct a new btBvhTriangleMeshShape based one or more supplied {@link com.badlogic.gdx.graphics.g3d.Model} instances.
+	/** Construct a new btBvhTriangleMeshShape based one or more supplied {@link com.badlogic.gdx.graphics.g3d.model.Model} instances.
 	 * Only the triangulated submeshes are added, which must be indexed. The model must outlive this btTriangleIndexVertexArray.
      * The buffers for the vertices and indices are shared amonst both. */
-	public btBvhTriangleMeshShape(boolean useQuantizedAabbCompression, final com.badlogic.gdx.graphics.g3d.Model... models) {
+	public btBvhTriangleMeshShape(boolean useQuantizedAabbCompression, final com.badlogic.gdx.graphics.g3d.model.Model... models) {
 		this(true, new btTriangleIndexVertexArray(models), useQuantizedAabbCompression);
 	}
 	
-	/** Construct a new btBvhTriangleMeshShape based one or more supplied {@link com.badlogic.gdx.graphics.g3d.Model} instances.
+	/** Construct a new btBvhTriangleMeshShape based one or more supplied {@link com.badlogic.gdx.graphics.g3d.model.Model} instances.
 	 * Only the triangulated submeshes are added, which must be indexed. The model must outlive this btTriangleIndexVertexArray.
      * The buffers for the vertices and indices are shared amonst both. */
-	public btBvhTriangleMeshShape(boolean useQuantizedAabbCompression, boolean buildBvh, final com.badlogic.gdx.graphics.g3d.Model... models) {
+	public btBvhTriangleMeshShape(boolean useQuantizedAabbCompression, boolean buildBvh, final com.badlogic.gdx.graphics.g3d.model.Model... models) {
 		this(true, new btTriangleIndexVertexArray(models), useQuantizedAabbCompression, buildBvh);
 	}
 	
-	/** Construct a new btBvhTriangleMeshShape based one or more supplied {@link com.badlogic.gdx.graphics.g3d.Model} instances.
+	/** Construct a new btBvhTriangleMeshShape based one or more supplied {@link com.badlogic.gdx.graphics.g3d.model.Model} instances.
 	 * Only the triangulated submeshes are added, which must be indexed. The model must outlive this btTriangleIndexVertexArray.
 	 * The buffers for the vertices and indices are shared amonst both. */
-	public btBvhTriangleMeshShape(boolean useQuantizedAabbCompression, Vector3 bvhAabbMin, Vector3 bvhAabbMax, boolean buildBvh, final com.badlogic.gdx.graphics.g3d.Model... models) {
+	public btBvhTriangleMeshShape(boolean useQuantizedAabbCompression, Vector3 bvhAabbMin, Vector3 bvhAabbMax, boolean buildBvh, final com.badlogic.gdx.graphics.g3d.model.Model... models) {
 		this(true, new btTriangleIndexVertexArray(models), useQuantizedAabbCompression, bvhAabbMin, bvhAabbMax, buildBvh);
 	}
 	
-	/** Construct a new btBvhTriangleMeshShape based one or more supplied {@link com.badlogic.gdx.graphics.g3d.Model} instances.
+	/** Construct a new btBvhTriangleMeshShape based one or more supplied {@link com.badlogic.gdx.graphics.g3d.model.Model} instances.
 	 * Only the triangulated submeshes are added, which must be indexed. The model must outlive this btTriangleIndexVertexArray.
      * The buffers for the vertices and indices are shared amonst both. */
-	public btBvhTriangleMeshShape(boolean useQuantizedAabbCompression, Vector3 bvhAabbMin, Vector3 bvhAabbMax, final com.badlogic.gdx.graphics.g3d.Model... models) {
+	public btBvhTriangleMeshShape(boolean useQuantizedAabbCompression, Vector3 bvhAabbMin, Vector3 bvhAabbMax, final com.badlogic.gdx.graphics.g3d.model.Model... models) {
 		this(true, new btTriangleIndexVertexArray(models), useQuantizedAabbCompression, bvhAabbMin, bvhAabbMax);
 	}
 		
diff --git a/extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btIndexedMesh.java b/extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btIndexedMesh.java
index 1710e24..9bd08fa 100755
--- a/extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btIndexedMesh.java
+++ b/extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btIndexedMesh.java
@@ -47,45 +47,27 @@ public class btIndexedMesh {
 		set(mesh);
 	}
 	
-	/** Construct a new btIndexedMesh based on the supplied {@link Mesh}
-	 * The specified mesh must be indexed and triangulated and must outlive this btIndexedMesh.
-	 * The buffers for the vertices and indices are shared amonst both. */
-	public btIndexedMesh(final Mesh mesh, int offset, int count) {
-		this();
-		set(mesh, offset, count);
-	}
-	
 	/** Convenience method to set this btIndexedMesh to the specified {@link Mesh} 
 	 * The specified mesh must be indexed and triangulated and must outlive this btIndexedMesh.
 	 * The buffers for the vertices and indices are shared amonst both. */
 	public void set(final Mesh mesh) {
-		set(mesh, 0, mesh.getNumIndices());
-	}
-
-	/** Convenience method to set this btIndexedMesh to the specified {@link Mesh} 
-	 * The specified mesh must be indexed and triangulated and must outlive this btIndexedMesh.
-	 * The buffers for the vertices and indices are shared amonst both. */
-	public void set(final Mesh mesh, int offset, int count) {
-		if ((count <= 0) || ((count % 3) != 0))
+		final int numIndices = mesh.getNumIndices();
+		if ((numIndices <= 0) || ((numIndices % 3) != 0))
 			throw new com.badlogic.gdx.utils.GdxRuntimeException("Mesh must be indexed and triangulated");
 		java.nio.FloatBuffer buf = mesh.getVerticesBuffer();
-		java.nio.ShortBuffer ind = mesh.getIndicesBuffer();
 		VertexAttribute posAttr = mesh.getVertexAttribute(Usage.Position);
 		if (posAttr == null)
 			throw new com.badlogic.gdx.utils.GdxRuntimeException("Mesh doesn't have a position attribute");
 		final int pos = buf.position();
 		buf.position(posAttr.offset);
 		setM_indexType(PHY_ScalarType.PHY_SHORT);
-		setM_numTriangles(count/3);
+		setM_numTriangles(numIndices/3);
 		setM_numVertices(mesh.getNumVertices());
 		setM_triangleIndexStride(6);
 		setM_vertexStride(mesh.getVertexSize());
 		setM_vertexType(PHY_ScalarType.PHY_FLOAT);
-		final int ipos = ind.position();
-		ind.position(offset);
-		setTriangleIndexBase(ind);
+		setTriangleIndexBase(mesh.getIndicesBuffer());
 		setVertexBase(buf);
-		ind.position(ipos);
 		buf.position(pos);
 	}
 
diff --git a/extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTriangleIndexVertexArray.java b/extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTriangleIndexVertexArray.java
index f504138..e5b5c54 100755
--- a/extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTriangleIndexVertexArray.java
+++ b/extensions/gdx-bullet/jni/swig-src/com/badlogic/gdx/physics/bullet/btTriangleIndexVertexArray.java
@@ -52,10 +52,10 @@ public class btTriangleIndexVertexArray extends btStridingMeshInterface {
 		addMesh(meshes);
 	}
 	
-	/** Construct a new btTriangleIndexVertexArray based on one or more {@link com.badlogic.gdx.graphics.g3d.Model} instances.
+	/** Construct a new btTriangleIndexVertexArray based on one or more {@link com.badlogic.gdx.graphics.g3d.model.Model} instances.
 	 * Only the triangulated submeshes are added, which must be indexed. The model must outlive this btTriangleIndexVertexArray.
      * The buffers for the vertices and indices are shared amongst both. */
-	public btTriangleIndexVertexArray(final com.badlogic.gdx.graphics.g3d.Model... models) {
+	public btTriangleIndexVertexArray(final com.badlogic.gdx.graphics.g3d.model.Model... models) {
 		this();
 		addModel(models);
 	}
@@ -68,16 +68,15 @@ public class btTriangleIndexVertexArray extends btStridingMeshInterface {
 			addIndexedMesh(new btIndexedMesh(meshes[i]), PHY_ScalarType.PHY_SHORT, true);
 	}
 	
-	/** Add one or more {@link com.badlogic.gdx.graphics.g3d.Model} instances to this btTriangleIndexVertexArray.
+	/** Add one or more {@link com.badlogic.gdx.graphics.g3d.model.Model} instances to this btTriangleIndexVertexArray.
 	 * Only the triangulated submeshes are added, which must be indexed. The model must outlive this btTriangleIndexVertexArray.
      * The buffers for the vertices and indices are shared amongst both. */
-	public void addModel(final com.badlogic.gdx.graphics.g3d.Model... models) {
+	public void addModel(final com.badlogic.gdx.graphics.g3d.model.Model... models) {
 		for (int i = 0; i < models.length; i++) {
-			for (int j = 0; j < models[i].meshParts.size; j++) {
-				com.badlogic.gdx.graphics.g3d.model.MeshPart mp = models[i].meshParts.get(j);
-				if (mp.primitiveType == com.badlogic.gdx.graphics.GL10.GL_TRIANGLES)
-					addIndexedMesh(new btIndexedMesh(mp.mesh, mp.indexOffset, mp.numVertices), PHY_ScalarType.PHY_SHORT, true);
-			}
+			final com.badlogic.gdx.graphics.g3d.model.SubMesh[] subMeshes = models[i].getSubMeshes();
+			for (int j = 0; j < subMeshes.length; j++)
+				if (subMeshes[j].primitiveType == com.badlogic.gdx.graphics.GL10.GL_TRIANGLES)
+					addIndexedMesh(new btIndexedMesh(subMeshes[j].getMesh()), PHY_ScalarType.PHY_SHORT, true);
 		}
 	}
 	
diff --git a/extensions/gdx-bullet/jni/swig/custom/btTriangleIndexVertexArray.i b/extensions/gdx-bullet/jni/swig/custom/btTriangleIndexVertexArray.i
index 3f8123a..40964a5 100644
--- a/extensions/gdx-bullet/jni/swig/custom/btTriangleIndexVertexArray.i
+++ b/extensions/gdx-bullet/jni/swig/custom/btTriangleIndexVertexArray.i
@@ -31,45 +31,27 @@ import com.badlogic.gdx.graphics.VertexAttributes.Usage;
 		set(mesh);
 	}
 	
-	/** Construct a new btIndexedMesh based on the supplied {@link Mesh}
-	 * The specified mesh must be indexed and triangulated and must outlive this btIndexedMesh.
-	 * The buffers for the vertices and indices are shared amonst both. */
-	public btIndexedMesh(final Mesh mesh, int offset, int count) {
-		this();
-		set(mesh, offset, count);
-	}
-	
 	/** Convenience method to set this btIndexedMesh to the specified {@link Mesh} 
 	 * The specified mesh must be indexed and triangulated and must outlive this btIndexedMesh.
 	 * The buffers for the vertices and indices are shared amonst both. */
 	public void set(final Mesh mesh) {
-		set(mesh, 0, mesh.getNumIndices());
-	}
-
-	/** Convenience method to set this btIndexedMesh to the specified {@link Mesh} 
-	 * The specified mesh must be indexed and triangulated and must outlive this btIndexedMesh.
-	 * The buffers for the vertices and indices are shared amonst both. */
-	public void set(final Mesh mesh, int offset, int count) {
-		if ((count <= 0) || ((count % 3) != 0))
+		final int numIndices = mesh.getNumIndices();
+		if ((numIndices <= 0) || ((numIndices % 3) != 0))
 			throw new com.badlogic.gdx.utils.GdxRuntimeException("Mesh must be indexed and triangulated");
 		java.nio.FloatBuffer buf = mesh.getVerticesBuffer();
-		java.nio.ShortBuffer ind = mesh.getIndicesBuffer();
 		VertexAttribute posAttr = mesh.getVertexAttribute(Usage.Position);
 		if (posAttr == null)
 			throw new com.badlogic.gdx.utils.GdxRuntimeException("Mesh doesn't have a position attribute");
 		final int pos = buf.position();
 		buf.position(posAttr.offset);
 		setM_indexType(PHY_ScalarType.PHY_SHORT);
-		setM_numTriangles(count/3);
+		setM_numTriangles(numIndices/3);
 		setM_numVertices(mesh.getNumVertices());
 		setM_triangleIndexStride(6);
 		setM_vertexStride(mesh.getVertexSize());
 		setM_vertexType(PHY_ScalarType.PHY_FLOAT);
-		final int ipos = ind.position();
-		ind.position(offset);
-		setTriangleIndexBase(ind);
+		setTriangleIndexBase(mesh.getIndicesBuffer());
 		setVertexBase(buf);
-		ind.position(ipos);
 		buf.position(pos);
 	}
 %}
@@ -106,11 +88,10 @@ import com.badlogic.gdx.graphics.VertexAttributes.Usage;
      * The buffers for the vertices and indices are shared amongst both. */
 	public void addModel(final com.badlogic.gdx.graphics.g3d.model.Model... models) {
 		for (int i = 0; i < models.length; i++) {
-			for (int j = 0; j < models[i].meshParts.size; j++) {
-				com.badlogic.gdx.graphics.g3d.model.MeshPart mp = models[i].meshParts.get(j);
-				if (mp.primitiveType == com.badlogic.gdx.graphics.GL10.GL_TRIANGLES)
-					addIndexedMesh(new btIndexedMesh(mp.mesh, mp.indexOffset, mp.numVertices), PHY_ScalarType.PHY_SHORT, true);
-			}
+			final com.badlogic.gdx.graphics.g3d.model.SubMesh[] subMeshes = models[i].getSubMeshes();
+			for (int j = 0; j < subMeshes.length; j++)
+				if (subMeshes[j].primitiveType == com.badlogic.gdx.graphics.GL10.GL_TRIANGLES)
+					addIndexedMesh(new btIndexedMesh(subMeshes[j].getMesh()), PHY_ScalarType.PHY_SHORT, true);
 		}
 	}
 	
diff --git a/extensions/gdx-freetype/jni/build-android32.xml b/extensions/gdx-freetype/jni/build-android32.xml
index 1338649..4487f92 100644
--- a/extensions/gdx-freetype/jni/build-android32.xml
+++ b/extensions/gdx-freetype/jni/build-android32.xml
@@ -1,8 +1,10 @@
 <project name="android-natives" basedir="." default="postcompile">
 	<property environment="env" />
+	<!--  the suffix ndk-build executable -->	
+	<property name="ndkSuffix" value="" />
 
 	<target name="clean" depends="check-for-ndk" if="has-ndk-build">
-		<exec executable="${env.NDK_HOME}/ndk-build" failonerror="true">
+		<exec executable="${env.NDK_HOME}/ndk-build${ndkSuffix}" failonerror="true">
 			<arg value="clean"/>
 		</exec>
 	</target>
@@ -13,7 +15,7 @@
 
 	<target name="compile-natives" depends="precompile" if="has-ndk-build">
 		<echo>ndk_home: ${env.NDK_HOME}</echo>
-		<exec executable="${env.NDK_HOME}/ndk-build" failonerror="true"/>
+		<exec executable="${env.NDK_HOME}/ndk-build${ndkSuffix}" failonerror="true"/>
 	</target>
 	
 	<target name="postcompile" depends="compile-natives">
@@ -22,7 +24,7 @@
 
 	<target name="check-for-ndk">
 		<condition property="ndk-build-found">
-			<available file="ndk-build" filepath="${env.NDK_HOME}"/>
+			<available file="ndk-build${ndkSuffix}" filepath="${env.NDK_HOME}"/>
 		</condition>
 		<condition property="has-ndk-build">
 			<equals arg1="${ndk-build-found}" arg2="true"/>
diff --git a/extensions/gdx-freetype/jni/build-ios32.xml b/extensions/gdx-freetype/jni/build-ios32.xml
index 5587e2c..cc35345 100755
--- a/extensions/gdx-freetype/jni/build-ios32.xml
+++ b/extensions/gdx-freetype/jni/build-ios32.xml
@@ -12,9 +12,9 @@
 	<!-- the compilerPrefix for the C & C++ compilers -->
 	<property name="compilerPrefix" value=""/>	
 	<property name="iphoneos-platform" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin"/>
-	<property name="iphoneos-sdk" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.0.sdk/"/>
+	<property name="iphoneos-sdk" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk/"/>
 	<property name="iphonesimulator-platform" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin"/>
-	<property name="iphonesimulator-sdk" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.0.sdk/"/>
+	<property name="iphonesimulator-sdk" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.1.sdk/"/>
 	
 	<!-- define gcc compiler, options and files to compile -->
 	<property name="gcc" value="${compilerPrefix}gcc"/>	
diff --git a/extensions/gdx-freetype/jni/build-linux32.xml b/extensions/gdx-freetype/jni/build-linux32.xml
index 9d4c8e8..18fcf43 100644
--- a/extensions/gdx-freetype/jni/build-linux32.xml
+++ b/extensions/gdx-freetype/jni/build-linux32.xml
@@ -10,10 +10,12 @@
 	<!-- the jni header jniPlatform to use -->
 	<property name="jniPlatform" value="linux"/>
 	<!-- the compilerPrefix for the C & C++ compilers -->
-	<property name="compilerPrefix" value=""/>	
+	<property name="compilerPrefix" value=""/>
+	<!--  the compilerSuffix for the C & C++ compilers -->	
+	<property name="compilerSuffix" value="" />	
 	
 	<!-- define gcc compiler, options and files to compile -->
-	<property name="gcc" value="${compilerPrefix}gcc"/>	
+	<property name="gcc" value="${compilerPrefix}gcc${compilerSuffix}"/>	
 	<property name="gcc-opts" value="-c -Wall -O2 -mfpmath=sse -msse -fmessage-length=0 -m32 -fPIC -std=c99 -DFT2_BUILD_LIBRARY"/>
 	<fileset id="gcc-files" dir="./">
 		<exclude name="target/"/>		
@@ -67,7 +69,7 @@
 	</fileset>
 	
 	<!-- define g++ compiler, options and files to compile -->
-	<property name="g++" value="${compilerPrefix}g++"/>
+	<property name="g++" value="${compilerPrefix}g++${compilerSuffix}"/>
 	<property name="g++-opts" value="-c -Wall -O2 -mfpmath=sse -msse -fmessage-length=0 -m32 -fPIC -std=c99 -DFT2_BUILD_LIBRARY"/>
 	<fileset id="g++-files" dir="./">
 		<exclude name="target/"/>
@@ -77,7 +79,7 @@
 	</fileset>
 
 	<!-- define linker and options -->
-	<property name="linker" value="${compilerPrefix}g++"/>
+	<property name="linker" value="${compilerPrefix}g++${compilerSuffix}"/>
 	<property name="linker-opts" value="-shared -m32"/>
 	<property name="libraries" value=""/>
 	
@@ -155,7 +157,8 @@
 			<targetfile/>
 			<fileset refid="gcc-files"/>
 			<compositemapper>
-				<mapper type="glob" from="*.c" to="*.o"/>
+				<mapper type="glob" from="*.c" to="*.o"/>
+				<mapper type="glob" from="*.m" to="*.o"/>
 			</compositemapper>
 		</apply>
 	</target>	
diff --git a/extensions/gdx-freetype/jni/build-linux64.xml b/extensions/gdx-freetype/jni/build-linux64.xml
index cc39238..0c6ddf0 100644
--- a/extensions/gdx-freetype/jni/build-linux64.xml
+++ b/extensions/gdx-freetype/jni/build-linux64.xml
@@ -10,10 +10,12 @@
 	<!-- the jni header jniPlatform to use -->
 	<property name="jniPlatform" value="linux"/>
 	<!-- the compilerPrefix for the C & C++ compilers -->
-	<property name="compilerPrefix" value=""/>	
+	<property name="compilerPrefix" value=""/>
+	<!--  the compilerSuffix for the C & C++ compilers -->	
+	<property name="compilerSuffix" value="" />	
 	
 	<!-- define gcc compiler, options and files to compile -->
-	<property name="gcc" value="${compilerPrefix}gcc"/>	
+	<property name="gcc" value="${compilerPrefix}gcc${compilerSuffix}"/>	
 	<property name="gcc-opts" value="-c -Wall -O2 -mfpmath=sse -msse -fmessage-length=0 -m64 -fPIC -std=c99 -DFT2_BUILD_LIBRARY"/>
 	<fileset id="gcc-files" dir="./">
 		<exclude name="target/"/>		
@@ -67,7 +69,7 @@
 	</fileset>
 	
 	<!-- define g++ compiler, options and files to compile -->
-	<property name="g++" value="${compilerPrefix}g++"/>
+	<property name="g++" value="${compilerPrefix}g++${compilerSuffix}"/>
 	<property name="g++-opts" value="-c -Wall -O2 -mfpmath=sse -msse -fmessage-length=0 -m64 -fPIC -std=c99 -DFT2_BUILD_LIBRARY"/>
 	<fileset id="g++-files" dir="./">
 		<exclude name="target/"/>
@@ -77,7 +79,7 @@
 	</fileset>
 
 	<!-- define linker and options -->
-	<property name="linker" value="${compilerPrefix}g++"/>
+	<property name="linker" value="${compilerPrefix}g++${compilerSuffix}"/>
 	<property name="linker-opts" value="-shared -m64 -Wl,-wrap,memcpy"/>
 	<property name="libraries" value=""/>
 	
@@ -155,7 +157,8 @@
 			<targetfile/>
 			<fileset refid="gcc-files"/>
 			<compositemapper>
-				<mapper type="glob" from="*.c" to="*.o"/>
+				<mapper type="glob" from="*.c" to="*.o"/>
+				<mapper type="glob" from="*.m" to="*.o"/>
 			</compositemapper>
 		</apply>
 	</target>	
diff --git a/extensions/gdx-freetype/jni/build-macosx32.xml b/extensions/gdx-freetype/jni/build-macosx32.xml
index df92031..6d5db41 100644
--- a/extensions/gdx-freetype/jni/build-macosx32.xml
+++ b/extensions/gdx-freetype/jni/build-macosx32.xml
@@ -10,10 +10,12 @@
 	<!-- the jni header jniPlatform to use -->
 	<property name="jniPlatform" value="mac"/>
 	<!-- the compilerPrefix for the C & C++ compilers -->
-	<property name="compilerPrefix" value=""/>	
+	<property name="compilerPrefix" value=""/>
+	<!--  the compilerSuffix for the C & C++ compilers -->	
+	<property name="compilerSuffix" value="" />	
 	
 	<!-- define gcc compiler, options and files to compile -->
-	<property name="gcc" value="${compilerPrefix}gcc"/>	
+	<property name="gcc" value="${compilerPrefix}gcc${compilerSuffix}"/>	
 	<property name="gcc-opts" value="-c -Wall -O2 -arch i386 -arch x86_64 -DFIXED_POINT -fmessage-length=0 -fPIC -mmacosx-version-min=10.5 -std=c99 -DFT2_BUILD_LIBRARY"/>
 	<fileset id="gcc-files" dir="./">
 		<exclude name="target/"/>		
@@ -67,7 +69,7 @@
 	</fileset>
 	
 	<!-- define g++ compiler, options and files to compile -->
-	<property name="g++" value="${compilerPrefix}g++"/>
+	<property name="g++" value="${compilerPrefix}g++${compilerSuffix}"/>
 	<property name="g++-opts" value="-c -Wall -O2 -arch i386 -arch x86_64 -DFIXED_POINT -fmessage-length=0 -fPIC -mmacosx-version-min=10.5 -std=c99 -DFT2_BUILD_LIBRARY"/>
 	<fileset id="g++-files" dir="./">
 		<exclude name="target/"/>
@@ -77,7 +79,7 @@
 	</fileset>
 
 	<!-- define linker and options -->
-	<property name="linker" value="${compilerPrefix}g++"/>
+	<property name="linker" value="${compilerPrefix}g++${compilerSuffix}"/>
 	<property name="linker-opts" value="-shared -arch i386 -arch x86_64 -mmacosx-version-min=10.5 -framework CoreServices -framework Carbon"/>
 	<property name="libraries" value=""/>
 	
@@ -155,7 +157,8 @@
 			<targetfile/>
 			<fileset refid="gcc-files"/>
 			<compositemapper>
-				<mapper type="glob" from="*.c" to="*.o"/>
+				<mapper type="glob" from="*.c" to="*.o"/>
+				<mapper type="glob" from="*.m" to="*.o"/>
 			</compositemapper>
 		</apply>
 	</target>	
diff --git a/extensions/gdx-freetype/jni/build-windows32.xml b/extensions/gdx-freetype/jni/build-windows32.xml
index 5f1145a..64aa8a4 100644
--- a/extensions/gdx-freetype/jni/build-windows32.xml
+++ b/extensions/gdx-freetype/jni/build-windows32.xml
@@ -10,10 +10,12 @@
 	<!-- the jni header jniPlatform to use -->
 	<property name="jniPlatform" value="win32"/>
 	<!-- the compilerPrefix for the C & C++ compilers -->
-	<property name="compilerPrefix" value="i686-w64-mingw32-"/>	
+	<property name="compilerPrefix" value="i686-w64-mingw32-"/>
+	<!--  the compilerSuffix for the C & C++ compilers -->	
+	<property name="compilerSuffix" value="" />	
 	
 	<!-- define gcc compiler, options and files to compile -->
-	<property name="gcc" value="${compilerPrefix}gcc"/>	
+	<property name="gcc" value="${compilerPrefix}gcc${compilerSuffix}"/>	
 	<property name="gcc-opts" value="-c -Wall -O2 -mfpmath=sse -msse2 -fmessage-length=0 -m32 -std=c99 -DFT2_BUILD_LIBRARY"/>
 	<fileset id="gcc-files" dir="./">
 		<exclude name="target/"/>		
@@ -67,7 +69,7 @@
 	</fileset>
 	
 	<!-- define g++ compiler, options and files to compile -->
-	<property name="g++" value="${compilerPrefix}g++"/>
+	<property name="g++" value="${compilerPrefix}g++${compilerSuffix}"/>
 	<property name="g++-opts" value="-c -Wall -O2 -mfpmath=sse -msse2 -fmessage-length=0 -m32 -std=c99 -DFT2_BUILD_LIBRARY"/>
 	<fileset id="g++-files" dir="./">
 		<exclude name="target/"/>
@@ -77,7 +79,7 @@
 	</fileset>
 
 	<!-- define linker and options -->
-	<property name="linker" value="${compilerPrefix}g++"/>
+	<property name="linker" value="${compilerPrefix}g++${compilerSuffix}"/>
 	<property name="linker-opts" value="-Wl,--kill-at -shared -m32 -static-libgcc -static-libstdc++"/>
 	<property name="libraries" value=""/>
 	
@@ -155,7 +157,8 @@
 			<targetfile/>
 			<fileset refid="gcc-files"/>
 			<compositemapper>
-				<mapper type="glob" from="*.c" to="*.o"/>
+				<mapper type="glob" from="*.c" to="*.o"/>
+				<mapper type="glob" from="*.m" to="*.o"/>
 			</compositemapper>
 		</apply>
 	</target>	
diff --git a/extensions/gdx-freetype/jni/build-windows32home.xml b/extensions/gdx-freetype/jni/build-windows32home.xml
index 9661993..edc1d17 100644
--- a/extensions/gdx-freetype/jni/build-windows32home.xml
+++ b/extensions/gdx-freetype/jni/build-windows32home.xml
@@ -10,10 +10,12 @@
 	<!-- the jni header jniPlatform to use -->
 	<property name="jniPlatform" value="win32"/>
 	<!-- the compilerPrefix for the C & C++ compilers -->
-	<property name="compilerPrefix" value=""/>	
+	<property name="compilerPrefix" value=""/>
+	<!--  the compilerSuffix for the C & C++ compilers -->	
+	<property name="compilerSuffix" value="" />	
 	
 	<!-- define gcc compiler, options and files to compile -->
-	<property name="gcc" value="${compilerPrefix}gcc"/>	
+	<property name="gcc" value="${compilerPrefix}gcc${compilerSuffix}"/>	
 	<property name="gcc-opts" value="-c -Wall -O2 -mfpmath=sse -msse2 -fmessage-length=0 -m32 -std=c99 -DFT2_BUILD_LIBRARY"/>
 	<fileset id="gcc-files" dir="./">
 		<exclude name="target/"/>		
@@ -67,7 +69,7 @@
 	</fileset>
 	
 	<!-- define g++ compiler, options and files to compile -->
-	<property name="g++" value="${compilerPrefix}g++"/>
+	<property name="g++" value="${compilerPrefix}g++${compilerSuffix}"/>
 	<property name="g++-opts" value="-c -Wall -O2 -mfpmath=sse -msse2 -fmessage-length=0 -m32 -std=c99 -DFT2_BUILD_LIBRARY"/>
 	<fileset id="g++-files" dir="./">
 		<exclude name="target/"/>
@@ -77,7 +79,7 @@
 	</fileset>
 
 	<!-- define linker and options -->
-	<property name="linker" value="${compilerPrefix}g++"/>
+	<property name="linker" value="${compilerPrefix}g++${compilerSuffix}"/>
 	<property name="linker-opts" value="-Wl,--kill-at -shared -m32 -static-libgcc -static-libstdc++"/>
 	<property name="libraries" value=""/>
 	
@@ -155,7 +157,8 @@
 			<targetfile/>
 			<fileset refid="gcc-files"/>
 			<compositemapper>
-				<mapper type="glob" from="*.c" to="*.o"/>
+				<mapper type="glob" from="*.c" to="*.o"/>
+				<mapper type="glob" from="*.m" to="*.o"/>
 			</compositemapper>
 		</apply>
 	</target>	
diff --git a/extensions/gdx-freetype/jni/build-windows64.xml b/extensions/gdx-freetype/jni/build-windows64.xml
index 7c55ba1..2950698 100644
--- a/extensions/gdx-freetype/jni/build-windows64.xml
+++ b/extensions/gdx-freetype/jni/build-windows64.xml
@@ -10,10 +10,12 @@
 	<!-- the jni header jniPlatform to use -->
 	<property name="jniPlatform" value="win32"/>
 	<!-- the compilerPrefix for the C & C++ compilers -->
-	<property name="compilerPrefix" value="x86_64-w64-mingw32-"/>	
+	<property name="compilerPrefix" value="x86_64-w64-mingw32-"/>
+	<!--  the compilerSuffix for the C & C++ compilers -->	
+	<property name="compilerSuffix" value="" />	
 	
 	<!-- define gcc compiler, options and files to compile -->
-	<property name="gcc" value="${compilerPrefix}gcc"/>	
+	<property name="gcc" value="${compilerPrefix}gcc${compilerSuffix}"/>	
 	<property name="gcc-opts" value="-c -Wall -O2 -mfpmath=sse -msse2 -fmessage-length=0 -m64 -std=c99 -DFT2_BUILD_LIBRARY"/>
 	<fileset id="gcc-files" dir="./">
 		<exclude name="target/"/>		
@@ -67,7 +69,7 @@
 	</fileset>
 	
 	<!-- define g++ compiler, options and files to compile -->
-	<property name="g++" value="${compilerPrefix}g++"/>
+	<property name="g++" value="${compilerPrefix}g++${compilerSuffix}"/>
 	<property name="g++-opts" value="-c -Wall -O2 -mfpmath=sse -msse2 -fmessage-length=0 -m64 -std=c99 -DFT2_BUILD_LIBRARY"/>
 	<fileset id="g++-files" dir="./">
 		<exclude name="target/"/>
@@ -77,7 +79,7 @@
 	</fileset>
 
 	<!-- define linker and options -->
-	<property name="linker" value="${compilerPrefix}g++"/>
+	<property name="linker" value="${compilerPrefix}g++${compilerSuffix}"/>
 	<property name="linker-opts" value="-Wl,--kill-at -shared -static-libgcc -static-libstdc++ -m64"/>
 	<property name="libraries" value=""/>
 	
@@ -155,7 +157,8 @@
 			<targetfile/>
 			<fileset refid="gcc-files"/>
 			<compositemapper>
-				<mapper type="glob" from="*.c" to="*.o"/>
+				<mapper type="glob" from="*.c" to="*.o"/>
+				<mapper type="glob" from="*.m" to="*.o"/>
 			</compositemapper>
 		</apply>
 	</target>	
diff --git a/extensions/gdx-freetype/jni/com.badlogic.gdx.graphics.g2d.freetype.FreeType.cpp b/extensions/gdx-freetype/jni/com.badlogic.gdx.graphics.g2d.freetype.FreeType.cpp
index d16d465..cf20be6 100644
--- a/extensions/gdx-freetype/jni/com.badlogic.gdx.graphics.g2d.freetype.FreeType.cpp
+++ b/extensions/gdx-freetype/jni/com.badlogic.gdx.graphics.g2d.freetype.FreeType.cpp
@@ -482,7 +482,7 @@ static inline jlong wrapped_Java_com_badlogic_gdx_graphics_g2d_freetype_FreeType
 }
 
 JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_graphics_g2d_freetype_FreeType_newMemoryFace(JNIEnv* env, jclass clazz, jlong library, jobject obj_data, jint dataSize, jint faceIndex) {
-	char* data = (char*)env->GetDirectBufferAddress(obj_data);
+	char* data = (char*)(obj_data?env->GetDirectBufferAddress(obj_data):0);
 
 	jlong JNI_returnValue = wrapped_Java_com_badlogic_gdx_graphics_g2d_freetype_FreeType_newMemoryFace(env, clazz, library, obj_data, dataSize, faceIndex, data);
 
diff --git a/extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/resources/scripts/build-ios.xml.template b/extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/resources/scripts/build-ios.xml.template
index 6b3baf6..e3a6eb5 100755
--- a/extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/resources/scripts/build-ios.xml.template
+++ b/extensions/gdx-jnigen/src/com/badlogic/gdx/jnigen/resources/scripts/build-ios.xml.template
@@ -12,9 +12,9 @@
 	<!-- the compilerPrefix for the C & C++ compilers -->
 	<property name="compilerPrefix" value="%compilerPrefix%"/>	
 	<property name="iphoneos-platform" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin"/>
-	<property name="iphoneos-sdk" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.0.sdk/"/>
+	<property name="iphoneos-sdk" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk/"/>
 	<property name="iphonesimulator-platform" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin"/>
-	<property name="iphonesimulator-sdk" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.0.sdk/"/>
+	<property name="iphonesimulator-sdk" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.1.sdk/"/>
 	
 	<!-- define gcc compiler, options and files to compile -->
 	<property name="gcc" value="${compilerPrefix}gcc"/>	
diff --git a/extensions/gdx-tools/src/com/badlogic/gdx/tools/FileProcessor.java b/extensions/gdx-tools/src/com/badlogic/gdx/tools/FileProcessor.java
index d6ef4e5..41fbd68 100644
--- a/extensions/gdx-tools/src/com/badlogic/gdx/tools/FileProcessor.java
+++ b/extensions/gdx-tools/src/com/badlogic/gdx/tools/FileProcessor.java
@@ -201,9 +201,9 @@ public class FileProcessor {
 				entry.outputDir = outputDir;
 
 				if (flattenOutput) {
-					entry.outputFile = outputRoot.length() == 0 ? new File(outputName) : new File(outputRoot, outputName);
+					entry.outputFile = new File(outputRoot, outputName);
 				} else {
-					entry.outputFile = outputDir.length() == 0 ? new File(outputName) : new File(outputDir, outputName);
+					entry.outputFile = new File(outputDir, outputName);
 				}
 
 				dirToEntries.get(dir).add(entry);
diff --git a/extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/ImageProcessor.java b/extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/ImageProcessor.java
index 819071b..d93ba06 100644
--- a/extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/ImageProcessor.java
+++ b/extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/ImageProcessor.java
@@ -12,7 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
+ ******************************************************************************/
+
 package com.badlogic.gdx.tools.imagepacker;
 
 import com.badlogic.gdx.tools.imagepacker.TexturePacker2.Rect;
@@ -42,11 +43,18 @@ public class ImageProcessor {
 	private final HashMap<String, Rect> crcs = new HashMap();
 	private final Array<Rect> rects = new Array();
 
+	/** @param rootDir Can be null. */
 	public ImageProcessor (File rootDir, Settings settings) {
 		this.settings = settings;
 
-		rootPath = rootDir.getAbsolutePath().replace('\\', '/');
-		if (!rootPath.endsWith("/")) rootPath += "/";
+		if (rootDir != null) {
+			rootPath = rootDir.getAbsolutePath().replace('\\', '/');
+			if (!rootPath.endsWith("/")) rootPath += "/";
+		}
+	}
+
+	public ImageProcessor (Settings settings) {
+		this(null, settings);
 	}
 
 	public void addImage (File file) {
@@ -67,6 +75,10 @@ public class ImageProcessor {
 		int dotIndex = name.lastIndexOf('.');
 		if (dotIndex != -1) name = name.substring(0, dotIndex);
 
+		addImage(image, name);
+	}
+
+	public void addImage (BufferedImage image, String name) {
 		Rect rect = null;
 
 		// Strip ".9" from file name, read ninepatch split pixels, and strip ninepatch split pixels.
@@ -89,11 +101,13 @@ public class ImageProcessor {
 		}
 
 		// Strip digits off end of name and use as index.
-		Matcher matcher = indexPattern.matcher(name);
 		int index = -1;
-		if (matcher.matches()) {
-			name = matcher.group(1);
-			index = Integer.parseInt(matcher.group(2));
+		if (settings.useIndexes) {
+			Matcher matcher = indexPattern.matcher(name);
+			if (matcher.matches()) {
+				name = matcher.group(1);
+				index = Integer.parseInt(matcher.group(2));
+			}
 		}
 
 		if (rect == null) {
@@ -349,4 +363,4 @@ public class ImageProcessor {
 			throw new RuntimeException(ex);
 		}
 	}
-}
\ No newline at end of file
+}
diff --git a/extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/MaxRectsPacker.java b/extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/MaxRectsPacker.java
index 17b9b15..4ffe467 100644
--- a/extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/MaxRectsPacker.java
+++ b/extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/MaxRectsPacker.java
@@ -12,10 +12,9 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- ******************************************************************************/
-package com.badlogic.gdx.tools.imagepacker;
+ ******************************************************************************/
 
-import java.util.Comparator;
+package com.badlogic.gdx.tools.imagepacker;
 
 import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.tools.imagepacker.TexturePacker2.Page;
@@ -23,10 +22,13 @@ import com.badlogic.gdx.tools.imagepacker.TexturePacker2.Rect;
 import com.badlogic.gdx.tools.imagepacker.TexturePacker2.Settings;
 import com.badlogic.gdx.utils.Array;
 
+import java.util.Comparator;
+
 /** Packs pages of images using the maximal rectangles bin packing algorithm by Jukka Jylänki. A brute force binary search is used
  * to pack into the smallest bin possible.
  * @author Nathan Sweet */
 public class MaxRectsPacker {
+	private RectComparator rectComparator = new RectComparator();
 	private FreeRectChoiceHeuristic[] methods = FreeRectChoiceHeuristic.values();
 	private MaxRects maxRects = new MaxRects();
 	Settings settings;
@@ -125,6 +127,8 @@ public class MaxRectsPacker {
 		if (bestResult == null)
 			bestResult = packAtSize(false, settings.maxWidth - edgePaddingX, settings.maxHeight - edgePaddingY, inputRects);
 
+		bestResult.outputRects.sort(rectComparator);
+
 		return bestResult;
 	}
 
@@ -670,4 +674,10 @@ public class MaxRectsPacker {
 		// CP: Choosest the placement where the rectangle touches other rects as much as possible.
 		ContactPointRule
 	};
-}
\ No newline at end of file
+
+	class RectComparator implements Comparator<Rect> {
+		public int compare (Rect o1, Rect o2) {
+			return Rect.getAtlasName(o1.name, settings.flattenPaths).compareTo(Rect.getAtlasName(o2.name, settings.flattenPaths));
+		}
+	}
+}
diff --git a/extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/TexturePacker2.java b/extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/TexturePacker2.java
index 517af68..fef8f17 100644
--- a/extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/TexturePacker2.java
+++ b/extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/TexturePacker2.java
@@ -51,6 +51,7 @@ public class TexturePacker2 {
 	private final MaxRectsPacker maxRectsPacker;
 	private final ImageProcessor imageProcessor;
 
+	/** @param rootDir Can be null. */
 	public TexturePacker2 (File rootDir, Settings settings) {
 		this.settings = settings;
 
@@ -65,10 +66,18 @@ public class TexturePacker2 {
 		imageProcessor = new ImageProcessor(rootDir, settings);
 	}
 
+	public TexturePacker2 (Settings settings) {
+		this(null, settings);
+	}
+
 	public void addImage (File file) {
 		imageProcessor.addImage(file);
 	}
 
+	public void addImage (BufferedImage image, String name) {
+		imageProcessor.addImage(image, name);
+	}
+
 	public void pack (File outputDir, String packFileName) {
 		outputDir.mkdirs();
 
@@ -190,8 +199,10 @@ public class TexturePacker2 {
 					ImageOutputStream ios = ImageIO.createImageOutputStream(outputFile);
 					writer.setOutput(ios);
 					writer.write(null, new IIOImage(canvas, null, null), param);
-				} else
+				} else {
+					if (settings.premultiplyAlpha) canvas.getColorModel().coerceData(canvas.getRaster(), true);
 					ImageIO.write(canvas, "png", outputFile);
+				}
 			} catch (IOException ex) {
 				throw new RuntimeException("Error writing file: " + outputFile, ex);
 			}
@@ -206,7 +217,7 @@ public class TexturePacker2 {
 			TextureAtlasData textureAtlasData = new TextureAtlasData(new FileHandle(packFile), new FileHandle(packFile), false);
 			for (Page page : pages) {
 				for (Rect rect : page.outputRects) {
-					String rectName = settings.flattenPaths ? new FileHandle(rect.name).name() : rect.name;
+					String rectName = Rect.getAtlasName(rect.name, settings.flattenPaths);
 					System.out.println(rectName);
 					for (Region region : textureAtlasData.getRegions()) {
 						if (region.name.equals(rectName)) {
@@ -238,8 +249,7 @@ public class TexturePacker2 {
 	}
 
 	private void writeRect (FileWriter writer, Page page, Rect rect, String name) throws IOException {
-		String rectName = settings.flattenPaths ? new FileHandle(name).name() : name;
-		writer.write(rectName + "\n");
+		writer.write(Rect.getAtlasName(name, settings.flattenPaths) + "\n");
 		writer.write("  rotate: " + rect.rotated + "\n");
 		writer.write("  xy: " + (page.x + rect.x) + ", " + (page.y + page.height - rect.height - rect.y) + "\n");
 		writer.write("  size: " + rect.image.getWidth() + ", " + rect.image.getHeight() + "\n");
@@ -363,6 +373,10 @@ public class TexturePacker2 {
 		public String toString () {
 			return name + "[" + x + "," + y + " " + width + "x" + height + "]";
 		}
+
+		static public String getAtlasName (String name, boolean flattenPaths) {
+			return flattenPaths ? new FileHandle(name).name() : name;
+		}
 	}
 
 	/** @author Nathan Sweet */
@@ -387,8 +401,9 @@ public class TexturePacker2 {
 		public boolean fast;
 		public boolean debug;
 		public boolean combineSubdirectories;
-		public boolean jsonOutput = true;
 		public boolean flattenPaths;
+		public boolean premultiplyAlpha;
+		public boolean useIndexes = true;
 
 		public Settings () {
 		}
@@ -419,8 +434,8 @@ public class TexturePacker2 {
 			duplicatePadding = settings.duplicatePadding;
 			debug = settings.debug;
 			combineSubdirectories = settings.combineSubdirectories;
-			jsonOutput = settings.jsonOutput;
 			flattenPaths = settings.flattenPaths;
+			premultiplyAlpha = settings.premultiplyAlpha;
 		}
 	}
 
diff --git a/gdx/jni/build-ios32.xml b/gdx/jni/build-ios32.xml
index 54d559c..35fa678 100755
--- a/gdx/jni/build-ios32.xml
+++ b/gdx/jni/build-ios32.xml
@@ -12,9 +12,9 @@
 	<!-- the compilerPrefix for the C & C++ compilers -->
 	<property name="compilerPrefix" value=""/>	
 	<property name="iphoneos-platform" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin"/>
-	<property name="iphoneos-sdk" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.0.sdk/"/>
+	<property name="iphoneos-sdk" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk/"/>
 	<property name="iphonesimulator-platform" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin"/>
-	<property name="iphonesimulator-sdk" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.0.sdk/"/>
+	<property name="iphonesimulator-sdk" value="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.1.sdk/"/>
 	
 	<!-- define gcc compiler, options and files to compile -->
 	<property name="gcc" value="${compilerPrefix}gcc"/>	
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.ChainShape.cpp b/gdx/jni/com.badlogic.gdx.physics.box2d.ChainShape.cpp
index ba87534..bdc9455 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.ChainShape.cpp
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.ChainShape.cpp
@@ -34,7 +34,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_ChainShape_jniCreateC
 	float* verts = (float*)env->GetPrimitiveArrayCritical(obj_verts, 0);
 
 
-//@line:78
+//@line:84
 
 		b2ChainShape* chain = (b2ChainShape*)addr;
 		b2Vec2* verticesOut = new b2Vec2[numVertices];
@@ -50,7 +50,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_ChainShape_jniCreateC
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_ChainShape_jniSetPrevVertex(JNIEnv* env, jobject object, jlong addr, jfloat x, jfloat y) {
 
 
-//@line:97
+//@line:103
 
 		b2ChainShape* chain = (b2ChainShape*)addr;
 		chain->SetPrevVertex(b2Vec2(x, y));
@@ -61,7 +61,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_ChainShape_jniSetPrev
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_ChainShape_jniSetNextVertex(JNIEnv* env, jobject object, jlong addr, jfloat x, jfloat y) {
 
 
-//@line:112
+//@line:118
 
 		b2ChainShape* chain = (b2ChainShape*)addr;
 		chain->SetNextVertex(b2Vec2(x, y));
@@ -72,7 +72,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_ChainShape_jniSetNext
 JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_ChainShape_jniGetVertexCount(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:122
+//@line:128
 
 		b2ChainShape* chain = (b2ChainShape*)addr;
 		return chain->GetVertexCount();
@@ -84,7 +84,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_ChainShape_jniGetVert
 	float* verts = (float*)env->GetPrimitiveArrayCritical(obj_verts, 0);
 
 
-//@line:138
+//@line:144
 
 		b2ChainShape* chain = (b2ChainShape*)addr;
 		const b2Vec2 v = chain->GetVertex( index );
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.Joint.cpp b/gdx/jni/com.badlogic.gdx.physics.box2d.Joint.cpp
index 92f81c0..9c29fd9 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.Joint.cpp
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.Joint.cpp
@@ -6,7 +6,7 @@
 	 JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetType(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:58
+//@line:61
 
 		b2Joint* joint = (b2Joint*)addr;
 		return joint->GetType();
@@ -17,7 +17,7 @@
 JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetBodyA(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:68
+//@line:71
 
 		b2Joint* joint = (b2Joint*)addr;
 		return (jlong)joint->GetBodyA();
@@ -28,7 +28,7 @@ JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetBodyA(JN
 JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetBodyB(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:78
+//@line:81
 
 		b2Joint* joint = (b2Joint*)addr;
 		return (jlong)joint->GetBodyB();
@@ -40,7 +40,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetAnchorA(J
 	float* anchorA = (float*)env->GetPrimitiveArrayCritical(obj_anchorA, 0);
 
 
-//@line:93
+//@line:96
 
 		b2Joint* joint = (b2Joint*)addr;
 		b2Vec2 a = joint->GetAnchorA();
@@ -55,7 +55,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetAnchorB(J
 	float* anchorB = (float*)env->GetPrimitiveArrayCritical(obj_anchorB, 0);
 
 
-//@line:110
+//@line:113
 
 		b2Joint* joint = (b2Joint*)addr;
 		b2Vec2 a = joint->GetAnchorB();
@@ -70,7 +70,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetReactionF
 	float* reactionForce = (float*)env->GetPrimitiveArrayCritical(obj_reactionForce, 0);
 
 
-//@line:127
+//@line:130
 
 		b2Joint* joint = (b2Joint*)addr;
 		b2Vec2 f = joint->GetReactionForce(inv_dt);
@@ -84,7 +84,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetReactionF
 JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetReactionTorque(JNIEnv* env, jobject object, jlong addr, jfloat inv_dt) {
 
 
-//@line:139
+//@line:142
 
 		b2Joint* joint = (b2Joint*)addr;
 		return joint->GetReactionTorque(inv_dt);
@@ -95,7 +95,7 @@ JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniGetReactio
 JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_Joint_jniIsActive(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:158
+//@line:166
 
 		b2Joint* joint = (b2Joint*)addr;
 		return joint->IsActive();
diff --git a/gdx/jni/com.badlogic.gdx.physics.box2d.World.cpp b/gdx/jni/com.badlogic.gdx.physics.box2d.World.cpp
index 391f9ac..7590d29 100644
--- a/gdx/jni/com.badlogic.gdx.physics.box2d.World.cpp
+++ b/gdx/jni/com.badlogic.gdx.physics.box2d.World.cpp
@@ -415,7 +415,7 @@ JNIEXPORT jlong JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniCreateWeldJ
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniDestroyJoint(JNIEnv* env, jobject object, jlong addr, jlong jointAddr) {
 
 
-//@line:589
+//@line:590
 
 		b2World* world = (b2World*)addr;
 		b2Joint* joint = (b2Joint*)jointAddr;
@@ -427,7 +427,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniDestroyJoint
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniStep(JNIEnv* env, jobject object, jlong addr, jfloat timeStep, jint velocityIterations, jint positionIterations) {
 
 
-//@line:603
+//@line:604
 
 		b2World* world = (b2World*)addr;
 		CustomContactFilter contactFilter(env, object);
@@ -444,7 +444,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniStep(JNIEnv*
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniClearForces(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:623
+//@line:624
 
 		b2World* world = (b2World*)addr;
 		world->ClearForces();
@@ -455,7 +455,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniClearForces(
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetWarmStarting(JNIEnv* env, jobject object, jlong addr, jboolean flag) {
 
 
-//@line:633
+//@line:634
 
 		b2World* world = (b2World*)addr;
 		world->SetWarmStarting(flag);
@@ -466,7 +466,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetWarmStart
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetContiousPhysics(JNIEnv* env, jobject object, jlong addr, jboolean flag) {
 
 
-//@line:643
+//@line:644
 
 		b2World* world = (b2World*)addr;
 		world->SetContinuousPhysics(flag);
@@ -477,7 +477,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetContiousP
 JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetProxyCount(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:653
+//@line:654
 
 		b2World* world = (b2World*)addr;
 		return world->GetProxyCount();
@@ -488,7 +488,7 @@ JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetProxyCoun
 JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetBodyCount(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:663
+//@line:664
 
 		b2World* world = (b2World*)addr;
 		return world->GetBodyCount();
@@ -499,7 +499,7 @@ JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetBodyCount
 JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetJointcount(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:673
+//@line:674
 
 		b2World* world = (b2World*)addr;
 		return world->GetJointCount();
@@ -510,7 +510,7 @@ JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetJointcoun
 JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetContactCount(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:683
+//@line:684
 
 		b2World* world = (b2World*)addr;
 		return world->GetContactCount();
@@ -521,7 +521,7 @@ JNIEXPORT jint JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetContactCo
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetGravity(JNIEnv* env, jobject object, jlong addr, jfloat gravityX, jfloat gravityY) {
 
 
-//@line:693
+//@line:694
 
 		b2World* world = (b2World*)addr;
 		world->SetGravity( b2Vec2( gravityX, gravityY ) );
@@ -533,7 +533,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetGravity(J
 	float* gravity = (float*)env->GetPrimitiveArrayCritical(obj_gravity, 0);
 
 
-//@line:709
+//@line:710
 
 		b2World* world = (b2World*)addr;
 		b2Vec2 g = world->GetGravity();
@@ -547,7 +547,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetGravity(J
 JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniIsLocked(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:721
+//@line:722
 
 		b2World* world = (b2World*)addr;
 		return world->IsLocked();
@@ -558,7 +558,7 @@ JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniIsLocked
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetAutoClearForces(JNIEnv* env, jobject object, jlong addr, jboolean flag) {
 
 
-//@line:731
+//@line:732
 
 		b2World* world = (b2World*)addr;
 		world->SetAutoClearForces(flag);
@@ -569,7 +569,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniSetAutoClear
 JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetAutoClearForces(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:741
+//@line:742
 
 		b2World* world = (b2World*)addr;
 		return world->GetAutoClearForces();
@@ -580,7 +580,7 @@ JNIEXPORT jboolean JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetAutoC
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniQueryAABB(JNIEnv* env, jobject object, jlong addr, jfloat lowX, jfloat lowY, jfloat upX, jfloat upY) {
 
 
-//@line:759
+//@line:760
 
 		b2World* world = (b2World*)addr;
 		b2AABB aabb;
@@ -597,7 +597,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetContactLi
 	long long* contacts = (long long*)env->GetPrimitiveArrayCritical(obj_contacts, 0);
 
 
-//@line:827
+//@line:828
 
 		b2World* world = (b2World*)addr;
 	
@@ -616,7 +616,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniGetContactLi
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniDispose(JNIEnv* env, jobject object, jlong addr) {
 
 
-//@line:843
+//@line:844
 
 		b2World* world = (b2World*)(addr);
 		delete world;
@@ -627,7 +627,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniDispose(JNIE
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_setVelocityThreshold(JNIEnv* env, jclass clazz, jfloat threshold) {
 
 
-//@line:903
+//@line:904
 
 		b2_velocityThreshold = threshold;
 	
@@ -637,7 +637,7 @@ JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_setVelocityThre
 JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_World_getVelocityThreshold(JNIEnv* env, jclass clazz) {
 
 
-//@line:908
+//@line:909
 
 		return b2_velocityThreshold;
 	
@@ -647,7 +647,7 @@ JNIEXPORT jfloat JNICALL Java_com_badlogic_gdx_physics_box2d_World_getVelocityTh
 JNIEXPORT void JNICALL Java_com_badlogic_gdx_physics_box2d_World_jniRayCast(JNIEnv* env, jobject object, jlong addr, jfloat aX, jfloat aY, jfloat bX, jfloat bY) {
 
 
-//@line:923
+//@line:924
 
 		b2World *world = (b2World*)addr;
 		CustomRayCastCallback callback( env, object );	
diff --git a/gdx/src/com/badlogic/gdx.gwt.xml b/gdx/src/com/badlogic/gdx.gwt.xml
index 9cdb621..667def7 100644
--- a/gdx/src/com/badlogic/gdx.gwt.xml
+++ b/gdx/src/com/badlogic/gdx.gwt.xml
@@ -2,202 +2,340 @@
 <module rename-to="com.badlogic.gdx">
 	<inherits name="com.esotericsoftware.TableLayout"/>
 	<source path="gdx">
-		<include name="graphics/g3d/Animation.java"/>
-		<include name="graphics/g3d/Animator.java"/>
-		<include name="LifecycleListener.java"/>
+	    
+	<!--  --> 
 		<include name="Application.java"/>
 		<include name="ApplicationAdapter.java"/>
 		<include name="ApplicationListener.java"/>
+		<include name="Audio.java"/>
+		<include name="Files.java"/>
+		<include name="Game.java"/>
+		<include name="Gdx.java"/>
+		<include name="Graphics.java"/>
+		<include name="Input.java"/>
+		<include name="InputAdapter.java"/>
+		<include name="InputMultiplexer.java"/>
+		<include name="InputProcessor.java"/>
+		<include name="InputProcessorQueue.java"/>
+		<include name="LifecycleListener.java"/>
+		<include name="Net.java"/>
+		<include name="Preferences.java"/>
+		<include name="Screen.java"/>
+		<include name="Version.java"/>
+		
+	<!-- assets -->		
 		<include name="assets/AssetDescriptor.java"/>
 		<include name="assets/AssetErrorListener.java"/>
-		<include name="assets/loaders/AssetLoader.java"/>
 		<include name="assets/AssetLoaderParameters.java"/>
+		<include name="assets/AssetLoadingTask.java"/> <!-- Emulated: Threading -->
+		<include name="assets/AssetManager.java"/> <!-- Emulated: Threading -->
+		<include name="assets/RefCountedContainer.java"/>
+
+	<!-- assets/loaders -->
+		<include name="assets/loaders/AssetLoader.java"/>
 		<include name="assets/loaders/AsynchronousAssetLoader.java"/>
-		<include name="Audio.java"/>
+		<include name="assets/loaders/BitmapFontLoader.java"/>
+		<include name="assets/loaders/FileHandleResolver.java"/>
+		<include name="assets/loaders/MusicLoader.java"/>
+		<include name="assets/loaders/PixmapLoader.java"/>
+		<include name="assets/loaders/SkinLoader.java"/>
+		<include name="assets/loaders/SoundLoader.java"/>
+		<include name="assets/loaders/SynchronousAssetLoader.java"/>
+		<include name="assets/loaders/TextureAtlasLoader.java"/>
+		<include name="assets/loaders/TextureLoader.java"/> <!-- Emulated -->
+		
+	<!-- assets/loaders/resolvers -->		
+		<include name="assets/loaders/resolvers/ExternalFileHandleResolver.java"/>
+		<include name="assets/loaders/resolvers/InternalFileHandleResolver.java"/>
+		<include name="assets/loaders/resolvers/ResolutionFileResolver.java"/> <!-- Emulated -->
+
+	<!-- audio -->		
 		<include name="audio/AudioDevice.java"/>
 		<include name="audio/AudioRecorder.java"/>
-		<include name="utils/Base64Coder.java"/>
-		<include name="src/com/esotericsoftware/tablelayout/BaseTableLayout.java"/>
-		<include name="utils/BinaryHeap.java"/>
-		<include name="graphics/g2d/BitmapFont.java"/>
-		<include name="graphics/g2d/BitmapFontCache.java"/>
-		<include name="graphics/g2d/Polygon*.java"/>
-		<include name="assets/loaders/BitmapFontLoader.java"/>
-		<include name="utils/BooleanArray.java"/>
-		<include name="math/collision/BoundingBox.java"/>
+		<include name="audio/Music.java"/>
+		<include name="audio/Sound.java"/>
+
+	<!-- files -->
+		<include name="files/FileHandle.java"/> <!-- Emulated -->
+		<include name="files/FileHandleStream.java"/> <!-- Emulated -->
+		
+	<!-- graphics -->		
 		<include name="graphics/Camera.java"/>
-		<include name="graphics/g3d/decals/CameraGroupStrategy.java"/>
-		<include name="math/CatmullRomSpline.java"/>
-		<include name="src/com/esotericsoftware/tablelayout/Cell.java"/>
-		<include name="utils/CharArray.java"/>
-		<include name="math/Circle.java"/>
 		<include name="graphics/Color.java"/>
-		<include name="utils/ComparableTimSort.java"/>
-		<include name="graphics/g3d/decals/Decal.java"/>
-		<include name="graphics/g3d/decals/DecalBatch.java"/>
-		<include name="graphics/g3d/decals/DecalMaterial.java"/>
-		<include name="graphics/g3d/decals/DefaultGroupStrategy.java"/>
-		<include name="utils/Disposable.java"/>
-		<include name="math/EarClippingTriangulator.java"/>
-		<include name="graphics/g2d/EmptyNinePatch.java"/>
-		<include name="assets/loaders/resolvers/ExternalFileHandleResolver.java"/>
 		<include name="graphics/FPSLogger.java"/>
-		<include name="assets/loaders/FileHandleResolver.java"/>
-		<include name="Files.java"/>
-		<include name="utils/FloatArray.java"/>
-		<include name="graphics/glutils/FrameBuffer.java"/>
-		<include name="math/Frustum.java"/>
 		<include name="graphics/GL10.java"/>
 		<include name="graphics/GL11.java"/>
 		<include name="graphics/GL20.java"/>
 		<include name="graphics/GLCommon.java"/>
-		<include name="graphics/GLU.java"/>
-		<include name="Game.java"/>
-		<include name="Gdx.java"/>
-		<include name="utils/GdxRuntimeException.java"/>
-		<include name="input/GestureDetector.java"/>
-		<include name="Graphics.java"/>
+		<include name="graphics/Mesh.java"/>
+		<include name="graphics/OrthographicCamera.java"/>
+		<include name="graphics/PerspectiveCamera.java"/>
+		<include name="graphics/Pixmap.java"/> <!-- Emulated -->
+		<exclude name="graphics/PixmapIO.java"/> <!-- Reason: No DeflaterOutputStream -->
+		<include name="graphics/Texture.java"/> <!-- Emulated -->
+		<include name="graphics/TextureData.java"/>
+		<include name="graphics/TextureDict.java"/>
+		<include name="graphics/TextureRef.java"/>
+		<include name="graphics/VertexAttribute.java"/>
+		<include name="graphics/VertexAttributes.java"/>
+		
+	<!-- graphics/g2d -->
+		<include name="graphics/g2d/Animation.java"/>
+		<include name="graphics/g2d/BitmapFont.java"/>
+		<include name="graphics/g2d/BitmapFontCache.java"/>
+		<exclude name="graphics/g2d/Gdx2DPixmap.java"/> <!-- Reason: JNI -->
+		<include name="graphics/g2d/NinePatch.java"/>
+		<include name="graphics/g2d/ParticleEffect.java"/> <!-- Emulated: Not supporting save -->
+		<include name="graphics/g2d/ParticleEffectPool.java"/>
+		<include name="graphics/g2d/ParticleEmitter.java"/>
+		<include name="graphics/g2d/ParticleEmitterBox2D.java"/>		
+		<include name="graphics/g2d/PixmapPacker.java"/>
+		<include name="graphics/g2d/PolygonRegion.java"/>
+		<include name="graphics/g2d/PolygonSprite.java"/>
+		<include name="graphics/g2d/PolygonSpriteBatch.java"/>
+		<include name="graphics/g2d/Sprite.java"/>
+		<include name="graphics/g2d/SpriteBatch.java"/>
+		<include name="graphics/g2d/SpriteCache.java"/>
+		<include name="graphics/g2d/TextureAtlas.java"/>
+		<include name="graphics/g2d/TextureRegion.java"/>
+		
+	<!-- graphics/g3d -->
+		<include name="graphics/g3d/AnimatedModelInstance.java"/>
+		<include name="graphics/g3d/AnimatedModelNode.java"/>
+		<include name="graphics/g3d/ModelLoaderHints.java"/>
+		<include name="graphics/g3d/ModelRenderer.java"/>
+		<include name="graphics/g3d/StillModelInstance.java"/>
+		<include name="graphics/g3d/StillModelNode.java"/>
+		
+	<!-- graphics/g3d/decals -->
+		<include name="graphics/g3d/decals/CameraGroupStrategy.java"/>
+		<include name="graphics/g3d/decals/Decal.java"/>
+		<include name="graphics/g3d/decals/DecalBatch.java"/>
+		<include name="graphics/g3d/decals/DecalMaterial.java"/>
+		<include name="graphics/g3d/decals/DefaultGroupStrategy.java"/>
 		<include name="graphics/g3d/decals/GroupPlug.java"/>
 		<include name="graphics/g3d/decals/GroupStrategy.java"/>
-		<include name="utils/IdentityMap.java"/>
+		<include name="graphics/g3d/decals/PluggableGroupStrategy.java"/>
+		<include name="graphics/g3d/decals/SimpleOrthoGroupStrategy.java"/>
+
+	<!-- graphics/g3d/loaders -->		
+		<include name="graphics/g3d/loaders/KeyframedModelLoader.java"/>
+		<include name="graphics/g3d/loaders/ModelLoader.java"/>
+		<include name="graphics/g3d/loaders/ModelLoaderRegistry.java"/>
+		<include name="graphics/g3d/loaders/SkeletonModelLoader.java"/>
+		<include name="graphics/g3d/loaders/StillModelLoader.java"/>
+
+	<!-- graphics/g3d/loaders/g3d -->
+		<include name="graphics/g3d/loaders/g3d/G3dConstants.java"/>
+		<include name="graphics/g3d/loaders/g3d/G3dLoader.java"/>
+		<include name="graphics/g3d/loaders/g3d/G3dtLoader.java"/>
+
+	<!-- graphics/g3d/loaders/g3d/chunks -->
+		<include name="graphics/g3d/loaders/g3d/chunks/ChunkReader.java"/>
+		<include name="graphics/g3d/loaders/g3d/chunks/ChunkWriter.java"/>
+		<include name="graphics/g3d/loaders/g3d/chunks/CountingDataInputStream.java"/>
+		<include name="graphics/g3d/loaders/g3d/chunks/G3dExporter.java"/>
+
+	<!-- graphics/g3d/loaders/md2 -->
+		<include name="graphics/g3d/loaders/md2/MD2Frame.java"/>
+		<include name="graphics/g3d/loaders/md2/MD2Header.java"/>
+		<include name="graphics/g3d/loaders/md2/MD2Loader.java"/>
+		<include name="graphics/g3d/loaders/md2/MD2Normals.java"/>
+		<include name="graphics/g3d/loaders/md2/MD2Triangle.java"/>
+				
+	<!-- graphics/g3d/loaders/obj -->
+		<include name="graphics/g3d/loaders/wavefront/ObjLoader.java"/>
+		
+	<!-- graphics/g3d/materials -->
+		<include name="graphics/g3d/materials/BlendingAttribute.java"/>
+		<include name="graphics/g3d/materials/ColorAttribute.java"/>
+		<include name="graphics/g3d/materials/Material.java"/>
+		<include name="graphics/g3d/materials/MaterialAttribute.java"/>
+		<include name="graphics/g3d/materials/TextureAttribute.java"/>
+		
+	<!-- graphics/g3d/model -->
+		<include name="graphics/g3d/model/AnimatedModel.java"/>
+		<include name="graphics/g3d/model/Animation.java"/>
+		<include name="graphics/g3d/model/Model.java"/>
+		<include name="graphics/g3d/model/SubMesh.java"/>
+		
+	<!-- graphics/g3d/model/keyframe -->
+		<include name="graphics/g3d/model/keyframe/Keyframe.java"/>
+		<include name="graphics/g3d/model/keyframe/KeyframedAnimation.java"/>
+		<include name="graphics/g3d/model/keyframe/KeyframedModel.java"/>
+		<include name="graphics/g3d/model/keyframe/KeyframedSubMesh.java"/>
+		
+	<!-- graphics/g3d/model/skeleton -->
+		<include name="graphics/g3d/model/skeleton/Skeleton.java"/>
+		<include name="graphics/g3d/model/skeleton/SkeletonAnimation.java"/>
+		<include name="graphics/g3d/model/skeleton/SkeletonJoint.java"/>
+		<include name="graphics/g3d/model/skeleton/SkeletonKeyframe.java"/>
+		<include name="graphics/g3d/model/skeleton/SkeletonModel.java"/>
+		<include name="graphics/g3d/model/skeleton/SkeletonModelGpuSkinned.java"/>
+		<include name="graphics/g3d/model/skeleton/SkeletonSubMesh.java"/>
+		
+	<!-- graphics/g3d/model/still -->
+		<include name="graphics/g3d/model/still/StillModel.java"/>
+		<include name="graphics/g3d/model/still/StillSubMesh.java"/>
+		
+	<!-- graphics/glutils -->
+		<exclude name="graphics/glutils/ETC1.java"/> <!-- Reason: No ETC1 Support -->
+		<exclude name="graphics/glutils/ETC1TextureData.java"/>  <!-- Reason: No ETC1 Support -->
+		<include name="graphics/glutils/FileTextureData.java"/> <!-- Emulated: No PixmapIO -->
+		<include name="graphics/glutils/FloatFrameBuffer.java"/>
+		<include name="graphics/glutils/FloatTextureData.java"/>
+		<include name="graphics/glutils/FrameBuffer.java"/>
 		<include name="graphics/glutils/ImmediateModeRenderer.java"/>
 		<include name="graphics/glutils/ImmediateModeRenderer10.java"/>
 		<include name="graphics/glutils/ImmediateModeRenderer20.java"/>
+		<include name="graphics/glutils/IndexArray.java"/>  <!-- Emulated -->
+		<include name="graphics/glutils/IndexBufferObject.java"/> <!-- Emulated -->
 		<include name="graphics/glutils/IndexBufferObjectSubData.java"/>
 		<include name="graphics/glutils/IndexData.java"/>
+		<include name="graphics/glutils/MipMapGenerator.java"/>
+		<include name="graphics/glutils/PixmapTextureData.java"/>
 		<include name="graphics/glutils/ShaderProgram.java"/>
-		<include name="Input.java"/>
-		<include name="InputAdapter.java"/>
-		<include name="InputMultiplexer.java"/>
-		<include name="InputProcessor.java"/>
-		<include name="utils/IntArray.java"/>
-		<include name="utils/IntMap.java"/>
-		<include name="assets/loaders/resolvers/InternalFileHandleResolver.java"/>
+		<include name="graphics/glutils/ShapeRenderer.java"/>
+		<include name="graphics/glutils/VertexArray.java"/> <!-- Emulated -->
+		<include name="graphics/glutils/VertexBufferObject.java"/> <!-- Emulated -->
+		<include name="graphics/glutils/VertexBufferObjectSubData.java"/>
+		<include name="graphics/glutils/VertexData.java"/>
+
+	<!-- input -->
+		<include name="input/GestureDetector.java"/>
+		<exclude name="input/RemoteInput.java"/> <!-- Reason: Networking -->
+		<exclude name="input/RemoteSender.java"/> <!-- Reason: Networking -->
+		
+	<!-- maps -->
+		<include name="maps/ImageResolver.java"/>
+		<include name="maps/Map.java"/>
+		<include name="maps/MapLayer.java"/>
+		<include name="maps/MapLayers.java"/> <!-- Emulated: Reflection -->
+		<include name="maps/MapObject.java"/>
+		<include name="maps/MapObjects.java"/> <!-- Emulated: Reflection -->
+		<include name="maps/MapProperties.java"/>
+		<include name="maps/MapRenderer.java"/>
+		
+	<!-- maps/objects -->
+		<include name="maps/objects/CircleMapObject.java"/>
+		<include name="maps/objects/EllipseMapObject.java"/>
+		<include name="maps/objects/PolygonMapObject.java"/>
+		<include name="maps/objects/PolylineMapObject.java"/>
+		<include name="maps/objects/RectangleMapObject.java"/>
+		<include name="maps/objects/TextureMapObject.java"/>
+	
+	<!-- maps/tiled -->
+		<include name="maps/tiled/TideMapLoader.java"/>
+		<include name="maps/tiled/TiledMap.java"/>
+		<include name="maps/tiled/TiledMapRenderer.java"/>
+		<include name="maps/tiled/TiledMapTile.java"/>
+		<include name="maps/tiled/TiledMapTileLayer.java"/>
+		<include name="maps/tiled/TiledMapTileSet.java"/>
+		<include name="maps/tiled/TiledMapTileSets.java"/>
+		<include name="maps/tiled/TmxMapLoader.java"/> <!-- Emulated: Compression -->
+		
+	<!-- maps/tiled/renderers -->
+		<include name="maps/tiled/renderers/BatchTiledMapRenderer.java"/>
+		<include name="maps/tiled/renderers/HexagonalTiledMapRenderer.java"/>
+		<include name="maps/tiled/renderers/IsometricTiledMapRenderer.java"/>
+		<include name="maps/tiled/renderers/OrthogonalTiledMapRenderer.java"/>
+		<include name="maps/tiled/renderers/OrthogonalTiledMapRenderer2.java"/>
+		
+	<!-- maps/tiles/tiles -->
+		<include name="maps/tiled/tiles/AnimatedTiledMapTile.java"/>
+		<include name="maps/tiled/tiles/StaticTiledMapTile.java"/>
+	
+	<!-- math -->
+		<include name="math/Bezier.java"/>
+		<include name="math/BSpline.java"/>
+		<include name="math/CatmullRomSpline.java"/>
+		<include name="math/Circle.java"/>
+		<include name="math/EarClippingTriangulator.java"/>
+		<include name="math/Ellipse.java"/>
+		<include name="math/FloatCounter.java"/>
+		<include name="math/Frustum.java"/>
 		<include name="math/Interpolation.java"/>
 		<include name="math/Intersector.java"/>
-		<include name="utils/JsonReader.java"/>
-		<include name="utils/JsonWriter.java"/>
-		<include name="utils/DataInput.java"/>
-		<include name="graphics/g3d/keyframed/Keyframe.java"/>
-		<include name="graphics/g3d/keyframed/KeyframeAnimation.java"/>
-		<include name="graphics/g3d/keyframed/KeyframeAnimator.java"/>
-		<include name="graphics/g3d/keyframed/KeyframedModel.java"/>
-		<include name="utils/Logger.java"/>
-		<include name="utils/LongArray.java"/>
-		<include name="utils/LongMap.java"/>
-		<include name="graphics/g3d/loaders/md5/MD5Animation.java"/>
-		<include name="graphics/g3d/loaders/md5/MD5AnimationInfo.java"/>
-		<include name="graphics/g3d/loaders/md5/MD5Animator.java"/>
-		<include name="graphics/g3d/loaders/md5/MD5Jni.java"/>
-		<include name="graphics/g3d/loaders/md5/MD5Joints.java"/>
-		<include name="graphics/g3d/loaders/md5/MD5Loader.java"/>
-		<include name="graphics/g3d/loaders/md5/MD5Mesh.java"/>
-		<include name="graphics/g3d/loaders/md5/MD5Model.java"/>
-		<include name="graphics/g3d/loaders/md5/MD5Quaternion.java"/>
-		<include name="graphics/g3d/loaders/md5/MD5Renderer.java"/>
-		<include name="graphics/g3d/Material.java"/>
 		<include name="math/MathUtils.java"/>
 		<include name="math/Matrix3.java"/>
-		<include name="graphics/Mesh.java"/>
-		<include name="graphics/glutils/MipMapGenerator.java"/>
-		<include name="graphics/g3d/loaders/ModelLoaderOld.java"/>
-		<include name="audio/Music.java"/>
-		<include name="assets/loaders/MusicLoader.java"/>
-		<include name="graphics/g2d/NinePatch.java"/>
-		<include name="graphics/g3d/loaders/obj/ObjLoader.java"/>
-		<include name="utils/ObjectIntMap.java"/>
-		<include name="utils/ObjectMap.java"/>
-		<include name="utils/OrderedMap.java"/>
-		<include name="graphics/OrthographicCamera.java"/>
-		<include name="src/com/esotericsoftware/tablelayout/Value.java"/>
-		<include name="graphics/g2d/ParticleEffectPool.java"/>
-		<include name="graphics/g2d/ParticleEmitter.java"/>
-		<include name="graphics/g2d/ParticleEmitterBox2D.java"/>
-		<include name="graphics/PerspectiveCamera.java"/>
-		<include name="assets/loaders/PixmapLoader.java"/>
-		<include name="graphics/g2d/PixmapPacker.java"/>
-		<include name="graphics/glutils/PixmapTextureData.java"/>
+		<include name="math/Matrix4.java"/> <!-- Emulated: JNI -->
+		<include name="math/Path.java"/>
 		<include name="math/Plane.java"/>
-		<include name="graphics/g3d/decals/PluggableGroupStrategy.java"/>
 		<include name="math/Polygon.java"/>
-		<include name="utils/Pool.java"/>
-		<include name="utils/Pools.java"/>
-		<include name="utils/SnapshotArray.java"/>
-		<include name="utils/PooledLinkedList.java"/>
-		<include name="utils/DelayedRemovalArray.java"/>
-		<include name="utils/Timer.java"/>
-		<include name="utils/LittleEndianInputStream.java"/>
-		<include name="Preferences.java"/>
+		<include name="math/Polyline.java"/>
 		<include name="math/Quaternion.java"/>
-		<include name="math/collision/Ray.java"/>
 		<include name="math/Rectangle.java"/>
-		<include name="assets/RefCountedContainer.java"/>
-		<include name="utils/Scaling.java"/>
-		<include name="Screen.java"/>
-		<include name="math/collision/Segment.java"/>
-		<include name="graphics/glutils/ShapeRenderer.java"/>
-		<include name="graphics/g3d/decals/SimpleOrthoGroupStrategy.java"/>
-		<include name="assets/loaders/SkinLoader.java"/>
-		<include name="utils/Sort.java"/>
-		<include name="utils/SortedIntList.java"/>
-		<include name="audio/Sound.java"/>
-		<include name="assets/loaders/SoundLoader.java"/>
-		<include name="math/collision/Sphere.java"/>
-		<include name="graphics/g2d/Sprite.java"/>
-		<include name="graphics/g2d/SpriteBatch.java"/>
-		<include name="graphics/g2d/SpriteCache.java"/>
-		<include name="assets/loaders/SynchronousAssetLoader.java"/>
-		<include name="graphics/g2d/TextureAtlas.java"/>
-		<include name="assets/loaders/TextureAtlasLoader.java"/>
-		<include name="graphics/TextureData.java"/>
-		<include name="graphics/TextureDict.java"/>
-		<include name="graphics/TextureRef.java"/>
-		<include name="graphics/g2d/TextureRegion.java"/>
-		<include name="utils/TimSort.java"/>
-		<include name="src/com/esotericsoftware/tablelayout/Toolkit.java"/>
+		<include name="math/Vector.java"/>
 		<include name="math/Vector2.java"/>
-		<include name="math/Vector3.java"/>
-		<include name="Version.java"/>
-		<include name="graphics/VertexAttribute.java"/>
-		<include name="graphics/VertexAttributes.java"/>
-		<include name="graphics/glutils/VertexBufferObjectSubData.java"/>
-		<include name="graphics/glutils/VertexData.java"/>
-		<include name="scenes/scene2d/ui/Widget.java"/>
-		<include name="scenes/scene2d/ui/WidgetGroup.java"/>
-		<include name="scenes/scene2d/ui/Window.java"/>
+		<include name="math/Vector3.java"/>		
 		<include name="math/WindowedMean.java"/>
-		<include name="utils/XmlReader.java"/>
-		<include name="utils/XmlWriter.java"/>
-		<include name="utils/Clipboard.java"/>
-		<include name="graphics/g2d/Animation.java"/>
-		<include name="graphics/g3d/Animation.java"/>
+				
+	<!-- math/collision -->								
+		<include name="math/collision/BoundingBox.java"/>
+		<include name="math/collision/Ray.java"/>
+		<include name="math/collision/Segment.java"/>
+		<include name="math/collision/Sphere.java"/>		
 		
-		<include name="utils/Predicate.java"/>
-		<include name="utils/StringBuilder.java"/>
-		<include name="utils/compression/CRC.java"/>
-		<include name="utils/compression/ICodeProgress.java"/>
-		<include name="utils/compression/Lzma.java"/>
-		<include name="utils/compression/lz/BinTree.java"/>
-		<include name="utils/compression/lz/InWindow.java"/>
-		<include name="utils/compression/lz/OutWindow.java"/>		
-		<include name="utils/compression/lzma/Base.java"/>
-		<include name="utils/compression/lzma/Decoder.java"/>
-		<include name="utils/compression/lzma/Encoder.java"/>
-		<include name="utils/compression/rangecoder/BitTreeDecoder.java"/>
-		<include name="utils/compression/rangecoder/BitTreeEncoder.java"/>
-		<include name="utils/compression/rangecoder/Decoder.java"/>
-		<include name="utils/compression/rangecoder/Encoder.java"/>		
+	<!-- net -->
+		<include name="net/HttpParametersUtils.java"/>
+		<include name="net/HttpStatus.java"/>
+		<exclude name="net/NetJavaImpl.java"/> <!-- Reason: Networking -->
+		<include name="net/ServerSocket.java"/>
+		<include name="net/ServerSocketHints.java"/>
+		<include name="net/Socket.java"/>
+		<include name="net/SocketHints.java"/>
+	
+	<!-- physics/box2d -->
+	<!-- Box2d is fully emulated in GWT backend -->
+	
+	<!-- physics/box2d/joints -->
+	<!-- Box2d is fully emulated in GWT backend -->
 		
+	<!-- scened/scene2d -->
 		<include name="scenes/scene2d/Action.java"/>
-		<include name="scenes/scene2d/actions/*.java"/>
 		<include name="scenes/scene2d/Actor.java"/>
-		<include name="scenes/scene2d/InputEvent.java"/>
-		<include name="scenes/scene2d/Touchable.java"/>
-		<include name="scenes/scene2d/InputListener.java"/>
 		<include name="scenes/scene2d/Event.java"/>
 		<include name="scenes/scene2d/EventListener.java"/>
 		<include name="scenes/scene2d/Group.java"/>
+		<include name="scenes/scene2d/InputEvent.java"/>
+		<include name="scenes/scene2d/InputListener.java"/>
 		<include name="scenes/scene2d/Stage.java"/>
+		<include name="scenes/scene2d/Touchable.java"/>
+		
+	<!-- scened/scene2d/actions -->
+		<include name="scenes/scene2d/actions/Actions.java"/>
+		<include name="scenes/scene2d/actions/AddAction.java"/>
+		<include name="scenes/scene2d/actions/AddListenerAction.java"/>
+		<include name="scenes/scene2d/actions/AfterAction.java"/>
+		<include name="scenes/scene2d/actions/AlphaAction.java"/>
+		<include name="scenes/scene2d/actions/ColorAction.java"/>
+		<include name="scenes/scene2d/actions/DelayAction.java"/>
+		<include name="scenes/scene2d/actions/DelegateAction.java"/>
+		<include name="scenes/scene2d/actions/FloatAction.java"/>
+		<include name="scenes/scene2d/actions/IntAction.java"/>
+		<include name="scenes/scene2d/actions/LayoutAction.java"/>
+		<include name="scenes/scene2d/actions/MoveByAction.java"/>
+		<include name="scenes/scene2d/actions/MoveToAction.java"/>
+		<include name="scenes/scene2d/actions/ParallelAction.java"/>
+		<include name="scenes/scene2d/actions/RelativeTemporalAction.java"/>
+		<include name="scenes/scene2d/actions/RemoveAction.java"/>
+		<include name="scenes/scene2d/actions/RemoveActorAction.java"/>
+		<include name="scenes/scene2d/actions/RemoveListenerAction.java"/>
+		<include name="scenes/scene2d/actions/RepeatAction.java"/>
+		<include name="scenes/scene2d/actions/RotateByAction.java"/>
+		<include name="scenes/scene2d/actions/RotateToAction.java"/>
+		<include name="scenes/scene2d/actions/RunnableAction.java"/>
+		<include name="scenes/scene2d/actions/ScaleByAction.java"/>
+		<include name="scenes/scene2d/actions/ScaleToAction.java"/>
+		<include name="scenes/scene2d/actions/SequenceAction.java"/>
+		<include name="scenes/scene2d/actions/SizeByAction.java"/>
+		<include name="scenes/scene2d/actions/SizeToAction.java"/>
+		<include name="scenes/scene2d/actions/TemporalAction.java"/>
+		<include name="scenes/scene2d/actions/TimeScaleAction.java"/>
+		<include name="scenes/scene2d/actions/TouchableAction.java"/>
+		<include name="scenes/scene2d/actions/VisibleAction.java"/>
+			
+	<!-- scened/scene2d/ui -->
 		<include name="scenes/scene2d/ui/Button.java"/>
 		<include name="scenes/scene2d/ui/ButtonGroup.java"/>
 		<include name="scenes/scene2d/ui/CheckBox.java"/>
@@ -209,6 +347,7 @@
 		<include name="scenes/scene2d/ui/List.java"/>
 		<include name="scenes/scene2d/ui/ScrollPane.java"/>
 		<include name="scenes/scene2d/ui/SelectBox.java"/>
+		<include name="scenes/scene2d/ui/Skin.java"/> <!-- Emulated: Reflection -->
 		<include name="scenes/scene2d/ui/Slider.java"/>
 		<include name="scenes/scene2d/ui/SplitPane.java"/>
 		<include name="scenes/scene2d/ui/Stack.java"/>
@@ -217,47 +356,114 @@
 		<include name="scenes/scene2d/ui/TableToolkit.java"/>
 		<include name="scenes/scene2d/ui/TextButton.java"/>
 		<include name="scenes/scene2d/ui/TextField.java"/>
+		<include name="scenes/scene2d/ui/Touchpad.java"/>
 		<include name="scenes/scene2d/ui/Tree.java"/>
 		<include name="scenes/scene2d/ui/VerticalGroup.java"/>
 		<include name="scenes/scene2d/ui/Widget.java"/>
 		<include name="scenes/scene2d/ui/WidgetGroup.java"/>
 		<include name="scenes/scene2d/ui/Window.java"/>
-		<include name="scenes/scene2d/ui/Touchpad.java"/>
+		
+	<!-- scened/scene2d/utils -->
 		<include name="scenes/scene2d/utils/ActorGestureListener.java"/>
 		<include name="scenes/scene2d/utils/Align.java"/>
 		<include name="scenes/scene2d/utils/BaseDrawable.java"/>
 		<include name="scenes/scene2d/utils/ChangeListener.java"/>
 		<include name="scenes/scene2d/utils/ClickListener.java"/>
 		<include name="scenes/scene2d/utils/Cullable.java"/>
+		<include name="scenes/scene2d/utils/DragAndDrop.java"/>
+		<include name="scenes/scene2d/utils/DragListener.java"/>
+		<include name="scenes/scene2d/utils/DragScrollListener.java"/>
 		<include name="scenes/scene2d/utils/Drawable.java"/>
-		<include name="scenes/scene2d/utils/EmptyDrawable.java"/>
 		<include name="scenes/scene2d/utils/FocusListener.java"/>
 		<include name="scenes/scene2d/utils/Layout.java"/>
 		<include name="scenes/scene2d/utils/NinePatchDrawable.java"/>
-		<include name="scenes/scene2d/utils/PressedListener.java"/>
 		<include name="scenes/scene2d/utils/ScissorStack.java"/>
 		<include name="scenes/scene2d/utils/SpriteDrawable.java"/>
-		<include name="scenes/scene2d/utils/TextureDrawable.java"/>
 		<include name="scenes/scene2d/utils/TextureRegionDrawable.java"/>		
 		<include name="scenes/scene2d/utils/TiledDrawable.java"/>
-		<include name="scenes/scene2d/utils/DragAndDrop.java"/>
-		<include name="scenes/scene2d/utils/DragListener.java"/>
 		
-		<include name="Net.java"/>
-		<include name="net/HttpParametersUtils.java"/>
-		<include name="net/HttpStatus.java"/>
-		<include name="net/ServerSocket.java"/>
-		<include name="net/ServerSocketHints.java"/>
-		<include name="net/Socket.java"/>
-		<include name="net/SocketHints.java"/>
-		<include name="graphics/g3d/**/*"/>
-		<include name="maps/**"/>
+	<!-- utils -->
+		<include name="utils/Array.java"/> <!-- Emulated: Reflection -->
+		<include name="utils/ArrayMap.java"/> <!-- Emulated: Reflection -->
+		<exclude name="utils/AtomicQueue.java"/> <!-- Reason: No atomic support -->
+		<include name="utils/Base64Coder.java"/>
+		<include name="utils/BinaryHeap.java"/>
+		<include name="utils/Bits.java"/>
+		<include name="utils/BooleanArray.java"/>
+		<include name="utils/BufferUtils.java"/> <!-- Emulated -->
+		<include name="utils/CharArray.java"/>
+		<include name="utils/Clipboard.java"/>
+		<include name="utils/ComparableTimSort.java"/>
+		<include name="utils/DataInput.java"/>
+		<include name="utils/DataOutput.java"/>
+		<include name="utils/DelayedRemovalArray.java"/>
+		<include name="utils/Disposable.java"/>
+		<include name="utils/FloatArray.java"/>
+		<exclude name="utils/GdxBuild.java"/> <!-- Reason: Natives -->
+		<exclude name="utils/GdxNativesLoader.java"/> <!-- Reason: Natives -->
+		<include name="utils/GdxRuntimeException.java"/>
+		<exclude name="utils/GwtModuleGenerator.java"/> <!-- Reason: Generator -->
+		<include name="utils/IdentityMap.java"/>
+		<include name="utils/IntArray.java"/>
+		<include name="utils/IntFloatMap.java"/>
+		<include name="utils/IntIntMap.java"/>
+		<include name="utils/IntMap.java"/>
+		<include name="utils/Json.java"/> <!-- Emulated: Reflection -->
+		<include name="utils/JsonReader.java"/>
+		<include name="utils/JsonValue.java"/>
+		<include name="utils/JsonWriter.java"/> <!-- Emulated: Regex -->
+		<include name="utils/LittleEndianInputStream.java"/>
+		<include name="utils/Logger.java"/>
+		<include name="utils/LongArray.java"/>
+		<include name="utils/LongMap.java"/>
+		<include name="utils/NumberUtils.java"/> <!-- Emulated -->
+		<include name="utils/ObjectIntMap.java"/>
+		<include name="utils/ObjectMap.java"/>
+		<include name="utils/OrderedMap.java"/>
+		<include name="utils/PausableThread.java"/>
+		<include name="utils/PerformanceCounter.java"/>
+		<include name="utils/PerformanceCounters.java"/>
+		<include name="utils/Pool.java"/>
+		<include name="utils/PooledLinkedList.java"/>
+		<include name="utils/Pools.java"/>
+		<include name="utils/Predicate.java"/>
+		<include name="utils/ReflectionPool.java"/> <!-- Emulated: Reflection -->
+		<include name="utils/Scaling.java"/>
+		<exclude name="utils/ScreenUtils.java"/> <!-- Reason: Type mismatch Buffer->ByteBuffer -->
+		<include name="utils/SerializationException.java"/> <!-- Emulated: Reflection -->
+		<exclude name="utils/SharedLibraryLoader.java"/> <!-- Reason: Natives -->
+		<include name="utils/ShortArray.java"/>
+		<include name="utils/SnapshotArray.java"/>
+		<include name="utils/Sort.java"/>
+		<include name="utils/SortedIntList.java"/>
+		<include name="utils/StreamUtils.java"/>
+		<include name="utils/StringBuilder.java"/>
+		<include name="utils/Timer.java"/> <!-- Emulated: Threading -->
+		<include name="utils/TimeUtils.java"/> <!-- Emulated: nanoTime() -->
+		<include name="utils/TimSort.java"/>		
+		<include name="utils/XmlReader.java"/>
+		<include name="utils/XmlWriter.java"/>
 		
-		<include name="math/Vector.java"/>
-		<include name="math/Path.java"/>
-		<include name="math/Bezier.java"/>
-		<include name="math/BSpline.java"/>
-		<include name="math/Ellipse.java"/>
-		<include name="math/Polyline.java"/>
+	<!-- utils/compression -->
+		<include name="utils/compression/CRC.java"/>
+		<include name="utils/compression/ICodeProgress.java"/>
+		<include name="utils/compression/Lzma.java"/>
+		
+	<!-- utils/compression/lz -->
+		<include name="utils/compression/lz/BinTree.java"/>
+		<include name="utils/compression/lz/InWindow.java"/>
+		<include name="utils/compression/lz/OutWindow.java"/>
+		
+	<!-- utils/compression/lzma -->
+		<include name="utils/compression/lzma/Base.java"/>
+		<include name="utils/compression/lzma/Decoder.java"/>
+		<include name="utils/compression/lzma/Encoder.java"/>
+		
+	<!-- utils/compression/rangecoder -->
+		<include name="utils/compression/rangecoder/BitTreeDecoder.java"/>
+		<include name="utils/compression/rangecoder/BitTreeEncoder.java"/>
+		<include name="utils/compression/rangecoder/Decoder.java"/>
+		<include name="utils/compression/rangecoder/Encoder.java"/>
+
 	</source>
-</module>
+</module>
\ No newline at end of file
diff --git a/gdx/src/com/badlogic/gdx/InputProcessorQueue.java b/gdx/src/com/badlogic/gdx/InputProcessorQueue.java
index 6fda916..ae9b178 100644
--- a/gdx/src/com/badlogic/gdx/InputProcessorQueue.java
+++ b/gdx/src/com/badlogic/gdx/InputProcessorQueue.java
@@ -2,6 +2,7 @@
 package com.badlogic.gdx;
 
 import com.badlogic.gdx.utils.IntArray;
+import com.badlogic.gdx.utils.TimeUtils;
 
 /** Queues events that are later passed to the wrapped {@link InputProcessor}.
  * @author Nathan Sweet */
@@ -78,7 +79,7 @@ public class InputProcessorQueue implements InputProcessor {
 	}
 
 	private void queueTime () {
-		long time = System.nanoTime();
+		long time = TimeUtils.nanoTime();
 		queue.add((int)(time >> 32));
 		queue.add((int)time);
 	}
diff --git a/gdx/src/com/badlogic/gdx/Net.java b/gdx/src/com/badlogic/gdx/Net.java
index ebf4627..5ccf879 100644
--- a/gdx/src/com/badlogic/gdx/Net.java
+++ b/gdx/src/com/badlogic/gdx/Net.java
@@ -80,11 +80,15 @@ public interface Net {
 	 * <ul>
 	 * <li>GET</li>
 	 * <li>POST</li>
+	 * <li>PUT</li>
+	 * <li>DELETE</li>
 	 * </ul> */
 	public static interface HttpMethods {
 
 		public static final String GET = "GET";
 		public static final String POST = "POST";
+		public static final String PUT = "PUT";
+		public static final String DELETE = "DELETE";
 
 	}
 
diff --git a/gdx/src/com/badlogic/gdx/assets/AssetManager.java b/gdx/src/com/badlogic/gdx/assets/AssetManager.java
index 5a0ec14..70a0b9d 100644
--- a/gdx/src/com/badlogic/gdx/assets/AssetManager.java
+++ b/gdx/src/com/badlogic/gdx/assets/AssetManager.java
@@ -26,7 +26,6 @@ import com.badlogic.gdx.Application;
 import com.badlogic.gdx.assets.loaders.AssetLoader;
 import com.badlogic.gdx.assets.loaders.BitmapFontLoader;
 import com.badlogic.gdx.assets.loaders.FileHandleResolver;
-import com.badlogic.gdx.assets.loaders.ModelLoader;
 import com.badlogic.gdx.assets.loaders.MusicLoader;
 import com.badlogic.gdx.assets.loaders.PixmapLoader;
 import com.badlogic.gdx.assets.loaders.SkinLoader;
@@ -40,10 +39,6 @@ import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.TextureAtlas;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.loader.G3dbModelLoader;
-import com.badlogic.gdx.graphics.g3d.loader.G3djModelLoader;
-import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Disposable;
@@ -85,9 +80,6 @@ public class AssetManager implements Disposable {
 		setLoader(TextureAtlas.class, new TextureAtlasLoader(resolver));
 		setLoader(Texture.class, new TextureLoader(resolver));
 		setLoader(Skin.class, new SkinLoader(resolver));
-		setLoader(Model.class, ".g3dj", new G3djModelLoader(resolver));
-		setLoader(Model.class, ".g3db", new G3dbModelLoader(resolver));
-		setLoader(Model.class, ".obj", new ObjLoader(resolver));
 		threadPool = Executors.newFixedThreadPool(1, new ThreadFactory() {
 			@Override
 			public Thread newThread (Runnable r) {
diff --git a/gdx/src/com/badlogic/gdx/assets/loaders/ModelLoader.java b/gdx/src/com/badlogic/gdx/assets/loaders/ModelLoader.java
deleted file mode 100644
index 7b4b93a..0000000
--- a/gdx/src/com/badlogic/gdx/assets/loaders/ModelLoader.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package com.badlogic.gdx.assets.loaders;
-
-import com.badlogic.gdx.assets.AssetDescriptor;
-import com.badlogic.gdx.assets.AssetLoaderParameters;
-import com.badlogic.gdx.assets.AssetManager;
-import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.loader.G3djModelLoader;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelData;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelTexture;
-import com.badlogic.gdx.graphics.g3d.utils.TextureProvider;
-import com.badlogic.gdx.utils.Array;
-
-public abstract class ModelLoader<P extends AssetLoaderParameters<Model>> extends AsynchronousAssetLoader<Model, P> {
-	public ModelLoader (FileHandleResolver resolver) {
-		super(resolver);
-	}
-	
-	protected ModelData data;
-
-	protected abstract ModelData loadModelData(final FileHandle fileHandle, P parameters);
-	
-	@Override
-	public Array<AssetDescriptor> getDependencies (String fileName, P parameters) {
-		final Array<AssetDescriptor> deps = new Array();
-		data = loadModelData(resolve(fileName), parameters);
-		if (data == null)
-			return deps;
-		
-		for (final ModelMaterial modelMaterial : data.materials) {
-			if (modelMaterial.diffuseTextures != null) {
-				for (final ModelTexture modelTexture : modelMaterial.diffuseTextures) {
-					deps.add(new AssetDescriptor(modelTexture.fileName, Texture.class));
-				}
-			}
-		}
-		return deps;
-	}
-	
-	@Override
-	public void loadAsync (AssetManager manager, String fileName, P parameters) {
-	}
-
-	@Override
-	public Model loadSync (AssetManager manager, String fileName, P parameters) {
-		if (data == null)
-			return null;
-		final Model result = new Model(data, new TextureProvider.AssetTextureProvider(manager));
-		data = null;
-		return result;
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/Camera.java b/gdx/src/com/badlogic/gdx/graphics/Camera.java
index 2a9d2d0..d5b0bf5 100644
--- a/gdx/src/com/badlogic/gdx/graphics/Camera.java
+++ b/gdx/src/com/badlogic/gdx/graphics/Camera.java
@@ -21,7 +21,6 @@ import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.math.Frustum;
-import com.badlogic.gdx.math.Matrix3;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Quaternion;
 import com.badlogic.gdx.math.Vector3;
@@ -87,21 +86,21 @@ public abstract class Camera {
 	 * @param z the x-coordinate of the point to look at */
 	public void lookAt (float x, float y, float z) {
 		direction.set(x, y, z).sub(position).nor();
-		normalizeUp();
 	}
 	
 	/** Recalculates the direction of the camera to look at the point (x, y, z).
 	 * @param target the point to look at */
 	public void lookAt (Vector3 target) {
 		direction.set(target).sub(position).nor();
-		normalizeUp();
 	}
 
 	/** Normalizes the up vector by first calculating the right vector via a cross product between direction and up, and then
 	 * recalculating the up vector via a cross product between right and direction. */
+	final Vector3 right = new Vector3();
+
 	public void normalizeUp () {
-		tmpVec.set(direction).crs(up).nor();
-		up.set(tmpVec).crs(direction).nor();
+		right.set(direction).crs(up).nor();
+		up.set(right).crs(direction).nor();
 	}
 
 	/** Rotates the direction and up vector of this camera by the given angle around the given axis. The direction and up vector
diff --git a/gdx/src/com/badlogic/gdx/graphics/Mesh.java b/gdx/src/com/badlogic/gdx/graphics/Mesh.java
index 26ed79c..74ecf30 100644
--- a/gdx/src/com/badlogic/gdx/graphics/Mesh.java
+++ b/gdx/src/com/badlogic/gdx/graphics/Mesh.java
@@ -35,7 +35,6 @@ import com.badlogic.gdx.graphics.glutils.VertexArray;
 import com.badlogic.gdx.graphics.glutils.VertexBufferObject;
 import com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData;
 import com.badlogic.gdx.graphics.glutils.VertexData;
-import com.badlogic.gdx.math.Matrix3;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector2;
 import com.badlogic.gdx.math.Vector3;
@@ -177,7 +176,7 @@ public class Mesh implements Disposable {
 	public Mesh (VertexDataType type, boolean isStatic, int maxVertices, int maxIndices, VertexAttribute... attributes) {
 // if (type == VertexDataType.VertexArray && Gdx.graphics.isGL20Available()) type = VertexDataType.VertexBufferObject;
 
-		if (type == VertexDataType.VertexBufferObject) {
+		if (type == VertexDataType.VertexBufferObject || Mesh.forceVBO) {
 			vertices = new VertexBufferObject(isStatic, maxVertices, attributes);
 			indices = new IndexBufferObject(isStatic, maxIndices);
 			isVertexArray = false;
@@ -670,55 +669,6 @@ public class Mesh implements Disposable {
 			break;
 		}
 	}
-	
-	/** Calculate the {@link BoundingBox} of the specified part.
-	 * @param out the bounding box to store the result in. 
-	 * @param offset the start index of the part.
-	 * @param count the amount of indices the part contains. 
-	 * @return the value specified by out. */
-	public BoundingBox calculateBoundingBox(final BoundingBox out, int offset, int count) {
-		return extendBoundingBox(out.inf(), offset, count);
-	}
-	
-	/** Extends the specified {@link BoundingBox} with the specified part.
-	 * @param out the bounding box to store the result in. 
-	 * @param offset the start index of the part.
-	 * @param count the amount of indices the part contains. 
-	 * @return the value specified by out. */
-	public BoundingBox extendBoundingBox(final BoundingBox out, int offset, int count) {
-		int numIndices = getNumIndices();
-		if (offset < 0 || count < 1 || offset + count > numIndices)
-			throw new GdxRuntimeException("Not enough indices");
-		
-		final FloatBuffer verts = vertices.getBuffer();
-		final ShortBuffer index = indices.getBuffer();
-		final VertexAttribute posAttrib = getVertexAttribute(Usage.Position);
-		final int posoff = posAttrib.offset / 4;
-		final int vertexSize = vertices.getAttributes().vertexSize / 4;
-		final int end = offset + count;
-		
-		switch (posAttrib.numComponents) {
-		case 1:
-			for (int i = offset; i < end; i++) {
-				final int idx = index.get(i) * vertexSize + posoff;
-				out.ext(verts.get(idx), 0, 0);
-			}
-			break;
-		case 2:
-			for (int i = offset; i < end; i++) {
-				final int idx = index.get(i) * vertexSize + posoff;
-				out.ext(verts.get(idx), verts.get(idx + 1), 0);
-			}
-			break;
-		case 3:
-			for (int i = offset; i < end; i++) {
-				final int idx = index.get(i) * vertexSize + posoff;
-				out.ext(verts.get(idx), verts.get(idx + 1), verts.get(idx + 2));
-			}
-			break;
-		}
-		return out;
-	}
 
 	/** @return the backing shortbuffer holding the indices. Does not have to be a direct buffer on Android! */
 	public ShortBuffer getIndicesBuffer () {
@@ -847,7 +797,7 @@ public class Mesh implements Disposable {
 		if (start < 0 || count < 1 || ((start + count) * vertexSize) > vertices.length)
 			throw new IndexOutOfBoundsException("start = "+start+", count = "+count+", vertexSize = "+vertexSize+", length = "+vertices.length);
 		
-		final Vector3 tmp = new Vector3();
+		final Vector3 tmp = Vector3.tmp;
 		
 		int idx = offset + (start * vertexSize);
 		switch(dimensions) {
@@ -878,54 +828,6 @@ public class Mesh implements Disposable {
 		}
 	}
 	
-	/** 
-	 * Method to transform the texture coordinates in the mesh. This is a potentially slow operation, use with care.
-	 * It will also create a temporary float[] which will be garbage collected.
-	 * 
-	 * @param matrix the transformation matrix */
-	public void transformUV(final Matrix3 matrix) {
-		transformUV(matrix, 0, getNumVertices());
-	}
-	
-	// TODO: Protected for now, because transforming a portion works but still copies all vertices
-	protected void transformUV(final Matrix3 matrix, final int start, final int count) {
-		final VertexAttribute posAttr = getVertexAttribute(Usage.TextureCoordinates);
-		final int offset = posAttr.offset / 4;
-		final int vertexSize = getVertexSize() / 4;
-		final int numVertices = getNumVertices();
-		
-		final float[] vertices = new float[numVertices * vertexSize];
-		// TODO: getVertices(vertices, start * vertexSize, count * vertexSize);
-		getVertices(0, vertices.length, vertices);
-		transformUV(matrix, vertices, vertexSize, offset, start, count);
-		setVertices(vertices, 0, vertices.length);
-		// TODO: setVertices(start * vertexSize, vertices, 0, vertices.length);
-	}
-	
-	/**
-	 * Method to transform the texture coordinates (UV) in the float array. This is a potentially slow operation, use with care.
-	 * @param matrix the transformation matrix
-	 * @param vertices the float array
-	 * @param vertexSize the number of floats in each vertex
-	 * @param offset the offset within a vertex to the texture location
-	 * @param start the vertex to start with
-	 * @param count the amount of vertices to transform
-	 */
-	public static void transformUV(final Matrix3 matrix, final float[] vertices, int vertexSize, int offset, int start, int count) {
-		if (start < 0 || count < 1 || ((start + count) * vertexSize) > vertices.length)
-			throw new IndexOutOfBoundsException("start = "+start+", count = "+count+", vertexSize = "+vertexSize+", length = "+vertices.length);
-		
-		final Vector2 tmp = new Vector2();
-		
-		int idx = offset + (start * vertexSize);
-		for (int i = 0; i < count; i++) {
-			tmp.set(vertices[idx], vertices[idx+1]).mul(matrix);
-			vertices[idx] = tmp.x;
-			vertices[idx+1] = tmp.y;
-			idx += vertexSize;
-		}
-	}
-	
 	/** Copies this mesh optionally removing duplicate vertices and/or reducing the amount of attributes.
 	 * @param isStatic whether the new mesh is static or not. Allows for internal optimizations.
 	 * @param removeDuplicates whether to remove duplicate vertices if possible. Only the vertices specified by usage are checked.
diff --git a/gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java b/gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
index 9342692..e01a88c 100644
--- a/gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
+++ b/gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java
@@ -33,7 +33,7 @@ public class OrthographicCamera extends Camera {
 	}
 
 	/** Constructs a new OrthographicCamera, using the given viewport width and height. For pixel perfect 2D rendering just supply
-	 * the screen size, for other unit scales (e.g. meters for box2d) proceed accordingly.
+	 * the screen size, for other unit scales (e.g. meters for box2d) proceed accordingly. The camera will show the region [-viewportWidth/2, -viewportHeight / 2]- [viewportWidth/2, viewportHeight/2]
 	 * 
 	 * @param viewportWidth the viewport width
 	 * @param viewportHeight the viewport height */
@@ -45,7 +45,7 @@ public class OrthographicCamera extends Camera {
 	}
 
 	/** Constructs a new OrthographicCamera, using the given viewport width and height. This will create a camera useable for
-	 * iso-metric views. The diamond angle is specifies the angle of a tile viewed isometrically.
+	 * iso-metric views. The diamond angle is specifies the angle of a tile viewed isometrically. 
 	 * 
 	 * @param viewportWidth the viewport width
 	 * @param viewportHeight the viewport height
@@ -83,7 +83,7 @@ public class OrthographicCamera extends Camera {
 
 	private float calculateAngle (float a) {
 		Vector3 camPos = calculateDirection(a);
-		position.set(camPos.mul(30));
+		position.set(camPos.scl(30));
 		lookAt(0, 0, 0);
 		normalizeUp();
 		update();
diff --git a/gdx/src/com/badlogic/gdx/graphics/TextureDict.java b/gdx/src/com/badlogic/gdx/graphics/TextureDict.java
new file mode 100644
index 0000000..bedea20
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/TextureDict.java
@@ -0,0 +1,82 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics;
+
+import com.badlogic.gdx.Files.FileType;
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.Texture.TextureFilter;
+import com.badlogic.gdx.graphics.Texture.TextureWrap;
+import com.badlogic.gdx.utils.ObjectMap;
+
+/** <p>
+ * A texture dictionary is used to track the usage of your textures and supply a single point of access for texture resources. It
+ * stores {@link TextureRef}s by their path. If you need to load the same texture in different parts of your application it will
+ * only be loaded into memory once by the dictionary.
+ * </p>
+ * @deprecated
+ * @author Dave Clayton <contact@redskyforge.com> */
+public class TextureDict {
+
+	private static ObjectMap<String, TextureRef> sDictionary = new ObjectMap<String, TextureRef>();
+
+	/** Loads a new texture into the dictionary as a reference counted {@link TextureRef}.
+	 * @param path the path to the texture image.
+	 * @return the {@TextureRef} representing the texture. */
+	public static TextureRef loadTexture (String path) {
+		return loadTexture(path, TextureFilter.MipMap, TextureFilter.Linear, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge);
+	}
+
+	/** Loads a new texture into the dictionary as a reference counted {@link TextureRef}.
+	 * @param path the path to the texture image.
+	 * @param minFilter minFilter {@link TextureFilter}.
+	 * @param magFilter magFilter {@link TextureFilter}.
+	 * @param uwrap u-wrapping.
+	 * @param vwrap v-wrapping.
+	 * @return the {@TextureRef} representing the texture. */
+	public static TextureRef loadTexture (String path, TextureFilter minFilter, TextureFilter magFilter, TextureWrap uwrap,
+		TextureWrap vwrap) {
+		if (sDictionary.containsKey(path)) {
+			TextureRef ref = sDictionary.get(path);
+			ref.addRef();
+			return ref;
+		}
+		// load new texture
+		FileHandle texFile = Gdx.app.getFiles().getFileHandle(path, FileType.Internal);
+		Texture newTex = new Texture(texFile, minFilter.isMipMap() || magFilter.isMipMap() ? true : false);
+		newTex.setFilter(minFilter, magFilter);
+		newTex.setWrap(uwrap, vwrap);
+		TextureRef ref = new TextureRef(path, newTex);
+		sDictionary.put(path, ref);
+		return ref;
+	}
+
+	/** Removes a texture from the dictionary. In general you should probably not use this - use {@link TextureRef#unload()}
+	 * instead.
+	 * @param path to the texture. */
+	public static void removeTexture (String path) {
+		sDictionary.remove(path);
+	}
+
+	/** Unloads all of the currently managed textures. */
+	public static void unloadAll () {
+		for (TextureRef tex : sDictionary.values()) {
+			tex.dispose();
+		}
+		sDictionary.clear();
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/TextureRef.java b/gdx/src/com/badlogic/gdx/graphics/TextureRef.java
new file mode 100644
index 0000000..7bbbe75
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/TextureRef.java
@@ -0,0 +1,69 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics;
+
+/** <p>
+ * A reference counted wrapper for a {@link Texture}. TextureRefs are managed by the {@link TextureDict}.
+ * </p>
+ * @deprecated
+ * @author Dave Clayton <contact@redskyforge.com> */
+public class TextureRef {
+	public String Name;
+	private int mRefCount;
+	private Texture mTexture;
+
+	/** Create a new TextureRef with the given name and texture.
+	 * @param name The texture's name, typically its filesystem path.
+	 * @param texture The texture it reference counts. */
+	public TextureRef (String name, Texture texture) {
+		Name = name;
+		mTexture = texture;
+		mRefCount = 1;
+	}
+
+	/** Adds a reference to the texture. */
+	public void addRef () {
+		mRefCount++;
+	}
+
+	/** Removes a reference to the texture. If the internal reference count reaches 0, the texture is disposed.
+	 * @return the new reference count. */
+	public int unload () {
+		if (--mRefCount == 0) {
+			mTexture.dispose();
+			mTexture = null;
+			// Note: This doesn't seem the best way to do this, but it works. Re-factoring welcome :)
+			TextureDict.removeTexture(Name);
+		}
+		return mRefCount;
+	}
+
+	public void dispose () {
+		mTexture.dispose();
+	}
+
+	/** Binds the texture in OpenGL. */
+	public void bind () {
+		mTexture.bind();
+	}
+
+	/** Gets the wrapped texture.
+	 * @return the texture. */
+	public Texture get () {
+		return mTexture;
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/VertexAttribute.java b/gdx/src/com/badlogic/gdx/graphics/VertexAttribute.java
index 10ffb3e..251cc55 100644
--- a/gdx/src/com/badlogic/gdx/graphics/VertexAttribute.java
+++ b/gdx/src/com/badlogic/gdx/graphics/VertexAttribute.java
@@ -66,18 +66,6 @@ public final class VertexAttribute {
 	public static VertexAttribute ColorUnpacked () {
 		return new VertexAttribute(Usage.Color, 4, ShaderProgram.COLOR_ATTRIBUTE);
 	}
-	
-	public static VertexAttribute Tangent() {
-		return new VertexAttribute(Usage.Generic, 3, ShaderProgram.TANGENT_ATTRIBUTE);
-	}
-	
-	public static VertexAttribute Binormal() {
-		return new VertexAttribute(Usage.Generic, 3, ShaderProgram.BINORMAL_ATTRIBUTE);
-	}
-	
-	public static VertexAttribute BoneWeight (int unit) {
-		return new VertexAttribute(Usage.Generic, 2, "a_boneWeight" + unit);
-	}
 
 	/** Tests to determine if the passed object was created with the same parameters */
 	@Override
@@ -85,10 +73,7 @@ public final class VertexAttribute {
 		if (!(obj instanceof VertexAttribute)) {
 			return false;
 		}
-		return equals((VertexAttribute)obj);
-	}
-	
-	public boolean equals (final VertexAttribute other) {
-		return other != null && usage == other.usage && numComponents == other.numComponents && alias.equals(other.alias); 
+		final VertexAttribute other = (VertexAttribute)obj;
+		return this.usage == other.usage && this.numComponents == other.numComponents && this.alias.equals(other.alias);
 	}
 }
diff --git a/gdx/src/com/badlogic/gdx/graphics/VertexAttributes.java b/gdx/src/com/badlogic/gdx/graphics/VertexAttributes.java
index 9be9830..6bd8ae6 100644
--- a/gdx/src/com/badlogic/gdx/graphics/VertexAttributes.java
+++ b/gdx/src/com/badlogic/gdx/graphics/VertexAttributes.java
@@ -25,12 +25,12 @@ public final class VertexAttributes {
 	 * 
 	 * @author mzechner */
 	public static final class Usage {
-		public static final int Position = 1;
-		public static final int Color = 2;
-		public static final int ColorPacked = 4;
-		public static final int Normal = 8;
-		public static final int TextureCoordinates = 16;
-		public static final int Generic = 32;
+		public static final int Position = 0;
+		public static final int Color = 1;
+		public static final int ColorPacked = 5;
+		public static final int Normal = 2;
+		public static final int TextureCoordinates = 3;
+		public static final int Generic = 4;
 	}
 
 	/** the attributes in the order they were specified **/
diff --git a/gdx/src/com/badlogic/gdx/graphics/g2d/PolygonRegion.java b/gdx/src/com/badlogic/gdx/graphics/g2d/PolygonRegion.java
index cd18d29..5bd1ed0 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g2d/PolygonRegion.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g2d/PolygonRegion.java
@@ -77,8 +77,8 @@ public class PolygonRegion {
 		for (int i = 0; i < triangulatedVectors.size(); i++) {
 			localVertices[i * 2] = triangulatedVectors.get(i).x;
 			localVertices[i * 2 + 1] = triangulatedVectors.get(i).y;
-			texCoords[i * 2] = region.u + (localVertices[i * 2] - region.getRegionX()) / region.getRegionWidth();
-			texCoords[i * 2 + 1] = region.v + (1 - (localVertices[i * 2 + 1] - region.getRegionY()) / region.getRegionHeight());
+			texCoords[i*2 ] = region.getU() + uvWidth * (localVertices[i*2] / region.getRegionWidth());
+			texCoords[i*2+ 1] = region.getV() + uvHeight * (1-(localVertices[i*2+1] / region.getRegionHeight()));
 		}
 	}
 
diff --git a/gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java b/gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
index 1b82a4f..b142b7c 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g2d/Sprite.java
@@ -245,7 +245,8 @@ public class Sprite extends TextureRegion {
 		vertices[X4] += xAmount;
 		vertices[Y4] += yAmount;
 	}
-
+	
+	/** Sets the color used to tint this sprite. Default is {@link Color#WHITE}. */
 	public void setColor (Color tint) {
 		float color = tint.toFloatBits();
 		float[] vertices = this.vertices;
@@ -254,7 +255,8 @@ public class Sprite extends TextureRegion {
 		vertices[C3] = color;
 		vertices[C4] = color;
 	}
-
+	
+	/** @see #setColor(Color) */
 	public void setColor (float r, float g, float b, float a) {
 		int intBits = ((int)(255 * a) << 24) | ((int)(255 * b) << 16) | ((int)(255 * g) << 8) | ((int)(255 * r));
 		float color = NumberUtils.intToFloatColor(intBits);
@@ -265,6 +267,8 @@ public class Sprite extends TextureRegion {
 		vertices[C4] = color;
 	}
 
+	/** @see #setColor(Color)
+	 * @see Color#toFloatBits() */
 	public void setColor (float color) {
 		float[] vertices = this.vertices;
 		vertices[C1] = color;
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/AnimatedModelInstance.java b/gdx/src/com/badlogic/gdx/graphics/g3d/AnimatedModelInstance.java
new file mode 100644
index 0000000..ea207db
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/AnimatedModelInstance.java
@@ -0,0 +1,25 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d;
+
+public interface AnimatedModelInstance extends StillModelInstance {
+	public String getAnimation ();
+
+	public float getAnimationTime ();
+
+	public boolean isLooping ();
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/AnimatedModelNode.java b/gdx/src/com/badlogic/gdx/graphics/g3d/AnimatedModelNode.java
new file mode 100644
index 0000000..63950aa
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/AnimatedModelNode.java
@@ -0,0 +1,69 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d;
+
+import com.badlogic.gdx.graphics.g3d.materials.Material;
+
+public class AnimatedModelNode extends StillModelNode implements AnimatedModelInstance {
+	public String animation;
+	public float time;
+	public boolean looping;
+	
+	public AnimatedModelNode() {
+		super();
+	}
+	
+	public AnimatedModelNode(Material[] materials) {
+		super(materials);
+	}
+
+	@Override
+	public String getAnimation () {
+		return animation;
+	}
+
+	@Override
+	public float getAnimationTime () {
+		return time;
+	}
+
+	@Override
+	public boolean isLooping () {
+		return looping;
+	}
+
+	public AnimatedModelNode copy () {
+		final AnimatedModelNode copy = new AnimatedModelNode();
+		if (materials != null) {
+			final int len = materials.length;
+			Material[] mats = new Material[len];
+			for (int i = 0; i < len; i++) {
+				mats[i] = materials[i].copy();
+			}
+			copy.materials = mats;
+		}
+		copy.matrix.set(matrix.val);
+		copy.origin.set(origin);
+		copy.radius = radius;
+		copy.transformedPosition.set(transformedPosition);
+		copy.animation = animation;
+		copy.time = time;
+		copy.looping = looping;
+		return copy;
+	}
+
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/Light.java b/gdx/src/com/badlogic/gdx/graphics/g3d/Light.java
deleted file mode 100644
index 1eb24f3..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/Light.java
+++ /dev/null
@@ -1,130 +0,0 @@
-package com.badlogic.gdx.graphics.g3d;
-
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.math.Vector3;
-
-/** Basic general light class which can represent an ambient, directional, point and spot light.
- * Extend this class to add additional data.
- * @author Xoppa */
-public class Light {
-	public final static int NONE = 			0x00; // Inactive
-	public final static int AMBIENT = 		0x01; // Active
-	public final static int POINT = 			0x03; // Active | Position
-	public final static int DIRECTIONAL = 	0x05; // Active | Direction
-	public final static int SPOT = 			0x07; // Active | Position | Direction
-	
-	/** The type of light */
-	public int type = NONE;
-	/** The (diffuse) color of the light */
-	public final Color color = new Color();
-	/** The position of the light, only applicable for point and spot lights. */ 
-	public final Vector3 position = new Vector3(0,0,0);
-	/** The constant (x), linear (y) and quadratic (z) attenuation of the light, only applicable for point and spot lights. */
-	public final Vector3 attenuation = new Vector3(1, 0, 0);
-	/** The direction of the light, only applicable for directional and spot lights. */
-	public final Vector3 direction = new Vector3(0,-1,0);
-	/** The cut off angle of the light, only applicable for spot lights. */ 
-	public float angle = 90f;
-	/** The exponent (focus) of the light (range [0,128]), only applicable for spot lights. */
-	public float exponent = 0f;
-	
-	public Light() { }
-	
-	/** Create a new light which is a copy of the specified light. */
-	public Light(final Light other) {
-		set(other);
-	}
-	
-	/** Create a new ambient light */
-	public Light(final Color color) {
-		this(color.r, color.g, color.b, color.a);
-	}
-	
-	/** Create a new ambient light */
-	public Light(float r, float g, float b, float a) {
-		this.color.set(r, g, b, a);
-		type = AMBIENT;
-	}
-	
-	/** Create a new directional light */
-	public Light(final Color color, final Vector3 direction) {
-		this(color.r, color.g, color.b, color.a, direction.x, direction.y, direction.z);
-	}
-	
-	/** Create a new directional light */
-	public Light(float r, float g, float b, float a, float x, float y, float z) {
-		this.color.set(r, g, b, a);
-		this.direction.set(x, y, z).nor();
-		type = DIRECTIONAL;
-	}
-	
-	/** Create a new point light */
-	public Light(final Color color, final Vector3 position, final Vector3 attenuation) {
-		this(color.r, color.g, color.b, color.a, position.x, position.y, position.z, attenuation.x, attenuation.y, attenuation.z);
-	}
-	
-	/** Create a new point light */
-	public Light(float red, float green, float blue, float alpha, float x, float y, float z, 
-						float attConstant, float attLinear, float attQuadratic) {
-		color.set(red, green, blue, alpha);
-		this.position.set(x, y, z);
-		this.attenuation.set(attConstant, attLinear, attQuadratic);
-		type = POINT;
-	}
-	
-	/** Create a new spot light */
-	public Light(final Color color, final Vector3 position, final Vector3 direction, final float angle, final Vector3 attenuation) {
-		this(color.r, color.g, color.b, color.a, position.x, position.y, position.z, 
-			direction.x, direction.y, direction.z, angle, attenuation.x, attenuation.y, attenuation.z);
-	}
-	
-	/** Create a new spot light */
-	public Light(float red, float green, float blue, float alpha, float x, float y, float z, float dirX, float dirY, float dirZ, 
-						float angle, float attConstant, float attLinear, float attQuadratic) {
-		this.color.set(red, green, blue, alpha);
-		this.position.set(x, y, z);
-		this.direction.set(dirX, dirY, dirZ).nor();
-		this.angle = angle;
-		this.attenuation.set(attConstant, attLinear, attQuadratic);
-		type = SPOT;
-	}
-	
-	/** Set the values of this light to the values of the given light. */
-	public void set(final Light other) {
-		if (other == null)
-			type = NONE;
-		else {
-			type = other.type;
-			color.set(other.color);
-			position.set(other.position);
-			direction.set(other.direction);
-			angle = other.angle;
-			attenuation.set(other.attenuation);
-			exponent = other.exponent;
-		}
-	}
-	
-	public boolean equals(Light other) {
-		if (other == null) return false;
-		if (other == this) return true;
-		if (type != other.type)
-			return false;
-		if (!color.equals(other.color))
-			return false;
-		if ((type == POINT || type == SPOT) && (!position.equals(other.position) || !attenuation.equals(other.attenuation)))
-			return false;
-		if ((type == DIRECTIONAL || type == SPOT) && !direction.equals(other.direction))
-			return false;
-		if (type == SPOT && (angle != other.angle || exponent != other.exponent))
-			return false;
-		return true;
-	}
-	
-	@Override
-	public boolean equals (Object arg0) {
-		if (arg0 == null) return false;
-		if (arg0 == this) return true;
-		if (!(arg0 instanceof Light)) return false;
-		return equals((Light)arg0);
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/Model.java b/gdx/src/com/badlogic/gdx/graphics/g3d/Model.java
deleted file mode 100644
index 6c1e92e..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/Model.java
+++ /dev/null
@@ -1,347 +0,0 @@
-package com.badlogic.gdx.graphics.g3d;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.assets.loaders.ModelLoader;
-import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.VertexAttributes;
-import com.badlogic.gdx.graphics.g3d.materials.BlendingAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.FloatAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
-import com.badlogic.gdx.graphics.g3d.model.Animation;
-import com.badlogic.gdx.graphics.g3d.model.MeshPart;
-import com.badlogic.gdx.graphics.g3d.model.NodeAnimation;
-import com.badlogic.gdx.graphics.g3d.model.NodeKeyframe;
-import com.badlogic.gdx.graphics.g3d.model.NodePart;
-import com.badlogic.gdx.graphics.g3d.model.Node;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelAnimation;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelNodeKeyframe;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelData;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelMesh;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelNode;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelTexture;
-import com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor;
-import com.badlogic.gdx.graphics.g3d.utils.TextureProvider;
-import com.badlogic.gdx.graphics.g3d.utils.TextureProvider.FileTextureProvider;
-import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.math.collision.BoundingBox;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.ArrayMap;
-import com.badlogic.gdx.utils.BufferUtils;
-import com.badlogic.gdx.utils.Disposable;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-import com.badlogic.gdx.utils.ObjectMap;
-import com.badlogic.gdx.utils.Pool;
-
-/**
- * A model represents a 3D assets. It stores a hierarchy of nodes. A node has a transform and optionally
- * a graphical part in form of a {@link MeshPart} and {@link Material}. Mesh parts reference subsets of
- * vertices in one of the meshes of the model. Animations can be applied to nodes, to modify their
- * transform (translation, rotation, scale) over time.</p>
- *
- * A model can be rendered by creating a {@link ModelInstance} from it. That instance has an additional
- * transform to position the model in the world, and allows modification of materials and nodes without
- * destroying the original model. The original model is the owner of any meshes and textures, all instances
- * created from the model share these resources. Disposing the model will automatically make all instances
- * invalid!</p>
- * 
- * A model is created from {@link ModelData}, which in turn is loaded by a {@link ModelLoader}.
- *   
- * @author badlogic
- *
- */
-public class Model implements Disposable {
-	/** the meshes of the model **/
-	public final Array<Mesh> meshes = new Array<Mesh>();
-	/** parts of meshes, used by nodes that have a graphical representation FIXME not sure if superfluous, stored in Nodes as well, could be useful to create bullet meshes **/
-	public final Array<MeshPart> meshParts = new Array<MeshPart>();
-	/** the materials of the model, used by nodes that have a graphical representation FIXME not sure if superfluous, allows modification of materials without having to traverse the nodes**/
-	public final Array<Material> materials = new Array<Material>();
-	/** root nodes of the model **/
-	public final Array<Node> nodes = new Array<Node>();
-	/** animations of the model, modifying node transformations **/
-	public Array<Animation> animations = new Array<Animation>();
-	/** List of disposable resources like textures or meshes the Model is responsible for disposing **/
-	protected Array<Disposable> disposables = new Array<Disposable>();
-	
-	/** Constructs an empty model. Manual created models do not manage their resources by default. 
-	 * Use {@link #manageDisposable(Disposable)} to add resources to be managed by this model. */
-	public Model() {}
-	
-	/**
-	 * Constructs a new Model based on the {@link ModelData}. Texture files
-	 * will be loaded from the internal file storage via an {@link FileTextureProvider}.
-	 * @param modelData
-	 */
-	public Model(ModelData modelData) {
-		load(modelData, new FileTextureProvider());
-	}
-	
-	public Model(ModelData modelData, TextureProvider textureProvider) {
-		load(modelData, textureProvider);
-	}
-	
-	private void load (ModelData modelData, TextureProvider textureProvider) {
-		loadMeshes(modelData.meshes);
-		loadMaterials(modelData.materials, textureProvider);
-		loadNodes(modelData.nodes);
-		loadAnimations(modelData.animations);
-		calculateTransforms();
-		setInitialTransform(null);
-	}
-	
-	private void loadAnimations (Iterable<ModelAnimation> modelAnimations) {
-		for (final ModelAnimation anim : modelAnimations) {
-			Animation animation = new Animation();
-			animation.id = anim.id;
-			for (ModelNodeAnimation nanim : anim.nodeAnimations) {
-				final Node node = getNode(nanim.nodeId);
-				if (node == null)
-					continue;
-				NodeAnimation nodeAnim = new NodeAnimation();
-				nodeAnim.node = node;
-				for (ModelNodeKeyframe kf : nanim.keyframes) {
-					if (kf.keytime > animation.duration)
-						animation.duration = kf.keytime;
-					NodeKeyframe keyframe = new NodeKeyframe();
-					keyframe.keytime = kf.keytime;
-					keyframe.rotation.set(kf.rotation == null ? node.rotation : kf.rotation);
-					keyframe.scale.set(kf.scale == null ? node.scale : kf.scale);
-					keyframe.translation.set(kf.translation == null ? node.translation : kf.translation);					
-					nodeAnim.keyframes.add(keyframe);
-				}
-				if (nodeAnim.keyframes.size > 0)
-					animation.nodeAnimations.add(nodeAnim);
-			}
-			if (animation.nodeAnimations.size > 0)
-				animations.add(animation);
-		}
-	}
-
-	private ObjectMap<NodePart, String[]> nodePartBones = new ObjectMap<NodePart, String[]>(); // FIXME Does this preserve array index? 
-	private void loadNodes (Iterable<ModelNode> modelNodes) {
-		nodePartBones.clear();
-		for(ModelNode node: modelNodes) {
-			nodes.add(loadNode(null, node));
-		}
-		for (ObjectMap.Entry<NodePart,String[]> e : nodePartBones.entries()) {
-			if (e.key.bones == null)
-				e.key.bones = new ArrayMap<Node, Matrix4>();
-			e.key.bones.clear();
-			for (final String n : e.value)
-				e.key.bones.put(getNode(n), null); // null because transform only has meaning for ModelInstance 
-		}
-	}
-
-	private Node loadNode (Node parent, ModelNode modelNode) {
-		Node node = new Node();
-		node.id = modelNode.id;
-		// node.boneId = modelNode.boneId; // FIXME check meaning of this, breadth first index of node hierarchy?
-		node.parent = parent;
-		if (modelNode.translation != null)
-			node.translation.set(modelNode.translation);
-		if (modelNode.rotation != null)
-			node.rotation.set(modelNode.rotation);
-		if (modelNode.scale != null)
-			node.scale.set(modelNode.scale);
-		// FIXME create temporary maps for faster lookup?
-		if (modelNode.parts != null) {
-			for(ModelNodePart modelNodePart: modelNode.parts) {
-				MeshPart meshPart = null;
-				Material meshMaterial = null;
-				if(modelNodePart.meshPartId != null) {
-					for(MeshPart part: meshParts) {
-						// FIXME need to make sure this is unique by adding mesh id to mesh part id!
-						if(modelNodePart.meshPartId.equals(part.id)) {
-							meshPart = part;
-							break;
-						}
-					}
-				}
-				if(modelNodePart.materialId != null) {
-					for(Material material: materials) {
-						if(modelNodePart.materialId.equals(material.id)) {
-							meshMaterial = material;
-							break;
-						}
-					}
-				}
-				
-				// FIXME what if meshPart is set but meshMaterial isn't and vice versa?
-				if(meshPart != null && meshMaterial != null) {
-					NodePart nodePart = new NodePart();
-					nodePart.meshPart = meshPart;
-					nodePart.material = meshMaterial;
-					node.parts.add(nodePart);
-					if (modelNodePart.bones != null)
-						nodePartBones.put(nodePart, modelNodePart.bones);
-				}
-			}
-		}
-		
-		if(modelNode.children != null) {
-			for(ModelNode child: modelNode.children) {
-				node.children.add(loadNode(node, child));
-			}
-		}
-		
-		return node;
-	}
-
-	private void loadMeshes (Iterable<ModelMesh> meshes) {
-		for(ModelMesh mesh: meshes) {
-			convertMesh(mesh);
-		}
-	}
-
-	private void convertMesh (ModelMesh modelMesh) {
-		int numIndices = 0;
-		for(ModelMeshPart part: modelMesh.parts) {
-			numIndices += part.indices.length;
-		}
-		VertexAttributes attributes = new VertexAttributes(modelMesh.attributes);
-		int numVertices = modelMesh.vertices.length / (attributes.vertexSize / 4);
-		
-		Mesh mesh = new Mesh(true, numVertices, numIndices, attributes);
-		meshes.add(mesh);
-		disposables.add(mesh);
-		
-		BufferUtils.copy(modelMesh.vertices, mesh.getVerticesBuffer(), modelMesh.vertices.length, 0);
-		int offset = 0;
-		mesh.getIndicesBuffer().clear();
-		for(ModelMeshPart part: modelMesh.parts) {
-			MeshPart meshPart = new MeshPart();
-			meshPart.id = part.id; // FIXME not storing the mesh name, part ids may collide!
-			meshPart.primitiveType = part.primitiveType;
-			meshPart.indexOffset = offset;
-			meshPart.numVertices = part.indices.length;
-			meshPart.mesh = mesh;
-			mesh.getIndicesBuffer().put(part.indices);
-			offset += meshPart.numVertices;
-			meshParts.add(meshPart);
-		}
-		mesh.getIndicesBuffer().position(0);
-	}
-
-	private void loadMaterials (Iterable<ModelMaterial> modelMaterials, TextureProvider textureProvider) {
-		for(ModelMaterial mtl: modelMaterials) {
-			this.materials.add(convertMaterial(mtl, textureProvider));
-		}
-	}
-	
-	private Material convertMaterial(ModelMaterial mtl, TextureProvider textureProvider) {
-		Material result = new Material();
-		result.id = mtl.id;
-		if (mtl.ambient != null)
-			result.set(new ColorAttribute(ColorAttribute.Ambient, mtl.ambient));
-		if (mtl.diffuse != null)
-			result.set(new ColorAttribute(ColorAttribute.Diffuse, mtl.diffuse));
-		if (mtl.specular != null)
-			result.set(new ColorAttribute(ColorAttribute.Specular, mtl.specular));
-		if (mtl.emissive != null)
-			result.set(new ColorAttribute(ColorAttribute.Emissive, mtl.emissive));
-		if (mtl.shininess > 0f)
-			result.set(new FloatAttribute(FloatAttribute.Shininess, mtl.shininess));
-		
-		ObjectMap<String, Texture> textures = new ObjectMap<String, Texture>();
-		
-		// FIXME mipmapping totally ignored, filters totally ignored, uvScaling/uvTranslation totally ignored
-		if(mtl.diffuseTextures != null) {
-			for(ModelTexture tex: mtl.diffuseTextures) {
-				if(textures.containsKey(tex.fileName)) continue;
-				Texture texture = textureProvider.load(tex.fileName);
-				textures.put(tex.fileName, texture);
-				disposables.add(texture);
-			}
-			
-			for(ModelTexture tex: mtl.diffuseTextures) {
-				TextureDescriptor descriptor = new TextureDescriptor();
-				descriptor.texture = textures.get(tex.fileName);
-				descriptor.minFilter = GL20.GL_LINEAR;
-				descriptor.magFilter = GL20.GL_LINEAR;
-				descriptor.uWrap = GL20.GL_CLAMP_TO_EDGE;
-				descriptor.vWrap = GL20.GL_CLAMP_TO_EDGE;
-				result.set(new TextureAttribute(TextureAttribute.Diffuse, descriptor));
-			}
-		}
-		
-		return result;
-	}
-	
-	private void setInitialTransform(Node node) {
-		if (node != null)
-			node.invInitialTransform.set(node.globalTransform).inv();
-		for (Node child : (node == null ? nodes : node.children))
-			setInitialTransform(child);
-	}
-	
-	/**
-	 * Calculates the local and world transform of all {@link Node} instances in this model, recursively.
-	 * First each {@link Node#localTransform} transform is calculated based on the translation, rotation and
-	 * scale of each Node. Then each {@link Node#calculateWorldTransform()}
-	 * is calculated, based on the parent's world transform and the local transform of each Node.</p>
-	 * 
-	 * This method can be used to recalculate all transforms if any of the Node's local properties (translation, rotation, scale)
-	 * was modified.
-	 */
-	public void calculateTransforms() {
-		for(Node node: nodes) {
-			node.calculateTransforms(true);
-		}
-	}
-	
-	/**
-	 * Adds a {@link Disposable} to be managed and disposed by this Model. Can
-	 * be used to keep track of manually loaded textures for {@link ModelInstance}.
-	 * @param disposable the Disposable
-	 */
-	public void manageDisposable(Disposable disposable) {
-		if (!disposables.contains(disposable, true))
-			disposables.add(disposable);
-	}
-	
-	public Iterable<Disposable> getManagedDisposables() {
-		return disposables;
-	}
-
-	@Override
-	public void dispose () {
-		for(Disposable disposable: disposables) {
-			disposable.dispose();
-		}
-	}
-
-	private final BoundingBox meshBounds = new BoundingBox();
-	public BoundingBox getBoundingBox(final BoundingBox out) {
-		out.inf();
-		for (Mesh mesh : meshes) {
-			mesh.calculateBoundingBox(meshBounds);
-			out.ext(meshBounds);
-		}
-		return out;
-	}
-	
-	public Node getNode(final String id) {
-		return getNode(id, nodes);
-	}
-	
-	private Node getNode(final String id, final Iterable<Node> nodes) {
-		for (final Node node : nodes) {
-			if (node.id.equals(id))
-				return node;
-			final Node n = getNode(id, node.children);
-			if (n != null)
-				return n;
-		}
-		return null;
-	}
-}
\ No newline at end of file
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/ModelBatch.java b/gdx/src/com/badlogic/gdx/graphics/g3d/ModelBatch.java
deleted file mode 100644
index f2f7ffe..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/ModelBatch.java
+++ /dev/null
@@ -1,202 +0,0 @@
-package com.badlogic.gdx.graphics.g3d;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.Camera;
-import com.badlogic.gdx.graphics.g3d.lights.Lights;
-import com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter;
-import com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider;
-import com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder;
-import com.badlogic.gdx.graphics.g3d.utils.RenderContext;
-import com.badlogic.gdx.graphics.g3d.utils.RenderableSorter;
-import com.badlogic.gdx.graphics.g3d.utils.ShaderProvider;
-import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.Disposable;
-import com.badlogic.gdx.utils.Pool;
-
-public class ModelBatch implements Disposable {
-	protected Camera camera;
-	protected final Pool<Renderable> renderablesPool = new Pool<Renderable>() {
-		@Override
-		protected Renderable newObject () {
-			return new Renderable();
-		}
-
-		@Override
-		public Renderable obtain () {
-			Renderable renderable = super.obtain();
-			renderable.lights = null;
-			renderable.material = null;
-			renderable.mesh = null;
-			renderable.shader = null;
-			return renderable;
-		}
-	};
-	/** list of Renderables to be rendered in the current batch **/
-	protected final Array<Renderable> renderables = new Array<Renderable>();
-	/** list of Renderables that can be put back into the pool **/
-	protected final Array<Renderable> reuseableRenderables = new Array<Renderable>();
-	/** the {@link RenderContext} **/
-	protected final RenderContext context;
-	/** the {@link ShaderProvider}, provides {@link Shader} instances for Renderables **/
-	protected final ShaderProvider shaderProvider;
-	/** the {@link RenderableSorter} **/
-	protected final RenderableSorter sorter;
-	
-	/** Construct a BaseRenderBatch with the specified listener */
-	public ModelBatch(RenderContext context, ShaderProvider shaderProvider, RenderableSorter sorter) {
-		this.context = context;
-		this.shaderProvider = shaderProvider;
-		this.sorter = sorter;
-	}
-	
-	/** Construct a BaseRenderBatch with the default implementation */
-	public ModelBatch() {
-		this(new RenderContext(new DefaultTextureBinder(DefaultTextureBinder.ROUNDROBIN)),
-			  new DefaultShaderProvider(),
-			  new DefaultRenderableSorter());
-	}
-
-	public void begin (Camera cam) {
-		this.camera = cam;
-	}
-
-	public void end () {
-		sorter.sort(camera, renderables);
-		context.begin();
-		Shader currentShader = null;
-		for (int i = 0; i < renderables.size; i++) {
-			final Renderable renderable = renderables.get(i);
-			if (currentShader != renderable.shader) {
-				if (currentShader != null)
-					currentShader.end();
-				currentShader = renderable.shader;
-				currentShader.begin(camera, context);
-			}
-			currentShader.render(renderable);
-		}
-		if (currentShader != null)
-			currentShader.end();
-		context.end();
-		renderablesPool.freeAll(reuseableRenderables);
-		reuseableRenderables.clear();
-		renderables.clear();
-		camera = null;
-	}
-
-	public void render(final Renderable renderable) {
-		renderable.shader = shaderProvider.getShader(renderable);
-		renderable.mesh.setAutoBind(false);
-		renderables.add(renderable);
-	}
-	
-	/**
-	 * Calls {@link RenderableProvider#getRenderables(Array, Pool)} and adds
-	 * all returned {@link Renderable} instances to the current batch to be
-	 * rendered.
-	 * @param renderableProvider the renderable provider
-	 */
-	public void render(final RenderableProvider renderableProvider) {
-		render(renderableProvider, null, null);
-	}
-	
-	/**
-	 * Calls {@link RenderableProvider#getRenderables(Array, Pool)} and adds
-	 * all returned {@link Renderable} instances to the current batch to be
-	 * rendered.
-	 * @param renderableProviders one or more renderable providers
-	 */
-	public <T extends RenderableProvider> void render(final Iterable<T> renderableProviders) {
-		render(renderableProviders, null, null);
-	}
-	
-	/**
-	 * Calls {@link RenderableProvider#getRenderables(Array, Pool)} and adds
-	 * all returned {@link Renderable} instances to the current batch to be
-	 * rendered. Any lights set on the returned renderables will be replaced
-	 * with the given lights
-	 * @param renderableProvider the renderable provider
-	 * @param lights the lights to use for the renderables
-	 */
-	public void render(final RenderableProvider renderableProvider, final Lights lights) {
-		render(renderableProvider, lights, null);
-	}
-	
-	/**
-	 * Calls {@link RenderableProvider#getRenderables(Array, Pool)} and adds
-	 * all returned {@link Renderable} instances to the current batch to be
-	 * rendered. Any lights set on the returned renderables will be replaced
-	 * with the given lights
-	 * @param renderableProviders one or more renderable providers
-	 * @param lights the lights to use for the renderables
-	 */
-	public <T extends RenderableProvider> void render(final Iterable<T> renderableProviders, final Lights lights) {
-		render(renderableProviders, lights, null);
-	}
-	
-	/**
-	 * Calls {@link RenderableProvider#getRenderables(Array, Pool)} and adds
-	 * all returned {@link Renderable} instances to the current batch to be
-	 * rendered. Any shaders set on the returned renderables will be replaced
-	 * with the given {@link Shader}.
-	 * @param renderableProvider the renderable provider
-	 * @param shader the shader to use for the renderables
-	 */
-	public void render(final RenderableProvider renderableProvider, final Shader shader) {
-		render(renderableProvider, null, shader);
-	}
-	
-	/**
-	 * Calls {@link RenderableProvider#getRenderables(Array, Pool)} and adds
-	 * all returned {@link Renderable} instances to the current batch to be
-	 * rendered. Any shaders set on the returned renderables will be replaced
-	 * with the given {@link Shader}.
-	 * @param renderableProviders one or more renderable providers
-	 * @param shader the shader to use for the renderables
-	 */
-	public <T extends RenderableProvider> void render(final Iterable<T> renderableProviders, final Shader shader) {
-		render(renderableProviders, null, shader);
-	}
-
-	/**
-	 * Calls {@link RenderableProvider#getRenderables(Array, Pool)} and adds
-	 * all returned {@link Renderable} instances to the current batch to be
-	 * rendered. Any lights set on the returned renderables will be replaced
-	 * with the given lights. Any shaders set on the returned renderables will
-	 * be replaced by the given {@link Shader}.
-	 * @param renderableProvider the renderable provider
-	 * @param lights the lights to use for the renderables
-	 * @param shader the shader to use for the renderables
-	 */
-	public void render(final RenderableProvider renderableProvider, final Lights lights, final Shader shader) {
-		int offset = renderables.size;
-		renderableProvider.getRenderables(renderables, renderablesPool);
-		for (int i = offset; i < renderables.size; i++) {
-			Renderable renderable = renderables.get(i);
-			renderable.lights = lights;
-			renderable.shader = shader;
-			renderable.shader = shaderProvider.getShader(renderable);
-			reuseableRenderables.add(renderable);
-		}
-	}
-	
-	/**
-	 * Calls {@link RenderableProvider#getRenderables(Array, Pool)} and adds
-	 * all returned {@link Renderable} instances to the current batch to be
-	 * rendered. Any lights set on the returned renderables will be replaced
-	 * with the given lights. Any shaders set on the returned renderables will
-	 * be replaced by the given {@link Shader}.
-	 * @param renderableProviders one or more renderable providers
-	 * @param lights the lights to use for the renderables
-	 * @param shader the shader to use for the renderables
-	 */
-	public <T extends RenderableProvider> void render(final Iterable<T> renderableProviders, final Lights lights, final Shader shader) {
-		for (final RenderableProvider renderableProvider : renderableProviders)
-			render(renderableProvider, lights, shader);
-	}
-
-	@Override
-	public void dispose () {
-		shaderProvider.dispose();
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/ModelInstance.java b/gdx/src/com/badlogic/gdx/graphics/g3d/ModelInstance.java
deleted file mode 100644
index 310011d..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/ModelInstance.java
+++ /dev/null
@@ -1,330 +0,0 @@
-package com.badlogic.gdx.graphics.g3d;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.model.Animation;
-import com.badlogic.gdx.graphics.g3d.model.MeshPart;
-import com.badlogic.gdx.graphics.g3d.model.NodeAnimation;
-import com.badlogic.gdx.graphics.g3d.model.NodeKeyframe;
-import com.badlogic.gdx.graphics.g3d.model.NodePart;
-import com.badlogic.gdx.graphics.g3d.model.Node;
-import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.math.collision.BoundingBox;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.ArrayMap;
-import com.badlogic.gdx.utils.Disposable;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-import com.badlogic.gdx.utils.ObjectMap;
-import com.badlogic.gdx.utils.Pool;
-
-/**
- * An instance of a {@link Model}, allows to specify global transform and modify the materials, as it
- * has a copy of the model's materials. Multiple instances can be created from the same Model, 
- * all sharing the meshes and textures of the Model. The Model owns the meshes and textures, to 
- * dispose of these, the Model has to be disposed.</p>
- * 
- * The ModelInstance creates a full copy of all materials and nodes.
- * @author badlogic
- *
- */
-public class ModelInstance implements RenderableProvider {
-	/** the {@link Model} this instances derives from **/
-	public final Model model;
-	/** the world transform **/
-	public Matrix4 transform;
-	/** a copy of the materials of the original model **/
-	public final Array<Material> materials = new Array<Material>();
-	/** a copy of the nodes of the original model, referencing the copied materials in their {@link NodePart} instances **/
-	public final Array<Node> nodes = new Array<Node>();
-	/** a copy of the animations of the original model **/
-	public final Array<Animation> animations = new Array<Animation>();
-	/** user definable value, which is passed to the shader. */
-	public Object userData;
-	
-	public Animation currentAnimation; // FIXME should allow multiple animations or at least transition?
-	public float currentAnimTime; // FIXME should allow multiple animations or at least transition?
-	
-	/** Constructs a new ModelInstance with all nodes and materials of the given model. */
-	public ModelInstance(Model model) {
-		this(model, (String[])null);
-	}
-	
-	/** Constructs a new ModelInstance with only the specified nodes and materials of the given model. */
-	public ModelInstance(Model model, final String... rootNodeIds) {
-		this(model, null, rootNodeIds);
-	}
-	
-	/** Constructs a new ModelInstance with only the specified nodes and materials of the given model. */
-	public ModelInstance(Model model, final Matrix4 transform, final String... rootNodeIds) {
-		this.model = model;
-		this.transform = transform == null ? new Matrix4() : transform;
-		if (rootNodeIds == null)
-			copyNodes(model.nodes);
-		else
-			copyNodes(model.nodes, rootNodeIds);
-		copyAnimations(model.animations);
-		calculateTransforms();
-	}
-	
-	/** Constructs a new ModelInstance with only the specified nodes and materials of the given model. */
-	public ModelInstance(Model model, final Array<String> rootNodeIds) {
-		this(model, null, rootNodeIds);
-	}
-	
-	/** Constructs a new ModelInstance with only the specified nodes and materials of the given model. */
-	public ModelInstance(Model model, final Matrix4 transform, final Array<String> rootNodeIds) {
-		this.model = model;
-		this.transform = transform == null ? new Matrix4() : transform;
-		copyNodes(model.nodes, rootNodeIds);
-		copyAnimations(model.animations);
-		calculateTransforms();
-	}
-	
-	/** Constructs a new ModelInstance at the specified position. */
-	public ModelInstance(Model model, Vector3 position) {
-		this(model);
-		this.transform.setToTranslation(position);
-	}
-	
-	/** Constructs a new ModelInstance at the specified position. */
-	public ModelInstance(Model model, float x, float y, float z) {
-		this(model);
-		this.transform.setToTranslation(x, y, z);
-	}
-	
-	/** Constructs a new ModelInstance with the specified transform. */
-	public ModelInstance(Model model, Matrix4 transform) {
-		this(model, transform, (String[])null);
-	}
-	
-	/** Constructs a new ModelInstance which is an copy of the specified ModelInstance. */
-	public ModelInstance(ModelInstance copyFrom) {
-		this(copyFrom, copyFrom.transform.cpy());
-	}
-	
-	/** Constructs a new ModelInstance which is an copy of the specified ModelInstance. */
-	public ModelInstance(ModelInstance copyFrom, final Matrix4 transform) {
-		this.model = copyFrom.model;
-		this.transform = transform == null ? new Matrix4() : transform;
-		copyNodes(copyFrom.nodes);
-		copyAnimations(copyFrom.animations);
-		calculateTransforms();
-	}
-	
-	/** @return A newly created ModelInstance which is a copy of this ModelInstance */
-	public ModelInstance copy() {
-		return new ModelInstance(this);
-	}
-
-	private ObjectMap<NodePart, String[]> nodePartBones = new ObjectMap<NodePart, String[]>();
-	private void copyNodes (Array<Node> nodes) {
-		nodePartBones.clear();
-		for(Node node: nodes) {
-			this.nodes.add(copyNode(null, node));
-		}
-		setBones();
-	}
-	
-	private void copyNodes (Array<Node> nodes, final String... nodeIds) {
-		nodePartBones.clear();
-		for(Node node: nodes) {
-			for (final String nodeId : nodeIds) {
-				if (nodeId.equals(node.id)) {
-					this.nodes.add(copyNode(null, node));
-					break;
-				}
-			}
-		}
-		setBones();
-	}
-	
-	private void copyNodes (Array<Node> nodes, final Array<String> nodeIds) {
-		nodePartBones.clear();
-		for(Node node: nodes) {
-			for (final String nodeId : nodeIds) {
-				if (nodeId.equals(node.id)) {
-					this.nodes.add(copyNode(null, node));
-					break;
-				}
-			}
-		}
-		setBones();
-	}
-	
-	private void setBones() {
-		for (ObjectMap.Entry<NodePart,String[]> e : nodePartBones.entries()) {
-			if (e.key.bones == null)
-				e.key.bones = new ArrayMap<Node, Matrix4>(true, e.value.length, Node.class, Matrix4.class);
-			e.key.bones.clear();
-			for (final String n : e.value) {
-				final Node node = getNode(n);
-				e.key.bones.put(node, node == null ? null : node.boneTransform);
-			}
-		}
-	}
-	
-	private Node copyNode(Node parent, Node node) {
-		Node copy = new Node();
-		copy.id = node.id;
-		//copy.boneId = node.boneId;
-		copy.parent = parent;
-		copy.translation.set(node.translation);
-		copy.rotation.set(node.rotation);
-		copy.scale.set(node.scale);
-		copy.localTransform.set(node.localTransform);
-		copy.globalTransform.set(node.globalTransform);
-		copy.invInitialTransform.set(node.invInitialTransform);
-		for(NodePart nodePart: node.parts) {
-			copy.parts.add(copyNodePart(nodePart));
-		}
-		for(Node child: node.children) {
-			copy.children.add(copyNode(copy, child));
-		}
-		return copy;
-	}
-	
-	private NodePart copyNodePart (NodePart nodePart) {
-		NodePart copy = new NodePart();
-		copy.meshPart = new MeshPart();
-		copy.meshPart.id = nodePart.meshPart.id;
-		copy.meshPart.indexOffset = nodePart.meshPart.indexOffset;
-		copy.meshPart.numVertices = nodePart.meshPart.numVertices;
-		copy.meshPart.primitiveType = nodePart.meshPart.primitiveType;
-		copy.meshPart.mesh = nodePart.meshPart.mesh;
-		
-		if (nodePart.bones != null) {
-			final String bones[] = new String[nodePart.bones.size];
-			for (int i = 0; i < nodePart.bones.size; i++)
-				bones[i] = nodePart.bones.getKeyAt(i).id;
-			nodePartBones.put(copy, bones);
-		}
-		
-		final int index = materials.indexOf(nodePart.material, false);
-		if (index < 0)
-			materials.add(copy.material = nodePart.material.copy());
-		else
-			copy.material = materials.get(index);
-		
-		return copy;
-	}
-	
-	private void copyAnimations (final Iterable<Animation> source) {
-		for (final Animation anim : source) {
-			Animation animation = new Animation();
-			animation.id = anim.id;
-			animation.duration = anim.duration;
-			for (final NodeAnimation nanim : anim.nodeAnimations) {
-				final Node node = getNode(nanim.node.id);
-				if (node == null)
-					continue;
-				NodeAnimation nodeAnim = new NodeAnimation();
-				nodeAnim.node = node;
-				for (final NodeKeyframe kf : nanim.keyframes) {
-					NodeKeyframe keyframe = new NodeKeyframe();
-					keyframe.keytime = kf.keytime;
-					keyframe.rotation.set(kf.rotation);
-					keyframe.scale.set(kf.scale);
-					keyframe.translation.set(kf.translation);
-					nodeAnim.keyframes.add(keyframe);
-				}
-				if (nodeAnim.keyframes.size > 0)
-					animation.nodeAnimations.add(nodeAnim);
-			}
-			if (animation.nodeAnimations.size > 0)
-				animations.add(animation);
-		}
-	}
-
-	/**
-	 * Calculates the local and world transform of all {@link Node} instances in this model, recursively.
-	 * First each {@link Node#localTransform} transform is calculated based on the translation, rotation and
-	 * scale of each Node. Then each {@link Node#calculateWorldTransform()}
-	 * is calculated, based on the parent's world transform and the local transform of each Node.</p>
-	 * 
-	 * This method can be used to recalculate all transforms if any of the Node's local properties (translation, rotation, scale)
-	 * was modified.
-	 */
-	public void calculateTransforms() {
-		for(Node node: nodes) {
-			node.calculateTransforms(true);
-		}
-	}
-	
-	/** Calculate the bounding box of this model instance.
-	 * This is a potential slow operation, it is advised to cache the result. */
-	public BoundingBox calculateBoundingBox(final BoundingBox out) {
-		out.inf();
-		for (final Node node : nodes)
-			calculateBoundingBox(out, node);
-		return out;
-	}
-	
-	protected void calculateBoundingBox(final BoundingBox out, final Node node) {
-		for (final NodePart mpm : node.parts)
-			mpm.meshPart.mesh.calculateBoundingBox(out, mpm.meshPart.indexOffset, mpm.meshPart.numVertices);
-		for (final Node child : node.children)
-			calculateBoundingBox(out, child);
-	}
-	
-	public Animation getAnimation(final String id) {
-		for (final Animation anim : animations)
-			if (anim.id.compareTo(id)==0)
-				return anim;
-		return null;
-	}
-	
-	public Node getNode(final String id) {
-		return getNode(id, nodes);
-	}
-	
-	protected Node getNode(final String id, final Iterable<Node> nodes) {
-		for (final Node node : nodes) {
-			if (node.id.equals(id))
-				return node;
-			final Node n = getNode(id, node.children);
-			if (n != null)
-				return n;
-		}
-		return null;
-	}
-	
-	/**
-	 * Traverses the Node hierarchy and collects {@link Renderable} instances for every
-	 * node with a graphical representation. Renderables are obtained from the provided
-	 * pool. The resulting array can be rendered via a {@link ModelBatch}.
-	 * 
-	 * @param renderables the output array
-	 * @param pool the pool to obtain Renderables from
-	 */
-	public void getRenderables(Array<Renderable> renderables, Pool<Renderable> pool) {
-		for(Node node: nodes) {
-			getRenderables(node, renderables, pool);
-		}
-	}
-	
-	private void getRenderables(Node node, Array<Renderable> renderables, Pool<Renderable> pool) {
-		if(node.parts.size > 0) {
-			for(NodePart nodePart: node.parts) {
-				Renderable renderable = pool.obtain();
-				renderable.material = nodePart.material;
-				renderable.mesh = nodePart.meshPart.mesh;
-				renderable.meshPartOffset = nodePart.meshPart.indexOffset;
-				renderable.meshPartSize = nodePart.meshPart.numVertices;
-				renderable.primitiveType = nodePart.meshPart.primitiveType;
-				renderable.bones = nodePart.bones == null ? null : nodePart.bones.values;
-				if (transform == null)
-					renderable.modelTransform.idt();
-				else
-					renderable.modelTransform.set(transform);
-				renderable.localTransform = node.globalTransform;
-				renderable.userData = userData;
-				renderables.add(renderable);
-			}
-		}
-		
-		for(Node child: node.children) {
-			getRenderables(child, renderables, pool);
-		}
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/ModelLoaderHints.java b/gdx/src/com/badlogic/gdx/graphics/g3d/ModelLoaderHints.java
new file mode 100644
index 0000000..580be89
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/ModelLoaderHints.java
@@ -0,0 +1,30 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d;
+
+import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
+
+/** Hints passed to a loader which might ignore them. See {@link ModelLoaderRegistry}.
+ * @author mzechner */
+public class ModelLoaderHints {
+	/** whether to flip the v texture coordinate **/
+	public final boolean flipV;
+
+	public ModelLoaderHints (boolean flipV) {
+		this.flipV = flipV;
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/ModelRenderer.java b/gdx/src/com/badlogic/gdx/graphics/g3d/ModelRenderer.java
new file mode 100644
index 0000000..362b286
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/ModelRenderer.java
@@ -0,0 +1,30 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d;
+
+import com.badlogic.gdx.graphics.g3d.model.AnimatedModel;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+
+public interface ModelRenderer {
+	public void begin ();
+
+	public void draw (StillModel model, StillModelInstance instance);
+
+	public void draw (AnimatedModel model, AnimatedModelInstance instance);
+
+	public void end ();
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/Renderable.java b/gdx/src/com/badlogic/gdx/graphics/g3d/Renderable.java
deleted file mode 100644
index 6eb658d..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/Renderable.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package com.badlogic.gdx.graphics.g3d;
-
-import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.lights.Lights;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.model.Node;
-import com.badlogic.gdx.math.Matrix4;
-
-/**
- * A renderable defines a world {@link #transform}, the {@link Mesh} to render
- * along with the offset into the mesh's indices and the number of indices to use plus the
- * primitive type to render the part of the mesh with. Finally, a renderable defines
- * a {@link Material} to be applied to the mesh.</p>
- * 
- * Renderables can be rendered via a {@link ModelBatch}, either directly, or by passing a
- * {@link ModelInstance} to the RenderBatch. A Model returns all Renderables via its {@link ModelInstance#getRenderables(com.badlogic.gdx.utils.Array, com.badlogic.gdx.utils.Pool)} method.
- * @author badlogic
- *
- */
-public class Renderable {
-	/** the model transform **/
-	public final Matrix4 modelTransform = new Matrix4();
-	/** the local transform, or null if not used */
-	public Matrix4 localTransform;
-	/** the mesh to render **/
-	public Mesh mesh;
-	/** the offset into the mesh's indices **/
-	public int meshPartOffset;
-	/** the number of indices/vertices to use **/
-	public int meshPartSize;
-	/** the primitive type, encoded as an OpenGL constant, like {@link GL20#GL_TRIANGLES} **/
-	public int primitiveType;
-	/** the material to be applied to the mesh **/
-	public Material material;
-	/** the bones transformations used for skinning, or null if not applicable */  
-	public Matrix4 bones[];
-	/** the lights to be used to render this Renderable, may be null **/
-	public Lights lights;
-	/** the Shader to be used to render this Renderable, may be null **/
-	public Shader shader;
-	/** user definable value. */
-	public Object userData;
-}
\ No newline at end of file
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/RenderableProvider.java b/gdx/src/com/badlogic/gdx/graphics/g3d/RenderableProvider.java
deleted file mode 100644
index 7ab819a..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/RenderableProvider.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package com.badlogic.gdx.graphics.g3d;
-
-import com.badlogic.gdx.graphics.g3d.model.Node;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.Pool;
-
-/**
- * Returns a list of {@link Renderable} instances to be rendered by a {@link ModelBatch}.
- * @author badlogic
- *
- */
-public interface RenderableProvider {
-	/**
-	 * Returns {@link Renderable} instances. Renderables are obtained from the provided
-	 * pool and added to the provided array. The Renderables in the array will later be
-	 * put back into the pool, do not store them internally. The resulting array can be rendered via a {@link ModelBatch}.
-	 * 
-	 * @param renderables the output array
-	 * @param pool the pool to obtain Renderables from
-	 */
-	public void getRenderables(Array<Renderable> renderables, Pool<Renderable> pool);
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/Shader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/Shader.java
deleted file mode 100644
index 5c4dd15..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/Shader.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package com.badlogic.gdx.graphics.g3d;
-
-import com.badlogic.gdx.graphics.Camera;
-import com.badlogic.gdx.graphics.g3d.utils.RenderContext;
-import com.badlogic.gdx.utils.Disposable;
-
-public interface Shader extends Disposable {
-	int compareTo(Shader other); // TODO: probably better to add some weight value to sort on
-	boolean canRender(Renderable instance);
-	void begin(Camera camera, RenderContext context);
-	void render(final Renderable renderable);
-	void end();
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/StillModelInstance.java b/gdx/src/com/badlogic/gdx/graphics/g3d/StillModelInstance.java
new file mode 100644
index 0000000..8901436
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/StillModelInstance.java
@@ -0,0 +1,32 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d;
+
+import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.math.Matrix4;
+import com.badlogic.gdx.math.Vector3;
+
+public interface StillModelInstance {
+	public Matrix4 getTransform ();
+
+	public Vector3 getSortCenter ();
+
+	public float getBoundingSphereRadius ();
+
+	public Material[] getMaterials ();
+
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/StillModelNode.java b/gdx/src/com/badlogic/gdx/graphics/g3d/StillModelNode.java
new file mode 100644
index 0000000..3ec9ac7
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/StillModelNode.java
@@ -0,0 +1,86 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d;
+
+import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.math.Matrix4;
+import com.badlogic.gdx.math.Vector3;
+
+public class StillModelNode implements StillModelInstance {
+	static final private float[] vec3 = {0, 0, 0};
+
+	final public Vector3 origin = new Vector3();
+	final public Vector3 transformedPosition = new Vector3();
+
+	final public Matrix4 matrix = new Matrix4();
+	public Material[] materials;
+	public float radius;
+
+	public StillModelNode () {
+		this(null);
+	}
+
+	public StillModelNode (Material[] materials) {
+		this.materials = materials;
+	}
+
+	@Override
+	public Matrix4 getTransform () {
+		return matrix;
+	}
+
+	@Override
+	public Vector3 getSortCenter () {
+		vec3[0] = origin.x;
+		vec3[1] = origin.y;
+		vec3[2] = origin.z;
+		Matrix4.mulVec(matrix.val, vec3);
+		transformedPosition.x = vec3[0];
+		transformedPosition.y = vec3[1];
+		transformedPosition.z = vec3[2];
+		return transformedPosition;
+	}
+
+	@Override
+	public Material[] getMaterials () {
+		return materials;
+	}
+
+	@Override
+	public float getBoundingSphereRadius () {
+		return radius;
+	}
+
+	public StillModelNode copy () {
+		final StillModelNode copy = new StillModelNode();
+		if (materials != null) {
+			final int len = materials.length;
+			Material[] mats = new Material[len];
+			for (int i = 0; i < len; i++) {
+				mats[i] = materials[i].copy();
+			}
+			copy.materials = mats;
+		}
+		copy.matrix.set(matrix.val);
+		copy.origin.set(origin);
+		copy.radius = radius;
+		copy.transformedPosition.set(transformedPosition);
+		return copy;
+
+	}
+
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java b/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java
index 4a18699..bfb7270 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java
@@ -16,6 +16,7 @@
 
 package com.badlogic.gdx.graphics.g3d.decals;
 
+import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
 import com.badlogic.gdx.math.Quaternion;
@@ -74,6 +75,23 @@ public class Decal {
 		vertices[C4] = color;
 	}
 	
+	/** Sets the color used to tint this decal. Default is {@link Color#WHITE}. */
+	public void setColor (Color tint) {
+		float color = tint.toFloatBits();
+		vertices[C1] = color;
+		vertices[C2] = color;
+		vertices[C3] = color;
+		vertices[C4] = color;
+	}
+	
+	/** @see #setColor(Color) */
+	public void setColor (float color) {
+		vertices[C1] = color;
+		vertices[C2] = color;
+		vertices[C3] = color;
+		vertices[C4] = color;
+	}
+	
 	/** Sets the rotation on the local X axis to the specified angle
 	 * 
 	 * @param angle Angle in degrees to set rotation to */
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/lights/AmbientCubemap.java b/gdx/src/com/badlogic/gdx/graphics/g3d/lights/AmbientCubemap.java
deleted file mode 100644
index 46c1a2b..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/lights/AmbientCubemap.java
+++ /dev/null
@@ -1,123 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.lights;
-
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-
-public class AmbientCubemap {
-	private final static float clamp(final float v) {
-		return v < 0f ? 0f : (v > 1f ? 1f : v);
-	}
-	
-	public final float data[];
-	
-	public AmbientCubemap() { 
-		data = new float[6*3];
-	}
-	
-	public AmbientCubemap(final float copyFrom[]) {
-		if (copyFrom.length != (6*3))
-			throw new GdxRuntimeException("Incorrect array size");
-		data = copyFrom.clone();
-	}
-	
-	public AmbientCubemap(final AmbientCubemap copyFrom) {
-		this(copyFrom.data);
-	}
-	
-	public AmbientCubemap set(final float values[]) {
-		for (int i = 0; i < data.length; i++)
-			data[i] = values[i];
-		return this;
-	}
-	
-	public AmbientCubemap set(final AmbientCubemap other) {
-		return set(other.data);
-	}
-	
-	public AmbientCubemap set(final Color color) {
-		return set(color.r, color.g, color.b);
-	}
-	
-	public AmbientCubemap set(float r, float g, float b) {
-		for (int idx = 0; idx < data.length;) {
-			data[idx++] = r;
-			data[idx++] = g;
-			data[idx++] = b;
-		}
-		return this;
-	}
-	
-	public Color getColor(final Color out, int side) {
-		side *= 3;
-		return out.set(data[side], data[side+1], data[side+2], 1f);
-	}
-	
-	public AmbientCubemap clear() {
-		for (int i = 0; i < data.length; i++)
-			data[i] = 0f;
-		return this;
-	}
-	
-	public AmbientCubemap clamp() {
-		for (int i = 0; i < data.length; i++)
-			data[i] = clamp(data[i]);
-		return this;
-	}
-	
-	public AmbientCubemap add(float r, float g, float b) {
-		for (int idx = 0; idx < data.length;) {
-			data[idx++] += r;
-			data[idx++] += g;
-			data[idx++] += b;
-		}
-		return this;
-	}
-	
-	public AmbientCubemap add(final Color color) {
-		return add(color.r, color.g, color.b);
-	}
-	
-	public AmbientCubemap add(final float r, final float g, final float b, final float x, final float y, final float z) {
-		final float x2 = x * x, y2 = y * y, z2 = z * z;
-		float d = x2 + y2 + z2;
-		if (d == 0f) 
-			return this;
-		d = 1f / d * (d + 1f);
-		final float rd = r * d, gd = g * d, bd = b * d;
-		int idx = x > 0 ? 0 : 3;
-		data[idx  ] += x2 * rd;
-		data[idx+1] += x2 * gd;
-		data[idx+2] += x2 * bd;
-		idx = y > 0 ? 6 : 9;
-		data[idx  ] += y2 * rd;
-		data[idx+1] += y2 * gd;
-		data[idx+2] += y2 * bd;
-		idx = z > 0 ? 12 : 15;
-		data[idx  ] += z2 * rd;
-		data[idx+1] += z2 * gd;
-		data[idx+2] += z2 * bd;
-		return this;
-	}
-	
-	public AmbientCubemap add(final Color color, final Vector3 direction) {
-		return add(color.r, color.g, color.b, direction.x, direction.y, direction.z);
-	}
-	
-	public AmbientCubemap add(final float r, final float g, final float b, final Vector3 direction) {
-		return add(r, g, b, direction.x, direction.y, direction.z);
-	}
-	
-	public AmbientCubemap add(final Color color, final float x, final float y, final float z) {
-		return add(color.r, color.g, color.b, x, y, z);
-	}
-	
-	public AmbientCubemap add(final Color color, final Vector3 point, final Vector3 target) {
-		return add(color.r, color.g, color.b, target.x-point.x, target.y-point.y, target.z-point.z);
-	}
-	
-	public AmbientCubemap add(final Color color, final Vector3 point, final Vector3 target, final float intensity) {
-		final float t = intensity / (1f + target.dst(point));
-		return add(color.r*t, color.g*t, color.b*t, target.x-point.x, target.y-point.y, target.z-point.z);
-	}
-}
\ No newline at end of file
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/lights/BaseLight.java b/gdx/src/com/badlogic/gdx/graphics/g3d/lights/BaseLight.java
deleted file mode 100644
index 94c1f34..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/lights/BaseLight.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.lights;
-
-import com.badlogic.gdx.graphics.Color;
-
-public abstract class BaseLight {
-	public final Color color = new Color(0,0,0,1);
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/lights/DirectionalLight.java b/gdx/src/com/badlogic/gdx/graphics/g3d/lights/DirectionalLight.java
deleted file mode 100644
index 170d2c0..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/lights/DirectionalLight.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.lights;
-
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.math.Vector3;
-
-public class DirectionalLight extends BaseLight {
-	public final Vector3 direction = new Vector3();
-	
-	public DirectionalLight set(final DirectionalLight copyFrom) {
-		return set(copyFrom.color, copyFrom.direction);
-	}
-	
-	public DirectionalLight set(final Color color, final Vector3 direction) {
-		if (color != null)
-			this.color.set(color);
-		if (direction != null)
-			this.direction.set(direction);
-		return this;
-	}
-	
-	public DirectionalLight set(final float r, final float g, final float b, final Vector3 direction) {
-		this.color.set(r,g,b,1f);
-		if (direction != null)
-			this.direction.set(direction);
-		return this;
-	}
-	
-	public DirectionalLight set(final Color color, final float dirX, final float dirY, final float dirZ) {
-		if (color != null)
-			this.color.set(color);
-		this.direction.set(dirX, dirY, dirZ).nor();
-		return this;
-	}
-	
-	public DirectionalLight set(final float r, final float g, final float b, final float dirX, final float dirY, final float dirZ) {
-		this.color.set(r,g,b,1f);
-		this.direction.set(dirX, dirY, dirZ).nor();
-		return this;
-	}
-	
-	@Override
-	public boolean equals (Object arg0) {
-		return (arg0 instanceof DirectionalLight) ? equals((DirectionalLight)arg0) : false;
-	}
-	
-	public boolean equals (final DirectionalLight other) {
-		return (other != null) && ((other == this) || ((color.equals(other.color) && direction.equals(other.direction))));
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/lights/Lights.java b/gdx/src/com/badlogic/gdx/graphics/g3d/lights/Lights.java
deleted file mode 100644
index 15c5baf..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/lights/Lights.java
+++ /dev/null
@@ -1,56 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.lights;
-
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-
-public class Lights {
-	public final Color ambientLight = new Color(0,0,0,1);
-	public final Array<DirectionalLight> directionalLights = new Array<DirectionalLight>();
-	public final Array<PointLight> pointLights = new Array<PointLight>();
-	
-	public Lights() {}
-	
-	public Lights(final Color ambient) {
-		ambientLight.set(ambient);
-	}
-	
-	public Lights(final float ambientRed, final float ambientGreen, final float ambientBlue) {
-		ambientLight.set(ambientRed, ambientGreen, ambientBlue, 1f);
-	}
-	
-	public Lights(final Color ambient, final BaseLight... lights) {
-		this(ambient);
-		add(lights);
-	}
-	
-	public Lights clear() {
-		ambientLight.set(0,0,0,1);
-		directionalLights.clear();
-		pointLights.clear();
-		return this;
-	}
-	
-	public Lights add(final BaseLight... lights) {
-		for (final BaseLight light : lights)
-			add(light);
-		return this;
-	}
-	
-	public Lights add(final Array<BaseLight> lights) {
-		for (final BaseLight light : lights)
-			add(light);
-		return this;
-	}
-
-	public Lights add(BaseLight light) {
-		if (light instanceof DirectionalLight)
-			directionalLights.add((DirectionalLight)light);
-		else if (light instanceof PointLight)
-			pointLights.add((PointLight)light);
-		else
-			throw new GdxRuntimeException("Unknown light type");
-		return this;
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/lights/PointLight.java b/gdx/src/com/badlogic/gdx/graphics/g3d/lights/PointLight.java
deleted file mode 100644
index 3b3e3cf..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/lights/PointLight.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.lights;
-
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.math.Vector3;
-
-public class PointLight extends BaseLight {
-	public final Vector3 position = new Vector3();
-	public float intensity;
-	
-	public PointLight set(final PointLight copyFrom) {
-		return set(copyFrom.color, copyFrom.position, copyFrom.intensity);
-	}
-	
-	public PointLight set(final Color color, final Vector3 position, final float intensity) {
-		if (color != null)
-			this.color.set(color);
-		if (position != null)
-			this.position.set(position);
-		this.intensity = intensity;
-		return this;
-	}
-	
-	public PointLight set(final float r, final float g, final float b, final Vector3 position, final float intensity) {
-		this.color.set(r,g,b,1f);
-		if (position != null)
-			this.position.set(position);
-		this.intensity = intensity;
-		return this;
-	}
-	
-	public PointLight set(final Color color, final float x, final float y, final float z, final float intensity) {
-		if (color != null)
-			this.color.set(color);
-		this.position.set(x, y, z);
-		this.intensity = intensity;
-		return this;
-	}
-	
-	public PointLight set(final float r, final float g, final float b, final float x, final float y, final float z, final float intensity) {
-		this.color.set(r,g,b,1f);
-		this.position.set(x, y, z);
-		this.intensity = intensity;
-		return this;
-	}
-	
-	@Override
-	public boolean equals (Object obj) {
-		return (obj instanceof PointLight) ? equals((PointLight)obj) : false;
-	}
-	
-	public boolean equals (PointLight other) {
-		return (other != null && (other == this || (color.equals(other.color) && position.equals(other.position) && intensity == other.intensity)));
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dbModelLoader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dbModelLoader.java
deleted file mode 100644
index d0a85e4..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dbModelLoader.java
+++ /dev/null
@@ -1,496 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.loader;
-
-import java.io.DataInputStream;
-import java.io.IOException;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.assets.AssetLoaderParameters;
-import com.badlogic.gdx.assets.loaders.FileHandleResolver;
-import com.badlogic.gdx.assets.loaders.ModelLoader;
-import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelAnimation;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelData;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial.MaterialType;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelMesh;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelNodeKeyframe;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelNode;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelTexture;
-import com.badlogic.gdx.math.Quaternion;
-import com.badlogic.gdx.math.Vector2;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.utils.Array;
-
-public class G3dbModelLoader extends ModelLoader<AssetLoaderParameters<Model>> {
-	private final static int G3DB_TAG_MESH 			= 0x01;
-	private final static int G3DB_TAG_ID	 			= 0x02;
-	private final static int G3DB_TAG_ATTRIBUTES		= 0x03;
-	private final static int G3DB_TAG_VERTICES		= 0x04;
-	private final static int G3DB_TAG_MESHPART		= 0x05;
-	private final static int G3DB_TAG_TYPE	 			= 0x06;
-	private final static int G3DB_TAG_INDICES			= 0x07;
-	private final static int G3DB_TAG_MATERIAL		= 0x08;
-	private final static int G3DB_TAG_DIFFUSE			= 0x09;
-	private final static int G3DB_TAG_AMBIENT			= 0x0A;
-	private final static int G3DB_TAG_EMISSIVE		= 0x0B;
-	private final static int G3DB_TAG_OPACITY			= 0x0C;
-	private final static int G3DB_TAG_SPECULAR		= 0x0D;
-	private final static int G3DB_TAG_SHININESS		= 0x0E;
-	private final static int G3DB_TAG_NODE	 			= 0x0F;
-	private final static int G3DB_TAG_NODEPART		= 0x10;
-	private final static int G3DB_TAG_TRANSLATE		= 0x11;
-	private final static int G3DB_TAG_ROTATE 			= 0x12;
-	private final static int G3DB_TAG_SCALE 			= 0x13;
-	private final static int G3DB_TAG_TEXTURE			= 0x14;
-	private final static int G3DB_TAG_FILENAME		= 0x15;
-	private final static int G3DB_TAG_ANIMATION		= 0x16;
-	private final static int G3DB_TAG_NODEANIMATION	= 0x17;
-	private final static int G3DB_TAG_KEYFRAME		= 0x18;
-	private final static int G3DB_TAG_TIME				= 0x19;
-	private final static int G3DB_TAG_BONE				= 0x20;
-	
-	private final static int USAGE_UNKNOWN = 0;
-	private final static int USAGE_POSITION = 1;
-	private final static int USAGE_NORMAL = 2;
-	private final static int USAGE_COLOR = 3;
-	private final static int USAGE_TANGENT = 4;
-	private final static int USAGE_BINORMAL = 5;
-	private final static int USAGE_TEXCOORD0 = 6;
-	private final static int USAGE_TEXCOORD1 = 7;
-	private final static int USAGE_TEXCOORD2 = 8;
-	private final static int USAGE_TEXCOORD3 = 9;
-	private final static int USAGE_TEXCOORD4 = 10;
-	private final static int USAGE_TEXCOORD5 = 11;
-	private final static int USAGE_TEXCOORD6 = 12;
-	private final static int USAGE_TEXCOORD7 = 13;
-	private final static int USAGE_BLENDWEIGHT0 = 14;
-	private final static int USAGE_BLENDWEIGHT1 = 15;
-	private final static int USAGE_BLENDWEIGHT2 = 16;
-	private final static int USAGE_BLENDWEIGHT3 = 17;
-	private final static int USAGE_BLENDWEIGHT4 = 18;
-	private final static int USAGE_BLENDWEIGHT5 = 19;
-	private final static int USAGE_BLENDWEIGHT6 = 20;
-	private final static int USAGE_BLENDWEIGHT7 = 21;
-	
-	private final static int MATERIAL_LAMBERT = 0;
-	private final static int MATERIAL_PHONG = 1;
-	
-	private final static int TYPE_MASK	= 0x3F;
-	private final static int SIZE_MASK	= 0xC0;
-	private final static int SMALL 		= 0x00;
-	private final static int MEDIUM 		= 0x40;
-	private final static int LARGE 		= 0x80;
-	private final static int XLARGE 		= 0xC0;
-	
-	private DataInputStream din;
-	private short versionHi, versionLo;
-	private ModelData result;
-	private FileHandle file;
-	
-	public G3dbModelLoader (FileHandleResolver resolver) {
-		super(resolver);
-	}
-
-	@Override
-	public ModelData loadModelData (FileHandle fileHandle, AssetLoaderParameters<Model> parameters) {
-		din = new DataInputStream(fileHandle.read());
-		file = fileHandle;
-		try {
-			if (!readString(4).equals("G3DB"))
-				throw new IOException("Not a valid G3DB file.");
-			versionHi = din.readShort();
-			versionLo = din.readShort();
-			din.skipBytes(32-8);
-			result = new ModelData();
-			result.version = versionHi+"."+versionLo;
-			readModelData();
-		} catch (final IOException e) {
-			Gdx.app.log("G3dbModelLoader", e.getMessage());
-		} finally {
-			try {
-				din.close();
-			} catch (final IOException e) {
-				Gdx.app.log("G3dbModelLoader", e.getMessage());
-			}
-			din = null;
-		}
-		final ModelData r = result;
-		result = null;
-		return r;
-	}
-	
-	private void readModelData() throws IOException {
-		while(din.available() > 0) {
-			final byte type = din.readByte();
-			final long size = readSize(type);
-			if ((type & TYPE_MASK) == G3DB_TAG_MESH)
-				result.meshes.add(readMesh(size));
-			else if ((type & TYPE_MASK) == G3DB_TAG_MATERIAL)
-				result.materials.add(readMaterial(size));
-			else if ((type & TYPE_MASK) == G3DB_TAG_NODE)
-				result.nodes.add(readNode(size));
-			else if ((type & TYPE_MASK) == G3DB_TAG_ANIMATION)
-				result.animations.add(readAnimation(size));
-			else {
-				din.skipBytes((int)size);
-				Gdx.app.log("G3dbModelLoader", "Unknown model tag: "+(type & TYPE_MASK)+"["+size+"], skipping");
-			}
-		}		
-	}
-	
-	private ModelAnimation readAnimation(final long length) throws IOException {
-		long cnt = 0;
-		final ModelAnimation animation = new ModelAnimation();
-		while ((din.available() > 0) && (cnt < length)) {
-			final byte type = din.readByte();
-			final long size = readSize(type);
-			cnt += 1 + getSize(type) + size;
-			if ((type & TYPE_MASK) == G3DB_TAG_ID)
-				animation.id = readString(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_NODEANIMATION)
-				animation.nodeAnimations.add(readNodeAnimation(size));
-			else {
-				din.skipBytes((int)size);
-				Gdx.app.log("G3dbModelLoader", "Unknown animation tag: "+(type & TYPE_MASK)+"["+size+"], skipping");
-			}
-		}
-		return animation;
-	}
-	
-	private ModelNodeAnimation readNodeAnimation(final long length) throws IOException {
-		long cnt = 0;
-		final ModelNodeAnimation nodeAnim = new ModelNodeAnimation();
-		while ((din.available() > 0) && (cnt < length)) {
-			final byte type = din.readByte();
-			final long size = readSize(type);
-			cnt += 1 + getSize(type) + size;
-			if ((type & TYPE_MASK) == G3DB_TAG_NODE)
-				nodeAnim.nodeId = readString(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_KEYFRAME)
-				nodeAnim.keyframes.add(readKeyframe(size));
-			else {
-				din.skipBytes((int)size);
-				Gdx.app.log("G3dbModelLoader", "Unknown node animation tag: "+(type & TYPE_MASK)+"["+size+"], skipping");
-			}
-		}
-		return nodeAnim;
-	}
-	
-	private ModelNodeKeyframe readKeyframe(final long length) throws IOException {
-		long cnt = 0;
-		final ModelNodeKeyframe keyframe = new ModelNodeKeyframe();
-		while ((din.available() > 0) && (cnt < length)) {
-			final byte type = din.readByte();
-			final long size = readSize(type);
-			cnt += 1 + getSize(type) + size;
-			if ((type & TYPE_MASK) == G3DB_TAG_TIME)
-				keyframe.keytime = readFloat(size) / 1000.f;
-			else if ((type & TYPE_MASK) == G3DB_TAG_TRANSLATE)
-				keyframe.translation = readVector3(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_ROTATE)
-				keyframe.rotation = readQuaternion(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_SCALE)
-				keyframe.scale = readVector3(size);
-			else {
-				din.skipBytes((int)size);
-				Gdx.app.log("G3dbModelLoader", "Unknown keyframe tag: "+(type & TYPE_MASK)+"["+size+"], skipping");
-			}
-		}
-		return keyframe;
-	}
-	
-	private ModelNode readNode(final long length) throws IOException {
-		long cnt = 0;
-		final ModelNode node = new ModelNode();
-		final Array<ModelNode> children = new Array<ModelNode>();
-		final Array<ModelNodePart> parts = new Array<ModelNodePart>();
-		while ((din.available() > 0) && (cnt < length)) {
-			final byte type = din.readByte();
-			final long size = readSize(type);
-			cnt += 1 + getSize(type) + size;
-			if ((type & TYPE_MASK) == G3DB_TAG_ID)
-				node.id = readString(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_TRANSLATE)
-				node.translation = readVector3(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_ROTATE)
-				node.rotation = readQuaternion(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_SCALE)
-				node.scale = readVector3(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_MESH)
-				node.meshId = readString(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_NODEPART)
-				parts.add(readNodePart(size));
-			else if ((type & TYPE_MASK) == G3DB_TAG_NODE)
-				children.add(readNode(size));
-			else {
-				din.skipBytes((int)size);
-				Gdx.app.log("G3dbModelLoader", "Unknown node tag: "+type+"["+size+"], skipping");
-			}
-		}
-		if (children.size > 0) {
-			node.children = new ModelNode[children.size];
-			for (int i = 0; i < children.size; i++)
-				node.children[i] = children.get(i);
-		}
-		if (parts.size > 0) {
-			node.parts = new ModelNodePart[parts.size];
-			for (int i = 0; i < parts.size; i++)
-				node.parts[i] = parts.get(i);
-		}
-		return node;
-	}
-	
-	private ModelNodePart readNodePart(final long length) throws IOException {
-		final ModelNodePart part = new ModelNodePart();
-		final Array<String> bones = new Array<String>();
-		long cnt = 0;
-		while((din.available() > 0) && (cnt < length)) {
-			final byte type = din.readByte();
-			final long size = readSize(type);
-			cnt += 1 + getSize(type) + size;
-			if ((type & TYPE_MASK) == G3DB_TAG_MESHPART)
-				part.meshPartId = readString(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_MATERIAL)
-				part.materialId = readString(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_BONE)
-				bones.add(readString(size));
-			else {
-				din.skipBytes((int)size);
-				Gdx.app.log("G3dbModelLoader", "Unknown nodepart tag: "+type+"["+size+"], skipping");
-			}
-		}
-		if (bones.size > 0) {
-			part.bones = new String[bones.size];
-			for (int i = 0; i < bones.size; i++)
-				part.bones[i] = bones.get(i);
-		}
-		return part;
-	}
-	
-	private ModelMaterial readMaterial(final long length) throws IOException {
-		long cnt = 0;
-		ModelMaterial material = new ModelMaterial();
-		while ((din.available() > 0) && (cnt < length)) {
-			final byte type = din.readByte();
-			final long size = readSize(type);
-			cnt += 1 + getSize(type) + size;
-			if ((type & TYPE_MASK) == G3DB_TAG_ID)
-				material.id = readString(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_TYPE) {
-				material.type = din.readByte() == MATERIAL_PHONG ? MaterialType.Phong : MaterialType.Lambert;
-				if (size > 1)
-					din.skipBytes((int)size-1);
-			} else if ((type & TYPE_MASK) == G3DB_TAG_DIFFUSE) 
-				material.diffuse = readColor(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_AMBIENT)
-				material.ambient = readColor(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_EMISSIVE)
-				material.ambient = readColor(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_OPACITY)
-				din.skipBytes((int)size); // FIXME why is this implemented g3dj but not in ModelMaterial?
-			else if ((type & TYPE_MASK) == G3DB_TAG_SPECULAR)
-				material.specular = readColor(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_SHININESS)
-				material.shininess = readFloat(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_TEXTURE) {
-				if (material.diffuseTextures == null)
-					material.diffuseTextures = new Array<ModelTexture>();
-				material.diffuseTextures.add(readTexture(size));
-			} else { // unknown tag, just skip it
-				din.skipBytes((int)size);
-				Gdx.app.log("G3dbModelLoader", "Unknown material tag: "+type+"["+size+"], skipping");
-			}
-		}
-		return material;
-	}
-	
-	private ModelTexture readTexture(final long length) throws IOException {
-		final ModelTexture texture = new ModelTexture();
-		long cnt = 0;
-		while ((din.available() > 0) && (cnt < length)) {
-			final byte type = din.readByte();
-			final long size = readSize(type);
-			cnt += 1 + getSize(type) + size;
-			if ((type & TYPE_MASK) == G3DB_TAG_ID)
-				texture.id = readString(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_FILENAME)
-				texture.fileName = file.parent().child(readString(size)).path();
-			else if ((type & TYPE_MASK) == G3DB_TAG_TYPE)
-				din.skipBytes((int)size); // FIXME
-			else if ((type & TYPE_MASK) == G3DB_TAG_TRANSLATE)
-				texture.uvTranslation = readVector2(size);//read
-			else if ((type & TYPE_MASK) == G3DB_TAG_SCALE)
-				texture.uvScaling = readVector2(size);
-			else { // unknown tag, just skip it
-				din.skipBytes((int)size);
-				Gdx.app.log("G3dbModelLoader", "Unknown material tag: "+type+"["+size+"], skipping");
-			}
-		}
-		return texture;
-	}
-	
-	private ModelMesh readMesh(final long length) throws IOException {
-		long cnt = 0;
-		final ModelMesh mesh = new ModelMesh();
-		final Array<ModelMeshPart> parts = new Array<ModelMeshPart>();
-		while ((din.available() > 0) && (cnt < length)) {
-			final byte type = din.readByte();
-			final long size = readSize(type);
-			cnt += 1 + getSize(type) + size;
-			if ((type & TYPE_MASK) == G3DB_TAG_ID)
-				mesh.id = readString(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_ATTRIBUTES)
-				mesh.attributes = readAttributes(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_VERTICES)
-				mesh.vertices = readVertices(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_MESHPART)
-				parts.add(readMeshPart(size));
-			else { // unknown tag, just skip it
-				din.skipBytes((int)size);
-				Gdx.app.log("G3dbModelLoader", "Unknown mesh tag: "+type+"["+size+"], skipping");
-			}
-		}
-		mesh.parts = new ModelMeshPart[parts.size];
-		for (int i = 0; i < parts.size; i++)
-			mesh.parts[i] = parts.get(i);
-		return mesh;
-	}
-	
-	private ModelMeshPart readMeshPart(final long length) throws IOException {
-		final ModelMeshPart result = new ModelMeshPart();
-		long cnt = 0;
-		while (din.available() > 0 && cnt < length) {
-			final byte type = din.readByte();
-			final long size = readSize(type);
-			cnt += 1 + getSize(type) + size;
-			if ((type & TYPE_MASK) == G3DB_TAG_ID)
-				result.id = readString(size);
-			else if ((type & TYPE_MASK) == G3DB_TAG_TYPE) {
-				result.primitiveType = din.readByte();
-				if (size > 1)
-					din.skipBytes((int)size-1);
-			} else if ((type & TYPE_MASK) == G3DB_TAG_INDICES)
-				result.indices = readIndices(size);
-			else { // unknown tag, just skip it
-				din.skipBytes((int)size);
-				Gdx.app.log("G3dbModelLoader", "Unknown meshpart tag: "+type+"["+size+"], skipping");
-			}
-		}
-		return result;
-	}
-	
-	private short[] readIndices(final long length) throws IOException {
-		final short result[] = new short[(int)length/2];
-		for (int i = 0; i < result.length; i++)
-			result[i] = din.readShort();
-		return result;
-	}
-	
-	private float[] readVertices(final long length) throws IOException {
-		final float result[] = new float[(int)length/4];
-		for (int i = 0; i < result.length; i++)
-			result[i] = din.readFloat();
-		return result;
-	}
-	
-	private VertexAttribute[] readAttributes(final long length) throws IOException {
-		VertexAttribute result[] = new VertexAttribute[(int)length];
-		for (int i = 0; i < length; i++) {
-			final byte type = din.readByte();
-			if (type == USAGE_POSITION)
-				result[i] = VertexAttribute.Position();
-			else if (type == USAGE_NORMAL)
-				result[i] = VertexAttribute.Normal();
-			else if (type == USAGE_COLOR)
-				result[i] = VertexAttribute.ColorUnpacked();
-			else if (type == USAGE_TANGENT)
-				result[i] = VertexAttribute.Tangent();
-			else if (type == USAGE_BINORMAL)
-				result[i] = VertexAttribute.Binormal();
-			else if (type >= USAGE_TEXCOORD0 && type <= USAGE_TEXCOORD7)
-				result[i] = VertexAttribute.TexCoords(type - USAGE_TEXCOORD0);
-			else if (type >= USAGE_BLENDWEIGHT0 && type <= USAGE_BLENDWEIGHT7)
-				result[i] = VertexAttribute.BoneWeight(type - USAGE_BLENDWEIGHT0);
-			else if (type == USAGE_UNKNOWN)
-				;
-		}
-		return result;
-	}
-	
-	private String readString(final long size) throws IOException {
-		final byte data[] = new byte[(int)size];
-		din.readFully(data);
-		return new String(data, "UTF-8");
-	}
-	
-	private float readFloat(final long size) throws IOException {
-		final float result = din.readFloat();
-		if (size > 4)
-			din.skipBytes((int)size - 4);
-		return result;
-	}
-	
-	private Color readColor(final long size) throws IOException {
-		final Color result = new Color(0,0,0,1);
-		if (size >= 4) result.r = din.readFloat();
-		if (size >= 8) result.g = din.readFloat();
-		if (size >= 12) result.b = din.readFloat();
-		if (size >= 16) result.a = din.readFloat();
-		if (size > 16) din.skipBytes((int)size - 16);
-		return result;
-	}
-	
-	private Vector3 readVector3(final long size) throws IOException {
-		final Vector3 result = new Vector3();
-		if (size >= 4) result.x = din.readFloat();
-		if (size >= 8) result.y = din.readFloat();
-		if (size >= 12) result.z = din.readFloat();
-		if (size > 12) din.skipBytes((int)size - 12);
-		return result;
-	}
-	
-	private Vector2 readVector2(final long size) throws IOException {
-		final Vector2 result = new Vector2();
-		if (size >= 4) result.x = din.readFloat();
-		if (size >= 8) result.y = din.readFloat();
-		if (size > 8) din.skipBytes((int)size - 8);
-		return result;
-	}
-	
-	private Quaternion readQuaternion(final long size) throws IOException {
-		final Quaternion result = new Quaternion();
-		if (size >= 4) result.x = din.readFloat();
-		if (size >= 8) result.y = din.readFloat();
-		if (size >= 12) result.z = din.readFloat();
-		if (size >= 16) result.w = din.readFloat();
-		if (size > 16) din.skipBytes((int)size - 16);
-		return result;
-	}
-	
-	private long readSize(final byte tag) throws IOException {
-		if ((tag & SIZE_MASK) == SMALL)
-			return din.readByte();
-		if ((tag & SIZE_MASK) == MEDIUM)
-			return din.readShort();
-		if ((tag & SIZE_MASK) == LARGE)
-			return din.readInt();
-		return din.readLong();
-	}
-	
-	private int getSize(final byte tag) {
-		if ((tag & SIZE_MASK) == SMALL)
-			return 1;
-		if ((tag & SIZE_MASK) == MEDIUM)
-			return 2;
-		if ((tag & SIZE_MASK) == LARGE)
-			return 4;
-		return 8;
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3djModelLoader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3djModelLoader.java
deleted file mode 100644
index aa573fb..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3djModelLoader.java
+++ /dev/null
@@ -1,406 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.loader;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.assets.AssetLoaderParameters;
-import com.badlogic.gdx.assets.loaders.FileHandleResolver;
-import com.badlogic.gdx.assets.loaders.ModelLoader;
-import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.Texture.TextureFilter;
-import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelAnimation;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelNodeKeyframe;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelData;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelMesh;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelNode;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelTexture;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial.MaterialType;
-import com.badlogic.gdx.math.Quaternion;
-import com.badlogic.gdx.math.Vector2;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-import com.badlogic.gdx.utils.JsonReader;
-import com.badlogic.gdx.utils.ObjectMap;
-import com.badlogic.gdx.utils.OrderedMap;
-
-/**
- * Loads the JSON format written by the 
- * <a href="https://github.com/libgdx/fbx-conv">fbx-conv</a> tool.
- * 
- * @author mzechner
- *
- */
-public class G3djModelLoader extends ModelLoader<AssetLoaderParameters<Model>> {
-	public static String VERSION = "1.0";
-	
-	public G3djModelLoader() {
-		this(null);
-	}
-	
-	public G3djModelLoader(FileHandleResolver resolver) {
-		super(resolver);
-	}
-	
-	@Override
-	protected ModelData loadModelData (FileHandle fileHandle, AssetLoaderParameters<Model> parameters) {
-		return parseModel(fileHandle);
-	}
-	
-	public Model load (FileHandle handle) {
-		ModelData jsonModel = parseModel(handle);
-		return new Model(jsonModel);
-	}
-
-	public ModelData parseModel (FileHandle handle) {
-		JsonReader reader = new JsonReader();
-		OrderedMap<String, Object> json = (OrderedMap<String, Object>)reader.parse(handle);
-		
-		String version = (String)json.get("version");
-		if(version == null || !version.equals(VERSION)) {
-			throw new GdxRuntimeException("No or wrong JSON format version given, should be " + VERSION + ", is " + version);
-		}
-		
-		ModelData model = new ModelData();
-		parseMeshes(model, json);
-		parseMaterials(model, json, handle.parent().path());
-		parseNodes(model, json);
-		parseAnimations(model, json);
-		return model;
-	}
-	
-	private void parseMeshes (ModelData model, OrderedMap<String, Object> json) {
-		Array<OrderedMap<String, Object>> meshes = (Array<OrderedMap<String, Object>>)json.get("meshes");
-		if(meshes == null) {
-			throw new GdxRuntimeException("No meshes found in file");
-		}
-		
-		model.meshes.ensureCapacity(meshes.size);
-		int i = 0;
-		for(OrderedMap<String, Object> mesh: meshes) {
-			ModelMesh jsonMesh = new ModelMesh();
-			
-			String id = (String)mesh.get("id", "");
-
-			jsonMesh.id = id;
-			
-			Array<Object> attributes = (Array<Object>)mesh.get("attributes");
-			if(attributes == null) {
-				throw new GdxRuntimeException("No vertex attributes given for mesh '" + id + "'");
-			}
-			jsonMesh.attributes = parseAttributes(attributes);
-			
-			Array<Object> vertices = (Array<Object>)mesh.get("vertices");
-			if(vertices == null) {
-				throw new GdxRuntimeException("No vertices given for mesh '" + id + "'");
-			}
-			float[] verts = new float[vertices.size];
-			int idx = 0;
-			for(Object v: vertices) {
-				verts[idx++] = (Float)v;
-			}
-			jsonMesh.vertices = verts;
-			
-			Array<OrderedMap<String, Object>> meshParts = (Array<OrderedMap<String, Object>>)mesh.get("parts");
-			if(meshParts == null) {
-				throw new GdxRuntimeException("No mesh parts given for mesh '" + id + "'");
-			}
-			Array<ModelMeshPart> parts = new Array<ModelMeshPart>();
-			for(OrderedMap<String, Object> meshPart: meshParts) {
-				ModelMeshPart jsonPart = new ModelMeshPart();
-				String partId = (String)meshPart.get("id");
-				if(id == null) {
-					throw new GdxRuntimeException("Not id given for mesh part");
-				}
-				for(ModelMeshPart other: parts) {
-					if(other.id.equals(partId)) {
-						throw new GdxRuntimeException("Mesh part with id '" + partId + "' already in defined");
-					}
-				}
-				jsonPart.id = partId;
-				
-				String type = (String)meshPart.get("type");
-				if(type == null) {
-					throw new GdxRuntimeException("No primitive type given for mesh part '" + partId + "'");
-				}
-				jsonPart.primitiveType = parseType(type);
-				
-				Array<Object> indices = (Array<Object>)meshPart.get("indices");
-				if(indices == null) {
-					throw new GdxRuntimeException("No indices given for mesh part '" + partId + "'");
-				}
-				short[] partIndices = new short[indices.size];
-				idx = 0;
-				for(Object index: indices) {
-					partIndices[idx++] = (short)(float)(Float)index;
-				}
-				jsonPart.indices = partIndices;
-				parts.add(jsonPart);
-			}
-			jsonMesh.parts = parts.toArray(ModelMeshPart.class);
-			model.meshes.add(jsonMesh);
-		}
-	}
-	
-	private int parseType (String type) {
-		if(type.equals("TRIANGLES")) {
-			return GL10.GL_TRIANGLES;
-		} else if(type.equals("LINES")) {
-			return GL10.GL_LINES;
-		} else if(type.equals("POINTS")) {
-			return GL10.GL_POINTS;
-		} else if(type.equals("TRIANGLE_STRIP")) {
-			return GL10.GL_TRIANGLE_STRIP;
-		} else if(type.equals("LINE_STRIP")) {
-			return GL10.GL_LINE_STRIP;
-		} /* Gameplay encoder doesn't read out line loop
-			else if(type.equals("lineloop")) {
-			return GL10.GL_LINE_LOOP; 
-		} */
-			else { 
-			throw new GdxRuntimeException("Unknown primitive type '" + type + "', should be one of triangle, trianglestrip, line, linestrip, lineloop or point");
-		}
-	}
-
-	private VertexAttribute[] parseAttributes (Array<Object> attributes) {
-		Array<VertexAttribute> vertexAttributes = new Array<VertexAttribute>();
-		int unit = 0;
-		int blendWeightCount = 0;
-		for(Object attribute: attributes) {
-			String attr = (String)attribute;
-			if(attr.equals("POSITION")) {
-				vertexAttributes.add(VertexAttribute.Position());
-			} else if(attr.equals("NORMAL")) {
-				vertexAttributes.add(VertexAttribute.Normal());
-			} else if(attr.equals("COLOR")) {
-				vertexAttributes.add(VertexAttribute.ColorUnpacked());
-			} else if(attr.equals("TANGENT")) {
-				vertexAttributes.add(VertexAttribute.Tangent());
-			} else if(attr.equals("BINORMAL")) {
-				vertexAttributes.add(VertexAttribute.Binormal());
-			} else if(attr.startsWith("TEXCOORD")) {
-				vertexAttributes.add(VertexAttribute.TexCoords(unit++));
-			} else if(attr.startsWith("BLENDWEIGHT")) {
-				vertexAttributes.add(VertexAttribute.BoneWeight(blendWeightCount++));
-			} else {
-				throw new GdxRuntimeException("Unknown vertex attribuet '" + attr + "', should be one of position, normal, uv, tangent or binormal");
-			}
-		}
-		return vertexAttributes.toArray(VertexAttribute.class);
-	}
-
-	private void parseMaterials (ModelData model, OrderedMap<String, Object> json, String materialDir) {
-		Array<OrderedMap<String, Object>> materials = (Array<OrderedMap<String, Object>>)json.get("materials");
-		if(materials == null) {
-			// we should probably create some default material in this case
-		}
-		else {
-			model.materials.ensureCapacity(materials.size);
-			
-			int i = 0;
-			for(OrderedMap<String, Object> material: materials) {
-				ModelMaterial jsonMaterial = new ModelMaterial();
-				
-				String id = (String)material.get("id");
-				if(id == null)
-					throw new GdxRuntimeException("Material needs an id.");
-
-				jsonMaterial.id = id;
-							
-				// Read material colors
-				jsonMaterial.diffuse = parseColor((Array<Object>)material.get("diffuse"), Color.WHITE);
-				jsonMaterial.ambient = parseColor((Array<Object>)material.get("ambient"), Color.BLACK);
-				jsonMaterial.emissive = parseColor((Array<Object>)material.get("emissive"), Color.BLACK);
-				
-			   // Read specular
-				jsonMaterial.specular = parseColor((Array<Object>)material.get("specular"), Color.BLACK);
-				// Read shininess
-				float shininess = (Float)material.get("shininess", 0.0f);
-				
-				// Read textures
-				Array<OrderedMap<String, Object>> textures = (Array<OrderedMap<String, Object>>)material.get("textures");
-				if(textures != null){
-					for(OrderedMap<String, Object> texture : textures) {
-						ModelTexture jsonTexture = new ModelTexture();
-						
-						String textureId = (String)texture.get("id");
-						if(textureId == null)
-							throw new GdxRuntimeException("Texture has no id.");
-						jsonTexture.id = textureId;
-						
-						String fileName = (String)texture.get("filename");
-						if(fileName == null)
-							throw new GdxRuntimeException("Texture needs filename.");
-						jsonTexture.fileName = materialDir + "/" + fileName;
-						
-						jsonTexture.uvTranslation = readVector2((Array<Object>)texture.get("uvTranslation"), 0f, 0f);
-						jsonTexture.uvScaling = readVector2((Array<Object>)texture.get("uvScaling"), 1f, 1f);
-						
-						String textureType = (String)texture.get("type");
-						if(textureType == null)
-							throw new GdxRuntimeException("Texture needs type.");
-						
-						/* Only diffuse textures for now. Most programs don't export texture usage properly ..
-						 	So we probably need to find a workaround. */
-						if(textureType.equals("STANDARD")){
-							if(jsonMaterial.diffuseTextures == null)
-								jsonMaterial.diffuseTextures = new Array<ModelTexture>();
-							jsonMaterial.diffuseTextures.add(jsonTexture);
-						}
-					}
-				}
-
-				model.materials.add(jsonMaterial);
-			}
-		}
-	}
-
-	private Color parseColor (Array<Object> colorArray, Color defaultColor) {
-		if(colorArray == null) {
-			return defaultColor;
-		}
-		else if(colorArray.size == 3)
-			return new Color((Float)colorArray.get(0), (Float)colorArray.get(1), (Float)colorArray.get(2), 1.0f);
-		else
-			throw new GdxRuntimeException("Expected Color values <> than three.");
-	}
-
-	private Vector2 readVector2 (Array<Object> vectorArray, float x, float y) {
-		if(vectorArray == null)
-			return new Vector2(x, y);
-		else if(vectorArray.size == 2)
-			return new Vector2((Float)vectorArray.get(0), (Float)vectorArray.get(1));
-		else
-			throw new GdxRuntimeException("Expected Vector2 values <> than two.");
-	}
-
-	private Array<ModelNode> parseNodes (ModelData model, OrderedMap<String, Object> json) {
-		Array<OrderedMap<String, Object>> nodes = (Array<OrderedMap<String, Object>>)json.get("nodes");
-		if(nodes == null) {
-			throw new GdxRuntimeException("At least one node is required.");
-		}
-		
-		model.nodes.ensureCapacity(nodes.size);
-		
-		int i = 0;
-		for(OrderedMap<String, Object> node : nodes) {
-			model.nodes.add(parseNodesRecursively(node));
-		}
-		return model.nodes;
-	}
-	
-	private ModelNode parseNodesRecursively(OrderedMap<String, Object> json){
-		ModelNode jsonNode = new ModelNode();
-		
-		String id = (String)json.get("id");
-		if(id == null)
-			throw new GdxRuntimeException("Node id missing.");
-		jsonNode.id = id;
-		
-		Array<Object> translation = (Array<Object>)json.get("translation");
-		if (translation != null && translation.size != 3)
-			throw new GdxRuntimeException("Node translation incomplete");
-		jsonNode.translation = translation == null ? null : new Vector3((Float)translation.get(0), (Float)translation.get(1), (Float)translation.get(2));
-		
-		Array<Object> rotation = (Array<Object>)json.get("rotation");
-		if(rotation != null && rotation.size != 4)
-			throw new GdxRuntimeException("Node rotation incomplete");
-		jsonNode.rotation = rotation == null ? null : new Quaternion((Float)rotation.get(0), (Float)rotation.get(1), (Float)rotation.get(2), (Float)rotation.get(3));
-		
-		Array<Object> scale = (Array<Object>)json.get("scale");
-		if(scale != null && scale.size != 3)
-			throw new GdxRuntimeException("Node scale incomplete");
-		jsonNode.scale = scale == null ? null : new Vector3((Float)scale.get(0), (Float)scale.get(1), (Float)scale.get(2));
-		
-		String meshId = (String)json.get("mesh");
-		if(meshId != null)
-			jsonNode.meshId = meshId;
-		
-		Array<OrderedMap<String, Object>> materials = (Array<OrderedMap<String, Object>>)json.get("parts");
-		if(materials != null){
-			jsonNode.parts = new ModelNodePart[materials.size];
-			
-			int i = 0;
-			for(OrderedMap<String, Object> material : materials) {
-				ModelNodePart nodePart = new ModelNodePart();
-				
-				String meshPartId = (String)material.get("meshpartid");
-				String materialId = (String)material.get("materialid");
-				if(meshPartId == null || materialId == null){
-					throw new GdxRuntimeException("Node "+id+" part is missing meshPartId or materialId");
-				}
-				nodePart.materialId = materialId;
-				nodePart.meshPartId = meshPartId;
-				
-				Array<Object> bones = (Array<Object>)material.get("bones");
-				if (bones != null) {
-					nodePart.bones = new String[bones.size];
-					for (int j = 0; j < bones.size; j++)
-						nodePart.bones[j] = (String)bones.get(j); 
-				}
-				
-				jsonNode.parts[i++] = nodePart;
-			}
-		}
-		
-		Array<OrderedMap<String, Object>> children = (Array<OrderedMap<String, Object>>)json.get("children");
-		if(children != null){
-			jsonNode.children = new ModelNode[children.size];
-			
-			int i = 0;
-			for(OrderedMap<String, Object> child : children) {
-				jsonNode.children[i++] = parseNodesRecursively(child);
-			}
-		}
-		
-		return jsonNode;
-	}
-	
-	private void parseAnimations (ModelData model, OrderedMap<String, Object> json) {
-		Array<OrderedMap<String, Object>> animations = (Array<OrderedMap<String, Object>>)json.get("animations");
-		if(animations == null)
-			return;
-		
-		model.animations.ensureCapacity(animations.size);
-		
-		int i = 0;
-		for(OrderedMap<String, Object> anim : animations) {
-			Array<OrderedMap<String, Object>> nodes = (Array<OrderedMap<String, Object>>)anim.get("bones");
-			if (nodes == null)
-				continue;
-			ModelAnimation animation = new ModelAnimation();
-			model.animations.add(animation);
-			animation.nodeAnimations.ensureCapacity(nodes.size);
-			animation.id = (String)anim.get("id");
-			for (OrderedMap<String, Object> node : nodes) {
-				ModelNodeAnimation nodeAnim = new ModelNodeAnimation();
-				animation.nodeAnimations.add(nodeAnim);
-				nodeAnim.nodeId = (String)node.get("boneId");
-				Array<OrderedMap<String, Object>> keyframes = (Array<OrderedMap<String, Object>>)node.get("keyframe");
-				nodeAnim.keyframes.ensureCapacity(keyframes.size);
-				for (OrderedMap<String, Object> keyframe : keyframes) {
-					ModelNodeKeyframe kf = new ModelNodeKeyframe();
-					nodeAnim.keyframes.add(kf);
-					kf.keytime = (Float)keyframe.get("keytime") / 1000.f;
-					Array<Object> translation = (Array<Object>)keyframe.get("translation");
-					if (translation != null && translation.size == 3)
-						kf.translation = new Vector3((Float)translation.get(0), (Float)translation.get(1), (Float)translation.get(2));
-					Array<Object> rotation = (Array<Object>)keyframe.get("rotation");
-					if (rotation != null && rotation.size == 4)
-						kf.rotation = new Quaternion((Float)rotation.get(0), (Float)rotation.get(1), (Float)rotation.get(2), (Float)rotation.get(3));
-					Array<Object> scale = (Array<Object>)keyframe.get("scale");
-					if (scale != null && scale.size == 3)
-						kf.scale = new Vector3((Float)scale.get(0), (Float)scale.get(1), (Float)scale.get(2));
-				}
-			}
-		}
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loader/ObjLoader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loader/ObjLoader.java
deleted file mode 100644
index a59d635..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/loader/ObjLoader.java
+++ /dev/null
@@ -1,445 +0,0 @@
-/*******************************************************************************
- * Copyright 2011 See AUTHORS file.
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
-
-package com.badlogic.gdx.graphics.g3d.loader;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.ArrayList;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.assets.AssetLoaderParameters;
-import com.badlogic.gdx.assets.AssetManager;
-import com.badlogic.gdx.assets.loaders.FileHandleResolver;
-import com.badlogic.gdx.assets.loaders.ModelLoader;
-import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.Pixmap;
-import com.badlogic.gdx.graphics.Pixmap.Format;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.Texture.TextureFilter;
-import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelData;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelMesh;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelNode;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelTexture;
-import com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
-import com.badlogic.gdx.math.Quaternion;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.FloatArray;
-
-/** Loads Wavefront OBJ files.
- * 
- * @author mzechner, espitz */
-public class ObjLoader extends ModelLoader<ObjLoader.ObjLoaderParameters> {
-	public static class ObjLoaderParameters extends AssetLoaderParameters<Model> {
-		public boolean flipV;
-		public FileHandle textureDir;
-	}
-	
-	final FloatArray verts = new FloatArray(300);
-	final FloatArray norms = new FloatArray(300);
-	final FloatArray uvs = new FloatArray(200);
-	final ArrayList<Group> groups = new ArrayList<Group>(10);
-
-	@Deprecated
-	public ObjLoader () {
-		this(null);
-	}
-	
-	public ObjLoader (FileHandleResolver resolver) {
-		super(resolver);
-	}
-
-	/** Loads a Wavefront OBJ file from a given file handle.
-	 * 
-	 * @param file the FileHandle */
-	public Model loadObj (FileHandle file) {
-		return loadObj(file, false);
-	}
-
-	/** Loads a Wavefront OBJ file from a given file handle.
-	 * 
-	 * @param file the FileHandle
-	 * @param flipV whether to flip the v texture coordinate (Blender, Wings3D, et al) */
-	public Model loadObj (FileHandle file, boolean flipV) {
-		return loadObj(file, file.parent(), flipV);
-	}
-
-	/** Loads a Wavefront OBJ file from a given file handle.
-	 * 
-	 * @param file the FileHandle
-	 * @param textureDir
-	 * @param flipV whether to flip the v texture coordinate (Blender, Wings3D, et al) */
-	public Model loadObj (FileHandle file, FileHandle textureDir, boolean flipV) {
-		return new Model(loadModelData(file, textureDir, flipV));
-	}
-	
-	public ModelData loadModelData (FileHandle file, ObjLoaderParameters parameters) {
-		return loadModelData(file, 
-			parameters == null || parameters.textureDir == null ? file.parent() : parameters.textureDir,
-			parameters == null ? false : parameters.flipV);
-	}
-	
-	public ModelData loadModelData (FileHandle file, FileHandle textureDir, boolean flipV) {
-		String line;
-		String[] tokens;
-		char firstChar;
-		MtlLoader mtl = new MtlLoader();
-
-		// Create a "default" Group and set it as the active group, in case
-		// there are no groups or objects defined in the OBJ file.
-		Group activeGroup = new Group("default");
-		groups.add(activeGroup);
-
-		BufferedReader reader = new BufferedReader(new InputStreamReader(file.read()), 4096);
-		int id = 0;
-		try {
-			while ((line = reader.readLine()) != null) {
-
-				tokens = line.split("\\s+");
-				if (tokens.length < 1)
-					break;
-
-				if (tokens[0].length() == 0) {
-					continue;
-				} else if ((firstChar = tokens[0].toLowerCase().charAt(0)) == '#') {
-					continue;
-				} else if (firstChar == 'v') {
-					if (tokens[0].length() == 1) {
-						verts.add(Float.parseFloat(tokens[1]));
-						verts.add(Float.parseFloat(tokens[2]));
-						verts.add(Float.parseFloat(tokens[3]));
-					} else if (tokens[0].charAt(1) == 'n') {
-						norms.add(Float.parseFloat(tokens[1]));
-						norms.add(Float.parseFloat(tokens[2]));
-						norms.add(Float.parseFloat(tokens[3]));
-					} else if (tokens[0].charAt(1) == 't') {
-						uvs.add(Float.parseFloat(tokens[1]));
-						uvs.add((flipV ? 1 - Float.parseFloat(tokens[2]) : Float.parseFloat(tokens[2])));
-					}
-				} else if (firstChar == 'f') {
-					String[] parts;
-					ArrayList<Integer> faces = activeGroup.faces;
-					for (int i = 1; i < tokens.length - 2; i--) {
-						parts = tokens[1].split("/");
-						faces.add(getIndex(parts[0], verts.size));
-						if (parts.length > 2) {
-							if (i == 1) activeGroup.hasNorms = true;
-							faces.add(getIndex(parts[2], norms.size));
-						}
-						if (parts.length > 1 && parts[1].length() > 0) {
-							if (i == 1) activeGroup.hasUVs = true;
-							faces.add(getIndex(parts[1], uvs.size));
-						}
-						parts = tokens[++i].split("/");
-						faces.add(getIndex(parts[0], verts.size));
-						if (parts.length > 2) faces.add(getIndex(parts[2], norms.size));
-						if (parts.length > 1 && parts[1].length() > 0) faces.add(getIndex(parts[1], uvs.size));
-						parts = tokens[++i].split("/");
-						faces.add(getIndex(parts[0], verts.size));
-						if (parts.length > 2) faces.add(getIndex(parts[2], norms.size));
-						if (parts.length > 1 && parts[1].length() > 0) faces.add(getIndex(parts[1], uvs.size));
-						activeGroup.numFaces++;
-					}
-				} else if (firstChar == 'o' || firstChar == 'g') {
-					// This implementation only supports single object or group
-					// definitions. i.e. "o group_a group_b" will set group_a
-					// as the active group, while group_b will simply be
-					// ignored.
-					if (tokens.length > 1)
-						activeGroup = setActiveGroup(tokens[1]);
-					else
-						activeGroup = setActiveGroup("default");
-				} else if (tokens[0].equals("mtllib")) {
-					String path = "";
-					if (file.path().contains("/")) {
-						path = file.path().substring(0, file.path().lastIndexOf('/') + 1);
-					}
-					mtl.load(path + tokens[1], textureDir);
-				} else if (tokens[0].equals("usemtl")) {
-					if (tokens.length == 1)
-						activeGroup.materialName = "default";
-					else
-						activeGroup.materialName = tokens[1];
-				}
-			}
-			reader.close();
-		} catch (IOException e) {
-			return null;
-		}
-
-		// If the "default" group or any others were not used, get rid of them
-		for (int i = 0; i < groups.size(); i++) {
-			if (groups.get(i).numFaces < 1) {
-				groups.remove(i);
-				i--;
-			}
-		}
-
-		// If there are no groups left, there is no valid Model to return
-		if (groups.size() < 1) return null;
-
-		// Get number of objects/groups remaining after removing empty ones
-		final int numGroups = groups.size();
-
-		final ModelData data = new ModelData();
-
-		for (int g = 0; g < numGroups; g++) {
-			Group group = groups.get(g);
-			ArrayList<Integer> faces = group.faces;
-			final int numElements = faces.size();
-			final int numFaces = group.numFaces;
-			final boolean hasNorms = group.hasNorms;
-			final boolean hasUVs = group.hasUVs;
-
-			final float[] finalVerts = new float[(numFaces * 3) * (3 + (hasNorms ? 3 : 0) + (hasUVs ? 2 : 0))];
-
-			for (int i = 0, vi = 0; i < numElements;) {
-				int vertIndex = faces.get(i++) * 3;
-				finalVerts[vi++] = verts.get(vertIndex++);
-				finalVerts[vi++] = verts.get(vertIndex++);
-				finalVerts[vi++] = verts.get(vertIndex);
-				if (hasNorms) {
-					int normIndex = faces.get(i++) * 3;
-					finalVerts[vi++] = norms.get(normIndex++);
-					finalVerts[vi++] = norms.get(normIndex++);
-					finalVerts[vi++] = norms.get(normIndex);
-				}
-				if (hasUVs) {
-					int uvIndex = faces.get(i++) * 2;
-					finalVerts[vi++] = uvs.get(uvIndex++);
-					finalVerts[vi++] = uvs.get(uvIndex);
-				}
-			}
-
-			final int numIndices = numFaces * 3 >= Short.MAX_VALUE ? 0 : numFaces * 3;
-			final short[] finalIndices = new short[numIndices];
-			// if there are too many vertices in a mesh, we can't use indices
-			if (numIndices > 0) {
-				for (int i = 0; i < numIndices; i++) {
-					finalIndices[i] = (short)i;
-				}
-			}
-
-			ArrayList<VertexAttribute> attributes = new ArrayList<VertexAttribute>();
-			attributes.add(new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE));
-			if (hasNorms) attributes.add(new VertexAttribute(Usage.Normal, 3, ShaderProgram.NORMAL_ATTRIBUTE));
-			if (hasUVs) attributes.add(new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + "0"));
-		
-			String nodeId = "node" + (++id);
-			String meshId = "mesh" + id;
-			String partId = "part" + id;
-			ModelNode node = new ModelNode();
-			node.id = nodeId;
-			node.meshId = meshId;
-			node.scale = new Vector3(1,1,1);
-			node.translation = new Vector3();
-			node.rotation = new Quaternion();
-			ModelNodePart pm = new ModelNodePart();
-			pm.meshPartId = partId;
-			pm.materialId = group.materialName;
-			node.parts = new ModelNodePart[] { pm };
-			ModelMeshPart part = new ModelMeshPart();
-			part.id = partId;
-			part.indices = finalIndices;
-			part.primitiveType = GL10.GL_TRIANGLES;
-			ModelMesh mesh = new ModelMesh();
-			mesh.id = meshId;
-			mesh.attributes = attributes.toArray(new VertexAttribute[attributes.size()]);
-			mesh.vertices = finalVerts;
-			mesh.parts = new ModelMeshPart[] { part };
-			data.nodes.add(node);
-			data.meshes.add(mesh);
-			ModelMaterial mm = mtl.getMaterial(group.materialName);
-			data.materials.add(mm);
-		}
-
-		//for (ModelMaterial m : mtl.materials)
-			//data.materials.add(m);
-		
-		// An instance of ObjLoader can be used to load more than one OBJ.
-		// Clearing the ArrayList cache instead of instantiating new
-		// ArrayLists should result in slightly faster load times for
-		// subsequent calls to loadObj
-		if (verts.size > 0) verts.clear();
-		if (norms.size > 0) norms.clear();
-		if (uvs.size > 0) uvs.clear();
-		if (groups.size() > 0) groups.clear();
-
-		return data;
-	}
-
-	private Group setActiveGroup (String name) {
-		// TODO: Check if a HashMap.get calls are faster than iterating
-		// through an ArrayList
-		for (Group group : groups) {
-			if (group.name.equals(name)) return group;
-		}
-		Group group = new Group(name);
-		groups.add(group);
-		return group;
-	}
-
-	private int getIndex (String index, int size) {
-		if (index == null || index.length() == 0) return 0;
-		final int idx = Integer.parseInt(index);
-		if (idx < 0)
-			return size + idx;
-		else
-			return idx - 1;
-	}
-
-	private class Group {
-		final String name;
-		String materialName;
-		ArrayList<Integer> faces;
-		int numFaces;
-		boolean hasNorms;
-		boolean hasUVs;
-		Material mat;
-
-		Group (String name) {
-			this.name = name;
-			this.faces = new ArrayList<Integer>(200);
-			this.numFaces = 0;
-			this.mat = new Material("");
-			this.materialName = "default";
-		}
-	}
-}
-
-class MtlLoader {
-	public ArrayList<ModelMaterial> materials = new ArrayList<ModelMaterial>();
-
-	/** loads .mtl file
-	 * @param name */
-	public void load (String name, FileHandle textureDir) {
-		String line;
-		String[] tokens;
-		String curMatName = "default";
-		Color difcolor = Color.WHITE;
-		Color speccolor = Color.WHITE;
-		String texFilename = null;
-
-		FileHandle file = Gdx.files.internal(name);
-		if (file == null || file.exists() == false) return;
-
-		BufferedReader reader = new BufferedReader(new InputStreamReader(file.read()), 4096);
-		try {
-			while ((line = reader.readLine()) != null) {
-
-				if (line.length() > 0 && line.charAt(0) == '\t') line = line.substring(1).trim();
-
-				tokens = line.split("\\s+");
-
-				if (tokens[0].length() == 0) {
-					continue;
-				} else if (tokens[0].charAt(0) == '#')
-					continue;
-				else if (tokens[0].toLowerCase().equals("newmtl")) {
-					ModelMaterial mat = new ModelMaterial();
-					mat.id = curMatName;
-					mat.diffuse = new Color(difcolor);
-					mat.specular = new Color(speccolor);
-					if (texFilename != null) {
-						ModelTexture tex = new ModelTexture();
-						tex.fileName = new String(texFilename);
-						if (mat.diffuseTextures == null)
-							mat.diffuseTextures = new Array<ModelTexture>(1);
-						mat.diffuseTextures.add(tex);						
-					}
-					materials.add(mat);
-
-					if (tokens.length > 1) {
-						curMatName = tokens[1];
-						curMatName = curMatName.replace('.', '_');
-					} else
-						curMatName = "default";
-
-					difcolor = Color.WHITE;
-					speccolor = Color.WHITE;
-				} else if (tokens[0].toLowerCase().equals("kd") || tokens[0].toLowerCase().equals("ks")) // diffuse or specular
-				{
-					float r = Float.parseFloat(tokens[1]);
-					float g = Float.parseFloat(tokens[2]);
-					float b = Float.parseFloat(tokens[3]);
-					float a = 1;
-					if (tokens.length > 4) a = Float.parseFloat(tokens[4]);
-
-					if (tokens[0].toLowerCase().equals("kd")) {
-						difcolor = new Color();
-						difcolor.set(r, g, b, a);
-					} else {
-						speccolor = new Color();
-						speccolor.set(r, g, b, a);
-					}
-				} else if (tokens[0].toLowerCase().equals("map_kd")) {
-					String textureName = tokens[1];
-					if (textureName.length() > 0) {
-						texFilename = textureDir.child(textureName).toString();
-					} else
-						texFilename = null; 
-
-				}
-
-			}
-			reader.close();
-		} catch (IOException e) {
-			return;
-		}
-
-		// last material
-		ModelMaterial mat = new ModelMaterial();
-		mat.id = curMatName;
-		mat.diffuse = new Color(difcolor);
-		mat.specular = new Color(speccolor);
-		if (texFilename != null) {
-			ModelTexture tex = new ModelTexture();
-			tex.fileName = new String(texFilename);
-			if (mat.diffuseTextures == null)
-				mat.diffuseTextures = new Array<ModelTexture>(1);
-			mat.diffuseTextures.add(tex);
-		}
-		materials.add(mat);
-
-		return;
-	}
-	
-	public ModelMaterial getMaterial(final String name) {
-		for (final ModelMaterial m : materials)
-			if (m.id.equals(name))
-				return m;
-		ModelMaterial mat = new ModelMaterial();
-		mat.id = name;
-		mat.diffuse = new Color(Color.WHITE);
-		materials.add(mat);
-		return mat;
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/KeyframedModelLoader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/KeyframedModelLoader.java
new file mode 100644
index 0000000..7694d35
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/KeyframedModelLoader.java
@@ -0,0 +1,27 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders;
+
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.g3d.ModelLoaderHints;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedModel;
+
+/** Interface for classes loading {@link KeyframedModel} instances.
+ * @author mzechner */
+public interface KeyframedModelLoader extends ModelLoader {
+	public KeyframedModel load (FileHandle handle, ModelLoaderHints hints);
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/ModelLoader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/ModelLoader.java
new file mode 100644
index 0000000..cd9bdd0
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/ModelLoader.java
@@ -0,0 +1,29 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders;
+
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.g3d.ModelLoaderHints;
+import com.badlogic.gdx.graphics.g3d.model.Model;
+
+/** Interface for all loaders. Loaders that need more files need to derrive the other file names by the given file. A bit of a
+ * hack, but most formats are self contained.
+ * 
+ * @author mzechner */
+public interface ModelLoader {
+	public Model load (FileHandle file, ModelLoaderHints hints);
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/ModelLoaderRegistry.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/ModelLoaderRegistry.java
new file mode 100644
index 0000000..594742d
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/ModelLoaderRegistry.java
@@ -0,0 +1,390 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.g3d.ModelLoaderHints;
+import com.badlogic.gdx.graphics.g3d.loaders.g3d.G3dLoader.G3dKeyframedModelLoader;
+import com.badlogic.gdx.graphics.g3d.loaders.g3d.G3dLoader.G3dStillModelLoader;
+import com.badlogic.gdx.graphics.g3d.loaders.g3d.G3dLoader.G3dSkeletonModelLoader;
+import com.badlogic.gdx.graphics.g3d.loaders.g3d.G3dtLoader.G3dtKeyframedModelLoader;
+import com.badlogic.gdx.graphics.g3d.loaders.g3d.G3dtLoader.G3dtStillModelLoader;
+import com.badlogic.gdx.graphics.g3d.loaders.md2.MD2Loader;
+import com.badlogic.gdx.graphics.g3d.loaders.md2.MD2Loader.MD2LoaderHints;
+import com.badlogic.gdx.graphics.g3d.loaders.wavefront.ObjLoader;
+import com.badlogic.gdx.graphics.g3d.model.Model;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedModel;
+import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonModel;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+
+/** Simple "pluggable" class for loading models. Keeps a list of {@link ModelLoader} instances on a per file suffix basis. Use one
+ * of the static methods to load a {@link Model}. The registry will then try out all the registered loaders for that extension and
+ * eventually return a Model or throw a {@link GdxRuntimeException}.
+ * 
+ * @author mzechner */
+public class ModelLoaderRegistry {
+	private static Map<String, Array<ModelLoader>> loaders = new HashMap<String, Array<ModelLoader>>();
+	private static Map<String, Array<ModelLoaderHints>> defaultHints = new HashMap<String, Array<ModelLoaderHints>>();
+
+	// registering the default loaders here
+	static {
+		/* TODO: Move/Drop support
+		registerLoader("dae", new ColladaLoader(), new ModelLoaderHints(false));
+		registerLoader("dae", new ColladaLoaderSkeleton(), new ModelLoaderHints(false));
+		*/
+		registerLoader("obj", new ObjLoader(), new ModelLoaderHints(false));
+		registerLoader("md2", new MD2Loader(), new MD2LoaderHints(0.2f));
+		registerLoader("g3dt", new G3dtStillModelLoader(), new ModelLoaderHints(true));
+		registerLoader("g3dt", new G3dtKeyframedModelLoader(), new ModelLoaderHints(true));
+		registerLoader("g3d", new G3dStillModelLoader(), new ModelLoaderHints(false));
+		registerLoader("g3d", new G3dKeyframedModelLoader(), new ModelLoaderHints(false));
+		registerLoader("g3d", new G3dSkeletonModelLoader(), new ModelLoaderHints(false));
+		/*
+		registerLoader("ctm", new CtmModelLoader(), new ModelLoaderHints(false));
+		*/
+	}
+
+	/** Registers a new loader with the registry. The extension will be used to match the loader against a file to be loaded. The
+	 * extension will be compared case insensitive. If multiple loaders are registered per extension they will be tried on a file
+	 * in the sequence they have been registered until one succeeds or none succeed.
+	 * 
+	 * @param extension the extension string, e.g. "dae" or "obj"
+	 * @param loader the {@link ModelLoader}
+	 * @param defaultHints the default {@link ModelLoaderHints} to be used with this loader. */
+	public static void registerLoader (String extension, ModelLoader loader, ModelLoaderHints defaultHints) {
+		Array<ModelLoader> loaders = ModelLoaderRegistry.loaders.get(extension);
+		if (loaders == null) {
+			loaders = new Array<ModelLoader>();
+			ModelLoaderRegistry.loaders.put(extension.toLowerCase(), loaders);
+		}
+		loaders.add(loader);
+
+		Array<ModelLoaderHints> hints = ModelLoaderRegistry.defaultHints.get(extension);
+		if (hints == null) {
+			hints = new Array<ModelLoaderHints>();
+			ModelLoaderRegistry.defaultHints.put(extension.toLowerCase(), hints);
+		}
+		hints.add(defaultHints);
+	}
+
+	/** Loads the specified file with one of the loaders registered with this ModelLoaderRegistry. Uses the extension to determine
+	 * which loader to use. The comparison of extensions is done case insensitive.
+	 * @param file the file to be loaded
+	 * @return the {@link Model}
+	 * @throws GdxRuntimeException in case the model could not be loaded. */
+	public static Model load (FileHandle file) {
+		String name = file.name();
+		int dotIndex = name.lastIndexOf('.');
+		if (dotIndex == -1)
+			throw new GdxRuntimeException("file '" + file.name()
+				+ "' does not have an extension that can be matched to a ModelLoader");
+		String extension = name.substring(dotIndex + 1).toLowerCase();
+
+		Array<ModelLoader> loaders = ModelLoaderRegistry.loaders.get(extension);
+		Array<ModelLoaderHints> hints = ModelLoaderRegistry.defaultHints.get(extension);
+		if (loaders == null) throw new GdxRuntimeException("no loaders for extension '" + extension + "'");
+		if (hints == null) throw new GdxRuntimeException("no default hints for extension '" + extension + "'");
+
+		Model model = null;
+		StringBuilder errors = new StringBuilder();
+		for (int i = 0; i < loaders.size; i++) {
+			ModelLoader loader = loaders.get(i);
+			ModelLoaderHints hint = hints.get(i);
+			try {
+				model = loader.load(file, hint);
+			} catch (GdxRuntimeException e) {
+				errors.append("Couldn't load '" + file.name() + "' with loader of type " + loader.getClass().getName() + ": "
+					+ e.getMessage() + "\n");
+			}
+		}
+
+		if (model == null)
+			throw new GdxRuntimeException(errors.toString());
+		else
+			return model;
+	}
+
+	/** Loads the specified file with one of the loaders registered with this ModelLoaderRegistry. Uses the extension to determine
+	 * which loader to use. The comparison of extensions is done case insensitive.
+	 * @param file the file to be loaded
+	 * @param hints the {@link ModelLoaderHints} to use
+	 * @return the {@link Model}
+	 * @throws GdxRuntimeException in case the model could not be loaded. */
+	public static Model load (FileHandle file, ModelLoaderHints hints) {
+		String name = file.name();
+		int dotIndex = name.lastIndexOf('.');
+		if (dotIndex == -1)
+			throw new GdxRuntimeException("file '" + file.name()
+				+ "' does not have an extension that can be matched to a ModelLoader");
+		String extension = name.substring(dotIndex + 1).toLowerCase();
+
+		Array<ModelLoader> loaders = ModelLoaderRegistry.loaders.get(extension);
+		if (loaders == null) throw new GdxRuntimeException("no loaders for extension '" + extension + "'");
+
+		Model model = null;
+		StringBuilder errors = new StringBuilder();
+		for (int i = 0; i < loaders.size; i++) {
+			ModelLoader loader = loaders.get(i);
+			try {
+				model = loader.load(file, hints);
+			} catch (GdxRuntimeException e) {
+				errors.append("Couldn't load '" + file.name() + "' with loader of type " + loader.getClass().getName() + ": "
+					+ e.getMessage() + "\n");
+			}
+		}
+
+		if (model == null)
+			throw new GdxRuntimeException(errors.toString());
+		else
+			return model;
+	}
+
+	/** Loads the specified file with one of the loaders registered with this ModelLoaderRegistry. Uses the extension to determine
+	 * which loader to use. The comparison of extensions is done case insensitive. Uses only {@link StillModelLoader} instances.
+	 * @param file the file to be loaded
+	 * @return the {@link Model}
+	 * @throws GdxRuntimeException in case the model could not be loaded. */
+	public static StillModel loadStillModel (FileHandle file) {
+		String name = file.name();
+		int dotIndex = name.lastIndexOf('.');
+		if (dotIndex == -1)
+			throw new GdxRuntimeException("file '" + file.name()
+				+ "' does not have an extension that can be matched to a ModelLoader");
+		String extension = name.substring(dotIndex + 1).toLowerCase();
+
+		Array<ModelLoader> loaders = ModelLoaderRegistry.loaders.get(extension);
+		Array<ModelLoaderHints> hints = ModelLoaderRegistry.defaultHints.get(extension);
+		if (loaders == null) throw new GdxRuntimeException("no loaders for extension '" + extension + "'");
+		if (hints == null) throw new GdxRuntimeException("no default hints for extension '" + extension + "'");
+
+		StillModel model = null;
+		StringBuilder errors = new StringBuilder();
+		for (int i = 0; i < loaders.size; i++) {
+			ModelLoader loader = loaders.get(i);
+			ModelLoaderHints hint = hints.get(i);
+			try {
+				if (loader instanceof StillModelLoader) {
+					model = ((StillModelLoader)loader).load(file, hint);
+				}
+			} catch (GdxRuntimeException e) {
+				errors.append("Couldn't load '" + file.name() + "' with loader of type " + loader.getClass().getName() + ": "
+					+ e.getMessage() + "\n");
+			}
+		}
+
+		if (model == null)
+			throw new GdxRuntimeException("Couldn't load model '" + file.name() + "', " + errors.toString());
+		else
+			return model;
+	}
+
+	/** Loads the specified file with one of the loaders registered with this ModelLoaderRegistry. Uses the extension to determine
+	 * which loader to use. The comparison of extensions is done case insensitive. Uses only {@link StillModelLoader} instances.
+	 * @param file the file to be loaded
+	 * @param hints the ModelLoaderHints to be used.
+	 * @return the {@link Model}
+	 * @throws GdxRuntimeException in case the model could not be loaded. */
+	public static StillModel loadStillModel (FileHandle file, ModelLoaderHints hints) {
+		String name = file.name();
+		int dotIndex = name.lastIndexOf('.');
+		if (dotIndex == -1)
+			throw new GdxRuntimeException("file '" + file.name()
+				+ "' does not have an extension that can be matched to a ModelLoader");
+		String extension = name.substring(dotIndex + 1).toLowerCase();
+
+		Array<ModelLoader> loaders = ModelLoaderRegistry.loaders.get(extension);
+		if (loaders == null) throw new GdxRuntimeException("no loaders for extension '" + extension + "'");
+
+		StillModel model = null;
+		StringBuilder errors = new StringBuilder();
+		for (int i = 0; i < loaders.size; i++) {
+			ModelLoader loader = loaders.get(i);
+			try {
+				if (loader instanceof StillModelLoader) {
+					model = ((StillModelLoader)loader).load(file, hints);
+				}
+			} catch (GdxRuntimeException e) {
+				errors.append("Couldn't load '" + file.name() + "' with loader of type " + loader.getClass().getName() + ": "
+					+ e.getMessage() + "\n");
+			}
+		}
+
+		if (model == null)
+			throw new GdxRuntimeException("Couldn't load model '" + file.name() + "', " + errors.toString());
+		else
+			return model;
+	}
+
+	/** Loads the specified file with one of the loaders registered with this ModelLoaderRegistry. Uses the extension to determine
+	 * which loader to use. The comparison of extensions is done case insensitive. Uses only {@link KeyframedModelLoader}
+	 * instances.
+	 * @param file the file to be loaded
+	 * @return the {@link Model}
+	 * @throws GdxRuntimeException in case the model could not be loaded. */
+	public static KeyframedModel loadKeyframedModel (FileHandle file) {
+		String name = file.name();
+		int dotIndex = name.lastIndexOf('.');
+		if (dotIndex == -1)
+			throw new GdxRuntimeException("file '" + file.name()
+				+ "' does not have an extension that can be matched to a ModelLoader");
+		String extension = name.substring(dotIndex + 1).toLowerCase();
+
+		Array<ModelLoader> loaders = ModelLoaderRegistry.loaders.get(extension);
+		Array<ModelLoaderHints> hints = ModelLoaderRegistry.defaultHints.get(extension);
+		if (loaders == null) throw new GdxRuntimeException("no loaders for extension '" + extension + "'");
+		if (hints == null) throw new GdxRuntimeException("no default hints for extension '" + extension + "'");
+
+		KeyframedModel model = null;
+		StringBuilder errors = new StringBuilder();
+		for (int i = 0; i < loaders.size; i++) {
+			ModelLoader loader = loaders.get(i);
+			ModelLoaderHints hint = hints.get(i);
+			try {
+				if (loader instanceof KeyframedModelLoader) {
+					model = ((KeyframedModelLoader)loader).load(file, hint);
+				}
+			} catch (GdxRuntimeException e) {
+				errors.append("Couldn't load '" + file.name() + "' with loader of type " + loader.getClass().getName() + ": "
+					+ e.getMessage() + "\n");
+			}
+		}
+
+		if (model == null)
+			throw new GdxRuntimeException(errors.toString());
+		else
+			return model;
+	}
+
+	/** Loads the specified file with one of the loaders registered with this ModelLoaderRegistry. Uses the extension to determine
+	 * which loader to use. The comparison of extensions is done case insensitive. Uses only {@link KeyframedModelLoader}
+	 * instances.
+	 * @param file the file to be loaded
+	 * @param hints the Model
+	 * @return the {@link Model}
+	 * @throws GdxRuntimeException in case the model could not be loaded. */
+	public static KeyframedModel loadKeyframedModel (FileHandle file, ModelLoaderHints hints) {
+		String name = file.name();
+		int dotIndex = name.lastIndexOf('.');
+		if (dotIndex == -1)
+			throw new GdxRuntimeException("file '" + file.name()
+				+ "' does not have an extension that can be matched to a ModelLoader");
+		String extension = name.substring(dotIndex + 1).toLowerCase();
+
+		Array<ModelLoader> loaders = ModelLoaderRegistry.loaders.get(extension);
+		if (loaders == null) throw new GdxRuntimeException("no loaders for extension '" + extension + "'");
+
+		KeyframedModel model = null;
+		StringBuilder errors = new StringBuilder();
+		for (int i = 0; i < loaders.size; i++) {
+			ModelLoader loader = loaders.get(i);
+			try {
+				if (loader instanceof KeyframedModelLoader) {
+					model = ((KeyframedModelLoader)loader).load(file, hints);
+				}
+			} catch (GdxRuntimeException e) {
+				errors.append("Couldn't load '" + file.name() + "' with loader of type " + loader.getClass().getName() + ": "
+					+ e.getMessage() + "\n");
+			}
+		}
+
+		if (model == null)
+			throw new GdxRuntimeException(errors.toString());
+		else
+			return model;
+	}
+
+	/** Loads the specified file with one of the loaders registered with this ModelLoaderRegistry. Uses the extension to determine
+	 * which loader to use. The comparison of extensions is done case insensitive. Uses only {@link SkeletonModelLoader} instances.
+	 * @param file the file to be loaded
+	 * @return the {@link Model}
+	 * @throws GdxRuntimeException in case the model could not be loaded. */
+	public static SkeletonModel loadSkeletonModel (FileHandle file) {
+		String name = file.name();
+		int dotIndex = name.lastIndexOf('.');
+		if (dotIndex == -1)
+			throw new GdxRuntimeException("file '" + file.name()
+				+ "' does not have an extension that can be matched to a ModelLoader");
+		String extension = name.substring(dotIndex + 1).toLowerCase();
+
+		Array<ModelLoader> loaders = ModelLoaderRegistry.loaders.get(extension);
+		Array<ModelLoaderHints> hints = ModelLoaderRegistry.defaultHints.get(extension);
+		if (loaders == null) throw new GdxRuntimeException("no loaders for extension '" + extension + "'");
+		if (hints == null) throw new GdxRuntimeException("no default hints for extension '" + extension + "'");
+
+		SkeletonModel model = null;
+		StringBuilder errors = new StringBuilder();
+		for (int i = 0; i < loaders.size; i++) {
+			ModelLoader loader = loaders.get(i);
+			ModelLoaderHints hint = hints.get(i);
+			try {
+				if (loader instanceof SkeletonModelLoader) {
+					model = ((SkeletonModelLoader)loader).load(file, hint);
+				}
+			} catch (GdxRuntimeException e) {
+				errors.append("Couldn't load '" + file.name() + "' with loader of type " + loader.getClass().getName() + ": "
+					+ e.getMessage());
+			}
+		}
+
+		if (model == null)
+			throw new GdxRuntimeException(errors.toString());
+		else
+			return model;
+	}
+
+	/** Loads the specified file with one of the loaders registered with this ModelLoaderRegistry. Uses the extension to determine
+	 * which loader to use. The comparison of extensions is done case insensitive. Uses only {@link SkeletonModelLoader} instances.
+	 * @param file the file to be loaded
+	 * @param hints the ModelLoaderHints to use
+	 * @return the {@link Model}
+	 * @throws GdxRuntimeException in case the model could not be loaded. */
+	public static SkeletonModel loadSkeletonModel (FileHandle file, ModelLoaderHints hints) {
+		String name = file.name();
+		int dotIndex = name.lastIndexOf('.');
+		if (dotIndex == -1)
+			throw new GdxRuntimeException("file '" + file.name()
+				+ "' does not have an extension that can be matched to a ModelLoader");
+		String extension = name.substring(dotIndex + 1).toLowerCase();
+
+		Array<ModelLoader> loaders = ModelLoaderRegistry.loaders.get(extension);
+		if (loaders == null) throw new GdxRuntimeException("no loaders for extension '" + extension + "'");
+
+		SkeletonModel model = null;
+		StringBuilder errors = new StringBuilder();
+		for (int i = 0; i < loaders.size; i++) {
+			ModelLoader loader = loaders.get(i);
+			try {
+				if (loader instanceof SkeletonModelLoader) {
+					model = ((SkeletonModelLoader)loader).load(file, hints);
+				}
+			} catch (GdxRuntimeException e) {
+				errors.append("Couldn't load '" + file.name() + "' with loader of type " + loader.getClass().getName() + ": "
+					+ e.getMessage());
+			}
+		}
+
+		if (model == null)
+			throw new GdxRuntimeException(errors.toString());
+		else
+			return model;
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/SkeletonModelLoader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/SkeletonModelLoader.java
new file mode 100644
index 0000000..802df58
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/SkeletonModelLoader.java
@@ -0,0 +1,27 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders;
+
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.g3d.ModelLoaderHints;
+import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonModel;
+
+/** Interface for classes loading {@link SkeletonModel} instances.
+ * @author mzechner */
+public interface SkeletonModelLoader extends ModelLoader {
+	public SkeletonModel load (FileHandle file, ModelLoaderHints hints);
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/StillModelLoader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/StillModelLoader.java
new file mode 100644
index 0000000..68452a0
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/StillModelLoader.java
@@ -0,0 +1,27 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders;
+
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.g3d.ModelLoaderHints;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+
+/** Interface for loaders loading {@link StillModel} instances.
+ * @author mzechner */
+public interface StillModelLoader extends ModelLoader {
+	public StillModel load (FileHandle handle, ModelLoaderHints hints);
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/G3dConstants.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/G3dConstants.java
new file mode 100644
index 0000000..11c5f87
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/G3dConstants.java
@@ -0,0 +1,57 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders.g3d;
+
+public class G3dConstants {
+	// Version info for file format
+	public static final byte MAJOR_VERSION = 0;
+	public static final byte MINOR_VERSION = 1;
+
+	// Unique IDs for chunk declarations
+	public static final int G3D_ROOT = 0x4733441A;
+	public static final int VERSION_INFO = 0x0001;
+
+	// still model specific constants
+	public static final int STILL_MODEL = 0x1000;
+	public static final int STILL_SUBMESH = 0x1100;
+
+	// keyframed model specific constants
+	public static final int KEYFRAMED_MODEL = 0x2000;
+	public static final int KEYFRAMED_SUBMESH = 0x2200;
+	public static final int KEYFRAMED_ANIMATION = 0x2300;
+	public static final int KEYFRAMED_FRAME = 0x2400;
+	
+	// skeleton model specific constants
+	public static final int SKELETON_MODEL = 0x4000;
+	public static final int SKELETON_SUBMESH = 0x4200;
+	public static final int SKELETON_ANIMATIONS = 0x4300;
+	public static final int SKELETON_ANIMATION = 0x4400;
+	public static final int SKELETON = 0x4500;
+	public static final int SKELETON_HIERARCHY = 0x4600;
+	public static final int SKELETON_JOINT = 0x4700;
+	public static final int SKELETON_KEYFRAME = 0x4800;
+
+	// constants used for all types of models, mostly to describe a mesh
+	public static final int VERTEX_LIST = 0x1110;
+	public static final int INDEX_LIST = 0x1111;
+	public static final int VERTEX_ATTRIBUTES = 0x1120;
+	public static final int VERTEX_ATTRIBUTE = 0x1121;
+	public static final int BONE_WEIGHTS = 0x1130;
+	public static final int BONE_WEIGHT = 0x1131;
+	public static final int BONE_ASSIGNMENTS = 0x1140;
+	public static final int BONE_ASSIGNMENT = 0x1141;
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/G3dLoader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/G3dLoader.java
new file mode 100644
index 0000000..7c66f14
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/G3dLoader.java
@@ -0,0 +1,448 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders.g3d;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.Mesh;
+import com.badlogic.gdx.graphics.Mesh.VertexDataType;
+import com.badlogic.gdx.graphics.VertexAttribute;
+import com.badlogic.gdx.graphics.g3d.ModelLoaderHints;
+import com.badlogic.gdx.graphics.g3d.loaders.KeyframedModelLoader;
+import com.badlogic.gdx.graphics.g3d.loaders.SkeletonModelLoader;
+import com.badlogic.gdx.graphics.g3d.loaders.StillModelLoader;
+import com.badlogic.gdx.graphics.g3d.loaders.g3d.chunks.ChunkReader;
+import com.badlogic.gdx.graphics.g3d.loaders.g3d.chunks.ChunkReader.Chunk;
+import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.Keyframe;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedAnimation;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedModel;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedSubMesh;
+import com.badlogic.gdx.graphics.g3d.model.skeleton.Skeleton;
+import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonAnimation;
+import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonJoint;
+import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonKeyframe;
+import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonModel;
+import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonSubMesh;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.model.still.StillSubMesh;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+import com.badlogic.gdx.utils.ObjectMap;
+
+public class G3dLoader {
+	public static StillModel loadStillModel (FileHandle handle) {
+		Chunk root = null;
+		InputStream in = null;
+		try {
+			in = handle.read();
+			root = ChunkReader.readChunks(in);
+
+			// check root tag
+			if (root.getId() != G3dConstants.G3D_ROOT) throw new GdxRuntimeException("Invalid root tag id: " + root.getId());
+
+			// check version
+			Chunk version = root.getChild(G3dConstants.VERSION_INFO);
+			if (version == null) throw new GdxRuntimeException("No version chunk found");
+			int major = version.readByte();
+			int minor = version.readByte();
+			if (major != 0 || minor != 1)
+				throw new GdxRuntimeException("Invalid version, required 0.1, got " + major + "." + minor);
+
+			// read stillmodel
+			Chunk stillModel = root.getChild(G3dConstants.STILL_MODEL);
+			if (stillModel == null) throw new GdxRuntimeException("No stillmodel chunk found");
+			int numSubMeshes = stillModel.readInt();
+
+			// read submeshes
+			StillSubMesh[] meshes = new StillSubMesh[numSubMeshes];
+			Chunk[] meshChunks = stillModel.getChildren(G3dConstants.STILL_SUBMESH);
+			if (meshChunks.length != numSubMeshes)
+				throw new GdxRuntimeException("Number of submeshes not equal to number specified in still model chunk, expected "
+					+ numSubMeshes + ", got " + meshChunks.length);
+			for (int i = 0; i < numSubMeshes; i++) {
+				// read submesh name and primitive type
+				Chunk subMesh = meshChunks[i];
+				String name = subMesh.readString();
+				int primitiveType = subMesh.readInt();
+
+				// read attributes
+				Chunk attributes = subMesh.getChild(G3dConstants.VERTEX_ATTRIBUTES);
+				if (attributes == null) throw new GdxRuntimeException("No vertex attribute chunk given");
+				int numAttributes = attributes.readInt();
+				Chunk[] attributeChunks = attributes.getChildren(G3dConstants.VERTEX_ATTRIBUTE);
+				if (attributeChunks.length != numAttributes)
+					new GdxRuntimeException("Number of attributes not equal to number specified in attributes chunk, expected "
+						+ numAttributes + ", got " + attributeChunks.length);
+				VertexAttribute[] vertAttribs = new VertexAttribute[numAttributes];
+				for (int j = 0; j < numAttributes; j++) {
+					vertAttribs[j] = new VertexAttribute(attributeChunks[j].readInt(), attributeChunks[j].readInt(),
+						attributeChunks[j].readString());
+				}
+
+				// read vertices
+				Chunk vertices = subMesh.getChild(G3dConstants.VERTEX_LIST);
+				int numVertices = vertices.readInt();
+				float[] vertexData = vertices.readFloats();
+
+				// read indices
+				Chunk indices = subMesh.getChild(G3dConstants.INDEX_LIST);
+				int numIndices = indices.readInt();
+				short[] indexData = indices.readShorts();
+
+				StillSubMesh mesh = new StillSubMesh(name, new Mesh(true, numVertices, numIndices, vertAttribs), primitiveType);
+				mesh.mesh.setVertices(vertexData);
+				mesh.mesh.setIndices(indexData);
+				mesh.material = new Material("default");
+				meshes[i] = mesh;
+			}
+
+			StillModel model = new StillModel(meshes);
+			model.setMaterial(new Material("default"));
+			return model;
+		} catch (IOException e) {
+			throw new GdxRuntimeException("Couldn't load still model from '" + handle.name() + "', " + e.getMessage(), e);
+		} finally {
+			if (in != null) try {
+				in.close();
+			} catch (IOException e) {
+			}
+		}
+	}
+
+	public static KeyframedModel loadKeyframedModel (FileHandle handle) {
+		Chunk root = null;
+		InputStream in = null;
+		try {
+			in = handle.read();
+			root = ChunkReader.readChunks(in);
+
+			// check root tag
+			if (root.getId() != G3dConstants.G3D_ROOT) throw new GdxRuntimeException("Invalid root tag id: " + root.getId());
+
+			// check version
+			Chunk version = root.getChild(G3dConstants.VERSION_INFO);
+			if (version == null) throw new GdxRuntimeException("No version chunk found");
+			int major = version.readByte();
+			int minor = version.readByte();
+			if (major != 0 || minor != 1)
+				throw new GdxRuntimeException("Invalid version, required 0.1, got " + major + "." + minor);
+
+			// read keyframed model
+			Chunk stillModel = root.getChild(G3dConstants.KEYFRAMED_MODEL);
+			if (stillModel == null) throw new GdxRuntimeException("No stillmodel chunk found");
+			int numSubMeshes = stillModel.readInt();
+
+			// read submeshes
+			KeyframedSubMesh[] meshes = new KeyframedSubMesh[numSubMeshes];
+			Chunk[] meshChunks = stillModel.getChildren(G3dConstants.KEYFRAMED_SUBMESH);
+			if (meshChunks.length != numSubMeshes)
+				throw new GdxRuntimeException("Number of submeshes not equal to number specified in still model chunk, expected "
+					+ numSubMeshes + ", got " + meshChunks.length);
+			for (int i = 0; i < numSubMeshes; i++) {
+				// read submesh name and primitive type
+				Chunk subMesh = meshChunks[i];
+				String meshName = subMesh.readString();
+				int primitiveType = subMesh.readInt();
+				int animatedComponents = subMesh.readInt();
+				int numAnimations = subMesh.readInt();
+
+				// read attributes
+				Chunk attributes = subMesh.getChild(G3dConstants.VERTEX_ATTRIBUTES);
+				if (attributes == null) throw new GdxRuntimeException("No vertex attribute chunk given");
+				int numAttributes = attributes.readInt();
+				Chunk[] attributeChunks = attributes.getChildren(G3dConstants.VERTEX_ATTRIBUTE);
+				if (attributeChunks.length != numAttributes)
+					new GdxRuntimeException("Number of attributes not equal to number specified in attributes chunk, expected "
+						+ numAttributes + ", got " + attributeChunks.length);
+				VertexAttribute[] vertAttribs = new VertexAttribute[numAttributes];
+				for (int j = 0; j < numAttributes; j++) {
+					vertAttribs[j] = new VertexAttribute(attributeChunks[j].readInt(), attributeChunks[j].readInt(),
+						attributeChunks[j].readString());
+				}
+
+				// read static components, sort of like a bind pose mesh
+				Chunk vertices = subMesh.getChild(G3dConstants.VERTEX_LIST);
+				int numVertices = vertices.readInt();
+				float[] vertexData = vertices.readFloats();
+
+				// read indices
+				Chunk indices = subMesh.getChild(G3dConstants.INDEX_LIST);
+				int numIndices = indices.readInt();
+				short[] indexData = indices.readShorts();
+
+				// read animations
+				ObjectMap<String, KeyframedAnimation> animations = new ObjectMap<String, KeyframedAnimation>();
+				Chunk[] animationChunks = subMesh.getChildren(G3dConstants.KEYFRAMED_ANIMATION);
+				if (numAnimations != animationChunks.length)
+					throw new GdxRuntimeException(
+						"number of keyframed animations not equal to number specified in keyframed submesh chunk, was "
+							+ animationChunks.length + ", expected " + numAnimations);
+				for (int j = 0; j < numAnimations; j++) {
+					Chunk animationChunk = animationChunks[j];
+					String animationName = animationChunk.readString();
+					float frameDuration = animationChunk.readFloat();
+
+					// read keyframes
+					int numKeyframes = animationChunk.readInt();
+					Keyframe[] keyframes = new Keyframe[numKeyframes];
+					Chunk[] keyframeChunks = animationChunk.getChildren(G3dConstants.KEYFRAMED_FRAME);
+					if (numKeyframes != keyframeChunks.length)
+						throw new GdxRuntimeException("number of keyframes not equal to number specified in keyframed animation, was "
+							+ keyframeChunks.length + ", expected " + numKeyframes);
+					for (int k = 0; k < numKeyframes; k++) {
+						Chunk keyframeChunk = keyframeChunks[k];
+						float timeStamp = keyframeChunk.readFloat();
+						float[] keyframeVertices = keyframeChunk.readFloats();
+
+						keyframes[k] = new Keyframe(timeStamp, keyframeVertices);
+					}
+
+					animations.put(animationName, new KeyframedAnimation(animationName, frameDuration, keyframes));
+				}
+
+				Mesh mesh = new Mesh(VertexDataType.VertexArray, false, numVertices, numIndices, vertAttribs);
+				meshes[i] = new KeyframedSubMesh(meshName, mesh, vertexData, animations, animatedComponents, primitiveType);
+				mesh.setVertices(vertexData);
+				mesh.setIndices(indexData);
+			}
+
+			KeyframedModel model = new KeyframedModel(meshes);
+			model.setMaterial(new Material("default"));
+			return model;
+		} catch (IOException e) {
+			throw new GdxRuntimeException("Couldn't load still model from '" + handle.name() + "', " + e.getMessage(), e);
+		} finally {
+			if (in != null) try {
+				in.close();
+			} catch (IOException e) {
+			}
+		}
+	}
+	
+	public static SkeletonModel loadSkeletonModel (FileHandle handle) {
+		Chunk root = null;
+		InputStream in = null;
+		try {
+			in = handle.read();
+			root = ChunkReader.readChunks(in);
+
+			// check root tag
+			if (root.getId() != G3dConstants.G3D_ROOT) throw new GdxRuntimeException("Invalid root tag id: " + root.getId());
+
+			// check version
+			Chunk version = root.getChild(G3dConstants.VERSION_INFO);
+			if (version == null) throw new GdxRuntimeException("No version chunk found");
+			int major = version.readByte();
+			int minor = version.readByte();
+			if (major != 0 || minor != 1)
+				throw new GdxRuntimeException("Invalid version, required 0.1, got " + major + "." + minor);
+
+			// read skeleton model
+			Chunk skeletonModel = root.getChild(G3dConstants.SKELETON_MODEL);
+			if (skeletonModel == null) throw new GdxRuntimeException("No skeletonModel chunk found");
+			int numSubMeshes = skeletonModel.readInt();
+
+			// read submeshes
+			SkeletonSubMesh[] meshes = new SkeletonSubMesh[numSubMeshes];
+			Chunk[] meshChunks = skeletonModel.getChildren(G3dConstants.SKELETON_SUBMESH);
+			if (meshChunks.length != numSubMeshes)
+				throw new GdxRuntimeException("Number of submeshes not equal to number specified in still model chunk, expected "
+					+ numSubMeshes + ", got " + meshChunks.length);
+			for (int i = 0; i < numSubMeshes; i++) {
+				Chunk subMeshChunk = meshChunks[i];
+				
+				// read attributes
+				Chunk attributes = subMeshChunk.getChild(G3dConstants.VERTEX_ATTRIBUTES);
+				if (attributes == null) throw new GdxRuntimeException("No vertex attribute chunk given");
+				int numAttributes = attributes.readInt();
+				Chunk[] attributeChunks = attributes.getChildren(G3dConstants.VERTEX_ATTRIBUTE);
+				if (attributeChunks.length != numAttributes)
+					new GdxRuntimeException("Number of attributes not equal to number specified in attributes chunk, expected "
+						+ numAttributes + ", got " + attributeChunks.length);
+				VertexAttribute[] vertAttribs = new VertexAttribute[numAttributes];
+				for (int j = 0; j < numAttributes; j++) {
+					vertAttribs[j] = new VertexAttribute(attributeChunks[j].readInt(), attributeChunks[j].readInt(),
+						attributeChunks[j].readString());
+				}
+
+				// read static components, sort of like a bind pose mesh
+				Chunk vertices = subMeshChunk.getChild(G3dConstants.VERTEX_LIST);
+				int numVertices = vertices.readInt();
+				float[] meshVertices = vertices.readFloats();
+
+				// read indices
+				Chunk indices = subMeshChunk.getChild(G3dConstants.INDEX_LIST);
+				int numIndices = indices.readInt();
+				short[] meshIndices = indices.readShorts();
+				
+				//read bone weight
+				Chunk boneWeights = subMeshChunk.getChild(G3dConstants.BONE_WEIGHTS);
+				int numBonesWeights = boneWeights.readInt();
+				Chunk[] boneWeightChunks = boneWeights.getChildren(G3dConstants.BONE_WEIGHT);
+				if (attributeChunks.length != numAttributes)
+					new GdxRuntimeException("Number of bone weights not equal to number specified in bone weights chunk, expected "
+						+ numBonesWeights + ", got " + boneWeightChunks.length);
+				float[][] meshBoneWeights = new float[numBonesWeights][];
+				for(int j=0;j<numBonesWeights;j++) {
+					int count = boneWeightChunks[j].readInt();
+					meshBoneWeights[j] = boneWeightChunks[j].readFloats();
+				}
+
+				//read bone assignment
+				Chunk boneAssignments = subMeshChunk.getChild(G3dConstants.BONE_ASSIGNMENTS);
+				int numBoneAssignments = boneAssignments.readInt();
+				Chunk[] boneAssignmentChunks = boneAssignments.getChildren(G3dConstants.BONE_ASSIGNMENT);
+				if (boneAssignmentChunks.length != numBoneAssignments)
+					new GdxRuntimeException("Number of bone assignment not equal to number specified in bone assignment chunk, expected "
+						+ numBoneAssignments + ", got " + boneAssignmentChunks.length);
+				int[][] meshBoneAssignments = new int[numBoneAssignments][];
+				for(int j=0;j<numBoneAssignments;j++) {
+					int count = boneAssignmentChunks[j].readInt();
+					meshBoneAssignments[j] = boneAssignmentChunks[j].readInts();
+				}
+				
+				SkeletonSubMesh subMesh = new SkeletonSubMesh(subMeshChunk.readString(), new Mesh(false, numVertices, numIndices, vertAttribs),
+					subMeshChunk.readInt());
+				
+				subMesh.indices = meshIndices;
+				subMesh.boneAssignments = meshBoneAssignments;
+				subMesh.boneWeights = meshBoneWeights;
+				subMesh.vertices = meshVertices;
+				
+				subMesh.mesh.setVertices(subMesh.vertices);
+				subMesh.mesh.setIndices(subMesh.indices);
+				subMesh.skinnedVertices = new float[subMesh.vertices.length];
+				System.arraycopy(subMesh.vertices, 0, subMesh.skinnedVertices, 0, subMesh.vertices.length);
+				meshes[i] = subMesh;
+			}
+			
+			//read Skeleton hierarchy
+			Skeleton skeleton = new Skeleton();
+			Chunk skeletonChunk = skeletonModel.getChild(G3dConstants.SKELETON);
+			{
+				// read Skeleton hierarchy
+				Chunk hierarchy = skeletonChunk.getChild(G3dConstants.SKELETON_HIERARCHY);
+				int numHierarchyJoints = hierarchy.readInt();
+				for(int i=0;i<numHierarchyJoints;i++) {
+					skeleton.hierarchy.add(readSkeletonJoint(hierarchy));
+				}
+				
+				
+				// read Skeleton animations
+				Chunk animations = skeletonChunk.getChild(G3dConstants.SKELETON_ANIMATIONS);
+				int numAnimations = animations.readInt();
+				Chunk[] animationChunks = animations.getChildren(G3dConstants.SKELETON_ANIMATION);
+				if (animationChunks.length != numAnimations)
+					new GdxRuntimeException("Number of animations not equal to number specified in animations chunk, expected "
+						+ numAnimations + ", got " + animationChunks.length);
+				for(int i=0;i<numAnimations; i++) {
+					Chunk animation = animationChunks[i];
+
+					String name = animation.readString();
+					float totalDuration = animation.readFloat();
+					
+					int numJoints = animation.readInt();
+					SkeletonKeyframe perJointKeyFrames[][] = new SkeletonKeyframe[numJoints][];
+					for(int j=0;j<numJoints;j++){
+						int numFrames = animation.readInt();
+						perJointKeyFrames[j] = new SkeletonKeyframe[numFrames];
+						
+						for(int k=0;k<numFrames;k++){
+							SkeletonKeyframe frame = new SkeletonKeyframe();
+
+							frame.timeStamp = animation.readFloat();
+							frame.parentIndex = animation.readInt();
+							frame.position.x = animation.readFloat();
+							frame.position.y = animation.readFloat();
+							frame.position.z = animation.readFloat();
+							frame.rotation.w = animation.readFloat();
+							frame.rotation.x = animation.readFloat();
+							frame.rotation.y = animation.readFloat();
+							frame.rotation.z = animation.readFloat();
+							frame.scale.x = animation.readFloat();
+							frame.scale.y = animation.readFloat();
+							frame.scale.z = animation.readFloat();
+							perJointKeyFrames[j][k] = frame;
+						}
+					}
+					
+					skeleton.animations.put(name, new SkeletonAnimation(name, totalDuration, perJointKeyFrames));
+				}
+			}
+			skeleton.buildFromHierarchy();
+
+			SkeletonModel model = new SkeletonModel(skeleton, meshes);
+			model.setMaterial(new Material("default"));
+			return model;
+		} catch (IOException e) {
+			throw new GdxRuntimeException("Couldn't load skeleton model from '" + handle.name() + "', " + e.getMessage(), e);
+		} finally {
+			if (in != null) try {
+				in.close();
+			} catch (IOException e) {
+			}
+		}
+	}
+	
+	private static SkeletonJoint readSkeletonJoint(Chunk jointChunk) {
+		SkeletonJoint joint = new SkeletonJoint();
+		
+		joint.name = jointChunk.readString();
+		joint.position.x = jointChunk.readFloat();
+		joint.position.y = jointChunk.readFloat();
+		joint.position.z = jointChunk.readFloat();
+		joint.rotation.w = jointChunk.readFloat();
+		joint.rotation.x = jointChunk.readFloat();
+		joint.rotation.y = jointChunk.readFloat();
+		joint.rotation.z = jointChunk.readFloat();
+		joint.scale.x = jointChunk.readFloat();
+		joint.scale.y = jointChunk.readFloat();
+		joint.scale.z = jointChunk.readFloat();
+		
+		int count = jointChunk.readInt();
+		for(int i=0;i<count;i++) {
+			SkeletonJoint child = readSkeletonJoint(jointChunk);
+			child.parent = joint;
+			joint.children.add(child);
+		}
+		
+		return joint;
+	}
+
+	public static class G3dStillModelLoader implements StillModelLoader {
+		@Override
+		public StillModel load (FileHandle handle, ModelLoaderHints hints) {
+			return G3dLoader.loadStillModel(handle);
+		}
+	}
+
+	public static class G3dKeyframedModelLoader implements KeyframedModelLoader {
+		@Override
+		public KeyframedModel load (FileHandle handle, ModelLoaderHints hints) {
+			return G3dLoader.loadKeyframedModel(handle);
+		}
+	}
+	
+	public static class G3dSkeletonModelLoader implements SkeletonModelLoader {
+		@Override
+		public SkeletonModel load (FileHandle handle, ModelLoaderHints hints) {
+			return G3dLoader.loadSkeletonModel(handle);
+		}
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/G3dtLoader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/G3dtLoader.java
new file mode 100644
index 0000000..13be14d
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/G3dtLoader.java
@@ -0,0 +1,345 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders.g3d;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.Mesh;
+import com.badlogic.gdx.graphics.Mesh.VertexDataType;
+import com.badlogic.gdx.graphics.VertexAttribute;
+import com.badlogic.gdx.graphics.VertexAttributes;
+import com.badlogic.gdx.graphics.VertexAttributes.Usage;
+import com.badlogic.gdx.graphics.g3d.ModelLoaderHints;
+import com.badlogic.gdx.graphics.g3d.loaders.KeyframedModelLoader;
+import com.badlogic.gdx.graphics.g3d.loaders.StillModelLoader;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.Keyframe;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedAnimation;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedModel;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedSubMesh;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.model.still.StillSubMesh;
+import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.FloatArray;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+import com.badlogic.gdx.utils.IntArray;
+import com.badlogic.gdx.utils.ObjectMap;
+
+/** Class to import the G3D text format.
+ * @author mzechner */
+public class G3dtLoader {
+	public static KeyframedModel loadKeyframedModel (FileHandle handle, boolean flipV) {
+		return loadKeyframedModel(handle.read(), flipV);
+	}
+
+	public static StillModel loadStillModel (FileHandle handle, boolean flipV) {
+		return loadStillModel(handle.read(), flipV);
+	}
+
+	static int lineNum = 0;
+	static String line = null;
+
+	public static StillModel loadStillModel (InputStream stream, boolean flipV) {
+		BufferedReader in = new BufferedReader(new InputStreamReader(stream));
+
+		lineNum = 1;
+		try {
+			String version = readString(in);
+			if (!version.equals("g3dt-still-1.0")) throw new GdxRuntimeException("incorrect version");
+			int numMeshes = readInt(in);
+			StillSubMesh[] subMeshes = new StillSubMesh[numMeshes];
+			for (int i = 0; i < numMeshes; i++) {
+				subMeshes[i] = readStillSubMesh(in, flipV);
+			}
+			StillModel model = new StillModel(subMeshes);
+			return model;
+		} catch (Throwable e) {
+			throw new GdxRuntimeException("Couldn't read keyframed model, error in line " + lineNum + ", '" + line + "' : "
+				+ e.getMessage(), e);
+		}
+	}
+
+	private static StillSubMesh readStillSubMesh (BufferedReader in, boolean flipV) throws IOException {
+		String name = readString(in);
+		IntArray indices = readFaces(in);
+		int numVertices = readInt(in);
+		int numAttributes = readInt(in);
+
+		if (!readString(in).equals("position")) throw new GdxRuntimeException("first attribute must be position.");
+		int numUvs = 0;
+		boolean hasNormals = false;
+		for (int i = 1; i < numAttributes; i++) {
+			String attributeType = readString(in);
+
+			if (!attributeType.equals("normal") && !attributeType.equals("uv"))
+				throw new GdxRuntimeException("attribute name must be normal or uv");
+
+			if (attributeType.equals("normal")) {
+				if (i != 1) throw new GdxRuntimeException("attribute normal must be second attribute");
+				hasNormals = true;
+			}
+			if (attributeType.equals("uv")) {
+				numUvs++;
+			}
+		}
+		VertexAttribute[] vertexAttributes = createVertexAttributes(hasNormals, numUvs);
+		int vertexSize = new VertexAttributes(vertexAttributes).vertexSize / 4;
+		float[] vertices = new float[numVertices * vertexSize];
+		int idx = 0;
+		int uvOffset = hasNormals ? 6 : 3;
+		for (int i = 0; i < numVertices; i++) {
+			readFloatArray(in, vertices, idx);
+			if (flipV) {
+				for (int j = idx + uvOffset + 1; j < idx + uvOffset + numUvs * 2; j += 2) {
+					vertices[j] = 1 - vertices[j];
+				}
+			}
+			idx += vertexSize;
+		}
+
+		Mesh mesh = new Mesh(true, numVertices, indices.size, vertexAttributes);
+		mesh.setVertices(vertices);
+		mesh.setIndices(convertToShortArray(indices));
+		return new StillSubMesh(name, mesh, GL10.GL_TRIANGLES);
+	}
+
+	public static KeyframedModel loadKeyframedModel (InputStream stream, boolean flipV) {
+		BufferedReader in = new BufferedReader(new InputStreamReader(stream));
+
+		lineNum = 1;
+		try {
+			String version = readString(in);
+			if (!version.equals("g3dt-keyframed-1.0")) throw new GdxRuntimeException("incorrect version");
+			int numMeshes = readInt(in);
+			KeyframedSubMesh[] subMeshes = new KeyframedSubMesh[numMeshes];
+			for (int i = 0; i < numMeshes; i++) {
+				subMeshes[i] = readMesh(in, flipV);
+			}
+			KeyframedModel model = new KeyframedModel(subMeshes);
+			model.setAnimation(model.getAnimations()[0].name, 0, false);
+			return model;
+		} catch (Throwable e) {
+			throw new GdxRuntimeException("Couldn't read keyframed model, error in line " + lineNum + ", '" + line + "' : "
+				+ e.getMessage(), e);
+		}
+	}
+
+	private static KeyframedSubMesh readMesh (BufferedReader in, boolean flipV) throws IOException {
+		String name = readString(in);
+		IntArray indices = readFaces(in);
+		int numVertices = readInt(in);
+		int numAttributes = readInt(in);
+
+		if (!readString(in).equals("position")) throw new GdxRuntimeException("first attribute must be position.");
+		Array<FloatArray> uvSets = new Array<FloatArray>();
+		boolean hasNormals = false;
+		for (int i = 1; i < numAttributes; i++) {
+			String attributeType = readString(in);
+
+			if (!attributeType.equals("normal") && !attributeType.equals("uv"))
+				throw new GdxRuntimeException("attribute name must be normal or uv");
+
+			if (attributeType.equals("normal")) {
+				if (i != 1) throw new GdxRuntimeException("attribute normal must be second attribute");
+				hasNormals = true;
+			}
+			if (attributeType.equals("uv")) {
+				uvSets.add(readUVSet(in, numVertices, flipV));
+			}
+		}
+		int animatedComponents = hasNormals ? 6 : 3;
+
+		VertexAttribute[] vertexAttributes = createVertexAttributes(hasNormals, uvSets.size);
+
+		int numAnimations = readInt(in);
+		ObjectMap<String, KeyframedAnimation> animations = new ObjectMap<String, KeyframedAnimation>(numAnimations);
+		for (int i = 0; i < numAnimations; i++) {
+			String animationName = readString(in);
+			int numKeyframes = readInt(in);
+			float frameDuration = readFloat(in); // in seconds
+
+			Keyframe[] keyframes = new Keyframe[numKeyframes];
+			float time = 0;
+			FloatArray vertex = new FloatArray(animatedComponents);
+			for (int frame = 0; frame < numKeyframes; frame++) {
+				float[] vertices = new float[numVertices * (animatedComponents)];
+				int idx = 0;
+				for (int j = 0; j < numVertices; j++) {
+					idx = readFloatArray(in, vertices, idx);
+				}
+				Keyframe keyframe = new Keyframe(time, vertices);
+				keyframes[frame] = keyframe;
+				time += frameDuration;
+			}
+
+			KeyframedAnimation animation = new KeyframedAnimation(animationName, frameDuration, keyframes);
+			animations.put(animationName, animation);
+		}
+
+		KeyframedSubMesh mesh = new KeyframedSubMesh(name, new Mesh(VertexDataType.VertexArray, false, numVertices, indices.size,
+			createVertexAttributes(hasNormals, uvSets.size)), buildVertices(numVertices, hasNormals, uvSets), animations,
+			animatedComponents, GL10.GL_TRIANGLES);
+		mesh.mesh.setIndices(convertToShortArray(indices));
+		mesh.mesh.setVertices(mesh.blendedVertices);
+		return mesh;
+	}
+
+	private static float[] buildVertices (int numVertices, boolean hasNormals, Array<FloatArray> uvSets) {
+		float[] vertices = new float[numVertices * (3 + (hasNormals ? 3 : 0) + uvSets.size * 2)];
+
+		int idx = 0;
+		int idxUv = 0;
+		for (int i = 0; i < numVertices; i++) {
+			vertices[idx++] = 0;
+			vertices[idx++] = 0;
+			vertices[idx++] = 0;
+			if (hasNormals) {
+				vertices[idx++] = 0;
+				vertices[idx++] = 0;
+				vertices[idx++] = 0;
+			}
+			for (int j = 0; j < uvSets.size; j++) {
+				vertices[idx++] = uvSets.get(j).get(idxUv);
+				vertices[idx++] = uvSets.get(j).get(idxUv + 1);
+			}
+			idxUv += 2;
+		}
+		return vertices;
+	}
+
+	private static VertexAttribute[] createVertexAttributes (boolean hasNormals, int uvs) {
+		VertexAttribute[] attributes = new VertexAttribute[1 + (hasNormals ? 1 : 0) + uvs];
+		int idx = 0;
+		attributes[idx++] = new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE);
+		if (hasNormals) attributes[idx++] = new VertexAttribute(Usage.Normal, 3, ShaderProgram.NORMAL_ATTRIBUTE);
+		for (int i = 0; i < uvs; i++) {
+			attributes[idx++] = new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + i);
+		}
+		return attributes;
+	}
+
+	private static FloatArray readUVSet (BufferedReader in, int numVertices, boolean flipV) throws IOException {
+		FloatArray uvSet = new FloatArray(numVertices * 2);
+		FloatArray uv = new FloatArray(2);
+		for (int i = 0; i < numVertices; i++) {
+			readFloatArray(in, uv);
+			uvSet.add(uv.items[0]);
+			uvSet.add(flipV ? 1 - uv.items[1] : uv.items[1]);
+		}
+		return uvSet;
+	}
+
+	private static IntArray readFaces (BufferedReader in) throws NumberFormatException, IOException {
+		int numFaces = readInt(in);
+		IntArray faceIndices = new IntArray();
+		IntArray triangles = new IntArray();
+		IntArray indices = new IntArray();
+
+		for (int face = 0; face < numFaces; face++) {
+			readIntArray(in, faceIndices);
+			int numIndices = faceIndices.get(0);
+			triangles.clear();
+			int baseIndex = faceIndices.get(1);
+			for (int i = 2; i < numIndices; i++) {
+				triangles.add(baseIndex);
+				triangles.add(faceIndices.items[i]);
+				triangles.add(faceIndices.items[i + 1]);
+			}
+			indices.addAll(triangles);
+		}
+
+		indices.shrink();
+		return indices;
+	}
+
+	private static short[] convertToShortArray (IntArray array) {
+		short[] shortArray = new short[array.size];
+		for (int i = 0; i < array.size; i++) {
+			shortArray[i] = (short)array.items[i];
+		}
+		return shortArray;
+	}
+
+	private static float readFloat (BufferedReader in) throws NumberFormatException, IOException {
+		lineNum++;
+		return Float.parseFloat(read(in).trim());
+	}
+
+	private static int readInt (BufferedReader in) throws NumberFormatException, IOException {
+		lineNum++;
+		return (int)(Math.floor(Float.parseFloat(read(in).trim())));
+	}
+
+	private static String readString (BufferedReader in) throws IOException {
+		lineNum++;
+		return read(in);
+	}
+
+	private static void readFloatArray (BufferedReader in, FloatArray array) throws IOException {
+		lineNum++;
+		String[] tokens = read(in).split(",");
+		int len = tokens.length;
+		array.clear();
+		for (int i = 0; i < len; i++) {
+			array.add(Float.parseFloat(tokens[i].trim()));
+		}
+	}
+
+	private static int readFloatArray (BufferedReader in, float[] array, int idx) throws IOException {
+		lineNum++;
+		String[] tokens = read(in).split(",");
+		int len = tokens.length;
+		for (int i = 0; i < len; i++) {
+			array[idx++] = Float.parseFloat(tokens[i].trim());
+		}
+		return idx;
+	}
+
+	private static void readIntArray (BufferedReader in, IntArray array) throws IOException {
+		String[] tokens = read(in).split(",");
+		int len = tokens.length;
+		array.clear();
+		for (int i = 0; i < len; i++) {
+			array.add(Integer.parseInt(tokens[i].trim()));
+		}
+	}
+
+	private static String read (BufferedReader in) throws IOException {
+		line = in.readLine();
+		return line;
+	}
+
+	public static class G3dtStillModelLoader implements StillModelLoader {
+
+		@Override
+		public StillModel load (FileHandle handle, ModelLoaderHints hints) {
+			return G3dtLoader.loadStillModel(handle, hints.flipV);
+		}
+	}
+
+	public static class G3dtKeyframedModelLoader implements KeyframedModelLoader {
+		@Override
+		public KeyframedModel load (FileHandle handle, ModelLoaderHints hints) {
+			return G3dtLoader.loadKeyframedModel(handle, hints.flipV);
+		}
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/chunks/ChunkReader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/chunks/ChunkReader.java
new file mode 100644
index 0000000..1dc8f35
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/chunks/ChunkReader.java
@@ -0,0 +1,332 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders.g3d.chunks;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Arrays;
+
+import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+
+import static com.badlogic.gdx.graphics.g3d.loaders.g3d.G3dConstants.*;
+
+public class ChunkReader {
+	public static class Chunk {
+		int id;
+		Chunk parent;
+		Array<Chunk> children = new Array<Chunk>();
+		ByteArrayInputStream payload;
+		byte[] payloadBytes;
+		int offset = 0;
+		CountingDataInputStream in;
+
+		protected Chunk (int id, Chunk parent, byte[] bytes, int offset, int size) throws IOException {
+			this.id = id;
+			this.parent = parent;
+			this.payload = new ByteArrayInputStream(bytes, offset, size);
+			this.payloadBytes = bytes;
+			this.offset = offset;
+			this.in = new CountingDataInputStream(payload);
+		}
+
+		public int getId () {
+			return id;
+		}
+
+		public Chunk getParent () {
+			return parent;
+		}
+
+		public Array<Chunk> getChildren () {
+			return children;
+		}
+
+		public int readByte () {
+			try {
+				return in.readByte();
+			} catch (IOException e) {
+				throw new GdxRuntimeException("Couldn't read payload, " + e.getMessage(), e);
+			}
+		}
+
+		public short readShort () {
+			try {
+				return in.readShort();
+			} catch (IOException e) {
+				throw new GdxRuntimeException("Couldn't read payload, " + e.getMessage(), e);
+			}
+		}
+
+		public int readInt () {
+			try {
+				return in.readInt();
+			} catch (IOException e) {
+				throw new GdxRuntimeException("Couldn't read payload, " + e.getMessage(), e);
+			}
+		}
+
+		public long readLong () {
+			try {
+				return in.readLong();
+			} catch (IOException e) {
+				throw new GdxRuntimeException("Couldn't read payload, " + e.getMessage(), e);
+			}
+		}
+
+		public float readFloat () {
+			try {
+				return in.readFloat();
+			} catch (IOException e) {
+				throw new GdxRuntimeException("Couldn't read payload, " + e.getMessage(), e);
+			}
+		}
+
+		public double readDouble () {
+			try {
+				return in.readDouble();
+			} catch (IOException e) {
+				throw new GdxRuntimeException("Couldn't read payload, " + e.getMessage(), e);
+			}
+		}
+
+		public byte[] readBytes () {
+			try {
+				int len = in.readInt();
+				byte[] v = new byte[len];
+				for (int i = 0; i < len; i++) {
+					v[i] = in.readByte();
+				}
+				return v;
+			} catch (IOException e) {
+				throw new GdxRuntimeException("Couldn't read payload, " + e.getMessage(), e);
+			}
+		}
+
+		public short[] readShorts () {
+			try {
+				int len = in.readInt();
+				short[] v = new short[len];
+				for (int i = 0; i < len; i++) {
+					v[i] = in.readShort();
+				}
+				return v;
+			} catch (IOException e) {
+				throw new GdxRuntimeException("Couldn't read payload, " + e.getMessage(), e);
+			}
+		}
+
+		public int[] readInts () {
+			try {
+				int len = in.readInt();
+				int[] v = new int[len];
+				for (int i = 0; i < len; i++) {
+					v[i] = in.readInt();
+				}
+				return v;
+			} catch (IOException e) {
+				throw new GdxRuntimeException("Couldn't read payload, " + e.getMessage(), e);
+			}
+		}
+
+		public long[] readLongs () {
+			try {
+				int len = in.readInt();
+				long[] v = new long[len];
+				for (int i = 0; i < len; i++) {
+					v[i] = in.readLong();
+				}
+				return v;
+			} catch (IOException e) {
+				throw new GdxRuntimeException("Couldn't read payload, " + e.getMessage(), e);
+			}
+		}
+
+		public float[] readFloats () {
+			try {
+				int len = in.readInt();
+				float[] v = new float[len];
+				for (int i = 0; i < len; i++) {
+					v[i] = in.readFloat();
+				}
+				return v;
+			} catch (IOException e) {
+				throw new GdxRuntimeException("Couldn't read payload, " + e.getMessage(), e);
+			}
+		}
+
+		public double[] readDoubles () {
+			try {
+				int len = in.readInt();
+				double[] v = new double[len];
+				for (int i = 0; i < len; i++) {
+					v[i] = in.readDouble();
+				}
+				return v;
+			} catch (IOException e) {
+				throw new GdxRuntimeException("Couldn't read payload, " + e.getMessage(), e);
+			}
+		}
+
+		public String readString () {
+			try {
+				int len = in.readInt();
+				byte[] bytes = new byte[len];
+				in.readFully(bytes);
+				return new String(bytes, "UTF-8");
+			} catch (IOException e) {
+				throw new GdxRuntimeException("Couldn't read payload, " + e.getMessage(), e);
+			}
+		}
+
+		public Chunk getChild (int id) {
+			for (int i = 0; i < children.size; i++) {
+				Chunk child = children.get(i);
+				if (child.getId() == id) return child;
+			}
+			return null;
+		}
+
+		public Chunk[] getChildren (int id) {
+			Array<Chunk> meshes = new Array<Chunk>(true, 16, Chunk.class);
+			for (int i = 0; i < children.size; i++) {
+				Chunk child = children.get(i);
+				if (child.getId() == id) meshes.add(child);
+			}
+			meshes.shrink();
+			return meshes.items;
+		}
+	}
+
+	public static Chunk readChunks (InputStream in) throws IOException {
+		return loadChunks(in, 0);
+	}
+
+	private static Chunk loadChunks (InputStream in, int fileSize) throws IOException {
+		byte[] bytes = readStream(in, fileSize);
+		CountingDataInputStream din = new CountingDataInputStream(new ByteArrayInputStream(bytes));
+		return loadChunk(din, bytes);
+	}
+
+	private static Chunk loadChunk (CountingDataInputStream din, byte[] bytes) throws IOException {
+		int id = din.readInt();
+		int payloadSize = din.readInt();
+		int numChildren = din.readInt();
+		int offset = din.getReadBytes();
+		din.skipBytes(payloadSize);
+		Chunk chunk = new Chunk(id, null, bytes, offset, payloadSize);
+		for (int i = 0; i < numChildren; i++) {
+			Chunk child = loadChunk(din, bytes);
+			child.parent = chunk;
+			chunk.children.add(child);
+		}
+		return chunk;
+	}
+
+	private static byte[] readStream (InputStream in, int size) throws IOException {
+		if (size == 0) {
+			ByteArrayOutputStream bytes = new ByteArrayOutputStream();
+			byte[] buffer = new byte[10 * 1024];
+			int readBytes = 0;
+			while ((readBytes = in.read(buffer)) != -1) {
+				bytes.write(buffer, 0, readBytes);
+			}
+			return bytes.toByteArray();
+		} else {
+			byte[] bytes = new byte[size];
+			DataInputStream din = new DataInputStream(in);
+			din.readFully(bytes);
+			return bytes;
+		}
+	}
+
+	/** Prints a textual representation of the given Chunk hierarchy
+	 * @param chunk the hierarchy root {@link Chunk} */
+	public static void printChunks (Chunk chunk) {
+		printChunks(chunk, 0);
+	}
+
+	private static void printChunks (Chunk chunk, int level) {
+		String id = null;
+		String payload = null;
+		switch (chunk.getId()) {
+		case G3D_ROOT:
+			id = "G3D_ROOT";
+			break;
+		case VERSION_INFO:
+			id = "VERSION_INFO";
+			int major = chunk.readByte();
+			int minor = chunk.readByte();
+			payload = rep("   ", level + 1) + "major: " + major + ", minor: " + minor;
+			break;
+		case STILL_MODEL:
+			id = "STILL_MODEL";
+			int subMeshes = chunk.readInt();
+			payload = rep("   ", level + 1) + "#submeshes: " + subMeshes;
+			break;
+		case STILL_SUBMESH:
+			id = "STILL_SUBMESH";
+			payload = rep("   ", level + 1) + "name: " + chunk.readString() + ", primitive type: " + chunk.readInt();
+			break;
+		case VERTEX_ATTRIBUTE:
+			id = "VERTEX_ATTRIBUTE";
+			int usage = chunk.readInt();
+			int components = chunk.readInt();
+			String name = chunk.readString();
+			payload = rep("   ", level + 1) + "usage: " + usage + ", components: " + components + ", name: " + name;
+			break;
+		case VERTEX_ATTRIBUTES:
+			id = "VERTEX_ATTRIBUTES";
+			int numAttributes = chunk.readInt();
+			payload = rep("   ", level + 1) + "#attributes: " + numAttributes;
+			break;
+		case VERTEX_LIST:
+			id = "VERTEX_LIST";
+			int numVertices = chunk.readInt();
+			float[] vertices = chunk.readFloats();
+			payload = rep("   ", level + 1) + "#vertices: " + numVertices + ": " + Arrays.toString(vertices).substring(0, 400);
+			break;
+		case INDEX_LIST:
+			id = "INDEX_LIST";
+			int numIndices = chunk.readInt();
+			short[] indices = chunk.readShorts();
+			payload = rep("   ", level + 1) + "#indices: " + numIndices + ": " + Arrays.toString(indices).substring(0, 400);
+			break;
+		default:
+			id = "unknown [" + id + "]";
+			payload = rep("   ", level + 1) + "unknown";
+			break;
+		}
+
+		System.out.println(rep("   ", level) + id + " {");
+		if (payload != null) System.out.println(payload);
+		for (Chunk child : chunk.getChildren()) {
+			printChunks(child, level + 1);
+		}
+		System.out.println(rep("   ", level) + "}");
+	}
+
+	private static String rep (String c, int n) {
+		StringBuffer buf = new StringBuffer();
+		for (int i = 0; i < n; i++)
+			buf.append(c);
+		return buf.toString();
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/chunks/ChunkWriter.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/chunks/ChunkWriter.java
new file mode 100644
index 0000000..4cd1c9d
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/chunks/ChunkWriter.java
@@ -0,0 +1,202 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders.g3d.chunks;
+
+import java.io.ByteArrayOutputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+
+import com.badlogic.gdx.utils.Array;
+
+import static com.badlogic.gdx.graphics.g3d.loaders.g3d.G3dConstants.*;
+
+public class ChunkWriter {
+
+	class Chunk {
+		final int id;
+		final Chunk parent;
+		final Array<Chunk> children = new Array<Chunk>();
+		final ByteArrayOutputStream payload = new ByteArrayOutputStream();
+		final DataOutputStream out = new DataOutputStream(payload);
+
+		public Chunk (int id) {
+			this.id = id;
+			this.parent = null;
+		}
+
+		public Chunk (int id, Chunk parent) {
+			this.id = id;
+			this.parent = parent;
+		}
+	}
+
+	final Chunk root;
+	Chunk currChunk;
+
+	public ChunkWriter () {
+		root = new Chunk(G3D_ROOT);
+		currChunk = root;
+	}
+
+	public void newChunk (int id) {
+		Chunk chunk = new Chunk(id, currChunk);
+		currChunk.children.add(chunk);
+		currChunk = chunk;
+	}
+
+	public void endChunk () {
+		currChunk = currChunk.parent;
+	}
+
+	public void writeByte (int v) {
+		try {
+			currChunk.out.writeByte(v);
+		} catch (IOException e) {
+		}
+		;
+	}
+
+	public void writeShort (short v) {
+		try {
+			currChunk.out.writeShort(v);
+		} catch (IOException e) {
+		}
+		;
+	}
+
+	public void writeInt (int v) {
+		try {
+			currChunk.out.writeInt(v);
+		} catch (IOException e) {
+		}
+		;
+	}
+
+	public void writeLong (long v) {
+		try {
+			currChunk.out.writeLong(v);
+		} catch (IOException e) {
+		}
+		;
+	}
+
+	public void writeFloat (float v) {
+		try {
+			currChunk.out.writeFloat(v);
+		} catch (IOException e) {
+		}
+		;
+	}
+
+	public void writeDouble (double v) {
+		try {
+			currChunk.out.writeDouble(v);
+		} catch (IOException e) {
+		}
+		;
+	}
+
+	public void writeString (String v) {
+		try {
+			byte[] bytes = v.getBytes("UTF-8");
+			currChunk.out.writeInt(bytes.length);
+			currChunk.out.write(bytes);
+		} catch (IOException e) {
+		}
+	}
+
+	public void writeToStream (OutputStream out) throws IOException {
+		writeToStream(root, new DataOutputStream(out));
+	}
+
+	private void writeToStream (Chunk chunk, DataOutputStream out) throws IOException {
+		// write id, payload size in bytes and number of children
+		out.writeInt(chunk.id);
+		out.writeInt(chunk.payload.size());
+		out.writeInt(chunk.children.size);
+
+		// write payload
+		out.write(chunk.payload.toByteArray());
+
+		// recursively write children
+		for (int i = 0; i < chunk.children.size; i++) {
+			Chunk child = chunk.children.get(i);
+			writeToStream(child, out);
+		}
+	}
+
+	public void writeBytes (byte[] v) {
+		try {
+			currChunk.out.writeInt(v.length);
+			for (int i = 0; i < v.length; i++) {
+				currChunk.out.writeByte(v[i]);
+			}
+		} catch (IOException e) {
+		}
+	}
+
+	public void writeShorts (short[] v) {
+		try {
+			currChunk.out.writeInt(v.length);
+			for (int i = 0; i < v.length; i++) {
+				currChunk.out.writeShort(v[i]);
+			}
+		} catch (IOException e) {
+		}
+	}
+
+	public void writeInts (int[] v) {
+		try {
+			currChunk.out.writeInt(v.length);
+			for (int i = 0; i < v.length; i++) {
+				currChunk.out.writeInt(v[i]);
+			}
+		} catch (IOException e) {
+		}
+	}
+
+	public void writeLongs (long[] v) {
+		try {
+			currChunk.out.writeInt(v.length);
+			for (int i = 0; i < v.length; i++) {
+				currChunk.out.writeLong(v[i]);
+			}
+		} catch (IOException e) {
+		}
+	}
+
+	public void writeFloats (float[] v) {
+		try {
+			currChunk.out.writeInt(v.length);
+			for (int i = 0; i < v.length; i++) {
+				currChunk.out.writeFloat(v[i]);
+			}
+		} catch (IOException e) {
+		}
+	}
+
+	public void writeDoubles (double[] v) {
+		try {
+			currChunk.out.writeInt(v.length);
+			for (int i = 0; i < v.length; i++) {
+				currChunk.out.writeDouble(v[i]);
+			}
+		} catch (IOException e) {
+		}
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/chunks/CountingDataInputStream.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/chunks/CountingDataInputStream.java
new file mode 100644
index 0000000..eed79e3
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/chunks/CountingDataInputStream.java
@@ -0,0 +1,124 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders.g3d.chunks;
+
+import java.io.DataInput;
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+
+public class CountingDataInputStream implements DataInput {
+	int readBytes = 0;
+	DataInputStream in;
+
+	public CountingDataInputStream (InputStream in) {
+		this.in = new DataInputStream(in);
+	}
+
+	public int getReadBytes () {
+		return readBytes;
+	}
+
+	@Override
+	public void readFully (byte[] b) throws IOException {
+		readBytes += b.length;
+		in.readFully(b);
+	}
+
+	@Override
+	public void readFully (byte[] b, int off, int len) throws IOException {
+		readBytes += len;
+		in.readFully(b, off, len);
+	}
+
+	@Override
+	public int skipBytes (int n) throws IOException {
+		int skipped = in.skipBytes(n);
+		readBytes += skipped;
+		return skipped;
+	}
+
+	@Override
+	public boolean readBoolean () throws IOException {
+		readBytes += 1;
+		return in.readBoolean();
+	}
+
+	@Override
+	public byte readByte () throws IOException {
+		readBytes += 1;
+		return in.readByte();
+	}
+
+	@Override
+	public int readUnsignedByte () throws IOException {
+		readBytes += 1;
+		return in.readUnsignedByte();
+	}
+
+	@Override
+	public short readShort () throws IOException {
+		readBytes += 2;
+		return in.readShort();
+	}
+
+	@Override
+	public int readUnsignedShort () throws IOException {
+		readBytes += 2;
+		return in.readUnsignedShort();
+	}
+
+	@Override
+	public char readChar () throws IOException {
+		readBytes += 2;
+		return in.readChar();
+	}
+
+	@Override
+	public int readInt () throws IOException {
+		readBytes += 4;
+		return in.readInt();
+	}
+
+	@Override
+	public long readLong () throws IOException {
+		readBytes += 8;
+		return in.readLong();
+	}
+
+	@Override
+	public float readFloat () throws IOException {
+		readBytes += 4;
+		return in.readFloat();
+	}
+
+	@Override
+	public double readDouble () throws IOException {
+		readBytes += 8;
+		return in.readDouble();
+	}
+
+	@Override
+	public String readLine () throws IOException {
+		throw new UnsupportedOperationException("Not implemented");
+	}
+
+	@Override
+	public String readUTF () throws IOException {
+		throw new UnsupportedOperationException("Not implemented");
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/chunks/G3dExporter.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/chunks/G3dExporter.java
new file mode 100644
index 0000000..6a626b8
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/g3d/chunks/G3dExporter.java
@@ -0,0 +1,365 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders.g3d.chunks;
+
+import java.io.IOException;
+import java.io.OutputStream;
+
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.VertexAttribute;
+import com.badlogic.gdx.graphics.g3d.loaders.g3d.G3dConstants;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.Keyframe;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedAnimation;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedModel;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedSubMesh;
+import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonAnimation;
+import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonJoint;
+import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonKeyframe;
+import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonModel;
+import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonSubMesh;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.model.still.StillSubMesh;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+
+public class G3dExporter {
+	public static void export (StillModel model, FileHandle file) {
+		ChunkWriter writer = new ChunkWriter();
+
+		// write version info
+		writer.newChunk(G3dConstants.VERSION_INFO);
+		writer.writeByte(G3dConstants.MAJOR_VERSION);
+		writer.writeByte(G3dConstants.MINOR_VERSION);
+		writer.endChunk();
+
+		// write still model
+		writer.newChunk(G3dConstants.STILL_MODEL);
+		writer.writeInt(model.subMeshes.length);
+
+		// write sub mesh
+		for (StillSubMesh mesh : model.subMeshes) {
+			// start sub mesh
+			writer.newChunk(G3dConstants.STILL_SUBMESH);
+			writer.writeString(mesh.name == null ? "" : mesh.name);
+			writer.writeInt(mesh.primitiveType);
+
+			// write vertex attributes
+			writer.newChunk(G3dConstants.VERTEX_ATTRIBUTES);
+			writer.writeInt(mesh.mesh.getVertexAttributes().size());
+			for (int i = 0; i < mesh.mesh.getVertexAttributes().size(); i++) {
+				VertexAttribute attribute = mesh.mesh.getVertexAttributes().get(i);
+				writer.newChunk(G3dConstants.VERTEX_ATTRIBUTE);
+				writer.writeInt(attribute.usage);
+				writer.writeInt(attribute.numComponents);
+				writer.writeString(attribute.alias);
+				writer.endChunk();
+			}
+			writer.endChunk();
+
+			// write vertices
+			writer.newChunk(G3dConstants.VERTEX_LIST);
+			int numFloats = mesh.mesh.getNumVertices() * mesh.mesh.getVertexSize() / 4;
+			float[] vertices = new float[numFloats];
+			mesh.mesh.getVertices(vertices);
+			writer.writeInt(mesh.mesh.getNumVertices());
+			writer.writeFloats(vertices);
+			writer.endChunk();
+
+			// write indices
+			writer.newChunk(G3dConstants.INDEX_LIST);
+			int numShorts = mesh.mesh.getNumIndices();
+			short[] indices = new short[numShorts];
+			mesh.mesh.getIndices(indices);
+			writer.writeInt(numShorts);
+			writer.writeShorts(indices);
+			writer.endChunk();
+
+			// end sub mesh
+			writer.endChunk();
+		}
+
+		// end still model
+		writer.endChunk();
+
+		// write to file
+		OutputStream out = null;
+		try {
+			out = file.write(false);
+			writer.writeToStream(out);
+		} catch (IOException e) {
+			throw new GdxRuntimeException("An error occured while exporting the still model, " + e.getMessage(), e);
+		} finally {
+			if (out != null) try {
+				out.close();
+			} catch (IOException e) {
+			}
+		}
+	}
+
+	public static void export (KeyframedModel model, FileHandle file) {
+		ChunkWriter writer = new ChunkWriter();
+
+		// write version info
+		writer.newChunk(G3dConstants.VERSION_INFO);
+		writer.writeByte(G3dConstants.MAJOR_VERSION);
+		writer.writeByte(G3dConstants.MINOR_VERSION);
+		writer.endChunk();
+
+		// write keyframed model
+		writer.newChunk(G3dConstants.KEYFRAMED_MODEL);
+		writer.writeInt(model.subMeshes.length);
+
+		for (KeyframedSubMesh mesh : model.subMeshes) {
+			// writes keyframed submesh
+			writer.newChunk(G3dConstants.KEYFRAMED_SUBMESH);
+			writer.writeString(mesh.name == null ? "" : mesh.name);
+			writer.writeInt(mesh.primitiveType);
+			writer.writeInt(mesh.animatedComponents);
+			writer.writeInt(mesh.animations.size);
+
+			// write vertex attributes
+			writer.newChunk(G3dConstants.VERTEX_ATTRIBUTES);
+			writer.writeInt(mesh.mesh.getVertexAttributes().size());
+			for (int i = 0; i < mesh.mesh.getVertexAttributes().size(); i++) {
+				VertexAttribute attribute = mesh.mesh.getVertexAttributes().get(i);
+				writer.newChunk(G3dConstants.VERTEX_ATTRIBUTE);
+				writer.writeInt(attribute.usage);
+				writer.writeInt(attribute.numComponents);
+				writer.writeString(attribute.alias);
+				writer.endChunk();
+			}
+			writer.endChunk();
+
+			// write static components, sort of like a bind pose mesh
+			writer.newChunk(G3dConstants.VERTEX_LIST);
+			int numFloats = mesh.mesh.getNumVertices() * mesh.mesh.getVertexSize() / 4;
+			float[] vertices = new float[numFloats];
+			mesh.mesh.getVertices(vertices);
+			writer.writeInt(mesh.mesh.getNumVertices());
+			writer.writeFloats(vertices);
+			writer.endChunk();
+
+			// write indices
+			writer.newChunk(G3dConstants.INDEX_LIST);
+			int numShorts = mesh.mesh.getNumIndices();
+			short[] indices = new short[numShorts];
+			mesh.mesh.getIndices(indices);
+			writer.writeInt(mesh.mesh.getNumIndices());
+			writer.writeShorts(indices);
+			writer.endChunk();
+
+			// write animations
+			for (String animationName : mesh.animations.keys()) {
+				KeyframedAnimation animation = mesh.animations.get(animationName);
+
+				// write keyframed animation
+				writer.newChunk(G3dConstants.KEYFRAMED_ANIMATION);
+				writer.writeString(animation.name);
+				writer.writeFloat(animation.frameDuration);
+
+				// write key frames
+				writer.writeInt(animation.keyframes.length);
+				for (Keyframe keyframe : animation.keyframes) {
+					// write keyframed
+					writer.newChunk(G3dConstants.KEYFRAMED_FRAME);
+					writer.writeFloat(keyframe.timeStamp);
+					writer.writeFloats(keyframe.vertices);
+					writer.endChunk();
+				}
+				// end keyframed animation
+				writer.endChunk();
+			}
+
+			// end keyframed submesh
+			writer.endChunk();
+		}
+
+		// end keyframed model
+		writer.endChunk();
+
+		// write to file
+		OutputStream out = null;
+		try {
+			out = file.write(false);
+			writer.writeToStream(out);
+		} catch (IOException e) {
+			throw new GdxRuntimeException("An error occured while exporting the still model, " + e.getMessage(), e);
+		} finally {
+			if (out != null) try {
+				out.close();
+			} catch (IOException e) {
+			}
+		}
+	}
+	
+	public static void export (SkeletonModel model, FileHandle file) {
+		ChunkWriter writer = new ChunkWriter();
+
+		// write version info
+		writer.newChunk(G3dConstants.VERSION_INFO);
+		writer.writeByte(G3dConstants.MAJOR_VERSION);
+		writer.writeByte(G3dConstants.MINOR_VERSION);
+		writer.endChunk();
+
+		// write skeleton model
+		writer.newChunk(G3dConstants.SKELETON_MODEL);
+		writer.writeInt(model.subMeshes.length);
+
+		for (SkeletonSubMesh mesh : model.subMeshes) {
+			// writes skeleton submesh
+			writer.newChunk(G3dConstants.SKELETON_SUBMESH);
+			writer.writeString(mesh.name == null ? "" : mesh.name);
+			writer.writeInt(mesh.primitiveType);
+
+			// write vertex attributes
+			writer.newChunk(G3dConstants.VERTEX_ATTRIBUTES);
+			writer.writeInt(mesh.mesh.getVertexAttributes().size());
+			for (int i = 0; i < mesh.mesh.getVertexAttributes().size(); i++) {
+				VertexAttribute attribute = mesh.mesh.getVertexAttributes().get(i);
+				writer.newChunk(G3dConstants.VERTEX_ATTRIBUTE);
+				writer.writeInt(attribute.usage);
+				writer.writeInt(attribute.numComponents);
+				writer.writeString(attribute.alias);
+				writer.endChunk();
+			}
+			writer.endChunk();
+
+			// write static components, sort of like a bind pose mesh
+			writer.newChunk(G3dConstants.VERTEX_LIST);
+			int numFloats = mesh.mesh.getNumVertices() * mesh.mesh.getVertexSize() / 4;
+			writer.writeInt(mesh.mesh.getNumVertices());
+			writer.writeFloats(mesh.vertices);
+			writer.endChunk();
+
+			// write indices
+			writer.newChunk(G3dConstants.INDEX_LIST);
+			int numShorts = mesh.mesh.getNumIndices();
+			writer.writeInt(numShorts);
+			writer.writeShorts(mesh.indices);
+			writer.endChunk();
+			
+			// write bone weight
+			writer.newChunk(G3dConstants.BONE_WEIGHTS);
+			writer.writeInt(mesh.boneWeights.length);
+			for(float array[] : mesh.boneWeights) {
+				writer.newChunk(G3dConstants.BONE_WEIGHT);
+				writer.writeInt(array.length);
+				writer.writeFloats(array);
+				writer.endChunk();
+			}
+			writer.endChunk();
+			
+			// write bone assignment
+			writer.newChunk(G3dConstants.BONE_ASSIGNMENTS);
+			writer.writeInt(mesh.boneAssignments.length);
+			for(int array[] : mesh.boneAssignments) {
+				writer.newChunk(G3dConstants.BONE_ASSIGNMENT);
+				writer.writeInt(array.length);
+				writer.writeInts(array);
+				writer.endChunk();
+			}
+			writer.endChunk();
+
+			// end skeleton submesh
+			writer.endChunk();
+		}
+		
+		//Write Skeleton
+		writer.newChunk(G3dConstants.SKELETON);
+		
+		//Write Skeleton hierarchy
+		writer.newChunk(G3dConstants.SKELETON_HIERARCHY);
+		writer.writeInt(model.skeleton.hierarchy.size);
+		for(SkeletonJoint joint : model.skeleton.hierarchy) {
+			writeSkeletonJoint(writer,joint);
+		}
+		
+		// end Skeleton hierarchy
+		writer.endChunk();
+		
+		//Write Skeleton animations
+		writer.newChunk(G3dConstants.SKELETON_ANIMATIONS);
+		
+		writer.writeInt(model.skeleton.animations.size);
+		for(String animationName : model.skeleton.animations.keys()){
+			writer.newChunk(G3dConstants.SKELETON_ANIMATION);
+			writer.writeString(animationName);
+			SkeletonAnimation animation = model.skeleton.animations.get(animationName);
+			writer.writeFloat(animation.totalDuration);
+			writer.writeInt(animation.perJointkeyFrames.length);
+			for(SkeletonKeyframe array[] : animation.perJointkeyFrames){
+				writer.writeInt(array.length);
+				for(SkeletonKeyframe frame : array) {
+					writer.writeFloat(frame.timeStamp);
+					writer.writeInt(frame.parentIndex);
+					writer.writeFloat(frame.position.x);
+					writer.writeFloat(frame.position.y);
+					writer.writeFloat(frame.position.z);
+					writer.writeFloat(frame.rotation.w);
+					writer.writeFloat(frame.rotation.x);
+					writer.writeFloat(frame.rotation.y);
+					writer.writeFloat(frame.rotation.z);
+					writer.writeFloat(frame.scale.x);
+					writer.writeFloat(frame.scale.y);
+					writer.writeFloat(frame.scale.z);
+				}
+			}
+			writer.endChunk();
+		}
+		
+		// end Skeleton animations
+		writer.endChunk();
+		
+		// end Skeleton
+		writer.endChunk();
+
+		// end skeleton model
+		writer.endChunk();
+
+		// write to file
+		OutputStream out = null;
+		try {
+			out = file.write(false);
+			writer.writeToStream(out);
+		} catch (IOException e) {
+			throw new GdxRuntimeException("An error occured while exporting the still model, " + e.getMessage(), e);
+		} finally {
+			if (out != null) try {
+				out.close();
+			} catch (IOException e) {
+			}
+		}
+	}
+	
+	private static void writeSkeletonJoint(ChunkWriter writer, SkeletonJoint joint) {
+		writer.writeString(joint.name);
+		writer.writeFloat(joint.position.x);
+		writer.writeFloat(joint.position.y);
+		writer.writeFloat(joint.position.z);
+		writer.writeFloat(joint.rotation.w);
+		writer.writeFloat(joint.rotation.x);
+		writer.writeFloat(joint.rotation.y);
+		writer.writeFloat(joint.rotation.z);
+		writer.writeFloat(joint.scale.x);
+		writer.writeFloat(joint.scale.y);
+		writer.writeFloat(joint.scale.z);
+		
+		writer.writeInt(joint.children.size);
+		for(SkeletonJoint child : joint.children) {
+			writeSkeletonJoint(writer,child);
+		}
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Frame.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Frame.java
new file mode 100644
index 0000000..962beb3
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Frame.java
@@ -0,0 +1,23 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders.md2;
+
+public class MD2Frame {
+	public float[] vertices;
+	public int[] normalIndices;
+	public String name;
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Header.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Header.java
new file mode 100644
index 0000000..19a2b84
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Header.java
@@ -0,0 +1,37 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders.md2;
+
+public class MD2Header {
+	public int ident;
+	public int version;
+	public int skinWidth;
+	public int skinHeight;
+	public int frameSize;
+	public int numSkins;
+	public int numVertices;
+	public int numTexCoords;
+	public int numTriangles;
+	public int numGLCommands;
+	public int numFrames;
+	public int offsetSkin;
+	public int offsetTexCoords;
+	public int offsetTriangles;
+	public int offsetFrames;
+	public int offsetGLCommands;
+	public int offsetEnd;
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Loader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Loader.java
new file mode 100644
index 0000000..e91ccb5
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Loader.java
@@ -0,0 +1,421 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders.md2;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.Mesh;
+import com.badlogic.gdx.graphics.Mesh.VertexDataType;
+import com.badlogic.gdx.graphics.VertexAttribute;
+import com.badlogic.gdx.graphics.VertexAttributes.Usage;
+import com.badlogic.gdx.graphics.g3d.ModelLoaderHints;
+import com.badlogic.gdx.graphics.g3d.loaders.KeyframedModelLoader;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.Keyframe;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedAnimation;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedModel;
+import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedSubMesh;
+import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.utils.LittleEndianInputStream;
+import com.badlogic.gdx.utils.ObjectMap;
+
+public class MD2Loader implements KeyframedModelLoader {
+	public KeyframedModel load (FileHandle file, ModelLoaderHints hints) {
+		float frameDuration = 0.2f;
+		if (hints instanceof MD2LoaderHints) {
+			frameDuration = ((MD2LoaderHints)hints).frameDuration;
+		}
+		return load(file, frameDuration);
+	}
+
+	public KeyframedModel load (FileHandle fileHandle, float frameDuration) {
+		InputStream in = fileHandle.read();
+		try {
+			return load(in, frameDuration);
+		} finally {
+			if (in != null) try {
+				in.close();
+			} catch (IOException e) {
+			}
+			;
+		}
+	}
+
+	public KeyframedModel load (InputStream in, float frameDuration) {
+		try {
+			byte[] bytes = loadBytes(in);
+
+			MD2Header header = loadHeader(bytes);
+			float[] texCoords = loadTexCoords(header, bytes);
+			MD2Triangle[] triangles = loadTriangles(header, bytes);
+			MD2Frame[] frames = loadFrames(header, bytes);
+
+			return buildModel(header, triangles, texCoords, frames, frameDuration);
+		} catch (Exception ex) {
+			ex.printStackTrace();
+			return null;
+		}
+	}
+
+	private KeyframedModel buildModel (MD2Header header, MD2Triangle[] triangles, float[] texCoords, MD2Frame[] frames,
+		float frameDuration) {
+		ArrayList<VertexIndices> vertCombos = new ArrayList<VertexIndices>();
+		short[] indices = new short[triangles.length * 3];
+		int idx = 0;
+		short vertIdx = 0;
+		for (int i = 0; i < triangles.length; i++) {
+			MD2Triangle triangle = triangles[i];
+			for (int j = 0; j < 3; j++) {
+				VertexIndices vert = null;
+				boolean contains = false;
+				for (int k = 0; k < vertCombos.size(); k++) {
+					VertexIndices vIdx = vertCombos.get(k);
+					if (vIdx.vIdx == triangle.vertices[j] && vIdx.tIdx == triangle.texCoords[j]) {
+						vert = vIdx;
+						contains = true;
+						break;
+					}
+				}
+				if (!contains) {
+					vert = new VertexIndices(triangle.vertices[j], triangle.texCoords[j], vertIdx);
+					vertCombos.add(vert);
+					vertIdx++;
+				}
+
+				indices[idx++] = vert.nIdx;
+			}
+		}
+
+		idx = 0;
+		float[] uvs = new float[vertCombos.size() * 2];
+		for (int i = 0; i < vertCombos.size(); i++) {
+			VertexIndices vtI = vertCombos.get(i);
+			uvs[idx++] = texCoords[vtI.tIdx * 2];
+			uvs[idx++] = texCoords[vtI.tIdx * 2 + 1];
+		}
+
+		for (int i = 0; i < frames.length; i++) {
+			MD2Frame frame = frames[i];
+			idx = 0;
+			float[] newVerts = new float[vertCombos.size() * 6];
+
+			for (int j = 0; j < vertCombos.size(); j++) {
+				VertexIndices vIdx = vertCombos.get(j);
+				newVerts[idx++] = frame.vertices[vIdx.vIdx * 3];
+				newVerts[idx++] = frame.vertices[vIdx.vIdx * 3 + 1];
+				newVerts[idx++] = frame.vertices[vIdx.vIdx * 3 + 2];
+				newVerts[idx++] = MD2Normals.normals[frame.normalIndices[vIdx.vIdx]][1];
+				newVerts[idx++] = MD2Normals.normals[frame.normalIndices[vIdx.vIdx]][2];
+				newVerts[idx++] = MD2Normals.normals[frame.normalIndices[vIdx.vIdx]][0];
+			}
+			frame.vertices = newVerts;
+		}
+
+		header.numVertices = vertCombos.size();
+
+		float[] blendedVertices = new float[header.numVertices * 8];
+		MD2Frame frame = frames[0];
+
+		idx = 0;
+		int idxV = 0;
+		int idxT = 0;
+		for (int i = 0; i < header.numVertices; i++) {
+			VertexIndices vIdx = vertCombos.get(i);
+
+			blendedVertices[idx++] = frame.vertices[idxV++];
+			blendedVertices[idx++] = frame.vertices[idxV++];
+			blendedVertices[idx++] = frame.vertices[idxV++];
+			blendedVertices[idx++] = frame.vertices[idxV++];
+			blendedVertices[idx++] = frame.vertices[idxV++];
+			blendedVertices[idx++] = frame.vertices[idxV++];
+			blendedVertices[idx++] = uvs[idxT++];
+			blendedVertices[idx++] = uvs[idxT++];
+		}
+
+		ObjectMap<String, KeyframedAnimation> animations = new ObjectMap<String, KeyframedAnimation>();
+
+		String lastName = frames[0].name;
+		int beginFrame = 0;
+
+		for (int frameNum = 1; frameNum < frames.length; frameNum++) {
+			if (!frames[frameNum].name.equals(lastName) || frameNum == frames.length - 1) {
+				int subAnimLen = frameNum - beginFrame;
+				KeyframedAnimation subAnim = new KeyframedAnimation(lastName, frameDuration, new Keyframe[subAnimLen]);
+
+				for (int subFrame = beginFrame; subFrame < frameNum; subFrame++) {
+					int absFrameNum = subFrame - beginFrame;
+
+					frame = frames[subFrame];
+					float[] vertices = new float[header.numVertices * 6];
+					idx = 0;
+					idxV = 0;
+					for (int i = 0; i < header.numVertices; i++) {
+						vertices[idx++] = frame.vertices[idxV++];
+						vertices[idx++] = frame.vertices[idxV++];
+						vertices[idx++] = frame.vertices[idxV++];
+						vertices[idx++] = frame.vertices[idxV++];
+						vertices[idx++] = frame.vertices[idxV++];
+						vertices[idx++] = frame.vertices[idxV++];
+					}
+
+					Keyframe keyFrame = new Keyframe(absFrameNum * frameDuration, vertices);
+					subAnim.keyframes[absFrameNum] = keyFrame;
+					animations.put(subAnim.name, subAnim);
+				}
+
+				lastName = frames[frameNum].name;
+				beginFrame = frameNum;
+			}
+		}
+
+		KeyframedAnimation animation = new KeyframedAnimation("all", frameDuration, new Keyframe[frames.length]);
+		float timeStamp = 0;
+		for (int frameNum = 0; frameNum < frames.length; frameNum++) {
+			frame = frames[frameNum];
+			float[] vertices = new float[header.numVertices * 6];
+			idx = 0;
+			idxV = 0;
+			for (int i = 0; i < header.numVertices; i++) {
+				vertices[idx++] = frame.vertices[idxV++];
+				vertices[idx++] = frame.vertices[idxV++];
+				vertices[idx++] = frame.vertices[idxV++];
+				vertices[idx++] = frame.vertices[idxV++];
+				vertices[idx++] = frame.vertices[idxV++];
+				vertices[idx++] = frame.vertices[idxV++];
+			}
+
+			Keyframe keyFrame = new Keyframe(frameNum * frameDuration, vertices);
+			animation.keyframes[frameNum] = keyFrame;
+		}
+
+		Mesh mesh = new Mesh(VertexDataType.VertexArray, false, header.numVertices, indices.length, new VertexAttribute(
+			Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE), new VertexAttribute(Usage.Normal, 3,
+			ShaderProgram.NORMAL_ATTRIBUTE),
+			new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + "0"));
+		mesh.setIndices(indices);
+		animations.put("all", animation);
+
+		KeyframedSubMesh subMesh = new KeyframedSubMesh("md2-mesh", mesh, blendedVertices, animations, 6, GL10.GL_TRIANGLES);
+		KeyframedModel model = new KeyframedModel(new KeyframedSubMesh[] {subMesh});
+		model.setAnimation("all", 0, false);
+		return model;
+	}
+
+	private float[] buildTexCoords (MD2Header header, MD2Triangle[] triangles, float[] texCoords) {
+		float[] uvs = new float[header.numVertices * 2];
+
+		for (int i = 0; i < triangles.length; i++) {
+			MD2Triangle triangle = triangles[i];
+			for (int j = 0; j < 3; j++) {
+				int vertIdx = triangle.vertices[j];
+				int uvIdx = vertIdx * 2;
+				uvs[uvIdx] = texCoords[triangle.texCoords[j] * 2];
+				uvs[uvIdx + 1] = texCoords[triangle.texCoords[j] * 2 + 1];
+			}
+		}
+
+		return uvs;
+	}
+
+	private short[] buildIndices (MD2Triangle[] triangles) {
+		short[] indices = new short[triangles.length * 3];
+
+		int idx = 0;
+		for (int i = 0; i < triangles.length; i++) {
+			MD2Triangle triangle = triangles[i];
+			indices[idx++] = triangle.vertices[0];
+			indices[idx++] = triangle.vertices[1];
+			indices[idx++] = triangle.vertices[2];
+		}
+		return indices;
+	}
+
+	private MD2Frame[] loadFrames (MD2Header header, byte[] bytes) throws IOException {
+		LittleEndianInputStream in = new LittleEndianInputStream(new ByteArrayInputStream(bytes));
+		in.skip(header.offsetFrames);
+
+		MD2Frame[] frames = new MD2Frame[header.numFrames];
+		for (int i = 0; i < header.numFrames; i++) {
+			frames[i] = loadFrame(header, in);
+		}
+
+		in.close();
+
+		return frames;
+	}
+
+	private final byte[] charBuffer = new byte[16];
+
+	private MD2Frame loadFrame (MD2Header header, LittleEndianInputStream in) throws IOException {
+		MD2Frame frame = new MD2Frame();
+		frame.vertices = new float[header.numVertices * 3];
+		frame.normalIndices = new int[header.numVertices];
+
+		float scaleX = in.readFloat(), scaleY = in.readFloat(), scaleZ = in.readFloat();
+		float transX = in.readFloat(), transY = in.readFloat(), transZ = in.readFloat();
+		in.read(charBuffer);
+
+		int len = 0;
+		for (int i = 0; i < charBuffer.length; i++)
+			if (charBuffer[i] == 0) {
+				len = i;
+				break;
+			}
+
+		frame.name = new String(charBuffer, 0, len);
+
+		int vertIdx = 0;
+
+		for (int i = 0; i < header.numVertices; i++) {
+			float x = in.read() * scaleX + transX;
+			float y = in.read() * scaleY + transY;
+			float z = in.read() * scaleZ + transZ;
+
+			frame.vertices[vertIdx++] = y;
+			frame.vertices[vertIdx++] = z;
+			frame.vertices[vertIdx++] = x;
+
+			frame.normalIndices[i] = in.read(); // normal index
+		}
+
+		return frame;
+	}
+
+	private MD2Triangle[] loadTriangles (MD2Header header, byte[] bytes) throws IOException {
+		LittleEndianInputStream in = new LittleEndianInputStream(new ByteArrayInputStream(bytes));
+		in.skip(header.offsetTriangles);
+		MD2Triangle[] triangles = new MD2Triangle[header.numTriangles];
+
+		for (int i = 0; i < header.numTriangles; i++) {
+			MD2Triangle triangle = new MD2Triangle();
+			triangle.vertices[0] = in.readShort();
+			triangle.vertices[1] = in.readShort();
+			triangle.vertices[2] = in.readShort();
+			triangle.texCoords[0] = in.readShort();
+			triangle.texCoords[1] = in.readShort();
+			triangle.texCoords[2] = in.readShort();
+			triangles[i] = triangle;
+		}
+
+		in.close();
+
+		return triangles;
+	}
+
+	private float[] loadTexCoords (MD2Header header, byte[] bytes) throws IOException {
+		LittleEndianInputStream in = new LittleEndianInputStream(new ByteArrayInputStream(bytes));
+		in.skip(header.offsetTexCoords);
+		float[] texCoords = new float[header.numTexCoords * 2];
+		float width = header.skinWidth;
+		float height = header.skinHeight;
+
+		for (int i = 0; i < header.numTexCoords * 2; i += 2) {
+			short u = in.readShort();
+			short v = in.readShort();
+			texCoords[i] = u / width;
+			texCoords[i + 1] = v / height;
+		}
+		in.close();
+		return texCoords;
+	}
+
+	private MD2Header loadHeader (byte[] bytes) throws IOException {
+		LittleEndianInputStream in = new LittleEndianInputStream(new ByteArrayInputStream(bytes));
+		MD2Header header = new MD2Header();
+
+		header.ident = in.readInt();
+		header.version = in.readInt();
+		header.skinWidth = in.readInt();
+		header.skinHeight = in.readInt();
+		header.frameSize = in.readInt();
+		header.numSkins = in.readInt();
+		header.numVertices = in.readInt();
+		header.numTexCoords = in.readInt();
+		header.numTriangles = in.readInt();
+		header.numGLCommands = in.readInt();
+		header.numFrames = in.readInt();
+		header.offsetSkin = in.readInt();
+		header.offsetTexCoords = in.readInt();
+		header.offsetTriangles = in.readInt();
+		header.offsetFrames = in.readInt();
+		header.offsetGLCommands = in.readInt();
+		header.offsetEnd = in.readInt();
+
+		in.close();
+
+		return header;
+	}
+
+	private byte[] loadBytes (InputStream in) throws IOException {
+		ByteArrayOutputStream out = new ByteArrayOutputStream();
+		byte[] buffer = new byte[1024];
+
+		int readBytes = 0;
+		while ((readBytes = in.read(buffer)) > 0) {
+			out.write(buffer, 0, readBytes);
+		}
+
+		out.close();
+		return out.toByteArray();
+	}
+
+	public class VertexIndices {
+		public VertexIndices (short vIdx, short tIdx, short nIdx) {
+			this.vIdx = vIdx;
+			this.tIdx = tIdx;
+			this.nIdx = nIdx;
+		}
+
+		@Override
+		public int hashCode () {
+			final int prime = 31;
+			int result = 1;
+			result = prime * result + tIdx;
+			result = prime * result + vIdx;
+			return result;
+		}
+
+		@Override
+		public boolean equals (Object obj) {
+			if (this == obj) return true;
+			if (obj == null) return false;
+			if (getClass() != obj.getClass()) return false;
+			VertexIndices other = (VertexIndices)obj;
+			if (tIdx != other.tIdx) return false;
+			if (vIdx != other.vIdx) return false;
+			return true;
+		}
+
+		public short vIdx;
+		public short tIdx;
+		public short nIdx;
+	}
+
+	public static class MD2LoaderHints extends ModelLoaderHints {
+		public final float frameDuration;
+
+		public MD2LoaderHints (float frameDuration) {
+			super(false);
+			this.frameDuration = frameDuration;
+		}
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Normals.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Normals.java
new file mode 100644
index 0000000..efc5d81
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Normals.java
@@ -0,0 +1,75 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders.md2;
+
+public class MD2Normals {
+	public static float[][] normals = { {-0.525731f, 0.000000f, 0.850651f}, {-0.442863f, 0.238856f, 0.864188f},
+		{-0.295242f, 0.000000f, 0.955423f}, {-0.309017f, 0.500000f, 0.809017f}, {-0.162460f, 0.262866f, 0.951056f},
+		{0.000000f, 0.000000f, 1.000000f}, {0.000000f, 0.850651f, 0.525731f}, {-0.147621f, 0.716567f, 0.681718f},
+		{0.147621f, 0.716567f, 0.681718f}, {0.000000f, 0.525731f, 0.850651f}, {0.309017f, 0.500000f, 0.809017f},
+		{0.525731f, 0.000000f, 0.850651f}, {0.295242f, 0.000000f, 0.955423f}, {0.442863f, 0.238856f, 0.864188f},
+		{0.162460f, 0.262866f, 0.951056f}, {-0.681718f, 0.147621f, 0.716567f}, {-0.809017f, 0.309017f, 0.500000f},
+		{-0.587785f, 0.425325f, 0.688191f}, {-0.850651f, 0.525731f, 0.000000f}, {-0.864188f, 0.442863f, 0.238856f},
+		{-0.716567f, 0.681718f, 0.147621f}, {-0.688191f, 0.587785f, 0.425325f}, {-0.500000f, 0.809017f, 0.309017f},
+		{-0.238856f, 0.864188f, 0.442863f}, {-0.425325f, 0.688191f, 0.587785f}, {-0.716567f, 0.681718f, -0.147621f},
+		{-0.500000f, 0.809017f, -0.309017f}, {-0.525731f, 0.850651f, 0.000000f}, {0.000000f, 0.850651f, -0.525731f},
+		{-0.238856f, 0.864188f, -0.442863f}, {0.000000f, 0.955423f, -0.295242f}, {-0.262866f, 0.951056f, -0.162460f},
+		{0.000000f, 1.000000f, 0.000000f}, {0.000000f, 0.955423f, 0.295242f}, {-0.262866f, 0.951056f, 0.162460f},
+		{0.238856f, 0.864188f, 0.442863f}, {0.262866f, 0.951056f, 0.162460f}, {0.500000f, 0.809017f, 0.309017f},
+		{0.238856f, 0.864188f, -0.442863f}, {0.262866f, 0.951056f, -0.162460f}, {0.500000f, 0.809017f, -0.309017f},
+		{0.850651f, 0.525731f, 0.000000f}, {0.716567f, 0.681718f, 0.147621f}, {0.716567f, 0.681718f, -0.147621f},
+		{0.525731f, 0.850651f, 0.000000f}, {0.425325f, 0.688191f, 0.587785f}, {0.864188f, 0.442863f, 0.238856f},
+		{0.688191f, 0.587785f, 0.425325f}, {0.809017f, 0.309017f, 0.500000f}, {0.681718f, 0.147621f, 0.716567f},
+		{0.587785f, 0.425325f, 0.688191f}, {0.955423f, 0.295242f, 0.000000f}, {1.000000f, 0.000000f, 0.000000f},
+		{0.951056f, 0.162460f, 0.262866f}, {0.850651f, -0.525731f, 0.000000f}, {0.955423f, -0.295242f, 0.000000f},
+		{0.864188f, -0.442863f, 0.238856f}, {0.951056f, -0.162460f, 0.262866f}, {0.809017f, -0.309017f, 0.500000f},
+		{0.681718f, -0.147621f, 0.716567f}, {0.850651f, 0.000000f, 0.525731f}, {0.864188f, 0.442863f, -0.238856f},
+		{0.809017f, 0.309017f, -0.500000f}, {0.951056f, 0.162460f, -0.262866f}, {0.525731f, 0.000000f, -0.850651f},
+		{0.681718f, 0.147621f, -0.716567f}, {0.681718f, -0.147621f, -0.716567f}, {0.850651f, 0.000000f, -0.525731f},
+		{0.809017f, -0.309017f, -0.500000f}, {0.864188f, -0.442863f, -0.238856f}, {0.951056f, -0.162460f, -0.262866f},
+		{0.147621f, 0.716567f, -0.681718f}, {0.309017f, 0.500000f, -0.809017f}, {0.425325f, 0.688191f, -0.587785f},
+		{0.442863f, 0.238856f, -0.864188f}, {0.587785f, 0.425325f, -0.688191f}, {0.688191f, 0.587785f, -0.425325f},
+		{-0.147621f, 0.716567f, -0.681718f}, {-0.309017f, 0.500000f, -0.809017f}, {0.000000f, 0.525731f, -0.850651f},
+		{-0.525731f, 0.000000f, -0.850651f}, {-0.442863f, 0.238856f, -0.864188f}, {-0.295242f, 0.000000f, -0.955423f},
+		{-0.162460f, 0.262866f, -0.951056f}, {0.000000f, 0.000000f, -1.000000f}, {0.295242f, 0.000000f, -0.955423f},
+		{0.162460f, 0.262866f, -0.951056f}, {-0.442863f, -0.238856f, -0.864188f}, {-0.309017f, -0.500000f, -0.809017f},
+		{-0.162460f, -0.262866f, -0.951056f}, {0.000000f, -0.850651f, -0.525731f}, {-0.147621f, -0.716567f, -0.681718f},
+		{0.147621f, -0.716567f, -0.681718f}, {0.000000f, -0.525731f, -0.850651f}, {0.309017f, -0.500000f, -0.809017f},
+		{0.442863f, -0.238856f, -0.864188f}, {0.162460f, -0.262866f, -0.951056f}, {0.238856f, -0.864188f, -0.442863f},
+		{0.500000f, -0.809017f, -0.309017f}, {0.425325f, -0.688191f, -0.587785f}, {0.716567f, -0.681718f, -0.147621f},
+		{0.688191f, -0.587785f, -0.425325f}, {0.587785f, -0.425325f, -0.688191f}, {0.000000f, -0.955423f, -0.295242f},
+		{0.000000f, -1.000000f, 0.000000f}, {0.262866f, -0.951056f, -0.162460f}, {0.000000f, -0.850651f, 0.525731f},
+		{0.000000f, -0.955423f, 0.295242f}, {0.238856f, -0.864188f, 0.442863f}, {0.262866f, -0.951056f, 0.162460f},
+		{0.500000f, -0.809017f, 0.309017f}, {0.716567f, -0.681718f, 0.147621f}, {0.525731f, -0.850651f, 0.000000f},
+		{-0.238856f, -0.864188f, -0.442863f}, {-0.500000f, -0.809017f, -0.309017f}, {-0.262866f, -0.951056f, -0.162460f},
+		{-0.850651f, -0.525731f, 0.000000f}, {-0.716567f, -0.681718f, -0.147621f}, {-0.716567f, -0.681718f, 0.147621f},
+		{-0.525731f, -0.850651f, 0.000000f}, {-0.500000f, -0.809017f, 0.309017f}, {-0.238856f, -0.864188f, 0.442863f},
+		{-0.262866f, -0.951056f, 0.162460f}, {-0.864188f, -0.442863f, 0.238856f}, {-0.809017f, -0.309017f, 0.500000f},
+		{-0.688191f, -0.587785f, 0.425325f}, {-0.681718f, -0.147621f, 0.716567f}, {-0.442863f, -0.238856f, 0.864188f},
+		{-0.587785f, -0.425325f, 0.688191f}, {-0.309017f, -0.500000f, 0.809017f}, {-0.147621f, -0.716567f, 0.681718f},
+		{-0.425325f, -0.688191f, 0.587785f}, {-0.162460f, -0.262866f, 0.951056f}, {0.442863f, -0.238856f, 0.864188f},
+		{0.162460f, -0.262866f, 0.951056f}, {0.309017f, -0.500000f, 0.809017f}, {0.147621f, -0.716567f, 0.681718f},
+		{0.000000f, -0.525731f, 0.850651f}, {0.425325f, -0.688191f, 0.587785f}, {0.587785f, -0.425325f, 0.688191f},
+		{0.688191f, -0.587785f, 0.425325f}, {-0.955423f, 0.295242f, 0.000000f}, {-0.951056f, 0.162460f, 0.262866f},
+		{-1.000000f, 0.000000f, 0.000000f}, {-0.850651f, 0.000000f, 0.525731f}, {-0.955423f, -0.295242f, 0.000000f},
+		{-0.951056f, -0.162460f, 0.262866f}, {-0.864188f, 0.442863f, -0.238856f}, {-0.951056f, 0.162460f, -0.262866f},
+		{-0.809017f, 0.309017f, -0.500000f}, {-0.864188f, -0.442863f, -0.238856f}, {-0.951056f, -0.162460f, -0.262866f},
+		{-0.809017f, -0.309017f, -0.500000f}, {-0.681718f, 0.147621f, -0.716567f}, {-0.681718f, -0.147621f, -0.716567f},
+		{-0.850651f, 0.000000f, -0.525731f}, {-0.688191f, 0.587785f, -0.425325f}, {-0.587785f, 0.425325f, -0.688191f},
+		{-0.425325f, 0.688191f, -0.587785f}, {-0.425325f, -0.688191f, -0.587785f}, {-0.587785f, -0.425325f, -0.688191f},
+		{-0.688191f, -0.587785f, -0.425325f}};
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Triangle.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Triangle.java
new file mode 100644
index 0000000..5cd6052
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/md2/MD2Triangle.java
@@ -0,0 +1,22 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders.md2;
+
+public class MD2Triangle {
+	public short[] vertices = new short[3];
+	public short[] texCoords = new short[3];
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/wavefront/ObjLoader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/wavefront/ObjLoader.java
new file mode 100644
index 0000000..1255c75
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/loaders/wavefront/ObjLoader.java
@@ -0,0 +1,394 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.loaders.wavefront;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.assets.AssetManager;
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.Color;
+import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.Mesh;
+import com.badlogic.gdx.graphics.Pixmap;
+import com.badlogic.gdx.graphics.Pixmap.Format;
+import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.Texture.TextureFilter;
+import com.badlogic.gdx.graphics.VertexAttribute;
+import com.badlogic.gdx.graphics.VertexAttributes.Usage;
+import com.badlogic.gdx.graphics.g3d.ModelLoaderHints;
+import com.badlogic.gdx.graphics.g3d.loaders.StillModelLoader;
+import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
+import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.model.still.StillSubMesh;
+import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.utils.FloatArray;
+
+/** Loads Wavefront OBJ files.
+ * 
+ * @author mzechner, espitz */
+public class ObjLoader implements StillModelLoader {
+	final FloatArray verts;
+	final FloatArray norms;
+	final FloatArray uvs;
+	final ArrayList<Group> groups;
+
+	public ObjLoader () {
+		verts = new FloatArray(300);
+		norms = new FloatArray(300);
+		uvs = new FloatArray(200);
+		groups = new ArrayList<Group>(10);
+	}
+
+	/** Loads a Wavefront OBJ file from a given file handle.
+	 * 
+	 * @param file the FileHandle */
+	public StillModel loadObj (FileHandle file) {
+		return loadObj(file, false);
+	}
+
+	/** Loads a Wavefront OBJ file from a given file handle.
+	 * 
+	 * @param file the FileHandle
+	 * @param flipV whether to flip the v texture coordinate (Blender, Wings3D, et al) */
+	public StillModel loadObj (FileHandle file, boolean flipV) {
+		return loadObj(file, file.parent(), flipV);
+	}
+
+	/** Loads a Wavefront OBJ file from a given file handle.
+	 * 
+	 * @param file the FileHandle
+	 * @param textureDir
+	 * @param flipV whether to flip the v texture coordinate (Blender, Wings3D, et al) */
+	public StillModel loadObj (FileHandle file, FileHandle textureDir, boolean flipV) {
+		String line;
+		String[] tokens;
+		char firstChar;
+		MtlLoader mtl = new MtlLoader();
+
+		// Create a "default" Group and set it as the active group, in case
+		// there are no groups or objects defined in the OBJ file.
+		Group activeGroup = new Group("default");
+		groups.add(activeGroup);
+
+		BufferedReader reader = new BufferedReader(new InputStreamReader(file.read()), 4096);
+		try {
+			while ((line = reader.readLine()) != null) {
+
+				tokens = line.split("\\s+");
+
+				if (tokens[0].length() == 0) {
+					continue;
+				} else if ((firstChar = tokens[0].toLowerCase().charAt(0)) == '#') {
+					continue;
+				} else if (firstChar == 'v') {
+					if (tokens[0].length() == 1) {
+						verts.add(Float.parseFloat(tokens[1]));
+						verts.add(Float.parseFloat(tokens[2]));
+						verts.add(Float.parseFloat(tokens[3]));
+					} else if (tokens[0].charAt(1) == 'n') {
+						norms.add(Float.parseFloat(tokens[1]));
+						norms.add(Float.parseFloat(tokens[2]));
+						norms.add(Float.parseFloat(tokens[3]));
+					} else if (tokens[0].charAt(1) == 't') {
+						uvs.add(Float.parseFloat(tokens[1]));
+						uvs.add((flipV ? 1 - Float.parseFloat(tokens[2]) : Float.parseFloat(tokens[2])));
+					}
+				} else if (firstChar == 'f') {
+					String[] parts;
+					ArrayList<Integer> faces = activeGroup.faces;
+					for (int i = 1; i < tokens.length - 2; i--) {
+						parts = tokens[1].split("/");
+						faces.add(getIndex(parts[0], verts.size));
+						if (parts.length > 2) {
+							if (i == 1) activeGroup.hasNorms = true;
+							faces.add(getIndex(parts[2], norms.size));
+						}
+						if (parts.length > 1 && parts[1].length() > 0) {
+							if (i == 1) activeGroup.hasUVs = true;
+							faces.add(getIndex(parts[1], uvs.size));
+						}
+						parts = tokens[++i].split("/");
+						faces.add(getIndex(parts[0], verts.size));
+						if (parts.length > 2) faces.add(getIndex(parts[2], norms.size));
+						if (parts.length > 1 && parts[1].length() > 0) faces.add(getIndex(parts[1], uvs.size));
+						parts = tokens[++i].split("/");
+						faces.add(getIndex(parts[0], verts.size));
+						if (parts.length > 2) faces.add(getIndex(parts[2], norms.size));
+						if (parts.length > 1 && parts[1].length() > 0) faces.add(getIndex(parts[1], uvs.size));
+						activeGroup.numFaces++;
+					}
+				} else if (firstChar == 'o' || firstChar == 'g') {
+					// This implementation only supports single object or group
+					// definitions. i.e. "o group_a group_b" will set group_a
+					// as the active group, while group_b will simply be
+					// ignored.
+					if (tokens.length > 1)
+						activeGroup = setActiveGroup(tokens[1]);
+					else
+						activeGroup = setActiveGroup("default");
+				} else if (tokens[0].equals("mtllib")) {
+					String path = "";
+					if (file.path().contains("/")) {
+						path = file.path().substring(0, file.path().lastIndexOf('/') + 1);
+					}
+					mtl.load(path + tokens[1], textureDir);
+				} else if (tokens[0].equals("usemtl")) {
+					if (tokens.length == 1)
+						activeGroup.materialName = "default";
+					else
+						activeGroup.materialName = tokens[1];
+				}
+			}
+			reader.close();
+		} catch (IOException e) {
+			return null;
+		}
+
+		// If the "default" group or any others were not used, get rid of them
+		for (int i = 0; i < groups.size(); i++) {
+			if (groups.get(i).numFaces < 1) {
+				groups.remove(i);
+				i--;
+			}
+		}
+
+		// If there are no groups left, there is no valid Model to return
+		if (groups.size() < 1) return null;
+
+		// Get number of objects/groups remaining after removing empty ones
+		final int numGroups = groups.size();
+
+		final StillModel model = new StillModel(new StillSubMesh[numGroups]);
+
+		for (int g = 0; g < numGroups; g++) {
+			Group group = groups.get(g);
+			ArrayList<Integer> faces = group.faces;
+			final int numElements = faces.size();
+			final int numFaces = group.numFaces;
+			final boolean hasNorms = group.hasNorms;
+			final boolean hasUVs = group.hasUVs;
+
+			final float[] finalVerts = new float[(numFaces * 3) * (3 + (hasNorms ? 3 : 0) + (hasUVs ? 2 : 0))];
+
+			for (int i = 0, vi = 0; i < numElements;) {
+				int vertIndex = faces.get(i++) * 3;
+				finalVerts[vi++] = verts.get(vertIndex++);
+				finalVerts[vi++] = verts.get(vertIndex++);
+				finalVerts[vi++] = verts.get(vertIndex);
+				if (hasNorms) {
+					int normIndex = faces.get(i++) * 3;
+					finalVerts[vi++] = norms.get(normIndex++);
+					finalVerts[vi++] = norms.get(normIndex++);
+					finalVerts[vi++] = norms.get(normIndex);
+				}
+				if (hasUVs) {
+					int uvIndex = faces.get(i++) * 2;
+					finalVerts[vi++] = uvs.get(uvIndex++);
+					finalVerts[vi++] = uvs.get(uvIndex);
+				}
+			}
+
+			final int numIndices = numFaces * 3 >= Short.MAX_VALUE ? 0 : numFaces * 3;
+			final short[] finalIndices = new short[numIndices];
+			// if there are too many vertices in a mesh, we can't use indices
+			if (numIndices > 0) {
+				for (int i = 0; i < numIndices; i++) {
+					finalIndices[i] = (short)i;
+				}
+			}
+			final Mesh mesh;
+
+			ArrayList<VertexAttribute> attributes = new ArrayList<VertexAttribute>();
+			attributes.add(new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE));
+			if (hasNorms) attributes.add(new VertexAttribute(Usage.Normal, 3, ShaderProgram.NORMAL_ATTRIBUTE));
+			if (hasUVs) attributes.add(new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + "0"));
+
+			mesh = new Mesh(true, numFaces * 3, numIndices, attributes.toArray(new VertexAttribute[attributes.size()]));
+			mesh.setVertices(finalVerts);
+			if (numIndices > 0) mesh.setIndices(finalIndices);
+
+			StillSubMesh subMesh = new StillSubMesh(group.name, mesh, GL10.GL_TRIANGLES);
+			subMesh.material = mtl.getMaterial(group.materialName);
+			model.subMeshes[g] = subMesh;
+
+		}
+
+		// An instance of ObjLoader can be used to load more than one OBJ.
+		// Clearing the ArrayList cache instead of instantiating new
+		// ArrayLists should result in slightly faster load times for
+		// subsequent calls to loadObj
+		if (verts.size > 0) verts.clear();
+		if (norms.size > 0) norms.clear();
+		if (uvs.size > 0) uvs.clear();
+		if (groups.size() > 0) groups.clear();
+
+		return model;
+	}
+
+	private Group setActiveGroup (String name) {
+		// TODO: Check if a HashMap.get calls are faster than iterating
+		// through an ArrayList
+		for (Group group : groups) {
+			if (group.name.equals(name)) return group;
+		}
+		Group group = new Group(name);
+		groups.add(group);
+		return group;
+	}
+
+	private int getIndex (String index, int size) {
+		if (index == null || index.length() == 0) return 0;
+		final int idx = Integer.parseInt(index);
+		if (idx < 0)
+			return size + idx;
+		else
+			return idx - 1;
+	}
+
+	private class Group {
+		final String name;
+		String materialName;
+		ArrayList<Integer> faces;
+		int numFaces;
+		boolean hasNorms;
+		boolean hasUVs;
+		Material mat;
+
+		Group (String name) {
+			this.name = name;
+			this.faces = new ArrayList<Integer>(200);
+			this.numFaces = 0;
+			this.mat = new Material("");
+			this.materialName = "default";
+		}
+	}
+
+	@Override
+	public StillModel load (FileHandle handle, ModelLoaderHints hints) {
+		return loadObj(handle, hints.flipV);
+	}
+}
+
+class MtlLoader {
+	private ArrayList<Material> materials = new ArrayList<Material>();
+	private static AssetManager assetManager;
+	private static Texture emptyTexture = null;
+
+	public MtlLoader () {
+		if (emptyTexture == null) {
+			assetManager = new AssetManager();
+			Pixmap pm = new Pixmap(1, 1, Format.RGB888);
+			pm.setColor(0.5f, 0.5f, 0.5f, 1);
+			pm.fill();
+			emptyTexture = new Texture(pm, false);
+		}
+	}
+
+	/** loads .mtl file
+	 * @param name */
+	public void load (String name, FileHandle textureDir) {
+		String line;
+		String[] tokens;
+		String curMatName = "default";
+		Color difcolor = Color.WHITE;
+		Color speccolor = Color.WHITE;
+		Texture texture = emptyTexture;
+
+		FileHandle file = Gdx.files.internal(name);
+		if (file == null || file.exists() == false) return;
+
+		BufferedReader reader = new BufferedReader(new InputStreamReader(file.read()), 4096);
+		try {
+			while ((line = reader.readLine()) != null) {
+
+				if (line.length() > 0 && line.charAt(0) == '\t') line = line.substring(1).trim();
+
+				tokens = line.split("\\s+");
+
+				if (tokens[0].length() == 0) {
+					continue;
+				} else if (tokens[0].charAt(0) == '#')
+					continue;
+				else if (tokens[0].toLowerCase().equals("newmtl")) {
+					Material mat = new Material(curMatName, new TextureAttribute(texture, 0, TextureAttribute.diffuseTexture),
+						new ColorAttribute(difcolor, ColorAttribute.diffuse), new ColorAttribute(speccolor, ColorAttribute.specular));
+					materials.add(mat);
+
+					if (tokens.length > 1) {
+						curMatName = tokens[1];
+						curMatName = curMatName.replace('.', '_');
+					} else
+						curMatName = "default";
+
+					difcolor = Color.WHITE;
+					speccolor = Color.WHITE;
+				} else if (tokens[0].toLowerCase().equals("kd") || tokens[0].toLowerCase().equals("ks")) // diffuse or specular
+				{
+					float r = Float.parseFloat(tokens[1]);
+					float g = Float.parseFloat(tokens[2]);
+					float b = Float.parseFloat(tokens[3]);
+					float a = 1;
+					if (tokens.length > 4) a = Float.parseFloat(tokens[4]);
+
+					if (tokens[0].toLowerCase().equals("kd")) {
+						difcolor = new Color();
+						difcolor.set(r, g, b, a);
+					} else {
+						speccolor = new Color();
+						speccolor.set(r, g, b, a);
+					}
+				} else if (tokens[0].toLowerCase().equals("map_kd")) {
+					String textureName = tokens[1];
+					if (textureName.length() > 0) {
+						String texname = textureDir.child(textureName).toString();
+						assetManager.load(texname, Texture.class);
+						assetManager.finishLoading();
+						texture = assetManager.get(texname, Texture.class);
+						texture.setFilter(TextureFilter.Linear, TextureFilter.Linear);
+					} else
+						texture = emptyTexture;
+
+				}
+
+			}
+			reader.close();
+		} catch (IOException e) {
+			return;
+		}
+
+		// last material
+		Material mat = new Material(curMatName, new TextureAttribute(texture, 0, TextureAttribute.diffuseTexture),
+			new ColorAttribute(difcolor, ColorAttribute.diffuse), new ColorAttribute(speccolor, ColorAttribute.specular));
+		materials.add(mat);
+
+		return;
+	}
+
+	public Material getMaterial (String name) {
+		name = name.replace('.', '_');
+		for (Material mat : materials) {
+			if (mat.getName().equals(name)) return mat;
+		}
+		return new Material("default");
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/materials/BlendingAttribute.java b/gdx/src/com/badlogic/gdx/graphics/g3d/materials/BlendingAttribute.java
index 3180915..67fe84c 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/materials/BlendingAttribute.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/materials/BlendingAttribute.java
@@ -1,41 +1,88 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
 package com.badlogic.gdx.graphics.g3d.materials;
 
-import com.badlogic.gdx.graphics.g3d.materials.Material.Attribute;
-import com.badlogic.gdx.utils.GdxRuntimeException;
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.utils.Pool;
+
+public class BlendingAttribute extends MaterialAttribute {
+
+	/** if BlendingAttribute name is translucent then default tranparency mechanism is used in shader */
+	public static final String translucent = "translucent";
 
-public class BlendingAttribute extends Material.Attribute {
-	public final static String Alias = "blended";
-	public final static long Type = register(Alias);
-	
-	public final static boolean is(final long mask) {
-		return (mask & Type) == mask;
+	public int blendSrcFunc;
+	public int blendDstFunc;
+
+	protected BlendingAttribute () {
 	}
- 
-	public int sourceFunction;
-	public int destFunction;
 
-	public BlendingAttribute() { 
-		super(Type); 
+	/** Utility constuctor for basic transparency blendSrcFunc = GL10.GL_SRC_ALPHA blendDstFunc = GL10.GL_ONE_MINUS_SRC_ALPHA
+	 * @param name */
+	public BlendingAttribute (String name) {
+		this(name, GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
 	}
-	
-	public BlendingAttribute(final int sourceFunc, final int destFunc) {
-		this();
-		sourceFunction = sourceFunc;
-		destFunction = destFunc;
+
+	public BlendingAttribute (String name, int srcFunc, int dstFunc) {
+		super(name);
+		blendSrcFunc = srcFunc;
+		blendDstFunc = dstFunc;
 	}
-	
-	public BlendingAttribute(final BlendingAttribute copyFrom) {
-		this(copyFrom == null ? 0 : copyFrom.sourceFunction, copyFrom == null ? 0 : copyFrom.destFunction);
+
+	@Override
+	public void bind () {
+		Gdx.gl.glBlendFunc(blendSrcFunc, blendDstFunc);
 	}
-	
+
 	@Override
-	public BlendingAttribute copy () {
-		return new BlendingAttribute(this);
+	public void bind (ShaderProgram program) {
+		Gdx.gl.glBlendFunc(blendSrcFunc, blendDstFunc);
 	}
-	
+
+	@Override
+	public MaterialAttribute copy () {
+		return new BlendingAttribute(this.name, this.blendSrcFunc, this.blendDstFunc);
+	}
+
+	@Override
+	public void set (MaterialAttribute attr) {
+		BlendingAttribute blendAttr = (BlendingAttribute)attr;
+		name = blendAttr.name;
+		blendDstFunc = blendAttr.blendDstFunc;
+		blendSrcFunc = blendAttr.blendSrcFunc;
+	}
+
+	private final static Pool<BlendingAttribute> pool = new Pool<BlendingAttribute>() {
+		@Override
+		protected BlendingAttribute newObject () {
+			return new BlendingAttribute();
+		}
+	};
+
+	@Override
+	public MaterialAttribute pooledCopy () {
+		BlendingAttribute attr = pool.obtain();
+		attr.set(this);
+		return attr;
+	}
+
 	@Override
-	protected boolean equals (final Attribute other) {
-		return ((BlendingAttribute)other).sourceFunction == sourceFunction && 
-			((BlendingAttribute)other).destFunction == destFunction; 
+	public void free () {
+		if (isPooled) pool.free(this);
 	}
-}
\ No newline at end of file
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/materials/ColorAttribute.java b/gdx/src/com/badlogic/gdx/graphics/g3d/materials/ColorAttribute.java
index ea7c323..10153f8 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/materials/ColorAttribute.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/materials/ColorAttribute.java
@@ -1,71 +1,96 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
 package com.badlogic.gdx.graphics.g3d.materials;
 
+import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.g3d.materials.Material.Attribute;
-import com.badlogic.gdx.utils.GdxRuntimeException;
+import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.utils.Pool;
 
-public class ColorAttribute extends Material.Attribute {
-	public final static String DiffuseAlias = "diffuseColor";
-	public final static long Diffuse = register(DiffuseAlias);
-	public final static String SpecularAlias = "specularColor";
-	public final static long Specular = register(SpecularAlias);
-	public final static String AmbientAlias = "ambientColor";
-	public static final long Ambient = register("ambientColor");
-	public final static String EmissiveAlias = "emissiveColor";
-	public static final long Emissive = register("emissiveColor");
-	
-	protected static long Mask = Ambient | Diffuse | Specular | Emissive;
-	
-	public final static boolean is(final long mask) {
-		return (mask & Mask) != 0;
-	}
-	
-	public final static ColorAttribute createDiffuse(final Color color) {
-		return new ColorAttribute(Diffuse, color);
-	}
-	
-	public final static ColorAttribute createDiffuse(float r, float g, float b, float a) {
-		return new ColorAttribute(Diffuse, r, g, b, a);
-	}
-	
-	public final static ColorAttribute createSpecular(final Color color) {
-		return new ColorAttribute(Specular, color);
+public class ColorAttribute extends MaterialAttribute {
+
+	static final public String diffuse = "diffuseColor";
+	static final public String specular = "specularColor";
+	static final public String emissive = "emissiveColor";
+	static final public String rim = "rimColor";
+	static final public String fog = "fogColor";
+
+	public final Color color = new Color();
+
+	protected ColorAttribute () {
 	}
-	
-	public final static ColorAttribute createSpecular(float r, float g, float b, float a) {
-		return new ColorAttribute(Specular, r, g, b, a);
+
+	/** Creates a {@link MaterialAttribute} that is a pure {@link Color}.
+	 * 
+	 * @param color The {@link Color} that you wish the attribute to represent.
+	 * @param name The name of the uniform in the {@link ShaderProgram} that will have its value set to this color. (A 'name' does
+	 *           not matter for a game that uses {@link GL10}). */
+	public ColorAttribute (Color color, String name) {
+		super(name);
+		this.color.set(color);
 	}
-	
-	public final Color color = new Color();
-	
-	public ColorAttribute(final long type) {
-		super(type);
-		if (!is(type))
-			throw new GdxRuntimeException("Invalid type specified");
+
+	@Override
+	public void bind () {
+		if (Gdx.gl10 == null) throw new RuntimeException("Can't call ColorAttribute.bind() in a GL20 context");
+
+		// todo how about emissive or specular?
+		// TODO replace string equals with something more performant
+		if (diffuse.equals(diffuse)) Gdx.gl10.glColor4f(color.r, color.g, color.b, color.a);
 	}
-	
-	public ColorAttribute(final long type, final Color color) {
-		this(type);
-		if (color != null)
-			this.color.set(color);
+
+	@Override
+	public void bind (ShaderProgram program) {
+		program.setUniformf(name, color.r, color.g, color.b, color.a);
 	}
-	
-	public ColorAttribute(final long type, float r, float g, float b, float a) {
-		this(type);
-		this.color.set(r,g,b,a);
+
+	@Override
+	public MaterialAttribute copy () {
+		return new ColorAttribute(color, name);
 	}
-	
-	public ColorAttribute(final ColorAttribute copyFrom) {
-		this(copyFrom.type, copyFrom.color);
+
+	@Override
+	public void set (MaterialAttribute attr) {
+		ColorAttribute colAttr = (ColorAttribute)attr;
+		name = colAttr.name;
+		final Color c = colAttr.color;
+		color.r = c.r;
+		color.g = c.g;
+		color.b = c.b;
+		color.a = c.a;
 	}
 
+	private final static Pool<ColorAttribute> pool = new Pool<ColorAttribute>() {
+		@Override
+		protected ColorAttribute newObject () {
+			return new ColorAttribute();
+		}
+	};
+
 	@Override
-	public Attribute copy () {
-		return new ColorAttribute(this);
+	public MaterialAttribute pooledCopy () {
+		ColorAttribute attr = pool.obtain();
+		attr.set(this);
+		return attr;
 	}
 
 	@Override
-	protected boolean equals (Attribute other) {
-		return ((ColorAttribute)other).color.equals(color);
+	public void free () {
+		if (isPooled) pool.free(this);
 	}
-}
\ No newline at end of file
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/materials/FloatAttribute.java b/gdx/src/com/badlogic/gdx/graphics/g3d/materials/FloatAttribute.java
deleted file mode 100644
index 89a6b62..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/materials/FloatAttribute.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.materials;
-
-import com.badlogic.gdx.graphics.g3d.materials.Material.Attribute;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-
-public class FloatAttribute extends Material.Attribute {
-	public static final String ShininessAlias = "shininess";
-	public static final long Shininess = register(ShininessAlias);
-	
-	public static FloatAttribute createShininess(float value) {
-		return new FloatAttribute(Shininess, value);
-	}
-	
-	public float value;
-	
-	public FloatAttribute(long type) {
-		super(type);
-	}
-	
-	public FloatAttribute(long type, float value) {
-		super(type);
-		this.value = value;
-	}
-
-	@Override
-	public Attribute copy () {
-		return new FloatAttribute(type, value);
-	}
-
-	@Override
-	protected boolean equals (Attribute other) {
-		// FIXME use epsilon?
-		return ((FloatAttribute)other).value == value;
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/materials/Material.java b/gdx/src/com/badlogic/gdx/graphics/g3d/materials/Material.java
index 20d205f..1936b24 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/materials/Material.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/materials/Material.java
@@ -1,260 +1,226 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
 package com.badlogic.gdx.graphics.g3d.materials;
 
-import java.util.Comparator;
 import java.util.Iterator;
 
-import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.Disposable;
 
-public class Material implements Iterable<Material.Attribute>, Comparator<Material.Attribute> {
-	/** Extend this class to implement a material attribute.
-	 *  Register the attribute type by statically calling the {@link #register(String)} method, 
-	 *  whose return value should be used to instantiate the attribute. 
-	 *  A class can implement multiple types */
-	public static abstract class Attribute {
-		protected static long register(final String type) {
-			return Material.register(type);
-		}
-		/** The type of this attribute */
-		public final long type;
-		protected Attribute(final long type) {
-			this.type = type;
-		}
-		/** @return An exact copy of this attribute */
-		public abstract Attribute copy(); 
-		protected abstract boolean equals(Attribute other);
-		@Override
-		public boolean equals (Object obj) {
-			if (obj == null) return false;
-			if (obj == this) return true;
-			if (!(obj instanceof Attribute)) return false;
-			final Attribute other = (Attribute)obj;
-			if (other.type != other.type) return false; 
-			return equals(other);
-		}
-		@Override
-		public String toString () {
-			return Material.getAttributeAlias(type);
-		}
-	}
-	
-	/** The registered type aliases */
-	private final static Array<String> types = new Array<String>();
-	
-	private static int counter = 0;
-	
-	/** @return The ID of the specified attribute type, or zero if not available */
-	protected final static long getAttributeType(final String alias) {
-		for (int i = 0; i < types.size; i++)
-			if (types.get(i).compareTo(alias)==0)
-				return 1L << i;
-		return 0;
+public class Material implements Iterable<MaterialAttribute> {
+	protected String name;
+	private Array<MaterialAttribute> attributes;
+
+	/** This flag is true if material contain blendingAttribute */
+	protected boolean needBlending;
+	/** This flag is true if material contain TextureAttribute */
+	protected boolean hasTexture;
+
+	protected ShaderProgram shader;
+
+	public Material () {
+		attributes = new Array<MaterialAttribute>(2);
 	}
-	
-	/** @return The alias of the specified attribute type, or null if not available. */
-	protected final static String getAttributeAlias(final long type) {
-		int idx = -1;
-		while (type != 0 && ++idx < 63 && (((type >> idx) & 1) == 0));
-		return (idx >= 0 && idx < types.size) ? types.get(idx) : null;
+
+	public Material (String name, Array<MaterialAttribute> attributes) {
+		this.name = name;
+		this.attributes = attributes;
+
+		checkAttributes();
 	}
-	
-	/** Use {@link Attribute#register(String)} instead */ 
-	protected final static long register(final String alias) {
-		long result = getAttributeType(alias);
-		if (result > 0)
-			return result;
-		types.add(alias);
-		return 1L << (types.size - 1);
+
+	public Material (String name, MaterialAttribute... attributes) {
+		this(name, new Array<MaterialAttribute>(attributes));
 	}
 	
-	public String id;
-	protected long mask;
-	protected final Array<Attribute> attributes = new Array<Attribute>();
-	protected boolean sorted = true;
-	
-	/** Create an empty material */
-	public Material() {
-		this("mtl"+(++counter));
-	}
-	/** Create an empty material */
-	public Material(final String id) { 
-		this.id = id;	
+	protected void checkAttributes() {
+		// this way we foresee if blending is needed with this material and rendering can deferred more easily
+		this.needBlending = false;
+		this.hasTexture = false;
+		for (int i = 0; i < this.attributes.size; i++) {
+			if (!needBlending && this.attributes.get(i) instanceof BlendingAttribute)
+				this.needBlending = true;
+			else if (!hasTexture && this.attributes.get(i) instanceof TextureAttribute)
+				this.hasTexture = true;
+		}		
 	}
-	/** Create a material with the specified attributes */
-	public Material(final Attribute... attributes) {
-		this();
-		set(attributes);
-	}
-	/** Create a material with the specified attributes */
-	public Material(final String id, final Attribute... attributes) {
-		this(id);
-		set(attributes);
-	}
-	/** Create a material with the specified attributes */
-	public Material(final Array<Attribute> attributes) {
-		this();
-		set(attributes);
-	}
-	/** Create a material with the specified attributes */
-	public Material(final String id, final Array<Attribute> attributes) {
-		this(id);
-		set(attributes);
+
+	public void bind () {
+		for (int i = 0; i < attributes.size; i++) {
+			attributes.get(i).bind();
+		}
 	}
-	/** Create a material which is an exact copy of the specified material */
-	public Material(final Material copyFrom) {
-		this(copyFrom.id, copyFrom);
+
+	public void bind (ShaderProgram program) {
+		for (int i = 0; i < attributes.size; i++) {
+			attributes.get(i).bind(program);
+		}
 	}
-	/** Create a material which is an exact copy of the specified material */
-	public Material(final String id, final Material copyFrom) {
-		this(id);
-		for (Attribute attr : copyFrom)
-			set(attr.copy());
+
+	public String getName () {
+		return name;
 	}
 	
-	private final void enable(final long mask) {
-		this.mask |= mask; 
+	public void addAttribute(MaterialAttribute... attributes){
+		for (int i = 0; i < attributes.length; i++) {
+			if(attributes[i] instanceof BlendingAttribute)
+				needBlending = true;
+			else if (attributes[i] instanceof TextureAttribute)
+				hasTexture = true;
+			this.attributes.add(attributes[i]);
+		}
 	}
-	private final void disable(final long mask) {
-		this.mask &= -1L ^ mask;
+	
+	public void removeAttribute(MaterialAttribute... attributes){
+		for (int i = 0; i < attributes.length; i++)
+			this.attributes.removeValue(attributes[i], true);
+		checkAttributes();
 	}
 	
-	/** @return Bitwise mask of the ID's of all the containing attributes */  
-	public final long getMask() {
-		return mask;
+	public void clearAttributes(){
+		attributes.clear();
+		needBlending = false;
 	}
 	
-	/** @return True if this material has the specified attribute, i.e. material.has(BlendingAttribute.ID); */
-	public final boolean has(final long type) {
-		return type > 0 && (this.mask & type) == type;
+	public MaterialAttribute getAttribute(int index){
+		if(index >= 0 && index < attributes.size)
+			return attributes.get(index);
+		return null;
 	}
 	
-	/** @return the index of the attribute with the specified type or negative if not available. */
-	protected int indexOf(final long type) {
-		if (has(type))
-			for (int i = 0; i < attributes.size; i++)
-				if (attributes.get(i).type == type)
-					return i;
-		return -1;
+	public int getNumberOfAttributes(){
+		return attributes.size;
 	}
+	
+//	/** @return True if this material contains attribute of the specified type, false otherwise */
+//	public <T extends MaterialAttribute> boolean hasAttribute(Class<T> type) {
+//		return indexOfAttribute(type) >= 0;
+//	}
+//	
+//	/** @return The index of the first attribute of the specified type or -1 if not available */
+//	public <T extends MaterialAttribute> int indexOfAttribute(Class<T> type) {
+//		for (int i = 0; i < attributes.size; i++)
+//			if (type.isInstance(attributes.get(i)))
+//				return i;
+//		return -1;
+//	}
+//	
+//	/** @return The first attribute of the specified type, or null if not available */
+//	public <T extends MaterialAttribute> T getAttribute(Class<T> type) {
+//		return (T)getAttribute(indexOfAttribute(type));
+//	}
 
-	/** Add a attribute to this material.
-	 * If the material already contains an attribute of the same type it is overwritten. */
-	public final void set(final Attribute attribute) {
-		final int idx = indexOf(attribute.type);
-		if (idx < 0) {
-			enable(attribute.type);
-			attributes.add(attribute);
-			sorted = false;
-		} else {
-			attributes.set(idx, attribute);
+	public Material copy () {
+		Array<MaterialAttribute> attributes = new Array<MaterialAttribute>(this.attributes.size);
+		for (int i = 0; i < attributes.size; i++) {
+			attributes.add(this.attributes.get(i).copy());
 		}
-	}
-	
-	/** Add an array of attributes to this material. 
-	 * If the material already contains an attribute of the same type it is overwritten. */
-	public final void set(final Attribute... attributes) {
-		for (final Attribute attr : attributes)
-			set(attr);
+		final Material copy = new Material(name, attributes);
+		copy.shader = this.shader;
+		return copy;
 	}
 
-	/** Add an array of attributes to this material.
-	 * If the material already contains an attribute of the same type it is overwritten. */
-	public final void set(final Array<Attribute> attributes) {
-		for (final Attribute attr : attributes)
-			set(attr);
+	@Override
+	public int hashCode () {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + attributes.hashCode();
+		result = prime * result + ((name == null) ? 0 : name.hashCode());
+		return result;
 	}
-	
-	/** Removes the attribute from the material, i.e.: material.remove(BlendingAttribute.ID);
-	 * Can also be used to remove multiple attributes also, i.e. remove(AttributeA.ID | AttributeB.ID); */
-	public final void remove(final long mask) {
+
+	@Override
+	public boolean equals (Object obj) {
+		if (this == obj) return true;
+		if (obj == null) return false;
+		if (getClass() != obj.getClass()) return false;
+		Material other = (Material)obj;
+		if (other.attributes.size != attributes.size) return false;
 		for (int i = 0; i < attributes.size; i++) {
-			final long type = attributes.get(i).type;
-			if ((mask & type) == type) {
-				attributes.removeIndex(i);
-				disable(type);
-				sorted = false;
-			}
+			if (!attributes.get(i).equals(other.attributes.get(i))) return false;
 		}
+		if (name == null) {
+			if (other.name != null) return false;
+		} else if (!name.equals(other.name)) return false;
+		return true;
 	}
-	
-	/** Example usage: ((BlendingAttribute)material.get(BlendingAttribute.ID)).sourceFunction;
-	 * @return The attribute (which can safely be cast) if any, otherwise null */
-	public final Attribute get(final long type) {
-		if (has(type))
-			for (int i = 0; i < attributes.size; i++)
-				if (attributes.get(i).type == type)
-					return attributes.get(i);
-		return null;
-	}
-	
-	/** Get multiple attributes at once.
-	 * Example: material.get(out, AttributeA.ID | AttributeB.ID | AttributeC.ID); */
-	public final Array<Attribute> get(final Array<Attribute> out, final long type) {
-		for (int i = 0; i < attributes.size; i++)
-			if ((attributes.get(i).type & type) != 0)
-				out.add(attributes.get(i));
-		return out;
+
+	public boolean shaderEquals (Material other) {
+		if (this == other) return true;
+
+		int len = this.attributes.size;
+		if (len != other.attributes.size) return false;
+
+		for (int i = 0; i < len; i++) {
+			final String str = this.attributes.get(i).name;
+			if (str == null) return false;
+
+			boolean matchFound = false;
+			for (int j = 0; j < len; j++) {
+				if (str.equals(other.attributes.get(j).name)) {
+					matchFound = true;
+					break;
+				}
+			}
+			if (!matchFound) return false;
+		}
+
+		return true;
 	}
-	
-	/** Removes all attributes */
-	public final void clear() {
-		mask = 0;
+
+	public void setPooled (Material material) {
+		name = material.name;
+		shader = material.shader;
+		needBlending = material.needBlending;
+		hasTexture = material.hasTexture;
 		attributes.clear();
-	}
-	
-	/** @return The amount of attributes this material contains. */
-	public int size() {
-		return attributes.size;
-	}
-	
-	/** Create a copy of this material */
-	public final Material copy() {
-		return new Material(this); 
+		for (int i = 0, len = material.attributes.size; i < len; i++) {
+			attributes.add(material.attributes.get(i).pooledCopy());
+		}
 	}
 
-	/** Used for sorting attributes */
-	@Override
-	public final int compare (final Attribute arg0, final Attribute arg1) {
-		return (int)(arg0.type - arg1.type);
+	public boolean isNeedBlending () {
+		return needBlending;
 	}
 	
-	/** Sort the attributes by their ID */
-	public final void sort() {
-		if (!sorted) {
-			attributes.sort(this);
-			sorted = true;
-		}
+	public boolean hasTexture() {
+		return hasTexture;
 	}
-	
-	/** @return True if this material contains the same attributes as the other, 
-	 * use {@link #equals(Material)} to see if the values are also the same */
-	public final boolean same(final Material other) {
-		return mask == other.mask;
+
+	public ShaderProgram getShader () {
+		return shader;
 	}
 	
-	/** @return True if this material equals the other material in every aspect */
-	public final boolean equals (final Material other) {
-		if (other == null) return false;
-		if (other == this) return true;
-		if (!same(other)) return false;
-		sort();
-		other.sort();
-		for (int i = 0; i < attributes.size; i++)
-			if (!attributes.get(i).equals(other.attributes.get(i)))
-				return false;
-		return true;
+	public void setShader(final ShaderProgram shader) {
+		this.shader = shader;
 	}
 	
-	/** @return True if this material equals the other material in every aspect */
-	@Override
-	public final boolean equals (final Object obj) {
-		return obj instanceof Material ? equals((Material)obj) : false;
+	public void resetShader () {
+		shader = null;
 	}
-	
-	/** Used for iterating through the attributes */
+
 	@Override
-	public final Iterator<Attribute> iterator () {
+	public Iterator<MaterialAttribute> iterator () {
 		return attributes.iterator();
 	}
+
+	/* TODO: Sits in Experimental only used for ProtoRenderer
+	public void generateShader (MaterialShaderHandler materialShaderHandler) {
+		shader = materialShaderHandler.getShader(this);
+	}
+	*/
 }
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/materials/MaterialAttribute.java b/gdx/src/com/badlogic/gdx/graphics/g3d/materials/MaterialAttribute.java
new file mode 100644
index 0000000..e91e4ec
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/materials/MaterialAttribute.java
@@ -0,0 +1,50 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.materials;
+
+import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+
+public abstract class MaterialAttribute {
+	private static final String FLAG = "Flag";
+	public String name;
+	protected final boolean isPooled;
+
+	protected MaterialAttribute () {
+		isPooled = true;
+	}
+
+	public MaterialAttribute (String name) {
+		this.name = name;
+		isPooled = false;
+	}
+
+	public abstract void bind ();
+
+	public abstract void bind (ShaderProgram program);
+
+	public abstract MaterialAttribute copy ();
+
+	public abstract MaterialAttribute pooledCopy ();
+
+	public abstract void free ();
+
+	public abstract void set (MaterialAttribute attr);
+
+	public String getShaderFlag () {
+		return name + FLAG;
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/materials/TextureAttribute.java b/gdx/src/com/badlogic/gdx/graphics/g3d/materials/TextureAttribute.java
index 6c8d83f..056a6e7 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/materials/TextureAttribute.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/materials/TextureAttribute.java
@@ -1,62 +1,128 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
 package com.badlogic.gdx.graphics.g3d.materials;
 
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g3d.materials.Material.Attribute;
-import com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-
-public class TextureAttribute extends Material.Attribute {
-	public final static String DiffuseAlias = "diffuseTexture";
-	public final static long Diffuse = register(DiffuseAlias);
-	public final static String SpecularAlias = "specularTexture";
-	public final static long Specular = register(SpecularAlias);
-	
-	// FIXME add more types!
-	// FIXME add scaling + offset?
-	// FIXME add filter settings? MipMap needs to be obeyed during loading :/
-	
-	protected static long Mask = Diffuse | Specular;
-	
-	public final static boolean is(final long mask) {
-		return (mask & Mask) != 0;
-	}
-	
-	public static TextureAttribute createDiffuse(final Texture texture) {
-		return new TextureAttribute(Diffuse, texture);
-	}
-	
-	public static TextureAttribute createSpecular(final Texture texture) {
-		return new TextureAttribute(Specular, texture);
-	}
-	
-	public final TextureDescriptor textureDescription;
-	
-	public TextureAttribute(final long type, final TextureDescriptor textureDescription) {
-		super(type);
-		if (!is(type))
-			throw new GdxRuntimeException("Invalid type specified");
-		this.textureDescription = textureDescription; // FIXME Add TextureDescriptor#copy or #addRef ?
-	}
-	
-	public TextureAttribute(final long type) {
-		this(type, new TextureDescriptor());
-	}
-	
-	public TextureAttribute(final long type, final Texture texture) {
-		this(type, new TextureDescriptor(texture));
-	}
-	
-	public TextureAttribute(final TextureAttribute copyFrom) {
-		this(copyFrom.type, copyFrom.textureDescription);
-	}
-	
+import com.badlogic.gdx.graphics.Texture.TextureFilter;
+import com.badlogic.gdx.graphics.Texture.TextureWrap;
+import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.utils.Pool;
+
+public class TextureAttribute extends MaterialAttribute {
+
+	public final static int MAX_TEXTURE_UNITS = 16;
+	static final public String diffuseTexture = "diffuseTexture";
+	static final public String lightmapTexture = "lightmapTexture";
+	static final public String specularTexture = "specularTexture";
+
+	public Texture texture;
+	public int unit;
+	public int minFilter;
+	public int magFilter;
+	public int uWrap;
+	public int vWrap;
+
+	protected TextureAttribute () {
+	}
+
+	public TextureAttribute (Texture texture, int unit, String name, TextureFilter minFilter, TextureFilter magFilter,
+		TextureWrap uWrap, TextureWrap vWrap) {
+		this(texture, unit, name, minFilter.getGLEnum(), magFilter.getGLEnum(), uWrap.getGLEnum(), vWrap.getGLEnum());
+	}
+
+	public TextureAttribute (Texture texture, int unit, String name, int minFilter, int magFilter, int uWrap, int vWrap) {
+		super(name);
+		this.texture = texture;
+		if (unit > MAX_TEXTURE_UNITS) throw new RuntimeException(MAX_TEXTURE_UNITS + " is max texture units supported");
+		this.unit = unit;
+		this.uWrap = uWrap;
+		this.vWrap = vWrap;
+		this.minFilter = minFilter;
+		this.magFilter = magFilter;
+	}
+
+	public TextureAttribute (Texture texture, int unit, String name) {
+		this(texture, unit, name, texture.getMinFilter(), texture.getMagFilter(), texture.getUWrap(), texture.getVWrap());
+	}
+
+	@Override
+	public void bind () {
+		texture.bind(unit);
+		Gdx.gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, minFilter);
+		Gdx.gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, magFilter);
+		Gdx.gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S, uWrap);
+		Gdx.gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T, vWrap);
+	}
+
+	@Override
+	public void bind (ShaderProgram program) {
+		texture.bind(unit);
+		Gdx.gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, minFilter);
+		Gdx.gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, magFilter);
+		Gdx.gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S, uWrap);
+		Gdx.gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T, vWrap);
+		program.setUniformi(name, unit);
+	}
+
+	@Override
+	public MaterialAttribute copy () {
+		return new TextureAttribute(texture, unit, name, minFilter, magFilter, uWrap, vWrap);
+	}
+
+	@Override
+	public void set (MaterialAttribute attr) {
+		TextureAttribute texAttr = (TextureAttribute)attr;
+		name = texAttr.name;
+		texture = texAttr.texture;
+		unit = texAttr.unit;
+		magFilter = texAttr.magFilter;
+		minFilter = texAttr.minFilter;
+		uWrap = texAttr.uWrap;
+		vWrap = texAttr.vWrap;
+	}
+
+	/** this method check if the texture portion of texture attribute is equal, name isn't used */
+	public boolean texturePortionEquals (TextureAttribute other) {
+		if (other == null) return false;
+		if (this == other) return true;
+
+		return (texture == other.texture) && (unit == other.unit) && (minFilter == other.minFilter)
+			&& (magFilter == other.magFilter) && (uWrap == other.uWrap) && (vWrap == other.vWrap);
+
+	}
+
+	private final static Pool<TextureAttribute> pool = new Pool<TextureAttribute>() {
+		@Override
+		protected TextureAttribute newObject () {
+			return new TextureAttribute();
+		}
+	};
+
 	@Override
-	public Attribute copy () {
-		return new TextureAttribute(this);
+	public MaterialAttribute pooledCopy () {
+		TextureAttribute attr = pool.obtain();
+		attr.set(this);
+		return attr;
 	}
 
 	@Override
-	protected boolean equals (Attribute other) {
-		return ((TextureAttribute)other).textureDescription.equals(textureDescription);
+	public void free () {
+		if (isPooled) pool.free(this);
 	}
 }
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/AnimatedModel.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/AnimatedModel.java
new file mode 100644
index 0000000..31609d6
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/AnimatedModel.java
@@ -0,0 +1,35 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.model;
+
+public interface AnimatedModel extends Model {
+	/** Start playing the given animation at the given time in the animation and specify wether or not the animation will loop.
+	 * @param animation The name of the animation in this {@link Model} that you should play.
+	 * @param time The time, in seconds, of the section to start the animation.
+	 * @param loop Whether or not the animation will loop if the time is after the end of the animation. (TODO what happens when
+	 *           you reach the end of the animation and this is not set?) */
+	public void setAnimation (String animation, float time, boolean loop);
+
+	/** Get a specific named animation out of the model.
+	 * @param name The name of the animation that you wish to get.
+	 * @return The Animation that you requested; or, if the animation does not exist, null is returned. */
+	public Animation getAnimation (String name);
+
+	/** Get an array containing all of the animations in this model.
+	 * @return An array containing a list of all of the animations in this model. */
+	public Animation[] getAnimations ();
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/Animation.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/Animation.java
index 1bfe37a..d8709b6 100644
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/Animation.java
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/Animation.java
@@ -1,22 +1,27 @@
-package com.badlogic.gdx.graphics.g3d.model;
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
 
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.utils.Array;
+package com.badlogic.gdx.graphics.g3d.model;
 
-/**
- * An Animation has an id and a list of {@link NodeAnimation} instances. Each
- * NodeAnimation animates a single {@link Node} in the {@link Model}. Every
- * {@link NodeAnimation} is assumed to have the same amount of keyframes,
- * at the same timestamps, as all other node animations for faster keyframe
- * searches.
- * 
- * @author badlogic
- */
 public class Animation {
-	/** the unique id of the animation **/
-	public String id;
-	/** the duration in seconds **/
-	public float duration;
-	/** the animation curves for individual nodes **/
-	public Array<NodeAnimation> nodeAnimations = new Array<NodeAnimation>();
+	public final String name;
+	public final float totalDuration;
+
+	public Animation (String name, float totalDuration) {
+		this.name = name;
+		this.totalDuration = totalDuration;
+	}
 }
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/MeshPart.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/MeshPart.java
deleted file mode 100644
index 24ac3bf..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/MeshPart.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.model;
-
-import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.Model;
-
-/**
- * A mesh part is composed of a subset of vertices
- * of a {@link Mesh}, along with the primitive type.
- * The vertices subset is described by an offset into
- * the Mesh's indices array and the number of vertices.
- * @author badlogic
- *
- */
-public class MeshPart {
-	/** unique id within model, may be null (FIXME?) **/
-	public String id;
-	/** the primitive type, OpenGL constant like GL_TRIANGLES **/
-	public int primitiveType;
-	/** the offset into a Mesh's indices array **/
-	public int indexOffset;
-	/** the number of vertices that make up this part **/
-	public int numVertices;
-	/** the Mesh the part references, also stored in {@link Model} **/
-	public Mesh mesh;
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/Model.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/Model.java
new file mode 100644
index 0000000..cd48f8f
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/Model.java
@@ -0,0 +1,72 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.model;
+
+import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.GL20;
+import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.math.collision.BoundingBox;
+
+public interface Model {
+	/** Renders the model using the {@link GL10} pipeline.<br />
+	 * <br />
+	 * <strong>Important:</strong> This model must have materials set before you can use this render function. Do that by using
+	 * {@link Model#setMaterials(Material...)}. */
+	public void render ();
+
+	/** Renders this model using the {@link GL20} shader pipeline.<br />
+	 * <br />
+	 * <strong>IMPORTANT:</strong> This model must have materials set before you can use this render function. Do that by using
+	 * {@link Model#setMaterials(Material...)}.
+	 * @param program The shader program that you will use to draw this object to the screen. It must be non-null. */
+	public void render (ShaderProgram program);
+
+	/** Returns a {@link Model} that is made up of the sub-meshes with the provided names.
+	 * @param subMeshNames A list of names of each {@link SubMesh} that is to be extracted from this model.
+	 * @return A new {@link Model} that is only made up of the parts you requested. */
+	public Model getSubModel (String... subMeshNames);
+
+	/** @param name The name of the {@link SubMesh} to be acquired.
+	 * @return The {@link SubMesh} that matches that name; or null, if one does not exist. */
+	public SubMesh getSubMesh (String name);
+
+	/** @return An array of every {@link SubMesh} that makes up this model. */
+	public SubMesh[] getSubMeshes ();
+
+	/** Generates the bounding box for the Model.<br />
+	 * <br />
+	 * For every finite 3D object there exists a box that can enclose the object. This function sets the give {@link BoundingBox}
+	 * to be one such enclosing box.<br />
+	 * Bounding boxes are useful for very basic collision detection amongst other tasks.
+	 * @param bbox The provided {@link BoundingBox} will have its internal values correctly set. (To allow Java Object reuse) */
+	public void getBoundingBox (BoundingBox bbox);
+
+	/** Sets every {@link Material} of every {@link SubMesh} in this {@link Model} to be the materials provided.
+	 * @param materials A list of the materials to set the submeshes to for this model. (The length of the list of materials must
+	 *           be the same as the number of SubMeshes in this Model. Failure to do so will result in an
+	 *           {@link UnsupportedOperationException}) */
+	public void setMaterials (Material... materials);
+
+	/** Sets the {@link Material} of every {@link SubMesh} in this Model to be the material provided.
+	 * @param material The Material that you wish the whole object to be rendered with. */
+	public void setMaterial (Material material);
+
+	/** This function releases memory once you are done with the Model. Once you are finished with the Model you MUST call this
+	 * function or else you will suffer memory leaks. */
+	public void dispose ();
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/Node.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/Node.java
deleted file mode 100644
index c1ab72b..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/Node.java
+++ /dev/null
@@ -1,88 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.model;
-
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.math.Quaternion;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.utils.Array;
-
-/**
- * A node is part of a hierarchy of Nodes in a {@link Model}. A Node encodes
- * a transform relative to its parents. A Node can have child nodes. Optionally
- * a node can specify a {@link MeshPart} and a {@link Material} to be applied to the mesh part.
- * @author badlogic
- *
- */
-public class Node {
-	/** the id, may be null, FIXME is this unique? **/
-	public String id;
-	/** parent node, may be null **/
-	public Node parent;
-	/** child nodes **/
-	public final Array<Node> children = new Array<Node>(2);
-	/** Whether this node is currently being animated, if so the translation, rotation and scale values are not used. */
-	public boolean isAnimated;
-	/** the translation, relative to the parent, not modified by animations **/
-	public final Vector3 translation = new Vector3();
-	/** the rotation, relative to the parent, not modified by animations **/
-	public final Quaternion rotation = new Quaternion(0, 0, 0, 1);
-	/** the scale, relative to the parent, not modified by animations **/
-	public final Vector3 scale = new Vector3(1, 1, 1);
-	/** the local transform, based on translation/rotation/scale ({@link #calculateLocalTransform()}) or any applied animation **/
-	public final Matrix4 localTransform = new Matrix4();
-	/** the global transform, product of local transform and transform of the parent node, calculated via {@link #calculateWorldTransform()}**/
-	public final Matrix4 globalTransform = new Matrix4();
-	/** the inverted initial global transform, set when the model is created. */
-	public final Matrix4 invInitialTransform = new Matrix4();
-	/** this bone global transform */ 
-	public final Matrix4 boneTransform = new Matrix4();
-	
-	public Array<NodePart> parts = new Array<NodePart>(2);
-	
-	/**
-	 * Calculates the local transform based on the translation, scale and rotation
-	 * @return the local transform
-	 */
-	public Matrix4 calculateLocalTransform() {
-		if (!isAnimated) {
-			localTransform.idt();
-			localTransform.translate(translation);
-			localTransform.rotate(rotation);
-			localTransform.scale(scale.x, scale.y, scale.z);
-		}
-		return localTransform;
-	}
-
-	/**
-	 * Calculates the world transform; the product of local transform and the
-	 * parent's world transform. 
-	 * @return the world transform
-	 */
-	public Matrix4 calculateWorldTransform() {
-		if (parent == null) 
-			globalTransform.set(localTransform);
-		else
-			globalTransform.set(parent.globalTransform).mul(localTransform);
-		//boneTransform.set(initialTransform).inv().mul(worldTransform);
-		boneTransform.set(globalTransform).mul(invInitialTransform);
-		return globalTransform;
-	}
-	
-	/**
-	 * Calculates the local and world transform of this node and optionally all
-	 * its children.
-	 * 
-	 * @param recursive whether to calculate the local/world transforms for children.
-	 */
-	public void calculateTransforms(boolean recursive) {
-		calculateLocalTransform();
-		calculateWorldTransform();
-		
-		if(recursive) {
-			for(Node child: children) {
-				child.calculateTransforms(true);
-			}
-		}
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/NodeAnimation.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/NodeAnimation.java
deleted file mode 100644
index a77bb52..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/NodeAnimation.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.model;
-
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.utils.Array;
-
-/**
- * A NodeAnimation defines keyframes for a {@link Node} in a {@link Model}. The keyframes
- * are given as a translation vector, a rotation quaternion and a scale vector. Keyframes are 
- * interpolated linearly for now. Keytimes are given in seconds.
- * @author badlogic
- *
- */
-public class NodeAnimation {
-	/** the Node affected by this animation **/
-	public Node node;
-	/** the keyframes, sorted by time, ascending **/
-	public Array<NodeKeyframe> keyframes = new Array<NodeKeyframe>();
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/NodeKeyframe.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/NodeKeyframe.java
deleted file mode 100644
index 26c74c6..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/NodeKeyframe.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.model;
-
-import com.badlogic.gdx.math.Quaternion;
-import com.badlogic.gdx.math.Vector3;
-
-/**
- * A BoneyKeyframe specifies the translation, rotation and scale of a frame within
- * a {@link NodeAnimation}.
- * @author badlogic
- *
- */
-public class NodeKeyframe {
-	/** the timestamp of this keyframe **/
-	public float keytime;
-	/** the translation, given in local space, relative to the parent **/
-	public final Vector3 translation = new Vector3();
-	/** the scale, given in local space relative to the parent **/
-	public final Vector3 scale = new Vector3(1,1,1);
-	/** the rotation, given in local space, relative to the parent **/
-	public final Quaternion rotation = new Quaternion();
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/NodePart.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/NodePart.java
deleted file mode 100644
index 6b3b2dc..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/NodePart.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.model;
-
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.ArrayMap;
-
-/**
- * A combination of {@link MeshPart} and {@link Material}, used to represent a {@link Node}'s graphical
- * properties
- * @author badlogic
- */
-public class NodePart {
-	public MeshPart meshPart;
-	public Material material;
-	public ArrayMap<Node, Matrix4> bones;
-	
-	public NodePart() {}
-	
-	public NodePart(final MeshPart meshPart, final Material material) {
-		this.meshPart = meshPart;
-		this.material = material;
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/SubMesh.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/SubMesh.java
new file mode 100644
index 0000000..260f08f
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/SubMesh.java
@@ -0,0 +1,53 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.model;
+
+import com.badlogic.gdx.graphics.Mesh;
+import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.math.collision.BoundingBox;
+
+public abstract class SubMesh {
+	public String name;
+	public Material material;
+	public int primitiveType;
+	public Mesh mesh;
+
+
+	public SubMesh (String name, Mesh mesh, int primitiveType, Material material) {
+		this.name = name;
+		this.setMesh(mesh);
+		this.primitiveType = primitiveType;
+		this.material = material;
+	}
+	
+	public SubMesh (String name, Mesh mesh, int primitiveType) {
+		this(name, mesh, primitiveType, null);
+	}
+
+	/** Obtain the {@link BoundingBox} of this {@link SubMesh}.
+	 * 
+	 * @param bbox This {@link BoundingBox} will be modified so that its contain values that are the bounding box for this SubMesh. */
+	public abstract void getBoundingBox (BoundingBox bbox);
+
+	public Mesh getMesh() {
+		return mesh;
+	}
+
+	public void setMesh(Mesh mesh) {
+		this.mesh = mesh;
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelAnimation.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelAnimation.java
deleted file mode 100644
index bff5374..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelAnimation.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.model.data;
-
-import com.badlogic.gdx.utils.Array;
-
-public class ModelAnimation {
-	public String id;
-	public Array<ModelNodeAnimation> nodeAnimations = new Array<ModelNodeAnimation>();
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelData.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelData.java
deleted file mode 100644
index 85ccc4d..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelData.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.model.data;
-
-import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-
-/**
- * Returned by a {@link ModelLoader}, contains meshes, materials, nodes
- * and animations. OpenGL resources like textures or vertex buffer objects
- * are not stored. Instead, a ModelData instance needs to be converted to a 
- * Model first.
- * @author badlogic
- *
- */
-public class ModelData {
-	public String version;
-	public final Array<ModelMesh> meshes = new Array<ModelMesh>();
-	public final Array<ModelMaterial> materials = new Array<ModelMaterial>();
-	public final Array<ModelNode> nodes = new Array<ModelNode>();
-	public final Array<ModelAnimation> animations = new Array<ModelAnimation>();
-	
-	public void addMesh(ModelMesh mesh) {
-		for(ModelMesh other: meshes) {
-			if(other.id.equals(mesh.id)) {
-				throw new GdxRuntimeException("Mesh with id '" + other.id + "' already in model");
-			}
-		}
-		meshes.add(mesh);
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMaterial.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMaterial.java
deleted file mode 100644
index e9a2fc6..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMaterial.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.model.data;
-
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.utils.Array;
-
-public class ModelMaterial {
-	public enum MaterialType {
-		Lambert,
-		Phong
-	}
-	
-	public String id;
-	
-	public MaterialType type;
-	
-	public Color ambient;
-	public Color diffuse;
-	public Color specular;
-	public Color emissive;
-	
-	public float shininess;
-	
-	public Array<ModelTexture> diffuseTextures;
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMesh.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMesh.java
deleted file mode 100644
index 8e2104b..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMesh.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.model.data;
-
-import com.badlogic.gdx.graphics.VertexAttribute;
-
-public class ModelMesh {
-	public String id;
-	public VertexAttribute[] attributes;
-	public float[] vertices;
-	public ModelMeshPart[] parts;
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMeshPart.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMeshPart.java
deleted file mode 100644
index 211556c..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelMeshPart.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.model.data;
-
-public class ModelMeshPart {
-	public String id;
-	public short[] indices;
-	public int primitiveType;
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNode.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNode.java
deleted file mode 100644
index 3073457..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNode.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.model.data;
-
-import com.badlogic.gdx.math.Quaternion;
-import com.badlogic.gdx.math.Vector3;
-
-public class ModelNode {
-	public String id;
-	public int boneId = -1;
-	public Vector3 translation;
-	public Quaternion rotation;
-	public Vector3 scale;
-	public String meshId;
-	public ModelNodePart[] parts;
-	public ModelNode[] children;
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNodeAnimation.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNodeAnimation.java
deleted file mode 100644
index f0c14e4..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNodeAnimation.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.model.data;
-
-import com.badlogic.gdx.utils.Array;
-
-public class ModelNodeAnimation {
-	/** the id of the node animated by this animation FIXME should be nodeId **/
-	public String nodeId;
-	/** the keyframes, defining the transformation of a node for a sepcific timestamp **/
-	public Array<ModelNodeKeyframe> keyframes = new Array<ModelNodeKeyframe>();
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNodeKeyframe.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNodeKeyframe.java
deleted file mode 100644
index 82ec6a7..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNodeKeyframe.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.model.data;
-
-import com.badlogic.gdx.math.Quaternion;
-import com.badlogic.gdx.math.Vector3;
-
-public class ModelNodeKeyframe {
-	/** the timestamp of the keyframe in seconds **/
-	public float keytime;
-	/** the translation, in local space relative to the parent **/
-	public Vector3 translation;
-	/** the scale, in local space relative to the parent **/
-	public Vector3 scale;
-	/** the rotation, in local space relative to the parent **/
-	public Quaternion rotation;
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNodePart.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNodePart.java
deleted file mode 100644
index 5b2db33..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelNodePart.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.model.data;
-
-import com.badlogic.gdx.utils.Array;
-
-public class ModelNodePart {
-	public String materialId;
-	public String meshPartId;
-	public String bones[];
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelTexture.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelTexture.java
deleted file mode 100644
index f0e8322..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/data/ModelTexture.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.model.data;
-
-import com.badlogic.gdx.math.Vector2;
-
-public class ModelTexture {
-	public String id;
-	public String fileName;
-	public Vector2 uvTranslation;
-	public Vector2 uvScaling;	
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/keyframe/Keyframe.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/keyframe/Keyframe.java
new file mode 100644
index 0000000..a6d3165
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/keyframe/Keyframe.java
@@ -0,0 +1,27 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.model.keyframe;
+
+public class Keyframe {
+	public final float timeStamp;
+	public final float[] vertices;
+
+	public Keyframe (float timeStamp, float[] vertices) {
+		this.timeStamp = timeStamp;
+		this.vertices = vertices;
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/keyframe/KeyframedAnimation.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/keyframe/KeyframedAnimation.java
new file mode 100644
index 0000000..4301bcc
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/keyframe/KeyframedAnimation.java
@@ -0,0 +1,30 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.model.keyframe;
+
+import com.badlogic.gdx.graphics.g3d.model.Animation;
+
+public class KeyframedAnimation extends Animation {
+	public final float frameDuration;
+	public final Keyframe[] keyframes;
+
+	public KeyframedAnimation (String name, float frameDuration, Keyframe[] keyframes) {
+		super(name, frameDuration * keyframes.length);
+		this.frameDuration = frameDuration;
+		this.keyframes = keyframes;
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/keyframe/KeyframedModel.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/keyframe/KeyframedModel.java
new file mode 100644
index 0000000..d32e777
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/keyframe/KeyframedModel.java
@@ -0,0 +1,200 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.model.keyframe;
+
+import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.graphics.g3d.model.AnimatedModel;
+import com.badlogic.gdx.graphics.g3d.model.Model;
+import com.badlogic.gdx.graphics.g3d.model.SubMesh;
+import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.math.collision.BoundingBox;
+import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.Disposable;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+
+public class KeyframedModel implements AnimatedModel, Disposable {
+	public final KeyframedSubMesh[] subMeshes;
+	protected final KeyframedAnimation[] animations;
+
+	public KeyframedModel (KeyframedSubMesh[] subMeshes) {
+		this.subMeshes = subMeshes;
+
+		Array<KeyframedAnimation> meshAnims = subMeshes[0].animations.values().toArray();
+		animations = new KeyframedAnimation[meshAnims.size];
+		for (int i = 0; i < animations.length; i++) {
+			animations[i] = meshAnims.get(i);
+		}
+
+		checkValidity();
+	}
+
+	private void checkValidity () {
+		for (int i = 0; i < subMeshes.length; i++) {
+			if (subMeshes[i].animations.size != animations.length)
+				throw new GdxRuntimeException("number of animations in subMesh[0] is not the same in subMesh[" + i
+					+ "]. All sub-meshes must have the same animations and number of frames");
+		}
+
+		for (int i = 0; i < animations.length; i++) {
+			KeyframedAnimation anim = animations[i];
+			for (int j = 0; j < subMeshes.length; j++) {
+				KeyframedAnimation otherAnim = subMeshes[j].animations.get(anim.name);
+				if (otherAnim == null) throw new GdxRuntimeException("animation '" + anim.name + "' missing in subMesh[" + j + "]");
+				if (otherAnim.frameDuration != anim.frameDuration)
+					throw new GdxRuntimeException("animation '" + anim.name + "' in subMesh[" + j
+						+ "] has different frame duration than the same animation in subMesh[0]");
+				if (otherAnim.keyframes.length != anim.keyframes.length)
+					throw new GdxRuntimeException("animation '" + anim.name + "' in subMesh[" + j
+						+ "] has different number of keyframes than the same animation in subMesh[0]");
+			}
+		}
+	}
+
+	@Override
+	public void render () {
+		int len = subMeshes.length;
+		for (int i = 0; i < len; i++) {
+			KeyframedSubMesh subMesh = subMeshes[i];
+			if (i == 0 || !subMeshes[i - 1].material.equals(subMesh.material)) {
+				subMesh.material.bind();
+			}
+			subMesh.mesh.render(subMesh.primitiveType);
+		}
+	}
+
+	@Override
+	public void render (ShaderProgram program) {
+		int len = subMeshes.length;
+		for (int i = 0; i < len; i++) {
+			KeyframedSubMesh subMesh = subMeshes[i];
+			if (i == 0 || !subMeshes[i - 1].material.equals(subMesh.material)) {
+				subMesh.material.bind(program);
+			}
+			subMesh.mesh.render(program, subMesh.primitiveType);
+		}
+	}
+
+	@Override
+	public void setMaterials (Material... materials) {
+		if (materials.length != subMeshes.length)
+			throw new UnsupportedOperationException("number of materials must equal number of sub-meshes");
+		int len = materials.length;
+		for (int i = 0; i < len; i++) {
+			subMeshes[i].material = materials[i];
+		}
+	}
+
+	@Override
+	public void setMaterial (Material material) {
+		int len = subMeshes.length;
+		for (int i = 0; i < len; i++) {
+			subMeshes[i].material = material;
+		}
+	}
+
+	@Override
+	public KeyframedSubMesh getSubMesh (String name) {
+		int len = subMeshes.length;
+		for (int i = 0; i < len; i++) {
+			if (subMeshes[i].name.equals(name)) return subMeshes[i];
+		}
+		return null;
+	}
+
+	@Override
+	public SubMesh[] getSubMeshes () {
+		return subMeshes;
+	}
+
+	@Override
+	public void setAnimation (String animation, float time, boolean loop) {
+		int len = subMeshes.length;
+		for (int i = 0; i < len; i++) {
+			final KeyframedSubMesh subMesh = subMeshes[i];
+			final KeyframedAnimation anim = subMesh.animations.get(animation);
+			if (anim == null) throw new IllegalArgumentException("No animation with name '" + animation + "' in submesh #" + i);
+			if (time < 0 || time > anim.totalDuration)
+				throw new IllegalArgumentException("time must be 0 <= time <= animation duration");
+
+			final int startIndex = (int)Math.floor((time / anim.frameDuration));
+			final Keyframe startFrame = anim.keyframes[startIndex];
+			final Keyframe endFrame = anim.keyframes[anim.keyframes.length - 1 == startIndex ? loop ? 0 : startIndex
+				: startIndex + 1];
+
+			final int numComponents = subMesh.animatedComponents;
+			final float[] src = startFrame.vertices;
+			final int srcLen = numComponents * subMesh.mesh.getNumVertices();
+
+			final float[] dst = subMesh.blendedVertices;
+			final int dstInc = subMesh.mesh.getVertexSize() / 4 - numComponents;
+
+			if (startFrame == endFrame) {
+				for (int srcIdx = 0, dstIdx = 0; srcIdx < srcLen; dstIdx += dstInc) {
+					for (int j = 0; j < numComponents; j++) {
+						dst[dstIdx++] = src[srcIdx++];
+					}
+				}
+			} else {
+				float[] src2 = endFrame.vertices;
+				float alpha = (time - (startIndex * anim.frameDuration)) / anim.frameDuration;
+				for (int srcIdx = 0, dstIdx = 0; srcIdx < srcLen; dstIdx += dstInc) {
+					for (int j = 0; j < numComponents; j++) {
+						final float valSrc = src[srcIdx];
+						final float valSrc2 = src2[srcIdx++];
+						dst[dstIdx++] = valSrc + (valSrc2 - valSrc) * alpha;
+					}
+				}
+			}
+
+			subMesh.mesh.setVertices(dst);
+		}
+	}
+
+	@Override
+	public KeyframedAnimation getAnimation (String name) {
+		return subMeshes[0].animations.get(name);
+	}
+
+	@Override
+	public KeyframedAnimation[] getAnimations () {
+		return animations;
+	}
+
+	@Override
+	public Model getSubModel (String... subMeshNames) {
+		// FIXME
+		return null;
+	}
+
+	private final static BoundingBox tmpBox = new BoundingBox();
+
+	@Override
+	public void getBoundingBox (BoundingBox bbox) {
+		bbox.inf();
+		for (int i = 0; i < subMeshes.length; i++) {
+			subMeshes[i].mesh.calculateBoundingBox(tmpBox);
+			bbox.ext(tmpBox);
+		}
+	}
+
+	@Override
+	public void dispose () {
+		for (int i = 0; i < subMeshes.length; i++) {
+			subMeshes[i].mesh.dispose();
+		}
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/keyframe/KeyframedSubMesh.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/keyframe/KeyframedSubMesh.java
new file mode 100644
index 0000000..2748a7f
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/keyframe/KeyframedSubMesh.java
@@ -0,0 +1,44 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.model.keyframe;
+
+import com.badlogic.gdx.graphics.Mesh;
+import com.badlogic.gdx.graphics.g3d.model.SubMesh;
+import com.badlogic.gdx.math.collision.BoundingBox;
+import com.badlogic.gdx.utils.ObjectMap;
+
+public class KeyframedSubMesh extends SubMesh {
+	public final float[] blendedVertices;
+	public final int animatedComponents;
+	public final ObjectMap<String, KeyframedAnimation> animations;
+
+	public KeyframedSubMesh (String name, Mesh mesh, float[] blendedVertices, ObjectMap<String, KeyframedAnimation> animations,
+		int animatedComponents, int primitiveType) {
+		
+		super(name, mesh, primitiveType);
+		
+		this.blendedVertices = blendedVertices;
+		this.animations = animations;
+		this.animatedComponents = animatedComponents;
+	}
+
+	@Override
+	public void getBoundingBox (BoundingBox bbox) {
+		mesh.calculateBoundingBox(bbox);
+	}
+
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/Skeleton.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/Skeleton.java
new file mode 100644
index 0000000..d4251e9
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/Skeleton.java
@@ -0,0 +1,156 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.model.skeleton;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import com.badlogic.gdx.math.Matrix4;
+import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.ObjectMap;
+
+public class Skeleton {
+	/** each joint is a root joint in the hierachy **/
+	public final Array<SkeletonJoint> hierarchy = new Array<SkeletonJoint>();
+	/** the names of each joint in breadth first order **/
+	public final Array<String> jointNames = new Array<String>();
+	/** names to indices **/
+	public final Map<String, Integer> namesToIndices = new HashMap<String, Integer>();
+	/** the bind pose joints in breadth first order **/
+	public final Array<SkeletonKeyframe> bindPoseJoints = new Array<SkeletonKeyframe>();
+	/** the joints in breadth first order for the last calculates animation pose **/
+	public final Array<SkeletonKeyframe> animPoseJoints = new Array<SkeletonKeyframe>();
+	/** the offset matrices for each joint in the same order as the bindPoseJoints **/
+	public final Array<Matrix4> offsetMatrices = new Array<Matrix4>();
+	/** the scene matrices for each joint in the same order as bindPoseJoints **/
+	public final Array<Matrix4> sceneMatrices = new Array<Matrix4>();
+	/** combined scene and offset matrices **/
+	public final Array<Matrix4> combinedMatrices = new Array<Matrix4>();
+	/** map of animations, indexed by name **/
+	public final ObjectMap<String, SkeletonAnimation> animations = new ObjectMap<String, SkeletonAnimation>();
+
+	private static final Matrix4 IDENTITY = new Matrix4();
+	private final Matrix4 rotMatrix = new Matrix4();
+
+	/** Fills the baseJoints, offsetMatrices and sceneMatrices Array instances with joints and Matrix4 instances in an breadth first
+	 * order. This allows one to iterate over the joint arrays instead of recursing over the hierarchy when calculating the scene
+	 * matrices. */
+	public void buildFromHierarchy () {
+		jointNames.clear();
+		namesToIndices.clear();
+		bindPoseJoints.clear();
+		animPoseJoints.clear();
+		offsetMatrices.clear();
+		sceneMatrices.clear();
+
+		for (int i = 0; i < hierarchy.size; i++) {
+			recursiveFill(hierarchy.get(i));
+		}
+
+		calculateMatrices(bindPoseJoints);
+		calculateOffsetMatrices();
+	}
+
+	private void recursiveFill (SkeletonJoint joint) {
+		joint.index = bindPoseJoints.size;
+		joint.parentIndex = joint.parent != null ? joint.parent.index : -1;
+
+		SkeletonKeyframe keyFrame = new SkeletonKeyframe();
+		keyFrame.position.set(joint.position);
+		keyFrame.scale.set(joint.scale);
+		keyFrame.rotation.set(joint.rotation);
+		keyFrame.parentIndex = joint.parentIndex;
+
+		jointNames.add(joint.name);
+		namesToIndices.put(joint.name, joint.index);
+		bindPoseJoints.add(keyFrame);
+		SkeletonKeyframe animKeyframe = new SkeletonKeyframe();
+		animKeyframe.parentIndex = joint.parentIndex;
+		animPoseJoints.add(animKeyframe);
+		offsetMatrices.add(new Matrix4());
+		sceneMatrices.add(new Matrix4());
+		combinedMatrices.add(new Matrix4());
+
+		int len = joint.children.size;
+		for (int i = 0; i < len; i++) {
+			recursiveFill(joint.children.get(i));
+		}
+	}
+
+	protected void calculateOffsetMatrices () {
+		for (int i = 0; i < offsetMatrices.size; i++) {
+			offsetMatrices.get(i).set(sceneMatrices.get(i)).inv();
+		}
+	}
+
+	protected void calculateMatrices (Array<SkeletonKeyframe> joints) {
+		for (int i = 0; i < joints.size; i++) {
+			SkeletonKeyframe joint = joints.get(i);
+			Matrix4 sceneMatrix = sceneMatrices.get(i);
+			Matrix4 parentMatrix = joint.parentIndex != -1 ? sceneMatrices.get(joint.parentIndex) : IDENTITY;
+			Matrix4 combinedMatrix = combinedMatrices.get(i);
+
+			joint.rotation.toMatrix(rotMatrix.val);
+			rotMatrix.trn(joint.position);
+			rotMatrix.scl(joint.scale);
+			sceneMatrix.set(parentMatrix);
+			sceneMatrix.mul(rotMatrix);
+
+			combinedMatrix.set(sceneMatrix);
+			combinedMatrix.mul(offsetMatrices.get(i));
+		}
+	}
+
+	public void setAnimation (String name, float time) {
+		SkeletonAnimation anim = animations.get(name);
+		if (anim == null) throw new IllegalArgumentException("Animation with name '" + name + "' does not exist");
+		if (time < 0 || time > anim.totalDuration)
+			throw new IllegalArgumentException("time must be 0 <= time <= animation duration");
+
+		int len = anim.perJointkeyFrames.length;
+		for (int i = 0; i < len; i++) {
+			SkeletonKeyframe[] jointTrack = anim.perJointkeyFrames[i];
+			int idx = 0;
+			int len2 = jointTrack.length;
+			for (int j = 0; j < len2; j++) {
+				SkeletonKeyframe jointFrame = jointTrack[j];
+				if (jointFrame.timeStamp >= time) {
+					idx = Math.max(0, j - 1);
+					break;
+				}
+			}
+
+			SkeletonKeyframe startFrame = jointTrack[idx];
+			SkeletonKeyframe endFrame = idx + 1 == len2 ? startFrame : jointTrack[idx + 1];
+			float alpha = 0;
+
+			if (startFrame != endFrame) {
+				alpha = Math.min(1, (time - startFrame.timeStamp) / (endFrame.timeStamp - startFrame.timeStamp));
+			}
+			SkeletonKeyframe animFrame = animPoseJoints.get(i);
+			animFrame.position.set(startFrame.position).lerp(endFrame.position, alpha);
+			animFrame.scale.set(startFrame.scale).lerp(endFrame.scale, alpha);
+			animFrame.rotation.set(startFrame.rotation).slerp(endFrame.rotation, alpha);
+		}
+
+		calculateMatrices(animPoseJoints);
+	}
+
+	public void setBindPose () {
+		calculateMatrices(bindPoseJoints);
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonAnimation.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonAnimation.java
new file mode 100644
index 0000000..9d264fe
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonAnimation.java
@@ -0,0 +1,28 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.model.skeleton;
+
+import com.badlogic.gdx.graphics.g3d.model.Animation;
+
+public class SkeletonAnimation extends Animation {
+	public final SkeletonKeyframe[][] perJointkeyFrames;
+
+	public SkeletonAnimation (String name, float totalDuration, SkeletonKeyframe[][] perJointKeyFrames) {
+		super(name, totalDuration);
+		this.perJointkeyFrames = perJointKeyFrames;
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonJoint.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonJoint.java
new file mode 100644
index 0000000..f8b0ac1
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonJoint.java
@@ -0,0 +1,34 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.model.skeleton;
+
+import com.badlogic.gdx.math.Quaternion;
+import com.badlogic.gdx.math.Vector3;
+import com.badlogic.gdx.utils.Array;
+
+public class SkeletonJoint {
+	public String name;
+
+	public int index;
+	public int parentIndex;
+	public SkeletonJoint parent;
+	public final Array<SkeletonJoint> children = new Array<SkeletonJoint>(1);
+
+	public final Vector3 position = new Vector3();
+	public final Quaternion rotation = new Quaternion(new Vector3(0, 1, 0), 0);
+	public final Vector3 scale = new Vector3(1, 1, 1);
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonKeyframe.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonKeyframe.java
new file mode 100644
index 0000000..5bc16fb
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonKeyframe.java
@@ -0,0 +1,33 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.model.skeleton;
+
+import com.badlogic.gdx.math.Quaternion;
+import com.badlogic.gdx.math.Vector3;
+
+public class SkeletonKeyframe {
+	public float timeStamp = 0;
+	public int parentIndex = -1;
+	public final Vector3 position = new Vector3();
+	public final Vector3 scale = new Vector3(1, 1, 1);
+	public final Quaternion rotation = new Quaternion(0, 0, 0, 1);
+
+	public String toString () {
+		return "time: " + timeStamp + ", " + "parent: " + parentIndex + ", " + "position: " + position + ", " + "scale: " + scale
+			+ ", " + "rotation: " + rotation;
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonModel.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonModel.java
new file mode 100644
index 0000000..934e218
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonModel.java
@@ -0,0 +1,222 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.model.skeleton;
+
+import com.badlogic.gdx.graphics.VertexAttributes.Usage;
+import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.graphics.g3d.model.AnimatedModel;
+import com.badlogic.gdx.graphics.g3d.model.Model;
+import com.badlogic.gdx.graphics.g3d.model.SubMesh;
+import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.math.Matrix4;
+import com.badlogic.gdx.math.Vector3;
+import com.badlogic.gdx.math.collision.BoundingBox;
+import com.badlogic.gdx.utils.Array;
+
+public class SkeletonModel implements AnimatedModel {
+	public final Skeleton skeleton;
+	public final SkeletonSubMesh[] subMeshes;
+
+	public SkeletonModel (Skeleton skeleton, SubMesh[] subMeshes) {
+		this.skeleton = skeleton;
+		this.subMeshes = new SkeletonSubMesh[subMeshes.length];
+		
+		for (int i=0; i < subMeshes.length; ++i) {
+			this.subMeshes[i] = (SkeletonSubMesh)subMeshes[i];
+		}
+		setMaterial(new Material("default"));
+	}
+
+	public void setBindPose () {
+		skeleton.setBindPose();
+		for (int i = 0; i < subMeshes.length; i++) {
+			skin(subMeshes[i], skeleton.combinedMatrices);
+		}
+	}
+
+	@Override
+	public void setAnimation (String animation, float time, boolean loop) {
+		skeleton.setAnimation(animation, time);
+		for (int i = 0; i < subMeshes.length; i++) {
+			skin(subMeshes[i], skeleton.combinedMatrices);
+		}
+	}
+
+	final Vector3 v = new Vector3();
+
+	public void skin (SkeletonSubMesh subMesh, Array<Matrix4> boneMatrices) {
+		final int stride = subMesh.mesh.getVertexSize() / 4;
+		final int numVertices = subMesh.mesh.getNumVertices();
+		int idx = 0;
+		int nidx = subMesh.mesh.getVertexAttribute(Usage.Normal) == null ? -1
+			: subMesh.mesh.getVertexAttribute(Usage.Normal).offset / 4;
+		final float[] vertices = subMesh.vertices;
+		final float[] skinnedVertices = subMesh.skinnedVertices;
+
+		System.arraycopy(subMesh.vertices, 0, skinnedVertices, 0, subMesh.vertices.length);
+
+		for (int i = 0; i < numVertices; i++, idx += stride, nidx += stride) {
+			final int[] boneIndices = subMesh.boneAssignments[i];
+			final float[] boneWeights = subMesh.boneWeights[i];
+
+			final float ox = vertices[idx], oy = vertices[idx + 1], oz = vertices[idx + 2];
+			float x = 0, y = 0, z = 0;
+			float onx = 0, ony = 0, onz = 0;
+			float nx = 0, ny = 0, nz = 0;
+
+			if (nidx != -1) {
+				onx = vertices[nidx];
+				ony = vertices[nidx + 1];
+				onz = vertices[nidx + 2];
+			}
+
+			for (int j = 0; j < boneIndices.length; j++) {
+				int boneIndex = boneIndices[j];
+				float weight = boneWeights[j];
+				v.set(ox, oy, oz);
+				v.mul(boneMatrices.get(boneIndex));
+				x += v.x * weight;
+				y += v.y * weight;
+				z += v.z * weight;
+
+				if (nidx != -1) {
+					v.set(onx, ony, onz);
+					v.rot(boneMatrices.get(boneIndex));
+					nx += v.x * weight;
+					ny += v.y * weight;
+					nz += v.z * weight;
+				}
+			}
+
+			skinnedVertices[idx] = x;
+			skinnedVertices[idx + 1] = y;
+			skinnedVertices[idx + 2] = z;
+
+			if (nidx != -1) {
+				skinnedVertices[nidx] = nx;
+				skinnedVertices[nidx + 1] = ny;
+				skinnedVertices[nidx + 2] = nz;
+			}
+		}
+
+		subMesh.mesh.setVertices(skinnedVertices);
+	}
+
+	@Override
+	public void render () {
+		int len = subMeshes.length;
+		for (int i = 0; i < len; i++) {
+			SkeletonSubMesh subMesh = subMeshes[i];
+			if (i == 0) {
+				subMesh.material.bind();
+			} else if (!subMeshes[i - 1].material.equals(subMesh.material)) {
+				subMesh.material.bind();
+			}
+			subMesh.mesh.render(subMesh.primitiveType);
+		}
+	}
+
+	@Override
+	public void render (ShaderProgram program) {
+		int len = subMeshes.length;
+		for (int i = 0; i < len; i++) {
+			SkeletonSubMesh subMesh = subMeshes[i];
+			if (i == 0) {
+				subMesh.material.bind(program);
+			} else if (!subMeshes[i - 1].material.equals(subMesh.material)) {
+				subMesh.material.bind(program);
+			}
+			subMesh.mesh.render(program, subMesh.primitiveType);
+		}
+	}
+
+	@Override
+	public void setMaterials (Material... materials) {
+		if (materials.length != subMeshes.length)
+			throw new UnsupportedOperationException("number of materials must equal number of sub-meshes");
+		int len = materials.length;
+		for (int i = 0; i < len; i++) {
+			subMeshes[i].material = materials[i];
+		}
+	}
+
+	@Override
+	public void setMaterial (Material material) {
+		int len = subMeshes.length;
+		for (int i = 0; i < len; i++) {
+			subMeshes[i].material = material;
+		}
+	}
+
+	@Override
+	public SubMesh getSubMesh (String name) {
+		int len = subMeshes.length;
+		for (int i = 0; i < len; i++) {
+			if (subMeshes[i].name.equals(name)) return subMeshes[i];
+		}
+		return null;
+	}
+
+	@Override
+	public SubMesh[] getSubMeshes () {
+		return subMeshes;
+	}
+
+	@Override
+	public SkeletonAnimation getAnimation (String name) {
+		return skeleton.animations.get(name);
+	}
+
+	// FIXME, ugh...
+	protected SkeletonAnimation[] animations;
+
+	@Override
+	public SkeletonAnimation[] getAnimations () {
+		if (animations == null || animations.length != skeleton.animations.size) {
+			animations = new SkeletonAnimation[skeleton.animations.size];
+			int i = 0;
+			for (SkeletonAnimation anim : skeleton.animations.values()) {
+				animations[i++] = anim;
+			}
+		}
+		return animations;
+	}
+
+	@Override
+	public Model getSubModel (String... subMeshNames) {
+		// FIXME
+		return null;
+	}
+
+	private final static BoundingBox tmpBox = new BoundingBox();
+
+	@Override
+	public void getBoundingBox (BoundingBox bbox) {
+		bbox.inf();
+		for (int i = 0; i < subMeshes.length; i++) {
+			subMeshes[i].mesh.calculateBoundingBox(tmpBox);
+			bbox.ext(tmpBox);
+		}
+	}
+
+	@Override
+	public void dispose () {
+		for (int i = 0; i < subMeshes.length; i++) {
+			subMeshes[i].mesh.dispose();
+		}
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonModelGpuSkinned.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonModelGpuSkinned.java
new file mode 100644
index 0000000..4f55268
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonModelGpuSkinned.java
@@ -0,0 +1,121 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+package com.badlogic.gdx.graphics.g3d.model.skeleton;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.Mesh;
+import com.badlogic.gdx.graphics.VertexAttribute;
+import com.badlogic.gdx.graphics.VertexAttributes;
+import com.badlogic.gdx.graphics.VertexAttributes.Usage;
+import com.badlogic.gdx.graphics.g3d.model.skeleton.Skeleton;
+import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonModel;
+import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonSubMesh;
+
+public class SkeletonModelGpuSkinned extends SkeletonModel {
+	public final static String BoneIndexAttribue = "a_boneIndex";
+	public final static String BoneWeightAttribue = "a_boneWeight";
+
+	public SkeletonModelGpuSkinned(Skeleton skeleton, SkeletonSubMesh[] subMeshes) {
+		super(skeleton,subMeshes);
+	}
+	
+	// Factory Method to create a SkeletonModelGpuSkinned from a SkeletonModel
+	// This will destroy the skeletonModel passed in.
+	public static SkeletonModel CreateFromSkeletonModel(SkeletonModel skeletonModel){
+		if (Gdx.gl20 == null){
+			return skeletonModel;
+		}
+		SkeletonModelGpuSkinned model = new SkeletonModelGpuSkinned(skeletonModel.skeleton, skeletonModel.subMeshes);
+		model.setupGpuSkin();
+		return model;
+	}
+	
+	public void setupGpuSkin(){
+		for (int i = 0; i < subMeshes.length; i++) {
+			setupGpuSkin(subMeshes[i]);
+		}
+	}
+	
+	private void setupGpuSkin(SkeletonSubMesh subMesh){
+		VertexAttributes oldAttributes =  subMesh.mesh.getVertexAttributes();
+		final int oldAttributeCount = oldAttributes.size();
+		VertexAttribute[] attributeArray = new VertexAttribute[oldAttributeCount+2];
+		for(int i=0;i<oldAttributeCount;i++){
+			attributeArray[i] = oldAttributes.get(i);
+		}
+		final int boneIndex = oldAttributeCount;
+		final int weightIndex = oldAttributeCount+1;
+		attributeArray[boneIndex] = new VertexAttribute(Usage.Generic, 4, BoneIndexAttribue);
+		attributeArray[weightIndex] = new VertexAttribute(Usage.Generic, 4, BoneWeightAttribue);
+		VertexAttributes newAttributes = new VertexAttributes(attributeArray);
+		
+		//TODO: not sure if I want to generate a new mesh. But VertexAttributes was final inside mesh
+		Mesh newMesh = new Mesh(true, subMesh.mesh.getMaxVertices(), subMesh.mesh.getMaxIndices(), newAttributes);
+		
+		final int stride = subMesh.mesh.getVertexSize() / 4;
+		final int newStride = newMesh.getVertexSize() / 4;
+		final int numVertices = subMesh.mesh.getNumVertices();
+		int idx = 0;
+		int newIdx = 0;
+		int bidx = -1;
+		int widx = -1;
+		for(int i=0;i<newAttributes.size();i++)
+		{
+			VertexAttribute a = newAttributes.get(i);
+			if(a.alias.equals(BoneIndexAttribue)){
+				bidx = a.offset/4;
+			} else if(a.alias.equals(BoneWeightAttribue)){
+				widx = a.offset/4;
+			}
+		}
+		
+		if(bidx <0 || widx < 0){
+			throw new IllegalArgumentException("Need Shader with bone index and bone wieght vectors to use GPU skinning");
+		}
+		
+		final float[] vertices = subMesh.vertices;
+		final float[] skinnedVertices = new float[newStride * numVertices];
+
+		for (int i = 0; i < numVertices; i++, idx += stride, newIdx += newStride, bidx += newStride, widx += newStride) {
+			final int[] boneIndices = subMesh.boneAssignments[i];
+			final float[] boneWeights = subMesh.boneWeights[i];
+			
+			System.arraycopy(vertices, idx, skinnedVertices, newIdx, stride);
+			
+			skinnedVertices[bidx] = boneIndices.length>0?boneIndices[0]:0;
+			skinnedVertices[bidx + 1] = boneIndices.length>1?boneIndices[1]:0;
+			skinnedVertices[bidx + 2] = boneIndices.length>2?boneIndices[2]:0;
+			skinnedVertices[bidx + 3] = boneIndices.length>3?boneIndices[3]:0;
+			
+			skinnedVertices[widx] = boneWeights.length>0?boneWeights[0]:0;
+			skinnedVertices[widx + 1] = boneWeights.length>1?boneWeights[1]:0;
+			skinnedVertices[widx + 2] = boneWeights.length>2?boneWeights[2]:0;
+			skinnedVertices[widx + 3] = boneWeights.length>3?boneWeights[3]:0;
+		}
+
+		newMesh.setVertices(skinnedVertices);
+		newMesh.setIndices(subMesh.indices);
+		subMesh.mesh.dispose();
+		subMesh.mesh = newMesh;
+		subMesh.skinnedVertices = null;
+		subMesh.vertices = skinnedVertices;
+	}
+	
+	@Override
+	public void setAnimation(String animation, float time, boolean loop) {
+		skeleton.setAnimation(animation, time);
+	}
+}
\ No newline at end of file
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonSubMesh.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonSubMesh.java
new file mode 100644
index 0000000..3752794
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/skeleton/SkeletonSubMesh.java
@@ -0,0 +1,49 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.model.skeleton;
+
+import com.badlogic.gdx.graphics.Mesh;
+import com.badlogic.gdx.graphics.g3d.model.SubMesh;
+import com.badlogic.gdx.math.collision.BoundingBox;
+
+public class SkeletonSubMesh extends SubMesh {
+
+	public SkeletonSubMesh (String name, Mesh mesh, int primitiveType) {
+		super(name, mesh, primitiveType);
+	}
+
+	public short[] indices;
+	public float[] vertices;
+	public float[] skinnedVertices;
+
+	public int[][] boneAssignments;
+	public float[][] boneWeights;
+
+	@Override
+	public void getBoundingBox (BoundingBox bbox) {
+		mesh.calculateBoundingBox(bbox);
+	}
+
+	public void setVertices (float[] vertices) {
+		this.vertices = vertices;
+	}
+
+	public void setIndices (short[] indices) {
+		this.indices = indices;
+	}
+
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/still/StillModel.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/still/StillModel.java
new file mode 100644
index 0000000..91c1eb2
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/still/StillModel.java
@@ -0,0 +1,123 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.model.still;
+
+import java.util.ArrayList;
+
+import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.graphics.g3d.model.Model;
+import com.badlogic.gdx.graphics.g3d.model.SubMesh;
+import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.math.collision.BoundingBox;
+
+public class StillModel implements Model {
+	final public StillSubMesh[] subMeshes;
+
+	public StillModel (SubMesh... subMeshes) {
+		this.subMeshes = new StillSubMesh[subMeshes.length];
+		for (int i = 0; i < subMeshes.length ; ++i) {
+			this.subMeshes[i] = (StillSubMesh)subMeshes[i];
+		}	
+	}
+
+	@Override
+	public void render () {
+		int len = subMeshes.length;
+		for (int i = 0; i < len; i++) {
+			StillSubMesh subMesh = subMeshes[i];
+			if (i == 0) {
+				subMesh.material.bind();
+			} else if (!subMeshes[i - 1].material.equals(subMesh.material)) {
+				subMesh.material.bind();
+			}
+			subMesh.mesh.render(subMesh.primitiveType);
+		}
+	}
+
+	@Override
+	public void render (ShaderProgram program) {
+		int len = subMeshes.length;
+		for (int i = 0; i < len; i++) {
+			StillSubMesh subMesh = subMeshes[i];
+			if (i == 0) {
+				subMesh.material.bind(program);
+			} else if (!subMeshes[i - 1].material.equals(subMesh.material)) {
+				subMesh.material.bind(program);
+			}
+			subMesh.mesh.render(program, subMesh.primitiveType);
+		}
+	}
+
+	@Override
+	public Model getSubModel (String... subMeshNames) {
+		ArrayList<SubMesh> subMeshes = new ArrayList<SubMesh>();
+		for (String name : subMeshNames)
+			for (StillSubMesh subMesh : this.subMeshes)
+				if (name.equals(subMesh.name)) subMeshes.add(subMesh);
+		if (subMeshes.size() > 0) return new StillModel(subMeshes.toArray(new StillSubMesh[subMeshes.size()]));
+		return null;
+	}
+
+	@Override
+	public StillSubMesh getSubMesh (String name) {
+		for (StillSubMesh subMesh : subMeshes) {
+			if (subMesh.name.equals(name)) return subMesh;
+		}
+		return null;
+	}
+
+	@Override
+	public SubMesh[] getSubMeshes () {
+		return subMeshes;
+	}
+
+	@Override
+	public void setMaterials (Material... materials) {
+		if (materials.length != subMeshes.length)
+			throw new UnsupportedOperationException("number of materials must equal number of sub-meshes");
+		int len = materials.length;
+		for (int i = 0; i < len; i++) {
+			subMeshes[i].material = materials[i];
+		}
+	}
+
+	@Override
+	public void setMaterial (Material material) {
+		int len = subMeshes.length;
+		for (int i = 0; i < len; i++) {
+			subMeshes[i].material = material;
+		}
+	}
+
+	private final static BoundingBox tmpBox = new BoundingBox();
+
+	@Override
+	public void getBoundingBox (BoundingBox bbox) {
+		bbox.inf();
+		for (int i = 0; i < subMeshes.length; i++) {
+			subMeshes[i].mesh.calculateBoundingBox(tmpBox);
+			bbox.ext(tmpBox);
+		}
+	}
+
+	@Override
+	public void dispose () {
+		for (int i = 0; i < subMeshes.length; i++) {
+			subMeshes[i].mesh.dispose();
+		}
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/still/StillSubMesh.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/still/StillSubMesh.java
new file mode 100644
index 0000000..3150021
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/still/StillSubMesh.java
@@ -0,0 +1,39 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.graphics.g3d.model.still;
+
+import com.badlogic.gdx.graphics.Mesh;
+import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.graphics.g3d.model.SubMesh;
+import com.badlogic.gdx.math.collision.BoundingBox;
+
+public class StillSubMesh extends SubMesh {
+
+	public StillSubMesh (String name, Mesh mesh, int primitiveType, Material material) {
+		super(name, mesh, primitiveType, material);
+	}
+	
+	public StillSubMesh (String name, Mesh mesh, int primitiveType) {
+		super(name, mesh, primitiveType);
+	}
+
+	@Override
+	public void getBoundingBox (BoundingBox bbox) {
+		mesh.calculateBoundingBox(bbox);
+	}
+
+}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java
deleted file mode 100644
index 6834703..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/BaseShader.java
+++ /dev/null
@@ -1,139 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.shaders;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.Camera;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.VertexAttributes;
-import com.badlogic.gdx.graphics.g3d.Renderable;
-import com.badlogic.gdx.graphics.g3d.Shader;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.utils.RenderContext;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
-import com.badlogic.gdx.math.Matrix3;
-import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-import com.badlogic.gdx.utils.Pool;
-
-public abstract class BaseShader implements Shader {
-	private static class UniformEntry {
-		public UniformEntry () {}
-		public String name;
-		public long material;
-		public long attribute;
-		public long userFlag;
-		public final static Pool<UniformEntry> pool = new Pool<UniformEntry>() {
-			@Override
-			protected UniformEntry newObject () {
-				return new UniformEntry();
-			}
-		};
-	}
-	private final Array<UniformEntry> uniformEntries = new Array<UniformEntry>();
-	private int uniformLocations[];
-	private ShaderProgram program;
-
-	/** Register a uniform which might be used by this shader. Only possible before the call to init().
-	 * @return The ID of the uniform to use in this shader. */
-	protected int registerUniform(final UniformEntry entry) {
-		if (program != null)
-			throw new GdxRuntimeException("Cannot register uniforms after initialization");
-		uniformEntries.add(entry);
-		return uniformEntries.size - 1;
-	}
-	
-	protected int registerUniform(final String name, final long material, final long attribute, final long userFlag) {
-		UniformEntry entry = UniformEntry.pool.obtain();
-		entry.name = name;
-		entry.material = material;
-		entry.attribute = attribute;
-		entry.userFlag = userFlag;
-		return registerUniform(entry);
-	}
-	
-	protected int registerUniform(final String name, final long material, final long attribute) {
-		return registerUniform(name, material, attribute, 0);
-	}
-	
-	protected int registerUniform(final String name, final long material) {
-		return registerUniform(name, material, 0, 0);
-	}
-	
-	protected int registerUniform(final String name) {
-		return registerUniform(name, 0, 0, 0);
-	}
-	
-	/** Initialize this shader, causing all registered uniforms/attributes to be fetched. */
-	protected void init(final ShaderProgram program, final long material, final long attributes, final long userMask) {
-		if (this.program != null)
-			throw new GdxRuntimeException("Already initialized");
-		if (!program.isCompiled())
-			throw new GdxRuntimeException(program.getLog());
-		this.program = program;
-		uniformLocations = new int[uniformEntries.size];
-		for (int i = 0; i < uniformLocations.length; i++) {
-			UniformEntry entry = uniformEntries.get(i);
-			if (((material & entry.material) == entry.material) && 
-				((attributes & entry.attribute) == entry.attribute) && 
-				((userMask & entry.userFlag) == entry.userFlag))  {
-				Gdx.app.log("Test", "Fetching uniform: "+entry.name);
-				uniformLocations[i] = program.fetchUniformLocation(entry.name, false);
-			} else
-				uniformLocations[i] = -1;
-		}
-		UniformEntry.pool.freeAll(uniformEntries);
-		uniformEntries.clear();
-	}
-	
-	@Override
-	public void dispose () {
-		program = null;
-		uniformLocations = null;
-	}
-	
-	/** Whether this Shader instance contains the specified uniform. */
-	protected boolean hasUniform(int what) {
-		return uniformLocations[what] >= 0;
-	}
-	
-	/** The location of the specified attribute or uniform, or negative if not available. */
-	protected int loc(int what) {
-		return uniformLocations[what];
-	}
-	
-	protected boolean set(int what, final Matrix4 value) {
-		if (uniformLocations[what] < 0)
-			return false;
-		program.setUniformMatrix(uniformLocations[what], value);
-		return true;
-	}
-	
-	protected boolean set(int what, final Matrix3 value) {
-		if (uniformLocations[what] < 0)
-			return false;
-		program.setUniformMatrix(uniformLocations[what], value);
-		return true;
-	}
-	
-	protected boolean set(int what, final Vector3 value) {
-		if (uniformLocations[what] < 0)
-			return false;
-		program.setUniformf(uniformLocations[what], value);
-		return true;
-	}
-	
-	protected boolean set(int what, final Color value) {
-		if (uniformLocations[what] < 0)
-			return false;
-		program.setUniformf(uniformLocations[what], value);
-		return true;
-	}
-	
-	protected boolean set(int what, final float value) {
-		if (uniformLocations[what] < 0)
-			return false;
-		program.setUniformf(uniformLocations[what], value);
-		return true;
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
deleted file mode 100644
index e99ae5f..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/DefaultShader.java
+++ /dev/null
@@ -1,418 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.shaders;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.Camera;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.VertexAttributes;
-import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Light;
-import com.badlogic.gdx.graphics.g3d.Renderable;
-import com.badlogic.gdx.graphics.g3d.Shader;
-import com.badlogic.gdx.graphics.g3d.lights.AmbientCubemap;
-import com.badlogic.gdx.graphics.g3d.lights.DirectionalLight;
-import com.badlogic.gdx.graphics.g3d.lights.Lights;
-import com.badlogic.gdx.graphics.g3d.lights.PointLight;
-import com.badlogic.gdx.graphics.g3d.materials.BlendingAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.FloatAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
-import com.badlogic.gdx.graphics.g3d.utils.RenderContext;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
-import com.badlogic.gdx.math.MathUtils;
-import com.badlogic.gdx.math.Matrix3;
-import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-
-public class DefaultShader extends BaseShader {
-	/** Note on shadow mapping:
-<kalle_h> so api could check if depth textures are avaible
-<kalle_h> if yes use normal path
-<kalle_h> and if not then use rgb888
-<kalle_h> then pack depth to those 24bits
-<kalle_h> its quite much slower tought
-<Xoppa> ok, thanx, would you recommend vsm?
-<kalle_h> its quite leaky
-<kalle_h> hard to make it work for every cases
-	 */
-	
-	private static String defaultVertexShader = null;
-	public final static String getDefaultVertexShader() {
-		if (defaultVertexShader == null)
-			defaultVertexShader = Gdx.files.classpath("com/badlogic/gdx/graphics/g3d/shaders/default.vertex.glsl").readString();
-		return defaultVertexShader;
-	}
-	
-	private static String defaultFragmentShader = null;
-	public final static String getDefaultFragmentShader() {
-		if (defaultFragmentShader == null)
-			defaultFragmentShader = Gdx.files.classpath("com/badlogic/gdx/graphics/g3d/shaders/default.fragment.glsl").readString();
-		return defaultFragmentShader;
-	}
-	
-	protected static long implementedFlags = BlendingAttribute.Type | TextureAttribute.Diffuse | ColorAttribute.Diffuse | 
-		ColorAttribute.Specular | FloatAttribute.Shininess;
-	
-	public static boolean ignoreUnimplemented = true;
-	
-	// Global uniforms
-	protected final int u_projTrans					= registerUniform("u_projTrans");
-	protected final int u_cameraPosition			= registerUniform("u_cameraPosition");
-	protected final int u_cameraDirection			= registerUniform("u_cameraDirection");
-	protected final int u_cameraUp					= registerUniform("u_cameraUp");
-	// Object uniforms
-	protected final int u_modelTrans					= registerUniform("u_modelTrans");
-	protected final int u_localTrans					= registerUniform("u_localTrans");
-	protected final int u_worldTrans					= registerUniform("u_worldTrans");
-	protected final int u_normalMatrix				= registerUniform("u_normalMatrix", 0, Usage.Normal);
-	protected final int u_bones						= registerUniform("u_bones");
-	// Material uniforms
-	protected final int u_shininess					= registerUniform("u_shininess", FloatAttribute.Shininess);
-	protected final int u_diffuseColor				= registerUniform("u_diffuseColor", ColorAttribute.Diffuse);
-	protected final int u_diffuseTexture			= registerUniform("u_diffuseTexture", TextureAttribute.Diffuse);
-	protected final int u_specularColor				= registerUniform("u_specularColor", ColorAttribute.Specular);
-	protected final int u_specularTexture			= registerUniform("u_specularTexture", TextureAttribute.Specular);
-	// Lighting uniforms
-	protected final int u_ambientLight				= registerUniform("u_ambientLight");
-	protected final int u_ambientCubemap			= registerUniform("u_ambientCubemap");
-	protected final int u_dirLights0color			= registerUniform("u_dirLights[0].color");
-	protected final int u_dirLights0direction		= registerUniform("u_dirLights[0].direction");
-	protected final int u_dirLights1color			= registerUniform("u_dirLights[1].color");
-	protected final int u_pointLights0color		= registerUniform("u_pointLights[0].color");
-	protected final int u_pointLights0position	= registerUniform("u_pointLights[0].position");
-	protected final int u_pointLights0intensity	= registerUniform("u_pointLights[0].intensity");
-	protected final int u_pointLights1color		= registerUniform("u_pointLights[1].color");
-	// FIXME Cache vertex attribute locations...
-		
-	protected int dirLightsLoc;
-	protected int dirLightsColorOffset;
-	protected int dirLightsDirectionOffset;
-	protected int dirLightsSize;
-	protected int pointLightsLoc;
-	protected int pointLightsColorOffset;
-	protected int pointLightsPositionOffset;
-	protected int pointLightsIntensityOffset;
-	protected int pointLightsSize;
-
-	protected boolean lighting;
-	protected final AmbientCubemap ambientCubemap = new AmbientCubemap();
-	protected final DirectionalLight directionalLights[];
-	protected final PointLight pointLights[];
-	
-	protected final float bones[];
-	
-	protected RenderContext context;
-	protected long mask;
-	protected long attributes;
-	
-	protected final ShaderProgram program;
-	
-	public DefaultShader(final Material material, final VertexAttributes attributes, boolean lighting, int numDirectional, int numPoint, int numSpot, int numBones) {
-		this(getDefaultVertexShader(), getDefaultFragmentShader(), material, attributes, lighting, numDirectional, numPoint, numSpot, numBones);
-	}
-	
-	public DefaultShader(final long mask, final long attributes, boolean lighting, int numDirectional, int numPoint, int numSpot, int numBones) {
-		this(getDefaultVertexShader(), getDefaultFragmentShader(), mask, attributes, lighting, numDirectional, numPoint, numSpot, numBones);
-	}
-
-	public DefaultShader(final String vertexShader, final String fragmentShader, final Material material, final VertexAttributes attributes, boolean lighting, int numDirectional, int numPoint, int numSpot, int numBones) {
-		this(vertexShader, fragmentShader, material.getMask(), getAttributesMask(attributes), lighting, numDirectional, numPoint, numSpot, numBones);
-	}
-
-	public DefaultShader(final String vertexShader, final String fragmentShader, final long mask, final long attributes, boolean lighting, int numDirectional, int numPoint, int numSpot, int numBones) {
-		final String prefix = createPrefix(mask, attributes, lighting, numDirectional, numPoint, numSpot, numBones);
-		Gdx.app.log("Test", "Prefix:\n"+prefix);
-		program = new ShaderProgram(prefix + vertexShader, prefix + fragmentShader);
-		init(program, mask, attributes, 0);
-		this.lighting = lighting;
-		this.directionalLights = new DirectionalLight[lighting && numDirectional > 0 ? numDirectional : 0];
-		for (int i = 0; i < directionalLights.length; i++)
-			directionalLights[i] = new DirectionalLight();
-		this.pointLights = new PointLight[lighting && numPoint > 0 ? numPoint : 0];
-		for (int i = 0; i < pointLights.length; i++)
-			pointLights[i] = new PointLight();
-		bones = new float[numBones > 0 ? numBones * 16 : 0];
-		
-		this.mask = mask;
-		this.attributes = attributes;
-				
-		if (!ignoreUnimplemented && (implementedFlags & mask) != mask)
-			throw new GdxRuntimeException("Some attributes not implemented yet ("+mask+")");
-		
-		dirLightsLoc 					= loc(u_dirLights0color);
-		dirLightsColorOffset			= loc(u_dirLights0color) - dirLightsLoc;
-		dirLightsDirectionOffset 	= loc(u_dirLights0direction) - dirLightsLoc;
-		dirLightsSize 					= loc(u_dirLights1color) - dirLightsLoc;
-		
-		pointLightsLoc 				= loc(u_pointLights0color);
-		pointLightsColorOffset 		= loc(u_pointLights0color) - pointLightsLoc;
-		pointLightsPositionOffset 	= loc(u_pointLights0position) - pointLightsLoc;
-		pointLightsIntensityOffset = loc(u_pointLights0intensity) - pointLightsLoc;
-		pointLightsSize 				= loc(u_pointLights1color)- pointLightsLoc;
-	}
-	
-	protected final static long blendAttributes[] = {
-		Usage.Generic << 1, Usage.Generic << 2, Usage.Generic << 3, Usage.Generic << 4, 
-		Usage.Generic << 5, Usage.Generic << 6, Usage.Generic << 7, Usage.Generic << 8
-	}; // FIXME this is a temporary, quick and dirty fix and should be changed
-	protected static long getAttributesMask(final VertexAttributes attributes) {
-		long result = 0;
-		int currentBone = 0; // FIXME 
-		final int n = attributes.size();
-		for (int i = 0; i < n; i++) {
-			long a = (long)attributes.get(i).usage;
-			if (a == Usage.Generic) { 
-				if (attributes.get(i).alias.startsWith("a_boneWeight"))
-					a = blendAttributes[Integer.parseInt(attributes.get(i).alias.substring(12))];
-			}
-			result |= a;
-		}
-		return result;
-	}
-	
-	private String createPrefix(final long mask, final long attributes, boolean lighting, int numDirectional, int numPoint, int numSpot, int numBones) {
-		String prefix = "";
-		if ((attributes & Usage.Color) == Usage.Color)
-			prefix += "#define colorFlag\n";
-		if ((attributes & Usage.Normal) == Usage.Normal) {
-			prefix += "#define normalFlag\n";
-			if (lighting) {
-				prefix += "#define lightingFlag\n";
-				prefix += "#define ambientCubemapFlag\n";
-				prefix += "#define numDirectionalLights "+numDirectional+"\n";
-				prefix += "#define numPointLights "+numPoint+"\n";
-			}
-		}
-		for (int i = 0; i < blendAttributes.length; i++) {
-			if ((attributes & blendAttributes[i]) == blendAttributes[i])
-				prefix += "#define boneWeight"+i+"Flag\n";
-		}
-		if ((mask & BlendingAttribute.Type) == BlendingAttribute.Type)
-			prefix += "#define "+BlendingAttribute.Alias+"Flag\n";
-		if ((mask & TextureAttribute.Diffuse) == TextureAttribute.Diffuse)
-			prefix += "#define "+TextureAttribute.DiffuseAlias+"Flag\n";
-		if ((mask & ColorAttribute.Diffuse) == ColorAttribute.Diffuse)
-			prefix += "#define "+ColorAttribute.DiffuseAlias+"Flag\n";
-		if ((mask & ColorAttribute.Specular) == ColorAttribute.Specular)
-			prefix += "#define "+ColorAttribute.SpecularAlias+"Flag\n";
-		if ((mask & FloatAttribute.Shininess) == FloatAttribute.Shininess)
-			prefix += "#define "+FloatAttribute.ShininessAlias+"Flag\n";
-		if (numBones > 0)
-			prefix += "#define numBones "+numBones+"\n";
-		return prefix;
-	}
-	
-	@Override
-	public boolean canRender(final Renderable renderable) {
-		return mask == renderable.material.getMask() && 
-			attributes == getAttributesMask(renderable.mesh.getVertexAttributes()) && 
-			(renderable.lights != null) == lighting;
-	}
-	
-	private final boolean can(final long flag) {
-		return (mask & flag) == flag;
-	}
-	
-	@Override
-	public int compareTo(Shader other) {
-		if (other == null) return -1;
-		if (other == this) return 0;
-		return 0; // FIXME compare shaders on their impact on performance
-	}
-	
-	@Override
-	public boolean equals (Object obj) {
-		return (obj instanceof DefaultShader) ? equals((DefaultShader)obj) : false;
-	}
-	
-	public boolean equals (DefaultShader obj) {
-		return (obj == this);
-	}
-
-	private Mesh currentMesh;
-	private Matrix4 currentModelTransform;
-	private Matrix4 currentLocalTransform;
-	private Matrix4 currentWorldTransform;
-	private Matrix4 combinedWorldTransform = new Matrix4();
-	private Matrix3 normalMatrix = new Matrix3();
-	private Camera camera;
-	private final static Matrix4 idtMatrix = new Matrix4();
-	
-	@Override
-	public void begin (final Camera camera, final RenderContext context) {
-		this.context = context;
-		this.camera = camera;
-		program.begin();
-		context.setDepthTest(true, GL10.GL_LEQUAL);
-		
-		set(u_projTrans, camera.combined);
-		set(u_cameraPosition, camera.position);
-		set(u_cameraDirection, camera.direction);
-		set(u_cameraUp, camera.up);
-		
-		for (final DirectionalLight dirLight : directionalLights)
-			dirLight.set(0,0,0,0,-1,0);
-		for (final PointLight pointLight : pointLights)
-			pointLight.set(0,0,0,0,0,0,0);
-		for (int i = 0; i < bones.length; i++)
-			bones[i] = idtMatrix.val[i%16];
-	}
-
-	private void setWorldTransform(final Matrix4 value, final boolean force) {
-		if (force || ((currentWorldTransform == null) != (value == null)) || !currentWorldTransform.equals(value)) { // FIXME implement Matrix4#equals
-			set(u_worldTrans, (currentWorldTransform = value) == null ? idtMatrix : value);
-			set(u_normalMatrix, normalMatrix.set(currentWorldTransform == null ? idtMatrix : currentWorldTransform));
-		}
-	}
-	
-	@Override
-	public void render (final Renderable renderable) {
-		if (!renderable.material.has(BlendingAttribute.Type))
-			context.setBlending(false, GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
-		if (currentLocalTransform != renderable.localTransform)
-			set(u_localTrans, (currentLocalTransform = renderable.localTransform) == null ? idtMatrix : renderable.localTransform);
-		if (currentModelTransform != renderable.modelTransform)
-			set(u_modelTrans, (currentWorldTransform = renderable.modelTransform) == null ? idtMatrix : renderable.modelTransform);
-		if (currentLocalTransform == null && currentModelTransform == null)
-			setWorldTransform(idtMatrix, false);
-		else if (currentLocalTransform == null)
-			setWorldTransform(currentModelTransform, false);
-		else if (currentModelTransform == null)
-			setWorldTransform(currentLocalTransform, false);
-		else
-			setWorldTransform(combinedWorldTransform.set(currentLocalTransform).mul(currentModelTransform), true);
-		bindMaterial(renderable);
-		if (lighting)
-			bindLights(renderable);
-		if (currentMesh != renderable.mesh) {
-			if (currentMesh != null)
-				currentMesh.unbind(program);
-			renderable.mesh.setAutoBind(false); // FIXME this doesn't belong here
-			(currentMesh = renderable.mesh).bind(program);
-		}
-		if (hasUniform(u_bones)) {
-			for (int i = 0; i < bones.length; i++) {
-				final int idx = i/16;
-				bones[i] = (renderable.bones == null || idx >= renderable.bones.length || renderable.bones[idx] == null) ? 
-					idtMatrix.val[i%16] : renderable.bones[idx].val[i%16];
-			}
-			program.setUniformMatrix4fv(loc(u_bones), bones, 0, bones.length);
-		}
-		renderable.mesh.render(program, renderable.primitiveType, renderable.meshPartOffset, renderable.meshPartSize);
-	}
-
-	@Override
-	public void end () {
-		if (currentMesh != null) {
-			currentMesh.unbind(program);
-			currentMesh = null;
-		}
-		currentModelTransform = null;
-		currentTextureAttribute = null;
-		currentMaterial = null;
-		program.end();
-	}
-	
-	Material currentMaterial;
-	private final void bindMaterial(final Renderable renderable) {
-		if (currentMaterial == renderable.material)
-			return;
-		currentMaterial = renderable.material;
-		for (Material.Attribute attr : currentMaterial) {
-			final long t = attr.type;
-			if (BlendingAttribute.is(t))
-				context.setBlending(true, ((BlendingAttribute)attr).sourceFunction, ((BlendingAttribute)attr).destFunction);
-			else if (ColorAttribute.is(t)) {
-				ColorAttribute col = (ColorAttribute)attr;
-				if ((t & ColorAttribute.Diffuse) == ColorAttribute.Diffuse)
-					set(u_diffuseColor, col.color);
-				else if ((t & ColorAttribute.Specular) == ColorAttribute.Specular)
-					set(u_specularColor, col.color);
-			}
-			else if (TextureAttribute.is(t)) {
-				TextureAttribute tex = (TextureAttribute)attr;
-				if ((t & TextureAttribute.Diffuse) == TextureAttribute.Diffuse)
-					bindTextureAttribute(loc(u_diffuseTexture), tex);
-				// TODO else if (..)
-			}
-			else if ((t & FloatAttribute.Shininess) == FloatAttribute.Shininess)
-				set(u_shininess, ((FloatAttribute)attr).value);
-			else if(!ignoreUnimplemented)
-					throw new GdxRuntimeException("Unknown material attribute: "+attr.toString());
-		}
-	}
-
-	TextureAttribute currentTextureAttribute;
-	private final void bindTextureAttribute(final int uniform, final TextureAttribute attribute) {
-		final int unit = context.textureBinder.bind(attribute.textureDescription);
-		program.setUniformi(uniform, unit);
-		currentTextureAttribute = attribute;
-	}
-	
-	private final Vector3 tmpV1 = new Vector3();
-	private final void bindLights(final Renderable renderable) {
-		final Lights lights = renderable.lights;
-		final Array<DirectionalLight> dirs = lights.directionalLights; 
-		final Array<PointLight> points = lights.pointLights;
-		
-		if (hasUniform(u_ambientCubemap)) {
-			renderable.modelTransform.getTranslation(tmpV1);
-			ambientCubemap.set(lights.ambientLight);
-			
-			for (int i = directionalLights.length; i < dirs.size; i++)
-				ambientCubemap.add(dirs.get(i).color, dirs.get(i).direction);
-			
-			for (int i = pointLights.length; i < points.size; i++)
-				ambientCubemap.add(points.get(i).color, points.get(i).position, tmpV1, points.get(i).intensity);
-			
-			ambientCubemap.clamp();
-			
-			program.setUniform3fv(loc(u_ambientCubemap), ambientCubemap.data, 0, ambientCubemap.data.length);
-		}
-		
-		if (dirLightsLoc >= 0) {
-			for (int i = 0; i < directionalLights.length; i++) {
-				if (dirs == null || i >= dirs.size) {
-					if (directionalLights[i].color.r == 0f && directionalLights[i].color.g == 0f && directionalLights[i].color.b == 0f)
-						continue;
-					directionalLights[i].color.set(0,0,0,1);
-				} else if (directionalLights[i].equals(dirs.get(i)))
-					continue;
-				else
-					directionalLights[i].set(dirs.get(i));
-				
-				int idx = dirLightsLoc + i * dirLightsSize; 
-				program.setUniformf(idx+dirLightsColorOffset, directionalLights[i].color.r, directionalLights[i].color.g, directionalLights[i].color.b);
-				program.setUniformf(idx+dirLightsDirectionOffset, directionalLights[i].direction);
-			}
-		}
-		
-		if (pointLightsLoc >= 0) {
-			for (int i = 0; i < pointLights.length; i++) {
-				if (points == null || i >= points.size) {
-					if (pointLights[i].intensity == 0f)
-						continue;
-					pointLights[i].intensity = 0f;
-				} else if (pointLights[i].equals(points.get(i)))
-					continue;
-				else
-					pointLights[i].set(points.get(i));
-				
-				int idx = pointLightsLoc + i * pointLightsSize;
-				program.setUniformf(idx+pointLightsColorOffset, pointLights[i].color.r, pointLights[i].color.g, pointLights[i].color.b);
-				program.setUniformf(idx+pointLightsPositionOffset, pointLights[i].position);
-				if (pointLightsIntensityOffset >= 0)
-					program.setUniformf(idx+pointLightsIntensityOffset, pointLights[i].intensity);
-			}
-		}
-	}
-
-	@Override
-	public void dispose () {
-		program.dispose();
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/GLES10Shader.java b/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/GLES10Shader.java
deleted file mode 100644
index 1ce439a..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/GLES10Shader.java
+++ /dev/null
@@ -1,175 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.shaders;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.Camera;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g3d.Light;
-import com.badlogic.gdx.graphics.g3d.Renderable;
-import com.badlogic.gdx.graphics.g3d.Shader;
-import com.badlogic.gdx.graphics.g3d.lights.DirectionalLight;
-import com.badlogic.gdx.graphics.g3d.lights.Lights;
-import com.badlogic.gdx.graphics.g3d.lights.PointLight;
-import com.badlogic.gdx.graphics.g3d.materials.BlendingAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
-import com.badlogic.gdx.graphics.g3d.utils.RenderContext;
-import com.badlogic.gdx.math.MathUtils;
-import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-
-public class GLES10Shader implements Shader{
-	private Camera camera;
-	private RenderContext context;
-	private Matrix4 currentTransform;
-	private Material currentMaterial;
-	private Texture currentTexture0;
-	private Mesh currentMesh;
-
-	public GLES10Shader() {
-		if (Gdx.gl10 == null)
-			throw new GdxRuntimeException("This shader requires OpenGL ES 1.x");
-	}
-	
-	@Override
-	public boolean canRender(final Renderable renderable) {
-		return true;
-	}
-	
-	@Override
-	public int compareTo(Shader other) {
-		// TODO Auto-generated method stub
-		return 0;
-	}
-	
-	@Override
-	public boolean equals (Object obj) {
-		return (obj instanceof GLES10Shader) ? equals((GLES10Shader)obj) : false;
-	}
-	
-	public boolean equals (GLES10Shader obj) {
-		return (obj == this);
-	}
-	
-	@Override
-	public void begin (final Camera camera, final RenderContext context) {
-		this.context = context;
-		this.camera = camera;
-		context.setDepthTest(true, GL10.GL_LEQUAL);
-		Gdx.gl10.glMatrixMode(GL10.GL_PROJECTION);
-		Gdx.gl10.glLoadMatrixf(camera.combined.val, 0);
-		Gdx.gl10.glMatrixMode(GL10.GL_MODELVIEW);
-	}
-
-	private final float[] lightVal = {0,0,0,0};
-	private final float[] zeroVal4 = {0,0,0,0};
-	private void bindLights(Lights lights) {
-		if (lights == null) {
-			Gdx.gl10.glDisable(GL10.GL_LIGHTING);
-			return;
-		}
-		Gdx.gl10.glEnable(GL10.GL_LIGHTING);
-		Gdx.gl10.glEnable(GL10.GL_LIGHT0);
-		Gdx.gl10.glLightfv(GL10.GL_LIGHT0, GL10.GL_AMBIENT, getValues(lightVal, lights.ambientLight), 0);
-		int idx=1;
-		Gdx.gl10.glPushMatrix();
-		Gdx.gl10.glLoadIdentity();
-		for (int i = 0; i < lights.directionalLights.size && idx < 8; i++) {
-			final DirectionalLight light = lights.directionalLights.get(i);
-			Gdx.gl10.glEnable(GL10.GL_LIGHT0+idx);
-			Gdx.gl10.glLightfv(GL10.GL_LIGHT0+idx, GL10.GL_DIFFUSE, getValues(lightVal, light.color), 0);
-			Gdx.gl10.glLightfv(GL10.GL_LIGHT0+idx, GL10.GL_POSITION, getValues(lightVal, -light.direction.x, -light.direction.y, -light.direction.z, 0f), 0);
-			Gdx.gl10.glLightf(GL10.GL_LIGHT0+idx, GL10.GL_SPOT_CUTOFF, 180f);
-			Gdx.gl10.glLightf(GL10.GL_LIGHT0+idx, GL10.GL_CONSTANT_ATTENUATION, 1f);
-			Gdx.gl10.glLightf(GL10.GL_LIGHT0+idx, GL10.GL_LINEAR_ATTENUATION, 0f);
-			Gdx.gl10.glLightf(GL10.GL_LIGHT0+idx, GL10.GL_QUADRATIC_ATTENUATION, 0f);
-			idx++;
-		}
-		for (int i = 0; i < lights.pointLights.size && idx < 8; i++) {
-			Gdx.gl10.glEnable(GL10.GL_LIGHT0+idx);
-			final PointLight light = lights.pointLights.get(i);
-			Gdx.gl10.glLightfv(GL10.GL_LIGHT0+idx, GL10.GL_DIFFUSE, getValues(lightVal, light.color), 0);
-			Gdx.gl10.glLightfv(GL10.GL_LIGHT0+idx, GL10.GL_POSITION, getValues(lightVal, light.position.x, light.position.y, light.position.z, 1f), 0);
-			Gdx.gl10.glLightf(GL10.GL_LIGHT0+idx, GL10.GL_SPOT_CUTOFF, 180f);
-			Gdx.gl10.glLightf(GL10.GL_LIGHT0+idx, GL10.GL_CONSTANT_ATTENUATION, 0f);
-			Gdx.gl10.glLightf(GL10.GL_LIGHT0+idx, GL10.GL_LINEAR_ATTENUATION, 1f/light.intensity);
-			idx++;
-		}
-		while(idx < 8)
-			Gdx.gl10.glDisable(GL10.GL_LIGHT0+(idx++));
-		Gdx.gl10.glPopMatrix();
-	}
-	
-	private final static float[] getValues(final float out[], final float v0, final float v1, final float v2, final float v3) {
-		out[0] = v0;
-		out[1] = v1;
-		out[2] = v2;
-		out[3] = v3;
-		return out;
-	}
-	
-	private final static float[] getValues(final float out[], final Color color) {
-		return getValues(out, color.r, color.g, color.b, color.a);
-	}
-	
-	@Override
-	public void render (final Renderable renderable) {
-		if (currentMaterial != renderable.material) {
-			currentMaterial = renderable.material;
-			if (!currentMaterial.has(BlendingAttribute.Type))
-				context.setBlending(false, GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
-			if (!currentMaterial.has(ColorAttribute.Diffuse))
-				Gdx.gl10.glColor4f(1,1,1,1);
-			if (!currentMaterial.has(TextureAttribute.Diffuse))
-				Gdx.gl10.glDisable(GL10.GL_TEXTURE_2D);
-			for (final Material.Attribute attribute : currentMaterial) {
-				if (attribute.type == BlendingAttribute.Type)
-					context.setBlending(true, ((BlendingAttribute)attribute).sourceFunction, ((BlendingAttribute)attribute).destFunction);
-				else if (attribute.type == ColorAttribute.Diffuse)
-					Gdx.gl10.glColor4f(((ColorAttribute)attribute).color.r, ((ColorAttribute)attribute).color.g, ((ColorAttribute)attribute).color.b, ((ColorAttribute)attribute).color.a);
-				else if (attribute.type == TextureAttribute.Diffuse) {
-					if (currentTexture0 != ((TextureAttribute)attribute).textureDescription.texture)
-						(currentTexture0 = ((TextureAttribute)attribute).textureDescription.texture).bind(0);
-					Gdx.gl10.glEnable(GL10.GL_TEXTURE_2D);
-				}
-			}
-		}
-		if (currentTransform != renderable.modelTransform) { // FIXME mul localtransform
-			if (currentTransform != null)
-				Gdx.gl10.glPopMatrix();
-			currentTransform = renderable.modelTransform;
-			Gdx.gl10.glPushMatrix();
-			Gdx.gl10.glLoadMatrixf(currentTransform.val, 0);
-		}
-		bindLights(renderable.lights);
-		if (currentMesh != renderable.mesh) {
-			if (currentMesh != null)
-				currentMesh.unbind();
-			(currentMesh = renderable.mesh).bind();
-		}
-		renderable.mesh.render(renderable.primitiveType, renderable.meshPartOffset, renderable.meshPartSize);
-	}
-
-	@Override
-	public void end () {
-		if (currentMesh != null)
-			currentMesh.unbind();
-		currentMesh = null;
-		if (currentTransform != null)
-			Gdx.gl10.glPopMatrix();
-		currentTransform = null;
-		currentTexture0 = null;
-		currentMaterial = null;
-		Gdx.gl10.glDisable(GL10.GL_LIGHTING);
-	}
-
-	@Override
-	public void dispose () {
-		// TODO Auto-generated method stub
-		
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/default.fragment.glsl b/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/default.fragment.glsl
deleted file mode 100644
index 76440a1..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/default.fragment.glsl
+++ /dev/null
@@ -1,91 +0,0 @@
-#ifdef GL_ES 
-#define LOWP lowp
-#define MED mediump
-#define HIGH highp
-precision mediump float;
-#else
-#define MED
-#define LOWP
-#endif
-
-#if defined(specularTextureFlag) || defined(specularColorFlag)
-#define specularFlag
-#endif
-
-#ifdef normalFlag
-varying vec3 v_normal;
-#endif
-
-#ifdef colorFlag
-varying vec4 v_color;
-#endif
-
-#if defined(diffuseTextureFlag) || defined(specularTextureFlag)
-varying MED vec2 v_texCoords0;
-#endif
-
-#ifdef diffuseColorFlag
-uniform vec4 u_diffuseColor;
-#endif
-
-#ifdef diffuseTextureFlag
-uniform sampler2D u_diffuseTexture;
-#endif
-
-#ifdef specularColorFlag
-uniform vec4 u_specularColor;
-#endif
-
-#ifdef specularTextureFlag
-uniform sampler2D u_specularTexture;
-#endif
-
-#ifdef lightingFlag
-varying vec3 v_lightDiffuse;
-	#ifdef specularFlag
-	varying vec3 v_lightSpecular;
-	#endif
-#endif
-
-void main() {
-	#if defined(diffuseTextureFlag) && defined(diffuseColorFlag) && defined(colorFlag)
-		vec4 diffuse = texture2D(u_diffuseTexture, v_texCoords0) * u_diffuseColor * v_color;
-	#elif defined(diffuseTextureFlag) && defined(diffuseColorFlag)
-		vec4 diffuse = texture2D(u_diffuseTexture, v_texCoords0);
-	#elif defined(diffuseTextureFlag) && defined(colorFlag)
-		vec4 diffuse = texture2D(u_diffuseTexture, v_texCoords0) * v_color;
-	#elif defined(diffuseTextureFlag)
-		vec4 diffuse = texture2D(u_diffuseTexture, v_texCoords0);
-	#elif defined(diffuseColorFlag) && defined(colorFlag)
-		vec4 diffuse = u_diffuseColor * v_color;
-	#elif defined(diffuseColorFlag)
-		vec4 diffuse = u_diffuseColor;
-	#elif defined(colorFlag)
-		vec4 diffuse = v_color;
-	#else
-		vec4 diffuse = vec4(1.0);
-	#endif
-
-	#ifdef lightingFlag
-		diffuse.rgb *= v_lightDiffuse;
-	#endif
-
-	#if !defined(specularFlag) || !defined(lightingFlag)
-		gl_FragColor.rgb = diffuse.rgb;
-	#else
-		#if defined(specularTextureFlag) && defined(specularColorFlag)
-			vec3 specular = texture2D(u_specularTexture, v_texCoords0).rgb * u_specularColor.rgb * v_lightSpecular;
-		#elif defined(specularTextureFlag)
-			vec3 specular = texture2D(u_specularTexture, v_texCoords0).rgb * v_lightSpecular;
-		#elif defined(specularColorFlag)
-			vec3 specular = u_specularColor.rgb * v_lightSpecular;
-		#else //if defined(lightingFlag)
-			vec3 specular = v_lightSpecular;
-		#endif
-		gl_FragColor.rgb = diffuse.rgb + specular.rgb;
-	#endif
-
-	#ifdef blendedFlag
-		gl_FragColor.a = diffuse.a;
-	#endif
-}
\ No newline at end of file
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/default.vertex.glsl b/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/default.vertex.glsl
deleted file mode 100644
index 2c7c6d6..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/shaders/default.vertex.glsl
+++ /dev/null
@@ -1,242 +0,0 @@
-#if defined(diffuseTextureFlag) || defined(specularTextureFlag)
-#define textureFlag
-#endif
-
-#if defined(specularTextureFlag) || defined(specularColorFlag)
-#define specularFlag
-#endif
-
-attribute vec3 a_position;
-uniform mat4 u_projTrans;
-
-#ifdef colorFlag
-attribute vec4 a_color;
-varying vec4 v_color;
-#endif // colorFlag
-
-#ifdef normalFlag
-attribute vec3 a_normal;
-uniform mat3 u_normalMatrix;
-varying vec3 v_normal;
-#endif // normalFlag
-
-#ifdef textureFlag
-attribute vec2 a_texCoord0;
-varying vec2 v_texCoords0;
-#endif // textureFlag
-
-#ifdef boneWeight0Flag
-#define boneWeightsFlag
-attribute vec2 a_boneWeight0;
-#endif //boneWeight0Flag
-
-#ifdef boneWeight1Flag
-#define boneWeightsFlag
-attribute vec2 a_boneWeight1;
-#endif //boneWeight1Flag
-
-#ifdef boneWeight2Flag
-#define boneWeightsFlag
-attribute vec2 a_boneWeight2;
-#endif //boneWeight2Flag
-
-#ifdef boneWeight3Flag
-#define boneWeightsFlag
-attribute vec2 a_boneWeight3;
-#endif //boneWeight3Flag
-
-#ifdef boneWeight4Flag
-#define boneWeightsFlag
-attribute vec2 a_boneWeight4;
-#endif //boneWeight4Flag
-
-#ifdef boneWeight5Flag
-#define boneWeightsFlag
-attribute vec2 a_boneWeight5;
-#endif //boneWeight5Flag
-
-#ifdef boneWeight6Flag
-#define boneWeightsFlag
-attribute vec2 a_boneWeight6;
-#endif //boneWeight6Flag
-
-#ifdef boneWeight7Flag
-#define boneWeightsFlag
-attribute vec2 a_boneWeight7;
-#endif //boneWeight7Flag
-
-#if defined(numBones) && defined(boneWeightsFlag)
-#if (numBones > 0) 
-#define skinningFlag
-#endif
-#endif
-
-#ifdef skinningFlag
-uniform mat4 u_localTrans;
-uniform mat4 u_modelTrans;
-#else
-uniform mat4 u_worldTrans;
-#endif //skinningFlag
-
-#if defined(numBones)
-#if numBones > 0
-uniform mat4 u_bones[numBones];
-#endif //numBones
-#endif
-
-#ifdef shininessFlag
-uniform float u_shininess;
-#else
-const float u_shininess = 20.0;
-#endif // shininessFlag
-
-#ifdef lightingFlag
-varying vec3 v_lightDiffuse;
-
-#ifdef ambientLightFlag
-uniform vec3 u_ambientLight;
-#endif // ambientLightFlag
-
-#ifdef ambientCubemapFlag
-uniform vec3 u_ambientCubemap[6];
-#endif // ambientCubemapFlag 
-
-#ifdef sphericalHarmonicsFlag
-uniform vec3 u_sphericalHarmonics[9];
-#endif //sphericalHarmonicsFlag
-
-#ifdef specularFlag
-varying vec3 v_lightSpecular;
-uniform vec3 u_cameraPosition;
-#endif // specularFlag
-
-#if defined(numDirectionalLights) && (numDirectionalLights > 0)
-struct DirectionalLight
-{
-	vec3 color;
-	vec3 direction;
-};
-uniform DirectionalLight u_dirLights[numDirectionalLights];
-#endif // numDirectionalLights
-
-#if defined(numPointLights) && (numPointLights > 0)
-struct PointLight
-{
-	vec3 color;
-	vec3 position;
-	float intensity;
-};
-uniform PointLight u_pointLights[numPointLights];
-#endif // numPointLights
-#endif // lightingFlag
-
-void main() {
-	#ifdef textureFlag
-		v_texCoords0 = a_texCoord0;
-	#endif // textureFlag
-	
-	#ifdef colorFlag
-		v_color = a_color;
-	#endif // colorFlag
-	
-	#ifdef skinningFlag
-		mat4 skinning;
-		#ifdef boneWeight0Flag
-			skinning += (a_boneWeight0.y) * u_bones[int(a_boneWeight0.x)];
-		#endif //boneWeight0Flag
-		#ifdef boneWeight1Flag				
-			skinning += (a_boneWeight1.y) * u_bones[int(a_boneWeight1.x)];
-		#endif //boneWeight1Flag
-		#ifdef boneWeight2Flag		
-			skinning += (a_boneWeight2.y) * u_bones[int(a_boneWeight2.x)];
-		#endif //boneWeight2Flag
-		#ifdef boneWeight3Flag
-			skinning += (a_boneWeight3.y) * u_bones[int(a_boneWeight3.x)];
-		#endif //boneWeight3Flag
-		#ifdef boneWeight4Flag
-			skinning += (a_boneWeight4.y) * u_bones[int(a_boneWeight4.x)];
-		#endif //boneWeight4Flag
-		#ifdef boneWeight5Flag
-			skinning += (a_boneWeight5.y) * u_bones[int(a_boneWeight5.x)];
-		#endif //boneWeight5Flag
-		#ifdef boneWeight6Flag
-			skinning += (a_boneWeight6.y) * u_bones[int(a_boneWeight6.x)];
-		#endif //boneWeight6Flag
-		#ifdef boneWeight7Flag
-			skinning += (a_boneWeight7.y) * u_bones[int(a_boneWeight7.x)];
-		#endif //boneWeight7Flag
-	#endif //skinningFlag
-
-	#ifdef skinningFlag
-		vec4 pos = u_modelTrans * ((skinning * u_localTrans) * vec4(a_position, 1.0));
-	#else
-		vec4 pos = u_worldTrans * vec4(a_position, 1.0);
-	#endif
-	gl_Position = u_projTrans * pos; // FIXME dont use a temp pos value (<kalle_h> this causes some vertex yittering with positions as low as 300)
-
-	#if defined(normalFlag) && defined(skinningFlag)
-		v_normal = normalize((skinning * vec4(a_normal, 0.0)).xyz);
-	#elif defined(normalFlag)
-		v_normal = normalize(u_normalMatrix * a_normal);
-	#endif // normalFlag
-
-	#ifdef lightingFlag
-		#ifdef ambientLightFlag
-			v_lightDiffuse = u_ambientLight;
-		#else
-			v_lightDiffuse = vec3(0.0);
-		#endif // ambientLightFlag
-			
-		#ifdef ambientCubemapFlag 		
-			vec3 squaredNormal = v_normal * v_normal;
-			vec3 isPositive  = step(0.0, v_normal);
-			v_lightDiffuse += squaredNormal.x * mix(u_ambientCubemap[0], u_ambientCubemap[1], isPositive.x) +
-					squaredNormal.y * mix(u_ambientCubemap[2], u_ambientCubemap[3], isPositive.y) +
-					squaredNormal.z * mix(u_ambientCubemap[4], u_ambientCubemap[5], isPositive.z);
-		#endif // ambientCubemapFlag
-
-		#ifdef sphericalHarmonicsFlag
-			v_lightDiffuse += u_sphericalHarmonics[0];
-			v_lightDiffuse += u_sphericalHarmonics[1] * normal.x;
-			v_lightDiffuse += u_sphericalHarmonics[2] * normal.y;
-			v_lightDiffuse += u_sphericalHarmonics[3] * normal.z;
-			v_lightDiffuse += u_sphericalHarmonics[4] * (normal.x * normal.z);
-			v_lightDiffuse += u_sphericalHarmonics[5] * (normal.z * normal.y);
-			v_lightDiffuse += u_sphericalHarmonics[6] * (normal.y * normal.x);
-			v_lightDiffuse += u_sphericalHarmonics[7] * (3.0 * normal.z * normal.z - 1.0);
-			v_lightDiffuse += u_sphericalHarmonics[8] * (normal.x * normal.x - normal.y * normal.y);			
-		#endif // sphericalHarmonicsFlag
-		
-		#ifdef specularFlag
-			v_lightSpecular = vec3(0.0);
-			vec3 viewVec = normalize(u_cameraPosition - pos.xyz);
-		#endif // specularFlag
-			
-		#if defined(numDirectionalLights) && (numDirectionalLights > 0) && defined(normalFlag)
-			for (int i = 0; i < numDirectionalLights; i++) {
-				vec3 lightDir = -u_dirLights[i].direction;
-				float NdotL = clamp(dot(v_normal, lightDir), 0.0, 1.0);
-				v_lightDiffuse += u_dirLights[i].color * NdotL;
-				#ifdef specularFlag
-					float halfDotView = dot(v_normal, normalize(lightDir + viewVec));
-					v_lightSpecular += u_dirLights[i].color * clamp(NdotL * pow(halfDotView, u_shininess), 0.0, 1.0);
-				#endif // specularFlag
-			}
-		#endif // numDirectionalLights
-
-		#if defined(numPointLights) && (numPointLights > 0) && defined(normalFlag)
-			for (int i = 0; i < numPointLights; i++) {
-				vec3 lightDir = u_pointLights[i].position - pos.xyz;
-				float dist2 = dot(lightDir, lightDir);
-				lightDir *= inversesqrt(dist2);
-				float NdotL = clamp(dot(v_normal, lightDir), 0.0, 2.0);
-				float falloff = clamp(u_pointLights[i].intensity / (1.0 + dist2), 0.0, 2.0); // FIXME mul intensity on cpu
-				v_lightDiffuse += u_pointLights[i].color * (NdotL * falloff);
-				#ifdef specularFlag
-					float halfDotView = clamp(dot(v_normal, normalize(lightDir + viewVec)), 0.0, 2.0);
-					v_lightSpecular += u_pointLights[i].color * clamp(NdotL * pow(halfDotView, u_shininess) * falloff, 0.0, 2.0);
-				#endif // specularFlag
-			}
-		#endif // numPointLights
-	#endif // lightingFlag
-}
\ No newline at end of file
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/BaseShaderProvider.java b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/BaseShaderProvider.java
deleted file mode 100644
index 56a1d4b..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/BaseShaderProvider.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.utils;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.g3d.Renderable;
-import com.badlogic.gdx.graphics.g3d.Shader;
-import com.badlogic.gdx.utils.Array;
-
-public abstract class BaseShaderProvider implements ShaderProvider {
-	protected Array<Shader> shaders = new Array<Shader>();
-	
-	@Override
-	public Shader getShader (Renderable renderable) {
-		Shader suggestedShader = renderable.shader;
-		if (suggestedShader != null && suggestedShader.canRender(renderable))
-			return suggestedShader;
-		for (int i = 0; i < shaders.size; i++) {
-			final Shader shader = shaders.get(i);
-			if (shader.canRender(renderable))
-				return shader;
-		}
-		final Shader result = createShader(renderable);
-		shaders.add(result);
-		return result;
-	}
-	
-	protected abstract Shader createShader(final Renderable renderable);
-
-	@Override
-	public void dispose () {
-		for(Shader shader: shaders) {
-			shader.dispose();
-		}
-	}
-}
\ No newline at end of file
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/CameraInputController.java b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/CameraInputController.java
deleted file mode 100644
index e9550e4..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/CameraInputController.java
+++ /dev/null
@@ -1,173 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.utils;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Input.Keys;
-import com.badlogic.gdx.InputAdapter;
-import com.badlogic.gdx.Input.Buttons;
-import com.badlogic.gdx.graphics.Camera;
-import com.badlogic.gdx.math.Vector3;
-
-public class CameraInputController extends InputAdapter {
-	/** The button for rotating the camera. */ 
-	public int rotateButton = Buttons.LEFT;
-	/** The angle to rotate when moved the full width or height of the screen. */
-	public float rotateAngle = 360f;
-	/** The button for translating the camera along the up/right plane */
-	public int translateButton = Buttons.RIGHT;
-	/** The units to translate the camera when moved the full width or height of the screen. */
-	public float translateUnits = 10f; // FIXME auto calculate this based on the target
-	/** The button for translating the camera along the direction axis */
-	public int forwardButton = Buttons.MIDDLE;
-	/** The key which must be pressed to activate rotate, translate and forward or 0 to always activate. */ 
-	public int activateKey = 0;
-	/** Indicates if the activateKey is currently being pressed. */
-	protected boolean activatePressed;
-	/** Whether scrolling requires the activeKey to be pressed (false) or always allow scrolling (true). */
-	public boolean alwaysScroll = true;
-	/** The weight for each scrolled amount. */
-	public float scrollFactor = -0.1f;
-	/** Whether to update the camera after it has been changed. */
-	public boolean autoUpdate = true;
-	/** The target to rotate around. */
-	public Vector3 target = new Vector3();
-	/** Whether to update the target on translation */ 
-	public boolean translateTarget = true;
-	/** Whether to update the target on forward */
-	public boolean forwardTarget = true;
-	/** Whether to update the target on scroll */
-	public boolean scrollTarget = false;
-	public int forwardKey = Keys.UP;
-	protected boolean forwardPressed;
-	public int backwardKey = Keys.DOWN;
-	protected boolean backwardPressed;
-	public int rotateRightKey = Keys.RIGHT;
-	protected boolean rotateRightPressed;
-	public int rotateLeftKey = Keys.LEFT;
-	protected boolean rotateLeftPressed;
-	/** The camera. */
-	public Camera camera;
-	/** The current (first) button being pressed. */
-	protected int button = -1;
-	
-	private float startX, startY;
-	private final Vector3 tmpV1 = new Vector3();
-	private final Vector3 tmpV2 = new Vector3();
-	
-	public CameraInputController(final Camera camera) {
-		this.camera = camera;
-	}
-	
-	public void update() {
-		if (rotateRightPressed || rotateLeftPressed || forwardPressed || backwardPressed) {
-			final float delta = Gdx.graphics.getDeltaTime();
-			if (rotateRightPressed)
-				camera.rotate(camera.up, -delta * rotateAngle);
-			if (rotateLeftPressed)
-				camera.rotate(camera.up, delta * rotateAngle);
-			if (forwardPressed) {
-				camera.translate(tmpV1.set(camera.direction).scl(delta * translateUnits));
-				if (forwardTarget)
-					target.add(tmpV1);
-			}
-			if (backwardPressed) {
-				camera.translate(tmpV1.set(camera.direction).scl(-delta * translateUnits));
-				if (forwardTarget)
-					target.add(tmpV1);
-			}
-			if (autoUpdate)
-				camera.update();
-		}
-	}
-	
-	@Override
-	public boolean touchDown (int screenX, int screenY, int pointer, int button) {
-		if (this.button < 0 && (activateKey == 0 || activatePressed)) {
-			startX = screenX;
-			startY = screenY;
-			this.button = button;
-		}
-		return activatePressed;
-	}
-	
-	@Override
-	public boolean touchUp (int screenX, int screenY, int pointer, int button) {
-		if (button == this.button)
-			this.button = -1;
-		return activatePressed;
-	}
-	
-	protected boolean process(float deltaX, float deltaY, int button) {
-		if (button == rotateButton) {
-			tmpV1.set(camera.direction).crs(camera.up).y = 0f;
-			camera.rotateAround(target, tmpV1.nor(), deltaY * rotateAngle);
-			camera.rotateAround(target, Vector3.Y, deltaX * -rotateAngle);
-		} else if (button == translateButton) {
-			camera.translate(tmpV1.set(camera.direction).crs(camera.up).nor().scl(-deltaX * translateUnits));
-			camera.translate(tmpV2.set(camera.up).scl(-deltaY * translateUnits));
-			if (translateTarget)
-				target.add(tmpV1).add(tmpV2);				
-		} else if (button == forwardButton) {
-			camera.translate(tmpV1.set(camera.direction).scl(deltaY * translateUnits));
-			if (forwardTarget)
-				target.add(tmpV1);
-		}
-		if (autoUpdate)
-			camera.update();
-		return true;
-	}
-	
-	@Override
-	public boolean touchDragged (int screenX, int screenY, int pointer) {
-		if (this.button < 0)
-			return false;
-		final float deltaX = (screenX - startX) / Gdx.graphics.getWidth();
-		final float deltaY = (startY - screenY) / Gdx.graphics.getHeight();
-		startX = screenX;
-		startY = screenY;
-		return process(deltaX, deltaY, button);
-	}
-	
-	@Override
-	public boolean scrolled (int amount) {
-		if (!alwaysScroll && activateKey != 0 && !activatePressed)
-			return false;
-		camera.translate(tmpV1.set(camera.direction).scl(amount * scrollFactor * translateUnits));
-		if (scrollTarget)
-			target.add(tmpV1);
-		if (autoUpdate)
-			camera.update();
-		return true;
-	}
-	
-	@Override
-	public boolean keyDown (int keycode) {
-		if (keycode == activateKey)
-			activatePressed = true;
-		if (keycode == forwardKey)
-			forwardPressed = true;
-		else if (keycode == backwardKey)
-			backwardPressed = true;
-		else if (keycode == rotateRightKey)
-			rotateRightPressed = true;
-		else if (keycode == rotateLeftKey)
-			rotateLeftPressed = true;
-		return false;
-	}
-	
-	@Override
-	public boolean keyUp (int keycode) {
-		if (keycode == activateKey) {
-			activatePressed = false;
-			button = -1;
-		}
-		if (keycode == forwardKey)
-			forwardPressed = false;
-		else if (keycode == backwardKey)
-			backwardPressed = false;
-		else if (keycode == rotateRightKey)
-			rotateRightPressed = false;
-		else if (keycode == rotateLeftKey)
-			rotateLeftPressed = false;
-		return false;
-	}
-}
\ No newline at end of file
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultRenderableSorter.java b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultRenderableSorter.java
deleted file mode 100644
index dd63237..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultRenderableSorter.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.utils;
-
-import java.util.Comparator;
-
-import com.badlogic.gdx.graphics.Camera;
-import com.badlogic.gdx.graphics.g3d.Renderable;
-import com.badlogic.gdx.graphics.g3d.materials.BlendingAttribute;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.utils.Array;
-
-public class DefaultRenderableSorter implements RenderableSorter, Comparator<Renderable> {
-	private Camera camera;
-	private final Vector3 tmpV1 = new Vector3();
-	private final Vector3 tmpV2 = new Vector3();
-	
-	@Override
-	public void sort (final Camera camera, final Array<Renderable> renderables) {
-		this.camera = camera;
-		renderables.sort(this);
-	}
-	
-	@Override
-	public int compare (final Renderable o1, final Renderable o2) {
-		final boolean b1 = o1.material.has(BlendingAttribute.Type);
-		final boolean b2 = o2.material.has(BlendingAttribute.Type);
-		if (b1 != b2) 
-			return b1 ? 1 : -1;
-		// FIXME implement better sorting algorithm
-		// final boolean same = o1.shader == o2.shader && o1.mesh == o2.mesh && (o1.lights == null) == (o2.lights == null) && 
-			// o1.material.equals(o2.material);
-		o1.modelTransform.getTranslation(tmpV1);
-		o2.modelTransform.getTranslation(tmpV2);
-		final float dst = camera.position.dst2(tmpV1) - camera.position.dst2(tmpV2);
-		return dst < 0f ? -1 : (dst > 0f ? 1 : 0);
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultShaderProvider.java b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultShaderProvider.java
deleted file mode 100644
index 473cbf0..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultShaderProvider.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.utils;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.g3d.Renderable;
-import com.badlogic.gdx.graphics.g3d.Shader;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.shaders.GLES10Shader;
-import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
-import com.badlogic.gdx.utils.Array;
-
-public class DefaultShaderProvider extends BaseShaderProvider {
-	@Override
-	protected Shader createShader(final Renderable renderable) {
-		Gdx.app.log("DefaultShaderProvider", "Creating new shader");
-		if (Gdx.graphics.isGL20Available())
-			return new DefaultShader(renderable.material, renderable.mesh.getVertexAttributes(), renderable.lights != null, 2, 5, 3, renderable.bones == null ? 0 : 12);
-		return new GLES10Shader();
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultTextureBinder.java b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultTextureBinder.java
deleted file mode 100644
index 80713ad..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/DefaultTextureBinder.java
+++ /dev/null
@@ -1,176 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.utils;
-
-import java.nio.IntBuffer;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.utils.BufferUtils;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-
-/** Class that you assign a range of texture units and binds textures for you within that range.
- * It does some basic usage tracking to avoid unnessecary bind calls. 
- * @author xoppa */
-public final class DefaultTextureBinder implements TextureBinder {
-	public final static int ROUNDROBIN = 0;
-	public final static int WEIGHTED = 1;
-	/** GLES only supports up to 32 textures */
-	public final static int MAX_GLES_UNITS = 32;
-	/** The index of the first exclusive texture unit */
-	private final int offset;
-	/** The amount of exclusive textures that may be used */
-	private final int count;
-	/** The weight added to a texture when its reused */
-	private final int reuseWeight;
-	/** The textures currently exclusive bound */
-	private final TextureDescriptor[] textures;
-	/** The weight (reuseWeight * reused - discarded) of the textures */
-	private final int[] weights;
-	/** The method of binding to use */
-	private final int method;
-	/** Flag to indicate the current texture is reused */
-	private boolean reused;
-	
-	private int reuseCount = 0; // TODO remove debug code
-	private int bindCount = 0; // TODO remove debug code
-	
-	/** Uses all available texture units and reuse weight of 3 */
-	public DefaultTextureBinder(final int method) {
-		this(method, 0);
-	}
-	
-	/** Uses all remaining texture units and reuse weight of 3 */
-	public DefaultTextureBinder(final int method, final int offset) {
-		this(method, offset, getMaxTextureUnits() - offset);
-	}
-	
-	/** Uses reuse weight of 10 */
-	public DefaultTextureBinder(final int method, final int offset, final int count) {
-		this(method, offset, count, 10);
-	}
-	
-	public DefaultTextureBinder(final int method, final int offset, final int count, final int reuseWeight) {
-		final int max = Math.min(getMaxTextureUnits(), MAX_GLES_UNITS - offset);
-		if (offset < 0 || count < 0 || (offset + count) > max || reuseWeight < 1)
-			throw new GdxRuntimeException("Illegal arguments");
-		this.method = method;
-		this.offset = offset;
-		this.count = count;
-		this.textures = new TextureDescriptor[count];
-		for (int i = 0; i < count; i++)
-			this.textures[i] = new TextureDescriptor();
-		this.reuseWeight = reuseWeight;
-		this.weights = (method == WEIGHTED) ? new int[count] : null;
-	}
-
-	private static int getMaxTextureUnits () {
-		IntBuffer buffer = BufferUtils.newIntBuffer(16);
-		if (Gdx.graphics.isGL20Available())
-			Gdx.gl.glGetIntegerv(GL20.GL_MAX_TEXTURE_IMAGE_UNITS, buffer);
-		else
-			Gdx.gl.glGetIntegerv(GL10.GL_MAX_TEXTURE_UNITS, buffer);
-		return buffer.get(0);
-	}
-
-	@Override
-	public void begin () {
-		for(int i = 0; i < count; i++) {
-			textures[i].texture = null;
-			if(weights != null) weights[i] = 0;
-		}
-	}
-
-	@Override
-	public void end () {
-		for(int i = 0; i < count; i++) {
-			if (textures[i].texture != null) {
-				Gdx.gl.glActiveTexture(GL20.GL_TEXTURE0 + i);
-				Gdx.gl.glBindTexture(GL20.GL_TEXTURE_2D, 0);
-				textures[i].texture = null;
-			}
-		}
-		Gdx.gl.glActiveTexture(GL20.GL_TEXTURE0);
-	}
-	
-	/** Binds the texture if needed and sets it active, returns the unit */
-	@Override
-	public final int bind(final TextureDescriptor textureDesc) {
-		return bindTexture(textureDesc, false);
-	}
-
-	private final int bindTexture(final TextureDescriptor textureDesc, final boolean rebind) {
-		int idx, result;
-		reused = false;
-		
-		switch (method) {
-		case ROUNDROBIN: result = offset + (idx = bindTextureRoundRobin(textureDesc.texture)); break;
-		case WEIGHTED: result = offset + (idx = bindTextureWeighted(textureDesc.texture)); break;
-		default: return -1; 
-		}
-		
-		if (reused) {
-			reuseCount++;
-			if (rebind)
-				textureDesc.texture.bind(result);
-			else
-				Gdx.gl.glActiveTexture(GL10.GL_TEXTURE0 + result);
-		} else
-			bindCount++;
-		if (textureDesc.minFilter != GL10.GL_INVALID_VALUE && textureDesc.minFilter != textures[idx].minFilter)
-			Gdx.gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, textures[idx].minFilter = textureDesc.minFilter);
-		if (textureDesc.magFilter != GL10.GL_INVALID_VALUE && textureDesc.magFilter != textures[idx].magFilter)
-			Gdx.gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, textures[idx].magFilter = textureDesc.magFilter);
-		if (textureDesc.uWrap != GL10.GL_INVALID_VALUE && textureDesc.uWrap != textures[idx].uWrap)
-			Gdx.gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S, textures[idx].uWrap = textureDesc.uWrap);
-		if (textureDesc.vWrap != GL10.GL_INVALID_VALUE && textureDesc.vWrap != textures[idx].vWrap)
-			Gdx.gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T, textures[idx].vWrap = textureDesc.vWrap);
-		return result;
-	}
-
-	private int currentTexture = 0;
-	private final int bindTextureRoundRobin(final Texture texture) {
-		for (int i = 0; i < count; i++) {
-			final int idx = (currentTexture + i) % count;
-			if (textures[idx].texture == texture) {
-				reused = true;
-				return idx;
-			}
-		}
-		currentTexture = (currentTexture + 1) % count;
-		textures[currentTexture].texture = texture;
-		texture.bind(offset + currentTexture);
-		return currentTexture;
-	}
-	
-	private final int bindTextureWeighted(final Texture texture) {
-		int result = -1;
-		int weight = weights[0];
-		int windex = 0;
-		for (int i = 0; i < count; i++) {
-			if (textures[i].texture == texture) {
-				result = i;
-				weights[i]+=reuseWeight;
-			} else if (weights[i] < 0 || --weights[i] < weight) {
-				weight = weights[i];
-				windex = i;
-			}
-		}
-		if (result < 0) {
-			textures[windex].texture = texture;
-			weights[windex] = 100;
-			texture.bind(offset + (result = windex));
-		} else 
-			reused = true;
-		return result;
-	}
-	
-	@Override
-	public final int getBindCount() { return bindCount; }
-	
-	@Override
-	public final int getReuseCount() { return reuseCount; }
-	
-	@Override
-	public final void resetCounts() { bindCount = reuseCount = 0; }
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
deleted file mode 100644
index 319dadc..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java
+++ /dev/null
@@ -1,592 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.utils;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.VertexAttributes;
-import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.model.MeshPart;
-import com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder.VertexInfo;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
-import com.badlogic.gdx.math.MathUtils;
-import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.math.Vector2;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.FloatArray;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-import com.badlogic.gdx.utils.Pool;
-import com.badlogic.gdx.utils.Pool.Poolable;
-import com.badlogic.gdx.utils.ShortArray;
-
-/** Class to construct a mesh, optionally splitting it into one or more mesh parts.
- * Before you can call any other method you must call {@link #begin(VertexAttributes)} or {@link #begin(VertexAttributes, int)}. 
- * To use mesh parts you must call {@link #part(String, int)} before you start building the part.
- * The MeshPart itself is only valid after the call to {@link #end()}.
- * @author Xoppa */
-public class MeshBuilder implements MeshPartBuilder {
-	private final VertexInfo vertTmp1 = new VertexInfo();
-	private final VertexInfo vertTmp2 = new VertexInfo();
-	private final VertexInfo vertTmp3 = new VertexInfo();
-	private final VertexInfo vertTmp4 = new VertexInfo();
-	private final VertexInfo vertTmp5 = new VertexInfo();
-	private final VertexInfo vertTmp6 = new VertexInfo();
-	private final VertexInfo vertTmp7 = new VertexInfo();
-	private final VertexInfo vertTmp8 = new VertexInfo();
-	
-	private final Matrix4 matTmp1 = new Matrix4();
-	
-	private final Vector3 tempV1 = new Vector3();
-	private final Vector3 tempV2 = new Vector3();
-	private final Vector3 tempV3 = new Vector3();
-	private final Vector3 tempV4 = new Vector3();
-	private final Vector3 tempV5 = new Vector3();
-	private final Vector3 tempV6 = new Vector3();
-	private final Vector3 tempV7 = new Vector3();
-	private final Vector3 tempV8 = new Vector3();
-	
-	/** The vertex attributes of the resulting mesh */ 
-	private VertexAttributes attributes;
-	/** The vertices to construct, no size checking is done */
-	private FloatArray vertices = new FloatArray();
-	/** The indices to construct, no size checking is done */
-	private ShortArray indices = new ShortArray();
-	/** The size (in number of floats) of each vertex */
-	private int stride;
-	/** The current vertex index, used for indexing */
-	private short vindex;
-	/** The offset in the indices array when begin() was called, used to define a meshpart. */
-	private int istart;
-	/** The offset within an vertex to position */
-	private int posOffset;
-	/** The size (in number of floats) of the position attribute */
-	private int posSize;
-	/** The offset within an vertex to normal, or -1 if not available */
-	private int norOffset;
-	/** The offset within an vertex to color, or -1 if not available */
-	private int colOffset;
-	/** The size (in number of floats) of the color attribute */
-	private int colSize;
-	/** The offset within an vertex to packed color, or -1 if not available */
-	private int cpOffset;
-	/** The offset within an vertex to texture coordinates, or -1 if not available */
-	private int uvOffset;
-	/** The meshpart currently being created */
-	private MeshPart part;
-	/** The parts created between begin and end */
-	private Array<MeshPart> parts = new Array<MeshPart>();
-	/** The color used if no vertex color is specified. */
-	private final Color color = new Color();
-	/** Whether to apply the default color. */
-	private boolean colorSet;
-	/** The current primitiveType */
-	private int primitiveType;
-	// FIXME makes this configurable
-	private float uMin = 0, uMax = 1, vMin = 0, vMax = 1;
-	private float[] vertex;
-	
-	/** @param usage bitwise mask of the {@link com.badlogic.gdx.graphics.VertexAttributes.Usage}, 
-	 * only Position, Color, Normal and TextureCoordinates is supported. */
-	public static VertexAttributes createAttributes(long usage) {
-		final Array<VertexAttribute> attrs = new Array<VertexAttribute>();
-		if ((usage & Usage.Position) == Usage.Position)
-			attrs.add(new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE));
-		if ((usage & Usage.Color) == Usage.Color)
-			attrs.add(new VertexAttribute(Usage.Color, 4, ShaderProgram.COLOR_ATTRIBUTE));
-		if ((usage & Usage.Normal) == Usage.Normal)
-			attrs.add(new VertexAttribute(Usage.Normal, 3, ShaderProgram.NORMAL_ATTRIBUTE));
-		if ((usage & Usage.TextureCoordinates) == Usage.TextureCoordinates)
-			attrs.add(new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE+"0"));
-		final VertexAttribute attributes[] = new VertexAttribute[attrs.size];
-		for (int i = 0; i < attributes.length; i++)
-			attributes[i] = attrs.get(i);
-		return new VertexAttributes(attributes);
-	}
-	
-	/** Begin building a mesh. Call {@link #part(String, int)} to start a {@link MeshPart}.
-	 * @param attributes bitwise mask of the {@link com.badlogic.gdx.graphics.VertexAttributes.Usage}, 
-	 * only Position, Color, Normal and TextureCoordinates is supported. */
-	public void begin(final long attributes) {
-		begin(createAttributes(attributes), 0);
-	}
-	
-	/** Begin building a mesh. Call {@link #part(String, int)} to start a {@link MeshPart}. */
-	public void begin(final VertexAttributes attributes) {
-		begin(attributes, 0);
-	}
-	
-	/** Begin building a mesh.
-	 * @param attributes bitwise mask of the {@link com.badlogic.gdx.graphics.VertexAttributes.Usage}, 
-	 * only Position, Color, Normal and TextureCoordinates is supported. */
-	public void begin(final long attributes, int primitiveType) {
-		begin(createAttributes(attributes), primitiveType);
-	}
-	
-	/** Begin building a mesh */
-	public void begin(final VertexAttributes attributes, int primitiveType) {
-		if (this.attributes != null)
-			throw new RuntimeException("Call end() first");
-		this.attributes = attributes;
-		this.vertices.clear();
-		this.indices.clear();
-		this.parts.clear();
-		this.vindex = 0;
-		this.istart = 0;
-		this.part = null;
-		this.stride = attributes.vertexSize / 4;
-		this.vertex = new float[stride];
-		VertexAttribute a = attributes.findByUsage(Usage.Position);
-		if (a == null)
-			throw new GdxRuntimeException("Cannot build mesh without position attribute");
-		posOffset = a.offset / 4;
-		posSize = a.numComponents;
-		a = attributes.findByUsage(Usage.Normal);
-		norOffset = a == null ? -1 : a.offset / 4;
-		a = attributes.findByUsage(Usage.Color);
-		colOffset = a == null ? -1 : a.offset / 4;
-		colSize = a == null ? 0 : a.numComponents;
-		a = attributes.findByUsage(Usage.ColorPacked);
-		cpOffset = a == null ? -1 : a.offset / 4;
-		a = attributes.findByUsage(Usage.TextureCoordinates);
-		uvOffset = a == null ? -1 : a.offset / 4;
-		setColor(null);
-		this.primitiveType = primitiveType;
-	}
-	
-	private void endpart() {
-		if (part != null) {
-			part.indexOffset = istart;
-			part.numVertices = indices.size - istart;
-			istart = indices.size;
-			part = null;
-		}
-	}
-	
-	/** Starts a new MeshPart. The mesh part is not usable until end() is called */
-	public MeshPart part(final String id, int primitiveType) {
-		if (this.attributes == null)
-			throw new RuntimeException("Call begin() first");
-		endpart();
-		
-		part = new MeshPart();
-		part.id = id;
-		this.primitiveType = part.primitiveType = primitiveType;
-		parts.add(part);
-		
-		setColor(null);
-		
-		return part;
-	}
-	
-	/** End building the mesh and returns the mesh */
-	public Mesh end() {
-		if (this.attributes == null)
-			throw new RuntimeException("Call begin() first");
-		endpart();
-		
-		final Mesh mesh = new Mesh(true, vertices.size, indices.size, attributes);
-		mesh.setVertices(vertices.items, 0, vertices.size);
-		mesh.setIndices(indices.items, 0, indices.size);
-		
-		for (MeshPart p : parts)
-			p.mesh = mesh;
-		parts.clear();
-		
-		attributes = null;
-		vertices.clear();
-		indices.clear();
-		
-		return mesh;
-	}
-	
-	@Override
-	public VertexAttributes getAttributes() {
-		return attributes;
-	}
-	
-	@Override
-	public MeshPart getMeshPart() {
-		return part;
-	}
-	
-	private final static Pool<Vector3> vectorPool = new Pool<Vector3>() {
-		@Override
-		protected Vector3 newObject () {
-			return new Vector3();
-		}
-	};
-	
-	private final static Array<Vector3> vectorArray = new Array<Vector3>();
-	
-	private Vector3 tmp(float x, float y, float z) {
-		final Vector3 result = vectorPool.obtain().set(x, y, z);
-		vectorArray.add(result);
-		return result;
-	}
-	
-	private Vector3 tmp(Vector3 copyFrom) {
-		return tmp(copyFrom.x, copyFrom.y, copyFrom.z);
-	}
-	
-	private void cleanup() {
-		vectorPool.freeAll(vectorArray);
-		vectorArray.clear();
-	}
-	
-	@Override
-	public void setColor(float r, float g, float b, float a) {
-		color.set(r, g, b, a);
-		colorSet = true;
-	}
-	
-	@Override
-	public void setColor(final Color color) {
-		if ((colorSet = color != null)==true)
-			this.color.set(color);
-	}
-	
-	@Override
-	public short vertex(Vector3 pos, Vector3 nor, Color col, Vector2 uv) {
-		if (col == null && colorSet)
-			col = color;
-		if (pos != null) {
-			vertex[posOffset  ] = pos.x;
-			if (posSize > 1) vertex[posOffset+1] = pos.y;
-			if (posSize > 2) vertex[posOffset+2] = pos.z;
-		}
-		if (nor != null && norOffset >= 0) {
-			vertex[norOffset  ] = nor.x;
-			vertex[norOffset+1] = nor.y;
-			vertex[norOffset+2] = nor.z;
-		}
-		if (col != null) {
-			if (colOffset >= 0) {
-				vertex[colOffset  ] = col.r;
-				vertex[colOffset+1] = col.g;
-				vertex[colOffset+2] = col.b;
-				if (colSize > 3) vertex[colOffset+3] = col.a;
-			} else if (cpOffset > 0)
-				vertex[cpOffset] = col.toFloatBits(); // FIXME cache packed color?
-		}
-		if (uv != null && uvOffset >= 0) {
-			vertex[uvOffset  ] = uv.x;
-			vertex[uvOffset+1] = uv.y;
-		}
-		vertices.addAll(vertex);
-		return (short)(vindex++);
-	}	
-
-	@Override
-	public short vertex(final float[] values) {
-		vertices.addAll(values);
-		vindex += values.length / stride;
-		return (short)(vindex-1);
-	}
-	
-	@Override
-	public short vertex(final VertexInfo info) {
-		return vertex(info.hasPosition ? info.position : null, info.hasNormal ? info.normal : null, 
-			info.hasColor ? info.color : null, info.hasUV ? info.uv : null);
-	}
-	
-	@Override
-	public void index(final short value) {
-		indices.add(value);
-	}
-	
-	@Override
-	public void index(final short value1, final short value2) {
-		indices.ensureCapacity(2);
-		indices.add(value1);
-		indices.add(value2);
-	}
-	
-	@Override
-	public void index(final short value1, final short value2, final short value3) {
-		indices.ensureCapacity(3);
-		indices.add(value1);
-		indices.add(value2);
-		indices.add(value3);
-	}
-	
-	@Override
-	public void index(final short value1, final short value2, final short value3, final short value4) {
-		indices.ensureCapacity(4);
-		indices.add(value1);
-		indices.add(value2);
-		indices.add(value3);
-		indices.add(value4);
-	}
-	
-	@Override
-	public void index(short value1, short value2, short value3, short value4, short value5, short value6) {
-		indices.ensureCapacity(6);
-		indices.add(value1);
-		indices.add(value2);
-		indices.add(value3);
-		indices.add(value4);
-		indices.add(value5);
-		indices.add(value6);
-	}
-
-	@Override
-	public void index(short value1, short value2, short value3, short value4, short value5, short value6, short value7, short value8) {
-		indices.ensureCapacity(8);
-		indices.add(value1);
-		indices.add(value2);
-		indices.add(value3);
-		indices.add(value4);
-		indices.add(value5);
-		indices.add(value6);
-		indices.add(value7);
-		indices.add(value8);
-	}
-	
-	@Override
-	public void line(short index1, short index2) {
-		if (primitiveType != GL10.GL_LINES)
-			throw new GdxRuntimeException("Incorrect primitive type");
-		index(index1, index2);
-	}
-	
-	@Override
-	public void line(VertexInfo p1, VertexInfo p2) {
-		line(vertex(p1), vertex(p2));
-	}
-
-	@Override
-	public void line(Vector3 p1, Vector3 p2) {
-		line(vertTmp1.set(p1, null, null, null), vertTmp2.set(p2, null, null, null));
-	}
-	
-	@Override
-	public void line(float x1, float y1, float z1, float x2, float y2, float z2) {
-		line(vertTmp1.set(null, null, null, null).setPos(x1, y1, z1), vertTmp2.set(null, null, null, null).setPos(x2, y2, z2));
-	}
-
-	@Override
-	public void line(Vector3 p1, Color c1, Vector3 p2, Color c2) {
-		line(vertTmp1.set(p1, null, c1, null), vertTmp2.set(p2, null, c2, null));
-	}
-	
-	@Override
-	public void triangle(short index1, short index2, short index3) {
-		if (primitiveType == GL10.GL_TRIANGLES || primitiveType == GL10.GL_POINTS) {
-			index(index1, index2, index3);
-		} else if (primitiveType == GL10.GL_LINES) {
-			index(index1, index2, index2, index3, index3, index1);
-		} else
-			throw new GdxRuntimeException("Incorrect primitive type");
-	}
-
-	@Override
-	public void triangle(VertexInfo p1, VertexInfo p2, VertexInfo p3) {
-		triangle(vertex(p1), vertex(p2), vertex(p3));
-	}
-	
-	@Override
-	public void triangle(Vector3 p1, Vector3 p2, Vector3 p3) {
-		triangle(vertTmp1.set(p1, null, null, null), vertTmp2.set(p2, null, null, null), vertTmp3.set(p3, null, null, null));
-	}
-	
-	@Override
-	public void triangle(Vector3 p1, Color c1, Vector3 p2, Color c2, Vector3 p3, Color c3) {
-		triangle(vertTmp1.set(p1, null, c1, null), vertTmp2.set(p2, null, c2, null), vertTmp3.set(p3, null, c3, null));
-	}
-	
-	@Override
-	public void rect(short corner00, short corner10, short corner11, short corner01) {
-		if (primitiveType == GL10.GL_TRIANGLES) {
-			index(corner00, corner10, corner11, corner11, corner01, corner00);
-		} else if (primitiveType == GL10.GL_LINES) {
-			index(corner00, corner10, corner10, corner11, corner11, corner01, corner01, corner00);
-		} else if (primitiveType == GL10.GL_POINTS) {
-			index(corner00, corner10, corner11, corner01);
-		} else
-			throw new GdxRuntimeException("Incorrect primitive type");
-	}
-	
-	@Override
-	public void rect(VertexInfo corner00, VertexInfo corner10, VertexInfo corner11, VertexInfo corner01) {
-		rect(vertex(corner00), vertex(corner10), vertex(corner11), vertex(corner01));
-	}
-	
-	@Override
-	public void rect(Vector3 corner00, Vector3 corner10, Vector3 corner11, Vector3 corner01, Vector3 normal) {
-		rect(vertTmp1.set(corner00, normal, null, null).setUV(uMin,vMin),
-			vertTmp2.set(corner10, normal, null, null).setUV(uMax,vMin),
-			vertTmp3.set(corner11, normal, null, null).setUV(uMax,vMax),
-			vertTmp4.set(corner01, normal, null, null).setUV(uMin,vMax));
-	}
-	
-	@Override
-	public void rect(float x00, float y00, float z00, float x10, float y10, float z10, float x11, float y11, float z11, float x01, float y01, float z01, float normalX, float normalY, float normalZ) {
-		rect(vertTmp1.set(null, null, null, null).setPos(x00,y00,z00).setNor(normalX,normalY,normalZ).setUV(uMin,vMin),
-			vertTmp2.set(null, null, null, null).setPos(x10,y10,z10).setNor(normalX,normalY,normalZ).setUV(uMax,vMin),
-			vertTmp3.set(null, null, null, null).setPos(x11,y11,z11).setNor(normalX,normalY,normalZ).setUV(uMax,vMax),
-			vertTmp4.set(null, null, null, null).setPos(x01,y01,z01).setNor(normalX,normalY,normalZ).setUV(uMin,vMax));
-	}
-	
-	@Override
-	public void box(VertexInfo corner000, VertexInfo corner010, VertexInfo corner100, VertexInfo corner110,
-						VertexInfo corner001, VertexInfo corner011, VertexInfo corner101, VertexInfo corner111) {
-		final short i000 = vertex(corner000);
-		final short i100 = vertex(corner100);
-		final short i110 = vertex(corner110);
-		final short i010 = vertex(corner010);
-		final short i001 = vertex(corner001);
-		final short i101 = vertex(corner101);
-		final short i111 = vertex(corner111);
-		final short i011 = vertex(corner011);
-		rect(i000, i100, i110, i010);
-		rect(i101, i001, i011, i111);
-		if (primitiveType == GL10.GL_LINES) {
-			index(i000, i001, i010, i011, i110, i111, i100, i101);
-		} else if (primitiveType == GL10.GL_TRIANGLES) {
-			index(i001, i000, i010, i010, i011, i001);
-			index(i100, i101, i111, i111, i110, i100);
-			index(i001, i101, i100, i100, i000, i001);
-			index(i010, i110, i111, i111, i011, i010);
-		} else if (primitiveType != GL10.GL_POINTS) 
-			throw new GdxRuntimeException("Incorrect primitive type");
-	}
-	
-	@Override
-	public void box(Vector3 corner000, Vector3 corner010, Vector3 corner100, Vector3 corner110,
-						Vector3 corner001, Vector3 corner011, Vector3 corner101, Vector3 corner111) {
-		if (norOffset < 0) {
-			box(vertTmp1.set(corner000, null, null, null), vertTmp1.set(corner010, null, null, null),
-				vertTmp1.set(corner100, null, null, null), vertTmp1.set(corner110, null, null, null),
-				vertTmp1.set(corner001, null, null, null), vertTmp1.set(corner011, null, null, null),
-				vertTmp1.set(corner101, null, null, null), vertTmp1.set(corner111, null, null, null));
-		} else {
-			Vector3 nor = tempV1.set(corner000).lerp(corner110, 0.5f).sub(tempV2.set(corner001).lerp(corner111, 0.5f)).nor();
-			rect(corner000, corner010, corner110, corner100, nor);
-			rect(corner011, corner001, corner101, corner111, nor.scl(-1));
-			nor = tempV1.set(corner000).lerp(corner101, 0.5f).sub(tempV2.set(corner010).lerp(corner111, 0.5f)).nor();
-			rect(corner001, corner000, corner100, corner101, nor);
-			rect(corner010, corner011, corner111, corner110, nor.scl(-1));
-			nor = tempV1.set(corner000).lerp(corner011, 0.5f).sub(tempV2.set(corner100).lerp(corner111, 0.5f)).nor();
-			rect(corner001, corner011, corner010, corner000, nor);
-			rect(corner100, corner110, corner111, corner101, nor.scl(-1));
-		}
-	}
-	
-	@Override
-	public void box(Matrix4 transform) {
-		box(tmp(-0.5f,-0.5f,-0.5f).mul(transform),tmp(-0.5f,0.5f,-0.5f).mul(transform),tmp(0.5f,-0.5f,-0.5f).mul(transform),tmp(0.5f,0.5f,-0.5f).mul(transform),
-			tmp(-0.5f,-0.5f,0.5f).mul(transform),tmp(-0.5f,0.5f,0.5f).mul(transform),tmp(0.5f,-0.5f,0.5f).mul(transform),tmp(0.5f,0.5f,0.5f).mul(transform));
-		cleanup();
-	}
-
-	@Override
-	public void box(float width, float height, float depth) {
-		box(matTmp1.setToScaling(width, height, depth));
-	}
-	
-	@Override
-	public void box(float x, float y, float z, float width, float height, float depth) {
-		box(matTmp1.setToScaling(width, height, depth).trn(x, y, z));
-	}
-	
-	@Override
-	public void cylinder(float width, float height, float depth, int divisions) {
-		// FIXME create better cylinder method (- fill the sides, - axis on which to create the cylinder (matrix?), - partial cylinder)
-		final float hw = width * 0.5f;
-		final float hh = height * 0.5f;
-		final float hd = depth * 0.5f;
-		final float step = MathUtils.PI2 / divisions;
-		final float us = 1f / divisions;
-		float u = 0f;
-		float angle = 0f;
-		VertexInfo curr1 = vertTmp3.set(null, null, null, null);
-		curr1.hasUV = curr1.hasPosition = curr1.hasNormal = true;
-		VertexInfo curr2 = vertTmp4.set(null, null, null, null);
-		curr2.hasUV = curr2.hasPosition = curr2.hasNormal = true;
-		for (int i = 0; i <= divisions; i++) {
-			angle = step * i;
-			u = 1f - us * i;
-			curr1.position.set(MathUtils.cos(angle) * hw, 0f, MathUtils.sin(angle) * hd);
-			curr1.normal.set(curr1.position).nor();
-			curr1.position.y = -hh;
-			curr1.uv.set(u, 1);
-			curr2.position.set(curr1.position);
-			curr2.normal.set(curr1.normal);
-			curr2.position.y = hh;
-			curr2.uv.set(u, 0);
-			vertex(curr1);
-			vertex(curr2);
-			if (i == 0)
-				continue;
-			rect((short)(vindex-4), (short)(vindex-2), (short)(vindex-1), (short)(vindex-3)); // FIXME don't duplicate lines and points
-		}
-	}
-	
-	@Override
-	public void cone(float width, float height, float depth, int divisions) {
-		// FIXME create better cylinder method (- fill the side, - axis on which to create the cone (matrix?), - partial cone)
-		final float hw = width * 0.5f;
-		final float hh = height * 0.5f;
-		final float hd = depth * 0.5f;
-		final float step = MathUtils.PI2 / divisions;
-		final float us = 1f / divisions;
-		float u = 0f;
-		float angle = 0f;
-		VertexInfo curr1 = vertTmp3.set(null, null, null, null);
-		curr1.hasUV = curr1.hasPosition = curr1.hasNormal = true;
-		VertexInfo curr2 = vertTmp4.set(null, null, null, null).setPos(0,hh,0).setNor(0,1,0).setUV(0.5f, 0);
-		final int base = vertex(curr2);
-		for (int i = 0; i <= divisions; i++) {
-			angle = step * i;
-			u = 1f - us * i;
-			curr1.position.set(MathUtils.cos(angle) * hw, 0f, MathUtils.sin(angle) * hd);
-			curr1.normal.set(curr1.position).nor();
-			curr1.position.y = -hh;
-			curr1.uv.set(u, 1);
-			vertex(curr1);
-			if (i == 0)
-				continue;
-			triangle((short)base, (short)(vindex-1), (short)(vindex-2)); // FIXME don't duplicate lines and points
-		}
-	}
-	
-	@Override
-	public void sphere(float width, float height, float depth, int divisionsU, int divisionsV) {
-		// FIXME create better sphere method (- only one vertex for each pole, - partial sphere, - position)
-		final float hw = width * 0.5f;
-		final float hh = height * 0.5f;
-		final float hd = depth * 0.5f;
-		final float stepU = MathUtils.PI2 / divisionsU;
-		final float stepV = MathUtils.PI / divisionsV;
-		final float us = 1f / divisionsU;
-		final float vs = 1f / divisionsV;
-		float u = 0f;
-		float v = 0f;
-		float angleU = 0f;
-		float angleV = 0f;
-		VertexInfo curr1 = vertTmp3.set(null, null, null, null);
-		curr1.hasUV = curr1.hasPosition = curr1.hasNormal = true;
-		for (int i = 0; i <= divisionsU; i++) {
-			angleU = stepU * i;
-			u = 1f - us * i;
-			tempV1.set(MathUtils.cos(angleU) * hw, 0f, MathUtils.sin(angleU) * hd);
-			for (int j = 0; j <= divisionsV; j++) {
-				angleV = stepV * j;
-				v = vs * j;
-				final float t = MathUtils.sin(angleV);
-				curr1.position.set(tempV1.x * t, MathUtils.cos(angleV) * hh, tempV1.z * t);
-				curr1.normal.set(curr1.position).nor();
-				curr1.uv.set(u, v);
-				vertex(curr1);
-				if (i == 0 || j == 0)
-					continue;
-				// FIXME don't duplicate lines and points
-				index((short)(vindex-2), (short)(vindex-1), (short)(vindex-(divisionsV+2)), 
-					(short)(vindex-1), (short)(vindex-(divisionsV+1)), (short)(vindex-(divisionsV+2))); 
-			}
-		}
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshPartBuilder.java b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshPartBuilder.java
deleted file mode 100644
index 91067c6..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshPartBuilder.java
+++ /dev/null
@@ -1,158 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.utils;
-
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.VertexAttributes;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.model.MeshPart;
-import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.math.Vector2;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.utils.Pool.Poolable;
-
-public interface MeshPartBuilder {
-	/** @return The {@link MeshPart} currently building. */
-	public MeshPart getMeshPart();
-	/** @return The {@link VertexAttributes} available for building. */
-	public VertexAttributes getAttributes();
-	/** Set the color used if no vertex color is provided, or null to not use a default color. */
-	public void setColor(final Color color);
-	/** Set the color used if no vertex color is provided. */
-	public void setColor(float r, float g, float b, float a);
-	/** Add one or more vertices, returns the index of the last vertex added. The length of values must a power of the vertex size. */
-	public short vertex(final float[] values);
-	/** Add a vertex, returns the index. Null values are allowed. Use {@link #getAttributes} to check which values are available. */
-	public short vertex(Vector3 pos, Vector3 nor, Color col, Vector2 uv);
-	/** Add a vertex, returns the index. Use {@link #getAttributes} to check which values are available. */
-	public short vertex(final VertexInfo info);
-	/** Add an index, MeshPartBuilder expects all meshes to be indexed. */
-	public void index(final short value);
-	/** Add multiple indices, MeshPartBuilder expects all meshes to be indexed. */
-	public void index(short value1, short value2);
-	/** Add multiple indices, MeshPartBuilder expects all meshes to be indexed. */
-	public void index(short value1, short value2, short value3);
-	/** Add multiple indices, MeshPartBuilder expects all meshes to be indexed. */
-	public void index(short value1, short value2, short value3, short value4);
-	/** Add multiple indices, MeshPartBuilder expects all meshes to be indexed. */
-	public void index(short value1, short value2, short value3, short value4, short value5, short value6);
-	/** Add multiple indices, MeshPartBuilder expects all meshes to be indexed. */
-	public void index(short value1, short value2, short value3, short value4, short value5, short value6, short value7, short value8);
-	/** Add a line by indices. Requires GL_LINES primitive type. */
-	public void line(short index1, short index2);
-	/** Add a line. Requires GL_LINES primitive type. */
-	public void line(VertexInfo p1, VertexInfo p2);
-	/** Add a line. Requires GL_LINES primitive type. */
-	public void line(Vector3 p1, Vector3 p2);
-	/** Add a line. Requires GL_LINES primitive type. */
-	public void line(float x1, float y1, float z1, float x2, float y2, float z2);
-	/** Add a line. Requires GL_LINES primitive type. */
-	public void line(Vector3 p1, Color c1, Vector3 p2, Color c2);
-	/** Add a triangle by indices. Requires GL_POINTS, GL_LINES or GL_TRIANGLES primitive type. */
-	public void triangle(short index1, short index2, short index3);
-	/** Add a triangle. Requires GL_POINTS, GL_LINES or GL_TRIANGLES primitive type. */
-	public void triangle(VertexInfo p1, VertexInfo p2, VertexInfo p3);
-	/** Add a triangle. Requires GL_POINTS, GL_LINES or GL_TRIANGLES primitive type. */
-	public void triangle(Vector3 p1, Vector3 p2, Vector3 p3);
-	/** Add a triangle. Requires GL_POINTS, GL_LINES or GL_TRIANGLES primitive type. */
-	public void triangle(Vector3 p1, Color c1, Vector3 p2, Color c2, Vector3 p3, Color c3);
-	/** Add a rectangle by indices. Requires GL_POINTS, GL_LINES or GL_TRIANGLES primitive type. */
-	public void rect(short corner00, short corner10, short corner11, short corner01);
-	/** Add a rectangle. Requires GL_POINTS, GL_LINES or GL_TRIANGLES primitive type. */
-	public void rect(VertexInfo corner00, VertexInfo corner10, VertexInfo corner11, VertexInfo corner01);
-	/** Add a rectangle. Requires GL_POINTS, GL_LINES or GL_TRIANGLES primitive type. */
-	public void rect(Vector3 corner00, Vector3 corner10, Vector3 corner11, Vector3 corner01, Vector3 normal);
-	/** Add a rectangle Requires GL_POINTS, GL_LINES or GL_TRIANGLES primitive type. */
-	public void rect(float x00, float y00, float z00, float x10, float y10, float z10, float x11, float y11, float z11, float x01, float y01, float z01, float normalX, float normalY, float normalZ);
-	/** Add a box. Requires GL_POINTS, GL_LINES or GL_TRIANGLES primitive type. */
-	public void box(VertexInfo corner000, VertexInfo corner010, VertexInfo corner100, VertexInfo corner110,
-						VertexInfo corner001, VertexInfo corner011, VertexInfo corner101, VertexInfo corner111);
-	/** Add a box. Requires GL_POINTS, GL_LINES or GL_TRIANGLES primitive type. */
-	public void box(Vector3 corner000, Vector3 corner010, Vector3 corner100, Vector3 corner110,
-						Vector3 corner001, Vector3 corner011, Vector3 corner101, Vector3 corner111);
-	/** Add a box given the matrix. Requires GL_POINTS, GL_LINES or GL_TRIANGLES primitive type. */
-	public void box(Matrix4 transform);
-	/** Add a box with the specified dimensions. Requires GL_POINTS, GL_LINES or GL_TRIANGLES primitive type. */
-	public void box(float width, float height, float depth);
-	/** Add a box at the specified location, with the specified dimensions */
-	public void box(float x, float y, float z, float width, float height, float depth);
-	/** Add a cylinder */
-	public void cylinder(float width, float height, float depth, int divisions);
-	/** Add a cone */
-	public void cone(float width, float height, float depth, int divisions);
-	/** Add a sphere */
-	public void sphere(float width, float height, float depth, int divisionsU, int divisionsV);
-	// FIXME: Add capsule
-	
-	/** Class that contains all vertex information the builder can use.
-	 * @author Xoppa */
-	public static class VertexInfo implements Poolable {
-		public final Vector3 position = new Vector3();
-		public boolean hasPosition;
-		public final Vector3 normal = new Vector3(0, 1, 0);
-		public boolean hasNormal;
-		public final Color color = new Color(1, 1, 1, 1);
-		public boolean hasColor;
-		public final Vector2 uv = new Vector2();
-		public boolean hasUV;
-		@Override
-		public void reset () {
-			position.set(0,0,0);
-			normal.set(0,1,0);
-			color.set(1,1,1,1);
-			uv.set(0,0);
-		}
-		public VertexInfo set(Vector3 pos, Vector3 nor, Color col, Vector2 uv) {
-			reset();
-			if ((hasPosition = pos != null) == true)
-				position.set(pos);
-			if ((hasNormal = nor != null) == true)
-				normal.set(nor);
-			if ((hasColor = col != null) == true)
-				color.set(col);
-			if ((hasUV = uv != null) == true)
-				this.uv.set(uv);
-			return this;
-		}
-		public VertexInfo setPos(float x, float y, float z) {
-			position.set(x,y,z);
-			hasPosition = true;
-			return this;
-		}
-		public VertexInfo setPos(Vector3 pos) {
-			if ((hasPosition = pos != null)==true)
-				position.set(pos);
-			return this;
-		}
-		public VertexInfo setNor(float x, float y, float z) {
-			normal.set(x,y,z);
-			hasNormal = true;
-			return this;
-		}
-		public VertexInfo setNor(Vector3 nor) {
-			if ((hasNormal = nor != null) == true)
-				normal.set(nor);
-			return this;
-		}
-		public VertexInfo setCol(float r, float g, float b, float a) {
-			color.set(r,g,b,a);
-			hasColor = true;
-			return this;
-		}
-		public VertexInfo setCol(Color col) {
-			if ((hasColor = col != null)==true)
-				color.set(col);
-			return this;
-		}
-		public VertexInfo setUV(float u, float v) {
-			uv.set(u,v);
-			hasUV = true;
-			return this;
-		}
-		public VertexInfo setUV(Vector2 uv) {
-			if ((hasUV = uv != null)==true)
-				this.uv.set(uv);
-			return this;
-		}
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/ModelBuilder.java b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/ModelBuilder.java
deleted file mode 100644
index 2cc05c7..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/ModelBuilder.java
+++ /dev/null
@@ -1,327 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.utils;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.VertexAttributes;
-import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.model.MeshPart;
-import com.badlogic.gdx.graphics.g3d.model.NodePart;
-import com.badlogic.gdx.graphics.g3d.model.Node;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart;
-import com.badlogic.gdx.math.MathUtils;
-import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.math.Vector2;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.Disposable;
-import com.badlogic.gdx.utils.GdxRuntimeException;
-import com.badlogic.gdx.utils.Pool;
-import com.badlogic.gdx.utils.Pool.Poolable;
-
-public class ModelBuilder {
-	/** The model currently being build */
-	private Model model;
-	/** The node currently being build */
-	private Node node;
-	/** The mesh builders created between begin and end */
-	private Array<MeshBuilder> builders = new Array<MeshBuilder>();
-	
-	private MeshBuilder getBuilder(final VertexAttributes attributes) {
-		for (final MeshBuilder mb : builders)
-			if (mb.getAttributes().equals(attributes))
-				return mb;
-		final MeshBuilder result = new MeshBuilder();
-		result.begin(attributes);
-		builders.add(result);
-		return result;
-	}
-	
-	/** Begin building a new model */
-	public void begin() {
-		if (model != null)
-			throw new GdxRuntimeException("Call end() first");
-		node = null;
-		model = new Model();
-		builders.clear();
-	}
-	
-	/** End building the model.
-	 * @return The newly created model. Call the {@link Model#dispose()} method when no longer used. */
-	public Model end() {
-		if (model == null)
-			throw new GdxRuntimeException("Call begin() first");
-		final Model result = model;
-		endnode();
-		model = null;
-		
-		for (final MeshBuilder mb : builders)
-			mb.end();
-		builders.clear();
-		
-		rebuildReferences(result);
-		return result;
-	}
-	
-	private void endnode() {
-		if (node != null) {
-			node = null;
-		}
-	}
-
-	/** Adds the {@link Node} to the model and sets it active for building. */
-	protected Node node(final Node node) {
-		if (model == null)
-			throw new GdxRuntimeException("Call begin() first");
-		
-		endnode();
-		
-		model.nodes.add(node);
-		this.node = node;
-		
-		return node;
-	}
-	
-	/** Add a node to the model. 
-	 * @return The node being created. */
-	public Node node() {
-		final Node node = new Node();
-		node.id = "node"+model.nodes.size;
-		return node(node);
-	}
-	
-	/** Adds the nodes of the specified model to a new node the model being build.
-	 * After this method the given model can no longer be used. Do not call the {@link Model#dispose()} method on that model. 
-	 * @return The newly created node containing the nodes of the given model. */
-	public Node node(final String id, final Model model) {
-		final Node node = new Node();
-		node.id = id;
-		node.children.addAll(model.nodes);
-		for (final Disposable disposable : model.getManagedDisposables())
-			manage(disposable);
-		return node(node);
-	}
-	
-	/** Add the {@link Disposable} object to the model, causing it to be disposed when the model is disposed. */
-	public void manage(final Disposable disposable) {
-		if (model == null)
-			throw new GdxRuntimeException("Call begin() first");
-		model.manageDisposable(disposable);
-	}
-	
-	/** Adds the specified MeshPart to the current Node. 
-	 * The Mesh will be managed by the model and disposed when the model is disposed.
-	 * The resources the Material might contain are not managed, use {@link #manage(Disposable)} to add those to the model. */
-	public void part(final MeshPart meshpart, final Material material) {
-		if (node == null)
-			node();
-		node.parts.add(new NodePart(meshpart, material));
-	}
-	
-	/** Adds the specified mesh part to the current node.
-	 * The Mesh will be managed by the model and disposed when the model is disposed.
-	 * The resources the Material might contain are not managed, use {@link #manage(Disposable)} to add those to the model.
-	 * @return The added MeshPart. */
-	public MeshPart part(final String id, final Mesh mesh, int primitiveType, int offset, int size, final Material material) {
-		final MeshPart meshPart = new MeshPart();
-		meshPart.id = id;
-		meshPart.primitiveType = primitiveType;
-		meshPart.mesh = mesh;
-		meshPart.indexOffset = offset;
-		meshPart.numVertices = size;
-		part(meshPart, material);
-		return meshPart;
-	}
-	
-	/** Adds the specified mesh part to the current node.
-	 * The Mesh will be managed by the model and disposed when the model is disposed.
-	 * The resources the Material might contain are not managed, use {@link #manage(Disposable)} to add those to the model.
-	 * @return The added MeshPart. */
-	public MeshPart part(final String id, final Mesh mesh, int primitiveType, final Material material) {
-		return part(id, mesh, primitiveType, 0, mesh.getNumIndices(), material);
-	}
-	
-	/** Creates a new MeshPart within the current Node.
-	 * The resources the Material might contain are not managed, use {@link #manage(Disposable)} to add those to the model.
-	 * @return The {@link MeshPartBuilder} you can use to build the MeshPart. */ 
-	private MeshPartBuilder part(final String id, int primitiveType, final VertexAttributes attributes, final Material material) {
-		final MeshBuilder builder = getBuilder(attributes);
-		part(builder.part(id, primitiveType), material);
-		return builder;
-	}
-	
-	/** Creates a new MeshPart within the current Node.
-	 * The resources the Material might contain are not managed, use {@link #manage(Disposable)} to add those to the model.
-	 * @param attributes bitwise mask of the {@link com.badlogic.gdx.graphics.VertexAttributes.Usage}, 
-	 * only Position, Color, Normal and TextureCoordinates is supported.
-	 * @return The {@link MeshPartBuilder} you can use to build the MeshPart. */ 
-	public MeshPartBuilder part(final String id, int primitiveType, final long attributes, final Material material) {
-		return part(id, primitiveType, MeshBuilder.createAttributes(attributes), material);
-	}
-	
-	/** Convenience method to create a model with a single node containing a box shape.
-	 * The resources the Material might contain are not managed, 
-	 * use {@link Model#manageDisposable(Disposable)} to add those to the model.
-	 * @param attributes bitwise mask of the {@link com.badlogic.gdx.graphics.VertexAttributes.Usage}, 
-	 * only Position, Color, Normal and TextureCoordinates is supported. */ 
-	public Model createBox(float width, float height, float depth, final Material material, final long attributes) {
-		return createBox(width, height, depth, GL10.GL_TRIANGLES, material, attributes);
-	}
-	
-	/** Convenience method to create a model with a single node containing a box shape.
-	 * The resources the Material might contain are not managed, 
-	 * use {@link Model#manageDisposable(Disposable)} to add those to the model.
-	 * @param attributes bitwise mask of the {@link com.badlogic.gdx.graphics.VertexAttributes.Usage}, 
-	 * only Position, Color, Normal and TextureCoordinates is supported. */ 
-	public Model createBox(float width, float height, float depth, int primitiveType, final Material material, final long attributes) {
-		begin();
-		part("box", primitiveType, attributes, material).box(width, height, depth);
-		return end();
-	}
-	
-	/** Convenience method to create a model with a single node containing a rectangle shape. 
-	 * The resources the Material might contain are not managed, 
-	 * use {@link Model#manageDisposable(Disposable)} to add those to the model.
-	 * @param attributes bitwise mask of the {@link com.badlogic.gdx.graphics.VertexAttributes.Usage}, 
-	 * only Position, Color, Normal and TextureCoordinates is supported. */
-	public Model createRect(float x00, float y00, float z00, float x10, float y10, float z10, float x11, float y11, float z11, float x01, float y01, float z01, float normalX, float normalY, float normalZ, final Material material, final long attributes) {
-		return createRect(x00, y00, z00, x10, y10, z10, x11, y11, z11, x01, y01, z01, normalX, normalY, normalZ, GL10.GL_TRIANGLES, material, attributes);
-	}
-	
-	/** Convenience method to create a model with a single node containing a rectangle shape. 
-	 * The resources the Material might contain are not managed, 
-	 * use {@link Model#manageDisposable(Disposable)} to add those to the model.
-	 * @param attributes bitwise mask of the {@link com.badlogic.gdx.graphics.VertexAttributes.Usage}, 
-	 * only Position, Color, Normal and TextureCoordinates is supported. */
-	public Model createRect(float x00, float y00, float z00, float x10, float y10, float z10, float x11, float y11, float z11, float x01, float y01, float z01, float normalX, float normalY, float normalZ, int primitiveType, final Material material, final long attributes) {
-		begin();
-		part("rect", primitiveType, attributes, material).rect(x00, y00, z00, x10, y10, z10, x11, y11, z11, x01, y01, z01, normalX, normalY, normalZ);
-		return end();
-	}
-
-	/** Convenience method to create a model with a single node containing a cylinder shape.
-	 * The resources the Material might contain are not managed, 
-	 * use {@link Model#manageDisposable(Disposable)} to add those to the model.
-	 * @param attributes bitwise mask of the {@link com.badlogic.gdx.graphics.VertexAttributes.Usage}, 
-	 * only Position, Color, Normal and TextureCoordinates is supported. */
-	public Model createCylinder(float width, float height, float depth, int divisions, final Material material, final long attributes) {
-		return createCylinder(width, height, depth, divisions, GL10.GL_TRIANGLES, material, attributes);
-	}
-	
-	/** Convenience method to create a model with a single node containing a cylinder shape.
-	 * The resources the Material might contain are not managed, 
-	 * use {@link Model#manageDisposable(Disposable)} to add those to the model.
-	 * @param attributes bitwise mask of the {@link com.badlogic.gdx.graphics.VertexAttributes.Usage}, 
-	 * only Position, Color, Normal and TextureCoordinates is supported. */
-	public Model createCylinder(float width, float height, float depth, int divisions, int primitiveType, final Material material, final long attributes) {
-		begin();
-		part("cylinder", primitiveType, attributes, material).cylinder(width, height, depth, divisions);
-		return end();
-	}
-	
-	/** Convenience method to create a model with a single node containing a cone shape.
-	 * The resources the Material might contain are not managed, 
-	 * use {@link Model#manageDisposable(Disposable)} to add those to the model.
-	 * @param attributes bitwise mask of the {@link com.badlogic.gdx.graphics.VertexAttributes.Usage}, 
-	 * only Position, Color, Normal and TextureCoordinates is supported. */
-	public Model createCone(float width, float height, float depth, int divisions, final Material material, final long attributes) {
-		return createCone(width, height, depth, divisions, GL10.GL_TRIANGLES, material, attributes);
-	}
-		
-	/** Convenience method to create a model with a single node containing a cone shape.
-	 * The resources the Material might contain are not managed, 
-	 * use {@link Model#manageDisposable(Disposable)} to add those to the model.
-	 * @param attributes bitwise mask of the {@link com.badlogic.gdx.graphics.VertexAttributes.Usage}, 
-	 * only Position, Color, Normal and TextureCoordinates is supported. */
-	public Model createCone(float width, float height, float depth, int divisions, int primitiveType, final Material material, final long attributes) {
-		begin();
-		part("cone", primitiveType, attributes, material).cone(width, height, depth, divisions);
-		return end();
-	}
-
-	/** Convenience method to create a model with a single node containing a sphere shape.
-	 * The resources the Material might contain are not managed, 
-	 * use {@link Model#manageDisposable(Disposable)} to add those to the model.
-	 * @param attributes bitwise mask of the {@link com.badlogic.gdx.graphics.VertexAttributes.Usage}, 
-	 * only Position, Color, Normal and TextureCoordinates is supported. */
-	public Model createSphere(float width, float height, float depth, int divisionsU, int divisionsV, final Material material, final long attributes) {
-		return createSphere(width, height, depth, divisionsU, divisionsV, GL10.GL_TRIANGLES, material, attributes);
-	}
-	
-	/** Convenience method to create a model with a single node containing a sphere shape.
-	 * The resources the Material might contain are not managed, 
-	 * use {@link Model#manageDisposable(Disposable)} to add those to the model.
-	 * @param attributes bitwise mask of the {@link com.badlogic.gdx.graphics.VertexAttributes.Usage}, 
-	 * only Position, Color, Normal and TextureCoordinates is supported. */
-	public Model createSphere(float width, float height, float depth, int divisionsU, int divisionsV, int primitiveType, final Material material, final long attributes) {
-		begin();
-		part("cylinder", primitiveType, attributes, material).sphere(width, height, depth, divisionsU, divisionsV);
-		return end();
-	}
-	
-	/** Resets the references to materials, meshes and meshparts within the model to the ones used within it's nodes.
-	 * This will make the model responsible for disposing all referenced meshes. */ 
-	public static void rebuildReferences(final Model model) {
-		model.materials.clear();
-		model.meshes.clear();
-		model.meshParts.clear();
-		for (final Node node : model.nodes)
-			rebuildReferences(model, node);
-	}
-	
-	private static void rebuildReferences(final Model model, final Node node) {
-		for (final NodePart mpm : node.parts) {
-			if (!model.materials.contains(mpm.material, true))
-				model.materials.add(mpm.material);
-			if (!model.meshParts.contains(mpm.meshPart, true)) {
-				model.meshParts.add(mpm.meshPart);
-				if (!model.meshes.contains(mpm.meshPart.mesh, true))
-					model.meshes.add(mpm.meshPart.mesh);
-				model.manageDisposable(mpm.meshPart.mesh);
-			}
-		}
-		for (final Node child : node.children)
-			rebuildReferences(model, child);
-	}
-	
-	// Old code below this line, as for now still useful for testing. 
-	@Deprecated
-	public static Model createFromMesh(final Mesh mesh, int primitiveType, final Material material) {
-		return createFromMesh(mesh, 0, mesh.getNumIndices(), primitiveType, material);
-	}
-	@Deprecated
-	public static Model createFromMesh(final Mesh mesh, int indexOffset, int vertexCount, int primitiveType, final Material material) {
-		Model result = new Model();
-		MeshPart meshPart = new MeshPart();
-		meshPart.id = "part1";
-		meshPart.indexOffset = indexOffset;
-		meshPart.numVertices = vertexCount;
-		meshPart.primitiveType = primitiveType;
-		meshPart.mesh = mesh;
-
-		NodePart partMaterial = new NodePart();
-		partMaterial.material = material;
-		partMaterial.meshPart = meshPart;
-		Node node = new Node();
-		node.id = "node1";
-		node.parts.add(partMaterial);
-		
-		result.meshes.add(mesh);
-		result.materials.add(material);
-		result.nodes.add(node);
-		result.meshParts.add(meshPart);
-		result.manageDisposable(mesh);
-		return result;
-	}
-	@Deprecated
-	public static Model createFromMesh(final float[] vertices, final VertexAttribute[] attributes, final short[] indices, int primitiveType, final Material material) {
-		final Mesh mesh = new Mesh(false, vertices.length, indices.length, attributes);
-		mesh.setVertices(vertices);
-		mesh.setIndices(indices);
-		return createFromMesh(mesh, 0, indices.length, primitiveType, material);
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/RenderContext.java b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/RenderContext.java
deleted file mode 100644
index 5f84f15..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/RenderContext.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.utils;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
-
-/**
- * Manages OpenGL state and tries to reduce state changes. Uses a {@link TextureBinder} to 
- * reduce texture binds as well. Call {@link #begin()} to setup the context, call {@link #end()}
- * to undo all state changes. Use the setters to change state, use {@link #textureBinder} to bind textures.
- * @author badlogic
- *
- */
-public class RenderContext {
-	/** used to bind textures **/
-	public final TextureBinder textureBinder;
-	private boolean blending;
-	private int blendSFactor;
-	private int blendDFactor;
-	private boolean depthTest;
-	private int depthFunc;
-	
-	public RenderContext(TextureBinder textures) {
-		this.textureBinder = textures;
-	}
-	
-	/**
-	 * Sets up the render context, must be matched with a call to {@link #end()}. Assumes
-	 * that the OpenGL states are in their defaults.
-	 */
-	public final void begin() {
-		Gdx.gl.glDisable(GL10.GL_DEPTH_TEST);
-		depthTest = false;
-		Gdx.gl.glDisable(GL10.GL_BLEND);
-		blending = false;
-		blendSFactor = blendDFactor = depthFunc = 0;
-		textureBinder.begin();
-	}
-	
-	/**
-	 * Resest all changed OpenGL states to their defaults.
-	 */
-	public final void end() {
-		if(depthTest) Gdx.gl.glDisable(GL10.GL_DEPTH_TEST);
-		if(blending) Gdx.gl.glDisable(GL10.GL_BLEND);
-		textureBinder.end();
-	}
-	
-	public final void setDepthTest(final boolean enabled, final int depthFunction) {
-		if (enabled != depthTest) {
-			depthTest = enabled;
-			if (enabled)
-				Gdx.gl.glEnable(GL10.GL_DEPTH_TEST);
-			else
-				Gdx.gl.glDisable(GL10.GL_DEPTH_TEST);
-		}
-		if (enabled && depthFunc != depthFunction) {
-			Gdx.gl.glDepthFunc(depthFunction);
-			depthFunc = depthFunction;
-		}
-	}
-	
-	public final void setBlending(final boolean enabled, final int sFactor, final int dFactor) {
-		if (enabled != blending) {
-			blending = enabled;
-			if (enabled)
-				Gdx.gl.glEnable(GL10.GL_BLEND);
-			else
-				Gdx.gl.glDisable(GL10.GL_BLEND);
-		}
-		if (enabled && (blendSFactor != sFactor || blendDFactor != dFactor)) {
-			Gdx.gl.glBlendFunc(sFactor, dFactor);
-			blendSFactor = sFactor;
-			blendDFactor = dFactor;
-		}
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/RenderableSorter.java b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/RenderableSorter.java
deleted file mode 100644
index d3eb572..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/RenderableSorter.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.utils;
-
-import com.badlogic.gdx.graphics.Camera;
-import com.badlogic.gdx.graphics.g3d.Renderable;
-import com.badlogic.gdx.utils.Array;
-
-/**
- * Responsible for sorting {@link Renderable} lists by whatever criteria (material, distance to camera, etc.)
- * @author badlogic
- *
- */
-public interface RenderableSorter {
-	/**
-	 * Sorst the array of {@link Renderable} instances based on some criteria,
-	 * e.g. material, distance to camera etc.
-	 * @param renderables the array of renderables to be sorted
-	 */
-	public void sort(Camera camera, Array<Renderable> renderables);
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/ShaderProvider.java b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/ShaderProvider.java
deleted file mode 100644
index 8195f9f..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/ShaderProvider.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.utils;
-
-import com.badlogic.gdx.graphics.g3d.Renderable;
-import com.badlogic.gdx.graphics.g3d.Shader;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
-
-/**
- * Returns {@link Shader} instances for a {@link Renderable} on request. Also responsible
- * for disposing of any created {@link ShaderProgram} instances on a call to {@link #dispose()}. 
- * @author badlogic
- *
- */
-public interface ShaderProvider {
-	/**
-	 * Returns a {@link Shader} for the given {@link Renderable}. The RenderInstance may
-	 * already contain a Shader, in which case the provider may decide to return that.
-	 * @param renderable the Renderable
-	 * @return the Shader to be used for the RenderInstance
-	 */
-	Shader getShader(Renderable renderable);
-	
-	/**
-	 * Disposes all resources created by the provider
-	 */
-	public void dispose();
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureBinder.java b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureBinder.java
deleted file mode 100644
index de60e8a..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureBinder.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.utils;
-
-import com.badlogic.gdx.graphics.Texture;
-
-/**
- * Responsible for binding textures, may implement a strategy to avoid binding a texture
- * unnecessarily. A TextureBinder may decide to which texture unit it binds a texture.
- * @author badlogic
- *
- */
-public interface TextureBinder {
-	/**
-	 * Prepares the binder for operation, must be matched with a call
-	 * to {@link #end()}.
-	 */
-	public void begin();
-	
-	/**
-	 * Disables all used texture units and unbinds textures. Resets the counts.
-	 */
-	public void end();
-	
-	/**
-	 * Binds the texture to an available unit and applies the
-	 * filters in the descriptor.
-	 * @param textureDescriptor the {@link TextureDescriptor}
-	 * @return the unit the texture was bound to
-	 */
-	public int bind(TextureDescriptor textureDescriptor);
-	
-	/**
-	 * @return the number of binds actualy executed since the last call to {@link #resetCounts()}
-	 */
-	public int getBindCount();
-	/**
-	 * @return the number of binds that could be avoided by reuse
-	 */
-	public int getReuseCount();
-	
-	/**
-	 * Resets the bind/reuse counts
-	 */
-	public void resetCounts();
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureDescriptor.java b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureDescriptor.java
deleted file mode 100644
index f8c6847..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureDescriptor.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.utils;
-
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.Texture;
-
-public class TextureDescriptor {
-	public Texture texture = null;
-	public int minFilter = GL10.GL_INVALID_VALUE;
-	public int magFilter = GL10.GL_INVALID_VALUE;
-	public int uWrap = GL10.GL_INVALID_VALUE;
-	public int vWrap = GL10.GL_INVALID_VALUE;
-	// TODO add other values, see http://www.opengl.org/sdk/docs/man/xhtml/glTexParameter.xml
-	
-	public TextureDescriptor(final Texture texture, final int minFilter, final int magFilter, final int uWrap, final int vWrap) {
-		set(texture, minFilter, magFilter, uWrap, vWrap);
-	}
-	
-	public TextureDescriptor(final Texture texture) {
-		this.texture = texture;
-	}
-	
-	public TextureDescriptor() {
-	}
-	
-	public void set(final Texture texture, final int minFilter, final int magFilter, final int uWrap, final int vWrap) {
-		this.texture = texture;
-		this.minFilter = minFilter;
-		this.magFilter = magFilter;
-		this.uWrap = uWrap;
-		this.vWrap = vWrap;
-	}
-	
-	public void set(final TextureDescriptor other) {
-		texture = other.texture;
-		minFilter = other.minFilter;
-		magFilter = other.magFilter;
-		uWrap = other.uWrap;
-		vWrap = other.vWrap;
-	}
-	
-	public void reset() {
-		texture = null;
-		minFilter = GL10.GL_INVALID_VALUE;
-		magFilter = GL10.GL_INVALID_VALUE;
-		uWrap = GL10.GL_INVALID_VALUE;
-		vWrap = GL10.GL_INVALID_VALUE;
-	}
-	
-	@Override
-	public boolean equals (Object obj) {
-		if (obj == null) return false;
-		if (obj == this) return true;
-		if (!(obj instanceof TextureDescriptor)) return false;
-		final TextureDescriptor other = (TextureDescriptor)obj;
-		return other.texture == texture && other.minFilter == minFilter && other.magFilter == magFilter &&
-			other.uWrap == uWrap && other.vWrap == vWrap;
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureProvider.java b/gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureProvider.java
deleted file mode 100644
index a9d56b3..0000000
--- a/gdx/src/com/badlogic/gdx/graphics/g3d/utils/TextureProvider.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.badlogic.gdx.graphics.g3d.utils;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.assets.AssetManager;
-import com.badlogic.gdx.files.FileHandle;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.model.data.ModelData;
-
-/**
- * Used by {@link Model} to load textures from {@link ModelData}.
- * @author badlogic
- *
- */
-public interface TextureProvider {
-	public Texture load(String fileName);
-	
-	public static class FileTextureProvider implements TextureProvider {
-		@Override
-		public Texture load (String fileName) {
-			return new Texture(Gdx.files.internal(fileName));
-		}		
-	}
-	
-	public static class AssetTextureProvider implements TextureProvider {
-		public AssetManager assetManager;
-		public AssetTextureProvider(final AssetManager assetManager) {
-			this.assetManager = assetManager;
-		}
-		@Override
-		public Texture load (String fileName) {
-			return assetManager.get(fileName, Texture.class);
-		}
-	}
-}
diff --git a/gdx/src/com/badlogic/gdx/graphics/glutils/ShaderProgram.java b/gdx/src/com/badlogic/gdx/graphics/glutils/ShaderProgram.java
index 9619282..b0515f2 100644
--- a/gdx/src/com/badlogic/gdx/graphics/glutils/ShaderProgram.java
+++ b/gdx/src/com/badlogic/gdx/graphics/glutils/ShaderProgram.java
@@ -279,12 +279,7 @@ public class ShaderProgram implements Disposable {
 		return location;
 	}
 
-	
 	private int fetchUniformLocation (String name) {
-		return fetchUniformLocation(name, pedantic);
-	}
-
-	public int fetchUniformLocation (String name, boolean pedantic) {
 		GL20 gl = Gdx.graphics.getGL20();
 		// -2 == not yet cached
 		// -1 == cached but not found
@@ -609,21 +604,26 @@ public class ShaderProgram implements Disposable {
 	 * @param name the name of the uniform
 	 * @param buffer buffer containing the matrix data
 	 * @param transpose whether the uniform matrix should be transposed */
-	public void setUniformMatrix4fv (String name, FloatBuffer buffer, int count, boolean transpose) {
+	public void setUniformMatrix3fv (String name, FloatBuffer buffer, int count, boolean transpose) {
 		GL20 gl = Gdx.graphics.getGL20();
 		checkManaged();
 		buffer.position(0);
 		int location = fetchUniformLocation(name);
-		gl.glUniformMatrix4fv(location, count, transpose, buffer);
+		gl.glUniformMatrix3fv(location, count, transpose, buffer);
 	}
-	
-	public void setUniformMatrix4fv (int location, float[] values, int offset, int length) {
+
+	/** Sets an array of uniform matrices with the given name. Throws an IllegalArgumentException in case it is not called in between a
+	 * {@link #begin()}/{@link #end()} block.
+	 * 
+	 * @param name the name of the uniform
+	 * @param buffer buffer containing the matrix data
+	 * @param transpose whether the uniform matrix should be transposed */
+	public void setUniformMatrix4fv (String name, FloatBuffer buffer, int count, boolean transpose) {
 		GL20 gl = Gdx.graphics.getGL20();
 		checkManaged();
-		ensureBufferCapacity(length << 2);
-		floatBuffer.clear();
-		BufferUtils.copy(values, floatBuffer, length, offset);
-		gl.glUniformMatrix4fv(location, length / 16, false, floatBuffer);
+		buffer.position(0);
+		int location = fetchUniformLocation(name);
+		gl.glUniformMatrix4fv(location, count, transpose, buffer);
 	}
 
 	/** Sets the uniform with the given name. Throws an IllegalArgumentException in case it is not called in between a
diff --git a/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java b/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java
index 0f7e69c..24f7ee7 100644
--- a/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java
+++ b/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java
@@ -504,6 +504,13 @@ public class ShapeRenderer {
 		renderer.color(color.r, color.g, color.b, color.a);
 		renderer.vertex(x, y + height, z + depth);
 	}
+
+	/** Draws two crossed lines. */
+	public void x (float x, float y, float radius) {
+		if (currType != ShapeType.Line) throw new GdxRuntimeException("Must call begin(ShapeType.Line)");
+		line(x - radius, y - radius, x + radius, y + radius);
+		line(x - radius, y + radius, x + radius, y - radius);
+	}
 	
 	/** Calls {@link #circle(float, float, float, int)} by estimating the number of segments needed for a smooth circle. */
 	public void circle (float x, float y, float radius) {
@@ -562,6 +569,44 @@ public class ShapeRenderer {
 		renderer.vertex(x + cx, y + cy, 0);
 	}
 	
+	/** Calls {@link #ellipse(float, float, float, float, int)} by estimating the number of segments needed for a smooth ellipse. */
+	public void ellipse(float x, float y, float width, float height) {
+		ellipse(x, y, width, height, (int)(12 * (float) Math.cbrt(Math.max(width * 0.5f,  height * 0.5f))));
+	}
+	
+	public void ellipse(float x, float y, float width, float height, int segments) {
+		if (segments <= 0) throw new IllegalArgumentException("segments must be >= 0.");
+		if (currType != ShapeType.Filled && currType != ShapeType.Line) 
+			throw new GdxRuntimeException("Must call begin(ShapeType.Filled) or begin(ShapeType.Line)");
+		checkDirty();
+		checkFlush(segments * 2 + 2);
+
+		float angle = 2 * 3.1415926f / segments;
+
+		float cx = x + width / 2, cy = y + height / 2;
+		if(currType == ShapeType.Line){
+			for (int i = 0; i < segments; i++) {
+				renderer.color(color.r, color.g, color.b, color.a);
+				renderer.vertex(cx + (width * 0.5f * MathUtils.cos(i * angle)), cy + (height * 0.5f * MathUtils.sin(i * angle)), 0);
+				
+				renderer.color(color.r, color.g, color.b, color.a);
+				renderer.vertex(cx + (width * 0.5f * MathUtils.cos((i + 1) * angle)), cy + (height * 0.5f * MathUtils.sin((i + 1) * angle)), 0);
+			}
+		}
+		else {
+			for (int i = 0; i < segments; i++) {
+				renderer.color(color.r, color.g, color.b, color.a);
+				renderer.vertex(cx + (width * 0.5f * MathUtils.cos(i * angle)), cy + (height * 0.5f * MathUtils.sin(i * angle)), 0);
+			
+				renderer.color(color.r, color.g, color.b, color.a);
+				renderer.vertex(cx, cy, 0);
+				
+				renderer.color(color.r, color.g, color.b, color.a);
+				renderer.vertex(cx + (width * 0.5f * MathUtils.cos((i + 1) * angle)), cy + (height * 0.5f * MathUtils.sin((i + 1) * angle)), 0);
+			}
+		}
+	}
+	
 	/** Calls {@link #cone(float, float, float, float, float, int)} by estimating the number of segments needed for a smooth
 	 * circular base. */
 	public void cone (float x, float y, float z, float radius, float height) {
diff --git a/gdx/src/com/badlogic/gdx/input/GestureDetector.java b/gdx/src/com/badlogic/gdx/input/GestureDetector.java
index 67cbc34..a8ea505 100644
--- a/gdx/src/com/badlogic/gdx/input/GestureDetector.java
+++ b/gdx/src/com/badlogic/gdx/input/GestureDetector.java
@@ -130,12 +130,13 @@ public class GestureDetector extends InputAdapter {
 		if (pointer > 1) return false;
 		if (longPressFired) return false;
 
+		if (pointer == 0)
+			pointer1.set(x, y);
+		else
+			pointer2.set(x, y);
+
 		// handle pinch zoom
 		if (pinching) {
-			if (pointer == 0)
-				pointer1.set(x, y);
-			else
-				pointer2.set(x, y);
 			if (listener != null) {
 				boolean result = listener.pinch(initialPointer1, initialPointer2, pointer1, pointer2);
 				return listener.zoom(initialPointer1.dst(initialPointer2), pointer1.dst(pointer2)) || result;
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/TiledMapTileSet.java b/gdx/src/com/badlogic/gdx/maps/tiled/TiledMapTileSet.java
index ed5ff81..44f7eac 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/TiledMapTileSet.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/TiledMapTileSet.java
@@ -1,12 +1,13 @@
 package com.badlogic.gdx.maps.tiled;
 
+import java.util.Iterator;
 import com.badlogic.gdx.maps.MapProperties;
 import com.badlogic.gdx.utils.IntMap;
 
 /**
  * @brief Set of TiledMapTile instances used to compose a TiledMapLayer
  */
-public class TiledMapTileSet {
+public class TiledMapTileSet implements Iterable<TiledMapTile> {
 	
 	private String name;
 	
@@ -52,6 +53,14 @@ public class TiledMapTileSet {
 	}
 	
 	/**
+	 * @return iterator to tiles in this tileset
+	 */
+	@Override
+	public Iterator<TiledMapTile> iterator() {
+		return tiles.values().iterator();
+	}
+	
+	/**
 	 * Adds or replaces tile with that id
 	 * 
 	 * @param id
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java b/gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
index 36f6b9d..cb8d4e4 100644
--- a/gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java
@@ -12,12 +12,12 @@ import com.badlogic.gdx.assets.AssetLoaderParameters;
 import com.badlogic.gdx.assets.AssetManager;
 import com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader;
 import com.badlogic.gdx.assets.loaders.FileHandleResolver;
-import com.badlogic.gdx.assets.loaders.SynchronousAssetLoader;
 import com.badlogic.gdx.assets.loaders.TextureLoader;
 import com.badlogic.gdx.assets.loaders.TextureLoader.TextureParameter;
 import com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver;
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
 import com.badlogic.gdx.maps.ImageResolver;
 import com.badlogic.gdx.maps.ImageResolver.AssetManagerImageResolver;
@@ -40,9 +40,7 @@ import com.badlogic.gdx.utils.ObjectMap;
 import com.badlogic.gdx.utils.XmlReader;
 import com.badlogic.gdx.utils.XmlReader.Element;
 
-/**
- * @brief synchronous loader for TMX maps created with the Tiled tool
- */
+/** @brief synchronous loader for TMX maps created with the Tiled tool */
 public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader.Parameters> {
 
 	public static class Parameters extends AssetLoaderParameters<TiledMap> {
@@ -50,77 +48,75 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 		public boolean yUp = true;
 		/** generate mipmaps? **/
 		public boolean generateMipMaps = false;
+		/** The TextureFilter to use for minification **/
+		public TextureFilter textureMinFilter = TextureFilter.Nearest;
+		/** The TextureFilter to use for magnification **/
+		public TextureFilter textureMagFilter = TextureFilter.Nearest;
 	}
-	
+
 	protected static final int FLAG_FLIP_HORIZONTALLY = 0x80000000;
 	protected static final int FLAG_FLIP_VERTICALLY = 0x40000000;
 	protected static final int FLAG_FLIP_DIAGONALLY = 0x20000000;
-	protected static final int MASK_CLEAR  = 0xE0000000;
-	
+	protected static final int MASK_CLEAR = 0xE0000000;
+
 	protected XmlReader xml = new XmlReader();
 	protected Element root;
 	protected boolean yUp;
 
 	protected int mapWidthInPixels;
 	protected int mapHeightInPixels;
-	
+
 	protected TiledMap map;
-	
-	public TmxMapLoader() {
+
+	public TmxMapLoader () {
 		super(new InternalFileHandleResolver());
 	}
-	
-	/**
-	 * Creates loader 
-	 *  
-	 * @param resolver
-	 */
-	public TmxMapLoader(FileHandleResolver resolver) {
+
+	/** Creates loader
+	 * 
+	 * @param resolver */
+	public TmxMapLoader (FileHandleResolver resolver) {
 		super(resolver);
 	}
 
-	/**
-	 * Loads the {@link TiledMap} from the given file. The file is
-	 * resolved via the {@link FileHandleResolver} set in the constructor
-	 * of this class. By default it will resolve to an internal file. The
-	 * map will be loaded for a y-up coordinate system.
+	/** Loads the {@link TiledMap} from the given file. The file is resolved via the {@link FileHandleResolver} set in the
+	 * constructor of this class. By default it will resolve to an internal file. The map will be loaded for a y-up coordinate
+	 * system.
 	 * @param fileName the filename
-	 * @return the TiledMap
-	 */
-	public TiledMap load(String fileName) {
+	 * @return the TiledMap */
+	public TiledMap load (String fileName) {
 		return load(fileName, new TmxMapLoader.Parameters());
 	}
 
-	/**
-	 * Loads the {@link TiledMap} from the given file. The file is
-	 * resolved via the {@link FileHandleResolver} set in the constructor
-	 * of this class. By default it will resolve to an internal file.
+	/** Loads the {@link TiledMap} from the given file. The file is resolved via the {@link FileHandleResolver} set in the
+	 * constructor of this class. By default it will resolve to an internal file.
 	 * @param fileName the filename
 	 * @param parameters specifies whether to use y-up, generate mip maps etc.
-	 * @return the TiledMap
-	 */
-	public TiledMap load(String fileName, TmxMapLoader.Parameters parameters) {
+	 * @return the TiledMap */
+	public TiledMap load (String fileName, TmxMapLoader.Parameters parameters) {
 		try {
 			this.yUp = parameters.yUp;
 			FileHandle tmxFile = resolve(fileName);
 			root = xml.parse(tmxFile);
 			ObjectMap<String, Texture> textures = new ObjectMap<String, Texture>();
-			for(FileHandle textureFile: loadTilesets(root, tmxFile)) {
-				textures.put(textureFile.path(), new Texture(textureFile, parameters.generateMipMaps));
+			for (FileHandle textureFile : loadTilesets(root, tmxFile)) {
+				Texture texture = new Texture(textureFile, parameters.generateMipMaps);
+				texture.setFilter(parameters.textureMinFilter, parameters.textureMagFilter);
+				textures.put(textureFile.path(), texture);
 			}
 			DirectImageResolver imageResolver = new DirectImageResolver(textures);
 			TiledMap map = loadTilemap(root, tmxFile, imageResolver);
 			map.setOwnedTextures(textures.values().toArray());
 			return map;
-		} catch(IOException e) {
+		} catch (IOException e) {
 			throw new GdxRuntimeException("Couldn't load tilemap '" + fileName + "'", e);
 		}
 	}
 
 	@Override
-	public void loadAsync (AssetManager manager, String fileName, Parameters parameter) {
+	public void loadAsync (AssetManager manager, String fileName, TmxMapLoader.Parameters parameter) {
 		map = null;
-		
+
 		FileHandle tmxFile = resolve(fileName);
 		if (parameter != null) {
 			yUp = parameter.yUp;
@@ -135,27 +131,29 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 	}
 
 	@Override
-	public TiledMap loadSync (AssetManager manager, String fileName, Parameters parameter) {
+	public TiledMap loadSync (AssetManager manager, String fileName, TmxMapLoader.Parameters parameter) {
 		return map;
 	}
-	
-	/**
-	 * Retrieves TiledMap resource dependencies
+
+	/** Retrieves TiledMap resource dependencies
 	 * 
 	 * @param fileName
 	 * @param parameter not used for now
-	 * @return dependencies for the given .tmx file
-	 */
+	 * @return dependencies for the given .tmx file */
 	@Override
-	public Array<AssetDescriptor> getDependencies(String fileName, Parameters parameter) {
+	public Array<AssetDescriptor> getDependencies (String fileName, Parameters parameter) {
 		Array<AssetDescriptor> dependencies = new Array<AssetDescriptor>();
 		try {
 			FileHandle tmxFile = resolve(fileName);
 			root = xml.parse(tmxFile);
-			boolean generateMipMaps = (parameter!=null?parameter.generateMipMaps: false);
+			boolean generateMipMaps = (parameter != null ? parameter.generateMipMaps : false);
 			TextureLoader.TextureParameter texParams = new TextureParameter();
 			texParams.genMipMaps = generateMipMaps;
-			for(FileHandle image: loadTilesets(root, tmxFile)) {
+			if (parameter != null) {
+				texParams.minFilter = parameter.textureMinFilter;
+				texParams.magFilter = parameter.textureMagFilter;
+			}
+			for (FileHandle image : loadTilesets(root, tmxFile)) {
 				dependencies.add(new AssetDescriptor(image.path(), Texture.class, texParams));
 			}
 			return dependencies;
@@ -163,28 +161,25 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			throw new GdxRuntimeException("Couldn't load tilemap '" + fileName + "'", e);
 		}
 	}
-	
-	/**
-	 * Loads the map data, given the XML root element and an {@link ImageResolver} used
-	 * to return the tileset Textures
-	 * @param root the XML root element 
+
+	/** Loads the map data, given the XML root element and an {@link ImageResolver} used to return the tileset Textures
+	 * @param root the XML root element
 	 * @param tmxFile the Filehandle of the tmx file
 	 * @param imageResolver the {@link ImageResolver}
-	 * @return the {@link TiledMap}
-	 */
-	protected TiledMap loadTilemap(Element root, FileHandle tmxFile, ImageResolver imageResolver) {
+	 * @return the {@link TiledMap} */
+	protected TiledMap loadTilemap (Element root, FileHandle tmxFile, ImageResolver imageResolver) {
 		TiledMap map = new TiledMap();
-		
+
 		String mapOrientation = root.getAttribute("orientation", null);
 		int mapWidth = root.getIntAttribute("width", 0);
 		int mapHeight = root.getIntAttribute("height", 0);
 		int tileWidth = root.getIntAttribute("tilewidth", 0);
 		int tileHeight = root.getIntAttribute("tileheight", 0);
 		String mapBackgroundColor = root.getAttribute("backgroundcolor", null);
-		
+
 		MapProperties mapProperties = map.getProperties();
 		if (mapOrientation != null) {
-			mapProperties.put("orientation", mapBackgroundColor);
+			mapProperties.put("orientation", mapOrientation);
 		}
 		mapProperties.put("width", mapWidth);
 		mapProperties.put("height", mapHeight);
@@ -195,7 +190,7 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 		}
 		mapWidthInPixels = mapWidth * tileWidth;
 		mapHeightInPixels = mapHeight * tileHeight;
-		
+
 		Element properties = root.getChildByName("properties");
 		if (properties != null) {
 			loadProperties(map.getProperties(), properties);
@@ -216,14 +211,12 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 		}
 		return map;
 	}
-	
-	/**
-	 * Loads the tilesets
+
+	/** Loads the tilesets
 	 * @param root the root XML element
 	 * @return a list of filenames for images containing tiles
-	 * @throws IOException 
-	 */
-	protected Array<FileHandle> loadTilesets(Element root, FileHandle tmxFile) throws IOException {
+	 * @throws IOException */
+	protected Array<FileHandle> loadTilesets (Element root, FileHandle tmxFile) throws IOException {
 		Array<FileHandle> images = new Array<FileHandle>();
 		for (Element tileset : root.getChildrenByName("tileset")) {
 			String source = tileset.getAttribute("source", null);
@@ -242,14 +235,13 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 		return images;
 	}
 
-	/**
-	 * Loads the specified tileset data, adding it to the collection of the specified map, given the XML element, the tmxFile 
-	 * and an {@link ImageResolver} used to retrieve the tileset Textures.
-	 *
+	/** Loads the specified tileset data, adding it to the collection of the specified map, given the XML element, the tmxFile and
+	 * an {@link ImageResolver} used to retrieve the tileset Textures.
+	 * 
 	 * <p>
 	 * Default tileset's property keys that are loaded by default are:
 	 * </p>
-	 *
+	 * 
 	 * <ul>
 	 * <li><em>firstgid</em>, (int, defaults to 1) the first valid global id used for tile numbering</li>
 	 * <li><em>imagesource</em>, (String, defaults to empty string) the tileset source image filename</li>
@@ -260,23 +252,22 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 	 * <li><em>margin</em>, (int, defaults to 0) the tileset margin</li>
 	 * <li><em>spacing</em>, (int, defaults to 0) the tileset spacing</li>
 	 * </ul>
-	 *
+	 * 
 	 * <p>
 	 * The values are extracted from the specified Tmx file, if a value can't be found then the default is used.
 	 * </p>
 	 * @param map the Map whose tilesets collection will be populated
 	 * @param element the XML element identifying the tileset to load
 	 * @param tmxFile the Filehandle of the tmx file
-	 * @param imageResolver the {@link ImageResolver}
-	 */
-	protected void loadTileSet(TiledMap map, Element element, FileHandle tmxFile, ImageResolver imageResolver) {
+	 * @param imageResolver the {@link ImageResolver} */
+	protected void loadTileSet (TiledMap map, Element element, FileHandle tmxFile, ImageResolver imageResolver) {
 		if (element.getName().equals("tileset")) {
 			String name = element.get("name", null);
 			int firstgid = element.getIntAttribute("firstgid", 1);
 			int tilewidth = element.getIntAttribute("tilewidth", 0);
 			int tileheight = element.getIntAttribute("tileheight", 0);
 			int spacing = element.getIntAttribute("spacing", 0);
-			int margin = element.getIntAttribute("margin", 0);			
+			int margin = element.getIntAttribute("margin", 0);
 			String source = element.getAttribute("source", null);
 
 			String imageSource = "";
@@ -324,7 +315,7 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			int stopHeight = texture.getRegionHeight() - tileheight;
 
 			int id = firstgid;
-			
+
 			for (int y = margin; y <= stopHeight; y += tileheight + spacing) {
 				for (int x = margin; x <= stopWidth; x += tilewidth + spacing) {
 					TextureRegion tileRegion = new TextureRegion(texture, x, y, tilewidth, tileheight);
@@ -336,33 +327,32 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 					tileset.putTile(id++, tile);
 				}
 			}
-			
+
 			Array<Element> tileElements = element.getChildrenByName("tile");
-			
+
 			for (Element tileElement : tileElements) {
 				int localtid = tileElement.getIntAttribute("id", 0);
 				TiledMapTile tile = tileset.getTile(firstgid + localtid);
-				if (tile!= null) {
+				if (tile != null) {
 					Element properties = tileElement.getChildByName("properties");
 					if (properties != null) {
 						loadProperties(tile.getProperties(), properties);
 					}
 				}
 			}
-			
+
 			Element properties = element.getChildByName("properties");
 			if (properties != null) {
 				loadProperties(tileset.getProperties(), properties);
 			}
 			map.getTileSets().addTileSet(tileset);
-		}		
+		}
 	}
-		
+
 	/** Load one layer (a 'layer' tag).
 	 * @param map
-	 * @param element
-	 */
-	protected void loadTileLayer(TiledMap map, Element element) {
+	 * @param element */
+	protected void loadTileLayer (TiledMap map, Element element) {
 		if (element.getName().equals("layer")) {
 			String name = element.getAttribute("name", null);
 			int width = element.getIntAttribute("width", 0);
@@ -375,92 +365,57 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			layer.setVisible(visible);
 			layer.setOpacity(opacity);
 			layer.setName(name);
-			
+
 			TiledMapTileSets tilesets = map.getTileSets();
-			
+
 			Element data = element.getChildByName("data");
 			String encoding = data.getAttribute("encoding", null);
 			String compression = data.getAttribute("compression", null);
-			if (encoding == null) {	  // no 'encoding' attribute means that the encoding is XML
+			if (encoding == null) { // no 'encoding' attribute means that the encoding is XML
 				throw new GdxRuntimeException("Unsupported encoding (XML) for TMX Layer Data");
 			}
 			if (encoding.equals("csv")) {
 				String[] array = data.getText().split(",");
 				for (int y = 0; y < height; y++) {
 					for (int x = 0; x < width; x++) {
-						int id = (int) Long.parseLong(array[y * width + x].trim());
-						
+						int id = (int)Long.parseLong(array[y * width + x].trim());
+
 						final boolean flipHorizontally = ((id & FLAG_FLIP_HORIZONTALLY) != 0);
 						final boolean flipVertically = ((id & FLAG_FLIP_VERTICALLY) != 0);
 						final boolean flipDiagonally = ((id & FLAG_FLIP_DIAGONALLY) != 0);
 
 						id = id & ~MASK_CLEAR;
-						
+
 						tilesets.getTile(id);
 						TiledMapTile tile = tilesets.getTile(id);
 						if (tile != null) {
-							Cell cell = new Cell();
-							if (flipDiagonally) {
-								if (flipHorizontally && flipVertically) {
-									cell.setFlipHorizontally(true);
-									cell.setRotation(Cell.ROTATE_270);
-								} else if (flipHorizontally) {
-									cell.setRotation(Cell.ROTATE_270);
-								} else if (flipVertically) {
-									cell.setRotation(Cell.ROTATE_90);
-								} else {
-									cell.setFlipVertically(true);
-									cell.setRotation(Cell.ROTATE_270);
-								}
-							} else {
-								cell.setFlipHorizontally(flipHorizontally);
-								cell.setFlipVertically(flipVertically);
-							}
+							Cell cell = createTileLayerCell(flipHorizontally, flipVertically, flipDiagonally);
 							cell.setTile(tile);
 							layer.setCell(x, yUp ? height - 1 - y : y, cell);
 						}
 					}
 				}
 			} else {
-				if(encoding.equals("base64")) {
+				if (encoding.equals("base64")) {
 					byte[] bytes = Base64Coder.decode(data.getText());
 					if (compression == null) {
 						int read = 0;
 						for (int y = 0; y < height; y++) {
 							for (int x = 0; x < width; x++) {
-								
-								int id =
-								unsignedByteToInt(bytes[read++]) |
-								unsignedByteToInt(bytes[read++]) << 8 |
-								unsignedByteToInt(bytes[read++]) << 16 |
-								unsignedByteToInt(bytes[read++]) << 24;
-								
+
+								int id = unsignedByteToInt(bytes[read++]) | unsignedByteToInt(bytes[read++]) << 8
+									| unsignedByteToInt(bytes[read++]) << 16 | unsignedByteToInt(bytes[read++]) << 24;
+
 								final boolean flipHorizontally = ((id & FLAG_FLIP_HORIZONTALLY) != 0);
 								final boolean flipVertically = ((id & FLAG_FLIP_VERTICALLY) != 0);
 								final boolean flipDiagonally = ((id & FLAG_FLIP_DIAGONALLY) != 0);
 
 								id = id & ~MASK_CLEAR;
-								
+
 								tilesets.getTile(id);
 								TiledMapTile tile = tilesets.getTile(id);
 								if (tile != null) {
-									Cell cell = new Cell();
-									if (flipDiagonally) {
-										if (flipHorizontally && flipVertically) {
-											cell.setFlipHorizontally(true);
-											cell.setRotation(Cell.ROTATE_270);
-										} else if (flipHorizontally) {
-											cell.setRotation(Cell.ROTATE_270);
-										} else if (flipVertically) {
-											cell.setRotation(Cell.ROTATE_90);
-										} else {
-											cell.setFlipVertically(true);
-											cell.setRotation(Cell.ROTATE_270);
-										}
-									} else {
-										cell.setFlipHorizontally(flipHorizontally);
-										cell.setFlipVertically(flipVertically);
-									}
+									Cell cell = createTileLayerCell(flipHorizontally, flipVertically, flipDiagonally);
 									cell.setTile(tile);
 									layer.setCell(x, yUp ? height - 1 - y : y, cell);
 								}
@@ -479,38 +434,19 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 							for (int x = 0; x < width; x++) {
 								try {
 									GZIS.read(temp, 0, 4);
-									int id =
-									unsignedByteToInt(temp[0]) |
-									unsignedByteToInt(temp[1]) << 8 |
-									unsignedByteToInt(temp[2]) << 16 |
-									unsignedByteToInt(temp[3]) << 24;
+									int id = unsignedByteToInt(temp[0]) | unsignedByteToInt(temp[1]) << 8
+										| unsignedByteToInt(temp[2]) << 16 | unsignedByteToInt(temp[3]) << 24;
 
 									final boolean flipHorizontally = ((id & FLAG_FLIP_HORIZONTALLY) != 0);
 									final boolean flipVertically = ((id & FLAG_FLIP_VERTICALLY) != 0);
 									final boolean flipDiagonally = ((id & FLAG_FLIP_DIAGONALLY) != 0);
 
 									id = id & ~MASK_CLEAR;
-									
+
 									tilesets.getTile(id);
 									TiledMapTile tile = tilesets.getTile(id);
 									if (tile != null) {
-										Cell cell = new Cell();
-										if (flipDiagonally) {
-											if (flipHorizontally && flipVertically) {
-												cell.setFlipHorizontally(true);
-												cell.setRotation(Cell.ROTATE_270);
-											} else if (flipHorizontally) {
-												cell.setRotation(Cell.ROTATE_270);
-											} else if (flipVertically) {
-												cell.setRotation(Cell.ROTATE_90);
-											} else {
-												cell.setFlipVertically(true);
-												cell.setRotation(Cell.ROTATE_270);
-											}
-										} else {
-											cell.setFlipHorizontally(flipHorizontally);
-											cell.setFlipVertically(flipVertically);
-										}
+										Cell cell = createTileLayerCell(flipHorizontally, flipVertically, flipDiagonally);
 										cell.setTile(tile);
 										layer.setCell(x, yUp ? height - 1 - y : y, cell);
 									}
@@ -521,7 +457,7 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 						}
 					} else if (compression.equals("zlib")) {
 						Inflater zlib = new Inflater();
-						
+
 						byte[] temp = new byte[4];
 
 						zlib.setInput(bytes, 0, bytes.length);
@@ -530,50 +466,31 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 							for (int x = 0; x < width; x++) {
 								try {
 									zlib.inflate(temp, 0, 4);
-									int id =
-									unsignedByteToInt(temp[0]) |
-									unsignedByteToInt(temp[1]) << 8 |
-									unsignedByteToInt(temp[2]) << 16 |
-									unsignedByteToInt(temp[3]) << 24;
-									
+									int id = unsignedByteToInt(temp[0]) | unsignedByteToInt(temp[1]) << 8
+										| unsignedByteToInt(temp[2]) << 16 | unsignedByteToInt(temp[3]) << 24;
+
 									final boolean flipHorizontally = ((id & FLAG_FLIP_HORIZONTALLY) != 0);
 									final boolean flipVertically = ((id & FLAG_FLIP_VERTICALLY) != 0);
 									final boolean flipDiagonally = ((id & FLAG_FLIP_DIAGONALLY) != 0);
 
 									id = id & ~MASK_CLEAR;
-									
+
 									tilesets.getTile(id);
 									TiledMapTile tile = tilesets.getTile(id);
 									if (tile != null) {
-										Cell cell = new Cell();
-										if (flipDiagonally) {
-											if (flipHorizontally && flipVertically) {
-												cell.setFlipHorizontally(true);
-												cell.setRotation(Cell.ROTATE_270);
-											} else if (flipHorizontally) {
-												cell.setRotation(Cell.ROTATE_270);
-											} else if (flipVertically) {
-												cell.setRotation(Cell.ROTATE_90);
-											} else {
-												cell.setFlipVertically(true);
-												cell.setRotation(Cell.ROTATE_270);
-											}
-										} else {
-											cell.setFlipHorizontally(flipHorizontally);
-											cell.setFlipVertically(flipVertically);
-										}
+										Cell cell = createTileLayerCell(flipHorizontally, flipVertically, flipDiagonally);
 										cell.setTile(tile);
 										layer.setCell(x, yUp ? height - 1 - y : y, cell);
 									}
-			
+
 								} catch (DataFormatException e) {
 									throw new GdxRuntimeException("Error Reading TMX Layer Data.", e);
 								}
 							}
 						}
 					}
-				}
-				else {         // any other value of 'encoding' is one we're not aware of, probably a feature of a future version of Tiled or another editor
+				} else {
+					// any other value of 'encoding' is one we're not aware of, probably a feature of a future version of Tiled
 					throw new GdxRuntimeException("Unrecognised encoding (" + encoding + ") for TMX Layer Data");
 				}
 			}
@@ -582,10 +499,10 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 				loadProperties(layer.getProperties(), properties);
 			}
 			map.getLayers().add(layer);
-		}		
+		}
 	}
-	
-	protected void loadObjectGroup(TiledMap map, Element element) {
+
+	protected void loadObjectGroup (TiledMap map, Element element) {
 		if (element.getName().equals("objectgroup")) {
 			String name = element.getAttribute("name", null);
 			MapLayer layer = new MapLayer();
@@ -594,7 +511,7 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			if (properties != null) {
 				loadProperties(layer.getProperties(), properties);
 			}
-			
+
 			for (Element objectElement : element.getChildrenByName("object")) {
 				loadObject(layer, objectElement);
 			}
@@ -602,17 +519,17 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			map.getLayers().add(layer);
 		}
 	}
-	
-	protected void loadObject(MapLayer layer, Element element) {
+
+	protected void loadObject (MapLayer layer, Element element) {
 		if (element.getName().equals("object")) {
 			MapObject object = null;
-			
+
 			int x = element.getIntAttribute("x", 0);
 			int y = (yUp ? mapHeightInPixels - element.getIntAttribute("y", 0) : element.getIntAttribute("y", 0));
 
 			int width = element.getIntAttribute("width", 0);
 			int height = element.getIntAttribute("height", 0);
-			
+
 			if (element.getChildCount() > 0) {
 				Element child = null;
 				if ((child = element.getChildByName("polygon")) != null) {
@@ -665,8 +582,8 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			layer.getObjects().add(object);
 		}
 	}
-	
-	protected void loadProperties(MapProperties properties, Element element) {
+
+	protected void loadProperties (MapProperties properties, Element element) {
 		if (element.getName().equals("properties")) {
 			for (Element property : element.getChildrenByName("property")) {
 				String name = property.getAttribute("name", null);
@@ -678,8 +595,29 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 			}
 		}
 	}
-	
-	protected static FileHandle getRelativeFileHandle(FileHandle file, String path) {
+
+	protected Cell createTileLayerCell (boolean flipHorizontally, boolean flipVertically, boolean flipDiagonally) {
+		Cell cell = new Cell();
+		if (flipDiagonally) {
+			if (flipHorizontally && flipVertically) {
+				cell.setFlipHorizontally(true);
+				cell.setRotation(yUp ? Cell.ROTATE_270 : Cell.ROTATE_90);
+			} else if (flipHorizontally) {
+				cell.setRotation(yUp ? Cell.ROTATE_270 : Cell.ROTATE_90);
+			} else if (flipVertically) {
+				cell.setRotation(yUp ? Cell.ROTATE_90 : Cell.ROTATE_270);
+			} else {
+				cell.setFlipVertically(true);
+				cell.setRotation(yUp ? Cell.ROTATE_270 : Cell.ROTATE_90);
+			}
+		} else {
+			cell.setFlipHorizontally(flipHorizontally);
+			cell.setFlipVertically(flipVertically);
+		}
+		return cell;
+	}
+
+	protected static FileHandle getRelativeFileHandle (FileHandle file, String path) {
 		StringTokenizer tokenizer = new StringTokenizer(path, "\\/");
 		FileHandle result = file.parent();
 		while (tokenizer.hasMoreElements()) {
@@ -690,11 +628,11 @@ public class TmxMapLoader extends AsynchronousAssetLoader<TiledMap, TmxMapLoader
 				result = result.child(token);
 			}
 		}
-		return result;		
+		return result;
 	}
-	
+
 	protected static int unsignedByteToInt (byte b) {
-		return (int) b & 0xFF;
+		return (int)b & 0xFF;
 	}
 
 }
diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java
new file mode 100644
index 0000000..4362e33
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/maps/tiled/renderers/HexagonalTiledMapRenderer.java
@@ -0,0 +1,203 @@
+/*******************************************************************************
+ * Copyright 2013 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.maps.tiled.renderers;
+
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.C1;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.C2;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.C3;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.C4;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.U1;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.U2;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.U3;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.U4;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.V1;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.V2;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.V3;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.V4;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.X1;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.X2;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.X3;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.X4;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.Y1;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.Y2;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.Y3;
+import static com.badlogic.gdx.graphics.g2d.SpriteBatch.Y4;
+
+import com.badlogic.gdx.graphics.Color;
+import com.badlogic.gdx.graphics.g2d.SpriteBatch;
+import com.badlogic.gdx.graphics.g2d.TextureRegion;
+import com.badlogic.gdx.maps.MapObject;
+import com.badlogic.gdx.maps.tiled.TiledMap;
+import com.badlogic.gdx.maps.tiled.TiledMapTile;
+import com.badlogic.gdx.maps.tiled.TiledMapTileLayer;
+import com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile;
+
+public class HexagonalTiledMapRenderer extends BatchTiledMapRenderer {
+
+	private boolean yDown = false;
+
+	public boolean isYdown() {
+		return yDown;
+	}
+	
+	public void setYDown(boolean yDown) {
+		this.yDown = yDown;
+	}
+	
+	public HexagonalTiledMapRenderer (TiledMap map) {
+		super(map);
+	}
+
+	public HexagonalTiledMapRenderer (TiledMap map, float unitScale) {
+		super(map, unitScale);
+	}
+
+	public HexagonalTiledMapRenderer (TiledMap map, SpriteBatch spriteBatch) {
+		super(map, spriteBatch);
+	}
+
+	public HexagonalTiledMapRenderer (TiledMap map, float unitScale, SpriteBatch spriteBatch) {
+		super(map, unitScale, spriteBatch);
+	}
+	
+	private float[] vertices = new float[20];
+	
+	@Override
+	public void renderTileLayer(TiledMapTileLayer layer) {
+		
+		final float color = Color.toFloatBits(1, 1, 1, layer.getOpacity());
+		
+		final int layerWidth = layer.getWidth();
+		final int layerHeight = layer.getHeight();
+		
+		final float layerTileWidth = layer.getTileWidth() * unitScale;
+		final float layerTileHeight = layer.getTileHeight() * unitScale;
+		
+		final float layerTileWidth25 = layerTileWidth * 0.25f;
+		final float layerTileWidth50 = layerTileWidth * 0.50f;
+		final float layerTileWidth75 = layerTileWidth * 0.75f;
+		
+		final float layerTileHeight50 = layerTileHeight * 0.50f;
+		final float layerTileHeight150 = layerTileHeight * 1.50f;
+		
+		final int col1 = Math.max(0, (int) (((viewBounds.x - layerTileWidth25) / layerTileWidth75)));
+		final int col2 = Math.min(layerWidth, (int) ((viewBounds.x + viewBounds.width + layerTileWidth75) / layerTileWidth75));
+	
+		final int row1 = Math.max(0, (int) ((viewBounds.y / layerTileHeight150)));
+		final int row2 = Math.min(layerHeight, (int) ((viewBounds.y + viewBounds.height + layerTileHeight150) / layerTileHeight));
+		
+		final float[] vertices = this.vertices;
+		
+		for (int row = row1; row < row2; row++) {
+			for (int col = col1; col < col2; col++) {
+				
+				float x = layerTileWidth75 * col;
+				float y = (col % 2 == (yDown ? 0 : 1) ? 0 : layerTileHeight50) + (layerTileHeight * row);
+				
+				final TiledMapTileLayer.Cell cell = layer.getCell(col, row);
+				if(cell == null) {
+					x += layerTileWidth;
+					continue;
+				}
+				final TiledMapTile tile = cell.getTile();
+				if (tile != null) {
+					if (tile instanceof AnimatedTiledMapTile) continue;
+					
+					final boolean flipX = cell.getFlipHorizontally();
+					final boolean flipY = cell.getFlipVertically();
+					final int rotations = cell.getRotation();
+					
+					TextureRegion region = tile.getTextureRegion();
+					
+					float x1 = x;
+					float y1 = y;
+					float x2 = x1 + region.getRegionWidth() * unitScale;
+					float y2 = y1 + region.getRegionHeight() * unitScale;
+					
+					float u1 = region.getU();
+					float v1 = region.getV2();
+					float u2 = region.getU2();
+					float v2 = region.getV();
+					
+					vertices[X1] = x1;
+					vertices[Y1] = y1;
+					vertices[C1] = color;
+					vertices[U1] = u1;
+					vertices[V1] = v1;
+					
+					vertices[X2] = x1;
+					vertices[Y2] = y2;
+					vertices[C2] = color;
+					vertices[U2] = u1;
+					vertices[V2] = v2;
+					
+					vertices[X3] = x2;
+					vertices[Y3] = y2;
+					vertices[C3] = color;
+					vertices[U3] = u2;
+					vertices[V3] = v2;
+					
+					vertices[X4] = x2;
+					vertices[Y4] = y1;
+					vertices[C4] = color;
+					vertices[U4] = u2;
+					vertices[V4] = v1;							
+					
+					if (flipX) {
+						float temp = vertices[U1];
+						vertices[U1] = vertices[U3];
+						vertices[U3] = temp;
+						temp = vertices[U2];
+						vertices[U2] = vertices[U4];
+						vertices[U4] = temp;
+					}
+					if (flipY) {
+						float temp = vertices[V1];
+						vertices[V1] = vertices[V3];
+						vertices[V3] = temp;
+						temp = vertices[V2];
+						vertices[V2] = vertices[V4];
+						vertices[V4] = temp;
+					}
+					if (rotations == 2) {
+						float tempU = vertices[U1];
+						vertices[U1] = vertices[U3];
+						vertices[U3] = tempU;
+						tempU = vertices[U2];
+						vertices[U2] = vertices[U4];
+						vertices[U4] = tempU;									
+						float tempV = vertices[V1];
+						vertices[V1] = vertices[V3];
+						vertices[V3] = tempV;
+						tempV = vertices[V2];
+						vertices[V2] = vertices[V4];
+						vertices[V4] = tempV;
+						break;
+					}
+					spriteBatch.draw(region.getTexture(), vertices, 0, 20);
+				}
+			}
+		}
+		
+	}
+	
+	@Override
+	public void renderObject(MapObject object) {
+
+	}
+	
+}
diff --git a/gdx/src/com/badlogic/gdx/math/Circle.java b/gdx/src/com/badlogic/gdx/math/Circle.java
index d109585..9e5f8f8 100644
--- a/gdx/src/com/badlogic/gdx/math/Circle.java
+++ b/gdx/src/com/badlogic/gdx/math/Circle.java
@@ -44,6 +44,12 @@ public class Circle implements Serializable {
 		this.radius = radius;
 	}
 
+	public void set (Circle circle) { 
+		x = circle.x;
+		y = circle.y;
+		radius = circle.radius;
+	}
+	
 	public boolean contains (float x, float y) {
 		x = this.x - x;
 		y = this.y - y;
diff --git a/gdx/src/com/badlogic/gdx/math/Ellipse.java b/gdx/src/com/badlogic/gdx/math/Ellipse.java
index 22b169b..76218d2 100755
--- a/gdx/src/com/badlogic/gdx/math/Ellipse.java
+++ b/gdx/src/com/badlogic/gdx/math/Ellipse.java
@@ -11,7 +11,6 @@ public class Ellipse implements Serializable {
 
 	public float x, y;
 	public float width, height;
-	private float halfWidth, halfHeight;
 
 	private static final long serialVersionUID = 7381533206532032099L;
 
@@ -37,10 +36,8 @@ public class Ellipse implements Serializable {
 	public boolean contains (float x, float y) {
 		x = x - this.x;
 		y = y - this.y;
-		halfWidth = width * 0.5f;
-		halfHeight = height * 0.5f;
 
-		return (x * x) / (halfWidth * halfWidth) + (y * y) / (halfHeight * halfHeight) <= 1.0f;
+		return (x * x) / (width * 0.5f * width * 0.5f) + (y * y) / (height * 0.5f * height * 0.5f) <= 1.0f;
 	}
 
 	public boolean contains (Vector2 point) {
@@ -54,4 +51,11 @@ public class Ellipse implements Serializable {
 		this.height = height;
 	}
 
+	public void set (Ellipse ellipse) { 
+		x = ellipse.x;
+		y = ellipse.y;
+		width = ellipse.width;
+		height = ellipse.height;
+	}
+	
 }
diff --git a/gdx/src/com/badlogic/gdx/math/Intersector.java b/gdx/src/com/badlogic/gdx/math/Intersector.java
index ff950c6..743239d 100644
--- a/gdx/src/com/badlogic/gdx/math/Intersector.java
+++ b/gdx/src/com/badlogic/gdx/math/Intersector.java
@@ -91,7 +91,7 @@ public final class Intersector {
 		float t = -(start.dot(plane.getNormal()) + plane.getD()) / denom;
 		if (t < 0 || t > 1) return false;
 
-		intersection.set(start).add(dir.mul(t));
+		intersection.set(start).add(dir.scl(t));
 		return true;
 	}
 
@@ -153,7 +153,7 @@ public final class Intersector {
 		else if (t > 1.0f) return point.dst(end); // Beyond 'end'-end of the segment
 
 		tmp.set(end.x, end.y, 0); // Projection falls on the segment
-		tmp.sub(start.x, start.y, 0).mul(t).add(start.x, start.y, 0);
+		tmp.sub(start.x, start.y, 0).scl(t).add(start.x, start.y, 0);
 		return tmp2.set(point.x, point.y, 0).dst(tmp);
 	}
 
@@ -180,7 +180,7 @@ public final class Intersector {
 		} else if (u >= l) {
 			tmp2.set(end.x, end.y, 0);
 		} else {
-			tmp3.set(tmp.mul(u)); // remember tmp is already normalized
+			tmp3.set(tmp.scl(u)); // remember tmp is already normalized
 			tmp2.set(tmp3.x + start.x, tmp3.y + start.y, 0);
 		}
 
@@ -206,7 +206,7 @@ public final class Intersector {
 		u /= d * d;
 		if (u < 0 || u > 1) return Float.POSITIVE_INFINITY;
 		tmp.set(end.x, end.y, 0).sub(start.x, start.y, 0);
-		tmp2.set(start.x, start.y, 0).add(tmp.mul(u));
+		tmp2.set(start.x, start.y, 0).add(tmp.scl(u));
 		d = tmp2.dst(point.x, point.y, 0);
 		if (d < radius) {
 			displacement.set(point).sub(tmp2.x, tmp2.y).nor();
@@ -228,7 +228,7 @@ public final class Intersector {
 			float t = -(ray.origin.dot(plane.getNormal()) + plane.getD()) / denom;
 			if (t < 0) return false;
 
-			if (intersection != null) intersection.set(ray.origin).add(ray.direction.tmp().mul(t));
+			if (intersection != null) intersection.set(ray.origin).add(ray.direction.tmp().scl(t));
 			return true;
 		} else if (plane.testPoint(ray.origin) == Plane.PlaneSide.OnPlane) {
 			if (intersection != null) intersection.set(ray.origin);
@@ -254,7 +254,7 @@ public final class Intersector {
 		float denom = direction.dot(plane.getNormal());
 		if (denom != 0) {
 			float t = -(origin.dot(plane.getNormal()) + plane.getD()) / denom;
-			if (t >= 0 && t <= 1 && intersection != null) intersection.set(origin).add(direction.mul(t));
+			if (t >= 0 && t <= 1 && intersection != null) intersection.set(origin).add(direction.scl(t));
 			return t;
 		} else if (plane.testPoint(origin) == Plane.PlaneSide.OnPlane) {
 			if (intersection != null) intersection.set(origin);
@@ -349,12 +349,12 @@ public final class Intersector {
 
 		// if t0 is less than zero, the intersection point is at t1
 		if (t0 < 0) {
-			if (intersection != null) intersection.set(start).add(dir.tmp().mul(t1));
+			if (intersection != null) intersection.set(start).add(dir.tmp().scl(t1));
 			return true;
 		}
 		// else the intersection point is at t0
 		else {
-			if (intersection != null) intersection.set(start).add(dir.tmp().mul(t0));
+			if (intersection != null) intersection.set(start).add(dir.tmp().scl(t0));
 			return true;
 		}
 	}
@@ -381,7 +381,7 @@ public final class Intersector {
 		if (ray.origin.x <= box.min.x && ray.direction.x > 0) {
 			t = (box.min.x - ray.origin.x) / ray.direction.x;
 			if (t >= 0) {
-				Vector3.tmp3.set(ray.direction).mul(t).add(ray.origin);
+				Vector3.tmp3.set(ray.direction).scl(t).add(ray.origin);
 				if (Vector3.tmp3.y >= box.min.y && Vector3.tmp3.y <= box.max.y && Vector3.tmp3.z >= box.min.z
 					&& Vector3.tmp3.z <= box.max.z && (!hit || t < lowest)) {
 					hit = true;
@@ -393,7 +393,7 @@ public final class Intersector {
 		if (ray.origin.x >= box.max.x && ray.direction.x < 0) {
 			t = (box.max.x - ray.origin.x) / ray.direction.x;
 			if (t >= 0) {
-				Vector3.tmp3.set(ray.direction).mul(t).add(ray.origin);
+				Vector3.tmp3.set(ray.direction).scl(t).add(ray.origin);
 				if (Vector3.tmp3.y >= box.min.y && Vector3.tmp3.y <= box.max.y && Vector3.tmp3.z >= box.min.z
 					&& Vector3.tmp3.z <= box.max.z && (!hit || t < lowest)) {
 					hit = true;
@@ -405,7 +405,7 @@ public final class Intersector {
 		if (ray.origin.y <= box.min.y && ray.direction.y > 0) {
 			t = (box.min.y - ray.origin.y) / ray.direction.y;
 			if (t >= 0) {
-				Vector3.tmp3.set(ray.direction).mul(t).add(ray.origin);
+				Vector3.tmp3.set(ray.direction).scl(t).add(ray.origin);
 				if (Vector3.tmp3.x >= box.min.x && Vector3.tmp3.x <= box.max.x && Vector3.tmp3.z >= box.min.z
 					&& Vector3.tmp3.z <= box.max.z && (!hit || t < lowest)) {
 					hit = true;
@@ -417,7 +417,7 @@ public final class Intersector {
 		if (ray.origin.y >= box.max.y && ray.direction.y < 0) {
 			t = (box.max.y - ray.origin.y) / ray.direction.y;
 			if (t >= 0) {
-				Vector3.tmp3.set(ray.direction).mul(t).add(ray.origin);
+				Vector3.tmp3.set(ray.direction).scl(t).add(ray.origin);
 				if (Vector3.tmp3.x >= box.min.x && Vector3.tmp3.x <= box.max.x && Vector3.tmp3.z >= box.min.z
 					&& Vector3.tmp3.z <= box.max.z && (!hit || t < lowest)) {
 					hit = true;
@@ -429,7 +429,7 @@ public final class Intersector {
 		if (ray.origin.z <= box.min.y && ray.direction.z > 0) {
 			t = (box.min.z - ray.origin.z) / ray.direction.z;
 			if (t >= 0) {
-				Vector3.tmp3.set(ray.direction).mul(t).add(ray.origin);
+				Vector3.tmp3.set(ray.direction).scl(t).add(ray.origin);
 				if (Vector3.tmp3.x >= box.min.x && Vector3.tmp3.x <= box.max.x && Vector3.tmp3.y >= box.min.y
 					&& Vector3.tmp3.y <= box.max.y && (!hit || t < lowest)) {
 					hit = true;
@@ -441,7 +441,7 @@ public final class Intersector {
 		if (ray.origin.z >= box.max.z && ray.direction.z < 0) {
 			t = (box.max.z - ray.origin.z) / ray.direction.z;
 			if (t >= 0) {
-				Vector3.tmp3.set(ray.direction).mul(t).add(ray.origin);
+				Vector3.tmp3.set(ray.direction).scl(t).add(ray.origin);
 				if (Vector3.tmp3.x >= box.min.x && Vector3.tmp3.x <= box.max.x && Vector3.tmp3.y >= box.min.y
 					&& Vector3.tmp3.y <= box.max.y && (!hit || t < lowest)) {
 					hit = true;
@@ -450,7 +450,7 @@ public final class Intersector {
 			}
 		}
 		if (hit && intersection != null) {
-			intersection.set(ray.direction).mul(lowest).add(ray.origin);
+			intersection.set(ray.direction).scl(lowest).add(ray.origin);
 		}
 		return hit;
 	}
diff --git a/gdx/src/com/badlogic/gdx/math/MathUtils.java b/gdx/src/com/badlogic/gdx/math/MathUtils.java
index 051d58b..7cb6d00 100644
--- a/gdx/src/com/badlogic/gdx/math/MathUtils.java
+++ b/gdx/src/com/badlogic/gdx/math/MathUtils.java
@@ -32,7 +32,7 @@ public class MathUtils {
 	static public final float PI = 3.1415927f;
 	static public final float PI2 = PI * 2;
 
-	static private final int SIN_BITS = 13; // Adjust for accuracy.
+	static private final int SIN_BITS = 14; // 16KB. Adjust for accuracy.
 	static private final int SIN_MASK = ~(-1 << SIN_BITS);
 	static private final int SIN_COUNT = SIN_MASK + 1;
 
@@ -56,16 +56,6 @@ public class MathUtils {
 		}
 	}
 
-	static private class Cos {
-		static final float[] table = new float[SIN_COUNT];
-		static {
-			for (int i = 0; i < SIN_COUNT; i++)
-				table[i] = (float)Math.cos((i + 0.5f) / SIN_COUNT * radFull);
-			for (int i = 0; i < 360; i += 90)
-				table[(int)(i * degToIndex) & SIN_MASK] = (float)Math.cos(i * degreesToRadians);
-		}
-	}
-
 	/** Returns the sine in radians. */
 	static public final float sin (float radians) {
 		return Sin.table[(int)(radians * radToIndex) & SIN_MASK];
@@ -73,7 +63,7 @@ public class MathUtils {
 
 	/** Returns the cosine in radians. */
 	static public final float cos (float radians) {
-		return Cos.table[(int)(radians * radToIndex) & SIN_MASK];
+		return Sin.table[(int)((radians + PI / 2) * radToIndex) & SIN_MASK];
 	}
 
 	/** Returns the sine in radians. */
@@ -83,7 +73,7 @@ public class MathUtils {
 
 	/** Returns the cosine in radians. */
 	static public final float cosDeg (float degrees) {
-		return Cos.table[(int)(degrees * degToIndex) & SIN_MASK];
+		return Sin.table[(int)((degrees + 90) * degToIndex) & SIN_MASK];
 	}
 
 	// ---
@@ -128,10 +118,9 @@ public class MathUtils {
 			add = 0;
 		}
 		float invDiv = 1 / ((x < y ? y : x) * INV_ATAN2_DIM_MINUS_1);
-		
-		if (invDiv == Float.POSITIVE_INFINITY)
-			return ((float)Math.atan2(y, x) + add) * mul;
-		
+
+		if (invDiv == Float.POSITIVE_INFINITY) return ((float)Math.atan2(y, x) + add) * mul;
+
 		int xi = (int)(x * invDiv);
 		int yi = (int)(y * invDiv);
 		return (Atan2.table[yi * ATAN2_DIM + xi] + add) * mul;
@@ -214,8 +203,8 @@ public class MathUtils {
 	static private final int BIG_ENOUGH_INT = 16 * 1024;
 	static private final double BIG_ENOUGH_FLOOR = BIG_ENOUGH_INT;
 	static private final double CEIL = 0.9999999;
-//	static private final double BIG_ENOUGH_CEIL = NumberUtils
-//		.longBitsToDouble(NumberUtils.doubleToLongBits(BIG_ENOUGH_INT + 1) - 1);
+// static private final double BIG_ENOUGH_CEIL = NumberUtils
+// .longBitsToDouble(NumberUtils.doubleToLongBits(BIG_ENOUGH_INT + 1) - 1);
 	static private final double BIG_ENOUGH_CEIL = 16384.999999999996;
 	static private final double BIG_ENOUGH_ROUND = BIG_ENOUGH_INT + 0.5f;
 
diff --git a/gdx/src/com/badlogic/gdx/math/Matrix4.java b/gdx/src/com/badlogic/gdx/math/Matrix4.java
index 99a0bba..f05794a 100644
--- a/gdx/src/com/badlogic/gdx/math/Matrix4.java
+++ b/gdx/src/com/badlogic/gdx/math/Matrix4.java
@@ -646,7 +646,7 @@ public class Matrix4 implements Serializable {
 	public Matrix4 setToLookAt (Vector3 position, Vector3 target, Vector3 up) {
 		tmpVec.set(target).sub(position);
 		setToLookAt(tmpVec, up);
-		this.mul(tmpMat.setToTranslation(position.tmp().mul(-1)));
+		this.mul(tmpMat.setToTranslation(position.tmp().scl(-1)));
 
 		return this;
 	}
diff --git a/gdx/src/com/badlogic/gdx/math/Vector2.java b/gdx/src/com/badlogic/gdx/math/Vector2.java
index 48bad38..a4a8f2e 100644
--- a/gdx/src/com/badlogic/gdx/math/Vector2.java
+++ b/gdx/src/com/badlogic/gdx/math/Vector2.java
@@ -172,15 +172,15 @@ public class Vector2 implements Serializable, Vector<Vector2> {
 	}
 
 	public Vector2 div (float value) {
-		return this.mul(1 / value);
+		return this.scl(1 / value);
 	}
 
 	public Vector2 div (float vx, float vy) {
-		return this.mul(1 / vx, 1 / vy);
+		return this.scl(1 / vx, 1 / vy);
 	}
 
 	public Vector2 div (Vector2 other) {
-		return this.mul(1 / other.x, 1 / other.y);
+		return this.scl(1 / other.x, 1 / other.y);
 	}
 
 	/** @param v The other vector
@@ -223,7 +223,7 @@ public class Vector2 implements Serializable, Vector<Vector2> {
 	public Vector2 limit (float limit) {
 		if (len2() > limit * limit) {
 			nor();
-			mul(limit);
+			scl(limit);
 		}
 		return this;
 	}
@@ -237,9 +237,9 @@ public class Vector2 implements Serializable, Vector<Vector2> {
 		if (l2 == 0f)
 			return this;
 		if (l2 > max * max)
-			return nor().mul(max);
+			return nor().scl(max);
 		if (l2 < min * min)
-			return nor().mul(min);
+			return nor().scl(min);
 		return this;
 	}
 
diff --git a/gdx/src/com/badlogic/gdx/math/collision/BoundingBox.java b/gdx/src/com/badlogic/gdx/math/collision/BoundingBox.java
index a10fc6f..5bd5910 100644
--- a/gdx/src/com/badlogic/gdx/math/collision/BoundingBox.java
+++ b/gdx/src/com/badlogic/gdx/math/collision/BoundingBox.java
@@ -123,7 +123,7 @@ public class BoundingBox implements Serializable {
 			minimum.z < maximum.z ? minimum.z : maximum.z);
 		max.set(minimum.x > maximum.x ? minimum.x : maximum.x, minimum.y > maximum.y ? minimum.y : maximum.y,
 			minimum.z > maximum.z ? minimum.z : maximum.z);
-		cnt.set(min).add(max).mul(0.5f);
+		cnt.set(min).add(max).scl(0.5f);
 		dim.set(max).sub(min);
 		crn_dirty = true;
 		return this;
diff --git a/gdx/src/com/badlogic/gdx/math/collision/Ray.java b/gdx/src/com/badlogic/gdx/math/collision/Ray.java
index 47ef840..47efe44 100644
--- a/gdx/src/com/badlogic/gdx/math/collision/Ray.java
+++ b/gdx/src/com/badlogic/gdx/math/collision/Ray.java
@@ -43,20 +43,12 @@ public class Ray implements Serializable {
 		return new Ray(this.origin, this.direction);
 	}
 
-	/** @deprecated Use {@link #getEndPoint(Vector3, float)} instead.
-	 * Returns the endpoint given the distance. This is calculated as startpoint + distance * direction.
+	/** Returns and endpoint given the distance. This is calculated as startpoint + distance * direction.
+	 * 
 	 * @param distance The distance from the end point to the start point.
 	 * @return The end point */
 	public Vector3 getEndPoint (float distance) {
-		return getEndPoint(new Vector3(), distance);
-	}
-
-	/** Returns the endpoint given the distance. This is calculated as startpoint + distance * direction.
-	 * @param out The vector to set to the result
-	 * @param distance The distance from the end point to the start point.
-	 * @return The out param */
-	public Vector3 getEndPoint(final Vector3 out, final float distance) {
-		return out.set(direction).scl(distance).add(origin);
+		return new Vector3(origin).add(direction.tmp().scl(distance));
 	}
 
 	static Vector3 tmp = new Vector3();
@@ -109,6 +101,7 @@ public class Ray implements Serializable {
 	 * @param ray The ray
 	 * @return This ray for chaining */
 	public Ray set (Ray ray) {
+
 		this.origin.set(ray.origin);
 		this.direction.set(ray.direction);
 		return this;
diff --git a/gdx/src/com/badlogic/gdx/net/NetJavaImpl.java b/gdx/src/com/badlogic/gdx/net/NetJavaImpl.java
index d1eea3a..dbf3d99 100644
--- a/gdx/src/com/badlogic/gdx/net/NetJavaImpl.java
+++ b/gdx/src/com/badlogic/gdx/net/NetJavaImpl.java
@@ -36,7 +36,11 @@ public class NetJavaImpl {
 
 		public HttpClientResponse (HttpURLConnection connection) throws IOException {
 			this.connection = connection;
-			this.inputStream = connection.getInputStream();
+			try {
+				this.inputStream = connection.getInputStream();
+			} catch (IOException e) {
+				this.inputStream = connection.getErrorStream();
+			}
 
 			try {
 				this.status = new HttpStatus(connection.getResponseCode());
@@ -117,7 +121,8 @@ public class NetJavaImpl {
 
 			final HttpURLConnection connection = (HttpURLConnection)url.openConnection();
 			// should be enabled to upload data.
-			connection.setDoOutput(method.equalsIgnoreCase(HttpMethods.POST));
+			final boolean doingOutPut = method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT); 
+			connection.setDoOutput(doingOutPut);
 			connection.setDoInput(true);
 			connection.setRequestMethod(method);
 
@@ -136,8 +141,8 @@ public class NetJavaImpl {
 				public void run () {
 					try {
 
-						// Set the content for POST (GET has the information embedded in the URL)
-						if (method.equalsIgnoreCase(HttpMethods.POST)) {
+						// Set the content for POST and PUT (GET has the information embedded in the URL)
+						if (doingOutPut) {
 							// we probably need to use the content as stream here instead of using it as a string.
 							String contentAsString = httpRequest.getContent();
 							InputStream contentAsStream = httpRequest.getContentStream();
diff --git a/gdx/src/com/badlogic/gdx/physics/box2d/Box2DDebugRenderer.java b/gdx/src/com/badlogic/gdx/physics/box2d/Box2DDebugRenderer.java
index 1b34856..564eb97 100644
--- a/gdx/src/com/badlogic/gdx/physics/box2d/Box2DDebugRenderer.java
+++ b/gdx/src/com/badlogic/gdx/physics/box2d/Box2DDebugRenderer.java
@@ -36,29 +36,27 @@ public class Box2DDebugRenderer {
 	protected ShapeRenderer renderer;
 
 	/** vertices for polygon rendering **/
-	private static Vector2[] vertices = new Vector2[1000];
+	private final static Vector2[] vertices = new Vector2[1000];
 
-	private static Vector2 lower;
-	private static Vector2 upper;
+	private final static Vector2 lower = new Vector2();
+	private final static Vector2 upper = new Vector2();
 
 	private boolean drawBodies;
 	private boolean drawJoints;
 	private boolean drawAABBs;
 	private boolean drawInactiveBodies;
 	private boolean drawVelocities;
+	private boolean drawContacts;
 
 	public Box2DDebugRenderer () {
-		this(true, true, false, true, false);
+		this(true, true, false, true, false, true);
 	}
 
 	public Box2DDebugRenderer (boolean drawBodies, boolean drawJoints, boolean drawAABBs, boolean drawInactiveBodies,
-		boolean drawVelocities) {
+		boolean drawVelocities, boolean drawContacts) {
 		// next we setup the immediate mode renderer
 		renderer = new ShapeRenderer();
 
-		lower = new Vector2();
-		upper = new Vector2();
-
 		// initialize vertices array
 		for (int i = 0; i < vertices.length; i++)
 			vertices[i] = new Vector2();
@@ -68,6 +66,7 @@ public class Box2DDebugRenderer {
 		this.drawAABBs = drawAABBs;
 		this.drawInactiveBodies = drawInactiveBodies;
 		this.drawVelocities = drawVelocities;
+		this.drawContacts = drawContacts;
 	}
 
 	/** This assumes that the projection matrix has already been set. */
@@ -102,35 +101,22 @@ public class Box2DDebugRenderer {
 			}
 		}
 		renderer.end();
-
-		if (Gdx.gl10 != null) Gdx.gl10.glPointSize(3);
-		renderer.begin(ShapeType.Point);
-		int len = world.getContactList().size();
-		for (int i = 0; i < len; i++)
-			drawContact(world.getContactList().get(i));
-		renderer.end();
-		if (Gdx.gl10 != null) Gdx.gl10.glPointSize(1);
+		if (drawContacts) {
+			if (Gdx.gl10 != null) Gdx.gl10.glPointSize(3);
+			renderer.begin(ShapeType.Point);
+			int len = world.getContactList().size();
+			for (int i = 0; i < len; i++)
+				drawContact(world.getContactList().get(i));
+			renderer.end();
+			if (Gdx.gl10 != null) Gdx.gl10.glPointSize(1);
+		}
 	}
 
 	protected void renderBody (Body body) {
 		Transform transform = body.getTransform();
-		int len = body.getFixtureList().size();
-		List<Fixture> fixtures = body.getFixtureList();
-		for (int i = 0; i < len; i++) {
-			Fixture fixture = fixtures.get(i);
-
+		for (Fixture fixture : body.getFixtureList()) {
 			if (drawBodies) {
-				if (body.isActive() == false)
-					drawShape(fixture, transform, SHAPE_NOT_ACTIVE);
-				else if (body.getType() == BodyType.StaticBody)
-					drawShape(fixture, transform, SHAPE_STATIC);
-				else if (body.getType() == BodyType.KinematicBody)
-					drawShape(fixture, transform, SHAPE_KINEMATIC);
-				else if (body.isAwake() == false)
-					drawShape(fixture, transform, SHAPE_NOT_AWAKE);
-				else
-					drawShape(fixture, transform, SHAPE_AWAKE);
-
+					drawShape(fixture, transform, getColorByBody(body));
 				if (drawVelocities) {
 					Vector2 position = body.getPosition();
 					drawSegment(position, body.getLinearVelocity().add(position), VELOCITY_COLOR);
@@ -142,6 +128,19 @@ public class Box2DDebugRenderer {
 			}
 		}
 	}
+	
+	private Color getColorByBody (Body body) { 
+		if (body.isActive() == false)
+			return SHAPE_NOT_ACTIVE;
+		else if (body.getType() == BodyType.StaticBody)
+			return SHAPE_STATIC;
+		else if (body.getType() == BodyType.KinematicBody)
+			return SHAPE_KINEMATIC;
+		else if (body.isAwake() == false)
+			return SHAPE_NOT_AWAKE;
+		else
+			return SHAPE_AWAKE;
+	}
 
 	private void drawAABB (Fixture fixture, Transform transform) {
 		if (fixture.getType() == Type.Circle) {
@@ -195,6 +194,7 @@ public class Box2DDebugRenderer {
 			t.set(circle.getPosition());
 			transform.mul(t);
 			drawSolidCircle(t, circle.getRadius(), axis.set(transform.vals[Transform.COS], transform.vals[Transform.SIN]), color);
+			return;
 		}
 
 		if (fixture.getType() == Type.Edge) {
@@ -204,6 +204,7 @@ public class Box2DDebugRenderer {
 			transform.mul(vertices[0]);
 			transform.mul(vertices[1]);
 			drawSolidPolygon(vertices, 2, color, true);
+			return;
 		}
 
 		if (fixture.getType() == Type.Polygon) {
@@ -214,6 +215,7 @@ public class Box2DDebugRenderer {
 				transform.mul(vertices[i]);
 			}
 			drawSolidPolygon(vertices, vertexCount, color, true);
+			return;
 		}
 
 		if (fixture.getType() == Type.Chain) {
@@ -251,13 +253,10 @@ public class Box2DDebugRenderer {
 
 	private void drawSolidPolygon (Vector2[] vertices, int vertexCount, Color color, boolean closed) {
 		renderer.setColor(color.r, color.g, color.b, color.a);
-		for (int i = 0; i < vertexCount; i++) {
+		lv.set(vertices[0]);
+		f.set(vertices[0]);
+		for (int i = 1; i < vertexCount; i++) {
 			Vector2 v = vertices[i];
-			if (i == 0) {
-				lv.set(v);
-				f.set(v);
-				continue;
-			}
 			renderer.line(lv.x, lv.y, v.x, v.y);
 			lv.set(v);
 		}
@@ -302,6 +301,7 @@ public class Box2DDebugRenderer {
 		WorldManifold worldManifold = contact.getWorldManifold();
 		if (worldManifold.getNumberOfContactPoints() == 0) return;
 		Vector2 point = worldManifold.getPoints()[0];
+		renderer.setColor(getColorByBody(contact.getFixtureA().getBody()));
 		renderer.point(point.x, point.y, 0);
 	}
 
@@ -344,6 +344,14 @@ public class Box2DDebugRenderer {
 	public void setDrawVelocities (boolean drawVelocities) {
 		this.drawVelocities = drawVelocities;
 	}
+	
+	public boolean isDrawContacts () {
+		return drawContacts;
+	}
+
+	public void setDrawContacts (boolean drawContacts) {
+		this.drawContacts = drawContacts;
+	}
 
 	public static Vector2 getAxis () {
 		return axis;
@@ -356,4 +364,4 @@ public class Box2DDebugRenderer {
 	public void dispose () {
 		renderer.dispose();
 	}
-}
+}
diff --git a/gdx/src/com/badlogic/gdx/physics/box2d/ChainShape.java b/gdx/src/com/badlogic/gdx/physics/box2d/ChainShape.java
index 1306dcd..3ebe29a 100644
--- a/gdx/src/com/badlogic/gdx/physics/box2d/ChainShape.java
+++ b/gdx/src/com/badlogic/gdx/physics/box2d/ChainShape.java
@@ -64,6 +64,13 @@ public class ChainShape extends Shape {
 	*/
 
 	/** Create a chain with isolated end vertices.
+	 * @param vertices an array of floats of alternating x, y coordinates. */
+	public void createChain (float[] vertices) {
+		jniCreateChain(addr, vertices, vertices.length / 2);
+		isLooped = false;
+	}
+	
+	/** Create a chain with isolated end vertices.
 	 * @param vertices an array of vertices, these are copied */
 	public void createChain (Vector2[] vertices) {
 		float[] verts = new float[vertices.length * 2];
@@ -71,8 +78,7 @@ public class ChainShape extends Shape {
 			verts[i] = vertices[j].x;
 			verts[i + 1] = vertices[j].y;
 		}
-		jniCreateChain(addr, verts, verts.length / 2);
-		isLooped = false;
+		createChain(verts);
 	}
 
 	private native void jniCreateChain (long addr, float[] verts, int numVertices); /*
diff --git a/gdx/src/com/badlogic/gdx/physics/box2d/World.java b/gdx/src/com/badlogic/gdx/physics/box2d/World.java
index b24161f..686f346 100644
--- a/gdx/src/com/badlogic/gdx/physics/box2d/World.java
+++ b/gdx/src/com/badlogic/gdx/physics/box2d/World.java
@@ -242,6 +242,7 @@ b2ContactFilter defaultFilter;
 		}
 	
 		b2World* world = new b2World( b2Vec2( gravityX, gravityY ));
+		world->SetAllowSleeping( doSleep );
 		return (jlong)world;
 	*/
 
diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
index e4c700a..7243870 100644
--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java
@@ -592,27 +592,39 @@ public class Actor {
 		return stageCoords;
 	}
 
-	/** Transforms the specified point in the actor's coordinates to be in the stage's coordinates. Note this method will ONLY work
-	 * for screen aligned, unrotated, unscaled actors! */
+	/** Transforms the specified point in the actor's coordinates to be in the stage's coordinates.
+	 * @see Stage#toScreenCoordinates(Vector2, com.badlogic.gdx.math.Matrix4) */
 	public Vector2 localToStageCoordinates (Vector2 localCoords) {
-		Actor actor = this;
-		while (actor != null) {
-			if (actor.rotation != 0 || actor.scaleX != 1 || actor.scaleY != 1)
-				throw new GdxRuntimeException("Only unrotated and unscaled actors may use this method.");
-			localCoords.x += actor.x;
-			localCoords.y += actor.y;
-			actor = actor.parent;
-		}
-		return localCoords;
+		return localToAscendantCoordinates(null, localCoords);
 	}
 
-	/** Transforms the specified point in the actor's coordinates to be in the parent's coordinates. Note this method will ONLY work
-	 * for screen aligned, unrotated, unscaled actors! */
+	/** Transforms the specified point in the actor's coordinates to be in the parent's coordinates. */
 	public Vector2 localToParentCoordinates (Vector2 localCoords) {
-		if (rotation != 0 || scaleX != 1 || scaleY != 1)
-			throw new GdxRuntimeException("Only unrotated and unscaled actors may use this method.");
-		localCoords.x += x;
-		localCoords.y += y;
+		final float rotation = -this.rotation;
+		final float scaleX = this.scaleX;
+		final float scaleY = this.scaleY;
+		final float x = this.x;
+		final float y = this.y;
+		if (rotation == 0) {
+			if (scaleX == 1 && scaleY == 1) {
+				localCoords.x += x;
+				localCoords.y += y;
+			} else {
+				final float originX = this.originX;
+				final float originY = this.originY;
+				localCoords.x = (localCoords.x - originX) * scaleX + originX + x;
+				localCoords.y = (localCoords.y - originY) * scaleY + originY + y;
+			}
+		} else {
+			final float cos = (float)Math.cos(rotation * MathUtils.degreesToRadians);
+			final float sin = (float)Math.sin(rotation * MathUtils.degreesToRadians);
+			final float originX = this.originX;
+			final float originY = this.originY;
+			final float tox = localCoords.x - originX;
+			final float toy = localCoords.y - originY;
+			localCoords.x = (tox * cos + toy * sin) * scaleX + originX + x;
+			localCoords.y = (tox * -sin + toy * cos) * scaleY + originY + y;
+		}
 		return localCoords;
 	}
 
@@ -634,7 +646,6 @@ public class Actor {
 		final float scaleY = this.scaleY;
 		final float childX = x;
 		final float childY = y;
-
 		if (rotation == 0) {
 			if (scaleX == 1 && scaleY == 1) {
 				parentCoords.x -= childX;
@@ -642,66 +653,18 @@ public class Actor {
 			} else {
 				final float originX = this.originX;
 				final float originY = this.originY;
-				if (originX == 0 && originY == 0) {
-					parentCoords.x = (parentCoords.x - childX) / scaleX;
-					parentCoords.y = (parentCoords.y - childY) / scaleY;
-				} else {
-					parentCoords.x = (parentCoords.x - childX - originX) / scaleX + originX;
-					parentCoords.y = (parentCoords.y - childY - originY) / scaleY + originY;
-				}
+				parentCoords.x = (parentCoords.x - childX - originX) / scaleX + originX;
+				parentCoords.y = (parentCoords.y - childY - originY) / scaleY + originY;
 			}
 		} else {
 			final float cos = (float)Math.cos(rotation * MathUtils.degreesToRadians);
 			final float sin = (float)Math.sin(rotation * MathUtils.degreesToRadians);
-
 			final float originX = this.originX;
 			final float originY = this.originY;
-
-			if (scaleX == 1 && scaleY == 1) {
-				if (originX == 0 && originY == 0) {
-					float tox = parentCoords.x - childX;
-					float toy = parentCoords.y - childY;
-
-					parentCoords.x = tox * cos + toy * sin;
-					parentCoords.y = tox * -sin + toy * cos;
-				} else {
-					final float worldOriginX = childX + originX;
-					final float worldOriginY = childY + originY;
-					final float fx = -originX;
-					final float fy = -originY;
-
-					final float x1 = cos * fx - sin * fy + worldOriginX;
-					final float y1 = sin * fx + cos * fy + worldOriginY;
-
-					final float tox = parentCoords.x - x1;
-					final float toy = parentCoords.y - y1;
-
-					parentCoords.x = tox * cos + toy * sin;
-					parentCoords.y = tox * -sin + toy * cos;
-				}
-			} else {
-				if (originX == 0 && originY == 0) {
-					final float tox = parentCoords.x - childX;
-					final float toy = parentCoords.y - childY;
-
-					parentCoords.x = (tox * cos + toy * sin) / scaleX;
-					parentCoords.y = (tox * -sin + toy * cos) / scaleY;
-				} else {
-					final float worldOriginX = childX + originX;
-					final float worldOriginY = childY + originY;
-					final float fx = -originX * scaleX;
-					final float fy = -originY * scaleY;
-
-					final float x1 = cos * fx - sin * fy + worldOriginX;
-					final float y1 = sin * fx + cos * fy + worldOriginY;
-
-					final float tox = parentCoords.x - x1;
-					final float toy = parentCoords.y - y1;
-
-					parentCoords.x = (tox * cos + toy * sin) / scaleX;
-					parentCoords.y = (tox * -sin + toy * cos) / scaleY;
-				}
-			}
+			final float tox = parentCoords.x - childX - originX;
+			final float toy = parentCoords.y - childY - originY;
+			parentCoords.x = (tox * cos + toy * sin) / scaleX + originX;
+			parentCoords.y = (tox * -sin + toy * cos) / scaleY + originY;
 		}
 		return parentCoords;
 	}
diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
index 94b4573..e8a2b26 100644
--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java
@@ -669,13 +669,15 @@ public class Stage extends InputAdapter implements Disposable {
 
 	/** Transforms the coordinates to screen coordinates. The coordinates can be anywhere in the stage since the transform matrix
 	 * describes how to convert them. The transform matrix is typically obtained from {@link SpriteBatch#getTransformMatrix()}
-	 * during {@link Actor#draw(SpriteBatch, float)}. */
+	 * during {@link Actor#draw(SpriteBatch, float)}.
+	 * @see Actor#localToStageCoordinates(Vector2) */
 	public Vector2 toScreenCoordinates (Vector2 coords, Matrix4 transformMatrix) {
 		ScissorStack.toWindowCoordinates(camera, transformMatrix, coords);
 		return coords;
 	}
 
 	public void dispose () {
+		clear();
 		if (ownsBatch) batch.dispose();
 	}
 
diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
index 2432bb0..77b065a 100644
--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java
@@ -134,6 +134,10 @@ public class SelectBox extends Widget {
 		invalidateHierarchy();
 	}
 
+	public String[] getItems () {
+		return items;
+	}
+
 	@Override
 	public void draw (SpriteBatch batch, float parentAlpha) {
 		Drawable background;
diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
index 88edd9a..1402d4b 100644
--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java
@@ -38,6 +38,7 @@ import com.badlogic.gdx.utils.Disposable;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 import com.badlogic.gdx.utils.Json;
 import com.badlogic.gdx.utils.Json.ReadOnlySerializer;
+import com.badlogic.gdx.utils.JsonValue;
 import com.badlogic.gdx.utils.ObjectMap;
 import com.badlogic.gdx.utils.ObjectMap.Entry;
 import com.badlogic.gdx.utils.SerializationException;
@@ -403,9 +404,9 @@ public class Skin implements Disposable {
 		final Skin skin = this;
 
 		final Json json = new Json() {
-			public <T> T readValue (Class<T> type, Class elementType, Object jsonData) {
+			public <T> T readValue (Class<T> type, Class elementType, JsonValue jsonData) {
 				// If the JSON is a string but the type is not, look up the actual value by name.
-				if (jsonData instanceof String && !CharSequence.class.isAssignableFrom(type)) return get((String)jsonData, type);
+				if (jsonData.isString() && !CharSequence.class.isAssignableFrom(type)) return get(jsonData.asString(), type);
 				return super.readValue(type, elementType, jsonData);
 			}
 		};
@@ -413,13 +414,10 @@ public class Skin implements Disposable {
 		json.setUsePrototypes(false);
 
 		json.setSerializer(Skin.class, new ReadOnlySerializer<Skin>() {
-			public Skin read (Json json, Object jsonData, Class ignored) {
-				ObjectMap<String, ObjectMap> typeToValueMap = (ObjectMap)jsonData;
-				for (Entry<String, ObjectMap> typeEntry : typeToValueMap.entries()) {
-					String className = typeEntry.key;
-					ObjectMap<String, ObjectMap> valueMap = (ObjectMap)typeEntry.value;
+			public Skin read (Json json, JsonValue typeToValueMap, Class ignored) {
+				for (JsonValue valueMap = typeToValueMap.child(); valueMap != null; valueMap = valueMap.next()) {
 					try {
-						readNamedObjects(json, Class.forName(className), valueMap);
+						readNamedObjects(json, Class.forName(valueMap.name()), valueMap);
 					} catch (ClassNotFoundException ex) {
 						throw new SerializationException(ex);
 					}
@@ -427,23 +425,22 @@ public class Skin implements Disposable {
 				return skin;
 			}
 
-			private void readNamedObjects (Json json, Class type, ObjectMap<String, ObjectMap> valueMap) {
+			private void readNamedObjects (Json json, Class type, JsonValue valueMap) {
 				Class addType = type == TintedDrawable.class ? Drawable.class : type;
-				for (Entry<String, ObjectMap> valueEntry : valueMap.entries()) {
-					String name = valueEntry.key;
-					Object object = json.readValue(type, valueEntry.value);
+				for (JsonValue valueEntry = valueMap.child(); valueEntry != null; valueEntry = valueEntry.next()) {
+					Object object = json.readValue(type, valueEntry);
 					if (object == null) continue;
 					try {
-						add(name, object, addType);
+						add(valueEntry.name(), object, addType);
 					} catch (Exception ex) {
-						throw new SerializationException("Error reading " + type.getSimpleName() + ": " + valueEntry.key, ex);
+						throw new SerializationException("Error reading " + type.getSimpleName() + ": " + valueEntry.name(), ex);
 					}
 				}
 			}
 		});
 
 		json.setSerializer(BitmapFont.class, new ReadOnlySerializer<BitmapFont>() {
-			public BitmapFont read (Json json, Object jsonData, Class type) {
+			public BitmapFont read (Json json, JsonValue jsonData, Class type) {
 				String path = json.readValue("file", String.class, jsonData);
 
 				FileHandle fontFile = skinFile.parent().child(path);
@@ -470,9 +467,8 @@ public class Skin implements Disposable {
 		});
 
 		json.setSerializer(Color.class, new ReadOnlySerializer<Color>() {
-			public Color read (Json json, Object jsonData, Class type) {
-				if (jsonData instanceof String) return get((String)jsonData, Color.class);
-				ObjectMap map = (ObjectMap)jsonData;
+			public Color read (Json json, JsonValue jsonData, Class type) {
+				if (jsonData.isString()) return get(jsonData.asString(), Color.class);
 				String hex = json.readValue("hex", String.class, (String)null, jsonData);
 				if (hex != null) return Color.valueOf(hex);
 				float r = json.readValue("r", float.class, 0f, jsonData);
@@ -484,7 +480,7 @@ public class Skin implements Disposable {
 		});
 
 		json.setSerializer(TintedDrawable.class, new ReadOnlySerializer() {
-			public Object read (Json json, Object jsonData, Class type) {
+			public Object read (Json json, JsonValue jsonData, Class type) {
 				String name = json.readValue("name", String.class, jsonData);
 				Color color = json.readValue("color", Color.class, jsonData);
 				return newDrawable(name, color);
diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
index 8866c6c..96c92ba 100644
--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java
@@ -77,6 +77,7 @@ public class TextField extends Widget {
 	OnscreenKeyboard keyboard = new DefaultOnscreenKeyboard();
 	boolean focusTraversal = true;
 	boolean disabled;
+	boolean onlyFontChars = true;
 
 	private boolean passwordMode;
 	private StringBuilder passwordBuffer;
@@ -373,14 +374,23 @@ public class TextField extends Widget {
 		return this.maxLength;
 	}
 
+	/** When false, text set by {@link #setText(String)} may contain characters not in the font, a space will be displayed instead.
+	 * When true (the default), characters not in the font are stripped by setText. Characters not in the font are always stripped
+	 * when typed or pasted. */
+	public void setOnlyFontChars (boolean onlyFontChars) {
+		this.onlyFontChars = onlyFontChars;
+	}
+
 	public void setStyle (TextFieldStyle style) {
 		if (style == null) throw new IllegalArgumentException("style cannot be null.");
 		this.style = style;
 		invalidateHierarchy();
 	}
 
+	/** Sets the password character for the text field. The character must be present in the {@link BitmapFont} */
 	public void setPasswordCharacter (char passwordCharacter) {
 		this.passwordCharacter = passwordCharacter;
+		if (passwordMode) updateDisplayText();
 	}
 
 	/** Returns the text field's style. Modifying the returned style may not have an effect until {@link #setStyle(TextFieldStyle)}
@@ -445,16 +455,18 @@ public class TextField extends Widget {
 
 	@Override
 	public void draw (SpriteBatch batch, float parentAlpha) {
-		
+
 		Stage stage = getStage();
 		boolean focused = stage != null && stage.getKeyboardFocus() == this;
-		
+
 		final BitmapFont font = style.font;
-		final Color fontColor = (disabled && style.disabledFontColor != null) ? style.disabledFontColor : ((focused && style.focusedFontColor != null) ? style.focusedFontColor : style.fontColor);
+		final Color fontColor = (disabled && style.disabledFontColor != null) ? style.disabledFontColor
+			: ((focused && style.focusedFontColor != null) ? style.focusedFontColor : style.fontColor);
 		final Drawable selection = style.selection;
 		final Drawable cursorPatch = style.cursor;
-		final Drawable background = (disabled && style.disabledBackground != null) ? style.disabledBackground : ((focused && style.focusedBackground != null) ? style.focusedBackground : style.background);
-		
+		final Drawable background = (disabled && style.disabledBackground != null) ? style.disabledBackground
+			: ((focused && style.focusedBackground != null) ? style.focusedBackground : style.background);
+
 		Color color = getColor();
 		float x = getX();
 		float y = getY();
@@ -469,7 +481,7 @@ public class TextField extends Widget {
 			bgLeftWidth = background.getLeftWidth();
 			float bottom = background.getBottomHeight();
 			textY = (int)(textY + (height - background.getTopHeight() - bottom) / 2 + bottom);
-		} else 
+		} else
 			textY = (int)(textY + height / 2);
 
 		calculateOffsets();
@@ -505,6 +517,13 @@ public class TextField extends Widget {
 	}
 
 	void updateDisplayText () {
+		StringBuilder buffer = new StringBuilder();
+		for (int i = 0; i < text.length(); i++) {
+			char c = text.charAt(i);
+			buffer.append(style.font.containsCharacter(c) ? c : ' ');
+		}
+		String text = buffer.toString();
+
 		if (passwordMode && style.font.containsCharacter(passwordCharacter)) {
 			if (passwordBuffer == null) passwordBuffer = new StringBuilder(text.length());
 			if (passwordBuffer.length() > text.length()) //
@@ -550,15 +569,15 @@ public class TextField extends Widget {
 	void paste () {
 		String content = clipboard.getContents();
 		if (content != null) {
-			StringBuilder builder = new StringBuilder();
+			StringBuilder buffer = new StringBuilder();
 			for (int i = 0; i < content.length(); i++) {
-				if (maxLength > 0 && text.length() + builder.length() + 1 > maxLength) {
-					break;
-				}
+				if (maxLength > 0 && text.length() + buffer.length() + 1 > maxLength) break;
 				char c = content.charAt(i);
-				if (style.font.containsCharacter(c) && (filter == null || filter.acceptChar(this, c))) builder.append(c);
+				if (!style.font.containsCharacter(c)) continue;
+				if (filter != null && !filter.acceptChar(this, c)) continue;
+				buffer.append(c);
 			}
-			content = builder.toString();
+			content = buffer.toString();
 
 			if (!hasSelection) {
 				text = text.substring(0, cursor) + content + text.substring(cursor, text.length());
@@ -660,13 +679,13 @@ public class TextField extends Widget {
 
 		BitmapFont font = style.font;
 
-		StringBuffer buffer = new StringBuffer();
+		StringBuilder buffer = new StringBuilder();
 		for (int i = 0; i < text.length(); i++) {
-			if (maxLength > 0 && buffer.length() + 1 > maxLength) {
-				break;
-			}
+			if (maxLength > 0 && buffer.length() + 1 > maxLength) break;
 			char c = text.charAt(i);
-			if (font.containsCharacter(c) && (filter == null || filter.acceptChar(this, c))) buffer.append(c);
+			if (onlyFontChars && !style.font.containsCharacter(c)) continue;
+			if (filter != null && !filter.acceptChar(this, c)) continue;
+			buffer.append(c);
 		}
 
 		this.text = buffer.toString();
@@ -758,6 +777,7 @@ public class TextField extends Widget {
 	 * no affect. */
 	public void setPasswordMode (boolean passwordMode) {
 		this.passwordMode = passwordMode;
+		updateDisplayText();
 	}
 
 	public void setBlinkTime (float blinkTime) {
diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Touchpad.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Touchpad.java
index 2bec0d4..afa7b8f 100644
--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Touchpad.java
+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Touchpad.java
@@ -100,11 +100,11 @@ public class Touchpad extends Widget {
 			if (!deadzoneBounds.contains(x, y)) {
 				knobPercent.set((x - centerX) / knobBounds.radius, (y - centerY) / knobBounds.radius);
 				float length = knobPercent.len();
-				if (length > 1) knobPercent.mul(1 / length);
+				if (length > 1) knobPercent.scl(1 / length);
 				if (knobBounds.contains(x, y)) {
 					knobPosition.set(x, y);
 				} else {
-					knobPosition.set(knobPercent).nor().mul(knobBounds.radius).add(knobBounds.x, knobBounds.y);
+					knobPosition.set(knobPercent).nor().scl(knobBounds.radius).add(knobBounds.x, knobBounds.y);
 				}
 			}
 		}
diff --git a/gdx/src/com/badlogic/gdx/utils/Array.java b/gdx/src/com/badlogic/gdx/utils/Array.java
index 13fd7a1..98ffb7d 100644
--- a/gdx/src/com/badlogic/gdx/utils/Array.java
+++ b/gdx/src/com/badlogic/gdx/utils/Array.java
@@ -80,14 +80,14 @@ public class Array<T> implements Iterable<T> {
 	 * array. The capacity is set to the number of elements, so any subsequent elements added will cause the backing array to be
 	 * grown. */
 	public Array (T[] array) {
-		this(true, array);
+		this(true, array, 0, array.length);
 	}
 
 	/** Creates a new array containing the elements in the specified array. The new array will have the same type of backing array.
 	 * The capacity is set to the number of elements, so any subsequent elements added will cause the backing array to be grown.
 	 * @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a
 	 *           memory copy. */
-	public Array (boolean ordered, T[] array) {
+	public Array (boolean ordered, T[] array, int start, int count) {
 		this(ordered, array.length, (Class)array.getClass().getComponentType());
 		size = array.length;
 		System.arraycopy(array, 0, items, 0, size);
diff --git a/gdx/src/com/badlogic/gdx/utils/ArrayMap.java b/gdx/src/com/badlogic/gdx/utils/ArrayMap.java
index 634ae49..c02727e 100644
--- a/gdx/src/com/badlogic/gdx/utils/ArrayMap.java
+++ b/gdx/src/com/badlogic/gdx/utils/ArrayMap.java
@@ -523,6 +523,10 @@ public class ArrayMap<K, V> {
 		public void reset () {
 			index = 0;
 		}
+
+		public Array<V> toArray () {
+			return new Array(true, map.values, index, map.size - index);
+		}
 	}
 
 	static public class Keys<K> implements Iterable<K>, Iterator<K> {
@@ -556,5 +560,9 @@ public class ArrayMap<K, V> {
 		public void reset () {
 			index = 0;
 		}
+
+		public Array<K> toArray () {
+			return new Array(true, map.keys, index, map.size - index);
+		}
 	}
 }
diff --git a/gdx/src/com/badlogic/gdx/utils/BooleanArray.java b/gdx/src/com/badlogic/gdx/utils/BooleanArray.java
index ba5ab0e..a1961db 100644
--- a/gdx/src/com/badlogic/gdx/utils/BooleanArray.java
+++ b/gdx/src/com/badlogic/gdx/utils/BooleanArray.java
@@ -61,17 +61,17 @@ public class BooleanArray {
 	/** Creates a new ordered array containing the elements in the specified array. The capacity is set to the number of elements,
 	 * so any subsequent elements added will cause the backing array to be grown. */
 	public BooleanArray (boolean[] array) {
-		this(true, array);
+		this(true, array, 0, array.length);
 	}
 
 	/** Creates a new array containing the elements in the specified array. The capacity is set to the number of elements, so any
 	 * subsequent elements added will cause the backing array to be grown.
 	 * @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a
 	 *           memory copy. */
-	public BooleanArray (boolean ordered, boolean[] array) {
+	public BooleanArray (boolean ordered, boolean[] array, int startIndex, int count) {
 		this(ordered, array.length);
-		size = array.length;
-		System.arraycopy(array, 0, items, 0, size);
+		size = count;
+		System.arraycopy(array, startIndex, items, 0, count);
 	}
 
 	public void add (boolean value) {
diff --git a/gdx/src/com/badlogic/gdx/utils/CharArray.java b/gdx/src/com/badlogic/gdx/utils/CharArray.java
index cdc1dfa..061bff4 100644
--- a/gdx/src/com/badlogic/gdx/utils/CharArray.java
+++ b/gdx/src/com/badlogic/gdx/utils/CharArray.java
@@ -59,17 +59,17 @@ public class CharArray {
 	/** Creates a new ordered array containing the elements in the specified array. The capacity is set to the number of elements,
 	 * so any subsequent elements added will cause the backing array to be grown. */
 	public CharArray (char[] array) {
-		this(true, array);
+		this(true, array, 0, array.length);
 	}
 
 	/** Creates a new array containing the elements in the specified array. The capacity is set to the number of elements, so any
 	 * subsequent elements added will cause the backing array to be grown.
 	 * @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a
 	 *           memory copy. */
-	public CharArray (boolean ordered, char[] array) {
+	public CharArray (boolean ordered, char[] array, int startIndex, int count) {
 		this(ordered, array.length);
-		size = array.length;
-		System.arraycopy(array, 0, items, 0, size);
+		size = count;
+		System.arraycopy(array, startIndex, items, 0, count);
 	}
 
 	public void add (char value) {
diff --git a/gdx/src/com/badlogic/gdx/utils/DelayedRemovalArray.java b/gdx/src/com/badlogic/gdx/utils/DelayedRemovalArray.java
index 6092f1c..070fa54 100644
--- a/gdx/src/com/badlogic/gdx/utils/DelayedRemovalArray.java
+++ b/gdx/src/com/badlogic/gdx/utils/DelayedRemovalArray.java
@@ -45,8 +45,8 @@ public class DelayedRemovalArray<T> extends Array<T> {
 		super(ordered, capacity);
 	}
 
-	public DelayedRemovalArray (boolean ordered, T[] array) {
-		super(ordered, array);
+	public DelayedRemovalArray (boolean ordered, T[] array, int startIndex, int count) {
+		super(ordered, array, startIndex, count);
 	}
 
 	public DelayedRemovalArray (Class<T> arrayType) {
diff --git a/gdx/src/com/badlogic/gdx/utils/FloatArray.java b/gdx/src/com/badlogic/gdx/utils/FloatArray.java
index d3e1810..b0316a0 100644
--- a/gdx/src/com/badlogic/gdx/utils/FloatArray.java
+++ b/gdx/src/com/badlogic/gdx/utils/FloatArray.java
@@ -59,17 +59,17 @@ public class FloatArray {
 	/** Creates a new ordered array containing the elements in the specified array. The capacity is set to the number of elements,
 	 * so any subsequent elements added will cause the backing array to be grown. */
 	public FloatArray (float[] array) {
-		this(true, array);
+		this(true, array, 0, array.length);
 	}
 
 	/** Creates a new array containing the elements in the specified array. The capacity is set to the number of elements, so any
 	 * subsequent elements added will cause the backing array to be grown.
 	 * @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a
 	 *           memory copy. */
-	public FloatArray (boolean ordered, float[] array) {
+	public FloatArray (boolean ordered, float[] array, int startIndex, int count) {
 		this(ordered, array.length);
-		size = array.length;
-		System.arraycopy(array, 0, items, 0, size);
+		size = count;
+		System.arraycopy(array, startIndex, items, 0, count);
 	}
 
 	public void add (float value) {
diff --git a/gdx/src/com/badlogic/gdx/utils/IntArray.java b/gdx/src/com/badlogic/gdx/utils/IntArray.java
index fec522b..3ea255f 100644
--- a/gdx/src/com/badlogic/gdx/utils/IntArray.java
+++ b/gdx/src/com/badlogic/gdx/utils/IntArray.java
@@ -59,17 +59,17 @@ public class IntArray {
 	/** Creates a new ordered array containing the elements in the specified array. The capacity is set to the number of elements,
 	 * so any subsequent elements added will cause the backing array to be grown. */
 	public IntArray (int[] array) {
-		this(true, array);
+		this(true, array, 0, array.length);
 	}
 
 	/** Creates a new array containing the elements in the specified array. The capacity is set to the number of elements, so any
 	 * subsequent elements added will cause the backing array to be grown.
 	 * @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a
 	 *           memory copy. */
-	public IntArray (boolean ordered, int[] array) {
+	public IntArray (boolean ordered, int[] array, int startIndex, int count) {
 		this(ordered, array.length);
-		size = array.length;
-		System.arraycopy(array, 0, items, 0, size);
+		size = count;
+		System.arraycopy(array, startIndex, items, 0, count);
 	}
 
 	public void add (int value) {
diff --git a/gdx/src/com/badlogic/gdx/utils/IntIntMap.java b/gdx/src/com/badlogic/gdx/utils/IntIntMap.java
index b13c2c8..90e2cd4 100644
--- a/gdx/src/com/badlogic/gdx/utils/IntIntMap.java
+++ b/gdx/src/com/badlogic/gdx/utils/IntIntMap.java
@@ -282,7 +282,10 @@ public class IntIntMap {
 
 	/** @param defaultValue Returned if the key was not associated with a value. */
 	public int get (int key, int defaultValue) {
-		if (key == 0) return zeroValue;
+		if (key == 0) {
+			if (!hasZeroValue) return defaultValue;
+			return zeroValue;
+		}
 		int index = key & mask;
 		if (keyTable[index] != key) {
 			index = hash2(key);
@@ -393,6 +396,7 @@ public class IntIntMap {
 			keyTable[i] = EMPTY;
 		size = 0;
 		stashSize = 0;
+		hasZeroValue = false;
 	}
 
 	/** Returns true if the specified value is in the map. Note this traverses the entire map and compares every value, which may be
diff --git a/gdx/src/com/badlogic/gdx/utils/Json.java b/gdx/src/com/badlogic/gdx/utils/Json.java
index 2ad54ca..c82366c 100644
--- a/gdx/src/com/badlogic/gdx/utils/Json.java
+++ b/gdx/src/com/badlogic/gdx/utils/Json.java
@@ -19,6 +19,7 @@ package com.badlogic.gdx.utils;
 import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.utils.JsonWriter.OutputType;
 import com.badlogic.gdx.utils.ObjectMap.Entry;
+import com.badlogic.gdx.utils.ObjectMap.Values;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -38,7 +39,8 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-/** Reads/writes Java objects to/from JSON, automatically.
+/** Reads/writes Java objects to/from JSON, automatically. See the wiki for usage:
+ * https://code.google.com/p/libgdx/wiki/JsonParsing
  * @author Nathan Sweet */
 public class Json {
 	private static final boolean debug = false;
@@ -233,7 +235,7 @@ public class Json {
 		ObjectMap<String, FieldMetadata> fields = typeToFields.get(type);
 		if (fields == null) fields = cacheFields(type);
 		int i = 0;
-		for (FieldMetadata metadata : fields.values()) {
+		for (FieldMetadata metadata : new Values<FieldMetadata>(fields)) {
 			Field field = metadata.field;
 			try {
 				Object value = field.get(object);
@@ -494,7 +496,7 @@ public class Json {
 			}
 
 			if (value instanceof Map) {
-				if (knownType == null) knownType = OrderedMap.class;
+				if (knownType == null) knownType = HashMap.class;
 				writeObjectStart(actualType, knownType);
 				for (Map.Entry entry : ((Map<?, ?>)value).entrySet()) {
 					writer.name(convertToString(entry.getKey()));
@@ -671,28 +673,27 @@ public class Json {
 		return (T)readValue(type, elementType, new JsonReader().parse(json));
 	}
 
-	public void readField (Object object, String name, Object jsonData) {
+	public void readField (Object object, String name, JsonValue jsonData) {
 		readField(object, name, name, null, jsonData);
 	}
 
-	public void readField (Object object, String name, Class elementType, Object jsonData) {
+	public void readField (Object object, String name, Class elementType, JsonValue jsonData) {
 		readField(object, name, name, elementType, jsonData);
 	}
 
-	public void readField (Object object, String fieldName, String jsonName, Object jsonData) {
+	public void readField (Object object, String fieldName, String jsonName, JsonValue jsonData) {
 		readField(object, fieldName, jsonName, null, jsonData);
 	}
 
 	/** @param elementType May be null if the type is unknown. */
-	public void readField (Object object, String fieldName, String jsonName, Class elementType, Object jsonData) {
-		OrderedMap jsonMap = (OrderedMap)jsonData;
+	public void readField (Object object, String fieldName, String jsonName, Class elementType, JsonValue jsonMap) {
 		Class type = object.getClass();
 		ObjectMap<String, FieldMetadata> fields = typeToFields.get(type);
 		if (fields == null) fields = cacheFields(type);
 		FieldMetadata metadata = fields.get(fieldName);
 		if (metadata == null) throw new SerializationException("Field not found: " + fieldName + " (" + type.getName() + ")");
 		Field field = metadata.field;
-		Object jsonValue = jsonMap.get(jsonName);
+		JsonValue jsonValue = jsonMap.get(jsonName);
 		if (jsonValue == null) return;
 		if (elementType == null) elementType = metadata.elementType;
 		try {
@@ -709,24 +710,23 @@ public class Json {
 		}
 	}
 
-	public void readFields (Object object, Object jsonData) {
-		OrderedMap<String, Object> jsonMap = (OrderedMap)jsonData;
+	public void readFields (Object object, JsonValue jsonMap) {
 		Class type = object.getClass();
 		ObjectMap<String, FieldMetadata> fields = typeToFields.get(type);
 		if (fields == null) fields = cacheFields(type);
-		for (Entry<String, Object> entry : jsonMap.entries()) {
-			FieldMetadata metadata = fields.get(entry.key);
+		for (JsonValue child = jsonMap.child(); child != null; child = child.next()) {
+			FieldMetadata metadata = fields.get(child.name());
 			if (metadata == null) {
 				if (ignoreUnknownFields) {
-					if (debug) System.out.println("Ignoring unknown field: " + entry.key + " (" + type.getName() + ")");
+					if (debug) System.out.println("Ignoring unknown field: " + child.name() + " (" + type.getName() + ")");
 					continue;
 				} else
-					throw new SerializationException("Field not found: " + entry.key + " (" + type.getName() + ")");
+					throw new SerializationException("Field not found: " + child.name() + " (" + type.getName() + ")");
 			}
 			Field field = metadata.field;
-			if (entry.value == null) continue;
+			// if (entry.value == null) continue; // I don't remember what this did. :(
 			try {
-				field.set(object, readValue(field.getType(), metadata.elementType, entry.value));
+				field.set(object, readValue(field.getType(), metadata.elementType, child));
 			} catch (IllegalAccessException ex) {
 				throw new SerializationException("Error accessing field: " + field.getName() + " (" + type.getName() + ")", ex);
 			} catch (SerializationException ex) {
@@ -742,16 +742,14 @@ public class Json {
 
 	/** @param type May be null if the type is unknown.
 	 * @return May be null. */
-	public <T> T readValue (String name, Class<T> type, Object jsonData) {
-		OrderedMap jsonMap = (OrderedMap)jsonData;
+	public <T> T readValue (String name, Class<T> type, JsonValue jsonMap) {
 		return (T)readValue(type, null, jsonMap.get(name));
 	}
 
 	/** @param type May be null if the type is unknown.
 	 * @return May be null. */
-	public <T> T readValue (String name, Class<T> type, T defaultValue, Object jsonData) {
-		OrderedMap jsonMap = (OrderedMap)jsonData;
-		Object jsonValue = jsonMap.get(name);
+	public <T> T readValue (String name, Class<T> type, T defaultValue, JsonValue jsonMap) {
+		JsonValue jsonValue = jsonMap.get(name);
 		if (jsonValue == null) return defaultValue;
 		return (T)readValue(type, null, jsonValue);
 	}
@@ -759,17 +757,15 @@ public class Json {
 	/** @param type May be null if the type is unknown.
 	 * @param elementType May be null if the type is unknown.
 	 * @return May be null. */
-	public <T> T readValue (String name, Class<T> type, Class elementType, Object jsonData) {
-		OrderedMap jsonMap = (OrderedMap)jsonData;
+	public <T> T readValue (String name, Class<T> type, Class elementType, JsonValue jsonMap) {
 		return (T)readValue(type, elementType, jsonMap.get(name));
 	}
 
 	/** @param type May be null if the type is unknown.
 	 * @param elementType May be null if the type is unknown.
 	 * @return May be null. */
-	public <T> T readValue (String name, Class<T> type, Class elementType, T defaultValue, Object jsonData) {
-		OrderedMap jsonMap = (OrderedMap)jsonData;
-		Object jsonValue = jsonMap.get(name);
+	public <T> T readValue (String name, Class<T> type, Class elementType, T defaultValue, JsonValue jsonMap) {
+		JsonValue jsonValue = jsonMap.get(name);
 		if (jsonValue == null) return defaultValue;
 		return (T)readValue(type, elementType, jsonValue);
 	}
@@ -777,27 +773,26 @@ public class Json {
 	/** @param type May be null if the type is unknown.
 	 * @param elementType May be null if the type is unknown.
 	 * @return May be null. */
-	public <T> T readValue (Class<T> type, Class elementType, T defaultValue, Object jsonData) {
+	public <T> T readValue (Class<T> type, Class elementType, T defaultValue, JsonValue jsonData) {
 		return (T)readValue(type, elementType, jsonData);
 	}
 
 	/** @param type May be null if the type is unknown.
 	 * @return May be null. */
-	public <T> T readValue (Class<T> type, Object jsonData) {
+	public <T> T readValue (Class<T> type, JsonValue jsonData) {
 		return (T)readValue(type, null, jsonData);
 	}
 
 	/** @param type May be null if the type is unknown.
 	 * @param elementType May be null if the type is unknown.
 	 * @return May be null. */
-	public <T> T readValue (Class<T> type, Class elementType, Object jsonData) {
+	public <T> T readValue (Class<T> type, Class elementType, JsonValue jsonData) {
 		if (jsonData == null) return null;
 
-		if (jsonData instanceof OrderedMap) {
-			OrderedMap<String, Object> jsonMap = (OrderedMap)jsonData;
-
-			String className = typeName == null ? null : (String)jsonMap.remove(typeName);
+		if (jsonData.isObject()) {
+			String className = typeName == null ? null : jsonData.getString(typeName, null);
 			if (className != null) {
+				jsonData.remove(typeName);
 				try {
 					type = (Class<T>)Class.forName(className);
 				} catch (ClassNotFoundException ex) {
@@ -814,32 +809,32 @@ public class Json {
 			Object object;
 			if (type != null) {
 				Serializer serializer = classToSerializer.get(type);
-				if (serializer != null) return (T)serializer.read(this, jsonMap, type);
+				if (serializer != null) return (T)serializer.read(this, jsonData, type);
 
 				object = newInstance(type);
 
 				if (object instanceof Serializable) {
-					((Serializable)object).read(this, jsonMap);
+					((Serializable)object).read(this, jsonData);
 					return (T)object;
 				}
 
 				if (object instanceof HashMap) {
 					HashMap result = (HashMap)object;
-					for (Entry entry : jsonMap.entries())
-						result.put(entry.key, readValue(elementType, null, entry.value));
+					for (JsonValue child = jsonData.child(); child != null; child = child.next())
+						result.put(child.name(), readValue(elementType, null, child));
 					return (T)result;
 				}
 			} else
-				object = new OrderedMap();
+				return (T)jsonData;
 
 			if (object instanceof ObjectMap) {
 				ObjectMap result = (ObjectMap)object;
-				for (String key : jsonMap.orderedKeys())
-					result.put(key, readValue(elementType, null, jsonMap.get(key)));
+				for (JsonValue child = jsonData.child(); child != null; child = child.next())
+					result.put(child.name(), readValue(elementType, null, child));
 				return (T)result;
 			}
 
-			readFields(object, jsonMap);
+			readFields(object, jsonData);
 			return (T)object;
 		}
 
@@ -848,51 +843,56 @@ public class Json {
 			if (serializer != null) return (T)serializer.read(this, jsonData, type);
 		}
 
-		if (jsonData instanceof Array) {
-			Array array = (Array)jsonData;
+		if (jsonData.isArray()) {
 			if (type == null || Array.class.isAssignableFrom(type)) {
 				Array newArray = type == null ? new Array() : (Array)newInstance(type);
-				newArray.ensureCapacity(array.size);
-				for (int i = 0, n = array.size; i < n; i++)
-					newArray.add(readValue(elementType, null, array.get(i)));
+				for (JsonValue child = jsonData.child(); child != null; child = child.next())
+					newArray.add(readValue(elementType, null, child));
 				return (T)newArray;
 			}
 			if (List.class.isAssignableFrom(type)) {
-				List newArray = type == null ? new ArrayList(array.size) : (List)newInstance(type);
-				for (int i = 0, n = array.size; i < n; i++)
-					newArray.add(readValue(elementType, null, array.get(i)));
+				List newArray = type == null ? new ArrayList() : (List)newInstance(type);
+				for (JsonValue child = jsonData.child(); child != null; child = child.next())
+					newArray.add(readValue(elementType, null, child));
 				return (T)newArray;
 			}
 			if (type.isArray()) {
 				Class componentType = type.getComponentType();
 				if (elementType == null) elementType = componentType;
-				Object newArray = java.lang.reflect.Array.newInstance(componentType, array.size);
-				for (int i = 0, n = array.size; i < n; i++)
-					java.lang.reflect.Array.set(newArray, i, readValue(elementType, null, array.get(i)));
+				Object newArray = java.lang.reflect.Array.newInstance(componentType, jsonData.size());
+				int i = 0;
+				for (JsonValue child = jsonData.child(); child != null; child = child.next())
+					java.lang.reflect.Array.set(newArray, i++, readValue(elementType, null, child));
 				return (T)newArray;
 			}
 			throw new SerializationException("Unable to convert value to required type: " + jsonData + " (" + type.getName() + ")");
 		}
 
-		if (jsonData instanceof Float) {
-			Float floatValue = (Float)jsonData;
+		if (jsonData.isNumber()) {
 			try {
-				if (type == null || type == float.class || type == Float.class) return (T)(Float)floatValue;
-				if (type == int.class || type == Integer.class) return (T)(Integer)floatValue.intValue();
-				if (type == long.class || type == Long.class) return (T)(Long)floatValue.longValue();
-				if (type == double.class || type == Double.class) return (T)(Double)floatValue.doubleValue();
-				if (type == short.class || type == Short.class) return (T)(Short)floatValue.shortValue();
-				if (type == byte.class || type == Byte.class) return (T)(Byte)floatValue.byteValue();
+				if (type == null || type == float.class || type == Float.class) return (T)(Float)jsonData.asFloat();
+				if (type == int.class || type == Integer.class) return (T)(Integer)jsonData.asInt();
+				if (type == long.class || type == Long.class) return (T)(Long)jsonData.asLong();
+				if (type == double.class || type == Double.class) return (T)(Double)(double)jsonData.asFloat();
+				if (type == String.class) return (T)Float.toString(jsonData.asFloat());
+				if (type == short.class || type == Short.class) return (T)(Short)(short)jsonData.asInt();
+				if (type == byte.class || type == Byte.class) return (T)(Byte)(byte)jsonData.asInt();
 			} catch (NumberFormatException ignored) {
 			}
-			jsonData = String.valueOf(jsonData);
+			jsonData = new JsonValue(jsonData.asString());
 		}
 
-		if (jsonData instanceof Boolean) jsonData = String.valueOf(jsonData);
+		if (jsonData.isBoolean()) {
+			try {
+				if (type == null || type == boolean.class || type == Boolean.class) return (T)(Boolean)jsonData.asBoolean();
+			} catch (NumberFormatException ignored) {
+			}
+			jsonData = new JsonValue(jsonData.asString());
+		}
 
-		if (jsonData instanceof String) {
-			String string = (String)jsonData;
-			if (type == null || type == String.class) return (T)jsonData;
+		if (jsonData.isString()) {
+			String string = jsonData.asString();
+			if (type == null || type == String.class) return (T)string;
 			try {
 				if (type == int.class || type == Integer.class) return (T)Integer.valueOf(string);
 				if (type == float.class || type == Float.class) return (T)Float.valueOf(string);
@@ -958,101 +958,7 @@ public class Json {
 	}
 
 	public String prettyPrint (String json, int singleLineColumns) {
-		StringBuilder buffer = new StringBuilder(512);
-		prettyPrint(new JsonReader().parse(json), buffer, 0, singleLineColumns);
-		return buffer.toString();
-	}
-
-	private void prettyPrint (Object object, StringBuilder buffer, int indent, int singleLineColumns) {
-		if (object instanceof OrderedMap) {
-			OrderedMap<String, ?> map = (OrderedMap)object;
-			if (map.size == 0) {
-				buffer.append("{}");
-			} else {
-				boolean newLines = !isFlat(map);
-				int start = buffer.length();
-				outer:
-				while (true) {
-					buffer.append(newLines ? "{\n" : "{ ");
-					int i = 0;
-					for (String key : map.orderedKeys()) {
-						if (newLines) indent(indent, buffer);
-						buffer.append(outputType.quoteName(key));
-						buffer.append(": ");
-						prettyPrint(map.get(key), buffer, indent + 1, singleLineColumns);
-						if (i++ < map.size - 1) buffer.append(",");
-						buffer.append(newLines ? '\n' : ' ');
-						if (!newLines && buffer.length() - start > singleLineColumns) {
-							buffer.setLength(start);
-							newLines = true;
-							continue outer;
-						}
-					}
-					break;
-				}
-				if (newLines) indent(indent - 1, buffer);
-				buffer.append('}');
-			}
-		} else if (object instanceof Array) {
-			Array array = (Array)object;
-			if (array.size == 0) {
-				buffer.append("[]");
-			} else {
-				boolean newLines = !isFlat(array);
-				int start = buffer.length();
-				outer:
-				while (true) {
-					buffer.append(newLines ? "[\n" : "[ ");
-					for (int i = 0, n = array.size; i < n; i++) {
-						if (newLines) indent(indent, buffer);
-						prettyPrint(array.get(i), buffer, indent + 1, singleLineColumns);
-						if (i < array.size - 1) buffer.append(",");
-						buffer.append(newLines ? '\n' : ' ');
-						if (!newLines && buffer.length() - start > singleLineColumns) {
-							buffer.setLength(start);
-							newLines = true;
-							continue outer;
-						}
-					}
-					break;
-				}
-				if (newLines) indent(indent - 1, buffer);
-				buffer.append(']');
-			}
-		} else if (object instanceof String) {
-			buffer.append(outputType.quoteValue((String)object));
-		} else if (object instanceof Float) {
-			Float floatValue = (Float)object;
-			int intValue = floatValue.intValue();
-			buffer.append(floatValue - intValue == 0 ? intValue : object);
-		} else if (object instanceof Boolean) {
-			buffer.append(object);
-		} else if (object == null) {
-			buffer.append("null");
-		} else
-			throw new SerializationException("Unknown object type: " + object.getClass());
-	}
-
-	static private boolean isFlat (ObjectMap<?, ?> map) {
-		for (Entry entry : map.entries()) {
-			if (entry.value instanceof ObjectMap) return false;
-			if (entry.value instanceof Array) return false;
-		}
-		return true;
-	}
-
-	static private boolean isFlat (Array array) {
-		for (int i = 0, n = array.size; i < n; i++) {
-			Object value = array.get(i);
-			if (value instanceof ObjectMap) return false;
-			if (value instanceof Array) return false;
-		}
-		return true;
-	}
-
-	static private void indent (int count, StringBuilder buffer) {
-		for (int i = 0; i < count; i++)
-			buffer.append('\t');
+		return new JsonReader().parse(json).prettyPrint(outputType, singleLineColumns);
 	}
 
 	static private class FieldMetadata {
@@ -1079,19 +985,19 @@ public class Json {
 	static public interface Serializer<T> {
 		public void write (Json json, T object, Class knownType);
 
-		public T read (Json json, Object jsonData, Class type);
+		public T read (Json json, JsonValue jsonData, Class type);
 	}
 
 	static abstract public class ReadOnlySerializer<T> implements Serializer<T> {
 		public void write (Json json, T object, Class knownType) {
 		}
 
-		abstract public T read (Json json, Object jsonData, Class type);
+		abstract public T read (Json json, JsonValue jsonData, Class type);
 	}
 
 	static public interface Serializable {
 		public void write (Json json);
 
-		public void read (Json json, OrderedMap<String, Object> jsonData);
+		public void read (Json json, JsonValue jsonData);
 	}
 }
diff --git a/gdx/src/com/badlogic/gdx/utils/JsonReader.java b/gdx/src/com/badlogic/gdx/utils/JsonReader.java
index 0355599..625dd2f 100644
--- a/gdx/src/com/badlogic/gdx/utils/JsonReader.java
+++ b/gdx/src/com/badlogic/gdx/utils/JsonReader.java
@@ -20,6 +20,7 @@
 package com.badlogic.gdx.utils;
 
 import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.utils.JsonValue.ValueType;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -28,17 +29,16 @@ import java.io.Reader;
 
 /** Lightweight JSON parser.<br>
  * <br>
- * The default behavior is to parse the JSON into a DOM made up of {@link OrderedMap}, {@link Array}, String, Float, and Boolean
- * objects. Extend this class and override methods to perform event driven parsing. When this is done, the parse methods will
- * return null.
+ * The default behavior is to parse the JSON into a DOM containing {@link JsonValue} objects. Extend this class and override
+ * methods to perform event driven parsing. When this is done, the parse methods will return null.
  * @author Nathan Sweet */
 public class JsonReader {
-	public Object parse (String json) {
+	public JsonValue parse (String json) {
 		char[] data = json.toCharArray();
 		return parse(data, 0, data.length);
 	}
 
-	public Object parse (Reader reader) {
+	public JsonValue parse (Reader reader) {
 		try {
 			char[] data = new char[1024];
 			int offset = 0;
@@ -63,7 +63,7 @@ public class JsonReader {
 		}
 	}
 
-	public Object parse (InputStream input) {
+	public JsonValue parse (InputStream input) {
 		try {
 			return parse(new InputStreamReader(input, "ISO-8859-1"));
 		} catch (IOException ex) {
@@ -71,7 +71,7 @@ public class JsonReader {
 		}
 	}
 
-	public Object parse (FileHandle file) {
+	public JsonValue parse (FileHandle file) {
 		try {
 			return parse(file.read());
 		} catch (Exception ex) {
@@ -79,7 +79,7 @@ public class JsonReader {
 		}
 	}
 
-	public Object parse (char[] data, int offset, int length) {
+	public JsonValue parse (char[] data, int offset, int length) {
 		int cs, p = offset, pe = length, eof = pe, top = 0;
 		int[] stack = new int[4];
 
@@ -178,7 +178,7 @@ public class JsonReader {
 							while (_nacts-- > 0) {
 								switch (_json_actions[_acts++]) {
 								case 0:
-								// line 105 "JsonReader.rl"
+								// line 106 "JsonReader.rl"
 								{
 									s = p;
 									needsUnescape = false;
@@ -186,13 +186,13 @@ public class JsonReader {
 								}
 									break;
 								case 1:
-								// line 110 "JsonReader.rl"
+								// line 111 "JsonReader.rl"
 								{
 									needsUnescape = true;
 								}
 									break;
 								case 2:
-								// line 113 "JsonReader.rl"
+								// line 114 "JsonReader.rl"
 								{
 									String name = new String(data, s, p - s);
 									s = p;
@@ -202,7 +202,7 @@ public class JsonReader {
 								}
 									break;
 								case 3:
-								// line 120 "JsonReader.rl"
+								// line 121 "JsonReader.rl"
 								{
 									if (!discardBuffer) {
 										String value = new String(data, s, p - s);
@@ -215,17 +215,27 @@ public class JsonReader {
 								}
 									break;
 								case 4:
-								// line 130 "JsonReader.rl"
+								// line 131 "JsonReader.rl"
 								{
 									String value = new String(data, s, p - s);
 									s = p;
 									String name = names.size > 0 ? names.pop() : null;
-									if (debug) System.out.println("number: " + name + "=" + Float.parseFloat(value));
-									number(name, Float.parseFloat(value));
+									if (debug) System.out.println("double: " + name + "=" + Double.parseDouble(value));
+									number(name, Double.parseDouble(value));
 								}
 									break;
 								case 5:
-								// line 137 "JsonReader.rl"
+								// line 138 "JsonReader.rl"
+								{
+									String value = new String(data, s, p - s);
+									s = p;
+									String name = names.size > 0 ? names.pop() : null;
+									if (debug) System.out.println("long: " + name + "=" + Long.parseLong(value));
+									number(name, Long.parseLong(value));
+								}
+									break;
+								case 6:
+								// line 145 "JsonReader.rl"
 								{
 									String name = names.size > 0 ? names.pop() : null;
 									if (debug) System.out.println("boolean: " + name + "=true");
@@ -233,8 +243,8 @@ public class JsonReader {
 									discardBuffer = true;
 								}
 									break;
-								case 6:
-								// line 143 "JsonReader.rl"
+								case 7:
+								// line 151 "JsonReader.rl"
 								{
 									String name = names.size > 0 ? names.pop() : null;
 									if (debug) System.out.println("boolean: " + name + "=false");
@@ -242,8 +252,8 @@ public class JsonReader {
 									discardBuffer = true;
 								}
 									break;
-								case 7:
-								// line 149 "JsonReader.rl"
+								case 8:
+								// line 157 "JsonReader.rl"
 								{
 									String name = names.size > 0 ? names.pop() : null;
 									if (debug) System.out.println("null: " + name);
@@ -251,8 +261,8 @@ public class JsonReader {
 									discardBuffer = true;
 								}
 									break;
-								case 8:
-								// line 155 "JsonReader.rl"
+								case 9:
+								// line 163 "JsonReader.rl"
 								{
 									String name = names.size > 0 ? names.pop() : null;
 									if (debug) System.out.println("startObject: " + name);
@@ -265,15 +275,15 @@ public class JsonReader {
 										}
 										{
 											stack[top++] = cs;
-											cs = 9;
+											cs = 8;
 											_goto_targ = 2;
 											if (true) continue _goto;
 										}
 									}
 								}
 									break;
-								case 9:
-								// line 161 "JsonReader.rl"
+								case 10:
+								// line 169 "JsonReader.rl"
 								{
 									if (debug) System.out.println("endObject");
 									pop();
@@ -284,8 +294,8 @@ public class JsonReader {
 									}
 								}
 									break;
-								case 10:
-								// line 166 "JsonReader.rl"
+								case 11:
+								// line 174 "JsonReader.rl"
 								{
 									String name = names.size > 0 ? names.pop() : null;
 									if (debug) System.out.println("startArray: " + name);
@@ -298,15 +308,15 @@ public class JsonReader {
 										}
 										{
 											stack[top++] = cs;
-											cs = 49;
+											cs = 46;
 											_goto_targ = 2;
 											if (true) continue _goto;
 										}
 									}
 								}
 									break;
-								case 11:
-								// line 172 "JsonReader.rl"
+								case 12:
+								// line 180 "JsonReader.rl"
 								{
 									if (debug) System.out.println("endArray");
 									pop();
@@ -317,7 +327,7 @@ public class JsonReader {
 									}
 								}
 									break;
-								// line 207 "JsonReader.java"
+								// line 217 "JsonReader.java"
 								}
 							}
 						}
@@ -338,7 +348,7 @@ public class JsonReader {
 							while (__nacts-- > 0) {
 								switch (_json_actions[__acts++]) {
 								case 3:
-								// line 120 "JsonReader.rl"
+								// line 121 "JsonReader.rl"
 								{
 									if (!discardBuffer) {
 										String value = new String(data, s, p - s);
@@ -351,17 +361,27 @@ public class JsonReader {
 								}
 									break;
 								case 4:
-								// line 130 "JsonReader.rl"
+								// line 131 "JsonReader.rl"
 								{
 									String value = new String(data, s, p - s);
 									s = p;
 									String name = names.size > 0 ? names.pop() : null;
-									if (debug) System.out.println("number: " + name + "=" + Float.parseFloat(value));
-									number(name, Float.parseFloat(value));
+									if (debug) System.out.println("double: " + name + "=" + Double.parseDouble(value));
+									number(name, Double.parseDouble(value));
 								}
 									break;
 								case 5:
-								// line 137 "JsonReader.rl"
+								// line 138 "JsonReader.rl"
+								{
+									String value = new String(data, s, p - s);
+									s = p;
+									String name = names.size > 0 ? names.pop() : null;
+									if (debug) System.out.println("long: " + name + "=" + Long.parseLong(value));
+									number(name, Long.parseLong(value));
+								}
+									break;
+								case 6:
+								// line 145 "JsonReader.rl"
 								{
 									String name = names.size > 0 ? names.pop() : null;
 									if (debug) System.out.println("boolean: " + name + "=true");
@@ -369,8 +389,8 @@ public class JsonReader {
 									discardBuffer = true;
 								}
 									break;
-								case 6:
-								// line 143 "JsonReader.rl"
+								case 7:
+								// line 151 "JsonReader.rl"
 								{
 									String name = names.size > 0 ? names.pop() : null;
 									if (debug) System.out.println("boolean: " + name + "=false");
@@ -378,8 +398,8 @@ public class JsonReader {
 									discardBuffer = true;
 								}
 									break;
-								case 7:
-								// line 149 "JsonReader.rl"
+								case 8:
+								// line 157 "JsonReader.rl"
 								{
 									String name = names.size > 0 ? names.pop() : null;
 									if (debug) System.out.println("null: " + name);
@@ -387,7 +407,7 @@ public class JsonReader {
 									discardBuffer = true;
 								}
 									break;
-								// line 278 "JsonReader.java"
+								// line 298 "JsonReader.java"
 								}
 							}
 						}
@@ -398,7 +418,7 @@ public class JsonReader {
 				}
 			}
 
-			// line 203 "JsonReader.rl"
+			// line 212 "JsonReader.rl"
 
 		} catch (RuntimeException ex) {
 			parseRuntimeEx = ex;
@@ -411,175 +431,172 @@ public class JsonReader {
 			throw new SerializationException("Error parsing JSON on line " + lineNumber + " near: " + new String(data, p, pe - p),
 				parseRuntimeEx);
 		} else if (elements.size != 0) {
-			Object element = elements.peek();
+			JsonValue element = elements.peek();
 			elements.clear();
-			if (element instanceof OrderedMap)
+			if (element != null && element.isObject())
 				throw new SerializationException("Error parsing JSON, unmatched brace.");
 			else
 				throw new SerializationException("Error parsing JSON, unmatched bracket.");
 		}
-		Object root = this.root;
+		JsonValue root = this.root;
 		this.root = null;
 		return root;
 	}
 
-	// line 288 "JsonReader.java"
+	// line 308 "JsonReader.java"
 	private static byte[] init__json_actions_0 () {
-		return new byte[] {0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 8, 1, 9, 1, 10, 1, 11, 2, 0, 2, 2, 0, 3, 2, 3, 9, 2, 3, 11, 2, 4, 9,
-			2, 4, 11, 2, 5, 3, 2, 6, 3, 2, 7, 3, 3, 5, 3, 9, 3, 5, 3, 11, 3, 6, 3, 9, 3, 6, 3, 11, 3, 7, 3, 9, 3, 7, 3, 11};
+		return new byte[] {0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 9, 1, 10, 1, 11, 1, 12, 2, 0, 2, 2, 0, 3, 2, 3, 10, 2, 3, 12,
+			2, 4, 10, 2, 4, 12, 2, 5, 10, 2, 5, 12, 2, 6, 3, 2, 7, 3, 2, 8, 3, 3, 6, 3, 10, 3, 6, 3, 12, 3, 7, 3, 10, 3, 7, 3, 12,
+			3, 8, 3, 10, 3, 8, 3, 12};
 	}
 
 	private static final byte _json_actions[] = init__json_actions_0();
 
 	private static short[] init__json_key_offsets_0 () {
-		return new short[] {0, 0, 18, 20, 22, 31, 33, 35, 39, 41, 56, 58, 60, 64, 82, 84, 86, 91, 105, 112, 114, 123, 125, 133,
-			137, 139, 145, 154, 161, 163, 173, 175, 184, 188, 190, 197, 205, 213, 221, 229, 236, 244, 252, 260, 267, 275, 283, 291,
-			298, 307, 327, 329, 331, 336, 355, 362, 364, 374, 376, 385, 389, 391, 398, 406, 414, 422, 430, 437, 445, 453, 461, 468,
-			476, 484, 492, 499, 508, 511, 518, 526, 533, 538, 546, 554, 562, 570, 577, 585, 593, 601, 608, 616, 624, 632, 639, 639};
+		return new short[] {0, 0, 18, 20, 22, 31, 33, 37, 39, 54, 56, 58, 62, 80, 82, 84, 89, 103, 110, 112, 115, 123, 127, 129,
+			135, 144, 151, 153, 161, 170, 174, 176, 183, 191, 199, 207, 215, 222, 230, 238, 246, 253, 261, 269, 277, 284, 293, 313,
+			315, 317, 322, 341, 348, 350, 358, 367, 371, 373, 380, 388, 396, 404, 412, 419, 427, 435, 443, 450, 458, 466, 474, 481,
+			490, 493, 500, 506, 513, 518, 526, 534, 542, 550, 557, 565, 573, 581, 588, 596, 604, 612, 619, 619};
 	}
 
 	private static final short _json_key_offsets[] = init__json_key_offsets_0();
 
 	private static char[] init__json_trans_keys_0 () {
 		return new char[] {32, 34, 36, 45, 91, 95, 102, 110, 116, 123, 9, 13, 48, 57, 65, 90, 97, 122, 34, 92, 34, 92, 34, 47, 92,
-			98, 102, 110, 114, 116, 117, 48, 57, 48, 57, 43, 45, 48, 57, 48, 57, 32, 34, 36, 44, 45, 95, 125, 9, 13, 48, 57, 65, 90,
-			97, 122, 34, 92, 34, 92, 32, 58, 9, 13, 32, 34, 36, 45, 91, 95, 102, 110, 116, 123, 9, 13, 48, 57, 65, 90, 97, 122, 34,
-			92, 34, 92, 32, 44, 125, 9, 13, 32, 34, 36, 45, 95, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 44, 58, 93, 125, 9, 13, 48,
-			57, 32, 46, 58, 69, 101, 9, 13, 48, 57, 48, 57, 32, 58, 69, 101, 9, 13, 48, 57, 43, 45, 48, 57, 48, 57, 32, 58, 9, 13,
-			48, 57, 34, 47, 92, 98, 102, 110, 114, 116, 117, 32, 44, 58, 93, 125, 9, 13, 48, 57, 32, 44, 46, 69, 101, 125, 9, 13,
-			48, 57, 48, 57, 32, 44, 69, 101, 125, 9, 13, 48, 57, 43, 45, 48, 57, 48, 57, 32, 44, 125, 9, 13, 48, 57, 32, 44, 58, 93,
-			97, 125, 9, 13, 32, 44, 58, 93, 108, 125, 9, 13, 32, 44, 58, 93, 115, 125, 9, 13, 32, 44, 58, 93, 101, 125, 9, 13, 32,
-			44, 58, 93, 125, 9, 13, 32, 44, 58, 93, 117, 125, 9, 13, 32, 44, 58, 93, 108, 125, 9, 13, 32, 44, 58, 93, 108, 125, 9,
-			13, 32, 44, 58, 93, 125, 9, 13, 32, 44, 58, 93, 114, 125, 9, 13, 32, 44, 58, 93, 117, 125, 9, 13, 32, 44, 58, 93, 101,
-			125, 9, 13, 32, 44, 58, 93, 125, 9, 13, 34, 47, 92, 98, 102, 110, 114, 116, 117, 32, 34, 36, 44, 45, 91, 93, 95, 102,
-			110, 116, 123, 9, 13, 48, 57, 65, 90, 97, 122, 34, 92, 34, 92, 32, 44, 93, 9, 13, 32, 34, 36, 45, 91, 93, 95, 102, 110,
-			116, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 44, 58, 93, 125, 9, 13, 48, 57, 32, 44, 46, 69, 93, 101, 9, 13, 48, 57,
-			48, 57, 32, 44, 69, 93, 101, 9, 13, 48, 57, 43, 45, 48, 57, 48, 57, 32, 44, 93, 9, 13, 48, 57, 32, 44, 58, 93, 97, 125,
-			9, 13, 32, 44, 58, 93, 108, 125, 9, 13, 32, 44, 58, 93, 115, 125, 9, 13, 32, 44, 58, 93, 101, 125, 9, 13, 32, 44, 58,
-			93, 125, 9, 13, 32, 44, 58, 93, 117, 125, 9, 13, 32, 44, 58, 93, 108, 125, 9, 13, 32, 44, 58, 93, 108, 125, 9, 13, 32,
-			44, 58, 93, 125, 9, 13, 32, 44, 58, 93, 114, 125, 9, 13, 32, 44, 58, 93, 117, 125, 9, 13, 32, 44, 58, 93, 101, 125, 9,
-			13, 32, 44, 58, 93, 125, 9, 13, 34, 47, 92, 98, 102, 110, 114, 116, 117, 32, 9, 13, 32, 44, 58, 93, 125, 9, 13, 32, 46,
-			69, 101, 9, 13, 48, 57, 32, 69, 101, 9, 13, 48, 57, 32, 9, 13, 48, 57, 32, 44, 58, 93, 97, 125, 9, 13, 32, 44, 58, 93,
-			108, 125, 9, 13, 32, 44, 58, 93, 115, 125, 9, 13, 32, 44, 58, 93, 101, 125, 9, 13, 32, 44, 58, 93, 125, 9, 13, 32, 44,
-			58, 93, 117, 125, 9, 13, 32, 44, 58, 93, 108, 125, 9, 13, 32, 44, 58, 93, 108, 125, 9, 13, 32, 44, 58, 93, 125, 9, 13,
-			32, 44, 58, 93, 114, 125, 9, 13, 32, 44, 58, 93, 117, 125, 9, 13, 32, 44, 58, 93, 101, 125, 9, 13, 32, 44, 58, 93, 125,
-			9, 13, 0};
+			98, 102, 110, 114, 116, 117, 48, 57, 43, 45, 48, 57, 48, 57, 32, 34, 36, 44, 45, 95, 125, 9, 13, 48, 57, 65, 90, 97,
+			122, 34, 92, 34, 92, 32, 58, 9, 13, 32, 34, 36, 45, 91, 95, 102, 110, 116, 123, 9, 13, 48, 57, 65, 90, 97, 122, 34, 92,
+			34, 92, 32, 44, 125, 9, 13, 32, 34, 36, 45, 95, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 44, 58, 93, 125, 9, 13, 48, 57,
+			46, 48, 57, 32, 58, 69, 101, 9, 13, 48, 57, 43, 45, 48, 57, 48, 57, 32, 58, 9, 13, 48, 57, 34, 47, 92, 98, 102, 110,
+			114, 116, 117, 32, 44, 58, 93, 125, 9, 13, 48, 57, 32, 44, 46, 125, 9, 13, 48, 57, 32, 44, 69, 101, 125, 9, 13, 48, 57,
+			43, 45, 48, 57, 48, 57, 32, 44, 125, 9, 13, 48, 57, 32, 44, 58, 93, 97, 125, 9, 13, 32, 44, 58, 93, 108, 125, 9, 13, 32,
+			44, 58, 93, 115, 125, 9, 13, 32, 44, 58, 93, 101, 125, 9, 13, 32, 44, 58, 93, 125, 9, 13, 32, 44, 58, 93, 117, 125, 9,
+			13, 32, 44, 58, 93, 108, 125, 9, 13, 32, 44, 58, 93, 108, 125, 9, 13, 32, 44, 58, 93, 125, 9, 13, 32, 44, 58, 93, 114,
+			125, 9, 13, 32, 44, 58, 93, 117, 125, 9, 13, 32, 44, 58, 93, 101, 125, 9, 13, 32, 44, 58, 93, 125, 9, 13, 34, 47, 92,
+			98, 102, 110, 114, 116, 117, 32, 34, 36, 44, 45, 91, 93, 95, 102, 110, 116, 123, 9, 13, 48, 57, 65, 90, 97, 122, 34, 92,
+			34, 92, 32, 44, 93, 9, 13, 32, 34, 36, 45, 91, 93, 95, 102, 110, 116, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 44, 58,
+			93, 125, 9, 13, 48, 57, 32, 44, 46, 93, 9, 13, 48, 57, 32, 44, 69, 93, 101, 9, 13, 48, 57, 43, 45, 48, 57, 48, 57, 32,
+			44, 93, 9, 13, 48, 57, 32, 44, 58, 93, 97, 125, 9, 13, 32, 44, 58, 93, 108, 125, 9, 13, 32, 44, 58, 93, 115, 125, 9, 13,
+			32, 44, 58, 93, 101, 125, 9, 13, 32, 44, 58, 93, 125, 9, 13, 32, 44, 58, 93, 117, 125, 9, 13, 32, 44, 58, 93, 108, 125,
+			9, 13, 32, 44, 58, 93, 108, 125, 9, 13, 32, 44, 58, 93, 125, 9, 13, 32, 44, 58, 93, 114, 125, 9, 13, 32, 44, 58, 93,
+			117, 125, 9, 13, 32, 44, 58, 93, 101, 125, 9, 13, 32, 44, 58, 93, 125, 9, 13, 34, 47, 92, 98, 102, 110, 114, 116, 117,
+			32, 9, 13, 32, 44, 58, 93, 125, 9, 13, 32, 46, 9, 13, 48, 57, 32, 69, 101, 9, 13, 48, 57, 32, 9, 13, 48, 57, 32, 44, 58,
+			93, 97, 125, 9, 13, 32, 44, 58, 93, 108, 125, 9, 13, 32, 44, 58, 93, 115, 125, 9, 13, 32, 44, 58, 93, 101, 125, 9, 13,
+			32, 44, 58, 93, 125, 9, 13, 32, 44, 58, 93, 117, 125, 9, 13, 32, 44, 58, 93, 108, 125, 9, 13, 32, 44, 58, 93, 108, 125,
+			9, 13, 32, 44, 58, 93, 125, 9, 13, 32, 44, 58, 93, 114, 125, 9, 13, 32, 44, 58, 93, 117, 125, 9, 13, 32, 44, 58, 93,
+			101, 125, 9, 13, 32, 44, 58, 93, 125, 9, 13, 0};
 	}
 
 	private static final char _json_trans_keys[] = init__json_trans_keys_0();
 
 	private static byte[] init__json_single_lengths_0 () {
-		return new byte[] {0, 10, 2, 2, 7, 0, 0, 2, 0, 7, 2, 2, 2, 10, 2, 2, 3, 6, 5, 0, 5, 0, 4, 2, 0, 2, 7, 5, 0, 6, 0, 5, 2, 0,
-			3, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 7, 12, 2, 2, 3, 11, 5, 0, 6, 0, 5, 2, 0, 3, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6,
-			6, 5, 7, 1, 5, 4, 3, 1, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 0, 0};
+		return new byte[] {0, 10, 2, 2, 7, 0, 2, 0, 7, 2, 2, 2, 10, 2, 2, 3, 6, 5, 0, 1, 4, 2, 0, 2, 7, 5, 0, 4, 5, 2, 0, 3, 6, 6,
+			6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 7, 12, 2, 2, 3, 11, 5, 0, 4, 5, 2, 0, 3, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 7, 1,
+			5, 2, 3, 1, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 0, 0};
 	}
 
 	private static final byte _json_single_lengths[] = init__json_single_lengths_0();
 
 	private static byte[] init__json_range_lengths_0 () {
-		return new byte[] {0, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 4, 0, 0, 1, 4, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2,
-			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 1, 4, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-			1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0};
+		return new byte[] {0, 4, 0, 0, 1, 1, 1, 1, 4, 0, 0, 1, 4, 0, 0, 1, 4, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1,
+			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 1, 4, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
+			2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0};
 	}
 
 	private static final byte _json_range_lengths[] = init__json_range_lengths_0();
 
 	private static short[] init__json_index_offsets_0 () {
-		return new short[] {0, 0, 15, 18, 21, 30, 32, 34, 38, 40, 52, 55, 58, 62, 77, 80, 83, 88, 99, 106, 108, 116, 118, 125, 129,
-			131, 136, 145, 152, 154, 163, 165, 173, 177, 179, 185, 193, 201, 209, 217, 224, 232, 240, 248, 255, 263, 271, 279, 286,
-			295, 312, 315, 318, 323, 339, 346, 348, 357, 359, 367, 371, 373, 379, 387, 395, 403, 411, 418, 426, 434, 442, 449, 457,
-			465, 473, 480, 489, 492, 499, 506, 512, 516, 524, 532, 540, 548, 555, 563, 571, 579, 586, 594, 602, 610, 617, 618};
+		return new short[] {0, 0, 15, 18, 21, 30, 32, 36, 38, 50, 53, 56, 60, 75, 78, 81, 86, 97, 104, 106, 109, 116, 120, 122,
+			127, 136, 143, 145, 152, 160, 164, 166, 172, 180, 188, 196, 204, 211, 219, 227, 235, 242, 250, 258, 266, 273, 282, 299,
+			302, 305, 310, 326, 333, 335, 342, 350, 354, 356, 362, 370, 378, 386, 394, 401, 409, 417, 425, 432, 440, 448, 456, 463,
+			472, 475, 482, 487, 493, 497, 505, 513, 521, 529, 536, 544, 552, 560, 567, 575, 583, 591, 598, 599};
 	}
 
 	private static final short _json_index_offsets[] = init__json_index_offsets_0();
 
 	private static byte[] init__json_trans_targs_0 () {
-		return new byte[] {1, 2, 77, 5, 76, 77, 81, 86, 90, 76, 1, 78, 77, 77, 0, 76, 4, 3, 76, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0,
-			78, 0, 79, 0, 8, 8, 80, 0, 80, 0, 9, 10, 18, 17, 19, 18, 94, 9, 18, 18, 18, 0, 12, 48, 11, 12, 48, 11, 12, 13, 12, 0,
-			13, 14, 27, 28, 16, 27, 35, 40, 44, 16, 13, 29, 27, 27, 0, 16, 26, 15, 16, 26, 15, 16, 17, 94, 16, 0, 17, 10, 18, 19,
-			18, 94, 17, 18, 18, 18, 0, 12, 0, 13, 0, 0, 12, 18, 20, 0, 12, 21, 13, 23, 23, 12, 20, 0, 22, 0, 12, 13, 23, 23, 12, 22,
-			0, 24, 24, 25, 0, 25, 0, 12, 13, 12, 25, 0, 15, 15, 15, 15, 15, 15, 15, 15, 0, 16, 17, 0, 0, 94, 16, 27, 29, 0, 16, 17,
-			30, 32, 32, 94, 16, 29, 0, 31, 0, 16, 17, 32, 32, 94, 16, 31, 0, 33, 33, 34, 0, 34, 0, 16, 17, 94, 16, 34, 0, 16, 17, 0,
-			0, 36, 94, 16, 27, 16, 17, 0, 0, 37, 94, 16, 27, 16, 17, 0, 0, 38, 94, 16, 27, 16, 17, 0, 0, 39, 94, 16, 27, 16, 17, 0,
-			0, 94, 16, 27, 16, 17, 0, 0, 41, 94, 16, 27, 16, 17, 0, 0, 42, 94, 16, 27, 16, 17, 0, 0, 43, 94, 16, 27, 16, 17, 0, 0,
-			94, 16, 27, 16, 17, 0, 0, 45, 94, 16, 27, 16, 17, 0, 0, 46, 94, 16, 27, 16, 17, 0, 0, 47, 94, 16, 27, 16, 17, 0, 0, 94,
-			16, 27, 11, 11, 11, 11, 11, 11, 11, 11, 0, 49, 50, 54, 53, 55, 52, 95, 54, 62, 67, 71, 52, 49, 56, 54, 54, 0, 52, 75,
-			51, 52, 75, 51, 52, 53, 95, 52, 0, 53, 50, 54, 55, 52, 95, 54, 62, 67, 71, 52, 53, 56, 54, 54, 0, 52, 53, 0, 95, 0, 52,
-			54, 56, 0, 52, 53, 57, 59, 95, 59, 52, 56, 0, 58, 0, 52, 53, 59, 95, 59, 52, 58, 0, 60, 60, 61, 0, 61, 0, 52, 53, 95,
-			52, 61, 0, 52, 53, 0, 95, 63, 0, 52, 54, 52, 53, 0, 95, 64, 0, 52, 54, 52, 53, 0, 95, 65, 0, 52, 54, 52, 53, 0, 95, 66,
-			0, 52, 54, 52, 53, 0, 95, 0, 52, 54, 52, 53, 0, 95, 68, 0, 52, 54, 52, 53, 0, 95, 69, 0, 52, 54, 52, 53, 0, 95, 70, 0,
-			52, 54, 52, 53, 0, 95, 0, 52, 54, 52, 53, 0, 95, 72, 0, 52, 54, 52, 53, 0, 95, 73, 0, 52, 54, 52, 53, 0, 95, 74, 0, 52,
-			54, 52, 53, 0, 95, 0, 52, 54, 51, 51, 51, 51, 51, 51, 51, 51, 0, 76, 76, 0, 76, 0, 0, 0, 0, 76, 77, 76, 6, 7, 7, 76, 78,
-			0, 76, 7, 7, 76, 79, 0, 76, 76, 80, 0, 76, 0, 0, 0, 82, 0, 76, 77, 76, 0, 0, 0, 83, 0, 76, 77, 76, 0, 0, 0, 84, 0, 76,
-			77, 76, 0, 0, 0, 85, 0, 76, 77, 76, 0, 0, 0, 0, 76, 77, 76, 0, 0, 0, 87, 0, 76, 77, 76, 0, 0, 0, 88, 0, 76, 77, 76, 0,
-			0, 0, 89, 0, 76, 77, 76, 0, 0, 0, 0, 76, 77, 76, 0, 0, 0, 91, 0, 76, 77, 76, 0, 0, 0, 92, 0, 76, 77, 76, 0, 0, 0, 93, 0,
-			76, 77, 76, 0, 0, 0, 0, 76, 77, 0, 0, 0};
+		return new byte[] {1, 2, 73, 5, 72, 73, 77, 82, 86, 72, 1, 74, 73, 73, 0, 72, 4, 3, 72, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0,
+			74, 0, 7, 7, 76, 0, 76, 0, 8, 9, 17, 16, 18, 17, 90, 8, 17, 17, 17, 0, 11, 45, 10, 11, 45, 10, 11, 12, 11, 0, 12, 13,
+			25, 26, 15, 25, 32, 37, 41, 15, 12, 27, 25, 25, 0, 15, 24, 14, 15, 24, 14, 15, 16, 90, 15, 0, 16, 9, 17, 18, 17, 90, 16,
+			17, 17, 17, 0, 11, 0, 12, 0, 0, 11, 17, 19, 0, 20, 19, 0, 11, 12, 21, 21, 11, 20, 0, 22, 22, 23, 0, 23, 0, 11, 12, 11,
+			23, 0, 14, 14, 14, 14, 14, 14, 14, 14, 0, 15, 16, 0, 0, 90, 15, 25, 27, 0, 15, 16, 28, 90, 15, 27, 0, 15, 16, 29, 29,
+			90, 15, 28, 0, 30, 30, 31, 0, 31, 0, 15, 16, 90, 15, 31, 0, 15, 16, 0, 0, 33, 90, 15, 25, 15, 16, 0, 0, 34, 90, 15, 25,
+			15, 16, 0, 0, 35, 90, 15, 25, 15, 16, 0, 0, 36, 90, 15, 25, 15, 16, 0, 0, 90, 15, 25, 15, 16, 0, 0, 38, 90, 15, 25, 15,
+			16, 0, 0, 39, 90, 15, 25, 15, 16, 0, 0, 40, 90, 15, 25, 15, 16, 0, 0, 90, 15, 25, 15, 16, 0, 0, 42, 90, 15, 25, 15, 16,
+			0, 0, 43, 90, 15, 25, 15, 16, 0, 0, 44, 90, 15, 25, 15, 16, 0, 0, 90, 15, 25, 10, 10, 10, 10, 10, 10, 10, 10, 0, 46, 47,
+			51, 50, 52, 49, 91, 51, 58, 63, 67, 49, 46, 53, 51, 51, 0, 49, 71, 48, 49, 71, 48, 49, 50, 91, 49, 0, 50, 47, 51, 52,
+			49, 91, 51, 58, 63, 67, 49, 50, 53, 51, 51, 0, 49, 50, 0, 91, 0, 49, 51, 53, 0, 49, 50, 54, 91, 49, 53, 0, 49, 50, 55,
+			91, 55, 49, 54, 0, 56, 56, 57, 0, 57, 0, 49, 50, 91, 49, 57, 0, 49, 50, 0, 91, 59, 0, 49, 51, 49, 50, 0, 91, 60, 0, 49,
+			51, 49, 50, 0, 91, 61, 0, 49, 51, 49, 50, 0, 91, 62, 0, 49, 51, 49, 50, 0, 91, 0, 49, 51, 49, 50, 0, 91, 64, 0, 49, 51,
+			49, 50, 0, 91, 65, 0, 49, 51, 49, 50, 0, 91, 66, 0, 49, 51, 49, 50, 0, 91, 0, 49, 51, 49, 50, 0, 91, 68, 0, 49, 51, 49,
+			50, 0, 91, 69, 0, 49, 51, 49, 50, 0, 91, 70, 0, 49, 51, 49, 50, 0, 91, 0, 49, 51, 48, 48, 48, 48, 48, 48, 48, 48, 0, 72,
+			72, 0, 72, 0, 0, 0, 0, 72, 73, 72, 75, 72, 74, 0, 72, 6, 6, 72, 75, 0, 72, 72, 76, 0, 72, 0, 0, 0, 78, 0, 72, 73, 72, 0,
+			0, 0, 79, 0, 72, 73, 72, 0, 0, 0, 80, 0, 72, 73, 72, 0, 0, 0, 81, 0, 72, 73, 72, 0, 0, 0, 0, 72, 73, 72, 0, 0, 0, 83, 0,
+			72, 73, 72, 0, 0, 0, 84, 0, 72, 73, 72, 0, 0, 0, 85, 0, 72, 73, 72, 0, 0, 0, 0, 72, 73, 72, 0, 0, 0, 87, 0, 72, 73, 72,
+			0, 0, 0, 88, 0, 72, 73, 72, 0, 0, 0, 89, 0, 72, 73, 72, 0, 0, 0, 0, 72, 73, 0, 0, 0};
 	}
 
 	private static final byte _json_trans_targs[] = init__json_trans_targs_0();
 
 	private static byte[] init__json_trans_actions_0 () {
-		return new byte[] {0, 0, 1, 1, 15, 1, 1, 1, 1, 11, 0, 1, 1, 1, 0, 22, 1, 1, 7, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0,
-			0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 13, 0, 1, 1, 1, 0, 19, 1, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 15, 1, 1, 1, 1, 11, 0,
-			1, 1, 1, 0, 22, 1, 1, 7, 0, 0, 0, 0, 13, 0, 0, 0, 0, 1, 1, 1, 13, 0, 1, 1, 1, 0, 5, 0, 5, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0,
-			0, 5, 0, 0, 0, 0, 5, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 7, 7, 0, 0, 25, 7, 0,
-			0, 0, 9, 9, 0, 0, 0, 31, 9, 0, 0, 0, 0, 9, 9, 0, 0, 31, 9, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 31, 9, 0, 0, 7, 7, 0, 0, 0, 25,
-			7, 0, 7, 7, 0, 0, 0, 25, 7, 0, 7, 7, 0, 0, 0, 25, 7, 0, 7, 7, 0, 0, 0, 25, 7, 0, 40, 40, 0, 0, 54, 40, 0, 7, 7, 0, 0, 0,
-			25, 7, 0, 7, 7, 0, 0, 0, 25, 7, 0, 7, 7, 0, 0, 0, 25, 7, 0, 43, 43, 0, 0, 62, 43, 0, 7, 7, 0, 0, 0, 25, 7, 0, 7, 7, 0,
-			0, 0, 25, 7, 0, 7, 7, 0, 0, 0, 25, 7, 0, 37, 37, 0, 0, 46, 37, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 1, 0, 1, 15, 17, 1,
-			1, 1, 1, 11, 0, 1, 1, 1, 0, 22, 1, 1, 7, 0, 0, 0, 0, 17, 0, 0, 0, 0, 1, 1, 15, 17, 1, 1, 1, 1, 11, 0, 1, 1, 1, 0, 7, 7,
-			0, 28, 0, 7, 0, 0, 0, 9, 9, 0, 0, 34, 0, 9, 0, 0, 0, 0, 9, 9, 0, 34, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 34, 9, 0, 0, 7,
-			7, 0, 28, 0, 0, 7, 0, 7, 7, 0, 28, 0, 0, 7, 0, 7, 7, 0, 28, 0, 0, 7, 0, 7, 7, 0, 28, 0, 0, 7, 0, 40, 40, 0, 58, 0, 40,
-			0, 7, 7, 0, 28, 0, 0, 7, 0, 7, 7, 0, 28, 0, 0, 7, 0, 7, 7, 0, 28, 0, 0, 7, 0, 43, 43, 0, 66, 0, 43, 0, 7, 7, 0, 28, 0,
-			0, 7, 0, 7, 7, 0, 28, 0, 0, 7, 0, 7, 7, 0, 28, 0, 0, 7, 0, 37, 37, 0, 50, 0, 37, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0,
-			7, 0, 0, 0, 0, 7, 0, 9, 0, 0, 0, 9, 0, 0, 9, 0, 0, 9, 0, 0, 9, 9, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0,
-			7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 40, 0, 0, 0, 0, 40, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0,
-			7, 0, 0, 0, 0, 0, 7, 0, 43, 0, 0, 0, 0, 43, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0,
-			37, 0, 0, 0, 0, 37, 0, 0, 0, 0};
+		return new byte[] {0, 0, 1, 1, 17, 1, 1, 1, 1, 13, 0, 1, 1, 1, 0, 24, 1, 1, 7, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0,
+			0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 15, 0, 1, 1, 1, 0, 21, 1, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 17, 1, 1, 1, 1, 13, 0, 1, 1,
+			1, 0, 24, 1, 1, 7, 0, 0, 0, 0, 15, 0, 0, 0, 0, 1, 1, 1, 15, 0, 1, 1, 1, 0, 5, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 5, 0,
+			0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 7, 7, 0, 0, 27, 7, 0, 0, 0, 11, 11, 0, 39, 11,
+			0, 0, 9, 9, 0, 0, 33, 9, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 33, 9, 0, 0, 7, 7, 0, 0, 0, 27, 7, 0, 7, 7, 0, 0, 0, 27, 7, 0, 7,
+			7, 0, 0, 0, 27, 7, 0, 7, 7, 0, 0, 0, 27, 7, 0, 48, 48, 0, 0, 62, 48, 0, 7, 7, 0, 0, 0, 27, 7, 0, 7, 7, 0, 0, 0, 27, 7,
+			0, 7, 7, 0, 0, 0, 27, 7, 0, 51, 51, 0, 0, 70, 51, 0, 7, 7, 0, 0, 0, 27, 7, 0, 7, 7, 0, 0, 0, 27, 7, 0, 7, 7, 0, 0, 0,
+			27, 7, 0, 45, 45, 0, 0, 54, 45, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 1, 0, 1, 17, 19, 1, 1, 1, 1, 13, 0, 1, 1, 1, 0, 24,
+			1, 1, 7, 0, 0, 0, 0, 19, 0, 0, 0, 0, 1, 1, 17, 19, 1, 1, 1, 1, 13, 0, 1, 1, 1, 0, 7, 7, 0, 30, 0, 7, 0, 0, 0, 11, 11, 0,
+			42, 11, 0, 0, 9, 9, 0, 36, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 36, 9, 0, 0, 7, 7, 0, 30, 0, 0, 7, 0, 7, 7, 0, 30, 0, 0,
+			7, 0, 7, 7, 0, 30, 0, 0, 7, 0, 7, 7, 0, 30, 0, 0, 7, 0, 48, 48, 0, 66, 0, 48, 0, 7, 7, 0, 30, 0, 0, 7, 0, 7, 7, 0, 30,
+			0, 0, 7, 0, 7, 7, 0, 30, 0, 0, 7, 0, 51, 51, 0, 74, 0, 51, 0, 7, 7, 0, 30, 0, 0, 7, 0, 7, 7, 0, 30, 0, 0, 7, 0, 7, 7, 0,
+			30, 0, 0, 7, 0, 45, 45, 0, 58, 0, 45, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 11, 0, 11, 0, 0, 9, 0,
+			0, 9, 0, 0, 9, 9, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0,
+			48, 0, 0, 0, 0, 48, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 51, 0, 0, 0, 0, 51, 0, 7,
+			0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 7, 0, 45, 0, 0, 0, 0, 45, 0, 0, 0, 0};
 	}
 
 	private static final byte _json_trans_actions[] = init__json_trans_actions_0();
 
 	private static byte[] init__json_eof_actions_0 () {
 		return new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-			0, 0, 7, 9, 9, 9, 7, 7, 7, 7, 40, 7, 7, 7, 43, 7, 7, 7, 37, 0, 0};
+			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 11,
+			9, 9, 7, 7, 7, 7, 48, 7, 7, 7, 51, 7, 7, 7, 45, 0, 0};
 	}
 
 	private static final byte _json_eof_actions[] = init__json_eof_actions_0();
 
 	static final int json_start = 1;
-	static final int json_first_final = 76;
+	static final int json_first_final = 72;
 	static final int json_error = 0;
 
-	static final int json_en_object = 9;
-	static final int json_en_array = 49;
+	static final int json_en_object = 8;
+	static final int json_en_array = 46;
 	static final int json_en_main = 1;
 
-	// line 227 "JsonReader.rl"
+	// line 236 "JsonReader.rl"
 
-	private final Array elements = new Array(8);
-	private Object root, current;
+	private final Array<JsonValue> elements = new Array(8);
+	private JsonValue root, current;
 
-	private void set (String name, Object value) {
-		if (current instanceof OrderedMap)
-			((OrderedMap)current).put(name, value);
-		else if (current instanceof Array)
-			((Array)current).add(value);
+	private void addChild (String name, JsonValue child) {
+		child.setName(name);
+		if (current.isArray() || current.isObject())
+			current.addChild(child);
 		else
-			root = value;
+			root = current;
 	}
 
 	protected void startObject (String name) {
-		OrderedMap value = new OrderedMap();
-		if (current != null) set(name, value);
+		JsonValue value = new JsonValue(ValueType.object);
+		if (current != null) addChild(name, value);
 		elements.add(value);
 		current = value;
 	}
 
 	protected void startArray (String name) {
-		Array value = new Array();
-		if (current != null) set(name, value);
+		JsonValue value = new JsonValue(ValueType.array);
+		if (current != null) addChild(name, value);
 		elements.add(value);
 		current = value;
 	}
@@ -590,15 +607,19 @@ public class JsonReader {
 	}
 
 	protected void string (String name, String value) {
-		set(name, value);
+		addChild(name, new JsonValue(value));
+	}
+
+	protected void number (String name, double value) {
+		addChild(name, new JsonValue(value));
 	}
 
-	protected void number (String name, float value) {
-		set(name, value);
+	protected void number (String name, long value) {
+		addChild(name, new JsonValue(value));
 	}
 
 	protected void bool (String name, boolean value) {
-		set(name, value);
+		addChild(name, new JsonValue(value));
 	}
 
 	private String unescape (String value) {
diff --git a/gdx/src/com/badlogic/gdx/utils/JsonReader.rl b/gdx/src/com/badlogic/gdx/utils/JsonReader.rl
index 0fc9bd8..1351be2 100644
--- a/gdx/src/com/badlogic/gdx/utils/JsonReader.rl
+++ b/gdx/src/com/badlogic/gdx/utils/JsonReader.rl
@@ -24,19 +24,20 @@ import java.io.InputStreamReader;
 import java.io.Reader;
 
 import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.utils.JsonValue.ValueType;
 
 /** Lightweight JSON parser.<br>
  * <br>
- * The default behavior is to parse the JSON into a DOM made up of {@link OrderedMap}, {@link Array}, String, Float, and Boolean objects.
- * Extend this class and override methods to perform event driven parsing. When this is done, the parse methods will return null.
+ * The default behavior is to parse the JSON into a DOM containing {@link JsonValue} objects. Extend this class and override
+ * methods to perform event driven parsing. When this is done, the parse methods will return null.
  * @author Nathan Sweet */
 public class JsonReader {
-	public Object parse (String json) {
+	public JsonValue parse (String json) {
 		char[] data = json.toCharArray();
 		return parse(data, 0, data.length);
 	}
 
-	public Object parse (Reader reader) {
+	public JsonValue parse (Reader reader) {
 		try {
 			char[] data = new char[1024];
 			int offset = 0;
@@ -61,7 +62,7 @@ public class JsonReader {
 		}
 	}
 
-	public Object parse (InputStream input) {
+	public JsonValue parse (InputStream input) {
 		try {
 			return parse(new InputStreamReader(input, "ISO-8859-1"));
 		} catch (IOException ex) {
@@ -69,7 +70,7 @@ public class JsonReader {
 		}
 	}
 
-	public Object parse (FileHandle file) {
+	public JsonValue parse (FileHandle file) {
 		try {
 			return parse(file.read());
 		} catch (Exception ex) {
@@ -77,7 +78,7 @@ public class JsonReader {
 		}
 	}
 
-	public Object parse (char[] data, int offset, int length) {
+	public JsonValue parse (char[] data, int offset, int length) {
 		int cs, p = offset, pe = length, eof = pe, top = 0;
 		int[] stack = new int[4];
 
@@ -127,12 +128,19 @@ public class JsonReader {
 					string(name, value);
 				}
 			}
-			action number {
+			action double {
 				String value = new String(data, s, p - s);
 				s = p;
 				String name = names.size > 0 ? names.pop() : null;
-				if (debug) System.out.println("number: " + name + "=" + Float.parseFloat(value));
-				number(name, Float.parseFloat(value));
+				if (debug) System.out.println("double: " + name + "=" + Double.parseDouble(value));
+				number(name, Double.parseDouble(value));
+			}
+			action long {
+				String value = new String(data, s, p - s);
+				s = p;
+				String name = names.size > 0 ? names.pop() : null;
+				if (debug) System.out.println("long: " + name + "=" + Long.parseLong(value));
+				number(name, Long.parseLong(value));
 			}
 			action trueValue {
 				String name = names.size > 0 ? names.pop() : null;
@@ -175,17 +183,18 @@ public class JsonReader {
 				fret;
 			}
 
-			numberChars = '-'? [0-9]+ ('.' [0-9]+)? ([eE] [+\-]? [0-9]+)?;
+			doubleChars = '-'? [0-9]+ '.' [0-9]+? ([eE] [+\-]? [0-9]+)?;
+			longChars = '-'? [0-9]+;
 			quotedChars = (^["\\] | ('\\' ["\\/bfnrtu] >needsUnescape))*;
 			unquotedNameChars = [a-zA-Z0-9_$] ^([:}\],] | space)*;
 			unquotedValueChars = [a-zA-Z_$] ^([:}\],] | space)*;
-			name = ('"' quotedChars >buffer %name '"') | unquotedNameChars >buffer %name | numberChars >buffer %name;
+			name = ('"' quotedChars >buffer %name '"') | unquotedNameChars >buffer %name | doubleChars >buffer %name;
 
 			startObject = '{' @startObject;
 			startArray = '[' @startArray;
 			string = '"' quotedChars >buffer %string '"';
 			unquotedString = unquotedValueChars >buffer %string;
-			number = numberChars >buffer %number;
+			number = longChars >buffer %long | doubleChars >buffer %double $-1;
 			nullValue = 'null' %null;
 			booleanValue = 'true' %trueValue | 'false' %falseValue;
 			value = startObject | startArray | number | string | nullValue | booleanValue | unquotedString $-1;
@@ -211,42 +220,41 @@ public class JsonReader {
 				if (data[i] == '\n') lineNumber++;
 			throw new SerializationException("Error parsing JSON on line " + lineNumber + " near: " + new String(data, p, pe - p), parseRuntimeEx);
 		} else if (elements.size != 0) {
-			Object element = elements.peek();
+			JsonValue element = elements.peek();
 			elements.clear();
-			if (element instanceof OrderedMap)
+			if (element != null && element.isObject())
 				throw new SerializationException("Error parsing JSON, unmatched brace.");
 			else
 				throw new SerializationException("Error parsing JSON, unmatched bracket.");
 		}
-		Object root = this.root;
+		JsonValue root = this.root;
 		this.root = null;
 		return root;
 	}
 
 	%% write data;
 
-	private final Array elements = new Array(8);
-	private Object root, current;
+	private final Array<JsonValue> elements = new Array(8);
+	private JsonValue root, current;
 
-	private void set (String name, Object value) {
-		if (current instanceof OrderedMap)
-			((OrderedMap)current).put(name, value);
-		else if (current instanceof Array)
-			((Array)current).add(value);
+	private void addChild (String name, JsonValue child) {
+		child.setName(name);
+		if (current.isArray() || current.isObject())
+			current.addChild(child);
 		else
-			root = value;
+			root = current;
 	}
 
 	protected void startObject (String name) {
-		OrderedMap value = new OrderedMap();
-		if (current != null) set(name, value);
+		JsonValue value = new JsonValue(ValueType.object);
+		if (current != null) addChild(name, value);
 		elements.add(value);
 		current = value;
 	}
 
 	protected void startArray (String name) {
-		Array value = new Array();
-		if (current != null) set(name, value);
+		JsonValue value = new JsonValue(ValueType.array);
+		if (current != null) addChild(name, value);
 		elements.add(value);
 		current = value;
 	}
@@ -257,15 +265,19 @@ public class JsonReader {
 	}
 
 	protected void string (String name, String value) {
-		set(name, value);
+		addChild(name, new JsonValue(value));
+	}
+
+	protected void number (String name, double value) {
+		addChild(name, new JsonValue(value));
 	}
 
-	protected void number (String name, float value) {
-		set(name, value);
+	protected void number (String name, long value) {
+		addChild(name, new JsonValue(value));
 	}
 
 	protected void bool (String name, boolean value) {
-		set(name, value);
+		addChild(name, new JsonValue(value));
 	}
 
 	private String unescape (String value) {
diff --git a/gdx/src/com/badlogic/gdx/utils/JsonValue.java b/gdx/src/com/badlogic/gdx/utils/JsonValue.java
new file mode 100644
index 0000000..64512d4
--- /dev/null
+++ b/gdx/src/com/badlogic/gdx/utils/JsonValue.java
@@ -0,0 +1,574 @@
+
+package com.badlogic.gdx.utils;
+
+import com.badlogic.gdx.utils.JsonWriter.OutputType;
+
+/** Container for a JSON object, array, string, double, long, boolean, or null.
+ * <p>
+ * Iteration of arrays or objects is easily done using a for loop:<br>
+ * 
+ * <pre>
+ * JsonValue map = ...;
+ * for (JsonValue entry = map.child(); entry != null; entry = entry.next())
+ * 	System.out.println(entry.name() + " = " + entry.asString());
+ * </pre>
+ * @author Nathan Sweet */
+public class JsonValue {
+	private String name;
+	private ValueType type;
+
+	private String stringValue;
+	private Boolean booleanValue;
+	private Double doubleValue;
+	private long longValue;
+
+	private JsonValue child, next, prev;
+
+	public JsonValue (ValueType type) {
+		this.type = type;
+	}
+
+	/** @param value May be null. */
+	public JsonValue (String value) {
+		set(value);
+	}
+
+	public JsonValue (double value) {
+		set(value);
+	}
+
+	public JsonValue (long value) {
+		set(value);
+	}
+
+	public JsonValue (boolean value) {
+		set(value);
+	}
+
+	/** Returns the child at the specified index.
+	 * @return May be null. */
+	public JsonValue get (int index) {
+		JsonValue current = child;
+		while (current != null && index > 0) {
+			index--;
+			current = current.next;
+		}
+		return current;
+	}
+
+	/** Returns the child with the specified name.
+	 * @return May be null. */
+	public JsonValue get (String name) {
+		JsonValue current = child;
+		while (current != null && !current.name.equalsIgnoreCase(name))
+			current = current.next;
+		return current;
+	}
+
+	/** Returns the child at the specified index.
+	 * @throws IllegalArgumentException if the child was not found. */
+	public JsonValue require (int index) {
+		JsonValue current = child;
+		while (current != null && index > 0) {
+			index--;
+			current = current.next;
+		}
+		if (current == null) throw new IllegalArgumentException("Child not found with index: " + index);
+		return current;
+	}
+
+	/** Returns the child with the specified name.
+	 * @throws IllegalArgumentException if the child was not found. */
+	public JsonValue require (String name) {
+		JsonValue current = child;
+		while (current != null && !current.name.equalsIgnoreCase(name))
+			current = current.next;
+		if (current == null) throw new IllegalArgumentException("Child not found with name: " + name);
+		return current;
+	}
+
+	/** Removes the child with the specified name.
+	 * @return May be null. */
+	public JsonValue remove (int index) {
+		JsonValue child = get(index);
+		if (child == null) return null;
+		if (child.prev == null) {
+			this.child = child.next;
+			if (this.child != null) this.child.prev = null;
+		} else {
+			child.prev.next = child.next;
+			if (child.next != null) child.next.prev = child.prev;
+		}
+		return child;
+	}
+
+	/** Removes the child with the specified name.
+	 * @return May be null. */
+	public JsonValue remove (String name) {
+		JsonValue child = get(name);
+		if (child == null) return null;
+		if (child.prev == null) {
+			this.child = child.next;
+			if (this.child != null) this.child.prev = null;
+		} else {
+			child.prev.next = child.next;
+			if (child.next != null) child.next.prev = child.prev;
+		}
+		return child;
+	}
+
+	/** Returns this number of children in the array or object. */
+	public int size () {
+		JsonValue current = child;
+		int size = 0;
+		while (current != null) {
+			size++;
+			current = current.next;
+		}
+		return size;
+	}
+
+	/** Returns this value as a string.
+	 * @return May be null if this value is null.
+	 * @throws IllegalStateException if this an array or object. */
+	public String asString () {
+		if (stringValue != null) return stringValue;
+		if (doubleValue != null) {
+			if (doubleValue % 1 == 0) return Long.toString(longValue);
+			return Double.toString(doubleValue);
+		}
+		if (booleanValue != null) return Boolean.toString(booleanValue);
+		if (type == ValueType.nullValue) return null;
+		throw new IllegalStateException("Value cannot be converted to string: " + type);
+	}
+
+	/** Returns this value as a float.
+	 * @throws IllegalStateException if this an array or object. */
+	public float asFloat () {
+		if (doubleValue != null) return doubleValue.floatValue();
+		if (stringValue != null) {
+			try {
+				return Float.parseFloat(stringValue);
+			} catch (NumberFormatException ignored) {
+			}
+		}
+		if (booleanValue != null) return booleanValue ? 1 : 0;
+		throw new IllegalStateException("Value cannot be converted to float: " + type);
+	}
+
+	/** Returns this value as a double.
+	 * @throws IllegalStateException if this an array or object. */
+	public double asDouble () {
+		if (doubleValue != null) return doubleValue;
+		if (stringValue != null) {
+			try {
+				return Double.parseDouble(stringValue);
+			} catch (NumberFormatException ignored) {
+			}
+		}
+		if (booleanValue != null) return booleanValue ? 1 : 0;
+		throw new IllegalStateException("Value cannot be converted to double: " + type);
+	}
+
+	/** Returns this value as a long.
+	 * @throws IllegalStateException if this an array or object. */
+	public long asLong () {
+		if (doubleValue != null) return longValue;
+		if (stringValue != null) {
+			try {
+				return Long.parseLong(stringValue);
+			} catch (NumberFormatException ignored) {
+			}
+		}
+		if (booleanValue != null) return booleanValue ? 1 : 0;
+		throw new IllegalStateException("Value cannot be converted to long: " + type);
+	}
+
+	/** Returns this value as an int.
+	 * @throws IllegalStateException if this an array or object. */
+	public int asInt () {
+		if (doubleValue != null) return (int)longValue;
+		if (stringValue != null) {
+			try {
+				return Integer.parseInt(stringValue);
+			} catch (NumberFormatException ignored) {
+			}
+		}
+		if (booleanValue != null) return booleanValue ? 1 : 0;
+		throw new IllegalStateException("Value cannot be converted to int: " + type);
+	}
+
+	/** Returns this value as a boolean.
+	 * @throws IllegalStateException if this an array or object. */
+	public boolean asBoolean () {
+		if (booleanValue != null) return booleanValue;
+		if (doubleValue != null) return longValue == 0;
+		if (stringValue != null) return stringValue.equalsIgnoreCase("true");
+		throw new IllegalStateException("Value cannot be converted to boolean: " + type);
+	}
+
+	/** Finds the child with the specified name and returns its first child.
+	 * @return May be null. */
+	public JsonValue getChild (String name) {
+		JsonValue child = get(name);
+		return child == null ? null : child.child;
+	}
+
+	/** Finds the child with the specified name and returns it as a string. Returns defaultValue if not found.
+	 * @param defaultValue May be null. */
+	public String getString (String name, String defaultValue) {
+		JsonValue child = get(name);
+		return (child == null || !child.isValue() || child.isNull()) ? defaultValue : child.asString();
+	}
+
+	/** Finds the child with the specified name and returns it as a float. Returns defaultValue if not found. */
+	public float getFloat (String name, float defaultValue) {
+		JsonValue child = get(name);
+		return (child == null || !child.isValue()) ? defaultValue : child.asFloat();
+	}
+
+	/** Finds the child with the specified name and returns it as a double. Returns defaultValue if not found. */
+	public double getDouble (String name, double defaultValue) {
+		JsonValue child = get(name);
+		return (child == null || !child.isValue()) ? defaultValue : child.asDouble();
+	}
+
+	/** Finds the child with the specified name and returns it as a long. Returns defaultValue if not found. */
+	public long getLong (String name, long defaultValue) {
+		JsonValue child = get(name);
+		return (child == null || !child.isValue()) ? defaultValue : child.asLong();
+	}
+
+	/** Finds the child with the specified name and returns it as an int. Returns defaultValue if not found. */
+	public int getInt (String name, int defaultValue) {
+		JsonValue child = get(name);
+		return (child == null || !child.isValue()) ? defaultValue : child.asInt();
+	}
+
+	/** Finds the child with the specified name and returns it as a boolean. Returns defaultValue if not found. */
+	public boolean getBoolean (String name, boolean defaultValue) {
+		JsonValue child = get(name);
+		return (child == null || !child.isValue()) ? defaultValue : child.asBoolean();
+	}
+
+	/** Finds the child with the specified name and returns it as a string.
+	 * @throws IllegalArgumentException if the child was not found. */
+	public String getString (String name) {
+		JsonValue child = get(name);
+		if (child == null) throw new IllegalArgumentException("Named value not found: " + name);
+		return child.asString();
+	}
+
+	/** Finds the child with the specified name and returns it as a float.
+	 * @throws IllegalArgumentException if the child was not found. */
+	public float getFloat (String name) {
+		JsonValue child = get(name);
+		if (child == null) throw new IllegalArgumentException("Named value not found: " + name);
+		return child.asFloat();
+	}
+
+	/** Finds the child with the specified name and returns it as a double.
+	 * @throws IllegalArgumentException if the child was not found. */
+	public double getDouble (String name) {
+		JsonValue child = get(name);
+		if (child == null) throw new IllegalArgumentException("Named value not found: " + name);
+		return child.asDouble();
+	}
+
+	/** Finds the child with the specified name and returns it as a long.
+	 * @throws IllegalArgumentException if the child was not found. */
+	public long getLong (String name) {
+		JsonValue child = get(name);
+		if (child == null) throw new IllegalArgumentException("Named value not found: " + name);
+		return child.asLong();
+	}
+
+	/** Finds the child with the specified name and returns it as an int.
+	 * @throws IllegalArgumentException if the child was not found. */
+	public int getInt (String name) {
+		JsonValue child = get(name);
+		if (child == null) throw new IllegalArgumentException("Named value not found: " + name);
+		return child.asInt();
+	}
+
+	/** Finds the child with the specified name and returns it as a boolean.
+	 * @throws IllegalArgumentException if the child was not found. */
+	public boolean getBoolean (String name) {
+		JsonValue child = get(name);
+		if (child == null) throw new IllegalArgumentException("Named value not found: " + name);
+		return child.asBoolean();
+	}
+
+	/** Finds the child with the specified index and returns it as a string.
+	 * @throws IllegalArgumentException if the child was not found. */
+	public String getString (int index) {
+		JsonValue child = get(index);
+		if (child == null) throw new IllegalArgumentException("Indexed value not found: " + name);
+		return child.asString();
+	}
+
+	/** Finds the child with the specified index and returns it as a float.
+	 * @throws IllegalArgumentException if the child was not found. */
+	public float getFloat (int index) {
+		JsonValue child = get(index);
+		if (child == null) throw new IllegalArgumentException("Indexed value not found: " + name);
+		return child.asFloat();
+	}
+
+	/** Finds the child with the specified index and returns it as a double.
+	 * @throws IllegalArgumentException if the child was not found. */
+	public double getDouble (int index) {
+		JsonValue child = get(index);
+		if (child == null) throw new IllegalArgumentException("Indexed value not found: " + name);
+		return child.asDouble();
+	}
+
+	/** Finds the child with the specified index and returns it as a long.
+	 * @throws IllegalArgumentException if the child was not found. */
+	public long getLong (int index) {
+		JsonValue child = get(index);
+		if (child == null) throw new IllegalArgumentException("Indexed value not found: " + name);
+		return child.asLong();
+	}
+
+	/** Finds the child with the specified index and returns it as an int.
+	 * @throws IllegalArgumentException if the child was not found. */
+	public int getInt (int index) {
+		JsonValue child = get(index);
+		if (child == null) throw new IllegalArgumentException("Indexed value not found: " + name);
+		return child.asInt();
+	}
+
+	/** Finds the child with the specified index and returns it as a boolean.
+	 * @throws IllegalArgumentException if the child was not found. */
+	public boolean getBoolean (int index) {
+		JsonValue child = get(index);
+		if (child == null) throw new IllegalArgumentException("Indexed value not found: " + name);
+		return child.asBoolean();
+	}
+
+	public ValueType type () {
+		return type;
+	}
+
+	public void setType (ValueType type) {
+		if (type == null) throw new IllegalArgumentException("type cannot be null.");
+		this.type = type;
+	}
+
+	public boolean isArray () {
+		return type == ValueType.array;
+	}
+
+	public boolean isObject () {
+		return type == ValueType.object;
+	}
+
+	public boolean isString () {
+		return type == ValueType.stringValue;
+	}
+
+	/** Returns true if this is a double or long value. */
+	public boolean isNumber () {
+		return type == ValueType.doubleValue || type == ValueType.longValue;
+	}
+
+	public boolean isDouble () {
+		return type == ValueType.doubleValue;
+	}
+
+	public boolean isLong () {
+		return type == ValueType.longValue;
+	}
+
+	public boolean isBoolean () {
+		return type == ValueType.booleanValue;
+	}
+
+	public boolean isNull () {
+		return type == ValueType.nullValue;
+	}
+
+	/** Returns true if this is not an array or object. */
+	public boolean isValue () {
+		switch (type) {
+		case stringValue:
+		case doubleValue:
+		case longValue:
+		case booleanValue:
+		case nullValue:
+			return true;
+		}
+		return false;
+	}
+
+	/** Returns the name for this object value.
+	 * @return May be null. */
+	public String name () {
+		return name;
+	}
+
+	public void setName (String name) {
+		this.name = name;
+	}
+
+	/** Returns the first child for this object or array.
+	 * @return May be null. */
+	public JsonValue child () {
+		return child;
+	}
+
+	public void addChild (JsonValue newChild) {
+		JsonValue current = child;
+		if (current == null) {
+			child = newChild;
+			return;
+		}
+		while (true) {
+			if (current.next == null) {
+				current.next = newChild;
+				newChild.prev = current;
+				return;
+			}
+			current = current.next;
+		}
+	}
+
+	/** Returns the next sibling of this value.
+	 * @return May be null. */
+	public JsonValue next () {
+		return next;
+	}
+
+	public void setNext (JsonValue next) {
+		this.next = next;
+	}
+
+	/** Returns the previous sibling of this value.
+	 * @return May be null. */
+	public JsonValue prev () {
+		return prev;
+	}
+
+	public void setPrev (JsonValue prev) {
+		this.prev = prev;
+	}
+
+	/** @param value May be null. */
+	public void set (String value) {
+		stringValue = value;
+		type = value == null ? ValueType.nullValue : ValueType.stringValue;
+	}
+
+	public void set (double value) {
+		doubleValue = value;
+		longValue = (long)value;
+		type = ValueType.doubleValue;
+	}
+
+	public void set (long value) {
+		longValue = value;
+		doubleValue = (double)value;
+		type = ValueType.longValue;
+	}
+
+	public void set (boolean value) {
+		booleanValue = value;
+		type = ValueType.booleanValue;
+	}
+
+	public String toString () {
+		return prettyPrint(OutputType.minimal, 0);
+	}
+
+	public String prettyPrint (OutputType outputType, int singleLineColumns) {
+		StringBuilder buffer = new StringBuilder(512);
+		prettyPrint(this, buffer, outputType, 0, singleLineColumns);
+		return buffer.toString();
+	}
+
+	private void prettyPrint (JsonValue object, StringBuilder buffer, OutputType outputType, int indent, int singleLineColumns) {
+		if (object.isObject()) {
+			if (object.child() == null) {
+				buffer.append("{}");
+			} else {
+				boolean newLines = !isFlat(object);
+				int start = buffer.length();
+				outer:
+				while (true) {
+					buffer.append(newLines ? "{\n" : "{ ");
+					int i = 0;
+					for (JsonValue child = object.child(); child != null; child = child.next()) {
+						if (newLines) indent(indent, buffer);
+						buffer.append(outputType.quoteName(child.name()));
+						buffer.append(": ");
+						prettyPrint(child, buffer, outputType, indent + 1, singleLineColumns);
+						if (child.next() != null) buffer.append(",");
+						buffer.append(newLines ? '\n' : ' ');
+						if (!newLines && buffer.length() - start > singleLineColumns) {
+							buffer.setLength(start);
+							newLines = true;
+							continue outer;
+						}
+					}
+					break;
+				}
+				if (newLines) indent(indent - 1, buffer);
+				buffer.append('}');
+			}
+		} else if (object.isArray()) {
+			if (object.child() == null) {
+				buffer.append("[]");
+			} else {
+				boolean newLines = !isFlat(object);
+				int start = buffer.length();
+				outer:
+				while (true) {
+					buffer.append(newLines ? "[\n" : "[ ");
+					for (JsonValue child = object.child(); child != null; child = child.next()) {
+						if (newLines) indent(indent, buffer);
+						prettyPrint(child, buffer, outputType, indent + 1, singleLineColumns);
+						if (child.next() != null) buffer.append(",");
+						buffer.append(newLines ? '\n' : ' ');
+						if (!newLines && buffer.length() - start > singleLineColumns) {
+							buffer.setLength(start);
+							newLines = true;
+							continue outer;
+						}
+					}
+					break;
+				}
+				if (newLines) indent(indent - 1, buffer);
+				buffer.append(']');
+			}
+		} else if (object.isString()) {
+			buffer.append(outputType.quoteValue(object.asString()));
+		} else if (object.isDouble()) {
+			double doubleValue = object.asDouble();
+			long longValue = object.asLong();
+			buffer.append(doubleValue == longValue ? longValue : doubleValue);
+		} else if (object.isLong()) {
+			buffer.append(object.asLong());
+		} else if (object.isBoolean()) {
+			buffer.append(object.asBoolean());
+		} else if (object.isNull()) {
+			buffer.append("null");
+		} else
+			throw new SerializationException("Unknown object type: " + object);
+	}
+
+	static private boolean isFlat (JsonValue object) {
+		for (JsonValue child = object.child(); child != null; child = child.next())
+			if (child.isObject() || child.isArray()) return false;
+		return true;
+	}
+
+	static private void indent (int count, StringBuilder buffer) {
+		for (int i = 0; i < count; i++)
+			buffer.append('\t');
+	}
+
+	public enum ValueType {
+		object, array, stringValue, doubleValue, longValue, booleanValue, nullValue
+	}
+}
diff --git a/gdx/src/com/badlogic/gdx/utils/JsonWriter.java b/gdx/src/com/badlogic/gdx/utils/JsonWriter.java
index e13c4a0..6bf0aa4 100644
--- a/gdx/src/com/badlogic/gdx/utils/JsonWriter.java
+++ b/gdx/src/com/badlogic/gdx/utils/JsonWriter.java
@@ -86,6 +86,11 @@ public class JsonWriter extends Writer {
 	}
 
 	public JsonWriter value (Object value) throws IOException {
+		if (value instanceof Number) {
+			Number number = (Number)value;
+			long longValue = number.longValue();
+			if (number.doubleValue() == longValue) value = longValue;
+		}
 		if (current != null) {
 			if (current.array) {
 				if (!current.needsComma)
diff --git a/gdx/src/com/badlogic/gdx/utils/LongArray.java b/gdx/src/com/badlogic/gdx/utils/LongArray.java
index 18cdd38..b566151 100644
--- a/gdx/src/com/badlogic/gdx/utils/LongArray.java
+++ b/gdx/src/com/badlogic/gdx/utils/LongArray.java
@@ -59,17 +59,17 @@ public class LongArray {
 	/** Creates a new ordered array containing the elements in the specified array. The capacity is set to the number of elements,
 	 * so any subsequent elements added will cause the backing array to be grown. */
 	public LongArray (long[] array) {
-		this(true, array);
+		this(true, array, 0, array.length);
 	}
 
 	/** Creates a new array containing the elements in the specified array. The capacity is set to the number of elements, so any
 	 * subsequent elements added will cause the backing array to be grown.
 	 * @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a
 	 *           memory copy. */
-	public LongArray (boolean ordered, long[] array) {
+	public LongArray (boolean ordered, long[] array, int startIndex, int count) {
 		this(ordered, array.length);
-		size = array.length;
-		System.arraycopy(array, 0, items, 0, size);
+		size = count;
+		System.arraycopy(array, startIndex, items, 0, count);
 	}
 
 	public void add (long value) {
diff --git a/gdx/src/com/badlogic/gdx/utils/PerformanceCounter.java b/gdx/src/com/badlogic/gdx/utils/PerformanceCounter.java
index 651234d..7f6f465 100644
--- a/gdx/src/com/badlogic/gdx/utils/PerformanceCounter.java
+++ b/gdx/src/com/badlogic/gdx/utils/PerformanceCounter.java
@@ -62,7 +62,7 @@ public class PerformanceCounter {
 	 * The values are only valid after at least two calls to this method.
 	 */
 	public void tick() {
-		final long t = System.nanoTime();
+		final long t = TimeUtils.nanoTime();
 		if (lastTick > 0L)
 			tick((t - lastTick) * nano2seconds);
 		lastTick = t;
@@ -92,7 +92,7 @@ public class PerformanceCounter {
 	 * Call {@link #stop()} when done.
 	 */
 	public void start() {
-		startTime = System.nanoTime();
+		startTime = TimeUtils.nanoTime();
 		valid = false;
 	}
 	
@@ -102,7 +102,7 @@ public class PerformanceCounter {
 	 */
 	public void stop() {
 		if (startTime > 0L) {
-			current += (System.nanoTime() - startTime) * nano2seconds;
+			current += (TimeUtils.nanoTime() - startTime) * nano2seconds;
 			startTime = 0L;
 			valid = true;
 		}
diff --git a/gdx/src/com/badlogic/gdx/utils/PerformanceCounters.java b/gdx/src/com/badlogic/gdx/utils/PerformanceCounters.java
index 2a71f79..423b771 100644
--- a/gdx/src/com/badlogic/gdx/utils/PerformanceCounters.java
+++ b/gdx/src/com/badlogic/gdx/utils/PerformanceCounters.java
@@ -38,7 +38,7 @@ public class PerformanceCounters {
 	}
 	
 	public void tick() {
-		final long t = System.nanoTime();
+		final long t = TimeUtils.nanoTime();
 		if (lastTick > 0L)
 			tick((t - lastTick) * nano2seconds);
 		lastTick = t;
diff --git a/gdx/src/com/badlogic/gdx/utils/Pools.java b/gdx/src/com/badlogic/gdx/utils/Pools.java
index 4f594d9..b42bb7a 100644
--- a/gdx/src/com/badlogic/gdx/utils/Pools.java
+++ b/gdx/src/com/badlogic/gdx/utils/Pools.java
@@ -41,8 +41,7 @@ public class Pools {
 	static public void free (Object object) {
 		if (object == null) throw new IllegalArgumentException("object cannot be null.");
 		ReflectionPool pool = typePools.get(object.getClass());
-		if (pool == null)
-			throw new IllegalArgumentException("No objects have been obtained of type: " + object.getClass().getName());
+		if (pool == null) return; // Ignore freeing an object that was never retained.
 		pool.free(object);
 	}
 
@@ -52,8 +51,7 @@ public class Pools {
 		for (int i = 0, n = objects.size; i < n; i++) {
 			Object object = objects.get(i);
 			ReflectionPool pool = typePools.get(object.getClass());
-			if (pool == null)
-				throw new IllegalArgumentException("No objects have been obtained of type: " + object.getClass().getName());
+			if (pool == null) return; // Ignore freeing an object that was never retained.
 			pool.free(object);
 		}
 	}
diff --git a/gdx/src/com/badlogic/gdx/utils/ShortArray.java b/gdx/src/com/badlogic/gdx/utils/ShortArray.java
index 972c47c..525cd58 100644
--- a/gdx/src/com/badlogic/gdx/utils/ShortArray.java
+++ b/gdx/src/com/badlogic/gdx/utils/ShortArray.java
@@ -59,17 +59,17 @@ public class ShortArray {
 	/** Creates a new ordered array containing the elements in the specified array. The capacity is set to the number of elements,
 	 * so any subsequent elements added will cause the backing array to be grown. */
 	public ShortArray (short[] array) {
-		this(true, array);
+		this(true, array, 0, array.length);
 	}
 
 	/** Creates a new array containing the elements in the specified array. The capacity is set to the number of elements, so any
 	 * subsequent elements added will cause the backing array to be grown.
 	 * @param ordered If false, methods that remove elements may change the order of other elements in the array, which avoids a
 	 *           memory copy. */
-	public ShortArray (boolean ordered, short[] array) {
+	public ShortArray (boolean ordered, short[] array, int startIndex, int count) {
 		this(ordered, array.length);
-		size = array.length;
-		System.arraycopy(array, 0, items, 0, size);
+		size = count;
+		System.arraycopy(array, startIndex, items, 0, count);
 	}
 
 	public void add (short value) {
diff --git a/gdx/src/com/badlogic/gdx/utils/SnapshotArray.java b/gdx/src/com/badlogic/gdx/utils/SnapshotArray.java
index 7a1225e..e3b3773 100644
--- a/gdx/src/com/badlogic/gdx/utils/SnapshotArray.java
+++ b/gdx/src/com/badlogic/gdx/utils/SnapshotArray.java
@@ -56,8 +56,8 @@ public class SnapshotArray<T> extends Array<T> {
 		super(ordered, capacity);
 	}
 
-	public SnapshotArray (boolean ordered, T[] array) {
-		super(ordered, array);
+	public SnapshotArray (boolean ordered, T[] array, int startIndex, int count) {
+		super(ordered, array, startIndex, count);
 	}
 
 	public SnapshotArray (Class<T> arrayType) {
diff --git a/tests/gdx-tests-android/assets/data/cube.mtl b/tests/gdx-tests-android/assets/data/cube.mtl
deleted file mode 100644
index a88c8ca..0000000
--- a/tests/gdx-tests-android/assets/data/cube.mtl
+++ /dev/null
@@ -1,7 +0,0 @@
-newmtl cube1_auv
-illum 4
-Kd 1.00 1.00 1.00
-Ka 0.00 0.00 0.00
-Tf 1.00 1.00 1.00
-map_Kd badlogic.jpg
-Ni 1.00
\ No newline at end of file
diff --git a/tests/gdx-tests-android/assets/data/g3d/Knight.png b/tests/gdx-tests-android/assets/data/g3d/Knight.png
deleted file mode 100644
index 9f6b3e8..0000000
Binary files a/tests/gdx-tests-android/assets/data/g3d/Knight.png and /dev/null differ
diff --git a/tests/gdx-tests-android/assets/data/g3d/checkboard.png b/tests/gdx-tests-android/assets/data/g3d/checkboard.png
deleted file mode 100644
index c7dc08d..0000000
Binary files a/tests/gdx-tests-android/assets/data/g3d/checkboard.png and /dev/null differ
diff --git a/tests/gdx-tests-android/assets/data/g3d/cube_anim.g3dj b/tests/gdx-tests-android/assets/data/g3d/cube_anim.g3dj
deleted file mode 100644
index 5a3449c..0000000
--- a/tests/gdx-tests-android/assets/data/g3d/cube_anim.g3dj
+++ /dev/null
@@ -1,133 +0,0 @@
-{
-	"version" : "1.0",
-	"meshes" : [
-		{
-			"id" : "cubeanim:cube_Mesh",
-			"attributes" : [
-				"POSITION","NORMAL","TEXCOORD0","BLENDWEIGHTS","BLENDINDICES"
-			],
-			"vertices" : [
-				0.0,-2.259414,-2.259414,0.0,0.0,-1.0,0.582997,0.456003,0.500033,0.499967,0.0,0.0,0.0,1.0,0.0,0.0,-5.314565,-2.259414,-2.259414,0.0,0.0,-1.0,0.582997,0.168971,0.066419,0.933581,0.0,0.0,0.0,1.0,0.0,0.0,0.0,2.259414,-2.259414,0.0,0.0,-1.0,0.827052,0.456003,0.500111,0.499889,0.0,0.0,0.0,1.0,0.0,0.0,-5.314565,2.259414,-2.259414,0.0,0.0,-1.0,0.827052,0.168971,0.067801,0.932199,0.0,0.0,0.0,1.0,0.0,0.0,0.0,-2.259414,2.259414,0.0,-1.0,0.0,0.253258,0.705932,0.500033,0.499967,0.0,0.0,0.0,1.0,0.0,0.0,-5.314565,-2.259414,2.259414,0.0,-1.0,0.0,0.253258,0.418900,0.066419,0.933581,0.0,0.0,0.0,1.0,0.0,0.0,-5.314565,-2.259414,-2.259414,0.0,-1.0,0.0,0.497313,0.418900,0.066419,0.933581,0.0,0.0,0.0,1.0,0.0,0.0,0.0,-2.259414,-2.259414,0.0,-1.0,0.0,0.497313,0.705932,0.500033,0.499967,0.0,0.0,0.0,1.0,0.0,0.0,-5.314565,2.259414,2.259414,-1.0,0.0,0.0,0.753117,0.748774,0.067801,0.932199,0.0,0.0,0.0,1.0,0.0,0.0,-5.314565,-2.259414,-2.259414,-1.0,0.0,0.0,0.997172,0.992829,0.066419,0.933581,0.0,0.0,0.0,1.0,0.0,0.0,-5.314565,-2.259414,2.259414,-1.0,0.0,0.0,0.753117,0.992829,0.066419,0.933581,0.0,0.0,0.0,1.0,0.0,0.0,-5.314565,2.259414,-2.259414,-1.0,0.0,0.0,0.997172,0.748774,0.067801,0.932199,0.0,0.0,0.0,1.0,0.0,0.0,5.314565,-2.259414,-2.259414,0.0,0.0,-1.0,0.582997,0.743034,0.932057,0.067943,0.0,0.0,0.0,1.0,0.0,0.0,5.314565,2.259414,-2.259414,0.0,0.0,-1.0,0.827052,0.743034,0.938571,0.061429,0.0,0.0,0.0,1.0,0.0,0.0,5.314565,-2.259414,2.259414,0.0,-1.0,0.0,0.253258,0.992964,0.932057,0.067943,0.0,0.0,0.0,1.0,0.0,0.0,5.314565,-2.259414,-2.259414,0.0,-1.0,0.0,0.497313,0.992964,0.932057,0.067943,0.0,0.0,0.0,1.0,0.0,0.0,5.314565,2.259414,2.259414,1.0,0.0,0.0,0.503187,0.992829,0.938571,0.061429,0.0,0.0,0.0,1.0,0.0,0.0,5.314565,-2.259414,2.259414,1.0,0.0,0.0,0.503187,0.748774,0.932057,0.067943,0.0,0.0,0.0,1.0,0.0,0.0,5.314565,-2.259414,-2.259414,1.0,0.0,0.0,0.747243,0.748774,0.932057,0.067943,0.0,0.0,0.0,1.0,0.0,0.0,5.314565,2.259414,-2.259414,1.0,0.0,0.0,0.747243,0.992829,0.938571,0.061429,0.0,0.0,0.0,1.0,0.0,0.0,0.0,2.259414,2.259414,0.0,1.0,0.0,0.003328,0.705932,0.500111,0.499889,0.0,0.0,0.0,1.0,0.0,0.0,-5.314565,2.259414,-2.259414,0.0,1.0,0.0,0.247384,0.992964,0.067801,0.932199,0.0,0.0,0.0,1.0,0.0,0.0,-5.314565,2.259414,2.259414,0.0,1.0,0.0,0.003328,0.992964,0.067801,0.932199,0.0,0.0,0.0,1.0,0.0,0.0,0.0,2.259414,-2.259414,0.0,1.0,0.0,0.247384,0.705932,0.500111,0.499889,0.0,0.0,0.0,1.0,0.0,0.0,5.314565,2.259414,2.259414,0.0,1.0,0.0,0.003328,0.418900,0.938571,0.061429,0.0,0.0,0.0,1.0,0.0,0.0,5.314565,2.259414,-2.259414,0.0,1.0,0.0,0.247384,0.418900,0.938571,0.061429,0.0,0.0,0.0,1.0,0.0,0.0,0.0,2.259414,2.259414,0.0,0.0,1.0,0.290226,0.413161,0.500111,0.499889,0.0,0.0,0.0,1.0,0.0,0.0,-5.314565,2.259414,2.259414,0.0,0.0,1.0,0.003194,0.413161,0.067801,0.932199,0.0,0.0,0.0,1.0,0.0,0.0,-5.314565,-2.259414,2.259414,0.0,0.0,1.0,0.003194,0.169105,0.066419,0.933581,0.0,0.0,0.0,1.0,0.0,0.0,0.0,-2.259414,2.259414,0.0,0.0,1.0,0.290226,0.169105,0.500033,0.499967,0.0,0.0,0.0,1.0,0.0,0.0,5.314565,2.259414,2.259414,0.0,0.0,1.0,0.577257,0.413161,0.938571,0.061429,0.0,0.0,0.0,1.0,0.0,0.0,5.314565,-2.259414,2.259414,0.0,0.0,1.0,0.577257,0.169105,0.932057,0.067943,0.0,0.0,0.0,1.0,0.0,0.0
-			],
-			"parts" : [
-				{
-					"id" : "part0",
-					"type" : "TRIANGLES",
-					"indices" : [
-						0,1,2,1,3,2,4,5,6,4,6,7,8,9,10,9,8,11,12,0,13,0,2,13,14,4,7,14,7,15,16,17,18,16,18,19,20,21,22,21,20,23,24,23,20,23,24,25,26,27,28,26,28,29,30,26,29,30,29,31
-					]
-				}
-			]
-		}
-	],
-	"materials" : [
-		{
-			"id" : "Material_1",
-			"type" : "PHONG",
-			"diffuse" : [0.700000,0.700000,0.700000],
-			"ambient" : [0.300000,0.300000,0.300000],
-			"emissive" : [1.0,1.0,1.0],
-			"opacity" : 0.000000,
-			"specular" : [1.0,1.0,1.0],
-			"shininess" : 50.000000,
-			"textures" : [
-				{
-					"id" : "cube",
-					"filename" : "checkboard.png",
-					"uvtranslation" : [0.0,0.0],
-					"uvscaling" : [1.0,1.0],
-					"type" : "STANDARD"
-				}
-			]
-		}
-	],
-	"nodes" : [
-		{
-			"id" : "cubeanim:cubeanim",
-			"translation" : [0.0,0.0,0.0],
-			"rotation" : [0.0,0.0,0.0,1.0],
-			"scale" : [1.0,1.0,1.0],
-			"children" : [
-				{
-					"id" : "cubeanim:root",
-					"translation" : [-5.393930,0.0,0.0],
-					"rotation" : [0.0,0.0,0.0,1.0],
-					"scale" : [1.0,1.0,1.0],
-					"children" : [
-						{
-							"id" : "cubeanim:bone",
-							"translation" : [0.0,0.0,0.0],
-							"rotation" : [0.0,0.0,0.004592,0.999990],
-							"scale" : [1.000000,1.000000,1.0],
-							"children" : [
-								{
-									"id" : "cubeanim:bone1",
-									"translation" : [5.357296,0.000000,0.0],
-									"rotation" : [0.0,0.0,-0.002285,0.999997],
-									"scale" : [1.0,1.0,1.0],
-									"children" : [
-										{
-											"id" : "cubeanim:eff",
-											"translation" : [5.332552,0.0,0.0],
-											"rotation" : [0.0,0.0,0.0,1.0],
-											"scale" : [1.0,1.0,1.0]
-										}
-									]
-								}
-							]
-						}
-					]
-				},
-				{
-					"id" : "cubeanim:cube",
-					"translation" : [0.0,0.0,0.0],
-					"rotation" : [0.0,0.0,0.0,1.0],
-					"scale" : [1.0,1.0,1.0],
-					"mesh" : "cubeanim:cube_Mesh",
-					"materials" : [
-						{
-							"meshpartid" : "part0",
-							"materialid" : "Material_1"
-						}
-					]
-				}
-			]
-		}
-	],
-	"animations" : [
-		{
-			"id" : "Take 001",
-			"bones" : [
-				{
-					"boneId" : "cubeanim:bone1",
-					"keyframes" : [
-						{
-							"keytime" : 33.000000,
-							"translation" : [5.357296,0.000000,0.0],
-							"rotation" : [0.0,0.0,-0.002285,0.999997],
-							"scale" : [1.0,1.0,1.0]
-						},
-						{
-							"keytime" : 66.333328,
-							"translation" : [5.357296,0.000000,0.0],
-							"rotation" : [0.0,0.0,0.054179,0.998531],
-							"scale" : [1.000000,1.000000,1.0]
-						},
-						{
-							"keytime" : 99.666656,
-							"translation" : [5.357296,0.000000,0.0],
-							"rotation" : [0.0,0.0,0.179984,0.983670],
-							"scale" : [1.000000,1.000000,1.0]
-						},
-						{
-							"keytime" : 132.999985,
-							"translation" : [5.357296,0.000000,0.0],
-							"rotation" : [0.0,0.0,0.304870,0.952394],
-							"scale" : [1.0,1.0,1.0]
-						}
-					]
-				}
-			]
-		}
-	]
-}
\ No newline at end of file
diff --git a/tests/gdx-tests-android/assets/data/g3d/cubes.g3dj b/tests/gdx-tests-android/assets/data/g3d/cubes.g3dj
deleted file mode 100644
index 33321c0..0000000
--- a/tests/gdx-tests-android/assets/data/g3d/cubes.g3dj
+++ /dev/null
@@ -1,110 +0,0 @@
-{
-	"version" : "1.0",
-	"meshes" : [
-		{
-			"id" : "Cube_001_Mesh",
-			"attributes" : [
-				"POSITION","NORMAL"
-			],
-			"vertices" : [
-				-1.0,-1.0,-1.0,-0.577349,-0.577349,-0.577349,1.0,1.0,-1.0,0.577349,0.577349,-0.577349,1.0,-1.0,-1.0,0.577349,-0.577349,-0.577349,-1.0,1.0,-1.0,-0.577349,0.577349,-0.577349,-1.0,1.0,1.0,-0.577349,0.577349,0.577349,-1.0,-1.0,1.0,-0.577349,-0.577349,0.577349,1.0,0.999999,1.0,0.577349,0.577349,0.577349,0.999999,-1.000001,1.0,0.577349,-0.577349,0.577349
-			],
-			"parts" : [
-				{
-					"id" : "part0",
-					"type" : "TRIANGLES",
-					"indices" : [
-						0,1,2,1,0,3,4,5,6,6,5,7,6,2,1,2,6,7,7,0,2,0,7,5,4,0,5,0,4,3,4,6,3,6,1,3
-					]
-				}
-			]
-		},
-		{
-			"id" : "Cube_Mesh",
-			"attributes" : [
-				"POSITION","NORMAL"
-			],
-			"vertices" : [
-				-1.0,-1.0,-1.0,-0.577349,-0.577349,-0.577349,1.0,1.0,-1.0,0.577349,0.577349,-0.577349,1.0,-1.0,-1.0,0.577349,-0.577349,-0.577349,-1.0,1.0,-1.0,-0.577349,0.577349,-0.577349,-1.0,1.0,1.0,-0.577349,0.577349,0.577349,-1.0,-1.0,1.0,-0.577349,-0.577349,0.577349,1.0,0.999999,1.0,0.577349,0.577349,0.577349,0.999999,-1.000001,1.0,0.577349,-0.577349,0.577349
-			],
-			"parts" : [
-				{
-					"id" : "part0",
-					"type" : "TRIANGLES",
-					"indices" : [
-						0,1,2,1,0,3,4,5,6,6,5,7,6,2,1,2,6,7,7,0,2,0,7,5,4,0,5,0,4,3,4,6,3,6,1,3
-					]
-				}
-			]
-		}
-	],
-	"materials" : [
-		{
-			"id" : "Material",
-			"type" : "LAMBERT",
-			"diffuse" : [0.800000,0.800000,0.800000],
-			"ambient" : [0.0,0.0,0.0],
-			"emissive" : [0.800000,0.800000,0.800000],
-			"opacity" : 1.000000
-		}
-	],
-	"nodes" : [
-		{
-			"id" : "Cube",
-			"translation" : [0.0,0.117356,0.933368],
-			"rotation" : [-0.707107,0.0,0.0,0.707107],
-			"scale" : [1.0,1.0,1.0],
-			"mesh" : "Cube_Mesh",
-			"materials" : [
-				{
-					"meshpartid" : "part0",
-					"materialid" : "Material"
-				}
-			],
-			"children" : [
-				{
-					"id" : "Cube_001",
-					"translation" : [0.0,3.260578,3.226436],
-					"rotation" : [0.0,0.0,0.0,1.0],
-					"scale" : [1.0,1.0,1.0],
-					"mesh" : "Cube_001_Mesh",
-					"materials" : [
-						{
-							"meshpartid" : "part0",
-							"materialid" : "Material"
-						}
-					]
-				}
-			]
-		}
-	],
-	"animations" : [
-		{
-			"id" : "Default Take",
-			"bones" : [
-				{
-					"boneId" : "Cube",
-					"keyframes" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.0,0.117356,0.933368],
-							"rotation" : [-0.707107,0.0,0.0,0.707107],
-							"scale" : [1.0,1.0,1.0]
-						}
-					]
-				},
-				{
-					"boneId" : "Cube_001",
-					"keyframes" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.0,3.260578,3.226436],
-							"rotation" : [0.0,0.0,0.0,1.0],
-							"scale" : [1.0,1.0,1.0]
-						}
-					]
-				}
-			]
-		}
-	]
-}
\ No newline at end of file
diff --git a/tests/gdx-tests-android/assets/data/g3d/head.g3dj b/tests/gdx-tests-android/assets/data/g3d/head.g3dj
deleted file mode 100644
index 5c2f964..0000000
--- a/tests/gdx-tests-android/assets/data/g3d/head.g3dj
+++ /dev/null
@@ -1,62 +0,0 @@
-{
-	"version" : "1.0",
-	"meshes" : [
-		{
-			"id" : "head_Mesh",
-			"attributes" : [
-				"POSITION","NORMAL","TEXCOORD0"
-			],
-			"vertices" : [
-				0.023799,0.510357,0.745004,0.528556,-0.595550,-0.604936,0.506230,0.620730,0.025538,0.506920,0.751306,0.487261,-0.793031,-0.365621,0.505500,0.619600,0.023457,0.505255,0.750896,0.634622,-0.683828,-0.360046,0.504950,0.619810,0.025547,0.512706,0.744012,0.336391,-0.700107,-0.629834,0.506850,0.620790,0.020612,0.511379,0.742005,0.592944,-0.494774,-0.635308,0.506340,0.621260,0.020520,0.519840,0.735659,0.324645,-0.757675,-0.566157,0.507590,0.621740,0.021245,0.504078,0.748954,0.690492,-0.606347,-0.394416,0.504690,0.620400,0.018601,0.503152,0.744909,0.830024,-0.409918,-0.378190,0.504410,0.621300,0.017842,0.509571,0.739912,0.774839,-0.279910,-0.566811,0.505900,0.621680,0.013141,0.514960,0.733531,0.873073,-0.376316,-0.310048,0.506770,0.622100,0.015993,0.504368,0.736153,0.996946,-0.077739,0.007475,0.504970,0.622580,-0.023457,0.505255,0.750896,-0.634624,-0.683828,-0.360044,0.495040,0.619810,-0.023799,0.510357,0.745004,-0.528561,-0.595550,-0.604933,0.493760,0.620730,-0.021245,0.504078,0.748954,-0.690488,-0.606351,-0.394417,0.495300,0.620400,-0.020611,0.511379,0.742005,-0.592941,-0.494779,-0.635307,0.493650,0.621260,-0.020520,0.519840,0.735658,-0.324646,-0.757677,-0.566155,0.492400,0.621740,-0.025547,0.512706,0.744012,-0.336394,-0.700108,-0.629832,0.493140,0.620790,-0.025538,0.506920,0.751306,-0.487261,-0.793032,-0.365620,0.494490,0.619600,-0.015993,0.504368,0.736153,-0.996946,-0.077732,0.007479,0.495020,0.622580,-0.018601,0.503152,0.744909,-0.830023,-0.409920,-0.378189,0.495580,0.621300,-0.017842,0.509571,0.739912,-0.774835,-0.279917,-0.566812,0.494100,0.621680,-0.013141,0.514960,0.733531,-0.873072,-0.376319,-0.310046,0.493220,0.622100,0.176846,0.673443,0.622427,0.010256,-0.891498,0.452908,0.562560,0.570350,0.173516,0.674591,0.624131,-0.047456,-0.888799,0.455835,0.561450,0.569960,0.173356,0.672810,0.619408,-0.115568,-0.931533,0.344804,0.561620,0.571560,0.177426,0.672159,0.619253,-0.024382,-0.920238,0.390599,0.562960,0.571380,0.175631,0.677431,0.628633,0.278239,-0.662794,0.695189,0.561640,0.568350,0.179747,0.674956,0.624168,0.332887,-0.699928,0.631892,0.563230,0.569490,0.182122,0.672934,0.619987,0.312885,-0.770792,0.554963,0.564370,0.570740,-0.182340,0.672942,0.620023,-0.315812,-0.767800,0.557446,0.435620,0.570740,-0.177287,0.673474,0.622492,-0.006672,-0.889160,0.457548,0.437430,0.570350,-0.180085,0.674993,0.624199,-0.336369,-0.688353,0.642671,0.436760,0.569490,-0.177627,0.672175,0.619274,0.026361,-0.918752,0.393954,0.437040,0.571380,-0.175666,0.677475,0.628572,-0.278113,-0.659701,0.698175,0.438350,0.568350,-0.173702,0.674645,0.624107,0.049767,-0.886644,0.459767,0.438540,0.569960,-0.173673,0.672841,0.619422,0.117953,-0.928690,0.351600,0.438370,0.571560,0.067594,0.663079,0.632038,0.761848,0.001806,0.647754,0.533090,0.571950,0.072224,0.660250,0.630796,0.054638,0.843307,0.534648,0.534060,0.572970,0.070282,0.663446,0.627785,0.207123,0.734522,0.646203,0.533880,0.571990,0.075921,0.663961,0.628365,-0.370816,0.713050,0.595026,0.534660,0.572450,0.070282,0.663446,0.627785,0.568667,-0.440764,0.694511,0.533880,0.571990,0.070008,0.666268,0.630554,0.613637,-0.523077,0.591473,0.533530,0.571320,0.068952,0.668226,0.637557,0.636564,-0.457969,0.620524,0.532320,0.570740,0.075685,0.666626,0.627710,0.376713,-0.500461,0.779504,0.534590,0.571840,0.075921,0.663961,0.628365,0.209611,-0.334602,0.918752,0.534660,0.572450,-0.070372,0.666301,0.630655,-0.611625,-0.492835,0.618893,0.466460,0.571320,-0.076013,0.666662,0.627799,0.089711,-0.271744,0.958179,0.465400,0.571840,-0.070641,0.663487,0.627883,-0.559609,-0.421974,0.713285,0.466110,0.571990,-0.076350,0.664008,0.628485,-0.208473,-0.328295,0.921283,0.465330,0.572450,-0.067947,0.663112,0.632135,-0.750808,0.003233,0.660512,0.466900,0.571950,-0.068719,0.668213,0.637481,-0.632301,-0.436836,0.639821,0.467670,0.570740,-0.070641,0.663487,0.627883,-0.220891,0.699026,0.680124,0.466110,0.571990,-0.072078,0.660247,0.630745,-0.065520,0.833229,0.549033,0.465930,0.572970,-0.076350,0.664008,0.628485,0.363048,0.705038,0.609194,0.465330,0.572450,0.169858,0.672523,0.617550,0.033386,-0.871299,0.489616,0.560490,0.572250,0.173263,0.671486,0.616146,0.058172,-0.606060,0.793288,0.561570,0.572420,0.173563,0.671895,0.616806,-0.082368,-0.886772,0.454808,0.561730,0.572250,0.168641,0.672096,0.617428,0.311442,-0.389295,0.866864,0.560170,0.572360,0.168233,0.673556,0.620388,-0.009229,-0.912245,0.409540,0.559970,0.571550,0.161774,0.673561,0.621881,0.248915,-0.488489,0.836313,0.557970,0.571980,-0.173655,0.671903,0.616810,0.084135,-0.880892,0.465779,0.438260,0.572250,-0.170052,0.672552,0.617539,-0.028892,-0.869041,0.493896,0.439500,0.572250,-0.168654,0.673599,0.620431,0.012323,-0.912126,0.409724,0.440020,0.571550,-0.168854,0.672125,0.617429,-0.313051,-0.374341,0.872850,0.439820,0.572360,-0.161819,0.673598,0.621844,-0.250882,-0.469097,0.846762,0.442020,0.571980,-0.173355,0.671487,0.616159,-0.057622,-0.598566,0.798998,0.438420,0.572420,-0.250480,0.421322,0.272170,-0.970933,-0.239348,-0.001048,0.315680,0.702190,-0.246510,0.403501,0.282754,-0.950372,-0.309065,-0.035655,0.325030,0.708400,-0.252591,0.423238,0.282452,-0.927514,-0.303933,-0.217584,0.320070,0.699730,-0.251439,0.410341,0.293866,-0.905857,-0.366132,-0.213005,0.328550,0.703360,-0.258229,0.438028,0.285014,-0.929783,-0.283913,-0.234301,0.317890,0.692940,-0.256257,0.444113,0.265425,-0.970536,-0.239460,0.026826,0.307410,0.692990,-0.261084,0.425101,0.306708,-0.932653,-0.313878,-0.177874,0.330380,0.695010,0.261084,0.425101,0.306708,0.932653,-0.313878,-0.177874,0.669610,0.695010,0.252591,0.423238,0.282452,0.927514,-0.303933,-0.217585,0.679920,0.699730,0.258229,0.438028,0.285014,0.929783,-0.283912,-0.234302,0.682100,0.692940,0.251439,0.410341,0.293866,0.905857,-0.366132,-0.213004,0.671440,0.703360,0.250480,0.421322,0.272170,0.970933,-0.239348,-0.001056,0.684310,0.702190,0.256257,0.444113,0.265425,0.970535,-0.239462,0.026822,0.692590,0.692990,0.246510,0.403501,0.282754,0.950372,-0.309065,-0.035659,0.674960,0.708400,-0.283412,0.624700,0.303797,-0.978514,-0.068802,0.194364,0.299880,0.615110,-0.286571,0.612365,0.284841,-0.966593,-0.155897,0.203453,0.293040,0.622110,-0.282330,0.608867,0.304545,-0.981532,-0.048657,0.185009,0.301410,0.621670,-0.286502,0.630646,0.294039,-0.922200,-0.160659,0.351761,0.294880,0.613040,-0.282965,0.639722,0.311635,-0.985746,-0.059337,0.157430,0.302190,0.608390,-0.285978,0.649702,0.300900,-0.904636,-0.092815,0.415956,0.296320,0.604420,-0.280165,0.620895,0.326255,-0.991681,-0.069213,0.108524,0.310230,0.615940,0.280127,0.620893,0.326254,0.991759,-0.068664,0.108162,0.689760,0.615940,0.282255,0.608862,0.304527,0.981719,-0.047515,0.184307,0.698590,0.621670,0.283265,0.624691,0.303763,0.979134,-0.069478,0.190969,0.700110,0.615110,0.282973,0.639724,0.311655,0.985831,-0.058842,0.157084,0.697800,0.608390,0.286354,0.630637,0.294007,0.921994,-0.161678,0.351833,0.705110,0.613040,0.285920,0.649698,0.300891,0.904094,-0.094529,0.416748,0.703670,0.604420,0.286505,0.612362,0.284824,0.966450,-0.153833,0.205692,0.706950,0.622110,-0.282226,0.793690,0.408847,-0.969639,0.001773,0.244533,0.333400,0.540300,-0.282054,0.826024,0.403887,-0.969934,0.068265,0.233599,0.328120,0.529020,-0.286548,0.799038,0.390611,-0.980486,0.013820,0.196103,0.324340,0.539960,-0.277029,0.809417,0.426868,-0.959903,0.036837,0.277901,0.340270,0.533110,-0.272311,0.782757,0.444006,-0.959845,0.022949,0.279592,0.349950,0.541280,-0.280896,0.773746,0.412088,-0.972747,-0.017693,0.231193,0.336750,0.547210,-0.286125,0.772923,0.388885,-0.984563,-0.037515,0.170961,0.326420,0.549400,0.282482,0.793690,0.408964,0.970900,0.006080,0.239406,0.666600,0.540300,0.281073,0.773734,0.412172,0.972131,-0.018216,0.233731,0.663240,0.547210,0.286233,0.772907,0.388951,0.985480,-0.030698,0.166994,0.673570,0.549400,0.286279,0.799018,0.390596,0.981757,0.015545,0.189501,0.675650,0.539960,0.272306,0.782724,0.444028,0.958668,0.020867,0.283760,0.650040,0.541280,0.277061,0.809385,0.426916,0.959627,0.036910,0.278844,0.659720,0.533110,0.282072,0.826026,0.403946,0.970660,0.064802,0.231559,0.671870,0.529020,-0.264482,0.941991,0.420902,-0.940279,0.152670,0.304247,0.330330,0.474550,-0.280215,0.929074,0.374682,-0.967403,0.110618,0.227806,0.309790,0.488400,-0.279739,0.906105,0.384238,-0.965125,0.090266,0.245734,0.315270,0.496870,-0.269508,0.960864,0.396788,-0.941245,0.202567,0.270229,0.316990,0.470230,-0.285602,0.923731,0.348819,-0.979959,0.108962,0.166755,0.299220,0.494020,-0.289206,0.868533,0.347006,-0.988987,0.048750,0.139745,0.300960,0.517160,-0.274972,0.971801,0.365208,-0.948402,0.241581,0.205358,0.302320,0.471300,0.274959,0.971799,0.365205,0.948638,0.240587,0.205437,0.697670,0.471300,0.280117,0.929039,0.374663,0.967416,0.113106,0.226527,0.690200,0.488400,0.285459,0.923700,0.348788,0.980161,0.109846,0.164977,0.700770,0.494020,0.269406,0.960852,0.396763,0.941012,0.201929,0.271515,0.683000,0.470230,0.279913,0.906102,0.384305,0.965306,0.094535,0.243407,0.684720,0.496870,0.289200,0.868522,0.347013,0.989305,0.049423,0.137231,0.699030,0.517160,0.264210,0.941943,0.420833,0.939834,0.156648,0.303601,0.669660,0.474550,-0.295786,0.706950,0.260552,-0.047511,0.940378,0.336797,0.939680,0.293850,-0.299872,0.712919,0.237835,0.156596,0.980311,0.120282,0.927500,0.293640,-0.301308,0.708116,0.254120,0.080218,0.942390,0.324755,0.936250,0.295670,-0.306006,0.714715,0.236057,0.293257,0.948610,0.118909,0.926380,0.296620,-0.302932,0.705689,0.261012,-0.135201,0.861666,0.489134,0.939410,0.297100,-0.291151,0.696232,0.285996,-0.844106,0.332676,0.420490,0.954670,0.296480,-0.312136,0.717399,0.237346,0.177614,0.955219,0.236663,0.927270,0.299350,0.312144,0.717399,0.237349,-0.177434,0.955241,0.236710,0.072380,0.300660,0.301319,0.708116,0.254124,-0.080410,0.942419,0.324624,0.063410,0.296980,0.302972,0.705691,0.261027,0.135360,0.861674,0.489075,0.060240,0.298420,0.306013,0.714715,0.236059,-0.293154,0.948625,0.119040,0.073280,0.297940,0.295803,0.706950,0.260558,0.047025,0.940511,0.336494,0.059970,0.295170,0.291189,0.696236,0.286013,0.843694,0.331798,0.422008,0.044980,0.297820,0.299879,0.712919,0.237838,-0.156578,0.980311,0.120306,0.072150,0.294940,-0.326397,0.562313,0.199821,-0.896273,-0.126306,0.425138,0.927170,0.367930,-0.329208,0.576382,0.202005,-0.850173,-0.189856,0.491081,0.926640,0.361290,-0.332319,0.577330,0.193634,-0.950997,-0.185490,0.247383,0.921920,0.360950,-0.322589,0.567406,0.208286,-0.825972,-0.109078,0.553057,0.931510,0.365680,-0.329655,0.584565,0.204066,-0.804622,-0.122074,0.581103,0.926530,0.357600,-0.336153,0.591883,0.192537,-0.975065,-0.158509,0.155316,0.919520,0.354730,-0.317506,0.575178,0.214450,-0.401733,0.256109,0.879215,0.934710,0.362120,0.317481,0.575177,0.214443,0.401227,0.256510,0.879329,0.064950,0.363420,0.329194,0.576381,0.202001,0.849989,-0.189483,0.491543,0.073020,0.362590,0.329642,0.584565,0.204063,0.804358,-0.122002,0.581484,0.073130,0.358900,0.322580,0.567406,0.208283,0.825736,-0.108581,0.553507,0.068150,0.366980,0.332310,0.577329,0.193632,0.950943,-0.185261,0.247763,0.077740,0.362250,0.336145,0.591882,0.192535,0.974999,-0.158514,0.155727,0.080140,0.356030,0.326394,0.562313,0.199820,0.896156,-0.126064,0.425455,0.072490,0.369240,-0.261179,0.576082,0.259691,-0.776181,0.243242,0.581701,0.963290,0.360270,-0.269093,0.570683,0.252834,-0.736927,0.164739,0.655591,0.959550,0.362720,-0.265586,0.569842,0.256835,-0.767090,0.291299,0.571591,0.961710,0.362660,-0.261981,0.579242,0.258549,-0.667768,0.068401,0.741220,0.962820,0.359580,-0.254212,0.586907,0.264927,-0.717425,0.138989,0.682629,0.965400,0.357680,-0.257093,0.579295,0.264954,-0.789180,0.344579,0.508389,0.965180,0.359080,-0.261757,0.571098,0.262780,-0.821721,0.377552,0.426883,0.964410,0.361710,0.257057,0.579293,0.264944,0.788494,0.344664,0.509397,0.034480,0.360380,0.261743,0.571097,0.262776,0.821348,0.377726,0.427446,0.035250,0.363010,0.261162,0.576081,0.259687,0.775438,0.243869,0.582430,0.036370,0.361580,0.265581,0.569842,0.256834,0.766029,0.291186,0.573071,0.037940,0.363970,0.261957,0.579241,0.258542,0.667288,0.068628,0.741632,0.036840,0.360890,0.254193,0.586906,0.264923,0.717038,0.137867,0.683264,0.034260,0.358980,0.269087,0.570682,0.252833,0.736683,0.165374,0.655706,0.040100,0.364020,-0.270433,0.482047,0.260860,-0.595914,-0.791153,0.137709,0.961730,0.412620,-0.278215,0.483567,0.251257,-0.172713,-0.982907,-0.063749,0.954340,0.409500,-0.273272,0.482157,0.248450,-0.506466,-0.859641,-0.067152,0.953810,0.413180,-0.273201,0.485312,0.267309,-0.429723,-0.857308,0.283480,0.964430,0.409180,-0.267391,0.478705,0.261884,-0.831695,-0.547226,0.093956,0.963380,0.415280,-0.269630,0.484560,0.279227,-0.873458,-0.471959,0.119689,0.972980,0.409500,-0.269645,0.478536,0.245305,-0.826749,-0.561764,0.030134,0.953690,0.416950,0.267391,0.478705,0.261884,0.831694,-0.547226,0.093961,0.036270,0.416630,0.273272,0.482158,0.248450,0.506465,-0.859641,-0.067154,0.045860,0.414510,0.270433,0.482047,0.260860,0.595913,-0.791153,0.137713,0.037920,0.413960,0.269645,0.478536,0.245305,0.826750,-0.561763,0.030134,0.045980,0.418280,0.273201,0.485312,0.267309,0.429750,-0.857292,0.283488,0.035220,0.410520,0.269630,0.484560,0.279226,0.873480,-0.471865,0.119902,0.026650,0.410850,0.278215,0.483567,0.251257,0.172713,-0.982907,-0.063748,0.045330,0.410830,0.008186,0.550803,0.776428,0.140114,0.464661,0.874333,0.501120,0.609540,0.014379,0.562510,0.767567,0.329402,0.527998,0.782759,0.502450,0.607680,0.007042,0.562713,0.769063,0.114698,0.548861,0.828007,0.501210,0.607600,0.016690,0.550293,0.774368,0.351661,0.457965,0.816457,0.502290,0.609640,0.0,0.551039,0.776936,0.000004,0.470506,0.882397,0.500000,0.609450,-0.000004,0.562573,0.769109,0.000012,0.551846,0.833946,0.500000,0.607500,0.006719,0.575178,0.760376,0.123913,0.541157,0.831742,0.501360,0.605110,-0.000004,0.575416,0.760760,-0.000047,0.540407,0.841404,0.500000,0.604990,0.013760,0.574700,0.759061,0.319308,0.521120,0.791503,0.502670,0.605210,-0.014385,0.562510,0.767568,-0.328894,0.527860,0.783066,0.497540,0.607680,-0.008186,0.550804,0.776428,-0.139725,0.464822,0.874310,0.498880,0.609540,-0.007049,0.562713,0.769063,-0.114672,0.548820,0.828038,0.498780,0.607600,-0.016690,0.550294,0.774368,-0.349675,0.459292,0.816565,0.497700,0.609640,-0.013769,0.574701,0.759062,-0.318580,0.521030,0.791855,0.497320,0.605210,-0.006727,0.575178,0.760376,-0.123930,0.541091,0.831782,0.498630,0.605110,0.022443,0.587158,0.746477,0.580951,0.410389,0.702906,0.504740,0.601090,0.014940,0.588824,0.749801,0.350759,0.482681,0.802488,0.503230,0.601260,0.020876,0.573860,0.755884,0.580470,0.434747,0.688512,0.503940,0.605030,0.024577,0.601274,0.736309,0.617768,0.401918,0.675888,0.505800,0.596610,0.016768,0.603548,0.740562,0.405655,0.454035,0.793282,0.503840,0.596780,0.030302,0.583598,0.740232,0.740739,0.297835,0.602163,0.506840,0.600900,0.032673,0.596977,0.729533,0.725490,0.346665,0.594549,0.508290,0.596530,0.027696,0.571296,0.749207,0.770569,0.302600,0.560943,0.505850,0.604770,0.021513,0.561811,0.763378,0.596151,0.468212,0.652213,0.503780,0.607520,0.024439,0.549597,0.769821,0.600095,0.447052,0.663347,0.503650,0.609560,0.027969,0.560175,0.755985,0.775607,0.387948,0.497927,0.505730,0.607280,0.030656,0.548889,0.762259,0.759736,0.424141,0.492855,0.505610,0.609430,-0.022477,0.587157,0.746477,-0.580238,0.410536,0.703409,0.495250,0.601090,-0.014977,0.588823,0.749799,-0.350090,0.482280,0.803021,0.496760,0.601260,-0.020921,0.573866,0.755896,-0.579077,0.434731,0.689695,0.496050,0.605030,-0.027790,0.571308,0.749233,-0.770606,0.301400,0.561538,0.494140,0.604770,-0.030331,0.583600,0.740235,-0.739926,0.298354,0.602905,0.493150,0.600900,-0.024658,0.601281,0.736324,-0.617777,0.401831,0.675932,0.494190,0.596610,-0.032729,0.596980,0.729540,-0.723830,0.347093,0.596319,0.491710,0.596530,-0.016833,0.603553,0.740572,-0.405080,0.454264,0.793445,0.496150,0.596780,-0.021516,0.561811,0.763377,-0.595474,0.467497,0.653343,0.496220,0.607520,-0.024451,0.549602,0.769831,-0.598084,0.450378,0.662914,0.496340,0.609560,-0.030665,0.548892,0.762264,-0.759586,0.426937,0.490666,0.494380,0.609430,-0.027972,0.560174,0.755984,-0.776104,0.385579,0.498991,0.494260,0.607280,0.026533,0.622826,0.721259,0.693528,0.345920,0.631948,0.507160,0.590130,0.034194,0.608383,0.720390,0.722058,0.360350,0.590576,0.509530,0.593030,0.035723,0.617515,0.712276,0.714652,0.343119,0.609543,0.510800,0.590080,0.025516,0.613058,0.727924,0.662640,0.381536,0.644468,0.506510,0.593110,0.017293,0.615865,0.733540,0.455417,0.428392,0.780433,0.504060,0.593360,0.017728,0.626014,0.728029,0.483949,0.418700,0.768429,0.504230,0.590440,-0.026587,0.622827,0.721261,-0.694122,0.345334,0.631616,0.492830,0.590130,-0.034246,0.608388,0.720401,-0.720598,0.362904,0.590796,0.490470,0.593030,-0.025551,0.613060,0.727928,-0.662407,0.382183,0.644323,0.493480,0.593110,-0.035768,0.617521,0.712285,-0.714568,0.345296,0.608410,0.489200,0.590080,-0.017778,0.626015,0.728031,-0.483893,0.417858,0.768923,0.495760,0.590440,-0.017328,0.615866,0.733543,-0.455267,0.428706,0.780348,0.495930,0.593360,0.034265,0.567433,0.739863,0.829825,0.184356,0.526691,0.509200,0.604910,0.038532,0.578288,0.731550,0.773681,0.205631,0.599277,0.510150,0.601130,0.042072,0.590227,0.721209,0.732279,0.313101,0.604760,0.511620,0.596900,0.052567,0.581967,0.713483,0.651455,0.311196,0.691927,0.515390,0.597950,0.047301,0.571170,0.723008,0.698896,0.180856,0.691980,0.513960,0.602010,0.040966,0.562777,0.730320,0.766382,0.118393,0.631381,0.513060,0.605700,0.033641,0.559631,0.745980,0.854437,0.308065,0.418369,0.509060,0.607310,0.038577,0.558063,0.735092,0.834108,0.264731,0.483922,0.512830,0.608010,0.035314,0.549831,0.751770,0.825477,0.407595,0.390453,0.508750,0.609480,0.039237,0.550796,0.740531,0.810864,0.435786,0.390628,0.512320,0.610120,-0.034327,0.567440,0.739878,-0.830694,0.181972,0.526150,0.490790,0.604910,-0.038563,0.578291,0.731557,-0.773548,0.204107,0.599970,0.489840,0.601130,-0.040995,0.562778,0.730322,-0.765828,0.120540,0.631646,0.486930,0.605700,-0.047324,0.571173,0.723014,-0.699058,0.179750,0.692104,0.486030,0.602010,-0.052641,0.581976,0.713504,-0.652496,0.308835,0.692004,0.484600,0.597950,-0.042245,0.590247,0.721253,-0.731794,0.311792,0.606023,0.488370,0.596900,-0.033645,0.559630,0.745979,-0.854927,0.305502,0.419247,0.490930,0.607310,-0.035314,0.549831,0.751770,-0.825323,0.408696,0.389627,0.491240,0.609480,-0.039262,0.550811,0.740540,-0.805185,0.440835,0.396662,0.487670,0.610120,-0.038598,0.558068,0.735098,-0.830913,0.270059,0.486469,0.487160,0.608010,0.056265,0.592831,0.704473,0.603045,0.372523,0.705382,0.517130,0.594900,0.060151,0.601827,0.696242,0.575861,0.395912,0.715289,0.519250,0.592470,0.044391,0.601328,0.711927,0.697706,0.352322,0.623760,0.513160,0.593570,0.047544,0.610471,0.703663,0.664081,0.354019,0.658534,0.514940,0.590830,-0.056289,0.592834,0.704478,-0.603108,0.372042,0.705581,0.482860,0.594900,-0.044527,0.601344,0.711965,-0.697428,0.354184,0.623015,0.486830,0.593570,-0.060288,0.601850,0.696279,-0.575827,0.397318,0.714536,0.480740,0.592470,-0.047574,0.610474,0.703669,-0.662851,0.356628,0.658365,0.485060,0.590830,0.009018,0.649124,0.717520,0.196195,0.509939,0.837538,0.502590,0.582600,-0.000018,0.638301,0.725397,0.000082,0.511044,0.859554,0.500000,0.586840,0.009128,0.637668,0.724712,0.205816,0.500247,0.841066,0.502240,0.587010,-0.000050,0.649813,0.717945,0.000517,0.522989,0.852339,0.500000,0.582320,0.018681,0.647324,0.714896,0.477222,0.454355,0.752210,0.505450,0.582990,0.018640,0.635984,0.721843,0.490779,0.437989,0.753194,0.504790,0.587150,0.008828,0.627268,0.730597,0.196089,0.468619,0.861363,0.501990,0.590490,-0.000053,0.627668,0.731158,0.000254,0.474257,0.880386,0.500000,0.590430,0.028163,0.643969,0.707811,0.695371,0.373336,0.614068,0.509080,0.583090,0.038200,0.626388,0.704382,0.711965,0.351527,0.607893,0.512420,0.587190,0.039460,0.638418,0.695329,0.736190,0.386496,0.555558,0.514200,0.583380,0.028125,0.632443,0.714583,0.705148,0.345085,0.619422,0.508220,0.587000,-0.009098,0.649123,0.717516,-0.194932,0.508227,0.838872,0.497400,0.582600,-0.009177,0.637669,0.724714,-0.205726,0.500519,0.840926,0.497750,0.587010,-0.008910,0.627271,0.730605,-0.196090,0.468436,0.861462,0.498000,0.590490,-0.018707,0.635988,0.721851,-0.489623,0.437858,0.754023,0.495200,0.587150,-0.018730,0.647324,0.714894,-0.474924,0.450924,0.755721,0.494540,0.582990,-0.028296,0.643984,0.707840,-0.696038,0.367159,0.617029,0.490910,0.583090,-0.038139,0.626383,0.704347,-0.712643,0.350466,0.607711,0.487570,0.587190,-0.028215,0.632454,0.714602,-0.706338,0.342926,0.619265,0.491780,0.587000,-0.039519,0.638423,0.695340,-0.738076,0.382005,0.556162,0.485790,0.583380,0.016743,0.660488,0.707992,0.438298,0.440701,0.783376,0.505900,0.577270,0.008376,0.662059,0.710106,0.177264,0.477761,0.860420,0.502920,0.576830,-0.000048,0.662540,0.710246,0.001137,0.483719,0.875223,0.500000,0.576520,0.007458,0.674047,0.703775,0.160823,0.364221,0.917322,0.503170,0.570810,-0.000071,0.674609,0.704232,0.001019,0.366187,0.930541,0.500000,0.570530,0.014629,0.672965,0.702299,0.366674,0.333584,0.868488,0.506200,0.571230,0.031887,0.656926,0.694657,0.754439,0.338042,0.562628,0.512570,0.577200,0.024752,0.658364,0.702647,0.655319,0.374943,0.655725,0.509150,0.577490,0.020965,0.672014,0.698850,0.575791,0.262820,0.774203,0.508860,0.571390,0.026507,0.671613,0.693654,0.739962,0.208480,0.639525,0.511610,0.571300,0.006394,0.694382,0.701162,0.065530,-0.163915,0.984295,0.502920,0.562410,-0.000070,0.685058,0.701324,0.001157,0.123548,0.992338,0.500000,0.565950,0.006772,0.684516,0.700874,0.129893,0.119296,0.984325,0.503130,0.566310,-0.000073,0.694819,0.701550,0.000458,-0.148257,0.988949,0.500000,0.561980,0.012726,0.693749,0.700326,0.124514,-0.207867,0.970200,0.505750,0.562880,0.013359,0.683661,0.699680,0.256177,0.085691,0.962824,0.506080,0.566790,0.018745,0.693640,0.699403,0.271167,-0.262958,0.925916,0.508390,0.562520,0.019255,0.683260,0.697781,0.433362,0.014120,0.901109,0.508600,0.566730,0.024450,0.693100,0.696913,0.532542,-0.296974,0.792594,0.510860,0.562370,0.024676,0.683088,0.694507,0.666673,-0.046130,0.743922,0.511040,0.566610,-0.017014,0.660518,0.708054,-0.435778,0.440378,0.784962,0.494090,0.577270,-0.008553,0.662076,0.710141,-0.174403,0.477494,0.861152,0.497070,0.576830,-0.014780,0.672966,0.702304,-0.366559,0.336713,0.867329,0.493800,0.571230,-0.007592,0.674045,0.703770,-0.158752,0.364905,0.917411,0.496820,0.570810,-0.032182,0.656952,0.694707,-0.756638,0.338855,0.559175,0.487420,0.577200,-0.025045,0.658394,0.702710,-0.654828,0.375039,0.656160,0.490840,0.577490,-0.021092,0.672017,0.698856,-0.576345,0.268462,0.771852,0.491130,0.571390,-0.026625,0.671617,0.693663,-0.739847,0.213286,0.638071,0.488380,0.571300,-0.006542,0.694387,0.701174,-0.068420,-0.161110,0.984562,0.497070,0.562410,-0.006950,0.684526,0.700899,-0.129062,0.118912,0.984481,0.496860,0.566310,-0.013503,0.683669,0.699701,-0.258056,0.085840,0.962309,0.493910,0.566790,-0.012864,0.693761,0.700329,-0.130904,-0.201415,0.970719,0.494240,0.562880,-0.019333,0.683261,0.697785,-0.435685,0.014940,0.899975,0.491390,0.566730,-0.018913,0.693670,0.699401,-0.274208,-0.255663,0.927063,0.491600,0.562520,-0.024553,0.693123,0.696896,-0.531639,-0.292707,0.794785,0.489140,0.562370,-0.024753,0.683090,0.694510,-0.665553,-0.045472,0.744964,0.488950,0.566610,0.067769,0.615750,0.680059,0.636181,0.563002,0.527544,0.524170,0.588270,0.054440,0.626149,0.687430,0.687644,0.481854,0.543105,0.519430,0.585920,0.051467,0.618809,0.695894,0.655670,0.391301,0.645740,0.517080,0.588290,0.064724,0.609480,0.688399,0.597175,0.461795,0.655841,0.521790,0.590340,0.045892,0.643379,0.683345,0.794893,0.462182,0.393107,0.518190,0.580860,0.037425,0.657963,0.685512,0.835712,0.369077,0.406654,0.515960,0.576210,0.031530,0.671768,0.686228,0.870962,0.203059,0.447429,0.514890,0.571060,0.039845,0.659680,0.674899,0.892498,0.399376,0.209636,0.519330,0.574930,0.034868,0.672199,0.676546,0.946178,0.188225,0.263283,0.518400,0.570810,0.047393,0.646566,0.672439,0.830557,0.517254,0.206455,0.521250,0.578860,0.056022,0.631499,0.677919,0.731982,0.570227,0.372885,0.521760,0.583650,0.056041,0.635980,0.668081,0.742348,0.621503,0.250307,0.523980,0.581410,0.068363,0.621464,0.671698,0.643944,0.649130,0.404928,0.525830,0.586020,0.066798,0.626452,0.663000,0.606682,0.695746,0.384544,0.527110,0.583630,-0.064782,0.609490,0.688414,-0.598209,0.462546,0.654368,0.478200,0.590340,-0.051559,0.618825,0.695915,-0.654134,0.392769,0.646406,0.482910,0.588290,-0.067805,0.615763,0.680068,-0.637073,0.562384,0.527127,0.475820,0.588270,-0.054511,0.626154,0.687444,-0.687581,0.481329,0.543650,0.480560,0.585920,-0.045945,0.643381,0.683344,-0.794710,0.458160,0.398153,0.481800,0.580860,-0.037575,0.657978,0.685547,-0.835316,0.369445,0.407133,0.484030,0.576210,-0.047703,0.646599,0.672509,-0.829969,0.518135,0.206611,0.478740,0.578860,-0.040052,0.659690,0.674926,-0.891649,0.402166,0.207902,0.480660,0.574930,-0.031630,0.671768,0.686222,-0.870677,0.204569,0.447295,0.485100,0.571060,-0.034991,0.672208,0.676572,-0.946570,0.187451,0.262425,0.481590,0.570810,-0.056163,0.631513,0.677954,-0.733302,0.565858,0.376925,0.478230,0.583650,-0.068311,0.621465,0.671680,-0.645368,0.646878,0.406262,0.474160,0.586020,-0.056226,0.635999,0.668129,-0.744687,0.618095,0.251792,0.476020,0.581410,-0.066929,0.626465,0.663038,-0.609733,0.692942,0.384782,0.472890,0.583630,0.040882,0.661321,0.663001,0.891007,0.358495,0.278548,0.522760,0.573720,0.047508,0.649555,0.660522,0.820421,0.490877,0.293169,0.524200,0.576790,0.036994,0.672464,0.665053,0.946775,0.098534,0.306443,0.521850,0.570640,0.042084,0.673213,0.653486,0.795250,-0.061545,0.603150,0.524810,0.570560,0.045133,0.663790,0.651848,0.751168,0.245511,0.612756,0.525590,0.572800,0.050587,0.654064,0.650605,0.682841,0.352338,0.639989,0.526630,0.575110,0.055293,0.640169,0.657916,0.714221,0.600682,0.359262,0.526060,0.579010,0.056909,0.645577,0.648770,0.570371,0.431986,0.698617,0.527870,0.577020,0.065493,0.632062,0.654967,0.516130,0.674609,0.527743,0.528330,0.581170,0.066315,0.638426,0.647428,0.331574,0.512864,0.791852,0.529620,0.579050,-0.040852,0.661313,0.662961,-0.890764,0.358647,0.279128,0.477230,0.573720,-0.047629,0.649571,0.660549,-0.817159,0.495465,0.294559,0.475800,0.576790,-0.050710,0.654083,0.650629,-0.678264,0.358298,0.641545,0.473360,0.575110,-0.045384,0.663816,0.651903,-0.751578,0.245311,0.612334,0.474400,0.572800,-0.037148,0.672467,0.665064,-0.946326,0.093891,0.309277,0.478140,0.570640,-0.042273,0.673230,0.653517,-0.797424,-0.062891,0.600133,0.475180,0.570560,-0.055438,0.640193,0.657941,-0.711075,0.599403,0.367544,0.473930,0.579010,-0.065622,0.632071,0.654996,-0.518081,0.667238,0.535150,0.471660,0.581170,-0.057383,0.645634,0.648897,-0.565135,0.436984,0.699763,0.472120,0.577020,-0.066873,0.638489,0.647579,-0.332442,0.508764,0.794129,0.470370,0.579050,0.029932,0.691271,0.691048,0.748591,-0.309460,0.586384,0.514010,0.563510,0.029570,0.682509,0.688107,0.850468,-0.072062,0.521067,0.514290,0.567070,0.034594,0.688913,0.681631,0.821711,-0.364032,0.438487,0.517630,0.565040,0.033699,0.681588,0.678771,0.928028,-0.122164,0.351909,0.517890,0.567750,0.038668,0.686732,0.670878,0.722079,-0.529963,0.444682,0.521060,0.566260,0.036928,0.680659,0.667814,0.890289,-0.268167,0.368066,0.521330,0.568330,0.044564,0.684168,0.659911,0.492790,-0.695254,0.523239,0.524220,0.567280,0.042377,0.679856,0.656456,0.685624,-0.459331,0.564743,0.524390,0.568820,-0.030017,0.691271,0.691042,-0.747907,-0.307382,0.588347,0.485990,0.563510,-0.029759,0.682518,0.688129,-0.849641,-0.071517,0.522489,0.485700,0.567070,-0.033820,0.681595,0.678778,-0.928644,-0.119783,0.351102,0.482100,0.567750,-0.034730,0.688919,0.681641,-0.820537,-0.365392,0.439554,0.482360,0.565040,-0.038698,0.686737,0.670877,-0.720405,-0.531170,0.445954,0.478930,0.566260,-0.037089,0.680676,0.667844,-0.890102,-0.265158,0.370689,0.478660,0.568330,-0.042616,0.679888,0.656512,-0.689161,-0.456451,0.562769,0.475600,0.568820,-0.044727,0.684184,0.659952,-0.495228,-0.694021,0.522575,0.475770,0.567280,0.064404,0.572841,0.708207,0.531545,0.294428,0.794212,0.519230,0.599800,0.057203,0.562874,0.716597,0.583642,0.153726,0.797327,0.517550,0.603490,0.077836,0.562260,0.704350,0.435601,0.222701,0.872156,0.523090,0.602970,0.068544,0.552294,0.710583,0.471336,0.068033,0.879326,0.521080,0.606130,0.060162,0.546385,0.715175,0.481603,-0.107694,0.869747,0.519390,0.609330,0.049911,0.556318,0.723018,0.632968,0.029421,0.773619,0.516320,0.607050,0.046055,0.552927,0.726317,0.768760,0.206511,0.605278,0.515830,0.609470,0.054616,0.543388,0.717561,0.697278,0.019533,0.716535,0.518320,0.611750,0.046280,0.547617,0.731063,0.794816,0.466494,0.388137,0.515020,0.611630,0.054467,0.539178,0.722435,0.877318,0.345106,0.333489,0.516930,0.613810,-0.064422,0.572843,0.708212,-0.530543,0.293534,0.795212,0.480760,0.599800,-0.057260,0.562880,0.716612,-0.583401,0.155224,0.797213,0.482440,0.603490,-0.049987,0.556362,0.723042,-0.633185,0.034970,0.773210,0.483670,0.607050,-0.060227,0.546422,0.715197,-0.484074,-0.106187,0.868560,0.480600,0.609330,-0.068635,0.552307,0.710609,-0.471838,0.067989,0.879060,0.478910,0.606130,-0.077867,0.562263,0.704358,-0.435355,0.221557,0.872570,0.476900,0.602970,-0.046185,0.553003,0.726360,-0.766735,0.218041,0.603801,0.484160,0.609470,-0.046509,0.547752,0.731148,-0.789337,0.472797,0.391676,0.484980,0.611630,-0.054703,0.539311,0.722515,-0.880665,0.342405,0.327394,0.483060,0.613810,-0.054778,0.543478,0.717617,-0.702677,0.023366,0.711125,0.481670,0.611750,0.070008,0.583559,0.699863,0.485098,0.389581,0.782884,0.521150,0.597130,0.085189,0.573326,0.696895,0.421704,0.357280,0.833377,0.525250,0.600600,0.090793,0.583135,0.688694,0.445536,0.478516,0.756651,0.527790,0.598640,0.074943,0.592876,0.691902,0.483190,0.457357,0.746560,0.523480,0.595080,0.095841,0.590753,0.678831,0.451125,0.569847,0.686848,0.530780,0.596850,0.082953,0.605385,0.674511,0.517924,0.622037,0.587218,0.528630,0.591570,0.080133,0.600050,0.683802,0.516966,0.547339,0.658154,0.526240,0.593370,0.099535,0.597812,0.670175,0.396451,0.594180,0.699841,0.533290,0.594890,-0.085317,0.573343,0.696932,-0.421125,0.355809,0.834299,0.474740,0.600600,-0.070174,0.583578,0.699910,-0.484148,0.388586,0.783965,0.478840,0.597130,-0.090815,0.583139,0.688700,-0.444424,0.478887,0.757069,0.472200,0.598640,-0.075057,0.592896,0.691934,-0.483189,0.458827,0.745658,0.476510,0.595080,-0.083004,0.605390,0.674525,-0.514231,0.624850,0.587476,0.471360,0.591570,-0.096124,0.590801,0.678910,-0.448781,0.568530,0.689470,0.469210,0.596850,-0.080096,0.600051,0.683790,-0.514329,0.548788,0.659013,0.473750,0.593370,-0.099873,0.597863,0.670268,-0.394742,0.597281,0.698165,0.466700,0.594890,0.100142,0.605457,0.664489,0.315739,0.590046,0.743071,0.534290,0.592370,0.082908,0.611335,0.666924,0.465970,0.671122,0.576600,0.529790,0.589220,0.081064,0.617809,0.660324,0.378577,0.689429,0.617549,0.530440,0.586600,0.098592,0.612871,0.659516,0.248159,0.597671,0.762369,0.534660,0.589620,-0.100162,0.605462,0.664494,-0.315604,0.595605,0.738680,0.465700,0.592370,-0.083025,0.611348,0.666955,-0.464534,0.673652,0.574805,0.470200,0.589220,-0.098662,0.612875,0.659531,-0.248403,0.601947,0.758917,0.465330,0.589620,-0.081037,0.617809,0.660315,-0.381080,0.690854,0.614410,0.469550,0.586600,0.080938,0.539981,0.705374,0.364569,-0.023887,0.930870,0.524560,0.610670,0.091697,0.549297,0.700875,0.384760,0.118341,0.915399,0.526950,0.608000,0.092664,0.526625,0.700320,0.306649,-0.109531,0.945499,0.527550,0.615910,0.104356,0.534687,0.696856,0.391718,0.013507,0.919986,0.530560,0.613610,0.081691,0.522096,0.702687,0.204732,-0.256191,0.944696,0.524800,0.617970,0.071112,0.534667,0.708360,0.313620,-0.194652,0.929383,0.522440,0.613290,0.064137,0.532248,0.709332,0.480952,-0.191529,0.855571,0.520550,0.615140,0.073820,0.521161,0.703268,0.259886,-0.297228,0.918757,0.522330,0.619250,0.059061,0.527642,0.713173,0.905054,0.044583,0.422953,0.518290,0.616640,0.062993,0.516464,0.706025,0.674444,-0.378836,0.633725,0.519210,0.620470,-0.080951,0.539982,0.705377,-0.364900,-0.025156,0.930707,0.475430,0.610670,-0.091748,0.549304,0.700890,-0.385197,0.117250,0.915355,0.473050,0.608000,-0.071116,0.534667,0.708361,-0.314800,-0.195454,0.928816,0.477560,0.613290,-0.081694,0.522096,0.702688,-0.204735,-0.256272,0.944674,0.475190,0.617970,-0.092672,0.526626,0.700322,-0.306482,-0.109908,0.945510,0.472440,0.615910,-0.104358,0.534688,0.696856,-0.391659,0.013125,0.920017,0.469430,0.613610,-0.064149,0.532250,0.709336,-0.484280,-0.193244,0.853305,0.479440,0.615140,-0.059064,0.527645,0.713174,-0.907592,0.039430,0.417997,0.481700,0.616640,-0.073828,0.521162,0.703270,-0.259939,-0.297271,0.918728,0.477670,0.619250,-0.063002,0.516465,0.706027,-0.674312,-0.378933,0.633809,0.480780,0.620470,0.100974,0.560789,0.694612,0.440640,0.273275,0.855077,0.529420,0.605680,0.115758,0.545341,0.690614,0.528645,0.157219,0.834156,0.533600,0.611270,0.130588,0.559853,0.674742,0.616518,0.234571,0.751586,0.539210,0.608400,0.108008,0.572813,0.685546,0.483657,0.418559,0.768690,0.532330,0.603170,-0.115774,0.545342,0.690618,-0.528864,0.155383,0.834362,0.466390,0.611270,-0.108304,0.572853,0.685630,-0.483570,0.416950,0.769619,0.467660,0.603170,-0.130594,0.559852,0.674743,-0.616993,0.232098,0.751964,0.460780,0.608400,-0.101007,0.560793,0.694621,-0.440261,0.270493,0.856157,0.470570,0.605680,0.112918,0.583953,0.674405,0.450864,0.492590,0.744364,0.535740,0.600260,0.116741,0.593579,0.665742,0.381851,0.488193,0.784766,0.538640,0.597230,0.134091,0.578385,0.663854,0.536808,0.305733,0.786362,0.542910,0.602860,0.137966,0.590794,0.656448,0.451050,0.317373,0.834163,0.545760,0.598760,0.117431,0.609425,0.655736,0.263353,0.483193,0.834967,0.540400,0.591870,0.117946,0.601880,0.659980,0.321390,0.463360,0.825836,0.539950,0.594450,0.139818,0.608258,0.649749,0.322747,0.324528,0.889110,0.547720,0.593260,0.139706,0.600323,0.651892,0.382220,0.307568,0.871384,0.547220,0.595670,-0.112911,0.583953,0.674402,-0.452058,0.489777,0.745494,0.464250,0.600260,-0.134339,0.578409,0.663922,-0.537498,0.304634,0.786316,0.457080,0.602860,-0.116987,0.593609,0.665808,-0.383525,0.490056,0.782786,0.461350,0.597230,-0.138104,0.590807,0.656483,-0.450993,0.318222,0.833871,0.454230,0.598760,-0.117437,0.609428,0.655734,-0.261478,0.483778,0.835218,0.459590,0.591870,-0.118038,0.601886,0.660000,-0.322061,0.467744,0.823099,0.460040,0.594450,-0.139696,0.600324,0.651887,-0.380802,0.307924,0.871879,0.452770,0.595670,-0.140037,0.608274,0.649804,-0.321271,0.322966,0.890212,0.452270,0.593260,0.019904,0.513481,0.777872,0.350261,-0.496435,0.794272,0.502150,0.615390,0.010289,0.507268,0.775398,0.167502,-0.770076,0.615570,0.501310,0.616560,0.019285,0.506627,0.770190,0.338524,-0.796647,0.500755,0.502870,0.617480,0.010651,0.513989,0.781565,0.213484,-0.475897,0.853198,0.501090,0.615060,0.0,0.514874,0.783785,-0.000002,-0.460237,0.887796,0.500000,0.614810,0.0,0.506931,0.776091,-0.000002,-0.767197,0.641412,0.500000,0.616140,0.010355,0.524557,0.784217,0.211790,-0.024489,0.977008,0.500940,0.613470,0.0,0.524879,0.785259,-0.000002,-0.001498,0.999999,0.500000,0.613370,0.019792,0.524062,0.781157,0.378010,-0.053627,0.924247,0.501860,0.613620,-0.019904,0.513482,0.777872,-0.349767,-0.496842,0.794236,0.497840,0.615390,-0.010289,0.507268,0.775398,-0.167505,-0.770073,0.615572,0.498680,0.616560,-0.010651,0.513989,0.781564,-0.213436,-0.475933,0.853189,0.498900,0.615060,-0.019285,0.506627,0.770190,-0.338523,-0.796646,0.500757,0.497120,0.617480,-0.019796,0.524064,0.781160,-0.375697,-0.055338,0.925089,0.498140,0.613620,-0.010355,0.524557,0.784217,-0.211327,-0.024768,0.977102,0.499060,0.613470,0.0,0.503645,0.771275,-0.000001,-0.874945,0.484223,0.500000,0.617360,0.009008,0.503413,0.769504,0.125560,-0.874317,0.468832,0.501440,0.617680,0.016776,0.501987,0.763752,0.313741,-0.871462,0.376989,0.502830,0.618330,0.008392,0.499650,0.761577,0.108236,-0.922202,0.371253,0.501460,0.618790,0.015081,0.499637,0.758643,0.291141,-0.922821,0.252265,0.502750,0.619110,0.0,0.499804,0.762711,-0.000000,-0.917441,0.397871,0.500000,0.618680,-0.009008,0.503413,0.769504,-0.125561,-0.874317,0.468834,0.498550,0.617680,-0.008392,0.499650,0.761577,-0.108236,-0.922202,0.371253,0.498530,0.618790,-0.016776,0.501987,0.763752,-0.313740,-0.871462,0.376990,0.497170,0.618330,-0.015081,0.499637,0.758643,-0.291140,-0.922822,0.252266,0.497240,0.619110,0.028136,0.523249,0.776798,0.554906,-0.036652,0.831105,0.502700,0.613670,0.026953,0.514369,0.774988,0.460049,-0.486159,0.742970,0.502950,0.615330,0.034817,0.522449,0.771260,0.706458,0.028946,0.707163,0.503900,0.613760,0.033241,0.514894,0.770894,0.582563,-0.449181,0.677389,0.503920,0.615260,0.025725,0.508294,0.768530,0.378109,-0.804645,0.457800,0.503610,0.617000,0.031284,0.509593,0.766001,0.422817,-0.807559,0.411187,0.504430,0.616700,0.026597,0.505556,0.759536,0.349271,-0.934926,0.062641,0.504650,0.618340,0.030151,0.507513,0.753192,0.147837,-0.946905,-0.285507,0.506000,0.618940,0.030286,0.506927,0.758504,0.296262,-0.954048,0.044963,0.505330,0.618110,0.027974,0.507599,0.752001,0.214658,-0.903706,-0.370455,0.505920,0.619420,0.023606,0.503931,0.759253,0.498495,-0.861658,0.095126,0.504200,0.618660,0.021486,0.502125,0.757283,0.572294,-0.817064,0.069902,0.503900,0.619030,0.019604,0.500828,0.754141,0.562537,-0.826148,-0.032123,0.503660,0.619660,-0.026953,0.514369,0.774988,-0.459345,-0.487399,0.742593,0.497040,0.615330,-0.028166,0.523263,0.776821,-0.553035,-0.040756,0.832160,0.497300,0.613670,-0.025725,0.508294,0.768530,-0.378107,-0.804644,0.457802,0.496380,0.617000,-0.033241,0.514894,0.770894,-0.582419,-0.450689,0.676511,0.496070,0.615260,-0.031284,0.509593,0.766001,-0.422818,-0.807557,0.411189,0.495560,0.616700,-0.034849,0.522462,0.771281,-0.708137,0.024327,0.705656,0.496090,0.613760,-0.026597,0.505556,0.759536,-0.349269,-0.934926,0.062641,0.495340,0.618340,-0.030151,0.507513,0.753192,-0.147840,-0.946905,-0.285507,0.493990,0.618940,-0.027974,0.507599,0.752001,-0.214657,-0.903707,-0.370454,0.494070,0.619420,-0.030286,0.506927,0.758504,-0.296262,-0.954048,0.044963,0.494660,0.618110,-0.023606,0.503931,0.759253,-0.498494,-0.861658,0.095127,0.495790,0.618660,-0.021486,0.502125,0.757283,-0.572294,-0.817064,0.069903,0.496090,0.619030,-0.019604,0.500828,0.754141,-0.562535,-0.826149,-0.032123,0.496330,0.619660,0.0,0.537903,0.782600,-0.000001,0.293213,0.956047,0.500000,0.611550,0.009589,0.537598,0.781885,0.172457,0.285989,0.942586,0.500990,0.611630,0.018885,0.537063,0.779635,0.369357,0.277193,0.886983,0.502000,0.611740,0.033760,0.535715,0.768036,0.751404,0.320015,0.577046,0.504710,0.611810,0.027349,0.536357,0.775192,0.599203,0.286343,0.747638,0.503100,0.611780,-0.009589,0.537598,0.781885,-0.171676,0.285966,0.942736,0.499010,0.611630,-0.018916,0.537073,0.779653,-0.365915,0.277337,0.888364,0.497990,0.611740,-0.033856,0.535761,0.768115,-0.753317,0.320018,0.574545,0.495290,0.611810,-0.027450,0.536396,0.775264,-0.596736,0.287031,0.749346,0.496890,0.611780,0.043301,0.537882,0.748741,0.795674,0.428405,0.428219,0.510590,0.612650,0.039170,0.536437,0.758886,0.803986,0.374740,0.461710,0.507440,0.612000,0.047319,0.521510,0.755832,0.846554,0.101246,0.522585,0.508820,0.614690,0.041436,0.522034,0.763958,0.796105,0.098569,0.597077,0.506170,0.614070,0.049471,0.536694,0.739920,0.799486,0.434246,0.415033,0.512910,0.613930,0.057688,0.529708,0.731947,0.906143,0.309229,0.288587,0.514470,0.615690,0.052273,0.520023,0.748007,0.859830,-0.005434,0.510551,0.510700,0.615640,0.056808,0.516118,0.739914,0.855895,-0.237344,0.459468,0.512030,0.616920,-0.043310,0.537888,0.748744,-0.792059,0.428583,0.434693,0.489400,0.612650,-0.039185,0.536442,0.758896,-0.805713,0.374117,0.459198,0.492550,0.612000,-0.041437,0.522035,0.763958,-0.797814,0.096316,0.595160,0.493820,0.614070,-0.047319,0.521510,0.755832,-0.845328,0.100144,0.524779,0.491170,0.614690,-0.057845,0.529796,0.731993,-0.908885,0.300631,0.289049,0.485530,0.615690,-0.049647,0.536798,0.739976,-0.796544,0.431181,0.423792,0.487080,0.613930,-0.052273,0.520023,0.748007,-0.857812,-0.008855,0.513887,0.489290,0.615640,-0.056808,0.516118,0.739914,-0.854383,-0.241934,0.459889,0.487960,0.616920,0.039977,0.515060,0.764751,0.680523,-0.425792,0.596313,0.505790,0.615470,0.045427,0.514557,0.757145,0.736600,-0.462860,0.493134,0.507940,0.615920,0.036961,0.510229,0.761031,0.432084,-0.829339,0.354260,0.505920,0.616690,0.041558,0.509919,0.754951,0.406042,-0.871828,0.273944,0.507540,0.616900,-0.039977,0.515060,0.764751,-0.680613,-0.426435,0.595751,0.494200,0.615470,-0.036961,0.510229,0.761031,-0.432083,-0.829338,0.354264,0.494070,0.616690,-0.045427,0.514557,0.757146,-0.736597,-0.462878,0.493121,0.492050,0.615920,-0.041558,0.509919,0.754952,-0.406039,-0.871828,0.273948,0.492450,0.616900,0.058467,0.511890,0.731987,0.728371,-0.600220,0.330471,0.513140,0.618660,0.050058,0.508295,0.734863,0.176265,-0.932669,0.314737,0.511470,0.619070,0.052257,0.505383,0.725331,0.413561,-0.859709,0.299780,0.513640,0.620650,0.046319,0.506050,0.728274,-0.164407,-0.862454,0.478689,0.512020,0.620780,0.044190,0.509023,0.735208,-0.377517,-0.919225,0.111835,0.510190,0.619630,0.041469,0.509700,0.728424,-0.642419,-0.635531,0.428250,0.510530,0.621110,0.044921,0.508909,0.742025,0.033515,-0.997034,0.069288,0.509340,0.618300,0.050649,0.511098,0.742003,0.500865,-0.796122,0.339595,0.510410,0.617610,0.061885,0.518305,0.724894,0.986460,-0.066415,0.149953,0.515540,0.617920,0.057920,0.508098,0.719138,0.795891,-0.599915,0.081600,0.515900,0.620450,0.053959,0.505038,0.706202,0.537616,-0.689538,0.485291,0.517510,0.624010,0.049121,0.502029,0.714732,0.476196,-0.873018,0.105249,0.515160,0.623140,0.044834,0.499137,0.706788,0.438450,-0.698812,0.565175,0.515470,0.626280,0.040964,0.498674,0.712640,0.301705,-0.919950,0.250331,0.513540,0.625280,0.044726,0.501707,0.720584,0.145837,-0.898028,0.415064,0.513020,0.622700,0.037684,0.500019,0.718507,0.047656,-0.814771,0.577820,0.511680,0.624360,0.040940,0.504722,0.723966,-0.296045,-0.609838,0.735157,0.511520,0.622330,0.035367,0.504404,0.721639,-0.221153,-0.352687,0.909232,0.510420,0.623370,0.037392,0.509810,0.723523,-0.547635,-0.268774,0.792374,0.510080,0.622140,0.033919,0.509037,0.721623,-0.348434,-0.057326,0.935579,0.509640,0.622730,-0.058479,0.511892,0.731990,-0.727456,-0.601750,0.329704,0.486850,0.618660,-0.052262,0.505384,0.725333,-0.413597,-0.859761,0.299581,0.486360,0.620650,-0.050058,0.508294,0.734863,-0.176172,-0.932674,0.314775,0.488520,0.619070,-0.046327,0.506051,0.728276,0.164468,-0.862571,0.478457,0.487970,0.620780,-0.050649,0.511098,0.742003,-0.500781,-0.796124,0.339713,0.489580,0.617610,-0.044921,0.508909,0.742025,-0.033514,-0.997033,0.069289,0.490650,0.618300,-0.044191,0.509023,0.735208,0.377482,-0.919260,0.111666,0.489800,0.619630,-0.041471,0.509701,0.728424,0.642666,-0.635767,0.427529,0.489460,0.621110,-0.061886,0.518306,0.724894,-0.986470,-0.071854,0.147356,0.484450,0.617920,-0.057920,0.508098,0.719138,-0.795887,-0.599928,0.081548,0.484090,0.620450,-0.053966,0.505038,0.706203,-0.537525,-0.689535,0.485395,0.482480,0.624010,-0.049121,0.502029,0.714732,-0.476168,-0.873025,0.105321,0.484830,0.623140,-0.044726,0.501707,0.720584,-0.145878,-0.898026,0.415053,0.486970,0.622700,-0.040964,0.498674,0.712640,-0.301667,-0.919967,0.250315,0.486460,0.625280,-0.037685,0.500018,0.718508,-0.047645,-0.814791,0.577793,0.488310,0.624360,-0.044835,0.499137,0.706789,-0.438360,-0.698743,0.565331,0.484520,0.626280,-0.040952,0.504724,0.723969,0.296123,-0.609885,0.735086,0.488470,0.622330,-0.037408,0.509812,0.723527,0.548055,-0.268950,0.792023,0.489910,0.622140,-0.035377,0.504406,0.721642,0.221162,-0.352645,0.909246,0.489570,0.623370,-0.033935,0.509039,0.721627,0.348437,-0.057214,0.935584,0.490350,0.622730,0.061949,0.500770,0.700063,0.316246,-0.317836,0.893850,0.519090,0.626280,0.074300,0.507080,0.698933,0.280678,-0.310466,0.908202,0.521400,0.624470,0.069266,0.492543,0.695856,0.297794,-0.154534,0.942039,0.520320,0.629390,0.081433,0.496891,0.693379,0.256446,-0.275607,0.926432,0.523060,0.628320,0.055880,0.487875,0.699804,0.353583,0.031471,0.934874,0.517280,0.630340,0.050220,0.494932,0.702015,0.373203,-0.216671,0.902094,0.516580,0.627960,0.082907,0.509688,0.697612,0.164187,-0.348728,0.922730,0.523790,0.623310,0.091127,0.509960,0.697221,0.156197,-0.319390,0.934662,0.526350,0.622170,0.090272,0.498358,0.691973,0.137201,-0.374355,0.917079,0.525350,0.627250,0.099106,0.498453,0.691515,0.135841,-0.367000,0.920249,0.527900,0.626120,-0.061954,0.500770,0.700064,-0.316244,-0.317986,0.893798,0.480900,0.626280,-0.074303,0.507081,0.698934,-0.280722,-0.310513,0.908172,0.478590,0.624470,-0.050225,0.494931,0.702017,-0.372759,-0.218381,0.901865,0.483410,0.627960,-0.055879,0.487876,0.699801,-0.352100,0.024427,0.935644,0.482710,0.630340,-0.069266,0.492543,0.695856,-0.297628,-0.155695,0.941901,0.479670,0.629390,-0.081438,0.496891,0.693381,-0.256318,-0.275860,0.926392,0.476930,0.628320,-0.082907,0.509688,0.697612,-0.164256,-0.348711,0.922724,0.476200,0.623310,-0.091127,0.509960,0.697221,-0.156158,-0.319440,0.934651,0.473640,0.622170,-0.090278,0.498358,0.691975,-0.137109,-0.374364,0.917089,0.474640,0.627250,-0.099111,0.498454,0.691516,-0.135852,-0.366902,0.920287,0.472090,0.626120,0.048746,0.513104,0.749310,0.691385,-0.595161,0.409597,0.509360,0.616600,0.044076,0.509361,0.748568,0.305450,-0.937470,0.166882,0.508560,0.617420,-0.048746,0.513104,0.749310,-0.691387,-0.595157,0.409600,0.490630,0.616600,-0.044076,0.509361,0.748568,-0.305449,-0.937470,0.166884,0.491430,0.617420,0.034294,0.508036,0.755407,0.217948,-0.975939,-0.006456,0.506320,0.617940,0.037810,0.508609,0.751050,0.044678,-0.996201,-0.074748,0.507370,0.617960,0.031965,0.508829,0.749902,0.025743,-0.919450,-0.392364,0.506750,0.619220,0.034412,0.510558,0.746220,-0.192396,-0.880103,-0.434054,0.507400,0.619280,0.040061,0.509010,0.746295,-0.152380,-0.980597,-0.123326,0.508180,0.618350,0.040804,0.509785,0.741037,-0.401496,-0.897660,-0.181680,0.508860,0.619110,0.036602,0.511483,0.742502,-0.426104,-0.821261,-0.379429,0.508120,0.619520,0.038151,0.511783,0.739802,-0.567596,-0.757305,-0.322993,0.508620,0.619780,-0.034294,0.508036,0.755407,-0.217947,-0.975939,-0.006456,0.493670,0.617940,-0.031965,0.508829,0.749902,-0.025747,-0.919450,-0.392363,0.493240,0.619220,-0.037811,0.508609,0.751050,-0.044676,-0.996201,-0.074747,0.492620,0.617960,-0.034412,0.510558,0.746220,0.192391,-0.880104,-0.434054,0.492590,0.619280,-0.040061,0.509010,0.746295,0.152379,-0.980597,-0.123326,0.491810,0.618350,-0.036602,0.511483,0.742502,0.426099,-0.821263,-0.379429,0.491880,0.619520,-0.040804,0.509785,0.741037,0.401492,-0.897662,-0.181679,0.491130,0.619110,-0.038151,0.511783,0.739802,0.567592,-0.757308,-0.322992,0.491370,0.619780,0.040062,0.512226,0.734630,-0.663260,-0.742536,-0.093414,0.509410,0.620250,0.037661,0.515519,0.726970,-0.734801,-0.586976,0.339892,0.509450,0.621420,0.036784,0.516201,0.734593,-0.618920,-0.744790,-0.249452,0.508830,0.620730,0.033062,0.520882,0.726075,-0.452523,-0.867011,0.208601,0.508700,0.621650,-0.040062,0.512226,0.734630,0.663219,-0.742554,-0.093560,0.490580,0.620250,-0.036784,0.516201,0.734593,0.618865,-0.744806,-0.249539,0.491170,0.620730,-0.037664,0.515520,0.726971,0.734933,-0.587326,0.339001,0.490540,0.621420,-0.033063,0.520882,0.726075,0.452431,-0.867164,0.208164,0.491290,0.621650,0.026171,0.519324,0.721213,-0.013950,-0.602371,0.798094,0.508320,0.622220,0.029657,0.512447,0.720127,-0.183957,-0.016051,0.982803,0.508780,0.622690,0.033076,0.516023,0.721469,-0.472182,-0.308725,0.825671,0.509010,0.622170,0.022310,0.514246,0.719779,0.215351,-0.028046,0.976134,0.508070,0.622710,-0.029677,0.512450,0.720133,0.184124,-0.016108,0.982771,0.491210,0.622690,-0.026184,0.519326,0.721217,0.014255,-0.602575,0.797935,0.491670,0.622220,-0.033101,0.516026,0.721476,0.472658,-0.309158,0.825237,0.490980,0.622170,-0.022321,0.514247,0.719782,-0.214794,-0.028241,0.976251,0.491920,0.622710,0.0,0.496483,0.754818,0.000001,-0.934921,0.354856,0.500000,0.620330,0.007125,0.496718,0.754322,0.156124,-0.939620,0.304531,0.501300,0.620340,0.013425,0.497792,0.752209,0.372578,-0.914911,0.155316,0.502450,0.620440,0.006160,0.494033,0.746346,0.242788,-0.933100,0.265290,0.501160,0.622140,0.011808,0.496029,0.744614,0.501428,-0.853380,0.142521,0.502240,0.622190,0.000000,0.493482,0.746822,-0.000000,-0.947956,0.318402,0.500000,0.622140,0.017027,0.499640,0.749259,0.642738,-0.759486,-0.100350,0.503350,0.620810,0.014507,0.498216,0.741829,0.789963,-0.612688,0.023926,0.503320,0.622390,-0.007125,0.496718,0.754322,-0.156124,-0.939620,0.304532,0.498690,0.620340,-0.006160,0.494033,0.746346,-0.242788,-0.933100,0.265288,0.498830,0.622140,-0.013425,0.497792,0.752209,-0.372579,-0.914910,0.155317,0.497540,0.620440,-0.011808,0.496029,0.744614,-0.501425,-0.853381,0.142525,0.497750,0.622190,-0.017027,0.499640,0.749259,-0.642738,-0.759485,-0.100349,0.496640,0.620810,-0.014507,0.498216,0.741829,-0.789965,-0.612685,0.023934,0.496670,0.622390,0.030049,0.515957,0.740949,-0.128636,-0.805376,-0.578639,0.507630,0.620770,0.029174,0.511517,0.746144,0.039752,-0.808180,-0.587593,0.506950,0.620250,-0.030049,0.515957,0.740949,0.128631,-0.805377,-0.578638,0.492360,0.620770,-0.029174,0.511517,0.746144,-0.039754,-0.808181,-0.587591,0.493050,0.620250,0.033093,0.518049,0.736974,-0.378088,-0.821548,-0.426741,0.508210,0.620900,0.026251,0.522470,0.729102,0.021347,-0.993439,-0.112357,0.508100,0.621780,-0.033093,0.518049,0.736974,0.378076,-0.821548,-0.426752,0.491780,0.620900,-0.026251,0.522470,0.729102,-0.021352,-0.993440,-0.112346,0.491900,0.621780,0.017770,0.500234,0.728787,0.887645,-0.136538,0.439821,0.505580,0.624150,0.015979,0.494884,0.725884,0.712660,-0.556782,0.426743,0.504970,0.625810,0.020217,0.497278,0.723017,0.686850,-0.465796,0.557916,0.506590,0.625580,0.014589,0.496732,0.733147,0.798764,-0.544178,0.256606,0.504010,0.624160,0.011966,0.492419,0.729423,0.610287,-0.693281,0.383290,0.503150,0.625870,0.011278,0.494271,0.736456,0.587616,-0.778469,0.220664,0.502550,0.624050,0.006000,0.489532,0.732221,0.352909,-0.849588,0.391989,0.501520,0.625740,0.005884,0.491757,0.738706,0.320664,-0.904587,0.280886,0.501250,0.623960,0.0,0.488661,0.733146,-0.000015,-0.916660,0.399668,0.500000,0.625650,0.0,0.490862,0.739335,-0.000007,-0.947963,0.318379,0.500000,0.623920,-0.015980,0.494884,0.725884,-0.712594,-0.556868,0.426742,0.495020,0.625810,-0.017770,0.500234,0.728787,-0.887590,-0.136502,0.439944,0.494420,0.624150,-0.020218,0.497279,0.723017,-0.686733,-0.465896,0.557977,0.493400,0.625580,-0.014589,0.496732,0.733147,-0.798750,-0.544189,0.256626,0.495980,0.624160,-0.011278,0.494271,0.736456,-0.587600,-0.778482,0.220662,0.497440,0.624050,-0.011967,0.492419,0.729423,-0.610199,-0.693406,0.383205,0.496840,0.625870,-0.006000,0.489532,0.732220,-0.352887,-0.849658,0.391857,0.498470,0.625740,-0.005884,0.491757,0.738706,-0.320664,-0.904590,0.280876,0.498740,0.623960,0.021059,0.504585,0.723712,0.642682,0.130631,0.754914,0.507080,0.623990,0.014910,0.510964,0.724461,0.774802,0.107123,0.623063,0.507030,0.622870,0.025640,0.506366,0.721235,0.267112,0.062040,0.961666,0.508220,0.623760,0.024412,0.499122,0.721472,0.536260,-0.431765,0.725262,0.507790,0.625420,0.028051,0.499644,0.720238,0.333556,-0.497916,0.800512,0.508930,0.625300,-0.014910,0.510964,0.724461,-0.774535,0.107034,0.623410,0.492960,0.622870,-0.021059,0.504585,0.723712,-0.642346,0.130520,0.755219,0.492920,0.623990,-0.024417,0.499122,0.721474,-0.535887,-0.431975,0.725412,0.492200,0.625420,-0.025647,0.506367,0.721237,-0.266693,0.061692,0.961805,0.491770,0.623760,-0.028057,0.499644,0.720240,-0.333394,-0.498016,0.800518,0.491060,0.625300,0.012159,0.488786,0.724454,0.549170,-0.566453,0.614446,0.503570,0.627550,0.017011,0.491511,0.721327,0.635528,-0.413074,0.652283,0.505520,0.627290,0.021282,0.494145,0.718444,0.585059,-0.411532,0.698819,0.507230,0.626900,0.018250,0.486373,0.718793,0.482420,-0.242294,0.841763,0.505740,0.629000,0.022837,0.489030,0.716428,0.495991,-0.131620,0.858294,0.507530,0.628520,0.012785,0.484052,0.720897,0.386470,-0.453322,0.803206,0.503800,0.629330,0.006279,0.486663,0.726899,0.313028,-0.755377,0.575690,0.501750,0.627480,0.006626,0.482631,0.722283,0.206127,-0.641496,0.738914,0.501890,0.629360,0.000011,0.482166,0.722733,-0.000014,-0.711213,0.702977,0.500000,0.629320,0.000003,0.485982,0.727827,-0.000079,-0.834034,0.551713,0.500000,0.627400,-0.012157,0.488787,0.724453,-0.549015,-0.567112,0.613976,0.496420,0.627550,-0.017012,0.491511,0.721326,-0.635391,-0.413705,0.652017,0.494470,0.627290,-0.012777,0.484055,0.720890,-0.386815,-0.453859,0.802737,0.496190,0.629330,-0.018246,0.486376,0.718788,-0.483008,-0.243806,0.840989,0.494250,0.629000,-0.022835,0.489031,0.716425,-0.496463,-0.133630,0.857711,0.492460,0.628520,-0.021282,0.494145,0.718443,-0.585003,-0.412012,0.698583,0.492760,0.626900,-0.006275,0.486664,0.726898,-0.313057,-0.755728,0.575213,0.498250,0.627480,-0.006612,0.482633,0.722278,-0.206344,-0.641480,0.738868,0.498100,0.629360,0.026841,0.491448,0.714310,0.518359,-0.145318,0.842726,0.509030,0.628050,0.029213,0.496693,0.715146,0.407103,-0.659978,0.631424,0.509850,0.626460,0.025246,0.495803,0.716732,0.489733,-0.516942,0.702092,0.508510,0.626660,0.031210,0.493579,0.711582,0.521119,-0.272414,0.808842,0.510720,0.627620,-0.026838,0.491450,0.714308,-0.518905,-0.147305,0.842044,0.490960,0.628050,-0.029216,0.496691,0.715147,-0.406986,-0.660380,0.631079,0.490140,0.626460,-0.031208,0.493580,0.711579,-0.521154,-0.274443,0.808133,0.489270,0.627620,-0.025246,0.495803,0.716732,-0.489501,-0.517556,0.701801,0.491480,0.626660,0.024313,0.482582,0.715544,0.372430,-0.028670,0.927617,0.507490,0.630620,0.019110,0.480468,0.717160,0.296566,-0.186170,0.936691,0.505700,0.631070,0.025463,0.476579,0.715217,0.247146,0.003577,0.968972,0.507330,0.632700,0.019737,0.475201,0.716185,0.138897,-0.149229,0.978999,0.505570,0.633010,0.013213,0.478864,0.718219,0.197183,-0.381760,0.902983,0.503820,0.631390,0.013467,0.474164,0.716371,0.047977,-0.303536,0.951612,0.503740,0.633240,0.030746,0.478507,0.713419,0.369015,0.136758,0.919307,0.509040,0.632230,0.028733,0.485040,0.713346,0.459533,0.064674,0.885803,0.509130,0.630090,0.033707,0.487671,0.709903,0.487852,0.069268,0.870174,0.511080,0.629510,0.036541,0.481050,0.709930,0.427345,0.208853,0.879634,0.511160,0.631670,-0.024299,0.482577,0.715513,-0.378762,-0.039571,0.924648,0.492500,0.630620,-0.019100,0.480467,0.717141,-0.301135,-0.192967,0.933853,0.494290,0.631070,-0.013203,0.478866,0.718213,-0.200237,-0.384451,0.901167,0.496170,0.631390,-0.019692,0.475193,0.716095,-0.150292,-0.164569,0.974848,0.494420,0.633010,-0.013438,0.474170,0.716336,-0.056218,-0.311083,0.948719,0.496250,0.633240,-0.025392,0.476559,0.715084,-0.262332,-0.017976,0.964810,0.492660,0.632700,-0.030648,0.478485,0.713212,-0.380954,0.111468,0.917850,0.490950,0.632230,-0.028735,0.485025,0.713324,-0.465092,0.051754,0.883748,0.490860,0.630090,-0.036475,0.481025,0.709786,-0.430417,0.184819,0.883506,0.488840,0.631670,-0.033689,0.487672,0.709872,-0.489386,0.057972,0.870138,0.488910,0.629510,0.000015,0.477617,0.718657,0.000229,-0.580116,0.814534,0.500000,0.631610,0.006844,0.473562,0.716113,0.000608,-0.416412,0.909176,0.501850,0.633470,0.006790,0.477932,0.718617,0.088791,-0.529700,0.843525,0.501910,0.631550,0.000024,0.473329,0.715947,-0.000197,-0.457984,0.888960,0.500000,0.633600,-0.006825,0.473561,0.716115,-0.003490,-0.419026,0.907968,0.498140,0.633470,-0.006768,0.477929,0.718623,-0.089769,-0.530044,0.843205,0.498080,0.631550,0.037314,0.495898,0.708746,0.459250,-0.510348,0.727072,0.513040,0.627210,0.034289,0.497354,0.713015,0.303817,-0.832715,0.462904,0.511630,0.626180,0.032094,0.499683,0.718741,0.139277,-0.661994,0.736455,0.510240,0.625100,0.030367,0.505569,0.720877,-0.021959,-0.124942,0.991921,0.509220,0.623680,-0.037315,0.495898,0.708746,-0.458621,-0.511222,0.726855,0.486950,0.627210,-0.034289,0.497354,0.713015,-0.303895,-0.832788,0.462723,0.488360,0.626180,-0.032095,0.499683,0.718741,-0.139383,-0.662049,0.736385,0.489750,0.625100,-0.030378,0.505571,0.720880,0.022109,-0.125178,0.991888,0.490770,0.623680,0.044832,0.484182,0.705104,0.406527,0.179480,0.895836,0.514070,0.631070,0.040886,0.490866,0.705887,0.440428,-0.036874,0.897031,0.513750,0.628900,-0.044801,0.484168,0.705031,-0.405493,0.162766,0.899490,0.485920,0.631070,-0.040891,0.490862,0.705887,-0.439466,-0.043395,0.897210,0.486240,0.628900,0.163357,0.590179,0.642641,0.542022,0.118503,0.831967,0.555880,0.599730,0.163709,0.600659,0.640740,0.483138,0.144231,0.863582,0.556620,0.596340,0.162601,0.608884,0.639664,0.431695,0.158840,0.887924,0.556690,0.593730,0.181396,0.611647,0.629057,0.541774,0.045212,0.839307,0.565010,0.593570,0.183723,0.602665,0.627707,0.592693,0.014893,0.805291,0.565530,0.596500,0.185375,0.592032,0.626162,0.642617,-0.027983,0.765676,0.565850,0.600090,0.161627,0.561258,0.645821,0.687245,0.044100,0.725086,0.553600,0.609100,0.161610,0.576973,0.644728,0.612703,0.087894,0.785411,0.554370,0.604060,0.186755,0.579342,0.624198,0.686389,-0.070242,0.723834,0.566340,0.604170,0.187767,0.564458,0.620516,0.729724,-0.120646,0.673014,0.566890,0.609150,-0.163461,0.590183,0.642664,-0.542492,0.112629,0.832477,0.444120,0.599730,-0.164081,0.600680,0.640836,-0.481720,0.143943,0.864422,0.443370,0.596340,-0.185524,0.592052,0.626202,-0.639743,-0.037599,0.767669,0.434140,0.600090,-0.184024,0.602673,0.627770,-0.589779,0.014212,0.807439,0.434460,0.596500,-0.181534,0.611658,0.629090,-0.539294,0.048241,0.840735,0.434980,0.593570,-0.162735,0.608895,0.639697,-0.430615,0.159717,0.888291,0.443300,0.593730,-0.161780,0.561253,0.645860,-0.687387,0.042392,0.725053,0.446390,0.609100,-0.161649,0.576973,0.644736,-0.613481,0.087192,0.784881,0.445620,0.604060,-0.187899,0.564476,0.620549,-0.727599,-0.123021,0.674882,0.433100,0.609150,-0.186787,0.579351,0.624202,-0.683093,-0.072747,0.726699,0.433650,0.604170,0.202966,0.596692,0.610044,0.727251,-0.099274,0.679154,0.572230,0.599540,0.211734,0.611292,0.602201,0.770208,-0.058944,0.635064,0.575600,0.594870,0.199948,0.606916,0.614471,0.686696,-0.053690,0.724959,0.571150,0.596040,0.216437,0.602164,0.595010,0.803050,-0.103737,0.586813,0.577510,0.598190,0.196258,0.615260,0.618116,0.644004,0.002828,0.765017,0.570250,0.593040,0.206713,0.619012,0.608305,0.721807,-0.005295,0.692074,0.574130,0.591980,0.208213,0.569859,0.597854,0.787364,-0.183626,0.588506,0.576720,0.608170,0.220570,0.590898,0.586019,0.827796,-0.141908,0.542785,0.581260,0.601630,0.205628,0.584266,0.604658,0.762018,-0.134527,0.633428,0.574470,0.603220,0.224223,0.576879,0.575935,0.848423,-0.183742,0.496405,0.585160,0.606690,-0.203319,0.596713,0.610119,-0.727492,-0.100753,0.678678,0.427760,0.599540,-0.211978,0.611306,0.602246,-0.774912,-0.068592,0.628336,0.424390,0.594870,-0.216570,0.602192,0.595022,-0.805185,-0.100143,0.584507,0.422480,0.598190,-0.200465,0.606947,0.614602,-0.686466,-0.058545,0.724801,0.428840,0.596040,-0.207384,0.619051,0.608447,-0.721018,-0.000941,0.692916,0.425860,0.591980,-0.196589,0.615292,0.618206,-0.638909,0.006249,0.769257,0.429740,0.593040,-0.208415,0.569885,0.597906,-0.784396,-0.187986,0.591088,0.423270,0.608170,-0.220903,0.590903,0.586095,-0.828035,-0.135341,0.544097,0.418730,0.601630,-0.224711,0.576914,0.576032,-0.848059,-0.185989,0.496190,0.414830,0.606690,-0.206111,0.584297,0.604770,-0.759711,-0.134494,0.636200,0.425520,0.603220,0.229058,0.626519,0.576778,0.873311,0.023046,0.486618,0.587010,0.590870,0.227012,0.609644,0.579310,0.860871,-0.062323,0.504992,0.584560,0.596310,0.235570,0.618796,0.564161,0.898744,-0.008543,0.438391,0.591770,0.594130,0.221568,0.618295,0.589361,0.834490,-0.025189,0.550446,0.581220,0.593040,0.215608,0.625213,0.597963,0.791816,0.030170,0.610014,0.578470,0.590290,0.222173,0.632874,0.587557,0.831800,0.092880,0.547249,0.582930,0.588210,0.242052,0.609142,0.549866,0.926179,-0.059521,0.372358,0.597940,0.597860,0.236928,0.585567,0.554402,0.902982,-0.158077,0.399543,0.594700,0.605340,0.245765,0.596179,0.534234,0.943656,-0.110799,0.311829,0.603940,0.603520,0.232908,0.599082,0.567529,0.883517,-0.109348,0.455456,0.589610,0.599900,-0.227156,0.609655,0.579326,-0.860474,-0.062522,0.505643,0.415440,0.596310,-0.229308,0.626551,0.576798,-0.872632,0.020538,0.487947,0.412980,0.590870,-0.235959,0.618832,0.564212,-0.897357,-0.014643,0.441062,0.408230,0.594130,-0.221871,0.618315,0.589411,-0.836854,-0.032733,0.546447,0.418770,0.593040,-0.222497,0.632908,0.587605,-0.830893,0.100324,0.547313,0.417060,0.588210,-0.215941,0.625248,0.598036,-0.794373,0.034950,0.606424,0.421520,0.590290,-0.237242,0.585602,0.554446,-0.904801,-0.153548,0.397188,0.405290,0.605340,-0.242072,0.609159,0.549823,-0.926024,-0.066960,0.371479,0.402050,0.597860,-0.245925,0.596203,0.534263,-0.942722,-0.108035,0.315600,0.396050,0.603520,-0.233341,0.599132,0.567612,-0.884887,-0.102393,0.454413,0.410380,0.599900,0.237932,0.644823,0.556809,0.887614,0.084335,0.452801,0.595690,0.585980,0.241189,0.628780,0.551250,0.918113,0.017810,0.395919,0.597230,0.591770,0.245290,0.639877,0.541482,0.925030,0.016669,0.379529,0.601370,0.588740,0.234300,0.634952,0.565786,0.889781,0.064225,0.451846,0.591830,0.588660,0.227206,0.640332,0.578197,0.844207,0.146789,0.515527,0.587150,0.586010,0.230121,0.648847,0.569964,0.840208,0.181116,0.511124,0.590790,0.583520,0.251809,0.633531,0.523230,0.955740,-0.031881,0.292479,0.609160,0.591720,0.251602,0.608890,0.517404,0.962673,-0.073542,0.260484,0.611050,0.600520,0.255834,0.623723,0.503952,0.968143,-0.059370,0.243258,0.616900,0.596420,0.247616,0.620549,0.534797,0.947729,-0.035603,0.317085,0.604240,0.595210,-0.241591,0.628826,0.551334,-0.916293,0.020180,0.399999,0.402760,0.591770,-0.238265,0.644855,0.556859,-0.889291,0.076329,0.450927,0.404300,0.585980,-0.245462,0.639883,0.541444,-0.924083,0.022293,0.381541,0.398620,0.588740,-0.234671,0.634981,0.565848,-0.889329,0.066078,0.452469,0.408160,0.588660,-0.230437,0.648872,0.570010,-0.837196,0.168859,0.520182,0.409200,0.583520,-0.227497,0.640352,0.578230,-0.839619,0.156204,0.520231,0.412840,0.586010,-0.251657,0.608909,0.517403,-0.959444,-0.082302,0.269619,0.388940,0.600520,-0.252491,0.633541,0.523217,-0.951590,-0.027034,0.306180,0.390830,0.591720,-0.256810,0.623776,0.504116,-0.966737,-0.070420,0.245887,0.383090,0.596420,-0.248293,0.620579,0.534901,-0.945075,-0.046869,0.323475,0.395750,0.595210,0.241951,0.667132,0.548380,0.878027,-0.087504,0.470544,0.600280,0.578170,0.247926,0.652450,0.534836,0.927586,-0.012335,0.373406,0.604620,0.584590,0.249748,0.666314,0.531766,0.930928,-0.054428,0.361123,0.606780,0.579590,0.240226,0.655518,0.550842,0.877998,0.033924,0.477460,0.598560,0.582390,0.231628,0.657873,0.564077,0.835015,0.087718,0.543190,0.593460,0.580530,0.233101,0.667388,0.561909,0.829222,-0.134931,0.542387,0.594880,0.577190,0.254339,0.648183,0.514732,0.956396,-0.044940,0.288596,0.613440,0.587220,0.262823,0.659465,0.488259,0.971267,-0.050087,0.232663,0.626280,0.585180,0.256664,0.664291,0.510448,0.956139,-0.045326,0.289384,0.616320,0.581750,0.259643,0.640696,0.493669,0.968588,-0.065817,0.239801,0.622510,0.591360,-0.242060,0.667170,0.548366,-0.884482,-0.063763,0.462196,0.399710,0.578170,-0.248334,0.652493,0.534872,-0.928400,0.003394,0.371566,0.395370,0.584590,-0.240648,0.655575,0.550932,-0.882670,0.040467,0.468248,0.401430,0.582390,-0.249379,0.666306,0.531603,-0.928804,-0.052596,0.366819,0.393210,0.579590,-0.233396,0.667427,0.561953,-0.833397,-0.100284,0.543501,0.405110,0.577190,-0.232346,0.657938,0.564211,-0.832297,0.094924,0.546142,0.406530,0.580530,-0.256840,0.664346,0.510494,-0.955678,-0.046049,0.290790,0.383670,0.581750,-0.261133,0.640776,0.494024,-0.973156,-0.045231,0.225657,0.377480,0.591360,-0.254649,0.648206,0.514712,-0.954142,-0.016565,0.298895,0.386550,0.587220,-0.262375,0.659459,0.488114,-0.975263,-0.042960,0.216833,0.373710,0.585180,0.250262,0.694746,0.535164,0.944815,-0.064729,0.321145,0.607580,0.568680,0.243587,0.678882,0.549437,0.891507,-0.128841,0.434298,0.600720,0.573670,0.250267,0.680796,0.532045,0.939480,-0.065792,0.336226,0.607700,0.574080,0.243454,0.689939,0.552338,0.904431,-0.112438,0.411536,0.600360,0.569390,0.235067,0.676538,0.563756,0.832759,-0.202192,0.515393,0.594810,0.573690,0.234791,0.685318,0.566657,0.851055,-0.179233,0.493539,0.594030,0.570370,0.262634,0.679405,0.489126,0.970266,-0.038465,0.238966,0.626570,0.577780,0.257098,0.681374,0.510939,0.958986,-0.036704,0.281065,0.617020,0.575400,0.256471,0.698554,0.515348,0.961976,-0.031016,0.271367,0.616110,0.568760,0.262051,0.700095,0.495415,0.967073,-0.015196,0.254043,0.624610,0.569690,-0.250050,0.694765,0.535097,-0.943667,-0.031540,0.329389,0.392410,0.568680,-0.243176,0.678897,0.549290,-0.893548,-0.129461,0.429897,0.399270,0.573670,-0.243459,0.689957,0.552309,-0.909863,-0.102023,0.402170,0.399630,0.569390,-0.250682,0.680875,0.532170,-0.933556,-0.064457,0.352589,0.392290,0.574080,-0.235068,0.676540,0.563711,-0.835082,-0.203352,0.511161,0.405180,0.573690,-0.235223,0.685361,0.566736,-0.850880,-0.190042,0.489782,0.405960,0.570370,-0.262911,0.679429,0.489137,-0.973690,-0.022631,0.226751,0.373430,0.577780,-0.258119,0.681397,0.511046,-0.960072,-0.024872,0.278646,0.382970,0.575400,-0.261187,0.700082,0.495260,-0.970595,0.009813,0.240520,0.375380,0.569690,-0.256044,0.698569,0.515193,-0.963161,0.006958,0.268837,0.383880,0.568760,0.249376,0.707688,0.540994,0.943859,-0.010238,0.330189,0.606640,0.563960,0.242274,0.700138,0.557334,0.913174,-0.099103,0.395338,0.599680,0.565840,0.234195,0.693404,0.571717,0.864390,-0.216119,0.454007,0.593310,0.567550,0.238721,0.710919,0.567403,0.921682,-0.044051,0.385437,0.597090,0.561730,0.232118,0.702730,0.581410,0.874415,-0.187221,0.447601,0.590840,0.564010,0.244916,0.721003,0.551605,0.939114,0.062167,0.337936,0.603730,0.558850,0.258810,0.720790,0.504932,0.960987,0.061708,0.269624,0.621710,0.561410,0.254764,0.714964,0.522955,0.959448,0.049510,0.277502,0.614180,0.562420,0.248733,0.731400,0.535166,0.946957,0.129600,0.294069,0.610360,0.555760,0.252364,0.741168,0.519212,0.945774,0.128344,0.298395,0.616910,0.552870,-0.248527,0.707673,0.540760,-0.945232,0.006662,0.326332,0.393360,0.563960,-0.242044,0.700133,0.557241,-0.919329,-0.068841,0.387421,0.400310,0.565840,-0.244218,0.720951,0.551413,-0.944400,0.057850,0.323669,0.396260,0.558850,-0.238511,0.710873,0.567339,-0.926390,-0.045710,0.373781,0.402900,0.561730,-0.234539,0.693466,0.571779,-0.863696,-0.193226,0.465502,0.406680,0.567550,-0.231413,0.702604,0.581169,-0.873648,-0.186338,0.449464,0.409150,0.564010,-0.258543,0.720804,0.504850,-0.961901,0.055499,0.267707,0.378280,0.561410,-0.254264,0.714973,0.522746,-0.958045,0.048545,0.282476,0.385810,0.562420,-0.251944,0.741169,0.519091,-0.947437,0.123583,0.295111,0.383080,0.552870,-0.248204,0.731364,0.534997,-0.948236,0.115836,0.295685,0.389630,0.555760,0.223631,0.734010,0.606436,0.910551,-0.010161,0.413272,0.583440,0.550520,0.225479,0.713514,0.597509,0.875099,-0.169375,0.453336,0.585020,0.558590,0.232162,0.723432,0.584503,0.925061,-0.020530,0.379263,0.591140,0.555850,0.217677,0.724109,0.616845,0.850571,-0.177873,0.494864,0.578090,0.553500,0.228082,0.746376,0.593135,0.928503,0.087042,0.360979,0.589430,0.546760,0.237008,0.735037,0.569328,0.941491,0.072836,0.329073,0.597760,0.552350,0.242022,0.760226,0.540432,0.945586,0.146662,0.290443,0.609290,0.544070,0.240422,0.747736,0.554544,0.947270,0.132570,0.291728,0.603750,0.548220,0.230931,0.760417,0.580683,0.938529,0.120582,0.323455,0.594500,0.542120,0.232208,0.774462,0.569268,0.946909,0.131083,0.293564,0.598900,0.537290,-0.225726,0.713492,0.597546,-0.871963,-0.189375,0.451462,0.414970,0.558590,-0.223421,0.734031,0.606314,-0.911897,0.008355,0.410333,0.416550,0.550520,-0.232520,0.723407,0.584576,-0.927804,-0.022266,0.372403,0.408850,0.555850,-0.217882,0.724081,0.616894,-0.845983,-0.184975,0.500098,0.421900,0.553500,-0.237017,0.735033,0.569317,-0.944255,0.074665,0.320635,0.402230,0.552350,-0.227748,0.746318,0.593013,-0.927960,0.093053,0.360877,0.410570,0.546760,-0.242237,0.760249,0.540478,-0.949852,0.131128,0.283877,0.390700,0.544070,-0.240168,0.747713,0.554441,-0.949879,0.114184,0.291019,0.396240,0.548220,-0.232697,0.774524,0.569414,-0.947542,0.113244,0.298898,0.401090,0.537290,-0.230920,0.760409,0.580663,-0.937759,0.108420,0.329929,0.405490,0.542120,0.216259,0.751444,0.618426,0.868538,0.135524,0.476734,0.579370,0.544040,0.212884,0.739824,0.628160,0.840582,0.029596,0.540875,0.575230,0.547620,0.207626,0.730918,0.634656,0.755700,-0.181117,0.629376,0.571640,0.550620,0.198670,0.742413,0.645694,0.713347,0.008505,0.700760,0.567620,0.546250,0.194519,0.733887,0.647975,0.612857,-0.239137,0.753140,0.565690,0.549110,0.201594,0.752582,0.640337,0.759509,0.151526,0.632602,0.569950,0.542990,0.220610,0.781112,0.601428,0.904302,0.134482,0.405157,0.586030,0.534650,0.218679,0.766112,0.609452,0.887746,0.131140,0.441258,0.582870,0.539550,0.203276,0.766933,0.634269,0.786671,0.150301,0.598797,0.572040,0.538830,0.204918,0.782595,0.628781,0.803470,0.155593,0.574654,0.574150,0.534000,-0.216103,0.751435,0.618356,-0.871851,0.134567,0.470921,0.420620,0.544040,-0.212973,0.739819,0.628134,-0.843814,0.037970,0.535290,0.424760,0.547620,-0.201729,0.752595,0.640357,-0.763717,0.150914,0.627663,0.430040,0.542990,-0.198785,0.742435,0.645685,-0.715422,0.005988,0.698667,0.432370,0.546250,-0.207889,0.730940,0.634694,-0.753761,-0.191746,0.628552,0.428350,0.550620,-0.194483,0.733917,0.647933,-0.612398,-0.245529,0.751455,0.434300,0.549110,-0.220394,0.781082,0.601363,-0.904402,0.112933,0.411464,0.413970,0.534650,-0.218466,0.766100,0.609380,-0.888785,0.125497,0.440809,0.417120,0.539550,-0.204994,0.782597,0.628773,-0.806551,0.139914,0.574368,0.425840,0.534000,-0.203389,0.766953,0.634294,-0.790867,0.149521,0.593442,0.427950,0.538830,0.185973,0.752413,0.655849,0.614376,0.125605,0.778951,0.563260,0.542320,0.183672,0.743397,0.658278,0.571174,-0.077106,0.817200,0.561790,0.545580,0.179967,0.734516,0.657901,0.485208,-0.330668,0.809464,0.560640,0.548410,0.165451,0.743141,0.668837,0.452796,-0.163476,0.876500,0.555370,0.545230,0.162244,0.733867,0.666857,0.391898,-0.405799,0.825677,0.554560,0.548120,0.167553,0.751939,0.667567,0.497490,0.050495,0.865999,0.556470,0.541810,0.188019,0.783211,0.647354,0.669079,0.163962,0.724879,0.566000,0.533070,0.187322,0.766913,0.651650,0.643508,0.157736,0.749010,0.564620,0.538060,0.168272,0.766505,0.664508,0.536924,0.120240,0.835018,0.557450,0.537310,0.169050,0.783747,0.661876,0.555432,0.159655,0.816091,0.558290,0.532080,-0.186171,0.752433,0.655897,-0.616919,0.126001,0.776875,0.436730,0.542320,-0.183924,0.743413,0.658327,-0.574231,-0.086665,0.814093,0.438200,0.545580,-0.167953,0.751966,0.667664,-0.496900,0.052551,0.866215,0.443520,0.541810,-0.165736,0.743164,0.668915,-0.451997,-0.170884,0.875498,0.444630,0.545230,-0.180013,0.734527,0.657899,-0.487008,-0.336729,0.805876,0.439360,0.548410,-0.162350,0.733878,0.666883,-0.391482,-0.409179,0.824205,0.445430,0.548120,-0.188130,0.783233,0.647371,-0.669586,0.157077,0.725935,0.433990,0.533070,-0.187527,0.766939,0.651699,-0.643887,0.161045,0.747980,0.435370,0.538060,-0.169150,0.783758,0.661894,-0.557693,0.153902,0.815655,0.441710,0.532080,-0.168319,0.766516,0.664519,-0.537489,0.122463,0.834331,0.442550,0.537310,0.142648,0.750700,0.680157,0.463900,-0.062556,0.883676,0.547170,0.541430,0.140210,0.741947,0.679762,0.424195,-0.274587,0.862937,0.546290,0.544880,0.137670,0.732623,0.676843,0.361671,-0.492086,0.791862,0.545760,0.547850,0.113269,0.738984,0.693221,0.371882,-0.378498,0.847610,0.536800,0.544930,0.110689,0.729619,0.687668,0.320911,-0.594809,0.737034,0.536550,0.547980,0.115176,0.747605,0.694689,0.377164,-0.115056,0.918972,0.537320,0.541610,0.143918,0.782405,0.677527,0.448117,0.180949,0.875470,0.548290,0.531620,0.144379,0.764859,0.680178,0.470454,0.086013,0.878223,0.547840,0.536880,0.114739,0.761015,0.694751,0.340736,0.099474,0.934882,0.537250,0.537400,0.112331,0.777216,0.691343,0.315886,0.195010,0.928540,0.536950,0.532460,-0.142793,0.750715,0.680197,-0.461417,-0.064527,0.884834,0.452820,0.541430,-0.140286,0.741957,0.679778,-0.421466,-0.276617,0.863626,0.453710,0.544880,-0.115204,0.747609,0.694696,-0.376994,-0.119733,0.918444,0.462670,0.541610,-0.113169,0.738987,0.693177,-0.372107,-0.375899,0.848668,0.463190,0.544930,-0.137706,0.732628,0.676848,-0.361581,-0.490614,0.792816,0.454240,0.547850,-0.111012,0.729655,0.687761,-0.322570,-0.591056,0.739324,0.463440,0.547980,-0.144452,0.782476,0.677679,-0.449062,0.177190,0.875755,0.451700,0.531620,-0.144531,0.764870,0.680215,-0.470598,0.083763,0.878363,0.452150,0.536880,-0.112332,0.777220,0.691334,-0.313772,0.193300,0.929614,0.463040,0.532460,-0.114897,0.761034,0.694795,-0.339492,0.097536,0.935538,0.462740,0.537400,0.086891,0.743134,0.702892,0.253846,-0.136541,0.957559,0.528410,0.542660,0.086798,0.734718,0.700564,0.282815,-0.441929,0.851302,0.528640,0.545690,0.085463,0.725575,0.693783,0.280613,-0.656192,0.700477,0.528820,0.548890,0.063627,0.727583,0.703830,0.277363,-0.502339,0.818978,0.521880,0.547680,0.064690,0.718721,0.695458,0.306014,-0.683038,0.663185,0.522790,0.551060,0.061137,0.735997,0.707635,0.205820,-0.217580,0.954095,0.520720,0.544990,0.053831,0.743905,0.709486,0.131052,0.016555,0.991237,0.517920,0.542910,0.077618,0.767653,0.702499,0.186733,0.169400,0.967695,0.525100,0.535390,0.040575,0.753215,0.709000,0.053122,0.131631,0.989874,0.513040,0.540370,0.083015,0.754140,0.703569,0.206593,0.094020,0.973899,0.526860,0.539420,-0.086961,0.743144,0.702909,-0.254369,-0.137876,0.957229,0.471580,0.542660,-0.086921,0.734738,0.700594,-0.283507,-0.438430,0.852879,0.471350,0.545690,-0.061177,0.735999,0.707650,-0.211784,-0.205916,0.955377,0.479270,0.544990,-0.063683,0.727575,0.703869,-0.289980,-0.494283,0.819509,0.478110,0.547680,-0.085675,0.725601,0.693844,-0.280966,-0.654203,0.702195,0.471170,0.548890,-0.064940,0.718736,0.695547,-0.317151,-0.683423,0.657532,0.477200,0.551060,-0.053862,0.743909,0.709495,-0.131817,0.025002,0.990959,0.482070,0.542910,-0.077711,0.767662,0.702507,-0.186431,0.168772,0.967863,0.474890,0.535390,-0.083122,0.754156,0.703596,-0.206125,0.094058,0.973995,0.473130,0.539420,-0.040645,0.753209,0.708984,-0.052890,0.134923,0.989443,0.486950,0.540370,0.036870,0.707809,0.699834,0.396444,-0.628051,0.669615,0.514500,0.555960,0.025789,0.702926,0.701269,0.370208,-0.489430,0.789560,0.510550,0.558030,0.031313,0.699624,0.694845,0.565399,-0.535057,0.627724,0.513840,0.559870,0.031021,0.713117,0.706618,0.270113,-0.475265,0.837355,0.511500,0.553560,0.041237,0.702524,0.689372,0.428255,-0.721794,0.543702,0.517890,0.559090,0.036338,0.695752,0.684985,0.631808,-0.587642,0.505466,0.517600,0.562260,0.045842,0.697063,0.677902,0.341024,-0.765670,0.545392,0.521300,0.561930,0.041135,0.691988,0.673907,0.507360,-0.693746,0.511178,0.521070,0.564250,0.052532,0.691235,0.667005,0.288357,-0.800663,0.525157,0.524650,0.564110,0.047804,0.687558,0.663434,0.349300,-0.782133,0.516002,0.524290,0.565800,0.041748,0.725112,0.708457,0.225450,-0.329377,0.916888,0.514990,0.548920,0.047028,0.717481,0.703114,0.326098,-0.570030,0.754139,0.517110,0.551470,0.050354,0.710220,0.693568,0.349852,-0.715091,0.605184,0.519250,0.554920,0.054396,0.703118,0.681929,0.299508,-0.756383,0.581532,0.522150,0.558660,0.067386,0.709991,0.684411,0.291791,-0.735578,0.611379,0.524860,0.555210,0.060011,0.696189,0.670315,0.288936,-0.789758,0.541108,0.525530,0.561790,0.071738,0.702145,0.672646,0.297587,-0.779534,0.551153,0.527810,0.559040,-0.026064,0.703050,0.701142,-0.355593,-0.489610,0.796138,0.489440,0.558030,-0.036952,0.707630,0.700042,-0.373682,-0.641799,0.669668,0.485490,0.555960,-0.031471,0.699642,0.694778,-0.555079,-0.542725,0.630347,0.486150,0.559870,-0.031041,0.713036,0.706666,-0.236047,-0.481643,0.843980,0.488500,0.553560,-0.036471,0.695749,0.684977,-0.621051,-0.597637,0.507075,0.482390,0.562260,-0.041467,0.702481,0.689493,-0.419682,-0.732038,0.536645,0.482100,0.559090,-0.046278,0.697086,0.677968,-0.340904,-0.768589,0.541345,0.478690,0.561930,-0.041453,0.692014,0.673983,-0.499857,-0.700729,0.509040,0.478920,0.564250,-0.047825,0.687563,0.663434,-0.347817,-0.784902,0.512788,0.475700,0.565800,-0.052650,0.691246,0.667028,-0.286786,-0.802312,0.523498,0.475340,0.564110,-0.041907,0.724861,0.708885,-0.212583,-0.322284,0.922465,0.485000,0.548920,-0.047383,0.717145,0.703707,-0.326668,-0.570977,0.753175,0.482880,0.551470,-0.050554,0.710038,0.693898,-0.359616,-0.721003,0.592310,0.480740,0.554920,-0.054377,0.703120,0.681912,-0.306256,-0.757939,0.575965,0.477840,0.558660,-0.067458,0.710000,0.684428,-0.295585,-0.737713,0.606967,0.475130,0.555210,-0.060312,0.696212,0.670379,-0.288804,-0.788049,0.543665,0.474460,0.561790,-0.071707,0.702144,0.672636,-0.297406,-0.776855,0.555019,0.472190,0.559040,0.033903,0.730197,0.710836,0.113217,-0.120638,0.986219,0.512040,0.547590,0.023944,0.716256,0.709722,0.110182,-0.334915,0.935784,0.508860,0.552710,0.023355,0.733112,0.711907,-0.011091,-0.007656,0.999909,0.508410,0.547010,0.016035,0.717627,0.710054,-0.053148,-0.246683,0.967638,0.506080,0.552610,0.013222,0.704913,0.704430,-0.003515,-0.361555,0.932344,0.505420,0.558020,0.019715,0.704452,0.704006,0.146445,-0.429808,0.890965,0.508040,0.557750,-0.034005,0.730138,0.711109,-0.100102,-0.119700,0.987751,0.487950,0.547590,-0.023350,0.733163,0.712032,0.014940,-0.014180,0.999788,0.491580,0.547010,-0.023840,0.716366,0.709493,-0.088004,-0.339706,0.936405,0.491130,0.552710,-0.015953,0.717795,0.709753,0.050870,-0.254444,0.965749,0.493910,0.552610,-0.013422,0.705027,0.704306,-0.007526,-0.353306,0.935478,0.494570,0.558020,-0.019924,0.704620,0.703792,-0.141070,-0.420987,0.896030,0.491960,0.557750,0.086043,0.716656,0.683462,0.266344,-0.723977,0.636332,0.530210,0.552740,0.110046,0.720695,0.678852,0.261002,-0.672319,0.692723,0.537420,0.551390,0.088698,0.708489,0.672534,0.260678,-0.786745,0.559534,0.532290,0.556520,0.110748,0.712514,0.669857,0.203473,-0.772156,0.601975,0.538680,0.554760,-0.086222,0.716677,0.683514,-0.266376,-0.726942,0.632930,0.469780,0.552740,-0.088732,0.708504,0.672526,-0.261097,-0.785583,0.560970,0.467700,0.556520,-0.110269,0.720728,0.678909,-0.261371,-0.675189,0.689786,0.462570,0.551390,-0.110593,0.712514,0.669792,-0.203318,-0.772455,0.601643,0.461310,0.554760,0.136104,0.723064,0.670766,0.297700,-0.549192,0.780873,0.546130,0.550950,0.159107,0.724076,0.661897,0.349607,-0.430953,0.831898,0.554470,0.551090,0.135660,0.713716,0.665003,0.201599,-0.674040,0.710653,0.546760,0.554050,0.158081,0.713846,0.658708,0.269835,-0.511168,0.816025,0.554560,0.554150,-0.136134,0.723070,0.670770,-0.297813,-0.550939,0.779598,0.453860,0.550950,-0.135911,0.713744,0.665063,-0.201937,-0.675802,0.708882,0.453230,0.554050,-0.159355,0.724093,0.661960,-0.349889,-0.433145,0.830640,0.445520,0.551090,-0.157937,0.713865,0.658637,-0.268676,-0.513596,0.814882,0.445430,0.554150,0.188780,0.722576,0.646461,0.527064,-0.350713,0.774083,0.564710,0.552260,0.175996,0.723825,0.654562,0.433728,-0.375161,0.819228,0.560210,0.551480,0.184077,0.711708,0.644809,0.493840,-0.355586,0.793524,0.563830,0.555730,0.173145,0.713234,0.651868,0.386569,-0.393474,0.834112,0.559890,0.554770,-0.188856,0.722588,0.646472,-0.529439,-0.354309,0.770817,0.435280,0.552260,-0.176055,0.723843,0.654547,-0.435874,-0.377896,0.816828,0.439780,0.551480,-0.173291,0.713271,0.651883,-0.388904,-0.393710,0.832914,0.440100,0.554770,-0.183974,0.711767,0.644675,-0.498876,-0.346840,0.794245,0.436160,0.555730,0.200769,0.719370,0.636738,0.636335,-0.330637,0.696963,0.569470,0.553610,0.210493,0.713480,0.623426,0.749057,-0.322021,0.578978,0.574550,0.556150,0.202094,0.704165,0.627027,0.660864,-0.395723,0.637700,0.571510,0.558990,0.193322,0.708993,0.636709,0.576328,-0.360830,0.733245,0.567590,0.556920,-0.200431,0.719414,0.636552,-0.637814,-0.332173,0.694878,0.430520,0.553610,-0.209953,0.713476,0.623186,-0.748844,-0.316965,0.582036,0.425450,0.556150,-0.193530,0.709038,0.636710,-0.582525,-0.342273,0.737234,0.432400,0.556920,-0.202558,0.704158,0.627123,-0.671026,-0.383788,0.634374,0.428480,0.558990,0.223038,0.695947,0.593092,0.797555,-0.319963,0.511400,0.585350,0.565470,0.217102,0.705062,0.607060,0.796824,-0.312895,0.516882,0.580320,0.560680,0.213534,0.690761,0.602453,0.724177,-0.403041,0.559576,0.580240,0.566510,0.209083,0.697555,0.614529,0.708879,-0.433692,0.556239,0.576160,0.562620,-0.222663,0.696025,0.592952,-0.807774,-0.295322,0.510182,0.414640,0.565470,-0.217132,0.705063,0.607041,-0.799174,-0.315505,0.511642,0.419670,0.560680,-0.209213,0.697656,0.614382,-0.713893,-0.433367,0.550046,0.423840,0.562620,-0.213619,0.690772,0.602433,-0.728357,-0.382297,0.568634,0.419750,0.566510,0.225756,0.681302,0.579496,0.790848,-0.266018,0.551176,0.588190,0.571150,0.225193,0.688216,0.584289,0.794477,-0.325186,0.512894,0.587540,0.568680,0.215733,0.678459,0.590858,0.732284,-0.368834,0.572470,0.582580,0.571610,0.215724,0.684136,0.595260,0.737364,-0.371527,0.564147,0.582070,0.569350,-0.225547,0.681334,0.579397,-0.788448,-0.279211,0.548079,0.411800,0.571150,-0.225207,0.688259,0.584208,-0.800147,-0.309318,0.513893,0.412450,0.568680,-0.216459,0.684105,0.595481,-0.739614,-0.369076,0.562810,0.417920,0.569350,-0.215685,0.678477,0.590812,-0.737871,-0.378242,0.558999,0.417410,0.571610,0.223985,0.666991,0.575178,0.785192,-0.152810,0.600102,0.588700,0.576410,0.225843,0.674319,0.576915,0.769983,-0.273420,0.576513,0.588740,0.573760,0.213257,0.667000,0.587042,0.748818,-0.113522,0.652981,0.582500,0.575780,0.215121,0.672690,0.588562,0.709570,-0.352112,0.610351,0.582790,0.573730,-0.223891,0.667029,0.575107,-0.786001,-0.124749,0.605509,0.411290,0.576410,-0.225847,0.674372,0.576896,-0.769061,-0.268728,0.579940,0.411250,0.573760,-0.215211,0.672712,0.588567,-0.719629,-0.341349,0.604661,0.417200,0.573730,-0.213457,0.667017,0.587073,-0.751080,-0.110617,0.650878,0.417490,0.575780,0.222331,0.659495,0.577014,0.796335,0.143868,0.587497,0.587550,0.578990,0.221273,0.651997,0.582207,0.786287,0.250241,0.564918,0.585400,0.581540,0.212795,0.660766,0.589214,0.749409,0.196507,0.632275,0.581500,0.577830,0.211795,0.654445,0.593503,0.725955,0.259934,0.636729,0.579850,0.580020,-0.222846,0.659559,0.577122,-0.791957,0.161723,0.588770,0.412440,0.578990,-0.212970,0.660802,0.589239,-0.742861,0.225350,0.630377,0.418500,0.577830,-0.221304,0.652007,0.582175,-0.791992,0.227637,0.566507,0.414590,0.581540,-0.212763,0.654513,0.593737,-0.725289,0.262808,0.636308,0.420140,0.580020,0.218710,0.644509,0.589080,0.780066,0.232346,0.580958,0.582410,0.584070,0.214716,0.637550,0.596959,0.772425,0.189509,0.606174,0.578950,0.586420,0.209453,0.647850,0.598649,0.702598,0.298492,0.645956,0.577670,0.582480,0.206365,0.641903,0.605141,0.691355,0.300303,0.657150,0.575050,0.584820,-0.218676,0.644532,0.589050,-0.785488,0.226059,0.576112,0.417580,0.584070,-0.209697,0.647886,0.598698,-0.713190,0.283439,0.641110,0.422320,0.582480,-0.214962,0.637582,0.596984,-0.775823,0.196488,0.599575,0.421040,0.586420,-0.206909,0.641942,0.605259,-0.697602,0.300311,0.650511,0.424940,0.584820,0.209011,0.630954,0.605620,0.735290,0.096552,0.670840,0.575330,0.588440,0.200918,0.625282,0.613620,0.662607,0.038645,0.747970,0.571800,0.590000,0.201773,0.636439,0.611971,0.656121,0.193500,0.729427,0.572040,0.586680,0.194714,0.631528,0.618339,0.579556,0.115035,0.806772,0.569070,0.588060,-0.209341,0.630984,0.605695,-0.735826,0.099041,0.669889,0.424660,0.588440,-0.202181,0.636480,0.612072,-0.653615,0.182122,0.734587,0.427950,0.586680,-0.201231,0.625299,0.613688,-0.658867,0.044089,0.750966,0.428190,0.590000,-0.194947,0.631538,0.618388,-0.577232,0.115558,0.808362,0.430920,0.588060,0.191363,0.621429,0.621418,0.602644,0.054765,0.796129,0.568590,0.590950,0.178717,0.619141,0.630818,0.489176,0.090908,0.867434,0.563960,0.591480,0.186074,0.627574,0.624597,0.525148,0.169553,0.833949,0.566550,0.588900,0.175340,0.625946,0.631922,0.431825,0.201786,0.879096,0.562610,0.589370,-0.191480,0.621451,0.621445,-0.602420,0.051191,0.796536,0.431400,0.590950,-0.186578,0.627580,0.624702,-0.529338,0.173306,0.830521,0.433440,0.588900,-0.179123,0.619178,0.630925,-0.489604,0.082314,0.868051,0.436030,0.591480,-0.175806,0.625978,0.632021,-0.431285,0.199936,0.879784,0.437380,0.589370,0.160422,0.615848,0.639061,0.368971,0.206102,0.906301,0.556200,0.591730,0.138738,0.615005,0.647618,0.262722,0.372039,0.890261,0.547700,0.591200,0.157927,0.622595,0.637988,0.337168,0.174904,0.925055,0.555500,0.589610,0.137017,0.621583,0.645232,0.233579,0.196810,0.952211,0.547610,0.589020,-0.160555,0.615862,0.639092,-0.367238,0.203911,0.907500,0.443790,0.591730,-0.158017,0.622599,0.638007,-0.333505,0.171819,0.926959,0.444490,0.589610,-0.138981,0.615016,0.647670,-0.261745,0.374886,0.889354,0.452290,0.591200,-0.137113,0.621601,0.645257,-0.232450,0.196959,0.952457,0.452380,0.589020,0.116375,0.616228,0.651339,0.207452,0.501551,0.839887,0.540740,0.589460,0.097273,0.620168,0.654357,0.201759,0.584409,0.785977,0.535290,0.586920,0.115468,0.622994,0.647690,0.137207,0.267574,0.953718,0.541190,0.587120,0.096541,0.627290,0.649107,0.108178,0.382173,0.917737,0.536150,0.584490,-0.116463,0.616235,0.651357,-0.203929,0.503681,0.839475,0.459250,0.589460,-0.115377,0.622993,0.647662,-0.134613,0.265642,0.954627,0.458800,0.587120,-0.096974,0.620153,0.654268,-0.201296,0.585442,0.785326,0.464700,0.586920,-0.096530,0.627293,0.649105,-0.107770,0.374592,0.920905,0.463840,0.584490,0.079767,0.624960,0.654134,0.275416,0.648917,0.709262,0.531280,0.583970,0.080135,0.632654,0.648404,0.131458,0.483485,0.865425,0.532320,0.581660,-0.079722,0.624967,0.654119,-0.280423,0.645486,0.710430,0.468710,0.583970,-0.080169,0.632664,0.648413,-0.133345,0.474387,0.870159,0.467670,0.581660,0.006555,0.705413,0.704417,-0.044446,-0.293063,0.955060,0.502720,0.557820,-0.000115,0.705695,0.704437,-0.003070,-0.258861,0.965910,0.500000,0.557590,-0.000018,0.718541,0.707109,-0.003758,-0.177979,0.984027,0.500000,0.552700,0.007957,0.718280,0.708528,-0.138525,-0.195436,0.970884,0.503080,0.552650,-0.006797,0.705461,0.704408,0.033289,-0.289064,0.956731,0.497270,0.557820,-0.007942,0.718352,0.708393,0.128375,-0.200756,0.971194,0.496910,0.552650,0.015992,0.750316,0.709551,-0.066825,0.133213,0.988832,0.505510,0.541330,0.011241,0.733433,0.710939,-0.127461,0.004808,0.991832,0.504330,0.547060,-0.000001,0.733242,0.708436,0.000082,-0.008404,0.999965,0.500000,0.547240,-0.000095,0.749285,0.707715,0.001258,0.121129,0.992636,0.500000,0.541640,-0.016171,0.750314,0.709591,0.068147,0.135320,0.988456,0.494480,0.541330,-0.011248,0.733452,0.711004,0.126669,-0.000408,0.991945,0.495670,0.547060,0.056999,0.684380,0.652434,0.384724,-0.791593,0.474729,0.527570,0.566940,0.060923,0.687718,0.655345,0.359881,-0.830889,0.424393,0.528020,0.565570,0.065020,0.683815,0.643095,0.284959,-0.672121,0.683412,0.530090,0.567690,0.068953,0.687450,0.645605,0.244295,-0.756944,0.606099,0.530620,0.566520,0.062378,0.680204,0.641326,0.322110,-0.515468,0.794064,0.529920,0.568690,0.054452,0.681409,0.649547,0.436552,-0.695930,0.570178,0.527430,0.568120,0.052816,0.678063,0.646992,0.522903,-0.468708,0.711959,0.527440,0.569190,0.060986,0.676677,0.640475,0.358431,-0.266100,0.894828,0.529930,0.569430,0.052386,0.673433,0.644869,0.550452,-0.102210,0.828587,0.527620,0.570410,0.060658,0.672414,0.640437,0.400253,-0.008963,0.916361,0.530070,0.570270,-0.057115,0.684397,0.652462,-0.383311,-0.793622,0.472479,0.472420,0.566940,-0.061179,0.687750,0.655414,-0.357784,-0.834071,0.419901,0.471970,0.565570,-0.054432,0.681412,0.649529,-0.435267,-0.698755,0.567700,0.472570,0.568120,-0.062507,0.680216,0.641349,-0.319263,-0.520495,0.791932,0.470070,0.568690,-0.065035,0.683822,0.643090,-0.285462,-0.673554,0.681789,0.469900,0.567690,-0.068961,0.687455,0.645592,-0.244909,-0.759333,0.602855,0.469370,0.566520,-0.052757,0.678057,0.646948,-0.525499,-0.470616,0.708781,0.472550,0.569190,-0.052374,0.673438,0.644848,-0.556752,-0.099235,0.824730,0.472370,0.570410,-0.060963,0.676678,0.640452,-0.355098,-0.272053,0.894367,0.470070,0.569430,-0.060616,0.672413,0.640415,-0.402087,-0.007352,0.915572,0.469920,0.570270,0.067577,0.691633,0.658380,0.346787,-0.844347,0.408432,0.529060,0.563880,0.077527,0.697045,0.660680,0.323893,-0.845871,0.423787,0.531090,0.561840,0.074894,0.691369,0.648154,0.192277,-0.773723,0.603640,0.531790,0.565260,0.083484,0.695808,0.651067,0.129600,-0.729606,0.671475,0.533650,0.563660,-0.067929,0.691676,0.658474,-0.346394,-0.846106,0.405111,0.470930,0.563880,-0.074941,0.691382,0.648158,-0.192977,-0.777124,0.599031,0.468200,0.565260,-0.077989,0.697097,0.660814,-0.324912,-0.845487,0.423774,0.468900,0.561840,-0.083620,0.695828,0.651102,-0.131158,-0.733105,0.667349,0.466340,0.563660,0.054013,0.666509,0.644144,0.521821,0.129392,0.843185,0.528000,0.572080,0.062376,0.666966,0.641593,0.514660,-0.000639,0.857394,0.530280,0.571550,0.057885,0.658908,0.644515,0.533909,0.221691,0.815962,0.528640,0.573900,0.063410,0.660607,0.639213,0.556938,0.245624,0.793403,0.530700,0.573040,-0.053948,0.666505,0.644109,-0.525894,0.136254,0.839566,0.471990,0.572080,-0.058022,0.658925,0.644553,-0.538840,0.229920,0.810425,0.471350,0.573900,-0.062382,0.666968,0.641586,-0.515613,0.010979,0.856751,0.469710,0.571550,-0.063459,0.660620,0.639224,-0.554396,0.246313,0.794969,0.469290,0.573040,0.062615,0.652377,0.643672,0.387696,0.351047,0.852325,0.529670,0.575590,0.067457,0.655593,0.638760,0.182129,0.549452,0.815434,0.531530,0.574560,0.070896,0.646294,0.643344,0.101003,0.358024,0.928233,0.531260,0.577440,0.075657,0.652769,0.641800,-0.158186,0.317242,0.935059,0.532950,0.576240,-0.062674,0.652382,0.643682,-0.395340,0.361064,0.844594,0.470320,0.575590,-0.070949,0.646300,0.643357,-0.103616,0.367407,0.924270,0.468730,0.577440,-0.067356,0.655592,0.638728,-0.184392,0.543315,0.819029,0.468460,0.574560,-0.075650,0.652773,0.641796,0.158237,0.321206,0.933696,0.467040,0.576240,0.082891,0.640677,0.645403,-0.045290,0.247601,0.967803,0.533780,0.579800,0.086866,0.647893,0.644649,-0.202969,0.064122,0.977084,0.535310,0.578320,0.098085,0.635146,0.647569,-0.039157,0.096241,0.994588,0.537380,0.582330,0.100694,0.642763,0.647818,-0.134175,-0.046966,0.989844,0.538700,0.580440,-0.083552,0.640751,0.645597,0.045664,0.246585,0.968045,0.466220,0.579800,-0.098179,0.635159,0.647597,0.038562,0.089660,0.995226,0.462610,0.582330,-0.086881,0.647904,0.644655,0.203219,0.067319,0.976816,0.464680,0.578320,-0.101243,0.642830,0.647978,0.133023,-0.047693,0.989965,0.461290,0.580440,0.136306,0.629074,0.645227,0.220823,-0.080627,0.971976,0.547890,0.586200,0.115853,0.630670,0.647981,0.056262,-0.038863,0.997659,0.542070,0.584610,0.117168,0.638597,0.648979,0.025716,-0.103642,0.994282,0.543000,0.582240,0.135863,0.636770,0.646487,0.218725,-0.104481,0.970177,0.548180,0.583410,-0.136475,0.629094,0.645270,-0.219929,-0.083860,0.971905,0.452110,0.586200,-0.115937,0.630676,0.648000,-0.055300,-0.044585,0.997474,0.457920,0.584610,-0.136070,0.636776,0.646535,-0.219453,-0.106643,0.969777,0.451810,0.583410,-0.117342,0.638615,0.649024,-0.026077,-0.106752,0.993944,0.456990,0.582240,0.170191,0.632392,0.631100,0.468675,0.053361,0.881758,0.561090,0.586350,0.155929,0.630333,0.638567,0.366975,-0.047428,0.929021,0.554900,0.586640,0.154352,0.638199,0.640931,0.369321,-0.077506,0.926064,0.554210,0.583610,0.168199,0.640505,0.634814,0.497520,-0.031791,0.866870,0.559380,0.583200,-0.170621,0.632431,0.631205,-0.467556,0.061029,0.881854,0.438900,0.586350,-0.156155,0.630348,0.638621,-0.363240,-0.047641,0.930477,0.445090,0.586640,-0.168412,0.640532,0.634860,-0.496566,-0.024637,0.867649,0.440610,0.583200,-0.154427,0.638222,0.640950,-0.368012,-0.075536,0.926748,0.445780,0.583610,0.187364,0.638109,0.621818,0.524837,0.226833,0.820422,0.566110,0.585160,0.180156,0.634458,0.625744,0.513294,0.138445,0.846972,0.564250,0.585900,0.175363,0.642570,0.628894,0.584829,0.059220,0.808992,0.561810,0.582680,0.180060,0.644826,0.624093,0.619610,0.190704,0.761391,0.563090,0.582030,-0.187483,0.638124,0.621846,-0.520807,0.229931,0.822127,0.433880,0.585160,-0.180268,0.634469,0.625771,-0.517220,0.152690,0.842122,0.435740,0.585900,-0.180075,0.644823,0.624101,-0.615579,0.193245,0.764015,0.436900,0.582030,-0.175616,0.642594,0.628972,-0.591342,0.073623,0.803053,0.438180,0.582680,0.197018,0.646385,0.611751,0.574902,0.409842,0.708179,0.570960,0.582600,0.193464,0.641920,0.616848,0.548795,0.326873,0.769401,0.568530,0.584040,0.183581,0.647533,0.619230,0.612294,0.243000,0.752361,0.564940,0.581180,0.187483,0.650798,0.616109,0.621308,0.310679,0.719343,0.566840,0.580200,-0.197665,0.646408,0.611904,-0.570795,0.416065,0.707872,0.429030,0.582600,-0.193712,0.641951,0.616909,-0.539770,0.313385,0.781305,0.431460,0.584040,-0.187909,0.650811,0.616201,-0.613006,0.319911,0.722413,0.433150,0.580200,-0.183896,0.647548,0.619293,-0.596997,0.232230,0.767895,0.435050,0.581180,0.201876,0.656207,0.602674,0.618186,0.245973,0.746554,0.574430,0.578940,0.199595,0.650862,0.606416,0.591535,0.390063,0.705647,0.572850,0.580840,0.189572,0.653580,0.611943,0.639992,0.343825,0.687164,0.568220,0.579160,0.191640,0.657461,0.608574,0.623518,0.184654,0.759689,0.569470,0.577910,-0.202162,0.656238,0.602737,-0.606294,0.268841,0.748419,0.425560,0.578940,-0.199928,0.650875,0.606488,-0.586135,0.401553,0.703705,0.427140,0.580840,-0.191777,0.657500,0.608596,-0.628767,0.181084,0.756215,0.430520,0.577910,-0.189761,0.653595,0.611990,-0.639685,0.352794,0.682891,0.431770,0.579160,0.194216,0.662364,0.607085,0.611138,0.104680,0.784572,0.570990,0.576300,0.203602,0.661600,0.599795,0.670965,0.176516,0.720173,0.575940,0.577070,0.195629,0.666981,0.605665,0.622861,-0.087304,0.777446,0.572160,0.574580,0.203824,0.666763,0.597717,0.709038,-0.071409,0.701545,0.577000,0.575230,-0.194633,0.662405,0.607159,-0.619746,0.098426,0.778606,0.429000,0.576300,-0.203419,0.661625,0.599720,-0.669415,0.188274,0.718635,0.424060,0.577070,-0.204088,0.666746,0.597777,-0.710097,-0.087023,0.698706,0.422990,0.575230,-0.195842,0.667013,0.605696,-0.627816,-0.093038,0.772781,0.427830,0.574580,0.206541,0.676137,0.601575,0.666582,-0.484988,0.566087,0.577070,0.571580,0.196468,0.671054,0.606346,0.567984,-0.500926,0.653044,0.572320,0.573000,0.205107,0.671767,0.598661,0.661721,-0.428873,0.614974,0.577270,0.573430,0.197715,0.674029,0.609339,0.545705,-0.602904,0.581990,0.572040,0.571460,-0.196687,0.671087,0.606364,-0.568582,-0.500616,0.652762,0.427670,0.573000,-0.206838,0.676108,0.601665,-0.667383,-0.483024,0.566823,0.422920,0.571580,-0.205442,0.671764,0.598722,-0.664676,-0.427192,0.612954,0.422720,0.573430,-0.197959,0.674034,0.609389,-0.548119,-0.595091,0.587735,0.427950,0.571460,0.206533,0.680852,0.604892,0.693267,-0.374799,0.615553,0.576730,0.569620,0.197911,0.677545,0.612052,0.591907,-0.447286,0.670508,0.571880,0.569930,0.203899,0.686395,0.609882,0.656218,-0.414631,0.630444,0.575320,0.567360,0.195793,0.681400,0.615729,0.584965,-0.396681,0.707432,0.570880,0.568320,-0.206466,0.680835,0.604844,-0.690047,-0.366079,0.624357,0.423260,0.569620,-0.203840,0.686445,0.609744,-0.657758,-0.401966,0.637007,0.424670,0.567360,-0.198104,0.677543,0.612077,-0.599540,-0.432114,0.673669,0.428110,0.569930,-0.196177,0.681469,0.615645,-0.592205,-0.386186,0.707215,0.429110,0.568320,0.199944,0.691181,0.619307,0.577518,-0.542782,0.609804,0.571950,0.564560,0.190444,0.685770,0.621161,0.540062,-0.466808,0.700302,0.568110,0.566420,0.193755,0.695437,0.629502,0.500528,-0.566010,0.655060,0.568110,0.561980,0.184074,0.689499,0.627999,0.474797,-0.519283,0.710572,0.564950,0.564650,-0.199984,0.691306,0.619124,-0.582521,-0.543439,0.604437,0.428040,0.564560,-0.193862,0.695454,0.629494,-0.504050,-0.571806,0.647280,0.431880,0.561980,-0.190801,0.685825,0.621157,-0.541803,-0.465406,0.699890,0.431880,0.566420,-0.184318,0.689525,0.628012,-0.477457,-0.530006,0.700805,0.435040,0.564650,0.186699,0.698939,0.637484,0.424487,-0.554167,0.716037,0.565120,0.560390,0.177771,0.692638,0.633715,0.401909,-0.525275,0.750037,0.562630,0.563410,0.178873,0.701614,0.643479,0.328521,-0.571552,0.751933,0.562290,0.559270,0.171430,0.695488,0.638522,0.312464,-0.517287,0.796731,0.560480,0.562290,-0.187138,0.699006,0.637507,-0.425310,-0.547681,0.720526,0.434880,0.560390,-0.179090,0.701647,0.643503,-0.330600,-0.561386,0.758650,0.437700,0.559270,-0.178240,0.692611,0.633829,-0.399036,-0.532468,0.746491,0.437360,0.563410,-0.171713,0.695528,0.638557,-0.303898,-0.516637,0.800458,0.439510,0.562290,0.169457,0.704114,0.648758,0.206959,-0.634934,0.744330,0.559060,0.558090,0.163610,0.698900,0.642703,0.222693,-0.505775,0.833426,0.557870,0.560910,0.155169,0.706599,0.653225,0.110219,-0.737010,0.666835,0.554330,0.557160,0.151096,0.702190,0.646951,0.165313,-0.488580,0.856715,0.553730,0.559660,-0.169754,0.704160,0.648783,-0.208488,-0.631689,0.746660,0.440930,0.558090,-0.155067,0.706611,0.653165,-0.109996,-0.735825,0.668179,0.445660,0.557160,-0.163665,0.698943,0.642689,-0.220685,-0.506019,0.833812,0.442120,0.560910,-0.151274,0.702210,0.646967,-0.165278,-0.488792,0.856601,0.446270,0.559660,0.111344,0.707465,0.660838,0.163702,-0.847257,0.505328,0.539700,0.557500,0.134008,0.708546,0.657335,0.103501,-0.817525,0.566516,0.547070,0.556820,0.132154,0.704590,0.651345,0.152116,-0.481397,0.863202,0.547070,0.559000,0.112040,0.703453,0.654664,0.122508,-0.528271,0.840192,0.540450,0.559500,-0.111424,0.707483,0.660851,-0.164469,-0.846130,0.506966,0.460290,0.557500,-0.134111,0.708561,0.657359,-0.104535,-0.817328,0.566610,0.452920,0.556820,-0.112178,0.703471,0.654695,-0.123693,-0.528126,0.840109,0.459540,0.559500,-0.132160,0.704597,0.651340,-0.152994,-0.481101,0.863212,0.452920,0.559000,0.091916,0.703157,0.661692,0.249658,-0.850942,0.462134,0.534490,0.559450,0.095535,0.700200,0.654084,0.091338,-0.633281,0.768513,0.536270,0.561440,-0.092222,0.703189,0.661781,-0.251491,-0.849180,0.464377,0.465500,0.559450,-0.095682,0.700221,0.654118,-0.093007,-0.635219,0.766711,0.463720,0.561440,0.073975,0.677375,0.641169,0.014218,-0.462737,0.886382,0.533050,0.568510,0.074686,0.685254,0.643241,-0.144230,-0.434500,0.889049,0.532420,0.567020,0.070331,0.681349,0.640987,-0.085659,-0.358785,0.929482,0.531760,0.568070,0.078358,0.680676,0.643467,-0.067893,-0.518587,0.852325,0.533810,0.567700,0.067315,0.677609,0.639807,-0.024646,-0.239198,0.970658,0.531400,0.568970,0.070707,0.674201,0.640007,0.152911,-0.416228,0.896310,0.532510,0.569200,0.065694,0.674172,0.639334,0.090228,-0.138951,0.986180,0.531220,0.569640,0.069223,0.671371,0.639323,0.370621,-0.415948,0.830438,0.532180,0.569870,0.065833,0.670264,0.639585,0.382597,-0.164311,0.909187,0.531390,0.570420,-0.073909,0.677376,0.641146,-0.011505,-0.463236,0.886160,0.466940,0.568510,-0.074692,0.685258,0.643238,0.144779,-0.433646,0.889376,0.467570,0.567020,-0.078350,0.680681,0.643463,0.069568,-0.517967,0.852567,0.466190,0.567700,-0.070377,0.681356,0.640995,0.085509,-0.358827,0.929479,0.468230,0.568070,-0.067273,0.677608,0.639782,0.023770,-0.241692,0.970062,0.468590,0.568970,-0.070677,0.674201,0.639992,-0.149818,-0.419484,0.895314,0.467490,0.569200,-0.065707,0.674174,0.639328,-0.091962,-0.145675,0.985049,0.468770,0.569640,-0.065717,0.670258,0.639545,-0.389501,-0.155637,0.907781,0.468600,0.570420,-0.069075,0.671363,0.639273,-0.365260,-0.414330,0.833616,0.467810,0.569870,0.079742,0.676729,0.638707,0.299154,-0.786623,0.540121,0.534620,0.569190,0.075331,0.673886,0.637358,0.373486,-0.741799,0.556994,0.533830,0.569760,0.079640,0.674448,0.634061,0.354336,-0.795220,0.492008,0.535010,0.570290,0.076960,0.672071,0.632372,0.343446,-0.725953,0.595850,0.534650,0.570890,0.072555,0.671422,0.636355,0.495169,-0.682034,0.538179,0.533310,0.570280,0.074936,0.670074,0.630799,0.302509,-0.677855,0.670075,0.534280,0.571150,0.074574,0.668351,0.628760,0.178204,-0.620299,0.763854,0.534370,0.571430,0.071203,0.669273,0.634542,0.603586,-0.619859,0.501456,0.533280,0.570790,-0.079768,0.676737,0.638712,-0.293906,-0.784574,0.545952,0.465370,0.569190,-0.075329,0.673890,0.637353,-0.361532,-0.743725,0.562288,0.466160,0.569760,-0.072438,0.671418,0.636315,-0.485590,-0.684906,0.543236,0.466680,0.570280,-0.077089,0.672085,0.632399,-0.338444,-0.732565,0.590596,0.465340,0.570890,-0.074966,0.670084,0.630799,-0.296720,-0.678425,0.672084,0.465710,0.571150,-0.079883,0.674468,0.634125,-0.353503,-0.796336,0.490801,0.464990,0.570290,-0.074682,0.668370,0.628784,-0.184528,-0.603548,0.775680,0.465620,0.571430,-0.071119,0.669270,0.634508,-0.604023,-0.601200,0.523178,0.466710,0.570790,0.080189,0.688760,0.646277,-0.184080,-0.418767,0.889240,0.533540,0.565870,0.087760,0.692175,0.649782,-0.168404,-0.353427,0.920179,0.535190,0.564460,0.083442,0.684020,0.646318,-0.068674,-0.559455,0.826011,0.534760,0.566670,0.090171,0.687153,0.649307,0.015136,-0.615387,0.788080,0.536150,0.565460,0.091135,0.683028,0.641625,0.321974,-0.832917,0.450092,0.536720,0.567650,0.084892,0.679818,0.640398,0.272506,-0.814447,0.512266,0.535450,0.568470,0.090567,0.678820,0.634717,0.355891,-0.686912,0.633636,0.536920,0.569940,0.083874,0.676064,0.633843,0.267121,-0.763194,0.588371,0.535700,0.570340,-0.080238,0.688768,0.646288,0.184423,-0.418780,0.889163,0.466450,0.565870,-0.083493,0.684029,0.646330,0.068617,-0.559442,0.826025,0.465230,0.566670,-0.087773,0.692184,0.649781,0.168321,-0.354078,0.919944,0.464800,0.564460,-0.090187,0.687161,0.649309,-0.015585,-0.615426,0.788041,0.463840,0.565460,-0.091136,0.683031,0.641622,-0.323178,-0.832429,0.450131,0.463280,0.567650,-0.084909,0.679824,0.640400,-0.273573,-0.812597,0.514630,0.464540,0.568470,-0.083984,0.676076,0.633871,-0.272896,-0.765823,0.582274,0.464290,0.570340,-0.090585,0.678826,0.634720,-0.357736,-0.688972,0.630351,0.463070,0.569940,0.098225,0.695643,0.652928,-0.074702,-0.293610,0.953002,0.537490,0.562660,0.112887,0.697887,0.654134,0.066951,-0.243004,0.967712,0.541110,0.561170,0.099845,0.690077,0.651195,0.136100,-0.710623,0.690283,0.538300,0.564090,0.113263,0.691749,0.651338,0.069493,-0.381593,0.921714,0.541660,0.563090,0.099358,0.685510,0.637923,0.392157,-0.856943,0.334458,0.538860,0.566770,0.113263,0.691749,0.651338,0.139190,-0.987914,0.068202,0.541660,0.563090,0.111684,0.692186,0.635555,0.207144,-0.931255,0.299758,0.542080,0.566190,0.097813,0.680513,0.629982,0.487915,-0.598083,0.635795,0.539090,0.569490,0.109774,0.685619,0.625866,0.261987,-0.593890,0.760696,0.542250,0.569260,-0.098305,0.695656,0.652945,0.074978,-0.294850,0.952597,0.462500,0.562660,-0.099826,0.690081,0.651187,-0.135461,-0.711237,0.689777,0.461690,0.564090,-0.113027,0.697897,0.654168,-0.067287,-0.243075,0.967671,0.458880,0.561170,-0.113375,0.691759,0.651366,-0.069237,-0.382608,0.921313,0.458330,0.563090,-0.113375,0.691759,0.651366,-0.138975,-0.987975,0.067758,0.458330,0.563090,-0.099370,0.685514,0.637923,-0.391869,-0.857059,0.334497,0.461130,0.566770,-0.111664,0.692189,0.635542,-0.206541,-0.931214,0.300301,0.457910,0.566190,-0.097779,0.680516,0.629964,-0.486407,-0.599550,0.635568,0.460910,0.569490,-0.109869,0.685637,0.625890,-0.259778,-0.593628,0.761657,0.457740,0.569260,0.148349,0.696204,0.647410,0.236476,-0.235620,0.942636,0.552710,0.561810,0.131244,0.698338,0.651612,0.174175,-0.211149,0.961810,0.546880,0.560980,0.144907,0.689854,0.645387,-0.005263,-0.715290,0.698808,0.551810,0.563920,0.129706,0.691733,0.648936,0.000369,-0.793949,0.607984,0.546710,0.563110,-0.148379,0.696231,0.647381,-0.235931,-0.235520,0.942797,0.447280,0.561810,-0.131328,0.698352,0.651628,-0.175562,-0.210774,0.961640,0.453110,0.560980,-0.129808,0.691745,0.648958,-0.001858,-0.793919,0.608021,0.453280,0.563110,-0.144961,0.689876,0.645378,0.005003,-0.714636,0.699479,0.448180,0.563920,0.167087,0.688899,0.638764,0.367914,-0.353556,0.860022,0.558840,0.564570,0.159515,0.692621,0.643037,0.301380,-0.304412,0.903606,0.556420,0.563160,0.163102,0.683078,0.636666,0.119464,-0.678813,0.724528,0.557800,0.566480,0.155426,0.686569,0.641187,0.070701,-0.679160,0.730578,0.555310,0.565170,-0.167161,0.688942,0.638744,-0.362017,-0.354904,0.861967,0.441150,0.564570,-0.159703,0.692668,0.643059,-0.300128,-0.302682,0.904603,0.443570,0.563160,-0.155559,0.686600,0.641199,-0.070916,-0.677500,0.732096,0.444680,0.565170,-0.163357,0.683091,0.636718,-0.120995,-0.679199,0.723912,0.442190,0.566480,0.170162,0.680133,0.632851,0.190060,-0.673254,0.714567,0.559870,0.567450,0.173268,0.685746,0.634325,0.459232,-0.360317,0.811959,0.560820,0.565670,0.178784,0.682797,0.629089,0.539279,-0.359111,0.761720,0.562760,0.566740,-0.170126,0.680160,0.632809,-0.191245,-0.678613,0.709161,0.440120,0.567450,-0.173527,0.685731,0.634362,-0.455259,-0.376011,0.807065,0.439170,0.565670,-0.178802,0.682845,0.629029,-0.537989,-0.370898,0.756969,0.437230,0.566740,0.188034,0.676765,0.618622,0.526235,-0.495275,0.691216,0.567120,0.569670,0.184336,0.679613,0.623468,0.561387,-0.402876,0.722866,0.565130,0.568200,0.189521,0.674217,0.615817,0.460355,-0.616073,0.639161,0.567790,0.570740,0.189417,0.672230,0.613780,0.387867,-0.726606,0.567100,0.567840,0.571660,0.182680,0.671704,0.617365,0.236586,-0.832352,0.501215,0.564740,0.571450,0.182395,0.670946,0.615719,0.172353,-0.861082,0.478364,0.564720,0.571900,-0.188239,0.676765,0.618654,-0.525352,-0.489975,0.695651,0.432870,0.569670,-0.184407,0.679679,0.623337,-0.557463,-0.396333,0.729490,0.434860,0.568200,-0.189718,0.674221,0.615873,-0.460112,-0.613630,0.641682,0.432200,0.570740,-0.182840,0.671716,0.617392,-0.234919,-0.830459,0.505124,0.435250,0.571450,-0.189602,0.672226,0.613832,-0.389287,-0.721618,0.572470,0.432150,0.571660,-0.182643,0.670952,0.615775,-0.172002,-0.856012,0.487502,0.435270,0.571900,0.188803,0.670346,0.611768,0.406770,-0.580639,0.705264,0.568070,0.572640,0.187824,0.667742,0.610985,0.496649,-0.087588,0.863521,0.567890,0.573660,0.181860,0.670247,0.614358,0.231849,-0.616409,0.752520,0.564750,0.572440,0.180920,0.668832,0.614077,0.383607,0.035360,0.922819,0.564490,0.572890,-0.189133,0.670348,0.611837,-0.412307,-0.572488,0.708703,0.431920,0.572640,-0.188226,0.667743,0.611076,-0.498271,-0.086120,0.862734,0.432100,0.573660,-0.182148,0.670256,0.614422,-0.231211,-0.605020,0.761901,0.435240,0.572440,-0.181271,0.668844,0.614152,-0.379092,0.042534,0.924381,0.435500,0.572890,0.179584,0.666463,0.615791,0.480029,0.436601,0.760889,0.563620,0.573990,0.184371,0.661105,0.615539,0.638832,0.294002,0.710954,0.565350,0.576460,0.186457,0.664296,0.612547,0.562390,0.218474,0.797488,0.566770,0.575040,0.177995,0.664151,0.618925,0.527879,0.507631,0.680922,0.562520,0.575220,-0.184856,0.661146,0.615647,-0.637365,0.289503,0.714111,0.434640,0.576460,-0.179866,0.666494,0.615842,-0.480369,0.438876,0.759364,0.436380,0.573990,-0.186693,0.664356,0.612585,-0.562557,0.218189,0.797448,0.433220,0.575040,-0.178237,0.664196,0.618968,-0.528390,0.501172,0.685296,0.437470,0.575220,0.180339,0.656335,0.621769,0.654397,0.270746,0.706018,0.563150,0.578120,0.176178,0.662212,0.621919,0.525639,0.489039,0.696092,0.561550,0.576020,0.174163,0.660570,0.624645,0.495101,0.474370,0.727907,0.560610,0.576620,0.182579,0.658514,0.618750,0.669340,0.332287,0.664507,0.564240,0.577400,-0.180532,0.656354,0.621791,-0.642958,0.277666,0.713797,0.436840,0.578120,-0.176294,0.662247,0.621931,-0.522886,0.462779,0.715839,0.438450,0.576020,-0.182884,0.658542,0.618803,-0.662164,0.325034,0.675197,0.435750,0.577400,-0.174060,0.660593,0.624592,-0.496410,0.458316,0.737241,0.439380,0.576620,0.177746,0.654277,0.625041,0.642885,0.226910,0.731581,0.561810,0.578840,0.174721,0.652161,0.628312,0.619466,0.228787,0.750945,0.560520,0.579530,0.171607,0.659139,0.627149,0.466393,0.474023,0.746846,0.559660,0.577160,0.168905,0.657577,0.629736,0.439839,0.461608,0.770363,0.558760,0.577690,-0.177835,0.654276,0.625045,-0.632913,0.225495,0.740658,0.438180,0.578840,-0.171682,0.659185,0.627129,-0.469457,0.470649,0.747061,0.440330,0.577160,-0.174649,0.652164,0.628271,-0.621108,0.227588,0.749953,0.439470,0.579530,-0.169093,0.657621,0.629753,-0.439630,0.462175,0.770143,0.441230,0.577690,0.170837,0.650049,0.631645,0.548993,0.203183,0.810755,0.559560,0.580140,0.163885,0.647869,0.635923,0.440071,0.171193,0.881493,0.557580,0.580730,0.166145,0.655675,0.632278,0.397366,0.434633,0.808204,0.557960,0.578260,0.160341,0.653614,0.636126,0.309955,0.435541,0.845122,0.556270,0.578820,-0.170914,0.650054,0.631652,-0.555449,0.211623,0.804172,0.440430,0.580140,-0.166363,0.655722,0.632302,-0.395355,0.441582,0.805419,0.442030,0.578260,-0.164067,0.647867,0.635967,-0.439814,0.173184,0.881232,0.442410,0.580730,-0.160424,0.653633,0.636128,-0.308919,0.440948,0.842694,0.443720,0.578820,0.151895,0.645238,0.641223,0.340000,0.129504,0.931466,0.553320,0.581240,0.135299,0.643822,0.647115,0.229844,0.084808,0.969525,0.548230,0.581240,0.149291,0.651641,0.640677,0.239755,0.483610,0.841807,0.552720,0.579320,0.134928,0.650372,0.645635,0.193959,0.535354,0.822056,0.548360,0.579400,-0.152016,0.645247,0.641258,-0.341951,0.127219,0.931067,0.446670,0.581240,-0.149545,0.651672,0.640751,-0.241368,0.486985,0.839397,0.447270,0.579320,-0.135613,0.643843,0.647194,-0.230622,0.084726,0.969348,0.451760,0.581240,-0.135143,0.650383,0.645687,-0.192424,0.539047,0.820001,0.451630,0.579400,0.103263,0.648873,0.648912,-0.094353,0.086335,0.991788,0.539720,0.578990,0.118426,0.645164,0.649557,0.055923,0.066635,0.996209,0.543630,0.580390,0.105530,0.654354,0.647307,0.081029,0.525232,0.847093,0.540520,0.577650,0.119932,0.651391,0.648072,0.127138,0.548963,0.826121,0.544190,0.578780,-0.103519,0.648906,0.648989,0.093247,0.090886,0.991486,0.460270,0.578990,-0.118636,0.645198,0.649615,-0.056476,0.071667,0.995828,0.456360,0.580390,-0.119948,0.651414,0.648071,-0.126011,0.553401,0.823328,0.455800,0.578780,-0.105532,0.654366,0.647306,-0.081246,0.527973,0.845366,0.459470,0.577650,0.080149,0.658236,0.641971,-0.326303,0.420505,0.846582,0.534380,0.575470,0.090171,0.654166,0.646515,-0.217023,0.174733,0.960401,0.536570,0.577230,0.083983,0.662375,0.640624,-0.277720,0.682605,0.675960,0.535560,0.574760,0.093476,0.659335,0.645007,-0.054282,0.556468,0.829094,0.537590,0.576160,-0.080087,0.658242,0.641952,0.326289,0.421845,0.845921,0.465610,0.575470,-0.090076,0.654167,0.646487,0.217750,0.175026,0.960183,0.463420,0.577230,-0.093518,0.659351,0.645020,0.053639,0.556049,0.829417,0.462400,0.576160,-0.084314,0.662411,0.640721,0.276147,0.683936,0.675259,0.464430,0.574760,0.067164,0.659303,0.634295,-0.006131,0.889137,0.457601,0.532630,0.572950,0.072404,0.658524,0.637190,-0.196453,0.755655,0.624813,0.533250,0.574120,0.077257,0.662368,0.635880,-0.410229,0.813966,0.411304,0.534580,0.573760,-0.067432,0.659331,0.634369,0.009257,0.878823,0.477057,0.467360,0.572950,-0.072560,0.658548,0.637236,0.197177,0.750040,0.631317,0.466740,0.574120,-0.077545,0.662399,0.635965,0.404627,0.817925,0.408994,0.465410,0.573760,0.128813,0.690665,0.631977,-0.161971,-0.908770,0.384580,0.546580,0.566370,0.142019,0.683765,0.632212,-0.255538,-0.833956,0.489099,0.551220,0.567080,0.140706,0.679266,0.625044,-0.223652,-0.537881,0.812812,0.550790,0.570230,0.126831,0.685105,0.625167,-0.105232,-0.546532,0.830800,0.546430,0.569580,-0.128913,0.690684,0.632002,0.161726,-0.908863,0.384463,0.453410,0.566370,-0.126998,0.685122,0.625199,0.105166,-0.546685,0.830708,0.453560,0.569580,-0.142142,0.683788,0.632226,0.255292,-0.833858,0.489394,0.448770,0.567080,-0.140836,0.679291,0.625063,0.222967,-0.537387,0.813327,0.449200,0.570230,0.151196,0.681434,0.632555,-0.124788,-0.824478,0.551964,0.554760,0.568060,0.160445,0.678522,0.629448,-0.033552,-0.841519,0.539184,0.557500,0.568990,0.150475,0.676679,0.626545,-0.061970,-0.592478,0.803199,0.554440,0.570950,-0.151503,0.681457,0.632619,0.124531,-0.824770,0.551585,0.445230,0.568060,-0.150326,0.676696,0.626480,0.059898,-0.585616,0.808372,0.445550,0.570950,-0.160343,0.678540,0.629395,0.033152,-0.842489,0.537692,0.442490,0.568990,0.177326,0.670884,0.616043,-0.017217,-0.850899,0.525047,0.562960,0.572230,0.177619,0.671261,0.617054,-0.044380,-0.914697,0.401695,0.563060,0.571950,-0.177474,0.670884,0.616072,0.018185,-0.844858,0.534682,0.437030,0.572230,-0.177710,0.671268,0.617062,0.046328,-0.911158,0.409444,0.436930,0.571950,0.176855,0.670604,0.615461,0.137590,-0.416321,0.898747,0.562750,0.572470,0.173244,0.670912,0.616026,0.223558,0.058242,0.972949,0.561500,0.572580,0.173747,0.670200,0.616261,0.251136,0.477081,0.842214,0.561690,0.572810,0.176217,0.669816,0.615712,0.291547,0.306278,0.906197,0.562450,0.572720,-0.173354,0.670910,0.616047,-0.220349,0.073514,0.972647,0.438490,0.572580,-0.177036,0.670602,0.615501,-0.133436,-0.400628,0.906472,0.437250,0.572470,-0.173897,0.670197,0.616293,-0.244827,0.504140,0.828192,0.438310,0.572810,-0.176428,0.669813,0.615760,-0.285165,0.327234,0.900888,0.437540,0.572720,0.175094,0.668344,0.617383,0.353822,0.603930,0.714198,0.562020,0.573580,0.173899,0.666551,0.620077,0.362660,0.658702,0.659233,0.561360,0.574520,0.172125,0.669469,0.617329,0.284838,0.627971,0.724238,0.561160,0.573170,0.170671,0.668094,0.619380,0.282418,0.687116,0.669412,0.560670,0.573810,-0.175427,0.668356,0.617454,-0.354280,0.616271,0.703346,0.437980,0.573580,-0.172372,0.669481,0.617373,-0.285027,0.653688,0.701036,0.438830,0.573170,-0.174322,0.666612,0.620139,-0.372331,0.654613,0.657914,0.438630,0.574520,-0.171084,0.668159,0.619406,-0.288844,0.700063,0.653056,0.439320,0.573810,0.172150,0.664864,0.622574,0.335070,0.644141,0.687613,0.560580,0.575240,0.169981,0.663335,0.624759,0.306457,0.639640,0.704943,0.559730,0.575780,0.169155,0.666506,0.621612,0.250186,0.681746,0.687480,0.560060,0.574510,0.167334,0.665018,0.623857,0.191621,0.680323,0.707420,0.559340,0.575120,-0.172528,0.664913,0.622624,-0.349298,0.620301,0.702295,0.439410,0.575240,-0.169678,0.666557,0.621704,-0.258433,0.679336,0.686815,0.439930,0.574510,-0.170268,0.663357,0.624793,-0.324524,0.613067,0.720300,0.440270,0.575780,-0.167837,0.665052,0.623949,-0.201544,0.667171,0.717121,0.440650,0.575120,0.167587,0.662152,0.626795,0.271607,0.649940,0.709794,0.558860,0.576150,0.165532,0.661078,0.628624,0.214661,0.677491,0.703510,0.558050,0.576470,0.165331,0.663752,0.625768,0.097544,0.710794,0.696603,0.558520,0.575480,0.164081,0.662527,0.627064,0.035133,0.759111,0.650012,0.558000,0.575880,-0.165510,0.661108,0.628580,-0.206683,0.672927,0.710248,0.441940,0.576470,-0.167800,0.662176,0.626817,-0.279272,0.633156,0.721887,0.441130,0.576150,-0.165794,0.663772,0.625852,-0.101742,0.692936,0.713785,0.441470,0.575480,-0.164296,0.662535,0.627098,-0.034049,0.745332,0.665824,0.441990,0.575880,0.158019,0.658359,0.633192,0.062778,0.767058,0.638499,0.555950,0.577290,0.163085,0.659941,0.630585,0.140304,0.719508,0.680163,0.557390,0.576890,0.156687,0.660541,0.628474,-0.025916,0.778895,0.626619,0.556140,0.575930,0.161813,0.662031,0.627436,-0.029905,0.777026,0.628758,0.557460,0.575820,-0.162979,0.659964,0.630538,-0.132404,0.724378,0.676569,0.442600,0.576890,-0.157968,0.658392,0.633166,-0.060772,0.771244,0.633632,0.444040,0.577290,-0.161917,0.662037,0.627446,0.029583,0.770377,0.636902,0.442530,0.575820,-0.156661,0.660558,0.628456,0.023511,0.773294,0.633611,0.443850,0.575930,0.135135,0.654418,0.640242,0.052633,0.902751,0.426931,0.548880,0.577520,0.148237,0.655795,0.636259,0.024058,0.834460,0.550543,0.552840,0.577580,0.137230,0.656931,0.629824,-0.048061,0.846409,0.530360,0.549540,0.575630,0.147985,0.658980,0.630357,-0.060282,0.789908,0.610255,0.553290,0.575910,-0.135248,0.654440,0.640274,-0.051435,0.903675,0.425118,0.451110,0.577520,-0.148298,0.655818,0.636267,-0.023732,0.836854,0.546912,0.447150,0.577580,-0.147984,0.659013,0.630353,0.059541,0.786315,0.614951,0.446710,0.575910,-0.137062,0.656941,0.629767,0.048542,0.845985,0.530992,0.450450,0.575630,0.106778,0.658988,0.642072,0.273323,0.852869,0.444869,0.541230,0.575910,0.121386,0.655839,0.640754,0.150199,0.917238,0.368938,0.544880,0.576890,0.106122,0.660463,0.633944,0.371552,0.854109,0.363932,0.541770,0.574150,0.122841,0.656096,0.632217,0.129360,0.903293,0.409058,0.545530,0.574970,-0.106824,0.658993,0.642081,-0.271465,0.847791,0.455584,0.458760,0.575910,-0.121458,0.655855,0.640771,-0.150490,0.915932,0.372050,0.455110,0.576890,-0.123042,0.656120,0.632272,-0.131960,0.903943,0.406784,0.454460,0.574970,-0.106615,0.660516,0.634083,-0.372537,0.855978,0.358495,0.458220,0.574150,0.095858,0.663697,0.640949,0.149825,0.807039,0.571175,0.538280,0.574730,0.086820,0.665541,0.637282,-0.197416,0.793003,0.576345,0.536230,0.573670,0.088265,0.668330,0.634229,-0.124878,0.671603,0.730311,0.536530,0.572580,0.096388,0.667100,0.633948,0.324477,0.785110,0.527557,0.538710,0.573290,-0.095887,0.663714,0.640958,-0.148976,0.801101,0.579693,0.461710,0.574730,-0.096814,0.667143,0.634066,-0.322543,0.791625,0.518938,0.461280,0.573290,-0.088598,0.668364,0.634319,0.125465,0.675651,0.726467,0.463460,0.572580,-0.087193,0.665578,0.637389,0.195627,0.791784,0.578627,0.463760,0.573670,0.080327,0.665008,0.633093,-0.496605,0.697876,0.516093,0.535200,0.572930,0.075685,0.666626,0.627710,-0.559121,0.029408,0.828565,0.534590,0.571840,0.080842,0.667456,0.631245,-0.481577,0.305099,0.821583,0.535320,0.572130,-0.080672,0.665046,0.633192,0.493861,0.700114,0.515695,0.464800,0.572930,-0.081142,0.667490,0.631328,0.482791,0.296910,0.823867,0.464670,0.572130,0.124901,0.670766,0.622035,-0.001303,0.144584,0.989492,0.546270,0.572340,0.137348,0.663512,0.625223,-0.071503,0.475653,0.876722,0.550070,0.574090,0.137992,0.669244,0.623975,-0.074938,0.154664,0.985121,0.550450,0.572790,0.123290,0.662203,0.625084,0.068870,0.565914,0.821582,0.545990,0.573540,0.106601,0.663447,0.627639,0.360620,0.598637,0.715253,0.542090,0.572950,0.107048,0.670299,0.623752,0.295050,0.182809,0.937831,0.542260,0.571940,0.147908,0.663899,0.626514,-0.011425,0.487748,0.872910,0.553720,0.574480,0.148446,0.668319,0.624649,0.033481,0.247887,0.968210,0.554070,0.573250,0.156575,0.663773,0.625728,0.060190,0.554614,0.829928,0.556480,0.574790,0.157326,0.667220,0.623962,0.130418,0.381882,0.914963,0.556840,0.573780,-0.137573,0.663538,0.625270,0.073664,0.472510,0.878242,0.449920,0.574090,-0.125088,0.670782,0.622067,0.000961,0.141926,0.989877,0.453730,0.572340,-0.138496,0.669272,0.624081,0.076306,0.158286,0.984440,0.449540,0.572790,-0.123145,0.662205,0.625036,-0.070650,0.565988,0.821381,0.454010,0.573540,-0.107357,0.670324,0.623834,-0.291752,0.183893,0.938650,0.457730,0.571940,-0.106663,0.663454,0.627648,-0.366068,0.604818,0.707241,0.457900,0.572950,-0.148301,0.663941,0.626599,0.011215,0.478327,0.878110,0.446270,0.574480,-0.156977,0.663799,0.625800,-0.061725,0.539284,0.839859,0.443510,0.574790,-0.148979,0.668359,0.624763,-0.033030,0.256253,0.966045,0.445930,0.573250,-0.157925,0.667268,0.624092,-0.129816,0.388766,0.912145,0.443150,0.573780,0.108703,0.677714,0.623370,0.247120,-0.176337,0.952805,0.542300,0.570800,0.125594,0.677998,0.623171,-0.033675,-0.162774,0.986089,0.546380,0.571140,0.139066,0.674186,0.623875,-0.099808,-0.135621,0.985721,0.550630,0.571630,0.158497,0.670565,0.622738,0.236724,0.132819,0.962456,0.557120,0.572790,0.149277,0.672453,0.624075,0.039376,-0.095982,0.994604,0.554260,0.572160,-0.125810,0.678016,0.623226,0.033240,-0.160797,0.986428,0.453610,0.571140,-0.108743,0.677719,0.623377,-0.244061,-0.169375,0.954854,0.457690,0.570800,-0.139031,0.674206,0.623845,0.099076,-0.129413,0.986629,0.449360,0.571630,-0.158747,0.670617,0.622782,-0.235164,0.168859,0.957175,0.442880,0.572790,-0.149475,0.672475,0.624117,-0.041812,-0.073791,0.996397,0.445730,0.572160,0.096836,0.670017,0.630484,0.416636,0.510664,0.752088,0.538950,0.572390,0.097221,0.672994,0.629014,0.442294,0.164024,0.881744,0.539080,0.571640,0.088788,0.670695,0.633058,-0.004966,0.350342,0.936609,0.536650,0.571940,0.089194,0.672831,0.632688,0.100573,0.093516,0.990525,0.536720,0.571460,0.080385,0.669230,0.630736,-0.282929,-0.124922,0.950971,0.535220,0.571670,0.080390,0.670764,0.630995,-0.092025,-0.268452,0.958887,0.535160,0.571340,0.097534,0.676263,0.628613,0.464459,-0.187203,0.865582,0.539100,0.570770,0.089794,0.675366,0.632561,0.237226,-0.267145,0.934001,0.536810,0.570880,0.081789,0.672916,0.631390,0.093424,-0.484718,0.869667,0.535420,0.571000,-0.096978,0.670039,0.630521,-0.415156,0.530540,0.739035,0.461040,0.572390,-0.097286,0.673014,0.629028,-0.434230,0.177804,0.883080,0.460920,0.571640,-0.089125,0.672831,0.632658,-0.096077,0.105160,0.989803,0.463280,0.571460,-0.088884,0.670712,0.633079,0.008813,0.366035,0.930559,0.463340,0.571940,-0.080340,0.670769,0.630972,0.089938,-0.269960,0.958662,0.464830,0.571340,-0.080482,0.669248,0.630759,0.282012,-0.127715,0.950872,0.464770,0.571670,-0.097532,0.676274,0.628602,-0.460578,-0.180582,0.869056,0.460890,0.570770,-0.089725,0.675362,0.632533,-0.237216,-0.268641,0.933574,0.463180,0.570880,-0.081768,0.672917,0.631374,-0.101820,-0.496635,0.861966,0.464570,0.571000,0.163822,0.666463,0.623584,0.157931,0.556789,0.815503,0.558490,0.574440,0.162411,0.664117,0.625228,0.029156,0.644892,0.763717,0.557910,0.575080,-0.164432,0.666502,0.623717,-0.159552,0.556074,0.815675,0.441500,0.574440,-0.162889,0.664149,0.625306,-0.029595,0.631023,0.775200,0.442080,0.575080,0.166777,0.670230,0.619341,0.412194,0.447259,0.793760,0.559580,0.573030,0.165189,0.668518,0.621588,0.298377,0.487714,0.820431,0.558980,0.573660,-0.167236,0.670278,0.619416,-0.412617,0.486457,0.770134,0.440410,0.573030,-0.165666,0.668576,0.621676,-0.297239,0.507267,0.808906,0.441010,0.573660,0.138639,0.514848,0.675034,0.686651,-0.026778,0.726493,0.541080,0.621250,0.144036,0.538859,0.666669,0.723189,0.079943,0.686007,0.544160,0.614730,0.128072,0.528942,0.683839,0.619139,0.050195,0.783675,0.537700,0.616450,0.153615,0.523083,0.656779,0.791195,-0.005276,0.611541,0.547860,0.619890,0.124046,0.506734,0.684850,0.505384,-0.145695,0.850506,0.536030,0.623230,0.115124,0.519991,0.691887,0.443696,-0.082282,0.892392,0.533650,0.618640,0.166549,0.543929,0.640922,0.756851,-0.044350,0.652081,0.555060,0.614820,0.189245,0.547917,0.614133,0.769093,-0.184162,0.612030,0.567400,0.615550,0.171070,0.527624,0.632195,0.809879,-0.120638,0.574057,0.557260,0.620530,0.190333,0.531509,0.605801,0.796407,-0.235299,0.557109,0.567970,0.621990,-0.138675,0.514850,0.675044,-0.686517,-0.027215,0.726605,0.458910,0.621250,-0.144065,0.538858,0.666677,-0.722948,0.079495,0.686314,0.455830,0.614730,-0.153643,0.523083,0.656786,-0.791075,-0.005234,0.611697,0.452140,0.619890,-0.128108,0.528945,0.683849,-0.618871,0.050266,0.783883,0.462290,0.616450,-0.115145,0.519993,0.691893,-0.443284,-0.082574,0.892570,0.466340,0.618640,-0.124051,0.506735,0.684851,-0.504994,-0.146190,0.850653,0.463960,0.623230,-0.166574,0.543930,0.640929,-0.756326,-0.045329,0.652623,0.444930,0.614820,-0.171115,0.527624,0.632206,-0.808844,-0.120015,0.575646,0.442730,0.620530,-0.189246,0.547921,0.614132,-0.766808,-0.183944,0.614955,0.432590,0.615550,-0.190553,0.531505,0.605856,-0.793900,-0.235449,0.560612,0.432020,0.621990,0.110633,0.501049,0.689751,0.316982,-0.254505,0.913646,0.531620,0.624810,0.102370,0.513445,0.695284,0.296947,-0.194408,0.934894,0.529800,0.620570,-0.110635,0.501049,0.689752,-0.316873,-0.254571,0.913665,0.468370,0.624810,-0.102378,0.513446,0.695286,-0.296786,-0.194577,0.934911,0.470190,0.620570,0.106151,0.486997,0.685879,0.136209,-0.399747,0.906449,0.530050,0.629940,0.117810,0.489362,0.683719,0.350154,-0.292965,0.889699,0.533320,0.628790,0.131570,0.494885,0.677959,0.564667,-0.187020,0.803850,0.537500,0.627390,0.124248,0.477624,0.677137,0.392839,-0.320343,0.862008,0.534950,0.632920,0.137089,0.483520,0.670589,0.623810,-0.220291,0.749888,0.538670,0.631520,0.112161,0.475488,0.679410,0.163503,-0.403520,0.900244,0.532150,0.634000,0.102553,0.476643,0.680780,0.244108,-0.319256,0.915689,0.529290,0.634860,0.096727,0.487362,0.686236,0.164717,-0.361113,0.917859,0.527460,0.631050,0.093136,0.477023,0.684977,0.426869,-0.107750,0.897871,0.526090,0.635430,0.087692,0.486743,0.688737,0.320148,-0.191968,0.927714,0.524830,0.632010,-0.106158,0.486996,0.685881,-0.136293,-0.399634,0.906486,0.469940,0.629940,-0.117816,0.489362,0.683721,-0.349973,-0.292904,0.889790,0.466670,0.628790,-0.112169,0.475485,0.679411,-0.163130,-0.403676,0.900241,0.467840,0.634000,-0.124253,0.477623,0.677138,-0.392449,-0.320085,0.862282,0.465040,0.632920,-0.131584,0.494886,0.677963,-0.564315,-0.187185,0.804058,0.462490,0.627390,-0.137112,0.483514,0.670597,-0.623669,-0.220013,0.750087,0.461320,0.631520,-0.102563,0.476637,0.680782,-0.242172,-0.321241,0.915509,0.470700,0.634860,-0.096736,0.487360,0.686238,-0.164145,-0.361586,0.917776,0.472530,0.631050,-0.087692,0.486745,0.688733,-0.319623,-0.193068,0.927667,0.475160,0.632010,-0.093123,0.477025,0.684960,-0.425134,-0.112297,0.898137,0.473910,0.635430,0.150793,0.491149,0.658182,0.787099,-0.152814,0.597597,0.544490,0.629810,0.159882,0.509606,0.647512,0.839157,-0.071693,0.539143,0.550250,0.624500,0.146053,0.502583,0.666482,0.741736,-0.095837,0.663810,0.543130,0.625600,0.163407,0.497040,0.638874,0.865703,-0.138871,0.480909,0.551820,0.628900,-0.150806,0.491149,0.658186,-0.787141,-0.152815,0.597543,0.455510,0.629810,-0.159903,0.509606,0.647517,-0.838863,-0.072352,0.539513,0.449740,0.624500,-0.163428,0.497040,0.638879,-0.865359,-0.139624,0.481310,0.448180,0.628900,-0.146079,0.502582,0.666489,-0.741665,-0.096203,0.663836,0.456860,0.625600,0.173850,0.513139,0.623110,0.842940,-0.158961,0.513987,0.558850,0.625470,0.191515,0.516483,0.597220,0.815952,-0.258041,0.517337,0.568720,0.627150,0.176175,0.499426,0.614387,0.858131,-0.201914,0.472062,0.560250,0.630130,0.192467,0.502496,0.588118,0.829871,-0.276637,0.484547,0.569970,0.631880,-0.173923,0.513140,0.623128,-0.841660,-0.161057,0.515431,0.441140,0.625470,-0.176221,0.499429,0.614397,-0.857169,-0.204009,0.472907,0.439740,0.630130,-0.191673,0.516491,0.597255,-0.813458,-0.262361,0.519088,0.431270,0.627150,-0.192578,0.502494,0.588145,-0.827986,-0.280870,0.485336,0.430030,0.631880,0.209816,0.536650,0.580278,0.811975,-0.280852,0.511682,0.578450,0.622750,0.226139,0.560141,0.565247,0.860457,-0.224328,0.457482,0.587460,0.614850,0.209423,0.553221,0.589386,0.802335,-0.239329,0.546791,0.577800,0.615450,0.226914,0.543232,0.554581,0.862629,-0.261481,0.433012,0.588950,0.622910,0.209911,0.508513,0.561463,0.829458,-0.309946,0.464686,0.580990,0.631910,0.226843,0.528697,0.544465,0.860831,-0.289178,0.418744,0.590670,0.627600,0.209804,0.521892,0.570853,0.821452,-0.303423,0.482856,0.579520,0.627740,0.227233,0.516387,0.534964,0.863278,-0.296999,0.408097,0.592520,0.631140,-0.210210,0.536672,0.580365,-0.813137,-0.280249,0.510165,0.421540,0.622750,-0.226398,0.560161,0.565295,-0.860092,-0.231188,0.454746,0.412530,0.614850,-0.226800,0.543245,0.554535,-0.863570,-0.263312,0.430016,0.411040,0.622910,-0.209768,0.553228,0.589466,-0.801323,-0.240664,0.547688,0.422190,0.615450,-0.210140,0.508511,0.561520,-0.828563,-0.313894,0.463632,0.419000,0.631910,-0.226979,0.528704,0.544495,-0.862754,-0.284837,0.417760,0.409320,0.627600,-0.227416,0.516400,0.535001,-0.863846,-0.298050,0.406123,0.407470,0.631140,-0.210099,0.521910,0.570921,-0.822049,-0.303589,0.481736,0.420470,0.627740,0.239837,0.551414,0.529194,0.913719,-0.208419,0.348826,0.600010,0.622520,0.248334,0.579417,0.519558,0.948081,-0.131428,0.289602,0.607950,0.612380,0.238924,0.568752,0.541331,0.912285,-0.183624,0.366084,0.597960,0.614060,0.249511,0.561816,0.506375,0.949427,-0.154811,0.273171,0.610420,0.620990,-0.239957,0.551439,0.529223,-0.911919,-0.215441,0.349269,0.399980,0.622520,-0.248711,0.579444,0.519581,-0.945916,-0.133591,0.295628,0.392040,0.612380,-0.249775,0.561854,0.506430,-0.947775,-0.167291,0.271543,0.389570,0.620990,-0.239326,0.568805,0.541412,-0.911614,-0.188967,0.365036,0.402030,0.614060,0.240538,0.537107,0.518630,0.913027,-0.233373,0.334544,0.601810,0.627130,0.250086,0.547423,0.495240,0.950340,-0.178443,0.254974,0.612220,0.625920,0.241053,0.525302,0.508459,0.915029,-0.254113,0.313286,0.603900,0.630640,0.250265,0.535197,0.484149,0.950516,-0.209453,0.229452,0.614530,0.629960,-0.240643,0.537108,0.518649,-0.912844,-0.233582,0.334896,0.398180,0.627130,-0.241154,0.525318,0.508478,-0.915738,-0.253477,0.311725,0.396090,0.630640,-0.250196,0.547441,0.495250,-0.950514,-0.184754,0.249776,0.387770,0.625920,-0.250272,0.535206,0.484144,-0.951713,-0.207158,0.226556,0.385470,0.629960,0.254499,0.592739,0.501547,0.966353,-0.089526,0.241139,0.615620,0.609090,0.255898,0.575390,0.487680,0.969391,-0.114982,0.216934,0.618610,0.617820,0.259264,0.609173,0.487049,0.972836,-0.072538,0.219835,0.622240,0.604260,0.260875,0.593143,0.472375,0.977336,-0.092835,0.190251,0.626000,0.612640,-0.256344,0.575459,0.487791,-0.970672,-0.123411,0.206313,0.381380,0.617820,-0.255458,0.592822,0.501709,-0.965996,-0.091139,0.241962,0.384370,0.609090,-0.260891,0.593160,0.472351,-0.979585,-0.092294,0.178592,0.374000,0.612640,-0.259568,0.609195,0.487094,-0.975730,-0.080378,0.203694,0.377750,0.604260,0.261690,0.579107,0.459424,0.980037,-0.111517,0.164594,0.629170,0.618950,0.256545,0.560615,0.475789,0.971349,-0.135520,0.195233,0.620860,0.623620,0.261943,0.566567,0.446678,0.981376,-0.129545,0.141841,0.632520,0.624610,0.256972,0.547532,0.463960,0.971539,-0.163158,0.171730,0.623550,0.628730,-0.262006,0.566584,0.446672,-0.980738,-0.131258,0.144655,0.367480,0.624610,-0.256767,0.547539,0.463905,-0.971099,-0.164115,0.173300,0.376440,0.628730,-0.256543,0.560624,0.475767,-0.971491,-0.143678,0.188577,0.379130,0.623620,-0.261925,0.579127,0.459444,-0.980156,-0.113907,0.162232,0.370820,0.618950,0.265139,0.615680,0.459358,0.979814,-0.078394,0.183902,0.634140,0.605060,0.263077,0.628851,0.475251,0.976184,-0.070537,0.205157,0.629120,0.597990,0.265750,0.650972,0.468518,0.978860,-0.058597,0.195956,0.633890,0.590310,0.268590,0.641650,0.451575,0.979913,-0.066528,0.188004,0.640090,0.595590,-0.265279,0.615710,0.459369,-0.981921,-0.071476,0.175277,0.365860,0.605060,-0.263184,0.628875,0.475228,-0.981800,-0.065043,0.178435,0.370870,0.597990,-0.268158,0.641630,0.451423,-0.982679,-0.060398,0.175197,0.359900,0.595590,-0.265501,0.650974,0.468448,-0.982795,-0.053837,0.176681,0.366100,0.590310,0.270014,0.669140,0.452654,0.981225,-0.048628,0.186633,0.640840,0.584930,0.266824,0.674451,0.470067,0.978545,-0.047495,0.200485,0.634070,0.581340,0.266833,0.699129,0.477966,0.976649,-0.007678,0.214704,0.631600,0.571510,0.269283,0.698174,0.460601,0.981903,-0.007268,0.189244,0.638590,0.573310,-0.269465,0.669160,0.452522,-0.982624,-0.048795,0.179081,0.359150,0.584930,-0.267086,0.674483,0.470074,-0.979855,-0.039394,0.195786,0.365920,0.581340,-0.269330,0.698195,0.460590,-0.980906,-0.010448,0.194201,0.361400,0.573310,-0.265822,0.699118,0.477781,-0.976032,-0.000484,0.217627,0.368390,0.571510,0.266761,0.728840,0.472057,0.974326,0.040988,0.221378,0.635610,0.560840,0.263050,0.724694,0.488713,0.967298,0.053598,0.247915,0.628460,0.561160,0.256765,0.749722,0.504315,0.945944,0.103458,0.307386,0.623220,0.550680,0.260564,0.758530,0.488827,0.952991,0.085140,0.290792,0.630010,0.548380,-0.266400,0.728846,0.471922,-0.971853,0.032443,0.233342,0.364380,0.560840,-0.262718,0.724715,0.488610,-0.965936,0.045127,0.254817,0.371530,0.561160,-0.260430,0.758569,0.488771,-0.950955,0.073461,0.300481,0.369980,0.548380,-0.256150,0.749769,0.504128,-0.946843,0.100846,0.305481,0.376770,0.550680,0.248576,0.783575,0.514329,0.938959,0.095725,0.330443,0.619950,0.537020,0.244605,0.771757,0.527380,0.940450,0.117467,0.318991,0.614490,0.540600,0.233202,0.787582,0.558665,0.948828,0.107795,0.296826,0.602840,0.533020,0.235261,0.800990,0.548044,0.944689,0.092980,0.314511,0.606850,0.528660,-0.248388,0.783580,0.514261,-0.939147,0.087634,0.332150,0.380040,0.537020,-0.244463,0.771767,0.527323,-0.944471,0.115627,0.307580,0.385500,0.540600,-0.235190,0.800979,0.548038,-0.946211,0.098211,0.308286,0.393140,0.528660,-0.233732,0.787642,0.558821,-0.950891,0.111610,0.288704,0.397150,0.533020,0.222895,0.809945,0.583953,0.922651,0.134661,0.361360,0.592450,0.524850,0.221902,0.795395,0.593149,0.916149,0.137462,0.376530,0.589140,0.529830,0.206082,0.798173,0.622267,0.819297,0.171391,0.547154,0.576570,0.528830,0.207932,0.814383,0.614819,0.831745,0.197495,0.518840,0.579340,0.523380,-0.223014,0.809957,0.583979,-0.924379,0.143307,0.353534,0.407540,0.524850,-0.222689,0.795432,0.593379,-0.917142,0.130843,0.376471,0.410850,0.529830,-0.208609,0.814432,0.615008,-0.833349,0.199433,0.515516,0.420650,0.523380,-0.206549,0.798195,0.622383,-0.821173,0.154941,0.549243,0.423420,0.528830,0.189250,0.817286,0.637271,0.697553,0.242587,0.674220,0.569280,0.521830,0.188497,0.799862,0.642783,0.689061,0.183353,0.701126,0.567510,0.527640,0.168671,0.800972,0.658552,0.561255,0.183189,0.807115,0.558960,0.526530,0.168233,0.819199,0.654938,0.565393,0.250693,0.785801,0.559710,0.520530,-0.189960,0.817358,0.637462,-0.695622,0.242724,0.676162,0.430710,0.521830,-0.188872,0.799889,0.642887,-0.689214,0.170035,0.704324,0.432480,0.527640,-0.168601,0.819240,0.655038,-0.561908,0.251348,0.788089,0.440280,0.520530,-0.169080,0.801017,0.658666,-0.560655,0.178174,0.808653,0.441030,0.526530,0.141248,0.818006,0.671233,0.431124,0.238294,0.870257,0.548750,0.520250,0.142415,0.799537,0.673975,0.436405,0.187456,0.880006,0.548530,0.526170,0.110541,0.794029,0.688455,0.314381,0.193860,0.929292,0.536850,0.527190,0.108971,0.812803,0.685171,0.298566,0.235516,0.924873,0.536880,0.521260,-0.141517,0.818023,0.671300,-0.429408,0.239100,0.870885,0.451240,0.520250,-0.142628,0.799562,0.674033,-0.435503,0.187870,0.880365,0.451460,0.526170,-0.109157,0.812825,0.685220,-0.296865,0.236497,0.925171,0.463110,0.521260,-0.110899,0.794075,0.688550,-0.312444,0.193571,0.930005,0.463140,0.527190,0.042632,0.774337,0.705883,0.042044,0.190318,0.980822,0.513280,0.533720,0.075377,0.784423,0.700476,0.181513,0.192108,0.964442,0.524390,0.530230,0.042495,0.795791,0.700741,0.042975,0.229379,0.972388,0.513160,0.526830,0.074046,0.804175,0.695517,0.164708,0.241010,0.956444,0.524310,0.523860,-0.042847,0.774357,0.705922,-0.042531,0.189698,0.980921,0.486710,0.533720,-0.075419,0.784429,0.700479,-0.181164,0.191008,0.964726,0.475600,0.530230,-0.074062,0.804178,0.695505,-0.163870,0.241573,0.956446,0.475680,0.523860,-0.042761,0.795818,0.700793,-0.043254,0.229629,0.972317,0.486830,0.526830,0.018941,0.791033,0.701416,-0.019576,0.207474,0.978045,0.505680,0.528620,0.018540,0.768785,0.706062,-0.037007,0.185379,0.981970,0.505770,0.535630,-0.000010,0.767265,0.705747,0.000285,0.178587,0.983924,0.500000,0.536170,-0.000025,0.789620,0.701130,0.000231,0.198327,0.980136,0.500000,0.529180,-0.019000,0.791035,0.701421,0.020458,0.207409,0.978040,0.494310,0.528620,-0.018560,0.768785,0.706059,0.037621,0.185266,0.981968,0.494230,0.535630,0.081108,0.475457,0.690954,0.438028,0.069914,0.896238,0.522350,0.635520,0.076077,0.483943,0.692691,0.358864,-0.020566,0.933163,0.521560,0.632590,0.066723,0.473478,0.698383,0.416570,0.207708,0.885057,0.518390,0.635350,0.061920,0.480362,0.698453,0.381978,0.155995,0.910911,0.517970,0.632960,-0.081118,0.475430,0.690928,-0.433613,0.057195,0.899282,0.477640,0.635520,-0.076078,0.483943,0.692685,-0.357453,-0.026516,0.933555,0.478430,0.632590,-0.061899,0.480351,0.698409,-0.379423,0.140217,0.914537,0.482020,0.632960,-0.066607,0.473426,0.698155,-0.413028,0.186896,0.891335,0.481600,0.635350,0.052449,0.471635,0.705450,0.403265,0.261445,0.876940,0.514520,0.635140,0.049068,0.477522,0.705210,0.400605,0.252517,0.880767,0.514350,0.633220,0.041327,0.470050,0.711045,0.372124,0.242223,0.896020,0.511210,0.635030,0.039190,0.475112,0.710478,0.388757,0.244963,0.888178,0.511180,0.633480,-0.052319,0.471576,0.705167,-0.400057,0.243849,0.883455,0.485470,0.635140,-0.048964,0.477504,0.705006,-0.398085,0.229233,0.888246,0.485640,0.633220,-0.039069,0.475025,0.710146,-0.389685,0.215698,0.895332,0.488810,0.633480,-0.041114,0.469971,0.710572,-0.365829,0.225837,0.902866,0.488780,0.635030,0.032325,0.473096,0.713742,0.291533,0.162587,0.942642,0.508960,0.633870,0.033618,0.468627,0.714256,0.246647,0.176724,0.952856,0.508920,0.635170,0.027178,0.467607,0.715296,0.078108,0.082861,0.993495,0.507170,0.635330,0.026361,0.471713,0.715083,0.147020,0.036898,0.988445,0.507230,0.634210,-0.032172,0.473033,0.713380,-0.305702,0.132743,0.942829,0.491030,0.633870,-0.026252,0.471664,0.714814,-0.167354,0.012498,0.985818,0.492760,0.634210,-0.027015,0.467544,0.714915,-0.101986,0.067594,0.992487,0.492820,0.635330,-0.033351,0.468566,0.713733,-0.257211,0.156887,0.953535,0.491070,0.635170,0.020169,0.470766,0.715566,0.027750,-0.095399,0.995052,0.505480,0.634340,0.020589,0.466808,0.715362,-0.048171,-0.012632,0.998759,0.505400,0.635290,0.013625,0.470062,0.715213,-0.052136,-0.221975,0.973657,0.503660,0.634410,0.013802,0.466216,0.714495,-0.125550,-0.106527,0.986351,0.503570,0.635240,-0.020060,0.470756,0.715374,-0.045714,-0.111104,0.992757,0.494510,0.634340,-0.013570,0.470064,0.715146,0.038660,-0.226511,0.973241,0.496330,0.634410,-0.020449,0.466796,0.715105,0.025429,-0.018802,0.999500,0.494590,0.635290,-0.013748,0.466204,0.714435,0.108819,-0.106780,0.988310,0.496420,0.635240,0.006951,0.469634,0.714599,-0.064975,-0.322994,0.944168,0.501790,0.634590,0.006977,0.465882,0.713429,-0.123375,-0.192758,0.973459,0.501730,0.635350,0.000038,0.469429,0.714080,-0.000346,-0.365485,0.930817,0.500000,0.634710,0.000021,0.465748,0.712611,0.000124,-0.232815,0.972521,0.500000,0.635450,-0.006923,0.469642,0.714582,0.060940,-0.322269,0.944685,0.498200,0.634590,-0.006920,0.465876,0.713447,0.119009,-0.191624,0.974226,0.498260,0.635350,0.000047,0.461921,0.712068,0.000287,-0.028501,0.999594,0.500000,0.636240,0.007047,0.457158,0.713322,-0.186003,0.162170,0.969074,0.501610,0.637370,0.007039,0.461940,0.712973,-0.167288,-0.005238,0.985894,0.501650,0.636140,0.000057,0.457105,0.712408,0.000075,0.158773,0.987315,0.500000,0.637470,0.013955,0.462195,0.714485,-0.181227,0.050543,0.982142,0.503450,0.636030,0.014115,0.457345,0.715159,-0.220700,0.189480,0.956760,0.503360,0.637250,-0.006921,0.457141,0.713347,0.177699,0.162030,0.970654,0.498380,0.637370,-0.006978,0.461941,0.712963,0.160685,-0.006996,0.986981,0.498340,0.636140,-0.013953,0.457401,0.714958,0.206962,0.190485,0.959626,0.496630,0.637250,-0.013890,0.462172,0.714418,0.164665,0.047629,0.985199,0.496540,0.636030,0.141864,0.471195,0.662386,0.674487,-0.227152,0.702474,0.540170,0.635990,0.154282,0.478962,0.650025,0.825990,-0.168176,0.538012,0.545740,0.634190,0.164920,0.484051,0.629934,0.881995,-0.175124,0.437512,0.552930,0.633390,0.157003,0.463961,0.640455,0.859715,-0.182051,0.477230,0.547090,0.639330,0.166280,0.468967,0.620308,0.895743,-0.184295,0.404573,0.554020,0.638620,0.146245,0.455888,0.653120,0.727628,-0.237639,0.643494,0.541900,0.641230,0.178908,0.470089,0.594152,0.870240,-0.238354,0.431127,0.563410,0.640640,0.193095,0.488511,0.577755,0.839805,-0.283865,0.462762,0.571950,0.636940,0.177785,0.485641,0.605023,0.863793,-0.234051,0.446186,0.561800,0.634970,0.194368,0.472704,0.566020,0.848093,-0.279987,0.449828,0.574100,0.642930,-0.141882,0.471188,0.662392,-0.674706,-0.227094,0.702282,0.459820,0.635990,-0.154310,0.478961,0.650033,-0.826021,-0.168209,0.537954,0.454250,0.634190,-0.157017,0.463960,0.640458,-0.859756,-0.182080,0.477145,0.452900,0.639330,-0.146252,0.455886,0.653118,-0.729006,-0.235079,0.642875,0.458090,0.641230,-0.164927,0.484051,0.629936,-0.881757,-0.175366,0.437894,0.447060,0.633390,-0.166306,0.468961,0.620321,-0.895563,-0.184914,0.404689,0.445970,0.638620,-0.178942,0.470089,0.594160,-0.869954,-0.239387,0.431132,0.436580,0.640640,-0.193138,0.488511,0.577765,-0.838801,-0.287058,0.462613,0.428040,0.636940,-0.194399,0.472703,0.566028,-0.847855,-0.281398,0.449397,0.425890,0.642930,-0.177840,0.485642,0.605036,-0.863286,-0.235157,0.446585,0.438190,0.634970,0.106295,0.453748,0.673299,0.557458,-0.174318,0.811698,0.529590,0.642380,0.116926,0.462535,0.672855,0.236882,-0.382977,0.892870,0.533520,0.638690,0.106098,0.465657,0.675818,0.381341,-0.252313,0.889335,0.530050,0.638740,0.119157,0.445656,0.663802,0.362416,-0.371069,0.854964,0.534450,0.644570,0.094852,0.457178,0.683383,0.616605,0.004054,0.787262,0.525470,0.640950,0.095780,0.467502,0.682651,0.536061,-0.048201,0.842802,0.526260,0.638290,0.129409,0.464418,0.669680,0.430548,-0.335002,0.838094,0.536510,0.637640,0.134000,0.448504,0.660928,0.461066,-0.350469,0.815224,0.538210,0.643020,-0.116929,0.462535,0.672853,-0.236034,-0.383340,0.892938,0.466470,0.638690,-0.106314,0.453737,0.673286,-0.555369,-0.172736,0.813466,0.470400,0.642380,-0.106092,0.465654,0.675805,-0.377904,-0.254394,0.890209,0.469940,0.638740,-0.119191,0.445647,0.663784,-0.359850,-0.370472,0.856305,0.465540,0.644570,-0.095740,0.467495,0.682579,-0.531978,-0.055045,0.844967,0.473730,0.638290,-0.094776,0.457175,0.683258,-0.611688,0.006385,0.791073,0.474520,0.640950,-0.129457,0.464401,0.669690,-0.430290,-0.335057,0.838205,0.463480,0.637640,-0.134029,0.448495,0.660927,-0.461357,-0.347319,0.816407,0.461780,0.643020,0.000049,0.450296,0.714173,-0.000617,0.303122,0.952952,0.500000,0.639710,0.007226,0.442361,0.718076,-0.171184,0.395378,0.902426,0.501620,0.642210,0.007149,0.450662,0.714924,-0.183590,0.292765,0.938394,0.501610,0.639600,0.000070,0.441660,0.717600,-0.000836,0.411422,0.911445,0.500000,0.642350,0.014149,0.451325,0.716707,-0.240966,0.286972,0.927137,0.503310,0.639440,0.014250,0.443770,0.719363,-0.235361,0.368458,0.899357,0.503280,0.641960,-0.007170,0.442358,0.718081,0.169407,0.396736,0.902165,0.498370,0.642210,-0.007059,0.450677,0.714893,0.178301,0.294140,0.938984,0.498380,0.639600,-0.014136,0.443782,0.719333,0.231040,0.372371,0.898866,0.496710,0.641960,-0.014062,0.451341,0.716632,0.232177,0.294009,0.927175,0.496680,0.639440,0.021067,0.458051,0.716434,-0.141475,0.235343,0.961561,0.505220,0.637300,0.020872,0.462745,0.715459,-0.099909,0.109583,0.988944,0.505320,0.636100,0.027752,0.463655,0.715712,0.036268,0.159501,0.986531,0.507160,0.636250,0.028149,0.459035,0.716782,0.012734,0.263720,0.964515,0.507060,0.637480,0.020971,0.445264,0.720621,-0.165192,0.345755,0.923669,0.504890,0.641750,0.021051,0.452223,0.718199,-0.173230,0.306317,0.936035,0.505040,0.639390,0.028289,0.453094,0.718818,0.010384,0.315779,0.948776,0.506780,0.639470,0.028077,0.446331,0.721285,0.039312,0.312598,0.949072,0.506510,0.641680,-0.020951,0.457991,0.716241,0.119829,0.238311,0.963768,0.494770,0.637300,-0.020763,0.462702,0.715215,0.077061,0.109878,0.990953,0.494670,0.636100,-0.027967,0.458960,0.716345,-0.035480,0.268513,0.962622,0.492930,0.637480,-0.027571,0.463585,0.715288,-0.061602,0.159487,0.985276,0.492830,0.636250,-0.020907,0.445266,0.720577,0.155001,0.356908,0.921190,0.495100,0.641750,-0.020908,0.452218,0.718008,0.154921,0.319155,0.934954,0.494950,0.639390,-0.027947,0.446323,0.721145,-0.046835,0.333032,0.941751,0.493480,0.641680,-0.028062,0.453061,0.718337,-0.025060,0.334490,0.942066,0.493210,0.639470,0.035637,0.459913,0.715692,0.218612,0.268026,0.938281,0.508930,0.637700,0.043095,0.465475,0.711477,0.363094,0.250256,0.897516,0.511290,0.636390,0.034756,0.464624,0.714735,0.225574,0.210600,0.951191,0.508970,0.636310,0.044493,0.460275,0.712558,0.366965,0.255202,0.894544,0.511270,0.637980,0.054653,0.466563,0.706078,0.408806,0.255793,0.876041,0.514550,0.636630,0.068925,0.467434,0.698852,0.453306,0.206175,0.867183,0.518370,0.637050,0.056178,0.460460,0.707117,0.426409,0.224886,0.876129,0.514420,0.638350,0.069726,0.460264,0.700416,0.484246,0.176136,0.857019,0.518010,0.638930,-0.042929,0.465403,0.711073,-0.353286,0.246095,0.902566,0.488710,0.636390,-0.035418,0.459801,0.715139,-0.216525,0.275186,0.936691,0.491060,0.637700,-0.034549,0.464476,0.714125,-0.228902,0.208463,0.950867,0.491020,0.636310,-0.044413,0.460120,0.712132,-0.359644,0.260725,0.895923,0.488730,0.637980,-0.054537,0.466439,0.705727,-0.408977,0.243001,0.879595,0.485440,0.636630,-0.055926,0.460381,0.706653,-0.427866,0.227034,0.874863,0.485570,0.638350,-0.068732,0.467346,0.698486,-0.447947,0.187957,0.874080,0.481620,0.637050,-0.069474,0.460157,0.699958,-0.477838,0.177644,0.860299,0.481980,0.638930,0.158553,0.445395,0.628956,0.881831,-0.200186,0.426966,0.548670,0.645870,0.167293,0.450512,0.608833,0.903212,-0.202587,0.378373,0.555410,0.645290,0.159037,0.426200,0.618332,0.895238,-0.208627,0.393732,0.549990,0.652630,0.167237,0.430551,0.597048,0.909278,-0.214428,0.356699,0.556740,0.652560,0.149776,0.420871,0.633184,0.805259,-0.254650,0.535454,0.545140,0.653940,0.148599,0.438012,0.642381,0.778085,-0.246363,0.577832,0.543770,0.647700,0.179461,0.431054,0.569669,0.877200,-0.256164,0.406080,0.566070,0.655660,0.194947,0.454319,0.553014,0.853836,-0.283774,0.436389,0.575820,0.650460,0.179737,0.451324,0.582003,0.874085,-0.249558,0.416768,0.564910,0.647840,0.194860,0.434441,0.540158,0.860547,-0.280064,0.425468,0.577010,0.658550,-0.158575,0.445394,0.628951,-0.882051,-0.198372,0.427358,0.451320,0.645870,-0.167291,0.450514,0.608828,-0.903503,-0.201054,0.378496,0.444580,0.645290,-0.148638,0.438000,0.642396,-0.780635,-0.243218,0.575720,0.456220,0.647700,-0.149872,0.420846,0.633208,-0.806746,-0.254088,0.533479,0.454850,0.653940,-0.159104,0.426184,0.618337,-0.895408,-0.207321,0.394034,0.450000,0.652630,-0.167360,0.430515,0.597112,-0.909790,-0.212973,0.356264,0.443250,0.652560,-0.179474,0.431050,0.569675,-0.877888,-0.255247,0.405169,0.433920,0.655660,-0.194950,0.454319,0.553015,-0.853832,-0.284204,0.436119,0.424170,0.650460,-0.194860,0.434441,0.540158,-0.860604,-0.280057,0.425356,0.422980,0.658550,-0.179743,0.451323,0.582005,-0.874436,-0.249064,0.416329,0.435090,0.647840,0.083161,0.467542,0.690923,0.510219,0.097076,0.854548,0.522330,0.637670,0.082365,0.458921,0.692357,0.555941,0.107124,0.824290,0.521670,0.639810,-0.083122,0.467502,0.690816,-0.502189,0.083403,0.860727,0.477660,0.637670,-0.082239,0.458880,0.692140,-0.546588,0.108376,0.830359,0.478320,0.639810,0.000068,0.433349,0.721925,-0.002411,0.424035,0.905643,0.500000,0.644770,0.008071,0.426477,0.725773,-0.100987,0.218440,0.970611,0.501730,0.646460,0.007586,0.434106,0.722364,-0.149396,0.411307,0.899170,0.501670,0.644570,0.000025,0.425559,0.725119,-0.004804,0.227768,0.973704,0.500000,0.646730,0.014669,0.435947,0.723144,-0.186363,0.374658,0.908240,0.503340,0.644190,0.015455,0.428611,0.725971,-0.091373,0.200196,0.975486,0.503390,0.645970,-0.007881,0.426555,0.725606,0.098318,0.221354,0.970225,0.498260,0.646460,-0.007486,0.434107,0.722352,0.147501,0.407934,0.901018,0.498320,0.644570,-0.015397,0.428635,0.725916,0.090656,0.200645,0.975460,0.496610,0.645970,-0.014565,0.435950,0.723134,0.183286,0.371962,0.909973,0.496650,0.644190,0.022464,0.430608,0.725952,0.017444,0.166092,0.985956,0.504930,0.645560,0.021574,0.437881,0.723801,-0.090923,0.325146,0.941283,0.504910,0.643830,0.028402,0.439120,0.723282,0.108191,0.265314,0.958073,0.506480,0.643650,0.029103,0.431983,0.724959,0.190886,0.122501,0.973938,0.506480,0.645360,0.035759,0.446421,0.719718,0.267152,0.263072,0.927051,0.508340,0.641890,0.036056,0.439132,0.721724,0.301710,0.205920,0.930896,0.508200,0.643830,0.045352,0.445361,0.716334,0.399308,0.223371,0.889189,0.510670,0.642480,0.045192,0.437986,0.717914,0.412525,0.159121,0.896941,0.510390,0.644430,0.036154,0.432115,0.722688,0.336677,0.076610,0.938499,0.508120,0.645530,0.044966,0.431138,0.719075,0.420404,0.013886,0.907231,0.510170,0.646090,-0.022315,0.430661,0.725820,-0.019974,0.166656,0.985813,0.495060,0.645560,-0.021506,0.437909,0.723730,0.086082,0.323757,0.942216,0.495080,0.643830,-0.028985,0.432027,0.724851,-0.190485,0.120838,0.974225,0.493510,0.645360,-0.028354,0.439142,0.723217,-0.111483,0.267588,0.957062,0.493520,0.643650,-0.035674,0.446394,0.719537,-0.264480,0.285036,0.921306,0.491650,0.641890,-0.035946,0.439180,0.721583,-0.302096,0.211518,0.929515,0.491790,0.643830,-0.036100,0.432140,0.722622,-0.336345,0.071982,0.938984,0.491870,0.645530,-0.045139,0.438009,0.717831,-0.411293,0.165192,0.896409,0.489600,0.644430,-0.044919,0.431173,0.718955,-0.417632,0.010479,0.908556,0.489820,0.646090,-0.045300,0.445340,0.716195,-0.396904,0.239922,0.885949,0.489320,0.642480,0.057095,0.443137,0.710929,0.468425,0.199404,0.860707,0.513670,0.643560,0.056685,0.435277,0.712787,0.468449,0.119478,0.875374,0.513310,0.645540,0.068576,0.440444,0.704602,0.518247,0.176071,0.836910,0.516750,0.644710,0.067939,0.432161,0.706814,0.517685,0.085515,0.851287,0.516260,0.646740,0.055507,0.428574,0.713750,0.452884,-0.061594,0.889439,0.512960,0.647080,0.066213,0.425413,0.707764,0.483337,-0.123800,0.866637,0.515820,0.648200,-0.057049,0.443110,0.710741,-0.466839,0.211764,0.858614,0.486320,0.643560,-0.056668,0.435305,0.712655,-0.467820,0.126366,0.874744,0.486680,0.645540,-0.055534,0.428571,0.713710,-0.449666,-0.061860,0.891052,0.487030,0.647080,-0.067910,0.432183,0.706689,-0.515109,0.091082,0.852272,0.483730,0.646740,-0.066257,0.425403,0.707731,-0.481440,-0.121204,0.868058,0.484170,0.648200,-0.068705,0.440329,0.704529,-0.514860,0.186568,0.836727,0.483240,0.644710,0.091545,0.445859,0.686924,0.663317,0.058646,0.746037,0.523820,0.643740,0.080475,0.448289,0.695327,0.576577,0.128257,0.806914,0.520510,0.642650,0.088341,0.435786,0.690954,0.680699,0.065810,0.729601,0.522070,0.646310,0.078733,0.438127,0.698529,0.587475,0.134232,0.798032,0.519330,0.645450,0.069221,0.450435,0.702252,0.505290,0.165190,0.846991,0.517410,0.641810,0.077314,0.429890,0.700890,0.590444,0.040169,0.806079,0.518550,0.647550,0.085768,0.427690,0.693828,0.679515,-0.033939,0.732876,0.520900,0.648390,0.083327,0.420885,0.695180,0.643097,-0.251009,0.723478,0.520170,0.650040,0.075328,0.422906,0.701942,0.554631,-0.178524,0.812720,0.518010,0.649120,-0.091573,0.445829,0.686886,-0.659452,0.066336,0.748815,0.476170,0.643740,-0.080450,0.448250,0.695136,-0.569885,0.142937,0.809197,0.479480,0.642650,-0.069125,0.450303,0.701947,-0.500732,0.185476,0.845498,0.482590,0.641810,-0.078757,0.438118,0.698429,-0.584585,0.142278,0.798760,0.480660,0.645450,-0.088447,0.435725,0.690905,-0.679176,0.067948,0.730823,0.477920,0.646310,-0.085795,0.427694,0.693773,-0.679628,-0.033325,0.732800,0.479090,0.648390,-0.077391,0.429862,0.700861,-0.589334,0.042128,0.806790,0.481440,0.647550,-0.075396,0.422890,0.701892,-0.554819,-0.178639,0.812567,0.481980,0.649120,-0.083368,0.420880,0.695117,-0.642530,-0.255319,0.722473,0.479820,0.650040,0.111624,0.435061,0.663607,0.643218,-0.263154,0.719041,0.531670,0.648050,0.102373,0.442079,0.675502,0.707130,-0.078915,0.702666,0.527770,0.645450,0.105514,0.426746,0.668877,0.797113,-0.194025,0.571809,0.529220,0.650150,0.098247,0.432244,0.680835,0.769650,-0.047790,0.636676,0.525630,0.647910,0.101079,0.420557,0.673637,0.795774,-0.283360,0.535210,0.527260,0.651580,0.094570,0.424749,0.684437,0.761478,-0.150939,0.630372,0.524020,0.649790,0.097179,0.416061,0.676253,0.721178,-0.454474,0.522834,0.525860,0.652640,0.091236,0.418891,0.686223,0.706768,-0.350659,0.614424,0.522940,0.651230,-0.102467,0.442039,0.675481,-0.707037,-0.079057,0.702744,0.472220,0.645450,-0.111628,0.435066,0.663550,-0.640429,-0.266284,0.720377,0.468320,0.648050,-0.098284,0.432229,0.680772,-0.770655,-0.052414,0.635093,0.474360,0.647910,-0.105486,0.426764,0.668796,-0.795924,-0.198454,0.571945,0.470770,0.650150,-0.101031,0.420586,0.673505,-0.799259,-0.280232,0.531653,0.472730,0.651580,-0.094609,0.424745,0.684400,-0.763909,-0.148830,0.627927,0.475970,0.649790,-0.091345,0.418868,0.686181,-0.704822,-0.356865,0.613084,0.477050,0.651230,-0.097247,0.416045,0.676228,-0.722883,-0.455401,0.519663,0.474130,0.652640,0.119445,0.414627,0.646596,0.308675,-0.469046,0.827476,0.536580,0.655450,0.126360,0.428347,0.653268,0.257688,-0.438643,0.860924,0.537500,0.650400,0.117099,0.424635,0.653796,0.491424,-0.409685,0.768545,0.534670,0.651710,0.129088,0.414767,0.646538,0.160086,-0.432262,0.887424,0.539320,0.655220,0.110187,0.419735,0.658615,0.743787,-0.331452,0.580449,0.532070,0.652830,0.112421,0.412602,0.651118,0.621940,-0.460826,0.633112,0.534010,0.655520,0.106931,0.410486,0.656412,0.666171,-0.525636,0.529076,0.532010,0.655590,0.104972,0.415600,0.664010,0.761555,-0.400363,0.509650,0.530010,0.653560,0.102568,0.408951,0.660418,0.598523,-0.634021,0.489680,0.530460,0.655870,0.100787,0.412580,0.667349,0.685712,-0.541285,0.486632,0.528490,0.654200,-0.126505,0.428299,0.653312,-0.253352,-0.438790,0.862134,0.462490,0.650400,-0.119591,0.414577,0.646628,-0.305179,-0.469340,0.828605,0.463410,0.655450,-0.117168,0.424620,0.653798,-0.484019,-0.410457,0.772820,0.465320,0.651710,-0.129209,0.414730,0.646566,-0.158429,-0.434134,0.886808,0.460670,0.655220,-0.110177,0.419759,0.658526,-0.739834,-0.330372,0.586089,0.467920,0.652830,-0.112471,0.412593,0.651070,-0.622668,-0.454426,0.637010,0.465980,0.655520,-0.106996,0.410470,0.656388,-0.667588,-0.516008,0.536714,0.467980,0.655590,-0.104965,0.415619,0.663919,-0.763403,-0.392623,0.512896,0.469980,0.653560,-0.100755,0.412615,0.667237,-0.692656,-0.529055,0.490234,0.471500,0.654200,-0.102669,0.408911,0.660400,-0.602732,-0.624593,0.496587,0.469540,0.655870,0.138310,0.431632,0.651579,0.502949,-0.353538,0.788703,0.540280,0.649130,0.140140,0.416577,0.643375,0.533795,-0.352144,0.768803,0.541870,0.654760,0.175840,0.691938,-0.131733,0.486951,-0.187684,-0.853026,0.887850,0.611240,0.184967,0.827070,-0.133984,0.588861,0.087976,-0.803432,0.887170,0.557610,0.210449,0.814778,-0.112423,0.721179,0.059890,-0.690155,0.875830,0.562010,0.199508,0.687989,-0.113900,0.645365,-0.165798,-0.745664,0.877530,0.612090,0.154143,0.694376,-0.141606,0.350250,-0.208225,-0.913218,0.896360,0.611020,0.161398,0.834096,-0.147630,0.466381,0.101670,-0.878722,0.896510,0.554940,0.131013,0.695887,-0.149010,0.280651,-0.229206,-0.932041,0.906290,0.611270,0.136234,0.838795,-0.159428,0.396853,0.098229,-0.912611,0.906930,0.552750,0.107084,0.697191,-0.155398,0.222763,-0.250775,-0.942066,0.916680,0.611570,0.110643,0.843294,-0.169964,0.345745,0.089486,-0.934052,0.917460,0.550310,-0.175839,0.691938,-0.131733,-0.486951,-0.187684,-0.853026,0.112140,0.611240,-0.210449,0.814778,-0.112423,-0.721178,0.059889,-0.690156,0.124160,0.562010,-0.184967,0.827070,-0.133984,-0.588861,0.087976,-0.803432,0.112820,0.557610,-0.199508,0.687989,-0.113900,-0.645365,-0.165798,-0.745664,0.122460,0.612090,-0.154143,0.694376,-0.141606,-0.350249,-0.208225,-0.913219,0.103630,0.611020,-0.161398,0.834096,-0.147630,-0.466381,0.101670,-0.878722,0.103480,0.554940,-0.131013,0.695887,-0.149010,-0.280650,-0.229206,-0.932041,0.093710,0.611270,-0.136234,0.838795,-0.159428,-0.396853,0.098229,-0.912611,0.093060,0.552750,-0.107084,0.697191,-0.155398,-0.222763,-0.250775,-0.942066,0.083310,0.611570,-0.110643,0.843294,-0.169964,-0.345745,0.089486,-0.934052,0.082530,0.550310,-0.138577,0.431539,0.651693,-0.504509,-0.352417,0.788208,0.459710,0.649130,-0.140209,0.416557,0.643365,-0.535675,-0.353827,0.766719,0.458120,0.654760,0.058747,0.699340,-0.162075,0.046523,-0.293136,-0.954938,0.936980,0.612190,0.031364,0.854535,-0.186929,0.053570,0.066398,-0.996354,0.948990,0.541580,0.060513,0.853134,-0.184029,0.149183,0.075989,-0.985886,0.936950,0.543600,0.030516,0.698186,-0.161390,0.000786,-0.309152,-0.951012,0.949560,0.614410,0.0,0.854467,-0.187706,0.000000,0.061146,-0.998129,0.962590,0.539950,0.0,0.697156,-0.160539,-0.000000,-0.315494,-0.948928,0.963570,0.616470,-0.058747,0.699340,-0.162075,-0.046523,-0.293136,-0.954938,0.063010,0.612190,-0.031364,0.854535,-0.186929,-0.053570,0.066398,-0.996354,0.051000,0.541580,-0.030516,0.698186,-0.161390,-0.000786,-0.309152,-0.951012,0.050430,0.614410,-0.060513,0.853134,-0.184029,-0.149183,0.075989,-0.985885,0.063040,0.543600,0.0,0.854467,-0.187706,0.000000,0.061146,-0.998129,0.037400,0.539950,0.0,0.697156,-0.160539,-0.000000,-0.315494,-0.948928,0.036420,0.616470,0.083578,0.698709,-0.160066,0.137038,-0.272580,-0.952324,0.926480,0.611550,0.086152,0.848730,-0.178337,0.264544,0.082693,-0.960822,0.927030,0.546890,-0.083578,0.698709,-0.160066,-0.137038,-0.272579,-0.952324,0.073510,0.611550,-0.086152,0.848730,-0.178337,-0.264544,0.082693,-0.960822,0.072960,0.546890,0.015052,0.424927,0.726287,0.021431,-0.163416,0.986324,0.503370,0.647290,0.007596,0.422859,0.725770,-0.018711,-0.168544,0.985516,0.501730,0.647780,0.014368,0.421406,0.724827,0.090243,-0.500758,0.860870,0.503340,0.648530,0.007319,0.419926,0.724560,0.043233,-0.520784,0.852593,0.501710,0.648950,0.000036,0.421996,0.725478,-0.002540,-0.157057,0.987586,0.500000,0.648070,0.000076,0.419126,0.724355,0.000154,-0.528805,0.848744,0.500000,0.649200,-0.014932,0.424970,0.726193,-0.022534,-0.154185,0.987785,0.496620,0.647290,-0.007543,0.422878,0.725730,0.017049,-0.153637,0.987980,0.498260,0.647780,-0.007236,0.419912,0.724589,-0.044742,-0.515475,0.855736,0.498280,0.648950,-0.014316,0.421418,0.724799,-0.095198,-0.493982,0.864245,0.496650,0.648530,0.028984,0.428211,0.725032,0.243922,-0.179472,0.953043,0.506370,0.646840,0.022002,0.426913,0.726123,0.118769,-0.162513,0.979532,0.504870,0.646960,0.028188,0.423055,0.723149,0.244779,-0.483566,0.840385,0.506270,0.648240,0.021367,0.422529,0.724612,0.162217,-0.483483,0.860192,0.504800,0.648280,-0.028849,0.428250,0.724926,-0.243375,-0.177277,0.953594,0.493620,0.646840,-0.021933,0.426943,0.726054,-0.120756,-0.159638,0.979762,0.495120,0.646960,-0.021254,0.422583,0.724492,-0.165106,-0.478361,0.862503,0.495190,0.648280,-0.028112,0.423092,0.723067,-0.243674,-0.476960,0.844471,0.493720,0.648240,0.014459,0.416821,0.721323,0.113174,-0.816011,0.566849,0.503310,0.649960,0.007490,0.416055,0.721232,0.063307,-0.831584,0.551779,0.501690,0.650230,0.013922,0.414642,0.714632,0.113642,-0.946205,0.302956,0.503197,0.651062,0.007171,0.413947,0.714782,0.076378,-0.973642,-0.214913,0.501615,0.651213,0.000007,0.415747,0.721122,-0.001009,-0.842560,0.538601,0.500000,0.650390,0.000012,0.413689,0.714376,-0.000724,-0.976847,-0.213939,0.500000,0.651290,-0.014397,0.416823,0.721317,-0.115851,-0.815340,0.567274,0.496680,0.649960,-0.007410,0.416067,0.721206,-0.064588,-0.833196,0.549193,0.498310,0.650230,-0.007103,0.413967,0.714738,-0.076692,-0.973391,-0.215935,0.498378,0.651213,-0.013854,0.414656,0.714600,-0.112993,-0.946920,0.300956,0.496800,0.651062,0.027420,0.418073,0.719771,0.190062,-0.800598,0.568261,0.506280,0.649740,0.021062,0.417570,0.720808,0.148641,-0.806334,0.572478,0.504810,0.649770,0.020271,0.415395,0.714487,0.123707,-0.943409,0.307694,0.504690,0.650918,0.026496,0.415887,0.713594,0.129504,-0.939818,0.316183,0.506175,0.650887,-0.027365,0.418091,0.719728,-0.188895,-0.798009,0.572277,0.493710,0.649740,-0.021008,0.417579,0.720783,-0.151291,-0.802910,0.576582,0.495190,0.649770,-0.020230,0.415409,0.714453,-0.124811,-0.943691,0.306380,0.495302,0.650918,-0.026430,0.415904,0.713555,-0.129274,-0.940084,0.315483,0.493815,0.650887,0.036315,0.428150,0.722689,0.340601,-0.212176,0.915955,0.508000,0.647020,0.044629,0.426821,0.718850,0.389090,-0.273386,0.879698,0.509980,0.647540,0.043121,0.421940,0.716670,0.318028,-0.556819,0.767340,0.509840,0.648920,0.035296,0.422820,0.720658,0.305328,-0.514993,0.800972,0.507890,0.648440,0.033876,0.418229,0.717301,0.214302,-0.809289,0.546924,0.507840,0.649950,0.041262,0.417670,0.713408,0.187776,-0.830374,0.524614,0.509730,0.650410,0.032893,0.416003,0.711379,0.123032,-0.939109,0.320839,0.507728,0.651075,0.040165,0.415589,0.707429,0.077731,-0.946639,0.312781,0.509625,0.651490,-0.036202,0.428208,0.722548,-0.339871,-0.210185,0.916684,0.491990,0.647020,-0.035251,0.422836,0.720613,-0.306090,-0.506343,0.806180,0.492100,0.648440,-0.043086,0.421958,0.716628,-0.320575,-0.550135,0.771092,0.490150,0.648920,-0.044537,0.426863,0.718739,-0.387388,-0.271361,0.881075,0.490010,0.647540,-0.033844,0.418237,0.717279,-0.213570,-0.808324,0.548634,0.492150,0.649950,-0.032850,0.416019,0.711341,-0.122306,-0.939256,0.320687,0.492262,0.651075,-0.041221,0.417690,0.713361,-0.189037,-0.830057,0.524661,0.490260,0.650410,-0.040146,0.415597,0.707405,-0.079124,-0.946415,0.313110,0.490365,0.651490,0.054331,0.424584,0.713404,0.392205,-0.340718,0.854451,0.512580,0.648420,0.064512,0.421646,0.707601,0.393010,-0.409316,0.823410,0.515260,0.649470,0.062482,0.418397,0.705991,0.276226,-0.672036,0.687072,0.514830,0.650690,0.052543,0.420412,0.711767,0.301119,-0.602553,0.739092,0.512270,0.649720,0.050395,0.416452,0.708584,0.158059,-0.856749,0.490916,0.512180,0.651120,0.060113,0.415161,0.702649,0.130107,-0.891630,0.433668,0.514750,0.651990,0.049278,0.414579,0.702520,0.047204,-0.956584,0.287608,0.512120,0.652125,0.059128,0.413559,0.696771,0.029444,-0.968179,0.248519,0.514742,0.652897,-0.054267,0.424617,0.713317,-0.387760,-0.344183,0.855091,0.487420,0.648420,-0.052507,0.420432,0.711714,-0.302338,-0.600563,0.740214,0.487720,0.649720,-0.062410,0.418439,0.705891,-0.273787,-0.676867,0.683295,0.485170,0.650690,-0.064541,0.421642,0.707558,-0.386669,-0.419951,0.821054,0.484730,0.649470,-0.050353,0.416474,0.708534,-0.159564,-0.856319,0.491180,0.487810,0.651120,-0.049223,0.414608,0.702456,-0.047774,-0.956593,0.287486,0.487870,0.652125,-0.060075,0.415181,0.702592,-0.133412,-0.890516,0.434951,0.485240,0.651990,-0.059095,0.413577,0.696715,-0.030924,-0.967890,0.249465,0.485247,0.652897,0.081054,0.416491,0.694793,0.509193,-0.571637,0.643392,0.519720,0.651400,0.073288,0.418741,0.701619,0.437606,-0.491075,0.753224,0.517500,0.650440,0.078982,0.413994,0.692868,0.319355,-0.808733,0.493926,0.519430,0.652630,0.071423,0.416066,0.700023,0.275879,-0.751774,0.598938,0.517120,0.651680,0.069153,0.413703,0.696929,0.101698,-0.925947,0.363702,0.516970,0.652890,0.076880,0.412193,0.690154,0.108414,-0.946316,0.304521,0.519190,0.653820,0.067887,0.412524,0.690899,-0.005361,-0.979085,0.203379,0.516955,0.653685,0.075602,0.411230,0.684248,-0.026467,-0.984242,0.174837,0.519108,0.654540,-0.073369,0.418726,0.701560,-0.431838,-0.501825,0.749458,0.482490,0.650440,-0.081110,0.416472,0.694675,-0.506987,-0.575599,0.641600,0.480270,0.651400,-0.079023,0.413990,0.692801,-0.318057,-0.806395,0.498566,0.480560,0.652630,-0.071351,0.416107,0.699900,-0.268319,-0.757490,0.595159,0.482870,0.651680,-0.069083,0.413744,0.696797,-0.101292,-0.925237,0.365619,0.483020,0.652890,-0.067864,0.412538,0.690818,0.005517,-0.979104,0.203283,0.483035,0.653685,-0.076924,0.412173,0.690095,-0.101939,-0.946180,0.307166,0.480800,0.653820,-0.075537,0.411276,0.684101,0.037461,-0.984612,0.170690,0.480890,0.654540,0.088379,0.414781,0.686078,0.556152,-0.630324,0.541652,0.522380,0.652430,0.093975,0.412721,0.676956,0.567632,-0.668071,0.481118,0.525100,0.653610,0.091084,0.410416,0.675871,0.391232,-0.817817,0.422035,0.524670,0.654630,0.085765,0.412284,0.684321,0.359958,-0.825813,0.434124,0.522060,0.653560,0.083599,0.410583,0.681974,0.118402,-0.950501,0.287279,0.521720,0.654750,0.088973,0.408802,0.674211,0.130207,-0.946939,0.293859,0.524270,0.655730,0.082517,0.409669,0.676476,-0.051792,-0.984031,0.170293,0.521563,0.655485,0.087952,0.408012,0.669095,-0.075363,-0.982484,0.170427,0.524060,0.656428,-0.088371,0.414781,0.685935,-0.556361,-0.630683,0.541018,0.477610,0.652430,-0.085879,0.412253,0.684279,-0.374466,-0.814900,0.442395,0.477930,0.653560,-0.091147,0.410406,0.675801,-0.405298,-0.807688,0.428222,0.475320,0.654630,-0.093978,0.412743,0.676821,-0.570032,-0.664316,0.483474,0.474890,0.653610,-0.083764,0.410511,0.681976,-0.119522,-0.949271,0.290858,0.478270,0.654750,-0.082644,0.409630,0.676463,0.062891,-0.984113,0.166032,0.478428,0.655485,-0.089139,0.408735,0.674186,-0.139200,-0.945512,0.294330,0.475730,0.655730,-0.088101,0.407959,0.669089,0.072569,-0.983210,0.167426,0.475932,0.656428,0.099176,0.408012,0.663231,0.495612,-0.735111,0.462581,0.529310,0.656510,0.097406,0.410320,0.669000,0.554242,-0.692334,0.462049,0.527530,0.655050,0.096880,0.407510,0.664850,0.417715,-0.793444,0.442673,0.528350,0.656770,0.094738,0.408685,0.668936,0.412957,-0.801389,0.432715,0.526950,0.655980,0.094951,0.404746,0.661304,0.324758,-0.817507,0.475620,0.528374,0.658192,0.093023,0.407398,0.667891,0.049806,-0.944882,0.323599,0.526580,0.656820,0.092101,0.406611,0.662936,-0.272855,-0.943907,0.185982,0.526400,0.657330,0.092651,0.406048,0.661036,-0.456027,-0.868195,0.195643,0.526868,0.657673,0.108373,0.389343,0.495725,-0.994368,0.012373,0.105260,0.526341,0.657497,0.104633,0.368121,0.492825,-0.711840,0.621037,0.328021,0.523990,0.656660,0.107945,0.370180,0.502461,-0.968705,0.229074,0.095579,0.526340,0.657500,0.104712,0.393923,0.473156,-0.897116,0.075322,0.435327,0.523991,0.656656,-0.099275,0.407977,0.663214,-0.492342,-0.735602,0.465285,0.470680,0.656510,-0.097500,0.410291,0.668969,-0.555929,-0.689572,0.464149,0.472460,0.655050,-0.094846,0.408655,0.668922,-0.413485,-0.802531,0.430086,0.473040,0.655980,-0.096852,0.407543,0.664723,-0.409747,-0.798333,0.441328,0.471640,0.656770,-0.092121,0.406610,0.662823,0.269364,-0.944926,0.185897,0.473590,0.657330,-0.095037,0.404709,0.661262,-0.338966,-0.805265,0.486467,0.471636,0.658244,-0.092671,0.406048,0.661036,0.458526,-0.866319,0.198102,0.473123,0.657673,-0.093048,0.407396,0.667807,-0.057360,-0.944891,0.322322,0.473410,0.656820,-0.104719,0.368095,0.492839,0.710454,0.622194,0.328832,0.476000,0.656660,-0.108454,0.389288,0.495734,0.994379,0.012394,0.105148,0.473649,0.657497,-0.108029,0.370151,0.502468,0.968777,0.228814,0.095480,0.473650,0.657500,-0.104798,0.393870,0.473178,0.896618,0.075628,0.436298,0.475999,0.656656,0.227146,0.682031,-0.083564,0.771077,-0.147192,-0.619495,0.861610,0.613330,0.266573,0.773381,-0.032317,0.912019,-0.011039,-0.410000,0.839910,0.576910,0.253161,0.673918,-0.042447,0.877840,-0.138623,-0.458455,0.843290,0.615110,0.239969,0.795613,-0.077586,0.824293,0.028689,-0.565436,0.859030,0.569250,0.098600,0.403943,0.656722,0.488927,-0.701648,0.518306,0.530060,0.658730,-0.150396,0.291574,0.498812,-0.710166,-0.655760,0.256208,0.439070,0.709970,-0.140079,0.277822,0.481511,-0.627880,-0.755712,0.186189,0.439730,0.718640,-0.126084,0.270352,0.493121,-0.599100,-0.777613,0.190782,0.446730,0.719590,-0.137121,0.282155,0.509653,-0.658954,-0.715984,0.230534,0.445580,0.711620,-0.239969,0.795613,-0.077586,-0.824293,0.028688,-0.565436,0.140970,0.569250,-0.227146,0.682031,-0.083564,-0.771077,-0.147192,-0.619495,0.138380,0.613330,-0.266573,0.773381,-0.032317,-0.912019,-0.011039,-0.409999,0.160080,0.576910,-0.253161,0.673918,-0.042447,-0.877840,-0.138624,-0.458455,0.156700,0.615110,0.290036,0.732068,0.066316,0.989223,-0.070856,-0.128133,0.802790,0.588490,0.279631,0.655402,0.051745,0.976328,-0.128753,-0.173798,0.806940,0.620390,0.270471,0.664243,0.004916,0.947819,-0.136016,-0.288340,0.824910,0.617990,0.282849,0.752422,0.017808,0.968120,-0.050939,-0.245253,0.821030,0.582910,-0.024181,0.356295,0.578594,0.059764,0.997956,-0.022637,0.495372,0.651398,-0.032253,0.376483,0.477380,0.068079,0.834917,0.546150,0.493850,0.651270,-0.032139,0.356526,0.578433,0.037524,0.999019,-0.023510,0.493886,0.651366,-0.024266,0.376011,0.476993,0.086221,0.837231,0.540009,0.495340,0.651300,-0.016285,0.355974,0.578677,0.060978,0.997898,-0.021928,0.496863,0.651528,-0.016338,0.375329,0.476825,0.080519,0.841384,0.534406,0.496840,0.651430,-0.012420,0.408141,0.719200,-0.032485,0.494754,0.868426,0.497210,0.653000,-0.017064,0.401360,0.719653,-0.156528,0.083341,0.984151,0.496290,0.654550,-0.011468,0.400692,0.720591,-0.109099,0.092771,0.989692,0.497530,0.654670,-0.018317,0.408818,0.718079,-0.079564,0.468458,0.879896,0.495850,0.652870,-0.023118,0.401998,0.718661,-0.227188,0.063135,0.971802,0.494920,0.654500,-0.024441,0.409496,0.717257,-0.168966,0.438297,0.882806,0.494420,0.652810,-0.029867,0.402272,0.716399,-0.368704,0.048083,0.928302,0.493230,0.654610,-0.031221,0.409677,0.715343,-0.358896,0.393783,0.846244,0.492770,0.652940,-0.037763,0.402163,0.712690,-0.440305,0.073438,0.894840,0.491190,0.654890,-0.038648,0.409416,0.710991,-0.447128,0.386383,0.806712,0.490760,0.653280,-0.032194,0.413879,0.710857,-0.305204,0.651702,0.694359,0.492417,0.651823,-0.039503,0.413528,0.706812,-0.399519,0.628070,0.667767,0.490490,0.652207,-0.025699,0.413755,0.712937,-0.112065,0.694096,0.711106,0.493993,0.651655,0.032197,0.356519,0.578438,-0.037581,0.999017,-0.023510,0.506104,0.651366,0.032311,0.376461,0.477369,-0.068166,0.835081,0.545888,0.506140,0.651270,0.024242,0.356287,0.578599,-0.059815,0.997953,-0.022635,0.504618,0.651398,0.024328,0.375989,0.476982,-0.086179,0.837397,0.539759,0.504650,0.651300,0.018372,0.408797,0.718127,0.079851,0.468792,0.879692,0.504140,0.652870,0.023183,0.401967,0.718735,0.227517,0.064106,0.971662,0.505070,0.654500,0.024471,0.409488,0.717278,0.169074,0.439029,0.882421,0.505570,0.652810,0.017098,0.401352,0.719677,0.155068,0.082923,0.984417,0.503700,0.654550,0.012477,0.408127,0.719235,0.031668,0.495607,0.867969,0.502780,0.653000,0.011540,0.400667,0.720652,0.109389,0.091466,0.989782,0.502460,0.654670,0.016349,0.355966,0.578681,-0.060731,0.997913,-0.021917,0.503136,0.651528,0.016402,0.375308,0.476815,-0.079921,0.841561,0.534217,0.503160,0.651430,0.029891,0.402264,0.716426,0.369227,0.049499,0.928020,0.506760,0.654610,0.031257,0.409662,0.715386,0.359399,0.393593,0.846119,0.507220,0.652940,0.025759,0.413741,0.712971,0.112326,0.693626,0.711523,0.505997,0.651655,0.032238,0.413861,0.710900,0.305077,0.651896,0.694233,0.507573,0.651823,0.038689,0.409394,0.711040,0.447176,0.385644,0.807039,0.509230,0.653280,0.039521,0.413520,0.706837,0.399405,0.628536,0.667397,0.509500,0.652207,0.037788,0.402155,0.712710,0.439380,0.076329,0.895052,0.508810,0.654890,-0.060219,0.356058,0.577001,-0.035055,0.998966,-0.028941,0.487913,0.652546,-0.070992,0.373897,0.481995,-0.014154,0.836217,0.548217,0.485250,0.653200,-0.070969,0.355658,0.576262,-0.038915,0.998704,-0.032810,0.485273,0.653279,-0.060313,0.375114,0.480430,-0.005743,0.834149,0.551509,0.487890,0.652460,-0.049903,0.356407,0.577631,-0.020902,0.999432,-0.026440,0.490422,0.651939,-0.050045,0.376043,0.479100,0.010456,0.833430,0.552526,0.490400,0.651850,-0.047041,0.401347,0.707903,-0.459616,0.104820,0.881910,0.488720,0.655350,-0.047936,0.408778,0.706471,-0.450636,0.412627,0.791623,0.488250,0.653830,-0.057305,0.400617,0.702454,-0.514079,0.131336,0.847628,0.486110,0.655850,-0.057925,0.408169,0.700850,-0.501298,0.425761,0.753278,0.485620,0.654460,0.071006,0.355648,0.576271,0.039152,0.998696,-0.032775,0.514717,0.653279,0.071028,0.373870,0.481976,0.014539,0.836445,0.547858,0.514740,0.653200,0.060260,0.356048,0.577008,0.035391,0.998955,-0.028921,0.512077,0.652546,0.060354,0.375089,0.480415,0.006232,0.834353,0.551195,0.512100,0.652460,0.047959,0.408766,0.706505,0.449275,0.413199,0.792098,0.511740,0.653830,0.057377,0.400578,0.702549,0.512245,0.134111,0.848304,0.513880,0.655850,0.057970,0.408143,0.700914,0.499363,0.427468,0.753596,0.514370,0.654460,0.047078,0.401330,0.707948,0.457910,0.108563,0.882345,0.511270,0.655350,0.049945,0.356400,0.577636,0.021133,0.999427,-0.026436,0.509567,0.651939,0.050089,0.376021,0.479087,-0.010110,0.833615,0.552253,0.509590,0.651850,-0.066877,0.401374,0.695928,-0.613334,0.163143,0.772790,0.483620,0.656200,-0.066761,0.407776,0.694327,-0.580875,0.434558,0.688291,0.483290,0.655000,-0.074844,0.403448,0.687994,-0.710313,0.165815,0.684076,0.481110,0.656580,-0.074594,0.407685,0.687003,-0.651053,0.446530,0.613792,0.480980,0.655600,-0.067284,0.411046,0.690200,-0.500965,0.656310,0.564173,0.483103,0.654212,-0.074954,0.410154,0.683328,-0.543077,0.680275,0.492233,0.480935,0.654985,-0.058557,0.411824,0.696279,-0.433500,0.668711,0.604072,0.485343,0.653515,0.066894,0.401355,0.696021,0.610675,0.164997,0.774501,0.516380,0.656200,0.066820,0.407735,0.694444,0.578193,0.436828,0.689111,0.516700,0.655000,0.058592,0.411804,0.696337,0.431981,0.669874,0.603872,0.514647,0.653515,0.067304,0.411032,0.690278,0.498599,0.658183,0.564087,0.516888,0.654212,0.074646,0.407647,0.687114,0.649868,0.451493,0.611412,0.519010,0.655600,0.075044,0.410094,0.683488,0.544460,0.679956,0.491144,0.519063,0.654985,0.074947,0.403392,0.688185,0.711893,0.165202,0.682581,0.518880,0.656580,-0.081620,0.405077,0.679620,-0.788757,0.081124,0.609328,0.478470,0.657120,-0.087091,0.406464,0.672245,-0.813291,0.324633,0.482877,0.476020,0.657210,-0.086762,0.404863,0.672226,-0.837252,-0.095293,0.538450,0.476030,0.657750,-0.081623,0.407497,0.679308,-0.724149,0.426779,0.541727,0.478450,0.656370,-0.082109,0.408877,0.675796,-0.570051,0.726921,0.382920,0.478473,0.655890,-0.087589,0.407391,0.668604,-0.628769,0.717938,0.298687,0.476005,0.656798,0.081640,0.405044,0.679750,0.796498,0.092543,0.597517,0.521520,0.657120,0.086563,0.404953,0.672191,0.842428,-0.069979,0.534245,0.523960,0.657750,0.081625,0.407482,0.679397,0.729631,0.432005,0.530105,0.521540,0.656370,0.086891,0.406558,0.672196,0.813114,0.324614,0.483188,0.523980,0.657210,0.082024,0.408894,0.675831,0.574314,0.725607,0.379023,0.521518,0.655890,0.087431,0.407451,0.668591,0.624535,0.721734,0.298422,0.523988,0.656798,-0.092758,0.400191,0.660105,-0.832821,-0.235398,0.500996,0.472610,0.659390,-0.093772,0.396609,0.656835,-0.856504,-0.131280,0.499167,0.471290,0.660420,-0.092240,0.398625,0.660295,-0.865800,-0.161746,0.473528,0.472720,0.659800,-0.095225,0.398283,0.655071,-0.792413,-0.266197,0.548836,0.470710,0.660090,-0.096528,0.393880,0.651798,-0.833179,-0.145576,0.533498,0.469200,0.661400,-0.098476,0.396067,0.649832,-0.737532,-0.306797,0.601600,0.468770,0.660920,-0.099977,0.398291,0.649414,-0.609035,-0.502673,0.613512,0.468730,0.660350,-0.096422,0.400160,0.654659,-0.656366,-0.490081,0.573589,0.470450,0.659650,-0.093437,0.402024,0.659988,-0.717387,-0.433894,0.545061,0.472200,0.658970,-0.107327,0.391675,0.638413,-0.524524,-0.392551,0.755498,0.464930,0.662810,-0.104650,0.388125,0.638949,-0.670584,-0.227073,0.706225,0.465250,0.663810,-0.102521,0.393832,0.644089,-0.662006,-0.378203,0.647079,0.466890,0.661790,-0.099961,0.391077,0.645407,-0.784601,-0.210478,0.583181,0.467240,0.662490,-0.104305,0.396485,0.644198,-0.561941,-0.512555,0.649238,0.466950,0.661000,-0.109204,0.394758,0.639094,-0.434037,-0.508201,0.743871,0.465020,0.661770,-0.088797,0.393758,0.667587,-0.905542,-0.002828,0.424246,0.474670,0.660680,-0.090283,0.398843,0.664167,-0.895677,-0.078793,0.437668,0.474140,0.659650,-0.091587,0.395319,0.660833,-0.899734,-0.031278,0.435317,0.472630,0.660590,-0.087375,0.398567,0.670758,-0.893182,-0.002177,0.449690,0.476040,0.659510,-0.090834,0.388913,0.662741,-0.904158,-0.027205,0.426331,0.472760,0.662040,-0.094050,0.391531,0.655983,-0.889664,-0.025797,0.455887,0.470540,0.661750,-0.093446,0.383889,0.657015,-0.892936,-0.115510,0.435113,0.470990,0.663540,-0.097191,0.387674,0.649692,-0.868399,-0.085170,0.488497,0.468600,0.663060,-0.095711,0.378543,0.649630,-0.854234,-0.165737,0.492764,0.469130,0.665540,-0.100942,0.383598,0.642529,-0.797063,-0.125506,0.590711,0.466600,0.664760,0.092604,0.400242,0.660103,0.835674,-0.224219,0.501373,0.527380,0.659390,0.093674,0.396640,0.656836,0.856267,-0.124174,0.501386,0.528700,0.660420,0.095136,0.398313,0.655074,0.787805,-0.260162,0.558282,0.529280,0.660090,0.092188,0.398639,0.660332,0.871890,-0.144279,0.467964,0.527270,0.659800,0.096397,0.400159,0.654704,0.643742,-0.492817,0.585430,0.529540,0.659650,0.093438,0.402534,0.659989,0.702782,-0.457044,0.545167,0.527790,0.658970,0.099941,0.398289,0.649493,0.614100,-0.500441,0.610279,0.531260,0.660350,0.098465,0.396049,0.649954,0.736951,-0.313392,0.598906,0.531220,0.660920,0.096491,0.393874,0.651882,0.831258,-0.159282,0.532578,0.530800,0.661400,0.107258,0.391698,0.638420,0.519775,-0.389666,0.760260,0.535060,0.662810,0.102348,0.393907,0.644049,0.664595,-0.384743,0.640536,0.533100,0.661790,0.104576,0.388152,0.638981,0.659627,-0.239986,0.712249,0.534740,0.663810,0.099863,0.391116,0.645397,0.779839,-0.232812,0.581076,0.532750,0.662490,0.104232,0.396511,0.644232,0.569334,-0.512058,0.643161,0.533040,0.661000,0.109089,0.394812,0.639069,0.429908,-0.502291,0.750256,0.534970,0.661770,0.088636,0.393806,0.667607,0.903756,-0.014950,0.427786,0.525320,0.660680,0.090212,0.398865,0.664209,0.894795,-0.083545,0.438590,0.525850,0.659650,0.087141,0.398652,0.670729,0.894347,-0.022540,0.446806,0.523950,0.659510,0.091522,0.395340,0.660861,0.896646,-0.036748,0.441221,0.527360,0.660590,0.093950,0.391553,0.656029,0.888211,-0.053012,0.456368,0.529450,0.661750,0.090658,0.388964,0.662747,0.903393,-0.046227,0.426314,0.527230,0.662040,0.093078,0.384022,0.656882,0.893960,-0.121345,0.431406,0.529000,0.663540,0.096872,0.387775,0.649621,0.863976,-0.116883,0.489779,0.531400,0.663060,0.100612,0.383720,0.642416,0.790084,-0.134942,0.597961,0.533390,0.664760,0.095495,0.378615,0.649588,0.855537,-0.155625,0.493799,0.530860,0.665540,-0.086514,0.385551,0.671928,-0.876943,-0.112170,0.467322,0.475760,0.662270,-0.084543,0.391396,0.676192,-0.865385,-0.025014,0.500483,0.477270,0.660650,-0.082687,0.397433,0.679138,-0.839053,0.028970,0.543278,0.478390,0.659200,-0.078171,0.387813,0.685882,-0.763032,-0.091367,0.639870,0.480080,0.660540,-0.075825,0.395027,0.688329,-0.744513,0.008689,0.667551,0.480960,0.658860,-0.079775,0.381448,0.681979,-0.780209,-0.222672,0.584543,0.478940,0.662390,-0.089416,0.373346,0.660129,-0.845028,-0.271574,0.460625,0.472890,0.665990,-0.088080,0.379735,0.666674,-0.868699,-0.211110,0.448102,0.474390,0.663900,-0.080668,0.375320,0.677190,-0.780686,-0.326797,0.532666,0.477940,0.664120,-0.081421,0.368535,0.671294,-0.767598,-0.392348,0.506810,0.476810,0.666200,0.086213,0.385652,0.671866,0.876859,-0.107845,0.468495,0.524230,0.662270,0.084314,0.391460,0.676170,0.865064,-0.043142,0.499803,0.522720,0.660650,0.079620,0.381486,0.682014,0.784341,-0.207000,0.584774,0.521060,0.662390,0.077760,0.387975,0.685747,0.767386,-0.100808,0.633212,0.519910,0.660540,0.082739,0.397397,0.679321,0.842955,0.006258,0.537948,0.521600,0.659200,0.075756,0.395038,0.688395,0.749436,-0.014535,0.661917,0.519030,0.658860,0.089156,0.373450,0.660054,0.846039,-0.268683,0.460464,0.527100,0.665990,0.087919,0.379785,0.666675,0.871576,-0.209581,0.443206,0.525600,0.663900,0.081100,0.368668,0.671196,0.769276,-0.394376,0.502675,0.523180,0.666200,0.080575,0.375335,0.677232,0.783528,-0.329114,0.527037,0.522060,0.664120,-0.012136,0.380503,0.715012,-0.126078,-0.592610,0.795561,0.497160,0.659930,-0.006132,0.373966,0.710157,-0.075260,-0.697953,0.712178,0.498490,0.661910,-0.006055,0.380724,0.715994,-0.086284,-0.598226,0.796668,0.498590,0.659710,-0.012390,0.373863,0.709201,-0.105943,-0.696343,0.709847,0.496960,0.662100,-0.011897,0.387071,0.719183,-0.144630,-0.387538,0.910438,0.497360,0.657920,-0.005963,0.386948,0.720098,-0.096978,-0.385801,0.917471,0.498700,0.657760,0.000052,0.380755,0.716449,-0.005884,-0.601477,0.798869,0.500000,0.659590,0.000016,0.386882,0.720472,-0.006029,-0.384161,0.923246,0.500000,0.657680,0.000125,0.373967,0.710660,-0.004690,-0.699726,0.714396,0.500000,0.661800,0.000006,0.368463,0.704567,-0.004371,-0.727193,0.686420,0.500000,0.664000,-0.006250,0.368564,0.704074,-0.073801,-0.726035,0.683686,0.498380,0.664060,0.000094,0.362652,0.698720,-0.003574,-0.649590,0.760277,0.500000,0.666250,-0.006271,0.362848,0.698305,-0.077646,-0.646530,0.758927,0.498300,0.666250,-0.012447,0.368633,0.703435,-0.093794,-0.721727,0.685794,0.496760,0.664150,-0.012675,0.363092,0.697718,-0.089484,-0.643683,0.760042,0.496620,0.666240,0.012276,0.380514,0.715014,0.125237,-0.589066,0.798321,0.502830,0.659930,0.006228,0.373943,0.710221,0.067811,-0.700036,0.710881,0.501510,0.661910,0.012529,0.373771,0.709419,0.102965,-0.698335,0.708326,0.503040,0.662100,0.006237,0.380695,0.716067,0.080977,-0.596526,0.798498,0.501400,0.659710,0.006043,0.386924,0.720166,0.095261,-0.382877,0.918875,0.501290,0.657760,0.012005,0.387050,0.719241,0.141671,-0.383753,0.912504,0.502630,0.657920,0.006292,0.368544,0.704115,0.070294,-0.727280,0.682732,0.501610,0.664060,0.012587,0.368669,0.703373,0.090948,-0.726034,0.681618,0.503230,0.664150,0.012639,0.363064,0.697815,0.088340,-0.639402,0.763780,0.503380,0.666240,0.006373,0.362813,0.698386,0.073121,-0.645647,0.760127,0.501690,0.666250,-0.029812,0.387486,0.715640,-0.297921,-0.309816,0.902916,0.493280,0.658290,-0.024171,0.380299,0.712713,-0.162257,-0.570083,0.805405,0.494280,0.660220,-0.023652,0.387395,0.717154,-0.207174,-0.359818,0.909730,0.494660,0.658190,-0.030449,0.380528,0.711463,-0.231826,-0.529598,0.815955,0.492830,0.660240,-0.024984,0.373685,0.707195,-0.117846,-0.677514,0.726007,0.493870,0.662320,-0.031494,0.373914,0.706023,-0.166759,-0.639084,0.750842,0.492270,0.662290,-0.037936,0.380984,0.709099,-0.322549,-0.452394,0.831445,0.491020,0.660260,-0.039564,0.374134,0.704372,-0.246750,-0.572952,0.781563,0.490300,0.662250,-0.037084,0.387956,0.712765,-0.383887,-0.253409,0.887927,0.491520,0.658390,-0.018678,0.373792,0.708072,-0.108937,-0.693192,0.712472,0.495430,0.662250,-0.018190,0.380303,0.713831,-0.138855,-0.585367,0.798789,0.495720,0.660110,-0.017743,0.387298,0.718268,-0.167656,-0.382923,0.908439,0.496020,0.658070,-0.029406,0.392544,0.716431,-0.341108,-0.072280,0.937241,0.493410,0.656420,-0.022876,0.392510,0.718535,-0.236736,-0.107325,0.965628,0.494940,0.656300,-0.037291,0.392851,0.713240,-0.410738,-0.037196,0.910994,0.491510,0.656610,-0.017059,0.392435,0.719626,-0.174745,-0.121335,0.977109,0.496270,0.656260,-0.011399,0.392156,0.720615,-0.136507,-0.117124,0.983691,0.497530,0.656260,0.029895,0.387484,0.715690,0.298586,-0.304644,0.904454,0.506710,0.658290,0.024281,0.380257,0.712799,0.160940,-0.571731,0.804501,0.505710,0.660220,0.030553,0.380479,0.711600,0.230184,-0.528245,0.817296,0.507160,0.660240,0.023830,0.387363,0.717233,0.210618,-0.353823,0.911290,0.505330,0.658190,0.037137,0.387935,0.712828,0.382380,-0.251169,0.889213,0.508470,0.658390,0.038073,0.380951,0.709206,0.321396,-0.448151,0.834186,0.508970,0.660260,0.031578,0.373875,0.706159,0.164489,-0.632626,0.756788,0.507720,0.662290,0.039615,0.374109,0.704485,0.246284,-0.568313,0.785089,0.509690,0.662250,0.024905,0.373701,0.707234,0.113882,-0.672151,0.731604,0.506120,0.662320,0.018651,0.373736,0.708250,0.110674,-0.691333,0.714010,0.504570,0.662250,0.018269,0.380289,0.713864,0.139216,-0.584688,0.799224,0.504270,0.660110,0.017918,0.387235,0.718405,0.162717,-0.379589,0.910734,0.503980,0.658070,0.029509,0.392533,0.716472,0.341158,-0.069495,0.937434,0.506580,0.656420,0.022956,0.392504,0.718557,0.239752,-0.100722,0.965595,0.505060,0.656300,0.037378,0.392813,0.713333,0.409222,-0.035754,0.911734,0.508480,0.656610,0.017168,0.392415,0.719682,0.170783,-0.113416,0.978759,0.503720,0.656260,0.011525,0.392182,0.720563,0.134857,-0.111714,0.984547,0.502460,0.656260,-0.058569,0.382534,0.700479,-0.486934,-0.269999,0.830660,0.485550,0.660390,-0.049478,0.374864,0.701028,-0.332662,-0.492498,0.804227,0.487600,0.662280,-0.047641,0.381629,0.705253,-0.389276,-0.363482,0.846372,0.488440,0.660310,-0.060383,0.375796,0.696619,-0.458796,-0.403821,0.791476,0.484620,0.662340,-0.056661,0.390434,0.703185,-0.507311,-0.137058,0.850794,0.486240,0.658620,-0.046325,0.389148,0.708565,-0.434620,-0.200109,0.878101,0.489030,0.658500,-0.046591,0.393308,0.708918,-0.451360,-0.010243,0.892283,0.489060,0.656890,-0.056666,0.394778,0.703609,-0.509696,0.022463,0.860061,0.486370,0.657170,0.049603,0.374790,0.701254,0.334941,-0.487687,0.806211,0.512390,0.662280,0.058482,0.382549,0.700550,0.491771,-0.266925,0.828802,0.514440,0.660390,0.047734,0.381578,0.705409,0.391158,-0.357324,0.848124,0.511550,0.660310,0.060398,0.375765,0.696785,0.468439,-0.397409,0.789070,0.515370,0.662340,0.046396,0.389122,0.708652,0.434842,-0.198726,0.878305,0.510960,0.658500,0.056731,0.390395,0.703307,0.508381,-0.138910,0.849854,0.513750,0.658620,0.046665,0.393270,0.709014,0.450388,-0.007668,0.892800,0.510940,0.656890,0.056708,0.394754,0.703696,0.508767,0.025077,0.860539,0.513620,0.657170,-0.068613,0.384594,0.693889,-0.621399,-0.179580,0.762637,0.482800,0.660460,-0.070572,0.377740,0.690335,-0.626844,-0.313263,0.713395,0.481810,0.662390,-0.066959,0.392413,0.696634,-0.620912,-0.063131,0.781334,0.483560,0.658700,-0.066554,0.397080,0.697001,-0.616319,0.067404,0.784607,0.483770,0.657360,-0.074914,0.399947,0.688835,-0.727523,0.099213,0.678872,0.481200,0.657610,0.070416,0.377784,0.690405,0.634100,-0.304631,0.710716,0.518180,0.662390,0.068593,0.384582,0.693991,0.630146,-0.179814,0.755369,0.517190,0.660460,0.066984,0.392390,0.696734,0.627262,-0.074401,0.775246,0.516430,0.658700,0.066605,0.397044,0.697144,0.616812,0.063480,0.784546,0.516220,0.657360,0.074960,0.399909,0.688973,0.730645,0.088334,0.677020,0.518790,0.657610,-0.081788,0.402165,0.680036,-0.813036,0.070117,0.577976,0.478610,0.658050,-0.086662,0.402525,0.672076,-0.869798,-0.024975,0.492775,0.476260,0.658530,0.081755,0.402163,0.680110,0.817684,0.069940,0.571403,0.521380,0.658050,0.086692,0.402486,0.672267,0.874441,-0.012510,0.484970,0.523730,0.658530,-0.090351,0.403811,0.665769,-0.800133,-0.292911,0.523441,0.474030,0.658360,-0.090019,0.401748,0.665502,-0.869293,-0.143776,0.472925,0.474370,0.658920,0.089920,0.401777,0.665511,0.874522,-0.130179,0.467189,0.525620,0.658920,0.090253,0.403842,0.665789,0.799613,-0.298938,0.520821,0.525960,0.658360,-0.005753,0.391733,0.721083,-0.091693,-0.108903,0.989814,0.498790,0.656260,-0.005830,0.400099,0.721011,-0.069954,0.105168,0.991991,0.498770,0.654820,-0.000001,0.399966,0.721647,-0.003173,0.111528,0.993756,0.500000,0.654900,0.000050,0.391618,0.721509,-0.004949,-0.105594,0.994397,0.500000,0.656260,0.005778,0.391704,0.721140,0.090963,-0.106546,0.990138,0.501200,0.656260,0.005884,0.400079,0.721057,0.067730,0.105661,0.992093,0.501220,0.654820,-0.008215,0.355694,0.578721,0.038109,0.999044,-0.021427,0.498412,0.651639,-0.008239,0.374734,0.476774,0.049042,0.846053,0.530837,0.498400,0.651540,0.000029,0.355584,0.578725,0.000705,0.999774,-0.021246,0.500000,0.651690,0.000030,0.374495,0.476763,0.001000,0.848217,0.529648,0.500000,0.651590,0.000020,0.407285,0.719817,-0.001255,0.535265,0.844683,0.500000,0.653190,-0.006335,0.407477,0.719419,-0.008523,0.522291,0.852725,0.498600,0.653130,0.008301,0.374720,0.476768,-0.047535,0.846195,0.530750,0.501590,0.651540,0.008277,0.355688,0.578724,-0.037154,0.999080,-0.021414,0.501577,0.651639,0.006375,0.407474,0.719423,0.005964,0.523460,0.852030,0.501390,0.653130,0.040675,0.368240,0.699056,0.190262,-0.639680,0.744721,0.510360,0.664340,0.032856,0.362569,0.695351,0.106307,-0.628472,0.770533,0.508680,0.666370,0.041401,0.362089,0.693484,0.175068,-0.608082,0.774331,0.510990,0.666560,0.032517,0.368264,0.700967,0.117860,-0.679975,0.723701,0.508230,0.664290,0.025530,0.363156,0.696507,0.074337,-0.638448,0.766066,0.506770,0.666190,0.025455,0.368581,0.701884,0.075967,-0.704648,0.705479,0.506480,0.664230,0.042256,0.354803,0.688414,0.212293,-0.441367,0.871853,0.511630,0.668980,0.033610,0.345900,0.687109,0.164463,-0.095829,0.981717,0.509370,0.671350,0.042987,0.345102,0.685086,0.273452,-0.095457,0.957137,0.512090,0.671720,0.033218,0.355495,0.690384,0.125899,-0.447466,0.885395,0.509090,0.668720,0.025550,0.346618,0.688063,0.083802,-0.116443,0.989656,0.507050,0.671060,0.025327,0.356190,0.691623,0.086406,-0.464256,0.881476,0.506950,0.668510,0.018903,0.368719,0.702544,0.085052,-0.718533,0.690273,0.504830,0.664190,0.018964,0.363257,0.697358,0.083391,-0.637582,0.765856,0.505030,0.666180,0.018557,0.346951,0.688604,0.035638,-0.161689,0.986198,0.505170,0.671010,0.018712,0.356299,0.692349,0.085297,-0.476876,0.874822,0.505130,0.668510,0.012477,0.355968,0.692897,0.074482,-0.487216,0.870099,0.503450,0.668600,0.012345,0.346796,0.689034,-0.000538,-0.221830,0.975085,0.503480,0.671060,-0.040591,0.368307,0.698868,-0.187636,-0.636730,0.747909,0.489630,0.664340,-0.032810,0.362599,0.695223,-0.106142,-0.620895,0.776674,0.491310,0.666370,-0.032376,0.368360,0.700661,-0.117441,-0.681630,0.722210,0.491760,0.664290,-0.041400,0.362125,0.693368,-0.170366,-0.602616,0.779634,0.489000,0.666560,-0.025269,0.368678,0.701649,-0.084751,-0.705454,0.703670,0.493510,0.664230,-0.025433,0.363207,0.696378,-0.082016,-0.632359,0.770322,0.493220,0.666190,-0.042224,0.354827,0.688271,-0.209574,-0.441163,0.872613,0.488370,0.668980,-0.033611,0.345942,0.686981,-0.163944,-0.093375,0.982041,0.490620,0.671350,-0.033182,0.355524,0.690291,-0.125509,-0.445279,0.886552,0.490900,0.668720,-0.043086,0.345091,0.685055,-0.273732,-0.093256,0.957274,0.487910,0.671720,-0.025311,0.356242,0.691514,-0.088330,-0.463027,0.881932,0.493040,0.668510,-0.025562,0.346636,0.687991,-0.085651,-0.113500,0.989839,0.492940,0.671060,-0.018814,0.368741,0.702462,-0.093990,-0.715081,0.692693,0.495160,0.664190,-0.018887,0.363260,0.697309,-0.090633,-0.638324,0.764414,0.494960,0.666180,-0.018556,0.346983,0.688525,-0.033412,-0.157963,0.986880,0.494820,0.671010,-0.018639,0.356341,0.692247,-0.084082,-0.477424,0.874641,0.494860,0.668510,-0.012378,0.356029,0.692762,-0.079248,-0.487681,0.869418,0.496540,0.668600,-0.012279,0.346843,0.688932,-0.003792,-0.218832,0.975755,0.496510,0.671060,0.000056,0.355451,0.693467,-0.001918,-0.513440,0.858123,0.500000,0.668690,0.006064,0.346599,0.689027,-0.026048,-0.279573,0.959771,0.501750,0.671100,0.006195,0.355651,0.693193,0.050373,-0.503472,0.862542,0.501730,0.668670,0.000054,0.346508,0.688936,-0.001290,-0.305966,0.952041,0.500000,0.671120,-0.006098,0.346633,0.688978,0.016935,-0.278405,0.960314,0.498240,0.671100,-0.006193,0.355634,0.693204,-0.060101,-0.502480,0.862498,0.498260,0.668670,0.050850,0.368490,0.696447,0.287493,-0.583428,0.759578,0.513170,0.664320,0.061525,0.369473,0.692253,0.447003,-0.513242,0.732647,0.516210,0.664270,0.051609,0.362069,0.690952,0.281274,-0.589639,0.757107,0.513910,0.666560,0.062084,0.362927,0.686837,0.449665,-0.560049,0.695806,0.517020,0.666450,-0.050722,0.368573,0.696225,-0.285535,-0.574008,0.767454,0.486820,0.664320,-0.051802,0.362016,0.690949,-0.276598,-0.584786,0.762574,0.486080,0.666560,-0.061525,0.369476,0.692149,-0.440427,-0.506649,0.741169,0.483790,0.664270,-0.062197,0.362897,0.686809,-0.446833,-0.556212,0.700692,0.482970,0.666450,0.071813,0.364986,0.680469,0.629758,-0.496399,0.597489,0.519970,0.666340,0.071463,0.371546,0.686144,0.631915,-0.431506,0.643806,0.519050,0.664230,-0.071931,0.364952,0.680466,-0.624758,-0.495213,0.603691,0.480020,0.666340,-0.071570,0.371528,0.686084,-0.627318,-0.428725,0.650129,0.480940,0.664230,-0.026027,0.334331,0.689720,-0.080453,0.157884,0.984175,0.492870,0.674020,-0.019689,0.318545,0.692931,0.061919,0.072897,0.995416,0.494780,0.677560,-0.018928,0.334601,0.689365,0.044509,0.132925,0.990126,0.494770,0.673780,-0.026943,0.317858,0.692882,-0.085205,0.061525,0.994462,0.492940,0.677910,-0.012761,0.334493,0.688423,0.117360,0.084091,0.989523,0.496480,0.673690,-0.013152,0.318428,0.692033,0.162008,0.080526,0.983498,0.496480,0.677360,-0.044185,0.331887,0.686445,-0.316291,0.126734,0.940158,0.487890,0.675190,-0.035389,0.316098,0.691485,-0.231334,0.044057,0.971876,0.490770,0.678580,-0.034406,0.333061,0.688691,-0.203326,0.150748,0.967437,0.490550,0.674580,-0.045156,0.314650,0.688414,-0.364755,0.014392,0.930992,0.488300,0.679290,0.026097,0.334306,0.689796,0.078917,0.156145,0.984577,0.507120,0.674020,0.019702,0.318525,0.692988,-0.064266,0.072668,0.995284,0.505210,0.677560,0.026933,0.317859,0.692901,0.084409,0.061142,0.994553,0.507050,0.677910,0.019057,0.334614,0.689357,-0.044480,0.130906,0.990396,0.505230,0.673780,0.013117,0.318474,0.691988,-0.166013,0.080547,0.982828,0.503510,0.677360,0.012794,0.334467,0.688493,-0.120995,0.080676,0.989369,0.503520,0.673690,0.044224,0.331855,0.686555,0.317631,0.125424,0.939883,0.512100,0.675190,0.035402,0.316081,0.691548,0.230070,0.043096,0.972219,0.509220,0.678580,0.045149,0.314630,0.688494,0.370472,0.012075,0.928765,0.511690,0.679290,0.034390,0.333072,0.688704,0.202614,0.149761,0.967739,0.509440,0.674580,-0.013308,0.297367,0.691012,0.141894,-0.207818,0.967821,0.496560,0.682630,-0.020026,0.297052,0.691577,0.044584,-0.216935,0.975168,0.494900,0.682720,-0.013518,0.276113,0.682704,0.110911,-0.531445,0.839800,0.496560,0.688200,-0.020425,0.275608,0.683163,0.021125,-0.548972,0.835574,0.494910,0.688100,-0.027330,0.296406,0.691292,-0.086605,-0.224172,0.970694,0.493160,0.682900,-0.027944,0.275316,0.682928,-0.102915,-0.561783,0.820858,0.493200,0.688020,-0.035704,0.295418,0.689838,-0.244538,-0.234449,0.940869,0.491190,0.683260,-0.036322,0.275391,0.681068,-0.266894,-0.566252,0.779825,0.491310,0.688020,-0.045130,0.294687,0.686420,-0.406276,-0.250316,0.878796,0.488990,0.683750,-0.045759,0.275738,0.676909,-0.424272,-0.562758,0.709434,0.489170,0.688230,0.013334,0.297361,0.691032,-0.142826,-0.207385,0.967777,0.503430,0.682630,0.020026,0.297055,0.691579,-0.046579,-0.217538,0.974940,0.505090,0.682720,0.027332,0.296391,0.691336,0.085479,-0.225133,0.970571,0.506830,0.682900,0.020421,0.275610,0.683161,-0.021275,-0.549263,0.835379,0.505080,0.688100,0.027925,0.275323,0.682922,0.101972,-0.562358,0.820582,0.506790,0.688020,0.013517,0.276114,0.682704,-0.110091,-0.531796,0.839686,0.503430,0.688200,0.035691,0.295416,0.689858,0.244713,-0.235584,0.940540,0.508800,0.683260,0.045104,0.294694,0.686424,0.411148,-0.249375,0.876795,0.511000,0.683750,0.036328,0.275387,0.681081,0.267221,-0.566507,0.779527,0.508680,0.688020,0.045752,0.275741,0.676908,0.425337,-0.562005,0.709393,0.510820,0.688230,-0.006688,0.318584,0.690467,0.179001,0.083222,0.980323,0.498230,0.677160,-0.000000,0.298139,0.689012,-0.000482,-0.196902,0.980423,0.500000,0.682510,0.000049,0.318959,0.689178,0.001232,0.085131,0.996369,0.500000,0.677070,-0.006657,0.297761,0.690063,0.176465,-0.198294,0.964126,0.498260,0.682550,0.000002,0.277778,0.680808,-0.000761,-0.517031,0.855967,0.500000,0.688330,-0.006815,0.276967,0.681701,0.155873,-0.515781,0.842421,0.498270,0.688290,-0.013413,0.260716,0.668363,0.057325,-0.765202,0.641233,0.496410,0.693900,-0.006321,0.252153,0.654666,0.083363,-0.864898,0.494977,0.498140,0.698640,-0.006688,0.261550,0.668331,0.114091,-0.742207,0.660388,0.498190,0.693890,-0.012605,0.251290,0.653804,0.027170,-0.874857,0.483618,0.496320,0.698800,0.0,0.262227,0.667937,-0.000055,-0.738602,0.674142,0.500000,0.693870,-0.000000,0.252757,0.654664,0.000003,-0.865900,0.500216,0.500000,0.698570,0.006731,0.318624,0.690419,-0.180268,0.084063,0.980019,0.501760,0.677160,0.006654,0.297735,0.690089,-0.176689,-0.197332,0.964283,0.501730,0.682550,0.006805,0.276967,0.681703,-0.156204,-0.516164,0.842126,0.501720,0.688290,0.013413,0.260716,0.668363,-0.057250,-0.765205,0.641236,0.503580,0.693900,0.006321,0.252153,0.654666,-0.083359,-0.864899,0.494975,0.501850,0.698640,0.012605,0.251290,0.653804,-0.027175,-0.874858,0.483616,0.503670,0.698800,0.006688,0.261550,0.668331,-0.114101,-0.742222,0.660370,0.501800,0.693890,-0.006522,0.334352,0.687356,0.126524,0.031404,0.991466,0.498230,0.673590,0.000087,0.334475,0.686486,0.000484,0.005905,0.999982,0.500000,0.673540,-0.340172,0.593568,0.158953,-0.099003,-0.171524,-0.980193,0.903560,0.356150,-0.328217,0.616910,0.155169,0.264178,-0.030490,-0.963992,0.896190,0.349380,-0.327359,0.593489,0.157682,0.285949,-0.150836,-0.946299,0.898740,0.358930,-0.342587,0.617260,0.157177,-0.142961,-0.040076,-0.988917,0.901940,0.347260,-0.328299,0.640325,0.155220,0.287130,0.082281,-0.954351,0.895220,0.340020,-0.344364,0.639959,0.158293,-0.151360,0.082447,-0.985034,0.901710,0.339350,-0.336995,0.568678,0.164702,-0.051208,-0.348083,-0.936064,0.908090,0.366180,-0.325160,0.570632,0.163544,0.315249,-0.275501,-0.908140,0.903370,0.368590,-0.319981,0.549378,0.173901,0.292018,-0.462247,-0.837289,0.910510,0.378630,-0.331149,0.545615,0.176256,-0.010092,-0.576574,-0.816982,0.915820,0.376460,0.023738,0.413951,-0.063792,0.058950,0.029313,-0.997831,0.937190,0.751710,0.050215,0.536370,-0.072541,0.049402,-0.262248,-0.963735,0.930340,0.690340,0.047957,0.413657,-0.061796,0.114235,0.015874,-0.993327,0.925140,0.751630,0.025220,0.537130,-0.074065,0.037098,-0.252623,-0.966853,0.942350,0.691460,0.000000,0.537315,-0.074945,0.000002,-0.249077,-0.968484,0.954270,0.692760,0.0,0.413966,-0.064400,0.000000,0.032833,-0.999461,0.948740,0.751910,-0.286551,0.490909,0.232361,-0.018489,-0.853074,-0.521462,0.942890,0.405430,-0.291162,0.483706,0.255690,-0.358308,-0.920294,0.157081,0.954750,0.402370,-0.301324,0.489006,0.236758,-0.426568,-0.869446,-0.249205,0.946040,0.398930,-0.298579,0.508717,0.211860,0.161984,-0.656472,-0.736753,0.931630,0.398000,-0.311967,0.505352,0.216166,-0.474780,-0.753640,-0.454545,0.936640,0.393340,0.327359,0.593489,0.157682,-0.285936,-0.150834,-0.946303,0.100920,0.360220,0.328217,0.616910,0.155169,-0.264174,-0.030489,-0.963993,0.103450,0.350660,0.340172,0.593568,0.158953,0.099004,-0.171524,-0.980193,0.096090,0.357440,0.342587,0.617260,0.157177,0.142962,-0.040076,-0.988916,0.097710,0.348550,0.328299,0.640325,0.155220,-0.287130,0.082280,-0.954351,0.104420,0.341310,0.344364,0.639959,0.158293,0.151361,0.082447,-0.985034,0.097930,0.340650,0.336995,0.568678,0.164702,0.051209,-0.348083,-0.936064,0.091570,0.367470,0.325160,0.570632,0.163544,-0.315227,-0.275504,-0.908146,0.096290,0.369880,0.319981,0.549378,0.173901,-0.291998,-0.462254,-0.837292,0.089160,0.379930,0.331149,0.545615,0.176256,0.010094,-0.576574,-0.816983,0.083850,0.377760,-0.047957,0.413657,-0.061796,-0.114235,0.015874,-0.993327,0.074850,0.751630,-0.050215,0.536370,-0.072541,-0.049404,-0.262249,-0.963735,0.069650,0.690340,-0.023738,0.413951,-0.063792,-0.058950,0.029313,-0.997830,0.062800,0.751710,-0.025220,0.537130,-0.074065,-0.037098,-0.252624,-0.966853,0.057640,0.691460,0.000000,0.537315,-0.074945,0.000002,-0.249077,-0.968484,0.045720,0.692760,0.0,0.413966,-0.064400,0.000000,0.032833,-0.999461,0.051250,0.751910,0.286551,0.490909,0.232361,0.018482,-0.853074,-0.521462,0.056760,0.406750,0.291162,0.483706,0.255690,0.358290,-0.920298,0.157099,0.044910,0.403700,0.301324,0.489006,0.236758,0.426576,-0.869444,-0.249199,0.053620,0.400250,0.298579,0.508717,0.211860,-0.161982,-0.656476,-0.736750,0.068020,0.399310,0.311967,0.505352,0.216166,0.474795,-0.753636,-0.454535,0.063030,0.394650,-0.292985,0.594725,0.242906,-0.959016,-0.177663,0.220734,0.951690,0.351980,-0.281143,0.594431,0.256491,-0.445223,-0.480718,0.755438,0.959110,0.353140,-0.293030,0.603281,0.249929,-0.957801,-0.145312,0.247996,0.954900,0.348670,-0.282164,0.585390,0.248142,-0.617339,-0.491503,0.614262,0.955570,0.356630,-0.280765,0.603970,0.262100,-0.413994,-0.582404,0.699581,0.962680,0.350340,-0.293028,0.611572,0.254676,-0.661797,-0.445562,0.602909,0.957950,0.345460,-0.292981,0.584089,0.227187,-0.970622,-0.119386,0.208901,0.945500,0.356810,-0.294224,0.580636,0.220584,-0.940360,0.000407,0.340181,0.942540,0.358180,-0.286731,0.573352,0.232852,-0.776849,-0.420074,0.469088,0.949130,0.360740,-0.285862,0.566553,0.229106,-0.803078,-0.279434,0.526291,0.948140,0.362830,-0.297216,0.577272,0.213895,-0.625526,0.320940,0.711136,0.940380,0.359170,-0.286894,0.559018,0.227680,-0.834214,-0.071370,0.546803,0.947410,0.365080,0.284700,0.649924,0.091937,0.984631,-0.105720,-0.139017,0.791220,0.620910,0.292014,0.711761,0.107779,0.995479,-0.059219,-0.074259,0.786490,0.594900,0.289432,0.647257,0.123531,0.973449,-0.045126,-0.224410,0.778690,0.620240,0.292940,0.695263,0.139304,0.990932,0.021219,-0.132681,0.773770,0.600230,-0.290036,0.732068,0.066316,-0.989223,-0.070856,-0.128133,0.197200,0.588490,-0.270471,0.664243,0.004916,-0.947819,-0.136016,-0.288340,0.175080,0.617990,-0.279631,0.655403,0.051745,-0.976328,-0.128754,-0.173797,0.193050,0.620390,-0.282849,0.752422,0.017808,-0.968120,-0.050939,-0.245253,0.178960,0.582910,0.292971,0.594725,0.242903,0.959250,-0.176768,0.220438,0.047970,0.353280,0.281112,0.594429,0.256483,0.445124,-0.480529,0.755617,0.040550,0.354440,0.282146,0.585389,0.248137,0.617380,-0.491133,0.614516,0.044090,0.357920,0.293019,0.603280,0.249926,0.958038,-0.144709,0.247430,0.044770,0.349970,0.280740,0.603968,0.262093,0.413992,-0.582125,0.699815,0.036990,0.351630,0.293007,0.611571,0.254670,0.661644,-0.445117,0.603406,0.041710,0.346760,0.294215,0.580635,0.220582,0.940563,0.000259,0.339619,0.057120,0.359480,0.286725,0.573352,0.232850,0.776967,-0.419755,0.469178,0.050530,0.362040,0.285858,0.566553,0.229105,0.803135,-0.279914,0.525949,0.051520,0.364130,0.292973,0.584089,0.227185,0.970743,-0.118610,0.208781,0.054160,0.358120,0.297194,0.577271,0.213889,0.626012,0.320371,0.710965,0.059280,0.360470,0.286871,0.559017,0.227674,0.834536,-0.072019,0.546226,0.052250,0.366380,-0.289432,0.647257,0.123531,-0.973450,-0.045126,-0.224410,0.221300,0.620240,-0.292014,0.711761,0.107779,-0.995479,-0.059219,-0.074259,0.213500,0.594900,-0.284700,0.649924,0.091937,-0.984631,-0.105720,-0.139017,0.208770,0.620910,-0.292940,0.695263,0.139304,-0.990932,0.021219,-0.132681,0.226220,0.600230,0.296761,0.645793,0.146517,0.915399,0.035675,-0.400963,0.770040,0.619220,0.305535,0.681406,0.170793,0.546223,0.356984,-0.757762,0.762810,0.603870,0.306137,0.643983,0.163694,0.549492,0.116302,-0.827365,0.765080,0.618850,0.297331,0.686475,0.158344,0.928994,0.172431,-0.327471,0.766420,0.602580,-0.142066,0.370393,0.616045,-0.773859,-0.369253,0.514581,0.455160,0.668890,-0.129646,0.368477,0.628850,-0.481054,-0.260686,0.837036,0.458610,0.669230,-0.132533,0.375533,0.629762,-0.435437,-0.336860,0.834817,0.458260,0.666940,-0.138674,0.361098,0.614571,-0.765297,-0.378527,0.520614,0.455700,0.671960,-0.144645,0.378419,0.618088,-0.783319,-0.355455,0.509963,0.455040,0.666410,-0.134760,0.381683,0.631249,-0.451464,-0.372121,0.810991,0.458250,0.665110,-0.121505,0.382711,0.633164,-0.050609,-0.238307,0.969870,0.460510,0.665550,-0.123666,0.387215,0.634741,-0.019452,-0.334266,0.942278,0.460540,0.664070,-0.118759,0.377384,0.632260,-0.189854,-0.086824,0.977966,0.460850,0.667320,-0.157526,0.360694,0.568850,-0.866755,-0.354473,0.350834,0.444170,0.677420,-0.146502,0.355072,0.593181,-0.843327,-0.394293,0.365148,0.451330,0.676420,-0.150404,0.366989,0.595487,-0.864259,-0.353735,0.357669,0.450180,0.672030,-0.152525,0.347133,0.566598,-0.846282,-0.396230,0.356102,0.446140,0.682580,-0.160901,0.372833,0.571857,-0.882329,-0.321479,0.343724,0.443040,0.672760,-0.153258,0.376979,0.598150,-0.874630,-0.329193,0.355885,0.449680,0.668360,-0.139627,0.341857,0.593042,-0.806293,-0.449404,0.384613,0.453680,0.681140,-0.145061,0.332725,0.567561,-0.818279,-0.443445,0.365755,0.449450,0.687430,-0.133283,0.318427,0.575988,-0.796375,-0.473717,0.376003,0.454950,0.691010,-0.128414,0.328664,0.599661,-0.778115,-0.462226,0.425305,0.458120,0.684890,-0.133034,0.350417,0.614698,-0.735453,-0.410092,0.539382,0.457150,0.675970,-0.123158,0.339553,0.619277,-0.707103,-0.392939,0.587881,0.460530,0.679470,-0.115717,0.351312,0.632265,-0.569515,-0.183961,0.801131,0.462670,0.675350,-0.124762,0.360015,0.629368,-0.528404,-0.215812,0.821106,0.459820,0.672460,-0.114385,0.370676,0.633543,-0.372668,0.018480,0.927781,0.462090,0.669750,-0.106756,0.363054,0.637407,-0.541857,0.002221,0.840468,0.464730,0.671860,0.129499,0.368542,0.628806,0.482234,-0.259705,0.836662,0.541380,0.669230,0.141982,0.370430,0.616017,0.770582,-0.375435,0.515026,0.544830,0.668890,0.132436,0.375567,0.629752,0.431451,-0.343978,0.833984,0.541730,0.666940,0.138549,0.361146,0.614559,0.765767,-0.378273,0.520106,0.544290,0.671960,0.118612,0.377448,0.632237,0.188935,-0.089309,0.977920,0.539140,0.667320,0.121440,0.382733,0.633164,0.048222,-0.245740,0.968136,0.539480,0.665550,0.134701,0.381695,0.631282,0.450174,-0.373649,0.811005,0.541740,0.665110,0.123624,0.387218,0.634797,0.021016,-0.335375,0.941850,0.539460,0.664070,0.144616,0.378426,0.618115,0.781853,-0.357490,0.510791,0.544960,0.666410,0.146371,0.355120,0.593131,0.842519,-0.394458,0.366829,0.548660,0.676420,0.157517,0.360697,0.568846,0.865633,-0.355815,0.352244,0.555820,0.677420,0.150335,0.367012,0.595477,0.861928,-0.357966,0.359084,0.549810,0.672030,0.152514,0.347137,0.566594,0.845626,-0.396039,0.357868,0.553850,0.682580,0.153247,0.376982,0.598154,0.873853,-0.330403,0.356671,0.550310,0.668360,0.160890,0.372837,0.571853,0.881882,-0.321815,0.344557,0.556950,0.672760,0.139565,0.341878,0.593025,0.806659,-0.447154,0.386465,0.546310,0.681140,0.133279,0.318428,0.575987,0.795944,-0.473458,0.377241,0.545040,0.691010,0.145059,0.332725,0.567562,0.818444,-0.442185,0.366908,0.550540,0.687430,0.128377,0.328677,0.599646,0.777554,-0.461345,0.427283,0.541870,0.684890,0.123010,0.339604,0.619235,0.707271,-0.395243,0.586132,0.539460,0.679470,0.132933,0.350451,0.614668,0.737722,-0.408552,0.537450,0.542840,0.675970,0.115728,0.351293,0.632368,0.567812,-0.184056,0.802317,0.537320,0.675350,0.124743,0.360009,0.629428,0.531594,-0.211667,0.820125,0.540170,0.672460,0.106641,0.363092,0.637392,0.537413,0.005268,0.843303,0.535260,0.671860,0.114277,0.370713,0.633525,0.370989,0.023182,0.928348,0.537900,0.669750,-0.116984,0.304729,0.594342,-0.783261,-0.485403,0.388442,0.463110,0.692340,-0.112882,0.317015,0.615008,-0.771062,-0.412001,0.485509,0.465220,0.686400,-0.108456,0.330469,0.630697,-0.707246,-0.290923,0.644335,0.466650,0.681060,-0.095581,0.307690,0.634909,-0.794888,-0.303310,0.525506,0.472710,0.686420,-0.091609,0.323420,0.645575,-0.742483,-0.148603,0.653174,0.473190,0.681300,-0.098581,0.293213,0.617540,-0.792629,-0.464886,0.394486,0.471570,0.692050,-0.101908,0.344057,0.639728,-0.629698,-0.124915,0.766732,0.467850,0.676630,-0.095463,0.356107,0.645504,-0.665537,-0.086847,0.741294,0.469170,0.672720,-0.083403,0.350808,0.656521,-0.724765,-0.163329,0.669357,0.473970,0.672820,-0.087089,0.338308,0.651416,-0.699957,-0.067394,0.710998,0.473460,0.676840,0.116949,0.304741,0.594328,0.783150,-0.484803,0.389412,0.536880,0.692340,0.112745,0.317057,0.614977,0.771306,-0.410535,0.486362,0.534770,0.686400,0.098556,0.293220,0.617540,0.792263,-0.464737,0.395398,0.528420,0.692050,0.095502,0.307696,0.634967,0.794774,-0.302642,0.526062,0.527290,0.686420,0.108379,0.330484,0.630697,0.706929,-0.292098,0.644151,0.533340,0.681060,0.091460,0.323446,0.645601,0.742482,-0.147156,0.653503,0.526800,0.681300,0.101830,0.344079,0.639726,0.627318,-0.123639,0.768886,0.532140,0.676630,0.086900,0.338359,0.651416,0.699872,-0.064705,0.711331,0.526530,0.676840,0.083253,0.350848,0.656528,0.725644,-0.163385,0.668390,0.526020,0.672820,0.095173,0.356200,0.645429,0.664588,-0.086118,0.742230,0.530830,0.672720,-0.122621,0.281945,0.545488,-0.708164,-0.640168,0.297806,0.456500,0.706280,-0.139426,0.307953,0.550249,-0.782639,-0.500812,0.369681,0.450160,0.697480,-0.141948,0.295655,0.527290,-0.742317,-0.584585,0.327453,0.446070,0.704420,-0.120909,0.293906,0.569143,-0.759672,-0.549052,0.348483,0.459540,0.699060,-0.100606,0.281027,0.592876,-0.748251,-0.580551,0.321061,0.469180,0.698920,-0.101251,0.269148,0.568145,-0.677488,-0.686846,0.263160,0.467190,0.706330,0.139426,0.307953,0.550249,0.782438,-0.500936,0.369939,0.549830,0.697480,0.122620,0.281945,0.545488,0.708132,-0.639983,0.298279,0.543490,0.706280,0.141948,0.295655,0.527290,0.742277,-0.584578,0.327556,0.553920,0.704420,0.120891,0.293914,0.569136,0.759318,-0.549205,0.349014,0.540450,0.699060,0.101251,0.269148,0.568145,0.677859,-0.686203,0.263879,0.532800,0.706330,0.100544,0.281050,0.592849,0.748179,-0.580207,0.321850,0.530810,0.698920,-0.082880,0.283863,0.640676,-0.781284,-0.460660,0.421174,0.478420,0.690980,-0.080707,0.300353,0.654906,-0.802853,-0.226487,0.551480,0.478700,0.685730,-0.077887,0.318649,0.660988,-0.775673,-0.049328,0.629204,0.478250,0.680830,-0.067789,0.296241,0.670648,-0.716311,-0.244873,0.653404,0.483240,0.684940,-0.067433,0.315775,0.674696,-0.699330,-0.028030,0.714249,0.482180,0.680180,-0.068718,0.278559,0.658502,-0.692491,-0.511319,0.508929,0.483440,0.689780,-0.075109,0.334756,0.663871,-0.737721,-0.008888,0.675047,0.477870,0.676480,-0.073173,0.347479,0.667334,-0.705067,-0.180810,0.685703,0.477960,0.672640,-0.063354,0.345857,0.675605,-0.587424,-0.150588,0.795146,0.481480,0.672320,-0.065499,0.332799,0.674954,-0.649498,0.052695,0.758535,0.481530,0.675960,0.082776,0.283896,0.640627,0.782226,-0.459092,0.421138,0.521570,0.690980,0.080578,0.300394,0.654866,0.802762,-0.225932,0.551841,0.521290,0.685730,0.068722,0.278554,0.658522,0.694484,-0.508595,0.508943,0.516550,0.689780,0.067728,0.296257,0.670644,0.715609,-0.241120,0.655564,0.516750,0.684940,0.077799,0.318658,0.661059,0.775552,-0.048464,0.629421,0.521740,0.680830,0.067235,0.315845,0.674681,0.697023,-0.030256,0.716410,0.517810,0.680180,0.074931,0.334805,0.663869,0.739155,-0.007547,0.673493,0.522120,0.676480,0.065438,0.332801,0.675026,0.651493,0.050027,0.757004,0.518460,0.675960,0.063254,0.345874,0.675645,0.593280,-0.148830,0.791118,0.518510,0.672320,0.073016,0.347534,0.667335,0.707742,-0.180050,0.683142,0.522030,0.672640,-0.055800,0.294860,0.680329,-0.560205,-0.264245,0.785076,0.486460,0.684320,-0.056401,0.276403,0.669818,-0.562768,-0.549932,0.617144,0.486720,0.688850,-0.056325,0.314454,0.683153,-0.520320,-0.018508,0.853770,0.485460,0.679760,-0.054966,0.331817,0.682139,-0.466594,0.097258,0.879108,0.484860,0.675590,-0.053134,0.345107,0.681205,-0.420369,-0.113267,0.900256,0.484830,0.672030,0.055676,0.294899,0.680302,0.562569,-0.259757,0.784884,0.513530,0.684320,0.056413,0.276395,0.669840,0.563164,-0.548573,0.617992,0.513270,0.688850,0.055968,0.314555,0.683067,0.524327,-0.021964,0.851234,0.514530,0.679760,0.054956,0.331797,0.682230,0.469771,0.092801,0.877897,0.515130,0.675590,0.053126,0.345084,0.681309,0.422294,-0.113488,0.899327,0.515170,0.672030,-0.062390,0.355445,0.680403,-0.500568,-0.457044,0.735216,0.482110,0.669170,-0.052320,0.354716,0.685235,-0.336211,-0.456232,0.823902,0.485350,0.669120,0.062354,0.355450,0.680441,0.505625,-0.452982,0.734268,0.517880,0.669170,0.052299,0.354696,0.685335,0.340546,-0.452108,0.824395,0.514640,0.669120,-0.081787,0.360631,0.663720,-0.754936,-0.341159,0.560073,0.475300,0.669170,-0.072081,0.357186,0.673368,-0.653526,-0.422163,0.628238,0.478870,0.669200,0.081602,0.360677,0.663735,0.756524,-0.335813,0.561161,0.524690,0.669170,0.071923,0.357236,0.673368,0.658179,-0.417801,0.626293,0.521120,0.669200,-0.091013,0.365832,0.652306,-0.783735,-0.205369,0.586160,0.471000,0.669030,-0.099675,0.371966,0.642409,-0.727868,-0.056637,0.683375,0.466960,0.668450,0.090914,0.365868,0.652331,0.783922,-0.201203,0.587352,0.528990,0.669030,0.099432,0.372062,0.642338,0.726857,-0.051949,0.684822,0.533030,0.668450,-0.105944,0.378481,0.635793,-0.584487,-0.019834,0.811161,0.464390,0.667090,-0.110534,0.384200,0.633909,-0.385986,-0.131996,0.913013,0.463090,0.665470,0.105776,0.378547,0.635770,0.579175,-0.021082,0.814931,0.535600,0.667090,0.110416,0.384242,0.633885,0.378510,-0.142245,0.914602,0.536900,0.665470,-0.113161,0.388551,0.633957,-0.203695,-0.301747,0.931374,0.462760,0.664120,-0.115176,0.392163,0.635377,-0.112853,-0.419269,0.900821,0.462830,0.662880,0.113168,0.388531,0.634033,0.199068,-0.304388,0.931515,0.537230,0.664120,0.115150,0.392160,0.635417,0.108424,-0.413899,0.903843,0.537160,0.662880,-0.322795,0.700598,0.175163,0.346773,0.606803,-0.715219,0.901790,0.315110,-0.335291,0.714867,0.194018,-0.434932,0.844728,-0.311879,0.912330,0.312330,-0.318814,0.713228,0.192040,0.357481,0.808663,-0.467195,0.908340,0.307630,-0.339906,0.701694,0.176921,-0.496942,0.666891,-0.555252,0.906560,0.318980,-0.326495,0.683519,0.162289,0.330892,0.324106,-0.886265,0.898060,0.323240,-0.343304,0.683039,0.163701,-0.597896,0.348977,-0.721620,0.903050,0.325880,-0.316734,0.719398,0.213234,0.309608,0.941604,-0.132380,0.917290,0.302460,-0.324573,0.715870,0.238750,-0.403091,0.806753,0.432051,0.928080,0.303200,-0.331093,0.720211,0.214680,-0.405626,0.912841,0.046787,0.919530,0.307040,-0.306137,0.643983,0.163694,-0.549492,0.116301,-0.827365,0.234910,0.618850,-0.305535,0.681406,0.170793,-0.546223,0.356985,-0.757761,0.237180,0.603870,-0.296761,0.645793,0.146517,-0.915400,0.035674,-0.400962,0.229950,0.619220,-0.297331,0.686475,0.158344,-0.928994,0.172432,-0.327470,0.233570,0.602580,0.306137,0.643983,0.163694,0.549492,0.116302,-0.827365,0.116930,0.338870,0.316453,0.680746,0.172357,-0.322628,0.327259,-0.888151,0.105600,0.321110,0.317784,0.641809,0.165044,-0.305137,0.110750,-0.945846,0.110560,0.340310,0.305535,0.681406,0.170793,0.546223,0.356984,-0.757762,0.109840,0.317150,0.326495,0.683519,0.162289,-0.330892,0.324106,-0.886265,0.101580,0.324540,0.335291,0.714867,0.194018,0.434941,0.844724,-0.311877,0.087310,0.313650,0.322795,0.700598,0.175163,-0.346773,0.606804,-0.715219,0.097840,0.316420,0.318814,0.713228,0.192040,-0.357479,0.808664,-0.467194,0.091300,0.308950,0.339906,0.701694,0.176921,0.496947,0.666890,-0.555249,0.093080,0.320290,0.343304,0.683039,0.163701,0.597896,0.348977,-0.721620,0.096590,0.327180,0.316734,0.719398,0.213234,-0.309607,0.941609,-0.132346,0.082360,0.303780,0.324582,0.715870,0.238753,0.403400,0.806721,0.431822,0.071570,0.304520,0.331093,0.720211,0.214680,0.405690,0.912816,0.046714,0.080120,0.308360,-0.317784,0.641809,0.165044,0.305137,0.110750,-0.945847,0.889070,0.339020,-0.316453,0.680746,0.172357,0.322627,0.327259,-0.888152,0.894030,0.319800,-0.306137,0.643983,0.163694,-0.549492,0.116301,-0.827365,0.882690,0.337590,-0.305535,0.681406,0.170793,-0.546223,0.356985,-0.757761,0.889790,0.315840,0.296414,0.559546,0.228481,-0.112662,0.825251,0.553414,0.053890,0.368440,0.304205,0.574942,0.211779,-0.005122,0.562662,0.826671,0.061200,0.362010,0.286871,0.559017,0.227674,0.006310,0.779149,0.626807,0.052250,0.366380,0.305155,0.560192,0.231705,-0.227000,0.853106,0.469768,0.054850,0.370930,-0.117321,0.270678,0.527304,-0.617422,-0.761684,0.196539,0.456460,0.712860,-0.096048,0.259283,0.548828,-0.569407,-0.803957,0.171548,0.467400,0.712540,-0.106598,0.260401,0.510199,-0.571642,-0.800002,0.182270,0.457680,0.720200,-0.086183,0.250441,0.530187,-0.518557,-0.837166,0.173928,0.468600,0.719350,0.117321,0.270678,0.527304,0.617421,-0.761684,0.196541,0.543530,0.712860,0.137121,0.282155,0.509653,0.658954,-0.715984,0.230535,0.554410,0.711620,0.106598,0.260401,0.510199,0.571642,-0.800001,0.182272,0.542310,0.720200,0.126084,0.270352,0.493121,0.599100,-0.777613,0.190783,0.553260,0.719590,0.086183,0.250441,0.530187,0.518559,-0.837165,0.173931,0.531390,0.719350,0.096047,0.259283,0.548828,0.569408,-0.803956,0.171549,0.532600,0.712540,-0.296439,0.559547,0.228488,0.112658,0.825272,0.553384,0.945770,0.367140,-0.304224,0.574943,0.211784,0.005097,0.562789,0.826585,0.938460,0.360700,-0.286894,0.559018,0.227680,-0.006286,0.779154,0.626801,0.947410,0.365080,-0.305188,0.560194,0.231714,0.226971,0.853143,0.469715,0.944810,0.369630,-0.308124,0.550302,0.229422,-0.903127,-0.013318,0.429166,0.943310,0.373460,-0.305188,0.560194,0.231714,-0.874185,0.122553,0.469874,0.944810,0.369630,-0.308446,0.538543,0.226201,-0.892244,-0.060911,0.447427,0.941790,0.378440,-0.333697,0.547397,0.180364,-0.941802,-0.336067,-0.008247,0.917480,0.375270,-0.313900,0.508043,0.220033,-0.919931,-0.375706,0.112126,0.938260,0.391850,-0.312972,0.514794,0.223299,-0.895518,-0.001262,0.445023,0.939790,0.388850,-0.334095,0.551367,0.185957,-0.913615,-0.037985,0.404802,0.919670,0.373300,-0.331149,0.545615,0.176256,-0.847716,-0.470304,-0.245341,0.915820,0.376460,0.266575,0.556997,0.265312,0.861396,0.506975,0.031193,0.034020,0.368170,0.259102,0.572573,0.268382,0.862416,0.501721,0.067189,0.033400,0.362180,0.265526,0.560095,0.268220,0.794486,0.458131,-0.398633,0.032880,0.366870,0.259807,0.573505,0.272911,0.648147,0.497578,-0.576474,0.032290,0.361860,0.269758,0.553622,0.260822,0.720632,0.575804,0.386185,0.035990,0.369630,0.305155,0.560192,0.231705,0.873672,0.123589,0.470556,0.054850,0.370930,0.308119,0.550302,0.229421,0.902936,-0.013141,0.429574,0.056350,0.374770,0.308418,0.538541,0.226194,0.892044,-0.060623,0.447864,0.057870,0.379750,0.333697,0.547397,0.180364,0.941839,-0.335968,-0.008076,0.082190,0.376570,0.312969,0.514794,0.223298,0.895504,-0.001182,0.445051,0.059870,0.390160,0.313900,0.508043,0.220033,0.919972,-0.375567,0.112252,0.061400,0.393160,0.334092,0.551367,0.185956,0.913559,-0.037910,0.404936,0.080000,0.374610,0.331149,0.545615,0.176256,0.847735,-0.470287,-0.245307,0.083850,0.377760,-0.259111,0.572573,0.268384,-0.862742,0.500906,0.069064,0.966260,0.360870,-0.265545,0.560096,0.268225,-0.792097,0.460115,-0.401095,0.966780,0.365580,-0.259815,0.573505,0.272913,-0.648333,0.497633,-0.576217,0.967370,0.360550,-0.266600,0.556998,0.265318,-0.860315,0.508857,0.030368,0.965630,0.366870,-0.269833,0.553625,0.260841,-0.720912,0.576245,0.385003,0.963660,0.368330,0.275165,0.552545,0.254813,0.545389,0.667598,0.506818,0.039300,0.370300,0.280395,0.552758,0.247559,0.482178,0.766392,0.424439,0.043360,0.369980,-0.211866,0.445855,0.514331,-0.861682,-0.296496,0.411818,0.411350,0.657030,-0.228804,0.476853,0.502466,-0.888360,-0.284177,0.360639,0.401500,0.647180,-0.228987,0.461219,0.488928,-0.897984,-0.275167,0.343378,0.398850,0.654080,-0.211752,0.464188,0.527847,-0.850078,-0.304291,0.429854,0.413240,0.649300,-0.228127,0.491167,0.514377,-0.878817,-0.290667,0.378410,0.403850,0.641140,-0.211100,0.480892,0.540447,-0.842500,-0.306012,0.443341,0.415250,0.642370,0.211866,0.445855,0.514331,0.861788,-0.296248,0.411776,0.588640,0.657030,0.228776,0.476851,0.502458,0.888572,-0.283245,0.360848,0.598490,0.647180,0.211747,0.464188,0.527846,0.850293,-0.303636,0.429893,0.586750,0.649300,0.228972,0.461219,0.488924,0.898044,-0.274789,0.343522,0.601140,0.654080,0.211088,0.480891,0.540445,0.842926,-0.304076,0.443862,0.584740,0.642370,0.228072,0.491163,0.514365,0.879288,-0.288482,0.378986,0.596140,0.641140,-0.210605,0.495309,0.551642,-0.834605,-0.314728,0.452086,0.417220,0.636680,-0.227780,0.504257,0.525167,-0.869476,-0.301471,0.391314,0.405740,0.635730,0.210494,0.495305,0.551617,0.835573,-0.310164,0.453449,0.582770,0.636680,0.227707,0.504248,0.525152,0.869919,-0.298011,0.392976,0.594260,0.635730,-0.241535,0.500452,0.484883,-0.928955,-0.247455,0.275334,0.390430,0.641710,-0.250141,0.522445,0.470948,-0.953345,-0.213810,0.213116,0.381540,0.636030,-0.250265,0.509299,0.457152,-0.955227,-0.212888,0.205476,0.377460,0.642590,-0.241416,0.513222,0.497092,-0.921529,-0.257024,0.291071,0.393340,0.635820,0.250106,0.522441,0.470942,0.952493,-0.217903,0.212782,0.618450,0.636030,0.241491,0.500451,0.484872,0.929426,-0.245105,0.275846,0.609570,0.641710,0.250130,0.509288,0.457124,0.955382,-0.211286,0.206406,0.622530,0.642590,0.241280,0.513209,0.497061,0.921318,-0.256859,0.291886,0.606650,0.635820,-0.241529,0.487743,0.472805,-0.935501,-0.239399,0.259857,0.387820,0.647270,-0.241388,0.474333,0.460248,-0.939385,-0.221830,0.261435,0.385210,0.653240,-0.249903,0.497107,0.445021,-0.956525,-0.209306,0.203104,0.374720,0.647970,-0.249703,0.485089,0.433763,-0.956406,-0.182125,0.228293,0.372470,0.653160,-0.275167,0.552545,0.254814,-0.546604,0.668113,0.504826,0.960350,0.369000,-0.280395,0.552758,0.247559,-0.482240,0.766304,0.424527,0.956290,0.368680,0.283367,0.553171,0.237685,0.851825,0.186836,0.489374,0.047650,0.368580,0.271481,0.573240,0.250754,0.740121,0.020135,0.672172,0.041150,0.363360,0.273820,0.576887,0.249852,0.682841,-0.168056,0.710975,0.041800,0.362050,0.241507,0.487742,0.472800,0.935813,-0.237504,0.260473,0.612170,0.647270,0.249896,0.497107,0.445019,0.956803,-0.206930,0.204227,0.625270,0.647970,0.241388,0.474333,0.460248,0.939377,-0.221496,0.261746,0.614780,0.653240,0.249700,0.485089,0.433762,0.956451,-0.181787,0.228374,0.627520,0.653160,-0.283372,0.553171,0.237686,-0.851606,0.186291,0.489961,0.952000,0.367280,-0.271486,0.573240,0.250755,-0.740194,0.019680,0.672106,0.958500,0.362060,-0.273828,0.576887,0.249854,-0.682938,-0.168091,0.710873,0.957860,0.360760,0.277055,0.581102,0.249142,0.560459,-0.402287,0.723914,0.042690,0.360180,-0.330126,0.556816,0.191852,-0.875991,0.016288,0.482052,0.923080,0.370660,-0.310305,0.525719,0.224787,-0.846193,0.078411,0.527077,0.940790,0.384000,-0.281240,0.608785,0.266958,-0.489651,-0.860861,0.138420,0.965720,0.348800,-0.293306,0.616557,0.258308,-0.696213,-0.670668,0.255912,0.960110,0.343300,-0.293925,0.619898,0.261462,-0.923919,-0.277892,-0.262965,0.961730,0.341600,-0.282729,0.606692,0.272934,-0.596630,-0.632892,-0.493437,0.968670,0.348050,0.330122,0.556816,0.191851,0.875848,0.016530,0.482304,0.076580,0.371960,0.310305,0.525719,0.224787,0.845953,0.078975,0.527377,0.058870,0.385310,0.281216,0.608784,0.266952,0.489790,-0.860781,0.138426,0.033950,0.350090,0.293265,0.616555,0.258297,0.696448,-0.670427,0.255906,0.039560,0.344610,0.293900,0.619896,0.261456,0.923711,-0.278414,-0.263142,0.037950,0.342910,0.282702,0.606690,0.272927,0.596506,-0.632857,-0.493632,0.030990,0.349330,-0.181559,0.318647,0.469567,-0.805085,-0.509344,0.303985,0.423310,0.705420,-0.205969,0.358193,0.458479,-0.865932,-0.363659,0.343386,0.407980,0.693570,-0.202685,0.337698,0.441231,-0.843449,-0.464648,0.269620,0.406840,0.702950,-0.182125,0.343099,0.497627,-0.842570,-0.388152,0.373381,0.426590,0.693860,-0.175047,0.300784,0.449247,-0.726979,-0.670543,0.147897,0.422280,0.715170,-0.196403,0.320375,0.423542,-0.774641,-0.621644,0.116144,0.405360,0.712360,-0.224156,0.361249,0.408323,-0.878464,-0.424048,0.220191,0.387330,0.699880,-0.218323,0.345112,0.392751,-0.818824,-0.568609,0.078809,0.385690,0.708630,-0.227005,0.380245,0.424048,-0.898301,-0.325974,0.294613,0.389120,0.690910,-0.242615,0.399468,0.394087,-0.922796,-0.288178,0.255737,0.372380,0.688910,-0.239773,0.381479,0.378841,-0.900748,-0.397695,0.174620,0.370570,0.697770,-0.234107,0.366899,0.365085,-0.846733,-0.530571,0.039210,0.369230,0.705810,-0.251134,0.398419,0.355349,-0.915418,-0.380506,0.131245,0.356810,0.695750,-0.245747,0.385346,0.342149,-0.866627,-0.498908,-0.006941,0.355120,0.703340,-0.253751,0.415539,0.370687,-0.935670,-0.262475,0.235855,0.358970,0.686960,0.205969,0.358193,0.458479,0.865932,-0.363659,0.343386,0.592010,0.693570,0.181559,0.318647,0.469567,0.805085,-0.509344,0.303985,0.576680,0.705420,0.202685,0.337698,0.441231,0.843449,-0.464648,0.269620,0.593150,0.702950,0.182125,0.343098,0.497627,0.842570,-0.388152,0.373381,0.573400,0.693860,0.227005,0.380245,0.424048,0.898301,-0.325974,0.294613,0.610870,0.690910,0.224156,0.361249,0.408323,0.878464,-0.424048,0.220192,0.612660,0.699880,0.196403,0.320375,0.423542,0.774642,-0.621644,0.116145,0.594630,0.712360,0.218323,0.345112,0.392751,0.818824,-0.568609,0.078810,0.614300,0.708630,0.175047,0.300784,0.449247,0.726979,-0.670543,0.147897,0.577710,0.715170,0.242615,0.399468,0.394087,0.922796,-0.288178,0.255737,0.627610,0.688910,0.239773,0.381479,0.378841,0.900748,-0.397694,0.174620,0.629420,0.697770,0.253751,0.415539,0.370687,0.935671,-0.262473,0.235854,0.641020,0.686960,0.251134,0.398419,0.355350,0.915418,-0.380506,0.131244,0.643190,0.695750,0.234107,0.366899,0.365085,0.846733,-0.530571,0.039209,0.630760,0.705810,0.245747,0.385346,0.342149,0.866628,-0.498907,-0.006942,0.644870,0.703340,-0.167552,0.307057,0.484960,-0.776818,-0.551152,0.304607,0.431150,0.706940,-0.168844,0.327001,0.508578,-0.826217,-0.434679,0.358358,0.433150,0.697060,-0.161976,0.317185,0.512768,-0.816379,-0.464856,0.342687,0.436400,0.699420,-0.159141,0.299177,0.492298,-0.751739,-0.596760,0.280653,0.434970,0.708390,-0.150089,0.283613,0.473489,-0.654503,-0.733639,0.182755,0.434980,0.717670,-0.160218,0.289910,0.464783,-0.685613,-0.707115,0.172983,0.430620,0.716600,-0.183964,0.307741,0.405834,-0.704423,-0.709742,0.007435,0.404180,0.722710,-0.207627,0.332382,0.376813,-0.745364,-0.665769,-0.034402,0.384260,0.718000,-0.162309,0.288925,0.430216,-0.683186,-0.728086,0.056103,0.421420,0.725890,-0.152770,0.277917,0.414263,-0.756677,-0.640682,0.130254,0.420540,0.735500,-0.172866,0.297403,0.390456,-0.746746,-0.661664,0.067604,0.403180,0.732170,-0.196780,0.322106,0.362478,-0.760623,-0.649182,0.003909,0.383040,0.726760,-0.147802,0.277791,0.445778,-0.671528,-0.731000,0.121196,0.430100,0.727180,-0.137779,0.270974,0.455568,-0.658861,-0.730072,0.181373,0.434790,0.727860,-0.129554,0.257252,0.441261,-0.732948,-0.624718,0.269285,0.434210,0.737210,-0.139282,0.265163,0.430513,-0.756215,-0.622891,0.200363,0.429370,0.736720,0.167552,0.307057,0.484960,0.776817,-0.551152,0.304608,0.568840,0.706940,0.168844,0.327001,0.508578,0.826217,-0.434679,0.358357,0.566840,0.697060,0.160218,0.289910,0.464783,0.685612,-0.707116,0.172983,0.569370,0.716600,0.150089,0.283613,0.473489,0.654504,-0.733639,0.182754,0.565010,0.717670,0.159141,0.299177,0.492298,0.751739,-0.596760,0.280652,0.565020,0.708390,0.161976,0.317185,0.512768,0.816379,-0.464856,0.342686,0.563590,0.699420,0.183964,0.307741,0.405834,0.704422,-0.709742,0.007435,0.595810,0.722710,0.207627,0.332382,0.376813,0.745365,-0.665769,-0.034403,0.615730,0.718000,0.172866,0.297403,0.390456,0.746746,-0.661665,0.067603,0.596810,0.732170,0.196780,0.322106,0.362478,0.760623,-0.649182,0.003908,0.616960,0.726760,0.152770,0.277917,0.414263,0.756677,-0.640683,0.130254,0.579450,0.735500,0.162309,0.288925,0.430216,0.683186,-0.728086,0.056104,0.578570,0.725890,0.147802,0.277791,0.445778,0.671528,-0.731000,0.121195,0.569890,0.727180,0.139282,0.265163,0.430513,0.756215,-0.622891,0.200363,0.570620,0.736720,0.129554,0.257252,0.441261,0.732948,-0.624717,0.269285,0.565790,0.737210,0.137779,0.270974,0.455568,0.658862,-0.730072,0.181371,0.565200,0.727860,-0.128141,0.264771,0.464666,-0.646097,-0.729506,0.224455,0.439930,0.728330,-0.114953,0.256777,0.476539,-0.625192,-0.735692,0.260563,0.447210,0.729010,-0.119813,0.250617,0.450791,-0.702345,-0.635495,0.320714,0.439520,0.737500,-0.106830,0.242841,0.461853,-0.670857,-0.646404,0.363473,0.446810,0.738220,-0.096003,0.246990,0.491858,-0.607402,-0.742982,0.281143,0.458360,0.729960,-0.088871,0.232731,0.474823,-0.657729,-0.637094,0.401874,0.457690,0.739710,-0.067414,0.218519,0.487385,-0.618268,-0.623402,0.478660,0.470690,0.742340,-0.076156,0.238094,0.508466,-0.556987,-0.772677,0.304525,0.469470,0.729530,0.128141,0.264771,0.464666,0.646097,-0.729506,0.224454,0.560060,0.728330,0.140079,0.277822,0.481511,0.627880,-0.755712,0.186189,0.560260,0.718640,0.119813,0.250617,0.450791,0.702345,-0.635495,0.320714,0.560470,0.737500,0.106830,0.242841,0.461853,0.670858,-0.646404,0.363472,0.553180,0.738220,0.114953,0.256777,0.476539,0.625192,-0.735692,0.260562,0.552780,0.729010,0.096003,0.246990,0.491858,0.607402,-0.742981,0.281143,0.541630,0.729960,0.067414,0.218519,0.487386,0.618268,-0.623402,0.478659,0.529300,0.742340,0.088871,0.232731,0.474823,0.657729,-0.637095,0.401873,0.542300,0.739710,0.076156,0.238094,0.508466,0.556987,-0.772677,0.304525,0.530520,0.729530,-0.216598,0.347528,0.338732,-0.789681,-0.612381,-0.037337,0.365650,0.720700,-0.225372,0.356020,0.351430,-0.781754,-0.619784,-0.068770,0.367470,0.713590,-0.231666,0.369562,0.318169,-0.827612,-0.558999,-0.050780,0.350510,0.715280,-0.238476,0.376331,0.329727,-0.812294,-0.574691,-0.099543,0.352910,0.709750,0.225372,0.356020,0.351430,0.781753,-0.619784,-0.068770,0.632520,0.713590,0.216598,0.347528,0.338732,0.789680,-0.612381,-0.037338,0.634350,0.720700,0.238476,0.376331,0.329727,0.812294,-0.574691,-0.099542,0.647080,0.709750,0.231667,0.369562,0.318169,0.827611,-0.559001,-0.050781,0.649480,0.715280,-0.065532,0.247503,0.584062,-0.427612,-0.893414,0.137690,0.479730,0.708600,-0.083977,0.260461,0.589343,-0.630707,-0.738759,0.237579,0.474430,0.704650,-0.078935,0.252143,0.568249,-0.500189,-0.851767,0.155897,0.474660,0.710600,-0.070239,0.254880,0.607163,-0.558429,-0.795777,0.234300,0.479540,0.702650,-0.057236,0.242024,0.561265,-0.333600,-0.931249,0.146580,0.480880,0.715200,-0.070000,0.244859,0.547709,-0.423775,-0.889613,0.170305,0.475800,0.717190,-0.048829,0.233856,0.535294,-0.348499,-0.880203,0.322164,0.481420,0.724980,-0.060842,0.234593,0.523680,-0.449549,-0.830774,0.328208,0.476500,0.727260,-0.041434,0.219666,0.515440,-0.410976,-0.743174,0.528007,0.482260,0.736030,-0.052555,0.218831,0.504874,-0.505252,-0.696482,0.509543,0.477700,0.738640,0.083976,0.260461,0.589343,0.631431,-0.737995,0.238028,0.525560,0.704650,0.065532,0.247503,0.584062,0.427613,-0.893414,0.137690,0.520260,0.708600,0.078935,0.252143,0.568249,0.500191,-0.851766,0.155897,0.525340,0.710600,0.070239,0.254880,0.607163,0.558834,-0.795459,0.234412,0.520450,0.702650,0.070000,0.244859,0.547709,0.423777,-0.889612,0.170306,0.524190,0.717190,0.057236,0.242024,0.561265,0.333601,-0.931249,0.146581,0.519110,0.715200,0.048829,0.233856,0.535294,0.348499,-0.880204,0.322165,0.518570,0.724980,0.060842,0.234593,0.523680,0.449549,-0.830774,0.328208,0.523490,0.727260,0.052555,0.218831,0.504874,0.505251,-0.696482,0.509543,0.522290,0.738640,0.041434,0.219666,0.515440,0.410976,-0.743175,0.528006,0.517730,0.736030,-0.069954,0.265121,0.634519,-0.637335,-0.688322,0.346435,0.481570,0.695770,-0.083882,0.271213,0.615684,-0.718545,-0.621776,0.311589,0.476370,0.697470,0.069950,0.265122,0.634517,0.638637,-0.687226,0.346213,0.518420,0.695770,0.083839,0.271226,0.615661,0.719807,-0.620125,0.311966,0.523620,0.697470,-0.040487,0.242109,0.608609,-0.225621,-0.961740,0.155406,0.487780,0.706130,-0.057763,0.250839,0.621184,-0.453238,-0.853639,0.256664,0.483740,0.701220,-0.053113,0.243685,0.596415,-0.325206,-0.935586,0.137547,0.484040,0.707360,-0.045838,0.248713,0.632214,-0.337720,-0.895053,0.291249,0.487240,0.700220,-0.029723,0.237969,0.583154,-0.128581,-0.984020,0.123170,0.490000,0.712820,-0.045020,0.239388,0.571238,-0.241877,-0.961966,0.126953,0.485220,0.714220,-0.057813,0.261734,0.647809,-0.526841,-0.744864,0.409409,0.485310,0.694550,-0.046874,0.259848,0.656786,-0.403102,-0.782349,0.474804,0.488220,0.693820,0.057763,0.250839,0.621184,0.453278,-0.853614,0.256673,0.516250,0.701220,0.040487,0.242109,0.608609,0.225615,-0.961740,0.155415,0.512210,0.706130,0.053113,0.243685,0.596415,0.325207,-0.935586,0.137547,0.515950,0.707360,0.045838,0.248713,0.632214,0.337687,-0.895060,0.291263,0.512750,0.700220,0.045020,0.239388,0.571238,0.241878,-0.961966,0.126953,0.514770,0.714220,0.029723,0.237969,0.583154,0.128582,-0.984020,0.123170,0.509990,0.712820,0.057813,0.261734,0.647809,0.526553,-0.745145,0.409268,0.514680,0.694550,0.046874,0.259848,0.656785,0.402917,-0.782492,0.474726,0.511770,0.693820,-0.021855,0.239375,0.607748,-0.080247,-0.990645,0.110379,0.493140,0.707530,-0.030351,0.242274,0.622241,-0.172162,-0.965962,0.193074,0.490990,0.704300,-0.035257,0.248456,0.641260,-0.237817,-0.910347,0.338691,0.490200,0.699580,-0.022628,0.243293,0.632434,-0.123305,-0.958175,0.258256,0.493500,0.702530,-0.026536,0.249259,0.647474,-0.146018,-0.905483,0.398470,0.492630,0.699180,-0.016460,0.240567,0.621723,-0.036072,-0.986754,0.158162,0.495260,0.704550,-0.036893,0.259186,0.662552,-0.267464,-0.803322,0.532106,0.490710,0.693630,-0.028065,0.259353,0.665889,-0.128509,-0.805187,0.578930,0.492850,0.693710,0.021855,0.239375,0.607748,0.080249,-0.990644,0.110380,0.506850,0.707530,0.030351,0.242274,0.622241,0.172174,-0.965958,0.193085,0.509000,0.704300,0.016459,0.240567,0.621723,0.036076,-0.986754,0.158163,0.504730,0.704550,0.022628,0.243293,0.632434,0.123328,-0.958171,0.258260,0.506500,0.702530,0.035256,0.248457,0.641260,0.237821,-0.910341,0.338705,0.509790,0.699580,0.026536,0.249259,0.647474,0.146076,-0.905472,0.398474,0.507360,0.699180,0.036891,0.259187,0.662551,0.267282,-0.803392,0.532092,0.509290,0.693630,0.028064,0.259353,0.665888,0.128327,-0.805170,0.578994,0.507140,0.693710,-0.016493,0.244595,0.638899,-0.051902,-0.943078,0.328498,0.495230,0.701440,-0.019156,0.250313,0.651565,-0.062734,-0.889809,0.452000,0.494560,0.698950,-0.011201,0.245852,0.642232,0.051183,-0.927633,0.369970,0.496700,0.700900,-0.012376,0.242074,0.630487,0.030705,-0.972936,0.229025,0.496540,0.702580,-0.009845,0.243517,0.635321,0.092506,-0.953189,0.287876,0.497230,0.701790,0.019155,0.250313,0.651565,0.062751,-0.889807,0.452001,0.505430,0.698950,0.016493,0.244595,0.638899,0.051905,-0.943077,0.328500,0.504760,0.701440,0.012376,0.242074,0.630487,-0.030703,-0.972936,0.229028,0.503450,0.702580,0.009845,0.243517,0.635321,-0.092508,-0.953187,0.287882,0.502760,0.701790,0.011201,0.245852,0.642232,-0.051187,-0.927631,0.369974,0.503290,0.700900,-0.031157,0.220009,0.522792,-0.334480,-0.772016,0.540476,0.487100,0.734320,-0.037365,0.233087,0.543682,-0.267949,-0.913033,0.307529,0.486050,0.723710,-0.025184,0.232177,0.550060,-0.176371,-0.934668,0.308689,0.490650,0.722860,-0.020788,0.219918,0.527943,-0.249679,-0.791516,0.557819,0.491830,0.733240,0.031157,0.220009,0.522792,0.334481,-0.772016,0.540475,0.512890,0.734320,0.037365,0.233087,0.543682,0.267949,-0.913033,0.307529,0.513940,0.723710,0.020788,0.219918,0.527943,0.249680,-0.791517,0.557818,0.508160,0.733240,0.025184,0.232177,0.550060,0.176373,-0.934668,0.308688,0.509340,0.722860,-0.011067,0.238455,0.600932,-0.017416,-0.995073,0.097602,0.496380,0.708470,-0.013184,0.236533,0.579817,-0.043406,-0.989436,0.138323,0.495390,0.713170,-0.008613,0.240026,0.615909,0.023242,-0.990945,0.132245,0.497510,0.705710,-0.000000,0.240036,0.614204,-0.000003,-0.990298,0.138960,0.500000,0.706050,0.0,0.238267,0.599302,-0.000002,-0.994583,0.103944,0.500000,0.708310,0.0,0.236208,0.579539,-0.000001,-0.989108,0.147191,0.500000,0.712550,0.0,0.231150,0.554960,-0.000002,-0.944005,0.329932,0.500000,0.721320,-0.012459,0.231413,0.553696,-0.086234,-0.942721,0.322244,0.495330,0.721860,0.0,0.219477,0.532247,-0.000002,-0.810169,0.586196,0.500000,0.732530,-0.010343,0.219648,0.531132,-0.138930,-0.804766,0.577105,0.496060,0.732660,0.011067,0.238455,0.600932,0.017416,-0.995073,0.097601,0.503610,0.708470,0.013184,0.236533,0.579817,0.043404,-0.989436,0.138323,0.504600,0.713170,0.008613,0.240026,0.615909,-0.023242,-0.990944,0.132246,0.502480,0.705710,0.012459,0.231413,0.553696,0.086232,-0.942721,0.322243,0.504660,0.721860,0.010343,0.219648,0.531132,0.138930,-0.804766,0.577105,0.503930,0.732660,-0.000000,0.241923,0.625019,-0.000002,-0.977854,0.209286,0.500000,0.704090,-0.006664,0.241809,0.626225,0.075684,-0.976974,0.199485,0.498180,0.703600,-0.005676,0.243878,0.634333,0.109187,-0.953505,0.280901,0.498440,0.702030,-0.000000,0.244323,0.633855,0.000003,-0.958748,0.284258,0.500000,0.702390,0.006664,0.241809,0.626225,-0.075685,-0.976973,0.199487,0.501810,0.703600,0.005676,0.243878,0.634333,-0.109187,-0.953504,0.280906,0.501550,0.702030,-0.000000,0.247423,0.643282,0.000006,-0.928873,0.370397,0.500000,0.700960,-0.005769,0.246876,0.643153,0.097853,-0.922449,0.373513,0.498310,0.700860,-0.283327,0.490149,0.273689,-0.478742,-0.709659,0.516905,0.965310,0.402890,-0.277810,0.505315,0.288494,-0.854894,-0.281894,0.435536,0.977760,0.398380,-0.294967,0.623642,0.265315,-0.968614,-0.176887,-0.174638,0.963260,0.339520,-0.285582,0.607945,0.276485,-0.940275,-0.319927,-0.116318,0.970180,0.346110,-0.295981,0.629691,0.271938,-0.992853,-0.118111,0.017106,0.964650,0.335660,-0.286571,0.612365,0.284841,-0.966593,-0.155897,0.203453,0.972980,0.341850,-0.277064,0.581103,0.249144,-0.560533,-0.402392,0.723798,0.956970,0.358890,0.283324,0.490149,0.273688,0.478936,-0.709507,0.516933,0.034340,0.404230,0.277807,0.505314,0.288493,0.854996,-0.281454,0.435622,0.021870,0.399710,0.294941,0.623640,0.265309,0.969073,-0.176239,-0.172733,0.036410,0.340830,0.285556,0.607943,0.276479,0.940831,-0.318979,-0.114409,0.029490,0.347390,0.295918,0.629688,0.271923,0.992758,-0.118491,0.019806,0.035030,0.336970,0.286505,0.612362,0.284824,0.966450,-0.153833,0.205692,0.026710,0.343150,0.296010,0.638526,0.281866,0.948806,-0.169447,0.266562,0.034120,0.329580,0.285920,0.649698,0.300891,0.904094,-0.094529,0.416748,0.026520,0.318070,0.286354,0.630637,0.294007,0.921994,-0.161678,0.351833,0.025630,0.330110,0.296599,0.652525,0.287173,0.835076,-0.162137,0.525699,0.035300,0.320170,-0.286502,0.630646,0.294039,-0.922200,-0.160659,0.351761,0.974040,0.328800,-0.285978,0.649702,0.300900,-0.904636,-0.092815,0.415956,0.973140,0.316740,-0.296048,0.638529,0.281873,-0.949790,-0.167369,0.264361,0.965540,0.328260,-0.296638,0.652528,0.287179,-0.836391,-0.159921,0.524285,0.964350,0.318840,0.292039,0.590337,0.224389,0.961669,0.269523,-0.050500,0.055500,0.355770,0.291992,0.600563,0.240195,0.939147,0.274490,-0.206538,0.048800,0.351500,0.289870,0.595549,0.223371,0.923501,0.368905,-0.105142,0.055820,0.353790,0.288093,0.607127,0.237290,0.884496,0.405565,-0.230617,0.050300,0.349000,-0.313093,0.701587,0.261976,-0.494121,0.587665,0.640699,0.939380,0.301020,-0.303292,0.684873,0.279446,-0.625929,0.325121,0.708879,0.951580,0.302760,-0.286691,0.671480,0.300021,-0.894012,0.016949,0.447723,0.967150,0.305610,-0.298932,0.668729,0.286859,-0.717827,0.035673,0.695307,0.960020,0.309540,0.313118,0.701589,0.261986,0.494583,0.587418,0.640568,0.060270,0.302330,0.303307,0.684874,0.279453,0.626069,0.324587,0.709000,0.048070,0.304080,0.286674,0.671481,0.300032,0.892226,0.016562,0.451285,0.032500,0.306940,0.298945,0.668730,0.286868,0.717400,0.034172,0.695823,0.039630,0.310860,-0.170361,0.359772,0.539454,-0.857400,-0.343935,0.382849,0.435950,0.681800,-0.165150,0.346186,0.538493,-0.844154,-0.381221,0.376928,0.438010,0.686400,-0.159461,0.333797,0.538630,-0.831087,-0.410530,0.375178,0.440700,0.690480,0.170361,0.359772,0.539454,0.857329,-0.343955,0.382990,0.564040,0.681800,0.165150,0.346186,0.538493,0.844085,-0.381210,0.377092,0.561980,0.686400,0.159461,0.333797,0.538630,0.831069,-0.410456,0.375300,0.559290,0.690480,-0.265615,0.433457,0.329517,-0.968638,-0.248070,0.014188,0.338740,0.687560,-0.254450,0.402958,0.323556,-0.899823,-0.428455,-0.082123,0.342860,0.700140,-0.259444,0.414341,0.339172,-0.941064,-0.331614,0.066560,0.346580,0.692760,-0.266667,0.446432,0.347889,-0.971028,-0.166503,0.171409,0.344220,0.679800,-0.261494,0.429596,0.356167,-0.952236,-0.224141,0.207381,0.350410,0.684380,-0.247289,0.394032,0.310385,-0.859721,-0.487769,-0.151531,0.339730,0.706550,-0.241074,0.387366,0.298825,-0.889498,-0.453856,-0.052995,0.336870,0.711960,0.265615,0.433457,0.329517,0.968638,-0.248070,0.014187,0.661260,0.687560,0.254450,0.402958,0.323556,0.899824,-0.428455,-0.082123,0.657130,0.700140,0.259444,0.414341,0.339172,0.941064,-0.331615,0.066559,0.653410,0.692760,0.261494,0.429596,0.356167,0.952274,-0.224026,0.207332,0.649580,0.684380,0.266667,0.446432,0.347889,0.971026,-0.166418,0.171506,0.655770,0.679800,0.247289,0.394032,0.310385,0.859722,-0.487768,-0.151530,0.660260,0.706550,0.241075,0.387366,0.298826,0.889497,-0.453857,-0.052996,0.663120,0.711960,-0.268859,0.453706,0.307191,-0.969588,-0.200621,-0.140178,0.324610,0.683450,-0.270327,0.457285,0.325944,-0.985280,-0.170592,0.011060,0.332310,0.678610,-0.272778,0.477913,0.309630,-0.991707,-0.110918,-0.064912,0.320800,0.673250,-0.273355,0.479939,0.326017,-0.995189,-0.087624,0.043838,0.327970,0.668780,-0.270482,0.467040,0.342435,-0.981954,-0.116265,0.149163,0.337910,0.671580,-0.272614,0.482002,0.338378,-0.988830,-0.072420,0.130269,0.333320,0.666250,-0.265884,0.459751,0.289500,-0.950986,-0.224492,-0.212671,0.315310,0.683250,-0.263437,0.466877,0.273251,-0.958777,-0.271154,-0.084978,0.305920,0.681860,-0.270912,0.480684,0.294962,-0.979561,-0.180744,-0.088273,0.313100,0.673310,-0.269630,0.484560,0.279227,-0.873458,-0.471959,0.119689,0.304410,0.672160,0.268859,0.453706,0.307191,0.969594,-0.200601,-0.140169,0.675380,0.683450,0.270327,0.457285,0.325944,0.985289,-0.170539,0.011067,0.667680,0.678610,0.270482,0.467040,0.342435,0.981927,-0.116282,0.149326,0.662080,0.671580,0.273353,0.479939,0.326016,0.995248,-0.087148,0.043441,0.672020,0.668780,0.272610,0.482002,0.338377,0.988892,-0.072192,0.129924,0.666670,0.666250,0.272777,0.477913,0.309629,0.991769,-0.110392,-0.064874,0.679190,0.673250,0.265884,0.459751,0.289500,0.950989,-0.224482,-0.212667,0.684680,0.683250,0.270911,0.480684,0.294962,0.979657,-0.180412,-0.087878,0.686890,0.673310,0.263437,0.466877,0.273251,0.958779,-0.271151,-0.084972,0.694070,0.681860,0.269630,0.484560,0.279226,0.873480,-0.471865,0.119902,0.695580,0.672160,-0.275393,0.514472,0.299513,-0.987967,-0.132131,0.080388,0.309750,0.659220,-0.277810,0.505315,0.288494,-0.854894,-0.281894,0.435536,0.305390,0.663360,-0.275943,0.524658,0.312343,-0.995170,-0.075615,0.062595,0.314550,0.654200,-0.271500,0.514168,0.351527,-0.987173,-0.045315,0.153091,0.334290,0.652640,-0.274279,0.521506,0.333171,-0.995362,-0.036035,0.089200,0.324840,0.652580,-0.267849,0.498863,0.365693,-0.974490,-0.077431,0.210651,0.342740,0.656950,-0.263453,0.481185,0.377404,-0.964899,-0.110079,0.238436,0.350540,0.662140,-0.258567,0.467488,0.389840,-0.955539,-0.146520,0.255885,0.357820,0.665000,-0.251850,0.455255,0.406522,-0.947509,-0.182553,0.262489,0.366660,0.666870,0.277807,0.505314,0.288493,0.854996,-0.281454,0.435622,0.694600,0.663360,0.275362,0.514471,0.299506,0.987920,-0.131534,0.081936,0.690240,0.659220,0.275887,0.524659,0.312329,0.995192,-0.075085,0.062896,0.685440,0.654200,0.274245,0.521505,0.333164,0.995422,-0.035552,0.088716,0.675160,0.652580,0.271504,0.514168,0.351528,0.987039,-0.044735,0.154116,0.665700,0.652640,0.267844,0.498863,0.365692,0.974327,-0.076541,0.211725,0.657250,0.656950,0.263434,0.481186,0.377399,0.965012,-0.109235,0.238368,0.649450,0.662140,0.258566,0.467488,0.389840,0.955642,-0.146163,0.255706,0.642170,0.665000,0.251850,0.455255,0.406522,0.947528,-0.182471,0.262480,0.633330,0.666870,-0.292059,0.590338,0.224395,-0.961706,0.269341,-0.050756,0.944160,0.354470,-0.292017,0.600564,0.240202,-0.939348,0.273944,-0.206350,0.950860,0.350190,-0.289876,0.595550,0.223372,-0.923088,0.369623,-0.106241,0.943840,0.352490,-0.288121,0.607129,0.237298,-0.884090,0.406054,-0.231310,0.949370,0.347690,0.284107,0.614257,0.233230,0.949252,0.314469,0.005482,0.052920,0.346090,0.289643,0.596829,0.218715,0.945148,0.299360,0.130683,0.057910,0.353440,0.292740,0.598438,0.210123,0.789656,0.152450,0.594308,0.059720,0.353220,0.283022,0.621853,0.227492,0.929032,0.065777,0.364106,0.055220,0.344040,-0.284119,0.614258,0.233233,-0.949111,0.314903,0.004957,0.946740,0.344790,-0.289647,0.596829,0.218716,-0.945025,0.300012,0.130077,0.941750,0.352140,-0.283027,0.621853,0.227493,-0.929034,0.065940,0.364071,0.944450,0.342730,-0.292749,0.598438,0.210126,-0.789507,0.152487,0.594496,0.939940,0.351920,0.346461,0.640125,0.165358,0.992497,-0.051971,0.110672,0.096320,0.340210,0.341768,0.675361,0.179589,0.929610,-0.037348,0.366647,0.092030,0.327840,0.341374,0.637032,0.172381,0.937730,-0.087293,0.336218,0.093210,0.340900,0.345974,0.681910,0.170284,0.994926,0.076561,0.065276,0.095140,0.327080,0.344364,0.639959,0.158293,0.954332,-0.004548,-0.298715,0.097930,0.340650,-0.256587,0.520228,0.436042,-0.970222,-0.177849,0.164433,0.368100,0.642340,-0.256134,0.507728,0.424300,-0.968723,-0.174825,0.176102,0.365410,0.647700,-0.256045,0.495849,0.414028,-0.964950,-0.148559,0.216339,0.363280,0.652550,-0.261572,0.512609,0.398360,-0.972975,-0.115220,0.200109,0.354700,0.648960,-0.261813,0.526507,0.408041,-0.978608,-0.135232,0.155043,0.356640,0.643420,-0.261977,0.540217,0.419249,-0.980944,-0.141985,0.132629,0.359250,0.637680,0.256532,0.520221,0.436033,0.969543,-0.177426,0.168838,0.631890,0.642340,0.256119,0.507728,0.424297,0.968212,-0.176346,0.177393,0.634580,0.647700,0.261895,0.526506,0.408061,0.979058,-0.136352,0.151177,0.643350,0.643420,0.262199,0.540216,0.419303,0.980942,-0.139696,0.135044,0.640740,0.637680,0.261543,0.512609,0.398353,0.973519,-0.115222,0.197447,0.645290,0.648960,0.256035,0.495849,0.414026,0.964981,-0.149018,0.215884,0.636710,0.652550,-0.256643,0.533996,0.450077,-0.970565,-0.174564,0.165924,0.372280,0.635470,-0.262404,0.553734,0.432902,-0.981240,-0.140447,0.132069,0.363240,0.631120,0.256547,0.533984,0.450057,0.970461,-0.176553,0.164424,0.627710,0.635470,0.262165,0.553701,0.432849,0.981369,-0.138737,0.132919,0.636750,0.631120,-0.345974,0.681910,0.170284,-0.994926,0.076561,0.065276,0.904510,0.325770,-0.346461,0.640125,0.165358,-0.992498,-0.051968,0.110668,0.903320,0.338910,-0.341768,0.675361,0.179589,-0.929615,-0.037338,0.366636,0.907610,0.326540,-0.341374,0.637032,0.172381,-0.937752,-0.087270,0.336163,0.906440,0.339600,-0.344364,0.639959,0.158293,-0.954333,-0.004548,-0.298710,0.901710,0.339350,0.328618,0.644856,0.207034,0.794591,-0.045991,0.605401,0.075700,0.336320,0.336923,0.615890,0.196727,0.889139,-0.022838,0.457067,0.080230,0.347440,0.339550,0.627650,0.183527,0.979984,-0.055660,0.191137,0.087380,0.343750,0.338068,0.661987,0.191947,0.923849,0.002298,0.382751,0.084790,0.331500,-0.328628,0.644857,0.207037,-0.794788,-0.045900,0.605149,0.923960,0.335010,-0.339552,0.627650,0.183527,-0.980028,-0.055571,0.190938,0.912270,0.342450,-0.336929,0.615891,0.196729,-0.889235,-0.022692,0.456887,0.919430,0.346130,-0.338068,0.661987,0.191947,-0.923903,0.002398,0.382618,0.914860,0.330200,0.287055,0.630864,0.218656,0.473476,-0.432469,0.767327,0.057760,0.342970,0.303990,0.598859,0.204336,0.156340,-0.063305,0.985672,0.063360,0.353290,0.303323,0.628969,0.219110,0.156248,-0.503464,0.849771,0.062070,0.341670,0.317856,0.600314,0.209782,0.047148,-0.103210,0.993541,0.068350,0.352700,-0.268520,0.574250,0.403194,-0.987548,-0.114255,0.108142,0.347760,0.625000,-0.272912,0.586275,0.372770,-0.991022,-0.085499,0.102789,0.333100,0.621390,-0.267874,0.557275,0.391897,-0.985568,-0.105399,0.132468,0.345120,0.631770,-0.274578,0.618321,0.383795,-0.991634,-0.095025,0.087357,0.334490,0.608300,-0.267401,0.538610,0.382736,-0.981171,-0.087310,0.172281,0.343780,0.639660,-0.271886,0.562385,0.364500,-0.989763,-0.063540,0.127799,0.332350,0.631280,0.272753,0.586269,0.372731,0.990869,-0.087395,0.102673,0.666890,0.621390,0.268304,0.574247,0.403147,0.987678,-0.114915,0.106236,0.652230,0.625000,0.267769,0.557270,0.391874,0.986149,-0.105187,0.128238,0.654870,0.631770,0.274771,0.618324,0.383868,0.991610,-0.099123,0.082974,0.665500,0.608300,0.271798,0.562382,0.364482,0.989512,-0.062405,0.130275,0.667640,0.631280,0.267251,0.538607,0.382707,0.981463,-0.086224,0.171159,0.656210,0.639660,-0.268390,0.585857,0.417337,-0.987458,-0.115510,0.107630,0.352130,0.619670,-0.273785,0.625853,0.404964,-0.990808,-0.097101,0.094186,0.342350,0.604500,-0.267847,0.595002,0.431608,-0.985690,-0.105897,0.131152,0.357070,0.615080,-0.272397,0.629656,0.420679,-0.987528,-0.085917,0.131938,0.348310,0.602310,0.268436,0.585842,0.417365,0.986888,-0.116769,0.111433,0.647860,0.619670,0.267653,0.594992,0.431572,0.985168,-0.110603,0.131188,0.642920,0.615080,0.273927,0.625852,0.405016,0.990119,-0.102132,0.096087,0.657640,0.604500,0.272465,0.629654,0.420715,0.987142,-0.093625,0.129557,0.651680,0.602310,-0.266696,0.604450,0.445205,-0.983640,-0.088914,0.156676,0.361450,0.610490,-0.270557,0.634477,0.435830,-0.983755,-0.070248,0.165198,0.354060,0.599460,0.266748,0.604433,0.445266,0.982892,-0.096831,0.156678,0.638540,0.610490,0.270939,0.634481,0.435981,0.983608,-0.079702,0.161753,0.645930,0.599460,-0.275909,0.665624,0.417632,-0.985922,-0.068057,0.152729,0.344190,0.588860,-0.272713,0.666190,0.435004,-0.981724,-0.057059,0.181554,0.351750,0.587380,-0.277058,0.702341,0.421841,-0.981570,-0.041629,0.186515,0.343720,0.574450,-0.273040,0.699553,0.441603,-0.979073,-0.027470,0.201645,0.352830,0.574150,0.276320,0.665614,0.417759,0.986146,-0.069720,0.150515,0.655800,0.588860,0.273217,0.666191,0.435191,0.982180,-0.056356,0.179295,0.648240,0.587380,0.273435,0.699564,0.441733,0.979471,-0.020092,0.200583,0.647160,0.574150,0.277271,0.702350,0.421928,0.981811,-0.032935,0.186983,0.656270,0.574450,-0.280589,0.705146,0.402352,-0.987468,-0.057353,0.147030,0.335120,0.574610,-0.279611,0.666764,0.380758,-0.992201,-0.091663,0.084471,0.328850,0.590650,-0.278023,0.666409,0.400324,-0.990617,-0.082360,0.109067,0.336930,0.589510,-0.283366,0.707406,0.381771,-0.991721,-0.073550,0.105260,0.326200,0.575040,0.280934,0.705150,0.402484,0.987284,-0.053232,0.149790,0.664870,0.574610,0.279768,0.666775,0.380835,0.992654,-0.093207,0.077141,0.671140,0.590650,0.283566,0.707420,0.381881,0.991805,-0.075045,0.103398,0.673790,0.575040,0.278483,0.666403,0.400472,0.990655,-0.084108,0.107366,0.663060,0.589510,-0.275702,0.595141,0.349058,-0.991886,-0.079747,0.099007,0.322050,0.621540,-0.277861,0.624693,0.354601,-0.992165,-0.086645,0.090012,0.321690,0.610230,-0.274461,0.571528,0.342835,-0.992827,-0.054572,0.106381,0.321810,0.630950,-0.278201,0.592585,0.325106,-0.987611,-0.069905,0.140492,0.312010,0.625980,-0.277179,0.572150,0.321638,-0.987057,-0.061243,0.148215,0.312470,0.633840,-0.283167,0.665506,0.333302,-0.994996,-0.076466,0.064307,0.308670,0.596180,-0.281387,0.666134,0.357066,-0.993118,-0.088629,0.076560,0.318840,0.593590,-0.286179,0.707384,0.334943,-0.995775,-0.079663,0.045681,0.305880,0.578400,-0.285209,0.708669,0.358781,-0.994063,-0.081875,0.071661,0.316090,0.576130,0.275600,0.595140,0.349036,0.991920,-0.080042,0.098426,0.677940,0.621540,0.277812,0.624689,0.354609,0.992406,-0.087940,0.086006,0.678300,0.610230,0.278084,0.592580,0.325078,0.987491,-0.069347,0.141609,0.687980,0.625980,0.274458,0.571529,0.342837,0.992859,-0.052864,0.106945,0.678180,0.630950,0.277130,0.572148,0.321626,0.987095,-0.060217,0.148383,0.687530,0.633840,0.282980,0.665493,0.333266,0.994903,-0.079398,0.062166,0.691320,0.596180,0.281325,0.666134,0.357066,0.993163,-0.091411,0.072608,0.681150,0.593590,0.285453,0.708676,0.358887,0.993767,-0.086704,0.070070,0.683900,0.576130,0.286493,0.707391,0.335055,0.995691,-0.083943,0.039410,0.694110,0.578400,0.317025,0.632289,0.215448,0.531352,-0.216097,0.819126,0.068060,0.339650,0.329038,0.606046,0.205726,0.574076,-0.020900,0.818535,0.073800,0.350550,-0.287061,0.630865,0.218657,-0.473276,-0.432491,0.767438,0.941900,0.341660,-0.304012,0.598860,0.204341,-0.156115,-0.063376,0.985704,0.936300,0.351990,-0.303342,0.628970,0.219115,-0.156362,-0.503452,0.849757,0.937590,0.340360,-0.317892,0.600315,0.209792,-0.047568,-0.103112,0.993532,0.931310,0.351390,-0.317034,0.632289,0.215451,-0.531654,-0.216048,0.818943,0.931600,0.338350,-0.329047,0.606046,0.205729,-0.574432,-0.020754,0.818289,0.925860,0.349240,0.265678,0.574148,0.275884,0.364664,0.277926,-0.888694,0.030130,0.362100,0.267266,0.557806,0.270065,0.705472,0.430159,-0.563270,0.032120,0.367710,0.273781,0.574206,0.278360,0.334932,0.108183,-0.936011,0.026890,0.361940,0.271010,0.554129,0.273338,0.677453,0.352210,-0.645760,0.030500,0.369590,-0.102519,0.402936,0.652240,-0.527531,-0.652352,0.544196,0.468500,0.659100,-0.098707,0.403898,0.656711,-0.493316,-0.699546,0.516986,0.469930,0.658730,-0.106975,0.402309,0.647396,-0.552888,-0.588160,0.590240,0.466870,0.659300,-0.112347,0.401677,0.642752,-0.475381,-0.534512,0.698792,0.464970,0.659600,0.102441,0.402956,0.652276,0.536153,-0.646414,0.542853,0.531490,0.659100,0.106754,0.402400,0.647331,0.561248,-0.584760,0.585710,0.533120,0.659300,0.112155,0.401747,0.642689,0.470559,-0.534589,0.701989,0.535020,0.659600,-0.242383,0.440706,0.429801,-0.934883,-0.223023,0.276140,0.379040,0.668900,-0.229347,0.423493,0.457632,-0.903606,-0.275044,0.328400,0.393390,0.671150,-0.211229,0.405119,0.487127,-0.871215,-0.305248,0.384459,0.408540,0.673860,-0.192901,0.393235,0.518115,-0.862337,-0.303501,0.405292,0.422520,0.674200,0.242383,0.440706,0.429801,0.934873,-0.223002,0.276192,0.620960,0.668900,0.229347,0.423493,0.457632,0.903609,-0.274986,0.328441,0.606600,0.671150,0.211229,0.405119,0.487127,0.871241,-0.305192,0.384444,0.591450,0.673860,0.192901,0.393235,0.518115,0.862320,-0.303481,0.405344,0.577470,0.674200,-0.267391,0.478705,0.261884,-0.831695,-0.547226,0.093956,0.297630,0.677660,-0.263866,0.468609,0.256332,-0.948037,-0.304885,0.090943,0.297660,0.683540,-0.261640,0.453691,0.247603,-0.964281,-0.201595,0.171816,0.297110,0.691730,-0.267585,0.471454,0.237908,-0.948076,-0.299652,0.106582,0.288550,0.684930,-0.267027,0.460104,0.228050,-0.976664,-0.170340,0.130810,0.286440,0.691740,-0.269645,0.478536,0.245305,-0.826749,-0.561764,0.030134,0.290090,0.680090,-0.255677,0.426940,0.252767,-0.958443,-0.117805,0.259823,0.305390,0.701300,-0.251147,0.412157,0.262185,-0.955818,-0.122998,0.266991,0.312880,0.706560,-0.245911,0.395594,0.272824,-0.951643,-0.194830,0.237523,0.321660,0.712770,-0.253811,0.392100,0.252349,-0.941060,-0.107275,0.320778,0.312020,0.715730,-0.246983,0.378980,0.264445,-0.913300,-0.158532,0.375166,0.320530,0.720090,-0.258097,0.402471,0.241055,-0.968189,-0.092815,0.232369,0.304800,0.712570,-0.261792,0.408538,0.225168,-0.984514,-0.106224,0.139459,0.295950,0.713200,-0.266438,0.442614,0.217343,-0.987616,-0.115691,0.105973,0.284860,0.700500,-0.264380,0.415842,0.201648,-0.992169,-0.114506,0.049882,0.282840,0.714330,-0.261264,0.435143,0.238420,-0.970309,-0.120755,0.209569,0.296780,0.700360,0.267391,0.478705,0.261884,0.831694,-0.547226,0.093961,0.702360,0.677660,0.263866,0.468609,0.256332,0.948037,-0.304885,0.090946,0.702330,0.683540,0.269645,0.478536,0.245305,0.826750,-0.561763,0.030134,0.709900,0.680090,0.267585,0.471454,0.237908,0.948076,-0.299652,0.106582,0.711440,0.684930,0.261640,0.453691,0.247603,0.964280,-0.201600,0.171818,0.702880,0.691730,0.267027,0.460104,0.228050,0.976664,-0.170341,0.130812,0.713550,0.691740,0.255676,0.426940,0.252767,0.958444,-0.117806,0.259821,0.694600,0.701300,0.251146,0.412157,0.262185,0.955820,-0.122995,0.266983,0.687110,0.706560,0.258097,0.402471,0.241055,0.968189,-0.092812,0.232372,0.695190,0.712570,0.253811,0.392100,0.252349,0.941061,-0.107271,0.320776,0.687970,0.715730,0.245911,0.395594,0.272824,0.951644,-0.194829,0.237518,0.678330,0.712770,0.246983,0.378980,0.264445,0.913301,-0.158531,0.375164,0.679460,0.720090,0.261792,0.408538,0.225168,0.984513,-0.106224,0.139465,0.704040,0.713200,0.266438,0.442614,0.217343,0.987616,-0.115693,0.105975,0.715130,0.700500,0.261264,0.435143,0.238420,0.970307,-0.120759,0.209575,0.703220,0.700360,0.264380,0.415842,0.201648,0.992169,-0.114507,0.049884,0.717150,0.714330,-0.236484,0.365299,0.281180,-0.897409,-0.238515,0.371170,0.333150,0.723020,-0.238080,0.379961,0.288783,-0.925023,-0.333450,0.182052,0.333850,0.716450,-0.227124,0.362212,0.308141,-0.879673,-0.454758,0.139176,0.348280,0.720210,-0.223538,0.349437,0.300413,-0.878993,-0.330667,0.343555,0.347960,0.726440,0.236484,0.365299,0.281180,0.897409,-0.238516,0.371170,0.666840,0.723020,0.238080,0.379961,0.288783,0.925023,-0.333453,0.182049,0.666140,0.716450,0.227124,0.362213,0.308141,0.879672,-0.454761,0.139175,0.651710,0.720210,0.223538,0.349437,0.300413,0.878993,-0.330667,0.343555,0.652030,0.726440,-0.207578,0.329111,0.319527,-0.860616,-0.402681,0.311749,0.363260,0.732130,-0.190340,0.313115,0.351357,-0.823577,-0.546789,0.150806,0.381980,0.733170,-0.210978,0.339398,0.328225,-0.843532,-0.522021,0.126282,0.364110,0.726500,-0.187706,0.304078,0.341530,-0.853354,-0.431603,0.292412,0.380400,0.738430,0.207578,0.329111,0.319527,0.860616,-0.402681,0.311750,0.636730,0.732130,0.190340,0.313115,0.351357,0.823576,-0.546791,0.150805,0.618010,0.733170,0.187706,0.304078,0.341530,0.853354,-0.431604,0.292413,0.619590,0.738430,0.210978,0.339398,0.328225,0.843532,-0.522022,0.126282,0.635880,0.726500,-0.244243,0.349097,0.257755,-0.900540,-0.212445,0.379333,0.323990,0.733940,-0.232224,0.338723,0.277001,-0.866880,-0.235525,0.439371,0.337420,0.734680,-0.218314,0.327238,0.296304,-0.846374,-0.273915,0.456752,0.351420,0.735930,-0.221368,0.302841,0.277736,-0.852058,-0.257205,0.455899,0.346800,0.750240,-0.206650,0.295628,0.298747,-0.825850,-0.254431,0.503226,0.360140,0.748940,-0.235000,0.310163,0.254304,-0.891988,-0.262053,0.368356,0.332100,0.752000,-0.203633,0.313110,0.313609,-0.840716,-0.324084,0.433780,0.363530,0.738840,-0.186032,0.293062,0.332510,-0.851601,-0.357113,0.383726,0.377550,0.743950,-0.193428,0.288376,0.315620,-0.824013,-0.271451,0.497310,0.369400,0.748570,-0.183019,0.281020,0.328650,-0.841750,-0.304605,0.445727,0.378980,0.750180,0.244243,0.349097,0.257755,0.900540,-0.212445,0.379334,0.676000,0.733940,0.232224,0.338723,0.277001,0.866880,-0.235525,0.439370,0.662570,0.734680,0.235000,0.310163,0.254304,0.891987,-0.262054,0.368357,0.667890,0.752000,0.221368,0.302841,0.277736,0.852058,-0.257205,0.455898,0.653190,0.750240,0.218314,0.327238,0.296304,0.846374,-0.273915,0.456752,0.648570,0.735930,0.206651,0.295628,0.298747,0.825850,-0.254431,0.503226,0.639850,0.748940,0.203633,0.313110,0.313609,0.840716,-0.324084,0.433781,0.636460,0.738840,0.193428,0.288376,0.315620,0.824012,-0.271451,0.497311,0.630590,0.748570,0.186032,0.293062,0.332510,0.851600,-0.357112,0.383729,0.622440,0.743950,0.183019,0.281020,0.328650,0.841750,-0.304604,0.445728,0.621010,0.750180,-0.256645,0.365881,0.224710,-0.977517,-0.152325,0.145798,0.304480,0.732260,-0.252531,0.358563,0.241006,-0.945750,-0.186177,0.266261,0.313700,0.732590,-0.244774,0.316999,0.230685,-0.934293,-0.245490,0.258518,0.318900,0.753890,-0.250689,0.322221,0.207473,-0.967875,-0.194089,0.159833,0.306370,0.756460,0.256645,0.365881,0.224710,0.977517,-0.152324,0.145798,0.695510,0.732260,0.252531,0.358563,0.241006,0.945750,-0.186175,0.266261,0.686290,0.732590,0.250689,0.322221,0.207473,0.967876,-0.194089,0.159832,0.693620,0.756460,0.244774,0.316999,0.230685,0.934292,-0.245491,0.258518,0.681090,0.753890,-0.253584,0.325896,0.183424,-0.987000,-0.129656,0.094976,0.293740,0.760230,-0.259702,0.376825,0.178734,-0.993296,-0.112968,0.024514,0.279560,0.736920,-0.255717,0.331358,0.154778,-0.995328,-0.075415,0.060284,0.277580,0.764020,-0.258366,0.370525,0.205075,-0.989297,-0.129347,0.067531,0.294130,0.734510,0.253584,0.325896,0.183424,0.987000,-0.129656,0.094975,0.706250,0.760230,0.259702,0.376825,0.178734,0.993296,-0.112968,0.024514,0.720430,0.736920,0.258366,0.370525,0.205075,0.989297,-0.129347,0.067533,0.705860,0.734510,0.255717,0.331358,0.154778,0.995328,-0.075415,0.060284,0.722410,0.764020,-0.167433,0.287752,0.378723,-0.823019,-0.529679,0.205136,0.402180,0.738290,-0.148299,0.267429,0.402074,-0.832806,-0.489221,0.259030,0.419340,0.741290,-0.147279,0.255614,0.390844,-0.863971,-0.366505,0.345295,0.417720,0.747210,-0.165521,0.277852,0.367730,-0.859895,-0.408054,0.306714,0.400440,0.743760,-0.166961,0.257772,0.344188,-0.859285,-0.281380,0.427147,0.392390,0.758610,-0.149367,0.231225,0.364743,-0.873913,-0.257664,0.412172,0.411470,0.768310,-0.165154,0.266744,0.356108,-0.869641,-0.342835,0.355231,0.397250,0.751430,-0.147573,0.242482,0.378560,-0.875575,-0.313006,0.367963,0.415570,0.757590,0.167433,0.287751,0.378723,0.823018,-0.529681,0.205133,0.597810,0.738290,0.165521,0.277852,0.367730,0.859895,-0.408053,0.306714,0.599550,0.743760,0.147279,0.255614,0.390844,0.863972,-0.366503,0.345295,0.582270,0.747210,0.148299,0.267429,0.402074,0.832807,-0.489222,0.259028,0.580650,0.741290,0.165154,0.266744,0.356108,0.869641,-0.342832,0.355233,0.602740,0.751430,0.149367,0.231225,0.364743,0.873913,-0.257664,0.412172,0.588520,0.768310,0.166961,0.257772,0.344188,0.859284,-0.281379,0.427148,0.607600,0.758610,0.147573,0.242482,0.378560,0.875575,-0.313003,0.367963,0.584420,0.757590,-0.102811,0.229688,0.449474,-0.706075,-0.527044,0.472952,0.445170,0.745150,-0.114894,0.237419,0.439180,-0.738246,-0.521058,0.428358,0.438270,0.744280,-0.112374,0.221914,0.428603,-0.752272,-0.412067,0.514090,0.436770,0.751490,-0.100987,0.214115,0.438278,-0.720704,-0.422253,0.549807,0.443270,0.752510,-0.122676,0.229732,0.419214,-0.792742,-0.391616,0.467115,0.431300,0.750220,-0.124741,0.244588,0.429732,-0.778850,-0.500863,0.377531,0.432890,0.743530,-0.113431,0.184238,0.403541,-0.769292,-0.303846,0.562021,0.433470,0.774830,-0.100150,0.194802,0.426338,-0.719941,-0.366676,0.589266,0.442250,0.763300,-0.111447,0.203438,0.417161,-0.758304,-0.349758,0.550132,0.435760,0.762220,-0.101579,0.173869,0.412912,-0.715883,-0.336010,0.612052,0.440430,0.776120,-0.124392,0.196169,0.393850,-0.817828,-0.280073,0.502709,0.427250,0.773230,-0.122274,0.212828,0.407607,-0.802418,-0.334629,0.494115,0.430010,0.760990,-0.087424,0.219468,0.460301,-0.687601,-0.515169,0.511669,0.454580,0.746210,-0.071197,0.204343,0.467426,-0.669074,-0.497319,0.552281,0.464280,0.748710,-0.087609,0.203993,0.447494,-0.690598,-0.430568,0.581107,0.451140,0.752950,-0.073241,0.190242,0.453886,-0.670507,-0.434822,0.601124,0.459700,0.754700,-0.087698,0.185278,0.434955,-0.680992,-0.390029,0.619780,0.449530,0.763850,-0.074293,0.174144,0.441942,-0.659421,-0.406203,0.632585,0.457730,0.765040,-0.088402,0.165128,0.422176,-0.667332,-0.370630,0.645989,0.448320,0.776400,-0.074721,0.156653,0.430795,-0.645270,-0.392136,0.655634,0.457140,0.776370,0.102811,0.229688,0.449474,0.706075,-0.527044,0.472951,0.554820,0.745150,0.114894,0.237420,0.439180,0.738246,-0.521059,0.428358,0.561720,0.744280,0.124741,0.244588,0.429732,0.778849,-0.500863,0.377531,0.567100,0.743530,0.122676,0.229732,0.419214,0.792742,-0.391616,0.467116,0.568690,0.750220,0.112374,0.221914,0.428603,0.752271,-0.412068,0.514090,0.563220,0.751490,0.100987,0.214115,0.438278,0.720704,-0.422253,0.549806,0.556720,0.752510,0.113431,0.184238,0.403541,0.769292,-0.303847,0.562021,0.566520,0.774830,0.100150,0.194802,0.426338,0.719942,-0.366675,0.589265,0.557750,0.763300,0.101579,0.173869,0.412912,0.715885,-0.336010,0.612051,0.559560,0.776120,0.111447,0.203438,0.417161,0.758303,-0.349759,0.550133,0.564230,0.762220,0.122274,0.212828,0.407607,0.802417,-0.334630,0.494115,0.569980,0.760990,0.124392,0.196169,0.393850,0.817828,-0.280075,0.502709,0.572740,0.773230,0.087424,0.219468,0.460301,0.687601,-0.515170,0.511668,0.545410,0.746210,0.071197,0.204343,0.467426,0.669074,-0.497319,0.552281,0.535710,0.748710,0.087609,0.203993,0.447494,0.690599,-0.430567,0.581107,0.548850,0.752950,0.073241,0.190242,0.453886,0.670507,-0.434820,0.601125,0.540290,0.754700,0.087698,0.185278,0.434955,0.680993,-0.390028,0.619780,0.550460,0.763850,0.074293,0.174144,0.441942,0.659421,-0.406202,0.632585,0.542260,0.765040,0.088402,0.165128,0.422176,0.667333,-0.370629,0.645988,0.551670,0.776400,0.074721,0.156653,0.430795,0.645270,-0.392136,0.655634,0.542850,0.776370,-0.057535,0.187939,0.469733,-0.653921,-0.462200,0.598965,0.471940,0.754810,-0.060455,0.176398,0.458279,-0.668777,-0.425100,0.609940,0.468490,0.760110,-0.052170,0.196943,0.482339,-0.611005,-0.512443,0.603386,0.476300,0.750940,-0.042679,0.181209,0.480003,-0.615064,-0.429721,0.661087,0.480950,0.758190,-0.047065,0.173565,0.470921,-0.653841,-0.416847,0.631451,0.478100,0.761560,-0.049750,0.163970,0.461746,-0.673015,-0.410175,0.615474,0.475980,0.765930,-0.061803,0.163079,0.447811,-0.664905,-0.408711,0.625185,0.467020,0.768150,-0.050979,0.152867,0.452990,-0.674506,-0.408916,0.614679,0.474960,0.771540,-0.061991,0.148426,0.438301,-0.650302,-0.404344,0.643128,0.466690,0.776760,-0.051013,0.140727,0.444894,-0.661888,-0.419349,0.621330,0.474740,0.777600,0.057535,0.187939,0.469733,0.653921,-0.462200,0.598964,0.528050,0.754810,0.060455,0.176398,0.458279,0.668776,-0.425099,0.609942,0.531500,0.760110,0.047065,0.173565,0.470921,0.653842,-0.416847,0.631450,0.521890,0.761560,0.049750,0.163970,0.461746,0.673014,-0.410174,0.615475,0.524010,0.765930,0.052170,0.196943,0.482339,0.611006,-0.512444,0.603384,0.523690,0.750940,0.042679,0.181209,0.480003,0.615064,-0.429723,0.661086,0.519040,0.758190,0.061803,0.163079,0.447811,0.664905,-0.408710,0.625186,0.532970,0.768150,0.061991,0.148426,0.438301,0.650302,-0.404344,0.643127,0.533300,0.776760,0.050979,0.152866,0.452990,0.674504,-0.408916,0.614680,0.525040,0.771540,0.051013,0.140727,0.444894,0.661887,-0.419349,0.621331,0.525260,0.777600,-0.017678,0.205003,0.513437,-0.310415,-0.614894,0.724946,0.493320,0.742760,-0.026418,0.204859,0.508875,-0.400253,-0.608232,0.685457,0.489050,0.743760,-0.022957,0.190152,0.500353,-0.453938,-0.467934,0.758273,0.490950,0.751980,-0.015450,0.190067,0.504401,-0.354988,-0.474047,0.805769,0.494390,0.751190,-0.030039,0.189193,0.494990,-0.513501,-0.460304,0.724180,0.487370,0.753350,-0.035071,0.203931,0.502512,-0.466724,-0.593099,0.656051,0.484570,0.745420,-0.008834,0.204821,0.516300,-0.175972,-0.621235,0.763611,0.496870,0.742380,0.0,0.204760,0.517274,-0.000001,-0.624841,0.780752,0.500000,0.742310,-0.007765,0.189715,0.506964,-0.199264,-0.482538,0.852907,0.497360,0.750850,-0.000000,0.189526,0.507853,0.000001,-0.487190,0.873296,0.500000,0.750770,0.017678,0.205003,0.513437,0.310415,-0.614895,0.724946,0.506670,0.742760,0.026418,0.204859,0.508875,0.400253,-0.608232,0.685457,0.510940,0.743760,0.035071,0.203931,0.502512,0.466723,-0.593098,0.656052,0.515420,0.745420,0.030039,0.189193,0.494990,0.513498,-0.460305,0.724182,0.512620,0.753350,0.022956,0.190152,0.500353,0.453939,-0.467934,0.758272,0.509050,0.751980,0.015450,0.190067,0.504401,0.354987,-0.474048,0.805769,0.505600,0.751190,0.008834,0.204821,0.516300,0.175971,-0.621235,0.763611,0.503120,0.742380,0.007765,0.189715,0.506964,0.199262,-0.482540,0.852907,0.502630,0.750850,-0.043840,0.201641,0.493851,-0.539461,-0.559590,0.629159,0.480510,0.747840,-0.036768,0.186338,0.488230,-0.564063,-0.446914,0.694335,0.484060,0.755450,0.043840,0.201641,0.493851,0.539460,-0.559589,0.629160,0.519480,0.747840,0.036768,0.186338,0.488230,0.564061,-0.446915,0.694336,0.515930,0.755450,-0.134854,0.253453,0.418648,-0.818742,-0.479104,0.316419,0.428080,0.742670,-0.133599,0.239858,0.407816,-0.839225,-0.364379,0.403645,0.426470,0.748990,-0.135805,0.210912,0.381724,-0.859647,-0.258296,0.440784,0.421550,0.772030,-0.133775,0.224837,0.395704,-0.850331,-0.314750,0.421746,0.424900,0.760000,0.134854,0.253453,0.418648,0.818742,-0.479104,0.316418,0.571910,0.742670,0.133599,0.239858,0.407816,0.839225,-0.364378,0.403646,0.573520,0.748990,0.135805,0.210912,0.381724,0.859647,-0.258297,0.440783,0.578440,0.772030,0.133775,0.224837,0.395704,0.850331,-0.314749,0.421746,0.575090,0.760000,-0.265687,0.574148,0.275886,-0.364336,0.278228,-0.888734,0.969520,0.360810,-0.267330,0.557809,0.270082,-0.704291,0.431206,-0.563947,0.967530,0.366410,-0.271055,0.554131,0.273350,-0.678601,0.351569,-0.644903,0.969140,0.368290,-0.273790,0.574206,0.278363,-0.335142,0.108397,-0.935911,0.972760,0.360650,0.280921,0.573785,0.280508,0.437284,-0.013994,-0.899215,0.023830,0.361660,0.276547,0.549003,0.277438,0.795770,0.198373,-0.572187,0.028000,0.373380,0.285977,0.573816,0.283134,0.759964,-0.088525,-0.643909,0.021510,0.361250,0.280131,0.540644,0.283226,0.988930,-0.025752,-0.146130,0.024400,0.379000,-0.285574,0.591390,0.291260,-0.981339,0.031534,0.189683,0.296810,0.629050,-0.281544,0.590827,0.305260,-0.971870,-0.022815,0.234412,0.303210,0.628130,-0.280988,0.573588,0.304934,-0.961630,-0.061822,0.267293,0.304910,0.634810,-0.286327,0.575269,0.293922,-0.961360,-0.051203,0.270491,0.299500,0.635110,-0.276576,0.549004,0.277446,-0.795930,0.197414,-0.572297,0.971640,0.372080,-0.280930,0.573785,0.280510,-0.437527,-0.013942,-0.899097,0.975820,0.360380,-0.280142,0.540644,0.283229,-0.988832,-0.025951,-0.146754,0.975230,0.377690,-0.285987,0.573817,0.283136,-0.759928,-0.088554,-0.643947,0.978130,0.359970,0.281398,0.545396,0.289074,0.982443,-0.174472,0.066069,0.020020,0.376320,0.287977,0.574885,0.287090,0.993328,-0.075783,-0.086926,0.019710,0.360370,0.281429,0.549315,0.293424,0.956143,-0.168342,0.239691,0.016410,0.374790,0.286193,0.575263,0.293887,0.960529,-0.051168,0.273433,0.015950,0.359630,0.285517,0.591387,0.291246,0.980953,0.031503,0.191673,0.703190,0.629050,0.281547,0.590827,0.305266,0.971982,-0.023162,0.233910,0.696780,0.628130,0.286193,0.575263,0.293887,0.960529,-0.051168,0.273433,0.700490,0.635110,0.280955,0.573586,0.304926,0.961889,-0.062372,0.266231,0.695080,0.634810,-0.284286,0.668793,0.314163,-0.990864,-0.062567,0.119473,0.300220,0.596210,-0.286691,0.671480,0.300021,-0.894012,0.016949,0.447723,0.294050,0.595460,-0.286596,0.701847,0.312037,-0.994359,-0.058630,0.088385,0.296620,0.582390,-0.291151,0.696232,0.285996,-0.844106,0.332676,0.420490,0.286510,0.586600,0.284071,0.668791,0.314116,0.990549,-0.063204,0.121725,0.699770,0.596210,0.286544,0.701842,0.312035,0.994385,-0.061348,0.086230,0.703370,0.582390,0.286674,0.671481,0.300032,0.892226,0.016562,0.451285,0.705940,0.595460,0.291189,0.696236,0.286013,0.843694,0.331798,0.422008,0.713480,0.586600,-0.285022,0.742833,0.385896,-0.988544,-0.053838,0.141007,0.326210,0.561190,-0.289614,0.775069,0.365153,-0.994734,-0.040369,0.094206,0.315850,0.550550,-0.287669,0.743979,0.362328,-0.994135,-0.068482,0.083700,0.315860,0.562420,-0.289303,0.742390,0.337187,-0.996809,-0.070469,0.037498,0.305110,0.565030,-0.291029,0.775310,0.338578,-0.998540,-0.040293,0.035975,0.304310,0.552680,-0.276292,0.740716,0.431251,-0.973725,-0.009856,0.227514,0.345920,0.558680,-0.281066,0.742020,0.408470,-0.980650,-0.029885,0.193475,0.336170,0.559580,0.285319,0.742822,0.386023,0.988398,-0.050451,0.143262,0.673780,0.561190,0.289358,0.775050,0.365115,0.995222,-0.031959,0.092263,0.684140,0.550550,0.288163,0.743982,0.362502,0.994747,-0.062028,0.081425,0.684130,0.562420,0.290919,0.775303,0.338571,0.998650,-0.036103,0.037344,0.695690,0.552680,0.289411,0.742401,0.337254,0.997289,-0.065712,0.033121,0.694880,0.565030,0.275923,0.740678,0.431205,0.973123,-0.005987,0.230207,0.654070,0.558680,0.281114,0.742026,0.408546,0.979032,-0.029231,0.201597,0.663820,0.559580,-0.270672,0.735020,0.452790,-0.971821,0.009367,0.235534,0.355600,0.559560,-0.265210,0.769412,0.470766,-0.955768,0.051527,0.289572,0.361920,0.545090,0.270699,0.734990,0.452806,0.973152,0.016288,0.229587,0.644390,0.559560,0.265048,0.769388,0.470747,0.957157,0.057144,0.283876,0.638070,0.545090,-0.258469,0.814159,0.481159,-0.940210,0.070319,0.333257,0.365650,0.526910,-0.253111,0.797318,0.499462,-0.939741,0.078803,0.332682,0.373670,0.532480,-0.241511,0.835265,0.521132,-0.936000,0.089506,0.340431,0.382550,0.516730,-0.238001,0.816263,0.536050,-0.940052,0.087222,0.329689,0.388510,0.523480,0.258398,0.814158,0.481162,0.939298,0.070809,0.335716,0.634340,0.526910,0.252907,0.797291,0.499402,0.940249,0.085522,0.329573,0.626320,0.532480,0.237863,0.816277,0.535982,0.939690,0.096098,0.328250,0.611480,0.523480,0.241197,0.835236,0.521061,0.935618,0.089404,0.341505,0.617440,0.516730,-0.270807,0.857271,0.434865,-0.950822,0.104546,0.291560,0.342420,0.512850,-0.265006,0.835016,0.460010,-0.942729,0.079713,0.323895,0.355170,0.520300,-0.251914,0.887102,0.477815,-0.940511,0.109388,0.321672,0.363120,0.496610,-0.246180,0.859315,0.502097,-0.935742,0.092505,0.340337,0.374410,0.507550,0.271194,0.857289,0.435023,0.950535,0.100475,0.293920,0.657570,0.512850,0.264869,0.835001,0.460003,0.941538,0.076286,0.328156,0.644830,0.520300,0.245984,0.859288,0.502061,0.935270,0.086297,0.343252,0.625580,0.507550,0.252032,0.887100,0.477864,0.939997,0.106750,0.324053,0.636870,0.496610,-0.285971,0.843141,0.377508,-0.981447,0.069434,0.178720,0.315570,0.524150,-0.291608,0.814515,0.338367,-0.997807,0.003133,0.066122,0.301450,0.537870,-0.290112,0.807112,0.366514,-0.992639,0.018911,0.119628,0.313820,0.538510,0.291547,0.814516,0.338369,0.997742,0.001964,0.067138,0.698540,0.537870,0.286136,0.843148,0.377579,0.982074,0.065840,0.176620,0.684420,0.524150,0.289979,0.807101,0.366513,0.992778,0.016187,0.118867,0.686180,0.538510,-0.294254,0.811919,0.273212,-0.998133,-0.043417,0.042954,0.273330,0.544320,-0.291089,0.770395,0.308381,-0.998788,-0.043241,0.023502,0.291130,0.557820,-0.293004,0.816034,0.305754,-0.998540,-0.023995,0.048394,0.287080,0.539930,-0.290995,0.761693,0.279432,-0.998600,-0.032865,0.041458,0.278970,0.564040,-0.296589,0.871935,0.267705,-0.998640,0.005015,0.051894,0.267600,0.520930,-0.293812,0.870799,0.305619,-0.996068,0.019869,0.086333,0.283560,0.518590,-0.288976,0.734415,0.310352,-0.997874,-0.047693,0.044416,0.293950,0.570790,-0.290098,0.723925,0.284533,-0.995535,0.015556,0.093104,0.283360,0.576770,0.291220,0.770399,0.308438,0.998800,-0.042282,0.024709,0.708860,0.557820,0.294330,0.811922,0.273239,0.998156,-0.043044,0.042789,0.726660,0.544320,0.292963,0.816033,0.305758,0.998482,-0.023280,0.049921,0.712910,0.539930,0.291021,0.761694,0.279443,0.998640,-0.033011,0.040360,0.721020,0.564040,0.293783,0.870793,0.305611,0.995959,0.020619,0.087411,0.716430,0.518590,0.296600,0.871934,0.267709,0.998600,0.005488,0.052610,0.732390,0.520930,0.289034,0.734415,0.310379,0.997952,-0.047488,0.042866,0.706040,0.570790,0.290130,0.723926,0.284545,0.995590,0.014944,0.092612,0.716640,0.576770,-0.257805,0.915847,0.448793,-0.943143,0.126492,0.307378,0.347360,0.484870,-0.276264,0.880940,0.407486,-0.959552,0.103322,0.261887,0.327660,0.504870,0.258072,0.915845,0.448900,0.942826,0.131593,0.306207,0.652640,0.484870,0.276390,0.880928,0.407537,0.959903,0.105404,0.259761,0.672330,0.504870,-0.279899,0.984691,0.320373,-0.954176,0.265321,0.138391,0.281250,0.471760,-0.294306,0.934668,0.265477,-0.992493,0.110043,0.053371,0.262740,0.496990,-0.290599,0.929016,0.310520,-0.987540,0.108547,0.113942,0.282130,0.495170,-0.283382,0.993843,0.266208,-0.956788,0.286270,0.051057,0.258030,0.474420,0.294306,0.934667,0.265478,0.992424,0.110160,0.054401,0.737250,0.496990,0.279814,0.984680,0.320350,0.954327,0.264582,0.138766,0.718740,0.471760,0.290471,0.928995,0.310487,0.987418,0.108799,0.114750,0.717860,0.495170,0.283375,0.993842,0.266205,0.956846,0.285950,0.051747,0.741960,0.474420,-0.295786,0.706950,0.260552,-0.962839,0.208199,0.172027,0.274640,0.584250,-0.292891,0.720127,0.261622,-0.984305,0.132999,0.115993,0.274320,0.579990,-0.299872,0.712919,0.237835,-0.876468,0.468911,0.109206,0.264730,0.584890,-0.295318,0.720382,0.238967,-0.951208,0.301109,0.067357,0.265410,0.582330,-0.291304,0.752285,0.255936,-0.998777,-0.001478,0.049424,0.270490,0.569440,-0.292129,0.745409,0.233006,-0.999200,0.032632,0.023134,0.262430,0.574190,-0.118651,0.400512,0.639148,-0.160359,-0.463860,0.871274,0.462710,0.660250,-0.127865,0.397309,0.638859,-0.077508,-0.388438,0.918209,0.460290,0.660870,-0.177274,0.392757,0.550027,-0.873987,-0.285897,0.392951,0.433300,0.670200,-0.165725,0.396023,0.579672,-0.902865,-0.260621,0.341922,0.441880,0.665460,-0.138782,0.395197,0.634817,-0.510453,-0.361924,0.780031,0.457920,0.661150,-0.148358,0.395176,0.622520,-0.802970,-0.300056,0.514980,0.454600,0.661620,0.295803,0.706950,0.260558,0.962902,0.208333,0.171513,0.725350,0.584250,0.292903,0.720127,0.261626,0.984346,0.133131,0.115498,0.725670,0.579990,0.291312,0.752285,0.255939,0.998808,-0.001601,0.048776,0.729500,0.569440,0.295331,0.720383,0.238972,0.951218,0.301128,0.067123,0.734590,0.582330,0.292131,0.745409,0.233007,0.999200,0.032734,0.022966,0.737560,0.574190,0.299879,0.712919,0.237838,0.876577,0.468766,0.108959,0.735260,0.584890,0.118650,0.400498,0.639209,0.156223,-0.461315,0.873374,0.537280,0.660250,0.127706,0.397376,0.638851,0.080188,-0.386371,0.918851,0.539700,0.660870,0.165720,0.396025,0.579670,0.902711,-0.259709,0.343023,0.558110,0.665460,0.177274,0.392757,0.550027,0.873780,-0.285654,0.393586,0.566690,0.670200,0.138663,0.395241,0.634780,0.510636,-0.359752,0.780916,0.542070,0.661150,0.148297,0.395198,0.622506,0.803113,-0.298332,0.515760,0.545390,0.661620,0.157795,0.395996,0.604419,0.891729,-0.262955,0.368339,0.550910,0.662850,-0.297898,0.863669,0.230276,-0.999758,-0.002864,0.021788,0.253140,0.527710,-0.295023,0.802196,0.244375,-0.998102,-0.050164,0.035721,0.262630,0.550760,-0.294950,0.790498,0.216244,-0.998295,-0.054598,0.020653,0.252600,0.557720,-0.298279,0.849073,0.193484,-0.999942,-0.009800,0.004584,0.239720,0.536500,0.297898,0.863669,0.230276,0.999767,-0.002752,0.021397,0.746850,0.527710,0.295028,0.802196,0.244377,0.998125,-0.050252,0.034954,0.737360,0.550760,0.298279,0.849073,0.193484,0.999942,-0.009796,0.004561,0.760270,0.536500,0.294950,0.790498,0.216244,0.998297,-0.054592,0.020568,0.747400,0.557720,-0.157879,0.395970,0.604453,-0.891466,-0.264552,0.367831,0.449080,0.662850,-0.020388,0.260088,0.667502,-0.026509,-0.788693,0.614215,0.494680,0.693820,-0.035759,0.453493,0.717183,-0.230961,0.308107,0.922891,0.491340,0.639710,-0.286437,0.590731,0.283838,-0.968543,-0.027472,-0.247327,0.976150,0.351790,-0.285574,0.591390,0.291260,-0.981339,0.031534,0.189683,0.979780,0.350230,-0.287986,0.574886,0.287092,-0.992792,-0.076315,-0.092413,0.979930,0.359100,-0.286327,0.575269,0.293922,-0.961360,-0.051203,0.270491,0.983700,0.358370,-0.284133,0.589692,0.280834,-0.585769,-0.166946,-0.793097,0.974940,0.352820,0.006601,0.334372,0.687315,-0.131809,0.028216,0.990873,0.501770,0.673590,0.285517,0.591387,0.291246,0.980953,0.031503,0.191673,0.019850,0.351500,0.286419,0.590730,0.283834,0.969489,-0.026883,-0.243657,0.023510,0.353070,0.284112,0.589691,0.280829,0.585659,-0.166773,-0.793215,0.024720,0.354100,-0.045092,0.453101,0.713936,-0.379203,0.265766,0.886326,0.488980,0.640180,-0.056753,0.451965,0.708329,-0.452039,0.225487,0.863028,0.485910,0.640920,-0.281439,0.549315,0.293426,-0.956747,-0.169864,0.236181,0.983210,0.373480,-0.281423,0.545397,0.289080,-0.982545,-0.175211,0.062509,0.979600,0.375010,0.281429,0.549315,0.293424,0.956143,-0.168342,0.239691,0.697760,0.645660,0.278753,0.540568,0.300013,0.973715,-0.130190,0.186896,0.693660,0.648810,-0.281439,0.549315,0.293426,-0.956747,-0.169864,0.236181,0.302240,0.645660,-0.278816,0.540571,0.300029,-0.973857,-0.130883,0.185666,0.306330,0.648810,-0.278560,0.522879,0.288126,-0.957564,-0.032487,0.286383,0.302610,0.656740,-0.277869,0.530393,0.294622,-0.983475,-0.123287,0.132583,0.305080,0.653470,-0.277869,0.530393,0.294622,-0.983475,-0.123287,0.132583,0.982780,0.385140,-0.278560,0.522879,0.288126,-0.957564,-0.032487,0.286383,0.977820,0.388330,-0.278816,0.540571,0.300029,-0.973857,-0.130883,0.185666,0.987020,0.379560,0.278549,0.522878,0.288124,0.957518,-0.032361,0.286552,0.697380,0.656740,0.277859,0.530393,0.294620,0.983248,-0.122789,0.134710,0.694910,0.653470,0.278753,0.540568,0.300013,0.973715,-0.130190,0.186896,0.012590,0.380870,0.277859,0.530393,0.294620,0.983248,-0.122789,0.134710,0.016840,0.386460,0.278549,0.522878,0.288124,0.957518,-0.032361,0.286552,0.021810,0.389650,-0.169967,0.670913,0.617265,-0.391213,0.411049,0.823402,0.439520,0.572710,-0.281438,0.530049,0.278336,-0.929859,0.170774,0.325881,0.970940,0.382740,-0.281820,0.516664,0.281337,-0.887857,0.067416,0.455153,0.972030,0.390060,-0.283524,0.503579,0.280380,-0.822908,-0.079464,0.562590,0.969930,0.396570,-0.286302,0.511834,0.274247,-0.873848,0.100589,0.475679,0.965940,0.390990,-0.287104,0.503389,0.274672,-0.866889,0.036254,0.497182,0.965390,0.394950,-0.285644,0.524382,0.272597,-0.827244,0.122617,0.548300,0.966100,0.384880,-0.288454,0.492341,0.270935,-0.760688,-0.327368,0.560521,0.962540,0.400120,-0.295689,0.487437,0.255945,-0.785811,-0.463874,0.409050,0.954140,0.399970,-0.291278,0.497773,0.267390,-0.880307,-0.005427,0.474374,0.960170,0.396530,-0.297413,0.495518,0.255695,-0.885999,0.000147,0.463688,0.953880,0.396170,0.035933,0.453561,0.717622,0.236240,0.284975,0.928967,0.508650,0.639710,0.045222,0.453134,0.714285,0.384484,0.244809,0.890079,0.511010,0.640180,0.281437,0.530049,0.278336,0.929511,0.170785,0.326866,0.028690,0.384050,0.281793,0.516663,0.281330,0.887480,0.067321,0.455903,0.027600,0.391390,0.285644,0.524382,0.272597,0.826922,0.122450,0.548822,0.033550,0.386190,0.286302,0.511834,0.274246,0.873273,0.100485,0.476757,0.033710,0.392310,0.283510,0.503578,0.280376,0.822750,-0.079083,0.562875,0.029720,0.397900,0.287103,0.503389,0.274672,0.866277,0.036228,0.498249,0.034250,0.396280,0.288453,0.492341,0.270935,0.760607,-0.327249,0.560701,0.037110,0.401450,0.291278,0.497773,0.267390,0.880170,-0.005518,0.474626,0.039480,0.397860,0.295689,0.487437,0.255945,0.785795,-0.463877,0.409077,0.045520,0.401300,0.297413,0.495518,0.255695,0.886002,0.000172,0.463682,0.045780,0.397500,-0.274266,0.547757,0.270421,-0.739693,0.672798,-0.014044,0.967590,0.371650,-0.279012,0.541241,0.274435,-0.884130,0.437220,0.164781,0.969350,0.376350,-0.284968,0.537014,0.270291,-0.682149,0.337035,0.648907,0.965280,0.379030,-0.281202,0.545253,0.266628,-0.451036,0.742353,0.495457,0.964110,0.374480,0.274246,0.547756,0.270416,0.738023,0.674614,-0.014804,0.032050,0.372950,0.279010,0.541241,0.274434,0.883472,0.438309,0.165415,0.030280,0.377650,0.281202,0.545253,0.266628,0.449927,0.743007,0.495486,0.035530,0.375780,0.284968,0.537014,0.270291,0.681937,0.337224,0.649032,0.034370,0.380340,-0.279159,0.588683,0.279485,-0.191301,-0.171763,-0.966386,0.973190,0.354190,-0.271053,0.587654,0.278225,-0.078789,-0.061314,-0.995004,0.970810,0.355940,-0.275429,0.602226,0.274554,-0.042807,-0.548381,-0.835132,0.968630,0.351410,-0.264456,0.602309,0.275709,0.051002,-0.428120,-0.902282,0.967840,0.354120,0.279138,0.588682,0.279480,0.191290,-0.171800,-0.966381,0.026470,0.355470,0.275403,0.602225,0.274548,0.042897,-0.548459,-0.835077,0.031030,0.352700,0.271039,0.587653,0.278222,0.078727,-0.061461,-0.995000,0.028840,0.357220,0.264422,0.602307,0.275701,-0.051032,-0.428333,-0.902179,0.031820,0.355410,-0.272818,0.607212,0.269276,-0.001895,-0.752619,-0.658454,0.966590,0.351810,-0.260141,0.609605,0.271173,0.070442,-0.651266,-0.755573,0.966640,0.354080,-0.260141,0.609605,0.271173,-0.219877,-0.792870,0.568341,0.966640,0.354080,-0.272818,0.607212,0.269276,-0.047844,-0.852549,0.520452,0.966590,0.351810,-0.261571,0.604322,0.262565,-0.234000,-0.557594,0.796450,0.965060,0.354380,-0.271611,0.603906,0.262472,-0.069464,-0.667848,0.741049,0.964310,0.352500,0.169815,0.670885,0.617281,0.387384,0.376822,0.841391,0.560470,0.572710,0.272792,0.607211,0.269270,0.002094,-0.752661,-0.658405,0.033080,0.353100,0.272792,0.607211,0.269270,0.047872,-0.852521,0.520497,0.033080,0.353100,0.271592,0.603905,0.262467,0.069550,-0.667824,0.741063,0.035360,0.353790,0.260097,0.609603,0.271162,0.220186,-0.792607,0.568588,0.033030,0.355370,0.261549,0.604321,0.262559,0.234115,-0.557383,0.796564,0.034600,0.355680,0.260097,0.609603,0.271162,-0.070395,-0.651412,-0.755452,0.033030,0.355370,0.056852,0.452047,0.708627,0.453012,0.205192,0.867569,0.514080,0.640920,-0.275244,0.548504,0.263013,-0.440844,0.843678,0.306371,0.963690,0.371230,-0.269843,0.551808,0.267024,-0.746675,0.662999,-0.053936,0.966220,0.368990,0.275225,0.548503,0.263008,0.439246,0.844333,0.306864,0.035960,0.372530,0.269764,0.551804,0.267003,0.746769,0.662970,-0.052983,0.033430,0.370290,-0.260561,0.585541,0.277661,-0.100777,0.140822,-0.984892,0.968280,0.357520,-0.248091,0.599743,0.278722,-0.009707,-0.188552,-0.982015,0.966940,0.356470,-0.246315,0.591059,0.277644,-0.077131,0.196064,-0.977553,0.966740,0.357200,-0.252660,0.582944,0.275713,-0.496882,0.514765,-0.698660,0.966870,0.357910,0.248075,0.599743,0.278719,0.009623,-0.188673,-0.981993,0.032710,0.357770,0.260549,0.585540,0.277659,0.100788,0.140804,-0.984894,0.031370,0.358810,0.246289,0.591058,0.277638,0.077381,0.196308,-0.977484,0.032920,0.358500,0.252630,0.582942,0.275705,0.496239,0.514784,-0.699102,0.032780,0.359220,-0.248091,0.599743,0.278722,-0.914364,-0.151370,-0.375534,0.966940,0.356470,-0.244557,0.590996,0.273643,-0.953383,0.244043,0.177492,0.966460,0.357230,-0.246315,0.591059,0.277644,-0.889176,0.264984,-0.373027,0.966740,0.357200,-0.246913,0.603857,0.273941,-0.914364,-0.151370,-0.375534,0.966520,0.356190,-0.246913,0.603857,0.273941,-0.650943,-0.356538,0.670189,0.966520,0.356190,-0.253933,0.597739,0.263526,-0.564509,-0.214097,0.797177,0.965220,0.356270,-0.246913,0.603857,0.273941,-0.023391,-0.625525,-0.779853,0.966520,0.356190,0.244538,0.590995,0.273639,0.953644,0.242707,0.177926,0.033190,0.358540,0.248075,0.599743,0.278719,0.914447,-0.151820,-0.375151,0.032710,0.357770,0.246289,0.591058,0.277638,0.889277,0.264254,-0.373304,0.032920,0.358500,0.246896,0.603856,0.273940,0.914447,-0.151820,-0.375151,0.033140,0.357490,0.246896,0.603856,0.273940,0.023085,-0.625720,-0.779706,0.033140,0.357490,0.253912,0.597738,0.263521,0.564617,-0.213914,0.797150,0.034440,0.357570,0.246896,0.603856,0.273940,0.651197,-0.356127,0.670161,0.033140,0.357490,-0.268214,0.589037,0.256682,-0.359682,-0.274037,0.891927,0.961780,0.356600,-0.273527,0.592312,0.256372,-0.227858,-0.440401,0.868405,0.960760,0.355010,-0.264585,0.584102,0.257961,-0.519299,-0.108952,0.847619,0.962340,0.358250,0.268197,0.589036,0.256678,0.359521,-0.273813,0.892060,0.037890,0.357900,0.273507,0.592311,0.256367,0.228030,-0.440152,0.868487,0.038910,0.356300,0.264566,0.584101,0.257956,0.518958,-0.108801,0.847847,0.037320,0.359560,-0.294468,0.634449,0.269559,-0.803792,0.371942,-0.464304,0.962920,0.334000,-0.288910,0.638336,0.268833,-0.322026,0.706926,-0.629725,0.960420,0.332370,-0.292699,0.629220,0.262691,-0.738529,0.406868,-0.537619,0.961340,0.337840,-0.286654,0.633798,0.262473,-0.351087,0.711871,-0.608258,0.958650,0.335680,-0.291268,0.625142,0.258324,-0.724365,0.388906,-0.569252,0.959630,0.340140,-0.285041,0.629948,0.257682,-0.428595,0.659728,-0.617305,0.956910,0.337800,-0.284445,0.626419,0.254083,-0.547328,0.608582,-0.574509,0.955720,0.339370,-0.290641,0.621378,0.255235,-0.751363,0.386664,-0.534738,0.958280,0.341830,-0.293306,0.616557,0.258308,-0.892646,0.225468,-0.390318,0.960110,0.343300,-0.290748,0.616405,0.251879,-0.813211,0.368982,-0.450045,0.956660,0.343910,-0.293028,0.611572,0.254676,-0.923037,0.221920,-0.314253,0.957950,0.345460,-0.284975,0.621891,0.250112,-0.683079,0.553077,-0.476979,0.954460,0.341310,0.294424,0.634446,0.269549,0.804561,0.371020,-0.463708,0.036760,0.335310,0.292673,0.629218,0.262685,0.738932,0.407489,-0.536593,0.038340,0.339150,0.288882,0.638334,0.268827,0.322017,0.706789,-0.629884,0.039260,0.333680,0.286588,0.633795,0.262456,0.350898,0.712272,-0.607898,0.041020,0.336990,0.285031,0.629947,0.257680,0.428642,0.660251,-0.616713,0.042760,0.339110,0.291249,0.625141,0.258319,0.724607,0.388676,-0.569100,0.040040,0.341450,0.284428,0.626418,0.254078,0.547596,0.608635,-0.574196,0.043950,0.340680,0.290613,0.621377,0.255228,0.751838,0.386242,-0.534376,0.041390,0.343140,0.284954,0.621890,0.250107,0.683534,0.552837,-0.476605,0.045200,0.342620,0.290729,0.616404,0.251874,0.813375,0.369124,-0.449631,0.043010,0.345210,0.293265,0.616555,0.258297,0.893178,0.224782,-0.389495,0.039560,0.344610,0.293007,0.611571,0.254670,0.923011,0.222511,-0.313911,0.041710,0.346760,-0.296185,0.641521,0.278059,-0.928241,0.100683,-0.358093,0.963550,0.327520,-0.292610,0.643824,0.275739,-0.377809,0.449250,-0.809589,0.961430,0.327110,-0.299192,0.652699,0.282462,-0.971343,-0.237383,0.011892,0.962130,0.319450,-0.297367,0.652738,0.279037,-0.549816,-0.125601,-0.825788,0.960670,0.320290,0.296163,0.641519,0.278057,0.928763,0.099190,-0.357156,0.036110,0.328840,0.299167,0.652697,0.282459,0.970967,-0.238856,0.013099,0.037520,0.320770,0.292597,0.643823,0.275739,0.378167,0.449002,-0.809560,0.038230,0.328430,0.297341,0.652735,0.279034,0.549832,-0.126093,-0.825703,0.038990,0.321620,-0.309482,0.680601,0.276134,-0.822090,0.011481,0.569242,0.950280,0.305160,-0.303954,0.666141,0.282021,-0.884672,-0.209132,0.416677,0.958060,0.311230,-0.303433,0.663480,0.277370,-0.928090,-0.368162,0.055732,0.956950,0.313160,-0.309589,0.675291,0.272004,-0.917480,-0.231320,0.323605,0.949880,0.307850,-0.329208,0.710725,0.238451,-0.869693,0.252966,0.423843,0.928260,0.305120,-0.318559,0.696944,0.260158,-0.808227,0.170454,0.563662,0.938940,0.303390,-0.318794,0.688579,0.258443,-0.910567,-0.117433,0.396329,0.939770,0.306220,-0.327606,0.700831,0.239462,-0.837888,-0.531467,0.124443,0.930020,0.307720,0.309504,0.680602,0.276145,0.821880,0.011312,0.569548,0.049370,0.306480,0.303961,0.666142,0.282028,0.884017,-0.210584,0.417335,0.041600,0.312550,0.309622,0.675292,0.272017,0.917254,-0.231462,0.324144,0.049770,0.309180,0.303436,0.663480,0.277374,0.927503,-0.369510,0.056574,0.042700,0.314480,0.329213,0.710725,0.238453,0.870013,0.252630,0.423386,0.071400,0.306430,0.318576,0.696945,0.260165,0.808529,0.170358,0.563257,0.060710,0.304700,0.327606,0.700831,0.239462,0.837822,-0.531668,0.124026,0.069630,0.309040,0.318806,0.688580,0.258448,0.910815,-0.117485,0.395744,0.059890,0.307530,-0.295851,0.507743,0.255120,-0.891430,0.110896,0.439379,0.954460,0.390670,-0.290968,0.508008,0.265842,-0.894294,0.096783,0.436889,0.960200,0.391420,-0.290255,0.521870,0.264809,-0.864883,0.005415,0.501944,0.960850,0.385300,-0.294898,0.523007,0.254237,-0.910121,-0.068641,0.408618,0.955100,0.384310,0.295849,0.507743,0.255120,0.891428,0.111379,0.439261,0.045200,0.391990,0.290967,0.508008,0.265842,0.894371,0.096930,0.436698,0.039450,0.392750,0.290255,0.521870,0.264809,0.865108,0.005388,0.501557,0.038800,0.386620,0.294878,0.523006,0.254232,0.910397,-0.068429,0.408037,0.044550,0.385620,-0.289896,0.547306,0.261966,-0.358256,0.677935,0.641916,0.959570,0.374950,-0.298693,0.538620,0.254664,-0.875798,-0.029577,0.481771,0.955170,0.378300,-0.292341,0.536604,0.264580,-0.738024,0.118725,0.664248,0.960350,0.379350,-0.297821,0.551532,0.254017,-0.817432,0.153807,0.555111,0.955090,0.374030,0.298693,0.538620,0.254664,0.876297,-0.029990,0.480838,0.044490,0.379610,0.289896,0.547306,0.261966,0.358169,0.677966,0.641932,0.040080,0.376250,0.292341,0.536604,0.264580,0.738184,0.118559,0.664099,0.039290,0.380660,0.297821,0.551532,0.254017,0.818025,0.153526,0.554315,0.044570,0.375330,-0.304931,0.501068,0.241638,-0.886559,0.039606,0.460917,0.947510,0.393520,-0.301677,0.513491,0.241599,-0.866357,0.123231,0.483982,0.948170,0.388160,-0.300888,0.528677,0.241196,-0.920095,-0.071612,0.385094,0.948720,0.382030,-0.305044,0.492784,0.239579,-0.877771,-0.421159,0.228347,0.946730,0.397010,0.304929,0.501068,0.241638,0.886561,0.039648,0.460909,0.052150,0.394840,0.301677,0.513491,0.241599,0.866134,0.123922,0.484205,0.051490,0.389480,0.300867,0.528676,0.241191,0.920088,-0.071091,0.385207,0.050930,0.383340,0.305044,0.492784,0.239579,0.877800,-0.421076,0.228392,0.052940,0.398330,-0.304648,0.543311,0.242525,-0.936930,-0.033445,0.347913,0.949410,0.376400,-0.302543,0.555964,0.242692,-0.912328,0.143140,0.383625,0.950130,0.372230,0.304618,0.543309,0.242517,0.937131,-0.033704,0.347348,0.050250,0.377710,0.302529,0.555964,0.242688,0.912623,0.143041,0.382960,0.049520,0.373540,-0.168119,0.676331,0.626644,0.034017,-0.872907,0.486700,0.440250,0.569550,0.168098,0.676299,0.626697,-0.035346,-0.872664,0.487040,0.559740,0.569550,0.006902,0.164364,0.494731,0.195346,-0.429912,0.881485,0.502320,0.763090,0.013805,0.156356,0.488465,0.363927,-0.434592,0.823824,0.504930,0.766900,0.013558,0.165646,0.493184,0.357787,-0.407793,0.840055,0.504720,0.763120,0.006990,0.154328,0.489738,0.197888,-0.459498,0.865853,0.502430,0.767090,-0.000000,0.163895,0.495303,0.000003,-0.439170,0.898404,0.500000,0.763070,-0.000000,0.153680,0.490171,0.000001,-0.469395,0.882988,0.500000,0.767130,0.007328,0.145641,0.484747,0.208273,-0.499695,0.840790,0.502630,0.770190,-0.000000,0.144790,0.485197,-0.000000,-0.512433,0.858727,0.500000,0.770270,0.014555,0.148193,0.483566,0.381218,-0.467280,0.797698,0.505350,0.769880,0.074605,0.534789,-0.071405,0.079452,-0.276267,-0.957791,0.918280,0.689130,0.072798,0.412771,-0.058127,0.180969,-0.007259,-0.983462,0.912390,0.751850,0.097679,0.532417,-0.068730,0.140953,-0.292492,-0.945823,0.906670,0.688260,0.097410,0.411233,-0.052230,0.260780,-0.031376,-0.964888,0.899190,0.752280,-0.066441,0.665295,0.637764,-0.690501,-0.104612,0.715727,0.468030,0.571640,-0.067432,0.659331,0.634369,-0.775936,-0.008917,0.630749,0.467360,0.572950,-0.074605,0.534789,-0.071405,-0.079451,-0.276267,-0.957791,0.081710,0.689130,-0.072798,0.412771,-0.058127,-0.180969,-0.007260,-0.983462,0.087600,0.751850,-0.097410,0.411233,-0.052230,-0.260780,-0.031376,-0.964888,0.100800,0.752280,-0.097679,0.532417,-0.068730,-0.140954,-0.292492,-0.945823,0.093320,0.688260,0.118988,0.529033,-0.064426,0.201652,-0.308092,-0.929740,0.895970,0.688250,0.121006,0.409095,-0.044169,0.326324,-0.050241,-0.943922,0.885710,0.752840,0.139014,0.525289,-0.058808,0.264359,-0.320639,-0.909563,0.885760,0.688570,0.144146,0.406593,-0.034650,0.380295,-0.062565,-0.922747,0.871720,0.753360,-0.289393,0.552687,0.250247,0.031140,0.968114,0.248566,0.955410,0.371390,-0.302543,0.555964,0.242692,0.194269,0.942505,0.271925,0.950130,0.372230,-0.297821,0.551532,0.254017,0.077012,0.946941,0.312044,0.955090,0.374030,-0.293682,0.554055,0.239239,0.141838,0.953023,0.267636,0.950640,0.369660,-0.283372,0.553171,0.237686,0.088168,0.960898,0.262491,0.952000,0.367280,-0.282291,0.549466,0.257524,-0.139034,0.909120,0.392646,0.959770,0.371960,0.289393,0.552687,0.250247,-0.031144,0.968112,0.248573,0.044240,0.372690,0.302529,0.555964,0.242688,-0.194305,0.942477,0.271997,0.049520,0.373540,0.293665,0.554054,0.239234,-0.141843,0.953015,0.267662,0.049010,0.370970,0.297821,0.551532,0.254017,-0.077017,0.946936,0.312059,0.044570,0.375330,0.283367,0.553171,0.237685,-0.088141,0.960906,0.262469,0.047650,0.368580,0.282291,0.549466,0.257524,0.138256,0.909114,0.392933,0.039880,0.373260,0.066490,0.665297,0.637787,0.688208,-0.119049,0.715679,0.531960,0.571640,0.067164,0.659303,0.634295,0.778435,-0.009561,0.627652,0.532630,0.572950,-0.121006,0.409095,-0.044169,-0.326324,-0.050241,-0.943922,0.114280,0.752840,-0.118988,0.529033,-0.064426,-0.201652,-0.308092,-0.929740,0.104020,0.688250,-0.144146,0.406593,-0.034650,-0.380295,-0.062565,-0.922747,0.128270,0.753360,-0.139014,0.525289,-0.058808,-0.264359,-0.320639,-0.909563,0.114230,0.688570,0.252099,0.581233,0.270755,0.814935,0.568273,0.113784,0.033310,0.359560,-0.334819,0.596299,0.179636,-0.977497,-0.084897,0.193109,0.913300,0.353590,-0.338411,0.573940,0.176094,-0.912685,0.001305,0.408662,0.912530,0.363180,-0.332775,0.576592,0.182541,-0.937910,-0.036599,0.344942,0.916900,0.361760,-0.339149,0.597498,0.171811,-0.902511,-0.019887,0.430208,0.908370,0.353690,0.334816,0.596299,0.179635,0.977440,-0.084888,0.193405,0.086360,0.354880,0.338410,0.573940,0.176094,0.912612,0.001336,0.408824,0.087130,0.364480,0.339148,0.597498,0.171811,0.902447,-0.019881,0.430342,0.091280,0.354980,0.332772,0.576592,0.182540,0.937833,-0.036529,0.345159,0.082760,0.363060,-0.319346,0.588156,0.211760,-0.086242,0.148596,0.985130,0.931920,0.356490,-0.330668,0.594862,0.205126,-0.701986,-0.015965,0.712011,0.925740,0.353710,-0.337463,0.604090,0.193820,-0.967420,-0.089061,0.236993,0.918750,0.350340,-0.306255,0.585448,0.206869,-0.014089,0.265364,0.964045,0.936490,0.356640,-0.296613,0.586538,0.209737,-0.684837,0.290062,0.668477,0.939480,0.355600,0.319327,0.588155,0.211756,0.085877,0.148571,0.985166,0.067740,0.357790,0.330655,0.594861,0.205123,0.701670,-0.016013,0.712322,0.073910,0.355020,0.337455,0.604089,0.193818,0.967343,-0.089184,0.237262,0.080910,0.351650,0.306244,0.585448,0.206866,0.014137,0.265291,0.964065,0.063170,0.357940,0.296603,0.586538,0.209735,0.685016,0.289740,0.668434,0.060180,0.356910,-0.339697,0.617854,0.171242,-0.921915,-0.090985,0.376557,0.906750,0.346260,-0.337070,0.612479,0.180555,-0.990334,-0.101526,0.094506,0.912060,0.347750,0.339697,0.617854,0.171242,0.921866,-0.091010,0.376669,0.092900,0.347550,0.337067,0.612479,0.180554,0.990304,-0.101596,0.094747,0.087590,0.349040,-0.294847,0.639303,0.229094,-0.305808,-0.713222,0.630710,0.941340,0.336290,-0.282796,0.636956,0.233137,-0.651185,-0.558138,0.514237,0.945230,0.337840,-0.292697,0.645655,0.241011,-0.433138,-0.705787,0.560586,0.944770,0.333110,-0.280454,0.641971,0.243403,-0.685935,-0.536459,0.491635,0.948120,0.335010,-0.279586,0.628943,0.238394,-0.969666,0.071595,0.233713,0.947300,0.338920,-0.276484,0.634486,0.247239,-0.966657,0.088200,0.240407,0.949790,0.336190,0.294831,0.639302,0.229089,0.305953,-0.713194,0.630672,0.058320,0.337600,0.282791,0.636956,0.233136,0.651276,-0.558049,0.514218,0.054430,0.339150,0.279581,0.628942,0.238393,0.969645,0.071241,0.233911,0.052360,0.340220,0.280448,0.641971,0.243402,0.685883,-0.536453,0.491714,0.051540,0.336320,0.276478,0.634486,0.247237,0.966574,0.088117,0.240771,0.049880,0.337500,0.292681,0.645654,0.241007,0.433186,-0.705984,0.560301,0.054890,0.334420,-0.304125,0.651175,0.235624,-0.658046,-0.402675,0.636261,0.939270,0.330160,-0.306244,0.670161,0.236160,-0.800159,-0.153618,0.579782,0.936840,0.321750,-0.315178,0.665412,0.225112,-0.786662,-0.107965,0.607870,0.931940,0.325620,-0.298500,0.656334,0.246338,-0.655308,-0.341506,0.673754,0.943050,0.327060,-0.298048,0.672128,0.249152,-0.781102,-0.383721,0.492582,0.941830,0.318940,-0.289298,0.659710,0.254636,-0.633898,-0.395006,0.664939,0.946700,0.324510,-0.287662,0.650270,0.248972,-0.507403,-0.554960,0.659212,0.947640,0.330680,-0.276234,0.653040,0.256690,-0.720202,-0.361401,0.592198,0.950490,0.328770,-0.277014,0.644616,0.251842,-0.762543,-0.369295,0.531178,0.950340,0.332920,-0.272567,0.646315,0.260509,-0.956850,-0.064458,0.283342,0.952470,0.331260,-0.274045,0.637927,0.254416,-0.966041,0.194465,0.170139,0.951640,0.334470,-0.273337,0.639515,0.261117,-0.908780,0.408932,-0.083022,0.953320,0.333060,0.306237,0.670160,0.236158,0.800188,-0.153772,0.579701,0.062820,0.323060,0.304121,0.651175,0.235623,0.658050,-0.403125,0.635972,0.060390,0.331470,0.315170,0.665411,0.225110,0.786663,-0.108170,0.607833,0.067720,0.326930,0.298498,0.656334,0.246338,0.655198,-0.341558,0.673836,0.056610,0.328370,0.287659,0.650269,0.248972,0.507029,-0.554983,0.659481,0.052020,0.331990,0.289279,0.659709,0.254633,0.633648,-0.395762,0.664727,0.052960,0.325830,0.276217,0.653039,0.256687,0.719724,-0.361777,0.592549,0.049180,0.330080,0.298051,0.672128,0.249154,0.781116,-0.384512,0.491944,0.057820,0.320250,0.277007,0.644616,0.251841,0.761662,-0.369194,0.532510,0.049330,0.334240,0.274029,0.637926,0.254412,0.965528,0.194544,0.172942,0.048030,0.335780,0.272522,0.646312,0.260499,0.956562,-0.064798,0.284237,0.047190,0.332570,0.273292,0.639512,0.261107,0.908879,0.409028,-0.081458,0.046350,0.334370,-0.333299,0.705282,0.219811,-0.877121,-0.409277,0.251300,0.922300,0.311090,-0.327183,0.686567,0.212352,-0.841698,-0.172187,0.511758,0.923090,0.320060,-0.318557,0.691881,0.225061,-0.801509,-0.427768,0.417849,0.928880,0.315860,-0.335165,0.701618,0.202560,-0.905016,-0.242340,0.349595,0.915840,0.315590,-0.310401,0.690149,0.242269,-0.710466,-0.694547,0.113327,0.935490,0.312850,0.333299,0.705282,0.219811,0.877076,-0.409423,0.251220,0.077350,0.312400,0.327180,0.686567,0.212352,0.841614,-0.172250,0.511875,0.076560,0.321370,0.335165,0.701618,0.202560,0.904982,-0.242389,0.349651,0.083800,0.316900,0.318551,0.691881,0.225060,0.801495,-0.427938,0.417701,0.070770,0.317170,0.310405,0.690149,0.242271,0.710513,-0.694565,0.112919,0.064160,0.314160,-0.291263,0.671667,0.261132,-0.644515,-0.755803,0.115593,0.946350,0.317530,-0.275857,0.662383,0.264888,-0.761992,-0.606930,0.225839,0.950350,0.322530,-0.287955,0.670273,0.269790,-0.338841,-0.833973,-0.435518,0.949760,0.317180,-0.278217,0.663122,0.275674,-0.418275,-0.617513,-0.666126,0.953210,0.320630,-0.270854,0.652980,0.269724,-0.982969,-0.165220,-0.080463,0.953880,0.327180,-0.277719,0.651891,0.277821,-0.488686,-0.000353,-0.872460,0.956800,0.325590,-0.279346,0.643553,0.275107,-0.390201,0.483310,-0.783680,0.956800,0.328850,-0.273848,0.644876,0.269674,-0.919267,0.220316,-0.326203,0.955020,0.330000,-0.278019,0.640242,0.272170,-0.236796,0.766285,-0.597273,0.956180,0.330420,-0.275154,0.639572,0.267968,-0.655356,0.633003,-0.412088,0.954940,0.331630,0.291294,0.671669,0.261143,0.644131,-0.756218,0.115016,0.053310,0.318850,0.275848,0.662382,0.264889,0.761020,-0.608327,0.225361,0.049310,0.323840,0.270820,0.652977,0.269719,0.982812,-0.166252,-0.080258,0.045780,0.328500,0.278223,0.663122,0.275682,0.417754,-0.617905,-0.666089,0.046450,0.321940,0.277672,0.651887,0.277814,0.488681,-0.000442,-0.872463,0.042870,0.326900,0.287970,0.670273,0.269797,0.338644,-0.834063,-0.435498,0.049900,0.318490,0.273824,0.644873,0.269669,0.919191,0.220061,-0.326591,0.044650,0.331320,0.279319,0.643551,0.275103,0.390357,0.483531,-0.783466,0.042860,0.330170,0.275125,0.639570,0.267963,0.655050,0.632692,-0.413051,0.044730,0.332940,0.277991,0.640240,0.272165,0.236882,0.766276,-0.597251,0.043490,0.331740,-0.318794,0.688579,0.258443,-0.381840,-0.813729,-0.438228,0.939770,0.306220,-0.304260,0.682475,0.259291,-0.506359,-0.814275,-0.283825,0.942740,0.311820,-0.309589,0.675291,0.272004,-0.333818,-0.671536,-0.661517,0.949880,0.307850,-0.298961,0.671798,0.268952,-0.268290,-0.714797,-0.645821,0.949600,0.313180,0.318806,0.688580,0.258448,0.381754,-0.813701,-0.438353,0.059890,0.307530,0.304266,0.682475,0.259295,0.506439,-0.814169,-0.283988,0.056910,0.313140,0.298976,0.671799,0.268958,0.268286,-0.714785,-0.645836,0.050060,0.314490,0.309622,0.675292,0.272017,0.333735,-0.671565,-0.661530,0.049770,0.309180,-0.303433,0.663480,0.277370,-0.245885,-0.451378,-0.857787,0.956950,0.313160,-0.294280,0.662345,0.275383,-0.123125,-0.441621,-0.888713,0.955290,0.317140,-0.289072,0.652294,0.278618,-0.067302,0.019458,-0.997543,0.958660,0.322930,-0.284900,0.644497,0.276005,0.002628,0.569752,-0.821812,0.958690,0.327730,-0.280847,0.640389,0.270728,-0.020377,0.834550,-0.550556,0.957490,0.330980,0.303436,0.663480,0.277374,0.245882,-0.451318,-0.857820,0.042700,0.314480,0.294282,0.662345,0.275387,0.123094,-0.441294,-0.888880,0.044360,0.318450,0.289041,0.652291,0.278614,0.067394,0.019697,-0.997532,0.040990,0.324250,0.284878,0.644495,0.276002,-0.002514,0.569755,-0.821811,0.040980,0.329050,0.280817,0.640387,0.270723,0.020388,0.834624,-0.550442,0.042170,0.332290,-0.343074,0.699103,0.181642,-0.980983,0.180035,0.072523,0.907690,0.319480,-0.339174,0.710364,0.197261,-0.971026,0.217537,0.098927,0.913030,0.313410,-0.338261,0.691404,0.188610,-0.915200,-0.089970,0.392829,0.910770,0.320820,-0.091586,0.406076,0.662348,-0.554879,0.780560,0.287810,0.473693,0.657610,-0.090908,0.405262,0.665908,-0.815212,0.241571,0.526376,0.473820,0.657940,-0.098652,0.369010,0.488443,0.175330,0.845291,0.504721,0.478480,0.655730,-0.098686,0.399609,0.465844,0.254359,0.573953,0.778382,0.478479,0.655726,0.343074,0.699102,0.181642,0.980984,0.180027,0.072528,0.091950,0.320790,0.338261,0.691404,0.188610,0.915188,-0.089976,0.392856,0.088870,0.322130,0.339174,0.710363,0.197261,0.971029,0.217520,0.098933,0.086610,0.314730,-0.098730,0.355242,0.573921,0.159714,0.985537,-0.056642,0.478478,0.655770,-0.104947,0.358154,0.573982,0.654869,0.753594,-0.056939,0.476001,0.656694,-0.090651,0.370782,0.485774,-0.005004,0.845906,0.533309,0.480920,0.654780,-0.090683,0.404695,0.461595,0.072445,0.579918,0.811448,0.480920,0.654776,-0.090672,0.354952,0.574585,-0.019850,0.998714,-0.046646,0.480924,0.654831,-0.335454,0.714912,0.216087,-0.942825,0.259809,0.208760,0.919980,0.308550,0.335454,0.714912,0.216087,0.942887,0.259675,0.208643,0.079660,0.309880,-0.017101,0.518983,0.725076,-0.639808,-0.660114,0.393568,0.492370,0.622230,-0.252151,0.581235,0.270769,-0.815249,0.567746,0.114160,0.966360,0.358260,0.017101,0.518983,0.725076,0.639965,-0.660109,0.393322,0.507620,0.622230,0.291440,0.608887,0.247046,0.888412,0.321382,-0.327778,0.045650,0.348330,0.286484,0.615117,0.244672,0.801432,0.481241,-0.355126,0.047360,0.345680,-0.277414,0.634720,0.259447,-0.530426,0.743720,-0.406852,0.954530,0.335040,-0.278381,0.637397,0.265003,-0.255090,0.851177,-0.458724,0.956120,0.333290,-0.278943,0.628180,0.248945,-0.840761,0.513404,-0.171863,0.951700,0.338250,-0.277472,0.632011,0.254455,-0.721001,0.626816,-0.295398,0.953170,0.336450,0.277356,0.634716,0.259432,0.530774,0.744149,-0.405613,0.045140,0.336350,0.278352,0.637395,0.264997,0.254922,0.851097,-0.458964,0.043550,0.334610,0.278936,0.628180,0.248944,0.840936,0.513234,-0.171514,0.047960,0.339560,0.277465,0.632011,0.254453,0.721486,0.627131,-0.293537,0.046490,0.337760,-0.281363,0.622058,0.241889,-0.907170,0.410978,-0.090216,0.949530,0.341170,-0.286494,0.615117,0.244674,-0.800987,0.481736,-0.355459,0.952310,0.344370,0.281349,0.622057,0.241885,0.907426,0.410473,-0.089941,0.050130,0.342470,0.091564,0.406079,0.662460,0.550278,0.783794,0.287855,0.526298,0.657610,0.090874,0.405270,0.665986,0.550278,0.783794,0.287855,0.526170,0.657940,-0.081294,0.372463,0.483756,-0.021379,0.839681,0.542660,0.483040,0.653950,-0.081328,0.408902,0.458390,0.046212,0.571439,0.819342,0.483040,0.653946,-0.081301,0.355269,0.575442,-0.040945,0.998418,-0.038528,0.483056,0.654016,0.098628,0.399624,0.465815,-0.258493,0.573401,0.777427,0.521511,0.655726,0.098595,0.369017,0.488425,-0.179144,0.844835,0.504144,0.521510,0.655730,0.104858,0.358174,0.573988,-0.655896,0.752697,-0.056984,0.523989,0.656694,0.098672,0.355247,0.573929,-0.163779,0.984875,-0.056553,0.521512,0.655770,-0.071031,0.412409,0.455599,0.046123,0.565291,0.823601,0.485250,0.653195,0.090674,0.404658,0.461560,-0.074764,0.580207,0.811030,0.519080,0.654776,0.090643,0.370764,0.485752,0.003131,0.846105,0.533008,0.519080,0.654780,-0.292897,0.588365,0.217972,-0.940446,0.274428,0.200626,0.941440,0.355130,0.292883,0.588364,0.217968,0.940536,0.274052,0.200716,0.058220,0.356430,0.036251,0.091747,0.424500,0.552024,-0.475194,0.685172,0.517060,0.798920,0.024396,0.088928,0.431264,0.473862,-0.511063,0.717126,0.510300,0.796390,0.028690,0.082126,0.423565,0.501375,-0.506046,0.701812,0.512890,0.802080,0.030312,0.095572,0.431686,0.529135,-0.487733,0.694358,0.513310,0.794400,0.021967,0.094859,0.437130,0.459389,-0.523180,0.717806,0.508900,0.792210,0.026677,0.097858,0.436064,0.511413,-0.501931,0.697512,0.511170,0.791780,0.015265,0.091460,0.438383,0.359506,-0.556725,0.748874,0.506040,0.792720,0.016994,0.083598,0.431864,0.373755,-0.546264,0.749601,0.506930,0.797660,0.019877,0.074565,0.423806,0.404225,-0.548851,0.731687,0.508510,0.804090,-0.291476,0.608889,0.247055,-0.888705,0.321139,-0.327219,0.954010,0.347030,0.090670,0.354938,0.574600,0.018234,0.998751,-0.046526,0.519076,0.654831,-0.060365,0.415343,0.453122,0.049747,0.561567,0.825935,0.487890,0.652455,-0.048619,0.412684,0.701940,-0.394663,0.659338,0.639933,0.487980,0.652803,0.081351,0.408840,0.458355,-0.046471,0.571967,0.818959,0.516950,0.653946,0.081318,0.372436,0.483734,0.021272,0.839915,0.542300,0.516950,0.653950,0.081326,0.355257,0.575454,0.041340,0.998406,-0.038436,0.516934,0.654016,-0.050108,0.417549,0.451019,0.060657,0.560196,0.826136,0.490399,0.651844,0.071067,0.412344,0.455569,-0.045577,0.565835,0.823258,0.514740,0.653195,-0.040711,0.376522,0.478073,0.037877,0.833813,0.550747,0.492300,0.651450,-0.040776,0.418692,0.449395,0.079499,0.561558,0.823609,0.492299,0.651444,-0.040574,0.356575,0.578127,0.006285,0.999674,-0.024728,0.492329,0.651543,0.060406,0.415283,0.453098,-0.049081,0.562051,0.825645,0.512100,0.652455,0.048669,0.412658,0.702000,0.394226,0.659069,0.640479,0.512010,0.652803,-0.032315,0.418619,0.448304,0.098339,0.566042,0.818490,0.493849,0.651264,0.050152,0.417495,0.450999,-0.060202,0.560616,0.825884,0.509591,0.651844,-0.024320,0.417534,0.447694,0.105491,0.573691,0.812250,0.495339,0.651294,-0.019557,0.413218,0.713776,-0.010469,0.717988,0.695976,0.495467,0.651693,0.040826,0.418640,0.449377,-0.079420,0.561935,0.823360,0.507691,0.651444,0.040761,0.376501,0.478062,-0.037833,0.833985,0.550488,0.507690,0.651450,0.040624,0.356568,0.578132,-0.006319,0.999674,-0.024729,0.507661,0.651543,-0.016377,0.415957,0.447422,0.091548,0.583421,0.806993,0.496839,0.651424,-0.013360,0.412486,0.714070,0.032295,0.750397,0.660198,0.496933,0.651823,0.032373,0.418566,0.448286,-0.098438,0.566403,0.818228,0.506141,0.651264,0.008711,0.080097,0.432552,0.214587,-0.584118,0.782789,0.503450,0.798380,0.010169,0.069645,0.424395,0.234034,-0.595455,0.768545,0.504200,0.805200,0.007787,0.088971,0.439400,0.206287,-0.590890,0.779933,0.503020,0.793080,0.0,0.088058,0.439803,0.000001,-0.606944,0.794744,0.500000,0.793210,0.0,0.078820,0.432908,-0.000001,-0.601996,0.798499,0.500000,0.798620,0.0,0.067913,0.424682,-0.000002,-0.617409,0.786642,0.500000,0.805570,0.090874,0.405270,0.665986,0.716609,-0.439602,0.541500,0.526170,0.657940,-0.008259,0.414586,0.447331,0.054219,0.592171,0.803986,0.498400,0.651535,-0.006835,0.411820,0.714291,0.038537,0.775191,0.630551,0.498450,0.651937,0.024382,0.417480,0.447676,-0.105401,0.574058,0.812002,0.504651,0.651294,0.019598,0.413202,0.713817,0.010808,0.717901,0.696061,0.504523,0.651693,0.000030,0.414034,0.447310,0.001223,0.595854,0.803092,0.500000,0.651585,0.000015,0.411574,0.714050,-0.000366,0.784054,0.620693,0.500000,0.651990,0.016441,0.415908,0.447407,-0.090745,0.583782,0.806824,0.503161,0.651424,0.013427,0.412468,0.714110,-0.032945,0.750255,0.660327,0.503065,0.651823,0.008321,0.414554,0.447321,-0.052333,0.592425,0.803924,0.501590,0.651535,0.006892,0.411801,0.714330,-0.039273,0.774778,0.631012,0.501540,0.651937,-0.095037,0.404709,0.661262,-0.430400,0.853618,0.293414,0.471636,0.658244,-0.092671,0.406048,0.661036,-0.430400,0.853618,0.293414,0.473123,0.657673,-0.109952,0.389438,0.574109,0.999946,0.007228,-0.007473,0.473517,0.657541,-0.108770,0.367900,0.574890,0.965673,0.258157,-0.028818,0.473661,0.657528,0.092651,0.406048,0.661036,-0.045657,0.630071,-0.775194,0.526868,0.657673,0.094523,0.404788,0.661236,-0.045657,0.630071,-0.775194,0.526841,0.657664,0.093401,0.403128,0.658619,-0.674446,0.385234,-0.629855,0.526300,0.657604,0.091564,0.406079,0.662460,-0.448461,0.495104,-0.744147,0.526298,0.657610,0.094951,0.404746,0.661304,0.434513,0.852677,0.290071,0.528374,0.658192,0.092651,0.406048,0.661036,0.434513,0.852677,0.290071,0.526868,0.657673,0.008671,0.617283,0.735978,0.179893,0.459749,0.869638,0.501970,0.593390,0.008417,0.604904,0.742471,0.164484,0.480346,0.861518,0.501930,0.596710,-0.000018,0.617636,0.736304,0.000227,0.464225,0.885717,0.500000,0.593340,-0.000029,0.605343,0.742731,0.000126,0.485829,0.874054,0.500000,0.596630,-0.008706,0.617284,0.735980,-0.179730,0.459641,0.869728,0.498020,0.593390,-0.008473,0.604907,0.742475,-0.164092,0.480376,0.861576,0.498060,0.596710,-0.342587,0.617260,0.157177,-0.956891,-0.086966,-0.277123,0.901940,0.347260,-0.342351,0.595742,0.164573,-0.995007,-0.090697,0.041655,0.905340,0.354790,-0.344439,0.618547,0.163779,-0.988147,-0.088311,0.125562,0.903640,0.346360,-0.340172,0.593568,0.158953,-0.937062,-0.145915,-0.317213,0.903560,0.356150,0.342351,0.595742,0.164573,0.995004,-0.090696,0.041725,0.094310,0.356080,0.342587,0.617260,0.157177,0.956890,-0.086966,-0.277126,0.097710,0.348550,0.344439,0.618547,0.163779,0.988143,-0.088318,0.125592,0.096000,0.347660,0.340172,0.593568,0.158953,0.937067,-0.145915,-0.317199,0.096090,0.357440,-0.336995,0.568678,0.164702,-0.894880,-0.283558,-0.344652,0.908090,0.366180,-0.339674,0.570793,0.169586,-0.980054,-0.190231,-0.057500,0.909830,0.364810,0.339674,0.570793,0.169586,0.980067,-0.190202,-0.057372,0.089830,0.366100,0.336995,0.568678,0.164702,0.894893,-0.283553,-0.344623,0.091570,0.367470,-0.015265,0.091460,0.438383,-0.359504,-0.556724,0.748876,0.493950,0.792720,-0.024396,0.088928,0.431264,-0.473864,-0.511062,0.717125,0.489690,0.796390,-0.016994,0.083598,0.431864,-0.373752,-0.546264,0.749603,0.493060,0.797660,-0.021967,0.094859,0.437131,-0.459388,-0.523179,0.717806,0.491090,0.792210,-0.030312,0.095572,0.431686,-0.529136,-0.487733,0.694357,0.486690,0.794400,-0.026677,0.097858,0.436064,-0.511415,-0.501930,0.697511,0.488820,0.791780,-0.036251,0.091747,0.424500,-0.552025,-0.475195,0.685170,0.482930,0.798920,-0.028690,0.082126,0.423565,-0.501379,-0.506045,0.701810,0.487110,0.802080,-0.019877,0.074565,0.423806,-0.404223,-0.548853,0.731686,0.491480,0.804090,0.092101,0.406611,0.662936,-0.767913,-0.292678,-0.569780,0.526400,0.657330,0.093913,0.407379,0.659070,-0.848793,-0.228394,-0.476851,0.526397,0.657338,0.092651,0.406048,0.661036,-0.691239,-0.309458,-0.653012,0.526868,0.657673,0.094523,0.404788,0.661236,-0.865651,-0.076043,-0.494839,0.526841,0.657664,0.108693,0.367922,0.574906,-0.965400,0.259168,-0.028889,0.526329,0.657528,-0.108098,0.409878,0.502402,0.990380,-0.118107,0.072102,0.473648,0.657495,-0.108906,0.414481,0.574921,0.991603,-0.129277,-0.003386,0.473634,0.657453,-0.008711,0.080097,0.432552,-0.214584,-0.584120,0.782789,0.496540,0.798380,-0.007787,0.088971,0.439400,-0.206286,-0.590890,0.779933,0.496970,0.793080,-0.010169,0.069645,0.424395,-0.234031,-0.595456,0.768545,0.495800,0.805200,0.005769,0.246876,0.643153,-0.097849,-0.922449,0.373515,0.501690,0.700860,0.0,0.079316,-0.251816,0.000000,0.676951,-0.736028,1.0,0.940490,0.045286,0.103183,-0.229383,0.024319,0.684005,-0.729072,0.974050,0.932030,0.050884,0.080158,-0.250561,0.022825,0.680491,-0.732401,0.978390,0.950840,0.0,0.102574,-0.230485,0.000000,0.680423,-0.732820,0.992050,0.923470,0.038324,0.133961,-0.200542,0.028452,0.689300,-0.723917,0.969950,0.914960,0.0,0.133785,-0.201315,0.000000,0.685253,-0.728305,0.984940,0.907890,0.085390,0.136062,-0.195586,0.062767,0.699840,-0.711536,0.950700,0.923090,0.096639,0.106777,-0.223201,0.058293,0.693480,-0.718113,0.952960,0.940860,0.105592,0.084718,-0.243584,0.056790,0.690045,-0.721535,0.955220,0.960540,0.020388,0.260088,0.667502,0.026706,-0.788640,0.614276,0.505310,0.693820,-0.085390,0.136062,-0.195586,-0.062767,0.699841,-0.711536,0.049290,0.923090,-0.045286,0.103183,-0.229383,-0.024319,0.684005,-0.729072,0.025940,0.932030,-0.096639,0.106777,-0.223201,-0.058293,0.693480,-0.718114,0.047030,0.940860,-0.038324,0.133961,-0.200542,-0.028452,0.689300,-0.723917,0.030040,0.914960,0.0,0.102574,-0.230485,0.000000,0.680423,-0.732820,0.007940,0.923470,0.0,0.133785,-0.201315,0.000000,0.685253,-0.728305,0.015050,0.907890,0.0,0.079316,-0.251816,0.000000,0.676951,-0.736028,0.0,0.940490,-0.050884,0.080158,-0.250561,-0.022825,0.680490,-0.732402,0.021600,0.950840,-0.105592,0.084718,-0.243584,-0.056790,0.690044,-0.721536,0.044770,0.960540,0.007578,0.589889,0.751389,0.148697,0.508423,0.848172,0.501650,0.601160,-0.000024,0.590245,0.751618,-0.000029,0.514832,0.857291,0.500000,0.601050,-0.007621,0.589888,0.751386,-0.148585,0.508130,0.848367,0.498340,0.601160,-0.012118,0.057337,0.413971,-0.262647,-0.612880,0.745248,0.494790,0.814070,0.0,0.054957,0.414199,-0.000001,-0.640256,0.768162,0.500000,0.814590,-0.023630,0.064039,0.413409,-0.436353,-0.558134,0.705750,0.489270,0.812460,-0.028371,0.051700,0.400189,-0.425070,-0.516437,0.743376,0.486760,0.823290,-0.014697,0.042578,0.400554,-0.266779,-0.573426,0.774605,0.493630,0.825910,-0.306644,0.619745,0.162303,-0.517168,-0.023985,-0.855548,0.884540,0.351840,-0.318456,0.618173,0.162498,0.316862,-0.018205,-0.948297,0.890450,0.350650,-0.317599,0.594941,0.165196,0.344956,-0.170351,-0.923031,0.894460,0.361810,-0.305554,0.595921,0.165311,0.024325,-0.214969,-0.976318,0.890120,0.364680,0.0,0.039011,0.400875,-0.000001,-0.608093,0.793866,0.500000,0.827180,0.012118,0.057337,0.413971,0.262648,-0.612879,0.745248,0.505200,0.814070,0.023630,0.064039,0.413409,0.436354,-0.558132,0.705751,0.510720,0.812460,0.014697,0.042578,0.400554,0.266778,-0.573426,0.774605,0.506360,0.825910,0.306644,0.619745,0.162303,0.517168,-0.023984,-0.855548,0.115100,0.353120,0.318456,0.618173,0.162498,-0.316859,-0.018202,-0.948298,0.109190,0.351930,0.305553,0.595921,0.165311,-0.024330,-0.214965,-0.976319,0.109540,0.365950,0.317598,0.594941,0.165196,-0.344946,-0.170346,-0.923036,0.105190,0.363090,-0.313665,0.694712,0.180832,0.360943,0.584429,-0.726748,0.898730,0.311600,-0.304343,0.694217,0.180519,-0.460994,0.635173,-0.619709,0.895960,0.307850,-0.311326,0.706894,0.194561,0.412949,0.768540,-0.488692,0.905940,0.304170,-0.303348,0.705683,0.194900,-0.359545,0.825733,-0.434617,0.904230,0.300840,0.313665,0.694712,0.180832,-0.360944,0.584429,-0.726748,0.100910,0.312920,0.311326,0.706894,0.194561,-0.412950,0.768540,-0.488691,0.093700,0.305500,0.304343,0.694217,0.180519,0.460994,0.635173,-0.619710,0.103670,0.309170,0.303349,0.705683,0.194900,0.359547,0.825729,-0.434622,0.095410,0.302170,-0.309637,0.714352,0.213895,0.411864,0.890145,-0.194960,0.915980,0.299030,-0.302393,0.712612,0.214879,-0.315641,0.934862,-0.162494,0.915280,0.295710,0.309637,0.714352,0.213895,-0.411865,0.890158,-0.194899,0.083680,0.300350,0.302393,0.712612,0.214879,0.315716,0.934822,-0.162576,0.084370,0.297030,-0.296041,0.719410,0.214272,-0.910341,0.410672,-0.051267,0.255180,0.585580,-0.291891,0.740105,0.206233,-0.998556,0.053541,-0.004420,0.251540,0.578390,-0.302393,0.712612,0.214879,-0.315641,0.934862,-0.162494,0.255270,0.588160,-0.295800,0.713261,0.190763,-0.907084,0.389481,-0.159694,0.245620,0.590090,-0.303348,0.705683,0.194900,-0.359545,0.825733,-0.434617,0.247050,0.592870,-0.292530,0.731265,0.178964,-0.997915,0.062242,-0.017090,0.240610,0.583550,-0.294686,0.779653,0.185576,-0.998396,-0.054760,0.014377,0.240990,0.563680,-0.294361,0.764779,0.154872,-0.998958,-0.044515,0.010116,0.229690,0.570950,-0.298057,0.831796,0.157265,-0.999787,-0.018005,-0.010127,0.226940,0.544960,-0.296775,0.807584,0.122199,-0.999001,-0.025768,-0.036500,0.215280,0.555610,0.296042,0.719410,0.214272,0.910349,0.410632,-0.051440,0.744810,0.585580,0.291891,0.740105,0.206233,0.998553,0.053585,-0.004516,0.748450,0.578390,0.292530,0.731265,0.178964,0.997914,0.062244,-0.017097,0.759380,0.583550,0.295800,0.713261,0.190763,0.907084,0.389478,-0.159706,0.754370,0.590090,0.302393,0.712612,0.214879,0.315716,0.934822,-0.162576,0.744720,0.588160,0.303349,0.705683,0.194900,0.359547,0.825729,-0.434622,0.752940,0.592870,0.294686,0.779653,0.185576,0.998396,-0.054757,0.014365,0.759000,0.563680,0.298057,0.831796,0.157265,0.999787,-0.018005,-0.010127,0.773050,0.544960,0.294361,0.764779,0.154872,0.998957,-0.044516,0.010115,0.770300,0.570950,0.296775,0.807584,0.122199,0.999001,-0.025768,-0.036500,0.784710,0.555610,-0.292969,0.715810,0.156187,-0.996762,0.060828,-0.052590,0.232200,0.591120,-0.296726,0.701647,0.172003,-0.920778,0.308922,-0.238190,0.238450,0.595770,-0.304343,0.694217,0.180519,-0.460994,0.635173,-0.619709,0.241060,0.598070,0.292969,0.715810,0.156187,0.996762,0.060828,-0.052590,0.767790,0.591120,0.296726,0.701647,0.172003,0.920778,0.308922,-0.238190,0.761540,0.595770,0.304343,0.694217,0.180519,0.460994,0.635173,-0.619710,0.758940,0.598070,0.028371,0.051700,0.400189,0.425071,-0.516437,0.743376,0.513230,0.823290,0.159592,0.933307,0.609337,0.564714,0.392237,0.726119,0.567730,0.475780,0.161052,0.896399,0.626724,0.571719,0.345129,0.744327,0.564200,0.491850,0.184934,0.930420,0.589117,0.678485,0.349552,0.646121,0.580790,0.476860,0.185352,0.893002,0.606565,0.686702,0.308888,0.658049,0.576490,0.493420,0.163831,0.863489,0.639102,0.574225,0.324692,0.751559,0.562290,0.505040,0.187326,0.860328,0.619281,0.692246,0.299054,0.656781,0.573900,0.507040,0.209259,0.855737,0.594255,0.827399,0.225622,0.514301,0.586110,0.509560,0.209131,0.886807,0.580510,0.815014,0.232508,0.530747,0.589910,0.496210,-0.296605,0.620728,0.145967,-0.897158,-0.040473,-0.439852,0.230510,0.629480,-0.284942,0.593798,0.125296,-0.933648,-0.134110,-0.332138,0.223740,0.642430,-0.296104,0.595188,0.147461,-0.888178,-0.134112,-0.439492,0.232490,0.639870,-0.286997,0.620569,0.122892,-0.952635,-0.087148,-0.291360,0.221720,0.631300,-0.306644,0.619745,0.162303,-0.517168,-0.023985,-0.855548,0.235690,0.628570,-0.305554,0.595921,0.165311,-0.880830,-0.141746,-0.451716,0.237680,0.638270,0.209850,0.923094,0.561933,0.802756,0.271105,0.531117,0.595680,0.479840,0.229306,0.876426,0.544954,0.911317,0.125533,0.392100,0.606650,0.500160,0.234468,0.909654,0.524292,0.906076,0.156582,0.393076,0.615190,0.485850,0.225944,0.848133,0.560567,0.918699,0.128833,0.373354,0.600840,0.511850,0.296605,0.620728,0.145967,0.897158,-0.040472,-0.439852,0.769480,0.629480,0.296104,0.595188,0.147461,0.888179,-0.134113,-0.439489,0.767500,0.639870,0.284942,0.593798,0.125296,0.933648,-0.134111,-0.332139,0.776250,0.642430,0.286997,0.620569,0.122892,0.952635,-0.087147,-0.291361,0.778270,0.631300,0.306644,0.619745,0.162303,0.517168,-0.023984,-0.855548,0.764310,0.628570,0.305553,0.595921,0.165311,0.880833,-0.141748,-0.451709,0.762310,0.638270,-0.315143,0.573860,0.172064,0.341819,-0.262988,-0.902218,0.899840,0.371860,-0.309724,0.554405,0.180199,0.234282,-0.428701,-0.872541,0.907200,0.381980,-0.302705,0.575402,0.172133,0.007490,-0.329954,-0.943967,0.896160,0.375200,-0.298200,0.555484,0.178534,-0.587168,-0.489797,-0.644464,0.903760,0.385380,0.315142,0.573860,0.172064,-0.341802,-0.262989,-0.902224,0.099820,0.373150,0.302705,0.575402,0.172133,-0.007499,-0.329950,-0.943969,0.103510,0.376480,0.309723,0.554405,0.180199,-0.234265,-0.428708,-0.872542,0.092470,0.383280,0.298199,0.555484,0.178534,0.587172,-0.489796,-0.644460,0.095910,0.386680,0.158714,0.522158,-0.051704,0.374272,-0.325313,-0.868384,0.875710,0.688620,0.168134,0.404260,-0.023051,0.490143,-0.064500,-0.869252,0.857020,0.753650,0.180130,0.520998,-0.041512,0.533508,-0.316001,-0.784546,0.864310,0.687690,0.197726,0.404519,-0.000923,0.693271,-0.050930,-0.718875,0.836960,0.751040,-0.168134,0.404260,-0.023051,-0.490143,-0.064500,-0.869252,0.142970,0.753650,-0.158714,0.522158,-0.051704,-0.374273,-0.325313,-0.868384,0.124280,0.688620,-0.197726,0.404519,-0.000923,-0.693271,-0.050930,-0.718875,0.163040,0.751040,-0.180130,0.520998,-0.041512,-0.533507,-0.316001,-0.784547,0.135680,0.687690,0.229062,0.524523,0.001375,0.799715,-0.274323,-0.534044,0.833040,0.681410,0.229577,0.465670,0.027775,0.838953,-0.182243,-0.512781,0.818260,0.710980,0.204327,0.522682,-0.024971,0.678824,-0.300655,-0.669929,0.849890,0.684680,0.216671,0.443659,0.014025,0.791120,-0.140636,-0.595274,0.827440,0.724940,-0.204327,0.522682,-0.024971,-0.678824,-0.300655,-0.669929,0.150100,0.684680,-0.229577,0.465670,0.027775,-0.838953,-0.182242,-0.512781,0.181730,0.710980,-0.229062,0.524523,0.001375,-0.799715,-0.274323,-0.534044,0.166950,0.681410,-0.216671,0.443659,0.014025,-0.791120,-0.140636,-0.595273,0.172550,0.724940,-0.282227,0.568491,0.130415,-0.922474,-0.201435,-0.329340,0.227090,0.652880,-0.293516,0.571900,0.151335,-0.886562,-0.242570,-0.393914,0.235740,0.649100,-0.302705,0.575402,0.172133,-0.892555,-0.255779,-0.371380,0.240980,0.646560,-0.289387,0.549167,0.160252,-0.898491,-0.330600,-0.288821,0.241610,0.658090,-0.298200,0.555484,0.178534,-0.587168,-0.489797,-0.644464,0.246990,0.654390,-0.279380,0.542985,0.140402,-0.938951,-0.241541,-0.245010,0.233100,0.663390,0.282227,0.568491,0.130415,0.922474,-0.201436,-0.329342,0.772900,0.652880,0.293516,0.571900,0.151335,0.886564,-0.242570,-0.393908,0.764250,0.649100,0.279380,0.542985,0.140402,0.938950,-0.241541,-0.245011,0.766890,0.663390,0.289387,0.549167,0.160252,0.898494,-0.330598,-0.288816,0.758380,0.658090,0.302705,0.575402,0.172133,0.892560,-0.255779,-0.371368,0.759010,0.646560,0.298199,0.555484,0.178534,0.587172,-0.489796,-0.644460,0.753000,0.654390,-0.290073,0.511368,0.213354,-0.032606,-0.656002,-0.754054,0.930250,0.401830,-0.279794,0.491516,0.231703,-0.335157,-0.811165,-0.479251,0.942680,0.409070,-0.275114,0.488953,0.227720,-0.806621,-0.561988,-0.183115,0.941890,0.412840,-0.283095,0.509908,0.209578,-0.706275,-0.572840,-0.415969,0.928670,0.405390,0.290073,0.511368,0.213354,0.032611,-0.656007,-0.754050,0.069410,0.403140,0.279794,0.491516,0.231703,0.335154,-0.811167,-0.479250,0.056990,0.410390,0.275114,0.488953,0.227720,0.806624,-0.561985,-0.183111,0.057780,0.414150,0.283095,0.509908,0.209578,0.706282,-0.572836,-0.415962,0.071000,0.406710,-0.270699,0.472512,0.203729,-0.984791,-0.172408,0.021511,0.272010,0.689550,-0.277878,0.502677,0.196450,-0.930353,-0.340503,-0.136020,0.263840,0.676260,-0.273490,0.491627,0.178608,-0.970604,-0.218087,-0.101818,0.256580,0.684050,-0.272632,0.482859,0.217226,-0.953793,-0.300462,0.001325,0.276740,0.682330,-0.283095,0.509908,0.209578,-0.706275,-0.572840,-0.415969,0.268800,0.670560,-0.275114,0.488953,0.227720,-0.806621,-0.561988,-0.183115,0.280140,0.677070,0.277878,0.502677,0.196450,0.930355,-0.340500,-0.136016,0.736150,0.676260,0.270699,0.472512,0.203729,0.984791,-0.172407,0.021512,0.727980,0.689550,0.273490,0.491627,0.178608,0.970604,-0.218086,-0.101818,0.743410,0.684050,0.272632,0.482859,0.217226,0.953793,-0.300460,0.001327,0.723250,0.682330,0.275114,0.488953,0.227720,0.806624,-0.561985,-0.183111,0.719850,0.677070,0.283095,0.509908,0.209578,0.706282,-0.572836,-0.415962,0.731190,0.670560,-0.266200,0.430552,0.168403,-0.993708,-0.101887,-0.046509,0.262960,0.712240,-0.270320,0.477921,0.157733,-0.985952,-0.132818,-0.101285,0.249040,0.692230,-0.263543,0.456340,0.122093,-0.974199,-0.106070,-0.199210,0.235950,0.705320,-0.268989,0.456512,0.188574,-0.993380,-0.114722,-0.005983,0.267620,0.698180,0.270320,0.477921,0.157733,0.985952,-0.132818,-0.101285,0.750950,0.692230,0.266200,0.430551,0.168403,0.993708,-0.101888,-0.046509,0.737030,0.712240,0.263543,0.456340,0.122093,0.974199,-0.106070,-0.199210,0.764040,0.705320,0.268989,0.456511,0.188574,0.993380,-0.114722,-0.005983,0.732370,0.698180,-0.257827,0.341957,0.118788,-0.998841,-0.011962,-0.046625,0.254240,0.766390,-0.255737,0.405973,0.099763,-0.967665,-0.023614,-0.251131,0.230980,0.734730,-0.251639,0.356845,0.078829,-0.957965,0.055413,-0.281484,0.226830,0.766350,-0.261033,0.389448,0.143133,-0.995379,-0.073499,-0.061801,0.257610,0.736560,0.257827,0.341957,0.118788,0.998841,-0.011962,-0.046625,0.745750,0.766390,0.255737,0.405973,0.099763,0.967665,-0.023614,-0.251131,0.769010,0.734730,0.261033,0.389448,0.143133,0.995379,-0.073499,-0.061801,0.742380,0.736560,0.251639,0.356845,0.078829,0.957965,0.055413,-0.281484,0.773160,0.766350,0.250390,0.524728,0.039400,0.899503,-0.223114,-0.375651,0.812580,0.679390,0.245555,0.460758,0.062543,0.908858,-0.140961,-0.392565,0.797930,0.709910,0.263945,0.527322,0.080824,0.958173,-0.164915,-0.233894,0.792490,0.675890,0.271780,0.534542,0.114498,0.970602,-0.158567,-0.181075,0.777790,0.669850,-0.245555,0.460758,0.062543,-0.908858,-0.140961,-0.392565,0.202060,0.709910,-0.237265,0.421517,0.052745,-0.891327,-0.043554,-0.451264,0.200320,0.733000,-0.230377,0.375105,0.038572,-0.856850,0.054627,-0.512663,0.196310,0.762880,-0.250390,0.524728,0.039400,-0.899503,-0.223114,-0.375652,0.187410,0.679390,-0.263945,0.527322,0.080824,-0.958173,-0.164916,-0.233895,0.207500,0.675890,-0.271780,0.534542,0.114498,-0.970602,-0.158568,-0.181075,0.222200,0.669850,0.237265,0.421517,0.052745,0.891327,-0.043554,-0.451264,0.799670,0.733000,0.230377,0.375105,0.038572,0.856850,0.054627,-0.512663,0.803680,0.762880,-0.277066,0.590344,0.096174,-0.967164,-0.148410,-0.206323,0.211830,0.646100,-0.266263,0.557497,0.067614,-0.955225,-0.180514,-0.234437,0.200360,0.662470,-0.273983,0.562449,0.102885,-0.962895,-0.164472,-0.213969,0.215550,0.657970,-0.269807,0.588521,0.059078,-0.959488,-0.177124,-0.219111,0.196270,0.648850,0.277066,0.590344,0.096174,0.967163,-0.148411,-0.206323,0.788160,0.646100,0.266263,0.557497,0.067614,0.955225,-0.180514,-0.234436,0.799630,0.662470,0.269807,0.588521,0.059078,0.959488,-0.177124,-0.219111,0.803720,0.648850,0.273983,0.562449,0.102886,0.962894,-0.164472,-0.213970,0.784440,0.657970,-0.258453,0.591730,0.014933,-0.914187,-0.230622,-0.333280,0.176970,0.648380,-0.233796,0.560257,-0.014211,-0.784760,-0.332685,-0.522946,0.161450,0.663820,-0.253524,0.557516,0.025642,-0.899610,-0.247308,-0.359919,0.181000,0.663970,-0.240359,0.596673,-0.028154,-0.813253,-0.299370,-0.498997,0.157700,0.646640,0.258453,0.591730,0.014933,0.914187,-0.230622,-0.333280,0.823020,0.648380,0.233796,0.560257,-0.014211,0.784761,-0.332685,-0.522945,0.838540,0.663820,0.240359,0.596673,-0.028154,0.813253,-0.299369,-0.498997,0.842290,0.646640,0.253524,0.557516,0.025642,0.899610,-0.247307,-0.359919,0.818990,0.663970,-0.274464,0.620900,0.053715,-0.965860,-0.165210,-0.199548,0.193880,0.634930,-0.280633,0.619545,0.092363,-0.974452,-0.133255,-0.180795,0.209490,0.633680,0.274464,0.620900,0.053715,0.965860,-0.165210,-0.199548,0.806110,0.634930,0.280633,0.619545,0.092363,0.974452,-0.133255,-0.180795,0.790500,0.633680,-0.246869,0.633801,-0.037028,-0.845641,-0.234413,-0.479522,0.156630,0.631010,-0.264346,0.626809,0.008197,-0.929845,-0.196828,-0.310883,0.175320,0.633360,0.246869,0.633801,-0.037028,0.845641,-0.234413,-0.479522,0.843360,0.631010,0.264346,0.626809,0.008197,0.929844,-0.196828,-0.310883,0.824670,0.633360,-0.185470,0.893017,0.606583,-0.687299,0.313639,0.655172,0.423500,0.493420,-0.209837,0.855774,0.594396,-0.827269,0.232139,0.511604,0.413880,0.509560,-0.187617,0.860347,0.619347,-0.690554,0.304336,0.656137,0.426090,0.507040,-0.208899,0.886805,0.580403,-0.814840,0.240032,0.527656,0.410080,0.496210,-0.161202,0.896414,0.626751,-0.573134,0.346159,0.742759,0.435800,0.491850,-0.164041,0.863510,0.639144,-0.572873,0.327408,0.751412,0.437700,0.505040,-0.159684,0.933314,0.609355,-0.567972,0.391570,0.723935,0.432260,0.475780,-0.184687,0.930411,0.589019,-0.680173,0.348338,0.645000,0.419200,0.476860,-0.209837,0.923106,0.561914,-0.802927,0.268932,0.531962,0.404310,0.479840,-0.229191,0.876424,0.544902,-0.910759,0.134143,0.390543,0.393340,0.500160,-0.226317,0.848135,0.560653,-0.919305,0.132616,0.370529,0.399150,0.511850,-0.234325,0.909652,0.524236,-0.906254,0.155856,0.392953,0.384800,0.485850,0.322982,0.657241,0.215448,0.778600,-0.103337,0.618954,0.072080,0.331350,0.333407,0.676648,0.200562,0.879160,-0.033603,0.475340,0.081360,0.326180,0.310162,0.642943,0.224896,0.578623,-0.393088,0.714617,0.064290,0.335170,-0.294013,0.772558,0.090165,-0.996531,-0.034582,-0.075697,0.204970,0.571110,-0.293723,0.741143,0.127919,-0.999222,-0.036089,-0.015902,0.220350,0.581950,0.294013,0.772558,0.090165,0.996531,-0.034583,-0.075697,0.795020,0.571110,0.293723,0.741143,0.127919,0.999222,-0.036090,-0.015902,0.779640,0.581950,-0.285499,0.940655,0.096252,-0.960811,0.219902,-0.168775,0.198340,0.507990,-0.296111,0.912479,0.170658,-0.994594,0.096675,-0.037900,0.227060,0.513810,-0.284802,0.972363,0.150177,-0.958919,0.264057,-0.103678,0.215110,0.492820,-0.296173,0.887622,0.126476,-0.994348,0.077373,-0.072700,0.212480,0.525690,-0.294358,0.851899,0.084750,-0.990771,0.044951,-0.127874,0.199750,0.540950,-0.283543,0.894512,0.045883,-0.954773,0.152597,-0.255191,0.183960,0.527340,-0.276075,0.835129,0.000007,-0.937494,0.083635,-0.337803,0.170370,0.551810,-0.289453,0.804057,0.046034,-0.982217,0.009222,-0.187523,0.187960,0.561360,0.285499,0.940655,0.096252,0.960811,0.219902,-0.168776,0.801660,0.507990,0.296112,0.912479,0.170658,0.994594,0.096675,-0.037900,0.772930,0.513810,0.296173,0.887622,0.126476,0.994348,0.077373,-0.072700,0.787510,0.525690,0.284802,0.972363,0.150177,0.958919,0.264057,-0.103678,0.784880,0.492820,0.283543,0.894512,0.045883,0.954773,0.152597,-0.255191,0.816030,0.527340,0.294358,0.851899,0.084750,0.990771,0.044951,-0.127874,0.800240,0.540950,0.276075,0.835129,0.000007,0.937494,0.083635,-0.337803,0.829620,0.551810,0.289453,0.804057,0.046034,0.982217,0.009221,-0.187523,0.812030,0.561360,-0.284438,0.990147,0.208000,-0.957331,0.286205,-0.040038,0.235580,0.481570,-0.295804,0.928929,0.217765,-0.994328,0.106251,-0.004807,0.244130,0.503760,0.284438,0.990147,0.208000,0.957330,0.286215,-0.040003,0.764410,0.481570,0.295804,0.928929,0.217765,0.994324,0.106283,-0.004827,0.755860,0.503760,-0.224382,0.826539,0.573347,-0.925368,0.130829,0.355777,0.403760,0.519420,-0.209496,0.832309,0.605555,-0.834144,0.228547,0.501967,0.417450,0.517720,0.224156,0.826520,0.573319,0.922873,0.138241,0.359436,0.596230,0.519420,0.208998,0.832289,0.605436,0.832755,0.227497,0.504742,0.582540,0.517720,-0.188993,0.836012,0.629294,-0.690513,0.306574,0.655137,0.428550,0.515670,-0.166637,0.838615,0.648191,-0.563837,0.325551,0.759016,0.439190,0.513930,0.188634,0.835977,0.629201,0.693606,0.300054,0.654888,0.571440,0.515670,0.166221,0.838594,0.648085,0.566932,0.321376,0.758489,0.560800,0.513930,-0.136410,0.863689,0.656972,-0.450142,0.324480,0.831917,0.450010,0.504620,-0.139106,0.838228,0.665179,-0.430730,0.310526,0.847376,0.450820,0.513500,-0.105147,0.860996,0.671744,-0.321686,0.297661,0.898842,0.462550,0.505310,-0.107323,0.834393,0.679648,-0.294506,0.281319,0.913305,0.463000,0.514280,0.136291,0.863675,0.656951,0.450372,0.324159,0.831917,0.549980,0.504620,0.138908,0.838208,0.665135,0.432671,0.308564,0.847104,0.549170,0.513500,0.107065,0.834374,0.679583,0.295819,0.280360,0.913175,0.536990,0.514280,0.105055,0.860989,0.671730,0.321730,0.299091,0.898351,0.537440,0.505310,-0.042398,0.822042,0.694474,-0.071688,0.229716,0.970614,0.486600,0.518160,-0.073052,0.827960,0.689339,-0.170453,0.254327,0.951979,0.475540,0.516170,-0.072192,0.856938,0.681728,-0.200294,0.260875,0.944366,0.475160,0.506620,-0.042709,0.853654,0.686947,-0.106170,0.230177,0.967340,0.486190,0.507740,0.042312,0.822034,0.694464,0.071075,0.229542,0.970700,0.513390,0.518160,0.072973,0.827957,0.689342,0.171060,0.253969,0.951965,0.524450,0.516170,0.042558,0.853642,0.686923,0.105898,0.230552,0.967281,0.513800,0.507740,0.072150,0.856937,0.681741,0.200993,0.262298,0.943823,0.524830,0.506620,-0.000189,0.818409,0.695579,0.000618,0.193973,0.981007,0.500000,0.519070,-0.019031,0.819142,0.695783,-0.007543,0.205160,0.978699,0.494140,0.518990,-0.019503,0.852614,0.688743,-0.038131,0.209677,0.977027,0.493890,0.507600,-0.000098,0.852673,0.689170,0.000535,0.201526,0.979483,0.500000,0.507200,0.018887,0.819135,0.695761,0.008198,0.205271,0.978671,0.505850,0.518990,0.019176,0.852604,0.688707,0.038534,0.209391,0.977072,0.506100,0.507600,-0.019608,0.890181,0.680763,-0.051676,0.277683,0.959282,0.493710,0.495330,-0.042847,0.890338,0.678316,-0.134828,0.286052,0.948681,0.485810,0.495510,-0.042620,0.931457,0.663727,-0.155891,0.393284,0.906105,0.485060,0.479740,-0.019568,0.931381,0.665765,-0.057182,0.387014,0.920299,0.493390,0.479790,-0.000007,0.890396,0.681088,0.000276,0.277240,0.960801,0.500000,0.494880,0.000095,0.931424,0.665906,0.000363,0.385255,0.922810,0.500000,0.479530,0.019453,0.890182,0.680785,0.052248,0.277527,0.959296,0.506280,0.495330,0.042690,0.890333,0.678300,0.135575,0.286063,0.948571,0.514180,0.495510,0.019528,0.931374,0.665728,0.057984,0.387232,0.920157,0.506600,0.479790,0.042470,0.931449,0.663694,0.156369,0.393250,0.906037,0.514930,0.479740,-0.071869,0.891865,0.672166,-0.238779,0.310314,0.920157,0.474480,0.494550,-0.103731,0.894191,0.660808,-0.353967,0.339738,0.871370,0.461510,0.493210,-0.071013,0.931796,0.656694,-0.268628,0.403897,0.874474,0.473070,0.478810,-0.102490,0.932525,0.644212,-0.374378,0.412128,0.830657,0.459330,0.477570,-0.132486,0.933533,0.627949,-0.471913,0.409678,0.780680,0.445740,0.476300,-0.133701,0.896336,0.644913,-0.465332,0.355003,0.810826,0.448600,0.492040,0.071522,0.891825,0.672086,0.240165,0.310687,0.919671,0.525510,0.494550,0.070954,0.931793,0.656685,0.269807,0.402865,0.874588,0.526930,0.478810,0.103202,0.894160,0.660680,0.353805,0.340768,0.871033,0.538480,0.493210,0.102306,0.932517,0.644179,0.375311,0.410478,0.831053,0.540660,0.477570,0.132175,0.933500,0.627868,0.470679,0.408935,0.781814,0.554250,0.476300,0.133481,0.896316,0.644856,0.463499,0.356198,0.811352,0.551390,0.492040,-0.244199,0.971966,0.463354,-0.894154,0.280045,0.349377,0.354330,0.456940,-0.239671,0.942885,0.496105,-0.904058,0.206041,0.374467,0.371470,0.470850,-0.218713,0.992320,0.501678,-0.795015,0.420199,0.437475,0.378700,0.445890,-0.213640,0.959025,0.535967,-0.797381,0.334700,0.502154,0.394200,0.463150,0.244053,0.971949,0.463315,0.894140,0.280732,0.348862,0.645660,0.456940,0.239638,0.942880,0.496101,0.903367,0.210104,0.373877,0.628520,0.470850,0.213533,0.959011,0.535943,0.797323,0.336735,0.500884,0.605790,0.463150,0.218636,0.992314,0.501659,0.794994,0.420019,0.437685,0.621290,0.445890,-0.192590,1.003664,0.529035,-0.666453,0.519409,0.534841,0.397290,0.440420,-0.187520,0.967143,0.564280,-0.671843,0.422267,0.608537,0.411020,0.459920,-0.166260,1.010509,0.549261,-0.550631,0.579915,0.600420,0.413430,0.436990,-0.162009,0.970882,0.585343,-0.561327,0.472498,0.679454,0.425370,0.458550,0.192465,1.003651,0.529002,0.665046,0.520288,0.535737,0.602700,0.440420,0.187471,0.967137,0.564268,0.670164,0.425483,0.608148,0.588970,0.459920,0.161847,0.970871,0.585312,0.558211,0.475738,0.679760,0.574620,0.458550,0.165907,1.010486,0.549167,0.548397,0.581072,0.601346,0.586560,0.436990,-0.103418,0.975270,0.620053,-0.380239,0.509642,0.771805,0.455340,0.457690,-0.133766,0.973327,0.603999,-0.472592,0.495278,0.728942,0.440300,0.457880,-0.137551,1.016798,0.567158,-0.468476,0.608798,0.640231,0.430490,0.433720,-0.106011,1.022571,0.582193,-0.378537,0.631939,0.676286,0.447880,0.431020,0.103181,0.975255,0.619994,0.381279,0.510039,0.771030,0.544650,0.457690,0.133708,0.973324,0.603984,0.471865,0.496623,0.728498,0.559690,0.457880,0.136992,1.016759,0.567007,0.468085,0.608930,0.640391,0.569500,0.433720,0.105668,1.022553,0.582102,0.380239,0.631120,0.676096,0.552110,0.431020,-0.071406,0.977043,0.632457,-0.284573,0.517604,0.806910,0.470370,0.457650,-0.042427,0.978337,0.640014,-0.186263,0.515400,0.836462,0.483490,0.457820,-0.073195,1.027117,0.593314,-0.290927,0.647524,0.704325,0.465140,0.429040,-0.043483,1.030270,0.601092,-0.213714,0.653975,0.725702,0.480310,0.428200,0.071222,0.977035,0.632430,0.285331,0.517626,0.806629,0.529620,0.457650,0.042148,0.978330,0.639989,0.186341,0.515184,0.836578,0.516500,0.457820,0.073127,1.027114,0.593299,0.292228,0.646805,0.704448,0.534850,0.429040,0.043431,1.030267,0.601086,0.214020,0.653569,0.725977,0.519680,0.428200,-0.019415,0.978995,0.643132,-0.086105,0.505580,0.858472,0.492680,0.457860,-0.019891,1.031757,0.605886,-0.119752,0.656868,0.744435,0.491220,0.428360,-0.000159,0.979187,0.643751,0.000207,0.499583,0.866266,0.500000,0.457810,-0.000022,1.032069,0.607525,0.000001,0.658013,0.753007,0.500000,0.428540,0.019835,1.031757,0.605883,0.119957,0.656655,0.744590,0.508770,0.428360,0.019140,0.978996,0.643137,0.086710,0.505309,0.858571,0.507310,0.457860,-0.244199,0.971966,0.463354,-0.894154,0.280045,0.349377,0.346310,0.449730,-0.222083,1.021470,0.457859,-0.789095,0.487278,0.374018,0.334470,0.427180,-0.248487,0.994756,0.428249,-0.879099,0.352258,0.321091,0.326370,0.448390,-0.218713,0.992320,0.501678,-0.795015,0.420199,0.437475,0.359690,0.427430,-0.255057,1.014837,0.386263,-0.875527,0.405852,0.262176,0.305280,0.448730,-0.227951,1.049345,0.405105,-0.779748,0.548760,0.301422,0.307330,0.428290,0.222051,1.021467,0.457850,0.789246,0.486658,0.374506,0.665520,0.427180,0.244053,0.971949,0.463315,0.894140,0.280732,0.348862,0.653690,0.449730,0.248443,0.994751,0.428236,0.879579,0.350414,0.321793,0.673620,0.448390,0.218636,0.992314,0.501659,0.794994,0.420019,0.437685,0.640300,0.427430,0.227938,1.049343,0.405101,0.779938,0.548394,0.301596,0.692670,0.428290,0.254986,1.014832,0.386244,0.875696,0.405386,0.262335,0.694710,0.448730,-0.192590,1.003664,0.529035,-0.666453,0.519409,0.534841,0.368370,0.411240,-0.169637,1.053124,0.497174,-0.538880,0.679535,0.497836,0.343310,0.396270,-0.197365,1.040846,0.480552,-0.664744,0.601513,0.443054,0.339570,0.410830,-0.166260,1.010509,0.549261,-0.550631,0.579915,0.600420,0.374730,0.397070,-0.200577,1.074848,0.419615,-0.657507,0.673324,0.338112,0.308280,0.411620,-0.171498,1.092438,0.430747,-0.529815,0.761840,0.372688,0.308990,0.396760,0.169614,1.053123,0.497168,0.538463,0.678666,0.499470,0.656680,0.396270,0.192465,1.003651,0.529002,0.665046,0.520288,0.535737,0.631630,0.411240,0.197299,1.040839,0.480534,0.664384,0.601158,0.444075,0.660420,0.410830,0.165907,1.010486,0.549167,0.548397,0.581072,0.601346,0.625260,0.397070,0.171498,1.092438,0.430747,0.529943,0.761700,0.372792,0.691000,0.396760,0.200577,1.074848,0.419615,0.657621,0.673111,0.338314,0.691710,0.411620,-0.137551,1.016798,0.567158,-0.468476,0.608798,0.640231,0.380010,0.381580,-0.108920,1.071873,0.524965,-0.373437,0.745823,0.551627,0.349170,0.365900,-0.140082,1.063228,0.512043,-0.457855,0.716106,0.526841,0.346610,0.381210,-0.106011,1.022571,0.582193,-0.378537,0.631939,0.676286,0.384000,0.365470,-0.141717,1.105857,0.441002,-0.439904,0.807577,0.392814,0.309990,0.382420,-0.111181,1.116177,0.450208,-0.356738,0.841705,0.405304,0.310910,0.368270,0.136992,1.016759,0.567007,0.468085,0.608930,0.640391,0.619980,0.381580,0.108912,1.071872,0.524963,0.374579,0.744672,0.552408,0.650820,0.365900,0.105668,1.022553,0.582102,0.380239,0.631120,0.676096,0.615990,0.365470,0.140062,1.063226,0.512038,0.458301,0.714677,0.528392,0.653380,0.381210,0.111181,1.116177,0.450208,0.356714,0.841687,0.405362,0.689080,0.368270,0.141717,1.105857,0.441002,0.439944,0.807530,0.392867,0.690000,0.382420,-0.073195,1.027117,0.593314,-0.290927,0.647524,0.704325,0.386570,0.349190,-0.046938,1.082799,0.542625,-0.214375,0.782488,0.584599,0.351970,0.336390,-0.076844,1.078629,0.534983,-0.290890,0.767391,0.571396,0.350730,0.350480,-0.043483,1.030270,0.601092,-0.213714,0.653975,0.725702,0.388170,0.334740,-0.080218,1.124023,0.457952,-0.275426,0.867702,0.413803,0.311310,0.354040,-0.050755,1.128822,0.464861,-0.190356,0.887560,0.419526,0.311910,0.340590,0.073127,1.027114,0.593299,0.292228,0.646805,0.704448,0.613420,0.349190,0.046938,1.082799,0.542625,0.214597,0.782374,0.584669,0.648020,0.336390,0.043431,1.030267,0.601086,0.214020,0.653569,0.725977,0.611820,0.334740,0.076800,1.078627,0.534971,0.291534,0.766978,0.571623,0.649260,0.350480,0.050755,1.128822,0.464861,0.190432,0.887535,0.419544,0.688080,0.340590,0.080218,1.124023,0.457952,0.275443,0.867671,0.413858,0.688680,0.354040,-0.024419,1.130238,0.471053,-0.096331,0.901047,0.422888,0.313450,0.328770,-0.021975,1.084075,0.548386,-0.120606,0.795666,0.593608,0.353650,0.325180,0.0,1.130129,0.473840,-0.000000,0.905695,0.423929,0.313920,0.317810,0.0,1.084180,0.550831,0.000021,0.801927,0.597422,0.354500,0.315430,-0.019891,1.031757,0.605886,-0.119752,0.656868,0.744435,0.389290,0.324180,-0.000022,1.032069,0.607525,0.000001,0.658013,0.753007,0.389750,0.315550,0.024419,1.130238,0.471053,0.096330,0.901047,0.422888,0.686540,0.328770,0.021975,1.084075,0.548386,0.120646,0.795625,0.593654,0.646340,0.325180,0.019835,1.031757,0.605883,0.119957,0.656655,0.744590,0.610710,0.324180,0.0,1.084180,0.550831,0.000021,0.801927,0.597422,0.645490,0.315430,-0.000022,1.032069,0.607525,0.000001,0.658013,0.753007,0.610240,0.315550,0.0,1.130129,0.473840,-0.000000,0.905695,0.423929,0.686070,0.317810,-0.231492,1.072311,0.341066,-0.768920,0.610438,0.190073,0.277660,0.430840,-0.259308,1.033395,0.331655,-0.875573,0.453664,0.166018,0.279700,0.450130,-0.261492,1.044437,0.268079,-0.874887,0.481711,0.050271,0.252990,0.454260,-0.233059,1.085029,0.269449,-0.770723,0.634636,0.056763,0.247920,0.436320,0.231489,1.072310,0.341065,0.769052,0.610236,0.190187,0.722330,0.430840,0.259304,1.033395,0.331653,0.875749,0.453247,0.166228,0.720290,0.450130,0.261488,1.044437,0.268078,0.874993,0.481501,0.050441,0.747000,0.454260,0.233059,1.085030,0.269449,0.770738,0.634617,0.056779,0.752070,0.436320,-0.171718,1.121793,0.353342,-0.525099,0.818630,0.232630,0.273620,0.400060,-0.201933,1.101084,0.347971,-0.648043,0.731415,0.212302,0.275550,0.414580,-0.202934,1.115195,0.270324,-0.657236,0.750380,0.070502,0.243440,0.421120,-0.172806,1.137158,0.270906,-0.536105,0.839988,0.083740,0.239490,0.407570,0.171718,1.121793,0.353342,0.525099,0.818630,0.232629,0.726370,0.400060,0.201933,1.101084,0.347971,0.648084,0.731376,0.212310,0.724440,0.414580,0.172806,1.137158,0.270906,0.536106,0.839987,0.083740,0.760500,0.407570,0.202934,1.115195,0.270324,0.657243,0.750374,0.070506,0.756550,0.421120,-0.111678,1.148163,0.362607,-0.336578,0.907672,0.250693,0.270750,0.373440,-0.141571,1.136869,0.358219,-0.422813,0.872472,0.244995,0.272100,0.386470,-0.143080,1.153004,0.271263,-0.424689,0.900812,0.090424,0.235830,0.395120,-0.113886,1.164589,0.271354,-0.338004,0.936503,0.093356,0.232310,0.383330,0.111678,1.148163,0.362607,0.336579,0.907672,0.250692,0.729240,0.373440,0.141571,1.136869,0.358219,0.422814,0.872471,0.244995,0.727890,0.386470,0.113886,1.164589,0.271354,0.338005,0.936503,0.093355,0.767680,0.383330,0.143080,1.153004,0.271263,0.424689,0.900812,0.090424,0.764160,0.395120,-0.053549,1.161735,0.370388,-0.167661,0.951884,0.256527,0.268230,0.348360,-0.082149,1.156505,0.366458,-0.255685,0.932829,0.253879,0.269310,0.360710,-0.085202,1.173469,0.271224,-0.262370,0.960018,0.097604,0.228780,0.371950,-0.056749,1.179689,0.271689,-0.175689,0.978957,0.103805,0.225480,0.360580,0.053549,1.161735,0.370388,0.167660,0.951885,0.256527,0.731760,0.348360,0.082149,1.156505,0.366458,0.255685,0.932829,0.253879,0.730680,0.360710,0.056749,1.179689,0.271689,0.175689,0.978958,0.103805,0.774520,0.360580,0.085202,1.173469,0.271224,0.262371,0.960018,0.097604,0.771210,0.371950,0.0,1.164186,0.376777,0.000000,0.965616,0.259974,0.266910,0.324900,-0.026350,1.163834,0.374661,-0.077987,0.962750,0.258902,0.267970,0.336480,-0.028377,1.183064,0.273189,-0.084126,0.990365,0.109996,0.222670,0.348840,0.0,1.183982,0.274132,0.000000,0.993617,0.112808,0.219530,0.336860,0.0,1.164186,0.376777,0.000000,0.965616,0.259974,0.733080,0.324900,0.026350,1.163834,0.374661,0.077987,0.962750,0.258902,0.732020,0.336480,0.0,1.183982,0.274132,0.000000,0.993617,0.112808,0.780460,0.336860,0.028377,1.183064,0.273189,0.084127,0.990365,0.109996,0.777320,0.348840,-0.233615,1.081859,0.195199,-0.782515,0.617251,-0.081679,0.219920,0.446140,-0.235230,1.061199,0.120681,-0.796916,0.569229,-0.202247,0.194490,0.460700,-0.261907,1.041268,0.200713,-0.875796,0.477638,-0.069598,0.227340,0.462640,-0.262603,1.021942,0.133330,-0.881973,0.441352,-0.165322,0.204050,0.475510,0.261907,1.041268,0.200713,0.875804,0.477626,-0.069571,0.772650,0.462640,0.235230,1.061199,0.120681,0.796916,0.569229,-0.202247,0.805500,0.460700,0.233615,1.081859,0.195199,0.782519,0.617246,-0.081673,0.780070,0.446140,0.262603,1.021942,0.133330,0.881973,0.441352,-0.165322,0.795940,0.475510,-0.176923,1.135178,0.189375,-0.561854,0.822785,-0.085703,0.209390,0.420130,-0.205048,1.112705,0.191712,-0.682851,0.725890,-0.082450,0.214190,0.432190,-0.208474,1.091479,0.112674,-0.704009,0.671528,-0.231130,0.187600,0.448230,-0.182358,1.113660,0.107506,-0.581298,0.769548,-0.264366,0.182080,0.437610,0.176923,1.135178,0.189375,0.561855,0.822785,-0.085702,0.790600,0.420130,0.205047,1.112705,0.191712,0.682851,0.725891,-0.082449,0.785800,0.432190,0.208474,1.091479,0.112674,0.704009,0.671528,-0.231130,0.812390,0.448230,0.182358,1.113660,0.107506,0.581297,0.769548,-0.264366,0.817910,0.437610,-0.120604,1.162982,0.184389,-0.362686,0.926842,-0.097075,0.199860,0.398840,-0.148916,1.151042,0.187033,-0.443940,0.891181,-0.093349,0.204730,0.409310,-0.155563,1.128893,0.102974,-0.461031,0.838426,-0.290677,0.176470,0.428280,-0.127664,1.140558,0.098271,-0.385242,0.871565,-0.303253,0.170320,0.419050,0.120604,1.162982,0.184389,0.362686,0.926842,-0.097075,0.800130,0.398840,0.148916,1.151042,0.187033,0.443940,0.891181,-0.093349,0.795260,0.409310,0.155563,1.128893,0.102974,0.461031,0.838426,-0.290676,0.823520,0.428280,0.127664,1.140558,0.098271,0.385242,0.871565,-0.303253,0.829670,0.419050,-0.061857,1.181069,0.179638,-0.210634,0.973247,-0.091777,0.189080,0.376890,-0.091608,1.173043,0.181633,-0.297240,0.950033,-0.095325,0.194540,0.388090,-0.098212,1.151185,0.093445,-0.325039,0.893097,-0.311010,0.163370,0.409020,-0.066986,1.160196,0.089578,-0.237793,0.917143,-0.319849,0.155920,0.398190,0.061857,1.181069,0.179638,0.210634,0.973247,-0.091777,0.810910,0.376890,0.091608,1.173043,0.181633,0.297240,0.950033,-0.095325,0.805460,0.388090,0.098212,1.151185,0.093445,0.325039,0.893097,-0.311010,0.836620,0.409020,0.066986,1.160196,0.089578,0.237794,0.917143,-0.319849,0.844070,0.398190,0.0,1.187839,0.179255,-0.000000,0.996350,-0.085357,0.178260,0.352410,-0.031190,1.186036,0.179142,-0.107106,0.990383,-0.087577,0.183800,0.364950,-0.033997,1.166354,0.087582,-0.125523,0.936976,-0.326068,0.148210,0.386390,0.0,1.168596,0.087085,-0.000000,0.944683,-0.327986,0.139940,0.373880,0.0,1.187839,0.179255,-0.000000,0.996350,-0.085357,0.821730,0.352410,0.031190,1.186036,0.179142,0.107107,0.990383,-0.087577,0.816190,0.364950,0.0,1.168596,0.087085,-0.000000,0.944683,-0.327986,0.860050,0.373880,0.033997,1.166354,0.087582,0.125524,0.936976,-0.326068,0.851780,0.386390,-0.238165,1.022473,0.047902,-0.807098,0.489911,-0.329516,0.172600,0.480410,-0.264465,0.985941,0.069140,-0.890538,0.371411,-0.262670,0.184680,0.493110,-0.262351,0.933206,0.009572,-0.886429,0.266988,-0.378102,0.168120,0.514820,-0.235993,0.965411,-0.019517,-0.800368,0.366734,-0.474254,0.153900,0.503870,0.238165,1.022473,0.047902,0.807098,0.489911,-0.329516,0.827390,0.480410,0.264465,0.985941,0.069140,0.890538,0.371411,-0.262670,0.815310,0.493110,0.235993,0.965411,-0.019517,0.800368,0.366734,-0.474254,0.846090,0.503870,0.262351,0.933206,0.009572,0.886429,0.266988,-0.378102,0.831870,0.514820,-0.211987,1.050383,0.033721,-0.707641,0.589485,-0.389554,0.163630,0.469800,-0.185830,1.070791,0.024093,-0.584723,0.677699,-0.445895,0.156160,0.460660,-0.209675,0.989149,-0.039162,-0.690129,0.458021,-0.560302,0.143110,0.495200,-0.183195,1.006143,-0.052838,-0.570427,0.529425,-0.627951,0.133790,0.487860,0.211987,1.050383,0.033721,0.707641,0.589485,-0.389554,0.836360,0.469800,0.185830,1.070791,0.024093,0.584723,0.677700,-0.445896,0.843830,0.460660,0.183195,1.006143,-0.052838,0.570427,0.529425,-0.627951,0.866200,0.487860,0.209675,0.989149,-0.039162,0.690129,0.458021,-0.560302,0.856880,0.495200,-0.130335,1.096165,0.008478,-0.399164,0.769709,-0.498213,0.140460,0.444560,-0.155383,1.018694,-0.064281,-0.476793,0.573270,-0.666356,0.124250,0.481050,-0.158604,1.085304,0.016019,-0.472617,0.737986,-0.481674,0.148550,0.452480,-0.127092,1.028155,-0.074534,-0.413328,0.599800,-0.685128,0.114510,0.474800,0.130335,1.096165,0.008478,0.399165,0.769709,-0.498213,0.859530,0.444560,0.155383,1.018694,-0.064281,0.476793,0.573270,-0.666356,0.875750,0.481050,0.127092,1.028155,-0.074534,0.413328,0.599800,-0.685128,0.885480,0.474800,0.158604,1.085304,0.016019,0.472617,0.737986,-0.481674,0.851440,0.452480,-0.069799,1.113024,-0.004470,-0.242828,0.813633,-0.528239,0.122520,0.427610,-0.098977,1.035514,-0.083683,-0.343215,0.623891,-0.702114,0.104830,0.469140,-0.101071,1.105331,0.001291,-0.333979,0.791603,-0.511686,0.131830,0.436470,-0.069091,1.041390,-0.090836,-0.240138,0.647782,-0.722989,0.094510,0.463050,0.069799,1.113023,-0.004470,0.242828,0.813633,-0.528239,0.877470,0.427610,0.098977,1.035514,-0.083683,0.343214,0.623891,-0.702114,0.895160,0.469140,0.069091,1.041390,-0.090836,0.240138,0.647782,-0.722989,0.905480,0.463050,0.101071,1.105331,0.001291,0.333979,0.791603,-0.511686,0.868170,0.436470,-0.035721,1.118802,-0.007787,-0.129064,0.830712,-0.541535,0.112410,0.417270,0.0,1.121132,-0.008795,-0.000000,0.837415,-0.546568,0.101320,0.406010,-0.035634,1.045947,-0.095085,-0.121583,0.662526,-0.739105,0.082710,0.455270,0.0,1.047846,-0.096440,-0.000000,0.667023,-0.745037,0.069440,0.446660,0.035721,1.118802,-0.007787,0.129065,0.830712,-0.541535,0.887580,0.417270,0.0,1.121132,-0.008795,-0.000000,0.837415,-0.546568,0.898670,0.406010,0.035634,1.045947,-0.095085,0.121583,0.662526,-0.739105,0.917280,0.455270,0.0,1.047846,-0.096440,-0.000000,0.667023,-0.745037,0.930550,0.446660,-0.223955,0.892163,-0.076189,-0.770985,0.231896,-0.593132,0.136730,0.531960,-0.252057,0.865842,-0.042603,-0.862567,0.161495,-0.479476,0.152580,0.541450,0.223955,0.892163,-0.076189,0.770986,0.231895,-0.593132,0.863270,0.531960,0.252057,0.865842,-0.042603,0.862566,0.161496,-0.479477,0.847410,0.541450,-0.172473,0.922149,-0.112510,-0.535250,0.350514,-0.768536,0.115450,0.520270,-0.197827,0.910271,-0.097852,-0.652227,0.301526,-0.695473,0.125250,0.525290,0.172473,0.922149,-0.112510,0.535250,0.350514,-0.768536,0.884550,0.520270,0.197827,0.910271,-0.097852,0.652227,0.301525,-0.695472,0.874740,0.525290,-0.145656,0.930848,-0.125139,-0.459440,0.373011,-0.806088,0.104930,0.515730,-0.118571,0.938008,-0.136410,-0.409914,0.385298,-0.826750,0.094380,0.511410,0.145656,0.930848,-0.125139,0.459441,0.373010,-0.806088,0.895060,0.515730,0.118571,0.938008,-0.136410,0.409914,0.385298,-0.826751,0.905610,0.511410,-0.092398,0.944521,-0.145880,-0.338440,0.400944,-0.851295,0.084610,0.507070,-0.064818,0.949740,-0.152970,-0.221936,0.417399,-0.881205,0.074390,0.502660,0.0,0.953832,-0.158577,0.000000,0.423465,-0.905912,0.048050,0.492980,-0.033556,0.952844,-0.157203,-0.100535,0.423486,-0.900307,0.062120,0.497930,0.092398,0.944521,-0.145880,0.338440,0.400944,-0.851295,0.915390,0.507070,0.064818,0.949740,-0.152970,0.221936,0.417399,-0.881205,0.925600,0.502660,0.0,0.953832,-0.158577,0.000000,0.423465,-0.905912,0.951940,0.492980,0.033556,0.952844,-0.157203,0.100535,0.423486,-0.900307,0.937870,0.497930,-0.333407,0.676648,0.200562,-0.879220,-0.033520,0.475236,0.918290,0.324870,-0.322987,0.657242,0.215449,-0.778740,-0.103029,0.618829,0.927570,0.330040,-0.310191,0.642944,0.224904,-0.578731,-0.392857,0.714657,0.935370,0.333860,0.151670,0.321247,0.541079,0.807678,-0.452078,0.378525,0.555720,0.694370,0.154509,0.307226,0.517409,0.784282,-0.519526,0.339109,0.559970,0.701940,0.150396,0.291574,0.498812,0.710167,-0.655760,0.256207,0.560920,0.709970,-0.151670,0.321247,0.541079,-0.807656,-0.452166,0.378469,0.444270,0.694370,-0.154509,0.307226,0.517409,-0.784282,-0.519525,0.339110,0.440020,0.701940,-0.194085,0.641545,-0.100985,-0.565512,-0.335123,-0.753584,0.123610,0.630550,-0.221254,0.638654,-0.074514,-0.715970,-0.281764,-0.638746,0.138880,0.630390,-0.214899,0.599983,-0.061995,-0.661350,-0.367715,-0.653760,0.140260,0.646540,-0.187915,0.601941,-0.084548,-0.493565,-0.428334,-0.756917,0.125300,0.647350,0.194085,0.641545,-0.100985,0.565511,-0.335123,-0.753584,0.876390,0.630550,0.221254,0.638654,-0.074514,0.715970,-0.281764,-0.638746,0.861110,0.630390,0.187915,0.601941,-0.084548,0.493566,-0.428333,-0.756917,0.874690,0.647350,0.214899,0.599983,-0.061995,0.661350,-0.367715,-0.653760,0.859730,0.646540,-0.170786,0.643444,-0.115920,-0.391001,-0.378939,-0.838763,0.113490,0.630910,-0.149465,0.644885,-0.123669,-0.252406,-0.405158,-0.878714,0.104960,0.631730,-0.164868,0.603246,-0.097046,-0.321980,-0.471690,-0.820876,0.115000,0.648440,-0.144034,0.604544,-0.103553,-0.194092,-0.493727,-0.847680,0.106240,0.649810,0.149465,0.644885,-0.123669,0.252406,-0.405158,-0.878714,0.895030,0.631730,0.170786,0.643444,-0.115920,0.391001,-0.378939,-0.838763,0.886510,0.630910,0.144035,0.604544,-0.103553,0.194091,-0.493727,-0.847681,0.893750,0.649810,0.164868,0.603246,-0.097046,0.321980,-0.471689,-0.820876,0.884990,0.648440,-0.127003,0.646064,-0.129431,-0.184734,-0.426112,-0.885608,0.095100,0.632680,-0.122459,0.606222,-0.108326,-0.125796,-0.509690,-0.851112,0.096440,0.650880,-0.103853,0.647437,-0.134389,-0.123812,-0.449145,-0.884839,0.084810,0.633390,-0.100187,0.608619,-0.112101,-0.063629,-0.525207,-0.848592,0.086200,0.651520,0.127003,0.646064,-0.129431,0.184734,-0.426113,-0.885608,0.904890,0.632680,0.103853,0.647437,-0.134389,0.123811,-0.449146,-0.884838,0.915180,0.633390,0.122459,0.606222,-0.108326,0.125796,-0.509690,-0.851112,0.903550,0.650880,0.100187,0.608620,-0.112101,0.063627,-0.525207,-0.848592,0.913790,0.651520,-0.077775,0.611660,-0.114292,-0.001612,-0.534183,-0.845367,0.076230,0.651580,-0.080980,0.649302,-0.137644,-0.045557,-0.471663,-0.880601,0.075040,0.633640,-0.056789,0.650584,-0.138322,0.013143,-0.488281,-0.872588,0.064630,0.634470,-0.054086,0.614145,-0.114655,0.026439,-0.533346,-0.845484,0.065690,0.652040,-0.029468,0.650179,-0.136772,0.020921,-0.497174,-0.867398,0.052270,0.636910,-0.027891,0.614755,-0.113903,0.015168,-0.526317,-0.850153,0.053650,0.653920,0.0,0.649377,-0.135824,-0.000000,-0.499575,-0.866270,0.038650,0.639320,0.000000,0.614436,-0.113501,0.000001,-0.521873,-0.853024,0.040710,0.656050,0.077775,0.611660,-0.114292,0.001612,-0.534183,-0.845367,0.923760,0.651580,0.080980,0.649302,-0.137644,0.045556,-0.471665,-0.880600,0.924950,0.633640,0.056789,0.650584,-0.138322,-0.013142,-0.488282,-0.872587,0.935360,0.634470,0.054086,0.614145,-0.114655,-0.026438,-0.533347,-0.845483,0.934300,0.652040,0.029468,0.650179,-0.136772,-0.020920,-0.497175,-0.867398,0.947720,0.636910,0.0,0.649377,-0.135824,-0.000000,-0.499575,-0.866270,0.961340,0.639320,0.027891,0.614755,-0.113903,-0.015167,-0.526318,-0.850152,0.946340,0.653920,0.000000,0.614436,-0.113501,0.000001,-0.521873,-0.853024,0.959280,0.656050,-0.208804,0.562056,-0.044533,-0.624803,-0.403580,-0.668390,0.144080,0.664620,-0.182798,0.563475,-0.063994,-0.452678,-0.452631,-0.768250,0.129090,0.665810,0.182798,0.563475,-0.063994,0.452678,-0.452631,-0.768250,0.870900,0.665810,0.208804,0.562056,-0.044533,0.624803,-0.403580,-0.668390,0.855910,0.664620,-0.093427,0.403124,0.658513,0.684151,0.378793,-0.623260,0.473690,0.657604,-0.103291,0.372467,0.625879,0.714452,0.566243,-0.411007,0.476003,0.656729,-0.107369,0.379664,0.623478,0.922508,0.252881,-0.291600,0.473671,0.657555,-0.089409,0.403565,0.664396,0.722919,0.363165,-0.587792,0.476005,0.656791,-0.094546,0.404784,0.661130,0.867377,-0.084406,-0.490441,0.473149,0.657664,-0.108754,0.394748,0.623369,0.976024,0.027960,-0.215860,0.473386,0.657585,-0.093938,0.407371,0.658962,0.852886,-0.225181,-0.471041,0.473593,0.657338,-0.107641,0.413153,0.623688,0.967445,-0.146053,-0.206684,0.473619,0.657412,0.103188,0.372507,0.625900,-0.713721,0.566861,-0.411425,0.523989,0.656729,0.107302,0.379687,0.623531,-0.920588,0.257730,-0.293415,0.526319,0.657555,0.089255,0.403624,0.664386,-0.717397,0.369652,-0.590507,0.523988,0.656791,0.033041,0.409713,0.704935,-0.194724,0.803106,-0.563119,0.507578,0.651804,0.031323,0.374423,0.651203,-0.087937,0.914763,-0.394303,0.506069,0.651462,0.026381,0.409591,0.706939,-0.148765,0.818348,-0.555136,0.506005,0.651636,0.039479,0.374532,0.649832,-0.089089,0.911579,-0.401356,0.507631,0.651636,0.040523,0.409367,0.701047,-0.209637,0.789890,-0.576304,0.509505,0.652189,0.048557,0.374195,0.647584,-0.081989,0.908304,-0.410197,0.509545,0.652029,-0.026321,0.409606,0.706906,0.148861,0.818276,-0.555216,0.493985,0.651636,-0.031265,0.374439,0.651180,0.087931,0.914708,-0.394433,0.493921,0.651462,-0.032997,0.409731,0.704894,0.193769,0.803296,-0.563178,0.492412,0.651804,-0.039430,0.374548,0.649809,0.088752,0.911568,-0.401457,0.492359,0.651636,-0.040503,0.409376,0.701023,0.210236,0.789689,-0.576361,0.490485,0.652189,-0.048519,0.374209,0.647561,0.082410,0.908203,-0.410337,0.490445,0.652029,0.068741,0.406859,0.685134,-0.349787,0.694146,-0.629134,0.516891,0.654199,0.069618,0.372646,0.641424,-0.104982,0.895144,-0.433238,0.514694,0.653358,0.059853,0.407643,0.690964,-0.267314,0.745119,-0.611016,0.514652,0.653499,0.079821,0.371850,0.637757,-0.144096,0.881628,-0.449409,0.516919,0.654081,0.076650,0.405920,0.678611,-0.456433,0.616892,-0.641181,0.519063,0.654975,0.089017,0.371060,0.633742,-0.215430,0.857913,-0.466450,0.519071,0.654882,-0.203456,0.338524,-0.001526,-0.696885,0.134276,-0.704501,0.166580,0.797370,-0.184531,0.301341,-0.025535,-0.555601,0.262831,-0.788813,0.146160,0.830730,-0.211484,0.295422,-0.004657,-0.697899,0.264327,-0.665633,0.166940,0.833420,-0.175651,0.344356,-0.022422,-0.537212,0.117073,-0.835283,0.146460,0.794990,-0.158852,0.302755,-0.040028,-0.444648,0.265842,-0.855346,0.130460,0.827110,-0.150170,0.345904,-0.035074,-0.430153,0.116525,-0.895204,0.130850,0.793140,-0.231992,0.324604,0.029543,-0.836526,0.150097,-0.526967,0.196100,0.799530,-0.252606,0.310394,0.066139,-0.951009,0.125478,-0.282553,0.227600,0.799350,-0.237914,0.284505,0.024007,-0.831210,0.252049,-0.495540,0.197730,0.831830,-0.256556,0.273969,0.059334,-0.946660,0.204436,-0.249080,0.230430,0.826780,0.083748,0.404778,0.671286,-0.584974,0.506619,-0.633358,0.521517,0.655882,0.096966,0.370721,0.629557,-0.394410,0.790232,-0.469013,0.521514,0.655810,-0.079794,0.371874,0.637707,0.146490,0.880988,-0.449890,0.483071,0.654081,-0.068720,0.406874,0.685060,0.355337,0.691377,-0.629073,0.483099,0.654199,-0.069581,0.372667,0.641385,0.105250,0.895009,-0.433454,0.485296,0.653358,-0.059818,0.407663,0.690908,0.267313,0.745014,-0.611144,0.485338,0.653499,-0.089002,0.371094,0.633677,0.211631,0.858550,-0.467016,0.480927,0.654882,-0.076567,0.405980,0.678460,0.450494,0.619722,-0.642651,0.480934,0.654975,0.184531,0.301341,-0.025535,0.555601,0.262832,-0.788814,0.853840,0.830730,0.203456,0.338524,-0.001526,0.696885,0.134276,-0.704501,0.833410,0.797370,0.211484,0.295422,-0.004657,0.697899,0.264328,-0.665633,0.833050,0.833420,0.175651,0.344356,-0.022422,0.537213,0.117073,-0.835282,0.853530,0.794990,0.150170,0.345904,-0.035074,0.430154,0.116525,-0.895204,0.869140,0.793140,0.158852,0.302755,-0.040028,0.444648,0.265841,-0.855346,0.869530,0.827110,0.231992,0.324604,0.029543,0.836526,0.150097,-0.526967,0.803890,0.799530,0.237914,0.284505,0.024007,0.831211,0.252049,-0.495540,0.802260,0.831830,0.252606,0.310394,0.066139,0.951009,0.125478,-0.282553,0.772390,0.799350,0.256556,0.273969,0.059334,0.946660,0.204435,-0.249080,0.769570,0.826780,-0.160404,0.565266,-0.074776,-0.291574,-0.482380,-0.826011,0.118330,0.666730,-0.140348,0.567615,-0.080885,-0.177252,-0.493677,-0.851390,0.109200,0.667600,0.160404,0.565266,-0.074776,0.291574,-0.482380,-0.826011,0.881660,0.666730,0.140348,0.567615,-0.080884,0.177251,-0.493677,-0.851390,0.890800,0.667600,-0.097029,0.370711,0.629523,0.384649,0.794429,-0.470030,0.478476,0.655810,-0.083832,0.404761,0.671250,0.569032,0.518551,-0.638207,0.478473,0.655882,0.007033,0.407642,0.708276,-0.051534,0.834114,-0.549180,0.501543,0.651917,0.008108,0.372696,0.652330,-0.043798,0.922486,-0.383538,0.501565,0.651739,0.000016,0.407412,0.708021,0.002230,0.835762,-0.549088,0.500000,0.651970,0.000027,0.372482,0.652300,0.001306,0.923799,-0.382876,0.500000,0.651790,0.013719,0.408310,0.708065,-0.103843,0.829149,-0.549298,0.503070,0.651803,0.015975,0.373272,0.652199,-0.079506,0.919178,-0.385735,0.503112,0.651626,-0.101681,0.347872,-0.055376,-0.327349,0.133514,-0.935423,0.102770,0.791250,-0.126458,0.346914,-0.045487,-0.383643,0.124164,-0.915096,0.116820,0.792140,-0.134384,0.302236,-0.051622,-0.389163,0.270894,-0.880437,0.117010,0.825670,-0.108013,0.301940,-0.062825,-0.335673,0.267360,-0.903240,0.102630,0.824460,-0.008047,0.372709,0.652314,0.045330,0.922372,-0.383635,0.498425,0.651739,-0.006975,0.407660,0.708240,0.053923,0.833923,-0.549241,0.498447,0.651917,-0.013652,0.408328,0.708027,0.103833,0.829077,-0.549409,0.496928,0.651803,-0.015910,0.373289,0.652178,0.079668,0.919105,-0.385873,0.496886,0.651626,0.049811,0.408505,0.696402,-0.212839,0.776604,-0.592947,0.512015,0.652785,0.058832,0.373464,0.644744,-0.080299,0.903839,-0.420271,0.512055,0.652631,0.101681,0.347872,-0.055376,0.327350,0.133514,-0.935423,0.897220,0.791250,0.126458,0.346914,-0.045487,0.383643,0.124164,-0.915096,0.883170,0.792140,0.108013,0.301940,-0.062825,0.335674,0.267360,-0.903239,0.897360,0.824460,0.134384,0.302236,-0.051622,0.389163,0.270895,-0.880436,0.882980,0.825670,-0.119897,0.570535,-0.085546,-0.111084,-0.496743,-0.860760,0.099480,0.668040,-0.098394,0.573770,-0.089178,-0.056259,-0.496103,-0.866439,0.089240,0.668330,-0.051843,0.579083,-0.092659,0.002582,-0.477301,-0.878736,0.067240,0.669610,-0.075804,0.576815,-0.091550,-0.009529,-0.489526,-0.871937,0.078530,0.668780,0.119897,0.570535,-0.085546,0.111083,-0.496743,-0.860760,0.900510,0.668040,0.098394,0.573770,-0.089178,0.056258,-0.496103,-0.866439,0.910750,0.668330,0.051843,0.579083,-0.092659,-0.002583,-0.477300,-0.878737,0.932750,0.669610,0.075804,0.576815,-0.091550,0.009529,-0.489525,-0.871937,0.921470,0.668780,-0.049762,0.408530,0.696345,0.214383,0.776108,-0.593040,0.487975,0.652785,-0.058789,0.373485,0.644712,0.081147,0.903661,-0.420489,0.487935,0.652631,0.020052,0.409049,0.707771,-0.123917,0.825016,-0.551356,0.504529,0.651673,0.023624,0.373937,0.651894,-0.089034,0.916714,-0.389498,0.504586,0.651496,-0.020010,0.409065,0.707732,0.123579,0.825009,-0.551442,0.495461,0.651673,-0.023566,0.373953,0.651871,0.088871,0.916676,-0.389625,0.495404,0.651496,0.007304,0.419478,0.708714,0.090740,-0.755064,-0.649342,0.501614,0.651228,0.008297,0.464652,0.652621,0.159575,-0.896240,-0.413871,0.501603,0.651371,0.014200,0.420357,0.708571,0.117469,-0.745863,-0.655660,0.503196,0.651080,0.016322,0.466871,0.652535,0.239122,-0.877773,-0.415133,0.503179,0.651240,0.000013,0.419148,0.708342,-0.000099,-0.760643,-0.649171,0.500000,0.651305,0.000027,0.463799,0.652555,-0.002093,-0.909481,-0.415741,0.500000,0.651435,-0.077582,0.302003,-0.072978,-0.263910,0.260488,-0.928707,0.084540,0.821850,-0.074071,0.348744,-0.064116,-0.249279,0.147686,-0.957105,0.087210,0.789840,-0.047338,0.302279,-0.080333,-0.181225,0.259253,-0.948654,0.067510,0.819090,-0.046586,0.349303,-0.070376,-0.163531,0.165596,-0.972541,0.072450,0.788410,0.077582,0.302003,-0.072978,0.263911,0.260489,-0.928707,0.915450,0.821850,0.074071,0.348744,-0.064116,0.249279,0.147686,-0.957104,0.912780,0.789840,0.046586,0.349303,-0.070376,0.163531,0.165596,-0.972541,0.927540,0.788410,0.047338,0.302279,-0.080333,0.181225,0.259254,-0.948654,0.932480,0.819090,-0.026364,0.579908,-0.093300,-0.008475,-0.462879,-0.886381,0.055280,0.671030,0.000000,0.579889,-0.093696,0.000003,-0.455721,-0.890123,0.042980,0.672740,0.026365,0.579908,-0.093300,0.008476,-0.462879,-0.886381,0.944710,0.671030,0.000000,0.579889,-0.093696,0.000003,-0.455721,-0.890123,0.957020,0.672740,0.020706,0.421327,0.708415,0.067651,-0.738285,-0.671088,0.504688,0.650936,0.024087,0.469425,0.652280,0.200485,-0.881419,-0.427676,0.504671,0.651103,-0.007236,0.419502,0.708673,-0.091280,-0.754743,-0.649640,0.498379,0.651228,-0.008232,0.464703,0.652605,-0.162725,-0.895626,-0.413974,0.498388,0.651371,0.027097,0.421970,0.707540,-0.088219,-0.722138,-0.686100,0.506173,0.650906,0.031834,0.471176,0.651580,0.033003,-0.894855,-0.445135,0.506158,0.651073,-0.014132,0.420378,0.708540,-0.117636,-0.745416,-0.656138,0.496802,0.651080,-0.016255,0.466945,0.652516,-0.240243,-0.877310,-0.415465,0.496819,0.651240,0.033681,0.422095,0.705402,-0.278451,-0.678278,-0.680004,0.507726,0.651093,0.039974,0.471315,0.650172,-0.190655,-0.873798,-0.447357,0.507709,0.651257,-0.020663,0.421347,0.708381,-0.067247,-0.737817,-0.671643,0.495304,0.650936,-0.024027,0.469504,0.652259,-0.200520,-0.881182,-0.428148,0.495321,0.651103,0.041151,0.421520,0.701617,-0.395396,-0.634063,-0.664550,0.509623,0.651507,0.049035,0.469469,0.647936,-0.356442,-0.826422,-0.435862,0.509608,0.651664,-0.027031,0.421993,0.707502,0.088134,-0.721668,-0.686606,0.493817,0.650906,-0.031773,0.471256,0.651557,-0.032981,-0.894625,-0.445599,0.493832,0.651073,-0.022201,0.349306,-0.073495,-0.076687,0.179851,-0.980700,0.060470,0.787390,-0.021848,0.302434,-0.083999,-0.088829,0.263349,-0.960602,0.055530,0.817050,0.0,0.349213,-0.074315,-0.000000,0.184935,-0.982751,0.049960,0.786510,0.000000,0.302488,-0.084944,-0.000000,0.266084,-0.963950,0.046080,0.815390,0.022201,0.349306,-0.073495,0.076686,0.179851,-0.980700,0.939520,0.787390,0.0,0.349213,-0.074315,-0.000000,0.184935,-0.982751,0.950030,0.786510,0.021848,0.302434,-0.083999,0.088828,0.263350,-0.960602,0.944460,0.817050,0.000000,0.302488,-0.084944,-0.000000,0.266084,-0.963950,0.953910,0.815390,-0.258904,0.297650,0.103074,-0.998416,0.054331,-0.014637,0.255260,0.795760,-0.262130,0.263489,0.094644,-0.992989,0.114134,0.030755,0.258140,0.819640,-0.255597,0.287857,0.137484,-0.990411,-0.031231,0.134577,0.279230,0.790490,-0.257507,0.254345,0.127510,-0.976219,-0.001910,0.216779,0.282180,0.812140,0.262130,0.263489,0.094644,0.992989,0.114134,0.030755,0.741860,0.819640,0.258904,0.297650,0.103074,0.998416,0.054331,-0.014637,0.744730,0.795760,0.257507,0.254345,0.127510,0.976219,-0.001911,0.216779,0.717810,0.812140,0.255597,0.287857,0.137484,0.990411,-0.031231,0.134577,0.720770,0.790490,-0.248185,0.248035,0.157684,-0.948384,-0.122621,0.292457,0.301440,0.805710,-0.250274,0.282209,0.166966,-0.973729,-0.125300,0.190135,0.297030,0.785360,-0.243603,0.278414,0.194915,-0.947764,-0.214539,0.236044,0.312360,0.780460,-0.236260,0.242832,0.189589,-0.923985,-0.222294,0.311188,0.319350,0.799860,0.248185,0.248035,0.157684,0.948385,-0.122621,0.292456,0.698550,0.805710,0.250274,0.282209,0.166966,0.973729,-0.125300,0.190134,0.702970,0.785360,0.236260,0.242832,0.189589,0.923984,-0.222294,0.311188,0.680640,0.799860,0.243603,0.278414,0.194915,0.947764,-0.214539,0.236045,0.687630,0.780460,-0.221041,0.269020,0.256847,-0.884525,-0.273596,0.377837,0.344980,0.771610,-0.222203,0.238390,0.226623,-0.907041,-0.275375,0.318505,0.338640,0.793800,-0.206641,0.232592,0.264419,-0.882321,-0.265973,0.388289,0.357970,0.788290,-0.233913,0.274515,0.225783,-0.918788,-0.267820,0.290002,0.328510,0.775780,0.222203,0.238390,0.226623,0.907041,-0.275374,0.318507,0.661350,0.793800,0.221041,0.269020,0.256847,0.884524,-0.273597,0.377837,0.655010,0.771610,0.206641,0.232592,0.264419,0.882321,-0.265972,0.388289,0.642020,0.788290,0.233912,0.274515,0.225783,0.918787,-0.267821,0.290003,0.671480,0.775780,-0.188521,0.258482,0.310234,-0.824208,-0.226710,0.518925,0.375830,0.765230,-0.187237,0.227321,0.298159,-0.850015,-0.222704,0.477366,0.376440,0.783890,-0.169251,0.223953,0.326320,-0.837608,-0.189065,0.512511,0.392320,0.779690,-0.204812,0.263287,0.285642,-0.846653,-0.251821,0.468791,0.361520,0.768200,0.187237,0.227321,0.298159,0.850015,-0.222704,0.477365,0.623550,0.783890,0.188521,0.258482,0.310234,0.824208,-0.226712,0.518924,0.624160,0.765230,0.169251,0.223953,0.326320,0.837608,-0.189065,0.512510,0.607670,0.779690,0.204812,0.263287,0.285642,0.846653,-0.251823,0.468790,0.638470,0.768200,-0.175035,0.255969,0.329225,-0.830918,-0.227350,0.507827,0.385650,0.762610,-0.156209,0.224898,0.347908,-0.851791,-0.197065,0.485405,0.403840,0.775070,0.175035,0.255969,0.329225,0.830917,-0.227349,0.507828,0.614340,0.762610,0.156209,0.224898,0.347908,0.851790,-0.197065,0.485406,0.596150,0.775070,-0.131046,0.183019,0.376641,-0.826977,-0.208403,0.522186,0.421050,0.784210,-0.142378,0.201088,0.364363,-0.854095,-0.187291,0.485226,0.414390,0.781080,-0.144322,0.176231,0.353669,-0.836885,-0.151040,0.526128,0.409870,0.793390,-0.155078,0.197208,0.341393,-0.847256,-0.154619,0.508183,0.402710,0.787950,-0.163852,0.177319,0.321341,-0.860868,-0.144721,0.487813,0.392130,0.799890,-0.173597,0.199437,0.310596,-0.858724,-0.177925,0.480557,0.385750,0.793330,-0.186320,0.183955,0.280346,-0.897057,-0.192251,0.397906,0.370700,0.805120,-0.194675,0.205158,0.272760,-0.888408,-0.236150,0.393656,0.365670,0.798270,0.131046,0.183019,0.376641,0.826976,-0.208404,0.522186,0.578940,0.784210,0.142378,0.201088,0.364363,0.854095,-0.187291,0.485226,0.585600,0.781080,0.155078,0.197208,0.341393,0.847257,-0.154619,0.508182,0.597280,0.787950,0.144322,0.176232,0.353669,0.836885,-0.151040,0.526128,0.590120,0.793390,0.163852,0.177318,0.321341,0.860868,-0.144720,0.487814,0.607860,0.799890,0.173597,0.199437,0.310596,0.858725,-0.177924,0.480557,0.614240,0.793330,0.194674,0.205158,0.272760,0.888408,-0.236147,0.393657,0.634320,0.798270,0.186320,0.183955,0.280346,0.897057,-0.192250,0.397906,0.629290,0.805120,-0.206290,0.193909,0.232751,-0.908749,-0.228404,0.349294,0.348070,0.810970,-0.212904,0.212695,0.229660,-0.904331,-0.261098,0.337657,0.344460,0.804190,-0.227220,0.203260,0.187106,-0.895890,-0.197538,0.397944,0.325540,0.817550,-0.230891,0.219569,0.187933,-0.906513,-0.212423,0.364842,0.323280,0.810730,0.206290,0.193909,0.232751,0.908749,-0.228404,0.349294,0.651920,0.810970,0.212904,0.212695,0.229660,0.904331,-0.261097,0.337658,0.655530,0.804190,0.230891,0.219569,0.187933,0.906513,-0.212423,0.364842,0.676710,0.810730,0.227220,0.203260,0.187106,0.895890,-0.197538,0.397944,0.674450,0.817550,-0.247048,0.225926,0.153260,-0.922994,-0.111569,0.368286,0.303810,0.817330,-0.261022,0.217865,0.118542,-0.936433,0.037778,0.348807,0.284250,0.832830,-0.246512,0.210532,0.150488,-0.901506,-0.105582,0.419689,0.305020,0.824770,-0.259229,0.232743,0.122056,-0.956926,0.024182,0.289325,0.283630,0.824670,0.246512,0.210532,0.150488,0.901506,-0.105580,0.419690,0.694970,0.824770,0.261022,0.217865,0.118542,0.936432,0.037780,0.348808,0.715740,0.832830,0.247048,0.225926,0.153260,0.922994,-0.111569,0.368286,0.696190,0.817330,0.259229,0.232743,0.122056,0.956925,0.024183,0.289325,0.716360,0.824670,-0.265885,0.241295,0.089939,-0.979926,0.176826,0.092074,0.259560,0.832940,-0.269591,0.226495,0.086680,-0.964528,0.214792,0.153461,0.260160,0.841180,-0.267042,0.236099,0.051835,-0.915920,0.384877,-0.113843,0.232440,0.849470,-0.261734,0.250786,0.055143,-0.932907,0.309553,-0.184014,0.231840,0.841200,0.265885,0.241295,0.089939,0.979926,0.176826,0.092074,0.740430,0.832940,0.261734,0.250786,0.055143,0.932907,0.309553,-0.184014,0.768150,0.841200,0.267042,0.236099,0.051835,0.915919,0.384878,-0.113843,0.767560,0.849470,0.269591,0.226495,0.086680,0.964528,0.214793,0.153461,0.739830,0.841180,-0.251701,0.245301,0.015187,-0.794564,0.515767,-0.320394,0.198820,0.857240,-0.219946,0.268729,-0.009833,-0.686993,0.443591,-0.575559,0.167380,0.851620,-0.228560,0.252659,-0.015880,-0.653989,0.596952,-0.464702,0.167850,0.861950,-0.244791,0.260086,0.019516,-0.818721,0.396938,-0.414894,0.198530,0.848200,0.251701,0.245301,0.015187,0.794564,0.515767,-0.320394,0.801170,0.857240,0.219946,0.268729,-0.009833,0.686993,0.443590,-0.575559,0.832610,0.851620,0.244791,0.260086,0.019516,0.818721,0.396937,-0.414893,0.801470,0.848200,0.228560,0.252659,-0.015880,0.653989,0.596951,-0.464702,0.832150,0.861950,-0.168393,0.276416,-0.045980,-0.434207,0.450673,-0.779973,0.131350,0.845190,-0.193854,0.274320,-0.030963,-0.549738,0.456014,-0.699885,0.146740,0.849320,-0.203526,0.257557,-0.037725,-0.515194,0.619376,-0.592409,0.147890,0.860530,-0.178421,0.259842,-0.052918,-0.400709,0.603128,-0.689688,0.133010,0.856690,0.168393,0.276415,-0.045980,0.434207,0.450673,-0.779973,0.868640,0.845190,0.193854,0.274320,-0.030963,0.549738,0.456013,-0.699886,0.853250,0.849320,0.178421,0.259842,-0.052918,0.400709,0.603128,-0.689688,0.866980,0.856690,0.203526,0.257557,-0.037725,0.515194,0.619376,-0.592410,0.852110,0.860530,-0.152870,0.259974,-0.065336,-0.328171,0.577787,-0.747306,0.119830,0.854600,-0.143336,0.276257,-0.058378,-0.365485,0.441336,-0.819539,0.118080,0.843430,-0.123463,0.258866,-0.077767,-0.274127,0.548698,-0.789800,0.104560,0.852170,-0.115337,0.275244,-0.070354,-0.309943,0.423942,-0.851004,0.103230,0.841690,0.152870,0.259974,-0.065336,0.328171,0.577787,-0.747306,0.880160,0.854600,0.143336,0.276257,-0.058378,0.365486,0.441336,-0.819538,0.881910,0.843430,0.115338,0.275245,-0.070354,0.309943,0.423942,-0.851004,0.896760,0.841690,0.123463,0.258866,-0.077767,0.274127,0.548696,-0.789802,0.895430,0.852170,-0.088165,0.257975,-0.089092,-0.219394,0.517876,-0.826844,0.083710,0.847920,-0.082556,0.274881,-0.081080,-0.246325,0.401462,-0.882129,0.083530,0.838200,-0.053037,0.257848,-0.097204,-0.159316,0.495347,-0.853961,0.063950,0.843620,-0.050037,0.275111,-0.088781,-0.174825,0.385782,-0.905874,0.064940,0.834580,0.088165,0.257975,-0.089092,0.219396,0.517873,-0.826845,0.916280,0.847920,0.082556,0.274881,-0.081080,0.246326,0.401461,-0.882129,0.916460,0.838200,0.050037,0.275111,-0.088781,0.174826,0.385782,-0.905874,0.935050,0.834580,0.053037,0.257848,-0.097204,0.159317,0.495346,-0.853962,0.936040,0.843620,-0.023969,0.258134,-0.101310,-0.084472,0.484537,-0.870683,0.051010,0.840170,-0.022812,0.275317,-0.092791,-0.089913,0.380363,-0.920456,0.052580,0.831800,0.0,0.258315,-0.102388,-0.000000,0.481879,-0.876238,0.041320,0.837320,0.0,0.275387,-0.093878,-0.000000,0.379912,-0.925022,0.043270,0.829510,0.023969,0.258134,-0.101310,0.084470,0.484536,-0.870683,0.948980,0.840170,0.022812,0.275317,-0.092791,0.089912,0.380363,-0.920456,0.947410,0.831800,0.0,0.275387,-0.093878,-0.000000,0.379912,-0.925022,0.956720,0.829510,0.0,0.258315,-0.102388,-0.000000,0.481879,-0.876238,0.958670,0.837320,-0.055906,0.242472,-0.106433,-0.144568,0.550202,-0.822422,0.062320,0.853350,-0.025938,0.225051,-0.122290,-0.067586,0.578883,-0.812605,0.046020,0.860320,-0.059372,0.224559,-0.118353,-0.127676,0.594459,-0.793925,0.060200,0.865300,-0.024916,0.242838,-0.110521,-0.077321,0.537403,-0.839773,0.048890,0.849260,0.0,0.225614,-0.122969,-0.000001,0.573402,-0.819274,0.035650,0.856310,0.0,0.243188,-0.111489,-0.000001,0.533489,-0.845807,0.038920,0.845900,0.025938,0.225051,-0.122291,0.067585,0.578883,-0.812605,0.953970,0.860320,0.055906,0.242472,-0.106433,0.144569,0.550202,-0.822422,0.937670,0.853350,0.059372,0.224559,-0.118353,0.127677,0.594460,-0.793925,0.939800,0.865300,0.024916,0.242838,-0.110521,0.077319,0.537404,-0.839773,0.951110,0.849260,0.0,0.243188,-0.111489,-0.000001,0.533489,-0.845807,0.961080,0.845900,0.0,0.225614,-0.122969,-0.000001,0.573402,-0.819274,0.964340,0.856310,-0.064769,0.202596,-0.134944,-0.106847,0.640617,-0.760391,0.057580,0.880890,-0.030764,0.179894,-0.157879,-0.045724,0.660831,-0.749140,0.037720,0.889100,-0.071655,0.179619,-0.154342,-0.086734,0.677072,-0.730788,0.054600,0.896730,-0.027885,0.203180,-0.138642,-0.056358,0.623430,-0.779845,0.042090,0.874490,0.0,0.180646,-0.158241,-0.000000,0.655102,-0.755540,0.025640,0.883270,0.0,0.203832,-0.138968,-0.000000,0.617820,-0.786320,0.030990,0.869550,0.030764,0.179894,-0.157879,0.045723,0.660832,-0.749140,0.962270,0.889100,0.064769,0.202596,-0.134944,0.106846,0.640616,-0.760391,0.942410,0.880890,0.071655,0.179619,-0.154342,0.086734,0.677072,-0.730788,0.945390,0.896730,0.027885,0.203180,-0.138642,0.056357,0.623430,-0.779846,0.957900,0.874490,0.0,0.203832,-0.138968,-0.000000,0.617820,-0.786320,0.969000,0.869550,0.0,0.180646,-0.158241,-0.000000,0.655102,-0.755540,0.974350,0.883270,-0.132855,0.244516,-0.085676,-0.249475,0.605788,-0.755501,0.105050,0.863260,-0.102729,0.225563,-0.108971,-0.176268,0.619413,-0.765021,0.082600,0.871410,-0.145624,0.227520,-0.095868,-0.230894,0.648732,-0.725145,0.105970,0.877460,-0.094380,0.243054,-0.097771,-0.197965,0.573805,-0.794706,0.083150,0.858330,-0.127692,0.181972,-0.144092,-0.129174,0.702061,-0.700303,0.081880,0.906820,-0.163847,0.206567,-0.110547,-0.213213,0.696781,-0.684862,0.108190,0.897250,-0.114921,0.204109,-0.125043,-0.151550,0.667499,-0.729025,0.082580,0.889120,-0.182083,0.185042,-0.128454,-0.192108,0.734428,-0.650930,0.109310,0.916820,0.102729,0.225563,-0.108971,0.176269,0.619414,-0.765020,0.917390,0.871410,0.132855,0.244516,-0.085676,0.249475,0.605788,-0.755502,0.894940,0.863260,0.145624,0.227520,-0.095868,0.230894,0.648732,-0.725144,0.894020,0.877460,0.094380,0.243054,-0.097770,0.197967,0.573805,-0.794706,0.916850,0.858330,0.163847,0.206567,-0.110547,0.213213,0.696781,-0.684862,0.891800,0.897250,0.127692,0.181973,-0.144092,0.129174,0.702061,-0.700303,0.918110,0.906820,0.114921,0.204109,-0.125043,0.151550,0.667500,-0.729024,0.917410,0.889120,0.182083,0.185042,-0.128455,0.192108,0.734428,-0.650930,0.890680,0.916820,-0.189428,0.245578,-0.060802,-0.373785,0.669458,-0.641958,0.133790,0.868620,-0.177907,0.228784,-0.082830,-0.290758,0.671902,-0.681181,0.122030,0.881120,-0.203500,0.228644,-0.070861,-0.354346,0.696539,-0.623916,0.134960,0.883660,-0.163692,0.245731,-0.073086,-0.303410,0.637200,-0.708462,0.120690,0.866290,-0.197587,0.207676,-0.096415,-0.282437,0.715667,-0.638788,0.124790,0.901590,-0.222350,0.207140,-0.084447,-0.335378,0.727543,-0.598501,0.137390,0.904320,-0.218052,0.185785,-0.113564,-0.262599,0.763705,-0.589743,0.126410,0.921920,-0.242763,0.184768,-0.101374,-0.309022,0.778548,-0.546230,0.138870,0.924830,0.177907,0.228784,-0.082830,0.290757,0.671903,-0.681181,0.877960,0.881120,0.189428,0.245578,-0.060802,0.373784,0.669459,-0.641958,0.866200,0.868620,0.203500,0.228644,-0.070861,0.354345,0.696540,-0.623916,0.865030,0.883660,0.163692,0.245731,-0.073086,0.303409,0.637200,-0.708462,0.879300,0.866290,0.197587,0.207676,-0.096415,0.282436,0.715667,-0.638789,0.875200,0.901590,0.218052,0.185785,-0.113564,0.262598,0.763705,-0.589743,0.873580,0.921920,0.222350,0.207140,-0.084447,0.335378,0.727542,-0.598502,0.862600,0.904320,0.242763,0.184768,-0.101374,0.309022,0.778549,-0.546230,0.861130,0.924830,-0.214095,0.243523,-0.045751,-0.487085,0.694805,-0.529144,0.148380,0.872020,-0.238188,0.239181,-0.023233,-0.634236,0.670228,-0.385409,0.168050,0.872620,-0.227804,0.226889,-0.056724,-0.468958,0.725312,-0.503985,0.149200,0.887040,-0.250927,0.222709,-0.033674,-0.629363,0.703825,-0.329442,0.168400,0.887230,-0.266750,0.182983,-0.089675,-0.429735,0.788033,-0.440830,0.151730,0.929380,-0.268897,0.201155,-0.049069,-0.628229,0.725238,-0.281706,0.168980,0.908870,-0.246440,0.205495,-0.071982,-0.450364,0.749729,-0.484850,0.150890,0.908410,-0.289171,0.178226,-0.066456,-0.623391,0.746825,-0.231593,0.169250,0.930150,-0.270084,0.215239,0.002133,-0.777839,0.607096,-0.162484,0.199550,0.880390,-0.259369,0.231889,0.009979,-0.783688,0.572846,-0.240168,0.199200,0.866860,-0.272633,0.222370,0.048146,-0.906988,0.418595,-0.046369,0.233320,0.858340,-0.280777,0.205210,0.042616,-0.893169,0.448356,0.035025,0.234140,0.870810,-0.305800,0.168237,-0.024203,-0.755395,0.654622,-0.029138,0.200140,0.922500,-0.286247,0.193238,-0.010129,-0.771808,0.629462,-0.089948,0.199560,0.900870,-0.293549,0.182349,0.033858,-0.869640,0.478027,0.123353,0.234490,0.889760,-0.311451,0.155602,0.023100,-0.826102,0.526413,0.201110,0.235700,0.911520,0.214095,0.243522,-0.045751,0.487084,0.694806,-0.529144,0.851610,0.872020,0.227804,0.226889,-0.056724,0.468958,0.725313,-0.503984,0.850790,0.887040,0.238188,0.239181,-0.023233,0.634236,0.670228,-0.385409,0.831940,0.872620,0.250927,0.222709,-0.033674,0.629364,0.703825,-0.329441,0.831590,0.887230,0.266750,0.182983,-0.089675,0.429735,0.788034,-0.440830,0.848260,0.929380,0.268897,0.201155,-0.049069,0.628229,0.725238,-0.281705,0.831010,0.908870,0.289171,0.178226,-0.066456,0.623391,0.746825,-0.231593,0.830740,0.930150,0.246440,0.205495,-0.071982,0.450364,0.749729,-0.484850,0.849100,0.908410,0.270084,0.215239,0.002133,0.777839,0.607096,-0.162485,0.800440,0.880390,0.259369,0.231889,0.009979,0.783688,0.572846,-0.240168,0.800790,0.866860,0.280777,0.205210,0.042616,0.893169,0.448355,0.035025,0.765850,0.870810,0.272633,0.222370,0.048146,0.906988,0.418596,-0.046369,0.766670,0.858340,0.305800,0.168237,-0.024203,0.755395,0.654622,-0.029138,0.799850,0.922500,0.286247,0.193238,-0.010129,0.771807,0.629462,-0.089947,0.800430,0.900870,0.311451,0.155602,0.023100,0.826102,0.526413,0.201110,0.764290,0.911520,0.293549,0.182348,0.033858,0.869640,0.478028,0.123353,0.765500,0.889760,-0.273487,0.212473,0.083380,-0.950970,0.224075,0.213180,0.261130,0.849980,-0.262957,0.203368,0.115313,-0.913865,0.029894,0.404916,0.285210,0.841470,-0.279004,0.194686,0.078630,-0.928270,0.233312,0.289621,0.262220,0.861990,-0.265555,0.184937,0.111200,-0.880062,0.014222,0.474646,0.286670,0.852950,-0.301651,0.143518,0.062004,-0.819655,0.312253,0.480276,0.264740,0.900540,-0.288055,0.170928,0.071261,-0.887329,0.253858,0.384971,0.263310,0.879900,-0.269574,0.160229,0.105077,-0.826729,0.014195,0.562421,0.288990,0.869640,-0.276362,0.132587,0.097391,-0.753351,0.068362,0.654055,0.291470,0.887960,0.273487,0.212473,0.083380,0.950970,0.224076,0.213180,0.738860,0.849980,0.262957,0.203368,0.115313,0.913865,0.029895,0.404916,0.714780,0.841470,0.279004,0.194686,0.078630,0.928270,0.233312,0.289620,0.737770,0.861990,0.265555,0.184937,0.111200,0.880062,0.014222,0.474646,0.713320,0.852950,0.301651,0.143518,0.062004,0.819654,0.312253,0.480276,0.735250,0.900540,0.288055,0.170928,0.071261,0.887330,0.253858,0.384971,0.736680,0.879900,0.276362,0.132587,0.097391,0.753351,0.068362,0.654055,0.708520,0.887960,0.269574,0.160229,0.105077,0.826729,0.014194,0.562421,0.711000,0.869640,-0.245781,0.195478,0.147941,-0.878644,-0.120005,0.462152,0.306550,0.832590,-0.244262,0.176255,0.144870,-0.847988,-0.147063,0.509205,0.309210,0.843050,-0.223598,0.187148,0.186553,-0.887393,-0.203028,0.413900,0.328090,0.824650,-0.218093,0.166517,0.185870,-0.879429,-0.225376,0.419297,0.332140,0.834400,-0.241284,0.150627,0.140530,-0.808894,-0.152402,0.567860,0.314060,0.858250,-0.239023,0.121762,0.135536,-0.765908,-0.092042,0.636327,0.319730,0.874190,-0.210107,0.139054,0.184915,-0.875515,-0.225815,0.427179,0.339170,0.848920,-0.201706,0.108147,0.183949,-0.877131,-0.163954,0.451398,0.347210,0.863860,0.244262,0.176255,0.144870,0.847987,-0.147063,0.509205,0.690790,0.843050,0.245781,0.195478,0.147941,0.878643,-0.120005,0.462152,0.693440,0.832590,0.218093,0.166517,0.185871,0.879429,-0.225377,0.419296,0.667850,0.834400,0.223598,0.187148,0.186553,0.887393,-0.203028,0.413900,0.671900,0.824650,0.239023,0.121762,0.135536,0.765908,-0.092042,0.636327,0.680260,0.874190,0.241284,0.150627,0.140530,0.808894,-0.152403,0.567860,0.685930,0.858250,0.201706,0.108147,0.183949,0.877131,-0.163953,0.451398,0.652780,0.863860,0.210106,0.139054,0.184915,0.875515,-0.225815,0.427178,0.660820,0.848920,-0.179290,0.163126,0.287819,-0.899746,-0.177034,0.398894,0.376030,0.812150,-0.193575,0.152437,0.239954,-0.916942,-0.224444,0.329913,0.357310,0.827400,-0.171390,0.138052,0.295437,-0.896915,-0.184746,0.401763,0.382600,0.821430,-0.200557,0.175489,0.236112,-0.912981,-0.215717,0.346313,0.352010,0.817950,-0.162887,0.107782,0.302563,-0.888029,-0.193181,0.417236,0.391450,0.835060,-0.176758,0.091418,0.248365,-0.931174,-0.181429,0.316227,0.373470,0.856120,-0.154255,0.076758,0.308613,-0.868577,-0.190706,0.457390,0.400770,0.849140,-0.184974,0.123058,0.244034,-0.923532,-0.221348,0.313200,0.365070,0.841510,0.193575,0.152437,0.239954,0.916942,-0.224444,0.329913,0.642680,0.827400,0.179290,0.163126,0.287819,0.899746,-0.177033,0.398894,0.623960,0.812150,0.171390,0.138052,0.295437,0.896914,-0.184745,0.401763,0.617390,0.821430,0.200557,0.175489,0.236112,0.912981,-0.215716,0.346313,0.647980,0.817950,0.176758,0.091418,0.248365,0.931174,-0.181429,0.316226,0.626520,0.856120,0.162887,0.107782,0.302563,0.888029,-0.193181,0.417236,0.608540,0.835060,0.154255,0.076758,0.308613,0.868577,-0.190706,0.457389,0.599220,0.849140,0.184974,0.123058,0.244034,0.923532,-0.221348,0.313199,0.634930,0.841510,-0.133290,0.155989,0.364649,-0.799296,-0.188910,0.570472,0.416900,0.799130,-0.144577,0.129199,0.340763,-0.809079,-0.183148,0.558433,0.406510,0.815430,-0.114822,0.129743,0.377167,-0.703552,-0.271395,0.656779,0.428700,0.805890,-0.154921,0.155503,0.331477,-0.844983,-0.153932,0.512161,0.398550,0.806670,-0.121383,0.067857,0.349914,-0.679665,-0.229748,0.696614,0.429610,0.841050,-0.102760,0.095343,0.374234,-0.609129,-0.285329,0.739965,0.440130,0.819830,-0.133590,0.098128,0.346591,-0.753398,-0.209832,0.623186,0.417700,0.827950,-0.088002,0.066803,0.372952,-0.523596,-0.299432,0.797613,0.453640,0.831830,0.133290,0.155989,0.364649,0.799296,-0.188910,0.570473,0.583090,0.799130,0.144577,0.129199,0.340763,0.809079,-0.183147,0.558433,0.593480,0.815430,0.154921,0.155503,0.331477,0.844983,-0.153931,0.512161,0.601440,0.806670,0.114822,0.129743,0.377167,0.703553,-0.271394,0.656779,0.571290,0.805890,0.102760,0.095343,0.374234,0.609130,-0.285328,0.739965,0.559860,0.819830,0.121383,0.067857,0.349914,0.679665,-0.229747,0.696614,0.570380,0.841050,0.133590,0.098128,0.346591,0.753398,-0.209832,0.623187,0.582300,0.827950,0.088002,0.066803,0.372952,0.523597,-0.299432,0.797613,0.546350,0.831830,-0.105870,0.153256,0.397443,-0.709297,-0.315329,0.630449,0.435900,0.789690,-0.119603,0.167357,0.386730,-0.779789,-0.249275,0.574275,0.427880,0.787740,-0.089592,0.144480,0.409541,-0.648506,-0.372453,0.663867,0.446020,0.787960,-0.087959,0.122165,0.398208,-0.615687,-0.376820,0.692053,0.446490,0.799340,-0.074160,0.138353,0.420696,-0.629783,-0.399295,0.666286,0.456830,0.785210,-0.070758,0.119402,0.411995,-0.611945,-0.419013,0.670784,0.458380,0.793690,-0.078985,0.097154,0.391473,-0.566047,-0.372569,0.735379,0.453960,0.811260,-0.063418,0.099689,0.405796,-0.591182,-0.428946,0.683015,0.463460,0.803920,-0.066086,0.073086,0.388546,-0.513073,-0.377717,0.770770,0.464900,0.822260,-0.053176,0.080823,0.402331,-0.559934,-0.441558,0.701071,0.470770,0.813270,0.105870,0.153256,0.397443,0.709298,-0.315328,0.630448,0.564090,0.789690,0.119603,0.167358,0.386730,0.779789,-0.249275,0.574275,0.572110,0.787740,0.089592,0.144479,0.409541,0.648507,-0.372452,0.663866,0.553970,0.787960,0.087959,0.122165,0.398208,0.615687,-0.376819,0.692053,0.553500,0.799340,0.074160,0.138353,0.420696,0.629783,-0.399295,0.666286,0.543160,0.785210,0.070758,0.119402,0.411995,0.611945,-0.419013,0.670785,0.541610,0.793690,0.078985,0.097154,0.391473,0.566048,-0.372569,0.735379,0.546030,0.811260,0.066086,0.073086,0.388546,0.513074,-0.377717,0.770769,0.535090,0.822260,0.063418,0.099689,0.405796,0.591181,-0.428946,0.683016,0.536530,0.803920,0.053176,0.080823,0.402331,0.559933,-0.441558,0.701072,0.529220,0.813270,-0.060801,0.132995,0.429936,-0.631317,-0.416284,0.654329,0.466910,0.784110,-0.049625,0.128050,0.437658,-0.636304,-0.439279,0.634153,0.475150,0.783350,-0.057520,0.117256,0.422913,-0.612976,-0.435524,0.659226,0.468540,0.791120,-0.046781,0.115351,0.431563,-0.606285,-0.455841,0.651634,0.476590,0.788910,0.060801,0.132995,0.429936,0.631317,-0.416285,0.654329,0.533080,0.784110,0.057520,0.117256,0.422913,0.612975,-0.435524,0.659227,0.531450,0.791120,0.049625,0.128050,0.437658,0.636304,-0.439280,0.634153,0.524840,0.783350,0.046781,0.115351,0.431563,0.606285,-0.455842,0.651634,0.523400,0.788910,-0.051727,0.101588,0.417768,-0.597311,-0.448739,0.664721,0.472380,0.798680,-0.042264,0.103058,0.427059,-0.581128,-0.461785,0.670108,0.479310,0.794350,-0.043833,0.086862,0.414721,-0.573340,-0.469854,0.671207,0.477620,0.805220,0.051727,0.101588,0.417768,0.597309,-0.448738,0.664722,0.527610,0.798680,0.043833,0.086862,0.414721,0.573339,-0.469854,0.671208,0.522380,0.805220,0.042264,0.103058,0.427059,0.581129,-0.461784,0.670108,0.520680,0.794350,-0.040139,0.123439,0.444016,-0.624334,-0.475929,0.619435,0.481490,0.782780,-0.037787,0.113280,0.438373,-0.588984,-0.488464,0.643817,0.482600,0.787090,-0.041429,0.133778,0.450532,-0.653705,-0.447991,0.609896,0.481040,0.778410,-0.031608,0.119198,0.449071,-0.577787,-0.524360,0.625467,0.486420,0.782440,-0.032734,0.127793,0.455195,-0.610236,-0.496867,0.617037,0.486050,0.779000,-0.029898,0.110891,0.443500,-0.547250,-0.526373,0.650729,0.487150,0.785940,-0.034521,0.103759,0.434112,-0.560224,-0.483995,0.672233,0.484390,0.791140,-0.028033,0.103274,0.438977,-0.525312,-0.510636,0.680660,0.488080,0.789250,0.040139,0.123439,0.444016,0.624333,-0.475929,0.619435,0.518500,0.782780,0.037787,0.113280,0.438373,0.588984,-0.488465,0.643816,0.517390,0.787090,0.031608,0.119198,0.449071,0.577785,-0.524359,0.625469,0.513570,0.782440,0.029898,0.110891,0.443500,0.547250,-0.526374,0.650729,0.512840,0.785940,0.032734,0.127793,0.455195,0.610234,-0.496867,0.617039,0.513940,0.779000,0.041429,0.133778,0.450532,0.653703,-0.447991,0.609899,0.518950,0.778410,0.034521,0.103759,0.434112,0.560225,-0.483996,0.672232,0.515600,0.791140,0.028033,0.103274,0.438977,0.525310,-0.510638,0.680660,0.511910,0.789250,-0.040534,0.153406,0.464862,-0.666607,-0.407528,0.624144,0.481810,0.770040,-0.041562,0.143912,0.457545,-0.667817,-0.421430,0.613528,0.481130,0.774060,-0.032223,0.144656,0.468037,-0.632606,-0.427929,0.645512,0.486500,0.772620,-0.032944,0.136388,0.461553,-0.631273,-0.458192,0.625743,0.486060,0.775700,0.040534,0.153405,0.464862,0.666606,-0.407529,0.624145,0.518180,0.770040,0.041562,0.143912,0.457545,0.667815,-0.421431,0.613530,0.518860,0.774060,0.032944,0.136388,0.461553,0.631273,-0.458194,0.625742,0.513930,0.775700,0.032223,0.144656,0.468037,0.632607,-0.427930,0.645511,0.513490,0.772620,-0.035202,0.168739,0.479527,-0.617824,-0.388304,0.683750,0.485070,0.763660,-0.038478,0.161727,0.472414,-0.648514,-0.397903,0.648925,0.483170,0.766580,-0.028428,0.159284,0.480393,-0.590224,-0.393736,0.704704,0.488610,0.767170,-0.030662,0.152397,0.474348,-0.616507,-0.408815,0.672896,0.487380,0.769780,0.035202,0.168739,0.479527,0.617824,-0.388305,0.683749,0.514920,0.763660,0.038478,0.161727,0.472414,0.648514,-0.397903,0.648925,0.516820,0.766580,0.030662,0.152397,0.474348,0.616505,-0.408815,0.672898,0.512610,0.769780,0.028428,0.159284,0.480393,0.590221,-0.393738,0.704705,0.511380,0.767170,-0.025885,0.165205,0.485609,-0.558354,-0.380565,0.737164,0.489930,0.764780,-0.031052,0.173962,0.485902,-0.581625,-0.382806,0.717755,0.487260,0.761210,-0.026312,0.176953,0.491038,-0.535448,-0.382868,0.752800,0.489590,0.759360,-0.023901,0.169394,0.489173,-0.529783,-0.371502,0.762441,0.490930,0.762820,0.025885,0.165205,0.485609,0.558354,-0.380567,0.737163,0.510070,0.764780,0.031052,0.173962,0.485902,0.581623,-0.382807,0.717756,0.512730,0.761210,0.023901,0.169394,0.489173,0.529783,-0.371502,0.762441,0.509060,0.762820,0.026312,0.176953,0.491038,0.535446,-0.382869,0.752801,0.510400,0.759360,-0.020643,0.177435,0.495029,-0.470231,-0.392770,0.790326,0.492280,0.758480,-0.014104,0.176756,0.498211,-0.364461,-0.410951,0.835636,0.495040,0.758000,-0.019620,0.167564,0.491001,-0.468405,-0.385591,0.794932,0.492870,0.763070,-0.013558,0.165646,0.493184,-0.357790,-0.407794,0.840054,0.495270,0.763120,0.020643,0.177435,0.495029,0.470231,-0.392771,0.790325,0.507710,0.758480,0.014104,0.176756,0.498211,0.364458,-0.410953,0.835636,0.504950,0.758000,0.019620,0.167564,0.491001,0.468405,-0.385590,0.794932,0.507120,0.763070,-0.020186,0.159824,0.486815,-0.482980,-0.406684,0.775460,0.492500,0.766310,-0.021583,0.152592,0.481979,-0.510577,-0.427333,0.746122,0.491750,0.769040,-0.013805,0.156356,0.488465,-0.363927,-0.434592,0.823825,0.495060,0.766900,-0.014555,0.148193,0.483566,-0.381213,-0.467280,0.797700,0.494640,0.769880,0.020186,0.159824,0.486815,0.482983,-0.406686,0.775457,0.507500,0.766310,0.021583,0.152592,0.481979,0.510578,-0.427335,0.746119,0.508240,0.769040,-0.007130,0.176041,0.500299,-0.201400,-0.429812,0.880170,0.497610,0.757770,-0.000000,0.175794,0.500986,0.000003,-0.438134,0.898910,0.500000,0.757710,-0.006902,0.164364,0.494731,-0.195347,-0.429913,0.881484,0.497670,0.763090,0.007130,0.176041,0.500299,0.201399,-0.429812,0.880170,0.502380,0.757770,-0.023060,0.145344,0.476598,-0.533446,-0.447637,0.717674,0.490990,0.771570,-0.024196,0.137909,0.470919,-0.546333,-0.477802,0.687914,0.490430,0.774070,-0.015449,0.140557,0.478460,-0.396819,-0.498271,0.770883,0.494200,0.772420,-0.016194,0.133233,0.473081,-0.405254,-0.539804,0.737821,0.493870,0.774780,0.023060,0.145344,0.476598,0.533444,-0.447635,0.717678,0.509000,0.771570,0.024196,0.137909,0.470919,0.546332,-0.477801,0.687915,0.509560,0.774070,0.015449,0.140557,0.478460,0.396821,-0.498268,0.770884,0.505790,0.772420,0.016194,0.133233,0.473081,0.405254,-0.539803,0.737822,0.506120,0.774780,-0.016454,0.126171,0.467378,-0.402583,-0.586536,0.702782,0.493710,0.777130,-0.024696,0.130410,0.464942,-0.544024,-0.520225,0.658334,0.490160,0.776650,-0.016206,0.119336,0.461419,-0.391881,-0.619612,0.680081,0.493720,0.779610,-0.024396,0.122937,0.458823,-0.523912,-0.560420,0.641441,0.490170,0.779390,0.016454,0.126170,0.467378,0.402585,-0.586538,0.702779,0.506280,0.777130,0.024696,0.130410,0.464942,0.544026,-0.520227,0.658331,0.509830,0.776650,0.024396,0.122937,0.458823,0.523912,-0.560419,0.641441,0.509820,0.779390,0.016206,0.119337,0.461419,0.391885,-0.619610,0.680081,0.506270,0.779610,-0.023500,0.115574,0.452737,-0.496245,-0.575648,0.649900,0.490420,0.782330,-0.015600,0.112610,0.455395,-0.378787,-0.621055,0.686157,0.493870,0.782320,-0.022408,0.108214,0.447173,-0.474530,-0.562913,0.676721,0.490830,0.785460,-0.014938,0.105741,0.449670,-0.367034,-0.597212,0.713179,0.494080,0.785340,0.023500,0.115574,0.452737,0.496245,-0.575645,0.649903,0.509570,0.782330,0.022408,0.108214,0.447173,0.474530,-0.562913,0.676720,0.509160,0.785460,0.015600,0.112610,0.455395,0.378792,-0.621050,0.686158,0.506120,0.782320,0.014938,0.105741,0.449670,0.367038,-0.597212,0.713176,0.505910,0.785340,-0.021626,0.101211,0.442035,-0.460944,-0.540316,0.703981,0.491200,0.788750,-0.014677,0.098689,0.444155,-0.359353,-0.573459,0.736213,0.494190,0.788740,0.021626,0.101211,0.442035,0.460946,-0.540318,0.703978,0.508790,0.788750,0.014677,0.098689,0.444155,0.359356,-0.573461,0.736211,0.505800,0.788740,-0.034251,0.074119,0.413414,-0.525824,-0.508459,0.681894,0.483410,0.809660,-0.041272,0.064516,0.400771,-0.506424,-0.473048,0.720944,0.478940,0.819300,0.041272,0.064516,0.400771,0.506424,-0.473048,0.720944,0.521050,0.819300,0.034251,0.074119,0.413414,0.525822,-0.508459,0.681895,0.516580,0.809660,-0.007453,0.103929,0.451261,-0.206780,-0.627197,0.750910,0.497090,0.785350,-0.007417,0.096767,0.445506,-0.205025,-0.604760,0.769565,0.497110,0.788850,0.0,0.103299,0.451778,-0.000004,-0.639867,0.768486,0.500000,0.785360,0.0,0.096049,0.446002,-0.000000,-0.619052,0.785350,0.500000,0.788900,0.007453,0.103929,0.451262,0.206779,-0.627199,0.750908,0.502900,0.785350,0.007417,0.096767,0.445506,0.205024,-0.604764,0.769562,0.502880,0.788850,-0.008101,0.117119,0.462972,-0.211205,-0.660789,0.720243,0.496940,0.779730,-0.007798,0.110664,0.457027,-0.208873,-0.654309,0.726810,0.497010,0.782350,-0.000000,0.116386,0.463457,-0.000002,-0.675651,0.737222,0.500000,0.779760,-0.000000,0.109976,0.457576,-0.000004,-0.666435,0.745564,0.500000,0.782370,0.008101,0.117119,0.462972,0.211206,-0.660787,0.720245,0.503050,0.779730,0.007798,0.110664,0.457027,0.208873,-0.654306,0.726812,0.502980,0.782350,0.008088,0.130448,0.474483,0.215146,-0.590578,0.777772,0.502990,0.775080,-0.000000,0.129619,0.474829,-0.000001,-0.610088,0.792334,0.500000,0.775160,0.008214,0.123640,0.468851,0.213731,-0.635389,0.742024,0.503060,0.777340,-0.000000,0.122797,0.469334,-0.000001,-0.652742,0.757581,0.500000,0.777400,-0.008088,0.130448,0.474483,-0.215145,-0.590579,0.777772,0.497000,0.775080,-0.008214,0.123640,0.468851,-0.213730,-0.635388,0.742025,0.496930,0.777340,-0.007753,0.137765,0.479717,-0.214881,-0.542032,0.812420,0.497160,0.772770,-0.007328,0.145641,0.484747,-0.208273,-0.499694,0.840790,0.497360,0.770190,-0.000000,0.136819,0.480189,-0.000001,-0.560704,0.828017,0.500000,0.772850,0.007753,0.137765,0.479717,0.214883,-0.542032,0.812420,0.502830,0.772770,-0.006991,0.154328,0.489738,-0.197890,-0.459499,0.865852,0.497560,0.767090,-0.073130,0.042680,0.371678,-0.450715,-0.292080,0.843531,0.464860,0.842100,-0.058277,0.021522,0.371086,-0.370320,-0.250313,0.894542,0.473220,0.850500,-0.052040,0.052526,0.387234,-0.458087,-0.393644,0.796995,0.474630,0.830590,-0.037255,0.035852,0.386409,-0.387264,-0.411563,0.825011,0.482970,0.836840,0.073130,0.042680,0.371678,0.450715,-0.292080,0.843531,0.535130,0.842100,0.052040,0.052526,0.387234,0.458087,-0.393645,0.796995,0.525360,0.830590,0.058277,0.021522,0.371086,0.370321,-0.250313,0.894542,0.526770,0.850500,0.037255,0.035852,0.386409,0.387264,-0.411563,0.825010,0.517020,0.836840,-0.097461,0.017278,0.354521,-0.492812,-0.075058,0.866892,0.448160,0.860550,-0.109085,0.041529,0.351796,-0.596320,-0.192307,0.779372,0.439460,0.851400,-0.138986,0.022266,0.322002,-0.761065,0.041666,0.647337,0.416440,0.869050,-0.146027,0.048742,0.314229,-0.833579,-0.119853,0.539241,0.408660,0.859550,0.097461,0.017278,0.354521,0.492813,-0.075057,0.866892,0.551830,0.860550,0.109085,0.041529,0.351796,0.596320,-0.192307,0.779372,0.560530,0.851400,0.146027,0.048742,0.314229,0.833579,-0.119853,0.539241,0.591330,0.859550,0.138986,0.022265,0.322002,0.761065,0.041666,0.647337,0.583550,0.869050,-0.077967,-0.028387,0.367259,-0.257493,0.213313,0.942441,0.464260,0.880540,-0.040161,0.001420,0.371534,-0.238733,-0.211342,0.947809,0.482260,0.858770,-0.086187,-0.006888,0.359429,-0.347389,0.107372,0.931554,0.456500,0.870380,0.0,-0.012900,0.372229,-0.000000,-0.201924,0.979401,0.500000,0.869390,-0.134641,-0.027149,0.347960,-0.561680,0.398060,0.725302,0.434170,0.892980,-0.133972,-0.004386,0.333110,-0.640456,0.271201,0.718517,0.425270,0.880650,-0.020866,0.022803,0.385940,-0.249116,-0.459770,0.852380,0.490630,0.841780,0.0,0.016758,0.385546,-0.000001,-0.500776,0.865577,0.500000,0.845460,0.040161,0.001420,0.371534,0.238733,-0.211342,0.947809,0.517730,0.858770,0.077967,-0.028387,0.367259,0.257493,0.213311,0.942441,0.535740,0.880540,0.086187,-0.006888,0.359429,0.347389,0.107372,0.931554,0.543500,0.870380,0.133972,-0.004385,0.333110,0.640455,0.271201,0.718517,0.574720,0.880650,0.134641,-0.027149,0.347960,0.561680,0.398060,0.725303,0.565820,0.892980,0.020866,0.022803,0.385940,0.249116,-0.459770,0.852381,0.509360,0.841780,-0.168277,0.032847,0.265541,-0.885164,0.144127,0.442394,0.389030,0.877240,-0.170895,0.061924,0.254356,-0.930028,-0.057325,0.362989,0.380750,0.867390,-0.196016,0.048286,0.195138,-0.795459,0.280447,0.537209,0.362240,0.885820,-0.196562,0.078604,0.185332,-0.866421,0.016854,0.499029,0.354130,0.875790,0.168277,0.032847,0.265541,0.885164,0.144128,0.442394,0.610960,0.877240,0.170895,0.061924,0.254356,0.930028,-0.057324,0.362989,0.619240,0.867390,0.196562,0.078604,0.185332,0.866421,0.016854,0.499029,0.645860,0.875790,0.196016,0.048286,0.195138,0.795459,0.280448,0.537209,0.637750,0.885820,-0.200348,0.014664,0.217103,-0.699916,0.458580,0.547560,0.374700,0.897130,-0.168058,0.002729,0.282519,-0.798231,0.333314,0.501726,0.400580,0.888650,-0.169118,-0.021188,0.298787,-0.750130,0.411320,0.517804,0.413320,0.901460,-0.203738,-0.009797,0.236559,-0.663721,0.505795,0.551040,0.389760,0.910470,0.200348,0.014664,0.217103,0.699916,0.458579,0.547560,0.625290,0.897130,0.168058,0.002729,0.282519,0.798231,0.333314,0.501726,0.599410,0.888650,0.203738,-0.009797,0.236559,0.663722,0.505795,0.551040,0.610230,0.910470,0.169118,-0.021188,0.298787,0.750131,0.411319,0.517803,0.586680,0.901460,-0.077839,0.158830,-0.173716,-0.071615,0.697840,-0.712665,0.051780,0.909560,-0.033866,0.158147,-0.177699,-0.035772,0.684263,-0.728357,0.033800,0.901610,0.0,0.158459,-0.178093,-0.000001,0.678831,-0.734295,0.020610,0.895260,0.077839,0.158830,-0.173716,0.071615,0.697839,-0.712666,0.948210,0.909560,0.033866,0.158147,-0.177699,0.035772,0.684263,-0.728358,0.966190,0.901610,0.0,0.158459,-0.178093,-0.000001,0.678831,-0.734295,0.979380,0.895260,-0.287554,0.106353,0.090340,-0.666188,0.198906,0.718769,0.292870,0.904640,-0.244970,0.065563,0.135233,-0.616391,0.351594,0.704588,0.330480,0.899620,-0.239898,0.094335,0.131671,-0.709757,0.088917,0.698812,0.324240,0.887550,-0.301958,0.079102,0.088355,-0.576462,0.377761,0.724560,0.296900,0.920220,-0.261142,0.008326,0.168732,-0.506292,0.574127,0.643464,0.356180,0.927780,-0.253961,0.032147,0.152091,-0.531621,0.527383,0.662757,0.342010,0.913230,-0.318020,0.048123,0.095812,-0.509777,0.514748,0.689320,0.306810,0.935300,-0.329200,0.026277,0.105139,-0.487929,0.559078,0.670341,0.319080,0.949630,0.244970,0.065563,0.135233,0.616391,0.351594,0.704588,0.669510,0.899620,0.287554,0.106353,0.090340,0.666188,0.198907,0.718769,0.707120,0.904640,0.239898,0.094335,0.131671,0.709757,0.088917,0.698812,0.675760,0.887550,0.301958,0.079102,0.088355,0.576462,0.377761,0.724560,0.703090,0.920220,0.261142,0.008326,0.168732,0.506292,0.574127,0.643464,0.643810,0.927780,0.253961,0.032147,0.152091,0.531621,0.527383,0.662757,0.657980,0.913230,0.318020,0.048123,0.095812,0.509777,0.514748,0.689320,0.693190,0.935300,0.329200,0.026277,0.105139,0.487929,0.559079,0.670341,0.680910,0.949630,-0.320824,0.116096,0.053276,-0.733679,0.402423,0.547513,0.266550,0.921060,-0.361727,0.100662,0.004079,-0.690920,0.652196,0.311881,0.244080,0.953700,-0.343879,0.088228,0.047551,-0.649381,0.495432,0.576933,0.270670,0.940510,-0.334064,0.128136,0.012845,-0.760504,0.593874,0.262580,0.238990,0.932880,-0.394006,0.073036,-0.002527,-0.637651,0.688634,0.345232,0.250760,0.973630,-0.386382,0.039464,0.050540,-0.557976,0.593890,0.579618,0.288200,0.973930,-0.369075,0.059105,0.047605,-0.583306,0.567498,0.581120,0.278730,0.957950,-0.416900,0.054668,-0.005466,-0.617834,0.700902,0.356395,0.257920,0.992700,0.343879,0.088228,0.047551,0.649381,0.495432,0.576933,0.729320,0.940510,0.361727,0.100662,0.004079,0.690920,0.652196,0.311880,0.755910,0.953700,0.320824,0.116096,0.053276,0.733679,0.402423,0.547513,0.733440,0.921060,0.334064,0.128136,0.012845,0.760504,0.593874,0.262579,0.761000,0.932880,0.386382,0.039464,0.050540,0.557977,0.593889,0.579618,0.711790,0.973930,0.394006,0.073036,-0.002527,0.637651,0.688634,0.345232,0.749230,0.973630,0.369075,0.059105,0.047605,0.583306,0.567498,0.581120,0.721260,0.957950,0.416900,0.054668,-0.005466,0.617834,0.700902,0.356395,0.742070,0.992700,-0.326889,0.144949,-0.036593,-0.712484,0.701110,0.028502,0.202420,0.940240,-0.352832,0.121710,-0.048419,-0.659429,0.747558,0.079441,0.206490,0.957700,-0.307222,0.159546,-0.081609,-0.602190,0.779459,-0.172658,0.169300,0.944480,-0.328678,0.141080,-0.096743,-0.576253,0.806344,-0.133199,0.170820,0.958470,-0.386687,0.095856,-0.061455,-0.624090,0.774017,0.106812,0.212140,0.978130,-0.412071,0.077619,-0.070074,-0.613171,0.781864,0.112742,0.218040,0.999400,-0.383795,0.098563,-0.128041,-0.554427,0.821153,-0.135348,0.179420,1.0,-0.359618,0.117007,-0.114946,-0.560014,0.818288,-0.129575,0.174840,0.978160,0.352832,0.121710,-0.048419,0.659429,0.747558,0.079441,0.793500,0.957700,0.326889,0.144949,-0.036593,0.712484,0.701110,0.028502,0.797570,0.940240,0.307222,0.159546,-0.081609,0.602190,0.779459,-0.172658,0.830700,0.944480,0.328678,0.141080,-0.096743,0.576253,0.806344,-0.133199,0.829170,0.958470,0.386687,0.095856,-0.061455,0.624090,0.774018,0.106812,0.787860,0.978130,0.412071,0.077619,-0.070074,0.613171,0.781864,0.112741,0.781950,0.999400,0.359618,0.117007,-0.114946,0.560014,0.818287,-0.129575,0.825150,0.978160,0.383795,0.098563,-0.128041,0.554427,0.821152,-0.135349,0.820570,1.0,-0.259052,0.167514,-0.119873,-0.277915,0.818164,-0.503360,0.138000,0.939930,-0.283630,0.165987,-0.107091,-0.412689,0.825632,-0.384734,0.150910,0.943700,-0.301864,0.149340,-0.125558,-0.409501,0.832760,-0.372585,0.150510,0.957350,-0.274576,0.150610,-0.140564,-0.261977,0.812051,-0.521479,0.136410,0.954100,-0.347198,0.108374,-0.163416,-0.406813,0.816336,-0.409998,0.153880,0.995960,-0.327363,0.126369,-0.147553,-0.409215,0.821846,-0.396375,0.151980,0.975730,-0.308152,0.110334,-0.182109,-0.252643,0.775903,-0.578053,0.133970,0.989440,-0.293805,0.127951,-0.164777,-0.255973,0.786360,-0.562242,0.135190,0.971240,-0.244861,0.150401,-0.152628,-0.194014,0.781843,-0.592520,0.122900,0.949940,-0.232744,0.168210,-0.131995,-0.225759,0.792598,-0.566411,0.125360,0.936580,-0.203681,0.147931,-0.166339,-0.140862,0.745933,-0.650954,0.105000,0.943170,-0.194207,0.166799,-0.146304,-0.164526,0.753383,-0.636667,0.107930,0.930550,-0.268669,0.109486,-0.195599,-0.167672,0.747582,-0.642656,0.116240,0.983000,-0.258644,0.127227,-0.177480,-0.175021,0.756927,-0.629626,0.119740,0.966000,-0.222689,0.104617,-0.209681,-0.117579,0.723428,-0.680314,0.096710,0.976060,-0.214607,0.123331,-0.191189,-0.124644,0.729327,-0.672715,0.101070,0.959010,0.259052,0.167514,-0.119873,0.277915,0.818164,-0.503360,0.861990,0.939930,0.283630,0.165987,-0.107091,0.412689,0.825632,-0.384734,0.849080,0.943700,0.274576,0.150610,-0.140564,0.261977,0.812051,-0.521480,0.863580,0.954100,0.301864,0.149340,-0.125558,0.409501,0.832760,-0.372585,0.849480,0.957350,0.347198,0.108373,-0.163416,0.406815,0.816335,-0.409999,0.846110,0.995960,0.327363,0.126369,-0.147553,0.409216,0.821845,-0.396375,0.848010,0.975730,0.293805,0.127951,-0.164777,0.255973,0.786360,-0.562242,0.864800,0.971240,0.308152,0.110334,-0.182109,0.252643,0.775903,-0.578053,0.866020,0.989440,0.244861,0.150401,-0.152628,0.194014,0.781843,-0.592521,0.877090,0.949940,0.232744,0.168210,-0.131995,0.225758,0.792598,-0.566411,0.874630,0.936580,0.194207,0.166799,-0.146304,0.164526,0.753383,-0.636667,0.892060,0.930550,0.203681,0.147931,-0.166339,0.140862,0.745933,-0.650954,0.894990,0.943170,0.268669,0.109486,-0.195599,0.167671,0.747583,-0.642656,0.883750,0.983000,0.258644,0.127226,-0.177480,0.175020,0.756927,-0.629626,0.880250,0.966000,0.214607,0.123331,-0.191189,0.124644,0.729327,-0.672715,0.898920,0.959010,0.222689,0.104617,-0.209681,0.117579,0.723428,-0.680314,0.903280,0.976060,-0.145479,0.141782,-0.183057,-0.099095,0.717436,-0.689540,0.077350,0.933060,-0.136926,0.162581,-0.162609,-0.111148,0.719463,-0.685580,0.079930,0.920020,-0.156856,0.114937,-0.208700,-0.091669,0.707818,-0.700422,0.074470,0.950030,-0.165659,0.094610,-0.227737,-0.088503,0.703991,-0.704673,0.071360,0.968620,0.145479,0.141782,-0.183057,0.099095,0.717436,-0.689541,0.922640,0.933060,0.136926,0.162581,-0.162609,0.111149,0.719462,-0.685580,0.920060,0.920020,0.156856,0.114937,-0.208700,0.091669,0.707818,-0.700422,0.925520,0.950030,0.165659,0.094610,-0.227737,0.088503,0.703991,-0.704673,0.928630,0.968620,0.089761,0.410380,0.664872,-0.839707,-0.278449,-0.466217,0.524057,0.656439,0.087952,0.408012,0.669095,-0.818158,-0.285753,-0.498962,0.524060,0.656428,-0.089907,0.410320,0.664865,0.843126,-0.270815,-0.464539,0.475936,0.656439,-0.092121,0.406610,0.662823,0.776291,-0.290785,-0.559300,0.473590,0.657330,-0.088101,0.407959,0.669089,0.823741,-0.273581,-0.496593,0.475932,0.656428,-0.084355,0.413060,0.671892,0.767081,-0.373028,-0.521955,0.478430,0.655497,-0.082644,0.409630,0.676463,0.757984,-0.354421,-0.547582,0.478428,0.655485,-0.077135,0.415447,0.679201,0.670170,-0.470635,-0.573912,0.480891,0.654552,-0.075537,0.411276,0.684101,0.667625,-0.445854,-0.596231,0.480890,0.654540,-0.069287,0.417290,0.685656,0.567855,-0.546434,-0.615590,0.483035,0.653698,-0.067864,0.412538,0.690818,0.566149,-0.522083,-0.637891,0.483035,0.653685,0.084232,0.413101,0.671906,-0.771931,-0.366785,-0.519222,0.521560,0.655497,0.082517,0.409669,0.676476,-0.764843,-0.345765,-0.543564,0.521563,0.655485,-0.060345,0.418813,0.691334,0.484140,-0.592989,-0.643407,0.485248,0.652912,-0.059095,0.413577,0.696715,0.482059,-0.569650,-0.665671,0.485247,0.652897,0.077194,0.415398,0.679339,-0.673776,-0.467794,-0.572010,0.519106,0.654552,0.075602,0.411230,0.684248,-0.672580,-0.441679,-0.593764,0.519108,0.654540,-0.050352,0.420247,0.696844,0.439185,-0.613058,-0.656716,0.487871,0.652141,-0.049223,0.414608,0.702456,0.444034,-0.586879,-0.677058,0.487870,0.652125,0.069310,0.417267,0.685734,-0.565648,-0.548729,-0.615581,0.516955,0.653698,0.067887,0.412524,0.690899,-0.563083,-0.525005,-0.638206,0.516955,0.653685,-0.041130,0.421535,0.701593,0.395823,-0.633435,-0.664894,0.490367,0.651507,-0.040146,0.415597,0.707405,0.416027,-0.601486,-0.682009,0.490365,0.651490,0.060379,0.418785,0.691389,-0.483849,-0.593789,-0.642888,0.514742,0.652912,0.059128,0.413559,0.696771,-0.481648,-0.570538,-0.665208,0.514742,0.652897,-0.033638,0.422117,0.705365,0.277645,-0.678058,-0.680551,0.492264,0.651093,-0.032850,0.416019,0.711341,0.312142,-0.644262,-0.698207,0.492262,0.651075,0.050406,0.420211,0.696905,-0.438441,-0.613942,-0.656388,0.512119,0.652141,0.049278,0.414579,0.702520,-0.442916,-0.587945,-0.676865,0.512120,0.652125,-0.026430,0.415904,0.713555,0.130098,-0.692995,-0.709107,0.493815,0.650887,0.040165,0.415589,0.707429,-0.415339,-0.602237,-0.681765,0.509625,0.651490,-0.020230,0.415409,0.714453,-0.022249,-0.715696,-0.698058,0.495302,0.650918,0.032893,0.416003,0.711379,-0.313254,-0.644368,-0.697612,0.507728,0.651075,-0.013854,0.414656,0.714600,-0.075202,-0.726630,-0.682901,0.496800,0.651062,0.026496,0.415887,0.713594,-0.130234,-0.693466,-0.708622,0.506175,0.650887,0.020271,0.415395,0.714487,0.022819,-0.716200,-0.697522,0.504690,0.650918,0.013922,0.414642,0.714632,0.075286,-0.727089,-0.682403,0.503197,0.651062,-0.098686,0.399609,0.465844,0.750840,-0.386807,0.535368,0.478479,0.655726,-0.104803,0.420225,0.492754,0.943927,-0.274195,0.183900,0.475998,0.656653,-0.098744,0.430465,0.488355,0.815137,-0.474715,0.331960,0.478478,0.655722,-0.090683,0.404695,0.461595,0.570973,-0.472495,0.671370,0.480920,0.654776,-0.090748,0.438858,0.485685,0.662362,-0.611981,0.432152,0.480919,0.654772,-0.081328,0.408902,0.458390,0.446678,-0.506281,0.737671,0.483040,0.653946,-0.081393,0.445715,0.483660,0.538081,-0.688080,0.486842,0.483040,0.653942,0.098628,0.399624,0.465815,-0.751318,-0.386573,0.534866,0.521511,0.655726,0.104715,0.420310,0.492740,-0.943943,-0.274215,0.183790,0.523992,0.656653,0.098684,0.430491,0.488336,-0.815091,-0.474941,0.331750,0.521512,0.655722,-0.071031,0.412409,0.455599,0.368615,-0.519360,0.770966,0.485250,0.653195,-0.071091,0.451449,0.481891,0.449697,-0.728612,0.516620,0.485250,0.653190,0.090674,0.404658,0.461560,-0.571220,-0.472725,0.670998,0.519080,0.654776,0.090737,0.438800,0.485662,-0.661943,-0.612563,0.431970,0.519081,0.654772,-0.060365,0.415343,0.453122,0.310831,-0.526651,0.791216,0.487890,0.652455,-0.060416,0.456248,0.480324,0.377798,-0.755069,0.535854,0.487889,0.652449,0.081415,0.445615,0.483637,-0.537866,-0.688463,0.486538,0.516950,0.653942,0.081351,0.408840,0.458355,-0.446778,-0.506744,0.737292,0.516950,0.653946,-0.050108,0.417549,0.451019,0.243558,-0.535743,0.808492,0.490399,0.651844,-0.050154,0.459849,0.478996,0.283681,-0.783240,0.553227,0.490399,0.651839,0.071127,0.451343,0.481872,-0.449901,-0.728756,0.516240,0.514740,0.653190,0.071067,0.412344,0.455569,-0.368744,-0.519842,0.770579,0.514740,0.653195,-0.040776,0.418692,0.449395,0.142445,-0.548550,0.823894,0.492299,0.651444,-0.040823,0.461716,0.477971,0.132398,-0.811894,0.568595,0.492299,0.651438,0.060457,0.456149,0.480309,-0.378310,-0.755089,0.535465,0.512101,0.652449,0.060406,0.415283,0.453098,-0.311051,-0.527073,0.790848,0.512100,0.652455,-0.032364,0.461608,0.477281,-0.053764,-0.819299,0.570840,0.493849,0.651258,-0.032315,0.418619,0.448304,0.016523,-0.559675,0.828547,0.493849,0.651264,0.050197,0.459761,0.478983,-0.284221,-0.783285,0.552886,0.509591,0.651839,0.050152,0.417495,0.450999,-0.243810,-0.536117,0.808168,0.509591,0.651844,-0.024366,0.459859,0.476894,-0.193102,-0.806385,0.558977,0.495339,0.651288,-0.024320,0.417534,0.447694,-0.086467,-0.566083,0.819801,0.495339,0.651294,0.040873,0.461631,0.477959,-0.132553,-0.812057,0.568324,0.507691,0.651438,0.040826,0.418640,0.449377,-0.142532,-0.548926,0.823629,0.507691,0.651444,-0.016413,0.457315,0.476719,-0.226294,-0.804592,0.549020,0.496839,0.651418,-0.016377,0.415957,0.447422,-0.122252,-0.573297,0.810176,0.496839,0.651424,0.032422,0.461522,0.477270,0.053876,-0.819476,0.570576,0.506141,0.651258,0.032373,0.418566,0.448286,-0.016430,-0.560054,0.828293,0.506141,0.651264,-0.008279,0.455103,0.476659,-0.150330,-0.822425,0.548651,0.498399,0.651530,-0.008259,0.414586,0.447331,-0.084642,-0.583032,0.808028,0.498400,0.651535,0.024428,0.459773,0.476882,0.192921,-0.806602,0.558726,0.504651,0.651288,0.024382,0.417480,0.447676,0.086474,-0.566452,0.819545,0.504651,0.651294,0.000030,0.454213,0.476643,-0.002292,-0.834742,0.550637,0.500000,0.651581,0.000030,0.414034,0.447310,-0.001073,-0.588064,0.808814,0.500000,0.651585,0.016477,0.457237,0.476709,0.224924,-0.805062,0.548894,0.503161,0.651418,0.016441,0.415908,0.447407,0.121663,-0.573660,0.810007,0.503161,0.651424,0.008321,0.414554,0.447321,0.083045,-0.583310,0.807993,0.501590,0.651535,0.008341,0.455052,0.476653,0.146917,-0.823019,0.548686,0.501591,0.651530,0.108014,0.409965,0.502396,-0.990343,-0.118345,0.072211,0.526342,0.657495,-0.019557,0.413218,0.713776,0.134073,0.811769,-0.568380,0.495467,0.651693,-0.025699,0.413755,0.712937,0.169759,0.802761,-0.571627,0.493993,0.651655,-0.013360,0.412486,0.714070,0.111619,0.816242,-0.566824,0.496933,0.651823,0.025759,0.413741,0.712971,-0.169602,0.802841,-0.571561,0.505997,0.651655,0.019598,0.413202,0.713817,-0.134511,0.811751,-0.568302,0.504523,0.651693,0.013427,0.412468,0.714110,-0.111777,0.816291,-0.566723,0.503065,0.651823,-0.058557,0.411824,0.696279,0.324462,0.708364,-0.626853,0.485343,0.653515,-0.048619,0.412684,0.701940,0.261140,0.748238,-0.609874,0.487980,0.652803,-0.039503,0.413528,0.706812,0.258611,0.763397,-0.591900,0.490490,0.652207,0.058592,0.411804,0.696337,-0.324680,0.708377,-0.626726,0.514647,0.653515,0.048669,0.412658,0.702000,-0.259298,0.748890,-0.609859,0.512010,0.652803,0.039521,0.413520,0.706837,-0.257975,0.763635,-0.591870,0.509500,0.652207,-0.006835,0.411820,0.714291,0.055962,0.821583,-0.567336,0.498450,0.651937,0.000015,0.411574,0.714050,0.002626,0.823514,-0.567291,0.500000,0.651990,0.006892,0.411801,0.714330,-0.053256,0.821788,-0.567299,0.501540,0.651937,-0.087589,0.407391,0.668604,0.747843,0.303393,-0.590495,0.476005,0.656798,-0.082109,0.408877,0.675796,0.636521,0.438686,-0.634347,0.478473,0.655890,-0.074954,0.410154,0.683328,0.532368,0.547996,-0.645201,0.480935,0.654985,-0.067284,0.411046,0.690200,0.429893,0.637345,-0.639518,0.483103,0.654212,0.087431,0.407451,0.668591,-0.739324,0.314367,-0.595460,0.523988,0.656798,0.082024,0.408894,0.675831,-0.654676,0.422675,-0.626694,0.521518,0.655890,0.075044,0.410094,0.683488,-0.538899,0.544078,-0.643091,0.519063,0.654985,0.067304,0.411032,0.690278,-0.422790,0.641429,-0.640170,0.516888,0.654212,-0.032194,0.413879,0.710857,0.234228,0.781256,-0.578598,0.492417,0.651823,0.032238,0.413861,0.710900,-0.235538,0.780922,-0.578517,0.507573,0.651823,-0.091586,0.406076,0.662348,0.461269,0.493197,-0.737555,0.473693,0.657610,-0.092671,0.406048,0.661036,0.029715,0.648684,-0.760478,0.473123,0.657673,-0.094546,0.404784,0.661130,0.029715,0.648684,-0.760478,0.473149,0.657664,0.109883,0.389485,0.574128,-0.999947,0.007252,-0.007293,0.526473,0.657541,0.108828,0.414568,0.574938,-0.991530,-0.129834,-0.003304,0.526356,0.657453,-0.092671,0.406048,0.661036,0.695163,-0.333076,-0.637032,0.473123,0.657673,0.105053,0.434017,0.574046,-0.945525,-0.325549,0.000693,0.524009,0.656596,-0.105145,0.433916,0.574039,0.945680,-0.325099,0.000759,0.475982,0.656596,-0.098954,0.448136,0.574008,0.844966,-0.534750,0.008598,0.478466,0.655663,-0.090910,0.458652,0.574684,0.711988,-0.702054,0.013927,0.480912,0.654714,-0.081543,0.466943,0.575524,0.590479,-0.806900,0.015742,0.483039,0.653877,0.098889,0.448173,0.574013,-0.844618,-0.535301,0.008604,0.521524,0.655663,-0.071213,0.473820,0.576320,0.496616,-0.867831,0.015583,0.485249,0.653117,0.090901,0.458584,0.574696,-0.711158,-0.702893,0.014040,0.519088,0.654714,-0.060474,0.479580,0.577057,0.417732,-0.908440,0.015394,0.487885,0.652368,0.081565,0.466827,0.575534,-0.589982,-0.807261,0.015841,0.516951,0.653877,-0.050170,0.483917,0.577693,0.306673,-0.951675,0.016291,0.490390,0.651751,0.071249,0.473695,0.576329,-0.496837,-0.867703,0.015657,0.514741,0.653117,-0.040851,0.486160,0.578190,0.116890,-0.992985,0.017851,0.492290,0.651347,0.060515,0.479461,0.577064,-0.418449,-0.908109,0.015452,0.512105,0.652368,-0.032416,0.486035,0.578508,-0.115839,-0.993088,0.018920,0.493840,0.651165,0.050213,0.483812,0.577698,-0.307427,-0.951431,0.016350,0.509600,0.651751,-0.024430,0.483952,0.578670,-0.279998,-0.959807,0.019257,0.495330,0.651195,0.040901,0.486060,0.578195,-0.117084,-0.992960,0.017921,0.507700,0.651347,-0.016472,0.480915,0.578734,-0.308764,-0.950936,0.019638,0.496829,0.651329,0.032475,0.485933,0.578513,0.115935,-0.993075,0.018991,0.506150,0.651165,-0.008316,0.478269,0.578754,-0.202749,-0.979018,0.020406,0.498394,0.651450,0.024492,0.483851,0.578674,0.279676,-0.959900,0.019330,0.504661,0.651195,0.000030,0.477205,0.578746,-0.003285,-0.999777,0.020881,0.500000,0.651508,0.016537,0.480823,0.578737,0.306898,-0.951538,0.019708,0.503170,0.651329,0.008379,0.478208,0.578758,0.197956,-0.979998,0.020452,0.501597,0.651450,0.108699,0.394780,0.623429,-0.976176,0.028083,-0.215156,0.526604,0.657585,0.107574,0.413218,0.623743,-0.967037,-0.148550,-0.206813,0.526371,0.657412,0.103546,0.428992,0.626208,-0.920021,-0.301440,-0.250389,0.524026,0.656540,-0.103652,0.428896,0.626184,0.920792,-0.299571,-0.249800,0.475965,0.656540,-0.097429,0.440508,0.629917,0.829337,-0.469740,-0.302564,0.478453,0.655604,-0.089427,0.449075,0.634111,0.711650,-0.609378,-0.349589,0.480905,0.654656,-0.080223,0.455750,0.638092,0.598096,-0.702803,-0.385161,0.483037,0.653813,0.097348,0.440552,0.629944,-0.830611,-0.467921,-0.301887,0.521537,0.655604,-0.070007,0.461263,0.641709,0.507681,-0.757921,-0.409654,0.485249,0.653044,0.089428,0.449015,0.634170,-0.712425,-0.608944,-0.348766,0.519094,0.654656,-0.059241,0.465949,0.645045,0.441779,-0.790260,-0.424642,0.487880,0.652287,0.080247,0.455657,0.638141,-0.597109,-0.703838,-0.384803,0.516953,0.653813,-0.048996,0.469550,0.647914,0.356177,-0.826305,-0.436301,0.490382,0.651664,0.070043,0.461164,0.641748,-0.507654,-0.758226,-0.409123,0.514741,0.653044,-0.039925,0.471394,0.650150,0.190315,-0.873640,-0.447809,0.492281,0.651257,0.059286,0.465851,0.645078,-0.441905,-0.790448,-0.424161,0.512110,0.652287
-			],
-			"parts" : [
-				{
-					"id" : "part0",
-					"type" : "TRIANGLES",
-					"indices" : [
-						0,1,2,3,1,0,4,5,3,4,3,0,0,6,4,6,0,2,4,7,8,7,4,6,5,4,9,4,8,9,10,8,7,8,10,9,11,12,13,14,13,12,15,14,16,14,12,16,17,12,11,12,17,16,18,19,20,18,20,21,14,15,21,14,21,20,20,19,14,19,13,14,22,23,24,24,25,22,22,26,23,26,22,27,22,25,27,25,28,27,29,30,31,30,29,32,30,33,31,33,30,34,30,35,34,35,30,32,36,37,38,37,39,38,40,41,36,42,36,41,43,40,44,40,43,41,45,46,47,46,48,47,49,45,47,49,50,45,49,51,52,53,52,51,54,55,56,57,55,54,54,58,57,59,57,58,24,54,56,54,24,58,60,61,35,62,35,61,63,64,62,62,61,63,65,61,60,61,65,63,66,67,68,67,69,68,66,70,71,70,66,68,72,68,69,68,72,70,73,74,75,74,73,76,77,75,74,75,77,78,74,79,77,79,74,76,80,81,82,81,80,83,80,84,83,83,84,85,86,80,82,80,86,84,87,88,89,87,89,90,91,90,89,90,91,92,93,89,88,89,93,91,94,95,96,95,94,97,94,98,97,98,94,99,94,100,99,100,94,96,101,102,103,103,104,101,105,101,106,101,105,102,107,101,104,101,107,106,108,109,110,109,108,111,112,110,109,110,112,113,114,109,111,109,114,112,115,116,117,116,115,118,119,117,116,117,119,120,116,121,119,121,116,118,122,123,124,123,125,124,124,126,122,126,127,122,128,124,125,124,128,126,129,130,131,130,129,132,130,133,131,134,131,133,135,130,132,130,135,133,136,137,138,137,136,139,140,138,137,138,140,141,142,137,139,137,142,140,143,144,145,144,143,146,147,145,144,145,147,148,144,149,147,149,144,146,150,151,152,153,151,150,154,153,155,153,150,155,150,156,155,156,150,152,157,158,159,158,160,159,161,162,157,157,159,161,163,159,160,159,163,161,164,165,166,165,164,167,167,164,168,167,168,169,164,166,168,168,166,170,171,172,173,172,171,174,175,171,173,171,175,176,177,173,172,173,177,175,178,179,180,179,178,181,180,182,178,182,180,183,184,183,180,183,184,185,186,180,179,180,186,184,187,188,189,188,187,190,191,189,192,189,191,187,192,183,185,183,192,189,189,182,183,182,189,188,193,194,186,193,186,195,194,196,197,196,194,193,196,198,199,198,196,193,193,200,198,200,193,195,179,181,201,181,202,201,186,179,195,195,179,201,195,203,200,203,195,201,201,204,203,204,201,202,205,191,206,191,205,207,208,205,209,205,208,207,209,210,211,210,209,205,206,210,205,210,206,212,213,190,187,190,213,214,213,215,214,215,213,216,207,216,213,216,207,208,207,187,191,187,207,213,217,218,219,218,217,220,220,199,218,199,220,196,221,197,220,220,197,196,222,221,217,217,221,220,223,224,225,224,223,226,227,223,228,223,225,228,228,225,212,225,210,212,211,225,224,225,211,210,198,229,230,229,198,200,199,230,231,230,199,198,230,232,231,232,230,233,230,234,233,234,230,229,229,200,235,200,203,235,234,229,236,229,235,236,237,238,235,236,235,238,235,203,237,203,204,237,239,209,240,209,239,208,241,240,242,240,241,239,240,243,242,243,240,244,240,211,244,211,240,209,239,245,208,216,208,245,245,246,216,215,216,246,246,245,247,245,248,247,241,248,239,239,248,245,249,250,251,250,252,251,251,231,249,249,231,232,218,199,251,251,199,231,219,251,252,251,219,218,253,254,255,255,254,256,254,226,256,226,254,224,254,244,211,254,211,224,253,243,244,253,244,254,257,258,259,258,257,260,261,259,262,259,261,257,262,263,222,263,262,259,259,264,263,264,259,258,265,266,267,266,265,268,268,219,266,219,268,217,262,222,268,268,222,217,261,262,265,265,262,268,269,258,260,258,269,270,270,264,258,264,270,271,272,271,270,271,272,227,273,270,269,270,273,272,274,275,276,275,274,277,273,274,272,274,276,272,272,276,227,276,223,227,276,226,223,226,276,275,257,278,279,278,257,261,279,260,257,260,279,280,281,280,279,280,281,282,279,283,281,283,279,278,265,284,285,284,265,267,261,285,278,285,261,265,278,286,283,286,278,285,286,285,284,286,284,287,288,289,290,289,288,291,292,290,293,290,292,288,281,293,290,293,281,283,290,282,281,282,290,289,294,295,296,296,295,297,295,286,297,297,286,287,293,283,295,295,283,286,292,293,294,294,293,295,298,269,299,269,298,273,300,299,301,299,300,298,301,280,282,280,301,299,299,260,280,260,299,269,302,274,303,274,302,277,304,302,303,302,304,305,304,298,300,298,304,303,303,273,298,273,303,274,306,289,291,289,306,307,307,282,289,282,307,301,308,301,307,301,308,300,309,307,306,307,309,308,310,311,312,312,313,310,308,309,311,311,310,308,300,308,310,310,304,300,304,310,313,313,305,304,314,315,316,314,316,317,252,250,317,317,316,252,252,316,219,316,266,219,267,266,315,315,266,316,318,284,267,284,318,319,319,287,284,287,319,320,320,321,322,321,320,319,323,319,318,319,323,321,315,318,267,318,315,324,324,323,318,323,324,325,326,325,324,325,326,327,314,324,315,324,314,326,328,329,330,330,329,331,331,329,275,331,275,277,256,226,329,329,226,275,255,256,328,328,256,329,302,332,277,332,302,333,333,334,332,334,333,335,336,335,333,335,336,337,305,333,302,333,305,336,331,332,338,332,331,277,330,338,339,338,330,331,339,340,341,340,339,338,338,334,340,334,338,332,321,323,342,323,343,342,322,321,344,321,342,344,344,342,345,342,346,345,347,342,343,342,347,346,325,343,323,343,325,348,349,343,348,343,349,347,350,349,348,349,350,351,350,325,327,325,350,348,335,352,334,334,352,353,352,354,353,354,352,355,356,357,352,352,357,355,337,356,335,335,356,352,340,353,358,353,340,334,359,341,340,340,358,359,360,359,358,359,360,361,360,358,353,353,354,360,297,362,296,362,297,363,363,364,362,364,363,365,320,365,363,365,320,322,287,363,297,363,287,320,365,366,364,366,365,367,367,368,366,368,367,369,344,369,367,369,344,345,322,367,365,367,322,344,313,370,371,370,313,312,305,371,336,371,305,313,336,372,337,372,336,371,371,373,372,373,371,370,372,374,375,374,372,373,337,375,356,375,337,372,356,376,357,376,356,375,375,377,376,377,375,374,378,233,379,233,378,232,380,379,381,379,380,378,379,382,381,382,379,383,233,383,379,383,233,234,383,234,384,234,236,384,383,385,382,385,383,384,385,386,387,386,385,384,384,236,386,236,238,386,242,388,389,388,242,243,242,390,241,390,242,389,389,391,390,391,389,392,389,393,392,393,389,388,394,241,390,241,394,248,394,395,248,248,395,247,396,394,397,394,396,395,390,397,394,397,390,391,398,399,400,400,401,398,380,399,378,399,398,378,378,398,232,398,249,232,398,401,249,401,250,249,402,403,404,403,402,405,400,404,401,404,400,402,401,317,250,317,401,404,404,314,317,314,404,403,406,407,408,408,407,409,407,253,409,409,253,255,388,243,407,407,243,253,388,406,393,406,388,407,410,411,412,411,410,413,330,412,328,412,330,410,409,328,412,328,409,255,408,412,411,412,408,409,414,403,405,403,414,415,415,326,403,314,403,326,416,327,415,326,415,327,415,417,416,417,415,414,418,410,419,410,418,413,420,419,421,419,420,418,419,339,341,419,341,421,410,330,339,410,339,419,380,422,423,422,380,381,423,424,425,424,423,422,426,422,427,422,426,424,427,381,382,381,427,422,428,382,385,382,428,427,429,427,428,427,429,426,429,430,431,430,429,428,428,387,430,387,428,385,393,432,392,432,393,433,434,391,392,434,392,432,435,434,432,435,432,436,433,436,432,436,433,437,438,397,391,391,434,438,438,396,397,396,438,439,439,440,441,440,439,438,440,438,434,434,435,440,442,443,444,444,445,442,423,425,443,443,442,423,380,423,442,442,399,380,399,442,445,445,400,399,446,447,448,447,446,449,406,447,449,447,406,408,393,449,433,449,393,406,433,446,437,446,433,449,445,402,400,402,445,450,405,450,451,450,405,402,451,452,453,452,451,450,452,445,444,445,452,450,414,454,417,454,414,455,455,456,454,456,455,457,451,453,455,457,455,453,455,405,451,405,455,414,447,411,458,411,447,408,459,448,447,459,447,458,459,460,461,460,459,458,458,413,460,413,458,411,462,418,420,418,462,463,463,413,418,413,463,460,461,463,464,463,461,460,465,463,462,463,465,464,466,467,468,467,466,469,470,467,469,467,470,471,472,470,469,470,472,473,474,469,466,469,474,472,475,476,477,476,475,478,479,477,480,477,479,475,480,470,473,470,480,477,470,477,476,470,476,471,467,481,482,481,467,471,468,482,483,482,468,467,483,484,485,484,483,482,482,486,484,486,482,481,476,481,471,481,476,487,487,486,481,486,487,488,488,489,490,489,488,487,478,487,476,487,478,489,491,474,492,474,466,492,493,491,494,491,492,494,494,495,496,495,494,492,492,468,495,468,492,466,497,498,499,497,500,498,1,497,501,497,1,500,495,501,497,501,495,468,496,497,499,497,496,495,501,483,502,483,501,468,1,502,2,502,1,501,2,503,6,503,2,502,502,485,503,485,502,483,504,479,505,479,504,475,504,478,475,478,504,506,507,506,504,506,507,508,507,505,509,505,507,504,510,511,512,510,513,511,508,510,506,510,508,513,506,514,478,514,506,510,510,17,514,17,510,512,489,514,515,514,489,478,490,515,516,515,490,489,516,11,13,11,516,515,17,515,514,515,17,11,178,517,518,517,178,182,518,181,178,181,518,519,519,472,474,472,519,518,518,473,472,473,518,517,202,520,204,520,202,521,521,491,520,520,491,493,519,474,521,521,474,491,181,519,202,202,519,521,188,517,182,517,188,522,522,473,517,473,522,480,523,480,522,480,523,479,190,522,188,522,190,523,214,524,525,524,214,215,523,190,214,214,525,523,523,525,479,525,505,479,505,525,524,524,509,505,237,526,238,526,237,527,527,528,526,528,527,529,520,529,527,529,520,493,204,527,237,527,204,520,386,530,387,387,530,531,530,532,531,531,532,533,526,532,530,532,526,528,238,530,386,530,238,526,246,534,535,534,246,247,215,535,524,535,215,246,524,536,509,536,524,535,535,537,536,537,535,534,396,538,539,396,539,395,247,539,534,539,247,395,534,540,537,540,534,539,540,539,538,538,541,540,542,493,494,493,542,529,542,543,529,529,543,528,543,544,545,544,543,542,542,496,544,496,542,494,507,509,546,509,536,546,508,546,547,546,508,507,547,548,549,548,547,546,546,536,548,536,537,548,550,551,552,552,551,553,551,554,553,553,554,555,556,551,557,551,556,554,551,533,557,533,551,550,430,531,558,531,430,387,431,558,559,558,431,430,552,559,558,558,550,552,558,533,550,533,558,531,560,559,561,559,560,431,562,561,563,561,562,560,563,564,565,564,563,561,561,552,564,552,561,559,564,553,566,553,564,552,565,566,567,566,565,564,567,568,569,568,567,566,566,555,568,555,566,553,570,571,572,571,573,572,541,572,574,572,541,570,575,574,572,575,572,576,572,573,576,573,577,576,439,538,396,538,439,578,578,541,538,541,578,570,571,578,579,578,571,570,441,578,439,578,441,579,579,580,581,580,579,441,581,571,579,571,581,582,582,583,584,583,582,581,581,585,583,585,581,580,582,573,571,573,582,586,577,586,587,586,577,573,587,588,589,588,587,586,586,584,588,584,586,582,431,590,591,590,431,560,592,591,590,591,592,593,594,590,595,590,594,592,595,560,562,595,590,560,429,596,426,426,596,597,596,598,597,597,598,599,593,596,591,596,593,598,591,429,431,429,591,596,441,600,580,600,441,601,602,580,600,602,585,580,603,602,600,600,604,603,604,600,601,601,605,604,606,440,435,435,607,606,601,441,440,440,606,601,605,601,606,606,608,605,608,606,607,607,609,608,610,533,532,533,610,557,556,610,611,610,556,557,611,543,545,543,611,610,528,610,532,610,528,543,540,541,612,541,574,612,537,612,548,612,537,540,548,613,549,613,548,612,612,575,613,575,612,574,544,499,614,499,544,496,545,614,615,614,545,544,615,616,617,616,615,614,614,498,616,498,614,499,611,615,618,615,611,545,618,556,611,556,618,619,619,620,621,620,619,618,618,617,620,617,618,615,513,547,622,547,513,508,511,622,623,622,511,513,623,624,625,624,623,622,622,549,624,549,622,547,624,613,626,613,624,549,625,626,627,626,625,624,627,628,629,628,627,626,626,575,628,575,626,613,619,554,556,554,619,630,630,555,554,555,630,631,632,631,630,631,632,633,621,630,619,630,621,632,576,628,575,628,576,634,634,629,628,629,634,635,636,635,634,635,636,637,577,634,576,634,577,636,638,639,640,639,638,641,633,638,640,640,631,633,631,568,555,568,631,640,569,640,639,640,569,568,642,643,644,643,642,645,644,589,642,589,644,587,636,587,644,587,636,577,637,644,643,644,637,636,484,646,647,646,484,486,485,647,648,647,485,484,648,649,650,649,648,647,647,651,649,651,647,646,503,648,652,648,503,485,6,652,7,652,6,503,7,653,10,653,7,652,652,650,653,650,652,648,488,646,486,646,488,654,654,651,646,651,654,655,656,655,654,655,656,657,490,654,488,654,490,656,656,516,658,516,656,490,657,658,659,658,657,656,659,19,18,19,659,658,658,13,19,13,658,516,660,3,5,3,660,661,1,661,500,661,1,3,500,616,498,616,500,661,617,661,660,661,617,616,662,16,663,16,662,15,663,625,662,625,663,623,512,623,663,623,512,511,17,663,16,663,17,512,620,660,664,660,620,617,621,664,632,664,621,620,633,632,664,633,664,665,665,660,5,660,665,664,662,627,666,627,662,625,667,15,662,667,662,666,637,666,635,666,637,667,666,629,635,629,666,627,668,669,670,669,668,671,671,672,669,672,671,673,653,673,671,673,653,650,10,671,668,671,10,653,673,674,672,674,673,675,675,676,674,676,675,677,649,677,675,677,649,651,650,675,673,675,650,649,678,679,680,679,678,681,681,18,679,18,681,659,682,659,681,659,682,657,683,681,678,681,683,682,682,684,685,684,682,683,657,685,655,685,657,682,655,677,651,677,655,685,685,676,677,676,685,684,10,686,687,686,10,668,686,641,687,641,686,688,689,688,686,688,689,690,668,689,686,689,668,670,18,691,692,18,692,679,679,692,693,679,693,680,694,693,692,693,694,695,692,645,694,645,692,691,669,696,697,696,669,672,670,697,698,697,670,669,699,700,697,697,700,698,701,699,696,696,699,697,702,701,696,701,702,703,702,704,703,704,702,705,674,705,702,705,674,676,672,702,696,702,672,674,706,678,707,678,706,683,708,706,709,706,707,709,709,707,710,707,711,710,707,680,711,680,707,678,712,706,708,712,708,713,683,712,684,712,683,706,684,705,676,705,684,712,712,704,705,704,712,713,714,715,716,715,714,717,698,700,714,698,714,716,698,689,670,689,698,716,716,690,689,690,716,715,718,719,720,719,718,721,695,721,693,721,695,719,693,711,680,711,693,721,711,718,710,718,711,721,699,722,700,722,699,723,723,724,722,724,723,725,726,725,723,725,726,727,701,723,699,723,701,726,722,728,729,728,722,724,700,729,714,729,700,722,714,730,717,730,714,729,729,731,730,731,729,728,709,732,733,732,709,710,708,733,734,733,708,709,734,735,736,735,734,733,733,737,735,737,733,732,732,738,737,738,732,739,739,740,738,740,739,741,718,741,739,741,718,720,710,739,732,739,710,718,742,743,744,743,742,745,704,744,703,744,704,742,703,726,701,726,703,744,744,727,726,727,744,743,742,746,745,746,742,747,747,736,746,736,747,734,713,734,747,734,713,708,704,747,742,747,704,713,748,563,749,563,748,562,717,749,715,749,717,748,715,750,690,750,715,749,749,565,750,565,749,563,639,688,751,688,639,641,751,569,639,569,751,567,750,567,751,567,750,565,690,751,688,751,690,750,583,752,753,752,583,585,584,753,754,753,584,583,754,719,695,719,754,753,753,720,719,720,753,752,642,694,645,694,642,755,755,695,694,695,755,754,588,754,755,754,588,584,755,589,588,589,755,642,756,595,757,595,756,594,731,757,730,757,731,756,730,748,717,748,730,757,757,562,748,562,757,595,602,758,759,758,602,603,585,759,752,759,585,602,741,752,759,752,741,720,759,740,741,740,759,758,457,760,761,760,457,453,762,456,457,762,457,761,763,762,761,761,764,763,761,765,764,765,761,760,452,766,767,766,452,444,453,767,760,767,453,452,760,768,765,768,760,767,767,769,768,769,767,766,464,770,461,770,464,771,771,772,770,772,771,773,774,771,775,771,774,773,775,464,465,464,775,771,776,459,777,459,776,448,777,778,776,778,777,779,770,779,777,779,770,772,777,461,770,461,777,459,780,781,782,781,780,783,780,764,765,764,780,782,764,784,763,784,764,782,782,785,784,785,782,781,786,787,788,787,786,789,769,788,768,788,769,786,768,780,765,780,768,788,788,783,780,783,788,787,790,791,792,791,790,793,793,794,791,794,793,795,795,773,774,773,795,793,790,773,793,773,790,772,796,797,798,797,796,799,799,792,797,792,799,790,799,772,790,772,799,779,778,799,796,799,778,779,800,801,802,801,800,803,783,803,781,803,783,801,781,804,785,804,781,803,805,803,800,803,805,804,806,807,808,807,806,809,789,809,787,809,789,807,801,787,809,787,801,783,802,809,806,809,802,801,810,811,812,811,810,813,813,814,811,814,813,815,791,815,813,815,791,794,792,813,810,813,792,791,816,817,818,817,816,819,819,812,817,812,819,810,797,810,819,810,797,792,798,819,816,819,798,797,820,821,822,821,820,823,823,802,821,802,823,800,824,800,823,800,824,805,825,823,820,823,825,824,826,827,828,827,826,829,829,808,827,808,829,806,821,806,829,806,821,802,822,829,826,829,822,821,830,831,832,831,830,833,833,834,831,834,833,835,811,835,833,835,811,814,812,833,830,833,812,811,836,837,838,837,836,839,839,832,837,832,839,830,817,830,839,830,817,812,818,839,836,839,818,817,840,841,842,841,840,843,843,822,841,822,843,820,844,820,843,820,844,825,845,843,840,843,845,844,846,847,848,847,846,849,846,828,849,828,846,826,841,826,846,826,841,822,842,846,848,846,842,841,850,851,852,851,850,853,854,852,855,852,854,850,855,831,834,831,855,852,852,832,831,832,852,851,856,857,858,857,856,859,853,858,851,858,853,856,851,837,832,837,851,858,858,838,837,838,858,857,860,861,862,861,860,863,840,862,861,862,840,842,861,845,840,845,861,864,863,864,861,864,863,865,848,866,867,866,848,847,842,867,862,867,842,848,862,868,860,868,862,867,867,869,868,869,867,866,870,871,872,871,870,873,872,874,875,874,872,871,871,854,874,854,871,850,850,871,873,850,873,853,876,856,877,856,876,859,877,878,876,878,877,879,873,879,877,879,873,870,853,877,856,877,853,873,863,880,881,880,863,860,865,881,882,881,865,863,883,882,881,882,883,884,885,881,880,881,885,883,868,886,887,886,868,869,860,887,880,887,860,868,888,880,887,880,888,885,887,889,888,889,887,886,872,890,870,890,872,891,891,892,890,892,891,893,894,893,891,893,894,895,875,891,872,891,875,894,879,896,878,896,879,897,897,898,896,898,897,899,890,899,897,899,890,892,870,897,879,897,870,890,900,901,902,901,900,903,904,902,905,902,904,900,905,883,885,883,905,902,902,884,883,884,902,901,906,888,889,888,906,907,907,885,888,885,907,905,908,905,907,905,908,904,909,907,906,907,909,908,910,911,912,911,910,913,895,912,893,912,895,910,893,914,892,914,893,912,912,915,914,915,912,911,899,916,898,916,899,917,918,917,919,917,918,916,914,919,917,919,914,915,892,917,899,917,892,914,920,900,904,900,920,921,921,903,900,903,921,922,923,922,921,922,923,924,925,921,920,921,925,923,926,908,909,908,926,927,927,904,908,904,927,920,928,920,927,920,928,925,929,927,926,927,929,928,911,930,915,930,911,931,932,931,933,931,932,930,933,934,935,934,933,931,931,913,934,913,931,911,936,919,937,919,936,918,938,937,939,937,938,936,939,930,932,930,939,937,937,915,930,915,937,919,940,923,925,923,940,941,941,924,923,924,941,942,943,942,941,942,943,944,945,941,940,941,945,943,946,928,929,928,946,947,947,925,928,925,947,940,948,940,947,940,948,945,949,947,946,947,949,948,933,950,932,950,933,951,951,952,950,952,951,953,954,953,951,953,954,955,935,951,933,951,935,954,956,939,957,939,956,938,958,957,959,957,958,956,959,950,952,950,959,957,957,932,950,932,957,939,960,943,945,943,960,961,961,944,943,944,961,962,963,962,961,962,963,964,965,961,960,961,965,963,966,948,949,948,966,967,967,945,948,945,967,960,968,960,967,960,968,965,969,967,966,967,969,968,953,970,952,970,953,971,971,972,970,972,971,973,974,973,971,973,974,975,955,971,953,971,955,974,976,959,977,959,976,958,978,977,979,977,978,976,979,970,972,970,979,977,977,952,970,952,977,959,980,963,965,963,980,981,981,964,963,964,981,982,983,982,981,982,983,984,985,981,980,981,985,983,986,987,988,987,986,989,989,969,987,969,989,968,980,968,989,968,980,965,985,989,986,989,985,980,973,990,972,990,973,991,992,991,993,991,992,990,993,994,995,994,993,991,975,991,973,991,975,994,996,997,998,997,996,999,998,992,996,992,998,990,998,979,972,998,972,990,978,998,997,998,978,979,1000,1001,1002,1001,1000,1003,1004,1002,1005,1002,1004,1000,362,1005,1002,1005,362,364,1002,296,362,296,1002,1001,1006,1005,1007,1005,1006,1004,1008,1007,1009,1007,1008,1006,1009,366,368,366,1009,1007,364,1007,1005,1007,364,366,1010,983,985,983,1010,1011,1011,984,983,984,1011,1012,1000,1012,1011,1012,1000,1004,1011,1003,1000,1003,1011,1010,1013,984,1012,984,1013,1014,1015,1014,1013,1014,1015,1016,1008,1013,1006,1013,1008,1015,1004,1013,1012,1013,1004,1006,1017,1018,1019,1018,1017,1020,1019,312,1017,312,1019,370,1021,370,1019,370,1021,373,1019,1022,1021,1022,1019,1018,1021,1023,1024,1023,1021,1022,1024,373,1021,373,1024,374,374,1025,377,1025,374,1024,1024,1026,1025,1026,1024,1023,1027,993,1028,993,1027,992,1020,1028,1018,1028,1020,1027,1018,1029,1022,1029,1018,1028,1028,995,1029,995,1028,993,1029,995,1030,995,1031,1030,1022,1030,1023,1030,1022,1029,1026,1023,1030,1026,1030,1032,1032,1030,1031,1031,1033,1032,1010,986,1034,986,1010,985,1003,1034,1035,1034,1003,1010,1036,1035,1034,1035,1036,1037,988,1034,986,1034,988,1036,1038,294,1039,294,1038,292,1037,1039,1035,1039,1037,1038,1035,1001,1003,1001,1035,1039,1001,1039,294,1001,294,296,1027,996,992,996,1027,1040,1040,999,996,999,1040,1041,1042,1041,1040,1041,1042,1043,1020,1040,1027,1040,1020,1042,1044,311,309,311,1044,1045,1017,311,1045,311,1017,312,1017,1042,1020,1042,1017,1045,1045,1043,1042,1043,1045,1044,1014,982,984,982,1014,1046,964,1046,1047,1046,964,982,1048,1047,1046,1047,1048,1049,1016,1046,1014,1046,1016,1048,994,1031,995,1031,994,1050,1050,1033,1031,1033,1050,1051,1052,1051,1050,1051,1052,1053,975,1050,994,1050,975,1052,1047,1054,964,962,964,1054,1054,1055,962,944,962,1055,1056,1057,1054,1055,1054,1057,1049,1056,1047,1054,1047,1056,975,974,1058,975,1058,1052,1052,1058,1059,1052,1059,1053,1058,1060,1061,1058,1061,1059,974,955,1060,974,1060,1058,942,1062,924,1062,942,1063,1063,1064,1062,1064,1063,1065,1055,1065,1063,1065,1055,1057,944,1063,942,1063,944,1055,1066,954,935,954,1066,1067,1067,955,954,955,1067,1060,1068,1060,1067,1060,1068,1061,1069,1067,1066,1067,1069,1068,1070,903,922,903,1070,1071,1072,1070,1073,1070,1072,1071,1062,1073,1070,1073,1062,1064,924,1070,922,1070,924,1062,934,913,1074,913,1075,1074,1074,935,934,935,1074,1066,1076,1066,1074,1066,1076,1069,1077,1074,1075,1074,1077,1076,901,1078,884,1078,901,1079,1079,1080,1078,1080,1079,1081,1071,1081,1079,1081,1071,1072,903,1079,901,1079,903,1071,1082,910,895,910,1082,1083,913,1083,1075,1083,913,910,1075,1084,1077,1084,1075,1083,1085,1083,1082,1083,1085,1084,1086,882,1087,882,1086,865,1088,1087,1089,1087,1088,1086,1078,1089,1087,1089,1078,1080,884,1087,882,1087,884,1078,1090,894,875,894,1090,1091,1091,895,894,895,1091,1082,1092,1082,1091,1082,1092,1085,1093,1091,1090,1091,1093,1092,1094,864,1095,864,1094,845,1096,1095,1097,1095,1096,1094,1097,1086,1088,1086,1097,1095,1095,865,1086,865,1095,864,1098,874,854,874,1098,1099,1099,875,874,875,1099,1090,1100,1090,1099,1090,1100,1093,1101,1099,1098,1099,1101,1100,1094,844,845,844,1094,1102,1102,825,844,825,1102,1103,1104,1103,1102,1103,1104,1105,1096,1102,1094,1102,1096,1104,1098,855,1106,855,1098,854,1101,1106,1107,1106,1101,1098,1107,1108,1109,1108,1107,1106,1106,834,1108,834,1106,855,1103,824,825,824,1103,1110,1110,805,824,805,1110,1111,1112,1111,1110,1111,1112,1113,1105,1110,1103,1110,1105,1112,835,1108,834,1108,835,1114,1109,1114,1115,1114,1109,1108,1116,1115,1114,1115,1116,1117,814,1114,835,1114,814,1116,1111,804,805,804,1111,1118,1118,785,804,785,1118,1119,1119,1120,1121,1120,1119,1118,1113,1118,1111,1118,1113,1120,815,1116,814,1116,815,1122,1122,1117,1116,1117,1122,1123,1124,1123,1122,1123,1124,1125,794,1122,815,1122,794,1124,784,1119,1126,1119,784,785,763,1126,1127,1126,763,784,1127,1128,1129,1128,1127,1126,1126,1121,1128,1121,1126,1119,1124,795,1130,795,1124,794,1125,1130,1131,1130,1125,1124,1131,1132,1133,1132,1131,1130,1130,774,1132,774,1130,795,762,1127,1134,1127,762,763,456,1134,1135,1134,456,762,1135,1136,1137,1136,1135,1134,1134,1129,1136,1129,1134,1127,1132,775,1138,775,1132,774,1133,1138,1139,1138,1133,1132,1139,1140,1141,1140,1139,1138,1138,465,1140,465,1138,775,1135,454,456,454,1135,1142,1142,417,454,417,1142,1143,1144,1143,1142,1143,1144,1145,1142,1137,1144,1137,1142,1135,1140,462,1146,462,1140,465,1141,1146,1147,1146,1141,1140,1147,1148,1149,1148,1147,1146,1146,420,1148,420,1146,462,1143,416,417,416,1143,1150,1150,327,416,327,1150,350,1151,350,1150,350,1151,351,1145,1150,1143,1150,1145,1151,1148,421,1152,421,1148,420,1149,1152,1153,1152,1149,1148,1153,359,361,359,1153,1152,341,1152,421,1152,341,359,1038,288,292,288,1038,1154,1154,291,288,291,1154,1155,1156,1154,1157,1154,1156,1155,1157,1038,1037,1038,1157,1154,1044,306,1158,306,1044,309,1043,1044,1159,1159,1044,1158,1159,1158,1156,1156,1158,1155,1158,291,1155,291,1158,306,1160,1036,988,1036,1160,1161,1161,1037,1036,1037,1161,1157,1162,1157,1161,1157,1162,1156,1163,1161,1160,1161,1163,1162,1041,1164,999,1164,1041,1165,1163,1165,1162,1165,1163,1164,1162,1159,1156,1159,1162,1165,1043,1165,1041,1165,1043,1159,1166,1008,1009,1008,1166,1167,1168,1167,1166,1167,1168,1169,1166,1170,1168,1170,1166,1171,1166,368,1171,368,1166,1009,1171,369,1172,369,1171,368,1170,1171,1173,1171,1172,1173,1173,1174,1175,1174,1173,1172,1172,345,1174,345,1172,369,1176,1025,1026,1176,1026,1177,377,1176,1178,1176,377,1025,1176,1179,1178,1179,1176,1180,1180,1176,1177,1180,1177,1181,376,1178,1182,1178,376,377,1182,357,376,357,1182,1183,1184,1183,1182,1183,1184,1185,1184,1178,1179,1178,1184,1182,1167,1015,1008,1015,1167,1186,1186,1016,1015,1016,1186,1187,1188,1187,1186,1187,1188,1189,1169,1186,1167,1186,1169,1188,1177,1032,1190,1032,1177,1026,1181,1190,1191,1190,1181,1177,1192,1191,1190,1191,1192,1193,1033,1190,1032,1190,1033,1192,346,1174,345,1174,346,1194,1194,1175,1174,1175,1194,1195,1196,1195,1194,1195,1196,1197,347,1194,346,1194,347,1196,1183,355,357,355,1183,1198,354,1198,1199,1198,354,355,1200,1199,1198,1199,1200,1201,1185,1198,1183,1198,1185,1200,1202,347,349,347,1202,1196,1202,1197,1196,1197,1202,1203,1204,1203,1202,1203,1204,1205,1204,349,351,349,1204,1202,360,354,1206,354,1199,1206,1207,361,360,1207,360,1206,1207,1208,1209,1208,1207,1206,1206,1201,1208,1201,1206,1199,1204,1151,1210,1151,1204,351,1210,1205,1204,1205,1210,1211,1211,1212,1213,1212,1211,1210,1151,1212,1210,1212,1151,1145,1153,1207,1214,1207,1153,361,1153,1215,1149,1215,1153,1214,1215,1216,1217,1216,1215,1214,1214,1209,1216,1209,1214,1207,1218,1144,1137,1144,1218,1219,1219,1145,1144,1145,1219,1212,1220,1212,1219,1212,1220,1213,1221,1219,1218,1219,1221,1220,1222,1147,1223,1147,1222,1141,1224,1223,1225,1223,1224,1222,1217,1225,1223,1223,1215,1217,1223,1149,1215,1149,1223,1147,1136,1226,1227,1226,1136,1129,1137,1227,1218,1227,1137,1136,1228,1218,1227,1218,1228,1221,1227,1229,1228,1229,1227,1226,1230,1139,1231,1139,1230,1133,1232,1231,1233,1231,1232,1230,1233,1222,1224,1222,1233,1231,1231,1141,1222,1141,1231,1139,1128,1234,1235,1234,1128,1121,1129,1235,1226,1235,1129,1128,1226,1236,1229,1236,1226,1235,1235,1237,1236,1237,1235,1234,1131,1238,1125,1238,1131,1239,1239,1240,1238,1240,1239,1241,1241,1230,1232,1230,1241,1239,1239,1133,1230,1133,1239,1131,1120,1242,1243,1242,1120,1113,1121,1243,1234,1243,1121,1120,1234,1244,1237,1244,1234,1243,1243,1245,1244,1245,1243,1242,1123,1246,1117,1246,1123,1247,1247,1248,1246,1248,1247,1249,1238,1249,1247,1249,1238,1240,1125,1247,1123,1247,1125,1238,1250,1112,1105,1112,1250,1251,1113,1251,1242,1251,1113,1112,1252,1242,1251,1242,1252,1245,1253,1251,1250,1251,1253,1252,1115,1254,1109,1254,1115,1255,1255,1256,1254,1256,1255,1257,1246,1257,1255,1257,1246,1248,1117,1255,1115,1255,1117,1246,1258,1250,1259,1250,1258,1253,1260,1259,1261,1259,1260,1258,1261,1104,1096,1104,1261,1259,1259,1105,1104,1105,1259,1250,1254,1262,1263,1262,1254,1256,1263,1109,1254,1109,1263,1107,1264,1107,1263,1107,1264,1101,1263,1265,1264,1265,1263,1262,1266,1267,1268,1267,1266,1269,1268,1088,1266,1088,1268,1097,1261,1097,1268,1097,1261,1096,1268,1267,1261,1267,1260,1261,1270,1271,1272,1271,1270,1273,1272,1264,1270,1270,1264,1265,1264,1100,1101,1100,1264,1272,1272,1093,1100,1093,1272,1271,1266,1089,1274,1089,1266,1088,1269,1274,1275,1274,1269,1266,1275,1276,1277,1276,1275,1274,1080,1274,1089,1274,1080,1276,1271,1092,1093,1092,1271,1278,1278,1085,1092,1085,1278,1279,1280,1279,1278,1279,1280,1281,1273,1278,1271,1278,1273,1280,1081,1276,1080,1276,1081,1282,1277,1282,1283,1282,1277,1276,1283,1284,1285,1284,1283,1282,1072,1282,1081,1282,1072,1284,1279,1084,1085,1084,1279,1286,1077,1286,1287,1286,1077,1084,1287,1288,1289,1288,1287,1286,1281,1286,1279,1286,1281,1288,1284,1073,1290,1073,1284,1072,1285,1290,1291,1290,1285,1284,1291,1292,1293,1292,1291,1290,1064,1290,1073,1290,1064,1292,1287,1076,1077,1076,1287,1294,1294,1069,1076,1069,1294,1295,1295,1296,1297,1296,1295,1294,1294,1289,1296,1289,1294,1287,1065,1292,1064,1292,1065,1298,1293,1298,1299,1298,1293,1292,1300,1299,1298,1299,1300,1301,1057,1298,1065,1298,1057,1300,1295,1068,1069,1068,1295,1302,1302,1061,1068,1061,1302,1303,1304,1303,1302,1303,1304,1305,1297,1302,1295,1302,1297,1304,1306,1056,1049,1056,1306,1307,1057,1056,1300,1056,1307,1300,1300,1307,1301,1307,1308,1301,1309,1307,1306,1307,1309,1308,1059,1310,1053,1310,1059,1311,1311,1312,1310,1312,1311,1313,1305,1311,1303,1311,1305,1313,1303,1059,1061,1059,1303,1311,1187,1048,1016,1048,1187,1314,1314,1049,1048,1049,1314,1306,1315,1306,1314,1306,1315,1309,1189,1314,1187,1314,1189,1315,1051,1192,1033,1192,1051,1316,1316,1193,1192,1193,1316,1317,1310,1317,1316,1317,1310,1312,1053,1316,1051,1316,1053,1310,1318,1319,1320,1319,1318,1321,1322,1323,1318,1318,1320,1322,1322,1168,1170,1168,1322,1320,1320,1169,1168,1169,1320,1319,1322,1173,1324,1173,1322,1170,1323,1324,1325,1324,1323,1322,1325,1326,42,1326,1325,1324,1324,1175,1326,1175,1324,1173,1327,1328,1329,1328,1327,1330,1330,1181,1328,1181,1330,1180,1331,1180,1330,1180,1331,1179,1331,1327,1332,1327,1331,1330,1331,1184,1179,1184,1331,1333,1333,1185,1184,1185,1333,1334,1334,1335,50,1335,1334,1333,1333,1332,1335,1332,1333,1331,1318,1336,1321,1336,1318,1337,1337,1338,1336,1338,1337,1339,1340,1339,1337,1339,1340,1341,1337,1323,1340,1323,1337,1318,41,43,1342,1342,1343,41,42,41,1343,1325,42,1343,1340,1325,1343,1325,1340,1323,1341,1343,1342,1343,1341,1340,1327,1344,1345,1344,1327,1329,1332,1345,1346,1345,1332,1327,1346,1347,1348,1347,1346,1345,1345,1349,1347,1349,1345,1344,45,1350,46,1350,45,1351,1351,1348,1350,1348,1351,1346,1335,1346,1351,1346,1335,1332,1351,50,1335,50,1351,45,1188,1319,1352,1319,1188,1169,1352,1189,1188,1189,1352,1353,1354,1353,1352,1353,1354,1355,1321,1352,1319,1352,1321,1354,1354,1356,1355,1356,1354,1357,1357,1358,1356,1358,1357,1359,1336,1359,1357,1359,1336,1338,1321,1357,1354,1357,1321,1336,1328,1191,1360,1191,1328,1181,1329,1360,1361,1360,1329,1328,1361,1362,1363,1362,1361,1360,1360,1193,1362,1193,1360,1191,1361,1364,1365,1364,1361,1363,1329,1365,1344,1365,1329,1361,1344,1366,1349,1366,1344,1365,1365,1367,1366,1367,1365,1364,1353,1315,1189,1315,1353,1368,1368,1309,1315,1309,1368,1369,1370,1369,1368,1369,1370,1371,1355,1368,1353,1368,1355,1370,1372,1373,1370,1373,1372,1374,1374,1372,1375,1374,1375,1376,1375,1372,1358,1372,1356,1358,1356,1370,1355,1372,1370,1356,1317,1362,1193,1362,1317,1377,1377,1363,1362,1363,1377,1378,1379,1378,1377,1378,1379,1380,1312,1377,1317,1377,1312,1379,1378,1381,1382,1381,1383,1382,1363,1378,1364,1378,1382,1364,1384,1367,1382,1364,1382,1367,1385,1384,1383,1383,1384,1382,1308,1386,1301,1386,1308,1387,1387,1388,1386,1388,1387,1389,1369,1389,1387,1389,1369,1371,1309,1387,1308,1387,1309,1369,1390,1313,1305,1313,1390,1391,1391,1312,1313,1312,1391,1379,1392,1379,1391,1379,1392,1380,1393,1391,1390,1391,1393,1392,1394,1299,1395,1299,1394,1293,1396,1395,1397,1395,1396,1394,1386,1397,1395,1397,1386,1388,1301,1395,1299,1395,1301,1386,1398,1304,1297,1304,1398,1399,1399,1305,1304,1305,1399,1390,1400,1390,1399,1390,1400,1393,1401,1399,1398,1399,1401,1400,1394,1402,1403,1402,1394,1396,1403,1293,1394,1293,1403,1291,1404,1291,1403,1291,1404,1285,26,1403,1402,1403,26,1404,1405,1398,1406,1398,1405,1401,33,1406,1407,1406,33,1405,1407,1296,1289,1296,1407,1406,1406,1297,1296,1297,1406,1398,1408,1283,1409,1283,1408,1277,28,1409,27,1409,28,1408,27,1404,26,1404,27,1409,1409,1285,1404,1285,1409,1283,1410,1277,1408,1277,1410,1275,1410,1269,1275,1269,1410,1411,1410,1412,1413,1410,1413,1411,1408,28,1412,1408,1412,1410,1414,1288,1281,1288,1414,1415,1415,1289,1288,1289,1415,1407,31,1407,1415,1407,31,33,29,1415,1414,1415,29,31,1414,1281,1416,1281,1280,1416,1416,1417,1414,29,1414,1417,1418,1419,1416,1417,1416,1419,1416,1273,1418,1273,1416,1280,1420,1260,1267,1260,1420,1421,1422,1421,1420,1421,1422,1423,1413,1420,1411,1420,1413,1422,1269,1420,1267,1420,1269,1411,1424,1270,1265,1265,1425,1424,1273,1424,1418,1424,1273,1270,1418,1426,1419,1426,1418,1424,1426,1424,1425,1425,1427,1426,1428,1429,1430,1429,1428,1431,1423,1430,1421,1430,1423,1428,1421,1258,1260,1258,1421,1430,1253,1430,1429,1430,1253,1258,1432,1433,1434,1433,1432,1435,1256,1434,1262,1434,1256,1432,1262,1425,1265,1425,1262,1434,1434,1427,1425,1427,1434,1433,1436,1437,1438,1437,1436,1439,1439,1431,1437,1431,1439,1429,1429,1252,1253,1252,1429,1439,1439,1245,1252,1245,1439,1436,1440,1441,1442,1441,1440,1443,1248,1442,1257,1442,1248,1440,1257,1432,1256,1432,1257,1442,1442,1435,1432,1435,1442,1441,1244,1436,1444,1436,1244,1245,1237,1444,1445,1444,1237,1244,1445,1446,1447,1446,1445,1444,1444,1438,1446,1438,1444,1436,1249,1440,1248,1440,1249,1448,1448,1443,1440,1443,1448,1449,1450,1449,1448,1449,1450,1451,1240,1448,1249,1448,1240,1450,1236,1445,1452,1445,1236,1237,1229,1452,1453,1452,1229,1236,1453,1454,1455,1454,1453,1452,1452,1447,1454,1447,1452,1445,1241,1450,1240,1450,1241,1456,1456,1451,1450,1451,1456,1457,1457,1458,1459,1458,1457,1456,1456,1232,1458,1232,1456,1241,1228,1453,1460,1453,1228,1229,1221,1460,1461,1460,1221,1228,1461,1462,1463,1462,1461,1460,1460,1455,1462,1455,1460,1453,1458,1233,1464,1233,1458,1232,1459,1464,1465,1464,1459,1458,1465,1466,1467,1466,1465,1464,1464,1224,1466,1224,1464,1233,1468,1220,1469,1220,1468,1213,1470,1469,1471,1469,1470,1468,1471,1461,1463,1461,1471,1469,1461,1469,1220,1461,1220,1221,1225,1472,1473,1472,1225,1217,1466,1225,1473,1225,1466,1224,1467,1473,1474,1473,1467,1466,1473,1475,1474,1475,1473,1472,1476,1211,1477,1211,1476,1205,1478,1477,1479,1477,1478,1476,1479,1468,1470,1468,1479,1477,1477,1213,1468,1213,1477,1211,1216,1480,1481,1480,1216,1209,1217,1481,1472,1481,1217,1216,1472,1482,1475,1482,1472,1481,1481,1483,1482,1483,1481,1480,1484,1203,1485,1484,1197,1203,37,1485,1486,1485,37,1484,1486,1476,1478,1476,1486,1485,1485,1205,1476,1205,1485,1203,1487,1208,1201,1208,1487,1488,1209,1488,1480,1488,1209,1208,1480,1489,1483,1489,1480,1488,52,1488,1487,1488,52,1489,1389,1374,1490,1374,1389,1373,1388,1389,1491,1389,1490,1491,1491,1490,1492,1490,1493,1492,1490,1374,1493,1374,1376,1493,1392,1383,1381,1383,1392,1494,1495,1383,1494,1383,1495,1385,1496,1497,1494,1494,1497,1495,1496,1392,1393,1392,1496,1494,1498,1397,1388,1388,1491,1498,1396,1498,1499,1498,1396,1397,1500,1499,1498,1499,1500,59,1498,1491,1500,1491,1492,1500,1501,1393,1400,1393,1501,1496,1501,1502,1496,1496,1502,1497,1503,1502,1501,1502,1503,64,1401,1501,1400,1501,1401,1503,56,1504,1505,1504,56,55,25,24,56,25,56,1505,28,25,1505,1505,1412,28,1505,1413,1412,1413,1505,1504,1506,60,1507,60,1506,65,1419,1507,1417,1507,1419,1506,29,1507,32,1507,29,1417,32,60,35,60,32,1507,1508,1509,1510,1508,1510,1511,55,1508,1504,1508,55,1509,1504,1422,1413,1422,1504,1508,1508,1423,1422,1423,1508,1511,1512,1513,1514,1514,1513,1515,1427,1513,1426,1513,1427,1515,1426,1506,1419,1506,1426,1513,65,1513,1512,1513,65,1506,1511,1428,1423,1428,1511,1516,1431,1516,1517,1516,1431,1428,1517,1518,1519,1518,1517,1516,1510,1516,1511,1516,1510,1518,1433,1515,1427,1515,1433,1520,1520,1514,1515,1514,1520,1521,1521,1522,1523,1522,1521,1520,1435,1520,1433,1520,1435,1522,1437,1517,1524,1517,1437,1431,1438,1524,1525,1524,1438,1437,1525,1526,1527,1526,1525,1524,1524,1519,1526,1519,1524,1517,1441,1522,1435,1522,1441,1528,1523,1528,1529,1528,1523,1522,1529,1530,1531,1530,1529,1528,1443,1528,1441,1528,1443,1530,1446,1532,1447,1533,1447,1532,1533,1534,1535,1534,1533,1532,1527,1534,1532,1532,1525,1527,1438,1525,1446,1532,1446,1525,1451,1536,1537,1451,1537,1449,1449,1537,1530,1449,1530,1443,1530,1537,1531,1537,1538,1531,1536,1538,1537,1538,1536,1539,1540,1455,1541,1455,1454,1541,1541,1542,1540,1542,1541,1543,1541,1535,1543,1535,1541,1533,1447,1533,1454,1541,1454,1533,1544,1459,1545,1459,1544,1457,1457,1544,1536,1457,1536,1451,1544,1546,1539,1544,1539,1536,1544,1547,1546,1547,1544,1545,1462,1548,1463,1548,1462,1549,1549,1550,1548,1550,1549,1551,1540,1551,1549,1551,1540,1542,1540,1549,1462,1462,1455,1540,1465,1552,1553,1552,1465,1467,1545,1465,1553,1465,1545,1459,1545,1554,1547,1554,1545,1553,1553,1555,1554,1555,1553,1552,1471,1556,1470,1556,1471,1557,1557,1558,1556,1558,1557,1559,1548,1559,1557,1559,1548,1550,1463,1557,1471,1557,1463,1548,1560,1474,1475,1474,1560,1561,1561,1467,1474,1467,1561,1552,1552,1562,1555,1562,1552,1561,1561,1563,1562,1563,1561,1560,1556,1479,1470,1479,1556,1564,1478,1479,1565,1479,1564,1565,1565,1564,1566,1564,1567,1566,1564,1558,1567,1558,1564,1556,1560,1482,1568,1482,1560,1475,1569,1560,1568,1560,1569,1563,1570,1568,1571,1568,1570,1569,1571,1482,1483,1482,1571,1568,1478,1572,1486,1572,1478,1565,1486,39,37,39,1486,1572,1573,1572,1574,1572,1573,39,1572,1566,1574,1566,1572,1565,1483,1575,1571,1575,1483,1489,1575,1570,1571,1570,1575,1576,46,1576,1575,46,1575,53,1489,53,1575,53,1489,52,1577,1578,1579,1578,1577,1580,1580,1550,1578,1550,1580,1559,1559,1581,1558,1581,1559,1580,1582,1580,1577,1580,1582,1581,1578,1551,1583,1551,1578,1550,1579,1583,1584,1583,1579,1578,1584,1585,1586,1585,1584,1583,1583,1542,1585,1542,1583,1551,1587,1588,1589,1588,1587,1590,1590,1591,1588,1591,1590,1592,1562,1592,1590,1592,1562,1563,1555,1590,1587,1590,1555,1562,1587,1554,1555,1554,1587,1593,1593,1547,1554,1547,1593,1594,1595,1594,1593,1594,1595,1596,1589,1593,1587,1593,1589,1595,1597,1598,1376,1493,1376,1598,1492,1598,1599,1598,1492,1493,1599,1577,1579,1577,1599,1598,1582,1577,1597,1598,1597,1577,1500,1600,59,1600,1500,1601,1601,1586,1600,1586,1601,1584,1599,1584,1601,1584,1599,1579,1492,1601,1500,1601,1492,1599,1602,1385,1495,1385,1602,1603,1603,1602,1588,1603,1588,1591,1604,1588,1602,1588,1604,1589,1497,1602,1495,1602,1497,1604,1605,1502,64,1502,1605,1606,1606,1497,1502,1497,1606,1604,1595,1589,1606,1604,1606,1589,1596,1606,1605,1606,1596,1595,1581,1582,1607,1582,1608,1607,1558,1607,1567,1607,1558,1581,1609,1567,1607,1567,1609,1566,1610,1607,1608,1607,1610,1609,1342,1611,1341,1612,1341,1611,1611,1609,1612,1610,1612,1609,1574,1566,1611,1609,1611,1566,1573,1611,1342,1611,1573,1574,1613,1582,1597,1582,1613,1608,1614,1608,1613,1608,1614,1610,1358,1613,1375,1613,1358,1614,1375,1597,1376,1597,1375,1613,1339,1612,1615,1612,1339,1341,1338,1615,1359,1615,1338,1339,1359,1614,1358,1614,1359,1615,1615,1610,1614,1610,1615,1612,1592,1616,1591,1617,1591,1616,1616,1618,1617,1618,1616,1619,1569,1570,1616,1619,1616,1570,1563,1616,1592,1616,1563,1569,1348,1620,1621,1348,1621,1350,1621,46,1350,46,1621,1576,1621,1619,1570,1621,1570,1576,1620,1618,1619,1620,1619,1621,1622,1603,1591,1622,1591,1617,1384,1385,1603,1384,1603,1622,1367,1384,1622,1622,1623,1367,1623,1622,1617,1617,1618,1623,1620,1347,1624,1347,1620,1348,1618,1624,1623,1624,1618,1620,1623,1366,1367,1366,1623,1624,1624,1349,1366,1349,1624,1347,1625,1534,1527,1534,1625,1626,1535,1626,1543,1626,1535,1534,1585,1543,1626,1543,1585,1542,1586,1626,1625,1626,1586,1585,1538,1627,1531,1627,1538,1628,1628,1596,1627,1596,1628,1594,1546,1594,1628,1594,1546,1547,1628,1539,1546,1539,1628,1538,1526,1629,1630,1629,1526,1519,1630,1527,1526,1527,1630,1625,1600,1625,1630,1625,1600,1586,1630,59,1600,59,1630,1629,1529,1631,1523,1631,1529,1632,1632,64,1631,64,1632,1605,1627,1605,1632,1605,1627,1596,1531,1632,1529,1632,1531,1627,1633,1634,1635,1634,1633,1636,1637,1635,1638,1635,1637,1633,425,1638,1635,1635,443,425,443,1635,1634,1634,444,443,1634,766,444,766,1634,1639,1639,769,766,769,1639,1640,1641,1640,1639,1640,1641,1642,1636,1639,1634,1639,1636,1641,1643,1644,1645,1644,1643,1646,446,1644,1646,1644,446,448,437,1646,1647,1646,437,446,1648,1646,1643,1646,1648,1647,1644,776,1649,776,1644,448,1645,1649,1650,1649,1645,1644,1650,1651,1652,1651,1650,1649,1649,778,1651,778,1649,776,1653,1638,1654,1638,1653,1637,599,1654,597,1654,599,1653,597,424,426,424,597,1654,1654,425,424,425,1654,1638,1655,1647,1648,1647,1655,1656,1656,437,1647,437,1656,436,436,607,435,607,436,1656,1656,609,607,609,1656,1655,1657,1653,599,1653,1657,1658,1658,1637,1653,1637,1658,1659,1660,1659,1658,1659,1660,1661,1662,1658,1657,1658,1662,1660,1663,1657,1664,1657,1663,1662,1665,1664,1666,1664,1665,1663,1666,598,593,598,1666,1664,1664,599,598,599,1664,1657,1655,1667,609,1667,1655,1668,1668,1669,1667,1669,1668,1670,1670,1671,1672,1671,1670,1668,1648,1668,1655,1668,1648,1671,1667,1673,1674,1673,1667,1669,609,1674,608,1674,609,1667,608,1675,605,1675,608,1674,1674,1676,1675,1676,1674,1673,1677,1678,1679,1678,1677,1680,1659,1661,1677,1659,1677,1679,1659,1633,1637,1633,1659,1679,1679,1636,1633,1636,1679,1678,1681,1682,1683,1682,1681,1684,1684,1645,1682,1645,1684,1643,1671,1643,1684,1643,1671,1648,1671,1681,1672,1681,1671,1684,1678,1641,1636,1641,1678,1685,1685,1642,1641,1642,1685,1686,1687,1686,1685,1686,1687,1688,1680,1685,1678,1685,1680,1687,1682,1650,1689,1650,1682,1645,1683,1689,1690,1689,1683,1682,1690,1691,1692,1691,1690,1689,1689,1652,1691,1652,1689,1650,1693,1694,1695,1694,1693,1696,1642,1695,1640,1695,1642,1693,1640,786,769,786,1640,1695,1695,789,786,789,1695,1694,1697,1698,1699,1698,1697,1700,1688,1699,1686,1699,1688,1697,1686,1693,1642,1693,1686,1699,1699,1696,1693,1696,1699,1698,1701,1702,1703,1702,1701,1704,1704,798,1702,798,1704,796,1651,796,1704,796,1651,778,1652,1704,1701,1704,1652,1651,1705,1706,1707,1706,1705,1708,1708,1703,1706,1703,1708,1701,1691,1701,1708,1701,1691,1652,1692,1708,1705,1708,1692,1691,1709,1710,1711,1710,1709,1712,1696,1711,1694,1711,1696,1709,1694,807,789,807,1694,1711,808,1711,1710,1711,808,807,1713,1714,1715,1714,1713,1716,1716,818,1714,818,1716,816,1702,816,1716,816,1702,798,1703,1716,1713,1716,1703,1702,1698,1709,1696,1709,1698,1717,1717,1712,1709,1712,1717,1718,1718,1719,1720,1719,1718,1717,1700,1717,1698,1717,1700,1719,1706,1713,1721,1713,1706,1703,1707,1721,1722,1721,1707,1706,1722,1723,1724,1723,1722,1721,1721,1715,1723,1715,1721,1713,1725,1712,1726,1712,1725,1710,827,1710,1725,1710,827,808,1727,827,1725,827,1727,828,1728,1725,1726,1725,1728,1727,1729,1715,1730,1715,1714,1730,1731,1730,1732,1730,1731,1729,1732,836,838,836,1732,1730,1730,1714,836,1714,818,836,1733,1734,1735,1735,1734,1736,1734,1720,1736,1720,1734,1718,1718,1726,1712,1726,1718,1734,1728,1726,1733,1733,1726,1734,1737,1738,1739,1737,1739,1740,1740,1739,1729,1740,1729,1731,1723,1729,1739,1729,1723,1715,1724,1739,1738,1739,1724,1723,1741,1727,1728,1727,1741,1742,1742,828,1727,828,1742,849,849,1743,847,1743,849,1742,1742,1744,1743,1744,1742,1741,1745,1732,1746,1732,1745,1731,1747,1746,1748,1746,1747,1745,1748,857,859,857,1748,1746,1746,838,857,838,1746,1732,1743,1749,1750,1749,1743,1744,847,1750,866,1750,847,1743,866,1751,869,1751,866,1750,1750,1752,1751,1752,1750,1749,1753,1748,1754,1748,1753,1747,1755,1754,1756,1754,1755,1753,1756,876,878,876,1756,1754,1754,859,876,859,1754,1748,1751,1757,1758,1757,1751,1752,869,1758,886,1758,869,1751,886,1759,889,1759,886,1758,1758,1760,1759,1760,1758,1757,1756,1761,1755,1761,1756,1762,1762,1763,1761,1763,1762,1764,896,1764,1762,1764,896,898,878,1762,1756,1762,878,896,1765,1759,1760,1759,1765,1766,1766,889,1759,889,1766,906,1767,906,1766,906,1767,909,1768,1766,1765,1766,1768,1767,1764,1769,1763,1769,1764,1770,1770,1771,1769,1771,1770,1772,916,1772,1770,1772,916,918,898,1770,1764,1770,898,916,1773,1767,1768,1767,1773,1774,1774,909,1767,909,1774,926,1775,926,1774,926,1775,929,1776,1774,1773,1774,1776,1775,1777,1772,1778,1772,1777,1771,1779,1778,1780,1778,1779,1777,1780,936,938,936,1780,1778,1778,918,936,918,1778,1772,1781,1775,1776,1775,1781,1782,1782,929,1775,929,1782,946,1783,949,1782,1782,949,946,1784,1783,1781,1781,1783,1782,1785,1780,1786,1780,1785,1779,1787,1785,1788,1785,1786,1788,1788,1786,958,1786,956,958,1786,938,956,938,1786,1780,1789,1783,1784,1783,1789,1790,966,1783,1790,1783,966,949,1791,966,1790,966,1791,969,1792,1790,1789,1790,1792,1791,1793,1788,1794,1788,1793,1787,1795,1794,1796,1794,1795,1793,1796,976,978,976,1796,1794,1794,1788,976,1788,958,976,1797,987,1798,987,1797,988,1799,1798,1800,1798,1799,1797,1800,1791,1792,1791,1800,1798,1798,969,1791,969,1798,987,1801,997,999,997,1801,1802,1802,978,997,978,1802,1796,1803,1796,1802,1796,1803,1795,1804,1802,1801,1802,1804,1803,1805,1797,1799,1797,1805,1806,1806,988,1797,988,1806,1160,1807,1160,1806,1160,1807,1163,1808,1806,1805,1806,1808,1807,1809,1801,1810,1801,1809,1804,1808,1810,1807,1810,1808,1809,1807,1164,1163,1164,1807,1810,1810,999,1164,999,1810,1801,1811,1666,1812,1666,1811,1665,1813,1812,1814,1812,1813,1811,1814,592,594,592,1814,1812,1812,593,592,593,1812,1666,1675,1815,1816,1815,1675,1676,605,1816,604,1816,605,1675,604,1817,603,1817,604,1816,1816,1818,1817,1818,1816,1815,1819,1814,1820,1814,1819,1813,1821,1820,1822,1820,1821,1819,1822,756,731,756,1822,1820,1820,594,756,594,1820,1814,1817,1823,1824,1823,1817,1818,603,1824,758,1824,603,1817,758,1825,740,1825,758,1824,1824,1826,1825,1826,1824,1823,1827,731,728,731,1827,1822,1828,1822,1827,1822,1828,1821,1829,1827,1830,1827,1829,1828,724,1827,728,1827,724,1830,738,1825,1831,1825,738,740,737,1831,1832,1831,737,738,1832,1831,1833,1831,1834,1833,1831,1825,1834,1825,1826,1834,725,1830,724,1830,725,1835,1836,1830,1835,1830,1836,1829,1837,1836,1835,1836,1837,1838,727,1835,725,1835,727,1837,735,1832,1839,1832,735,737,736,1839,1840,1839,736,735,1840,1841,1842,1841,1840,1839,1839,1832,1841,1832,1833,1841,743,1837,727,1837,743,1843,1843,1838,1837,1838,1843,1844,1845,1844,1843,1844,1845,1846,745,1843,743,1843,745,1845,746,1840,1847,1840,746,736,745,1847,1845,1847,745,746,1848,1845,1847,1845,1848,1846,1847,1842,1848,1842,1847,1840,1849,1850,1851,1850,1849,1852,1844,1846,1849,1844,1849,1851,1844,1853,1838,1853,1844,1851,1851,1854,1853,1854,1851,1850,1849,1855,1852,1855,1849,1856,1856,1857,1855,1857,1856,1858,1848,1858,1856,1858,1848,1842,1846,1856,1849,1856,1846,1848,1859,1677,1661,1677,1859,1860,1860,1680,1677,1680,1860,1861,1862,1861,1860,1861,1862,1863,1862,1859,1864,1859,1862,1860,1865,1866,1867,1866,1865,1868,1863,1867,1861,1867,1863,1865,1861,1687,1680,1687,1861,1867,1867,1688,1687,1688,1867,1866,1869,1681,1870,1681,1869,1672,1871,1872,1869,1871,1869,1870,1871,1873,1874,1873,1871,1870,1870,1683,1873,1683,1870,1681,1875,1876,1877,1876,1875,1878,1878,1692,1876,1692,1878,1690,1873,1690,1878,1690,1873,1683,1874,1878,1875,1878,1874,1873,1879,1880,1881,1880,1879,1882,1881,1883,1879,1883,1881,1884,1884,1663,1665,1663,1884,1881,1881,1662,1663,1662,1881,1880,1880,1882,1885,1882,1886,1885,1662,1880,1660,1880,1885,1660,1660,1859,1661,1859,1660,1885,1885,1864,1859,1864,1885,1886,1887,1888,1889,1888,1887,1890,1669,1889,1673,1889,1669,1887,1673,1891,1676,1891,1673,1889,1889,1892,1891,1892,1889,1888,1893,1890,1887,1890,1893,1894,1893,1872,1894,1872,1893,1869,1670,1869,1893,1869,1670,1672,1670,1887,1669,1887,1670,1893,1895,1896,1897,1896,1895,1898,1852,1897,1850,1897,1852,1895,1850,1899,1854,1899,1850,1897,1897,1900,1899,1900,1897,1896,1895,1901,1898,1901,1895,1902,1902,1903,1901,1903,1902,1904,1855,1904,1902,1904,1855,1857,1852,1902,1895,1902,1852,1855,1853,1905,1906,1905,1853,1854,1838,1906,1836,1906,1838,1853,1836,1907,1829,1907,1836,1906,1906,1908,1907,1908,1906,1905,1899,1909,1910,1909,1899,1900,1854,1910,1905,1910,1854,1899,1905,1911,1908,1911,1905,1910,1910,1912,1911,1912,1910,1909,1858,1913,1857,1913,1858,1914,1914,1915,1913,1915,1914,1916,1841,1916,1914,1916,1841,1833,1842,1914,1858,1914,1842,1841,1904,1917,1903,1917,1904,1918,1918,1919,1917,1919,1918,1920,1913,1920,1918,1920,1913,1915,1857,1918,1904,1918,1857,1913,1921,1922,1923,1922,1921,1924,1908,1923,1907,1923,1908,1921,1907,1828,1829,1828,1907,1923,1923,1821,1828,1821,1923,1922,1922,1819,1821,1819,1922,1925,1925,1813,1819,1813,1925,1926,1927,1926,1925,1926,1927,1928,1924,1925,1922,1925,1924,1927,1929,1930,1931,1930,1929,1932,1826,1931,1834,1931,1826,1929,1834,1916,1833,1916,1834,1931,1931,1915,1916,1915,1931,1930,1823,1929,1826,1929,1823,1933,1933,1932,1929,1932,1933,1934,1935,1934,1933,1934,1935,1936,1818,1933,1823,1933,1818,1935,1937,1938,1863,1937,1863,1862,1939,1940,1938,1939,1938,1937,1941,1939,1937,1941,1937,1942,1942,1937,1862,1942,1862,1864,1943,1944,1945,1944,1943,1946,1940,1945,1938,1945,1940,1943,1938,1865,1863,1865,1938,1945,1945,1868,1865,1868,1945,1944,1947,1874,1948,1874,1947,1871,1949,1871,1947,1871,1949,1872,1950,1947,1951,1947,1950,1949,1951,1948,1952,1948,1951,1947,1953,1954,1955,1954,1953,1956,1956,1877,1954,1877,1956,1875,1948,1875,1956,1875,1948,1874,1952,1956,1953,1956,1952,1948,1957,1883,1884,1883,1957,1958,1957,1928,1958,1928,1957,1926,1926,1811,1813,1811,1926,1957,1957,1665,1811,1665,1957,1884,1959,1891,1892,1959,1892,1960,1676,1959,1815,1959,1676,1891,1815,1935,1818,1935,1815,1959,1959,1936,1935,1936,1959,1960,1961,1962,1963,1962,1961,1964,1898,1963,1896,1963,1898,1961,1896,1965,1900,1965,1896,1963,1963,1966,1965,1966,1963,1962,1961,1967,1964,1967,1961,1968,1968,1969,1967,1969,1968,1970,1901,1970,1968,1970,1901,1903,1898,1968,1961,1968,1898,1901,1965,1971,1972,1971,1965,1966,1900,1972,1909,1972,1900,1965,1909,1973,1912,1973,1909,1972,1972,1974,1973,1974,1972,1971,1975,1973,1976,1973,1975,1912,1977,1976,1978,1976,1977,1975,1978,1979,1980,1979,1978,1976,1976,1974,1979,1974,1976,1973,1970,1981,1969,1981,1970,1982,1982,1983,1981,1983,1982,1984,1917,1984,1982,1984,1917,1919,1903,1982,1970,1982,1903,1917,1985,1984,1919,1984,1985,1986,1986,1983,1984,1983,1986,1987,1988,1987,1986,1987,1988,1989,1990,1986,1985,1986,1990,1988,1991,1978,1992,1978,1991,1977,1993,1992,1994,1992,1993,1991,1994,1995,1996,1995,1994,1992,1992,1980,1995,1980,1992,1978,1997,1988,1990,1988,1997,1998,1998,1989,1988,1989,1998,1999,2000,1999,1998,1999,2000,2001,2002,1998,1997,1998,2002,2000,1958,2003,1883,2003,1958,2004,2004,2005,2003,2005,2004,2006,2007,1993,2004,2004,1993,2006,1928,2007,1958,1958,2007,2004,2005,2006,2008,2005,2008,2009,2008,2010,2009,2010,2008,2011,1994,2011,2008,2011,1994,1996,2006,1993,1994,2006,1994,2008,2012,1960,1892,1960,2012,2013,1936,1960,2014,1960,2013,2014,2014,2013,2002,2013,2015,2002,2016,2013,2012,2013,2016,2015,2017,2018,2016,2016,2018,2015,2018,2000,2015,2002,2015,2000,2019,2000,2018,2000,2019,2001,2020,2018,2017,2018,2020,2019,2021,1882,2022,1882,1879,2022,2022,2023,2021,2023,2022,2024,2003,2024,2022,2024,2003,2005,1879,1883,2003,1879,2003,2022,2024,2025,2023,2025,2024,2026,2026,2027,2025,2027,2026,2028,2010,2026,2009,2026,2010,2028,2005,2026,2024,2026,2005,2009,2029,1890,2030,1890,2029,1888,2029,2012,1888,1888,2012,1892,2012,2031,2016,2031,2012,2029,2029,2032,2031,2032,2029,2030,2031,2033,2034,2033,2031,2032,2016,2034,2017,2034,2016,2031,2017,2034,2020,2034,2035,2020,2034,2036,2035,2036,2034,2033,2037,2038,2039,2038,2037,2040,2037,2041,2042,2041,2037,2039,2039,2021,2023,2039,2023,2041,2021,2039,2038,2038,1882,2021,2041,2043,2042,2043,2041,2044,2044,2045,2043,2045,2044,2046,2025,2046,2044,2046,2025,2027,2023,2044,2041,2044,2023,2025,2047,2048,2049,2048,2047,2050,2030,2047,2049,2047,2030,1890,2051,2032,2049,2030,2049,2032,2048,2051,2049,2051,2048,2052,2053,2051,2052,2051,2053,2054,2054,2032,2051,2032,2054,2033,2055,2033,2054,2033,2055,2036,2056,2054,2053,2054,2056,2055,1886,1942,1864,1942,1886,2057,1941,2057,2058,2057,1941,1942,2038,2058,2057,2058,2038,2040,2038,1886,1882,1886,2038,2057,2059,2060,2061,2059,2061,2062,2060,2063,2064,2063,2060,2059,2064,2065,2066,2065,2064,2063,2067,2066,2065,2066,2067,2068,2069,2070,2071,2070,2069,2072,2073,2071,2074,2071,2073,2069,2075,2074,2076,2074,2075,2073,2077,2076,2078,2076,2077,2075,1894,1949,2079,1949,1894,1872,2047,1890,1894,1894,2079,2047,2047,2080,2050,2080,2047,2079,1950,2079,1949,2079,1950,2080,2081,2082,2083,2082,2081,2084,2084,2085,2082,2085,2084,2086,2087,2088,2089,2088,2087,2090,2089,2091,2092,2091,2089,2088,2093,2068,2067,2068,2093,2094,2081,2094,2093,2094,2081,2083,2095,2078,2096,2078,2095,2077,2087,2096,2090,2096,2087,2095,1962,2097,1966,2097,1962,2098,2098,2099,2097,2099,2098,2100,2101,2100,2098,2100,2101,2102,1964,2098,1962,2098,1964,2101,1967,2103,2104,2103,1967,1969,2104,1964,1967,1964,2104,2101,2105,2101,2104,2101,2105,2102,2104,2106,2105,2106,2104,2103,1971,2107,1974,2107,1971,2108,2108,2109,2107,2109,2108,2110,2097,2110,2108,2110,2097,2099,1966,2108,1971,2108,1966,2097,1981,2111,2112,2111,1981,1983,1969,2112,2103,2112,1969,1981,2103,2113,2106,2113,2103,2112,2112,2114,2113,2114,2112,2111,2100,2115,2099,2115,2100,2116,2116,2117,2115,2117,2116,2118,2119,2118,2116,2118,2119,2120,2102,2116,2100,2116,2102,2119,2105,2121,2122,2121,2105,2106,2122,2102,2105,2102,2122,2119,2119,2123,2120,2123,2119,2122,2122,2124,2123,2124,2122,2121,2110,2125,2109,2125,2110,2126,2126,2127,2125,2125,2127,2128,2115,2127,2126,2127,2115,2117,2099,2126,2110,2126,2099,2115,2113,2129,2130,2129,2113,2114,2106,2130,2121,2130,2106,2113,2121,2131,2124,2131,2121,2130,2130,2129,2131,2129,2132,2131,2107,2133,1974,1979,1974,2133,1980,2133,2134,2133,1980,1979,2134,2133,2135,2133,2136,2135,2133,2107,2136,2107,2109,2136,2136,2109,2137,2109,2125,2137,2135,2136,2138,2136,2137,2138,2138,2139,2140,2139,2138,2137,2137,2128,2139,2128,2137,2125,1983,1987,2141,1983,2141,2111,2141,2142,2111,2111,2142,2114,2143,2141,2144,2141,2143,2142,1989,2141,1987,2141,1989,2144,2145,2114,2142,2114,2145,2129,2145,2132,2129,2132,2145,2146,2147,2146,2145,2146,2147,2148,2147,2142,2143,2142,2147,2145,1995,2134,2149,2134,1995,1980,1996,1995,2150,1995,2149,2150,2150,2149,2151,2149,2152,2151,2149,2134,2152,2134,2135,2152,2152,2135,2153,2135,2138,2153,2151,2152,2154,2154,2152,2153,2154,2155,2156,2155,2154,2153,2153,2140,2155,2140,2153,2138,1999,2144,1989,2144,1999,2157,2158,2144,2157,2144,2158,2143,2159,2157,2160,2157,2159,2158,2160,1999,2001,1999,2160,2157,2161,2143,2158,2143,2161,2147,2161,2148,2147,2148,2161,2162,2163,2162,2161,2162,2163,2164,2163,2158,2159,2158,2163,2161,2165,2166,2167,2168,2167,2166,2166,2150,2168,2168,2150,2151,1996,2166,2011,2166,1996,2150,2010,2011,2165,2165,2011,2166,2168,2151,2169,2169,2151,2154,2167,2169,2170,2169,2167,2168,2170,2171,2172,2171,2170,2169,2169,2156,2171,2156,2169,2154,2173,2174,2175,2175,2176,2173,2019,2020,2174,2174,2173,2019,2001,2019,2173,2173,2160,2001,2160,2173,2176,2176,2159,2160,2177,2159,2176,2159,2177,2163,2177,2164,2163,2164,2177,2178,2178,2179,2180,2179,2178,2177,2177,2175,2179,2175,2177,2176,2028,2010,2181,2010,2165,2181,2181,2027,2028,2027,2181,2182,2183,2181,2184,2181,2183,2182,2165,2184,2181,2184,2165,2167,2184,2170,2185,2170,2184,2167,2183,2185,2186,2185,2183,2184,2186,2187,2188,2187,2186,2185,2185,2172,2187,2172,2185,2170,2189,2020,2035,2020,2189,2174,2174,2190,2175,2190,2174,2189,2191,2190,2189,2191,2189,2192,2036,2189,2035,2189,2036,2192,2179,2190,2193,2190,2179,2175,2180,2193,2194,2193,2180,2179,2194,2195,2196,2195,2194,2193,2193,2191,2195,2191,2193,2190,2197,2046,2198,2046,2197,2045,2199,2198,2200,2198,2199,2197,2200,2182,2183,2182,2200,2198,2027,2198,2046,2198,2027,2182,2201,2202,2203,2201,2203,2204,2205,2206,2207,2206,2205,2208,2200,2186,2202,2186,2200,2183,2199,2202,2201,2202,2199,2200,2209,2055,2056,2055,2209,2210,2036,2210,2192,2210,2036,2055,2192,2211,2191,2211,2192,2210,2210,2212,2211,2212,2210,2209,2213,2214,2215,2214,2213,2216,2216,2212,2214,2212,2216,2211,2195,2211,2216,2211,2195,2191,2217,2218,2219,2218,2217,2220,2221,2222,2223,2222,2221,2224,2197,2201,2225,2201,2197,2199,2226,2227,2228,2228,2229,2226,2062,2224,2221,2224,2062,2061,2230,2231,2232,2233,2232,2231,2230,2072,2231,2072,2230,2070,2234,2235,2236,2236,2237,2234,2237,2236,2223,2223,2222,2237,2238,2239,2240,2239,2238,2241,2242,2241,2238,2241,2242,2243,2244,2245,2246,2245,2244,2247,2248,2247,2249,2247,2248,2245,2250,2249,2251,2249,2250,2248,2252,2251,2253,2251,2252,2250,2253,2254,2255,2254,2253,2251,2251,2256,2254,2256,2251,2249,2257,2258,2259,2259,2258,2260,2261,2262,2263,2262,2261,2264,2265,2264,2261,2264,2265,2266,2259,2260,2267,2267,2260,2268,2263,2269,2270,2269,2263,2262,2271,2270,2272,2270,2271,2263,2272,2273,2274,2273,2272,2270,2270,2275,2273,2275,2270,2269,2276,2277,2278,2277,2276,2279,2280,2279,2276,2279,2280,2281,2253,2282,2252,2282,2253,2283,2283,2284,2282,2284,2283,2285,2286,2287,2288,2288,2287,2289,2290,2291,2292,2291,2290,2293,2273,2293,2290,2293,2273,2275,2288,2289,2294,2294,2289,2295,2285,2296,2284,2296,2285,2297,2297,2298,2296,2298,2297,2299,2299,2300,2301,2300,2299,2297,2297,2302,2300,2302,2297,2285,2292,2303,2304,2303,2292,2291,2305,2304,2306,2304,2305,2292,2306,2307,2308,2307,2306,2304,2304,2309,2307,2309,2304,2303,2310,2311,2312,2311,2310,2313,2314,2315,2311,2311,2313,2314,2301,2314,2313,2313,2299,2301,2299,2310,2298,2310,2299,2313,2316,2317,2318,2318,2317,2319,2309,2316,2307,2307,2316,2318,2320,2308,2318,2307,2318,2308,2321,2320,2319,2318,2319,2320,2322,2323,2324,2323,2322,2325,2326,2325,2327,2325,2326,2323,2328,2325,2329,2325,2328,2327,2330,2329,2322,2322,2329,2325,2331,2332,2333,2332,2334,2333,2335,2336,2331,2331,2333,2335,2335,2327,2328,2327,2335,2333,2327,2333,2334,2334,2326,2327,2337,2338,2339,2338,2337,2340,2341,2339,2342,2339,2341,2337,2342,2323,2326,2323,2342,2339,2339,2324,2323,2324,2339,2338,2343,2342,2344,2342,2343,2341,2345,2344,2346,2344,2345,2343,2346,2334,2332,2334,2346,2344,2344,2326,2334,2326,2344,2342,2347,2348,2349,2348,2347,2350,2351,2352,2347,2347,2349,2351,2353,2351,2349,2349,2354,2353,2349,2355,2354,2355,2349,2348,2356,2357,2358,2358,2357,2359,2354,2359,2357,2359,2354,2355,2354,2360,2353,2360,2354,2357,2361,2360,2356,2356,2360,2357,2362,2363,2364,2363,2362,2365,2350,2365,2348,2365,2350,2363,2348,2366,2355,2366,2348,2365,2365,2367,2366,2367,2365,2362,2366,2368,2369,2368,2366,2367,2355,2369,2359,2369,2355,2366,2359,2370,2358,2370,2359,2369,2369,2371,2370,2371,2369,2368,2372,2337,2341,2337,2372,2373,2373,2340,2337,2340,2373,2374,2375,2374,2373,2374,2375,2376,2377,2373,2372,2373,2377,2375,2378,2343,2345,2343,2378,2379,2379,2341,2343,2341,2379,2372,2380,2372,2379,2372,2380,2377,2381,2379,2378,2379,2381,2380,2382,2362,2383,2362,2382,2367,2384,2383,2385,2383,2384,2382,2385,2386,2387,2386,2385,2383,2383,2364,2386,2364,2383,2362,2368,2388,2371,2388,2368,2389,2389,2390,2388,2390,2389,2391,2391,2382,2384,2382,2391,2389,2367,2389,2368,2389,2367,2382,2392,2393,2394,2393,2392,2395,2396,2394,2397,2394,2396,2392,2397,2398,2399,2398,2397,2394,2394,2400,2398,2400,2394,2393,2393,2401,2400,2401,2393,2402,2402,2403,2401,2403,2402,2404,2405,2404,2402,2404,2405,2406,2395,2402,2393,2402,2395,2405,2407,2408,2409,2408,2407,2410,2410,2400,2408,2400,2410,2398,2411,2398,2410,2398,2411,2399,2412,2410,2407,2410,2412,2411,2408,2401,2413,2401,2408,2400,2409,2413,2414,2413,2409,2408,2414,2413,2415,2413,2416,2415,2413,2403,2416,2403,2413,2401,2417,2418,2419,2418,2417,2420,2420,2421,2418,2421,2420,2422,2423,2422,2420,2422,2423,2424,2425,2420,2417,2420,2425,2423,2418,2426,2427,2426,2418,2421,2419,2427,2428,2427,2419,2418,2428,2392,2396,2392,2428,2427,2427,2395,2392,2395,2427,2426,2250,2429,2248,2248,2429,2430,2429,2419,2430,2419,2429,2417,2431,2425,2429,2429,2425,2417,2431,2250,2252,2250,2431,2429,2430,2428,2432,2428,2430,2419,2245,2248,2430,2245,2430,2432,2246,2245,2432,2246,2432,2433,2432,2396,2433,2396,2432,2428,2434,2435,2436,2435,2434,2437,2438,2436,2439,2436,2438,2434,2440,2439,2436,2439,2440,2441,2436,2442,2440,2442,2436,2435,2435,2443,2442,2443,2435,2444,2444,2409,2443,2409,2444,2407,2445,2407,2444,2407,2445,2412,2437,2444,2435,2444,2437,2445,2269,2262,2446,2262,2447,2446,2275,2269,2448,2269,2446,2448,2448,2446,2438,2446,2434,2438,2446,2437,2434,2437,2446,2447,2447,2445,2437,2445,2447,2449,2449,2412,2445,2412,2449,2450,2266,2449,2264,2449,2266,2450,2264,2447,2262,2447,2264,2449,2451,2452,2453,2452,2451,2454,2455,2453,2456,2453,2455,2451,2456,2423,2425,2423,2456,2453,2453,2424,2423,2424,2453,2452,2431,2456,2425,2456,2431,2457,2457,2455,2456,2455,2457,2458,2282,2458,2457,2458,2282,2284,2252,2457,2431,2457,2252,2282,2459,2460,2461,2460,2459,2462,2441,2461,2439,2461,2441,2459,2439,2463,2438,2463,2439,2461,2461,2464,2463,2464,2461,2460,2448,2463,2465,2463,2448,2438,2275,2465,2293,2465,2275,2448,2293,2466,2291,2466,2293,2465,2465,2464,2466,2464,2465,2463,2377,2467,2375,2467,2377,2468,2375,2469,2376,2469,2375,2467,2469,2451,2455,2451,2469,2467,2467,2454,2451,2454,2467,2468,2376,2470,2471,2470,2376,2469,2296,2298,2471,2296,2471,2470,2284,2296,2470,2284,2470,2458,2458,2470,2469,2458,2469,2455,2472,2385,2473,2385,2472,2384,2462,2473,2460,2473,2462,2472,2460,2474,2464,2474,2460,2473,2385,2474,2473,2474,2385,2387,2475,2387,2476,2387,2475,2474,2466,2474,2475,2474,2466,2464,2291,2475,2303,2475,2291,2466,2303,2476,2309,2476,2303,2475,2477,2471,2298,2298,2310,2477,2374,2376,2471,2471,2477,2374,2374,2478,2340,2478,2374,2477,2478,2477,2310,2310,2312,2478,2476,2479,2309,2309,2479,2316,2479,2480,2316,2316,2480,2317,2386,2480,2479,2480,2386,2364,2386,2476,2387,2476,2386,2479,2481,2330,2482,2330,2322,2482,2312,2481,2478,2481,2482,2478,2340,2482,2338,2340,2478,2482,2482,2322,2338,2338,2322,2324,2483,2352,2484,2352,2483,2347,2363,2347,2483,2347,2363,2350,2364,2483,2480,2364,2363,2483,2480,2484,2317,2484,2480,2483,2433,2397,2485,2397,2433,2396,2486,2246,2433,2486,2433,2485,2487,2486,2485,2487,2485,2488,2485,2399,2488,2399,2485,2397,2450,2411,2412,2411,2450,2489,2489,2399,2411,2399,2489,2488,2487,2489,2490,2489,2487,2488,2490,2450,2266,2450,2490,2489,2491,2243,2242,2243,2491,2492,2493,2492,2491,2492,2493,2494,2495,2486,2487,2486,2495,2496,2496,2246,2486,2246,2496,2244,2267,2497,2498,2497,2267,2268,2499,2266,2265,2266,2499,2490,2495,2490,2499,2490,2495,2487,2498,2497,2493,2493,2497,2494,2500,2501,2502,2501,2500,2503,2503,2504,2501,2504,2503,2505,2440,2505,2503,2505,2440,2442,2441,2503,2500,2503,2441,2440,2506,2507,2508,2507,2506,2509,2509,2510,2507,2510,2509,2511,2501,2511,2509,2511,2501,2504,2502,2509,2506,2509,2502,2501,2443,2414,2512,2414,2443,2409,2442,2512,2505,2512,2442,2443,2505,2513,2504,2513,2505,2512,2512,2414,2513,2414,2415,2513,2511,2514,2510,2514,2511,2515,2516,2514,2515,2514,2516,2517,2415,2515,2513,2515,2415,2516,2513,2511,2504,2511,2513,2515,2518,2519,2520,2519,2518,2521,2424,2520,2422,2520,2424,2518,2422,2522,2421,2522,2422,2520,2520,2523,2522,2523,2520,2519,2524,2525,2526,2525,2524,2527,2521,2526,2519,2526,2521,2524,2519,2528,2523,2528,2519,2526,2526,2529,2528,2529,2526,2525,2426,2405,2395,2405,2426,2530,2530,2406,2405,2406,2530,2531,2522,2531,2530,2531,2522,2523,2421,2530,2426,2530,2421,2522,2528,2532,2533,2532,2528,2529,2531,2523,2528,2531,2528,2533,2406,2531,2533,2406,2533,2534,2534,2533,2532,2534,2532,2535,2536,2537,2538,2537,2536,2539,2403,2538,2416,2538,2403,2536,2416,2516,2415,2516,2416,2538,2538,2517,2516,2517,2538,2537,2536,2540,2539,2540,2536,2541,2541,2535,2540,2535,2541,2534,2404,2534,2541,2534,2404,2406,2403,2541,2536,2541,2403,2404,2500,2459,2441,2459,2500,2542,2542,2462,2459,2462,2542,2543,2544,2543,2542,2543,2544,2545,2502,2542,2500,2542,2502,2544,2452,2518,2424,2518,2452,2546,2546,2521,2518,2521,2546,2547,2548,2547,2546,2547,2548,2549,2454,2546,2452,2546,2454,2548,2391,2550,2390,2550,2391,2551,2543,2550,2551,2550,2543,2545,2462,2551,2472,2551,2462,2543,2551,2384,2472,2384,2551,2391,2552,2380,2381,2380,2552,2553,2553,2377,2380,2377,2553,2468,2454,2468,2553,2454,2553,2548,2548,2553,2552,2548,2552,2549,2554,2555,2556,2555,2554,2557,2529,2556,2532,2556,2529,2554,2532,2558,2535,2558,2532,2556,2556,2559,2558,2559,2556,2555,2560,2561,2562,2561,2560,2563,2527,2562,2525,2562,2527,2560,2525,2554,2529,2554,2525,2562,2562,2557,2554,2557,2562,2561,2564,2565,2566,2565,2564,2567,2567,2568,2565,2568,2567,2569,2514,2569,2567,2569,2514,2517,2510,2567,2564,2567,2510,2514,2570,2571,2572,2571,2570,2573,2573,2566,2571,2566,2573,2564,2507,2564,2573,2564,2507,2510,2508,2573,2570,2573,2508,2507,2555,2574,2559,2574,2555,2575,2575,2576,2574,2576,2575,2577,2578,2577,2575,2577,2578,2579,2557,2575,2555,2575,2557,2578,2561,2578,2557,2578,2561,2580,2580,2579,2578,2579,2580,2581,2582,2581,2580,2581,2582,2583,2563,2580,2561,2580,2563,2582,2565,2584,2585,2584,2565,2568,2566,2585,2586,2585,2566,2565,2586,2587,2588,2587,2586,2585,2585,2589,2587,2589,2585,2584,2571,2586,2590,2586,2571,2566,2572,2590,2591,2590,2572,2571,2591,2592,2593,2592,2591,2590,2590,2588,2592,2588,2590,2586,2594,2595,2596,2595,2594,2597,2597,2598,2595,2598,2597,2599,2574,2599,2597,2599,2574,2576,2559,2597,2594,2597,2559,2574,2600,2601,2602,2601,2600,2603,2576,2602,2599,2602,2576,2600,2599,2604,2598,2604,2599,2602,2602,2601,2604,2604,2601,2605,2606,2595,2607,2595,2606,2596,2568,2607,2584,2607,2568,2606,2584,2608,2589,2608,2584,2607,2607,2598,2608,2598,2607,2595,2609,2610,2611,2610,2609,2612,2604,2610,2612,2610,2604,2605,2608,2604,2612,2604,2608,2598,2589,2612,2609,2612,2589,2608,2558,2594,2613,2594,2558,2559,2535,2613,2540,2613,2535,2558,2540,2614,2539,2614,2540,2613,2613,2596,2614,2596,2613,2594,2615,2616,2617,2616,2615,2618,2618,2619,2616,2619,2618,2620,2621,2617,2622,2617,2621,2615,2621,2623,2624,2623,2621,2622,2625,2626,2627,2626,2625,2628,2625,2629,2628,2629,2625,2630,2631,165,2632,2632,2633,2631,2633,2634,2631,2634,2633,2635,2636,2637,2638,2638,2637,2639,2637,2640,2639,2639,2640,2641,2636,2642,2643,2642,2636,2638,2644,2642,2645,2642,2644,2643,2646,2647,2648,2648,2647,2649,2648,2650,2651,2650,2648,2649,2652,2653,177,2653,2652,2654,2655,2654,2652,2654,2655,2656,2657,2658,2659,2658,2657,2660,2661,2659,2658,2659,2661,2662,2663,2664,2665,2664,2666,2665,2667,2666,2664,2666,2667,2668,2669,2670,2671,2671,2670,2672,2670,2669,2235,2235,2234,2670,2673,2674,2675,2674,2673,2676,2676,2233,2674,2233,2676,2232,2677,2678,2679,2678,2677,2680,2678,2680,2681,2682,2681,2680,2683,2684,2685,2684,2683,2686,2685,2687,2683,2688,2687,2685,2689,2690,2691,2690,2689,2692,2690,2675,2691,2675,2690,2673,2693,2694,2695,2694,2693,2696,2693,2672,2696,2672,2693,2671,2697,2698,2699,2698,2697,2700,2701,2699,2702,2699,2701,2697,2702,2703,2704,2703,2702,2699,2699,2705,2703,2705,2699,2698,2706,2707,2708,2707,2706,2709,2710,2708,2711,2708,2710,2706,2711,2697,2701,2697,2711,2708,2708,2700,2697,2700,2708,2707,2712,2713,2714,2712,2714,2715,2709,2712,2707,2712,2709,2713,2707,2716,2700,2716,2707,2712,2712,2717,2716,2717,2712,2715,2718,2716,2717,2716,2718,2719,2700,2719,2698,2719,2700,2716,2720,2698,2719,2698,2720,2705,2721,2719,2718,2719,2721,2720,2722,2723,2724,2723,2722,2725,2724,2726,2722,2726,2724,2727,2728,2727,2724,2727,2728,2729,2724,2730,2728,2730,2724,2723,2731,2732,2733,2732,2731,2734,2725,2733,2723,2733,2725,2731,2723,2735,2730,2735,2723,2733,2733,2736,2735,2736,2733,2732,2737,2738,2739,2738,2737,2740,2737,2741,2740,2741,2737,2742,2742,2731,2725,2731,2742,2737,2737,2734,2731,2734,2737,2739,2742,2743,2741,2743,2742,2744,2744,2745,2743,2745,2744,2746,2722,2746,2744,2746,2722,2726,2744,2725,2722,2725,2744,2742,2747,2715,2714,2715,2747,2748,2748,2717,2715,2717,2748,2749,2750,2749,2748,2749,2750,2751,2752,2748,2747,2748,2752,2750,2753,2717,2749,2717,2753,2718,2753,2721,2718,2721,2753,2754,2753,2755,2754,2755,2753,2756,2749,2756,2753,2756,2749,2751,2740,2757,2738,2757,2740,2758,2758,2759,2757,2759,2758,2760,2760,2761,2762,2761,2760,2758,2741,2758,2740,2758,2741,2761,2763,2761,2741,2763,2741,2743,2761,2764,2762,2764,2761,2763,2763,2765,2764,2765,2763,2766,2763,2745,2766,2745,2763,2743,2767,2768,2769,2768,2767,2770,2770,2714,2768,2714,2770,2747,2771,2747,2770,2747,2771,2752,2772,2770,2767,2770,2772,2771,2773,2774,2775,2774,2773,2776,2776,2777,2774,2777,2776,2778,2757,2778,2776,2778,2757,2759,2738,2776,2773,2776,2738,2757,2779,2750,2752,2750,2779,2780,2780,2751,2750,2751,2780,2781,2782,2781,2780,2781,2782,2783,2784,2780,2779,2780,2784,2782,2785,2751,2781,2751,2785,2756,2785,2755,2756,2755,2785,2786,2785,2787,2786,2787,2785,2788,2788,2781,2783,2781,2788,2785,2760,2789,2759,2789,2760,2790,2791,2790,2792,2790,2791,2789,2792,2793,2794,2793,2792,2790,2790,2762,2793,2762,2790,2760,2795,2793,2762,2762,2764,2795,2796,2794,2793,2796,2793,2795,2797,2796,2795,2795,2798,2797,2795,2765,2798,2765,2795,2764,2799,2782,2784,2799,2784,2800,2801,2783,2782,2801,2782,2799,2801,2799,2563,2563,2799,2582,2582,2799,2800,2582,2800,2583,2802,2788,2783,2802,2783,2801,2787,2802,2803,2802,2787,2788,2803,2560,2527,2560,2803,2802,2802,2563,2560,2563,2802,2801,2804,2791,2792,2791,2804,2805,2591,2805,2804,2805,2591,2593,2572,2804,2806,2804,2572,2591,2806,2792,2794,2792,2806,2804,2807,2794,2796,2794,2807,2806,2807,2572,2806,2572,2807,2570,2808,2570,2807,2570,2808,2508,2807,2797,2808,2797,2807,2796,2809,2803,2810,2803,2809,2787,2547,2549,2809,2547,2809,2810,2547,2524,2521,2524,2547,2810,2810,2527,2524,2527,2810,2803,2811,2808,2797,2808,2811,2812,2812,2508,2808,2508,2812,2506,2544,2506,2812,2506,2544,2502,2544,2811,2545,2811,2544,2812,2786,2813,2755,2813,2786,2814,2814,2381,2813,2381,2814,2552,2549,2552,2814,2549,2814,2809,2809,2814,2786,2809,2786,2787,2798,2815,2816,2815,2798,2765,2811,2798,2816,2798,2811,2797,2545,2816,2550,2816,2545,2811,2390,2816,2815,2816,2390,2550,2817,2721,2754,2721,2817,2818,2817,2345,2818,2345,2817,2378,2813,2378,2817,2378,2813,2381,2755,2817,2754,2817,2755,2813,2819,2766,2745,2819,2745,2820,2765,2819,2815,2819,2765,2766,2388,2815,2819,2815,2388,2390,2371,2819,2820,2819,2371,2388,2818,2720,2721,2720,2818,2821,2821,2705,2720,2705,2821,2822,2822,2346,2332,2346,2822,2821,2346,2821,2818,2818,2345,2346,2746,2820,2745,2820,2746,2823,2370,2820,2823,2820,2370,2371,2824,2358,2823,2823,2358,2370,2726,2823,2746,2823,2726,2824,2703,2822,2825,2822,2703,2705,2704,2825,2826,2825,2704,2703,2336,2826,2825,2825,2331,2336,2825,2822,2331,2822,2332,2331,2727,2824,2726,2824,2727,2827,2827,2356,2824,2824,2356,2358,2361,2827,2828,2827,2361,2356,2729,2827,2727,2827,2729,2828,2829,2830,2831,2830,2829,2832,2833,2834,2832,2832,2829,2833,2835,2836,128,2836,2835,2837,2831,2837,2835,2837,2831,2830,2838,2839,2840,2839,2841,2840,2692,2840,2841,2840,2692,2689,2842,2843,2844,2843,2842,2845,2843,2640,2844,2640,2843,2846,2847,2848,2849,2848,2847,2850,2846,2850,2851,2850,2846,2848,2852,129,2853,2853,2854,2852,2854,2849,2852,2849,2854,2847,2855,2856,2857,2857,2856,2858,2619,2856,2855,2856,2619,2833,2687,2859,2860,2859,2687,2861,2862,2860,2859,2860,2862,143,2863,2769,2229,2769,2863,2767,2863,2864,2767,2767,2864,2772,2865,2866,2863,2863,2866,2864,2865,2229,2228,2229,2865,2863,2867,2868,2775,2775,2774,2867,2869,2870,2868,2868,2867,2869,2871,2869,2867,2867,2872,2871,2872,2867,2774,2774,2777,2872,2873,2667,2874,2667,2873,2875,2874,2876,2873,2876,2874,142,139,2877,2878,139,2878,142,136,2879,2877,136,2877,139,2880,2881,2882,2880,2882,2883,2635,2880,2884,2880,2635,2881,2885,2886,2887,2888,2887,2886,2885,158,2886,158,2885,2889,146,2890,2891,2890,146,143,149,2891,2892,2891,149,146,2893,2894,2895,2894,2893,2896,2893,2656,2897,2656,2893,2895,2898,2899,2900,2899,2898,2901,2901,2898,156,2901,156,2902,2903,163,160,163,2903,2904,2889,160,158,160,2889,2903,2905,2906,2907,2906,2905,2908,2908,2909,2906,2909,2908,2910,1954,2910,2908,2910,1954,1877,1955,2908,2905,2908,1955,1954,2911,2912,2913,2912,2911,2914,1946,2913,1944,2913,1946,2911,1944,2915,1868,2915,1944,2913,2913,2916,2915,2916,2913,2912,1876,1705,2917,1705,1876,1692,1877,2917,2910,2917,1877,1876,2910,2918,2909,2918,2910,2917,2917,1707,2918,1707,2917,1705,1866,1697,1688,1697,1866,2919,2919,1700,1697,1700,2919,2920,2915,2920,2919,2920,2915,2916,1868,2919,1866,2919,1868,2915,2921,2922,2923,2922,2921,2924,2924,1724,2922,1724,2924,1722,2918,1722,2924,1722,2918,1707,2909,2924,2921,2924,2909,2918,2925,2926,2927,2926,2925,2928,2928,2916,2926,2916,2928,2920,2920,1719,1700,1719,2920,2928,1720,2928,2925,2928,1720,1719,2906,2921,2929,2921,2906,2909,2907,2929,2930,2929,2907,2906,2930,2931,2932,2931,2930,2929,2929,2923,2931,2923,2929,2921,2933,152,151,2933,151,2934,2902,156,152,2902,152,2933,2935,163,2904,2935,2936,163,2688,2936,2935,2688,2937,2936,2926,2912,2938,2912,2926,2916,2927,2938,2939,2938,2927,2926,2939,2940,2941,2940,2939,2938,2938,2914,2940,2914,2938,2912,2942,151,2943,151,2942,2934,2668,2943,2944,2943,2668,2942,2684,2679,2945,2945,2685,2684,2685,2945,2937,2937,2688,2685,2946,2947,2879,2946,2879,136,2883,2882,2947,2883,2947,2946,2948,2662,2661,2662,2948,2949,2949,2948,2950,2950,2948,2951,2952,2892,2953,2892,2952,149,2896,2953,2894,2953,2896,2952,2682,2954,2681,2954,2682,2955,2956,2954,2955,2954,2956,2957,2958,2959,2960,2959,2958,2961,2962,2960,2963,2960,2962,2958,2963,2964,2965,2964,2963,2960,2960,2966,2964,2966,2960,2959,2964,2967,2968,2967,2964,2966,2965,2968,2969,2968,2965,2964,2969,2970,2971,2970,2969,2968,2968,2972,2970,2972,2968,2967,2973,2974,2975,2974,2973,2976,2977,2975,2978,2975,2977,2973,2978,2979,2980,2979,2978,2975,2975,2981,2979,2981,2975,2974,2982,2978,2983,2978,2982,2977,2984,2983,2985,2983,2984,2982,2985,2986,2987,2986,2985,2983,2983,2980,2986,2980,2983,2978,2988,2961,2958,2961,2988,2989,2988,2990,2989,2990,2988,2991,2992,2988,2993,2988,2992,2991,2993,2958,2962,2958,2993,2988,2994,2965,2995,2965,2994,2963,2996,2963,2994,2963,2996,2962,2997,2994,2998,2994,2997,2996,2998,2995,2999,2995,2998,2994,3000,2962,2996,2962,3000,2993,3001,2993,3000,2993,3001,2992,3002,3000,3003,3000,3002,3001,3003,2996,2997,2996,3003,3000,2974,2976,3004,2976,3005,3004,2981,2974,3006,2974,3004,3006,3006,3004,3007,3004,3008,3007,3004,3009,3008,3009,3004,3005,3010,3011,2980,2980,2979,3010,3012,3013,3011,3011,3010,3012,3014,3012,3010,3010,3015,3014,3015,3010,2979,2979,2981,3015,3015,2981,3016,2981,3006,3016,3017,3014,3015,3015,3016,3017,3017,3016,3018,3016,3019,3018,3016,3006,3019,3006,3007,3019,3020,2992,3001,2992,3020,2227,3021,2227,3020,2227,3021,2228,3022,3023,3020,3020,3023,3021,3022,3001,3002,3001,3022,3020,3024,3025,3026,3026,3027,3024,3021,3023,3025,3025,3024,3021,2228,3021,3024,3024,2865,2228,2865,3024,3027,3027,2866,2865,3019,3007,3028,3007,3029,3028,3018,3019,3030,3019,3028,3030,3030,3028,3031,3028,3032,3031,3028,3029,3032,3029,2870,3032,3033,3034,3035,3034,3033,3036,2869,3036,3033,3036,2869,2871,2870,3033,3032,3033,2870,2869,3032,3035,3031,3035,3032,3033,3037,2999,3038,2999,2995,3038,3039,3037,3040,3037,3038,3040,3040,3038,2971,3038,2969,2971,3038,2995,2969,2995,2965,2969,3041,3013,3042,3013,3041,3011,2986,3011,3041,3011,2986,2980,2987,3041,3043,3041,2987,2986,3043,3042,3044,3042,3043,3041,3045,3046,3047,3046,3045,3048,3049,3047,3050,3047,3049,3045,3050,2864,2866,2864,3050,3047,3047,2772,2864,2772,3047,3046,3051,3050,3052,3050,3051,3049,3053,3052,3054,3052,3053,3051,3054,3027,3026,3027,3054,3052,3052,2866,3027,2866,3052,3050,3055,3056,3057,3056,3055,3058,2777,3057,2872,3057,2777,3055,2872,3059,2871,3059,2872,3057,3057,3060,3059,3060,3057,3056,3059,3061,3062,3061,3059,3060,2871,3062,3036,3062,2871,3059,3036,3063,3034,3063,3036,3062,3062,3064,3063,3064,3062,3061,3065,2779,3066,2779,3065,2784,3048,3066,3046,3066,3048,3065,3046,2771,2772,2771,3046,3066,3066,2752,2771,2752,3066,2779,2789,3067,3068,3067,2789,2791,2759,3068,2778,3068,2759,2789,2778,3055,2777,3055,2778,3068,3068,3058,3055,3058,3068,3067,3069,3070,3071,3070,3069,3072,3073,3071,3074,3071,3073,3069,3074,3045,3049,3045,3074,3071,3071,3048,3045,3048,3071,3070,3070,3065,3048,3065,3070,3075,3075,2784,3065,2784,3075,2800,2800,3076,2583,3076,2800,3075,3072,3075,3070,3075,3072,3076,3077,3078,3079,3078,3077,3080,3058,3079,3056,3079,3058,3077,3056,3081,3060,3081,3056,3079,3079,3082,3081,3082,3079,3078,3067,3077,3058,3077,3067,3083,3083,3080,3077,3080,3083,3084,2805,3084,3083,3084,2805,2593,2791,3083,3067,3083,2791,2805,3085,3069,3073,3069,3085,3086,3086,3072,3069,3072,3086,3087,3087,3088,3089,3088,3087,3086,3090,3086,3085,3086,3090,3088,3076,3087,3091,3087,3076,3072,2583,3091,2581,3091,2583,3076,2581,3092,2579,3092,2581,3091,3091,3089,3092,3089,3091,3087,3078,3093,3082,3093,3078,3094,3094,3095,3093,3095,3094,3096,3097,3096,3094,3096,3097,3098,3080,3094,3078,3094,3080,3097,3084,3097,3080,3097,3084,3099,3099,3098,3097,3098,3099,3100,2592,3100,3099,3100,2592,2588,2593,3099,3084,3099,2593,2592,3089,3088,3101,3089,3101,3102,3102,3101,3103,3102,3103,2603,3104,3105,3101,3101,3105,3103,3090,3104,3088,3088,3104,3101,3106,3107,3098,3096,3098,3107,3095,3096,3108,3096,3107,3108,3108,3107,3109,3107,3110,3109,2611,3110,3106,3107,3106,3110,3051,3111,3112,3111,3051,3053,3112,3049,3051,3049,3112,3074,3074,3113,3073,3113,3074,3112,3112,3114,3113,3114,3112,3111,3061,3115,3064,3115,3061,3116,3116,3117,3115,3117,3116,3118,3081,3118,3116,3118,3081,3082,3060,3116,3061,3116,3060,3081,3073,3119,3085,3119,3073,3120,3121,3085,3119,3085,3121,3090,3119,3122,3121,3122,3119,3123,3123,3119,3120,3123,3120,3124,3120,3125,3124,3125,3120,3126,3126,3127,3125,3127,3126,3128,3113,3128,3126,3128,3113,3114,3073,3113,3120,3120,3113,3126,3082,3129,3130,3129,3082,3093,3123,3130,3129,3130,3123,3124,3129,3122,3123,3122,3129,3131,3131,3129,3093,3131,3093,3095,3130,3125,3132,3125,3130,3124,3118,3082,3130,3130,3132,3118,3118,3133,3117,3133,3118,3132,3132,3127,3133,3127,3132,3125,3134,3121,3122,3121,3134,3135,3135,3090,3121,3090,3135,3104,3136,3104,3135,3104,3136,3105,3137,3135,3134,3135,3137,3136,3134,3131,3138,3131,3134,3122,3137,3138,3139,3138,3137,3134,3139,3108,3109,3108,3139,3138,3138,3095,3108,3095,3138,3131,3140,3136,3137,3136,3140,3141,3141,3105,3136,3105,3141,3103,2603,3141,2601,3141,2603,3103,2605,3141,3140,3141,2605,2601,3142,2632,167,167,2632,165,167,169,3142,169,3143,3142,2951,3144,2950,3144,2951,3145,3145,3146,3144,3146,3145,3147,3148,2665,2666,2665,3148,2660,2666,2944,3148,2944,2666,2668,175,2653,3149,2653,175,177,3149,176,175,176,3149,3150,3151,2957,2956,2957,3151,3152,3153,3152,3151,3152,3153,3154,3155,3156,3157,3156,3155,3158,3153,3157,3154,3157,3153,3155,3159,3160,3161,3160,3162,3161,3146,3147,3159,3146,3159,3161,3163,3164,2677,3163,2677,2686,3164,3165,3166,3165,3164,3163,126,128,3167,128,2836,3167,3168,126,3167,126,3168,127,3169,3168,3170,3168,3169,127,3160,3169,3162,3169,3170,3162,3171,129,131,129,3171,2853,3172,131,134,131,3172,3171,3173,3172,134,3172,3173,3174,3173,3158,3174,3158,3173,3156,3175,2706,2710,2706,3175,3176,3176,2709,2706,2709,3176,3177,2989,3177,3176,3177,2989,2990,2961,3176,3175,3176,2961,2989,2732,3178,2736,3178,2732,3179,3179,2976,3178,2976,3179,3005,3180,3005,3179,3005,3180,3009,2734,3179,2732,3179,2734,3180,3181,3182,3183,3182,3181,72,3184,3181,3185,3181,3183,3185,2970,3185,3183,3185,2970,2972,2971,3183,3182,3183,2971,2970,3040,3182,3186,3182,3040,2971,3039,3186,3187,3186,3039,3040,3187,69,67,69,3187,3186,3182,69,3186,69,3182,72,3188,3189,73,3189,3188,3190,3190,2987,3189,2987,3190,2985,3191,2985,3190,2985,3191,2984,3192,3191,3188,3188,3191,3190,3189,3043,3193,3043,3189,2987,3189,76,73,76,3189,3193,76,3194,79,3194,76,3193,3193,3044,3194,3044,3193,3043,3195,3181,3196,3181,3195,72,3197,3196,3198,3196,3197,3195,3198,3199,3200,3199,3198,3196,3196,3184,3199,3184,3196,3181,3195,70,72,70,3195,3201,3201,71,70,71,3201,3202,3203,3202,3201,3202,3203,3204,3197,3201,3195,3201,3197,3203,3188,3205,3206,3205,3188,73,3192,3206,3207,3206,3192,3188,3207,3208,3209,3208,3207,3206,3206,3210,3208,3210,3206,3205,75,3205,73,3205,75,3211,3211,3210,3205,3210,3211,3212,3213,3212,3211,3212,3213,3214,78,3211,75,3211,78,3213,3203,3215,3216,3203,3216,3204,3197,3217,3215,3197,3215,3203,3200,3218,3219,3200,3219,3198,3198,3219,3217,3198,3217,3197,3220,3200,3199,3200,3220,3218,3199,3221,3220,3221,3199,3184,3184,3222,3221,3222,3184,3185,2972,3222,3185,3222,2972,3223,3212,3224,3225,3224,3212,3214,3210,3225,3226,3225,3210,3212,3209,3227,3228,3227,3209,3208,3208,3226,3227,3226,3208,3210,3229,3207,3209,3209,3228,3229,3207,3229,3230,3207,3230,3192,3192,3230,3231,3192,3231,3191,3231,2984,3191,2984,3231,3232,3233,2657,3234,2657,3233,2663,3233,3234,3235,3236,3235,3234,3237,3165,3238,3165,3237,3166,3239,3240,3238,3240,3237,3238,3235,3241,3242,3241,3235,3236,3242,3243,3244,3243,3242,3241,3245,3246,3247,3246,3245,3248,3245,2851,3248,2851,3245,3249,2931,3250,3251,3250,2931,2923,2932,3251,3252,3251,2932,2931,3251,3253,3252,3253,3251,3254,3250,3254,3251,3254,3250,3255,3256,2939,3257,2939,3256,2927,3256,3258,3259,3258,3256,3257,3257,3260,3258,3260,3257,3261,3257,2941,3261,2941,3257,2939,2922,1738,3262,1738,2922,1724,2923,3262,3250,3262,2923,2922,3262,3255,3250,3255,3262,3263,1738,3263,3262,3263,1738,1737,1736,2925,3264,2925,1736,1720,1736,3265,1735,3265,1736,3264,3264,3259,3265,3259,3264,3256,3264,2927,3256,2927,3264,2925,3266,3267,3268,3269,3268,3267,3267,3266,2834,3267,2834,3270,3271,3272,3273,3273,3274,3271,3274,3273,3247,3247,3246,3274,3275,3276,3277,3276,3275,3278,3278,3269,3276,3269,3278,3268,3239,3279,3240,3279,3239,3280,3280,3281,3279,3281,3280,3282,3283,3284,3285,3284,3283,3286,3285,3255,3283,3255,3285,3254,3287,3254,3285,3254,3287,3253,3285,3288,3287,3288,3285,3284,3289,3290,3291,3290,3289,3292,3293,3291,3294,3291,3293,3289,3294,3258,3260,3258,3294,3291,3291,3259,3258,3259,3291,3290,3283,3263,3295,3263,3283,3255,3286,3295,3296,3295,3286,3283,3296,3297,3298,3297,3296,3295,3295,1737,3297,1737,3295,3263,3265,3290,3299,3290,3265,3259,3299,1735,3265,1735,3299,3300,3300,3301,3302,3301,3300,3299,3299,3292,3301,3292,3299,3290,3297,1740,3303,1740,3297,1737,3298,3303,3304,3303,3298,3297,3304,1745,1747,1745,3304,3303,3303,1731,1745,1731,3303,1740,3300,1733,1735,1733,3300,3305,3305,1728,1733,1728,3305,1741,1741,3306,1744,3306,1741,3305,3305,3302,3306,3302,3305,3300,3307,3304,3308,3304,3307,3298,3308,3309,3307,3309,3308,3310,1753,3310,3308,3310,1753,1755,3308,1747,1753,1747,3308,3304,3306,3311,3312,3311,3306,3302,1744,3312,1749,3312,1744,3306,1749,3313,1752,3313,1749,3312,3312,3314,3313,3314,3312,3311,3315,3316,3317,3316,3315,3318,3309,3317,3307,3317,3309,3315,3307,3296,3298,3296,3307,3317,3296,3317,3316,3316,3286,3296,3319,3320,3321,3320,3319,3322,3301,3320,3322,3320,3301,3292,3311,3301,3322,3301,3311,3302,3314,3322,3319,3322,3314,3311,3284,3286,3323,3286,3324,3323,3325,3288,3284,3284,3323,3325,3325,3326,3327,3326,3325,3323,3323,86,3326,86,3323,3324,3324,3328,86,3328,3324,3329,3329,3330,3328,3330,3329,3331,3316,3331,3329,3331,3316,3318,3316,3324,3286,3324,3316,3329,3332,3292,3289,3292,3332,3333,3332,87,3333,87,3332,3334,3335,3334,3332,3334,3335,3336,3335,3289,3293,3289,3335,3332,3333,3337,3338,3337,3333,87,3320,3292,3333,3320,3333,3338,3320,3339,3321,3339,3320,3338,3338,3340,3339,3340,3338,3337,3341,3342,3272,3272,3271,3341,3282,3341,3281,3341,3282,3342,3343,3344,3244,3244,3243,3343,3344,3343,3345,3344,3345,3346,3347,3277,3348,3277,3347,3275,3347,3346,3345,3346,3347,3348,3349,3350,2887,2887,2888,3349,3351,3350,3349,3350,3351,3352,2329,3353,2328,3353,2329,3354,2330,3354,2329,3354,2330,2214,2335,2328,3355,2328,3353,3355,2336,3355,3356,3355,2336,2335,3357,2351,2353,2351,3357,2225,2225,2352,2351,2352,2225,2201,3357,2360,3358,2360,3357,2353,3358,2361,3359,2361,3358,2360,2966,3360,2967,3360,2966,3361,2967,3223,2972,3223,2967,3360,2959,3361,2966,3361,2959,3362,2961,3362,2959,3362,2961,3363,3364,2977,2982,2977,3364,3365,3232,2982,2984,2982,3232,3364,3365,2973,2977,2973,3365,3366,2973,3366,2976,2976,3366,3367,3202,3368,3369,3368,3202,3204,71,3369,3370,3369,71,3202,3370,3371,3372,3371,3370,3369,3369,3373,3371,3373,3369,3368,3374,66,71,66,3374,3375,3375,67,66,67,3375,3376,3377,3376,3375,3376,3377,3378,3379,3375,3374,3375,3379,3377,3380,3381,3382,3381,3380,3383,3383,3372,3381,3372,3383,3370,3374,3370,3383,3370,3374,71,3379,3383,3380,3383,3379,3374,3213,3384,3214,3384,3213,3385,3385,3386,3384,3386,3385,3387,3388,3387,3385,3387,3388,3389,78,3385,3213,3385,78,3388,3390,77,3391,77,3390,78,3392,3391,3393,3391,3392,3390,3393,3394,3395,3394,3393,3391,3391,79,3394,79,3391,77,3396,3397,3398,3397,3396,3399,3392,3398,3390,3398,3392,3396,3390,3388,78,3388,3390,3398,3398,3389,3388,3389,3398,3397,3400,3401,3378,3378,3401,3376,3401,67,3376,67,3401,3187,3402,3187,3401,3187,3402,3039,3400,3403,3402,3400,3402,3401,3404,3395,3405,3395,3394,3405,3405,3406,3404,3407,3404,3406,3194,3406,3405,3406,3194,3044,79,3405,3394,3405,79,3194,3408,3409,3410,3409,3408,3411,3403,3410,3402,3410,3403,3408,3402,3410,3039,3410,3037,3039,3410,3409,3037,3409,2999,3037,3412,3413,3414,3413,3412,3415,3042,3413,3415,3413,3042,3013,3044,3415,3406,3415,3044,3042,3407,3415,3412,3415,3407,3406,3400,3416,3417,3416,3400,3378,3403,3417,3418,3417,3403,3400,3418,3419,3420,3419,3418,3417,3417,3421,3419,3421,3417,3416,3408,3418,3422,3418,3408,3403,3411,3422,3423,3422,3411,3408,3423,3424,3425,3424,3423,3422,3422,3420,3424,3420,3422,3418,3426,3404,3427,3404,3426,3395,3428,3427,3429,3427,3428,3426,3429,3430,3431,3430,3429,3427,3427,3407,3430,3407,3427,3404,3430,3412,3432,3412,3430,3407,3431,3432,3433,3432,3431,3430,3433,3434,3435,3434,3433,3432,3432,3414,3434,3414,3432,3412,3377,3436,3437,3436,3377,3379,3378,3437,3416,3437,3378,3377,3416,3438,3421,3438,3416,3437,3437,3439,3438,3439,3437,3436,3440,3393,3441,3393,3440,3392,3442,3441,3443,3441,3442,3440,3443,3426,3428,3426,3443,3441,3441,3395,3426,3395,3441,3393,3444,3445,3446,3445,3444,3447,3447,3382,3445,3382,3447,3380,3436,3380,3447,3380,3436,3379,3439,3447,3444,3447,3439,3436,3448,3449,3450,3449,3448,3451,3442,3450,3440,3450,3442,3448,3440,3396,3392,3396,3440,3450,3450,3399,3396,3399,3450,3449,3452,2999,3409,2999,3452,2998,3453,2998,3452,2998,3453,2997,3454,3452,3455,3452,3454,3453,3455,3409,3411,3409,3455,3452,3456,3457,3458,3457,3459,3458,3458,3425,3456,3425,3458,3423,3423,3455,3411,3455,3423,3458,3458,3454,3455,3454,3458,3459,3460,3413,3013,3013,3012,3460,3461,3414,3413,3413,3460,3461,3462,3461,3460,3460,3463,3462,3463,3460,3012,3012,3014,3463,3464,3465,3466,3465,3464,3467,3464,3462,3467,3462,3464,3461,3434,3461,3464,3461,3434,3414,3435,3464,3466,3464,3435,3434,3468,3022,3469,3022,3468,3023,3468,3470,3471,3470,3468,3469,3472,3470,3469,3472,3469,3473,3469,3002,3473,3002,3469,3022,3474,3475,3476,3475,3474,3477,3478,3476,3479,3476,3478,3474,3479,3470,3472,3470,3479,3476,3476,3471,3470,3471,3476,3475,3026,3480,3481,3480,3026,3025,3482,3481,3480,3481,3482,3483,3480,3471,3482,3471,3480,3468,3480,3023,3468,3023,3480,3025,3484,3483,3482,3483,3484,3485,3486,3485,3484,3486,3487,3485,3477,3486,3484,3477,3484,3475,3475,3484,3482,3475,3482,3471,3030,3488,3489,3488,3030,3031,3018,3489,3490,3489,3018,3030,3491,3489,3492,3489,3491,3490,3488,3492,3489,3492,3488,3493,3494,3495,3496,3495,3494,3497,3497,3493,3495,3493,3497,3492,3498,3492,3497,3492,3498,3491,3499,3497,3494,3497,3499,3498,3034,3500,3035,3500,3034,3501,3031,3500,3488,3500,3031,3035,3500,3493,3488,3493,3500,3502,3502,3500,3501,3502,3501,3503,3504,3502,3503,3504,3503,3505,3495,3502,3504,3502,3495,3493,3496,3504,3506,3504,3496,3495,3506,3505,3507,3506,3504,3505,3481,3483,3508,3483,3509,3508,3026,3481,3510,3481,3508,3510,3511,3510,3508,3508,3512,3511,3508,3509,3512,3509,3513,3512,3485,3509,3483,3509,3485,3514,3514,3513,3509,3513,3514,3515,3516,3515,3514,3515,3516,3517,3487,3514,3485,3514,3487,3516,3501,3518,3503,3503,3518,3519,3518,3520,3519,3519,3520,3521,3522,3523,3518,3518,3523,3520,3034,3522,3501,3501,3522,3518,3505,3519,3524,3519,3505,3503,3507,3524,3525,3524,3507,3505,3525,3526,3527,3526,3525,3524,3524,3521,3526,3521,3524,3519,3111,3528,3114,3528,3111,3529,3529,3530,3528,3528,3530,3531,3532,3529,3533,3529,3532,3530,3053,3529,3111,3529,3053,3533,3128,3114,3534,3114,3528,3534,3127,3128,3535,3128,3534,3535,3535,3536,3537,3536,3535,3534,3534,3531,3536,3531,3534,3528,3115,3538,3539,3538,3115,3117,3064,3539,3540,3539,3064,3115,3541,3540,3539,3539,3542,3541,3542,3539,3538,3538,3543,3542,3133,3544,3117,3117,3544,3538,3544,3543,3538,3543,3544,3545,3535,3545,3544,3545,3535,3537,3127,3535,3133,3133,3535,3544,3533,3054,3546,3054,3533,3053,3547,3533,3546,3533,3547,3532,3510,3547,3546,3547,3510,3511,3054,3026,3510,3054,3510,3546,3063,3540,3548,3540,3063,3064,3063,3522,3034,3522,3063,3548,3522,3549,3523,3549,3522,3548,3549,3548,3540,3549,3540,3541,3473,3003,3550,3003,3473,3002,3551,3472,3473,3551,3473,3550,3550,3454,3551,3454,3550,3453,3550,2997,3453,2997,3550,3003,3552,3479,3553,3479,3552,3478,3457,3552,3459,3552,3553,3459,3459,3551,3454,3551,3459,3553,3553,3472,3551,3472,3553,3479,3017,3490,3554,3490,3017,3018,3014,3554,3463,3554,3014,3017,3554,3462,3463,3462,3554,3555,3555,3490,3491,3490,3555,3554,3556,3498,3499,3498,3556,3557,3557,3491,3498,3491,3557,3555,3467,3555,3557,3555,3467,3462,3467,3556,3465,3556,3467,3557,2900,2899,3558,3559,3558,2899,3560,3561,3559,3561,3558,3559,3562,3352,3351,3352,3562,3563,3564,3563,3562,3563,3564,3565,82,3566,3567,3566,82,81,3326,86,82,3326,82,3567,3327,3326,3567,3327,3567,3568,3567,3569,3568,3569,3567,3566,3570,3571,3560,3560,3571,3561,3572,3573,3570,3570,3573,3571,3574,3575,3576,3577,3576,3575,3574,3564,3575,3564,3574,3565,3578,88,3579,88,3578,93,3579,3580,3578,3580,3579,3581,3336,3579,3334,3579,3336,3581,87,3334,88,88,3334,3579,3328,84,86,84,3328,3582,3582,85,84,85,3582,3583,3584,3583,3582,3583,3584,3585,3330,3584,3328,3328,3584,3582,90,3337,87,3337,90,3586,3340,3337,3587,3337,3586,3587,3587,3588,3589,3588,3587,3586,92,3586,90,3586,92,3588,3590,3591,3592,3591,3590,100,3318,3592,3331,3592,3318,3590,3331,3593,3330,3593,3331,3592,3592,3594,3593,3594,3592,3591,3595,99,3596,99,3595,98,3309,3596,3315,3596,3309,3595,3315,3590,3318,3590,3315,3596,3596,100,3590,100,3596,99,3597,3598,103,3598,3597,3599,3599,3600,3598,3600,3599,3601,3339,3601,3599,3601,3339,3340,3321,3599,3597,3599,3321,3339,3602,102,105,102,3602,3603,3603,103,102,103,3603,3597,3319,3597,3603,3597,3319,3321,3314,3603,3602,3603,3314,3319,3310,3595,3309,3595,3310,3604,3604,98,3595,98,3604,3605,1761,3605,3604,3605,1761,1763,1755,3604,3310,3604,1755,1761,3313,3602,3606,3602,3313,3314,1752,3606,1757,3606,1752,3313,1757,3607,1760,3607,1757,3606,3606,105,3607,105,3606,3602,3605,3608,98,3608,3605,3609,3609,3610,3608,3610,3609,3611,1769,3611,3609,3611,1769,1771,1763,3609,3605,3609,1763,1769,3612,3607,105,3607,3612,3613,3613,1760,3607,1760,3613,1765,3614,1765,3613,1765,3614,1768,3615,3613,3612,3613,3615,3614,97,3616,95,3616,97,3617,3617,3618,3616,3618,3617,3619,3619,3608,3610,3608,3619,3617,98,3617,97,3617,98,3608,3620,106,107,106,3620,3621,3621,105,106,105,3621,3612,3622,3612,3621,3612,3622,3615,3623,3621,3620,3621,3623,3622,3624,3625,3626,3625,3624,113,95,3626,96,3626,95,3624,96,3591,100,3591,96,3626,3626,3594,3591,3594,3626,3625,3627,3628,3629,3628,3627,120,3600,3629,3598,3629,3600,3627,3598,104,103,104,3598,3629,3629,107,104,107,3629,3628,3630,3631,3632,3631,3630,3633,3632,3634,3630,3634,3632,3635,3625,3635,3632,3635,3625,113,3594,3632,3631,3632,3594,3625,3631,3593,3594,3593,3631,3636,3636,3330,3593,3330,3636,3584,3637,3584,3636,3584,3637,3585,3633,3636,3631,3636,3633,3637,3638,3639,3640,3639,3638,3641,3600,3640,3627,3640,3600,3638,3627,3642,120,3642,3627,3640,3640,3643,3642,3643,3640,3639,3601,3638,3600,3638,3601,3644,3644,3641,3638,3641,3644,3645,3587,3645,3644,3645,3587,3589,3340,3644,3601,3644,3340,3587,3616,3646,3647,3646,3616,3618,95,3647,3624,3647,95,3616,3647,113,3624,113,3647,110,3647,108,110,108,3647,3646,3648,3620,3649,3620,3648,3623,121,3649,119,3649,121,3648,3649,120,119,120,3649,3628,3649,107,3628,107,3649,3620,3650,3651,3652,3651,3650,3653,3650,112,114,112,3650,3652,112,3635,113,3635,112,3652,3652,3634,3635,3634,3652,3651,3654,3655,3656,3655,3654,3657,3656,3643,3654,3643,3656,3642,117,3642,3656,3642,117,120,3655,117,3656,117,3655,115,3637,3658,3585,3658,3637,3659,3659,3660,3658,3660,3659,3661,3662,3661,3659,3661,3662,3663,3662,3637,3633,3637,3662,3659,2663,2660,2657,2660,2663,2665,2826,3356,3664,3356,2826,2336,3665,2826,3664,2826,3665,2704,2620,2834,2619,2619,2834,2833,3666,2710,3667,2710,3666,3175,3175,3666,3363,3175,3363,2961,2702,3665,3668,3665,2702,2704,2702,3668,3669,3669,2701,2702,3645,3670,3671,3670,3645,3589,3641,3645,3672,3645,3671,3672,3672,3673,3674,3673,3672,3671,3671,3675,3673,3675,3671,3670,3359,2828,3676,2828,3359,2361,2729,3677,2828,3677,3676,2828,2686,2679,2684,2679,2686,2677,3678,2736,3679,2736,3178,3679,3178,3367,3679,3367,3178,2976,2728,3680,3677,2728,3677,2729,2728,3681,3680,3681,2728,2730,2735,3678,3682,3678,2735,2736,3683,3630,3634,3630,3683,3684,3684,3633,3630,3633,3684,3662,3685,3662,3684,3662,3685,3663,3686,3684,3683,3684,3686,3685,3639,3687,3643,3687,3639,3688,3688,3689,3687,3689,3688,3690,3672,3690,3688,3690,3672,3674,3641,3688,3639,3688,3641,3672,2711,3691,3667,3667,2710,2711,2701,3669,3691,2701,3691,2711,2579,3692,2577,3692,2579,3092,3092,3102,3692,3102,3092,3089,2730,3682,3681,3682,2730,2735,2640,2851,2641,2851,2640,2846,1920,3693,1985,1920,1985,1919,1915,1930,3693,1915,3693,1920,3145,3694,3147,3695,3147,3694,3694,3696,3695,3697,3695,3696,3698,3696,3694,3696,3698,3573,2951,3698,3145,3145,3698,3694,2517,3699,2569,3699,2517,2537,2537,2614,3699,2614,2537,2539,3699,2596,2606,2596,3699,2614,2569,2606,2568,2606,2569,3699,3154,3700,3701,3154,3701,3152,3702,2957,3152,3152,3701,3702,3575,3702,3701,3702,3575,3564,3700,3577,3575,3700,3575,3701,1932,3693,1930,3693,1932,3703,3703,1985,3693,1985,3703,1990,3704,1990,3703,1990,3704,1997,1934,3703,1932,3703,1934,3704,3696,3705,3697,3705,3696,3706,3706,3696,3573,3573,3572,3706,3707,3581,3708,3581,3707,3580,3708,3336,3226,3336,3708,3581,3569,3709,3568,3710,3568,3709,3217,3327,3710,3327,3568,3710,3227,3336,3335,3336,3227,3226,3227,3293,3228,3293,3227,3335,3711,3215,3712,3215,3711,3216,3572,3713,3706,3713,3572,3714,3706,3715,3705,3715,3706,3713,3217,3712,3215,3712,3217,3710,3225,3716,3717,3716,3225,3224,3226,3717,3708,3717,3226,3225,3718,3574,3576,3574,3718,3719,3719,3565,3574,3565,3719,3720,65,3721,63,3721,65,1512,1512,1521,3721,1521,1512,1514,3721,1523,1631,1523,3721,1521,63,1631,64,1631,63,3721,3722,3714,3572,3714,3722,3723,3723,3143,3714,3143,3723,3724,3725,3724,3723,3724,3725,3726,3727,3723,3722,3723,3727,3725,3142,3724,3728,3724,3142,3143,3728,2632,3142,2632,3728,3729,3730,3729,3728,3729,3730,3731,3728,3726,3730,3726,3728,3724,1936,3704,1934,3704,1936,2014,2014,1997,3704,1997,2014,2002,1924,3732,3733,3732,1924,1921,1908,3732,1921,3732,1908,1911,3720,3734,3565,3734,3720,3735,3735,3736,3734,3736,3735,3737,3738,3737,3735,3737,3738,3739,3150,3735,3720,3735,3150,3738,3738,3149,3740,3149,3738,3150,3739,3740,3741,3740,3739,3738,3741,3742,3743,3742,3741,3740,2653,3740,3149,3740,2653,3742,3219,3325,3327,3219,3327,3217,3218,3288,3219,3288,3325,3219,3230,3229,3260,3229,3294,3260,3294,3229,3228,3228,3293,3294,3744,3570,3560,3570,3744,3745,3572,3745,3722,3745,3572,3570,3746,3722,3745,3722,3746,3727,3747,3745,3744,3745,3747,3746,3220,3253,3287,3253,3220,3221,3287,3218,3220,3218,3287,3288,3230,3260,3261,3230,3261,3231,3261,3232,3231,3232,3261,2941,3748,3563,3749,3563,3748,3352,3749,3750,3748,3750,3749,3751,3734,3751,3749,3751,3734,3736,3749,3565,3734,3565,3749,3563,3571,3698,3752,3698,3571,3573,3752,3561,3571,3561,3752,3753,3754,3753,3752,3753,3754,3755,3698,2951,3754,3698,3754,3752,3562,3702,3564,3702,3562,3756,3756,3757,3702,2957,3702,3757,3758,3757,3756,3757,3758,3759,3351,3756,3562,3756,3351,3758,2948,3754,2951,3754,2948,3760,3760,3755,3754,3755,3760,3761,3762,3763,3764,3763,3765,3764,2661,3765,2948,2948,3765,3763,1519,3766,1629,3766,1519,1518,1518,1509,3766,1509,1518,1510,3766,55,57,55,3766,1509,1629,57,59,57,1629,3766,3757,2954,2957,2954,3757,3767,2954,3768,3769,2954,3769,2681,3770,3771,3768,3768,3771,3769,3759,3767,3757,3767,3759,3772,1911,1975,3732,1975,1911,1912,3733,1975,1977,1975,3733,3732,1928,3773,2007,3773,1928,1927,1927,3733,3773,3733,1927,1924,3221,3252,3253,3252,3221,3222,3223,3252,3222,3252,3223,2932,2043,3357,3358,3357,2043,2045,2042,3358,3359,3358,2042,2043,3774,3744,3775,3744,3774,3747,2902,3775,2901,3775,2902,3774,2901,3559,2899,3559,2901,3775,3775,3560,3559,3560,3775,3744,2056,2053,3353,2053,3355,3353,2052,3356,3355,2052,3355,2053,2941,3364,3232,3364,2941,2940,3364,2940,3365,3365,2940,2914,3776,3748,3750,3748,3776,3777,3777,3352,3748,3352,3777,3350,3350,2885,2887,2885,3350,3777,3777,2889,2885,2889,3777,3776,3778,3779,3780,3778,3780,3781,3755,3778,3753,3778,3755,3779,3753,3558,3561,3558,3753,3778,3778,2900,3558,2900,3778,3781,3782,3783,3784,3784,3783,3785,2888,3783,3349,3783,2888,3785,3349,3758,3351,3758,3349,3783,3783,3759,3758,3759,3783,3782,3786,3787,3788,3787,3786,3789,3790,3791,3787,3787,3791,154,3762,3791,3790,3791,3762,3764,3761,3779,3755,3779,3761,3792,3793,3794,3795,3794,3793,3796,3759,3782,3772,3782,3797,3772,3798,3770,3799,3770,3798,3771,3799,3793,3798,3793,162,3798,3800,3148,2944,3148,3800,3801,3801,2660,3148,2660,3801,2658,3765,2658,3801,2658,3765,2661,3765,3800,3764,3800,3765,3801,3791,3800,3802,3800,3791,3764,154,3802,153,3802,154,3791,153,2943,151,2943,153,3802,3802,2944,2943,2944,3802,3800,3803,2945,3804,2945,3803,2937,3771,3803,3769,3803,3804,3769,3769,2678,2681,2678,3769,3804,3804,2679,2678,2679,3804,2945,3803,3798,3805,3798,3803,3771,2937,3805,2936,3805,2937,3803,2936,161,163,161,2936,3805,3805,162,161,162,3805,3798,3806,3807,3808,3807,3809,3808,3808,3146,3806,3146,3808,3144,3810,3144,3808,3144,3810,2950,3811,3808,3809,3808,3811,3810,3812,3810,3811,3810,3812,3813,3813,2950,3810,2950,3813,3814,3815,3814,3813,3814,3815,3816,3813,3817,3815,3817,3813,3812,3818,3819,3820,3820,3819,3821,3819,3822,3821,3822,3819,3823,3823,3151,2956,3151,3823,3819,3819,3153,3151,3153,3819,3818,3824,3823,3825,3823,3824,3822,3826,3825,3827,3825,3826,3824,3827,3828,3829,3828,3827,3825,3825,2956,3828,2956,3825,3823,3806,3161,3830,3161,3806,3146,3807,3830,3831,3830,3807,3806,3831,3832,3833,3832,3831,3830,3832,3830,3161,3161,3162,3832,3818,3155,3153,3155,3818,3834,3835,3155,3834,3158,3155,3835,3836,3835,3834,3835,3836,3837,3820,3834,3818,3834,3820,3836,3838,3170,3168,3170,3838,3839,3839,3162,3170,3162,3839,3832,3840,3832,3839,3832,3840,3833,3841,3839,3838,3839,3841,3840,3167,3842,3843,3842,3167,2836,3843,3168,3167,3168,3843,3838,3838,3844,3841,3844,3838,3843,3843,3845,3844,3845,3843,3842,3846,3174,3847,3174,3846,3172,3848,3847,3849,3847,3848,3846,3835,3849,3847,3849,3835,3837,3158,3847,3174,3847,3158,3835,3850,3171,3851,3171,3850,2853,3852,3851,3853,3851,3852,3850,3853,3846,3848,3846,3853,3851,3851,3172,3846,3172,3851,3171,3854,3730,3855,3730,3854,3731,3856,3854,3855,3854,3856,3857,3856,3725,3727,3725,3856,3855,3855,3726,3725,3726,3855,3730,3741,3858,3859,3858,3741,3743,3739,3859,3737,3859,3739,3741,3737,3860,3736,3860,3737,3859,3860,3859,3858,3860,3858,3861,3862,3863,3864,3863,3862,3865,3746,3747,3862,3862,3864,3746,3727,3746,3864,3864,3856,3727,3864,3857,3856,3857,3864,3863,3866,3867,3868,3867,3866,3869,3861,3868,3860,3868,3861,3866,3736,3868,3751,3868,3736,3860,3751,3867,3750,3867,3751,3868,3854,3870,3731,3870,3854,3871,3871,2882,3870,2882,3871,2947,3872,2947,3871,2947,3872,2879,3857,3871,3854,3871,3857,3872,3729,2633,2632,2633,3729,3873,3873,2881,2633,2635,2633,2881,3870,2881,3873,2881,3870,2882,3731,3873,3729,3873,3731,3870,3874,3858,3743,3858,3874,3875,3875,3861,3858,3861,3875,3876,2953,3876,3875,3876,2953,2892,2894,3875,3874,3875,2894,2953,2654,3742,2653,3742,2654,3877,3877,3743,3742,3743,3877,3874,2895,3874,3877,3874,2895,2894,2895,2654,2656,2654,2895,3877,3863,3872,3857,3872,3863,3878,3878,2879,3872,2879,3878,2877,3879,2877,3878,2877,3879,2878,3865,3878,3863,3878,3865,3879,3876,3866,3861,3866,3876,3880,3880,3869,3866,3869,3880,3881,2891,3881,3880,3881,2891,2890,2892,3880,3876,3880,2892,2891,3882,33,34,33,3882,1405,34,62,3882,62,34,35,3882,64,1503,64,3882,62,1405,1503,1401,1503,1405,3882,3883,59,58,59,3883,1499,23,58,24,58,23,3883,26,3883,23,3883,26,1402,1402,1499,3883,1499,1402,1396,3773,1977,1991,1977,3773,3733,2007,1991,1993,1991,2007,3773,3884,3885,3886,3885,3884,3887,3888,3887,3884,3887,3888,3889,3889,3890,3887,3890,3889,3891,3887,3892,3885,3892,3887,3890,2627,3893,3894,3893,2627,2626,3894,3895,3896,3895,3894,3893,3897,1201,1200,1201,3897,3898,1334,1200,1185,1200,1334,3897,49,3897,50,3897,1334,50,3898,49,52,49,3898,3897,2646,3899,2647,3899,2646,3900,3901,3902,3900,3900,3902,3899,3896,3903,3904,3903,3896,3895,3904,3905,3906,3905,3904,3903,3907,3908,3909,3908,3907,3910,3910,2876,3908,2876,3910,2873,2875,3910,3911,3910,2875,2873,3911,3907,2934,3907,3911,3910,3907,3862,3912,3862,3907,3909,2934,3912,2933,3912,2934,3907,2933,3774,2902,3774,2933,3912,3912,3747,3774,3747,3912,3862,3913,3914,3915,3914,3913,3916,3917,2904,3913,3913,3915,3917,3917,3915,2861,3915,2859,2861,3915,2862,2859,2862,3915,3914,3913,3867,3916,3867,3913,3918,3918,3750,3867,3750,3918,3776,3776,2903,2889,2903,3776,3918,3918,2904,2903,2904,3918,3913,1326,3919,42,36,42,3919,1326,1195,3919,1195,1326,1175,1197,3919,1195,3919,1197,3920,3920,36,3919,36,3920,37,3921,3922,3901,3901,3922,3902,3923,3924,3921,3921,3924,3922,2888,3925,3785,3925,2888,2886,2886,157,3925,157,2886,158,3926,3927,3928,3927,3926,3929,141,3928,138,3928,141,3926,138,2946,136,2946,138,3928,2946,3928,3927,3927,2883,2946,3930,3931,3932,3931,3930,3933,2952,3931,3933,3931,2952,2896,147,2952,3933,2952,147,149,3933,148,147,148,3933,3930,140,3934,3935,3934,140,142,3935,141,140,141,3935,3936,3348,3936,3935,3936,3348,3277,3346,3935,3934,3935,3346,3348,3344,3934,3937,3934,3344,3346,3244,3344,3938,3344,3937,3938,3938,3937,2667,3937,2874,2667,142,3937,3934,3937,142,2874,3939,145,3940,145,3939,143,3282,3940,3342,3940,3282,3939,3941,3342,3940,3342,3941,3272,148,3940,145,3940,148,3941,3280,3939,3282,3939,3280,3942,3942,143,3939,143,3942,2860,3943,2687,3942,3942,2687,2860,3943,3280,3239,3280,3943,3942,3276,3944,3945,3944,3276,3269,3277,3945,3936,3945,3277,3276,3936,3926,141,3926,3936,3945,3945,3929,3926,3929,3945,3944,3946,3273,3947,3273,3946,3247,3932,3947,3930,3947,3932,3946,3930,3941,148,3941,3930,3947,3947,3272,3941,3272,3947,3273,3360,2932,3223,2932,3360,2930,3361,2930,3360,2930,3361,2907,3366,2911,3367,3367,2911,1946,3366,2914,2911,2914,3366,3365,3363,2905,3362,2905,3363,1955,2907,3361,3362,3362,2905,2907,3676,2037,2042,2042,3359,3676,2040,3676,3677,3676,2040,2037,2052,3664,3356,3664,2052,2048,2048,2050,3664,2050,3665,3664,3679,1946,1943,1946,3679,3367,3678,1943,1940,1943,3678,3679,3666,1955,3363,3666,1953,1955,3667,1953,3666,3667,1952,1953,3354,2214,2209,2209,2214,2212,2056,3353,3354,2056,3354,2209,2045,2225,3357,2225,2045,2197,1951,3669,1950,3669,1951,3691,3691,1952,3667,1952,3691,1951,2050,3668,3665,3668,2050,2080,1950,3668,2080,3668,1950,3669,3681,1939,1941,1939,3681,3682,3682,1940,1939,1940,3682,3678,3680,2058,2040,2040,3677,3680,3948,3343,3949,3343,3948,3345,3950,3949,3951,3949,3950,3948,3951,3952,3953,3952,3951,3949,3949,3243,3952,3243,3949,3343,3279,3954,3955,3954,3279,3281,3955,3240,3279,3240,3955,3956,3957,3956,3955,3956,3957,3958,3955,3959,3957,3959,3955,3954,3960,3961,3962,3961,3960,3963,3964,3963,3965,3963,3964,3961,3966,3965,3963,3965,3966,3967,3950,3963,3960,3963,3950,3966,3966,3951,3968,3951,3966,3950,3968,3967,3966,3967,3968,3969,3969,3970,3971,3970,3969,3968,3968,3953,3970,3953,3968,3951,3972,3973,3974,3973,3972,3975,3959,3975,3976,3975,3959,3973,3977,3976,3975,3976,3977,3978,3979,3975,3972,3975,3979,3977,3957,3976,3980,3976,3957,3959,3980,3958,3957,3958,3980,3981,3982,3981,3980,3981,3982,3983,3978,3980,3976,3980,3978,3982,3984,3985,3986,3985,3984,3987,3845,3986,3988,3986,3845,3984,3988,3961,3964,3961,3988,3986,3986,3962,3961,3962,3986,3985,3989,3990,3991,3990,3989,3992,3992,3974,3990,3974,3992,3972,3993,3972,3992,3972,3993,3979,3992,3852,3993,3852,3992,3989,3994,3965,3995,3965,3994,3964,3995,3996,3994,3996,3995,3997,3997,3998,3999,3998,3997,3995,3995,3967,3998,3967,3995,3965,4000,3999,4001,3999,3998,4001,4001,4002,4000,4002,4001,4003,4003,3969,3971,3969,4003,4001,4001,3998,3969,3998,3967,3969,4004,3977,3979,3977,4004,4005,4005,3978,3977,3978,4005,4006,4007,4006,4005,4006,4007,4008,4005,4009,4007,4009,4005,4004,4010,4008,4011,4008,4010,4006,3982,4006,4010,3978,4006,3982,4012,3982,4010,3982,4012,3983,4010,4013,4012,4013,4010,4011,4014,3988,4015,3988,4014,3845,4016,4015,4017,4015,4016,4014,4017,3994,3996,3994,4017,4015,4015,3964,3994,3964,4015,3988,3993,4018,4019,4018,3993,3852,3979,4019,4004,4019,3979,3993,4004,4020,4009,4020,4004,4019,4019,4021,4020,4021,4019,4018,4022,4017,4023,4017,4022,4016,3833,4023,4024,4023,3833,4022,4024,3997,3999,3997,4024,4023,4023,3996,3997,3996,4023,4017,3831,4024,4025,4024,3831,3833,4025,3807,3831,3807,4025,4026,4000,4026,4025,4026,4000,4002,3999,4025,4024,4025,3999,4000,4020,4027,4028,4027,4020,4021,4009,4028,4007,4028,4009,4020,4007,4029,4008,4029,4007,4028,4028,3837,4029,3837,4028,4027,4029,3836,4030,3836,4029,3837,4008,4030,4011,4030,4008,4029,4031,4011,4030,4011,4031,4013,3820,4030,3836,4030,3820,4031,3266,2832,2834,2832,3266,4032,4032,2830,2832,2830,4032,4033,4034,4033,4032,4033,4034,3987,3268,4034,3266,3266,4034,4032,3680,1941,2058,1941,3680,3681,2196,2216,2213,2216,2196,2195,2315,4035,4036,4036,2311,2315,4037,2220,2217,2220,4037,4038,3248,2850,4039,2850,3248,2851,3246,3248,4040,3248,4039,4040,4041,4040,4039,4040,4041,3991,2847,4039,2850,4039,2847,4041,4042,2217,4043,2217,4042,4037,4038,4044,4045,4044,4038,4037,4046,4037,4042,4037,4046,4044,2188,2203,2202,2202,2186,2188,4047,3842,2836,2836,2837,4047,3984,3845,3842,3842,4047,3984,4047,4033,3987,4047,3987,3984,2837,2830,4033,2837,4033,4047,4048,2853,3850,2853,4048,2854,4048,4041,2854,2847,2854,4041,3989,3991,4048,4041,4048,3991,3852,3989,3850,3850,3989,4048,4049,15,667,15,4049,21,643,667,637,667,643,4049,645,4049,643,4049,645,691,21,691,18,691,21,4049,3925,162,3793,162,3925,157,3785,3793,3795,3793,3785,3925,154,4050,3787,4050,154,155,155,2898,4050,2898,155,156,4051,641,638,641,4051,687,665,638,633,638,665,4051,4051,5,9,5,4051,665,687,9,10,9,687,4051,4050,2900,3781,2900,4050,2898,3787,3781,3788,3781,3787,4050,3166,4052,3164,4052,3166,4053,3827,4053,3826,4053,3827,4052,3809,4054,3811,4054,3809,4055,4055,3971,4054,3971,4055,4003,4026,4003,4055,4003,4026,4002,4026,3809,3807,3809,4026,4055,3812,4056,3817,4056,3812,4057,3953,4057,3970,4057,3953,4056,3970,4054,3971,4054,3970,4057,3811,4057,3812,4057,3811,4054,3821,4058,4059,4058,3821,3822,4031,3820,3821,3821,4059,4031,4031,4012,4013,4012,4031,4059,3983,4059,4058,4059,3983,4012,3824,4060,4061,4060,3824,3826,3822,4061,4058,4061,3822,3824,4058,3981,3983,3981,4058,4061,4061,3958,3981,3958,4061,4060,3952,4056,3953,4056,3952,4062,4062,3817,4056,3817,4062,4063,3241,4063,4062,4063,3241,3236,3243,4062,3952,4062,3243,3241,3956,4060,4064,4060,3956,3958,3240,4064,3237,4064,3240,3956,3237,4053,3166,4053,3237,4064,3826,4064,4060,4064,3826,4053,4065,2321,4066,2319,4066,2321,4045,4067,4068,4067,4045,4044,4069,4044,4046,4044,4069,4067,4070,4071,2208,2208,4071,2206,4072,2206,4073,4073,2206,4071,4068,2277,4074,2277,4068,4067,2278,4067,4069,4067,2278,2277,4075,4076,4070,4070,4076,4071,4077,3938,2667,4077,2667,2664,3244,4077,3242,4077,3244,3938,4077,3235,3242,3235,4077,3233,4077,2663,3233,2663,4077,2664,4078,2687,3943,2687,4078,2683,2686,4078,3163,4078,2686,2683,4078,3238,3165,4078,3165,3163,3239,4078,3943,4078,3239,3238,4079,4080,4081,4080,4079,4082,4083,4082,4084,4082,4083,4080,4085,4080,4083,4080,4085,4086,4086,4081,4080,4081,4086,4087,4052,3829,2680,3829,4052,3827,3164,2680,2677,2680,3164,4052,4088,3816,3815,3816,4088,2659,4063,3815,3817,3815,4063,4088,4073,4071,4089,4089,4071,4076,4074,2279,4090,2279,4074,2277,4091,2302,2285,2285,2283,4091,4092,4093,4075,4075,4093,4076,4089,4076,4094,4094,4076,4093,4090,2281,4095,2281,4090,2279,2255,4091,2283,2255,2283,2253,4096,2287,4092,4092,2287,4093,4094,4093,2286,2286,4093,2287,4095,4097,4098,4097,4095,2281,4099,2281,2280,2281,4099,4097,4100,2289,4096,4096,2289,2287,2292,4101,2290,4101,2292,2305,4098,4097,4102,4102,4097,2239,2240,4097,4099,4097,2240,2239,4103,2295,4100,4100,2295,2289,2274,2290,4101,2290,2274,2273,4102,2239,4104,4104,2239,2241,4105,2256,2249,2249,2247,4105,4106,4107,4103,4103,4107,2295,2294,2295,4108,4108,2295,4107,4104,2241,4109,4109,2241,2243,2244,4110,2247,2247,4110,4105,4111,4107,4106,4107,4111,2258,4112,4087,4086,4087,4112,4113,4114,4086,4085,4086,4114,4112,4115,4112,4114,4112,4115,4116,4116,4113,4112,4113,4116,4117,3236,4088,4063,4088,3236,3234,3234,2659,4088,2659,3234,2657,2317,4118,2319,4118,2317,2484,2484,2201,4118,2201,2484,2352,4108,4107,2257,2257,4107,2258,4109,2243,4119,4119,2243,2492,2496,4120,2244,2244,4120,4110,4121,2258,4111,2258,4121,2260,4122,2263,2271,2263,4122,2261,4119,2492,4123,4123,2492,2494,2495,4124,2496,2496,4124,4120,4125,2260,4121,2260,4125,2268,2261,4126,2265,4126,2261,4122,4123,2497,4127,2497,4123,2494,2499,4124,2495,4124,2499,4128,4127,2268,4125,2268,4127,2497,2265,4128,2499,4128,2265,4126,4129,4036,4035,4129,4035,4130,4131,2219,2218,2219,4131,4132,4133,4134,4135,4133,4135,4136,4065,4137,4138,4066,4137,4065,221,4139,4140,221,4140,197,222,263,4139,222,4139,221,263,264,4141,263,4141,4139,4139,4141,4142,4139,4142,4140,4143,4142,4141,4142,4143,4144,271,4141,264,4141,271,4143,227,4143,271,4143,227,228,4145,4146,4147,4146,4145,4148,4147,3270,4145,3270,4147,3267,3269,4147,3944,4147,3269,3267,4147,3929,3944,3929,4147,4146,4149,4150,4151,4150,4149,4152,3932,4151,3946,4151,3932,4149,3247,3946,4151,4151,3245,3247,4151,3249,3245,3249,4151,4150,4153,2884,4154,4154,2884,2880,4148,4154,4146,4154,4148,4153,4146,3927,3929,3927,4146,4154,4154,2883,3927,2883,4154,2880,2897,4155,2893,4155,2897,4156,2896,4155,3931,4155,2896,2893,3931,4149,3932,4149,3931,4155,4155,4152,4149,4152,4155,4156,4157,4158,4159,4158,4157,4160,4160,4161,4158,4161,4160,4162,4158,4163,4164,4163,4158,4161,4159,4164,4165,4164,4159,4158,4166,4167,4168,4167,4169,4168,2207,4072,4170,2206,4072,2207,4131,4171,4172,4171,4131,2218,2481,2214,2330,2214,2481,4036,4115,4173,4116,4173,4115,4174,4174,4159,4173,4159,4174,4157,4173,4165,4175,4165,4173,4159,4116,4175,4117,4175,4116,4173,2312,4036,2481,4036,2312,2311,4043,2217,2219,4043,2219,4132,4176,3109,3110,3109,4176,3139,2611,2610,4176,2611,4176,3110,4177,4178,4179,4178,4177,4180,4180,4181,4178,4181,4180,4182,4178,4183,4184,4183,4178,4181,4179,4184,4185,4184,4179,4178,2605,4176,2610,4176,2605,3140,3140,3139,4176,3139,3140,3137,2588,4186,3100,4186,2588,2587,2587,2609,4186,2609,2587,2589,4187,4188,4189,4188,4187,4190,4191,4190,4192,4190,4191,4188,4188,4193,4194,4193,4188,4191,4189,4194,4195,4194,4189,4188,4186,2611,3106,2611,4186,2609,3100,3106,3098,3106,3100,4186,3692,2603,2600,2603,3692,3102,2577,2600,2576,2600,2577,3692,228,4144,4143,4144,228,212,194,4196,184,194,184,186,197,4140,4196,197,4196,194,4142,4197,4140,4140,4197,4196,4197,185,4196,4196,185,184,4198,185,4197,185,4198,192,4144,4197,4142,4197,4144,4198,212,4198,4144,4198,212,206,206,192,4198,192,206,191,4117,4199,4200,4199,4117,4175,4175,4201,4199,4201,4175,4165,4199,4202,4203,4202,4199,4201,4204,2855,2857,2855,4204,4205,4205,2619,2855,2619,4205,2616,4206,2616,4205,2616,4206,2617,4207,4205,4204,4205,4207,4206,4200,4203,4208,4203,4200,4199,4113,4209,4210,4113,4210,4087,4209,4117,4200,4117,4209,4113,4211,4200,4208,4200,4211,4209,4212,2844,4213,2844,4212,2842,4214,4213,4215,4213,4214,4212,4215,2637,2636,2637,4215,4213,4213,2640,2637,2640,4213,2844,2856,2829,4216,2829,2856,2833,2858,4216,4217,4216,2858,2856,4217,4218,4219,4218,4217,4216,2829,2831,4218,2829,4218,4216,2843,2848,2846,2848,2843,4220,4220,4221,2848,2849,2848,4221,4221,4222,4223,4222,4221,4220,2845,4220,2843,4220,2845,4222,4218,2835,4224,2835,4218,2831,4219,4224,4225,4224,4219,4218,4225,125,123,125,4225,4224,4224,128,125,128,4224,2835,2852,4221,4226,4221,2852,2849,129,4226,132,4226,129,2852,132,4227,135,4227,132,4226,4226,4223,4227,4223,4226,4221,3661,3663,4228,3663,4229,4228,3660,4228,4230,4228,3660,3661,4231,4230,4228,4230,4231,4232,4233,4231,4229,4229,4231,4228,3685,4229,3663,4229,3685,4234,4234,4233,4229,4233,4234,4235,4236,4235,4234,4235,4236,4237,3686,4234,3685,4234,3686,4236,3673,4238,3674,3674,4238,4239,4240,4239,4241,4239,4238,4241,4242,4241,4238,4241,4242,4243,3675,4238,3673,4238,3675,4242,3690,4239,4244,4239,3690,3674,3689,4244,4245,4244,3689,3690,4245,4246,4247,4246,4245,4244,4244,4240,4246,4240,4244,4239,2841,4248,2692,4248,2841,4249,4233,4249,4231,4249,4233,4248,4250,4231,4249,4231,4250,4232,2839,4249,2841,4249,2839,4250,4251,2696,2672,2696,4251,4252,4252,2694,2696,2694,4252,4253,4241,4253,4252,4253,4241,4243,4240,4252,4251,4252,4240,4241,4209,4211,4254,4209,4254,4210,4255,4256,4257,4257,4256,4258,4256,4259,4258,4258,4259,4260,4258,4261,4262,4261,4258,4260,4263,4264,4265,4264,4263,4266,2840,4266,4263,4266,2840,2689,2838,4263,4267,4263,2838,2840,4267,4265,4268,4265,4267,4263,4257,4262,4269,4262,4257,4258,4269,4270,4271,4270,4269,4262,4262,4272,4270,4272,4262,4261,4270,3615,3622,3615,4270,4272,4273,4274,4275,4273,4275,4276,4277,4278,4274,4277,4274,4273,2695,4277,4273,2695,4273,2693,2693,4273,4276,2693,4276,2671,2617,4279,2622,4279,2617,4206,2622,4280,2623,4280,2622,4279,4280,4281,4282,4281,4280,4279,4279,4207,4281,4207,4279,4206,2636,4283,4215,4283,2636,2643,4283,4214,4215,4214,4283,4284,4284,4285,4286,4285,4284,4283,2643,4285,4283,4285,2643,2644,3906,4287,4288,4287,3906,3905,4288,4289,4290,4289,4288,4287,4291,4292,3923,3923,4292,3924,4293,4294,4291,4294,4292,4291,4295,4296,4297,4296,4298,4297,4289,4298,4290,4298,4289,4297,4299,4300,4301,4300,4299,4302,4294,4293,4302,4302,4299,4294,4265,4303,4304,4303,4265,4264,4268,4304,4305,4304,4268,4265,4305,4306,4307,4306,4305,4304,4304,4308,4306,4308,4304,4303,4274,4309,4275,4309,4274,4310,4310,4311,4309,4311,4310,4312,4313,4312,4310,4312,4313,4314,4278,4310,4274,4310,4278,4313,2631,4315,4316,4315,2631,2634,165,4316,166,4316,165,2631,170,4316,4317,4316,170,166,4317,4315,4318,4315,4317,4316,4319,2652,4320,2652,4319,2655,4321,4322,4319,4321,4319,4320,174,4321,4320,174,4320,172,4320,177,172,177,4320,2652,4323,4324,4325,4324,4323,4326,4326,4327,4324,4327,4326,4328,3371,4328,4326,4328,3371,3373,3372,4326,4323,4326,3372,3371,4329,4330,4331,4330,4329,4332,4332,3389,4330,3389,4332,3387,4333,3387,4332,3387,4333,3386,4334,4332,4329,4332,4334,4333,4335,4336,4337,4336,4335,4338,4338,4325,4336,4325,4338,4323,3381,4323,4338,4323,3381,3372,3382,4338,4335,4338,3382,3381,4339,4340,4341,4340,4339,4342,3399,4342,3397,4342,3399,4340,3397,4330,3389,4330,3397,4342,4331,4342,4339,4342,4331,4330,4343,4344,4345,4344,4343,4346,4346,4337,4344,4337,4346,4335,3445,4335,4346,4335,3445,3382,3446,4346,4343,4346,3446,3445,4347,4348,4349,4348,4347,4350,3451,4349,3449,4349,3451,4347,3449,4340,3399,4340,3449,4349,4349,4341,4340,4341,4349,4348,4306,4325,4324,4325,4306,4308,4306,4324,4307,4307,4324,4327,4331,4311,4312,4312,4329,4331,4314,4329,4312,4329,4314,4334,4351,4296,4295,4296,4351,4352,4353,4352,4351,4352,4353,4341,4311,4339,4354,4339,4311,4331,4354,4341,4353,4341,4354,4339,4344,4355,4356,4355,4344,4337,4357,4345,4344,4344,4356,4357,4293,4357,4356,4356,4302,4293,4356,4300,4302,4300,4356,4355,4301,4300,4358,4355,4358,4300,4358,4355,4359,4337,4359,4355,4336,4308,4360,4308,4336,4325,4337,4360,4359,4360,4337,4336,4285,2655,4319,2655,4285,2644,4286,4319,4322,4319,4286,4285,4280,2634,2623,2634,4280,4315,4315,4282,4318,4282,4315,4280,4348,4352,4341,4352,4348,4361,4361,4296,4352,4296,4361,4298,4290,4361,4362,4361,4290,4298,4362,4348,4350,4348,4362,4361,4363,4364,4365,4364,4363,4366,4264,4365,4303,4365,4264,4363,4303,4360,4308,4360,4303,4365,4365,4359,4360,4359,4365,4364,4367,4368,4369,4368,4367,4370,4370,4353,4368,4353,4370,4354,4309,4354,4370,4354,4309,4311,4275,4370,4367,4370,4275,4309,4371,4372,4373,4372,4371,4374,4366,4373,4364,4373,4366,4371,4364,4358,4359,4358,4364,4373,4373,4301,4358,4301,4373,4372,4375,4376,4377,4376,4375,4378,4378,4295,4376,4295,4378,4351,4368,4351,4378,4351,4368,4353,4369,4378,4375,4378,4369,4368,2691,4379,4380,4379,2691,2675,2689,4380,4266,4380,2689,2691,4266,4363,4264,4363,4266,4380,4380,4366,4363,4366,4380,4379,2669,4381,2235,4381,2669,4382,4382,4369,4381,4369,4382,4367,4276,4367,4382,4367,4276,4275,2671,4382,2669,4382,2671,4276,2674,4383,4384,4383,2674,2233,2675,4384,4379,4384,2675,2674,4379,4371,4366,4371,4379,4384,4384,4374,4371,4374,4384,4383,4385,2236,4386,2236,4385,2223,4377,4386,4375,4386,4377,4385,4375,4381,4369,4381,4375,4386,4386,2235,4381,2235,4386,2236,4271,3622,3623,3622,4271,4270,4387,4388,4389,4388,4387,4390,4391,4387,4392,4387,4389,4392,4393,4394,4391,4394,4387,4391,4394,4390,4387,4390,4394,4395,4396,3610,4397,3610,4396,3619,4390,4397,4388,4397,4390,4396,4395,4396,4390,4396,4395,4398,4398,3619,4396,3619,4398,3618,3274,4399,3271,4399,3274,4400,3246,4400,3274,4400,3246,4040,4040,3991,3990,4040,3990,4400,4400,3990,3974,4400,3974,4399,3281,4401,3954,4401,3281,3341,3341,3271,4401,4401,3271,4399,3973,4399,3974,4399,3973,4401,4402,4235,4237,4235,4402,4403,4248,4235,4403,4235,4248,4233,2692,4403,2690,4403,2692,4248,2673,4403,4402,4403,2673,2690,4404,4246,4405,4246,4404,4247,2234,4405,2670,4405,2234,4404,2672,2670,4405,4405,4251,2672,4251,4405,4246,4246,4240,4251,4406,4407,4408,4407,4406,4409,4409,3686,4407,3686,4409,4236,4410,4236,4409,4236,4410,4237,4411,4409,4406,4409,4411,4410,4412,4410,4411,4410,4412,4413,4413,4237,4410,4237,4413,4402,2673,4413,2676,4413,2673,4402,2232,4413,4412,4413,2232,2676,4414,4415,4416,4415,4414,4417,4418,4416,4419,4416,4418,4414,4419,4245,4247,4245,4419,4416,4416,3689,4245,3689,4416,4415,4420,4419,4421,4419,4420,4418,2222,4421,2237,4421,2222,4420,2234,2237,4421,2234,4421,4404,4421,4247,4404,4247,4421,4419,3651,4422,4423,4422,3651,3653,4423,3634,3651,3634,4423,3683,4407,3683,4423,3683,4407,3686,4408,4423,4422,4423,4408,4407,3654,4424,3657,4424,3654,4425,4425,4417,4424,4417,4425,4415,3687,4415,4425,4415,3687,3689,3643,4425,3654,4425,3643,3687,4397,3611,4426,3611,4397,3610,4388,4426,4427,4426,4388,4397,4427,1777,1779,1777,4427,4426,4426,1771,1777,1771,4426,3611,4272,3614,3615,3614,4272,4428,4428,1768,3614,1768,4428,1773,4429,1773,4428,1773,4429,1776,4261,4428,4272,4428,4261,4429,4389,4427,4430,4427,4389,4388,4392,4389,4431,4389,4430,4431,4431,4430,1787,4430,1785,1787,4430,1779,1785,1779,4430,4427,4260,4429,4261,4429,4260,4432,4432,1776,4429,1776,4432,1781,4433,1784,4432,4432,1784,1781,4259,4433,4260,4260,4433,4432,4434,4392,4435,4392,4431,4435,4436,4435,4437,4435,4436,4434,4437,1793,1795,1793,4437,4435,4435,4431,1793,4431,1787,1793,4438,4439,4259,4259,4439,4433,4439,1789,4433,4433,1789,1784,4440,1789,4439,1789,4440,1792,4441,4439,4438,4439,4441,4440,4442,1803,1804,1803,4442,4443,4443,1795,1803,1795,4443,4437,4444,4437,4443,4437,4444,4436,4445,4443,4442,4443,4445,4444,4446,1800,4447,1800,4446,1799,4448,4447,4449,4447,4448,4446,4449,4440,4441,4440,4449,4447,4447,1792,4440,1792,4447,1800,4450,1809,1808,1809,4450,4451,4451,1804,1809,1804,4451,4442,4452,4442,4451,4442,4452,4445,4453,4451,4450,4451,4453,4452,4450,1805,4454,1805,4450,1808,4453,4454,4455,4454,4453,4450,4455,4446,4448,4446,4455,4454,4454,1799,4446,1799,4454,1805,4456,4457,4445,4456,4445,4452,4458,4457,4459,4459,4457,4456,4459,4460,4461,4460,4459,4456,4456,4453,4460,4453,4456,4452,4462,4448,4463,4448,4462,4455,4462,4453,4455,4453,4462,4460,4464,4460,4462,4460,4464,4461,4464,4463,4465,4463,4464,4462,4457,4444,4445,4444,4457,4466,4466,4436,4444,4436,4466,4467,4468,4467,4466,4467,4468,4469,4458,4466,4457,4466,4458,4468,4470,4393,4471,4393,4391,4471,4469,4471,4467,4471,4469,4470,4467,4434,4436,4434,4467,4471,4471,4391,4434,4391,4392,4434,4463,4449,4472,4449,4463,4448,4465,4472,4473,4472,4465,4463,4473,4474,4475,4474,4473,4472,4472,4441,4474,4441,4472,4449,4476,4477,4255,4255,4477,4256,4477,4438,4256,4256,4438,4259,4474,4438,4477,4438,4474,4441,4475,4477,4476,4477,4475,4474,3646,4478,108,4478,3646,4479,4479,4480,4478,4480,4479,4481,4481,4398,4395,4398,4481,4479,3618,4479,3646,4479,3618,4398,4482,3648,121,3648,4482,4483,4483,3623,3648,3623,4483,4271,4484,4271,4483,4271,4484,4269,4485,4483,4482,4483,4485,4484,4481,4486,4480,4486,4481,4487,4488,4486,4489,4486,4487,4489,4489,4487,4393,4487,4394,4393,4487,4395,4394,4395,4487,4481,4490,4484,4485,4484,4490,4491,4491,4269,4484,4269,4491,4257,4492,4255,4491,4491,4255,4257,4493,4492,4490,4490,4492,4491,4494,4470,4469,4470,4494,4495,4489,4470,4495,4470,4489,4393,4488,4495,4496,4495,4488,4489,4496,4494,4497,4494,4496,4495,4498,4476,4499,4476,4498,4475,4500,4501,4498,4500,4498,4499,4493,4500,4499,4493,4499,4492,4499,4255,4492,4255,4499,4476,4502,4458,4503,4458,4502,4468,4494,4468,4502,4468,4494,4469,4497,4502,4504,4502,4497,4494,4504,4503,4505,4503,4504,4502,4506,4507,4465,4506,4465,4473,4508,4509,4507,4508,4507,4506,4501,4508,4506,4501,4506,4498,4498,4506,4473,4498,4473,4475,4510,4511,4505,4505,4503,4510,4512,4513,4511,4511,4510,4512,4461,4512,4510,4510,4459,4461,4459,4510,4503,4503,4458,4459,4514,4515,4509,4509,4515,4507,4515,4464,4507,4507,4464,4465,4512,4461,4515,4515,4461,4464,4513,4512,4514,4514,4512,4515,4516,4517,4518,4517,4516,4519,108,4518,111,4518,108,4516,111,4520,114,4520,111,4518,4518,4521,4520,4521,4518,4517,4522,4523,4524,4523,4522,4525,4526,4524,4527,4524,4526,4522,4527,118,115,118,4527,4524,4524,121,118,121,4524,4523,4528,4529,4530,4529,4528,4531,4519,4530,4517,4530,4519,4528,4517,4532,4521,4532,4517,4530,4530,4533,4532,4533,4530,4529,4534,4535,4536,4535,4534,4537,4536,4538,4534,4538,4536,4539,4539,4522,4526,4522,4539,4536,4536,4525,4522,4525,4536,4535,4540,4541,4542,4541,4540,4543,4531,4542,4529,4542,4531,4540,4529,4544,4533,4544,4529,4542,4542,4545,4544,4545,4542,4541,4546,4547,4548,4547,4546,4549,4549,4550,4547,4550,4549,4551,4534,4551,4549,4551,4534,4538,4537,4549,4546,4549,4537,4534,4552,4553,4554,4553,4552,4555,4543,4554,4541,4554,4543,4552,4541,4556,4545,4556,4541,4554,4554,4557,4556,4557,4554,4553,4558,4559,4560,4559,4558,4561,4561,4562,4559,4562,4561,4563,4547,4563,4561,4563,4547,4550,4548,4561,4558,4561,4548,4547,4553,4564,4557,4564,4553,4565,4565,4566,4564,4566,4565,4567,4568,4567,4565,4567,4568,4569,4555,4565,4553,4565,4555,4568,4559,4570,4571,4570,4559,4562,4560,4571,4572,4571,4560,4559,4572,4573,4574,4573,4572,4571,4571,4575,4573,4575,4571,4570,4520,4576,4577,4576,4520,4521,114,4577,3650,4577,114,4520,3650,4577,3653,4577,4578,3653,4578,4577,4576,4576,4579,4578,4527,4580,4526,4580,4527,4581,4582,4580,4581,4580,4582,4583,3657,4581,3655,4581,3657,4582,115,4581,4527,4581,115,3655,4532,4584,4585,4584,4532,4533,4521,4585,4576,4585,4521,4532,4579,4576,4585,4585,4586,4579,4585,4587,4586,4587,4585,4584,4539,4588,4538,4588,4539,4589,4589,4590,4588,4590,4589,4591,4583,4589,4580,4589,4583,4591,4526,4589,4539,4589,4526,4580,4544,4592,4593,4592,4544,4545,4533,4593,4584,4593,4533,4544,4584,4594,4587,4594,4584,4593,4593,4595,4594,4595,4593,4592,4551,4596,4550,4596,4551,4597,4597,4598,4596,4598,4597,4599,4588,4599,4597,4599,4588,4590,4538,4597,4551,4597,4538,4588,4556,4600,4601,4600,4556,4557,4545,4601,4592,4601,4545,4556,4592,4602,4595,4602,4592,4601,4601,4603,4602,4603,4601,4600,4563,4604,4562,4604,4563,4605,4605,4606,4604,4606,4605,4607,4596,4607,4605,4607,4596,4598,4550,4605,4563,4605,4550,4596,4564,4608,4609,4608,4564,4566,4557,4609,4600,4609,4557,4564,4600,4610,4603,4610,4600,4609,4609,4611,4610,4611,4609,4608,4570,4612,4575,4612,4570,4613,4613,4614,4612,4614,4613,4615,4604,4615,4613,4615,4604,4606,4562,4613,4570,4613,4562,4604,4616,4617,4618,4617,4619,4618,4579,4618,4578,4618,4579,4616,3653,4578,4618,3653,4618,4422,4618,4619,4422,4619,4408,4422,4620,4621,4622,4621,4620,4623,4424,4623,4620,4623,4424,4417,3657,4620,4582,4620,3657,4424,4583,4620,4622,4620,4583,4582,4586,4624,4625,4624,4586,4587,4616,4579,4586,4586,4625,4616,4626,4616,4625,4616,4626,4617,4626,4625,4624,4624,4627,4626,4591,4628,4590,4628,4591,4629,4629,4630,4628,4628,4630,4631,4622,4630,4629,4630,4622,4621,4622,4591,4583,4591,4622,4629,4594,4632,4633,4632,4594,4595,4587,4633,4624,4633,4587,4594,4627,4624,4633,4633,4634,4627,4634,4633,4632,4632,4635,4634,4599,4636,4598,4636,4599,4637,4637,4638,4636,4636,4638,4639,4628,4631,4637,4637,4631,4638,4590,4637,4599,4637,4590,4628,4602,4640,4641,4640,4602,4603,4595,4641,4632,4641,4595,4602,4635,4632,4641,4641,4642,4635,4642,4641,4640,4640,4643,4642,4607,4644,4606,4644,4607,4645,4645,4646,4644,4644,4646,4647,4636,4639,4645,4645,4639,4646,4598,4645,4607,4645,4598,4636,4610,4648,4649,4648,4610,4611,4603,4649,4640,4649,4603,4610,4640,4650,4643,4650,4640,4649,4649,4651,4650,4651,4649,4648,4615,4652,4614,4652,4615,4653,4653,4654,4652,4654,4653,4655,4644,4655,4653,4655,4644,4647,4606,4653,4615,4653,4606,4644,4656,4619,4617,4619,4656,4657,4657,4408,4619,4408,4657,4406,4658,4406,4657,4406,4658,4411,4659,4657,4656,4657,4659,4658,4623,4660,4621,4660,4623,4661,4662,4661,4663,4661,4662,4660,4663,4414,4418,4414,4663,4661,4661,4417,4414,4417,4661,4623,4664,4626,4627,4627,4665,4664,4664,4617,4626,4617,4664,4656,4666,4656,4664,4656,4666,4659,4667,4664,4665,4664,4667,4666,4630,4668,4631,4669,4631,4668,4668,4670,4669,4670,4668,4671,4660,4671,4668,4671,4660,4662,4621,4668,4630,4668,4621,4660,4672,4673,4674,4673,4672,4675,4635,4674,4634,4674,4635,4672,4634,4665,4627,4665,4634,4674,4674,4667,4665,4667,4674,4673,4676,4677,4678,4677,4676,4679,4679,4670,4677,4670,4679,4669,4638,4669,4679,4669,4638,4631,4639,4679,4676,4679,4639,4638,4680,4681,4682,4681,4680,4683,4643,4682,4642,4682,4643,4680,4642,4672,4635,4672,4642,4682,4682,4675,4672,4675,4682,4681,4684,4685,4686,4685,4684,4687,4687,4678,4685,4678,4687,4676,4646,4676,4687,4676,4646,4639,4647,4687,4684,4687,4647,4646,4688,4650,4651,4651,4689,4688,4680,4643,4650,4650,4688,4680,4683,4680,4688,4688,4690,4683,4690,4688,4689,4689,4691,4690,4655,4692,4654,4654,4692,4693,4692,4694,4693,4693,4694,4695,4684,4686,4692,4692,4686,4694,4647,4684,4655,4655,4684,4692,4696,4658,4659,4658,4696,4697,4697,4411,4658,4411,4697,4412,2230,4412,4697,4412,2230,2232,4697,2070,2230,2070,4697,4696,4698,4663,4699,4663,4698,4662,2061,4699,2224,4699,2061,4698,2224,4420,2222,4420,2224,4699,4699,4418,4420,4418,4699,4663,4700,4666,4667,4666,4700,4701,4701,4659,4666,4659,4701,4696,4696,2071,2070,2071,4696,4701,2074,4701,4700,4701,2074,2071,4702,4671,4703,4671,4702,4670,2064,4703,2060,4703,2064,4702,2060,4698,2061,4698,2060,4703,4703,4662,4698,4662,4703,4671,2076,4704,2078,2078,4704,4705,4704,4673,4705,4675,4705,4673,4700,4667,4704,4673,4704,4667,2074,4700,2076,4704,2076,4700,4706,2066,2068,2068,4707,4706,4702,2064,2066,2066,4706,4702,4670,4702,4706,4706,4677,4670,4677,4706,4707,4707,4678,4677,2096,4705,4708,4705,2096,2078,2090,4708,4709,4708,2090,2096,4709,4681,4683,4681,4709,4708,4708,4675,4681,4675,4708,4705,4710,4690,4691,4690,4710,4711,4711,4683,4690,4683,4711,4709,2088,4709,4711,4709,2088,2090,2091,4711,4710,4711,2091,2088,2094,4707,2068,4707,2094,4712,4712,4678,4707,4678,4712,4685,4713,4685,4712,4685,4713,4686,2083,4712,2094,4712,2083,4713,4714,4694,4715,4694,4714,4695,2085,4715,2082,4715,2085,4714,2082,4713,2083,4713,2082,4715,4715,4686,4713,4686,4715,4694,3954,3973,3959,3973,3954,4401,4034,3985,3987,3985,4034,4716,3268,3278,4716,3268,4716,4034,3278,3275,4717,3278,4717,4716,4716,3962,3985,3962,4716,4717,3960,4717,4718,4717,3960,3962,3275,3347,4718,4718,4717,3275,4718,3345,3948,3345,4718,3347,3960,3948,3950,3948,3960,4718,3009,4719,4720,4719,3009,3180,2739,3180,2734,3180,2739,4719,2739,2773,4719,2773,2739,2738,4719,2775,4720,2775,4719,2773,3008,3029,3007,3029,3008,4721,3008,4720,4721,4720,3008,3009,4720,2868,4721,2868,4720,2775,4721,2870,3029,2870,4721,2868,2713,4722,2768,2713,2768,2714,3177,2713,2709,2713,3177,4722,2990,4722,3177,4722,2990,4723,4722,4723,2769,4722,2769,2768,4723,2226,2229,2229,2769,4723,2991,4723,2990,4723,2991,2226,2991,2992,2227,2991,2227,2226,4724,2231,2072,2231,4724,4725,2233,4725,4383,4725,2233,2231,4383,4726,4374,4726,4383,4725,4726,4724,4727,4724,4726,4725,4728,2221,4729,2221,4728,2062,4730,4728,4731,4728,4729,4731,4385,4731,4729,4731,4385,4377,4729,2223,4385,2223,4729,2221,4732,2073,4733,2073,4732,2069,4732,2072,2069,2072,4732,4724,4727,4732,4734,4732,4727,4724,4734,4733,4735,4733,4734,4732,4736,2063,4737,2063,2059,4737,4738,4736,4739,4736,4737,4739,4739,4737,4730,4737,4728,4730,4737,2062,4728,2062,4737,2059,4733,2075,4740,2075,4733,2073,4735,4740,4741,4740,4735,4733,4741,4742,4743,4742,4741,4740,4740,2077,4742,2077,4740,2075,4736,2065,2063,2065,4736,4744,4744,2067,2065,2067,4744,4745,4745,4746,4747,4746,4745,4744,4744,4738,4746,4738,4744,4736,4748,4742,4749,4742,4748,4743,4750,4751,4748,4748,4749,4750,2087,4750,4749,4749,2095,2087,4749,2077,2095,2077,4749,4742,4750,2089,4752,2089,4750,2087,4751,4752,4753,4752,4751,4750,4753,4754,4755,4754,4753,4752,4752,2092,4754,2092,4752,2089,4756,4745,4747,4745,4756,4757,4757,2067,4745,2067,4757,2093,2081,4757,4758,4757,2081,2093,4758,4756,4759,4756,4758,4757,4758,2084,2081,2084,4758,4760,4760,2086,2084,2086,4760,4761,4762,4761,4760,4761,4762,4763,4759,4760,4758,4760,4759,4762,4764,4727,4765,4727,4764,4726,4374,4764,4372,4764,4374,4726,4372,4299,4301,4299,4372,4764,4299,4765,4294,4765,4299,4764,4766,4730,4767,4730,4731,4767,4289,4766,4297,4297,4766,4767,4376,4297,4767,4297,4376,4295,4377,4767,4731,4767,4377,4376,2644,2656,2655,2656,2644,2645,2635,2623,2634,2623,2635,2624,4768,4769,4770,4771,4769,4768,4772,4773,4774,4773,4775,4774,4776,4135,4777,4135,4776,4778,4773,4772,4768,4770,4773,4768,4779,4780,4781,4780,4779,4782,4783,4782,4779,4782,4783,4784,4785,4786,4787,4786,4788,4787,4787,4788,4789,4788,4790,4789,4791,4792,4793,4792,4791,4794,4794,4795,4796,4795,4794,4791,4797,4798,4799,4798,4797,4800,4800,4801,4798,4801,4800,4802,4802,4291,3923,4291,4802,4800,4800,4293,4291,4293,4800,4797,4357,4797,4803,4797,4357,4293,4345,4803,4804,4803,4345,4357,4804,4805,4806,4805,4804,4803,4803,4799,4805,4799,4803,4797,4796,4807,4808,4807,4796,4795,4809,4810,4811,4812,4811,4810,4808,4778,4776,4778,4808,4807,4813,4814,4809,4810,4809,4814,4815,4816,4817,4816,4815,4818,4818,4290,4816,4290,4818,4288,4819,4288,4818,4288,4819,3906,4820,4818,4815,4818,4820,4819,4816,4362,4821,4362,4816,4290,4817,4821,4822,4821,4817,4816,4822,4823,4824,4823,4822,4821,4821,4350,4823,4350,4821,4362,4292,4765,4825,4765,4292,4294,3924,4825,4826,4825,3924,4292,4735,4826,4825,4825,4734,4735,4734,4825,4765,4765,4727,4734,4287,4766,4289,4766,4287,4827,4739,4766,4827,4766,4739,4730,4738,4827,4828,4827,4738,4739,3905,4827,4287,4827,3905,4828,4829,4830,4813,4814,4813,4830,4771,4829,4769,4829,4771,4830,4831,4832,4833,4833,4832,4834,4835,4832,4831,4832,4835,4836,4837,3921,3901,3921,4837,4838,3923,4838,4802,4838,3923,3921,4802,4839,4801,4839,4802,4838,4838,4840,4839,4840,4838,4837,4833,4841,4842,4841,4833,4834,4842,4841,4843,4841,4844,4843,4845,4784,4783,4784,4845,4846,4793,4846,4845,4846,4793,4792,4847,3904,4848,3904,4847,3896,4849,4848,4850,4848,4849,4847,4850,4819,4820,4819,4850,4848,4848,3906,4819,3906,4848,3904,3922,4826,4851,4826,3922,3924,3902,4851,4852,4851,3902,3922,4852,4741,4743,4741,4852,4851,4851,4735,4741,4735,4851,4826,4853,4748,4751,4748,4853,4854,4854,4743,4748,4743,4854,4852,3899,4852,4854,4852,3899,3902,2647,4854,4853,4854,2647,3899,3903,4828,3905,4828,3903,4855,4855,4738,4828,4738,4855,4746,4856,4746,4855,4746,4856,4747,3895,4855,3903,4855,3895,4856,4857,4756,4858,4756,4857,4759,2626,4858,3893,4858,2626,4857,3893,4856,3895,4856,3893,4858,4858,4747,4856,4747,4858,4756,4789,4790,4859,4790,4860,4859,4859,4860,4812,4860,4811,4812,4861,4836,4835,4836,4861,4862,4781,4862,4861,4862,4781,4780,4843,4844,4863,4844,4864,4863,4863,4864,4785,4864,4786,4785,4865,4866,4867,4866,4868,4867,4869,4866,4865,4866,4869,4870,4871,4837,4872,4837,4871,4840,4873,4872,4874,4872,4873,4871,4874,3900,2646,3900,4874,4872,4872,3901,3900,3901,4872,4837,4875,4847,4849,4847,4875,4876,4876,3896,4847,3896,4876,3894,4877,3894,4876,3894,4877,2627,4878,4876,4875,4876,4878,4877,4853,4753,4879,4753,4853,4751,2647,4879,2649,4879,2647,4853,2649,4880,2650,4880,2649,4879,4879,4755,4880,4755,4879,4753,4857,4762,4759,4762,4857,4881,4881,4763,4762,4763,4881,4882,2628,4882,4881,4882,2628,2629,2626,4881,4857,4881,2626,2628,4867,4868,4883,4868,4884,4883,4885,4886,4869,4869,4886,4870,4883,4884,4887,4884,4888,4887,4889,4886,4885,4886,4889,4890,4887,4888,4891,4888,4892,4891,4893,4890,4889,4890,4893,4894,4891,4892,4895,4892,4896,4895,4897,4894,4893,4894,4897,4898,4874,2648,4899,2648,4874,2646,4873,4874,4900,4900,4874,4899,4900,4901,4902,4901,4900,4899,4899,2651,4901,2651,4899,2648,4877,2625,2627,2625,4877,4903,4903,2630,2625,2630,4903,4904,4905,4904,4903,4904,4905,4906,4905,4877,4878,4877,4905,4903,4907,4806,4908,4806,4907,4804,4343,4804,4907,4804,4343,4345,4909,4343,4907,4343,4909,3446,4909,4908,4910,4908,4909,4907,4911,4824,4912,4824,4823,4912,4913,4911,4914,4911,4912,4914,4914,4347,3451,4347,4914,4912,4347,4912,4823,4823,4350,4347,4915,4909,4910,4909,4915,4916,4916,3446,4909,3446,4916,3444,4917,3444,4916,3444,4917,3439,4918,4916,4915,4916,4918,4917,4919,4914,4920,4914,4919,4913,4921,4920,4922,4920,4921,4919,4922,3448,3442,3448,4922,4920,4920,3451,3448,3451,4920,4914,4923,4924,4925,4924,4923,4926,4926,4918,4924,4918,4926,4917,4926,3438,3439,4926,3439,4917,3421,4926,4923,4926,3421,3438,4927,4928,4929,4928,4927,4930,4930,3428,4928,3428,4930,3443,4922,3442,4930,4930,3442,3443,4930,4921,4922,4921,4930,4927,4931,4932,4933,4932,4931,4934,4934,4925,4932,4925,4934,4923,3419,4923,4934,4923,3419,3421,3420,4934,4931,4934,3420,3419,4935,4936,4937,4936,4935,4938,4938,3431,4936,3431,4938,3429,4928,3429,4938,3429,4928,3428,4929,4938,4935,4938,4929,4928,3424,4931,4939,4931,3424,3420,3425,4939,3456,4939,3425,3424,3456,4940,3457,4940,3456,4939,4939,4933,4940,4933,4939,4931,4936,3433,4941,3433,4936,3431,4941,4937,4936,4937,4941,4942,3466,4942,4941,4942,3466,3465,4941,3435,3466,3435,4941,3433,4943,3552,4944,3552,4943,3478,4944,4945,4943,4945,4944,4946,4940,4946,4944,4946,4940,4933,4944,3457,4940,3457,4944,3552,4946,4947,4945,4947,4946,4948,4948,4949,4947,4949,4948,4950,4932,4950,4948,4950,4932,4925,4933,4948,4946,4948,4933,4932,3556,4951,4952,4951,3556,3499,3465,4952,4942,4952,3465,3556,4942,4953,4937,4953,4942,4952,4952,4954,4953,4954,4952,4951,4953,4955,4956,4955,4953,4954,4956,4937,4953,4937,4956,4935,4957,4935,4956,4935,4957,4929,4956,4958,4957,4958,4956,4955,4950,4959,4949,4959,4950,4960,4960,4961,4959,4961,4960,4962,4924,4962,4960,4962,4924,4918,4925,4960,4950,4960,4925,4924,4957,4963,4964,4963,4957,4958,4964,4929,4957,4929,4964,4927,4927,4965,4921,4965,4927,4964,4966,4964,4963,4964,4966,4965,4967,4968,4969,4968,4967,4970,4967,4910,4970,4910,4967,4915,4918,4967,4962,4967,4918,4915,4962,4969,4961,4969,4962,4967,4971,4972,4973,4972,4974,4973,4966,4971,4965,4971,4973,4965,4965,4973,4921,4973,4919,4921,4973,4913,4919,4913,4973,4974,4975,4970,4910,4910,4908,4975,4976,4968,4970,4970,4975,4976,4977,4976,4975,4975,4978,4977,4978,4975,4908,4908,4806,4978,4979,4913,4974,4913,4979,4911,4980,4911,4979,4911,4980,4824,4981,4979,4982,4979,4981,4980,4982,4974,4972,4974,4982,4979,4983,4984,4985,4984,4983,4986,4805,4984,4986,4984,4805,4799,4806,4986,4978,4986,4806,4805,4977,4986,4983,4986,4977,4978,4987,4988,4989,4988,4987,4990,4981,4989,4980,4989,4981,4987,4980,4989,4824,4989,4822,4824,4989,4988,4822,4988,4817,4822,4798,4991,4992,4991,4798,4801,4799,4992,4984,4992,4799,4798,4985,4992,4993,4992,4985,4984,4992,4994,4993,4994,4992,4991,4995,4815,4996,4815,4995,4820,4997,4996,4998,4996,4997,4995,4990,4998,4996,4990,4996,4988,4996,4817,4988,4817,4996,4815,4991,4999,4994,4999,4991,5000,5000,5001,4999,5001,5000,5002,4839,5002,5000,5002,4839,4840,4801,5000,4991,5000,4801,4839,5003,4995,4997,4995,5003,5004,5004,4820,4995,4820,5004,4850,5005,4850,5004,4850,5005,4849,5006,5004,5003,5004,5006,5005,5002,5007,5001,5007,5002,5008,5008,5009,5007,5009,5008,5010,5010,4871,4873,4871,5010,5008,4840,5008,5002,5008,4840,4871,5011,5005,5006,5005,5011,5012,5012,4849,5005,4849,5012,4875,5013,4875,5012,4875,5013,4878,5014,5012,5011,5012,5014,5013,5015,5010,5016,5010,5015,5009,5017,5016,5018,5016,5017,5015,5018,4900,4902,4900,5018,5016,5016,4873,4900,4873,5016,5010,5019,5013,5014,5013,5019,5020,5020,4878,5013,4878,5020,4905,5021,4905,5020,4905,5021,4906,5022,5020,5019,5020,5022,5021,5023,5024,5025,5024,5023,5026,5027,5026,5028,5026,5027,5024,5028,5015,5017,5015,5028,5026,5009,5026,5023,5026,5009,5015,5029,5030,5031,5030,5029,5032,5032,5014,5030,5014,5032,5019,5033,5019,5032,5019,5033,5022,5034,5032,5029,5032,5034,5033,5035,5036,5037,5036,5035,5038,5039,5038,5040,5038,5039,5036,5040,5024,5027,5024,5040,5038,5038,5025,5024,5025,5038,5035,5041,5042,5043,5042,5041,5044,5044,5031,5042,5031,5044,5029,5045,5029,5044,5029,5045,5034,5046,5044,5041,5044,5046,5045,5047,5048,5049,5048,5047,5050,5050,5025,5048,5025,5050,5023,5007,5023,5050,5023,5007,5009,5001,5050,5047,5050,5001,5007,5051,5052,5053,5052,5051,5054,5053,5037,5051,5037,5053,5035,5048,5035,5053,5035,5048,5025,5049,5053,5052,5053,5049,5048,5055,5056,5057,5056,5055,5058,5058,5006,5056,5006,5058,5011,5030,5011,5058,5011,5030,5014,5031,5058,5055,5058,5031,5030,5059,5060,5061,5060,5059,5062,5061,5057,5059,5057,5061,5055,5042,5055,5061,5055,5042,5031,5043,5061,5060,5061,5043,5042,5063,5064,5065,5064,5063,5066,5066,5049,5064,5049,5066,5047,4999,5047,5066,5047,4999,5001,4994,5066,5063,5066,4994,4999,5052,5064,5049,5064,5052,5067,5067,5065,5064,5065,5067,5068,5069,5068,5067,5068,5069,5070,5054,5067,5052,5067,5054,5069,5071,5072,5073,5072,5071,5074,5074,4997,5072,4997,5074,5003,5056,5003,5074,5003,5056,5006,5057,5074,5071,5074,5057,5056,5071,5059,5057,5059,5071,5075,5075,5062,5059,5062,5075,5076,5076,5077,5078,5077,5076,5075,5075,5073,5077,5073,5075,5071,5063,4993,4994,4993,5063,5079,5079,4985,4993,4985,5079,5080,5081,5080,5079,5080,5081,5082,5065,5079,5063,5079,5065,5081,5083,5084,5085,5084,5083,5086,5070,5085,5068,5085,5070,5083,5068,5081,5065,5081,5068,5085,5085,5082,5081,5082,5085,5084,5087,5080,5082,5080,5087,5088,5088,4985,5080,4985,5088,4983,5089,4983,5088,4983,5089,4977,5090,5088,5087,5088,5090,5089,5091,5084,5086,5084,5091,5092,5092,5082,5084,5082,5092,5087,5093,5087,5092,5087,5093,5090,5094,5092,5091,5092,5094,5093,5072,4998,5095,4998,5072,4997,5073,5095,5096,5095,5073,5072,5096,5097,5098,5097,5096,5095,5095,4990,5097,4990,5095,4998,5099,5100,5101,5100,5099,5102,5102,5098,5100,5098,5102,5096,5077,5096,5102,5096,5077,5073,5078,5102,5099,5102,5078,5077,5103,5097,5104,5097,5103,5098,5105,5104,5106,5104,5105,5103,5106,4987,4981,4987,5106,5104,5104,4990,4987,4990,5104,5097,5107,5100,5108,5100,5107,5101,5109,5108,5110,5108,5109,5107,5110,5103,5105,5103,5110,5108,5108,5098,5103,5098,5108,5100,5111,5112,4968,4968,4976,5111,5113,5114,5112,5112,5111,5113,5113,5089,5090,5089,5113,5111,5089,5111,4976,4976,4977,5089,5115,5093,5094,5093,5115,5116,5116,5090,5093,5090,5116,5113,5114,5116,5117,5116,5114,5113,5117,5115,5118,5115,5117,5116,5119,4972,5120,4972,5119,4982,5106,4982,5119,4982,5106,4981,5121,5106,5119,5106,5121,5105,5121,5120,5122,5120,5121,5119,5123,5110,5124,5110,5123,5109,5125,5123,5126,5123,5124,5126,5126,5124,5122,5124,5121,5122,5124,5105,5121,5105,5124,5110,5127,5114,5128,5114,5127,5112,4969,5112,5127,5112,4969,4968,4961,5127,5129,5127,4961,4969,5129,5128,5130,5128,5129,5127,5131,5118,5132,5118,5131,5117,5128,5117,5131,5117,5128,5114,5130,5131,5133,5131,5130,5128,5133,5132,5134,5132,5133,5131,5135,5122,5136,5122,5120,5136,5137,5135,5138,5135,5136,5138,5138,5136,4966,5136,4971,4966,5136,5120,4971,5120,4972,4971,5139,5125,5140,5125,5126,5140,5141,5139,5142,5139,5140,5142,5142,5140,5137,5140,5135,5137,5140,5126,5135,5126,5122,5135,5143,5144,5145,5144,5143,5146,5146,5130,5144,5130,5146,5129,4959,5129,5146,5129,4959,4961,4949,5146,5143,5146,4949,4959,5147,5148,5149,5148,5147,5150,5150,5134,5148,5134,5150,5133,5144,5133,5150,5133,5144,5130,5145,5150,5147,5150,5145,5144,5151,5152,5153,5152,5151,5154,4958,5154,4963,5154,4958,5152,4963,5138,4966,5138,4963,5154,5137,5154,5151,5154,5137,5138,5155,5156,5157,5156,5155,5158,5158,5153,5156,5153,5158,5151,5142,5151,5158,5151,5142,5137,5141,5158,5155,5158,5141,5142,5159,5160,5161,5160,5159,5162,5162,5145,5160,5145,5162,5143,4947,5143,5162,5143,4947,4949,4945,5162,5159,5162,4945,4947,5163,5164,5165,5164,5163,5166,5165,5149,5163,5149,5165,5147,5160,5147,5165,5147,5160,5145,5161,5165,5164,5165,5161,5160,5167,5168,5169,5168,5167,5170,4954,5169,4955,5169,4954,5167,4955,5152,4958,5152,4955,5169,5153,5169,5168,5169,5153,5152,5171,5172,5173,5172,5171,5174,5170,5173,5168,5173,5170,5171,5156,5168,5173,5168,5156,5153,5157,5173,5172,5173,5157,5156,5159,5175,5176,5175,5159,5161,4943,4945,5159,4943,5159,5176,4943,3474,3478,3474,4943,5176,5176,3477,3474,3477,5176,5175,5161,5177,5175,5177,5161,5178,5177,3486,5175,5175,3486,3477,3487,5177,5179,3487,3486,5177,5179,5177,5178,5178,5180,5179,5164,5178,5161,5178,5164,5181,5181,5180,5178,5180,5181,5182,5183,5182,5181,5182,5183,5184,5166,5181,5164,5181,5166,5183,5167,5185,5170,5185,5167,5186,5186,3496,5185,3496,5186,3494,4951,3494,5186,3494,4951,3499,4951,5167,4954,5167,4951,5186,5170,5187,5188,5187,5170,5185,5189,5188,5187,5188,5189,5190,3507,5187,3506,3507,5189,5187,5187,5185,3506,5185,3496,3506,5188,5171,5170,5171,5188,5191,5191,5174,5171,5174,5191,5192,5193,5192,5191,5192,5193,5194,5190,5191,5188,5191,5190,5193,3516,5179,5195,5179,3516,3487,5195,3517,3516,3517,5195,5196,5197,5196,5195,5196,5197,5198,5180,5195,5179,5195,5180,5197,3525,5189,3507,5189,3525,5199,5199,5190,5189,5190,5199,5200,5201,5200,5199,5200,5201,5202,5199,3527,5201,3527,5199,3525,5182,5197,5180,5197,5182,5203,5203,5198,5197,5198,5203,5204,5205,5204,5203,5204,5205,4163,5184,5203,5182,5203,5184,5205,5200,5193,5190,5193,5200,5206,5206,5194,5193,5194,5206,5207,5208,5207,5206,5207,5208,4079,5202,5206,5200,5206,5202,5208,5209,5196,5198,5198,5210,5209,5209,5211,5196,5196,5211,3517,5212,5213,5209,5211,5209,5213,5212,5209,5210,5210,5214,5212,5204,5210,5198,5210,5204,5215,5215,5214,5210,5214,5215,5216,4161,5216,5215,5216,4161,4162,4163,5215,5204,5215,4163,4161,5217,5202,5201,5202,5217,5218,5219,5218,5217,5218,5219,5220,5219,5217,5221,5217,5222,5221,5217,5201,5222,5201,3527,5222,5218,5208,5202,5208,5218,5223,4079,5223,4082,5223,4079,5208,5224,4082,5223,4082,5224,4084,5220,5223,5218,5223,5220,5224,3515,5225,3513,5225,3515,5226,5226,5227,5225,5227,5226,5228,5211,5228,5226,5228,5211,5213,3517,5226,3515,5226,3517,5211,3526,5229,5230,5229,3526,3521,3527,5230,5222,5230,3527,3526,5222,5231,5221,5231,5222,5230,5230,5232,5231,5232,5230,5229,5233,3512,5234,3512,5233,3511,5235,5234,5236,5234,5235,5233,5225,5236,5234,5236,5225,5227,3513,5234,3512,5234,3513,5225,3520,5237,5238,5237,3520,3523,5238,3521,3520,3521,5238,5229,5239,5229,5238,5229,5239,5232,5238,5240,5239,5240,5238,5237,5241,5233,5235,5233,5241,5242,5242,3511,5233,3511,5242,3547,3547,5243,3532,5243,3547,5242,5244,5242,5241,5242,5244,5243,5237,5245,5240,5245,5237,5246,5246,5247,5245,5247,5246,5248,3549,5248,5246,5248,3549,3541,3523,5246,5237,5246,3523,3549,3530,5249,3531,3531,5249,5250,5249,5251,5250,5250,5251,5252,5244,5249,5243,5251,5249,5244,5243,3530,3532,3530,5243,5249,5253,3542,3543,3543,5254,5253,5248,3541,3542,3542,5253,5248,5247,5248,5253,5253,5255,5247,5253,5254,5255,5254,3886,5255,5256,5235,5257,5235,5256,5241,5251,5241,5256,5241,5251,5244,5252,5256,5258,5252,5251,5256,5258,5257,5259,5257,5258,5256,5260,5261,5240,5240,5245,5260,3885,3892,5261,3885,5261,5260,3886,5260,5255,3886,3885,5260,5255,5260,5245,5255,5245,5247,3536,5250,5262,5250,3536,3531,3537,5262,5263,5262,3537,3536,5263,5264,3888,5264,5263,5262,5262,5252,5264,5252,5262,5250,3545,5254,3543,5254,3545,5265,5265,3886,5254,3886,5265,3884,5263,3884,5265,3884,5263,3888,3537,5265,3545,5265,3537,5263,5266,5227,5267,5227,5266,5236,5257,5236,5266,5236,5257,5235,5259,5266,5268,5266,5259,5257,5268,5267,5269,5267,5268,5266,5270,5271,5232,5232,5239,5270,5272,5273,5271,5272,5271,5270,3892,5272,5270,3892,5270,5261,5261,5270,5239,5239,5240,5261,5274,5269,5275,5269,5267,5275,5276,5274,5277,5274,5275,5277,5277,5275,5213,5275,5228,5213,5275,5267,5228,5267,5227,5228,5278,5279,5273,5271,5273,5279,5279,5231,5271,5232,5271,5231,5280,5221,5279,5231,5279,5221,5281,5280,5278,5279,5278,5280,5277,5212,5282,5212,5277,5213,5276,5282,5283,5282,5276,5277,5283,5284,5285,5284,5283,5282,5214,5282,5212,5282,5214,5284,5280,5219,5221,5219,5280,5286,5286,5220,5219,5220,5286,5287,5288,5287,5286,5287,5288,5289,5281,5286,5280,5286,5281,5288,5284,5216,5290,5216,5284,5214,5285,5290,5291,5290,5285,5284,5291,4160,4157,4160,5291,5290,5290,4162,4160,4162,5290,5216,5287,5224,5220,5224,5287,5292,5292,4084,5224,4084,5292,4083,5293,4083,5292,4083,5293,4085,5289,5292,5287,5292,5289,5293,5294,5184,5295,5184,5294,5205,4164,5205,5294,5205,4164,4163,4165,5294,4201,5294,4165,4164,4201,5295,4202,5295,4201,5294,5296,5194,5297,5194,5207,5297,4254,5296,4210,5296,5297,4210,4087,4210,5297,5297,4081,4087,5297,5207,4081,5207,4079,4081,5298,5291,5299,5291,5298,5285,5300,5299,5301,5299,5300,5298,5301,4174,4115,4174,5301,5299,5299,4157,4174,4157,5299,5291,5302,5293,5289,5293,5302,5303,5303,4085,5293,4085,5303,4114,5301,4114,5303,4114,5301,4115,5300,5303,5302,5303,5300,5301,5304,5283,5305,5283,5304,5276,5306,5305,5307,5305,5306,5304,5307,5298,5300,5298,5307,5305,5305,5285,5298,5285,5305,5283,5308,5288,5281,5288,5308,5309,5309,5289,5288,5289,5309,5302,5307,5302,5309,5302,5307,5300,5306,5309,5308,5309,5306,5307,5310,5311,5312,5311,5313,5312,5312,5278,5310,5273,5310,5278,5308,5281,5312,5278,5312,5281,5312,5313,5308,5313,5306,5308,5314,5315,5311,5311,5315,5313,5315,5304,5313,5313,5304,5306,5315,5274,5276,5315,5276,5304,5314,5269,5274,5314,5274,5315,5316,5268,5269,5316,5269,5314,5317,5259,5268,5317,5268,5316,3891,5317,5316,3891,5316,5318,5318,5316,5314,5318,5314,5311,5319,5273,5272,5273,5319,5310,5318,5310,5319,5310,5318,5311,3891,5319,3890,5319,3891,5318,3890,5272,3892,5272,3890,5319,5320,5258,5259,5320,5259,5317,5264,5252,5258,5264,5258,5320,3888,5264,5320,3888,5320,3889,3889,5320,5317,3889,5317,3891,5321,5322,5323,5322,5324,5323,5166,5321,5183,5321,5323,5183,5295,5183,5323,5183,5295,5184,4202,5323,5324,5323,4202,5295,5325,5326,5327,5327,5326,5328,5326,4254,5328,4254,5326,5296,5192,5296,5326,5296,5192,5194,5174,5192,5325,5325,5192,5326,5329,5321,5330,5321,5329,5322,5331,5330,5332,5330,5331,5329,5163,5332,5330,5332,5163,5149,5330,5166,5163,5166,5330,5321,5325,5333,5334,5333,5325,5327,5174,5334,5172,5334,5174,5325,5335,5172,5334,5172,5335,5157,5334,5336,5335,5336,5334,5333,5337,5338,5339,5338,5337,5340,5341,5339,5342,5339,5341,5337,5342,5329,5331,5329,5342,5339,5339,5322,5329,5322,5339,5338,5343,5340,5344,5340,5343,5338,5322,5338,5324,5338,5343,5324,4203,5324,5343,5324,4203,4202,4208,5343,5344,5343,4208,4203,5345,5346,5347,5346,5345,5340,5327,5347,5333,5347,5327,5345,5333,5348,5336,5348,5333,5347,5347,5349,5348,5349,5347,5346,5344,5340,5350,5340,5345,5350,4208,5350,4211,5350,4208,5344,4211,5328,4254,5328,4211,5350,5327,5328,5345,5345,5328,5350,5332,5351,5331,5351,5332,5352,5352,5353,5351,5353,5352,5354,5148,5354,5352,5354,5148,5134,5149,5352,5332,5352,5149,5148,5355,5335,5336,5335,5355,5356,5356,5157,5335,5157,5356,5155,5357,5155,5356,5155,5357,5141,5356,5358,5357,5358,5356,5355,5351,5359,5360,5359,5351,5353,5331,5360,5342,5360,5331,5351,5342,5361,5341,5361,5342,5360,5360,5362,5361,5362,5360,5359,5363,5355,5364,5355,5363,5358,5365,5364,5366,5364,5365,5363,5366,5348,5349,5348,5366,5364,5364,5336,5348,5336,5364,5355,5367,4190,4187,4190,5367,5368,4192,5368,5369,5368,4192,4190,5369,5036,5039,5036,5369,5368,5037,5368,5367,5368,5037,5036,4181,5370,4183,5370,4181,5371,5371,5043,5370,5043,5371,5041,5372,5041,5371,5041,5372,5046,4182,5371,4181,5371,4182,5372,5373,5374,5375,5374,5373,5376,5373,5132,5118,5132,5373,5375,5134,5375,5354,5375,5134,5132,5354,5374,5353,5374,5354,5375,5359,5377,5362,5377,5359,5378,5379,5377,5378,5377,5379,5380,5376,5378,5374,5378,5376,5379,5353,5378,5359,5378,5353,5374,5381,5382,5383,5382,5381,5384,5358,5381,5357,5381,5383,5357,5357,5383,5141,5383,5139,5141,5382,5139,5383,5139,5382,5125,5363,5385,5386,5385,5363,5365,5358,5386,5381,5386,5358,5363,5384,5381,5386,5386,5387,5384,5387,5386,5385,5385,5388,5387,5389,5390,5391,5390,5389,5392,5389,5094,5392,5094,5389,5115,5373,5115,5389,5115,5373,5118,5389,5376,5373,5376,5389,5391,5393,5394,5395,5394,5393,5396,5391,5393,5395,5393,5391,5390,5391,5379,5376,5379,5391,5395,5395,5380,5379,5380,5395,5394,5397,5398,5399,5398,5400,5399,5384,5399,5382,5399,5384,5397,5382,5123,5125,5123,5382,5399,5399,5109,5123,5109,5399,5400,5401,5402,5403,5402,5401,5404,5388,5403,5387,5403,5388,5401,5387,5397,5384,5397,5387,5403,5403,5402,5397,5402,5398,5397,5392,5405,5390,5406,5390,5405,5405,5407,5406,5408,5406,5407,5091,5086,5405,5407,5405,5086,5094,5091,5392,5405,5392,5091,5393,5409,5396,5396,5409,5410,5409,5411,5410,5411,5409,5412,5406,5412,5409,5412,5406,5408,5390,5406,5393,5409,5393,5406,5398,5413,5414,5398,5414,5400,5400,5414,5107,5400,5107,5109,5414,5415,5101,5414,5101,5107,5413,5416,5415,5413,5415,5414,5417,5402,5404,5404,5418,5417,5402,5417,5413,5402,5413,5398,5419,5413,5417,5413,5419,5416,5420,5417,5418,5417,5420,5419,5421,5083,5070,5083,5421,5422,5422,5086,5083,5086,5422,5407,5423,5407,5422,5407,5423,5408,5424,5422,5421,5422,5424,5423,5425,5412,5426,5412,5425,5411,5427,5426,5428,5426,5427,5425,5428,5423,5424,5423,5428,5426,5426,5408,5423,5408,5426,5412,5429,5421,5430,5421,5429,5424,5431,5430,5432,5430,5431,5429,5432,5069,5054,5069,5432,5430,5430,5070,5069,5070,5430,5421,5433,5428,5434,5428,5433,5427,5435,5434,5436,5434,5435,5433,5436,5429,5431,5429,5436,5434,5434,5424,5429,5424,5434,5428,5437,5099,5438,5099,5437,5078,5439,5438,5440,5438,5439,5437,5440,5415,5416,5415,5440,5438,5438,5101,5415,5101,5438,5099,5441,5419,5420,5419,5441,5442,5442,5416,5419,5416,5442,5440,5443,5440,5442,5440,5443,5439,5444,5442,5441,5442,5444,5443,5437,5445,5446,5445,5437,5439,5446,5078,5437,5078,5446,5076,5076,5447,5062,5447,5076,5446,5446,5448,5447,5448,5446,5445,5443,5449,5450,5449,5443,5444,5439,5450,5445,5450,5439,5443,5445,5451,5448,5451,5445,5450,5450,5452,5451,5452,5450,5449,5453,5432,5454,5432,5453,5431,4187,5454,5367,5454,4187,5453,5051,5367,5454,5367,5051,5037,5454,5054,5051,5054,5454,5432,5453,4189,5455,4189,5453,4187,5455,5431,5453,5431,5455,5436,5456,5436,5455,5436,5456,5435,5455,4195,5456,4195,5455,4189,5447,5457,5458,5457,5447,5448,5062,5458,5060,5458,5062,5447,5370,5060,5458,5060,5370,5043,5458,4183,5370,4183,5458,5457,4184,5457,5459,5457,4184,4183,4185,5459,5460,5459,4185,4184,5451,5460,5459,5460,5451,5452,5448,5459,5457,5459,5448,5451,5461,4167,4166,4166,5462,5461,4774,5463,5464,5465,5464,5463,5466,5465,5463,5465,5466,5467,5468,5467,5466,5467,5468,5469,5470,5469,5468,5469,5470,5471,5472,5461,5462,5462,5473,5472,5471,5474,5475,5474,5471,5470,5476,5472,5473,5473,5477,5476,5475,5478,5479,5478,5475,5474,5480,5477,5481,5477,5480,5476,5479,5482,5483,5482,5479,5478,5484,5481,5485,5481,5484,5480,5483,5486,5487,5486,5483,5482,5488,5485,5489,5485,5488,5484,5487,4897,5490,4897,5487,5486,4895,5489,5491,5489,4895,5488,5490,4893,5492,4893,5490,4897,4891,5491,5493,5491,4891,4895,5492,4889,5494,4889,5492,4893,5495,4887,5493,5493,4887,4891,5494,4885,2123,4885,5494,4889,5496,4883,5495,5495,4883,4887,2123,4885,2120,2120,4885,4869,5497,4867,5496,5496,4867,4883,2120,4865,2118,4865,2120,4869,2118,4865,5497,5497,4865,4867,5498,5499,2220,5499,5498,5500,5501,5500,5498,5500,5501,5502,5502,5503,5504,5503,5502,5501,5505,5506,5507,2208,5506,5505,5504,5508,5509,5508,5504,5503,5510,5507,5511,5505,5507,5510,5509,5512,5513,5512,5509,5508,5514,5515,5511,5510,5511,5515,5513,5516,5517,5516,5513,5512,5518,5519,5514,5515,5514,5519,5517,5520,5521,5520,5517,5516,5522,5523,5518,5518,5523,5519,5521,5520,5524,5524,5520,5525,5526,5527,5522,5522,5527,5523,5524,5525,5528,5528,5525,5529,5530,5531,5526,5526,5531,5527,5528,5529,5532,5532,5529,5533,5534,5531,5530,5531,5534,5535,5532,5533,5536,5536,5533,5537,5538,5535,5534,5535,5538,5539,5536,5537,5540,5540,5537,5541,5542,5539,5538,5539,5542,5543,5540,5544,5545,5544,5540,5541,5545,5543,5542,5543,5545,5544,2208,2205,5546,2208,5546,5506,2220,4171,2218,4171,2220,5499,5547,4863,5548,5548,4863,4785,5549,4843,5547,5547,4843,4863,5550,4861,5551,4861,5550,4781,5551,4835,5552,4835,5551,4861,4859,4812,5553,5553,5554,4859,4859,5554,4789,5554,5555,4789,5556,4845,5557,4845,5556,4793,5557,4783,5558,4783,5557,4845,5559,4842,5549,5549,4842,4843,5560,4842,5559,4842,5560,4833,5552,4831,5561,4831,5552,4835,5561,4831,5560,5560,4831,4833,4830,4771,5562,5562,5563,4830,4814,4830,5563,5563,5564,4814,4810,4814,5564,5564,5565,4810,4807,5566,4778,5566,4807,5567,4812,4810,5565,5565,5553,4812,4795,5567,4807,5567,4795,5568,4791,5568,4795,5568,4791,5569,4793,5569,4791,5569,4793,5556,4789,5555,4787,5555,5570,4787,5548,4785,5570,5570,4785,4787,5558,4779,5571,4779,5558,4783,5571,4781,5550,4781,5571,4779,5572,4768,5573,5573,4768,5574,5575,2207,4170,2207,5575,2205,5576,5546,5575,5575,5546,2205,4778,4136,4135,4136,4778,5566,4772,4774,5577,4774,5464,5577,4771,4768,5572,5572,5562,4771,5578,5546,5576,5546,5578,5506,4172,4171,5579,5579,4171,5499,5579,5499,5580,5580,5499,5500,5580,5502,5581,5502,5580,5500,5581,5502,5582,5582,5502,5504,5506,5583,5507,5583,5506,5578,5582,5504,5584,5584,5504,5509,5507,5583,5511,5585,5511,5583,5584,5509,5586,5586,5509,5513,5587,5511,5585,5511,5587,5514,5586,5513,5588,5588,5513,5517,5589,5514,5587,5514,5589,5518,5588,5517,5590,5590,5517,5521,5591,5518,5589,5518,5591,5522,5590,5521,5592,5592,5521,5524,5593,5522,5591,5522,5593,5526,5592,5524,5594,5594,5524,5528,5595,5526,5593,5526,5595,5530,5594,5528,5596,5596,5528,5532,5597,5530,5595,5530,5597,5534,5596,5532,5598,5598,5532,5536,5599,5534,5597,5534,5599,5538,5598,5536,5600,5600,5536,5540,5601,5538,5599,5538,5601,5542,5600,5545,5602,5545,5600,5540,5602,5542,5601,5542,5602,5545,4864,2238,4786,4786,2238,2240,4844,2242,4864,4864,2242,2238,4780,2259,4862,2259,4780,2257,4862,2267,4836,2267,4862,2259,4860,2276,4811,4811,2276,2278,4790,2280,4860,4860,2280,2276,4792,2288,4846,2288,4792,2286,4846,2294,4784,2294,4846,2288,4841,2491,4844,4844,2491,2242,2493,4841,4834,4841,2493,2491,4836,2498,4832,2498,4836,2267,4832,2498,4834,4834,2498,2493,4829,4042,4769,4769,4042,4043,4813,4046,4829,4829,4046,4042,4809,4069,4813,4813,4069,4046,4776,4073,4808,4073,4776,4072,4811,2278,4809,4809,2278,4069,4808,4089,4796,4089,4808,4073,4796,4094,4794,4094,4796,4089,4794,2286,4792,2286,4794,4094,4788,4099,4790,4790,4099,2280,4786,2240,4788,4788,2240,4099,4784,4108,4782,4108,4784,2294,4782,2257,4780,2257,4782,4108,4770,4131,4773,4131,4770,4132,4170,4776,4777,4776,4170,4072,4773,4172,4775,4172,4773,4131,4769,4132,4770,4132,4769,4043,5603,5575,4777,4777,5575,4170,5604,5576,5603,5603,5576,5575,5605,5576,5604,5576,5605,5578,4172,5606,4775,5606,4172,5579,5606,5580,5607,5580,5606,5579,5607,5581,5608,5581,5607,5580,5608,5582,5609,5582,5608,5581,5610,5583,5605,5605,5583,5578,5609,5584,5611,5584,5609,5582,5612,5585,5610,5610,5585,5583,5611,5586,5613,5586,5611,5584,5614,5587,5612,5612,5587,5585,5613,5588,5615,5588,5613,5586,5616,5589,5614,5614,5589,5587,5615,5590,5617,5590,5615,5588,5618,5591,5616,5616,5591,5589,5617,5592,4898,5592,5617,5590,4896,5593,5618,5618,5593,5591,4898,5594,4894,5594,4898,5592,4892,5595,4896,4896,5595,5593,4894,5596,4890,5596,4894,5594,4888,5597,4892,4892,5597,5595,4890,5598,4886,5598,4890,5596,4884,5599,4888,4888,5599,5597,4886,5598,4870,4870,5598,5600,4868,5601,4884,4884,5601,5599,4870,5602,4866,5602,4870,5600,4866,5602,4868,4868,5602,5601,4777,4135,5603,4169,5603,4135,4167,5603,4169,5603,4167,5604,5605,4167,5461,4167,5605,5604,5606,4774,4775,4774,5606,5463,5607,5463,5606,5463,5607,5466,5608,5466,5607,5466,5608,5468,5609,5468,5608,5468,5609,5470,5610,5461,5472,5461,5610,5605,5470,5609,5474,5474,5609,5611,5472,5612,5610,5612,5472,5476,5474,5611,5478,5478,5611,5613,5476,5614,5612,5614,5476,5480,5478,5615,5482,5615,5478,5613,5614,5484,5616,5484,5614,5480,5482,5617,5486,5617,5482,5615,5488,5618,5484,5618,5616,5484,5486,4898,4897,4898,5486,5617,4895,4896,5488,4896,5618,5488
-					]
-				}
-			]
-		}
-	],
-	"materials" : [
-		{
-			"id" : "Material7",
-			"type" : "PHONG",
-			"diffuse" : [0.700000,0.700000,0.700000],
-			"ambient" : [0.300000,0.300000,0.300000],
-			"emissive" : [1.0,1.0,1.0],
-			"opacity" : 0.000000,
-			"specular" : [1.0,1.0,1.0],
-			"shininess" : 50.000000,
-			"textures" : [
-				{
-					"id" : "head",
-					"filename" : "head_color.png",
-					"uvtranslation" : [0.0,0.0],
-					"uvscaling" : [1.0,1.0],
-					"type" : "STANDARD"
-				}
-			]
-		}
-	],
-	"nodes" : [
-		{
-			"id" : "head",
-			"translation" : [0.0,0.0,0.0],
-			"rotation" : [0.0,0.0,0.0,1.0],
-			"scale" : [1.0,1.0,1.0],
-			"mesh" : "head_Mesh",
-			"materials" : [
-				{
-					"meshpartid" : "part0",
-					"materialid" : "Material7"
-				}
-			]
-		}
-	],
-	"animations" : [
-		
-	]
-}
\ No newline at end of file
diff --git a/tests/gdx-tests-android/assets/data/g3d/head2.g3dj b/tests/gdx-tests-android/assets/data/g3d/head2.g3dj
deleted file mode 100644
index 153f152..0000000
--- a/tests/gdx-tests-android/assets/data/g3d/head2.g3dj
+++ /dev/null
@@ -1,108 +0,0 @@
-{
-	"version" : "1.0",
-	"meshes" : [
-		{
-			"id" : "eyes_Mesh",
-			"attributes" : [
-				"POSITION","NORMAL","TEXCOORD0"
-			],
-			"vertices" : [
-				-0.008195,-0.064439,0.002196,-0.126069,-0.991446,0.033780,0.899576,0.748530,-0.008484,-0.064439,0.0,-0.130517,-0.991446,0.0,0.701832,0.748040,0.0,-0.064995,0.0,0.0,-1.0,0.000000,0.403800,0.774900,-0.016249,-0.062781,0.004354,-0.249983,-0.965931,0.066983,0.889964,0.711910,-0.016822,-0.062781,0.0,-0.258801,-0.965931,0.0,0.687343,0.711420,-0.024025,-0.060048,0.006438,-0.369620,-0.923890,0.099040,0.865230,0.687275,-0.024873,-0.060048,0.0,-0.382659,-0.923890,0.0,0.662590,0.687104,-0.032498,-0.056288,0.0,-0.499972,-0.866041,-0.000000,0.643220,0.650390,-0.024873,-0.060048,0.0,-0.382659,-0.923890,0.0,0.662592,0.687104,-0.031390,-0.056288,0.008411,-0.482936,-0.866041,0.129402,0.840969,0.650870,-0.039567,-0.051564,0.0,-0.608733,-0.793375,-0.000000,0.628728,0.613770,-0.038219,-0.051564,0.010241,-0.587991,-0.793375,0.157552,0.824048,0.614250,-0.045959,-0.045959,0.0,-0.707081,-0.707133,-0.000000,0.604000,0.589401,-0.044393,-0.045959,0.011895,-0.682988,-0.707133,0.183006,0.807100,0.577630,-0.051564,-0.039567,0.0,-0.793332,-0.608790,0.000000,0.584613,0.552730,-0.049807,-0.039567,0.013346,-0.766300,-0.608790,0.205329,0.782220,0.552942,-0.056288,-0.032498,0.0,-0.866010,-0.500027,-0.000000,0.570122,0.516110,-0.054370,-0.032498,0.014568,-0.836501,-0.500027,0.224140,0.765439,0.516600,-0.060048,-0.024873,0.0,-0.923870,-0.382707,0.0,0.550750,0.479490,-0.058002,-0.024873,0.015542,-0.892390,-0.382707,0.239115,0.748496,0.479980,-0.062781,-0.016822,0.0,-0.965921,-0.258837,0.000000,0.525998,0.455070,-0.060642,-0.016822,0.016249,-0.933008,-0.258837,0.249999,0.723630,0.455273,-0.064439,-0.008484,0.0,-0.991444,-0.130536,-0.000000,0.511511,0.418450,-0.062244,-0.008484,0.016678,-0.957661,-0.130536,0.256605,0.714145,0.418940,-0.064995,0.000000,0.0,-1.0,0.0,0.0,0.491690,0.381866,-0.062781,0.000000,0.016822,-0.965926,0.0,0.258819,0.511230,0.418940,-0.062244,0.008484,0.016678,-0.957661,0.130536,0.256605,0.665030,0.357623,-0.064995,0.000000,0.0,-1.0,0.0,0.0,0.492136,0.381830,-0.062781,0.000000,0.016822,-0.965926,0.0,0.258819,0.689896,0.382320,-0.064439,0.008484,0.0,-0.991444,0.130536,-0.000000,0.467396,0.357420,-0.060642,0.016822,0.016249,-0.933008,0.258837,0.249999,0.655541,0.321280,-0.062781,0.016822,0.0,-0.965921,0.258837,0.000000,0.452908,0.320800,-0.058002,0.024873,0.015542,-0.892390,0.382707,0.239115,0.452630,0.321280,-0.060048,0.024873,0.0,-0.923870,0.382707,0.0,0.433519,0.284660,-0.054370,0.032498,0.014568,-0.836501,0.500027,0.224140,0.606440,0.259968,-0.060048,0.024873,0.0,-0.923870,0.382707,0.0,0.433538,0.284180,-0.058002,0.024873,0.015542,-0.892390,0.382707,0.239115,0.631280,0.284660,-0.056288,0.032498,0.0,-0.866010,0.500027,-0.000000,0.408800,0.259760,-0.049807,0.039567,0.013346,-0.766300,0.608790,0.205329,0.596940,0.223630,-0.051564,0.039567,0.0,-0.793332,0.608789,0.000000,0.394314,0.223140,-0.044393,0.045959,0.011895,-0.682988,0.707133,0.183006,0.572692,0.187010,-0.045959,0.045959,0.0,-0.707081,0.707133,-0.000000,0.374949,0.186520,-0.038219,0.051564,0.010241,-0.587991,0.793375,0.157552,0.548094,0.162590,-0.039567,0.051564,0.0,-0.608733,0.793375,-0.000000,0.350339,0.162100,-0.031390,0.056288,0.008411,-0.344063,0.934410,0.092191,0.533488,0.125970,-0.032498,0.056288,0.0,-0.356200,0.934410,-0.000000,0.338040,0.125480,-0.024025,0.057362,0.006438,-0.077714,0.996758,0.020823,0.501720,0.113770,-0.024873,0.057362,-0.000000,-0.080456,0.996758,0.000000,0.306392,0.113280,-0.015836,0.057553,-0.000000,0.285374,0.958416,0.0,0.296845,0.101070,-0.015296,0.057553,0.004099,0.275650,0.958416,-0.073860,0.482339,0.101560,-0.008195,0.044143,0.002196,0.909852,0.335759,-0.243794,0.484768,0.101070,-0.012432,0.055220,-0.000000,0.791849,0.610717,0.0,0.325862,0.101070,-0.012009,0.055220,0.003218,0.764867,0.610717,-0.204946,0.479628,0.101560,-0.008484,0.044143,-0.000000,0.941948,0.335759,0.0,0.330983,0.101070,-0.008484,0.044143,-0.000000,-0.065403,0.997859,0.0,0.330983,0.101070,-0.008195,0.044143,0.002196,-0.063175,0.997859,0.016928,0.484768,0.101070,0.0,0.044699,-0.000000,0.0,1.0,0.000000,0.665412,0.105950,-0.007347,-0.064439,0.004242,-0.113031,-0.991446,0.065258,0.125636,0.750970,-0.008195,-0.064439,0.002196,-0.126069,-0.991446,0.033780,0.086910,0.713860,-0.014568,-0.062781,0.008411,-0.224128,-0.965931,0.129401,0.089174,0.714350,-0.021540,-0.060048,0.012436,-0.331393,-0.923890,0.191330,0.083980,0.689878,-0.016249,-0.062781,0.004354,-0.249983,-0.965931,0.066983,0.084470,0.689450,-0.028144,-0.056288,0.016249,-0.432989,-0.866041,0.249986,0.064593,0.653320,-0.024025,-0.060048,0.006438,-0.369620,-0.923890,0.099040,0.865712,0.675065,-0.034266,-0.051564,0.019783,-0.527178,-0.793375,0.304367,0.028157,0.616690,-0.031390,-0.056288,0.008411,-0.482936,-0.866041,0.129402,0.028320,0.616210,-0.034266,-0.051564,0.019783,-0.527178,-0.793375,0.304367,0.030572,0.616690,-0.038219,-0.051564,0.010241,-0.587991,-0.793375,0.157552,0.030597,0.616210,-0.039801,-0.045959,0.022979,-0.612350,-0.707133,0.353540,0.030270,0.616592,-0.039801,-0.045959,0.022979,-0.612350,-0.707133,0.353540,0.011230,0.579964,-0.044393,-0.045959,0.011895,-0.682988,-0.707133,0.183006,0.011227,0.579590,-0.044656,-0.039567,0.025782,-0.687046,-0.608790,0.396666,0.010740,0.579963,-0.044656,-0.039567,0.025782,-0.687046,-0.608790,0.396666,0.005981,0.555660,-0.049807,-0.039567,0.013346,-0.766300,-0.608790,0.205329,0.968260,0.516110,-0.048747,-0.032498,0.028144,-0.749986,-0.500027,0.433005,0.968082,0.516600,-0.048747,-0.032498,0.028144,-0.749986,-0.500027,0.433005,0.970502,0.516600,-0.054370,-0.032498,0.014568,-0.836501,-0.500027,0.224140,0.970522,0.516110,-0.052003,-0.024873,0.030024,-0.800095,-0.382707,0.461935,0.970210,0.516481,-0.052003,-0.024873,0.030024,-0.800095,-0.382707,0.461935,0.951132,0.479980,-0.058002,-0.024873,0.015542,-0.892390,-0.382707,0.239115,0.748496,0.479695,-0.054370,-0.016822,0.031390,-0.836512,-0.258837,0.482961,0.945920,0.455560,-0.060642,-0.016822,0.016249,-0.933008,-0.258837,0.249999,0.909660,0.418450,-0.055806,-0.008484,0.032220,-0.858615,-0.130536,0.495722,0.909464,0.418940,-0.055806,-0.008484,0.032220,-0.858615,-0.130536,0.495722,0.911898,0.418940,-0.062244,-0.008484,0.016678,-0.957661,-0.130536,0.256605,0.911904,0.418450,-0.056288,0.000000,0.032498,-0.866025,0.0,0.500000,0.911620,0.418816,-0.055806,0.008484,0.032220,-0.858615,0.130536,0.495722,0.892090,0.382195,-0.062781,0.000000,0.016822,-0.965926,0.0,0.258819,0.892519,0.381830,-0.056288,0.000000,0.032498,-0.866025,0.0,0.500000,0.892570,0.382195,-0.054370,0.016822,0.031390,-0.836512,0.258837,0.482961,0.853299,0.321280,-0.062244,0.008484,0.016678,-0.957661,0.130536,0.256605,0.665147,0.357622,-0.055806,0.008484,0.032220,-0.858615,0.130536,0.495722,0.887200,0.357786,-0.052003,0.024873,0.030024,-0.800095,0.382707,0.461935,0.687010,0.321280,-0.060642,0.016822,0.016249,-0.933008,0.258837,0.249999,0.655550,0.320999,-0.048747,0.032498,0.028144,-0.749986,0.500027,0.433005,0.833490,0.284537,-0.058002,0.024873,0.015542,-0.892390,0.382707,0.239115,0.833490,0.284180,-0.052003,0.024873,0.030024,-0.800095,0.382707,0.461935,0.833980,0.284541,-0.044656,0.039567,0.025782,-0.687046,0.608790,0.396666,0.794712,0.223630,-0.054370,0.032498,0.014568,-0.836501,0.500027,0.224140,0.606558,0.259967,-0.048747,0.032498,0.028144,-0.749986,0.500027,0.433005,0.828726,0.260250,-0.039801,0.045959,0.022979,-0.612350,0.707133,0.353540,0.606440,0.223630,-0.049807,0.039567,0.013346,-0.766300,0.608790,0.205329,0.596957,0.223351,-0.044393,0.045959,0.011895,-0.682988,0.707133,0.183006,0.774900,0.186520,-0.034266,0.051564,0.019783,-0.527178,0.793375,0.304367,0.809444,0.162100,-0.039801,0.045959,0.022979,-0.612350,0.707133,0.353540,0.775390,0.186902,-0.038219,0.051564,0.010241,-0.587991,0.793375,0.157552,0.548109,0.162288,-0.028144,0.056288,0.016249,-0.308479,0.934410,0.178100,0.741095,0.125970,-0.034266,0.051564,0.019783,-0.527178,0.793375,0.304367,0.770387,0.162590,-0.031390,0.056288,0.008411,-0.344063,0.934410,0.092191,0.533495,0.125839,-0.021540,0.057362,0.012436,-0.069677,0.996758,0.040228,0.758180,0.113770,-0.013714,0.057553,0.007918,0.247141,0.958416,-0.142687,0.755370,0.113658,-0.024025,0.057362,0.006438,-0.077714,0.996758,0.020823,0.726560,0.101070,-0.007347,0.044143,0.004242,0.815751,0.335759,-0.470974,0.758288,0.101560,-0.010767,0.055220,0.006216,0.685761,0.610717,-0.395924,0.755613,0.101560,-0.008195,0.044143,0.002196,-0.063175,0.997859,0.016928,0.477439,0.101494,-0.007347,0.044143,0.004242,-0.056641,0.997859,0.032702,0.758288,0.101560,-0.005999,-0.064439,0.005999,-0.092289,-0.991446,0.092289,0.328266,0.750970,-0.007347,-0.064439,0.004242,-0.113031,-0.991446,0.065258,0.125635,0.750605,-0.011895,-0.062781,0.011895,-0.183000,-0.965931,0.183000,0.313774,0.714350,-0.014568,-0.062781,0.008411,-0.224128,-0.965931,0.129401,0.267570,0.677247,-0.017588,-0.060048,0.017588,-0.270581,-0.923890,0.270581,0.267549,0.677730,-0.021540,-0.060048,0.012436,-0.331393,-0.923890,0.191330,0.221190,0.652830,-0.022979,-0.056288,0.022979,-0.353534,-0.866041,0.353534,0.269530,0.652903,-0.028144,-0.056288,0.016249,-0.432989,-0.866041,0.249986,0.233390,0.616210,-0.027978,-0.051564,0.027978,-0.430439,-0.793375,0.430439,0.233202,0.616690,-0.039801,-0.045959,0.022979,-0.612350,-0.707133,0.353540,0.208980,0.579590,-0.034266,-0.051564,0.019783,-0.527178,-0.793375,0.304367,0.208980,0.579590,-0.032498,-0.045959,0.032498,-0.499982,-0.707133,0.499982,0.208948,0.580070,-0.039801,-0.045959,0.022979,-0.612350,-0.707133,0.353540,0.162590,0.555170,-0.036462,-0.039567,0.036462,-0.560970,-0.608790,0.560970,0.210930,0.555216,-0.044656,-0.039567,0.025782,-0.687046,-0.608790,0.396666,0.174800,0.518550,-0.039801,-0.032498,0.039801,-0.612361,-0.500027,0.612361,0.174599,0.519040,-0.048747,-0.032498,0.028144,-0.749986,-0.500027,0.433005,0.147940,0.481964,-0.042460,-0.024873,0.042460,-0.653274,-0.382707,0.653275,0.147922,0.482420,-0.052003,-0.024873,0.030024,-0.800095,-0.382707,0.461935,0.951132,0.479859,-0.044393,-0.016822,0.044393,-0.683009,-0.258837,0.683009,0.152340,0.457557,-0.054370,-0.016822,0.031390,-0.836512,-0.258837,0.482961,0.116210,0.420890,-0.045566,-0.008484,0.045566,-0.701057,-0.130536,0.701057,0.116003,0.421380,-0.045959,0.000000,0.045959,-0.707107,0.0,0.707107,0.911620,0.418940,-0.045566,0.008484,0.045566,-0.701057,0.130536,0.701057,0.889640,0.357910,-0.045959,0.000000,0.045959,-0.707107,0.0,0.707107,0.892519,0.382320,-0.044393,0.016822,0.044393,-0.683009,0.258837,0.683009,0.889679,0.321280,-0.055806,0.008484,0.032220,-0.858615,0.130536,0.495722,0.887319,0.357786,-0.045566,0.008484,0.045566,-0.701057,0.130536,0.701057,0.093750,0.359897,-0.042460,0.024873,0.042460,-0.653274,0.382707,0.653275,0.889640,0.321280,-0.054370,0.016822,0.031390,-0.836512,0.258837,0.482961,0.853303,0.321159,-0.052003,0.024873,0.030024,-0.800095,0.382707,0.461935,0.889640,0.320800,-0.039801,0.032498,0.039801,-0.612361,0.500027,0.612361,0.035150,0.262242,-0.052003,0.024873,0.030024,-0.800095,0.382707,0.461935,0.960930,0.259760,-0.042460,0.024873,0.042460,-0.653274,0.382707,0.653275,0.960930,0.260053,-0.036462,0.039567,0.036462,-0.560970,0.608790,0.560970,0.020500,0.225626,-0.048747,0.032498,0.028144,-0.749986,0.500027,0.433005,0.828733,0.260131,-0.039801,0.045959,0.022979,-0.612350,0.707133,0.353540,0.823730,0.223140,-0.032498,0.045959,0.032498,-0.499982,0.707133,0.499982,0.823730,0.223630,-0.044656,0.039567,0.025782,-0.687046,0.608790,0.396666,0.794719,0.223515,-0.027978,0.051564,0.027978,-0.430439,0.793375,0.430439,0.975090,0.162141,-0.039801,0.045959,0.022979,-0.612350,0.707133,0.353540,0.809570,0.162100,-0.032498,0.045959,0.032498,-0.499982,0.707133,0.499982,0.809570,0.162590,-0.022979,0.056288,0.022979,-0.251872,0.934410,0.251872,0.811520,0.162590,-0.034266,0.051564,0.019783,-0.527178,0.793375,0.304367,0.770391,0.162535,-0.022979,0.056288,0.022979,-0.251872,0.934410,0.251872,0.963355,0.125557,-0.017588,0.057362,0.017588,-0.056891,0.996758,0.056891,0.955564,0.113770,-0.028144,0.056288,0.016249,-0.308479,0.934410,0.178100,0.741102,0.125824,-0.021540,0.057362,0.012436,-0.069677,0.996758,0.040228,0.765500,0.113287,-0.011198,0.057553,0.011198,0.201790,0.958416,-0.201790,0.950728,0.113770,-0.005999,0.044143,0.005999,0.666058,0.335759,-0.666058,0.955962,0.101560,-0.008791,0.055220,0.008791,0.559922,0.610717,-0.559922,0.950881,0.101560,-0.007347,0.044143,0.004242,-0.056641,0.997859,0.032702,0.990130,0.088860,-0.005999,0.044143,0.005999,-0.046247,0.997859,0.046247,0.955962,0.101560,-0.004242,-0.064439,0.007347,-0.065258,-0.991446,0.113031,0.526007,0.750970,-0.008411,-0.062781,0.014568,-0.129401,-0.965931,0.224128,0.516406,0.714350,-0.005999,-0.064439,0.005999,-0.092289,-0.991446,0.092289,0.509270,0.713860,-0.012436,-0.060048,0.021540,-0.191330,-0.923890,0.331393,0.492146,0.677730,-0.011895,-0.062781,0.011895,-0.183000,-0.965931,0.183000,0.489740,0.677240,-0.012436,-0.060048,0.021540,-0.191330,-0.923890,0.331393,0.489717,0.677730,-0.022979,-0.056288,0.022979,-0.353534,-0.866041,0.353534,0.220945,0.653320,-0.017588,-0.060048,0.017588,-0.270581,-0.923890,0.270581,0.294430,0.677335,-0.016249,-0.056288,0.028144,-0.249986,-0.866041,0.432989,0.293940,0.677730,-0.022979,-0.056288,0.022979,-0.353534,-0.866041,0.353534,0.450680,0.616210,-0.016249,-0.056288,0.028144,-0.249986,-0.866041,0.432989,0.467280,0.653056,-0.019783,-0.051564,0.034266,-0.304367,-0.793375,0.527178,0.450491,0.616690,-0.027978,-0.051564,0.027978,-0.430439,-0.793375,0.430439,0.431150,0.579623,-0.022979,-0.045959,0.039801,-0.353540,-0.707133,0.612350,0.431122,0.580070,-0.032498,-0.045959,0.032498,-0.499982,-0.707133,0.499982,0.235840,0.579640,-0.025782,-0.039567,0.044656,-0.396666,-0.608790,0.687045,0.235350,0.580070,-0.036462,-0.039567,0.036462,-0.560970,-0.608790,0.560970,0.162347,0.555660,-0.028144,-0.032498,0.048747,-0.433005,-0.500027,0.749986,0.391894,0.519040,-0.036462,-0.039567,0.036462,-0.560970,-0.608790,0.560970,0.392090,0.518550,-0.025782,-0.039567,0.044656,-0.396666,-0.608790,0.687045,0.408690,0.555373,-0.030024,-0.024873,0.052003,-0.461935,-0.382707,0.800095,0.374955,0.482420,-0.039801,-0.032498,0.039801,-0.612361,-0.500027,0.612361,0.345700,0.482031,-0.031390,-0.016822,0.054370,-0.482961,-0.258837,0.836512,0.176750,0.482420,-0.044393,-0.016822,0.044393,-0.683009,-0.258837,0.683009,0.176750,0.481969,-0.042460,-0.024873,0.042460,-0.653274,-0.382707,0.653275,0.177198,0.481930,-0.030024,-0.024873,0.052003,-0.461935,-0.382707,0.800095,0.345685,0.482420,-0.032220,-0.008484,0.055806,-0.495722,-0.130536,0.858615,0.536068,0.420890,-0.045566,-0.008484,0.045566,-0.701057,-0.130536,0.701057,0.137973,0.420890,-0.044393,-0.016822,0.044393,-0.683009,-0.258837,0.683009,0.138180,0.420933,-0.031390,-0.016822,0.054370,-0.482961,-0.258837,0.836512,0.138180,0.421380,-0.032498,0.000000,0.056288,-0.500000,0.0,0.866025,0.137690,0.421380,-0.045959,0.000000,0.045959,-0.707107,0.0,0.707107,0.137690,0.420927,-0.045566,0.008484,0.045566,-0.701057,0.130536,0.701057,0.118160,0.384308,-0.032498,0.000000,0.056288,-0.500000,0.0,0.866025,0.118599,0.384760,-0.032220,0.008484,0.055806,-0.495722,0.130536,0.858615,0.118160,0.384760,-0.045959,0.000000,0.045959,-0.707107,0.0,0.707107,0.118606,0.384270,-0.044393,0.016822,0.044393,-0.683009,0.258837,0.683009,0.079385,0.323240,-0.032220,0.008484,0.055806,-0.495722,0.130536,0.858615,0.079590,0.323730,-0.031390,0.016822,0.054370,-0.482961,0.258837,0.836512,0.079100,0.323730,-0.045566,0.008484,0.045566,-0.701057,0.130536,0.701057,0.079590,0.323278,-0.042460,0.024873,0.042460,-0.653274,0.382707,0.653275,0.079100,0.323288,-0.030024,0.024873,0.052003,-0.461935,0.382707,0.800095,0.079100,0.323730,-0.039801,0.032498,0.039801,-0.612361,0.500027,0.612361,0.960930,0.260053,-0.030024,0.024873,0.052003,-0.461935,0.382707,0.800095,0.059577,0.287100,-0.028144,0.032498,0.048747,-0.433005,0.500027,0.749986,0.037590,0.262690,-0.042460,0.024873,0.042460,-0.653274,0.382707,0.653275,0.060012,0.286620,-0.028144,0.032498,0.048747,-0.433005,0.500027,0.749986,0.232910,0.262399,-0.025782,0.039567,0.044656,-0.396666,0.608790,0.687046,0.223422,0.226070,-0.039801,0.032498,0.039801,-0.612361,0.500027,0.612361,0.035277,0.262242,-0.022979,0.045959,0.039801,-0.353540,0.707133,0.612350,0.199172,0.189450,-0.032498,0.045959,0.032498,-0.499982,0.707133,0.499982,0.030270,0.225580,-0.036462,0.039567,0.036462,-0.560970,0.608790,0.560970,0.020795,0.225625,-0.019783,0.051564,0.034266,-0.304367,0.793375,0.527178,0.977530,0.162590,-0.027978,0.051564,0.027978,-0.430439,0.793375,0.430439,0.000970,0.189026,-0.032498,0.045959,0.032498,-0.499982,0.707133,0.499982,0.001460,0.189012,-0.022979,0.045959,0.039801,-0.353540,0.707133,0.612350,0.000970,0.189450,-0.022979,0.056288,0.022979,-0.251872,0.934410,0.251872,0.977530,0.162100,-0.019783,0.051564,0.034266,-0.304367,0.793375,0.527178,0.174493,0.165030,-0.016249,0.056288,0.028144,-0.178100,0.934410,0.308479,0.162100,0.140487,-0.027978,0.051564,0.027978,-0.430439,0.793375,0.430439,0.975290,0.162139,-0.022979,0.056288,0.022979,-0.251872,0.934410,0.251872,0.963370,0.125558,-0.012436,0.057362,0.021540,-0.040228,0.996758,0.069677,0.962890,0.125970,-0.016249,0.056288,0.028144,-0.178100,0.934410,0.308479,0.962890,0.125970,-0.012436,0.057362,0.021540,-0.040228,0.996758,0.069677,0.154780,0.115851,-0.007918,0.057553,0.013714,0.142687,0.958416,-0.247141,0.960440,0.113770,-0.017588,0.057362,0.017588,-0.056891,0.996758,0.056891,0.958004,0.113283,-0.006216,0.055220,0.010767,0.395924,0.610717,-0.685761,0.118436,0.104000,-0.004242,0.044143,0.007347,0.470974,0.335759,-0.815751,0.121064,0.104000,-0.005999,0.044143,0.005999,-0.046247,0.997859,0.046247,0.579590,0.093750,-0.004242,0.044143,0.007347,-0.032702,0.997859,0.056641,0.121064,0.104000,-0.002196,-0.064439,0.008195,-0.033780,-0.991446,0.126069,0.750610,0.750970,-0.004354,-0.062781,0.016249,-0.066983,-0.965931,0.249983,0.714148,0.714350,-0.004242,-0.064439,0.007347,-0.065258,-0.991446,0.113031,0.711910,0.713860,-0.006438,-0.060048,0.024025,-0.099040,-0.923890,0.369621,0.687477,0.677730,-0.008411,-0.062781,0.014568,-0.129401,-0.965931,0.224128,0.687500,0.677240,-0.006438,-0.060048,0.024025,-0.099040,-0.923890,0.369621,0.694779,0.677730,-0.008411,-0.056288,0.031390,-0.129402,-0.866041,0.482936,0.816749,0.652830,-0.012436,-0.060048,0.021540,-0.191330,-0.923890,0.331393,0.694797,0.677240,-0.010241,-0.051564,0.038219,-0.157552,-0.793375,0.587991,0.655552,0.616690,-0.016249,-0.056288,0.028144,-0.249986,-0.866041,0.432989,0.653320,0.616210,-0.008411,-0.056288,0.031390,-0.129402,-0.866041,0.482936,0.689571,0.653320,-0.011895,-0.045959,0.044393,-0.183006,-0.707133,0.682988,0.628877,0.580070,-0.019783,-0.051564,0.034266,-0.304367,-0.793375,0.527178,0.628900,0.579678,-0.013346,-0.039567,0.049807,-0.205329,-0.608790,0.766300,0.635740,0.579943,-0.022979,-0.045959,0.039801,-0.353540,-0.707133,0.612350,0.636207,0.579590,-0.011895,-0.045959,0.044393,-0.183006,-0.707133,0.682988,0.636230,0.579944,-0.014568,-0.032498,0.054370,-0.224140,-0.500027,0.836501,0.596953,0.519040,-0.025782,-0.039567,0.044656,-0.396666,-0.608790,0.687045,0.594720,0.518550,-0.013346,-0.039567,0.049807,-0.205329,-0.608790,0.766300,0.630965,0.555660,-0.015542,-0.024873,0.058002,-0.239115,-0.382707,0.892390,0.567858,0.482420,-0.028144,-0.032498,0.048747,-0.433005,-0.500027,0.749986,0.567870,0.482102,-0.016249,-0.016822,0.060642,-0.249999,-0.258837,0.933008,0.577140,0.482283,-0.031390,-0.016822,0.054370,-0.482961,-0.258837,0.836512,0.350090,0.457712,-0.030024,-0.024873,0.052003,-0.461935,-0.382707,0.800095,0.577598,0.481930,-0.015542,-0.024873,0.058002,-0.239115,-0.382707,0.892390,0.577630,0.482283,-0.016678,-0.008484,0.062244,-0.256604,-0.130536,0.957661,0.535926,0.421380,-0.032220,-0.008484,0.055806,-0.495722,-0.130536,0.858615,0.340330,0.421085,-0.031390,-0.016822,0.054370,-0.482961,-0.258837,0.836512,0.536130,0.420890,-0.016249,-0.016822,0.060642,-0.249999,-0.258837,0.933008,0.572260,0.457865,-0.016822,0.000000,0.062781,-0.258819,0.0,0.965926,0.538080,0.421242,-0.032498,0.000000,0.056288,-0.500000,0.0,0.866025,0.316356,0.384760,-0.032220,-0.008484,0.055806,-0.495722,-0.130536,0.858615,0.538366,0.420890,-0.016678,-0.008484,0.062244,-0.256604,-0.130536,0.957661,0.538361,0.421380,-0.032220,0.008484,0.055806,-0.495722,0.130536,0.858615,0.291500,0.360055,-0.016822,0.000000,0.062781,-0.258819,0.0,0.965926,0.519040,0.384621,-0.016678,0.008484,0.062244,-0.256604,0.130536,0.957661,0.518550,0.384621,-0.032498,0.000000,0.056288,-0.500000,0.0,0.866025,0.518988,0.384270,-0.031390,0.016822,0.054370,-0.482961,0.258837,0.836512,0.282008,0.323730,-0.016678,0.008484,0.062244,-0.256604,0.130536,0.957661,0.513670,0.360211,-0.016249,0.016822,0.060642,-0.249999,0.258837,0.933008,0.479779,0.323730,-0.032220,0.008484,0.055806,-0.495722,0.130536,0.858615,0.479980,0.323240,-0.030024,0.024873,0.052003,-0.461935,0.382707,0.800095,0.257761,0.287100,-0.015542,0.024873,0.058002,-0.239115,0.382707,0.892390,0.479490,0.323588,-0.031390,0.016822,0.054370,-0.482961,0.258837,0.836512,0.479490,0.323240,-0.015542,0.024873,0.058002,-0.239115,0.382707,0.892390,0.460440,0.286965,-0.014568,0.032498,0.054370,-0.224140,0.500027,0.836501,0.459960,0.286961,-0.030024,0.024873,0.052003,-0.461935,0.382707,0.800095,0.459960,0.286620,-0.014568,0.032498,0.054370,-0.224140,0.500027,0.836501,0.455198,0.262690,-0.013346,0.039567,0.049807,-0.205329,0.608790,0.766300,0.421186,0.226070,-0.028144,0.032498,0.048747,-0.433005,0.500027,0.749986,0.233039,0.262399,-0.011895,0.045959,0.044393,-0.183006,0.707133,0.682988,0.232910,0.226070,-0.025782,0.039567,0.044656,-0.396666,0.608790,0.687046,0.223440,0.225782,-0.022979,0.045959,0.039801,-0.353540,0.707133,0.612350,0.401360,0.188960,-0.011895,0.045959,0.044393,-0.183006,0.707133,0.682988,0.401850,0.189321,-0.010241,0.051564,0.038219,-0.157552,0.793375,0.587991,0.401360,0.189314,-0.010241,0.051564,0.038219,-0.157552,0.793375,0.587991,0.396673,0.165030,-0.019783,0.051564,0.034266,-0.304367,0.793375,0.527178,0.174512,0.164737,-0.008411,0.056288,0.031390,-0.092191,0.934410,0.344063,0.379390,0.140534,-0.006438,0.057362,0.024025,-0.020823,0.996758,0.077714,0.357670,0.116210,-0.016249,0.056288,0.028144,-0.178100,0.934410,0.308479,0.162103,0.140487,-0.006438,0.057362,0.024025,-0.020823,0.996758,0.077714,0.372070,0.128175,-0.004099,0.057553,0.015296,0.073860,0.958416,-0.275650,0.147460,0.116210,-0.012436,0.057362,0.021540,-0.040228,0.996758,0.069677,0.140620,0.116210,-0.007918,0.057553,0.013714,0.142687,0.958416,-0.247141,0.140261,0.115720,-0.003218,0.055220,0.012009,0.204946,0.610717,-0.764867,0.343131,0.104000,-0.002196,0.044143,0.008195,0.243794,0.335759,-0.909852,0.342849,0.104000,-0.004242,0.044143,0.007347,-0.032702,0.997859,0.056641,0.562500,0.093750,-0.002196,0.044143,0.008195,-0.016928,0.997859,0.063175,0.342849,0.104000,-0.000000,-0.064439,0.008484,0.0,-0.991446,0.130517,0.748340,0.750970,-0.002196,-0.064439,0.008195,-0.033780,-0.991446,0.126069,0.748178,0.750970,-0.000000,-0.064439,0.008484,0.0,-0.991446,0.130517,0.945924,0.750970,-0.000000,-0.062781,0.016822,0.0,-0.965931,0.258801,0.916785,0.714350,-0.002196,-0.064439,0.008195,-0.033780,-0.991446,0.126069,0.916990,0.713860,-0.000000,-0.060048,0.024873,0.0,-0.923890,0.382659,0.892527,0.677730,-0.004354,-0.062781,0.016249,-0.066983,-0.965931,0.249983,0.892570,0.677240,-0.000000,-0.056288,0.032498,0.0,-0.866041,0.499972,0.894530,0.652861,-0.006438,-0.060048,0.024025,-0.099040,-0.923890,0.369621,0.816890,0.652830,-0.000000,-0.051564,0.039567,0.0,-0.793375,0.608733,0.858184,0.616690,-0.008411,-0.056288,0.031390,-0.129402,-0.866041,0.482936,0.858390,0.616210,-0.000000,-0.045959,0.045959,0.000000,-0.707133,0.707081,0.833931,0.580070,-0.010241,-0.051564,0.038219,-0.157552,-0.793375,0.587991,0.833980,0.579590,-0.000000,-0.039567,0.051564,-0.000000,-0.608790,0.793332,0.835930,0.555190,-0.011895,-0.045959,0.044393,-0.183006,-0.707133,0.682988,0.760740,0.555170,-0.000000,-0.032498,0.056288,0.000000,-0.500027,0.866010,0.799587,0.519040,-0.013346,-0.039567,0.049807,-0.205329,-0.608790,0.766300,0.799800,0.518550,-0.000000,-0.024873,0.060048,0.0,-0.382707,0.923870,0.775341,0.482420,-0.014568,-0.032498,0.054370,-0.224140,-0.500027,0.836501,0.775390,0.481930,-0.000000,-0.016822,0.062781,-0.000000,-0.258837,0.965921,0.777340,0.457536,-0.015542,-0.024873,0.058002,-0.239115,-0.382707,0.892390,0.577582,0.482283,-0.000000,-0.008484,0.064439,0.000000,-0.130536,0.991444,0.741000,0.421380,-0.016249,-0.016822,0.060642,-0.249999,-0.258837,0.933008,0.741210,0.420890,-0.000000,0.000000,0.064995,0.0,0.0,1.0,0.538080,0.421380,-0.000000,0.000000,0.064995,0.0,0.0,1.0,0.518988,0.384760,-0.000000,0.008484,0.064439,0.000000,0.130536,0.991444,0.516110,0.360350,-0.016249,0.016822,0.060642,-0.249999,0.258837,0.933008,0.516110,0.359860,-0.000000,0.008484,0.064439,0.000000,0.130536,0.991444,0.718750,0.359876,-0.000000,0.016822,0.062781,-0.000000,0.258837,0.965921,0.518622,0.323730,-0.016678,0.008484,0.062244,-0.256604,0.130536,0.957661,0.513792,0.360211,-0.015542,0.024873,0.058002,-0.239115,0.382707,0.892390,0.518550,0.323240,-0.000000,0.024873,0.060048,0.0,0.382707,0.923870,0.518550,0.323730,-0.016249,0.016822,0.060642,-0.249999,0.258837,0.933008,0.479779,0.323591,-0.000000,0.024873,0.060048,0.0,0.382707,0.923870,0.459960,0.287100,-0.000000,0.032498,0.056288,0.000000,0.500027,0.866010,0.457520,0.262690,-0.000000,0.032498,0.056288,0.000000,0.500027,0.866010,0.660150,0.262218,0.0,0.039567,0.051564,-0.000000,0.608789,0.793332,0.645500,0.225599,-0.014568,0.032498,0.054370,-0.224140,0.500027,0.836501,0.455205,0.262554,-0.011895,0.045959,0.044393,-0.183006,0.707133,0.682988,0.457520,0.225580,-0.000000,0.045959,0.045959,0.000000,0.707133,0.707081,0.457520,0.226070,-0.013346,0.039567,0.049807,-0.205329,0.608790,0.766300,0.421195,0.225936,-0.000000,0.045959,0.045959,0.000000,0.707133,0.707081,0.401360,0.189450,-0.000000,0.051564,0.039567,0.0,0.793375,0.608733,0.398920,0.165030,-0.000000,0.051564,0.039567,0.0,0.793375,0.608733,0.601560,0.164576,-0.010241,0.051564,0.038219,-0.157552,0.793375,0.587991,0.396681,0.164911,-0.000000,0.056288,0.032498,0.000000,0.934410,0.356200,0.398920,0.165030,-0.000000,0.056288,0.032498,0.000000,0.934410,0.356200,0.372550,0.128410,-0.008411,0.056288,0.031390,-0.092191,0.934410,0.344063,0.379407,0.140534,-0.000000,0.057362,0.024873,-0.000000,0.996758,0.080456,0.582257,0.116210,-0.000000,0.057553,0.015836,0.0,0.958416,-0.285374,0.577465,0.116210,-0.006438,0.057362,0.024025,-0.020823,0.996758,0.077714,0.357687,0.115949,-0.004099,0.057553,0.015296,0.073860,0.958416,-0.275650,0.343014,0.116210,-0.000000,0.055220,0.012432,0.0,0.610717,-0.791849,0.584960,0.103833,0.0,0.044143,0.008484,0.0,0.335759,-0.941948,0.584618,0.104000,-0.002196,0.044143,0.008195,-0.016928,0.997859,0.063175,0.599367,0.093750,0.0,0.044143,0.008484,0.0,0.997859,0.065403,0.584618,0.104000,0.002196,-0.064439,0.008195,0.033780,-0.991446,0.126069,0.150026,0.753410,-0.000000,-0.064439,0.008484,0.0,-0.991446,0.130517,0.135740,0.716300,0.004354,-0.062781,0.016249,0.066983,-0.965931,0.249983,0.135537,0.716790,0.006438,-0.060048,0.024025,0.099040,-0.923890,0.369620,0.116170,0.680170,-0.000000,-0.062781,0.016822,0.0,-0.965931,0.258801,0.116210,0.679680,0.008411,-0.056288,0.031390,0.129402,-0.866041,0.482936,0.093750,0.655445,-0.000000,-0.060048,0.024873,0.0,-0.923890,0.382659,0.919384,0.677281,0.010241,-0.051564,0.038219,0.157552,-0.793375,0.587991,0.076940,0.619140,-0.000000,-0.056288,0.032498,0.0,-0.866041,0.499972,0.077140,0.618650,0.011895,-0.045959,0.044393,0.183006,-0.707133,0.682988,0.057569,0.582520,-0.000000,-0.051564,0.039567,0.0,-0.793375,0.608733,0.057610,0.582030,-0.000000,-0.039567,0.051564,-0.000000,-0.608790,0.793332,0.760497,0.555660,0.013346,-0.039567,0.049807,0.205329,-0.608790,0.766300,0.860350,0.580070,-0.000000,-0.045959,0.045959,0.000000,-0.707133,0.707081,0.860790,0.579590,0.013346,-0.039567,0.049807,0.205329,-0.608790,0.766300,0.035150,0.557780,0.014568,-0.032498,0.054370,0.224140,-0.500027,0.836501,0.018344,0.521480,-0.000000,-0.039567,0.051564,-0.000000,-0.608790,0.793332,0.018550,0.520990,0.015542,-0.024873,0.058002,0.239115,-0.382707,0.892390,0.194330,0.484419,-0.000000,-0.032498,0.056288,0.000000,-0.500027,0.866010,0.821556,0.518550,-0.000000,-0.016822,0.062781,-0.000000,-0.258837,0.965921,0.801750,0.481947,0.016249,-0.016822,0.060642,0.249999,-0.258837,0.933008,0.801750,0.482420,-0.000000,-0.024873,0.060048,0.0,-0.382707,0.923870,0.802190,0.481930,-0.000000,-0.008484,0.064439,0.000000,-0.130536,0.991444,0.762970,0.420890,0.016249,-0.016822,0.060642,0.249999,-0.258837,0.933008,0.763180,0.421380,0.016678,-0.008484,0.062244,0.256604,-0.130536,0.957661,0.162527,0.423340,-0.000000,-0.016822,0.062781,-0.000000,-0.258837,0.965921,0.763180,0.420912,-0.000000,0.000000,0.064995,0.0,0.0,1.0,0.762690,0.420905,0.016822,0.000000,0.062781,0.258819,0.0,0.965926,0.762690,0.421380,0.016678,0.008484,0.062244,0.256604,0.130536,0.957661,0.743160,0.384760,-0.000000,0.008484,0.064439,0.000000,0.130536,0.991444,0.743160,0.384288,-0.000000,0.000000,0.064995,0.0,0.0,1.0,0.743606,0.384270,0.016822,0.000000,0.062781,0.258819,0.0,0.965926,0.743598,0.384760,0.016249,0.016822,0.060642,0.249999,0.258837,0.933008,0.938756,0.323240,-0.000000,0.016822,0.062781,-0.000000,0.258837,0.965921,0.704391,0.323240,-0.000000,0.008484,0.064439,0.000000,0.130536,0.991444,0.704590,0.323256,0.016678,0.008484,0.062244,0.256604,0.130536,0.957661,0.704590,0.323730,0.015542,0.024873,0.058002,0.239115,0.382707,0.892390,0.704100,0.323730,-0.000000,0.024873,0.060048,0.0,0.382707,0.923870,0.704100,0.323266,0.014568,0.032498,0.054370,0.224140,0.500027,0.836501,0.662590,0.262690,-0.000000,0.032498,0.056288,0.000000,0.500027,0.866010,0.684570,0.286650,-0.000000,0.024873,0.060048,0.0,0.382707,0.923870,0.685020,0.286620,0.015542,0.024873,0.058002,0.239115,0.382707,0.892390,0.684586,0.287100,0.013346,0.039567,0.049807,0.205329,0.608790,0.766300,0.848430,0.226070,-0.000000,0.032498,0.056288,0.000000,0.500027,0.866010,0.660288,0.262218,0.014568,0.032498,0.054370,0.224140,0.500027,0.836501,0.857910,0.262370,0.011895,0.045959,0.044393,0.183006,0.707133,0.682988,0.824181,0.189450,-0.000000,0.045959,0.045959,0.000000,0.707133,0.707081,0.655270,0.225580,0.0,0.039567,0.051564,-0.000000,0.608789,0.793332,0.645808,0.225599,0.010241,0.051564,0.038219,0.157552,0.793375,0.587991,0.604000,0.165030,-0.000000,0.045959,0.045959,0.000000,0.707133,0.707081,0.626460,0.188982,0.011895,0.045959,0.044393,0.183006,0.707133,0.682988,0.625970,0.189450,-0.000000,0.051564,0.039567,0.0,0.793375,0.608733,0.625970,0.189013,0.010241,0.051564,0.038219,0.157552,0.793375,0.587991,0.799310,0.164719,-0.000000,0.056288,0.032498,0.000000,0.934410,0.356200,0.604000,0.164550,-0.000000,0.051564,0.039567,0.0,0.793375,0.608733,0.601725,0.164574,0.008411,0.056288,0.031390,0.092191,0.934410,0.344063,0.604000,0.165030,0.008411,0.056288,0.031390,0.092191,0.934410,0.344063,0.589350,0.128410,-0.000000,0.057362,0.024873,-0.000000,0.996758,0.080456,0.589350,0.128166,-0.000000,0.056288,0.032498,0.000000,0.934410,0.356200,0.589794,0.127930,0.006438,0.057362,0.024025,0.020823,0.996758,0.077714,0.584470,0.116210,0.006438,0.057362,0.024025,0.020823,0.996758,0.077714,0.777537,0.116210,-0.000000,0.057362,0.024873,-0.000000,0.996758,0.080456,0.582272,0.115957,0.004099,0.057553,0.015296,-0.073860,0.958416,-0.275650,0.762982,0.116210,0.002196,0.044143,0.008195,-0.243794,0.335759,-0.909852,0.740852,0.104000,0.003218,0.055220,0.012009,-0.204946,0.610717,-0.764867,0.743581,0.104000,0.0,0.044143,0.008484,0.0,0.997859,0.065403,0.777484,0.103510,0.002196,0.044143,0.008195,0.016928,0.997859,0.063175,0.740852,0.104000,0.004242,-0.064439,0.007347,0.065258,-0.991446,0.113031,0.374632,0.753410,0.008411,-0.062781,0.014568,0.129401,-0.965931,0.224128,0.340611,0.716790,0.002196,-0.064439,0.008195,0.033780,-0.991446,0.126069,0.338370,0.716300,0.012436,-0.060048,0.021540,0.191330,-0.923890,0.331393,0.321233,0.680170,0.004354,-0.062781,0.016249,0.066983,-0.965931,0.249983,0.313960,0.679680,0.006438,-0.060048,0.024025,0.099040,-0.923890,0.369620,0.118602,0.679859,0.016249,-0.056288,0.028144,0.249986,-0.866041,0.432989,0.316024,0.655760,0.008411,-0.056288,0.031390,0.129402,-0.866041,0.482936,0.279780,0.618650,0.019783,-0.051564,0.034266,0.304367,-0.793375,0.527178,0.282005,0.619140,0.022979,-0.045959,0.039801,0.353540,-0.707133,0.612350,0.255338,0.582520,0.010241,-0.051564,0.038219,0.157552,-0.793375,0.587991,0.255370,0.582030,0.022979,-0.045959,0.039801,0.353540,-0.707133,0.612350,0.262690,0.582350,0.025782,-0.039567,0.044656,0.396666,-0.608790,0.687045,0.262200,0.582350,0.011895,-0.045959,0.044393,0.183006,-0.707133,0.682988,0.262658,0.582030,0.025782,-0.039567,0.044656,0.396666,-0.608790,0.687045,0.257320,0.557931,0.028144,-0.032498,0.048747,0.433005,-0.500027,0.749986,0.223415,0.521480,0.013346,-0.039567,0.049807,0.205329,-0.608790,0.766300,0.221190,0.520990,0.015542,-0.024873,0.058002,0.239115,-0.382707,0.892390,0.001410,0.484860,0.030024,-0.024873,0.052003,0.461935,-0.382707,0.800095,0.194314,0.484860,0.014568,-0.032498,0.054370,0.224140,-0.500027,0.836501,0.194330,0.484419,0.016249,-0.016822,0.060642,0.249999,-0.258837,0.933008,0.975090,0.457686,0.030024,-0.024873,0.052003,0.461935,-0.382707,0.800095,0.204100,0.484692,0.031390,-0.016822,0.054370,0.482960,-0.258837,0.836512,0.203610,0.484692,0.015542,-0.024873,0.058002,0.239115,-0.382707,0.892390,0.204063,0.484370,0.016678,-0.008484,0.062244,0.256604,-0.130536,0.957661,0.965330,0.421059,0.031390,-0.016822,0.054370,0.482960,-0.258837,0.836512,0.198730,0.460275,0.032220,-0.008484,0.055806,0.495722,-0.130536,0.858615,0.162385,0.423820,0.016249,-0.016822,0.060642,0.249999,-0.258837,0.933008,0.162590,0.423340,0.016822,0.000000,0.062781,0.258819,0.0,0.965926,0.941356,0.384760,0.032220,-0.008484,0.055806,0.495722,-0.130536,0.858615,0.164824,0.423820,0.032498,0.000000,0.056288,0.500000,0.0,0.866025,0.164550,0.423656,0.016678,-0.008484,0.062244,0.256604,-0.130536,0.957661,0.164829,0.423340,0.032220,0.008484,0.055806,0.495722,0.130536,0.858615,0.145020,0.387031,0.016678,0.008484,0.062244,0.256604,0.130536,0.957661,0.916500,0.360029,0.016822,0.000000,0.062781,0.258819,0.0,0.965926,0.145449,0.386710,0.032498,0.000000,0.056288,0.500000,0.0,0.866025,0.145500,0.387032,0.031390,0.016822,0.054370,0.482961,0.258837,0.836512,0.106236,0.326170,0.016249,0.016822,0.060642,0.249999,0.258837,0.933008,0.906730,0.323409,0.016678,0.008484,0.062244,0.256604,0.130536,0.957661,0.938960,0.323240,0.032220,0.008484,0.055806,0.495722,0.130536,0.858615,0.140130,0.362622,0.030024,0.024873,0.052003,0.461935,0.382707,0.800095,0.945800,0.323730,0.015542,0.024873,0.058002,0.239115,0.382707,0.892390,0.882766,0.287100,0.016249,0.016822,0.060642,0.249999,0.258837,0.933008,0.907022,0.323409,0.028144,0.032498,0.048747,0.433005,0.500027,0.749986,0.086420,0.289377,0.015542,0.024873,0.058002,0.239115,0.382707,0.892390,0.086423,0.289060,0.030024,0.024873,0.052003,0.461935,0.382707,0.800095,0.086910,0.289381,0.025782,0.039567,0.044656,0.396666,0.608790,0.687045,0.047659,0.228510,0.014568,0.032498,0.054370,0.224140,0.500027,0.836501,0.858047,0.262369,0.028144,0.032498,0.048747,0.433005,0.500027,0.749986,0.081540,0.264961,0.022979,0.045959,0.039801,0.353540,0.707133,0.612350,0.879880,0.226070,0.013346,0.039567,0.049807,0.205329,0.608790,0.766300,0.848449,0.225750,0.019783,0.051564,0.034266,0.304367,0.793375,0.527178,0.027830,0.191710,0.011895,0.045959,0.044393,0.183006,0.707133,0.682988,0.027830,0.191400,0.022979,0.045959,0.039801,0.353540,0.707133,0.612350,0.028320,0.191720,0.019783,0.051564,0.034266,0.304367,0.793375,0.527178,0.023108,0.167480,0.008411,0.056288,0.031390,0.092191,0.934410,0.344063,0.826170,0.164550,0.010241,0.051564,0.038219,0.157552,0.793375,0.587991,0.799473,0.164717,0.016249,0.056288,0.028144,0.178100,0.934410,0.308479,0.013180,0.142586,0.016249,0.056288,0.028144,0.178100,0.934410,0.308479,0.787100,0.128410,0.006438,0.057362,0.024025,0.020823,0.996758,0.077714,0.787100,0.128044,0.008411,0.056288,0.031390,0.092191,0.934410,0.344063,0.787590,0.128063,0.012436,0.057362,0.021540,0.040228,0.996758,0.069677,0.787100,0.128410,0.012436,0.057362,0.021540,0.040228,0.996758,0.069677,0.985153,0.116210,0.006438,0.057362,0.024025,0.020823,0.996758,0.077714,0.997550,0.115720,0.007918,0.057553,0.013714,-0.142687,0.958416,-0.247141,0.997461,0.116210,0.002196,0.044143,0.008195,-0.243794,0.335759,-0.909852,0.770148,0.103510,0.004242,0.044143,0.007347,-0.470974,0.335759,-0.815751,0.975304,0.104000,0.006216,0.055220,0.010767,-0.395924,0.610717,-0.685761,0.997096,0.116210,0.002196,0.044143,0.008195,0.016928,0.997859,0.063175,0.584470,0.093750,0.004242,0.044143,0.007347,0.032702,0.997859,0.056641,0.975304,0.104000,0.005999,-0.064439,0.005999,0.092289,-0.991446,0.092289,0.572385,0.753410,0.004242,-0.064439,0.007347,0.065258,-0.991446,0.113031,0.536130,0.716300,0.011895,-0.062781,0.011895,0.183000,-0.965931,0.183000,0.543243,0.716790,0.008411,-0.062781,0.014568,0.129401,-0.965931,0.224128,0.516600,0.679680,0.017588,-0.060048,0.017588,0.270581,-0.923890,0.270581,0.518994,0.680170,0.012436,-0.060048,0.021540,0.191330,-0.923890,0.331393,0.321232,0.679996,0.022979,-0.056288,0.022979,0.353534,-0.866041,0.353534,0.513786,0.655760,0.027978,-0.051564,0.027978,0.430439,-0.793375,0.430439,0.477349,0.619140,0.016249,-0.056288,0.028144,0.249986,-0.866041,0.432989,0.477530,0.618650,0.027978,-0.051564,0.027978,0.430439,-0.793375,0.430439,0.484647,0.619140,0.019783,-0.051564,0.034266,0.304367,-0.793375,0.527178,0.484676,0.618650,0.032498,-0.045959,0.032498,0.499982,-0.707133,0.499982,0.484370,0.619117,0.036462,-0.039567,0.036462,0.560970,-0.608790,0.560970,0.459960,0.582500,0.022979,-0.045959,0.039801,0.353540,-0.707133,0.612350,0.460419,0.582030,0.032498,-0.045959,0.032498,0.499982,-0.707133,0.499982,0.460391,0.582520,0.036462,-0.039567,0.036462,0.560970,-0.608790,0.560970,0.455181,0.558100,0.039801,-0.032498,0.039801,0.612361,-0.500027,0.612361,0.418751,0.521480,0.025782,-0.039567,0.044656,0.396666,-0.608790,0.687045,0.418940,0.520990,0.039801,-0.032498,0.039801,0.612361,-0.500027,0.612361,0.426056,0.521480,0.042460,-0.024873,0.042460,0.653275,-0.382707,0.653275,0.425780,0.521463,0.028144,-0.032498,0.048747,0.433005,-0.500027,0.749986,0.426081,0.520990,0.042460,-0.024873,0.042460,0.653275,-0.382707,0.653275,0.401800,0.484860,0.044393,-0.016822,0.044393,0.683009,-0.258837,0.683009,0.401360,0.484845,0.030024,-0.024873,0.052003,0.461935,-0.382707,0.800095,0.401821,0.484370,0.044393,-0.016822,0.044393,0.683009,-0.258837,0.683009,0.396595,0.460440,0.045566,-0.008484,0.045566,0.701057,-0.130536,0.701057,0.367460,0.423820,0.031390,-0.016822,0.054370,0.482960,-0.258837,0.836512,0.367670,0.423340,0.032498,0.000000,0.056288,0.500000,0.0,0.866025,0.367180,0.423340,0.045959,0.000000,0.045959,0.707107,0.0,0.707107,0.367180,0.423806,0.032220,-0.008484,0.055806,0.495722,-0.130536,0.858615,0.367617,0.423340,0.045566,0.008484,0.045566,0.701057,0.130536,0.701057,0.342770,0.387183,0.032498,0.000000,0.056288,0.500000,0.0,0.866025,0.343208,0.386710,0.045959,0.000000,0.045959,0.707107,0.0,0.707107,0.343216,0.387200,0.044393,0.016822,0.044393,0.683009,0.258837,0.683009,0.308881,0.326170,0.032220,0.008484,0.055806,0.495722,0.130536,0.858615,0.309080,0.325680,0.045566,0.008484,0.045566,0.701057,0.130536,0.701057,0.338010,0.362790,0.042460,0.024873,0.042460,0.653274,0.382707,0.653275,0.308590,0.326145,0.030024,0.024873,0.052003,0.461935,0.382707,0.800095,0.308590,0.325680,0.031390,0.016822,0.054370,0.482961,0.258837,0.836512,0.308590,0.325680,0.039801,0.032498,0.039801,0.612361,0.500027,0.612361,0.284180,0.289520,0.030024,0.024873,0.052003,0.461935,0.382707,0.800095,0.284196,0.289060,0.042460,0.024873,0.042460,0.653274,0.382707,0.653275,0.284630,0.289550,0.036462,0.039567,0.036462,0.560970,0.608790,0.560970,0.250301,0.228510,0.028144,0.032498,0.048747,0.433005,0.500027,0.749986,0.081679,0.264961,0.039801,0.032498,0.039801,0.612361,0.500027,0.612361,0.279427,0.265130,0.025782,0.039567,0.044656,0.396666,0.608790,0.687045,0.047670,0.228340,0.032498,0.045959,0.032498,0.499982,0.707133,0.499982,0.083980,0.228510,0.022979,0.045959,0.039801,0.353540,0.707133,0.612350,0.083980,0.228020,0.022979,0.045959,0.039801,0.353540,0.707133,0.612350,0.225580,0.191400,0.027978,0.051564,0.027978,0.430439,0.793375,0.430439,0.225580,0.191818,0.032498,0.045959,0.032498,0.499982,0.707133,0.499982,0.226070,0.191870,0.027978,0.051564,0.027978,0.430439,0.793375,0.430439,0.220925,0.167480,0.022979,0.056288,0.022979,0.251872,0.934410,0.251872,0.189418,0.130850,0.019783,0.051564,0.034266,0.304367,0.793375,0.527178,0.023118,0.167308,0.022979,0.056288,0.022979,0.251872,0.934410,0.251872,0.992180,0.128410,0.017588,0.057362,0.017588,0.056891,0.996758,0.056891,0.992180,0.128410,0.016249,0.056288,0.028144,0.178100,0.934410,0.308479,0.992670,0.127946,0.011198,0.057553,0.011198,-0.201790,0.958416,-0.201790,0.181640,0.118457,0.012436,0.057362,0.021540,0.040228,0.996758,0.069677,0.181640,0.118160,0.017588,0.057362,0.017588,0.056891,0.996758,0.056891,0.181976,0.118650,0.007918,0.057553,0.013714,-0.142687,0.958416,-0.247141,0.001348,0.118650,0.008791,0.055220,0.008791,-0.559922,0.610717,-0.559922,0.193907,0.118650,0.005999,0.044143,0.005999,-0.666058,0.335759,-0.666058,0.201425,0.105950,0.004242,0.044143,0.007347,0.032702,0.997859,0.056641,0.977744,0.103587,0.005999,0.044143,0.005999,0.046247,0.997859,0.046247,0.201425,0.105950,0.007347,-0.064439,0.004242,0.113031,-0.991446,0.065258,0.777470,0.753410,0.014568,-0.062781,0.008411,0.224128,-0.965931,0.129401,0.760540,0.716790,0.005999,-0.064439,0.005999,0.092289,-0.991446,0.092289,0.760740,0.716300,0.011895,-0.062781,0.011895,0.183000,-0.965931,0.183000,0.741210,0.679680,0.021540,-0.060048,0.012436,0.331393,-0.923890,0.191330,0.741173,0.680170,0.017588,-0.060048,0.017588,0.270581,-0.923890,0.270581,0.667960,0.655270,0.028144,-0.056288,0.016249,0.432989,-0.866041,0.249986,0.718750,0.655387,0.034266,-0.051564,0.019783,0.527178,-0.793375,0.304367,0.701943,0.619140,0.022979,-0.056288,0.022979,0.353534,-0.866041,0.353534,0.702140,0.618650,0.032498,-0.045959,0.032498,0.499982,-0.707133,0.499982,0.682610,0.582030,0.027978,-0.051564,0.027978,0.430439,-0.793375,0.430439,0.682610,0.582030,0.039801,-0.045959,0.022979,0.612350,-0.707133,0.353540,0.682572,0.582520,0.044656,-0.039567,0.025782,0.687046,-0.608790,0.396666,0.660150,0.557744,0.032498,-0.045959,0.032498,0.499982,-0.707133,0.499982,0.609370,0.557610,0.036462,-0.039567,0.036462,0.560970,-0.608790,0.560970,0.643550,0.520990,0.048747,-0.032498,0.028144,0.749986,-0.500027,0.433005,0.643346,0.521480,0.042460,-0.024873,0.042460,0.653275,-0.382707,0.653275,0.624020,0.484370,0.039801,-0.032498,0.039801,0.612361,-0.500027,0.612361,0.624020,0.484370,0.052003,-0.024873,0.030024,0.800095,-0.382707,0.461935,0.623978,0.484860,0.042460,-0.024873,0.042460,0.653275,-0.382707,0.653275,0.401800,0.484845,0.054370,-0.016822,0.031390,0.836512,-0.258837,0.482961,0.601560,0.460096,0.045566,-0.008484,0.045566,0.701057,-0.130536,0.701057,0.584903,0.423340,0.044393,-0.016822,0.044393,0.683009,-0.258837,0.683009,0.584960,0.423340,0.055806,-0.008484,0.032220,0.858615,-0.130536,0.495722,0.584753,0.423820,0.045959,0.000000,0.045959,0.707107,0.0,0.707107,0.591790,0.423340,0.045566,-0.008484,0.045566,0.701057,-0.130536,0.701057,0.592073,0.423340,0.056288,0.000000,0.032498,0.866025,0.0,0.500000,0.591790,0.423476,0.055806,-0.008484,0.032220,0.858615,-0.130536,0.495722,0.592071,0.423340,0.056288,0.000000,0.032498,0.866025,0.0,0.500000,0.567870,0.386850,0.055806,0.008484,0.032220,0.858615,0.130536,0.495722,0.567380,0.386850,0.045959,0.000000,0.045959,0.707107,0.0,0.707107,0.567818,0.386710,0.044393,0.016822,0.044393,0.683009,0.258837,0.683009,0.345210,0.362300,0.055806,0.008484,0.032220,0.858615,0.130536,0.495722,0.542960,0.362439,0.054370,0.016822,0.031390,0.836512,0.258837,0.482961,0.347715,0.326170,0.045566,0.008484,0.045566,0.701057,0.130536,0.701057,0.338011,0.362775,0.042460,0.024873,0.042460,0.653274,0.382707,0.653275,0.347650,0.325680,0.052003,0.024873,0.030024,0.800095,0.382707,0.461935,0.347650,0.326170,0.044393,0.016822,0.044393,0.683009,0.258837,0.683009,0.308881,0.326155,0.052003,0.024873,0.030024,0.800095,0.382707,0.461935,0.509270,0.289198,0.048747,0.032498,0.028144,0.749986,0.500027,0.433005,0.508780,0.289203,0.042460,0.024873,0.042460,0.653274,0.382707,0.653275,0.508780,0.289060,0.048747,0.032498,0.028144,0.749986,0.500027,0.433005,0.484370,0.264776,0.044656,0.039567,0.025782,0.687046,0.608790,0.396666,0.474883,0.228510,0.039801,0.032498,0.039801,0.612361,0.500027,0.612361,0.279428,0.265113,0.036462,0.039567,0.036462,0.560970,0.608790,0.560970,0.250302,0.228491,0.039801,0.045959,0.022979,0.612350,0.707133,0.353540,0.281730,0.228510,0.032498,0.045959,0.032498,0.499982,0.707133,0.499982,0.281730,0.228020,0.032498,0.045959,0.032498,0.499982,0.707133,0.499982,0.423820,0.166990,0.034266,0.051564,0.019783,0.527178,0.793375,0.304367,0.423605,0.167480,0.039801,0.045959,0.022979,0.612350,0.707133,0.353540,0.423820,0.167480,0.028144,0.056288,0.016249,0.308479,0.934410,0.178100,0.413570,0.142627,0.027978,0.051564,0.027978,0.430439,0.793375,0.430439,0.220928,0.167432,0.017588,0.057362,0.017588,0.056891,0.996758,0.056891,0.413570,0.130370,0.028144,0.056288,0.016249,0.308479,0.934410,0.178100,0.414060,0.130414,0.021540,0.057362,0.012436,0.069677,0.996758,0.040228,0.413771,0.118650,0.022979,0.056288,0.022979,0.251872,0.934410,0.251872,0.413570,0.130370,0.011198,0.057553,0.011198,-0.201790,0.958416,-0.201790,0.194257,0.118650,0.013714,0.057553,0.007918,-0.247141,0.958416,-0.142687,0.469923,0.118650,0.017588,0.057362,0.017588,0.056891,0.996758,0.056891,0.181976,0.118594,0.010767,0.055220,0.006216,-0.685761,0.610717,-0.395924,0.487118,0.106440,0.007347,0.044143,0.004242,-0.815751,0.335759,-0.470974,0.516110,0.106193,0.005999,0.044143,0.005999,0.046247,0.997859,0.046247,0.518550,0.105950,0.007347,0.044143,0.004242,0.056641,0.997859,0.032702,0.519040,0.106149,0.008195,-0.064439,0.002196,0.126069,-0.991446,0.033780,0.972788,0.753410,0.007347,-0.064439,0.004242,0.113031,-0.991446,0.065258,0.775032,0.753410,0.007347,-0.064439,0.004242,0.113031,-0.991446,0.065258,0.963370,0.716300,0.016249,-0.062781,0.004354,0.249983,-0.965931,0.066983,0.963185,0.716790,0.014568,-0.062781,0.008411,0.224128,-0.965931,0.129401,0.938960,0.679680,0.024025,-0.060048,0.006438,0.369621,-0.923890,0.099040,0.946246,0.680170,0.024025,-0.060048,0.006438,0.369621,-0.923890,0.099040,0.938936,0.680170,0.028144,-0.056288,0.016249,0.432989,-0.866041,0.249986,0.667716,0.655760,0.021540,-0.060048,0.012436,0.331393,-0.923890,0.191330,0.743609,0.679680,0.031390,-0.056288,0.008411,0.482936,-0.866041,0.129402,0.743160,0.680170,0.028144,-0.056288,0.016249,0.432989,-0.866041,0.249986,0.904780,0.618650,0.031390,-0.056288,0.008411,0.482936,-0.866041,0.129402,0.941037,0.655760,0.038219,-0.051564,0.010241,0.587991,-0.793375,0.157552,0.907017,0.619140,0.034266,-0.051564,0.019783,0.527178,-0.793375,0.304367,0.880370,0.582114,0.044393,-0.045959,0.011895,0.682988,-0.707133,0.183006,0.887649,0.582520,0.044656,-0.039567,0.025782,0.687046,-0.608790,0.396666,0.609131,0.558100,0.039801,-0.045959,0.022979,0.612350,-0.707133,0.353540,0.685050,0.582160,0.049807,-0.039567,0.013346,0.766300,-0.608790,0.205329,0.684570,0.582520,0.044393,-0.045959,0.011895,0.682988,-0.707133,0.183006,0.880346,0.582520,0.044656,-0.039567,0.025782,0.687046,-0.608790,0.396666,0.846190,0.520990,0.054370,-0.032498,0.014568,0.836501,-0.500027,0.224140,0.848422,0.521480,0.049807,-0.039567,0.013346,0.766300,-0.608790,0.205329,0.882320,0.557898,0.048747,-0.032498,0.028144,0.749986,-0.500027,0.433005,0.819330,0.484527,0.058002,-0.024873,0.015542,0.892390,-0.382707,0.239115,0.829054,0.484860,0.060642,-0.016822,0.016249,0.933008,-0.258837,0.249999,0.625970,0.484860,0.054370,-0.016822,0.031390,0.836512,-0.258837,0.482961,0.625970,0.484508,0.052003,-0.024873,0.030024,0.800095,-0.382707,0.461935,0.626460,0.484507,0.058002,-0.024873,0.015542,0.892390,-0.382707,0.239115,0.819318,0.484860,0.062244,-0.008484,0.016678,0.957661,-0.130536,0.256604,0.789826,0.423820,0.054370,-0.016822,0.031390,0.836512,-0.258837,0.482961,0.787590,0.423340,0.060642,-0.016822,0.016249,0.933008,-0.258837,0.249999,0.823730,0.460249,0.062781,0.000000,0.016822,0.965926,0.0,0.258819,0.591790,0.423820,0.062244,-0.008484,0.016678,0.957661,-0.130536,0.256604,0.787386,0.423820,0.062781,0.000000,0.016822,0.965926,0.0,0.258819,0.567818,0.387200,0.062244,0.008484,0.016678,0.957661,0.130536,0.256605,0.567380,0.387200,0.054370,0.016822,0.031390,0.836512,0.258837,0.482961,0.533490,0.325680,0.062244,0.008484,0.016678,0.957661,0.130536,0.256605,0.533690,0.326170,0.060642,0.016822,0.016249,0.933008,0.258837,0.249999,0.533200,0.326170,0.055806,0.008484,0.032220,0.858615,0.130536,0.495722,0.533690,0.325819,0.052003,0.024873,0.030024,0.800095,0.382707,0.461935,0.533200,0.325823,0.058002,0.024873,0.015542,0.892390,0.382707,0.239115,0.533200,0.326170,0.058002,0.024873,0.015542,0.892390,0.382707,0.239115,0.508780,0.289550,0.054370,0.032498,0.014568,0.836501,0.500027,0.224140,0.511230,0.265130,0.054370,0.032498,0.014568,0.836501,0.500027,0.224140,0.706540,0.264932,0.049807,0.039567,0.013346,0.766300,0.608790,0.205329,0.672648,0.228510,0.048747,0.032498,0.028144,0.749986,0.500027,0.433005,0.484505,0.264776,0.039801,0.045959,0.022979,0.612350,0.707133,0.353540,0.484370,0.228020,0.044393,0.045959,0.011895,0.682988,0.707133,0.183006,0.653287,0.191890,0.044656,0.039567,0.025782,0.687046,0.608790,0.396666,0.474905,0.228153,0.038219,0.051564,0.010241,0.587991,0.793375,0.157552,0.452630,0.167480,0.039801,0.045959,0.022979,0.612350,0.707133,0.353540,0.450680,0.191530,0.044393,0.045959,0.011895,0.682988,0.707133,0.183006,0.450190,0.191890,0.031390,0.056288,0.008411,0.344063,0.934410,0.092191,0.616374,0.130850,0.034266,0.051564,0.019783,0.527178,0.793375,0.304367,0.426051,0.167121,0.038219,0.051564,0.010241,0.587991,0.793375,0.157552,0.648179,0.167480,0.024025,0.057362,0.006438,0.077714,0.996758,0.020823,0.614043,0.118650,0.021540,0.057362,0.012436,0.069677,0.996758,0.040228,0.413780,0.118565,0.015296,0.057553,0.004099,-0.275650,0.958416,-0.073860,0.633300,0.118295,0.012009,0.055220,0.003218,-0.764867,0.610717,-0.204946,0.640840,0.105950,0.008195,0.044143,0.002196,-0.909852,0.335759,-0.243794,0.638607,0.106440,0.007347,0.044143,0.004242,0.056641,0.997859,0.032702,0.516119,0.106149,0.008195,0.044143,0.002196,0.063175,0.997859,0.016928,0.638607,0.106440,0.008484,-0.064439,0.000000,0.130517,-0.991446,0.0,0.198872,0.755850,0.008195,-0.064439,0.002196,0.126069,-0.991446,0.033780,0.162590,0.718750,0.016822,-0.062781,0.000000,0.258801,-0.965931,0.0,0.162414,0.719230,0.016822,-0.062781,0.000000,0.258801,-0.965931,0.0,0.169733,0.719230,0.016249,-0.062781,0.004354,0.249983,-0.965931,0.066983,0.169744,0.718750,0.024873,-0.060048,0.000000,0.382659,-0.923890,0.0,0.367670,0.682259,0.024025,-0.060048,0.006438,0.369621,-0.923890,0.099040,0.145491,0.682120,0.032498,-0.056288,0.000000,0.499972,-0.866041,-0.000000,0.296813,0.657710,0.024873,-0.060048,0.000000,0.382659,-0.923890,0.0,0.145500,0.682516,0.031390,-0.056288,0.008411,0.482936,-0.866041,0.129402,0.104000,0.621090,0.032498,-0.056288,0.000000,0.499972,-0.866041,-0.000000,0.140264,0.658200,0.039567,-0.051564,0.000000,0.608733,-0.793375,-0.000000,0.103830,0.621580,0.039567,-0.051564,0.000000,0.608733,-0.793375,-0.000000,0.111128,0.621580,0.038219,-0.051564,0.010241,0.587991,-0.793375,0.157552,0.111153,0.621090,0.045959,-0.045959,0.000000,0.707081,-0.707133,-0.000000,0.110840,0.621522,0.051564,-0.039567,0.000000,0.793332,-0.608790,0.000000,0.086420,0.584910,0.044393,-0.045959,0.011895,0.682988,-0.707133,0.183006,0.086902,0.584470,0.045959,-0.045959,0.000000,0.707081,-0.707133,-0.000000,0.086910,0.584909,0.056288,-0.032498,0.000000,0.866010,-0.500027,-0.000000,0.045231,0.523920,0.049807,-0.039567,0.013346,0.766300,-0.608790,0.205329,0.045410,0.523430,0.051564,-0.039567,0.000000,0.793332,-0.608790,0.000000,0.081664,0.560540,0.060048,-0.024873,0.000000,0.923870,-0.382707,0.0,0.052240,0.523879,0.054370,-0.032498,0.014568,0.836501,-0.500027,0.224140,0.052551,0.523430,0.056288,-0.032498,0.000000,0.866010,-0.500027,-0.000000,0.052526,0.523920,0.062781,-0.016822,0.000000,0.965921,-0.258837,0.000000,0.027830,0.487262,0.058002,-0.024873,0.015542,0.892390,-0.382707,0.239115,0.028298,0.486810,0.060048,-0.024873,0.000000,0.923870,-0.382707,0.0,0.028278,0.487300,0.064439,-0.008484,0.000000,0.991444,-0.130536,-0.000000,0.992463,0.423820,0.060642,-0.016822,0.016249,0.933008,-0.258837,0.249999,0.992670,0.423340,0.062781,-0.016822,0.000000,0.965921,-0.258837,0.000000,0.023060,0.462890,0.064995,0.000000,0.000000,1.0,0.0,0.0,0.992180,0.423785,0.062781,0.000000,0.016822,0.965926,0.0,0.258819,0.770457,0.387200,0.062244,-0.008484,0.016678,0.957661,-0.130536,0.256604,0.992620,0.423340,0.062244,0.008484,0.016678,0.957661,0.130536,0.256605,0.765130,0.362596,0.064995,0.000000,0.000000,1.0,0.0,0.0,0.968216,0.387200,0.064439,0.008484,0.000000,0.991444,0.130536,-0.000000,0.967770,0.387162,0.062781,0.000000,0.016822,0.965926,0.0,0.258819,0.968208,0.386710,0.060642,0.016822,0.016249,0.933008,0.258837,0.249999,0.731231,0.326170,0.064439,0.008484,0.000000,0.991444,0.130536,-0.000000,0.963007,0.362790,0.062781,0.016822,0.000000,0.965921,0.258837,0.000000,0.933875,0.326170,0.062244,0.008484,0.016678,0.957661,0.130536,0.256605,0.934080,0.325680,0.058002,0.024873,0.015542,0.892390,0.382707,0.239115,0.711865,0.289550,0.060048,0.024873,0.000000,0.923870,0.382707,0.0,0.933590,0.326122,0.060642,0.016822,0.016249,0.933008,0.258837,0.249999,0.933590,0.325680,0.060048,0.024873,0.000000,0.923870,0.382707,0.0,0.909622,0.289550,0.056288,0.032498,0.000000,0.866010,0.500027,-0.000000,0.909180,0.289497,0.058002,0.024873,0.015542,0.892390,0.382707,0.239115,0.909188,0.289060,0.056288,0.032498,0.000000,0.866010,0.500027,-0.000000,0.904415,0.265130,0.051564,0.039567,0.000000,0.793332,0.608789,0.000000,0.875286,0.228510,0.054370,0.032498,0.014568,0.836501,0.500027,0.224140,0.706672,0.264931,0.045959,0.045959,0.000000,0.707081,0.707133,-0.000000,0.708980,0.228510,0.049807,0.039567,0.013346,0.766300,0.608790,0.205329,0.672661,0.228307,0.039567,0.051564,0.000000,0.608733,0.793375,-0.000000,0.853510,0.166995,0.044393,0.045959,0.011895,0.682988,0.707133,0.183006,0.850580,0.191400,0.045959,0.045959,0.000000,0.707081,0.707133,-0.000000,0.851070,0.191839,0.032498,0.056288,0.000000,0.356200,0.934410,-0.000000,0.811897,0.130850,0.038219,0.051564,0.010241,0.587991,0.793375,0.157552,0.648197,0.167151,0.039567,0.051564,0.000000,0.608733,0.793375,-0.000000,0.846044,0.167480,0.024873,0.057362,0.000000,0.080456,0.996758,0.000000,0.760653,0.118650,0.031390,0.056288,0.008411,0.344063,0.934410,0.092191,0.616380,0.130698,0.024025,0.057362,0.006438,0.077714,0.996758,0.020823,0.614043,0.118619,0.015836,0.057553,0.000000,-0.285374,0.958416,0.0,0.719211,0.106440,0.012432,0.055220,0.000000,-0.791849,0.610717,0.0,0.709136,0.106440,0.008484,0.044143,-0.000000,-0.941948,0.335759,0.0,0.684958,0.106440,0.008195,0.044143,0.002196,0.063175,0.997859,0.016928,0.692380,0.105950,0.008484,0.044143,-0.000000,0.065403,0.997859,0.0,0.684958,0.106440,0.008195,-0.064439,-0.002196,0.126069,-0.991446,-0.033780,0.401515,0.755850,0.016249,-0.062781,-0.004354,0.249983,-0.965931,-0.066983,0.387023,0.719230,0.008484,-0.064439,0.000000,0.130517,-0.991446,0.0,0.387200,0.718750,0.024025,-0.060048,-0.006438,0.369620,-0.923890,-0.099040,0.369620,0.694393,0.016822,-0.062781,0.000000,0.258801,-0.965931,0.0,0.367670,0.682259,0.031390,-0.056288,-0.008411,0.482936,-0.866041,-0.129402,0.345210,0.657797,0.024873,-0.060048,0.000000,0.382659,-0.923890,0.0,0.296870,0.657710,0.038219,-0.051564,-0.010241,0.587991,-0.793375,-0.157552,0.328428,0.621580,0.032498,-0.056288,0.000000,0.499972,-0.866041,-0.000000,0.328610,0.621090,0.045959,-0.045959,0.000000,0.707081,-0.707133,-0.000000,0.309080,0.584606,0.044393,-0.045959,-0.011895,0.682988,-0.707133,-0.183006,0.309059,0.584960,0.039567,-0.051564,0.000000,0.608733,-0.793375,-0.000000,0.309080,0.584606,0.049807,-0.039567,-0.013346,0.766300,-0.608790,-0.205329,0.286620,0.560165,0.045959,-0.045959,0.000000,0.707081,-0.707133,-0.000000,0.086874,0.584910,0.054370,-0.032498,-0.014568,0.836501,-0.500027,-0.224140,0.269828,0.523920,0.051564,-0.039567,0.000000,0.793332,-0.608790,0.000000,0.270020,0.523430,0.060048,-0.024873,0.000000,0.923870,-0.382707,0.0,0.223630,0.486999,0.058002,-0.024873,-0.015542,0.892390,-0.382707,-0.239115,0.252893,0.487300,0.056288,-0.032498,0.000000,0.866010,-0.500027,-0.000000,0.223630,0.486999,0.060642,-0.016822,-0.016249,0.933008,-0.258837,-0.249999,0.228020,0.462523,0.060048,-0.024873,0.000000,0.923870,-0.382707,0.0,0.028278,0.487262,0.064439,-0.008484,0.000000,0.991444,-0.130536,-0.000000,0.211366,0.425780,0.062244,-0.008484,-0.016678,0.957661,-0.130536,-0.256605,0.211216,0.426270,0.062781,-0.016822,0.000000,0.965921,-0.258837,0.000000,0.211420,0.425780,0.064995,0.000000,0.000000,1.0,0.0,0.0,0.218260,0.425780,0.062244,-0.008484,-0.016678,0.957661,-0.130536,-0.256605,0.218544,0.425780,0.062781,0.000000,-0.016822,0.965926,0.0,-0.258819,0.218260,0.425903,0.064439,-0.008484,0.000000,0.991444,-0.130536,-0.000000,0.218546,0.425780,0.062244,0.008484,-0.016678,0.957661,0.130536,-0.256605,0.193840,0.389283,0.064995,0.000000,0.000000,1.0,0.0,0.0,0.194278,0.389160,0.062781,0.000000,-0.016822,0.965926,0.0,-0.258819,0.194330,0.389282,0.060642,0.016822,-0.016249,0.933008,0.258837,-0.249999,0.160150,0.328243,0.062781,0.016822,0.000000,0.965921,0.258837,0.000000,0.970210,0.362300,0.064439,0.008484,0.000000,0.991444,0.130536,-0.000000,0.963008,0.362753,0.062244,0.008484,-0.016678,0.957661,0.130536,-0.256605,0.169430,0.364865,0.058002,0.024873,-0.015542,0.892390,0.382707,-0.239115,0.972650,0.326170,0.060048,0.024873,0.000000,0.923870,0.382707,0.0,0.972650,0.325680,0.062781,0.016822,0.000000,0.965921,0.258837,0.000000,0.933875,0.326133,0.054370,0.032498,-0.014568,0.836501,0.500027,-0.224140,0.110840,0.267206,0.060048,0.024873,0.000000,0.923870,0.382707,0.0,0.057610,0.267090,0.058002,0.024873,-0.015542,0.892390,0.382707,-0.239115,0.057610,0.267528,0.049807,0.039567,-0.013346,0.766300,0.608790,-0.205329,0.101070,0.230574,0.056288,0.032498,0.000000,0.866010,0.500027,-0.000000,0.904418,0.265088,0.044393,0.045959,-0.011895,0.682988,0.707133,-0.183006,0.906730,0.228510,0.045959,0.045959,0.000000,0.707081,0.707133,-0.000000,0.906730,0.228020,0.051564,0.039567,0.000000,0.793332,0.608789,0.000000,0.875289,0.228464,0.045959,0.045959,0.000000,0.707081,0.707133,-0.000000,0.851044,0.191839,0.044393,0.045959,-0.011895,0.682988,0.707133,-0.183006,0.077108,0.193949,0.038219,0.051564,-0.010241,0.587991,0.793375,-0.157552,0.052484,0.169920,0.039567,0.051564,0.000000,0.608733,0.793375,-0.000000,0.853364,0.166994,0.031390,0.056288,-0.008411,0.344063,0.934410,-0.092191,0.884760,0.167480,0.031390,0.056288,-0.008411,0.344063,0.934410,-0.092191,0.040520,0.133289,0.024025,0.057362,-0.006438,0.077714,0.996758,-0.020823,0.040250,0.121090,0.032498,0.056288,0.000000,0.356200,0.934410,-0.000000,0.040030,0.132810,0.024873,0.057362,0.000000,0.080456,0.996758,0.000000,0.763106,0.118388,0.015296,0.057553,-0.004099,-0.275650,0.958416,0.073860,0.025663,0.121090,0.012009,0.055220,-0.003218,-0.764867,0.610717,0.204946,0.025782,0.108880,0.008195,0.044143,-0.002196,-0.909852,0.335759,0.243794,0.025526,0.108880,0.008484,0.044143,-0.000000,0.065403,0.997859,0.0,0.933981,0.105950,0.008195,0.044143,-0.002196,0.063175,0.997859,-0.016928,0.025526,0.108880,0.007347,-0.064439,-0.004242,0.113031,-0.991446,-0.065258,0.599282,0.755850,0.008195,-0.064439,-0.002196,0.126069,-0.991446,-0.033780,0.401515,0.755728,0.014568,-0.062781,-0.008411,0.224128,-0.965931,-0.129401,0.592113,0.719230,0.021540,-0.060048,-0.012436,0.331393,-0.923890,-0.191330,0.586910,0.694555,0.016249,-0.062781,-0.004354,0.249983,-0.965931,-0.066983,0.394353,0.718764,0.028144,-0.056288,-0.016249,0.432989,-0.866041,-0.249986,0.567532,0.658200,0.024025,-0.060048,-0.006438,0.369620,-0.923890,-0.099040,0.370092,0.682183,0.034266,-0.051564,-0.019783,0.527178,-0.793375,-0.304367,0.533510,0.621580,0.031390,-0.056288,-0.008411,0.482936,-0.866041,-0.129402,0.531250,0.621090,0.034266,-0.051564,-0.019783,0.527178,-0.793375,-0.304367,0.531086,0.621580,0.039801,-0.045959,-0.022979,0.612350,-0.707133,-0.353540,0.335440,0.621580,0.038219,-0.051564,-0.010241,0.587991,-0.793375,-0.157552,0.335742,0.621090,0.049807,-0.039567,-0.013346,0.766300,-0.608790,-0.205329,0.311030,0.584579,0.039801,-0.045959,-0.022979,0.612350,-0.707133,-0.353540,0.311516,0.584960,0.044656,-0.039567,-0.025782,0.687046,-0.608790,-0.396666,0.311030,0.584960,0.044393,-0.045959,-0.011895,0.682988,-0.707133,-0.183006,0.311520,0.584579,0.044656,-0.039567,-0.025782,0.687046,-0.608790,-0.396666,0.508780,0.560328,0.048747,-0.032498,-0.028144,0.749986,-0.500027,-0.433005,0.474896,0.523920,0.049807,-0.039567,-0.013346,0.766300,-0.608790,-0.205329,0.472650,0.523430,0.058002,-0.024873,-0.015542,0.892390,-0.382707,-0.239115,0.223618,0.487300,0.048747,-0.032498,-0.028144,0.749986,-0.500027,-0.433005,0.472472,0.523920,0.052003,-0.024873,-0.030024,0.800095,-0.382707,-0.461935,0.281747,0.499510,0.054370,-0.032498,-0.014568,0.836501,-0.500027,-0.224140,0.277142,0.523430,0.052003,-0.024873,-0.030024,0.800095,-0.382707,-0.461935,0.455526,0.487300,0.054370,-0.016822,-0.031390,0.836512,-0.258837,-0.482961,0.450190,0.462687,0.058002,-0.024873,-0.015542,0.892390,-0.382707,-0.239115,0.252892,0.486931,0.055806,-0.008484,-0.032220,0.858615,-0.130536,-0.495722,0.416295,0.426270,0.060642,-0.016822,-0.016249,0.933008,-0.258837,-0.249999,0.414060,0.425780,0.055806,-0.008484,-0.032220,0.858615,-0.130536,-0.495722,0.413860,0.426270,0.056288,0.000000,-0.032498,0.866025,0.0,-0.500000,0.218260,0.426270,0.055806,0.008484,-0.032220,0.858615,0.130536,-0.495722,0.193840,0.389640,0.056288,0.000000,-0.032498,0.866025,0.0,-0.500000,0.194278,0.389640,0.054370,0.016822,-0.031390,0.836512,0.258837,-0.482961,0.357693,0.328610,0.062244,0.008484,-0.016678,0.957661,0.130536,-0.256605,0.169549,0.364865,0.055806,0.008484,-0.032220,0.858615,0.130536,-0.495722,0.391600,0.365027,0.058002,0.024873,-0.015542,0.892390,0.382707,-0.239115,0.191400,0.328120,0.060642,0.016822,-0.016249,0.933008,0.258837,-0.249999,0.159943,0.328243,0.052003,0.024873,-0.030024,0.800095,0.382707,-0.461935,0.338315,0.291990,0.054370,0.032498,-0.014568,0.836501,0.500027,-0.224140,0.057610,0.267528,0.058002,0.024873,-0.015542,0.892390,0.382707,-0.239115,0.135740,0.291622,0.048747,0.032498,-0.028144,0.749986,0.500027,-0.433005,0.137690,0.267570,0.052003,0.024873,-0.030024,0.800095,0.382707,-0.461935,0.135250,0.291990,0.054370,0.032498,-0.014568,0.836501,0.500027,-0.224140,0.110961,0.267205,0.044656,0.039567,-0.025782,0.687046,0.608790,-0.396666,0.299090,0.230950,0.048747,0.032498,-0.028144,0.749986,0.500027,-0.433005,0.333000,0.267366,0.044393,0.045959,-0.011895,0.682988,0.707133,-0.183006,0.110840,0.230460,0.049807,0.039567,-0.013346,0.766300,0.608790,-0.205329,0.101359,0.230574,0.039801,0.045959,-0.022979,0.612350,0.707133,-0.353540,0.279726,0.194330,0.044393,0.045959,-0.011895,0.682988,0.707133,-0.183006,0.077140,0.193949,0.039801,0.045959,-0.022979,0.612350,0.707133,-0.353540,0.076660,0.194330,0.034266,0.051564,-0.019783,0.527178,0.793375,-0.304367,0.079100,0.169920,0.038219,0.051564,-0.010241,0.587991,0.793375,-0.157552,0.076660,0.193986,0.034266,0.051564,-0.019783,0.527178,0.793375,-0.304367,0.274543,0.169920,0.031390,0.056288,-0.008411,0.344063,0.934410,-0.092191,0.079100,0.169430,0.038219,0.051564,-0.010241,0.587991,0.793375,-0.157552,0.052510,0.169561,0.028144,0.056288,-0.016249,0.308479,0.934410,-0.178100,0.079100,0.169920,0.028144,0.056288,-0.016249,0.308479,0.934410,-0.178100,0.243158,0.132986,0.031390,0.056288,-0.008411,0.344063,0.934410,-0.092191,0.040518,0.133289,0.021540,0.057362,-0.012436,0.069677,0.996758,-0.040228,0.225838,0.121090,0.024025,0.057362,-0.006438,0.077714,0.996758,-0.020823,0.040252,0.120631,0.013714,0.057553,-0.007918,-0.247141,0.958416,0.142687,0.181967,0.121090,0.010767,0.055220,-0.006216,-0.685761,0.610717,0.395924,0.152784,0.108880,0.007347,0.044143,-0.004242,-0.815751,0.335759,0.470974,0.152494,0.108390,0.008195,0.044143,-0.002196,0.063175,0.997859,-0.016928,0.138156,0.108390,0.007347,0.044143,-0.004242,0.056641,0.997859,-0.032702,0.152494,0.108390,0.005999,-0.064439,-0.005999,0.092289,-0.991446,-0.092289,0.823901,0.755850,0.007347,-0.064439,-0.004242,0.113031,-0.991446,-0.065258,0.787590,0.718750,0.011895,-0.062781,-0.011895,0.183000,-0.965931,-0.183000,0.794762,0.719230,0.017588,-0.060048,-0.017588,0.270581,-0.923890,-0.270581,0.789550,0.694726,0.014568,-0.062781,-0.008411,0.224128,-0.965931,-0.129401,0.790030,0.694330,0.022979,-0.056288,-0.022979,0.353534,-0.866041,-0.353534,0.765290,0.658200,0.021540,-0.060048,-0.012436,0.331393,-0.923890,-0.191330,0.572741,0.682345,0.017588,-0.060048,-0.017588,0.270581,-0.923890,-0.270581,0.789551,0.694726,0.027978,-0.051564,-0.027978,0.430439,-0.793375,-0.430439,0.736151,0.621580,0.028144,-0.056288,-0.016249,0.432989,-0.866041,-0.249986,0.729000,0.621090,0.039801,-0.045959,-0.022979,0.612350,-0.707133,-0.353540,0.514139,0.584960,0.032498,-0.045959,-0.032498,0.499982,-0.707133,-0.499982,0.730950,0.597110,0.034266,-0.051564,-0.019783,0.527178,-0.793375,-0.304367,0.731440,0.596680,0.036462,-0.039567,-0.036462,0.560970,-0.608790,-0.560970,0.706683,0.560540,0.039801,-0.045959,-0.022979,0.612350,-0.707133,-0.353540,0.514139,0.584742,0.039801,-0.032498,-0.039801,0.612361,-0.500027,-0.612361,0.677541,0.523920,0.044656,-0.039567,-0.025782,0.687046,-0.608790,-0.396666,0.670410,0.523430,0.042460,-0.024873,-0.042460,0.653274,-0.382707,-0.653275,0.650859,0.487300,0.048747,-0.032498,-0.028144,0.749986,-0.500027,-0.433005,0.650870,0.487028,0.042460,-0.024873,-0.042460,0.653274,-0.382707,-0.653275,0.653320,0.487262,0.044393,-0.016822,-0.044393,0.683009,-0.258837,-0.683009,0.652830,0.487262,0.052003,-0.024873,-0.030024,0.800095,-0.382707,-0.461935,0.653309,0.486810,0.044393,-0.016822,-0.044393,0.683009,-0.258837,-0.683009,0.648068,0.462890,0.045566,-0.008484,-0.045566,0.701057,-0.130536,-0.701057,0.618936,0.426270,0.054370,-0.016822,-0.031390,0.836512,-0.258837,-0.482961,0.619140,0.425780,0.056288,0.000000,-0.032498,0.866025,0.0,-0.500000,0.396926,0.389640,0.045959,0.000000,-0.045959,0.707107,0.0,-0.707107,0.618650,0.426233,0.055806,-0.008484,-0.032220,0.858615,-0.130536,-0.495722,0.619094,0.425780,0.056288,0.000000,-0.032498,0.866025,0.0,-0.500000,0.594669,0.389160,0.045566,0.008484,-0.045566,0.701057,0.130536,-0.701057,0.594230,0.389602,0.045959,0.000000,-0.045959,0.707107,0.0,-0.707107,0.594676,0.389640,0.055806,0.008484,-0.032220,0.858615,0.130536,-0.495722,0.560540,0.328120,0.044393,0.016822,-0.044393,0.683009,0.258837,-0.683009,0.560328,0.328610,0.045566,0.008484,-0.045566,0.701057,0.130536,-0.701057,0.589466,0.365230,0.054370,0.016822,-0.031390,0.836512,0.258837,-0.482961,0.560050,0.328120,0.042460,0.024873,-0.042460,0.653274,0.382707,-0.653275,0.560050,0.328562,0.052003,0.024873,-0.030024,0.800095,0.382707,-0.461935,0.535640,0.291500,0.039801,0.032498,-0.039801,0.612361,0.500027,-0.612361,0.535640,0.291937,0.042460,0.024873,-0.042460,0.653274,0.382707,-0.653275,0.536080,0.291990,0.048747,0.032498,-0.028144,0.749986,0.500027,-0.433005,0.333118,0.267366,0.036462,0.039567,-0.036462,0.560970,0.608790,-0.560970,0.501734,0.230950,0.039801,0.032498,-0.039801,0.612361,0.500027,-0.612361,0.530870,0.267570,0.044656,0.039567,-0.025782,0.687046,0.608790,-0.396666,0.299103,0.230737,0.032498,0.045959,-0.032498,0.499982,0.707133,-0.499982,0.328120,0.230950,0.027978,0.051564,-0.027978,0.430439,0.793375,-0.430439,0.477050,0.194265,0.039801,0.045959,-0.022979,0.612350,0.707133,-0.353540,0.477050,0.193840,0.032498,0.045959,-0.032498,0.499982,0.707133,-0.499982,0.477484,0.194330,0.027978,0.051564,-0.027978,0.430439,0.793375,-0.430439,0.472322,0.169920,0.028144,0.056288,-0.016249,0.308479,0.934410,-0.178100,0.276850,0.169430,0.034266,0.051564,-0.019783,0.527178,0.793375,-0.304367,0.274558,0.169692,0.022979,0.056288,-0.022979,0.251872,0.934410,-0.251872,0.462400,0.145036,0.022979,0.056288,-0.022979,0.251872,0.934410,-0.251872,0.242670,0.133300,0.021540,0.057362,-0.012436,0.069677,0.996758,-0.040228,0.242670,0.132873,0.028144,0.056288,-0.016249,0.308479,0.934410,-0.178100,0.243160,0.132986,0.017588,0.057362,-0.017588,0.056891,0.996758,-0.056891,0.428710,0.121022,0.011198,0.057553,-0.011198,-0.201790,0.958416,0.201790,0.409137,0.121090,0.021540,0.057362,-0.012436,0.069677,0.996758,-0.040228,0.428220,0.120600,0.017588,0.057362,-0.017588,0.056891,0.996758,-0.056891,0.433512,0.121090,0.008791,0.055220,-0.008791,-0.559922,0.610717,0.559922,0.406288,0.121090,0.005999,0.044143,-0.005999,-0.666058,0.335759,0.666058,0.377147,0.108880,0.007347,0.044143,-0.004242,0.056641,0.997859,-0.032702,0.350348,0.108390,0.005999,0.044143,-0.005999,0.046247,0.997859,-0.046247,0.377147,0.108880,0.004242,-0.064439,-0.007347,0.065258,-0.991446,-0.113031,0.028013,0.758300,0.008411,-0.062781,-0.014568,0.129401,-0.965931,-0.224128,0.013522,0.721680,0.005999,-0.064439,-0.005999,0.092289,-0.991446,-0.092289,0.013670,0.721190,0.011895,-0.062781,-0.011895,0.183000,-0.965931,-0.183000,0.790030,0.694649,0.012436,-0.060048,-0.021540,0.191330,-0.923890,-0.331393,0.994647,0.694820,0.016249,-0.056288,-0.028144,0.249986,-0.866041,-0.432989,0.970210,0.657812,0.017588,-0.060048,-0.017588,0.270581,-0.923890,-0.270581,0.931640,0.657710,0.012436,-0.060048,-0.021540,0.191330,-0.923890,-0.331393,0.994620,0.694411,0.022979,-0.056288,-0.022979,0.353534,-0.866041,-0.353534,0.953610,0.621090,0.019783,-0.051564,-0.034266,0.304367,-0.793375,-0.527178,0.953452,0.621580,0.019783,-0.051564,-0.034266,0.304367,-0.793375,-0.527178,0.960765,0.621090,0.022979,-0.045959,-0.039801,0.353540,-0.707133,-0.612350,0.936030,0.596797,0.027978,-0.051564,-0.027978,0.430439,-0.793375,-0.430439,0.960772,0.621090,0.032498,-0.045959,-0.032498,0.499982,-0.707133,-0.499982,0.870600,0.560050,0.025782,-0.039567,-0.044656,0.396666,-0.608790,-0.687045,0.911620,0.560174,0.028144,-0.032498,-0.048747,0.433005,-0.500027,-0.749986,0.894843,0.523920,0.036462,-0.039567,-0.036462,0.560970,-0.608790,-0.560970,0.895020,0.523430,0.030024,-0.024873,-0.052003,0.461935,-0.382707,-0.800095,0.875459,0.487300,0.039801,-0.032498,-0.039801,0.612361,-0.500027,-0.612361,0.875480,0.486812,0.031390,-0.016822,-0.054370,0.482961,-0.258837,-0.836512,0.853020,0.462531,0.042460,-0.024873,-0.042460,0.653274,-0.382707,-0.653275,0.653289,0.487262,0.032220,-0.008484,-0.055806,0.495722,-0.130536,-0.858615,0.836220,0.426270,0.044393,-0.016822,-0.044393,0.683009,-0.258837,-0.683009,0.836420,0.425780,0.045566,-0.008484,-0.045566,0.701057,-0.130536,-0.701057,0.836370,0.425780,0.032220,-0.008484,-0.055806,0.495722,-0.130536,-0.858615,0.843548,0.425780,0.032498,0.000000,-0.056288,0.500000,0.0,-0.866025,0.843260,0.425911,0.045566,-0.008484,-0.045566,0.701057,-0.130536,-0.701057,0.843550,0.425780,0.045959,0.000000,-0.045959,0.707107,0.0,-0.707107,0.843260,0.425780,0.032498,0.000000,-0.056288,0.500000,0.0,-0.866025,0.819330,0.389289,0.045959,0.000000,-0.045959,0.707107,0.0,-0.707107,0.819278,0.389160,0.032220,0.008484,-0.055806,0.495722,0.130536,-0.858615,0.818840,0.389289,0.032220,0.008484,-0.055806,0.495722,0.130536,-0.858615,0.794430,0.364872,0.044393,0.016822,-0.044393,0.683009,0.258837,-0.683009,0.596680,0.364740,0.045566,0.008484,-0.045566,0.701057,0.130536,-0.701057,0.589467,0.365193,0.031390,0.016822,-0.054370,0.482961,0.258837,-0.836512,0.785150,0.328251,0.042460,0.024873,-0.042460,0.653274,0.382707,-0.653275,0.591790,0.328120,0.044393,0.016822,-0.044393,0.683009,0.258837,-0.683009,0.560328,0.328572,0.030024,0.024873,-0.052003,0.461935,0.382707,-0.800095,0.591790,0.328610,0.030024,0.024873,-0.052003,0.461935,0.382707,-0.800095,0.760740,0.291629,0.042460,0.024873,-0.042460,0.653274,0.382707,-0.653275,0.760250,0.291500,0.028144,0.032498,-0.048747,0.433005,0.500027,-0.749986,0.760250,0.291634,0.028144,0.032498,-0.048747,0.433005,0.500027,-0.749986,0.735840,0.267214,0.039801,0.032498,-0.039801,0.612361,0.500027,-0.612361,0.530873,0.267529,0.025782,0.039567,-0.044656,0.396666,0.608790,-0.687046,0.726070,0.230583,0.032498,0.045959,-0.032498,0.499982,0.707133,-0.499982,0.530760,0.230460,0.036462,0.039567,-0.036462,0.560970,0.608790,-0.560970,0.501737,0.230904,0.022979,0.045959,-0.039801,0.353540,0.707133,-0.612350,0.530760,0.230950,0.019783,0.051564,-0.034266,0.304367,0.793375,-0.527178,0.701660,0.193969,0.032498,0.045959,-0.032498,0.499982,0.707133,-0.499982,0.701660,0.193840,0.022979,0.045959,-0.039801,0.353540,0.707133,-0.612350,0.702140,0.193960,0.016249,0.056288,-0.028144,0.178100,0.934410,-0.308479,0.665030,0.145095,0.027978,0.051564,-0.027978,0.430439,0.793375,-0.430439,0.472325,0.169881,0.019783,0.051564,-0.034266,0.304367,0.793375,-0.527178,0.677240,0.169541,0.022979,0.056288,-0.022979,0.251872,0.934410,-0.251872,0.462472,0.145036,0.012436,0.057362,-0.021540,0.040228,0.996758,-0.069677,0.650390,0.133156,0.017588,0.057362,-0.017588,0.056891,0.996758,-0.056891,0.628410,0.120600,0.007918,0.057553,-0.013714,-0.142687,0.958416,0.247141,0.608880,0.120733,0.006216,0.055220,-0.010767,-0.395924,0.610717,0.685761,0.611462,0.121090,0.004242,0.044143,-0.007347,-0.470974,0.335759,0.815751,0.609183,0.108880,0.005999,0.044143,-0.005999,0.046247,0.997859,-0.046247,0.577436,0.108390,0.004242,0.044143,-0.007347,0.032702,0.997859,-0.056641,0.609183,0.108880,0.002196,-0.064439,-0.008195,0.033780,-0.991446,-0.126069,0.252631,0.758300,0.004242,-0.064439,-0.007347,0.065258,-0.991446,-0.113031,0.216300,0.721190,0.004354,-0.062781,-0.016249,0.066983,-0.965931,-0.249983,0.216168,0.721680,0.008411,-0.062781,-0.014568,0.129401,-0.965931,-0.224128,0.020841,0.721233,0.006438,-0.060048,-0.024025,0.099040,-0.923890,-0.369621,0.213370,0.697034,0.012436,-0.060048,-0.021540,0.191330,-0.923890,-0.331393,0.157710,0.660150,0.008411,-0.056288,-0.031390,0.129402,-0.866041,-0.482936,0.194014,0.660640,0.010241,-0.051564,-0.038219,0.157552,-0.793375,-0.587991,0.159991,0.624020,0.016249,-0.056288,-0.028144,0.249986,-0.866041,-0.432989,0.157710,0.623530,0.019783,-0.051564,-0.034266,0.304367,-0.793375,-0.527178,0.960764,0.621202,0.011895,-0.045959,-0.044393,0.183006,-0.707133,-0.682988,0.154780,0.599406,0.013346,-0.039567,-0.049807,0.205329,-0.608790,-0.766300,0.135250,0.562790,0.022979,-0.045959,-0.039801,0.353540,-0.707133,-0.612350,0.096680,0.562500,0.014568,-0.032498,-0.054370,0.224140,-0.500027,-0.836501,0.101379,0.526360,0.025782,-0.039567,-0.044656,0.396666,-0.608790,-0.687045,0.099120,0.525870,0.015542,-0.024873,-0.058002,0.239115,-0.382707,-0.892390,0.082005,0.489740,0.028144,-0.032498,-0.048747,0.433005,-0.500027,-0.749986,0.074700,0.489468,0.015542,-0.024873,-0.058002,0.239115,-0.382707,-0.892390,0.074689,0.489740,0.016249,-0.016822,-0.060642,0.249999,-0.258837,-0.933008,0.877440,0.487300,0.030024,-0.024873,-0.052003,0.461935,-0.382707,-0.800095,0.877930,0.486939,0.031390,-0.016822,-0.054370,0.482961,-0.258837,-0.836512,0.877440,0.486939,0.031390,-0.016822,-0.054370,0.482961,-0.258837,-0.836512,0.040520,0.428220,0.016249,-0.016822,-0.060642,0.249999,-0.258837,-0.933008,0.076660,0.465142,0.016678,-0.008484,-0.062244,0.256604,-0.130536,-0.957661,0.042762,0.428710,0.016678,-0.008484,-0.062244,0.256604,-0.130536,-0.957661,0.040323,0.428710,0.016822,0.000000,-0.062781,0.258819,0.0,-0.965926,0.843260,0.426270,0.016822,0.000000,-0.062781,0.258819,0.0,-0.965926,0.819278,0.389640,0.016678,0.008484,-0.062244,0.256604,0.130536,-0.957661,0.818840,0.389640,0.016678,0.008484,-0.062244,0.256604,0.130536,-0.957661,0.018060,0.367482,0.032220,0.008484,-0.055806,0.495722,0.130536,-0.858615,0.794545,0.364872,0.016249,0.016822,-0.060642,0.249999,0.258837,-0.933008,0.982687,0.328610,0.030024,0.024873,-0.052003,0.461935,0.382707,-0.800095,0.794430,0.328120,0.031390,0.016822,-0.054370,0.482961,0.258837,-0.836512,0.784935,0.328251,0.015542,0.024873,-0.058002,0.239115,0.382707,-0.892390,0.963306,0.291990,0.015542,0.024873,-0.058002,0.239115,0.382707,-0.892390,0.760250,0.291990,0.014568,0.032498,-0.054370,0.224140,0.500027,-0.836501,0.762690,0.267570,0.014568,0.032498,-0.054370,0.224140,0.500027,-0.836501,0.958000,0.267383,0.028144,0.032498,-0.048747,0.433005,0.500027,-0.749986,0.735946,0.267214,0.013346,0.039567,-0.049807,0.205329,0.608790,-0.766300,0.924075,0.230950,0.022979,0.045959,-0.039801,0.353540,0.707133,-0.612350,0.728510,0.230460,0.025782,0.039567,-0.044656,0.396666,0.608790,-0.687046,0.726342,0.230583,0.011895,0.045959,-0.044393,0.183006,0.707133,-0.682988,0.904708,0.194330,0.010241,0.051564,-0.038219,0.157552,0.793375,-0.587991,0.704100,0.169920,0.011895,0.045959,-0.044393,0.183006,0.707133,-0.682988,0.701660,0.194330,0.010241,0.051564,-0.038219,0.157552,0.793375,-0.587991,0.899410,0.169720,0.008411,0.056288,-0.031390,0.092191,0.934410,-0.344063,0.882423,0.145500,0.019783,0.051564,-0.034266,0.304367,0.793375,-0.527178,0.677354,0.169540,0.006438,0.057362,-0.024025,0.020823,0.996758,-0.077714,0.875000,0.132957,0.016249,0.056288,-0.028144,0.178100,0.934410,-0.308479,0.665164,0.145095,0.004099,0.057553,-0.015296,-0.073860,0.958416,0.275650,0.843382,0.121090,0.012436,0.057362,-0.021540,0.040228,0.996758,-0.069677,0.650429,0.133156,0.003218,0.055220,-0.012009,-0.204946,0.610717,0.764867,0.845912,0.121090,0.002196,0.044143,-0.008195,-0.243794,0.335759,0.909852,0.846038,0.108880,0.004242,0.044143,-0.007347,0.032702,0.997859,-0.056641,0.797360,0.108390,0.002196,0.044143,-0.008195,0.016928,0.997859,-0.063175,0.846038,0.108880,0.000000,-0.064439,-0.008484,0.0,-0.991446,-0.130517,0.450386,0.758300,0.002196,-0.064439,-0.008195,0.033780,-0.991446,-0.126069,0.414060,0.721190,0.000000,-0.062781,-0.016822,0.0,-0.965931,-0.258801,0.421243,0.721680,0.000000,-0.060048,-0.024873,0.0,-0.923890,-0.382659,0.416031,0.697260,0.004354,-0.062781,-0.016249,0.066983,-0.965931,-0.249983,0.218608,0.721427,0.000000,-0.056288,-0.032498,0.0,-0.866041,-0.499972,0.391778,0.660640,0.006438,-0.060048,-0.024025,0.099040,-0.923890,-0.369621,0.360350,0.660150,0.000000,-0.051564,-0.039567,0.0,-0.793375,-0.608733,0.362635,0.624020,0.008411,-0.056288,-0.031390,0.129402,-0.866041,-0.482936,0.355460,0.623530,0.010241,-0.051564,-0.038219,0.157552,-0.793375,-0.587991,0.159990,0.623818,0.000000,-0.045959,-0.045959,-0.000000,-0.707133,-0.707081,0.357420,0.599579,0.011895,-0.045959,-0.044393,0.183006,-0.707133,-0.682988,0.301750,0.562500,0.000000,-0.039567,-0.051564,0.000000,-0.608790,-0.793332,0.333156,0.562980,0.013346,-0.039567,-0.049807,0.205329,-0.608790,-0.766300,0.296870,0.525870,0.000000,-0.032498,-0.056288,-0.000000,-0.500027,-0.866010,0.296718,0.526360,0.014568,-0.032498,-0.054370,0.224140,-0.500027,-0.836501,0.304041,0.525870,0.000000,-0.032498,-0.056288,-0.000000,-0.500027,-0.866010,0.304016,0.526360,0.000000,-0.024873,-0.060048,0.0,-0.382707,-0.923870,0.303710,0.526342,0.015542,-0.024873,-0.058002,0.239115,-0.382707,-0.892390,0.279778,0.489250,0.000000,-0.024873,-0.060048,0.0,-0.382707,-0.923870,0.279757,0.489740,0.000000,-0.016822,-0.062781,0.000000,-0.258837,-0.965921,0.279290,0.489724,0.016249,-0.016822,-0.060642,0.249999,-0.258837,-0.933008,0.245600,0.428220,0.000000,-0.016822,-0.062781,0.000000,-0.258837,-0.965921,0.274543,0.465330,0.000000,-0.008484,-0.064439,-0.000000,-0.130536,-0.991444,0.245399,0.428710,0.016678,-0.008484,-0.062244,0.256604,-0.130536,-0.957661,0.245556,0.428220,0.000000,0.000000,-0.064995,0.0,0.0,-1.0,0.245110,0.428694,0.016822,0.000000,-0.062781,0.258819,0.0,-0.965926,0.023386,0.392090,0.000000,0.000000,-0.064995,0.0,0.0,-1.0,0.221146,0.392090,0.016822,0.000000,-0.062781,0.258819,0.0,-0.965926,0.221138,0.391600,0.000000,0.008484,-0.064439,-0.000000,0.130536,-0.991444,0.220700,0.392072,0.000000,0.008484,-0.064439,-0.000000,0.130536,-0.991444,0.215931,0.367670,0.016678,0.008484,-0.062244,0.256604,0.130536,-0.957661,0.187010,0.330560,0.000000,0.016822,-0.062781,0.000000,0.258837,-0.965921,0.186792,0.331050,0.016249,0.016822,-0.060642,0.249999,0.258837,-0.933008,0.186520,0.330560,0.000000,0.024873,-0.060048,0.0,0.382707,-0.923870,0.186520,0.331024,0.000000,0.024873,-0.060048,0.0,0.382707,-0.923870,0.162531,0.294430,0.015542,0.024873,-0.058002,0.239115,0.382707,-0.892390,0.162100,0.293940,0.000000,0.032498,-0.056288,-0.000000,0.500027,-0.866010,0.162100,0.294399,0.000000,0.032498,-0.056288,-0.000000,0.500027,-0.866010,0.157321,0.270020,0.014568,0.032498,-0.054370,0.224140,0.500027,-0.836501,0.958105,0.267382,0.000000,0.039567,-0.051564,0.000000,0.608789,-0.793332,0.128187,0.233390,0.013346,0.039567,-0.049807,0.205329,0.608790,-0.766300,0.924087,0.230755,0.000000,0.045959,-0.045959,-0.000000,0.707133,-0.707081,0.931150,0.230950,0.011895,0.045959,-0.044393,0.183006,0.707133,-0.682988,0.103510,0.196280,0.000000,0.051564,-0.039567,0.0,0.793375,-0.608733,0.103510,0.196716,0.000000,0.045959,-0.045959,-0.000000,0.707133,-0.707081,0.103938,0.196770,0.000000,0.051564,-0.039567,0.0,0.793375,-0.608733,0.098732,0.172360,0.000000,0.056288,-0.032498,-0.000000,0.934410,-0.356200,0.086492,0.147940,0.010241,0.051564,-0.038219,0.157552,0.793375,-0.587991,0.899518,0.169716,0.000000,0.057362,-0.024873,0.000000,0.996758,-0.080456,0.079181,0.135740,0.008411,0.056288,-0.031390,0.092191,0.934410,-0.344063,0.882427,0.145431,0.006438,0.057362,-0.024025,0.020823,0.996758,-0.077714,0.875088,0.132956,0.000000,0.057553,-0.015836,0.0,0.958416,0.285374,0.069435,0.111320,0.000000,0.055220,-0.012432,0.0,0.610717,0.791849,0.067076,0.111320,0.0,0.044143,-0.008484,0.0,0.335759,0.941948,0.052542,0.111320,0.002196,0.044143,-0.008195,0.016928,0.997859,-0.063175,0.047675,0.110840,0.0,0.044143,-0.008484,0.0,0.997859,-0.065403,0.052542,0.111320,-0.002196,-0.064439,-0.008195,-0.033780,-0.991446,-0.126069,0.648139,0.746090,0.000000,-0.064439,-0.008484,0.0,-0.991446,-0.130517,0.631340,0.708980,-0.004354,-0.062781,-0.016249,-0.066983,-0.965931,-0.249983,0.631210,0.709470,0.000000,-0.062781,-0.016822,0.0,-0.965931,-0.258801,0.614250,0.684570,-0.006438,-0.060048,-0.024025,-0.099040,-0.923890,-0.369620,0.613770,0.684715,-0.006438,-0.060048,-0.024025,-0.099040,-0.923890,-0.369620,0.577630,0.648430,-0.008411,-0.056288,-0.031390,-0.129402,-0.866041,-0.482936,0.589531,0.648430,0.000000,-0.060048,-0.024873,0.0,-0.923890,-0.382659,0.577630,0.647940,0.000000,-0.056288,-0.032498,0.0,-0.866041,-0.499972,0.572750,0.611320,-0.010241,-0.051564,-0.038219,-0.157552,-0.793375,-0.587991,0.572606,0.611810,0.000000,-0.051564,-0.039567,0.0,-0.793375,-0.608733,0.555660,0.586910,-0.011895,-0.045959,-0.044393,-0.183006,-0.707133,-0.682988,0.555170,0.587065,-0.011895,-0.045959,-0.044393,-0.183006,-0.707133,-0.682988,0.492180,0.550780,0.000000,-0.045959,-0.045959,-0.000000,-0.707133,-0.707081,0.492180,0.550290,-0.013346,-0.039567,-0.049807,-0.205329,-0.608790,-0.766300,0.530760,0.550447,0.000000,-0.039567,-0.051564,0.000000,-0.608790,-0.793332,0.514160,0.513670,-0.014568,-0.032498,-0.054370,-0.224140,-0.500027,-0.836501,0.513992,0.514160,0.000000,-0.024873,-0.060048,0.0,-0.382707,-0.923870,0.494620,0.477200,0.000000,-0.032498,-0.056288,-0.000000,-0.500027,-0.866010,0.494620,0.477200,-0.015542,-0.024873,-0.058002,-0.239115,-0.382707,-0.892390,0.494606,0.477530,0.000000,-0.024873,-0.060048,0.0,-0.382707,-0.923870,0.279757,0.489724,-0.016249,-0.016822,-0.060642,-0.249999,-0.258837,-0.933008,0.472160,0.452788,0.000000,-0.008484,-0.064439,-0.000000,-0.130536,-0.991444,0.455512,0.416010,0.000000,-0.016822,-0.062781,0.000000,-0.258837,-0.965921,0.455560,0.416010,-0.016678,-0.008484,-0.062244,-0.256604,-0.130536,-0.957661,0.455362,0.416500,-0.016678,-0.008484,-0.062244,-0.256604,-0.130536,-0.957661,0.462690,0.416010,0.000000,0.000000,-0.064995,0.0,0.0,-1.0,0.462400,0.416010,0.000000,-0.008484,-0.064439,-0.000000,-0.130536,-0.991444,0.462692,0.416010,-0.016822,0.000000,-0.062781,-0.258819,0.0,-0.965926,0.462400,0.416167,0.000000,0.000000,-0.064995,0.0,0.0,-1.0,0.438418,0.379390,-0.016822,0.000000,-0.062781,-0.258819,0.0,-0.965926,0.438470,0.379548,-0.016678,0.008484,-0.062244,-0.256604,0.130536,-0.957661,0.437980,0.379549,0.000000,0.008484,-0.064439,-0.000000,0.130536,-0.991444,0.215931,0.367654,-0.016678,0.008484,-0.062244,-0.256604,0.130536,-0.957661,0.413570,0.355135,-0.016249,0.016822,-0.060642,-0.249999,0.258837,-0.933008,0.404290,0.318507,0.000000,0.016822,-0.062781,0.000000,0.258837,-0.965921,0.215820,0.354980,-0.015542,0.024873,-0.058002,-0.239115,0.382707,-0.892390,0.210930,0.318840,0.000000,0.016822,-0.062781,0.000000,0.258837,-0.965921,0.186792,0.331034,0.000000,0.024873,-0.060048,0.0,0.382707,-0.923870,0.210930,0.318350,0.000000,0.024873,-0.060048,0.0,0.382707,-0.923870,0.311520,0.257320,-0.015542,0.024873,-0.058002,-0.239115,0.382707,-0.892390,0.311520,0.257675,-0.014568,0.032498,-0.054370,-0.224140,0.500027,-0.836501,0.354980,0.257477,0.000000,0.032498,-0.056288,-0.000000,0.500027,-0.866010,0.157322,0.270002,-0.013346,0.039567,-0.049807,-0.205329,0.608790,-0.766300,0.345210,0.220856,-0.011895,0.045959,-0.044393,-0.183006,0.707133,-0.682988,0.149900,0.221190,0.000000,0.039567,-0.051564,0.000000,0.608789,-0.793332,0.128189,0.233371,0.000000,0.045959,-0.045959,-0.000000,0.707133,-0.707081,0.149900,0.220700,-0.010241,0.051564,-0.038219,-0.157552,0.793375,-0.587991,0.320800,0.184246,0.000000,0.045959,-0.045959,-0.000000,0.707133,-0.707081,0.320800,0.184080,-0.011895,0.045959,-0.044393,-0.183006,0.707133,-0.682988,0.321280,0.184236,-0.010241,0.051564,-0.038219,-0.157552,0.793375,-0.587991,0.296380,0.159815,-0.008411,0.056288,-0.031390,-0.092191,0.934410,-0.344063,0.284180,0.135443,0.000000,0.051564,-0.039567,0.0,0.793375,-0.608733,0.098734,0.172335,-0.006438,0.057362,-0.024025,-0.020823,0.996758,-0.077714,0.284592,0.111320,0.000000,0.056288,-0.032498,-0.000000,0.934410,-0.356200,0.086499,0.147832,-0.004099,0.057553,-0.015296,0.073860,0.958416,0.275650,0.296380,0.111243,0.000000,0.057362,-0.024873,0.000000,0.996758,-0.080456,0.079182,0.135727,-0.003218,0.055220,-0.012009,0.204946,0.610717,0.764867,0.298935,0.111320,-0.002196,0.044143,-0.008195,0.243794,0.335759,0.909852,0.306406,0.099120,0.0,0.044143,-0.008484,0.0,0.997859,-0.065403,0.281858,0.098630,-0.002196,0.044143,-0.008195,-0.016928,0.997859,-0.063175,0.306406,0.099120,-0.004242,-0.064439,-0.007347,-0.065258,-0.991446,-0.113031,0.870308,0.746090,-0.002196,-0.064439,-0.008195,-0.033780,-0.991446,-0.126069,0.833980,0.708980,-0.008411,-0.062781,-0.014568,-0.129401,-0.965931,-0.224128,0.836285,0.709470,-0.008411,-0.062781,-0.014568,-0.129401,-0.965931,-0.224128,0.833856,0.709470,-0.004354,-0.062781,-0.016249,-0.066983,-0.965931,-0.249983,0.614250,0.684740,-0.012436,-0.060048,-0.021540,-0.191330,-0.923890,-0.331393,0.614237,0.685050,-0.006438,-0.060048,-0.024025,-0.099040,-0.923890,-0.369620,0.775390,0.647940,-0.012436,-0.060048,-0.021540,-0.191330,-0.923890,-0.331393,0.775390,0.648430,-0.016249,-0.056288,-0.028144,-0.249986,-0.866041,-0.432989,0.811701,0.648430,-0.008411,-0.056288,-0.031390,-0.129402,-0.866041,-0.482936,0.775390,0.611320,-0.019783,-0.051564,-0.034266,-0.304367,-0.793375,-0.527178,0.777677,0.611810,-0.019783,-0.051564,-0.034266,-0.304367,-0.793375,-0.527178,0.775257,0.611810,-0.010241,-0.051564,-0.038219,-0.157552,-0.793375,-0.587991,0.555660,0.587076,-0.022979,-0.045959,-0.039801,-0.353540,-0.707133,-0.612350,0.555660,0.587400,-0.022979,-0.045959,-0.039801,-0.353540,-0.707133,-0.612350,0.714350,0.550780,-0.011895,-0.045959,-0.044393,-0.183006,-0.707133,-0.682988,0.714350,0.550290,-0.025782,-0.039567,-0.044656,-0.396666,-0.608790,-0.687045,0.753084,0.550780,-0.013346,-0.039567,-0.049807,-0.205329,-0.608790,-0.766300,0.716790,0.513670,-0.028144,-0.032498,-0.048747,-0.433005,-0.500027,-0.749986,0.719057,0.514160,-0.028144,-0.032498,-0.048747,-0.433005,-0.500027,-0.749986,0.716632,0.514160,-0.014568,-0.032498,-0.054370,-0.224140,-0.500027,-0.836501,0.521303,0.513670,-0.030024,-0.024873,-0.052003,-0.461935,-0.382707,-0.800095,0.518564,0.489740,-0.030024,-0.024873,-0.052003,-0.461935,-0.382707,-0.800095,0.699679,0.477530,-0.015542,-0.024873,-0.058002,-0.239115,-0.382707,-0.892390,0.497048,0.477203,-0.031390,-0.016822,-0.054370,-0.482960,-0.258837,-0.836512,0.694330,0.452961,-0.016249,-0.016822,-0.060642,-0.249999,-0.258837,-0.933008,0.658200,0.416010,-0.032220,-0.008484,-0.055806,-0.495722,-0.130536,-0.858615,0.658005,0.416500,-0.032498,0.000000,-0.056288,-0.500000,0.0,-0.866025,0.462400,0.416500,-0.032498,0.000000,-0.056288,-0.500000,0.0,-0.866025,0.438418,0.379880,-0.032220,0.008484,-0.055806,-0.495722,0.130536,-0.858615,0.437980,0.379880,-0.016678,0.008484,-0.062244,-0.256604,0.130536,-0.957661,0.413683,0.355134,-0.032220,0.008484,-0.055806,-0.495722,0.130536,-0.858615,0.635740,0.355304,-0.031390,0.016822,-0.054370,-0.482961,0.258837,-0.836512,0.601827,0.318840,-0.030024,0.024873,-0.052003,-0.461935,0.382707,-0.800095,0.413570,0.318840,-0.016249,0.016822,-0.060642,-0.249999,0.258837,-0.933008,0.404072,0.318507,-0.015542,0.024873,-0.058002,-0.239115,0.382707,-0.892390,0.413570,0.318350,-0.030024,0.024873,-0.052003,-0.461935,0.382707,-0.800095,0.379390,0.282220,-0.028144,0.032498,-0.048747,-0.433005,0.500027,-0.749986,0.394040,0.257757,-0.015542,0.024873,-0.058002,-0.239115,0.382707,-0.892390,0.379880,0.281887,-0.014568,0.032498,-0.054370,-0.224140,0.500027,-0.836501,0.311520,0.257675,-0.028144,0.032498,-0.048747,-0.433005,0.500027,-0.749986,0.577140,0.257652,-0.025782,0.039567,-0.044656,-0.396666,0.608790,-0.687045,0.543212,0.221190,-0.014568,0.032498,-0.054370,-0.224140,0.500027,-0.836501,0.355079,0.257476,-0.022979,0.045959,-0.039801,-0.353540,0.707133,-0.612350,0.347650,0.221190,-0.013346,0.039567,-0.049807,-0.205329,0.608790,-0.766300,0.345473,0.220855,-0.011895,0.045959,-0.044393,-0.183006,0.707133,-0.682988,0.347650,0.220700,-0.019783,0.051564,-0.034266,-0.304367,0.793375,-0.527178,0.323240,0.160150,-0.022979,0.045959,-0.039801,-0.353540,0.707133,-0.612350,0.320800,0.184570,-0.019783,0.051564,-0.034266,-0.304367,0.793375,-0.527178,0.518644,0.160150,-0.016249,0.056288,-0.028144,-0.178100,0.934410,-0.308479,0.501460,0.135641,-0.010241,0.051564,-0.038219,-0.157552,0.793375,-0.587991,0.296498,0.159813,-0.016249,0.056288,-0.028144,-0.178100,0.934410,-0.308479,0.487300,0.123431,-0.012436,0.057362,-0.021540,-0.040228,0.996758,-0.069677,0.482267,0.111320,-0.008411,0.056288,-0.031390,-0.092191,0.934410,-0.344063,0.486810,0.123040,-0.007918,0.057553,-0.013714,0.142687,0.958416,0.247141,0.526265,0.111320,-0.006438,0.057362,-0.024025,-0.020823,0.996758,-0.077714,0.506830,0.110840,-0.006216,0.055220,-0.010767,0.395924,0.610717,0.685761,0.533252,0.111320,-0.004242,0.044143,-0.007347,0.470974,0.335759,0.815751,0.552934,0.099120,-0.002196,0.044143,-0.008195,-0.016928,0.997859,-0.063175,0.460440,0.074210,-0.004242,0.044143,-0.007347,-0.032702,0.997859,-0.056641,0.552934,0.099120,-0.005999,-0.064439,-0.005999,-0.092289,-0.991446,-0.092289,0.076853,0.748530,-0.004242,-0.064439,-0.007347,-0.065258,-0.991446,-0.113031,0.040520,0.711420,-0.011895,-0.062781,-0.011895,-0.183000,-0.965931,-0.183000,0.040385,0.711910,-0.012436,-0.060048,-0.021540,-0.191330,-0.923890,-0.331393,0.831050,0.684903,-0.017588,-0.060048,-0.017588,-0.270581,-0.923890,-0.270581,0.037631,0.687500,-0.008411,-0.062781,-0.014568,-0.129401,-0.965931,-0.224128,0.831540,0.684903,-0.012436,-0.060048,-0.021540,-0.191330,-0.923890,-0.331393,0.978020,0.647940,-0.022979,-0.056288,-0.022979,-0.353534,-0.866041,-0.353534,0.018060,0.650420,-0.017588,-0.060048,-0.017588,-0.270581,-0.923890,-0.270581,0.037590,0.687048,-0.027978,-0.051564,-0.027978,-0.430439,-0.793375,-0.430439,0.980310,0.611810,-0.016249,-0.056288,-0.028144,-0.249986,-0.866041,-0.432989,0.980460,0.611320,-0.022979,-0.045959,-0.039801,-0.353540,-0.707133,-0.612350,0.772460,0.587243,-0.032498,-0.045959,-0.032498,-0.499982,-0.707133,-0.499982,0.977560,0.587400,-0.019783,-0.051564,-0.034266,-0.304367,-0.793375,-0.527178,0.772940,0.587243,-0.036462,-0.039567,-0.036462,-0.560970,-0.608790,-0.560970,0.958000,0.550309,-0.022979,-0.045959,-0.039801,-0.353540,-0.707133,-0.612350,0.919430,0.550290,-0.032498,-0.045959,-0.032498,-0.499982,-0.707133,-0.499982,0.977530,0.586930,-0.025782,-0.039567,-0.044656,-0.396666,-0.608790,-0.687045,0.921870,0.513670,-0.039801,-0.032498,-0.039801,-0.612361,-0.500027,-0.612361,0.921693,0.514160,-0.028144,-0.032498,-0.048747,-0.433005,-0.500027,-0.749986,0.897460,0.477053,-0.042460,-0.024873,-0.042460,-0.653275,-0.382707,-0.653275,0.897438,0.477530,-0.030024,-0.024873,-0.052003,-0.461935,-0.382707,-0.800095,0.699678,0.477375,-0.044393,-0.016822,-0.044393,-0.683009,-0.258837,-0.683009,0.899410,0.452645,-0.031390,-0.016822,-0.054370,-0.482960,-0.258837,-0.836512,0.863280,0.416010,-0.045566,-0.008484,-0.045566,-0.701057,-0.130536,-0.701057,0.863079,0.416500,-0.032498,0.000000,-0.056288,-0.500000,0.0,-0.866025,0.660150,0.416342,-0.032220,-0.008484,-0.055806,-0.495722,-0.130536,-0.858615,0.660440,0.416500,-0.045959,0.000000,-0.045959,-0.707107,0.0,-0.707107,0.660150,0.416500,-0.045959,0.000000,-0.045959,-0.707107,0.0,-0.707107,0.641058,0.379880,-0.045566,0.008484,-0.045566,-0.701057,0.130536,-0.701057,0.638180,0.355460,-0.032498,0.000000,-0.056288,-0.500000,0.0,-0.866025,0.641110,0.379721,-0.032220,0.008484,-0.055806,-0.495722,0.130536,-0.858615,0.640620,0.379721,-0.045566,0.008484,-0.045566,-0.701057,0.130536,-0.701057,0.840820,0.354994,-0.044393,0.016822,-0.044393,-0.683009,0.258837,-0.683009,0.630850,0.318840,-0.032220,0.008484,-0.055806,-0.495722,0.130536,-0.858615,0.635853,0.355304,-0.042460,0.024873,-0.042460,-0.653274,0.382707,-0.653275,0.630850,0.318840,-0.031390,0.016822,-0.054370,-0.482961,0.258837,-0.836512,0.601832,0.318681,-0.030024,0.024873,-0.052003,-0.461935,0.382707,-0.800095,0.630850,0.318350,-0.042460,0.024873,-0.042460,-0.653274,0.382707,-0.653275,0.582030,0.282220,-0.039801,0.032498,-0.039801,-0.612361,0.500027,-0.612361,0.579590,0.257810,-0.030024,0.024873,-0.052003,-0.461935,0.382707,-0.800095,0.582520,0.282061,-0.028144,0.032498,-0.048747,-0.433005,0.500027,-0.749986,0.582030,0.282061,-0.039801,0.032498,-0.039801,-0.612361,0.500027,-0.612361,0.782220,0.257337,-0.036462,0.039567,-0.036462,-0.560970,0.608790,-0.560970,0.767570,0.220718,-0.028144,0.032498,-0.048747,-0.433005,0.500027,-0.749986,0.577241,0.257652,-0.022979,0.045959,-0.039801,-0.353540,0.707133,-0.612350,0.550290,0.220700,-0.025782,0.039567,-0.044656,-0.396666,0.608790,-0.687045,0.543222,0.221032,-0.032498,0.045959,-0.032498,-0.499982,0.707133,-0.499982,0.550290,0.221190,-0.022979,0.045959,-0.039801,-0.353540,0.707133,-0.612350,0.523920,0.184413,-0.032498,0.045959,-0.032498,-0.499982,0.707133,-0.499982,0.523430,0.184570,-0.027978,0.051564,-0.027978,-0.430439,0.793375,-0.430439,0.520990,0.160150,-0.019783,0.051564,-0.034266,-0.304367,0.793375,-0.527178,0.523430,0.184413,-0.019783,0.051564,-0.034266,-0.304367,0.793375,-0.527178,0.518654,0.159994,-0.027978,0.051564,-0.027978,-0.430439,0.793375,-0.430439,0.723630,0.159675,-0.022979,0.056288,-0.022979,-0.251872,0.934410,-0.251872,0.711668,0.123530,-0.017588,0.057362,-0.017588,-0.056891,0.996758,-0.056891,0.713860,0.111267,-0.016249,0.056288,-0.028144,-0.178100,0.934410,-0.308479,0.714350,0.110840,-0.017588,0.057362,-0.017588,-0.056891,0.996758,-0.056891,0.719214,0.111320,-0.011198,0.057553,-0.011198,0.201790,0.958416,0.201790,0.738564,0.111320,-0.012436,0.057362,-0.021540,-0.040228,0.996758,-0.069677,0.482292,0.111062,-0.008791,0.055220,-0.008791,0.559922,0.610717,0.559922,0.748530,0.098850,-0.005999,0.044143,-0.005999,0.666058,0.335759,0.666058,0.748247,0.099120,-0.004242,0.044143,-0.007347,-0.032702,0.997859,-0.056641,0.579791,0.098718,-0.005999,0.044143,-0.005999,-0.046247,0.997859,-0.046247,0.748247,0.099120,-0.007347,-0.064439,-0.004242,-0.113031,-0.991446,-0.065258,0.274601,0.748530,-0.014568,-0.062781,-0.008411,-0.224128,-0.965931,-0.129401,0.264989,0.711910,-0.005999,-0.064439,-0.005999,-0.092289,-0.991446,-0.092289,0.257810,0.711420,-0.021540,-0.060048,-0.012436,-0.331393,-0.923890,-0.191330,0.240230,0.687235,-0.011895,-0.062781,-0.011895,-0.183000,-0.965931,-0.183000,0.062363,0.711476,-0.028144,-0.056288,-0.016249,-0.432989,-0.866041,-0.249986,0.215991,0.650870,-0.017588,-0.060048,-0.017588,-0.270581,-0.923890,-0.270581,0.037611,0.687049,-0.034266,-0.051564,-0.019783,-0.527178,-0.793375,-0.304367,0.199067,0.614250,-0.022979,-0.056288,-0.022979,-0.353534,-0.866041,-0.353534,0.199210,0.613770,-0.039801,-0.045959,-0.022979,-0.612350,-0.707133,-0.353540,0.181640,0.589547,-0.027978,-0.051564,-0.027978,-0.430439,-0.793375,-0.430439,0.003745,0.613794,-0.044656,-0.039567,-0.025782,-0.687046,-0.608790,-0.396666,0.157220,0.552923,-0.032498,-0.045959,-0.032498,-0.499982,-0.707133,-0.499982,0.977531,0.586930,-0.048747,-0.032498,-0.028144,-0.749986,-0.500027,-0.433005,0.140450,0.516600,-0.036462,-0.039567,-0.036462,-0.560970,-0.608790,-0.560970,0.140620,0.516110,-0.052003,-0.024873,-0.030024,-0.800095,-0.382707,-0.461935,0.121075,0.479980,-0.039801,-0.032498,-0.039801,-0.612361,-0.500027,-0.612361,0.121090,0.479621,-0.054370,-0.016822,-0.031390,-0.836512,-0.258837,-0.482961,0.098630,0.455258,-0.042460,-0.024873,-0.042460,-0.653275,-0.382707,-0.653275,0.924288,0.477066,-0.055806,-0.008484,-0.032220,-0.858615,-0.130536,-0.495722,0.284607,0.418450,-0.044393,-0.016822,-0.044393,-0.683009,-0.258837,-0.683009,0.885250,0.416031,-0.054370,-0.016822,-0.031390,-0.836512,-0.258837,-0.482961,0.885250,0.416500,-0.045566,-0.008484,-0.045566,-0.701057,-0.130536,-0.701057,0.885049,0.416010,-0.056288,0.000000,-0.032498,-0.866025,0.0,-0.500000,0.884760,0.416500,-0.045959,0.000000,-0.045959,-0.707107,0.0,-0.707107,0.884760,0.416025,-0.056288,0.000000,-0.032498,-0.866025,0.0,-0.500000,0.865668,0.379880,-0.045566,0.008484,-0.045566,-0.701057,0.130536,-0.701057,0.865230,0.379407,-0.045959,0.000000,-0.045959,-0.707107,0.0,-0.707107,0.865676,0.379390,-0.055806,0.008484,-0.032220,-0.858615,0.130536,-0.495722,0.865230,0.379880,-0.055806,0.008484,-0.032220,-0.858615,0.130536,-0.495722,0.826660,0.318840,-0.044393,0.016822,-0.044393,-0.683009,0.258837,-0.683009,0.826442,0.318350,-0.045566,0.008484,-0.045566,-0.701057,0.130536,-0.701057,0.826660,0.318365,-0.054370,0.016822,-0.031390,-0.836512,0.258837,-0.482961,0.826170,0.318840,-0.042460,0.024873,-0.042460,-0.653274,0.382707,-0.653275,0.826170,0.318375,-0.052003,0.024873,-0.030024,-0.800095,0.382707,-0.461935,0.826170,0.318840,-0.052003,0.024873,-0.030024,-0.800095,0.382707,-0.461935,0.806640,0.282220,-0.039801,0.032498,-0.039801,-0.612361,0.500027,-0.612361,0.806640,0.281760,-0.042460,0.024873,-0.042460,-0.653274,0.382707,-0.653275,0.807063,0.281730,-0.048747,0.032498,-0.028144,-0.749986,0.500027,-0.433005,0.784660,0.257810,-0.048747,0.032498,-0.028144,-0.749986,0.500027,-0.433005,0.979980,0.257510,-0.039801,0.032498,-0.039801,-0.612361,0.500027,-0.612361,0.782322,0.257337,-0.044656,0.039567,-0.025782,-0.687046,0.608790,-0.396666,0.970459,0.221190,-0.032498,0.045959,-0.032498,-0.499982,0.707133,-0.499982,0.774900,0.220700,-0.036462,0.039567,-0.036462,-0.560970,0.608790,-0.560970,0.767834,0.220718,-0.039801,0.045959,-0.022979,-0.612350,0.707133,-0.353540,0.946204,0.184570,-0.032498,0.045959,-0.032498,-0.499982,0.707133,-0.499982,0.748468,0.184080,-0.039801,0.045959,-0.022979,-0.612350,0.707133,-0.353540,0.748040,0.184570,-0.034266,0.051564,-0.019783,-0.527178,0.793375,-0.304367,0.726070,0.160150,-0.027978,0.051564,-0.027978,-0.430439,0.793375,-0.430439,0.748040,0.184118,-0.034266,0.051564,-0.019783,-0.527178,0.793375,-0.304367,0.921380,0.159862,-0.028144,0.056288,-0.016249,-0.308479,0.934410,-0.178100,0.909180,0.123268,-0.027978,0.051564,-0.027978,-0.430439,0.793375,-0.430439,0.723774,0.159668,-0.022979,0.056288,-0.022979,-0.251872,0.934410,-0.251872,0.711682,0.123358,-0.021540,0.057362,-0.012436,-0.069677,0.996758,-0.040228,0.907009,0.111320,-0.017588,0.057362,-0.017588,-0.056891,0.996758,-0.056891,0.713882,0.111267,-0.013714,0.057553,-0.007918,0.247141,0.958416,0.142687,0.923990,0.111320,-0.010767,0.055220,-0.006216,0.685761,0.610717,0.395924,0.941252,0.099120,-0.007347,0.044143,-0.004242,0.815751,0.335759,0.470974,0.970322,0.098630,-0.005999,0.044143,-0.005999,-0.046247,0.997859,-0.046247,0.579803,0.098630,-0.007347,0.044143,-0.004242,-0.056641,0.997859,-0.032702,0.970322,0.098630,-0.008195,-0.064439,-0.002196,-0.126069,-0.991446,-0.033780,0.499204,0.748530,-0.016249,-0.062781,-0.004354,-0.249983,-0.965931,-0.066983,0.462741,0.711910,-0.007347,-0.064439,-0.004242,-0.113031,-0.991446,-0.065258,0.492180,0.735840,-0.024025,-0.060048,-0.006438,-0.369621,-0.923890,-0.099040,0.457520,0.687417,-0.014568,-0.062781,-0.008411,-0.224128,-0.965931,-0.129401,0.264988,0.711677,-0.031390,-0.056288,-0.008411,-0.482936,-0.866041,-0.129402,0.438148,0.650870,-0.021540,-0.060048,-0.012436,-0.331393,-0.923890,-0.191330,0.401850,0.650390,-0.038219,-0.051564,-0.010241,-0.587991,-0.793375,-0.157552,0.404125,0.614250,-0.028144,-0.056288,-0.016249,-0.432989,-0.866041,-0.249986,0.401850,0.613770,-0.044393,-0.045959,-0.011895,-0.682988,-0.707133,-0.183006,0.398920,0.589720,-0.034266,-0.051564,-0.019783,-0.527178,-0.793375,-0.304367,0.399410,0.589350,-0.049807,-0.039567,-0.013346,-0.766300,-0.608790,-0.205329,0.379539,0.553220,-0.039801,-0.045959,-0.022979,-0.612350,-0.707133,-0.353540,0.340820,0.552730,-0.044393,-0.045959,-0.011895,-0.682988,-0.707133,-0.183006,0.384760,0.577627,-0.054370,-0.032498,-0.014568,-0.836501,-0.500027,-0.224140,0.345516,0.516600,-0.044656,-0.039567,-0.025782,-0.687046,-0.608790,-0.396666,0.343260,0.516110,-0.058002,-0.024873,-0.015542,-0.892390,-0.382707,-0.239115,0.318829,0.479980,-0.048747,-0.032498,-0.028144,-0.749986,-0.500027,-0.433005,0.318840,0.479722,-0.060642,-0.016822,-0.016249,-0.933008,-0.258837,-0.249999,0.325680,0.479850,-0.052003,-0.024873,-0.030024,-0.800095,-0.382707,-0.461935,0.326159,0.479490,-0.058002,-0.024873,-0.015542,-0.892390,-0.382707,-0.239115,0.326170,0.479850,-0.062244,-0.008484,-0.016678,-0.957661,-0.130536,-0.256604,0.284468,0.418940,-0.054370,-0.016822,-0.031390,-0.836512,-0.258837,-0.482961,0.284660,0.418450,-0.060642,-0.016822,-0.016249,-0.933008,-0.258837,-0.249999,0.320928,0.455560,-0.055806,-0.008484,-0.032220,-0.858615,-0.130536,-0.495722,0.088860,0.418637,-0.062781,0.000000,-0.016822,-0.965926,0.0,-0.258819,0.286620,0.418808,-0.055806,-0.008484,-0.032220,-0.858615,-0.130536,-0.495722,0.286908,0.418450,-0.062244,-0.008484,-0.016678,-0.957661,-0.130536,-0.256604,0.286902,0.418940,-0.056288,0.000000,-0.032498,-0.866025,0.0,-0.500000,0.064896,0.382320,-0.062781,0.000000,-0.016822,-0.965926,0.0,-0.258819,0.267570,0.382187,-0.055806,0.008484,-0.032220,-0.858615,0.130536,-0.495722,0.040030,0.357607,-0.056288,0.000000,-0.032498,-0.866025,0.0,-0.500000,0.267519,0.381830,-0.062244,0.008484,-0.016678,-0.957661,0.130536,-0.256605,0.267090,0.382187,-0.062244,0.008484,-0.016678,-0.957661,0.130536,-0.256605,0.262200,0.357778,-0.054370,0.016822,-0.031390,-0.836512,0.258837,-0.482961,0.030270,0.320984,-0.055806,0.008484,-0.032220,-0.858615,0.130536,-0.495722,0.040144,0.357607,-0.060642,0.016822,-0.016249,-0.933008,0.258837,-0.249999,0.228291,0.321280,-0.052003,0.024873,-0.030024,-0.800095,0.382707,-0.461935,0.006270,0.284660,-0.054370,0.016822,-0.031390,-0.836512,0.258837,-0.482961,0.030544,0.320983,-0.058002,0.024873,-0.015542,-0.892390,0.382707,-0.239115,0.040030,0.321280,-0.058002,0.024873,-0.015542,-0.892390,0.382707,-0.239115,0.208980,0.284532,-0.052003,0.024873,-0.030024,-0.800095,0.382707,-0.461935,0.208490,0.284180,-0.054370,0.032498,-0.014568,-0.836501,0.500027,-0.224140,0.208490,0.284528,-0.054370,0.032498,-0.014568,-0.836501,0.500027,-0.224140,0.203610,0.260122,-0.048747,0.032498,-0.028144,-0.749986,0.500027,-0.433005,0.980082,0.257510,-0.049807,0.039567,-0.013346,-0.766300,0.608790,-0.205329,0.169693,0.223630,-0.044656,0.039567,-0.025782,-0.687046,0.608790,-0.396666,0.970477,0.220892,-0.044393,0.045959,-0.011895,-0.682988,0.707133,-0.183006,0.972650,0.221190,-0.038219,0.051564,-0.010241,-0.587991,0.793375,-0.157552,0.149900,0.186846,-0.039801,0.045959,-0.022979,-0.612350,0.707133,-0.353540,0.149900,0.186520,-0.044393,0.045959,-0.011895,-0.682988,0.707133,-0.183006,0.150390,0.186890,-0.031390,0.056288,-0.008411,-0.344063,0.934410,-0.092191,0.113280,0.125673,-0.034266,0.051564,-0.019783,-0.527178,0.793375,-0.304367,0.921488,0.159861,-0.038219,0.051564,-0.010241,-0.587991,0.793375,-0.157552,0.145178,0.162590,-0.028144,0.056288,-0.016249,-0.308479,0.934410,-0.178100,0.909226,0.123260,-0.024025,0.057362,-0.006438,-0.077714,0.996758,-0.020823,0.103689,0.113770,-0.015296,0.057553,-0.004099,0.275650,0.958416,0.073860,0.091375,0.113280,-0.021540,0.057362,-0.012436,-0.069677,0.996758,-0.040228,0.907034,0.110927,-0.012009,0.055220,-0.003218,0.764867,0.610717,0.204946,0.083980,0.113770,-0.008195,0.044143,-0.002196,0.909852,0.335759,0.243794,0.125970,0.101560,-0.007347,0.044143,-0.004242,-0.056641,0.997859,-0.032702,0.047850,0.040030,-0.008195,0.044143,-0.002196,-0.063175,0.997859,-0.016928,0.125970,0.101560,0.0,-0.064995,0.0,0.0,-1.0,0.000000,0.396970,0.775390,-0.008195,-0.064439,-0.002196,-0.126069,-0.991446,-0.033780,0.665520,0.711420,-0.008484,-0.064439,0.0,-0.130517,-0.991446,0.0,0.665520,0.711910,-0.016249,-0.062781,-0.004354,-0.249983,-0.965931,-0.066983,0.663080,0.687010,-0.016822,-0.062781,0.0,-0.258801,-0.965931,0.0,0.663080,0.687181,-0.024025,-0.060048,-0.006438,-0.369621,-0.923890,-0.099040,0.457548,0.687010,-0.024025,-0.060048,-0.006438,-0.369621,-0.923890,-0.099040,0.604490,0.650390,-0.024873,-0.060048,0.0,-0.382659,-0.923890,0.0,0.604490,0.650870,-0.031390,-0.056288,-0.008411,-0.482936,-0.866041,-0.129402,0.606930,0.613770,-0.032498,-0.056288,0.0,-0.499972,-0.866041,-0.000000,0.606930,0.614250,-0.039567,-0.051564,0.0,-0.608733,-0.793375,-0.000000,0.399410,0.589840,-0.038219,-0.051564,-0.010241,-0.587991,-0.793375,-0.157552,0.399410,0.589710,-0.044393,-0.045959,-0.011895,-0.682988,-0.707133,-0.183006,0.538570,0.552730,-0.045959,-0.045959,0.0,-0.707081,-0.707133,-0.000000,0.538570,0.553220,-0.049807,-0.039567,-0.013346,-0.766300,-0.608790,-0.205329,0.548340,0.516110,-0.051564,-0.039567,0.0,-0.793332,-0.608790,0.000000,0.548340,0.516600,-0.054370,-0.032498,-0.014568,-0.836501,-0.500027,-0.224140,0.523920,0.479490,-0.056288,-0.032498,0.0,-0.866010,-0.500027,-0.000000,0.523920,0.479980,-0.058002,-0.024873,-0.015542,-0.892390,-0.382707,-0.239115,0.326143,0.479850,-0.060048,-0.024873,0.0,-0.923870,-0.382707,0.0,0.550749,0.479529,-0.064439,-0.008484,0.0,-0.991444,-0.130536,-0.000000,0.489537,0.418940,-0.060642,-0.016822,-0.016249,-0.933008,-0.258837,-0.249999,0.489740,0.418450,-0.062781,-0.016822,0.0,-0.965921,-0.258837,0.000000,0.489740,0.418940,-0.064439,-0.008484,0.0,-0.991444,-0.130536,-0.000000,0.286904,0.418940,-0.064995,0.000000,0.0,-1.0,0.0,0.0,0.267519,0.382320,-0.064439,0.008484,0.0,-0.991444,0.130536,-0.000000,0.467396,0.357456,-0.062244,0.008484,-0.016678,-0.957661,0.130536,-0.256605,0.262315,0.357778,-0.062781,0.016822,0.0,-0.965921,0.258837,0.000000,0.264640,0.357910,-0.062781,0.016822,0.0,-0.965921,0.258837,0.000000,0.452908,0.320836,-0.058002,0.024873,-0.015542,-0.892390,0.382707,-0.239115,0.264640,0.320800,-0.060642,0.016822,-0.016249,-0.933008,0.258837,-0.249999,0.228295,0.321151,-0.060048,0.024873,0.0,-0.923870,0.382707,0.0,0.357910,0.260150,-0.058002,0.024873,-0.015542,-0.892390,0.382707,-0.239115,0.357910,0.259760,-0.056288,0.032498,0.0,-0.866010,0.500027,-0.000000,0.408802,0.259801,-0.054370,0.032498,-0.014568,-0.836501,0.500027,-0.224140,0.203718,0.260122,-0.051564,0.039567,0.0,-0.793332,0.608789,0.000000,0.394317,0.223185,-0.044393,0.045959,-0.011895,-0.682988,0.707133,-0.183006,0.198730,0.223140,-0.049807,0.039567,-0.013346,-0.766300,0.608790,-0.205329,0.169702,0.223505,-0.045959,0.045959,0.0,-0.707081,0.707133,-0.000000,0.149900,0.187010,-0.039567,0.051564,0.0,-0.608733,0.793375,-0.000000,0.350344,0.162156,-0.038219,0.051564,-0.010241,-0.587991,0.793375,-0.157552,0.145187,0.162437,-0.032498,0.056288,0.0,-0.356200,0.934410,-0.000000,0.311188,0.125874,-0.031390,0.056288,-0.008411,-0.344063,0.934410,-0.092191,0.113371,0.125672,-0.024025,0.057362,-0.006438,-0.077714,0.996758,-0.020823,0.103707,0.113387,-0.024873,0.057362,-0.000000,-0.080456,0.996758,0.000000,0.299062,0.113747,-0.008195,0.044143,-0.002196,0.909852,0.335759,0.243794,0.130370,0.101070,-0.008484,0.044143,-0.000000,-0.065403,0.997859,0.0,0.669920,0.032710,0.0,0.044699,-0.000000,0.0,1.0,0.000000,0.658093,0.106309,-0.012009,0.055220,0.003218,0.764867,0.610717,-0.204946,0.482068,0.101184,-0.015296,0.057553,0.004099,0.275650,0.958416,-0.073860,0.726197,0.101070,-0.013714,0.057553,0.007918,0.247141,0.958416,-0.142687,0.921549,0.101070,-0.010767,0.055220,0.006216,0.685761,0.610717,-0.395924,0.762939,0.101109,-0.008791,0.055220,0.008791,0.559922,0.610717,-0.559922,0.958201,0.101113,-0.007918,0.057553,0.013714,0.142687,0.958416,-0.247141,0.116210,0.104000,-0.011198,0.057553,0.011198,0.201790,0.958416,-0.201790,0.115953,0.103510,-0.007918,0.057553,0.013714,0.142687,0.958416,-0.247141,0.140261,0.115835,-0.006216,0.055220,0.010767,0.395924,0.610717,-0.685761,0.147460,0.115720,-0.004099,0.057553,0.015296,0.073860,0.958416,-0.275650,0.343019,0.116123,-0.003218,0.055220,0.012009,0.204946,0.610717,-0.764867,0.364740,0.115720,-0.000000,0.055220,0.012432,0.0,0.610717,-0.791849,0.762690,0.115720,-0.000000,0.057553,0.015836,0.0,0.958416,-0.285374,0.577475,0.116027,0.003218,0.055220,0.012009,-0.204946,0.610717,-0.764867,0.743581,0.103854,0.004099,0.057553,0.015296,-0.073860,0.958416,-0.275650,0.997070,0.115720,0.006216,0.055220,0.010767,-0.395924,0.610717,-0.685761,0.008324,0.118160,0.007918,0.057553,0.013714,-0.142687,0.958416,-0.247141,0.008670,0.118160,0.008791,0.055220,0.008791,-0.559922,0.610717,-0.559922,0.162574,0.105950,0.011198,0.057553,0.011198,-0.201790,0.958416,-0.201790,0.194275,0.118468,0.013714,0.057553,0.007918,-0.247141,0.958416,-0.142687,0.523920,0.105950,0.010767,0.055220,0.006216,-0.685761,0.610717,-0.395924,0.487119,0.106324,0.015296,0.057553,0.004099,-0.275650,0.958416,-0.073860,0.633780,0.106085,0.012009,0.055220,0.003218,-0.764867,0.610717,-0.204946,0.633516,0.106440,0.012432,0.055220,0.000000,-0.791849,0.610717,0.0,0.641110,0.106261,0.015836,0.057553,0.000000,-0.285374,0.958416,0.0,0.719223,0.106262,0.012009,0.055220,-0.003218,-0.764867,0.610717,0.204946,0.033126,0.108530,0.015296,0.057553,-0.004099,-0.275650,0.958416,0.073860,0.025665,0.121034,0.013714,0.057553,-0.007918,-0.247141,0.958416,0.142687,0.203944,0.120600,0.010767,0.055220,-0.006216,-0.685761,0.610717,0.395924,0.203610,0.120600,0.007918,0.057553,-0.013714,-0.142687,0.958416,0.247141,0.635781,0.120600,0.008791,0.055220,-0.008791,-0.559922,0.610717,0.559922,0.416045,0.120600,0.011198,0.057553,-0.011198,-0.201790,0.958416,0.201790,0.416460,0.120600,0.006216,0.055220,-0.010767,-0.395924,0.610717,0.685761,0.423555,0.108880,0.006216,0.055220,-0.010767,-0.395924,0.610717,0.685761,0.543437,0.108390,0.007918,0.057553,-0.013714,-0.142687,0.958416,0.247141,0.799351,0.120600,0.003218,0.055220,-0.012009,-0.204946,0.610717,0.764867,0.768052,0.108390,0.004099,0.057553,-0.015296,-0.073860,0.958416,0.275650,0.032915,0.123040,0.000000,0.055220,-0.012432,0.0,0.610717,0.791849,0.071770,0.110840,0.000000,0.057553,-0.015836,0.0,0.958416,0.285374,0.069444,0.111209,-0.003218,0.055220,-0.012009,0.204946,0.610717,0.764867,0.503900,0.110840,-0.007918,0.057553,-0.013714,0.142687,0.958416,0.247141,0.504390,0.111204,-0.006216,0.055220,-0.010767,0.395924,0.610717,0.685761,0.503946,0.111320,-0.004099,0.057553,-0.015296,0.073860,0.958416,0.275650,0.503900,0.110840,-0.007918,0.057553,-0.013714,0.142687,0.958416,0.247141,0.536000,0.110840,-0.006216,0.055220,-0.010767,0.395924,0.610717,0.685761,0.535692,0.110840,-0.008791,0.055220,-0.008791,0.559922,0.610717,0.559922,0.542968,0.110840,-0.011198,0.057553,-0.011198,0.201790,0.958416,0.201790,0.760534,0.110917,-0.013714,0.057553,-0.007918,0.247141,0.958416,0.142687,0.062446,0.101070,-0.010767,0.055220,-0.006216,0.685761,0.610717,0.395924,0.941252,0.099114,-0.015836,0.057553,-0.000000,0.285374,0.958416,0.0,0.099034,0.101560,-0.012432,0.055220,-0.000000,0.791849,0.610717,0.0,0.130370,0.101560,-0.015296,0.057553,-0.004099,0.275650,0.958416,0.073860,0.099120,0.101070,-0.012009,0.055220,-0.003218,0.764867,0.610717,0.204946,0.099120,0.101070,-0.235764,-0.064995,0.0,0.0,-1.0,0.000000,0.403800,0.774900,-0.227280,-0.064439,0.0,0.130517,-0.991446,0.0,0.701832,0.748040,-0.227570,-0.064439,0.002196,0.126069,-0.991446,0.033780,0.899576,0.748530,-0.227570,-0.064439,0.002196,0.126069,-0.991446,0.033780,0.701832,0.748040,-0.218942,-0.062781,0.0,0.258801,-0.965931,0.0,0.889964,0.711910,-0.219515,-0.062781,0.004354,0.249983,-0.965931,0.066983,0.899576,0.748530,-0.227280,-0.064439,0.0,0.130517,-0.991446,0.0,0.687343,0.711420,-0.219515,-0.062781,0.004354,0.249983,-0.965931,0.066983,0.687343,0.711420,-0.210891,-0.060048,0.0,0.382659,-0.923890,0.0,0.865230,0.687275,-0.211739,-0.060048,0.006438,0.369620,-0.923890,0.099040,0.889964,0.711910,-0.218942,-0.062781,0.0,0.258801,-0.965931,0.0,0.662590,0.687104,-0.211739,-0.060048,0.006438,0.369620,-0.923890,0.099040,0.662592,0.687104,-0.203266,-0.056288,0.0,0.499972,-0.866041,-0.000000,0.840969,0.650870,-0.204374,-0.056288,0.008411,0.482936,-0.866041,0.129402,0.865230,0.687275,-0.210891,-0.060048,0.0,0.382659,-0.923890,0.0,0.643220,0.650390,-0.204374,-0.056288,0.008411,0.482936,-0.866041,0.129402,0.643220,0.650390,-0.196197,-0.051564,0.0,0.608733,-0.793375,-0.000000,0.824048,0.614250,-0.197546,-0.051564,0.010241,0.587991,-0.793375,0.157552,0.840969,0.650870,-0.203266,-0.056288,0.0,0.499972,-0.866041,-0.000000,0.628728,0.613770,-0.197546,-0.051564,0.010241,0.587991,-0.793375,0.157552,0.628728,0.613770,-0.196197,-0.051564,0.0,0.608733,-0.793375,-0.000000,0.604000,0.589401,-0.191371,-0.045959,0.011895,0.682988,-0.707133,0.183006,0.824048,0.614250,-0.189805,-0.045959,0.0,0.707081,-0.707133,-0.000000,0.807100,0.577630,-0.191371,-0.045959,0.011895,0.682988,-0.707133,0.183006,0.604000,0.589401,-0.184200,-0.039567,0.0,0.793332,-0.608790,0.000000,0.782220,0.552942,-0.185957,-0.039567,0.013346,0.766300,-0.608790,0.205329,0.807100,0.577630,-0.189805,-0.045959,0.0,0.707081,-0.707133,-0.000000,0.584613,0.552730,-0.185957,-0.039567,0.013346,0.766300,-0.608790,0.205329,0.584613,0.552730,-0.179476,-0.032498,0.0,0.866010,-0.500027,-0.000000,0.765439,0.516600,-0.181394,-0.032498,0.014568,0.836501,-0.500027,0.224140,0.782220,0.552942,-0.184200,-0.039567,0.0,0.793332,-0.608790,0.000000,0.570122,0.516110,-0.181394,-0.032498,0.014568,0.836501,-0.500027,0.224140,0.570122,0.516110,-0.175716,-0.024873,0.0,0.923870,-0.382707,0.0,0.748496,0.479980,-0.177762,-0.024873,0.015542,0.892390,-0.382707,0.239115,0.765439,0.516600,-0.179476,-0.032498,0.0,0.866010,-0.500027,-0.000000,0.550750,0.479490,-0.177762,-0.024873,0.015542,0.892390,-0.382707,0.239115,0.550750,0.479490,-0.172983,-0.016822,0.0,0.965921,-0.258837,0.000000,0.723630,0.455273,-0.175122,-0.016822,0.016249,0.933008,-0.258837,0.249999,0.748496,0.479980,-0.175716,-0.024873,0.0,0.923870,-0.382707,0.0,0.525998,0.455070,-0.175122,-0.016822,0.016249,0.933008,-0.258837,0.249999,0.525998,0.455070,-0.171325,-0.008484,0.0,0.991444,-0.130536,-0.000000,0.714145,0.418940,-0.173520,-0.008484,0.016678,0.957661,-0.130536,0.256605,0.723630,0.455273,-0.172983,-0.016822,0.0,0.965921,-0.258837,0.000000,0.511511,0.418450,-0.173520,-0.008484,0.016678,0.957661,-0.130536,0.256605,0.511511,0.418450,-0.170769,0.000000,0.0,1.0,0.0,0.0,0.511230,0.418940,-0.172983,0.000000,0.016822,0.965926,0.0,0.258819,0.714145,0.418940,-0.171325,-0.008484,0.0,0.991444,-0.130536,-0.000000,0.491690,0.381866,-0.172983,0.000000,0.016822,0.965926,0.0,0.258819,0.492136,0.381830,-0.170769,0.000000,0.0,1.0,0.0,0.0,0.467396,0.357420,-0.173520,0.008484,0.016678,0.957661,0.130536,0.256605,0.689896,0.382320,-0.171325,0.008484,0.0,0.991444,0.130536,-0.000000,0.665030,0.357623,-0.173520,0.008484,0.016678,0.957661,0.130536,0.256605,0.467396,0.357420,-0.171325,0.008484,0.0,0.991444,0.130536,-0.000000,0.452908,0.320800,-0.175122,0.016822,0.016249,0.933008,0.258837,0.249999,0.665030,0.357623,-0.172983,0.016822,0.0,0.965921,0.258837,0.000000,0.655541,0.321280,-0.175122,0.016822,0.016249,0.933008,0.258837,0.249999,0.452908,0.320800,-0.172983,0.016822,0.0,0.965921,0.258837,0.000000,0.433519,0.284660,-0.177762,0.024873,0.015542,0.892390,0.382707,0.239115,0.655541,0.321280,-0.175716,0.024873,0.0,0.923870,0.382707,0.0,0.452630,0.321280,-0.177762,0.024873,0.015542,0.892390,0.382707,0.239115,0.433538,0.284180,-0.175716,0.024873,0.0,0.923870,0.382707,0.0,0.408800,0.259760,-0.181394,0.032498,0.014568,0.836501,0.500027,0.224140,0.631280,0.284660,-0.179476,0.032498,0.0,0.866010,0.500027,-0.000000,0.606440,0.259968,-0.181394,0.032498,0.014568,0.836501,0.500027,0.224140,0.408800,0.259760,-0.179476,0.032498,0.0,0.866010,0.500027,-0.000000,0.394314,0.223140,-0.185957,0.039567,0.013346,0.766300,0.608790,0.205329,0.606440,0.259968,-0.184200,0.039567,0.0,0.793332,0.608789,0.000000,0.596940,0.223630,-0.185957,0.039567,0.013346,0.766300,0.608790,0.205329,0.394314,0.223140,-0.184200,0.039567,0.0,0.793332,0.608789,0.000000,0.374949,0.186520,-0.191371,0.045959,0.011895,0.682988,0.707133,0.183006,0.596940,0.223630,-0.189805,0.045959,0.0,0.707081,0.707133,-0.000000,0.572692,0.187010,-0.191371,0.045959,0.011895,0.682988,0.707133,0.183006,0.374949,0.186520,-0.196197,0.051564,0.0,0.608733,0.793375,-0.000000,0.548094,0.162590,-0.197546,0.051564,0.010241,0.587991,0.793375,0.157552,0.572692,0.187010,-0.189805,0.045959,0.0,0.707081,0.707133,-0.000000,0.350339,0.162100,-0.197546,0.051564,0.010241,0.587991,0.793375,0.157552,0.350339,0.162100,-0.203266,0.056288,0.0,0.356200,0.934410,-0.000000,0.533488,0.125970,-0.204374,0.056288,0.008411,0.344063,0.934410,0.092191,0.548094,0.162590,-0.196197,0.051564,0.0,0.608733,0.793375,-0.000000,0.338040,0.125480,-0.211739,0.057362,0.006438,0.077714,0.996758,0.020823,0.533488,0.125970,-0.204374,0.056288,0.008411,0.344063,0.934410,0.092191,0.338040,0.125480,-0.203266,0.056288,0.0,0.356200,0.934410,-0.000000,0.306392,0.113280,-0.210891,0.057362,-0.000000,0.080456,0.996758,0.000000,0.501720,0.113770,-0.211739,0.057362,0.006438,0.077714,0.996758,0.020823,0.306392,0.113280,-0.219928,0.057553,-0.000000,-0.285374,0.958416,0.0,0.482339,0.101560,-0.220468,0.057553,0.004099,-0.275650,0.958416,-0.073860,0.501720,0.113770,-0.210891,0.057362,-0.000000,0.080456,0.996758,0.000000,0.296845,0.101070,-0.227570,0.044143,0.002196,-0.909852,0.335759,-0.243794,0.479628,0.101560,-0.223756,0.055220,0.003218,-0.764867,0.610717,-0.204946,0.325862,0.101070,-0.223332,0.055220,-0.000000,-0.791849,0.610717,0.0,0.330983,0.101070,-0.227280,0.044143,-0.000000,-0.941948,0.335759,0.0,0.484768,0.101070,-0.235764,0.044699,-0.000000,0.0,1.0,0.000000,0.665412,0.105950,-0.227570,0.044143,0.002196,0.063175,0.997859,0.016928,0.484768,0.101070,-0.227280,0.044143,-0.000000,0.065403,0.997859,0.0,0.330983,0.101070,-0.228417,-0.064439,0.004242,0.113031,-0.991446,0.065258,0.125636,0.750970,-0.228417,-0.064439,0.004242,0.113031,-0.991446,0.065258,0.086910,0.713860,-0.219515,-0.062781,0.004354,0.249983,-0.965931,0.066983,0.089174,0.714350,-0.221196,-0.062781,0.008411,0.224128,-0.965931,0.129401,0.125636,0.750970,-0.227570,-0.064439,0.002196,0.126069,-0.991446,0.033780,0.889964,0.711910,-0.221196,-0.062781,0.008411,0.224128,-0.965931,0.129401,0.084470,0.689450,-0.211739,-0.060048,0.006438,0.369620,-0.923890,0.099040,0.083980,0.689878,-0.214224,-0.060048,0.012436,0.331393,-0.923890,0.191330,0.089174,0.714350,-0.219515,-0.062781,0.004354,0.249983,-0.965931,0.066983,0.865230,0.687275,-0.214224,-0.060048,0.012436,0.331393,-0.923890,0.191330,0.865712,0.675065,-0.204374,-0.056288,0.008411,0.482936,-0.866041,0.129402,0.064593,0.653320,-0.207620,-0.056288,0.016249,0.432989,-0.866041,0.249986,0.083980,0.689878,-0.211739,-0.060048,0.006438,0.369620,-0.923890,0.099040,0.840969,0.650870,-0.207620,-0.056288,0.016249,0.432989,-0.866041,0.249986,0.028320,0.616210,-0.204374,-0.056288,0.008411,0.482936,-0.866041,0.129402,0.824048,0.614250,-0.201498,-0.051564,0.019783,0.527178,-0.793375,0.304367,0.064593,0.653320,-0.197546,-0.051564,0.010241,0.587991,-0.793375,0.157552,0.028157,0.616690,-0.201498,-0.051564,0.019783,0.527178,-0.793375,0.304367,0.030597,0.616210,-0.197546,-0.051564,0.010241,0.587991,-0.793375,0.157552,0.807100,0.577630,-0.195963,-0.045959,0.022979,0.612350,-0.707133,0.353540,0.030572,0.616690,-0.191371,-0.045959,0.011895,0.682988,-0.707133,0.183006,0.030270,0.616592,-0.195963,-0.045959,0.022979,0.612350,-0.707133,0.353540,0.011227,0.579590,-0.185957,-0.039567,0.013346,0.766300,-0.608790,0.205329,0.010740,0.579963,-0.191108,-0.039567,0.025782,0.687046,-0.608790,0.396666,0.011230,0.579964,-0.191371,-0.045959,0.011895,0.682988,-0.707133,0.183006,0.782220,0.552942,-0.191108,-0.039567,0.025782,0.687046,-0.608790,0.396666,0.968260,0.516110,-0.181394,-0.032498,0.014568,0.836501,-0.500027,0.224140,0.968082,0.516600,-0.187017,-0.032498,0.028144,0.749986,-0.500027,0.433005,0.005981,0.555660,-0.185957,-0.039567,0.013346,0.766300,-0.608790,0.205329,0.765439,0.516600,-0.187017,-0.032498,0.028144,0.749986,-0.500027,0.433005,0.970522,0.516110,-0.177762,-0.024873,0.015542,0.892390,-0.382707,0.239115,0.970210,0.516481,-0.183761,-0.024873,0.030024,0.800095,-0.382707,0.461935,0.970502,0.516600,-0.181394,-0.032498,0.014568,0.836501,-0.500027,0.224140,0.748496,0.479980,-0.183761,-0.024873,0.030024,0.800095,-0.382707,0.461935,0.748496,0.479695,-0.175122,-0.016822,0.016249,0.933008,-0.258837,0.249999,0.945920,0.455560,-0.181394,-0.016822,0.031390,0.836512,-0.258837,0.482961,0.951132,0.479980,-0.177762,-0.024873,0.015542,0.892390,-0.382707,0.239115,0.723630,0.455273,-0.181394,-0.016822,0.031390,0.836512,-0.258837,0.482961,0.909660,0.418450,-0.173520,-0.008484,0.016678,0.957661,-0.130536,0.256605,0.909464,0.418940,-0.179958,-0.008484,0.032220,0.858615,-0.130536,0.495722,0.945920,0.455560,-0.175122,-0.016822,0.016249,0.933008,-0.258837,0.249999,0.714145,0.418940,-0.179958,-0.008484,0.032220,0.858615,-0.130536,0.495722,0.911904,0.418450,-0.172983,0.000000,0.016822,0.965926,0.0,0.258819,0.911620,0.418816,-0.179476,0.000000,0.032498,0.866025,0.0,0.500000,0.911898,0.418940,-0.173520,-0.008484,0.016678,0.957661,-0.130536,0.256605,0.689896,0.382320,-0.179476,0.000000,0.032498,0.866025,0.0,0.500000,0.892519,0.381830,-0.172983,0.000000,0.016822,0.965926,0.0,0.258819,0.665030,0.357623,-0.179958,0.008484,0.032220,0.858615,0.130536,0.495722,0.892570,0.382195,-0.173520,0.008484,0.016678,0.957661,0.130536,0.256605,0.892090,0.382195,-0.179958,0.008484,0.032220,0.858615,0.130536,0.495722,0.665147,0.357622,-0.173520,0.008484,0.016678,0.957661,0.130536,0.256605,0.655541,0.321280,-0.181394,0.016822,0.031390,0.836512,0.258837,0.482961,0.887200,0.357786,-0.175122,0.016822,0.016249,0.933008,0.258837,0.249999,0.853299,0.321280,-0.181394,0.016822,0.031390,0.836512,0.258837,0.482961,0.655550,0.320999,-0.175122,0.016822,0.016249,0.933008,0.258837,0.249999,0.631280,0.284660,-0.183761,0.024873,0.030024,0.800095,0.382707,0.461935,0.853299,0.321280,-0.177762,0.024873,0.015542,0.892390,0.382707,0.239115,0.687010,0.321280,-0.187017,0.032498,0.028144,0.749986,0.500027,0.433005,0.833980,0.284541,-0.183761,0.024873,0.030024,0.800095,0.382707,0.461935,0.833490,0.284180,-0.177762,0.024873,0.015542,0.892390,0.382707,0.239115,0.606440,0.259968,-0.181394,0.032498,0.014568,0.836501,0.500027,0.224140,0.833490,0.284537,-0.191108,0.039567,0.025782,0.687046,0.608790,0.396666,0.828726,0.260250,-0.187017,0.032498,0.028144,0.749986,0.500027,0.433005,0.606558,0.259967,-0.181394,0.032498,0.014568,0.836501,0.500027,0.224140,0.596940,0.223630,-0.185957,0.039567,0.013346,0.766300,0.608790,0.205329,0.794712,0.223630,-0.195963,0.045959,0.022979,0.612350,0.707133,0.353540,0.794712,0.223630,-0.191108,0.039567,0.025782,0.687046,0.608790,0.396666,0.596957,0.223351,-0.185957,0.039567,0.013346,0.766300,0.608790,0.205329,0.572692,0.187010,-0.191371,0.045959,0.011895,0.682988,0.707133,0.183006,0.606440,0.223630,-0.191371,0.045959,0.011895,0.682988,0.707133,0.183006,0.548094,0.162590,-0.201498,0.051564,0.019783,0.527178,0.793375,0.304367,0.775390,0.186902,-0.195963,0.045959,0.022979,0.612350,0.707133,0.353540,0.774900,0.186520,-0.197546,0.051564,0.010241,0.587991,0.793375,0.157552,0.809444,0.162100,-0.197546,0.051564,0.010241,0.587991,0.793375,0.157552,0.533488,0.125970,-0.207620,0.056288,0.016249,0.308479,0.934410,0.178100,0.770387,0.162590,-0.201498,0.051564,0.019783,0.527178,0.793375,0.304367,0.548109,0.162288,-0.204374,0.056288,0.008411,0.344063,0.934410,0.092191,0.741095,0.125970,-0.204374,0.056288,0.008411,0.344063,0.934410,0.092191,0.501720,0.113770,-0.214224,0.057362,0.012436,0.069677,0.996758,0.040228,0.741095,0.125970,-0.207620,0.056288,0.016249,0.308479,0.934410,0.178100,0.533495,0.125839,-0.211739,0.057362,0.006438,0.077714,0.996758,0.020823,0.758180,0.113770,-0.214224,0.057362,0.012436,0.069677,0.996758,0.040228,0.726560,0.101070,-0.220468,0.057553,0.004099,-0.275650,0.958416,-0.073860,0.755370,0.113658,-0.222050,0.057553,0.007918,-0.247141,0.958416,-0.142687,0.758180,0.113770,-0.211739,0.057362,0.006438,0.077714,0.996758,0.020823,0.482339,0.101560,-0.228417,0.044143,0.004242,-0.815751,0.335759,-0.470974,0.755613,0.101560,-0.224997,0.055220,0.006216,-0.685761,0.610717,-0.395924,0.479628,0.101560,-0.223756,0.055220,0.003218,-0.764867,0.610717,-0.204946,0.484768,0.101070,-0.227570,0.044143,0.002196,-0.909852,0.335759,-0.243794,0.758288,0.101560,-0.228417,0.044143,0.004242,0.056641,0.997859,0.032702,0.758288,0.101560,-0.227570,0.044143,0.002196,0.063175,0.997859,0.016928,0.477439,0.101494,-0.229765,-0.064439,0.005999,0.092289,-0.991446,0.092289,0.328266,0.750970,-0.228417,-0.064439,0.004242,0.113031,-0.991446,0.065258,0.089174,0.714350,-0.221196,-0.062781,0.008411,0.224128,-0.965931,0.129401,0.313774,0.714350,-0.223869,-0.062781,0.011895,0.183000,-0.965931,0.183000,0.328266,0.750970,-0.229765,-0.064439,0.005999,0.092289,-0.991446,0.092289,0.125635,0.750605,-0.214224,-0.060048,0.012436,0.331393,-0.923890,0.191330,0.267549,0.677730,-0.223869,-0.062781,0.011895,0.183000,-0.965931,0.183000,0.267570,0.677247,-0.221196,-0.062781,0.008411,0.224128,-0.965931,0.129401,0.083980,0.689878,-0.218176,-0.060048,0.017588,0.270581,-0.923890,0.270581,0.313774,0.714350,-0.214224,-0.060048,0.012436,0.331393,-0.923890,0.191330,0.064593,0.653320,-0.207620,-0.056288,0.016249,0.432989,-0.866041,0.249986,0.269530,0.652903,-0.212785,-0.056288,0.022979,0.353534,-0.866041,0.353534,0.267549,0.677730,-0.218176,-0.060048,0.017588,0.270581,-0.923890,0.270581,0.221190,0.652830,-0.201498,-0.051564,0.019783,0.527178,-0.793375,0.304367,0.233202,0.616690,-0.212785,-0.056288,0.022979,0.353534,-0.866041,0.353534,0.233390,0.616210,-0.207620,-0.056288,0.016249,0.432989,-0.866041,0.249986,0.028157,0.616690,-0.207786,-0.051564,0.027978,0.430439,-0.793375,0.430439,0.269530,0.652903,-0.195963,-0.045959,0.022979,0.612350,-0.707133,0.353540,0.208948,0.580070,-0.207786,-0.051564,0.027978,0.430439,-0.793375,0.430439,0.208980,0.579590,-0.201498,-0.051564,0.019783,0.527178,-0.793375,0.304367,0.208980,0.579590,-0.203266,-0.045959,0.032498,0.499982,-0.707133,0.499982,0.233202,0.616690,-0.191108,-0.039567,0.025782,0.687046,-0.608790,0.396666,0.210930,0.555216,-0.199303,-0.039567,0.036462,0.560970,-0.608790,0.560970,0.208948,0.580070,-0.195963,-0.045959,0.022979,0.612350,-0.707133,0.353540,0.005981,0.555660,-0.203266,-0.045959,0.032498,0.499982,-0.707133,0.499982,0.162590,0.555170,-0.199303,-0.039567,0.036462,0.560970,-0.608790,0.560970,0.174800,0.518550,-0.187017,-0.032498,0.028144,0.749986,-0.500027,0.433005,0.174599,0.519040,-0.195963,-0.032498,0.039801,0.612361,-0.500027,0.612361,0.210930,0.555216,-0.191108,-0.039567,0.025782,0.687046,-0.608790,0.396666,0.968082,0.516600,-0.195963,-0.032498,0.039801,0.612361,-0.500027,0.612361,0.147940,0.481964,-0.183761,-0.024873,0.030024,0.800095,-0.382707,0.461935,0.147922,0.482420,-0.193304,-0.024873,0.042460,0.653274,-0.382707,0.653275,0.174599,0.519040,-0.187017,-0.032498,0.028144,0.749986,-0.500027,0.433005,0.951132,0.479980,-0.193304,-0.024873,0.042460,0.653274,-0.382707,0.653275,0.951132,0.479859,-0.181394,-0.016822,0.031390,0.836512,-0.258837,0.482961,0.152340,0.457557,-0.191371,-0.016822,0.044393,0.683009,-0.258837,0.683009,0.147922,0.482420,-0.183761,-0.024873,0.030024,0.800095,-0.382707,0.461935,0.945920,0.455560,-0.191371,-0.016822,0.044393,0.683009,-0.258837,0.683009,0.116210,0.420890,-0.179958,-0.008484,0.032220,0.858615,-0.130536,0.495722,0.116003,0.421380,-0.190199,-0.008484,0.045566,0.701057,-0.130536,0.701057,0.152340,0.457557,-0.181394,-0.016822,0.031390,0.836512,-0.258837,0.482961,0.909464,0.418940,-0.190199,-0.008484,0.045566,0.701057,-0.130536,0.701057,0.911898,0.418940,-0.179476,0.000000,0.032498,0.866025,0.0,0.500000,0.911620,0.418940,-0.189805,0.000000,0.045959,0.707107,0.0,0.707107,0.116003,0.421380,-0.179958,-0.008484,0.032220,0.858615,-0.130536,0.495722,0.911620,0.418816,-0.190199,0.008484,0.045566,0.701057,0.130536,0.701057,0.892519,0.382320,-0.189805,0.000000,0.045959,0.707107,0.0,0.707107,0.892570,0.382195,-0.179476,0.000000,0.032498,0.866025,0.0,0.500000,0.892090,0.382195,-0.179958,0.008484,0.032220,0.858615,0.130536,0.495722,0.889640,0.357910,-0.191371,0.016822,0.044393,0.683009,0.258837,0.683009,0.093750,0.359897,-0.190199,0.008484,0.045566,0.701057,0.130536,0.701057,0.887319,0.357786,-0.179958,0.008484,0.032220,0.858615,0.130536,0.495722,0.853299,0.321280,-0.181394,0.016822,0.031390,0.836512,0.258837,0.482961,0.889679,0.321280,-0.193304,0.024873,0.042460,0.653274,0.382707,0.653275,0.889679,0.321280,-0.191371,0.016822,0.044393,0.683009,0.258837,0.683009,0.853303,0.321159,-0.181394,0.016822,0.031390,0.836512,0.258837,0.482961,0.889640,0.320800,-0.183761,0.024873,0.030024,0.800095,0.382707,0.461935,0.889640,0.321280,-0.195963,0.032498,0.039801,0.612361,0.500027,0.612361,0.960930,0.260053,-0.193304,0.024873,0.042460,0.653274,0.382707,0.653275,0.960930,0.259760,-0.183761,0.024873,0.030024,0.800095,0.382707,0.461935,0.828726,0.260250,-0.187017,0.032498,0.028144,0.749986,0.500027,0.433005,0.035150,0.262242,-0.199303,0.039567,0.036462,0.560970,0.608790,0.560970,0.035150,0.262242,-0.195963,0.032498,0.039801,0.612361,0.500027,0.612361,0.828733,0.260131,-0.187017,0.032498,0.028144,0.749986,0.500027,0.433005,0.794712,0.223630,-0.191108,0.039567,0.025782,0.687046,0.608790,0.396666,0.020500,0.225626,-0.195963,0.045959,0.022979,0.612350,0.707133,0.353540,0.823730,0.223630,-0.199303,0.039567,0.036462,0.560970,0.608790,0.560970,0.794719,0.223515,-0.191108,0.039567,0.025782,0.687046,0.608790,0.396666,0.823730,0.223140,-0.203266,0.045959,0.032498,0.499982,0.707133,0.499982,0.020500,0.225626,-0.207786,0.051564,0.027978,0.430439,0.793375,0.430439,0.809570,0.162590,-0.195963,0.045959,0.022979,0.612350,0.707133,0.353540,0.770387,0.162590,-0.201498,0.051564,0.019783,0.527178,0.793375,0.304367,0.975090,0.162141,-0.203266,0.045959,0.032498,0.499982,0.707133,0.499982,0.809570,0.162100,-0.207620,0.056288,0.016249,0.308479,0.934410,0.178100,0.811520,0.162590,-0.207786,0.051564,0.027978,0.430439,0.793375,0.430439,0.770391,0.162535,-0.201498,0.051564,0.019783,0.527178,0.793375,0.304367,0.741095,0.125970,-0.212785,0.056288,0.022979,0.251872,0.934410,0.251872,0.975090,0.162141,-0.214224,0.057362,0.012436,0.069677,0.996758,0.040228,0.955564,0.113770,-0.212785,0.056288,0.022979,0.251872,0.934410,0.251872,0.741102,0.125824,-0.207620,0.056288,0.016249,0.308479,0.934410,0.178100,0.758180,0.113770,-0.218176,0.057362,0.017588,0.056891,0.996758,0.056891,0.963355,0.125557,-0.224566,0.057553,0.011198,-0.201790,0.958416,-0.201790,0.955564,0.113770,-0.214224,0.057362,0.012436,0.069677,0.996758,0.040228,0.755370,0.113658,-0.222050,0.057553,0.007918,-0.247141,0.958416,-0.142687,0.950728,0.113770,-0.218176,0.057362,0.017588,0.056891,0.996758,0.056891,0.765500,0.113287,-0.229765,0.044143,0.005999,-0.666058,0.335759,-0.666058,0.950881,0.101560,-0.226973,0.055220,0.008791,-0.559922,0.610717,-0.559922,0.755613,0.101560,-0.224997,0.055220,0.006216,-0.685761,0.610717,-0.395924,0.758288,0.101560,-0.228417,0.044143,0.004242,-0.815751,0.335759,-0.470974,0.955962,0.101560,-0.229765,0.044143,0.005999,0.046247,0.997859,0.046247,0.955962,0.101560,-0.228417,0.044143,0.004242,0.056641,0.997859,0.032702,0.990130,0.088860,-0.231522,-0.064439,0.007347,0.065258,-0.991446,0.113031,0.526007,0.750970,-0.229765,-0.064439,0.005999,0.092289,-0.991446,0.092289,0.313774,0.714350,-0.223869,-0.062781,0.011895,0.183000,-0.965931,0.183000,0.516406,0.714350,-0.227353,-0.062781,0.014568,0.129401,-0.965931,0.224128,0.526007,0.750970,-0.231522,-0.064439,0.007347,0.065258,-0.991446,0.113031,0.509270,0.713860,-0.218176,-0.060048,0.017588,0.270581,-0.923890,0.270581,0.492146,0.677730,-0.227353,-0.062781,0.014568,0.129401,-0.965931,0.224128,0.489740,0.677240,-0.223869,-0.062781,0.011895,0.183000,-0.965931,0.183000,0.267549,0.677730,-0.223328,-0.060048,0.021540,0.191330,-0.923890,0.331393,0.516406,0.714350,-0.212785,-0.056288,0.022979,0.353534,-0.866041,0.353534,0.293940,0.677730,-0.223328,-0.060048,0.021540,0.191330,-0.923890,0.331393,0.294430,0.677335,-0.218176,-0.060048,0.017588,0.270581,-0.923890,0.270581,0.220945,0.653320,-0.219515,-0.056288,0.028144,0.249986,-0.866041,0.432989,0.489717,0.677730,-0.207786,-0.051564,0.027978,0.430439,-0.793375,0.430439,0.450491,0.616690,-0.215981,-0.051564,0.034266,0.304367,-0.793375,0.527178,0.467280,0.653056,-0.212785,-0.056288,0.022979,0.353534,-0.866041,0.353534,0.233202,0.616690,-0.219515,-0.056288,0.028144,0.249986,-0.866041,0.432989,0.450680,0.616210,-0.203266,-0.045959,0.032498,0.499982,-0.707133,0.499982,0.431122,0.580070,-0.215981,-0.051564,0.034266,0.304367,-0.793375,0.527178,0.431150,0.579623,-0.207786,-0.051564,0.027978,0.430439,-0.793375,0.430439,0.208948,0.580070,-0.212785,-0.045959,0.039801,0.353540,-0.707133,0.612350,0.450491,0.616690,-0.199303,-0.039567,0.036462,0.560970,-0.608790,0.560970,0.235350,0.580070,-0.209982,-0.039567,0.044656,0.396666,-0.608790,0.687045,0.431122,0.580070,-0.203266,-0.045959,0.032498,0.499982,-0.707133,0.499982,0.162347,0.555660,-0.212785,-0.045959,0.039801,0.353540,-0.707133,0.612350,0.235840,0.579640,-0.195963,-0.032498,0.039801,0.612361,-0.500027,0.612361,0.391894,0.519040,-0.207620,-0.032498,0.048747,0.433005,-0.500027,0.749986,0.408690,0.555373,-0.199303,-0.039567,0.036462,0.560970,-0.608790,0.560970,0.174599,0.519040,-0.209982,-0.039567,0.044656,0.396666,-0.608790,0.687045,0.392090,0.518550,-0.205740,-0.024873,0.052003,0.461935,-0.382707,0.800095,0.391894,0.519040,-0.195963,-0.032498,0.039801,0.612361,-0.500027,0.612361,0.147922,0.482420,-0.193304,-0.024873,0.042460,0.653274,-0.382707,0.653275,0.374955,0.482420,-0.207620,-0.032498,0.048747,0.433005,-0.500027,0.749986,0.345700,0.482031,-0.204374,-0.016822,0.054370,0.482961,-0.258837,0.836512,0.345685,0.482420,-0.193304,-0.024873,0.042460,0.653274,-0.382707,0.653275,0.176750,0.481969,-0.191371,-0.016822,0.044393,0.683009,-0.258837,0.683009,0.176750,0.482420,-0.205740,-0.024873,0.052003,0.461935,-0.382707,0.800095,0.177198,0.481930,-0.203544,-0.008484,0.055806,0.495722,-0.130536,0.858615,0.138180,0.421380,-0.191371,-0.016822,0.044393,0.683009,-0.258837,0.683009,0.137973,0.420890,-0.190199,-0.008484,0.045566,0.701057,-0.130536,0.701057,0.536068,0.420890,-0.204374,-0.016822,0.054370,0.482961,-0.258837,0.836512,0.138180,0.420933,-0.203266,0.000000,0.056288,0.500000,0.0,0.866025,0.536068,0.420890,-0.190199,-0.008484,0.045566,0.701057,-0.130536,0.701057,0.137690,0.420927,-0.189805,0.000000,0.045959,0.707107,0.0,0.707107,0.137690,0.421380,-0.203544,-0.008484,0.055806,0.495722,-0.130536,0.858615,0.137973,0.420890,-0.190199,0.008484,0.045566,0.701057,0.130536,0.701057,0.118160,0.384760,-0.203266,0.000000,0.056288,0.500000,0.0,0.866025,0.118606,0.384270,-0.189805,0.000000,0.045959,0.707107,0.0,0.707107,0.118160,0.384308,-0.203544,0.008484,0.055806,0.495722,0.130536,0.858615,0.118599,0.384760,-0.191371,0.016822,0.044393,0.683009,0.258837,0.683009,0.079100,0.323730,-0.203544,0.008484,0.055806,0.495722,0.130536,0.858615,0.079590,0.323278,-0.190199,0.008484,0.045566,0.701057,0.130536,0.701057,0.079385,0.323240,-0.204374,0.016822,0.054370,0.482961,0.258837,0.836512,0.079590,0.323730,-0.204374,0.016822,0.054370,0.482961,0.258837,0.836512,0.079385,0.323240,-0.193304,0.024873,0.042460,0.653274,0.382707,0.653275,0.079100,0.323730,-0.205740,0.024873,0.052003,0.461935,0.382707,0.800095,0.079100,0.323730,-0.191371,0.016822,0.044393,0.683009,0.258837,0.683009,0.079100,0.323288,-0.205740,0.024873,0.052003,0.461935,0.382707,0.800095,0.060012,0.286620,-0.195963,0.032498,0.039801,0.612361,0.500027,0.612361,0.037590,0.262690,-0.207620,0.032498,0.048747,0.433005,0.500027,0.749986,0.059577,0.287100,-0.193304,0.024873,0.042460,0.653274,0.382707,0.653275,0.960930,0.260053,-0.207620,0.032498,0.048747,0.433005,0.500027,0.749986,0.035277,0.262242,-0.199303,0.039567,0.036462,0.560970,0.608790,0.560970,0.223422,0.226070,-0.209982,0.039567,0.044656,0.396666,0.608790,0.687046,0.232910,0.262399,-0.195963,0.032498,0.039801,0.612361,0.500027,0.612361,0.020500,0.225626,-0.212785,0.045959,0.039801,0.353540,0.707133,0.612350,0.223422,0.226070,-0.199303,0.039567,0.036462,0.560970,0.608790,0.560970,0.030270,0.225580,-0.203266,0.045959,0.032498,0.499982,0.707133,0.499982,0.199172,0.189450,-0.209982,0.039567,0.044656,0.396666,0.608790,0.687046,0.020795,0.225625,-0.215981,0.051564,0.034266,0.304367,0.793375,0.527178,0.000970,0.189450,-0.203266,0.045959,0.032498,0.499982,0.707133,0.499982,0.000970,0.189026,-0.207786,0.051564,0.027978,0.430439,0.793375,0.430439,0.977530,0.162590,-0.212785,0.045959,0.039801,0.353540,0.707133,0.612350,0.001460,0.189012,-0.212785,0.056288,0.022979,0.251872,0.934410,0.251872,0.162100,0.140487,-0.215981,0.051564,0.034266,0.304367,0.793375,0.527178,0.975290,0.162139,-0.207786,0.051564,0.027978,0.430439,0.793375,0.430439,0.977530,0.162100,-0.219515,0.056288,0.028144,0.178100,0.934410,0.308479,0.174493,0.165030,-0.223328,0.057362,0.021540,0.040228,0.996758,0.069677,0.962890,0.125970,-0.212785,0.056288,0.022979,0.251872,0.934410,0.251872,0.955564,0.113770,-0.218176,0.057362,0.017588,0.056891,0.996758,0.056891,0.962890,0.125970,-0.219515,0.056288,0.028144,0.178100,0.934410,0.308479,0.963370,0.125558,-0.224566,0.057553,0.011198,-0.201790,0.958416,-0.201790,0.960440,0.113770,-0.223328,0.057362,0.021540,0.040228,0.996758,0.069677,0.958004,0.113283,-0.218176,0.057362,0.017588,0.056891,0.996758,0.056891,0.950728,0.113770,-0.227846,0.057553,0.013714,-0.142687,0.958416,-0.247141,0.154780,0.115851,-0.229548,0.055220,0.010767,-0.395924,0.610717,-0.685761,0.950881,0.101560,-0.229765,0.044143,0.005999,-0.666058,0.335759,-0.666058,0.121064,0.104000,-0.231522,0.044143,0.007347,-0.470974,0.335759,-0.815751,0.118436,0.104000,-0.226973,0.055220,0.008791,-0.559922,0.610717,-0.559922,0.955962,0.101560,-0.231522,0.044143,0.007347,0.032702,0.997859,0.056641,0.121064,0.104000,-0.229765,0.044143,0.005999,0.046247,0.997859,0.046247,0.579590,0.093750,-0.233568,-0.064439,0.008195,0.033780,-0.991446,0.126069,0.750610,0.750970,-0.227353,-0.062781,0.014568,0.129401,-0.965931,0.224128,0.714148,0.714350,-0.233568,-0.064439,0.008195,0.033780,-0.991446,0.126069,0.711910,0.713860,-0.231522,-0.064439,0.007347,0.065258,-0.991446,0.113031,0.516406,0.714350,-0.231410,-0.062781,0.016249,0.066983,-0.965931,0.249983,0.750610,0.750970,-0.223328,-0.060048,0.021540,0.191330,-0.923890,0.331393,0.687477,0.677730,-0.231410,-0.062781,0.016249,0.066983,-0.965931,0.249983,0.687500,0.677240,-0.227353,-0.062781,0.014568,0.129401,-0.965931,0.224128,0.492146,0.677730,-0.229327,-0.060048,0.024025,0.099040,-0.923890,0.369621,0.714148,0.714350,-0.219515,-0.056288,0.028144,0.249986,-0.866041,0.432989,0.816749,0.652830,-0.229327,-0.060048,0.024025,0.099040,-0.923890,0.369621,0.694797,0.677240,-0.223328,-0.060048,0.021540,0.191330,-0.923890,0.331393,0.467280,0.653056,-0.227353,-0.056288,0.031390,0.129402,-0.866041,0.482936,0.694779,0.677730,-0.215981,-0.051564,0.034266,0.304367,-0.793375,0.527178,0.655552,0.616690,-0.225523,-0.051564,0.038219,0.157552,-0.793375,0.587991,0.689571,0.653320,-0.219515,-0.056288,0.028144,0.249986,-0.866041,0.432989,0.450491,0.616690,-0.227353,-0.056288,0.031390,0.129402,-0.866041,0.482936,0.653320,0.616210,-0.212785,-0.045959,0.039801,0.353540,-0.707133,0.612350,0.628877,0.580070,-0.223869,-0.045959,0.044393,0.183006,-0.707133,0.682988,0.655552,0.616690,-0.215981,-0.051564,0.034266,0.304367,-0.793375,0.527178,0.431122,0.580070,-0.225523,-0.051564,0.038219,0.157552,-0.793375,0.587991,0.628900,0.579678,-0.222418,-0.039567,0.049807,0.205329,-0.608790,0.766300,0.636230,0.579944,-0.212785,-0.045959,0.039801,0.353540,-0.707133,0.612350,0.408690,0.555373,-0.209982,-0.039567,0.044656,0.396666,-0.608790,0.687045,0.635740,0.579943,-0.223869,-0.045959,0.044393,0.183006,-0.707133,0.682988,0.636207,0.579590,-0.221196,-0.032498,0.054370,0.224140,-0.500027,0.836501,0.630965,0.555660,-0.209982,-0.039567,0.044656,0.396666,-0.608790,0.687045,0.391894,0.519040,-0.207620,-0.032498,0.048747,0.433005,-0.500027,0.749986,0.596953,0.519040,-0.222418,-0.039567,0.049807,0.205329,-0.608790,0.766300,0.594720,0.518550,-0.220223,-0.024873,0.058002,0.239115,-0.382707,0.892390,0.596953,0.519040,-0.207620,-0.032498,0.048747,0.433005,-0.500027,0.749986,0.374955,0.482420,-0.205740,-0.024873,0.052003,0.461935,-0.382707,0.800095,0.567858,0.482420,-0.221196,-0.032498,0.054370,0.224140,-0.500027,0.836501,0.567870,0.482102,-0.219515,-0.016822,0.060642,0.249999,-0.258837,0.933008,0.577630,0.482283,-0.205740,-0.024873,0.052003,0.461935,-0.382707,0.800095,0.350090,0.457712,-0.204374,-0.016822,0.054370,0.482961,-0.258837,0.836512,0.577140,0.482283,-0.220223,-0.024873,0.058002,0.239115,-0.382707,0.892390,0.577598,0.481930,-0.219086,-0.008484,0.062244,0.256604,-0.130536,0.957661,0.572260,0.457865,-0.204374,-0.016822,0.054370,0.482961,-0.258837,0.836512,0.340330,0.421085,-0.203544,-0.008484,0.055806,0.495722,-0.130536,0.858615,0.535926,0.421380,-0.219515,-0.016822,0.060642,0.249999,-0.258837,0.933008,0.536130,0.420890,-0.218942,0.000000,0.062781,0.258819,0.0,0.965926,0.538361,0.421380,-0.203544,-0.008484,0.055806,0.495722,-0.130536,0.858615,0.316356,0.384760,-0.203266,0.000000,0.056288,0.500000,0.0,0.866025,0.538080,0.421242,-0.219086,-0.008484,0.062244,0.256604,-0.130536,0.957661,0.538366,0.420890,-0.203544,0.008484,0.055806,0.495722,0.130536,0.858615,0.518550,0.384621,-0.218942,0.000000,0.062781,0.258819,0.0,0.965926,0.518988,0.384270,-0.203266,0.000000,0.056288,0.500000,0.0,0.866025,0.291500,0.360055,-0.219086,0.008484,0.062244,0.256604,0.130536,0.957661,0.519040,0.384621,-0.204374,0.016822,0.054370,0.482961,0.258837,0.836512,0.479779,0.323730,-0.219086,0.008484,0.062244,0.256604,0.130536,0.957661,0.479980,0.323240,-0.203544,0.008484,0.055806,0.495722,0.130536,0.858615,0.282008,0.323730,-0.219515,0.016822,0.060642,0.249999,0.258837,0.933008,0.513670,0.360211,-0.205740,0.024873,0.052003,0.461935,0.382707,0.800095,0.479490,0.323588,-0.219515,0.016822,0.060642,0.249999,0.258837,0.933008,0.479490,0.323240,-0.204374,0.016822,0.054370,0.482961,0.258837,0.836512,0.257761,0.287100,-0.220223,0.024873,0.058002,0.239115,0.382707,0.892390,0.479779,0.323730,-0.220223,0.024873,0.058002,0.239115,0.382707,0.892390,0.459960,0.286620,-0.207620,0.032498,0.048747,0.433005,0.500027,0.749986,0.459960,0.286961,-0.221196,0.032498,0.054370,0.224140,0.500027,0.836501,0.460440,0.286965,-0.205740,0.024873,0.052003,0.461935,0.382707,0.800095,0.232910,0.262399,-0.221196,0.032498,0.054370,0.224140,0.500027,0.836501,0.233039,0.262399,-0.209982,0.039567,0.044656,0.396666,0.608790,0.687046,0.421186,0.226070,-0.222418,0.039567,0.049807,0.205329,0.608790,0.766300,0.455198,0.262690,-0.207620,0.032498,0.048747,0.433005,0.500027,0.749986,0.223422,0.226070,-0.222418,0.039567,0.049807,0.205329,0.608790,0.766300,0.223440,0.225782,-0.212785,0.045959,0.039801,0.353540,0.707133,0.612350,0.232910,0.226070,-0.223869,0.045959,0.044393,0.183006,0.707133,0.682988,0.421186,0.226070,-0.209982,0.039567,0.044656,0.396666,0.608790,0.687046,0.199172,0.189450,-0.215981,0.051564,0.034266,0.304367,0.793375,0.527178,0.401360,0.189314,-0.223869,0.045959,0.044393,0.183006,0.707133,0.682988,0.401360,0.188960,-0.212785,0.045959,0.039801,0.353540,0.707133,0.612350,0.174493,0.165030,-0.225523,0.051564,0.038219,0.157552,0.793375,0.587991,0.401850,0.189321,-0.227353,0.056288,0.031390,0.092191,0.934410,0.344063,0.396673,0.165030,-0.215981,0.051564,0.034266,0.304367,0.793375,0.527178,0.162100,0.140487,-0.219515,0.056288,0.028144,0.178100,0.934410,0.308479,0.379390,0.140534,-0.225523,0.051564,0.038219,0.157552,0.793375,0.587991,0.174512,0.164737,-0.223328,0.057362,0.021540,0.040228,0.996758,0.069677,0.357670,0.116210,-0.227353,0.056288,0.031390,0.092191,0.934410,0.344063,0.162103,0.140487,-0.219515,0.056288,0.028144,0.178100,0.934410,0.308479,0.154780,0.115851,-0.229327,0.057362,0.024025,0.020823,0.996758,0.077714,0.379390,0.140534,-0.223328,0.057362,0.021540,0.040228,0.996758,0.069677,0.140261,0.115720,-0.227846,0.057553,0.013714,-0.142687,0.958416,-0.247141,0.147460,0.116210,-0.231665,0.057553,0.015296,-0.073860,0.958416,-0.275650,0.372070,0.128175,-0.229327,0.057362,0.024025,0.020823,0.996758,0.077714,0.140620,0.116210,-0.232546,0.055220,0.012009,-0.204946,0.610717,-0.764867,0.118436,0.104000,-0.231522,0.044143,0.007347,-0.470974,0.335759,-0.815751,0.342849,0.104000,-0.233568,0.044143,0.008195,-0.243794,0.335759,-0.909852,0.343131,0.104000,-0.229548,0.055220,0.010767,-0.395924,0.610717,-0.685761,0.121064,0.104000,-0.233568,0.044143,0.008195,0.016928,0.997859,0.063175,0.342849,0.104000,-0.231522,0.044143,0.007347,0.032702,0.997859,0.056641,0.562500,0.093750,-0.233568,-0.064439,0.008195,0.033780,-0.991446,0.126069,0.748178,0.750970,-0.235764,-0.064439,0.008484,0.0,-0.991446,0.130517,0.748340,0.750970,-0.235764,-0.062781,0.016822,0.0,-0.965931,0.258801,0.945924,0.750970,-0.233568,-0.064439,0.008195,0.033780,-0.991446,0.126069,0.714148,0.714350,-0.231410,-0.062781,0.016249,0.066983,-0.965931,0.249983,0.916785,0.714350,-0.235764,-0.064439,0.008484,0.0,-0.991446,0.130517,0.916990,0.713860,-0.235764,-0.060048,0.024873,0.0,-0.923890,0.382659,0.916785,0.714350,-0.231410,-0.062781,0.016249,0.066983,-0.965931,0.249983,0.687477,0.677730,-0.229327,-0.060048,0.024025,0.099040,-0.923890,0.369621,0.892527,0.677730,-0.235764,-0.062781,0.016822,0.0,-0.965931,0.258801,0.892570,0.677240,-0.235764,-0.056288,0.032498,0.0,-0.866041,0.499972,0.892527,0.677730,-0.229327,-0.060048,0.024025,0.099040,-0.923890,0.369621,0.689571,0.653320,-0.227353,-0.056288,0.031390,0.129402,-0.866041,0.482936,0.894530,0.652861,-0.235764,-0.060048,0.024873,0.0,-0.923890,0.382659,0.816890,0.652830,-0.225523,-0.051564,0.038219,0.157552,-0.793375,0.587991,0.858184,0.616690,-0.235764,-0.056288,0.032498,0.0,-0.866041,0.499972,0.858390,0.616210,-0.227353,-0.056288,0.031390,0.129402,-0.866041,0.482936,0.655552,0.616690,-0.235764,-0.051564,0.039567,0.0,-0.793375,0.608733,0.894530,0.652861,-0.235764,-0.045959,0.045959,-0.000000,-0.707133,0.707081,0.858184,0.616690,-0.225523,-0.051564,0.038219,0.157552,-0.793375,0.587991,0.628877,0.580070,-0.223869,-0.045959,0.044393,0.183006,-0.707133,0.682988,0.833931,0.580070,-0.235764,-0.051564,0.039567,0.0,-0.793375,0.608733,0.833980,0.579590,-0.235764,-0.039567,0.051564,0.000000,-0.608790,0.793332,0.833931,0.580070,-0.223869,-0.045959,0.044393,0.183006,-0.707133,0.682988,0.630965,0.555660,-0.222418,-0.039567,0.049807,0.205329,-0.608790,0.766300,0.835930,0.555190,-0.235764,-0.045959,0.045959,-0.000000,-0.707133,0.707081,0.760740,0.555170,-0.235764,-0.032498,0.056288,-0.000000,-0.500027,0.866010,0.835930,0.555190,-0.222418,-0.039567,0.049807,0.205329,-0.608790,0.766300,0.596953,0.519040,-0.221196,-0.032498,0.054370,0.224140,-0.500027,0.836501,0.799587,0.519040,-0.235764,-0.039567,0.051564,0.000000,-0.608790,0.793332,0.799800,0.518550,-0.235764,-0.024873,0.060048,0.0,-0.382707,0.923870,0.799587,0.519040,-0.221196,-0.032498,0.054370,0.224140,-0.500027,0.836501,0.567858,0.482420,-0.220223,-0.024873,0.058002,0.239115,-0.382707,0.892390,0.775341,0.482420,-0.235764,-0.032498,0.056288,-0.000000,-0.500027,0.866010,0.775390,0.481930,-0.235764,-0.016822,0.062781,0.000000,-0.258837,0.965921,0.775341,0.482420,-0.220223,-0.024873,0.058002,0.239115,-0.382707,0.892390,0.572260,0.457865,-0.219515,-0.016822,0.060642,0.249999,-0.258837,0.933008,0.777340,0.457536,-0.235764,-0.024873,0.060048,0.0,-0.382707,0.923870,0.577582,0.482283,-0.235764,-0.008484,0.064439,-0.000000,-0.130536,0.991444,0.777340,0.457536,-0.219515,-0.016822,0.060642,0.249999,-0.258837,0.933008,0.535926,0.421380,-0.219086,-0.008484,0.062244,0.256604,-0.130536,0.957661,0.741000,0.421380,-0.235764,-0.016822,0.062781,0.000000,-0.258837,0.965921,0.741210,0.420890,-0.235764,0.000000,0.064995,0.0,0.0,1.0,0.741000,0.421380,-0.219086,-0.008484,0.062244,0.256604,-0.130536,0.957661,0.538080,0.421242,-0.218942,0.000000,0.062781,0.258819,0.0,0.965926,0.538080,0.421380,-0.235764,-0.008484,0.064439,-0.000000,-0.130536,0.991444,0.538361,0.421380,-0.219086,0.008484,0.062244,0.256604,0.130536,0.957661,0.516110,0.360350,-0.235764,0.000000,0.064995,0.0,0.0,1.0,0.519040,0.384621,-0.218942,0.000000,0.062781,0.258819,0.0,0.965926,0.518550,0.384621,-0.235764,0.008484,0.064439,-0.000000,0.130536,0.991444,0.518988,0.384760,-0.219515,0.016822,0.060642,0.249999,0.258837,0.933008,0.518622,0.323730,-0.235764,0.008484,0.064439,-0.000000,0.130536,0.991444,0.513792,0.360211,-0.219086,0.008484,0.062244,0.256604,0.130536,0.957661,0.516110,0.359860,-0.235764,0.016822,0.062781,0.000000,0.258837,0.965921,0.718750,0.359876,-0.220223,0.024873,0.058002,0.239115,0.382707,0.892390,0.518550,0.323730,-0.235764,0.016822,0.062781,0.000000,0.258837,0.965921,0.479779,0.323591,-0.219515,0.016822,0.060642,0.249999,0.258837,0.933008,0.518550,0.323240,-0.235764,0.024873,0.060048,0.0,0.382707,0.923870,0.518622,0.323730,-0.221196,0.032498,0.054370,0.224140,0.500027,0.836501,0.457520,0.262690,-0.235764,0.024873,0.060048,0.0,0.382707,0.923870,0.460440,0.286965,-0.220223,0.024873,0.058002,0.239115,0.382707,0.892390,0.459960,0.286961,-0.235764,0.032498,0.056288,-0.000000,0.500027,0.866010,0.459960,0.287100,-0.222418,0.039567,0.049807,0.205329,0.608790,0.766300,0.645500,0.225599,-0.235764,0.032498,0.056288,-0.000000,0.500027,0.866010,0.455205,0.262554,-0.221196,0.032498,0.054370,0.224140,0.500027,0.836501,0.421186,0.226070,-0.235764,0.039567,0.051564,0.000000,0.608789,0.793332,0.660150,0.262218,-0.235764,0.039567,0.051564,0.000000,0.608789,0.793332,0.421195,0.225936,-0.223869,0.045959,0.044393,0.183006,0.707133,0.682988,0.457520,0.226070,-0.235764,0.045959,0.045959,-0.000000,0.707133,0.707081,0.645500,0.225599,-0.222418,0.039567,0.049807,0.205329,0.608790,0.766300,0.457520,0.225580,-0.225523,0.051564,0.038219,0.157552,0.793375,0.587991,0.398920,0.165030,-0.235764,0.045959,0.045959,-0.000000,0.707133,0.707081,0.401850,0.189321,-0.223869,0.045959,0.044393,0.183006,0.707133,0.682988,0.401360,0.189314,-0.235764,0.051564,0.039567,0.0,0.793375,0.608733,0.401360,0.189450,-0.227353,0.056288,0.031390,0.092191,0.934410,0.344063,0.398920,0.165030,-0.235764,0.056288,0.032498,-0.000000,0.934410,0.356200,0.601560,0.164576,-0.225523,0.051564,0.038219,0.157552,0.793375,0.587991,0.379390,0.140534,-0.235764,0.051564,0.039567,0.0,0.793375,0.608733,0.396681,0.164911,-0.235764,0.056288,0.032498,-0.000000,0.934410,0.356200,0.379407,0.140534,-0.229327,0.057362,0.024025,0.020823,0.996758,0.077714,0.582257,0.116210,-0.235764,0.057362,0.024873,0.000000,0.996758,0.080456,0.372550,0.128410,-0.227353,0.056288,0.031390,0.092191,0.934410,0.344063,0.357670,0.116210,-0.235764,0.057362,0.024873,0.000000,0.996758,0.080456,0.357687,0.115949,-0.229327,0.057362,0.024025,0.020823,0.996758,0.077714,0.343014,0.116210,-0.235764,0.057553,0.015836,0.0,0.958416,-0.285374,0.582257,0.116210,-0.231665,0.057553,0.015296,-0.073860,0.958416,-0.275650,0.577465,0.116210,-0.235764,0.055220,0.012432,0.0,0.610717,-0.791849,0.343131,0.104000,-0.233568,0.044143,0.008195,-0.243794,0.335759,-0.909852,0.584618,0.104000,-0.235764,0.044143,0.008484,0.0,0.335759,-0.941948,0.584960,0.103833,-0.232546,0.055220,0.012009,-0.204946,0.610717,-0.764867,0.342849,0.104000,-0.235764,0.044143,0.008484,0.0,0.997859,0.065403,0.584618,0.104000,-0.233568,0.044143,0.008195,0.016928,0.997859,0.063175,0.599367,0.093750,-0.235764,-0.064439,0.008484,0.0,-0.991446,0.130517,0.945924,0.750970,-0.237960,-0.064439,0.008195,-0.033780,-0.991446,0.126069,0.150026,0.753410,-0.235764,-0.062781,0.016822,0.0,-0.965931,0.258801,0.135537,0.716790,-0.237960,-0.064439,0.008195,-0.033780,-0.991446,0.126069,0.135740,0.716300,-0.235764,-0.064439,0.008484,0.0,-0.991446,0.130517,0.916785,0.714350,-0.240118,-0.062781,0.016249,-0.066983,-0.965931,0.249983,0.150026,0.753410,-0.242202,-0.060048,0.024025,-0.099040,-0.923890,0.369620,0.135537,0.716790,-0.235764,-0.062781,0.016822,0.0,-0.965931,0.258801,0.892527,0.677730,-0.235764,-0.060048,0.024873,0.0,-0.923890,0.382659,0.116170,0.680170,-0.240118,-0.062781,0.016249,-0.066983,-0.965931,0.249983,0.116210,0.679680,-0.235764,-0.056288,0.032498,0.0,-0.866041,0.499972,0.093750,0.655445,-0.242202,-0.060048,0.024025,-0.099040,-0.923890,0.369620,0.919384,0.677281,-0.235764,-0.060048,0.024873,0.0,-0.923890,0.382659,0.894530,0.652861,-0.244175,-0.056288,0.031390,-0.129402,-0.866041,0.482936,0.116170,0.680170,-0.246005,-0.051564,0.038219,-0.157552,-0.793375,0.587991,0.093750,0.655445,-0.235764,-0.056288,0.032498,0.0,-0.866041,0.499972,0.858184,0.616690,-0.235764,-0.051564,0.039567,0.0,-0.793375,0.608733,0.076940,0.619140,-0.244175,-0.056288,0.031390,-0.129402,-0.866041,0.482936,0.077140,0.618650,-0.235764,-0.045959,0.045959,-0.000000,-0.707133,0.707081,0.057569,0.582520,-0.246005,-0.051564,0.038219,-0.157552,-0.793375,0.587991,0.057610,0.582030,-0.235764,-0.051564,0.039567,0.0,-0.793375,0.608733,0.833931,0.580070,-0.247659,-0.045959,0.044393,-0.183006,-0.707133,0.682988,0.076940,0.619140,-0.235764,-0.039567,0.051564,0.000000,-0.608790,0.793332,0.860350,0.580070,-0.247659,-0.045959,0.044393,-0.183006,-0.707133,0.682988,0.860790,0.579590,-0.235764,-0.045959,0.045959,-0.000000,-0.707133,0.707081,0.760497,0.555660,-0.249110,-0.039567,0.049807,-0.205329,-0.608790,0.766300,0.057569,0.582520,-0.235764,-0.032498,0.056288,-0.000000,-0.500027,0.866010,0.018344,0.521480,-0.249110,-0.039567,0.049807,-0.205329,-0.608790,0.766300,0.018550,0.520990,-0.235764,-0.039567,0.051564,0.000000,-0.608790,0.793332,0.799587,0.519040,-0.250332,-0.032498,0.054370,-0.224140,-0.500027,0.836501,0.035150,0.557780,-0.235764,-0.024873,0.060048,0.0,-0.382707,0.923870,0.194330,0.484419,-0.250332,-0.032498,0.054370,-0.224140,-0.500027,0.836501,0.821556,0.518550,-0.235764,-0.032498,0.056288,-0.000000,-0.500027,0.866010,0.775341,0.482420,-0.251306,-0.024873,0.058002,-0.239115,-0.382707,0.892390,0.018344,0.521480,-0.235764,-0.016822,0.062781,0.000000,-0.258837,0.965921,0.801750,0.482420,-0.251306,-0.024873,0.058002,-0.239115,-0.382707,0.892390,0.802190,0.481930,-0.235764,-0.024873,0.060048,0.0,-0.382707,0.923870,0.801750,0.481947,-0.252013,-0.016822,0.060642,-0.249999,-0.258837,0.933008,0.194330,0.484419,-0.235764,-0.008484,0.064439,-0.000000,-0.130536,0.991444,0.162527,0.423340,-0.252013,-0.016822,0.060642,-0.249999,-0.258837,0.933008,0.763180,0.420912,-0.235764,-0.016822,0.062781,0.000000,-0.258837,0.965921,0.762970,0.420890,-0.252442,-0.008484,0.062244,-0.256604,-0.130536,0.957661,0.763180,0.421380,-0.235764,0.000000,0.064995,0.0,0.0,1.0,0.762690,0.421380,-0.252442,-0.008484,0.062244,-0.256604,-0.130536,0.957661,0.762970,0.420890,-0.235764,-0.008484,0.064439,-0.000000,-0.130536,0.991444,0.762690,0.420905,-0.252586,0.000000,0.062781,-0.258819,0.0,0.965926,0.162527,0.423340,-0.252442,0.008484,0.062244,-0.256604,0.130536,0.957661,0.743598,0.384760,-0.235764,0.000000,0.064995,0.0,0.0,1.0,0.743160,0.384288,-0.235764,0.008484,0.064439,-0.000000,0.130536,0.991444,0.743160,0.384760,-0.252586,0.000000,0.062781,-0.258819,0.0,0.965926,0.743606,0.384270,-0.252013,0.016822,0.060642,-0.249999,0.258837,0.933008,0.704590,0.323730,-0.235764,0.008484,0.064439,-0.000000,0.130536,0.991444,0.704391,0.323240,-0.235764,0.016822,0.062781,0.000000,0.258837,0.965921,0.938756,0.323240,-0.252442,0.008484,0.062244,-0.256604,0.130536,0.957661,0.704590,0.323256,-0.251306,0.024873,0.058002,-0.239115,0.382707,0.892390,0.938756,0.323240,-0.235764,0.016822,0.062781,0.000000,0.258837,0.965921,0.704100,0.323266,-0.235764,0.024873,0.060048,0.0,0.382707,0.923870,0.704100,0.323730,-0.252013,0.016822,0.060642,-0.249999,0.258837,0.933008,0.704391,0.323240,-0.250332,0.032498,0.054370,-0.224140,0.500027,0.836501,0.684586,0.287100,-0.235764,0.024873,0.060048,0.0,0.382707,0.923870,0.684570,0.286650,-0.235764,0.032498,0.056288,-0.000000,0.500027,0.866010,0.662590,0.262690,-0.251306,0.024873,0.058002,-0.239115,0.382707,0.892390,0.685020,0.286620,-0.249110,0.039567,0.049807,-0.205329,0.608790,0.766300,0.857910,0.262370,-0.235764,0.032498,0.056288,-0.000000,0.500027,0.866010,0.645500,0.225599,-0.235764,0.039567,0.051564,0.000000,0.608789,0.793332,0.848430,0.226070,-0.250332,0.032498,0.054370,-0.224140,0.500027,0.836501,0.660288,0.262218,-0.247659,0.045959,0.044393,-0.183006,0.707133,0.682988,0.848430,0.226070,-0.235764,0.039567,0.051564,0.000000,0.608789,0.793332,0.655270,0.225580,-0.235764,0.045959,0.045959,-0.000000,0.707133,0.707081,0.824181,0.189450,-0.249110,0.039567,0.049807,-0.205329,0.608790,0.766300,0.645808,0.225599,-0.247659,0.045959,0.044393,-0.183006,0.707133,0.682988,0.626460,0.188982,-0.235764,0.051564,0.039567,0.0,0.793375,0.608733,0.604000,0.165030,-0.246005,0.051564,0.038219,-0.157552,0.793375,0.587991,0.625970,0.189450,-0.235764,0.045959,0.045959,-0.000000,0.707133,0.707081,0.625970,0.189013,-0.246005,0.051564,0.038219,-0.157552,0.793375,0.587991,0.601725,0.164574,-0.235764,0.056288,0.032498,-0.000000,0.934410,0.356200,0.604000,0.165030,-0.244175,0.056288,0.031390,-0.092191,0.934410,0.344063,0.799310,0.164719,-0.235764,0.051564,0.039567,0.0,0.793375,0.608733,0.604000,0.164550,-0.244175,0.056288,0.031390,-0.092191,0.934410,0.344063,0.589794,0.127930,-0.235764,0.056288,0.032498,-0.000000,0.934410,0.356200,0.589350,0.128166,-0.242202,0.057362,0.024025,-0.020823,0.996758,0.077714,0.589350,0.128410,-0.235764,0.057362,0.024873,0.000000,0.996758,0.080456,0.584470,0.116210,-0.242202,0.057362,0.024025,-0.020823,0.996758,0.077714,0.582272,0.115957,-0.235764,0.057553,0.015836,0.0,0.958416,-0.285374,0.762982,0.116210,-0.239863,0.057553,0.015296,0.073860,0.958416,-0.275650,0.777537,0.116210,-0.235764,0.057362,0.024873,0.000000,0.996758,0.080456,0.577465,0.116210,-0.237960,0.044143,0.008195,0.243794,0.335759,-0.909852,0.743581,0.104000,-0.235764,0.055220,0.012432,0.0,0.610717,-0.791849,0.584618,0.104000,-0.235764,0.044143,0.008484,0.0,0.335759,-0.941948,0.740852,0.104000,-0.238982,0.055220,0.012009,0.204946,0.610717,-0.764867,0.584960,0.103833,-0.237960,0.044143,0.008195,-0.016928,0.997859,0.063175,0.740852,0.104000,-0.235764,0.044143,0.008484,0.0,0.997859,0.065403,0.777484,0.103510,-0.240006,-0.064439,0.007347,-0.065258,-0.991446,0.113031,0.374632,0.753410,-0.244175,-0.062781,0.014568,-0.129401,-0.965931,0.224128,0.374632,0.753410,-0.240006,-0.064439,0.007347,-0.065258,-0.991446,0.113031,0.338370,0.716300,-0.237960,-0.064439,0.008195,-0.033780,-0.991446,0.126069,0.135537,0.716790,-0.240118,-0.062781,0.016249,-0.066983,-0.965931,0.249983,0.340611,0.716790,-0.248200,-0.060048,0.021540,-0.191330,-0.923890,0.331393,0.340611,0.716790,-0.244175,-0.062781,0.014568,-0.129401,-0.965931,0.224128,0.313960,0.679680,-0.240118,-0.062781,0.016249,-0.066983,-0.965931,0.249983,0.116170,0.680170,-0.242202,-0.060048,0.024025,-0.099040,-0.923890,0.369620,0.321233,0.680170,-0.248200,-0.060048,0.021540,-0.191330,-0.923890,0.331393,0.118602,0.679859,-0.244175,-0.056288,0.031390,-0.129402,-0.866041,0.482936,0.316024,0.655760,-0.252013,-0.056288,0.028144,-0.249986,-0.866041,0.432989,0.321233,0.680170,-0.242202,-0.060048,0.024025,-0.099040,-0.923890,0.369620,0.093750,0.655445,-0.244175,-0.056288,0.031390,-0.129402,-0.866041,0.482936,0.076940,0.619140,-0.255547,-0.051564,0.034266,-0.304367,-0.793375,0.527178,0.316024,0.655760,-0.252013,-0.056288,0.028144,-0.249986,-0.866041,0.432989,0.279780,0.618650,-0.246005,-0.051564,0.038219,-0.157552,-0.793375,0.587991,0.282005,0.619140,-0.255547,-0.051564,0.034266,-0.304367,-0.793375,0.527178,0.255370,0.582030,-0.247659,-0.045959,0.044393,-0.183006,-0.707133,0.682988,0.255338,0.582520,-0.258743,-0.045959,0.039801,-0.353540,-0.707133,0.612350,0.282005,0.619140,-0.246005,-0.051564,0.038219,-0.157552,-0.793375,0.587991,0.057569,0.582520,-0.258743,-0.045959,0.039801,-0.353540,-0.707133,0.612350,0.262658,0.582030,-0.249110,-0.039567,0.049807,-0.205329,-0.608790,0.766300,0.262200,0.582350,-0.261546,-0.039567,0.044656,-0.396666,-0.608790,0.687045,0.262690,0.582350,-0.247659,-0.045959,0.044393,-0.183006,-0.707133,0.682988,0.035150,0.557780,-0.250332,-0.032498,0.054370,-0.224140,-0.500027,0.836501,0.223415,0.521480,-0.261546,-0.039567,0.044656,-0.396666,-0.608790,0.687045,0.221190,0.520990,-0.249110,-0.039567,0.049807,-0.205329,-0.608790,0.766300,0.018344,0.521480,-0.263908,-0.032498,0.048747,-0.433005,-0.500027,0.749986,0.257320,0.557931,-0.251306,-0.024873,0.058002,-0.239115,-0.382707,0.892390,0.194314,0.484860,-0.263908,-0.032498,0.048747,-0.433005,-0.500027,0.749986,0.194330,0.484419,-0.250332,-0.032498,0.054370,-0.224140,-0.500027,0.836501,0.001410,0.484860,-0.265788,-0.024873,0.052003,-0.461935,-0.382707,0.800095,0.223415,0.521480,-0.252013,-0.016822,0.060642,-0.249999,-0.258837,0.933008,0.203610,0.484692,-0.265788,-0.024873,0.052003,-0.461935,-0.382707,0.800095,0.204063,0.484370,-0.251306,-0.024873,0.058002,-0.239115,-0.382707,0.892390,0.975090,0.457686,-0.267154,-0.016822,0.054370,-0.482960,-0.258837,0.836512,0.204100,0.484692,-0.252442,-0.008484,0.062244,-0.256604,-0.130536,0.957661,0.162385,0.423820,-0.267154,-0.016822,0.054370,-0.482960,-0.258837,0.836512,0.162590,0.423340,-0.252013,-0.016822,0.060642,-0.249999,-0.258837,0.933008,0.965330,0.421059,-0.267984,-0.008484,0.055806,-0.495722,-0.130536,0.858615,0.198730,0.460275,-0.252586,0.000000,0.062781,-0.258819,0.0,0.965926,0.164550,0.423656,-0.267984,-0.008484,0.055806,-0.495722,-0.130536,0.858615,0.164829,0.423340,-0.252442,-0.008484,0.062244,-0.256604,-0.130536,0.957661,0.941356,0.384760,-0.268262,0.000000,0.056288,-0.500000,0.0,0.866025,0.164824,0.423820,-0.267984,0.008484,0.055806,-0.495722,0.130536,0.858615,0.145500,0.387032,-0.252586,0.000000,0.062781,-0.258819,0.0,0.965926,0.916500,0.360029,-0.252442,0.008484,0.062244,-0.256604,0.130536,0.957661,0.145020,0.387031,-0.268262,0.000000,0.056288,-0.500000,0.0,0.866025,0.145449,0.386710,-0.267154,0.016822,0.054370,-0.482961,0.258837,0.836512,0.140130,0.362622,-0.252442,0.008484,0.062244,-0.256604,0.130536,0.957661,0.906730,0.323409,-0.252013,0.016822,0.060642,-0.249999,0.258837,0.933008,0.106236,0.326170,-0.267984,0.008484,0.055806,-0.495722,0.130536,0.858615,0.938960,0.323240,-0.265788,0.024873,0.052003,-0.461935,0.382707,0.800095,0.106236,0.326170,-0.252013,0.016822,0.060642,-0.249999,0.258837,0.933008,0.882766,0.287100,-0.251306,0.024873,0.058002,-0.239115,0.382707,0.892390,0.945800,0.323730,-0.267154,0.016822,0.054370,-0.482961,0.258837,0.836512,0.907022,0.323409,-0.263908,0.032498,0.048747,-0.433005,0.500027,0.749986,0.086910,0.289381,-0.251306,0.024873,0.058002,-0.239115,0.382707,0.892390,0.857910,0.262370,-0.250332,0.032498,0.054370,-0.224140,0.500027,0.836501,0.086420,0.289377,-0.265788,0.024873,0.052003,-0.461935,0.382707,0.800095,0.086423,0.289060,-0.261546,0.039567,0.044656,-0.396666,0.608790,0.687045,0.081540,0.264961,-0.250332,0.032498,0.054370,-0.224140,0.500027,0.836501,0.848430,0.226070,-0.249110,0.039567,0.049807,-0.205329,0.608790,0.766300,0.047659,0.228510,-0.263908,0.032498,0.048747,-0.433005,0.500027,0.749986,0.858047,0.262369,-0.258743,0.045959,0.039801,-0.353540,0.707133,0.612350,0.047659,0.228510,-0.249110,0.039567,0.049807,-0.205329,0.608790,0.766300,0.824181,0.189450,-0.247659,0.045959,0.044393,-0.183006,0.707133,0.682988,0.879880,0.226070,-0.261546,0.039567,0.044656,-0.396666,0.608790,0.687045,0.848449,0.225750,-0.258743,0.045959,0.039801,-0.353540,0.707133,0.612350,0.027830,0.191400,-0.247659,0.045959,0.044393,-0.183006,0.707133,0.682988,0.799310,0.164719,-0.255547,0.051564,0.034266,-0.304367,0.793375,0.527178,0.028320,0.191720,-0.246005,0.051564,0.038219,-0.157552,0.793375,0.587991,0.027830,0.191710,-0.255547,0.051564,0.034266,-0.304367,0.793375,0.527178,0.799473,0.164717,-0.244175,0.056288,0.031390,-0.092191,0.934410,0.344063,0.013180,0.142586,-0.252013,0.056288,0.028144,-0.178100,0.934410,0.308479,0.023108,0.167480,-0.246005,0.051564,0.038219,-0.157552,0.793375,0.587991,0.826170,0.164550,-0.252013,0.056288,0.028144,-0.178100,0.934410,0.308479,0.787590,0.128063,-0.242202,0.057362,0.024025,-0.020823,0.996758,0.077714,0.787100,0.128410,-0.248200,0.057362,0.021540,-0.040228,0.996758,0.069677,0.787100,0.128410,-0.244175,0.056288,0.031390,-0.092191,0.934410,0.344063,0.787100,0.128044,-0.248200,0.057362,0.021540,-0.040228,0.996758,0.069677,0.997550,0.115720,-0.239863,0.057553,0.015296,0.073860,0.958416,-0.275650,0.997461,0.116210,-0.243682,0.057553,0.013714,0.142687,0.958416,-0.247141,0.985153,0.116210,-0.242202,0.057362,0.024025,-0.020823,0.996758,0.077714,0.762982,0.116210,-0.240006,0.044143,0.007347,0.470974,0.335759,-0.815751,0.997096,0.116210,-0.238982,0.055220,0.012009,0.204946,0.610717,-0.764867,0.770148,0.103510,-0.237960,0.044143,0.008195,0.243794,0.335759,-0.909852,0.975304,0.104000,-0.241980,0.055220,0.010767,0.395924,0.610717,-0.685761,0.743581,0.104000,-0.240006,0.044143,0.007347,-0.032702,0.997859,0.056641,0.975304,0.104000,-0.237960,0.044143,0.008195,-0.016928,0.997859,0.063175,0.584470,0.093750,-0.241763,-0.064439,0.005999,-0.092289,-0.991446,0.092289,0.572385,0.753410,-0.241763,-0.064439,0.005999,-0.092289,-0.991446,0.092289,0.536130,0.716300,-0.244175,-0.062781,0.014568,-0.129401,-0.965931,0.224128,0.543243,0.716790,-0.247659,-0.062781,0.011895,-0.183000,-0.965931,0.183000,0.572385,0.753410,-0.240006,-0.064439,0.007347,-0.065258,-0.991446,0.113031,0.340611,0.716790,-0.253352,-0.060048,0.017588,-0.270581,-0.923890,0.270581,0.543243,0.716790,-0.247659,-0.062781,0.011895,-0.183000,-0.965931,0.183000,0.516600,0.679680,-0.244175,-0.062781,0.014568,-0.129401,-0.965931,0.224128,0.321233,0.680170,-0.248200,-0.060048,0.021540,-0.191330,-0.923890,0.331393,0.518994,0.680170,-0.258743,-0.056288,0.022979,-0.353534,-0.866041,0.353534,0.518994,0.680170,-0.253352,-0.060048,0.017588,-0.270581,-0.923890,0.270581,0.321232,0.679996,-0.248200,-0.060048,0.021540,-0.191330,-0.923890,0.331393,0.316024,0.655760,-0.252013,-0.056288,0.028144,-0.249986,-0.866041,0.432989,0.513786,0.655760,-0.258743,-0.056288,0.022979,-0.353534,-0.866041,0.353534,0.477530,0.618650,-0.252013,-0.056288,0.028144,-0.249986,-0.866041,0.432989,0.282005,0.619140,-0.263742,-0.051564,0.027978,-0.430439,-0.793375,0.430439,0.513786,0.655760,-0.255547,-0.051564,0.034266,-0.304367,-0.793375,0.527178,0.477349,0.619140,-0.263742,-0.051564,0.027978,-0.430439,-0.793375,0.430439,0.484676,0.618650,-0.258743,-0.045959,0.039801,-0.353540,-0.707133,0.612350,0.484370,0.619117,-0.268262,-0.045959,0.032498,-0.499982,-0.707133,0.499982,0.484647,0.619140,-0.255547,-0.051564,0.034266,-0.304367,-0.793375,0.527178,0.255338,0.582520,-0.268262,-0.045959,0.032498,-0.499982,-0.707133,0.499982,0.460419,0.582030,-0.258743,-0.045959,0.039801,-0.353540,-0.707133,0.612350,0.257320,0.557931,-0.272226,-0.039567,0.036462,-0.560970,-0.608790,0.560970,0.460391,0.582520,-0.261546,-0.039567,0.044656,-0.396666,-0.608790,0.687045,0.459960,0.582500,-0.272226,-0.039567,0.036462,-0.560970,-0.608790,0.560970,0.418940,0.520990,-0.263908,-0.032498,0.048747,-0.433005,-0.500027,0.749986,0.418751,0.521480,-0.275565,-0.032498,0.039801,-0.612361,-0.500027,0.612361,0.455181,0.558100,-0.261546,-0.039567,0.044656,-0.396666,-0.608790,0.687045,0.223415,0.521480,-0.275565,-0.032498,0.039801,-0.612361,-0.500027,0.612361,0.426081,0.520990,-0.265788,-0.024873,0.052003,-0.461935,-0.382707,0.800095,0.425780,0.521463,-0.278224,-0.024873,0.042460,-0.653275,-0.382707,0.653275,0.426056,0.521480,-0.263908,-0.032498,0.048747,-0.433005,-0.500027,0.749986,0.194314,0.484860,-0.267154,-0.016822,0.054370,-0.482960,-0.258837,0.836512,0.401360,0.484845,-0.278224,-0.024873,0.042460,-0.653275,-0.382707,0.653275,0.401821,0.484370,-0.265788,-0.024873,0.052003,-0.461935,-0.382707,0.800095,0.198730,0.460275,-0.280157,-0.016822,0.044393,-0.683009,-0.258837,0.683009,0.401800,0.484860,-0.267984,-0.008484,0.055806,-0.495722,-0.130536,0.858615,0.367460,0.423820,-0.280157,-0.016822,0.044393,-0.683009,-0.258837,0.683009,0.367670,0.423340,-0.267154,-0.016822,0.054370,-0.482960,-0.258837,0.836512,0.162385,0.423820,-0.281330,-0.008484,0.045566,-0.701057,-0.130536,0.701057,0.396595,0.460440,-0.268262,0.000000,0.056288,-0.500000,0.0,0.866025,0.367180,0.423806,-0.281330,-0.008484,0.045566,-0.701057,-0.130536,0.701057,0.367617,0.423340,-0.267984,-0.008484,0.055806,-0.495722,-0.130536,0.858615,0.367180,0.423340,-0.281723,0.000000,0.045959,-0.707107,0.0,0.707107,0.367460,0.423820,-0.281330,0.008484,0.045566,-0.701057,0.130536,0.701057,0.343216,0.387200,-0.268262,0.000000,0.056288,-0.500000,0.0,0.866025,0.140130,0.362622,-0.267984,0.008484,0.055806,-0.495722,0.130536,0.858615,0.342770,0.387183,-0.281723,0.000000,0.045959,-0.707107,0.0,0.707107,0.343208,0.386710,-0.280157,0.016822,0.044393,-0.683009,0.258837,0.683009,0.338010,0.362790,-0.267984,0.008484,0.055806,-0.495722,0.130536,0.858615,0.106236,0.326170,-0.267154,0.016822,0.054370,-0.482961,0.258837,0.836512,0.308881,0.326170,-0.281330,0.008484,0.045566,-0.701057,0.130536,0.701057,0.309080,0.325680,-0.278224,0.024873,0.042460,-0.653274,0.382707,0.653275,0.308881,0.326170,-0.267154,0.016822,0.054370,-0.482961,0.258837,0.836512,0.308590,0.325680,-0.265788,0.024873,0.052003,-0.461935,0.382707,0.800095,0.308590,0.326145,-0.280157,0.016822,0.044393,-0.683009,0.258837,0.683009,0.308590,0.325680,-0.275565,0.032498,0.039801,-0.612361,0.500027,0.612361,0.284630,0.289550,-0.265788,0.024873,0.052003,-0.461935,0.382707,0.800095,0.081540,0.264961,-0.263908,0.032498,0.048747,-0.433005,0.500027,0.749986,0.284180,0.289520,-0.278224,0.024873,0.042460,-0.653274,0.382707,0.653275,0.284196,0.289060,-0.272226,0.039567,0.036462,-0.560970,0.608790,0.560970,0.279427,0.265130,-0.263908,0.032498,0.048747,-0.433005,0.500027,0.749986,0.047659,0.228510,-0.261546,0.039567,0.044656,-0.396666,0.608790,0.687045,0.250301,0.228510,-0.275565,0.032498,0.039801,-0.612361,0.500027,0.612361,0.081679,0.264961,-0.272226,0.039567,0.036462,-0.560970,0.608790,0.560970,0.047670,0.228340,-0.258743,0.045959,0.039801,-0.353540,0.707133,0.612350,0.083980,0.228510,-0.268262,0.045959,0.032498,-0.499982,0.707133,0.499982,0.250301,0.228510,-0.261546,0.039567,0.044656,-0.396666,0.608790,0.687045,0.083980,0.228020,-0.258743,0.045959,0.039801,-0.353540,0.707133,0.612350,0.023108,0.167480,-0.263742,0.051564,0.027978,-0.430439,0.793375,0.430439,0.226070,0.191870,-0.268262,0.045959,0.032498,-0.499982,0.707133,0.499982,0.225580,0.191400,-0.255547,0.051564,0.034266,-0.304367,0.793375,0.527178,0.225580,0.191818,-0.263742,0.051564,0.027978,-0.430439,0.793375,0.430439,0.023118,0.167308,-0.252013,0.056288,0.028144,-0.178100,0.934410,0.308479,0.189418,0.130850,-0.258743,0.056288,0.022979,-0.251872,0.934410,0.251872,0.220925,0.167480,-0.255547,0.051564,0.034266,-0.304367,0.793375,0.527178,0.013180,0.142586,-0.258743,0.056288,0.022979,-0.251872,0.934410,0.251872,0.992670,0.127946,-0.248200,0.057362,0.021540,-0.040228,0.996758,0.069677,0.992180,0.128410,-0.253352,0.057362,0.017588,-0.056891,0.996758,0.056891,0.992180,0.128410,-0.252013,0.056288,0.028144,-0.178100,0.934410,0.308479,0.985153,0.116210,-0.246962,0.057553,0.011198,0.201790,0.958416,-0.201790,0.181976,0.118650,-0.253352,0.057362,0.017588,-0.056891,0.996758,0.056891,0.181640,0.118160,-0.248200,0.057362,0.021540,-0.040228,0.996758,0.069677,0.001348,0.118650,-0.243682,0.057553,0.013714,0.142687,0.958416,-0.247141,0.181640,0.118457,-0.241763,0.044143,0.005999,0.666058,0.335759,-0.666058,0.193907,0.118650,-0.241980,0.055220,0.010767,0.395924,0.610717,-0.685761,0.975304,0.104000,-0.240006,0.044143,0.007347,0.470974,0.335759,-0.815751,0.201425,0.105950,-0.244555,0.055220,0.008791,0.559922,0.610717,-0.559922,0.997096,0.116210,-0.241763,0.044143,0.005999,-0.046247,0.997859,0.046247,0.201425,0.105950,-0.240006,0.044143,0.007347,-0.032702,0.997859,0.056641,0.977744,0.103587,-0.243111,-0.064439,0.004242,-0.113031,-0.991446,0.065258,0.777470,0.753410,-0.250332,-0.062781,0.008411,-0.224128,-0.965931,0.129401,0.777470,0.753410,-0.243111,-0.064439,0.004242,-0.113031,-0.991446,0.065258,0.760740,0.716300,-0.241763,-0.064439,0.005999,-0.092289,-0.991446,0.092289,0.543243,0.716790,-0.247659,-0.062781,0.011895,-0.183000,-0.965931,0.183000,0.760540,0.716790,-0.257304,-0.060048,0.012436,-0.331393,-0.923890,0.191330,0.760540,0.716790,-0.250332,-0.062781,0.008411,-0.224128,-0.965931,0.129401,0.741210,0.679680,-0.247659,-0.062781,0.011895,-0.183000,-0.965931,0.183000,0.518994,0.680170,-0.253352,-0.060048,0.017588,-0.270581,-0.923890,0.270581,0.741173,0.680170,-0.257304,-0.060048,0.012436,-0.331393,-0.923890,0.191330,0.667960,0.655270,-0.258743,-0.056288,0.022979,-0.353534,-0.866041,0.353534,0.718750,0.655387,-0.263908,-0.056288,0.016249,-0.432989,-0.866041,0.249986,0.741173,0.680170,-0.253352,-0.060048,0.017588,-0.270581,-0.923890,0.270581,0.513786,0.655760,-0.263908,-0.056288,0.016249,-0.432989,-0.866041,0.249986,0.702140,0.618650,-0.258743,-0.056288,0.022979,-0.353534,-0.866041,0.353534,0.477349,0.619140,-0.270030,-0.051564,0.019783,-0.527178,-0.793375,0.304367,0.718750,0.655387,-0.263742,-0.051564,0.027978,-0.430439,-0.793375,0.430439,0.701943,0.619140,-0.270030,-0.051564,0.019783,-0.527178,-0.793375,0.304367,0.682610,0.582030,-0.268262,-0.045959,0.032498,-0.499982,-0.707133,0.499982,0.682572,0.582520,-0.275565,-0.045959,0.022979,-0.612350,-0.707133,0.353540,0.701943,0.619140,-0.263742,-0.051564,0.027978,-0.430439,-0.793375,0.430439,0.682610,0.582030,-0.275565,-0.045959,0.022979,-0.612350,-0.707133,0.353540,0.609370,0.557610,-0.268262,-0.045959,0.032498,-0.499982,-0.707133,0.499982,0.455181,0.558100,-0.280420,-0.039567,0.025782,-0.687046,-0.608790,0.396666,0.682572,0.582520,-0.272226,-0.039567,0.036462,-0.560970,-0.608790,0.560970,0.660150,0.557744,-0.275565,-0.032498,0.039801,-0.612361,-0.500027,0.612361,0.643346,0.521480,-0.284511,-0.032498,0.028144,-0.749986,-0.500027,0.433005,0.660150,0.557744,-0.272226,-0.039567,0.036462,-0.560970,-0.608790,0.560970,0.418751,0.521480,-0.280420,-0.039567,0.025782,-0.687046,-0.608790,0.396666,0.643550,0.520990,-0.278224,-0.024873,0.042460,-0.653275,-0.382707,0.653275,0.623978,0.484860,-0.287767,-0.024873,0.030024,-0.800095,-0.382707,0.461935,0.643346,0.521480,-0.275565,-0.032498,0.039801,-0.612361,-0.500027,0.612361,0.624020,0.484370,-0.284511,-0.032498,0.028144,-0.749986,-0.500027,0.433005,0.624020,0.484370,-0.280157,-0.016822,0.044393,-0.683009,-0.258837,0.683009,0.601560,0.460096,-0.290134,-0.016822,0.031390,-0.836512,-0.258837,0.482961,0.623978,0.484860,-0.278224,-0.024873,0.042460,-0.653275,-0.382707,0.653275,0.396595,0.460440,-0.287767,-0.024873,0.030024,-0.800095,-0.382707,0.461935,0.401800,0.484845,-0.281330,-0.008484,0.045566,-0.701057,-0.130536,0.701057,0.584753,0.423820,-0.291570,-0.008484,0.032220,-0.858615,-0.130536,0.495722,0.601560,0.460096,-0.280157,-0.016822,0.044393,-0.683009,-0.258837,0.683009,0.584903,0.423340,-0.290134,-0.016822,0.031390,-0.836512,-0.258837,0.482961,0.584960,0.423340,-0.281723,0.000000,0.045959,-0.707107,0.0,0.707107,0.591790,0.423476,-0.292052,0.000000,0.032498,-0.866025,0.0,0.500000,0.592071,0.423340,-0.281330,-0.008484,0.045566,-0.701057,-0.130536,0.701057,0.591790,0.423340,-0.291570,-0.008484,0.032220,-0.858615,-0.130536,0.495722,0.592073,0.423340,-0.281330,0.008484,0.045566,-0.701057,0.130536,0.701057,0.567380,0.386850,-0.292052,0.000000,0.032498,-0.866025,0.0,0.500000,0.567818,0.386710,-0.281723,0.000000,0.045959,-0.707107,0.0,0.707107,0.338010,0.362790,-0.291570,0.008484,0.032220,-0.858615,0.130536,0.495722,0.567870,0.386850,-0.280157,0.016822,0.044393,-0.683009,0.258837,0.683009,0.347715,0.326170,-0.291570,0.008484,0.032220,-0.858615,0.130536,0.495722,0.338011,0.362775,-0.281330,0.008484,0.045566,-0.701057,0.130536,0.701057,0.345210,0.362300,-0.290134,0.016822,0.031390,-0.836512,0.258837,0.482961,0.542960,0.362439,-0.278224,0.024873,0.042460,-0.653274,0.382707,0.653275,0.347650,0.326170,-0.290134,0.016822,0.031390,-0.836512,0.258837,0.482961,0.308881,0.326155,-0.280157,0.016822,0.044393,-0.683009,0.258837,0.683009,0.347650,0.325680,-0.287767,0.024873,0.030024,-0.800095,0.382707,0.461935,0.347715,0.326170,-0.275565,0.032498,0.039801,-0.612361,0.500027,0.612361,0.508780,0.289203,-0.287767,0.024873,0.030024,-0.800095,0.382707,0.461935,0.508780,0.289060,-0.278224,0.024873,0.042460,-0.653274,0.382707,0.653275,0.279427,0.265130,-0.284511,0.032498,0.028144,-0.749986,0.500027,0.433005,0.509270,0.289198,-0.272226,0.039567,0.036462,-0.560970,0.608790,0.560970,0.474883,0.228510,-0.284511,0.032498,0.028144,-0.749986,0.500027,0.433005,0.279428,0.265113,-0.275565,0.032498,0.039801,-0.612361,0.500027,0.612361,0.250301,0.228510,-0.280420,0.039567,0.025782,-0.687046,0.608790,0.396666,0.484370,0.264776,-0.272226,0.039567,0.036462,-0.560970,0.608790,0.560970,0.281730,0.228020,-0.275565,0.045959,0.022979,-0.612350,0.707133,0.353540,0.474883,0.228510,-0.280420,0.039567,0.025782,-0.687046,0.608790,0.396666,0.250302,0.228491,-0.268262,0.045959,0.032498,-0.499982,0.707133,0.499982,0.281730,0.228510,-0.268262,0.045959,0.032498,-0.499982,0.707133,0.499982,0.220925,0.167480,-0.270030,0.051564,0.019783,-0.527178,0.793375,0.304367,0.423820,0.167480,-0.275565,0.045959,0.022979,-0.612350,0.707133,0.353540,0.423820,0.166990,-0.263742,0.051564,0.027978,-0.430439,0.793375,0.430439,0.423605,0.167480,-0.270030,0.051564,0.019783,-0.527178,0.793375,0.304367,0.220928,0.167432,-0.258743,0.056288,0.022979,-0.251872,0.934410,0.251872,0.413570,0.142627,-0.263908,0.056288,0.016249,-0.308479,0.934410,0.178100,0.423605,0.167480,-0.263742,0.051564,0.027978,-0.430439,0.793375,0.430439,0.189418,0.130850,-0.263908,0.056288,0.016249,-0.308479,0.934410,0.178100,0.413570,0.130370,-0.253352,0.057362,0.017588,-0.056891,0.996758,0.056891,0.413771,0.118650,-0.257304,0.057362,0.012436,-0.069677,0.996758,0.040228,0.414060,0.130414,-0.258743,0.056288,0.022979,-0.251872,0.934410,0.251872,0.413570,0.130370,-0.257304,0.057362,0.012436,-0.069677,0.996758,0.040228,0.181976,0.118594,-0.246962,0.057553,0.011198,0.201790,0.958416,-0.201790,0.469923,0.118650,-0.249479,0.057553,0.007918,0.247141,0.958416,-0.142687,0.413771,0.118650,-0.253352,0.057362,0.017588,-0.056891,0.996758,0.056891,0.194257,0.118650,-0.241763,0.044143,0.005999,0.666058,0.335759,-0.666058,0.516110,0.106193,-0.246531,0.055220,0.006216,0.685761,0.610717,-0.395924,0.193907,0.118650,-0.244555,0.055220,0.008791,0.559922,0.610717,-0.559922,0.201425,0.105950,-0.243111,0.044143,0.004242,0.815751,0.335759,-0.470974,0.487118,0.106440,-0.243111,0.044143,0.004242,-0.056641,0.997859,0.032702,0.519040,0.106149,-0.241763,0.044143,0.005999,-0.046247,0.997859,0.046247,0.518550,0.105950,-0.243111,-0.064439,0.004242,-0.113031,-0.991446,0.065258,0.775032,0.753410,-0.243959,-0.064439,0.002196,-0.126069,-0.991446,0.033780,0.972788,0.753410,-0.252013,-0.062781,0.004354,-0.249983,-0.965931,0.066983,0.972788,0.753410,-0.243959,-0.064439,0.002196,-0.126069,-0.991446,0.033780,0.963370,0.716300,-0.243111,-0.064439,0.004242,-0.113031,-0.991446,0.065258,0.760540,0.716790,-0.250332,-0.062781,0.008411,-0.224128,-0.965931,0.129401,0.963185,0.716790,-0.250332,-0.062781,0.008411,-0.224128,-0.965931,0.129401,0.741173,0.680170,-0.257304,-0.060048,0.012436,-0.331393,-0.923890,0.191330,0.946246,0.680170,-0.259789,-0.060048,0.006438,-0.369621,-0.923890,0.099040,0.963185,0.716790,-0.252013,-0.062781,0.004354,-0.249983,-0.965931,0.066983,0.938960,0.679680,-0.263908,-0.056288,0.016249,-0.432989,-0.866041,0.249986,0.743160,0.680170,-0.259789,-0.060048,0.006438,-0.369621,-0.923890,0.099040,0.743609,0.679680,-0.257304,-0.060048,0.012436,-0.331393,-0.923890,0.191330,0.667716,0.655760,-0.267154,-0.056288,0.008411,-0.482936,-0.866041,0.129402,0.938936,0.680170,-0.270030,-0.051564,0.019783,-0.527178,-0.793375,0.304367,0.907017,0.619140,-0.267154,-0.056288,0.008411,-0.482936,-0.866041,0.129402,0.904780,0.618650,-0.263908,-0.056288,0.016249,-0.432989,-0.866041,0.249986,0.701943,0.619140,-0.273983,-0.051564,0.010241,-0.587991,-0.793375,0.157552,0.941037,0.655760,-0.275565,-0.045959,0.022979,-0.612350,-0.707133,0.353540,0.887649,0.582520,-0.273983,-0.051564,0.010241,-0.587991,-0.793375,0.157552,0.880370,0.582114,-0.270030,-0.051564,0.019783,-0.527178,-0.793375,0.304367,0.682572,0.582520,-0.280157,-0.045959,0.011895,-0.682988,-0.707133,0.183006,0.907017,0.619140,-0.280420,-0.039567,0.025782,-0.687046,-0.608790,0.396666,0.684570,0.582520,-0.285571,-0.039567,0.013346,-0.766300,-0.608790,0.205329,0.880346,0.582520,-0.275565,-0.045959,0.022979,-0.612350,-0.707133,0.353540,0.609131,0.558100,-0.280157,-0.045959,0.011895,-0.682988,-0.707133,0.183006,0.685050,0.582160,-0.284511,-0.032498,0.028144,-0.749986,-0.500027,0.433005,0.848422,0.521480,-0.290134,-0.032498,0.014568,-0.836501,-0.500027,0.224140,0.882320,0.557898,-0.280420,-0.039567,0.025782,-0.687046,-0.608790,0.396666,0.643346,0.521480,-0.285571,-0.039567,0.013346,-0.766300,-0.608790,0.205329,0.846190,0.520990,-0.287767,-0.024873,0.030024,-0.800095,-0.382707,0.461935,0.829054,0.484860,-0.293766,-0.024873,0.015542,-0.892390,-0.382707,0.239115,0.848422,0.521480,-0.284511,-0.032498,0.028144,-0.749986,-0.500027,0.433005,0.623978,0.484860,-0.290134,-0.032498,0.014568,-0.836501,-0.500027,0.224140,0.819330,0.484527,-0.290134,-0.016822,0.031390,-0.836512,-0.258837,0.482961,0.625970,0.484860,-0.296406,-0.016822,0.016249,-0.933008,-0.258837,0.249999,0.819318,0.484860,-0.287767,-0.024873,0.030024,-0.800095,-0.382707,0.461935,0.625970,0.484508,-0.293766,-0.024873,0.015542,-0.892390,-0.382707,0.239115,0.626460,0.484507,-0.291570,-0.008484,0.032220,-0.858615,-0.130536,0.495722,0.789826,0.423820,-0.298008,-0.008484,0.016678,-0.957661,-0.130536,0.256604,0.823730,0.460249,-0.290134,-0.016822,0.031390,-0.836512,-0.258837,0.482961,0.584753,0.423820,-0.296406,-0.016822,0.016249,-0.933008,-0.258837,0.249999,0.787590,0.423340,-0.292052,0.000000,0.032498,-0.866025,0.0,0.500000,0.591790,0.423820,-0.298545,0.000000,0.016822,-0.965926,0.0,0.258819,0.787386,0.423820,-0.291570,-0.008484,0.032220,-0.858615,-0.130536,0.495722,0.591790,0.423476,-0.298008,-0.008484,0.016678,-0.957661,-0.130536,0.256604,0.592071,0.423340,-0.291570,0.008484,0.032220,-0.858615,0.130536,0.495722,0.567380,0.387200,-0.298545,0.000000,0.016822,-0.965926,0.0,0.258819,0.567870,0.386850,-0.292052,0.000000,0.032498,-0.866025,0.0,0.500000,0.567380,0.386850,-0.298008,0.008484,0.016678,-0.957661,0.130536,0.256605,0.567818,0.387200,-0.290134,0.016822,0.031390,-0.836512,0.258837,0.482961,0.533200,0.326170,-0.298008,0.008484,0.016678,-0.957661,0.130536,0.256605,0.533690,0.325819,-0.291570,0.008484,0.032220,-0.858615,0.130536,0.495722,0.533490,0.325680,-0.296406,0.016822,0.016249,-0.933008,0.258837,0.249999,0.533690,0.326170,-0.287767,0.024873,0.030024,-0.800095,0.382707,0.461935,0.533200,0.326170,-0.296406,0.016822,0.016249,-0.933008,0.258837,0.249999,0.533490,0.325680,-0.290134,0.016822,0.031390,-0.836512,0.258837,0.482961,0.533200,0.325823,-0.293766,0.024873,0.015542,-0.892390,0.382707,0.239115,0.533200,0.326170,-0.284511,0.032498,0.028144,-0.749986,0.500027,0.433005,0.511230,0.265130,-0.293766,0.024873,0.015542,-0.892390,0.382707,0.239115,0.509270,0.289198,-0.287767,0.024873,0.030024,-0.800095,0.382707,0.461935,0.508780,0.289203,-0.290134,0.032498,0.014568,-0.836501,0.500027,0.224140,0.508780,0.289550,-0.280420,0.039567,0.025782,-0.687046,0.608790,0.396666,0.672648,0.228510,-0.290134,0.032498,0.014568,-0.836501,0.500027,0.224140,0.484505,0.264776,-0.284511,0.032498,0.028144,-0.749986,0.500027,0.433005,0.474883,0.228510,-0.285571,0.039567,0.013346,-0.766300,0.608790,0.205329,0.706540,0.264932,-0.275565,0.045959,0.022979,-0.612350,0.707133,0.353540,0.653287,0.191890,-0.285571,0.039567,0.013346,-0.766300,0.608790,0.205329,0.474905,0.228153,-0.280420,0.039567,0.025782,-0.687046,0.608790,0.396666,0.484370,0.228020,-0.280157,0.045959,0.011895,-0.682988,0.707133,0.183006,0.672648,0.228510,-0.273983,0.051564,0.010241,-0.587991,0.793375,0.157552,0.450190,0.191890,-0.275565,0.045959,0.022979,-0.612350,0.707133,0.353540,0.423605,0.167480,-0.270030,0.051564,0.019783,-0.527178,0.793375,0.304367,0.452630,0.167480,-0.280157,0.045959,0.011895,-0.682988,0.707133,0.183006,0.450680,0.191530,-0.267154,0.056288,0.008411,-0.344063,0.934410,0.092191,0.648179,0.167480,-0.270030,0.051564,0.019783,-0.527178,0.793375,0.304367,0.413570,0.142627,-0.263908,0.056288,0.016249,-0.308479,0.934410,0.178100,0.616374,0.130850,-0.273983,0.051564,0.010241,-0.587991,0.793375,0.157552,0.426051,0.167121,-0.257304,0.057362,0.012436,-0.069677,0.996758,0.040228,0.614043,0.118650,-0.267154,0.056288,0.008411,-0.344063,0.934410,0.092191,0.414060,0.130414,-0.263908,0.056288,0.016249,-0.308479,0.934410,0.178100,0.413771,0.118650,-0.259789,0.057362,0.006438,-0.077714,0.996758,0.020823,0.616374,0.130850,-0.251061,0.057553,0.004099,0.275650,0.958416,-0.073860,0.614043,0.118650,-0.257304,0.057362,0.012436,-0.069677,0.996758,0.040228,0.469923,0.118650,-0.249479,0.057553,0.007918,0.247141,0.958416,-0.142687,0.633300,0.118295,-0.259789,0.057362,0.006438,-0.077714,0.996758,0.020823,0.413780,0.118565,-0.243111,0.044143,0.004242,0.815751,0.335759,-0.470974,0.638607,0.106440,-0.247773,0.055220,0.003218,0.764867,0.610717,-0.204946,0.487118,0.106440,-0.246531,0.055220,0.006216,0.685761,0.610717,-0.395924,0.516110,0.106193,-0.243959,0.044143,0.002196,0.909852,0.335759,-0.243794,0.640840,0.105950,-0.243959,0.044143,0.002196,-0.063175,0.997859,0.016928,0.638607,0.106440,-0.243111,0.044143,0.004242,-0.056641,0.997859,0.032702,0.516119,0.106149,-0.244248,-0.064439,0.000000,-0.130517,-0.991446,0.0,0.198872,0.755850,-0.252013,-0.062781,0.004354,-0.249983,-0.965931,0.066983,0.162414,0.719230,-0.244248,-0.064439,0.000000,-0.130517,-0.991446,0.0,0.162590,0.718750,-0.243959,-0.064439,0.002196,-0.126069,-0.991446,0.033780,0.963185,0.716790,-0.252586,-0.062781,0.000000,-0.258801,-0.965931,0.0,0.198872,0.755850,-0.259789,-0.060048,0.006438,-0.369621,-0.923890,0.099040,0.367670,0.682259,-0.252586,-0.062781,0.000000,-0.258801,-0.965931,0.0,0.169744,0.718750,-0.252013,-0.062781,0.004354,-0.249983,-0.965931,0.066983,0.946246,0.680170,-0.260637,-0.060048,0.000000,-0.382659,-0.923890,0.0,0.169733,0.719230,-0.267154,-0.056288,0.008411,-0.482936,-0.866041,0.129402,0.296813,0.657710,-0.260637,-0.060048,0.000000,-0.382659,-0.923890,0.0,0.145491,0.682120,-0.259789,-0.060048,0.006438,-0.369621,-0.923890,0.099040,0.941037,0.655760,-0.268262,-0.056288,0.000000,-0.499972,-0.866041,-0.000000,0.145500,0.682516,-0.273983,-0.051564,0.010241,-0.587991,-0.793375,0.157552,0.103830,0.621580,-0.275331,-0.051564,0.000000,-0.608733,-0.793375,-0.000000,0.140264,0.658200,-0.267154,-0.056288,0.008411,-0.482936,-0.866041,0.129402,0.907017,0.619140,-0.268262,-0.056288,0.000000,-0.499972,-0.866041,-0.000000,0.104000,0.621090,-0.280157,-0.045959,0.011895,-0.682988,-0.707133,0.183006,0.110840,0.621522,-0.275331,-0.051564,0.000000,-0.608733,-0.793375,-0.000000,0.111153,0.621090,-0.273983,-0.051564,0.010241,-0.587991,-0.793375,0.157552,0.887649,0.582520,-0.281723,-0.045959,0.000000,-0.707081,-0.707133,-0.000000,0.111128,0.621580,-0.285571,-0.039567,0.013346,-0.766300,-0.608790,0.205329,0.086420,0.584910,-0.287328,-0.039567,0.000000,-0.793332,-0.608790,0.000000,0.086910,0.584909,-0.280157,-0.045959,0.011895,-0.682988,-0.707133,0.183006,0.882320,0.557898,-0.281723,-0.045959,0.000000,-0.707081,-0.707133,-0.000000,0.086902,0.584470,-0.290134,-0.032498,0.014568,-0.836501,-0.500027,0.224140,0.045231,0.523920,-0.292052,-0.032498,0.000000,-0.866010,-0.500027,-0.000000,0.081664,0.560540,-0.285571,-0.039567,0.013346,-0.766300,-0.608790,0.205329,0.848422,0.521480,-0.287328,-0.039567,0.000000,-0.793332,-0.608790,0.000000,0.045410,0.523430,-0.293766,-0.024873,0.015542,-0.892390,-0.382707,0.239115,0.052240,0.523879,-0.295812,-0.024873,0.000000,-0.923870,-0.382707,0.0,0.052526,0.523920,-0.290134,-0.032498,0.014568,-0.836501,-0.500027,0.224140,0.829054,0.484860,-0.292052,-0.032498,0.000000,-0.866010,-0.500027,-0.000000,0.052551,0.523430,-0.296406,-0.016822,0.016249,-0.933008,-0.258837,0.249999,0.027830,0.487262,-0.298545,-0.016822,0.000000,-0.965921,-0.258837,0.000000,0.028278,0.487300,-0.293766,-0.024873,0.015542,-0.892390,-0.382707,0.239115,0.823730,0.460249,-0.295812,-0.024873,0.000000,-0.923870,-0.382707,0.0,0.028298,0.486810,-0.298008,-0.008484,0.016678,-0.957661,-0.130536,0.256604,0.992463,0.423820,-0.300203,-0.008484,0.000000,-0.991444,-0.130536,-0.000000,0.023060,0.462890,-0.296406,-0.016822,0.016249,-0.933008,-0.258837,0.249999,0.789826,0.423820,-0.298545,-0.016822,0.000000,-0.965921,-0.258837,0.000000,0.992670,0.423340,-0.298545,0.000000,0.016822,-0.965926,0.0,0.258819,0.992180,0.423785,-0.300760,0.000000,0.000000,-1.0,0.0,0.0,0.992463,0.423820,-0.298008,-0.008484,0.016678,-0.957661,-0.130536,0.256604,0.770457,0.387200,-0.300203,-0.008484,0.000000,-0.991444,-0.130536,-0.000000,0.992620,0.423340,-0.298008,0.008484,0.016678,-0.957661,0.130536,0.256605,0.967770,0.387162,-0.300760,0.000000,0.000000,-1.0,0.0,0.0,0.968208,0.386710,-0.298545,0.000000,0.016822,-0.965926,0.0,0.258819,0.765130,0.362596,-0.300203,0.008484,0.000000,-0.991444,0.130536,-0.000000,0.968216,0.387200,-0.296406,0.016822,0.016249,-0.933008,0.258837,0.249999,0.933875,0.326170,-0.300203,0.008484,0.000000,-0.991444,0.130536,-0.000000,0.934080,0.325680,-0.298008,0.008484,0.016678,-0.957661,0.130536,0.256605,0.731231,0.326170,-0.298545,0.016822,0.000000,-0.965921,0.258837,0.000000,0.963007,0.362790,-0.293766,0.024873,0.015542,-0.892390,0.382707,0.239115,0.933590,0.326122,-0.298545,0.016822,0.000000,-0.965921,0.258837,0.000000,0.933590,0.325680,-0.296406,0.016822,0.016249,-0.933008,0.258837,0.249999,0.711865,0.289550,-0.295812,0.024873,0.000000,-0.923870,0.382707,0.0,0.933875,0.326170,-0.290134,0.032498,0.014568,-0.836501,0.500027,0.224140,0.909180,0.289497,-0.295812,0.024873,0.000000,-0.923870,0.382707,0.0,0.909188,0.289060,-0.293766,0.024873,0.015542,-0.892390,0.382707,0.239115,0.706540,0.264932,-0.292052,0.032498,0.000000,-0.866010,0.500027,-0.000000,0.909622,0.289550,-0.285571,0.039567,0.013346,-0.766300,0.608790,0.205329,0.875286,0.228510,-0.292052,0.032498,0.000000,-0.866010,0.500027,-0.000000,0.706672,0.264931,-0.290134,0.032498,0.014568,-0.836501,0.500027,0.224140,0.672648,0.228510,-0.287328,0.039567,0.000000,-0.793332,0.608789,0.000000,0.904415,0.265130,-0.280157,0.045959,0.011895,-0.682988,0.707133,0.183006,0.708980,0.228510,-0.287328,0.039567,0.000000,-0.793332,0.608789,0.000000,0.672661,0.228307,-0.285571,0.039567,0.013346,-0.766300,0.608790,0.205329,0.653287,0.191890,-0.281723,0.045959,0.000000,-0.707081,0.707133,-0.000000,0.875286,0.228510,-0.275331,0.051564,0.000000,-0.608733,0.793375,-0.000000,0.851070,0.191839,-0.280157,0.045959,0.011895,-0.682988,0.707133,0.183006,0.648179,0.167480,-0.273983,0.051564,0.010241,-0.587991,0.793375,0.157552,0.853510,0.166995,-0.281723,0.045959,0.000000,-0.707081,0.707133,-0.000000,0.850580,0.191400,-0.268262,0.056288,0.000000,-0.356200,0.934410,-0.000000,0.846044,0.167480,-0.273983,0.051564,0.010241,-0.587991,0.793375,0.157552,0.616374,0.130850,-0.267154,0.056288,0.008411,-0.344063,0.934410,0.092191,0.811897,0.130850,-0.275331,0.051564,0.000000,-0.608733,0.793375,-0.000000,0.648197,0.167151,-0.259789,0.057362,0.006438,-0.077714,0.996758,0.020823,0.760653,0.118650,-0.268262,0.056288,0.000000,-0.356200,0.934410,-0.000000,0.616380,0.130698,-0.267154,0.056288,0.008411,-0.344063,0.934410,0.092191,0.614043,0.118650,-0.260637,0.057362,0.000000,-0.080456,0.996758,0.000000,0.811897,0.130850,-0.251600,0.057553,0.000000,0.285374,0.958416,0.0,0.760653,0.118650,-0.259789,0.057362,0.006438,-0.077714,0.996758,0.020823,0.633300,0.118295,-0.251061,0.057553,0.004099,0.275650,0.958416,-0.073860,0.719211,0.106440,-0.260637,0.057362,0.000000,-0.080456,0.996758,0.000000,0.614043,0.118619,-0.243959,0.044143,0.002196,0.909852,0.335759,-0.243794,0.684958,0.106440,-0.248196,0.055220,0.000000,0.791849,0.610717,0.0,0.640840,0.105950,-0.247773,0.055220,0.003218,0.764867,0.610717,-0.204946,0.638607,0.106440,-0.244248,0.044143,-0.000000,0.941948,0.335759,0.0,0.709136,0.106440,-0.244248,0.044143,-0.000000,-0.065403,0.997859,0.0,0.684958,0.106440,-0.243959,0.044143,0.002196,-0.063175,0.997859,0.016928,0.692380,0.105950,-0.243959,-0.064439,-0.002196,-0.126069,-0.991446,-0.033780,0.401515,0.755850,-0.244248,-0.064439,0.000000,-0.130517,-0.991446,0.0,0.162414,0.719230,-0.252586,-0.062781,0.000000,-0.258801,-0.965931,0.0,0.387023,0.719230,-0.252013,-0.062781,-0.004354,-0.249983,-0.965931,-0.066983,0.401515,0.755850,-0.243959,-0.064439,-0.002196,-0.126069,-0.991446,-0.033780,0.387200,0.718750,-0.260637,-0.060048,0.000000,-0.382659,-0.923890,0.0,0.369620,0.694393,-0.259789,-0.060048,-0.006438,-0.369620,-0.923890,-0.099040,0.387023,0.719230,-0.252586,-0.062781,0.000000,-0.258801,-0.965931,0.0,0.367670,0.682259,-0.252013,-0.062781,-0.004354,-0.249983,-0.965931,-0.066983,0.367670,0.682259,-0.268262,-0.056288,0.000000,-0.499972,-0.866041,-0.000000,0.345210,0.657797,-0.267154,-0.056288,-0.008411,-0.482936,-0.866041,-0.129402,0.369620,0.694393,-0.260637,-0.060048,0.000000,-0.382659,-0.923890,0.0,0.140264,0.658200,-0.259789,-0.060048,-0.006438,-0.369620,-0.923890,-0.099040,0.296870,0.657710,-0.275331,-0.051564,0.000000,-0.608733,-0.793375,-0.000000,0.328428,0.621580,-0.273983,-0.051564,-0.010241,-0.587991,-0.793375,-0.157552,0.345210,0.657797,-0.268262,-0.056288,0.000000,-0.499972,-0.866041,-0.000000,0.103830,0.621580,-0.267154,-0.056288,-0.008411,-0.482936,-0.866041,-0.129402,0.328610,0.621090,-0.281723,-0.045959,0.000000,-0.707081,-0.707133,-0.000000,0.309059,0.584960,-0.280157,-0.045959,-0.011895,-0.682988,-0.707133,-0.183006,0.328428,0.621580,-0.275331,-0.051564,0.000000,-0.608733,-0.793375,-0.000000,0.309080,0.584606,-0.273983,-0.051564,-0.010241,-0.587991,-0.793375,-0.157552,0.309080,0.584606,-0.287328,-0.039567,0.000000,-0.793332,-0.608790,0.000000,0.286620,0.560165,-0.280157,-0.045959,-0.011895,-0.682988,-0.707133,-0.183006,0.086874,0.584910,-0.281723,-0.045959,0.000000,-0.707081,-0.707133,-0.000000,0.081664,0.560540,-0.285571,-0.039567,-0.013346,-0.766300,-0.608790,-0.205329,0.309059,0.584960,-0.292052,-0.032498,0.000000,-0.866010,-0.500027,-0.000000,0.269828,0.523920,-0.285571,-0.039567,-0.013346,-0.766300,-0.608790,-0.205329,0.270020,0.523430,-0.287328,-0.039567,0.000000,-0.793332,-0.608790,0.000000,0.045231,0.523920,-0.290134,-0.032498,-0.014568,-0.836501,-0.500027,-0.224140,0.286620,0.560165,-0.295812,-0.024873,0.000000,-0.923870,-0.382707,0.0,0.252893,0.487300,-0.290134,-0.032498,-0.014568,-0.836501,-0.500027,-0.224140,0.223630,0.486999,-0.292052,-0.032498,0.000000,-0.866010,-0.500027,-0.000000,0.223630,0.486999,-0.293766,-0.024873,-0.015542,-0.892390,-0.382707,-0.239115,0.269828,0.523920,-0.298545,-0.016822,0.000000,-0.965921,-0.258837,0.000000,0.228020,0.462523,-0.293766,-0.024873,-0.015542,-0.892390,-0.382707,-0.239115,0.028278,0.487262,-0.295812,-0.024873,0.000000,-0.923870,-0.382707,0.0,0.023060,0.462890,-0.296406,-0.016822,-0.016249,-0.933008,-0.258837,-0.249999,0.252893,0.487300,-0.300203,-0.008484,0.000000,-0.991444,-0.130536,-0.000000,0.211216,0.426270,-0.296406,-0.016822,-0.016249,-0.933008,-0.258837,-0.249999,0.211420,0.425780,-0.298545,-0.016822,0.000000,-0.965921,-0.258837,0.000000,0.211366,0.425780,-0.298008,-0.008484,-0.016678,-0.957661,-0.130536,-0.256605,0.228020,0.462523,-0.300760,0.000000,0.000000,-1.0,0.0,0.0,0.218260,0.425903,-0.298008,-0.008484,-0.016678,-0.957661,-0.130536,-0.256605,0.218546,0.425780,-0.300203,-0.008484,0.000000,-0.991444,-0.130536,-0.000000,0.218260,0.425780,-0.298545,0.000000,-0.016822,-0.965926,0.0,-0.258819,0.218544,0.425780,-0.298008,0.008484,-0.016678,-0.957661,0.130536,-0.256605,0.194330,0.389282,-0.300760,0.000000,0.000000,-1.0,0.0,0.0,0.963007,0.362790,-0.300203,0.008484,0.000000,-0.991444,0.130536,-0.000000,0.193840,0.389283,-0.298545,0.000000,-0.016822,-0.965926,0.0,-0.258819,0.194278,0.389160,-0.298545,0.016822,0.000000,-0.965921,0.258837,0.000000,0.160150,0.328243,-0.296406,0.016822,-0.016249,-0.933008,0.258837,-0.249999,0.169430,0.364865,-0.300203,0.008484,0.000000,-0.991444,0.130536,-0.000000,0.970210,0.362300,-0.298008,0.008484,-0.016678,-0.957661,0.130536,-0.256605,0.963008,0.362753,-0.295812,0.024873,0.000000,-0.923870,0.382707,0.0,0.972650,0.326170,-0.293766,0.024873,-0.015542,-0.892390,0.382707,-0.239115,0.160150,0.328243,-0.298545,0.016822,0.000000,-0.965921,0.258837,0.000000,0.972650,0.325680,-0.296406,0.016822,-0.016249,-0.933008,0.258837,-0.249999,0.933875,0.326133,-0.290134,0.032498,-0.014568,-0.836501,0.500027,-0.224140,0.057610,0.267528,-0.295812,0.024873,0.000000,-0.923870,0.382707,0.0,0.904415,0.265130,-0.292052,0.032498,0.000000,-0.866010,0.500027,-0.000000,0.110840,0.267206,-0.293766,0.024873,-0.015542,-0.892390,0.382707,-0.239115,0.057610,0.267090,-0.285571,0.039567,-0.013346,-0.766300,0.608790,-0.205329,0.110840,0.267206,-0.292052,0.032498,0.000000,-0.866010,0.500027,-0.000000,0.875286,0.228510,-0.287328,0.039567,0.000000,-0.793332,0.608789,0.000000,0.101070,0.230574,-0.290134,0.032498,-0.014568,-0.836501,0.500027,-0.224140,0.904418,0.265088,-0.281723,0.045959,0.000000,-0.707081,0.707133,-0.000000,0.906730,0.228510,-0.280157,0.045959,-0.011895,-0.682988,0.707133,-0.183006,0.101070,0.230574,-0.287328,0.039567,0.000000,-0.793332,0.608789,0.000000,0.906730,0.228020,-0.285571,0.039567,-0.013346,-0.766300,0.608790,-0.205329,0.875289,0.228464,-0.273983,0.051564,-0.010241,-0.587991,0.793375,-0.157552,0.077108,0.193949,-0.281723,0.045959,0.000000,-0.707081,0.707133,-0.000000,0.846044,0.167480,-0.275331,0.051564,0.000000,-0.608733,0.793375,-0.000000,0.052484,0.169920,-0.280157,0.045959,-0.011895,-0.682988,0.707133,-0.183006,0.851044,0.191839,-0.268262,0.056288,0.000000,-0.356200,0.934410,-0.000000,0.884760,0.167480,-0.273983,0.051564,-0.010241,-0.587991,0.793375,-0.157552,0.853364,0.166994,-0.275331,0.051564,0.000000,-0.608733,0.793375,-0.000000,0.811897,0.130850,-0.267154,0.056288,-0.008411,-0.344063,0.934410,-0.092191,0.052484,0.169920,-0.260637,0.057362,0.000000,-0.080456,0.996758,0.000000,0.040250,0.121090,-0.267154,0.056288,-0.008411,-0.344063,0.934410,-0.092191,0.040030,0.132810,-0.268262,0.056288,0.000000,-0.356200,0.934410,-0.000000,0.760653,0.118650,-0.259789,0.057362,-0.006438,-0.077714,0.996758,-0.020823,0.040520,0.133289,-0.251600,0.057553,0.000000,0.285374,0.958416,0.0,0.025663,0.121090,-0.259789,0.057362,-0.006438,-0.077714,0.996758,-0.020823,0.763106,0.118388,-0.260637,0.057362,0.000000,-0.080456,0.996758,0.000000,0.719211,0.106440,-0.251061,0.057553,-0.004099,0.275650,0.958416,0.073860,0.040250,0.121090,-0.248196,0.055220,0.000000,0.791849,0.610717,0.0,0.684958,0.106440,-0.244248,0.044143,-0.000000,0.941948,0.335759,0.0,0.025526,0.108880,-0.243959,0.044143,-0.002196,0.909852,0.335759,0.243794,0.025782,0.108880,-0.247773,0.055220,-0.003218,0.764867,0.610717,0.204946,0.709136,0.106440,-0.243959,0.044143,-0.002196,-0.063175,0.997859,-0.016928,0.025526,0.108880,-0.244248,0.044143,-0.000000,-0.065403,0.997859,0.0,0.933981,0.105950,-0.243111,-0.064439,-0.004242,-0.113031,-0.991446,-0.065258,0.599282,0.755850,-0.252013,-0.062781,-0.004354,-0.249983,-0.965931,-0.066983,0.592113,0.719230,-0.243111,-0.064439,-0.004242,-0.113031,-0.991446,-0.065258,0.401515,0.755728,-0.243959,-0.064439,-0.002196,-0.126069,-0.991446,-0.033780,0.387023,0.719230,-0.250332,-0.062781,-0.008411,-0.224128,-0.965931,-0.129401,0.599282,0.755850,-0.257304,-0.060048,-0.012436,-0.331393,-0.923890,-0.191330,0.592113,0.719230,-0.252013,-0.062781,-0.004354,-0.249983,-0.965931,-0.066983,0.369620,0.694393,-0.259789,-0.060048,-0.006438,-0.369620,-0.923890,-0.099040,0.586910,0.694555,-0.250332,-0.062781,-0.008411,-0.224128,-0.965931,-0.129401,0.394353,0.718764,-0.263908,-0.056288,-0.016249,-0.432989,-0.866041,-0.249986,0.586910,0.694555,-0.259789,-0.060048,-0.006438,-0.369620,-0.923890,-0.099040,0.345210,0.657797,-0.267154,-0.056288,-0.008411,-0.482936,-0.866041,-0.129402,0.567532,0.658200,-0.257304,-0.060048,-0.012436,-0.331393,-0.923890,-0.191330,0.370092,0.682183,-0.273983,-0.051564,-0.010241,-0.587991,-0.793375,-0.157552,0.533510,0.621580,-0.263908,-0.056288,-0.016249,-0.432989,-0.866041,-0.249986,0.531250,0.621090,-0.267154,-0.056288,-0.008411,-0.482936,-0.866041,-0.129402,0.328428,0.621580,-0.270030,-0.051564,-0.019783,-0.527178,-0.793375,-0.304367,0.567532,0.658200,-0.280157,-0.045959,-0.011895,-0.682988,-0.707133,-0.183006,0.335440,0.621580,-0.270030,-0.051564,-0.019783,-0.527178,-0.793375,-0.304367,0.335742,0.621090,-0.273983,-0.051564,-0.010241,-0.587991,-0.793375,-0.157552,0.309059,0.584960,-0.275565,-0.045959,-0.022979,-0.612350,-0.707133,-0.353540,0.531086,0.621580,-0.285571,-0.039567,-0.013346,-0.766300,-0.608790,-0.205329,0.311030,0.584960,-0.275565,-0.045959,-0.022979,-0.612350,-0.707133,-0.353540,0.311520,0.584579,-0.280157,-0.045959,-0.011895,-0.682988,-0.707133,-0.183006,0.311030,0.584579,-0.280420,-0.039567,-0.025782,-0.687046,-0.608790,-0.396666,0.311516,0.584960,-0.290134,-0.032498,-0.014568,-0.836501,-0.500027,-0.224140,0.474896,0.523920,-0.280420,-0.039567,-0.025782,-0.687046,-0.608790,-0.396666,0.472650,0.523430,-0.285571,-0.039567,-0.013346,-0.766300,-0.608790,-0.205329,0.269828,0.523920,-0.284511,-0.032498,-0.028144,-0.749986,-0.500027,-0.433005,0.508780,0.560328,-0.293766,-0.024873,-0.015542,-0.892390,-0.382707,-0.239115,0.281747,0.499510,-0.284511,-0.032498,-0.028144,-0.749986,-0.500027,-0.433005,0.277142,0.523430,-0.290134,-0.032498,-0.014568,-0.836501,-0.500027,-0.224140,0.223618,0.487300,-0.287767,-0.024873,-0.030024,-0.800095,-0.382707,-0.461935,0.472472,0.523920,-0.296406,-0.016822,-0.016249,-0.933008,-0.258837,-0.249999,0.450190,0.462687,-0.287767,-0.024873,-0.030024,-0.800095,-0.382707,-0.461935,0.252892,0.486931,-0.293766,-0.024873,-0.015542,-0.892390,-0.382707,-0.239115,0.228020,0.462523,-0.290134,-0.016822,-0.031390,-0.836512,-0.258837,-0.482961,0.455526,0.487300,-0.298008,-0.008484,-0.016678,-0.957661,-0.130536,-0.256605,0.416295,0.426270,-0.290134,-0.016822,-0.031390,-0.836512,-0.258837,-0.482961,0.414060,0.425780,-0.296406,-0.016822,-0.016249,-0.933008,-0.258837,-0.249999,0.211216,0.426270,-0.291570,-0.008484,-0.032220,-0.858615,-0.130536,-0.495722,0.450190,0.462687,-0.298545,0.000000,-0.016822,-0.965926,0.0,-0.258819,0.218260,0.426270,-0.291570,-0.008484,-0.032220,-0.858615,-0.130536,-0.495722,0.218544,0.425780,-0.298008,-0.008484,-0.016678,-0.957661,-0.130536,-0.256605,0.218260,0.425903,-0.292052,0.000000,-0.032498,-0.866025,0.0,-0.500000,0.413860,0.426270,-0.298008,0.008484,-0.016678,-0.957661,0.130536,-0.256605,0.193840,0.389640,-0.291570,0.008484,-0.032220,-0.858615,0.130536,-0.495722,0.194278,0.389640,-0.298545,0.000000,-0.016822,-0.965926,0.0,-0.258819,0.193840,0.389283,-0.292052,0.000000,-0.032498,-0.866025,0.0,-0.500000,0.194330,0.389282,-0.296406,0.016822,-0.016249,-0.933008,0.258837,-0.249999,0.357693,0.328610,-0.290134,0.016822,-0.031390,-0.836512,0.258837,-0.482961,0.391600,0.365027,-0.298008,0.008484,-0.016678,-0.957661,0.130536,-0.256605,0.160150,0.328243,-0.291570,0.008484,-0.032220,-0.858615,0.130536,-0.495722,0.169549,0.364865,-0.293766,0.024873,-0.015542,-0.892390,0.382707,-0.239115,0.338315,0.291990,-0.287767,0.024873,-0.030024,-0.800095,0.382707,-0.461935,0.357693,0.328610,-0.296406,0.016822,-0.016249,-0.933008,0.258837,-0.249999,0.191400,0.328120,-0.290134,0.016822,-0.031390,-0.836512,0.258837,-0.482961,0.159943,0.328243,-0.290134,0.032498,-0.014568,-0.836501,0.500027,-0.224140,0.137690,0.267570,-0.284511,0.032498,-0.028144,-0.749986,0.500027,-0.433005,0.135250,0.291990,-0.293766,0.024873,-0.015542,-0.892390,0.382707,-0.239115,0.057610,0.267528,-0.287767,0.024873,-0.030024,-0.800095,0.382707,-0.461935,0.135740,0.291622,-0.285571,0.039567,-0.013346,-0.766300,0.608790,-0.205329,0.299090,0.230950,-0.280420,0.039567,-0.025782,-0.687046,0.608790,-0.396666,0.333000,0.267366,-0.290134,0.032498,-0.014568,-0.836501,0.500027,-0.224140,0.101070,0.230574,-0.284511,0.032498,-0.028144,-0.749986,0.500027,-0.433005,0.110961,0.267205,-0.280157,0.045959,-0.011895,-0.682988,0.707133,-0.183006,0.279726,0.194330,-0.275565,0.045959,-0.022979,-0.612350,0.707133,-0.353540,0.299090,0.230950,-0.285571,0.039567,-0.013346,-0.766300,0.608790,-0.205329,0.110840,0.230460,-0.280420,0.039567,-0.025782,-0.687046,0.608790,-0.396666,0.101359,0.230574,-0.273983,0.051564,-0.010241,-0.587991,0.793375,-0.157552,0.079100,0.169920,-0.270030,0.051564,-0.019783,-0.527178,0.793375,-0.304367,0.076660,0.194330,-0.280157,0.045959,-0.011895,-0.682988,0.707133,-0.183006,0.076660,0.193986,-0.275565,0.045959,-0.022979,-0.612350,0.707133,-0.353540,0.077140,0.193949,-0.270030,0.051564,-0.019783,-0.527178,0.793375,-0.304367,0.052510,0.169561,-0.267154,0.056288,-0.008411,-0.344063,0.934410,-0.092191,0.079100,0.169920,-0.263908,0.056288,-0.016249,-0.308479,0.934410,-0.178100,0.274543,0.169920,-0.273983,0.051564,-0.010241,-0.587991,0.793375,-0.157552,0.079100,0.169430,-0.263908,0.056288,-0.016249,-0.308479,0.934410,-0.178100,0.040518,0.133289,-0.259789,0.057362,-0.006438,-0.077714,0.996758,-0.020823,0.225838,0.121090,-0.257304,0.057362,-0.012436,-0.069677,0.996758,-0.040228,0.243158,0.132986,-0.267154,0.056288,-0.008411,-0.344063,0.934410,-0.092191,0.040250,0.121090,-0.257304,0.057362,-0.012436,-0.069677,0.996758,-0.040228,0.040252,0.120631,-0.251061,0.057553,-0.004099,0.275650,0.958416,0.073860,0.181967,0.121090,-0.249479,0.057553,-0.007918,0.247141,0.958416,0.142687,0.225838,0.121090,-0.259789,0.057362,-0.006438,-0.077714,0.996758,-0.020823,0.025663,0.121090,-0.247773,0.055220,-0.003218,0.764867,0.610717,0.204946,0.025526,0.108880,-0.243959,0.044143,-0.002196,0.909852,0.335759,0.243794,0.152494,0.108390,-0.243111,0.044143,-0.004242,0.815751,0.335759,0.470974,0.152784,0.108880,-0.246531,0.055220,-0.006216,0.685761,0.610717,0.395924,0.025782,0.108880,-0.243111,0.044143,-0.004242,-0.056641,0.997859,-0.032702,0.152494,0.108390,-0.243959,0.044143,-0.002196,-0.063175,0.997859,-0.016928,0.138156,0.108390,-0.241763,-0.064439,-0.005999,-0.092289,-0.991446,-0.092289,0.823901,0.755850,-0.250332,-0.062781,-0.008411,-0.224128,-0.965931,-0.129401,0.794762,0.719230,-0.241763,-0.064439,-0.005999,-0.092289,-0.991446,-0.092289,0.787590,0.718750,-0.243111,-0.064439,-0.004242,-0.113031,-0.991446,-0.065258,0.592113,0.719230,-0.247659,-0.062781,-0.011895,-0.183000,-0.965931,-0.183000,0.823901,0.755850,-0.257304,-0.060048,-0.012436,-0.331393,-0.923890,-0.191330,0.789550,0.694726,-0.247659,-0.062781,-0.011895,-0.183000,-0.965931,-0.183000,0.790030,0.694330,-0.250332,-0.062781,-0.008411,-0.224128,-0.965931,-0.129401,0.586910,0.694555,-0.253352,-0.060048,-0.017588,-0.270581,-0.923890,-0.270581,0.794762,0.719230,-0.263908,-0.056288,-0.016249,-0.432989,-0.866041,-0.249986,0.765290,0.658200,-0.253352,-0.060048,-0.017588,-0.270581,-0.923890,-0.270581,0.572741,0.682345,-0.257304,-0.060048,-0.012436,-0.331393,-0.923890,-0.191330,0.567532,0.658200,-0.258743,-0.056288,-0.022979,-0.353534,-0.866041,-0.353534,0.789551,0.694726,-0.263742,-0.051564,-0.027978,-0.430439,-0.793375,-0.430439,0.765290,0.658200,-0.263908,-0.056288,-0.016249,-0.432989,-0.866041,-0.249986,0.533510,0.621580,-0.270030,-0.051564,-0.019783,-0.527178,-0.793375,-0.304367,0.736151,0.621580,-0.258743,-0.056288,-0.022979,-0.353534,-0.866041,-0.353534,0.729000,0.621090,-0.275565,-0.045959,-0.022979,-0.612350,-0.707133,-0.353540,0.730950,0.597110,-0.263742,-0.051564,-0.027978,-0.430439,-0.793375,-0.430439,0.731440,0.596680,-0.270030,-0.051564,-0.019783,-0.527178,-0.793375,-0.304367,0.514139,0.584960,-0.268262,-0.045959,-0.032498,-0.499982,-0.707133,-0.499982,0.736151,0.621580,-0.272226,-0.039567,-0.036462,-0.560970,-0.608790,-0.560970,0.730950,0.597110,-0.275565,-0.045959,-0.022979,-0.612350,-0.707133,-0.353540,0.508780,0.560328,-0.280420,-0.039567,-0.025782,-0.687046,-0.608790,-0.396666,0.706683,0.560540,-0.268262,-0.045959,-0.032498,-0.499982,-0.707133,-0.499982,0.514139,0.584742,-0.284511,-0.032498,-0.028144,-0.749986,-0.500027,-0.433005,0.677541,0.523920,-0.272226,-0.039567,-0.036462,-0.560970,-0.608790,-0.560970,0.670410,0.523430,-0.280420,-0.039567,-0.025782,-0.687046,-0.608790,-0.396666,0.474896,0.523920,-0.275565,-0.032498,-0.039801,-0.612361,-0.500027,-0.612361,0.706683,0.560540,-0.287767,-0.024873,-0.030024,-0.800095,-0.382707,-0.461935,0.650859,0.487300,-0.275565,-0.032498,-0.039801,-0.612361,-0.500027,-0.612361,0.650870,0.487028,-0.284511,-0.032498,-0.028144,-0.749986,-0.500027,-0.433005,0.455526,0.487300,-0.278224,-0.024873,-0.042460,-0.653274,-0.382707,-0.653275,0.677541,0.523920,-0.290134,-0.016822,-0.031390,-0.836512,-0.258837,-0.482961,0.652830,0.487262,-0.278224,-0.024873,-0.042460,-0.653274,-0.382707,-0.653275,0.653309,0.486810,-0.287767,-0.024873,-0.030024,-0.800095,-0.382707,-0.461935,0.450190,0.462687,-0.280157,-0.016822,-0.044393,-0.683009,-0.258837,-0.683009,0.653320,0.487262,-0.291570,-0.008484,-0.032220,-0.858615,-0.130536,-0.495722,0.618936,0.426270,-0.280157,-0.016822,-0.044393,-0.683009,-0.258837,-0.683009,0.619140,0.425780,-0.290134,-0.016822,-0.031390,-0.836512,-0.258837,-0.482961,0.416295,0.426270,-0.281330,-0.008484,-0.045566,-0.701057,-0.130536,-0.701057,0.648068,0.462890,-0.292052,0.000000,-0.032498,-0.866025,0.0,-0.500000,0.618650,0.426233,-0.281330,-0.008484,-0.045566,-0.701057,-0.130536,-0.701057,0.619094,0.425780,-0.291570,-0.008484,-0.032220,-0.858615,-0.130536,-0.495722,0.396926,0.389640,-0.281723,0.000000,-0.045959,-0.707107,0.0,-0.707107,0.618936,0.426270,-0.291570,0.008484,-0.032220,-0.858615,0.130536,-0.495722,0.594230,0.389602,-0.281330,0.008484,-0.045566,-0.701057,0.130536,-0.701057,0.594676,0.389640,-0.292052,0.000000,-0.032498,-0.866025,0.0,-0.500000,0.391600,0.365027,-0.281723,0.000000,-0.045959,-0.707107,0.0,-0.707107,0.594669,0.389160,-0.290134,0.016822,-0.031390,-0.836512,0.258837,-0.482961,0.560328,0.328610,-0.280157,0.016822,-0.044393,-0.683009,0.258837,-0.683009,0.589466,0.365230,-0.291570,0.008484,-0.032220,-0.858615,0.130536,-0.495722,0.357693,0.328610,-0.281330,0.008484,-0.045566,-0.701057,0.130536,-0.701057,0.560540,0.328120,-0.287767,0.024873,-0.030024,-0.800095,0.382707,-0.461935,0.560050,0.328562,-0.278224,0.024873,-0.042460,-0.653274,0.382707,-0.653275,0.560328,0.328610,-0.290134,0.016822,-0.031390,-0.836512,0.258837,-0.482961,0.338315,0.291990,-0.280157,0.016822,-0.044393,-0.683009,0.258837,-0.683009,0.560050,0.328120,-0.284511,0.032498,-0.028144,-0.749986,0.500027,-0.433005,0.535640,0.291937,-0.275565,0.032498,-0.039801,-0.612361,0.500027,-0.612361,0.536080,0.291990,-0.287767,0.024873,-0.030024,-0.800095,0.382707,-0.461935,0.333000,0.267366,-0.278224,0.024873,-0.042460,-0.653274,0.382707,-0.653275,0.535640,0.291500,-0.280420,0.039567,-0.025782,-0.687046,0.608790,-0.396666,0.501734,0.230950,-0.272226,0.039567,-0.036462,-0.560970,0.608790,-0.560970,0.530870,0.267570,-0.284511,0.032498,-0.028144,-0.749986,0.500027,-0.433005,0.299090,0.230950,-0.275565,0.032498,-0.039801,-0.612361,0.500027,-0.612361,0.333118,0.267366,-0.272226,0.039567,-0.036462,-0.560970,0.608790,-0.560970,0.299103,0.230737,-0.275565,0.045959,-0.022979,-0.612350,0.707133,-0.353540,0.328120,0.230950,-0.268262,0.045959,-0.032498,-0.499982,0.707133,-0.499982,0.501734,0.230950,-0.280420,0.039567,-0.025782,-0.687046,0.608790,-0.396666,0.279726,0.194330,-0.268262,0.045959,-0.032498,-0.499982,0.707133,-0.499982,0.477050,0.193840,-0.275565,0.045959,-0.022979,-0.612350,0.707133,-0.353540,0.274543,0.169920,-0.263742,0.051564,-0.027978,-0.430439,0.793375,-0.430439,0.477484,0.194330,-0.270030,0.051564,-0.019783,-0.527178,0.793375,-0.304367,0.477050,0.194265,-0.263742,0.051564,-0.027978,-0.430439,0.793375,-0.430439,0.274558,0.169692,-0.263908,0.056288,-0.016249,-0.308479,0.934410,-0.178100,0.462400,0.145036,-0.258743,0.056288,-0.022979,-0.251872,0.934410,-0.251872,0.472322,0.169920,-0.270030,0.051564,-0.019783,-0.527178,0.793375,-0.304367,0.276850,0.169430,-0.258743,0.056288,-0.022979,-0.251872,0.934410,-0.251872,0.243160,0.132986,-0.257304,0.057362,-0.012436,-0.069677,0.996758,-0.040228,0.428710,0.121022,-0.253352,0.057362,-0.017588,-0.056891,0.996758,-0.056891,0.242670,0.133300,-0.263908,0.056288,-0.016249,-0.308479,0.934410,-0.178100,0.242670,0.132873,-0.246962,0.057553,-0.011198,0.201790,0.958416,0.201790,0.433512,0.121090,-0.253352,0.057362,-0.017588,-0.056891,0.996758,-0.056891,0.428220,0.120600,-0.257304,0.057362,-0.012436,-0.069677,0.996758,-0.040228,0.181967,0.121090,-0.249479,0.057553,-0.007918,0.247141,0.958416,0.142687,0.409137,0.121090,-0.241763,0.044143,-0.005999,0.666058,0.335759,0.666058,0.406288,0.121090,-0.244555,0.055220,-0.008791,0.559922,0.610717,0.559922,0.152784,0.108880,-0.246531,0.055220,-0.006216,0.685761,0.610717,0.395924,0.152494,0.108390,-0.243111,0.044143,-0.004242,0.815751,0.335759,0.470974,0.377147,0.108880,-0.241763,0.044143,-0.005999,-0.046247,0.997859,-0.046247,0.377147,0.108880,-0.243111,0.044143,-0.004242,-0.056641,0.997859,-0.032702,0.350348,0.108390,-0.240006,-0.064439,-0.007347,-0.065258,-0.991446,-0.113031,0.028013,0.758300,-0.240006,-0.064439,-0.007347,-0.065258,-0.991446,-0.113031,0.013670,0.721190,-0.247659,-0.062781,-0.011895,-0.183000,-0.965931,-0.183000,0.013522,0.721680,-0.244175,-0.062781,-0.014568,-0.129401,-0.965931,-0.224128,0.028013,0.758300,-0.241763,-0.064439,-0.005999,-0.092289,-0.991446,-0.092289,0.794762,0.719230,-0.248200,-0.060048,-0.021540,-0.191330,-0.923890,-0.331393,0.013522,0.721680,-0.244175,-0.062781,-0.014568,-0.129401,-0.965931,-0.224128,0.790030,0.694649,-0.247659,-0.062781,-0.011895,-0.183000,-0.965931,-0.183000,0.789550,0.694726,-0.253352,-0.060048,-0.017588,-0.270581,-0.923890,-0.270581,0.994647,0.694820,-0.248200,-0.060048,-0.021540,-0.191330,-0.923890,-0.331393,0.931640,0.657710,-0.258743,-0.056288,-0.022979,-0.353534,-0.866041,-0.353534,0.970210,0.657812,-0.252013,-0.056288,-0.028144,-0.249986,-0.866041,-0.432989,0.994620,0.694411,-0.253352,-0.060048,-0.017588,-0.270581,-0.923890,-0.270581,0.765290,0.658200,-0.258743,-0.056288,-0.022979,-0.353534,-0.866041,-0.353534,0.736151,0.621580,-0.255547,-0.051564,-0.034266,-0.304367,-0.793375,-0.527178,0.970210,0.657812,-0.252013,-0.056288,-0.028144,-0.249986,-0.866041,-0.432989,0.953610,0.621090,-0.263742,-0.051564,-0.027978,-0.430439,-0.793375,-0.430439,0.953452,0.621580,-0.255547,-0.051564,-0.034266,-0.304367,-0.793375,-0.527178,0.960772,0.621090,-0.268262,-0.045959,-0.032498,-0.499982,-0.707133,-0.499982,0.936030,0.596797,-0.258743,-0.045959,-0.039801,-0.353540,-0.707133,-0.612350,0.960765,0.621090,-0.263742,-0.051564,-0.027978,-0.430439,-0.793375,-0.430439,0.730950,0.597110,-0.268262,-0.045959,-0.032498,-0.499982,-0.707133,-0.499982,0.706683,0.560540,-0.261546,-0.039567,-0.044656,-0.396666,-0.608790,-0.687045,0.936030,0.596797,-0.258743,-0.045959,-0.039801,-0.353540,-0.707133,-0.612350,0.870600,0.560050,-0.272226,-0.039567,-0.036462,-0.560970,-0.608790,-0.560970,0.911620,0.560174,-0.261546,-0.039567,-0.044656,-0.396666,-0.608790,-0.687045,0.895020,0.523430,-0.272226,-0.039567,-0.036462,-0.560970,-0.608790,-0.560970,0.677541,0.523920,-0.263908,-0.032498,-0.048747,-0.433005,-0.500027,-0.749986,0.911620,0.560174,-0.275565,-0.032498,-0.039801,-0.612361,-0.500027,-0.612361,0.894843,0.523920,-0.263908,-0.032498,-0.048747,-0.433005,-0.500027,-0.749986,0.875480,0.486812,-0.275565,-0.032498,-0.039801,-0.612361,-0.500027,-0.612361,0.650859,0.487300,-0.265788,-0.024873,-0.052003,-0.461935,-0.382707,-0.800095,0.894843,0.523920,-0.278224,-0.024873,-0.042460,-0.653274,-0.382707,-0.653275,0.875459,0.487300,-0.265788,-0.024873,-0.052003,-0.461935,-0.382707,-0.800095,0.653289,0.487262,-0.278224,-0.024873,-0.042460,-0.653274,-0.382707,-0.653275,0.648068,0.462890,-0.267154,-0.016822,-0.054370,-0.482961,-0.258837,-0.836512,0.875459,0.487300,-0.280157,-0.016822,-0.044393,-0.683009,-0.258837,-0.683009,0.853020,0.462531,-0.267154,-0.016822,-0.054370,-0.482961,-0.258837,-0.836512,0.836420,0.425780,-0.280157,-0.016822,-0.044393,-0.683009,-0.258837,-0.683009,0.836370,0.425780,-0.267984,-0.008484,-0.055806,-0.495722,-0.130536,-0.858615,0.853020,0.462531,-0.281330,-0.008484,-0.045566,-0.701057,-0.130536,-0.701057,0.836220,0.426270,-0.267984,-0.008484,-0.055806,-0.495722,-0.130536,-0.858615,0.843550,0.425780,-0.281330,-0.008484,-0.045566,-0.701057,-0.130536,-0.701057,0.843260,0.425780,-0.268262,0.000000,-0.056288,-0.500000,0.0,-0.866025,0.843548,0.425780,-0.281723,0.000000,-0.045959,-0.707107,0.0,-0.707107,0.843260,0.425911,-0.268262,0.000000,-0.056288,-0.500000,0.0,-0.866025,0.819278,0.389160,-0.281330,0.008484,-0.045566,-0.701057,0.130536,-0.701057,0.818840,0.389289,-0.267984,0.008484,-0.055806,-0.495722,0.130536,-0.858615,0.819330,0.389289,-0.281723,0.000000,-0.045959,-0.707107,0.0,-0.707107,0.589466,0.365230,-0.267984,0.008484,-0.055806,-0.495722,0.130536,-0.858615,0.589467,0.365193,-0.280157,0.016822,-0.044393,-0.683009,0.258837,-0.683009,0.785150,0.328251,-0.267154,0.016822,-0.054370,-0.482961,0.258837,-0.836512,0.794430,0.364872,-0.281330,0.008484,-0.045566,-0.701057,0.130536,-0.701057,0.596680,0.364740,-0.278224,0.024873,-0.042460,-0.653274,0.382707,-0.653275,0.591790,0.328610,-0.267154,0.016822,-0.054370,-0.482961,0.258837,-0.836512,0.560328,0.328572,-0.280157,0.016822,-0.044393,-0.683009,0.258837,-0.683009,0.591790,0.328120,-0.265788,0.024873,-0.052003,-0.461935,0.382707,-0.800095,0.785150,0.328251,-0.275565,0.032498,-0.039801,-0.612361,0.500027,-0.612361,0.760250,0.291634,-0.265788,0.024873,-0.052003,-0.461935,0.382707,-0.800095,0.760250,0.291500,-0.278224,0.024873,-0.042460,-0.653274,0.382707,-0.653275,0.530870,0.267570,-0.263908,0.032498,-0.048747,-0.433005,0.500027,-0.749986,0.760740,0.291629,-0.272226,0.039567,-0.036462,-0.560970,0.608790,-0.560970,0.726070,0.230583,-0.263908,0.032498,-0.048747,-0.433005,0.500027,-0.749986,0.530873,0.267529,-0.275565,0.032498,-0.039801,-0.612361,0.500027,-0.612361,0.501734,0.230950,-0.261546,0.039567,-0.044656,-0.396666,0.608790,-0.687046,0.735840,0.267214,-0.261546,0.039567,-0.044656,-0.396666,0.608790,-0.687046,0.501737,0.230904,-0.268262,0.045959,-0.032498,-0.499982,0.707133,-0.499982,0.530760,0.230950,-0.258743,0.045959,-0.039801,-0.353540,0.707133,-0.612350,0.726070,0.230583,-0.272226,0.039567,-0.036462,-0.560970,0.608790,-0.560970,0.530760,0.230460,-0.258743,0.045959,-0.039801,-0.353540,0.707133,-0.612350,0.701660,0.193840,-0.268262,0.045959,-0.032498,-0.499982,0.707133,-0.499982,0.472322,0.169920,-0.255547,0.051564,-0.034266,-0.304367,0.793375,-0.527178,0.702140,0.193960,-0.263742,0.051564,-0.027978,-0.430439,0.793375,-0.430439,0.701660,0.193969,-0.255547,0.051564,-0.034266,-0.304367,0.793375,-0.527178,0.472325,0.169881,-0.263742,0.051564,-0.027978,-0.430439,0.793375,-0.430439,0.462400,0.145036,-0.252013,0.056288,-0.028144,-0.178100,0.934410,-0.308479,0.677240,0.169541,-0.258743,0.056288,-0.022979,-0.251872,0.934410,-0.251872,0.665030,0.145095,-0.252013,0.056288,-0.028144,-0.178100,0.934410,-0.308479,0.462472,0.145036,-0.253352,0.057362,-0.017588,-0.056891,0.996758,-0.056891,0.650390,0.133156,-0.248200,0.057362,-0.021540,-0.040228,0.996758,-0.069677,0.665030,0.145095,-0.258743,0.056288,-0.022979,-0.251872,0.934410,-0.251872,0.433512,0.121090,-0.248200,0.057362,-0.021540,-0.040228,0.996758,-0.069677,0.628410,0.120600,-0.246962,0.057553,-0.011198,0.201790,0.958416,0.201790,0.608880,0.120733,-0.243682,0.057553,-0.013714,0.142687,0.958416,0.247141,0.650390,0.133156,-0.253352,0.057362,-0.017588,-0.056891,0.996758,-0.056891,0.409137,0.121090,-0.241980,0.055220,-0.010767,0.395924,0.610717,0.685761,0.406288,0.121090,-0.241763,0.044143,-0.005999,0.666058,0.335759,0.666058,0.609183,0.108880,-0.240006,0.044143,-0.007347,0.470974,0.335759,0.815751,0.611462,0.121090,-0.244555,0.055220,-0.008791,0.559922,0.610717,0.559922,0.377147,0.108880,-0.240006,0.044143,-0.007347,-0.032702,0.997859,-0.056641,0.609183,0.108880,-0.241763,0.044143,-0.005999,-0.046247,0.997859,-0.046247,0.577436,0.108390,-0.237960,-0.064439,-0.008195,-0.033780,-0.991446,-0.126069,0.252631,0.758300,-0.237960,-0.064439,-0.008195,-0.033780,-0.991446,-0.126069,0.216300,0.721190,-0.244175,-0.062781,-0.014568,-0.129401,-0.965931,-0.224128,0.216168,0.721680,-0.240118,-0.062781,-0.016249,-0.066983,-0.965931,-0.249983,0.252631,0.758300,-0.240006,-0.064439,-0.007347,-0.065258,-0.991446,-0.113031,0.013522,0.721680,-0.240118,-0.062781,-0.016249,-0.066983,-0.965931,-0.249983,0.020841,0.721233,-0.248200,-0.060048,-0.021540,-0.191330,-0.923890,-0.331393,0.213370,0.697034,-0.242202,-0.060048,-0.024025,-0.099040,-0.923890,-0.369621,0.216168,0.721680,-0.244175,-0.062781,-0.014568,-0.129401,-0.965931,-0.224128,0.994620,0.694411,-0.242202,-0.060048,-0.024025,-0.099040,-0.923890,-0.369621,0.157710,0.660150,-0.252013,-0.056288,-0.028144,-0.249986,-0.866041,-0.432989,0.194014,0.660640,-0.244175,-0.056288,-0.031390,-0.129402,-0.866041,-0.482936,0.213370,0.697034,-0.248200,-0.060048,-0.021540,-0.191330,-0.923890,-0.331393,0.970210,0.657812,-0.246005,-0.051564,-0.038219,-0.157552,-0.793375,-0.587991,0.194014,0.660640,-0.244175,-0.056288,-0.031390,-0.129402,-0.866041,-0.482936,0.157710,0.623530,-0.252013,-0.056288,-0.028144,-0.249986,-0.866041,-0.432989,0.953452,0.621580,-0.255547,-0.051564,-0.034266,-0.304367,-0.793375,-0.527178,0.159991,0.624020,-0.246005,-0.051564,-0.038219,-0.157552,-0.793375,-0.587991,0.960764,0.621202,-0.258743,-0.045959,-0.039801,-0.353540,-0.707133,-0.612350,0.154780,0.599406,-0.247659,-0.045959,-0.044393,-0.183006,-0.707133,-0.682988,0.159991,0.624020,-0.255547,-0.051564,-0.034266,-0.304367,-0.793375,-0.527178,0.936030,0.596797,-0.247659,-0.045959,-0.044393,-0.183006,-0.707133,-0.682988,0.096680,0.562500,-0.258743,-0.045959,-0.039801,-0.353540,-0.707133,-0.612350,0.911620,0.560174,-0.249110,-0.039567,-0.049807,-0.205329,-0.608790,-0.766300,0.154780,0.599406,-0.261546,-0.039567,-0.044656,-0.396666,-0.608790,-0.687045,0.135250,0.562790,-0.249110,-0.039567,-0.049807,-0.205329,-0.608790,-0.766300,0.099120,0.525870,-0.261546,-0.039567,-0.044656,-0.396666,-0.608790,-0.687045,0.894843,0.523920,-0.250332,-0.032498,-0.054370,-0.224140,-0.500027,-0.836501,0.135250,0.562790,-0.263908,-0.032498,-0.048747,-0.433005,-0.500027,-0.749986,0.101379,0.526360,-0.250332,-0.032498,-0.054370,-0.224140,-0.500027,-0.836501,0.074700,0.489468,-0.263908,-0.032498,-0.048747,-0.433005,-0.500027,-0.749986,0.875459,0.487300,-0.251306,-0.024873,-0.058002,-0.239115,-0.382707,-0.892390,0.101379,0.526360,-0.265788,-0.024873,-0.052003,-0.461935,-0.382707,-0.800095,0.082005,0.489740,-0.251306,-0.024873,-0.058002,-0.239115,-0.382707,-0.892390,0.877930,0.486939,-0.265788,-0.024873,-0.052003,-0.461935,-0.382707,-0.800095,0.877440,0.486939,-0.252013,-0.016822,-0.060642,-0.249999,-0.258837,-0.933008,0.074689,0.489740,-0.267154,-0.016822,-0.054370,-0.482961,-0.258837,-0.836512,0.877440,0.487300,-0.267984,-0.008484,-0.055806,-0.495722,-0.130536,-0.858615,0.042762,0.428710,-0.252442,-0.008484,-0.062244,-0.256604,-0.130536,-0.957661,0.076660,0.465142,-0.267154,-0.016822,-0.054370,-0.482961,-0.258837,-0.836512,0.836220,0.426270,-0.252013,-0.016822,-0.060642,-0.249999,-0.258837,-0.933008,0.040520,0.428220,-0.268262,0.000000,-0.056288,-0.500000,0.0,-0.866025,0.843260,0.426270,-0.252586,0.000000,-0.062781,-0.258819,0.0,-0.965926,0.040323,0.428710,-0.267984,-0.008484,-0.055806,-0.495722,-0.130536,-0.858615,0.843260,0.425911,-0.252442,-0.008484,-0.062244,-0.256604,-0.130536,-0.957661,0.843548,0.425780,-0.267984,0.008484,-0.055806,-0.495722,0.130536,-0.858615,0.818840,0.389640,-0.252586,0.000000,-0.062781,-0.258819,0.0,-0.965926,0.819330,0.389289,-0.268262,0.000000,-0.056288,-0.500000,0.0,-0.866025,0.818840,0.389289,-0.252442,0.008484,-0.062244,-0.256604,0.130536,-0.957661,0.819278,0.389640,-0.267154,0.016822,-0.054370,-0.482961,0.258837,-0.836512,0.982687,0.328610,-0.252442,0.008484,-0.062244,-0.256604,0.130536,-0.957661,0.794545,0.364872,-0.267984,0.008484,-0.055806,-0.495722,0.130536,-0.858615,0.785150,0.328251,-0.252013,0.016822,-0.060642,-0.249999,0.258837,-0.933008,0.018060,0.367482,-0.265788,0.024873,-0.052003,-0.461935,0.382707,-0.800095,0.963306,0.291990,-0.252013,0.016822,-0.060642,-0.249999,0.258837,-0.933008,0.784935,0.328251,-0.267154,0.016822,-0.054370,-0.482961,0.258837,-0.836512,0.794430,0.328120,-0.251306,0.024873,-0.058002,-0.239115,0.382707,-0.892390,0.982687,0.328610,-0.263908,0.032498,-0.048747,-0.433005,0.500027,-0.749986,0.762690,0.267570,-0.251306,0.024873,-0.058002,-0.239115,0.382707,-0.892390,0.760740,0.291629,-0.265788,0.024873,-0.052003,-0.461935,0.382707,-0.800095,0.760250,0.291634,-0.250332,0.032498,-0.054370,-0.224140,0.500027,-0.836501,0.760250,0.291990,-0.261546,0.039567,-0.044656,-0.396666,0.608790,-0.687046,0.924075,0.230950,-0.250332,0.032498,-0.054370,-0.224140,0.500027,-0.836501,0.735946,0.267214,-0.263908,0.032498,-0.048747,-0.433005,0.500027,-0.749986,0.726070,0.230583,-0.249110,0.039567,-0.049807,-0.205329,0.608790,-0.766300,0.958000,0.267383,-0.258743,0.045959,-0.039801,-0.353540,0.707133,-0.612350,0.904708,0.194330,-0.249110,0.039567,-0.049807,-0.205329,0.608790,-0.766300,0.726342,0.230583,-0.261546,0.039567,-0.044656,-0.396666,0.608790,-0.687046,0.728510,0.230460,-0.247659,0.045959,-0.044393,-0.183006,0.707133,-0.682988,0.924075,0.230950,-0.258743,0.045959,-0.039801,-0.353540,0.707133,-0.612350,0.701660,0.193969,-0.246005,0.051564,-0.038219,-0.157552,0.793375,-0.587991,0.701660,0.194330,-0.247659,0.045959,-0.044393,-0.183006,0.707133,-0.682988,0.702140,0.193960,-0.255547,0.051564,-0.034266,-0.304367,0.793375,-0.527178,0.704100,0.169920,-0.246005,0.051564,-0.038219,-0.157552,0.793375,-0.587991,0.677354,0.169540,-0.252013,0.056288,-0.028144,-0.178100,0.934410,-0.308479,0.882423,0.145500,-0.244175,0.056288,-0.031390,-0.092191,0.934410,-0.344063,0.899410,0.169720,-0.255547,0.051564,-0.034266,-0.304367,0.793375,-0.527178,0.665030,0.145095,-0.244175,0.056288,-0.031390,-0.092191,0.934410,-0.344063,0.665164,0.145095,-0.248200,0.057362,-0.021540,-0.040228,0.996758,-0.069677,0.875000,0.132957,-0.242202,0.057362,-0.024025,-0.020823,0.996758,-0.077714,0.882423,0.145500,-0.252013,0.056288,-0.028144,-0.178100,0.934410,-0.308479,0.650390,0.133156,-0.239863,0.057553,-0.015296,0.073860,0.958416,0.275650,0.875000,0.132957,-0.242202,0.057362,-0.024025,-0.020823,0.996758,-0.077714,0.650429,0.133156,-0.248200,0.057362,-0.021540,-0.040228,0.996758,-0.069677,0.608880,0.120733,-0.243682,0.057553,-0.013714,0.142687,0.958416,0.247141,0.843382,0.121090,-0.238982,0.055220,-0.012009,0.204946,0.610717,0.764867,0.611462,0.121090,-0.240006,0.044143,-0.007347,0.470974,0.335759,0.815751,0.846038,0.108880,-0.237960,0.044143,-0.008195,0.243794,0.335759,0.909852,0.845912,0.121090,-0.241980,0.055220,-0.010767,0.395924,0.610717,0.685761,0.609183,0.108880,-0.237960,0.044143,-0.008195,-0.016928,0.997859,-0.063175,0.846038,0.108880,-0.240006,0.044143,-0.007347,-0.032702,0.997859,-0.056641,0.797360,0.108390,-0.235764,-0.064439,-0.008484,0.0,-0.991446,-0.130517,0.450386,0.758300,-0.235764,-0.064439,-0.008484,0.0,-0.991446,-0.130517,0.414060,0.721190,-0.240118,-0.062781,-0.016249,-0.066983,-0.965931,-0.249983,0.421243,0.721680,-0.235764,-0.062781,-0.016822,0.0,-0.965931,-0.258801,0.450386,0.758300,-0.237960,-0.064439,-0.008195,-0.033780,-0.991446,-0.126069,0.216168,0.721680,-0.235764,-0.060048,-0.024873,0.0,-0.923890,-0.382659,0.421243,0.721680,-0.235764,-0.062781,-0.016822,0.0,-0.965931,-0.258801,0.218608,0.721427,-0.240118,-0.062781,-0.016249,-0.066983,-0.965931,-0.249983,0.213370,0.697034,-0.242202,-0.060048,-0.024025,-0.099040,-0.923890,-0.369621,0.416031,0.697260,-0.235764,-0.060048,-0.024873,0.0,-0.923890,-0.382659,0.360350,0.660150,-0.242202,-0.060048,-0.024025,-0.099040,-0.923890,-0.369621,0.194014,0.660640,-0.235764,-0.056288,-0.032498,0.0,-0.866041,-0.499972,0.416031,0.697260,-0.244175,-0.056288,-0.031390,-0.129402,-0.866041,-0.482936,0.391778,0.660640,-0.235764,-0.056288,-0.032498,0.0,-0.866041,-0.499972,0.355460,0.623530,-0.244175,-0.056288,-0.031390,-0.129402,-0.866041,-0.482936,0.159991,0.624020,-0.235764,-0.051564,-0.039567,0.0,-0.793375,-0.608733,0.391778,0.660640,-0.246005,-0.051564,-0.038219,-0.157552,-0.793375,-0.587991,0.362635,0.624020,-0.235764,-0.051564,-0.039567,0.0,-0.793375,-0.608733,0.159990,0.623818,-0.247659,-0.045959,-0.044393,-0.183006,-0.707133,-0.682988,0.357420,0.599579,-0.235764,-0.045959,-0.045959,0.000000,-0.707133,-0.707081,0.362635,0.624020,-0.246005,-0.051564,-0.038219,-0.157552,-0.793375,-0.587991,0.154780,0.599406,-0.249110,-0.039567,-0.049807,-0.205329,-0.608790,-0.766300,0.333156,0.562980,-0.235764,-0.039567,-0.051564,-0.000000,-0.608790,-0.793332,0.357420,0.599579,-0.247659,-0.045959,-0.044393,-0.183006,-0.707133,-0.682988,0.135250,0.562790,-0.235764,-0.045959,-0.045959,0.000000,-0.707133,-0.707081,0.301750,0.562500,-0.250332,-0.032498,-0.054370,-0.224140,-0.500027,-0.836501,0.296718,0.526360,-0.235764,-0.032498,-0.056288,0.000000,-0.500027,-0.866010,0.333156,0.562980,-0.249110,-0.039567,-0.049807,-0.205329,-0.608790,-0.766300,0.101379,0.526360,-0.235764,-0.039567,-0.051564,-0.000000,-0.608790,-0.793332,0.296870,0.525870,-0.251306,-0.024873,-0.058002,-0.239115,-0.382707,-0.892390,0.303710,0.526342,-0.235764,-0.024873,-0.060048,0.0,-0.382707,-0.923870,0.304016,0.526360,-0.250332,-0.032498,-0.054370,-0.224140,-0.500027,-0.836501,0.082005,0.489740,-0.235764,-0.032498,-0.056288,0.000000,-0.500027,-0.866010,0.304041,0.525870,-0.252013,-0.016822,-0.060642,-0.249999,-0.258837,-0.933008,0.279290,0.489724,-0.235764,-0.016822,-0.062781,-0.000000,-0.258837,-0.965921,0.279757,0.489740,-0.251306,-0.024873,-0.058002,-0.239115,-0.382707,-0.892390,0.076660,0.465142,-0.235764,-0.024873,-0.060048,0.0,-0.382707,-0.923870,0.279778,0.489250,-0.252442,-0.008484,-0.062244,-0.256604,-0.130536,-0.957661,0.245399,0.428710,-0.235764,-0.008484,-0.064439,0.000000,-0.130536,-0.991444,0.274543,0.465330,-0.252013,-0.016822,-0.060642,-0.249999,-0.258837,-0.933008,0.042762,0.428710,-0.235764,-0.016822,-0.062781,-0.000000,-0.258837,-0.965921,0.245600,0.428220,-0.252586,0.000000,-0.062781,-0.258819,0.0,-0.965926,0.245110,0.428694,-0.235764,0.000000,-0.064995,0.0,0.0,-1.0,0.245399,0.428710,-0.252442,-0.008484,-0.062244,-0.256604,-0.130536,-0.957661,0.023386,0.392090,-0.235764,-0.008484,-0.064439,0.000000,-0.130536,-0.991444,0.245556,0.428220,-0.252442,0.008484,-0.062244,-0.256604,0.130536,-0.957661,0.220700,0.392072,-0.235764,0.000000,-0.064995,0.0,0.0,-1.0,0.221138,0.391600,-0.252586,0.000000,-0.062781,-0.258819,0.0,-0.965926,0.018060,0.367482,-0.235764,0.008484,-0.064439,0.000000,0.130536,-0.991444,0.221146,0.392090,-0.252013,0.016822,-0.060642,-0.249999,0.258837,-0.933008,0.186792,0.331050,-0.235764,0.008484,-0.064439,0.000000,0.130536,-0.991444,0.187010,0.330560,-0.252442,0.008484,-0.062244,-0.256604,0.130536,-0.957661,0.982687,0.328610,-0.235764,0.016822,-0.062781,-0.000000,0.258837,-0.965921,0.215931,0.367670,-0.251306,0.024873,-0.058002,-0.239115,0.382707,-0.892390,0.186520,0.331024,-0.235764,0.016822,-0.062781,-0.000000,0.258837,-0.965921,0.186520,0.330560,-0.252013,0.016822,-0.060642,-0.249999,0.258837,-0.933008,0.963306,0.291990,-0.235764,0.024873,-0.060048,0.0,0.382707,-0.923870,0.186792,0.331050,-0.250332,0.032498,-0.054370,-0.224140,0.500027,-0.836501,0.162100,0.294399,-0.235764,0.024873,-0.060048,0.0,0.382707,-0.923870,0.162100,0.293940,-0.251306,0.024873,-0.058002,-0.239115,0.382707,-0.892390,0.958000,0.267383,-0.235764,0.032498,-0.056288,0.000000,0.500027,-0.866010,0.162531,0.294430,-0.249110,0.039567,-0.049807,-0.205329,0.608790,-0.766300,0.128187,0.233390,-0.235764,0.032498,-0.056288,0.000000,0.500027,-0.866010,0.958105,0.267382,-0.250332,0.032498,-0.054370,-0.224140,0.500027,-0.836501,0.924075,0.230950,-0.235764,0.039567,-0.051564,-0.000000,0.608789,-0.793332,0.157321,0.270020,-0.247659,0.045959,-0.044393,-0.183006,0.707133,-0.682988,0.931150,0.230950,-0.235764,0.039567,-0.051564,-0.000000,0.608789,-0.793332,0.924087,0.230755,-0.249110,0.039567,-0.049807,-0.205329,0.608790,-0.766300,0.904708,0.194330,-0.235764,0.045959,-0.045959,0.000000,0.707133,-0.707081,0.128187,0.233390,-0.247659,0.045959,-0.044393,-0.183006,0.707133,-0.682988,0.899410,0.169720,-0.235764,0.051564,-0.039567,0.0,0.793375,-0.608733,0.103938,0.196770,-0.235764,0.045959,-0.045959,0.000000,0.707133,-0.707081,0.103510,0.196280,-0.246005,0.051564,-0.038219,-0.157552,0.793375,-0.587991,0.103510,0.196716,-0.235764,0.051564,-0.039567,0.0,0.793375,-0.608733,0.899518,0.169716,-0.244175,0.056288,-0.031390,-0.092191,0.934410,-0.344063,0.086492,0.147940,-0.235764,0.056288,-0.032498,0.000000,0.934410,-0.356200,0.098732,0.172360,-0.246005,0.051564,-0.038219,-0.157552,0.793375,-0.587991,0.882423,0.145500,-0.235764,0.056288,-0.032498,0.000000,0.934410,-0.356200,0.882427,0.145431,-0.242202,0.057362,-0.024025,-0.020823,0.996758,-0.077714,0.079181,0.135740,-0.235764,0.057362,-0.024873,-0.000000,0.996758,-0.080456,0.086492,0.147940,-0.244175,0.056288,-0.031390,-0.092191,0.934410,-0.344063,0.875000,0.132957,-0.242202,0.057362,-0.024025,-0.020823,0.996758,-0.077714,0.843382,0.121090,-0.235764,0.057553,-0.015836,0.0,0.958416,0.285374,0.079181,0.135740,-0.235764,0.057362,-0.024873,-0.000000,0.996758,-0.080456,0.875088,0.132956,-0.239863,0.057553,-0.015296,0.073860,0.958416,0.275650,0.069435,0.111320,-0.235764,0.055220,-0.012432,0.0,0.610717,0.791849,0.845912,0.121090,-0.237960,0.044143,-0.008195,0.243794,0.335759,0.909852,0.052542,0.111320,-0.235764,0.044143,-0.008484,0.0,0.335759,0.941948,0.067076,0.111320,-0.238982,0.055220,-0.012009,0.204946,0.610717,0.764867,0.846038,0.108880,-0.235764,0.044143,-0.008484,0.0,0.997859,-0.065403,0.052542,0.111320,-0.237960,0.044143,-0.008195,-0.016928,0.997859,-0.063175,0.047675,0.110840,-0.233568,-0.064439,-0.008195,0.033780,-0.991446,-0.126069,0.648139,0.746090,-0.231410,-0.062781,-0.016249,0.066983,-0.965931,-0.249983,0.648139,0.746090,-0.233568,-0.064439,-0.008195,0.033780,-0.991446,-0.126069,0.631340,0.708980,-0.235764,-0.064439,-0.008484,0.0,-0.991446,-0.130517,0.421243,0.721680,-0.235764,-0.062781,-0.016822,0.0,-0.965931,-0.258801,0.631210,0.709470,-0.235764,-0.060048,-0.024873,0.0,-0.923890,-0.382659,0.613770,0.684715,-0.231410,-0.062781,-0.016249,0.066983,-0.965931,-0.249983,0.614250,0.684570,-0.235764,-0.062781,-0.016822,0.0,-0.965931,-0.258801,0.416031,0.697260,-0.229327,-0.060048,-0.024025,0.099040,-0.923890,-0.369620,0.631210,0.709470,-0.235764,-0.060048,-0.024873,0.0,-0.923890,-0.382659,0.391778,0.660640,-0.235764,-0.056288,-0.032498,0.0,-0.866041,-0.499972,0.589531,0.648430,-0.227353,-0.056288,-0.031390,0.129402,-0.866041,-0.482936,0.577630,0.648430,-0.229327,-0.060048,-0.024025,0.099040,-0.923890,-0.369620,0.577630,0.647940,-0.235764,-0.051564,-0.039567,0.0,-0.793375,-0.608733,0.572606,0.611810,-0.227353,-0.056288,-0.031390,0.129402,-0.866041,-0.482936,0.572750,0.611320,-0.235764,-0.056288,-0.032498,0.0,-0.866041,-0.499972,0.362635,0.624020,-0.225523,-0.051564,-0.038219,0.157552,-0.793375,-0.587991,0.589531,0.648430,-0.235764,-0.045959,-0.045959,0.000000,-0.707133,-0.707081,0.555170,0.587065,-0.225523,-0.051564,-0.038219,0.157552,-0.793375,-0.587991,0.555660,0.586910,-0.235764,-0.051564,-0.039567,0.0,-0.793375,-0.608733,0.357420,0.599579,-0.223869,-0.045959,-0.044393,0.183006,-0.707133,-0.682988,0.572606,0.611810,-0.235764,-0.039567,-0.051564,-0.000000,-0.608790,-0.793332,0.530760,0.550447,-0.223869,-0.045959,-0.044393,0.183006,-0.707133,-0.682988,0.492180,0.550290,-0.235764,-0.045959,-0.045959,0.000000,-0.707133,-0.707081,0.333156,0.562980,-0.222418,-0.039567,-0.049807,0.205329,-0.608790,-0.766300,0.492180,0.550780,-0.235764,-0.032498,-0.056288,0.000000,-0.500027,-0.866010,0.513992,0.514160,-0.222418,-0.039567,-0.049807,0.205329,-0.608790,-0.766300,0.514160,0.513670,-0.235764,-0.039567,-0.051564,-0.000000,-0.608790,-0.793332,0.296718,0.526360,-0.221196,-0.032498,-0.054370,0.224140,-0.500027,-0.836501,0.530760,0.550447,-0.235764,-0.024873,-0.060048,0.0,-0.382707,-0.923870,0.494606,0.477530,-0.221196,-0.032498,-0.054370,0.224140,-0.500027,-0.836501,0.494620,0.477200,-0.235764,-0.032498,-0.056288,0.000000,-0.500027,-0.866010,0.494620,0.477200,-0.220223,-0.024873,-0.058002,0.239115,-0.382707,-0.892390,0.513992,0.514160,-0.235764,-0.016822,-0.062781,-0.000000,-0.258837,-0.965921,0.472160,0.452788,-0.220223,-0.024873,-0.058002,0.239115,-0.382707,-0.892390,0.279757,0.489724,-0.235764,-0.024873,-0.060048,0.0,-0.382707,-0.923870,0.274543,0.465330,-0.219515,-0.016822,-0.060642,0.249999,-0.258837,-0.933008,0.494606,0.477530,-0.235764,-0.008484,-0.064439,0.000000,-0.130536,-0.991444,0.455362,0.416500,-0.219515,-0.016822,-0.060642,0.249999,-0.258837,-0.933008,0.455560,0.416010,-0.235764,-0.016822,-0.062781,-0.000000,-0.258837,-0.965921,0.455512,0.416010,-0.219086,-0.008484,-0.062244,0.256604,-0.130536,-0.957661,0.472160,0.452788,-0.235764,0.000000,-0.064995,0.0,0.0,-1.0,0.462400,0.416167,-0.219086,-0.008484,-0.062244,0.256604,-0.130536,-0.957661,0.462692,0.416010,-0.235764,-0.008484,-0.064439,0.000000,-0.130536,-0.991444,0.462400,0.416010,-0.218942,0.000000,-0.062781,0.258819,0.0,-0.965926,0.462690,0.416010,-0.235764,0.008484,-0.064439,0.000000,0.130536,-0.991444,0.437980,0.379549,-0.219086,0.008484,-0.062244,0.256604,0.130536,-0.957661,0.438470,0.379548,-0.235764,0.000000,-0.064995,0.0,0.0,-1.0,0.215931,0.367670,-0.218942,0.000000,-0.062781,0.258819,0.0,-0.965926,0.438418,0.379390,-0.235764,0.016822,-0.062781,-0.000000,0.258837,-0.965921,0.404290,0.318507,-0.219515,0.016822,-0.060642,0.249999,0.258837,-0.933008,0.413570,0.355135,-0.235764,0.008484,-0.064439,0.000000,0.130536,-0.991444,0.215820,0.354980,-0.219086,0.008484,-0.062244,0.256604,0.130536,-0.957661,0.215931,0.367654,-0.235764,0.024873,-0.060048,0.0,0.382707,-0.923870,0.210930,0.318840,-0.220223,0.024873,-0.058002,0.239115,0.382707,-0.892390,0.404290,0.318507,-0.235764,0.016822,-0.062781,-0.000000,0.258837,-0.965921,0.210930,0.318350,-0.219515,0.016822,-0.060642,0.249999,0.258837,-0.933008,0.186792,0.331034,-0.235764,0.032498,-0.056288,0.000000,0.500027,-0.866010,0.354980,0.257477,-0.221196,0.032498,-0.054370,0.224140,0.500027,-0.836501,0.311520,0.257675,-0.235764,0.024873,-0.060048,0.0,0.382707,-0.923870,0.157321,0.270020,-0.220223,0.024873,-0.058002,0.239115,0.382707,-0.892390,0.311520,0.257320,-0.235764,0.039567,-0.051564,-0.000000,0.608789,-0.793332,0.345210,0.220856,-0.222418,0.039567,-0.049807,0.205329,0.608790,-0.766300,0.354980,0.257477,-0.235764,0.032498,-0.056288,0.000000,0.500027,-0.866010,0.128187,0.233390,-0.221196,0.032498,-0.054370,0.224140,0.500027,-0.836501,0.157322,0.270002,-0.235764,0.045959,-0.045959,0.000000,0.707133,-0.707081,0.149900,0.221190,-0.223869,0.045959,-0.044393,0.183006,0.707133,-0.682988,0.345210,0.220856,-0.235764,0.039567,-0.051564,-0.000000,0.608789,-0.793332,0.149900,0.220700,-0.222418,0.039567,-0.049807,0.205329,0.608790,-0.766300,0.128189,0.233371,-0.225523,0.051564,-0.038219,0.157552,0.793375,-0.587991,0.321280,0.184236,-0.235764,0.045959,-0.045959,0.000000,0.707133,-0.707081,0.098732,0.172360,-0.235764,0.051564,-0.039567,0.0,0.793375,-0.608733,0.320800,0.184246,-0.223869,0.045959,-0.044393,0.183006,0.707133,-0.682988,0.320800,0.184080,-0.227353,0.056288,-0.031390,0.092191,0.934410,-0.344063,0.296380,0.159815,-0.235764,0.051564,-0.039567,0.0,0.793375,-0.608733,0.086492,0.147940,-0.235764,0.056288,-0.032498,0.000000,0.934410,-0.356200,0.284180,0.135443,-0.225523,0.051564,-0.038219,0.157552,0.793375,-0.587991,0.098734,0.172335,-0.235764,0.057362,-0.024873,-0.000000,0.996758,-0.080456,0.284592,0.111320,-0.227353,0.056288,-0.031390,0.092191,0.934410,-0.344063,0.086499,0.147832,-0.235764,0.056288,-0.032498,0.000000,0.934410,-0.356200,0.079181,0.135740,-0.229327,0.057362,-0.024025,0.020823,0.996758,-0.077714,0.284180,0.135443,-0.235764,0.057553,-0.015836,0.0,0.958416,0.285374,0.296380,0.111243,-0.229327,0.057362,-0.024025,0.020823,0.996758,-0.077714,0.079182,0.135727,-0.235764,0.057362,-0.024873,-0.000000,0.996758,-0.080456,0.069435,0.111320,-0.231665,0.057553,-0.015296,-0.073860,0.958416,0.275650,0.284592,0.111320,-0.233568,0.044143,-0.008195,-0.243794,0.335759,0.909852,0.298935,0.111320,-0.232546,0.055220,-0.012009,-0.204946,0.610717,0.764867,0.067076,0.111320,-0.235764,0.055220,-0.012432,0.0,0.610717,0.791849,0.052542,0.111320,-0.235764,0.044143,-0.008484,0.0,0.335759,0.941948,0.306406,0.099120,-0.233568,0.044143,-0.008195,0.016928,0.997859,-0.063175,0.306406,0.099120,-0.235764,0.044143,-0.008484,0.0,0.997859,-0.065403,0.281858,0.098630,-0.231522,-0.064439,-0.007347,0.065258,-0.991446,-0.113031,0.870308,0.746090,-0.233568,-0.064439,-0.008195,0.033780,-0.991446,-0.126069,0.631210,0.709470,-0.231410,-0.062781,-0.016249,0.066983,-0.965931,-0.249983,0.836285,0.709470,-0.227353,-0.062781,-0.014568,0.129401,-0.965931,-0.224128,0.870308,0.746090,-0.231522,-0.064439,-0.007347,0.065258,-0.991446,-0.113031,0.833980,0.708980,-0.229327,-0.060048,-0.024025,0.099040,-0.923890,-0.369620,0.614237,0.685050,-0.227353,-0.062781,-0.014568,0.129401,-0.965931,-0.224128,0.614250,0.684740,-0.231410,-0.062781,-0.016249,0.066983,-0.965931,-0.249983,0.613770,0.684715,-0.223328,-0.060048,-0.021540,0.191330,-0.923890,-0.331393,0.833856,0.709470,-0.227353,-0.056288,-0.031390,0.129402,-0.866041,-0.482936,0.811701,0.648430,-0.223328,-0.060048,-0.021540,0.191330,-0.923890,-0.331393,0.775390,0.647940,-0.229327,-0.060048,-0.024025,0.099040,-0.923890,-0.369620,0.589531,0.648430,-0.219515,-0.056288,-0.028144,0.249986,-0.866041,-0.432989,0.775390,0.648430,-0.225523,-0.051564,-0.038219,0.157552,-0.793375,-0.587991,0.777677,0.611810,-0.215981,-0.051564,-0.034266,0.304367,-0.793375,-0.527178,0.811701,0.648430,-0.227353,-0.056288,-0.031390,0.129402,-0.866041,-0.482936,0.572606,0.611810,-0.219515,-0.056288,-0.028144,0.249986,-0.866041,-0.432989,0.775390,0.611320,-0.223869,-0.045959,-0.044393,0.183006,-0.707133,-0.682988,0.555660,0.587400,-0.215981,-0.051564,-0.034266,0.304367,-0.793375,-0.527178,0.555660,0.587076,-0.225523,-0.051564,-0.038219,0.157552,-0.793375,-0.587991,0.555170,0.587065,-0.212785,-0.045959,-0.039801,0.353540,-0.707133,-0.612350,0.775257,0.611810,-0.222418,-0.039567,-0.049807,0.205329,-0.608790,-0.766300,0.753084,0.550780,-0.212785,-0.045959,-0.039801,0.353540,-0.707133,-0.612350,0.714350,0.550290,-0.223869,-0.045959,-0.044393,0.183006,-0.707133,-0.682988,0.530760,0.550447,-0.209982,-0.039567,-0.044656,0.396666,-0.608790,-0.687045,0.714350,0.550780,-0.221196,-0.032498,-0.054370,0.224140,-0.500027,-0.836501,0.719057,0.514160,-0.209982,-0.039567,-0.044656,0.396666,-0.608790,-0.687045,0.716790,0.513670,-0.222418,-0.039567,-0.049807,0.205329,-0.608790,-0.766300,0.513992,0.514160,-0.207620,-0.032498,-0.048747,0.433005,-0.500027,-0.749986,0.753084,0.550780,-0.220223,-0.024873,-0.058002,0.239115,-0.382707,-0.892390,0.518564,0.489740,-0.207620,-0.032498,-0.048747,0.433005,-0.500027,-0.749986,0.521303,0.513670,-0.221196,-0.032498,-0.054370,0.224140,-0.500027,-0.836501,0.494606,0.477530,-0.205740,-0.024873,-0.052003,0.461935,-0.382707,-0.800095,0.716632,0.514160,-0.219515,-0.016822,-0.060642,0.249999,-0.258837,-0.933008,0.694330,0.452961,-0.205740,-0.024873,-0.052003,0.461935,-0.382707,-0.800095,0.497048,0.477203,-0.220223,-0.024873,-0.058002,0.239115,-0.382707,-0.892390,0.472160,0.452788,-0.204374,-0.016822,-0.054370,0.482960,-0.258837,-0.836512,0.699679,0.477530,-0.219086,-0.008484,-0.062244,0.256604,-0.130536,-0.957661,0.658005,0.416500,-0.204374,-0.016822,-0.054370,0.482960,-0.258837,-0.836512,0.658200,0.416010,-0.219515,-0.016822,-0.060642,0.249999,-0.258837,-0.933008,0.455362,0.416500,-0.203544,-0.008484,-0.055806,0.495722,-0.130536,-0.858615,0.694330,0.452961,-0.218942,0.000000,-0.062781,0.258819,0.0,-0.965926,0.462400,0.416500,-0.203544,-0.008484,-0.055806,0.495722,-0.130536,-0.858615,0.462690,0.416010,-0.219086,-0.008484,-0.062244,0.256604,-0.130536,-0.957661,0.462400,0.416167,-0.203266,0.000000,-0.056288,0.500000,0.0,-0.866025,0.658005,0.416500,-0.219086,0.008484,-0.062244,0.256604,0.130536,-0.957661,0.437980,0.379880,-0.203544,0.008484,-0.055806,0.495722,0.130536,-0.858615,0.438418,0.379880,-0.218942,0.000000,-0.062781,0.258819,0.0,-0.965926,0.437980,0.379549,-0.203266,0.000000,-0.056288,0.500000,0.0,-0.866025,0.438470,0.379548,-0.219515,0.016822,-0.060642,0.249999,0.258837,-0.933008,0.601827,0.318840,-0.204374,0.016822,-0.054370,0.482961,0.258837,-0.836512,0.635740,0.355304,-0.219086,0.008484,-0.062244,0.256604,0.130536,-0.957661,0.404290,0.318507,-0.203544,0.008484,-0.055806,0.495722,0.130536,-0.858615,0.413683,0.355134,-0.204374,0.016822,-0.054370,0.482961,0.258837,-0.836512,0.404072,0.318507,-0.219515,0.016822,-0.060642,0.249999,0.258837,-0.933008,0.413570,0.318350,-0.205740,0.024873,-0.052003,0.461935,0.382707,-0.800095,0.601827,0.318840,-0.220223,0.024873,-0.058002,0.239115,0.382707,-0.892390,0.413570,0.318840,-0.205740,0.024873,-0.052003,0.461935,0.382707,-0.800095,0.379880,0.281887,-0.220223,0.024873,-0.058002,0.239115,0.382707,-0.892390,0.311520,0.257675,-0.207620,0.032498,-0.048747,0.433005,0.500027,-0.749986,0.379390,0.282220,-0.221196,0.032498,-0.054370,0.224140,0.500027,-0.836501,0.394040,0.257757,-0.207620,0.032498,-0.048747,0.433005,0.500027,-0.749986,0.355079,0.257476,-0.221196,0.032498,-0.054370,0.224140,0.500027,-0.836501,0.345210,0.220856,-0.209982,0.039567,-0.044656,0.396666,0.608790,-0.687045,0.577140,0.257652,-0.222418,0.039567,-0.049807,0.205329,0.608790,-0.766300,0.543212,0.221190,-0.209982,0.039567,-0.044656,0.396666,0.608790,-0.687045,0.345473,0.220855,-0.222418,0.039567,-0.049807,0.205329,0.608790,-0.766300,0.347650,0.220700,-0.212785,0.045959,-0.039801,0.353540,0.707133,-0.612350,0.543212,0.221190,-0.223869,0.045959,-0.044393,0.183006,0.707133,-0.682988,0.347650,0.221190,-0.215981,0.051564,-0.034266,0.304367,0.793375,-0.527178,0.320800,0.184570,-0.223869,0.045959,-0.044393,0.183006,0.707133,-0.682988,0.320800,0.184246,-0.225523,0.051564,-0.038219,0.157552,0.793375,-0.587991,0.323240,0.160150,-0.212785,0.045959,-0.039801,0.353540,0.707133,-0.612350,0.321280,0.184236,-0.227353,0.056288,-0.031390,0.092191,0.934410,-0.344063,0.501460,0.135641,-0.215981,0.051564,-0.034266,0.304367,0.793375,-0.527178,0.296498,0.159813,-0.225523,0.051564,-0.038219,0.157552,0.793375,-0.587991,0.284180,0.135443,-0.219515,0.056288,-0.028144,0.178100,0.934410,-0.308479,0.518644,0.160150,-0.229327,0.057362,-0.024025,0.020823,0.996758,-0.077714,0.482267,0.111320,-0.219515,0.056288,-0.028144,0.178100,0.934410,-0.308479,0.486810,0.123040,-0.227353,0.056288,-0.031390,0.092191,0.934410,-0.344063,0.284592,0.111320,-0.223328,0.057362,-0.021540,0.040228,0.996758,-0.069677,0.487300,0.123431,-0.231665,0.057553,-0.015296,-0.073860,0.958416,0.275650,0.526265,0.111320,-0.223328,0.057362,-0.021540,0.040228,0.996758,-0.069677,0.506830,0.110840,-0.229327,0.057362,-0.024025,0.020823,0.996758,-0.077714,0.296380,0.111243,-0.227846,0.057553,-0.013714,-0.142687,0.958416,0.247141,0.482267,0.111320,-0.231522,0.044143,-0.007347,-0.470974,0.335759,0.815751,0.533252,0.111320,-0.229548,0.055220,-0.010767,-0.395924,0.610717,0.685761,0.298935,0.111320,-0.232546,0.055220,-0.012009,-0.204946,0.610717,0.764867,0.306406,0.099120,-0.233568,0.044143,-0.008195,-0.243794,0.335759,0.909852,0.552934,0.099120,-0.231522,0.044143,-0.007347,0.032702,0.997859,-0.056641,0.552934,0.099120,-0.233568,0.044143,-0.008195,0.016928,0.997859,-0.063175,0.460440,0.074210,-0.229765,-0.064439,-0.005999,0.092289,-0.991446,-0.092289,0.076853,0.748530,-0.223869,-0.062781,-0.011895,0.183000,-0.965931,-0.183000,0.076853,0.748530,-0.231522,-0.064439,-0.007347,0.065258,-0.991446,-0.113031,0.836285,0.709470,-0.227353,-0.062781,-0.014568,0.129401,-0.965931,-0.224128,0.040385,0.711910,-0.229765,-0.064439,-0.005999,0.092289,-0.991446,-0.092289,0.040520,0.711420,-0.223328,-0.060048,-0.021540,0.191330,-0.923890,-0.331393,0.037631,0.687500,-0.223869,-0.062781,-0.011895,0.183000,-0.965931,-0.183000,0.831540,0.684903,-0.227353,-0.062781,-0.014568,0.129401,-0.965931,-0.224128,0.831050,0.684903,-0.218176,-0.060048,-0.017588,0.270581,-0.923890,-0.270581,0.040385,0.711910,-0.219515,-0.056288,-0.028144,0.249986,-0.866041,-0.432989,0.018060,0.650420,-0.218176,-0.060048,-0.017588,0.270581,-0.923890,-0.270581,0.978020,0.647940,-0.223328,-0.060048,-0.021540,0.191330,-0.923890,-0.331393,0.811701,0.648430,-0.212785,-0.056288,-0.022979,0.353534,-0.866041,-0.353534,0.037590,0.687048,-0.215981,-0.051564,-0.034266,0.304367,-0.793375,-0.527178,0.980310,0.611810,-0.207786,-0.051564,-0.027978,0.430439,-0.793375,-0.430439,0.018060,0.650420,-0.219515,-0.056288,-0.028144,0.249986,-0.866041,-0.432989,0.777677,0.611810,-0.212785,-0.056288,-0.022979,0.353534,-0.866041,-0.353534,0.980460,0.611320,-0.212785,-0.045959,-0.039801,0.353540,-0.707133,-0.612350,0.977560,0.587400,-0.207786,-0.051564,-0.027978,0.430439,-0.793375,-0.430439,0.772940,0.587243,-0.215981,-0.051564,-0.034266,0.304367,-0.793375,-0.527178,0.772460,0.587243,-0.203266,-0.045959,-0.032498,0.499982,-0.707133,-0.499982,0.980310,0.611810,-0.209982,-0.039567,-0.044656,0.396666,-0.608790,-0.687045,0.958000,0.550309,-0.199303,-0.039567,-0.036462,0.560970,-0.608790,-0.560970,0.977530,0.586930,-0.212785,-0.045959,-0.039801,0.353540,-0.707133,-0.612350,0.753084,0.550780,-0.203266,-0.045959,-0.032498,0.499982,-0.707133,-0.499982,0.919430,0.550290,-0.207620,-0.032498,-0.048747,0.433005,-0.500027,-0.749986,0.921693,0.514160,-0.199303,-0.039567,-0.036462,0.560970,-0.608790,-0.560970,0.921870,0.513670,-0.209982,-0.039567,-0.044656,0.396666,-0.608790,-0.687045,0.719057,0.514160,-0.195963,-0.032498,-0.039801,0.612361,-0.500027,-0.612361,0.958000,0.550309,-0.205740,-0.024873,-0.052003,0.461935,-0.382707,-0.800095,0.897438,0.477530,-0.195963,-0.032498,-0.039801,0.612361,-0.500027,-0.612361,0.897460,0.477053,-0.207620,-0.032498,-0.048747,0.433005,-0.500027,-0.749986,0.699679,0.477530,-0.193304,-0.024873,-0.042460,0.653275,-0.382707,-0.653275,0.921693,0.514160,-0.204374,-0.016822,-0.054370,0.482960,-0.258837,-0.836512,0.899410,0.452645,-0.193304,-0.024873,-0.042460,0.653275,-0.382707,-0.653275,0.699678,0.477375,-0.205740,-0.024873,-0.052003,0.461935,-0.382707,-0.800095,0.694330,0.452961,-0.191371,-0.016822,-0.044393,0.683009,-0.258837,-0.683009,0.897438,0.477530,-0.191371,-0.016822,-0.044393,0.683009,-0.258837,-0.683009,0.863280,0.416010,-0.203544,-0.008484,-0.055806,0.495722,-0.130536,-0.858615,0.863079,0.416500,-0.190199,-0.008484,-0.045566,0.701057,-0.130536,-0.701057,0.899410,0.452645,-0.204374,-0.016822,-0.054370,0.482960,-0.258837,-0.836512,0.658005,0.416500,-0.190199,-0.008484,-0.045566,0.701057,-0.130536,-0.701057,0.660440,0.416500,-0.203266,0.000000,-0.056288,0.500000,0.0,-0.866025,0.660150,0.416500,-0.189805,0.000000,-0.045959,0.707107,0.0,-0.707107,0.863079,0.416500,-0.203544,-0.008484,-0.055806,0.495722,-0.130536,-0.858615,0.660150,0.416342,-0.189805,0.000000,-0.045959,0.707107,0.0,-0.707107,0.641110,0.379721,-0.203266,0.000000,-0.056288,0.500000,0.0,-0.866025,0.640620,0.379721,-0.190199,0.008484,-0.045566,0.701057,0.130536,-0.701057,0.641058,0.379880,-0.203544,0.008484,-0.055806,0.495722,0.130536,-0.858615,0.638180,0.355460,-0.190199,0.008484,-0.045566,0.701057,0.130536,-0.701057,0.635853,0.355304,-0.203544,0.008484,-0.055806,0.495722,0.130536,-0.858615,0.601827,0.318840,-0.191371,0.016822,-0.044393,0.683009,0.258837,-0.683009,0.840820,0.354994,-0.204374,0.016822,-0.054370,0.482961,0.258837,-0.836512,0.630850,0.318840,-0.191371,0.016822,-0.044393,0.683009,0.258837,-0.683009,0.601832,0.318681,-0.204374,0.016822,-0.054370,0.482961,0.258837,-0.836512,0.630850,0.318350,-0.193304,0.024873,-0.042460,0.653274,0.382707,-0.653275,0.630850,0.318840,-0.205740,0.024873,-0.052003,0.461935,0.382707,-0.800095,0.630850,0.318840,-0.193304,0.024873,-0.042460,0.653274,0.382707,-0.653275,0.582520,0.282061,-0.205740,0.024873,-0.052003,0.461935,0.382707,-0.800095,0.582030,0.282061,-0.195963,0.032498,-0.039801,0.612361,0.500027,-0.612361,0.582030,0.282220,-0.207620,0.032498,-0.048747,0.433005,0.500027,-0.749986,0.579590,0.257810,-0.195963,0.032498,-0.039801,0.612361,0.500027,-0.612361,0.577241,0.257652,-0.207620,0.032498,-0.048747,0.433005,0.500027,-0.749986,0.543212,0.221190,-0.199303,0.039567,-0.036462,0.560970,0.608790,-0.560970,0.782220,0.257337,-0.209982,0.039567,-0.044656,0.396666,0.608790,-0.687045,0.767570,0.220718,-0.212785,0.045959,-0.039801,0.353540,0.707133,-0.612350,0.550290,0.221190,-0.199303,0.039567,-0.036462,0.560970,0.608790,-0.560970,0.543222,0.221032,-0.209982,0.039567,-0.044656,0.396666,0.608790,-0.687045,0.550290,0.220700,-0.203266,0.045959,-0.032498,0.499982,0.707133,-0.499982,0.767570,0.220718,-0.207786,0.051564,-0.027978,0.430439,0.793375,-0.430439,0.523430,0.184570,-0.212785,0.045959,-0.039801,0.353540,0.707133,-0.612350,0.523430,0.184413,-0.215981,0.051564,-0.034266,0.304367,0.793375,-0.527178,0.520990,0.160150,-0.203266,0.045959,-0.032498,0.499982,0.707133,-0.499982,0.523920,0.184413,-0.219515,0.056288,-0.028144,0.178100,0.934410,-0.308479,0.711668,0.123530,-0.207786,0.051564,-0.027978,0.430439,0.793375,-0.430439,0.518654,0.159994,-0.215981,0.051564,-0.034266,0.304367,0.793375,-0.527178,0.501460,0.135641,-0.212785,0.056288,-0.022979,0.251872,0.934410,-0.251872,0.723630,0.159675,-0.223328,0.057362,-0.021540,0.040228,0.996758,-0.069677,0.713860,0.111267,-0.212785,0.056288,-0.022979,0.251872,0.934410,-0.251872,0.714350,0.110840,-0.219515,0.056288,-0.028144,0.178100,0.934410,-0.308479,0.482267,0.111320,-0.218176,0.057362,-0.017588,0.056891,0.996758,-0.056891,0.711668,0.123530,-0.223328,0.057362,-0.021540,0.040228,0.996758,-0.069677,0.526265,0.111320,-0.227846,0.057553,-0.013714,-0.142687,0.958416,0.247141,0.738564,0.111320,-0.224566,0.057553,-0.011198,-0.201790,0.958416,0.201790,0.719214,0.111320,-0.218176,0.057362,-0.017588,0.056891,0.996758,-0.056891,0.482292,0.111062,-0.229765,0.044143,-0.005999,-0.666058,0.335759,0.666058,0.748530,0.098850,-0.226973,0.055220,-0.008791,-0.559922,0.610717,0.559922,0.533252,0.111320,-0.229548,0.055220,-0.010767,-0.395924,0.610717,0.685761,0.552934,0.099120,-0.231522,0.044143,-0.007347,-0.470974,0.335759,0.815751,0.748247,0.099120,-0.229765,0.044143,-0.005999,0.046247,0.997859,-0.046247,0.748247,0.099120,-0.231522,0.044143,-0.007347,0.032702,0.997859,-0.056641,0.579791,0.098718,-0.228417,-0.064439,-0.004242,0.113031,-0.991446,-0.065258,0.274601,0.748530,-0.221196,-0.062781,-0.008411,0.224128,-0.965931,-0.129401,0.274601,0.748530,-0.229765,-0.064439,-0.005999,0.092289,-0.991446,-0.092289,0.040385,0.711910,-0.223869,-0.062781,-0.011895,0.183000,-0.965931,-0.183000,0.264989,0.711910,-0.228417,-0.064439,-0.004242,0.113031,-0.991446,-0.065258,0.257810,0.711420,-0.214224,-0.060048,-0.012436,0.331393,-0.923890,-0.191330,0.264989,0.711910,-0.223869,-0.062781,-0.011895,0.183000,-0.965931,-0.183000,0.037590,0.687048,-0.218176,-0.060048,-0.017588,0.270581,-0.923890,-0.270581,0.240230,0.687235,-0.221196,-0.062781,-0.008411,0.224128,-0.965931,-0.129401,0.062363,0.711476,-0.207620,-0.056288,-0.016249,0.432989,-0.866041,-0.249986,0.240230,0.687235,-0.218176,-0.060048,-0.017588,0.270581,-0.923890,-0.270581,0.018060,0.650420,-0.212785,-0.056288,-0.022979,0.353534,-0.866041,-0.353534,0.215991,0.650870,-0.214224,-0.060048,-0.012436,0.331393,-0.923890,-0.191330,0.037611,0.687049,-0.201498,-0.051564,-0.019783,0.527178,-0.793375,-0.304367,0.215991,0.650870,-0.212785,-0.056288,-0.022979,0.353534,-0.866041,-0.353534,0.980310,0.611810,-0.207786,-0.051564,-0.027978,0.430439,-0.793375,-0.430439,0.199067,0.614250,-0.207620,-0.056288,-0.016249,0.432989,-0.866041,-0.249986,0.199210,0.613770,-0.203266,-0.045959,-0.032498,0.499982,-0.707133,-0.499982,0.181640,0.589547,-0.201498,-0.051564,-0.019783,0.527178,-0.793375,-0.304367,0.003745,0.613794,-0.207786,-0.051564,-0.027978,0.430439,-0.793375,-0.430439,0.977530,0.586930,-0.195963,-0.045959,-0.022979,0.612350,-0.707133,-0.353540,0.199067,0.614250,-0.191108,-0.039567,-0.025782,0.687046,-0.608790,-0.396666,0.181640,0.589547,-0.203266,-0.045959,-0.032498,0.499982,-0.707133,-0.499982,0.958000,0.550309,-0.199303,-0.039567,-0.036462,0.560970,-0.608790,-0.560970,0.157220,0.552923,-0.195963,-0.045959,-0.022979,0.612350,-0.707133,-0.353540,0.977531,0.586930,-0.187017,-0.032498,-0.028144,0.749986,-0.500027,-0.433005,0.157220,0.552923,-0.199303,-0.039567,-0.036462,0.560970,-0.608790,-0.560970,0.921693,0.514160,-0.195963,-0.032498,-0.039801,0.612361,-0.500027,-0.612361,0.140450,0.516600,-0.191108,-0.039567,-0.025782,0.687046,-0.608790,-0.396666,0.140620,0.516110,-0.183761,-0.024873,-0.030024,0.800095,-0.382707,-0.461935,0.140450,0.516600,-0.187017,-0.032498,-0.028144,0.749986,-0.500027,-0.433005,0.121090,0.479621,-0.195963,-0.032498,-0.039801,0.612361,-0.500027,-0.612361,0.897438,0.477530,-0.193304,-0.024873,-0.042460,0.653275,-0.382707,-0.653275,0.121075,0.479980,-0.181394,-0.016822,-0.031390,0.836512,-0.258837,-0.482961,0.121075,0.479980,-0.183761,-0.024873,-0.030024,0.800095,-0.382707,-0.461935,0.924288,0.477066,-0.193304,-0.024873,-0.042460,0.653275,-0.382707,-0.653275,0.899410,0.452645,-0.191371,-0.016822,-0.044393,0.683009,-0.258837,-0.683009,0.098630,0.455258,-0.179958,-0.008484,-0.032220,0.858615,-0.130536,-0.495722,0.885250,0.416500,-0.181394,-0.016822,-0.031390,0.836512,-0.258837,-0.482961,0.885250,0.416031,-0.191371,-0.016822,-0.044393,0.683009,-0.258837,-0.683009,0.885049,0.416010,-0.190199,-0.008484,-0.045566,0.701057,-0.130536,-0.701057,0.284607,0.418450,-0.179476,0.000000,-0.032498,0.866025,0.0,-0.500000,0.284607,0.418450,-0.179958,-0.008484,-0.032220,0.858615,-0.130536,-0.495722,0.885049,0.416010,-0.190199,-0.008484,-0.045566,0.701057,-0.130536,-0.701057,0.884760,0.416025,-0.189805,0.000000,-0.045959,0.707107,0.0,-0.707107,0.884760,0.416500,-0.179476,0.000000,-0.032498,0.866025,0.0,-0.500000,0.865676,0.379390,-0.190199,0.008484,-0.045566,0.701057,0.130536,-0.701057,0.865230,0.379880,-0.179958,0.008484,-0.032220,0.858615,0.130536,-0.495722,0.865668,0.379880,-0.189805,0.000000,-0.045959,0.707107,0.0,-0.707107,0.865230,0.379407,-0.179958,0.008484,-0.032220,0.858615,0.130536,-0.495722,0.826660,0.318365,-0.191371,0.016822,-0.044393,0.683009,0.258837,-0.683009,0.826170,0.318840,-0.181394,0.016822,-0.031390,0.836512,0.258837,-0.482961,0.826660,0.318840,-0.190199,0.008484,-0.045566,0.701057,0.130536,-0.701057,0.826442,0.318350,-0.181394,0.016822,-0.031390,0.836512,0.258837,-0.482961,0.826442,0.318350,-0.193304,0.024873,-0.042460,0.653274,0.382707,-0.653275,0.826170,0.318840,-0.183761,0.024873,-0.030024,0.800095,0.382707,-0.461935,0.826170,0.318840,-0.191371,0.016822,-0.044393,0.683009,0.258837,-0.683009,0.826170,0.318375,-0.183761,0.024873,-0.030024,0.800095,0.382707,-0.461935,0.807063,0.281730,-0.195963,0.032498,-0.039801,0.612361,0.500027,-0.612361,0.784660,0.257810,-0.187017,0.032498,-0.028144,0.749986,0.500027,-0.433005,0.806640,0.282220,-0.193304,0.024873,-0.042460,0.653274,0.382707,-0.653275,0.806640,0.281760,-0.187017,0.032498,-0.028144,0.749986,0.500027,-0.433005,0.782322,0.257337,-0.199303,0.039567,-0.036462,0.560970,0.608790,-0.560970,0.970459,0.221190,-0.191108,0.039567,-0.025782,0.687046,0.608790,-0.396666,0.979980,0.257510,-0.195963,0.032498,-0.039801,0.612361,0.500027,-0.612361,0.767570,0.220718,-0.203266,0.045959,-0.032498,0.499982,0.707133,-0.499982,0.946204,0.184570,-0.191108,0.039567,-0.025782,0.687046,0.608790,-0.396666,0.767834,0.220718,-0.199303,0.039567,-0.036462,0.560970,0.608790,-0.560970,0.774900,0.220700,-0.195963,0.045959,-0.022979,0.612350,0.707133,-0.353540,0.970459,0.221190,-0.207786,0.051564,-0.027978,0.430439,0.793375,-0.430439,0.726070,0.160150,-0.201498,0.051564,-0.019783,0.527178,0.793375,-0.304367,0.748040,0.184570,-0.203266,0.045959,-0.032498,0.499982,0.707133,-0.499982,0.748040,0.184118,-0.195963,0.045959,-0.022979,0.612350,0.707133,-0.353540,0.748468,0.184080,-0.201498,0.051564,-0.019783,0.527178,0.793375,-0.304367,0.723774,0.159668,-0.207786,0.051564,-0.027978,0.430439,0.793375,-0.430439,0.711668,0.123530,-0.207620,0.056288,-0.016249,0.308479,0.934410,-0.178100,0.921380,0.159862,-0.212785,0.056288,-0.022979,0.251872,0.934410,-0.251872,0.909180,0.123268,-0.207620,0.056288,-0.016249,0.308479,0.934410,-0.178100,0.711682,0.123358,-0.218176,0.057362,-0.017588,0.056891,0.996758,-0.056891,0.907009,0.111320,-0.214224,0.057362,-0.012436,0.069677,0.996758,-0.040228,0.909180,0.123268,-0.212785,0.056288,-0.022979,0.251872,0.934410,-0.251872,0.719214,0.111320,-0.214224,0.057362,-0.012436,0.069677,0.996758,-0.040228,0.713882,0.111267,-0.224566,0.057553,-0.011198,-0.201790,0.958416,0.201790,0.923990,0.111320,-0.222050,0.057553,-0.007918,-0.247141,0.958416,0.142687,0.907009,0.111320,-0.218176,0.057362,-0.017588,0.056891,0.996758,-0.056891,0.738564,0.111320,-0.224997,0.055220,-0.006216,-0.685761,0.610717,0.395924,0.748530,0.098850,-0.229765,0.044143,-0.005999,-0.666058,0.335759,0.666058,0.970322,0.098630,-0.228417,0.044143,-0.004242,-0.815751,0.335759,0.470974,0.941252,0.099120,-0.226973,0.055220,-0.008791,-0.559922,0.610717,0.559922,0.748247,0.099120,-0.228417,0.044143,-0.004242,0.056641,0.997859,-0.032702,0.970322,0.098630,-0.229765,0.044143,-0.005999,0.046247,0.997859,-0.046247,0.579803,0.098630,-0.227570,-0.064439,-0.002196,0.126069,-0.991446,-0.033780,0.499204,0.748530,-0.221196,-0.062781,-0.008411,0.224128,-0.965931,-0.129401,0.462741,0.711910,-0.227570,-0.064439,-0.002196,0.126069,-0.991446,-0.033780,0.492180,0.735840,-0.228417,-0.064439,-0.004242,0.113031,-0.991446,-0.065258,0.264989,0.711910,-0.219515,-0.062781,-0.004354,0.249983,-0.965931,-0.066983,0.499204,0.748530,-0.214224,-0.060048,-0.012436,0.331393,-0.923890,-0.191330,0.457520,0.687417,-0.219515,-0.062781,-0.004354,0.249983,-0.965931,-0.066983,0.264988,0.711677,-0.221196,-0.062781,-0.008411,0.224128,-0.965931,-0.129401,0.240230,0.687235,-0.211739,-0.060048,-0.006438,0.369621,-0.923890,-0.099040,0.462741,0.711910,-0.207620,-0.056288,-0.016249,0.432989,-0.866041,-0.249986,0.438148,0.650870,-0.211739,-0.060048,-0.006438,0.369621,-0.923890,-0.099040,0.401850,0.650390,-0.214224,-0.060048,-0.012436,0.331393,-0.923890,-0.191330,0.215991,0.650870,-0.204374,-0.056288,-0.008411,0.482936,-0.866041,-0.129402,0.457520,0.687417,-0.201498,-0.051564,-0.019783,0.527178,-0.793375,-0.304367,0.404125,0.614250,-0.204374,-0.056288,-0.008411,0.482936,-0.866041,-0.129402,0.401850,0.613770,-0.207620,-0.056288,-0.016249,0.432989,-0.866041,-0.249986,0.199067,0.614250,-0.197546,-0.051564,-0.010241,0.587991,-0.793375,-0.157552,0.438148,0.650870,-0.195963,-0.045959,-0.022979,0.612350,-0.707133,-0.353540,0.398920,0.589720,-0.197546,-0.051564,-0.010241,0.587991,-0.793375,-0.157552,0.399410,0.589350,-0.201498,-0.051564,-0.019783,0.527178,-0.793375,-0.304367,0.181640,0.589547,-0.191371,-0.045959,-0.011895,0.682988,-0.707133,-0.183006,0.404125,0.614250,-0.185957,-0.039567,-0.013346,0.766300,-0.608790,-0.205329,0.384760,0.577627,-0.195963,-0.045959,-0.022979,0.612350,-0.707133,-0.353540,0.157220,0.552923,-0.191108,-0.039567,-0.025782,0.687046,-0.608790,-0.396666,0.379539,0.553220,-0.191371,-0.045959,-0.011895,0.682988,-0.707133,-0.183006,0.340820,0.552730,-0.181394,-0.032498,-0.014568,0.836501,-0.500027,-0.224140,0.379539,0.553220,-0.185957,-0.039567,-0.013346,0.766300,-0.608790,-0.205329,0.343260,0.516110,-0.191108,-0.039567,-0.025782,0.687046,-0.608790,-0.396666,0.140450,0.516600,-0.187017,-0.032498,-0.028144,0.749986,-0.500027,-0.433005,0.345516,0.516600,-0.177762,-0.024873,-0.015542,0.892390,-0.382707,-0.239115,0.345516,0.516600,-0.181394,-0.032498,-0.014568,0.836501,-0.500027,-0.224140,0.318840,0.479722,-0.187017,-0.032498,-0.028144,0.749986,-0.500027,-0.433005,0.121075,0.479980,-0.183761,-0.024873,-0.030024,0.800095,-0.382707,-0.461935,0.318829,0.479980,-0.175122,-0.016822,-0.016249,0.933008,-0.258837,-0.249999,0.326170,0.479850,-0.177762,-0.024873,-0.015542,0.892390,-0.382707,-0.239115,0.326159,0.479490,-0.183761,-0.024873,-0.030024,0.800095,-0.382707,-0.461935,0.098630,0.455258,-0.181394,-0.016822,-0.031390,0.836512,-0.258837,-0.482961,0.325680,0.479850,-0.175122,-0.016822,-0.016249,0.933008,-0.258837,-0.249999,0.284660,0.418450,-0.181394,-0.016822,-0.031390,0.836512,-0.258837,-0.482961,0.088860,0.418637,-0.173520,-0.008484,-0.016678,0.957661,-0.130536,-0.256604,0.320928,0.455560,-0.179958,-0.008484,-0.032220,0.858615,-0.130536,-0.495722,0.284468,0.418940,-0.173520,-0.008484,-0.016678,0.957661,-0.130536,-0.256604,0.286908,0.418450,-0.179958,-0.008484,-0.032220,0.858615,-0.130536,-0.495722,0.064896,0.382320,-0.172983,0.000000,-0.016822,0.965926,0.0,-0.258819,0.286902,0.418940,-0.179476,0.000000,-0.032498,0.866025,0.0,-0.500000,0.286620,0.418808,-0.172983,0.000000,-0.016822,0.965926,0.0,-0.258819,0.267519,0.381830,-0.179958,0.008484,-0.032220,0.858615,0.130536,-0.495722,0.267090,0.382187,-0.173520,0.008484,-0.016678,0.957661,0.130536,-0.256605,0.267570,0.382187,-0.179476,0.000000,-0.032498,0.866025,0.0,-0.500000,0.040030,0.357607,-0.173520,0.008484,-0.016678,0.957661,0.130536,-0.256605,0.040144,0.357607,-0.181394,0.016822,-0.031390,0.836512,0.258837,-0.482961,0.228291,0.321280,-0.175122,0.016822,-0.016249,0.933008,0.258837,-0.249999,0.262200,0.357778,-0.179958,0.008484,-0.032220,0.858615,0.130536,-0.495722,0.030270,0.320984,-0.175122,0.016822,-0.016249,0.933008,0.258837,-0.249999,0.030544,0.320983,-0.183761,0.024873,-0.030024,0.800095,0.382707,-0.461935,0.040030,0.321280,-0.177762,0.024873,-0.015542,0.892390,0.382707,-0.239115,0.228291,0.321280,-0.181394,0.016822,-0.031390,0.836512,0.258837,-0.482961,0.006270,0.284660,-0.177762,0.024873,-0.015542,0.892390,0.382707,-0.239115,0.208490,0.284180,-0.187017,0.032498,-0.028144,0.749986,0.500027,-0.433005,0.208490,0.284528,-0.181394,0.032498,-0.014568,0.836501,0.500027,-0.224140,0.208980,0.284532,-0.183761,0.024873,-0.030024,0.800095,0.382707,-0.461935,0.979980,0.257510,-0.181394,0.032498,-0.014568,0.836501,0.500027,-0.224140,0.980082,0.257510,-0.191108,0.039567,-0.025782,0.687046,0.608790,-0.396666,0.169693,0.223630,-0.185957,0.039567,-0.013346,0.766300,0.608790,-0.205329,0.203610,0.260122,-0.187017,0.032498,-0.028144,0.749986,0.500027,-0.433005,0.970459,0.221190,-0.185957,0.039567,-0.013346,0.766300,0.608790,-0.205329,0.970477,0.220892,-0.195963,0.045959,-0.022979,0.612350,0.707133,-0.353540,0.972650,0.221190,-0.191371,0.045959,-0.011895,0.682988,0.707133,-0.183006,0.169693,0.223630,-0.191108,0.039567,-0.025782,0.687046,0.608790,-0.396666,0.946204,0.184570,-0.191371,0.045959,-0.011895,0.682988,0.707133,-0.183006,0.149900,0.186520,-0.195963,0.045959,-0.022979,0.612350,0.707133,-0.353540,0.921380,0.159862,-0.197546,0.051564,-0.010241,0.587991,0.793375,-0.157552,0.150390,0.186890,-0.201498,0.051564,-0.019783,0.527178,0.793375,-0.304367,0.149900,0.186846,-0.197546,0.051564,-0.010241,0.587991,0.793375,-0.157552,0.921488,0.159861,-0.201498,0.051564,-0.019783,0.527178,0.793375,-0.304367,0.909180,0.123268,-0.204374,0.056288,-0.008411,0.344063,0.934410,-0.092191,0.145178,0.162590,-0.207620,0.056288,-0.016249,0.308479,0.934410,-0.178100,0.113280,0.125673,-0.204374,0.056288,-0.008411,0.344063,0.934410,-0.092191,0.909226,0.123260,-0.214224,0.057362,-0.012436,0.069677,0.996758,-0.040228,0.103689,0.113770,-0.211739,0.057362,-0.006438,0.077714,0.996758,-0.020823,0.113280,0.125673,-0.207620,0.056288,-0.016249,0.308479,0.934410,-0.178100,0.907009,0.111320,-0.220468,0.057553,-0.004099,-0.275650,0.958416,0.073860,0.103689,0.113770,-0.211739,0.057362,-0.006438,0.077714,0.996758,-0.020823,0.907034,0.110927,-0.214224,0.057362,-0.012436,0.069677,0.996758,-0.040228,0.923990,0.111320,-0.222050,0.057553,-0.007918,-0.247141,0.958416,0.142687,0.091375,0.113280,-0.223756,0.055220,-0.003218,-0.764867,0.610717,0.204946,0.941252,0.099120,-0.228417,0.044143,-0.004242,-0.815751,0.335759,0.470974,0.125970,0.101560,-0.227570,0.044143,-0.002196,-0.909852,0.335759,0.243794,0.083980,0.113770,-0.224997,0.055220,-0.006216,-0.685761,0.610717,0.395924,0.970322,0.098630,-0.227570,0.044143,-0.002196,0.063175,0.997859,-0.016928,0.125970,0.101560,-0.228417,0.044143,-0.004242,0.056641,0.997859,-0.032702,0.047850,0.040030,-0.235764,-0.064995,0.0,0.0,-1.0,0.000000,0.396970,0.775390,-0.218942,-0.062781,0.0,0.258801,-0.965931,0.0,0.665520,0.711910,-0.227280,-0.064439,0.0,0.130517,-0.991446,0.0,0.665520,0.711420,-0.227570,-0.064439,-0.002196,0.126069,-0.991446,-0.033780,0.462741,0.711910,-0.219515,-0.062781,-0.004354,0.249983,-0.965931,-0.066983,0.687343,0.711420,-0.210891,-0.060048,0.0,0.382659,-0.923890,0.0,0.663080,0.687181,-0.218942,-0.062781,0.0,0.258801,-0.965931,0.0,0.663080,0.687010,-0.219515,-0.062781,-0.004354,0.249983,-0.965931,-0.066983,0.457548,0.687010,-0.211739,-0.060048,-0.006438,0.369621,-0.923890,-0.099040,0.662590,0.687104,-0.203266,-0.056288,0.0,0.499972,-0.866041,-0.000000,0.604490,0.650870,-0.210891,-0.060048,0.0,0.382659,-0.923890,0.0,0.604490,0.650390,-0.211739,-0.060048,-0.006438,0.369621,-0.923890,-0.099040,0.438148,0.650870,-0.204374,-0.056288,-0.008411,0.482936,-0.866041,-0.129402,0.643220,0.650390,-0.196197,-0.051564,0.0,0.608733,-0.793375,-0.000000,0.606930,0.614250,-0.203266,-0.056288,0.0,0.499972,-0.866041,-0.000000,0.606930,0.613770,-0.204374,-0.056288,-0.008411,0.482936,-0.866041,-0.129402,0.404125,0.614250,-0.197546,-0.051564,-0.010241,0.587991,-0.793375,-0.157552,0.628728,0.613770,-0.196197,-0.051564,0.0,0.608733,-0.793375,-0.000000,0.399410,0.589710,-0.191371,-0.045959,-0.011895,0.682988,-0.707133,-0.183006,0.604000,0.589401,-0.189805,-0.045959,0.0,0.707081,-0.707133,-0.000000,0.399410,0.589840,-0.197546,-0.051564,-0.010241,0.587991,-0.793375,-0.157552,0.398920,0.589720,-0.189805,-0.045959,0.0,0.707081,-0.707133,-0.000000,0.538570,0.552730,-0.191371,-0.045959,-0.011895,0.682988,-0.707133,-0.183006,0.379539,0.553220,-0.184200,-0.039567,0.0,0.793332,-0.608790,0.000000,0.538570,0.553220,-0.185957,-0.039567,-0.013346,0.766300,-0.608790,-0.205329,0.584613,0.552730,-0.184200,-0.039567,0.0,0.793332,-0.608790,0.000000,0.548340,0.516110,-0.185957,-0.039567,-0.013346,0.766300,-0.608790,-0.205329,0.345516,0.516600,-0.179476,-0.032498,0.0,0.866010,-0.500027,-0.000000,0.548340,0.516600,-0.181394,-0.032498,-0.014568,0.836501,-0.500027,-0.224140,0.570122,0.516110,-0.179476,-0.032498,0.0,0.866010,-0.500027,-0.000000,0.523920,0.479490,-0.181394,-0.032498,-0.014568,0.836501,-0.500027,-0.224140,0.318829,0.479980,-0.175716,-0.024873,0.0,0.923870,-0.382707,0.0,0.523920,0.479980,-0.177762,-0.024873,-0.015542,0.892390,-0.382707,-0.239115,0.550750,0.479490,-0.175716,-0.024873,0.0,0.923870,-0.382707,0.0,0.326143,0.479850,-0.177762,-0.024873,-0.015542,0.892390,-0.382707,-0.239115,0.320928,0.455560,-0.172983,-0.016822,0.0,0.965921,-0.258837,0.000000,0.550749,0.479529,-0.175122,-0.016822,-0.016249,0.933008,-0.258837,-0.249999,0.525998,0.455070,-0.172983,-0.016822,0.0,0.965921,-0.258837,0.000000,0.489740,0.418450,-0.175122,-0.016822,-0.016249,0.933008,-0.258837,-0.249999,0.284468,0.418940,-0.171325,-0.008484,0.0,0.991444,-0.130536,-0.000000,0.489740,0.418940,-0.173520,-0.008484,-0.016678,0.957661,-0.130536,-0.256604,0.489537,0.418940,-0.171325,-0.008484,0.0,0.991444,-0.130536,-0.000000,0.286902,0.418940,-0.173520,-0.008484,-0.016678,0.957661,-0.130536,-0.256604,0.286620,0.418808,-0.170769,0.000000,0.0,1.0,0.0,0.0,0.286904,0.418940,-0.172983,0.000000,-0.016822,0.965926,0.0,-0.258819,0.492136,0.381830,-0.170769,0.000000,0.0,1.0,0.0,0.0,0.267570,0.382187,-0.173520,0.008484,-0.016678,0.957661,0.130536,-0.256605,0.467396,0.357420,-0.171325,0.008484,0.0,0.991444,0.130536,-0.000000,0.267519,0.382320,-0.172983,0.000000,-0.016822,0.965926,0.0,-0.258819,0.267090,0.382187,-0.171325,0.008484,0.0,0.991444,0.130536,-0.000000,0.262315,0.357778,-0.175122,0.016822,-0.016249,0.933008,0.258837,-0.249999,0.264640,0.357910,-0.172983,0.016822,0.0,0.965921,0.258837,0.000000,0.467396,0.357456,-0.173520,0.008484,-0.016678,0.957661,0.130536,-0.256605,0.228291,0.321280,-0.172983,0.016822,0.0,0.965921,0.258837,0.000000,0.228295,0.321151,-0.177762,0.024873,-0.015542,0.892390,0.382707,-0.239115,0.433538,0.284180,-0.175716,0.024873,0.0,0.923870,0.382707,0.0,0.452908,0.320836,-0.175122,0.016822,-0.016249,0.933008,0.258837,-0.249999,0.264640,0.320800,-0.175716,0.024873,0.0,0.923870,0.382707,0.0,0.357910,0.259760,-0.181394,0.032498,-0.014568,0.836501,0.500027,-0.224140,0.408800,0.259760,-0.179476,0.032498,0.0,0.866010,0.500027,-0.000000,0.357910,0.260150,-0.177762,0.024873,-0.015542,0.892390,0.382707,-0.239115,0.203610,0.260122,-0.179476,0.032498,0.0,0.866010,0.500027,-0.000000,0.203718,0.260122,-0.185957,0.039567,-0.013346,0.766300,0.608790,-0.205329,0.394314,0.223140,-0.184200,0.039567,0.0,0.793332,0.608789,0.000000,0.408802,0.259801,-0.181394,0.032498,-0.014568,0.836501,0.500027,-0.224140,0.169693,0.223630,-0.184200,0.039567,0.0,0.793332,0.608789,0.000000,0.169702,0.223505,-0.191371,0.045959,-0.011895,0.682988,0.707133,-0.183006,0.374949,0.186520,-0.189805,0.045959,0.0,0.707081,0.707133,-0.000000,0.394317,0.223185,-0.185957,0.039567,-0.013346,0.766300,0.608790,-0.205329,0.198730,0.223140,-0.189805,0.045959,0.0,0.707081,0.707133,-0.000000,0.150390,0.186890,-0.191371,0.045959,-0.011895,0.682988,0.707133,-0.183006,0.149900,0.186846,-0.196197,0.051564,0.0,0.608733,0.793375,-0.000000,0.149900,0.187010,-0.197546,0.051564,-0.010241,0.587991,0.793375,-0.157552,0.350339,0.162100,-0.196197,0.051564,0.0,0.608733,0.793375,-0.000000,0.145187,0.162437,-0.204374,0.056288,-0.008411,0.344063,0.934410,-0.092191,0.338040,0.125480,-0.203266,0.056288,0.0,0.356200,0.934410,-0.000000,0.350344,0.162156,-0.197546,0.051564,-0.010241,0.587991,0.793375,-0.157552,0.113280,0.125673,-0.203266,0.056288,0.0,0.356200,0.934410,-0.000000,0.113371,0.125672,-0.211739,0.057362,-0.006438,0.077714,0.996758,-0.020823,0.306392,0.113280,-0.210891,0.057362,-0.000000,0.080456,0.996758,0.000000,0.311188,0.125874,-0.204374,0.056288,-0.008411,0.344063,0.934410,-0.092191,0.103689,0.113770,-0.219928,0.057553,-0.000000,-0.285374,0.958416,0.0,0.299062,0.113747,-0.210891,0.057362,-0.000000,0.080456,0.996758,0.000000,0.103707,0.113387,-0.211739,0.057362,-0.006438,0.077714,0.996758,-0.020823,0.091375,0.113280,-0.220468,0.057553,-0.004099,-0.275650,0.958416,0.073860,0.296845,0.101070,-0.223332,0.055220,-0.000000,-0.791849,0.610717,0.0,0.083980,0.113770,-0.227570,0.044143,-0.002196,-0.909852,0.335759,0.243794,0.330983,0.101070,-0.227280,0.044143,-0.000000,-0.941948,0.335759,0.0,0.325862,0.101070,-0.223756,0.055220,-0.003218,-0.764867,0.610717,0.204946,0.130370,0.101070,-0.235764,0.044699,-0.000000,0.0,1.0,0.000000,0.658093,0.106309,-0.227280,0.044143,-0.000000,0.065403,0.997859,0.0,0.669920,0.032710,-0.220468,0.057553,0.004099,-0.275650,0.958416,-0.073860,0.296845,0.101070,-0.223332,0.055220,-0.000000,-0.791849,0.610717,0.0,0.479628,0.101560,-0.223756,0.055220,0.003218,-0.764867,0.610717,-0.204946,0.482339,0.101560,-0.219928,0.057553,-0.000000,-0.285374,0.958416,0.0,0.325862,0.101070,-0.222050,0.057553,0.007918,-0.247141,0.958416,-0.142687,0.726197,0.101070,-0.223756,0.055220,0.003218,-0.764867,0.610717,-0.204946,0.755613,0.101560,-0.224997,0.055220,0.006216,-0.685761,0.610717,-0.395924,0.755370,0.113658,-0.220468,0.057553,0.004099,-0.275650,0.958416,-0.073860,0.482068,0.101184,-0.224997,0.055220,0.006216,-0.685761,0.610717,-0.395924,0.950881,0.101560,-0.226973,0.055220,0.008791,-0.559922,0.610717,-0.559922,0.950728,0.113770,-0.222050,0.057553,0.007918,-0.247141,0.958416,-0.142687,0.762939,0.101109,-0.224566,0.057553,0.011198,-0.201790,0.958416,-0.201790,0.921549,0.101070,-0.226973,0.055220,0.008791,-0.559922,0.610717,-0.559922,0.118436,0.104000,-0.227846,0.057553,0.013714,-0.142687,0.958416,-0.247141,0.115953,0.103510,-0.224566,0.057553,0.011198,-0.201790,0.958416,-0.201790,0.958201,0.101113,-0.229548,0.055220,0.010767,-0.395924,0.610717,-0.685761,0.116210,0.104000,-0.227846,0.057553,0.013714,-0.142687,0.958416,-0.247141,0.147460,0.115720,-0.229548,0.055220,0.010767,-0.395924,0.610717,-0.685761,0.343131,0.104000,-0.232546,0.055220,0.012009,-0.204946,0.610717,-0.764867,0.343014,0.116210,-0.231665,0.057553,0.015296,-0.073860,0.958416,-0.275650,0.140261,0.115835,-0.231665,0.057553,0.015296,-0.073860,0.958416,-0.275650,0.364740,0.115720,-0.235764,0.055220,0.012432,0.0,0.610717,-0.791849,0.577465,0.116210,-0.235764,0.057553,0.015836,0.0,0.958416,-0.285374,0.343019,0.116123,-0.232546,0.055220,0.012009,-0.204946,0.610717,-0.764867,0.584960,0.103833,-0.239863,0.057553,0.015296,0.073860,0.958416,-0.275650,0.577475,0.116027,-0.235764,0.055220,0.012432,0.0,0.610717,-0.791849,0.743581,0.104000,-0.238982,0.055220,0.012009,0.204946,0.610717,-0.764867,0.762982,0.116210,-0.235764,0.057553,0.015836,0.0,0.958416,-0.285374,0.762690,0.115720,-0.243682,0.057553,0.013714,0.142687,0.958416,-0.247141,0.997070,0.115720,-0.238982,0.055220,0.012009,0.204946,0.610717,-0.764867,0.997096,0.116210,-0.241980,0.055220,0.010767,0.395924,0.610717,-0.685761,0.997461,0.116210,-0.239863,0.057553,0.015296,0.073860,0.958416,-0.275650,0.743581,0.103854,-0.246962,0.057553,0.011198,0.201790,0.958416,-0.201790,0.008670,0.118160,-0.243682,0.057553,0.013714,0.142687,0.958416,-0.247141,0.008324,0.118160,-0.244555,0.055220,0.008791,0.559922,0.610717,-0.559922,0.194257,0.118650,-0.241980,0.055220,0.010767,0.395924,0.610717,-0.685761,0.193907,0.118650,-0.249479,0.057553,0.007918,0.247141,0.958416,-0.142687,0.194275,0.118468,-0.244555,0.055220,0.008791,0.559922,0.610717,-0.559922,0.487118,0.106440,-0.246531,0.055220,0.006216,0.685761,0.610717,-0.395924,0.469923,0.118650,-0.246962,0.057553,0.011198,0.201790,0.958416,-0.201790,0.162574,0.105950,-0.246531,0.055220,0.006216,0.685761,0.610717,-0.395924,0.640840,0.105950,-0.247773,0.055220,0.003218,0.764867,0.610717,-0.204946,0.633300,0.118295,-0.249479,0.057553,0.007918,0.247141,0.958416,-0.142687,0.487119,0.106324,-0.251061,0.057553,0.004099,0.275650,0.958416,-0.073860,0.523920,0.105950,-0.251061,0.057553,0.004099,0.275650,0.958416,-0.073860,0.633516,0.106440,-0.247773,0.055220,0.003218,0.764867,0.610717,-0.204946,0.709136,0.106440,-0.248196,0.055220,0.000000,0.791849,0.610717,0.0,0.719211,0.106440,-0.251600,0.057553,0.000000,0.285374,0.958416,0.0,0.633780,0.106085,-0.248196,0.055220,0.000000,0.791849,0.610717,0.0,0.025782,0.108880,-0.251061,0.057553,-0.004099,0.275650,0.958416,0.073860,0.719223,0.106262,-0.251600,0.057553,0.000000,0.285374,0.958416,0.0,0.641110,0.106261,-0.247773,0.055220,-0.003218,0.764867,0.610717,0.204946,0.025663,0.121090,-0.249479,0.057553,-0.007918,0.247141,0.958416,0.142687,0.025665,0.121034,-0.247773,0.055220,-0.003218,0.764867,0.610717,0.204946,0.152784,0.108880,-0.246531,0.055220,-0.006216,0.685761,0.610717,0.395924,0.181967,0.121090,-0.251061,0.057553,-0.004099,0.275650,0.958416,0.073860,0.033126,0.108530,-0.249479,0.057553,-0.007918,0.247141,0.958416,0.142687,0.203610,0.120600,-0.244555,0.055220,-0.008791,0.559922,0.610717,0.559922,0.409137,0.121090,-0.246962,0.057553,-0.011198,0.201790,0.958416,0.201790,0.203944,0.120600,-0.246531,0.055220,-0.006216,0.685761,0.610717,0.395924,0.406288,0.121090,-0.243682,0.057553,-0.013714,0.142687,0.958416,0.247141,0.416460,0.120600,-0.244555,0.055220,-0.008791,0.559922,0.610717,0.559922,0.423555,0.108880,-0.241980,0.055220,-0.010767,0.395924,0.610717,0.685761,0.635781,0.120600,-0.246962,0.057553,-0.011198,0.201790,0.958416,0.201790,0.416045,0.120600,-0.239863,0.057553,-0.015296,0.073860,0.958416,0.275650,0.799351,0.120600,-0.243682,0.057553,-0.013714,0.142687,0.958416,0.247141,0.543437,0.108390,-0.238982,0.055220,-0.012009,0.204946,0.610717,0.764867,0.843382,0.121090,-0.241980,0.055220,-0.010767,0.395924,0.610717,0.685761,0.845912,0.121090,-0.235764,0.055220,-0.012432,0.0,0.610717,0.791849,0.069435,0.111320,-0.235764,0.057553,-0.015836,0.0,0.958416,0.285374,0.032915,0.123040,-0.239863,0.057553,-0.015296,0.073860,0.958416,0.275650,0.768052,0.108390,-0.238982,0.055220,-0.012009,0.204946,0.610717,0.764867,0.067076,0.111320,-0.235764,0.055220,-0.012432,0.0,0.610717,0.791849,0.298935,0.111320,-0.231665,0.057553,-0.015296,-0.073860,0.958416,0.275650,0.069444,0.111209,-0.235764,0.057553,-0.015836,0.0,0.958416,0.285374,0.071770,0.110840,-0.232546,0.055220,-0.012009,-0.204946,0.610717,0.764867,0.296380,0.111243,-0.232546,0.055220,-0.012009,-0.204946,0.610717,0.764867,0.503946,0.111320,-0.227846,0.057553,-0.013714,-0.142687,0.958416,0.247141,0.503900,0.110840,-0.231665,0.057553,-0.015296,-0.073860,0.958416,0.275650,0.503900,0.110840,-0.229548,0.055220,-0.010767,-0.395924,0.610717,0.685761,0.504390,0.111204,-0.227846,0.057553,-0.013714,-0.142687,0.958416,0.247141,0.535692,0.110840,-0.229548,0.055220,-0.010767,-0.395924,0.610717,0.685761,0.748530,0.098850,-0.226973,0.055220,-0.008791,-0.559922,0.610717,0.559922,0.738564,0.111320,-0.224566,0.057553,-0.011198,-0.201790,0.958416,0.201790,0.536000,0.110840,-0.222050,0.057553,-0.007918,-0.247141,0.958416,0.142687,0.760534,0.110917,-0.226973,0.055220,-0.008791,-0.559922,0.610717,0.559922,0.941252,0.099120,-0.224997,0.055220,-0.006216,-0.685761,0.610717,0.395924,0.923990,0.111320,-0.224566,0.057553,-0.011198,-0.201790,0.958416,0.201790,0.542968,0.110840,-0.222050,0.057553,-0.007918,-0.247141,0.958416,0.142687,0.941252,0.099114,-0.223756,0.055220,-0.003218,-0.764867,0.610717,0.204946,0.091375,0.113280,-0.220468,0.057553,-0.004099,-0.275650,0.958416,0.073860,0.062446,0.101070,-0.224997,0.055220,-0.006216,-0.685761,0.610717,0.395924,0.083980,0.113770,-0.219928,0.057553,-0.000000,-0.285374,0.958416,0.0,0.099120,0.101070,-0.220468,0.057553,-0.004099,-0.275650,0.958416,0.073860,0.099120,0.101070,-0.223332,0.055220,-0.000000,-0.791849,0.610717,0.0,0.099034,0.101560,-0.223756,0.055220,-0.003218,-0.764867,0.610717,0.204946,0.130370,0.101560
-			],
-			"parts" : [
-				{
-					"id" : "part0",
-					"type" : "TRIANGLES",
-					"indices" : [
-						0,1,2,3,1,0,1,3,4,5,4,3,4,5,6,5,7,8,7,5,9,9,10,7,10,9,11,11,12,10,12,11,13,13,14,12,14,13,15,15,16,14,16,15,17,17,18,16,18,17,19,19,20,18,20,19,21,21,22,20,22,21,23,23,24,22,24,23,25,26,27,28,27,26,29,30,29,26,29,30,31,32,31,30,31,32,33,34,35,36,35,34,37,38,37,34,37,38,39,40,39,38,39,40,41,41,42,43,42,41,40,43,44,45,44,43,42,46,45,44,45,46,47,46,48,47,48,46,49,50,51,52,51,50,53,54,55,56,57,0,2,57,3,58,3,57,59,60,61,59,61,60,5,62,63,60,63,62,9,64,65,62,65,64,11,66,13,67,13,66,68,69,15,70,15,69,71,72,17,73,17,72,74,75,19,76,19,75,77,78,21,79,21,78,80,80,23,81,23,80,82,83,28,84,28,83,85,86,87,88,87,86,26,89,90,91,90,89,30,92,93,89,93,92,36,94,95,96,95,94,34,97,98,99,98,97,38,100,101,97,101,100,40,102,103,42,103,102,104,105,106,44,106,105,107,108,109,46,109,108,106,49,109,110,109,49,111,112,52,113,52,112,50,114,115,56,116,57,2,116,59,117,59,116,118,118,60,119,60,118,120,120,62,121,62,120,122,123,122,124,123,124,64,124,125,126,125,124,127,128,127,129,128,129,72,129,74,130,74,129,131,131,78,132,78,131,133,133,80,134,80,133,135,135,82,136,82,135,137,137,85,83,85,137,138,139,88,140,88,139,86,141,142,143,142,141,89,144,145,141,145,144,146,147,148,149,148,147,99,150,151,147,151,150,97,152,150,153,150,152,154,155,107,156,156,157,155,106,155,158,155,106,159,109,160,161,160,109,162,110,163,164,163,161,164,165,113,166,112,113,165,167,168,56,169,116,2,169,170,171,118,171,170,170,172,173,120,173,172,174,175,176,175,174,177,178,179,180,178,180,124,180,127,181,127,180,182,183,182,184,183,184,185,186,131,187,187,188,186,189,133,190,190,186,189,191,192,193,191,193,194,195,196,197,195,197,198,199,200,196,199,196,195,201,202,203,202,201,204,205,206,207,206,205,208,209,207,210,207,209,205,211,212,213,212,211,214,150,215,216,215,150,217,218,219,220,220,216,218,221,222,223,223,224,221,225,226,227,226,225,228,161,229,230,229,231,230,164,232,233,232,164,234,165,235,236,235,165,166,237,238,56,239,169,2,170,239,240,239,170,241,172,240,242,240,172,243,179,244,245,244,179,246,247,180,248,248,249,247,182,247,250,247,182,251,252,188,253,253,254,252,255,186,256,255,256,257,258,189,259,258,259,255,260,261,262,260,262,263,264,265,266,264,266,267,268,269,270,268,270,271,272,273,274,273,272,275,276,277,278,277,276,279,280,278,281,278,280,282,215,283,284,283,215,285,216,286,287,286,216,288,218,287,289,287,218,290,291,292,293,291,293,226,294,227,295,227,294,296,232,296,297,296,232,298,299,300,301,302,301,300,236,303,304,303,236,235,305,306,56,307,308,2,240,309,310,309,240,311,242,310,312,310,242,313,249,312,314,312,249,315,316,247,317,316,317,314,250,316,318,316,250,319,320,257,321,320,321,318,322,255,323,322,323,320,324,258,325,324,325,322,326,267,327,326,327,324,328,264,329,328,329,326,330,268,271,330,271,328,274,331,332,331,274,273,333,334,335,334,333,336,337,335,338,335,337,339,284,340,341,340,284,283,287,342,343,342,287,344,345,343,346,343,345,347,292,348,349,292,349,293,350,296,351,296,350,352,353,297,354,297,353,355,355,356,357,357,356,358,304,359,360,359,304,303,361,362,56,363,309,2,310,364,365,365,364,363,366,312,367,366,367,365,314,366,368,366,314,369,370,316,371,370,371,368,318,370,372,370,318,373,374,372,375,372,374,376,322,377,378,377,322,379,324,378,380,378,324,381,382,380,383,380,382,384,385,386,387,386,385,388,389,387,390,387,389,385,391,392,393,391,393,394,395,396,397,395,397,398,399,400,396,399,396,395,401,402,403,401,403,404,405,343,406,405,406,407,408,409,410,410,405,408,411,412,413,412,411,414,415,416,417,416,415,418,419,420,421,420,419,422,423,356,424,356,423,425,360,359,426,359,427,426,428,429,56,430,363,2,431,432,430,432,431,365,433,434,431,434,433,366,433,368,435,368,433,436,437,438,370,438,437,436,372,438,439,438,372,440,377,441,442,441,377,443,378,444,445,444,378,446,447,445,448,445,447,449,450,451,452,451,450,453,454,455,456,455,454,457,458,459,460,459,458,461,462,463,464,462,464,465,466,467,468,466,468,469,470,471,472,470,472,466,473,407,474,474,475,473,476,405,477,477,478,476,479,408,480,480,476,479,481,482,483,482,481,415,484,485,486,485,484,487,488,489,490,489,488,491,492,425,493,425,492,494,495,427,496,427,497,496,498,499,56,500,430,2,500,431,501,431,500,502,502,433,503,433,502,504,504,436,505,436,504,506,507,508,506,508,507,438,509,439,510,439,509,511,512,513,514,513,512,444,445,515,516,515,445,517,448,518,519,518,448,520,455,521,522,521,455,523,456,524,525,524,456,526,527,525,528,525,527,529,530,469,531,530,531,532,533,466,534,533,534,535,536,537,538,538,533,536,539,478,540,540,541,539,542,476,543,543,544,542,545,546,547,546,545,542,548,549,484,549,548,550,487,551,552,551,487,553,492,554,555,554,492,556,557,558,559,558,557,560,561,562,497,496,497,562,563,564,56,565,500,2,566,567,565,567,566,502,566,504,568,504,566,569,569,506,570,506,569,571,572,573,571,573,572,507,572,574,575,574,572,576,577,578,576,578,577,515,516,579,580,579,577,580,581,582,583,582,580,583,524,584,585,584,583,585,586,587,588,587,585,588,589,590,591,590,592,591,535,593,594,593,535,595,596,597,598,597,596,599,600,598,601,598,600,602,544,603,604,603,544,605,542,606,607,606,542,608,609,610,611,610,609,607,612,613,551,613,612,614,552,613,615,613,552,616,617,618,619,618,617,620,621,619,622,619,621,623,624,562,561,562,624,625,626,627,56,628,629,2,628,566,630,566,628,631,631,569,632,569,631,633,634,635,636,635,634,637,638,639,640,638,640,572,640,576,641,576,640,642,643,644,645,644,646,645,580,647,648,647,649,648,583,650,651,650,648,651,652,653,654,654,655,652,656,588,657,657,658,656,659,591,592,592,660,659,594,661,662,661,594,593,663,664,665,664,663,666,667,665,668,665,667,663,604,669,670,669,604,603,607,671,672,671,607,673,674,672,675,672,674,676,677,613,678,678,679,677,680,615,681,681,682,680,619,680,683,680,619,618,622,684,685,684,683,685,686,625,624,625,686,687,688,689,56,690,628,2,690,631,691,631,690,692,693,633,694,633,693,695,639,696,697,696,698,697,699,700,701,699,701,640,702,642,703,642,702,704,705,649,706,706,707,705,708,648,709,709,710,708,711,651,712,712,713,711,714,658,715,715,716,714,717,656,718,718,719,717,720,721,722,722,717,720,723,724,725,724,723,726,727,728,729,728,727,730,731,729,732,729,731,733,671,734,735,734,671,736,672,737,738,737,672,739,675,738,740,738,675,741,742,682,743,743,744,742,745,680,746,746,747,745,683,745,748,745,683,749,685,750,751,750,748,751,752,687,686,687,752,753,754,755,56,756,690,2,756,757,758,692,758,757,695,757,759,757,695,760,700,759,761,759,700,762,763,701,764,764,761,763,765,763,766,763,765,767,710,766,768,766,710,769,708,768,770,768,708,771,772,770,773,770,772,774,719,773,775,773,719,776,777,775,778,775,777,779,780,781,782,781,780,783,784,728,785,785,786,784,787,788,789,789,790,787,791,792,793,793,787,791,794,737,795,795,796,794,797,738,798,798,794,797,799,800,801,801,797,799,802,803,804,802,804,747,745,805,806,805,804,806,748,807,808,807,748,809,808,751,810,751,808,811,812,813,752,753,752,813,814,815,56,816,756,2,757,817,818,818,817,816,759,818,819,818,759,820,821,761,822,821,822,819,823,763,824,823,824,821,766,825,826,825,766,827,828,829,830,829,828,831,770,832,833,832,770,834,835,836,837,836,835,838,775,839,840,839,775,841,778,840,842,840,778,843,782,844,845,844,782,781,846,784,786,786,847,846,848,787,849,849,850,848,851,852,853,852,848,853,854,855,856,855,857,856,797,858,859,858,860,859,861,862,863,862,859,863,864,865,866,864,866,867,868,869,870,869,868,871,872,808,873,808,872,874,874,811,875,811,874,876,877,878,812,813,812,878,879,880,56,881,816,2,818,882,883,883,882,881,819,883,884,883,819,885,886,821,887,886,887,888,889,823,890,889,890,886,891,889,892,889,891,893,894,832,895,894,895,892,833,894,896,894,833,897,839,896,898,896,839,899,840,900,901,900,840,902,842,903,904,903,842,905,906,904,907,904,906,908,850,909,910,909,911,910,848,912,913,912,914,913,853,915,916,915,913,916,860,917,918,917,919,918,859,920,921,920,922,921,921,863,923,863,921,924,925,926,927,926,925,868,928,929,930,929,928,931,932,933,934,933,932,935,936,937,938,937,936,876,939,940,877,878,877,940,941,942,56,943,881,2,944,945,943,945,944,883,944,884,946,884,944,947,948,949,950,949,948,886,951,952,889,952,951,948,892,953,954,953,892,955,956,957,894,957,956,954,957,958,959,959,958,896,958,960,961,961,960,898,960,962,963,963,962,903,962,964,965,965,964,966,967,968,969,969,968,970,971,914,972,914,971,973,974,975,976,975,974,977,977,978,979,978,977,980,981,922,982,922,981,983,984,921,985,921,984,986,986,987,988,987,986,989,990,991,992,991,990,928,993,994,995,994,993,931,993,938,996,938,993,997,997,936,998,936,997,999,1000,940,939,940,1000,1001,1002,1003,56,1004,943,2,1004,944,1005,944,1004,1006,1006,950,1007,950,1006,1008,1008,948,1009,948,1008,1010,1011,1012,1010,1012,1011,952,1011,954,1013,954,1011,1014,1014,1015,1016,1016,1015,957,1015,1017,1018,1018,1017,958,1017,1019,1020,1020,1019,960,1021,1022,1023,1023,1022,1024,1025,1026,1027,1025,1027,964,967,1028,1029,967,1029,968,1030,973,971,973,1030,1031,1032,977,1033,977,1032,1034,1034,1035,1036,1035,1034,1037,1038,983,981,983,1038,1039,1040,986,1041,986,1040,1042,1042,1043,1044,1043,1042,1045,992,1046,990,1046,992,1047,993,1048,1049,1048,993,1050,997,1049,1051,1049,997,1052,1053,1054,1051,1054,1053,999,1055,1001,1000,1001,1055,1056,1057,1058,56,1059,1004,2,1059,1006,1060,1006,1059,1061,1062,1063,1061,1063,1062,1008,1064,1065,1062,1065,1064,1010,1066,1067,1064,1067,1066,1011,1066,1014,1068,1014,1066,1069,1070,1069,1071,1070,1071,1015,1072,1071,1073,1072,1073,1017,1074,1075,1076,1074,1076,1019,1077,1078,1079,1077,1079,1026,1080,1081,1082,1080,1082,1027,1083,1082,1084,1083,1084,1085,1086,1032,1087,1032,1086,1088,1089,1034,1090,1034,1089,1091,1091,1037,1092,1037,1091,1093,1094,1040,1095,1040,1094,1096,1097,1042,1098,1042,1097,1099,1099,1045,1100,1045,1099,1101,1102,1103,1048,1103,1102,1104,1049,1105,1106,1105,1049,1107,1051,1106,1108,1106,1051,1109,1110,1111,1053,1111,1110,1108,1112,1056,1055,1056,1112,1113,1114,1115,56,1116,1059,2,1116,1061,1117,1061,1116,1118,1118,1062,1119,1062,1118,1120,1121,1122,1123,1123,1122,1064,1124,1122,1125,1124,1125,1066,1125,1069,1126,1069,1125,1127,1128,1071,1129,1071,1128,1130,1130,1073,1131,1073,1130,1132,1132,1133,1134,1133,1132,1135,1135,1081,1136,1081,1135,1137,1137,1138,1139,1138,1137,1140,1141,1142,1143,1142,1141,1144,1145,1146,1147,1145,1147,1089,1148,1149,1150,1148,1150,1151,1152,1153,1150,1153,1152,1154,1155,1156,1157,1155,1157,1097,1158,1157,1159,1158,1159,1099,1160,1161,1159,1161,1160,1162,1163,1105,1164,1164,1165,1163,1106,1166,1167,1166,1106,1168,1108,1167,1169,1167,1108,1170,1111,1169,1171,1169,1111,1172,1173,1174,1112,1112,1174,1113,1175,1176,56,1177,1116,2,1177,1118,1178,1118,1177,1179,1180,1120,1181,1120,1180,1182,1183,1184,1185,1183,1185,1122,1186,1185,1187,1186,1187,1125,1188,1127,1189,1127,1188,1190,1191,1130,1192,1130,1191,1193,1193,1132,1194,1132,1193,1195,1196,1135,1197,1135,1196,1198,1199,1137,1200,1137,1199,1201,1201,1140,1202,1140,1201,1203,1203,1144,1141,1144,1203,1204,1146,1205,1206,1146,1206,1147,1207,1208,1209,1207,1209,1150,1209,1210,1211,1211,1210,1212,1213,1214,1215,1215,1214,1216,1217,1218,1219,1219,1218,1159,1218,1220,1221,1221,1220,1222,1223,1163,1165,1165,1224,1223,1167,1225,1226,1225,1167,1227,1169,1228,1229,1228,1169,1230,1171,1229,1231,1229,1171,1232,1233,1234,1173,1173,1234,1174,1235,1236,56,1237,1177,2,1179,1238,1239,1238,1237,1239,1240,1239,1241,1239,1240,1242,1185,1243,1244,1243,1245,1244,1246,1187,1247,1247,1244,1246,1248,1246,1249,1246,1248,1250,1251,1193,1252,1252,1253,1251,1251,1195,1254,1195,1251,1255,1255,1199,1256,1199,1255,1257,1257,1201,1258,1201,1257,1259,1259,1203,1260,1203,1259,1261,1261,1262,1263,1262,1261,1264,1265,1266,1267,1267,1266,1268,1269,1270,1271,1271,1270,1209,1270,1272,1273,1273,1272,1274,1275,1276,1277,1277,1276,1278,1279,1280,1281,1281,1280,1218,1280,1282,1283,1282,1280,1284,1285,1286,1287,1285,1287,1288,1289,1290,1291,1289,1291,1226,1229,1291,1292,1291,1229,1293,1294,1295,1296,1231,1296,1295,1297,1298,1233,1233,1298,1234,1299,1300,56,1301,1237,2,1239,1301,1302,1301,1239,1303,1245,1302,1304,1302,1245,1305,1306,1244,1307,1306,1307,1304,1308,1246,1309,1308,1309,1306,1253,1308,1310,1308,1253,1311,1312,1251,1313,1312,1313,1310,1314,1315,1312,1314,1255,1315,1316,1317,1314,1317,1316,1257,1318,1319,1316,1319,1318,1259,1320,1321,1322,1321,1320,1323,1324,1323,1320,1323,1324,1325,1326,1327,1328,1327,1326,1329,1330,1331,1332,1331,1330,1333,1333,1334,1331,1334,1333,1335,1336,1337,1338,1337,1336,1339,1340,1280,1341,1280,1340,1342,1342,1343,1344,1343,1342,1345,1346,1347,1348,1346,1348,1349,1350,1351,1352,1352,1351,1291,1351,1294,1353,1294,1351,1354,1354,1295,1355,1295,1354,1356,1357,1298,1297,1298,1357,1358,1359,1360,56,1361,1301,2,1302,1361,1362,1361,1302,1363,1304,1362,1364,1362,1304,1365,1366,1306,1367,1366,1367,1364,1368,1308,1369,1368,1369,1366,1310,1368,1370,1368,1310,1371,1372,1373,1374,1372,1312,1373,1375,1376,1372,1376,1375,1314,1377,1378,1375,1378,1377,1316,1379,1380,1381,1380,1379,1318,1382,1383,1384,1383,1382,1385,1386,1387,1388,1387,1386,1389,1390,1391,1392,1391,1390,1393,1394,1395,1396,1395,1394,1397,1397,1398,1399,1398,1397,1400,1401,1340,1402,1340,1401,1403,1404,1342,1405,1342,1404,1406,1406,1345,1407,1345,1406,1408,1409,1410,1411,1410,1409,1350,1412,1413,1414,1413,1412,1351,1412,1354,1415,1354,1412,1416,1417,1418,1416,1418,1417,1356,1419,1358,1357,1358,1419,1420,1421,1422,56,1,1361,1423,4,1424,1425,1424,4,1362,6,1426,1427,1426,6,1428,7,1429,1430,1429,7,1366,10,1431,1432,1431,10,1368,1370,1433,12,1433,1370,1434,14,1435,1436,1435,14,1372,16,1437,1438,1437,16,1375,18,1439,1440,1439,18,1377,20,1441,1442,1441,20,1384,1443,1444,1445,1444,1443,1382,27,1388,1446,1388,27,1386,1447,1393,1390,1393,1447,29,1448,1397,1449,1397,1448,1450,1451,1452,1453,1452,1451,35,1454,1404,1455,1404,1454,37,1456,1406,1457,1406,1456,39,1458,1459,1460,1459,1458,41,43,1411,1461,1411,43,1409,1462,1412,1463,1412,1462,45,1464,1416,1465,1416,1464,47,48,1466,1467,1466,48,1417,51,1468,1419,1468,51,53,1422,1469,1470,49,51,48,51,49,52,1471,110,113,110,1471,1472,1473,166,1474,166,1473,164,1475,1476,235,1476,1475,1477,1478,303,1479,303,1478,358,1480,356,359,1480,359,1481,425,1482,1483,1482,425,427,494,1484,1485,1484,494,497,561,1486,1487,561,1487,621,1488,622,624,622,1488,1489,1490,686,1491,686,1490,685,1492,752,1493,752,1492,751,1494,811,812,811,1494,1495,876,1496,1497,1496,876,877,1498,936,939,1498,939,1499,1500,1501,1502,1501,1500,1503,1055,1504,1505,1055,1505,1053,1506,1507,1112,1112,1507,1111,1508,1171,1173,1171,1508,1509,1510,1511,1512,1511,1510,1513,1514,1297,1515,1297,1514,1295,1356,1516,1517,1516,1356,1357,1518,1417,1419,1518,1419,1519,1520,1521,1522,1521,1523,1522,1524,1525,1526,1527,1528,1529,1528,1527,1530,1531,1532,1533,1532,1531,1534,1535,1536,1537,1536,1535,1538,1539,1540,1541,1540,1539,1542,1543,1544,1545,1544,1546,1545,1547,1548,1549,1548,1547,1550,1551,1552,1553,1552,1551,1554,1555,1556,1557,1556,1555,1558,1559,1560,1561,1560,1559,1562,1563,1564,1565,1564,1563,1566,1567,1568,1569,1568,1567,1570,1571,1572,1573,1573,1572,1574,1575,1576,1577,1577,1576,1578,1579,1580,1581,1581,1580,1582,1583,1584,1585,1585,1584,1586,1587,1588,1589,1589,1588,1590,1591,1592,1593,1593,1592,1594,1595,1596,1597,1596,1595,1598,1599,1600,1601,1600,1599,1602,1603,1604,1605,1603,1605,1606,1607,1608,1609,1608,1607,1610,1611,1612,1613,1611,1613,1614,1615,1616,1617,1524,1526,1618,1619,1620,1621,1620,1619,1622,1623,1624,1625,1624,1623,1626,1627,1628,1629,1628,1627,1630,1631,1632,1633,1632,1634,1633,1635,1636,1637,1636,1638,1637,1639,1640,1641,1640,1639,1642,1643,1644,1645,1644,1643,1646,1647,1648,1649,1648,1647,1650,1651,1652,1653,1652,1651,1654,1655,1656,1657,1656,1655,1658,1659,1660,1661,1660,1659,1662,1663,1664,1665,1665,1664,1666,1667,1668,1669,1669,1668,1670,1671,1672,1673,1673,1672,1674,1675,1676,1677,1675,1677,1678,1679,1680,1681,1679,1681,1682,1683,1684,1685,1683,1685,1686,1687,1688,1689,1688,1687,1690,1691,1692,1693,1692,1691,1694,1695,1696,1697,1696,1695,1698,1699,1700,1701,1700,1699,1702,1703,1704,1705,1703,1705,1706,1615,1707,1708,1524,1618,1709,1710,1711,1712,1710,1712,1713,1714,1715,1716,1715,1714,1717,1718,1719,1720,1718,1720,1721,1722,1723,1724,1723,1722,1725,1726,1727,1728,1727,1726,1729,1730,1731,1732,1732,1731,1733,1734,1735,1736,1735,1734,1737,1738,1739,1740,1739,1738,1741,1742,1743,1744,1743,1742,1745,1746,1747,1748,1747,1746,1749,1750,1751,1752,1751,1750,1753,1754,1755,1756,1754,1756,1757,1758,1759,1760,1758,1760,1761,1762,1763,1764,1762,1764,1765,1766,1767,1768,1766,1768,1769,1770,1771,1772,1770,1772,1773,1774,1775,1776,1775,1774,1777,1778,1779,1780,1779,1778,1781,1782,1783,1784,1783,1782,1785,1786,1787,1788,1787,1786,1789,1790,1791,1792,1791,1790,1793,1794,1795,1796,1794,1796,1797,1615,1798,1799,1524,1709,1800,1801,1802,1803,1801,1803,1804,1805,1806,1807,1806,1805,1808,1809,1810,1811,1810,1809,1812,1813,1814,1815,1815,1814,1816,1817,1818,1819,1818,1817,1820,1821,1822,1823,1823,1822,1824,1825,1826,1827,1827,1826,1828,1829,1830,1831,1830,1829,1832,1833,1834,1835,1834,1833,1836,1837,1838,1839,1838,1837,1840,1841,1842,1843,1842,1841,1844,1845,1846,1847,1846,1845,1848,1849,1850,1851,1850,1849,1852,1853,1854,1855,1854,1853,1856,1857,1858,1859,1858,1857,1860,1861,1862,1863,1862,1861,1864,1865,1866,1867,1866,1865,1868,1869,1870,1871,1870,1869,1872,1873,1874,1875,1874,1873,1876,1877,1878,1879,1878,1877,1880,1881,1882,1883,1882,1881,1884,1885,1886,1887,1886,1885,1888,1615,1889,1890,1524,1800,1891,1892,1893,1894,1893,1892,1895,1896,1897,1898,1897,1896,1899,1900,1901,1902,1901,1900,1903,1904,1905,1906,1906,1905,1907,1908,1909,1910,1910,1909,1911,1912,1913,1914,1913,1912,1915,1916,1917,1918,1917,1916,1919,1920,1921,1922,1921,1920,1923,1924,1925,1926,1925,1924,1927,1928,1929,1930,1929,1928,1931,1932,1933,1934,1933,1932,1935,1936,1937,1938,1937,1936,1939,1940,1941,1942,1941,1940,1943,1944,1945,1946,1945,1944,1947,1948,1949,1950,1949,1948,1951,1952,1953,1954,1953,1952,1955,1956,1957,1958,1957,1956,1959,1960,1961,1962,1961,1960,1963,1964,1965,1966,1965,1964,1967,1968,1969,1970,1969,1968,1971,1972,1973,1974,1972,1974,1975,1976,1977,1978,1977,1976,1979,1615,1980,1981,1524,1982,1983,1984,1985,1986,1985,1984,1987,1988,1989,1990,1989,1988,1991,1992,1993,1994,1993,1992,1995,1996,1997,1998,1997,1996,1999,2000,2001,2002,2001,2000,2003,2004,2005,2006,2005,2004,2007,2008,2009,2010,2009,2008,2011,2012,2013,2014,2013,2012,2015,2016,2017,2018,2017,2016,2019,2020,2021,2022,2021,2020,2023,2024,2025,2026,2025,2024,2027,2028,2029,2030,2029,2028,2031,2032,2033,2034,2033,2032,2035,2036,2037,2038,2037,2036,2039,2040,2041,2042,2041,2040,2043,2044,2045,2046,2045,2044,2047,2048,2049,2050,2049,2048,2051,2052,2053,2054,2053,2052,2055,2056,2057,2058,2059,2058,2057,2060,2061,2062,2061,2060,2063,2064,2065,2066,2065,2067,2066,2068,2069,2070,2069,2068,2071,1615,2072,2073,1524,2074,2075,2076,2077,2078,2077,2076,2079,2080,2081,2082,2081,2080,2083,2084,2085,2086,2085,2084,2087,2088,2089,2090,2089,2088,2091,2092,2093,2094,2093,2092,2095,2096,2097,2098,2097,2096,2099,2100,2101,2102,2101,2100,2103,2104,2105,2106,2105,2104,2107,2108,2109,2110,2109,2108,2111,2112,2113,2114,2113,2112,2115,2116,2117,2118,2117,2116,2119,2120,2121,2122,2121,2120,2123,2124,2125,2126,2125,2124,2127,2128,2129,2130,2129,2128,2131,2132,2133,2134,2133,2132,2135,2136,2137,2138,2137,2136,2139,2140,2141,2142,2141,2140,2143,2144,2145,2146,2145,2144,2147,2148,2149,2150,2149,2148,2151,2152,2153,2154,2153,2155,2154,2156,2157,2158,2157,2156,2159,2160,2161,2162,2161,2160,2163,1615,2164,2165,1524,2075,2166,2167,2168,2169,2167,2169,2170,2171,2172,2173,2171,2173,2174,2175,2176,2177,2176,2175,2178,2179,2180,2181,2180,2179,2182,2183,2184,2185,2184,2183,2186,2187,2188,2189,2188,2187,2190,2191,2192,2193,2192,2191,2194,2195,2196,2197,2196,2195,2198,2199,2200,2201,2200,2199,2202,2203,2204,2205,2204,2203,2206,2207,2208,2209,2208,2207,2210,2211,2212,2213,2212,2211,2214,2215,2216,2217,2216,2215,2218,2219,2220,2221,2220,2219,2222,2223,2224,2225,2224,2223,2226,2227,2228,2229,2228,2227,2230,2231,2232,2233,2232,2231,2234,2235,2236,2237,2236,2238,2237,2239,2240,2241,2240,2239,2242,2243,2244,2245,2244,2243,2246,2247,2248,2249,2248,2247,2250,2251,2252,2253,2252,2251,2254,1615,2255,2256,1524,2166,2257,2258,2259,2260,2259,2258,2261,2262,2263,2264,2262,2264,2265,2266,2267,2268,2268,2269,2266,2270,2271,2272,2271,2273,2272,2274,2275,2276,2275,2274,2277,2278,2279,2280,2279,2281,2280,2282,2283,2284,2283,2282,2285,2286,2287,2288,2287,2286,2289,2290,2291,2292,2291,2290,2293,2294,2295,2296,2295,2294,2297,2298,2299,2300,2299,2298,2301,2302,2303,2304,2303,2302,2305,2306,2307,2308,2307,2306,2309,2310,2311,2312,2311,2310,2313,2314,2315,2316,2315,2314,2317,2318,2319,2320,2319,2318,2321,2322,2323,2324,2323,2322,2325,2326,2327,2328,2327,2326,2329,2330,2331,2332,2331,2330,2333,2334,2335,2336,2335,2334,2337,2338,2339,2340,2338,2340,2341,2342,2343,2344,2343,2342,2345,1615,2346,2347,1524,2257,2348,2349,2350,2351,2351,2352,2349,2353,2354,2355,2355,2356,2353,2357,2358,2359,2358,2357,2360,2361,2362,2363,2362,2364,2363,2365,2366,2367,2366,2365,2368,2369,2370,2371,2370,2372,2371,2373,2374,2375,2375,2374,2376,2377,2378,2379,2379,2378,2380,2381,2382,2383,2383,2382,2384,2385,2386,2387,2387,2386,2388,2389,2390,2391,2391,2390,2392,2393,2394,2395,2394,2393,2396,2397,2398,2399,2398,2397,2400,2401,2402,2403,2402,2401,2404,2405,2406,2407,2406,2405,2408,2409,2410,2411,2410,2409,2412,2413,2414,2415,2414,2413,2416,2417,2418,2419,2418,2417,2420,2421,2422,2423,2422,2421,2424,2425,2426,2427,2426,2425,2428,2429,2430,2431,2430,2429,2432,2433,2434,2435,2434,2433,2436,1615,2437,2438,1524,2439,2440,2441,2442,2443,2443,2444,2441,2445,2446,2447,2445,2447,2448,2449,2450,2451,2450,2449,2452,2453,2454,2455,2454,2453,2456,2457,2458,2459,2458,2457,2460,2461,2462,2463,2463,2462,2464,2465,2466,2467,2467,2466,2468,2469,2470,2471,2471,2470,2472,2473,2474,2475,2475,2474,2476,2477,2478,2479,2479,2478,2480,2481,2482,2483,2483,2482,2484,2485,2486,2487,2486,2485,2488,2489,2490,2491,2490,2489,2492,2493,2494,2495,2494,2493,2496,2497,2498,2499,2498,2497,2500,2501,2502,2503,2502,2501,2504,2505,2506,2507,2506,2505,2508,2509,2510,2511,2510,2509,2512,2513,2514,2515,2514,2513,2516,2517,2518,2519,2518,2517,2520,2521,2522,2523,2522,2521,2524,2525,2526,2527,2526,2525,2528,1615,2529,2530,1524,2440,2531,2532,2533,2534,2533,2532,2535,2536,2537,2538,2537,2536,2539,2540,2541,2542,2541,2540,2543,2544,2545,2546,2546,2545,2547,2548,2549,2550,2549,2548,2551,2552,2553,2554,2554,2553,2555,2556,2557,2558,2558,2557,2559,2560,2561,2562,2562,2561,2563,2564,2565,2566,2566,2565,2567,2568,2569,2570,2570,2569,2571,2572,2573,2574,2574,2573,2575,2576,2577,2578,2577,2576,2579,2580,2581,2582,2581,2580,2583,2584,2585,2586,2585,2584,2587,2588,2589,2590,2589,2588,2591,2592,2593,2594,2593,2592,2595,2596,2597,2598,2597,2596,2599,2600,2601,2602,2601,2600,2603,2604,2605,2606,2605,2604,2607,2608,2609,2610,2609,2608,2611,2612,2613,2614,2613,2612,2615,2616,2617,2618,2617,2616,2619,1615,2620,2621,1524,2531,2622,2623,2624,2625,2623,2625,2626,2627,2628,2629,2629,2628,2630,2631,2632,2633,2633,2632,2634,2635,2636,2637,2637,2636,2638,2639,2640,2641,2641,2640,2642,2643,2644,2645,2644,2643,2646,2647,2648,2649,2648,2647,2650,2651,2652,2653,2652,2651,2654,2655,2656,2657,2656,2655,2658,2659,2660,2661,2660,2659,2662,2663,2664,2665,2664,2663,2666,2667,2668,2669,2668,2667,2670,2671,2672,2673,2673,2672,2674,2675,2676,2677,2677,2676,2678,2679,2680,2681,2680,2679,2682,2683,2684,2685,2684,2683,2686,2687,2688,2689,2689,2688,2690,2691,2692,2693,2692,2691,2694,2695,2696,2697,2696,2695,2698,2699,2700,2701,2700,2699,2702,2703,2704,2705,2704,2703,2706,2707,2708,2709,2707,2709,2710,1615,2711,2712,1524,2622,2713,2714,2715,2716,2715,2714,2717,2718,2719,2720,2719,2718,2721,2722,2723,2724,2723,2722,2725,2726,2727,2728,2727,2726,2729,2730,2731,2732,2731,2730,2733,2734,2735,2736,2735,2734,2737,2738,2739,2740,2739,2738,2741,2742,2743,2744,2743,2742,2745,2746,2747,2748,2747,2746,2749,2750,2751,2752,2751,2750,2753,2754,2755,2756,2755,2754,2757,2758,2759,2760,2760,2759,2761,2762,2763,2764,2764,2763,2765,2766,2767,2768,2768,2767,2769,2770,2771,2772,2772,2771,2773,2774,2775,2776,2776,2775,2777,2778,2779,2780,2781,2780,2779,2782,2783,2784,2785,2784,2783,2786,2787,2788,2787,2786,2789,2790,2791,2792,2791,2790,2793,2794,2795,2796,2795,2794,2797,2798,2799,2800,2798,2800,2801,1615,2802,2803,1524,2713,2804,2805,2806,2807,2806,2805,2808,2809,2810,2811,2810,2809,2812,2813,2814,2815,2814,2813,2816,2817,2818,2819,2818,2817,2820,2821,2822,2823,2822,2821,2824,2825,2826,2827,2826,2825,2828,2829,2830,2831,2830,2829,2832,2833,2834,2835,2834,2833,2836,2837,2838,2839,2838,2837,2840,2841,2842,2843,2842,2841,2844,2845,2846,2847,2846,2845,2848,2849,2850,2851,2851,2850,2852,2853,2854,2855,2855,2854,2856,2857,2858,2859,2859,2858,2860,2861,2862,2863,2863,2862,2864,2865,2866,2867,2868,2867,2866,2869,2870,2871,2870,2869,2872,2873,2874,2875,2874,2876,2875,2877,2878,2879,2878,2877,2880,2881,2882,2883,2882,2881,2884,2885,2886,2887,2887,2888,2885,2889,2890,2891,2891,2892,2889,1615,2893,2894,1524,2804,2895,2896,2897,2898,2897,2896,2899,2900,2901,2902,2900,2902,2903,2904,2905,2906,2905,2904,2907,2908,2909,2910,2909,2908,2911,2912,2913,2914,2913,2912,2915,2916,2917,2918,2917,2916,2919,2920,2921,2922,2921,2923,2922,2924,2925,2926,2925,2927,2926,2928,2929,2930,2929,2931,2930,2932,2933,2934,2933,2935,2934,2936,2937,2938,2937,2939,2938,2940,2941,2942,2941,2940,2943,2944,2945,2946,2945,2944,2947,2948,2949,2950,2949,2948,2951,2952,2953,2954,2953,2952,2955,2956,2957,2958,2957,2956,2959,2960,2961,2962,2961,2960,2963,2964,2965,2966,2965,2967,2966,2968,2969,2970,2969,2971,2970,2972,2973,2974,2973,2972,2975,2976,2977,2978,2977,2976,2979,2980,2981,2982,2981,2980,2983,1615,2984,2985,1524,2895,2986,2987,2988,2989,2988,2987,2990,2991,2992,2993,2992,2991,2994,2995,2996,2997,2996,2995,2998,2999,3000,3001,3001,3002,2999,3003,3004,3005,3004,3003,3006,3007,3008,3009,3008,3010,3009,3011,3012,3013,3012,3014,3013,3015,3016,3017,3016,3018,3017,3019,3020,3021,3020,3022,3021,3023,3024,3025,3026,3025,3024,3027,3028,3029,3030,3029,3028,3031,3032,3033,3032,3031,3034,3035,3036,3037,3036,3035,3038,3039,3040,3041,3040,3039,3042,3043,3044,3045,3044,3043,3046,3047,3048,3049,3048,3047,3050,3051,3052,3053,3052,3051,3054,3055,3056,3057,3056,3055,3058,3059,3060,3061,3060,3059,3062,3063,3064,3065,3064,3063,3066,3067,3068,3069,3067,3069,3070,3071,3072,3073,3072,3071,3074,1615,3075,3076,1524,2986,3077,3078,3079,3080,3079,3078,3081,3082,3083,3084,3084,3085,3082,3086,3087,3088,3087,3089,3088,3090,3091,3092,3091,3093,3092,3094,3095,3096,3095,3094,3097,3098,3099,3100,3101,3100,3099,3102,3103,3104,3105,3104,3103,3106,3107,3108,3109,3108,3107,3110,3111,3112,3113,3112,3111,3114,3115,3116,3117,3116,3115,3118,3119,3120,3121,3120,3119,3122,3123,3124,3123,3122,3125,3126,3127,3128,3127,3126,3129,3130,3131,3132,3131,3130,3133,3134,3135,3136,3135,3134,3137,3138,3139,3140,3139,3138,3141,3142,3143,3144,3143,3142,3145,3146,3147,3148,3147,3146,3149,3150,3151,3152,3151,3150,3153,3154,3155,3156,3155,3154,3157,3158,3159,3160,3159,3158,3161,3162,3163,3164,3163,3162,3165,1615,3166,3167,1524,3077,3168,3169,3170,3171,3171,3172,3169,3173,3174,3175,3174,3173,3176,3177,3178,3179,3177,3179,3180,3181,3182,3183,3182,3181,3184,3185,3186,3187,3186,3185,3188,3189,3190,3191,3190,3189,3192,3193,3194,3195,3194,3193,3196,3197,3198,3199,3198,3197,3200,3201,3202,3203,3202,3201,3204,3205,3206,3207,3206,3205,3208,3209,3210,3211,3210,3209,3212,3213,3214,3215,3216,3215,3214,3217,3218,3219,3220,3219,3218,3221,3222,3223,3224,3223,3222,3225,3226,3227,3228,3227,3226,3229,3230,3231,3232,3231,3230,3233,3234,3235,3236,3235,3234,3237,3238,3239,3238,3237,3240,3241,3242,3243,3242,3241,3244,3245,3246,3247,3246,3245,3248,3249,3250,3251,3250,3249,3252,3253,3254,3255,3255,3256,3253,1615,3257,3258,1524,3168,3259,3260,3261,3262,3260,3262,3263,3264,3265,3266,3265,3264,3267,3268,3269,3270,3269,3268,3271,3272,3273,3274,3274,3273,3275,3276,3277,3278,3277,3276,3279,3280,3281,3282,3281,3280,3283,3284,3285,3286,3285,3284,3287,3288,3289,3290,3289,3288,3291,3292,3293,3294,3293,3292,3295,3296,3297,3298,3297,3296,3299,3300,3301,3302,3301,3300,3303,3304,3305,3306,3307,3306,3305,3308,3309,3310,3311,3310,3309,3312,3313,3314,3313,3315,3314,3316,3317,3318,3317,3319,3318,3320,3321,3322,3321,3323,3322,3324,3325,3326,3325,3327,3326,3328,3329,3330,3329,3328,3331,3332,3333,3334,3333,3332,3335,3336,3337,3338,3337,3336,3339,3340,3341,3342,3341,3340,3343,3344,3345,3346,3346,3347,3344,1615,3348,3349,1524,3259,3350,3351,3352,3353,3352,3351,3354,3355,3356,3357,3356,3355,3358,3359,3360,3361,3360,3359,3362,3363,3364,3365,3365,3364,3366,3367,3368,3369,3368,3367,3370,3371,3372,3373,3373,3372,3374,3375,3376,3377,3376,3375,3378,3379,3380,3381,3380,3379,3382,3383,3384,3385,3384,3383,3386,3387,3388,3389,3388,3387,3390,3391,3392,3393,3392,3391,3394,3395,3396,3397,3396,3398,3397,3399,3400,3401,3400,3402,3401,3403,3404,3405,3404,3406,3405,3407,3408,3409,3408,3410,3409,3411,3412,3413,3412,3414,3413,3415,3416,3417,3416,3415,3418,3419,3420,3421,3420,3419,3422,3423,3424,3425,3424,3423,3426,3427,3428,3429,3428,3427,3430,3431,3432,3433,3431,3433,3434,3435,3436,3437,3437,3438,3435,1615,3439,3440,1524,3350,3441,3442,3443,3444,3443,3442,3445,3446,3447,3448,3447,3446,3449,3450,3451,3452,3451,3450,3453,3454,3455,3456,3455,3454,3457,3458,3459,3460,3459,3458,3461,3462,3463,3464,3463,3462,3465,3466,3467,3468,3466,3469,3467,3470,3471,3472,3470,3472,3473,3474,3475,3476,3474,3476,3477,3478,3479,3480,3478,3480,3481,3482,3483,3484,3482,3484,3485,3486,3487,3488,3487,3486,3489,3490,3491,3492,3491,3490,3493,3494,3495,3496,3495,3494,3497,3498,3499,3500,3499,3498,3501,3502,3503,3504,3503,3502,3505,3506,3507,3508,3507,3506,3509,3510,3511,3512,3513,3512,3511,3514,3515,3516,3515,3517,3516,3518,3519,3520,3519,3518,3521,3522,3523,3524,3523,3522,3525,3526,3527,3528,3527,3526,3529,1615,3530,3531,1524,3441,3532,3533,3534,3535,3534,3533,3536,3537,3538,3539,3538,3537,3540,3541,3542,3543,3542,3541,3544,3545,3546,3547,3546,3545,3548,3549,3550,3551,3550,3549,3552,3553,3554,3555,3553,3556,3554,3557,3558,3559,3557,3559,3560,3561,3562,3563,3561,3563,3564,3565,3566,3567,3565,3567,3568,3569,3570,3571,3571,3570,3572,3573,3574,3575,3575,3574,3576,3577,3578,3579,3578,3577,3580,3581,3582,3583,3582,3581,3584,3585,3586,3587,3586,3585,3588,3589,3590,3591,3590,3589,3592,3593,3594,3595,3594,3593,3596,3597,3598,3599,3598,3597,3600,3601,3602,3603,3602,3604,3603,3605,3606,3607,3606,3608,3607,3609,3610,3611,3610,3609,3612,3613,3614,3615,3615,3616,3613,3617,3618,3619,3618,3617,3620,1615,3621,3622,3623,3532,1525,3624,3625,3626,3624,3626,3627,3628,3629,3630,3628,3630,3631,3632,3633,3634,3632,3634,3635,3636,3637,3638,3636,3638,3639,3640,3641,3642,3641,3640,3643,3644,3645,3646,3646,3645,3647,3648,3649,3650,3650,3649,3651,3652,3653,3654,3654,3653,3655,3656,3657,3658,3658,3657,3659,3660,3661,3662,3662,3661,3663,3664,3665,3666,3666,3665,3667,3668,3669,3670,3669,3668,3671,3672,3673,3674,3673,3672,3675,3676,3677,3678,3677,3676,3679,3680,3681,3682,3681,3680,3683,3684,3685,3686,3685,3684,3687,3688,3689,3690,3689,3688,3691,3692,3693,3694,3693,3695,3694,3696,3697,3698,3697,3696,3699,3700,3701,3702,3701,3700,3703,3704,3705,3706,3704,3706,3707,3708,3709,3710,3709,3708,3711,3712,3713,3621,3714,3715,3716,3715,3714,3717,3718,3719,3720,3719,3718,3721,3722,3723,3724,3723,3725,3724,3726,3727,3728,3727,3726,3729,3730,3731,3732,3730,3732,3733,3734,3735,3736,3735,3734,3737,3738,3739,3740,3739,3738,3741,3742,3743,3744,3743,3742,3745,3746,3747,3748,3748,3747,3749,3750,3751,3752,3751,3750,3753,3754,3755,3756,3755,3757,3756,3758,3759,3760,3758,3760,3761,3762,3763,3764,3763,3762,3765,3766,3767,3768,3767,3766,3769,3770,3771,3772,3771,3770,3773,3774,3775,3776,3775,3774,3777,3778,3779,3780,3780,3779,3781,3782,3783,3784,3782,3784,3785,3786,3787,3788,3787,3786,3789,3790,3791,3792,3791,3790,3793,3794,3795,3796,3794,3796,3797,3798,3799,3800,3799,3798,3801,3802,3803,3804,3803,3802,3805,3806,3807,3808,3808,3807,3809
-					]
-				}
-			]
-		},
-		{
-			"id" : "head_Mesh",
-			"attributes" : [
-				"POSITION","NORMAL","TEXCOORD0"
-			],
-			"vertices" : [
-				0.023799,0.510357,0.745004,0.528556,-0.595550,-0.604936,0.506230,0.379270,0.025538,0.506920,0.751306,0.487261,-0.793031,-0.365621,0.505500,0.380400,0.023457,0.505255,0.750896,0.634622,-0.683828,-0.360046,0.504950,0.380190,0.025547,0.512706,0.744012,0.336391,-0.700107,-0.629834,0.506850,0.379210,0.020612,0.511379,0.742005,0.592944,-0.494774,-0.635308,0.506340,0.378740,0.020520,0.519840,0.735659,0.324645,-0.757675,-0.566157,0.507590,0.378260,0.021245,0.504078,0.748954,0.690492,-0.606347,-0.394416,0.504690,0.379600,0.018601,0.503152,0.744909,0.830024,-0.409918,-0.378190,0.504410,0.378700,0.017842,0.509571,0.739912,0.774839,-0.279910,-0.566811,0.505900,0.378320,0.013141,0.514960,0.733531,0.873073,-0.376316,-0.310048,0.506770,0.377900,0.015993,0.504368,0.736153,0.996946,-0.077739,0.007475,0.504970,0.377420,-0.023457,0.505255,0.750896,-0.634624,-0.683828,-0.360044,0.495040,0.380190,-0.023799,0.510357,0.745004,-0.528561,-0.595550,-0.604933,0.493760,0.379270,-0.021245,0.504078,0.748954,-0.690488,-0.606351,-0.394417,0.495300,0.379600,-0.020611,0.511379,0.742005,-0.592941,-0.494779,-0.635307,0.493650,0.378740,-0.020520,0.519840,0.735658,-0.324646,-0.757677,-0.566155,0.492400,0.378260,-0.025547,0.512706,0.744012,-0.336394,-0.700108,-0.629832,0.493140,0.379210,-0.025538,0.506920,0.751306,-0.487261,-0.793032,-0.365620,0.494490,0.380400,-0.015993,0.504368,0.736153,-0.996946,-0.077732,0.007479,0.495020,0.377420,-0.018601,0.503152,0.744909,-0.830023,-0.409920,-0.378189,0.495580,0.378700,-0.017842,0.509571,0.739912,-0.774835,-0.279917,-0.566812,0.494100,0.378320,-0.013141,0.514960,0.733531,-0.873072,-0.376319,-0.310046,0.493220,0.377900,0.176846,0.673443,0.622427,0.010256,-0.891498,0.452908,0.562560,0.429650,0.173516,0.674591,0.624131,-0.047456,-0.888799,0.455835,0.561450,0.430040,0.173356,0.672810,0.619408,-0.115568,-0.931533,0.344804,0.561620,0.428440,0.177426,0.672159,0.619253,-0.024382,-0.920238,0.390599,0.562960,0.428620,0.175631,0.677431,0.628633,0.278239,-0.662794,0.695189,0.561640,0.431650,0.179747,0.674956,0.624168,0.332887,-0.699928,0.631892,0.563230,0.430510,0.182122,0.672934,0.619987,0.312885,-0.770792,0.554963,0.564370,0.429260,-0.182340,0.672942,0.620023,-0.315812,-0.767800,0.557446,0.435620,0.429260,-0.177287,0.673474,0.622492,-0.006672,-0.889160,0.457548,0.437430,0.429650,-0.180085,0.674993,0.624199,-0.336369,-0.688353,0.642671,0.436760,0.430510,-0.177627,0.672175,0.619274,0.026361,-0.918752,0.393954,0.437040,0.428620,-0.175666,0.677475,0.628572,-0.278113,-0.659701,0.698175,0.438350,0.431650,-0.173702,0.674645,0.624107,0.049767,-0.886644,0.459767,0.438540,0.430040,-0.173673,0.672841,0.619422,0.117953,-0.928690,0.351600,0.438370,0.428440,0.067594,0.663079,0.632038,0.761848,0.001806,0.647754,0.533090,0.428050,0.072224,0.660250,0.630796,0.054638,0.843307,0.534648,0.534060,0.427030,0.070282,0.663446,0.627785,0.207123,0.734522,0.646203,0.533880,0.428010,0.075921,0.663961,0.628365,-0.370816,0.713050,0.595026,0.534660,0.427550,0.070282,0.663446,0.627785,0.568667,-0.440764,0.694511,0.533880,0.428010,0.070008,0.666268,0.630554,0.613637,-0.523077,0.591473,0.533530,0.428680,0.068952,0.668226,0.637557,0.636564,-0.457969,0.620524,0.532320,0.429260,0.075685,0.666626,0.627710,0.376713,-0.500461,0.779504,0.534590,0.428160,0.075921,0.663961,0.628365,0.209611,-0.334602,0.918752,0.534660,0.427550,-0.070372,0.666301,0.630655,-0.611625,-0.492835,0.618893,0.466460,0.428680,-0.076013,0.666662,0.627799,0.089711,-0.271744,0.958179,0.465400,0.428160,-0.070641,0.663487,0.627883,-0.559609,-0.421974,0.713285,0.466110,0.428010,-0.076350,0.664008,0.628485,-0.208473,-0.328295,0.921283,0.465330,0.427550,-0.067947,0.663112,0.632135,-0.750808,0.003233,0.660512,0.466900,0.428050,-0.068719,0.668213,0.637481,-0.632301,-0.436836,0.639821,0.467670,0.429260,-0.070641,0.663487,0.627883,-0.220891,0.699026,0.680124,0.466110,0.428010,-0.072078,0.660247,0.630745,-0.065520,0.833229,0.549033,0.465930,0.427030,-0.076350,0.664008,0.628485,0.363048,0.705038,0.609194,0.465330,0.427550,0.169858,0.672523,0.617550,0.033386,-0.871299,0.489616,0.560490,0.427750,0.173263,0.671486,0.616146,0.058172,-0.606060,0.793288,0.561570,0.427580,0.173563,0.671895,0.616806,-0.082368,-0.886772,0.454808,0.561730,0.427750,0.168641,0.672096,0.617428,0.311442,-0.389295,0.866864,0.560170,0.427640,0.168233,0.673556,0.620388,-0.009229,-0.912245,0.409540,0.559970,0.428450,0.161774,0.673561,0.621881,0.248915,-0.488489,0.836313,0.557970,0.428020,-0.173655,0.671903,0.616810,0.084135,-0.880892,0.465779,0.438260,0.427750,-0.170052,0.672552,0.617539,-0.028892,-0.869041,0.493896,0.439500,0.427750,-0.168654,0.673599,0.620431,0.012323,-0.912126,0.409724,0.440020,0.428450,-0.168854,0.672125,0.617429,-0.313051,-0.374341,0.872850,0.439820,0.427640,-0.161819,0.673598,0.621844,-0.250882,-0.469097,0.846762,0.442020,0.428020,-0.173355,0.671487,0.616159,-0.057622,-0.598566,0.798998,0.438420,0.427580,-0.250480,0.421322,0.272170,-0.970933,-0.239348,-0.001048,0.315680,0.297810,-0.246510,0.403501,0.282754,-0.950372,-0.309065,-0.035655,0.325030,0.291600,-0.252591,0.423238,0.282452,-0.927514,-0.303933,-0.217584,0.320070,0.300270,-0.251439,0.410341,0.293866,-0.905857,-0.366132,-0.213005,0.328550,0.296640,-0.258229,0.438028,0.285014,-0.929783,-0.283913,-0.234301,0.317890,0.307060,-0.256257,0.444113,0.265425,-0.970536,-0.239460,0.026826,0.307410,0.307010,-0.261084,0.425101,0.306708,-0.932653,-0.313878,-0.177874,0.330380,0.304990,0.261084,0.425101,0.306708,0.932653,-0.313878,-0.177874,0.669610,0.304990,0.252591,0.423238,0.282452,0.927514,-0.303933,-0.217585,0.679920,0.300270,0.258229,0.438028,0.285014,0.929783,-0.283912,-0.234302,0.682100,0.307060,0.251439,0.410341,0.293866,0.905857,-0.366132,-0.213004,0.671440,0.296640,0.250480,0.421322,0.272170,0.970933,-0.239348,-0.001056,0.684310,0.297810,0.256257,0.444113,0.265425,0.970535,-0.239462,0.026822,0.692590,0.307010,0.246510,0.403501,0.282754,0.950372,-0.309065,-0.035659,0.674960,0.291600,-0.283412,0.624700,0.303797,-0.978514,-0.068802,0.194364,0.299880,0.384890,-0.286571,0.612365,0.284841,-0.966593,-0.155897,0.203453,0.293040,0.377890,-0.282330,0.608867,0.304545,-0.981532,-0.048657,0.185009,0.301410,0.378330,-0.286502,0.630646,0.294039,-0.922200,-0.160659,0.351761,0.294880,0.386960,-0.282965,0.639722,0.311635,-0.985746,-0.059337,0.157430,0.302190,0.391610,-0.285978,0.649702,0.300900,-0.904636,-0.092815,0.415956,0.296320,0.395580,-0.280165,0.620895,0.326255,-0.991681,-0.069213,0.108524,0.310230,0.384060,0.280127,0.620893,0.326254,0.991759,-0.068664,0.108162,0.689760,0.384060,0.282255,0.608862,0.304527,0.981719,-0.047515,0.184307,0.698590,0.378330,0.283265,0.624691,0.303763,0.979134,-0.069478,0.190969,0.700110,0.384890,0.282973,0.639724,0.311655,0.985831,-0.058842,0.157084,0.697800,0.391610,0.286354,0.630637,0.294007,0.921994,-0.161678,0.351833,0.705110,0.386960,0.285920,0.649698,0.300891,0.904094,-0.094529,0.416748,0.703670,0.395580,0.286505,0.612362,0.284824,0.966450,-0.153833,0.205692,0.706950,0.377890,-0.282226,0.793690,0.408847,-0.969639,0.001773,0.244533,0.333400,0.459700,-0.282054,0.826024,0.403887,-0.969934,0.068265,0.233599,0.328120,0.470980,-0.286548,0.799038,0.390611,-0.980486,0.013820,0.196103,0.324340,0.460040,-0.277029,0.809417,0.426868,-0.959903,0.036837,0.277901,0.340270,0.466890,-0.272311,0.782757,0.444006,-0.959845,0.022949,0.279592,0.349950,0.458720,-0.280896,0.773746,0.412088,-0.972747,-0.017693,0.231193,0.336750,0.452790,-0.286125,0.772923,0.388885,-0.984563,-0.037515,0.170961,0.326420,0.450600,0.282482,0.793690,0.408964,0.970900,0.006080,0.239406,0.666600,0.459700,0.281073,0.773734,0.412172,0.972131,-0.018216,0.233731,0.663240,0.452790,0.286233,0.772907,0.388951,0.985480,-0.030698,0.166994,0.673570,0.450600,0.286279,0.799018,0.390596,0.981757,0.015545,0.189501,0.675650,0.460040,0.272306,0.782724,0.444028,0.958668,0.020867,0.283760,0.650040,0.458720,0.277061,0.809385,0.426916,0.959627,0.036910,0.278844,0.659720,0.466890,0.282072,0.826026,0.403946,0.970660,0.064802,0.231559,0.671870,0.470980,-0.264482,0.941991,0.420902,-0.940279,0.152670,0.304247,0.330330,0.525450,-0.280215,0.929074,0.374682,-0.967403,0.110618,0.227806,0.309790,0.511600,-0.279739,0.906105,0.384238,-0.965125,0.090266,0.245734,0.315270,0.503130,-0.269508,0.960864,0.396788,-0.941245,0.202567,0.270229,0.316990,0.529770,-0.285602,0.923731,0.348819,-0.979959,0.108962,0.166755,0.299220,0.505980,-0.289206,0.868533,0.347006,-0.988987,0.048750,0.139745,0.300960,0.482840,-0.274972,0.971801,0.365208,-0.948402,0.241581,0.205358,0.302320,0.528700,0.274959,0.971799,0.365205,0.948638,0.240587,0.205437,0.697670,0.528700,0.280117,0.929039,0.374663,0.967416,0.113106,0.226527,0.690200,0.511600,0.285459,0.923700,0.348788,0.980161,0.109846,0.164977,0.700770,0.505980,0.269406,0.960852,0.396763,0.941012,0.201929,0.271515,0.683000,0.529770,0.279913,0.906102,0.384305,0.965306,0.094535,0.243407,0.684720,0.503130,0.289200,0.868522,0.347013,0.989305,0.049423,0.137231,0.699030,0.482840,0.264210,0.941943,0.420833,0.939834,0.156648,0.303601,0.669660,0.525450,-0.295786,0.706950,0.260552,-0.047511,0.940378,0.336797,0.939680,0.706150,-0.299872,0.712919,0.237835,0.156596,0.980311,0.120282,0.927500,0.706360,-0.301308,0.708116,0.254120,0.080218,0.942390,0.324755,0.936250,0.704330,-0.306006,0.714715,0.236057,0.293257,0.948610,0.118909,0.926380,0.703380,-0.302932,0.705689,0.261012,-0.135201,0.861666,0.489134,0.939410,0.702900,-0.291151,0.696232,0.285996,-0.844106,0.332676,0.420490,0.954670,0.703520,-0.312136,0.717399,0.237346,0.177614,0.955219,0.236663,0.927270,0.700650,0.312144,0.717399,0.237349,-0.177434,0.955241,0.236710,0.072380,0.699340,0.301319,0.708116,0.254124,-0.080410,0.942419,0.324624,0.063410,0.703020,0.302972,0.705691,0.261027,0.135360,0.861674,0.489075,0.060240,0.701580,0.306013,0.714715,0.236059,-0.293154,0.948625,0.119040,0.073280,0.702060,0.295803,0.706950,0.260558,0.047025,0.940511,0.336494,0.059970,0.704830,0.291189,0.696236,0.286013,0.843694,0.331798,0.422008,0.044980,0.702180,0.299879,0.712919,0.237838,-0.156578,0.980311,0.120306,0.072150,0.705060,-0.326397,0.562313,0.199821,-0.896273,-0.126306,0.425138,0.927170,0.632070,-0.329208,0.576382,0.202005,-0.850173,-0.189856,0.491081,0.926640,0.638710,-0.332319,0.577330,0.193634,-0.950997,-0.185490,0.247383,0.921920,0.639050,-0.322589,0.567406,0.208286,-0.825972,-0.109078,0.553057,0.931510,0.634320,-0.329655,0.584565,0.204066,-0.804622,-0.122074,0.581103,0.926530,0.642400,-0.336153,0.591883,0.192537,-0.975065,-0.158509,0.155316,0.919520,0.645270,-0.317506,0.575178,0.214450,-0.401733,0.256109,0.879215,0.934710,0.637880,0.317481,0.575177,0.214443,0.401227,0.256510,0.879329,0.064950,0.636580,0.329194,0.576381,0.202001,0.849989,-0.189483,0.491543,0.073020,0.637410,0.329642,0.584565,0.204063,0.804358,-0.122002,0.581484,0.073130,0.641100,0.322580,0.567406,0.208283,0.825736,-0.108581,0.553507,0.068150,0.633020,0.332310,0.577329,0.193632,0.950943,-0.185261,0.247763,0.077740,0.637750,0.336145,0.591882,0.192535,0.974999,-0.158514,0.155727,0.080140,0.643970,0.326394,0.562313,0.199820,0.896156,-0.126064,0.425455,0.072490,0.630760,-0.261179,0.576082,0.259691,-0.776181,0.243242,0.581701,0.963290,0.639730,-0.269093,0.570683,0.252834,-0.736927,0.164739,0.655591,0.959550,0.637280,-0.265586,0.569842,0.256835,-0.767090,0.291299,0.571591,0.961710,0.637340,-0.261981,0.579242,0.258549,-0.667768,0.068401,0.741220,0.962820,0.640420,-0.254212,0.586907,0.264927,-0.717425,0.138989,0.682629,0.965400,0.642320,-0.257093,0.579295,0.264954,-0.789180,0.344579,0.508389,0.965180,0.640920,-0.261757,0.571098,0.262780,-0.821721,0.377552,0.426883,0.964410,0.638290,0.257057,0.579293,0.264944,0.788494,0.344664,0.509397,0.034480,0.639620,0.261743,0.571097,0.262776,0.821348,0.377726,0.427446,0.035250,0.636990,0.261162,0.576081,0.259687,0.775438,0.243869,0.582430,0.036370,0.638420,0.265581,0.569842,0.256834,0.766029,0.291186,0.573071,0.037940,0.636030,0.261957,0.579241,0.258542,0.667288,0.068628,0.741632,0.036840,0.639110,0.254193,0.586906,0.264923,0.717038,0.137867,0.683264,0.034260,0.641020,0.269087,0.570682,0.252833,0.736683,0.165374,0.655706,0.040100,0.635980,-0.270433,0.482047,0.260860,-0.595914,-0.791153,0.137709,0.961730,0.587380,-0.278215,0.483567,0.251257,-0.172713,-0.982907,-0.063749,0.954340,0.590500,-0.273272,0.482157,0.248450,-0.506466,-0.859641,-0.067152,0.953810,0.586820,-0.273201,0.485312,0.267309,-0.429723,-0.857308,0.283480,0.964430,0.590820,-0.267391,0.478705,0.261884,-0.831695,-0.547226,0.093956,0.963380,0.584720,-0.269630,0.484560,0.279227,-0.873458,-0.471959,0.119689,0.972980,0.590500,-0.269645,0.478536,0.245305,-0.826749,-0.561764,0.030134,0.953690,0.583050,0.267391,0.478705,0.261884,0.831694,-0.547226,0.093961,0.036270,0.583370,0.273272,0.482158,0.248450,0.506465,-0.859641,-0.067154,0.045860,0.585490,0.270433,0.482047,0.260860,0.595913,-0.791153,0.137713,0.037920,0.586040,0.269645,0.478536,0.245305,0.826750,-0.561763,0.030134,0.045980,0.581720,0.273201,0.485312,0.267309,0.429750,-0.857292,0.283488,0.035220,0.589480,0.269630,0.484560,0.279226,0.873480,-0.471865,0.119902,0.026650,0.589150,0.278215,0.483567,0.251257,0.172713,-0.982907,-0.063748,0.045330,0.589170,0.008186,0.550803,0.776428,0.140114,0.464661,0.874333,0.501120,0.390460,0.014379,0.562510,0.767567,0.329402,0.527998,0.782759,0.502450,0.392320,0.007042,0.562713,0.769063,0.114698,0.548861,0.828007,0.501210,0.392400,0.016690,0.550293,0.774368,0.351661,0.457965,0.816457,0.502290,0.390360,0.0,0.551039,0.776936,0.000004,0.470506,0.882397,0.500000,0.390550,-0.000004,0.562573,0.769109,0.000012,0.551846,0.833946,0.500000,0.392500,0.006719,0.575178,0.760376,0.123913,0.541157,0.831742,0.501360,0.394890,-0.000004,0.575416,0.760760,-0.000047,0.540407,0.841404,0.500000,0.395010,0.013760,0.574700,0.759061,0.319308,0.521120,0.791503,0.502670,0.394790,-0.014385,0.562510,0.767568,-0.328894,0.527860,0.783066,0.497540,0.392320,-0.008186,0.550804,0.776428,-0.139725,0.464822,0.874310,0.498880,0.390460,-0.007049,0.562713,0.769063,-0.114672,0.548820,0.828038,0.498780,0.392400,-0.016690,0.550294,0.774368,-0.349675,0.459292,0.816565,0.497700,0.390360,-0.013769,0.574701,0.759062,-0.318580,0.521030,0.791855,0.497320,0.394790,-0.006727,0.575178,0.760376,-0.123930,0.541091,0.831782,0.498630,0.394890,0.022443,0.587158,0.746477,0.580951,0.410389,0.702906,0.504740,0.398910,0.014940,0.588824,0.749801,0.350759,0.482681,0.802488,0.503230,0.398740,0.020876,0.573860,0.755884,0.580470,0.434747,0.688512,0.503940,0.394970,0.024577,0.601274,0.736309,0.617768,0.401918,0.675888,0.505800,0.403390,0.016768,0.603548,0.740562,0.405655,0.454035,0.793282,0.503840,0.403220,0.030302,0.583598,0.740232,0.740739,0.297835,0.602163,0.506840,0.399100,0.032673,0.596977,0.729533,0.725490,0.346665,0.594549,0.508290,0.403470,0.027696,0.571296,0.749207,0.770569,0.302600,0.560943,0.505850,0.395230,0.021513,0.561811,0.763378,0.596151,0.468212,0.652213,0.503780,0.392480,0.024439,0.549597,0.769821,0.600095,0.447052,0.663347,0.503650,0.390440,0.027969,0.560175,0.755985,0.775607,0.387948,0.497927,0.505730,0.392720,0.030656,0.548889,0.762259,0.759736,0.424141,0.492855,0.505610,0.390570,-0.022477,0.587157,0.746477,-0.580238,0.410536,0.703409,0.495250,0.398910,-0.014977,0.588823,0.749799,-0.350090,0.482280,0.803021,0.496760,0.398740,-0.020921,0.573866,0.755896,-0.579077,0.434731,0.689695,0.496050,0.394970,-0.027790,0.571308,0.749233,-0.770606,0.301400,0.561538,0.494140,0.395230,-0.030331,0.583600,0.740235,-0.739926,0.298354,0.602905,0.493150,0.399100,-0.024658,0.601281,0.736324,-0.617777,0.401831,0.675932,0.494190,0.403390,-0.032729,0.596980,0.729540,-0.723830,0.347093,0.596319,0.491710,0.403470,-0.016833,0.603553,0.740572,-0.405080,0.454264,0.793445,0.496150,0.403220,-0.021516,0.561811,0.763377,-0.595474,0.467497,0.653343,0.496220,0.392480,-0.024451,0.549602,0.769831,-0.598084,0.450378,0.662914,0.496340,0.390440,-0.030665,0.548892,0.762264,-0.759586,0.426937,0.490666,0.494380,0.390570,-0.027972,0.560174,0.755984,-0.776104,0.385579,0.498991,0.494260,0.392720,0.026533,0.622826,0.721259,0.693528,0.345920,0.631948,0.507160,0.409870,0.034194,0.608383,0.720390,0.722058,0.360350,0.590576,0.509530,0.406970,0.035723,0.617515,0.712276,0.714652,0.343119,0.609543,0.510800,0.409920,0.025516,0.613058,0.727924,0.662640,0.381536,0.644468,0.506510,0.406890,0.017293,0.615865,0.733540,0.455417,0.428392,0.780433,0.504060,0.406640,0.017728,0.626014,0.728029,0.483949,0.418700,0.768429,0.504230,0.409560,-0.026587,0.622827,0.721261,-0.694122,0.345334,0.631616,0.492830,0.409870,-0.034246,0.608388,0.720401,-0.720598,0.362904,0.590796,0.490470,0.406970,-0.025551,0.613060,0.727928,-0.662407,0.382183,0.644323,0.493480,0.406890,-0.035768,0.617521,0.712285,-0.714568,0.345296,0.608410,0.489200,0.409920,-0.017778,0.626015,0.728031,-0.483893,0.417858,0.768923,0.495760,0.409560,-0.017328,0.615866,0.733543,-0.455267,0.428706,0.780348,0.495930,0.406640,0.034265,0.567433,0.739863,0.829825,0.184356,0.526691,0.509200,0.395090,0.038532,0.578288,0.731550,0.773681,0.205631,0.599277,0.510150,0.398870,0.042072,0.590227,0.721209,0.732279,0.313101,0.604760,0.511620,0.403100,0.052567,0.581967,0.713483,0.651455,0.311196,0.691927,0.515390,0.402050,0.047301,0.571170,0.723008,0.698896,0.180856,0.691980,0.513960,0.397990,0.040966,0.562777,0.730320,0.766382,0.118393,0.631381,0.513060,0.394300,0.033641,0.559631,0.745980,0.854437,0.308065,0.418369,0.509060,0.392690,0.038577,0.558063,0.735092,0.834108,0.264731,0.483922,0.512830,0.391990,0.035314,0.549831,0.751770,0.825477,0.407595,0.390453,0.508750,0.390520,0.039237,0.550796,0.740531,0.810864,0.435786,0.390628,0.512320,0.389880,-0.034327,0.567440,0.739878,-0.830694,0.181972,0.526150,0.490790,0.395090,-0.038563,0.578291,0.731557,-0.773548,0.204107,0.599970,0.489840,0.398870,-0.040995,0.562778,0.730322,-0.765828,0.120540,0.631646,0.486930,0.394300,-0.047324,0.571173,0.723014,-0.699058,0.179750,0.692104,0.486030,0.397990,-0.052641,0.581976,0.713504,-0.652496,0.308835,0.692004,0.484600,0.402050,-0.042245,0.590247,0.721253,-0.731794,0.311792,0.606023,0.488370,0.403100,-0.033645,0.559630,0.745979,-0.854927,0.305502,0.419247,0.490930,0.392690,-0.035314,0.549831,0.751770,-0.825323,0.408696,0.389627,0.491240,0.390520,-0.039262,0.550811,0.740540,-0.805185,0.440835,0.396662,0.487670,0.389880,-0.038598,0.558068,0.735098,-0.830913,0.270059,0.486469,0.487160,0.391990,0.056265,0.592831,0.704473,0.603045,0.372523,0.705382,0.517130,0.405100,0.060151,0.601827,0.696242,0.575861,0.395912,0.715289,0.519250,0.407530,0.044391,0.601328,0.711927,0.697706,0.352322,0.623760,0.513160,0.406430,0.047544,0.610471,0.703663,0.664081,0.354019,0.658534,0.514940,0.409170,-0.056289,0.592834,0.704478,-0.603108,0.372042,0.705581,0.482860,0.405100,-0.044527,0.601344,0.711965,-0.697428,0.354184,0.623015,0.486830,0.406430,-0.060288,0.601850,0.696279,-0.575827,0.397318,0.714536,0.480740,0.407530,-0.047574,0.610474,0.703669,-0.662851,0.356628,0.658365,0.485060,0.409170,0.009018,0.649124,0.717520,0.196195,0.509939,0.837538,0.502590,0.417400,-0.000018,0.638301,0.725397,0.000082,0.511044,0.859554,0.500000,0.413160,0.009128,0.637668,0.724712,0.205816,0.500247,0.841066,0.502240,0.412990,-0.000050,0.649813,0.717945,0.000517,0.522989,0.852339,0.500000,0.417680,0.018681,0.647324,0.714896,0.477222,0.454355,0.752210,0.505450,0.417010,0.018640,0.635984,0.721843,0.490779,0.437989,0.753194,0.504790,0.412850,0.008828,0.627268,0.730597,0.196089,0.468619,0.861363,0.501990,0.409510,-0.000053,0.627668,0.731158,0.000254,0.474257,0.880386,0.500000,0.409570,0.028163,0.643969,0.707811,0.695371,0.373336,0.614068,0.509080,0.416910,0.038200,0.626388,0.704382,0.711965,0.351527,0.607893,0.512420,0.412810,0.039460,0.638418,0.695329,0.736190,0.386496,0.555558,0.514200,0.416620,0.028125,0.632443,0.714583,0.705148,0.345085,0.619422,0.508220,0.413000,-0.009098,0.649123,0.717516,-0.194932,0.508227,0.838872,0.497400,0.417400,-0.009177,0.637669,0.724714,-0.205726,0.500519,0.840926,0.497750,0.412990,-0.008910,0.627271,0.730605,-0.196090,0.468436,0.861462,0.498000,0.409510,-0.018707,0.635988,0.721851,-0.489623,0.437858,0.754023,0.495200,0.412850,-0.018730,0.647324,0.714894,-0.474924,0.450924,0.755721,0.494540,0.417010,-0.028296,0.643984,0.707840,-0.696038,0.367159,0.617029,0.490910,0.416910,-0.038139,0.626383,0.704347,-0.712643,0.350466,0.607711,0.487570,0.412810,-0.028215,0.632454,0.714602,-0.706338,0.342926,0.619265,0.491780,0.413000,-0.039519,0.638423,0.695340,-0.738076,0.382005,0.556162,0.485790,0.416620,0.016743,0.660488,0.707992,0.438298,0.440701,0.783376,0.505900,0.422730,0.008376,0.662059,0.710106,0.177264,0.477761,0.860420,0.502920,0.423170,-0.000048,0.662540,0.710246,0.001137,0.483719,0.875223,0.500000,0.423480,0.007458,0.674047,0.703775,0.160823,0.364221,0.917322,0.503170,0.429190,-0.000071,0.674609,0.704232,0.001019,0.366187,0.930541,0.500000,0.429470,0.014629,0.672965,0.702299,0.366674,0.333584,0.868488,0.506200,0.428770,0.031887,0.656926,0.694657,0.754439,0.338042,0.562628,0.512570,0.422800,0.024752,0.658364,0.702647,0.655319,0.374943,0.655725,0.509150,0.422510,0.020965,0.672014,0.698850,0.575791,0.262820,0.774203,0.508860,0.428610,0.026507,0.671613,0.693654,0.739962,0.208480,0.639525,0.511610,0.428700,0.006394,0.694382,0.701162,0.065530,-0.163915,0.984295,0.502920,0.437590,-0.000070,0.685058,0.701324,0.001157,0.123548,0.992338,0.500000,0.434050,0.006772,0.684516,0.700874,0.129893,0.119296,0.984325,0.503130,0.433690,-0.000073,0.694819,0.701550,0.000458,-0.148257,0.988949,0.500000,0.438020,0.012726,0.693749,0.700326,0.124514,-0.207867,0.970200,0.505750,0.437120,0.013359,0.683661,0.699680,0.256177,0.085691,0.962824,0.506080,0.433210,0.018745,0.693640,0.699403,0.271167,-0.262958,0.925916,0.508390,0.437480,0.019255,0.683260,0.697781,0.433362,0.014120,0.901109,0.508600,0.433270,0.024450,0.693100,0.696913,0.532542,-0.296974,0.792594,0.510860,0.437630,0.024676,0.683088,0.694507,0.666673,-0.046130,0.743922,0.511040,0.433390,-0.017014,0.660518,0.708054,-0.435778,0.440378,0.784962,0.494090,0.422730,-0.008553,0.662076,0.710141,-0.174403,0.477494,0.861152,0.497070,0.423170,-0.014780,0.672966,0.702304,-0.366559,0.336713,0.867329,0.493800,0.428770,-0.007592,0.674045,0.703770,-0.158752,0.364905,0.917411,0.496820,0.429190,-0.032182,0.656952,0.694707,-0.756638,0.338855,0.559175,0.487420,0.422800,-0.025045,0.658394,0.702710,-0.654828,0.375039,0.656160,0.490840,0.422510,-0.021092,0.672017,0.698856,-0.576345,0.268462,0.771852,0.491130,0.428610,-0.026625,0.671617,0.693663,-0.739847,0.213286,0.638071,0.488380,0.428700,-0.006542,0.694387,0.701174,-0.068420,-0.161110,0.984562,0.497070,0.437590,-0.006950,0.684526,0.700899,-0.129062,0.118912,0.984481,0.496860,0.433690,-0.013503,0.683669,0.699701,-0.258056,0.085840,0.962309,0.493910,0.433210,-0.012864,0.693761,0.700329,-0.130904,-0.201415,0.970719,0.494240,0.437120,-0.019333,0.683261,0.697785,-0.435685,0.014940,0.899975,0.491390,0.433270,-0.018913,0.693670,0.699401,-0.274208,-0.255663,0.927063,0.491600,0.437480,-0.024553,0.693123,0.696896,-0.531639,-0.292707,0.794785,0.489140,0.437630,-0.024753,0.683090,0.694510,-0.665553,-0.045472,0.744964,0.488950,0.433390,0.067769,0.615750,0.680059,0.636181,0.563002,0.527544,0.524170,0.411730,0.054440,0.626149,0.687430,0.687644,0.481854,0.543105,0.519430,0.414080,0.051467,0.618809,0.695894,0.655670,0.391301,0.645740,0.517080,0.411710,0.064724,0.609480,0.688399,0.597175,0.461795,0.655841,0.521790,0.409660,0.045892,0.643379,0.683345,0.794893,0.462182,0.393107,0.518190,0.419140,0.037425,0.657963,0.685512,0.835712,0.369077,0.406654,0.515960,0.423790,0.031530,0.671768,0.686228,0.870962,0.203059,0.447429,0.514890,0.428940,0.039845,0.659680,0.674899,0.892498,0.399376,0.209636,0.519330,0.425070,0.034868,0.672199,0.676546,0.946178,0.188225,0.263283,0.518400,0.429190,0.047393,0.646566,0.672439,0.830557,0.517254,0.206455,0.521250,0.421140,0.056022,0.631499,0.677919,0.731982,0.570227,0.372885,0.521760,0.416350,0.056041,0.635980,0.668081,0.742348,0.621503,0.250307,0.523980,0.418590,0.068363,0.621464,0.671698,0.643944,0.649130,0.404928,0.525830,0.413980,0.066798,0.626452,0.663000,0.606682,0.695746,0.384544,0.527110,0.416370,-0.064782,0.609490,0.688414,-0.598209,0.462546,0.654368,0.478200,0.409660,-0.051559,0.618825,0.695915,-0.654134,0.392769,0.646406,0.482910,0.411710,-0.067805,0.615763,0.680068,-0.637073,0.562384,0.527127,0.475820,0.411730,-0.054511,0.626154,0.687444,-0.687581,0.481329,0.543650,0.480560,0.414080,-0.045945,0.643381,0.683344,-0.794710,0.458160,0.398153,0.481800,0.419140,-0.037575,0.657978,0.685547,-0.835316,0.369445,0.407133,0.484030,0.423790,-0.047703,0.646599,0.672509,-0.829969,0.518135,0.206611,0.478740,0.421140,-0.040052,0.659690,0.674926,-0.891649,0.402166,0.207902,0.480660,0.425070,-0.031630,0.671768,0.686222,-0.870677,0.204569,0.447295,0.485100,0.428940,-0.034991,0.672208,0.676572,-0.946570,0.187451,0.262425,0.481590,0.429190,-0.056163,0.631513,0.677954,-0.733302,0.565858,0.376925,0.478230,0.416350,-0.068311,0.621465,0.671680,-0.645368,0.646878,0.406262,0.474160,0.413980,-0.056226,0.635999,0.668129,-0.744687,0.618095,0.251792,0.476020,0.418590,-0.066929,0.626465,0.663038,-0.609733,0.692942,0.384782,0.472890,0.416370,0.040882,0.661321,0.663001,0.891007,0.358495,0.278548,0.522760,0.426280,0.047508,0.649555,0.660522,0.820421,0.490877,0.293169,0.524200,0.423210,0.036994,0.672464,0.665053,0.946775,0.098534,0.306443,0.521850,0.429360,0.042084,0.673213,0.653486,0.795250,-0.061545,0.603150,0.524810,0.429440,0.045133,0.663790,0.651848,0.751168,0.245511,0.612756,0.525590,0.427200,0.050587,0.654064,0.650605,0.682841,0.352338,0.639989,0.526630,0.424890,0.055293,0.640169,0.657916,0.714221,0.600682,0.359262,0.526060,0.420990,0.056909,0.645577,0.648770,0.570371,0.431986,0.698617,0.527870,0.422980,0.065493,0.632062,0.654967,0.516130,0.674609,0.527743,0.528330,0.418830,0.066315,0.638426,0.647428,0.331574,0.512864,0.791852,0.529620,0.420950,-0.040852,0.661313,0.662961,-0.890764,0.358647,0.279128,0.477230,0.426280,-0.047629,0.649571,0.660549,-0.817159,0.495465,0.294559,0.475800,0.423210,-0.050710,0.654083,0.650629,-0.678264,0.358298,0.641545,0.473360,0.424890,-0.045384,0.663816,0.651903,-0.751578,0.245311,0.612334,0.474400,0.427200,-0.037148,0.672467,0.665064,-0.946326,0.093891,0.309277,0.478140,0.429360,-0.042273,0.673230,0.653517,-0.797424,-0.062891,0.600133,0.475180,0.429440,-0.055438,0.640193,0.657941,-0.711075,0.599403,0.367544,0.473930,0.420990,-0.065622,0.632071,0.654996,-0.518081,0.667238,0.535150,0.471660,0.418830,-0.057383,0.645634,0.648897,-0.565135,0.436984,0.699763,0.472120,0.422980,-0.066873,0.638489,0.647579,-0.332442,0.508764,0.794129,0.470370,0.420950,0.029932,0.691271,0.691048,0.748591,-0.309460,0.586384,0.514010,0.436490,0.029570,0.682509,0.688107,0.850468,-0.072062,0.521067,0.514290,0.432930,0.034594,0.688913,0.681631,0.821711,-0.364032,0.438487,0.517630,0.434960,0.033699,0.681588,0.678771,0.928028,-0.122164,0.351909,0.517890,0.432250,0.038668,0.686732,0.670878,0.722079,-0.529963,0.444682,0.521060,0.433740,0.036928,0.680659,0.667814,0.890289,-0.268167,0.368066,0.521330,0.431670,0.044564,0.684168,0.659911,0.492790,-0.695254,0.523239,0.524220,0.432720,0.042377,0.679856,0.656456,0.685624,-0.459331,0.564743,0.524390,0.431180,-0.030017,0.691271,0.691042,-0.747907,-0.307382,0.588347,0.485990,0.436490,-0.029759,0.682518,0.688129,-0.849641,-0.071517,0.522489,0.485700,0.432930,-0.033820,0.681595,0.678778,-0.928644,-0.119783,0.351102,0.482100,0.432250,-0.034730,0.688919,0.681641,-0.820537,-0.365392,0.439554,0.482360,0.434960,-0.038698,0.686737,0.670877,-0.720405,-0.531170,0.445954,0.478930,0.433740,-0.037089,0.680676,0.667844,-0.890102,-0.265158,0.370689,0.478660,0.431670,-0.042616,0.679888,0.656512,-0.689161,-0.456451,0.562769,0.475600,0.431180,-0.044727,0.684184,0.659952,-0.495228,-0.694021,0.522575,0.475770,0.432720,0.064404,0.572841,0.708207,0.531545,0.294428,0.794212,0.519230,0.400200,0.057203,0.562874,0.716597,0.583642,0.153726,0.797327,0.517550,0.396510,0.077836,0.562260,0.704350,0.435601,0.222701,0.872156,0.523090,0.397030,0.068544,0.552294,0.710583,0.471336,0.068033,0.879326,0.521080,0.393870,0.060162,0.546385,0.715175,0.481603,-0.107694,0.869747,0.519390,0.390670,0.049911,0.556318,0.723018,0.632968,0.029421,0.773619,0.516320,0.392950,0.046055,0.552927,0.726317,0.768760,0.206511,0.605278,0.515830,0.390530,0.054616,0.543388,0.717561,0.697278,0.019533,0.716535,0.518320,0.388250,0.046280,0.547617,0.731063,0.794816,0.466494,0.388137,0.515020,0.388370,0.054467,0.539178,0.722435,0.877318,0.345106,0.333489,0.516930,0.386190,-0.064422,0.572843,0.708212,-0.530543,0.293534,0.795212,0.480760,0.400200,-0.057260,0.562880,0.716612,-0.583401,0.155224,0.797213,0.482440,0.396510,-0.049987,0.556362,0.723042,-0.633185,0.034970,0.773210,0.483670,0.392950,-0.060227,0.546422,0.715197,-0.484074,-0.106187,0.868560,0.480600,0.390670,-0.068635,0.552307,0.710609,-0.471838,0.067989,0.879060,0.478910,0.393870,-0.077867,0.562263,0.704358,-0.435355,0.221557,0.872570,0.476900,0.397030,-0.046185,0.553003,0.726360,-0.766735,0.218041,0.603801,0.484160,0.390530,-0.046509,0.547752,0.731148,-0.789337,0.472797,0.391676,0.484980,0.388370,-0.054703,0.539311,0.722515,-0.880665,0.342405,0.327394,0.483060,0.386190,-0.054778,0.543478,0.717617,-0.702677,0.023366,0.711125,0.481670,0.388250,0.070008,0.583559,0.699863,0.485098,0.389581,0.782884,0.521150,0.402870,0.085189,0.573326,0.696895,0.421704,0.357280,0.833377,0.525250,0.399400,0.090793,0.583135,0.688694,0.445536,0.478516,0.756651,0.527790,0.401360,0.074943,0.592876,0.691902,0.483190,0.457357,0.746560,0.523480,0.404920,0.095841,0.590753,0.678831,0.451125,0.569847,0.686848,0.530780,0.403150,0.082953,0.605385,0.674511,0.517924,0.622037,0.587218,0.528630,0.408430,0.080133,0.600050,0.683802,0.516966,0.547339,0.658154,0.526240,0.406630,0.099535,0.597812,0.670175,0.396451,0.594180,0.699841,0.533290,0.405110,-0.085317,0.573343,0.696932,-0.421125,0.355809,0.834299,0.474740,0.399400,-0.070174,0.583578,0.699910,-0.484148,0.388586,0.783965,0.478840,0.402870,-0.090815,0.583139,0.688700,-0.444424,0.478887,0.757069,0.472200,0.401360,-0.075057,0.592896,0.691934,-0.483189,0.458827,0.745658,0.476510,0.404920,-0.083004,0.605390,0.674525,-0.514231,0.624850,0.587476,0.471360,0.408430,-0.096124,0.590801,0.678910,-0.448781,0.568530,0.689470,0.469210,0.403150,-0.080096,0.600051,0.683790,-0.514329,0.548788,0.659013,0.473750,0.406630,-0.099873,0.597863,0.670268,-0.394742,0.597281,0.698165,0.466700,0.405110,0.100142,0.605457,0.664489,0.315739,0.590046,0.743071,0.534290,0.407630,0.082908,0.611335,0.666924,0.465970,0.671122,0.576600,0.529790,0.410780,0.081064,0.617809,0.660324,0.378577,0.689429,0.617549,0.530440,0.413400,0.098592,0.612871,0.659516,0.248159,0.597671,0.762369,0.534660,0.410380,-0.100162,0.605462,0.664494,-0.315604,0.595605,0.738680,0.465700,0.407630,-0.083025,0.611348,0.666955,-0.464534,0.673652,0.574805,0.470200,0.410780,-0.098662,0.612875,0.659531,-0.248403,0.601947,0.758917,0.465330,0.410380,-0.081037,0.617809,0.660315,-0.381080,0.690854,0.614410,0.469550,0.413400,0.080938,0.539981,0.705374,0.364569,-0.023887,0.930870,0.524560,0.389330,0.091697,0.549297,0.700875,0.384760,0.118341,0.915399,0.526950,0.392000,0.092664,0.526625,0.700320,0.306649,-0.109531,0.945499,0.527550,0.384090,0.104356,0.534687,0.696856,0.391718,0.013507,0.919986,0.530560,0.386390,0.081691,0.522096,0.702687,0.204732,-0.256191,0.944696,0.524800,0.382030,0.071112,0.534667,0.708360,0.313620,-0.194652,0.929383,0.522440,0.386710,0.064137,0.532248,0.709332,0.480952,-0.191529,0.855571,0.520550,0.384860,0.073820,0.521161,0.703268,0.259886,-0.297228,0.918757,0.522330,0.380750,0.059061,0.527642,0.713173,0.905054,0.044583,0.422953,0.518290,0.383360,0.062993,0.516464,0.706025,0.674444,-0.378836,0.633725,0.519210,0.379530,-0.080951,0.539982,0.705377,-0.364900,-0.025156,0.930707,0.475430,0.389330,-0.091748,0.549304,0.700890,-0.385197,0.117250,0.915355,0.473050,0.392000,-0.071116,0.534667,0.708361,-0.314800,-0.195454,0.928816,0.477560,0.386710,-0.081694,0.522096,0.702688,-0.204735,-0.256272,0.944674,0.475190,0.382030,-0.092672,0.526626,0.700322,-0.306482,-0.109908,0.945510,0.472440,0.384090,-0.104358,0.534688,0.696856,-0.391659,0.013125,0.920017,0.469430,0.386390,-0.064149,0.532250,0.709336,-0.484280,-0.193244,0.853305,0.479440,0.384860,-0.059064,0.527645,0.713174,-0.907592,0.039430,0.417997,0.481700,0.383360,-0.073828,0.521162,0.703270,-0.259939,-0.297271,0.918728,0.477670,0.380750,-0.063002,0.516465,0.706027,-0.674312,-0.378933,0.633809,0.480780,0.379530,0.100974,0.560789,0.694612,0.440640,0.273275,0.855077,0.529420,0.394320,0.115758,0.545341,0.690614,0.528645,0.157219,0.834156,0.533600,0.388730,0.130588,0.559853,0.674742,0.616518,0.234571,0.751586,0.539210,0.391600,0.108008,0.572813,0.685546,0.483657,0.418559,0.768690,0.532330,0.396830,-0.115774,0.545342,0.690618,-0.528864,0.155383,0.834362,0.466390,0.388730,-0.108304,0.572853,0.685630,-0.483570,0.416950,0.769619,0.467660,0.396830,-0.130594,0.559852,0.674743,-0.616993,0.232098,0.751964,0.460780,0.391600,-0.101007,0.560793,0.694621,-0.440261,0.270493,0.856157,0.470570,0.394320,0.112918,0.583953,0.674405,0.450864,0.492590,0.744364,0.535740,0.399740,0.116741,0.593579,0.665742,0.381851,0.488193,0.784766,0.538640,0.402770,0.134091,0.578385,0.663854,0.536808,0.305733,0.786362,0.542910,0.397140,0.137966,0.590794,0.656448,0.451050,0.317373,0.834163,0.545760,0.401240,0.117431,0.609425,0.655736,0.263353,0.483193,0.834967,0.540400,0.408130,0.117946,0.601880,0.659980,0.321390,0.463360,0.825836,0.539950,0.405550,0.139818,0.608258,0.649749,0.322747,0.324528,0.889110,0.547720,0.406740,0.139706,0.600323,0.651892,0.382220,0.307568,0.871384,0.547220,0.404330,-0.112911,0.583953,0.674402,-0.452058,0.489777,0.745494,0.464250,0.399740,-0.134339,0.578409,0.663922,-0.537498,0.304634,0.786316,0.457080,0.397140,-0.116987,0.593609,0.665808,-0.383525,0.490056,0.782786,0.461350,0.402770,-0.138104,0.590807,0.656483,-0.450993,0.318222,0.833871,0.454230,0.401240,-0.117437,0.609428,0.655734,-0.261478,0.483778,0.835218,0.459590,0.408130,-0.118038,0.601886,0.660000,-0.322061,0.467744,0.823099,0.460040,0.405550,-0.139696,0.600324,0.651887,-0.380802,0.307924,0.871879,0.452770,0.404330,-0.140037,0.608274,0.649804,-0.321271,0.322966,0.890212,0.452270,0.406740,0.019904,0.513481,0.777872,0.350261,-0.496435,0.794272,0.502150,0.384610,0.010289,0.507268,0.775398,0.167502,-0.770076,0.615570,0.501310,0.383440,0.019285,0.506627,0.770190,0.338524,-0.796647,0.500755,0.502870,0.382520,0.010651,0.513989,0.781565,0.213484,-0.475897,0.853198,0.501090,0.384940,0.0,0.514874,0.783785,-0.000002,-0.460237,0.887796,0.500000,0.385190,0.0,0.506931,0.776091,-0.000002,-0.767197,0.641412,0.500000,0.383860,0.010355,0.524557,0.784217,0.211790,-0.024489,0.977008,0.500940,0.386530,0.0,0.524879,0.785259,-0.000002,-0.001498,0.999999,0.500000,0.386630,0.019792,0.524062,0.781157,0.378010,-0.053627,0.924247,0.501860,0.386380,-0.019904,0.513482,0.777872,-0.349767,-0.496842,0.794236,0.497840,0.384610,-0.010289,0.507268,0.775398,-0.167505,-0.770073,0.615572,0.498680,0.383440,-0.010651,0.513989,0.781564,-0.213436,-0.475933,0.853189,0.498900,0.384940,-0.019285,0.506627,0.770190,-0.338523,-0.796646,0.500757,0.497120,0.382520,-0.019796,0.524064,0.781160,-0.375697,-0.055338,0.925089,0.498140,0.386380,-0.010355,0.524557,0.784217,-0.211327,-0.024768,0.977102,0.499060,0.386530,0.0,0.503645,0.771275,-0.000001,-0.874945,0.484223,0.500000,0.382640,0.009008,0.503413,0.769504,0.125560,-0.874317,0.468832,0.501440,0.382320,0.016776,0.501987,0.763752,0.313741,-0.871462,0.376989,0.502830,0.381670,0.008392,0.499650,0.761577,0.108236,-0.922202,0.371253,0.501460,0.381210,0.015081,0.499637,0.758643,0.291141,-0.922821,0.252265,0.502750,0.380890,0.0,0.499804,0.762711,-0.000000,-0.917441,0.397871,0.500000,0.381320,-0.009008,0.503413,0.769504,-0.125561,-0.874317,0.468834,0.498550,0.382320,-0.008392,0.499650,0.761577,-0.108236,-0.922202,0.371253,0.498530,0.381210,-0.016776,0.501987,0.763752,-0.313740,-0.871462,0.376990,0.497170,0.381670,-0.015081,0.499637,0.758643,-0.291140,-0.922822,0.252266,0.497240,0.380890,0.028136,0.523249,0.776798,0.554906,-0.036652,0.831105,0.502700,0.386330,0.026953,0.514369,0.774988,0.460049,-0.486159,0.742970,0.502950,0.384670,0.034817,0.522449,0.771260,0.706458,0.028946,0.707163,0.503900,0.386240,0.033241,0.514894,0.770894,0.582563,-0.449181,0.677389,0.503920,0.384740,0.025725,0.508294,0.768530,0.378109,-0.804645,0.457800,0.503610,0.383000,0.031284,0.509593,0.766001,0.422817,-0.807559,0.411187,0.504430,0.383300,0.026597,0.505556,0.759536,0.349271,-0.934926,0.062641,0.504650,0.381660,0.030151,0.507513,0.753192,0.147837,-0.946905,-0.285507,0.506000,0.381060,0.030286,0.506927,0.758504,0.296262,-0.954048,0.044963,0.505330,0.381890,0.027974,0.507599,0.752001,0.214658,-0.903706,-0.370455,0.505920,0.380580,0.023606,0.503931,0.759253,0.498495,-0.861658,0.095126,0.504200,0.381340,0.021486,0.502125,0.757283,0.572294,-0.817064,0.069902,0.503900,0.380970,0.019604,0.500828,0.754141,0.562537,-0.826148,-0.032123,0.503660,0.380340,-0.026953,0.514369,0.774988,-0.459345,-0.487399,0.742593,0.497040,0.384670,-0.028166,0.523263,0.776821,-0.553035,-0.040756,0.832160,0.497300,0.386330,-0.025725,0.508294,0.768530,-0.378107,-0.804644,0.457802,0.496380,0.383000,-0.033241,0.514894,0.770894,-0.582419,-0.450689,0.676511,0.496070,0.384740,-0.031284,0.509593,0.766001,-0.422818,-0.807557,0.411189,0.495560,0.383300,-0.034849,0.522462,0.771281,-0.708137,0.024327,0.705656,0.496090,0.386240,-0.026597,0.505556,0.759536,-0.349269,-0.934926,0.062641,0.495340,0.381660,-0.030151,0.507513,0.753192,-0.147840,-0.946905,-0.285507,0.493990,0.381060,-0.027974,0.507599,0.752001,-0.214657,-0.903707,-0.370454,0.494070,0.380580,-0.030286,0.506927,0.758504,-0.296262,-0.954048,0.044963,0.494660,0.381890,-0.023606,0.503931,0.759253,-0.498494,-0.861658,0.095127,0.495790,0.381340,-0.021486,0.502125,0.757283,-0.572294,-0.817064,0.069903,0.496090,0.380970,-0.019604,0.500828,0.754141,-0.562535,-0.826149,-0.032123,0.496330,0.380340,0.0,0.537903,0.782600,-0.000001,0.293213,0.956047,0.500000,0.388450,0.009589,0.537598,0.781885,0.172457,0.285989,0.942586,0.500990,0.388370,0.018885,0.537063,0.779635,0.369357,0.277193,0.886983,0.502000,0.388260,0.033760,0.535715,0.768036,0.751404,0.320015,0.577046,0.504710,0.388190,0.027349,0.536357,0.775192,0.599203,0.286343,0.747638,0.503100,0.388220,-0.009589,0.537598,0.781885,-0.171676,0.285966,0.942736,0.499010,0.388370,-0.018916,0.537073,0.779653,-0.365915,0.277337,0.888364,0.497990,0.388260,-0.033856,0.535761,0.768115,-0.753317,0.320018,0.574545,0.495290,0.388190,-0.027450,0.536396,0.775264,-0.596736,0.287031,0.749346,0.496890,0.388220,0.043301,0.537882,0.748741,0.795674,0.428405,0.428219,0.510590,0.387350,0.039170,0.536437,0.758886,0.803986,0.374740,0.461710,0.507440,0.388000,0.047319,0.521510,0.755832,0.846554,0.101246,0.522585,0.508820,0.385310,0.041436,0.522034,0.763958,0.796105,0.098569,0.597077,0.506170,0.385930,0.049471,0.536694,0.739920,0.799486,0.434246,0.415033,0.512910,0.386070,0.057688,0.529708,0.731947,0.906143,0.309229,0.288587,0.514470,0.384310,0.052273,0.520023,0.748007,0.859830,-0.005434,0.510551,0.510700,0.384360,0.056808,0.516118,0.739914,0.855895,-0.237344,0.459468,0.512030,0.383080,-0.043310,0.537888,0.748744,-0.792059,0.428583,0.434693,0.489400,0.387350,-0.039185,0.536442,0.758896,-0.805713,0.374117,0.459198,0.492550,0.388000,-0.041437,0.522035,0.763958,-0.797814,0.096316,0.595160,0.493820,0.385930,-0.047319,0.521510,0.755832,-0.845328,0.100144,0.524779,0.491170,0.385310,-0.057845,0.529796,0.731993,-0.908885,0.300631,0.289049,0.485530,0.384310,-0.049647,0.536798,0.739976,-0.796544,0.431181,0.423792,0.487080,0.386070,-0.052273,0.520023,0.748007,-0.857812,-0.008855,0.513887,0.489290,0.384360,-0.056808,0.516118,0.739914,-0.854383,-0.241934,0.459889,0.487960,0.383080,0.039977,0.515060,0.764751,0.680523,-0.425792,0.596313,0.505790,0.384530,0.045427,0.514557,0.757145,0.736600,-0.462860,0.493134,0.507940,0.384080,0.036961,0.510229,0.761031,0.432084,-0.829339,0.354260,0.505920,0.383310,0.041558,0.509919,0.754951,0.406042,-0.871828,0.273944,0.507540,0.383100,-0.039977,0.515060,0.764751,-0.680613,-0.426435,0.595751,0.494200,0.384530,-0.036961,0.510229,0.761031,-0.432083,-0.829338,0.354264,0.494070,0.383310,-0.045427,0.514557,0.757146,-0.736597,-0.462878,0.493121,0.492050,0.384080,-0.041558,0.509919,0.754952,-0.406039,-0.871828,0.273948,0.492450,0.383100,0.058467,0.511890,0.731987,0.728371,-0.600220,0.330471,0.513140,0.381340,0.050058,0.508295,0.734863,0.176265,-0.932669,0.314737,0.511470,0.380930,0.052257,0.505383,0.725331,0.413561,-0.859709,0.299780,0.513640,0.379350,0.046319,0.506050,0.728274,-0.164407,-0.862454,0.478689,0.512020,0.379220,0.044190,0.509023,0.735208,-0.377517,-0.919225,0.111835,0.510190,0.380370,0.041469,0.509700,0.728424,-0.642419,-0.635531,0.428250,0.510530,0.378890,0.044921,0.508909,0.742025,0.033515,-0.997034,0.069288,0.509340,0.381700,0.050649,0.511098,0.742003,0.500865,-0.796122,0.339595,0.510410,0.382390,0.061885,0.518305,0.724894,0.986460,-0.066415,0.149953,0.515540,0.382080,0.057920,0.508098,0.719138,0.795891,-0.599915,0.081600,0.515900,0.379550,0.053959,0.505038,0.706202,0.537616,-0.689538,0.485291,0.517510,0.375990,0.049121,0.502029,0.714732,0.476196,-0.873018,0.105249,0.515160,0.376860,0.044834,0.499137,0.706788,0.438450,-0.698812,0.565175,0.515470,0.373720,0.040964,0.498674,0.712640,0.301705,-0.919950,0.250331,0.513540,0.374720,0.044726,0.501707,0.720584,0.145837,-0.898028,0.415064,0.513020,0.377300,0.037684,0.500019,0.718507,0.047656,-0.814771,0.577820,0.511680,0.375640,0.040940,0.504722,0.723966,-0.296045,-0.609838,0.735157,0.511520,0.377670,0.035367,0.504404,0.721639,-0.221153,-0.352687,0.909232,0.510420,0.376630,0.037392,0.509810,0.723523,-0.547635,-0.268774,0.792374,0.510080,0.377860,0.033919,0.509037,0.721623,-0.348434,-0.057326,0.935579,0.509640,0.377270,-0.058479,0.511892,0.731990,-0.727456,-0.601750,0.329704,0.486850,0.381340,-0.052262,0.505384,0.725333,-0.413597,-0.859761,0.299581,0.486360,0.379350,-0.050058,0.508294,0.734863,-0.176172,-0.932674,0.314775,0.488520,0.380930,-0.046327,0.506051,0.728276,0.164468,-0.862571,0.478457,0.487970,0.379220,-0.050649,0.511098,0.742003,-0.500781,-0.796124,0.339713,0.489580,0.382390,-0.044921,0.508909,0.742025,-0.033514,-0.997033,0.069289,0.490650,0.381700,-0.044191,0.509023,0.735208,0.377482,-0.919260,0.111666,0.489800,0.380370,-0.041471,0.509701,0.728424,0.642666,-0.635767,0.427529,0.489460,0.378890,-0.061886,0.518306,0.724894,-0.986470,-0.071854,0.147356,0.484450,0.382080,-0.057920,0.508098,0.719138,-0.795887,-0.599928,0.081548,0.484090,0.379550,-0.053966,0.505038,0.706203,-0.537525,-0.689535,0.485395,0.482480,0.375990,-0.049121,0.502029,0.714732,-0.476168,-0.873025,0.105321,0.484830,0.376860,-0.044726,0.501707,0.720584,-0.145878,-0.898026,0.415053,0.486970,0.377300,-0.040964,0.498674,0.712640,-0.301667,-0.919967,0.250315,0.486460,0.374720,-0.037685,0.500018,0.718508,-0.047645,-0.814791,0.577793,0.488310,0.375640,-0.044835,0.499137,0.706789,-0.438360,-0.698743,0.565331,0.484520,0.373720,-0.040952,0.504724,0.723969,0.296123,-0.609885,0.735086,0.488470,0.377670,-0.037408,0.509812,0.723527,0.548055,-0.268950,0.792023,0.489910,0.377860,-0.035377,0.504406,0.721642,0.221162,-0.352645,0.909246,0.489570,0.376630,-0.033935,0.509039,0.721627,0.348437,-0.057214,0.935584,0.490350,0.377270,0.061949,0.500770,0.700063,0.316246,-0.317836,0.893850,0.519090,0.373720,0.074300,0.507080,0.698933,0.280678,-0.310466,0.908202,0.521400,0.375530,0.069266,0.492543,0.695856,0.297794,-0.154534,0.942039,0.520320,0.370610,0.081433,0.496891,0.693379,0.256446,-0.275607,0.926432,0.523060,0.371680,0.055880,0.487875,0.699804,0.353583,0.031471,0.934874,0.517280,0.369660,0.050220,0.494932,0.702015,0.373203,-0.216671,0.902094,0.516580,0.372040,0.082907,0.509688,0.697612,0.164187,-0.348728,0.922730,0.523790,0.376690,0.091127,0.509960,0.697221,0.156197,-0.319390,0.934662,0.526350,0.377830,0.090272,0.498358,0.691973,0.137201,-0.374355,0.917079,0.525350,0.372750,0.099106,0.498453,0.691515,0.135841,-0.367000,0.920249,0.527900,0.373880,-0.061954,0.500770,0.700064,-0.316244,-0.317986,0.893798,0.480900,0.373720,-0.074303,0.507081,0.698934,-0.280722,-0.310513,0.908172,0.478590,0.375530,-0.050225,0.494931,0.702017,-0.372759,-0.218381,0.901865,0.483410,0.372040,-0.055879,0.487876,0.699801,-0.352100,0.024427,0.935644,0.482710,0.369660,-0.069266,0.492543,0.695856,-0.297628,-0.155695,0.941901,0.479670,0.370610,-0.081438,0.496891,0.693381,-0.256318,-0.275860,0.926392,0.476930,0.371680,-0.082907,0.509688,0.697612,-0.164256,-0.348711,0.922724,0.476200,0.376690,-0.091127,0.509960,0.697221,-0.156158,-0.319440,0.934651,0.473640,0.377830,-0.090278,0.498358,0.691975,-0.137109,-0.374364,0.917089,0.474640,0.372750,-0.099111,0.498454,0.691516,-0.135852,-0.366902,0.920287,0.472090,0.373880,0.048746,0.513104,0.749310,0.691385,-0.595161,0.409597,0.509360,0.383400,0.044076,0.509361,0.748568,0.305450,-0.937470,0.166882,0.508560,0.382580,-0.048746,0.513104,0.749310,-0.691387,-0.595157,0.409600,0.490630,0.383400,-0.044076,0.509361,0.748568,-0.305449,-0.937470,0.166884,0.491430,0.382580,0.034294,0.508036,0.755407,0.217948,-0.975939,-0.006456,0.506320,0.382060,0.037810,0.508609,0.751050,0.044678,-0.996201,-0.074748,0.507370,0.382040,0.031965,0.508829,0.749902,0.025743,-0.919450,-0.392364,0.506750,0.380780,0.034412,0.510558,0.746220,-0.192396,-0.880103,-0.434054,0.507400,0.380720,0.040061,0.509010,0.746295,-0.152380,-0.980597,-0.123326,0.508180,0.381650,0.040804,0.509785,0.741037,-0.401496,-0.897660,-0.181680,0.508860,0.380890,0.036602,0.511483,0.742502,-0.426104,-0.821261,-0.379429,0.508120,0.380480,0.038151,0.511783,0.739802,-0.567596,-0.757305,-0.322993,0.508620,0.380220,-0.034294,0.508036,0.755407,-0.217947,-0.975939,-0.006456,0.493670,0.382060,-0.031965,0.508829,0.749902,-0.025747,-0.919450,-0.392363,0.493240,0.380780,-0.037811,0.508609,0.751050,-0.044676,-0.996201,-0.074747,0.492620,0.382040,-0.034412,0.510558,0.746220,0.192391,-0.880104,-0.434054,0.492590,0.380720,-0.040061,0.509010,0.746295,0.152379,-0.980597,-0.123326,0.491810,0.381650,-0.036602,0.511483,0.742502,0.426099,-0.821263,-0.379429,0.491880,0.380480,-0.040804,0.509785,0.741037,0.401492,-0.897662,-0.181679,0.491130,0.380890,-0.038151,0.511783,0.739802,0.567592,-0.757308,-0.322992,0.491370,0.380220,0.040062,0.512226,0.734630,-0.663260,-0.742536,-0.093414,0.509410,0.379750,0.037661,0.515519,0.726970,-0.734801,-0.586976,0.339892,0.509450,0.378580,0.036784,0.516201,0.734593,-0.618920,-0.744790,-0.249452,0.508830,0.379270,0.033062,0.520882,0.726075,-0.452523,-0.867011,0.208601,0.508700,0.378350,-0.040062,0.512226,0.734630,0.663219,-0.742554,-0.093560,0.490580,0.379750,-0.036784,0.516201,0.734593,0.618865,-0.744806,-0.249539,0.491170,0.379270,-0.037664,0.515520,0.726971,0.734933,-0.587326,0.339001,0.490540,0.378580,-0.033063,0.520882,0.726075,0.452431,-0.867164,0.208164,0.491290,0.378350,0.026171,0.519324,0.721213,-0.013950,-0.602371,0.798094,0.508320,0.377780,0.029657,0.512447,0.720127,-0.183957,-0.016051,0.982803,0.508780,0.377310,0.033076,0.516023,0.721469,-0.472182,-0.308725,0.825671,0.509010,0.377830,0.022310,0.514246,0.719779,0.215351,-0.028046,0.976134,0.508070,0.377290,-0.029677,0.512450,0.720133,0.184124,-0.016108,0.982771,0.491210,0.377310,-0.026184,0.519326,0.721217,0.014255,-0.602575,0.797935,0.491670,0.377780,-0.033101,0.516026,0.721476,0.472658,-0.309158,0.825237,0.490980,0.377830,-0.022321,0.514247,0.719782,-0.214794,-0.028241,0.976251,0.491920,0.377290,0.0,0.496483,0.754818,0.000001,-0.934921,0.354856,0.500000,0.379670,0.007125,0.496718,0.754322,0.156124,-0.939620,0.304531,0.501300,0.379660,0.013425,0.497792,0.752209,0.372578,-0.914911,0.155316,0.502450,0.379560,0.006160,0.494033,0.746346,0.242788,-0.933100,0.265290,0.501160,0.377860,0.011808,0.496029,0.744614,0.501428,-0.853380,0.142521,0.502240,0.377810,0.000000,0.493482,0.746822,-0.000000,-0.947956,0.318402,0.500000,0.377860,0.017027,0.499640,0.749259,0.642738,-0.759486,-0.100350,0.503350,0.379190,0.014507,0.498216,0.741829,0.789963,-0.612688,0.023926,0.503320,0.377610,-0.007125,0.496718,0.754322,-0.156124,-0.939620,0.304532,0.498690,0.379660,-0.006160,0.494033,0.746346,-0.242788,-0.933100,0.265288,0.498830,0.377860,-0.013425,0.497792,0.752209,-0.372579,-0.914910,0.155317,0.497540,0.379560,-0.011808,0.496029,0.744614,-0.501425,-0.853381,0.142525,0.497750,0.377810,-0.017027,0.499640,0.749259,-0.642738,-0.759485,-0.100349,0.496640,0.379190,-0.014507,0.498216,0.741829,-0.789965,-0.612685,0.023934,0.496670,0.377610,0.030049,0.515957,0.740949,-0.128636,-0.805376,-0.578639,0.507630,0.379230,0.029174,0.511517,0.746144,0.039752,-0.808180,-0.587593,0.506950,0.379750,-0.030049,0.515957,0.740949,0.128631,-0.805377,-0.578638,0.492360,0.379230,-0.029174,0.511517,0.746144,-0.039754,-0.808181,-0.587591,0.493050,0.379750,0.033093,0.518049,0.736974,-0.378088,-0.821548,-0.426741,0.508210,0.379100,0.026251,0.522470,0.729102,0.021347,-0.993439,-0.112357,0.508100,0.378220,-0.033093,0.518049,0.736974,0.378076,-0.821548,-0.426752,0.491780,0.379100,-0.026251,0.522470,0.729102,-0.021352,-0.993440,-0.112346,0.491900,0.378220,0.017770,0.500234,0.728787,0.887645,-0.136538,0.439821,0.505580,0.375850,0.015979,0.494884,0.725884,0.712660,-0.556782,0.426743,0.504970,0.374190,0.020217,0.497278,0.723017,0.686850,-0.465796,0.557916,0.506590,0.374420,0.014589,0.496732,0.733147,0.798764,-0.544178,0.256606,0.504010,0.375840,0.011966,0.492419,0.729423,0.610287,-0.693281,0.383290,0.503150,0.374130,0.011278,0.494271,0.736456,0.587616,-0.778469,0.220664,0.502550,0.375950,0.006000,0.489532,0.732221,0.352909,-0.849588,0.391989,0.501520,0.374260,0.005884,0.491757,0.738706,0.320664,-0.904587,0.280886,0.501250,0.376040,0.0,0.488661,0.733146,-0.000015,-0.916660,0.399668,0.500000,0.374350,0.0,0.490862,0.739335,-0.000007,-0.947963,0.318379,0.500000,0.376080,-0.015980,0.494884,0.725884,-0.712594,-0.556868,0.426742,0.495020,0.374190,-0.017770,0.500234,0.728787,-0.887590,-0.136502,0.439944,0.494420,0.375850,-0.020218,0.497279,0.723017,-0.686733,-0.465896,0.557977,0.493400,0.374420,-0.014589,0.496732,0.733147,-0.798750,-0.544189,0.256626,0.495980,0.375840,-0.011278,0.494271,0.736456,-0.587600,-0.778482,0.220662,0.497440,0.375950,-0.011967,0.492419,0.729423,-0.610199,-0.693406,0.383205,0.496840,0.374130,-0.006000,0.489532,0.732220,-0.352887,-0.849658,0.391857,0.498470,0.374260,-0.005884,0.491757,0.738706,-0.320664,-0.904590,0.280876,0.498740,0.376040,0.021059,0.504585,0.723712,0.642682,0.130631,0.754914,0.507080,0.376010,0.014910,0.510964,0.724461,0.774802,0.107123,0.623063,0.507030,0.377130,0.025640,0.506366,0.721235,0.267112,0.062040,0.961666,0.508220,0.376240,0.024412,0.499122,0.721472,0.536260,-0.431765,0.725262,0.507790,0.374580,0.028051,0.499644,0.720238,0.333556,-0.497916,0.800512,0.508930,0.374700,-0.014910,0.510964,0.724461,-0.774535,0.107034,0.623410,0.492960,0.377130,-0.021059,0.504585,0.723712,-0.642346,0.130520,0.755219,0.492920,0.376010,-0.024417,0.499122,0.721474,-0.535887,-0.431975,0.725412,0.492200,0.374580,-0.025647,0.506367,0.721237,-0.266693,0.061692,0.961805,0.491770,0.376240,-0.028057,0.499644,0.720240,-0.333394,-0.498016,0.800518,0.491060,0.374700,0.012159,0.488786,0.724454,0.549170,-0.566453,0.614446,0.503570,0.372450,0.017011,0.491511,0.721327,0.635528,-0.413074,0.652283,0.505520,0.372710,0.021282,0.494145,0.718444,0.585059,-0.411532,0.698819,0.507230,0.373100,0.018250,0.486373,0.718793,0.482420,-0.242294,0.841763,0.505740,0.371000,0.022837,0.489030,0.716428,0.495991,-0.131620,0.858294,0.507530,0.371480,0.012785,0.484052,0.720897,0.386470,-0.453322,0.803206,0.503800,0.370670,0.006279,0.486663,0.726899,0.313028,-0.755377,0.575690,0.501750,0.372520,0.006626,0.482631,0.722283,0.206127,-0.641496,0.738914,0.501890,0.370640,0.000011,0.482166,0.722733,-0.000014,-0.711213,0.702977,0.500000,0.370680,0.000003,0.485982,0.727827,-0.000079,-0.834034,0.551713,0.500000,0.372600,-0.012157,0.488787,0.724453,-0.549015,-0.567112,0.613976,0.496420,0.372450,-0.017012,0.491511,0.721326,-0.635391,-0.413705,0.652017,0.494470,0.372710,-0.012777,0.484055,0.720890,-0.386815,-0.453859,0.802737,0.496190,0.370670,-0.018246,0.486376,0.718788,-0.483008,-0.243806,0.840989,0.494250,0.371000,-0.022835,0.489031,0.716425,-0.496463,-0.133630,0.857711,0.492460,0.371480,-0.021282,0.494145,0.718443,-0.585003,-0.412012,0.698583,0.492760,0.373100,-0.006275,0.486664,0.726898,-0.313057,-0.755728,0.575213,0.498250,0.372520,-0.006612,0.482633,0.722278,-0.206344,-0.641480,0.738868,0.498100,0.370640,0.026841,0.491448,0.714310,0.518359,-0.145318,0.842726,0.509030,0.371950,0.029213,0.496693,0.715146,0.407103,-0.659978,0.631424,0.509850,0.373540,0.025246,0.495803,0.716732,0.489733,-0.516942,0.702092,0.508510,0.373340,0.031210,0.493579,0.711582,0.521119,-0.272414,0.808842,0.510720,0.372380,-0.026838,0.491450,0.714308,-0.518905,-0.147305,0.842044,0.490960,0.371950,-0.029216,0.496691,0.715147,-0.406986,-0.660380,0.631079,0.490140,0.373540,-0.031208,0.493580,0.711579,-0.521154,-0.274443,0.808133,0.489270,0.372380,-0.025246,0.495803,0.716732,-0.489501,-0.517556,0.701801,0.491480,0.373340,0.024313,0.482582,0.715544,0.372430,-0.028670,0.927617,0.507490,0.369380,0.019110,0.480468,0.717160,0.296566,-0.186170,0.936691,0.505700,0.368930,0.025463,0.476579,0.715217,0.247146,0.003577,0.968972,0.507330,0.367300,0.019737,0.475201,0.716185,0.138897,-0.149229,0.978999,0.505570,0.366990,0.013213,0.478864,0.718219,0.197183,-0.381760,0.902983,0.503820,0.368610,0.013467,0.474164,0.716371,0.047977,-0.303536,0.951612,0.503740,0.366760,0.030746,0.478507,0.713419,0.369015,0.136758,0.919307,0.509040,0.367770,0.028733,0.485040,0.713346,0.459533,0.064674,0.885803,0.509130,0.369910,0.033707,0.487671,0.709903,0.487852,0.069268,0.870174,0.511080,0.370490,0.036541,0.481050,0.709930,0.427345,0.208853,0.879634,0.511160,0.368330,-0.024299,0.482577,0.715513,-0.378762,-0.039571,0.924648,0.492500,0.369380,-0.019100,0.480467,0.717141,-0.301135,-0.192967,0.933853,0.494290,0.368930,-0.013203,0.478866,0.718213,-0.200237,-0.384451,0.901167,0.496170,0.368610,-0.019692,0.475193,0.716095,-0.150292,-0.164569,0.974848,0.494420,0.366990,-0.013438,0.474170,0.716336,-0.056218,-0.311083,0.948719,0.496250,0.366760,-0.025392,0.476559,0.715084,-0.262332,-0.017976,0.964810,0.492660,0.367300,-0.030648,0.478485,0.713212,-0.380954,0.111468,0.917850,0.490950,0.367770,-0.028735,0.485025,0.713324,-0.465092,0.051754,0.883748,0.490860,0.369910,-0.036475,0.481025,0.709786,-0.430417,0.184819,0.883506,0.488840,0.368330,-0.033689,0.487672,0.709872,-0.489386,0.057972,0.870138,0.488910,0.370490,0.000015,0.477617,0.718657,0.000229,-0.580116,0.814534,0.500000,0.368390,0.006844,0.473562,0.716113,0.000608,-0.416412,0.909176,0.501850,0.366530,0.006790,0.477932,0.718617,0.088791,-0.529700,0.843525,0.501910,0.368450,0.000024,0.473329,0.715947,-0.000197,-0.457984,0.888960,0.500000,0.366400,-0.006825,0.473561,0.716115,-0.003490,-0.419026,0.907968,0.498140,0.366530,-0.006768,0.477929,0.718623,-0.089769,-0.530044,0.843205,0.498080,0.368450,0.037314,0.495898,0.708746,0.459250,-0.510348,0.727072,0.513040,0.372790,0.034289,0.497354,0.713015,0.303817,-0.832715,0.462904,0.511630,0.373820,0.032094,0.499683,0.718741,0.139277,-0.661994,0.736455,0.510240,0.374900,0.030367,0.505569,0.720877,-0.021959,-0.124942,0.991921,0.509220,0.376320,-0.037315,0.495898,0.708746,-0.458621,-0.511222,0.726855,0.486950,0.372790,-0.034289,0.497354,0.713015,-0.303895,-0.832788,0.462723,0.488360,0.373820,-0.032095,0.499683,0.718741,-0.139383,-0.662049,0.736385,0.489750,0.374900,-0.030378,0.505571,0.720880,0.022109,-0.125178,0.991888,0.490770,0.376320,0.044832,0.484182,0.705104,0.406527,0.179480,0.895836,0.514070,0.368930,0.040886,0.490866,0.705887,0.440428,-0.036874,0.897031,0.513750,0.371100,-0.044801,0.484168,0.705031,-0.405493,0.162766,0.899490,0.485920,0.368930,-0.040891,0.490862,0.705887,-0.439466,-0.043395,0.897210,0.486240,0.371100,0.163357,0.590179,0.642641,0.542022,0.118503,0.831967,0.555880,0.400270,0.163709,0.600659,0.640740,0.483138,0.144231,0.863582,0.556620,0.403660,0.162601,0.608884,0.639664,0.431695,0.158840,0.887924,0.556690,0.406270,0.181396,0.611647,0.629057,0.541774,0.045212,0.839307,0.565010,0.406430,0.183723,0.602665,0.627707,0.592693,0.014893,0.805291,0.565530,0.403500,0.185375,0.592032,0.626162,0.642617,-0.027983,0.765676,0.565850,0.399910,0.161627,0.561258,0.645821,0.687245,0.044100,0.725086,0.553600,0.390900,0.161610,0.576973,0.644728,0.612703,0.087894,0.785411,0.554370,0.395940,0.186755,0.579342,0.624198,0.686389,-0.070242,0.723834,0.566340,0.395830,0.187767,0.564458,0.620516,0.729724,-0.120646,0.673014,0.566890,0.390850,-0.163461,0.590183,0.642664,-0.542492,0.112629,0.832477,0.444120,0.400270,-0.164081,0.600680,0.640836,-0.481720,0.143943,0.864422,0.443370,0.403660,-0.185524,0.592052,0.626202,-0.639743,-0.037599,0.767669,0.434140,0.399910,-0.184024,0.602673,0.627770,-0.589779,0.014212,0.807439,0.434460,0.403500,-0.181534,0.611658,0.629090,-0.539294,0.048241,0.840735,0.434980,0.406430,-0.162735,0.608895,0.639697,-0.430615,0.159717,0.888291,0.443300,0.406270,-0.161780,0.561253,0.645860,-0.687387,0.042392,0.725053,0.446390,0.390900,-0.161649,0.576973,0.644736,-0.613481,0.087192,0.784881,0.445620,0.395940,-0.187899,0.564476,0.620549,-0.727599,-0.123021,0.674882,0.433100,0.390850,-0.186787,0.579351,0.624202,-0.683093,-0.072747,0.726699,0.433650,0.395830,0.202966,0.596692,0.610044,0.727251,-0.099274,0.679154,0.572230,0.400460,0.211734,0.611292,0.602201,0.770208,-0.058944,0.635064,0.575600,0.405130,0.199948,0.606916,0.614471,0.686696,-0.053690,0.724959,0.571150,0.403960,0.216437,0.602164,0.595010,0.803050,-0.103737,0.586813,0.577510,0.401810,0.196258,0.615260,0.618116,0.644004,0.002828,0.765017,0.570250,0.406960,0.206713,0.619012,0.608305,0.721807,-0.005295,0.692074,0.574130,0.408020,0.208213,0.569859,0.597854,0.787364,-0.183626,0.588506,0.576720,0.391830,0.220570,0.590898,0.586019,0.827796,-0.141908,0.542785,0.581260,0.398370,0.205628,0.584266,0.604658,0.762018,-0.134527,0.633428,0.574470,0.396780,0.224223,0.576879,0.575935,0.848423,-0.183742,0.496405,0.585160,0.393310,-0.203319,0.596713,0.610119,-0.727492,-0.100753,0.678678,0.427760,0.400460,-0.211978,0.611306,0.602246,-0.774912,-0.068592,0.628336,0.424390,0.405130,-0.216570,0.602192,0.595022,-0.805185,-0.100143,0.584507,0.422480,0.401810,-0.200465,0.606947,0.614602,-0.686466,-0.058545,0.724801,0.428840,0.403960,-0.207384,0.619051,0.608447,-0.721018,-0.000941,0.692916,0.425860,0.408020,-0.196589,0.615292,0.618206,-0.638909,0.006249,0.769257,0.429740,0.406960,-0.208415,0.569885,0.597906,-0.784396,-0.187986,0.591088,0.423270,0.391830,-0.220903,0.590903,0.586095,-0.828035,-0.135341,0.544097,0.418730,0.398370,-0.224711,0.576914,0.576032,-0.848059,-0.185989,0.496190,0.414830,0.393310,-0.206111,0.584297,0.604770,-0.759711,-0.134494,0.636200,0.425520,0.396780,0.229058,0.626519,0.576778,0.873311,0.023046,0.486618,0.587010,0.409130,0.227012,0.609644,0.579310,0.860871,-0.062323,0.504992,0.584560,0.403690,0.235570,0.618796,0.564161,0.898744,-0.008543,0.438391,0.591770,0.405870,0.221568,0.618295,0.589361,0.834490,-0.025189,0.550446,0.581220,0.406960,0.215608,0.625213,0.597963,0.791816,0.030170,0.610014,0.578470,0.409710,0.222173,0.632874,0.587557,0.831800,0.092880,0.547249,0.582930,0.411790,0.242052,0.609142,0.549866,0.926179,-0.059521,0.372358,0.597940,0.402140,0.236928,0.585567,0.554402,0.902982,-0.158077,0.399543,0.594700,0.394660,0.245765,0.596179,0.534234,0.943656,-0.110799,0.311829,0.603940,0.396480,0.232908,0.599082,0.567529,0.883517,-0.109348,0.455456,0.589610,0.400100,-0.227156,0.609655,0.579326,-0.860474,-0.062522,0.505643,0.415440,0.403690,-0.229308,0.626551,0.576798,-0.872632,0.020538,0.487947,0.412980,0.409130,-0.235959,0.618832,0.564212,-0.897357,-0.014643,0.441062,0.408230,0.405870,-0.221871,0.618315,0.589411,-0.836854,-0.032733,0.546447,0.418770,0.406960,-0.222497,0.632908,0.587605,-0.830893,0.100324,0.547313,0.417060,0.411790,-0.215941,0.625248,0.598036,-0.794373,0.034950,0.606424,0.421520,0.409710,-0.237242,0.585602,0.554446,-0.904801,-0.153548,0.397188,0.405290,0.394660,-0.242072,0.609159,0.549823,-0.926024,-0.066960,0.371479,0.402050,0.402140,-0.245925,0.596203,0.534263,-0.942722,-0.108035,0.315600,0.396050,0.396480,-0.233341,0.599132,0.567612,-0.884887,-0.102393,0.454413,0.410380,0.400100,0.237932,0.644823,0.556809,0.887614,0.084335,0.452801,0.595690,0.414020,0.241189,0.628780,0.551250,0.918113,0.017810,0.395919,0.597230,0.408230,0.245290,0.639877,0.541482,0.925030,0.016669,0.379529,0.601370,0.411260,0.234300,0.634952,0.565786,0.889781,0.064225,0.451846,0.591830,0.411340,0.227206,0.640332,0.578197,0.844207,0.146789,0.515527,0.587150,0.413990,0.230121,0.648847,0.569964,0.840208,0.181116,0.511124,0.590790,0.416480,0.251809,0.633531,0.523230,0.955740,-0.031881,0.292479,0.609160,0.408280,0.251602,0.608890,0.517404,0.962673,-0.073542,0.260484,0.611050,0.399480,0.255834,0.623723,0.503952,0.968143,-0.059370,0.243258,0.616900,0.403580,0.247616,0.620549,0.534797,0.947729,-0.035603,0.317085,0.604240,0.404790,-0.241591,0.628826,0.551334,-0.916293,0.020180,0.399999,0.402760,0.408230,-0.238265,0.644855,0.556859,-0.889291,0.076329,0.450927,0.404300,0.414020,-0.245462,0.639883,0.541444,-0.924083,0.022293,0.381541,0.398620,0.411260,-0.234671,0.634981,0.565848,-0.889329,0.066078,0.452469,0.408160,0.411340,-0.230437,0.648872,0.570010,-0.837196,0.168859,0.520182,0.409200,0.416480,-0.227497,0.640352,0.578230,-0.839619,0.156204,0.520231,0.412840,0.413990,-0.251657,0.608909,0.517403,-0.959444,-0.082302,0.269619,0.388940,0.399480,-0.252491,0.633541,0.523217,-0.951590,-0.027034,0.306180,0.390830,0.408280,-0.256810,0.623776,0.504116,-0.966737,-0.070420,0.245887,0.383090,0.403580,-0.248293,0.620579,0.534901,-0.945075,-0.046869,0.323475,0.395750,0.404790,0.241951,0.667132,0.548380,0.878027,-0.087504,0.470544,0.600280,0.421830,0.247926,0.652450,0.534836,0.927586,-0.012335,0.373406,0.604620,0.415410,0.249748,0.666314,0.531766,0.930928,-0.054428,0.361123,0.606780,0.420410,0.240226,0.655518,0.550842,0.877998,0.033924,0.477460,0.598560,0.417610,0.231628,0.657873,0.564077,0.835015,0.087718,0.543190,0.593460,0.419470,0.233101,0.667388,0.561909,0.829222,-0.134931,0.542387,0.594880,0.422810,0.254339,0.648183,0.514732,0.956396,-0.044940,0.288596,0.613440,0.412780,0.262823,0.659465,0.488259,0.971267,-0.050087,0.232663,0.626280,0.414820,0.256664,0.664291,0.510448,0.956139,-0.045326,0.289384,0.616320,0.418250,0.259643,0.640696,0.493669,0.968588,-0.065817,0.239801,0.622510,0.408640,-0.242060,0.667170,0.548366,-0.884482,-0.063763,0.462196,0.399710,0.421830,-0.248334,0.652493,0.534872,-0.928400,0.003394,0.371566,0.395370,0.415410,-0.240648,0.655575,0.550932,-0.882670,0.040467,0.468248,0.401430,0.417610,-0.249379,0.666306,0.531603,-0.928804,-0.052596,0.366819,0.393210,0.420410,-0.233396,0.667427,0.561953,-0.833397,-0.100284,0.543501,0.405110,0.422810,-0.232346,0.657938,0.564211,-0.832297,0.094924,0.546142,0.406530,0.419470,-0.256840,0.664346,0.510494,-0.955678,-0.046049,0.290790,0.383670,0.418250,-0.261133,0.640776,0.494024,-0.973156,-0.045231,0.225657,0.377480,0.408640,-0.254649,0.648206,0.514712,-0.954142,-0.016565,0.298895,0.386550,0.412780,-0.262375,0.659459,0.488114,-0.975263,-0.042960,0.216833,0.373710,0.414820,0.250262,0.694746,0.535164,0.944815,-0.064729,0.321145,0.607580,0.431320,0.243587,0.678882,0.549437,0.891507,-0.128841,0.434298,0.600720,0.426330,0.250267,0.680796,0.532045,0.939480,-0.065792,0.336226,0.607700,0.425920,0.243454,0.689939,0.552338,0.904431,-0.112438,0.411536,0.600360,0.430610,0.235067,0.676538,0.563756,0.832759,-0.202192,0.515393,0.594810,0.426310,0.234791,0.685318,0.566657,0.851055,-0.179233,0.493539,0.594030,0.429630,0.262634,0.679405,0.489126,0.970266,-0.038465,0.238966,0.626570,0.422220,0.257098,0.681374,0.510939,0.958986,-0.036704,0.281065,0.617020,0.424600,0.256471,0.698554,0.515348,0.961976,-0.031016,0.271367,0.616110,0.431240,0.262051,0.700095,0.495415,0.967073,-0.015196,0.254043,0.624610,0.430310,-0.250050,0.694765,0.535097,-0.943667,-0.031540,0.329389,0.392410,0.431320,-0.243176,0.678897,0.549290,-0.893548,-0.129461,0.429897,0.399270,0.426330,-0.243459,0.689957,0.552309,-0.909863,-0.102023,0.402170,0.399630,0.430610,-0.250682,0.680875,0.532170,-0.933556,-0.064457,0.352589,0.392290,0.425920,-0.235068,0.676540,0.563711,-0.835082,-0.203352,0.511161,0.405180,0.426310,-0.235223,0.685361,0.566736,-0.850880,-0.190042,0.489782,0.405960,0.429630,-0.262911,0.679429,0.489137,-0.973690,-0.022631,0.226751,0.373430,0.422220,-0.258119,0.681397,0.511046,-0.960072,-0.024872,0.278646,0.382970,0.424600,-0.261187,0.700082,0.495260,-0.970595,0.009813,0.240520,0.375380,0.430310,-0.256044,0.698569,0.515193,-0.963161,0.006958,0.268837,0.383880,0.431240,0.249376,0.707688,0.540994,0.943859,-0.010238,0.330189,0.606640,0.436040,0.242274,0.700138,0.557334,0.913174,-0.099103,0.395338,0.599680,0.434160,0.234195,0.693404,0.571717,0.864390,-0.216119,0.454007,0.593310,0.432450,0.238721,0.710919,0.567403,0.921682,-0.044051,0.385437,0.597090,0.438270,0.232118,0.702730,0.581410,0.874415,-0.187221,0.447601,0.590840,0.435990,0.244916,0.721003,0.551605,0.939114,0.062167,0.337936,0.603730,0.441150,0.258810,0.720790,0.504932,0.960987,0.061708,0.269624,0.621710,0.438590,0.254764,0.714964,0.522955,0.959448,0.049510,0.277502,0.614180,0.437580,0.248733,0.731400,0.535166,0.946957,0.129600,0.294069,0.610360,0.444240,0.252364,0.741168,0.519212,0.945774,0.128344,0.298395,0.616910,0.447130,-0.248527,0.707673,0.540760,-0.945232,0.006662,0.326332,0.393360,0.436040,-0.242044,0.700133,0.557241,-0.919329,-0.068841,0.387421,0.400310,0.434160,-0.244218,0.720951,0.551413,-0.944400,0.057850,0.323669,0.396260,0.441150,-0.238511,0.710873,0.567339,-0.926390,-0.045710,0.373781,0.402900,0.438270,-0.234539,0.693466,0.571779,-0.863696,-0.193226,0.465502,0.406680,0.432450,-0.231413,0.702604,0.581169,-0.873648,-0.186338,0.449464,0.409150,0.435990,-0.258543,0.720804,0.504850,-0.961901,0.055499,0.267707,0.378280,0.438590,-0.254264,0.714973,0.522746,-0.958045,0.048545,0.282476,0.385810,0.437580,-0.251944,0.741169,0.519091,-0.947437,0.123583,0.295111,0.383080,0.447130,-0.248204,0.731364,0.534997,-0.948236,0.115836,0.295685,0.389630,0.444240,0.223631,0.734010,0.606436,0.910551,-0.010161,0.413272,0.583440,0.449480,0.225479,0.713514,0.597509,0.875099,-0.169375,0.453336,0.585020,0.441410,0.232162,0.723432,0.584503,0.925061,-0.020530,0.379263,0.591140,0.444150,0.217677,0.724109,0.616845,0.850571,-0.177873,0.494864,0.578090,0.446500,0.228082,0.746376,0.593135,0.928503,0.087042,0.360979,0.589430,0.453240,0.237008,0.735037,0.569328,0.941491,0.072836,0.329073,0.597760,0.447650,0.242022,0.760226,0.540432,0.945586,0.146662,0.290443,0.609290,0.455930,0.240422,0.747736,0.554544,0.947270,0.132570,0.291728,0.603750,0.451780,0.230931,0.760417,0.580683,0.938529,0.120582,0.323455,0.594500,0.457880,0.232208,0.774462,0.569268,0.946909,0.131083,0.293564,0.598900,0.462710,-0.225726,0.713492,0.597546,-0.871963,-0.189375,0.451462,0.414970,0.441410,-0.223421,0.734031,0.606314,-0.911897,0.008355,0.410333,0.416550,0.449480,-0.232520,0.723407,0.584576,-0.927804,-0.022266,0.372403,0.408850,0.444150,-0.217882,0.724081,0.616894,-0.845983,-0.184975,0.500098,0.421900,0.446500,-0.237017,0.735033,0.569317,-0.944255,0.074665,0.320635,0.402230,0.447650,-0.227748,0.746318,0.593013,-0.927960,0.093053,0.360877,0.410570,0.453240,-0.242237,0.760249,0.540478,-0.949852,0.131128,0.283877,0.390700,0.455930,-0.240168,0.747713,0.554441,-0.949879,0.114184,0.291019,0.396240,0.451780,-0.232697,0.774524,0.569414,-0.947542,0.113244,0.298898,0.401090,0.462710,-0.230920,0.760409,0.580663,-0.937759,0.108420,0.329929,0.405490,0.457880,0.216259,0.751444,0.618426,0.868538,0.135524,0.476734,0.579370,0.455960,0.212884,0.739824,0.628160,0.840582,0.029596,0.540875,0.575230,0.452380,0.207626,0.730918,0.634656,0.755700,-0.181117,0.629376,0.571640,0.449380,0.198670,0.742413,0.645694,0.713347,0.008505,0.700760,0.567620,0.453750,0.194519,0.733887,0.647975,0.612857,-0.239137,0.753140,0.565690,0.450890,0.201594,0.752582,0.640337,0.759509,0.151526,0.632602,0.569950,0.457010,0.220610,0.781112,0.601428,0.904302,0.134482,0.405157,0.586030,0.465350,0.218679,0.766112,0.609452,0.887746,0.131140,0.441258,0.582870,0.460450,0.203276,0.766933,0.634269,0.786671,0.150301,0.598797,0.572040,0.461170,0.204918,0.782595,0.628781,0.803470,0.155593,0.574654,0.574150,0.466000,-0.216103,0.751435,0.618356,-0.871851,0.134567,0.470921,0.420620,0.455960,-0.212973,0.739819,0.628134,-0.843814,0.037970,0.535290,0.424760,0.452380,-0.201729,0.752595,0.640357,-0.763717,0.150914,0.627663,0.430040,0.457010,-0.198785,0.742435,0.645685,-0.715422,0.005988,0.698667,0.432370,0.453750,-0.207889,0.730940,0.634694,-0.753761,-0.191746,0.628552,0.428350,0.449380,-0.194483,0.733917,0.647933,-0.612398,-0.245529,0.751455,0.434300,0.450890,-0.220394,0.781082,0.601363,-0.904402,0.112933,0.411464,0.413970,0.465350,-0.218466,0.766100,0.609380,-0.888785,0.125497,0.440809,0.417120,0.460450,-0.204994,0.782597,0.628773,-0.806551,0.139914,0.574368,0.425840,0.466000,-0.203389,0.766953,0.634294,-0.790867,0.149521,0.593442,0.427950,0.461170,0.185973,0.752413,0.655849,0.614376,0.125605,0.778951,0.563260,0.457680,0.183672,0.743397,0.658278,0.571174,-0.077106,0.817200,0.561790,0.454420,0.179967,0.734516,0.657901,0.485208,-0.330668,0.809464,0.560640,0.451590,0.165451,0.743141,0.668837,0.452796,-0.163476,0.876500,0.555370,0.454770,0.162244,0.733867,0.666857,0.391898,-0.405799,0.825677,0.554560,0.451880,0.167553,0.751939,0.667567,0.497490,0.050495,0.865999,0.556470,0.458190,0.188019,0.783211,0.647354,0.669079,0.163962,0.724879,0.566000,0.466930,0.187322,0.766913,0.651650,0.643508,0.157736,0.749010,0.564620,0.461940,0.168272,0.766505,0.664508,0.536924,0.120240,0.835018,0.557450,0.462690,0.169050,0.783747,0.661876,0.555432,0.159655,0.816091,0.558290,0.467920,-0.186171,0.752433,0.655897,-0.616919,0.126001,0.776875,0.436730,0.457680,-0.183924,0.743413,0.658327,-0.574231,-0.086665,0.814093,0.438200,0.454420,-0.167953,0.751966,0.667664,-0.496900,0.052551,0.866215,0.443520,0.458190,-0.165736,0.743164,0.668915,-0.451997,-0.170884,0.875498,0.444630,0.454770,-0.180013,0.734527,0.657899,-0.487008,-0.336729,0.805876,0.439360,0.451590,-0.162350,0.733878,0.666883,-0.391482,-0.409179,0.824205,0.445430,0.451880,-0.188130,0.783233,0.647371,-0.669586,0.157077,0.725935,0.433990,0.466930,-0.187527,0.766939,0.651699,-0.643887,0.161045,0.747980,0.435370,0.461940,-0.169150,0.783758,0.661894,-0.557693,0.153902,0.815655,0.441710,0.467920,-0.168319,0.766516,0.664519,-0.537489,0.122463,0.834331,0.442550,0.462690,0.142648,0.750700,0.680157,0.463900,-0.062556,0.883676,0.547170,0.458570,0.140210,0.741947,0.679762,0.424195,-0.274587,0.862937,0.546290,0.455120,0.137670,0.732623,0.676843,0.361671,-0.492086,0.791862,0.545760,0.452150,0.113269,0.738984,0.693221,0.371882,-0.378498,0.847610,0.536800,0.455070,0.110689,0.729619,0.687668,0.320911,-0.594809,0.737034,0.536550,0.452020,0.115176,0.747605,0.694689,0.377164,-0.115056,0.918972,0.537320,0.458390,0.143918,0.782405,0.677527,0.448117,0.180949,0.875470,0.548290,0.468380,0.144379,0.764859,0.680178,0.470454,0.086013,0.878223,0.547840,0.463120,0.114739,0.761015,0.694751,0.340736,0.099474,0.934882,0.537250,0.462600,0.112331,0.777216,0.691343,0.315886,0.195010,0.928540,0.536950,0.467540,-0.142793,0.750715,0.680197,-0.461417,-0.064527,0.884834,0.452820,0.458570,-0.140286,0.741957,0.679778,-0.421466,-0.276617,0.863626,0.453710,0.455120,-0.115204,0.747609,0.694696,-0.376994,-0.119733,0.918444,0.462670,0.458390,-0.113169,0.738987,0.693177,-0.372107,-0.375899,0.848668,0.463190,0.455070,-0.137706,0.732628,0.676848,-0.361581,-0.490614,0.792816,0.454240,0.452150,-0.111012,0.729655,0.687761,-0.322570,-0.591056,0.739324,0.463440,0.452020,-0.144452,0.782476,0.677679,-0.449062,0.177190,0.875755,0.451700,0.468380,-0.144531,0.764870,0.680215,-0.470598,0.083763,0.878363,0.452150,0.463120,-0.112332,0.777220,0.691334,-0.313772,0.193300,0.929614,0.463040,0.467540,-0.114897,0.761034,0.694795,-0.339492,0.097536,0.935538,0.462740,0.462600,0.086891,0.743134,0.702892,0.253846,-0.136541,0.957559,0.528410,0.457340,0.086798,0.734718,0.700564,0.282815,-0.441929,0.851302,0.528640,0.454310,0.085463,0.725575,0.693783,0.280613,-0.656192,0.700477,0.528820,0.451110,0.063627,0.727583,0.703830,0.277363,-0.502339,0.818978,0.521880,0.452320,0.064690,0.718721,0.695458,0.306014,-0.683038,0.663185,0.522790,0.448940,0.061137,0.735997,0.707635,0.205820,-0.217580,0.954095,0.520720,0.455010,0.053831,0.743905,0.709486,0.131052,0.016555,0.991237,0.517920,0.457090,0.077618,0.767653,0.702499,0.186733,0.169400,0.967695,0.525100,0.464610,0.040575,0.753215,0.709000,0.053122,0.131631,0.989874,0.513040,0.459630,0.083015,0.754140,0.703569,0.206593,0.094020,0.973899,0.526860,0.460580,-0.086961,0.743144,0.702909,-0.254369,-0.137876,0.957229,0.471580,0.457340,-0.086921,0.734738,0.700594,-0.283507,-0.438430,0.852879,0.471350,0.454310,-0.061177,0.735999,0.707650,-0.211784,-0.205916,0.955377,0.479270,0.455010,-0.063683,0.727575,0.703869,-0.289980,-0.494283,0.819509,0.478110,0.452320,-0.085675,0.725601,0.693844,-0.280966,-0.654203,0.702195,0.471170,0.451110,-0.064940,0.718736,0.695547,-0.317151,-0.683423,0.657532,0.477200,0.448940,-0.053862,0.743909,0.709495,-0.131817,0.025002,0.990959,0.482070,0.457090,-0.077711,0.767662,0.702507,-0.186431,0.168772,0.967863,0.474890,0.464610,-0.083122,0.754156,0.703596,-0.206125,0.094058,0.973995,0.473130,0.460580,-0.040645,0.753209,0.708984,-0.052890,0.134923,0.989443,0.486950,0.459630,0.036870,0.707809,0.699834,0.396444,-0.628051,0.669615,0.514500,0.444040,0.025789,0.702926,0.701269,0.370208,-0.489430,0.789560,0.510550,0.441970,0.031313,0.699624,0.694845,0.565399,-0.535057,0.627724,0.513840,0.440130,0.031021,0.713117,0.706618,0.270113,-0.475265,0.837355,0.511500,0.446440,0.041237,0.702524,0.689372,0.428255,-0.721794,0.543702,0.517890,0.440910,0.036338,0.695752,0.684985,0.631808,-0.587642,0.505466,0.517600,0.437740,0.045842,0.697063,0.677902,0.341024,-0.765670,0.545392,0.521300,0.438070,0.041135,0.691988,0.673907,0.507360,-0.693746,0.511178,0.521070,0.435750,0.052532,0.691235,0.667005,0.288357,-0.800663,0.525157,0.524650,0.435890,0.047804,0.687558,0.663434,0.349300,-0.782133,0.516002,0.524290,0.434200,0.041748,0.725112,0.708457,0.225450,-0.329377,0.916888,0.514990,0.451080,0.047028,0.717481,0.703114,0.326098,-0.570030,0.754139,0.517110,0.448530,0.050354,0.710220,0.693568,0.349852,-0.715091,0.605184,0.519250,0.445080,0.054396,0.703118,0.681929,0.299508,-0.756383,0.581532,0.522150,0.441340,0.067386,0.709991,0.684411,0.291791,-0.735578,0.611379,0.524860,0.444790,0.060011,0.696189,0.670315,0.288936,-0.789758,0.541108,0.525530,0.438210,0.071738,0.702145,0.672646,0.297587,-0.779534,0.551153,0.527810,0.440960,-0.026064,0.703050,0.701142,-0.355593,-0.489610,0.796138,0.489440,0.441970,-0.036952,0.707630,0.700042,-0.373682,-0.641799,0.669668,0.485490,0.444040,-0.031471,0.699642,0.694778,-0.555079,-0.542725,0.630347,0.486150,0.440130,-0.031041,0.713036,0.706666,-0.236047,-0.481643,0.843980,0.488500,0.446440,-0.036471,0.695749,0.684977,-0.621051,-0.597637,0.507075,0.482390,0.437740,-0.041467,0.702481,0.689493,-0.419682,-0.732038,0.536645,0.482100,0.440910,-0.046278,0.697086,0.677968,-0.340904,-0.768589,0.541345,0.478690,0.438070,-0.041453,0.692014,0.673983,-0.499857,-0.700729,0.509040,0.478920,0.435750,-0.047825,0.687563,0.663434,-0.347817,-0.784902,0.512788,0.475700,0.434200,-0.052650,0.691246,0.667028,-0.286786,-0.802312,0.523498,0.475340,0.435890,-0.041907,0.724861,0.708885,-0.212583,-0.322284,0.922465,0.485000,0.451080,-0.047383,0.717145,0.703707,-0.326668,-0.570977,0.753175,0.482880,0.448530,-0.050554,0.710038,0.693898,-0.359616,-0.721003,0.592310,0.480740,0.445080,-0.054377,0.703120,0.681912,-0.306256,-0.757939,0.575965,0.477840,0.441340,-0.067458,0.710000,0.684428,-0.295585,-0.737713,0.606967,0.475130,0.444790,-0.060312,0.696212,0.670379,-0.288804,-0.788049,0.543665,0.474460,0.438210,-0.071707,0.702144,0.672636,-0.297406,-0.776855,0.555019,0.472190,0.440960,0.033903,0.730197,0.710836,0.113217,-0.120638,0.986219,0.512040,0.452410,0.023944,0.716256,0.709722,0.110182,-0.334915,0.935784,0.508860,0.447290,0.023355,0.733112,0.711907,-0.011091,-0.007656,0.999909,0.508410,0.452990,0.016035,0.717627,0.710054,-0.053148,-0.246683,0.967638,0.506080,0.447390,0.013222,0.704913,0.704430,-0.003515,-0.361555,0.932344,0.505420,0.441980,0.019715,0.704452,0.704006,0.146445,-0.429808,0.890965,0.508040,0.442250,-0.034005,0.730138,0.711109,-0.100102,-0.119700,0.987751,0.487950,0.452410,-0.023350,0.733163,0.712032,0.014940,-0.014180,0.999788,0.491580,0.452990,-0.023840,0.716366,0.709493,-0.088004,-0.339706,0.936405,0.491130,0.447290,-0.015953,0.717795,0.709753,0.050870,-0.254444,0.965749,0.493910,0.447390,-0.013422,0.705027,0.704306,-0.007526,-0.353306,0.935478,0.494570,0.441980,-0.019924,0.704620,0.703792,-0.141070,-0.420987,0.896030,0.491960,0.442250,0.086043,0.716656,0.683462,0.266344,-0.723977,0.636332,0.530210,0.447260,0.110046,0.720695,0.678852,0.261002,-0.672319,0.692723,0.537420,0.448610,0.088698,0.708489,0.672534,0.260678,-0.786745,0.559534,0.532290,0.443480,0.110748,0.712514,0.669857,0.203473,-0.772156,0.601975,0.538680,0.445240,-0.086222,0.716677,0.683514,-0.266376,-0.726942,0.632930,0.469780,0.447260,-0.088732,0.708504,0.672526,-0.261097,-0.785583,0.560970,0.467700,0.443480,-0.110269,0.720728,0.678909,-0.261371,-0.675189,0.689786,0.462570,0.448610,-0.110593,0.712514,0.669792,-0.203318,-0.772455,0.601643,0.461310,0.445240,0.136104,0.723064,0.670766,0.297700,-0.549192,0.780873,0.546130,0.449050,0.159107,0.724076,0.661897,0.349607,-0.430953,0.831898,0.554470,0.448910,0.135660,0.713716,0.665003,0.201599,-0.674040,0.710653,0.546760,0.445950,0.158081,0.713846,0.658708,0.269835,-0.511168,0.816025,0.554560,0.445850,-0.136134,0.723070,0.670770,-0.297813,-0.550939,0.779598,0.453860,0.449050,-0.135911,0.713744,0.665063,-0.201937,-0.675802,0.708882,0.453230,0.445950,-0.159355,0.724093,0.661960,-0.349889,-0.433145,0.830640,0.445520,0.448910,-0.157937,0.713865,0.658637,-0.268676,-0.513596,0.814882,0.445430,0.445850,0.188780,0.722576,0.646461,0.527064,-0.350713,0.774083,0.564710,0.447740,0.175996,0.723825,0.654562,0.433728,-0.375161,0.819228,0.560210,0.448520,0.184077,0.711708,0.644809,0.493840,-0.355586,0.793524,0.563830,0.444270,0.173145,0.713234,0.651868,0.386569,-0.393474,0.834112,0.559890,0.445230,-0.188856,0.722588,0.646472,-0.529439,-0.354309,0.770817,0.435280,0.447740,-0.176055,0.723843,0.654547,-0.435874,-0.377896,0.816828,0.439780,0.448520,-0.173291,0.713271,0.651883,-0.388904,-0.393710,0.832914,0.440100,0.445230,-0.183974,0.711767,0.644675,-0.498876,-0.346840,0.794245,0.436160,0.444270,0.200769,0.719370,0.636738,0.636335,-0.330637,0.696963,0.569470,0.446390,0.210493,0.713480,0.623426,0.749057,-0.322021,0.578978,0.574550,0.443850,0.202094,0.704165,0.627027,0.660864,-0.395723,0.637700,0.571510,0.441010,0.193322,0.708993,0.636709,0.576328,-0.360830,0.733245,0.567590,0.443080,-0.200431,0.719414,0.636552,-0.637814,-0.332173,0.694878,0.430520,0.446390,-0.209953,0.713476,0.623186,-0.748844,-0.316965,0.582036,0.425450,0.443850,-0.193530,0.709038,0.636710,-0.582525,-0.342273,0.737234,0.432400,0.443080,-0.202558,0.704158,0.627123,-0.671026,-0.383788,0.634374,0.428480,0.441010,0.223038,0.695947,0.593092,0.797555,-0.319963,0.511400,0.585350,0.434530,0.217102,0.705062,0.607060,0.796824,-0.312895,0.516882,0.580320,0.439320,0.213534,0.690761,0.602453,0.724177,-0.403041,0.559576,0.580240,0.433490,0.209083,0.697555,0.614529,0.708879,-0.433692,0.556239,0.576160,0.437380,-0.222663,0.696025,0.592952,-0.807774,-0.295322,0.510182,0.414640,0.434530,-0.217132,0.705063,0.607041,-0.799174,-0.315505,0.511642,0.419670,0.439320,-0.209213,0.697656,0.614382,-0.713893,-0.433367,0.550046,0.423840,0.437380,-0.213619,0.690772,0.602433,-0.728357,-0.382297,0.568634,0.419750,0.433490,0.225756,0.681302,0.579496,0.790848,-0.266018,0.551176,0.588190,0.428850,0.225193,0.688216,0.584289,0.794477,-0.325186,0.512894,0.587540,0.431320,0.215733,0.678459,0.590858,0.732284,-0.368834,0.572470,0.582580,0.428390,0.215724,0.684136,0.595260,0.737364,-0.371527,0.564147,0.582070,0.430650,-0.225547,0.681334,0.579397,-0.788448,-0.279211,0.548079,0.411800,0.428850,-0.225207,0.688259,0.584208,-0.800147,-0.309318,0.513893,0.412450,0.431320,-0.216459,0.684105,0.595481,-0.739614,-0.369076,0.562810,0.417920,0.430650,-0.215685,0.678477,0.590812,-0.737871,-0.378242,0.558999,0.417410,0.428390,0.223985,0.666991,0.575178,0.785192,-0.152810,0.600102,0.588700,0.423590,0.225843,0.674319,0.576915,0.769983,-0.273420,0.576513,0.588740,0.426240,0.213257,0.667000,0.587042,0.748818,-0.113522,0.652981,0.582500,0.424220,0.215121,0.672690,0.588562,0.709570,-0.352112,0.610351,0.582790,0.426270,-0.223891,0.667029,0.575107,-0.786001,-0.124749,0.605509,0.411290,0.423590,-0.225847,0.674372,0.576896,-0.769061,-0.268728,0.579940,0.411250,0.426240,-0.215211,0.672712,0.588567,-0.719629,-0.341349,0.604661,0.417200,0.426270,-0.213457,0.667017,0.587073,-0.751080,-0.110617,0.650878,0.417490,0.424220,0.222331,0.659495,0.577014,0.796335,0.143868,0.587497,0.587550,0.421010,0.221273,0.651997,0.582207,0.786287,0.250241,0.564918,0.585400,0.418460,0.212795,0.660766,0.589214,0.749409,0.196507,0.632275,0.581500,0.422170,0.211795,0.654445,0.593503,0.725955,0.259934,0.636729,0.579850,0.419980,-0.222846,0.659559,0.577122,-0.791957,0.161723,0.588770,0.412440,0.421010,-0.212970,0.660802,0.589239,-0.742861,0.225350,0.630377,0.418500,0.422170,-0.221304,0.652007,0.582175,-0.791992,0.227637,0.566507,0.414590,0.418460,-0.212763,0.654513,0.593737,-0.725289,0.262808,0.636308,0.420140,0.419980,0.218710,0.644509,0.589080,0.780066,0.232346,0.580958,0.582410,0.415930,0.214716,0.637550,0.596959,0.772425,0.189509,0.606174,0.578950,0.413580,0.209453,0.647850,0.598649,0.702598,0.298492,0.645956,0.577670,0.417520,0.206365,0.641903,0.605141,0.691355,0.300303,0.657150,0.575050,0.415180,-0.218676,0.644532,0.589050,-0.785488,0.226059,0.576112,0.417580,0.415930,-0.209697,0.647886,0.598698,-0.713190,0.283439,0.641110,0.422320,0.417520,-0.214962,0.637582,0.596984,-0.775823,0.196488,0.599575,0.421040,0.413580,-0.206909,0.641942,0.605259,-0.697602,0.300311,0.650511,0.424940,0.415180,0.209011,0.630954,0.605620,0.735290,0.096552,0.670840,0.575330,0.411560,0.200918,0.625282,0.613620,0.662607,0.038645,0.747970,0.571800,0.410000,0.201773,0.636439,0.611971,0.656121,0.193500,0.729427,0.572040,0.413320,0.194714,0.631528,0.618339,0.579556,0.115035,0.806772,0.569070,0.411940,-0.209341,0.630984,0.605695,-0.735826,0.099041,0.669889,0.424660,0.411560,-0.202181,0.636480,0.612072,-0.653615,0.182122,0.734587,0.427950,0.413320,-0.201231,0.625299,0.613688,-0.658867,0.044089,0.750966,0.428190,0.410000,-0.194947,0.631538,0.618388,-0.577232,0.115558,0.808362,0.430920,0.411940,0.191363,0.621429,0.621418,0.602644,0.054765,0.796129,0.568590,0.409050,0.178717,0.619141,0.630818,0.489176,0.090908,0.867434,0.563960,0.408520,0.186074,0.627574,0.624597,0.525148,0.169553,0.833949,0.566550,0.411100,0.175340,0.625946,0.631922,0.431825,0.201786,0.879096,0.562610,0.410630,-0.191480,0.621451,0.621445,-0.602420,0.051191,0.796536,0.431400,0.409050,-0.186578,0.627580,0.624702,-0.529338,0.173306,0.830521,0.433440,0.411100,-0.179123,0.619178,0.630925,-0.489604,0.082314,0.868051,0.436030,0.408520,-0.175806,0.625978,0.632021,-0.431285,0.199936,0.879784,0.437380,0.410630,0.160422,0.615848,0.639061,0.368971,0.206102,0.906301,0.556200,0.408270,0.138738,0.615005,0.647618,0.262722,0.372039,0.890261,0.547700,0.408800,0.157927,0.622595,0.637988,0.337168,0.174904,0.925055,0.555500,0.410390,0.137017,0.621583,0.645232,0.233579,0.196810,0.952211,0.547610,0.410980,-0.160555,0.615862,0.639092,-0.367238,0.203911,0.907500,0.443790,0.408270,-0.158017,0.622599,0.638007,-0.333505,0.171819,0.926959,0.444490,0.410390,-0.138981,0.615016,0.647670,-0.261745,0.374886,0.889354,0.452290,0.408800,-0.137113,0.621601,0.645257,-0.232450,0.196959,0.952457,0.452380,0.410980,0.116375,0.616228,0.651339,0.207452,0.501551,0.839887,0.540740,0.410540,0.097273,0.620168,0.654357,0.201759,0.584409,0.785977,0.535290,0.413080,0.115468,0.622994,0.647690,0.137207,0.267574,0.953718,0.541190,0.412880,0.096541,0.627290,0.649107,0.108178,0.382173,0.917737,0.536150,0.415510,-0.116463,0.616235,0.651357,-0.203929,0.503681,0.839475,0.459250,0.410540,-0.115377,0.622993,0.647662,-0.134613,0.265642,0.954627,0.458800,0.412880,-0.096974,0.620153,0.654268,-0.201296,0.585442,0.785326,0.464700,0.413080,-0.096530,0.627293,0.649105,-0.107770,0.374592,0.920905,0.463840,0.415510,0.079767,0.624960,0.654134,0.275416,0.648917,0.709262,0.531280,0.416030,0.080135,0.632654,0.648404,0.131458,0.483485,0.865425,0.532320,0.418340,-0.079722,0.624967,0.654119,-0.280423,0.645486,0.710430,0.468710,0.416030,-0.080169,0.632664,0.648413,-0.133345,0.474387,0.870159,0.467670,0.418340,0.006555,0.705413,0.704417,-0.044446,-0.293063,0.955060,0.502720,0.442180,-0.000115,0.705695,0.704437,-0.003070,-0.258861,0.965910,0.500000,0.442410,-0.000018,0.718541,0.707109,-0.003758,-0.177979,0.984027,0.500000,0.447300,0.007957,0.718280,0.708528,-0.138525,-0.195436,0.970884,0.503080,0.447350,-0.006797,0.705461,0.704408,0.033289,-0.289064,0.956731,0.497270,0.442180,-0.007942,0.718352,0.708393,0.128375,-0.200756,0.971194,0.496910,0.447350,0.015992,0.750316,0.709551,-0.066825,0.133213,0.988832,0.505510,0.458670,0.011241,0.733433,0.710939,-0.127461,0.004808,0.991832,0.504330,0.452940,-0.000001,0.733242,0.708436,0.000082,-0.008404,0.999965,0.500000,0.452760,-0.000095,0.749285,0.707715,0.001258,0.121129,0.992636,0.500000,0.458360,-0.016171,0.750314,0.709591,0.068147,0.135320,0.988456,0.494480,0.458670,-0.011248,0.733452,0.711004,0.126669,-0.000408,0.991945,0.495670,0.452940,0.056999,0.684380,0.652434,0.384724,-0.791593,0.474729,0.527570,0.433060,0.060923,0.687718,0.655345,0.359881,-0.830889,0.424393,0.528020,0.434430,0.065020,0.683815,0.643095,0.284959,-0.672121,0.683412,0.530090,0.432310,0.068953,0.687450,0.645605,0.244295,-0.756944,0.606099,0.530620,0.433480,0.062378,0.680204,0.641326,0.322110,-0.515468,0.794064,0.529920,0.431310,0.054452,0.681409,0.649547,0.436552,-0.695930,0.570178,0.527430,0.431880,0.052816,0.678063,0.646992,0.522903,-0.468708,0.711959,0.527440,0.430810,0.060986,0.676677,0.640475,0.358431,-0.266100,0.894828,0.529930,0.430570,0.052386,0.673433,0.644869,0.550452,-0.102210,0.828587,0.527620,0.429590,0.060658,0.672414,0.640437,0.400253,-0.008963,0.916361,0.530070,0.429730,-0.057115,0.684397,0.652462,-0.383311,-0.793622,0.472479,0.472420,0.433060,-0.061179,0.687750,0.655414,-0.357784,-0.834071,0.419901,0.471970,0.434430,-0.054432,0.681412,0.649529,-0.435267,-0.698755,0.567700,0.472570,0.431880,-0.062507,0.680216,0.641349,-0.319263,-0.520495,0.791932,0.470070,0.431310,-0.065035,0.683822,0.643090,-0.285462,-0.673554,0.681789,0.469900,0.432310,-0.068961,0.687455,0.645592,-0.244909,-0.759333,0.602855,0.469370,0.433480,-0.052757,0.678057,0.646948,-0.525499,-0.470616,0.708781,0.472550,0.430810,-0.052374,0.673438,0.644848,-0.556752,-0.099235,0.824730,0.472370,0.429590,-0.060963,0.676678,0.640452,-0.355098,-0.272053,0.894367,0.470070,0.430570,-0.060616,0.672413,0.640415,-0.402087,-0.007352,0.915572,0.469920,0.429730,0.067577,0.691633,0.658380,0.346787,-0.844347,0.408432,0.529060,0.436120,0.077527,0.697045,0.660680,0.323893,-0.845871,0.423787,0.531090,0.438160,0.074894,0.691369,0.648154,0.192277,-0.773723,0.603640,0.531790,0.434740,0.083484,0.695808,0.651067,0.129600,-0.729606,0.671475,0.533650,0.436340,-0.067929,0.691676,0.658474,-0.346394,-0.846106,0.405111,0.470930,0.436120,-0.074941,0.691382,0.648158,-0.192977,-0.777124,0.599031,0.468200,0.434740,-0.077989,0.697097,0.660814,-0.324912,-0.845487,0.423774,0.468900,0.438160,-0.083620,0.695828,0.651102,-0.131158,-0.733105,0.667349,0.466340,0.436340,0.054013,0.666509,0.644144,0.521821,0.129392,0.843185,0.528000,0.427920,0.062376,0.666966,0.641593,0.514660,-0.000639,0.857394,0.530280,0.428450,0.057885,0.658908,0.644515,0.533909,0.221691,0.815962,0.528640,0.426100,0.063410,0.660607,0.639213,0.556938,0.245624,0.793403,0.530700,0.426960,-0.053948,0.666505,0.644109,-0.525894,0.136254,0.839566,0.471990,0.427920,-0.058022,0.658925,0.644553,-0.538840,0.229920,0.810425,0.471350,0.426100,-0.062382,0.666968,0.641586,-0.515613,0.010979,0.856751,0.469710,0.428450,-0.063459,0.660620,0.639224,-0.554396,0.246313,0.794969,0.469290,0.426960,0.062615,0.652377,0.643672,0.387696,0.351047,0.852325,0.529670,0.424410,0.067457,0.655593,0.638760,0.182129,0.549452,0.815434,0.531530,0.425440,0.070896,0.646294,0.643344,0.101003,0.358024,0.928233,0.531260,0.422560,0.075657,0.652769,0.641800,-0.158186,0.317242,0.935059,0.532950,0.423760,-0.062674,0.652382,0.643682,-0.395340,0.361064,0.844594,0.470320,0.424410,-0.070949,0.646300,0.643357,-0.103616,0.367407,0.924270,0.468730,0.422560,-0.067356,0.655592,0.638728,-0.184392,0.543315,0.819029,0.468460,0.425440,-0.075650,0.652773,0.641796,0.158237,0.321206,0.933696,0.467040,0.423760,0.082891,0.640677,0.645403,-0.045290,0.247601,0.967803,0.533780,0.420200,0.086866,0.647893,0.644649,-0.202969,0.064122,0.977084,0.535310,0.421680,0.098085,0.635146,0.647569,-0.039157,0.096241,0.994588,0.537380,0.417670,0.100694,0.642763,0.647818,-0.134175,-0.046966,0.989844,0.538700,0.419560,-0.083552,0.640751,0.645597,0.045664,0.246585,0.968045,0.466220,0.420200,-0.098179,0.635159,0.647597,0.038562,0.089660,0.995226,0.462610,0.417670,-0.086881,0.647904,0.644655,0.203219,0.067319,0.976816,0.464680,0.421680,-0.101243,0.642830,0.647978,0.133023,-0.047693,0.989965,0.461290,0.419560,0.136306,0.629074,0.645227,0.220823,-0.080627,0.971976,0.547890,0.413800,0.115853,0.630670,0.647981,0.056262,-0.038863,0.997659,0.542070,0.415390,0.117168,0.638597,0.648979,0.025716,-0.103642,0.994282,0.543000,0.417760,0.135863,0.636770,0.646487,0.218725,-0.104481,0.970177,0.548180,0.416590,-0.136475,0.629094,0.645270,-0.219929,-0.083860,0.971905,0.452110,0.413800,-0.115937,0.630676,0.648000,-0.055300,-0.044585,0.997474,0.457920,0.415390,-0.136070,0.636776,0.646535,-0.219453,-0.106643,0.969777,0.451810,0.416590,-0.117342,0.638615,0.649024,-0.026077,-0.106752,0.993944,0.456990,0.417760,0.170191,0.632392,0.631100,0.468675,0.053361,0.881758,0.561090,0.413650,0.155929,0.630333,0.638567,0.366975,-0.047428,0.929021,0.554900,0.413360,0.154352,0.638199,0.640931,0.369321,-0.077506,0.926064,0.554210,0.416390,0.168199,0.640505,0.634814,0.497520,-0.031791,0.866870,0.559380,0.416800,-0.170621,0.632431,0.631205,-0.467556,0.061029,0.881854,0.438900,0.413650,-0.156155,0.630348,0.638621,-0.363240,-0.047641,0.930477,0.445090,0.413360,-0.168412,0.640532,0.634860,-0.496566,-0.024637,0.867649,0.440610,0.416800,-0.154427,0.638222,0.640950,-0.368012,-0.075536,0.926748,0.445780,0.416390,0.187364,0.638109,0.621818,0.524837,0.226833,0.820422,0.566110,0.414840,0.180156,0.634458,0.625744,0.513294,0.138445,0.846972,0.564250,0.414100,0.175363,0.642570,0.628894,0.584829,0.059220,0.808992,0.561810,0.417320,0.180060,0.644826,0.624093,0.619610,0.190704,0.761391,0.563090,0.417970,-0.187483,0.638124,0.621846,-0.520807,0.229931,0.822127,0.433880,0.414840,-0.180268,0.634469,0.625771,-0.517220,0.152690,0.842122,0.435740,0.414100,-0.180075,0.644823,0.624101,-0.615579,0.193245,0.764015,0.436900,0.417970,-0.175616,0.642594,0.628972,-0.591342,0.073623,0.803053,0.438180,0.417320,0.197018,0.646385,0.611751,0.574902,0.409842,0.708179,0.570960,0.417400,0.193464,0.641920,0.616848,0.548795,0.326873,0.769401,0.568530,0.415960,0.183581,0.647533,0.619230,0.612294,0.243000,0.752361,0.564940,0.418820,0.187483,0.650798,0.616109,0.621308,0.310679,0.719343,0.566840,0.419800,-0.197665,0.646408,0.611904,-0.570795,0.416065,0.707872,0.429030,0.417400,-0.193712,0.641951,0.616909,-0.539770,0.313385,0.781305,0.431460,0.415960,-0.187909,0.650811,0.616201,-0.613006,0.319911,0.722413,0.433150,0.419800,-0.183896,0.647548,0.619293,-0.596997,0.232230,0.767895,0.435050,0.418820,0.201876,0.656207,0.602674,0.618186,0.245973,0.746554,0.574430,0.421060,0.199595,0.650862,0.606416,0.591535,0.390063,0.705647,0.572850,0.419160,0.189572,0.653580,0.611943,0.639992,0.343825,0.687164,0.568220,0.420840,0.191640,0.657461,0.608574,0.623518,0.184654,0.759689,0.569470,0.422090,-0.202162,0.656238,0.602737,-0.606294,0.268841,0.748419,0.425560,0.421060,-0.199928,0.650875,0.606488,-0.586135,0.401553,0.703705,0.427140,0.419160,-0.191777,0.657500,0.608596,-0.628767,0.181084,0.756215,0.430520,0.422090,-0.189761,0.653595,0.611990,-0.639685,0.352794,0.682891,0.431770,0.420840,0.194216,0.662364,0.607085,0.611138,0.104680,0.784572,0.570990,0.423700,0.203602,0.661600,0.599795,0.670965,0.176516,0.720173,0.575940,0.422930,0.195629,0.666981,0.605665,0.622861,-0.087304,0.777446,0.572160,0.425420,0.203824,0.666763,0.597717,0.709038,-0.071409,0.701545,0.577000,0.424770,-0.194633,0.662405,0.607159,-0.619746,0.098426,0.778606,0.429000,0.423700,-0.203419,0.661625,0.599720,-0.669415,0.188274,0.718635,0.424060,0.422930,-0.204088,0.666746,0.597777,-0.710097,-0.087023,0.698706,0.422990,0.424770,-0.195842,0.667013,0.605696,-0.627816,-0.093038,0.772781,0.427830,0.425420,0.206541,0.676137,0.601575,0.666582,-0.484988,0.566087,0.577070,0.428420,0.196468,0.671054,0.606346,0.567984,-0.500926,0.653044,0.572320,0.427000,0.205107,0.671767,0.598661,0.661721,-0.428873,0.614974,0.577270,0.426570,0.197715,0.674029,0.609339,0.545705,-0.602904,0.581990,0.572040,0.428540,-0.196687,0.671087,0.606364,-0.568582,-0.500616,0.652762,0.427670,0.427000,-0.206838,0.676108,0.601665,-0.667383,-0.483024,0.566823,0.422920,0.428420,-0.205442,0.671764,0.598722,-0.664676,-0.427192,0.612954,0.422720,0.426570,-0.197959,0.674034,0.609389,-0.548119,-0.595091,0.587735,0.427950,0.428540,0.206533,0.680852,0.604892,0.693267,-0.374799,0.615553,0.576730,0.430380,0.197911,0.677545,0.612052,0.591907,-0.447286,0.670508,0.571880,0.430070,0.203899,0.686395,0.609882,0.656218,-0.414631,0.630444,0.575320,0.432640,0.195793,0.681400,0.615729,0.584965,-0.396681,0.707432,0.570880,0.431680,-0.206466,0.680835,0.604844,-0.690047,-0.366079,0.624357,0.423260,0.430380,-0.203840,0.686445,0.609744,-0.657758,-0.401966,0.637007,0.424670,0.432640,-0.198104,0.677543,0.612077,-0.599540,-0.432114,0.673669,0.428110,0.430070,-0.196177,0.681469,0.615645,-0.592205,-0.386186,0.707215,0.429110,0.431680,0.199944,0.691181,0.619307,0.577518,-0.542782,0.609804,0.571950,0.435440,0.190444,0.685770,0.621161,0.540062,-0.466808,0.700302,0.568110,0.433580,0.193755,0.695437,0.629502,0.500528,-0.566010,0.655060,0.568110,0.438020,0.184074,0.689499,0.627999,0.474797,-0.519283,0.710572,0.564950,0.435350,-0.199984,0.691306,0.619124,-0.582521,-0.543439,0.604437,0.428040,0.435440,-0.193862,0.695454,0.629494,-0.504050,-0.571806,0.647280,0.431880,0.438020,-0.190801,0.685825,0.621157,-0.541803,-0.465406,0.699890,0.431880,0.433580,-0.184318,0.689525,0.628012,-0.477457,-0.530006,0.700805,0.435040,0.435350,0.186699,0.698939,0.637484,0.424487,-0.554167,0.716037,0.565120,0.439610,0.177771,0.692638,0.633715,0.401909,-0.525275,0.750037,0.562630,0.436590,0.178873,0.701614,0.643479,0.328521,-0.571552,0.751933,0.562290,0.440730,0.171430,0.695488,0.638522,0.312464,-0.517287,0.796731,0.560480,0.437710,-0.187138,0.699006,0.637507,-0.425310,-0.547681,0.720526,0.434880,0.439610,-0.179090,0.701647,0.643503,-0.330600,-0.561386,0.758650,0.437700,0.440730,-0.178240,0.692611,0.633829,-0.399036,-0.532468,0.746491,0.437360,0.436590,-0.171713,0.695528,0.638557,-0.303898,-0.516637,0.800458,0.439510,0.437710,0.169457,0.704114,0.648758,0.206959,-0.634934,0.744330,0.559060,0.441910,0.163610,0.698900,0.642703,0.222693,-0.505775,0.833426,0.557870,0.439090,0.155169,0.706599,0.653225,0.110219,-0.737010,0.666835,0.554330,0.442840,0.151096,0.702190,0.646951,0.165313,-0.488580,0.856715,0.553730,0.440340,-0.169754,0.704160,0.648783,-0.208488,-0.631689,0.746660,0.440930,0.441910,-0.155067,0.706611,0.653165,-0.109996,-0.735825,0.668179,0.445660,0.442840,-0.163665,0.698943,0.642689,-0.220685,-0.506019,0.833812,0.442120,0.439090,-0.151274,0.702210,0.646967,-0.165278,-0.488792,0.856601,0.446270,0.440340,0.111344,0.707465,0.660838,0.163702,-0.847257,0.505328,0.539700,0.442500,0.134008,0.708546,0.657335,0.103501,-0.817525,0.566516,0.547070,0.443180,0.132154,0.704590,0.651345,0.152116,-0.481397,0.863202,0.547070,0.441000,0.112040,0.703453,0.654664,0.122508,-0.528271,0.840192,0.540450,0.440500,-0.111424,0.707483,0.660851,-0.164469,-0.846130,0.506966,0.460290,0.442500,-0.134111,0.708561,0.657359,-0.104535,-0.817328,0.566610,0.452920,0.443180,-0.112178,0.703471,0.654695,-0.123693,-0.528126,0.840109,0.459540,0.440500,-0.132160,0.704597,0.651340,-0.152994,-0.481101,0.863212,0.452920,0.441000,0.091916,0.703157,0.661692,0.249658,-0.850942,0.462134,0.534490,0.440550,0.095535,0.700200,0.654084,0.091338,-0.633281,0.768513,0.536270,0.438560,-0.092222,0.703189,0.661781,-0.251491,-0.849180,0.464377,0.465500,0.440550,-0.095682,0.700221,0.654118,-0.093007,-0.635219,0.766711,0.463720,0.438560,0.073975,0.677375,0.641169,0.014218,-0.462737,0.886382,0.533050,0.431490,0.074686,0.685254,0.643241,-0.144230,-0.434500,0.889049,0.532420,0.432980,0.070331,0.681349,0.640987,-0.085659,-0.358785,0.929482,0.531760,0.431930,0.078358,0.680676,0.643467,-0.067893,-0.518587,0.852325,0.533810,0.432300,0.067315,0.677609,0.639807,-0.024646,-0.239198,0.970658,0.531400,0.431030,0.070707,0.674201,0.640007,0.152911,-0.416228,0.896310,0.532510,0.430800,0.065694,0.674172,0.639334,0.090228,-0.138951,0.986180,0.531220,0.430360,0.069223,0.671371,0.639323,0.370621,-0.415948,0.830438,0.532180,0.430130,0.065833,0.670264,0.639585,0.382597,-0.164311,0.909187,0.531390,0.429580,-0.073909,0.677376,0.641146,-0.011505,-0.463236,0.886160,0.466940,0.431490,-0.074692,0.685258,0.643238,0.144779,-0.433646,0.889376,0.467570,0.432980,-0.078350,0.680681,0.643463,0.069568,-0.517967,0.852567,0.466190,0.432300,-0.070377,0.681356,0.640995,0.085509,-0.358827,0.929479,0.468230,0.431930,-0.067273,0.677608,0.639782,0.023770,-0.241692,0.970062,0.468590,0.431030,-0.070677,0.674201,0.639992,-0.149818,-0.419484,0.895314,0.467490,0.430800,-0.065707,0.674174,0.639328,-0.091962,-0.145675,0.985049,0.468770,0.430360,-0.065717,0.670258,0.639545,-0.389501,-0.155637,0.907781,0.468600,0.429580,-0.069075,0.671363,0.639273,-0.365260,-0.414330,0.833616,0.467810,0.430130,0.079742,0.676729,0.638707,0.299154,-0.786623,0.540121,0.534620,0.430810,0.075331,0.673886,0.637358,0.373486,-0.741799,0.556994,0.533830,0.430240,0.079640,0.674448,0.634061,0.354336,-0.795220,0.492008,0.535010,0.429710,0.076960,0.672071,0.632372,0.343446,-0.725953,0.595850,0.534650,0.429110,0.072555,0.671422,0.636355,0.495169,-0.682034,0.538179,0.533310,0.429720,0.074936,0.670074,0.630799,0.302509,-0.677855,0.670075,0.534280,0.428850,0.074574,0.668351,0.628760,0.178204,-0.620299,0.763854,0.534370,0.428570,0.071203,0.669273,0.634542,0.603586,-0.619859,0.501456,0.533280,0.429210,-0.079768,0.676737,0.638712,-0.293906,-0.784574,0.545952,0.465370,0.430810,-0.075329,0.673890,0.637353,-0.361532,-0.743725,0.562288,0.466160,0.430240,-0.072438,0.671418,0.636315,-0.485590,-0.684906,0.543236,0.466680,0.429720,-0.077089,0.672085,0.632399,-0.338444,-0.732565,0.590596,0.465340,0.429110,-0.074966,0.670084,0.630799,-0.296720,-0.678425,0.672084,0.465710,0.428850,-0.079883,0.674468,0.634125,-0.353503,-0.796336,0.490801,0.464990,0.429710,-0.074682,0.668370,0.628784,-0.184528,-0.603548,0.775680,0.465620,0.428570,-0.071119,0.669270,0.634508,-0.604023,-0.601200,0.523178,0.466710,0.429210,0.080189,0.688760,0.646277,-0.184080,-0.418767,0.889240,0.533540,0.434130,0.087760,0.692175,0.649782,-0.168404,-0.353427,0.920179,0.535190,0.435540,0.083442,0.684020,0.646318,-0.068674,-0.559455,0.826011,0.534760,0.433330,0.090171,0.687153,0.649307,0.015136,-0.615387,0.788080,0.536150,0.434540,0.091135,0.683028,0.641625,0.321974,-0.832917,0.450092,0.536720,0.432350,0.084892,0.679818,0.640398,0.272506,-0.814447,0.512266,0.535450,0.431530,0.090567,0.678820,0.634717,0.355891,-0.686912,0.633636,0.536920,0.430060,0.083874,0.676064,0.633843,0.267121,-0.763194,0.588371,0.535700,0.429660,-0.080238,0.688768,0.646288,0.184423,-0.418780,0.889163,0.466450,0.434130,-0.083493,0.684029,0.646330,0.068617,-0.559442,0.826025,0.465230,0.433330,-0.087773,0.692184,0.649781,0.168321,-0.354078,0.919944,0.464800,0.435540,-0.090187,0.687161,0.649309,-0.015585,-0.615426,0.788041,0.463840,0.434540,-0.091136,0.683031,0.641622,-0.323178,-0.832429,0.450131,0.463280,0.432350,-0.084909,0.679824,0.640400,-0.273573,-0.812597,0.514630,0.464540,0.431530,-0.083984,0.676076,0.633871,-0.272896,-0.765823,0.582274,0.464290,0.429660,-0.090585,0.678826,0.634720,-0.357736,-0.688972,0.630351,0.463070,0.430060,0.098225,0.695643,0.652928,-0.074702,-0.293610,0.953002,0.537490,0.437340,0.112887,0.697887,0.654134,0.066951,-0.243004,0.967712,0.541110,0.438830,0.099845,0.690077,0.651195,0.136100,-0.710623,0.690283,0.538300,0.435910,0.113263,0.691749,0.651338,0.069493,-0.381593,0.921714,0.541660,0.436910,0.099358,0.685510,0.637923,0.392157,-0.856943,0.334458,0.538860,0.433230,0.113263,0.691749,0.651338,0.139190,-0.987914,0.068202,0.541660,0.436910,0.111684,0.692186,0.635555,0.207144,-0.931255,0.299758,0.542080,0.433810,0.097813,0.680513,0.629982,0.487915,-0.598083,0.635795,0.539090,0.430510,0.109774,0.685619,0.625866,0.261987,-0.593890,0.760696,0.542250,0.430740,-0.098305,0.695656,0.652945,0.074978,-0.294850,0.952597,0.462500,0.437340,-0.099826,0.690081,0.651187,-0.135461,-0.711237,0.689777,0.461690,0.435910,-0.113027,0.697897,0.654168,-0.067287,-0.243075,0.967671,0.458880,0.438830,-0.113375,0.691759,0.651366,-0.069237,-0.382608,0.921313,0.458330,0.436910,-0.113375,0.691759,0.651366,-0.138975,-0.987975,0.067758,0.458330,0.436910,-0.099370,0.685514,0.637923,-0.391869,-0.857059,0.334497,0.461130,0.433230,-0.111664,0.692189,0.635542,-0.206541,-0.931214,0.300301,0.457910,0.433810,-0.097779,0.680516,0.629964,-0.486407,-0.599550,0.635568,0.460910,0.430510,-0.109869,0.685637,0.625890,-0.259778,-0.593628,0.761657,0.457740,0.430740,0.148349,0.696204,0.647410,0.236476,-0.235620,0.942636,0.552710,0.438190,0.131244,0.698338,0.651612,0.174175,-0.211149,0.961810,0.546880,0.439020,0.144907,0.689854,0.645387,-0.005263,-0.715290,0.698808,0.551810,0.436080,0.129706,0.691733,0.648936,0.000369,-0.793949,0.607984,0.546710,0.436890,-0.148379,0.696231,0.647381,-0.235931,-0.235520,0.942797,0.447280,0.438190,-0.131328,0.698352,0.651628,-0.175562,-0.210774,0.961640,0.453110,0.439020,-0.129808,0.691745,0.648958,-0.001858,-0.793919,0.608021,0.453280,0.436890,-0.144961,0.689876,0.645378,0.005003,-0.714636,0.699479,0.448180,0.436080,0.167087,0.688899,0.638764,0.367914,-0.353556,0.860022,0.558840,0.435430,0.159515,0.692621,0.643037,0.301380,-0.304412,0.903606,0.556420,0.436840,0.163102,0.683078,0.636666,0.119464,-0.678813,0.724528,0.557800,0.433520,0.155426,0.686569,0.641187,0.070701,-0.679160,0.730578,0.555310,0.434830,-0.167161,0.688942,0.638744,-0.362017,-0.354904,0.861967,0.441150,0.435430,-0.159703,0.692668,0.643059,-0.300128,-0.302682,0.904603,0.443570,0.436840,-0.155559,0.686600,0.641199,-0.070916,-0.677500,0.732096,0.444680,0.434830,-0.163357,0.683091,0.636718,-0.120995,-0.679199,0.723912,0.442190,0.433520,0.170162,0.680133,0.632851,0.190060,-0.673254,0.714567,0.559870,0.432550,0.173268,0.685746,0.634325,0.459232,-0.360317,0.811959,0.560820,0.434330,0.178784,0.682797,0.629089,0.539279,-0.359111,0.761720,0.562760,0.433260,-0.170126,0.680160,0.632809,-0.191245,-0.678613,0.709161,0.440120,0.432550,-0.173527,0.685731,0.634362,-0.455259,-0.376011,0.807065,0.439170,0.434330,-0.178802,0.682845,0.629029,-0.537989,-0.370898,0.756969,0.437230,0.433260,0.188034,0.676765,0.618622,0.526235,-0.495275,0.691216,0.567120,0.430330,0.184336,0.679613,0.623468,0.561387,-0.402876,0.722866,0.565130,0.431800,0.189521,0.674217,0.615817,0.460355,-0.616073,0.639161,0.567790,0.429260,0.189417,0.672230,0.613780,0.387867,-0.726606,0.567100,0.567840,0.428340,0.182680,0.671704,0.617365,0.236586,-0.832352,0.501215,0.564740,0.428550,0.182395,0.670946,0.615719,0.172353,-0.861082,0.478364,0.564720,0.428100,-0.188239,0.676765,0.618654,-0.525352,-0.489975,0.695651,0.432870,0.430330,-0.184407,0.679679,0.623337,-0.557463,-0.396333,0.729490,0.434860,0.431800,-0.189718,0.674221,0.615873,-0.460112,-0.613630,0.641682,0.432200,0.429260,-0.182840,0.671716,0.617392,-0.234919,-0.830459,0.505124,0.435250,0.428550,-0.189602,0.672226,0.613832,-0.389287,-0.721618,0.572470,0.432150,0.428340,-0.182643,0.670952,0.615775,-0.172002,-0.856012,0.487502,0.435270,0.428100,0.188803,0.670346,0.611768,0.406770,-0.580639,0.705264,0.568070,0.427360,0.187824,0.667742,0.610985,0.496649,-0.087588,0.863521,0.567890,0.426340,0.181860,0.670247,0.614358,0.231849,-0.616409,0.752520,0.564750,0.427560,0.180920,0.668832,0.614077,0.383607,0.035360,0.922819,0.564490,0.427110,-0.189133,0.670348,0.611837,-0.412307,-0.572488,0.708703,0.431920,0.427360,-0.188226,0.667743,0.611076,-0.498271,-0.086120,0.862734,0.432100,0.426340,-0.182148,0.670256,0.614422,-0.231211,-0.605020,0.761901,0.435240,0.427560,-0.181271,0.668844,0.614152,-0.379092,0.042534,0.924381,0.435500,0.427110,0.179584,0.666463,0.615791,0.480029,0.436601,0.760889,0.563620,0.426010,0.184371,0.661105,0.615539,0.638832,0.294002,0.710954,0.565350,0.423540,0.186457,0.664296,0.612547,0.562390,0.218474,0.797488,0.566770,0.424960,0.177995,0.664151,0.618925,0.527879,0.507631,0.680922,0.562520,0.424780,-0.184856,0.661146,0.615647,-0.637365,0.289503,0.714111,0.434640,0.423540,-0.179866,0.666494,0.615842,-0.480369,0.438876,0.759364,0.436380,0.426010,-0.186693,0.664356,0.612585,-0.562557,0.218189,0.797448,0.433220,0.424960,-0.178237,0.664196,0.618968,-0.528390,0.501172,0.685296,0.437470,0.424780,0.180339,0.656335,0.621769,0.654397,0.270746,0.706018,0.563150,0.421880,0.176178,0.662212,0.621919,0.525639,0.489039,0.696092,0.561550,0.423980,0.174163,0.660570,0.624645,0.495101,0.474370,0.727907,0.560610,0.423380,0.182579,0.658514,0.618750,0.669340,0.332287,0.664507,0.564240,0.422600,-0.180532,0.656354,0.621791,-0.642958,0.277666,0.713797,0.436840,0.421880,-0.176294,0.662247,0.621931,-0.522886,0.462779,0.715839,0.438450,0.423980,-0.182884,0.658542,0.618803,-0.662164,0.325034,0.675197,0.435750,0.422600,-0.174060,0.660593,0.624592,-0.496410,0.458316,0.737241,0.439380,0.423380,0.177746,0.654277,0.625041,0.642885,0.226910,0.731581,0.561810,0.421160,0.174721,0.652161,0.628312,0.619466,0.228787,0.750945,0.560520,0.420470,0.171607,0.659139,0.627149,0.466393,0.474023,0.746846,0.559660,0.422840,0.168905,0.657577,0.629736,0.439839,0.461608,0.770363,0.558760,0.422310,-0.177835,0.654276,0.625045,-0.632913,0.225495,0.740658,0.438180,0.421160,-0.171682,0.659185,0.627129,-0.469457,0.470649,0.747061,0.440330,0.422840,-0.174649,0.652164,0.628271,-0.621108,0.227588,0.749953,0.439470,0.420470,-0.169093,0.657621,0.629753,-0.439630,0.462175,0.770143,0.441230,0.422310,0.170837,0.650049,0.631645,0.548993,0.203183,0.810755,0.559560,0.419860,0.163885,0.647869,0.635923,0.440071,0.171193,0.881493,0.557580,0.419270,0.166145,0.655675,0.632278,0.397366,0.434633,0.808204,0.557960,0.421740,0.160341,0.653614,0.636126,0.309955,0.435541,0.845122,0.556270,0.421180,-0.170914,0.650054,0.631652,-0.555449,0.211623,0.804172,0.440430,0.419860,-0.166363,0.655722,0.632302,-0.395355,0.441582,0.805419,0.442030,0.421740,-0.164067,0.647867,0.635967,-0.439814,0.173184,0.881232,0.442410,0.419270,-0.160424,0.653633,0.636128,-0.308919,0.440948,0.842694,0.443720,0.421180,0.151895,0.645238,0.641223,0.340000,0.129504,0.931466,0.553320,0.418760,0.135299,0.643822,0.647115,0.229844,0.084808,0.969525,0.548230,0.418760,0.149291,0.651641,0.640677,0.239755,0.483610,0.841807,0.552720,0.420680,0.134928,0.650372,0.645635,0.193959,0.535354,0.822056,0.548360,0.420600,-0.152016,0.645247,0.641258,-0.341951,0.127219,0.931067,0.446670,0.418760,-0.149545,0.651672,0.640751,-0.241368,0.486985,0.839397,0.447270,0.420680,-0.135613,0.643843,0.647194,-0.230622,0.084726,0.969348,0.451760,0.418760,-0.135143,0.650383,0.645687,-0.192424,0.539047,0.820001,0.451630,0.420600,0.103263,0.648873,0.648912,-0.094353,0.086335,0.991788,0.539720,0.421010,0.118426,0.645164,0.649557,0.055923,0.066635,0.996209,0.543630,0.419610,0.105530,0.654354,0.647307,0.081029,0.525232,0.847093,0.540520,0.422350,0.119932,0.651391,0.648072,0.127138,0.548963,0.826121,0.544190,0.421220,-0.103519,0.648906,0.648989,0.093247,0.090886,0.991486,0.460270,0.421010,-0.118636,0.645198,0.649615,-0.056476,0.071667,0.995828,0.456360,0.419610,-0.119948,0.651414,0.648071,-0.126011,0.553401,0.823328,0.455800,0.421220,-0.105532,0.654366,0.647306,-0.081246,0.527973,0.845366,0.459470,0.422350,0.080149,0.658236,0.641971,-0.326303,0.420505,0.846582,0.534380,0.424530,0.090171,0.654166,0.646515,-0.217023,0.174733,0.960401,0.536570,0.422770,0.083983,0.662375,0.640624,-0.277720,0.682605,0.675960,0.535560,0.425240,0.093476,0.659335,0.645007,-0.054282,0.556468,0.829094,0.537590,0.423840,-0.080087,0.658242,0.641952,0.326289,0.421845,0.845921,0.465610,0.424530,-0.090076,0.654167,0.646487,0.217750,0.175026,0.960183,0.463420,0.422770,-0.093518,0.659351,0.645020,0.053639,0.556049,0.829417,0.462400,0.423840,-0.084314,0.662411,0.640721,0.276147,0.683936,0.675259,0.464430,0.425240,0.067164,0.659303,0.634295,-0.006131,0.889137,0.457601,0.532630,0.427050,0.072404,0.658524,0.637190,-0.196453,0.755655,0.624813,0.533250,0.425880,0.077257,0.662368,0.635880,-0.410229,0.813966,0.411304,0.534580,0.426240,-0.067432,0.659331,0.634369,0.009257,0.878823,0.477057,0.467360,0.427050,-0.072560,0.658548,0.637236,0.197177,0.750040,0.631317,0.466740,0.425880,-0.077545,0.662399,0.635965,0.404627,0.817925,0.408994,0.465410,0.426240,0.128813,0.690665,0.631977,-0.161971,-0.908770,0.384580,0.546580,0.433630,0.142019,0.683765,0.632212,-0.255538,-0.833956,0.489099,0.551220,0.432920,0.140706,0.679266,0.625044,-0.223652,-0.537881,0.812812,0.550790,0.429770,0.126831,0.685105,0.625167,-0.105232,-0.546532,0.830800,0.546430,0.430420,-0.128913,0.690684,0.632002,0.161726,-0.908863,0.384463,0.453410,0.433630,-0.126998,0.685122,0.625199,0.105166,-0.546685,0.830708,0.453560,0.430420,-0.142142,0.683788,0.632226,0.255292,-0.833858,0.489394,0.448770,0.432920,-0.140836,0.679291,0.625063,0.222967,-0.537387,0.813327,0.449200,0.429770,0.151196,0.681434,0.632555,-0.124788,-0.824478,0.551964,0.554760,0.431940,0.160445,0.678522,0.629448,-0.033552,-0.841519,0.539184,0.557500,0.431010,0.150475,0.676679,0.626545,-0.061970,-0.592478,0.803199,0.554440,0.429050,-0.151503,0.681457,0.632619,0.124531,-0.824770,0.551585,0.445230,0.431940,-0.150326,0.676696,0.626480,0.059898,-0.585616,0.808372,0.445550,0.429050,-0.160343,0.678540,0.629395,0.033152,-0.842489,0.537692,0.442490,0.431010,0.177326,0.670884,0.616043,-0.017217,-0.850899,0.525047,0.562960,0.427770,0.177619,0.671261,0.617054,-0.044380,-0.914697,0.401695,0.563060,0.428050,-0.177474,0.670884,0.616072,0.018185,-0.844858,0.534682,0.437030,0.427770,-0.177710,0.671268,0.617062,0.046328,-0.911158,0.409444,0.436930,0.428050,0.176855,0.670604,0.615461,0.137590,-0.416321,0.898747,0.562750,0.427530,0.173244,0.670912,0.616026,0.223558,0.058242,0.972949,0.561500,0.427420,0.173747,0.670200,0.616261,0.251136,0.477081,0.842214,0.561690,0.427190,0.176217,0.669816,0.615712,0.291547,0.306278,0.906197,0.562450,0.427280,-0.173354,0.670910,0.616047,-0.220349,0.073514,0.972647,0.438490,0.427420,-0.177036,0.670602,0.615501,-0.133436,-0.400628,0.906472,0.437250,0.427530,-0.173897,0.670197,0.616293,-0.244827,0.504140,0.828192,0.438310,0.427190,-0.176428,0.669813,0.615760,-0.285165,0.327234,0.900888,0.437540,0.427280,0.175094,0.668344,0.617383,0.353822,0.603930,0.714198,0.562020,0.426420,0.173899,0.666551,0.620077,0.362660,0.658702,0.659233,0.561360,0.425480,0.172125,0.669469,0.617329,0.284838,0.627971,0.724238,0.561160,0.426830,0.170671,0.668094,0.619380,0.282418,0.687116,0.669412,0.560670,0.426190,-0.175427,0.668356,0.617454,-0.354280,0.616271,0.703346,0.437980,0.426420,-0.172372,0.669481,0.617373,-0.285027,0.653688,0.701036,0.438830,0.426830,-0.174322,0.666612,0.620139,-0.372331,0.654613,0.657914,0.438630,0.425480,-0.171084,0.668159,0.619406,-0.288844,0.700063,0.653056,0.439320,0.426190,0.172150,0.664864,0.622574,0.335070,0.644141,0.687613,0.560580,0.424760,0.169981,0.663335,0.624759,0.306457,0.639640,0.704943,0.559730,0.424220,0.169155,0.666506,0.621612,0.250186,0.681746,0.687480,0.560060,0.425490,0.167334,0.665018,0.623857,0.191621,0.680323,0.707420,0.559340,0.424880,-0.172528,0.664913,0.622624,-0.349298,0.620301,0.702295,0.439410,0.424760,-0.169678,0.666557,0.621704,-0.258433,0.679336,0.686815,0.439930,0.425490,-0.170268,0.663357,0.624793,-0.324524,0.613067,0.720300,0.440270,0.424220,-0.167837,0.665052,0.623949,-0.201544,0.667171,0.717121,0.440650,0.424880,0.167587,0.662152,0.626795,0.271607,0.649940,0.709794,0.558860,0.423850,0.165532,0.661078,0.628624,0.214661,0.677491,0.703510,0.558050,0.423530,0.165331,0.663752,0.625768,0.097544,0.710794,0.696603,0.558520,0.424520,0.164081,0.662527,0.627064,0.035133,0.759111,0.650012,0.558000,0.424120,-0.165510,0.661108,0.628580,-0.206683,0.672927,0.710248,0.441940,0.423530,-0.167800,0.662176,0.626817,-0.279272,0.633156,0.721887,0.441130,0.423850,-0.165794,0.663772,0.625852,-0.101742,0.692936,0.713785,0.441470,0.424520,-0.164296,0.662535,0.627098,-0.034049,0.745332,0.665824,0.441990,0.424120,0.158019,0.658359,0.633192,0.062778,0.767058,0.638499,0.555950,0.422710,0.163085,0.659941,0.630585,0.140304,0.719508,0.680163,0.557390,0.423110,0.156687,0.660541,0.628474,-0.025916,0.778895,0.626619,0.556140,0.424070,0.161813,0.662031,0.627436,-0.029905,0.777026,0.628758,0.557460,0.424180,-0.162979,0.659964,0.630538,-0.132404,0.724378,0.676569,0.442600,0.423110,-0.157968,0.658392,0.633166,-0.060772,0.771244,0.633632,0.444040,0.422710,-0.161917,0.662037,0.627446,0.029583,0.770377,0.636902,0.442530,0.424180,-0.156661,0.660558,0.628456,0.023511,0.773294,0.633611,0.443850,0.424070,0.135135,0.654418,0.640242,0.052633,0.902751,0.426931,0.548880,0.422480,0.148237,0.655795,0.636259,0.024058,0.834460,0.550543,0.552840,0.422420,0.137230,0.656931,0.629824,-0.048061,0.846409,0.530360,0.549540,0.424370,0.147985,0.658980,0.630357,-0.060282,0.789908,0.610255,0.553290,0.424090,-0.135248,0.654440,0.640274,-0.051435,0.903675,0.425118,0.451110,0.422480,-0.148298,0.655818,0.636267,-0.023732,0.836854,0.546912,0.447150,0.422420,-0.147984,0.659013,0.630353,0.059541,0.786315,0.614951,0.446710,0.424090,-0.137062,0.656941,0.629767,0.048542,0.845985,0.530992,0.450450,0.424370,0.106778,0.658988,0.642072,0.273323,0.852869,0.444869,0.541230,0.424090,0.121386,0.655839,0.640754,0.150199,0.917238,0.368938,0.544880,0.423110,0.106122,0.660463,0.633944,0.371552,0.854109,0.363932,0.541770,0.425850,0.122841,0.656096,0.632217,0.129360,0.903293,0.409058,0.545530,0.425030,-0.106824,0.658993,0.642081,-0.271465,0.847791,0.455584,0.458760,0.424090,-0.121458,0.655855,0.640771,-0.150490,0.915932,0.372050,0.455110,0.423110,-0.123042,0.656120,0.632272,-0.131960,0.903943,0.406784,0.454460,0.425030,-0.106615,0.660516,0.634083,-0.372537,0.855978,0.358495,0.458220,0.425850,0.095858,0.663697,0.640949,0.149825,0.807039,0.571175,0.538280,0.425270,0.086820,0.665541,0.637282,-0.197416,0.793003,0.576345,0.536230,0.426330,0.088265,0.668330,0.634229,-0.124878,0.671603,0.730311,0.536530,0.427420,0.096388,0.667100,0.633948,0.324477,0.785110,0.527557,0.538710,0.426710,-0.095887,0.663714,0.640958,-0.148976,0.801101,0.579693,0.461710,0.425270,-0.096814,0.667143,0.634066,-0.322543,0.791625,0.518938,0.461280,0.426710,-0.088598,0.668364,0.634319,0.125465,0.675651,0.726467,0.463460,0.427420,-0.087193,0.665578,0.637389,0.195627,0.791784,0.578627,0.463760,0.426330,0.080327,0.665008,0.633093,-0.496605,0.697876,0.516093,0.535200,0.427070,0.075685,0.666626,0.627710,-0.559121,0.029408,0.828565,0.534590,0.428160,0.080842,0.667456,0.631245,-0.481577,0.305099,0.821583,0.535320,0.427870,-0.080672,0.665046,0.633192,0.493861,0.700114,0.515695,0.464800,0.427070,-0.081142,0.667490,0.631328,0.482791,0.296910,0.823867,0.464670,0.427870,0.124901,0.670766,0.622035,-0.001303,0.144584,0.989492,0.546270,0.427660,0.137348,0.663512,0.625223,-0.071503,0.475653,0.876722,0.550070,0.425910,0.137992,0.669244,0.623975,-0.074938,0.154664,0.985121,0.550450,0.427210,0.123290,0.662203,0.625084,0.068870,0.565914,0.821582,0.545990,0.426460,0.106601,0.663447,0.627639,0.360620,0.598637,0.715253,0.542090,0.427050,0.107048,0.670299,0.623752,0.295050,0.182809,0.937831,0.542260,0.428060,0.147908,0.663899,0.626514,-0.011425,0.487748,0.872910,0.553720,0.425520,0.148446,0.668319,0.624649,0.033481,0.247887,0.968210,0.554070,0.426750,0.156575,0.663773,0.625728,0.060190,0.554614,0.829928,0.556480,0.425210,0.157326,0.667220,0.623962,0.130418,0.381882,0.914963,0.556840,0.426220,-0.137573,0.663538,0.625270,0.073664,0.472510,0.878242,0.449920,0.425910,-0.125088,0.670782,0.622067,0.000961,0.141926,0.989877,0.453730,0.427660,-0.138496,0.669272,0.624081,0.076306,0.158286,0.984440,0.449540,0.427210,-0.123145,0.662205,0.625036,-0.070650,0.565988,0.821381,0.454010,0.426460,-0.107357,0.670324,0.623834,-0.291752,0.183893,0.938650,0.457730,0.428060,-0.106663,0.663454,0.627648,-0.366068,0.604818,0.707241,0.457900,0.427050,-0.148301,0.663941,0.626599,0.011215,0.478327,0.878110,0.446270,0.425520,-0.156977,0.663799,0.625800,-0.061725,0.539284,0.839859,0.443510,0.425210,-0.148979,0.668359,0.624763,-0.033030,0.256253,0.966045,0.445930,0.426750,-0.157925,0.667268,0.624092,-0.129816,0.388766,0.912145,0.443150,0.426220,0.108703,0.677714,0.623370,0.247120,-0.176337,0.952805,0.542300,0.429200,0.125594,0.677998,0.623171,-0.033675,-0.162774,0.986089,0.546380,0.428860,0.139066,0.674186,0.623875,-0.099808,-0.135621,0.985721,0.550630,0.428370,0.158497,0.670565,0.622738,0.236724,0.132819,0.962456,0.557120,0.427210,0.149277,0.672453,0.624075,0.039376,-0.095982,0.994604,0.554260,0.427840,-0.125810,0.678016,0.623226,0.033240,-0.160797,0.986428,0.453610,0.428860,-0.108743,0.677719,0.623377,-0.244061,-0.169375,0.954854,0.457690,0.429200,-0.139031,0.674206,0.623845,0.099076,-0.129413,0.986629,0.449360,0.428370,-0.158747,0.670617,0.622782,-0.235164,0.168859,0.957175,0.442880,0.427210,-0.149475,0.672475,0.624117,-0.041812,-0.073791,0.996397,0.445730,0.427840,0.096836,0.670017,0.630484,0.416636,0.510664,0.752088,0.538950,0.427610,0.097221,0.672994,0.629014,0.442294,0.164024,0.881744,0.539080,0.428360,0.088788,0.670695,0.633058,-0.004966,0.350342,0.936609,0.536650,0.428060,0.089194,0.672831,0.632688,0.100573,0.093516,0.990525,0.536720,0.428540,0.080385,0.669230,0.630736,-0.282929,-0.124922,0.950971,0.535220,0.428330,0.080390,0.670764,0.630995,-0.092025,-0.268452,0.958887,0.535160,0.428660,0.097534,0.676263,0.628613,0.464459,-0.187203,0.865582,0.539100,0.429230,0.089794,0.675366,0.632561,0.237226,-0.267145,0.934001,0.536810,0.429120,0.081789,0.672916,0.631390,0.093424,-0.484718,0.869667,0.535420,0.429000,-0.096978,0.670039,0.630521,-0.415156,0.530540,0.739035,0.461040,0.427610,-0.097286,0.673014,0.629028,-0.434230,0.177804,0.883080,0.460920,0.428360,-0.089125,0.672831,0.632658,-0.096077,0.105160,0.989803,0.463280,0.428540,-0.088884,0.670712,0.633079,0.008813,0.366035,0.930559,0.463340,0.428060,-0.080340,0.670769,0.630972,0.089938,-0.269960,0.958662,0.464830,0.428660,-0.080482,0.669248,0.630759,0.282012,-0.127715,0.950872,0.464770,0.428330,-0.097532,0.676274,0.628602,-0.460578,-0.180582,0.869056,0.460890,0.429230,-0.089725,0.675362,0.632533,-0.237216,-0.268641,0.933574,0.463180,0.429120,-0.081768,0.672917,0.631374,-0.101820,-0.496635,0.861966,0.464570,0.429000,0.163822,0.666463,0.623584,0.157931,0.556789,0.815503,0.558490,0.425560,0.162411,0.664117,0.625228,0.029156,0.644892,0.763717,0.557910,0.424920,-0.164432,0.666502,0.623717,-0.159552,0.556074,0.815675,0.441500,0.425560,-0.162889,0.664149,0.625306,-0.029595,0.631023,0.775200,0.442080,0.424920,0.166777,0.670230,0.619341,0.412194,0.447259,0.793760,0.559580,0.426970,0.165189,0.668518,0.621588,0.298377,0.487714,0.820431,0.558980,0.426340,-0.167236,0.670278,0.619416,-0.412617,0.486457,0.770134,0.440410,0.426970,-0.165666,0.668576,0.621676,-0.297239,0.507267,0.808906,0.441010,0.426340,0.138639,0.514848,0.675034,0.686651,-0.026778,0.726493,0.541080,0.378750,0.144036,0.538859,0.666669,0.723189,0.079943,0.686007,0.544160,0.385270,0.128072,0.528942,0.683839,0.619139,0.050195,0.783675,0.537700,0.383550,0.153615,0.523083,0.656779,0.791195,-0.005276,0.611541,0.547860,0.380110,0.124046,0.506734,0.684850,0.505384,-0.145695,0.850506,0.536030,0.376770,0.115124,0.519991,0.691887,0.443696,-0.082282,0.892392,0.533650,0.381360,0.166549,0.543929,0.640922,0.756851,-0.044350,0.652081,0.555060,0.385180,0.189245,0.547917,0.614133,0.769093,-0.184162,0.612030,0.567400,0.384450,0.171070,0.527624,0.632195,0.809879,-0.120638,0.574057,0.557260,0.379470,0.190333,0.531509,0.605801,0.796407,-0.235299,0.557109,0.567970,0.378010,-0.138675,0.514850,0.675044,-0.686517,-0.027215,0.726605,0.458910,0.378750,-0.144065,0.538858,0.666677,-0.722948,0.079495,0.686314,0.455830,0.385270,-0.153643,0.523083,0.656786,-0.791075,-0.005234,0.611697,0.452140,0.380110,-0.128108,0.528945,0.683849,-0.618871,0.050266,0.783883,0.462290,0.383550,-0.115145,0.519993,0.691893,-0.443284,-0.082574,0.892570,0.466340,0.381360,-0.124051,0.506735,0.684851,-0.504994,-0.146190,0.850653,0.463960,0.376770,-0.166574,0.543930,0.640929,-0.756326,-0.045329,0.652623,0.444930,0.385180,-0.171115,0.527624,0.632206,-0.808844,-0.120015,0.575646,0.442730,0.379470,-0.189246,0.547921,0.614132,-0.766808,-0.183944,0.614955,0.432590,0.384450,-0.190553,0.531505,0.605856,-0.793900,-0.235449,0.560612,0.432020,0.378010,0.110633,0.501049,0.689751,0.316982,-0.254505,0.913646,0.531620,0.375190,0.102370,0.513445,0.695284,0.296947,-0.194408,0.934894,0.529800,0.379430,-0.110635,0.501049,0.689752,-0.316873,-0.254571,0.913665,0.468370,0.375190,-0.102378,0.513446,0.695286,-0.296786,-0.194577,0.934911,0.470190,0.379430,0.106151,0.486997,0.685879,0.136209,-0.399747,0.906449,0.530050,0.370060,0.117810,0.489362,0.683719,0.350154,-0.292965,0.889699,0.533320,0.371210,0.131570,0.494885,0.677959,0.564667,-0.187020,0.803850,0.537500,0.372610,0.124248,0.477624,0.677137,0.392839,-0.320343,0.862008,0.534950,0.367080,0.137089,0.483520,0.670589,0.623810,-0.220291,0.749888,0.538670,0.368480,0.112161,0.475488,0.679410,0.163503,-0.403520,0.900244,0.532150,0.366000,0.102553,0.476643,0.680780,0.244108,-0.319256,0.915689,0.529290,0.365140,0.096727,0.487362,0.686236,0.164717,-0.361113,0.917859,0.527460,0.368950,0.093136,0.477023,0.684977,0.426869,-0.107750,0.897871,0.526090,0.364570,0.087692,0.486743,0.688737,0.320148,-0.191968,0.927714,0.524830,0.367990,-0.106158,0.486996,0.685881,-0.136293,-0.399634,0.906486,0.469940,0.370060,-0.117816,0.489362,0.683721,-0.349973,-0.292904,0.889790,0.466670,0.371210,-0.112169,0.475485,0.679411,-0.163130,-0.403676,0.900241,0.467840,0.366000,-0.124253,0.477623,0.677138,-0.392449,-0.320085,0.862282,0.465040,0.367080,-0.131584,0.494886,0.677963,-0.564315,-0.187185,0.804058,0.462490,0.372610,-0.137112,0.483514,0.670597,-0.623669,-0.220013,0.750087,0.461320,0.368480,-0.102563,0.476637,0.680782,-0.242172,-0.321241,0.915509,0.470700,0.365140,-0.096736,0.487360,0.686238,-0.164145,-0.361586,0.917776,0.472530,0.368950,-0.087692,0.486745,0.688733,-0.319623,-0.193068,0.927667,0.475160,0.367990,-0.093123,0.477025,0.684960,-0.425134,-0.112297,0.898137,0.473910,0.364570,0.150793,0.491149,0.658182,0.787099,-0.152814,0.597597,0.544490,0.370190,0.159882,0.509606,0.647512,0.839157,-0.071693,0.539143,0.550250,0.375500,0.146053,0.502583,0.666482,0.741736,-0.095837,0.663810,0.543130,0.374400,0.163407,0.497040,0.638874,0.865703,-0.138871,0.480909,0.551820,0.371100,-0.150806,0.491149,0.658186,-0.787141,-0.152815,0.597543,0.455510,0.370190,-0.159903,0.509606,0.647517,-0.838863,-0.072352,0.539513,0.449740,0.375500,-0.163428,0.497040,0.638879,-0.865359,-0.139624,0.481310,0.448180,0.371100,-0.146079,0.502582,0.666489,-0.741665,-0.096203,0.663836,0.456860,0.374400,0.173850,0.513139,0.623110,0.842940,-0.158961,0.513987,0.558850,0.374530,0.191515,0.516483,0.597220,0.815952,-0.258041,0.517337,0.568720,0.372850,0.176175,0.499426,0.614387,0.858131,-0.201914,0.472062,0.560250,0.369870,0.192467,0.502496,0.588118,0.829871,-0.276637,0.484547,0.569970,0.368120,-0.173923,0.513140,0.623128,-0.841660,-0.161057,0.515431,0.441140,0.374530,-0.176221,0.499429,0.614397,-0.857169,-0.204009,0.472907,0.439740,0.369870,-0.191673,0.516491,0.597255,-0.813458,-0.262361,0.519088,0.431270,0.372850,-0.192578,0.502494,0.588145,-0.827986,-0.280870,0.485336,0.430030,0.368120,0.209816,0.536650,0.580278,0.811975,-0.280852,0.511682,0.578450,0.377250,0.226139,0.560141,0.565247,0.860457,-0.224328,0.457482,0.587460,0.385150,0.209423,0.553221,0.589386,0.802335,-0.239329,0.546791,0.577800,0.384550,0.226914,0.543232,0.554581,0.862629,-0.261481,0.433012,0.588950,0.377090,0.209911,0.508513,0.561463,0.829458,-0.309946,0.464686,0.580990,0.368090,0.226843,0.528697,0.544465,0.860831,-0.289178,0.418744,0.590670,0.372400,0.209804,0.521892,0.570853,0.821452,-0.303423,0.482856,0.579520,0.372260,0.227233,0.516387,0.534964,0.863278,-0.296999,0.408097,0.592520,0.368860,-0.210210,0.536672,0.580365,-0.813137,-0.280249,0.510165,0.421540,0.377250,-0.226398,0.560161,0.565295,-0.860092,-0.231188,0.454746,0.412530,0.385150,-0.226800,0.543245,0.554535,-0.863570,-0.263312,0.430016,0.411040,0.377090,-0.209768,0.553228,0.589466,-0.801323,-0.240664,0.547688,0.422190,0.384550,-0.210140,0.508511,0.561520,-0.828563,-0.313894,0.463632,0.419000,0.368090,-0.226979,0.528704,0.544495,-0.862754,-0.284837,0.417760,0.409320,0.372400,-0.227416,0.516400,0.535001,-0.863846,-0.298050,0.406123,0.407470,0.368860,-0.210099,0.521910,0.570921,-0.822049,-0.303589,0.481736,0.420470,0.372260,0.239837,0.551414,0.529194,0.913719,-0.208419,0.348826,0.600010,0.377480,0.248334,0.579417,0.519558,0.948081,-0.131428,0.289602,0.607950,0.387620,0.238924,0.568752,0.541331,0.912285,-0.183624,0.366084,0.597960,0.385940,0.249511,0.561816,0.506375,0.949427,-0.154811,0.273171,0.610420,0.379010,-0.239957,0.551439,0.529223,-0.911919,-0.215441,0.349269,0.399980,0.377480,-0.248711,0.579444,0.519581,-0.945916,-0.133591,0.295628,0.392040,0.387620,-0.249775,0.561854,0.506430,-0.947775,-0.167291,0.271543,0.389570,0.379010,-0.239326,0.568805,0.541412,-0.911614,-0.188967,0.365036,0.402030,0.385940,0.240538,0.537107,0.518630,0.913027,-0.233373,0.334544,0.601810,0.372870,0.250086,0.547423,0.495240,0.950340,-0.178443,0.254974,0.612220,0.374080,0.241053,0.525302,0.508459,0.915029,-0.254113,0.313286,0.603900,0.369360,0.250265,0.535197,0.484149,0.950516,-0.209453,0.229452,0.614530,0.370040,-0.240643,0.537108,0.518649,-0.912844,-0.233582,0.334896,0.398180,0.372870,-0.241154,0.525318,0.508478,-0.915738,-0.253477,0.311725,0.396090,0.369360,-0.250196,0.547441,0.495250,-0.950514,-0.184754,0.249776,0.387770,0.374080,-0.250272,0.535206,0.484144,-0.951713,-0.207158,0.226556,0.385470,0.370040,0.254499,0.592739,0.501547,0.966353,-0.089526,0.241139,0.615620,0.390910,0.255898,0.575390,0.487680,0.969391,-0.114982,0.216934,0.618610,0.382180,0.259264,0.609173,0.487049,0.972836,-0.072538,0.219835,0.622240,0.395740,0.260875,0.593143,0.472375,0.977336,-0.092835,0.190251,0.626000,0.387360,-0.256344,0.575459,0.487791,-0.970672,-0.123411,0.206313,0.381380,0.382180,-0.255458,0.592822,0.501709,-0.965996,-0.091139,0.241962,0.384370,0.390910,-0.260891,0.593160,0.472351,-0.979585,-0.092294,0.178592,0.374000,0.387360,-0.259568,0.609195,0.487094,-0.975730,-0.080378,0.203694,0.377750,0.395740,0.261690,0.579107,0.459424,0.980037,-0.111517,0.164594,0.629170,0.381050,0.256545,0.560615,0.475789,0.971349,-0.135520,0.195233,0.620860,0.376380,0.261943,0.566567,0.446678,0.981376,-0.129545,0.141841,0.632520,0.375390,0.256972,0.547532,0.463960,0.971539,-0.163158,0.171730,0.623550,0.371270,-0.262006,0.566584,0.446672,-0.980738,-0.131258,0.144655,0.367480,0.375390,-0.256767,0.547539,0.463905,-0.971099,-0.164115,0.173300,0.376440,0.371270,-0.256543,0.560624,0.475767,-0.971491,-0.143678,0.188577,0.379130,0.376380,-0.261925,0.579127,0.459444,-0.980156,-0.113907,0.162232,0.370820,0.381050,0.265139,0.615680,0.459358,0.979814,-0.078394,0.183902,0.634140,0.394940,0.263077,0.628851,0.475251,0.976184,-0.070537,0.205157,0.629120,0.402010,0.265750,0.650972,0.468518,0.978860,-0.058597,0.195956,0.633890,0.409690,0.268590,0.641650,0.451575,0.979913,-0.066528,0.188004,0.640090,0.404410,-0.265279,0.615710,0.459369,-0.981921,-0.071476,0.175277,0.365860,0.394940,-0.263184,0.628875,0.475228,-0.981800,-0.065043,0.178435,0.370870,0.402010,-0.268158,0.641630,0.451423,-0.982679,-0.060398,0.175197,0.359900,0.404410,-0.265501,0.650974,0.468448,-0.982795,-0.053837,0.176681,0.366100,0.409690,0.270014,0.669140,0.452654,0.981225,-0.048628,0.186633,0.640840,0.415070,0.266824,0.674451,0.470067,0.978545,-0.047495,0.200485,0.634070,0.418660,0.266833,0.699129,0.477966,0.976649,-0.007678,0.214704,0.631600,0.428490,0.269283,0.698174,0.460601,0.981903,-0.007268,0.189244,0.638590,0.426690,-0.269465,0.669160,0.452522,-0.982624,-0.048795,0.179081,0.359150,0.415070,-0.267086,0.674483,0.470074,-0.979855,-0.039394,0.195786,0.365920,0.418660,-0.269330,0.698195,0.460590,-0.980906,-0.010448,0.194201,0.361400,0.426690,-0.265822,0.699118,0.477781,-0.976032,-0.000484,0.217627,0.368390,0.428490,0.266761,0.728840,0.472057,0.974326,0.040988,0.221378,0.635610,0.439160,0.263050,0.724694,0.488713,0.967298,0.053598,0.247915,0.628460,0.438840,0.256765,0.749722,0.504315,0.945944,0.103458,0.307386,0.623220,0.449320,0.260564,0.758530,0.488827,0.952991,0.085140,0.290792,0.630010,0.451620,-0.266400,0.728846,0.471922,-0.971853,0.032443,0.233342,0.364380,0.439160,-0.262718,0.724715,0.488610,-0.965936,0.045127,0.254817,0.371530,0.438840,-0.260430,0.758569,0.488771,-0.950955,0.073461,0.300481,0.369980,0.451620,-0.256150,0.749769,0.504128,-0.946843,0.100846,0.305481,0.376770,0.449320,0.248576,0.783575,0.514329,0.938959,0.095725,0.330443,0.619950,0.462980,0.244605,0.771757,0.527380,0.940450,0.117467,0.318991,0.614490,0.459400,0.233202,0.787582,0.558665,0.948828,0.107795,0.296826,0.602840,0.466980,0.235261,0.800990,0.548044,0.944689,0.092980,0.314511,0.606850,0.471340,-0.248388,0.783580,0.514261,-0.939147,0.087634,0.332150,0.380040,0.462980,-0.244463,0.771767,0.527323,-0.944471,0.115627,0.307580,0.385500,0.459400,-0.235190,0.800979,0.548038,-0.946211,0.098211,0.308286,0.393140,0.471340,-0.233732,0.787642,0.558821,-0.950891,0.111610,0.288704,0.397150,0.466980,0.222895,0.809945,0.583953,0.922651,0.134661,0.361360,0.592450,0.475150,0.221902,0.795395,0.593149,0.916149,0.137462,0.376530,0.589140,0.470170,0.206082,0.798173,0.622267,0.819297,0.171391,0.547154,0.576570,0.471170,0.207932,0.814383,0.614819,0.831745,0.197495,0.518840,0.579340,0.476620,-0.223014,0.809957,0.583979,-0.924379,0.143307,0.353534,0.407540,0.475150,-0.222689,0.795432,0.593379,-0.917142,0.130843,0.376471,0.410850,0.470170,-0.208609,0.814432,0.615008,-0.833349,0.199433,0.515516,0.420650,0.476620,-0.206549,0.798195,0.622383,-0.821173,0.154941,0.549243,0.423420,0.471170,0.189250,0.817286,0.637271,0.697553,0.242587,0.674220,0.569280,0.478170,0.188497,0.799862,0.642783,0.689061,0.183353,0.701126,0.567510,0.472360,0.168671,0.800972,0.658552,0.561255,0.183189,0.807115,0.558960,0.473470,0.168233,0.819199,0.654938,0.565393,0.250693,0.785801,0.559710,0.479470,-0.189960,0.817358,0.637462,-0.695622,0.242724,0.676162,0.430710,0.478170,-0.188872,0.799889,0.642887,-0.689214,0.170035,0.704324,0.432480,0.472360,-0.168601,0.819240,0.655038,-0.561908,0.251348,0.788089,0.440280,0.479470,-0.169080,0.801017,0.658666,-0.560655,0.178174,0.808653,0.441030,0.473470,0.141248,0.818006,0.671233,0.431124,0.238294,0.870257,0.548750,0.479750,0.142415,0.799537,0.673975,0.436405,0.187456,0.880006,0.548530,0.473830,0.110541,0.794029,0.688455,0.314381,0.193860,0.929292,0.536850,0.472810,0.108971,0.812803,0.685171,0.298566,0.235516,0.924873,0.536880,0.478740,-0.141517,0.818023,0.671300,-0.429408,0.239100,0.870885,0.451240,0.479750,-0.142628,0.799562,0.674033,-0.435503,0.187870,0.880365,0.451460,0.473830,-0.109157,0.812825,0.685220,-0.296865,0.236497,0.925171,0.463110,0.478740,-0.110899,0.794075,0.688550,-0.312444,0.193571,0.930005,0.463140,0.472810,0.042632,0.774337,0.705883,0.042044,0.190318,0.980822,0.513280,0.466280,0.075377,0.784423,0.700476,0.181513,0.192108,0.964442,0.524390,0.469770,0.042495,0.795791,0.700741,0.042975,0.229379,0.972388,0.513160,0.473170,0.074046,0.804175,0.695517,0.164708,0.241010,0.956444,0.524310,0.476140,-0.042847,0.774357,0.705922,-0.042531,0.189698,0.980921,0.486710,0.466280,-0.075419,0.784429,0.700479,-0.181164,0.191008,0.964726,0.475600,0.469770,-0.074062,0.804178,0.695505,-0.163870,0.241573,0.956446,0.475680,0.476140,-0.042761,0.795818,0.700793,-0.043254,0.229629,0.972317,0.486830,0.473170,0.018941,0.791033,0.701416,-0.019576,0.207474,0.978045,0.505680,0.471380,0.018540,0.768785,0.706062,-0.037007,0.185379,0.981970,0.505770,0.464370,-0.000010,0.767265,0.705747,0.000285,0.178587,0.983924,0.500000,0.463830,-0.000025,0.789620,0.701130,0.000231,0.198327,0.980136,0.500000,0.470820,-0.019000,0.791035,0.701421,0.020458,0.207409,0.978040,0.494310,0.471380,-0.018560,0.768785,0.706059,0.037621,0.185266,0.981968,0.494230,0.464370,0.081108,0.475457,0.690954,0.438028,0.069914,0.896238,0.522350,0.364480,0.076077,0.483943,0.692691,0.358864,-0.020566,0.933163,0.521560,0.367410,0.066723,0.473478,0.698383,0.416570,0.207708,0.885057,0.518390,0.364650,0.061920,0.480362,0.698453,0.381978,0.155995,0.910911,0.517970,0.367040,-0.081118,0.475430,0.690928,-0.433613,0.057195,0.899282,0.477640,0.364480,-0.076078,0.483943,0.692685,-0.357453,-0.026516,0.933555,0.478430,0.367410,-0.061899,0.480351,0.698409,-0.379423,0.140217,0.914537,0.482020,0.367040,-0.066607,0.473426,0.698155,-0.413028,0.186896,0.891335,0.481600,0.364650,0.052449,0.471635,0.705450,0.403265,0.261445,0.876940,0.514520,0.364860,0.049068,0.477522,0.705210,0.400605,0.252517,0.880767,0.514350,0.366780,0.041327,0.470050,0.711045,0.372124,0.242223,0.896020,0.511210,0.364970,0.039190,0.475112,0.710478,0.388757,0.244963,0.888178,0.511180,0.366520,-0.052319,0.471576,0.705167,-0.400057,0.243849,0.883455,0.485470,0.364860,-0.048964,0.477504,0.705006,-0.398085,0.229233,0.888246,0.485640,0.366780,-0.039069,0.475025,0.710146,-0.389685,0.215698,0.895332,0.488810,0.366520,-0.041114,0.469971,0.710572,-0.365829,0.225837,0.902866,0.488780,0.364970,0.032325,0.473096,0.713742,0.291533,0.162587,0.942642,0.508960,0.366130,0.033618,0.468627,0.714256,0.246647,0.176724,0.952856,0.508920,0.364830,0.027178,0.467607,0.715296,0.078108,0.082861,0.993495,0.507170,0.364670,0.026361,0.471713,0.715083,0.147020,0.036898,0.988445,0.507230,0.365790,-0.032172,0.473033,0.713380,-0.305702,0.132743,0.942829,0.491030,0.366130,-0.026252,0.471664,0.714814,-0.167354,0.012498,0.985818,0.492760,0.365790,-0.027015,0.467544,0.714915,-0.101986,0.067594,0.992487,0.492820,0.364670,-0.033351,0.468566,0.713733,-0.257211,0.156887,0.953535,0.491070,0.364830,0.020169,0.470766,0.715566,0.027750,-0.095399,0.995052,0.505480,0.365660,0.020589,0.466808,0.715362,-0.048171,-0.012632,0.998759,0.505400,0.364710,0.013625,0.470062,0.715213,-0.052136,-0.221975,0.973657,0.503660,0.365590,0.013802,0.466216,0.714495,-0.125550,-0.106527,0.986351,0.503570,0.364760,-0.020060,0.470756,0.715374,-0.045714,-0.111104,0.992757,0.494510,0.365660,-0.013570,0.470064,0.715146,0.038660,-0.226511,0.973241,0.496330,0.365590,-0.020449,0.466796,0.715105,0.025429,-0.018802,0.999500,0.494590,0.364710,-0.013748,0.466204,0.714435,0.108819,-0.106780,0.988310,0.496420,0.364760,0.006951,0.469634,0.714599,-0.064975,-0.322994,0.944168,0.501790,0.365410,0.006977,0.465882,0.713429,-0.123375,-0.192758,0.973459,0.501730,0.364650,0.000038,0.469429,0.714080,-0.000346,-0.365485,0.930817,0.500000,0.365290,0.000021,0.465748,0.712611,0.000124,-0.232815,0.972521,0.500000,0.364550,-0.006923,0.469642,0.714582,0.060940,-0.322269,0.944685,0.498200,0.365410,-0.006920,0.465876,0.713447,0.119009,-0.191624,0.974226,0.498260,0.364650,0.000047,0.461921,0.712068,0.000287,-0.028501,0.999594,0.500000,0.363760,0.007047,0.457158,0.713322,-0.186003,0.162170,0.969074,0.501610,0.362630,0.007039,0.461940,0.712973,-0.167288,-0.005238,0.985894,0.501650,0.363860,0.000057,0.457105,0.712408,0.000075,0.158773,0.987315,0.500000,0.362530,0.013955,0.462195,0.714485,-0.181227,0.050543,0.982142,0.503450,0.363970,0.014115,0.457345,0.715159,-0.220700,0.189480,0.956760,0.503360,0.362750,-0.006921,0.457141,0.713347,0.177699,0.162030,0.970654,0.498380,0.362630,-0.006978,0.461941,0.712963,0.160685,-0.006996,0.986981,0.498340,0.363860,-0.013953,0.457401,0.714958,0.206962,0.190485,0.959626,0.496630,0.362750,-0.013890,0.462172,0.714418,0.164665,0.047629,0.985199,0.496540,0.363970,0.141864,0.471195,0.662386,0.674487,-0.227152,0.702474,0.540170,0.364010,0.154282,0.478962,0.650025,0.825990,-0.168176,0.538012,0.545740,0.365810,0.164920,0.484051,0.629934,0.881995,-0.175124,0.437512,0.552930,0.366610,0.157003,0.463961,0.640455,0.859715,-0.182051,0.477230,0.547090,0.360670,0.166280,0.468967,0.620308,0.895743,-0.184295,0.404573,0.554020,0.361380,0.146245,0.455888,0.653120,0.727628,-0.237639,0.643494,0.541900,0.358770,0.178908,0.470089,0.594152,0.870240,-0.238354,0.431127,0.563410,0.359360,0.193095,0.488511,0.577755,0.839805,-0.283865,0.462762,0.571950,0.363060,0.177785,0.485641,0.605023,0.863793,-0.234051,0.446186,0.561800,0.365030,0.194368,0.472704,0.566020,0.848093,-0.279987,0.449828,0.574100,0.357070,-0.141882,0.471188,0.662392,-0.674706,-0.227094,0.702282,0.459820,0.364010,-0.154310,0.478961,0.650033,-0.826021,-0.168209,0.537954,0.454250,0.365810,-0.157017,0.463960,0.640458,-0.859756,-0.182080,0.477145,0.452900,0.360670,-0.146252,0.455886,0.653118,-0.729006,-0.235079,0.642875,0.458090,0.358770,-0.164927,0.484051,0.629936,-0.881757,-0.175366,0.437894,0.447060,0.366610,-0.166306,0.468961,0.620321,-0.895563,-0.184914,0.404689,0.445970,0.361380,-0.178942,0.470089,0.594160,-0.869954,-0.239387,0.431132,0.436580,0.359360,-0.193138,0.488511,0.577765,-0.838801,-0.287058,0.462613,0.428040,0.363060,-0.194399,0.472703,0.566028,-0.847855,-0.281398,0.449397,0.425890,0.357070,-0.177840,0.485642,0.605036,-0.863286,-0.235157,0.446585,0.438190,0.365030,0.106295,0.453748,0.673299,0.557458,-0.174318,0.811698,0.529590,0.357620,0.116926,0.462535,0.672855,0.236882,-0.382977,0.892870,0.533520,0.361310,0.106098,0.465657,0.675818,0.381341,-0.252313,0.889335,0.530050,0.361260,0.119157,0.445656,0.663802,0.362416,-0.371069,0.854964,0.534450,0.355430,0.094852,0.457178,0.683383,0.616605,0.004054,0.787262,0.525470,0.359050,0.095780,0.467502,0.682651,0.536061,-0.048201,0.842802,0.526260,0.361710,0.129409,0.464418,0.669680,0.430548,-0.335002,0.838094,0.536510,0.362360,0.134000,0.448504,0.660928,0.461066,-0.350469,0.815224,0.538210,0.356980,-0.116929,0.462535,0.672853,-0.236034,-0.383340,0.892938,0.466470,0.361310,-0.106314,0.453737,0.673286,-0.555369,-0.172736,0.813466,0.470400,0.357620,-0.106092,0.465654,0.675805,-0.377904,-0.254394,0.890209,0.469940,0.361260,-0.119191,0.445647,0.663784,-0.359850,-0.370472,0.856305,0.465540,0.355430,-0.095740,0.467495,0.682579,-0.531978,-0.055045,0.844967,0.473730,0.361710,-0.094776,0.457175,0.683258,-0.611688,0.006385,0.791073,0.474520,0.359050,-0.129457,0.464401,0.669690,-0.430290,-0.335057,0.838205,0.463480,0.362360,-0.134029,0.448495,0.660927,-0.461357,-0.347319,0.816407,0.461780,0.356980,0.000049,0.450296,0.714173,-0.000617,0.303122,0.952952,0.500000,0.360290,0.007226,0.442361,0.718076,-0.171184,0.395378,0.902426,0.501620,0.357790,0.007149,0.450662,0.714924,-0.183590,0.292765,0.938394,0.501610,0.360400,0.000070,0.441660,0.717600,-0.000836,0.411422,0.911445,0.500000,0.357650,0.014149,0.451325,0.716707,-0.240966,0.286972,0.927137,0.503310,0.360560,0.014250,0.443770,0.719363,-0.235361,0.368458,0.899357,0.503280,0.358040,-0.007170,0.442358,0.718081,0.169407,0.396736,0.902165,0.498370,0.357790,-0.007059,0.450677,0.714893,0.178301,0.294140,0.938984,0.498380,0.360400,-0.014136,0.443782,0.719333,0.231040,0.372371,0.898866,0.496710,0.358040,-0.014062,0.451341,0.716632,0.232177,0.294009,0.927175,0.496680,0.360560,0.021067,0.458051,0.716434,-0.141475,0.235343,0.961561,0.505220,0.362700,0.020872,0.462745,0.715459,-0.099909,0.109583,0.988944,0.505320,0.363900,0.027752,0.463655,0.715712,0.036268,0.159501,0.986531,0.507160,0.363750,0.028149,0.459035,0.716782,0.012734,0.263720,0.964515,0.507060,0.362520,0.020971,0.445264,0.720621,-0.165192,0.345755,0.923669,0.504890,0.358250,0.021051,0.452223,0.718199,-0.173230,0.306317,0.936035,0.505040,0.360610,0.028289,0.453094,0.718818,0.010384,0.315779,0.948776,0.506780,0.360530,0.028077,0.446331,0.721285,0.039312,0.312598,0.949072,0.506510,0.358320,-0.020951,0.457991,0.716241,0.119829,0.238311,0.963768,0.494770,0.362700,-0.020763,0.462702,0.715215,0.077061,0.109878,0.990953,0.494670,0.363900,-0.027967,0.458960,0.716345,-0.035480,0.268513,0.962622,0.492930,0.362520,-0.027571,0.463585,0.715288,-0.061602,0.159487,0.985276,0.492830,0.363750,-0.020907,0.445266,0.720577,0.155001,0.356908,0.921190,0.495100,0.358250,-0.020908,0.452218,0.718008,0.154921,0.319155,0.934954,0.494950,0.360610,-0.027947,0.446323,0.721145,-0.046835,0.333032,0.941751,0.493480,0.358320,-0.028062,0.453061,0.718337,-0.025060,0.334490,0.942066,0.493210,0.360530,0.035637,0.459913,0.715692,0.218612,0.268026,0.938281,0.508930,0.362300,0.043095,0.465475,0.711477,0.363094,0.250256,0.897516,0.511290,0.363610,0.034756,0.464624,0.714735,0.225574,0.210600,0.951191,0.508970,0.363690,0.044493,0.460275,0.712558,0.366965,0.255202,0.894544,0.511270,0.362020,0.054653,0.466563,0.706078,0.408806,0.255793,0.876041,0.514550,0.363370,0.068925,0.467434,0.698852,0.453306,0.206175,0.867183,0.518370,0.362950,0.056178,0.460460,0.707117,0.426409,0.224886,0.876129,0.514420,0.361650,0.069726,0.460264,0.700416,0.484246,0.176136,0.857019,0.518010,0.361070,-0.042929,0.465403,0.711073,-0.353286,0.246095,0.902566,0.488710,0.363610,-0.035418,0.459801,0.715139,-0.216525,0.275186,0.936691,0.491060,0.362300,-0.034549,0.464476,0.714125,-0.228902,0.208463,0.950867,0.491020,0.363690,-0.044413,0.460120,0.712132,-0.359644,0.260725,0.895923,0.488730,0.362020,-0.054537,0.466439,0.705727,-0.408977,0.243001,0.879595,0.485440,0.363370,-0.055926,0.460381,0.706653,-0.427866,0.227034,0.874863,0.485570,0.361650,-0.068732,0.467346,0.698486,-0.447947,0.187957,0.874080,0.481620,0.362950,-0.069474,0.460157,0.699958,-0.477838,0.177644,0.860299,0.481980,0.361070,0.158553,0.445395,0.628956,0.881831,-0.200186,0.426966,0.548670,0.354130,0.167293,0.450512,0.608833,0.903212,-0.202587,0.378373,0.555410,0.354710,0.159037,0.426200,0.618332,0.895238,-0.208627,0.393732,0.549990,0.347370,0.167237,0.430551,0.597048,0.909278,-0.214428,0.356699,0.556740,0.347440,0.149776,0.420871,0.633184,0.805259,-0.254650,0.535454,0.545140,0.346060,0.148599,0.438012,0.642381,0.778085,-0.246363,0.577832,0.543770,0.352300,0.179461,0.431054,0.569669,0.877200,-0.256164,0.406080,0.566070,0.344340,0.194947,0.454319,0.553014,0.853836,-0.283774,0.436389,0.575820,0.349540,0.179737,0.451324,0.582003,0.874085,-0.249558,0.416768,0.564910,0.352160,0.194860,0.434441,0.540158,0.860547,-0.280064,0.425468,0.577010,0.341450,-0.158575,0.445394,0.628951,-0.882051,-0.198372,0.427358,0.451320,0.354130,-0.167291,0.450514,0.608828,-0.903503,-0.201054,0.378496,0.444580,0.354710,-0.148638,0.438000,0.642396,-0.780635,-0.243218,0.575720,0.456220,0.352300,-0.149872,0.420846,0.633208,-0.806746,-0.254088,0.533479,0.454850,0.346060,-0.159104,0.426184,0.618337,-0.895408,-0.207321,0.394034,0.450000,0.347370,-0.167360,0.430515,0.597112,-0.909790,-0.212973,0.356264,0.443250,0.347440,-0.179474,0.431050,0.569675,-0.877888,-0.255247,0.405169,0.433920,0.344340,-0.194950,0.454319,0.553015,-0.853832,-0.284204,0.436119,0.424170,0.349540,-0.194860,0.434441,0.540158,-0.860604,-0.280057,0.425356,0.422980,0.341450,-0.179743,0.451323,0.582005,-0.874436,-0.249064,0.416329,0.435090,0.352160,0.083161,0.467542,0.690923,0.510219,0.097076,0.854548,0.522330,0.362330,0.082365,0.458921,0.692357,0.555941,0.107124,0.824290,0.521670,0.360190,-0.083122,0.467502,0.690816,-0.502189,0.083403,0.860727,0.477660,0.362330,-0.082239,0.458880,0.692140,-0.546588,0.108376,0.830359,0.478320,0.360190,0.000068,0.433349,0.721925,-0.002411,0.424035,0.905643,0.500000,0.355230,0.008071,0.426477,0.725773,-0.100987,0.218440,0.970611,0.501730,0.353540,0.007586,0.434106,0.722364,-0.149396,0.411307,0.899170,0.501670,0.355430,0.000025,0.425559,0.725119,-0.004804,0.227768,0.973704,0.500000,0.353270,0.014669,0.435947,0.723144,-0.186363,0.374658,0.908240,0.503340,0.355810,0.015455,0.428611,0.725971,-0.091373,0.200196,0.975486,0.503390,0.354030,-0.007881,0.426555,0.725606,0.098318,0.221354,0.970225,0.498260,0.353540,-0.007486,0.434107,0.722352,0.147501,0.407934,0.901018,0.498320,0.355430,-0.015397,0.428635,0.725916,0.090656,0.200645,0.975460,0.496610,0.354030,-0.014565,0.435950,0.723134,0.183286,0.371962,0.909973,0.496650,0.355810,0.022464,0.430608,0.725952,0.017444,0.166092,0.985956,0.504930,0.354440,0.021574,0.437881,0.723801,-0.090923,0.325146,0.941283,0.504910,0.356170,0.028402,0.439120,0.723282,0.108191,0.265314,0.958073,0.506480,0.356350,0.029103,0.431983,0.724959,0.190886,0.122501,0.973938,0.506480,0.354640,0.035759,0.446421,0.719718,0.267152,0.263072,0.927051,0.508340,0.358110,0.036056,0.439132,0.721724,0.301710,0.205920,0.930896,0.508200,0.356170,0.045352,0.445361,0.716334,0.399308,0.223371,0.889189,0.510670,0.357520,0.045192,0.437986,0.717914,0.412525,0.159121,0.896941,0.510390,0.355570,0.036154,0.432115,0.722688,0.336677,0.076610,0.938499,0.508120,0.354470,0.044966,0.431138,0.719075,0.420404,0.013886,0.907231,0.510170,0.353910,-0.022315,0.430661,0.725820,-0.019974,0.166656,0.985813,0.495060,0.354440,-0.021506,0.437909,0.723730,0.086082,0.323757,0.942216,0.495080,0.356170,-0.028985,0.432027,0.724851,-0.190485,0.120838,0.974225,0.493510,0.354640,-0.028354,0.439142,0.723217,-0.111483,0.267588,0.957062,0.493520,0.356350,-0.035674,0.446394,0.719537,-0.264480,0.285036,0.921306,0.491650,0.358110,-0.035946,0.439180,0.721583,-0.302096,0.211518,0.929515,0.491790,0.356170,-0.036100,0.432140,0.722622,-0.336345,0.071982,0.938984,0.491870,0.354470,-0.045139,0.438009,0.717831,-0.411293,0.165192,0.896409,0.489600,0.355570,-0.044919,0.431173,0.718955,-0.417632,0.010479,0.908556,0.489820,0.353910,-0.045300,0.445340,0.716195,-0.396904,0.239922,0.885949,0.489320,0.357520,0.057095,0.443137,0.710929,0.468425,0.199404,0.860707,0.513670,0.356440,0.056685,0.435277,0.712787,0.468449,0.119478,0.875374,0.513310,0.354460,0.068576,0.440444,0.704602,0.518247,0.176071,0.836910,0.516750,0.355290,0.067939,0.432161,0.706814,0.517685,0.085515,0.851287,0.516260,0.353260,0.055507,0.428574,0.713750,0.452884,-0.061594,0.889439,0.512960,0.352920,0.066213,0.425413,0.707764,0.483337,-0.123800,0.866637,0.515820,0.351800,-0.057049,0.443110,0.710741,-0.466839,0.211764,0.858614,0.486320,0.356440,-0.056668,0.435305,0.712655,-0.467820,0.126366,0.874744,0.486680,0.354460,-0.055534,0.428571,0.713710,-0.449666,-0.061860,0.891052,0.487030,0.352920,-0.067910,0.432183,0.706689,-0.515109,0.091082,0.852272,0.483730,0.353260,-0.066257,0.425403,0.707731,-0.481440,-0.121204,0.868058,0.484170,0.351800,-0.068705,0.440329,0.704529,-0.514860,0.186568,0.836727,0.483240,0.355290,0.091545,0.445859,0.686924,0.663317,0.058646,0.746037,0.523820,0.356260,0.080475,0.448289,0.695327,0.576577,0.128257,0.806914,0.520510,0.357350,0.088341,0.435786,0.690954,0.680699,0.065810,0.729601,0.522070,0.353690,0.078733,0.438127,0.698529,0.587475,0.134232,0.798032,0.519330,0.354550,0.069221,0.450435,0.702252,0.505290,0.165190,0.846991,0.517410,0.358190,0.077314,0.429890,0.700890,0.590444,0.040169,0.806079,0.518550,0.352450,0.085768,0.427690,0.693828,0.679515,-0.033939,0.732876,0.520900,0.351610,0.083327,0.420885,0.695180,0.643097,-0.251009,0.723478,0.520170,0.349960,0.075328,0.422906,0.701942,0.554631,-0.178524,0.812720,0.518010,0.350880,-0.091573,0.445829,0.686886,-0.659452,0.066336,0.748815,0.476170,0.356260,-0.080450,0.448250,0.695136,-0.569885,0.142937,0.809197,0.479480,0.357350,-0.069125,0.450303,0.701947,-0.500732,0.185476,0.845498,0.482590,0.358190,-0.078757,0.438118,0.698429,-0.584585,0.142278,0.798760,0.480660,0.354550,-0.088447,0.435725,0.690905,-0.679176,0.067948,0.730823,0.477920,0.353690,-0.085795,0.427694,0.693773,-0.679628,-0.033325,0.732800,0.479090,0.351610,-0.077391,0.429862,0.700861,-0.589334,0.042128,0.806790,0.481440,0.352450,-0.075396,0.422890,0.701892,-0.554819,-0.178639,0.812567,0.481980,0.350880,-0.083368,0.420880,0.695117,-0.642530,-0.255319,0.722473,0.479820,0.349960,0.111624,0.435061,0.663607,0.643218,-0.263154,0.719041,0.531670,0.351950,0.102373,0.442079,0.675502,0.707130,-0.078915,0.702666,0.527770,0.354550,0.105514,0.426746,0.668877,0.797113,-0.194025,0.571809,0.529220,0.349850,0.098247,0.432244,0.680835,0.769650,-0.047790,0.636676,0.525630,0.352090,0.101079,0.420557,0.673637,0.795774,-0.283360,0.535210,0.527260,0.348420,0.094570,0.424749,0.684437,0.761478,-0.150939,0.630372,0.524020,0.350210,0.097179,0.416061,0.676253,0.721178,-0.454474,0.522834,0.525860,0.347360,0.091236,0.418891,0.686223,0.706768,-0.350659,0.614424,0.522940,0.348770,-0.102467,0.442039,0.675481,-0.707037,-0.079057,0.702744,0.472220,0.354550,-0.111628,0.435066,0.663550,-0.640429,-0.266284,0.720377,0.468320,0.351950,-0.098284,0.432229,0.680772,-0.770655,-0.052414,0.635093,0.474360,0.352090,-0.105486,0.426764,0.668796,-0.795924,-0.198454,0.571945,0.470770,0.349850,-0.101031,0.420586,0.673505,-0.799259,-0.280232,0.531653,0.472730,0.348420,-0.094609,0.424745,0.684400,-0.763909,-0.148830,0.627927,0.475970,0.350210,-0.091345,0.418868,0.686181,-0.704822,-0.356865,0.613084,0.477050,0.348770,-0.097247,0.416045,0.676228,-0.722883,-0.455401,0.519663,0.474130,0.347360,0.119445,0.414627,0.646596,0.308675,-0.469046,0.827476,0.536580,0.344550,0.126360,0.428347,0.653268,0.257688,-0.438643,0.860924,0.537500,0.349600,0.117099,0.424635,0.653796,0.491424,-0.409685,0.768545,0.534670,0.348290,0.129088,0.414767,0.646538,0.160086,-0.432262,0.887424,0.539320,0.344780,0.110187,0.419735,0.658615,0.743787,-0.331452,0.580449,0.532070,0.347170,0.112421,0.412602,0.651118,0.621940,-0.460826,0.633112,0.534010,0.344480,0.106931,0.410486,0.656412,0.666171,-0.525636,0.529076,0.532010,0.344410,0.104972,0.415600,0.664010,0.761555,-0.400363,0.509650,0.530010,0.346440,0.102568,0.408951,0.660418,0.598523,-0.634021,0.489680,0.530460,0.344130,0.100787,0.412580,0.667349,0.685712,-0.541285,0.486632,0.528490,0.345800,-0.126505,0.428299,0.653312,-0.253352,-0.438790,0.862134,0.462490,0.349600,-0.119591,0.414577,0.646628,-0.305179,-0.469340,0.828605,0.463410,0.344550,-0.117168,0.424620,0.653798,-0.484019,-0.410457,0.772820,0.465320,0.348290,-0.129209,0.414730,0.646566,-0.158429,-0.434134,0.886808,0.460670,0.344780,-0.110177,0.419759,0.658526,-0.739834,-0.330372,0.586089,0.467920,0.347170,-0.112471,0.412593,0.651070,-0.622668,-0.454426,0.637010,0.465980,0.344480,-0.106996,0.410470,0.656388,-0.667588,-0.516008,0.536714,0.467980,0.344410,-0.104965,0.415619,0.663919,-0.763403,-0.392623,0.512896,0.469980,0.346440,-0.100755,0.412615,0.667237,-0.692656,-0.529055,0.490234,0.471500,0.345800,-0.102669,0.408911,0.660400,-0.602732,-0.624593,0.496587,0.469540,0.344130,0.138310,0.431632,0.651579,0.502949,-0.353538,0.788703,0.540280,0.350870,0.140140,0.416577,0.643375,0.533795,-0.352144,0.768803,0.541870,0.345240,0.175840,0.691938,-0.131733,0.486951,-0.187684,-0.853026,0.887850,0.388760,0.184967,0.827070,-0.133984,0.588861,0.087976,-0.803432,0.887170,0.442390,0.210449,0.814778,-0.112423,0.721179,0.059890,-0.690155,0.875830,0.437990,0.199508,0.687989,-0.113900,0.645365,-0.165798,-0.745664,0.877530,0.387910,0.154143,0.694376,-0.141606,0.350250,-0.208225,-0.913218,0.896360,0.388980,0.161398,0.834096,-0.147630,0.466381,0.101670,-0.878722,0.896510,0.445060,0.131013,0.695887,-0.149010,0.280651,-0.229206,-0.932041,0.906290,0.388730,0.136234,0.838795,-0.159428,0.396853,0.098229,-0.912611,0.906930,0.447250,0.107084,0.697191,-0.155398,0.222763,-0.250775,-0.942066,0.916680,0.388430,0.110643,0.843294,-0.169964,0.345745,0.089486,-0.934052,0.917460,0.449690,-0.175839,0.691938,-0.131733,-0.486951,-0.187684,-0.853026,0.112140,0.388760,-0.210449,0.814778,-0.112423,-0.721178,0.059889,-0.690156,0.124160,0.437990,-0.184967,0.827070,-0.133984,-0.588861,0.087976,-0.803432,0.112820,0.442390,-0.199508,0.687989,-0.113900,-0.645365,-0.165798,-0.745664,0.122460,0.387910,-0.154143,0.694376,-0.141606,-0.350249,-0.208225,-0.913219,0.103630,0.388980,-0.161398,0.834096,-0.147630,-0.466381,0.101670,-0.878722,0.103480,0.445060,-0.131013,0.695887,-0.149010,-0.280650,-0.229206,-0.932041,0.093710,0.388730,-0.136234,0.838795,-0.159428,-0.396853,0.098229,-0.912611,0.093060,0.447250,-0.107084,0.697191,-0.155398,-0.222763,-0.250775,-0.942066,0.083310,0.388430,-0.110643,0.843294,-0.169964,-0.345745,0.089486,-0.934052,0.082530,0.449690,-0.138577,0.431539,0.651693,-0.504509,-0.352417,0.788208,0.459710,0.350870,-0.140209,0.416557,0.643365,-0.535675,-0.353827,0.766719,0.458120,0.345240,0.058747,0.699340,-0.162075,0.046523,-0.293136,-0.954938,0.936980,0.387810,0.031364,0.854535,-0.186929,0.053570,0.066398,-0.996354,0.948990,0.458420,0.060513,0.853134,-0.184029,0.149183,0.075989,-0.985886,0.936950,0.456400,0.030516,0.698186,-0.161390,0.000786,-0.309152,-0.951012,0.949560,0.385590,0.0,0.854467,-0.187706,0.000000,0.061146,-0.998129,0.962590,0.460050,0.0,0.697156,-0.160539,-0.000000,-0.315494,-0.948928,0.963570,0.383530,-0.058747,0.699340,-0.162075,-0.046523,-0.293136,-0.954938,0.063010,0.387810,-0.031364,0.854535,-0.186929,-0.053570,0.066398,-0.996354,0.051000,0.458420,-0.030516,0.698186,-0.161390,-0.000786,-0.309152,-0.951012,0.050430,0.385590,-0.060513,0.853134,-0.184029,-0.149183,0.075989,-0.985885,0.063040,0.456400,0.0,0.854467,-0.187706,0.000000,0.061146,-0.998129,0.037400,0.460050,0.0,0.697156,-0.160539,-0.000000,-0.315494,-0.948928,0.036420,0.383530,0.083578,0.698709,-0.160066,0.137038,-0.272580,-0.952324,0.926480,0.388450,0.086152,0.848730,-0.178337,0.264544,0.082693,-0.960822,0.927030,0.453110,-0.083578,0.698709,-0.160066,-0.137038,-0.272579,-0.952324,0.073510,0.388450,-0.086152,0.848730,-0.178337,-0.264544,0.082693,-0.960822,0.072960,0.453110,0.015052,0.424927,0.726287,0.021431,-0.163416,0.986324,0.503370,0.352710,0.007596,0.422859,0.725770,-0.018711,-0.168544,0.985516,0.501730,0.352220,0.014368,0.421406,0.724827,0.090243,-0.500758,0.860870,0.503340,0.351470,0.007319,0.419926,0.724560,0.043233,-0.520784,0.852593,0.501710,0.351050,0.000036,0.421996,0.725478,-0.002540,-0.157057,0.987586,0.500000,0.351930,0.000076,0.419126,0.724355,0.000154,-0.528805,0.848744,0.500000,0.350800,-0.014932,0.424970,0.726193,-0.022534,-0.154185,0.987785,0.496620,0.352710,-0.007543,0.422878,0.725730,0.017049,-0.153637,0.987980,0.498260,0.352220,-0.007236,0.419912,0.724589,-0.044742,-0.515475,0.855736,0.498280,0.351050,-0.014316,0.421418,0.724799,-0.095198,-0.493982,0.864245,0.496650,0.351470,0.028984,0.428211,0.725032,0.243922,-0.179472,0.953043,0.506370,0.353160,0.022002,0.426913,0.726123,0.118769,-0.162513,0.979532,0.504870,0.353040,0.028188,0.423055,0.723149,0.244779,-0.483566,0.840385,0.506270,0.351760,0.021367,0.422529,0.724612,0.162217,-0.483483,0.860192,0.504800,0.351720,-0.028849,0.428250,0.724926,-0.243375,-0.177277,0.953594,0.493620,0.353160,-0.021933,0.426943,0.726054,-0.120756,-0.159638,0.979762,0.495120,0.353040,-0.021254,0.422583,0.724492,-0.165106,-0.478361,0.862503,0.495190,0.351720,-0.028112,0.423092,0.723067,-0.243674,-0.476960,0.844471,0.493720,0.351760,0.014459,0.416821,0.721323,0.113174,-0.816011,0.566849,0.503310,0.350040,0.007490,0.416055,0.721232,0.063307,-0.831584,0.551779,0.501690,0.349770,0.013922,0.414642,0.714632,0.113642,-0.946205,0.302956,0.503197,0.348937,0.007171,0.413947,0.714782,0.076378,-0.973642,-0.214913,0.501615,0.348787,0.000007,0.415747,0.721122,-0.001009,-0.842560,0.538601,0.500000,0.349610,0.000012,0.413689,0.714376,-0.000724,-0.976847,-0.213939,0.500000,0.348710,-0.014397,0.416823,0.721317,-0.115851,-0.815340,0.567274,0.496680,0.350040,-0.007410,0.416067,0.721206,-0.064588,-0.833196,0.549193,0.498310,0.349770,-0.007103,0.413967,0.714738,-0.076692,-0.973391,-0.215935,0.498378,0.348787,-0.013854,0.414656,0.714600,-0.112993,-0.946920,0.300956,0.496800,0.348937,0.027420,0.418073,0.719771,0.190062,-0.800598,0.568261,0.506280,0.350260,0.021062,0.417570,0.720808,0.148641,-0.806334,0.572478,0.504810,0.350230,0.020271,0.415395,0.714487,0.123707,-0.943409,0.307694,0.504690,0.349082,0.026496,0.415887,0.713594,0.129504,-0.939818,0.316183,0.506175,0.349113,-0.027365,0.418091,0.719728,-0.188895,-0.798009,0.572277,0.493710,0.350260,-0.021008,0.417579,0.720783,-0.151291,-0.802910,0.576582,0.495190,0.350230,-0.020230,0.415409,0.714453,-0.124811,-0.943691,0.306380,0.495302,0.349082,-0.026430,0.415904,0.713555,-0.129274,-0.940084,0.315483,0.493815,0.349113,0.036315,0.428150,0.722689,0.340601,-0.212176,0.915955,0.508000,0.352980,0.044629,0.426821,0.718850,0.389090,-0.273386,0.879698,0.509980,0.352460,0.043121,0.421940,0.716670,0.318028,-0.556819,0.767340,0.509840,0.351080,0.035296,0.422820,0.720658,0.305328,-0.514993,0.800972,0.507890,0.351560,0.033876,0.418229,0.717301,0.214302,-0.809289,0.546924,0.507840,0.350050,0.041262,0.417670,0.713408,0.187776,-0.830374,0.524614,0.509730,0.349590,0.032893,0.416003,0.711379,0.123032,-0.939109,0.320839,0.507728,0.348925,0.040165,0.415589,0.707429,0.077731,-0.946639,0.312781,0.509625,0.348510,-0.036202,0.428208,0.722548,-0.339871,-0.210185,0.916684,0.491990,0.352980,-0.035251,0.422836,0.720613,-0.306090,-0.506343,0.806180,0.492100,0.351560,-0.043086,0.421958,0.716628,-0.320575,-0.550135,0.771092,0.490150,0.351080,-0.044537,0.426863,0.718739,-0.387388,-0.271361,0.881075,0.490010,0.352460,-0.033844,0.418237,0.717279,-0.213570,-0.808324,0.548634,0.492150,0.350050,-0.032850,0.416019,0.711341,-0.122306,-0.939256,0.320687,0.492262,0.348925,-0.041221,0.417690,0.713361,-0.189037,-0.830057,0.524661,0.490260,0.349590,-0.040146,0.415597,0.707405,-0.079124,-0.946415,0.313110,0.490365,0.348510,0.054331,0.424584,0.713404,0.392205,-0.340718,0.854451,0.512580,0.351580,0.064512,0.421646,0.707601,0.393010,-0.409316,0.823410,0.515260,0.350530,0.062482,0.418397,0.705991,0.276226,-0.672036,0.687072,0.514830,0.349310,0.052543,0.420412,0.711767,0.301119,-0.602553,0.739092,0.512270,0.350280,0.050395,0.416452,0.708584,0.158059,-0.856749,0.490916,0.512180,0.348880,0.060113,0.415161,0.702649,0.130107,-0.891630,0.433668,0.514750,0.348010,0.049278,0.414579,0.702520,0.047204,-0.956584,0.287608,0.512120,0.347875,0.059128,0.413559,0.696771,0.029444,-0.968179,0.248519,0.514742,0.347103,-0.054267,0.424617,0.713317,-0.387760,-0.344183,0.855091,0.487420,0.351580,-0.052507,0.420432,0.711714,-0.302338,-0.600563,0.740214,0.487720,0.350280,-0.062410,0.418439,0.705891,-0.273787,-0.676867,0.683295,0.485170,0.349310,-0.064541,0.421642,0.707558,-0.386669,-0.419951,0.821054,0.484730,0.350530,-0.050353,0.416474,0.708534,-0.159564,-0.856319,0.491180,0.487810,0.348880,-0.049223,0.414608,0.702456,-0.047774,-0.956593,0.287486,0.487870,0.347875,-0.060075,0.415181,0.702592,-0.133412,-0.890516,0.434951,0.485240,0.348010,-0.059095,0.413577,0.696715,-0.030924,-0.967890,0.249465,0.485247,0.347103,0.081054,0.416491,0.694793,0.509193,-0.571637,0.643392,0.519720,0.348600,0.073288,0.418741,0.701619,0.437606,-0.491075,0.753224,0.517500,0.349560,0.078982,0.413994,0.692868,0.319355,-0.808733,0.493926,0.519430,0.347370,0.071423,0.416066,0.700023,0.275879,-0.751774,0.598938,0.517120,0.348320,0.069153,0.413703,0.696929,0.101698,-0.925947,0.363702,0.516970,0.347110,0.076880,0.412193,0.690154,0.108414,-0.946316,0.304521,0.519190,0.346180,0.067887,0.412524,0.690899,-0.005361,-0.979085,0.203379,0.516955,0.346315,0.075602,0.411230,0.684248,-0.026467,-0.984242,0.174837,0.519108,0.345460,-0.073369,0.418726,0.701560,-0.431838,-0.501825,0.749458,0.482490,0.349560,-0.081110,0.416472,0.694675,-0.506987,-0.575599,0.641600,0.480270,0.348600,-0.079023,0.413990,0.692801,-0.318057,-0.806395,0.498566,0.480560,0.347370,-0.071351,0.416107,0.699900,-0.268319,-0.757490,0.595159,0.482870,0.348320,-0.069083,0.413744,0.696797,-0.101292,-0.925237,0.365619,0.483020,0.347110,-0.067864,0.412538,0.690818,0.005517,-0.979104,0.203283,0.483035,0.346315,-0.076924,0.412173,0.690095,-0.101939,-0.946180,0.307166,0.480800,0.346180,-0.075537,0.411276,0.684101,0.037461,-0.984612,0.170690,0.480890,0.345460,0.088379,0.414781,0.686078,0.556152,-0.630324,0.541652,0.522380,0.347570,0.093975,0.412721,0.676956,0.567632,-0.668071,0.481118,0.525100,0.346390,0.091084,0.410416,0.675871,0.391232,-0.817817,0.422035,0.524670,0.345370,0.085765,0.412284,0.684321,0.359958,-0.825813,0.434124,0.522060,0.346440,0.083599,0.410583,0.681974,0.118402,-0.950501,0.287279,0.521720,0.345250,0.088973,0.408802,0.674211,0.130207,-0.946939,0.293859,0.524270,0.344270,0.082517,0.409669,0.676476,-0.051792,-0.984031,0.170293,0.521563,0.344515,0.087952,0.408012,0.669095,-0.075363,-0.982484,0.170427,0.524060,0.343572,-0.088371,0.414781,0.685935,-0.556361,-0.630683,0.541018,0.477610,0.347570,-0.085879,0.412253,0.684279,-0.374466,-0.814900,0.442395,0.477930,0.346440,-0.091147,0.410406,0.675801,-0.405298,-0.807688,0.428222,0.475320,0.345370,-0.093978,0.412743,0.676821,-0.570032,-0.664316,0.483474,0.474890,0.346390,-0.083764,0.410511,0.681976,-0.119522,-0.949271,0.290858,0.478270,0.345250,-0.082644,0.409630,0.676463,0.062891,-0.984113,0.166032,0.478428,0.344515,-0.089139,0.408735,0.674186,-0.139200,-0.945512,0.294330,0.475730,0.344270,-0.088101,0.407959,0.669089,0.072569,-0.983210,0.167426,0.475932,0.343572,0.099176,0.408012,0.663231,0.495612,-0.735111,0.462581,0.529310,0.343490,0.097406,0.410320,0.669000,0.554242,-0.692334,0.462049,0.527530,0.344950,0.096880,0.407510,0.664850,0.417715,-0.793444,0.442673,0.528350,0.343230,0.094738,0.408685,0.668936,0.412957,-0.801389,0.432715,0.526950,0.344020,0.094951,0.404746,0.661304,0.324758,-0.817507,0.475620,0.528374,0.341808,0.093023,0.407398,0.667891,0.049806,-0.944882,0.323599,0.526580,0.343180,0.092101,0.406611,0.662936,-0.272855,-0.943907,0.185982,0.526400,0.342670,0.092651,0.406048,0.661036,-0.456027,-0.868195,0.195643,0.526868,0.342328,0.108373,0.389343,0.495725,-0.994368,0.012373,0.105260,0.526341,0.342503,0.104633,0.368121,0.492825,-0.711840,0.621037,0.328021,0.523990,0.343340,0.107945,0.370180,0.502461,-0.968705,0.229074,0.095579,0.526340,0.342500,0.104712,0.393923,0.473156,-0.897116,0.075322,0.435327,0.523991,0.343344,-0.099275,0.407977,0.663214,-0.492342,-0.735602,0.465285,0.470680,0.343490,-0.097500,0.410291,0.668969,-0.555929,-0.689572,0.464149,0.472460,0.344950,-0.094846,0.408655,0.668922,-0.413485,-0.802531,0.430086,0.473040,0.344020,-0.096852,0.407543,0.664723,-0.409747,-0.798333,0.441328,0.471640,0.343230,-0.092121,0.406610,0.662823,0.269364,-0.944926,0.185897,0.473590,0.342670,-0.095037,0.404709,0.661262,-0.338966,-0.805265,0.486467,0.471636,0.341756,-0.092671,0.406048,0.661036,0.458526,-0.866319,0.198102,0.473123,0.342328,-0.093048,0.407396,0.667807,-0.057360,-0.944891,0.322322,0.473410,0.343180,-0.104719,0.368095,0.492839,0.710454,0.622194,0.328832,0.476000,0.343340,-0.108454,0.389288,0.495734,0.994379,0.012394,0.105148,0.473649,0.342503,-0.108029,0.370151,0.502468,0.968777,0.228814,0.095480,0.473650,0.342500,-0.104798,0.393870,0.473178,0.896618,0.075628,0.436298,0.475999,0.343344,0.227146,0.682031,-0.083564,0.771077,-0.147192,-0.619495,0.861610,0.386670,0.266573,0.773381,-0.032317,0.912019,-0.011039,-0.410000,0.839910,0.423090,0.253161,0.673918,-0.042447,0.877840,-0.138623,-0.458455,0.843290,0.384890,0.239969,0.795613,-0.077586,0.824293,0.028689,-0.565436,0.859030,0.430750,0.098600,0.403943,0.656722,0.488927,-0.701648,0.518306,0.530060,0.341270,-0.150396,0.291574,0.498812,-0.710166,-0.655760,0.256208,0.439070,0.290030,-0.140079,0.277822,0.481511,-0.627880,-0.755712,0.186189,0.439730,0.281360,-0.126084,0.270352,0.493121,-0.599100,-0.777613,0.190782,0.446730,0.280410,-0.137121,0.282155,0.509653,-0.658954,-0.715984,0.230534,0.445580,0.288380,-0.239969,0.795613,-0.077586,-0.824293,0.028688,-0.565436,0.140970,0.430750,-0.227146,0.682031,-0.083564,-0.771077,-0.147192,-0.619495,0.138380,0.386670,-0.266573,0.773381,-0.032317,-0.912019,-0.011039,-0.409999,0.160080,0.423090,-0.253161,0.673918,-0.042447,-0.877840,-0.138624,-0.458455,0.156700,0.384890,0.290036,0.732068,0.066316,0.989223,-0.070856,-0.128133,0.802790,0.411510,0.279631,0.655402,0.051745,0.976328,-0.128753,-0.173798,0.806940,0.379610,0.270471,0.664243,0.004916,0.947819,-0.136016,-0.288340,0.824910,0.382010,0.282849,0.752422,0.017808,0.968120,-0.050939,-0.245253,0.821030,0.417090,-0.024181,0.356295,0.578594,0.059764,0.997956,-0.022637,0.495372,0.348602,-0.032253,0.376483,0.477380,0.068079,0.834917,0.546150,0.493850,0.348730,-0.032139,0.356526,0.578433,0.037524,0.999019,-0.023510,0.493886,0.348634,-0.024266,0.376011,0.476993,0.086221,0.837231,0.540009,0.495340,0.348700,-0.016285,0.355974,0.578677,0.060978,0.997898,-0.021928,0.496863,0.348472,-0.016338,0.375329,0.476825,0.080519,0.841384,0.534406,0.496840,0.348570,-0.012420,0.408141,0.719200,-0.032485,0.494754,0.868426,0.497210,0.347000,-0.017064,0.401360,0.719653,-0.156528,0.083341,0.984151,0.496290,0.345450,-0.011468,0.400692,0.720591,-0.109099,0.092771,0.989692,0.497530,0.345330,-0.018317,0.408818,0.718079,-0.079564,0.468458,0.879896,0.495850,0.347130,-0.023118,0.401998,0.718661,-0.227188,0.063135,0.971802,0.494920,0.345500,-0.024441,0.409496,0.717257,-0.168966,0.438297,0.882806,0.494420,0.347190,-0.029867,0.402272,0.716399,-0.368704,0.048083,0.928302,0.493230,0.345390,-0.031221,0.409677,0.715343,-0.358896,0.393783,0.846244,0.492770,0.347060,-0.037763,0.402163,0.712690,-0.440305,0.073438,0.894840,0.491190,0.345110,-0.038648,0.409416,0.710991,-0.447128,0.386383,0.806712,0.490760,0.346720,-0.032194,0.413879,0.710857,-0.305204,0.651702,0.694359,0.492417,0.348177,-0.039503,0.413528,0.706812,-0.399519,0.628070,0.667767,0.490490,0.347793,-0.025699,0.413755,0.712937,-0.112065,0.694096,0.711106,0.493993,0.348345,0.032197,0.356519,0.578438,-0.037581,0.999017,-0.023510,0.506104,0.348634,0.032311,0.376461,0.477369,-0.068166,0.835081,0.545888,0.506140,0.348730,0.024242,0.356287,0.578599,-0.059815,0.997953,-0.022635,0.504618,0.348602,0.024328,0.375989,0.476982,-0.086179,0.837397,0.539759,0.504650,0.348700,0.018372,0.408797,0.718127,0.079851,0.468792,0.879692,0.504140,0.347130,0.023183,0.401967,0.718735,0.227517,0.064106,0.971662,0.505070,0.345500,0.024471,0.409488,0.717278,0.169074,0.439029,0.882421,0.505570,0.347190,0.017098,0.401352,0.719677,0.155068,0.082923,0.984417,0.503700,0.345450,0.012477,0.408127,0.719235,0.031668,0.495607,0.867969,0.502780,0.347000,0.011540,0.400667,0.720652,0.109389,0.091466,0.989782,0.502460,0.345330,0.016349,0.355966,0.578681,-0.060731,0.997913,-0.021917,0.503136,0.348472,0.016402,0.375308,0.476815,-0.079921,0.841561,0.534217,0.503160,0.348570,0.029891,0.402264,0.716426,0.369227,0.049499,0.928020,0.506760,0.345390,0.031257,0.409662,0.715386,0.359399,0.393593,0.846119,0.507220,0.347060,0.025759,0.413741,0.712971,0.112326,0.693626,0.711523,0.505997,0.348345,0.032238,0.413861,0.710900,0.305077,0.651896,0.694233,0.507573,0.348177,0.038689,0.409394,0.711040,0.447176,0.385644,0.807039,0.509230,0.346720,0.039521,0.413520,0.706837,0.399405,0.628536,0.667397,0.509500,0.347793,0.037788,0.402155,0.712710,0.439380,0.076329,0.895052,0.508810,0.345110,-0.060219,0.356058,0.577001,-0.035055,0.998966,-0.028941,0.487913,0.347454,-0.070992,0.373897,0.481995,-0.014154,0.836217,0.548217,0.485250,0.346800,-0.070969,0.355658,0.576262,-0.038915,0.998704,-0.032810,0.485273,0.346721,-0.060313,0.375114,0.480430,-0.005743,0.834149,0.551509,0.487890,0.347540,-0.049903,0.356407,0.577631,-0.020902,0.999432,-0.026440,0.490422,0.348061,-0.050045,0.376043,0.479100,0.010456,0.833430,0.552526,0.490400,0.348150,-0.047041,0.401347,0.707903,-0.459616,0.104820,0.881910,0.488720,0.344650,-0.047936,0.408778,0.706471,-0.450636,0.412627,0.791623,0.488250,0.346170,-0.057305,0.400617,0.702454,-0.514079,0.131336,0.847628,0.486110,0.344150,-0.057925,0.408169,0.700850,-0.501298,0.425761,0.753278,0.485620,0.345540,0.071006,0.355648,0.576271,0.039152,0.998696,-0.032775,0.514717,0.346721,0.071028,0.373870,0.481976,0.014539,0.836445,0.547858,0.514740,0.346800,0.060260,0.356048,0.577008,0.035391,0.998955,-0.028921,0.512077,0.347454,0.060354,0.375089,0.480415,0.006232,0.834353,0.551195,0.512100,0.347540,0.047959,0.408766,0.706505,0.449275,0.413199,0.792098,0.511740,0.346170,0.057377,0.400578,0.702549,0.512245,0.134111,0.848304,0.513880,0.344150,0.057970,0.408143,0.700914,0.499363,0.427468,0.753596,0.514370,0.345540,0.047078,0.401330,0.707948,0.457910,0.108563,0.882345,0.511270,0.344650,0.049945,0.356400,0.577636,0.021133,0.999427,-0.026436,0.509567,0.348061,0.050089,0.376021,0.479087,-0.010110,0.833615,0.552253,0.509590,0.348150,-0.066877,0.401374,0.695928,-0.613334,0.163143,0.772790,0.483620,0.343800,-0.066761,0.407776,0.694327,-0.580875,0.434558,0.688291,0.483290,0.345000,-0.074844,0.403448,0.687994,-0.710313,0.165815,0.684076,0.481110,0.343420,-0.074594,0.407685,0.687003,-0.651053,0.446530,0.613792,0.480980,0.344400,-0.067284,0.411046,0.690200,-0.500965,0.656310,0.564173,0.483103,0.345787,-0.074954,0.410154,0.683328,-0.543077,0.680275,0.492233,0.480935,0.345015,-0.058557,0.411824,0.696279,-0.433500,0.668711,0.604072,0.485343,0.346485,0.066894,0.401355,0.696021,0.610675,0.164997,0.774501,0.516380,0.343800,0.066820,0.407735,0.694444,0.578193,0.436828,0.689111,0.516700,0.345000,0.058592,0.411804,0.696337,0.431981,0.669874,0.603872,0.514647,0.346485,0.067304,0.411032,0.690278,0.498599,0.658183,0.564087,0.516888,0.345787,0.074646,0.407647,0.687114,0.649868,0.451493,0.611412,0.519010,0.344400,0.075044,0.410094,0.683488,0.544460,0.679956,0.491144,0.519063,0.345015,0.074947,0.403392,0.688185,0.711893,0.165202,0.682581,0.518880,0.343420,-0.081620,0.405077,0.679620,-0.788757,0.081124,0.609328,0.478470,0.342880,-0.087091,0.406464,0.672245,-0.813291,0.324633,0.482877,0.476020,0.342790,-0.086762,0.404863,0.672226,-0.837252,-0.095293,0.538450,0.476030,0.342250,-0.081623,0.407497,0.679308,-0.724149,0.426779,0.541727,0.478450,0.343630,-0.082109,0.408877,0.675796,-0.570051,0.726921,0.382920,0.478473,0.344110,-0.087589,0.407391,0.668604,-0.628769,0.717938,0.298687,0.476005,0.343203,0.081640,0.405044,0.679750,0.796498,0.092543,0.597517,0.521520,0.342880,0.086563,0.404953,0.672191,0.842428,-0.069979,0.534245,0.523960,0.342250,0.081625,0.407482,0.679397,0.729631,0.432005,0.530105,0.521540,0.343630,0.086891,0.406558,0.672196,0.813114,0.324614,0.483188,0.523980,0.342790,0.082024,0.408894,0.675831,0.574314,0.725607,0.379023,0.521518,0.344110,0.087431,0.407451,0.668591,0.624535,0.721734,0.298422,0.523988,0.343203,-0.092758,0.400191,0.660105,-0.832821,-0.235398,0.500996,0.472610,0.340610,-0.093772,0.396609,0.656835,-0.856504,-0.131280,0.499167,0.471290,0.339580,-0.092240,0.398625,0.660295,-0.865800,-0.161746,0.473528,0.472720,0.340200,-0.095225,0.398283,0.655071,-0.792413,-0.266197,0.548836,0.470710,0.339910,-0.096528,0.393880,0.651798,-0.833179,-0.145576,0.533498,0.469200,0.338600,-0.098476,0.396067,0.649832,-0.737532,-0.306797,0.601600,0.468770,0.339080,-0.099977,0.398291,0.649414,-0.609035,-0.502673,0.613512,0.468730,0.339650,-0.096422,0.400160,0.654659,-0.656366,-0.490081,0.573589,0.470450,0.340350,-0.093437,0.402024,0.659988,-0.717387,-0.433894,0.545061,0.472200,0.341030,-0.107327,0.391675,0.638413,-0.524524,-0.392551,0.755498,0.464930,0.337190,-0.104650,0.388125,0.638949,-0.670584,-0.227073,0.706225,0.465250,0.336190,-0.102521,0.393832,0.644089,-0.662006,-0.378203,0.647079,0.466890,0.338210,-0.099961,0.391077,0.645407,-0.784601,-0.210478,0.583181,0.467240,0.337510,-0.104305,0.396485,0.644198,-0.561941,-0.512555,0.649238,0.466950,0.339000,-0.109204,0.394758,0.639094,-0.434037,-0.508201,0.743871,0.465020,0.338230,-0.088797,0.393758,0.667587,-0.905542,-0.002828,0.424246,0.474670,0.339320,-0.090283,0.398843,0.664167,-0.895677,-0.078793,0.437668,0.474140,0.340350,-0.091587,0.395319,0.660833,-0.899734,-0.031278,0.435317,0.472630,0.339410,-0.087375,0.398567,0.670758,-0.893182,-0.002177,0.449690,0.476040,0.340490,-0.090834,0.388913,0.662741,-0.904158,-0.027205,0.426331,0.472760,0.337960,-0.094050,0.391531,0.655983,-0.889664,-0.025797,0.455887,0.470540,0.338250,-0.093446,0.383889,0.657015,-0.892936,-0.115510,0.435113,0.470990,0.336460,-0.097191,0.387674,0.649692,-0.868399,-0.085170,0.488497,0.468600,0.336940,-0.095711,0.378543,0.649630,-0.854234,-0.165737,0.492764,0.469130,0.334460,-0.100942,0.383598,0.642529,-0.797063,-0.125506,0.590711,0.466600,0.335240,0.092604,0.400242,0.660103,0.835674,-0.224219,0.501373,0.527380,0.340610,0.093674,0.396640,0.656836,0.856267,-0.124174,0.501386,0.528700,0.339580,0.095136,0.398313,0.655074,0.787805,-0.260162,0.558282,0.529280,0.339910,0.092188,0.398639,0.660332,0.871890,-0.144279,0.467964,0.527270,0.340200,0.096397,0.400159,0.654704,0.643742,-0.492817,0.585430,0.529540,0.340350,0.093438,0.402534,0.659989,0.702782,-0.457044,0.545167,0.527790,0.341030,0.099941,0.398289,0.649493,0.614100,-0.500441,0.610279,0.531260,0.339650,0.098465,0.396049,0.649954,0.736951,-0.313392,0.598906,0.531220,0.339080,0.096491,0.393874,0.651882,0.831258,-0.159282,0.532578,0.530800,0.338600,0.107258,0.391698,0.638420,0.519775,-0.389666,0.760260,0.535060,0.337190,0.102348,0.393907,0.644049,0.664595,-0.384743,0.640536,0.533100,0.338210,0.104576,0.388152,0.638981,0.659627,-0.239986,0.712249,0.534740,0.336190,0.099863,0.391116,0.645397,0.779839,-0.232812,0.581076,0.532750,0.337510,0.104232,0.396511,0.644232,0.569334,-0.512058,0.643161,0.533040,0.339000,0.109089,0.394812,0.639069,0.429908,-0.502291,0.750256,0.534970,0.338230,0.088636,0.393806,0.667607,0.903756,-0.014950,0.427786,0.525320,0.339320,0.090212,0.398865,0.664209,0.894795,-0.083545,0.438590,0.525850,0.340350,0.087141,0.398652,0.670729,0.894347,-0.022540,0.446806,0.523950,0.340490,0.091522,0.395340,0.660861,0.896646,-0.036748,0.441221,0.527360,0.339410,0.093950,0.391553,0.656029,0.888211,-0.053012,0.456368,0.529450,0.338250,0.090658,0.388964,0.662747,0.903393,-0.046227,0.426314,0.527230,0.337960,0.093078,0.384022,0.656882,0.893960,-0.121345,0.431406,0.529000,0.336460,0.096872,0.387775,0.649621,0.863976,-0.116883,0.489779,0.531400,0.336940,0.100612,0.383720,0.642416,0.790084,-0.134942,0.597961,0.533390,0.335240,0.095495,0.378615,0.649588,0.855537,-0.155625,0.493799,0.530860,0.334460,-0.086514,0.385551,0.671928,-0.876943,-0.112170,0.467322,0.475760,0.337730,-0.084543,0.391396,0.676192,-0.865385,-0.025014,0.500483,0.477270,0.339350,-0.082687,0.397433,0.679138,-0.839053,0.028970,0.543278,0.478390,0.340800,-0.078171,0.387813,0.685882,-0.763032,-0.091367,0.639870,0.480080,0.339460,-0.075825,0.395027,0.688329,-0.744513,0.008689,0.667551,0.480960,0.341140,-0.079775,0.381448,0.681979,-0.780209,-0.222672,0.584543,0.478940,0.337610,-0.089416,0.373346,0.660129,-0.845028,-0.271574,0.460625,0.472890,0.334010,-0.088080,0.379735,0.666674,-0.868699,-0.211110,0.448102,0.474390,0.336100,-0.080668,0.375320,0.677190,-0.780686,-0.326797,0.532666,0.477940,0.335880,-0.081421,0.368535,0.671294,-0.767598,-0.392348,0.506810,0.476810,0.333800,0.086213,0.385652,0.671866,0.876859,-0.107845,0.468495,0.524230,0.337730,0.084314,0.391460,0.676170,0.865064,-0.043142,0.499803,0.522720,0.339350,0.079620,0.381486,0.682014,0.784341,-0.207000,0.584774,0.521060,0.337610,0.077760,0.387975,0.685747,0.767386,-0.100808,0.633212,0.519910,0.339460,0.082739,0.397397,0.679321,0.842955,0.006258,0.537948,0.521600,0.340800,0.075756,0.395038,0.688395,0.749436,-0.014535,0.661917,0.519030,0.341140,0.089156,0.373450,0.660054,0.846039,-0.268683,0.460464,0.527100,0.334010,0.087919,0.379785,0.666675,0.871576,-0.209581,0.443206,0.525600,0.336100,0.081100,0.368668,0.671196,0.769276,-0.394376,0.502675,0.523180,0.333800,0.080575,0.375335,0.677232,0.783528,-0.329114,0.527037,0.522060,0.335880,-0.012136,0.380503,0.715012,-0.126078,-0.592610,0.795561,0.497160,0.340070,-0.006132,0.373966,0.710157,-0.075260,-0.697953,0.712178,0.498490,0.338090,-0.006055,0.380724,0.715994,-0.086284,-0.598226,0.796668,0.498590,0.340290,-0.012390,0.373863,0.709201,-0.105943,-0.696343,0.709847,0.496960,0.337900,-0.011897,0.387071,0.719183,-0.144630,-0.387538,0.910438,0.497360,0.342080,-0.005963,0.386948,0.720098,-0.096978,-0.385801,0.917471,0.498700,0.342240,0.000052,0.380755,0.716449,-0.005884,-0.601477,0.798869,0.500000,0.340410,0.000016,0.386882,0.720472,-0.006029,-0.384161,0.923246,0.500000,0.342320,0.000125,0.373967,0.710660,-0.004690,-0.699726,0.714396,0.500000,0.338200,0.000006,0.368463,0.704567,-0.004371,-0.727193,0.686420,0.500000,0.336000,-0.006250,0.368564,0.704074,-0.073801,-0.726035,0.683686,0.498380,0.335940,0.000094,0.362652,0.698720,-0.003574,-0.649590,0.760277,0.500000,0.333750,-0.006271,0.362848,0.698305,-0.077646,-0.646530,0.758927,0.498300,0.333750,-0.012447,0.368633,0.703435,-0.093794,-0.721727,0.685794,0.496760,0.335850,-0.012675,0.363092,0.697718,-0.089484,-0.643683,0.760042,0.496620,0.333760,0.012276,0.380514,0.715014,0.125237,-0.589066,0.798321,0.502830,0.340070,0.006228,0.373943,0.710221,0.067811,-0.700036,0.710881,0.501510,0.338090,0.012529,0.373771,0.709419,0.102965,-0.698335,0.708326,0.503040,0.337900,0.006237,0.380695,0.716067,0.080977,-0.596526,0.798498,0.501400,0.340290,0.006043,0.386924,0.720166,0.095261,-0.382877,0.918875,0.501290,0.342240,0.012005,0.387050,0.719241,0.141671,-0.383753,0.912504,0.502630,0.342080,0.006292,0.368544,0.704115,0.070294,-0.727280,0.682732,0.501610,0.335940,0.012587,0.368669,0.703373,0.090948,-0.726034,0.681618,0.503230,0.335850,0.012639,0.363064,0.697815,0.088340,-0.639402,0.763780,0.503380,0.333760,0.006373,0.362813,0.698386,0.073121,-0.645647,0.760127,0.501690,0.333750,-0.029812,0.387486,0.715640,-0.297921,-0.309816,0.902916,0.493280,0.341710,-0.024171,0.380299,0.712713,-0.162257,-0.570083,0.805405,0.494280,0.339780,-0.023652,0.387395,0.717154,-0.207174,-0.359818,0.909730,0.494660,0.341810,-0.030449,0.380528,0.711463,-0.231826,-0.529598,0.815955,0.492830,0.339760,-0.024984,0.373685,0.707195,-0.117846,-0.677514,0.726007,0.493870,0.337680,-0.031494,0.373914,0.706023,-0.166759,-0.639084,0.750842,0.492270,0.337710,-0.037936,0.380984,0.709099,-0.322549,-0.452394,0.831445,0.491020,0.339740,-0.039564,0.374134,0.704372,-0.246750,-0.572952,0.781563,0.490300,0.337750,-0.037084,0.387956,0.712765,-0.383887,-0.253409,0.887927,0.491520,0.341610,-0.018678,0.373792,0.708072,-0.108937,-0.693192,0.712472,0.495430,0.337750,-0.018190,0.380303,0.713831,-0.138855,-0.585367,0.798789,0.495720,0.339890,-0.017743,0.387298,0.718268,-0.167656,-0.382923,0.908439,0.496020,0.341930,-0.029406,0.392544,0.716431,-0.341108,-0.072280,0.937241,0.493410,0.343580,-0.022876,0.392510,0.718535,-0.236736,-0.107325,0.965628,0.494940,0.343700,-0.037291,0.392851,0.713240,-0.410738,-0.037196,0.910994,0.491510,0.343390,-0.017059,0.392435,0.719626,-0.174745,-0.121335,0.977109,0.496270,0.343740,-0.011399,0.392156,0.720615,-0.136507,-0.117124,0.983691,0.497530,0.343740,0.029895,0.387484,0.715690,0.298586,-0.304644,0.904454,0.506710,0.341710,0.024281,0.380257,0.712799,0.160940,-0.571731,0.804501,0.505710,0.339780,0.030553,0.380479,0.711600,0.230184,-0.528245,0.817296,0.507160,0.339760,0.023830,0.387363,0.717233,0.210618,-0.353823,0.911290,0.505330,0.341810,0.037137,0.387935,0.712828,0.382380,-0.251169,0.889213,0.508470,0.341610,0.038073,0.380951,0.709206,0.321396,-0.448151,0.834186,0.508970,0.339740,0.031578,0.373875,0.706159,0.164489,-0.632626,0.756788,0.507720,0.337710,0.039615,0.374109,0.704485,0.246284,-0.568313,0.785089,0.509690,0.337750,0.024905,0.373701,0.707234,0.113882,-0.672151,0.731604,0.506120,0.337680,0.018651,0.373736,0.708250,0.110674,-0.691333,0.714010,0.504570,0.337750,0.018269,0.380289,0.713864,0.139216,-0.584688,0.799224,0.504270,0.339890,0.017918,0.387235,0.718405,0.162717,-0.379589,0.910734,0.503980,0.341930,0.029509,0.392533,0.716472,0.341158,-0.069495,0.937434,0.506580,0.343580,0.022956,0.392504,0.718557,0.239752,-0.100722,0.965595,0.505060,0.343700,0.037378,0.392813,0.713333,0.409222,-0.035754,0.911734,0.508480,0.343390,0.017168,0.392415,0.719682,0.170783,-0.113416,0.978759,0.503720,0.343740,0.011525,0.392182,0.720563,0.134857,-0.111714,0.984547,0.502460,0.343740,-0.058569,0.382534,0.700479,-0.486934,-0.269999,0.830660,0.485550,0.339610,-0.049478,0.374864,0.701028,-0.332662,-0.492498,0.804227,0.487600,0.337720,-0.047641,0.381629,0.705253,-0.389276,-0.363482,0.846372,0.488440,0.339690,-0.060383,0.375796,0.696619,-0.458796,-0.403821,0.791476,0.484620,0.337660,-0.056661,0.390434,0.703185,-0.507311,-0.137058,0.850794,0.486240,0.341380,-0.046325,0.389148,0.708565,-0.434620,-0.200109,0.878101,0.489030,0.341500,-0.046591,0.393308,0.708918,-0.451360,-0.010243,0.892283,0.489060,0.343110,-0.056666,0.394778,0.703609,-0.509696,0.022463,0.860061,0.486370,0.342830,0.049603,0.374790,0.701254,0.334941,-0.487687,0.806211,0.512390,0.337720,0.058482,0.382549,0.700550,0.491771,-0.266925,0.828802,0.514440,0.339610,0.047734,0.381578,0.705409,0.391158,-0.357324,0.848124,0.511550,0.339690,0.060398,0.375765,0.696785,0.468439,-0.397409,0.789070,0.515370,0.337660,0.046396,0.389122,0.708652,0.434842,-0.198726,0.878305,0.510960,0.341500,0.056731,0.390395,0.703307,0.508381,-0.138910,0.849854,0.513750,0.341380,0.046665,0.393270,0.709014,0.450388,-0.007668,0.892800,0.510940,0.343110,0.056708,0.394754,0.703696,0.508767,0.025077,0.860539,0.513620,0.342830,-0.068613,0.384594,0.693889,-0.621399,-0.179580,0.762637,0.482800,0.339540,-0.070572,0.377740,0.690335,-0.626844,-0.313263,0.713395,0.481810,0.337610,-0.066959,0.392413,0.696634,-0.620912,-0.063131,0.781334,0.483560,0.341300,-0.066554,0.397080,0.697001,-0.616319,0.067404,0.784607,0.483770,0.342640,-0.074914,0.399947,0.688835,-0.727523,0.099213,0.678872,0.481200,0.342390,0.070416,0.377784,0.690405,0.634100,-0.304631,0.710716,0.518180,0.337610,0.068593,0.384582,0.693991,0.630146,-0.179814,0.755369,0.517190,0.339540,0.066984,0.392390,0.696734,0.627262,-0.074401,0.775246,0.516430,0.341300,0.066605,0.397044,0.697144,0.616812,0.063480,0.784546,0.516220,0.342640,0.074960,0.399909,0.688973,0.730645,0.088334,0.677020,0.518790,0.342390,-0.081788,0.402165,0.680036,-0.813036,0.070117,0.577976,0.478610,0.341950,-0.086662,0.402525,0.672076,-0.869798,-0.024975,0.492775,0.476260,0.341470,0.081755,0.402163,0.680110,0.817684,0.069940,0.571403,0.521380,0.341950,0.086692,0.402486,0.672267,0.874441,-0.012510,0.484970,0.523730,0.341470,-0.090351,0.403811,0.665769,-0.800133,-0.292911,0.523441,0.474030,0.341640,-0.090019,0.401748,0.665502,-0.869293,-0.143776,0.472925,0.474370,0.341080,0.089920,0.401777,0.665511,0.874522,-0.130179,0.467189,0.525620,0.341080,0.090253,0.403842,0.665789,0.799613,-0.298938,0.520821,0.525960,0.341640,-0.005753,0.391733,0.721083,-0.091693,-0.108903,0.989814,0.498790,0.343740,-0.005830,0.400099,0.721011,-0.069954,0.105168,0.991991,0.498770,0.345180,-0.000001,0.399966,0.721647,-0.003173,0.111528,0.993756,0.500000,0.345100,0.000050,0.391618,0.721509,-0.004949,-0.105594,0.994397,0.500000,0.343740,0.005778,0.391704,0.721140,0.090963,-0.106546,0.990138,0.501200,0.343740,0.005884,0.400079,0.721057,0.067730,0.105661,0.992093,0.501220,0.345180,-0.008215,0.355694,0.578721,0.038109,0.999044,-0.021427,0.498412,0.348361,-0.008239,0.374734,0.476774,0.049042,0.846053,0.530837,0.498400,0.348460,0.000029,0.355584,0.578725,0.000705,0.999774,-0.021246,0.500000,0.348310,0.000030,0.374495,0.476763,0.001000,0.848217,0.529648,0.500000,0.348410,0.000020,0.407285,0.719817,-0.001255,0.535265,0.844683,0.500000,0.346810,-0.006335,0.407477,0.719419,-0.008523,0.522291,0.852725,0.498600,0.346870,0.008301,0.374720,0.476768,-0.047535,0.846195,0.530750,0.501590,0.348460,0.008277,0.355688,0.578724,-0.037154,0.999080,-0.021414,0.501577,0.348361,0.006375,0.407474,0.719423,0.005964,0.523460,0.852030,0.501390,0.346870,0.040675,0.368240,0.699056,0.190262,-0.639680,0.744721,0.510360,0.335660,0.032856,0.362569,0.695351,0.106307,-0.628472,0.770533,0.508680,0.333630,0.041401,0.362089,0.693484,0.175068,-0.608082,0.774331,0.510990,0.333440,0.032517,0.368264,0.700967,0.117860,-0.679975,0.723701,0.508230,0.335710,0.025530,0.363156,0.696507,0.074337,-0.638448,0.766066,0.506770,0.333810,0.025455,0.368581,0.701884,0.075967,-0.704648,0.705479,0.506480,0.335770,0.042256,0.354803,0.688414,0.212293,-0.441367,0.871853,0.511630,0.331020,0.033610,0.345900,0.687109,0.164463,-0.095829,0.981717,0.509370,0.328650,0.042987,0.345102,0.685086,0.273452,-0.095457,0.957137,0.512090,0.328280,0.033218,0.355495,0.690384,0.125899,-0.447466,0.885395,0.509090,0.331280,0.025550,0.346618,0.688063,0.083802,-0.116443,0.989656,0.507050,0.328940,0.025327,0.356190,0.691623,0.086406,-0.464256,0.881476,0.506950,0.331490,0.018903,0.368719,0.702544,0.085052,-0.718533,0.690273,0.504830,0.335810,0.018964,0.363257,0.697358,0.083391,-0.637582,0.765856,0.505030,0.333820,0.018557,0.346951,0.688604,0.035638,-0.161689,0.986198,0.505170,0.328990,0.018712,0.356299,0.692349,0.085297,-0.476876,0.874822,0.505130,0.331490,0.012477,0.355968,0.692897,0.074482,-0.487216,0.870099,0.503450,0.331400,0.012345,0.346796,0.689034,-0.000538,-0.221830,0.975085,0.503480,0.328940,-0.040591,0.368307,0.698868,-0.187636,-0.636730,0.747909,0.489630,0.335660,-0.032810,0.362599,0.695223,-0.106142,-0.620895,0.776674,0.491310,0.333630,-0.032376,0.368360,0.700661,-0.117441,-0.681630,0.722210,0.491760,0.335710,-0.041400,0.362125,0.693368,-0.170366,-0.602616,0.779634,0.489000,0.333440,-0.025269,0.368678,0.701649,-0.084751,-0.705454,0.703670,0.493510,0.335770,-0.025433,0.363207,0.696378,-0.082016,-0.632359,0.770322,0.493220,0.333810,-0.042224,0.354827,0.688271,-0.209574,-0.441163,0.872613,0.488370,0.331020,-0.033611,0.345942,0.686981,-0.163944,-0.093375,0.982041,0.490620,0.328650,-0.033182,0.355524,0.690291,-0.125509,-0.445279,0.886552,0.490900,0.331280,-0.043086,0.345091,0.685055,-0.273732,-0.093256,0.957274,0.487910,0.328280,-0.025311,0.356242,0.691514,-0.088330,-0.463027,0.881932,0.493040,0.331490,-0.025562,0.346636,0.687991,-0.085651,-0.113500,0.989839,0.492940,0.328940,-0.018814,0.368741,0.702462,-0.093990,-0.715081,0.692693,0.495160,0.335810,-0.018887,0.363260,0.697309,-0.090633,-0.638324,0.764414,0.494960,0.333820,-0.018556,0.346983,0.688525,-0.033412,-0.157963,0.986880,0.494820,0.328990,-0.018639,0.356341,0.692247,-0.084082,-0.477424,0.874641,0.494860,0.331490,-0.012378,0.356029,0.692762,-0.079248,-0.487681,0.869418,0.496540,0.331400,-0.012279,0.346843,0.688932,-0.003792,-0.218832,0.975755,0.496510,0.328940,0.000056,0.355451,0.693467,-0.001918,-0.513440,0.858123,0.500000,0.331310,0.006064,0.346599,0.689027,-0.026048,-0.279573,0.959771,0.501750,0.328900,0.006195,0.355651,0.693193,0.050373,-0.503472,0.862542,0.501730,0.331330,0.000054,0.346508,0.688936,-0.001290,-0.305966,0.952041,0.500000,0.328880,-0.006098,0.346633,0.688978,0.016935,-0.278405,0.960314,0.498240,0.328900,-0.006193,0.355634,0.693204,-0.060101,-0.502480,0.862498,0.498260,0.331330,0.050850,0.368490,0.696447,0.287493,-0.583428,0.759578,0.513170,0.335680,0.061525,0.369473,0.692253,0.447003,-0.513242,0.732647,0.516210,0.335730,0.051609,0.362069,0.690952,0.281274,-0.589639,0.757107,0.513910,0.333440,0.062084,0.362927,0.686837,0.449665,-0.560049,0.695806,0.517020,0.333550,-0.050722,0.368573,0.696225,-0.285535,-0.574008,0.767454,0.486820,0.335680,-0.051802,0.362016,0.690949,-0.276598,-0.584786,0.762574,0.486080,0.333440,-0.061525,0.369476,0.692149,-0.440427,-0.506649,0.741169,0.483790,0.335730,-0.062197,0.362897,0.686809,-0.446833,-0.556212,0.700692,0.482970,0.333550,0.071813,0.364986,0.680469,0.629758,-0.496399,0.597489,0.519970,0.333660,0.071463,0.371546,0.686144,0.631915,-0.431506,0.643806,0.519050,0.335770,-0.071931,0.364952,0.680466,-0.624758,-0.495213,0.603691,0.480020,0.333660,-0.071570,0.371528,0.686084,-0.627318,-0.428725,0.650129,0.480940,0.335770,-0.026027,0.334331,0.689720,-0.080453,0.157884,0.984175,0.492870,0.325980,-0.019689,0.318545,0.692931,0.061919,0.072897,0.995416,0.494780,0.322440,-0.018928,0.334601,0.689365,0.044509,0.132925,0.990126,0.494770,0.326220,-0.026943,0.317858,0.692882,-0.085205,0.061525,0.994462,0.492940,0.322090,-0.012761,0.334493,0.688423,0.117360,0.084091,0.989523,0.496480,0.326310,-0.013152,0.318428,0.692033,0.162008,0.080526,0.983498,0.496480,0.322640,-0.044185,0.331887,0.686445,-0.316291,0.126734,0.940158,0.487890,0.324810,-0.035389,0.316098,0.691485,-0.231334,0.044057,0.971876,0.490770,0.321420,-0.034406,0.333061,0.688691,-0.203326,0.150748,0.967437,0.490550,0.325420,-0.045156,0.314650,0.688414,-0.364755,0.014392,0.930992,0.488300,0.320710,0.026097,0.334306,0.689796,0.078917,0.156145,0.984577,0.507120,0.325980,0.019702,0.318525,0.692988,-0.064266,0.072668,0.995284,0.505210,0.322440,0.026933,0.317859,0.692901,0.084409,0.061142,0.994553,0.507050,0.322090,0.019057,0.334614,0.689357,-0.044480,0.130906,0.990396,0.505230,0.326220,0.013117,0.318474,0.691988,-0.166013,0.080547,0.982828,0.503510,0.322640,0.012794,0.334467,0.688493,-0.120995,0.080676,0.989369,0.503520,0.326310,0.044224,0.331855,0.686555,0.317631,0.125424,0.939883,0.512100,0.324810,0.035402,0.316081,0.691548,0.230070,0.043096,0.972219,0.509220,0.321420,0.045149,0.314630,0.688494,0.370472,0.012075,0.928765,0.511690,0.320710,0.034390,0.333072,0.688704,0.202614,0.149761,0.967739,0.509440,0.325420,-0.013308,0.297367,0.691012,0.141894,-0.207818,0.967821,0.496560,0.317370,-0.020026,0.297052,0.691577,0.044584,-0.216935,0.975168,0.494900,0.317280,-0.013518,0.276113,0.682704,0.110911,-0.531445,0.839800,0.496560,0.311800,-0.020425,0.275608,0.683163,0.021125,-0.548972,0.835574,0.494910,0.311900,-0.027330,0.296406,0.691292,-0.086605,-0.224172,0.970694,0.493160,0.317100,-0.027944,0.275316,0.682928,-0.102915,-0.561783,0.820858,0.493200,0.311980,-0.035704,0.295418,0.689838,-0.244538,-0.234449,0.940869,0.491190,0.316740,-0.036322,0.275391,0.681068,-0.266894,-0.566252,0.779825,0.491310,0.311980,-0.045130,0.294687,0.686420,-0.406276,-0.250316,0.878796,0.488990,0.316250,-0.045759,0.275738,0.676909,-0.424272,-0.562758,0.709434,0.489170,0.311770,0.013334,0.297361,0.691032,-0.142826,-0.207385,0.967777,0.503430,0.317370,0.020026,0.297055,0.691579,-0.046579,-0.217538,0.974940,0.505090,0.317280,0.027332,0.296391,0.691336,0.085479,-0.225133,0.970571,0.506830,0.317100,0.020421,0.275610,0.683161,-0.021275,-0.549263,0.835379,0.505080,0.311900,0.027925,0.275323,0.682922,0.101972,-0.562358,0.820582,0.506790,0.311980,0.013517,0.276114,0.682704,-0.110091,-0.531796,0.839686,0.503430,0.311800,0.035691,0.295416,0.689858,0.244713,-0.235584,0.940540,0.508800,0.316740,0.045104,0.294694,0.686424,0.411148,-0.249375,0.876795,0.511000,0.316250,0.036328,0.275387,0.681081,0.267221,-0.566507,0.779527,0.508680,0.311980,0.045752,0.275741,0.676908,0.425337,-0.562005,0.709393,0.510820,0.311770,-0.006688,0.318584,0.690467,0.179001,0.083222,0.980323,0.498230,0.322840,-0.000000,0.298139,0.689012,-0.000482,-0.196902,0.980423,0.500000,0.317490,0.000049,0.318959,0.689178,0.001232,0.085131,0.996369,0.500000,0.322930,-0.006657,0.297761,0.690063,0.176465,-0.198294,0.964126,0.498260,0.317450,0.000002,0.277778,0.680808,-0.000761,-0.517031,0.855967,0.500000,0.311670,-0.006815,0.276967,0.681701,0.155873,-0.515781,0.842421,0.498270,0.311710,-0.013413,0.260716,0.668363,0.057325,-0.765202,0.641233,0.496410,0.306100,-0.006321,0.252153,0.654666,0.083363,-0.864898,0.494977,0.498140,0.301360,-0.006688,0.261550,0.668331,0.114091,-0.742207,0.660388,0.498190,0.306110,-0.012605,0.251290,0.653804,0.027170,-0.874857,0.483618,0.496320,0.301200,0.0,0.262227,0.667937,-0.000055,-0.738602,0.674142,0.500000,0.306130,-0.000000,0.252757,0.654664,0.000003,-0.865900,0.500216,0.500000,0.301430,0.006731,0.318624,0.690419,-0.180268,0.084063,0.980019,0.501760,0.322840,0.006654,0.297735,0.690089,-0.176689,-0.197332,0.964283,0.501730,0.317450,0.006805,0.276967,0.681703,-0.156204,-0.516164,0.842126,0.501720,0.311710,0.013413,0.260716,0.668363,-0.057250,-0.765205,0.641236,0.503580,0.306100,0.006321,0.252153,0.654666,-0.083359,-0.864899,0.494975,0.501850,0.301360,0.012605,0.251290,0.653804,-0.027175,-0.874858,0.483616,0.503670,0.301200,0.006688,0.261550,0.668331,-0.114101,-0.742222,0.660370,0.501800,0.306110,-0.006522,0.334352,0.687356,0.126524,0.031404,0.991466,0.498230,0.326410,0.000087,0.334475,0.686486,0.000484,0.005905,0.999982,0.500000,0.326460,-0.340172,0.593568,0.158953,-0.099003,-0.171524,-0.980193,0.903560,0.643850,-0.328217,0.616910,0.155169,0.264178,-0.030490,-0.963992,0.896190,0.650620,-0.327359,0.593489,0.157682,0.285949,-0.150836,-0.946299,0.898740,0.641070,-0.342587,0.617260,0.157177,-0.142961,-0.040076,-0.988917,0.901940,0.652740,-0.328299,0.640325,0.155220,0.287130,0.082281,-0.954351,0.895220,0.659980,-0.344364,0.639959,0.158293,-0.151360,0.082447,-0.985034,0.901710,0.660650,-0.336995,0.568678,0.164702,-0.051208,-0.348083,-0.936064,0.908090,0.633820,-0.325160,0.570632,0.163544,0.315249,-0.275501,-0.908140,0.903370,0.631410,-0.319981,0.549378,0.173901,0.292018,-0.462247,-0.837289,0.910510,0.621370,-0.331149,0.545615,0.176256,-0.010092,-0.576574,-0.816982,0.915820,0.623540,0.023738,0.413951,-0.063792,0.058950,0.029313,-0.997831,0.937190,0.248290,0.050215,0.536370,-0.072541,0.049402,-0.262248,-0.963735,0.930340,0.309660,0.047957,0.413657,-0.061796,0.114235,0.015874,-0.993327,0.925140,0.248370,0.025220,0.537130,-0.074065,0.037098,-0.252623,-0.966853,0.942350,0.308540,0.000000,0.537315,-0.074945,0.000002,-0.249077,-0.968484,0.954270,0.307240,0.0,0.413966,-0.064400,0.000000,0.032833,-0.999461,0.948740,0.248090,-0.286551,0.490909,0.232361,-0.018489,-0.853074,-0.521462,0.942890,0.594570,-0.291162,0.483706,0.255690,-0.358308,-0.920294,0.157081,0.954750,0.597630,-0.301324,0.489006,0.236758,-0.426568,-0.869446,-0.249205,0.946040,0.601070,-0.298579,0.508717,0.211860,0.161984,-0.656472,-0.736753,0.931630,0.602000,-0.311967,0.505352,0.216166,-0.474780,-0.753640,-0.454545,0.936640,0.606660,0.327359,0.593489,0.157682,-0.285936,-0.150834,-0.946303,0.100920,0.639780,0.328217,0.616910,0.155169,-0.264174,-0.030489,-0.963993,0.103450,0.649340,0.340172,0.593568,0.158953,0.099004,-0.171524,-0.980193,0.096090,0.642560,0.342587,0.617260,0.157177,0.142962,-0.040076,-0.988916,0.097710,0.651450,0.328299,0.640325,0.155220,-0.287130,0.082280,-0.954351,0.104420,0.658690,0.344364,0.639959,0.158293,0.151361,0.082447,-0.985034,0.097930,0.659350,0.336995,0.568678,0.164702,0.051209,-0.348083,-0.936064,0.091570,0.632530,0.325160,0.570632,0.163544,-0.315227,-0.275504,-0.908146,0.096290,0.630120,0.319981,0.549378,0.173901,-0.291998,-0.462254,-0.837292,0.089160,0.620070,0.331149,0.545615,0.176256,0.010094,-0.576574,-0.816983,0.083850,0.622240,-0.047957,0.413657,-0.061796,-0.114235,0.015874,-0.993327,0.074850,0.248370,-0.050215,0.536370,-0.072541,-0.049404,-0.262249,-0.963735,0.069650,0.309660,-0.023738,0.413951,-0.063792,-0.058950,0.029313,-0.997830,0.062800,0.248290,-0.025220,0.537130,-0.074065,-0.037098,-0.252624,-0.966853,0.057640,0.308540,0.000000,0.537315,-0.074945,0.000002,-0.249077,-0.968484,0.045720,0.307240,0.0,0.413966,-0.064400,0.000000,0.032833,-0.999461,0.051250,0.248090,0.286551,0.490909,0.232361,0.018482,-0.853074,-0.521462,0.056760,0.593250,0.291162,0.483706,0.255690,0.358290,-0.920298,0.157099,0.044910,0.596300,0.301324,0.489006,0.236758,0.426576,-0.869444,-0.249199,0.053620,0.599750,0.298579,0.508717,0.211860,-0.161982,-0.656476,-0.736750,0.068020,0.600690,0.311967,0.505352,0.216166,0.474795,-0.753636,-0.454535,0.063030,0.605350,-0.292985,0.594725,0.242906,-0.959016,-0.177663,0.220734,0.951690,0.648020,-0.281143,0.594431,0.256491,-0.445223,-0.480718,0.755438,0.959110,0.646860,-0.293030,0.603281,0.249929,-0.957801,-0.145312,0.247996,0.954900,0.651330,-0.282164,0.585390,0.248142,-0.617339,-0.491503,0.614262,0.955570,0.643370,-0.280765,0.603970,0.262100,-0.413994,-0.582404,0.699581,0.962680,0.649660,-0.293028,0.611572,0.254676,-0.661797,-0.445562,0.602909,0.957950,0.654540,-0.292981,0.584089,0.227187,-0.970622,-0.119386,0.208901,0.945500,0.643190,-0.294224,0.580636,0.220584,-0.940360,0.000407,0.340181,0.942540,0.641820,-0.286731,0.573352,0.232852,-0.776849,-0.420074,0.469088,0.949130,0.639260,-0.285862,0.566553,0.229106,-0.803078,-0.279434,0.526291,0.948140,0.637170,-0.297216,0.577272,0.213895,-0.625526,0.320940,0.711136,0.940380,0.640830,-0.286894,0.559018,0.227680,-0.834214,-0.071370,0.546803,0.947410,0.634920,0.284700,0.649924,0.091937,0.984631,-0.105720,-0.139017,0.791220,0.379090,0.292014,0.711761,0.107779,0.995479,-0.059219,-0.074259,0.786490,0.405100,0.289432,0.647257,0.123531,0.973449,-0.045126,-0.224410,0.778690,0.379760,0.292940,0.695263,0.139304,0.990932,0.021219,-0.132681,0.773770,0.399770,-0.290036,0.732068,0.066316,-0.989223,-0.070856,-0.128133,0.197200,0.411510,-0.270471,0.664243,0.004916,-0.947819,-0.136016,-0.288340,0.175080,0.382010,-0.279631,0.655403,0.051745,-0.976328,-0.128754,-0.173797,0.193050,0.379610,-0.282849,0.752422,0.017808,-0.968120,-0.050939,-0.245253,0.178960,0.417090,0.292971,0.594725,0.242903,0.959250,-0.176768,0.220438,0.047970,0.646720,0.281112,0.594429,0.256483,0.445124,-0.480529,0.755617,0.040550,0.645560,0.282146,0.585389,0.248137,0.617380,-0.491133,0.614516,0.044090,0.642080,0.293019,0.603280,0.249926,0.958038,-0.144709,0.247430,0.044770,0.650030,0.280740,0.603968,0.262093,0.413992,-0.582125,0.699815,0.036990,0.648370,0.293007,0.611571,0.254670,0.661644,-0.445117,0.603406,0.041710,0.653240,0.294215,0.580635,0.220582,0.940563,0.000259,0.339619,0.057120,0.640520,0.286725,0.573352,0.232850,0.776967,-0.419755,0.469178,0.050530,0.637960,0.285858,0.566553,0.229105,0.803135,-0.279914,0.525949,0.051520,0.635870,0.292973,0.584089,0.227185,0.970743,-0.118610,0.208781,0.054160,0.641880,0.297194,0.577271,0.213889,0.626012,0.320371,0.710965,0.059280,0.639530,0.286871,0.559017,0.227674,0.834536,-0.072019,0.546226,0.052250,0.633620,-0.289432,0.647257,0.123531,-0.973450,-0.045126,-0.224410,0.221300,0.379760,-0.292014,0.711761,0.107779,-0.995479,-0.059219,-0.074259,0.213500,0.405100,-0.284700,0.649924,0.091937,-0.984631,-0.105720,-0.139017,0.208770,0.379090,-0.292940,0.695263,0.139304,-0.990932,0.021219,-0.132681,0.226220,0.399770,0.296761,0.645793,0.146517,0.915399,0.035675,-0.400963,0.770040,0.380780,0.305535,0.681406,0.170793,0.546223,0.356984,-0.757762,0.762810,0.396130,0.306137,0.643983,0.163694,0.549492,0.116302,-0.827365,0.765080,0.381150,0.297331,0.686475,0.158344,0.928994,0.172431,-0.327471,0.766420,0.397420,-0.142066,0.370393,0.616045,-0.773859,-0.369253,0.514581,0.455160,0.331110,-0.129646,0.368477,0.628850,-0.481054,-0.260686,0.837036,0.458610,0.330770,-0.132533,0.375533,0.629762,-0.435437,-0.336860,0.834817,0.458260,0.333060,-0.138674,0.361098,0.614571,-0.765297,-0.378527,0.520614,0.455700,0.328040,-0.144645,0.378419,0.618088,-0.783319,-0.355455,0.509963,0.455040,0.333590,-0.134760,0.381683,0.631249,-0.451464,-0.372121,0.810991,0.458250,0.334890,-0.121505,0.382711,0.633164,-0.050609,-0.238307,0.969870,0.460510,0.334450,-0.123666,0.387215,0.634741,-0.019452,-0.334266,0.942278,0.460540,0.335930,-0.118759,0.377384,0.632260,-0.189854,-0.086824,0.977966,0.460850,0.332680,-0.157526,0.360694,0.568850,-0.866755,-0.354473,0.350834,0.444170,0.322580,-0.146502,0.355072,0.593181,-0.843327,-0.394293,0.365148,0.451330,0.323580,-0.150404,0.366989,0.595487,-0.864259,-0.353735,0.357669,0.450180,0.327970,-0.152525,0.347133,0.566598,-0.846282,-0.396230,0.356102,0.446140,0.317420,-0.160901,0.372833,0.571857,-0.882329,-0.321479,0.343724,0.443040,0.327240,-0.153258,0.376979,0.598150,-0.874630,-0.329193,0.355885,0.449680,0.331640,-0.139627,0.341857,0.593042,-0.806293,-0.449404,0.384613,0.453680,0.318860,-0.145061,0.332725,0.567561,-0.818279,-0.443445,0.365755,0.449450,0.312570,-0.133283,0.318427,0.575988,-0.796375,-0.473717,0.376003,0.454950,0.308990,-0.128414,0.328664,0.599661,-0.778115,-0.462226,0.425305,0.458120,0.315110,-0.133034,0.350417,0.614698,-0.735453,-0.410092,0.539382,0.457150,0.324030,-0.123158,0.339553,0.619277,-0.707103,-0.392939,0.587881,0.460530,0.320530,-0.115717,0.351312,0.632265,-0.569515,-0.183961,0.801131,0.462670,0.324650,-0.124762,0.360015,0.629368,-0.528404,-0.215812,0.821106,0.459820,0.327540,-0.114385,0.370676,0.633543,-0.372668,0.018480,0.927781,0.462090,0.330250,-0.106756,0.363054,0.637407,-0.541857,0.002221,0.840468,0.464730,0.328140,0.129499,0.368542,0.628806,0.482234,-0.259705,0.836662,0.541380,0.330770,0.141982,0.370430,0.616017,0.770582,-0.375435,0.515026,0.544830,0.331110,0.132436,0.375567,0.629752,0.431451,-0.343978,0.833984,0.541730,0.333060,0.138549,0.361146,0.614559,0.765767,-0.378273,0.520106,0.544290,0.328040,0.118612,0.377448,0.632237,0.188935,-0.089309,0.977920,0.539140,0.332680,0.121440,0.382733,0.633164,0.048222,-0.245740,0.968136,0.539480,0.334450,0.134701,0.381695,0.631282,0.450174,-0.373649,0.811005,0.541740,0.334890,0.123624,0.387218,0.634797,0.021016,-0.335375,0.941850,0.539460,0.335930,0.144616,0.378426,0.618115,0.781853,-0.357490,0.510791,0.544960,0.333590,0.146371,0.355120,0.593131,0.842519,-0.394458,0.366829,0.548660,0.323580,0.157517,0.360697,0.568846,0.865633,-0.355815,0.352244,0.555820,0.322580,0.150335,0.367012,0.595477,0.861928,-0.357966,0.359084,0.549810,0.327970,0.152514,0.347137,0.566594,0.845626,-0.396039,0.357868,0.553850,0.317420,0.153247,0.376982,0.598154,0.873853,-0.330403,0.356671,0.550310,0.331640,0.160890,0.372837,0.571853,0.881882,-0.321815,0.344557,0.556950,0.327240,0.139565,0.341878,0.593025,0.806659,-0.447154,0.386465,0.546310,0.318860,0.133279,0.318428,0.575987,0.795944,-0.473458,0.377241,0.545040,0.308990,0.145059,0.332725,0.567562,0.818444,-0.442185,0.366908,0.550540,0.312570,0.128377,0.328677,0.599646,0.777554,-0.461345,0.427283,0.541870,0.315110,0.123010,0.339604,0.619235,0.707271,-0.395243,0.586132,0.539460,0.320530,0.132933,0.350451,0.614668,0.737722,-0.408552,0.537450,0.542840,0.324030,0.115728,0.351293,0.632368,0.567812,-0.184056,0.802317,0.537320,0.324650,0.124743,0.360009,0.629428,0.531594,-0.211667,0.820125,0.540170,0.327540,0.106641,0.363092,0.637392,0.537413,0.005268,0.843303,0.535260,0.328140,0.114277,0.370713,0.633525,0.370989,0.023182,0.928348,0.537900,0.330250,-0.116984,0.304729,0.594342,-0.783261,-0.485403,0.388442,0.463110,0.307660,-0.112882,0.317015,0.615008,-0.771062,-0.412001,0.485509,0.465220,0.313600,-0.108456,0.330469,0.630697,-0.707246,-0.290923,0.644335,0.466650,0.318940,-0.095581,0.307690,0.634909,-0.794888,-0.303310,0.525506,0.472710,0.313580,-0.091609,0.323420,0.645575,-0.742483,-0.148603,0.653174,0.473190,0.318700,-0.098581,0.293213,0.617540,-0.792629,-0.464886,0.394486,0.471570,0.307950,-0.101908,0.344057,0.639728,-0.629698,-0.124915,0.766732,0.467850,0.323370,-0.095463,0.356107,0.645504,-0.665537,-0.086847,0.741294,0.469170,0.327280,-0.083403,0.350808,0.656521,-0.724765,-0.163329,0.669357,0.473970,0.327180,-0.087089,0.338308,0.651416,-0.699957,-0.067394,0.710998,0.473460,0.323160,0.116949,0.304741,0.594328,0.783150,-0.484803,0.389412,0.536880,0.307660,0.112745,0.317057,0.614977,0.771306,-0.410535,0.486362,0.534770,0.313600,0.098556,0.293220,0.617540,0.792263,-0.464737,0.395398,0.528420,0.307950,0.095502,0.307696,0.634967,0.794774,-0.302642,0.526062,0.527290,0.313580,0.108379,0.330484,0.630697,0.706929,-0.292098,0.644151,0.533340,0.318940,0.091460,0.323446,0.645601,0.742482,-0.147156,0.653503,0.526800,0.318700,0.101830,0.344079,0.639726,0.627318,-0.123639,0.768886,0.532140,0.323370,0.086900,0.338359,0.651416,0.699872,-0.064705,0.711331,0.526530,0.323160,0.083253,0.350848,0.656528,0.725644,-0.163385,0.668390,0.526020,0.327180,0.095173,0.356200,0.645429,0.664588,-0.086118,0.742230,0.530830,0.327280,-0.122621,0.281945,0.545488,-0.708164,-0.640168,0.297806,0.456500,0.293720,-0.139426,0.307953,0.550249,-0.782639,-0.500812,0.369681,0.450160,0.302520,-0.141948,0.295655,0.527290,-0.742317,-0.584585,0.327453,0.446070,0.295580,-0.120909,0.293906,0.569143,-0.759672,-0.549052,0.348483,0.459540,0.300940,-0.100606,0.281027,0.592876,-0.748251,-0.580551,0.321061,0.469180,0.301080,-0.101251,0.269148,0.568145,-0.677488,-0.686846,0.263160,0.467190,0.293670,0.139426,0.307953,0.550249,0.782438,-0.500936,0.369939,0.549830,0.302520,0.122620,0.281945,0.545488,0.708132,-0.639983,0.298279,0.543490,0.293720,0.141948,0.295655,0.527290,0.742277,-0.584578,0.327556,0.553920,0.295580,0.120891,0.293914,0.569136,0.759318,-0.549205,0.349014,0.540450,0.300940,0.101251,0.269148,0.568145,0.677859,-0.686203,0.263879,0.532800,0.293670,0.100544,0.281050,0.592849,0.748179,-0.580207,0.321850,0.530810,0.301080,-0.082880,0.283863,0.640676,-0.781284,-0.460660,0.421174,0.478420,0.309020,-0.080707,0.300353,0.654906,-0.802853,-0.226487,0.551480,0.478700,0.314270,-0.077887,0.318649,0.660988,-0.775673,-0.049328,0.629204,0.478250,0.319170,-0.067789,0.296241,0.670648,-0.716311,-0.244873,0.653404,0.483240,0.315060,-0.067433,0.315775,0.674696,-0.699330,-0.028030,0.714249,0.482180,0.319820,-0.068718,0.278559,0.658502,-0.692491,-0.511319,0.508929,0.483440,0.310220,-0.075109,0.334756,0.663871,-0.737721,-0.008888,0.675047,0.477870,0.323520,-0.073173,0.347479,0.667334,-0.705067,-0.180810,0.685703,0.477960,0.327360,-0.063354,0.345857,0.675605,-0.587424,-0.150588,0.795146,0.481480,0.327680,-0.065499,0.332799,0.674954,-0.649498,0.052695,0.758535,0.481530,0.324040,0.082776,0.283896,0.640627,0.782226,-0.459092,0.421138,0.521570,0.309020,0.080578,0.300394,0.654866,0.802762,-0.225932,0.551841,0.521290,0.314270,0.068722,0.278554,0.658522,0.694484,-0.508595,0.508943,0.516550,0.310220,0.067728,0.296257,0.670644,0.715609,-0.241120,0.655564,0.516750,0.315060,0.077799,0.318658,0.661059,0.775552,-0.048464,0.629421,0.521740,0.319170,0.067235,0.315845,0.674681,0.697023,-0.030256,0.716410,0.517810,0.319820,0.074931,0.334805,0.663869,0.739155,-0.007547,0.673493,0.522120,0.323520,0.065438,0.332801,0.675026,0.651493,0.050027,0.757004,0.518460,0.324040,0.063254,0.345874,0.675645,0.593280,-0.148830,0.791118,0.518510,0.327680,0.073016,0.347534,0.667335,0.707742,-0.180050,0.683142,0.522030,0.327360,-0.055800,0.294860,0.680329,-0.560205,-0.264245,0.785076,0.486460,0.315680,-0.056401,0.276403,0.669818,-0.562768,-0.549932,0.617144,0.486720,0.311150,-0.056325,0.314454,0.683153,-0.520320,-0.018508,0.853770,0.485460,0.320240,-0.054966,0.331817,0.682139,-0.466594,0.097258,0.879108,0.484860,0.324410,-0.053134,0.345107,0.681205,-0.420369,-0.113267,0.900256,0.484830,0.327970,0.055676,0.294899,0.680302,0.562569,-0.259757,0.784884,0.513530,0.315680,0.056413,0.276395,0.669840,0.563164,-0.548573,0.617992,0.513270,0.311150,0.055968,0.314555,0.683067,0.524327,-0.021964,0.851234,0.514530,0.320240,0.054956,0.331797,0.682230,0.469771,0.092801,0.877897,0.515130,0.324410,0.053126,0.345084,0.681309,0.422294,-0.113488,0.899327,0.515170,0.327970,-0.062390,0.355445,0.680403,-0.500568,-0.457044,0.735216,0.482110,0.330830,-0.052320,0.354716,0.685235,-0.336211,-0.456232,0.823902,0.485350,0.330880,0.062354,0.355450,0.680441,0.505625,-0.452982,0.734268,0.517880,0.330830,0.052299,0.354696,0.685335,0.340546,-0.452108,0.824395,0.514640,0.330880,-0.081787,0.360631,0.663720,-0.754936,-0.341159,0.560073,0.475300,0.330830,-0.072081,0.357186,0.673368,-0.653526,-0.422163,0.628238,0.478870,0.330800,0.081602,0.360677,0.663735,0.756524,-0.335813,0.561161,0.524690,0.330830,0.071923,0.357236,0.673368,0.658179,-0.417801,0.626293,0.521120,0.330800,-0.091013,0.365832,0.652306,-0.783735,-0.205369,0.586160,0.471000,0.330970,-0.099675,0.371966,0.642409,-0.727868,-0.056637,0.683375,0.466960,0.331550,0.090914,0.365868,0.652331,0.783922,-0.201203,0.587352,0.528990,0.330970,0.099432,0.372062,0.642338,0.726857,-0.051949,0.684822,0.533030,0.331550,-0.105944,0.378481,0.635793,-0.584487,-0.019834,0.811161,0.464390,0.332910,-0.110534,0.384200,0.633909,-0.385986,-0.131996,0.913013,0.463090,0.334530,0.105776,0.378547,0.635770,0.579175,-0.021082,0.814931,0.535600,0.332910,0.110416,0.384242,0.633885,0.378510,-0.142245,0.914602,0.536900,0.334530,-0.113161,0.388551,0.633957,-0.203695,-0.301747,0.931374,0.462760,0.335880,-0.115176,0.392163,0.635377,-0.112853,-0.419269,0.900821,0.462830,0.337120,0.113168,0.388531,0.634033,0.199068,-0.304388,0.931515,0.537230,0.335880,0.115150,0.392160,0.635417,0.108424,-0.413899,0.903843,0.537160,0.337120,-0.322795,0.700598,0.175163,0.346773,0.606803,-0.715219,0.901790,0.684890,-0.335291,0.714867,0.194018,-0.434932,0.844728,-0.311879,0.912330,0.687670,-0.318814,0.713228,0.192040,0.357481,0.808663,-0.467195,0.908340,0.692370,-0.339906,0.701694,0.176921,-0.496942,0.666891,-0.555252,0.906560,0.681020,-0.326495,0.683519,0.162289,0.330892,0.324106,-0.886265,0.898060,0.676760,-0.343304,0.683039,0.163701,-0.597896,0.348977,-0.721620,0.903050,0.674120,-0.316734,0.719398,0.213234,0.309608,0.941604,-0.132380,0.917290,0.697540,-0.324573,0.715870,0.238750,-0.403091,0.806753,0.432051,0.928080,0.696800,-0.331093,0.720211,0.214680,-0.405626,0.912841,0.046787,0.919530,0.692960,-0.306137,0.643983,0.163694,-0.549492,0.116301,-0.827365,0.234910,0.381150,-0.305535,0.681406,0.170793,-0.546223,0.356985,-0.757761,0.237180,0.396130,-0.296761,0.645793,0.146517,-0.915400,0.035674,-0.400962,0.229950,0.380780,-0.297331,0.686475,0.158344,-0.928994,0.172432,-0.327470,0.233570,0.397420,0.306137,0.643983,0.163694,0.549492,0.116302,-0.827365,0.116930,0.661130,0.316453,0.680746,0.172357,-0.322628,0.327259,-0.888151,0.105600,0.678890,0.317784,0.641809,0.165044,-0.305137,0.110750,-0.945846,0.110560,0.659690,0.305535,0.681406,0.170793,0.546223,0.356984,-0.757762,0.109840,0.682850,0.326495,0.683519,0.162289,-0.330892,0.324106,-0.886265,0.101580,0.675460,0.335291,0.714867,0.194018,0.434941,0.844724,-0.311877,0.087310,0.686350,0.322795,0.700598,0.175163,-0.346773,0.606804,-0.715219,0.097840,0.683580,0.318814,0.713228,0.192040,-0.357479,0.808664,-0.467194,0.091300,0.691050,0.339906,0.701694,0.176921,0.496947,0.666890,-0.555249,0.093080,0.679710,0.343304,0.683039,0.163701,0.597896,0.348977,-0.721620,0.096590,0.672820,0.316734,0.719398,0.213234,-0.309607,0.941609,-0.132346,0.082360,0.696220,0.324582,0.715870,0.238753,0.403400,0.806721,0.431822,0.071570,0.695480,0.331093,0.720211,0.214680,0.405690,0.912816,0.046714,0.080120,0.691640,-0.317784,0.641809,0.165044,0.305137,0.110750,-0.945847,0.889070,0.660980,-0.316453,0.680746,0.172357,0.322627,0.327259,-0.888152,0.894030,0.680200,-0.306137,0.643983,0.163694,-0.549492,0.116301,-0.827365,0.882690,0.662410,-0.305535,0.681406,0.170793,-0.546223,0.356985,-0.757761,0.889790,0.684160,0.296414,0.559546,0.228481,-0.112662,0.825251,0.553414,0.053890,0.631560,0.304205,0.574942,0.211779,-0.005122,0.562662,0.826671,0.061200,0.637990,0.286871,0.559017,0.227674,0.006310,0.779149,0.626807,0.052250,0.633620,0.305155,0.560192,0.231705,-0.227000,0.853106,0.469768,0.054850,0.629070,-0.117321,0.270678,0.527304,-0.617422,-0.761684,0.196539,0.456460,0.287140,-0.096048,0.259283,0.548828,-0.569407,-0.803957,0.171548,0.467400,0.287460,-0.106598,0.260401,0.510199,-0.571642,-0.800002,0.182270,0.457680,0.279800,-0.086183,0.250441,0.530187,-0.518557,-0.837166,0.173928,0.468600,0.280650,0.117321,0.270678,0.527304,0.617421,-0.761684,0.196541,0.543530,0.287140,0.137121,0.282155,0.509653,0.658954,-0.715984,0.230535,0.554410,0.288380,0.106598,0.260401,0.510199,0.571642,-0.800001,0.182272,0.542310,0.279800,0.126084,0.270352,0.493121,0.599100,-0.777613,0.190783,0.553260,0.280410,0.086183,0.250441,0.530187,0.518559,-0.837165,0.173931,0.531390,0.280650,0.096047,0.259283,0.548828,0.569408,-0.803956,0.171549,0.532600,0.287460,-0.296439,0.559547,0.228488,0.112658,0.825272,0.553384,0.945770,0.632860,-0.304224,0.574943,0.211784,0.005097,0.562789,0.826585,0.938460,0.639300,-0.286894,0.559018,0.227680,-0.006286,0.779154,0.626801,0.947410,0.634920,-0.305188,0.560194,0.231714,0.226971,0.853143,0.469715,0.944810,0.630370,-0.308124,0.550302,0.229422,-0.903127,-0.013318,0.429166,0.943310,0.626540,-0.305188,0.560194,0.231714,-0.874185,0.122553,0.469874,0.944810,0.630370,-0.308446,0.538543,0.226201,-0.892244,-0.060911,0.447427,0.941790,0.621560,-0.333697,0.547397,0.180364,-0.941802,-0.336067,-0.008247,0.917480,0.624730,-0.313900,0.508043,0.220033,-0.919931,-0.375706,0.112126,0.938260,0.608150,-0.312972,0.514794,0.223299,-0.895518,-0.001262,0.445023,0.939790,0.611150,-0.334095,0.551367,0.185957,-0.913615,-0.037985,0.404802,0.919670,0.626700,-0.331149,0.545615,0.176256,-0.847716,-0.470304,-0.245341,0.915820,0.623540,0.266575,0.556997,0.265312,0.861396,0.506975,0.031193,0.034020,0.631830,0.259102,0.572573,0.268382,0.862416,0.501721,0.067189,0.033400,0.637820,0.265526,0.560095,0.268220,0.794486,0.458131,-0.398633,0.032880,0.633130,0.259807,0.573505,0.272911,0.648147,0.497578,-0.576474,0.032290,0.638140,0.269758,0.553622,0.260822,0.720632,0.575804,0.386185,0.035990,0.630370,0.305155,0.560192,0.231705,0.873672,0.123589,0.470556,0.054850,0.629070,0.308119,0.550302,0.229421,0.902936,-0.013141,0.429574,0.056350,0.625230,0.308418,0.538541,0.226194,0.892044,-0.060623,0.447864,0.057870,0.620250,0.333697,0.547397,0.180364,0.941839,-0.335968,-0.008076,0.082190,0.623430,0.312969,0.514794,0.223298,0.895504,-0.001182,0.445051,0.059870,0.609840,0.313900,0.508043,0.220033,0.919972,-0.375567,0.112252,0.061400,0.606840,0.334092,0.551367,0.185956,0.913559,-0.037910,0.404936,0.080000,0.625390,0.331149,0.545615,0.176256,0.847735,-0.470287,-0.245307,0.083850,0.622240,-0.259111,0.572573,0.268384,-0.862742,0.500906,0.069064,0.966260,0.639130,-0.265545,0.560096,0.268225,-0.792097,0.460115,-0.401095,0.966780,0.634420,-0.259815,0.573505,0.272913,-0.648333,0.497633,-0.576217,0.967370,0.639450,-0.266600,0.556998,0.265318,-0.860315,0.508857,0.030368,0.965630,0.633130,-0.269833,0.553625,0.260841,-0.720912,0.576245,0.385003,0.963660,0.631670,0.275165,0.552545,0.254813,0.545389,0.667598,0.506818,0.039300,0.629700,0.280395,0.552758,0.247559,0.482178,0.766392,0.424439,0.043360,0.630020,-0.211866,0.445855,0.514331,-0.861682,-0.296496,0.411818,0.411350,0.342970,-0.228804,0.476853,0.502466,-0.888360,-0.284177,0.360639,0.401500,0.352820,-0.228987,0.461219,0.488928,-0.897984,-0.275167,0.343378,0.398850,0.345920,-0.211752,0.464188,0.527847,-0.850078,-0.304291,0.429854,0.413240,0.350700,-0.228127,0.491167,0.514377,-0.878817,-0.290667,0.378410,0.403850,0.358860,-0.211100,0.480892,0.540447,-0.842500,-0.306012,0.443341,0.415250,0.357630,0.211866,0.445855,0.514331,0.861788,-0.296248,0.411776,0.588640,0.342970,0.228776,0.476851,0.502458,0.888572,-0.283245,0.360848,0.598490,0.352820,0.211747,0.464188,0.527846,0.850293,-0.303636,0.429893,0.586750,0.350700,0.228972,0.461219,0.488924,0.898044,-0.274789,0.343522,0.601140,0.345920,0.211088,0.480891,0.540445,0.842926,-0.304076,0.443862,0.584740,0.357630,0.228072,0.491163,0.514365,0.879288,-0.288482,0.378986,0.596140,0.358860,-0.210605,0.495309,0.551642,-0.834605,-0.314728,0.452086,0.417220,0.363320,-0.227780,0.504257,0.525167,-0.869476,-0.301471,0.391314,0.405740,0.364270,0.210494,0.495305,0.551617,0.835573,-0.310164,0.453449,0.582770,0.363320,0.227707,0.504248,0.525152,0.869919,-0.298011,0.392976,0.594260,0.364270,-0.241535,0.500452,0.484883,-0.928955,-0.247455,0.275334,0.390430,0.358290,-0.250141,0.522445,0.470948,-0.953345,-0.213810,0.213116,0.381540,0.363970,-0.250265,0.509299,0.457152,-0.955227,-0.212888,0.205476,0.377460,0.357410,-0.241416,0.513222,0.497092,-0.921529,-0.257024,0.291071,0.393340,0.364180,0.250106,0.522441,0.470942,0.952493,-0.217903,0.212782,0.618450,0.363970,0.241491,0.500451,0.484872,0.929426,-0.245105,0.275846,0.609570,0.358290,0.250130,0.509288,0.457124,0.955382,-0.211286,0.206406,0.622530,0.357410,0.241280,0.513209,0.497061,0.921318,-0.256859,0.291886,0.606650,0.364180,-0.241529,0.487743,0.472805,-0.935501,-0.239399,0.259857,0.387820,0.352730,-0.241388,0.474333,0.460248,-0.939385,-0.221830,0.261435,0.385210,0.346760,-0.249903,0.497107,0.445021,-0.956525,-0.209306,0.203104,0.374720,0.352030,-0.249703,0.485089,0.433763,-0.956406,-0.182125,0.228293,0.372470,0.346840,-0.275167,0.552545,0.254814,-0.546604,0.668113,0.504826,0.960350,0.631000,-0.280395,0.552758,0.247559,-0.482240,0.766304,0.424527,0.956290,0.631320,0.283367,0.553171,0.237685,0.851825,0.186836,0.489374,0.047650,0.631420,0.271481,0.573240,0.250754,0.740121,0.020135,0.672172,0.041150,0.636640,0.273820,0.576887,0.249852,0.682841,-0.168056,0.710975,0.041800,0.637950,0.241507,0.487742,0.472800,0.935813,-0.237504,0.260473,0.612170,0.352730,0.249896,0.497107,0.445019,0.956803,-0.206930,0.204227,0.625270,0.352030,0.241388,0.474333,0.460248,0.939377,-0.221496,0.261746,0.614780,0.346760,0.249700,0.485089,0.433762,0.956451,-0.181787,0.228374,0.627520,0.346840,-0.283372,0.553171,0.237686,-0.851606,0.186291,0.489961,0.952000,0.632720,-0.271486,0.573240,0.250755,-0.740194,0.019680,0.672106,0.958500,0.637940,-0.273828,0.576887,0.249854,-0.682938,-0.168091,0.710873,0.957860,0.639240,0.277055,0.581102,0.249142,0.560459,-0.402287,0.723914,0.042690,0.639820,-0.330126,0.556816,0.191852,-0.875991,0.016288,0.482052,0.923080,0.629340,-0.310305,0.525719,0.224787,-0.846193,0.078411,0.527077,0.940790,0.616000,-0.281240,0.608785,0.266958,-0.489651,-0.860861,0.138420,0.965720,0.651200,-0.293306,0.616557,0.258308,-0.696213,-0.670668,0.255912,0.960110,0.656700,-0.293925,0.619898,0.261462,-0.923919,-0.277892,-0.262965,0.961730,0.658400,-0.282729,0.606692,0.272934,-0.596630,-0.632892,-0.493437,0.968670,0.651950,0.330122,0.556816,0.191851,0.875848,0.016530,0.482304,0.076580,0.628040,0.310305,0.525719,0.224787,0.845953,0.078975,0.527377,0.058870,0.614690,0.281216,0.608784,0.266952,0.489790,-0.860781,0.138426,0.033950,0.649910,0.293265,0.616555,0.258297,0.696448,-0.670427,0.255906,0.039560,0.655390,0.293900,0.619896,0.261456,0.923711,-0.278414,-0.263142,0.037950,0.657090,0.282702,0.606690,0.272927,0.596506,-0.632857,-0.493632,0.030990,0.650670,-0.181559,0.318647,0.469567,-0.805085,-0.509344,0.303985,0.423310,0.294580,-0.205969,0.358193,0.458479,-0.865932,-0.363659,0.343386,0.407980,0.306430,-0.202685,0.337698,0.441231,-0.843449,-0.464648,0.269620,0.406840,0.297050,-0.182125,0.343099,0.497627,-0.842570,-0.388152,0.373381,0.426590,0.306140,-0.175047,0.300784,0.449247,-0.726979,-0.670543,0.147897,0.422280,0.284830,-0.196403,0.320375,0.423542,-0.774641,-0.621644,0.116144,0.405360,0.287640,-0.224156,0.361249,0.408323,-0.878464,-0.424048,0.220191,0.387330,0.300120,-0.218323,0.345112,0.392751,-0.818824,-0.568609,0.078809,0.385690,0.291370,-0.227005,0.380245,0.424048,-0.898301,-0.325974,0.294613,0.389120,0.309090,-0.242615,0.399468,0.394087,-0.922796,-0.288178,0.255737,0.372380,0.311090,-0.239773,0.381479,0.378841,-0.900748,-0.397695,0.174620,0.370570,0.302230,-0.234107,0.366899,0.365085,-0.846733,-0.530571,0.039210,0.369230,0.294190,-0.251134,0.398419,0.355349,-0.915418,-0.380506,0.131245,0.356810,0.304250,-0.245747,0.385346,0.342149,-0.866627,-0.498908,-0.006941,0.355120,0.296660,-0.253751,0.415539,0.370687,-0.935670,-0.262475,0.235855,0.358970,0.313040,0.205969,0.358193,0.458479,0.865932,-0.363659,0.343386,0.592010,0.306430,0.181559,0.318647,0.469567,0.805085,-0.509344,0.303985,0.576680,0.294580,0.202685,0.337698,0.441231,0.843449,-0.464648,0.269620,0.593150,0.297050,0.182125,0.343098,0.497627,0.842570,-0.388152,0.373381,0.573400,0.306140,0.227005,0.380245,0.424048,0.898301,-0.325974,0.294613,0.610870,0.309090,0.224156,0.361249,0.408323,0.878464,-0.424048,0.220192,0.612660,0.300120,0.196403,0.320375,0.423542,0.774642,-0.621644,0.116145,0.594630,0.287640,0.218323,0.345112,0.392751,0.818824,-0.568609,0.078810,0.614300,0.291370,0.175047,0.300784,0.449247,0.726979,-0.670543,0.147897,0.577710,0.284830,0.242615,0.399468,0.394087,0.922796,-0.288178,0.255737,0.627610,0.311090,0.239773,0.381479,0.378841,0.900748,-0.397694,0.174620,0.629420,0.302230,0.253751,0.415539,0.370687,0.935671,-0.262473,0.235854,0.641020,0.313040,0.251134,0.398419,0.355350,0.915418,-0.380506,0.131244,0.643190,0.304250,0.234107,0.366899,0.365085,0.846733,-0.530571,0.039209,0.630760,0.294190,0.245747,0.385346,0.342149,0.866628,-0.498907,-0.006942,0.644870,0.296660,-0.167552,0.307057,0.484960,-0.776818,-0.551152,0.304607,0.431150,0.293060,-0.168844,0.327001,0.508578,-0.826217,-0.434679,0.358358,0.433150,0.302940,-0.161976,0.317185,0.512768,-0.816379,-0.464856,0.342687,0.436400,0.300580,-0.159141,0.299177,0.492298,-0.751739,-0.596760,0.280653,0.434970,0.291610,-0.150089,0.283613,0.473489,-0.654503,-0.733639,0.182755,0.434980,0.282330,-0.160218,0.289910,0.464783,-0.685613,-0.707115,0.172983,0.430620,0.283400,-0.183964,0.307741,0.405834,-0.704423,-0.709742,0.007435,0.404180,0.277290,-0.207627,0.332382,0.376813,-0.745364,-0.665769,-0.034402,0.384260,0.282000,-0.162309,0.288925,0.430216,-0.683186,-0.728086,0.056103,0.421420,0.274110,-0.152770,0.277917,0.414263,-0.756677,-0.640682,0.130254,0.420540,0.264500,-0.172866,0.297403,0.390456,-0.746746,-0.661664,0.067604,0.403180,0.267830,-0.196780,0.322106,0.362478,-0.760623,-0.649182,0.003909,0.383040,0.273240,-0.147802,0.277791,0.445778,-0.671528,-0.731000,0.121196,0.430100,0.272820,-0.137779,0.270974,0.455568,-0.658861,-0.730072,0.181373,0.434790,0.272140,-0.129554,0.257252,0.441261,-0.732948,-0.624718,0.269285,0.434210,0.262790,-0.139282,0.265163,0.430513,-0.756215,-0.622891,0.200363,0.429370,0.263280,0.167552,0.307057,0.484960,0.776817,-0.551152,0.304608,0.568840,0.293060,0.168844,0.327001,0.508578,0.826217,-0.434679,0.358357,0.566840,0.302940,0.160218,0.289910,0.464783,0.685612,-0.707116,0.172983,0.569370,0.283400,0.150089,0.283613,0.473489,0.654504,-0.733639,0.182754,0.565010,0.282330,0.159141,0.299177,0.492298,0.751739,-0.596760,0.280652,0.565020,0.291610,0.161976,0.317185,0.512768,0.816379,-0.464856,0.342686,0.563590,0.300580,0.183964,0.307741,0.405834,0.704422,-0.709742,0.007435,0.595810,0.277290,0.207627,0.332382,0.376813,0.745365,-0.665769,-0.034403,0.615730,0.282000,0.172866,0.297403,0.390456,0.746746,-0.661665,0.067603,0.596810,0.267830,0.196780,0.322106,0.362478,0.760623,-0.649182,0.003908,0.616960,0.273240,0.152770,0.277917,0.414263,0.756677,-0.640683,0.130254,0.579450,0.264500,0.162309,0.288925,0.430216,0.683186,-0.728086,0.056104,0.578570,0.274110,0.147802,0.277791,0.445778,0.671528,-0.731000,0.121195,0.569890,0.272820,0.139282,0.265163,0.430513,0.756215,-0.622891,0.200363,0.570620,0.263280,0.129554,0.257252,0.441261,0.732948,-0.624717,0.269285,0.565790,0.262790,0.137779,0.270974,0.455568,0.658862,-0.730072,0.181371,0.565200,0.272140,-0.128141,0.264771,0.464666,-0.646097,-0.729506,0.224455,0.439930,0.271670,-0.114953,0.256777,0.476539,-0.625192,-0.735692,0.260563,0.447210,0.270990,-0.119813,0.250617,0.450791,-0.702345,-0.635495,0.320714,0.439520,0.262500,-0.106830,0.242841,0.461853,-0.670857,-0.646404,0.363473,0.446810,0.261780,-0.096003,0.246990,0.491858,-0.607402,-0.742982,0.281143,0.458360,0.270040,-0.088871,0.232731,0.474823,-0.657729,-0.637094,0.401874,0.457690,0.260290,-0.067414,0.218519,0.487385,-0.618268,-0.623402,0.478660,0.470690,0.257660,-0.076156,0.238094,0.508466,-0.556987,-0.772677,0.304525,0.469470,0.270470,0.128141,0.264771,0.464666,0.646097,-0.729506,0.224454,0.560060,0.271670,0.140079,0.277822,0.481511,0.627880,-0.755712,0.186189,0.560260,0.281360,0.119813,0.250617,0.450791,0.702345,-0.635495,0.320714,0.560470,0.262500,0.106830,0.242841,0.461853,0.670858,-0.646404,0.363472,0.553180,0.261780,0.114953,0.256777,0.476539,0.625192,-0.735692,0.260562,0.552780,0.270990,0.096003,0.246990,0.491858,0.607402,-0.742981,0.281143,0.541630,0.270040,0.067414,0.218519,0.487386,0.618268,-0.623402,0.478659,0.529300,0.257660,0.088871,0.232731,0.474823,0.657729,-0.637095,0.401873,0.542300,0.260290,0.076156,0.238094,0.508466,0.556987,-0.772677,0.304525,0.530520,0.270470,-0.216598,0.347528,0.338732,-0.789681,-0.612381,-0.037337,0.365650,0.279300,-0.225372,0.356020,0.351430,-0.781754,-0.619784,-0.068770,0.367470,0.286410,-0.231666,0.369562,0.318169,-0.827612,-0.558999,-0.050780,0.350510,0.284720,-0.238476,0.376331,0.329727,-0.812294,-0.574691,-0.099543,0.352910,0.290250,0.225372,0.356020,0.351430,0.781753,-0.619784,-0.068770,0.632520,0.286410,0.216598,0.347528,0.338732,0.789680,-0.612381,-0.037338,0.634350,0.279300,0.238476,0.376331,0.329727,0.812294,-0.574691,-0.099542,0.647080,0.290250,0.231667,0.369562,0.318169,0.827611,-0.559001,-0.050781,0.649480,0.284720,-0.065532,0.247503,0.584062,-0.427612,-0.893414,0.137690,0.479730,0.291400,-0.083977,0.260461,0.589343,-0.630707,-0.738759,0.237579,0.474430,0.295350,-0.078935,0.252143,0.568249,-0.500189,-0.851767,0.155897,0.474660,0.289400,-0.070239,0.254880,0.607163,-0.558429,-0.795777,0.234300,0.479540,0.297350,-0.057236,0.242024,0.561265,-0.333600,-0.931249,0.146580,0.480880,0.284800,-0.070000,0.244859,0.547709,-0.423775,-0.889613,0.170305,0.475800,0.282810,-0.048829,0.233856,0.535294,-0.348499,-0.880203,0.322164,0.481420,0.275020,-0.060842,0.234593,0.523680,-0.449549,-0.830774,0.328208,0.476500,0.272740,-0.041434,0.219666,0.515440,-0.410976,-0.743174,0.528007,0.482260,0.263970,-0.052555,0.218831,0.504874,-0.505252,-0.696482,0.509543,0.477700,0.261360,0.083976,0.260461,0.589343,0.631431,-0.737995,0.238028,0.525560,0.295350,0.065532,0.247503,0.584062,0.427613,-0.893414,0.137690,0.520260,0.291400,0.078935,0.252143,0.568249,0.500191,-0.851766,0.155897,0.525340,0.289400,0.070239,0.254880,0.607163,0.558834,-0.795459,0.234412,0.520450,0.297350,0.070000,0.244859,0.547709,0.423777,-0.889612,0.170306,0.524190,0.282810,0.057236,0.242024,0.561265,0.333601,-0.931249,0.146581,0.519110,0.284800,0.048829,0.233856,0.535294,0.348499,-0.880204,0.322165,0.518570,0.275020,0.060842,0.234593,0.523680,0.449549,-0.830774,0.328208,0.523490,0.272740,0.052555,0.218831,0.504874,0.505251,-0.696482,0.509543,0.522290,0.261360,0.041434,0.219666,0.515440,0.410976,-0.743175,0.528006,0.517730,0.263970,-0.069954,0.265121,0.634519,-0.637335,-0.688322,0.346435,0.481570,0.304230,-0.083882,0.271213,0.615684,-0.718545,-0.621776,0.311589,0.476370,0.302530,0.069950,0.265122,0.634517,0.638637,-0.687226,0.346213,0.518420,0.304230,0.083839,0.271226,0.615661,0.719807,-0.620125,0.311966,0.523620,0.302530,-0.040487,0.242109,0.608609,-0.225621,-0.961740,0.155406,0.487780,0.293870,-0.057763,0.250839,0.621184,-0.453238,-0.853639,0.256664,0.483740,0.298780,-0.053113,0.243685,0.596415,-0.325206,-0.935586,0.137547,0.484040,0.292640,-0.045838,0.248713,0.632214,-0.337720,-0.895053,0.291249,0.487240,0.299780,-0.029723,0.237969,0.583154,-0.128581,-0.984020,0.123170,0.490000,0.287180,-0.045020,0.239388,0.571238,-0.241877,-0.961966,0.126953,0.485220,0.285780,-0.057813,0.261734,0.647809,-0.526841,-0.744864,0.409409,0.485310,0.305450,-0.046874,0.259848,0.656786,-0.403102,-0.782349,0.474804,0.488220,0.306180,0.057763,0.250839,0.621184,0.453278,-0.853614,0.256673,0.516250,0.298780,0.040487,0.242109,0.608609,0.225615,-0.961740,0.155415,0.512210,0.293870,0.053113,0.243685,0.596415,0.325207,-0.935586,0.137547,0.515950,0.292640,0.045838,0.248713,0.632214,0.337687,-0.895060,0.291263,0.512750,0.299780,0.045020,0.239388,0.571238,0.241878,-0.961966,0.126953,0.514770,0.285780,0.029723,0.237969,0.583154,0.128582,-0.984020,0.123170,0.509990,0.287180,0.057813,0.261734,0.647809,0.526553,-0.745145,0.409268,0.514680,0.305450,0.046874,0.259848,0.656785,0.402917,-0.782492,0.474726,0.511770,0.306180,-0.021855,0.239375,0.607748,-0.080247,-0.990645,0.110379,0.493140,0.292470,-0.030351,0.242274,0.622241,-0.172162,-0.965962,0.193074,0.490990,0.295700,-0.035257,0.248456,0.641260,-0.237817,-0.910347,0.338691,0.490200,0.300420,-0.022628,0.243293,0.632434,-0.123305,-0.958175,0.258256,0.493500,0.297470,-0.026536,0.249259,0.647474,-0.146018,-0.905483,0.398470,0.492630,0.300820,-0.016460,0.240567,0.621723,-0.036072,-0.986754,0.158162,0.495260,0.295450,-0.036893,0.259186,0.662552,-0.267464,-0.803322,0.532106,0.490710,0.306370,-0.028065,0.259353,0.665889,-0.128509,-0.805187,0.578930,0.492850,0.306290,0.021855,0.239375,0.607748,0.080249,-0.990644,0.110380,0.506850,0.292470,0.030351,0.242274,0.622241,0.172174,-0.965958,0.193085,0.509000,0.295700,0.016459,0.240567,0.621723,0.036076,-0.986754,0.158163,0.504730,0.295450,0.022628,0.243293,0.632434,0.123328,-0.958171,0.258260,0.506500,0.297470,0.035256,0.248457,0.641260,0.237821,-0.910341,0.338705,0.509790,0.300420,0.026536,0.249259,0.647474,0.146076,-0.905472,0.398474,0.507360,0.300820,0.036891,0.259187,0.662551,0.267282,-0.803392,0.532092,0.509290,0.306370,0.028064,0.259353,0.665888,0.128327,-0.805170,0.578994,0.507140,0.306290,-0.016493,0.244595,0.638899,-0.051902,-0.943078,0.328498,0.495230,0.298560,-0.019156,0.250313,0.651565,-0.062734,-0.889809,0.452000,0.494560,0.301050,-0.011201,0.245852,0.642232,0.051183,-0.927633,0.369970,0.496700,0.299100,-0.012376,0.242074,0.630487,0.030705,-0.972936,0.229025,0.496540,0.297420,-0.009845,0.243517,0.635321,0.092506,-0.953189,0.287876,0.497230,0.298210,0.019155,0.250313,0.651565,0.062751,-0.889807,0.452001,0.505430,0.301050,0.016493,0.244595,0.638899,0.051905,-0.943077,0.328500,0.504760,0.298560,0.012376,0.242074,0.630487,-0.030703,-0.972936,0.229028,0.503450,0.297420,0.009845,0.243517,0.635321,-0.092508,-0.953187,0.287882,0.502760,0.298210,0.011201,0.245852,0.642232,-0.051187,-0.927631,0.369974,0.503290,0.299100,-0.031157,0.220009,0.522792,-0.334480,-0.772016,0.540476,0.487100,0.265680,-0.037365,0.233087,0.543682,-0.267949,-0.913033,0.307529,0.486050,0.276290,-0.025184,0.232177,0.550060,-0.176371,-0.934668,0.308689,0.490650,0.277140,-0.020788,0.219918,0.527943,-0.249679,-0.791516,0.557819,0.491830,0.266760,0.031157,0.220009,0.522792,0.334481,-0.772016,0.540475,0.512890,0.265680,0.037365,0.233087,0.543682,0.267949,-0.913033,0.307529,0.513940,0.276290,0.020788,0.219918,0.527943,0.249680,-0.791517,0.557818,0.508160,0.266760,0.025184,0.232177,0.550060,0.176373,-0.934668,0.308688,0.509340,0.277140,-0.011067,0.238455,0.600932,-0.017416,-0.995073,0.097602,0.496380,0.291530,-0.013184,0.236533,0.579817,-0.043406,-0.989436,0.138323,0.495390,0.286830,-0.008613,0.240026,0.615909,0.023242,-0.990945,0.132245,0.497510,0.294290,-0.000000,0.240036,0.614204,-0.000003,-0.990298,0.138960,0.500000,0.293950,0.0,0.238267,0.599302,-0.000002,-0.994583,0.103944,0.500000,0.291690,0.0,0.236208,0.579539,-0.000001,-0.989108,0.147191,0.500000,0.287450,0.0,0.231150,0.554960,-0.000002,-0.944005,0.329932,0.500000,0.278680,-0.012459,0.231413,0.553696,-0.086234,-0.942721,0.322244,0.495330,0.278140,0.0,0.219477,0.532247,-0.000002,-0.810169,0.586196,0.500000,0.267470,-0.010343,0.219648,0.531132,-0.138930,-0.804766,0.577105,0.496060,0.267340,0.011067,0.238455,0.600932,0.017416,-0.995073,0.097601,0.503610,0.291530,0.013184,0.236533,0.579817,0.043404,-0.989436,0.138323,0.504600,0.286830,0.008613,0.240026,0.615909,-0.023242,-0.990944,0.132246,0.502480,0.294290,0.012459,0.231413,0.553696,0.086232,-0.942721,0.322243,0.504660,0.278140,0.010343,0.219648,0.531132,0.138930,-0.804766,0.577105,0.503930,0.267340,-0.000000,0.241923,0.625019,-0.000002,-0.977854,0.209286,0.500000,0.295910,-0.006664,0.241809,0.626225,0.075684,-0.976974,0.199485,0.498180,0.296400,-0.005676,0.243878,0.634333,0.109187,-0.953505,0.280901,0.498440,0.297970,-0.000000,0.244323,0.633855,0.000003,-0.958748,0.284258,0.500000,0.297610,0.006664,0.241809,0.626225,-0.075685,-0.976973,0.199487,0.501810,0.296400,0.005676,0.243878,0.634333,-0.109187,-0.953504,0.280906,0.501550,0.297970,-0.000000,0.247423,0.643282,0.000006,-0.928873,0.370397,0.500000,0.299040,-0.005769,0.246876,0.643153,0.097853,-0.922449,0.373513,0.498310,0.299140,-0.283327,0.490149,0.273689,-0.478742,-0.709659,0.516905,0.965310,0.597110,-0.277810,0.505315,0.288494,-0.854894,-0.281894,0.435536,0.977760,0.601620,-0.294967,0.623642,0.265315,-0.968614,-0.176887,-0.174638,0.963260,0.660480,-0.285582,0.607945,0.276485,-0.940275,-0.319927,-0.116318,0.970180,0.653890,-0.295981,0.629691,0.271938,-0.992853,-0.118111,0.017106,0.964650,0.664340,-0.286571,0.612365,0.284841,-0.966593,-0.155897,0.203453,0.972980,0.658150,-0.277064,0.581103,0.249144,-0.560533,-0.402392,0.723798,0.956970,0.641110,0.283324,0.490149,0.273688,0.478936,-0.709507,0.516933,0.034340,0.595770,0.277807,0.505314,0.288493,0.854996,-0.281454,0.435622,0.021870,0.600290,0.294941,0.623640,0.265309,0.969073,-0.176239,-0.172733,0.036410,0.659170,0.285556,0.607943,0.276479,0.940831,-0.318979,-0.114409,0.029490,0.652610,0.295918,0.629688,0.271923,0.992758,-0.118491,0.019806,0.035030,0.663030,0.286505,0.612362,0.284824,0.966450,-0.153833,0.205692,0.026710,0.656850,0.296010,0.638526,0.281866,0.948806,-0.169447,0.266562,0.034120,0.670420,0.285920,0.649698,0.300891,0.904094,-0.094529,0.416748,0.026520,0.681930,0.286354,0.630637,0.294007,0.921994,-0.161678,0.351833,0.025630,0.669890,0.296599,0.652525,0.287173,0.835076,-0.162137,0.525699,0.035300,0.679830,-0.286502,0.630646,0.294039,-0.922200,-0.160659,0.351761,0.974040,0.671200,-0.285978,0.649702,0.300900,-0.904636,-0.092815,0.415956,0.973140,0.683260,-0.296048,0.638529,0.281873,-0.949790,-0.167369,0.264361,0.965540,0.671740,-0.296638,0.652528,0.287179,-0.836391,-0.159921,0.524285,0.964350,0.681160,0.292039,0.590337,0.224389,0.961669,0.269523,-0.050500,0.055500,0.644230,0.291992,0.600563,0.240195,0.939147,0.274490,-0.206538,0.048800,0.648500,0.289870,0.595549,0.223371,0.923501,0.368905,-0.105142,0.055820,0.646210,0.288093,0.607127,0.237290,0.884496,0.405565,-0.230617,0.050300,0.651000,-0.313093,0.701587,0.261976,-0.494121,0.587665,0.640699,0.939380,0.698980,-0.303292,0.684873,0.279446,-0.625929,0.325121,0.708879,0.951580,0.697240,-0.286691,0.671480,0.300021,-0.894012,0.016949,0.447723,0.967150,0.694390,-0.298932,0.668729,0.286859,-0.717827,0.035673,0.695307,0.960020,0.690460,0.313118,0.701589,0.261986,0.494583,0.587418,0.640568,0.060270,0.697670,0.303307,0.684874,0.279453,0.626069,0.324587,0.709000,0.048070,0.695920,0.286674,0.671481,0.300032,0.892226,0.016562,0.451285,0.032500,0.693060,0.298945,0.668730,0.286868,0.717400,0.034172,0.695823,0.039630,0.689140,-0.170361,0.359772,0.539454,-0.857400,-0.343935,0.382849,0.435950,0.318200,-0.165150,0.346186,0.538493,-0.844154,-0.381221,0.376928,0.438010,0.313600,-0.159461,0.333797,0.538630,-0.831087,-0.410530,0.375178,0.440700,0.309520,0.170361,0.359772,0.539454,0.857329,-0.343955,0.382990,0.564040,0.318200,0.165150,0.346186,0.538493,0.844085,-0.381210,0.377092,0.561980,0.313600,0.159461,0.333797,0.538630,0.831069,-0.410456,0.375300,0.559290,0.309520,-0.265615,0.433457,0.329517,-0.968638,-0.248070,0.014188,0.338740,0.312440,-0.254450,0.402958,0.323556,-0.899823,-0.428455,-0.082123,0.342860,0.299860,-0.259444,0.414341,0.339172,-0.941064,-0.331614,0.066560,0.346580,0.307240,-0.266667,0.446432,0.347889,-0.971028,-0.166503,0.171409,0.344220,0.320200,-0.261494,0.429596,0.356167,-0.952236,-0.224141,0.207381,0.350410,0.315620,-0.247289,0.394032,0.310385,-0.859721,-0.487769,-0.151531,0.339730,0.293450,-0.241074,0.387366,0.298825,-0.889498,-0.453856,-0.052995,0.336870,0.288040,0.265615,0.433457,0.329517,0.968638,-0.248070,0.014187,0.661260,0.312440,0.254450,0.402958,0.323556,0.899824,-0.428455,-0.082123,0.657130,0.299860,0.259444,0.414341,0.339172,0.941064,-0.331615,0.066559,0.653410,0.307240,0.261494,0.429596,0.356167,0.952274,-0.224026,0.207332,0.649580,0.315620,0.266667,0.446432,0.347889,0.971026,-0.166418,0.171506,0.655770,0.320200,0.247289,0.394032,0.310385,0.859722,-0.487768,-0.151530,0.660260,0.293450,0.241075,0.387366,0.298826,0.889497,-0.453857,-0.052996,0.663120,0.288040,-0.268859,0.453706,0.307191,-0.969588,-0.200621,-0.140178,0.324610,0.316550,-0.270327,0.457285,0.325944,-0.985280,-0.170592,0.011060,0.332310,0.321390,-0.272778,0.477913,0.309630,-0.991707,-0.110918,-0.064912,0.320800,0.326750,-0.273355,0.479939,0.326017,-0.995189,-0.087624,0.043838,0.327970,0.331220,-0.270482,0.467040,0.342435,-0.981954,-0.116265,0.149163,0.337910,0.328420,-0.272614,0.482002,0.338378,-0.988830,-0.072420,0.130269,0.333320,0.333750,-0.265884,0.459751,0.289500,-0.950986,-0.224492,-0.212671,0.315310,0.316750,-0.263437,0.466877,0.273251,-0.958777,-0.271154,-0.084978,0.305920,0.318140,-0.270912,0.480684,0.294962,-0.979561,-0.180744,-0.088273,0.313100,0.326690,-0.269630,0.484560,0.279227,-0.873458,-0.471959,0.119689,0.304410,0.327840,0.268859,0.453706,0.307191,0.969594,-0.200601,-0.140169,0.675380,0.316550,0.270327,0.457285,0.325944,0.985289,-0.170539,0.011067,0.667680,0.321390,0.270482,0.467040,0.342435,0.981927,-0.116282,0.149326,0.662080,0.328420,0.273353,0.479939,0.326016,0.995248,-0.087148,0.043441,0.672020,0.331220,0.272610,0.482002,0.338377,0.988892,-0.072192,0.129924,0.666670,0.333750,0.272777,0.477913,0.309629,0.991769,-0.110392,-0.064874,0.679190,0.326750,0.265884,0.459751,0.289500,0.950989,-0.224482,-0.212667,0.684680,0.316750,0.270911,0.480684,0.294962,0.979657,-0.180412,-0.087878,0.686890,0.326690,0.263437,0.466877,0.273251,0.958779,-0.271151,-0.084972,0.694070,0.318140,0.269630,0.484560,0.279226,0.873480,-0.471865,0.119902,0.695580,0.327840,-0.275393,0.514472,0.299513,-0.987967,-0.132131,0.080388,0.309750,0.340780,-0.277810,0.505315,0.288494,-0.854894,-0.281894,0.435536,0.305390,0.336640,-0.275943,0.524658,0.312343,-0.995170,-0.075615,0.062595,0.314550,0.345800,-0.271500,0.514168,0.351527,-0.987173,-0.045315,0.153091,0.334290,0.347360,-0.274279,0.521506,0.333171,-0.995362,-0.036035,0.089200,0.324840,0.347420,-0.267849,0.498863,0.365693,-0.974490,-0.077431,0.210651,0.342740,0.343050,-0.263453,0.481185,0.377404,-0.964899,-0.110079,0.238436,0.350540,0.337860,-0.258567,0.467488,0.389840,-0.955539,-0.146520,0.255885,0.357820,0.335000,-0.251850,0.455255,0.406522,-0.947509,-0.182553,0.262489,0.366660,0.333130,0.277807,0.505314,0.288493,0.854996,-0.281454,0.435622,0.694600,0.336640,0.275362,0.514471,0.299506,0.987920,-0.131534,0.081936,0.690240,0.340780,0.275887,0.524659,0.312329,0.995192,-0.075085,0.062896,0.685440,0.345800,0.274245,0.521505,0.333164,0.995422,-0.035552,0.088716,0.675160,0.347420,0.271504,0.514168,0.351528,0.987039,-0.044735,0.154116,0.665700,0.347360,0.267844,0.498863,0.365692,0.974327,-0.076541,0.211725,0.657250,0.343050,0.263434,0.481186,0.377399,0.965012,-0.109235,0.238368,0.649450,0.337860,0.258566,0.467488,0.389840,0.955642,-0.146163,0.255706,0.642170,0.335000,0.251850,0.455255,0.406522,0.947528,-0.182471,0.262480,0.633330,0.333130,-0.292059,0.590338,0.224395,-0.961706,0.269341,-0.050756,0.944160,0.645530,-0.292017,0.600564,0.240202,-0.939348,0.273944,-0.206350,0.950860,0.649810,-0.289876,0.595550,0.223372,-0.923088,0.369623,-0.106241,0.943840,0.647510,-0.288121,0.607129,0.237298,-0.884090,0.406054,-0.231310,0.949370,0.652310,0.284107,0.614257,0.233230,0.949252,0.314469,0.005482,0.052920,0.653910,0.289643,0.596829,0.218715,0.945148,0.299360,0.130683,0.057910,0.646560,0.292740,0.598438,0.210123,0.789656,0.152450,0.594308,0.059720,0.646780,0.283022,0.621853,0.227492,0.929032,0.065777,0.364106,0.055220,0.655960,-0.284119,0.614258,0.233233,-0.949111,0.314903,0.004957,0.946740,0.655210,-0.289647,0.596829,0.218716,-0.945025,0.300012,0.130077,0.941750,0.647860,-0.283027,0.621853,0.227493,-0.929034,0.065940,0.364071,0.944450,0.657270,-0.292749,0.598438,0.210126,-0.789507,0.152487,0.594496,0.939940,0.648080,0.346461,0.640125,0.165358,0.992497,-0.051971,0.110672,0.096320,0.659790,0.341768,0.675361,0.179589,0.929610,-0.037348,0.366647,0.092030,0.672160,0.341374,0.637032,0.172381,0.937730,-0.087293,0.336218,0.093210,0.659100,0.345974,0.681910,0.170284,0.994926,0.076561,0.065276,0.095140,0.672920,0.344364,0.639959,0.158293,0.954332,-0.004548,-0.298715,0.097930,0.659350,-0.256587,0.520228,0.436042,-0.970222,-0.177849,0.164433,0.368100,0.357660,-0.256134,0.507728,0.424300,-0.968723,-0.174825,0.176102,0.365410,0.352300,-0.256045,0.495849,0.414028,-0.964950,-0.148559,0.216339,0.363280,0.347450,-0.261572,0.512609,0.398360,-0.972975,-0.115220,0.200109,0.354700,0.351040,-0.261813,0.526507,0.408041,-0.978608,-0.135232,0.155043,0.356640,0.356580,-0.261977,0.540217,0.419249,-0.980944,-0.141985,0.132629,0.359250,0.362320,0.256532,0.520221,0.436033,0.969543,-0.177426,0.168838,0.631890,0.357660,0.256119,0.507728,0.424297,0.968212,-0.176346,0.177393,0.634580,0.352300,0.261895,0.526506,0.408061,0.979058,-0.136352,0.151177,0.643350,0.356580,0.262199,0.540216,0.419303,0.980942,-0.139696,0.135044,0.640740,0.362320,0.261543,0.512609,0.398353,0.973519,-0.115222,0.197447,0.645290,0.351040,0.256035,0.495849,0.414026,0.964981,-0.149018,0.215884,0.636710,0.347450,-0.256643,0.533996,0.450077,-0.970565,-0.174564,0.165924,0.372280,0.364530,-0.262404,0.553734,0.432902,-0.981240,-0.140447,0.132069,0.363240,0.368880,0.256547,0.533984,0.450057,0.970461,-0.176553,0.164424,0.627710,0.364530,0.262165,0.553701,0.432849,0.981369,-0.138737,0.132919,0.636750,0.368880,-0.345974,0.681910,0.170284,-0.994926,0.076561,0.065276,0.904510,0.674230,-0.346461,0.640125,0.165358,-0.992498,-0.051968,0.110668,0.903320,0.661090,-0.341768,0.675361,0.179589,-0.929615,-0.037338,0.366636,0.907610,0.673460,-0.341374,0.637032,0.172381,-0.937752,-0.087270,0.336163,0.906440,0.660400,-0.344364,0.639959,0.158293,-0.954333,-0.004548,-0.298710,0.901710,0.660650,0.328618,0.644856,0.207034,0.794591,-0.045991,0.605401,0.075700,0.663680,0.336923,0.615890,0.196727,0.889139,-0.022838,0.457067,0.080230,0.652560,0.339550,0.627650,0.183527,0.979984,-0.055660,0.191137,0.087380,0.656250,0.338068,0.661987,0.191947,0.923849,0.002298,0.382751,0.084790,0.668500,-0.328628,0.644857,0.207037,-0.794788,-0.045900,0.605149,0.923960,0.664990,-0.339552,0.627650,0.183527,-0.980028,-0.055571,0.190938,0.912270,0.657550,-0.336929,0.615891,0.196729,-0.889235,-0.022692,0.456887,0.919430,0.653870,-0.338068,0.661987,0.191947,-0.923903,0.002398,0.382618,0.914860,0.669800,0.287055,0.630864,0.218656,0.473476,-0.432469,0.767327,0.057760,0.657030,0.303990,0.598859,0.204336,0.156340,-0.063305,0.985672,0.063360,0.646710,0.303323,0.628969,0.219110,0.156248,-0.503464,0.849771,0.062070,0.658330,0.317856,0.600314,0.209782,0.047148,-0.103210,0.993541,0.068350,0.647300,-0.268520,0.574250,0.403194,-0.987548,-0.114255,0.108142,0.347760,0.375000,-0.272912,0.586275,0.372770,-0.991022,-0.085499,0.102789,0.333100,0.378610,-0.267874,0.557275,0.391897,-0.985568,-0.105399,0.132468,0.345120,0.368230,-0.274578,0.618321,0.383795,-0.991634,-0.095025,0.087357,0.334490,0.391700,-0.267401,0.538610,0.382736,-0.981171,-0.087310,0.172281,0.343780,0.360340,-0.271886,0.562385,0.364500,-0.989763,-0.063540,0.127799,0.332350,0.368720,0.272753,0.586269,0.372731,0.990869,-0.087395,0.102673,0.666890,0.378610,0.268304,0.574247,0.403147,0.987678,-0.114915,0.106236,0.652230,0.375000,0.267769,0.557270,0.391874,0.986149,-0.105187,0.128238,0.654870,0.368230,0.274771,0.618324,0.383868,0.991610,-0.099123,0.082974,0.665500,0.391700,0.271798,0.562382,0.364482,0.989512,-0.062405,0.130275,0.667640,0.368720,0.267251,0.538607,0.382707,0.981463,-0.086224,0.171159,0.656210,0.360340,-0.268390,0.585857,0.417337,-0.987458,-0.115510,0.107630,0.352130,0.380330,-0.273785,0.625853,0.404964,-0.990808,-0.097101,0.094186,0.342350,0.395500,-0.267847,0.595002,0.431608,-0.985690,-0.105897,0.131152,0.357070,0.384920,-0.272397,0.629656,0.420679,-0.987528,-0.085917,0.131938,0.348310,0.397690,0.268436,0.585842,0.417365,0.986888,-0.116769,0.111433,0.647860,0.380330,0.267653,0.594992,0.431572,0.985168,-0.110603,0.131188,0.642920,0.384920,0.273927,0.625852,0.405016,0.990119,-0.102132,0.096087,0.657640,0.395500,0.272465,0.629654,0.420715,0.987142,-0.093625,0.129557,0.651680,0.397690,-0.266696,0.604450,0.445205,-0.983640,-0.088914,0.156676,0.361450,0.389510,-0.270557,0.634477,0.435830,-0.983755,-0.070248,0.165198,0.354060,0.400540,0.266748,0.604433,0.445266,0.982892,-0.096831,0.156678,0.638540,0.389510,0.270939,0.634481,0.435981,0.983608,-0.079702,0.161753,0.645930,0.400540,-0.275909,0.665624,0.417632,-0.985922,-0.068057,0.152729,0.344190,0.411140,-0.272713,0.666190,0.435004,-0.981724,-0.057059,0.181554,0.351750,0.412620,-0.277058,0.702341,0.421841,-0.981570,-0.041629,0.186515,0.343720,0.425550,-0.273040,0.699553,0.441603,-0.979073,-0.027470,0.201645,0.352830,0.425850,0.276320,0.665614,0.417759,0.986146,-0.069720,0.150515,0.655800,0.411140,0.273217,0.666191,0.435191,0.982180,-0.056356,0.179295,0.648240,0.412620,0.273435,0.699564,0.441733,0.979471,-0.020092,0.200583,0.647160,0.425850,0.277271,0.702350,0.421928,0.981811,-0.032935,0.186983,0.656270,0.425550,-0.280589,0.705146,0.402352,-0.987468,-0.057353,0.147030,0.335120,0.425390,-0.279611,0.666764,0.380758,-0.992201,-0.091663,0.084471,0.328850,0.409350,-0.278023,0.666409,0.400324,-0.990617,-0.082360,0.109067,0.336930,0.410490,-0.283366,0.707406,0.381771,-0.991721,-0.073550,0.105260,0.326200,0.424960,0.280934,0.705150,0.402484,0.987284,-0.053232,0.149790,0.664870,0.425390,0.279768,0.666775,0.380835,0.992654,-0.093207,0.077141,0.671140,0.409350,0.283566,0.707420,0.381881,0.991805,-0.075045,0.103398,0.673790,0.424960,0.278483,0.666403,0.400472,0.990655,-0.084108,0.107366,0.663060,0.410490,-0.275702,0.595141,0.349058,-0.991886,-0.079747,0.099007,0.322050,0.378460,-0.277861,0.624693,0.354601,-0.992165,-0.086645,0.090012,0.321690,0.389770,-0.274461,0.571528,0.342835,-0.992827,-0.054572,0.106381,0.321810,0.369050,-0.278201,0.592585,0.325106,-0.987611,-0.069905,0.140492,0.312010,0.374020,-0.277179,0.572150,0.321638,-0.987057,-0.061243,0.148215,0.312470,0.366160,-0.283167,0.665506,0.333302,-0.994996,-0.076466,0.064307,0.308670,0.403820,-0.281387,0.666134,0.357066,-0.993118,-0.088629,0.076560,0.318840,0.406410,-0.286179,0.707384,0.334943,-0.995775,-0.079663,0.045681,0.305880,0.421600,-0.285209,0.708669,0.358781,-0.994063,-0.081875,0.071661,0.316090,0.423870,0.275600,0.595140,0.349036,0.991920,-0.080042,0.098426,0.677940,0.378460,0.277812,0.624689,0.354609,0.992406,-0.087940,0.086006,0.678300,0.389770,0.278084,0.592580,0.325078,0.987491,-0.069347,0.141609,0.687980,0.374020,0.274458,0.571529,0.342837,0.992859,-0.052864,0.106945,0.678180,0.369050,0.277130,0.572148,0.321626,0.987095,-0.060217,0.148383,0.687530,0.366160,0.282980,0.665493,0.333266,0.994903,-0.079398,0.062166,0.691320,0.403820,0.281325,0.666134,0.357066,0.993163,-0.091411,0.072608,0.681150,0.406410,0.285453,0.708676,0.358887,0.993767,-0.086704,0.070070,0.683900,0.423870,0.286493,0.707391,0.335055,0.995691,-0.083943,0.039410,0.694110,0.421600,0.317025,0.632289,0.215448,0.531352,-0.216097,0.819126,0.068060,0.660350,0.329038,0.606046,0.205726,0.574076,-0.020900,0.818535,0.073800,0.649450,-0.287061,0.630865,0.218657,-0.473276,-0.432491,0.767438,0.941900,0.658340,-0.304012,0.598860,0.204341,-0.156115,-0.063376,0.985704,0.936300,0.648010,-0.303342,0.628970,0.219115,-0.156362,-0.503452,0.849757,0.937590,0.659640,-0.317892,0.600315,0.209792,-0.047568,-0.103112,0.993532,0.931310,0.648610,-0.317034,0.632289,0.215451,-0.531654,-0.216048,0.818943,0.931600,0.661650,-0.329047,0.606046,0.205729,-0.574432,-0.020754,0.818289,0.925860,0.650760,0.265678,0.574148,0.275884,0.364664,0.277926,-0.888694,0.030130,0.637900,0.267266,0.557806,0.270065,0.705472,0.430159,-0.563270,0.032120,0.632290,0.273781,0.574206,0.278360,0.334932,0.108183,-0.936011,0.026890,0.638060,0.271010,0.554129,0.273338,0.677453,0.352210,-0.645760,0.030500,0.630410,-0.102519,0.402936,0.652240,-0.527531,-0.652352,0.544196,0.468500,0.340900,-0.098707,0.403898,0.656711,-0.493316,-0.699546,0.516986,0.469930,0.341270,-0.106975,0.402309,0.647396,-0.552888,-0.588160,0.590240,0.466870,0.340700,-0.112347,0.401677,0.642752,-0.475381,-0.534512,0.698792,0.464970,0.340400,0.102441,0.402956,0.652276,0.536153,-0.646414,0.542853,0.531490,0.340900,0.106754,0.402400,0.647331,0.561248,-0.584760,0.585710,0.533120,0.340700,0.112155,0.401747,0.642689,0.470559,-0.534589,0.701989,0.535020,0.340400,-0.242383,0.440706,0.429801,-0.934883,-0.223023,0.276140,0.379040,0.331100,-0.229347,0.423493,0.457632,-0.903606,-0.275044,0.328400,0.393390,0.328850,-0.211229,0.405119,0.487127,-0.871215,-0.305248,0.384459,0.408540,0.326140,-0.192901,0.393235,0.518115,-0.862337,-0.303501,0.405292,0.422520,0.325800,0.242383,0.440706,0.429801,0.934873,-0.223002,0.276192,0.620960,0.331100,0.229347,0.423493,0.457632,0.903609,-0.274986,0.328441,0.606600,0.328850,0.211229,0.405119,0.487127,0.871241,-0.305192,0.384444,0.591450,0.326140,0.192901,0.393235,0.518115,0.862320,-0.303481,0.405344,0.577470,0.325800,-0.267391,0.478705,0.261884,-0.831695,-0.547226,0.093956,0.297630,0.322340,-0.263866,0.468609,0.256332,-0.948037,-0.304885,0.090943,0.297660,0.316460,-0.261640,0.453691,0.247603,-0.964281,-0.201595,0.171816,0.297110,0.308270,-0.267585,0.471454,0.237908,-0.948076,-0.299652,0.106582,0.288550,0.315070,-0.267027,0.460104,0.228050,-0.976664,-0.170340,0.130810,0.286440,0.308260,-0.269645,0.478536,0.245305,-0.826749,-0.561764,0.030134,0.290090,0.319910,-0.255677,0.426940,0.252767,-0.958443,-0.117805,0.259823,0.305390,0.298700,-0.251147,0.412157,0.262185,-0.955818,-0.122998,0.266991,0.312880,0.293440,-0.245911,0.395594,0.272824,-0.951643,-0.194830,0.237523,0.321660,0.287230,-0.253811,0.392100,0.252349,-0.941060,-0.107275,0.320778,0.312020,0.284270,-0.246983,0.378980,0.264445,-0.913300,-0.158532,0.375166,0.320530,0.279910,-0.258097,0.402471,0.241055,-0.968189,-0.092815,0.232369,0.304800,0.287430,-0.261792,0.408538,0.225168,-0.984514,-0.106224,0.139459,0.295950,0.286800,-0.266438,0.442614,0.217343,-0.987616,-0.115691,0.105973,0.284860,0.299500,-0.264380,0.415842,0.201648,-0.992169,-0.114506,0.049882,0.282840,0.285670,-0.261264,0.435143,0.238420,-0.970309,-0.120755,0.209569,0.296780,0.299640,0.267391,0.478705,0.261884,0.831694,-0.547226,0.093961,0.702360,0.322340,0.263866,0.468609,0.256332,0.948037,-0.304885,0.090946,0.702330,0.316460,0.269645,0.478536,0.245305,0.826750,-0.561763,0.030134,0.709900,0.319910,0.267585,0.471454,0.237908,0.948076,-0.299652,0.106582,0.711440,0.315070,0.261640,0.453691,0.247603,0.964280,-0.201600,0.171818,0.702880,0.308270,0.267027,0.460104,0.228050,0.976664,-0.170341,0.130812,0.713550,0.308260,0.255676,0.426940,0.252767,0.958444,-0.117806,0.259821,0.694600,0.298700,0.251146,0.412157,0.262185,0.955820,-0.122995,0.266983,0.687110,0.293440,0.258097,0.402471,0.241055,0.968189,-0.092812,0.232372,0.695190,0.287430,0.253811,0.392100,0.252349,0.941061,-0.107271,0.320776,0.687970,0.284270,0.245911,0.395594,0.272824,0.951644,-0.194829,0.237518,0.678330,0.287230,0.246983,0.378980,0.264445,0.913301,-0.158531,0.375164,0.679460,0.279910,0.261792,0.408538,0.225168,0.984513,-0.106224,0.139465,0.704040,0.286800,0.266438,0.442614,0.217343,0.987616,-0.115693,0.105975,0.715130,0.299500,0.261264,0.435143,0.238420,0.970307,-0.120759,0.209575,0.703220,0.299640,0.264380,0.415842,0.201648,0.992169,-0.114507,0.049884,0.717150,0.285670,-0.236484,0.365299,0.281180,-0.897409,-0.238515,0.371170,0.333150,0.276980,-0.238080,0.379961,0.288783,-0.925023,-0.333450,0.182052,0.333850,0.283550,-0.227124,0.362212,0.308141,-0.879673,-0.454758,0.139176,0.348280,0.279790,-0.223538,0.349437,0.300413,-0.878993,-0.330667,0.343555,0.347960,0.273560,0.236484,0.365299,0.281180,0.897409,-0.238516,0.371170,0.666840,0.276980,0.238080,0.379961,0.288783,0.925023,-0.333453,0.182049,0.666140,0.283550,0.227124,0.362213,0.308141,0.879672,-0.454761,0.139175,0.651710,0.279790,0.223538,0.349437,0.300413,0.878993,-0.330667,0.343555,0.652030,0.273560,-0.207578,0.329111,0.319527,-0.860616,-0.402681,0.311749,0.363260,0.267870,-0.190340,0.313115,0.351357,-0.823577,-0.546789,0.150806,0.381980,0.266830,-0.210978,0.339398,0.328225,-0.843532,-0.522021,0.126282,0.364110,0.273500,-0.187706,0.304078,0.341530,-0.853354,-0.431603,0.292412,0.380400,0.261570,0.207578,0.329111,0.319527,0.860616,-0.402681,0.311750,0.636730,0.267870,0.190340,0.313115,0.351357,0.823576,-0.546791,0.150805,0.618010,0.266830,0.187706,0.304078,0.341530,0.853354,-0.431604,0.292413,0.619590,0.261570,0.210978,0.339398,0.328225,0.843532,-0.522022,0.126282,0.635880,0.273500,-0.244243,0.349097,0.257755,-0.900540,-0.212445,0.379333,0.323990,0.266060,-0.232224,0.338723,0.277001,-0.866880,-0.235525,0.439371,0.337420,0.265320,-0.218314,0.327238,0.296304,-0.846374,-0.273915,0.456752,0.351420,0.264070,-0.221368,0.302841,0.277736,-0.852058,-0.257205,0.455899,0.346800,0.249760,-0.206650,0.295628,0.298747,-0.825850,-0.254431,0.503226,0.360140,0.251060,-0.235000,0.310163,0.254304,-0.891988,-0.262053,0.368356,0.332100,0.248000,-0.203633,0.313110,0.313609,-0.840716,-0.324084,0.433780,0.363530,0.261160,-0.186032,0.293062,0.332510,-0.851601,-0.357113,0.383726,0.377550,0.256050,-0.193428,0.288376,0.315620,-0.824013,-0.271451,0.497310,0.369400,0.251430,-0.183019,0.281020,0.328650,-0.841750,-0.304605,0.445727,0.378980,0.249820,0.244243,0.349097,0.257755,0.900540,-0.212445,0.379334,0.676000,0.266060,0.232224,0.338723,0.277001,0.866880,-0.235525,0.439370,0.662570,0.265320,0.235000,0.310163,0.254304,0.891987,-0.262054,0.368357,0.667890,0.248000,0.221368,0.302841,0.277736,0.852058,-0.257205,0.455898,0.653190,0.249760,0.218314,0.327238,0.296304,0.846374,-0.273915,0.456752,0.648570,0.264070,0.206651,0.295628,0.298747,0.825850,-0.254431,0.503226,0.639850,0.251060,0.203633,0.313110,0.313609,0.840716,-0.324084,0.433781,0.636460,0.261160,0.193428,0.288376,0.315620,0.824012,-0.271451,0.497311,0.630590,0.251430,0.186032,0.293062,0.332510,0.851600,-0.357112,0.383729,0.622440,0.256050,0.183019,0.281020,0.328650,0.841750,-0.304604,0.445728,0.621010,0.249820,-0.256645,0.365881,0.224710,-0.977517,-0.152325,0.145798,0.304480,0.267740,-0.252531,0.358563,0.241006,-0.945750,-0.186177,0.266261,0.313700,0.267410,-0.244774,0.316999,0.230685,-0.934293,-0.245490,0.258518,0.318900,0.246110,-0.250689,0.322221,0.207473,-0.967875,-0.194089,0.159833,0.306370,0.243540,0.256645,0.365881,0.224710,0.977517,-0.152324,0.145798,0.695510,0.267740,0.252531,0.358563,0.241006,0.945750,-0.186175,0.266261,0.686290,0.267410,0.250689,0.322221,0.207473,0.967876,-0.194089,0.159832,0.693620,0.243540,0.244774,0.316999,0.230685,0.934292,-0.245491,0.258518,0.681090,0.246110,-0.253584,0.325896,0.183424,-0.987000,-0.129656,0.094976,0.293740,0.239770,-0.259702,0.376825,0.178734,-0.993296,-0.112968,0.024514,0.279560,0.263080,-0.255717,0.331358,0.154778,-0.995328,-0.075415,0.060284,0.277580,0.235980,-0.258366,0.370525,0.205075,-0.989297,-0.129347,0.067531,0.294130,0.265490,0.253584,0.325896,0.183424,0.987000,-0.129656,0.094975,0.706250,0.239770,0.259702,0.376825,0.178734,0.993296,-0.112968,0.024514,0.720430,0.263080,0.258366,0.370525,0.205075,0.989297,-0.129347,0.067533,0.705860,0.265490,0.255717,0.331358,0.154778,0.995328,-0.075415,0.060284,0.722410,0.235980,-0.167433,0.287752,0.378723,-0.823019,-0.529679,0.205136,0.402180,0.261710,-0.148299,0.267429,0.402074,-0.832806,-0.489221,0.259030,0.419340,0.258710,-0.147279,0.255614,0.390844,-0.863971,-0.366505,0.345295,0.417720,0.252790,-0.165521,0.277852,0.367730,-0.859895,-0.408054,0.306714,0.400440,0.256240,-0.166961,0.257772,0.344188,-0.859285,-0.281380,0.427147,0.392390,0.241390,-0.149367,0.231225,0.364743,-0.873913,-0.257664,0.412172,0.411470,0.231690,-0.165154,0.266744,0.356108,-0.869641,-0.342835,0.355231,0.397250,0.248570,-0.147573,0.242482,0.378560,-0.875575,-0.313006,0.367963,0.415570,0.242410,0.167433,0.287751,0.378723,0.823018,-0.529681,0.205133,0.597810,0.261710,0.165521,0.277852,0.367730,0.859895,-0.408053,0.306714,0.599550,0.256240,0.147279,0.255614,0.390844,0.863972,-0.366503,0.345295,0.582270,0.252790,0.148299,0.267429,0.402074,0.832807,-0.489222,0.259028,0.580650,0.258710,0.165154,0.266744,0.356108,0.869641,-0.342832,0.355233,0.602740,0.248570,0.149367,0.231225,0.364743,0.873913,-0.257664,0.412172,0.588520,0.231690,0.166961,0.257772,0.344188,0.859284,-0.281379,0.427148,0.607600,0.241390,0.147573,0.242482,0.378560,0.875575,-0.313003,0.367963,0.584420,0.242410,-0.102811,0.229688,0.449474,-0.706075,-0.527044,0.472952,0.445170,0.254850,-0.114894,0.237419,0.439180,-0.738246,-0.521058,0.428358,0.438270,0.255720,-0.112374,0.221914,0.428603,-0.752272,-0.412067,0.514090,0.436770,0.248510,-0.100987,0.214115,0.438278,-0.720704,-0.422253,0.549807,0.443270,0.247490,-0.122676,0.229732,0.419214,-0.792742,-0.391616,0.467115,0.431300,0.249780,-0.124741,0.244588,0.429732,-0.778850,-0.500863,0.377531,0.432890,0.256470,-0.113431,0.184238,0.403541,-0.769292,-0.303846,0.562021,0.433470,0.225170,-0.100150,0.194802,0.426338,-0.719941,-0.366676,0.589266,0.442250,0.236700,-0.111447,0.203438,0.417161,-0.758304,-0.349758,0.550132,0.435760,0.237780,-0.101579,0.173869,0.412912,-0.715883,-0.336010,0.612052,0.440430,0.223880,-0.124392,0.196169,0.393850,-0.817828,-0.280073,0.502709,0.427250,0.226770,-0.122274,0.212828,0.407607,-0.802418,-0.334629,0.494115,0.430010,0.239010,-0.087424,0.219468,0.460301,-0.687601,-0.515169,0.511669,0.454580,0.253790,-0.071197,0.204343,0.467426,-0.669074,-0.497319,0.552281,0.464280,0.251290,-0.087609,0.203993,0.447494,-0.690598,-0.430568,0.581107,0.451140,0.247050,-0.073241,0.190242,0.453886,-0.670507,-0.434822,0.601124,0.459700,0.245300,-0.087698,0.185278,0.434955,-0.680992,-0.390029,0.619780,0.449530,0.236150,-0.074293,0.174144,0.441942,-0.659421,-0.406203,0.632585,0.457730,0.234960,-0.088402,0.165128,0.422176,-0.667332,-0.370630,0.645989,0.448320,0.223600,-0.074721,0.156653,0.430795,-0.645270,-0.392136,0.655634,0.457140,0.223630,0.102811,0.229688,0.449474,0.706075,-0.527044,0.472951,0.554820,0.254850,0.114894,0.237420,0.439180,0.738246,-0.521059,0.428358,0.561720,0.255720,0.124741,0.244588,0.429732,0.778849,-0.500863,0.377531,0.567100,0.256470,0.122676,0.229732,0.419214,0.792742,-0.391616,0.467116,0.568690,0.249780,0.112374,0.221914,0.428603,0.752271,-0.412068,0.514090,0.563220,0.248510,0.100987,0.214115,0.438278,0.720704,-0.422253,0.549806,0.556720,0.247490,0.113431,0.184238,0.403541,0.769292,-0.303847,0.562021,0.566520,0.225170,0.100150,0.194802,0.426338,0.719942,-0.366675,0.589265,0.557750,0.236700,0.101579,0.173869,0.412912,0.715885,-0.336010,0.612051,0.559560,0.223880,0.111447,0.203438,0.417161,0.758303,-0.349759,0.550133,0.564230,0.237780,0.122274,0.212828,0.407607,0.802417,-0.334630,0.494115,0.569980,0.239010,0.124392,0.196169,0.393850,0.817828,-0.280075,0.502709,0.572740,0.226770,0.087424,0.219468,0.460301,0.687601,-0.515170,0.511668,0.545410,0.253790,0.071197,0.204343,0.467426,0.669074,-0.497319,0.552281,0.535710,0.251290,0.087609,0.203993,0.447494,0.690599,-0.430567,0.581107,0.548850,0.247050,0.073241,0.190242,0.453886,0.670507,-0.434820,0.601125,0.540290,0.245300,0.087698,0.185278,0.434955,0.680993,-0.390028,0.619780,0.550460,0.236150,0.074293,0.174144,0.441942,0.659421,-0.406202,0.632585,0.542260,0.234960,0.088402,0.165128,0.422176,0.667333,-0.370629,0.645988,0.551670,0.223600,0.074721,0.156653,0.430795,0.645270,-0.392136,0.655634,0.542850,0.223630,-0.057535,0.187939,0.469733,-0.653921,-0.462200,0.598965,0.471940,0.245190,-0.060455,0.176398,0.458279,-0.668777,-0.425100,0.609940,0.468490,0.239890,-0.052170,0.196943,0.482339,-0.611005,-0.512443,0.603386,0.476300,0.249060,-0.042679,0.181209,0.480003,-0.615064,-0.429721,0.661087,0.480950,0.241810,-0.047065,0.173565,0.470921,-0.653841,-0.416847,0.631451,0.478100,0.238440,-0.049750,0.163970,0.461746,-0.673015,-0.410175,0.615474,0.475980,0.234070,-0.061803,0.163079,0.447811,-0.664905,-0.408711,0.625185,0.467020,0.231850,-0.050979,0.152867,0.452990,-0.674506,-0.408916,0.614679,0.474960,0.228460,-0.061991,0.148426,0.438301,-0.650302,-0.404344,0.643128,0.466690,0.223240,-0.051013,0.140727,0.444894,-0.661888,-0.419349,0.621330,0.474740,0.222400,0.057535,0.187939,0.469733,0.653921,-0.462200,0.598964,0.528050,0.245190,0.060455,0.176398,0.458279,0.668776,-0.425099,0.609942,0.531500,0.239890,0.047065,0.173565,0.470921,0.653842,-0.416847,0.631450,0.521890,0.238440,0.049750,0.163970,0.461746,0.673014,-0.410174,0.615475,0.524010,0.234070,0.052170,0.196943,0.482339,0.611006,-0.512444,0.603384,0.523690,0.249060,0.042679,0.181209,0.480003,0.615064,-0.429723,0.661086,0.519040,0.241810,0.061803,0.163079,0.447811,0.664905,-0.408710,0.625186,0.532970,0.231850,0.061991,0.148426,0.438301,0.650302,-0.404344,0.643127,0.533300,0.223240,0.050979,0.152866,0.452990,0.674504,-0.408916,0.614680,0.525040,0.228460,0.051013,0.140727,0.444894,0.661887,-0.419349,0.621331,0.525260,0.222400,-0.017678,0.205003,0.513437,-0.310415,-0.614894,0.724946,0.493320,0.257240,-0.026418,0.204859,0.508875,-0.400253,-0.608232,0.685457,0.489050,0.256240,-0.022957,0.190152,0.500353,-0.453938,-0.467934,0.758273,0.490950,0.248020,-0.015450,0.190067,0.504401,-0.354988,-0.474047,0.805769,0.494390,0.248810,-0.030039,0.189193,0.494990,-0.513501,-0.460304,0.724180,0.487370,0.246650,-0.035071,0.203931,0.502512,-0.466724,-0.593099,0.656051,0.484570,0.254580,-0.008834,0.204821,0.516300,-0.175972,-0.621235,0.763611,0.496870,0.257620,0.0,0.204760,0.517274,-0.000001,-0.624841,0.780752,0.500000,0.257690,-0.007765,0.189715,0.506964,-0.199264,-0.482538,0.852907,0.497360,0.249150,-0.000000,0.189526,0.507853,0.000001,-0.487190,0.873296,0.500000,0.249230,0.017678,0.205003,0.513437,0.310415,-0.614895,0.724946,0.506670,0.257240,0.026418,0.204859,0.508875,0.400253,-0.608232,0.685457,0.510940,0.256240,0.035071,0.203931,0.502512,0.466723,-0.593098,0.656052,0.515420,0.254580,0.030039,0.189193,0.494990,0.513498,-0.460305,0.724182,0.512620,0.246650,0.022956,0.190152,0.500353,0.453939,-0.467934,0.758272,0.509050,0.248020,0.015450,0.190067,0.504401,0.354987,-0.474048,0.805769,0.505600,0.248810,0.008834,0.204821,0.516300,0.175971,-0.621235,0.763611,0.503120,0.257620,0.007765,0.189715,0.506964,0.199262,-0.482540,0.852907,0.502630,0.249150,-0.043840,0.201641,0.493851,-0.539461,-0.559590,0.629159,0.480510,0.252160,-0.036768,0.186338,0.488230,-0.564063,-0.446914,0.694335,0.484060,0.244550,0.043840,0.201641,0.493851,0.539460,-0.559589,0.629160,0.519480,0.252160,0.036768,0.186338,0.488230,0.564061,-0.446915,0.694336,0.515930,0.244550,-0.134854,0.253453,0.418648,-0.818742,-0.479104,0.316419,0.428080,0.257330,-0.133599,0.239858,0.407816,-0.839225,-0.364379,0.403645,0.426470,0.251010,-0.135805,0.210912,0.381724,-0.859647,-0.258296,0.440784,0.421550,0.227970,-0.133775,0.224837,0.395704,-0.850331,-0.314750,0.421746,0.424900,0.240000,0.134854,0.253453,0.418648,0.818742,-0.479104,0.316418,0.571910,0.257330,0.133599,0.239858,0.407816,0.839225,-0.364378,0.403646,0.573520,0.251010,0.135805,0.210912,0.381724,0.859647,-0.258297,0.440783,0.578440,0.227970,0.133775,0.224837,0.395704,0.850331,-0.314749,0.421746,0.575090,0.240000,-0.265687,0.574148,0.275886,-0.364336,0.278228,-0.888734,0.969520,0.639190,-0.267330,0.557809,0.270082,-0.704291,0.431206,-0.563947,0.967530,0.633590,-0.271055,0.554131,0.273350,-0.678601,0.351569,-0.644903,0.969140,0.631710,-0.273790,0.574206,0.278363,-0.335142,0.108397,-0.935911,0.972760,0.639350,0.280921,0.573785,0.280508,0.437284,-0.013994,-0.899215,0.023830,0.638340,0.276547,0.549003,0.277438,0.795770,0.198373,-0.572187,0.028000,0.626620,0.285977,0.573816,0.283134,0.759964,-0.088525,-0.643909,0.021510,0.638750,0.280131,0.540644,0.283226,0.988930,-0.025752,-0.146130,0.024400,0.621000,-0.285574,0.591390,0.291260,-0.981339,0.031534,0.189683,0.296810,0.370950,-0.281544,0.590827,0.305260,-0.971870,-0.022815,0.234412,0.303210,0.371870,-0.280988,0.573588,0.304934,-0.961630,-0.061822,0.267293,0.304910,0.365190,-0.286327,0.575269,0.293922,-0.961360,-0.051203,0.270491,0.299500,0.364890,-0.276576,0.549004,0.277446,-0.795930,0.197414,-0.572297,0.971640,0.627920,-0.280930,0.573785,0.280510,-0.437527,-0.013942,-0.899097,0.975820,0.639620,-0.280142,0.540644,0.283229,-0.988832,-0.025951,-0.146754,0.975230,0.622310,-0.285987,0.573817,0.283136,-0.759928,-0.088554,-0.643947,0.978130,0.640030,0.281398,0.545396,0.289074,0.982443,-0.174472,0.066069,0.020020,0.623680,0.287977,0.574885,0.287090,0.993328,-0.075783,-0.086926,0.019710,0.639630,0.281429,0.549315,0.293424,0.956143,-0.168342,0.239691,0.016410,0.625210,0.286193,0.575263,0.293887,0.960529,-0.051168,0.273433,0.015950,0.640370,0.285517,0.591387,0.291246,0.980953,0.031503,0.191673,0.703190,0.370950,0.281547,0.590827,0.305266,0.971982,-0.023162,0.233910,0.696780,0.371870,0.286193,0.575263,0.293887,0.960529,-0.051168,0.273433,0.700490,0.364890,0.280955,0.573586,0.304926,0.961889,-0.062372,0.266231,0.695080,0.365190,-0.284286,0.668793,0.314163,-0.990864,-0.062567,0.119473,0.300220,0.403790,-0.286691,0.671480,0.300021,-0.894012,0.016949,0.447723,0.294050,0.404540,-0.286596,0.701847,0.312037,-0.994359,-0.058630,0.088385,0.296620,0.417610,-0.291151,0.696232,0.285996,-0.844106,0.332676,0.420490,0.286510,0.413400,0.284071,0.668791,0.314116,0.990549,-0.063204,0.121725,0.699770,0.403790,0.286544,0.701842,0.312035,0.994385,-0.061348,0.086230,0.703370,0.417610,0.286674,0.671481,0.300032,0.892226,0.016562,0.451285,0.705940,0.404540,0.291189,0.696236,0.286013,0.843694,0.331798,0.422008,0.713480,0.413400,-0.285022,0.742833,0.385896,-0.988544,-0.053838,0.141007,0.326210,0.438810,-0.289614,0.775069,0.365153,-0.994734,-0.040369,0.094206,0.315850,0.449450,-0.287669,0.743979,0.362328,-0.994135,-0.068482,0.083700,0.315860,0.437580,-0.289303,0.742390,0.337187,-0.996809,-0.070469,0.037498,0.305110,0.434970,-0.291029,0.775310,0.338578,-0.998540,-0.040293,0.035975,0.304310,0.447320,-0.276292,0.740716,0.431251,-0.973725,-0.009856,0.227514,0.345920,0.441320,-0.281066,0.742020,0.408470,-0.980650,-0.029885,0.193475,0.336170,0.440420,0.285319,0.742822,0.386023,0.988398,-0.050451,0.143262,0.673780,0.438810,0.289358,0.775050,0.365115,0.995222,-0.031959,0.092263,0.684140,0.449450,0.288163,0.743982,0.362502,0.994747,-0.062028,0.081425,0.684130,0.437580,0.290919,0.775303,0.338571,0.998650,-0.036103,0.037344,0.695690,0.447320,0.289411,0.742401,0.337254,0.997289,-0.065712,0.033121,0.694880,0.434970,0.275923,0.740678,0.431205,0.973123,-0.005987,0.230207,0.654070,0.441320,0.281114,0.742026,0.408546,0.979032,-0.029231,0.201597,0.663820,0.440420,-0.270672,0.735020,0.452790,-0.971821,0.009367,0.235534,0.355600,0.440440,-0.265210,0.769412,0.470766,-0.955768,0.051527,0.289572,0.361920,0.454910,0.270699,0.734990,0.452806,0.973152,0.016288,0.229587,0.644390,0.440440,0.265048,0.769388,0.470747,0.957157,0.057144,0.283876,0.638070,0.454910,-0.258469,0.814159,0.481159,-0.940210,0.070319,0.333257,0.365650,0.473090,-0.253111,0.797318,0.499462,-0.939741,0.078803,0.332682,0.373670,0.467520,-0.241511,0.835265,0.521132,-0.936000,0.089506,0.340431,0.382550,0.483270,-0.238001,0.816263,0.536050,-0.940052,0.087222,0.329689,0.388510,0.476520,0.258398,0.814158,0.481162,0.939298,0.070809,0.335716,0.634340,0.473090,0.252907,0.797291,0.499402,0.940249,0.085522,0.329573,0.626320,0.467520,0.237863,0.816277,0.535982,0.939690,0.096098,0.328250,0.611480,0.476520,0.241197,0.835236,0.521061,0.935618,0.089404,0.341505,0.617440,0.483270,-0.270807,0.857271,0.434865,-0.950822,0.104546,0.291560,0.342420,0.487150,-0.265006,0.835016,0.460010,-0.942729,0.079713,0.323895,0.355170,0.479700,-0.251914,0.887102,0.477815,-0.940511,0.109388,0.321672,0.363120,0.503390,-0.246180,0.859315,0.502097,-0.935742,0.092505,0.340337,0.374410,0.492450,0.271194,0.857289,0.435023,0.950535,0.100475,0.293920,0.657570,0.487150,0.264869,0.835001,0.460003,0.941538,0.076286,0.328156,0.644830,0.479700,0.245984,0.859288,0.502061,0.935270,0.086297,0.343252,0.625580,0.492450,0.252032,0.887100,0.477864,0.939997,0.106750,0.324053,0.636870,0.503390,-0.285971,0.843141,0.377508,-0.981447,0.069434,0.178720,0.315570,0.475850,-0.291608,0.814515,0.338367,-0.997807,0.003133,0.066122,0.301450,0.462130,-0.290112,0.807112,0.366514,-0.992639,0.018911,0.119628,0.313820,0.461490,0.291547,0.814516,0.338369,0.997742,0.001964,0.067138,0.698540,0.462130,0.286136,0.843148,0.377579,0.982074,0.065840,0.176620,0.684420,0.475850,0.289979,0.807101,0.366513,0.992778,0.016187,0.118867,0.686180,0.461490,-0.294254,0.811919,0.273212,-0.998133,-0.043417,0.042954,0.273330,0.455680,-0.291089,0.770395,0.308381,-0.998788,-0.043241,0.023502,0.291130,0.442180,-0.293004,0.816034,0.305754,-0.998540,-0.023995,0.048394,0.287080,0.460070,-0.290995,0.761693,0.279432,-0.998600,-0.032865,0.041458,0.278970,0.435960,-0.296589,0.871935,0.267705,-0.998640,0.005015,0.051894,0.267600,0.479070,-0.293812,0.870799,0.305619,-0.996068,0.019869,0.086333,0.283560,0.481410,-0.288976,0.734415,0.310352,-0.997874,-0.047693,0.044416,0.293950,0.429210,-0.290098,0.723925,0.284533,-0.995535,0.015556,0.093104,0.283360,0.423230,0.291220,0.770399,0.308438,0.998800,-0.042282,0.024709,0.708860,0.442180,0.294330,0.811922,0.273239,0.998156,-0.043044,0.042789,0.726660,0.455680,0.292963,0.816033,0.305758,0.998482,-0.023280,0.049921,0.712910,0.460070,0.291021,0.761694,0.279443,0.998640,-0.033011,0.040360,0.721020,0.435960,0.293783,0.870793,0.305611,0.995959,0.020619,0.087411,0.716430,0.481410,0.296600,0.871934,0.267709,0.998600,0.005488,0.052610,0.732390,0.479070,0.289034,0.734415,0.310379,0.997952,-0.047488,0.042866,0.706040,0.429210,0.290130,0.723926,0.284545,0.995590,0.014944,0.092612,0.716640,0.423230,-0.257805,0.915847,0.448793,-0.943143,0.126492,0.307378,0.347360,0.515130,-0.276264,0.880940,0.407486,-0.959552,0.103322,0.261887,0.327660,0.495130,0.258072,0.915845,0.448900,0.942826,0.131593,0.306207,0.652640,0.515130,0.276390,0.880928,0.407537,0.959903,0.105404,0.259761,0.672330,0.495130,-0.279899,0.984691,0.320373,-0.954176,0.265321,0.138391,0.281250,0.528240,-0.294306,0.934668,0.265477,-0.992493,0.110043,0.053371,0.262740,0.503010,-0.290599,0.929016,0.310520,-0.987540,0.108547,0.113942,0.282130,0.504830,-0.283382,0.993843,0.266208,-0.956788,0.286270,0.051057,0.258030,0.525580,0.294306,0.934667,0.265478,0.992424,0.110160,0.054401,0.737250,0.503010,0.279814,0.984680,0.320350,0.954327,0.264582,0.138766,0.718740,0.528240,0.290471,0.928995,0.310487,0.987418,0.108799,0.114750,0.717860,0.504830,0.283375,0.993842,0.266205,0.956846,0.285950,0.051747,0.741960,0.525580,-0.295786,0.706950,0.260552,-0.962839,0.208199,0.172027,0.274640,0.415750,-0.292891,0.720127,0.261622,-0.984305,0.132999,0.115993,0.274320,0.420010,-0.299872,0.712919,0.237835,-0.876468,0.468911,0.109206,0.264730,0.415110,-0.295318,0.720382,0.238967,-0.951208,0.301109,0.067357,0.265410,0.417670,-0.291304,0.752285,0.255936,-0.998777,-0.001478,0.049424,0.270490,0.430560,-0.292129,0.745409,0.233006,-0.999200,0.032632,0.023134,0.262430,0.425810,-0.118651,0.400512,0.639148,-0.160359,-0.463860,0.871274,0.462710,0.339750,-0.127865,0.397309,0.638859,-0.077508,-0.388438,0.918209,0.460290,0.339130,-0.177274,0.392757,0.550027,-0.873987,-0.285897,0.392951,0.433300,0.329800,-0.165725,0.396023,0.579672,-0.902865,-0.260621,0.341922,0.441880,0.334540,-0.138782,0.395197,0.634817,-0.510453,-0.361924,0.780031,0.457920,0.338850,-0.148358,0.395176,0.622520,-0.802970,-0.300056,0.514980,0.454600,0.338380,0.295803,0.706950,0.260558,0.962902,0.208333,0.171513,0.725350,0.415750,0.292903,0.720127,0.261626,0.984346,0.133131,0.115498,0.725670,0.420010,0.291312,0.752285,0.255939,0.998808,-0.001601,0.048776,0.729500,0.430560,0.295331,0.720383,0.238972,0.951218,0.301128,0.067123,0.734590,0.417670,0.292131,0.745409,0.233007,0.999200,0.032734,0.022966,0.737560,0.425810,0.299879,0.712919,0.237838,0.876577,0.468766,0.108959,0.735260,0.415110,0.118650,0.400498,0.639209,0.156223,-0.461315,0.873374,0.537280,0.339750,0.127706,0.397376,0.638851,0.080188,-0.386371,0.918851,0.539700,0.339130,0.165720,0.396025,0.579670,0.902711,-0.259709,0.343023,0.558110,0.334540,0.177274,0.392757,0.550027,0.873780,-0.285654,0.393586,0.566690,0.329800,0.138663,0.395241,0.634780,0.510636,-0.359752,0.780916,0.542070,0.338850,0.148297,0.395198,0.622506,0.803113,-0.298332,0.515760,0.545390,0.338380,0.157795,0.395996,0.604419,0.891729,-0.262955,0.368339,0.550910,0.337150,-0.297898,0.863669,0.230276,-0.999758,-0.002864,0.021788,0.253140,0.472290,-0.295023,0.802196,0.244375,-0.998102,-0.050164,0.035721,0.262630,0.449240,-0.294950,0.790498,0.216244,-0.998295,-0.054598,0.020653,0.252600,0.442280,-0.298279,0.849073,0.193484,-0.999942,-0.009800,0.004584,0.239720,0.463500,0.297898,0.863669,0.230276,0.999767,-0.002752,0.021397,0.746850,0.472290,0.295028,0.802196,0.244377,0.998125,-0.050252,0.034954,0.737360,0.449240,0.298279,0.849073,0.193484,0.999942,-0.009796,0.004561,0.760270,0.463500,0.294950,0.790498,0.216244,0.998297,-0.054592,0.020568,0.747400,0.442280,-0.157879,0.395970,0.604453,-0.891466,-0.264552,0.367831,0.449080,0.337150,-0.020388,0.260088,0.667502,-0.026509,-0.788693,0.614215,0.494680,0.306180,-0.035759,0.453493,0.717183,-0.230961,0.308107,0.922891,0.491340,0.360290,-0.286437,0.590731,0.283838,-0.968543,-0.027472,-0.247327,0.976150,0.648210,-0.285574,0.591390,0.291260,-0.981339,0.031534,0.189683,0.979780,0.649770,-0.287986,0.574886,0.287092,-0.992792,-0.076315,-0.092413,0.979930,0.640900,-0.286327,0.575269,0.293922,-0.961360,-0.051203,0.270491,0.983700,0.641630,-0.284133,0.589692,0.280834,-0.585769,-0.166946,-0.793097,0.974940,0.647180,0.006601,0.334372,0.687315,-0.131809,0.028216,0.990873,0.501770,0.326410,0.285517,0.591387,0.291246,0.980953,0.031503,0.191673,0.019850,0.648500,0.286419,0.590730,0.283834,0.969489,-0.026883,-0.243657,0.023510,0.646930,0.284112,0.589691,0.280829,0.585659,-0.166773,-0.793215,0.024720,0.645900,-0.045092,0.453101,0.713936,-0.379203,0.265766,0.886326,0.488980,0.359820,-0.056753,0.451965,0.708329,-0.452039,0.225487,0.863028,0.485910,0.359080,-0.281439,0.549315,0.293426,-0.956747,-0.169864,0.236181,0.983210,0.626520,-0.281423,0.545397,0.289080,-0.982545,-0.175211,0.062509,0.979600,0.624990,0.281429,0.549315,0.293424,0.956143,-0.168342,0.239691,0.697760,0.354340,0.278753,0.540568,0.300013,0.973715,-0.130190,0.186896,0.693660,0.351190,-0.281439,0.549315,0.293426,-0.956747,-0.169864,0.236181,0.302240,0.354340,-0.278816,0.540571,0.300029,-0.973857,-0.130883,0.185666,0.306330,0.351190,-0.278560,0.522879,0.288126,-0.957564,-0.032487,0.286383,0.302610,0.343260,-0.277869,0.530393,0.294622,-0.983475,-0.123287,0.132583,0.305080,0.346530,-0.277869,0.530393,0.294622,-0.983475,-0.123287,0.132583,0.982780,0.614860,-0.278560,0.522879,0.288126,-0.957564,-0.032487,0.286383,0.977820,0.611670,-0.278816,0.540571,0.300029,-0.973857,-0.130883,0.185666,0.987020,0.620440,0.278549,0.522878,0.288124,0.957518,-0.032361,0.286552,0.697380,0.343260,0.277859,0.530393,0.294620,0.983248,-0.122789,0.134710,0.694910,0.346530,0.278753,0.540568,0.300013,0.973715,-0.130190,0.186896,0.012590,0.619130,0.277859,0.530393,0.294620,0.983248,-0.122789,0.134710,0.016840,0.613540,0.278549,0.522878,0.288124,0.957518,-0.032361,0.286552,0.021810,0.610350,-0.169967,0.670913,0.617265,-0.391213,0.411049,0.823402,0.439520,0.427290,-0.281438,0.530049,0.278336,-0.929859,0.170774,0.325881,0.970940,0.617260,-0.281820,0.516664,0.281337,-0.887857,0.067416,0.455153,0.972030,0.609940,-0.283524,0.503579,0.280380,-0.822908,-0.079464,0.562590,0.969930,0.603430,-0.286302,0.511834,0.274247,-0.873848,0.100589,0.475679,0.965940,0.609010,-0.287104,0.503389,0.274672,-0.866889,0.036254,0.497182,0.965390,0.605050,-0.285644,0.524382,0.272597,-0.827244,0.122617,0.548300,0.966100,0.615120,-0.288454,0.492341,0.270935,-0.760688,-0.327368,0.560521,0.962540,0.599880,-0.295689,0.487437,0.255945,-0.785811,-0.463874,0.409050,0.954140,0.600030,-0.291278,0.497773,0.267390,-0.880307,-0.005427,0.474374,0.960170,0.603470,-0.297413,0.495518,0.255695,-0.885999,0.000147,0.463688,0.953880,0.603830,0.035933,0.453561,0.717622,0.236240,0.284975,0.928967,0.508650,0.360290,0.045222,0.453134,0.714285,0.384484,0.244809,0.890079,0.511010,0.359820,0.281437,0.530049,0.278336,0.929511,0.170785,0.326866,0.028690,0.615950,0.281793,0.516663,0.281330,0.887480,0.067321,0.455903,0.027600,0.608610,0.285644,0.524382,0.272597,0.826922,0.122450,0.548822,0.033550,0.613810,0.286302,0.511834,0.274246,0.873273,0.100485,0.476757,0.033710,0.607690,0.283510,0.503578,0.280376,0.822750,-0.079083,0.562875,0.029720,0.602100,0.287103,0.503389,0.274672,0.866277,0.036228,0.498249,0.034250,0.603720,0.288453,0.492341,0.270935,0.760607,-0.327249,0.560701,0.037110,0.598550,0.291278,0.497773,0.267390,0.880170,-0.005518,0.474626,0.039480,0.602140,0.295689,0.487437,0.255945,0.785795,-0.463877,0.409077,0.045520,0.598700,0.297413,0.495518,0.255695,0.886002,0.000172,0.463682,0.045780,0.602500,-0.274266,0.547757,0.270421,-0.739693,0.672798,-0.014044,0.967590,0.628350,-0.279012,0.541241,0.274435,-0.884130,0.437220,0.164781,0.969350,0.623650,-0.284968,0.537014,0.270291,-0.682149,0.337035,0.648907,0.965280,0.620970,-0.281202,0.545253,0.266628,-0.451036,0.742353,0.495457,0.964110,0.625520,0.274246,0.547756,0.270416,0.738023,0.674614,-0.014804,0.032050,0.627050,0.279010,0.541241,0.274434,0.883472,0.438309,0.165415,0.030280,0.622350,0.281202,0.545253,0.266628,0.449927,0.743007,0.495486,0.035530,0.624220,0.284968,0.537014,0.270291,0.681937,0.337224,0.649032,0.034370,0.619660,-0.279159,0.588683,0.279485,-0.191301,-0.171763,-0.966386,0.973190,0.645810,-0.271053,0.587654,0.278225,-0.078789,-0.061314,-0.995004,0.970810,0.644060,-0.275429,0.602226,0.274554,-0.042807,-0.548381,-0.835132,0.968630,0.648590,-0.264456,0.602309,0.275709,0.051002,-0.428120,-0.902282,0.967840,0.645880,0.279138,0.588682,0.279480,0.191290,-0.171800,-0.966381,0.026470,0.644530,0.275403,0.602225,0.274548,0.042897,-0.548459,-0.835077,0.031030,0.647300,0.271039,0.587653,0.278222,0.078727,-0.061461,-0.995000,0.028840,0.642780,0.264422,0.602307,0.275701,-0.051032,-0.428333,-0.902179,0.031820,0.644590,-0.272818,0.607212,0.269276,-0.001895,-0.752619,-0.658454,0.966590,0.648190,-0.260141,0.609605,0.271173,0.070442,-0.651266,-0.755573,0.966640,0.645920,-0.260141,0.609605,0.271173,-0.219877,-0.792870,0.568341,0.966640,0.645920,-0.272818,0.607212,0.269276,-0.047844,-0.852549,0.520452,0.966590,0.648190,-0.261571,0.604322,0.262565,-0.234000,-0.557594,0.796450,0.965060,0.645620,-0.271611,0.603906,0.262472,-0.069464,-0.667848,0.741049,0.964310,0.647500,0.169815,0.670885,0.617281,0.387384,0.376822,0.841391,0.560470,0.427290,0.272792,0.607211,0.269270,0.002094,-0.752661,-0.658405,0.033080,0.646900,0.272792,0.607211,0.269270,0.047872,-0.852521,0.520497,0.033080,0.646900,0.271592,0.603905,0.262467,0.069550,-0.667824,0.741063,0.035360,0.646210,0.260097,0.609603,0.271162,0.220186,-0.792607,0.568588,0.033030,0.644630,0.261549,0.604321,0.262559,0.234115,-0.557383,0.796564,0.034600,0.644320,0.260097,0.609603,0.271162,-0.070395,-0.651412,-0.755452,0.033030,0.644630,0.056852,0.452047,0.708627,0.453012,0.205192,0.867569,0.514080,0.359080,-0.275244,0.548504,0.263013,-0.440844,0.843678,0.306371,0.963690,0.628770,-0.269843,0.551808,0.267024,-0.746675,0.662999,-0.053936,0.966220,0.631010,0.275225,0.548503,0.263008,0.439246,0.844333,0.306864,0.035960,0.627470,0.269764,0.551804,0.267003,0.746769,0.662970,-0.052983,0.033430,0.629710,-0.260561,0.585541,0.277661,-0.100777,0.140822,-0.984892,0.968280,0.642480,-0.248091,0.599743,0.278722,-0.009707,-0.188552,-0.982015,0.966940,0.643530,-0.246315,0.591059,0.277644,-0.077131,0.196064,-0.977553,0.966740,0.642800,-0.252660,0.582944,0.275713,-0.496882,0.514765,-0.698660,0.966870,0.642090,0.248075,0.599743,0.278719,0.009623,-0.188673,-0.981993,0.032710,0.642230,0.260549,0.585540,0.277659,0.100788,0.140804,-0.984894,0.031370,0.641190,0.246289,0.591058,0.277638,0.077381,0.196308,-0.977484,0.032920,0.641500,0.252630,0.582942,0.275705,0.496239,0.514784,-0.699102,0.032780,0.640780,-0.248091,0.599743,0.278722,-0.914364,-0.151370,-0.375534,0.966940,0.643530,-0.244557,0.590996,0.273643,-0.953383,0.244043,0.177492,0.966460,0.642770,-0.246315,0.591059,0.277644,-0.889176,0.264984,-0.373027,0.966740,0.642800,-0.246913,0.603857,0.273941,-0.914364,-0.151370,-0.375534,0.966520,0.643810,-0.246913,0.603857,0.273941,-0.650943,-0.356538,0.670189,0.966520,0.643810,-0.253933,0.597739,0.263526,-0.564509,-0.214097,0.797177,0.965220,0.643730,-0.246913,0.603857,0.273941,-0.023391,-0.625525,-0.779853,0.966520,0.643810,0.244538,0.590995,0.273639,0.953644,0.242707,0.177926,0.033190,0.641460,0.248075,0.599743,0.278719,0.914447,-0.151820,-0.375151,0.032710,0.642230,0.246289,0.591058,0.277638,0.889277,0.264254,-0.373304,0.032920,0.641500,0.246896,0.603856,0.273940,0.914447,-0.151820,-0.375151,0.033140,0.642510,0.246896,0.603856,0.273940,0.023085,-0.625720,-0.779706,0.033140,0.642510,0.253912,0.597738,0.263521,0.564617,-0.213914,0.797150,0.034440,0.642430,0.246896,0.603856,0.273940,0.651197,-0.356127,0.670161,0.033140,0.642510,-0.268214,0.589037,0.256682,-0.359682,-0.274037,0.891927,0.961780,0.643400,-0.273527,0.592312,0.256372,-0.227858,-0.440401,0.868405,0.960760,0.644990,-0.264585,0.584102,0.257961,-0.519299,-0.108952,0.847619,0.962340,0.641750,0.268197,0.589036,0.256678,0.359521,-0.273813,0.892060,0.037890,0.642100,0.273507,0.592311,0.256367,0.228030,-0.440152,0.868487,0.038910,0.643700,0.264566,0.584101,0.257956,0.518958,-0.108801,0.847847,0.037320,0.640440,-0.294468,0.634449,0.269559,-0.803792,0.371942,-0.464304,0.962920,0.666000,-0.288910,0.638336,0.268833,-0.322026,0.706926,-0.629725,0.960420,0.667630,-0.292699,0.629220,0.262691,-0.738529,0.406868,-0.537619,0.961340,0.662160,-0.286654,0.633798,0.262473,-0.351087,0.711871,-0.608258,0.958650,0.664320,-0.291268,0.625142,0.258324,-0.724365,0.388906,-0.569252,0.959630,0.659860,-0.285041,0.629948,0.257682,-0.428595,0.659728,-0.617305,0.956910,0.662200,-0.284445,0.626419,0.254083,-0.547328,0.608582,-0.574509,0.955720,0.660630,-0.290641,0.621378,0.255235,-0.751363,0.386664,-0.534738,0.958280,0.658170,-0.293306,0.616557,0.258308,-0.892646,0.225468,-0.390318,0.960110,0.656700,-0.290748,0.616405,0.251879,-0.813211,0.368982,-0.450045,0.956660,0.656090,-0.293028,0.611572,0.254676,-0.923037,0.221920,-0.314253,0.957950,0.654540,-0.284975,0.621891,0.250112,-0.683079,0.553077,-0.476979,0.954460,0.658690,0.294424,0.634446,0.269549,0.804561,0.371020,-0.463708,0.036760,0.664690,0.292673,0.629218,0.262685,0.738932,0.407489,-0.536593,0.038340,0.660850,0.288882,0.638334,0.268827,0.322017,0.706789,-0.629884,0.039260,0.666320,0.286588,0.633795,0.262456,0.350898,0.712272,-0.607898,0.041020,0.663010,0.285031,0.629947,0.257680,0.428642,0.660251,-0.616713,0.042760,0.660890,0.291249,0.625141,0.258319,0.724607,0.388676,-0.569100,0.040040,0.658550,0.284428,0.626418,0.254078,0.547596,0.608635,-0.574196,0.043950,0.659320,0.290613,0.621377,0.255228,0.751838,0.386242,-0.534376,0.041390,0.656860,0.284954,0.621890,0.250107,0.683534,0.552837,-0.476605,0.045200,0.657380,0.290729,0.616404,0.251874,0.813375,0.369124,-0.449631,0.043010,0.654790,0.293265,0.616555,0.258297,0.893178,0.224782,-0.389495,0.039560,0.655390,0.293007,0.611571,0.254670,0.923011,0.222511,-0.313911,0.041710,0.653240,-0.296185,0.641521,0.278059,-0.928241,0.100683,-0.358093,0.963550,0.672480,-0.292610,0.643824,0.275739,-0.377809,0.449250,-0.809589,0.961430,0.672890,-0.299192,0.652699,0.282462,-0.971343,-0.237383,0.011892,0.962130,0.680550,-0.297367,0.652738,0.279037,-0.549816,-0.125601,-0.825788,0.960670,0.679710,0.296163,0.641519,0.278057,0.928763,0.099190,-0.357156,0.036110,0.671160,0.299167,0.652697,0.282459,0.970967,-0.238856,0.013099,0.037520,0.679230,0.292597,0.643823,0.275739,0.378167,0.449002,-0.809560,0.038230,0.671570,0.297341,0.652735,0.279034,0.549832,-0.126093,-0.825703,0.038990,0.678380,-0.309482,0.680601,0.276134,-0.822090,0.011481,0.569242,0.950280,0.694840,-0.303954,0.666141,0.282021,-0.884672,-0.209132,0.416677,0.958060,0.688770,-0.303433,0.663480,0.277370,-0.928090,-0.368162,0.055732,0.956950,0.686840,-0.309589,0.675291,0.272004,-0.917480,-0.231320,0.323605,0.949880,0.692150,-0.329208,0.710725,0.238451,-0.869693,0.252966,0.423843,0.928260,0.694880,-0.318559,0.696944,0.260158,-0.808227,0.170454,0.563662,0.938940,0.696610,-0.318794,0.688579,0.258443,-0.910567,-0.117433,0.396329,0.939770,0.693780,-0.327606,0.700831,0.239462,-0.837888,-0.531467,0.124443,0.930020,0.692280,0.309504,0.680602,0.276145,0.821880,0.011312,0.569548,0.049370,0.693520,0.303961,0.666142,0.282028,0.884017,-0.210584,0.417335,0.041600,0.687450,0.309622,0.675292,0.272017,0.917254,-0.231462,0.324144,0.049770,0.690820,0.303436,0.663480,0.277374,0.927503,-0.369510,0.056574,0.042700,0.685520,0.329213,0.710725,0.238453,0.870013,0.252630,0.423386,0.071400,0.693570,0.318576,0.696945,0.260165,0.808529,0.170358,0.563257,0.060710,0.695300,0.327606,0.700831,0.239462,0.837822,-0.531668,0.124026,0.069630,0.690960,0.318806,0.688580,0.258448,0.910815,-0.117485,0.395744,0.059890,0.692470,-0.295851,0.507743,0.255120,-0.891430,0.110896,0.439379,0.954460,0.609330,-0.290968,0.508008,0.265842,-0.894294,0.096783,0.436889,0.960200,0.608580,-0.290255,0.521870,0.264809,-0.864883,0.005415,0.501944,0.960850,0.614700,-0.294898,0.523007,0.254237,-0.910121,-0.068641,0.408618,0.955100,0.615690,0.295849,0.507743,0.255120,0.891428,0.111379,0.439261,0.045200,0.608010,0.290967,0.508008,0.265842,0.894371,0.096930,0.436698,0.039450,0.607250,0.290255,0.521870,0.264809,0.865108,0.005388,0.501557,0.038800,0.613380,0.294878,0.523006,0.254232,0.910397,-0.068429,0.408037,0.044550,0.614380,-0.289896,0.547306,0.261966,-0.358256,0.677935,0.641916,0.959570,0.625050,-0.298693,0.538620,0.254664,-0.875798,-0.029577,0.481771,0.955170,0.621700,-0.292341,0.536604,0.264580,-0.738024,0.118725,0.664248,0.960350,0.620650,-0.297821,0.551532,0.254017,-0.817432,0.153807,0.555111,0.955090,0.625970,0.298693,0.538620,0.254664,0.876297,-0.029990,0.480838,0.044490,0.620390,0.289896,0.547306,0.261966,0.358169,0.677966,0.641932,0.040080,0.623750,0.292341,0.536604,0.264580,0.738184,0.118559,0.664099,0.039290,0.619340,0.297821,0.551532,0.254017,0.818025,0.153526,0.554315,0.044570,0.624670,-0.304931,0.501068,0.241638,-0.886559,0.039606,0.460917,0.947510,0.606480,-0.301677,0.513491,0.241599,-0.866357,0.123231,0.483982,0.948170,0.611840,-0.300888,0.528677,0.241196,-0.920095,-0.071612,0.385094,0.948720,0.617970,-0.305044,0.492784,0.239579,-0.877771,-0.421159,0.228347,0.946730,0.602990,0.304929,0.501068,0.241638,0.886561,0.039648,0.460909,0.052150,0.605160,0.301677,0.513491,0.241599,0.866134,0.123922,0.484205,0.051490,0.610520,0.300867,0.528676,0.241191,0.920088,-0.071091,0.385207,0.050930,0.616660,0.305044,0.492784,0.239579,0.877800,-0.421076,0.228392,0.052940,0.601670,-0.304648,0.543311,0.242525,-0.936930,-0.033445,0.347913,0.949410,0.623600,-0.302543,0.555964,0.242692,-0.912328,0.143140,0.383625,0.950130,0.627770,0.304618,0.543309,0.242517,0.937131,-0.033704,0.347348,0.050250,0.622290,0.302529,0.555964,0.242688,0.912623,0.143041,0.382960,0.049520,0.626460,-0.168119,0.676331,0.626644,0.034017,-0.872907,0.486700,0.440250,0.430450,0.168098,0.676299,0.626697,-0.035346,-0.872664,0.487040,0.559740,0.430450,0.006902,0.164364,0.494731,0.195346,-0.429912,0.881485,0.502320,0.236910,0.013805,0.156356,0.488465,0.363927,-0.434592,0.823824,0.504930,0.233100,0.013558,0.165646,0.493184,0.357787,-0.407793,0.840055,0.504720,0.236880,0.006990,0.154328,0.489738,0.197888,-0.459498,0.865853,0.502430,0.232910,-0.000000,0.163895,0.495303,0.000003,-0.439170,0.898404,0.500000,0.236930,-0.000000,0.153680,0.490171,0.000001,-0.469395,0.882988,0.500000,0.232870,0.007328,0.145641,0.484747,0.208273,-0.499695,0.840790,0.502630,0.229810,-0.000000,0.144790,0.485197,-0.000000,-0.512433,0.858727,0.500000,0.229730,0.014555,0.148193,0.483566,0.381218,-0.467280,0.797698,0.505350,0.230120,0.074605,0.534789,-0.071405,0.079452,-0.276267,-0.957791,0.918280,0.310870,0.072798,0.412771,-0.058127,0.180969,-0.007259,-0.983462,0.912390,0.248150,0.097679,0.532417,-0.068730,0.140953,-0.292492,-0.945823,0.906670,0.311740,0.097410,0.411233,-0.052230,0.260780,-0.031376,-0.964888,0.899190,0.247720,-0.066441,0.665295,0.637764,-0.690501,-0.104612,0.715727,0.468030,0.428360,-0.067432,0.659331,0.634369,-0.775936,-0.008917,0.630749,0.467360,0.427050,-0.074605,0.534789,-0.071405,-0.079451,-0.276267,-0.957791,0.081710,0.310870,-0.072798,0.412771,-0.058127,-0.180969,-0.007260,-0.983462,0.087600,0.248150,-0.097410,0.411233,-0.052230,-0.260780,-0.031376,-0.964888,0.100800,0.247720,-0.097679,0.532417,-0.068730,-0.140954,-0.292492,-0.945823,0.093320,0.311740,0.118988,0.529033,-0.064426,0.201652,-0.308092,-0.929740,0.895970,0.311750,0.121006,0.409095,-0.044169,0.326324,-0.050241,-0.943922,0.885710,0.247160,0.139014,0.525289,-0.058808,0.264359,-0.320639,-0.909563,0.885760,0.311430,0.144146,0.406593,-0.034650,0.380295,-0.062565,-0.922747,0.871720,0.246640,-0.289393,0.552687,0.250247,0.031140,0.968114,0.248566,0.955410,0.628610,-0.302543,0.555964,0.242692,0.194269,0.942505,0.271925,0.950130,0.627770,-0.297821,0.551532,0.254017,0.077012,0.946941,0.312044,0.955090,0.625970,-0.293682,0.554055,0.239239,0.141838,0.953023,0.267636,0.950640,0.630340,-0.283372,0.553171,0.237686,0.088168,0.960898,0.262491,0.952000,0.632720,-0.282291,0.549466,0.257524,-0.139034,0.909120,0.392646,0.959770,0.628040,0.289393,0.552687,0.250247,-0.031144,0.968112,0.248573,0.044240,0.627310,0.302529,0.555964,0.242688,-0.194305,0.942477,0.271997,0.049520,0.626460,0.293665,0.554054,0.239234,-0.141843,0.953015,0.267662,0.049010,0.629030,0.297821,0.551532,0.254017,-0.077017,0.946936,0.312059,0.044570,0.624670,0.283367,0.553171,0.237685,-0.088141,0.960906,0.262469,0.047650,0.631420,0.282291,0.549466,0.257524,0.138256,0.909114,0.392933,0.039880,0.626740,0.066490,0.665297,0.637787,0.688208,-0.119049,0.715679,0.531960,0.428360,0.067164,0.659303,0.634295,0.778435,-0.009561,0.627652,0.532630,0.427050,-0.121006,0.409095,-0.044169,-0.326324,-0.050241,-0.943922,0.114280,0.247160,-0.118988,0.529033,-0.064426,-0.201652,-0.308092,-0.929740,0.104020,0.311750,-0.144146,0.406593,-0.034650,-0.380295,-0.062565,-0.922747,0.128270,0.246640,-0.139014,0.525289,-0.058808,-0.264359,-0.320639,-0.909563,0.114230,0.311430,0.252099,0.581233,0.270755,0.814935,0.568273,0.113784,0.033310,0.640440,-0.334819,0.596299,0.179636,-0.977497,-0.084897,0.193109,0.913300,0.646410,-0.338411,0.573940,0.176094,-0.912685,0.001305,0.408662,0.912530,0.636820,-0.332775,0.576592,0.182541,-0.937910,-0.036599,0.344942,0.916900,0.638240,-0.339149,0.597498,0.171811,-0.902511,-0.019887,0.430208,0.908370,0.646310,0.334816,0.596299,0.179635,0.977440,-0.084888,0.193405,0.086360,0.645120,0.338410,0.573940,0.176094,0.912612,0.001336,0.408824,0.087130,0.635520,0.339148,0.597498,0.171811,0.902447,-0.019881,0.430342,0.091280,0.645020,0.332772,0.576592,0.182540,0.937833,-0.036529,0.345159,0.082760,0.636940,-0.319346,0.588156,0.211760,-0.086242,0.148596,0.985130,0.931920,0.643510,-0.330668,0.594862,0.205126,-0.701986,-0.015965,0.712011,0.925740,0.646290,-0.337463,0.604090,0.193820,-0.967420,-0.089061,0.236993,0.918750,0.649660,-0.306255,0.585448,0.206869,-0.014089,0.265364,0.964045,0.936490,0.643360,-0.296613,0.586538,0.209737,-0.684837,0.290062,0.668477,0.939480,0.644400,0.319327,0.588155,0.211756,0.085877,0.148571,0.985166,0.067740,0.642210,0.330655,0.594861,0.205123,0.701670,-0.016013,0.712322,0.073910,0.644980,0.337455,0.604089,0.193818,0.967343,-0.089184,0.237262,0.080910,0.648350,0.306244,0.585448,0.206866,0.014137,0.265291,0.964065,0.063170,0.642060,0.296603,0.586538,0.209735,0.685016,0.289740,0.668434,0.060180,0.643090,-0.339697,0.617854,0.171242,-0.921915,-0.090985,0.376557,0.906750,0.653740,-0.337070,0.612479,0.180555,-0.990334,-0.101526,0.094506,0.912060,0.652250,0.339697,0.617854,0.171242,0.921866,-0.091010,0.376669,0.092900,0.652450,0.337067,0.612479,0.180554,0.990304,-0.101596,0.094747,0.087590,0.650960,-0.294847,0.639303,0.229094,-0.305808,-0.713222,0.630710,0.941340,0.663710,-0.282796,0.636956,0.233137,-0.651185,-0.558138,0.514237,0.945230,0.662160,-0.292697,0.645655,0.241011,-0.433138,-0.705787,0.560586,0.944770,0.666890,-0.280454,0.641971,0.243403,-0.685935,-0.536459,0.491635,0.948120,0.664990,-0.279586,0.628943,0.238394,-0.969666,0.071595,0.233713,0.947300,0.661080,-0.276484,0.634486,0.247239,-0.966657,0.088200,0.240407,0.949790,0.663810,0.294831,0.639302,0.229089,0.305953,-0.713194,0.630672,0.058320,0.662400,0.282791,0.636956,0.233136,0.651276,-0.558049,0.514218,0.054430,0.660850,0.279581,0.628942,0.238393,0.969645,0.071241,0.233911,0.052360,0.659780,0.280448,0.641971,0.243402,0.685883,-0.536453,0.491714,0.051540,0.663680,0.276478,0.634486,0.247237,0.966574,0.088117,0.240771,0.049880,0.662500,0.292681,0.645654,0.241007,0.433186,-0.705984,0.560301,0.054890,0.665580,-0.304125,0.651175,0.235624,-0.658046,-0.402675,0.636261,0.939270,0.669840,-0.306244,0.670161,0.236160,-0.800159,-0.153618,0.579782,0.936840,0.678250,-0.315178,0.665412,0.225112,-0.786662,-0.107965,0.607870,0.931940,0.674380,-0.298500,0.656334,0.246338,-0.655308,-0.341506,0.673754,0.943050,0.672940,-0.298048,0.672128,0.249152,-0.781102,-0.383721,0.492582,0.941830,0.681060,-0.289298,0.659710,0.254636,-0.633898,-0.395006,0.664939,0.946700,0.675490,-0.287662,0.650270,0.248972,-0.507403,-0.554960,0.659212,0.947640,0.669320,-0.276234,0.653040,0.256690,-0.720202,-0.361401,0.592198,0.950490,0.671230,-0.277014,0.644616,0.251842,-0.762543,-0.369295,0.531178,0.950340,0.667080,-0.272567,0.646315,0.260509,-0.956850,-0.064458,0.283342,0.952470,0.668740,-0.274045,0.637927,0.254416,-0.966041,0.194465,0.170139,0.951640,0.665530,-0.273337,0.639515,0.261117,-0.908780,0.408932,-0.083022,0.953320,0.666940,0.306237,0.670160,0.236158,0.800188,-0.153772,0.579701,0.062820,0.676940,0.304121,0.651175,0.235623,0.658050,-0.403125,0.635972,0.060390,0.668530,0.315170,0.665411,0.225110,0.786663,-0.108170,0.607833,0.067720,0.673070,0.298498,0.656334,0.246338,0.655198,-0.341558,0.673836,0.056610,0.671630,0.287659,0.650269,0.248972,0.507029,-0.554983,0.659481,0.052020,0.668010,0.289279,0.659709,0.254633,0.633648,-0.395762,0.664727,0.052960,0.674170,0.276217,0.653039,0.256687,0.719724,-0.361777,0.592549,0.049180,0.669920,0.298051,0.672128,0.249154,0.781116,-0.384512,0.491944,0.057820,0.679750,0.277007,0.644616,0.251841,0.761662,-0.369194,0.532510,0.049330,0.665760,0.274029,0.637926,0.254412,0.965528,0.194544,0.172942,0.048030,0.664220,0.272522,0.646312,0.260499,0.956562,-0.064798,0.284237,0.047190,0.667430,0.273292,0.639512,0.261107,0.908879,0.409028,-0.081458,0.046350,0.665630,-0.333299,0.705282,0.219811,-0.877121,-0.409277,0.251300,0.922300,0.688910,-0.327183,0.686567,0.212352,-0.841698,-0.172187,0.511758,0.923090,0.679940,-0.318557,0.691881,0.225061,-0.801509,-0.427768,0.417849,0.928880,0.684140,-0.335165,0.701618,0.202560,-0.905016,-0.242340,0.349595,0.915840,0.684410,-0.310401,0.690149,0.242269,-0.710466,-0.694547,0.113327,0.935490,0.687150,0.333299,0.705282,0.219811,0.877076,-0.409423,0.251220,0.077350,0.687600,0.327180,0.686567,0.212352,0.841614,-0.172250,0.511875,0.076560,0.678630,0.335165,0.701618,0.202560,0.904982,-0.242389,0.349651,0.083800,0.683100,0.318551,0.691881,0.225060,0.801495,-0.427938,0.417701,0.070770,0.682830,0.310405,0.690149,0.242271,0.710513,-0.694565,0.112919,0.064160,0.685840,-0.291263,0.671667,0.261132,-0.644515,-0.755803,0.115593,0.946350,0.682470,-0.275857,0.662383,0.264888,-0.761992,-0.606930,0.225839,0.950350,0.677470,-0.287955,0.670273,0.269790,-0.338841,-0.833973,-0.435518,0.949760,0.682820,-0.278217,0.663122,0.275674,-0.418275,-0.617513,-0.666126,0.953210,0.679370,-0.270854,0.652980,0.269724,-0.982969,-0.165220,-0.080463,0.953880,0.672820,-0.277719,0.651891,0.277821,-0.488686,-0.000353,-0.872460,0.956800,0.674410,-0.279346,0.643553,0.275107,-0.390201,0.483310,-0.783680,0.956800,0.671150,-0.273848,0.644876,0.269674,-0.919267,0.220316,-0.326203,0.955020,0.670000,-0.278019,0.640242,0.272170,-0.236796,0.766285,-0.597273,0.956180,0.669580,-0.275154,0.639572,0.267968,-0.655356,0.633003,-0.412088,0.954940,0.668370,0.291294,0.671669,0.261143,0.644131,-0.756218,0.115016,0.053310,0.681150,0.275848,0.662382,0.264889,0.761020,-0.608327,0.225361,0.049310,0.676160,0.270820,0.652977,0.269719,0.982812,-0.166252,-0.080258,0.045780,0.671500,0.278223,0.663122,0.275682,0.417754,-0.617905,-0.666089,0.046450,0.678060,0.277672,0.651887,0.277814,0.488681,-0.000442,-0.872463,0.042870,0.673100,0.287970,0.670273,0.269797,0.338644,-0.834063,-0.435498,0.049900,0.681510,0.273824,0.644873,0.269669,0.919191,0.220061,-0.326591,0.044650,0.668680,0.279319,0.643551,0.275103,0.390357,0.483531,-0.783466,0.042860,0.669830,0.275125,0.639570,0.267963,0.655050,0.632692,-0.413051,0.044730,0.667060,0.277991,0.640240,0.272165,0.236882,0.766276,-0.597251,0.043490,0.668260,-0.318794,0.688579,0.258443,-0.381840,-0.813729,-0.438228,0.939770,0.693780,-0.304260,0.682475,0.259291,-0.506359,-0.814275,-0.283825,0.942740,0.688180,-0.309589,0.675291,0.272004,-0.333818,-0.671536,-0.661517,0.949880,0.692150,-0.298961,0.671798,0.268952,-0.268290,-0.714797,-0.645821,0.949600,0.686820,0.318806,0.688580,0.258448,0.381754,-0.813701,-0.438353,0.059890,0.692470,0.304266,0.682475,0.259295,0.506439,-0.814169,-0.283988,0.056910,0.686860,0.298976,0.671799,0.268958,0.268286,-0.714785,-0.645836,0.050060,0.685510,0.309622,0.675292,0.272017,0.333735,-0.671565,-0.661530,0.049770,0.690820,-0.303433,0.663480,0.277370,-0.245885,-0.451378,-0.857787,0.956950,0.686840,-0.294280,0.662345,0.275383,-0.123125,-0.441621,-0.888713,0.955290,0.682860,-0.289072,0.652294,0.278618,-0.067302,0.019458,-0.997543,0.958660,0.677070,-0.284900,0.644497,0.276005,0.002628,0.569752,-0.821812,0.958690,0.672270,-0.280847,0.640389,0.270728,-0.020377,0.834550,-0.550556,0.957490,0.669020,0.303436,0.663480,0.277374,0.245882,-0.451318,-0.857820,0.042700,0.685520,0.294282,0.662345,0.275387,0.123094,-0.441294,-0.888880,0.044360,0.681550,0.289041,0.652291,0.278614,0.067394,0.019697,-0.997532,0.040990,0.675750,0.284878,0.644495,0.276002,-0.002514,0.569755,-0.821811,0.040980,0.670950,0.280817,0.640387,0.270723,0.020388,0.834624,-0.550442,0.042170,0.667710,-0.343074,0.699103,0.181642,-0.980983,0.180035,0.072523,0.907690,0.680520,-0.339174,0.710364,0.197261,-0.971026,0.217537,0.098927,0.913030,0.686590,-0.338261,0.691404,0.188610,-0.915200,-0.089970,0.392829,0.910770,0.679180,-0.091586,0.406076,0.662348,-0.554879,0.780560,0.287810,0.473693,0.342390,-0.090908,0.405262,0.665908,-0.815212,0.241571,0.526376,0.473820,0.342060,-0.098652,0.369010,0.488443,0.175330,0.845291,0.504721,0.478480,0.344270,-0.098686,0.399609,0.465844,0.254359,0.573953,0.778382,0.478479,0.344274,0.343074,0.699102,0.181642,0.980984,0.180027,0.072528,0.091950,0.679210,0.338261,0.691404,0.188610,0.915188,-0.089976,0.392856,0.088870,0.677870,0.339174,0.710363,0.197261,0.971029,0.217520,0.098933,0.086610,0.685270,-0.098730,0.355242,0.573921,0.159714,0.985537,-0.056642,0.478478,0.344230,-0.104947,0.358154,0.573982,0.654869,0.753594,-0.056939,0.476001,0.343306,-0.090651,0.370782,0.485774,-0.005004,0.845906,0.533309,0.480920,0.345220,-0.090683,0.404695,0.461595,0.072445,0.579918,0.811448,0.480920,0.345224,-0.090672,0.354952,0.574585,-0.019850,0.998714,-0.046646,0.480924,0.345169,-0.335454,0.714912,0.216087,-0.942825,0.259809,0.208760,0.919980,0.691450,0.335454,0.714912,0.216087,0.942887,0.259675,0.208643,0.079660,0.690120,-0.017101,0.518983,0.725076,-0.639808,-0.660114,0.393568,0.492370,0.377770,-0.252151,0.581235,0.270769,-0.815249,0.567746,0.114160,0.966360,0.641740,0.017101,0.518983,0.725076,0.639965,-0.660109,0.393322,0.507620,0.377770,0.291440,0.608887,0.247046,0.888412,0.321382,-0.327778,0.045650,0.651670,0.286484,0.615117,0.244672,0.801432,0.481241,-0.355126,0.047360,0.654320,-0.277414,0.634720,0.259447,-0.530426,0.743720,-0.406852,0.954530,0.664960,-0.278381,0.637397,0.265003,-0.255090,0.851177,-0.458724,0.956120,0.666710,-0.278943,0.628180,0.248945,-0.840761,0.513404,-0.171863,0.951700,0.661750,-0.277472,0.632011,0.254455,-0.721001,0.626816,-0.295398,0.953170,0.663550,0.277356,0.634716,0.259432,0.530774,0.744149,-0.405613,0.045140,0.663650,0.278352,0.637395,0.264997,0.254922,0.851097,-0.458964,0.043550,0.665390,0.278936,0.628180,0.248944,0.840936,0.513234,-0.171514,0.047960,0.660440,0.277465,0.632011,0.254453,0.721486,0.627131,-0.293537,0.046490,0.662240,-0.281363,0.622058,0.241889,-0.907170,0.410978,-0.090216,0.949530,0.658830,-0.286494,0.615117,0.244674,-0.800987,0.481736,-0.355459,0.952310,0.655630,0.281349,0.622057,0.241885,0.907426,0.410473,-0.089941,0.050130,0.657530,0.091564,0.406079,0.662460,0.550278,0.783794,0.287855,0.526298,0.342390,0.090874,0.405270,0.665986,0.550278,0.783794,0.287855,0.526170,0.342060,-0.081294,0.372463,0.483756,-0.021379,0.839681,0.542660,0.483040,0.346050,-0.081328,0.408902,0.458390,0.046212,0.571439,0.819342,0.483040,0.346054,-0.081301,0.355269,0.575442,-0.040945,0.998418,-0.038528,0.483056,0.345984,0.098628,0.399624,0.465815,-0.258493,0.573401,0.777427,0.521511,0.344274,0.098595,0.369017,0.488425,-0.179144,0.844835,0.504144,0.521510,0.344270,0.104858,0.358174,0.573988,-0.655896,0.752697,-0.056984,0.523989,0.343306,0.098672,0.355247,0.573929,-0.163779,0.984875,-0.056553,0.521512,0.344230,-0.071031,0.412409,0.455599,0.046123,0.565291,0.823601,0.485250,0.346805,0.090674,0.404658,0.461560,-0.074764,0.580207,0.811030,0.519080,0.345224,0.090643,0.370764,0.485752,0.003131,0.846105,0.533008,0.519080,0.345220,-0.292897,0.588365,0.217972,-0.940446,0.274428,0.200626,0.941440,0.644870,0.292883,0.588364,0.217968,0.940536,0.274052,0.200716,0.058220,0.643570,0.036251,0.091747,0.424500,0.552024,-0.475194,0.685172,0.517060,0.201080,0.024396,0.088928,0.431264,0.473862,-0.511063,0.717126,0.510300,0.203610,0.028690,0.082126,0.423565,0.501375,-0.506046,0.701812,0.512890,0.197920,0.030312,0.095572,0.431686,0.529135,-0.487733,0.694358,0.513310,0.205600,0.021967,0.094859,0.437130,0.459389,-0.523180,0.717806,0.508900,0.207790,0.026677,0.097858,0.436064,0.511413,-0.501931,0.697512,0.511170,0.208220,0.015265,0.091460,0.438383,0.359506,-0.556725,0.748874,0.506040,0.207280,0.016994,0.083598,0.431864,0.373755,-0.546264,0.749601,0.506930,0.202340,0.019877,0.074565,0.423806,0.404225,-0.548851,0.731687,0.508510,0.195910,-0.291476,0.608889,0.247055,-0.888705,0.321139,-0.327219,0.954010,0.652970,0.090670,0.354938,0.574600,0.018234,0.998751,-0.046526,0.519076,0.345169,-0.060365,0.415343,0.453122,0.049747,0.561567,0.825935,0.487890,0.347545,-0.048619,0.412684,0.701940,-0.394663,0.659338,0.639933,0.487980,0.347197,0.081351,0.408840,0.458355,-0.046471,0.571967,0.818959,0.516950,0.346054,0.081318,0.372436,0.483734,0.021272,0.839915,0.542300,0.516950,0.346050,0.081326,0.355257,0.575454,0.041340,0.998406,-0.038436,0.516934,0.345984,-0.050108,0.417549,0.451019,0.060657,0.560196,0.826136,0.490399,0.348156,0.071067,0.412344,0.455569,-0.045577,0.565835,0.823258,0.514740,0.346805,-0.040711,0.376522,0.478073,0.037877,0.833813,0.550747,0.492300,0.348550,-0.040776,0.418692,0.449395,0.079499,0.561558,0.823609,0.492299,0.348556,-0.040574,0.356575,0.578127,0.006285,0.999674,-0.024728,0.492329,0.348457,0.060406,0.415283,0.453098,-0.049081,0.562051,0.825645,0.512100,0.347545,0.048669,0.412658,0.702000,0.394226,0.659069,0.640479,0.512010,0.347197,-0.032315,0.418619,0.448304,0.098339,0.566042,0.818490,0.493849,0.348736,0.050152,0.417495,0.450999,-0.060202,0.560616,0.825884,0.509591,0.348156,-0.024320,0.417534,0.447694,0.105491,0.573691,0.812250,0.495339,0.348706,-0.019557,0.413218,0.713776,-0.010469,0.717988,0.695976,0.495467,0.348307,0.040826,0.418640,0.449377,-0.079420,0.561935,0.823360,0.507691,0.348556,0.040761,0.376501,0.478062,-0.037833,0.833985,0.550488,0.507690,0.348550,0.040624,0.356568,0.578132,-0.006319,0.999674,-0.024729,0.507661,0.348457,-0.016377,0.415957,0.447422,0.091548,0.583421,0.806993,0.496839,0.348576,-0.013360,0.412486,0.714070,0.032295,0.750397,0.660198,0.496933,0.348177,0.032373,0.418566,0.448286,-0.098438,0.566403,0.818228,0.506141,0.348736,0.008711,0.080097,0.432552,0.214587,-0.584118,0.782789,0.503450,0.201620,0.010169,0.069645,0.424395,0.234034,-0.595455,0.768545,0.504200,0.194800,0.007787,0.088971,0.439400,0.206287,-0.590890,0.779933,0.503020,0.206920,0.0,0.088058,0.439803,0.000001,-0.606944,0.794744,0.500000,0.206790,0.0,0.078820,0.432908,-0.000001,-0.601996,0.798499,0.500000,0.201380,0.0,0.067913,0.424682,-0.000002,-0.617409,0.786642,0.500000,0.194430,0.090874,0.405270,0.665986,0.716609,-0.439602,0.541500,0.526170,0.342060,-0.008259,0.414586,0.447331,0.054219,0.592171,0.803986,0.498400,0.348465,-0.006835,0.411820,0.714291,0.038537,0.775191,0.630551,0.498450,0.348063,0.024382,0.417480,0.447676,-0.105401,0.574058,0.812002,0.504651,0.348706,0.019598,0.413202,0.713817,0.010808,0.717901,0.696061,0.504523,0.348307,0.000030,0.414034,0.447310,0.001223,0.595854,0.803092,0.500000,0.348415,0.000015,0.411574,0.714050,-0.000366,0.784054,0.620693,0.500000,0.348010,0.016441,0.415908,0.447407,-0.090745,0.583782,0.806824,0.503161,0.348576,0.013427,0.412468,0.714110,-0.032945,0.750255,0.660327,0.503065,0.348177,0.008321,0.414554,0.447321,-0.052333,0.592425,0.803924,0.501590,0.348465,0.006892,0.411801,0.714330,-0.039273,0.774778,0.631012,0.501540,0.348063,-0.095037,0.404709,0.661262,-0.430400,0.853618,0.293414,0.471636,0.341756,-0.092671,0.406048,0.661036,-0.430400,0.853618,0.293414,0.473123,0.342328,-0.109952,0.389438,0.574109,0.999946,0.007228,-0.007473,0.473517,0.342459,-0.108770,0.367900,0.574890,0.965673,0.258157,-0.028818,0.473661,0.342472,0.092651,0.406048,0.661036,-0.045657,0.630071,-0.775194,0.526868,0.342328,0.094523,0.404788,0.661236,-0.045657,0.630071,-0.775194,0.526841,0.342336,0.093401,0.403128,0.658619,-0.674446,0.385234,-0.629855,0.526300,0.342396,0.091564,0.406079,0.662460,-0.448461,0.495104,-0.744147,0.526298,0.342390,0.094951,0.404746,0.661304,0.434513,0.852677,0.290071,0.528374,0.341808,0.092651,0.406048,0.661036,0.434513,0.852677,0.290071,0.526868,0.342328,0.008671,0.617283,0.735978,0.179893,0.459749,0.869638,0.501970,0.406610,0.008417,0.604904,0.742471,0.164484,0.480346,0.861518,0.501930,0.403290,-0.000018,0.617636,0.736304,0.000227,0.464225,0.885717,0.500000,0.406660,-0.000029,0.605343,0.742731,0.000126,0.485829,0.874054,0.500000,0.403370,-0.008706,0.617284,0.735980,-0.179730,0.459641,0.869728,0.498020,0.406610,-0.008473,0.604907,0.742475,-0.164092,0.480376,0.861576,0.498060,0.403290,-0.342587,0.617260,0.157177,-0.956891,-0.086966,-0.277123,0.901940,0.652740,-0.342351,0.595742,0.164573,-0.995007,-0.090697,0.041655,0.905340,0.645210,-0.344439,0.618547,0.163779,-0.988147,-0.088311,0.125562,0.903640,0.653640,-0.340172,0.593568,0.158953,-0.937062,-0.145915,-0.317213,0.903560,0.643850,0.342351,0.595742,0.164573,0.995004,-0.090696,0.041725,0.094310,0.643920,0.342587,0.617260,0.157177,0.956890,-0.086966,-0.277126,0.097710,0.651450,0.344439,0.618547,0.163779,0.988143,-0.088318,0.125592,0.096000,0.652340,0.340172,0.593568,0.158953,0.937067,-0.145915,-0.317199,0.096090,0.642560,-0.336995,0.568678,0.164702,-0.894880,-0.283558,-0.344652,0.908090,0.633820,-0.339674,0.570793,0.169586,-0.980054,-0.190231,-0.057500,0.909830,0.635190,0.339674,0.570793,0.169586,0.980067,-0.190202,-0.057372,0.089830,0.633900,0.336995,0.568678,0.164702,0.894893,-0.283553,-0.344623,0.091570,0.632530,-0.015265,0.091460,0.438383,-0.359504,-0.556724,0.748876,0.493950,0.207280,-0.024396,0.088928,0.431264,-0.473864,-0.511062,0.717125,0.489690,0.203610,-0.016994,0.083598,0.431864,-0.373752,-0.546264,0.749603,0.493060,0.202340,-0.021967,0.094859,0.437131,-0.459388,-0.523179,0.717806,0.491090,0.207790,-0.030312,0.095572,0.431686,-0.529136,-0.487733,0.694357,0.486690,0.205600,-0.026677,0.097858,0.436064,-0.511415,-0.501930,0.697511,0.488820,0.208220,-0.036251,0.091747,0.424500,-0.552025,-0.475195,0.685170,0.482930,0.201080,-0.028690,0.082126,0.423565,-0.501379,-0.506045,0.701810,0.487110,0.197920,-0.019877,0.074565,0.423806,-0.404223,-0.548853,0.731686,0.491480,0.195910,0.092101,0.406611,0.662936,-0.767913,-0.292678,-0.569780,0.526400,0.342670,0.093913,0.407379,0.659070,-0.848793,-0.228394,-0.476851,0.526397,0.342662,0.092651,0.406048,0.661036,-0.691239,-0.309458,-0.653012,0.526868,0.342328,0.094523,0.404788,0.661236,-0.865651,-0.076043,-0.494839,0.526841,0.342336,0.108693,0.367922,0.574906,-0.965400,0.259168,-0.028889,0.526329,0.342472,-0.108098,0.409878,0.502402,0.990380,-0.118107,0.072102,0.473648,0.342505,-0.108906,0.414481,0.574921,0.991603,-0.129277,-0.003386,0.473634,0.342547,-0.008711,0.080097,0.432552,-0.214584,-0.584120,0.782789,0.496540,0.201620,-0.007787,0.088971,0.439400,-0.206286,-0.590890,0.779933,0.496970,0.206920,-0.010169,0.069645,0.424395,-0.234031,-0.595456,0.768545,0.495800,0.194800,0.005769,0.246876,0.643153,-0.097849,-0.922449,0.373515,0.501690,0.299140,0.0,0.079316,-0.251816,0.000000,0.676951,-0.736028,1.0,0.059510,0.045286,0.103183,-0.229383,0.024319,0.684005,-0.729072,0.974050,0.067970,0.050884,0.080158,-0.250561,0.022825,0.680491,-0.732401,0.978390,0.049160,0.0,0.102574,-0.230485,0.000000,0.680423,-0.732820,0.992050,0.076530,0.038324,0.133961,-0.200542,0.028452,0.689300,-0.723917,0.969950,0.085040,0.0,0.133785,-0.201315,0.000000,0.685253,-0.728305,0.984940,0.092110,0.085390,0.136062,-0.195586,0.062767,0.699840,-0.711536,0.950700,0.076910,0.096639,0.106777,-0.223201,0.058293,0.693480,-0.718113,0.952960,0.059140,0.105592,0.084718,-0.243584,0.056790,0.690045,-0.721535,0.955220,0.039460,0.020388,0.260088,0.667502,0.026706,-0.788640,0.614276,0.505310,0.306180,-0.085390,0.136062,-0.195586,-0.062767,0.699841,-0.711536,0.049290,0.076910,-0.045286,0.103183,-0.229383,-0.024319,0.684005,-0.729072,0.025940,0.067970,-0.096639,0.106777,-0.223201,-0.058293,0.693480,-0.718114,0.047030,0.059140,-0.038324,0.133961,-0.200542,-0.028452,0.689300,-0.723917,0.030040,0.085040,0.0,0.102574,-0.230485,0.000000,0.680423,-0.732820,0.007940,0.076530,0.0,0.133785,-0.201315,0.000000,0.685253,-0.728305,0.015050,0.092110,0.0,0.079316,-0.251816,0.000000,0.676951,-0.736028,0.0,0.059510,-0.050884,0.080158,-0.250561,-0.022825,0.680490,-0.732402,0.021600,0.049160,-0.105592,0.084718,-0.243584,-0.056790,0.690044,-0.721536,0.044770,0.039460,0.007578,0.589889,0.751389,0.148697,0.508423,0.848172,0.501650,0.398840,-0.000024,0.590245,0.751618,-0.000029,0.514832,0.857291,0.500000,0.398950,-0.007621,0.589888,0.751386,-0.148585,0.508130,0.848367,0.498340,0.398840,-0.012118,0.057337,0.413971,-0.262647,-0.612880,0.745248,0.494790,0.185930,0.0,0.054957,0.414199,-0.000001,-0.640256,0.768162,0.500000,0.185410,-0.023630,0.064039,0.413409,-0.436353,-0.558134,0.705750,0.489270,0.187540,-0.028371,0.051700,0.400189,-0.425070,-0.516437,0.743376,0.486760,0.176710,-0.014697,0.042578,0.400554,-0.266779,-0.573426,0.774605,0.493630,0.174090,-0.306644,0.619745,0.162303,-0.517168,-0.023985,-0.855548,0.884540,0.648160,-0.318456,0.618173,0.162498,0.316862,-0.018205,-0.948297,0.890450,0.649350,-0.317599,0.594941,0.165196,0.344956,-0.170351,-0.923031,0.894460,0.638190,-0.305554,0.595921,0.165311,0.024325,-0.214969,-0.976318,0.890120,0.635320,0.0,0.039011,0.400875,-0.000001,-0.608093,0.793866,0.500000,0.172820,0.012118,0.057337,0.413971,0.262648,-0.612879,0.745248,0.505200,0.185930,0.023630,0.064039,0.413409,0.436354,-0.558132,0.705751,0.510720,0.187540,0.014697,0.042578,0.400554,0.266778,-0.573426,0.774605,0.506360,0.174090,0.306644,0.619745,0.162303,0.517168,-0.023984,-0.855548,0.115100,0.646880,0.318456,0.618173,0.162498,-0.316859,-0.018202,-0.948298,0.109190,0.648070,0.305553,0.595921,0.165311,-0.024330,-0.214965,-0.976319,0.109540,0.634050,0.317598,0.594941,0.165196,-0.344946,-0.170346,-0.923036,0.105190,0.636910,-0.313665,0.694712,0.180832,0.360943,0.584429,-0.726748,0.898730,0.688400,-0.304343,0.694217,0.180519,-0.460994,0.635173,-0.619709,0.895960,0.692150,-0.311326,0.706894,0.194561,0.412949,0.768540,-0.488692,0.905940,0.695830,-0.303348,0.705683,0.194900,-0.359545,0.825733,-0.434617,0.904230,0.699160,0.313665,0.694712,0.180832,-0.360944,0.584429,-0.726748,0.100910,0.687080,0.311326,0.706894,0.194561,-0.412950,0.768540,-0.488691,0.093700,0.694500,0.304343,0.694217,0.180519,0.460994,0.635173,-0.619710,0.103670,0.690830,0.303349,0.705683,0.194900,0.359547,0.825729,-0.434622,0.095410,0.697830,-0.309637,0.714352,0.213895,0.411864,0.890145,-0.194960,0.915980,0.700970,-0.302393,0.712612,0.214879,-0.315641,0.934862,-0.162494,0.915280,0.704290,0.309637,0.714352,0.213895,-0.411865,0.890158,-0.194899,0.083680,0.699650,0.302393,0.712612,0.214879,0.315716,0.934822,-0.162576,0.084370,0.702970,-0.296041,0.719410,0.214272,-0.910341,0.410672,-0.051267,0.255180,0.414420,-0.291891,0.740105,0.206233,-0.998556,0.053541,-0.004420,0.251540,0.421610,-0.302393,0.712612,0.214879,-0.315641,0.934862,-0.162494,0.255270,0.411840,-0.295800,0.713261,0.190763,-0.907084,0.389481,-0.159694,0.245620,0.409910,-0.303348,0.705683,0.194900,-0.359545,0.825733,-0.434617,0.247050,0.407130,-0.292530,0.731265,0.178964,-0.997915,0.062242,-0.017090,0.240610,0.416450,-0.294686,0.779653,0.185576,-0.998396,-0.054760,0.014377,0.240990,0.436320,-0.294361,0.764779,0.154872,-0.998958,-0.044515,0.010116,0.229690,0.429050,-0.298057,0.831796,0.157265,-0.999787,-0.018005,-0.010127,0.226940,0.455040,-0.296775,0.807584,0.122199,-0.999001,-0.025768,-0.036500,0.215280,0.444390,0.296042,0.719410,0.214272,0.910349,0.410632,-0.051440,0.744810,0.414420,0.291891,0.740105,0.206233,0.998553,0.053585,-0.004516,0.748450,0.421610,0.292530,0.731265,0.178964,0.997914,0.062244,-0.017097,0.759380,0.416450,0.295800,0.713261,0.190763,0.907084,0.389478,-0.159706,0.754370,0.409910,0.302393,0.712612,0.214879,0.315716,0.934822,-0.162576,0.744720,0.411840,0.303349,0.705683,0.194900,0.359547,0.825729,-0.434622,0.752940,0.407130,0.294686,0.779653,0.185576,0.998396,-0.054757,0.014365,0.759000,0.436320,0.298057,0.831796,0.157265,0.999787,-0.018005,-0.010127,0.773050,0.455040,0.294361,0.764779,0.154872,0.998957,-0.044516,0.010115,0.770300,0.429050,0.296775,0.807584,0.122199,0.999001,-0.025768,-0.036500,0.784710,0.444390,-0.292969,0.715810,0.156187,-0.996762,0.060828,-0.052590,0.232200,0.408880,-0.296726,0.701647,0.172003,-0.920778,0.308922,-0.238190,0.238450,0.404230,-0.304343,0.694217,0.180519,-0.460994,0.635173,-0.619709,0.241060,0.401930,0.292969,0.715810,0.156187,0.996762,0.060828,-0.052590,0.767790,0.408880,0.296726,0.701647,0.172003,0.920778,0.308922,-0.238190,0.761540,0.404230,0.304343,0.694217,0.180519,0.460994,0.635173,-0.619710,0.758940,0.401930,0.028371,0.051700,0.400189,0.425071,-0.516437,0.743376,0.513230,0.176710,0.159592,0.933307,0.609337,0.564714,0.392237,0.726119,0.567730,0.524220,0.161052,0.896399,0.626724,0.571719,0.345129,0.744327,0.564200,0.508150,0.184934,0.930420,0.589117,0.678485,0.349552,0.646121,0.580790,0.523140,0.185352,0.893002,0.606565,0.686702,0.308888,0.658049,0.576490,0.506580,0.163831,0.863489,0.639102,0.574225,0.324692,0.751559,0.562290,0.494960,0.187326,0.860328,0.619281,0.692246,0.299054,0.656781,0.573900,0.492960,0.209259,0.855737,0.594255,0.827399,0.225622,0.514301,0.586110,0.490440,0.209131,0.886807,0.580510,0.815014,0.232508,0.530747,0.589910,0.503790,-0.296605,0.620728,0.145967,-0.897158,-0.040473,-0.439852,0.230510,0.370520,-0.284942,0.593798,0.125296,-0.933648,-0.134110,-0.332138,0.223740,0.357570,-0.296104,0.595188,0.147461,-0.888178,-0.134112,-0.439492,0.232490,0.360130,-0.286997,0.620569,0.122892,-0.952635,-0.087148,-0.291360,0.221720,0.368700,-0.306644,0.619745,0.162303,-0.517168,-0.023985,-0.855548,0.235690,0.371430,-0.305554,0.595921,0.165311,-0.880830,-0.141746,-0.451716,0.237680,0.361730,0.209850,0.923094,0.561933,0.802756,0.271105,0.531117,0.595680,0.520160,0.229306,0.876426,0.544954,0.911317,0.125533,0.392100,0.606650,0.499840,0.234468,0.909654,0.524292,0.906076,0.156582,0.393076,0.615190,0.514150,0.225944,0.848133,0.560567,0.918699,0.128833,0.373354,0.600840,0.488150,0.296605,0.620728,0.145967,0.897158,-0.040472,-0.439852,0.769480,0.370520,0.296104,0.595188,0.147461,0.888179,-0.134113,-0.439489,0.767500,0.360130,0.284942,0.593798,0.125296,0.933648,-0.134111,-0.332139,0.776250,0.357570,0.286997,0.620569,0.122892,0.952635,-0.087147,-0.291361,0.778270,0.368700,0.306644,0.619745,0.162303,0.517168,-0.023984,-0.855548,0.764310,0.371430,0.305553,0.595921,0.165311,0.880833,-0.141748,-0.451709,0.762310,0.361730,-0.315143,0.573860,0.172064,0.341819,-0.262988,-0.902218,0.899840,0.628140,-0.309724,0.554405,0.180199,0.234282,-0.428701,-0.872541,0.907200,0.618020,-0.302705,0.575402,0.172133,0.007490,-0.329954,-0.943967,0.896160,0.624800,-0.298200,0.555484,0.178534,-0.587168,-0.489797,-0.644464,0.903760,0.614620,0.315142,0.573860,0.172064,-0.341802,-0.262989,-0.902224,0.099820,0.626850,0.302705,0.575402,0.172133,-0.007499,-0.329950,-0.943969,0.103510,0.623520,0.309723,0.554405,0.180199,-0.234265,-0.428708,-0.872542,0.092470,0.616720,0.298199,0.555484,0.178534,0.587172,-0.489796,-0.644460,0.095910,0.613320,0.158714,0.522158,-0.051704,0.374272,-0.325313,-0.868384,0.875710,0.311380,0.168134,0.404260,-0.023051,0.490143,-0.064500,-0.869252,0.857020,0.246350,0.180130,0.520998,-0.041512,0.533508,-0.316001,-0.784546,0.864310,0.312310,0.197726,0.404519,-0.000923,0.693271,-0.050930,-0.718875,0.836960,0.248960,-0.168134,0.404260,-0.023051,-0.490143,-0.064500,-0.869252,0.142970,0.246350,-0.158714,0.522158,-0.051704,-0.374273,-0.325313,-0.868384,0.124280,0.311380,-0.197726,0.404519,-0.000923,-0.693271,-0.050930,-0.718875,0.163040,0.248960,-0.180130,0.520998,-0.041512,-0.533507,-0.316001,-0.784547,0.135680,0.312310,0.229062,0.524523,0.001375,0.799715,-0.274323,-0.534044,0.833040,0.318590,0.229577,0.465670,0.027775,0.838953,-0.182243,-0.512781,0.818260,0.289020,0.204327,0.522682,-0.024971,0.678824,-0.300655,-0.669929,0.849890,0.315320,0.216671,0.443659,0.014025,0.791120,-0.140636,-0.595274,0.827440,0.275060,-0.204327,0.522682,-0.024971,-0.678824,-0.300655,-0.669929,0.150100,0.315320,-0.229577,0.465670,0.027775,-0.838953,-0.182242,-0.512781,0.181730,0.289020,-0.229062,0.524523,0.001375,-0.799715,-0.274323,-0.534044,0.166950,0.318590,-0.216671,0.443659,0.014025,-0.791120,-0.140636,-0.595273,0.172550,0.275060,-0.282227,0.568491,0.130415,-0.922474,-0.201435,-0.329340,0.227090,0.347120,-0.293516,0.571900,0.151335,-0.886562,-0.242570,-0.393914,0.235740,0.350900,-0.302705,0.575402,0.172133,-0.892555,-0.255779,-0.371380,0.240980,0.353440,-0.289387,0.549167,0.160252,-0.898491,-0.330600,-0.288821,0.241610,0.341910,-0.298200,0.555484,0.178534,-0.587168,-0.489797,-0.644464,0.246990,0.345610,-0.279380,0.542985,0.140402,-0.938951,-0.241541,-0.245010,0.233100,0.336610,0.282227,0.568491,0.130415,0.922474,-0.201436,-0.329342,0.772900,0.347120,0.293516,0.571900,0.151335,0.886564,-0.242570,-0.393908,0.764250,0.350900,0.279380,0.542985,0.140402,0.938950,-0.241541,-0.245011,0.766890,0.336610,0.289387,0.549167,0.160252,0.898494,-0.330598,-0.288816,0.758380,0.341910,0.302705,0.575402,0.172133,0.892560,-0.255779,-0.371368,0.759010,0.353440,0.298199,0.555484,0.178534,0.587172,-0.489796,-0.644460,0.753000,0.345610,-0.290073,0.511368,0.213354,-0.032606,-0.656002,-0.754054,0.930250,0.598170,-0.279794,0.491516,0.231703,-0.335157,-0.811165,-0.479251,0.942680,0.590930,-0.275114,0.488953,0.227720,-0.806621,-0.561988,-0.183115,0.941890,0.587160,-0.283095,0.509908,0.209578,-0.706275,-0.572840,-0.415969,0.928670,0.594610,0.290073,0.511368,0.213354,0.032611,-0.656007,-0.754050,0.069410,0.596860,0.279794,0.491516,0.231703,0.335154,-0.811167,-0.479250,0.056990,0.589610,0.275114,0.488953,0.227720,0.806624,-0.561985,-0.183111,0.057780,0.585850,0.283095,0.509908,0.209578,0.706282,-0.572836,-0.415962,0.071000,0.593290,-0.270699,0.472512,0.203729,-0.984791,-0.172408,0.021511,0.272010,0.310450,-0.277878,0.502677,0.196450,-0.930353,-0.340503,-0.136020,0.263840,0.323740,-0.273490,0.491627,0.178608,-0.970604,-0.218087,-0.101818,0.256580,0.315950,-0.272632,0.482859,0.217226,-0.953793,-0.300462,0.001325,0.276740,0.317670,-0.283095,0.509908,0.209578,-0.706275,-0.572840,-0.415969,0.268800,0.329440,-0.275114,0.488953,0.227720,-0.806621,-0.561988,-0.183115,0.280140,0.322930,0.277878,0.502677,0.196450,0.930355,-0.340500,-0.136016,0.736150,0.323740,0.270699,0.472512,0.203729,0.984791,-0.172407,0.021512,0.727980,0.310450,0.273490,0.491627,0.178608,0.970604,-0.218086,-0.101818,0.743410,0.315950,0.272632,0.482859,0.217226,0.953793,-0.300460,0.001327,0.723250,0.317670,0.275114,0.488953,0.227720,0.806624,-0.561985,-0.183111,0.719850,0.322930,0.283095,0.509908,0.209578,0.706282,-0.572836,-0.415962,0.731190,0.329440,-0.266200,0.430552,0.168403,-0.993708,-0.101887,-0.046509,0.262960,0.287760,-0.270320,0.477921,0.157733,-0.985952,-0.132818,-0.101285,0.249040,0.307770,-0.263543,0.456340,0.122093,-0.974199,-0.106070,-0.199210,0.235950,0.294680,-0.268989,0.456512,0.188574,-0.993380,-0.114722,-0.005983,0.267620,0.301820,0.270320,0.477921,0.157733,0.985952,-0.132818,-0.101285,0.750950,0.307770,0.266200,0.430551,0.168403,0.993708,-0.101888,-0.046509,0.737030,0.287760,0.263543,0.456340,0.122093,0.974199,-0.106070,-0.199210,0.764040,0.294680,0.268989,0.456511,0.188574,0.993380,-0.114722,-0.005983,0.732370,0.301820,-0.257827,0.341957,0.118788,-0.998841,-0.011962,-0.046625,0.254240,0.233610,-0.255737,0.405973,0.099763,-0.967665,-0.023614,-0.251131,0.230980,0.265270,-0.251639,0.356845,0.078829,-0.957965,0.055413,-0.281484,0.226830,0.233650,-0.261033,0.389448,0.143133,-0.995379,-0.073499,-0.061801,0.257610,0.263440,0.257827,0.341957,0.118788,0.998841,-0.011962,-0.046625,0.745750,0.233610,0.255737,0.405973,0.099763,0.967665,-0.023614,-0.251131,0.769010,0.265270,0.261033,0.389448,0.143133,0.995379,-0.073499,-0.061801,0.742380,0.263440,0.251639,0.356845,0.078829,0.957965,0.055413,-0.281484,0.773160,0.233650,0.250390,0.524728,0.039400,0.899503,-0.223114,-0.375651,0.812580,0.320610,0.245555,0.460758,0.062543,0.908858,-0.140961,-0.392565,0.797930,0.290090,0.263945,0.527322,0.080824,0.958173,-0.164915,-0.233894,0.792490,0.324110,0.271780,0.534542,0.114498,0.970602,-0.158567,-0.181075,0.777790,0.330150,-0.245555,0.460758,0.062543,-0.908858,-0.140961,-0.392565,0.202060,0.290090,-0.237265,0.421517,0.052745,-0.891327,-0.043554,-0.451264,0.200320,0.267000,-0.230377,0.375105,0.038572,-0.856850,0.054627,-0.512663,0.196310,0.237120,-0.250390,0.524728,0.039400,-0.899503,-0.223114,-0.375652,0.187410,0.320610,-0.263945,0.527322,0.080824,-0.958173,-0.164916,-0.233895,0.207500,0.324110,-0.271780,0.534542,0.114498,-0.970602,-0.158568,-0.181075,0.222200,0.330150,0.237265,0.421517,0.052745,0.891327,-0.043554,-0.451264,0.799670,0.267000,0.230377,0.375105,0.038572,0.856850,0.054627,-0.512663,0.803680,0.237120,-0.277066,0.590344,0.096174,-0.967164,-0.148410,-0.206323,0.211830,0.353900,-0.266263,0.557497,0.067614,-0.955225,-0.180514,-0.234437,0.200360,0.337530,-0.273983,0.562449,0.102885,-0.962895,-0.164472,-0.213969,0.215550,0.342030,-0.269807,0.588521,0.059078,-0.959488,-0.177124,-0.219111,0.196270,0.351150,0.277066,0.590344,0.096174,0.967163,-0.148411,-0.206323,0.788160,0.353900,0.266263,0.557497,0.067614,0.955225,-0.180514,-0.234436,0.799630,0.337530,0.269807,0.588521,0.059078,0.959488,-0.177124,-0.219111,0.803720,0.351150,0.273983,0.562449,0.102886,0.962894,-0.164472,-0.213970,0.784440,0.342030,-0.258453,0.591730,0.014933,-0.914187,-0.230622,-0.333280,0.176970,0.351620,-0.233796,0.560257,-0.014211,-0.784760,-0.332685,-0.522946,0.161450,0.336180,-0.253524,0.557516,0.025642,-0.899610,-0.247308,-0.359919,0.181000,0.336030,-0.240359,0.596673,-0.028154,-0.813253,-0.299370,-0.498997,0.157700,0.353360,0.258453,0.591730,0.014933,0.914187,-0.230622,-0.333280,0.823020,0.351620,0.233796,0.560257,-0.014211,0.784761,-0.332685,-0.522945,0.838540,0.336180,0.240359,0.596673,-0.028154,0.813253,-0.299369,-0.498997,0.842290,0.353360,0.253524,0.557516,0.025642,0.899610,-0.247307,-0.359919,0.818990,0.336030,-0.274464,0.620900,0.053715,-0.965860,-0.165210,-0.199548,0.193880,0.365070,-0.280633,0.619545,0.092363,-0.974452,-0.133255,-0.180795,0.209490,0.366320,0.274464,0.620900,0.053715,0.965860,-0.165210,-0.199548,0.806110,0.365070,0.280633,0.619545,0.092363,0.974452,-0.133255,-0.180795,0.790500,0.366320,-0.246869,0.633801,-0.037028,-0.845641,-0.234413,-0.479522,0.156630,0.368990,-0.264346,0.626809,0.008197,-0.929845,-0.196828,-0.310883,0.175320,0.366640,0.246869,0.633801,-0.037028,0.845641,-0.234413,-0.479522,0.843360,0.368990,0.264346,0.626809,0.008197,0.929844,-0.196828,-0.310883,0.824670,0.366640,-0.185470,0.893017,0.606583,-0.687299,0.313639,0.655172,0.423500,0.506580,-0.209837,0.855774,0.594396,-0.827269,0.232139,0.511604,0.413880,0.490440,-0.187617,0.860347,0.619347,-0.690554,0.304336,0.656137,0.426090,0.492960,-0.208899,0.886805,0.580403,-0.814840,0.240032,0.527656,0.410080,0.503790,-0.161202,0.896414,0.626751,-0.573134,0.346159,0.742759,0.435800,0.508150,-0.164041,0.863510,0.639144,-0.572873,0.327408,0.751412,0.437700,0.494960,-0.159684,0.933314,0.609355,-0.567972,0.391570,0.723935,0.432260,0.524220,-0.184687,0.930411,0.589019,-0.680173,0.348338,0.645000,0.419200,0.523140,-0.209837,0.923106,0.561914,-0.802927,0.268932,0.531962,0.404310,0.520160,-0.229191,0.876424,0.544902,-0.910759,0.134143,0.390543,0.393340,0.499840,-0.226317,0.848135,0.560653,-0.919305,0.132616,0.370529,0.399150,0.488150,-0.234325,0.909652,0.524236,-0.906254,0.155856,0.392953,0.384800,0.514150,0.322982,0.657241,0.215448,0.778600,-0.103337,0.618954,0.072080,0.668650,0.333407,0.676648,0.200562,0.879160,-0.033603,0.475340,0.081360,0.673820,0.310162,0.642943,0.224896,0.578623,-0.393088,0.714617,0.064290,0.664830,-0.294013,0.772558,0.090165,-0.996531,-0.034582,-0.075697,0.204970,0.428890,-0.293723,0.741143,0.127919,-0.999222,-0.036089,-0.015902,0.220350,0.418050,0.294013,0.772558,0.090165,0.996531,-0.034583,-0.075697,0.795020,0.428890,0.293723,0.741143,0.127919,0.999222,-0.036090,-0.015902,0.779640,0.418050,-0.285499,0.940655,0.096252,-0.960811,0.219902,-0.168775,0.198340,0.492010,-0.296111,0.912479,0.170658,-0.994594,0.096675,-0.037900,0.227060,0.486190,-0.284802,0.972363,0.150177,-0.958919,0.264057,-0.103678,0.215110,0.507180,-0.296173,0.887622,0.126476,-0.994348,0.077373,-0.072700,0.212480,0.474310,-0.294358,0.851899,0.084750,-0.990771,0.044951,-0.127874,0.199750,0.459050,-0.283543,0.894512,0.045883,-0.954773,0.152597,-0.255191,0.183960,0.472660,-0.276075,0.835129,0.000007,-0.937494,0.083635,-0.337803,0.170370,0.448190,-0.289453,0.804057,0.046034,-0.982217,0.009222,-0.187523,0.187960,0.438640,0.285499,0.940655,0.096252,0.960811,0.219902,-0.168776,0.801660,0.492010,0.296112,0.912479,0.170658,0.994594,0.096675,-0.037900,0.772930,0.486190,0.296173,0.887622,0.126476,0.994348,0.077373,-0.072700,0.787510,0.474310,0.284802,0.972363,0.150177,0.958919,0.264057,-0.103678,0.784880,0.507180,0.283543,0.894512,0.045883,0.954773,0.152597,-0.255191,0.816030,0.472660,0.294358,0.851899,0.084750,0.990771,0.044951,-0.127874,0.800240,0.459050,0.276075,0.835129,0.000007,0.937494,0.083635,-0.337803,0.829620,0.448190,0.289453,0.804057,0.046034,0.982217,0.009221,-0.187523,0.812030,0.438640,-0.284438,0.990147,0.208000,-0.957331,0.286205,-0.040038,0.235580,0.518430,-0.295804,0.928929,0.217765,-0.994328,0.106251,-0.004807,0.244130,0.496240,0.284438,0.990147,0.208000,0.957330,0.286215,-0.040003,0.764410,0.518430,0.295804,0.928929,0.217765,0.994324,0.106283,-0.004827,0.755860,0.496240,-0.224382,0.826539,0.573347,-0.925368,0.130829,0.355777,0.403760,0.480580,-0.209496,0.832309,0.605555,-0.834144,0.228547,0.501967,0.417450,0.482280,0.224156,0.826520,0.573319,0.922873,0.138241,0.359436,0.596230,0.480580,0.208998,0.832289,0.605436,0.832755,0.227497,0.504742,0.582540,0.482280,-0.188993,0.836012,0.629294,-0.690513,0.306574,0.655137,0.428550,0.484330,-0.166637,0.838615,0.648191,-0.563837,0.325551,0.759016,0.439190,0.486070,0.188634,0.835977,0.629201,0.693606,0.300054,0.654888,0.571440,0.484330,0.166221,0.838594,0.648085,0.566932,0.321376,0.758489,0.560800,0.486070,-0.136410,0.863689,0.656972,-0.450142,0.324480,0.831917,0.450010,0.495380,-0.139106,0.838228,0.665179,-0.430730,0.310526,0.847376,0.450820,0.486500,-0.105147,0.860996,0.671744,-0.321686,0.297661,0.898842,0.462550,0.494690,-0.107323,0.834393,0.679648,-0.294506,0.281319,0.913305,0.463000,0.485720,0.136291,0.863675,0.656951,0.450372,0.324159,0.831917,0.549980,0.495380,0.138908,0.838208,0.665135,0.432671,0.308564,0.847104,0.549170,0.486500,0.107065,0.834374,0.679583,0.295819,0.280360,0.913175,0.536990,0.485720,0.105055,0.860989,0.671730,0.321730,0.299091,0.898351,0.537440,0.494690,-0.042398,0.822042,0.694474,-0.071688,0.229716,0.970614,0.486600,0.481840,-0.073052,0.827960,0.689339,-0.170453,0.254327,0.951979,0.475540,0.483830,-0.072192,0.856938,0.681728,-0.200294,0.260875,0.944366,0.475160,0.493380,-0.042709,0.853654,0.686947,-0.106170,0.230177,0.967340,0.486190,0.492260,0.042312,0.822034,0.694464,0.071075,0.229542,0.970700,0.513390,0.481840,0.072973,0.827957,0.689342,0.171060,0.253969,0.951965,0.524450,0.483830,0.042558,0.853642,0.686923,0.105898,0.230552,0.967281,0.513800,0.492260,0.072150,0.856937,0.681741,0.200993,0.262298,0.943823,0.524830,0.493380,-0.000189,0.818409,0.695579,0.000618,0.193973,0.981007,0.500000,0.480930,-0.019031,0.819142,0.695783,-0.007543,0.205160,0.978699,0.494140,0.481010,-0.019503,0.852614,0.688743,-0.038131,0.209677,0.977027,0.493890,0.492400,-0.000098,0.852673,0.689170,0.000535,0.201526,0.979483,0.500000,0.492800,0.018887,0.819135,0.695761,0.008198,0.205271,0.978671,0.505850,0.481010,0.019176,0.852604,0.688707,0.038534,0.209391,0.977072,0.506100,0.492400,-0.019608,0.890181,0.680763,-0.051676,0.277683,0.959282,0.493710,0.504670,-0.042847,0.890338,0.678316,-0.134828,0.286052,0.948681,0.485810,0.504490,-0.042620,0.931457,0.663727,-0.155891,0.393284,0.906105,0.485060,0.520260,-0.019568,0.931381,0.665765,-0.057182,0.387014,0.920299,0.493390,0.520210,-0.000007,0.890396,0.681088,0.000276,0.277240,0.960801,0.500000,0.505120,0.000095,0.931424,0.665906,0.000363,0.385255,0.922810,0.500000,0.520470,0.019453,0.890182,0.680785,0.052248,0.277527,0.959296,0.506280,0.504670,0.042690,0.890333,0.678300,0.135575,0.286063,0.948571,0.514180,0.504490,0.019528,0.931374,0.665728,0.057984,0.387232,0.920157,0.506600,0.520210,0.042470,0.931449,0.663694,0.156369,0.393250,0.906037,0.514930,0.520260,-0.071869,0.891865,0.672166,-0.238779,0.310314,0.920157,0.474480,0.505450,-0.103731,0.894191,0.660808,-0.353967,0.339738,0.871370,0.461510,0.506790,-0.071013,0.931796,0.656694,-0.268628,0.403897,0.874474,0.473070,0.521190,-0.102490,0.932525,0.644212,-0.374378,0.412128,0.830657,0.459330,0.522430,-0.132486,0.933533,0.627949,-0.471913,0.409678,0.780680,0.445740,0.523700,-0.133701,0.896336,0.644913,-0.465332,0.355003,0.810826,0.448600,0.507960,0.071522,0.891825,0.672086,0.240165,0.310687,0.919671,0.525510,0.505450,0.070954,0.931793,0.656685,0.269807,0.402865,0.874588,0.526930,0.521190,0.103202,0.894160,0.660680,0.353805,0.340768,0.871033,0.538480,0.506790,0.102306,0.932517,0.644179,0.375311,0.410478,0.831053,0.540660,0.522430,0.132175,0.933500,0.627868,0.470679,0.408935,0.781814,0.554250,0.523700,0.133481,0.896316,0.644856,0.463499,0.356198,0.811352,0.551390,0.507960,-0.244199,0.971966,0.463354,-0.894154,0.280045,0.349377,0.354330,0.543060,-0.239671,0.942885,0.496105,-0.904058,0.206041,0.374467,0.371470,0.529150,-0.218713,0.992320,0.501678,-0.795015,0.420199,0.437475,0.378700,0.554110,-0.213640,0.959025,0.535967,-0.797381,0.334700,0.502154,0.394200,0.536850,0.244053,0.971949,0.463315,0.894140,0.280732,0.348862,0.645660,0.543060,0.239638,0.942880,0.496101,0.903367,0.210104,0.373877,0.628520,0.529150,0.213533,0.959011,0.535943,0.797323,0.336735,0.500884,0.605790,0.536850,0.218636,0.992314,0.501659,0.794994,0.420019,0.437685,0.621290,0.554110,-0.192590,1.003664,0.529035,-0.666453,0.519409,0.534841,0.397290,0.559580,-0.187520,0.967143,0.564280,-0.671843,0.422267,0.608537,0.411020,0.540080,-0.166260,1.010509,0.549261,-0.550631,0.579915,0.600420,0.413430,0.563010,-0.162009,0.970882,0.585343,-0.561327,0.472498,0.679454,0.425370,0.541450,0.192465,1.003651,0.529002,0.665046,0.520288,0.535737,0.602700,0.559580,0.187471,0.967137,0.564268,0.670164,0.425483,0.608148,0.588970,0.540080,0.161847,0.970871,0.585312,0.558211,0.475738,0.679760,0.574620,0.541450,0.165907,1.010486,0.549167,0.548397,0.581072,0.601346,0.586560,0.563010,-0.103418,0.975270,0.620053,-0.380239,0.509642,0.771805,0.455340,0.542310,-0.133766,0.973327,0.603999,-0.472592,0.495278,0.728942,0.440300,0.542120,-0.137551,1.016798,0.567158,-0.468476,0.608798,0.640231,0.430490,0.566280,-0.106011,1.022571,0.582193,-0.378537,0.631939,0.676286,0.447880,0.568980,0.103181,0.975255,0.619994,0.381279,0.510039,0.771030,0.544650,0.542310,0.133708,0.973324,0.603984,0.471865,0.496623,0.728498,0.559690,0.542120,0.136992,1.016759,0.567007,0.468085,0.608930,0.640391,0.569500,0.566280,0.105668,1.022553,0.582102,0.380239,0.631120,0.676096,0.552110,0.568980,-0.071406,0.977043,0.632457,-0.284573,0.517604,0.806910,0.470370,0.542350,-0.042427,0.978337,0.640014,-0.186263,0.515400,0.836462,0.483490,0.542180,-0.073195,1.027117,0.593314,-0.290927,0.647524,0.704325,0.465140,0.570960,-0.043483,1.030270,0.601092,-0.213714,0.653975,0.725702,0.480310,0.571800,0.071222,0.977035,0.632430,0.285331,0.517626,0.806629,0.529620,0.542350,0.042148,0.978330,0.639989,0.186341,0.515184,0.836578,0.516500,0.542180,0.073127,1.027114,0.593299,0.292228,0.646805,0.704448,0.534850,0.570960,0.043431,1.030267,0.601086,0.214020,0.653569,0.725977,0.519680,0.571800,-0.019415,0.978995,0.643132,-0.086105,0.505580,0.858472,0.492680,0.542140,-0.019891,1.031757,0.605886,-0.119752,0.656868,0.744435,0.491220,0.571640,-0.000159,0.979187,0.643751,0.000207,0.499583,0.866266,0.500000,0.542190,-0.000022,1.032069,0.607525,0.000001,0.658013,0.753007,0.500000,0.571460,0.019835,1.031757,0.605883,0.119957,0.656655,0.744590,0.508770,0.571640,0.019140,0.978996,0.643137,0.086710,0.505309,0.858571,0.507310,0.542140,-0.244199,0.971966,0.463354,-0.894154,0.280045,0.349377,0.346310,0.550270,-0.222083,1.021470,0.457859,-0.789095,0.487278,0.374018,0.334470,0.572820,-0.248487,0.994756,0.428249,-0.879099,0.352258,0.321091,0.326370,0.551610,-0.218713,0.992320,0.501678,-0.795015,0.420199,0.437475,0.359690,0.572570,-0.255057,1.014837,0.386263,-0.875527,0.405852,0.262176,0.305280,0.551270,-0.227951,1.049345,0.405105,-0.779748,0.548760,0.301422,0.307330,0.571710,0.222051,1.021467,0.457850,0.789246,0.486658,0.374506,0.665520,0.572820,0.244053,0.971949,0.463315,0.894140,0.280732,0.348862,0.653690,0.550270,0.248443,0.994751,0.428236,0.879579,0.350414,0.321793,0.673620,0.551610,0.218636,0.992314,0.501659,0.794994,0.420019,0.437685,0.640300,0.572570,0.227938,1.049343,0.405101,0.779938,0.548394,0.301596,0.692670,0.571710,0.254986,1.014832,0.386244,0.875696,0.405386,0.262335,0.694710,0.551270,-0.192590,1.003664,0.529035,-0.666453,0.519409,0.534841,0.368370,0.588760,-0.169637,1.053124,0.497174,-0.538880,0.679535,0.497836,0.343310,0.603730,-0.197365,1.040846,0.480552,-0.664744,0.601513,0.443054,0.339570,0.589170,-0.166260,1.010509,0.549261,-0.550631,0.579915,0.600420,0.374730,0.602930,-0.200577,1.074848,0.419615,-0.657507,0.673324,0.338112,0.308280,0.588380,-0.171498,1.092438,0.430747,-0.529815,0.761840,0.372688,0.308990,0.603240,0.169614,1.053123,0.497168,0.538463,0.678666,0.499470,0.656680,0.603730,0.192465,1.003651,0.529002,0.665046,0.520288,0.535737,0.631630,0.588760,0.197299,1.040839,0.480534,0.664384,0.601158,0.444075,0.660420,0.589170,0.165907,1.010486,0.549167,0.548397,0.581072,0.601346,0.625260,0.602930,0.171498,1.092438,0.430747,0.529943,0.761700,0.372792,0.691000,0.603240,0.200577,1.074848,0.419615,0.657621,0.673111,0.338314,0.691710,0.588380,-0.137551,1.016798,0.567158,-0.468476,0.608798,0.640231,0.380010,0.618420,-0.108920,1.071873,0.524965,-0.373437,0.745823,0.551627,0.349170,0.634100,-0.140082,1.063228,0.512043,-0.457855,0.716106,0.526841,0.346610,0.618790,-0.106011,1.022571,0.582193,-0.378537,0.631939,0.676286,0.384000,0.634530,-0.141717,1.105857,0.441002,-0.439904,0.807577,0.392814,0.309990,0.617580,-0.111181,1.116177,0.450208,-0.356738,0.841705,0.405304,0.310910,0.631730,0.136992,1.016759,0.567007,0.468085,0.608930,0.640391,0.619980,0.618420,0.108912,1.071872,0.524963,0.374579,0.744672,0.552408,0.650820,0.634100,0.105668,1.022553,0.582102,0.380239,0.631120,0.676096,0.615990,0.634530,0.140062,1.063226,0.512038,0.458301,0.714677,0.528392,0.653380,0.618790,0.111181,1.116177,0.450208,0.356714,0.841687,0.405362,0.689080,0.631730,0.141717,1.105857,0.441002,0.439944,0.807530,0.392867,0.690000,0.617580,-0.073195,1.027117,0.593314,-0.290927,0.647524,0.704325,0.386570,0.650810,-0.046938,1.082799,0.542625,-0.214375,0.782488,0.584599,0.351970,0.663610,-0.076844,1.078629,0.534983,-0.290890,0.767391,0.571396,0.350730,0.649520,-0.043483,1.030270,0.601092,-0.213714,0.653975,0.725702,0.388170,0.665260,-0.080218,1.124023,0.457952,-0.275426,0.867702,0.413803,0.311310,0.645960,-0.050755,1.128822,0.464861,-0.190356,0.887560,0.419526,0.311910,0.659410,0.073127,1.027114,0.593299,0.292228,0.646805,0.704448,0.613420,0.650810,0.046938,1.082799,0.542625,0.214597,0.782374,0.584669,0.648020,0.663610,0.043431,1.030267,0.601086,0.214020,0.653569,0.725977,0.611820,0.665260,0.076800,1.078627,0.534971,0.291534,0.766978,0.571623,0.649260,0.649520,0.050755,1.128822,0.464861,0.190432,0.887535,0.419544,0.688080,0.659410,0.080218,1.124023,0.457952,0.275443,0.867671,0.413858,0.688680,0.645960,-0.024419,1.130238,0.471053,-0.096331,0.901047,0.422888,0.313450,0.671230,-0.021975,1.084075,0.548386,-0.120606,0.795666,0.593608,0.353650,0.674820,0.0,1.130129,0.473840,-0.000000,0.905695,0.423929,0.313920,0.682190,0.0,1.084180,0.550831,0.000021,0.801927,0.597422,0.354500,0.684570,-0.019891,1.031757,0.605886,-0.119752,0.656868,0.744435,0.389290,0.675820,-0.000022,1.032069,0.607525,0.000001,0.658013,0.753007,0.389750,0.684450,0.024419,1.130238,0.471053,0.096330,0.901047,0.422888,0.686540,0.671230,0.021975,1.084075,0.548386,0.120646,0.795625,0.593654,0.646340,0.674820,0.019835,1.031757,0.605883,0.119957,0.656655,0.744590,0.610710,0.675820,0.0,1.084180,0.550831,0.000021,0.801927,0.597422,0.645490,0.684570,-0.000022,1.032069,0.607525,0.000001,0.658013,0.753007,0.610240,0.684450,0.0,1.130129,0.473840,-0.000000,0.905695,0.423929,0.686070,0.682190,-0.231492,1.072311,0.341066,-0.768920,0.610438,0.190073,0.277660,0.569160,-0.259308,1.033395,0.331655,-0.875573,0.453664,0.166018,0.279700,0.549870,-0.261492,1.044437,0.268079,-0.874887,0.481711,0.050271,0.252990,0.545740,-0.233059,1.085029,0.269449,-0.770723,0.634636,0.056763,0.247920,0.563680,0.231489,1.072310,0.341065,0.769052,0.610236,0.190187,0.722330,0.569160,0.259304,1.033395,0.331653,0.875749,0.453247,0.166228,0.720290,0.549870,0.261488,1.044437,0.268078,0.874993,0.481501,0.050441,0.747000,0.545740,0.233059,1.085030,0.269449,0.770738,0.634617,0.056779,0.752070,0.563680,-0.171718,1.121793,0.353342,-0.525099,0.818630,0.232630,0.273620,0.599940,-0.201933,1.101084,0.347971,-0.648043,0.731415,0.212302,0.275550,0.585420,-0.202934,1.115195,0.270324,-0.657236,0.750380,0.070502,0.243440,0.578880,-0.172806,1.137158,0.270906,-0.536105,0.839988,0.083740,0.239490,0.592430,0.171718,1.121793,0.353342,0.525099,0.818630,0.232629,0.726370,0.599940,0.201933,1.101084,0.347971,0.648084,0.731376,0.212310,0.724440,0.585420,0.172806,1.137158,0.270906,0.536106,0.839987,0.083740,0.760500,0.592430,0.202934,1.115195,0.270324,0.657243,0.750374,0.070506,0.756550,0.578880,-0.111678,1.148163,0.362607,-0.336578,0.907672,0.250693,0.270750,0.626560,-0.141571,1.136869,0.358219,-0.422813,0.872472,0.244995,0.272100,0.613530,-0.143080,1.153004,0.271263,-0.424689,0.900812,0.090424,0.235830,0.604880,-0.113886,1.164589,0.271354,-0.338004,0.936503,0.093356,0.232310,0.616670,0.111678,1.148163,0.362607,0.336579,0.907672,0.250692,0.729240,0.626560,0.141571,1.136869,0.358219,0.422814,0.872471,0.244995,0.727890,0.613530,0.113886,1.164589,0.271354,0.338005,0.936503,0.093355,0.767680,0.616670,0.143080,1.153004,0.271263,0.424689,0.900812,0.090424,0.764160,0.604880,-0.053549,1.161735,0.370388,-0.167661,0.951884,0.256527,0.268230,0.651640,-0.082149,1.156505,0.366458,-0.255685,0.932829,0.253879,0.269310,0.639290,-0.085202,1.173469,0.271224,-0.262370,0.960018,0.097604,0.228780,0.628050,-0.056749,1.179689,0.271689,-0.175689,0.978957,0.103805,0.225480,0.639420,0.053549,1.161735,0.370388,0.167660,0.951885,0.256527,0.731760,0.651640,0.082149,1.156505,0.366458,0.255685,0.932829,0.253879,0.730680,0.639290,0.056749,1.179689,0.271689,0.175689,0.978958,0.103805,0.774520,0.639420,0.085202,1.173469,0.271224,0.262371,0.960018,0.097604,0.771210,0.628050,0.0,1.164186,0.376777,0.000000,0.965616,0.259974,0.266910,0.675100,-0.026350,1.163834,0.374661,-0.077987,0.962750,0.258902,0.267970,0.663520,-0.028377,1.183064,0.273189,-0.084126,0.990365,0.109996,0.222670,0.651160,0.0,1.183982,0.274132,0.000000,0.993617,0.112808,0.219530,0.663140,0.0,1.164186,0.376777,0.000000,0.965616,0.259974,0.733080,0.675100,0.026350,1.163834,0.374661,0.077987,0.962750,0.258902,0.732020,0.663520,0.0,1.183982,0.274132,0.000000,0.993617,0.112808,0.780460,0.663140,0.028377,1.183064,0.273189,0.084127,0.990365,0.109996,0.777320,0.651160,-0.233615,1.081859,0.195199,-0.782515,0.617251,-0.081679,0.219920,0.553860,-0.235230,1.061199,0.120681,-0.796916,0.569229,-0.202247,0.194490,0.539300,-0.261907,1.041268,0.200713,-0.875796,0.477638,-0.069598,0.227340,0.537360,-0.262603,1.021942,0.133330,-0.881973,0.441352,-0.165322,0.204050,0.524490,0.261907,1.041268,0.200713,0.875804,0.477626,-0.069571,0.772650,0.537360,0.235230,1.061199,0.120681,0.796916,0.569229,-0.202247,0.805500,0.539300,0.233615,1.081859,0.195199,0.782519,0.617246,-0.081673,0.780070,0.553860,0.262603,1.021942,0.133330,0.881973,0.441352,-0.165322,0.795940,0.524490,-0.176923,1.135178,0.189375,-0.561854,0.822785,-0.085703,0.209390,0.579870,-0.205048,1.112705,0.191712,-0.682851,0.725890,-0.082450,0.214190,0.567810,-0.208474,1.091479,0.112674,-0.704009,0.671528,-0.231130,0.187600,0.551770,-0.182358,1.113660,0.107506,-0.581298,0.769548,-0.264366,0.182080,0.562390,0.176923,1.135178,0.189375,0.561855,0.822785,-0.085702,0.790600,0.579870,0.205047,1.112705,0.191712,0.682851,0.725891,-0.082449,0.785800,0.567810,0.208474,1.091479,0.112674,0.704009,0.671528,-0.231130,0.812390,0.551770,0.182358,1.113660,0.107506,0.581297,0.769548,-0.264366,0.817910,0.562390,-0.120604,1.162982,0.184389,-0.362686,0.926842,-0.097075,0.199860,0.601160,-0.148916,1.151042,0.187033,-0.443940,0.891181,-0.093349,0.204730,0.590690,-0.155563,1.128893,0.102974,-0.461031,0.838426,-0.290677,0.176470,0.571720,-0.127664,1.140558,0.098271,-0.385242,0.871565,-0.303253,0.170320,0.580950,0.120604,1.162982,0.184389,0.362686,0.926842,-0.097075,0.800130,0.601160,0.148916,1.151042,0.187033,0.443940,0.891181,-0.093349,0.795260,0.590690,0.155563,1.128893,0.102974,0.461031,0.838426,-0.290676,0.823520,0.571720,0.127664,1.140558,0.098271,0.385242,0.871565,-0.303253,0.829670,0.580950,-0.061857,1.181069,0.179638,-0.210634,0.973247,-0.091777,0.189080,0.623110,-0.091608,1.173043,0.181633,-0.297240,0.950033,-0.095325,0.194540,0.611910,-0.098212,1.151185,0.093445,-0.325039,0.893097,-0.311010,0.163370,0.590980,-0.066986,1.160196,0.089578,-0.237793,0.917143,-0.319849,0.155920,0.601810,0.061857,1.181069,0.179638,0.210634,0.973247,-0.091777,0.810910,0.623110,0.091608,1.173043,0.181633,0.297240,0.950033,-0.095325,0.805460,0.611910,0.098212,1.151185,0.093445,0.325039,0.893097,-0.311010,0.836620,0.590980,0.066986,1.160196,0.089578,0.237794,0.917143,-0.319849,0.844070,0.601810,0.0,1.187839,0.179255,-0.000000,0.996350,-0.085357,0.178260,0.647590,-0.031190,1.186036,0.179142,-0.107106,0.990383,-0.087577,0.183800,0.635050,-0.033997,1.166354,0.087582,-0.125523,0.936976,-0.326068,0.148210,0.613610,0.0,1.168596,0.087085,-0.000000,0.944683,-0.327986,0.139940,0.626120,0.0,1.187839,0.179255,-0.000000,0.996350,-0.085357,0.821730,0.647590,0.031190,1.186036,0.179142,0.107107,0.990383,-0.087577,0.816190,0.635050,0.0,1.168596,0.087085,-0.000000,0.944683,-0.327986,0.860050,0.626120,0.033997,1.166354,0.087582,0.125524,0.936976,-0.326068,0.851780,0.613610,-0.238165,1.022473,0.047902,-0.807098,0.489911,-0.329516,0.172600,0.519590,-0.264465,0.985941,0.069140,-0.890538,0.371411,-0.262670,0.184680,0.506890,-0.262351,0.933206,0.009572,-0.886429,0.266988,-0.378102,0.168120,0.485180,-0.235993,0.965411,-0.019517,-0.800368,0.366734,-0.474254,0.153900,0.496130,0.238165,1.022473,0.047902,0.807098,0.489911,-0.329516,0.827390,0.519590,0.264465,0.985941,0.069140,0.890538,0.371411,-0.262670,0.815310,0.506890,0.235993,0.965411,-0.019517,0.800368,0.366734,-0.474254,0.846090,0.496130,0.262351,0.933206,0.009572,0.886429,0.266988,-0.378102,0.831870,0.485180,-0.211987,1.050383,0.033721,-0.707641,0.589485,-0.389554,0.163630,0.530200,-0.185830,1.070791,0.024093,-0.584723,0.677699,-0.445895,0.156160,0.539340,-0.209675,0.989149,-0.039162,-0.690129,0.458021,-0.560302,0.143110,0.504800,-0.183195,1.006143,-0.052838,-0.570427,0.529425,-0.627951,0.133790,0.512140,0.211987,1.050383,0.033721,0.707641,0.589485,-0.389554,0.836360,0.530200,0.185830,1.070791,0.024093,0.584723,0.677700,-0.445896,0.843830,0.539340,0.183195,1.006143,-0.052838,0.570427,0.529425,-0.627951,0.866200,0.512140,0.209675,0.989149,-0.039162,0.690129,0.458021,-0.560302,0.856880,0.504800,-0.130335,1.096165,0.008478,-0.399164,0.769709,-0.498213,0.140460,0.555440,-0.155383,1.018694,-0.064281,-0.476793,0.573270,-0.666356,0.124250,0.518950,-0.158604,1.085304,0.016019,-0.472617,0.737986,-0.481674,0.148550,0.547520,-0.127092,1.028155,-0.074534,-0.413328,0.599800,-0.685128,0.114510,0.525200,0.130335,1.096165,0.008478,0.399165,0.769709,-0.498213,0.859530,0.555440,0.155383,1.018694,-0.064281,0.476793,0.573270,-0.666356,0.875750,0.518950,0.127092,1.028155,-0.074534,0.413328,0.599800,-0.685128,0.885480,0.525200,0.158604,1.085304,0.016019,0.472617,0.737986,-0.481674,0.851440,0.547520,-0.069799,1.113024,-0.004470,-0.242828,0.813633,-0.528239,0.122520,0.572390,-0.098977,1.035514,-0.083683,-0.343215,0.623891,-0.702114,0.104830,0.530860,-0.101071,1.105331,0.001291,-0.333979,0.791603,-0.511686,0.131830,0.563530,-0.069091,1.041390,-0.090836,-0.240138,0.647782,-0.722989,0.094510,0.536950,0.069799,1.113023,-0.004470,0.242828,0.813633,-0.528239,0.877470,0.572390,0.098977,1.035514,-0.083683,0.343214,0.623891,-0.702114,0.895160,0.530860,0.069091,1.041390,-0.090836,0.240138,0.647782,-0.722989,0.905480,0.536950,0.101071,1.105331,0.001291,0.333979,0.791603,-0.511686,0.868170,0.563530,-0.035721,1.118802,-0.007787,-0.129064,0.830712,-0.541535,0.112410,0.582730,0.0,1.121132,-0.008795,-0.000000,0.837415,-0.546568,0.101320,0.593990,-0.035634,1.045947,-0.095085,-0.121583,0.662526,-0.739105,0.082710,0.544730,0.0,1.047846,-0.096440,-0.000000,0.667023,-0.745037,0.069440,0.553340,0.035721,1.118802,-0.007787,0.129065,0.830712,-0.541535,0.887580,0.582730,0.0,1.121132,-0.008795,-0.000000,0.837415,-0.546568,0.898670,0.593990,0.035634,1.045947,-0.095085,0.121583,0.662526,-0.739105,0.917280,0.544730,0.0,1.047846,-0.096440,-0.000000,0.667023,-0.745037,0.930550,0.553340,-0.223955,0.892163,-0.076189,-0.770985,0.231896,-0.593132,0.136730,0.468040,-0.252057,0.865842,-0.042603,-0.862567,0.161495,-0.479476,0.152580,0.458550,0.223955,0.892163,-0.076189,0.770986,0.231895,-0.593132,0.863270,0.468040,0.252057,0.865842,-0.042603,0.862566,0.161496,-0.479477,0.847410,0.458550,-0.172473,0.922149,-0.112510,-0.535250,0.350514,-0.768536,0.115450,0.479730,-0.197827,0.910271,-0.097852,-0.652227,0.301526,-0.695473,0.125250,0.474710,0.172473,0.922149,-0.112510,0.535250,0.350514,-0.768536,0.884550,0.479730,0.197827,0.910271,-0.097852,0.652227,0.301525,-0.695472,0.874740,0.474710,-0.145656,0.930848,-0.125139,-0.459440,0.373011,-0.806088,0.104930,0.484270,-0.118571,0.938008,-0.136410,-0.409914,0.385298,-0.826750,0.094380,0.488590,0.145656,0.930848,-0.125139,0.459441,0.373010,-0.806088,0.895060,0.484270,0.118571,0.938008,-0.136410,0.409914,0.385298,-0.826751,0.905610,0.488590,-0.092398,0.944521,-0.145880,-0.338440,0.400944,-0.851295,0.084610,0.492930,-0.064818,0.949740,-0.152970,-0.221936,0.417399,-0.881205,0.074390,0.497340,0.0,0.953832,-0.158577,0.000000,0.423465,-0.905912,0.048050,0.507020,-0.033556,0.952844,-0.157203,-0.100535,0.423486,-0.900307,0.062120,0.502070,0.092398,0.944521,-0.145880,0.338440,0.400944,-0.851295,0.915390,0.492930,0.064818,0.949740,-0.152970,0.221936,0.417399,-0.881205,0.925600,0.497340,0.0,0.953832,-0.158577,0.000000,0.423465,-0.905912,0.951940,0.507020,0.033556,0.952844,-0.157203,0.100535,0.423486,-0.900307,0.937870,0.502070,-0.333407,0.676648,0.200562,-0.879220,-0.033520,0.475236,0.918290,0.675130,-0.322987,0.657242,0.215449,-0.778740,-0.103029,0.618829,0.927570,0.669960,-0.310191,0.642944,0.224904,-0.578731,-0.392857,0.714657,0.935370,0.666140,0.151670,0.321247,0.541079,0.807678,-0.452078,0.378525,0.555720,0.305630,0.154509,0.307226,0.517409,0.784282,-0.519526,0.339109,0.559970,0.298060,0.150396,0.291574,0.498812,0.710167,-0.655760,0.256207,0.560920,0.290030,-0.151670,0.321247,0.541079,-0.807656,-0.452166,0.378469,0.444270,0.305630,-0.154509,0.307226,0.517409,-0.784282,-0.519525,0.339110,0.440020,0.298060,-0.194085,0.641545,-0.100985,-0.565512,-0.335123,-0.753584,0.123610,0.369450,-0.221254,0.638654,-0.074514,-0.715970,-0.281764,-0.638746,0.138880,0.369610,-0.214899,0.599983,-0.061995,-0.661350,-0.367715,-0.653760,0.140260,0.353460,-0.187915,0.601941,-0.084548,-0.493565,-0.428334,-0.756917,0.125300,0.352650,0.194085,0.641545,-0.100985,0.565511,-0.335123,-0.753584,0.876390,0.369450,0.221254,0.638654,-0.074514,0.715970,-0.281764,-0.638746,0.861110,0.369610,0.187915,0.601941,-0.084548,0.493566,-0.428333,-0.756917,0.874690,0.352650,0.214899,0.599983,-0.061995,0.661350,-0.367715,-0.653760,0.859730,0.353460,-0.170786,0.643444,-0.115920,-0.391001,-0.378939,-0.838763,0.113490,0.369090,-0.149465,0.644885,-0.123669,-0.252406,-0.405158,-0.878714,0.104960,0.368270,-0.164868,0.603246,-0.097046,-0.321980,-0.471690,-0.820876,0.115000,0.351560,-0.144034,0.604544,-0.103553,-0.194092,-0.493727,-0.847680,0.106240,0.350190,0.149465,0.644885,-0.123669,0.252406,-0.405158,-0.878714,0.895030,0.368270,0.170786,0.643444,-0.115920,0.391001,-0.378939,-0.838763,0.886510,0.369090,0.144035,0.604544,-0.103553,0.194091,-0.493727,-0.847681,0.893750,0.350190,0.164868,0.603246,-0.097046,0.321980,-0.471689,-0.820876,0.884990,0.351560,-0.127003,0.646064,-0.129431,-0.184734,-0.426112,-0.885608,0.095100,0.367320,-0.122459,0.606222,-0.108326,-0.125796,-0.509690,-0.851112,0.096440,0.349120,-0.103853,0.647437,-0.134389,-0.123812,-0.449145,-0.884839,0.084810,0.366610,-0.100187,0.608619,-0.112101,-0.063629,-0.525207,-0.848592,0.086200,0.348480,0.127003,0.646064,-0.129431,0.184734,-0.426113,-0.885608,0.904890,0.367320,0.103853,0.647437,-0.134389,0.123811,-0.449146,-0.884838,0.915180,0.366610,0.122459,0.606222,-0.108326,0.125796,-0.509690,-0.851112,0.903550,0.349120,0.100187,0.608620,-0.112101,0.063627,-0.525207,-0.848592,0.913790,0.348480,-0.077775,0.611660,-0.114292,-0.001612,-0.534183,-0.845367,0.076230,0.348420,-0.080980,0.649302,-0.137644,-0.045557,-0.471663,-0.880601,0.075040,0.366360,-0.056789,0.650584,-0.138322,0.013143,-0.488281,-0.872588,0.064630,0.365530,-0.054086,0.614145,-0.114655,0.026439,-0.533346,-0.845484,0.065690,0.347960,-0.029468,0.650179,-0.136772,0.020921,-0.497174,-0.867398,0.052270,0.363090,-0.027891,0.614755,-0.113903,0.015168,-0.526317,-0.850153,0.053650,0.346080,0.0,0.649377,-0.135824,-0.000000,-0.499575,-0.866270,0.038650,0.360680,0.000000,0.614436,-0.113501,0.000001,-0.521873,-0.853024,0.040710,0.343950,0.077775,0.611660,-0.114292,0.001612,-0.534183,-0.845367,0.923760,0.348420,0.080980,0.649302,-0.137644,0.045556,-0.471665,-0.880600,0.924950,0.366360,0.056789,0.650584,-0.138322,-0.013142,-0.488282,-0.872587,0.935360,0.365530,0.054086,0.614145,-0.114655,-0.026438,-0.533347,-0.845483,0.934300,0.347960,0.029468,0.650179,-0.136772,-0.020920,-0.497175,-0.867398,0.947720,0.363090,0.0,0.649377,-0.135824,-0.000000,-0.499575,-0.866270,0.961340,0.360680,0.027891,0.614755,-0.113903,-0.015167,-0.526318,-0.850152,0.946340,0.346080,0.000000,0.614436,-0.113501,0.000001,-0.521873,-0.853024,0.959280,0.343950,-0.208804,0.562056,-0.044533,-0.624803,-0.403580,-0.668390,0.144080,0.335380,-0.182798,0.563475,-0.063994,-0.452678,-0.452631,-0.768250,0.129090,0.334190,0.182798,0.563475,-0.063994,0.452678,-0.452631,-0.768250,0.870900,0.334190,0.208804,0.562056,-0.044533,0.624803,-0.403580,-0.668390,0.855910,0.335380,-0.093427,0.403124,0.658513,0.684151,0.378793,-0.623260,0.473690,0.342396,-0.103291,0.372467,0.625879,0.714452,0.566243,-0.411007,0.476003,0.343271,-0.107369,0.379664,0.623478,0.922508,0.252881,-0.291600,0.473671,0.342445,-0.089409,0.403565,0.664396,0.722919,0.363165,-0.587792,0.476005,0.343209,-0.094546,0.404784,0.661130,0.867377,-0.084406,-0.490441,0.473149,0.342336,-0.108754,0.394748,0.623369,0.976024,0.027960,-0.215860,0.473386,0.342415,-0.093938,0.407371,0.658962,0.852886,-0.225181,-0.471041,0.473593,0.342662,-0.107641,0.413153,0.623688,0.967445,-0.146053,-0.206684,0.473619,0.342588,0.103188,0.372507,0.625900,-0.713721,0.566861,-0.411425,0.523989,0.343271,0.107302,0.379687,0.623531,-0.920588,0.257730,-0.293415,0.526319,0.342445,0.089255,0.403624,0.664386,-0.717397,0.369652,-0.590507,0.523988,0.343209,0.033041,0.409713,0.704935,-0.194724,0.803106,-0.563119,0.507578,0.348196,0.031323,0.374423,0.651203,-0.087937,0.914763,-0.394303,0.506069,0.348538,0.026381,0.409591,0.706939,-0.148765,0.818348,-0.555136,0.506005,0.348364,0.039479,0.374532,0.649832,-0.089089,0.911579,-0.401356,0.507631,0.348364,0.040523,0.409367,0.701047,-0.209637,0.789890,-0.576304,0.509505,0.347811,0.048557,0.374195,0.647584,-0.081989,0.908304,-0.410197,0.509545,0.347971,-0.026321,0.409606,0.706906,0.148861,0.818276,-0.555216,0.493985,0.348364,-0.031265,0.374439,0.651180,0.087931,0.914708,-0.394433,0.493921,0.348538,-0.032997,0.409731,0.704894,0.193769,0.803296,-0.563178,0.492412,0.348196,-0.039430,0.374548,0.649809,0.088752,0.911568,-0.401457,0.492359,0.348364,-0.040503,0.409376,0.701023,0.210236,0.789689,-0.576361,0.490485,0.347811,-0.048519,0.374209,0.647561,0.082410,0.908203,-0.410337,0.490445,0.347971,0.068741,0.406859,0.685134,-0.349787,0.694146,-0.629134,0.516891,0.345801,0.069618,0.372646,0.641424,-0.104982,0.895144,-0.433238,0.514694,0.346642,0.059853,0.407643,0.690964,-0.267314,0.745119,-0.611016,0.514652,0.346501,0.079821,0.371850,0.637757,-0.144096,0.881628,-0.449409,0.516919,0.345919,0.076650,0.405920,0.678611,-0.456433,0.616892,-0.641181,0.519063,0.345025,0.089017,0.371060,0.633742,-0.215430,0.857913,-0.466450,0.519071,0.345118,-0.203456,0.338524,-0.001526,-0.696885,0.134276,-0.704501,0.166580,0.202630,-0.184531,0.301341,-0.025535,-0.555601,0.262831,-0.788813,0.146160,0.169270,-0.211484,0.295422,-0.004657,-0.697899,0.264327,-0.665633,0.166940,0.166580,-0.175651,0.344356,-0.022422,-0.537212,0.117073,-0.835283,0.146460,0.205010,-0.158852,0.302755,-0.040028,-0.444648,0.265842,-0.855346,0.130460,0.172890,-0.150170,0.345904,-0.035074,-0.430153,0.116525,-0.895204,0.130850,0.206860,-0.231992,0.324604,0.029543,-0.836526,0.150097,-0.526967,0.196100,0.200470,-0.252606,0.310394,0.066139,-0.951009,0.125478,-0.282553,0.227600,0.200650,-0.237914,0.284505,0.024007,-0.831210,0.252049,-0.495540,0.197730,0.168170,-0.256556,0.273969,0.059334,-0.946660,0.204436,-0.249080,0.230430,0.173220,0.083748,0.404778,0.671286,-0.584974,0.506619,-0.633358,0.521517,0.344118,0.096966,0.370721,0.629557,-0.394410,0.790232,-0.469013,0.521514,0.344190,-0.079794,0.371874,0.637707,0.146490,0.880988,-0.449890,0.483071,0.345919,-0.068720,0.406874,0.685060,0.355337,0.691377,-0.629073,0.483099,0.345801,-0.069581,0.372667,0.641385,0.105250,0.895009,-0.433454,0.485296,0.346642,-0.059818,0.407663,0.690908,0.267313,0.745014,-0.611144,0.485338,0.346501,-0.089002,0.371094,0.633677,0.211631,0.858550,-0.467016,0.480927,0.345118,-0.076567,0.405980,0.678460,0.450494,0.619722,-0.642651,0.480934,0.345025,0.184531,0.301341,-0.025535,0.555601,0.262832,-0.788814,0.853840,0.169270,0.203456,0.338524,-0.001526,0.696885,0.134276,-0.704501,0.833410,0.202630,0.211484,0.295422,-0.004657,0.697899,0.264328,-0.665633,0.833050,0.166580,0.175651,0.344356,-0.022422,0.537213,0.117073,-0.835282,0.853530,0.205010,0.150170,0.345904,-0.035074,0.430154,0.116525,-0.895204,0.869140,0.206860,0.158852,0.302755,-0.040028,0.444648,0.265841,-0.855346,0.869530,0.172890,0.231992,0.324604,0.029543,0.836526,0.150097,-0.526967,0.803890,0.200470,0.237914,0.284505,0.024007,0.831211,0.252049,-0.495540,0.802260,0.168170,0.252606,0.310394,0.066139,0.951009,0.125478,-0.282553,0.772390,0.200650,0.256556,0.273969,0.059334,0.946660,0.204435,-0.249080,0.769570,0.173220,-0.160404,0.565266,-0.074776,-0.291574,-0.482380,-0.826011,0.118330,0.333270,-0.140348,0.567615,-0.080885,-0.177252,-0.493677,-0.851390,0.109200,0.332400,0.160404,0.565266,-0.074776,0.291574,-0.482380,-0.826011,0.881660,0.333270,0.140348,0.567615,-0.080884,0.177251,-0.493677,-0.851390,0.890800,0.332400,-0.097029,0.370711,0.629523,0.384649,0.794429,-0.470030,0.478476,0.344190,-0.083832,0.404761,0.671250,0.569032,0.518551,-0.638207,0.478473,0.344118,0.007033,0.407642,0.708276,-0.051534,0.834114,-0.549180,0.501543,0.348083,0.008108,0.372696,0.652330,-0.043798,0.922486,-0.383538,0.501565,0.348261,0.000016,0.407412,0.708021,0.002230,0.835762,-0.549088,0.500000,0.348030,0.000027,0.372482,0.652300,0.001306,0.923799,-0.382876,0.500000,0.348210,0.013719,0.408310,0.708065,-0.103843,0.829149,-0.549298,0.503070,0.348197,0.015975,0.373272,0.652199,-0.079506,0.919178,-0.385735,0.503112,0.348374,-0.101681,0.347872,-0.055376,-0.327349,0.133514,-0.935423,0.102770,0.208750,-0.126458,0.346914,-0.045487,-0.383643,0.124164,-0.915096,0.116820,0.207860,-0.134384,0.302236,-0.051622,-0.389163,0.270894,-0.880437,0.117010,0.174330,-0.108013,0.301940,-0.062825,-0.335673,0.267360,-0.903240,0.102630,0.175540,-0.008047,0.372709,0.652314,0.045330,0.922372,-0.383635,0.498425,0.348261,-0.006975,0.407660,0.708240,0.053923,0.833923,-0.549241,0.498447,0.348083,-0.013652,0.408328,0.708027,0.103833,0.829077,-0.549409,0.496928,0.348197,-0.015910,0.373289,0.652178,0.079668,0.919105,-0.385873,0.496886,0.348374,0.049811,0.408505,0.696402,-0.212839,0.776604,-0.592947,0.512015,0.347215,0.058832,0.373464,0.644744,-0.080299,0.903839,-0.420271,0.512055,0.347369,0.101681,0.347872,-0.055376,0.327350,0.133514,-0.935423,0.897220,0.208750,0.126458,0.346914,-0.045487,0.383643,0.124164,-0.915096,0.883170,0.207860,0.108013,0.301940,-0.062825,0.335674,0.267360,-0.903239,0.897360,0.175540,0.134384,0.302236,-0.051622,0.389163,0.270895,-0.880436,0.882980,0.174330,-0.119897,0.570535,-0.085546,-0.111084,-0.496743,-0.860760,0.099480,0.331960,-0.098394,0.573770,-0.089178,-0.056259,-0.496103,-0.866439,0.089240,0.331670,-0.051843,0.579083,-0.092659,0.002582,-0.477301,-0.878736,0.067240,0.330390,-0.075804,0.576815,-0.091550,-0.009529,-0.489526,-0.871937,0.078530,0.331220,0.119897,0.570535,-0.085546,0.111083,-0.496743,-0.860760,0.900510,0.331960,0.098394,0.573770,-0.089178,0.056258,-0.496103,-0.866439,0.910750,0.331670,0.051843,0.579083,-0.092659,-0.002583,-0.477300,-0.878737,0.932750,0.330390,0.075804,0.576815,-0.091550,0.009529,-0.489525,-0.871937,0.921470,0.331220,-0.049762,0.408530,0.696345,0.214383,0.776108,-0.593040,0.487975,0.347215,-0.058789,0.373485,0.644712,0.081147,0.903661,-0.420489,0.487935,0.347369,0.020052,0.409049,0.707771,-0.123917,0.825016,-0.551356,0.504529,0.348327,0.023624,0.373937,0.651894,-0.089034,0.916714,-0.389498,0.504586,0.348504,-0.020010,0.409065,0.707732,0.123579,0.825009,-0.551442,0.495461,0.348327,-0.023566,0.373953,0.651871,0.088871,0.916676,-0.389625,0.495404,0.348504,0.007304,0.419478,0.708714,0.090740,-0.755064,-0.649342,0.501614,0.348772,0.008297,0.464652,0.652621,0.159575,-0.896240,-0.413871,0.501603,0.348629,0.014200,0.420357,0.708571,0.117469,-0.745863,-0.655660,0.503196,0.348920,0.016322,0.466871,0.652535,0.239122,-0.877773,-0.415133,0.503179,0.348760,0.000013,0.419148,0.708342,-0.000099,-0.760643,-0.649171,0.500000,0.348695,0.000027,0.463799,0.652555,-0.002093,-0.909481,-0.415741,0.500000,0.348565,-0.077582,0.302003,-0.072978,-0.263910,0.260488,-0.928707,0.084540,0.178150,-0.074071,0.348744,-0.064116,-0.249279,0.147686,-0.957105,0.087210,0.210160,-0.047338,0.302279,-0.080333,-0.181225,0.259253,-0.948654,0.067510,0.180910,-0.046586,0.349303,-0.070376,-0.163531,0.165596,-0.972541,0.072450,0.211590,0.077582,0.302003,-0.072978,0.263911,0.260489,-0.928707,0.915450,0.178150,0.074071,0.348744,-0.064116,0.249279,0.147686,-0.957104,0.912780,0.210160,0.046586,0.349303,-0.070376,0.163531,0.165596,-0.972541,0.927540,0.211590,0.047338,0.302279,-0.080333,0.181225,0.259254,-0.948654,0.932480,0.180910,-0.026364,0.579908,-0.093300,-0.008475,-0.462879,-0.886381,0.055280,0.328970,0.000000,0.579889,-0.093696,0.000003,-0.455721,-0.890123,0.042980,0.327260,0.026365,0.579908,-0.093300,0.008476,-0.462879,-0.886381,0.944710,0.328970,0.000000,0.579889,-0.093696,0.000003,-0.455721,-0.890123,0.957020,0.327260,0.020706,0.421327,0.708415,0.067651,-0.738285,-0.671088,0.504688,0.349064,0.024087,0.469425,0.652280,0.200485,-0.881419,-0.427676,0.504671,0.348897,-0.007236,0.419502,0.708673,-0.091280,-0.754743,-0.649640,0.498379,0.348772,-0.008232,0.464703,0.652605,-0.162725,-0.895626,-0.413974,0.498388,0.348629,0.027097,0.421970,0.707540,-0.088219,-0.722138,-0.686100,0.506173,0.349094,0.031834,0.471176,0.651580,0.033003,-0.894855,-0.445135,0.506158,0.348927,-0.014132,0.420378,0.708540,-0.117636,-0.745416,-0.656138,0.496802,0.348920,-0.016255,0.466945,0.652516,-0.240243,-0.877310,-0.415465,0.496819,0.348760,0.033681,0.422095,0.705402,-0.278451,-0.678278,-0.680004,0.507726,0.348907,0.039974,0.471315,0.650172,-0.190655,-0.873798,-0.447357,0.507709,0.348743,-0.020663,0.421347,0.708381,-0.067247,-0.737817,-0.671643,0.495304,0.349064,-0.024027,0.469504,0.652259,-0.200520,-0.881182,-0.428148,0.495321,0.348897,0.041151,0.421520,0.701617,-0.395396,-0.634063,-0.664550,0.509623,0.348492,0.049035,0.469469,0.647936,-0.356442,-0.826422,-0.435862,0.509608,0.348336,-0.027031,0.421993,0.707502,0.088134,-0.721668,-0.686606,0.493817,0.349094,-0.031773,0.471256,0.651557,-0.032981,-0.894625,-0.445599,0.493832,0.348927,-0.022201,0.349306,-0.073495,-0.076687,0.179851,-0.980700,0.060470,0.212610,-0.021848,0.302434,-0.083999,-0.088829,0.263349,-0.960602,0.055530,0.182950,0.0,0.349213,-0.074315,-0.000000,0.184935,-0.982751,0.049960,0.213490,0.000000,0.302488,-0.084944,-0.000000,0.266084,-0.963950,0.046080,0.184610,0.022201,0.349306,-0.073495,0.076686,0.179851,-0.980700,0.939520,0.212610,0.0,0.349213,-0.074315,-0.000000,0.184935,-0.982751,0.950030,0.213490,0.021848,0.302434,-0.083999,0.088828,0.263350,-0.960602,0.944460,0.182950,0.000000,0.302488,-0.084944,-0.000000,0.266084,-0.963950,0.953910,0.184610,-0.258904,0.297650,0.103074,-0.998416,0.054331,-0.014637,0.255260,0.204240,-0.262130,0.263489,0.094644,-0.992989,0.114134,0.030755,0.258140,0.180360,-0.255597,0.287857,0.137484,-0.990411,-0.031231,0.134577,0.279230,0.209510,-0.257507,0.254345,0.127510,-0.976219,-0.001910,0.216779,0.282180,0.187860,0.262130,0.263489,0.094644,0.992989,0.114134,0.030755,0.741860,0.180360,0.258904,0.297650,0.103074,0.998416,0.054331,-0.014637,0.744730,0.204240,0.257507,0.254345,0.127510,0.976219,-0.001911,0.216779,0.717810,0.187860,0.255597,0.287857,0.137484,0.990411,-0.031231,0.134577,0.720770,0.209510,-0.248185,0.248035,0.157684,-0.948384,-0.122621,0.292457,0.301440,0.194290,-0.250274,0.282209,0.166966,-0.973729,-0.125300,0.190135,0.297030,0.214640,-0.243603,0.278414,0.194915,-0.947764,-0.214539,0.236044,0.312360,0.219540,-0.236260,0.242832,0.189589,-0.923985,-0.222294,0.311188,0.319350,0.200140,0.248185,0.248035,0.157684,0.948385,-0.122621,0.292456,0.698550,0.194290,0.250274,0.282209,0.166966,0.973729,-0.125300,0.190134,0.702970,0.214640,0.236260,0.242832,0.189589,0.923984,-0.222294,0.311188,0.680640,0.200140,0.243603,0.278414,0.194915,0.947764,-0.214539,0.236045,0.687630,0.219540,-0.221041,0.269020,0.256847,-0.884525,-0.273596,0.377837,0.344980,0.228390,-0.222203,0.238390,0.226623,-0.907041,-0.275375,0.318505,0.338640,0.206200,-0.206641,0.232592,0.264419,-0.882321,-0.265973,0.388289,0.357970,0.211710,-0.233913,0.274515,0.225783,-0.918788,-0.267820,0.290002,0.328510,0.224220,0.222203,0.238390,0.226623,0.907041,-0.275374,0.318507,0.661350,0.206200,0.221041,0.269020,0.256847,0.884524,-0.273597,0.377837,0.655010,0.228390,0.206641,0.232592,0.264419,0.882321,-0.265972,0.388289,0.642020,0.211710,0.233912,0.274515,0.225783,0.918787,-0.267821,0.290003,0.671480,0.224220,-0.188521,0.258482,0.310234,-0.824208,-0.226710,0.518925,0.375830,0.234770,-0.187237,0.227321,0.298159,-0.850015,-0.222704,0.477366,0.376440,0.216110,-0.169251,0.223953,0.326320,-0.837608,-0.189065,0.512511,0.392320,0.220310,-0.204812,0.263287,0.285642,-0.846653,-0.251821,0.468791,0.361520,0.231800,0.187237,0.227321,0.298159,0.850015,-0.222704,0.477365,0.623550,0.216110,0.188521,0.258482,0.310234,0.824208,-0.226712,0.518924,0.624160,0.234770,0.169251,0.223953,0.326320,0.837608,-0.189065,0.512510,0.607670,0.220310,0.204812,0.263287,0.285642,0.846653,-0.251823,0.468790,0.638470,0.231800,-0.175035,0.255969,0.329225,-0.830918,-0.227350,0.507827,0.385650,0.237390,-0.156209,0.224898,0.347908,-0.851791,-0.197065,0.485405,0.403840,0.224930,0.175035,0.255969,0.329225,0.830917,-0.227349,0.507828,0.614340,0.237390,0.156209,0.224898,0.347908,0.851790,-0.197065,0.485406,0.596150,0.224930,-0.131046,0.183019,0.376641,-0.826977,-0.208403,0.522186,0.421050,0.215790,-0.142378,0.201088,0.364363,-0.854095,-0.187291,0.485226,0.414390,0.218920,-0.144322,0.176231,0.353669,-0.836885,-0.151040,0.526128,0.409870,0.206610,-0.155078,0.197208,0.341393,-0.847256,-0.154619,0.508183,0.402710,0.212050,-0.163852,0.177319,0.321341,-0.860868,-0.144721,0.487813,0.392130,0.200110,-0.173597,0.199437,0.310596,-0.858724,-0.177925,0.480557,0.385750,0.206670,-0.186320,0.183955,0.280346,-0.897057,-0.192251,0.397906,0.370700,0.194880,-0.194675,0.205158,0.272760,-0.888408,-0.236150,0.393656,0.365670,0.201730,0.131046,0.183019,0.376641,0.826976,-0.208404,0.522186,0.578940,0.215790,0.142378,0.201088,0.364363,0.854095,-0.187291,0.485226,0.585600,0.218920,0.155078,0.197208,0.341393,0.847257,-0.154619,0.508182,0.597280,0.212050,0.144322,0.176232,0.353669,0.836885,-0.151040,0.526128,0.590120,0.206610,0.163852,0.177318,0.321341,0.860868,-0.144720,0.487814,0.607860,0.200110,0.173597,0.199437,0.310596,0.858725,-0.177924,0.480557,0.614240,0.206670,0.194674,0.205158,0.272760,0.888408,-0.236147,0.393657,0.634320,0.201730,0.186320,0.183955,0.280346,0.897057,-0.192250,0.397906,0.629290,0.194880,-0.206290,0.193909,0.232751,-0.908749,-0.228404,0.349294,0.348070,0.189030,-0.212904,0.212695,0.229660,-0.904331,-0.261098,0.337657,0.344460,0.195810,-0.227220,0.203260,0.187106,-0.895890,-0.197538,0.397944,0.325540,0.182450,-0.230891,0.219569,0.187933,-0.906513,-0.212423,0.364842,0.323280,0.189270,0.206290,0.193909,0.232751,0.908749,-0.228404,0.349294,0.651920,0.189030,0.212904,0.212695,0.229660,0.904331,-0.261097,0.337658,0.655530,0.195810,0.230891,0.219569,0.187933,0.906513,-0.212423,0.364842,0.676710,0.189270,0.227220,0.203260,0.187106,0.895890,-0.197538,0.397944,0.674450,0.182450,-0.247048,0.225926,0.153260,-0.922994,-0.111569,0.368286,0.303810,0.182670,-0.261022,0.217865,0.118542,-0.936433,0.037778,0.348807,0.284250,0.167170,-0.246512,0.210532,0.150488,-0.901506,-0.105582,0.419689,0.305020,0.175230,-0.259229,0.232743,0.122056,-0.956926,0.024182,0.289325,0.283630,0.175330,0.246512,0.210532,0.150488,0.901506,-0.105580,0.419690,0.694970,0.175230,0.261022,0.217865,0.118542,0.936432,0.037780,0.348808,0.715740,0.167170,0.247048,0.225926,0.153260,0.922994,-0.111569,0.368286,0.696190,0.182670,0.259229,0.232743,0.122056,0.956925,0.024183,0.289325,0.716360,0.175330,-0.265885,0.241295,0.089939,-0.979926,0.176826,0.092074,0.259560,0.167060,-0.269591,0.226495,0.086680,-0.964528,0.214792,0.153461,0.260160,0.158820,-0.267042,0.236099,0.051835,-0.915920,0.384877,-0.113843,0.232440,0.150530,-0.261734,0.250786,0.055143,-0.932907,0.309553,-0.184014,0.231840,0.158800,0.265885,0.241295,0.089939,0.979926,0.176826,0.092074,0.740430,0.167060,0.261734,0.250786,0.055143,0.932907,0.309553,-0.184014,0.768150,0.158800,0.267042,0.236099,0.051835,0.915919,0.384878,-0.113843,0.767560,0.150530,0.269591,0.226495,0.086680,0.964528,0.214793,0.153461,0.739830,0.158820,-0.251701,0.245301,0.015187,-0.794564,0.515767,-0.320394,0.198820,0.142760,-0.219946,0.268729,-0.009833,-0.686993,0.443591,-0.575559,0.167380,0.148380,-0.228560,0.252659,-0.015880,-0.653989,0.596952,-0.464702,0.167850,0.138050,-0.244791,0.260086,0.019516,-0.818721,0.396938,-0.414894,0.198530,0.151800,0.251701,0.245301,0.015187,0.794564,0.515767,-0.320394,0.801170,0.142760,0.219946,0.268729,-0.009833,0.686993,0.443590,-0.575559,0.832610,0.148380,0.244791,0.260086,0.019516,0.818721,0.396937,-0.414893,0.801470,0.151800,0.228560,0.252659,-0.015880,0.653989,0.596951,-0.464702,0.832150,0.138050,-0.168393,0.276416,-0.045980,-0.434207,0.450673,-0.779973,0.131350,0.154810,-0.193854,0.274320,-0.030963,-0.549738,0.456014,-0.699885,0.146740,0.150680,-0.203526,0.257557,-0.037725,-0.515194,0.619376,-0.592409,0.147890,0.139470,-0.178421,0.259842,-0.052918,-0.400709,0.603128,-0.689688,0.133010,0.143310,0.168393,0.276415,-0.045980,0.434207,0.450673,-0.779973,0.868640,0.154810,0.193854,0.274320,-0.030963,0.549738,0.456013,-0.699886,0.853250,0.150680,0.178421,0.259842,-0.052918,0.400709,0.603128,-0.689688,0.866980,0.143310,0.203526,0.257557,-0.037725,0.515194,0.619376,-0.592410,0.852110,0.139470,-0.152870,0.259974,-0.065336,-0.328171,0.577787,-0.747306,0.119830,0.145400,-0.143336,0.276257,-0.058378,-0.365485,0.441336,-0.819539,0.118080,0.156570,-0.123463,0.258866,-0.077767,-0.274127,0.548698,-0.789800,0.104560,0.147830,-0.115337,0.275244,-0.070354,-0.309943,0.423942,-0.851004,0.103230,0.158310,0.152870,0.259974,-0.065336,0.328171,0.577787,-0.747306,0.880160,0.145400,0.143336,0.276257,-0.058378,0.365486,0.441336,-0.819538,0.881910,0.156570,0.115338,0.275245,-0.070354,0.309943,0.423942,-0.851004,0.896760,0.158310,0.123463,0.258866,-0.077767,0.274127,0.548696,-0.789802,0.895430,0.147830,-0.088165,0.257975,-0.089092,-0.219394,0.517876,-0.826844,0.083710,0.152080,-0.082556,0.274881,-0.081080,-0.246325,0.401462,-0.882129,0.083530,0.161800,-0.053037,0.257848,-0.097204,-0.159316,0.495347,-0.853961,0.063950,0.156380,-0.050037,0.275111,-0.088781,-0.174825,0.385782,-0.905874,0.064940,0.165420,0.088165,0.257975,-0.089092,0.219396,0.517873,-0.826845,0.916280,0.152080,0.082556,0.274881,-0.081080,0.246326,0.401461,-0.882129,0.916460,0.161800,0.050037,0.275111,-0.088781,0.174826,0.385782,-0.905874,0.935050,0.165420,0.053037,0.257848,-0.097204,0.159317,0.495346,-0.853962,0.936040,0.156380,-0.023969,0.258134,-0.101310,-0.084472,0.484537,-0.870683,0.051010,0.159830,-0.022812,0.275317,-0.092791,-0.089913,0.380363,-0.920456,0.052580,0.168200,0.0,0.258315,-0.102388,-0.000000,0.481879,-0.876238,0.041320,0.162680,0.0,0.275387,-0.093878,-0.000000,0.379912,-0.925022,0.043270,0.170490,0.023969,0.258134,-0.101310,0.084470,0.484536,-0.870683,0.948980,0.159830,0.022812,0.275317,-0.092791,0.089912,0.380363,-0.920456,0.947410,0.168200,0.0,0.275387,-0.093878,-0.000000,0.379912,-0.925022,0.956720,0.170490,0.0,0.258315,-0.102388,-0.000000,0.481879,-0.876238,0.958670,0.162680,-0.055906,0.242472,-0.106433,-0.144568,0.550202,-0.822422,0.062320,0.146650,-0.025938,0.225051,-0.122290,-0.067586,0.578883,-0.812605,0.046020,0.139680,-0.059372,0.224559,-0.118353,-0.127676,0.594459,-0.793925,0.060200,0.134700,-0.024916,0.242838,-0.110521,-0.077321,0.537403,-0.839773,0.048890,0.150740,0.0,0.225614,-0.122969,-0.000001,0.573402,-0.819274,0.035650,0.143690,0.0,0.243188,-0.111489,-0.000001,0.533489,-0.845807,0.038920,0.154100,0.025938,0.225051,-0.122291,0.067585,0.578883,-0.812605,0.953970,0.139680,0.055906,0.242472,-0.106433,0.144569,0.550202,-0.822422,0.937670,0.146650,0.059372,0.224559,-0.118353,0.127677,0.594460,-0.793925,0.939800,0.134700,0.024916,0.242838,-0.110521,0.077319,0.537404,-0.839773,0.951110,0.150740,0.0,0.243188,-0.111489,-0.000001,0.533489,-0.845807,0.961080,0.154100,0.0,0.225614,-0.122969,-0.000001,0.573402,-0.819274,0.964340,0.143690,-0.064769,0.202596,-0.134944,-0.106847,0.640617,-0.760391,0.057580,0.119110,-0.030764,0.179894,-0.157879,-0.045724,0.660831,-0.749140,0.037720,0.110900,-0.071655,0.179619,-0.154342,-0.086734,0.677072,-0.730788,0.054600,0.103270,-0.027885,0.203180,-0.138642,-0.056358,0.623430,-0.779845,0.042090,0.125510,0.0,0.180646,-0.158241,-0.000000,0.655102,-0.755540,0.025640,0.116730,0.0,0.203832,-0.138968,-0.000000,0.617820,-0.786320,0.030990,0.130450,0.030764,0.179894,-0.157879,0.045723,0.660832,-0.749140,0.962270,0.110900,0.064769,0.202596,-0.134944,0.106846,0.640616,-0.760391,0.942410,0.119110,0.071655,0.179619,-0.154342,0.086734,0.677072,-0.730788,0.945390,0.103270,0.027885,0.203180,-0.138642,0.056357,0.623430,-0.779846,0.957900,0.125510,0.0,0.203832,-0.138968,-0.000000,0.617820,-0.786320,0.969000,0.130450,0.0,0.180646,-0.158241,-0.000000,0.655102,-0.755540,0.974350,0.116730,-0.132855,0.244516,-0.085676,-0.249475,0.605788,-0.755501,0.105050,0.136740,-0.102729,0.225563,-0.108971,-0.176268,0.619413,-0.765021,0.082600,0.128590,-0.145624,0.227520,-0.095868,-0.230894,0.648732,-0.725145,0.105970,0.122540,-0.094380,0.243054,-0.097771,-0.197965,0.573805,-0.794706,0.083150,0.141670,-0.127692,0.181972,-0.144092,-0.129174,0.702061,-0.700303,0.081880,0.093180,-0.163847,0.206567,-0.110547,-0.213213,0.696781,-0.684862,0.108190,0.102750,-0.114921,0.204109,-0.125043,-0.151550,0.667499,-0.729025,0.082580,0.110880,-0.182083,0.185042,-0.128454,-0.192108,0.734428,-0.650930,0.109310,0.083180,0.102729,0.225563,-0.108971,0.176269,0.619414,-0.765020,0.917390,0.128590,0.132855,0.244516,-0.085676,0.249475,0.605788,-0.755502,0.894940,0.136740,0.145624,0.227520,-0.095868,0.230894,0.648732,-0.725144,0.894020,0.122540,0.094380,0.243054,-0.097770,0.197967,0.573805,-0.794706,0.916850,0.141670,0.163847,0.206567,-0.110547,0.213213,0.696781,-0.684862,0.891800,0.102750,0.127692,0.181973,-0.144092,0.129174,0.702061,-0.700303,0.918110,0.093180,0.114921,0.204109,-0.125043,0.151550,0.667500,-0.729024,0.917410,0.110880,0.182083,0.185042,-0.128455,0.192108,0.734428,-0.650930,0.890680,0.083180,-0.189428,0.245578,-0.060802,-0.373785,0.669458,-0.641958,0.133790,0.131380,-0.177907,0.228784,-0.082830,-0.290758,0.671902,-0.681181,0.122030,0.118880,-0.203500,0.228644,-0.070861,-0.354346,0.696539,-0.623916,0.134960,0.116340,-0.163692,0.245731,-0.073086,-0.303410,0.637200,-0.708462,0.120690,0.133710,-0.197587,0.207676,-0.096415,-0.282437,0.715667,-0.638788,0.124790,0.098410,-0.222350,0.207140,-0.084447,-0.335378,0.727543,-0.598501,0.137390,0.095680,-0.218052,0.185785,-0.113564,-0.262599,0.763705,-0.589743,0.126410,0.078080,-0.242763,0.184768,-0.101374,-0.309022,0.778548,-0.546230,0.138870,0.075170,0.177907,0.228784,-0.082830,0.290757,0.671903,-0.681181,0.877960,0.118880,0.189428,0.245578,-0.060802,0.373784,0.669459,-0.641958,0.866200,0.131380,0.203500,0.228644,-0.070861,0.354345,0.696540,-0.623916,0.865030,0.116340,0.163692,0.245731,-0.073086,0.303409,0.637200,-0.708462,0.879300,0.133710,0.197587,0.207676,-0.096415,0.282436,0.715667,-0.638789,0.875200,0.098410,0.218052,0.185785,-0.113564,0.262598,0.763705,-0.589743,0.873580,0.078080,0.222350,0.207140,-0.084447,0.335378,0.727542,-0.598502,0.862600,0.095680,0.242763,0.184768,-0.101374,0.309022,0.778549,-0.546230,0.861130,0.075170,-0.214095,0.243523,-0.045751,-0.487085,0.694805,-0.529144,0.148380,0.127980,-0.238188,0.239181,-0.023233,-0.634236,0.670228,-0.385409,0.168050,0.127380,-0.227804,0.226889,-0.056724,-0.468958,0.725312,-0.503985,0.149200,0.112960,-0.250927,0.222709,-0.033674,-0.629363,0.703825,-0.329442,0.168400,0.112770,-0.266750,0.182983,-0.089675,-0.429735,0.788033,-0.440830,0.151730,0.070620,-0.268897,0.201155,-0.049069,-0.628229,0.725238,-0.281706,0.168980,0.091130,-0.246440,0.205495,-0.071982,-0.450364,0.749729,-0.484850,0.150890,0.091590,-0.289171,0.178226,-0.066456,-0.623391,0.746825,-0.231593,0.169250,0.069850,-0.270084,0.215239,0.002133,-0.777839,0.607096,-0.162484,0.199550,0.119610,-0.259369,0.231889,0.009979,-0.783688,0.572846,-0.240168,0.199200,0.133140,-0.272633,0.222370,0.048146,-0.906988,0.418595,-0.046369,0.233320,0.141660,-0.280777,0.205210,0.042616,-0.893169,0.448356,0.035025,0.234140,0.129190,-0.305800,0.168237,-0.024203,-0.755395,0.654622,-0.029138,0.200140,0.077500,-0.286247,0.193238,-0.010129,-0.771808,0.629462,-0.089948,0.199560,0.099130,-0.293549,0.182349,0.033858,-0.869640,0.478027,0.123353,0.234490,0.110240,-0.311451,0.155602,0.023100,-0.826102,0.526413,0.201110,0.235700,0.088480,0.214095,0.243522,-0.045751,0.487084,0.694806,-0.529144,0.851610,0.127980,0.227804,0.226889,-0.056724,0.468958,0.725313,-0.503984,0.850790,0.112960,0.238188,0.239181,-0.023233,0.634236,0.670228,-0.385409,0.831940,0.127380,0.250927,0.222709,-0.033674,0.629364,0.703825,-0.329441,0.831590,0.112770,0.266750,0.182983,-0.089675,0.429735,0.788034,-0.440830,0.848260,0.070620,0.268897,0.201155,-0.049069,0.628229,0.725238,-0.281705,0.831010,0.091130,0.289171,0.178226,-0.066456,0.623391,0.746825,-0.231593,0.830740,0.069850,0.246440,0.205495,-0.071982,0.450364,0.749729,-0.484850,0.849100,0.091590,0.270084,0.215239,0.002133,0.777839,0.607096,-0.162485,0.800440,0.119610,0.259369,0.231889,0.009979,0.783688,0.572846,-0.240168,0.800790,0.133140,0.280777,0.205210,0.042616,0.893169,0.448355,0.035025,0.765850,0.129190,0.272633,0.222370,0.048146,0.906988,0.418596,-0.046369,0.766670,0.141660,0.305800,0.168237,-0.024203,0.755395,0.654622,-0.029138,0.799850,0.077500,0.286247,0.193238,-0.010129,0.771807,0.629462,-0.089947,0.800430,0.099130,0.311451,0.155602,0.023100,0.826102,0.526413,0.201110,0.764290,0.088480,0.293549,0.182348,0.033858,0.869640,0.478028,0.123353,0.765500,0.110240,-0.273487,0.212473,0.083380,-0.950970,0.224075,0.213180,0.261130,0.150020,-0.262957,0.203368,0.115313,-0.913865,0.029894,0.404916,0.285210,0.158530,-0.279004,0.194686,0.078630,-0.928270,0.233312,0.289621,0.262220,0.138010,-0.265555,0.184937,0.111200,-0.880062,0.014222,0.474646,0.286670,0.147050,-0.301651,0.143518,0.062004,-0.819655,0.312253,0.480276,0.264740,0.099460,-0.288055,0.170928,0.071261,-0.887329,0.253858,0.384971,0.263310,0.120100,-0.269574,0.160229,0.105077,-0.826729,0.014195,0.562421,0.288990,0.130360,-0.276362,0.132587,0.097391,-0.753351,0.068362,0.654055,0.291470,0.112040,0.273487,0.212473,0.083380,0.950970,0.224076,0.213180,0.738860,0.150020,0.262957,0.203368,0.115313,0.913865,0.029895,0.404916,0.714780,0.158530,0.279004,0.194686,0.078630,0.928270,0.233312,0.289620,0.737770,0.138010,0.265555,0.184937,0.111200,0.880062,0.014222,0.474646,0.713320,0.147050,0.301651,0.143518,0.062004,0.819654,0.312253,0.480276,0.735250,0.099460,0.288055,0.170928,0.071261,0.887330,0.253858,0.384971,0.736680,0.120100,0.276362,0.132587,0.097391,0.753351,0.068362,0.654055,0.708520,0.112040,0.269574,0.160229,0.105077,0.826729,0.014194,0.562421,0.711000,0.130360,-0.245781,0.195478,0.147941,-0.878644,-0.120005,0.462152,0.306550,0.167410,-0.244262,0.176255,0.144870,-0.847988,-0.147063,0.509205,0.309210,0.156950,-0.223598,0.187148,0.186553,-0.887393,-0.203028,0.413900,0.328090,0.175350,-0.218093,0.166517,0.185870,-0.879429,-0.225376,0.419297,0.332140,0.165600,-0.241284,0.150627,0.140530,-0.808894,-0.152402,0.567860,0.314060,0.141750,-0.239023,0.121762,0.135536,-0.765908,-0.092042,0.636327,0.319730,0.125810,-0.210107,0.139054,0.184915,-0.875515,-0.225815,0.427179,0.339170,0.151080,-0.201706,0.108147,0.183949,-0.877131,-0.163954,0.451398,0.347210,0.136140,0.244262,0.176255,0.144870,0.847987,-0.147063,0.509205,0.690790,0.156950,0.245781,0.195478,0.147941,0.878643,-0.120005,0.462152,0.693440,0.167410,0.218093,0.166517,0.185871,0.879429,-0.225377,0.419296,0.667850,0.165600,0.223598,0.187148,0.186553,0.887393,-0.203028,0.413900,0.671900,0.175350,0.239023,0.121762,0.135536,0.765908,-0.092042,0.636327,0.680260,0.125810,0.241284,0.150627,0.140530,0.808894,-0.152403,0.567860,0.685930,0.141750,0.201706,0.108147,0.183949,0.877131,-0.163953,0.451398,0.652780,0.136140,0.210106,0.139054,0.184915,0.875515,-0.225815,0.427178,0.660820,0.151080,-0.179290,0.163126,0.287819,-0.899746,-0.177034,0.398894,0.376030,0.187850,-0.193575,0.152437,0.239954,-0.916942,-0.224444,0.329913,0.357310,0.172600,-0.171390,0.138052,0.295437,-0.896915,-0.184746,0.401763,0.382600,0.178570,-0.200557,0.175489,0.236112,-0.912981,-0.215717,0.346313,0.352010,0.182050,-0.162887,0.107782,0.302563,-0.888029,-0.193181,0.417236,0.391450,0.164940,-0.176758,0.091418,0.248365,-0.931174,-0.181429,0.316227,0.373470,0.143880,-0.154255,0.076758,0.308613,-0.868577,-0.190706,0.457390,0.400770,0.150860,-0.184974,0.123058,0.244034,-0.923532,-0.221348,0.313200,0.365070,0.158490,0.193575,0.152437,0.239954,0.916942,-0.224444,0.329913,0.642680,0.172600,0.179290,0.163126,0.287819,0.899746,-0.177033,0.398894,0.623960,0.187850,0.171390,0.138052,0.295437,0.896914,-0.184745,0.401763,0.617390,0.178570,0.200557,0.175489,0.236112,0.912981,-0.215716,0.346313,0.647980,0.182050,0.176758,0.091418,0.248365,0.931174,-0.181429,0.316226,0.626520,0.143880,0.162887,0.107782,0.302563,0.888029,-0.193181,0.417236,0.608540,0.164940,0.154255,0.076758,0.308613,0.868577,-0.190706,0.457389,0.599220,0.150860,0.184974,0.123058,0.244034,0.923532,-0.221348,0.313199,0.634930,0.158490,-0.133290,0.155989,0.364649,-0.799296,-0.188910,0.570472,0.416900,0.200870,-0.144577,0.129199,0.340763,-0.809079,-0.183148,0.558433,0.406510,0.184570,-0.114822,0.129743,0.377167,-0.703552,-0.271395,0.656779,0.428700,0.194110,-0.154921,0.155503,0.331477,-0.844983,-0.153932,0.512161,0.398550,0.193330,-0.121383,0.067857,0.349914,-0.679665,-0.229748,0.696614,0.429610,0.158950,-0.102760,0.095343,0.374234,-0.609129,-0.285329,0.739965,0.440130,0.180170,-0.133590,0.098128,0.346591,-0.753398,-0.209832,0.623186,0.417700,0.172050,-0.088002,0.066803,0.372952,-0.523596,-0.299432,0.797613,0.453640,0.168170,0.133290,0.155989,0.364649,0.799296,-0.188910,0.570473,0.583090,0.200870,0.144577,0.129199,0.340763,0.809079,-0.183147,0.558433,0.593480,0.184570,0.154921,0.155503,0.331477,0.844983,-0.153931,0.512161,0.601440,0.193330,0.114822,0.129743,0.377167,0.703553,-0.271394,0.656779,0.571290,0.194110,0.102760,0.095343,0.374234,0.609130,-0.285328,0.739965,0.559860,0.180170,0.121383,0.067857,0.349914,0.679665,-0.229747,0.696614,0.570380,0.158950,0.133590,0.098128,0.346591,0.753398,-0.209832,0.623187,0.582300,0.172050,0.088002,0.066803,0.372952,0.523597,-0.299432,0.797613,0.546350,0.168170,-0.105870,0.153256,0.397443,-0.709297,-0.315329,0.630449,0.435900,0.210310,-0.119603,0.167357,0.386730,-0.779789,-0.249275,0.574275,0.427880,0.212260,-0.089592,0.144480,0.409541,-0.648506,-0.372453,0.663867,0.446020,0.212040,-0.087959,0.122165,0.398208,-0.615687,-0.376820,0.692053,0.446490,0.200660,-0.074160,0.138353,0.420696,-0.629783,-0.399295,0.666286,0.456830,0.214790,-0.070758,0.119402,0.411995,-0.611945,-0.419013,0.670784,0.458380,0.206310,-0.078985,0.097154,0.391473,-0.566047,-0.372569,0.735379,0.453960,0.188740,-0.063418,0.099689,0.405796,-0.591182,-0.428946,0.683015,0.463460,0.196080,-0.066086,0.073086,0.388546,-0.513073,-0.377717,0.770770,0.464900,0.177740,-0.053176,0.080823,0.402331,-0.559934,-0.441558,0.701071,0.470770,0.186730,0.105870,0.153256,0.397443,0.709298,-0.315328,0.630448,0.564090,0.210310,0.119603,0.167358,0.386730,0.779789,-0.249275,0.574275,0.572110,0.212260,0.089592,0.144479,0.409541,0.648507,-0.372452,0.663866,0.553970,0.212040,0.087959,0.122165,0.398208,0.615687,-0.376819,0.692053,0.553500,0.200660,0.074160,0.138353,0.420696,0.629783,-0.399295,0.666286,0.543160,0.214790,0.070758,0.119402,0.411995,0.611945,-0.419013,0.670785,0.541610,0.206310,0.078985,0.097154,0.391473,0.566048,-0.372569,0.735379,0.546030,0.188740,0.066086,0.073086,0.388546,0.513074,-0.377717,0.770769,0.535090,0.177740,0.063418,0.099689,0.405796,0.591181,-0.428946,0.683016,0.536530,0.196080,0.053176,0.080823,0.402331,0.559933,-0.441558,0.701072,0.529220,0.186730,-0.060801,0.132995,0.429936,-0.631317,-0.416284,0.654329,0.466910,0.215890,-0.049625,0.128050,0.437658,-0.636304,-0.439279,0.634153,0.475150,0.216650,-0.057520,0.117256,0.422913,-0.612976,-0.435524,0.659226,0.468540,0.208880,-0.046781,0.115351,0.431563,-0.606285,-0.455841,0.651634,0.476590,0.211090,0.060801,0.132995,0.429936,0.631317,-0.416285,0.654329,0.533080,0.215890,0.057520,0.117256,0.422913,0.612975,-0.435524,0.659227,0.531450,0.208880,0.049625,0.128050,0.437658,0.636304,-0.439280,0.634153,0.524840,0.216650,0.046781,0.115351,0.431563,0.606285,-0.455842,0.651634,0.523400,0.211090,-0.051727,0.101588,0.417768,-0.597311,-0.448739,0.664721,0.472380,0.201320,-0.042264,0.103058,0.427059,-0.581128,-0.461785,0.670108,0.479310,0.205650,-0.043833,0.086862,0.414721,-0.573340,-0.469854,0.671207,0.477620,0.194780,0.051727,0.101588,0.417768,0.597309,-0.448738,0.664722,0.527610,0.201320,0.043833,0.086862,0.414721,0.573339,-0.469854,0.671208,0.522380,0.194780,0.042264,0.103058,0.427059,0.581129,-0.461784,0.670108,0.520680,0.205650,-0.040139,0.123439,0.444016,-0.624334,-0.475929,0.619435,0.481490,0.217220,-0.037787,0.113280,0.438373,-0.588984,-0.488464,0.643817,0.482600,0.212910,-0.041429,0.133778,0.450532,-0.653705,-0.447991,0.609896,0.481040,0.221590,-0.031608,0.119198,0.449071,-0.577787,-0.524360,0.625467,0.486420,0.217560,-0.032734,0.127793,0.455195,-0.610236,-0.496867,0.617037,0.486050,0.221000,-0.029898,0.110891,0.443500,-0.547250,-0.526373,0.650729,0.487150,0.214060,-0.034521,0.103759,0.434112,-0.560224,-0.483995,0.672233,0.484390,0.208860,-0.028033,0.103274,0.438977,-0.525312,-0.510636,0.680660,0.488080,0.210750,0.040139,0.123439,0.444016,0.624333,-0.475929,0.619435,0.518500,0.217220,0.037787,0.113280,0.438373,0.588984,-0.488465,0.643816,0.517390,0.212910,0.031608,0.119198,0.449071,0.577785,-0.524359,0.625469,0.513570,0.217560,0.029898,0.110891,0.443500,0.547250,-0.526374,0.650729,0.512840,0.214060,0.032734,0.127793,0.455195,0.610234,-0.496867,0.617039,0.513940,0.221000,0.041429,0.133778,0.450532,0.653703,-0.447991,0.609899,0.518950,0.221590,0.034521,0.103759,0.434112,0.560225,-0.483996,0.672232,0.515600,0.208860,0.028033,0.103274,0.438977,0.525310,-0.510638,0.680660,0.511910,0.210750,-0.040534,0.153406,0.464862,-0.666607,-0.407528,0.624144,0.481810,0.229960,-0.041562,0.143912,0.457545,-0.667817,-0.421430,0.613528,0.481130,0.225940,-0.032223,0.144656,0.468037,-0.632606,-0.427929,0.645512,0.486500,0.227380,-0.032944,0.136388,0.461553,-0.631273,-0.458192,0.625743,0.486060,0.224300,0.040534,0.153405,0.464862,0.666606,-0.407529,0.624145,0.518180,0.229960,0.041562,0.143912,0.457545,0.667815,-0.421431,0.613530,0.518860,0.225940,0.032944,0.136388,0.461553,0.631273,-0.458194,0.625742,0.513930,0.224300,0.032223,0.144656,0.468037,0.632607,-0.427930,0.645511,0.513490,0.227380,-0.035202,0.168739,0.479527,-0.617824,-0.388304,0.683750,0.485070,0.236340,-0.038478,0.161727,0.472414,-0.648514,-0.397903,0.648925,0.483170,0.233420,-0.028428,0.159284,0.480393,-0.590224,-0.393736,0.704704,0.488610,0.232830,-0.030662,0.152397,0.474348,-0.616507,-0.408815,0.672896,0.487380,0.230220,0.035202,0.168739,0.479527,0.617824,-0.388305,0.683749,0.514920,0.236340,0.038478,0.161727,0.472414,0.648514,-0.397903,0.648925,0.516820,0.233420,0.030662,0.152397,0.474348,0.616505,-0.408815,0.672898,0.512610,0.230220,0.028428,0.159284,0.480393,0.590221,-0.393738,0.704705,0.511380,0.232830,-0.025885,0.165205,0.485609,-0.558354,-0.380565,0.737164,0.489930,0.235220,-0.031052,0.173962,0.485902,-0.581625,-0.382806,0.717755,0.487260,0.238790,-0.026312,0.176953,0.491038,-0.535448,-0.382868,0.752800,0.489590,0.240640,-0.023901,0.169394,0.489173,-0.529783,-0.371502,0.762441,0.490930,0.237180,0.025885,0.165205,0.485609,0.558354,-0.380567,0.737163,0.510070,0.235220,0.031052,0.173962,0.485902,0.581623,-0.382807,0.717756,0.512730,0.238790,0.023901,0.169394,0.489173,0.529783,-0.371502,0.762441,0.509060,0.237180,0.026312,0.176953,0.491038,0.535446,-0.382869,0.752801,0.510400,0.240640,-0.020643,0.177435,0.495029,-0.470231,-0.392770,0.790326,0.492280,0.241520,-0.014104,0.176756,0.498211,-0.364461,-0.410951,0.835636,0.495040,0.242000,-0.019620,0.167564,0.491001,-0.468405,-0.385591,0.794932,0.492870,0.236930,-0.013558,0.165646,0.493184,-0.357790,-0.407794,0.840054,0.495270,0.236880,0.020643,0.177435,0.495029,0.470231,-0.392771,0.790325,0.507710,0.241520,0.014104,0.176756,0.498211,0.364458,-0.410953,0.835636,0.504950,0.242000,0.019620,0.167564,0.491001,0.468405,-0.385590,0.794932,0.507120,0.236930,-0.020186,0.159824,0.486815,-0.482980,-0.406684,0.775460,0.492500,0.233690,-0.021583,0.152592,0.481979,-0.510577,-0.427333,0.746122,0.491750,0.230960,-0.013805,0.156356,0.488465,-0.363927,-0.434592,0.823825,0.495060,0.233100,-0.014555,0.148193,0.483566,-0.381213,-0.467280,0.797700,0.494640,0.230120,0.020186,0.159824,0.486815,0.482983,-0.406686,0.775457,0.507500,0.233690,0.021583,0.152592,0.481979,0.510578,-0.427335,0.746119,0.508240,0.230960,-0.007130,0.176041,0.500299,-0.201400,-0.429812,0.880170,0.497610,0.242230,-0.000000,0.175794,0.500986,0.000003,-0.438134,0.898910,0.500000,0.242290,-0.006902,0.164364,0.494731,-0.195347,-0.429913,0.881484,0.497670,0.236910,0.007130,0.176041,0.500299,0.201399,-0.429812,0.880170,0.502380,0.242230,-0.023060,0.145344,0.476598,-0.533446,-0.447637,0.717674,0.490990,0.228430,-0.024196,0.137909,0.470919,-0.546333,-0.477802,0.687914,0.490430,0.225930,-0.015449,0.140557,0.478460,-0.396819,-0.498271,0.770883,0.494200,0.227580,-0.016194,0.133233,0.473081,-0.405254,-0.539804,0.737821,0.493870,0.225220,0.023060,0.145344,0.476598,0.533444,-0.447635,0.717678,0.509000,0.228430,0.024196,0.137909,0.470919,0.546332,-0.477801,0.687915,0.509560,0.225930,0.015449,0.140557,0.478460,0.396821,-0.498268,0.770884,0.505790,0.227580,0.016194,0.133233,0.473081,0.405254,-0.539803,0.737822,0.506120,0.225220,-0.016454,0.126171,0.467378,-0.402583,-0.586536,0.702782,0.493710,0.222870,-0.024696,0.130410,0.464942,-0.544024,-0.520225,0.658334,0.490160,0.223350,-0.016206,0.119336,0.461419,-0.391881,-0.619612,0.680081,0.493720,0.220390,-0.024396,0.122937,0.458823,-0.523912,-0.560420,0.641441,0.490170,0.220610,0.016454,0.126170,0.467378,0.402585,-0.586538,0.702779,0.506280,0.222870,0.024696,0.130410,0.464942,0.544026,-0.520227,0.658331,0.509830,0.223350,0.024396,0.122937,0.458823,0.523912,-0.560419,0.641441,0.509820,0.220610,0.016206,0.119337,0.461419,0.391885,-0.619610,0.680081,0.506270,0.220390,-0.023500,0.115574,0.452737,-0.496245,-0.575648,0.649900,0.490420,0.217670,-0.015600,0.112610,0.455395,-0.378787,-0.621055,0.686157,0.493870,0.217680,-0.022408,0.108214,0.447173,-0.474530,-0.562913,0.676721,0.490830,0.214540,-0.014938,0.105741,0.449670,-0.367034,-0.597212,0.713179,0.494080,0.214660,0.023500,0.115574,0.452737,0.496245,-0.575645,0.649903,0.509570,0.217670,0.022408,0.108214,0.447173,0.474530,-0.562913,0.676720,0.509160,0.214540,0.015600,0.112610,0.455395,0.378792,-0.621050,0.686158,0.506120,0.217680,0.014938,0.105741,0.449670,0.367038,-0.597212,0.713176,0.505910,0.214660,-0.021626,0.101211,0.442035,-0.460944,-0.540316,0.703981,0.491200,0.211250,-0.014677,0.098689,0.444155,-0.359353,-0.573459,0.736213,0.494190,0.211260,0.021626,0.101211,0.442035,0.460946,-0.540318,0.703978,0.508790,0.211250,0.014677,0.098689,0.444155,0.359356,-0.573461,0.736211,0.505800,0.211260,-0.034251,0.074119,0.413414,-0.525824,-0.508459,0.681894,0.483410,0.190340,-0.041272,0.064516,0.400771,-0.506424,-0.473048,0.720944,0.478940,0.180700,0.041272,0.064516,0.400771,0.506424,-0.473048,0.720944,0.521050,0.180700,0.034251,0.074119,0.413414,0.525822,-0.508459,0.681895,0.516580,0.190340,-0.007453,0.103929,0.451261,-0.206780,-0.627197,0.750910,0.497090,0.214650,-0.007417,0.096767,0.445506,-0.205025,-0.604760,0.769565,0.497110,0.211150,0.0,0.103299,0.451778,-0.000004,-0.639867,0.768486,0.500000,0.214640,0.0,0.096049,0.446002,-0.000000,-0.619052,0.785350,0.500000,0.211100,0.007453,0.103929,0.451262,0.206779,-0.627199,0.750908,0.502900,0.214650,0.007417,0.096767,0.445506,0.205024,-0.604764,0.769562,0.502880,0.211150,-0.008101,0.117119,0.462972,-0.211205,-0.660789,0.720243,0.496940,0.220270,-0.007798,0.110664,0.457027,-0.208873,-0.654309,0.726810,0.497010,0.217650,-0.000000,0.116386,0.463457,-0.000002,-0.675651,0.737222,0.500000,0.220240,-0.000000,0.109976,0.457576,-0.000004,-0.666435,0.745564,0.500000,0.217630,0.008101,0.117119,0.462972,0.211206,-0.660787,0.720245,0.503050,0.220270,0.007798,0.110664,0.457027,0.208873,-0.654306,0.726812,0.502980,0.217650,0.008088,0.130448,0.474483,0.215146,-0.590578,0.777772,0.502990,0.224920,-0.000000,0.129619,0.474829,-0.000001,-0.610088,0.792334,0.500000,0.224840,0.008214,0.123640,0.468851,0.213731,-0.635389,0.742024,0.503060,0.222660,-0.000000,0.122797,0.469334,-0.000001,-0.652742,0.757581,0.500000,0.222600,-0.008088,0.130448,0.474483,-0.215145,-0.590579,0.777772,0.497000,0.224920,-0.008214,0.123640,0.468851,-0.213730,-0.635388,0.742025,0.496930,0.222660,-0.007753,0.137765,0.479717,-0.214881,-0.542032,0.812420,0.497160,0.227230,-0.007328,0.145641,0.484747,-0.208273,-0.499694,0.840790,0.497360,0.229810,-0.000000,0.136819,0.480189,-0.000001,-0.560704,0.828017,0.500000,0.227150,0.007753,0.137765,0.479717,0.214883,-0.542032,0.812420,0.502830,0.227230,-0.006991,0.154328,0.489738,-0.197890,-0.459499,0.865852,0.497560,0.232910,-0.073130,0.042680,0.371678,-0.450715,-0.292080,0.843531,0.464860,0.157900,-0.058277,0.021522,0.371086,-0.370320,-0.250313,0.894542,0.473220,0.149500,-0.052040,0.052526,0.387234,-0.458087,-0.393644,0.796995,0.474630,0.169410,-0.037255,0.035852,0.386409,-0.387264,-0.411563,0.825011,0.482970,0.163160,0.073130,0.042680,0.371678,0.450715,-0.292080,0.843531,0.535130,0.157900,0.052040,0.052526,0.387234,0.458087,-0.393645,0.796995,0.525360,0.169410,0.058277,0.021522,0.371086,0.370321,-0.250313,0.894542,0.526770,0.149500,0.037255,0.035852,0.386409,0.387264,-0.411563,0.825010,0.517020,0.163160,-0.097461,0.017278,0.354521,-0.492812,-0.075058,0.866892,0.448160,0.139450,-0.109085,0.041529,0.351796,-0.596320,-0.192307,0.779372,0.439460,0.148600,-0.138986,0.022266,0.322002,-0.761065,0.041666,0.647337,0.416440,0.130950,-0.146027,0.048742,0.314229,-0.833579,-0.119853,0.539241,0.408660,0.140450,0.097461,0.017278,0.354521,0.492813,-0.075057,0.866892,0.551830,0.139450,0.109085,0.041529,0.351796,0.596320,-0.192307,0.779372,0.560530,0.148600,0.146027,0.048742,0.314229,0.833579,-0.119853,0.539241,0.591330,0.140450,0.138986,0.022265,0.322002,0.761065,0.041666,0.647337,0.583550,0.130950,-0.077967,-0.028387,0.367259,-0.257493,0.213313,0.942441,0.464260,0.119460,-0.040161,0.001420,0.371534,-0.238733,-0.211342,0.947809,0.482260,0.141230,-0.086187,-0.006888,0.359429,-0.347389,0.107372,0.931554,0.456500,0.129620,0.0,-0.012900,0.372229,-0.000000,-0.201924,0.979401,0.500000,0.130610,-0.134641,-0.027149,0.347960,-0.561680,0.398060,0.725302,0.434170,0.107020,-0.133972,-0.004386,0.333110,-0.640456,0.271201,0.718517,0.425270,0.119350,-0.020866,0.022803,0.385940,-0.249116,-0.459770,0.852380,0.490630,0.158220,0.0,0.016758,0.385546,-0.000001,-0.500776,0.865577,0.500000,0.154540,0.040161,0.001420,0.371534,0.238733,-0.211342,0.947809,0.517730,0.141230,0.077967,-0.028387,0.367259,0.257493,0.213311,0.942441,0.535740,0.119460,0.086187,-0.006888,0.359429,0.347389,0.107372,0.931554,0.543500,0.129620,0.133972,-0.004385,0.333110,0.640455,0.271201,0.718517,0.574720,0.119350,0.134641,-0.027149,0.347960,0.561680,0.398060,0.725303,0.565820,0.107020,0.020866,0.022803,0.385940,0.249116,-0.459770,0.852381,0.509360,0.158220,-0.168277,0.032847,0.265541,-0.885164,0.144127,0.442394,0.389030,0.122760,-0.170895,0.061924,0.254356,-0.930028,-0.057325,0.362989,0.380750,0.132610,-0.196016,0.048286,0.195138,-0.795459,0.280447,0.537209,0.362240,0.114180,-0.196562,0.078604,0.185332,-0.866421,0.016854,0.499029,0.354130,0.124210,0.168277,0.032847,0.265541,0.885164,0.144128,0.442394,0.610960,0.122760,0.170895,0.061924,0.254356,0.930028,-0.057324,0.362989,0.619240,0.132610,0.196562,0.078604,0.185332,0.866421,0.016854,0.499029,0.645860,0.124210,0.196016,0.048286,0.195138,0.795459,0.280448,0.537209,0.637750,0.114180,-0.200348,0.014664,0.217103,-0.699916,0.458580,0.547560,0.374700,0.102870,-0.168058,0.002729,0.282519,-0.798231,0.333314,0.501726,0.400580,0.111350,-0.169118,-0.021188,0.298787,-0.750130,0.411320,0.517804,0.413320,0.098540,-0.203738,-0.009797,0.236559,-0.663721,0.505795,0.551040,0.389760,0.089530,0.200348,0.014664,0.217103,0.699916,0.458579,0.547560,0.625290,0.102870,0.168058,0.002729,0.282519,0.798231,0.333314,0.501726,0.599410,0.111350,0.203738,-0.009797,0.236559,0.663722,0.505795,0.551040,0.610230,0.089530,0.169118,-0.021188,0.298787,0.750131,0.411319,0.517803,0.586680,0.098540,-0.077839,0.158830,-0.173716,-0.071615,0.697840,-0.712665,0.051780,0.090440,-0.033866,0.158147,-0.177699,-0.035772,0.684263,-0.728357,0.033800,0.098390,0.0,0.158459,-0.178093,-0.000001,0.678831,-0.734295,0.020610,0.104740,0.077839,0.158830,-0.173716,0.071615,0.697839,-0.712666,0.948210,0.090440,0.033866,0.158147,-0.177699,0.035772,0.684263,-0.728358,0.966190,0.098390,0.0,0.158459,-0.178093,-0.000001,0.678831,-0.734295,0.979380,0.104740,-0.287554,0.106353,0.090340,-0.666188,0.198906,0.718769,0.292870,0.095360,-0.244970,0.065563,0.135233,-0.616391,0.351594,0.704588,0.330480,0.100380,-0.239898,0.094335,0.131671,-0.709757,0.088917,0.698812,0.324240,0.112450,-0.301958,0.079102,0.088355,-0.576462,0.377761,0.724560,0.296900,0.079780,-0.261142,0.008326,0.168732,-0.506292,0.574127,0.643464,0.356180,0.072220,-0.253961,0.032147,0.152091,-0.531621,0.527383,0.662757,0.342010,0.086770,-0.318020,0.048123,0.095812,-0.509777,0.514748,0.689320,0.306810,0.064700,-0.329200,0.026277,0.105139,-0.487929,0.559078,0.670341,0.319080,0.050370,0.244970,0.065563,0.135233,0.616391,0.351594,0.704588,0.669510,0.100380,0.287554,0.106353,0.090340,0.666188,0.198907,0.718769,0.707120,0.095360,0.239898,0.094335,0.131671,0.709757,0.088917,0.698812,0.675760,0.112450,0.301958,0.079102,0.088355,0.576462,0.377761,0.724560,0.703090,0.079780,0.261142,0.008326,0.168732,0.506292,0.574127,0.643464,0.643810,0.072220,0.253961,0.032147,0.152091,0.531621,0.527383,0.662757,0.657980,0.086770,0.318020,0.048123,0.095812,0.509777,0.514748,0.689320,0.693190,0.064700,0.329200,0.026277,0.105139,0.487929,0.559079,0.670341,0.680910,0.050370,-0.320824,0.116096,0.053276,-0.733679,0.402423,0.547513,0.266550,0.078940,-0.361727,0.100662,0.004079,-0.690920,0.652196,0.311881,0.244080,0.046300,-0.343879,0.088228,0.047551,-0.649381,0.495432,0.576933,0.270670,0.059490,-0.334064,0.128136,0.012845,-0.760504,0.593874,0.262580,0.238990,0.067120,-0.394006,0.073036,-0.002527,-0.637651,0.688634,0.345232,0.250760,0.026370,-0.386382,0.039464,0.050540,-0.557976,0.593890,0.579618,0.288200,0.026070,-0.369075,0.059105,0.047605,-0.583306,0.567498,0.581120,0.278730,0.042050,-0.416900,0.054668,-0.005466,-0.617834,0.700902,0.356395,0.257920,0.007300,0.343879,0.088228,0.047551,0.649381,0.495432,0.576933,0.729320,0.059490,0.361727,0.100662,0.004079,0.690920,0.652196,0.311880,0.755910,0.046300,0.320824,0.116096,0.053276,0.733679,0.402423,0.547513,0.733440,0.078940,0.334064,0.128136,0.012845,0.760504,0.593874,0.262579,0.761000,0.067120,0.386382,0.039464,0.050540,0.557977,0.593889,0.579618,0.711790,0.026070,0.394006,0.073036,-0.002527,0.637651,0.688634,0.345232,0.749230,0.026370,0.369075,0.059105,0.047605,0.583306,0.567498,0.581120,0.721260,0.042050,0.416900,0.054668,-0.005466,0.617834,0.700902,0.356395,0.742070,0.007300,-0.326889,0.144949,-0.036593,-0.712484,0.701110,0.028502,0.202420,0.059760,-0.352832,0.121710,-0.048419,-0.659429,0.747558,0.079441,0.206490,0.042300,-0.307222,0.159546,-0.081609,-0.602190,0.779459,-0.172658,0.169300,0.055520,-0.328678,0.141080,-0.096743,-0.576253,0.806344,-0.133199,0.170820,0.041530,-0.386687,0.095856,-0.061455,-0.624090,0.774017,0.106812,0.212140,0.021870,-0.412071,0.077619,-0.070074,-0.613171,0.781864,0.112742,0.218040,0.000600,-0.383795,0.098563,-0.128041,-0.554427,0.821153,-0.135348,0.179420,0.0,-0.359618,0.117007,-0.114946,-0.560014,0.818288,-0.129575,0.174840,0.021840,0.352832,0.121710,-0.048419,0.659429,0.747558,0.079441,0.793500,0.042300,0.326889,0.144949,-0.036593,0.712484,0.701110,0.028502,0.797570,0.059760,0.307222,0.159546,-0.081609,0.602190,0.779459,-0.172658,0.830700,0.055520,0.328678,0.141080,-0.096743,0.576253,0.806344,-0.133199,0.829170,0.041530,0.386687,0.095856,-0.061455,0.624090,0.774018,0.106812,0.787860,0.021870,0.412071,0.077619,-0.070074,0.613171,0.781864,0.112741,0.781950,0.000600,0.359618,0.117007,-0.114946,0.560014,0.818287,-0.129575,0.825150,0.021840,0.383795,0.098563,-0.128041,0.554427,0.821152,-0.135349,0.820570,0.0,-0.259052,0.167514,-0.119873,-0.277915,0.818164,-0.503360,0.138000,0.060070,-0.283630,0.165987,-0.107091,-0.412689,0.825632,-0.384734,0.150910,0.056300,-0.301864,0.149340,-0.125558,-0.409501,0.832760,-0.372585,0.150510,0.042650,-0.274576,0.150610,-0.140564,-0.261977,0.812051,-0.521479,0.136410,0.045900,-0.347198,0.108374,-0.163416,-0.406813,0.816336,-0.409998,0.153880,0.004040,-0.327363,0.126369,-0.147553,-0.409215,0.821846,-0.396375,0.151980,0.024270,-0.308152,0.110334,-0.182109,-0.252643,0.775903,-0.578053,0.133970,0.010560,-0.293805,0.127951,-0.164777,-0.255973,0.786360,-0.562242,0.135190,0.028760,-0.244861,0.150401,-0.152628,-0.194014,0.781843,-0.592520,0.122900,0.050060,-0.232744,0.168210,-0.131995,-0.225759,0.792598,-0.566411,0.125360,0.063420,-0.203681,0.147931,-0.166339,-0.140862,0.745933,-0.650954,0.105000,0.056830,-0.194207,0.166799,-0.146304,-0.164526,0.753383,-0.636667,0.107930,0.069450,-0.268669,0.109486,-0.195599,-0.167672,0.747582,-0.642656,0.116240,0.017000,-0.258644,0.127227,-0.177480,-0.175021,0.756927,-0.629626,0.119740,0.034000,-0.222689,0.104617,-0.209681,-0.117579,0.723428,-0.680314,0.096710,0.023940,-0.214607,0.123331,-0.191189,-0.124644,0.729327,-0.672715,0.101070,0.040990,0.259052,0.167514,-0.119873,0.277915,0.818164,-0.503360,0.861990,0.060070,0.283630,0.165987,-0.107091,0.412689,0.825632,-0.384734,0.849080,0.056300,0.274576,0.150610,-0.140564,0.261977,0.812051,-0.521480,0.863580,0.045900,0.301864,0.149340,-0.125558,0.409501,0.832760,-0.372585,0.849480,0.042650,0.347198,0.108373,-0.163416,0.406815,0.816335,-0.409999,0.846110,0.004040,0.327363,0.126369,-0.147553,0.409216,0.821845,-0.396375,0.848010,0.024270,0.293805,0.127951,-0.164777,0.255973,0.786360,-0.562242,0.864800,0.028760,0.308152,0.110334,-0.182109,0.252643,0.775903,-0.578053,0.866020,0.010560,0.244861,0.150401,-0.152628,0.194014,0.781843,-0.592521,0.877090,0.050060,0.232744,0.168210,-0.131995,0.225758,0.792598,-0.566411,0.874630,0.063420,0.194207,0.166799,-0.146304,0.164526,0.753383,-0.636667,0.892060,0.069450,0.203681,0.147931,-0.166339,0.140862,0.745933,-0.650954,0.894990,0.056830,0.268669,0.109486,-0.195599,0.167671,0.747583,-0.642656,0.883750,0.017000,0.258644,0.127226,-0.177480,0.175020,0.756927,-0.629626,0.880250,0.034000,0.214607,0.123331,-0.191189,0.124644,0.729327,-0.672715,0.898920,0.040990,0.222689,0.104617,-0.209681,0.117579,0.723428,-0.680314,0.903280,0.023940,-0.145479,0.141782,-0.183057,-0.099095,0.717436,-0.689540,0.077350,0.066940,-0.136926,0.162581,-0.162609,-0.111148,0.719463,-0.685580,0.079930,0.079980,-0.156856,0.114937,-0.208700,-0.091669,0.707818,-0.700422,0.074470,0.049970,-0.165659,0.094610,-0.227737,-0.088503,0.703991,-0.704673,0.071360,0.031380,0.145479,0.141782,-0.183057,0.099095,0.717436,-0.689541,0.922640,0.066940,0.136926,0.162581,-0.162609,0.111149,0.719462,-0.685580,0.920060,0.079980,0.156856,0.114937,-0.208700,0.091669,0.707818,-0.700422,0.925520,0.049970,0.165659,0.094610,-0.227737,0.088503,0.703991,-0.704673,0.928630,0.031380,0.089761,0.410380,0.664872,-0.839707,-0.278449,-0.466217,0.524057,0.343561,0.087952,0.408012,0.669095,-0.818158,-0.285753,-0.498962,0.524060,0.343572,-0.089907,0.410320,0.664865,0.843126,-0.270815,-0.464539,0.475936,0.343561,-0.092121,0.406610,0.662823,0.776291,-0.290785,-0.559300,0.473590,0.342670,-0.088101,0.407959,0.669089,0.823741,-0.273581,-0.496593,0.475932,0.343572,-0.084355,0.413060,0.671892,0.767081,-0.373028,-0.521955,0.478430,0.344503,-0.082644,0.409630,0.676463,0.757984,-0.354421,-0.547582,0.478428,0.344515,-0.077135,0.415447,0.679201,0.670170,-0.470635,-0.573912,0.480891,0.345448,-0.075537,0.411276,0.684101,0.667625,-0.445854,-0.596231,0.480890,0.345460,-0.069287,0.417290,0.685656,0.567855,-0.546434,-0.615590,0.483035,0.346302,-0.067864,0.412538,0.690818,0.566149,-0.522083,-0.637891,0.483035,0.346315,0.084232,0.413101,0.671906,-0.771931,-0.366785,-0.519222,0.521560,0.344503,0.082517,0.409669,0.676476,-0.764843,-0.345765,-0.543564,0.521563,0.344515,-0.060345,0.418813,0.691334,0.484140,-0.592989,-0.643407,0.485248,0.347088,-0.059095,0.413577,0.696715,0.482059,-0.569650,-0.665671,0.485247,0.347103,0.077194,0.415398,0.679339,-0.673776,-0.467794,-0.572010,0.519106,0.345448,0.075602,0.411230,0.684248,-0.672580,-0.441679,-0.593764,0.519108,0.345460,-0.050352,0.420247,0.696844,0.439185,-0.613058,-0.656716,0.487871,0.347859,-0.049223,0.414608,0.702456,0.444034,-0.586879,-0.677058,0.487870,0.347875,0.069310,0.417267,0.685734,-0.565648,-0.548729,-0.615581,0.516955,0.346302,0.067887,0.412524,0.690899,-0.563083,-0.525005,-0.638206,0.516955,0.346315,-0.041130,0.421535,0.701593,0.395823,-0.633435,-0.664894,0.490367,0.348492,-0.040146,0.415597,0.707405,0.416027,-0.601486,-0.682009,0.490365,0.348510,0.060379,0.418785,0.691389,-0.483849,-0.593789,-0.642888,0.514742,0.347088,0.059128,0.413559,0.696771,-0.481648,-0.570538,-0.665208,0.514742,0.347103,-0.033638,0.422117,0.705365,0.277645,-0.678058,-0.680551,0.492264,0.348907,-0.032850,0.416019,0.711341,0.312142,-0.644262,-0.698207,0.492262,0.348925,0.050406,0.420211,0.696905,-0.438441,-0.613942,-0.656388,0.512119,0.347859,0.049278,0.414579,0.702520,-0.442916,-0.587945,-0.676865,0.512120,0.347875,-0.026430,0.415904,0.713555,0.130098,-0.692995,-0.709107,0.493815,0.349113,0.040165,0.415589,0.707429,-0.415339,-0.602237,-0.681765,0.509625,0.348510,-0.020230,0.415409,0.714453,-0.022249,-0.715696,-0.698058,0.495302,0.349082,0.032893,0.416003,0.711379,-0.313254,-0.644368,-0.697612,0.507728,0.348925,-0.013854,0.414656,0.714600,-0.075202,-0.726630,-0.682901,0.496800,0.348937,0.026496,0.415887,0.713594,-0.130234,-0.693466,-0.708622,0.506175,0.349113,0.020271,0.415395,0.714487,0.022819,-0.716200,-0.697522,0.504690,0.349082,0.013922,0.414642,0.714632,0.075286,-0.727089,-0.682403,0.503197,0.348937,-0.098686,0.399609,0.465844,0.750840,-0.386807,0.535368,0.478479,0.344274,-0.104803,0.420225,0.492754,0.943927,-0.274195,0.183900,0.475998,0.343347,-0.098744,0.430465,0.488355,0.815137,-0.474715,0.331960,0.478478,0.344278,-0.090683,0.404695,0.461595,0.570973,-0.472495,0.671370,0.480920,0.345224,-0.090748,0.438858,0.485685,0.662362,-0.611981,0.432152,0.480919,0.345228,-0.081328,0.408902,0.458390,0.446678,-0.506281,0.737671,0.483040,0.346054,-0.081393,0.445715,0.483660,0.538081,-0.688080,0.486842,0.483040,0.346058,0.098628,0.399624,0.465815,-0.751318,-0.386573,0.534866,0.521511,0.344274,0.104715,0.420310,0.492740,-0.943943,-0.274215,0.183790,0.523992,0.343347,0.098684,0.430491,0.488336,-0.815091,-0.474941,0.331750,0.521512,0.344278,-0.071031,0.412409,0.455599,0.368615,-0.519360,0.770966,0.485250,0.346805,-0.071091,0.451449,0.481891,0.449697,-0.728612,0.516620,0.485250,0.346810,0.090674,0.404658,0.461560,-0.571220,-0.472725,0.670998,0.519080,0.345224,0.090737,0.438800,0.485662,-0.661943,-0.612563,0.431970,0.519081,0.345228,-0.060365,0.415343,0.453122,0.310831,-0.526651,0.791216,0.487890,0.347545,-0.060416,0.456248,0.480324,0.377798,-0.755069,0.535854,0.487889,0.347551,0.081415,0.445615,0.483637,-0.537866,-0.688463,0.486538,0.516950,0.346058,0.081351,0.408840,0.458355,-0.446778,-0.506744,0.737292,0.516950,0.346054,-0.050108,0.417549,0.451019,0.243558,-0.535743,0.808492,0.490399,0.348156,-0.050154,0.459849,0.478996,0.283681,-0.783240,0.553227,0.490399,0.348161,0.071127,0.451343,0.481872,-0.449901,-0.728756,0.516240,0.514740,0.346810,0.071067,0.412344,0.455569,-0.368744,-0.519842,0.770579,0.514740,0.346805,-0.040776,0.418692,0.449395,0.142445,-0.548550,0.823894,0.492299,0.348556,-0.040823,0.461716,0.477971,0.132398,-0.811894,0.568595,0.492299,0.348562,0.060457,0.456149,0.480309,-0.378310,-0.755089,0.535465,0.512101,0.347551,0.060406,0.415283,0.453098,-0.311051,-0.527073,0.790848,0.512100,0.347545,-0.032364,0.461608,0.477281,-0.053764,-0.819299,0.570840,0.493849,0.348742,-0.032315,0.418619,0.448304,0.016523,-0.559675,0.828547,0.493849,0.348736,0.050197,0.459761,0.478983,-0.284221,-0.783285,0.552886,0.509591,0.348161,0.050152,0.417495,0.450999,-0.243810,-0.536117,0.808168,0.509591,0.348156,-0.024366,0.459859,0.476894,-0.193102,-0.806385,0.558977,0.495339,0.348712,-0.024320,0.417534,0.447694,-0.086467,-0.566083,0.819801,0.495339,0.348706,0.040873,0.461631,0.477959,-0.132553,-0.812057,0.568324,0.507691,0.348562,0.040826,0.418640,0.449377,-0.142532,-0.548926,0.823629,0.507691,0.348556,-0.016413,0.457315,0.476719,-0.226294,-0.804592,0.549020,0.496839,0.348582,-0.016377,0.415957,0.447422,-0.122252,-0.573297,0.810176,0.496839,0.348576,0.032422,0.461522,0.477270,0.053876,-0.819476,0.570576,0.506141,0.348742,0.032373,0.418566,0.448286,-0.016430,-0.560054,0.828293,0.506141,0.348736,-0.008279,0.455103,0.476659,-0.150330,-0.822425,0.548651,0.498399,0.348470,-0.008259,0.414586,0.447331,-0.084642,-0.583032,0.808028,0.498400,0.348465,0.024428,0.459773,0.476882,0.192921,-0.806602,0.558726,0.504651,0.348712,0.024382,0.417480,0.447676,0.086474,-0.566452,0.819545,0.504651,0.348706,0.000030,0.454213,0.476643,-0.002292,-0.834742,0.550637,0.500000,0.348419,0.000030,0.414034,0.447310,-0.001073,-0.588064,0.808814,0.500000,0.348415,0.016477,0.457237,0.476709,0.224924,-0.805062,0.548894,0.503161,0.348582,0.016441,0.415908,0.447407,0.121663,-0.573660,0.810007,0.503161,0.348576,0.008321,0.414554,0.447321,0.083045,-0.583310,0.807993,0.501590,0.348465,0.008341,0.455052,0.476653,0.146917,-0.823019,0.548686,0.501591,0.348470,0.108014,0.409965,0.502396,-0.990343,-0.118345,0.072211,0.526342,0.342505,-0.019557,0.413218,0.713776,0.134073,0.811769,-0.568380,0.495467,0.348307,-0.025699,0.413755,0.712937,0.169759,0.802761,-0.571627,0.493993,0.348345,-0.013360,0.412486,0.714070,0.111619,0.816242,-0.566824,0.496933,0.348177,0.025759,0.413741,0.712971,-0.169602,0.802841,-0.571561,0.505997,0.348345,0.019598,0.413202,0.713817,-0.134511,0.811751,-0.568302,0.504523,0.348307,0.013427,0.412468,0.714110,-0.111777,0.816291,-0.566723,0.503065,0.348177,-0.058557,0.411824,0.696279,0.324462,0.708364,-0.626853,0.485343,0.346485,-0.048619,0.412684,0.701940,0.261140,0.748238,-0.609874,0.487980,0.347197,-0.039503,0.413528,0.706812,0.258611,0.763397,-0.591900,0.490490,0.347793,0.058592,0.411804,0.696337,-0.324680,0.708377,-0.626726,0.514647,0.346485,0.048669,0.412658,0.702000,-0.259298,0.748890,-0.609859,0.512010,0.347197,0.039521,0.413520,0.706837,-0.257975,0.763635,-0.591870,0.509500,0.347793,-0.006835,0.411820,0.714291,0.055962,0.821583,-0.567336,0.498450,0.348063,0.000015,0.411574,0.714050,0.002626,0.823514,-0.567291,0.500000,0.348010,0.006892,0.411801,0.714330,-0.053256,0.821788,-0.567299,0.501540,0.348063,-0.087589,0.407391,0.668604,0.747843,0.303393,-0.590495,0.476005,0.343203,-0.082109,0.408877,0.675796,0.636521,0.438686,-0.634347,0.478473,0.344110,-0.074954,0.410154,0.683328,0.532368,0.547996,-0.645201,0.480935,0.345015,-0.067284,0.411046,0.690200,0.429893,0.637345,-0.639518,0.483103,0.345787,0.087431,0.407451,0.668591,-0.739324,0.314367,-0.595460,0.523988,0.343203,0.082024,0.408894,0.675831,-0.654676,0.422675,-0.626694,0.521518,0.344110,0.075044,0.410094,0.683488,-0.538899,0.544078,-0.643091,0.519063,0.345015,0.067304,0.411032,0.690278,-0.422790,0.641429,-0.640170,0.516888,0.345787,-0.032194,0.413879,0.710857,0.234228,0.781256,-0.578598,0.492417,0.348177,0.032238,0.413861,0.710900,-0.235538,0.780922,-0.578517,0.507573,0.348177,-0.091586,0.406076,0.662348,0.461269,0.493197,-0.737555,0.473693,0.342390,-0.092671,0.406048,0.661036,0.029715,0.648684,-0.760478,0.473123,0.342328,-0.094546,0.404784,0.661130,0.029715,0.648684,-0.760478,0.473149,0.342336,0.109883,0.389485,0.574128,-0.999947,0.007252,-0.007293,0.526473,0.342459,0.108828,0.414568,0.574938,-0.991530,-0.129834,-0.003304,0.526356,0.342547,-0.092671,0.406048,0.661036,0.695163,-0.333076,-0.637032,0.473123,0.342328,0.105053,0.434017,0.574046,-0.945525,-0.325549,0.000693,0.524009,0.343404,-0.105145,0.433916,0.574039,0.945680,-0.325099,0.000759,0.475982,0.343404,-0.098954,0.448136,0.574008,0.844966,-0.534750,0.008598,0.478466,0.344337,-0.090910,0.458652,0.574684,0.711988,-0.702054,0.013927,0.480912,0.345286,-0.081543,0.466943,0.575524,0.590479,-0.806900,0.015742,0.483039,0.346123,0.098889,0.448173,0.574013,-0.844618,-0.535301,0.008604,0.521524,0.344337,-0.071213,0.473820,0.576320,0.496616,-0.867831,0.015583,0.485249,0.346883,0.090901,0.458584,0.574696,-0.711158,-0.702893,0.014040,0.519088,0.345286,-0.060474,0.479580,0.577057,0.417732,-0.908440,0.015394,0.487885,0.347632,0.081565,0.466827,0.575534,-0.589982,-0.807261,0.015841,0.516951,0.346123,-0.050170,0.483917,0.577693,0.306673,-0.951675,0.016291,0.490390,0.348249,0.071249,0.473695,0.576329,-0.496837,-0.867703,0.015657,0.514741,0.346883,-0.040851,0.486160,0.578190,0.116890,-0.992985,0.017851,0.492290,0.348653,0.060515,0.479461,0.577064,-0.418449,-0.908109,0.015452,0.512105,0.347632,-0.032416,0.486035,0.578508,-0.115839,-0.993088,0.018920,0.493840,0.348835,0.050213,0.483812,0.577698,-0.307427,-0.951431,0.016350,0.509600,0.348249,-0.024430,0.483952,0.578670,-0.279998,-0.959807,0.019257,0.495330,0.348805,0.040901,0.486060,0.578195,-0.117084,-0.992960,0.017921,0.507700,0.348653,-0.016472,0.480915,0.578734,-0.308764,-0.950936,0.019638,0.496829,0.348671,0.032475,0.485933,0.578513,0.115935,-0.993075,0.018991,0.506150,0.348835,-0.008316,0.478269,0.578754,-0.202749,-0.979018,0.020406,0.498394,0.348550,0.024492,0.483851,0.578674,0.279676,-0.959900,0.019330,0.504661,0.348805,0.000030,0.477205,0.578746,-0.003285,-0.999777,0.020881,0.500000,0.348492,0.016537,0.480823,0.578737,0.306898,-0.951538,0.019708,0.503170,0.348671,0.008379,0.478208,0.578758,0.197956,-0.979998,0.020452,0.501597,0.348550,0.108699,0.394780,0.623429,-0.976176,0.028083,-0.215156,0.526604,0.342415,0.107574,0.413218,0.623743,-0.967037,-0.148550,-0.206813,0.526371,0.342588,0.103546,0.428992,0.626208,-0.920021,-0.301440,-0.250389,0.524026,0.343460,-0.103652,0.428896,0.626184,0.920792,-0.299571,-0.249800,0.475965,0.343460,-0.097429,0.440508,0.629917,0.829337,-0.469740,-0.302564,0.478453,0.344396,-0.089427,0.449075,0.634111,0.711650,-0.609378,-0.349589,0.480905,0.345344,-0.080223,0.455750,0.638092,0.598096,-0.702803,-0.385161,0.483037,0.346187,0.097348,0.440552,0.629944,-0.830611,-0.467921,-0.301887,0.521537,0.344396,-0.070007,0.461263,0.641709,0.507681,-0.757921,-0.409654,0.485249,0.346956,0.089428,0.449015,0.634170,-0.712425,-0.608944,-0.348766,0.519094,0.345344,-0.059241,0.465949,0.645045,0.441779,-0.790260,-0.424642,0.487880,0.347713,0.080247,0.455657,0.638141,-0.597109,-0.703838,-0.384803,0.516953,0.346187,-0.048996,0.469550,0.647914,0.356177,-0.826305,-0.436301,0.490382,0.348336,0.070043,0.461164,0.641748,-0.507654,-0.758226,-0.409123,0.514741,0.346956,-0.039925,0.471394,0.650150,0.190315,-0.873640,-0.447809,0.492281,0.348743,0.059286,0.465851,0.645078,-0.441905,-0.790448,-0.424161,0.512110,0.347713
-			],
-			"parts" : [
-				{
-					"id" : "part0",
-					"type" : "TRIANGLES",
-					"indices" : [
-						0,1,2,3,1,0,4,5,3,4,3,0,0,6,4,6,0,2,4,7,8,7,4,6,5,4,9,4,8,9,10,8,7,8,10,9,11,12,13,14,13,12,15,14,16,14,12,16,17,12,11,12,17,16,18,19,20,18,20,21,14,15,21,14,21,20,20,19,14,19,13,14,22,23,24,24,25,22,22,26,23,26,22,27,22,25,27,25,28,27,29,30,31,30,29,32,30,33,31,33,30,34,30,35,34,35,30,32,36,37,38,37,39,38,40,41,36,42,36,41,43,40,44,40,43,41,45,46,47,46,48,47,49,45,47,49,50,45,49,51,52,53,52,51,54,55,56,57,55,54,54,58,57,59,57,58,24,54,56,54,24,58,60,61,35,62,35,61,63,64,62,62,61,63,65,61,60,61,65,63,66,67,68,67,69,68,66,70,71,70,66,68,72,68,69,68,72,70,73,74,75,74,73,76,77,75,74,75,77,78,74,79,77,79,74,76,80,81,82,81,80,83,80,84,83,83,84,85,86,80,82,80,86,84,87,88,89,87,89,90,91,90,89,90,91,92,93,89,88,89,93,91,94,95,96,95,94,97,94,98,97,98,94,99,94,100,99,100,94,96,101,102,103,103,104,101,105,101,106,101,105,102,107,101,104,101,107,106,108,109,110,109,108,111,112,110,109,110,112,113,114,109,111,109,114,112,115,116,117,116,115,118,119,117,116,117,119,120,116,121,119,121,116,118,122,123,124,123,125,124,124,126,122,126,127,122,128,124,125,124,128,126,129,130,131,130,129,132,130,133,131,134,131,133,135,130,132,130,135,133,136,137,138,137,136,139,140,138,137,138,140,141,142,137,139,137,142,140,143,144,145,144,143,146,147,145,144,145,147,148,144,149,147,149,144,146,150,151,152,153,151,150,154,153,155,153,150,155,150,156,155,156,150,152,157,158,159,158,160,159,161,162,157,157,159,161,163,159,160,159,163,161,164,165,166,165,164,167,167,164,168,167,168,169,164,166,168,168,166,170,171,172,173,172,171,174,175,171,173,171,175,176,177,173,172,173,177,175,178,179,180,179,178,181,180,182,178,182,180,183,184,183,180,183,184,185,186,180,179,180,186,184,187,188,189,188,187,190,191,189,192,189,191,187,192,183,185,183,192,189,189,182,183,182,189,188,193,194,186,193,186,195,194,196,197,196,194,193,196,198,199,198,196,193,193,200,198,200,193,195,179,181,201,181,202,201,186,179,195,195,179,201,195,203,200,203,195,201,201,204,203,204,201,202,205,191,206,191,205,207,208,205,209,205,208,207,209,210,211,210,209,205,206,210,205,210,206,212,213,190,187,190,213,214,213,215,214,215,213,216,207,216,213,216,207,208,207,187,191,187,207,213,217,218,219,218,217,220,220,199,218,199,220,196,221,197,220,220,197,196,222,221,217,217,221,220,223,224,225,224,223,226,227,223,228,223,225,228,228,225,212,225,210,212,211,225,224,225,211,210,198,229,230,229,198,200,199,230,231,230,199,198,230,232,231,232,230,233,230,234,233,234,230,229,229,200,235,200,203,235,234,229,236,229,235,236,237,238,235,236,235,238,235,203,237,203,204,237,239,209,240,209,239,208,241,240,242,240,241,239,240,243,242,243,240,244,240,211,244,211,240,209,239,245,208,216,208,245,245,246,216,215,216,246,246,245,247,245,248,247,241,248,239,239,248,245,249,250,251,250,252,251,251,231,249,249,231,232,218,199,251,251,199,231,219,251,252,251,219,218,253,254,255,255,254,256,254,226,256,226,254,224,254,244,211,254,211,224,253,243,244,253,244,254,257,258,259,258,257,260,261,259,262,259,261,257,262,263,222,263,262,259,259,264,263,264,259,258,265,266,267,266,265,268,268,219,266,219,268,217,262,222,268,268,222,217,261,262,265,265,262,268,269,258,260,258,269,270,270,264,258,264,270,271,272,271,270,271,272,227,273,270,269,270,273,272,274,275,276,275,274,277,273,274,272,274,276,272,272,276,227,276,223,227,276,226,223,226,276,275,257,278,279,278,257,261,279,260,257,260,279,280,281,280,279,280,281,282,279,283,281,283,279,278,265,284,285,284,265,267,261,285,278,285,261,265,278,286,283,286,278,285,286,285,284,286,284,287,288,289,290,289,288,291,292,290,293,290,292,288,281,293,290,293,281,283,290,282,281,282,290,289,294,295,296,296,295,297,295,286,297,297,286,287,293,283,295,295,283,286,292,293,294,294,293,295,298,269,299,269,298,273,300,299,301,299,300,298,301,280,282,280,301,299,299,260,280,260,299,269,302,274,303,274,302,277,304,302,303,302,304,305,304,298,300,298,304,303,303,273,298,273,303,274,306,289,291,289,306,307,307,282,289,282,307,301,308,301,307,301,308,300,309,307,306,307,309,308,310,311,312,312,313,310,308,309,311,311,310,308,300,308,310,310,304,300,304,310,313,313,305,304,314,315,316,314,316,317,252,250,317,317,316,252,252,316,219,316,266,219,267,266,315,315,266,316,318,284,267,284,318,319,319,287,284,287,319,320,320,321,322,321,320,319,323,319,318,319,323,321,315,318,267,318,315,324,324,323,318,323,324,325,326,325,324,325,326,327,314,324,315,324,314,326,328,329,330,330,329,331,331,329,275,331,275,277,256,226,329,329,226,275,255,256,328,328,256,329,302,332,277,332,302,333,333,334,332,334,333,335,336,335,333,335,336,337,305,333,302,333,305,336,331,332,338,332,331,277,330,338,339,338,330,331,339,340,341,340,339,338,338,334,340,334,338,332,321,323,342,323,343,342,322,321,344,321,342,344,344,342,345,342,346,345,347,342,343,342,347,346,325,343,323,343,325,348,349,343,348,343,349,347,350,349,348,349,350,351,350,325,327,325,350,348,335,352,334,334,352,353,352,354,353,354,352,355,356,357,352,352,357,355,337,356,335,335,356,352,340,353,358,353,340,334,359,341,340,340,358,359,360,359,358,359,360,361,360,358,353,353,354,360,297,362,296,362,297,363,363,364,362,364,363,365,320,365,363,365,320,322,287,363,297,363,287,320,365,366,364,366,365,367,367,368,366,368,367,369,344,369,367,369,344,345,322,367,365,367,322,344,313,370,371,370,313,312,305,371,336,371,305,313,336,372,337,372,336,371,371,373,372,373,371,370,372,374,375,374,372,373,337,375,356,375,337,372,356,376,357,376,356,375,375,377,376,377,375,374,378,233,379,233,378,232,380,379,381,379,380,378,379,382,381,382,379,383,233,383,379,383,233,234,383,234,384,234,236,384,383,385,382,385,383,384,385,386,387,386,385,384,384,236,386,236,238,386,242,388,389,388,242,243,242,390,241,390,242,389,389,391,390,391,389,392,389,393,392,393,389,388,394,241,390,241,394,248,394,395,248,248,395,247,396,394,397,394,396,395,390,397,394,397,390,391,398,399,400,400,401,398,380,399,378,399,398,378,378,398,232,398,249,232,398,401,249,401,250,249,402,403,404,403,402,405,400,404,401,404,400,402,401,317,250,317,401,404,404,314,317,314,404,403,406,407,408,408,407,409,407,253,409,409,253,255,388,243,407,407,243,253,388,406,393,406,388,407,410,411,412,411,410,413,330,412,328,412,330,410,409,328,412,328,409,255,408,412,411,412,408,409,414,403,405,403,414,415,415,326,403,314,403,326,416,327,415,326,415,327,415,417,416,417,415,414,418,410,419,410,418,413,420,419,421,419,420,418,419,339,341,419,341,421,410,330,339,410,339,419,380,422,423,422,380,381,423,424,425,424,423,422,426,422,427,422,426,424,427,381,382,381,427,422,428,382,385,382,428,427,429,427,428,427,429,426,429,430,431,430,429,428,428,387,430,387,428,385,393,432,392,432,393,433,434,391,392,434,392,432,435,434,432,435,432,436,433,436,432,436,433,437,438,397,391,391,434,438,438,396,397,396,438,439,439,440,441,440,439,438,440,438,434,434,435,440,442,443,444,444,445,442,423,425,443,443,442,423,380,423,442,442,399,380,399,442,445,445,400,399,446,447,448,447,446,449,406,447,449,447,406,408,393,449,433,449,393,406,433,446,437,446,433,449,445,402,400,402,445,450,405,450,451,450,405,402,451,452,453,452,451,450,452,445,444,445,452,450,414,454,417,454,414,455,455,456,454,456,455,457,451,453,455,457,455,453,455,405,451,405,455,414,447,411,458,411,447,408,459,448,447,459,447,458,459,460,461,460,459,458,458,413,460,413,458,411,462,418,420,418,462,463,463,413,418,413,463,460,461,463,464,463,461,460,465,463,462,463,465,464,466,467,468,467,466,469,470,467,469,467,470,471,472,470,469,470,472,473,474,469,466,469,474,472,475,476,477,476,475,478,479,477,480,477,479,475,480,470,473,470,480,477,470,477,476,470,476,471,467,481,482,481,467,471,468,482,483,482,468,467,483,484,485,484,483,482,482,486,484,486,482,481,476,481,471,481,476,487,487,486,481,486,487,488,488,489,490,489,488,487,478,487,476,487,478,489,491,474,492,474,466,492,493,491,494,491,492,494,494,495,496,495,494,492,492,468,495,468,492,466,497,498,499,497,500,498,1,497,501,497,1,500,495,501,497,501,495,468,496,497,499,497,496,495,501,483,502,483,501,468,1,502,2,502,1,501,2,503,6,503,2,502,502,485,503,485,502,483,504,479,505,479,504,475,504,478,475,478,504,506,507,506,504,506,507,508,507,505,509,505,507,504,510,511,512,510,513,511,508,510,506,510,508,513,506,514,478,514,506,510,510,17,514,17,510,512,489,514,515,514,489,478,490,515,516,515,490,489,516,11,13,11,516,515,17,515,514,515,17,11,178,517,518,517,178,182,518,181,178,181,518,519,519,472,474,472,519,518,518,473,472,473,518,517,202,520,204,520,202,521,521,491,520,520,491,493,519,474,521,521,474,491,181,519,202,202,519,521,188,517,182,517,188,522,522,473,517,473,522,480,523,480,522,480,523,479,190,522,188,522,190,523,214,524,525,524,214,215,523,190,214,214,525,523,523,525,479,525,505,479,505,525,524,524,509,505,237,526,238,526,237,527,527,528,526,528,527,529,520,529,527,529,520,493,204,527,237,527,204,520,386,530,387,387,530,531,530,532,531,531,532,533,526,532,530,532,526,528,238,530,386,530,238,526,246,534,535,534,246,247,215,535,524,535,215,246,524,536,509,536,524,535,535,537,536,537,535,534,396,538,539,396,539,395,247,539,534,539,247,395,534,540,537,540,534,539,540,539,538,538,541,540,542,493,494,493,542,529,542,543,529,529,543,528,543,544,545,544,543,542,542,496,544,496,542,494,507,509,546,509,536,546,508,546,547,546,508,507,547,548,549,548,547,546,546,536,548,536,537,548,550,551,552,552,551,553,551,554,553,553,554,555,556,551,557,551,556,554,551,533,557,533,551,550,430,531,558,531,430,387,431,558,559,558,431,430,552,559,558,558,550,552,558,533,550,533,558,531,560,559,561,559,560,431,562,561,563,561,562,560,563,564,565,564,563,561,561,552,564,552,561,559,564,553,566,553,564,552,565,566,567,566,565,564,567,568,569,568,567,566,566,555,568,555,566,553,570,571,572,571,573,572,541,572,574,572,541,570,575,574,572,575,572,576,572,573,576,573,577,576,439,538,396,538,439,578,578,541,538,541,578,570,571,578,579,578,571,570,441,578,439,578,441,579,579,580,581,580,579,441,581,571,579,571,581,582,582,583,584,583,582,581,581,585,583,585,581,580,582,573,571,573,582,586,577,586,587,586,577,573,587,588,589,588,587,586,586,584,588,584,586,582,431,590,591,590,431,560,592,591,590,591,592,593,594,590,595,590,594,592,595,560,562,595,590,560,429,596,426,426,596,597,596,598,597,597,598,599,593,596,591,596,593,598,591,429,431,429,591,596,441,600,580,600,441,601,602,580,600,602,585,580,603,602,600,600,604,603,604,600,601,601,605,604,606,440,435,435,607,606,601,441,440,440,606,601,605,601,606,606,608,605,608,606,607,607,609,608,610,533,532,533,610,557,556,610,611,610,556,557,611,543,545,543,611,610,528,610,532,610,528,543,540,541,612,541,574,612,537,612,548,612,537,540,548,613,549,613,548,612,612,575,613,575,612,574,544,499,614,499,544,496,545,614,615,614,545,544,615,616,617,616,615,614,614,498,616,498,614,499,611,615,618,615,611,545,618,556,611,556,618,619,619,620,621,620,619,618,618,617,620,617,618,615,513,547,622,547,513,508,511,622,623,622,511,513,623,624,625,624,623,622,622,549,624,549,622,547,624,613,626,613,624,549,625,626,627,626,625,624,627,628,629,628,627,626,626,575,628,575,626,613,619,554,556,554,619,630,630,555,554,555,630,631,632,631,630,631,632,633,621,630,619,630,621,632,576,628,575,628,576,634,634,629,628,629,634,635,636,635,634,635,636,637,577,634,576,634,577,636,638,639,640,639,638,641,633,638,640,640,631,633,631,568,555,568,631,640,569,640,639,640,569,568,642,643,644,643,642,645,644,589,642,589,644,587,636,587,644,587,636,577,637,644,643,644,637,636,484,646,647,646,484,486,485,647,648,647,485,484,648,649,650,649,648,647,647,651,649,651,647,646,503,648,652,648,503,485,6,652,7,652,6,503,7,653,10,653,7,652,652,650,653,650,652,648,488,646,486,646,488,654,654,651,646,651,654,655,656,655,654,655,656,657,490,654,488,654,490,656,656,516,658,516,656,490,657,658,659,658,657,656,659,19,18,19,659,658,658,13,19,13,658,516,660,3,5,3,660,661,1,661,500,661,1,3,500,616,498,616,500,661,617,661,660,661,617,616,662,16,663,16,662,15,663,625,662,625,663,623,512,623,663,623,512,511,17,663,16,663,17,512,620,660,664,660,620,617,621,664,632,664,621,620,633,632,664,633,664,665,665,660,5,660,665,664,662,627,666,627,662,625,667,15,662,667,662,666,637,666,635,666,637,667,666,629,635,629,666,627,668,669,670,669,668,671,671,672,669,672,671,673,653,673,671,673,653,650,10,671,668,671,10,653,673,674,672,674,673,675,675,676,674,676,675,677,649,677,675,677,649,651,650,675,673,675,650,649,678,679,680,679,678,681,681,18,679,18,681,659,682,659,681,659,682,657,683,681,678,681,683,682,682,684,685,684,682,683,657,685,655,685,657,682,655,677,651,677,655,685,685,676,677,676,685,684,10,686,687,686,10,668,686,641,687,641,686,688,689,688,686,688,689,690,668,689,686,689,668,670,18,691,692,18,692,679,679,692,693,679,693,680,694,693,692,693,694,695,692,645,694,645,692,691,669,696,697,696,669,672,670,697,698,697,670,669,699,700,697,697,700,698,701,699,696,696,699,697,702,701,696,701,702,703,702,704,703,704,702,705,674,705,702,705,674,676,672,702,696,702,672,674,706,678,707,678,706,683,708,706,709,706,707,709,709,707,710,707,711,710,707,680,711,680,707,678,712,706,708,712,708,713,683,712,684,712,683,706,684,705,676,705,684,712,712,704,705,704,712,713,714,715,716,715,714,717,698,700,714,698,714,716,698,689,670,689,698,716,716,690,689,690,716,715,718,719,720,719,718,721,695,721,693,721,695,719,693,711,680,711,693,721,711,718,710,718,711,721,699,722,700,722,699,723,723,724,722,724,723,725,726,725,723,725,726,727,701,723,699,723,701,726,722,728,729,728,722,724,700,729,714,729,700,722,714,730,717,730,714,729,729,731,730,731,729,728,709,732,733,732,709,710,708,733,734,733,708,709,734,735,736,735,734,733,733,737,735,737,733,732,732,738,737,738,732,739,739,740,738,740,739,741,718,741,739,741,718,720,710,739,732,739,710,718,742,743,744,743,742,745,704,744,703,744,704,742,703,726,701,726,703,744,744,727,726,727,744,743,742,746,745,746,742,747,747,736,746,736,747,734,713,734,747,734,713,708,704,747,742,747,704,713,748,563,749,563,748,562,717,749,715,749,717,748,715,750,690,750,715,749,749,565,750,565,749,563,639,688,751,688,639,641,751,569,639,569,751,567,750,567,751,567,750,565,690,751,688,751,690,750,583,752,753,752,583,585,584,753,754,753,584,583,754,719,695,719,754,753,753,720,719,720,753,752,642,694,645,694,642,755,755,695,694,695,755,754,588,754,755,754,588,584,755,589,588,589,755,642,756,595,757,595,756,594,731,757,730,757,731,756,730,748,717,748,730,757,757,562,748,562,757,595,602,758,759,758,602,603,585,759,752,759,585,602,741,752,759,752,741,720,759,740,741,740,759,758,457,760,761,760,457,453,762,456,457,762,457,761,763,762,761,761,764,763,761,765,764,765,761,760,452,766,767,766,452,444,453,767,760,767,453,452,760,768,765,768,760,767,767,769,768,769,767,766,464,770,461,770,464,771,771,772,770,772,771,773,774,771,775,771,774,773,775,464,465,464,775,771,776,459,777,459,776,448,777,778,776,778,777,779,770,779,777,779,770,772,777,461,770,461,777,459,780,781,782,781,780,783,780,764,765,764,780,782,764,784,763,784,764,782,782,785,784,785,782,781,786,787,788,787,786,789,769,788,768,788,769,786,768,780,765,780,768,788,788,783,780,783,788,787,790,791,792,791,790,793,793,794,791,794,793,795,795,773,774,773,795,793,790,773,793,773,790,772,796,797,798,797,796,799,799,792,797,792,799,790,799,772,790,772,799,779,778,799,796,799,778,779,800,801,802,801,800,803,783,803,781,803,783,801,781,804,785,804,781,803,805,803,800,803,805,804,806,807,808,807,806,809,789,809,787,809,789,807,801,787,809,787,801,783,802,809,806,809,802,801,810,811,812,811,810,813,813,814,811,814,813,815,791,815,813,815,791,794,792,813,810,813,792,791,816,817,818,817,816,819,819,812,817,812,819,810,797,810,819,810,797,792,798,819,816,819,798,797,820,821,822,821,820,823,823,802,821,802,823,800,824,800,823,800,824,805,825,823,820,823,825,824,826,827,828,827,826,829,829,808,827,808,829,806,821,806,829,806,821,802,822,829,826,829,822,821,830,831,832,831,830,833,833,834,831,834,833,835,811,835,833,835,811,814,812,833,830,833,812,811,836,837,838,837,836,839,839,832,837,832,839,830,817,830,839,830,817,812,818,839,836,839,818,817,840,841,842,841,840,843,843,822,841,822,843,820,844,820,843,820,844,825,845,843,840,843,845,844,846,847,848,847,846,849,846,828,849,828,846,826,841,826,846,826,841,822,842,846,848,846,842,841,850,851,852,851,850,853,854,852,855,852,854,850,855,831,834,831,855,852,852,832,831,832,852,851,856,857,858,857,856,859,853,858,851,858,853,856,851,837,832,837,851,858,858,838,837,838,858,857,860,861,862,861,860,863,840,862,861,862,840,842,861,845,840,845,861,864,863,864,861,864,863,865,848,866,867,866,848,847,842,867,862,867,842,848,862,868,860,868,862,867,867,869,868,869,867,866,870,871,872,871,870,873,872,874,875,874,872,871,871,854,874,854,871,850,850,871,873,850,873,853,876,856,877,856,876,859,877,878,876,878,877,879,873,879,877,879,873,870,853,877,856,877,853,873,863,880,881,880,863,860,865,881,882,881,865,863,883,882,881,882,883,884,885,881,880,881,885,883,868,886,887,886,868,869,860,887,880,887,860,868,888,880,887,880,888,885,887,889,888,889,887,886,872,890,870,890,872,891,891,892,890,892,891,893,894,893,891,893,894,895,875,891,872,891,875,894,879,896,878,896,879,897,897,898,896,898,897,899,890,899,897,899,890,892,870,897,879,897,870,890,900,901,902,901,900,903,904,902,905,902,904,900,905,883,885,883,905,902,902,884,883,884,902,901,906,888,889,888,906,907,907,885,888,885,907,905,908,905,907,905,908,904,909,907,906,907,909,908,910,911,912,911,910,913,895,912,893,912,895,910,893,914,892,914,893,912,912,915,914,915,912,911,899,916,898,916,899,917,918,917,919,917,918,916,914,919,917,919,914,915,892,917,899,917,892,914,920,900,904,900,920,921,921,903,900,903,921,922,923,922,921,922,923,924,925,921,920,921,925,923,926,908,909,908,926,927,927,904,908,904,927,920,928,920,927,920,928,925,929,927,926,927,929,928,911,930,915,930,911,931,932,931,933,931,932,930,933,934,935,934,933,931,931,913,934,913,931,911,936,919,937,919,936,918,938,937,939,937,938,936,939,930,932,930,939,937,937,915,930,915,937,919,940,923,925,923,940,941,941,924,923,924,941,942,943,942,941,942,943,944,945,941,940,941,945,943,946,928,929,928,946,947,947,925,928,925,947,940,948,940,947,940,948,945,949,947,946,947,949,948,933,950,932,950,933,951,951,952,950,952,951,953,954,953,951,953,954,955,935,951,933,951,935,954,956,939,957,939,956,938,958,957,959,957,958,956,959,950,952,950,959,957,957,932,950,932,957,939,960,943,945,943,960,961,961,944,943,944,961,962,963,962,961,962,963,964,965,961,960,961,965,963,966,948,949,948,966,967,967,945,948,945,967,960,968,960,967,960,968,965,969,967,966,967,969,968,953,970,952,970,953,971,971,972,970,972,971,973,974,973,971,973,974,975,955,971,953,971,955,974,976,959,977,959,976,958,978,977,979,977,978,976,979,970,972,970,979,977,977,952,970,952,977,959,980,963,965,963,980,981,981,964,963,964,981,982,983,982,981,982,983,984,985,981,980,981,985,983,986,987,988,987,986,989,989,969,987,969,989,968,980,968,989,968,980,965,985,989,986,989,985,980,973,990,972,990,973,991,992,991,993,991,992,990,993,994,995,994,993,991,975,991,973,991,975,994,996,997,998,997,996,999,998,992,996,992,998,990,998,979,972,998,972,990,978,998,997,998,978,979,1000,1001,1002,1001,1000,1003,1004,1002,1005,1002,1004,1000,362,1005,1002,1005,362,364,1002,296,362,296,1002,1001,1006,1005,1007,1005,1006,1004,1008,1007,1009,1007,1008,1006,1009,366,368,366,1009,1007,364,1007,1005,1007,364,366,1010,983,985,983,1010,1011,1011,984,983,984,1011,1012,1000,1012,1011,1012,1000,1004,1011,1003,1000,1003,1011,1010,1013,984,1012,984,1013,1014,1015,1014,1013,1014,1015,1016,1008,1013,1006,1013,1008,1015,1004,1013,1012,1013,1004,1006,1017,1018,1019,1018,1017,1020,1019,312,1017,312,1019,370,1021,370,1019,370,1021,373,1019,1022,1021,1022,1019,1018,1021,1023,1024,1023,1021,1022,1024,373,1021,373,1024,374,374,1025,377,1025,374,1024,1024,1026,1025,1026,1024,1023,1027,993,1028,993,1027,992,1020,1028,1018,1028,1020,1027,1018,1029,1022,1029,1018,1028,1028,995,1029,995,1028,993,1029,995,1030,995,1031,1030,1022,1030,1023,1030,1022,1029,1026,1023,1030,1026,1030,1032,1032,1030,1031,1031,1033,1032,1010,986,1034,986,1010,985,1003,1034,1035,1034,1003,1010,1036,1035,1034,1035,1036,1037,988,1034,986,1034,988,1036,1038,294,1039,294,1038,292,1037,1039,1035,1039,1037,1038,1035,1001,1003,1001,1035,1039,1001,1039,294,1001,294,296,1027,996,992,996,1027,1040,1040,999,996,999,1040,1041,1042,1041,1040,1041,1042,1043,1020,1040,1027,1040,1020,1042,1044,311,309,311,1044,1045,1017,311,1045,311,1017,312,1017,1042,1020,1042,1017,1045,1045,1043,1042,1043,1045,1044,1014,982,984,982,1014,1046,964,1046,1047,1046,964,982,1048,1047,1046,1047,1048,1049,1016,1046,1014,1046,1016,1048,994,1031,995,1031,994,1050,1050,1033,1031,1033,1050,1051,1052,1051,1050,1051,1052,1053,975,1050,994,1050,975,1052,1047,1054,964,962,964,1054,1054,1055,962,944,962,1055,1056,1057,1054,1055,1054,1057,1049,1056,1047,1054,1047,1056,975,974,1058,975,1058,1052,1052,1058,1059,1052,1059,1053,1058,1060,1061,1058,1061,1059,974,955,1060,974,1060,1058,942,1062,924,1062,942,1063,1063,1064,1062,1064,1063,1065,1055,1065,1063,1065,1055,1057,944,1063,942,1063,944,1055,1066,954,935,954,1066,1067,1067,955,954,955,1067,1060,1068,1060,1067,1060,1068,1061,1069,1067,1066,1067,1069,1068,1070,903,922,903,1070,1071,1072,1070,1073,1070,1072,1071,1062,1073,1070,1073,1062,1064,924,1070,922,1070,924,1062,934,913,1074,913,1075,1074,1074,935,934,935,1074,1066,1076,1066,1074,1066,1076,1069,1077,1074,1075,1074,1077,1076,901,1078,884,1078,901,1079,1079,1080,1078,1080,1079,1081,1071,1081,1079,1081,1071,1072,903,1079,901,1079,903,1071,1082,910,895,910,1082,1083,913,1083,1075,1083,913,910,1075,1084,1077,1084,1075,1083,1085,1083,1082,1083,1085,1084,1086,882,1087,882,1086,865,1088,1087,1089,1087,1088,1086,1078,1089,1087,1089,1078,1080,884,1087,882,1087,884,1078,1090,894,875,894,1090,1091,1091,895,894,895,1091,1082,1092,1082,1091,1082,1092,1085,1093,1091,1090,1091,1093,1092,1094,864,1095,864,1094,845,1096,1095,1097,1095,1096,1094,1097,1086,1088,1086,1097,1095,1095,865,1086,865,1095,864,1098,874,854,874,1098,1099,1099,875,874,875,1099,1090,1100,1090,1099,1090,1100,1093,1101,1099,1098,1099,1101,1100,1094,844,845,844,1094,1102,1102,825,844,825,1102,1103,1104,1103,1102,1103,1104,1105,1096,1102,1094,1102,1096,1104,1098,855,1106,855,1098,854,1101,1106,1107,1106,1101,1098,1107,1108,1109,1108,1107,1106,1106,834,1108,834,1106,855,1103,824,825,824,1103,1110,1110,805,824,805,1110,1111,1112,1111,1110,1111,1112,1113,1105,1110,1103,1110,1105,1112,835,1108,834,1108,835,1114,1109,1114,1115,1114,1109,1108,1116,1115,1114,1115,1116,1117,814,1114,835,1114,814,1116,1111,804,805,804,1111,1118,1118,785,804,785,1118,1119,1119,1120,1121,1120,1119,1118,1113,1118,1111,1118,1113,1120,815,1116,814,1116,815,1122,1122,1117,1116,1117,1122,1123,1124,1123,1122,1123,1124,1125,794,1122,815,1122,794,1124,784,1119,1126,1119,784,785,763,1126,1127,1126,763,784,1127,1128,1129,1128,1127,1126,1126,1121,1128,1121,1126,1119,1124,795,1130,795,1124,794,1125,1130,1131,1130,1125,1124,1131,1132,1133,1132,1131,1130,1130,774,1132,774,1130,795,762,1127,1134,1127,762,763,456,1134,1135,1134,456,762,1135,1136,1137,1136,1135,1134,1134,1129,1136,1129,1134,1127,1132,775,1138,775,1132,774,1133,1138,1139,1138,1133,1132,1139,1140,1141,1140,1139,1138,1138,465,1140,465,1138,775,1135,454,456,454,1135,1142,1142,417,454,417,1142,1143,1144,1143,1142,1143,1144,1145,1142,1137,1144,1137,1142,1135,1140,462,1146,462,1140,465,1141,1146,1147,1146,1141,1140,1147,1148,1149,1148,1147,1146,1146,420,1148,420,1146,462,1143,416,417,416,1143,1150,1150,327,416,327,1150,350,1151,350,1150,350,1151,351,1145,1150,1143,1150,1145,1151,1148,421,1152,421,1148,420,1149,1152,1153,1152,1149,1148,1153,359,361,359,1153,1152,341,1152,421,1152,341,359,1038,288,292,288,1038,1154,1154,291,288,291,1154,1155,1156,1154,1157,1154,1156,1155,1157,1038,1037,1038,1157,1154,1044,306,1158,306,1044,309,1043,1044,1159,1159,1044,1158,1159,1158,1156,1156,1158,1155,1158,291,1155,291,1158,306,1160,1036,988,1036,1160,1161,1161,1037,1036,1037,1161,1157,1162,1157,1161,1157,1162,1156,1163,1161,1160,1161,1163,1162,1041,1164,999,1164,1041,1165,1163,1165,1162,1165,1163,1164,1162,1159,1156,1159,1162,1165,1043,1165,1041,1165,1043,1159,1166,1008,1009,1008,1166,1167,1168,1167,1166,1167,1168,1169,1166,1170,1168,1170,1166,1171,1166,368,1171,368,1166,1009,1171,369,1172,369,1171,368,1170,1171,1173,1171,1172,1173,1173,1174,1175,1174,1173,1172,1172,345,1174,345,1172,369,1176,1025,1026,1176,1026,1177,377,1176,1178,1176,377,1025,1176,1179,1178,1179,1176,1180,1180,1176,1177,1180,1177,1181,376,1178,1182,1178,376,377,1182,357,376,357,1182,1183,1184,1183,1182,1183,1184,1185,1184,1178,1179,1178,1184,1182,1167,1015,1008,1015,1167,1186,1186,1016,1015,1016,1186,1187,1188,1187,1186,1187,1188,1189,1169,1186,1167,1186,1169,1188,1177,1032,1190,1032,1177,1026,1181,1190,1191,1190,1181,1177,1192,1191,1190,1191,1192,1193,1033,1190,1032,1190,1033,1192,346,1174,345,1174,346,1194,1194,1175,1174,1175,1194,1195,1196,1195,1194,1195,1196,1197,347,1194,346,1194,347,1196,1183,355,357,355,1183,1198,354,1198,1199,1198,354,355,1200,1199,1198,1199,1200,1201,1185,1198,1183,1198,1185,1200,1202,347,349,347,1202,1196,1202,1197,1196,1197,1202,1203,1204,1203,1202,1203,1204,1205,1204,349,351,349,1204,1202,360,354,1206,354,1199,1206,1207,361,360,1207,360,1206,1207,1208,1209,1208,1207,1206,1206,1201,1208,1201,1206,1199,1204,1151,1210,1151,1204,351,1210,1205,1204,1205,1210,1211,1211,1212,1213,1212,1211,1210,1151,1212,1210,1212,1151,1145,1153,1207,1214,1207,1153,361,1153,1215,1149,1215,1153,1214,1215,1216,1217,1216,1215,1214,1214,1209,1216,1209,1214,1207,1218,1144,1137,1144,1218,1219,1219,1145,1144,1145,1219,1212,1220,1212,1219,1212,1220,1213,1221,1219,1218,1219,1221,1220,1222,1147,1223,1147,1222,1141,1224,1223,1225,1223,1224,1222,1217,1225,1223,1223,1215,1217,1223,1149,1215,1149,1223,1147,1136,1226,1227,1226,1136,1129,1137,1227,1218,1227,1137,1136,1228,1218,1227,1218,1228,1221,1227,1229,1228,1229,1227,1226,1230,1139,1231,1139,1230,1133,1232,1231,1233,1231,1232,1230,1233,1222,1224,1222,1233,1231,1231,1141,1222,1141,1231,1139,1128,1234,1235,1234,1128,1121,1129,1235,1226,1235,1129,1128,1226,1236,1229,1236,1226,1235,1235,1237,1236,1237,1235,1234,1131,1238,1125,1238,1131,1239,1239,1240,1238,1240,1239,1241,1241,1230,1232,1230,1241,1239,1239,1133,1230,1133,1239,1131,1120,1242,1243,1242,1120,1113,1121,1243,1234,1243,1121,1120,1234,1244,1237,1244,1234,1243,1243,1245,1244,1245,1243,1242,1123,1246,1117,1246,1123,1247,1247,1248,1246,1248,1247,1249,1238,1249,1247,1249,1238,1240,1125,1247,1123,1247,1125,1238,1250,1112,1105,1112,1250,1251,1113,1251,1242,1251,1113,1112,1252,1242,1251,1242,1252,1245,1253,1251,1250,1251,1253,1252,1115,1254,1109,1254,1115,1255,1255,1256,1254,1256,1255,1257,1246,1257,1255,1257,1246,1248,1117,1255,1115,1255,1117,1246,1258,1250,1259,1250,1258,1253,1260,1259,1261,1259,1260,1258,1261,1104,1096,1104,1261,1259,1259,1105,1104,1105,1259,1250,1254,1262,1263,1262,1254,1256,1263,1109,1254,1109,1263,1107,1264,1107,1263,1107,1264,1101,1263,1265,1264,1265,1263,1262,1266,1267,1268,1267,1266,1269,1268,1088,1266,1088,1268,1097,1261,1097,1268,1097,1261,1096,1268,1267,1261,1267,1260,1261,1270,1271,1272,1271,1270,1273,1272,1264,1270,1270,1264,1265,1264,1100,1101,1100,1264,1272,1272,1093,1100,1093,1272,1271,1266,1089,1274,1089,1266,1088,1269,1274,1275,1274,1269,1266,1275,1276,1277,1276,1275,1274,1080,1274,1089,1274,1080,1276,1271,1092,1093,1092,1271,1278,1278,1085,1092,1085,1278,1279,1280,1279,1278,1279,1280,1281,1273,1278,1271,1278,1273,1280,1081,1276,1080,1276,1081,1282,1277,1282,1283,1282,1277,1276,1283,1284,1285,1284,1283,1282,1072,1282,1081,1282,1072,1284,1279,1084,1085,1084,1279,1286,1077,1286,1287,1286,1077,1084,1287,1288,1289,1288,1287,1286,1281,1286,1279,1286,1281,1288,1284,1073,1290,1073,1284,1072,1285,1290,1291,1290,1285,1284,1291,1292,1293,1292,1291,1290,1064,1290,1073,1290,1064,1292,1287,1076,1077,1076,1287,1294,1294,1069,1076,1069,1294,1295,1295,1296,1297,1296,1295,1294,1294,1289,1296,1289,1294,1287,1065,1292,1064,1292,1065,1298,1293,1298,1299,1298,1293,1292,1300,1299,1298,1299,1300,1301,1057,1298,1065,1298,1057,1300,1295,1068,1069,1068,1295,1302,1302,1061,1068,1061,1302,1303,1304,1303,1302,1303,1304,1305,1297,1302,1295,1302,1297,1304,1306,1056,1049,1056,1306,1307,1057,1056,1300,1056,1307,1300,1300,1307,1301,1307,1308,1301,1309,1307,1306,1307,1309,1308,1059,1310,1053,1310,1059,1311,1311,1312,1310,1312,1311,1313,1305,1311,1303,1311,1305,1313,1303,1059,1061,1059,1303,1311,1187,1048,1016,1048,1187,1314,1314,1049,1048,1049,1314,1306,1315,1306,1314,1306,1315,1309,1189,1314,1187,1314,1189,1315,1051,1192,1033,1192,1051,1316,1316,1193,1192,1193,1316,1317,1310,1317,1316,1317,1310,1312,1053,1316,1051,1316,1053,1310,1318,1319,1320,1319,1318,1321,1322,1323,1318,1318,1320,1322,1322,1168,1170,1168,1322,1320,1320,1169,1168,1169,1320,1319,1322,1173,1324,1173,1322,1170,1323,1324,1325,1324,1323,1322,1325,1326,42,1326,1325,1324,1324,1175,1326,1175,1324,1173,1327,1328,1329,1328,1327,1330,1330,1181,1328,1181,1330,1180,1331,1180,1330,1180,1331,1179,1331,1327,1332,1327,1331,1330,1331,1184,1179,1184,1331,1333,1333,1185,1184,1185,1333,1334,1334,1335,50,1335,1334,1333,1333,1332,1335,1332,1333,1331,1318,1336,1321,1336,1318,1337,1337,1338,1336,1338,1337,1339,1340,1339,1337,1339,1340,1341,1337,1323,1340,1323,1337,1318,41,43,1342,1342,1343,41,42,41,1343,1325,42,1343,1340,1325,1343,1325,1340,1323,1341,1343,1342,1343,1341,1340,1327,1344,1345,1344,1327,1329,1332,1345,1346,1345,1332,1327,1346,1347,1348,1347,1346,1345,1345,1349,1347,1349,1345,1344,45,1350,46,1350,45,1351,1351,1348,1350,1348,1351,1346,1335,1346,1351,1346,1335,1332,1351,50,1335,50,1351,45,1188,1319,1352,1319,1188,1169,1352,1189,1188,1189,1352,1353,1354,1353,1352,1353,1354,1355,1321,1352,1319,1352,1321,1354,1354,1356,1355,1356,1354,1357,1357,1358,1356,1358,1357,1359,1336,1359,1357,1359,1336,1338,1321,1357,1354,1357,1321,1336,1328,1191,1360,1191,1328,1181,1329,1360,1361,1360,1329,1328,1361,1362,1363,1362,1361,1360,1360,1193,1362,1193,1360,1191,1361,1364,1365,1364,1361,1363,1329,1365,1344,1365,1329,1361,1344,1366,1349,1366,1344,1365,1365,1367,1366,1367,1365,1364,1353,1315,1189,1315,1353,1368,1368,1309,1315,1309,1368,1369,1370,1369,1368,1369,1370,1371,1355,1368,1353,1368,1355,1370,1372,1373,1370,1373,1372,1374,1374,1372,1375,1374,1375,1376,1375,1372,1358,1372,1356,1358,1356,1370,1355,1372,1370,1356,1317,1362,1193,1362,1317,1377,1377,1363,1362,1363,1377,1378,1379,1378,1377,1378,1379,1380,1312,1377,1317,1377,1312,1379,1378,1381,1382,1381,1383,1382,1363,1378,1364,1378,1382,1364,1384,1367,1382,1364,1382,1367,1385,1384,1383,1383,1384,1382,1308,1386,1301,1386,1308,1387,1387,1388,1386,1388,1387,1389,1369,1389,1387,1389,1369,1371,1309,1387,1308,1387,1309,1369,1390,1313,1305,1313,1390,1391,1391,1312,1313,1312,1391,1379,1392,1379,1391,1379,1392,1380,1393,1391,1390,1391,1393,1392,1394,1299,1395,1299,1394,1293,1396,1395,1397,1395,1396,1394,1386,1397,1395,1397,1386,1388,1301,1395,1299,1395,1301,1386,1398,1304,1297,1304,1398,1399,1399,1305,1304,1305,1399,1390,1400,1390,1399,1390,1400,1393,1401,1399,1398,1399,1401,1400,1394,1402,1403,1402,1394,1396,1403,1293,1394,1293,1403,1291,1404,1291,1403,1291,1404,1285,26,1403,1402,1403,26,1404,1405,1398,1406,1398,1405,1401,33,1406,1407,1406,33,1405,1407,1296,1289,1296,1407,1406,1406,1297,1296,1297,1406,1398,1408,1283,1409,1283,1408,1277,28,1409,27,1409,28,1408,27,1404,26,1404,27,1409,1409,1285,1404,1285,1409,1283,1410,1277,1408,1277,1410,1275,1410,1269,1275,1269,1410,1411,1410,1412,1413,1410,1413,1411,1408,28,1412,1408,1412,1410,1414,1288,1281,1288,1414,1415,1415,1289,1288,1289,1415,1407,31,1407,1415,1407,31,33,29,1415,1414,1415,29,31,1414,1281,1416,1281,1280,1416,1416,1417,1414,29,1414,1417,1418,1419,1416,1417,1416,1419,1416,1273,1418,1273,1416,1280,1420,1260,1267,1260,1420,1421,1422,1421,1420,1421,1422,1423,1413,1420,1411,1420,1413,1422,1269,1420,1267,1420,1269,1411,1424,1270,1265,1265,1425,1424,1273,1424,1418,1424,1273,1270,1418,1426,1419,1426,1418,1424,1426,1424,1425,1425,1427,1426,1428,1429,1430,1429,1428,1431,1423,1430,1421,1430,1423,1428,1421,1258,1260,1258,1421,1430,1253,1430,1429,1430,1253,1258,1432,1433,1434,1433,1432,1435,1256,1434,1262,1434,1256,1432,1262,1425,1265,1425,1262,1434,1434,1427,1425,1427,1434,1433,1436,1437,1438,1437,1436,1439,1439,1431,1437,1431,1439,1429,1429,1252,1253,1252,1429,1439,1439,1245,1252,1245,1439,1436,1440,1441,1442,1441,1440,1443,1248,1442,1257,1442,1248,1440,1257,1432,1256,1432,1257,1442,1442,1435,1432,1435,1442,1441,1244,1436,1444,1436,1244,1245,1237,1444,1445,1444,1237,1244,1445,1446,1447,1446,1445,1444,1444,1438,1446,1438,1444,1436,1249,1440,1248,1440,1249,1448,1448,1443,1440,1443,1448,1449,1450,1449,1448,1449,1450,1451,1240,1448,1249,1448,1240,1450,1236,1445,1452,1445,1236,1237,1229,1452,1453,1452,1229,1236,1453,1454,1455,1454,1453,1452,1452,1447,1454,1447,1452,1445,1241,1450,1240,1450,1241,1456,1456,1451,1450,1451,1456,1457,1457,1458,1459,1458,1457,1456,1456,1232,1458,1232,1456,1241,1228,1453,1460,1453,1228,1229,1221,1460,1461,1460,1221,1228,1461,1462,1463,1462,1461,1460,1460,1455,1462,1455,1460,1453,1458,1233,1464,1233,1458,1232,1459,1464,1465,1464,1459,1458,1465,1466,1467,1466,1465,1464,1464,1224,1466,1224,1464,1233,1468,1220,1469,1220,1468,1213,1470,1469,1471,1469,1470,1468,1471,1461,1463,1461,1471,1469,1461,1469,1220,1461,1220,1221,1225,1472,1473,1472,1225,1217,1466,1225,1473,1225,1466,1224,1467,1473,1474,1473,1467,1466,1473,1475,1474,1475,1473,1472,1476,1211,1477,1211,1476,1205,1478,1477,1479,1477,1478,1476,1479,1468,1470,1468,1479,1477,1477,1213,1468,1213,1477,1211,1216,1480,1481,1480,1216,1209,1217,1481,1472,1481,1217,1216,1472,1482,1475,1482,1472,1481,1481,1483,1482,1483,1481,1480,1484,1203,1485,1484,1197,1203,37,1485,1486,1485,37,1484,1486,1476,1478,1476,1486,1485,1485,1205,1476,1205,1485,1203,1487,1208,1201,1208,1487,1488,1209,1488,1480,1488,1209,1208,1480,1489,1483,1489,1480,1488,52,1488,1487,1488,52,1489,1389,1374,1490,1374,1389,1373,1388,1389,1491,1389,1490,1491,1491,1490,1492,1490,1493,1492,1490,1374,1493,1374,1376,1493,1392,1383,1381,1383,1392,1494,1495,1383,1494,1383,1495,1385,1496,1497,1494,1494,1497,1495,1496,1392,1393,1392,1496,1494,1498,1397,1388,1388,1491,1498,1396,1498,1499,1498,1396,1397,1500,1499,1498,1499,1500,59,1498,1491,1500,1491,1492,1500,1501,1393,1400,1393,1501,1496,1501,1502,1496,1496,1502,1497,1503,1502,1501,1502,1503,64,1401,1501,1400,1501,1401,1503,56,1504,1505,1504,56,55,25,24,56,25,56,1505,28,25,1505,1505,1412,28,1505,1413,1412,1413,1505,1504,1506,60,1507,60,1506,65,1419,1507,1417,1507,1419,1506,29,1507,32,1507,29,1417,32,60,35,60,32,1507,1508,1509,1510,1508,1510,1511,55,1508,1504,1508,55,1509,1504,1422,1413,1422,1504,1508,1508,1423,1422,1423,1508,1511,1512,1513,1514,1514,1513,1515,1427,1513,1426,1513,1427,1515,1426,1506,1419,1506,1426,1513,65,1513,1512,1513,65,1506,1511,1428,1423,1428,1511,1516,1431,1516,1517,1516,1431,1428,1517,1518,1519,1518,1517,1516,1510,1516,1511,1516,1510,1518,1433,1515,1427,1515,1433,1520,1520,1514,1515,1514,1520,1521,1521,1522,1523,1522,1521,1520,1435,1520,1433,1520,1435,1522,1437,1517,1524,1517,1437,1431,1438,1524,1525,1524,1438,1437,1525,1526,1527,1526,1525,1524,1524,1519,1526,1519,1524,1517,1441,1522,1435,1522,1441,1528,1523,1528,1529,1528,1523,1522,1529,1530,1531,1530,1529,1528,1443,1528,1441,1528,1443,1530,1446,1532,1447,1533,1447,1532,1533,1534,1535,1534,1533,1532,1527,1534,1532,1532,1525,1527,1438,1525,1446,1532,1446,1525,1451,1536,1537,1451,1537,1449,1449,1537,1530,1449,1530,1443,1530,1537,1531,1537,1538,1531,1536,1538,1537,1538,1536,1539,1540,1455,1541,1455,1454,1541,1541,1542,1540,1542,1541,1543,1541,1535,1543,1535,1541,1533,1447,1533,1454,1541,1454,1533,1544,1459,1545,1459,1544,1457,1457,1544,1536,1457,1536,1451,1544,1546,1539,1544,1539,1536,1544,1547,1546,1547,1544,1545,1462,1548,1463,1548,1462,1549,1549,1550,1548,1550,1549,1551,1540,1551,1549,1551,1540,1542,1540,1549,1462,1462,1455,1540,1465,1552,1553,1552,1465,1467,1545,1465,1553,1465,1545,1459,1545,1554,1547,1554,1545,1553,1553,1555,1554,1555,1553,1552,1471,1556,1470,1556,1471,1557,1557,1558,1556,1558,1557,1559,1548,1559,1557,1559,1548,1550,1463,1557,1471,1557,1463,1548,1560,1474,1475,1474,1560,1561,1561,1467,1474,1467,1561,1552,1552,1562,1555,1562,1552,1561,1561,1563,1562,1563,1561,1560,1556,1479,1470,1479,1556,1564,1478,1479,1565,1479,1564,1565,1565,1564,1566,1564,1567,1566,1564,1558,1567,1558,1564,1556,1560,1482,1568,1482,1560,1475,1569,1560,1568,1560,1569,1563,1570,1568,1571,1568,1570,1569,1571,1482,1483,1482,1571,1568,1478,1572,1486,1572,1478,1565,1486,39,37,39,1486,1572,1573,1572,1574,1572,1573,39,1572,1566,1574,1566,1572,1565,1483,1575,1571,1575,1483,1489,1575,1570,1571,1570,1575,1576,46,1576,1575,46,1575,53,1489,53,1575,53,1489,52,1577,1578,1579,1578,1577,1580,1580,1550,1578,1550,1580,1559,1559,1581,1558,1581,1559,1580,1582,1580,1577,1580,1582,1581,1578,1551,1583,1551,1578,1550,1579,1583,1584,1583,1579,1578,1584,1585,1586,1585,1584,1583,1583,1542,1585,1542,1583,1551,1587,1588,1589,1588,1587,1590,1590,1591,1588,1591,1590,1592,1562,1592,1590,1592,1562,1563,1555,1590,1587,1590,1555,1562,1587,1554,1555,1554,1587,1593,1593,1547,1554,1547,1593,1594,1595,1594,1593,1594,1595,1596,1589,1593,1587,1593,1589,1595,1597,1598,1376,1493,1376,1598,1492,1598,1599,1598,1492,1493,1599,1577,1579,1577,1599,1598,1582,1577,1597,1598,1597,1577,1500,1600,59,1600,1500,1601,1601,1586,1600,1586,1601,1584,1599,1584,1601,1584,1599,1579,1492,1601,1500,1601,1492,1599,1602,1385,1495,1385,1602,1603,1603,1602,1588,1603,1588,1591,1604,1588,1602,1588,1604,1589,1497,1602,1495,1602,1497,1604,1605,1502,64,1502,1605,1606,1606,1497,1502,1497,1606,1604,1595,1589,1606,1604,1606,1589,1596,1606,1605,1606,1596,1595,1581,1582,1607,1582,1608,1607,1558,1607,1567,1607,1558,1581,1609,1567,1607,1567,1609,1566,1610,1607,1608,1607,1610,1609,1342,1611,1341,1612,1341,1611,1611,1609,1612,1610,1612,1609,1574,1566,1611,1609,1611,1566,1573,1611,1342,1611,1573,1574,1613,1582,1597,1582,1613,1608,1614,1608,1613,1608,1614,1610,1358,1613,1375,1613,1358,1614,1375,1597,1376,1597,1375,1613,1339,1612,1615,1612,1339,1341,1338,1615,1359,1615,1338,1339,1359,1614,1358,1614,1359,1615,1615,1610,1614,1610,1615,1612,1592,1616,1591,1617,1591,1616,1616,1618,1617,1618,1616,1619,1569,1570,1616,1619,1616,1570,1563,1616,1592,1616,1563,1569,1348,1620,1621,1348,1621,1350,1621,46,1350,46,1621,1576,1621,1619,1570,1621,1570,1576,1620,1618,1619,1620,1619,1621,1622,1603,1591,1622,1591,1617,1384,1385,1603,1384,1603,1622,1367,1384,1622,1622,1623,1367,1623,1622,1617,1617,1618,1623,1620,1347,1624,1347,1620,1348,1618,1624,1623,1624,1618,1620,1623,1366,1367,1366,1623,1624,1624,1349,1366,1349,1624,1347,1625,1534,1527,1534,1625,1626,1535,1626,1543,1626,1535,1534,1585,1543,1626,1543,1585,1542,1586,1626,1625,1626,1586,1585,1538,1627,1531,1627,1538,1628,1628,1596,1627,1596,1628,1594,1546,1594,1628,1594,1546,1547,1628,1539,1546,1539,1628,1538,1526,1629,1630,1629,1526,1519,1630,1527,1526,1527,1630,1625,1600,1625,1630,1625,1600,1586,1630,59,1600,59,1630,1629,1529,1631,1523,1631,1529,1632,1632,64,1631,64,1632,1605,1627,1605,1632,1605,1627,1596,1531,1632,1529,1632,1531,1627,1633,1634,1635,1634,1633,1636,1637,1635,1638,1635,1637,1633,425,1638,1635,1635,443,425,443,1635,1634,1634,444,443,1634,766,444,766,1634,1639,1639,769,766,769,1639,1640,1641,1640,1639,1640,1641,1642,1636,1639,1634,1639,1636,1641,1643,1644,1645,1644,1643,1646,446,1644,1646,1644,446,448,437,1646,1647,1646,437,446,1648,1646,1643,1646,1648,1647,1644,776,1649,776,1644,448,1645,1649,1650,1649,1645,1644,1650,1651,1652,1651,1650,1649,1649,778,1651,778,1649,776,1653,1638,1654,1638,1653,1637,599,1654,597,1654,599,1653,597,424,426,424,597,1654,1654,425,424,425,1654,1638,1655,1647,1648,1647,1655,1656,1656,437,1647,437,1656,436,436,607,435,607,436,1656,1656,609,607,609,1656,1655,1657,1653,599,1653,1657,1658,1658,1637,1653,1637,1658,1659,1660,1659,1658,1659,1660,1661,1662,1658,1657,1658,1662,1660,1663,1657,1664,1657,1663,1662,1665,1664,1666,1664,1665,1663,1666,598,593,598,1666,1664,1664,599,598,599,1664,1657,1655,1667,609,1667,1655,1668,1668,1669,1667,1669,1668,1670,1670,1671,1672,1671,1670,1668,1648,1668,1655,1668,1648,1671,1667,1673,1674,1673,1667,1669,609,1674,608,1674,609,1667,608,1675,605,1675,608,1674,1674,1676,1675,1676,1674,1673,1677,1678,1679,1678,1677,1680,1659,1661,1677,1659,1677,1679,1659,1633,1637,1633,1659,1679,1679,1636,1633,1636,1679,1678,1681,1682,1683,1682,1681,1684,1684,1645,1682,1645,1684,1643,1671,1643,1684,1643,1671,1648,1671,1681,1672,1681,1671,1684,1678,1641,1636,1641,1678,1685,1685,1642,1641,1642,1685,1686,1687,1686,1685,1686,1687,1688,1680,1685,1678,1685,1680,1687,1682,1650,1689,1650,1682,1645,1683,1689,1690,1689,1683,1682,1690,1691,1692,1691,1690,1689,1689,1652,1691,1652,1689,1650,1693,1694,1695,1694,1693,1696,1642,1695,1640,1695,1642,1693,1640,786,769,786,1640,1695,1695,789,786,789,1695,1694,1697,1698,1699,1698,1697,1700,1688,1699,1686,1699,1688,1697,1686,1693,1642,1693,1686,1699,1699,1696,1693,1696,1699,1698,1701,1702,1703,1702,1701,1704,1704,798,1702,798,1704,796,1651,796,1704,796,1651,778,1652,1704,1701,1704,1652,1651,1705,1706,1707,1706,1705,1708,1708,1703,1706,1703,1708,1701,1691,1701,1708,1701,1691,1652,1692,1708,1705,1708,1692,1691,1709,1710,1711,1710,1709,1712,1696,1711,1694,1711,1696,1709,1694,807,789,807,1694,1711,808,1711,1710,1711,808,807,1713,1714,1715,1714,1713,1716,1716,818,1714,818,1716,816,1702,816,1716,816,1702,798,1703,1716,1713,1716,1703,1702,1698,1709,1696,1709,1698,1717,1717,1712,1709,1712,1717,1718,1718,1719,1720,1719,1718,1717,1700,1717,1698,1717,1700,1719,1706,1713,1721,1713,1706,1703,1707,1721,1722,1721,1707,1706,1722,1723,1724,1723,1722,1721,1721,1715,1723,1715,1721,1713,1725,1712,1726,1712,1725,1710,827,1710,1725,1710,827,808,1727,827,1725,827,1727,828,1728,1725,1726,1725,1728,1727,1729,1715,1730,1715,1714,1730,1731,1730,1732,1730,1731,1729,1732,836,838,836,1732,1730,1730,1714,836,1714,818,836,1733,1734,1735,1735,1734,1736,1734,1720,1736,1720,1734,1718,1718,1726,1712,1726,1718,1734,1728,1726,1733,1733,1726,1734,1737,1738,1739,1737,1739,1740,1740,1739,1729,1740,1729,1731,1723,1729,1739,1729,1723,1715,1724,1739,1738,1739,1724,1723,1741,1727,1728,1727,1741,1742,1742,828,1727,828,1742,849,849,1743,847,1743,849,1742,1742,1744,1743,1744,1742,1741,1745,1732,1746,1732,1745,1731,1747,1746,1748,1746,1747,1745,1748,857,859,857,1748,1746,1746,838,857,838,1746,1732,1743,1749,1750,1749,1743,1744,847,1750,866,1750,847,1743,866,1751,869,1751,866,1750,1750,1752,1751,1752,1750,1749,1753,1748,1754,1748,1753,1747,1755,1754,1756,1754,1755,1753,1756,876,878,876,1756,1754,1754,859,876,859,1754,1748,1751,1757,1758,1757,1751,1752,869,1758,886,1758,869,1751,886,1759,889,1759,886,1758,1758,1760,1759,1760,1758,1757,1756,1761,1755,1761,1756,1762,1762,1763,1761,1763,1762,1764,896,1764,1762,1764,896,898,878,1762,1756,1762,878,896,1765,1759,1760,1759,1765,1766,1766,889,1759,889,1766,906,1767,906,1766,906,1767,909,1768,1766,1765,1766,1768,1767,1764,1769,1763,1769,1764,1770,1770,1771,1769,1771,1770,1772,916,1772,1770,1772,916,918,898,1770,1764,1770,898,916,1773,1767,1768,1767,1773,1774,1774,909,1767,909,1774,926,1775,926,1774,926,1775,929,1776,1774,1773,1774,1776,1775,1777,1772,1778,1772,1777,1771,1779,1778,1780,1778,1779,1777,1780,936,938,936,1780,1778,1778,918,936,918,1778,1772,1781,1775,1776,1775,1781,1782,1782,929,1775,929,1782,946,1783,949,1782,1782,949,946,1784,1783,1781,1781,1783,1782,1785,1780,1786,1780,1785,1779,1787,1785,1788,1785,1786,1788,1788,1786,958,1786,956,958,1786,938,956,938,1786,1780,1789,1783,1784,1783,1789,1790,966,1783,1790,1783,966,949,1791,966,1790,966,1791,969,1792,1790,1789,1790,1792,1791,1793,1788,1794,1788,1793,1787,1795,1794,1796,1794,1795,1793,1796,976,978,976,1796,1794,1794,1788,976,1788,958,976,1797,987,1798,987,1797,988,1799,1798,1800,1798,1799,1797,1800,1791,1792,1791,1800,1798,1798,969,1791,969,1798,987,1801,997,999,997,1801,1802,1802,978,997,978,1802,1796,1803,1796,1802,1796,1803,1795,1804,1802,1801,1802,1804,1803,1805,1797,1799,1797,1805,1806,1806,988,1797,988,1806,1160,1807,1160,1806,1160,1807,1163,1808,1806,1805,1806,1808,1807,1809,1801,1810,1801,1809,1804,1808,1810,1807,1810,1808,1809,1807,1164,1163,1164,1807,1810,1810,999,1164,999,1810,1801,1811,1666,1812,1666,1811,1665,1813,1812,1814,1812,1813,1811,1814,592,594,592,1814,1812,1812,593,592,593,1812,1666,1675,1815,1816,1815,1675,1676,605,1816,604,1816,605,1675,604,1817,603,1817,604,1816,1816,1818,1817,1818,1816,1815,1819,1814,1820,1814,1819,1813,1821,1820,1822,1820,1821,1819,1822,756,731,756,1822,1820,1820,594,756,594,1820,1814,1817,1823,1824,1823,1817,1818,603,1824,758,1824,603,1817,758,1825,740,1825,758,1824,1824,1826,1825,1826,1824,1823,1827,731,728,731,1827,1822,1828,1822,1827,1822,1828,1821,1829,1827,1830,1827,1829,1828,724,1827,728,1827,724,1830,738,1825,1831,1825,738,740,737,1831,1832,1831,737,738,1832,1831,1833,1831,1834,1833,1831,1825,1834,1825,1826,1834,725,1830,724,1830,725,1835,1836,1830,1835,1830,1836,1829,1837,1836,1835,1836,1837,1838,727,1835,725,1835,727,1837,735,1832,1839,1832,735,737,736,1839,1840,1839,736,735,1840,1841,1842,1841,1840,1839,1839,1832,1841,1832,1833,1841,743,1837,727,1837,743,1843,1843,1838,1837,1838,1843,1844,1845,1844,1843,1844,1845,1846,745,1843,743,1843,745,1845,746,1840,1847,1840,746,736,745,1847,1845,1847,745,746,1848,1845,1847,1845,1848,1846,1847,1842,1848,1842,1847,1840,1849,1850,1851,1850,1849,1852,1844,1846,1849,1844,1849,1851,1844,1853,1838,1853,1844,1851,1851,1854,1853,1854,1851,1850,1849,1855,1852,1855,1849,1856,1856,1857,1855,1857,1856,1858,1848,1858,1856,1858,1848,1842,1846,1856,1849,1856,1846,1848,1859,1677,1661,1677,1859,1860,1860,1680,1677,1680,1860,1861,1862,1861,1860,1861,1862,1863,1862,1859,1864,1859,1862,1860,1865,1866,1867,1866,1865,1868,1863,1867,1861,1867,1863,1865,1861,1687,1680,1687,1861,1867,1867,1688,1687,1688,1867,1866,1869,1681,1870,1681,1869,1672,1871,1872,1869,1871,1869,1870,1871,1873,1874,1873,1871,1870,1870,1683,1873,1683,1870,1681,1875,1876,1877,1876,1875,1878,1878,1692,1876,1692,1878,1690,1873,1690,1878,1690,1873,1683,1874,1878,1875,1878,1874,1873,1879,1880,1881,1880,1879,1882,1881,1883,1879,1883,1881,1884,1884,1663,1665,1663,1884,1881,1881,1662,1663,1662,1881,1880,1880,1882,1885,1882,1886,1885,1662,1880,1660,1880,1885,1660,1660,1859,1661,1859,1660,1885,1885,1864,1859,1864,1885,1886,1887,1888,1889,1888,1887,1890,1669,1889,1673,1889,1669,1887,1673,1891,1676,1891,1673,1889,1889,1892,1891,1892,1889,1888,1893,1890,1887,1890,1893,1894,1893,1872,1894,1872,1893,1869,1670,1869,1893,1869,1670,1672,1670,1887,1669,1887,1670,1893,1895,1896,1897,1896,1895,1898,1852,1897,1850,1897,1852,1895,1850,1899,1854,1899,1850,1897,1897,1900,1899,1900,1897,1896,1895,1901,1898,1901,1895,1902,1902,1903,1901,1903,1902,1904,1855,1904,1902,1904,1855,1857,1852,1902,1895,1902,1852,1855,1853,1905,1906,1905,1853,1854,1838,1906,1836,1906,1838,1853,1836,1907,1829,1907,1836,1906,1906,1908,1907,1908,1906,1905,1899,1909,1910,1909,1899,1900,1854,1910,1905,1910,1854,1899,1905,1911,1908,1911,1905,1910,1910,1912,1911,1912,1910,1909,1858,1913,1857,1913,1858,1914,1914,1915,1913,1915,1914,1916,1841,1916,1914,1916,1841,1833,1842,1914,1858,1914,1842,1841,1904,1917,1903,1917,1904,1918,1918,1919,1917,1919,1918,1920,1913,1920,1918,1920,1913,1915,1857,1918,1904,1918,1857,1913,1921,1922,1923,1922,1921,1924,1908,1923,1907,1923,1908,1921,1907,1828,1829,1828,1907,1923,1923,1821,1828,1821,1923,1922,1922,1819,1821,1819,1922,1925,1925,1813,1819,1813,1925,1926,1927,1926,1925,1926,1927,1928,1924,1925,1922,1925,1924,1927,1929,1930,1931,1930,1929,1932,1826,1931,1834,1931,1826,1929,1834,1916,1833,1916,1834,1931,1931,1915,1916,1915,1931,1930,1823,1929,1826,1929,1823,1933,1933,1932,1929,1932,1933,1934,1935,1934,1933,1934,1935,1936,1818,1933,1823,1933,1818,1935,1937,1938,1863,1937,1863,1862,1939,1940,1938,1939,1938,1937,1941,1939,1937,1941,1937,1942,1942,1937,1862,1942,1862,1864,1943,1944,1945,1944,1943,1946,1940,1945,1938,1945,1940,1943,1938,1865,1863,1865,1938,1945,1945,1868,1865,1868,1945,1944,1947,1874,1948,1874,1947,1871,1949,1871,1947,1871,1949,1872,1950,1947,1951,1947,1950,1949,1951,1948,1952,1948,1951,1947,1953,1954,1955,1954,1953,1956,1956,1877,1954,1877,1956,1875,1948,1875,1956,1875,1948,1874,1952,1956,1953,1956,1952,1948,1957,1883,1884,1883,1957,1958,1957,1928,1958,1928,1957,1926,1926,1811,1813,1811,1926,1957,1957,1665,1811,1665,1957,1884,1959,1891,1892,1959,1892,1960,1676,1959,1815,1959,1676,1891,1815,1935,1818,1935,1815,1959,1959,1936,1935,1936,1959,1960,1961,1962,1963,1962,1961,1964,1898,1963,1896,1963,1898,1961,1896,1965,1900,1965,1896,1963,1963,1966,1965,1966,1963,1962,1961,1967,1964,1967,1961,1968,1968,1969,1967,1969,1968,1970,1901,1970,1968,1970,1901,1903,1898,1968,1961,1968,1898,1901,1965,1971,1972,1971,1965,1966,1900,1972,1909,1972,1900,1965,1909,1973,1912,1973,1909,1972,1972,1974,1973,1974,1972,1971,1975,1973,1976,1973,1975,1912,1977,1976,1978,1976,1977,1975,1978,1979,1980,1979,1978,1976,1976,1974,1979,1974,1976,1973,1970,1981,1969,1981,1970,1982,1982,1983,1981,1983,1982,1984,1917,1984,1982,1984,1917,1919,1903,1982,1970,1982,1903,1917,1985,1984,1919,1984,1985,1986,1986,1983,1984,1983,1986,1987,1988,1987,1986,1987,1988,1989,1990,1986,1985,1986,1990,1988,1991,1978,1992,1978,1991,1977,1993,1992,1994,1992,1993,1991,1994,1995,1996,1995,1994,1992,1992,1980,1995,1980,1992,1978,1997,1988,1990,1988,1997,1998,1998,1989,1988,1989,1998,1999,2000,1999,1998,1999,2000,2001,2002,1998,1997,1998,2002,2000,1958,2003,1883,2003,1958,2004,2004,2005,2003,2005,2004,2006,2007,1993,2004,2004,1993,2006,1928,2007,1958,1958,2007,2004,2005,2006,2008,2005,2008,2009,2008,2010,2009,2010,2008,2011,1994,2011,2008,2011,1994,1996,2006,1993,1994,2006,1994,2008,2012,1960,1892,1960,2012,2013,1936,1960,2014,1960,2013,2014,2014,2013,2002,2013,2015,2002,2016,2013,2012,2013,2016,2015,2017,2018,2016,2016,2018,2015,2018,2000,2015,2002,2015,2000,2019,2000,2018,2000,2019,2001,2020,2018,2017,2018,2020,2019,2021,1882,2022,1882,1879,2022,2022,2023,2021,2023,2022,2024,2003,2024,2022,2024,2003,2005,1879,1883,2003,1879,2003,2022,2024,2025,2023,2025,2024,2026,2026,2027,2025,2027,2026,2028,2010,2026,2009,2026,2010,2028,2005,2026,2024,2026,2005,2009,2029,1890,2030,1890,2029,1888,2029,2012,1888,1888,2012,1892,2012,2031,2016,2031,2012,2029,2029,2032,2031,2032,2029,2030,2031,2033,2034,2033,2031,2032,2016,2034,2017,2034,2016,2031,2017,2034,2020,2034,2035,2020,2034,2036,2035,2036,2034,2033,2037,2038,2039,2038,2037,2040,2037,2041,2042,2041,2037,2039,2039,2021,2023,2039,2023,2041,2021,2039,2038,2038,1882,2021,2041,2043,2042,2043,2041,2044,2044,2045,2043,2045,2044,2046,2025,2046,2044,2046,2025,2027,2023,2044,2041,2044,2023,2025,2047,2048,2049,2048,2047,2050,2030,2047,2049,2047,2030,1890,2051,2032,2049,2030,2049,2032,2048,2051,2049,2051,2048,2052,2053,2051,2052,2051,2053,2054,2054,2032,2051,2032,2054,2033,2055,2033,2054,2033,2055,2036,2056,2054,2053,2054,2056,2055,1886,1942,1864,1942,1886,2057,1941,2057,2058,2057,1941,1942,2038,2058,2057,2058,2038,2040,2038,1886,1882,1886,2038,2057,2059,2060,2061,2059,2061,2062,2060,2063,2064,2063,2060,2059,2064,2065,2066,2065,2064,2063,2067,2066,2065,2066,2067,2068,2069,2070,2071,2070,2069,2072,2073,2071,2074,2071,2073,2069,2075,2074,2076,2074,2075,2073,2077,2076,2078,2076,2077,2075,1894,1949,2079,1949,1894,1872,2047,1890,1894,1894,2079,2047,2047,2080,2050,2080,2047,2079,1950,2079,1949,2079,1950,2080,2081,2082,2083,2082,2081,2084,2084,2085,2082,2085,2084,2086,2087,2088,2089,2088,2087,2090,2089,2091,2092,2091,2089,2088,2093,2068,2067,2068,2093,2094,2081,2094,2093,2094,2081,2083,2095,2078,2096,2078,2095,2077,2087,2096,2090,2096,2087,2095,1962,2097,1966,2097,1962,2098,2098,2099,2097,2099,2098,2100,2101,2100,2098,2100,2101,2102,1964,2098,1962,2098,1964,2101,1967,2103,2104,2103,1967,1969,2104,1964,1967,1964,2104,2101,2105,2101,2104,2101,2105,2102,2104,2106,2105,2106,2104,2103,1971,2107,1974,2107,1971,2108,2108,2109,2107,2109,2108,2110,2097,2110,2108,2110,2097,2099,1966,2108,1971,2108,1966,2097,1981,2111,2112,2111,1981,1983,1969,2112,2103,2112,1969,1981,2103,2113,2106,2113,2103,2112,2112,2114,2113,2114,2112,2111,2100,2115,2099,2115,2100,2116,2116,2117,2115,2117,2116,2118,2119,2118,2116,2118,2119,2120,2102,2116,2100,2116,2102,2119,2105,2121,2122,2121,2105,2106,2122,2102,2105,2102,2122,2119,2119,2123,2120,2123,2119,2122,2122,2124,2123,2124,2122,2121,2110,2125,2109,2125,2110,2126,2126,2127,2125,2125,2127,2128,2115,2127,2126,2127,2115,2117,2099,2126,2110,2126,2099,2115,2113,2129,2130,2129,2113,2114,2106,2130,2121,2130,2106,2113,2121,2131,2124,2131,2121,2130,2130,2129,2131,2129,2132,2131,2107,2133,1974,1979,1974,2133,1980,2133,2134,2133,1980,1979,2134,2133,2135,2133,2136,2135,2133,2107,2136,2107,2109,2136,2136,2109,2137,2109,2125,2137,2135,2136,2138,2136,2137,2138,2138,2139,2140,2139,2138,2137,2137,2128,2139,2128,2137,2125,1983,1987,2141,1983,2141,2111,2141,2142,2111,2111,2142,2114,2143,2141,2144,2141,2143,2142,1989,2141,1987,2141,1989,2144,2145,2114,2142,2114,2145,2129,2145,2132,2129,2132,2145,2146,2147,2146,2145,2146,2147,2148,2147,2142,2143,2142,2147,2145,1995,2134,2149,2134,1995,1980,1996,1995,2150,1995,2149,2150,2150,2149,2151,2149,2152,2151,2149,2134,2152,2134,2135,2152,2152,2135,2153,2135,2138,2153,2151,2152,2154,2154,2152,2153,2154,2155,2156,2155,2154,2153,2153,2140,2155,2140,2153,2138,1999,2144,1989,2144,1999,2157,2158,2144,2157,2144,2158,2143,2159,2157,2160,2157,2159,2158,2160,1999,2001,1999,2160,2157,2161,2143,2158,2143,2161,2147,2161,2148,2147,2148,2161,2162,2163,2162,2161,2162,2163,2164,2163,2158,2159,2158,2163,2161,2165,2166,2167,2168,2167,2166,2166,2150,2168,2168,2150,2151,1996,2166,2011,2166,1996,2150,2010,2011,2165,2165,2011,2166,2168,2151,2169,2169,2151,2154,2167,2169,2170,2169,2167,2168,2170,2171,2172,2171,2170,2169,2169,2156,2171,2156,2169,2154,2173,2174,2175,2175,2176,2173,2019,2020,2174,2174,2173,2019,2001,2019,2173,2173,2160,2001,2160,2173,2176,2176,2159,2160,2177,2159,2176,2159,2177,2163,2177,2164,2163,2164,2177,2178,2178,2179,2180,2179,2178,2177,2177,2175,2179,2175,2177,2176,2028,2010,2181,2010,2165,2181,2181,2027,2028,2027,2181,2182,2183,2181,2184,2181,2183,2182,2165,2184,2181,2184,2165,2167,2184,2170,2185,2170,2184,2167,2183,2185,2186,2185,2183,2184,2186,2187,2188,2187,2186,2185,2185,2172,2187,2172,2185,2170,2189,2020,2035,2020,2189,2174,2174,2190,2175,2190,2174,2189,2191,2190,2189,2191,2189,2192,2036,2189,2035,2189,2036,2192,2179,2190,2193,2190,2179,2175,2180,2193,2194,2193,2180,2179,2194,2195,2196,2195,2194,2193,2193,2191,2195,2191,2193,2190,2197,2046,2198,2046,2197,2045,2199,2198,2200,2198,2199,2197,2200,2182,2183,2182,2200,2198,2027,2198,2046,2198,2027,2182,2201,2202,2203,2201,2203,2204,2205,2206,2207,2206,2205,2208,2200,2186,2202,2186,2200,2183,2199,2202,2201,2202,2199,2200,2209,2055,2056,2055,2209,2210,2036,2210,2192,2210,2036,2055,2192,2211,2191,2211,2192,2210,2210,2212,2211,2212,2210,2209,2213,2214,2215,2214,2213,2216,2216,2212,2214,2212,2216,2211,2195,2211,2216,2211,2195,2191,2217,2218,2219,2218,2217,2220,2221,2222,2223,2222,2221,2224,2197,2201,2225,2201,2197,2199,2226,2227,2228,2228,2229,2226,2062,2224,2221,2224,2062,2061,2230,2231,2232,2233,2232,2231,2230,2072,2231,2072,2230,2070,2234,2235,2236,2236,2237,2234,2237,2236,2223,2223,2222,2237,2238,2239,2240,2239,2238,2241,2242,2241,2238,2241,2242,2243,2244,2245,2246,2245,2244,2247,2248,2247,2249,2247,2248,2245,2250,2249,2251,2249,2250,2248,2252,2251,2253,2251,2252,2250,2253,2254,2255,2254,2253,2251,2251,2256,2254,2256,2251,2249,2257,2258,2259,2259,2258,2260,2261,2262,2263,2262,2261,2264,2265,2264,2261,2264,2265,2266,2259,2260,2267,2267,2260,2268,2263,2269,2270,2269,2263,2262,2271,2270,2272,2270,2271,2263,2272,2273,2274,2273,2272,2270,2270,2275,2273,2275,2270,2269,2276,2277,2278,2277,2276,2279,2280,2279,2276,2279,2280,2281,2253,2282,2252,2282,2253,2283,2283,2284,2282,2284,2283,2285,2286,2287,2288,2288,2287,2289,2290,2291,2292,2291,2290,2293,2273,2293,2290,2293,2273,2275,2288,2289,2294,2294,2289,2295,2285,2296,2284,2296,2285,2297,2297,2298,2296,2298,2297,2299,2299,2300,2301,2300,2299,2297,2297,2302,2300,2302,2297,2285,2292,2303,2304,2303,2292,2291,2305,2304,2306,2304,2305,2292,2306,2307,2308,2307,2306,2304,2304,2309,2307,2309,2304,2303,2310,2311,2312,2311,2310,2313,2314,2315,2311,2311,2313,2314,2301,2314,2313,2313,2299,2301,2299,2310,2298,2310,2299,2313,2316,2317,2318,2318,2317,2319,2309,2316,2307,2307,2316,2318,2320,2308,2318,2307,2318,2308,2321,2320,2319,2318,2319,2320,2322,2323,2324,2323,2322,2325,2326,2325,2327,2325,2326,2323,2328,2325,2329,2325,2328,2327,2330,2329,2322,2322,2329,2325,2331,2332,2333,2332,2334,2333,2335,2336,2331,2331,2333,2335,2335,2327,2328,2327,2335,2333,2327,2333,2334,2334,2326,2327,2337,2338,2339,2338,2337,2340,2341,2339,2342,2339,2341,2337,2342,2323,2326,2323,2342,2339,2339,2324,2323,2324,2339,2338,2343,2342,2344,2342,2343,2341,2345,2344,2346,2344,2345,2343,2346,2334,2332,2334,2346,2344,2344,2326,2334,2326,2344,2342,2347,2348,2349,2348,2347,2350,2351,2352,2347,2347,2349,2351,2353,2351,2349,2349,2354,2353,2349,2355,2354,2355,2349,2348,2356,2357,2358,2358,2357,2359,2354,2359,2357,2359,2354,2355,2354,2360,2353,2360,2354,2357,2361,2360,2356,2356,2360,2357,2362,2363,2364,2363,2362,2365,2350,2365,2348,2365,2350,2363,2348,2366,2355,2366,2348,2365,2365,2367,2366,2367,2365,2362,2366,2368,2369,2368,2366,2367,2355,2369,2359,2369,2355,2366,2359,2370,2358,2370,2359,2369,2369,2371,2370,2371,2369,2368,2372,2337,2341,2337,2372,2373,2373,2340,2337,2340,2373,2374,2375,2374,2373,2374,2375,2376,2377,2373,2372,2373,2377,2375,2378,2343,2345,2343,2378,2379,2379,2341,2343,2341,2379,2372,2380,2372,2379,2372,2380,2377,2381,2379,2378,2379,2381,2380,2382,2362,2383,2362,2382,2367,2384,2383,2385,2383,2384,2382,2385,2386,2387,2386,2385,2383,2383,2364,2386,2364,2383,2362,2368,2388,2371,2388,2368,2389,2389,2390,2388,2390,2389,2391,2391,2382,2384,2382,2391,2389,2367,2389,2368,2389,2367,2382,2392,2393,2394,2393,2392,2395,2396,2394,2397,2394,2396,2392,2397,2398,2399,2398,2397,2394,2394,2400,2398,2400,2394,2393,2393,2401,2400,2401,2393,2402,2402,2403,2401,2403,2402,2404,2405,2404,2402,2404,2405,2406,2395,2402,2393,2402,2395,2405,2407,2408,2409,2408,2407,2410,2410,2400,2408,2400,2410,2398,2411,2398,2410,2398,2411,2399,2412,2410,2407,2410,2412,2411,2408,2401,2413,2401,2408,2400,2409,2413,2414,2413,2409,2408,2414,2413,2415,2413,2416,2415,2413,2403,2416,2403,2413,2401,2417,2418,2419,2418,2417,2420,2420,2421,2418,2421,2420,2422,2423,2422,2420,2422,2423,2424,2425,2420,2417,2420,2425,2423,2418,2426,2427,2426,2418,2421,2419,2427,2428,2427,2419,2418,2428,2392,2396,2392,2428,2427,2427,2395,2392,2395,2427,2426,2250,2429,2248,2248,2429,2430,2429,2419,2430,2419,2429,2417,2431,2425,2429,2429,2425,2417,2431,2250,2252,2250,2431,2429,2430,2428,2432,2428,2430,2419,2245,2248,2430,2245,2430,2432,2246,2245,2432,2246,2432,2433,2432,2396,2433,2396,2432,2428,2434,2435,2436,2435,2434,2437,2438,2436,2439,2436,2438,2434,2440,2439,2436,2439,2440,2441,2436,2442,2440,2442,2436,2435,2435,2443,2442,2443,2435,2444,2444,2409,2443,2409,2444,2407,2445,2407,2444,2407,2445,2412,2437,2444,2435,2444,2437,2445,2269,2262,2446,2262,2447,2446,2275,2269,2448,2269,2446,2448,2448,2446,2438,2446,2434,2438,2446,2437,2434,2437,2446,2447,2447,2445,2437,2445,2447,2449,2449,2412,2445,2412,2449,2450,2266,2449,2264,2449,2266,2450,2264,2447,2262,2447,2264,2449,2451,2452,2453,2452,2451,2454,2455,2453,2456,2453,2455,2451,2456,2423,2425,2423,2456,2453,2453,2424,2423,2424,2453,2452,2431,2456,2425,2456,2431,2457,2457,2455,2456,2455,2457,2458,2282,2458,2457,2458,2282,2284,2252,2457,2431,2457,2252,2282,2459,2460,2461,2460,2459,2462,2441,2461,2439,2461,2441,2459,2439,2463,2438,2463,2439,2461,2461,2464,2463,2464,2461,2460,2448,2463,2465,2463,2448,2438,2275,2465,2293,2465,2275,2448,2293,2466,2291,2466,2293,2465,2465,2464,2466,2464,2465,2463,2377,2467,2375,2467,2377,2468,2375,2469,2376,2469,2375,2467,2469,2451,2455,2451,2469,2467,2467,2454,2451,2454,2467,2468,2376,2470,2471,2470,2376,2469,2296,2298,2471,2296,2471,2470,2284,2296,2470,2284,2470,2458,2458,2470,2469,2458,2469,2455,2472,2385,2473,2385,2472,2384,2462,2473,2460,2473,2462,2472,2460,2474,2464,2474,2460,2473,2385,2474,2473,2474,2385,2387,2475,2387,2476,2387,2475,2474,2466,2474,2475,2474,2466,2464,2291,2475,2303,2475,2291,2466,2303,2476,2309,2476,2303,2475,2477,2471,2298,2298,2310,2477,2374,2376,2471,2471,2477,2374,2374,2478,2340,2478,2374,2477,2478,2477,2310,2310,2312,2478,2476,2479,2309,2309,2479,2316,2479,2480,2316,2316,2480,2317,2386,2480,2479,2480,2386,2364,2386,2476,2387,2476,2386,2479,2481,2330,2482,2330,2322,2482,2312,2481,2478,2481,2482,2478,2340,2482,2338,2340,2478,2482,2482,2322,2338,2338,2322,2324,2483,2352,2484,2352,2483,2347,2363,2347,2483,2347,2363,2350,2364,2483,2480,2364,2363,2483,2480,2484,2317,2484,2480,2483,2433,2397,2485,2397,2433,2396,2486,2246,2433,2486,2433,2485,2487,2486,2485,2487,2485,2488,2485,2399,2488,2399,2485,2397,2450,2411,2412,2411,2450,2489,2489,2399,2411,2399,2489,2488,2487,2489,2490,2489,2487,2488,2490,2450,2266,2450,2490,2489,2491,2243,2242,2243,2491,2492,2493,2492,2491,2492,2493,2494,2495,2486,2487,2486,2495,2496,2496,2246,2486,2246,2496,2244,2267,2497,2498,2497,2267,2268,2499,2266,2265,2266,2499,2490,2495,2490,2499,2490,2495,2487,2498,2497,2493,2493,2497,2494,2500,2501,2502,2501,2500,2503,2503,2504,2501,2504,2503,2505,2440,2505,2503,2505,2440,2442,2441,2503,2500,2503,2441,2440,2506,2507,2508,2507,2506,2509,2509,2510,2507,2510,2509,2511,2501,2511,2509,2511,2501,2504,2502,2509,2506,2509,2502,2501,2443,2414,2512,2414,2443,2409,2442,2512,2505,2512,2442,2443,2505,2513,2504,2513,2505,2512,2512,2414,2513,2414,2415,2513,2511,2514,2510,2514,2511,2515,2516,2514,2515,2514,2516,2517,2415,2515,2513,2515,2415,2516,2513,2511,2504,2511,2513,2515,2518,2519,2520,2519,2518,2521,2424,2520,2422,2520,2424,2518,2422,2522,2421,2522,2422,2520,2520,2523,2522,2523,2520,2519,2524,2525,2526,2525,2524,2527,2521,2526,2519,2526,2521,2524,2519,2528,2523,2528,2519,2526,2526,2529,2528,2529,2526,2525,2426,2405,2395,2405,2426,2530,2530,2406,2405,2406,2530,2531,2522,2531,2530,2531,2522,2523,2421,2530,2426,2530,2421,2522,2528,2532,2533,2532,2528,2529,2531,2523,2528,2531,2528,2533,2406,2531,2533,2406,2533,2534,2534,2533,2532,2534,2532,2535,2536,2537,2538,2537,2536,2539,2403,2538,2416,2538,2403,2536,2416,2516,2415,2516,2416,2538,2538,2517,2516,2517,2538,2537,2536,2540,2539,2540,2536,2541,2541,2535,2540,2535,2541,2534,2404,2534,2541,2534,2404,2406,2403,2541,2536,2541,2403,2404,2500,2459,2441,2459,2500,2542,2542,2462,2459,2462,2542,2543,2544,2543,2542,2543,2544,2545,2502,2542,2500,2542,2502,2544,2452,2518,2424,2518,2452,2546,2546,2521,2518,2521,2546,2547,2548,2547,2546,2547,2548,2549,2454,2546,2452,2546,2454,2548,2391,2550,2390,2550,2391,2551,2543,2550,2551,2550,2543,2545,2462,2551,2472,2551,2462,2543,2551,2384,2472,2384,2551,2391,2552,2380,2381,2380,2552,2553,2553,2377,2380,2377,2553,2468,2454,2468,2553,2454,2553,2548,2548,2553,2552,2548,2552,2549,2554,2555,2556,2555,2554,2557,2529,2556,2532,2556,2529,2554,2532,2558,2535,2558,2532,2556,2556,2559,2558,2559,2556,2555,2560,2561,2562,2561,2560,2563,2527,2562,2525,2562,2527,2560,2525,2554,2529,2554,2525,2562,2562,2557,2554,2557,2562,2561,2564,2565,2566,2565,2564,2567,2567,2568,2565,2568,2567,2569,2514,2569,2567,2569,2514,2517,2510,2567,2564,2567,2510,2514,2570,2571,2572,2571,2570,2573,2573,2566,2571,2566,2573,2564,2507,2564,2573,2564,2507,2510,2508,2573,2570,2573,2508,2507,2555,2574,2559,2574,2555,2575,2575,2576,2574,2576,2575,2577,2578,2577,2575,2577,2578,2579,2557,2575,2555,2575,2557,2578,2561,2578,2557,2578,2561,2580,2580,2579,2578,2579,2580,2581,2582,2581,2580,2581,2582,2583,2563,2580,2561,2580,2563,2582,2565,2584,2585,2584,2565,2568,2566,2585,2586,2585,2566,2565,2586,2587,2588,2587,2586,2585,2585,2589,2587,2589,2585,2584,2571,2586,2590,2586,2571,2566,2572,2590,2591,2590,2572,2571,2591,2592,2593,2592,2591,2590,2590,2588,2592,2588,2590,2586,2594,2595,2596,2595,2594,2597,2597,2598,2595,2598,2597,2599,2574,2599,2597,2599,2574,2576,2559,2597,2594,2597,2559,2574,2600,2601,2602,2601,2600,2603,2576,2602,2599,2602,2576,2600,2599,2604,2598,2604,2599,2602,2602,2601,2604,2604,2601,2605,2606,2595,2607,2595,2606,2596,2568,2607,2584,2607,2568,2606,2584,2608,2589,2608,2584,2607,2607,2598,2608,2598,2607,2595,2609,2610,2611,2610,2609,2612,2604,2610,2612,2610,2604,2605,2608,2604,2612,2604,2608,2598,2589,2612,2609,2612,2589,2608,2558,2594,2613,2594,2558,2559,2535,2613,2540,2613,2535,2558,2540,2614,2539,2614,2540,2613,2613,2596,2614,2596,2613,2594,2615,2616,2617,2616,2615,2618,2618,2619,2616,2619,2618,2620,2621,2617,2622,2617,2621,2615,2621,2623,2624,2623,2621,2622,2625,2626,2627,2626,2625,2628,2625,2629,2628,2629,2625,2630,2631,165,2632,2632,2633,2631,2633,2634,2631,2634,2633,2635,2636,2637,2638,2638,2637,2639,2637,2640,2639,2639,2640,2641,2636,2642,2643,2642,2636,2638,2644,2642,2645,2642,2644,2643,2646,2647,2648,2648,2647,2649,2648,2650,2651,2650,2648,2649,2652,2653,177,2653,2652,2654,2655,2654,2652,2654,2655,2656,2657,2658,2659,2658,2657,2660,2661,2659,2658,2659,2661,2662,2663,2664,2665,2664,2666,2665,2667,2666,2664,2666,2667,2668,2669,2670,2671,2671,2670,2672,2670,2669,2235,2235,2234,2670,2673,2674,2675,2674,2673,2676,2676,2233,2674,2233,2676,2232,2677,2678,2679,2678,2677,2680,2678,2680,2681,2682,2681,2680,2683,2684,2685,2684,2683,2686,2685,2687,2683,2688,2687,2685,2689,2690,2691,2690,2689,2692,2690,2675,2691,2675,2690,2673,2693,2694,2695,2694,2693,2696,2693,2672,2696,2672,2693,2671,2697,2698,2699,2698,2697,2700,2701,2699,2702,2699,2701,2697,2702,2703,2704,2703,2702,2699,2699,2705,2703,2705,2699,2698,2706,2707,2708,2707,2706,2709,2710,2708,2711,2708,2710,2706,2711,2697,2701,2697,2711,2708,2708,2700,2697,2700,2708,2707,2712,2713,2714,2712,2714,2715,2709,2712,2707,2712,2709,2713,2707,2716,2700,2716,2707,2712,2712,2717,2716,2717,2712,2715,2718,2716,2717,2716,2718,2719,2700,2719,2698,2719,2700,2716,2720,2698,2719,2698,2720,2705,2721,2719,2718,2719,2721,2720,2722,2723,2724,2723,2722,2725,2724,2726,2722,2726,2724,2727,2728,2727,2724,2727,2728,2729,2724,2730,2728,2730,2724,2723,2731,2732,2733,2732,2731,2734,2725,2733,2723,2733,2725,2731,2723,2735,2730,2735,2723,2733,2733,2736,2735,2736,2733,2732,2737,2738,2739,2738,2737,2740,2737,2741,2740,2741,2737,2742,2742,2731,2725,2731,2742,2737,2737,2734,2731,2734,2737,2739,2742,2743,2741,2743,2742,2744,2744,2745,2743,2745,2744,2746,2722,2746,2744,2746,2722,2726,2744,2725,2722,2725,2744,2742,2747,2715,2714,2715,2747,2748,2748,2717,2715,2717,2748,2749,2750,2749,2748,2749,2750,2751,2752,2748,2747,2748,2752,2750,2753,2717,2749,2717,2753,2718,2753,2721,2718,2721,2753,2754,2753,2755,2754,2755,2753,2756,2749,2756,2753,2756,2749,2751,2740,2757,2738,2757,2740,2758,2758,2759,2757,2759,2758,2760,2760,2761,2762,2761,2760,2758,2741,2758,2740,2758,2741,2761,2763,2761,2741,2763,2741,2743,2761,2764,2762,2764,2761,2763,2763,2765,2764,2765,2763,2766,2763,2745,2766,2745,2763,2743,2767,2768,2769,2768,2767,2770,2770,2714,2768,2714,2770,2747,2771,2747,2770,2747,2771,2752,2772,2770,2767,2770,2772,2771,2773,2774,2775,2774,2773,2776,2776,2777,2774,2777,2776,2778,2757,2778,2776,2778,2757,2759,2738,2776,2773,2776,2738,2757,2779,2750,2752,2750,2779,2780,2780,2751,2750,2751,2780,2781,2782,2781,2780,2781,2782,2783,2784,2780,2779,2780,2784,2782,2785,2751,2781,2751,2785,2756,2785,2755,2756,2755,2785,2786,2785,2787,2786,2787,2785,2788,2788,2781,2783,2781,2788,2785,2760,2789,2759,2789,2760,2790,2791,2790,2792,2790,2791,2789,2792,2793,2794,2793,2792,2790,2790,2762,2793,2762,2790,2760,2795,2793,2762,2762,2764,2795,2796,2794,2793,2796,2793,2795,2797,2796,2795,2795,2798,2797,2795,2765,2798,2765,2795,2764,2799,2782,2784,2799,2784,2800,2801,2783,2782,2801,2782,2799,2801,2799,2563,2563,2799,2582,2582,2799,2800,2582,2800,2583,2802,2788,2783,2802,2783,2801,2787,2802,2803,2802,2787,2788,2803,2560,2527,2560,2803,2802,2802,2563,2560,2563,2802,2801,2804,2791,2792,2791,2804,2805,2591,2805,2804,2805,2591,2593,2572,2804,2806,2804,2572,2591,2806,2792,2794,2792,2806,2804,2807,2794,2796,2794,2807,2806,2807,2572,2806,2572,2807,2570,2808,2570,2807,2570,2808,2508,2807,2797,2808,2797,2807,2796,2809,2803,2810,2803,2809,2787,2547,2549,2809,2547,2809,2810,2547,2524,2521,2524,2547,2810,2810,2527,2524,2527,2810,2803,2811,2808,2797,2808,2811,2812,2812,2508,2808,2508,2812,2506,2544,2506,2812,2506,2544,2502,2544,2811,2545,2811,2544,2812,2786,2813,2755,2813,2786,2814,2814,2381,2813,2381,2814,2552,2549,2552,2814,2549,2814,2809,2809,2814,2786,2809,2786,2787,2798,2815,2816,2815,2798,2765,2811,2798,2816,2798,2811,2797,2545,2816,2550,2816,2545,2811,2390,2816,2815,2816,2390,2550,2817,2721,2754,2721,2817,2818,2817,2345,2818,2345,2817,2378,2813,2378,2817,2378,2813,2381,2755,2817,2754,2817,2755,2813,2819,2766,2745,2819,2745,2820,2765,2819,2815,2819,2765,2766,2388,2815,2819,2815,2388,2390,2371,2819,2820,2819,2371,2388,2818,2720,2721,2720,2818,2821,2821,2705,2720,2705,2821,2822,2822,2346,2332,2346,2822,2821,2346,2821,2818,2818,2345,2346,2746,2820,2745,2820,2746,2823,2370,2820,2823,2820,2370,2371,2824,2358,2823,2823,2358,2370,2726,2823,2746,2823,2726,2824,2703,2822,2825,2822,2703,2705,2704,2825,2826,2825,2704,2703,2336,2826,2825,2825,2331,2336,2825,2822,2331,2822,2332,2331,2727,2824,2726,2824,2727,2827,2827,2356,2824,2824,2356,2358,2361,2827,2828,2827,2361,2356,2729,2827,2727,2827,2729,2828,2829,2830,2831,2830,2829,2832,2833,2834,2832,2832,2829,2833,2835,2836,128,2836,2835,2837,2831,2837,2835,2837,2831,2830,2838,2839,2840,2839,2841,2840,2692,2840,2841,2840,2692,2689,2842,2843,2844,2843,2842,2845,2843,2640,2844,2640,2843,2846,2847,2848,2849,2848,2847,2850,2846,2850,2851,2850,2846,2848,2852,129,2853,2853,2854,2852,2854,2849,2852,2849,2854,2847,2855,2856,2857,2857,2856,2858,2619,2856,2855,2856,2619,2833,2687,2859,2860,2859,2687,2861,2862,2860,2859,2860,2862,143,2863,2769,2229,2769,2863,2767,2863,2864,2767,2767,2864,2772,2865,2866,2863,2863,2866,2864,2865,2229,2228,2229,2865,2863,2867,2868,2775,2775,2774,2867,2869,2870,2868,2868,2867,2869,2871,2869,2867,2867,2872,2871,2872,2867,2774,2774,2777,2872,2873,2667,2874,2667,2873,2875,2874,2876,2873,2876,2874,142,139,2877,2878,139,2878,142,136,2879,2877,136,2877,139,2880,2881,2882,2880,2882,2883,2635,2880,2884,2880,2635,2881,2885,2886,2887,2888,2887,2886,2885,158,2886,158,2885,2889,146,2890,2891,2890,146,143,149,2891,2892,2891,149,146,2893,2894,2895,2894,2893,2896,2893,2656,2897,2656,2893,2895,2898,2899,2900,2899,2898,2901,2901,2898,156,2901,156,2902,2903,163,160,163,2903,2904,2889,160,158,160,2889,2903,2905,2906,2907,2906,2905,2908,2908,2909,2906,2909,2908,2910,1954,2910,2908,2910,1954,1877,1955,2908,2905,2908,1955,1954,2911,2912,2913,2912,2911,2914,1946,2913,1944,2913,1946,2911,1944,2915,1868,2915,1944,2913,2913,2916,2915,2916,2913,2912,1876,1705,2917,1705,1876,1692,1877,2917,2910,2917,1877,1876,2910,2918,2909,2918,2910,2917,2917,1707,2918,1707,2917,1705,1866,1697,1688,1697,1866,2919,2919,1700,1697,1700,2919,2920,2915,2920,2919,2920,2915,2916,1868,2919,1866,2919,1868,2915,2921,2922,2923,2922,2921,2924,2924,1724,2922,1724,2924,1722,2918,1722,2924,1722,2918,1707,2909,2924,2921,2924,2909,2918,2925,2926,2927,2926,2925,2928,2928,2916,2926,2916,2928,2920,2920,1719,1700,1719,2920,2928,1720,2928,2925,2928,1720,1719,2906,2921,2929,2921,2906,2909,2907,2929,2930,2929,2907,2906,2930,2931,2932,2931,2930,2929,2929,2923,2931,2923,2929,2921,2933,152,151,2933,151,2934,2902,156,152,2902,152,2933,2935,163,2904,2935,2936,163,2688,2936,2935,2688,2937,2936,2926,2912,2938,2912,2926,2916,2927,2938,2939,2938,2927,2926,2939,2940,2941,2940,2939,2938,2938,2914,2940,2914,2938,2912,2942,151,2943,151,2942,2934,2668,2943,2944,2943,2668,2942,2684,2679,2945,2945,2685,2684,2685,2945,2937,2937,2688,2685,2946,2947,2879,2946,2879,136,2883,2882,2947,2883,2947,2946,2948,2662,2661,2662,2948,2949,2949,2948,2950,2950,2948,2951,2952,2892,2953,2892,2952,149,2896,2953,2894,2953,2896,2952,2682,2954,2681,2954,2682,2955,2956,2954,2955,2954,2956,2957,2958,2959,2960,2959,2958,2961,2962,2960,2963,2960,2962,2958,2963,2964,2965,2964,2963,2960,2960,2966,2964,2966,2960,2959,2964,2967,2968,2967,2964,2966,2965,2968,2969,2968,2965,2964,2969,2970,2971,2970,2969,2968,2968,2972,2970,2972,2968,2967,2973,2974,2975,2974,2973,2976,2977,2975,2978,2975,2977,2973,2978,2979,2980,2979,2978,2975,2975,2981,2979,2981,2975,2974,2982,2978,2983,2978,2982,2977,2984,2983,2985,2983,2984,2982,2985,2986,2987,2986,2985,2983,2983,2980,2986,2980,2983,2978,2988,2961,2958,2961,2988,2989,2988,2990,2989,2990,2988,2991,2992,2988,2993,2988,2992,2991,2993,2958,2962,2958,2993,2988,2994,2965,2995,2965,2994,2963,2996,2963,2994,2963,2996,2962,2997,2994,2998,2994,2997,2996,2998,2995,2999,2995,2998,2994,3000,2962,2996,2962,3000,2993,3001,2993,3000,2993,3001,2992,3002,3000,3003,3000,3002,3001,3003,2996,2997,2996,3003,3000,2974,2976,3004,2976,3005,3004,2981,2974,3006,2974,3004,3006,3006,3004,3007,3004,3008,3007,3004,3009,3008,3009,3004,3005,3010,3011,2980,2980,2979,3010,3012,3013,3011,3011,3010,3012,3014,3012,3010,3010,3015,3014,3015,3010,2979,2979,2981,3015,3015,2981,3016,2981,3006,3016,3017,3014,3015,3015,3016,3017,3017,3016,3018,3016,3019,3018,3016,3006,3019,3006,3007,3019,3020,2992,3001,2992,3020,2227,3021,2227,3020,2227,3021,2228,3022,3023,3020,3020,3023,3021,3022,3001,3002,3001,3022,3020,3024,3025,3026,3026,3027,3024,3021,3023,3025,3025,3024,3021,2228,3021,3024,3024,2865,2228,2865,3024,3027,3027,2866,2865,3019,3007,3028,3007,3029,3028,3018,3019,3030,3019,3028,3030,3030,3028,3031,3028,3032,3031,3028,3029,3032,3029,2870,3032,3033,3034,3035,3034,3033,3036,2869,3036,3033,3036,2869,2871,2870,3033,3032,3033,2870,2869,3032,3035,3031,3035,3032,3033,3037,2999,3038,2999,2995,3038,3039,3037,3040,3037,3038,3040,3040,3038,2971,3038,2969,2971,3038,2995,2969,2995,2965,2969,3041,3013,3042,3013,3041,3011,2986,3011,3041,3011,2986,2980,2987,3041,3043,3041,2987,2986,3043,3042,3044,3042,3043,3041,3045,3046,3047,3046,3045,3048,3049,3047,3050,3047,3049,3045,3050,2864,2866,2864,3050,3047,3047,2772,2864,2772,3047,3046,3051,3050,3052,3050,3051,3049,3053,3052,3054,3052,3053,3051,3054,3027,3026,3027,3054,3052,3052,2866,3027,2866,3052,3050,3055,3056,3057,3056,3055,3058,2777,3057,2872,3057,2777,3055,2872,3059,2871,3059,2872,3057,3057,3060,3059,3060,3057,3056,3059,3061,3062,3061,3059,3060,2871,3062,3036,3062,2871,3059,3036,3063,3034,3063,3036,3062,3062,3064,3063,3064,3062,3061,3065,2779,3066,2779,3065,2784,3048,3066,3046,3066,3048,3065,3046,2771,2772,2771,3046,3066,3066,2752,2771,2752,3066,2779,2789,3067,3068,3067,2789,2791,2759,3068,2778,3068,2759,2789,2778,3055,2777,3055,2778,3068,3068,3058,3055,3058,3068,3067,3069,3070,3071,3070,3069,3072,3073,3071,3074,3071,3073,3069,3074,3045,3049,3045,3074,3071,3071,3048,3045,3048,3071,3070,3070,3065,3048,3065,3070,3075,3075,2784,3065,2784,3075,2800,2800,3076,2583,3076,2800,3075,3072,3075,3070,3075,3072,3076,3077,3078,3079,3078,3077,3080,3058,3079,3056,3079,3058,3077,3056,3081,3060,3081,3056,3079,3079,3082,3081,3082,3079,3078,3067,3077,3058,3077,3067,3083,3083,3080,3077,3080,3083,3084,2805,3084,3083,3084,2805,2593,2791,3083,3067,3083,2791,2805,3085,3069,3073,3069,3085,3086,3086,3072,3069,3072,3086,3087,3087,3088,3089,3088,3087,3086,3090,3086,3085,3086,3090,3088,3076,3087,3091,3087,3076,3072,2583,3091,2581,3091,2583,3076,2581,3092,2579,3092,2581,3091,3091,3089,3092,3089,3091,3087,3078,3093,3082,3093,3078,3094,3094,3095,3093,3095,3094,3096,3097,3096,3094,3096,3097,3098,3080,3094,3078,3094,3080,3097,3084,3097,3080,3097,3084,3099,3099,3098,3097,3098,3099,3100,2592,3100,3099,3100,2592,2588,2593,3099,3084,3099,2593,2592,3089,3088,3101,3089,3101,3102,3102,3101,3103,3102,3103,2603,3104,3105,3101,3101,3105,3103,3090,3104,3088,3088,3104,3101,3106,3107,3098,3096,3098,3107,3095,3096,3108,3096,3107,3108,3108,3107,3109,3107,3110,3109,2611,3110,3106,3107,3106,3110,3051,3111,3112,3111,3051,3053,3112,3049,3051,3049,3112,3074,3074,3113,3073,3113,3074,3112,3112,3114,3113,3114,3112,3111,3061,3115,3064,3115,3061,3116,3116,3117,3115,3117,3116,3118,3081,3118,3116,3118,3081,3082,3060,3116,3061,3116,3060,3081,3073,3119,3085,3119,3073,3120,3121,3085,3119,3085,3121,3090,3119,3122,3121,3122,3119,3123,3123,3119,3120,3123,3120,3124,3120,3125,3124,3125,3120,3126,3126,3127,3125,3127,3126,3128,3113,3128,3126,3128,3113,3114,3073,3113,3120,3120,3113,3126,3082,3129,3130,3129,3082,3093,3123,3130,3129,3130,3123,3124,3129,3122,3123,3122,3129,3131,3131,3129,3093,3131,3093,3095,3130,3125,3132,3125,3130,3124,3118,3082,3130,3130,3132,3118,3118,3133,3117,3133,3118,3132,3132,3127,3133,3127,3132,3125,3134,3121,3122,3121,3134,3135,3135,3090,3121,3090,3135,3104,3136,3104,3135,3104,3136,3105,3137,3135,3134,3135,3137,3136,3134,3131,3138,3131,3134,3122,3137,3138,3139,3138,3137,3134,3139,3108,3109,3108,3139,3138,3138,3095,3108,3095,3138,3131,3140,3136,3137,3136,3140,3141,3141,3105,3136,3105,3141,3103,2603,3141,2601,3141,2603,3103,2605,3141,3140,3141,2605,2601,3142,2632,167,167,2632,165,167,169,3142,169,3143,3142,2951,3144,2950,3144,2951,3145,3145,3146,3144,3146,3145,3147,3148,2665,2666,2665,3148,2660,2666,2944,3148,2944,2666,2668,175,2653,3149,2653,175,177,3149,176,175,176,3149,3150,3151,2957,2956,2957,3151,3152,3153,3152,3151,3152,3153,3154,3155,3156,3157,3156,3155,3158,3153,3157,3154,3157,3153,3155,3159,3160,3161,3160,3162,3161,3146,3147,3159,3146,3159,3161,3163,3164,2677,3163,2677,2686,3164,3165,3166,3165,3164,3163,126,128,3167,128,2836,3167,3168,126,3167,126,3168,127,3169,3168,3170,3168,3169,127,3160,3169,3162,3169,3170,3162,3171,129,131,129,3171,2853,3172,131,134,131,3172,3171,3173,3172,134,3172,3173,3174,3173,3158,3174,3158,3173,3156,3175,2706,2710,2706,3175,3176,3176,2709,2706,2709,3176,3177,2989,3177,3176,3177,2989,2990,2961,3176,3175,3176,2961,2989,2732,3178,2736,3178,2732,3179,3179,2976,3178,2976,3179,3005,3180,3005,3179,3005,3180,3009,2734,3179,2732,3179,2734,3180,3181,3182,3183,3182,3181,72,3184,3181,3185,3181,3183,3185,2970,3185,3183,3185,2970,2972,2971,3183,3182,3183,2971,2970,3040,3182,3186,3182,3040,2971,3039,3186,3187,3186,3039,3040,3187,69,67,69,3187,3186,3182,69,3186,69,3182,72,3188,3189,73,3189,3188,3190,3190,2987,3189,2987,3190,2985,3191,2985,3190,2985,3191,2984,3192,3191,3188,3188,3191,3190,3189,3043,3193,3043,3189,2987,3189,76,73,76,3189,3193,76,3194,79,3194,76,3193,3193,3044,3194,3044,3193,3043,3195,3181,3196,3181,3195,72,3197,3196,3198,3196,3197,3195,3198,3199,3200,3199,3198,3196,3196,3184,3199,3184,3196,3181,3195,70,72,70,3195,3201,3201,71,70,71,3201,3202,3203,3202,3201,3202,3203,3204,3197,3201,3195,3201,3197,3203,3188,3205,3206,3205,3188,73,3192,3206,3207,3206,3192,3188,3207,3208,3209,3208,3207,3206,3206,3210,3208,3210,3206,3205,75,3205,73,3205,75,3211,3211,3210,3205,3210,3211,3212,3213,3212,3211,3212,3213,3214,78,3211,75,3211,78,3213,3203,3215,3216,3203,3216,3204,3197,3217,3215,3197,3215,3203,3200,3218,3219,3200,3219,3198,3198,3219,3217,3198,3217,3197,3220,3200,3199,3200,3220,3218,3199,3221,3220,3221,3199,3184,3184,3222,3221,3222,3184,3185,2972,3222,3185,3222,2972,3223,3212,3224,3225,3224,3212,3214,3210,3225,3226,3225,3210,3212,3209,3227,3228,3227,3209,3208,3208,3226,3227,3226,3208,3210,3229,3207,3209,3209,3228,3229,3207,3229,3230,3207,3230,3192,3192,3230,3231,3192,3231,3191,3231,2984,3191,2984,3231,3232,3233,2657,3234,2657,3233,2663,3233,3234,3235,3236,3235,3234,3237,3165,3238,3165,3237,3166,3239,3240,3238,3240,3237,3238,3235,3241,3242,3241,3235,3236,3242,3243,3244,3243,3242,3241,3245,3246,3247,3246,3245,3248,3245,2851,3248,2851,3245,3249,2931,3250,3251,3250,2931,2923,2932,3251,3252,3251,2932,2931,3251,3253,3252,3253,3251,3254,3250,3254,3251,3254,3250,3255,3256,2939,3257,2939,3256,2927,3256,3258,3259,3258,3256,3257,3257,3260,3258,3260,3257,3261,3257,2941,3261,2941,3257,2939,2922,1738,3262,1738,2922,1724,2923,3262,3250,3262,2923,2922,3262,3255,3250,3255,3262,3263,1738,3263,3262,3263,1738,1737,1736,2925,3264,2925,1736,1720,1736,3265,1735,3265,1736,3264,3264,3259,3265,3259,3264,3256,3264,2927,3256,2927,3264,2925,3266,3267,3268,3269,3268,3267,3267,3266,2834,3267,2834,3270,3271,3272,3273,3273,3274,3271,3274,3273,3247,3247,3246,3274,3275,3276,3277,3276,3275,3278,3278,3269,3276,3269,3278,3268,3239,3279,3240,3279,3239,3280,3280,3281,3279,3281,3280,3282,3283,3284,3285,3284,3283,3286,3285,3255,3283,3255,3285,3254,3287,3254,3285,3254,3287,3253,3285,3288,3287,3288,3285,3284,3289,3290,3291,3290,3289,3292,3293,3291,3294,3291,3293,3289,3294,3258,3260,3258,3294,3291,3291,3259,3258,3259,3291,3290,3283,3263,3295,3263,3283,3255,3286,3295,3296,3295,3286,3283,3296,3297,3298,3297,3296,3295,3295,1737,3297,1737,3295,3263,3265,3290,3299,3290,3265,3259,3299,1735,3265,1735,3299,3300,3300,3301,3302,3301,3300,3299,3299,3292,3301,3292,3299,3290,3297,1740,3303,1740,3297,1737,3298,3303,3304,3303,3298,3297,3304,1745,1747,1745,3304,3303,3303,1731,1745,1731,3303,1740,3300,1733,1735,1733,3300,3305,3305,1728,1733,1728,3305,1741,1741,3306,1744,3306,1741,3305,3305,3302,3306,3302,3305,3300,3307,3304,3308,3304,3307,3298,3308,3309,3307,3309,3308,3310,1753,3310,3308,3310,1753,1755,3308,1747,1753,1747,3308,3304,3306,3311,3312,3311,3306,3302,1744,3312,1749,3312,1744,3306,1749,3313,1752,3313,1749,3312,3312,3314,3313,3314,3312,3311,3315,3316,3317,3316,3315,3318,3309,3317,3307,3317,3309,3315,3307,3296,3298,3296,3307,3317,3296,3317,3316,3316,3286,3296,3319,3320,3321,3320,3319,3322,3301,3320,3322,3320,3301,3292,3311,3301,3322,3301,3311,3302,3314,3322,3319,3322,3314,3311,3284,3286,3323,3286,3324,3323,3325,3288,3284,3284,3323,3325,3325,3326,3327,3326,3325,3323,3323,86,3326,86,3323,3324,3324,3328,86,3328,3324,3329,3329,3330,3328,3330,3329,3331,3316,3331,3329,3331,3316,3318,3316,3324,3286,3324,3316,3329,3332,3292,3289,3292,3332,3333,3332,87,3333,87,3332,3334,3335,3334,3332,3334,3335,3336,3335,3289,3293,3289,3335,3332,3333,3337,3338,3337,3333,87,3320,3292,3333,3320,3333,3338,3320,3339,3321,3339,3320,3338,3338,3340,3339,3340,3338,3337,3341,3342,3272,3272,3271,3341,3282,3341,3281,3341,3282,3342,3343,3344,3244,3244,3243,3343,3344,3343,3345,3344,3345,3346,3347,3277,3348,3277,3347,3275,3347,3346,3345,3346,3347,3348,3349,3350,2887,2887,2888,3349,3351,3350,3349,3350,3351,3352,2329,3353,2328,3353,2329,3354,2330,3354,2329,3354,2330,2214,2335,2328,3355,2328,3353,3355,2336,3355,3356,3355,2336,2335,3357,2351,2353,2351,3357,2225,2225,2352,2351,2352,2225,2201,3357,2360,3358,2360,3357,2353,3358,2361,3359,2361,3358,2360,2966,3360,2967,3360,2966,3361,2967,3223,2972,3223,2967,3360,2959,3361,2966,3361,2959,3362,2961,3362,2959,3362,2961,3363,3364,2977,2982,2977,3364,3365,3232,2982,2984,2982,3232,3364,3365,2973,2977,2973,3365,3366,2973,3366,2976,2976,3366,3367,3202,3368,3369,3368,3202,3204,71,3369,3370,3369,71,3202,3370,3371,3372,3371,3370,3369,3369,3373,3371,3373,3369,3368,3374,66,71,66,3374,3375,3375,67,66,67,3375,3376,3377,3376,3375,3376,3377,3378,3379,3375,3374,3375,3379,3377,3380,3381,3382,3381,3380,3383,3383,3372,3381,3372,3383,3370,3374,3370,3383,3370,3374,71,3379,3383,3380,3383,3379,3374,3213,3384,3214,3384,3213,3385,3385,3386,3384,3386,3385,3387,3388,3387,3385,3387,3388,3389,78,3385,3213,3385,78,3388,3390,77,3391,77,3390,78,3392,3391,3393,3391,3392,3390,3393,3394,3395,3394,3393,3391,3391,79,3394,79,3391,77,3396,3397,3398,3397,3396,3399,3392,3398,3390,3398,3392,3396,3390,3388,78,3388,3390,3398,3398,3389,3388,3389,3398,3397,3400,3401,3378,3378,3401,3376,3401,67,3376,67,3401,3187,3402,3187,3401,3187,3402,3039,3400,3403,3402,3400,3402,3401,3404,3395,3405,3395,3394,3405,3405,3406,3404,3407,3404,3406,3194,3406,3405,3406,3194,3044,79,3405,3394,3405,79,3194,3408,3409,3410,3409,3408,3411,3403,3410,3402,3410,3403,3408,3402,3410,3039,3410,3037,3039,3410,3409,3037,3409,2999,3037,3412,3413,3414,3413,3412,3415,3042,3413,3415,3413,3042,3013,3044,3415,3406,3415,3044,3042,3407,3415,3412,3415,3407,3406,3400,3416,3417,3416,3400,3378,3403,3417,3418,3417,3403,3400,3418,3419,3420,3419,3418,3417,3417,3421,3419,3421,3417,3416,3408,3418,3422,3418,3408,3403,3411,3422,3423,3422,3411,3408,3423,3424,3425,3424,3423,3422,3422,3420,3424,3420,3422,3418,3426,3404,3427,3404,3426,3395,3428,3427,3429,3427,3428,3426,3429,3430,3431,3430,3429,3427,3427,3407,3430,3407,3427,3404,3430,3412,3432,3412,3430,3407,3431,3432,3433,3432,3431,3430,3433,3434,3435,3434,3433,3432,3432,3414,3434,3414,3432,3412,3377,3436,3437,3436,3377,3379,3378,3437,3416,3437,3378,3377,3416,3438,3421,3438,3416,3437,3437,3439,3438,3439,3437,3436,3440,3393,3441,3393,3440,3392,3442,3441,3443,3441,3442,3440,3443,3426,3428,3426,3443,3441,3441,3395,3426,3395,3441,3393,3444,3445,3446,3445,3444,3447,3447,3382,3445,3382,3447,3380,3436,3380,3447,3380,3436,3379,3439,3447,3444,3447,3439,3436,3448,3449,3450,3449,3448,3451,3442,3450,3440,3450,3442,3448,3440,3396,3392,3396,3440,3450,3450,3399,3396,3399,3450,3449,3452,2999,3409,2999,3452,2998,3453,2998,3452,2998,3453,2997,3454,3452,3455,3452,3454,3453,3455,3409,3411,3409,3455,3452,3456,3457,3458,3457,3459,3458,3458,3425,3456,3425,3458,3423,3423,3455,3411,3455,3423,3458,3458,3454,3455,3454,3458,3459,3460,3413,3013,3013,3012,3460,3461,3414,3413,3413,3460,3461,3462,3461,3460,3460,3463,3462,3463,3460,3012,3012,3014,3463,3464,3465,3466,3465,3464,3467,3464,3462,3467,3462,3464,3461,3434,3461,3464,3461,3434,3414,3435,3464,3466,3464,3435,3434,3468,3022,3469,3022,3468,3023,3468,3470,3471,3470,3468,3469,3472,3470,3469,3472,3469,3473,3469,3002,3473,3002,3469,3022,3474,3475,3476,3475,3474,3477,3478,3476,3479,3476,3478,3474,3479,3470,3472,3470,3479,3476,3476,3471,3470,3471,3476,3475,3026,3480,3481,3480,3026,3025,3482,3481,3480,3481,3482,3483,3480,3471,3482,3471,3480,3468,3480,3023,3468,3023,3480,3025,3484,3483,3482,3483,3484,3485,3486,3485,3484,3486,3487,3485,3477,3486,3484,3477,3484,3475,3475,3484,3482,3475,3482,3471,3030,3488,3489,3488,3030,3031,3018,3489,3490,3489,3018,3030,3491,3489,3492,3489,3491,3490,3488,3492,3489,3492,3488,3493,3494,3495,3496,3495,3494,3497,3497,3493,3495,3493,3497,3492,3498,3492,3497,3492,3498,3491,3499,3497,3494,3497,3499,3498,3034,3500,3035,3500,3034,3501,3031,3500,3488,3500,3031,3035,3500,3493,3488,3493,3500,3502,3502,3500,3501,3502,3501,3503,3504,3502,3503,3504,3503,3505,3495,3502,3504,3502,3495,3493,3496,3504,3506,3504,3496,3495,3506,3505,3507,3506,3504,3505,3481,3483,3508,3483,3509,3508,3026,3481,3510,3481,3508,3510,3511,3510,3508,3508,3512,3511,3508,3509,3512,3509,3513,3512,3485,3509,3483,3509,3485,3514,3514,3513,3509,3513,3514,3515,3516,3515,3514,3515,3516,3517,3487,3514,3485,3514,3487,3516,3501,3518,3503,3503,3518,3519,3518,3520,3519,3519,3520,3521,3522,3523,3518,3518,3523,3520,3034,3522,3501,3501,3522,3518,3505,3519,3524,3519,3505,3503,3507,3524,3525,3524,3507,3505,3525,3526,3527,3526,3525,3524,3524,3521,3526,3521,3524,3519,3111,3528,3114,3528,3111,3529,3529,3530,3528,3528,3530,3531,3532,3529,3533,3529,3532,3530,3053,3529,3111,3529,3053,3533,3128,3114,3534,3114,3528,3534,3127,3128,3535,3128,3534,3535,3535,3536,3537,3536,3535,3534,3534,3531,3536,3531,3534,3528,3115,3538,3539,3538,3115,3117,3064,3539,3540,3539,3064,3115,3541,3540,3539,3539,3542,3541,3542,3539,3538,3538,3543,3542,3133,3544,3117,3117,3544,3538,3544,3543,3538,3543,3544,3545,3535,3545,3544,3545,3535,3537,3127,3535,3133,3133,3535,3544,3533,3054,3546,3054,3533,3053,3547,3533,3546,3533,3547,3532,3510,3547,3546,3547,3510,3511,3054,3026,3510,3054,3510,3546,3063,3540,3548,3540,3063,3064,3063,3522,3034,3522,3063,3548,3522,3549,3523,3549,3522,3548,3549,3548,3540,3549,3540,3541,3473,3003,3550,3003,3473,3002,3551,3472,3473,3551,3473,3550,3550,3454,3551,3454,3550,3453,3550,2997,3453,2997,3550,3003,3552,3479,3553,3479,3552,3478,3457,3552,3459,3552,3553,3459,3459,3551,3454,3551,3459,3553,3553,3472,3551,3472,3553,3479,3017,3490,3554,3490,3017,3018,3014,3554,3463,3554,3014,3017,3554,3462,3463,3462,3554,3555,3555,3490,3491,3490,3555,3554,3556,3498,3499,3498,3556,3557,3557,3491,3498,3491,3557,3555,3467,3555,3557,3555,3467,3462,3467,3556,3465,3556,3467,3557,2900,2899,3558,3559,3558,2899,3560,3561,3559,3561,3558,3559,3562,3352,3351,3352,3562,3563,3564,3563,3562,3563,3564,3565,82,3566,3567,3566,82,81,3326,86,82,3326,82,3567,3327,3326,3567,3327,3567,3568,3567,3569,3568,3569,3567,3566,3570,3571,3560,3560,3571,3561,3572,3573,3570,3570,3573,3571,3574,3575,3576,3577,3576,3575,3574,3564,3575,3564,3574,3565,3578,88,3579,88,3578,93,3579,3580,3578,3580,3579,3581,3336,3579,3334,3579,3336,3581,87,3334,88,88,3334,3579,3328,84,86,84,3328,3582,3582,85,84,85,3582,3583,3584,3583,3582,3583,3584,3585,3330,3584,3328,3328,3584,3582,90,3337,87,3337,90,3586,3340,3337,3587,3337,3586,3587,3587,3588,3589,3588,3587,3586,92,3586,90,3586,92,3588,3590,3591,3592,3591,3590,100,3318,3592,3331,3592,3318,3590,3331,3593,3330,3593,3331,3592,3592,3594,3593,3594,3592,3591,3595,99,3596,99,3595,98,3309,3596,3315,3596,3309,3595,3315,3590,3318,3590,3315,3596,3596,100,3590,100,3596,99,3597,3598,103,3598,3597,3599,3599,3600,3598,3600,3599,3601,3339,3601,3599,3601,3339,3340,3321,3599,3597,3599,3321,3339,3602,102,105,102,3602,3603,3603,103,102,103,3603,3597,3319,3597,3603,3597,3319,3321,3314,3603,3602,3603,3314,3319,3310,3595,3309,3595,3310,3604,3604,98,3595,98,3604,3605,1761,3605,3604,3605,1761,1763,1755,3604,3310,3604,1755,1761,3313,3602,3606,3602,3313,3314,1752,3606,1757,3606,1752,3313,1757,3607,1760,3607,1757,3606,3606,105,3607,105,3606,3602,3605,3608,98,3608,3605,3609,3609,3610,3608,3610,3609,3611,1769,3611,3609,3611,1769,1771,1763,3609,3605,3609,1763,1769,3612,3607,105,3607,3612,3613,3613,1760,3607,1760,3613,1765,3614,1765,3613,1765,3614,1768,3615,3613,3612,3613,3615,3614,97,3616,95,3616,97,3617,3617,3618,3616,3618,3617,3619,3619,3608,3610,3608,3619,3617,98,3617,97,3617,98,3608,3620,106,107,106,3620,3621,3621,105,106,105,3621,3612,3622,3612,3621,3612,3622,3615,3623,3621,3620,3621,3623,3622,3624,3625,3626,3625,3624,113,95,3626,96,3626,95,3624,96,3591,100,3591,96,3626,3626,3594,3591,3594,3626,3625,3627,3628,3629,3628,3627,120,3600,3629,3598,3629,3600,3627,3598,104,103,104,3598,3629,3629,107,104,107,3629,3628,3630,3631,3632,3631,3630,3633,3632,3634,3630,3634,3632,3635,3625,3635,3632,3635,3625,113,3594,3632,3631,3632,3594,3625,3631,3593,3594,3593,3631,3636,3636,3330,3593,3330,3636,3584,3637,3584,3636,3584,3637,3585,3633,3636,3631,3636,3633,3637,3638,3639,3640,3639,3638,3641,3600,3640,3627,3640,3600,3638,3627,3642,120,3642,3627,3640,3640,3643,3642,3643,3640,3639,3601,3638,3600,3638,3601,3644,3644,3641,3638,3641,3644,3645,3587,3645,3644,3645,3587,3589,3340,3644,3601,3644,3340,3587,3616,3646,3647,3646,3616,3618,95,3647,3624,3647,95,3616,3647,113,3624,113,3647,110,3647,108,110,108,3647,3646,3648,3620,3649,3620,3648,3623,121,3649,119,3649,121,3648,3649,120,119,120,3649,3628,3649,107,3628,107,3649,3620,3650,3651,3652,3651,3650,3653,3650,112,114,112,3650,3652,112,3635,113,3635,112,3652,3652,3634,3635,3634,3652,3651,3654,3655,3656,3655,3654,3657,3656,3643,3654,3643,3656,3642,117,3642,3656,3642,117,120,3655,117,3656,117,3655,115,3637,3658,3585,3658,3637,3659,3659,3660,3658,3660,3659,3661,3662,3661,3659,3661,3662,3663,3662,3637,3633,3637,3662,3659,2663,2660,2657,2660,2663,2665,2826,3356,3664,3356,2826,2336,3665,2826,3664,2826,3665,2704,2620,2834,2619,2619,2834,2833,3666,2710,3667,2710,3666,3175,3175,3666,3363,3175,3363,2961,2702,3665,3668,3665,2702,2704,2702,3668,3669,3669,2701,2702,3645,3670,3671,3670,3645,3589,3641,3645,3672,3645,3671,3672,3672,3673,3674,3673,3672,3671,3671,3675,3673,3675,3671,3670,3359,2828,3676,2828,3359,2361,2729,3677,2828,3677,3676,2828,2686,2679,2684,2679,2686,2677,3678,2736,3679,2736,3178,3679,3178,3367,3679,3367,3178,2976,2728,3680,3677,2728,3677,2729,2728,3681,3680,3681,2728,2730,2735,3678,3682,3678,2735,2736,3683,3630,3634,3630,3683,3684,3684,3633,3630,3633,3684,3662,3685,3662,3684,3662,3685,3663,3686,3684,3683,3684,3686,3685,3639,3687,3643,3687,3639,3688,3688,3689,3687,3689,3688,3690,3672,3690,3688,3690,3672,3674,3641,3688,3639,3688,3641,3672,2711,3691,3667,3667,2710,2711,2701,3669,3691,2701,3691,2711,2579,3692,2577,3692,2579,3092,3092,3102,3692,3102,3092,3089,2730,3682,3681,3682,2730,2735,2640,2851,2641,2851,2640,2846,1920,3693,1985,1920,1985,1919,1915,1930,3693,1915,3693,1920,3145,3694,3147,3695,3147,3694,3694,3696,3695,3697,3695,3696,3698,3696,3694,3696,3698,3573,2951,3698,3145,3145,3698,3694,2517,3699,2569,3699,2517,2537,2537,2614,3699,2614,2537,2539,3699,2596,2606,2596,3699,2614,2569,2606,2568,2606,2569,3699,3154,3700,3701,3154,3701,3152,3702,2957,3152,3152,3701,3702,3575,3702,3701,3702,3575,3564,3700,3577,3575,3700,3575,3701,1932,3693,1930,3693,1932,3703,3703,1985,3693,1985,3703,1990,3704,1990,3703,1990,3704,1997,1934,3703,1932,3703,1934,3704,3696,3705,3697,3705,3696,3706,3706,3696,3573,3573,3572,3706,3707,3581,3708,3581,3707,3580,3708,3336,3226,3336,3708,3581,3569,3709,3568,3710,3568,3709,3217,3327,3710,3327,3568,3710,3227,3336,3335,3336,3227,3226,3227,3293,3228,3293,3227,3335,3711,3215,3712,3215,3711,3216,3572,3713,3706,3713,3572,3714,3706,3715,3705,3715,3706,3713,3217,3712,3215,3712,3217,3710,3225,3716,3717,3716,3225,3224,3226,3717,3708,3717,3226,3225,3718,3574,3576,3574,3718,3719,3719,3565,3574,3565,3719,3720,65,3721,63,3721,65,1512,1512,1521,3721,1521,1512,1514,3721,1523,1631,1523,3721,1521,63,1631,64,1631,63,3721,3722,3714,3572,3714,3722,3723,3723,3143,3714,3143,3723,3724,3725,3724,3723,3724,3725,3726,3727,3723,3722,3723,3727,3725,3142,3724,3728,3724,3142,3143,3728,2632,3142,2632,3728,3729,3730,3729,3728,3729,3730,3731,3728,3726,3730,3726,3728,3724,1936,3704,1934,3704,1936,2014,2014,1997,3704,1997,2014,2002,1924,3732,3733,3732,1924,1921,1908,3732,1921,3732,1908,1911,3720,3734,3565,3734,3720,3735,3735,3736,3734,3736,3735,3737,3738,3737,3735,3737,3738,3739,3150,3735,3720,3735,3150,3738,3738,3149,3740,3149,3738,3150,3739,3740,3741,3740,3739,3738,3741,3742,3743,3742,3741,3740,2653,3740,3149,3740,2653,3742,3219,3325,3327,3219,3327,3217,3218,3288,3219,3288,3325,3219,3230,3229,3260,3229,3294,3260,3294,3229,3228,3228,3293,3294,3744,3570,3560,3570,3744,3745,3572,3745,3722,3745,3572,3570,3746,3722,3745,3722,3746,3727,3747,3745,3744,3745,3747,3746,3220,3253,3287,3253,3220,3221,3287,3218,3220,3218,3287,3288,3230,3260,3261,3230,3261,3231,3261,3232,3231,3232,3261,2941,3748,3563,3749,3563,3748,3352,3749,3750,3748,3750,3749,3751,3734,3751,3749,3751,3734,3736,3749,3565,3734,3565,3749,3563,3571,3698,3752,3698,3571,3573,3752,3561,3571,3561,3752,3753,3754,3753,3752,3753,3754,3755,3698,2951,3754,3698,3754,3752,3562,3702,3564,3702,3562,3756,3756,3757,3702,2957,3702,3757,3758,3757,3756,3757,3758,3759,3351,3756,3562,3756,3351,3758,2948,3754,2951,3754,2948,3760,3760,3755,3754,3755,3760,3761,3762,3763,3764,3763,3765,3764,2661,3765,2948,2948,3765,3763,1519,3766,1629,3766,1519,1518,1518,1509,3766,1509,1518,1510,3766,55,57,55,3766,1509,1629,57,59,57,1629,3766,3757,2954,2957,2954,3757,3767,2954,3768,3769,2954,3769,2681,3770,3771,3768,3768,3771,3769,3759,3767,3757,3767,3759,3772,1911,1975,3732,1975,1911,1912,3733,1975,1977,1975,3733,3732,1928,3773,2007,3773,1928,1927,1927,3733,3773,3733,1927,1924,3221,3252,3253,3252,3221,3222,3223,3252,3222,3252,3223,2932,2043,3357,3358,3357,2043,2045,2042,3358,3359,3358,2042,2043,3774,3744,3775,3744,3774,3747,2902,3775,2901,3775,2902,3774,2901,3559,2899,3559,2901,3775,3775,3560,3559,3560,3775,3744,2056,2053,3353,2053,3355,3353,2052,3356,3355,2052,3355,2053,2941,3364,3232,3364,2941,2940,3364,2940,3365,3365,2940,2914,3776,3748,3750,3748,3776,3777,3777,3352,3748,3352,3777,3350,3350,2885,2887,2885,3350,3777,3777,2889,2885,2889,3777,3776,3778,3779,3780,3778,3780,3781,3755,3778,3753,3778,3755,3779,3753,3558,3561,3558,3753,3778,3778,2900,3558,2900,3778,3781,3782,3783,3784,3784,3783,3785,2888,3783,3349,3783,2888,3785,3349,3758,3351,3758,3349,3783,3783,3759,3758,3759,3783,3782,3786,3787,3788,3787,3786,3789,3790,3791,3787,3787,3791,154,3762,3791,3790,3791,3762,3764,3761,3779,3755,3779,3761,3792,3793,3794,3795,3794,3793,3796,3759,3782,3772,3782,3797,3772,3798,3770,3799,3770,3798,3771,3799,3793,3798,3793,162,3798,3800,3148,2944,3148,3800,3801,3801,2660,3148,2660,3801,2658,3765,2658,3801,2658,3765,2661,3765,3800,3764,3800,3765,3801,3791,3800,3802,3800,3791,3764,154,3802,153,3802,154,3791,153,2943,151,2943,153,3802,3802,2944,2943,2944,3802,3800,3803,2945,3804,2945,3803,2937,3771,3803,3769,3803,3804,3769,3769,2678,2681,2678,3769,3804,3804,2679,2678,2679,3804,2945,3803,3798,3805,3798,3803,3771,2937,3805,2936,3805,2937,3803,2936,161,163,161,2936,3805,3805,162,161,162,3805,3798,3806,3807,3808,3807,3809,3808,3808,3146,3806,3146,3808,3144,3810,3144,3808,3144,3810,2950,3811,3808,3809,3808,3811,3810,3812,3810,3811,3810,3812,3813,3813,2950,3810,2950,3813,3814,3815,3814,3813,3814,3815,3816,3813,3817,3815,3817,3813,3812,3818,3819,3820,3820,3819,3821,3819,3822,3821,3822,3819,3823,3823,3151,2956,3151,3823,3819,3819,3153,3151,3153,3819,3818,3824,3823,3825,3823,3824,3822,3826,3825,3827,3825,3826,3824,3827,3828,3829,3828,3827,3825,3825,2956,3828,2956,3825,3823,3806,3161,3830,3161,3806,3146,3807,3830,3831,3830,3807,3806,3831,3832,3833,3832,3831,3830,3832,3830,3161,3161,3162,3832,3818,3155,3153,3155,3818,3834,3835,3155,3834,3158,3155,3835,3836,3835,3834,3835,3836,3837,3820,3834,3818,3834,3820,3836,3838,3170,3168,3170,3838,3839,3839,3162,3170,3162,3839,3832,3840,3832,3839,3832,3840,3833,3841,3839,3838,3839,3841,3840,3167,3842,3843,3842,3167,2836,3843,3168,3167,3168,3843,3838,3838,3844,3841,3844,3838,3843,3843,3845,3844,3845,3843,3842,3846,3174,3847,3174,3846,3172,3848,3847,3849,3847,3848,3846,3835,3849,3847,3849,3835,3837,3158,3847,3174,3847,3158,3835,3850,3171,3851,3171,3850,2853,3852,3851,3853,3851,3852,3850,3853,3846,3848,3846,3853,3851,3851,3172,3846,3172,3851,3171,3854,3730,3855,3730,3854,3731,3856,3854,3855,3854,3856,3857,3856,3725,3727,3725,3856,3855,3855,3726,3725,3726,3855,3730,3741,3858,3859,3858,3741,3743,3739,3859,3737,3859,3739,3741,3737,3860,3736,3860,3737,3859,3860,3859,3858,3860,3858,3861,3862,3863,3864,3863,3862,3865,3746,3747,3862,3862,3864,3746,3727,3746,3864,3864,3856,3727,3864,3857,3856,3857,3864,3863,3866,3867,3868,3867,3866,3869,3861,3868,3860,3868,3861,3866,3736,3868,3751,3868,3736,3860,3751,3867,3750,3867,3751,3868,3854,3870,3731,3870,3854,3871,3871,2882,3870,2882,3871,2947,3872,2947,3871,2947,3872,2879,3857,3871,3854,3871,3857,3872,3729,2633,2632,2633,3729,3873,3873,2881,2633,2635,2633,2881,3870,2881,3873,2881,3870,2882,3731,3873,3729,3873,3731,3870,3874,3858,3743,3858,3874,3875,3875,3861,3858,3861,3875,3876,2953,3876,3875,3876,2953,2892,2894,3875,3874,3875,2894,2953,2654,3742,2653,3742,2654,3877,3877,3743,3742,3743,3877,3874,2895,3874,3877,3874,2895,2894,2895,2654,2656,2654,2895,3877,3863,3872,3857,3872,3863,3878,3878,2879,3872,2879,3878,2877,3879,2877,3878,2877,3879,2878,3865,3878,3863,3878,3865,3879,3876,3866,3861,3866,3876,3880,3880,3869,3866,3869,3880,3881,2891,3881,3880,3881,2891,2890,2892,3880,3876,3880,2892,2891,3882,33,34,33,3882,1405,34,62,3882,62,34,35,3882,64,1503,64,3882,62,1405,1503,1401,1503,1405,3882,3883,59,58,59,3883,1499,23,58,24,58,23,3883,26,3883,23,3883,26,1402,1402,1499,3883,1499,1402,1396,3773,1977,1991,1977,3773,3733,2007,1991,1993,1991,2007,3773,3884,3885,3886,3885,3884,3887,3888,3887,3884,3887,3888,3889,3889,3890,3887,3890,3889,3891,3887,3892,3885,3892,3887,3890,2627,3893,3894,3893,2627,2626,3894,3895,3896,3895,3894,3893,3897,1201,1200,1201,3897,3898,1334,1200,1185,1200,1334,3897,49,3897,50,3897,1334,50,3898,49,52,49,3898,3897,2646,3899,2647,3899,2646,3900,3901,3902,3900,3900,3902,3899,3896,3903,3904,3903,3896,3895,3904,3905,3906,3905,3904,3903,3907,3908,3909,3908,3907,3910,3910,2876,3908,2876,3910,2873,2875,3910,3911,3910,2875,2873,3911,3907,2934,3907,3911,3910,3907,3862,3912,3862,3907,3909,2934,3912,2933,3912,2934,3907,2933,3774,2902,3774,2933,3912,3912,3747,3774,3747,3912,3862,3913,3914,3915,3914,3913,3916,3917,2904,3913,3913,3915,3917,3917,3915,2861,3915,2859,2861,3915,2862,2859,2862,3915,3914,3913,3867,3916,3867,3913,3918,3918,3750,3867,3750,3918,3776,3776,2903,2889,2903,3776,3918,3918,2904,2903,2904,3918,3913,1326,3919,42,36,42,3919,1326,1195,3919,1195,1326,1175,1197,3919,1195,3919,1197,3920,3920,36,3919,36,3920,37,3921,3922,3901,3901,3922,3902,3923,3924,3921,3921,3924,3922,2888,3925,3785,3925,2888,2886,2886,157,3925,157,2886,158,3926,3927,3928,3927,3926,3929,141,3928,138,3928,141,3926,138,2946,136,2946,138,3928,2946,3928,3927,3927,2883,2946,3930,3931,3932,3931,3930,3933,2952,3931,3933,3931,2952,2896,147,2952,3933,2952,147,149,3933,148,147,148,3933,3930,140,3934,3935,3934,140,142,3935,141,140,141,3935,3936,3348,3936,3935,3936,3348,3277,3346,3935,3934,3935,3346,3348,3344,3934,3937,3934,3344,3346,3244,3344,3938,3344,3937,3938,3938,3937,2667,3937,2874,2667,142,3937,3934,3937,142,2874,3939,145,3940,145,3939,143,3282,3940,3342,3940,3282,3939,3941,3342,3940,3342,3941,3272,148,3940,145,3940,148,3941,3280,3939,3282,3939,3280,3942,3942,143,3939,143,3942,2860,3943,2687,3942,3942,2687,2860,3943,3280,3239,3280,3943,3942,3276,3944,3945,3944,3276,3269,3277,3945,3936,3945,3277,3276,3936,3926,141,3926,3936,3945,3945,3929,3926,3929,3945,3944,3946,3273,3947,3273,3946,3247,3932,3947,3930,3947,3932,3946,3930,3941,148,3941,3930,3947,3947,3272,3941,3272,3947,3273,3360,2932,3223,2932,3360,2930,3361,2930,3360,2930,3361,2907,3366,2911,3367,3367,2911,1946,3366,2914,2911,2914,3366,3365,3363,2905,3362,2905,3363,1955,2907,3361,3362,3362,2905,2907,3676,2037,2042,2042,3359,3676,2040,3676,3677,3676,2040,2037,2052,3664,3356,3664,2052,2048,2048,2050,3664,2050,3665,3664,3679,1946,1943,1946,3679,3367,3678,1943,1940,1943,3678,3679,3666,1955,3363,3666,1953,1955,3667,1953,3666,3667,1952,1953,3354,2214,2209,2209,2214,2212,2056,3353,3354,2056,3354,2209,2045,2225,3357,2225,2045,2197,1951,3669,1950,3669,1951,3691,3691,1952,3667,1952,3691,1951,2050,3668,3665,3668,2050,2080,1950,3668,2080,3668,1950,3669,3681,1939,1941,1939,3681,3682,3682,1940,1939,1940,3682,3678,3680,2058,2040,2040,3677,3680,3948,3343,3949,3343,3948,3345,3950,3949,3951,3949,3950,3948,3951,3952,3953,3952,3951,3949,3949,3243,3952,3243,3949,3343,3279,3954,3955,3954,3279,3281,3955,3240,3279,3240,3955,3956,3957,3956,3955,3956,3957,3958,3955,3959,3957,3959,3955,3954,3960,3961,3962,3961,3960,3963,3964,3963,3965,3963,3964,3961,3966,3965,3963,3965,3966,3967,3950,3963,3960,3963,3950,3966,3966,3951,3968,3951,3966,3950,3968,3967,3966,3967,3968,3969,3969,3970,3971,3970,3969,3968,3968,3953,3970,3953,3968,3951,3972,3973,3974,3973,3972,3975,3959,3975,3976,3975,3959,3973,3977,3976,3975,3976,3977,3978,3979,3975,3972,3975,3979,3977,3957,3976,3980,3976,3957,3959,3980,3958,3957,3958,3980,3981,3982,3981,3980,3981,3982,3983,3978,3980,3976,3980,3978,3982,3984,3985,3986,3985,3984,3987,3845,3986,3988,3986,3845,3984,3988,3961,3964,3961,3988,3986,3986,3962,3961,3962,3986,3985,3989,3990,3991,3990,3989,3992,3992,3974,3990,3974,3992,3972,3993,3972,3992,3972,3993,3979,3992,3852,3993,3852,3992,3989,3994,3965,3995,3965,3994,3964,3995,3996,3994,3996,3995,3997,3997,3998,3999,3998,3997,3995,3995,3967,3998,3967,3995,3965,4000,3999,4001,3999,3998,4001,4001,4002,4000,4002,4001,4003,4003,3969,3971,3969,4003,4001,4001,3998,3969,3998,3967,3969,4004,3977,3979,3977,4004,4005,4005,3978,3977,3978,4005,4006,4007,4006,4005,4006,4007,4008,4005,4009,4007,4009,4005,4004,4010,4008,4011,4008,4010,4006,3982,4006,4010,3978,4006,3982,4012,3982,4010,3982,4012,3983,4010,4013,4012,4013,4010,4011,4014,3988,4015,3988,4014,3845,4016,4015,4017,4015,4016,4014,4017,3994,3996,3994,4017,4015,4015,3964,3994,3964,4015,3988,3993,4018,4019,4018,3993,3852,3979,4019,4004,4019,3979,3993,4004,4020,4009,4020,4004,4019,4019,4021,4020,4021,4019,4018,4022,4017,4023,4017,4022,4016,3833,4023,4024,4023,3833,4022,4024,3997,3999,3997,4024,4023,4023,3996,3997,3996,4023,4017,3831,4024,4025,4024,3831,3833,4025,3807,3831,3807,4025,4026,4000,4026,4025,4026,4000,4002,3999,4025,4024,4025,3999,4000,4020,4027,4028,4027,4020,4021,4009,4028,4007,4028,4009,4020,4007,4029,4008,4029,4007,4028,4028,3837,4029,3837,4028,4027,4029,3836,4030,3836,4029,3837,4008,4030,4011,4030,4008,4029,4031,4011,4030,4011,4031,4013,3820,4030,3836,4030,3820,4031,3266,2832,2834,2832,3266,4032,4032,2830,2832,2830,4032,4033,4034,4033,4032,4033,4034,3987,3268,4034,3266,3266,4034,4032,3680,1941,2058,1941,3680,3681,2196,2216,2213,2216,2196,2195,2315,4035,4036,4036,2311,2315,4037,2220,2217,2220,4037,4038,3248,2850,4039,2850,3248,2851,3246,3248,4040,3248,4039,4040,4041,4040,4039,4040,4041,3991,2847,4039,2850,4039,2847,4041,4042,2217,4043,2217,4042,4037,4038,4044,4045,4044,4038,4037,4046,4037,4042,4037,4046,4044,2188,2203,2202,2202,2186,2188,4047,3842,2836,2836,2837,4047,3984,3845,3842,3842,4047,3984,4047,4033,3987,4047,3987,3984,2837,2830,4033,2837,4033,4047,4048,2853,3850,2853,4048,2854,4048,4041,2854,2847,2854,4041,3989,3991,4048,4041,4048,3991,3852,3989,3850,3850,3989,4048,4049,15,667,15,4049,21,643,667,637,667,643,4049,645,4049,643,4049,645,691,21,691,18,691,21,4049,3925,162,3793,162,3925,157,3785,3793,3795,3793,3785,3925,154,4050,3787,4050,154,155,155,2898,4050,2898,155,156,4051,641,638,641,4051,687,665,638,633,638,665,4051,4051,5,9,5,4051,665,687,9,10,9,687,4051,4050,2900,3781,2900,4050,2898,3787,3781,3788,3781,3787,4050,3166,4052,3164,4052,3166,4053,3827,4053,3826,4053,3827,4052,3809,4054,3811,4054,3809,4055,4055,3971,4054,3971,4055,4003,4026,4003,4055,4003,4026,4002,4026,3809,3807,3809,4026,4055,3812,4056,3817,4056,3812,4057,3953,4057,3970,4057,3953,4056,3970,4054,3971,4054,3970,4057,3811,4057,3812,4057,3811,4054,3821,4058,4059,4058,3821,3822,4031,3820,3821,3821,4059,4031,4031,4012,4013,4012,4031,4059,3983,4059,4058,4059,3983,4012,3824,4060,4061,4060,3824,3826,3822,4061,4058,4061,3822,3824,4058,3981,3983,3981,4058,4061,4061,3958,3981,3958,4061,4060,3952,4056,3953,4056,3952,4062,4062,3817,4056,3817,4062,4063,3241,4063,4062,4063,3241,3236,3243,4062,3952,4062,3243,3241,3956,4060,4064,4060,3956,3958,3240,4064,3237,4064,3240,3956,3237,4053,3166,4053,3237,4064,3826,4064,4060,4064,3826,4053,4065,2321,4066,2319,4066,2321,4045,4067,4068,4067,4045,4044,4069,4044,4046,4044,4069,4067,4070,4071,2208,2208,4071,2206,4072,2206,4073,4073,2206,4071,4068,2277,4074,2277,4068,4067,2278,4067,4069,4067,2278,2277,4075,4076,4070,4070,4076,4071,4077,3938,2667,4077,2667,2664,3244,4077,3242,4077,3244,3938,4077,3235,3242,3235,4077,3233,4077,2663,3233,2663,4077,2664,4078,2687,3943,2687,4078,2683,2686,4078,3163,4078,2686,2683,4078,3238,3165,4078,3165,3163,3239,4078,3943,4078,3239,3238,4079,4080,4081,4080,4079,4082,4083,4082,4084,4082,4083,4080,4085,4080,4083,4080,4085,4086,4086,4081,4080,4081,4086,4087,4052,3829,2680,3829,4052,3827,3164,2680,2677,2680,3164,4052,4088,3816,3815,3816,4088,2659,4063,3815,3817,3815,4063,4088,4073,4071,4089,4089,4071,4076,4074,2279,4090,2279,4074,2277,4091,2302,2285,2285,2283,4091,4092,4093,4075,4075,4093,4076,4089,4076,4094,4094,4076,4093,4090,2281,4095,2281,4090,2279,2255,4091,2283,2255,2283,2253,4096,2287,4092,4092,2287,4093,4094,4093,2286,2286,4093,2287,4095,4097,4098,4097,4095,2281,4099,2281,2280,2281,4099,4097,4100,2289,4096,4096,2289,2287,2292,4101,2290,4101,2292,2305,4098,4097,4102,4102,4097,2239,2240,4097,4099,4097,2240,2239,4103,2295,4100,4100,2295,2289,2274,2290,4101,2290,2274,2273,4102,2239,4104,4104,2239,2241,4105,2256,2249,2249,2247,4105,4106,4107,4103,4103,4107,2295,2294,2295,4108,4108,2295,4107,4104,2241,4109,4109,2241,2243,2244,4110,2247,2247,4110,4105,4111,4107,4106,4107,4111,2258,4112,4087,4086,4087,4112,4113,4114,4086,4085,4086,4114,4112,4115,4112,4114,4112,4115,4116,4116,4113,4112,4113,4116,4117,3236,4088,4063,4088,3236,3234,3234,2659,4088,2659,3234,2657,2317,4118,2319,4118,2317,2484,2484,2201,4118,2201,2484,2352,4108,4107,2257,2257,4107,2258,4109,2243,4119,4119,2243,2492,2496,4120,2244,2244,4120,4110,4121,2258,4111,2258,4121,2260,4122,2263,2271,2263,4122,2261,4119,2492,4123,4123,2492,2494,2495,4124,2496,2496,4124,4120,4125,2260,4121,2260,4125,2268,2261,4126,2265,4126,2261,4122,4123,2497,4127,2497,4123,2494,2499,4124,2495,4124,2499,4128,4127,2268,4125,2268,4127,2497,2265,4128,2499,4128,2265,4126,4129,4036,4035,4129,4035,4130,4131,2219,2218,2219,4131,4132,4133,4134,4135,4133,4135,4136,4065,4137,4138,4066,4137,4065,221,4139,4140,221,4140,197,222,263,4139,222,4139,221,263,264,4141,263,4141,4139,4139,4141,4142,4139,4142,4140,4143,4142,4141,4142,4143,4144,271,4141,264,4141,271,4143,227,4143,271,4143,227,228,4145,4146,4147,4146,4145,4148,4147,3270,4145,3270,4147,3267,3269,4147,3944,4147,3269,3267,4147,3929,3944,3929,4147,4146,4149,4150,4151,4150,4149,4152,3932,4151,3946,4151,3932,4149,3247,3946,4151,4151,3245,3247,4151,3249,3245,3249,4151,4150,4153,2884,4154,4154,2884,2880,4148,4154,4146,4154,4148,4153,4146,3927,3929,3927,4146,4154,4154,2883,3927,2883,4154,2880,2897,4155,2893,4155,2897,4156,2896,4155,3931,4155,2896,2893,3931,4149,3932,4149,3931,4155,4155,4152,4149,4152,4155,4156,4157,4158,4159,4158,4157,4160,4160,4161,4158,4161,4160,4162,4158,4163,4164,4163,4158,4161,4159,4164,4165,4164,4159,4158,4166,4167,4168,4167,4169,4168,2207,4072,4170,2206,4072,2207,4131,4171,4172,4171,4131,2218,2481,2214,2330,2214,2481,4036,4115,4173,4116,4173,4115,4174,4174,4159,4173,4159,4174,4157,4173,4165,4175,4165,4173,4159,4116,4175,4117,4175,4116,4173,2312,4036,2481,4036,2312,2311,4043,2217,2219,4043,2219,4132,4176,3109,3110,3109,4176,3139,2611,2610,4176,2611,4176,3110,4177,4178,4179,4178,4177,4180,4180,4181,4178,4181,4180,4182,4178,4183,4184,4183,4178,4181,4179,4184,4185,4184,4179,4178,2605,4176,2610,4176,2605,3140,3140,3139,4176,3139,3140,3137,2588,4186,3100,4186,2588,2587,2587,2609,4186,2609,2587,2589,4187,4188,4189,4188,4187,4190,4191,4190,4192,4190,4191,4188,4188,4193,4194,4193,4188,4191,4189,4194,4195,4194,4189,4188,4186,2611,3106,2611,4186,2609,3100,3106,3098,3106,3100,4186,3692,2603,2600,2603,3692,3102,2577,2600,2576,2600,2577,3692,228,4144,4143,4144,228,212,194,4196,184,194,184,186,197,4140,4196,197,4196,194,4142,4197,4140,4140,4197,4196,4197,185,4196,4196,185,184,4198,185,4197,185,4198,192,4144,4197,4142,4197,4144,4198,212,4198,4144,4198,212,206,206,192,4198,192,206,191,4117,4199,4200,4199,4117,4175,4175,4201,4199,4201,4175,4165,4199,4202,4203,4202,4199,4201,4204,2855,2857,2855,4204,4205,4205,2619,2855,2619,4205,2616,4206,2616,4205,2616,4206,2617,4207,4205,4204,4205,4207,4206,4200,4203,4208,4203,4200,4199,4113,4209,4210,4113,4210,4087,4209,4117,4200,4117,4209,4113,4211,4200,4208,4200,4211,4209,4212,2844,4213,2844,4212,2842,4214,4213,4215,4213,4214,4212,4215,2637,2636,2637,4215,4213,4213,2640,2637,2640,4213,2844,2856,2829,4216,2829,2856,2833,2858,4216,4217,4216,2858,2856,4217,4218,4219,4218,4217,4216,2829,2831,4218,2829,4218,4216,2843,2848,2846,2848,2843,4220,4220,4221,2848,2849,2848,4221,4221,4222,4223,4222,4221,4220,2845,4220,2843,4220,2845,4222,4218,2835,4224,2835,4218,2831,4219,4224,4225,4224,4219,4218,4225,125,123,125,4225,4224,4224,128,125,128,4224,2835,2852,4221,4226,4221,2852,2849,129,4226,132,4226,129,2852,132,4227,135,4227,132,4226,4226,4223,4227,4223,4226,4221,3661,3663,4228,3663,4229,4228,3660,4228,4230,4228,3660,3661,4231,4230,4228,4230,4231,4232,4233,4231,4229,4229,4231,4228,3685,4229,3663,4229,3685,4234,4234,4233,4229,4233,4234,4235,4236,4235,4234,4235,4236,4237,3686,4234,3685,4234,3686,4236,3673,4238,3674,3674,4238,4239,4240,4239,4241,4239,4238,4241,4242,4241,4238,4241,4242,4243,3675,4238,3673,4238,3675,4242,3690,4239,4244,4239,3690,3674,3689,4244,4245,4244,3689,3690,4245,4246,4247,4246,4245,4244,4244,4240,4246,4240,4244,4239,2841,4248,2692,4248,2841,4249,4233,4249,4231,4249,4233,4248,4250,4231,4249,4231,4250,4232,2839,4249,2841,4249,2839,4250,4251,2696,2672,2696,4251,4252,4252,2694,2696,2694,4252,4253,4241,4253,4252,4253,4241,4243,4240,4252,4251,4252,4240,4241,4209,4211,4254,4209,4254,4210,4255,4256,4257,4257,4256,4258,4256,4259,4258,4258,4259,4260,4258,4261,4262,4261,4258,4260,4263,4264,4265,4264,4263,4266,2840,4266,4263,4266,2840,2689,2838,4263,4267,4263,2838,2840,4267,4265,4268,4265,4267,4263,4257,4262,4269,4262,4257,4258,4269,4270,4271,4270,4269,4262,4262,4272,4270,4272,4262,4261,4270,3615,3622,3615,4270,4272,4273,4274,4275,4273,4275,4276,4277,4278,4274,4277,4274,4273,2695,4277,4273,2695,4273,2693,2693,4273,4276,2693,4276,2671,2617,4279,2622,4279,2617,4206,2622,4280,2623,4280,2622,4279,4280,4281,4282,4281,4280,4279,4279,4207,4281,4207,4279,4206,2636,4283,4215,4283,2636,2643,4283,4214,4215,4214,4283,4284,4284,4285,4286,4285,4284,4283,2643,4285,4283,4285,2643,2644,3906,4287,4288,4287,3906,3905,4288,4289,4290,4289,4288,4287,4291,4292,3923,3923,4292,3924,4293,4294,4291,4294,4292,4291,4295,4296,4297,4296,4298,4297,4289,4298,4290,4298,4289,4297,4299,4300,4301,4300,4299,4302,4294,4293,4302,4302,4299,4294,4265,4303,4304,4303,4265,4264,4268,4304,4305,4304,4268,4265,4305,4306,4307,4306,4305,4304,4304,4308,4306,4308,4304,4303,4274,4309,4275,4309,4274,4310,4310,4311,4309,4311,4310,4312,4313,4312,4310,4312,4313,4314,4278,4310,4274,4310,4278,4313,2631,4315,4316,4315,2631,2634,165,4316,166,4316,165,2631,170,4316,4317,4316,170,166,4317,4315,4318,4315,4317,4316,4319,2652,4320,2652,4319,2655,4321,4322,4319,4321,4319,4320,174,4321,4320,174,4320,172,4320,177,172,177,4320,2652,4323,4324,4325,4324,4323,4326,4326,4327,4324,4327,4326,4328,3371,4328,4326,4328,3371,3373,3372,4326,4323,4326,3372,3371,4329,4330,4331,4330,4329,4332,4332,3389,4330,3389,4332,3387,4333,3387,4332,3387,4333,3386,4334,4332,4329,4332,4334,4333,4335,4336,4337,4336,4335,4338,4338,4325,4336,4325,4338,4323,3381,4323,4338,4323,3381,3372,3382,4338,4335,4338,3382,3381,4339,4340,4341,4340,4339,4342,3399,4342,3397,4342,3399,4340,3397,4330,3389,4330,3397,4342,4331,4342,4339,4342,4331,4330,4343,4344,4345,4344,4343,4346,4346,4337,4344,4337,4346,4335,3445,4335,4346,4335,3445,3382,3446,4346,4343,4346,3446,3445,4347,4348,4349,4348,4347,4350,3451,4349,3449,4349,3451,4347,3449,4340,3399,4340,3449,4349,4349,4341,4340,4341,4349,4348,4306,4325,4324,4325,4306,4308,4306,4324,4307,4307,4324,4327,4331,4311,4312,4312,4329,4331,4314,4329,4312,4329,4314,4334,4351,4296,4295,4296,4351,4352,4353,4352,4351,4352,4353,4341,4311,4339,4354,4339,4311,4331,4354,4341,4353,4341,4354,4339,4344,4355,4356,4355,4344,4337,4357,4345,4344,4344,4356,4357,4293,4357,4356,4356,4302,4293,4356,4300,4302,4300,4356,4355,4301,4300,4358,4355,4358,4300,4358,4355,4359,4337,4359,4355,4336,4308,4360,4308,4336,4325,4337,4360,4359,4360,4337,4336,4285,2655,4319,2655,4285,2644,4286,4319,4322,4319,4286,4285,4280,2634,2623,2634,4280,4315,4315,4282,4318,4282,4315,4280,4348,4352,4341,4352,4348,4361,4361,4296,4352,4296,4361,4298,4290,4361,4362,4361,4290,4298,4362,4348,4350,4348,4362,4361,4363,4364,4365,4364,4363,4366,4264,4365,4303,4365,4264,4363,4303,4360,4308,4360,4303,4365,4365,4359,4360,4359,4365,4364,4367,4368,4369,4368,4367,4370,4370,4353,4368,4353,4370,4354,4309,4354,4370,4354,4309,4311,4275,4370,4367,4370,4275,4309,4371,4372,4373,4372,4371,4374,4366,4373,4364,4373,4366,4371,4364,4358,4359,4358,4364,4373,4373,4301,4358,4301,4373,4372,4375,4376,4377,4376,4375,4378,4378,4295,4376,4295,4378,4351,4368,4351,4378,4351,4368,4353,4369,4378,4375,4378,4369,4368,2691,4379,4380,4379,2691,2675,2689,4380,4266,4380,2689,2691,4266,4363,4264,4363,4266,4380,4380,4366,4363,4366,4380,4379,2669,4381,2235,4381,2669,4382,4382,4369,4381,4369,4382,4367,4276,4367,4382,4367,4276,4275,2671,4382,2669,4382,2671,4276,2674,4383,4384,4383,2674,2233,2675,4384,4379,4384,2675,2674,4379,4371,4366,4371,4379,4384,4384,4374,4371,4374,4384,4383,4385,2236,4386,2236,4385,2223,4377,4386,4375,4386,4377,4385,4375,4381,4369,4381,4375,4386,4386,2235,4381,2235,4386,2236,4271,3622,3623,3622,4271,4270,4387,4388,4389,4388,4387,4390,4391,4387,4392,4387,4389,4392,4393,4394,4391,4394,4387,4391,4394,4390,4387,4390,4394,4395,4396,3610,4397,3610,4396,3619,4390,4397,4388,4397,4390,4396,4395,4396,4390,4396,4395,4398,4398,3619,4396,3619,4398,3618,3274,4399,3271,4399,3274,4400,3246,4400,3274,4400,3246,4040,4040,3991,3990,4040,3990,4400,4400,3990,3974,4400,3974,4399,3281,4401,3954,4401,3281,3341,3341,3271,4401,4401,3271,4399,3973,4399,3974,4399,3973,4401,4402,4235,4237,4235,4402,4403,4248,4235,4403,4235,4248,4233,2692,4403,2690,4403,2692,4248,2673,4403,4402,4403,2673,2690,4404,4246,4405,4246,4404,4247,2234,4405,2670,4405,2234,4404,2672,2670,4405,4405,4251,2672,4251,4405,4246,4246,4240,4251,4406,4407,4408,4407,4406,4409,4409,3686,4407,3686,4409,4236,4410,4236,4409,4236,4410,4237,4411,4409,4406,4409,4411,4410,4412,4410,4411,4410,4412,4413,4413,4237,4410,4237,4413,4402,2673,4413,2676,4413,2673,4402,2232,4413,4412,4413,2232,2676,4414,4415,4416,4415,4414,4417,4418,4416,4419,4416,4418,4414,4419,4245,4247,4245,4419,4416,4416,3689,4245,3689,4416,4415,4420,4419,4421,4419,4420,4418,2222,4421,2237,4421,2222,4420,2234,2237,4421,2234,4421,4404,4421,4247,4404,4247,4421,4419,3651,4422,4423,4422,3651,3653,4423,3634,3651,3634,4423,3683,4407,3683,4423,3683,4407,3686,4408,4423,4422,4423,4408,4407,3654,4424,3657,4424,3654,4425,4425,4417,4424,4417,4425,4415,3687,4415,4425,4415,3687,3689,3643,4425,3654,4425,3643,3687,4397,3611,4426,3611,4397,3610,4388,4426,4427,4426,4388,4397,4427,1777,1779,1777,4427,4426,4426,1771,1777,1771,4426,3611,4272,3614,3615,3614,4272,4428,4428,1768,3614,1768,4428,1773,4429,1773,4428,1773,4429,1776,4261,4428,4272,4428,4261,4429,4389,4427,4430,4427,4389,4388,4392,4389,4431,4389,4430,4431,4431,4430,1787,4430,1785,1787,4430,1779,1785,1779,4430,4427,4260,4429,4261,4429,4260,4432,4432,1776,4429,1776,4432,1781,4433,1784,4432,4432,1784,1781,4259,4433,4260,4260,4433,4432,4434,4392,4435,4392,4431,4435,4436,4435,4437,4435,4436,4434,4437,1793,1795,1793,4437,4435,4435,4431,1793,4431,1787,1793,4438,4439,4259,4259,4439,4433,4439,1789,4433,4433,1789,1784,4440,1789,4439,1789,4440,1792,4441,4439,4438,4439,4441,4440,4442,1803,1804,1803,4442,4443,4443,1795,1803,1795,4443,4437,4444,4437,4443,4437,4444,4436,4445,4443,4442,4443,4445,4444,4446,1800,4447,1800,4446,1799,4448,4447,4449,4447,4448,4446,4449,4440,4441,4440,4449,4447,4447,1792,4440,1792,4447,1800,4450,1809,1808,1809,4450,4451,4451,1804,1809,1804,4451,4442,4452,4442,4451,4442,4452,4445,4453,4451,4450,4451,4453,4452,4450,1805,4454,1805,4450,1808,4453,4454,4455,4454,4453,4450,4455,4446,4448,4446,4455,4454,4454,1799,4446,1799,4454,1805,4456,4457,4445,4456,4445,4452,4458,4457,4459,4459,4457,4456,4459,4460,4461,4460,4459,4456,4456,4453,4460,4453,4456,4452,4462,4448,4463,4448,4462,4455,4462,4453,4455,4453,4462,4460,4464,4460,4462,4460,4464,4461,4464,4463,4465,4463,4464,4462,4457,4444,4445,4444,4457,4466,4466,4436,4444,4436,4466,4467,4468,4467,4466,4467,4468,4469,4458,4466,4457,4466,4458,4468,4470,4393,4471,4393,4391,4471,4469,4471,4467,4471,4469,4470,4467,4434,4436,4434,4467,4471,4471,4391,4434,4391,4392,4434,4463,4449,4472,4449,4463,4448,4465,4472,4473,4472,4465,4463,4473,4474,4475,4474,4473,4472,4472,4441,4474,4441,4472,4449,4476,4477,4255,4255,4477,4256,4477,4438,4256,4256,4438,4259,4474,4438,4477,4438,4474,4441,4475,4477,4476,4477,4475,4474,3646,4478,108,4478,3646,4479,4479,4480,4478,4480,4479,4481,4481,4398,4395,4398,4481,4479,3618,4479,3646,4479,3618,4398,4482,3648,121,3648,4482,4483,4483,3623,3648,3623,4483,4271,4484,4271,4483,4271,4484,4269,4485,4483,4482,4483,4485,4484,4481,4486,4480,4486,4481,4487,4488,4486,4489,4486,4487,4489,4489,4487,4393,4487,4394,4393,4487,4395,4394,4395,4487,4481,4490,4484,4485,4484,4490,4491,4491,4269,4484,4269,4491,4257,4492,4255,4491,4491,4255,4257,4493,4492,4490,4490,4492,4491,4494,4470,4469,4470,4494,4495,4489,4470,4495,4470,4489,4393,4488,4495,4496,4495,4488,4489,4496,4494,4497,4494,4496,4495,4498,4476,4499,4476,4498,4475,4500,4501,4498,4500,4498,4499,4493,4500,4499,4493,4499,4492,4499,4255,4492,4255,4499,4476,4502,4458,4503,4458,4502,4468,4494,4468,4502,4468,4494,4469,4497,4502,4504,4502,4497,4494,4504,4503,4505,4503,4504,4502,4506,4507,4465,4506,4465,4473,4508,4509,4507,4508,4507,4506,4501,4508,4506,4501,4506,4498,4498,4506,4473,4498,4473,4475,4510,4511,4505,4505,4503,4510,4512,4513,4511,4511,4510,4512,4461,4512,4510,4510,4459,4461,4459,4510,4503,4503,4458,4459,4514,4515,4509,4509,4515,4507,4515,4464,4507,4507,4464,4465,4512,4461,4515,4515,4461,4464,4513,4512,4514,4514,4512,4515,4516,4517,4518,4517,4516,4519,108,4518,111,4518,108,4516,111,4520,114,4520,111,4518,4518,4521,4520,4521,4518,4517,4522,4523,4524,4523,4522,4525,4526,4524,4527,4524,4526,4522,4527,118,115,118,4527,4524,4524,121,118,121,4524,4523,4528,4529,4530,4529,4528,4531,4519,4530,4517,4530,4519,4528,4517,4532,4521,4532,4517,4530,4530,4533,4532,4533,4530,4529,4534,4535,4536,4535,4534,4537,4536,4538,4534,4538,4536,4539,4539,4522,4526,4522,4539,4536,4536,4525,4522,4525,4536,4535,4540,4541,4542,4541,4540,4543,4531,4542,4529,4542,4531,4540,4529,4544,4533,4544,4529,4542,4542,4545,4544,4545,4542,4541,4546,4547,4548,4547,4546,4549,4549,4550,4547,4550,4549,4551,4534,4551,4549,4551,4534,4538,4537,4549,4546,4549,4537,4534,4552,4553,4554,4553,4552,4555,4543,4554,4541,4554,4543,4552,4541,4556,4545,4556,4541,4554,4554,4557,4556,4557,4554,4553,4558,4559,4560,4559,4558,4561,4561,4562,4559,4562,4561,4563,4547,4563,4561,4563,4547,4550,4548,4561,4558,4561,4548,4547,4553,4564,4557,4564,4553,4565,4565,4566,4564,4566,4565,4567,4568,4567,4565,4567,4568,4569,4555,4565,4553,4565,4555,4568,4559,4570,4571,4570,4559,4562,4560,4571,4572,4571,4560,4559,4572,4573,4574,4573,4572,4571,4571,4575,4573,4575,4571,4570,4520,4576,4577,4576,4520,4521,114,4577,3650,4577,114,4520,3650,4577,3653,4577,4578,3653,4578,4577,4576,4576,4579,4578,4527,4580,4526,4580,4527,4581,4582,4580,4581,4580,4582,4583,3657,4581,3655,4581,3657,4582,115,4581,4527,4581,115,3655,4532,4584,4585,4584,4532,4533,4521,4585,4576,4585,4521,4532,4579,4576,4585,4585,4586,4579,4585,4587,4586,4587,4585,4584,4539,4588,4538,4588,4539,4589,4589,4590,4588,4590,4589,4591,4583,4589,4580,4589,4583,4591,4526,4589,4539,4589,4526,4580,4544,4592,4593,4592,4544,4545,4533,4593,4584,4593,4533,4544,4584,4594,4587,4594,4584,4593,4593,4595,4594,4595,4593,4592,4551,4596,4550,4596,4551,4597,4597,4598,4596,4598,4597,4599,4588,4599,4597,4599,4588,4590,4538,4597,4551,4597,4538,4588,4556,4600,4601,4600,4556,4557,4545,4601,4592,4601,4545,4556,4592,4602,4595,4602,4592,4601,4601,4603,4602,4603,4601,4600,4563,4604,4562,4604,4563,4605,4605,4606,4604,4606,4605,4607,4596,4607,4605,4607,4596,4598,4550,4605,4563,4605,4550,4596,4564,4608,4609,4608,4564,4566,4557,4609,4600,4609,4557,4564,4600,4610,4603,4610,4600,4609,4609,4611,4610,4611,4609,4608,4570,4612,4575,4612,4570,4613,4613,4614,4612,4614,4613,4615,4604,4615,4613,4615,4604,4606,4562,4613,4570,4613,4562,4604,4616,4617,4618,4617,4619,4618,4579,4618,4578,4618,4579,4616,3653,4578,4618,3653,4618,4422,4618,4619,4422,4619,4408,4422,4620,4621,4622,4621,4620,4623,4424,4623,4620,4623,4424,4417,3657,4620,4582,4620,3657,4424,4583,4620,4622,4620,4583,4582,4586,4624,4625,4624,4586,4587,4616,4579,4586,4586,4625,4616,4626,4616,4625,4616,4626,4617,4626,4625,4624,4624,4627,4626,4591,4628,4590,4628,4591,4629,4629,4630,4628,4628,4630,4631,4622,4630,4629,4630,4622,4621,4622,4591,4583,4591,4622,4629,4594,4632,4633,4632,4594,4595,4587,4633,4624,4633,4587,4594,4627,4624,4633,4633,4634,4627,4634,4633,4632,4632,4635,4634,4599,4636,4598,4636,4599,4637,4637,4638,4636,4636,4638,4639,4628,4631,4637,4637,4631,4638,4590,4637,4599,4637,4590,4628,4602,4640,4641,4640,4602,4603,4595,4641,4632,4641,4595,4602,4635,4632,4641,4641,4642,4635,4642,4641,4640,4640,4643,4642,4607,4644,4606,4644,4607,4645,4645,4646,4644,4644,4646,4647,4636,4639,4645,4645,4639,4646,4598,4645,4607,4645,4598,4636,4610,4648,4649,4648,4610,4611,4603,4649,4640,4649,4603,4610,4640,4650,4643,4650,4640,4649,4649,4651,4650,4651,4649,4648,4615,4652,4614,4652,4615,4653,4653,4654,4652,4654,4653,4655,4644,4655,4653,4655,4644,4647,4606,4653,4615,4653,4606,4644,4656,4619,4617,4619,4656,4657,4657,4408,4619,4408,4657,4406,4658,4406,4657,4406,4658,4411,4659,4657,4656,4657,4659,4658,4623,4660,4621,4660,4623,4661,4662,4661,4663,4661,4662,4660,4663,4414,4418,4414,4663,4661,4661,4417,4414,4417,4661,4623,4664,4626,4627,4627,4665,4664,4664,4617,4626,4617,4664,4656,4666,4656,4664,4656,4666,4659,4667,4664,4665,4664,4667,4666,4630,4668,4631,4669,4631,4668,4668,4670,4669,4670,4668,4671,4660,4671,4668,4671,4660,4662,4621,4668,4630,4668,4621,4660,4672,4673,4674,4673,4672,4675,4635,4674,4634,4674,4635,4672,4634,4665,4627,4665,4634,4674,4674,4667,4665,4667,4674,4673,4676,4677,4678,4677,4676,4679,4679,4670,4677,4670,4679,4669,4638,4669,4679,4669,4638,4631,4639,4679,4676,4679,4639,4638,4680,4681,4682,4681,4680,4683,4643,4682,4642,4682,4643,4680,4642,4672,4635,4672,4642,4682,4682,4675,4672,4675,4682,4681,4684,4685,4686,4685,4684,4687,4687,4678,4685,4678,4687,4676,4646,4676,4687,4676,4646,4639,4647,4687,4684,4687,4647,4646,4688,4650,4651,4651,4689,4688,4680,4643,4650,4650,4688,4680,4683,4680,4688,4688,4690,4683,4690,4688,4689,4689,4691,4690,4655,4692,4654,4654,4692,4693,4692,4694,4693,4693,4694,4695,4684,4686,4692,4692,4686,4694,4647,4684,4655,4655,4684,4692,4696,4658,4659,4658,4696,4697,4697,4411,4658,4411,4697,4412,2230,4412,4697,4412,2230,2232,4697,2070,2230,2070,4697,4696,4698,4663,4699,4663,4698,4662,2061,4699,2224,4699,2061,4698,2224,4420,2222,4420,2224,4699,4699,4418,4420,4418,4699,4663,4700,4666,4667,4666,4700,4701,4701,4659,4666,4659,4701,4696,4696,2071,2070,2071,4696,4701,2074,4701,4700,4701,2074,2071,4702,4671,4703,4671,4702,4670,2064,4703,2060,4703,2064,4702,2060,4698,2061,4698,2060,4703,4703,4662,4698,4662,4703,4671,2076,4704,2078,2078,4704,4705,4704,4673,4705,4675,4705,4673,4700,4667,4704,4673,4704,4667,2074,4700,2076,4704,2076,4700,4706,2066,2068,2068,4707,4706,4702,2064,2066,2066,4706,4702,4670,4702,4706,4706,4677,4670,4677,4706,4707,4707,4678,4677,2096,4705,4708,4705,2096,2078,2090,4708,4709,4708,2090,2096,4709,4681,4683,4681,4709,4708,4708,4675,4681,4675,4708,4705,4710,4690,4691,4690,4710,4711,4711,4683,4690,4683,4711,4709,2088,4709,4711,4709,2088,2090,2091,4711,4710,4711,2091,2088,2094,4707,2068,4707,2094,4712,4712,4678,4707,4678,4712,4685,4713,4685,4712,4685,4713,4686,2083,4712,2094,4712,2083,4713,4714,4694,4715,4694,4714,4695,2085,4715,2082,4715,2085,4714,2082,4713,2083,4713,2082,4715,4715,4686,4713,4686,4715,4694,3954,3973,3959,3973,3954,4401,4034,3985,3987,3985,4034,4716,3268,3278,4716,3268,4716,4034,3278,3275,4717,3278,4717,4716,4716,3962,3985,3962,4716,4717,3960,4717,4718,4717,3960,3962,3275,3347,4718,4718,4717,3275,4718,3345,3948,3345,4718,3347,3960,3948,3950,3948,3960,4718,3009,4719,4720,4719,3009,3180,2739,3180,2734,3180,2739,4719,2739,2773,4719,2773,2739,2738,4719,2775,4720,2775,4719,2773,3008,3029,3007,3029,3008,4721,3008,4720,4721,4720,3008,3009,4720,2868,4721,2868,4720,2775,4721,2870,3029,2870,4721,2868,2713,4722,2768,2713,2768,2714,3177,2713,2709,2713,3177,4722,2990,4722,3177,4722,2990,4723,4722,4723,2769,4722,2769,2768,4723,2226,2229,2229,2769,4723,2991,4723,2990,4723,2991,2226,2991,2992,2227,2991,2227,2226,4724,2231,2072,2231,4724,4725,2233,4725,4383,4725,2233,2231,4383,4726,4374,4726,4383,4725,4726,4724,4727,4724,4726,4725,4728,2221,4729,2221,4728,2062,4730,4728,4731,4728,4729,4731,4385,4731,4729,4731,4385,4377,4729,2223,4385,2223,4729,2221,4732,2073,4733,2073,4732,2069,4732,2072,2069,2072,4732,4724,4727,4732,4734,4732,4727,4724,4734,4733,4735,4733,4734,4732,4736,2063,4737,2063,2059,4737,4738,4736,4739,4736,4737,4739,4739,4737,4730,4737,4728,4730,4737,2062,4728,2062,4737,2059,4733,2075,4740,2075,4733,2073,4735,4740,4741,4740,4735,4733,4741,4742,4743,4742,4741,4740,4740,2077,4742,2077,4740,2075,4736,2065,2063,2065,4736,4744,4744,2067,2065,2067,4744,4745,4745,4746,4747,4746,4745,4744,4744,4738,4746,4738,4744,4736,4748,4742,4749,4742,4748,4743,4750,4751,4748,4748,4749,4750,2087,4750,4749,4749,2095,2087,4749,2077,2095,2077,4749,4742,4750,2089,4752,2089,4750,2087,4751,4752,4753,4752,4751,4750,4753,4754,4755,4754,4753,4752,4752,2092,4754,2092,4752,2089,4756,4745,4747,4745,4756,4757,4757,2067,4745,2067,4757,2093,2081,4757,4758,4757,2081,2093,4758,4756,4759,4756,4758,4757,4758,2084,2081,2084,4758,4760,4760,2086,2084,2086,4760,4761,4762,4761,4760,4761,4762,4763,4759,4760,4758,4760,4759,4762,4764,4727,4765,4727,4764,4726,4374,4764,4372,4764,4374,4726,4372,4299,4301,4299,4372,4764,4299,4765,4294,4765,4299,4764,4766,4730,4767,4730,4731,4767,4289,4766,4297,4297,4766,4767,4376,4297,4767,4297,4376,4295,4377,4767,4731,4767,4377,4376,2644,2656,2655,2656,2644,2645,2635,2623,2634,2623,2635,2624,4768,4769,4770,4771,4769,4768,4772,4773,4774,4773,4775,4774,4776,4135,4777,4135,4776,4778,4773,4772,4768,4770,4773,4768,4779,4780,4781,4780,4779,4782,4783,4782,4779,4782,4783,4784,4785,4786,4787,4786,4788,4787,4787,4788,4789,4788,4790,4789,4791,4792,4793,4792,4791,4794,4794,4795,4796,4795,4794,4791,4797,4798,4799,4798,4797,4800,4800,4801,4798,4801,4800,4802,4802,4291,3923,4291,4802,4800,4800,4293,4291,4293,4800,4797,4357,4797,4803,4797,4357,4293,4345,4803,4804,4803,4345,4357,4804,4805,4806,4805,4804,4803,4803,4799,4805,4799,4803,4797,4796,4807,4808,4807,4796,4795,4809,4810,4811,4812,4811,4810,4808,4778,4776,4778,4808,4807,4813,4814,4809,4810,4809,4814,4815,4816,4817,4816,4815,4818,4818,4290,4816,4290,4818,4288,4819,4288,4818,4288,4819,3906,4820,4818,4815,4818,4820,4819,4816,4362,4821,4362,4816,4290,4817,4821,4822,4821,4817,4816,4822,4823,4824,4823,4822,4821,4821,4350,4823,4350,4821,4362,4292,4765,4825,4765,4292,4294,3924,4825,4826,4825,3924,4292,4735,4826,4825,4825,4734,4735,4734,4825,4765,4765,4727,4734,4287,4766,4289,4766,4287,4827,4739,4766,4827,4766,4739,4730,4738,4827,4828,4827,4738,4739,3905,4827,4287,4827,3905,4828,4829,4830,4813,4814,4813,4830,4771,4829,4769,4829,4771,4830,4831,4832,4833,4833,4832,4834,4835,4832,4831,4832,4835,4836,4837,3921,3901,3921,4837,4838,3923,4838,4802,4838,3923,3921,4802,4839,4801,4839,4802,4838,4838,4840,4839,4840,4838,4837,4833,4841,4842,4841,4833,4834,4842,4841,4843,4841,4844,4843,4845,4784,4783,4784,4845,4846,4793,4846,4845,4846,4793,4792,4847,3904,4848,3904,4847,3896,4849,4848,4850,4848,4849,4847,4850,4819,4820,4819,4850,4848,4848,3906,4819,3906,4848,3904,3922,4826,4851,4826,3922,3924,3902,4851,4852,4851,3902,3922,4852,4741,4743,4741,4852,4851,4851,4735,4741,4735,4851,4826,4853,4748,4751,4748,4853,4854,4854,4743,4748,4743,4854,4852,3899,4852,4854,4852,3899,3902,2647,4854,4853,4854,2647,3899,3903,4828,3905,4828,3903,4855,4855,4738,4828,4738,4855,4746,4856,4746,4855,4746,4856,4747,3895,4855,3903,4855,3895,4856,4857,4756,4858,4756,4857,4759,2626,4858,3893,4858,2626,4857,3893,4856,3895,4856,3893,4858,4858,4747,4856,4747,4858,4756,4789,4790,4859,4790,4860,4859,4859,4860,4812,4860,4811,4812,4861,4836,4835,4836,4861,4862,4781,4862,4861,4862,4781,4780,4843,4844,4863,4844,4864,4863,4863,4864,4785,4864,4786,4785,4865,4866,4867,4866,4868,4867,4869,4866,4865,4866,4869,4870,4871,4837,4872,4837,4871,4840,4873,4872,4874,4872,4873,4871,4874,3900,2646,3900,4874,4872,4872,3901,3900,3901,4872,4837,4875,4847,4849,4847,4875,4876,4876,3896,4847,3896,4876,3894,4877,3894,4876,3894,4877,2627,4878,4876,4875,4876,4878,4877,4853,4753,4879,4753,4853,4751,2647,4879,2649,4879,2647,4853,2649,4880,2650,4880,2649,4879,4879,4755,4880,4755,4879,4753,4857,4762,4759,4762,4857,4881,4881,4763,4762,4763,4881,4882,2628,4882,4881,4882,2628,2629,2626,4881,4857,4881,2626,2628,4867,4868,4883,4868,4884,4883,4885,4886,4869,4869,4886,4870,4883,4884,4887,4884,4888,4887,4889,4886,4885,4886,4889,4890,4887,4888,4891,4888,4892,4891,4893,4890,4889,4890,4893,4894,4891,4892,4895,4892,4896,4895,4897,4894,4893,4894,4897,4898,4874,2648,4899,2648,4874,2646,4873,4874,4900,4900,4874,4899,4900,4901,4902,4901,4900,4899,4899,2651,4901,2651,4899,2648,4877,2625,2627,2625,4877,4903,4903,2630,2625,2630,4903,4904,4905,4904,4903,4904,4905,4906,4905,4877,4878,4877,4905,4903,4907,4806,4908,4806,4907,4804,4343,4804,4907,4804,4343,4345,4909,4343,4907,4343,4909,3446,4909,4908,4910,4908,4909,4907,4911,4824,4912,4824,4823,4912,4913,4911,4914,4911,4912,4914,4914,4347,3451,4347,4914,4912,4347,4912,4823,4823,4350,4347,4915,4909,4910,4909,4915,4916,4916,3446,4909,3446,4916,3444,4917,3444,4916,3444,4917,3439,4918,4916,4915,4916,4918,4917,4919,4914,4920,4914,4919,4913,4921,4920,4922,4920,4921,4919,4922,3448,3442,3448,4922,4920,4920,3451,3448,3451,4920,4914,4923,4924,4925,4924,4923,4926,4926,4918,4924,4918,4926,4917,4926,3438,3439,4926,3439,4917,3421,4926,4923,4926,3421,3438,4927,4928,4929,4928,4927,4930,4930,3428,4928,3428,4930,3443,4922,3442,4930,4930,3442,3443,4930,4921,4922,4921,4930,4927,4931,4932,4933,4932,4931,4934,4934,4925,4932,4925,4934,4923,3419,4923,4934,4923,3419,3421,3420,4934,4931,4934,3420,3419,4935,4936,4937,4936,4935,4938,4938,3431,4936,3431,4938,3429,4928,3429,4938,3429,4928,3428,4929,4938,4935,4938,4929,4928,3424,4931,4939,4931,3424,3420,3425,4939,3456,4939,3425,3424,3456,4940,3457,4940,3456,4939,4939,4933,4940,4933,4939,4931,4936,3433,4941,3433,4936,3431,4941,4937,4936,4937,4941,4942,3466,4942,4941,4942,3466,3465,4941,3435,3466,3435,4941,3433,4943,3552,4944,3552,4943,3478,4944,4945,4943,4945,4944,4946,4940,4946,4944,4946,4940,4933,4944,3457,4940,3457,4944,3552,4946,4947,4945,4947,4946,4948,4948,4949,4947,4949,4948,4950,4932,4950,4948,4950,4932,4925,4933,4948,4946,4948,4933,4932,3556,4951,4952,4951,3556,3499,3465,4952,4942,4952,3465,3556,4942,4953,4937,4953,4942,4952,4952,4954,4953,4954,4952,4951,4953,4955,4956,4955,4953,4954,4956,4937,4953,4937,4956,4935,4957,4935,4956,4935,4957,4929,4956,4958,4957,4958,4956,4955,4950,4959,4949,4959,4950,4960,4960,4961,4959,4961,4960,4962,4924,4962,4960,4962,4924,4918,4925,4960,4950,4960,4925,4924,4957,4963,4964,4963,4957,4958,4964,4929,4957,4929,4964,4927,4927,4965,4921,4965,4927,4964,4966,4964,4963,4964,4966,4965,4967,4968,4969,4968,4967,4970,4967,4910,4970,4910,4967,4915,4918,4967,4962,4967,4918,4915,4962,4969,4961,4969,4962,4967,4971,4972,4973,4972,4974,4973,4966,4971,4965,4971,4973,4965,4965,4973,4921,4973,4919,4921,4973,4913,4919,4913,4973,4974,4975,4970,4910,4910,4908,4975,4976,4968,4970,4970,4975,4976,4977,4976,4975,4975,4978,4977,4978,4975,4908,4908,4806,4978,4979,4913,4974,4913,4979,4911,4980,4911,4979,4911,4980,4824,4981,4979,4982,4979,4981,4980,4982,4974,4972,4974,4982,4979,4983,4984,4985,4984,4983,4986,4805,4984,4986,4984,4805,4799,4806,4986,4978,4986,4806,4805,4977,4986,4983,4986,4977,4978,4987,4988,4989,4988,4987,4990,4981,4989,4980,4989,4981,4987,4980,4989,4824,4989,4822,4824,4989,4988,4822,4988,4817,4822,4798,4991,4992,4991,4798,4801,4799,4992,4984,4992,4799,4798,4985,4992,4993,4992,4985,4984,4992,4994,4993,4994,4992,4991,4995,4815,4996,4815,4995,4820,4997,4996,4998,4996,4997,4995,4990,4998,4996,4990,4996,4988,4996,4817,4988,4817,4996,4815,4991,4999,4994,4999,4991,5000,5000,5001,4999,5001,5000,5002,4839,5002,5000,5002,4839,4840,4801,5000,4991,5000,4801,4839,5003,4995,4997,4995,5003,5004,5004,4820,4995,4820,5004,4850,5005,4850,5004,4850,5005,4849,5006,5004,5003,5004,5006,5005,5002,5007,5001,5007,5002,5008,5008,5009,5007,5009,5008,5010,5010,4871,4873,4871,5010,5008,4840,5008,5002,5008,4840,4871,5011,5005,5006,5005,5011,5012,5012,4849,5005,4849,5012,4875,5013,4875,5012,4875,5013,4878,5014,5012,5011,5012,5014,5013,5015,5010,5016,5010,5015,5009,5017,5016,5018,5016,5017,5015,5018,4900,4902,4900,5018,5016,5016,4873,4900,4873,5016,5010,5019,5013,5014,5013,5019,5020,5020,4878,5013,4878,5020,4905,5021,4905,5020,4905,5021,4906,5022,5020,5019,5020,5022,5021,5023,5024,5025,5024,5023,5026,5027,5026,5028,5026,5027,5024,5028,5015,5017,5015,5028,5026,5009,5026,5023,5026,5009,5015,5029,5030,5031,5030,5029,5032,5032,5014,5030,5014,5032,5019,5033,5019,5032,5019,5033,5022,5034,5032,5029,5032,5034,5033,5035,5036,5037,5036,5035,5038,5039,5038,5040,5038,5039,5036,5040,5024,5027,5024,5040,5038,5038,5025,5024,5025,5038,5035,5041,5042,5043,5042,5041,5044,5044,5031,5042,5031,5044,5029,5045,5029,5044,5029,5045,5034,5046,5044,5041,5044,5046,5045,5047,5048,5049,5048,5047,5050,5050,5025,5048,5025,5050,5023,5007,5023,5050,5023,5007,5009,5001,5050,5047,5050,5001,5007,5051,5052,5053,5052,5051,5054,5053,5037,5051,5037,5053,5035,5048,5035,5053,5035,5048,5025,5049,5053,5052,5053,5049,5048,5055,5056,5057,5056,5055,5058,5058,5006,5056,5006,5058,5011,5030,5011,5058,5011,5030,5014,5031,5058,5055,5058,5031,5030,5059,5060,5061,5060,5059,5062,5061,5057,5059,5057,5061,5055,5042,5055,5061,5055,5042,5031,5043,5061,5060,5061,5043,5042,5063,5064,5065,5064,5063,5066,5066,5049,5064,5049,5066,5047,4999,5047,5066,5047,4999,5001,4994,5066,5063,5066,4994,4999,5052,5064,5049,5064,5052,5067,5067,5065,5064,5065,5067,5068,5069,5068,5067,5068,5069,5070,5054,5067,5052,5067,5054,5069,5071,5072,5073,5072,5071,5074,5074,4997,5072,4997,5074,5003,5056,5003,5074,5003,5056,5006,5057,5074,5071,5074,5057,5056,5071,5059,5057,5059,5071,5075,5075,5062,5059,5062,5075,5076,5076,5077,5078,5077,5076,5075,5075,5073,5077,5073,5075,5071,5063,4993,4994,4993,5063,5079,5079,4985,4993,4985,5079,5080,5081,5080,5079,5080,5081,5082,5065,5079,5063,5079,5065,5081,5083,5084,5085,5084,5083,5086,5070,5085,5068,5085,5070,5083,5068,5081,5065,5081,5068,5085,5085,5082,5081,5082,5085,5084,5087,5080,5082,5080,5087,5088,5088,4985,5080,4985,5088,4983,5089,4983,5088,4983,5089,4977,5090,5088,5087,5088,5090,5089,5091,5084,5086,5084,5091,5092,5092,5082,5084,5082,5092,5087,5093,5087,5092,5087,5093,5090,5094,5092,5091,5092,5094,5093,5072,4998,5095,4998,5072,4997,5073,5095,5096,5095,5073,5072,5096,5097,5098,5097,5096,5095,5095,4990,5097,4990,5095,4998,5099,5100,5101,5100,5099,5102,5102,5098,5100,5098,5102,5096,5077,5096,5102,5096,5077,5073,5078,5102,5099,5102,5078,5077,5103,5097,5104,5097,5103,5098,5105,5104,5106,5104,5105,5103,5106,4987,4981,4987,5106,5104,5104,4990,4987,4990,5104,5097,5107,5100,5108,5100,5107,5101,5109,5108,5110,5108,5109,5107,5110,5103,5105,5103,5110,5108,5108,5098,5103,5098,5108,5100,5111,5112,4968,4968,4976,5111,5113,5114,5112,5112,5111,5113,5113,5089,5090,5089,5113,5111,5089,5111,4976,4976,4977,5089,5115,5093,5094,5093,5115,5116,5116,5090,5093,5090,5116,5113,5114,5116,5117,5116,5114,5113,5117,5115,5118,5115,5117,5116,5119,4972,5120,4972,5119,4982,5106,4982,5119,4982,5106,4981,5121,5106,5119,5106,5121,5105,5121,5120,5122,5120,5121,5119,5123,5110,5124,5110,5123,5109,5125,5123,5126,5123,5124,5126,5126,5124,5122,5124,5121,5122,5124,5105,5121,5105,5124,5110,5127,5114,5128,5114,5127,5112,4969,5112,5127,5112,4969,4968,4961,5127,5129,5127,4961,4969,5129,5128,5130,5128,5129,5127,5131,5118,5132,5118,5131,5117,5128,5117,5131,5117,5128,5114,5130,5131,5133,5131,5130,5128,5133,5132,5134,5132,5133,5131,5135,5122,5136,5122,5120,5136,5137,5135,5138,5135,5136,5138,5138,5136,4966,5136,4971,4966,5136,5120,4971,5120,4972,4971,5139,5125,5140,5125,5126,5140,5141,5139,5142,5139,5140,5142,5142,5140,5137,5140,5135,5137,5140,5126,5135,5126,5122,5135,5143,5144,5145,5144,5143,5146,5146,5130,5144,5130,5146,5129,4959,5129,5146,5129,4959,4961,4949,5146,5143,5146,4949,4959,5147,5148,5149,5148,5147,5150,5150,5134,5148,5134,5150,5133,5144,5133,5150,5133,5144,5130,5145,5150,5147,5150,5145,5144,5151,5152,5153,5152,5151,5154,4958,5154,4963,5154,4958,5152,4963,5138,4966,5138,4963,5154,5137,5154,5151,5154,5137,5138,5155,5156,5157,5156,5155,5158,5158,5153,5156,5153,5158,5151,5142,5151,5158,5151,5142,5137,5141,5158,5155,5158,5141,5142,5159,5160,5161,5160,5159,5162,5162,5145,5160,5145,5162,5143,4947,5143,5162,5143,4947,4949,4945,5162,5159,5162,4945,4947,5163,5164,5165,5164,5163,5166,5165,5149,5163,5149,5165,5147,5160,5147,5165,5147,5160,5145,5161,5165,5164,5165,5161,5160,5167,5168,5169,5168,5167,5170,4954,5169,4955,5169,4954,5167,4955,5152,4958,5152,4955,5169,5153,5169,5168,5169,5153,5152,5171,5172,5173,5172,5171,5174,5170,5173,5168,5173,5170,5171,5156,5168,5173,5168,5156,5153,5157,5173,5172,5173,5157,5156,5159,5175,5176,5175,5159,5161,4943,4945,5159,4943,5159,5176,4943,3474,3478,3474,4943,5176,5176,3477,3474,3477,5176,5175,5161,5177,5175,5177,5161,5178,5177,3486,5175,5175,3486,3477,3487,5177,5179,3487,3486,5177,5179,5177,5178,5178,5180,5179,5164,5178,5161,5178,5164,5181,5181,5180,5178,5180,5181,5182,5183,5182,5181,5182,5183,5184,5166,5181,5164,5181,5166,5183,5167,5185,5170,5185,5167,5186,5186,3496,5185,3496,5186,3494,4951,3494,5186,3494,4951,3499,4951,5167,4954,5167,4951,5186,5170,5187,5188,5187,5170,5185,5189,5188,5187,5188,5189,5190,3507,5187,3506,3507,5189,5187,5187,5185,3506,5185,3496,3506,5188,5171,5170,5171,5188,5191,5191,5174,5171,5174,5191,5192,5193,5192,5191,5192,5193,5194,5190,5191,5188,5191,5190,5193,3516,5179,5195,5179,3516,3487,5195,3517,3516,3517,5195,5196,5197,5196,5195,5196,5197,5198,5180,5195,5179,5195,5180,5197,3525,5189,3507,5189,3525,5199,5199,5190,5189,5190,5199,5200,5201,5200,5199,5200,5201,5202,5199,3527,5201,3527,5199,3525,5182,5197,5180,5197,5182,5203,5203,5198,5197,5198,5203,5204,5205,5204,5203,5204,5205,4163,5184,5203,5182,5203,5184,5205,5200,5193,5190,5193,5200,5206,5206,5194,5193,5194,5206,5207,5208,5207,5206,5207,5208,4079,5202,5206,5200,5206,5202,5208,5209,5196,5198,5198,5210,5209,5209,5211,5196,5196,5211,3517,5212,5213,5209,5211,5209,5213,5212,5209,5210,5210,5214,5212,5204,5210,5198,5210,5204,5215,5215,5214,5210,5214,5215,5216,4161,5216,5215,5216,4161,4162,4163,5215,5204,5215,4163,4161,5217,5202,5201,5202,5217,5218,5219,5218,5217,5218,5219,5220,5219,5217,5221,5217,5222,5221,5217,5201,5222,5201,3527,5222,5218,5208,5202,5208,5218,5223,4079,5223,4082,5223,4079,5208,5224,4082,5223,4082,5224,4084,5220,5223,5218,5223,5220,5224,3515,5225,3513,5225,3515,5226,5226,5227,5225,5227,5226,5228,5211,5228,5226,5228,5211,5213,3517,5226,3515,5226,3517,5211,3526,5229,5230,5229,3526,3521,3527,5230,5222,5230,3527,3526,5222,5231,5221,5231,5222,5230,5230,5232,5231,5232,5230,5229,5233,3512,5234,3512,5233,3511,5235,5234,5236,5234,5235,5233,5225,5236,5234,5236,5225,5227,3513,5234,3512,5234,3513,5225,3520,5237,5238,5237,3520,3523,5238,3521,3520,3521,5238,5229,5239,5229,5238,5229,5239,5232,5238,5240,5239,5240,5238,5237,5241,5233,5235,5233,5241,5242,5242,3511,5233,3511,5242,3547,3547,5243,3532,5243,3547,5242,5244,5242,5241,5242,5244,5243,5237,5245,5240,5245,5237,5246,5246,5247,5245,5247,5246,5248,3549,5248,5246,5248,3549,3541,3523,5246,5237,5246,3523,3549,3530,5249,3531,3531,5249,5250,5249,5251,5250,5250,5251,5252,5244,5249,5243,5251,5249,5244,5243,3530,3532,3530,5243,5249,5253,3542,3543,3543,5254,5253,5248,3541,3542,3542,5253,5248,5247,5248,5253,5253,5255,5247,5253,5254,5255,5254,3886,5255,5256,5235,5257,5235,5256,5241,5251,5241,5256,5241,5251,5244,5252,5256,5258,5252,5251,5256,5258,5257,5259,5257,5258,5256,5260,5261,5240,5240,5245,5260,3885,3892,5261,3885,5261,5260,3886,5260,5255,3886,3885,5260,5255,5260,5245,5255,5245,5247,3536,5250,5262,5250,3536,3531,3537,5262,5263,5262,3537,3536,5263,5264,3888,5264,5263,5262,5262,5252,5264,5252,5262,5250,3545,5254,3543,5254,3545,5265,5265,3886,5254,3886,5265,3884,5263,3884,5265,3884,5263,3888,3537,5265,3545,5265,3537,5263,5266,5227,5267,5227,5266,5236,5257,5236,5266,5236,5257,5235,5259,5266,5268,5266,5259,5257,5268,5267,5269,5267,5268,5266,5270,5271,5232,5232,5239,5270,5272,5273,5271,5272,5271,5270,3892,5272,5270,3892,5270,5261,5261,5270,5239,5239,5240,5261,5274,5269,5275,5269,5267,5275,5276,5274,5277,5274,5275,5277,5277,5275,5213,5275,5228,5213,5275,5267,5228,5267,5227,5228,5278,5279,5273,5271,5273,5279,5279,5231,5271,5232,5271,5231,5280,5221,5279,5231,5279,5221,5281,5280,5278,5279,5278,5280,5277,5212,5282,5212,5277,5213,5276,5282,5283,5282,5276,5277,5283,5284,5285,5284,5283,5282,5214,5282,5212,5282,5214,5284,5280,5219,5221,5219,5280,5286,5286,5220,5219,5220,5286,5287,5288,5287,5286,5287,5288,5289,5281,5286,5280,5286,5281,5288,5284,5216,5290,5216,5284,5214,5285,5290,5291,5290,5285,5284,5291,4160,4157,4160,5291,5290,5290,4162,4160,4162,5290,5216,5287,5224,5220,5224,5287,5292,5292,4084,5224,4084,5292,4083,5293,4083,5292,4083,5293,4085,5289,5292,5287,5292,5289,5293,5294,5184,5295,5184,5294,5205,4164,5205,5294,5205,4164,4163,4165,5294,4201,5294,4165,4164,4201,5295,4202,5295,4201,5294,5296,5194,5297,5194,5207,5297,4254,5296,4210,5296,5297,4210,4087,4210,5297,5297,4081,4087,5297,5207,4081,5207,4079,4081,5298,5291,5299,5291,5298,5285,5300,5299,5301,5299,5300,5298,5301,4174,4115,4174,5301,5299,5299,4157,4174,4157,5299,5291,5302,5293,5289,5293,5302,5303,5303,4085,5293,4085,5303,4114,5301,4114,5303,4114,5301,4115,5300,5303,5302,5303,5300,5301,5304,5283,5305,5283,5304,5276,5306,5305,5307,5305,5306,5304,5307,5298,5300,5298,5307,5305,5305,5285,5298,5285,5305,5283,5308,5288,5281,5288,5308,5309,5309,5289,5288,5289,5309,5302,5307,5302,5309,5302,5307,5300,5306,5309,5308,5309,5306,5307,5310,5311,5312,5311,5313,5312,5312,5278,5310,5273,5310,5278,5308,5281,5312,5278,5312,5281,5312,5313,5308,5313,5306,5308,5314,5315,5311,5311,5315,5313,5315,5304,5313,5313,5304,5306,5315,5274,5276,5315,5276,5304,5314,5269,5274,5314,5274,5315,5316,5268,5269,5316,5269,5314,5317,5259,5268,5317,5268,5316,3891,5317,5316,3891,5316,5318,5318,5316,5314,5318,5314,5311,5319,5273,5272,5273,5319,5310,5318,5310,5319,5310,5318,5311,3891,5319,3890,5319,3891,5318,3890,5272,3892,5272,3890,5319,5320,5258,5259,5320,5259,5317,5264,5252,5258,5264,5258,5320,3888,5264,5320,3888,5320,3889,3889,5320,5317,3889,5317,3891,5321,5322,5323,5322,5324,5323,5166,5321,5183,5321,5323,5183,5295,5183,5323,5183,5295,5184,4202,5323,5324,5323,4202,5295,5325,5326,5327,5327,5326,5328,5326,4254,5328,4254,5326,5296,5192,5296,5326,5296,5192,5194,5174,5192,5325,5325,5192,5326,5329,5321,5330,5321,5329,5322,5331,5330,5332,5330,5331,5329,5163,5332,5330,5332,5163,5149,5330,5166,5163,5166,5330,5321,5325,5333,5334,5333,5325,5327,5174,5334,5172,5334,5174,5325,5335,5172,5334,5172,5335,5157,5334,5336,5335,5336,5334,5333,5337,5338,5339,5338,5337,5340,5341,5339,5342,5339,5341,5337,5342,5329,5331,5329,5342,5339,5339,5322,5329,5322,5339,5338,5343,5340,5344,5340,5343,5338,5322,5338,5324,5338,5343,5324,4203,5324,5343,5324,4203,4202,4208,5343,5344,5343,4208,4203,5345,5346,5347,5346,5345,5340,5327,5347,5333,5347,5327,5345,5333,5348,5336,5348,5333,5347,5347,5349,5348,5349,5347,5346,5344,5340,5350,5340,5345,5350,4208,5350,4211,5350,4208,5344,4211,5328,4254,5328,4211,5350,5327,5328,5345,5345,5328,5350,5332,5351,5331,5351,5332,5352,5352,5353,5351,5353,5352,5354,5148,5354,5352,5354,5148,5134,5149,5352,5332,5352,5149,5148,5355,5335,5336,5335,5355,5356,5356,5157,5335,5157,5356,5155,5357,5155,5356,5155,5357,5141,5356,5358,5357,5358,5356,5355,5351,5359,5360,5359,5351,5353,5331,5360,5342,5360,5331,5351,5342,5361,5341,5361,5342,5360,5360,5362,5361,5362,5360,5359,5363,5355,5364,5355,5363,5358,5365,5364,5366,5364,5365,5363,5366,5348,5349,5348,5366,5364,5364,5336,5348,5336,5364,5355,5367,4190,4187,4190,5367,5368,4192,5368,5369,5368,4192,4190,5369,5036,5039,5036,5369,5368,5037,5368,5367,5368,5037,5036,4181,5370,4183,5370,4181,5371,5371,5043,5370,5043,5371,5041,5372,5041,5371,5041,5372,5046,4182,5371,4181,5371,4182,5372,5373,5374,5375,5374,5373,5376,5373,5132,5118,5132,5373,5375,5134,5375,5354,5375,5134,5132,5354,5374,5353,5374,5354,5375,5359,5377,5362,5377,5359,5378,5379,5377,5378,5377,5379,5380,5376,5378,5374,5378,5376,5379,5353,5378,5359,5378,5353,5374,5381,5382,5383,5382,5381,5384,5358,5381,5357,5381,5383,5357,5357,5383,5141,5383,5139,5141,5382,5139,5383,5139,5382,5125,5363,5385,5386,5385,5363,5365,5358,5386,5381,5386,5358,5363,5384,5381,5386,5386,5387,5384,5387,5386,5385,5385,5388,5387,5389,5390,5391,5390,5389,5392,5389,5094,5392,5094,5389,5115,5373,5115,5389,5115,5373,5118,5389,5376,5373,5376,5389,5391,5393,5394,5395,5394,5393,5396,5391,5393,5395,5393,5391,5390,5391,5379,5376,5379,5391,5395,5395,5380,5379,5380,5395,5394,5397,5398,5399,5398,5400,5399,5384,5399,5382,5399,5384,5397,5382,5123,5125,5123,5382,5399,5399,5109,5123,5109,5399,5400,5401,5402,5403,5402,5401,5404,5388,5403,5387,5403,5388,5401,5387,5397,5384,5397,5387,5403,5403,5402,5397,5402,5398,5397,5392,5405,5390,5406,5390,5405,5405,5407,5406,5408,5406,5407,5091,5086,5405,5407,5405,5086,5094,5091,5392,5405,5392,5091,5393,5409,5396,5396,5409,5410,5409,5411,5410,5411,5409,5412,5406,5412,5409,5412,5406,5408,5390,5406,5393,5409,5393,5406,5398,5413,5414,5398,5414,5400,5400,5414,5107,5400,5107,5109,5414,5415,5101,5414,5101,5107,5413,5416,5415,5413,5415,5414,5417,5402,5404,5404,5418,5417,5402,5417,5413,5402,5413,5398,5419,5413,5417,5413,5419,5416,5420,5417,5418,5417,5420,5419,5421,5083,5070,5083,5421,5422,5422,5086,5083,5086,5422,5407,5423,5407,5422,5407,5423,5408,5424,5422,5421,5422,5424,5423,5425,5412,5426,5412,5425,5411,5427,5426,5428,5426,5427,5425,5428,5423,5424,5423,5428,5426,5426,5408,5423,5408,5426,5412,5429,5421,5430,5421,5429,5424,5431,5430,5432,5430,5431,5429,5432,5069,5054,5069,5432,5430,5430,5070,5069,5070,5430,5421,5433,5428,5434,5428,5433,5427,5435,5434,5436,5434,5435,5433,5436,5429,5431,5429,5436,5434,5434,5424,5429,5424,5434,5428,5437,5099,5438,5099,5437,5078,5439,5438,5440,5438,5439,5437,5440,5415,5416,5415,5440,5438,5438,5101,5415,5101,5438,5099,5441,5419,5420,5419,5441,5442,5442,5416,5419,5416,5442,5440,5443,5440,5442,5440,5443,5439,5444,5442,5441,5442,5444,5443,5437,5445,5446,5445,5437,5439,5446,5078,5437,5078,5446,5076,5076,5447,5062,5447,5076,5446,5446,5448,5447,5448,5446,5445,5443,5449,5450,5449,5443,5444,5439,5450,5445,5450,5439,5443,5445,5451,5448,5451,5445,5450,5450,5452,5451,5452,5450,5449,5453,5432,5454,5432,5453,5431,4187,5454,5367,5454,4187,5453,5051,5367,5454,5367,5051,5037,5454,5054,5051,5054,5454,5432,5453,4189,5455,4189,5453,4187,5455,5431,5453,5431,5455,5436,5456,5436,5455,5436,5456,5435,5455,4195,5456,4195,5455,4189,5447,5457,5458,5457,5447,5448,5062,5458,5060,5458,5062,5447,5370,5060,5458,5060,5370,5043,5458,4183,5370,4183,5458,5457,4184,5457,5459,5457,4184,4183,4185,5459,5460,5459,4185,4184,5451,5460,5459,5460,5451,5452,5448,5459,5457,5459,5448,5451,5461,4167,4166,4166,5462,5461,4774,5463,5464,5465,5464,5463,5466,5465,5463,5465,5466,5467,5468,5467,5466,5467,5468,5469,5470,5469,5468,5469,5470,5471,5472,5461,5462,5462,5473,5472,5471,5474,5475,5474,5471,5470,5476,5472,5473,5473,5477,5476,5475,5478,5479,5478,5475,5474,5480,5477,5481,5477,5480,5476,5479,5482,5483,5482,5479,5478,5484,5481,5485,5481,5484,5480,5483,5486,5487,5486,5483,5482,5488,5485,5489,5485,5488,5484,5487,4897,5490,4897,5487,5486,4895,5489,5491,5489,4895,5488,5490,4893,5492,4893,5490,4897,4891,5491,5493,5491,4891,4895,5492,4889,5494,4889,5492,4893,5495,4887,5493,5493,4887,4891,5494,4885,2123,4885,5494,4889,5496,4883,5495,5495,4883,4887,2123,4885,2120,2120,4885,4869,5497,4867,5496,5496,4867,4883,2120,4865,2118,4865,2120,4869,2118,4865,5497,5497,4865,4867,5498,5499,2220,5499,5498,5500,5501,5500,5498,5500,5501,5502,5502,5503,5504,5503,5502,5501,5505,5506,5507,2208,5506,5505,5504,5508,5509,5508,5504,5503,5510,5507,5511,5505,5507,5510,5509,5512,5513,5512,5509,5508,5514,5515,5511,5510,5511,5515,5513,5516,5517,5516,5513,5512,5518,5519,5514,5515,5514,5519,5517,5520,5521,5520,5517,5516,5522,5523,5518,5518,5523,5519,5521,5520,5524,5524,5520,5525,5526,5527,5522,5522,5527,5523,5524,5525,5528,5528,5525,5529,5530,5531,5526,5526,5531,5527,5528,5529,5532,5532,5529,5533,5534,5531,5530,5531,5534,5535,5532,5533,5536,5536,5533,5537,5538,5535,5534,5535,5538,5539,5536,5537,5540,5540,5537,5541,5542,5539,5538,5539,5542,5543,5540,5544,5545,5544,5540,5541,5545,5543,5542,5543,5545,5544,2208,2205,5546,2208,5546,5506,2220,4171,2218,4171,2220,5499,5547,4863,5548,5548,4863,4785,5549,4843,5547,5547,4843,4863,5550,4861,5551,4861,5550,4781,5551,4835,5552,4835,5551,4861,4859,4812,5553,5553,5554,4859,4859,5554,4789,5554,5555,4789,5556,4845,5557,4845,5556,4793,5557,4783,5558,4783,5557,4845,5559,4842,5549,5549,4842,4843,5560,4842,5559,4842,5560,4833,5552,4831,5561,4831,5552,4835,5561,4831,5560,5560,4831,4833,4830,4771,5562,5562,5563,4830,4814,4830,5563,5563,5564,4814,4810,4814,5564,5564,5565,4810,4807,5566,4778,5566,4807,5567,4812,4810,5565,5565,5553,4812,4795,5567,4807,5567,4795,5568,4791,5568,4795,5568,4791,5569,4793,5569,4791,5569,4793,5556,4789,5555,4787,5555,5570,4787,5548,4785,5570,5570,4785,4787,5558,4779,5571,4779,5558,4783,5571,4781,5550,4781,5571,4779,5572,4768,5573,5573,4768,5574,5575,2207,4170,2207,5575,2205,5576,5546,5575,5575,5546,2205,4778,4136,4135,4136,4778,5566,4772,4774,5577,4774,5464,5577,4771,4768,5572,5572,5562,4771,5578,5546,5576,5546,5578,5506,4172,4171,5579,5579,4171,5499,5579,5499,5580,5580,5499,5500,5580,5502,5581,5502,5580,5500,5581,5502,5582,5582,5502,5504,5506,5583,5507,5583,5506,5578,5582,5504,5584,5584,5504,5509,5507,5583,5511,5585,5511,5583,5584,5509,5586,5586,5509,5513,5587,5511,5585,5511,5587,5514,5586,5513,5588,5588,5513,5517,5589,5514,5587,5514,5589,5518,5588,5517,5590,5590,5517,5521,5591,5518,5589,5518,5591,5522,5590,5521,5592,5592,5521,5524,5593,5522,5591,5522,5593,5526,5592,5524,5594,5594,5524,5528,5595,5526,5593,5526,5595,5530,5594,5528,5596,5596,5528,5532,5597,5530,5595,5530,5597,5534,5596,5532,5598,5598,5532,5536,5599,5534,5597,5534,5599,5538,5598,5536,5600,5600,5536,5540,5601,5538,5599,5538,5601,5542,5600,5545,5602,5545,5600,5540,5602,5542,5601,5542,5602,5545,4864,2238,4786,4786,2238,2240,4844,2242,4864,4864,2242,2238,4780,2259,4862,2259,4780,2257,4862,2267,4836,2267,4862,2259,4860,2276,4811,4811,2276,2278,4790,2280,4860,4860,2280,2276,4792,2288,4846,2288,4792,2286,4846,2294,4784,2294,4846,2288,4841,2491,4844,4844,2491,2242,2493,4841,4834,4841,2493,2491,4836,2498,4832,2498,4836,2267,4832,2498,4834,4834,2498,2493,4829,4042,4769,4769,4042,4043,4813,4046,4829,4829,4046,4042,4809,4069,4813,4813,4069,4046,4776,4073,4808,4073,4776,4072,4811,2278,4809,4809,2278,4069,4808,4089,4796,4089,4808,4073,4796,4094,4794,4094,4796,4089,4794,2286,4792,2286,4794,4094,4788,4099,4790,4790,4099,2280,4786,2240,4788,4788,2240,4099,4784,4108,4782,4108,4784,2294,4782,2257,4780,2257,4782,4108,4770,4131,4773,4131,4770,4132,4170,4776,4777,4776,4170,4072,4773,4172,4775,4172,4773,4131,4769,4132,4770,4132,4769,4043,5603,5575,4777,4777,5575,4170,5604,5576,5603,5603,5576,5575,5605,5576,5604,5576,5605,5578,4172,5606,4775,5606,4172,5579,5606,5580,5607,5580,5606,5579,5607,5581,5608,5581,5607,5580,5608,5582,5609,5582,5608,5581,5610,5583,5605,5605,5583,5578,5609,5584,5611,5584,5609,5582,5612,5585,5610,5610,5585,5583,5611,5586,5613,5586,5611,5584,5614,5587,5612,5612,5587,5585,5613,5588,5615,5588,5613,5586,5616,5589,5614,5614,5589,5587,5615,5590,5617,5590,5615,5588,5618,5591,5616,5616,5591,5589,5617,5592,4898,5592,5617,5590,4896,5593,5618,5618,5593,5591,4898,5594,4894,5594,4898,5592,4892,5595,4896,4896,5595,5593,4894,5596,4890,5596,4894,5594,4888,5597,4892,4892,5597,5595,4890,5598,4886,5598,4890,5596,4884,5599,4888,4888,5599,5597,4886,5598,4870,4870,5598,5600,4868,5601,4884,4884,5601,5599,4870,5602,4866,5602,4870,5600,4866,5602,4868,4868,5602,5601,4777,4135,5603,4169,5603,4135,4167,5603,4169,5603,4167,5604,5605,4167,5461,4167,5605,5604,5606,4774,4775,4774,5606,5463,5607,5463,5606,5463,5607,5466,5608,5466,5607,5466,5608,5468,5609,5468,5608,5468,5609,5470,5610,5461,5472,5461,5610,5605,5470,5609,5474,5474,5609,5611,5472,5612,5610,5612,5472,5476,5474,5611,5478,5478,5611,5613,5476,5614,5612,5614,5476,5480,5478,5615,5482,5615,5478,5613,5614,5484,5616,5484,5614,5480,5482,5617,5486,5617,5482,5615,5488,5618,5484,5618,5616,5484,5486,4898,4897,4898,5486,5617,4895,4896,5488,4896,5618,5488
-					]
-				}
-			]
-		}
-	],
-	"materials" : [
-		{
-			"id" : "Material7",
-			"type" : "PHONG",
-			"diffuse" : [0.700000,0.700000,0.700000],
-			"ambient" : [0.300000,0.300000,0.300000],
-			"emissive" : [1.0,1.0,1.0],
-			"opacity" : 0.000000,
-			"specular" : [1.0,1.0,1.0],
-			"shininess" : 50.000000,
-			"textures" : [
-				{
-					"id" : "head",
-					"filename" : "head_color.png",
-					"uvtranslation" : [0.0,0.0],
-					"uvscaling" : [1.0,1.0],
-					"type" : "STANDARD"
-				}
-			]
-		},
-		{
-			"id" : "Material9",
-			"type" : "PHONG",
-			"diffuse" : [0.700000,0.700000,0.700000],
-			"ambient" : [0.300000,0.300000,0.300000],
-			"emissive" : [1.0,1.0,1.0],
-			"opacity" : 0.000000,
-			"specular" : [1.0,1.0,1.0],
-			"shininess" : 50.000000
-		}
-	],
-	"nodes" : [
-		{
-			"id" : "eyes",
-			"translation" : [0.117882,0.679631,0.584643],
-			"rotation" : [0.707107,0.0,0.0,0.707107],
-			"scale" : [1.0,1.0,1.0],
-			"mesh" : "eyes_Mesh",
-			"materials" : [
-				{
-					"meshpartid" : "part0",
-					"materialid" : "Material9"
-				}
-			]
-		},
-		{
-			"id" : "head",
-			"translation" : [0.0,0.0,0.0],
-			"rotation" : [0.0,0.0,0.0,1.0],
-			"scale" : [1.0,1.0,1.0],
-			"mesh" : "head_Mesh",
-			"materials" : [
-				{
-					"meshpartid" : "part0",
-					"materialid" : "Material7"
-				}
-			]
-		}
-	],
-	"animations" : [
-		{
-			"id" : "Take 001",
-			"bones" : [
-				
-			]
-		}
-	]
-}
\ No newline at end of file
diff --git a/tests/gdx-tests-android/assets/data/g3d/head_color.png b/tests/gdx-tests-android/assets/data/g3d/head_color.png
deleted file mode 100644
index ae86fcf..0000000
Binary files a/tests/gdx-tests-android/assets/data/g3d/head_color.png and /dev/null differ
diff --git a/tests/gdx-tests-android/assets/data/g3d/head_parented.g3dj b/tests/gdx-tests-android/assets/data/g3d/head_parented.g3dj
deleted file mode 100644
index 700a8be..0000000
--- a/tests/gdx-tests-android/assets/data/g3d/head_parented.g3dj
+++ /dev/null
@@ -1,110 +0,0 @@
-{
-	"version" : "1.0",
-	"meshes" : [
-		{
-			"id" : "eyes_Mesh",
-			"attributes" : [
-				"POSITION","NORMAL","TEXCOORD0"
-			],
-			"vertices" : [
-				-0.008195,-0.064439,0.002196,-0.126069,-0.991446,0.033780,0.899576,0.748530,-0.008484,-0.064439,0.0,-0.130517,-0.991446,0.0,0.701832,0.748040,0.0,-0.064995,0.0,0.0,-1.0,0.000000,0.403800,0.774900,-0.016249,-0.062781,0.004354,-0.249983,-0.965931,0.066983,0.889964,0.711910,-0.016822,-0.062781,0.0,-0.258801,-0.965931,0.0,0.687343,0.711420,-0.024025,-0.060048,0.006438,-0.369620,-0.923890,0.099040,0.865230,0.687275,-0.024873,-0.060048,0.0,-0.382659,-0.923890,0.0,0.662590,0.687104,-0.032498,-0.056288,0.0,-0.499972,-0.866041,-0.000000,0.643220,0.650390,-0.024873,-0.060048,0.0,-0.382659,-0.923890,0.0,0.662592,0.687104,-0.031390,-0.056288,0.008411,-0.482936,-0.866041,0.129402,0.840969,0.650870,-0.039567,-0.051564,0.0,-0.608733,-0.793375,-0.000000,0.628728,0.613770,-0.038219,-0.051564,0.010241,-0.587991,-0.793375,0.157552,0.824048,0.614250,-0.045959,-0.045959,0.0,-0.707081,-0.707133,-0.000000,0.604000,0.589401,-0.044393,-0.045959,0.011895,-0.682988,-0.707133,0.183006,0.807100,0.577630,-0.051564,-0.039567,0.0,-0.793332,-0.608790,0.000000,0.584613,0.552730,-0.049807,-0.039567,0.013346,-0.766300,-0.608790,0.205329,0.782220,0.552942,-0.056288,-0.032498,0.0,-0.866010,-0.500027,-0.000000,0.570122,0.516110,-0.054370,-0.032498,0.014568,-0.836501,-0.500027,0.224140,0.765439,0.516600,-0.060048,-0.024873,0.0,-0.923870,-0.382707,0.0,0.550750,0.479490,-0.058002,-0.024873,0.015542,-0.892390,-0.382707,0.239115,0.748496,0.479980,-0.062781,-0.016822,0.0,-0.965921,-0.258837,0.000000,0.525998,0.455070,-0.060642,-0.016822,0.016249,-0.933008,-0.258837,0.249999,0.723630,0.455273,-0.064439,-0.008484,0.0,-0.991444,-0.130536,-0.000000,0.511511,0.418450,-0.062244,-0.008484,0.016678,-0.957661,-0.130536,0.256605,0.714145,0.418940,-0.064995,0.000000,0.0,-1.0,0.0,0.0,0.491690,0.381866,-0.062781,0.000000,0.016822,-0.965926,0.0,0.258819,0.511230,0.418940,-0.062244,0.008484,0.016678,-0.957661,0.130536,0.256605,0.665030,0.357623,-0.064995,0.000000,0.0,-1.0,0.0,0.0,0.492136,0.381830,-0.062781,0.000000,0.016822,-0.965926,0.0,0.258819,0.689896,0.382320,-0.064439,0.008484,0.0,-0.991444,0.130536,-0.000000,0.467396,0.357420,-0.060642,0.016822,0.016249,-0.933008,0.258837,0.249999,0.655541,0.321280,-0.062781,0.016822,0.0,-0.965921,0.258837,0.000000,0.452908,0.320800,-0.058002,0.024873,0.015542,-0.892390,0.382707,0.239115,0.452630,0.321280,-0.060048,0.024873,0.0,-0.923870,0.382707,0.0,0.433519,0.284660,-0.054370,0.032498,0.014568,-0.836501,0.500027,0.224140,0.606440,0.259968,-0.060048,0.024873,0.0,-0.923870,0.382707,0.0,0.433538,0.284180,-0.058002,0.024873,0.015542,-0.892390,0.382707,0.239115,0.631280,0.284660,-0.056288,0.032498,0.0,-0.866010,0.500027,-0.000000,0.408800,0.259760,-0.049807,0.039567,0.013346,-0.766300,0.608790,0.205329,0.596940,0.223630,-0.051564,0.039567,0.0,-0.793332,0.608789,0.000000,0.394314,0.223140,-0.044393,0.045959,0.011895,-0.682988,0.707133,0.183006,0.572692,0.187010,-0.045959,0.045959,0.0,-0.707081,0.707133,-0.000000,0.374949,0.186520,-0.038219,0.051564,0.010241,-0.587991,0.793375,0.157552,0.548094,0.162590,-0.039567,0.051564,0.0,-0.608733,0.793375,-0.000000,0.350339,0.162100,-0.031390,0.056288,0.008411,-0.344063,0.934410,0.092191,0.533488,0.125970,-0.032498,0.056288,0.0,-0.356200,0.934410,-0.000000,0.338040,0.125480,-0.024025,0.057362,0.006438,-0.077714,0.996758,0.020823,0.501720,0.113770,-0.024873,0.057362,-0.000000,-0.080456,0.996758,0.000000,0.306392,0.113280,-0.015836,0.057553,-0.000000,0.285374,0.958416,0.0,0.296845,0.101070,-0.015296,0.057553,0.004099,0.275650,0.958416,-0.073860,0.482339,0.101560,-0.008195,0.044143,0.002196,0.909852,0.335759,-0.243794,0.484768,0.101070,-0.012432,0.055220,-0.000000,0.791849,0.610717,0.0,0.325862,0.101070,-0.012009,0.055220,0.003218,0.764867,0.610717,-0.204946,0.479628,0.101560,-0.008484,0.044143,-0.000000,0.941948,0.335759,0.0,0.330983,0.101070,-0.008484,0.044143,-0.000000,-0.065403,0.997859,0.0,0.330983,0.101070,-0.008195,0.044143,0.002196,-0.063175,0.997859,0.016928,0.484768,0.101070,0.0,0.044699,-0.000000,0.0,1.0,0.000000,0.665412,0.105950,-0.007347,-0.064439,0.004242,-0.113031,-0.991446,0.065258,0.125636,0.750970,-0.008195,-0.064439,0.002196,-0.126069,-0.991446,0.033780,0.086910,0.713860,-0.014568,-0.062781,0.008411,-0.224128,-0.965931,0.129401,0.089174,0.714350,-0.021540,-0.060048,0.012436,-0.331393,-0.923890,0.191330,0.083980,0.689878,-0.016249,-0.062781,0.004354,-0.249983,-0.965931,0.066983,0.084470,0.689450,-0.028144,-0.056288,0.016249,-0.432989,-0.866041,0.249986,0.064593,0.653320,-0.024025,-0.060048,0.006438,-0.369620,-0.923890,0.099040,0.865712,0.675065,-0.034266,-0.051564,0.019783,-0.527178,-0.793375,0.304367,0.028157,0.616690,-0.031390,-0.056288,0.008411,-0.482936,-0.866041,0.129402,0.028320,0.616210,-0.034266,-0.051564,0.019783,-0.527178,-0.793375,0.304367,0.030572,0.616690,-0.038219,-0.051564,0.010241,-0.587991,-0.793375,0.157552,0.030597,0.616210,-0.039801,-0.045959,0.022979,-0.612350,-0.707133,0.353540,0.030270,0.616592,-0.039801,-0.045959,0.022979,-0.612350,-0.707133,0.353540,0.011230,0.579964,-0.044393,-0.045959,0.011895,-0.682988,-0.707133,0.183006,0.011227,0.579590,-0.044656,-0.039567,0.025782,-0.687046,-0.608790,0.396666,0.010740,0.579963,-0.044656,-0.039567,0.025782,-0.687046,-0.608790,0.396666,0.005981,0.555660,-0.049807,-0.039567,0.013346,-0.766300,-0.608790,0.205329,0.968260,0.516110,-0.048747,-0.032498,0.028144,-0.749986,-0.500027,0.433005,0.968082,0.516600,-0.048747,-0.032498,0.028144,-0.749986,-0.500027,0.433005,0.970502,0.516600,-0.054370,-0.032498,0.014568,-0.836501,-0.500027,0.224140,0.970522,0.516110,-0.052003,-0.024873,0.030024,-0.800095,-0.382707,0.461935,0.970210,0.516481,-0.052003,-0.024873,0.030024,-0.800095,-0.382707,0.461935,0.951132,0.479980,-0.058002,-0.024873,0.015542,-0.892390,-0.382707,0.239115,0.748496,0.479695,-0.054370,-0.016822,0.031390,-0.836512,-0.258837,0.482961,0.945920,0.455560,-0.060642,-0.016822,0.016249,-0.933008,-0.258837,0.249999,0.909660,0.418450,-0.055806,-0.008484,0.032220,-0.858615,-0.130536,0.495722,0.909464,0.418940,-0.055806,-0.008484,0.032220,-0.858615,-0.130536,0.495722,0.911898,0.418940,-0.062244,-0.008484,0.016678,-0.957661,-0.130536,0.256605,0.911904,0.418450,-0.056288,0.000000,0.032498,-0.866025,0.0,0.500000,0.911620,0.418816,-0.055806,0.008484,0.032220,-0.858615,0.130536,0.495722,0.892090,0.382195,-0.062781,0.000000,0.016822,-0.965926,0.0,0.258819,0.892519,0.381830,-0.056288,0.000000,0.032498,-0.866025,0.0,0.500000,0.892570,0.382195,-0.054370,0.016822,0.031390,-0.836512,0.258837,0.482961,0.853299,0.321280,-0.062244,0.008484,0.016678,-0.957661,0.130536,0.256605,0.665147,0.357622,-0.055806,0.008484,0.032220,-0.858615,0.130536,0.495722,0.887200,0.357786,-0.052003,0.024873,0.030024,-0.800095,0.382707,0.461935,0.687010,0.321280,-0.060642,0.016822,0.016249,-0.933008,0.258837,0.249999,0.655550,0.320999,-0.048747,0.032498,0.028144,-0.749986,0.500027,0.433005,0.833490,0.284537,-0.058002,0.024873,0.015542,-0.892390,0.382707,0.239115,0.833490,0.284180,-0.052003,0.024873,0.030024,-0.800095,0.382707,0.461935,0.833980,0.284541,-0.044656,0.039567,0.025782,-0.687046,0.608790,0.396666,0.794712,0.223630,-0.054370,0.032498,0.014568,-0.836501,0.500027,0.224140,0.606558,0.259967,-0.048747,0.032498,0.028144,-0.749986,0.500027,0.433005,0.828726,0.260250,-0.039801,0.045959,0.022979,-0.612350,0.707133,0.353540,0.606440,0.223630,-0.049807,0.039567,0.013346,-0.766300,0.608790,0.205329,0.596957,0.223351,-0.044393,0.045959,0.011895,-0.682988,0.707133,0.183006,0.774900,0.186520,-0.034266,0.051564,0.019783,-0.527178,0.793375,0.304367,0.809444,0.162100,-0.039801,0.045959,0.022979,-0.612350,0.707133,0.353540,0.775390,0.186902,-0.038219,0.051564,0.010241,-0.587991,0.793375,0.157552,0.548109,0.162288,-0.028144,0.056288,0.016249,-0.308479,0.934410,0.178100,0.741095,0.125970,-0.034266,0.051564,0.019783,-0.527178,0.793375,0.304367,0.770387,0.162590,-0.031390,0.056288,0.008411,-0.344063,0.934410,0.092191,0.533495,0.125839,-0.021540,0.057362,0.012436,-0.069677,0.996758,0.040228,0.758180,0.113770,-0.013714,0.057553,0.007918,0.247141,0.958416,-0.142687,0.755370,0.113658,-0.024025,0.057362,0.006438,-0.077714,0.996758,0.020823,0.726560,0.101070,-0.007347,0.044143,0.004242,0.815751,0.335759,-0.470974,0.758288,0.101560,-0.010767,0.055220,0.006216,0.685761,0.610717,-0.395924,0.755613,0.101560,-0.008195,0.044143,0.002196,-0.063175,0.997859,0.016928,0.477439,0.101494,-0.007347,0.044143,0.004242,-0.056641,0.997859,0.032702,0.758288,0.101560,-0.005999,-0.064439,0.005999,-0.092289,-0.991446,0.092289,0.328266,0.750970,-0.007347,-0.064439,0.004242,-0.113031,-0.991446,0.065258,0.125635,0.750605,-0.011895,-0.062781,0.011895,-0.183000,-0.965931,0.183000,0.313774,0.714350,-0.014568,-0.062781,0.008411,-0.224128,-0.965931,0.129401,0.267570,0.677247,-0.017588,-0.060048,0.017588,-0.270581,-0.923890,0.270581,0.267549,0.677730,-0.021540,-0.060048,0.012436,-0.331393,-0.923890,0.191330,0.221190,0.652830,-0.022979,-0.056288,0.022979,-0.353534,-0.866041,0.353534,0.269530,0.652903,-0.028144,-0.056288,0.016249,-0.432989,-0.866041,0.249986,0.233390,0.616210,-0.027978,-0.051564,0.027978,-0.430439,-0.793375,0.430439,0.233202,0.616690,-0.039801,-0.045959,0.022979,-0.612350,-0.707133,0.353540,0.208980,0.579590,-0.034266,-0.051564,0.019783,-0.527178,-0.793375,0.304367,0.208980,0.579590,-0.032498,-0.045959,0.032498,-0.499982,-0.707133,0.499982,0.208948,0.580070,-0.039801,-0.045959,0.022979,-0.612350,-0.707133,0.353540,0.162590,0.555170,-0.036462,-0.039567,0.036462,-0.560970,-0.608790,0.560970,0.210930,0.555216,-0.044656,-0.039567,0.025782,-0.687046,-0.608790,0.396666,0.174800,0.518550,-0.039801,-0.032498,0.039801,-0.612361,-0.500027,0.612361,0.174599,0.519040,-0.048747,-0.032498,0.028144,-0.749986,-0.500027,0.433005,0.147940,0.481964,-0.042460,-0.024873,0.042460,-0.653274,-0.382707,0.653275,0.147922,0.482420,-0.052003,-0.024873,0.030024,-0.800095,-0.382707,0.461935,0.951132,0.479859,-0.044393,-0.016822,0.044393,-0.683009,-0.258837,0.683009,0.152340,0.457557,-0.054370,-0.016822,0.031390,-0.836512,-0.258837,0.482961,0.116210,0.420890,-0.045566,-0.008484,0.045566,-0.701057,-0.130536,0.701057,0.116003,0.421380,-0.045959,0.000000,0.045959,-0.707107,0.0,0.707107,0.911620,0.418940,-0.045566,0.008484,0.045566,-0.701057,0.130536,0.701057,0.889640,0.357910,-0.045959,0.000000,0.045959,-0.707107,0.0,0.707107,0.892519,0.382320,-0.044393,0.016822,0.044393,-0.683009,0.258837,0.683009,0.889679,0.321280,-0.055806,0.008484,0.032220,-0.858615,0.130536,0.495722,0.887319,0.357786,-0.045566,0.008484,0.045566,-0.701057,0.130536,0.701057,0.093750,0.359897,-0.042460,0.024873,0.042460,-0.653274,0.382707,0.653275,0.889640,0.321280,-0.054370,0.016822,0.031390,-0.836512,0.258837,0.482961,0.853303,0.321159,-0.052003,0.024873,0.030024,-0.800095,0.382707,0.461935,0.889640,0.320800,-0.039801,0.032498,0.039801,-0.612361,0.500027,0.612361,0.035150,0.262242,-0.052003,0.024873,0.030024,-0.800095,0.382707,0.461935,0.960930,0.259760,-0.042460,0.024873,0.042460,-0.653274,0.382707,0.653275,0.960930,0.260053,-0.036462,0.039567,0.036462,-0.560970,0.608790,0.560970,0.020500,0.225626,-0.048747,0.032498,0.028144,-0.749986,0.500027,0.433005,0.828733,0.260131,-0.039801,0.045959,0.022979,-0.612350,0.707133,0.353540,0.823730,0.223140,-0.032498,0.045959,0.032498,-0.499982,0.707133,0.499982,0.823730,0.223630,-0.044656,0.039567,0.025782,-0.687046,0.608790,0.396666,0.794719,0.223515,-0.027978,0.051564,0.027978,-0.430439,0.793375,0.430439,0.975090,0.162141,-0.039801,0.045959,0.022979,-0.612350,0.707133,0.353540,0.809570,0.162100,-0.032498,0.045959,0.032498,-0.499982,0.707133,0.499982,0.809570,0.162590,-0.022979,0.056288,0.022979,-0.251872,0.934410,0.251872,0.811520,0.162590,-0.034266,0.051564,0.019783,-0.527178,0.793375,0.304367,0.770391,0.162535,-0.022979,0.056288,0.022979,-0.251872,0.934410,0.251872,0.963355,0.125557,-0.017588,0.057362,0.017588,-0.056891,0.996758,0.056891,0.955564,0.113770,-0.028144,0.056288,0.016249,-0.308479,0.934410,0.178100,0.741102,0.125824,-0.021540,0.057362,0.012436,-0.069677,0.996758,0.040228,0.765500,0.113287,-0.011198,0.057553,0.011198,0.201790,0.958416,-0.201790,0.950728,0.113770,-0.005999,0.044143,0.005999,0.666058,0.335759,-0.666058,0.955962,0.101560,-0.008791,0.055220,0.008791,0.559922,0.610717,-0.559922,0.950881,0.101560,-0.007347,0.044143,0.004242,-0.056641,0.997859,0.032702,0.990130,0.088860,-0.005999,0.044143,0.005999,-0.046247,0.997859,0.046247,0.955962,0.101560,-0.004242,-0.064439,0.007347,-0.065258,-0.991446,0.113031,0.526007,0.750970,-0.008411,-0.062781,0.014568,-0.129401,-0.965931,0.224128,0.516406,0.714350,-0.005999,-0.064439,0.005999,-0.092289,-0.991446,0.092289,0.509270,0.713860,-0.012436,-0.060048,0.021540,-0.191330,-0.923890,0.331393,0.492146,0.677730,-0.011895,-0.062781,0.011895,-0.183000,-0.965931,0.183000,0.489740,0.677240,-0.012436,-0.060048,0.021540,-0.191330,-0.923890,0.331393,0.489717,0.677730,-0.022979,-0.056288,0.022979,-0.353534,-0.866041,0.353534,0.220945,0.653320,-0.017588,-0.060048,0.017588,-0.270581,-0.923890,0.270581,0.294430,0.677335,-0.016249,-0.056288,0.028144,-0.249986,-0.866041,0.432989,0.293940,0.677730,-0.022979,-0.056288,0.022979,-0.353534,-0.866041,0.353534,0.450680,0.616210,-0.016249,-0.056288,0.028144,-0.249986,-0.866041,0.432989,0.467280,0.653056,-0.019783,-0.051564,0.034266,-0.304367,-0.793375,0.527178,0.450491,0.616690,-0.027978,-0.051564,0.027978,-0.430439,-0.793375,0.430439,0.431150,0.579623,-0.022979,-0.045959,0.039801,-0.353540,-0.707133,0.612350,0.431122,0.580070,-0.032498,-0.045959,0.032498,-0.499982,-0.707133,0.499982,0.235840,0.579640,-0.025782,-0.039567,0.044656,-0.396666,-0.608790,0.687045,0.235350,0.580070,-0.036462,-0.039567,0.036462,-0.560970,-0.608790,0.560970,0.162347,0.555660,-0.028144,-0.032498,0.048747,-0.433005,-0.500027,0.749986,0.391894,0.519040,-0.036462,-0.039567,0.036462,-0.560970,-0.608790,0.560970,0.392090,0.518550,-0.025782,-0.039567,0.044656,-0.396666,-0.608790,0.687045,0.408690,0.555373,-0.030024,-0.024873,0.052003,-0.461935,-0.382707,0.800095,0.374955,0.482420,-0.039801,-0.032498,0.039801,-0.612361,-0.500027,0.612361,0.345700,0.482031,-0.031390,-0.016822,0.054370,-0.482961,-0.258837,0.836512,0.176750,0.482420,-0.044393,-0.016822,0.044393,-0.683009,-0.258837,0.683009,0.176750,0.481969,-0.042460,-0.024873,0.042460,-0.653274,-0.382707,0.653275,0.177198,0.481930,-0.030024,-0.024873,0.052003,-0.461935,-0.382707,0.800095,0.345685,0.482420,-0.032220,-0.008484,0.055806,-0.495722,-0.130536,0.858615,0.536068,0.420890,-0.045566,-0.008484,0.045566,-0.701057,-0.130536,0.701057,0.137973,0.420890,-0.044393,-0.016822,0.044393,-0.683009,-0.258837,0.683009,0.138180,0.420933,-0.031390,-0.016822,0.054370,-0.482961,-0.258837,0.836512,0.138180,0.421380,-0.032498,0.000000,0.056288,-0.500000,0.0,0.866025,0.137690,0.421380,-0.045959,0.000000,0.045959,-0.707107,0.0,0.707107,0.137690,0.420927,-0.045566,0.008484,0.045566,-0.701057,0.130536,0.701057,0.118160,0.384308,-0.032498,0.000000,0.056288,-0.500000,0.0,0.866025,0.118599,0.384760,-0.032220,0.008484,0.055806,-0.495722,0.130536,0.858615,0.118160,0.384760,-0.045959,0.000000,0.045959,-0.707107,0.0,0.707107,0.118606,0.384270,-0.044393,0.016822,0.044393,-0.683009,0.258837,0.683009,0.079385,0.323240,-0.032220,0.008484,0.055806,-0.495722,0.130536,0.858615,0.079590,0.323730,-0.031390,0.016822,0.054370,-0.482961,0.258837,0.836512,0.079100,0.323730,-0.045566,0.008484,0.045566,-0.701057,0.130536,0.701057,0.079590,0.323278,-0.042460,0.024873,0.042460,-0.653274,0.382707,0.653275,0.079100,0.323288,-0.030024,0.024873,0.052003,-0.461935,0.382707,0.800095,0.079100,0.323730,-0.039801,0.032498,0.039801,-0.612361,0.500027,0.612361,0.960930,0.260053,-0.030024,0.024873,0.052003,-0.461935,0.382707,0.800095,0.059577,0.287100,-0.028144,0.032498,0.048747,-0.433005,0.500027,0.749986,0.037590,0.262690,-0.042460,0.024873,0.042460,-0.653274,0.382707,0.653275,0.060012,0.286620,-0.028144,0.032498,0.048747,-0.433005,0.500027,0.749986,0.232910,0.262399,-0.025782,0.039567,0.044656,-0.396666,0.608790,0.687046,0.223422,0.226070,-0.039801,0.032498,0.039801,-0.612361,0.500027,0.612361,0.035277,0.262242,-0.022979,0.045959,0.039801,-0.353540,0.707133,0.612350,0.199172,0.189450,-0.032498,0.045959,0.032498,-0.499982,0.707133,0.499982,0.030270,0.225580,-0.036462,0.039567,0.036462,-0.560970,0.608790,0.560970,0.020795,0.225625,-0.019783,0.051564,0.034266,-0.304367,0.793375,0.527178,0.977530,0.162590,-0.027978,0.051564,0.027978,-0.430439,0.793375,0.430439,0.000970,0.189026,-0.032498,0.045959,0.032498,-0.499982,0.707133,0.499982,0.001460,0.189012,-0.022979,0.045959,0.039801,-0.353540,0.707133,0.612350,0.000970,0.189450,-0.022979,0.056288,0.022979,-0.251872,0.934410,0.251872,0.977530,0.162100,-0.019783,0.051564,0.034266,-0.304367,0.793375,0.527178,0.174493,0.165030,-0.016249,0.056288,0.028144,-0.178100,0.934410,0.308479,0.162100,0.140487,-0.027978,0.051564,0.027978,-0.430439,0.793375,0.430439,0.975290,0.162139,-0.022979,0.056288,0.022979,-0.251872,0.934410,0.251872,0.963370,0.125558,-0.012436,0.057362,0.021540,-0.040228,0.996758,0.069677,0.962890,0.125970,-0.016249,0.056288,0.028144,-0.178100,0.934410,0.308479,0.962890,0.125970,-0.012436,0.057362,0.021540,-0.040228,0.996758,0.069677,0.154780,0.115851,-0.007918,0.057553,0.013714,0.142687,0.958416,-0.247141,0.960440,0.113770,-0.017588,0.057362,0.017588,-0.056891,0.996758,0.056891,0.958004,0.113283,-0.006216,0.055220,0.010767,0.395924,0.610717,-0.685761,0.118436,0.104000,-0.004242,0.044143,0.007347,0.470974,0.335759,-0.815751,0.121064,0.104000,-0.005999,0.044143,0.005999,-0.046247,0.997859,0.046247,0.579590,0.093750,-0.004242,0.044143,0.007347,-0.032702,0.997859,0.056641,0.121064,0.104000,-0.002196,-0.064439,0.008195,-0.033780,-0.991446,0.126069,0.750610,0.750970,-0.004354,-0.062781,0.016249,-0.066983,-0.965931,0.249983,0.714148,0.714350,-0.004242,-0.064439,0.007347,-0.065258,-0.991446,0.113031,0.711910,0.713860,-0.006438,-0.060048,0.024025,-0.099040,-0.923890,0.369621,0.687477,0.677730,-0.008411,-0.062781,0.014568,-0.129401,-0.965931,0.224128,0.687500,0.677240,-0.006438,-0.060048,0.024025,-0.099040,-0.923890,0.369621,0.694779,0.677730,-0.008411,-0.056288,0.031390,-0.129402,-0.866041,0.482936,0.816749,0.652830,-0.012436,-0.060048,0.021540,-0.191330,-0.923890,0.331393,0.694797,0.677240,-0.010241,-0.051564,0.038219,-0.157552,-0.793375,0.587991,0.655552,0.616690,-0.016249,-0.056288,0.028144,-0.249986,-0.866041,0.432989,0.653320,0.616210,-0.008411,-0.056288,0.031390,-0.129402,-0.866041,0.482936,0.689571,0.653320,-0.011895,-0.045959,0.044393,-0.183006,-0.707133,0.682988,0.628877,0.580070,-0.019783,-0.051564,0.034266,-0.304367,-0.793375,0.527178,0.628900,0.579678,-0.013346,-0.039567,0.049807,-0.205329,-0.608790,0.766300,0.635740,0.579943,-0.022979,-0.045959,0.039801,-0.353540,-0.707133,0.612350,0.636207,0.579590,-0.011895,-0.045959,0.044393,-0.183006,-0.707133,0.682988,0.636230,0.579944,-0.014568,-0.032498,0.054370,-0.224140,-0.500027,0.836501,0.596953,0.519040,-0.025782,-0.039567,0.044656,-0.396666,-0.608790,0.687045,0.594720,0.518550,-0.013346,-0.039567,0.049807,-0.205329,-0.608790,0.766300,0.630965,0.555660,-0.015542,-0.024873,0.058002,-0.239115,-0.382707,0.892390,0.567858,0.482420,-0.028144,-0.032498,0.048747,-0.433005,-0.500027,0.749986,0.567870,0.482102,-0.016249,-0.016822,0.060642,-0.249999,-0.258837,0.933008,0.577140,0.482283,-0.031390,-0.016822,0.054370,-0.482961,-0.258837,0.836512,0.350090,0.457712,-0.030024,-0.024873,0.052003,-0.461935,-0.382707,0.800095,0.577598,0.481930,-0.015542,-0.024873,0.058002,-0.239115,-0.382707,0.892390,0.577630,0.482283,-0.016678,-0.008484,0.062244,-0.256604,-0.130536,0.957661,0.535926,0.421380,-0.032220,-0.008484,0.055806,-0.495722,-0.130536,0.858615,0.340330,0.421085,-0.031390,-0.016822,0.054370,-0.482961,-0.258837,0.836512,0.536130,0.420890,-0.016249,-0.016822,0.060642,-0.249999,-0.258837,0.933008,0.572260,0.457865,-0.016822,0.000000,0.062781,-0.258819,0.0,0.965926,0.538080,0.421242,-0.032498,0.000000,0.056288,-0.500000,0.0,0.866025,0.316356,0.384760,-0.032220,-0.008484,0.055806,-0.495722,-0.130536,0.858615,0.538366,0.420890,-0.016678,-0.008484,0.062244,-0.256604,-0.130536,0.957661,0.538361,0.421380,-0.032220,0.008484,0.055806,-0.495722,0.130536,0.858615,0.291500,0.360055,-0.016822,0.000000,0.062781,-0.258819,0.0,0.965926,0.519040,0.384621,-0.016678,0.008484,0.062244,-0.256604,0.130536,0.957661,0.518550,0.384621,-0.032498,0.000000,0.056288,-0.500000,0.0,0.866025,0.518988,0.384270,-0.031390,0.016822,0.054370,-0.482961,0.258837,0.836512,0.282008,0.323730,-0.016678,0.008484,0.062244,-0.256604,0.130536,0.957661,0.513670,0.360211,-0.016249,0.016822,0.060642,-0.249999,0.258837,0.933008,0.479779,0.323730,-0.032220,0.008484,0.055806,-0.495722,0.130536,0.858615,0.479980,0.323240,-0.030024,0.024873,0.052003,-0.461935,0.382707,0.800095,0.257761,0.287100,-0.015542,0.024873,0.058002,-0.239115,0.382707,0.892390,0.479490,0.323588,-0.031390,0.016822,0.054370,-0.482961,0.258837,0.836512,0.479490,0.323240,-0.015542,0.024873,0.058002,-0.239115,0.382707,0.892390,0.460440,0.286965,-0.014568,0.032498,0.054370,-0.224140,0.500027,0.836501,0.459960,0.286961,-0.030024,0.024873,0.052003,-0.461935,0.382707,0.800095,0.459960,0.286620,-0.014568,0.032498,0.054370,-0.224140,0.500027,0.836501,0.455198,0.262690,-0.013346,0.039567,0.049807,-0.205329,0.608790,0.766300,0.421186,0.226070,-0.028144,0.032498,0.048747,-0.433005,0.500027,0.749986,0.233039,0.262399,-0.011895,0.045959,0.044393,-0.183006,0.707133,0.682988,0.232910,0.226070,-0.025782,0.039567,0.044656,-0.396666,0.608790,0.687046,0.223440,0.225782,-0.022979,0.045959,0.039801,-0.353540,0.707133,0.612350,0.401360,0.188960,-0.011895,0.045959,0.044393,-0.183006,0.707133,0.682988,0.401850,0.189321,-0.010241,0.051564,0.038219,-0.157552,0.793375,0.587991,0.401360,0.189314,-0.010241,0.051564,0.038219,-0.157552,0.793375,0.587991,0.396673,0.165030,-0.019783,0.051564,0.034266,-0.304367,0.793375,0.527178,0.174512,0.164737,-0.008411,0.056288,0.031390,-0.092191,0.934410,0.344063,0.379390,0.140534,-0.006438,0.057362,0.024025,-0.020823,0.996758,0.077714,0.357670,0.116210,-0.016249,0.056288,0.028144,-0.178100,0.934410,0.308479,0.162103,0.140487,-0.006438,0.057362,0.024025,-0.020823,0.996758,0.077714,0.372070,0.128175,-0.004099,0.057553,0.015296,0.073860,0.958416,-0.275650,0.147460,0.116210,-0.012436,0.057362,0.021540,-0.040228,0.996758,0.069677,0.140620,0.116210,-0.007918,0.057553,0.013714,0.142687,0.958416,-0.247141,0.140261,0.115720,-0.003218,0.055220,0.012009,0.204946,0.610717,-0.764867,0.343131,0.104000,-0.002196,0.044143,0.008195,0.243794,0.335759,-0.909852,0.342849,0.104000,-0.004242,0.044143,0.007347,-0.032702,0.997859,0.056641,0.562500,0.093750,-0.002196,0.044143,0.008195,-0.016928,0.997859,0.063175,0.342849,0.104000,-0.000000,-0.064439,0.008484,0.0,-0.991446,0.130517,0.748340,0.750970,-0.002196,-0.064439,0.008195,-0.033780,-0.991446,0.126069,0.748178,0.750970,-0.000000,-0.064439,0.008484,0.0,-0.991446,0.130517,0.945924,0.750970,-0.000000,-0.062781,0.016822,0.0,-0.965931,0.258801,0.916785,0.714350,-0.002196,-0.064439,0.008195,-0.033780,-0.991446,0.126069,0.916990,0.713860,-0.000000,-0.060048,0.024873,0.0,-0.923890,0.382659,0.892527,0.677730,-0.004354,-0.062781,0.016249,-0.066983,-0.965931,0.249983,0.892570,0.677240,-0.000000,-0.056288,0.032498,0.0,-0.866041,0.499972,0.894530,0.652861,-0.006438,-0.060048,0.024025,-0.099040,-0.923890,0.369621,0.816890,0.652830,-0.000000,-0.051564,0.039567,0.0,-0.793375,0.608733,0.858184,0.616690,-0.008411,-0.056288,0.031390,-0.129402,-0.866041,0.482936,0.858390,0.616210,-0.000000,-0.045959,0.045959,0.000000,-0.707133,0.707081,0.833931,0.580070,-0.010241,-0.051564,0.038219,-0.157552,-0.793375,0.587991,0.833980,0.579590,-0.000000,-0.039567,0.051564,-0.000000,-0.608790,0.793332,0.835930,0.555190,-0.011895,-0.045959,0.044393,-0.183006,-0.707133,0.682988,0.760740,0.555170,-0.000000,-0.032498,0.056288,0.000000,-0.500027,0.866010,0.799587,0.519040,-0.013346,-0.039567,0.049807,-0.205329,-0.608790,0.766300,0.799800,0.518550,-0.000000,-0.024873,0.060048,0.0,-0.382707,0.923870,0.775341,0.482420,-0.014568,-0.032498,0.054370,-0.224140,-0.500027,0.836501,0.775390,0.481930,-0.000000,-0.016822,0.062781,-0.000000,-0.258837,0.965921,0.777340,0.457536,-0.015542,-0.024873,0.058002,-0.239115,-0.382707,0.892390,0.577582,0.482283,-0.000000,-0.008484,0.064439,0.000000,-0.130536,0.991444,0.741000,0.421380,-0.016249,-0.016822,0.060642,-0.249999,-0.258837,0.933008,0.741210,0.420890,-0.000000,0.000000,0.064995,0.0,0.0,1.0,0.538080,0.421380,-0.000000,0.000000,0.064995,0.0,0.0,1.0,0.518988,0.384760,-0.000000,0.008484,0.064439,0.000000,0.130536,0.991444,0.516110,0.360350,-0.016249,0.016822,0.060642,-0.249999,0.258837,0.933008,0.516110,0.359860,-0.000000,0.008484,0.064439,0.000000,0.130536,0.991444,0.718750,0.359876,-0.000000,0.016822,0.062781,-0.000000,0.258837,0.965921,0.518622,0.323730,-0.016678,0.008484,0.062244,-0.256604,0.130536,0.957661,0.513792,0.360211,-0.015542,0.024873,0.058002,-0.239115,0.382707,0.892390,0.518550,0.323240,-0.000000,0.024873,0.060048,0.0,0.382707,0.923870,0.518550,0.323730,-0.016249,0.016822,0.060642,-0.249999,0.258837,0.933008,0.479779,0.323591,-0.000000,0.024873,0.060048,0.0,0.382707,0.923870,0.459960,0.287100,-0.000000,0.032498,0.056288,0.000000,0.500027,0.866010,0.457520,0.262690,-0.000000,0.032498,0.056288,0.000000,0.500027,0.866010,0.660150,0.262218,0.0,0.039567,0.051564,-0.000000,0.608789,0.793332,0.645500,0.225599,-0.014568,0.032498,0.054370,-0.224140,0.500027,0.836501,0.455205,0.262554,-0.011895,0.045959,0.044393,-0.183006,0.707133,0.682988,0.457520,0.225580,-0.000000,0.045959,0.045959,0.000000,0.707133,0.707081,0.457520,0.226070,-0.013346,0.039567,0.049807,-0.205329,0.608790,0.766300,0.421195,0.225936,-0.000000,0.045959,0.045959,0.000000,0.707133,0.707081,0.401360,0.189450,-0.000000,0.051564,0.039567,0.0,0.793375,0.608733,0.398920,0.165030,-0.000000,0.051564,0.039567,0.0,0.793375,0.608733,0.601560,0.164576,-0.010241,0.051564,0.038219,-0.157552,0.793375,0.587991,0.396681,0.164911,-0.000000,0.056288,0.032498,0.000000,0.934410,0.356200,0.398920,0.165030,-0.000000,0.056288,0.032498,0.000000,0.934410,0.356200,0.372550,0.128410,-0.008411,0.056288,0.031390,-0.092191,0.934410,0.344063,0.379407,0.140534,-0.000000,0.057362,0.024873,-0.000000,0.996758,0.080456,0.582257,0.116210,-0.000000,0.057553,0.015836,0.0,0.958416,-0.285374,0.577465,0.116210,-0.006438,0.057362,0.024025,-0.020823,0.996758,0.077714,0.357687,0.115949,-0.004099,0.057553,0.015296,0.073860,0.958416,-0.275650,0.343014,0.116210,-0.000000,0.055220,0.012432,0.0,0.610717,-0.791849,0.584960,0.103833,0.0,0.044143,0.008484,0.0,0.335759,-0.941948,0.584618,0.104000,-0.002196,0.044143,0.008195,-0.016928,0.997859,0.063175,0.599367,0.093750,0.0,0.044143,0.008484,0.0,0.997859,0.065403,0.584618,0.104000,0.002196,-0.064439,0.008195,0.033780,-0.991446,0.126069,0.150026,0.753410,-0.000000,-0.064439,0.008484,0.0,-0.991446,0.130517,0.135740,0.716300,0.004354,-0.062781,0.016249,0.066983,-0.965931,0.249983,0.135537,0.716790,0.006438,-0.060048,0.024025,0.099040,-0.923890,0.369620,0.116170,0.680170,-0.000000,-0.062781,0.016822,0.0,-0.965931,0.258801,0.116210,0.679680,0.008411,-0.056288,0.031390,0.129402,-0.866041,0.482936,0.093750,0.655445,-0.000000,-0.060048,0.024873,0.0,-0.923890,0.382659,0.919384,0.677281,0.010241,-0.051564,0.038219,0.157552,-0.793375,0.587991,0.076940,0.619140,-0.000000,-0.056288,0.032498,0.0,-0.866041,0.499972,0.077140,0.618650,0.011895,-0.045959,0.044393,0.183006,-0.707133,0.682988,0.057569,0.582520,-0.000000,-0.051564,0.039567,0.0,-0.793375,0.608733,0.057610,0.582030,-0.000000,-0.039567,0.051564,-0.000000,-0.608790,0.793332,0.760497,0.555660,0.013346,-0.039567,0.049807,0.205329,-0.608790,0.766300,0.860350,0.580070,-0.000000,-0.045959,0.045959,0.000000,-0.707133,0.707081,0.860790,0.579590,0.013346,-0.039567,0.049807,0.205329,-0.608790,0.766300,0.035150,0.557780,0.014568,-0.032498,0.054370,0.224140,-0.500027,0.836501,0.018344,0.521480,-0.000000,-0.039567,0.051564,-0.000000,-0.608790,0.793332,0.018550,0.520990,0.015542,-0.024873,0.058002,0.239115,-0.382707,0.892390,0.194330,0.484419,-0.000000,-0.032498,0.056288,0.000000,-0.500027,0.866010,0.821556,0.518550,-0.000000,-0.016822,0.062781,-0.000000,-0.258837,0.965921,0.801750,0.481947,0.016249,-0.016822,0.060642,0.249999,-0.258837,0.933008,0.801750,0.482420,-0.000000,-0.024873,0.060048,0.0,-0.382707,0.923870,0.802190,0.481930,-0.000000,-0.008484,0.064439,0.000000,-0.130536,0.991444,0.762970,0.420890,0.016249,-0.016822,0.060642,0.249999,-0.258837,0.933008,0.763180,0.421380,0.016678,-0.008484,0.062244,0.256604,-0.130536,0.957661,0.162527,0.423340,-0.000000,-0.016822,0.062781,-0.000000,-0.258837,0.965921,0.763180,0.420912,-0.000000,0.000000,0.064995,0.0,0.0,1.0,0.762690,0.420905,0.016822,0.000000,0.062781,0.258819,0.0,0.965926,0.762690,0.421380,0.016678,0.008484,0.062244,0.256604,0.130536,0.957661,0.743160,0.384760,-0.000000,0.008484,0.064439,0.000000,0.130536,0.991444,0.743160,0.384288,-0.000000,0.000000,0.064995,0.0,0.0,1.0,0.743606,0.384270,0.016822,0.000000,0.062781,0.258819,0.0,0.965926,0.743598,0.384760,0.016249,0.016822,0.060642,0.249999,0.258837,0.933008,0.938756,0.323240,-0.000000,0.016822,0.062781,-0.000000,0.258837,0.965921,0.704391,0.323240,-0.000000,0.008484,0.064439,0.000000,0.130536,0.991444,0.704590,0.323256,0.016678,0.008484,0.062244,0.256604,0.130536,0.957661,0.704590,0.323730,0.015542,0.024873,0.058002,0.239115,0.382707,0.892390,0.704100,0.323730,-0.000000,0.024873,0.060048,0.0,0.382707,0.923870,0.704100,0.323266,0.014568,0.032498,0.054370,0.224140,0.500027,0.836501,0.662590,0.262690,-0.000000,0.032498,0.056288,0.000000,0.500027,0.866010,0.684570,0.286650,-0.000000,0.024873,0.060048,0.0,0.382707,0.923870,0.685020,0.286620,0.015542,0.024873,0.058002,0.239115,0.382707,0.892390,0.684586,0.287100,0.013346,0.039567,0.049807,0.205329,0.608790,0.766300,0.848430,0.226070,-0.000000,0.032498,0.056288,0.000000,0.500027,0.866010,0.660288,0.262218,0.014568,0.032498,0.054370,0.224140,0.500027,0.836501,0.857910,0.262370,0.011895,0.045959,0.044393,0.183006,0.707133,0.682988,0.824181,0.189450,-0.000000,0.045959,0.045959,0.000000,0.707133,0.707081,0.655270,0.225580,0.0,0.039567,0.051564,-0.000000,0.608789,0.793332,0.645808,0.225599,0.010241,0.051564,0.038219,0.157552,0.793375,0.587991,0.604000,0.165030,-0.000000,0.045959,0.045959,0.000000,0.707133,0.707081,0.626460,0.188982,0.011895,0.045959,0.044393,0.183006,0.707133,0.682988,0.625970,0.189450,-0.000000,0.051564,0.039567,0.0,0.793375,0.608733,0.625970,0.189013,0.010241,0.051564,0.038219,0.157552,0.793375,0.587991,0.799310,0.164719,-0.000000,0.056288,0.032498,0.000000,0.934410,0.356200,0.604000,0.164550,-0.000000,0.051564,0.039567,0.0,0.793375,0.608733,0.601725,0.164574,0.008411,0.056288,0.031390,0.092191,0.934410,0.344063,0.604000,0.165030,0.008411,0.056288,0.031390,0.092191,0.934410,0.344063,0.589350,0.128410,-0.000000,0.057362,0.024873,-0.000000,0.996758,0.080456,0.589350,0.128166,-0.000000,0.056288,0.032498,0.000000,0.934410,0.356200,0.589794,0.127930,0.006438,0.057362,0.024025,0.020823,0.996758,0.077714,0.584470,0.116210,0.006438,0.057362,0.024025,0.020823,0.996758,0.077714,0.777537,0.116210,-0.000000,0.057362,0.024873,-0.000000,0.996758,0.080456,0.582272,0.115957,0.004099,0.057553,0.015296,-0.073860,0.958416,-0.275650,0.762982,0.116210,0.002196,0.044143,0.008195,-0.243794,0.335759,-0.909852,0.740852,0.104000,0.003218,0.055220,0.012009,-0.204946,0.610717,-0.764867,0.743581,0.104000,0.0,0.044143,0.008484,0.0,0.997859,0.065403,0.777484,0.103510,0.002196,0.044143,0.008195,0.016928,0.997859,0.063175,0.740852,0.104000,0.004242,-0.064439,0.007347,0.065258,-0.991446,0.113031,0.374632,0.753410,0.008411,-0.062781,0.014568,0.129401,-0.965931,0.224128,0.340611,0.716790,0.002196,-0.064439,0.008195,0.033780,-0.991446,0.126069,0.338370,0.716300,0.012436,-0.060048,0.021540,0.191330,-0.923890,0.331393,0.321233,0.680170,0.004354,-0.062781,0.016249,0.066983,-0.965931,0.249983,0.313960,0.679680,0.006438,-0.060048,0.024025,0.099040,-0.923890,0.369620,0.118602,0.679859,0.016249,-0.056288,0.028144,0.249986,-0.866041,0.432989,0.316024,0.655760,0.008411,-0.056288,0.031390,0.129402,-0.866041,0.482936,0.279780,0.618650,0.019783,-0.051564,0.034266,0.304367,-0.793375,0.527178,0.282005,0.619140,0.022979,-0.045959,0.039801,0.353540,-0.707133,0.612350,0.255338,0.582520,0.010241,-0.051564,0.038219,0.157552,-0.793375,0.587991,0.255370,0.582030,0.022979,-0.045959,0.039801,0.353540,-0.707133,0.612350,0.262690,0.582350,0.025782,-0.039567,0.044656,0.396666,-0.608790,0.687045,0.262200,0.582350,0.011895,-0.045959,0.044393,0.183006,-0.707133,0.682988,0.262658,0.582030,0.025782,-0.039567,0.044656,0.396666,-0.608790,0.687045,0.257320,0.557931,0.028144,-0.032498,0.048747,0.433005,-0.500027,0.749986,0.223415,0.521480,0.013346,-0.039567,0.049807,0.205329,-0.608790,0.766300,0.221190,0.520990,0.015542,-0.024873,0.058002,0.239115,-0.382707,0.892390,0.001410,0.484860,0.030024,-0.024873,0.052003,0.461935,-0.382707,0.800095,0.194314,0.484860,0.014568,-0.032498,0.054370,0.224140,-0.500027,0.836501,0.194330,0.484419,0.016249,-0.016822,0.060642,0.249999,-0.258837,0.933008,0.975090,0.457686,0.030024,-0.024873,0.052003,0.461935,-0.382707,0.800095,0.204100,0.484692,0.031390,-0.016822,0.054370,0.482960,-0.258837,0.836512,0.203610,0.484692,0.015542,-0.024873,0.058002,0.239115,-0.382707,0.892390,0.204063,0.484370,0.016678,-0.008484,0.062244,0.256604,-0.130536,0.957661,0.965330,0.421059,0.031390,-0.016822,0.054370,0.482960,-0.258837,0.836512,0.198730,0.460275,0.032220,-0.008484,0.055806,0.495722,-0.130536,0.858615,0.162385,0.423820,0.016249,-0.016822,0.060642,0.249999,-0.258837,0.933008,0.162590,0.423340,0.016822,0.000000,0.062781,0.258819,0.0,0.965926,0.941356,0.384760,0.032220,-0.008484,0.055806,0.495722,-0.130536,0.858615,0.164824,0.423820,0.032498,0.000000,0.056288,0.500000,0.0,0.866025,0.164550,0.423656,0.016678,-0.008484,0.062244,0.256604,-0.130536,0.957661,0.164829,0.423340,0.032220,0.008484,0.055806,0.495722,0.130536,0.858615,0.145020,0.387031,0.016678,0.008484,0.062244,0.256604,0.130536,0.957661,0.916500,0.360029,0.016822,0.000000,0.062781,0.258819,0.0,0.965926,0.145449,0.386710,0.032498,0.000000,0.056288,0.500000,0.0,0.866025,0.145500,0.387032,0.031390,0.016822,0.054370,0.482961,0.258837,0.836512,0.106236,0.326170,0.016249,0.016822,0.060642,0.249999,0.258837,0.933008,0.906730,0.323409,0.016678,0.008484,0.062244,0.256604,0.130536,0.957661,0.938960,0.323240,0.032220,0.008484,0.055806,0.495722,0.130536,0.858615,0.140130,0.362622,0.030024,0.024873,0.052003,0.461935,0.382707,0.800095,0.945800,0.323730,0.015542,0.024873,0.058002,0.239115,0.382707,0.892390,0.882766,0.287100,0.016249,0.016822,0.060642,0.249999,0.258837,0.933008,0.907022,0.323409,0.028144,0.032498,0.048747,0.433005,0.500027,0.749986,0.086420,0.289377,0.015542,0.024873,0.058002,0.239115,0.382707,0.892390,0.086423,0.289060,0.030024,0.024873,0.052003,0.461935,0.382707,0.800095,0.086910,0.289381,0.025782,0.039567,0.044656,0.396666,0.608790,0.687045,0.047659,0.228510,0.014568,0.032498,0.054370,0.224140,0.500027,0.836501,0.858047,0.262369,0.028144,0.032498,0.048747,0.433005,0.500027,0.749986,0.081540,0.264961,0.022979,0.045959,0.039801,0.353540,0.707133,0.612350,0.879880,0.226070,0.013346,0.039567,0.049807,0.205329,0.608790,0.766300,0.848449,0.225750,0.019783,0.051564,0.034266,0.304367,0.793375,0.527178,0.027830,0.191710,0.011895,0.045959,0.044393,0.183006,0.707133,0.682988,0.027830,0.191400,0.022979,0.045959,0.039801,0.353540,0.707133,0.612350,0.028320,0.191720,0.019783,0.051564,0.034266,0.304367,0.793375,0.527178,0.023108,0.167480,0.008411,0.056288,0.031390,0.092191,0.934410,0.344063,0.826170,0.164550,0.010241,0.051564,0.038219,0.157552,0.793375,0.587991,0.799473,0.164717,0.016249,0.056288,0.028144,0.178100,0.934410,0.308479,0.013180,0.142586,0.016249,0.056288,0.028144,0.178100,0.934410,0.308479,0.787100,0.128410,0.006438,0.057362,0.024025,0.020823,0.996758,0.077714,0.787100,0.128044,0.008411,0.056288,0.031390,0.092191,0.934410,0.344063,0.787590,0.128063,0.012436,0.057362,0.021540,0.040228,0.996758,0.069677,0.787100,0.128410,0.012436,0.057362,0.021540,0.040228,0.996758,0.069677,0.985153,0.116210,0.006438,0.057362,0.024025,0.020823,0.996758,0.077714,0.997550,0.115720,0.007918,0.057553,0.013714,-0.142687,0.958416,-0.247141,0.997461,0.116210,0.002196,0.044143,0.008195,-0.243794,0.335759,-0.909852,0.770148,0.103510,0.004242,0.044143,0.007347,-0.470974,0.335759,-0.815751,0.975304,0.104000,0.006216,0.055220,0.010767,-0.395924,0.610717,-0.685761,0.997096,0.116210,0.002196,0.044143,0.008195,0.016928,0.997859,0.063175,0.584470,0.093750,0.004242,0.044143,0.007347,0.032702,0.997859,0.056641,0.975304,0.104000,0.005999,-0.064439,0.005999,0.092289,-0.991446,0.092289,0.572385,0.753410,0.004242,-0.064439,0.007347,0.065258,-0.991446,0.113031,0.536130,0.716300,0.011895,-0.062781,0.011895,0.183000,-0.965931,0.183000,0.543243,0.716790,0.008411,-0.062781,0.014568,0.129401,-0.965931,0.224128,0.516600,0.679680,0.017588,-0.060048,0.017588,0.270581,-0.923890,0.270581,0.518994,0.680170,0.012436,-0.060048,0.021540,0.191330,-0.923890,0.331393,0.321232,0.679996,0.022979,-0.056288,0.022979,0.353534,-0.866041,0.353534,0.513786,0.655760,0.027978,-0.051564,0.027978,0.430439,-0.793375,0.430439,0.477349,0.619140,0.016249,-0.056288,0.028144,0.249986,-0.866041,0.432989,0.477530,0.618650,0.027978,-0.051564,0.027978,0.430439,-0.793375,0.430439,0.484647,0.619140,0.019783,-0.051564,0.034266,0.304367,-0.793375,0.527178,0.484676,0.618650,0.032498,-0.045959,0.032498,0.499982,-0.707133,0.499982,0.484370,0.619117,0.036462,-0.039567,0.036462,0.560970,-0.608790,0.560970,0.459960,0.582500,0.022979,-0.045959,0.039801,0.353540,-0.707133,0.612350,0.460419,0.582030,0.032498,-0.045959,0.032498,0.499982,-0.707133,0.499982,0.460391,0.582520,0.036462,-0.039567,0.036462,0.560970,-0.608790,0.560970,0.455181,0.558100,0.039801,-0.032498,0.039801,0.612361,-0.500027,0.612361,0.418751,0.521480,0.025782,-0.039567,0.044656,0.396666,-0.608790,0.687045,0.418940,0.520990,0.039801,-0.032498,0.039801,0.612361,-0.500027,0.612361,0.426056,0.521480,0.042460,-0.024873,0.042460,0.653275,-0.382707,0.653275,0.425780,0.521463,0.028144,-0.032498,0.048747,0.433005,-0.500027,0.749986,0.426081,0.520990,0.042460,-0.024873,0.042460,0.653275,-0.382707,0.653275,0.401800,0.484860,0.044393,-0.016822,0.044393,0.683009,-0.258837,0.683009,0.401360,0.484845,0.030024,-0.024873,0.052003,0.461935,-0.382707,0.800095,0.401821,0.484370,0.044393,-0.016822,0.044393,0.683009,-0.258837,0.683009,0.396595,0.460440,0.045566,-0.008484,0.045566,0.701057,-0.130536,0.701057,0.367460,0.423820,0.031390,-0.016822,0.054370,0.482960,-0.258837,0.836512,0.367670,0.423340,0.032498,0.000000,0.056288,0.500000,0.0,0.866025,0.367180,0.423340,0.045959,0.000000,0.045959,0.707107,0.0,0.707107,0.367180,0.423806,0.032220,-0.008484,0.055806,0.495722,-0.130536,0.858615,0.367617,0.423340,0.045566,0.008484,0.045566,0.701057,0.130536,0.701057,0.342770,0.387183,0.032498,0.000000,0.056288,0.500000,0.0,0.866025,0.343208,0.386710,0.045959,0.000000,0.045959,0.707107,0.0,0.707107,0.343216,0.387200,0.044393,0.016822,0.044393,0.683009,0.258837,0.683009,0.308881,0.326170,0.032220,0.008484,0.055806,0.495722,0.130536,0.858615,0.309080,0.325680,0.045566,0.008484,0.045566,0.701057,0.130536,0.701057,0.338010,0.362790,0.042460,0.024873,0.042460,0.653274,0.382707,0.653275,0.308590,0.326145,0.030024,0.024873,0.052003,0.461935,0.382707,0.800095,0.308590,0.325680,0.031390,0.016822,0.054370,0.482961,0.258837,0.836512,0.308590,0.325680,0.039801,0.032498,0.039801,0.612361,0.500027,0.612361,0.284180,0.289520,0.030024,0.024873,0.052003,0.461935,0.382707,0.800095,0.284196,0.289060,0.042460,0.024873,0.042460,0.653274,0.382707,0.653275,0.284630,0.289550,0.036462,0.039567,0.036462,0.560970,0.608790,0.560970,0.250301,0.228510,0.028144,0.032498,0.048747,0.433005,0.500027,0.749986,0.081679,0.264961,0.039801,0.032498,0.039801,0.612361,0.500027,0.612361,0.279427,0.265130,0.025782,0.039567,0.044656,0.396666,0.608790,0.687045,0.047670,0.228340,0.032498,0.045959,0.032498,0.499982,0.707133,0.499982,0.083980,0.228510,0.022979,0.045959,0.039801,0.353540,0.707133,0.612350,0.083980,0.228020,0.022979,0.045959,0.039801,0.353540,0.707133,0.612350,0.225580,0.191400,0.027978,0.051564,0.027978,0.430439,0.793375,0.430439,0.225580,0.191818,0.032498,0.045959,0.032498,0.499982,0.707133,0.499982,0.226070,0.191870,0.027978,0.051564,0.027978,0.430439,0.793375,0.430439,0.220925,0.167480,0.022979,0.056288,0.022979,0.251872,0.934410,0.251872,0.189418,0.130850,0.019783,0.051564,0.034266,0.304367,0.793375,0.527178,0.023118,0.167308,0.022979,0.056288,0.022979,0.251872,0.934410,0.251872,0.992180,0.128410,0.017588,0.057362,0.017588,0.056891,0.996758,0.056891,0.992180,0.128410,0.016249,0.056288,0.028144,0.178100,0.934410,0.308479,0.992670,0.127946,0.011198,0.057553,0.011198,-0.201790,0.958416,-0.201790,0.181640,0.118457,0.012436,0.057362,0.021540,0.040228,0.996758,0.069677,0.181640,0.118160,0.017588,0.057362,0.017588,0.056891,0.996758,0.056891,0.181976,0.118650,0.007918,0.057553,0.013714,-0.142687,0.958416,-0.247141,0.001348,0.118650,0.008791,0.055220,0.008791,-0.559922,0.610717,-0.559922,0.193907,0.118650,0.005999,0.044143,0.005999,-0.666058,0.335759,-0.666058,0.201425,0.105950,0.004242,0.044143,0.007347,0.032702,0.997859,0.056641,0.977744,0.103587,0.005999,0.044143,0.005999,0.046247,0.997859,0.046247,0.201425,0.105950,0.007347,-0.064439,0.004242,0.113031,-0.991446,0.065258,0.777470,0.753410,0.014568,-0.062781,0.008411,0.224128,-0.965931,0.129401,0.760540,0.716790,0.005999,-0.064439,0.005999,0.092289,-0.991446,0.092289,0.760740,0.716300,0.011895,-0.062781,0.011895,0.183000,-0.965931,0.183000,0.741210,0.679680,0.021540,-0.060048,0.012436,0.331393,-0.923890,0.191330,0.741173,0.680170,0.017588,-0.060048,0.017588,0.270581,-0.923890,0.270581,0.667960,0.655270,0.028144,-0.056288,0.016249,0.432989,-0.866041,0.249986,0.718750,0.655387,0.034266,-0.051564,0.019783,0.527178,-0.793375,0.304367,0.701943,0.619140,0.022979,-0.056288,0.022979,0.353534,-0.866041,0.353534,0.702140,0.618650,0.032498,-0.045959,0.032498,0.499982,-0.707133,0.499982,0.682610,0.582030,0.027978,-0.051564,0.027978,0.430439,-0.793375,0.430439,0.682610,0.582030,0.039801,-0.045959,0.022979,0.612350,-0.707133,0.353540,0.682572,0.582520,0.044656,-0.039567,0.025782,0.687046,-0.608790,0.396666,0.660150,0.557744,0.032498,-0.045959,0.032498,0.499982,-0.707133,0.499982,0.609370,0.557610,0.036462,-0.039567,0.036462,0.560970,-0.608790,0.560970,0.643550,0.520990,0.048747,-0.032498,0.028144,0.749986,-0.500027,0.433005,0.643346,0.521480,0.042460,-0.024873,0.042460,0.653275,-0.382707,0.653275,0.624020,0.484370,0.039801,-0.032498,0.039801,0.612361,-0.500027,0.612361,0.624020,0.484370,0.052003,-0.024873,0.030024,0.800095,-0.382707,0.461935,0.623978,0.484860,0.042460,-0.024873,0.042460,0.653275,-0.382707,0.653275,0.401800,0.484845,0.054370,-0.016822,0.031390,0.836512,-0.258837,0.482961,0.601560,0.460096,0.045566,-0.008484,0.045566,0.701057,-0.130536,0.701057,0.584903,0.423340,0.044393,-0.016822,0.044393,0.683009,-0.258837,0.683009,0.584960,0.423340,0.055806,-0.008484,0.032220,0.858615,-0.130536,0.495722,0.584753,0.423820,0.045959,0.000000,0.045959,0.707107,0.0,0.707107,0.591790,0.423340,0.045566,-0.008484,0.045566,0.701057,-0.130536,0.701057,0.592073,0.423340,0.056288,0.000000,0.032498,0.866025,0.0,0.500000,0.591790,0.423476,0.055806,-0.008484,0.032220,0.858615,-0.130536,0.495722,0.592071,0.423340,0.056288,0.000000,0.032498,0.866025,0.0,0.500000,0.567870,0.386850,0.055806,0.008484,0.032220,0.858615,0.130536,0.495722,0.567380,0.386850,0.045959,0.000000,0.045959,0.707107,0.0,0.707107,0.567818,0.386710,0.044393,0.016822,0.044393,0.683009,0.258837,0.683009,0.345210,0.362300,0.055806,0.008484,0.032220,0.858615,0.130536,0.495722,0.542960,0.362439,0.054370,0.016822,0.031390,0.836512,0.258837,0.482961,0.347715,0.326170,0.045566,0.008484,0.045566,0.701057,0.130536,0.701057,0.338011,0.362775,0.042460,0.024873,0.042460,0.653274,0.382707,0.653275,0.347650,0.325680,0.052003,0.024873,0.030024,0.800095,0.382707,0.461935,0.347650,0.326170,0.044393,0.016822,0.044393,0.683009,0.258837,0.683009,0.308881,0.326155,0.052003,0.024873,0.030024,0.800095,0.382707,0.461935,0.509270,0.289198,0.048747,0.032498,0.028144,0.749986,0.500027,0.433005,0.508780,0.289203,0.042460,0.024873,0.042460,0.653274,0.382707,0.653275,0.508780,0.289060,0.048747,0.032498,0.028144,0.749986,0.500027,0.433005,0.484370,0.264776,0.044656,0.039567,0.025782,0.687046,0.608790,0.396666,0.474883,0.228510,0.039801,0.032498,0.039801,0.612361,0.500027,0.612361,0.279428,0.265113,0.036462,0.039567,0.036462,0.560970,0.608790,0.560970,0.250302,0.228491,0.039801,0.045959,0.022979,0.612350,0.707133,0.353540,0.281730,0.228510,0.032498,0.045959,0.032498,0.499982,0.707133,0.499982,0.281730,0.228020,0.032498,0.045959,0.032498,0.499982,0.707133,0.499982,0.423820,0.166990,0.034266,0.051564,0.019783,0.527178,0.793375,0.304367,0.423605,0.167480,0.039801,0.045959,0.022979,0.612350,0.707133,0.353540,0.423820,0.167480,0.028144,0.056288,0.016249,0.308479,0.934410,0.178100,0.413570,0.142627,0.027978,0.051564,0.027978,0.430439,0.793375,0.430439,0.220928,0.167432,0.017588,0.057362,0.017588,0.056891,0.996758,0.056891,0.413570,0.130370,0.028144,0.056288,0.016249,0.308479,0.934410,0.178100,0.414060,0.130414,0.021540,0.057362,0.012436,0.069677,0.996758,0.040228,0.413771,0.118650,0.022979,0.056288,0.022979,0.251872,0.934410,0.251872,0.413570,0.130370,0.011198,0.057553,0.011198,-0.201790,0.958416,-0.201790,0.194257,0.118650,0.013714,0.057553,0.007918,-0.247141,0.958416,-0.142687,0.469923,0.118650,0.017588,0.057362,0.017588,0.056891,0.996758,0.056891,0.181976,0.118594,0.010767,0.055220,0.006216,-0.685761,0.610717,-0.395924,0.487118,0.106440,0.007347,0.044143,0.004242,-0.815751,0.335759,-0.470974,0.516110,0.106193,0.005999,0.044143,0.005999,0.046247,0.997859,0.046247,0.518550,0.105950,0.007347,0.044143,0.004242,0.056641,0.997859,0.032702,0.519040,0.106149,0.008195,-0.064439,0.002196,0.126069,-0.991446,0.033780,0.972788,0.753410,0.007347,-0.064439,0.004242,0.113031,-0.991446,0.065258,0.775032,0.753410,0.007347,-0.064439,0.004242,0.113031,-0.991446,0.065258,0.963370,0.716300,0.016249,-0.062781,0.004354,0.249983,-0.965931,0.066983,0.963185,0.716790,0.014568,-0.062781,0.008411,0.224128,-0.965931,0.129401,0.938960,0.679680,0.024025,-0.060048,0.006438,0.369621,-0.923890,0.099040,0.946246,0.680170,0.024025,-0.060048,0.006438,0.369621,-0.923890,0.099040,0.938936,0.680170,0.028144,-0.056288,0.016249,0.432989,-0.866041,0.249986,0.667716,0.655760,0.021540,-0.060048,0.012436,0.331393,-0.923890,0.191330,0.743609,0.679680,0.031390,-0.056288,0.008411,0.482936,-0.866041,0.129402,0.743160,0.680170,0.028144,-0.056288,0.016249,0.432989,-0.866041,0.249986,0.904780,0.618650,0.031390,-0.056288,0.008411,0.482936,-0.866041,0.129402,0.941037,0.655760,0.038219,-0.051564,0.010241,0.587991,-0.793375,0.157552,0.907017,0.619140,0.034266,-0.051564,0.019783,0.527178,-0.793375,0.304367,0.880370,0.582114,0.044393,-0.045959,0.011895,0.682988,-0.707133,0.183006,0.887649,0.582520,0.044656,-0.039567,0.025782,0.687046,-0.608790,0.396666,0.609131,0.558100,0.039801,-0.045959,0.022979,0.612350,-0.707133,0.353540,0.685050,0.582160,0.049807,-0.039567,0.013346,0.766300,-0.608790,0.205329,0.684570,0.582520,0.044393,-0.045959,0.011895,0.682988,-0.707133,0.183006,0.880346,0.582520,0.044656,-0.039567,0.025782,0.687046,-0.608790,0.396666,0.846190,0.520990,0.054370,-0.032498,0.014568,0.836501,-0.500027,0.224140,0.848422,0.521480,0.049807,-0.039567,0.013346,0.766300,-0.608790,0.205329,0.882320,0.557898,0.048747,-0.032498,0.028144,0.749986,-0.500027,0.433005,0.819330,0.484527,0.058002,-0.024873,0.015542,0.892390,-0.382707,0.239115,0.829054,0.484860,0.060642,-0.016822,0.016249,0.933008,-0.258837,0.249999,0.625970,0.484860,0.054370,-0.016822,0.031390,0.836512,-0.258837,0.482961,0.625970,0.484508,0.052003,-0.024873,0.030024,0.800095,-0.382707,0.461935,0.626460,0.484507,0.058002,-0.024873,0.015542,0.892390,-0.382707,0.239115,0.819318,0.484860,0.062244,-0.008484,0.016678,0.957661,-0.130536,0.256604,0.789826,0.423820,0.054370,-0.016822,0.031390,0.836512,-0.258837,0.482961,0.787590,0.423340,0.060642,-0.016822,0.016249,0.933008,-0.258837,0.249999,0.823730,0.460249,0.062781,0.000000,0.016822,0.965926,0.0,0.258819,0.591790,0.423820,0.062244,-0.008484,0.016678,0.957661,-0.130536,0.256604,0.787386,0.423820,0.062781,0.000000,0.016822,0.965926,0.0,0.258819,0.567818,0.387200,0.062244,0.008484,0.016678,0.957661,0.130536,0.256605,0.567380,0.387200,0.054370,0.016822,0.031390,0.836512,0.258837,0.482961,0.533490,0.325680,0.062244,0.008484,0.016678,0.957661,0.130536,0.256605,0.533690,0.326170,0.060642,0.016822,0.016249,0.933008,0.258837,0.249999,0.533200,0.326170,0.055806,0.008484,0.032220,0.858615,0.130536,0.495722,0.533690,0.325819,0.052003,0.024873,0.030024,0.800095,0.382707,0.461935,0.533200,0.325823,0.058002,0.024873,0.015542,0.892390,0.382707,0.239115,0.533200,0.326170,0.058002,0.024873,0.015542,0.892390,0.382707,0.239115,0.508780,0.289550,0.054370,0.032498,0.014568,0.836501,0.500027,0.224140,0.511230,0.265130,0.054370,0.032498,0.014568,0.836501,0.500027,0.224140,0.706540,0.264932,0.049807,0.039567,0.013346,0.766300,0.608790,0.205329,0.672648,0.228510,0.048747,0.032498,0.028144,0.749986,0.500027,0.433005,0.484505,0.264776,0.039801,0.045959,0.022979,0.612350,0.707133,0.353540,0.484370,0.228020,0.044393,0.045959,0.011895,0.682988,0.707133,0.183006,0.653287,0.191890,0.044656,0.039567,0.025782,0.687046,0.608790,0.396666,0.474905,0.228153,0.038219,0.051564,0.010241,0.587991,0.793375,0.157552,0.452630,0.167480,0.039801,0.045959,0.022979,0.612350,0.707133,0.353540,0.450680,0.191530,0.044393,0.045959,0.011895,0.682988,0.707133,0.183006,0.450190,0.191890,0.031390,0.056288,0.008411,0.344063,0.934410,0.092191,0.616374,0.130850,0.034266,0.051564,0.019783,0.527178,0.793375,0.304367,0.426051,0.167121,0.038219,0.051564,0.010241,0.587991,0.793375,0.157552,0.648179,0.167480,0.024025,0.057362,0.006438,0.077714,0.996758,0.020823,0.614043,0.118650,0.021540,0.057362,0.012436,0.069677,0.996758,0.040228,0.413780,0.118565,0.015296,0.057553,0.004099,-0.275650,0.958416,-0.073860,0.633300,0.118295,0.012009,0.055220,0.003218,-0.764867,0.610717,-0.204946,0.640840,0.105950,0.008195,0.044143,0.002196,-0.909852,0.335759,-0.243794,0.638607,0.106440,0.007347,0.044143,0.004242,0.056641,0.997859,0.032702,0.516119,0.106149,0.008195,0.044143,0.002196,0.063175,0.997859,0.016928,0.638607,0.106440,0.008484,-0.064439,0.000000,0.130517,-0.991446,0.0,0.198872,0.755850,0.008195,-0.064439,0.002196,0.126069,-0.991446,0.033780,0.162590,0.718750,0.016822,-0.062781,0.000000,0.258801,-0.965931,0.0,0.162414,0.719230,0.016822,-0.062781,0.000000,0.258801,-0.965931,0.0,0.169733,0.719230,0.016249,-0.062781,0.004354,0.249983,-0.965931,0.066983,0.169744,0.718750,0.024873,-0.060048,0.000000,0.382659,-0.923890,0.0,0.367670,0.682259,0.024025,-0.060048,0.006438,0.369621,-0.923890,0.099040,0.145491,0.682120,0.032498,-0.056288,0.000000,0.499972,-0.866041,-0.000000,0.296813,0.657710,0.024873,-0.060048,0.000000,0.382659,-0.923890,0.0,0.145500,0.682516,0.031390,-0.056288,0.008411,0.482936,-0.866041,0.129402,0.104000,0.621090,0.032498,-0.056288,0.000000,0.499972,-0.866041,-0.000000,0.140264,0.658200,0.039567,-0.051564,0.000000,0.608733,-0.793375,-0.000000,0.103830,0.621580,0.039567,-0.051564,0.000000,0.608733,-0.793375,-0.000000,0.111128,0.621580,0.038219,-0.051564,0.010241,0.587991,-0.793375,0.157552,0.111153,0.621090,0.045959,-0.045959,0.000000,0.707081,-0.707133,-0.000000,0.110840,0.621522,0.051564,-0.039567,0.000000,0.793332,-0.608790,0.000000,0.086420,0.584910,0.044393,-0.045959,0.011895,0.682988,-0.707133,0.183006,0.086902,0.584470,0.045959,-0.045959,0.000000,0.707081,-0.707133,-0.000000,0.086910,0.584909,0.056288,-0.032498,0.000000,0.866010,-0.500027,-0.000000,0.045231,0.523920,0.049807,-0.039567,0.013346,0.766300,-0.608790,0.205329,0.045410,0.523430,0.051564,-0.039567,0.000000,0.793332,-0.608790,0.000000,0.081664,0.560540,0.060048,-0.024873,0.000000,0.923870,-0.382707,0.0,0.052240,0.523879,0.054370,-0.032498,0.014568,0.836501,-0.500027,0.224140,0.052551,0.523430,0.056288,-0.032498,0.000000,0.866010,-0.500027,-0.000000,0.052526,0.523920,0.062781,-0.016822,0.000000,0.965921,-0.258837,0.000000,0.027830,0.487262,0.058002,-0.024873,0.015542,0.892390,-0.382707,0.239115,0.028298,0.486810,0.060048,-0.024873,0.000000,0.923870,-0.382707,0.0,0.028278,0.487300,0.064439,-0.008484,0.000000,0.991444,-0.130536,-0.000000,0.992463,0.423820,0.060642,-0.016822,0.016249,0.933008,-0.258837,0.249999,0.992670,0.423340,0.062781,-0.016822,0.000000,0.965921,-0.258837,0.000000,0.023060,0.462890,0.064995,0.000000,0.000000,1.0,0.0,0.0,0.992180,0.423785,0.062781,0.000000,0.016822,0.965926,0.0,0.258819,0.770457,0.387200,0.062244,-0.008484,0.016678,0.957661,-0.130536,0.256604,0.992620,0.423340,0.062244,0.008484,0.016678,0.957661,0.130536,0.256605,0.765130,0.362596,0.064995,0.000000,0.000000,1.0,0.0,0.0,0.968216,0.387200,0.064439,0.008484,0.000000,0.991444,0.130536,-0.000000,0.967770,0.387162,0.062781,0.000000,0.016822,0.965926,0.0,0.258819,0.968208,0.386710,0.060642,0.016822,0.016249,0.933008,0.258837,0.249999,0.731231,0.326170,0.064439,0.008484,0.000000,0.991444,0.130536,-0.000000,0.963007,0.362790,0.062781,0.016822,0.000000,0.965921,0.258837,0.000000,0.933875,0.326170,0.062244,0.008484,0.016678,0.957661,0.130536,0.256605,0.934080,0.325680,0.058002,0.024873,0.015542,0.892390,0.382707,0.239115,0.711865,0.289550,0.060048,0.024873,0.000000,0.923870,0.382707,0.0,0.933590,0.326122,0.060642,0.016822,0.016249,0.933008,0.258837,0.249999,0.933590,0.325680,0.060048,0.024873,0.000000,0.923870,0.382707,0.0,0.909622,0.289550,0.056288,0.032498,0.000000,0.866010,0.500027,-0.000000,0.909180,0.289497,0.058002,0.024873,0.015542,0.892390,0.382707,0.239115,0.909188,0.289060,0.056288,0.032498,0.000000,0.866010,0.500027,-0.000000,0.904415,0.265130,0.051564,0.039567,0.000000,0.793332,0.608789,0.000000,0.875286,0.228510,0.054370,0.032498,0.014568,0.836501,0.500027,0.224140,0.706672,0.264931,0.045959,0.045959,0.000000,0.707081,0.707133,-0.000000,0.708980,0.228510,0.049807,0.039567,0.013346,0.766300,0.608790,0.205329,0.672661,0.228307,0.039567,0.051564,0.000000,0.608733,0.793375,-0.000000,0.853510,0.166995,0.044393,0.045959,0.011895,0.682988,0.707133,0.183006,0.850580,0.191400,0.045959,0.045959,0.000000,0.707081,0.707133,-0.000000,0.851070,0.191839,0.032498,0.056288,0.000000,0.356200,0.934410,-0.000000,0.811897,0.130850,0.038219,0.051564,0.010241,0.587991,0.793375,0.157552,0.648197,0.167151,0.039567,0.051564,0.000000,0.608733,0.793375,-0.000000,0.846044,0.167480,0.024873,0.057362,0.000000,0.080456,0.996758,0.000000,0.760653,0.118650,0.031390,0.056288,0.008411,0.344063,0.934410,0.092191,0.616380,0.130698,0.024025,0.057362,0.006438,0.077714,0.996758,0.020823,0.614043,0.118619,0.015836,0.057553,0.000000,-0.285374,0.958416,0.0,0.719211,0.106440,0.012432,0.055220,0.000000,-0.791849,0.610717,0.0,0.709136,0.106440,0.008484,0.044143,-0.000000,-0.941948,0.335759,0.0,0.684958,0.106440,0.008195,0.044143,0.002196,0.063175,0.997859,0.016928,0.692380,0.105950,0.008484,0.044143,-0.000000,0.065403,0.997859,0.0,0.684958,0.106440,0.008195,-0.064439,-0.002196,0.126069,-0.991446,-0.033780,0.401515,0.755850,0.016249,-0.062781,-0.004354,0.249983,-0.965931,-0.066983,0.387023,0.719230,0.008484,-0.064439,0.000000,0.130517,-0.991446,0.0,0.387200,0.718750,0.024025,-0.060048,-0.006438,0.369620,-0.923890,-0.099040,0.369620,0.694393,0.016822,-0.062781,0.000000,0.258801,-0.965931,0.0,0.367670,0.682259,0.031390,-0.056288,-0.008411,0.482936,-0.866041,-0.129402,0.345210,0.657797,0.024873,-0.060048,0.000000,0.382659,-0.923890,0.0,0.296870,0.657710,0.038219,-0.051564,-0.010241,0.587991,-0.793375,-0.157552,0.328428,0.621580,0.032498,-0.056288,0.000000,0.499972,-0.866041,-0.000000,0.328610,0.621090,0.045959,-0.045959,0.000000,0.707081,-0.707133,-0.000000,0.309080,0.584606,0.044393,-0.045959,-0.011895,0.682988,-0.707133,-0.183006,0.309059,0.584960,0.039567,-0.051564,0.000000,0.608733,-0.793375,-0.000000,0.309080,0.584606,0.049807,-0.039567,-0.013346,0.766300,-0.608790,-0.205329,0.286620,0.560165,0.045959,-0.045959,0.000000,0.707081,-0.707133,-0.000000,0.086874,0.584910,0.054370,-0.032498,-0.014568,0.836501,-0.500027,-0.224140,0.269828,0.523920,0.051564,-0.039567,0.000000,0.793332,-0.608790,0.000000,0.270020,0.523430,0.060048,-0.024873,0.000000,0.923870,-0.382707,0.0,0.223630,0.486999,0.058002,-0.024873,-0.015542,0.892390,-0.382707,-0.239115,0.252893,0.487300,0.056288,-0.032498,0.000000,0.866010,-0.500027,-0.000000,0.223630,0.486999,0.060642,-0.016822,-0.016249,0.933008,-0.258837,-0.249999,0.228020,0.462523,0.060048,-0.024873,0.000000,0.923870,-0.382707,0.0,0.028278,0.487262,0.064439,-0.008484,0.000000,0.991444,-0.130536,-0.000000,0.211366,0.425780,0.062244,-0.008484,-0.016678,0.957661,-0.130536,-0.256605,0.211216,0.426270,0.062781,-0.016822,0.000000,0.965921,-0.258837,0.000000,0.211420,0.425780,0.064995,0.000000,0.000000,1.0,0.0,0.0,0.218260,0.425780,0.062244,-0.008484,-0.016678,0.957661,-0.130536,-0.256605,0.218544,0.425780,0.062781,0.000000,-0.016822,0.965926,0.0,-0.258819,0.218260,0.425903,0.064439,-0.008484,0.000000,0.991444,-0.130536,-0.000000,0.218546,0.425780,0.062244,0.008484,-0.016678,0.957661,0.130536,-0.256605,0.193840,0.389283,0.064995,0.000000,0.000000,1.0,0.0,0.0,0.194278,0.389160,0.062781,0.000000,-0.016822,0.965926,0.0,-0.258819,0.194330,0.389282,0.060642,0.016822,-0.016249,0.933008,0.258837,-0.249999,0.160150,0.328243,0.062781,0.016822,0.000000,0.965921,0.258837,0.000000,0.970210,0.362300,0.064439,0.008484,0.000000,0.991444,0.130536,-0.000000,0.963008,0.362753,0.062244,0.008484,-0.016678,0.957661,0.130536,-0.256605,0.169430,0.364865,0.058002,0.024873,-0.015542,0.892390,0.382707,-0.239115,0.972650,0.326170,0.060048,0.024873,0.000000,0.923870,0.382707,0.0,0.972650,0.325680,0.062781,0.016822,0.000000,0.965921,0.258837,0.000000,0.933875,0.326133,0.054370,0.032498,-0.014568,0.836501,0.500027,-0.224140,0.110840,0.267206,0.060048,0.024873,0.000000,0.923870,0.382707,0.0,0.057610,0.267090,0.058002,0.024873,-0.015542,0.892390,0.382707,-0.239115,0.057610,0.267528,0.049807,0.039567,-0.013346,0.766300,0.608790,-0.205329,0.101070,0.230574,0.056288,0.032498,0.000000,0.866010,0.500027,-0.000000,0.904418,0.265088,0.044393,0.045959,-0.011895,0.682988,0.707133,-0.183006,0.906730,0.228510,0.045959,0.045959,0.000000,0.707081,0.707133,-0.000000,0.906730,0.228020,0.051564,0.039567,0.000000,0.793332,0.608789,0.000000,0.875289,0.228464,0.045959,0.045959,0.000000,0.707081,0.707133,-0.000000,0.851044,0.191839,0.044393,0.045959,-0.011895,0.682988,0.707133,-0.183006,0.077108,0.193949,0.038219,0.051564,-0.010241,0.587991,0.793375,-0.157552,0.052484,0.169920,0.039567,0.051564,0.000000,0.608733,0.793375,-0.000000,0.853364,0.166994,0.031390,0.056288,-0.008411,0.344063,0.934410,-0.092191,0.884760,0.167480,0.031390,0.056288,-0.008411,0.344063,0.934410,-0.092191,0.040520,0.133289,0.024025,0.057362,-0.006438,0.077714,0.996758,-0.020823,0.040250,0.121090,0.032498,0.056288,0.000000,0.356200,0.934410,-0.000000,0.040030,0.132810,0.024873,0.057362,0.000000,0.080456,0.996758,0.000000,0.763106,0.118388,0.015296,0.057553,-0.004099,-0.275650,0.958416,0.073860,0.025663,0.121090,0.012009,0.055220,-0.003218,-0.764867,0.610717,0.204946,0.025782,0.108880,0.008195,0.044143,-0.002196,-0.909852,0.335759,0.243794,0.025526,0.108880,0.008484,0.044143,-0.000000,0.065403,0.997859,0.0,0.933981,0.105950,0.008195,0.044143,-0.002196,0.063175,0.997859,-0.016928,0.025526,0.108880,0.007347,-0.064439,-0.004242,0.113031,-0.991446,-0.065258,0.599282,0.755850,0.008195,-0.064439,-0.002196,0.126069,-0.991446,-0.033780,0.401515,0.755728,0.014568,-0.062781,-0.008411,0.224128,-0.965931,-0.129401,0.592113,0.719230,0.021540,-0.060048,-0.012436,0.331393,-0.923890,-0.191330,0.586910,0.694555,0.016249,-0.062781,-0.004354,0.249983,-0.965931,-0.066983,0.394353,0.718764,0.028144,-0.056288,-0.016249,0.432989,-0.866041,-0.249986,0.567532,0.658200,0.024025,-0.060048,-0.006438,0.369620,-0.923890,-0.099040,0.370092,0.682183,0.034266,-0.051564,-0.019783,0.527178,-0.793375,-0.304367,0.533510,0.621580,0.031390,-0.056288,-0.008411,0.482936,-0.866041,-0.129402,0.531250,0.621090,0.034266,-0.051564,-0.019783,0.527178,-0.793375,-0.304367,0.531086,0.621580,0.039801,-0.045959,-0.022979,0.612350,-0.707133,-0.353540,0.335440,0.621580,0.038219,-0.051564,-0.010241,0.587991,-0.793375,-0.157552,0.335742,0.621090,0.049807,-0.039567,-0.013346,0.766300,-0.608790,-0.205329,0.311030,0.584579,0.039801,-0.045959,-0.022979,0.612350,-0.707133,-0.353540,0.311516,0.584960,0.044656,-0.039567,-0.025782,0.687046,-0.608790,-0.396666,0.311030,0.584960,0.044393,-0.045959,-0.011895,0.682988,-0.707133,-0.183006,0.311520,0.584579,0.044656,-0.039567,-0.025782,0.687046,-0.608790,-0.396666,0.508780,0.560328,0.048747,-0.032498,-0.028144,0.749986,-0.500027,-0.433005,0.474896,0.523920,0.049807,-0.039567,-0.013346,0.766300,-0.608790,-0.205329,0.472650,0.523430,0.058002,-0.024873,-0.015542,0.892390,-0.382707,-0.239115,0.223618,0.487300,0.048747,-0.032498,-0.028144,0.749986,-0.500027,-0.433005,0.472472,0.523920,0.052003,-0.024873,-0.030024,0.800095,-0.382707,-0.461935,0.281747,0.499510,0.054370,-0.032498,-0.014568,0.836501,-0.500027,-0.224140,0.277142,0.523430,0.052003,-0.024873,-0.030024,0.800095,-0.382707,-0.461935,0.455526,0.487300,0.054370,-0.016822,-0.031390,0.836512,-0.258837,-0.482961,0.450190,0.462687,0.058002,-0.024873,-0.015542,0.892390,-0.382707,-0.239115,0.252892,0.486931,0.055806,-0.008484,-0.032220,0.858615,-0.130536,-0.495722,0.416295,0.426270,0.060642,-0.016822,-0.016249,0.933008,-0.258837,-0.249999,0.414060,0.425780,0.055806,-0.008484,-0.032220,0.858615,-0.130536,-0.495722,0.413860,0.426270,0.056288,0.000000,-0.032498,0.866025,0.0,-0.500000,0.218260,0.426270,0.055806,0.008484,-0.032220,0.858615,0.130536,-0.495722,0.193840,0.389640,0.056288,0.000000,-0.032498,0.866025,0.0,-0.500000,0.194278,0.389640,0.054370,0.016822,-0.031390,0.836512,0.258837,-0.482961,0.357693,0.328610,0.062244,0.008484,-0.016678,0.957661,0.130536,-0.256605,0.169549,0.364865,0.055806,0.008484,-0.032220,0.858615,0.130536,-0.495722,0.391600,0.365027,0.058002,0.024873,-0.015542,0.892390,0.382707,-0.239115,0.191400,0.328120,0.060642,0.016822,-0.016249,0.933008,0.258837,-0.249999,0.159943,0.328243,0.052003,0.024873,-0.030024,0.800095,0.382707,-0.461935,0.338315,0.291990,0.054370,0.032498,-0.014568,0.836501,0.500027,-0.224140,0.057610,0.267528,0.058002,0.024873,-0.015542,0.892390,0.382707,-0.239115,0.135740,0.291622,0.048747,0.032498,-0.028144,0.749986,0.500027,-0.433005,0.137690,0.267570,0.052003,0.024873,-0.030024,0.800095,0.382707,-0.461935,0.135250,0.291990,0.054370,0.032498,-0.014568,0.836501,0.500027,-0.224140,0.110961,0.267205,0.044656,0.039567,-0.025782,0.687046,0.608790,-0.396666,0.299090,0.230950,0.048747,0.032498,-0.028144,0.749986,0.500027,-0.433005,0.333000,0.267366,0.044393,0.045959,-0.011895,0.682988,0.707133,-0.183006,0.110840,0.230460,0.049807,0.039567,-0.013346,0.766300,0.608790,-0.205329,0.101359,0.230574,0.039801,0.045959,-0.022979,0.612350,0.707133,-0.353540,0.279726,0.194330,0.044393,0.045959,-0.011895,0.682988,0.707133,-0.183006,0.077140,0.193949,0.039801,0.045959,-0.022979,0.612350,0.707133,-0.353540,0.076660,0.194330,0.034266,0.051564,-0.019783,0.527178,0.793375,-0.304367,0.079100,0.169920,0.038219,0.051564,-0.010241,0.587991,0.793375,-0.157552,0.076660,0.193986,0.034266,0.051564,-0.019783,0.527178,0.793375,-0.304367,0.274543,0.169920,0.031390,0.056288,-0.008411,0.344063,0.934410,-0.092191,0.079100,0.169430,0.038219,0.051564,-0.010241,0.587991,0.793375,-0.157552,0.052510,0.169561,0.028144,0.056288,-0.016249,0.308479,0.934410,-0.178100,0.079100,0.169920,0.028144,0.056288,-0.016249,0.308479,0.934410,-0.178100,0.243158,0.132986,0.031390,0.056288,-0.008411,0.344063,0.934410,-0.092191,0.040518,0.133289,0.021540,0.057362,-0.012436,0.069677,0.996758,-0.040228,0.225838,0.121090,0.024025,0.057362,-0.006438,0.077714,0.996758,-0.020823,0.040252,0.120631,0.013714,0.057553,-0.007918,-0.247141,0.958416,0.142687,0.181967,0.121090,0.010767,0.055220,-0.006216,-0.685761,0.610717,0.395924,0.152784,0.108880,0.007347,0.044143,-0.004242,-0.815751,0.335759,0.470974,0.152494,0.108390,0.008195,0.044143,-0.002196,0.063175,0.997859,-0.016928,0.138156,0.108390,0.007347,0.044143,-0.004242,0.056641,0.997859,-0.032702,0.152494,0.108390,0.005999,-0.064439,-0.005999,0.092289,-0.991446,-0.092289,0.823901,0.755850,0.007347,-0.064439,-0.004242,0.113031,-0.991446,-0.065258,0.787590,0.718750,0.011895,-0.062781,-0.011895,0.183000,-0.965931,-0.183000,0.794762,0.719230,0.017588,-0.060048,-0.017588,0.270581,-0.923890,-0.270581,0.789550,0.694726,0.014568,-0.062781,-0.008411,0.224128,-0.965931,-0.129401,0.790030,0.694330,0.022979,-0.056288,-0.022979,0.353534,-0.866041,-0.353534,0.765290,0.658200,0.021540,-0.060048,-0.012436,0.331393,-0.923890,-0.191330,0.572741,0.682345,0.017588,-0.060048,-0.017588,0.270581,-0.923890,-0.270581,0.789551,0.694726,0.027978,-0.051564,-0.027978,0.430439,-0.793375,-0.430439,0.736151,0.621580,0.028144,-0.056288,-0.016249,0.432989,-0.866041,-0.249986,0.729000,0.621090,0.039801,-0.045959,-0.022979,0.612350,-0.707133,-0.353540,0.514139,0.584960,0.032498,-0.045959,-0.032498,0.499982,-0.707133,-0.499982,0.730950,0.597110,0.034266,-0.051564,-0.019783,0.527178,-0.793375,-0.304367,0.731440,0.596680,0.036462,-0.039567,-0.036462,0.560970,-0.608790,-0.560970,0.706683,0.560540,0.039801,-0.045959,-0.022979,0.612350,-0.707133,-0.353540,0.514139,0.584742,0.039801,-0.032498,-0.039801,0.612361,-0.500027,-0.612361,0.677541,0.523920,0.044656,-0.039567,-0.025782,0.687046,-0.608790,-0.396666,0.670410,0.523430,0.042460,-0.024873,-0.042460,0.653274,-0.382707,-0.653275,0.650859,0.487300,0.048747,-0.032498,-0.028144,0.749986,-0.500027,-0.433005,0.650870,0.487028,0.042460,-0.024873,-0.042460,0.653274,-0.382707,-0.653275,0.653320,0.487262,0.044393,-0.016822,-0.044393,0.683009,-0.258837,-0.683009,0.652830,0.487262,0.052003,-0.024873,-0.030024,0.800095,-0.382707,-0.461935,0.653309,0.486810,0.044393,-0.016822,-0.044393,0.683009,-0.258837,-0.683009,0.648068,0.462890,0.045566,-0.008484,-0.045566,0.701057,-0.130536,-0.701057,0.618936,0.426270,0.054370,-0.016822,-0.031390,0.836512,-0.258837,-0.482961,0.619140,0.425780,0.056288,0.000000,-0.032498,0.866025,0.0,-0.500000,0.396926,0.389640,0.045959,0.000000,-0.045959,0.707107,0.0,-0.707107,0.618650,0.426233,0.055806,-0.008484,-0.032220,0.858615,-0.130536,-0.495722,0.619094,0.425780,0.056288,0.000000,-0.032498,0.866025,0.0,-0.500000,0.594669,0.389160,0.045566,0.008484,-0.045566,0.701057,0.130536,-0.701057,0.594230,0.389602,0.045959,0.000000,-0.045959,0.707107,0.0,-0.707107,0.594676,0.389640,0.055806,0.008484,-0.032220,0.858615,0.130536,-0.495722,0.560540,0.328120,0.044393,0.016822,-0.044393,0.683009,0.258837,-0.683009,0.560328,0.328610,0.045566,0.008484,-0.045566,0.701057,0.130536,-0.701057,0.589466,0.365230,0.054370,0.016822,-0.031390,0.836512,0.258837,-0.482961,0.560050,0.328120,0.042460,0.024873,-0.042460,0.653274,0.382707,-0.653275,0.560050,0.328562,0.052003,0.024873,-0.030024,0.800095,0.382707,-0.461935,0.535640,0.291500,0.039801,0.032498,-0.039801,0.612361,0.500027,-0.612361,0.535640,0.291937,0.042460,0.024873,-0.042460,0.653274,0.382707,-0.653275,0.536080,0.291990,0.048747,0.032498,-0.028144,0.749986,0.500027,-0.433005,0.333118,0.267366,0.036462,0.039567,-0.036462,0.560970,0.608790,-0.560970,0.501734,0.230950,0.039801,0.032498,-0.039801,0.612361,0.500027,-0.612361,0.530870,0.267570,0.044656,0.039567,-0.025782,0.687046,0.608790,-0.396666,0.299103,0.230737,0.032498,0.045959,-0.032498,0.499982,0.707133,-0.499982,0.328120,0.230950,0.027978,0.051564,-0.027978,0.430439,0.793375,-0.430439,0.477050,0.194265,0.039801,0.045959,-0.022979,0.612350,0.707133,-0.353540,0.477050,0.193840,0.032498,0.045959,-0.032498,0.499982,0.707133,-0.499982,0.477484,0.194330,0.027978,0.051564,-0.027978,0.430439,0.793375,-0.430439,0.472322,0.169920,0.028144,0.056288,-0.016249,0.308479,0.934410,-0.178100,0.276850,0.169430,0.034266,0.051564,-0.019783,0.527178,0.793375,-0.304367,0.274558,0.169692,0.022979,0.056288,-0.022979,0.251872,0.934410,-0.251872,0.462400,0.145036,0.022979,0.056288,-0.022979,0.251872,0.934410,-0.251872,0.242670,0.133300,0.021540,0.057362,-0.012436,0.069677,0.996758,-0.040228,0.242670,0.132873,0.028144,0.056288,-0.016249,0.308479,0.934410,-0.178100,0.243160,0.132986,0.017588,0.057362,-0.017588,0.056891,0.996758,-0.056891,0.428710,0.121022,0.011198,0.057553,-0.011198,-0.201790,0.958416,0.201790,0.409137,0.121090,0.021540,0.057362,-0.012436,0.069677,0.996758,-0.040228,0.428220,0.120600,0.017588,0.057362,-0.017588,0.056891,0.996758,-0.056891,0.433512,0.121090,0.008791,0.055220,-0.008791,-0.559922,0.610717,0.559922,0.406288,0.121090,0.005999,0.044143,-0.005999,-0.666058,0.335759,0.666058,0.377147,0.108880,0.007347,0.044143,-0.004242,0.056641,0.997859,-0.032702,0.350348,0.108390,0.005999,0.044143,-0.005999,0.046247,0.997859,-0.046247,0.377147,0.108880,0.004242,-0.064439,-0.007347,0.065258,-0.991446,-0.113031,0.028013,0.758300,0.008411,-0.062781,-0.014568,0.129401,-0.965931,-0.224128,0.013522,0.721680,0.005999,-0.064439,-0.005999,0.092289,-0.991446,-0.092289,0.013670,0.721190,0.011895,-0.062781,-0.011895,0.183000,-0.965931,-0.183000,0.790030,0.694649,0.012436,-0.060048,-0.021540,0.191330,-0.923890,-0.331393,0.994647,0.694820,0.016249,-0.056288,-0.028144,0.249986,-0.866041,-0.432989,0.970210,0.657812,0.017588,-0.060048,-0.017588,0.270581,-0.923890,-0.270581,0.931640,0.657710,0.012436,-0.060048,-0.021540,0.191330,-0.923890,-0.331393,0.994620,0.694411,0.022979,-0.056288,-0.022979,0.353534,-0.866041,-0.353534,0.953610,0.621090,0.019783,-0.051564,-0.034266,0.304367,-0.793375,-0.527178,0.953452,0.621580,0.019783,-0.051564,-0.034266,0.304367,-0.793375,-0.527178,0.960765,0.621090,0.022979,-0.045959,-0.039801,0.353540,-0.707133,-0.612350,0.936030,0.596797,0.027978,-0.051564,-0.027978,0.430439,-0.793375,-0.430439,0.960772,0.621090,0.032498,-0.045959,-0.032498,0.499982,-0.707133,-0.499982,0.870600,0.560050,0.025782,-0.039567,-0.044656,0.396666,-0.608790,-0.687045,0.911620,0.560174,0.028144,-0.032498,-0.048747,0.433005,-0.500027,-0.749986,0.894843,0.523920,0.036462,-0.039567,-0.036462,0.560970,-0.608790,-0.560970,0.895020,0.523430,0.030024,-0.024873,-0.052003,0.461935,-0.382707,-0.800095,0.875459,0.487300,0.039801,-0.032498,-0.039801,0.612361,-0.500027,-0.612361,0.875480,0.486812,0.031390,-0.016822,-0.054370,0.482961,-0.258837,-0.836512,0.853020,0.462531,0.042460,-0.024873,-0.042460,0.653274,-0.382707,-0.653275,0.653289,0.487262,0.032220,-0.008484,-0.055806,0.495722,-0.130536,-0.858615,0.836220,0.426270,0.044393,-0.016822,-0.044393,0.683009,-0.258837,-0.683009,0.836420,0.425780,0.045566,-0.008484,-0.045566,0.701057,-0.130536,-0.701057,0.836370,0.425780,0.032220,-0.008484,-0.055806,0.495722,-0.130536,-0.858615,0.843548,0.425780,0.032498,0.000000,-0.056288,0.500000,0.0,-0.866025,0.843260,0.425911,0.045566,-0.008484,-0.045566,0.701057,-0.130536,-0.701057,0.843550,0.425780,0.045959,0.000000,-0.045959,0.707107,0.0,-0.707107,0.843260,0.425780,0.032498,0.000000,-0.056288,0.500000,0.0,-0.866025,0.819330,0.389289,0.045959,0.000000,-0.045959,0.707107,0.0,-0.707107,0.819278,0.389160,0.032220,0.008484,-0.055806,0.495722,0.130536,-0.858615,0.818840,0.389289,0.032220,0.008484,-0.055806,0.495722,0.130536,-0.858615,0.794430,0.364872,0.044393,0.016822,-0.044393,0.683009,0.258837,-0.683009,0.596680,0.364740,0.045566,0.008484,-0.045566,0.701057,0.130536,-0.701057,0.589467,0.365193,0.031390,0.016822,-0.054370,0.482961,0.258837,-0.836512,0.785150,0.328251,0.042460,0.024873,-0.042460,0.653274,0.382707,-0.653275,0.591790,0.328120,0.044393,0.016822,-0.044393,0.683009,0.258837,-0.683009,0.560328,0.328572,0.030024,0.024873,-0.052003,0.461935,0.382707,-0.800095,0.591790,0.328610,0.030024,0.024873,-0.052003,0.461935,0.382707,-0.800095,0.760740,0.291629,0.042460,0.024873,-0.042460,0.653274,0.382707,-0.653275,0.760250,0.291500,0.028144,0.032498,-0.048747,0.433005,0.500027,-0.749986,0.760250,0.291634,0.028144,0.032498,-0.048747,0.433005,0.500027,-0.749986,0.735840,0.267214,0.039801,0.032498,-0.039801,0.612361,0.500027,-0.612361,0.530873,0.267529,0.025782,0.039567,-0.044656,0.396666,0.608790,-0.687046,0.726070,0.230583,0.032498,0.045959,-0.032498,0.499982,0.707133,-0.499982,0.530760,0.230460,0.036462,0.039567,-0.036462,0.560970,0.608790,-0.560970,0.501737,0.230904,0.022979,0.045959,-0.039801,0.353540,0.707133,-0.612350,0.530760,0.230950,0.019783,0.051564,-0.034266,0.304367,0.793375,-0.527178,0.701660,0.193969,0.032498,0.045959,-0.032498,0.499982,0.707133,-0.499982,0.701660,0.193840,0.022979,0.045959,-0.039801,0.353540,0.707133,-0.612350,0.702140,0.193960,0.016249,0.056288,-0.028144,0.178100,0.934410,-0.308479,0.665030,0.145095,0.027978,0.051564,-0.027978,0.430439,0.793375,-0.430439,0.472325,0.169881,0.019783,0.051564,-0.034266,0.304367,0.793375,-0.527178,0.677240,0.169541,0.022979,0.056288,-0.022979,0.251872,0.934410,-0.251872,0.462472,0.145036,0.012436,0.057362,-0.021540,0.040228,0.996758,-0.069677,0.650390,0.133156,0.017588,0.057362,-0.017588,0.056891,0.996758,-0.056891,0.628410,0.120600,0.007918,0.057553,-0.013714,-0.142687,0.958416,0.247141,0.608880,0.120733,0.006216,0.055220,-0.010767,-0.395924,0.610717,0.685761,0.611462,0.121090,0.004242,0.044143,-0.007347,-0.470974,0.335759,0.815751,0.609183,0.108880,0.005999,0.044143,-0.005999,0.046247,0.997859,-0.046247,0.577436,0.108390,0.004242,0.044143,-0.007347,0.032702,0.997859,-0.056641,0.609183,0.108880,0.002196,-0.064439,-0.008195,0.033780,-0.991446,-0.126069,0.252631,0.758300,0.004242,-0.064439,-0.007347,0.065258,-0.991446,-0.113031,0.216300,0.721190,0.004354,-0.062781,-0.016249,0.066983,-0.965931,-0.249983,0.216168,0.721680,0.008411,-0.062781,-0.014568,0.129401,-0.965931,-0.224128,0.020841,0.721233,0.006438,-0.060048,-0.024025,0.099040,-0.923890,-0.369621,0.213370,0.697034,0.012436,-0.060048,-0.021540,0.191330,-0.923890,-0.331393,0.157710,0.660150,0.008411,-0.056288,-0.031390,0.129402,-0.866041,-0.482936,0.194014,0.660640,0.010241,-0.051564,-0.038219,0.157552,-0.793375,-0.587991,0.159991,0.624020,0.016249,-0.056288,-0.028144,0.249986,-0.866041,-0.432989,0.157710,0.623530,0.019783,-0.051564,-0.034266,0.304367,-0.793375,-0.527178,0.960764,0.621202,0.011895,-0.045959,-0.044393,0.183006,-0.707133,-0.682988,0.154780,0.599406,0.013346,-0.039567,-0.049807,0.205329,-0.608790,-0.766300,0.135250,0.562790,0.022979,-0.045959,-0.039801,0.353540,-0.707133,-0.612350,0.096680,0.562500,0.014568,-0.032498,-0.054370,0.224140,-0.500027,-0.836501,0.101379,0.526360,0.025782,-0.039567,-0.044656,0.396666,-0.608790,-0.687045,0.099120,0.525870,0.015542,-0.024873,-0.058002,0.239115,-0.382707,-0.892390,0.082005,0.489740,0.028144,-0.032498,-0.048747,0.433005,-0.500027,-0.749986,0.074700,0.489468,0.015542,-0.024873,-0.058002,0.239115,-0.382707,-0.892390,0.074689,0.489740,0.016249,-0.016822,-0.060642,0.249999,-0.258837,-0.933008,0.877440,0.487300,0.030024,-0.024873,-0.052003,0.461935,-0.382707,-0.800095,0.877930,0.486939,0.031390,-0.016822,-0.054370,0.482961,-0.258837,-0.836512,0.877440,0.486939,0.031390,-0.016822,-0.054370,0.482961,-0.258837,-0.836512,0.040520,0.428220,0.016249,-0.016822,-0.060642,0.249999,-0.258837,-0.933008,0.076660,0.465142,0.016678,-0.008484,-0.062244,0.256604,-0.130536,-0.957661,0.042762,0.428710,0.016678,-0.008484,-0.062244,0.256604,-0.130536,-0.957661,0.040323,0.428710,0.016822,0.000000,-0.062781,0.258819,0.0,-0.965926,0.843260,0.426270,0.016822,0.000000,-0.062781,0.258819,0.0,-0.965926,0.819278,0.389640,0.016678,0.008484,-0.062244,0.256604,0.130536,-0.957661,0.818840,0.389640,0.016678,0.008484,-0.062244,0.256604,0.130536,-0.957661,0.018060,0.367482,0.032220,0.008484,-0.055806,0.495722,0.130536,-0.858615,0.794545,0.364872,0.016249,0.016822,-0.060642,0.249999,0.258837,-0.933008,0.982687,0.328610,0.030024,0.024873,-0.052003,0.461935,0.382707,-0.800095,0.794430,0.328120,0.031390,0.016822,-0.054370,0.482961,0.258837,-0.836512,0.784935,0.328251,0.015542,0.024873,-0.058002,0.239115,0.382707,-0.892390,0.963306,0.291990,0.015542,0.024873,-0.058002,0.239115,0.382707,-0.892390,0.760250,0.291990,0.014568,0.032498,-0.054370,0.224140,0.500027,-0.836501,0.762690,0.267570,0.014568,0.032498,-0.054370,0.224140,0.500027,-0.836501,0.958000,0.267383,0.028144,0.032498,-0.048747,0.433005,0.500027,-0.749986,0.735946,0.267214,0.013346,0.039567,-0.049807,0.205329,0.608790,-0.766300,0.924075,0.230950,0.022979,0.045959,-0.039801,0.353540,0.707133,-0.612350,0.728510,0.230460,0.025782,0.039567,-0.044656,0.396666,0.608790,-0.687046,0.726342,0.230583,0.011895,0.045959,-0.044393,0.183006,0.707133,-0.682988,0.904708,0.194330,0.010241,0.051564,-0.038219,0.157552,0.793375,-0.587991,0.704100,0.169920,0.011895,0.045959,-0.044393,0.183006,0.707133,-0.682988,0.701660,0.194330,0.010241,0.051564,-0.038219,0.157552,0.793375,-0.587991,0.899410,0.169720,0.008411,0.056288,-0.031390,0.092191,0.934410,-0.344063,0.882423,0.145500,0.019783,0.051564,-0.034266,0.304367,0.793375,-0.527178,0.677354,0.169540,0.006438,0.057362,-0.024025,0.020823,0.996758,-0.077714,0.875000,0.132957,0.016249,0.056288,-0.028144,0.178100,0.934410,-0.308479,0.665164,0.145095,0.004099,0.057553,-0.015296,-0.073860,0.958416,0.275650,0.843382,0.121090,0.012436,0.057362,-0.021540,0.040228,0.996758,-0.069677,0.650429,0.133156,0.003218,0.055220,-0.012009,-0.204946,0.610717,0.764867,0.845912,0.121090,0.002196,0.044143,-0.008195,-0.243794,0.335759,0.909852,0.846038,0.108880,0.004242,0.044143,-0.007347,0.032702,0.997859,-0.056641,0.797360,0.108390,0.002196,0.044143,-0.008195,0.016928,0.997859,-0.063175,0.846038,0.108880,0.000000,-0.064439,-0.008484,0.0,-0.991446,-0.130517,0.450386,0.758300,0.002196,-0.064439,-0.008195,0.033780,-0.991446,-0.126069,0.414060,0.721190,0.000000,-0.062781,-0.016822,0.0,-0.965931,-0.258801,0.421243,0.721680,0.000000,-0.060048,-0.024873,0.0,-0.923890,-0.382659,0.416031,0.697260,0.004354,-0.062781,-0.016249,0.066983,-0.965931,-0.249983,0.218608,0.721427,0.000000,-0.056288,-0.032498,0.0,-0.866041,-0.499972,0.391778,0.660640,0.006438,-0.060048,-0.024025,0.099040,-0.923890,-0.369621,0.360350,0.660150,0.000000,-0.051564,-0.039567,0.0,-0.793375,-0.608733,0.362635,0.624020,0.008411,-0.056288,-0.031390,0.129402,-0.866041,-0.482936,0.355460,0.623530,0.010241,-0.051564,-0.038219,0.157552,-0.793375,-0.587991,0.159990,0.623818,0.000000,-0.045959,-0.045959,-0.000000,-0.707133,-0.707081,0.357420,0.599579,0.011895,-0.045959,-0.044393,0.183006,-0.707133,-0.682988,0.301750,0.562500,0.000000,-0.039567,-0.051564,0.000000,-0.608790,-0.793332,0.333156,0.562980,0.013346,-0.039567,-0.049807,0.205329,-0.608790,-0.766300,0.296870,0.525870,0.000000,-0.032498,-0.056288,-0.000000,-0.500027,-0.866010,0.296718,0.526360,0.014568,-0.032498,-0.054370,0.224140,-0.500027,-0.836501,0.304041,0.525870,0.000000,-0.032498,-0.056288,-0.000000,-0.500027,-0.866010,0.304016,0.526360,0.000000,-0.024873,-0.060048,0.0,-0.382707,-0.923870,0.303710,0.526342,0.015542,-0.024873,-0.058002,0.239115,-0.382707,-0.892390,0.279778,0.489250,0.000000,-0.024873,-0.060048,0.0,-0.382707,-0.923870,0.279757,0.489740,0.000000,-0.016822,-0.062781,0.000000,-0.258837,-0.965921,0.279290,0.489724,0.016249,-0.016822,-0.060642,0.249999,-0.258837,-0.933008,0.245600,0.428220,0.000000,-0.016822,-0.062781,0.000000,-0.258837,-0.965921,0.274543,0.465330,0.000000,-0.008484,-0.064439,-0.000000,-0.130536,-0.991444,0.245399,0.428710,0.016678,-0.008484,-0.062244,0.256604,-0.130536,-0.957661,0.245556,0.428220,0.000000,0.000000,-0.064995,0.0,0.0,-1.0,0.245110,0.428694,0.016822,0.000000,-0.062781,0.258819,0.0,-0.965926,0.023386,0.392090,0.000000,0.000000,-0.064995,0.0,0.0,-1.0,0.221146,0.392090,0.016822,0.000000,-0.062781,0.258819,0.0,-0.965926,0.221138,0.391600,0.000000,0.008484,-0.064439,-0.000000,0.130536,-0.991444,0.220700,0.392072,0.000000,0.008484,-0.064439,-0.000000,0.130536,-0.991444,0.215931,0.367670,0.016678,0.008484,-0.062244,0.256604,0.130536,-0.957661,0.187010,0.330560,0.000000,0.016822,-0.062781,0.000000,0.258837,-0.965921,0.186792,0.331050,0.016249,0.016822,-0.060642,0.249999,0.258837,-0.933008,0.186520,0.330560,0.000000,0.024873,-0.060048,0.0,0.382707,-0.923870,0.186520,0.331024,0.000000,0.024873,-0.060048,0.0,0.382707,-0.923870,0.162531,0.294430,0.015542,0.024873,-0.058002,0.239115,0.382707,-0.892390,0.162100,0.293940,0.000000,0.032498,-0.056288,-0.000000,0.500027,-0.866010,0.162100,0.294399,0.000000,0.032498,-0.056288,-0.000000,0.500027,-0.866010,0.157321,0.270020,0.014568,0.032498,-0.054370,0.224140,0.500027,-0.836501,0.958105,0.267382,0.000000,0.039567,-0.051564,0.000000,0.608789,-0.793332,0.128187,0.233390,0.013346,0.039567,-0.049807,0.205329,0.608790,-0.766300,0.924087,0.230755,0.000000,0.045959,-0.045959,-0.000000,0.707133,-0.707081,0.931150,0.230950,0.011895,0.045959,-0.044393,0.183006,0.707133,-0.682988,0.103510,0.196280,0.000000,0.051564,-0.039567,0.0,0.793375,-0.608733,0.103510,0.196716,0.000000,0.045959,-0.045959,-0.000000,0.707133,-0.707081,0.103938,0.196770,0.000000,0.051564,-0.039567,0.0,0.793375,-0.608733,0.098732,0.172360,0.000000,0.056288,-0.032498,-0.000000,0.934410,-0.356200,0.086492,0.147940,0.010241,0.051564,-0.038219,0.157552,0.793375,-0.587991,0.899518,0.169716,0.000000,0.057362,-0.024873,0.000000,0.996758,-0.080456,0.079181,0.135740,0.008411,0.056288,-0.031390,0.092191,0.934410,-0.344063,0.882427,0.145431,0.006438,0.057362,-0.024025,0.020823,0.996758,-0.077714,0.875088,0.132956,0.000000,0.057553,-0.015836,0.0,0.958416,0.285374,0.069435,0.111320,0.000000,0.055220,-0.012432,0.0,0.610717,0.791849,0.067076,0.111320,0.0,0.044143,-0.008484,0.0,0.335759,0.941948,0.052542,0.111320,0.002196,0.044143,-0.008195,0.016928,0.997859,-0.063175,0.047675,0.110840,0.0,0.044143,-0.008484,0.0,0.997859,-0.065403,0.052542,0.111320,-0.002196,-0.064439,-0.008195,-0.033780,-0.991446,-0.126069,0.648139,0.746090,0.000000,-0.064439,-0.008484,0.0,-0.991446,-0.130517,0.631340,0.708980,-0.004354,-0.062781,-0.016249,-0.066983,-0.965931,-0.249983,0.631210,0.709470,0.000000,-0.062781,-0.016822,0.0,-0.965931,-0.258801,0.614250,0.684570,-0.006438,-0.060048,-0.024025,-0.099040,-0.923890,-0.369620,0.613770,0.684715,-0.006438,-0.060048,-0.024025,-0.099040,-0.923890,-0.369620,0.577630,0.648430,-0.008411,-0.056288,-0.031390,-0.129402,-0.866041,-0.482936,0.589531,0.648430,0.000000,-0.060048,-0.024873,0.0,-0.923890,-0.382659,0.577630,0.647940,0.000000,-0.056288,-0.032498,0.0,-0.866041,-0.499972,0.572750,0.611320,-0.010241,-0.051564,-0.038219,-0.157552,-0.793375,-0.587991,0.572606,0.611810,0.000000,-0.051564,-0.039567,0.0,-0.793375,-0.608733,0.555660,0.586910,-0.011895,-0.045959,-0.044393,-0.183006,-0.707133,-0.682988,0.555170,0.587065,-0.011895,-0.045959,-0.044393,-0.183006,-0.707133,-0.682988,0.492180,0.550780,0.000000,-0.045959,-0.045959,-0.000000,-0.707133,-0.707081,0.492180,0.550290,-0.013346,-0.039567,-0.049807,-0.205329,-0.608790,-0.766300,0.530760,0.550447,0.000000,-0.039567,-0.051564,0.000000,-0.608790,-0.793332,0.514160,0.513670,-0.014568,-0.032498,-0.054370,-0.224140,-0.500027,-0.836501,0.513992,0.514160,0.000000,-0.024873,-0.060048,0.0,-0.382707,-0.923870,0.494620,0.477200,0.000000,-0.032498,-0.056288,-0.000000,-0.500027,-0.866010,0.494620,0.477200,-0.015542,-0.024873,-0.058002,-0.239115,-0.382707,-0.892390,0.494606,0.477530,0.000000,-0.024873,-0.060048,0.0,-0.382707,-0.923870,0.279757,0.489724,-0.016249,-0.016822,-0.060642,-0.249999,-0.258837,-0.933008,0.472160,0.452788,0.000000,-0.008484,-0.064439,-0.000000,-0.130536,-0.991444,0.455512,0.416010,0.000000,-0.016822,-0.062781,0.000000,-0.258837,-0.965921,0.455560,0.416010,-0.016678,-0.008484,-0.062244,-0.256604,-0.130536,-0.957661,0.455362,0.416500,-0.016678,-0.008484,-0.062244,-0.256604,-0.130536,-0.957661,0.462690,0.416010,0.000000,0.000000,-0.064995,0.0,0.0,-1.0,0.462400,0.416010,0.000000,-0.008484,-0.064439,-0.000000,-0.130536,-0.991444,0.462692,0.416010,-0.016822,0.000000,-0.062781,-0.258819,0.0,-0.965926,0.462400,0.416167,0.000000,0.000000,-0.064995,0.0,0.0,-1.0,0.438418,0.379390,-0.016822,0.000000,-0.062781,-0.258819,0.0,-0.965926,0.438470,0.379548,-0.016678,0.008484,-0.062244,-0.256604,0.130536,-0.957661,0.437980,0.379549,0.000000,0.008484,-0.064439,-0.000000,0.130536,-0.991444,0.215931,0.367654,-0.016678,0.008484,-0.062244,-0.256604,0.130536,-0.957661,0.413570,0.355135,-0.016249,0.016822,-0.060642,-0.249999,0.258837,-0.933008,0.404290,0.318507,0.000000,0.016822,-0.062781,0.000000,0.258837,-0.965921,0.215820,0.354980,-0.015542,0.024873,-0.058002,-0.239115,0.382707,-0.892390,0.210930,0.318840,0.000000,0.016822,-0.062781,0.000000,0.258837,-0.965921,0.186792,0.331034,0.000000,0.024873,-0.060048,0.0,0.382707,-0.923870,0.210930,0.318350,0.000000,0.024873,-0.060048,0.0,0.382707,-0.923870,0.311520,0.257320,-0.015542,0.024873,-0.058002,-0.239115,0.382707,-0.892390,0.311520,0.257675,-0.014568,0.032498,-0.054370,-0.224140,0.500027,-0.836501,0.354980,0.257477,0.000000,0.032498,-0.056288,-0.000000,0.500027,-0.866010,0.157322,0.270002,-0.013346,0.039567,-0.049807,-0.205329,0.608790,-0.766300,0.345210,0.220856,-0.011895,0.045959,-0.044393,-0.183006,0.707133,-0.682988,0.149900,0.221190,0.000000,0.039567,-0.051564,0.000000,0.608789,-0.793332,0.128189,0.233371,0.000000,0.045959,-0.045959,-0.000000,0.707133,-0.707081,0.149900,0.220700,-0.010241,0.051564,-0.038219,-0.157552,0.793375,-0.587991,0.320800,0.184246,0.000000,0.045959,-0.045959,-0.000000,0.707133,-0.707081,0.320800,0.184080,-0.011895,0.045959,-0.044393,-0.183006,0.707133,-0.682988,0.321280,0.184236,-0.010241,0.051564,-0.038219,-0.157552,0.793375,-0.587991,0.296380,0.159815,-0.008411,0.056288,-0.031390,-0.092191,0.934410,-0.344063,0.284180,0.135443,0.000000,0.051564,-0.039567,0.0,0.793375,-0.608733,0.098734,0.172335,-0.006438,0.057362,-0.024025,-0.020823,0.996758,-0.077714,0.284592,0.111320,0.000000,0.056288,-0.032498,-0.000000,0.934410,-0.356200,0.086499,0.147832,-0.004099,0.057553,-0.015296,0.073860,0.958416,0.275650,0.296380,0.111243,0.000000,0.057362,-0.024873,0.000000,0.996758,-0.080456,0.079182,0.135727,-0.003218,0.055220,-0.012009,0.204946,0.610717,0.764867,0.298935,0.111320,-0.002196,0.044143,-0.008195,0.243794,0.335759,0.909852,0.306406,0.099120,0.0,0.044143,-0.008484,0.0,0.997859,-0.065403,0.281858,0.098630,-0.002196,0.044143,-0.008195,-0.016928,0.997859,-0.063175,0.306406,0.099120,-0.004242,-0.064439,-0.007347,-0.065258,-0.991446,-0.113031,0.870308,0.746090,-0.002196,-0.064439,-0.008195,-0.033780,-0.991446,-0.126069,0.833980,0.708980,-0.008411,-0.062781,-0.014568,-0.129401,-0.965931,-0.224128,0.836285,0.709470,-0.008411,-0.062781,-0.014568,-0.129401,-0.965931,-0.224128,0.833856,0.709470,-0.004354,-0.062781,-0.016249,-0.066983,-0.965931,-0.249983,0.614250,0.684740,-0.012436,-0.060048,-0.021540,-0.191330,-0.923890,-0.331393,0.614237,0.685050,-0.006438,-0.060048,-0.024025,-0.099040,-0.923890,-0.369620,0.775390,0.647940,-0.012436,-0.060048,-0.021540,-0.191330,-0.923890,-0.331393,0.775390,0.648430,-0.016249,-0.056288,-0.028144,-0.249986,-0.866041,-0.432989,0.811701,0.648430,-0.008411,-0.056288,-0.031390,-0.129402,-0.866041,-0.482936,0.775390,0.611320,-0.019783,-0.051564,-0.034266,-0.304367,-0.793375,-0.527178,0.777677,0.611810,-0.019783,-0.051564,-0.034266,-0.304367,-0.793375,-0.527178,0.775257,0.611810,-0.010241,-0.051564,-0.038219,-0.157552,-0.793375,-0.587991,0.555660,0.587076,-0.022979,-0.045959,-0.039801,-0.353540,-0.707133,-0.612350,0.555660,0.587400,-0.022979,-0.045959,-0.039801,-0.353540,-0.707133,-0.612350,0.714350,0.550780,-0.011895,-0.045959,-0.044393,-0.183006,-0.707133,-0.682988,0.714350,0.550290,-0.025782,-0.039567,-0.044656,-0.396666,-0.608790,-0.687045,0.753084,0.550780,-0.013346,-0.039567,-0.049807,-0.205329,-0.608790,-0.766300,0.716790,0.513670,-0.028144,-0.032498,-0.048747,-0.433005,-0.500027,-0.749986,0.719057,0.514160,-0.028144,-0.032498,-0.048747,-0.433005,-0.500027,-0.749986,0.716632,0.514160,-0.014568,-0.032498,-0.054370,-0.224140,-0.500027,-0.836501,0.521303,0.513670,-0.030024,-0.024873,-0.052003,-0.461935,-0.382707,-0.800095,0.518564,0.489740,-0.030024,-0.024873,-0.052003,-0.461935,-0.382707,-0.800095,0.699679,0.477530,-0.015542,-0.024873,-0.058002,-0.239115,-0.382707,-0.892390,0.497048,0.477203,-0.031390,-0.016822,-0.054370,-0.482960,-0.258837,-0.836512,0.694330,0.452961,-0.016249,-0.016822,-0.060642,-0.249999,-0.258837,-0.933008,0.658200,0.416010,-0.032220,-0.008484,-0.055806,-0.495722,-0.130536,-0.858615,0.658005,0.416500,-0.032498,0.000000,-0.056288,-0.500000,0.0,-0.866025,0.462400,0.416500,-0.032498,0.000000,-0.056288,-0.500000,0.0,-0.866025,0.438418,0.379880,-0.032220,0.008484,-0.055806,-0.495722,0.130536,-0.858615,0.437980,0.379880,-0.016678,0.008484,-0.062244,-0.256604,0.130536,-0.957661,0.413683,0.355134,-0.032220,0.008484,-0.055806,-0.495722,0.130536,-0.858615,0.635740,0.355304,-0.031390,0.016822,-0.054370,-0.482961,0.258837,-0.836512,0.601827,0.318840,-0.030024,0.024873,-0.052003,-0.461935,0.382707,-0.800095,0.413570,0.318840,-0.016249,0.016822,-0.060642,-0.249999,0.258837,-0.933008,0.404072,0.318507,-0.015542,0.024873,-0.058002,-0.239115,0.382707,-0.892390,0.413570,0.318350,-0.030024,0.024873,-0.052003,-0.461935,0.382707,-0.800095,0.379390,0.282220,-0.028144,0.032498,-0.048747,-0.433005,0.500027,-0.749986,0.394040,0.257757,-0.015542,0.024873,-0.058002,-0.239115,0.382707,-0.892390,0.379880,0.281887,-0.014568,0.032498,-0.054370,-0.224140,0.500027,-0.836501,0.311520,0.257675,-0.028144,0.032498,-0.048747,-0.433005,0.500027,-0.749986,0.577140,0.257652,-0.025782,0.039567,-0.044656,-0.396666,0.608790,-0.687045,0.543212,0.221190,-0.014568,0.032498,-0.054370,-0.224140,0.500027,-0.836501,0.355079,0.257476,-0.022979,0.045959,-0.039801,-0.353540,0.707133,-0.612350,0.347650,0.221190,-0.013346,0.039567,-0.049807,-0.205329,0.608790,-0.766300,0.345473,0.220855,-0.011895,0.045959,-0.044393,-0.183006,0.707133,-0.682988,0.347650,0.220700,-0.019783,0.051564,-0.034266,-0.304367,0.793375,-0.527178,0.323240,0.160150,-0.022979,0.045959,-0.039801,-0.353540,0.707133,-0.612350,0.320800,0.184570,-0.019783,0.051564,-0.034266,-0.304367,0.793375,-0.527178,0.518644,0.160150,-0.016249,0.056288,-0.028144,-0.178100,0.934410,-0.308479,0.501460,0.135641,-0.010241,0.051564,-0.038219,-0.157552,0.793375,-0.587991,0.296498,0.159813,-0.016249,0.056288,-0.028144,-0.178100,0.934410,-0.308479,0.487300,0.123431,-0.012436,0.057362,-0.021540,-0.040228,0.996758,-0.069677,0.482267,0.111320,-0.008411,0.056288,-0.031390,-0.092191,0.934410,-0.344063,0.486810,0.123040,-0.007918,0.057553,-0.013714,0.142687,0.958416,0.247141,0.526265,0.111320,-0.006438,0.057362,-0.024025,-0.020823,0.996758,-0.077714,0.506830,0.110840,-0.006216,0.055220,-0.010767,0.395924,0.610717,0.685761,0.533252,0.111320,-0.004242,0.044143,-0.007347,0.470974,0.335759,0.815751,0.552934,0.099120,-0.002196,0.044143,-0.008195,-0.016928,0.997859,-0.063175,0.460440,0.074210,-0.004242,0.044143,-0.007347,-0.032702,0.997859,-0.056641,0.552934,0.099120,-0.005999,-0.064439,-0.005999,-0.092289,-0.991446,-0.092289,0.076853,0.748530,-0.004242,-0.064439,-0.007347,-0.065258,-0.991446,-0.113031,0.040520,0.711420,-0.011895,-0.062781,-0.011895,-0.183000,-0.965931,-0.183000,0.040385,0.711910,-0.012436,-0.060048,-0.021540,-0.191330,-0.923890,-0.331393,0.831050,0.684903,-0.017588,-0.060048,-0.017588,-0.270581,-0.923890,-0.270581,0.037631,0.687500,-0.008411,-0.062781,-0.014568,-0.129401,-0.965931,-0.224128,0.831540,0.684903,-0.012436,-0.060048,-0.021540,-0.191330,-0.923890,-0.331393,0.978020,0.647940,-0.022979,-0.056288,-0.022979,-0.353534,-0.866041,-0.353534,0.018060,0.650420,-0.017588,-0.060048,-0.017588,-0.270581,-0.923890,-0.270581,0.037590,0.687048,-0.027978,-0.051564,-0.027978,-0.430439,-0.793375,-0.430439,0.980310,0.611810,-0.016249,-0.056288,-0.028144,-0.249986,-0.866041,-0.432989,0.980460,0.611320,-0.022979,-0.045959,-0.039801,-0.353540,-0.707133,-0.612350,0.772460,0.587243,-0.032498,-0.045959,-0.032498,-0.499982,-0.707133,-0.499982,0.977560,0.587400,-0.019783,-0.051564,-0.034266,-0.304367,-0.793375,-0.527178,0.772940,0.587243,-0.036462,-0.039567,-0.036462,-0.560970,-0.608790,-0.560970,0.958000,0.550309,-0.022979,-0.045959,-0.039801,-0.353540,-0.707133,-0.612350,0.919430,0.550290,-0.032498,-0.045959,-0.032498,-0.499982,-0.707133,-0.499982,0.977530,0.586930,-0.025782,-0.039567,-0.044656,-0.396666,-0.608790,-0.687045,0.921870,0.513670,-0.039801,-0.032498,-0.039801,-0.612361,-0.500027,-0.612361,0.921693,0.514160,-0.028144,-0.032498,-0.048747,-0.433005,-0.500027,-0.749986,0.897460,0.477053,-0.042460,-0.024873,-0.042460,-0.653275,-0.382707,-0.653275,0.897438,0.477530,-0.030024,-0.024873,-0.052003,-0.461935,-0.382707,-0.800095,0.699678,0.477375,-0.044393,-0.016822,-0.044393,-0.683009,-0.258837,-0.683009,0.899410,0.452645,-0.031390,-0.016822,-0.054370,-0.482960,-0.258837,-0.836512,0.863280,0.416010,-0.045566,-0.008484,-0.045566,-0.701057,-0.130536,-0.701057,0.863079,0.416500,-0.032498,0.000000,-0.056288,-0.500000,0.0,-0.866025,0.660150,0.416342,-0.032220,-0.008484,-0.055806,-0.495722,-0.130536,-0.858615,0.660440,0.416500,-0.045959,0.000000,-0.045959,-0.707107,0.0,-0.707107,0.660150,0.416500,-0.045959,0.000000,-0.045959,-0.707107,0.0,-0.707107,0.641058,0.379880,-0.045566,0.008484,-0.045566,-0.701057,0.130536,-0.701057,0.638180,0.355460,-0.032498,0.000000,-0.056288,-0.500000,0.0,-0.866025,0.641110,0.379721,-0.032220,0.008484,-0.055806,-0.495722,0.130536,-0.858615,0.640620,0.379721,-0.045566,0.008484,-0.045566,-0.701057,0.130536,-0.701057,0.840820,0.354994,-0.044393,0.016822,-0.044393,-0.683009,0.258837,-0.683009,0.630850,0.318840,-0.032220,0.008484,-0.055806,-0.495722,0.130536,-0.858615,0.635853,0.355304,-0.042460,0.024873,-0.042460,-0.653274,0.382707,-0.653275,0.630850,0.318840,-0.031390,0.016822,-0.054370,-0.482961,0.258837,-0.836512,0.601832,0.318681,-0.030024,0.024873,-0.052003,-0.461935,0.382707,-0.800095,0.630850,0.318350,-0.042460,0.024873,-0.042460,-0.653274,0.382707,-0.653275,0.582030,0.282220,-0.039801,0.032498,-0.039801,-0.612361,0.500027,-0.612361,0.579590,0.257810,-0.030024,0.024873,-0.052003,-0.461935,0.382707,-0.800095,0.582520,0.282061,-0.028144,0.032498,-0.048747,-0.433005,0.500027,-0.749986,0.582030,0.282061,-0.039801,0.032498,-0.039801,-0.612361,0.500027,-0.612361,0.782220,0.257337,-0.036462,0.039567,-0.036462,-0.560970,0.608790,-0.560970,0.767570,0.220718,-0.028144,0.032498,-0.048747,-0.433005,0.500027,-0.749986,0.577241,0.257652,-0.022979,0.045959,-0.039801,-0.353540,0.707133,-0.612350,0.550290,0.220700,-0.025782,0.039567,-0.044656,-0.396666,0.608790,-0.687045,0.543222,0.221032,-0.032498,0.045959,-0.032498,-0.499982,0.707133,-0.499982,0.550290,0.221190,-0.022979,0.045959,-0.039801,-0.353540,0.707133,-0.612350,0.523920,0.184413,-0.032498,0.045959,-0.032498,-0.499982,0.707133,-0.499982,0.523430,0.184570,-0.027978,0.051564,-0.027978,-0.430439,0.793375,-0.430439,0.520990,0.160150,-0.019783,0.051564,-0.034266,-0.304367,0.793375,-0.527178,0.523430,0.184413,-0.019783,0.051564,-0.034266,-0.304367,0.793375,-0.527178,0.518654,0.159994,-0.027978,0.051564,-0.027978,-0.430439,0.793375,-0.430439,0.723630,0.159675,-0.022979,0.056288,-0.022979,-0.251872,0.934410,-0.251872,0.711668,0.123530,-0.017588,0.057362,-0.017588,-0.056891,0.996758,-0.056891,0.713860,0.111267,-0.016249,0.056288,-0.028144,-0.178100,0.934410,-0.308479,0.714350,0.110840,-0.017588,0.057362,-0.017588,-0.056891,0.996758,-0.056891,0.719214,0.111320,-0.011198,0.057553,-0.011198,0.201790,0.958416,0.201790,0.738564,0.111320,-0.012436,0.057362,-0.021540,-0.040228,0.996758,-0.069677,0.482292,0.111062,-0.008791,0.055220,-0.008791,0.559922,0.610717,0.559922,0.748530,0.098850,-0.005999,0.044143,-0.005999,0.666058,0.335759,0.666058,0.748247,0.099120,-0.004242,0.044143,-0.007347,-0.032702,0.997859,-0.056641,0.579791,0.098718,-0.005999,0.044143,-0.005999,-0.046247,0.997859,-0.046247,0.748247,0.099120,-0.007347,-0.064439,-0.004242,-0.113031,-0.991446,-0.065258,0.274601,0.748530,-0.014568,-0.062781,-0.008411,-0.224128,-0.965931,-0.129401,0.264989,0.711910,-0.005999,-0.064439,-0.005999,-0.092289,-0.991446,-0.092289,0.257810,0.711420,-0.021540,-0.060048,-0.012436,-0.331393,-0.923890,-0.191330,0.240230,0.687235,-0.011895,-0.062781,-0.011895,-0.183000,-0.965931,-0.183000,0.062363,0.711476,-0.028144,-0.056288,-0.016249,-0.432989,-0.866041,-0.249986,0.215991,0.650870,-0.017588,-0.060048,-0.017588,-0.270581,-0.923890,-0.270581,0.037611,0.687049,-0.034266,-0.051564,-0.019783,-0.527178,-0.793375,-0.304367,0.199067,0.614250,-0.022979,-0.056288,-0.022979,-0.353534,-0.866041,-0.353534,0.199210,0.613770,-0.039801,-0.045959,-0.022979,-0.612350,-0.707133,-0.353540,0.181640,0.589547,-0.027978,-0.051564,-0.027978,-0.430439,-0.793375,-0.430439,0.003745,0.613794,-0.044656,-0.039567,-0.025782,-0.687046,-0.608790,-0.396666,0.157220,0.552923,-0.032498,-0.045959,-0.032498,-0.499982,-0.707133,-0.499982,0.977531,0.586930,-0.048747,-0.032498,-0.028144,-0.749986,-0.500027,-0.433005,0.140450,0.516600,-0.036462,-0.039567,-0.036462,-0.560970,-0.608790,-0.560970,0.140620,0.516110,-0.052003,-0.024873,-0.030024,-0.800095,-0.382707,-0.461935,0.121075,0.479980,-0.039801,-0.032498,-0.039801,-0.612361,-0.500027,-0.612361,0.121090,0.479621,-0.054370,-0.016822,-0.031390,-0.836512,-0.258837,-0.482961,0.098630,0.455258,-0.042460,-0.024873,-0.042460,-0.653275,-0.382707,-0.653275,0.924288,0.477066,-0.055806,-0.008484,-0.032220,-0.858615,-0.130536,-0.495722,0.284607,0.418450,-0.044393,-0.016822,-0.044393,-0.683009,-0.258837,-0.683009,0.885250,0.416031,-0.054370,-0.016822,-0.031390,-0.836512,-0.258837,-0.482961,0.885250,0.416500,-0.045566,-0.008484,-0.045566,-0.701057,-0.130536,-0.701057,0.885049,0.416010,-0.056288,0.000000,-0.032498,-0.866025,0.0,-0.500000,0.884760,0.416500,-0.045959,0.000000,-0.045959,-0.707107,0.0,-0.707107,0.884760,0.416025,-0.056288,0.000000,-0.032498,-0.866025,0.0,-0.500000,0.865668,0.379880,-0.045566,0.008484,-0.045566,-0.701057,0.130536,-0.701057,0.865230,0.379407,-0.045959,0.000000,-0.045959,-0.707107,0.0,-0.707107,0.865676,0.379390,-0.055806,0.008484,-0.032220,-0.858615,0.130536,-0.495722,0.865230,0.379880,-0.055806,0.008484,-0.032220,-0.858615,0.130536,-0.495722,0.826660,0.318840,-0.044393,0.016822,-0.044393,-0.683009,0.258837,-0.683009,0.826442,0.318350,-0.045566,0.008484,-0.045566,-0.701057,0.130536,-0.701057,0.826660,0.318365,-0.054370,0.016822,-0.031390,-0.836512,0.258837,-0.482961,0.826170,0.318840,-0.042460,0.024873,-0.042460,-0.653274,0.382707,-0.653275,0.826170,0.318375,-0.052003,0.024873,-0.030024,-0.800095,0.382707,-0.461935,0.826170,0.318840,-0.052003,0.024873,-0.030024,-0.800095,0.382707,-0.461935,0.806640,0.282220,-0.039801,0.032498,-0.039801,-0.612361,0.500027,-0.612361,0.806640,0.281760,-0.042460,0.024873,-0.042460,-0.653274,0.382707,-0.653275,0.807063,0.281730,-0.048747,0.032498,-0.028144,-0.749986,0.500027,-0.433005,0.784660,0.257810,-0.048747,0.032498,-0.028144,-0.749986,0.500027,-0.433005,0.979980,0.257510,-0.039801,0.032498,-0.039801,-0.612361,0.500027,-0.612361,0.782322,0.257337,-0.044656,0.039567,-0.025782,-0.687046,0.608790,-0.396666,0.970459,0.221190,-0.032498,0.045959,-0.032498,-0.499982,0.707133,-0.499982,0.774900,0.220700,-0.036462,0.039567,-0.036462,-0.560970,0.608790,-0.560970,0.767834,0.220718,-0.039801,0.045959,-0.022979,-0.612350,0.707133,-0.353540,0.946204,0.184570,-0.032498,0.045959,-0.032498,-0.499982,0.707133,-0.499982,0.748468,0.184080,-0.039801,0.045959,-0.022979,-0.612350,0.707133,-0.353540,0.748040,0.184570,-0.034266,0.051564,-0.019783,-0.527178,0.793375,-0.304367,0.726070,0.160150,-0.027978,0.051564,-0.027978,-0.430439,0.793375,-0.430439,0.748040,0.184118,-0.034266,0.051564,-0.019783,-0.527178,0.793375,-0.304367,0.921380,0.159862,-0.028144,0.056288,-0.016249,-0.308479,0.934410,-0.178100,0.909180,0.123268,-0.027978,0.051564,-0.027978,-0.430439,0.793375,-0.430439,0.723774,0.159668,-0.022979,0.056288,-0.022979,-0.251872,0.934410,-0.251872,0.711682,0.123358,-0.021540,0.057362,-0.012436,-0.069677,0.996758,-0.040228,0.907009,0.111320,-0.017588,0.057362,-0.017588,-0.056891,0.996758,-0.056891,0.713882,0.111267,-0.013714,0.057553,-0.007918,0.247141,0.958416,0.142687,0.923990,0.111320,-0.010767,0.055220,-0.006216,0.685761,0.610717,0.395924,0.941252,0.099120,-0.007347,0.044143,-0.004242,0.815751,0.335759,0.470974,0.970322,0.098630,-0.005999,0.044143,-0.005999,-0.046247,0.997859,-0.046247,0.579803,0.098630,-0.007347,0.044143,-0.004242,-0.056641,0.997859,-0.032702,0.970322,0.098630,-0.008195,-0.064439,-0.002196,-0.126069,-0.991446,-0.033780,0.499204,0.748530,-0.016249,-0.062781,-0.004354,-0.249983,-0.965931,-0.066983,0.462741,0.711910,-0.007347,-0.064439,-0.004242,-0.113031,-0.991446,-0.065258,0.492180,0.735840,-0.024025,-0.060048,-0.006438,-0.369621,-0.923890,-0.099040,0.457520,0.687417,-0.014568,-0.062781,-0.008411,-0.224128,-0.965931,-0.129401,0.264988,0.711677,-0.031390,-0.056288,-0.008411,-0.482936,-0.866041,-0.129402,0.438148,0.650870,-0.021540,-0.060048,-0.012436,-0.331393,-0.923890,-0.191330,0.401850,0.650390,-0.038219,-0.051564,-0.010241,-0.587991,-0.793375,-0.157552,0.404125,0.614250,-0.028144,-0.056288,-0.016249,-0.432989,-0.866041,-0.249986,0.401850,0.613770,-0.044393,-0.045959,-0.011895,-0.682988,-0.707133,-0.183006,0.398920,0.589720,-0.034266,-0.051564,-0.019783,-0.527178,-0.793375,-0.304367,0.399410,0.589350,-0.049807,-0.039567,-0.013346,-0.766300,-0.608790,-0.205329,0.379539,0.553220,-0.039801,-0.045959,-0.022979,-0.612350,-0.707133,-0.353540,0.340820,0.552730,-0.044393,-0.045959,-0.011895,-0.682988,-0.707133,-0.183006,0.384760,0.577627,-0.054370,-0.032498,-0.014568,-0.836501,-0.500027,-0.224140,0.345516,0.516600,-0.044656,-0.039567,-0.025782,-0.687046,-0.608790,-0.396666,0.343260,0.516110,-0.058002,-0.024873,-0.015542,-0.892390,-0.382707,-0.239115,0.318829,0.479980,-0.048747,-0.032498,-0.028144,-0.749986,-0.500027,-0.433005,0.318840,0.479722,-0.060642,-0.016822,-0.016249,-0.933008,-0.258837,-0.249999,0.325680,0.479850,-0.052003,-0.024873,-0.030024,-0.800095,-0.382707,-0.461935,0.326159,0.479490,-0.058002,-0.024873,-0.015542,-0.892390,-0.382707,-0.239115,0.326170,0.479850,-0.062244,-0.008484,-0.016678,-0.957661,-0.130536,-0.256604,0.284468,0.418940,-0.054370,-0.016822,-0.031390,-0.836512,-0.258837,-0.482961,0.284660,0.418450,-0.060642,-0.016822,-0.016249,-0.933008,-0.258837,-0.249999,0.320928,0.455560,-0.055806,-0.008484,-0.032220,-0.858615,-0.130536,-0.495722,0.088860,0.418637,-0.062781,0.000000,-0.016822,-0.965926,0.0,-0.258819,0.286620,0.418808,-0.055806,-0.008484,-0.032220,-0.858615,-0.130536,-0.495722,0.286908,0.418450,-0.062244,-0.008484,-0.016678,-0.957661,-0.130536,-0.256604,0.286902,0.418940,-0.056288,0.000000,-0.032498,-0.866025,0.0,-0.500000,0.064896,0.382320,-0.062781,0.000000,-0.016822,-0.965926,0.0,-0.258819,0.267570,0.382187,-0.055806,0.008484,-0.032220,-0.858615,0.130536,-0.495722,0.040030,0.357607,-0.056288,0.000000,-0.032498,-0.866025,0.0,-0.500000,0.267519,0.381830,-0.062244,0.008484,-0.016678,-0.957661,0.130536,-0.256605,0.267090,0.382187,-0.062244,0.008484,-0.016678,-0.957661,0.130536,-0.256605,0.262200,0.357778,-0.054370,0.016822,-0.031390,-0.836512,0.258837,-0.482961,0.030270,0.320984,-0.055806,0.008484,-0.032220,-0.858615,0.130536,-0.495722,0.040144,0.357607,-0.060642,0.016822,-0.016249,-0.933008,0.258837,-0.249999,0.228291,0.321280,-0.052003,0.024873,-0.030024,-0.800095,0.382707,-0.461935,0.006270,0.284660,-0.054370,0.016822,-0.031390,-0.836512,0.258837,-0.482961,0.030544,0.320983,-0.058002,0.024873,-0.015542,-0.892390,0.382707,-0.239115,0.040030,0.321280,-0.058002,0.024873,-0.015542,-0.892390,0.382707,-0.239115,0.208980,0.284532,-0.052003,0.024873,-0.030024,-0.800095,0.382707,-0.461935,0.208490,0.284180,-0.054370,0.032498,-0.014568,-0.836501,0.500027,-0.224140,0.208490,0.284528,-0.054370,0.032498,-0.014568,-0.836501,0.500027,-0.224140,0.203610,0.260122,-0.048747,0.032498,-0.028144,-0.749986,0.500027,-0.433005,0.980082,0.257510,-0.049807,0.039567,-0.013346,-0.766300,0.608790,-0.205329,0.169693,0.223630,-0.044656,0.039567,-0.025782,-0.687046,0.608790,-0.396666,0.970477,0.220892,-0.044393,0.045959,-0.011895,-0.682988,0.707133,-0.183006,0.972650,0.221190,-0.038219,0.051564,-0.010241,-0.587991,0.793375,-0.157552,0.149900,0.186846,-0.039801,0.045959,-0.022979,-0.612350,0.707133,-0.353540,0.149900,0.186520,-0.044393,0.045959,-0.011895,-0.682988,0.707133,-0.183006,0.150390,0.186890,-0.031390,0.056288,-0.008411,-0.344063,0.934410,-0.092191,0.113280,0.125673,-0.034266,0.051564,-0.019783,-0.527178,0.793375,-0.304367,0.921488,0.159861,-0.038219,0.051564,-0.010241,-0.587991,0.793375,-0.157552,0.145178,0.162590,-0.028144,0.056288,-0.016249,-0.308479,0.934410,-0.178100,0.909226,0.123260,-0.024025,0.057362,-0.006438,-0.077714,0.996758,-0.020823,0.103689,0.113770,-0.015296,0.057553,-0.004099,0.275650,0.958416,0.073860,0.091375,0.113280,-0.021540,0.057362,-0.012436,-0.069677,0.996758,-0.040228,0.907034,0.110927,-0.012009,0.055220,-0.003218,0.764867,0.610717,0.204946,0.083980,0.113770,-0.008195,0.044143,-0.002196,0.909852,0.335759,0.243794,0.125970,0.101560,-0.007347,0.044143,-0.004242,-0.056641,0.997859,-0.032702,0.047850,0.040030,-0.008195,0.044143,-0.002196,-0.063175,0.997859,-0.016928,0.125970,0.101560,0.0,-0.064995,0.0,0.0,-1.0,0.000000,0.396970,0.775390,-0.008195,-0.064439,-0.002196,-0.126069,-0.991446,-0.033780,0.665520,0.711420,-0.008484,-0.064439,0.0,-0.130517,-0.991446,0.0,0.665520,0.711910,-0.016249,-0.062781,-0.004354,-0.249983,-0.965931,-0.066983,0.663080,0.687010,-0.016822,-0.062781,0.0,-0.258801,-0.965931,0.0,0.663080,0.687181,-0.024025,-0.060048,-0.006438,-0.369621,-0.923890,-0.099040,0.457548,0.687010,-0.024025,-0.060048,-0.006438,-0.369621,-0.923890,-0.099040,0.604490,0.650390,-0.024873,-0.060048,0.0,-0.382659,-0.923890,0.0,0.604490,0.650870,-0.031390,-0.056288,-0.008411,-0.482936,-0.866041,-0.129402,0.606930,0.613770,-0.032498,-0.056288,0.0,-0.499972,-0.866041,-0.000000,0.606930,0.614250,-0.039567,-0.051564,0.0,-0.608733,-0.793375,-0.000000,0.399410,0.589840,-0.038219,-0.051564,-0.010241,-0.587991,-0.793375,-0.157552,0.399410,0.589710,-0.044393,-0.045959,-0.011895,-0.682988,-0.707133,-0.183006,0.538570,0.552730,-0.045959,-0.045959,0.0,-0.707081,-0.707133,-0.000000,0.538570,0.553220,-0.049807,-0.039567,-0.013346,-0.766300,-0.608790,-0.205329,0.548340,0.516110,-0.051564,-0.039567,0.0,-0.793332,-0.608790,0.000000,0.548340,0.516600,-0.054370,-0.032498,-0.014568,-0.836501,-0.500027,-0.224140,0.523920,0.479490,-0.056288,-0.032498,0.0,-0.866010,-0.500027,-0.000000,0.523920,0.479980,-0.058002,-0.024873,-0.015542,-0.892390,-0.382707,-0.239115,0.326143,0.479850,-0.060048,-0.024873,0.0,-0.923870,-0.382707,0.0,0.550749,0.479529,-0.064439,-0.008484,0.0,-0.991444,-0.130536,-0.000000,0.489537,0.418940,-0.060642,-0.016822,-0.016249,-0.933008,-0.258837,-0.249999,0.489740,0.418450,-0.062781,-0.016822,0.0,-0.965921,-0.258837,0.000000,0.489740,0.418940,-0.064439,-0.008484,0.0,-0.991444,-0.130536,-0.000000,0.286904,0.418940,-0.064995,0.000000,0.0,-1.0,0.0,0.0,0.267519,0.382320,-0.064439,0.008484,0.0,-0.991444,0.130536,-0.000000,0.467396,0.357456,-0.062244,0.008484,-0.016678,-0.957661,0.130536,-0.256605,0.262315,0.357778,-0.062781,0.016822,0.0,-0.965921,0.258837,0.000000,0.264640,0.357910,-0.062781,0.016822,0.0,-0.965921,0.258837,0.000000,0.452908,0.320836,-0.058002,0.024873,-0.015542,-0.892390,0.382707,-0.239115,0.264640,0.320800,-0.060642,0.016822,-0.016249,-0.933008,0.258837,-0.249999,0.228295,0.321151,-0.060048,0.024873,0.0,-0.923870,0.382707,0.0,0.357910,0.260150,-0.058002,0.024873,-0.015542,-0.892390,0.382707,-0.239115,0.357910,0.259760,-0.056288,0.032498,0.0,-0.866010,0.500027,-0.000000,0.408802,0.259801,-0.054370,0.032498,-0.014568,-0.836501,0.500027,-0.224140,0.203718,0.260122,-0.051564,0.039567,0.0,-0.793332,0.608789,0.000000,0.394317,0.223185,-0.044393,0.045959,-0.011895,-0.682988,0.707133,-0.183006,0.198730,0.223140,-0.049807,0.039567,-0.013346,-0.766300,0.608790,-0.205329,0.169702,0.223505,-0.045959,0.045959,0.0,-0.707081,0.707133,-0.000000,0.149900,0.187010,-0.039567,0.051564,0.0,-0.608733,0.793375,-0.000000,0.350344,0.162156,-0.038219,0.051564,-0.010241,-0.587991,0.793375,-0.157552,0.145187,0.162437,-0.032498,0.056288,0.0,-0.356200,0.934410,-0.000000,0.311188,0.125874,-0.031390,0.056288,-0.008411,-0.344063,0.934410,-0.092191,0.113371,0.125672,-0.024025,0.057362,-0.006438,-0.077714,0.996758,-0.020823,0.103707,0.113387,-0.024873,0.057362,-0.000000,-0.080456,0.996758,0.000000,0.299062,0.113747,-0.008195,0.044143,-0.002196,0.909852,0.335759,0.243794,0.130370,0.101070,-0.008484,0.044143,-0.000000,-0.065403,0.997859,0.0,0.669920,0.032710,0.0,0.044699,-0.000000,0.0,1.0,0.000000,0.658093,0.106309,-0.012009,0.055220,0.003218,0.764867,0.610717,-0.204946,0.482068,0.101184,-0.015296,0.057553,0.004099,0.275650,0.958416,-0.073860,0.726197,0.101070,-0.013714,0.057553,0.007918,0.247141,0.958416,-0.142687,0.921549,0.101070,-0.010767,0.055220,0.006216,0.685761,0.610717,-0.395924,0.762939,0.101109,-0.008791,0.055220,0.008791,0.559922,0.610717,-0.559922,0.958201,0.101113,-0.007918,0.057553,0.013714,0.142687,0.958416,-0.247141,0.116210,0.104000,-0.011198,0.057553,0.011198,0.201790,0.958416,-0.201790,0.115953,0.103510,-0.007918,0.057553,0.013714,0.142687,0.958416,-0.247141,0.140261,0.115835,-0.006216,0.055220,0.010767,0.395924,0.610717,-0.685761,0.147460,0.115720,-0.004099,0.057553,0.015296,0.073860,0.958416,-0.275650,0.343019,0.116123,-0.003218,0.055220,0.012009,0.204946,0.610717,-0.764867,0.364740,0.115720,-0.000000,0.055220,0.012432,0.0,0.610717,-0.791849,0.762690,0.115720,-0.000000,0.057553,0.015836,0.0,0.958416,-0.285374,0.577475,0.116027,0.003218,0.055220,0.012009,-0.204946,0.610717,-0.764867,0.743581,0.103854,0.004099,0.057553,0.015296,-0.073860,0.958416,-0.275650,0.997070,0.115720,0.006216,0.055220,0.010767,-0.395924,0.610717,-0.685761,0.008324,0.118160,0.007918,0.057553,0.013714,-0.142687,0.958416,-0.247141,0.008670,0.118160,0.008791,0.055220,0.008791,-0.559922,0.610717,-0.559922,0.162574,0.105950,0.011198,0.057553,0.011198,-0.201790,0.958416,-0.201790,0.194275,0.118468,0.013714,0.057553,0.007918,-0.247141,0.958416,-0.142687,0.523920,0.105950,0.010767,0.055220,0.006216,-0.685761,0.610717,-0.395924,0.487119,0.106324,0.015296,0.057553,0.004099,-0.275650,0.958416,-0.073860,0.633780,0.106085,0.012009,0.055220,0.003218,-0.764867,0.610717,-0.204946,0.633516,0.106440,0.012432,0.055220,0.000000,-0.791849,0.610717,0.0,0.641110,0.106261,0.015836,0.057553,0.000000,-0.285374,0.958416,0.0,0.719223,0.106262,0.012009,0.055220,-0.003218,-0.764867,0.610717,0.204946,0.033126,0.108530,0.015296,0.057553,-0.004099,-0.275650,0.958416,0.073860,0.025665,0.121034,0.013714,0.057553,-0.007918,-0.247141,0.958416,0.142687,0.203944,0.120600,0.010767,0.055220,-0.006216,-0.685761,0.610717,0.395924,0.203610,0.120600,0.007918,0.057553,-0.013714,-0.142687,0.958416,0.247141,0.635781,0.120600,0.008791,0.055220,-0.008791,-0.559922,0.610717,0.559922,0.416045,0.120600,0.011198,0.057553,-0.011198,-0.201790,0.958416,0.201790,0.416460,0.120600,0.006216,0.055220,-0.010767,-0.395924,0.610717,0.685761,0.423555,0.108880,0.006216,0.055220,-0.010767,-0.395924,0.610717,0.685761,0.543437,0.108390,0.007918,0.057553,-0.013714,-0.142687,0.958416,0.247141,0.799351,0.120600,0.003218,0.055220,-0.012009,-0.204946,0.610717,0.764867,0.768052,0.108390,0.004099,0.057553,-0.015296,-0.073860,0.958416,0.275650,0.032915,0.123040,0.000000,0.055220,-0.012432,0.0,0.610717,0.791849,0.071770,0.110840,0.000000,0.057553,-0.015836,0.0,0.958416,0.285374,0.069444,0.111209,-0.003218,0.055220,-0.012009,0.204946,0.610717,0.764867,0.503900,0.110840,-0.007918,0.057553,-0.013714,0.142687,0.958416,0.247141,0.504390,0.111204,-0.006216,0.055220,-0.010767,0.395924,0.610717,0.685761,0.503946,0.111320,-0.004099,0.057553,-0.015296,0.073860,0.958416,0.275650,0.503900,0.110840,-0.007918,0.057553,-0.013714,0.142687,0.958416,0.247141,0.536000,0.110840,-0.006216,0.055220,-0.010767,0.395924,0.610717,0.685761,0.535692,0.110840,-0.008791,0.055220,-0.008791,0.559922,0.610717,0.559922,0.542968,0.110840,-0.011198,0.057553,-0.011198,0.201790,0.958416,0.201790,0.760534,0.110917,-0.013714,0.057553,-0.007918,0.247141,0.958416,0.142687,0.062446,0.101070,-0.010767,0.055220,-0.006216,0.685761,0.610717,0.395924,0.941252,0.099114,-0.015836,0.057553,-0.000000,0.285374,0.958416,0.0,0.099034,0.101560,-0.012432,0.055220,-0.000000,0.791849,0.610717,0.0,0.130370,0.101560,-0.015296,0.057553,-0.004099,0.275650,0.958416,0.073860,0.099120,0.101070,-0.012009,0.055220,-0.003218,0.764867,0.610717,0.204946,0.099120,0.101070,-0.235764,-0.064995,0.0,0.0,-1.0,0.000000,0.403800,0.774900,-0.227280,-0.064439,0.0,0.130517,-0.991446,0.0,0.701832,0.748040,-0.227570,-0.064439,0.002196,0.126069,-0.991446,0.033780,0.899576,0.748530,-0.227570,-0.064439,0.002196,0.126069,-0.991446,0.033780,0.701832,0.748040,-0.218942,-0.062781,0.0,0.258801,-0.965931,0.0,0.889964,0.711910,-0.219515,-0.062781,0.004354,0.249983,-0.965931,0.066983,0.899576,0.748530,-0.227280,-0.064439,0.0,0.130517,-0.991446,0.0,0.687343,0.711420,-0.219515,-0.062781,0.004354,0.249983,-0.965931,0.066983,0.687343,0.711420,-0.210891,-0.060048,0.0,0.382659,-0.923890,0.0,0.865230,0.687275,-0.211739,-0.060048,0.006438,0.369620,-0.923890,0.099040,0.889964,0.711910,-0.218942,-0.062781,0.0,0.258801,-0.965931,0.0,0.662590,0.687104,-0.211739,-0.060048,0.006438,0.369620,-0.923890,0.099040,0.662592,0.687104,-0.203266,-0.056288,0.0,0.499972,-0.866041,-0.000000,0.840969,0.650870,-0.204374,-0.056288,0.008411,0.482936,-0.866041,0.129402,0.865230,0.687275,-0.210891,-0.060048,0.0,0.382659,-0.923890,0.0,0.643220,0.650390,-0.204374,-0.056288,0.008411,0.482936,-0.866041,0.129402,0.643220,0.650390,-0.196197,-0.051564,0.0,0.608733,-0.793375,-0.000000,0.824048,0.614250,-0.197546,-0.051564,0.010241,0.587991,-0.793375,0.157552,0.840969,0.650870,-0.203266,-0.056288,0.0,0.499972,-0.866041,-0.000000,0.628728,0.613770,-0.197546,-0.051564,0.010241,0.587991,-0.793375,0.157552,0.628728,0.613770,-0.196197,-0.051564,0.0,0.608733,-0.793375,-0.000000,0.604000,0.589401,-0.191371,-0.045959,0.011895,0.682988,-0.707133,0.183006,0.824048,0.614250,-0.189805,-0.045959,0.0,0.707081,-0.707133,-0.000000,0.807100,0.577630,-0.191371,-0.045959,0.011895,0.682988,-0.707133,0.183006,0.604000,0.589401,-0.184200,-0.039567,0.0,0.793332,-0.608790,0.000000,0.782220,0.552942,-0.185957,-0.039567,0.013346,0.766300,-0.608790,0.205329,0.807100,0.577630,-0.189805,-0.045959,0.0,0.707081,-0.707133,-0.000000,0.584613,0.552730,-0.185957,-0.039567,0.013346,0.766300,-0.608790,0.205329,0.584613,0.552730,-0.179476,-0.032498,0.0,0.866010,-0.500027,-0.000000,0.765439,0.516600,-0.181394,-0.032498,0.014568,0.836501,-0.500027,0.224140,0.782220,0.552942,-0.184200,-0.039567,0.0,0.793332,-0.608790,0.000000,0.570122,0.516110,-0.181394,-0.032498,0.014568,0.836501,-0.500027,0.224140,0.570122,0.516110,-0.175716,-0.024873,0.0,0.923870,-0.382707,0.0,0.748496,0.479980,-0.177762,-0.024873,0.015542,0.892390,-0.382707,0.239115,0.765439,0.516600,-0.179476,-0.032498,0.0,0.866010,-0.500027,-0.000000,0.550750,0.479490,-0.177762,-0.024873,0.015542,0.892390,-0.382707,0.239115,0.550750,0.479490,-0.172983,-0.016822,0.0,0.965921,-0.258837,0.000000,0.723630,0.455273,-0.175122,-0.016822,0.016249,0.933008,-0.258837,0.249999,0.748496,0.479980,-0.175716,-0.024873,0.0,0.923870,-0.382707,0.0,0.525998,0.455070,-0.175122,-0.016822,0.016249,0.933008,-0.258837,0.249999,0.525998,0.455070,-0.171325,-0.008484,0.0,0.991444,-0.130536,-0.000000,0.714145,0.418940,-0.173520,-0.008484,0.016678,0.957661,-0.130536,0.256605,0.723630,0.455273,-0.172983,-0.016822,0.0,0.965921,-0.258837,0.000000,0.511511,0.418450,-0.173520,-0.008484,0.016678,0.957661,-0.130536,0.256605,0.511511,0.418450,-0.170769,0.000000,0.0,1.0,0.0,0.0,0.511230,0.418940,-0.172983,0.000000,0.016822,0.965926,0.0,0.258819,0.714145,0.418940,-0.171325,-0.008484,0.0,0.991444,-0.130536,-0.000000,0.491690,0.381866,-0.172983,0.000000,0.016822,0.965926,0.0,0.258819,0.492136,0.381830,-0.170769,0.000000,0.0,1.0,0.0,0.0,0.467396,0.357420,-0.173520,0.008484,0.016678,0.957661,0.130536,0.256605,0.689896,0.382320,-0.171325,0.008484,0.0,0.991444,0.130536,-0.000000,0.665030,0.357623,-0.173520,0.008484,0.016678,0.957661,0.130536,0.256605,0.467396,0.357420,-0.171325,0.008484,0.0,0.991444,0.130536,-0.000000,0.452908,0.320800,-0.175122,0.016822,0.016249,0.933008,0.258837,0.249999,0.665030,0.357623,-0.172983,0.016822,0.0,0.965921,0.258837,0.000000,0.655541,0.321280,-0.175122,0.016822,0.016249,0.933008,0.258837,0.249999,0.452908,0.320800,-0.172983,0.016822,0.0,0.965921,0.258837,0.000000,0.433519,0.284660,-0.177762,0.024873,0.015542,0.892390,0.382707,0.239115,0.655541,0.321280,-0.175716,0.024873,0.0,0.923870,0.382707,0.0,0.452630,0.321280,-0.177762,0.024873,0.015542,0.892390,0.382707,0.239115,0.433538,0.284180,-0.175716,0.024873,0.0,0.923870,0.382707,0.0,0.408800,0.259760,-0.181394,0.032498,0.014568,0.836501,0.500027,0.224140,0.631280,0.284660,-0.179476,0.032498,0.0,0.866010,0.500027,-0.000000,0.606440,0.259968,-0.181394,0.032498,0.014568,0.836501,0.500027,0.224140,0.408800,0.259760,-0.179476,0.032498,0.0,0.866010,0.500027,-0.000000,0.394314,0.223140,-0.185957,0.039567,0.013346,0.766300,0.608790,0.205329,0.606440,0.259968,-0.184200,0.039567,0.0,0.793332,0.608789,0.000000,0.596940,0.223630,-0.185957,0.039567,0.013346,0.766300,0.608790,0.205329,0.394314,0.223140,-0.184200,0.039567,0.0,0.793332,0.608789,0.000000,0.374949,0.186520,-0.191371,0.045959,0.011895,0.682988,0.707133,0.183006,0.596940,0.223630,-0.189805,0.045959,0.0,0.707081,0.707133,-0.000000,0.572692,0.187010,-0.191371,0.045959,0.011895,0.682988,0.707133,0.183006,0.374949,0.186520,-0.196197,0.051564,0.0,0.608733,0.793375,-0.000000,0.548094,0.162590,-0.197546,0.051564,0.010241,0.587991,0.793375,0.157552,0.572692,0.187010,-0.189805,0.045959,0.0,0.707081,0.707133,-0.000000,0.350339,0.162100,-0.197546,0.051564,0.010241,0.587991,0.793375,0.157552,0.350339,0.162100,-0.203266,0.056288,0.0,0.356200,0.934410,-0.000000,0.533488,0.125970,-0.204374,0.056288,0.008411,0.344063,0.934410,0.092191,0.548094,0.162590,-0.196197,0.051564,0.0,0.608733,0.793375,-0.000000,0.338040,0.125480,-0.211739,0.057362,0.006438,0.077714,0.996758,0.020823,0.533488,0.125970,-0.204374,0.056288,0.008411,0.344063,0.934410,0.092191,0.338040,0.125480,-0.203266,0.056288,0.0,0.356200,0.934410,-0.000000,0.306392,0.113280,-0.210891,0.057362,-0.000000,0.080456,0.996758,0.000000,0.501720,0.113770,-0.211739,0.057362,0.006438,0.077714,0.996758,0.020823,0.306392,0.113280,-0.219928,0.057553,-0.000000,-0.285374,0.958416,0.0,0.482339,0.101560,-0.220468,0.057553,0.004099,-0.275650,0.958416,-0.073860,0.501720,0.113770,-0.210891,0.057362,-0.000000,0.080456,0.996758,0.000000,0.296845,0.101070,-0.227570,0.044143,0.002196,-0.909852,0.335759,-0.243794,0.479628,0.101560,-0.223756,0.055220,0.003218,-0.764867,0.610717,-0.204946,0.325862,0.101070,-0.223332,0.055220,-0.000000,-0.791849,0.610717,0.0,0.330983,0.101070,-0.227280,0.044143,-0.000000,-0.941948,0.335759,0.0,0.484768,0.101070,-0.235764,0.044699,-0.000000,0.0,1.0,0.000000,0.665412,0.105950,-0.227570,0.044143,0.002196,0.063175,0.997859,0.016928,0.484768,0.101070,-0.227280,0.044143,-0.000000,0.065403,0.997859,0.0,0.330983,0.101070,-0.228417,-0.064439,0.004242,0.113031,-0.991446,0.065258,0.125636,0.750970,-0.228417,-0.064439,0.004242,0.113031,-0.991446,0.065258,0.086910,0.713860,-0.219515,-0.062781,0.004354,0.249983,-0.965931,0.066983,0.089174,0.714350,-0.221196,-0.062781,0.008411,0.224128,-0.965931,0.129401,0.125636,0.750970,-0.227570,-0.064439,0.002196,0.126069,-0.991446,0.033780,0.889964,0.711910,-0.221196,-0.062781,0.008411,0.224128,-0.965931,0.129401,0.084470,0.689450,-0.211739,-0.060048,0.006438,0.369620,-0.923890,0.099040,0.083980,0.689878,-0.214224,-0.060048,0.012436,0.331393,-0.923890,0.191330,0.089174,0.714350,-0.219515,-0.062781,0.004354,0.249983,-0.965931,0.066983,0.865230,0.687275,-0.214224,-0.060048,0.012436,0.331393,-0.923890,0.191330,0.865712,0.675065,-0.204374,-0.056288,0.008411,0.482936,-0.866041,0.129402,0.064593,0.653320,-0.207620,-0.056288,0.016249,0.432989,-0.866041,0.249986,0.083980,0.689878,-0.211739,-0.060048,0.006438,0.369620,-0.923890,0.099040,0.840969,0.650870,-0.207620,-0.056288,0.016249,0.432989,-0.866041,0.249986,0.028320,0.616210,-0.204374,-0.056288,0.008411,0.482936,-0.866041,0.129402,0.824048,0.614250,-0.201498,-0.051564,0.019783,0.527178,-0.793375,0.304367,0.064593,0.653320,-0.197546,-0.051564,0.010241,0.587991,-0.793375,0.157552,0.028157,0.616690,-0.201498,-0.051564,0.019783,0.527178,-0.793375,0.304367,0.030597,0.616210,-0.197546,-0.051564,0.010241,0.587991,-0.793375,0.157552,0.807100,0.577630,-0.195963,-0.045959,0.022979,0.612350,-0.707133,0.353540,0.030572,0.616690,-0.191371,-0.045959,0.011895,0.682988,-0.707133,0.183006,0.030270,0.616592,-0.195963,-0.045959,0.022979,0.612350,-0.707133,0.353540,0.011227,0.579590,-0.185957,-0.039567,0.013346,0.766300,-0.608790,0.205329,0.010740,0.579963,-0.191108,-0.039567,0.025782,0.687046,-0.608790,0.396666,0.011230,0.579964,-0.191371,-0.045959,0.011895,0.682988,-0.707133,0.183006,0.782220,0.552942,-0.191108,-0.039567,0.025782,0.687046,-0.608790,0.396666,0.968260,0.516110,-0.181394,-0.032498,0.014568,0.836501,-0.500027,0.224140,0.968082,0.516600,-0.187017,-0.032498,0.028144,0.749986,-0.500027,0.433005,0.005981,0.555660,-0.185957,-0.039567,0.013346,0.766300,-0.608790,0.205329,0.765439,0.516600,-0.187017,-0.032498,0.028144,0.749986,-0.500027,0.433005,0.970522,0.516110,-0.177762,-0.024873,0.015542,0.892390,-0.382707,0.239115,0.970210,0.516481,-0.183761,-0.024873,0.030024,0.800095,-0.382707,0.461935,0.970502,0.516600,-0.181394,-0.032498,0.014568,0.836501,-0.500027,0.224140,0.748496,0.479980,-0.183761,-0.024873,0.030024,0.800095,-0.382707,0.461935,0.748496,0.479695,-0.175122,-0.016822,0.016249,0.933008,-0.258837,0.249999,0.945920,0.455560,-0.181394,-0.016822,0.031390,0.836512,-0.258837,0.482961,0.951132,0.479980,-0.177762,-0.024873,0.015542,0.892390,-0.382707,0.239115,0.723630,0.455273,-0.181394,-0.016822,0.031390,0.836512,-0.258837,0.482961,0.909660,0.418450,-0.173520,-0.008484,0.016678,0.957661,-0.130536,0.256605,0.909464,0.418940,-0.179958,-0.008484,0.032220,0.858615,-0.130536,0.495722,0.945920,0.455560,-0.175122,-0.016822,0.016249,0.933008,-0.258837,0.249999,0.714145,0.418940,-0.179958,-0.008484,0.032220,0.858615,-0.130536,0.495722,0.911904,0.418450,-0.172983,0.000000,0.016822,0.965926,0.0,0.258819,0.911620,0.418816,-0.179476,0.000000,0.032498,0.866025,0.0,0.500000,0.911898,0.418940,-0.173520,-0.008484,0.016678,0.957661,-0.130536,0.256605,0.689896,0.382320,-0.179476,0.000000,0.032498,0.866025,0.0,0.500000,0.892519,0.381830,-0.172983,0.000000,0.016822,0.965926,0.0,0.258819,0.665030,0.357623,-0.179958,0.008484,0.032220,0.858615,0.130536,0.495722,0.892570,0.382195,-0.173520,0.008484,0.016678,0.957661,0.130536,0.256605,0.892090,0.382195,-0.179958,0.008484,0.032220,0.858615,0.130536,0.495722,0.665147,0.357622,-0.173520,0.008484,0.016678,0.957661,0.130536,0.256605,0.655541,0.321280,-0.181394,0.016822,0.031390,0.836512,0.258837,0.482961,0.887200,0.357786,-0.175122,0.016822,0.016249,0.933008,0.258837,0.249999,0.853299,0.321280,-0.181394,0.016822,0.031390,0.836512,0.258837,0.482961,0.655550,0.320999,-0.175122,0.016822,0.016249,0.933008,0.258837,0.249999,0.631280,0.284660,-0.183761,0.024873,0.030024,0.800095,0.382707,0.461935,0.853299,0.321280,-0.177762,0.024873,0.015542,0.892390,0.382707,0.239115,0.687010,0.321280,-0.187017,0.032498,0.028144,0.749986,0.500027,0.433005,0.833980,0.284541,-0.183761,0.024873,0.030024,0.800095,0.382707,0.461935,0.833490,0.284180,-0.177762,0.024873,0.015542,0.892390,0.382707,0.239115,0.606440,0.259968,-0.181394,0.032498,0.014568,0.836501,0.500027,0.224140,0.833490,0.284537,-0.191108,0.039567,0.025782,0.687046,0.608790,0.396666,0.828726,0.260250,-0.187017,0.032498,0.028144,0.749986,0.500027,0.433005,0.606558,0.259967,-0.181394,0.032498,0.014568,0.836501,0.500027,0.224140,0.596940,0.223630,-0.185957,0.039567,0.013346,0.766300,0.608790,0.205329,0.794712,0.223630,-0.195963,0.045959,0.022979,0.612350,0.707133,0.353540,0.794712,0.223630,-0.191108,0.039567,0.025782,0.687046,0.608790,0.396666,0.596957,0.223351,-0.185957,0.039567,0.013346,0.766300,0.608790,0.205329,0.572692,0.187010,-0.191371,0.045959,0.011895,0.682988,0.707133,0.183006,0.606440,0.223630,-0.191371,0.045959,0.011895,0.682988,0.707133,0.183006,0.548094,0.162590,-0.201498,0.051564,0.019783,0.527178,0.793375,0.304367,0.775390,0.186902,-0.195963,0.045959,0.022979,0.612350,0.707133,0.353540,0.774900,0.186520,-0.197546,0.051564,0.010241,0.587991,0.793375,0.157552,0.809444,0.162100,-0.197546,0.051564,0.010241,0.587991,0.793375,0.157552,0.533488,0.125970,-0.207620,0.056288,0.016249,0.308479,0.934410,0.178100,0.770387,0.162590,-0.201498,0.051564,0.019783,0.527178,0.793375,0.304367,0.548109,0.162288,-0.204374,0.056288,0.008411,0.344063,0.934410,0.092191,0.741095,0.125970,-0.204374,0.056288,0.008411,0.344063,0.934410,0.092191,0.501720,0.113770,-0.214224,0.057362,0.012436,0.069677,0.996758,0.040228,0.741095,0.125970,-0.207620,0.056288,0.016249,0.308479,0.934410,0.178100,0.533495,0.125839,-0.211739,0.057362,0.006438,0.077714,0.996758,0.020823,0.758180,0.113770,-0.214224,0.057362,0.012436,0.069677,0.996758,0.040228,0.726560,0.101070,-0.220468,0.057553,0.004099,-0.275650,0.958416,-0.073860,0.755370,0.113658,-0.222050,0.057553,0.007918,-0.247141,0.958416,-0.142687,0.758180,0.113770,-0.211739,0.057362,0.006438,0.077714,0.996758,0.020823,0.482339,0.101560,-0.228417,0.044143,0.004242,-0.815751,0.335759,-0.470974,0.755613,0.101560,-0.224997,0.055220,0.006216,-0.685761,0.610717,-0.395924,0.479628,0.101560,-0.223756,0.055220,0.003218,-0.764867,0.610717,-0.204946,0.484768,0.101070,-0.227570,0.044143,0.002196,-0.909852,0.335759,-0.243794,0.758288,0.101560,-0.228417,0.044143,0.004242,0.056641,0.997859,0.032702,0.758288,0.101560,-0.227570,0.044143,0.002196,0.063175,0.997859,0.016928,0.477439,0.101494,-0.229765,-0.064439,0.005999,0.092289,-0.991446,0.092289,0.328266,0.750970,-0.228417,-0.064439,0.004242,0.113031,-0.991446,0.065258,0.089174,0.714350,-0.221196,-0.062781,0.008411,0.224128,-0.965931,0.129401,0.313774,0.714350,-0.223869,-0.062781,0.011895,0.183000,-0.965931,0.183000,0.328266,0.750970,-0.229765,-0.064439,0.005999,0.092289,-0.991446,0.092289,0.125635,0.750605,-0.214224,-0.060048,0.012436,0.331393,-0.923890,0.191330,0.267549,0.677730,-0.223869,-0.062781,0.011895,0.183000,-0.965931,0.183000,0.267570,0.677247,-0.221196,-0.062781,0.008411,0.224128,-0.965931,0.129401,0.083980,0.689878,-0.218176,-0.060048,0.017588,0.270581,-0.923890,0.270581,0.313774,0.714350,-0.214224,-0.060048,0.012436,0.331393,-0.923890,0.191330,0.064593,0.653320,-0.207620,-0.056288,0.016249,0.432989,-0.866041,0.249986,0.269530,0.652903,-0.212785,-0.056288,0.022979,0.353534,-0.866041,0.353534,0.267549,0.677730,-0.218176,-0.060048,0.017588,0.270581,-0.923890,0.270581,0.221190,0.652830,-0.201498,-0.051564,0.019783,0.527178,-0.793375,0.304367,0.233202,0.616690,-0.212785,-0.056288,0.022979,0.353534,-0.866041,0.353534,0.233390,0.616210,-0.207620,-0.056288,0.016249,0.432989,-0.866041,0.249986,0.028157,0.616690,-0.207786,-0.051564,0.027978,0.430439,-0.793375,0.430439,0.269530,0.652903,-0.195963,-0.045959,0.022979,0.612350,-0.707133,0.353540,0.208948,0.580070,-0.207786,-0.051564,0.027978,0.430439,-0.793375,0.430439,0.208980,0.579590,-0.201498,-0.051564,0.019783,0.527178,-0.793375,0.304367,0.208980,0.579590,-0.203266,-0.045959,0.032498,0.499982,-0.707133,0.499982,0.233202,0.616690,-0.191108,-0.039567,0.025782,0.687046,-0.608790,0.396666,0.210930,0.555216,-0.199303,-0.039567,0.036462,0.560970,-0.608790,0.560970,0.208948,0.580070,-0.195963,-0.045959,0.022979,0.612350,-0.707133,0.353540,0.005981,0.555660,-0.203266,-0.045959,0.032498,0.499982,-0.707133,0.499982,0.162590,0.555170,-0.199303,-0.039567,0.036462,0.560970,-0.608790,0.560970,0.174800,0.518550,-0.187017,-0.032498,0.028144,0.749986,-0.500027,0.433005,0.174599,0.519040,-0.195963,-0.032498,0.039801,0.612361,-0.500027,0.612361,0.210930,0.555216,-0.191108,-0.039567,0.025782,0.687046,-0.608790,0.396666,0.968082,0.516600,-0.195963,-0.032498,0.039801,0.612361,-0.500027,0.612361,0.147940,0.481964,-0.183761,-0.024873,0.030024,0.800095,-0.382707,0.461935,0.147922,0.482420,-0.193304,-0.024873,0.042460,0.653274,-0.382707,0.653275,0.174599,0.519040,-0.187017,-0.032498,0.028144,0.749986,-0.500027,0.433005,0.951132,0.479980,-0.193304,-0.024873,0.042460,0.653274,-0.382707,0.653275,0.951132,0.479859,-0.181394,-0.016822,0.031390,0.836512,-0.258837,0.482961,0.152340,0.457557,-0.191371,-0.016822,0.044393,0.683009,-0.258837,0.683009,0.147922,0.482420,-0.183761,-0.024873,0.030024,0.800095,-0.382707,0.461935,0.945920,0.455560,-0.191371,-0.016822,0.044393,0.683009,-0.258837,0.683009,0.116210,0.420890,-0.179958,-0.008484,0.032220,0.858615,-0.130536,0.495722,0.116003,0.421380,-0.190199,-0.008484,0.045566,0.701057,-0.130536,0.701057,0.152340,0.457557,-0.181394,-0.016822,0.031390,0.836512,-0.258837,0.482961,0.909464,0.418940,-0.190199,-0.008484,0.045566,0.701057,-0.130536,0.701057,0.911898,0.418940,-0.179476,0.000000,0.032498,0.866025,0.0,0.500000,0.911620,0.418940,-0.189805,0.000000,0.045959,0.707107,0.0,0.707107,0.116003,0.421380,-0.179958,-0.008484,0.032220,0.858615,-0.130536,0.495722,0.911620,0.418816,-0.190199,0.008484,0.045566,0.701057,0.130536,0.701057,0.892519,0.382320,-0.189805,0.000000,0.045959,0.707107,0.0,0.707107,0.892570,0.382195,-0.179476,0.000000,0.032498,0.866025,0.0,0.500000,0.892090,0.382195,-0.179958,0.008484,0.032220,0.858615,0.130536,0.495722,0.889640,0.357910,-0.191371,0.016822,0.044393,0.683009,0.258837,0.683009,0.093750,0.359897,-0.190199,0.008484,0.045566,0.701057,0.130536,0.701057,0.887319,0.357786,-0.179958,0.008484,0.032220,0.858615,0.130536,0.495722,0.853299,0.321280,-0.181394,0.016822,0.031390,0.836512,0.258837,0.482961,0.889679,0.321280,-0.193304,0.024873,0.042460,0.653274,0.382707,0.653275,0.889679,0.321280,-0.191371,0.016822,0.044393,0.683009,0.258837,0.683009,0.853303,0.321159,-0.181394,0.016822,0.031390,0.836512,0.258837,0.482961,0.889640,0.320800,-0.183761,0.024873,0.030024,0.800095,0.382707,0.461935,0.889640,0.321280,-0.195963,0.032498,0.039801,0.612361,0.500027,0.612361,0.960930,0.260053,-0.193304,0.024873,0.042460,0.653274,0.382707,0.653275,0.960930,0.259760,-0.183761,0.024873,0.030024,0.800095,0.382707,0.461935,0.828726,0.260250,-0.187017,0.032498,0.028144,0.749986,0.500027,0.433005,0.035150,0.262242,-0.199303,0.039567,0.036462,0.560970,0.608790,0.560970,0.035150,0.262242,-0.195963,0.032498,0.039801,0.612361,0.500027,0.612361,0.828733,0.260131,-0.187017,0.032498,0.028144,0.749986,0.500027,0.433005,0.794712,0.223630,-0.191108,0.039567,0.025782,0.687046,0.608790,0.396666,0.020500,0.225626,-0.195963,0.045959,0.022979,0.612350,0.707133,0.353540,0.823730,0.223630,-0.199303,0.039567,0.036462,0.560970,0.608790,0.560970,0.794719,0.223515,-0.191108,0.039567,0.025782,0.687046,0.608790,0.396666,0.823730,0.223140,-0.203266,0.045959,0.032498,0.499982,0.707133,0.499982,0.020500,0.225626,-0.207786,0.051564,0.027978,0.430439,0.793375,0.430439,0.809570,0.162590,-0.195963,0.045959,0.022979,0.612350,0.707133,0.353540,0.770387,0.162590,-0.201498,0.051564,0.019783,0.527178,0.793375,0.304367,0.975090,0.162141,-0.203266,0.045959,0.032498,0.499982,0.707133,0.499982,0.809570,0.162100,-0.207620,0.056288,0.016249,0.308479,0.934410,0.178100,0.811520,0.162590,-0.207786,0.051564,0.027978,0.430439,0.793375,0.430439,0.770391,0.162535,-0.201498,0.051564,0.019783,0.527178,0.793375,0.304367,0.741095,0.125970,-0.212785,0.056288,0.022979,0.251872,0.934410,0.251872,0.975090,0.162141,-0.214224,0.057362,0.012436,0.069677,0.996758,0.040228,0.955564,0.113770,-0.212785,0.056288,0.022979,0.251872,0.934410,0.251872,0.741102,0.125824,-0.207620,0.056288,0.016249,0.308479,0.934410,0.178100,0.758180,0.113770,-0.218176,0.057362,0.017588,0.056891,0.996758,0.056891,0.963355,0.125557,-0.224566,0.057553,0.011198,-0.201790,0.958416,-0.201790,0.955564,0.113770,-0.214224,0.057362,0.012436,0.069677,0.996758,0.040228,0.755370,0.113658,-0.222050,0.057553,0.007918,-0.247141,0.958416,-0.142687,0.950728,0.113770,-0.218176,0.057362,0.017588,0.056891,0.996758,0.056891,0.765500,0.113287,-0.229765,0.044143,0.005999,-0.666058,0.335759,-0.666058,0.950881,0.101560,-0.226973,0.055220,0.008791,-0.559922,0.610717,-0.559922,0.755613,0.101560,-0.224997,0.055220,0.006216,-0.685761,0.610717,-0.395924,0.758288,0.101560,-0.228417,0.044143,0.004242,-0.815751,0.335759,-0.470974,0.955962,0.101560,-0.229765,0.044143,0.005999,0.046247,0.997859,0.046247,0.955962,0.101560,-0.228417,0.044143,0.004242,0.056641,0.997859,0.032702,0.990130,0.088860,-0.231522,-0.064439,0.007347,0.065258,-0.991446,0.113031,0.526007,0.750970,-0.229765,-0.064439,0.005999,0.092289,-0.991446,0.092289,0.313774,0.714350,-0.223869,-0.062781,0.011895,0.183000,-0.965931,0.183000,0.516406,0.714350,-0.227353,-0.062781,0.014568,0.129401,-0.965931,0.224128,0.526007,0.750970,-0.231522,-0.064439,0.007347,0.065258,-0.991446,0.113031,0.509270,0.713860,-0.218176,-0.060048,0.017588,0.270581,-0.923890,0.270581,0.492146,0.677730,-0.227353,-0.062781,0.014568,0.129401,-0.965931,0.224128,0.489740,0.677240,-0.223869,-0.062781,0.011895,0.183000,-0.965931,0.183000,0.267549,0.677730,-0.223328,-0.060048,0.021540,0.191330,-0.923890,0.331393,0.516406,0.714350,-0.212785,-0.056288,0.022979,0.353534,-0.866041,0.353534,0.293940,0.677730,-0.223328,-0.060048,0.021540,0.191330,-0.923890,0.331393,0.294430,0.677335,-0.218176,-0.060048,0.017588,0.270581,-0.923890,0.270581,0.220945,0.653320,-0.219515,-0.056288,0.028144,0.249986,-0.866041,0.432989,0.489717,0.677730,-0.207786,-0.051564,0.027978,0.430439,-0.793375,0.430439,0.450491,0.616690,-0.215981,-0.051564,0.034266,0.304367,-0.793375,0.527178,0.467280,0.653056,-0.212785,-0.056288,0.022979,0.353534,-0.866041,0.353534,0.233202,0.616690,-0.219515,-0.056288,0.028144,0.249986,-0.866041,0.432989,0.450680,0.616210,-0.203266,-0.045959,0.032498,0.499982,-0.707133,0.499982,0.431122,0.580070,-0.215981,-0.051564,0.034266,0.304367,-0.793375,0.527178,0.431150,0.579623,-0.207786,-0.051564,0.027978,0.430439,-0.793375,0.430439,0.208948,0.580070,-0.212785,-0.045959,0.039801,0.353540,-0.707133,0.612350,0.450491,0.616690,-0.199303,-0.039567,0.036462,0.560970,-0.608790,0.560970,0.235350,0.580070,-0.209982,-0.039567,0.044656,0.396666,-0.608790,0.687045,0.431122,0.580070,-0.203266,-0.045959,0.032498,0.499982,-0.707133,0.499982,0.162347,0.555660,-0.212785,-0.045959,0.039801,0.353540,-0.707133,0.612350,0.235840,0.579640,-0.195963,-0.032498,0.039801,0.612361,-0.500027,0.612361,0.391894,0.519040,-0.207620,-0.032498,0.048747,0.433005,-0.500027,0.749986,0.408690,0.555373,-0.199303,-0.039567,0.036462,0.560970,-0.608790,0.560970,0.174599,0.519040,-0.209982,-0.039567,0.044656,0.396666,-0.608790,0.687045,0.392090,0.518550,-0.205740,-0.024873,0.052003,0.461935,-0.382707,0.800095,0.391894,0.519040,-0.195963,-0.032498,0.039801,0.612361,-0.500027,0.612361,0.147922,0.482420,-0.193304,-0.024873,0.042460,0.653274,-0.382707,0.653275,0.374955,0.482420,-0.207620,-0.032498,0.048747,0.433005,-0.500027,0.749986,0.345700,0.482031,-0.204374,-0.016822,0.054370,0.482961,-0.258837,0.836512,0.345685,0.482420,-0.193304,-0.024873,0.042460,0.653274,-0.382707,0.653275,0.176750,0.481969,-0.191371,-0.016822,0.044393,0.683009,-0.258837,0.683009,0.176750,0.482420,-0.205740,-0.024873,0.052003,0.461935,-0.382707,0.800095,0.177198,0.481930,-0.203544,-0.008484,0.055806,0.495722,-0.130536,0.858615,0.138180,0.421380,-0.191371,-0.016822,0.044393,0.683009,-0.258837,0.683009,0.137973,0.420890,-0.190199,-0.008484,0.045566,0.701057,-0.130536,0.701057,0.536068,0.420890,-0.204374,-0.016822,0.054370,0.482961,-0.258837,0.836512,0.138180,0.420933,-0.203266,0.000000,0.056288,0.500000,0.0,0.866025,0.536068,0.420890,-0.190199,-0.008484,0.045566,0.701057,-0.130536,0.701057,0.137690,0.420927,-0.189805,0.000000,0.045959,0.707107,0.0,0.707107,0.137690,0.421380,-0.203544,-0.008484,0.055806,0.495722,-0.130536,0.858615,0.137973,0.420890,-0.190199,0.008484,0.045566,0.701057,0.130536,0.701057,0.118160,0.384760,-0.203266,0.000000,0.056288,0.500000,0.0,0.866025,0.118606,0.384270,-0.189805,0.000000,0.045959,0.707107,0.0,0.707107,0.118160,0.384308,-0.203544,0.008484,0.055806,0.495722,0.130536,0.858615,0.118599,0.384760,-0.191371,0.016822,0.044393,0.683009,0.258837,0.683009,0.079100,0.323730,-0.203544,0.008484,0.055806,0.495722,0.130536,0.858615,0.079590,0.323278,-0.190199,0.008484,0.045566,0.701057,0.130536,0.701057,0.079385,0.323240,-0.204374,0.016822,0.054370,0.482961,0.258837,0.836512,0.079590,0.323730,-0.204374,0.016822,0.054370,0.482961,0.258837,0.836512,0.079385,0.323240,-0.193304,0.024873,0.042460,0.653274,0.382707,0.653275,0.079100,0.323730,-0.205740,0.024873,0.052003,0.461935,0.382707,0.800095,0.079100,0.323730,-0.191371,0.016822,0.044393,0.683009,0.258837,0.683009,0.079100,0.323288,-0.205740,0.024873,0.052003,0.461935,0.382707,0.800095,0.060012,0.286620,-0.195963,0.032498,0.039801,0.612361,0.500027,0.612361,0.037590,0.262690,-0.207620,0.032498,0.048747,0.433005,0.500027,0.749986,0.059577,0.287100,-0.193304,0.024873,0.042460,0.653274,0.382707,0.653275,0.960930,0.260053,-0.207620,0.032498,0.048747,0.433005,0.500027,0.749986,0.035277,0.262242,-0.199303,0.039567,0.036462,0.560970,0.608790,0.560970,0.223422,0.226070,-0.209982,0.039567,0.044656,0.396666,0.608790,0.687046,0.232910,0.262399,-0.195963,0.032498,0.039801,0.612361,0.500027,0.612361,0.020500,0.225626,-0.212785,0.045959,0.039801,0.353540,0.707133,0.612350,0.223422,0.226070,-0.199303,0.039567,0.036462,0.560970,0.608790,0.560970,0.030270,0.225580,-0.203266,0.045959,0.032498,0.499982,0.707133,0.499982,0.199172,0.189450,-0.209982,0.039567,0.044656,0.396666,0.608790,0.687046,0.020795,0.225625,-0.215981,0.051564,0.034266,0.304367,0.793375,0.527178,0.000970,0.189450,-0.203266,0.045959,0.032498,0.499982,0.707133,0.499982,0.000970,0.189026,-0.207786,0.051564,0.027978,0.430439,0.793375,0.430439,0.977530,0.162590,-0.212785,0.045959,0.039801,0.353540,0.707133,0.612350,0.001460,0.189012,-0.212785,0.056288,0.022979,0.251872,0.934410,0.251872,0.162100,0.140487,-0.215981,0.051564,0.034266,0.304367,0.793375,0.527178,0.975290,0.162139,-0.207786,0.051564,0.027978,0.430439,0.793375,0.430439,0.977530,0.162100,-0.219515,0.056288,0.028144,0.178100,0.934410,0.308479,0.174493,0.165030,-0.223328,0.057362,0.021540,0.040228,0.996758,0.069677,0.962890,0.125970,-0.212785,0.056288,0.022979,0.251872,0.934410,0.251872,0.955564,0.113770,-0.218176,0.057362,0.017588,0.056891,0.996758,0.056891,0.962890,0.125970,-0.219515,0.056288,0.028144,0.178100,0.934410,0.308479,0.963370,0.125558,-0.224566,0.057553,0.011198,-0.201790,0.958416,-0.201790,0.960440,0.113770,-0.223328,0.057362,0.021540,0.040228,0.996758,0.069677,0.958004,0.113283,-0.218176,0.057362,0.017588,0.056891,0.996758,0.056891,0.950728,0.113770,-0.227846,0.057553,0.013714,-0.142687,0.958416,-0.247141,0.154780,0.115851,-0.229548,0.055220,0.010767,-0.395924,0.610717,-0.685761,0.950881,0.101560,-0.229765,0.044143,0.005999,-0.666058,0.335759,-0.666058,0.121064,0.104000,-0.231522,0.044143,0.007347,-0.470974,0.335759,-0.815751,0.118436,0.104000,-0.226973,0.055220,0.008791,-0.559922,0.610717,-0.559922,0.955962,0.101560,-0.231522,0.044143,0.007347,0.032702,0.997859,0.056641,0.121064,0.104000,-0.229765,0.044143,0.005999,0.046247,0.997859,0.046247,0.579590,0.093750,-0.233568,-0.064439,0.008195,0.033780,-0.991446,0.126069,0.750610,0.750970,-0.227353,-0.062781,0.014568,0.129401,-0.965931,0.224128,0.714148,0.714350,-0.233568,-0.064439,0.008195,0.033780,-0.991446,0.126069,0.711910,0.713860,-0.231522,-0.064439,0.007347,0.065258,-0.991446,0.113031,0.516406,0.714350,-0.231410,-0.062781,0.016249,0.066983,-0.965931,0.249983,0.750610,0.750970,-0.223328,-0.060048,0.021540,0.191330,-0.923890,0.331393,0.687477,0.677730,-0.231410,-0.062781,0.016249,0.066983,-0.965931,0.249983,0.687500,0.677240,-0.227353,-0.062781,0.014568,0.129401,-0.965931,0.224128,0.492146,0.677730,-0.229327,-0.060048,0.024025,0.099040,-0.923890,0.369621,0.714148,0.714350,-0.219515,-0.056288,0.028144,0.249986,-0.866041,0.432989,0.816749,0.652830,-0.229327,-0.060048,0.024025,0.099040,-0.923890,0.369621,0.694797,0.677240,-0.223328,-0.060048,0.021540,0.191330,-0.923890,0.331393,0.467280,0.653056,-0.227353,-0.056288,0.031390,0.129402,-0.866041,0.482936,0.694779,0.677730,-0.215981,-0.051564,0.034266,0.304367,-0.793375,0.527178,0.655552,0.616690,-0.225523,-0.051564,0.038219,0.157552,-0.793375,0.587991,0.689571,0.653320,-0.219515,-0.056288,0.028144,0.249986,-0.866041,0.432989,0.450491,0.616690,-0.227353,-0.056288,0.031390,0.129402,-0.866041,0.482936,0.653320,0.616210,-0.212785,-0.045959,0.039801,0.353540,-0.707133,0.612350,0.628877,0.580070,-0.223869,-0.045959,0.044393,0.183006,-0.707133,0.682988,0.655552,0.616690,-0.215981,-0.051564,0.034266,0.304367,-0.793375,0.527178,0.431122,0.580070,-0.225523,-0.051564,0.038219,0.157552,-0.793375,0.587991,0.628900,0.579678,-0.222418,-0.039567,0.049807,0.205329,-0.608790,0.766300,0.636230,0.579944,-0.212785,-0.045959,0.039801,0.353540,-0.707133,0.612350,0.408690,0.555373,-0.209982,-0.039567,0.044656,0.396666,-0.608790,0.687045,0.635740,0.579943,-0.223869,-0.045959,0.044393,0.183006,-0.707133,0.682988,0.636207,0.579590,-0.221196,-0.032498,0.054370,0.224140,-0.500027,0.836501,0.630965,0.555660,-0.209982,-0.039567,0.044656,0.396666,-0.608790,0.687045,0.391894,0.519040,-0.207620,-0.032498,0.048747,0.433005,-0.500027,0.749986,0.596953,0.519040,-0.222418,-0.039567,0.049807,0.205329,-0.608790,0.766300,0.594720,0.518550,-0.220223,-0.024873,0.058002,0.239115,-0.382707,0.892390,0.596953,0.519040,-0.207620,-0.032498,0.048747,0.433005,-0.500027,0.749986,0.374955,0.482420,-0.205740,-0.024873,0.052003,0.461935,-0.382707,0.800095,0.567858,0.482420,-0.221196,-0.032498,0.054370,0.224140,-0.500027,0.836501,0.567870,0.482102,-0.219515,-0.016822,0.060642,0.249999,-0.258837,0.933008,0.577630,0.482283,-0.205740,-0.024873,0.052003,0.461935,-0.382707,0.800095,0.350090,0.457712,-0.204374,-0.016822,0.054370,0.482961,-0.258837,0.836512,0.577140,0.482283,-0.220223,-0.024873,0.058002,0.239115,-0.382707,0.892390,0.577598,0.481930,-0.219086,-0.008484,0.062244,0.256604,-0.130536,0.957661,0.572260,0.457865,-0.204374,-0.016822,0.054370,0.482961,-0.258837,0.836512,0.340330,0.421085,-0.203544,-0.008484,0.055806,0.495722,-0.130536,0.858615,0.535926,0.421380,-0.219515,-0.016822,0.060642,0.249999,-0.258837,0.933008,0.536130,0.420890,-0.218942,0.000000,0.062781,0.258819,0.0,0.965926,0.538361,0.421380,-0.203544,-0.008484,0.055806,0.495722,-0.130536,0.858615,0.316356,0.384760,-0.203266,0.000000,0.056288,0.500000,0.0,0.866025,0.538080,0.421242,-0.219086,-0.008484,0.062244,0.256604,-0.130536,0.957661,0.538366,0.420890,-0.203544,0.008484,0.055806,0.495722,0.130536,0.858615,0.518550,0.384621,-0.218942,0.000000,0.062781,0.258819,0.0,0.965926,0.518988,0.384270,-0.203266,0.000000,0.056288,0.500000,0.0,0.866025,0.291500,0.360055,-0.219086,0.008484,0.062244,0.256604,0.130536,0.957661,0.519040,0.384621,-0.204374,0.016822,0.054370,0.482961,0.258837,0.836512,0.479779,0.323730,-0.219086,0.008484,0.062244,0.256604,0.130536,0.957661,0.479980,0.323240,-0.203544,0.008484,0.055806,0.495722,0.130536,0.858615,0.282008,0.323730,-0.219515,0.016822,0.060642,0.249999,0.258837,0.933008,0.513670,0.360211,-0.205740,0.024873,0.052003,0.461935,0.382707,0.800095,0.479490,0.323588,-0.219515,0.016822,0.060642,0.249999,0.258837,0.933008,0.479490,0.323240,-0.204374,0.016822,0.054370,0.482961,0.258837,0.836512,0.257761,0.287100,-0.220223,0.024873,0.058002,0.239115,0.382707,0.892390,0.479779,0.323730,-0.220223,0.024873,0.058002,0.239115,0.382707,0.892390,0.459960,0.286620,-0.207620,0.032498,0.048747,0.433005,0.500027,0.749986,0.459960,0.286961,-0.221196,0.032498,0.054370,0.224140,0.500027,0.836501,0.460440,0.286965,-0.205740,0.024873,0.052003,0.461935,0.382707,0.800095,0.232910,0.262399,-0.221196,0.032498,0.054370,0.224140,0.500027,0.836501,0.233039,0.262399,-0.209982,0.039567,0.044656,0.396666,0.608790,0.687046,0.421186,0.226070,-0.222418,0.039567,0.049807,0.205329,0.608790,0.766300,0.455198,0.262690,-0.207620,0.032498,0.048747,0.433005,0.500027,0.749986,0.223422,0.226070,-0.222418,0.039567,0.049807,0.205329,0.608790,0.766300,0.223440,0.225782,-0.212785,0.045959,0.039801,0.353540,0.707133,0.612350,0.232910,0.226070,-0.223869,0.045959,0.044393,0.183006,0.707133,0.682988,0.421186,0.226070,-0.209982,0.039567,0.044656,0.396666,0.608790,0.687046,0.199172,0.189450,-0.215981,0.051564,0.034266,0.304367,0.793375,0.527178,0.401360,0.189314,-0.223869,0.045959,0.044393,0.183006,0.707133,0.682988,0.401360,0.188960,-0.212785,0.045959,0.039801,0.353540,0.707133,0.612350,0.174493,0.165030,-0.225523,0.051564,0.038219,0.157552,0.793375,0.587991,0.401850,0.189321,-0.227353,0.056288,0.031390,0.092191,0.934410,0.344063,0.396673,0.165030,-0.215981,0.051564,0.034266,0.304367,0.793375,0.527178,0.162100,0.140487,-0.219515,0.056288,0.028144,0.178100,0.934410,0.308479,0.379390,0.140534,-0.225523,0.051564,0.038219,0.157552,0.793375,0.587991,0.174512,0.164737,-0.223328,0.057362,0.021540,0.040228,0.996758,0.069677,0.357670,0.116210,-0.227353,0.056288,0.031390,0.092191,0.934410,0.344063,0.162103,0.140487,-0.219515,0.056288,0.028144,0.178100,0.934410,0.308479,0.154780,0.115851,-0.229327,0.057362,0.024025,0.020823,0.996758,0.077714,0.379390,0.140534,-0.223328,0.057362,0.021540,0.040228,0.996758,0.069677,0.140261,0.115720,-0.227846,0.057553,0.013714,-0.142687,0.958416,-0.247141,0.147460,0.116210,-0.231665,0.057553,0.015296,-0.073860,0.958416,-0.275650,0.372070,0.128175,-0.229327,0.057362,0.024025,0.020823,0.996758,0.077714,0.140620,0.116210,-0.232546,0.055220,0.012009,-0.204946,0.610717,-0.764867,0.118436,0.104000,-0.231522,0.044143,0.007347,-0.470974,0.335759,-0.815751,0.342849,0.104000,-0.233568,0.044143,0.008195,-0.243794,0.335759,-0.909852,0.343131,0.104000,-0.229548,0.055220,0.010767,-0.395924,0.610717,-0.685761,0.121064,0.104000,-0.233568,0.044143,0.008195,0.016928,0.997859,0.063175,0.342849,0.104000,-0.231522,0.044143,0.007347,0.032702,0.997859,0.056641,0.562500,0.093750,-0.233568,-0.064439,0.008195,0.033780,-0.991446,0.126069,0.748178,0.750970,-0.235764,-0.064439,0.008484,0.0,-0.991446,0.130517,0.748340,0.750970,-0.235764,-0.062781,0.016822,0.0,-0.965931,0.258801,0.945924,0.750970,-0.233568,-0.064439,0.008195,0.033780,-0.991446,0.126069,0.714148,0.714350,-0.231410,-0.062781,0.016249,0.066983,-0.965931,0.249983,0.916785,0.714350,-0.235764,-0.064439,0.008484,0.0,-0.991446,0.130517,0.916990,0.713860,-0.235764,-0.060048,0.024873,0.0,-0.923890,0.382659,0.916785,0.714350,-0.231410,-0.062781,0.016249,0.066983,-0.965931,0.249983,0.687477,0.677730,-0.229327,-0.060048,0.024025,0.099040,-0.923890,0.369621,0.892527,0.677730,-0.235764,-0.062781,0.016822,0.0,-0.965931,0.258801,0.892570,0.677240,-0.235764,-0.056288,0.032498,0.0,-0.866041,0.499972,0.892527,0.677730,-0.229327,-0.060048,0.024025,0.099040,-0.923890,0.369621,0.689571,0.653320,-0.227353,-0.056288,0.031390,0.129402,-0.866041,0.482936,0.894530,0.652861,-0.235764,-0.060048,0.024873,0.0,-0.923890,0.382659,0.816890,0.652830,-0.225523,-0.051564,0.038219,0.157552,-0.793375,0.587991,0.858184,0.616690,-0.235764,-0.056288,0.032498,0.0,-0.866041,0.499972,0.858390,0.616210,-0.227353,-0.056288,0.031390,0.129402,-0.866041,0.482936,0.655552,0.616690,-0.235764,-0.051564,0.039567,0.0,-0.793375,0.608733,0.894530,0.652861,-0.235764,-0.045959,0.045959,-0.000000,-0.707133,0.707081,0.858184,0.616690,-0.225523,-0.051564,0.038219,0.157552,-0.793375,0.587991,0.628877,0.580070,-0.223869,-0.045959,0.044393,0.183006,-0.707133,0.682988,0.833931,0.580070,-0.235764,-0.051564,0.039567,0.0,-0.793375,0.608733,0.833980,0.579590,-0.235764,-0.039567,0.051564,0.000000,-0.608790,0.793332,0.833931,0.580070,-0.223869,-0.045959,0.044393,0.183006,-0.707133,0.682988,0.630965,0.555660,-0.222418,-0.039567,0.049807,0.205329,-0.608790,0.766300,0.835930,0.555190,-0.235764,-0.045959,0.045959,-0.000000,-0.707133,0.707081,0.760740,0.555170,-0.235764,-0.032498,0.056288,-0.000000,-0.500027,0.866010,0.835930,0.555190,-0.222418,-0.039567,0.049807,0.205329,-0.608790,0.766300,0.596953,0.519040,-0.221196,-0.032498,0.054370,0.224140,-0.500027,0.836501,0.799587,0.519040,-0.235764,-0.039567,0.051564,0.000000,-0.608790,0.793332,0.799800,0.518550,-0.235764,-0.024873,0.060048,0.0,-0.382707,0.923870,0.799587,0.519040,-0.221196,-0.032498,0.054370,0.224140,-0.500027,0.836501,0.567858,0.482420,-0.220223,-0.024873,0.058002,0.239115,-0.382707,0.892390,0.775341,0.482420,-0.235764,-0.032498,0.056288,-0.000000,-0.500027,0.866010,0.775390,0.481930,-0.235764,-0.016822,0.062781,0.000000,-0.258837,0.965921,0.775341,0.482420,-0.220223,-0.024873,0.058002,0.239115,-0.382707,0.892390,0.572260,0.457865,-0.219515,-0.016822,0.060642,0.249999,-0.258837,0.933008,0.777340,0.457536,-0.235764,-0.024873,0.060048,0.0,-0.382707,0.923870,0.577582,0.482283,-0.235764,-0.008484,0.064439,-0.000000,-0.130536,0.991444,0.777340,0.457536,-0.219515,-0.016822,0.060642,0.249999,-0.258837,0.933008,0.535926,0.421380,-0.219086,-0.008484,0.062244,0.256604,-0.130536,0.957661,0.741000,0.421380,-0.235764,-0.016822,0.062781,0.000000,-0.258837,0.965921,0.741210,0.420890,-0.235764,0.000000,0.064995,0.0,0.0,1.0,0.741000,0.421380,-0.219086,-0.008484,0.062244,0.256604,-0.130536,0.957661,0.538080,0.421242,-0.218942,0.000000,0.062781,0.258819,0.0,0.965926,0.538080,0.421380,-0.235764,-0.008484,0.064439,-0.000000,-0.130536,0.991444,0.538361,0.421380,-0.219086,0.008484,0.062244,0.256604,0.130536,0.957661,0.516110,0.360350,-0.235764,0.000000,0.064995,0.0,0.0,1.0,0.519040,0.384621,-0.218942,0.000000,0.062781,0.258819,0.0,0.965926,0.518550,0.384621,-0.235764,0.008484,0.064439,-0.000000,0.130536,0.991444,0.518988,0.384760,-0.219515,0.016822,0.060642,0.249999,0.258837,0.933008,0.518622,0.323730,-0.235764,0.008484,0.064439,-0.000000,0.130536,0.991444,0.513792,0.360211,-0.219086,0.008484,0.062244,0.256604,0.130536,0.957661,0.516110,0.359860,-0.235764,0.016822,0.062781,0.000000,0.258837,0.965921,0.718750,0.359876,-0.220223,0.024873,0.058002,0.239115,0.382707,0.892390,0.518550,0.323730,-0.235764,0.016822,0.062781,0.000000,0.258837,0.965921,0.479779,0.323591,-0.219515,0.016822,0.060642,0.249999,0.258837,0.933008,0.518550,0.323240,-0.235764,0.024873,0.060048,0.0,0.382707,0.923870,0.518622,0.323730,-0.221196,0.032498,0.054370,0.224140,0.500027,0.836501,0.457520,0.262690,-0.235764,0.024873,0.060048,0.0,0.382707,0.923870,0.460440,0.286965,-0.220223,0.024873,0.058002,0.239115,0.382707,0.892390,0.459960,0.286961,-0.235764,0.032498,0.056288,-0.000000,0.500027,0.866010,0.459960,0.287100,-0.222418,0.039567,0.049807,0.205329,0.608790,0.766300,0.645500,0.225599,-0.235764,0.032498,0.056288,-0.000000,0.500027,0.866010,0.455205,0.262554,-0.221196,0.032498,0.054370,0.224140,0.500027,0.836501,0.421186,0.226070,-0.235764,0.039567,0.051564,0.000000,0.608789,0.793332,0.660150,0.262218,-0.235764,0.039567,0.051564,0.000000,0.608789,0.793332,0.421195,0.225936,-0.223869,0.045959,0.044393,0.183006,0.707133,0.682988,0.457520,0.226070,-0.235764,0.045959,0.045959,-0.000000,0.707133,0.707081,0.645500,0.225599,-0.222418,0.039567,0.049807,0.205329,0.608790,0.766300,0.457520,0.225580,-0.225523,0.051564,0.038219,0.157552,0.793375,0.587991,0.398920,0.165030,-0.235764,0.045959,0.045959,-0.000000,0.707133,0.707081,0.401850,0.189321,-0.223869,0.045959,0.044393,0.183006,0.707133,0.682988,0.401360,0.189314,-0.235764,0.051564,0.039567,0.0,0.793375,0.608733,0.401360,0.189450,-0.227353,0.056288,0.031390,0.092191,0.934410,0.344063,0.398920,0.165030,-0.235764,0.056288,0.032498,-0.000000,0.934410,0.356200,0.601560,0.164576,-0.225523,0.051564,0.038219,0.157552,0.793375,0.587991,0.379390,0.140534,-0.235764,0.051564,0.039567,0.0,0.793375,0.608733,0.396681,0.164911,-0.235764,0.056288,0.032498,-0.000000,0.934410,0.356200,0.379407,0.140534,-0.229327,0.057362,0.024025,0.020823,0.996758,0.077714,0.582257,0.116210,-0.235764,0.057362,0.024873,0.000000,0.996758,0.080456,0.372550,0.128410,-0.227353,0.056288,0.031390,0.092191,0.934410,0.344063,0.357670,0.116210,-0.235764,0.057362,0.024873,0.000000,0.996758,0.080456,0.357687,0.115949,-0.229327,0.057362,0.024025,0.020823,0.996758,0.077714,0.343014,0.116210,-0.235764,0.057553,0.015836,0.0,0.958416,-0.285374,0.582257,0.116210,-0.231665,0.057553,0.015296,-0.073860,0.958416,-0.275650,0.577465,0.116210,-0.235764,0.055220,0.012432,0.0,0.610717,-0.791849,0.343131,0.104000,-0.233568,0.044143,0.008195,-0.243794,0.335759,-0.909852,0.584618,0.104000,-0.235764,0.044143,0.008484,0.0,0.335759,-0.941948,0.584960,0.103833,-0.232546,0.055220,0.012009,-0.204946,0.610717,-0.764867,0.342849,0.104000,-0.235764,0.044143,0.008484,0.0,0.997859,0.065403,0.584618,0.104000,-0.233568,0.044143,0.008195,0.016928,0.997859,0.063175,0.599367,0.093750,-0.235764,-0.064439,0.008484,0.0,-0.991446,0.130517,0.945924,0.750970,-0.237960,-0.064439,0.008195,-0.033780,-0.991446,0.126069,0.150026,0.753410,-0.235764,-0.062781,0.016822,0.0,-0.965931,0.258801,0.135537,0.716790,-0.237960,-0.064439,0.008195,-0.033780,-0.991446,0.126069,0.135740,0.716300,-0.235764,-0.064439,0.008484,0.0,-0.991446,0.130517,0.916785,0.714350,-0.240118,-0.062781,0.016249,-0.066983,-0.965931,0.249983,0.150026,0.753410,-0.242202,-0.060048,0.024025,-0.099040,-0.923890,0.369620,0.135537,0.716790,-0.235764,-0.062781,0.016822,0.0,-0.965931,0.258801,0.892527,0.677730,-0.235764,-0.060048,0.024873,0.0,-0.923890,0.382659,0.116170,0.680170,-0.240118,-0.062781,0.016249,-0.066983,-0.965931,0.249983,0.116210,0.679680,-0.235764,-0.056288,0.032498,0.0,-0.866041,0.499972,0.093750,0.655445,-0.242202,-0.060048,0.024025,-0.099040,-0.923890,0.369620,0.919384,0.677281,-0.235764,-0.060048,0.024873,0.0,-0.923890,0.382659,0.894530,0.652861,-0.244175,-0.056288,0.031390,-0.129402,-0.866041,0.482936,0.116170,0.680170,-0.246005,-0.051564,0.038219,-0.157552,-0.793375,0.587991,0.093750,0.655445,-0.235764,-0.056288,0.032498,0.0,-0.866041,0.499972,0.858184,0.616690,-0.235764,-0.051564,0.039567,0.0,-0.793375,0.608733,0.076940,0.619140,-0.244175,-0.056288,0.031390,-0.129402,-0.866041,0.482936,0.077140,0.618650,-0.235764,-0.045959,0.045959,-0.000000,-0.707133,0.707081,0.057569,0.582520,-0.246005,-0.051564,0.038219,-0.157552,-0.793375,0.587991,0.057610,0.582030,-0.235764,-0.051564,0.039567,0.0,-0.793375,0.608733,0.833931,0.580070,-0.247659,-0.045959,0.044393,-0.183006,-0.707133,0.682988,0.076940,0.619140,-0.235764,-0.039567,0.051564,0.000000,-0.608790,0.793332,0.860350,0.580070,-0.247659,-0.045959,0.044393,-0.183006,-0.707133,0.682988,0.860790,0.579590,-0.235764,-0.045959,0.045959,-0.000000,-0.707133,0.707081,0.760497,0.555660,-0.249110,-0.039567,0.049807,-0.205329,-0.608790,0.766300,0.057569,0.582520,-0.235764,-0.032498,0.056288,-0.000000,-0.500027,0.866010,0.018344,0.521480,-0.249110,-0.039567,0.049807,-0.205329,-0.608790,0.766300,0.018550,0.520990,-0.235764,-0.039567,0.051564,0.000000,-0.608790,0.793332,0.799587,0.519040,-0.250332,-0.032498,0.054370,-0.224140,-0.500027,0.836501,0.035150,0.557780,-0.235764,-0.024873,0.060048,0.0,-0.382707,0.923870,0.194330,0.484419,-0.250332,-0.032498,0.054370,-0.224140,-0.500027,0.836501,0.821556,0.518550,-0.235764,-0.032498,0.056288,-0.000000,-0.500027,0.866010,0.775341,0.482420,-0.251306,-0.024873,0.058002,-0.239115,-0.382707,0.892390,0.018344,0.521480,-0.235764,-0.016822,0.062781,0.000000,-0.258837,0.965921,0.801750,0.482420,-0.251306,-0.024873,0.058002,-0.239115,-0.382707,0.892390,0.802190,0.481930,-0.235764,-0.024873,0.060048,0.0,-0.382707,0.923870,0.801750,0.481947,-0.252013,-0.016822,0.060642,-0.249999,-0.258837,0.933008,0.194330,0.484419,-0.235764,-0.008484,0.064439,-0.000000,-0.130536,0.991444,0.162527,0.423340,-0.252013,-0.016822,0.060642,-0.249999,-0.258837,0.933008,0.763180,0.420912,-0.235764,-0.016822,0.062781,0.000000,-0.258837,0.965921,0.762970,0.420890,-0.252442,-0.008484,0.062244,-0.256604,-0.130536,0.957661,0.763180,0.421380,-0.235764,0.000000,0.064995,0.0,0.0,1.0,0.762690,0.421380,-0.252442,-0.008484,0.062244,-0.256604,-0.130536,0.957661,0.762970,0.420890,-0.235764,-0.008484,0.064439,-0.000000,-0.130536,0.991444,0.762690,0.420905,-0.252586,0.000000,0.062781,-0.258819,0.0,0.965926,0.162527,0.423340,-0.252442,0.008484,0.062244,-0.256604,0.130536,0.957661,0.743598,0.384760,-0.235764,0.000000,0.064995,0.0,0.0,1.0,0.743160,0.384288,-0.235764,0.008484,0.064439,-0.000000,0.130536,0.991444,0.743160,0.384760,-0.252586,0.000000,0.062781,-0.258819,0.0,0.965926,0.743606,0.384270,-0.252013,0.016822,0.060642,-0.249999,0.258837,0.933008,0.704590,0.323730,-0.235764,0.008484,0.064439,-0.000000,0.130536,0.991444,0.704391,0.323240,-0.235764,0.016822,0.062781,0.000000,0.258837,0.965921,0.938756,0.323240,-0.252442,0.008484,0.062244,-0.256604,0.130536,0.957661,0.704590,0.323256,-0.251306,0.024873,0.058002,-0.239115,0.382707,0.892390,0.938756,0.323240,-0.235764,0.016822,0.062781,0.000000,0.258837,0.965921,0.704100,0.323266,-0.235764,0.024873,0.060048,0.0,0.382707,0.923870,0.704100,0.323730,-0.252013,0.016822,0.060642,-0.249999,0.258837,0.933008,0.704391,0.323240,-0.250332,0.032498,0.054370,-0.224140,0.500027,0.836501,0.684586,0.287100,-0.235764,0.024873,0.060048,0.0,0.382707,0.923870,0.684570,0.286650,-0.235764,0.032498,0.056288,-0.000000,0.500027,0.866010,0.662590,0.262690,-0.251306,0.024873,0.058002,-0.239115,0.382707,0.892390,0.685020,0.286620,-0.249110,0.039567,0.049807,-0.205329,0.608790,0.766300,0.857910,0.262370,-0.235764,0.032498,0.056288,-0.000000,0.500027,0.866010,0.645500,0.225599,-0.235764,0.039567,0.051564,0.000000,0.608789,0.793332,0.848430,0.226070,-0.250332,0.032498,0.054370,-0.224140,0.500027,0.836501,0.660288,0.262218,-0.247659,0.045959,0.044393,-0.183006,0.707133,0.682988,0.848430,0.226070,-0.235764,0.039567,0.051564,0.000000,0.608789,0.793332,0.655270,0.225580,-0.235764,0.045959,0.045959,-0.000000,0.707133,0.707081,0.824181,0.189450,-0.249110,0.039567,0.049807,-0.205329,0.608790,0.766300,0.645808,0.225599,-0.247659,0.045959,0.044393,-0.183006,0.707133,0.682988,0.626460,0.188982,-0.235764,0.051564,0.039567,0.0,0.793375,0.608733,0.604000,0.165030,-0.246005,0.051564,0.038219,-0.157552,0.793375,0.587991,0.625970,0.189450,-0.235764,0.045959,0.045959,-0.000000,0.707133,0.707081,0.625970,0.189013,-0.246005,0.051564,0.038219,-0.157552,0.793375,0.587991,0.601725,0.164574,-0.235764,0.056288,0.032498,-0.000000,0.934410,0.356200,0.604000,0.165030,-0.244175,0.056288,0.031390,-0.092191,0.934410,0.344063,0.799310,0.164719,-0.235764,0.051564,0.039567,0.0,0.793375,0.608733,0.604000,0.164550,-0.244175,0.056288,0.031390,-0.092191,0.934410,0.344063,0.589794,0.127930,-0.235764,0.056288,0.032498,-0.000000,0.934410,0.356200,0.589350,0.128166,-0.242202,0.057362,0.024025,-0.020823,0.996758,0.077714,0.589350,0.128410,-0.235764,0.057362,0.024873,0.000000,0.996758,0.080456,0.584470,0.116210,-0.242202,0.057362,0.024025,-0.020823,0.996758,0.077714,0.582272,0.115957,-0.235764,0.057553,0.015836,0.0,0.958416,-0.285374,0.762982,0.116210,-0.239863,0.057553,0.015296,0.073860,0.958416,-0.275650,0.777537,0.116210,-0.235764,0.057362,0.024873,0.000000,0.996758,0.080456,0.577465,0.116210,-0.237960,0.044143,0.008195,0.243794,0.335759,-0.909852,0.743581,0.104000,-0.235764,0.055220,0.012432,0.0,0.610717,-0.791849,0.584618,0.104000,-0.235764,0.044143,0.008484,0.0,0.335759,-0.941948,0.740852,0.104000,-0.238982,0.055220,0.012009,0.204946,0.610717,-0.764867,0.584960,0.103833,-0.237960,0.044143,0.008195,-0.016928,0.997859,0.063175,0.740852,0.104000,-0.235764,0.044143,0.008484,0.0,0.997859,0.065403,0.777484,0.103510,-0.240006,-0.064439,0.007347,-0.065258,-0.991446,0.113031,0.374632,0.753410,-0.244175,-0.062781,0.014568,-0.129401,-0.965931,0.224128,0.374632,0.753410,-0.240006,-0.064439,0.007347,-0.065258,-0.991446,0.113031,0.338370,0.716300,-0.237960,-0.064439,0.008195,-0.033780,-0.991446,0.126069,0.135537,0.716790,-0.240118,-0.062781,0.016249,-0.066983,-0.965931,0.249983,0.340611,0.716790,-0.248200,-0.060048,0.021540,-0.191330,-0.923890,0.331393,0.340611,0.716790,-0.244175,-0.062781,0.014568,-0.129401,-0.965931,0.224128,0.313960,0.679680,-0.240118,-0.062781,0.016249,-0.066983,-0.965931,0.249983,0.116170,0.680170,-0.242202,-0.060048,0.024025,-0.099040,-0.923890,0.369620,0.321233,0.680170,-0.248200,-0.060048,0.021540,-0.191330,-0.923890,0.331393,0.118602,0.679859,-0.244175,-0.056288,0.031390,-0.129402,-0.866041,0.482936,0.316024,0.655760,-0.252013,-0.056288,0.028144,-0.249986,-0.866041,0.432989,0.321233,0.680170,-0.242202,-0.060048,0.024025,-0.099040,-0.923890,0.369620,0.093750,0.655445,-0.244175,-0.056288,0.031390,-0.129402,-0.866041,0.482936,0.076940,0.619140,-0.255547,-0.051564,0.034266,-0.304367,-0.793375,0.527178,0.316024,0.655760,-0.252013,-0.056288,0.028144,-0.249986,-0.866041,0.432989,0.279780,0.618650,-0.246005,-0.051564,0.038219,-0.157552,-0.793375,0.587991,0.282005,0.619140,-0.255547,-0.051564,0.034266,-0.304367,-0.793375,0.527178,0.255370,0.582030,-0.247659,-0.045959,0.044393,-0.183006,-0.707133,0.682988,0.255338,0.582520,-0.258743,-0.045959,0.039801,-0.353540,-0.707133,0.612350,0.282005,0.619140,-0.246005,-0.051564,0.038219,-0.157552,-0.793375,0.587991,0.057569,0.582520,-0.258743,-0.045959,0.039801,-0.353540,-0.707133,0.612350,0.262658,0.582030,-0.249110,-0.039567,0.049807,-0.205329,-0.608790,0.766300,0.262200,0.582350,-0.261546,-0.039567,0.044656,-0.396666,-0.608790,0.687045,0.262690,0.582350,-0.247659,-0.045959,0.044393,-0.183006,-0.707133,0.682988,0.035150,0.557780,-0.250332,-0.032498,0.054370,-0.224140,-0.500027,0.836501,0.223415,0.521480,-0.261546,-0.039567,0.044656,-0.396666,-0.608790,0.687045,0.221190,0.520990,-0.249110,-0.039567,0.049807,-0.205329,-0.608790,0.766300,0.018344,0.521480,-0.263908,-0.032498,0.048747,-0.433005,-0.500027,0.749986,0.257320,0.557931,-0.251306,-0.024873,0.058002,-0.239115,-0.382707,0.892390,0.194314,0.484860,-0.263908,-0.032498,0.048747,-0.433005,-0.500027,0.749986,0.194330,0.484419,-0.250332,-0.032498,0.054370,-0.224140,-0.500027,0.836501,0.001410,0.484860,-0.265788,-0.024873,0.052003,-0.461935,-0.382707,0.800095,0.223415,0.521480,-0.252013,-0.016822,0.060642,-0.249999,-0.258837,0.933008,0.203610,0.484692,-0.265788,-0.024873,0.052003,-0.461935,-0.382707,0.800095,0.204063,0.484370,-0.251306,-0.024873,0.058002,-0.239115,-0.382707,0.892390,0.975090,0.457686,-0.267154,-0.016822,0.054370,-0.482960,-0.258837,0.836512,0.204100,0.484692,-0.252442,-0.008484,0.062244,-0.256604,-0.130536,0.957661,0.162385,0.423820,-0.267154,-0.016822,0.054370,-0.482960,-0.258837,0.836512,0.162590,0.423340,-0.252013,-0.016822,0.060642,-0.249999,-0.258837,0.933008,0.965330,0.421059,-0.267984,-0.008484,0.055806,-0.495722,-0.130536,0.858615,0.198730,0.460275,-0.252586,0.000000,0.062781,-0.258819,0.0,0.965926,0.164550,0.423656,-0.267984,-0.008484,0.055806,-0.495722,-0.130536,0.858615,0.164829,0.423340,-0.252442,-0.008484,0.062244,-0.256604,-0.130536,0.957661,0.941356,0.384760,-0.268262,0.000000,0.056288,-0.500000,0.0,0.866025,0.164824,0.423820,-0.267984,0.008484,0.055806,-0.495722,0.130536,0.858615,0.145500,0.387032,-0.252586,0.000000,0.062781,-0.258819,0.0,0.965926,0.916500,0.360029,-0.252442,0.008484,0.062244,-0.256604,0.130536,0.957661,0.145020,0.387031,-0.268262,0.000000,0.056288,-0.500000,0.0,0.866025,0.145449,0.386710,-0.267154,0.016822,0.054370,-0.482961,0.258837,0.836512,0.140130,0.362622,-0.252442,0.008484,0.062244,-0.256604,0.130536,0.957661,0.906730,0.323409,-0.252013,0.016822,0.060642,-0.249999,0.258837,0.933008,0.106236,0.326170,-0.267984,0.008484,0.055806,-0.495722,0.130536,0.858615,0.938960,0.323240,-0.265788,0.024873,0.052003,-0.461935,0.382707,0.800095,0.106236,0.326170,-0.252013,0.016822,0.060642,-0.249999,0.258837,0.933008,0.882766,0.287100,-0.251306,0.024873,0.058002,-0.239115,0.382707,0.892390,0.945800,0.323730,-0.267154,0.016822,0.054370,-0.482961,0.258837,0.836512,0.907022,0.323409,-0.263908,0.032498,0.048747,-0.433005,0.500027,0.749986,0.086910,0.289381,-0.251306,0.024873,0.058002,-0.239115,0.382707,0.892390,0.857910,0.262370,-0.250332,0.032498,0.054370,-0.224140,0.500027,0.836501,0.086420,0.289377,-0.265788,0.024873,0.052003,-0.461935,0.382707,0.800095,0.086423,0.289060,-0.261546,0.039567,0.044656,-0.396666,0.608790,0.687045,0.081540,0.264961,-0.250332,0.032498,0.054370,-0.224140,0.500027,0.836501,0.848430,0.226070,-0.249110,0.039567,0.049807,-0.205329,0.608790,0.766300,0.047659,0.228510,-0.263908,0.032498,0.048747,-0.433005,0.500027,0.749986,0.858047,0.262369,-0.258743,0.045959,0.039801,-0.353540,0.707133,0.612350,0.047659,0.228510,-0.249110,0.039567,0.049807,-0.205329,0.608790,0.766300,0.824181,0.189450,-0.247659,0.045959,0.044393,-0.183006,0.707133,0.682988,0.879880,0.226070,-0.261546,0.039567,0.044656,-0.396666,0.608790,0.687045,0.848449,0.225750,-0.258743,0.045959,0.039801,-0.353540,0.707133,0.612350,0.027830,0.191400,-0.247659,0.045959,0.044393,-0.183006,0.707133,0.682988,0.799310,0.164719,-0.255547,0.051564,0.034266,-0.304367,0.793375,0.527178,0.028320,0.191720,-0.246005,0.051564,0.038219,-0.157552,0.793375,0.587991,0.027830,0.191710,-0.255547,0.051564,0.034266,-0.304367,0.793375,0.527178,0.799473,0.164717,-0.244175,0.056288,0.031390,-0.092191,0.934410,0.344063,0.013180,0.142586,-0.252013,0.056288,0.028144,-0.178100,0.934410,0.308479,0.023108,0.167480,-0.246005,0.051564,0.038219,-0.157552,0.793375,0.587991,0.826170,0.164550,-0.252013,0.056288,0.028144,-0.178100,0.934410,0.308479,0.787590,0.128063,-0.242202,0.057362,0.024025,-0.020823,0.996758,0.077714,0.787100,0.128410,-0.248200,0.057362,0.021540,-0.040228,0.996758,0.069677,0.787100,0.128410,-0.244175,0.056288,0.031390,-0.092191,0.934410,0.344063,0.787100,0.128044,-0.248200,0.057362,0.021540,-0.040228,0.996758,0.069677,0.997550,0.115720,-0.239863,0.057553,0.015296,0.073860,0.958416,-0.275650,0.997461,0.116210,-0.243682,0.057553,0.013714,0.142687,0.958416,-0.247141,0.985153,0.116210,-0.242202,0.057362,0.024025,-0.020823,0.996758,0.077714,0.762982,0.116210,-0.240006,0.044143,0.007347,0.470974,0.335759,-0.815751,0.997096,0.116210,-0.238982,0.055220,0.012009,0.204946,0.610717,-0.764867,0.770148,0.103510,-0.237960,0.044143,0.008195,0.243794,0.335759,-0.909852,0.975304,0.104000,-0.241980,0.055220,0.010767,0.395924,0.610717,-0.685761,0.743581,0.104000,-0.240006,0.044143,0.007347,-0.032702,0.997859,0.056641,0.975304,0.104000,-0.237960,0.044143,0.008195,-0.016928,0.997859,0.063175,0.584470,0.093750,-0.241763,-0.064439,0.005999,-0.092289,-0.991446,0.092289,0.572385,0.753410,-0.241763,-0.064439,0.005999,-0.092289,-0.991446,0.092289,0.536130,0.716300,-0.244175,-0.062781,0.014568,-0.129401,-0.965931,0.224128,0.543243,0.716790,-0.247659,-0.062781,0.011895,-0.183000,-0.965931,0.183000,0.572385,0.753410,-0.240006,-0.064439,0.007347,-0.065258,-0.991446,0.113031,0.340611,0.716790,-0.253352,-0.060048,0.017588,-0.270581,-0.923890,0.270581,0.543243,0.716790,-0.247659,-0.062781,0.011895,-0.183000,-0.965931,0.183000,0.516600,0.679680,-0.244175,-0.062781,0.014568,-0.129401,-0.965931,0.224128,0.321233,0.680170,-0.248200,-0.060048,0.021540,-0.191330,-0.923890,0.331393,0.518994,0.680170,-0.258743,-0.056288,0.022979,-0.353534,-0.866041,0.353534,0.518994,0.680170,-0.253352,-0.060048,0.017588,-0.270581,-0.923890,0.270581,0.321232,0.679996,-0.248200,-0.060048,0.021540,-0.191330,-0.923890,0.331393,0.316024,0.655760,-0.252013,-0.056288,0.028144,-0.249986,-0.866041,0.432989,0.513786,0.655760,-0.258743,-0.056288,0.022979,-0.353534,-0.866041,0.353534,0.477530,0.618650,-0.252013,-0.056288,0.028144,-0.249986,-0.866041,0.432989,0.282005,0.619140,-0.263742,-0.051564,0.027978,-0.430439,-0.793375,0.430439,0.513786,0.655760,-0.255547,-0.051564,0.034266,-0.304367,-0.793375,0.527178,0.477349,0.619140,-0.263742,-0.051564,0.027978,-0.430439,-0.793375,0.430439,0.484676,0.618650,-0.258743,-0.045959,0.039801,-0.353540,-0.707133,0.612350,0.484370,0.619117,-0.268262,-0.045959,0.032498,-0.499982,-0.707133,0.499982,0.484647,0.619140,-0.255547,-0.051564,0.034266,-0.304367,-0.793375,0.527178,0.255338,0.582520,-0.268262,-0.045959,0.032498,-0.499982,-0.707133,0.499982,0.460419,0.582030,-0.258743,-0.045959,0.039801,-0.353540,-0.707133,0.612350,0.257320,0.557931,-0.272226,-0.039567,0.036462,-0.560970,-0.608790,0.560970,0.460391,0.582520,-0.261546,-0.039567,0.044656,-0.396666,-0.608790,0.687045,0.459960,0.582500,-0.272226,-0.039567,0.036462,-0.560970,-0.608790,0.560970,0.418940,0.520990,-0.263908,-0.032498,0.048747,-0.433005,-0.500027,0.749986,0.418751,0.521480,-0.275565,-0.032498,0.039801,-0.612361,-0.500027,0.612361,0.455181,0.558100,-0.261546,-0.039567,0.044656,-0.396666,-0.608790,0.687045,0.223415,0.521480,-0.275565,-0.032498,0.039801,-0.612361,-0.500027,0.612361,0.426081,0.520990,-0.265788,-0.024873,0.052003,-0.461935,-0.382707,0.800095,0.425780,0.521463,-0.278224,-0.024873,0.042460,-0.653275,-0.382707,0.653275,0.426056,0.521480,-0.263908,-0.032498,0.048747,-0.433005,-0.500027,0.749986,0.194314,0.484860,-0.267154,-0.016822,0.054370,-0.482960,-0.258837,0.836512,0.401360,0.484845,-0.278224,-0.024873,0.042460,-0.653275,-0.382707,0.653275,0.401821,0.484370,-0.265788,-0.024873,0.052003,-0.461935,-0.382707,0.800095,0.198730,0.460275,-0.280157,-0.016822,0.044393,-0.683009,-0.258837,0.683009,0.401800,0.484860,-0.267984,-0.008484,0.055806,-0.495722,-0.130536,0.858615,0.367460,0.423820,-0.280157,-0.016822,0.044393,-0.683009,-0.258837,0.683009,0.367670,0.423340,-0.267154,-0.016822,0.054370,-0.482960,-0.258837,0.836512,0.162385,0.423820,-0.281330,-0.008484,0.045566,-0.701057,-0.130536,0.701057,0.396595,0.460440,-0.268262,0.000000,0.056288,-0.500000,0.0,0.866025,0.367180,0.423806,-0.281330,-0.008484,0.045566,-0.701057,-0.130536,0.701057,0.367617,0.423340,-0.267984,-0.008484,0.055806,-0.495722,-0.130536,0.858615,0.367180,0.423340,-0.281723,0.000000,0.045959,-0.707107,0.0,0.707107,0.367460,0.423820,-0.281330,0.008484,0.045566,-0.701057,0.130536,0.701057,0.343216,0.387200,-0.268262,0.000000,0.056288,-0.500000,0.0,0.866025,0.140130,0.362622,-0.267984,0.008484,0.055806,-0.495722,0.130536,0.858615,0.342770,0.387183,-0.281723,0.000000,0.045959,-0.707107,0.0,0.707107,0.343208,0.386710,-0.280157,0.016822,0.044393,-0.683009,0.258837,0.683009,0.338010,0.362790,-0.267984,0.008484,0.055806,-0.495722,0.130536,0.858615,0.106236,0.326170,-0.267154,0.016822,0.054370,-0.482961,0.258837,0.836512,0.308881,0.326170,-0.281330,0.008484,0.045566,-0.701057,0.130536,0.701057,0.309080,0.325680,-0.278224,0.024873,0.042460,-0.653274,0.382707,0.653275,0.308881,0.326170,-0.267154,0.016822,0.054370,-0.482961,0.258837,0.836512,0.308590,0.325680,-0.265788,0.024873,0.052003,-0.461935,0.382707,0.800095,0.308590,0.326145,-0.280157,0.016822,0.044393,-0.683009,0.258837,0.683009,0.308590,0.325680,-0.275565,0.032498,0.039801,-0.612361,0.500027,0.612361,0.284630,0.289550,-0.265788,0.024873,0.052003,-0.461935,0.382707,0.800095,0.081540,0.264961,-0.263908,0.032498,0.048747,-0.433005,0.500027,0.749986,0.284180,0.289520,-0.278224,0.024873,0.042460,-0.653274,0.382707,0.653275,0.284196,0.289060,-0.272226,0.039567,0.036462,-0.560970,0.608790,0.560970,0.279427,0.265130,-0.263908,0.032498,0.048747,-0.433005,0.500027,0.749986,0.047659,0.228510,-0.261546,0.039567,0.044656,-0.396666,0.608790,0.687045,0.250301,0.228510,-0.275565,0.032498,0.039801,-0.612361,0.500027,0.612361,0.081679,0.264961,-0.272226,0.039567,0.036462,-0.560970,0.608790,0.560970,0.047670,0.228340,-0.258743,0.045959,0.039801,-0.353540,0.707133,0.612350,0.083980,0.228510,-0.268262,0.045959,0.032498,-0.499982,0.707133,0.499982,0.250301,0.228510,-0.261546,0.039567,0.044656,-0.396666,0.608790,0.687045,0.083980,0.228020,-0.258743,0.045959,0.039801,-0.353540,0.707133,0.612350,0.023108,0.167480,-0.263742,0.051564,0.027978,-0.430439,0.793375,0.430439,0.226070,0.191870,-0.268262,0.045959,0.032498,-0.499982,0.707133,0.499982,0.225580,0.191400,-0.255547,0.051564,0.034266,-0.304367,0.793375,0.527178,0.225580,0.191818,-0.263742,0.051564,0.027978,-0.430439,0.793375,0.430439,0.023118,0.167308,-0.252013,0.056288,0.028144,-0.178100,0.934410,0.308479,0.189418,0.130850,-0.258743,0.056288,0.022979,-0.251872,0.934410,0.251872,0.220925,0.167480,-0.255547,0.051564,0.034266,-0.304367,0.793375,0.527178,0.013180,0.142586,-0.258743,0.056288,0.022979,-0.251872,0.934410,0.251872,0.992670,0.127946,-0.248200,0.057362,0.021540,-0.040228,0.996758,0.069677,0.992180,0.128410,-0.253352,0.057362,0.017588,-0.056891,0.996758,0.056891,0.992180,0.128410,-0.252013,0.056288,0.028144,-0.178100,0.934410,0.308479,0.985153,0.116210,-0.246962,0.057553,0.011198,0.201790,0.958416,-0.201790,0.181976,0.118650,-0.253352,0.057362,0.017588,-0.056891,0.996758,0.056891,0.181640,0.118160,-0.248200,0.057362,0.021540,-0.040228,0.996758,0.069677,0.001348,0.118650,-0.243682,0.057553,0.013714,0.142687,0.958416,-0.247141,0.181640,0.118457,-0.241763,0.044143,0.005999,0.666058,0.335759,-0.666058,0.193907,0.118650,-0.241980,0.055220,0.010767,0.395924,0.610717,-0.685761,0.975304,0.104000,-0.240006,0.044143,0.007347,0.470974,0.335759,-0.815751,0.201425,0.105950,-0.244555,0.055220,0.008791,0.559922,0.610717,-0.559922,0.997096,0.116210,-0.241763,0.044143,0.005999,-0.046247,0.997859,0.046247,0.201425,0.105950,-0.240006,0.044143,0.007347,-0.032702,0.997859,0.056641,0.977744,0.103587,-0.243111,-0.064439,0.004242,-0.113031,-0.991446,0.065258,0.777470,0.753410,-0.250332,-0.062781,0.008411,-0.224128,-0.965931,0.129401,0.777470,0.753410,-0.243111,-0.064439,0.004242,-0.113031,-0.991446,0.065258,0.760740,0.716300,-0.241763,-0.064439,0.005999,-0.092289,-0.991446,0.092289,0.543243,0.716790,-0.247659,-0.062781,0.011895,-0.183000,-0.965931,0.183000,0.760540,0.716790,-0.257304,-0.060048,0.012436,-0.331393,-0.923890,0.191330,0.760540,0.716790,-0.250332,-0.062781,0.008411,-0.224128,-0.965931,0.129401,0.741210,0.679680,-0.247659,-0.062781,0.011895,-0.183000,-0.965931,0.183000,0.518994,0.680170,-0.253352,-0.060048,0.017588,-0.270581,-0.923890,0.270581,0.741173,0.680170,-0.257304,-0.060048,0.012436,-0.331393,-0.923890,0.191330,0.667960,0.655270,-0.258743,-0.056288,0.022979,-0.353534,-0.866041,0.353534,0.718750,0.655387,-0.263908,-0.056288,0.016249,-0.432989,-0.866041,0.249986,0.741173,0.680170,-0.253352,-0.060048,0.017588,-0.270581,-0.923890,0.270581,0.513786,0.655760,-0.263908,-0.056288,0.016249,-0.432989,-0.866041,0.249986,0.702140,0.618650,-0.258743,-0.056288,0.022979,-0.353534,-0.866041,0.353534,0.477349,0.619140,-0.270030,-0.051564,0.019783,-0.527178,-0.793375,0.304367,0.718750,0.655387,-0.263742,-0.051564,0.027978,-0.430439,-0.793375,0.430439,0.701943,0.619140,-0.270030,-0.051564,0.019783,-0.527178,-0.793375,0.304367,0.682610,0.582030,-0.268262,-0.045959,0.032498,-0.499982,-0.707133,0.499982,0.682572,0.582520,-0.275565,-0.045959,0.022979,-0.612350,-0.707133,0.353540,0.701943,0.619140,-0.263742,-0.051564,0.027978,-0.430439,-0.793375,0.430439,0.682610,0.582030,-0.275565,-0.045959,0.022979,-0.612350,-0.707133,0.353540,0.609370,0.557610,-0.268262,-0.045959,0.032498,-0.499982,-0.707133,0.499982,0.455181,0.558100,-0.280420,-0.039567,0.025782,-0.687046,-0.608790,0.396666,0.682572,0.582520,-0.272226,-0.039567,0.036462,-0.560970,-0.608790,0.560970,0.660150,0.557744,-0.275565,-0.032498,0.039801,-0.612361,-0.500027,0.612361,0.643346,0.521480,-0.284511,-0.032498,0.028144,-0.749986,-0.500027,0.433005,0.660150,0.557744,-0.272226,-0.039567,0.036462,-0.560970,-0.608790,0.560970,0.418751,0.521480,-0.280420,-0.039567,0.025782,-0.687046,-0.608790,0.396666,0.643550,0.520990,-0.278224,-0.024873,0.042460,-0.653275,-0.382707,0.653275,0.623978,0.484860,-0.287767,-0.024873,0.030024,-0.800095,-0.382707,0.461935,0.643346,0.521480,-0.275565,-0.032498,0.039801,-0.612361,-0.500027,0.612361,0.624020,0.484370,-0.284511,-0.032498,0.028144,-0.749986,-0.500027,0.433005,0.624020,0.484370,-0.280157,-0.016822,0.044393,-0.683009,-0.258837,0.683009,0.601560,0.460096,-0.290134,-0.016822,0.031390,-0.836512,-0.258837,0.482961,0.623978,0.484860,-0.278224,-0.024873,0.042460,-0.653275,-0.382707,0.653275,0.396595,0.460440,-0.287767,-0.024873,0.030024,-0.800095,-0.382707,0.461935,0.401800,0.484845,-0.281330,-0.008484,0.045566,-0.701057,-0.130536,0.701057,0.584753,0.423820,-0.291570,-0.008484,0.032220,-0.858615,-0.130536,0.495722,0.601560,0.460096,-0.280157,-0.016822,0.044393,-0.683009,-0.258837,0.683009,0.584903,0.423340,-0.290134,-0.016822,0.031390,-0.836512,-0.258837,0.482961,0.584960,0.423340,-0.281723,0.000000,0.045959,-0.707107,0.0,0.707107,0.591790,0.423476,-0.292052,0.000000,0.032498,-0.866025,0.0,0.500000,0.592071,0.423340,-0.281330,-0.008484,0.045566,-0.701057,-0.130536,0.701057,0.591790,0.423340,-0.291570,-0.008484,0.032220,-0.858615,-0.130536,0.495722,0.592073,0.423340,-0.281330,0.008484,0.045566,-0.701057,0.130536,0.701057,0.567380,0.386850,-0.292052,0.000000,0.032498,-0.866025,0.0,0.500000,0.567818,0.386710,-0.281723,0.000000,0.045959,-0.707107,0.0,0.707107,0.338010,0.362790,-0.291570,0.008484,0.032220,-0.858615,0.130536,0.495722,0.567870,0.386850,-0.280157,0.016822,0.044393,-0.683009,0.258837,0.683009,0.347715,0.326170,-0.291570,0.008484,0.032220,-0.858615,0.130536,0.495722,0.338011,0.362775,-0.281330,0.008484,0.045566,-0.701057,0.130536,0.701057,0.345210,0.362300,-0.290134,0.016822,0.031390,-0.836512,0.258837,0.482961,0.542960,0.362439,-0.278224,0.024873,0.042460,-0.653274,0.382707,0.653275,0.347650,0.326170,-0.290134,0.016822,0.031390,-0.836512,0.258837,0.482961,0.308881,0.326155,-0.280157,0.016822,0.044393,-0.683009,0.258837,0.683009,0.347650,0.325680,-0.287767,0.024873,0.030024,-0.800095,0.382707,0.461935,0.347715,0.326170,-0.275565,0.032498,0.039801,-0.612361,0.500027,0.612361,0.508780,0.289203,-0.287767,0.024873,0.030024,-0.800095,0.382707,0.461935,0.508780,0.289060,-0.278224,0.024873,0.042460,-0.653274,0.382707,0.653275,0.279427,0.265130,-0.284511,0.032498,0.028144,-0.749986,0.500027,0.433005,0.509270,0.289198,-0.272226,0.039567,0.036462,-0.560970,0.608790,0.560970,0.474883,0.228510,-0.284511,0.032498,0.028144,-0.749986,0.500027,0.433005,0.279428,0.265113,-0.275565,0.032498,0.039801,-0.612361,0.500027,0.612361,0.250301,0.228510,-0.280420,0.039567,0.025782,-0.687046,0.608790,0.396666,0.484370,0.264776,-0.272226,0.039567,0.036462,-0.560970,0.608790,0.560970,0.281730,0.228020,-0.275565,0.045959,0.022979,-0.612350,0.707133,0.353540,0.474883,0.228510,-0.280420,0.039567,0.025782,-0.687046,0.608790,0.396666,0.250302,0.228491,-0.268262,0.045959,0.032498,-0.499982,0.707133,0.499982,0.281730,0.228510,-0.268262,0.045959,0.032498,-0.499982,0.707133,0.499982,0.220925,0.167480,-0.270030,0.051564,0.019783,-0.527178,0.793375,0.304367,0.423820,0.167480,-0.275565,0.045959,0.022979,-0.612350,0.707133,0.353540,0.423820,0.166990,-0.263742,0.051564,0.027978,-0.430439,0.793375,0.430439,0.423605,0.167480,-0.270030,0.051564,0.019783,-0.527178,0.793375,0.304367,0.220928,0.167432,-0.258743,0.056288,0.022979,-0.251872,0.934410,0.251872,0.413570,0.142627,-0.263908,0.056288,0.016249,-0.308479,0.934410,0.178100,0.423605,0.167480,-0.263742,0.051564,0.027978,-0.430439,0.793375,0.430439,0.189418,0.130850,-0.263908,0.056288,0.016249,-0.308479,0.934410,0.178100,0.413570,0.130370,-0.253352,0.057362,0.017588,-0.056891,0.996758,0.056891,0.413771,0.118650,-0.257304,0.057362,0.012436,-0.069677,0.996758,0.040228,0.414060,0.130414,-0.258743,0.056288,0.022979,-0.251872,0.934410,0.251872,0.413570,0.130370,-0.257304,0.057362,0.012436,-0.069677,0.996758,0.040228,0.181976,0.118594,-0.246962,0.057553,0.011198,0.201790,0.958416,-0.201790,0.469923,0.118650,-0.249479,0.057553,0.007918,0.247141,0.958416,-0.142687,0.413771,0.118650,-0.253352,0.057362,0.017588,-0.056891,0.996758,0.056891,0.194257,0.118650,-0.241763,0.044143,0.005999,0.666058,0.335759,-0.666058,0.516110,0.106193,-0.246531,0.055220,0.006216,0.685761,0.610717,-0.395924,0.193907,0.118650,-0.244555,0.055220,0.008791,0.559922,0.610717,-0.559922,0.201425,0.105950,-0.243111,0.044143,0.004242,0.815751,0.335759,-0.470974,0.487118,0.106440,-0.243111,0.044143,0.004242,-0.056641,0.997859,0.032702,0.519040,0.106149,-0.241763,0.044143,0.005999,-0.046247,0.997859,0.046247,0.518550,0.105950,-0.243111,-0.064439,0.004242,-0.113031,-0.991446,0.065258,0.775032,0.753410,-0.243959,-0.064439,0.002196,-0.126069,-0.991446,0.033780,0.972788,0.753410,-0.252013,-0.062781,0.004354,-0.249983,-0.965931,0.066983,0.972788,0.753410,-0.243959,-0.064439,0.002196,-0.126069,-0.991446,0.033780,0.963370,0.716300,-0.243111,-0.064439,0.004242,-0.113031,-0.991446,0.065258,0.760540,0.716790,-0.250332,-0.062781,0.008411,-0.224128,-0.965931,0.129401,0.963185,0.716790,-0.250332,-0.062781,0.008411,-0.224128,-0.965931,0.129401,0.741173,0.680170,-0.257304,-0.060048,0.012436,-0.331393,-0.923890,0.191330,0.946246,0.680170,-0.259789,-0.060048,0.006438,-0.369621,-0.923890,0.099040,0.963185,0.716790,-0.252013,-0.062781,0.004354,-0.249983,-0.965931,0.066983,0.938960,0.679680,-0.263908,-0.056288,0.016249,-0.432989,-0.866041,0.249986,0.743160,0.680170,-0.259789,-0.060048,0.006438,-0.369621,-0.923890,0.099040,0.743609,0.679680,-0.257304,-0.060048,0.012436,-0.331393,-0.923890,0.191330,0.667716,0.655760,-0.267154,-0.056288,0.008411,-0.482936,-0.866041,0.129402,0.938936,0.680170,-0.270030,-0.051564,0.019783,-0.527178,-0.793375,0.304367,0.907017,0.619140,-0.267154,-0.056288,0.008411,-0.482936,-0.866041,0.129402,0.904780,0.618650,-0.263908,-0.056288,0.016249,-0.432989,-0.866041,0.249986,0.701943,0.619140,-0.273983,-0.051564,0.010241,-0.587991,-0.793375,0.157552,0.941037,0.655760,-0.275565,-0.045959,0.022979,-0.612350,-0.707133,0.353540,0.887649,0.582520,-0.273983,-0.051564,0.010241,-0.587991,-0.793375,0.157552,0.880370,0.582114,-0.270030,-0.051564,0.019783,-0.527178,-0.793375,0.304367,0.682572,0.582520,-0.280157,-0.045959,0.011895,-0.682988,-0.707133,0.183006,0.907017,0.619140,-0.280420,-0.039567,0.025782,-0.687046,-0.608790,0.396666,0.684570,0.582520,-0.285571,-0.039567,0.013346,-0.766300,-0.608790,0.205329,0.880346,0.582520,-0.275565,-0.045959,0.022979,-0.612350,-0.707133,0.353540,0.609131,0.558100,-0.280157,-0.045959,0.011895,-0.682988,-0.707133,0.183006,0.685050,0.582160,-0.284511,-0.032498,0.028144,-0.749986,-0.500027,0.433005,0.848422,0.521480,-0.290134,-0.032498,0.014568,-0.836501,-0.500027,0.224140,0.882320,0.557898,-0.280420,-0.039567,0.025782,-0.687046,-0.608790,0.396666,0.643346,0.521480,-0.285571,-0.039567,0.013346,-0.766300,-0.608790,0.205329,0.846190,0.520990,-0.287767,-0.024873,0.030024,-0.800095,-0.382707,0.461935,0.829054,0.484860,-0.293766,-0.024873,0.015542,-0.892390,-0.382707,0.239115,0.848422,0.521480,-0.284511,-0.032498,0.028144,-0.749986,-0.500027,0.433005,0.623978,0.484860,-0.290134,-0.032498,0.014568,-0.836501,-0.500027,0.224140,0.819330,0.484527,-0.290134,-0.016822,0.031390,-0.836512,-0.258837,0.482961,0.625970,0.484860,-0.296406,-0.016822,0.016249,-0.933008,-0.258837,0.249999,0.819318,0.484860,-0.287767,-0.024873,0.030024,-0.800095,-0.382707,0.461935,0.625970,0.484508,-0.293766,-0.024873,0.015542,-0.892390,-0.382707,0.239115,0.626460,0.484507,-0.291570,-0.008484,0.032220,-0.858615,-0.130536,0.495722,0.789826,0.423820,-0.298008,-0.008484,0.016678,-0.957661,-0.130536,0.256604,0.823730,0.460249,-0.290134,-0.016822,0.031390,-0.836512,-0.258837,0.482961,0.584753,0.423820,-0.296406,-0.016822,0.016249,-0.933008,-0.258837,0.249999,0.787590,0.423340,-0.292052,0.000000,0.032498,-0.866025,0.0,0.500000,0.591790,0.423820,-0.298545,0.000000,0.016822,-0.965926,0.0,0.258819,0.787386,0.423820,-0.291570,-0.008484,0.032220,-0.858615,-0.130536,0.495722,0.591790,0.423476,-0.298008,-0.008484,0.016678,-0.957661,-0.130536,0.256604,0.592071,0.423340,-0.291570,0.008484,0.032220,-0.858615,0.130536,0.495722,0.567380,0.387200,-0.298545,0.000000,0.016822,-0.965926,0.0,0.258819,0.567870,0.386850,-0.292052,0.000000,0.032498,-0.866025,0.0,0.500000,0.567380,0.386850,-0.298008,0.008484,0.016678,-0.957661,0.130536,0.256605,0.567818,0.387200,-0.290134,0.016822,0.031390,-0.836512,0.258837,0.482961,0.533200,0.326170,-0.298008,0.008484,0.016678,-0.957661,0.130536,0.256605,0.533690,0.325819,-0.291570,0.008484,0.032220,-0.858615,0.130536,0.495722,0.533490,0.325680,-0.296406,0.016822,0.016249,-0.933008,0.258837,0.249999,0.533690,0.326170,-0.287767,0.024873,0.030024,-0.800095,0.382707,0.461935,0.533200,0.326170,-0.296406,0.016822,0.016249,-0.933008,0.258837,0.249999,0.533490,0.325680,-0.290134,0.016822,0.031390,-0.836512,0.258837,0.482961,0.533200,0.325823,-0.293766,0.024873,0.015542,-0.892390,0.382707,0.239115,0.533200,0.326170,-0.284511,0.032498,0.028144,-0.749986,0.500027,0.433005,0.511230,0.265130,-0.293766,0.024873,0.015542,-0.892390,0.382707,0.239115,0.509270,0.289198,-0.287767,0.024873,0.030024,-0.800095,0.382707,0.461935,0.508780,0.289203,-0.290134,0.032498,0.014568,-0.836501,0.500027,0.224140,0.508780,0.289550,-0.280420,0.039567,0.025782,-0.687046,0.608790,0.396666,0.672648,0.228510,-0.290134,0.032498,0.014568,-0.836501,0.500027,0.224140,0.484505,0.264776,-0.284511,0.032498,0.028144,-0.749986,0.500027,0.433005,0.474883,0.228510,-0.285571,0.039567,0.013346,-0.766300,0.608790,0.205329,0.706540,0.264932,-0.275565,0.045959,0.022979,-0.612350,0.707133,0.353540,0.653287,0.191890,-0.285571,0.039567,0.013346,-0.766300,0.608790,0.205329,0.474905,0.228153,-0.280420,0.039567,0.025782,-0.687046,0.608790,0.396666,0.484370,0.228020,-0.280157,0.045959,0.011895,-0.682988,0.707133,0.183006,0.672648,0.228510,-0.273983,0.051564,0.010241,-0.587991,0.793375,0.157552,0.450190,0.191890,-0.275565,0.045959,0.022979,-0.612350,0.707133,0.353540,0.423605,0.167480,-0.270030,0.051564,0.019783,-0.527178,0.793375,0.304367,0.452630,0.167480,-0.280157,0.045959,0.011895,-0.682988,0.707133,0.183006,0.450680,0.191530,-0.267154,0.056288,0.008411,-0.344063,0.934410,0.092191,0.648179,0.167480,-0.270030,0.051564,0.019783,-0.527178,0.793375,0.304367,0.413570,0.142627,-0.263908,0.056288,0.016249,-0.308479,0.934410,0.178100,0.616374,0.130850,-0.273983,0.051564,0.010241,-0.587991,0.793375,0.157552,0.426051,0.167121,-0.257304,0.057362,0.012436,-0.069677,0.996758,0.040228,0.614043,0.118650,-0.267154,0.056288,0.008411,-0.344063,0.934410,0.092191,0.414060,0.130414,-0.263908,0.056288,0.016249,-0.308479,0.934410,0.178100,0.413771,0.118650,-0.259789,0.057362,0.006438,-0.077714,0.996758,0.020823,0.616374,0.130850,-0.251061,0.057553,0.004099,0.275650,0.958416,-0.073860,0.614043,0.118650,-0.257304,0.057362,0.012436,-0.069677,0.996758,0.040228,0.469923,0.118650,-0.249479,0.057553,0.007918,0.247141,0.958416,-0.142687,0.633300,0.118295,-0.259789,0.057362,0.006438,-0.077714,0.996758,0.020823,0.413780,0.118565,-0.243111,0.044143,0.004242,0.815751,0.335759,-0.470974,0.638607,0.106440,-0.247773,0.055220,0.003218,0.764867,0.610717,-0.204946,0.487118,0.106440,-0.246531,0.055220,0.006216,0.685761,0.610717,-0.395924,0.516110,0.106193,-0.243959,0.044143,0.002196,0.909852,0.335759,-0.243794,0.640840,0.105950,-0.243959,0.044143,0.002196,-0.063175,0.997859,0.016928,0.638607,0.106440,-0.243111,0.044143,0.004242,-0.056641,0.997859,0.032702,0.516119,0.106149,-0.244248,-0.064439,0.000000,-0.130517,-0.991446,0.0,0.198872,0.755850,-0.252013,-0.062781,0.004354,-0.249983,-0.965931,0.066983,0.162414,0.719230,-0.244248,-0.064439,0.000000,-0.130517,-0.991446,0.0,0.162590,0.718750,-0.243959,-0.064439,0.002196,-0.126069,-0.991446,0.033780,0.963185,0.716790,-0.252586,-0.062781,0.000000,-0.258801,-0.965931,0.0,0.198872,0.755850,-0.259789,-0.060048,0.006438,-0.369621,-0.923890,0.099040,0.367670,0.682259,-0.252586,-0.062781,0.000000,-0.258801,-0.965931,0.0,0.169744,0.718750,-0.252013,-0.062781,0.004354,-0.249983,-0.965931,0.066983,0.946246,0.680170,-0.260637,-0.060048,0.000000,-0.382659,-0.923890,0.0,0.169733,0.719230,-0.267154,-0.056288,0.008411,-0.482936,-0.866041,0.129402,0.296813,0.657710,-0.260637,-0.060048,0.000000,-0.382659,-0.923890,0.0,0.145491,0.682120,-0.259789,-0.060048,0.006438,-0.369621,-0.923890,0.099040,0.941037,0.655760,-0.268262,-0.056288,0.000000,-0.499972,-0.866041,-0.000000,0.145500,0.682516,-0.273983,-0.051564,0.010241,-0.587991,-0.793375,0.157552,0.103830,0.621580,-0.275331,-0.051564,0.000000,-0.608733,-0.793375,-0.000000,0.140264,0.658200,-0.267154,-0.056288,0.008411,-0.482936,-0.866041,0.129402,0.907017,0.619140,-0.268262,-0.056288,0.000000,-0.499972,-0.866041,-0.000000,0.104000,0.621090,-0.280157,-0.045959,0.011895,-0.682988,-0.707133,0.183006,0.110840,0.621522,-0.275331,-0.051564,0.000000,-0.608733,-0.793375,-0.000000,0.111153,0.621090,-0.273983,-0.051564,0.010241,-0.587991,-0.793375,0.157552,0.887649,0.582520,-0.281723,-0.045959,0.000000,-0.707081,-0.707133,-0.000000,0.111128,0.621580,-0.285571,-0.039567,0.013346,-0.766300,-0.608790,0.205329,0.086420,0.584910,-0.287328,-0.039567,0.000000,-0.793332,-0.608790,0.000000,0.086910,0.584909,-0.280157,-0.045959,0.011895,-0.682988,-0.707133,0.183006,0.882320,0.557898,-0.281723,-0.045959,0.000000,-0.707081,-0.707133,-0.000000,0.086902,0.584470,-0.290134,-0.032498,0.014568,-0.836501,-0.500027,0.224140,0.045231,0.523920,-0.292052,-0.032498,0.000000,-0.866010,-0.500027,-0.000000,0.081664,0.560540,-0.285571,-0.039567,0.013346,-0.766300,-0.608790,0.205329,0.848422,0.521480,-0.287328,-0.039567,0.000000,-0.793332,-0.608790,0.000000,0.045410,0.523430,-0.293766,-0.024873,0.015542,-0.892390,-0.382707,0.239115,0.052240,0.523879,-0.295812,-0.024873,0.000000,-0.923870,-0.382707,0.0,0.052526,0.523920,-0.290134,-0.032498,0.014568,-0.836501,-0.500027,0.224140,0.829054,0.484860,-0.292052,-0.032498,0.000000,-0.866010,-0.500027,-0.000000,0.052551,0.523430,-0.296406,-0.016822,0.016249,-0.933008,-0.258837,0.249999,0.027830,0.487262,-0.298545,-0.016822,0.000000,-0.965921,-0.258837,0.000000,0.028278,0.487300,-0.293766,-0.024873,0.015542,-0.892390,-0.382707,0.239115,0.823730,0.460249,-0.295812,-0.024873,0.000000,-0.923870,-0.382707,0.0,0.028298,0.486810,-0.298008,-0.008484,0.016678,-0.957661,-0.130536,0.256604,0.992463,0.423820,-0.300203,-0.008484,0.000000,-0.991444,-0.130536,-0.000000,0.023060,0.462890,-0.296406,-0.016822,0.016249,-0.933008,-0.258837,0.249999,0.789826,0.423820,-0.298545,-0.016822,0.000000,-0.965921,-0.258837,0.000000,0.992670,0.423340,-0.298545,0.000000,0.016822,-0.965926,0.0,0.258819,0.992180,0.423785,-0.300760,0.000000,0.000000,-1.0,0.0,0.0,0.992463,0.423820,-0.298008,-0.008484,0.016678,-0.957661,-0.130536,0.256604,0.770457,0.387200,-0.300203,-0.008484,0.000000,-0.991444,-0.130536,-0.000000,0.992620,0.423340,-0.298008,0.008484,0.016678,-0.957661,0.130536,0.256605,0.967770,0.387162,-0.300760,0.000000,0.000000,-1.0,0.0,0.0,0.968208,0.386710,-0.298545,0.000000,0.016822,-0.965926,0.0,0.258819,0.765130,0.362596,-0.300203,0.008484,0.000000,-0.991444,0.130536,-0.000000,0.968216,0.387200,-0.296406,0.016822,0.016249,-0.933008,0.258837,0.249999,0.933875,0.326170,-0.300203,0.008484,0.000000,-0.991444,0.130536,-0.000000,0.934080,0.325680,-0.298008,0.008484,0.016678,-0.957661,0.130536,0.256605,0.731231,0.326170,-0.298545,0.016822,0.000000,-0.965921,0.258837,0.000000,0.963007,0.362790,-0.293766,0.024873,0.015542,-0.892390,0.382707,0.239115,0.933590,0.326122,-0.298545,0.016822,0.000000,-0.965921,0.258837,0.000000,0.933590,0.325680,-0.296406,0.016822,0.016249,-0.933008,0.258837,0.249999,0.711865,0.289550,-0.295812,0.024873,0.000000,-0.923870,0.382707,0.0,0.933875,0.326170,-0.290134,0.032498,0.014568,-0.836501,0.500027,0.224140,0.909180,0.289497,-0.295812,0.024873,0.000000,-0.923870,0.382707,0.0,0.909188,0.289060,-0.293766,0.024873,0.015542,-0.892390,0.382707,0.239115,0.706540,0.264932,-0.292052,0.032498,0.000000,-0.866010,0.500027,-0.000000,0.909622,0.289550,-0.285571,0.039567,0.013346,-0.766300,0.608790,0.205329,0.875286,0.228510,-0.292052,0.032498,0.000000,-0.866010,0.500027,-0.000000,0.706672,0.264931,-0.290134,0.032498,0.014568,-0.836501,0.500027,0.224140,0.672648,0.228510,-0.287328,0.039567,0.000000,-0.793332,0.608789,0.000000,0.904415,0.265130,-0.280157,0.045959,0.011895,-0.682988,0.707133,0.183006,0.708980,0.228510,-0.287328,0.039567,0.000000,-0.793332,0.608789,0.000000,0.672661,0.228307,-0.285571,0.039567,0.013346,-0.766300,0.608790,0.205329,0.653287,0.191890,-0.281723,0.045959,0.000000,-0.707081,0.707133,-0.000000,0.875286,0.228510,-0.275331,0.051564,0.000000,-0.608733,0.793375,-0.000000,0.851070,0.191839,-0.280157,0.045959,0.011895,-0.682988,0.707133,0.183006,0.648179,0.167480,-0.273983,0.051564,0.010241,-0.587991,0.793375,0.157552,0.853510,0.166995,-0.281723,0.045959,0.000000,-0.707081,0.707133,-0.000000,0.850580,0.191400,-0.268262,0.056288,0.000000,-0.356200,0.934410,-0.000000,0.846044,0.167480,-0.273983,0.051564,0.010241,-0.587991,0.793375,0.157552,0.616374,0.130850,-0.267154,0.056288,0.008411,-0.344063,0.934410,0.092191,0.811897,0.130850,-0.275331,0.051564,0.000000,-0.608733,0.793375,-0.000000,0.648197,0.167151,-0.259789,0.057362,0.006438,-0.077714,0.996758,0.020823,0.760653,0.118650,-0.268262,0.056288,0.000000,-0.356200,0.934410,-0.000000,0.616380,0.130698,-0.267154,0.056288,0.008411,-0.344063,0.934410,0.092191,0.614043,0.118650,-0.260637,0.057362,0.000000,-0.080456,0.996758,0.000000,0.811897,0.130850,-0.251600,0.057553,0.000000,0.285374,0.958416,0.0,0.760653,0.118650,-0.259789,0.057362,0.006438,-0.077714,0.996758,0.020823,0.633300,0.118295,-0.251061,0.057553,0.004099,0.275650,0.958416,-0.073860,0.719211,0.106440,-0.260637,0.057362,0.000000,-0.080456,0.996758,0.000000,0.614043,0.118619,-0.243959,0.044143,0.002196,0.909852,0.335759,-0.243794,0.684958,0.106440,-0.248196,0.055220,0.000000,0.791849,0.610717,0.0,0.640840,0.105950,-0.247773,0.055220,0.003218,0.764867,0.610717,-0.204946,0.638607,0.106440,-0.244248,0.044143,-0.000000,0.941948,0.335759,0.0,0.709136,0.106440,-0.244248,0.044143,-0.000000,-0.065403,0.997859,0.0,0.684958,0.106440,-0.243959,0.044143,0.002196,-0.063175,0.997859,0.016928,0.692380,0.105950,-0.243959,-0.064439,-0.002196,-0.126069,-0.991446,-0.033780,0.401515,0.755850,-0.244248,-0.064439,0.000000,-0.130517,-0.991446,0.0,0.162414,0.719230,-0.252586,-0.062781,0.000000,-0.258801,-0.965931,0.0,0.387023,0.719230,-0.252013,-0.062781,-0.004354,-0.249983,-0.965931,-0.066983,0.401515,0.755850,-0.243959,-0.064439,-0.002196,-0.126069,-0.991446,-0.033780,0.387200,0.718750,-0.260637,-0.060048,0.000000,-0.382659,-0.923890,0.0,0.369620,0.694393,-0.259789,-0.060048,-0.006438,-0.369620,-0.923890,-0.099040,0.387023,0.719230,-0.252586,-0.062781,0.000000,-0.258801,-0.965931,0.0,0.367670,0.682259,-0.252013,-0.062781,-0.004354,-0.249983,-0.965931,-0.066983,0.367670,0.682259,-0.268262,-0.056288,0.000000,-0.499972,-0.866041,-0.000000,0.345210,0.657797,-0.267154,-0.056288,-0.008411,-0.482936,-0.866041,-0.129402,0.369620,0.694393,-0.260637,-0.060048,0.000000,-0.382659,-0.923890,0.0,0.140264,0.658200,-0.259789,-0.060048,-0.006438,-0.369620,-0.923890,-0.099040,0.296870,0.657710,-0.275331,-0.051564,0.000000,-0.608733,-0.793375,-0.000000,0.328428,0.621580,-0.273983,-0.051564,-0.010241,-0.587991,-0.793375,-0.157552,0.345210,0.657797,-0.268262,-0.056288,0.000000,-0.499972,-0.866041,-0.000000,0.103830,0.621580,-0.267154,-0.056288,-0.008411,-0.482936,-0.866041,-0.129402,0.328610,0.621090,-0.281723,-0.045959,0.000000,-0.707081,-0.707133,-0.000000,0.309059,0.584960,-0.280157,-0.045959,-0.011895,-0.682988,-0.707133,-0.183006,0.328428,0.621580,-0.275331,-0.051564,0.000000,-0.608733,-0.793375,-0.000000,0.309080,0.584606,-0.273983,-0.051564,-0.010241,-0.587991,-0.793375,-0.157552,0.309080,0.584606,-0.287328,-0.039567,0.000000,-0.793332,-0.608790,0.000000,0.286620,0.560165,-0.280157,-0.045959,-0.011895,-0.682988,-0.707133,-0.183006,0.086874,0.584910,-0.281723,-0.045959,0.000000,-0.707081,-0.707133,-0.000000,0.081664,0.560540,-0.285571,-0.039567,-0.013346,-0.766300,-0.608790,-0.205329,0.309059,0.584960,-0.292052,-0.032498,0.000000,-0.866010,-0.500027,-0.000000,0.269828,0.523920,-0.285571,-0.039567,-0.013346,-0.766300,-0.608790,-0.205329,0.270020,0.523430,-0.287328,-0.039567,0.000000,-0.793332,-0.608790,0.000000,0.045231,0.523920,-0.290134,-0.032498,-0.014568,-0.836501,-0.500027,-0.224140,0.286620,0.560165,-0.295812,-0.024873,0.000000,-0.923870,-0.382707,0.0,0.252893,0.487300,-0.290134,-0.032498,-0.014568,-0.836501,-0.500027,-0.224140,0.223630,0.486999,-0.292052,-0.032498,0.000000,-0.866010,-0.500027,-0.000000,0.223630,0.486999,-0.293766,-0.024873,-0.015542,-0.892390,-0.382707,-0.239115,0.269828,0.523920,-0.298545,-0.016822,0.000000,-0.965921,-0.258837,0.000000,0.228020,0.462523,-0.293766,-0.024873,-0.015542,-0.892390,-0.382707,-0.239115,0.028278,0.487262,-0.295812,-0.024873,0.000000,-0.923870,-0.382707,0.0,0.023060,0.462890,-0.296406,-0.016822,-0.016249,-0.933008,-0.258837,-0.249999,0.252893,0.487300,-0.300203,-0.008484,0.000000,-0.991444,-0.130536,-0.000000,0.211216,0.426270,-0.296406,-0.016822,-0.016249,-0.933008,-0.258837,-0.249999,0.211420,0.425780,-0.298545,-0.016822,0.000000,-0.965921,-0.258837,0.000000,0.211366,0.425780,-0.298008,-0.008484,-0.016678,-0.957661,-0.130536,-0.256605,0.228020,0.462523,-0.300760,0.000000,0.000000,-1.0,0.0,0.0,0.218260,0.425903,-0.298008,-0.008484,-0.016678,-0.957661,-0.130536,-0.256605,0.218546,0.425780,-0.300203,-0.008484,0.000000,-0.991444,-0.130536,-0.000000,0.218260,0.425780,-0.298545,0.000000,-0.016822,-0.965926,0.0,-0.258819,0.218544,0.425780,-0.298008,0.008484,-0.016678,-0.957661,0.130536,-0.256605,0.194330,0.389282,-0.300760,0.000000,0.000000,-1.0,0.0,0.0,0.963007,0.362790,-0.300203,0.008484,0.000000,-0.991444,0.130536,-0.000000,0.193840,0.389283,-0.298545,0.000000,-0.016822,-0.965926,0.0,-0.258819,0.194278,0.389160,-0.298545,0.016822,0.000000,-0.965921,0.258837,0.000000,0.160150,0.328243,-0.296406,0.016822,-0.016249,-0.933008,0.258837,-0.249999,0.169430,0.364865,-0.300203,0.008484,0.000000,-0.991444,0.130536,-0.000000,0.970210,0.362300,-0.298008,0.008484,-0.016678,-0.957661,0.130536,-0.256605,0.963008,0.362753,-0.295812,0.024873,0.000000,-0.923870,0.382707,0.0,0.972650,0.326170,-0.293766,0.024873,-0.015542,-0.892390,0.382707,-0.239115,0.160150,0.328243,-0.298545,0.016822,0.000000,-0.965921,0.258837,0.000000,0.972650,0.325680,-0.296406,0.016822,-0.016249,-0.933008,0.258837,-0.249999,0.933875,0.326133,-0.290134,0.032498,-0.014568,-0.836501,0.500027,-0.224140,0.057610,0.267528,-0.295812,0.024873,0.000000,-0.923870,0.382707,0.0,0.904415,0.265130,-0.292052,0.032498,0.000000,-0.866010,0.500027,-0.000000,0.110840,0.267206,-0.293766,0.024873,-0.015542,-0.892390,0.382707,-0.239115,0.057610,0.267090,-0.285571,0.039567,-0.013346,-0.766300,0.608790,-0.205329,0.110840,0.267206,-0.292052,0.032498,0.000000,-0.866010,0.500027,-0.000000,0.875286,0.228510,-0.287328,0.039567,0.000000,-0.793332,0.608789,0.000000,0.101070,0.230574,-0.290134,0.032498,-0.014568,-0.836501,0.500027,-0.224140,0.904418,0.265088,-0.281723,0.045959,0.000000,-0.707081,0.707133,-0.000000,0.906730,0.228510,-0.280157,0.045959,-0.011895,-0.682988,0.707133,-0.183006,0.101070,0.230574,-0.287328,0.039567,0.000000,-0.793332,0.608789,0.000000,0.906730,0.228020,-0.285571,0.039567,-0.013346,-0.766300,0.608790,-0.205329,0.875289,0.228464,-0.273983,0.051564,-0.010241,-0.587991,0.793375,-0.157552,0.077108,0.193949,-0.281723,0.045959,0.000000,-0.707081,0.707133,-0.000000,0.846044,0.167480,-0.275331,0.051564,0.000000,-0.608733,0.793375,-0.000000,0.052484,0.169920,-0.280157,0.045959,-0.011895,-0.682988,0.707133,-0.183006,0.851044,0.191839,-0.268262,0.056288,0.000000,-0.356200,0.934410,-0.000000,0.884760,0.167480,-0.273983,0.051564,-0.010241,-0.587991,0.793375,-0.157552,0.853364,0.166994,-0.275331,0.051564,0.000000,-0.608733,0.793375,-0.000000,0.811897,0.130850,-0.267154,0.056288,-0.008411,-0.344063,0.934410,-0.092191,0.052484,0.169920,-0.260637,0.057362,0.000000,-0.080456,0.996758,0.000000,0.040250,0.121090,-0.267154,0.056288,-0.008411,-0.344063,0.934410,-0.092191,0.040030,0.132810,-0.268262,0.056288,0.000000,-0.356200,0.934410,-0.000000,0.760653,0.118650,-0.259789,0.057362,-0.006438,-0.077714,0.996758,-0.020823,0.040520,0.133289,-0.251600,0.057553,0.000000,0.285374,0.958416,0.0,0.025663,0.121090,-0.259789,0.057362,-0.006438,-0.077714,0.996758,-0.020823,0.763106,0.118388,-0.260637,0.057362,0.000000,-0.080456,0.996758,0.000000,0.719211,0.106440,-0.251061,0.057553,-0.004099,0.275650,0.958416,0.073860,0.040250,0.121090,-0.248196,0.055220,0.000000,0.791849,0.610717,0.0,0.684958,0.106440,-0.244248,0.044143,-0.000000,0.941948,0.335759,0.0,0.025526,0.108880,-0.243959,0.044143,-0.002196,0.909852,0.335759,0.243794,0.025782,0.108880,-0.247773,0.055220,-0.003218,0.764867,0.610717,0.204946,0.709136,0.106440,-0.243959,0.044143,-0.002196,-0.063175,0.997859,-0.016928,0.025526,0.108880,-0.244248,0.044143,-0.000000,-0.065403,0.997859,0.0,0.933981,0.105950,-0.243111,-0.064439,-0.004242,-0.113031,-0.991446,-0.065258,0.599282,0.755850,-0.252013,-0.062781,-0.004354,-0.249983,-0.965931,-0.066983,0.592113,0.719230,-0.243111,-0.064439,-0.004242,-0.113031,-0.991446,-0.065258,0.401515,0.755728,-0.243959,-0.064439,-0.002196,-0.126069,-0.991446,-0.033780,0.387023,0.719230,-0.250332,-0.062781,-0.008411,-0.224128,-0.965931,-0.129401,0.599282,0.755850,-0.257304,-0.060048,-0.012436,-0.331393,-0.923890,-0.191330,0.592113,0.719230,-0.252013,-0.062781,-0.004354,-0.249983,-0.965931,-0.066983,0.369620,0.694393,-0.259789,-0.060048,-0.006438,-0.369620,-0.923890,-0.099040,0.586910,0.694555,-0.250332,-0.062781,-0.008411,-0.224128,-0.965931,-0.129401,0.394353,0.718764,-0.263908,-0.056288,-0.016249,-0.432989,-0.866041,-0.249986,0.586910,0.694555,-0.259789,-0.060048,-0.006438,-0.369620,-0.923890,-0.099040,0.345210,0.657797,-0.267154,-0.056288,-0.008411,-0.482936,-0.866041,-0.129402,0.567532,0.658200,-0.257304,-0.060048,-0.012436,-0.331393,-0.923890,-0.191330,0.370092,0.682183,-0.273983,-0.051564,-0.010241,-0.587991,-0.793375,-0.157552,0.533510,0.621580,-0.263908,-0.056288,-0.016249,-0.432989,-0.866041,-0.249986,0.531250,0.621090,-0.267154,-0.056288,-0.008411,-0.482936,-0.866041,-0.129402,0.328428,0.621580,-0.270030,-0.051564,-0.019783,-0.527178,-0.793375,-0.304367,0.567532,0.658200,-0.280157,-0.045959,-0.011895,-0.682988,-0.707133,-0.183006,0.335440,0.621580,-0.270030,-0.051564,-0.019783,-0.527178,-0.793375,-0.304367,0.335742,0.621090,-0.273983,-0.051564,-0.010241,-0.587991,-0.793375,-0.157552,0.309059,0.584960,-0.275565,-0.045959,-0.022979,-0.612350,-0.707133,-0.353540,0.531086,0.621580,-0.285571,-0.039567,-0.013346,-0.766300,-0.608790,-0.205329,0.311030,0.584960,-0.275565,-0.045959,-0.022979,-0.612350,-0.707133,-0.353540,0.311520,0.584579,-0.280157,-0.045959,-0.011895,-0.682988,-0.707133,-0.183006,0.311030,0.584579,-0.280420,-0.039567,-0.025782,-0.687046,-0.608790,-0.396666,0.311516,0.584960,-0.290134,-0.032498,-0.014568,-0.836501,-0.500027,-0.224140,0.474896,0.523920,-0.280420,-0.039567,-0.025782,-0.687046,-0.608790,-0.396666,0.472650,0.523430,-0.285571,-0.039567,-0.013346,-0.766300,-0.608790,-0.205329,0.269828,0.523920,-0.284511,-0.032498,-0.028144,-0.749986,-0.500027,-0.433005,0.508780,0.560328,-0.293766,-0.024873,-0.015542,-0.892390,-0.382707,-0.239115,0.281747,0.499510,-0.284511,-0.032498,-0.028144,-0.749986,-0.500027,-0.433005,0.277142,0.523430,-0.290134,-0.032498,-0.014568,-0.836501,-0.500027,-0.224140,0.223618,0.487300,-0.287767,-0.024873,-0.030024,-0.800095,-0.382707,-0.461935,0.472472,0.523920,-0.296406,-0.016822,-0.016249,-0.933008,-0.258837,-0.249999,0.450190,0.462687,-0.287767,-0.024873,-0.030024,-0.800095,-0.382707,-0.461935,0.252892,0.486931,-0.293766,-0.024873,-0.015542,-0.892390,-0.382707,-0.239115,0.228020,0.462523,-0.290134,-0.016822,-0.031390,-0.836512,-0.258837,-0.482961,0.455526,0.487300,-0.298008,-0.008484,-0.016678,-0.957661,-0.130536,-0.256605,0.416295,0.426270,-0.290134,-0.016822,-0.031390,-0.836512,-0.258837,-0.482961,0.414060,0.425780,-0.296406,-0.016822,-0.016249,-0.933008,-0.258837,-0.249999,0.211216,0.426270,-0.291570,-0.008484,-0.032220,-0.858615,-0.130536,-0.495722,0.450190,0.462687,-0.298545,0.000000,-0.016822,-0.965926,0.0,-0.258819,0.218260,0.426270,-0.291570,-0.008484,-0.032220,-0.858615,-0.130536,-0.495722,0.218544,0.425780,-0.298008,-0.008484,-0.016678,-0.957661,-0.130536,-0.256605,0.218260,0.425903,-0.292052,0.000000,-0.032498,-0.866025,0.0,-0.500000,0.413860,0.426270,-0.298008,0.008484,-0.016678,-0.957661,0.130536,-0.256605,0.193840,0.389640,-0.291570,0.008484,-0.032220,-0.858615,0.130536,-0.495722,0.194278,0.389640,-0.298545,0.000000,-0.016822,-0.965926,0.0,-0.258819,0.193840,0.389283,-0.292052,0.000000,-0.032498,-0.866025,0.0,-0.500000,0.194330,0.389282,-0.296406,0.016822,-0.016249,-0.933008,0.258837,-0.249999,0.357693,0.328610,-0.290134,0.016822,-0.031390,-0.836512,0.258837,-0.482961,0.391600,0.365027,-0.298008,0.008484,-0.016678,-0.957661,0.130536,-0.256605,0.160150,0.328243,-0.291570,0.008484,-0.032220,-0.858615,0.130536,-0.495722,0.169549,0.364865,-0.293766,0.024873,-0.015542,-0.892390,0.382707,-0.239115,0.338315,0.291990,-0.287767,0.024873,-0.030024,-0.800095,0.382707,-0.461935,0.357693,0.328610,-0.296406,0.016822,-0.016249,-0.933008,0.258837,-0.249999,0.191400,0.328120,-0.290134,0.016822,-0.031390,-0.836512,0.258837,-0.482961,0.159943,0.328243,-0.290134,0.032498,-0.014568,-0.836501,0.500027,-0.224140,0.137690,0.267570,-0.284511,0.032498,-0.028144,-0.749986,0.500027,-0.433005,0.135250,0.291990,-0.293766,0.024873,-0.015542,-0.892390,0.382707,-0.239115,0.057610,0.267528,-0.287767,0.024873,-0.030024,-0.800095,0.382707,-0.461935,0.135740,0.291622,-0.285571,0.039567,-0.013346,-0.766300,0.608790,-0.205329,0.299090,0.230950,-0.280420,0.039567,-0.025782,-0.687046,0.608790,-0.396666,0.333000,0.267366,-0.290134,0.032498,-0.014568,-0.836501,0.500027,-0.224140,0.101070,0.230574,-0.284511,0.032498,-0.028144,-0.749986,0.500027,-0.433005,0.110961,0.267205,-0.280157,0.045959,-0.011895,-0.682988,0.707133,-0.183006,0.279726,0.194330,-0.275565,0.045959,-0.022979,-0.612350,0.707133,-0.353540,0.299090,0.230950,-0.285571,0.039567,-0.013346,-0.766300,0.608790,-0.205329,0.110840,0.230460,-0.280420,0.039567,-0.025782,-0.687046,0.608790,-0.396666,0.101359,0.230574,-0.273983,0.051564,-0.010241,-0.587991,0.793375,-0.157552,0.079100,0.169920,-0.270030,0.051564,-0.019783,-0.527178,0.793375,-0.304367,0.076660,0.194330,-0.280157,0.045959,-0.011895,-0.682988,0.707133,-0.183006,0.076660,0.193986,-0.275565,0.045959,-0.022979,-0.612350,0.707133,-0.353540,0.077140,0.193949,-0.270030,0.051564,-0.019783,-0.527178,0.793375,-0.304367,0.052510,0.169561,-0.267154,0.056288,-0.008411,-0.344063,0.934410,-0.092191,0.079100,0.169920,-0.263908,0.056288,-0.016249,-0.308479,0.934410,-0.178100,0.274543,0.169920,-0.273983,0.051564,-0.010241,-0.587991,0.793375,-0.157552,0.079100,0.169430,-0.263908,0.056288,-0.016249,-0.308479,0.934410,-0.178100,0.040518,0.133289,-0.259789,0.057362,-0.006438,-0.077714,0.996758,-0.020823,0.225838,0.121090,-0.257304,0.057362,-0.012436,-0.069677,0.996758,-0.040228,0.243158,0.132986,-0.267154,0.056288,-0.008411,-0.344063,0.934410,-0.092191,0.040250,0.121090,-0.257304,0.057362,-0.012436,-0.069677,0.996758,-0.040228,0.040252,0.120631,-0.251061,0.057553,-0.004099,0.275650,0.958416,0.073860,0.181967,0.121090,-0.249479,0.057553,-0.007918,0.247141,0.958416,0.142687,0.225838,0.121090,-0.259789,0.057362,-0.006438,-0.077714,0.996758,-0.020823,0.025663,0.121090,-0.247773,0.055220,-0.003218,0.764867,0.610717,0.204946,0.025526,0.108880,-0.243959,0.044143,-0.002196,0.909852,0.335759,0.243794,0.152494,0.108390,-0.243111,0.044143,-0.004242,0.815751,0.335759,0.470974,0.152784,0.108880,-0.246531,0.055220,-0.006216,0.685761,0.610717,0.395924,0.025782,0.108880,-0.243111,0.044143,-0.004242,-0.056641,0.997859,-0.032702,0.152494,0.108390,-0.243959,0.044143,-0.002196,-0.063175,0.997859,-0.016928,0.138156,0.108390,-0.241763,-0.064439,-0.005999,-0.092289,-0.991446,-0.092289,0.823901,0.755850,-0.250332,-0.062781,-0.008411,-0.224128,-0.965931,-0.129401,0.794762,0.719230,-0.241763,-0.064439,-0.005999,-0.092289,-0.991446,-0.092289,0.787590,0.718750,-0.243111,-0.064439,-0.004242,-0.113031,-0.991446,-0.065258,0.592113,0.719230,-0.247659,-0.062781,-0.011895,-0.183000,-0.965931,-0.183000,0.823901,0.755850,-0.257304,-0.060048,-0.012436,-0.331393,-0.923890,-0.191330,0.789550,0.694726,-0.247659,-0.062781,-0.011895,-0.183000,-0.965931,-0.183000,0.790030,0.694330,-0.250332,-0.062781,-0.008411,-0.224128,-0.965931,-0.129401,0.586910,0.694555,-0.253352,-0.060048,-0.017588,-0.270581,-0.923890,-0.270581,0.794762,0.719230,-0.263908,-0.056288,-0.016249,-0.432989,-0.866041,-0.249986,0.765290,0.658200,-0.253352,-0.060048,-0.017588,-0.270581,-0.923890,-0.270581,0.572741,0.682345,-0.257304,-0.060048,-0.012436,-0.331393,-0.923890,-0.191330,0.567532,0.658200,-0.258743,-0.056288,-0.022979,-0.353534,-0.866041,-0.353534,0.789551,0.694726,-0.263742,-0.051564,-0.027978,-0.430439,-0.793375,-0.430439,0.765290,0.658200,-0.263908,-0.056288,-0.016249,-0.432989,-0.866041,-0.249986,0.533510,0.621580,-0.270030,-0.051564,-0.019783,-0.527178,-0.793375,-0.304367,0.736151,0.621580,-0.258743,-0.056288,-0.022979,-0.353534,-0.866041,-0.353534,0.729000,0.621090,-0.275565,-0.045959,-0.022979,-0.612350,-0.707133,-0.353540,0.730950,0.597110,-0.263742,-0.051564,-0.027978,-0.430439,-0.793375,-0.430439,0.731440,0.596680,-0.270030,-0.051564,-0.019783,-0.527178,-0.793375,-0.304367,0.514139,0.584960,-0.268262,-0.045959,-0.032498,-0.499982,-0.707133,-0.499982,0.736151,0.621580,-0.272226,-0.039567,-0.036462,-0.560970,-0.608790,-0.560970,0.730950,0.597110,-0.275565,-0.045959,-0.022979,-0.612350,-0.707133,-0.353540,0.508780,0.560328,-0.280420,-0.039567,-0.025782,-0.687046,-0.608790,-0.396666,0.706683,0.560540,-0.268262,-0.045959,-0.032498,-0.499982,-0.707133,-0.499982,0.514139,0.584742,-0.284511,-0.032498,-0.028144,-0.749986,-0.500027,-0.433005,0.677541,0.523920,-0.272226,-0.039567,-0.036462,-0.560970,-0.608790,-0.560970,0.670410,0.523430,-0.280420,-0.039567,-0.025782,-0.687046,-0.608790,-0.396666,0.474896,0.523920,-0.275565,-0.032498,-0.039801,-0.612361,-0.500027,-0.612361,0.706683,0.560540,-0.287767,-0.024873,-0.030024,-0.800095,-0.382707,-0.461935,0.650859,0.487300,-0.275565,-0.032498,-0.039801,-0.612361,-0.500027,-0.612361,0.650870,0.487028,-0.284511,-0.032498,-0.028144,-0.749986,-0.500027,-0.433005,0.455526,0.487300,-0.278224,-0.024873,-0.042460,-0.653274,-0.382707,-0.653275,0.677541,0.523920,-0.290134,-0.016822,-0.031390,-0.836512,-0.258837,-0.482961,0.652830,0.487262,-0.278224,-0.024873,-0.042460,-0.653274,-0.382707,-0.653275,0.653309,0.486810,-0.287767,-0.024873,-0.030024,-0.800095,-0.382707,-0.461935,0.450190,0.462687,-0.280157,-0.016822,-0.044393,-0.683009,-0.258837,-0.683009,0.653320,0.487262,-0.291570,-0.008484,-0.032220,-0.858615,-0.130536,-0.495722,0.618936,0.426270,-0.280157,-0.016822,-0.044393,-0.683009,-0.258837,-0.683009,0.619140,0.425780,-0.290134,-0.016822,-0.031390,-0.836512,-0.258837,-0.482961,0.416295,0.426270,-0.281330,-0.008484,-0.045566,-0.701057,-0.130536,-0.701057,0.648068,0.462890,-0.292052,0.000000,-0.032498,-0.866025,0.0,-0.500000,0.618650,0.426233,-0.281330,-0.008484,-0.045566,-0.701057,-0.130536,-0.701057,0.619094,0.425780,-0.291570,-0.008484,-0.032220,-0.858615,-0.130536,-0.495722,0.396926,0.389640,-0.281723,0.000000,-0.045959,-0.707107,0.0,-0.707107,0.618936,0.426270,-0.291570,0.008484,-0.032220,-0.858615,0.130536,-0.495722,0.594230,0.389602,-0.281330,0.008484,-0.045566,-0.701057,0.130536,-0.701057,0.594676,0.389640,-0.292052,0.000000,-0.032498,-0.866025,0.0,-0.500000,0.391600,0.365027,-0.281723,0.000000,-0.045959,-0.707107,0.0,-0.707107,0.594669,0.389160,-0.290134,0.016822,-0.031390,-0.836512,0.258837,-0.482961,0.560328,0.328610,-0.280157,0.016822,-0.044393,-0.683009,0.258837,-0.683009,0.589466,0.365230,-0.291570,0.008484,-0.032220,-0.858615,0.130536,-0.495722,0.357693,0.328610,-0.281330,0.008484,-0.045566,-0.701057,0.130536,-0.701057,0.560540,0.328120,-0.287767,0.024873,-0.030024,-0.800095,0.382707,-0.461935,0.560050,0.328562,-0.278224,0.024873,-0.042460,-0.653274,0.382707,-0.653275,0.560328,0.328610,-0.290134,0.016822,-0.031390,-0.836512,0.258837,-0.482961,0.338315,0.291990,-0.280157,0.016822,-0.044393,-0.683009,0.258837,-0.683009,0.560050,0.328120,-0.284511,0.032498,-0.028144,-0.749986,0.500027,-0.433005,0.535640,0.291937,-0.275565,0.032498,-0.039801,-0.612361,0.500027,-0.612361,0.536080,0.291990,-0.287767,0.024873,-0.030024,-0.800095,0.382707,-0.461935,0.333000,0.267366,-0.278224,0.024873,-0.042460,-0.653274,0.382707,-0.653275,0.535640,0.291500,-0.280420,0.039567,-0.025782,-0.687046,0.608790,-0.396666,0.501734,0.230950,-0.272226,0.039567,-0.036462,-0.560970,0.608790,-0.560970,0.530870,0.267570,-0.284511,0.032498,-0.028144,-0.749986,0.500027,-0.433005,0.299090,0.230950,-0.275565,0.032498,-0.039801,-0.612361,0.500027,-0.612361,0.333118,0.267366,-0.272226,0.039567,-0.036462,-0.560970,0.608790,-0.560970,0.299103,0.230737,-0.275565,0.045959,-0.022979,-0.612350,0.707133,-0.353540,0.328120,0.230950,-0.268262,0.045959,-0.032498,-0.499982,0.707133,-0.499982,0.501734,0.230950,-0.280420,0.039567,-0.025782,-0.687046,0.608790,-0.396666,0.279726,0.194330,-0.268262,0.045959,-0.032498,-0.499982,0.707133,-0.499982,0.477050,0.193840,-0.275565,0.045959,-0.022979,-0.612350,0.707133,-0.353540,0.274543,0.169920,-0.263742,0.051564,-0.027978,-0.430439,0.793375,-0.430439,0.477484,0.194330,-0.270030,0.051564,-0.019783,-0.527178,0.793375,-0.304367,0.477050,0.194265,-0.263742,0.051564,-0.027978,-0.430439,0.793375,-0.430439,0.274558,0.169692,-0.263908,0.056288,-0.016249,-0.308479,0.934410,-0.178100,0.462400,0.145036,-0.258743,0.056288,-0.022979,-0.251872,0.934410,-0.251872,0.472322,0.169920,-0.270030,0.051564,-0.019783,-0.527178,0.793375,-0.304367,0.276850,0.169430,-0.258743,0.056288,-0.022979,-0.251872,0.934410,-0.251872,0.243160,0.132986,-0.257304,0.057362,-0.012436,-0.069677,0.996758,-0.040228,0.428710,0.121022,-0.253352,0.057362,-0.017588,-0.056891,0.996758,-0.056891,0.242670,0.133300,-0.263908,0.056288,-0.016249,-0.308479,0.934410,-0.178100,0.242670,0.132873,-0.246962,0.057553,-0.011198,0.201790,0.958416,0.201790,0.433512,0.121090,-0.253352,0.057362,-0.017588,-0.056891,0.996758,-0.056891,0.428220,0.120600,-0.257304,0.057362,-0.012436,-0.069677,0.996758,-0.040228,0.181967,0.121090,-0.249479,0.057553,-0.007918,0.247141,0.958416,0.142687,0.409137,0.121090,-0.241763,0.044143,-0.005999,0.666058,0.335759,0.666058,0.406288,0.121090,-0.244555,0.055220,-0.008791,0.559922,0.610717,0.559922,0.152784,0.108880,-0.246531,0.055220,-0.006216,0.685761,0.610717,0.395924,0.152494,0.108390,-0.243111,0.044143,-0.004242,0.815751,0.335759,0.470974,0.377147,0.108880,-0.241763,0.044143,-0.005999,-0.046247,0.997859,-0.046247,0.377147,0.108880,-0.243111,0.044143,-0.004242,-0.056641,0.997859,-0.032702,0.350348,0.108390,-0.240006,-0.064439,-0.007347,-0.065258,-0.991446,-0.113031,0.028013,0.758300,-0.240006,-0.064439,-0.007347,-0.065258,-0.991446,-0.113031,0.013670,0.721190,-0.247659,-0.062781,-0.011895,-0.183000,-0.965931,-0.183000,0.013522,0.721680,-0.244175,-0.062781,-0.014568,-0.129401,-0.965931,-0.224128,0.028013,0.758300,-0.241763,-0.064439,-0.005999,-0.092289,-0.991446,-0.092289,0.794762,0.719230,-0.248200,-0.060048,-0.021540,-0.191330,-0.923890,-0.331393,0.013522,0.721680,-0.244175,-0.062781,-0.014568,-0.129401,-0.965931,-0.224128,0.790030,0.694649,-0.247659,-0.062781,-0.011895,-0.183000,-0.965931,-0.183000,0.789550,0.694726,-0.253352,-0.060048,-0.017588,-0.270581,-0.923890,-0.270581,0.994647,0.694820,-0.248200,-0.060048,-0.021540,-0.191330,-0.923890,-0.331393,0.931640,0.657710,-0.258743,-0.056288,-0.022979,-0.353534,-0.866041,-0.353534,0.970210,0.657812,-0.252013,-0.056288,-0.028144,-0.249986,-0.866041,-0.432989,0.994620,0.694411,-0.253352,-0.060048,-0.017588,-0.270581,-0.923890,-0.270581,0.765290,0.658200,-0.258743,-0.056288,-0.022979,-0.353534,-0.866041,-0.353534,0.736151,0.621580,-0.255547,-0.051564,-0.034266,-0.304367,-0.793375,-0.527178,0.970210,0.657812,-0.252013,-0.056288,-0.028144,-0.249986,-0.866041,-0.432989,0.953610,0.621090,-0.263742,-0.051564,-0.027978,-0.430439,-0.793375,-0.430439,0.953452,0.621580,-0.255547,-0.051564,-0.034266,-0.304367,-0.793375,-0.527178,0.960772,0.621090,-0.268262,-0.045959,-0.032498,-0.499982,-0.707133,-0.499982,0.936030,0.596797,-0.258743,-0.045959,-0.039801,-0.353540,-0.707133,-0.612350,0.960765,0.621090,-0.263742,-0.051564,-0.027978,-0.430439,-0.793375,-0.430439,0.730950,0.597110,-0.268262,-0.045959,-0.032498,-0.499982,-0.707133,-0.499982,0.706683,0.560540,-0.261546,-0.039567,-0.044656,-0.396666,-0.608790,-0.687045,0.936030,0.596797,-0.258743,-0.045959,-0.039801,-0.353540,-0.707133,-0.612350,0.870600,0.560050,-0.272226,-0.039567,-0.036462,-0.560970,-0.608790,-0.560970,0.911620,0.560174,-0.261546,-0.039567,-0.044656,-0.396666,-0.608790,-0.687045,0.895020,0.523430,-0.272226,-0.039567,-0.036462,-0.560970,-0.608790,-0.560970,0.677541,0.523920,-0.263908,-0.032498,-0.048747,-0.433005,-0.500027,-0.749986,0.911620,0.560174,-0.275565,-0.032498,-0.039801,-0.612361,-0.500027,-0.612361,0.894843,0.523920,-0.263908,-0.032498,-0.048747,-0.433005,-0.500027,-0.749986,0.875480,0.486812,-0.275565,-0.032498,-0.039801,-0.612361,-0.500027,-0.612361,0.650859,0.487300,-0.265788,-0.024873,-0.052003,-0.461935,-0.382707,-0.800095,0.894843,0.523920,-0.278224,-0.024873,-0.042460,-0.653274,-0.382707,-0.653275,0.875459,0.487300,-0.265788,-0.024873,-0.052003,-0.461935,-0.382707,-0.800095,0.653289,0.487262,-0.278224,-0.024873,-0.042460,-0.653274,-0.382707,-0.653275,0.648068,0.462890,-0.267154,-0.016822,-0.054370,-0.482961,-0.258837,-0.836512,0.875459,0.487300,-0.280157,-0.016822,-0.044393,-0.683009,-0.258837,-0.683009,0.853020,0.462531,-0.267154,-0.016822,-0.054370,-0.482961,-0.258837,-0.836512,0.836420,0.425780,-0.280157,-0.016822,-0.044393,-0.683009,-0.258837,-0.683009,0.836370,0.425780,-0.267984,-0.008484,-0.055806,-0.495722,-0.130536,-0.858615,0.853020,0.462531,-0.281330,-0.008484,-0.045566,-0.701057,-0.130536,-0.701057,0.836220,0.426270,-0.267984,-0.008484,-0.055806,-0.495722,-0.130536,-0.858615,0.843550,0.425780,-0.281330,-0.008484,-0.045566,-0.701057,-0.130536,-0.701057,0.843260,0.425780,-0.268262,0.000000,-0.056288,-0.500000,0.0,-0.866025,0.843548,0.425780,-0.281723,0.000000,-0.045959,-0.707107,0.0,-0.707107,0.843260,0.425911,-0.268262,0.000000,-0.056288,-0.500000,0.0,-0.866025,0.819278,0.389160,-0.281330,0.008484,-0.045566,-0.701057,0.130536,-0.701057,0.818840,0.389289,-0.267984,0.008484,-0.055806,-0.495722,0.130536,-0.858615,0.819330,0.389289,-0.281723,0.000000,-0.045959,-0.707107,0.0,-0.707107,0.589466,0.365230,-0.267984,0.008484,-0.055806,-0.495722,0.130536,-0.858615,0.589467,0.365193,-0.280157,0.016822,-0.044393,-0.683009,0.258837,-0.683009,0.785150,0.328251,-0.267154,0.016822,-0.054370,-0.482961,0.258837,-0.836512,0.794430,0.364872,-0.281330,0.008484,-0.045566,-0.701057,0.130536,-0.701057,0.596680,0.364740,-0.278224,0.024873,-0.042460,-0.653274,0.382707,-0.653275,0.591790,0.328610,-0.267154,0.016822,-0.054370,-0.482961,0.258837,-0.836512,0.560328,0.328572,-0.280157,0.016822,-0.044393,-0.683009,0.258837,-0.683009,0.591790,0.328120,-0.265788,0.024873,-0.052003,-0.461935,0.382707,-0.800095,0.785150,0.328251,-0.275565,0.032498,-0.039801,-0.612361,0.500027,-0.612361,0.760250,0.291634,-0.265788,0.024873,-0.052003,-0.461935,0.382707,-0.800095,0.760250,0.291500,-0.278224,0.024873,-0.042460,-0.653274,0.382707,-0.653275,0.530870,0.267570,-0.263908,0.032498,-0.048747,-0.433005,0.500027,-0.749986,0.760740,0.291629,-0.272226,0.039567,-0.036462,-0.560970,0.608790,-0.560970,0.726070,0.230583,-0.263908,0.032498,-0.048747,-0.433005,0.500027,-0.749986,0.530873,0.267529,-0.275565,0.032498,-0.039801,-0.612361,0.500027,-0.612361,0.501734,0.230950,-0.261546,0.039567,-0.044656,-0.396666,0.608790,-0.687046,0.735840,0.267214,-0.261546,0.039567,-0.044656,-0.396666,0.608790,-0.687046,0.501737,0.230904,-0.268262,0.045959,-0.032498,-0.499982,0.707133,-0.499982,0.530760,0.230950,-0.258743,0.045959,-0.039801,-0.353540,0.707133,-0.612350,0.726070,0.230583,-0.272226,0.039567,-0.036462,-0.560970,0.608790,-0.560970,0.530760,0.230460,-0.258743,0.045959,-0.039801,-0.353540,0.707133,-0.612350,0.701660,0.193840,-0.268262,0.045959,-0.032498,-0.499982,0.707133,-0.499982,0.472322,0.169920,-0.255547,0.051564,-0.034266,-0.304367,0.793375,-0.527178,0.702140,0.193960,-0.263742,0.051564,-0.027978,-0.430439,0.793375,-0.430439,0.701660,0.193969,-0.255547,0.051564,-0.034266,-0.304367,0.793375,-0.527178,0.472325,0.169881,-0.263742,0.051564,-0.027978,-0.430439,0.793375,-0.430439,0.462400,0.145036,-0.252013,0.056288,-0.028144,-0.178100,0.934410,-0.308479,0.677240,0.169541,-0.258743,0.056288,-0.022979,-0.251872,0.934410,-0.251872,0.665030,0.145095,-0.252013,0.056288,-0.028144,-0.178100,0.934410,-0.308479,0.462472,0.145036,-0.253352,0.057362,-0.017588,-0.056891,0.996758,-0.056891,0.650390,0.133156,-0.248200,0.057362,-0.021540,-0.040228,0.996758,-0.069677,0.665030,0.145095,-0.258743,0.056288,-0.022979,-0.251872,0.934410,-0.251872,0.433512,0.121090,-0.248200,0.057362,-0.021540,-0.040228,0.996758,-0.069677,0.628410,0.120600,-0.246962,0.057553,-0.011198,0.201790,0.958416,0.201790,0.608880,0.120733,-0.243682,0.057553,-0.013714,0.142687,0.958416,0.247141,0.650390,0.133156,-0.253352,0.057362,-0.017588,-0.056891,0.996758,-0.056891,0.409137,0.121090,-0.241980,0.055220,-0.010767,0.395924,0.610717,0.685761,0.406288,0.121090,-0.241763,0.044143,-0.005999,0.666058,0.335759,0.666058,0.609183,0.108880,-0.240006,0.044143,-0.007347,0.470974,0.335759,0.815751,0.611462,0.121090,-0.244555,0.055220,-0.008791,0.559922,0.610717,0.559922,0.377147,0.108880,-0.240006,0.044143,-0.007347,-0.032702,0.997859,-0.056641,0.609183,0.108880,-0.241763,0.044143,-0.005999,-0.046247,0.997859,-0.046247,0.577436,0.108390,-0.237960,-0.064439,-0.008195,-0.033780,-0.991446,-0.126069,0.252631,0.758300,-0.237960,-0.064439,-0.008195,-0.033780,-0.991446,-0.126069,0.216300,0.721190,-0.244175,-0.062781,-0.014568,-0.129401,-0.965931,-0.224128,0.216168,0.721680,-0.240118,-0.062781,-0.016249,-0.066983,-0.965931,-0.249983,0.252631,0.758300,-0.240006,-0.064439,-0.007347,-0.065258,-0.991446,-0.113031,0.013522,0.721680,-0.240118,-0.062781,-0.016249,-0.066983,-0.965931,-0.249983,0.020841,0.721233,-0.248200,-0.060048,-0.021540,-0.191330,-0.923890,-0.331393,0.213370,0.697034,-0.242202,-0.060048,-0.024025,-0.099040,-0.923890,-0.369621,0.216168,0.721680,-0.244175,-0.062781,-0.014568,-0.129401,-0.965931,-0.224128,0.994620,0.694411,-0.242202,-0.060048,-0.024025,-0.099040,-0.923890,-0.369621,0.157710,0.660150,-0.252013,-0.056288,-0.028144,-0.249986,-0.866041,-0.432989,0.194014,0.660640,-0.244175,-0.056288,-0.031390,-0.129402,-0.866041,-0.482936,0.213370,0.697034,-0.248200,-0.060048,-0.021540,-0.191330,-0.923890,-0.331393,0.970210,0.657812,-0.246005,-0.051564,-0.038219,-0.157552,-0.793375,-0.587991,0.194014,0.660640,-0.244175,-0.056288,-0.031390,-0.129402,-0.866041,-0.482936,0.157710,0.623530,-0.252013,-0.056288,-0.028144,-0.249986,-0.866041,-0.432989,0.953452,0.621580,-0.255547,-0.051564,-0.034266,-0.304367,-0.793375,-0.527178,0.159991,0.624020,-0.246005,-0.051564,-0.038219,-0.157552,-0.793375,-0.587991,0.960764,0.621202,-0.258743,-0.045959,-0.039801,-0.353540,-0.707133,-0.612350,0.154780,0.599406,-0.247659,-0.045959,-0.044393,-0.183006,-0.707133,-0.682988,0.159991,0.624020,-0.255547,-0.051564,-0.034266,-0.304367,-0.793375,-0.527178,0.936030,0.596797,-0.247659,-0.045959,-0.044393,-0.183006,-0.707133,-0.682988,0.096680,0.562500,-0.258743,-0.045959,-0.039801,-0.353540,-0.707133,-0.612350,0.911620,0.560174,-0.249110,-0.039567,-0.049807,-0.205329,-0.608790,-0.766300,0.154780,0.599406,-0.261546,-0.039567,-0.044656,-0.396666,-0.608790,-0.687045,0.135250,0.562790,-0.249110,-0.039567,-0.049807,-0.205329,-0.608790,-0.766300,0.099120,0.525870,-0.261546,-0.039567,-0.044656,-0.396666,-0.608790,-0.687045,0.894843,0.523920,-0.250332,-0.032498,-0.054370,-0.224140,-0.500027,-0.836501,0.135250,0.562790,-0.263908,-0.032498,-0.048747,-0.433005,-0.500027,-0.749986,0.101379,0.526360,-0.250332,-0.032498,-0.054370,-0.224140,-0.500027,-0.836501,0.074700,0.489468,-0.263908,-0.032498,-0.048747,-0.433005,-0.500027,-0.749986,0.875459,0.487300,-0.251306,-0.024873,-0.058002,-0.239115,-0.382707,-0.892390,0.101379,0.526360,-0.265788,-0.024873,-0.052003,-0.461935,-0.382707,-0.800095,0.082005,0.489740,-0.251306,-0.024873,-0.058002,-0.239115,-0.382707,-0.892390,0.877930,0.486939,-0.265788,-0.024873,-0.052003,-0.461935,-0.382707,-0.800095,0.877440,0.486939,-0.252013,-0.016822,-0.060642,-0.249999,-0.258837,-0.933008,0.074689,0.489740,-0.267154,-0.016822,-0.054370,-0.482961,-0.258837,-0.836512,0.877440,0.487300,-0.267984,-0.008484,-0.055806,-0.495722,-0.130536,-0.858615,0.042762,0.428710,-0.252442,-0.008484,-0.062244,-0.256604,-0.130536,-0.957661,0.076660,0.465142,-0.267154,-0.016822,-0.054370,-0.482961,-0.258837,-0.836512,0.836220,0.426270,-0.252013,-0.016822,-0.060642,-0.249999,-0.258837,-0.933008,0.040520,0.428220,-0.268262,0.000000,-0.056288,-0.500000,0.0,-0.866025,0.843260,0.426270,-0.252586,0.000000,-0.062781,-0.258819,0.0,-0.965926,0.040323,0.428710,-0.267984,-0.008484,-0.055806,-0.495722,-0.130536,-0.858615,0.843260,0.425911,-0.252442,-0.008484,-0.062244,-0.256604,-0.130536,-0.957661,0.843548,0.425780,-0.267984,0.008484,-0.055806,-0.495722,0.130536,-0.858615,0.818840,0.389640,-0.252586,0.000000,-0.062781,-0.258819,0.0,-0.965926,0.819330,0.389289,-0.268262,0.000000,-0.056288,-0.500000,0.0,-0.866025,0.818840,0.389289,-0.252442,0.008484,-0.062244,-0.256604,0.130536,-0.957661,0.819278,0.389640,-0.267154,0.016822,-0.054370,-0.482961,0.258837,-0.836512,0.982687,0.328610,-0.252442,0.008484,-0.062244,-0.256604,0.130536,-0.957661,0.794545,0.364872,-0.267984,0.008484,-0.055806,-0.495722,0.130536,-0.858615,0.785150,0.328251,-0.252013,0.016822,-0.060642,-0.249999,0.258837,-0.933008,0.018060,0.367482,-0.265788,0.024873,-0.052003,-0.461935,0.382707,-0.800095,0.963306,0.291990,-0.252013,0.016822,-0.060642,-0.249999,0.258837,-0.933008,0.784935,0.328251,-0.267154,0.016822,-0.054370,-0.482961,0.258837,-0.836512,0.794430,0.328120,-0.251306,0.024873,-0.058002,-0.239115,0.382707,-0.892390,0.982687,0.328610,-0.263908,0.032498,-0.048747,-0.433005,0.500027,-0.749986,0.762690,0.267570,-0.251306,0.024873,-0.058002,-0.239115,0.382707,-0.892390,0.760740,0.291629,-0.265788,0.024873,-0.052003,-0.461935,0.382707,-0.800095,0.760250,0.291634,-0.250332,0.032498,-0.054370,-0.224140,0.500027,-0.836501,0.760250,0.291990,-0.261546,0.039567,-0.044656,-0.396666,0.608790,-0.687046,0.924075,0.230950,-0.250332,0.032498,-0.054370,-0.224140,0.500027,-0.836501,0.735946,0.267214,-0.263908,0.032498,-0.048747,-0.433005,0.500027,-0.749986,0.726070,0.230583,-0.249110,0.039567,-0.049807,-0.205329,0.608790,-0.766300,0.958000,0.267383,-0.258743,0.045959,-0.039801,-0.353540,0.707133,-0.612350,0.904708,0.194330,-0.249110,0.039567,-0.049807,-0.205329,0.608790,-0.766300,0.726342,0.230583,-0.261546,0.039567,-0.044656,-0.396666,0.608790,-0.687046,0.728510,0.230460,-0.247659,0.045959,-0.044393,-0.183006,0.707133,-0.682988,0.924075,0.230950,-0.258743,0.045959,-0.039801,-0.353540,0.707133,-0.612350,0.701660,0.193969,-0.246005,0.051564,-0.038219,-0.157552,0.793375,-0.587991,0.701660,0.194330,-0.247659,0.045959,-0.044393,-0.183006,0.707133,-0.682988,0.702140,0.193960,-0.255547,0.051564,-0.034266,-0.304367,0.793375,-0.527178,0.704100,0.169920,-0.246005,0.051564,-0.038219,-0.157552,0.793375,-0.587991,0.677354,0.169540,-0.252013,0.056288,-0.028144,-0.178100,0.934410,-0.308479,0.882423,0.145500,-0.244175,0.056288,-0.031390,-0.092191,0.934410,-0.344063,0.899410,0.169720,-0.255547,0.051564,-0.034266,-0.304367,0.793375,-0.527178,0.665030,0.145095,-0.244175,0.056288,-0.031390,-0.092191,0.934410,-0.344063,0.665164,0.145095,-0.248200,0.057362,-0.021540,-0.040228,0.996758,-0.069677,0.875000,0.132957,-0.242202,0.057362,-0.024025,-0.020823,0.996758,-0.077714,0.882423,0.145500,-0.252013,0.056288,-0.028144,-0.178100,0.934410,-0.308479,0.650390,0.133156,-0.239863,0.057553,-0.015296,0.073860,0.958416,0.275650,0.875000,0.132957,-0.242202,0.057362,-0.024025,-0.020823,0.996758,-0.077714,0.650429,0.133156,-0.248200,0.057362,-0.021540,-0.040228,0.996758,-0.069677,0.608880,0.120733,-0.243682,0.057553,-0.013714,0.142687,0.958416,0.247141,0.843382,0.121090,-0.238982,0.055220,-0.012009,0.204946,0.610717,0.764867,0.611462,0.121090,-0.240006,0.044143,-0.007347,0.470974,0.335759,0.815751,0.846038,0.108880,-0.237960,0.044143,-0.008195,0.243794,0.335759,0.909852,0.845912,0.121090,-0.241980,0.055220,-0.010767,0.395924,0.610717,0.685761,0.609183,0.108880,-0.237960,0.044143,-0.008195,-0.016928,0.997859,-0.063175,0.846038,0.108880,-0.240006,0.044143,-0.007347,-0.032702,0.997859,-0.056641,0.797360,0.108390,-0.235764,-0.064439,-0.008484,0.0,-0.991446,-0.130517,0.450386,0.758300,-0.235764,-0.064439,-0.008484,0.0,-0.991446,-0.130517,0.414060,0.721190,-0.240118,-0.062781,-0.016249,-0.066983,-0.965931,-0.249983,0.421243,0.721680,-0.235764,-0.062781,-0.016822,0.0,-0.965931,-0.258801,0.450386,0.758300,-0.237960,-0.064439,-0.008195,-0.033780,-0.991446,-0.126069,0.216168,0.721680,-0.235764,-0.060048,-0.024873,0.0,-0.923890,-0.382659,0.421243,0.721680,-0.235764,-0.062781,-0.016822,0.0,-0.965931,-0.258801,0.218608,0.721427,-0.240118,-0.062781,-0.016249,-0.066983,-0.965931,-0.249983,0.213370,0.697034,-0.242202,-0.060048,-0.024025,-0.099040,-0.923890,-0.369621,0.416031,0.697260,-0.235764,-0.060048,-0.024873,0.0,-0.923890,-0.382659,0.360350,0.660150,-0.242202,-0.060048,-0.024025,-0.099040,-0.923890,-0.369621,0.194014,0.660640,-0.235764,-0.056288,-0.032498,0.0,-0.866041,-0.499972,0.416031,0.697260,-0.244175,-0.056288,-0.031390,-0.129402,-0.866041,-0.482936,0.391778,0.660640,-0.235764,-0.056288,-0.032498,0.0,-0.866041,-0.499972,0.355460,0.623530,-0.244175,-0.056288,-0.031390,-0.129402,-0.866041,-0.482936,0.159991,0.624020,-0.235764,-0.051564,-0.039567,0.0,-0.793375,-0.608733,0.391778,0.660640,-0.246005,-0.051564,-0.038219,-0.157552,-0.793375,-0.587991,0.362635,0.624020,-0.235764,-0.051564,-0.039567,0.0,-0.793375,-0.608733,0.159990,0.623818,-0.247659,-0.045959,-0.044393,-0.183006,-0.707133,-0.682988,0.357420,0.599579,-0.235764,-0.045959,-0.045959,0.000000,-0.707133,-0.707081,0.362635,0.624020,-0.246005,-0.051564,-0.038219,-0.157552,-0.793375,-0.587991,0.154780,0.599406,-0.249110,-0.039567,-0.049807,-0.205329,-0.608790,-0.766300,0.333156,0.562980,-0.235764,-0.039567,-0.051564,-0.000000,-0.608790,-0.793332,0.357420,0.599579,-0.247659,-0.045959,-0.044393,-0.183006,-0.707133,-0.682988,0.135250,0.562790,-0.235764,-0.045959,-0.045959,0.000000,-0.707133,-0.707081,0.301750,0.562500,-0.250332,-0.032498,-0.054370,-0.224140,-0.500027,-0.836501,0.296718,0.526360,-0.235764,-0.032498,-0.056288,0.000000,-0.500027,-0.866010,0.333156,0.562980,-0.249110,-0.039567,-0.049807,-0.205329,-0.608790,-0.766300,0.101379,0.526360,-0.235764,-0.039567,-0.051564,-0.000000,-0.608790,-0.793332,0.296870,0.525870,-0.251306,-0.024873,-0.058002,-0.239115,-0.382707,-0.892390,0.303710,0.526342,-0.235764,-0.024873,-0.060048,0.0,-0.382707,-0.923870,0.304016,0.526360,-0.250332,-0.032498,-0.054370,-0.224140,-0.500027,-0.836501,0.082005,0.489740,-0.235764,-0.032498,-0.056288,0.000000,-0.500027,-0.866010,0.304041,0.525870,-0.252013,-0.016822,-0.060642,-0.249999,-0.258837,-0.933008,0.279290,0.489724,-0.235764,-0.016822,-0.062781,-0.000000,-0.258837,-0.965921,0.279757,0.489740,-0.251306,-0.024873,-0.058002,-0.239115,-0.382707,-0.892390,0.076660,0.465142,-0.235764,-0.024873,-0.060048,0.0,-0.382707,-0.923870,0.279778,0.489250,-0.252442,-0.008484,-0.062244,-0.256604,-0.130536,-0.957661,0.245399,0.428710,-0.235764,-0.008484,-0.064439,0.000000,-0.130536,-0.991444,0.274543,0.465330,-0.252013,-0.016822,-0.060642,-0.249999,-0.258837,-0.933008,0.042762,0.428710,-0.235764,-0.016822,-0.062781,-0.000000,-0.258837,-0.965921,0.245600,0.428220,-0.252586,0.000000,-0.062781,-0.258819,0.0,-0.965926,0.245110,0.428694,-0.235764,0.000000,-0.064995,0.0,0.0,-1.0,0.245399,0.428710,-0.252442,-0.008484,-0.062244,-0.256604,-0.130536,-0.957661,0.023386,0.392090,-0.235764,-0.008484,-0.064439,0.000000,-0.130536,-0.991444,0.245556,0.428220,-0.252442,0.008484,-0.062244,-0.256604,0.130536,-0.957661,0.220700,0.392072,-0.235764,0.000000,-0.064995,0.0,0.0,-1.0,0.221138,0.391600,-0.252586,0.000000,-0.062781,-0.258819,0.0,-0.965926,0.018060,0.367482,-0.235764,0.008484,-0.064439,0.000000,0.130536,-0.991444,0.221146,0.392090,-0.252013,0.016822,-0.060642,-0.249999,0.258837,-0.933008,0.186792,0.331050,-0.235764,0.008484,-0.064439,0.000000,0.130536,-0.991444,0.187010,0.330560,-0.252442,0.008484,-0.062244,-0.256604,0.130536,-0.957661,0.982687,0.328610,-0.235764,0.016822,-0.062781,-0.000000,0.258837,-0.965921,0.215931,0.367670,-0.251306,0.024873,-0.058002,-0.239115,0.382707,-0.892390,0.186520,0.331024,-0.235764,0.016822,-0.062781,-0.000000,0.258837,-0.965921,0.186520,0.330560,-0.252013,0.016822,-0.060642,-0.249999,0.258837,-0.933008,0.963306,0.291990,-0.235764,0.024873,-0.060048,0.0,0.382707,-0.923870,0.186792,0.331050,-0.250332,0.032498,-0.054370,-0.224140,0.500027,-0.836501,0.162100,0.294399,-0.235764,0.024873,-0.060048,0.0,0.382707,-0.923870,0.162100,0.293940,-0.251306,0.024873,-0.058002,-0.239115,0.382707,-0.892390,0.958000,0.267383,-0.235764,0.032498,-0.056288,0.000000,0.500027,-0.866010,0.162531,0.294430,-0.249110,0.039567,-0.049807,-0.205329,0.608790,-0.766300,0.128187,0.233390,-0.235764,0.032498,-0.056288,0.000000,0.500027,-0.866010,0.958105,0.267382,-0.250332,0.032498,-0.054370,-0.224140,0.500027,-0.836501,0.924075,0.230950,-0.235764,0.039567,-0.051564,-0.000000,0.608789,-0.793332,0.157321,0.270020,-0.247659,0.045959,-0.044393,-0.183006,0.707133,-0.682988,0.931150,0.230950,-0.235764,0.039567,-0.051564,-0.000000,0.608789,-0.793332,0.924087,0.230755,-0.249110,0.039567,-0.049807,-0.205329,0.608790,-0.766300,0.904708,0.194330,-0.235764,0.045959,-0.045959,0.000000,0.707133,-0.707081,0.128187,0.233390,-0.247659,0.045959,-0.044393,-0.183006,0.707133,-0.682988,0.899410,0.169720,-0.235764,0.051564,-0.039567,0.0,0.793375,-0.608733,0.103938,0.196770,-0.235764,0.045959,-0.045959,0.000000,0.707133,-0.707081,0.103510,0.196280,-0.246005,0.051564,-0.038219,-0.157552,0.793375,-0.587991,0.103510,0.196716,-0.235764,0.051564,-0.039567,0.0,0.793375,-0.608733,0.899518,0.169716,-0.244175,0.056288,-0.031390,-0.092191,0.934410,-0.344063,0.086492,0.147940,-0.235764,0.056288,-0.032498,0.000000,0.934410,-0.356200,0.098732,0.172360,-0.246005,0.051564,-0.038219,-0.157552,0.793375,-0.587991,0.882423,0.145500,-0.235764,0.056288,-0.032498,0.000000,0.934410,-0.356200,0.882427,0.145431,-0.242202,0.057362,-0.024025,-0.020823,0.996758,-0.077714,0.079181,0.135740,-0.235764,0.057362,-0.024873,-0.000000,0.996758,-0.080456,0.086492,0.147940,-0.244175,0.056288,-0.031390,-0.092191,0.934410,-0.344063,0.875000,0.132957,-0.242202,0.057362,-0.024025,-0.020823,0.996758,-0.077714,0.843382,0.121090,-0.235764,0.057553,-0.015836,0.0,0.958416,0.285374,0.079181,0.135740,-0.235764,0.057362,-0.024873,-0.000000,0.996758,-0.080456,0.875088,0.132956,-0.239863,0.057553,-0.015296,0.073860,0.958416,0.275650,0.069435,0.111320,-0.235764,0.055220,-0.012432,0.0,0.610717,0.791849,0.845912,0.121090,-0.237960,0.044143,-0.008195,0.243794,0.335759,0.909852,0.052542,0.111320,-0.235764,0.044143,-0.008484,0.0,0.335759,0.941948,0.067076,0.111320,-0.238982,0.055220,-0.012009,0.204946,0.610717,0.764867,0.846038,0.108880,-0.235764,0.044143,-0.008484,0.0,0.997859,-0.065403,0.052542,0.111320,-0.237960,0.044143,-0.008195,-0.016928,0.997859,-0.063175,0.047675,0.110840,-0.233568,-0.064439,-0.008195,0.033780,-0.991446,-0.126069,0.648139,0.746090,-0.231410,-0.062781,-0.016249,0.066983,-0.965931,-0.249983,0.648139,0.746090,-0.233568,-0.064439,-0.008195,0.033780,-0.991446,-0.126069,0.631340,0.708980,-0.235764,-0.064439,-0.008484,0.0,-0.991446,-0.130517,0.421243,0.721680,-0.235764,-0.062781,-0.016822,0.0,-0.965931,-0.258801,0.631210,0.709470,-0.235764,-0.060048,-0.024873,0.0,-0.923890,-0.382659,0.613770,0.684715,-0.231410,-0.062781,-0.016249,0.066983,-0.965931,-0.249983,0.614250,0.684570,-0.235764,-0.062781,-0.016822,0.0,-0.965931,-0.258801,0.416031,0.697260,-0.229327,-0.060048,-0.024025,0.099040,-0.923890,-0.369620,0.631210,0.709470,-0.235764,-0.060048,-0.024873,0.0,-0.923890,-0.382659,0.391778,0.660640,-0.235764,-0.056288,-0.032498,0.0,-0.866041,-0.499972,0.589531,0.648430,-0.227353,-0.056288,-0.031390,0.129402,-0.866041,-0.482936,0.577630,0.648430,-0.229327,-0.060048,-0.024025,0.099040,-0.923890,-0.369620,0.577630,0.647940,-0.235764,-0.051564,-0.039567,0.0,-0.793375,-0.608733,0.572606,0.611810,-0.227353,-0.056288,-0.031390,0.129402,-0.866041,-0.482936,0.572750,0.611320,-0.235764,-0.056288,-0.032498,0.0,-0.866041,-0.499972,0.362635,0.624020,-0.225523,-0.051564,-0.038219,0.157552,-0.793375,-0.587991,0.589531,0.648430,-0.235764,-0.045959,-0.045959,0.000000,-0.707133,-0.707081,0.555170,0.587065,-0.225523,-0.051564,-0.038219,0.157552,-0.793375,-0.587991,0.555660,0.586910,-0.235764,-0.051564,-0.039567,0.0,-0.793375,-0.608733,0.357420,0.599579,-0.223869,-0.045959,-0.044393,0.183006,-0.707133,-0.682988,0.572606,0.611810,-0.235764,-0.039567,-0.051564,-0.000000,-0.608790,-0.793332,0.530760,0.550447,-0.223869,-0.045959,-0.044393,0.183006,-0.707133,-0.682988,0.492180,0.550290,-0.235764,-0.045959,-0.045959,0.000000,-0.707133,-0.707081,0.333156,0.562980,-0.222418,-0.039567,-0.049807,0.205329,-0.608790,-0.766300,0.492180,0.550780,-0.235764,-0.032498,-0.056288,0.000000,-0.500027,-0.866010,0.513992,0.514160,-0.222418,-0.039567,-0.049807,0.205329,-0.608790,-0.766300,0.514160,0.513670,-0.235764,-0.039567,-0.051564,-0.000000,-0.608790,-0.793332,0.296718,0.526360,-0.221196,-0.032498,-0.054370,0.224140,-0.500027,-0.836501,0.530760,0.550447,-0.235764,-0.024873,-0.060048,0.0,-0.382707,-0.923870,0.494606,0.477530,-0.221196,-0.032498,-0.054370,0.224140,-0.500027,-0.836501,0.494620,0.477200,-0.235764,-0.032498,-0.056288,0.000000,-0.500027,-0.866010,0.494620,0.477200,-0.220223,-0.024873,-0.058002,0.239115,-0.382707,-0.892390,0.513992,0.514160,-0.235764,-0.016822,-0.062781,-0.000000,-0.258837,-0.965921,0.472160,0.452788,-0.220223,-0.024873,-0.058002,0.239115,-0.382707,-0.892390,0.279757,0.489724,-0.235764,-0.024873,-0.060048,0.0,-0.382707,-0.923870,0.274543,0.465330,-0.219515,-0.016822,-0.060642,0.249999,-0.258837,-0.933008,0.494606,0.477530,-0.235764,-0.008484,-0.064439,0.000000,-0.130536,-0.991444,0.455362,0.416500,-0.219515,-0.016822,-0.060642,0.249999,-0.258837,-0.933008,0.455560,0.416010,-0.235764,-0.016822,-0.062781,-0.000000,-0.258837,-0.965921,0.455512,0.416010,-0.219086,-0.008484,-0.062244,0.256604,-0.130536,-0.957661,0.472160,0.452788,-0.235764,0.000000,-0.064995,0.0,0.0,-1.0,0.462400,0.416167,-0.219086,-0.008484,-0.062244,0.256604,-0.130536,-0.957661,0.462692,0.416010,-0.235764,-0.008484,-0.064439,0.000000,-0.130536,-0.991444,0.462400,0.416010,-0.218942,0.000000,-0.062781,0.258819,0.0,-0.965926,0.462690,0.416010,-0.235764,0.008484,-0.064439,0.000000,0.130536,-0.991444,0.437980,0.379549,-0.219086,0.008484,-0.062244,0.256604,0.130536,-0.957661,0.438470,0.379548,-0.235764,0.000000,-0.064995,0.0,0.0,-1.0,0.215931,0.367670,-0.218942,0.000000,-0.062781,0.258819,0.0,-0.965926,0.438418,0.379390,-0.235764,0.016822,-0.062781,-0.000000,0.258837,-0.965921,0.404290,0.318507,-0.219515,0.016822,-0.060642,0.249999,0.258837,-0.933008,0.413570,0.355135,-0.235764,0.008484,-0.064439,0.000000,0.130536,-0.991444,0.215820,0.354980,-0.219086,0.008484,-0.062244,0.256604,0.130536,-0.957661,0.215931,0.367654,-0.235764,0.024873,-0.060048,0.0,0.382707,-0.923870,0.210930,0.318840,-0.220223,0.024873,-0.058002,0.239115,0.382707,-0.892390,0.404290,0.318507,-0.235764,0.016822,-0.062781,-0.000000,0.258837,-0.965921,0.210930,0.318350,-0.219515,0.016822,-0.060642,0.249999,0.258837,-0.933008,0.186792,0.331034,-0.235764,0.032498,-0.056288,0.000000,0.500027,-0.866010,0.354980,0.257477,-0.221196,0.032498,-0.054370,0.224140,0.500027,-0.836501,0.311520,0.257675,-0.235764,0.024873,-0.060048,0.0,0.382707,-0.923870,0.157321,0.270020,-0.220223,0.024873,-0.058002,0.239115,0.382707,-0.892390,0.311520,0.257320,-0.235764,0.039567,-0.051564,-0.000000,0.608789,-0.793332,0.345210,0.220856,-0.222418,0.039567,-0.049807,0.205329,0.608790,-0.766300,0.354980,0.257477,-0.235764,0.032498,-0.056288,0.000000,0.500027,-0.866010,0.128187,0.233390,-0.221196,0.032498,-0.054370,0.224140,0.500027,-0.836501,0.157322,0.270002,-0.235764,0.045959,-0.045959,0.000000,0.707133,-0.707081,0.149900,0.221190,-0.223869,0.045959,-0.044393,0.183006,0.707133,-0.682988,0.345210,0.220856,-0.235764,0.039567,-0.051564,-0.000000,0.608789,-0.793332,0.149900,0.220700,-0.222418,0.039567,-0.049807,0.205329,0.608790,-0.766300,0.128189,0.233371,-0.225523,0.051564,-0.038219,0.157552,0.793375,-0.587991,0.321280,0.184236,-0.235764,0.045959,-0.045959,0.000000,0.707133,-0.707081,0.098732,0.172360,-0.235764,0.051564,-0.039567,0.0,0.793375,-0.608733,0.320800,0.184246,-0.223869,0.045959,-0.044393,0.183006,0.707133,-0.682988,0.320800,0.184080,-0.227353,0.056288,-0.031390,0.092191,0.934410,-0.344063,0.296380,0.159815,-0.235764,0.051564,-0.039567,0.0,0.793375,-0.608733,0.086492,0.147940,-0.235764,0.056288,-0.032498,0.000000,0.934410,-0.356200,0.284180,0.135443,-0.225523,0.051564,-0.038219,0.157552,0.793375,-0.587991,0.098734,0.172335,-0.235764,0.057362,-0.024873,-0.000000,0.996758,-0.080456,0.284592,0.111320,-0.227353,0.056288,-0.031390,0.092191,0.934410,-0.344063,0.086499,0.147832,-0.235764,0.056288,-0.032498,0.000000,0.934410,-0.356200,0.079181,0.135740,-0.229327,0.057362,-0.024025,0.020823,0.996758,-0.077714,0.284180,0.135443,-0.235764,0.057553,-0.015836,0.0,0.958416,0.285374,0.296380,0.111243,-0.229327,0.057362,-0.024025,0.020823,0.996758,-0.077714,0.079182,0.135727,-0.235764,0.057362,-0.024873,-0.000000,0.996758,-0.080456,0.069435,0.111320,-0.231665,0.057553,-0.015296,-0.073860,0.958416,0.275650,0.284592,0.111320,-0.233568,0.044143,-0.008195,-0.243794,0.335759,0.909852,0.298935,0.111320,-0.232546,0.055220,-0.012009,-0.204946,0.610717,0.764867,0.067076,0.111320,-0.235764,0.055220,-0.012432,0.0,0.610717,0.791849,0.052542,0.111320,-0.235764,0.044143,-0.008484,0.0,0.335759,0.941948,0.306406,0.099120,-0.233568,0.044143,-0.008195,0.016928,0.997859,-0.063175,0.306406,0.099120,-0.235764,0.044143,-0.008484,0.0,0.997859,-0.065403,0.281858,0.098630,-0.231522,-0.064439,-0.007347,0.065258,-0.991446,-0.113031,0.870308,0.746090,-0.233568,-0.064439,-0.008195,0.033780,-0.991446,-0.126069,0.631210,0.709470,-0.231410,-0.062781,-0.016249,0.066983,-0.965931,-0.249983,0.836285,0.709470,-0.227353,-0.062781,-0.014568,0.129401,-0.965931,-0.224128,0.870308,0.746090,-0.231522,-0.064439,-0.007347,0.065258,-0.991446,-0.113031,0.833980,0.708980,-0.229327,-0.060048,-0.024025,0.099040,-0.923890,-0.369620,0.614237,0.685050,-0.227353,-0.062781,-0.014568,0.129401,-0.965931,-0.224128,0.614250,0.684740,-0.231410,-0.062781,-0.016249,0.066983,-0.965931,-0.249983,0.613770,0.684715,-0.223328,-0.060048,-0.021540,0.191330,-0.923890,-0.331393,0.833856,0.709470,-0.227353,-0.056288,-0.031390,0.129402,-0.866041,-0.482936,0.811701,0.648430,-0.223328,-0.060048,-0.021540,0.191330,-0.923890,-0.331393,0.775390,0.647940,-0.229327,-0.060048,-0.024025,0.099040,-0.923890,-0.369620,0.589531,0.648430,-0.219515,-0.056288,-0.028144,0.249986,-0.866041,-0.432989,0.775390,0.648430,-0.225523,-0.051564,-0.038219,0.157552,-0.793375,-0.587991,0.777677,0.611810,-0.215981,-0.051564,-0.034266,0.304367,-0.793375,-0.527178,0.811701,0.648430,-0.227353,-0.056288,-0.031390,0.129402,-0.866041,-0.482936,0.572606,0.611810,-0.219515,-0.056288,-0.028144,0.249986,-0.866041,-0.432989,0.775390,0.611320,-0.223869,-0.045959,-0.044393,0.183006,-0.707133,-0.682988,0.555660,0.587400,-0.215981,-0.051564,-0.034266,0.304367,-0.793375,-0.527178,0.555660,0.587076,-0.225523,-0.051564,-0.038219,0.157552,-0.793375,-0.587991,0.555170,0.587065,-0.212785,-0.045959,-0.039801,0.353540,-0.707133,-0.612350,0.775257,0.611810,-0.222418,-0.039567,-0.049807,0.205329,-0.608790,-0.766300,0.753084,0.550780,-0.212785,-0.045959,-0.039801,0.353540,-0.707133,-0.612350,0.714350,0.550290,-0.223869,-0.045959,-0.044393,0.183006,-0.707133,-0.682988,0.530760,0.550447,-0.209982,-0.039567,-0.044656,0.396666,-0.608790,-0.687045,0.714350,0.550780,-0.221196,-0.032498,-0.054370,0.224140,-0.500027,-0.836501,0.719057,0.514160,-0.209982,-0.039567,-0.044656,0.396666,-0.608790,-0.687045,0.716790,0.513670,-0.222418,-0.039567,-0.049807,0.205329,-0.608790,-0.766300,0.513992,0.514160,-0.207620,-0.032498,-0.048747,0.433005,-0.500027,-0.749986,0.753084,0.550780,-0.220223,-0.024873,-0.058002,0.239115,-0.382707,-0.892390,0.518564,0.489740,-0.207620,-0.032498,-0.048747,0.433005,-0.500027,-0.749986,0.521303,0.513670,-0.221196,-0.032498,-0.054370,0.224140,-0.500027,-0.836501,0.494606,0.477530,-0.205740,-0.024873,-0.052003,0.461935,-0.382707,-0.800095,0.716632,0.514160,-0.219515,-0.016822,-0.060642,0.249999,-0.258837,-0.933008,0.694330,0.452961,-0.205740,-0.024873,-0.052003,0.461935,-0.382707,-0.800095,0.497048,0.477203,-0.220223,-0.024873,-0.058002,0.239115,-0.382707,-0.892390,0.472160,0.452788,-0.204374,-0.016822,-0.054370,0.482960,-0.258837,-0.836512,0.699679,0.477530,-0.219086,-0.008484,-0.062244,0.256604,-0.130536,-0.957661,0.658005,0.416500,-0.204374,-0.016822,-0.054370,0.482960,-0.258837,-0.836512,0.658200,0.416010,-0.219515,-0.016822,-0.060642,0.249999,-0.258837,-0.933008,0.455362,0.416500,-0.203544,-0.008484,-0.055806,0.495722,-0.130536,-0.858615,0.694330,0.452961,-0.218942,0.000000,-0.062781,0.258819,0.0,-0.965926,0.462400,0.416500,-0.203544,-0.008484,-0.055806,0.495722,-0.130536,-0.858615,0.462690,0.416010,-0.219086,-0.008484,-0.062244,0.256604,-0.130536,-0.957661,0.462400,0.416167,-0.203266,0.000000,-0.056288,0.500000,0.0,-0.866025,0.658005,0.416500,-0.219086,0.008484,-0.062244,0.256604,0.130536,-0.957661,0.437980,0.379880,-0.203544,0.008484,-0.055806,0.495722,0.130536,-0.858615,0.438418,0.379880,-0.218942,0.000000,-0.062781,0.258819,0.0,-0.965926,0.437980,0.379549,-0.203266,0.000000,-0.056288,0.500000,0.0,-0.866025,0.438470,0.379548,-0.219515,0.016822,-0.060642,0.249999,0.258837,-0.933008,0.601827,0.318840,-0.204374,0.016822,-0.054370,0.482961,0.258837,-0.836512,0.635740,0.355304,-0.219086,0.008484,-0.062244,0.256604,0.130536,-0.957661,0.404290,0.318507,-0.203544,0.008484,-0.055806,0.495722,0.130536,-0.858615,0.413683,0.355134,-0.204374,0.016822,-0.054370,0.482961,0.258837,-0.836512,0.404072,0.318507,-0.219515,0.016822,-0.060642,0.249999,0.258837,-0.933008,0.413570,0.318350,-0.205740,0.024873,-0.052003,0.461935,0.382707,-0.800095,0.601827,0.318840,-0.220223,0.024873,-0.058002,0.239115,0.382707,-0.892390,0.413570,0.318840,-0.205740,0.024873,-0.052003,0.461935,0.382707,-0.800095,0.379880,0.281887,-0.220223,0.024873,-0.058002,0.239115,0.382707,-0.892390,0.311520,0.257675,-0.207620,0.032498,-0.048747,0.433005,0.500027,-0.749986,0.379390,0.282220,-0.221196,0.032498,-0.054370,0.224140,0.500027,-0.836501,0.394040,0.257757,-0.207620,0.032498,-0.048747,0.433005,0.500027,-0.749986,0.355079,0.257476,-0.221196,0.032498,-0.054370,0.224140,0.500027,-0.836501,0.345210,0.220856,-0.209982,0.039567,-0.044656,0.396666,0.608790,-0.687045,0.577140,0.257652,-0.222418,0.039567,-0.049807,0.205329,0.608790,-0.766300,0.543212,0.221190,-0.209982,0.039567,-0.044656,0.396666,0.608790,-0.687045,0.345473,0.220855,-0.222418,0.039567,-0.049807,0.205329,0.608790,-0.766300,0.347650,0.220700,-0.212785,0.045959,-0.039801,0.353540,0.707133,-0.612350,0.543212,0.221190,-0.223869,0.045959,-0.044393,0.183006,0.707133,-0.682988,0.347650,0.221190,-0.215981,0.051564,-0.034266,0.304367,0.793375,-0.527178,0.320800,0.184570,-0.223869,0.045959,-0.044393,0.183006,0.707133,-0.682988,0.320800,0.184246,-0.225523,0.051564,-0.038219,0.157552,0.793375,-0.587991,0.323240,0.160150,-0.212785,0.045959,-0.039801,0.353540,0.707133,-0.612350,0.321280,0.184236,-0.227353,0.056288,-0.031390,0.092191,0.934410,-0.344063,0.501460,0.135641,-0.215981,0.051564,-0.034266,0.304367,0.793375,-0.527178,0.296498,0.159813,-0.225523,0.051564,-0.038219,0.157552,0.793375,-0.587991,0.284180,0.135443,-0.219515,0.056288,-0.028144,0.178100,0.934410,-0.308479,0.518644,0.160150,-0.229327,0.057362,-0.024025,0.020823,0.996758,-0.077714,0.482267,0.111320,-0.219515,0.056288,-0.028144,0.178100,0.934410,-0.308479,0.486810,0.123040,-0.227353,0.056288,-0.031390,0.092191,0.934410,-0.344063,0.284592,0.111320,-0.223328,0.057362,-0.021540,0.040228,0.996758,-0.069677,0.487300,0.123431,-0.231665,0.057553,-0.015296,-0.073860,0.958416,0.275650,0.526265,0.111320,-0.223328,0.057362,-0.021540,0.040228,0.996758,-0.069677,0.506830,0.110840,-0.229327,0.057362,-0.024025,0.020823,0.996758,-0.077714,0.296380,0.111243,-0.227846,0.057553,-0.013714,-0.142687,0.958416,0.247141,0.482267,0.111320,-0.231522,0.044143,-0.007347,-0.470974,0.335759,0.815751,0.533252,0.111320,-0.229548,0.055220,-0.010767,-0.395924,0.610717,0.685761,0.298935,0.111320,-0.232546,0.055220,-0.012009,-0.204946,0.610717,0.764867,0.306406,0.099120,-0.233568,0.044143,-0.008195,-0.243794,0.335759,0.909852,0.552934,0.099120,-0.231522,0.044143,-0.007347,0.032702,0.997859,-0.056641,0.552934,0.099120,-0.233568,0.044143,-0.008195,0.016928,0.997859,-0.063175,0.460440,0.074210,-0.229765,-0.064439,-0.005999,0.092289,-0.991446,-0.092289,0.076853,0.748530,-0.223869,-0.062781,-0.011895,0.183000,-0.965931,-0.183000,0.076853,0.748530,-0.231522,-0.064439,-0.007347,0.065258,-0.991446,-0.113031,0.836285,0.709470,-0.227353,-0.062781,-0.014568,0.129401,-0.965931,-0.224128,0.040385,0.711910,-0.229765,-0.064439,-0.005999,0.092289,-0.991446,-0.092289,0.040520,0.711420,-0.223328,-0.060048,-0.021540,0.191330,-0.923890,-0.331393,0.037631,0.687500,-0.223869,-0.062781,-0.011895,0.183000,-0.965931,-0.183000,0.831540,0.684903,-0.227353,-0.062781,-0.014568,0.129401,-0.965931,-0.224128,0.831050,0.684903,-0.218176,-0.060048,-0.017588,0.270581,-0.923890,-0.270581,0.040385,0.711910,-0.219515,-0.056288,-0.028144,0.249986,-0.866041,-0.432989,0.018060,0.650420,-0.218176,-0.060048,-0.017588,0.270581,-0.923890,-0.270581,0.978020,0.647940,-0.223328,-0.060048,-0.021540,0.191330,-0.923890,-0.331393,0.811701,0.648430,-0.212785,-0.056288,-0.022979,0.353534,-0.866041,-0.353534,0.037590,0.687048,-0.215981,-0.051564,-0.034266,0.304367,-0.793375,-0.527178,0.980310,0.611810,-0.207786,-0.051564,-0.027978,0.430439,-0.793375,-0.430439,0.018060,0.650420,-0.219515,-0.056288,-0.028144,0.249986,-0.866041,-0.432989,0.777677,0.611810,-0.212785,-0.056288,-0.022979,0.353534,-0.866041,-0.353534,0.980460,0.611320,-0.212785,-0.045959,-0.039801,0.353540,-0.707133,-0.612350,0.977560,0.587400,-0.207786,-0.051564,-0.027978,0.430439,-0.793375,-0.430439,0.772940,0.587243,-0.215981,-0.051564,-0.034266,0.304367,-0.793375,-0.527178,0.772460,0.587243,-0.203266,-0.045959,-0.032498,0.499982,-0.707133,-0.499982,0.980310,0.611810,-0.209982,-0.039567,-0.044656,0.396666,-0.608790,-0.687045,0.958000,0.550309,-0.199303,-0.039567,-0.036462,0.560970,-0.608790,-0.560970,0.977530,0.586930,-0.212785,-0.045959,-0.039801,0.353540,-0.707133,-0.612350,0.753084,0.550780,-0.203266,-0.045959,-0.032498,0.499982,-0.707133,-0.499982,0.919430,0.550290,-0.207620,-0.032498,-0.048747,0.433005,-0.500027,-0.749986,0.921693,0.514160,-0.199303,-0.039567,-0.036462,0.560970,-0.608790,-0.560970,0.921870,0.513670,-0.209982,-0.039567,-0.044656,0.396666,-0.608790,-0.687045,0.719057,0.514160,-0.195963,-0.032498,-0.039801,0.612361,-0.500027,-0.612361,0.958000,0.550309,-0.205740,-0.024873,-0.052003,0.461935,-0.382707,-0.800095,0.897438,0.477530,-0.195963,-0.032498,-0.039801,0.612361,-0.500027,-0.612361,0.897460,0.477053,-0.207620,-0.032498,-0.048747,0.433005,-0.500027,-0.749986,0.699679,0.477530,-0.193304,-0.024873,-0.042460,0.653275,-0.382707,-0.653275,0.921693,0.514160,-0.204374,-0.016822,-0.054370,0.482960,-0.258837,-0.836512,0.899410,0.452645,-0.193304,-0.024873,-0.042460,0.653275,-0.382707,-0.653275,0.699678,0.477375,-0.205740,-0.024873,-0.052003,0.461935,-0.382707,-0.800095,0.694330,0.452961,-0.191371,-0.016822,-0.044393,0.683009,-0.258837,-0.683009,0.897438,0.477530,-0.191371,-0.016822,-0.044393,0.683009,-0.258837,-0.683009,0.863280,0.416010,-0.203544,-0.008484,-0.055806,0.495722,-0.130536,-0.858615,0.863079,0.416500,-0.190199,-0.008484,-0.045566,0.701057,-0.130536,-0.701057,0.899410,0.452645,-0.204374,-0.016822,-0.054370,0.482960,-0.258837,-0.836512,0.658005,0.416500,-0.190199,-0.008484,-0.045566,0.701057,-0.130536,-0.701057,0.660440,0.416500,-0.203266,0.000000,-0.056288,0.500000,0.0,-0.866025,0.660150,0.416500,-0.189805,0.000000,-0.045959,0.707107,0.0,-0.707107,0.863079,0.416500,-0.203544,-0.008484,-0.055806,0.495722,-0.130536,-0.858615,0.660150,0.416342,-0.189805,0.000000,-0.045959,0.707107,0.0,-0.707107,0.641110,0.379721,-0.203266,0.000000,-0.056288,0.500000,0.0,-0.866025,0.640620,0.379721,-0.190199,0.008484,-0.045566,0.701057,0.130536,-0.701057,0.641058,0.379880,-0.203544,0.008484,-0.055806,0.495722,0.130536,-0.858615,0.638180,0.355460,-0.190199,0.008484,-0.045566,0.701057,0.130536,-0.701057,0.635853,0.355304,-0.203544,0.008484,-0.055806,0.495722,0.130536,-0.858615,0.601827,0.318840,-0.191371,0.016822,-0.044393,0.683009,0.258837,-0.683009,0.840820,0.354994,-0.204374,0.016822,-0.054370,0.482961,0.258837,-0.836512,0.630850,0.318840,-0.191371,0.016822,-0.044393,0.683009,0.258837,-0.683009,0.601832,0.318681,-0.204374,0.016822,-0.054370,0.482961,0.258837,-0.836512,0.630850,0.318350,-0.193304,0.024873,-0.042460,0.653274,0.382707,-0.653275,0.630850,0.318840,-0.205740,0.024873,-0.052003,0.461935,0.382707,-0.800095,0.630850,0.318840,-0.193304,0.024873,-0.042460,0.653274,0.382707,-0.653275,0.582520,0.282061,-0.205740,0.024873,-0.052003,0.461935,0.382707,-0.800095,0.582030,0.282061,-0.195963,0.032498,-0.039801,0.612361,0.500027,-0.612361,0.582030,0.282220,-0.207620,0.032498,-0.048747,0.433005,0.500027,-0.749986,0.579590,0.257810,-0.195963,0.032498,-0.039801,0.612361,0.500027,-0.612361,0.577241,0.257652,-0.207620,0.032498,-0.048747,0.433005,0.500027,-0.749986,0.543212,0.221190,-0.199303,0.039567,-0.036462,0.560970,0.608790,-0.560970,0.782220,0.257337,-0.209982,0.039567,-0.044656,0.396666,0.608790,-0.687045,0.767570,0.220718,-0.212785,0.045959,-0.039801,0.353540,0.707133,-0.612350,0.550290,0.221190,-0.199303,0.039567,-0.036462,0.560970,0.608790,-0.560970,0.543222,0.221032,-0.209982,0.039567,-0.044656,0.396666,0.608790,-0.687045,0.550290,0.220700,-0.203266,0.045959,-0.032498,0.499982,0.707133,-0.499982,0.767570,0.220718,-0.207786,0.051564,-0.027978,0.430439,0.793375,-0.430439,0.523430,0.184570,-0.212785,0.045959,-0.039801,0.353540,0.707133,-0.612350,0.523430,0.184413,-0.215981,0.051564,-0.034266,0.304367,0.793375,-0.527178,0.520990,0.160150,-0.203266,0.045959,-0.032498,0.499982,0.707133,-0.499982,0.523920,0.184413,-0.219515,0.056288,-0.028144,0.178100,0.934410,-0.308479,0.711668,0.123530,-0.207786,0.051564,-0.027978,0.430439,0.793375,-0.430439,0.518654,0.159994,-0.215981,0.051564,-0.034266,0.304367,0.793375,-0.527178,0.501460,0.135641,-0.212785,0.056288,-0.022979,0.251872,0.934410,-0.251872,0.723630,0.159675,-0.223328,0.057362,-0.021540,0.040228,0.996758,-0.069677,0.713860,0.111267,-0.212785,0.056288,-0.022979,0.251872,0.934410,-0.251872,0.714350,0.110840,-0.219515,0.056288,-0.028144,0.178100,0.934410,-0.308479,0.482267,0.111320,-0.218176,0.057362,-0.017588,0.056891,0.996758,-0.056891,0.711668,0.123530,-0.223328,0.057362,-0.021540,0.040228,0.996758,-0.069677,0.526265,0.111320,-0.227846,0.057553,-0.013714,-0.142687,0.958416,0.247141,0.738564,0.111320,-0.224566,0.057553,-0.011198,-0.201790,0.958416,0.201790,0.719214,0.111320,-0.218176,0.057362,-0.017588,0.056891,0.996758,-0.056891,0.482292,0.111062,-0.229765,0.044143,-0.005999,-0.666058,0.335759,0.666058,0.748530,0.098850,-0.226973,0.055220,-0.008791,-0.559922,0.610717,0.559922,0.533252,0.111320,-0.229548,0.055220,-0.010767,-0.395924,0.610717,0.685761,0.552934,0.099120,-0.231522,0.044143,-0.007347,-0.470974,0.335759,0.815751,0.748247,0.099120,-0.229765,0.044143,-0.005999,0.046247,0.997859,-0.046247,0.748247,0.099120,-0.231522,0.044143,-0.007347,0.032702,0.997859,-0.056641,0.579791,0.098718,-0.228417,-0.064439,-0.004242,0.113031,-0.991446,-0.065258,0.274601,0.748530,-0.221196,-0.062781,-0.008411,0.224128,-0.965931,-0.129401,0.274601,0.748530,-0.229765,-0.064439,-0.005999,0.092289,-0.991446,-0.092289,0.040385,0.711910,-0.223869,-0.062781,-0.011895,0.183000,-0.965931,-0.183000,0.264989,0.711910,-0.228417,-0.064439,-0.004242,0.113031,-0.991446,-0.065258,0.257810,0.711420,-0.214224,-0.060048,-0.012436,0.331393,-0.923890,-0.191330,0.264989,0.711910,-0.223869,-0.062781,-0.011895,0.183000,-0.965931,-0.183000,0.037590,0.687048,-0.218176,-0.060048,-0.017588,0.270581,-0.923890,-0.270581,0.240230,0.687235,-0.221196,-0.062781,-0.008411,0.224128,-0.965931,-0.129401,0.062363,0.711476,-0.207620,-0.056288,-0.016249,0.432989,-0.866041,-0.249986,0.240230,0.687235,-0.218176,-0.060048,-0.017588,0.270581,-0.923890,-0.270581,0.018060,0.650420,-0.212785,-0.056288,-0.022979,0.353534,-0.866041,-0.353534,0.215991,0.650870,-0.214224,-0.060048,-0.012436,0.331393,-0.923890,-0.191330,0.037611,0.687049,-0.201498,-0.051564,-0.019783,0.527178,-0.793375,-0.304367,0.215991,0.650870,-0.212785,-0.056288,-0.022979,0.353534,-0.866041,-0.353534,0.980310,0.611810,-0.207786,-0.051564,-0.027978,0.430439,-0.793375,-0.430439,0.199067,0.614250,-0.207620,-0.056288,-0.016249,0.432989,-0.866041,-0.249986,0.199210,0.613770,-0.203266,-0.045959,-0.032498,0.499982,-0.707133,-0.499982,0.181640,0.589547,-0.201498,-0.051564,-0.019783,0.527178,-0.793375,-0.304367,0.003745,0.613794,-0.207786,-0.051564,-0.027978,0.430439,-0.793375,-0.430439,0.977530,0.586930,-0.195963,-0.045959,-0.022979,0.612350,-0.707133,-0.353540,0.199067,0.614250,-0.191108,-0.039567,-0.025782,0.687046,-0.608790,-0.396666,0.181640,0.589547,-0.203266,-0.045959,-0.032498,0.499982,-0.707133,-0.499982,0.958000,0.550309,-0.199303,-0.039567,-0.036462,0.560970,-0.608790,-0.560970,0.157220,0.552923,-0.195963,-0.045959,-0.022979,0.612350,-0.707133,-0.353540,0.977531,0.586930,-0.187017,-0.032498,-0.028144,0.749986,-0.500027,-0.433005,0.157220,0.552923,-0.199303,-0.039567,-0.036462,0.560970,-0.608790,-0.560970,0.921693,0.514160,-0.195963,-0.032498,-0.039801,0.612361,-0.500027,-0.612361,0.140450,0.516600,-0.191108,-0.039567,-0.025782,0.687046,-0.608790,-0.396666,0.140620,0.516110,-0.183761,-0.024873,-0.030024,0.800095,-0.382707,-0.461935,0.140450,0.516600,-0.187017,-0.032498,-0.028144,0.749986,-0.500027,-0.433005,0.121090,0.479621,-0.195963,-0.032498,-0.039801,0.612361,-0.500027,-0.612361,0.897438,0.477530,-0.193304,-0.024873,-0.042460,0.653275,-0.382707,-0.653275,0.121075,0.479980,-0.181394,-0.016822,-0.031390,0.836512,-0.258837,-0.482961,0.121075,0.479980,-0.183761,-0.024873,-0.030024,0.800095,-0.382707,-0.461935,0.924288,0.477066,-0.193304,-0.024873,-0.042460,0.653275,-0.382707,-0.653275,0.899410,0.452645,-0.191371,-0.016822,-0.044393,0.683009,-0.258837,-0.683009,0.098630,0.455258,-0.179958,-0.008484,-0.032220,0.858615,-0.130536,-0.495722,0.885250,0.416500,-0.181394,-0.016822,-0.031390,0.836512,-0.258837,-0.482961,0.885250,0.416031,-0.191371,-0.016822,-0.044393,0.683009,-0.258837,-0.683009,0.885049,0.416010,-0.190199,-0.008484,-0.045566,0.701057,-0.130536,-0.701057,0.284607,0.418450,-0.179476,0.000000,-0.032498,0.866025,0.0,-0.500000,0.284607,0.418450,-0.179958,-0.008484,-0.032220,0.858615,-0.130536,-0.495722,0.885049,0.416010,-0.190199,-0.008484,-0.045566,0.701057,-0.130536,-0.701057,0.884760,0.416025,-0.189805,0.000000,-0.045959,0.707107,0.0,-0.707107,0.884760,0.416500,-0.179476,0.000000,-0.032498,0.866025,0.0,-0.500000,0.865676,0.379390,-0.190199,0.008484,-0.045566,0.701057,0.130536,-0.701057,0.865230,0.379880,-0.179958,0.008484,-0.032220,0.858615,0.130536,-0.495722,0.865668,0.379880,-0.189805,0.000000,-0.045959,0.707107,0.0,-0.707107,0.865230,0.379407,-0.179958,0.008484,-0.032220,0.858615,0.130536,-0.495722,0.826660,0.318365,-0.191371,0.016822,-0.044393,0.683009,0.258837,-0.683009,0.826170,0.318840,-0.181394,0.016822,-0.031390,0.836512,0.258837,-0.482961,0.826660,0.318840,-0.190199,0.008484,-0.045566,0.701057,0.130536,-0.701057,0.826442,0.318350,-0.181394,0.016822,-0.031390,0.836512,0.258837,-0.482961,0.826442,0.318350,-0.193304,0.024873,-0.042460,0.653274,0.382707,-0.653275,0.826170,0.318840,-0.183761,0.024873,-0.030024,0.800095,0.382707,-0.461935,0.826170,0.318840,-0.191371,0.016822,-0.044393,0.683009,0.258837,-0.683009,0.826170,0.318375,-0.183761,0.024873,-0.030024,0.800095,0.382707,-0.461935,0.807063,0.281730,-0.195963,0.032498,-0.039801,0.612361,0.500027,-0.612361,0.784660,0.257810,-0.187017,0.032498,-0.028144,0.749986,0.500027,-0.433005,0.806640,0.282220,-0.193304,0.024873,-0.042460,0.653274,0.382707,-0.653275,0.806640,0.281760,-0.187017,0.032498,-0.028144,0.749986,0.500027,-0.433005,0.782322,0.257337,-0.199303,0.039567,-0.036462,0.560970,0.608790,-0.560970,0.970459,0.221190,-0.191108,0.039567,-0.025782,0.687046,0.608790,-0.396666,0.979980,0.257510,-0.195963,0.032498,-0.039801,0.612361,0.500027,-0.612361,0.767570,0.220718,-0.203266,0.045959,-0.032498,0.499982,0.707133,-0.499982,0.946204,0.184570,-0.191108,0.039567,-0.025782,0.687046,0.608790,-0.396666,0.767834,0.220718,-0.199303,0.039567,-0.036462,0.560970,0.608790,-0.560970,0.774900,0.220700,-0.195963,0.045959,-0.022979,0.612350,0.707133,-0.353540,0.970459,0.221190,-0.207786,0.051564,-0.027978,0.430439,0.793375,-0.430439,0.726070,0.160150,-0.201498,0.051564,-0.019783,0.527178,0.793375,-0.304367,0.748040,0.184570,-0.203266,0.045959,-0.032498,0.499982,0.707133,-0.499982,0.748040,0.184118,-0.195963,0.045959,-0.022979,0.612350,0.707133,-0.353540,0.748468,0.184080,-0.201498,0.051564,-0.019783,0.527178,0.793375,-0.304367,0.723774,0.159668,-0.207786,0.051564,-0.027978,0.430439,0.793375,-0.430439,0.711668,0.123530,-0.207620,0.056288,-0.016249,0.308479,0.934410,-0.178100,0.921380,0.159862,-0.212785,0.056288,-0.022979,0.251872,0.934410,-0.251872,0.909180,0.123268,-0.207620,0.056288,-0.016249,0.308479,0.934410,-0.178100,0.711682,0.123358,-0.218176,0.057362,-0.017588,0.056891,0.996758,-0.056891,0.907009,0.111320,-0.214224,0.057362,-0.012436,0.069677,0.996758,-0.040228,0.909180,0.123268,-0.212785,0.056288,-0.022979,0.251872,0.934410,-0.251872,0.719214,0.111320,-0.214224,0.057362,-0.012436,0.069677,0.996758,-0.040228,0.713882,0.111267,-0.224566,0.057553,-0.011198,-0.201790,0.958416,0.201790,0.923990,0.111320,-0.222050,0.057553,-0.007918,-0.247141,0.958416,0.142687,0.907009,0.111320,-0.218176,0.057362,-0.017588,0.056891,0.996758,-0.056891,0.738564,0.111320,-0.224997,0.055220,-0.006216,-0.685761,0.610717,0.395924,0.748530,0.098850,-0.229765,0.044143,-0.005999,-0.666058,0.335759,0.666058,0.970322,0.098630,-0.228417,0.044143,-0.004242,-0.815751,0.335759,0.470974,0.941252,0.099120,-0.226973,0.055220,-0.008791,-0.559922,0.610717,0.559922,0.748247,0.099120,-0.228417,0.044143,-0.004242,0.056641,0.997859,-0.032702,0.970322,0.098630,-0.229765,0.044143,-0.005999,0.046247,0.997859,-0.046247,0.579803,0.098630,-0.227570,-0.064439,-0.002196,0.126069,-0.991446,-0.033780,0.499204,0.748530,-0.221196,-0.062781,-0.008411,0.224128,-0.965931,-0.129401,0.462741,0.711910,-0.227570,-0.064439,-0.002196,0.126069,-0.991446,-0.033780,0.492180,0.735840,-0.228417,-0.064439,-0.004242,0.113031,-0.991446,-0.065258,0.264989,0.711910,-0.219515,-0.062781,-0.004354,0.249983,-0.965931,-0.066983,0.499204,0.748530,-0.214224,-0.060048,-0.012436,0.331393,-0.923890,-0.191330,0.457520,0.687417,-0.219515,-0.062781,-0.004354,0.249983,-0.965931,-0.066983,0.264988,0.711677,-0.221196,-0.062781,-0.008411,0.224128,-0.965931,-0.129401,0.240230,0.687235,-0.211739,-0.060048,-0.006438,0.369621,-0.923890,-0.099040,0.462741,0.711910,-0.207620,-0.056288,-0.016249,0.432989,-0.866041,-0.249986,0.438148,0.650870,-0.211739,-0.060048,-0.006438,0.369621,-0.923890,-0.099040,0.401850,0.650390,-0.214224,-0.060048,-0.012436,0.331393,-0.923890,-0.191330,0.215991,0.650870,-0.204374,-0.056288,-0.008411,0.482936,-0.866041,-0.129402,0.457520,0.687417,-0.201498,-0.051564,-0.019783,0.527178,-0.793375,-0.304367,0.404125,0.614250,-0.204374,-0.056288,-0.008411,0.482936,-0.866041,-0.129402,0.401850,0.613770,-0.207620,-0.056288,-0.016249,0.432989,-0.866041,-0.249986,0.199067,0.614250,-0.197546,-0.051564,-0.010241,0.587991,-0.793375,-0.157552,0.438148,0.650870,-0.195963,-0.045959,-0.022979,0.612350,-0.707133,-0.353540,0.398920,0.589720,-0.197546,-0.051564,-0.010241,0.587991,-0.793375,-0.157552,0.399410,0.589350,-0.201498,-0.051564,-0.019783,0.527178,-0.793375,-0.304367,0.181640,0.589547,-0.191371,-0.045959,-0.011895,0.682988,-0.707133,-0.183006,0.404125,0.614250,-0.185957,-0.039567,-0.013346,0.766300,-0.608790,-0.205329,0.384760,0.577627,-0.195963,-0.045959,-0.022979,0.612350,-0.707133,-0.353540,0.157220,0.552923,-0.191108,-0.039567,-0.025782,0.687046,-0.608790,-0.396666,0.379539,0.553220,-0.191371,-0.045959,-0.011895,0.682988,-0.707133,-0.183006,0.340820,0.552730,-0.181394,-0.032498,-0.014568,0.836501,-0.500027,-0.224140,0.379539,0.553220,-0.185957,-0.039567,-0.013346,0.766300,-0.608790,-0.205329,0.343260,0.516110,-0.191108,-0.039567,-0.025782,0.687046,-0.608790,-0.396666,0.140450,0.516600,-0.187017,-0.032498,-0.028144,0.749986,-0.500027,-0.433005,0.345516,0.516600,-0.177762,-0.024873,-0.015542,0.892390,-0.382707,-0.239115,0.345516,0.516600,-0.181394,-0.032498,-0.014568,0.836501,-0.500027,-0.224140,0.318840,0.479722,-0.187017,-0.032498,-0.028144,0.749986,-0.500027,-0.433005,0.121075,0.479980,-0.183761,-0.024873,-0.030024,0.800095,-0.382707,-0.461935,0.318829,0.479980,-0.175122,-0.016822,-0.016249,0.933008,-0.258837,-0.249999,0.326170,0.479850,-0.177762,-0.024873,-0.015542,0.892390,-0.382707,-0.239115,0.326159,0.479490,-0.183761,-0.024873,-0.030024,0.800095,-0.382707,-0.461935,0.098630,0.455258,-0.181394,-0.016822,-0.031390,0.836512,-0.258837,-0.482961,0.325680,0.479850,-0.175122,-0.016822,-0.016249,0.933008,-0.258837,-0.249999,0.284660,0.418450,-0.181394,-0.016822,-0.031390,0.836512,-0.258837,-0.482961,0.088860,0.418637,-0.173520,-0.008484,-0.016678,0.957661,-0.130536,-0.256604,0.320928,0.455560,-0.179958,-0.008484,-0.032220,0.858615,-0.130536,-0.495722,0.284468,0.418940,-0.173520,-0.008484,-0.016678,0.957661,-0.130536,-0.256604,0.286908,0.418450,-0.179958,-0.008484,-0.032220,0.858615,-0.130536,-0.495722,0.064896,0.382320,-0.172983,0.000000,-0.016822,0.965926,0.0,-0.258819,0.286902,0.418940,-0.179476,0.000000,-0.032498,0.866025,0.0,-0.500000,0.286620,0.418808,-0.172983,0.000000,-0.016822,0.965926,0.0,-0.258819,0.267519,0.381830,-0.179958,0.008484,-0.032220,0.858615,0.130536,-0.495722,0.267090,0.382187,-0.173520,0.008484,-0.016678,0.957661,0.130536,-0.256605,0.267570,0.382187,-0.179476,0.000000,-0.032498,0.866025,0.0,-0.500000,0.040030,0.357607,-0.173520,0.008484,-0.016678,0.957661,0.130536,-0.256605,0.040144,0.357607,-0.181394,0.016822,-0.031390,0.836512,0.258837,-0.482961,0.228291,0.321280,-0.175122,0.016822,-0.016249,0.933008,0.258837,-0.249999,0.262200,0.357778,-0.179958,0.008484,-0.032220,0.858615,0.130536,-0.495722,0.030270,0.320984,-0.175122,0.016822,-0.016249,0.933008,0.258837,-0.249999,0.030544,0.320983,-0.183761,0.024873,-0.030024,0.800095,0.382707,-0.461935,0.040030,0.321280,-0.177762,0.024873,-0.015542,0.892390,0.382707,-0.239115,0.228291,0.321280,-0.181394,0.016822,-0.031390,0.836512,0.258837,-0.482961,0.006270,0.284660,-0.177762,0.024873,-0.015542,0.892390,0.382707,-0.239115,0.208490,0.284180,-0.187017,0.032498,-0.028144,0.749986,0.500027,-0.433005,0.208490,0.284528,-0.181394,0.032498,-0.014568,0.836501,0.500027,-0.224140,0.208980,0.284532,-0.183761,0.024873,-0.030024,0.800095,0.382707,-0.461935,0.979980,0.257510,-0.181394,0.032498,-0.014568,0.836501,0.500027,-0.224140,0.980082,0.257510,-0.191108,0.039567,-0.025782,0.687046,0.608790,-0.396666,0.169693,0.223630,-0.185957,0.039567,-0.013346,0.766300,0.608790,-0.205329,0.203610,0.260122,-0.187017,0.032498,-0.028144,0.749986,0.500027,-0.433005,0.970459,0.221190,-0.185957,0.039567,-0.013346,0.766300,0.608790,-0.205329,0.970477,0.220892,-0.195963,0.045959,-0.022979,0.612350,0.707133,-0.353540,0.972650,0.221190,-0.191371,0.045959,-0.011895,0.682988,0.707133,-0.183006,0.169693,0.223630,-0.191108,0.039567,-0.025782,0.687046,0.608790,-0.396666,0.946204,0.184570,-0.191371,0.045959,-0.011895,0.682988,0.707133,-0.183006,0.149900,0.186520,-0.195963,0.045959,-0.022979,0.612350,0.707133,-0.353540,0.921380,0.159862,-0.197546,0.051564,-0.010241,0.587991,0.793375,-0.157552,0.150390,0.186890,-0.201498,0.051564,-0.019783,0.527178,0.793375,-0.304367,0.149900,0.186846,-0.197546,0.051564,-0.010241,0.587991,0.793375,-0.157552,0.921488,0.159861,-0.201498,0.051564,-0.019783,0.527178,0.793375,-0.304367,0.909180,0.123268,-0.204374,0.056288,-0.008411,0.344063,0.934410,-0.092191,0.145178,0.162590,-0.207620,0.056288,-0.016249,0.308479,0.934410,-0.178100,0.113280,0.125673,-0.204374,0.056288,-0.008411,0.344063,0.934410,-0.092191,0.909226,0.123260,-0.214224,0.057362,-0.012436,0.069677,0.996758,-0.040228,0.103689,0.113770,-0.211739,0.057362,-0.006438,0.077714,0.996758,-0.020823,0.113280,0.125673,-0.207620,0.056288,-0.016249,0.308479,0.934410,-0.178100,0.907009,0.111320,-0.220468,0.057553,-0.004099,-0.275650,0.958416,0.073860,0.103689,0.113770,-0.211739,0.057362,-0.006438,0.077714,0.996758,-0.020823,0.907034,0.110927,-0.214224,0.057362,-0.012436,0.069677,0.996758,-0.040228,0.923990,0.111320,-0.222050,0.057553,-0.007918,-0.247141,0.958416,0.142687,0.091375,0.113280,-0.223756,0.055220,-0.003218,-0.764867,0.610717,0.204946,0.941252,0.099120,-0.228417,0.044143,-0.004242,-0.815751,0.335759,0.470974,0.125970,0.101560,-0.227570,0.044143,-0.002196,-0.909852,0.335759,0.243794,0.083980,0.113770,-0.224997,0.055220,-0.006216,-0.685761,0.610717,0.395924,0.970322,0.098630,-0.227570,0.044143,-0.002196,0.063175,0.997859,-0.016928,0.125970,0.101560,-0.228417,0.044143,-0.004242,0.056641,0.997859,-0.032702,0.047850,0.040030,-0.235764,-0.064995,0.0,0.0,-1.0,0.000000,0.396970,0.775390,-0.218942,-0.062781,0.0,0.258801,-0.965931,0.0,0.665520,0.711910,-0.227280,-0.064439,0.0,0.130517,-0.991446,0.0,0.665520,0.711420,-0.227570,-0.064439,-0.002196,0.126069,-0.991446,-0.033780,0.462741,0.711910,-0.219515,-0.062781,-0.004354,0.249983,-0.965931,-0.066983,0.687343,0.711420,-0.210891,-0.060048,0.0,0.382659,-0.923890,0.0,0.663080,0.687181,-0.218942,-0.062781,0.0,0.258801,-0.965931,0.0,0.663080,0.687010,-0.219515,-0.062781,-0.004354,0.249983,-0.965931,-0.066983,0.457548,0.687010,-0.211739,-0.060048,-0.006438,0.369621,-0.923890,-0.099040,0.662590,0.687104,-0.203266,-0.056288,0.0,0.499972,-0.866041,-0.000000,0.604490,0.650870,-0.210891,-0.060048,0.0,0.382659,-0.923890,0.0,0.604490,0.650390,-0.211739,-0.060048,-0.006438,0.369621,-0.923890,-0.099040,0.438148,0.650870,-0.204374,-0.056288,-0.008411,0.482936,-0.866041,-0.129402,0.643220,0.650390,-0.196197,-0.051564,0.0,0.608733,-0.793375,-0.000000,0.606930,0.614250,-0.203266,-0.056288,0.0,0.499972,-0.866041,-0.000000,0.606930,0.613770,-0.204374,-0.056288,-0.008411,0.482936,-0.866041,-0.129402,0.404125,0.614250,-0.197546,-0.051564,-0.010241,0.587991,-0.793375,-0.157552,0.628728,0.613770,-0.196197,-0.051564,0.0,0.608733,-0.793375,-0.000000,0.399410,0.589710,-0.191371,-0.045959,-0.011895,0.682988,-0.707133,-0.183006,0.604000,0.589401,-0.189805,-0.045959,0.0,0.707081,-0.707133,-0.000000,0.399410,0.589840,-0.197546,-0.051564,-0.010241,0.587991,-0.793375,-0.157552,0.398920,0.589720,-0.189805,-0.045959,0.0,0.707081,-0.707133,-0.000000,0.538570,0.552730,-0.191371,-0.045959,-0.011895,0.682988,-0.707133,-0.183006,0.379539,0.553220,-0.184200,-0.039567,0.0,0.793332,-0.608790,0.000000,0.538570,0.553220,-0.185957,-0.039567,-0.013346,0.766300,-0.608790,-0.205329,0.584613,0.552730,-0.184200,-0.039567,0.0,0.793332,-0.608790,0.000000,0.548340,0.516110,-0.185957,-0.039567,-0.013346,0.766300,-0.608790,-0.205329,0.345516,0.516600,-0.179476,-0.032498,0.0,0.866010,-0.500027,-0.000000,0.548340,0.516600,-0.181394,-0.032498,-0.014568,0.836501,-0.500027,-0.224140,0.570122,0.516110,-0.179476,-0.032498,0.0,0.866010,-0.500027,-0.000000,0.523920,0.479490,-0.181394,-0.032498,-0.014568,0.836501,-0.500027,-0.224140,0.318829,0.479980,-0.175716,-0.024873,0.0,0.923870,-0.382707,0.0,0.523920,0.479980,-0.177762,-0.024873,-0.015542,0.892390,-0.382707,-0.239115,0.550750,0.479490,-0.175716,-0.024873,0.0,0.923870,-0.382707,0.0,0.326143,0.479850,-0.177762,-0.024873,-0.015542,0.892390,-0.382707,-0.239115,0.320928,0.455560,-0.172983,-0.016822,0.0,0.965921,-0.258837,0.000000,0.550749,0.479529,-0.175122,-0.016822,-0.016249,0.933008,-0.258837,-0.249999,0.525998,0.455070,-0.172983,-0.016822,0.0,0.965921,-0.258837,0.000000,0.489740,0.418450,-0.175122,-0.016822,-0.016249,0.933008,-0.258837,-0.249999,0.284468,0.418940,-0.171325,-0.008484,0.0,0.991444,-0.130536,-0.000000,0.489740,0.418940,-0.173520,-0.008484,-0.016678,0.957661,-0.130536,-0.256604,0.489537,0.418940,-0.171325,-0.008484,0.0,0.991444,-0.130536,-0.000000,0.286902,0.418940,-0.173520,-0.008484,-0.016678,0.957661,-0.130536,-0.256604,0.286620,0.418808,-0.170769,0.000000,0.0,1.0,0.0,0.0,0.286904,0.418940,-0.172983,0.000000,-0.016822,0.965926,0.0,-0.258819,0.492136,0.381830,-0.170769,0.000000,0.0,1.0,0.0,0.0,0.267570,0.382187,-0.173520,0.008484,-0.016678,0.957661,0.130536,-0.256605,0.467396,0.357420,-0.171325,0.008484,0.0,0.991444,0.130536,-0.000000,0.267519,0.382320,-0.172983,0.000000,-0.016822,0.965926,0.0,-0.258819,0.267090,0.382187,-0.171325,0.008484,0.0,0.991444,0.130536,-0.000000,0.262315,0.357778,-0.175122,0.016822,-0.016249,0.933008,0.258837,-0.249999,0.264640,0.357910,-0.172983,0.016822,0.0,0.965921,0.258837,0.000000,0.467396,0.357456,-0.173520,0.008484,-0.016678,0.957661,0.130536,-0.256605,0.228291,0.321280,-0.172983,0.016822,0.0,0.965921,0.258837,0.000000,0.228295,0.321151,-0.177762,0.024873,-0.015542,0.892390,0.382707,-0.239115,0.433538,0.284180,-0.175716,0.024873,0.0,0.923870,0.382707,0.0,0.452908,0.320836,-0.175122,0.016822,-0.016249,0.933008,0.258837,-0.249999,0.264640,0.320800,-0.175716,0.024873,0.0,0.923870,0.382707,0.0,0.357910,0.259760,-0.181394,0.032498,-0.014568,0.836501,0.500027,-0.224140,0.408800,0.259760,-0.179476,0.032498,0.0,0.866010,0.500027,-0.000000,0.357910,0.260150,-0.177762,0.024873,-0.015542,0.892390,0.382707,-0.239115,0.203610,0.260122,-0.179476,0.032498,0.0,0.866010,0.500027,-0.000000,0.203718,0.260122,-0.185957,0.039567,-0.013346,0.766300,0.608790,-0.205329,0.394314,0.223140,-0.184200,0.039567,0.0,0.793332,0.608789,0.000000,0.408802,0.259801,-0.181394,0.032498,-0.014568,0.836501,0.500027,-0.224140,0.169693,0.223630,-0.184200,0.039567,0.0,0.793332,0.608789,0.000000,0.169702,0.223505,-0.191371,0.045959,-0.011895,0.682988,0.707133,-0.183006,0.374949,0.186520,-0.189805,0.045959,0.0,0.707081,0.707133,-0.000000,0.394317,0.223185,-0.185957,0.039567,-0.013346,0.766300,0.608790,-0.205329,0.198730,0.223140,-0.189805,0.045959,0.0,0.707081,0.707133,-0.000000,0.150390,0.186890,-0.191371,0.045959,-0.011895,0.682988,0.707133,-0.183006,0.149900,0.186846,-0.196197,0.051564,0.0,0.608733,0.793375,-0.000000,0.149900,0.187010,-0.197546,0.051564,-0.010241,0.587991,0.793375,-0.157552,0.350339,0.162100,-0.196197,0.051564,0.0,0.608733,0.793375,-0.000000,0.145187,0.162437,-0.204374,0.056288,-0.008411,0.344063,0.934410,-0.092191,0.338040,0.125480,-0.203266,0.056288,0.0,0.356200,0.934410,-0.000000,0.350344,0.162156,-0.197546,0.051564,-0.010241,0.587991,0.793375,-0.157552,0.113280,0.125673,-0.203266,0.056288,0.0,0.356200,0.934410,-0.000000,0.113371,0.125672,-0.211739,0.057362,-0.006438,0.077714,0.996758,-0.020823,0.306392,0.113280,-0.210891,0.057362,-0.000000,0.080456,0.996758,0.000000,0.311188,0.125874,-0.204374,0.056288,-0.008411,0.344063,0.934410,-0.092191,0.103689,0.113770,-0.219928,0.057553,-0.000000,-0.285374,0.958416,0.0,0.299062,0.113747,-0.210891,0.057362,-0.000000,0.080456,0.996758,0.000000,0.103707,0.113387,-0.211739,0.057362,-0.006438,0.077714,0.996758,-0.020823,0.091375,0.113280,-0.220468,0.057553,-0.004099,-0.275650,0.958416,0.073860,0.296845,0.101070,-0.223332,0.055220,-0.000000,-0.791849,0.610717,0.0,0.083980,0.113770,-0.227570,0.044143,-0.002196,-0.909852,0.335759,0.243794,0.330983,0.101070,-0.227280,0.044143,-0.000000,-0.941948,0.335759,0.0,0.325862,0.101070,-0.223756,0.055220,-0.003218,-0.764867,0.610717,0.204946,0.130370,0.101070,-0.235764,0.044699,-0.000000,0.0,1.0,0.000000,0.658093,0.106309,-0.227280,0.044143,-0.000000,0.065403,0.997859,0.0,0.669920,0.032710,-0.220468,0.057553,0.004099,-0.275650,0.958416,-0.073860,0.296845,0.101070,-0.223332,0.055220,-0.000000,-0.791849,0.610717,0.0,0.479628,0.101560,-0.223756,0.055220,0.003218,-0.764867,0.610717,-0.204946,0.482339,0.101560,-0.219928,0.057553,-0.000000,-0.285374,0.958416,0.0,0.325862,0.101070,-0.222050,0.057553,0.007918,-0.247141,0.958416,-0.142687,0.726197,0.101070,-0.223756,0.055220,0.003218,-0.764867,0.610717,-0.204946,0.755613,0.101560,-0.224997,0.055220,0.006216,-0.685761,0.610717,-0.395924,0.755370,0.113658,-0.220468,0.057553,0.004099,-0.275650,0.958416,-0.073860,0.482068,0.101184,-0.224997,0.055220,0.006216,-0.685761,0.610717,-0.395924,0.950881,0.101560,-0.226973,0.055220,0.008791,-0.559922,0.610717,-0.559922,0.950728,0.113770,-0.222050,0.057553,0.007918,-0.247141,0.958416,-0.142687,0.762939,0.101109,-0.224566,0.057553,0.011198,-0.201790,0.958416,-0.201790,0.921549,0.101070,-0.226973,0.055220,0.008791,-0.559922,0.610717,-0.559922,0.118436,0.104000,-0.227846,0.057553,0.013714,-0.142687,0.958416,-0.247141,0.115953,0.103510,-0.224566,0.057553,0.011198,-0.201790,0.958416,-0.201790,0.958201,0.101113,-0.229548,0.055220,0.010767,-0.395924,0.610717,-0.685761,0.116210,0.104000,-0.227846,0.057553,0.013714,-0.142687,0.958416,-0.247141,0.147460,0.115720,-0.229548,0.055220,0.010767,-0.395924,0.610717,-0.685761,0.343131,0.104000,-0.232546,0.055220,0.012009,-0.204946,0.610717,-0.764867,0.343014,0.116210,-0.231665,0.057553,0.015296,-0.073860,0.958416,-0.275650,0.140261,0.115835,-0.231665,0.057553,0.015296,-0.073860,0.958416,-0.275650,0.364740,0.115720,-0.235764,0.055220,0.012432,0.0,0.610717,-0.791849,0.577465,0.116210,-0.235764,0.057553,0.015836,0.0,0.958416,-0.285374,0.343019,0.116123,-0.232546,0.055220,0.012009,-0.204946,0.610717,-0.764867,0.584960,0.103833,-0.239863,0.057553,0.015296,0.073860,0.958416,-0.275650,0.577475,0.116027,-0.235764,0.055220,0.012432,0.0,0.610717,-0.791849,0.743581,0.104000,-0.238982,0.055220,0.012009,0.204946,0.610717,-0.764867,0.762982,0.116210,-0.235764,0.057553,0.015836,0.0,0.958416,-0.285374,0.762690,0.115720,-0.243682,0.057553,0.013714,0.142687,0.958416,-0.247141,0.997070,0.115720,-0.238982,0.055220,0.012009,0.204946,0.610717,-0.764867,0.997096,0.116210,-0.241980,0.055220,0.010767,0.395924,0.610717,-0.685761,0.997461,0.116210,-0.239863,0.057553,0.015296,0.073860,0.958416,-0.275650,0.743581,0.103854,-0.246962,0.057553,0.011198,0.201790,0.958416,-0.201790,0.008670,0.118160,-0.243682,0.057553,0.013714,0.142687,0.958416,-0.247141,0.008324,0.118160,-0.244555,0.055220,0.008791,0.559922,0.610717,-0.559922,0.194257,0.118650,-0.241980,0.055220,0.010767,0.395924,0.610717,-0.685761,0.193907,0.118650,-0.249479,0.057553,0.007918,0.247141,0.958416,-0.142687,0.194275,0.118468,-0.244555,0.055220,0.008791,0.559922,0.610717,-0.559922,0.487118,0.106440,-0.246531,0.055220,0.006216,0.685761,0.610717,-0.395924,0.469923,0.118650,-0.246962,0.057553,0.011198,0.201790,0.958416,-0.201790,0.162574,0.105950,-0.246531,0.055220,0.006216,0.685761,0.610717,-0.395924,0.640840,0.105950,-0.247773,0.055220,0.003218,0.764867,0.610717,-0.204946,0.633300,0.118295,-0.249479,0.057553,0.007918,0.247141,0.958416,-0.142687,0.487119,0.106324,-0.251061,0.057553,0.004099,0.275650,0.958416,-0.073860,0.523920,0.105950,-0.251061,0.057553,0.004099,0.275650,0.958416,-0.073860,0.633516,0.106440,-0.247773,0.055220,0.003218,0.764867,0.610717,-0.204946,0.709136,0.106440,-0.248196,0.055220,0.000000,0.791849,0.610717,0.0,0.719211,0.106440,-0.251600,0.057553,0.000000,0.285374,0.958416,0.0,0.633780,0.106085,-0.248196,0.055220,0.000000,0.791849,0.610717,0.0,0.025782,0.108880,-0.251061,0.057553,-0.004099,0.275650,0.958416,0.073860,0.719223,0.106262,-0.251600,0.057553,0.000000,0.285374,0.958416,0.0,0.641110,0.106261,-0.247773,0.055220,-0.003218,0.764867,0.610717,0.204946,0.025663,0.121090,-0.249479,0.057553,-0.007918,0.247141,0.958416,0.142687,0.025665,0.121034,-0.247773,0.055220,-0.003218,0.764867,0.610717,0.204946,0.152784,0.108880,-0.246531,0.055220,-0.006216,0.685761,0.610717,0.395924,0.181967,0.121090,-0.251061,0.057553,-0.004099,0.275650,0.958416,0.073860,0.033126,0.108530,-0.249479,0.057553,-0.007918,0.247141,0.958416,0.142687,0.203610,0.120600,-0.244555,0.055220,-0.008791,0.559922,0.610717,0.559922,0.409137,0.121090,-0.246962,0.057553,-0.011198,0.201790,0.958416,0.201790,0.203944,0.120600,-0.246531,0.055220,-0.006216,0.685761,0.610717,0.395924,0.406288,0.121090,-0.243682,0.057553,-0.013714,0.142687,0.958416,0.247141,0.416460,0.120600,-0.244555,0.055220,-0.008791,0.559922,0.610717,0.559922,0.423555,0.108880,-0.241980,0.055220,-0.010767,0.395924,0.610717,0.685761,0.635781,0.120600,-0.246962,0.057553,-0.011198,0.201790,0.958416,0.201790,0.416045,0.120600,-0.239863,0.057553,-0.015296,0.073860,0.958416,0.275650,0.799351,0.120600,-0.243682,0.057553,-0.013714,0.142687,0.958416,0.247141,0.543437,0.108390,-0.238982,0.055220,-0.012009,0.204946,0.610717,0.764867,0.843382,0.121090,-0.241980,0.055220,-0.010767,0.395924,0.610717,0.685761,0.845912,0.121090,-0.235764,0.055220,-0.012432,0.0,0.610717,0.791849,0.069435,0.111320,-0.235764,0.057553,-0.015836,0.0,0.958416,0.285374,0.032915,0.123040,-0.239863,0.057553,-0.015296,0.073860,0.958416,0.275650,0.768052,0.108390,-0.238982,0.055220,-0.012009,0.204946,0.610717,0.764867,0.067076,0.111320,-0.235764,0.055220,-0.012432,0.0,0.610717,0.791849,0.298935,0.111320,-0.231665,0.057553,-0.015296,-0.073860,0.958416,0.275650,0.069444,0.111209,-0.235764,0.057553,-0.015836,0.0,0.958416,0.285374,0.071770,0.110840,-0.232546,0.055220,-0.012009,-0.204946,0.610717,0.764867,0.296380,0.111243,-0.232546,0.055220,-0.012009,-0.204946,0.610717,0.764867,0.503946,0.111320,-0.227846,0.057553,-0.013714,-0.142687,0.958416,0.247141,0.503900,0.110840,-0.231665,0.057553,-0.015296,-0.073860,0.958416,0.275650,0.503900,0.110840,-0.229548,0.055220,-0.010767,-0.395924,0.610717,0.685761,0.504390,0.111204,-0.227846,0.057553,-0.013714,-0.142687,0.958416,0.247141,0.535692,0.110840,-0.229548,0.055220,-0.010767,-0.395924,0.610717,0.685761,0.748530,0.098850,-0.226973,0.055220,-0.008791,-0.559922,0.610717,0.559922,0.738564,0.111320,-0.224566,0.057553,-0.011198,-0.201790,0.958416,0.201790,0.536000,0.110840,-0.222050,0.057553,-0.007918,-0.247141,0.958416,0.142687,0.760534,0.110917,-0.226973,0.055220,-0.008791,-0.559922,0.610717,0.559922,0.941252,0.099120,-0.224997,0.055220,-0.006216,-0.685761,0.610717,0.395924,0.923990,0.111320,-0.224566,0.057553,-0.011198,-0.201790,0.958416,0.201790,0.542968,0.110840,-0.222050,0.057553,-0.007918,-0.247141,0.958416,0.142687,0.941252,0.099114,-0.223756,0.055220,-0.003218,-0.764867,0.610717,0.204946,0.091375,0.113280,-0.220468,0.057553,-0.004099,-0.275650,0.958416,0.073860,0.062446,0.101070,-0.224997,0.055220,-0.006216,-0.685761,0.610717,0.395924,0.083980,0.113770,-0.219928,0.057553,-0.000000,-0.285374,0.958416,0.0,0.099120,0.101070,-0.220468,0.057553,-0.004099,-0.275650,0.958416,0.073860,0.099120,0.101070,-0.223332,0.055220,-0.000000,-0.791849,0.610717,0.0,0.099034,0.101560,-0.223756,0.055220,-0.003218,-0.764867,0.610717,0.204946,0.130370,0.101560
-			],
-			"parts" : [
-				{
-					"id" : "part0",
-					"type" : "TRIANGLES",
-					"indices" : [
-						0,1,2,3,1,0,1,3,4,5,4,3,4,5,6,5,7,8,7,5,9,9,10,7,10,9,11,11,12,10,12,11,13,13,14,12,14,13,15,15,16,14,16,15,17,17,18,16,18,17,19,19,20,18,20,19,21,21,22,20,22,21,23,23,24,22,24,23,25,26,27,28,27,26,29,30,29,26,29,30,31,32,31,30,31,32,33,34,35,36,35,34,37,38,37,34,37,38,39,40,39,38,39,40,41,41,42,43,42,41,40,43,44,45,44,43,42,46,45,44,45,46,47,46,48,47,48,46,49,50,51,52,51,50,53,54,55,56,57,0,2,57,3,58,3,57,59,60,61,59,61,60,5,62,63,60,63,62,9,64,65,62,65,64,11,66,13,67,13,66,68,69,15,70,15,69,71,72,17,73,17,72,74,75,19,76,19,75,77,78,21,79,21,78,80,80,23,81,23,80,82,83,28,84,28,83,85,86,87,88,87,86,26,89,90,91,90,89,30,92,93,89,93,92,36,94,95,96,95,94,34,97,98,99,98,97,38,100,101,97,101,100,40,102,103,42,103,102,104,105,106,44,106,105,107,108,109,46,109,108,106,49,109,110,109,49,111,112,52,113,52,112,50,114,115,56,116,57,2,116,59,117,59,116,118,118,60,119,60,118,120,120,62,121,62,120,122,123,122,124,123,124,64,124,125,126,125,124,127,128,127,129,128,129,72,129,74,130,74,129,131,131,78,132,78,131,133,133,80,134,80,133,135,135,82,136,82,135,137,137,85,83,85,137,138,139,88,140,88,139,86,141,142,143,142,141,89,144,145,141,145,144,146,147,148,149,148,147,99,150,151,147,151,150,97,152,150,153,150,152,154,155,107,156,156,157,155,106,155,158,155,106,159,109,160,161,160,109,162,110,163,164,163,161,164,165,113,166,112,113,165,167,168,56,169,116,2,169,170,171,118,171,170,170,172,173,120,173,172,174,175,176,175,174,177,178,179,180,178,180,124,180,127,181,127,180,182,183,182,184,183,184,185,186,131,187,187,188,186,189,133,190,190,186,189,191,192,193,191,193,194,195,196,197,195,197,198,199,200,196,199,196,195,201,202,203,202,201,204,205,206,207,206,205,208,209,207,210,207,209,205,211,212,213,212,211,214,150,215,216,215,150,217,218,219,220,220,216,218,221,222,223,223,224,221,225,226,227,226,225,228,161,229,230,229,231,230,164,232,233,232,164,234,165,235,236,235,165,166,237,238,56,239,169,2,170,239,240,239,170,241,172,240,242,240,172,243,179,244,245,244,179,246,247,180,248,248,249,247,182,247,250,247,182,251,252,188,253,253,254,252,255,186,256,255,256,257,258,189,259,258,259,255,260,261,262,260,262,263,264,265,266,264,266,267,268,269,270,268,270,271,272,273,274,273,272,275,276,277,278,277,276,279,280,278,281,278,280,282,215,283,284,283,215,285,216,286,287,286,216,288,218,287,289,287,218,290,291,292,293,291,293,226,294,227,295,227,294,296,232,296,297,296,232,298,299,300,301,302,301,300,236,303,304,303,236,235,305,306,56,307,308,2,240,309,310,309,240,311,242,310,312,310,242,313,249,312,314,312,249,315,316,247,317,316,317,314,250,316,318,316,250,319,320,257,321,320,321,318,322,255,323,322,323,320,324,258,325,324,325,322,326,267,327,326,327,324,328,264,329,328,329,326,330,268,271,330,271,328,274,331,332,331,274,273,333,334,335,334,333,336,337,335,338,335,337,339,284,340,341,340,284,283,287,342,343,342,287,344,345,343,346,343,345,347,292,348,349,292,349,293,350,296,351,296,350,352,353,297,354,297,353,355,355,356,357,357,356,358,304,359,360,359,304,303,361,362,56,363,309,2,310,364,365,365,364,363,366,312,367,366,367,365,314,366,368,366,314,369,370,316,371,370,371,368,318,370,372,370,318,373,374,372,375,372,374,376,322,377,378,377,322,379,324,378,380,378,324,381,382,380,383,380,382,384,385,386,387,386,385,388,389,387,390,387,389,385,391,392,393,391,393,394,395,396,397,395,397,398,399,400,396,399,396,395,401,402,403,401,403,404,405,343,406,405,406,407,408,409,410,410,405,408,411,412,413,412,411,414,415,416,417,416,415,418,419,420,421,420,419,422,423,356,424,356,423,425,360,359,426,359,427,426,428,429,56,430,363,2,431,432,430,432,431,365,433,434,431,434,433,366,433,368,435,368,433,436,437,438,370,438,437,436,372,438,439,438,372,440,377,441,442,441,377,443,378,444,445,444,378,446,447,445,448,445,447,449,450,451,452,451,450,453,454,455,456,455,454,457,458,459,460,459,458,461,462,463,464,462,464,465,466,467,468,466,468,469,470,471,472,470,472,466,473,407,474,474,475,473,476,405,477,477,478,476,479,408,480,480,476,479,481,482,483,482,481,415,484,485,486,485,484,487,488,489,490,489,488,491,492,425,493,425,492,494,495,427,496,427,497,496,498,499,56,500,430,2,500,431,501,431,500,502,502,433,503,433,502,504,504,436,505,436,504,506,507,508,506,508,507,438,509,439,510,439,509,511,512,513,514,513,512,444,445,515,516,515,445,517,448,518,519,518,448,520,455,521,522,521,455,523,456,524,525,524,456,526,527,525,528,525,527,529,530,469,531,530,531,532,533,466,534,533,534,535,536,537,538,538,533,536,539,478,540,540,541,539,542,476,543,543,544,542,545,546,547,546,545,542,548,549,484,549,548,550,487,551,552,551,487,553,492,554,555,554,492,556,557,558,559,558,557,560,561,562,497,496,497,562,563,564,56,565,500,2,566,567,565,567,566,502,566,504,568,504,566,569,569,506,570,506,569,571,572,573,571,573,572,507,572,574,575,574,572,576,577,578,576,578,577,515,516,579,580,579,577,580,581,582,583,582,580,583,524,584,585,584,583,585,586,587,588,587,585,588,589,590,591,590,592,591,535,593,594,593,535,595,596,597,598,597,596,599,600,598,601,598,600,602,544,603,604,603,544,605,542,606,607,606,542,608,609,610,611,610,609,607,612,613,551,613,612,614,552,613,615,613,552,616,617,618,619,618,617,620,621,619,622,619,621,623,624,562,561,562,624,625,626,627,56,628,629,2,628,566,630,566,628,631,631,569,632,569,631,633,634,635,636,635,634,637,638,639,640,638,640,572,640,576,641,576,640,642,643,644,645,644,646,645,580,647,648,647,649,648,583,650,651,650,648,651,652,653,654,654,655,652,656,588,657,657,658,656,659,591,592,592,660,659,594,661,662,661,594,593,663,664,665,664,663,666,667,665,668,665,667,663,604,669,670,669,604,603,607,671,672,671,607,673,674,672,675,672,674,676,677,613,678,678,679,677,680,615,681,681,682,680,619,680,683,680,619,618,622,684,685,684,683,685,686,625,624,625,686,687,688,689,56,690,628,2,690,631,691,631,690,692,693,633,694,633,693,695,639,696,697,696,698,697,699,700,701,699,701,640,702,642,703,642,702,704,705,649,706,706,707,705,708,648,709,709,710,708,711,651,712,712,713,711,714,658,715,715,716,714,717,656,718,718,719,717,720,721,722,722,717,720,723,724,725,724,723,726,727,728,729,728,727,730,731,729,732,729,731,733,671,734,735,734,671,736,672,737,738,737,672,739,675,738,740,738,675,741,742,682,743,743,744,742,745,680,746,746,747,745,683,745,748,745,683,749,685,750,751,750,748,751,752,687,686,687,752,753,754,755,56,756,690,2,756,757,758,692,758,757,695,757,759,757,695,760,700,759,761,759,700,762,763,701,764,764,761,763,765,763,766,763,765,767,710,766,768,766,710,769,708,768,770,768,708,771,772,770,773,770,772,774,719,773,775,773,719,776,777,775,778,775,777,779,780,781,782,781,780,783,784,728,785,785,786,784,787,788,789,789,790,787,791,792,793,793,787,791,794,737,795,795,796,794,797,738,798,798,794,797,799,800,801,801,797,799,802,803,804,802,804,747,745,805,806,805,804,806,748,807,808,807,748,809,808,751,810,751,808,811,812,813,752,753,752,813,814,815,56,816,756,2,757,817,818,818,817,816,759,818,819,818,759,820,821,761,822,821,822,819,823,763,824,823,824,821,766,825,826,825,766,827,828,829,830,829,828,831,770,832,833,832,770,834,835,836,837,836,835,838,775,839,840,839,775,841,778,840,842,840,778,843,782,844,845,844,782,781,846,784,786,786,847,846,848,787,849,849,850,848,851,852,853,852,848,853,854,855,856,855,857,856,797,858,859,858,860,859,861,862,863,862,859,863,864,865,866,864,866,867,868,869,870,869,868,871,872,808,873,808,872,874,874,811,875,811,874,876,877,878,812,813,812,878,879,880,56,881,816,2,818,882,883,883,882,881,819,883,884,883,819,885,886,821,887,886,887,888,889,823,890,889,890,886,891,889,892,889,891,893,894,832,895,894,895,892,833,894,896,894,833,897,839,896,898,896,839,899,840,900,901,900,840,902,842,903,904,903,842,905,906,904,907,904,906,908,850,909,910,909,911,910,848,912,913,912,914,913,853,915,916,915,913,916,860,917,918,917,919,918,859,920,921,920,922,921,921,863,923,863,921,924,925,926,927,926,925,868,928,929,930,929,928,931,932,933,934,933,932,935,936,937,938,937,936,876,939,940,877,878,877,940,941,942,56,943,881,2,944,945,943,945,944,883,944,884,946,884,944,947,948,949,950,949,948,886,951,952,889,952,951,948,892,953,954,953,892,955,956,957,894,957,956,954,957,958,959,959,958,896,958,960,961,961,960,898,960,962,963,963,962,903,962,964,965,965,964,966,967,968,969,969,968,970,971,914,972,914,971,973,974,975,976,975,974,977,977,978,979,978,977,980,981,922,982,922,981,983,984,921,985,921,984,986,986,987,988,987,986,989,990,991,992,991,990,928,993,994,995,994,993,931,993,938,996,938,993,997,997,936,998,936,997,999,1000,940,939,940,1000,1001,1002,1003,56,1004,943,2,1004,944,1005,944,1004,1006,1006,950,1007,950,1006,1008,1008,948,1009,948,1008,1010,1011,1012,1010,1012,1011,952,1011,954,1013,954,1011,1014,1014,1015,1016,1016,1015,957,1015,1017,1018,1018,1017,958,1017,1019,1020,1020,1019,960,1021,1022,1023,1023,1022,1024,1025,1026,1027,1025,1027,964,967,1028,1029,967,1029,968,1030,973,971,973,1030,1031,1032,977,1033,977,1032,1034,1034,1035,1036,1035,1034,1037,1038,983,981,983,1038,1039,1040,986,1041,986,1040,1042,1042,1043,1044,1043,1042,1045,992,1046,990,1046,992,1047,993,1048,1049,1048,993,1050,997,1049,1051,1049,997,1052,1053,1054,1051,1054,1053,999,1055,1001,1000,1001,1055,1056,1057,1058,56,1059,1004,2,1059,1006,1060,1006,1059,1061,1062,1063,1061,1063,1062,1008,1064,1065,1062,1065,1064,1010,1066,1067,1064,1067,1066,1011,1066,1014,1068,1014,1066,1069,1070,1069,1071,1070,1071,1015,1072,1071,1073,1072,1073,1017,1074,1075,1076,1074,1076,1019,1077,1078,1079,1077,1079,1026,1080,1081,1082,1080,1082,1027,1083,1082,1084,1083,1084,1085,1086,1032,1087,1032,1086,1088,1089,1034,1090,1034,1089,1091,1091,1037,1092,1037,1091,1093,1094,1040,1095,1040,1094,1096,1097,1042,1098,1042,1097,1099,1099,1045,1100,1045,1099,1101,1102,1103,1048,1103,1102,1104,1049,1105,1106,1105,1049,1107,1051,1106,1108,1106,1051,1109,1110,1111,1053,1111,1110,1108,1112,1056,1055,1056,1112,1113,1114,1115,56,1116,1059,2,1116,1061,1117,1061,1116,1118,1118,1062,1119,1062,1118,1120,1121,1122,1123,1123,1122,1064,1124,1122,1125,1124,1125,1066,1125,1069,1126,1069,1125,1127,1128,1071,1129,1071,1128,1130,1130,1073,1131,1073,1130,1132,1132,1133,1134,1133,1132,1135,1135,1081,1136,1081,1135,1137,1137,1138,1139,1138,1137,1140,1141,1142,1143,1142,1141,1144,1145,1146,1147,1145,1147,1089,1148,1149,1150,1148,1150,1151,1152,1153,1150,1153,1152,1154,1155,1156,1157,1155,1157,1097,1158,1157,1159,1158,1159,1099,1160,1161,1159,1161,1160,1162,1163,1105,1164,1164,1165,1163,1106,1166,1167,1166,1106,1168,1108,1167,1169,1167,1108,1170,1111,1169,1171,1169,1111,1172,1173,1174,1112,1112,1174,1113,1175,1176,56,1177,1116,2,1177,1118,1178,1118,1177,1179,1180,1120,1181,1120,1180,1182,1183,1184,1185,1183,1185,1122,1186,1185,1187,1186,1187,1125,1188,1127,1189,1127,1188,1190,1191,1130,1192,1130,1191,1193,1193,1132,1194,1132,1193,1195,1196,1135,1197,1135,1196,1198,1199,1137,1200,1137,1199,1201,1201,1140,1202,1140,1201,1203,1203,1144,1141,1144,1203,1204,1146,1205,1206,1146,1206,1147,1207,1208,1209,1207,1209,1150,1209,1210,1211,1211,1210,1212,1213,1214,1215,1215,1214,1216,1217,1218,1219,1219,1218,1159,1218,1220,1221,1221,1220,1222,1223,1163,1165,1165,1224,1223,1167,1225,1226,1225,1167,1227,1169,1228,1229,1228,1169,1230,1171,1229,1231,1229,1171,1232,1233,1234,1173,1173,1234,1174,1235,1236,56,1237,1177,2,1179,1238,1239,1238,1237,1239,1240,1239,1241,1239,1240,1242,1185,1243,1244,1243,1245,1244,1246,1187,1247,1247,1244,1246,1248,1246,1249,1246,1248,1250,1251,1193,1252,1252,1253,1251,1251,1195,1254,1195,1251,1255,1255,1199,1256,1199,1255,1257,1257,1201,1258,1201,1257,1259,1259,1203,1260,1203,1259,1261,1261,1262,1263,1262,1261,1264,1265,1266,1267,1267,1266,1268,1269,1270,1271,1271,1270,1209,1270,1272,1273,1273,1272,1274,1275,1276,1277,1277,1276,1278,1279,1280,1281,1281,1280,1218,1280,1282,1283,1282,1280,1284,1285,1286,1287,1285,1287,1288,1289,1290,1291,1289,1291,1226,1229,1291,1292,1291,1229,1293,1294,1295,1296,1231,1296,1295,1297,1298,1233,1233,1298,1234,1299,1300,56,1301,1237,2,1239,1301,1302,1301,1239,1303,1245,1302,1304,1302,1245,1305,1306,1244,1307,1306,1307,1304,1308,1246,1309,1308,1309,1306,1253,1308,1310,1308,1253,1311,1312,1251,1313,1312,1313,1310,1314,1315,1312,1314,1255,1315,1316,1317,1314,1317,1316,1257,1318,1319,1316,1319,1318,1259,1320,1321,1322,1321,1320,1323,1324,1323,1320,1323,1324,1325,1326,1327,1328,1327,1326,1329,1330,1331,1332,1331,1330,1333,1333,1334,1331,1334,1333,1335,1336,1337,1338,1337,1336,1339,1340,1280,1341,1280,1340,1342,1342,1343,1344,1343,1342,1345,1346,1347,1348,1346,1348,1349,1350,1351,1352,1352,1351,1291,1351,1294,1353,1294,1351,1354,1354,1295,1355,1295,1354,1356,1357,1298,1297,1298,1357,1358,1359,1360,56,1361,1301,2,1302,1361,1362,1361,1302,1363,1304,1362,1364,1362,1304,1365,1366,1306,1367,1366,1367,1364,1368,1308,1369,1368,1369,1366,1310,1368,1370,1368,1310,1371,1372,1373,1374,1372,1312,1373,1375,1376,1372,1376,1375,1314,1377,1378,1375,1378,1377,1316,1379,1380,1381,1380,1379,1318,1382,1383,1384,1383,1382,1385,1386,1387,1388,1387,1386,1389,1390,1391,1392,1391,1390,1393,1394,1395,1396,1395,1394,1397,1397,1398,1399,1398,1397,1400,1401,1340,1402,1340,1401,1403,1404,1342,1405,1342,1404,1406,1406,1345,1407,1345,1406,1408,1409,1410,1411,1410,1409,1350,1412,1413,1414,1413,1412,1351,1412,1354,1415,1354,1412,1416,1417,1418,1416,1418,1417,1356,1419,1358,1357,1358,1419,1420,1421,1422,56,1,1361,1423,4,1424,1425,1424,4,1362,6,1426,1427,1426,6,1428,7,1429,1430,1429,7,1366,10,1431,1432,1431,10,1368,1370,1433,12,1433,1370,1434,14,1435,1436,1435,14,1372,16,1437,1438,1437,16,1375,18,1439,1440,1439,18,1377,20,1441,1442,1441,20,1384,1443,1444,1445,1444,1443,1382,27,1388,1446,1388,27,1386,1447,1393,1390,1393,1447,29,1448,1397,1449,1397,1448,1450,1451,1452,1453,1452,1451,35,1454,1404,1455,1404,1454,37,1456,1406,1457,1406,1456,39,1458,1459,1460,1459,1458,41,43,1411,1461,1411,43,1409,1462,1412,1463,1412,1462,45,1464,1416,1465,1416,1464,47,48,1466,1467,1466,48,1417,51,1468,1419,1468,51,53,1422,1469,1470,49,51,48,51,49,52,1471,110,113,110,1471,1472,1473,166,1474,166,1473,164,1475,1476,235,1476,1475,1477,1478,303,1479,303,1478,358,1480,356,359,1480,359,1481,425,1482,1483,1482,425,427,494,1484,1485,1484,494,497,561,1486,1487,561,1487,621,1488,622,624,622,1488,1489,1490,686,1491,686,1490,685,1492,752,1493,752,1492,751,1494,811,812,811,1494,1495,876,1496,1497,1496,876,877,1498,936,939,1498,939,1499,1500,1501,1502,1501,1500,1503,1055,1504,1505,1055,1505,1053,1506,1507,1112,1112,1507,1111,1508,1171,1173,1171,1508,1509,1510,1511,1512,1511,1510,1513,1514,1297,1515,1297,1514,1295,1356,1516,1517,1516,1356,1357,1518,1417,1419,1518,1419,1519,1520,1521,1522,1521,1523,1522,1524,1525,1526,1527,1528,1529,1528,1527,1530,1531,1532,1533,1532,1531,1534,1535,1536,1537,1536,1535,1538,1539,1540,1541,1540,1539,1542,1543,1544,1545,1544,1546,1545,1547,1548,1549,1548,1547,1550,1551,1552,1553,1552,1551,1554,1555,1556,1557,1556,1555,1558,1559,1560,1561,1560,1559,1562,1563,1564,1565,1564,1563,1566,1567,1568,1569,1568,1567,1570,1571,1572,1573,1573,1572,1574,1575,1576,1577,1577,1576,1578,1579,1580,1581,1581,1580,1582,1583,1584,1585,1585,1584,1586,1587,1588,1589,1589,1588,1590,1591,1592,1593,1593,1592,1594,1595,1596,1597,1596,1595,1598,1599,1600,1601,1600,1599,1602,1603,1604,1605,1603,1605,1606,1607,1608,1609,1608,1607,1610,1611,1612,1613,1611,1613,1614,1615,1616,1617,1524,1526,1618,1619,1620,1621,1620,1619,1622,1623,1624,1625,1624,1623,1626,1627,1628,1629,1628,1627,1630,1631,1632,1633,1632,1634,1633,1635,1636,1637,1636,1638,1637,1639,1640,1641,1640,1639,1642,1643,1644,1645,1644,1643,1646,1647,1648,1649,1648,1647,1650,1651,1652,1653,1652,1651,1654,1655,1656,1657,1656,1655,1658,1659,1660,1661,1660,1659,1662,1663,1664,1665,1665,1664,1666,1667,1668,1669,1669,1668,1670,1671,1672,1673,1673,1672,1674,1675,1676,1677,1675,1677,1678,1679,1680,1681,1679,1681,1682,1683,1684,1685,1683,1685,1686,1687,1688,1689,1688,1687,1690,1691,1692,1693,1692,1691,1694,1695,1696,1697,1696,1695,1698,1699,1700,1701,1700,1699,1702,1703,1704,1705,1703,1705,1706,1615,1707,1708,1524,1618,1709,1710,1711,1712,1710,1712,1713,1714,1715,1716,1715,1714,1717,1718,1719,1720,1718,1720,1721,1722,1723,1724,1723,1722,1725,1726,1727,1728,1727,1726,1729,1730,1731,1732,1732,1731,1733,1734,1735,1736,1735,1734,1737,1738,1739,1740,1739,1738,1741,1742,1743,1744,1743,1742,1745,1746,1747,1748,1747,1746,1749,1750,1751,1752,1751,1750,1753,1754,1755,1756,1754,1756,1757,1758,1759,1760,1758,1760,1761,1762,1763,1764,1762,1764,1765,1766,1767,1768,1766,1768,1769,1770,1771,1772,1770,1772,1773,1774,1775,1776,1775,1774,1777,1778,1779,1780,1779,1778,1781,1782,1783,1784,1783,1782,1785,1786,1787,1788,1787,1786,1789,1790,1791,1792,1791,1790,1793,1794,1795,1796,1794,1796,1797,1615,1798,1799,1524,1709,1800,1801,1802,1803,1801,1803,1804,1805,1806,1807,1806,1805,1808,1809,1810,1811,1810,1809,1812,1813,1814,1815,1815,1814,1816,1817,1818,1819,1818,1817,1820,1821,1822,1823,1823,1822,1824,1825,1826,1827,1827,1826,1828,1829,1830,1831,1830,1829,1832,1833,1834,1835,1834,1833,1836,1837,1838,1839,1838,1837,1840,1841,1842,1843,1842,1841,1844,1845,1846,1847,1846,1845,1848,1849,1850,1851,1850,1849,1852,1853,1854,1855,1854,1853,1856,1857,1858,1859,1858,1857,1860,1861,1862,1863,1862,1861,1864,1865,1866,1867,1866,1865,1868,1869,1870,1871,1870,1869,1872,1873,1874,1875,1874,1873,1876,1877,1878,1879,1878,1877,1880,1881,1882,1883,1882,1881,1884,1885,1886,1887,1886,1885,1888,1615,1889,1890,1524,1800,1891,1892,1893,1894,1893,1892,1895,1896,1897,1898,1897,1896,1899,1900,1901,1902,1901,1900,1903,1904,1905,1906,1906,1905,1907,1908,1909,1910,1910,1909,1911,1912,1913,1914,1913,1912,1915,1916,1917,1918,1917,1916,1919,1920,1921,1922,1921,1920,1923,1924,1925,1926,1925,1924,1927,1928,1929,1930,1929,1928,1931,1932,1933,1934,1933,1932,1935,1936,1937,1938,1937,1936,1939,1940,1941,1942,1941,1940,1943,1944,1945,1946,1945,1944,1947,1948,1949,1950,1949,1948,1951,1952,1953,1954,1953,1952,1955,1956,1957,1958,1957,1956,1959,1960,1961,1962,1961,1960,1963,1964,1965,1966,1965,1964,1967,1968,1969,1970,1969,1968,1971,1972,1973,1974,1972,1974,1975,1976,1977,1978,1977,1976,1979,1615,1980,1981,1524,1982,1983,1984,1985,1986,1985,1984,1987,1988,1989,1990,1989,1988,1991,1992,1993,1994,1993,1992,1995,1996,1997,1998,1997,1996,1999,2000,2001,2002,2001,2000,2003,2004,2005,2006,2005,2004,2007,2008,2009,2010,2009,2008,2011,2012,2013,2014,2013,2012,2015,2016,2017,2018,2017,2016,2019,2020,2021,2022,2021,2020,2023,2024,2025,2026,2025,2024,2027,2028,2029,2030,2029,2028,2031,2032,2033,2034,2033,2032,2035,2036,2037,2038,2037,2036,2039,2040,2041,2042,2041,2040,2043,2044,2045,2046,2045,2044,2047,2048,2049,2050,2049,2048,2051,2052,2053,2054,2053,2052,2055,2056,2057,2058,2059,2058,2057,2060,2061,2062,2061,2060,2063,2064,2065,2066,2065,2067,2066,2068,2069,2070,2069,2068,2071,1615,2072,2073,1524,2074,2075,2076,2077,2078,2077,2076,2079,2080,2081,2082,2081,2080,2083,2084,2085,2086,2085,2084,2087,2088,2089,2090,2089,2088,2091,2092,2093,2094,2093,2092,2095,2096,2097,2098,2097,2096,2099,2100,2101,2102,2101,2100,2103,2104,2105,2106,2105,2104,2107,2108,2109,2110,2109,2108,2111,2112,2113,2114,2113,2112,2115,2116,2117,2118,2117,2116,2119,2120,2121,2122,2121,2120,2123,2124,2125,2126,2125,2124,2127,2128,2129,2130,2129,2128,2131,2132,2133,2134,2133,2132,2135,2136,2137,2138,2137,2136,2139,2140,2141,2142,2141,2140,2143,2144,2145,2146,2145,2144,2147,2148,2149,2150,2149,2148,2151,2152,2153,2154,2153,2155,2154,2156,2157,2158,2157,2156,2159,2160,2161,2162,2161,2160,2163,1615,2164,2165,1524,2075,2166,2167,2168,2169,2167,2169,2170,2171,2172,2173,2171,2173,2174,2175,2176,2177,2176,2175,2178,2179,2180,2181,2180,2179,2182,2183,2184,2185,2184,2183,2186,2187,2188,2189,2188,2187,2190,2191,2192,2193,2192,2191,2194,2195,2196,2197,2196,2195,2198,2199,2200,2201,2200,2199,2202,2203,2204,2205,2204,2203,2206,2207,2208,2209,2208,2207,2210,2211,2212,2213,2212,2211,2214,2215,2216,2217,2216,2215,2218,2219,2220,2221,2220,2219,2222,2223,2224,2225,2224,2223,2226,2227,2228,2229,2228,2227,2230,2231,2232,2233,2232,2231,2234,2235,2236,2237,2236,2238,2237,2239,2240,2241,2240,2239,2242,2243,2244,2245,2244,2243,2246,2247,2248,2249,2248,2247,2250,2251,2252,2253,2252,2251,2254,1615,2255,2256,1524,2166,2257,2258,2259,2260,2259,2258,2261,2262,2263,2264,2262,2264,2265,2266,2267,2268,2268,2269,2266,2270,2271,2272,2271,2273,2272,2274,2275,2276,2275,2274,2277,2278,2279,2280,2279,2281,2280,2282,2283,2284,2283,2282,2285,2286,2287,2288,2287,2286,2289,2290,2291,2292,2291,2290,2293,2294,2295,2296,2295,2294,2297,2298,2299,2300,2299,2298,2301,2302,2303,2304,2303,2302,2305,2306,2307,2308,2307,2306,2309,2310,2311,2312,2311,2310,2313,2314,2315,2316,2315,2314,2317,2318,2319,2320,2319,2318,2321,2322,2323,2324,2323,2322,2325,2326,2327,2328,2327,2326,2329,2330,2331,2332,2331,2330,2333,2334,2335,2336,2335,2334,2337,2338,2339,2340,2338,2340,2341,2342,2343,2344,2343,2342,2345,1615,2346,2347,1524,2257,2348,2349,2350,2351,2351,2352,2349,2353,2354,2355,2355,2356,2353,2357,2358,2359,2358,2357,2360,2361,2362,2363,2362,2364,2363,2365,2366,2367,2366,2365,2368,2369,2370,2371,2370,2372,2371,2373,2374,2375,2375,2374,2376,2377,2378,2379,2379,2378,2380,2381,2382,2383,2383,2382,2384,2385,2386,2387,2387,2386,2388,2389,2390,2391,2391,2390,2392,2393,2394,2395,2394,2393,2396,2397,2398,2399,2398,2397,2400,2401,2402,2403,2402,2401,2404,2405,2406,2407,2406,2405,2408,2409,2410,2411,2410,2409,2412,2413,2414,2415,2414,2413,2416,2417,2418,2419,2418,2417,2420,2421,2422,2423,2422,2421,2424,2425,2426,2427,2426,2425,2428,2429,2430,2431,2430,2429,2432,2433,2434,2435,2434,2433,2436,1615,2437,2438,1524,2439,2440,2441,2442,2443,2443,2444,2441,2445,2446,2447,2445,2447,2448,2449,2450,2451,2450,2449,2452,2453,2454,2455,2454,2453,2456,2457,2458,2459,2458,2457,2460,2461,2462,2463,2463,2462,2464,2465,2466,2467,2467,2466,2468,2469,2470,2471,2471,2470,2472,2473,2474,2475,2475,2474,2476,2477,2478,2479,2479,2478,2480,2481,2482,2483,2483,2482,2484,2485,2486,2487,2486,2485,2488,2489,2490,2491,2490,2489,2492,2493,2494,2495,2494,2493,2496,2497,2498,2499,2498,2497,2500,2501,2502,2503,2502,2501,2504,2505,2506,2507,2506,2505,2508,2509,2510,2511,2510,2509,2512,2513,2514,2515,2514,2513,2516,2517,2518,2519,2518,2517,2520,2521,2522,2523,2522,2521,2524,2525,2526,2527,2526,2525,2528,1615,2529,2530,1524,2440,2531,2532,2533,2534,2533,2532,2535,2536,2537,2538,2537,2536,2539,2540,2541,2542,2541,2540,2543,2544,2545,2546,2546,2545,2547,2548,2549,2550,2549,2548,2551,2552,2553,2554,2554,2553,2555,2556,2557,2558,2558,2557,2559,2560,2561,2562,2562,2561,2563,2564,2565,2566,2566,2565,2567,2568,2569,2570,2570,2569,2571,2572,2573,2574,2574,2573,2575,2576,2577,2578,2577,2576,2579,2580,2581,2582,2581,2580,2583,2584,2585,2586,2585,2584,2587,2588,2589,2590,2589,2588,2591,2592,2593,2594,2593,2592,2595,2596,2597,2598,2597,2596,2599,2600,2601,2602,2601,2600,2603,2604,2605,2606,2605,2604,2607,2608,2609,2610,2609,2608,2611,2612,2613,2614,2613,2612,2615,2616,2617,2618,2617,2616,2619,1615,2620,2621,1524,2531,2622,2623,2624,2625,2623,2625,2626,2627,2628,2629,2629,2628,2630,2631,2632,2633,2633,2632,2634,2635,2636,2637,2637,2636,2638,2639,2640,2641,2641,2640,2642,2643,2644,2645,2644,2643,2646,2647,2648,2649,2648,2647,2650,2651,2652,2653,2652,2651,2654,2655,2656,2657,2656,2655,2658,2659,2660,2661,2660,2659,2662,2663,2664,2665,2664,2663,2666,2667,2668,2669,2668,2667,2670,2671,2672,2673,2673,2672,2674,2675,2676,2677,2677,2676,2678,2679,2680,2681,2680,2679,2682,2683,2684,2685,2684,2683,2686,2687,2688,2689,2689,2688,2690,2691,2692,2693,2692,2691,2694,2695,2696,2697,2696,2695,2698,2699,2700,2701,2700,2699,2702,2703,2704,2705,2704,2703,2706,2707,2708,2709,2707,2709,2710,1615,2711,2712,1524,2622,2713,2714,2715,2716,2715,2714,2717,2718,2719,2720,2719,2718,2721,2722,2723,2724,2723,2722,2725,2726,2727,2728,2727,2726,2729,2730,2731,2732,2731,2730,2733,2734,2735,2736,2735,2734,2737,2738,2739,2740,2739,2738,2741,2742,2743,2744,2743,2742,2745,2746,2747,2748,2747,2746,2749,2750,2751,2752,2751,2750,2753,2754,2755,2756,2755,2754,2757,2758,2759,2760,2760,2759,2761,2762,2763,2764,2764,2763,2765,2766,2767,2768,2768,2767,2769,2770,2771,2772,2772,2771,2773,2774,2775,2776,2776,2775,2777,2778,2779,2780,2781,2780,2779,2782,2783,2784,2785,2784,2783,2786,2787,2788,2787,2786,2789,2790,2791,2792,2791,2790,2793,2794,2795,2796,2795,2794,2797,2798,2799,2800,2798,2800,2801,1615,2802,2803,1524,2713,2804,2805,2806,2807,2806,2805,2808,2809,2810,2811,2810,2809,2812,2813,2814,2815,2814,2813,2816,2817,2818,2819,2818,2817,2820,2821,2822,2823,2822,2821,2824,2825,2826,2827,2826,2825,2828,2829,2830,2831,2830,2829,2832,2833,2834,2835,2834,2833,2836,2837,2838,2839,2838,2837,2840,2841,2842,2843,2842,2841,2844,2845,2846,2847,2846,2845,2848,2849,2850,2851,2851,2850,2852,2853,2854,2855,2855,2854,2856,2857,2858,2859,2859,2858,2860,2861,2862,2863,2863,2862,2864,2865,2866,2867,2868,2867,2866,2869,2870,2871,2870,2869,2872,2873,2874,2875,2874,2876,2875,2877,2878,2879,2878,2877,2880,2881,2882,2883,2882,2881,2884,2885,2886,2887,2887,2888,2885,2889,2890,2891,2891,2892,2889,1615,2893,2894,1524,2804,2895,2896,2897,2898,2897,2896,2899,2900,2901,2902,2900,2902,2903,2904,2905,2906,2905,2904,2907,2908,2909,2910,2909,2908,2911,2912,2913,2914,2913,2912,2915,2916,2917,2918,2917,2916,2919,2920,2921,2922,2921,2923,2922,2924,2925,2926,2925,2927,2926,2928,2929,2930,2929,2931,2930,2932,2933,2934,2933,2935,2934,2936,2937,2938,2937,2939,2938,2940,2941,2942,2941,2940,2943,2944,2945,2946,2945,2944,2947,2948,2949,2950,2949,2948,2951,2952,2953,2954,2953,2952,2955,2956,2957,2958,2957,2956,2959,2960,2961,2962,2961,2960,2963,2964,2965,2966,2965,2967,2966,2968,2969,2970,2969,2971,2970,2972,2973,2974,2973,2972,2975,2976,2977,2978,2977,2976,2979,2980,2981,2982,2981,2980,2983,1615,2984,2985,1524,2895,2986,2987,2988,2989,2988,2987,2990,2991,2992,2993,2992,2991,2994,2995,2996,2997,2996,2995,2998,2999,3000,3001,3001,3002,2999,3003,3004,3005,3004,3003,3006,3007,3008,3009,3008,3010,3009,3011,3012,3013,3012,3014,3013,3015,3016,3017,3016,3018,3017,3019,3020,3021,3020,3022,3021,3023,3024,3025,3026,3025,3024,3027,3028,3029,3030,3029,3028,3031,3032,3033,3032,3031,3034,3035,3036,3037,3036,3035,3038,3039,3040,3041,3040,3039,3042,3043,3044,3045,3044,3043,3046,3047,3048,3049,3048,3047,3050,3051,3052,3053,3052,3051,3054,3055,3056,3057,3056,3055,3058,3059,3060,3061,3060,3059,3062,3063,3064,3065,3064,3063,3066,3067,3068,3069,3067,3069,3070,3071,3072,3073,3072,3071,3074,1615,3075,3076,1524,2986,3077,3078,3079,3080,3079,3078,3081,3082,3083,3084,3084,3085,3082,3086,3087,3088,3087,3089,3088,3090,3091,3092,3091,3093,3092,3094,3095,3096,3095,3094,3097,3098,3099,3100,3101,3100,3099,3102,3103,3104,3105,3104,3103,3106,3107,3108,3109,3108,3107,3110,3111,3112,3113,3112,3111,3114,3115,3116,3117,3116,3115,3118,3119,3120,3121,3120,3119,3122,3123,3124,3123,3122,3125,3126,3127,3128,3127,3126,3129,3130,3131,3132,3131,3130,3133,3134,3135,3136,3135,3134,3137,3138,3139,3140,3139,3138,3141,3142,3143,3144,3143,3142,3145,3146,3147,3148,3147,3146,3149,3150,3151,3152,3151,3150,3153,3154,3155,3156,3155,3154,3157,3158,3159,3160,3159,3158,3161,3162,3163,3164,3163,3162,3165,1615,3166,3167,1524,3077,3168,3169,3170,3171,3171,3172,3169,3173,3174,3175,3174,3173,3176,3177,3178,3179,3177,3179,3180,3181,3182,3183,3182,3181,3184,3185,3186,3187,3186,3185,3188,3189,3190,3191,3190,3189,3192,3193,3194,3195,3194,3193,3196,3197,3198,3199,3198,3197,3200,3201,3202,3203,3202,3201,3204,3205,3206,3207,3206,3205,3208,3209,3210,3211,3210,3209,3212,3213,3214,3215,3216,3215,3214,3217,3218,3219,3220,3219,3218,3221,3222,3223,3224,3223,3222,3225,3226,3227,3228,3227,3226,3229,3230,3231,3232,3231,3230,3233,3234,3235,3236,3235,3234,3237,3238,3239,3238,3237,3240,3241,3242,3243,3242,3241,3244,3245,3246,3247,3246,3245,3248,3249,3250,3251,3250,3249,3252,3253,3254,3255,3255,3256,3253,1615,3257,3258,1524,3168,3259,3260,3261,3262,3260,3262,3263,3264,3265,3266,3265,3264,3267,3268,3269,3270,3269,3268,3271,3272,3273,3274,3274,3273,3275,3276,3277,3278,3277,3276,3279,3280,3281,3282,3281,3280,3283,3284,3285,3286,3285,3284,3287,3288,3289,3290,3289,3288,3291,3292,3293,3294,3293,3292,3295,3296,3297,3298,3297,3296,3299,3300,3301,3302,3301,3300,3303,3304,3305,3306,3307,3306,3305,3308,3309,3310,3311,3310,3309,3312,3313,3314,3313,3315,3314,3316,3317,3318,3317,3319,3318,3320,3321,3322,3321,3323,3322,3324,3325,3326,3325,3327,3326,3328,3329,3330,3329,3328,3331,3332,3333,3334,3333,3332,3335,3336,3337,3338,3337,3336,3339,3340,3341,3342,3341,3340,3343,3344,3345,3346,3346,3347,3344,1615,3348,3349,1524,3259,3350,3351,3352,3353,3352,3351,3354,3355,3356,3357,3356,3355,3358,3359,3360,3361,3360,3359,3362,3363,3364,3365,3365,3364,3366,3367,3368,3369,3368,3367,3370,3371,3372,3373,3373,3372,3374,3375,3376,3377,3376,3375,3378,3379,3380,3381,3380,3379,3382,3383,3384,3385,3384,3383,3386,3387,3388,3389,3388,3387,3390,3391,3392,3393,3392,3391,3394,3395,3396,3397,3396,3398,3397,3399,3400,3401,3400,3402,3401,3403,3404,3405,3404,3406,3405,3407,3408,3409,3408,3410,3409,3411,3412,3413,3412,3414,3413,3415,3416,3417,3416,3415,3418,3419,3420,3421,3420,3419,3422,3423,3424,3425,3424,3423,3426,3427,3428,3429,3428,3427,3430,3431,3432,3433,3431,3433,3434,3435,3436,3437,3437,3438,3435,1615,3439,3440,1524,3350,3441,3442,3443,3444,3443,3442,3445,3446,3447,3448,3447,3446,3449,3450,3451,3452,3451,3450,3453,3454,3455,3456,3455,3454,3457,3458,3459,3460,3459,3458,3461,3462,3463,3464,3463,3462,3465,3466,3467,3468,3466,3469,3467,3470,3471,3472,3470,3472,3473,3474,3475,3476,3474,3476,3477,3478,3479,3480,3478,3480,3481,3482,3483,3484,3482,3484,3485,3486,3487,3488,3487,3486,3489,3490,3491,3492,3491,3490,3493,3494,3495,3496,3495,3494,3497,3498,3499,3500,3499,3498,3501,3502,3503,3504,3503,3502,3505,3506,3507,3508,3507,3506,3509,3510,3511,3512,3513,3512,3511,3514,3515,3516,3515,3517,3516,3518,3519,3520,3519,3518,3521,3522,3523,3524,3523,3522,3525,3526,3527,3528,3527,3526,3529,1615,3530,3531,1524,3441,3532,3533,3534,3535,3534,3533,3536,3537,3538,3539,3538,3537,3540,3541,3542,3543,3542,3541,3544,3545,3546,3547,3546,3545,3548,3549,3550,3551,3550,3549,3552,3553,3554,3555,3553,3556,3554,3557,3558,3559,3557,3559,3560,3561,3562,3563,3561,3563,3564,3565,3566,3567,3565,3567,3568,3569,3570,3571,3571,3570,3572,3573,3574,3575,3575,3574,3576,3577,3578,3579,3578,3577,3580,3581,3582,3583,3582,3581,3584,3585,3586,3587,3586,3585,3588,3589,3590,3591,3590,3589,3592,3593,3594,3595,3594,3593,3596,3597,3598,3599,3598,3597,3600,3601,3602,3603,3602,3604,3603,3605,3606,3607,3606,3608,3607,3609,3610,3611,3610,3609,3612,3613,3614,3615,3615,3616,3613,3617,3618,3619,3618,3617,3620,1615,3621,3622,3623,3532,1525,3624,3625,3626,3624,3626,3627,3628,3629,3630,3628,3630,3631,3632,3633,3634,3632,3634,3635,3636,3637,3638,3636,3638,3639,3640,3641,3642,3641,3640,3643,3644,3645,3646,3646,3645,3647,3648,3649,3650,3650,3649,3651,3652,3653,3654,3654,3653,3655,3656,3657,3658,3658,3657,3659,3660,3661,3662,3662,3661,3663,3664,3665,3666,3666,3665,3667,3668,3669,3670,3669,3668,3671,3672,3673,3674,3673,3672,3675,3676,3677,3678,3677,3676,3679,3680,3681,3682,3681,3680,3683,3684,3685,3686,3685,3684,3687,3688,3689,3690,3689,3688,3691,3692,3693,3694,3693,3695,3694,3696,3697,3698,3697,3696,3699,3700,3701,3702,3701,3700,3703,3704,3705,3706,3704,3706,3707,3708,3709,3710,3709,3708,3711,3712,3713,3621,3714,3715,3716,3715,3714,3717,3718,3719,3720,3719,3718,3721,3722,3723,3724,3723,3725,3724,3726,3727,3728,3727,3726,3729,3730,3731,3732,3730,3732,3733,3734,3735,3736,3735,3734,3737,3738,3739,3740,3739,3738,3741,3742,3743,3744,3743,3742,3745,3746,3747,3748,3748,3747,3749,3750,3751,3752,3751,3750,3753,3754,3755,3756,3755,3757,3756,3758,3759,3760,3758,3760,3761,3762,3763,3764,3763,3762,3765,3766,3767,3768,3767,3766,3769,3770,3771,3772,3771,3770,3773,3774,3775,3776,3775,3774,3777,3778,3779,3780,3780,3779,3781,3782,3783,3784,3782,3784,3785,3786,3787,3788,3787,3786,3789,3790,3791,3792,3791,3790,3793,3794,3795,3796,3794,3796,3797,3798,3799,3800,3799,3798,3801,3802,3803,3804,3803,3802,3805,3806,3807,3808,3808,3807,3809
-					]
-				}
-			]
-		},
-		{
-			"id" : "head_Mesh",
-			"attributes" : [
-				"POSITION","NORMAL","TEXCOORD0"
-			],
-			"vertices" : [
-				0.023799,0.510357,0.745004,0.528556,-0.595550,-0.604936,0.506230,0.379270,0.025538,0.506920,0.751306,0.487261,-0.793031,-0.365621,0.505500,0.380400,0.023457,0.505255,0.750896,0.634622,-0.683828,-0.360046,0.504950,0.380190,0.025547,0.512706,0.744012,0.336391,-0.700107,-0.629834,0.506850,0.379210,0.020612,0.511379,0.742005,0.592944,-0.494774,-0.635308,0.506340,0.378740,0.020520,0.519840,0.735659,0.324645,-0.757675,-0.566157,0.507590,0.378260,0.021245,0.504078,0.748954,0.690492,-0.606347,-0.394416,0.504690,0.379600,0.018601,0.503152,0.744909,0.830024,-0.409918,-0.378190,0.504410,0.378700,0.017842,0.509571,0.739912,0.774839,-0.279910,-0.566811,0.505900,0.378320,0.013141,0.514960,0.733531,0.873073,-0.376316,-0.310048,0.506770,0.377900,0.015993,0.504368,0.736153,0.996946,-0.077739,0.007475,0.504970,0.377420,-0.023457,0.505255,0.750896,-0.634624,-0.683828,-0.360044,0.495040,0.380190,-0.023799,0.510357,0.745004,-0.528561,-0.595550,-0.604933,0.493760,0.379270,-0.021245,0.504078,0.748954,-0.690488,-0.606351,-0.394417,0.495300,0.379600,-0.020611,0.511379,0.742005,-0.592941,-0.494779,-0.635307,0.493650,0.378740,-0.020520,0.519840,0.735658,-0.324646,-0.757677,-0.566155,0.492400,0.378260,-0.025547,0.512706,0.744012,-0.336394,-0.700108,-0.629832,0.493140,0.379210,-0.025538,0.506920,0.751306,-0.487261,-0.793032,-0.365620,0.494490,0.380400,-0.015993,0.504368,0.736153,-0.996946,-0.077732,0.007479,0.495020,0.377420,-0.018601,0.503152,0.744909,-0.830023,-0.409920,-0.378189,0.495580,0.378700,-0.017842,0.509571,0.739912,-0.774835,-0.279917,-0.566812,0.494100,0.378320,-0.013141,0.514960,0.733531,-0.873072,-0.376319,-0.310046,0.493220,0.377900,0.176846,0.673443,0.622427,0.010256,-0.891498,0.452908,0.562560,0.429650,0.173516,0.674591,0.624131,-0.047456,-0.888799,0.455835,0.561450,0.430040,0.173356,0.672810,0.619408,-0.115568,-0.931533,0.344804,0.561620,0.428440,0.177426,0.672159,0.619253,-0.024382,-0.920238,0.390599,0.562960,0.428620,0.175631,0.677431,0.628633,0.278239,-0.662794,0.695189,0.561640,0.431650,0.179747,0.674956,0.624168,0.332887,-0.699928,0.631892,0.563230,0.430510,0.182122,0.672934,0.619987,0.312885,-0.770792,0.554963,0.564370,0.429260,-0.182340,0.672942,0.620023,-0.315812,-0.767800,0.557446,0.435620,0.429260,-0.177287,0.673474,0.622492,-0.006672,-0.889160,0.457548,0.437430,0.429650,-0.180085,0.674993,0.624199,-0.336369,-0.688353,0.642671,0.436760,0.430510,-0.177627,0.672175,0.619274,0.026361,-0.918752,0.393954,0.437040,0.428620,-0.175666,0.677475,0.628572,-0.278113,-0.659701,0.698175,0.438350,0.431650,-0.173702,0.674645,0.624107,0.049767,-0.886644,0.459767,0.438540,0.430040,-0.173673,0.672841,0.619422,0.117953,-0.928690,0.351600,0.438370,0.428440,0.067594,0.663079,0.632038,0.761848,0.001806,0.647754,0.533090,0.428050,0.072224,0.660250,0.630796,0.054638,0.843307,0.534648,0.534060,0.427030,0.070282,0.663446,0.627785,0.207123,0.734522,0.646203,0.533880,0.428010,0.075921,0.663961,0.628365,-0.370816,0.713050,0.595026,0.534660,0.427550,0.070282,0.663446,0.627785,0.568667,-0.440764,0.694511,0.533880,0.428010,0.070008,0.666268,0.630554,0.613637,-0.523077,0.591473,0.533530,0.428680,0.068952,0.668226,0.637557,0.636564,-0.457969,0.620524,0.532320,0.429260,0.075685,0.666626,0.627710,0.376713,-0.500461,0.779504,0.534590,0.428160,0.075921,0.663961,0.628365,0.209611,-0.334602,0.918752,0.534660,0.427550,-0.070372,0.666301,0.630655,-0.611625,-0.492835,0.618893,0.466460,0.428680,-0.076013,0.666662,0.627799,0.089711,-0.271744,0.958179,0.465400,0.428160,-0.070641,0.663487,0.627883,-0.559609,-0.421974,0.713285,0.466110,0.428010,-0.076350,0.664008,0.628485,-0.208473,-0.328295,0.921283,0.465330,0.427550,-0.067947,0.663112,0.632135,-0.750808,0.003233,0.660512,0.466900,0.428050,-0.068719,0.668213,0.637481,-0.632301,-0.436836,0.639821,0.467670,0.429260,-0.070641,0.663487,0.627883,-0.220891,0.699026,0.680124,0.466110,0.428010,-0.072078,0.660247,0.630745,-0.065520,0.833229,0.549033,0.465930,0.427030,-0.076350,0.664008,0.628485,0.363048,0.705038,0.609194,0.465330,0.427550,0.169858,0.672523,0.617550,0.033386,-0.871299,0.489616,0.560490,0.427750,0.173263,0.671486,0.616146,0.058172,-0.606060,0.793288,0.561570,0.427580,0.173563,0.671895,0.616806,-0.082368,-0.886772,0.454808,0.561730,0.427750,0.168641,0.672096,0.617428,0.311442,-0.389295,0.866864,0.560170,0.427640,0.168233,0.673556,0.620388,-0.009229,-0.912245,0.409540,0.559970,0.428450,0.161774,0.673561,0.621881,0.248915,-0.488489,0.836313,0.557970,0.428020,-0.173655,0.671903,0.616810,0.084135,-0.880892,0.465779,0.438260,0.427750,-0.170052,0.672552,0.617539,-0.028892,-0.869041,0.493896,0.439500,0.427750,-0.168654,0.673599,0.620431,0.012323,-0.912126,0.409724,0.440020,0.428450,-0.168854,0.672125,0.617429,-0.313051,-0.374341,0.872850,0.439820,0.427640,-0.161819,0.673598,0.621844,-0.250882,-0.469097,0.846762,0.442020,0.428020,-0.173355,0.671487,0.616159,-0.057622,-0.598566,0.798998,0.438420,0.427580,-0.250480,0.421322,0.272170,-0.970933,-0.239348,-0.001048,0.315680,0.297810,-0.246510,0.403501,0.282754,-0.950372,-0.309065,-0.035655,0.325030,0.291600,-0.252591,0.423238,0.282452,-0.927514,-0.303933,-0.217584,0.320070,0.300270,-0.251439,0.410341,0.293866,-0.905857,-0.366132,-0.213005,0.328550,0.296640,-0.258229,0.438028,0.285014,-0.929783,-0.283913,-0.234301,0.317890,0.307060,-0.256257,0.444113,0.265425,-0.970536,-0.239460,0.026826,0.307410,0.307010,-0.261084,0.425101,0.306708,-0.932653,-0.313878,-0.177874,0.330380,0.304990,0.261084,0.425101,0.306708,0.932653,-0.313878,-0.177874,0.669610,0.304990,0.252591,0.423238,0.282452,0.927514,-0.303933,-0.217585,0.679920,0.300270,0.258229,0.438028,0.285014,0.929783,-0.283912,-0.234302,0.682100,0.307060,0.251439,0.410341,0.293866,0.905857,-0.366132,-0.213004,0.671440,0.296640,0.250480,0.421322,0.272170,0.970933,-0.239348,-0.001056,0.684310,0.297810,0.256257,0.444113,0.265425,0.970535,-0.239462,0.026822,0.692590,0.307010,0.246510,0.403501,0.282754,0.950372,-0.309065,-0.035659,0.674960,0.291600,-0.283412,0.624700,0.303797,-0.978514,-0.068802,0.194364,0.299880,0.384890,-0.286571,0.612365,0.284841,-0.966593,-0.155897,0.203453,0.293040,0.377890,-0.282330,0.608867,0.304545,-0.981532,-0.048657,0.185009,0.301410,0.378330,-0.286502,0.630646,0.294039,-0.922200,-0.160659,0.351761,0.294880,0.386960,-0.282965,0.639722,0.311635,-0.985746,-0.059337,0.157430,0.302190,0.391610,-0.285978,0.649702,0.300900,-0.904636,-0.092815,0.415956,0.296320,0.395580,-0.280165,0.620895,0.326255,-0.991681,-0.069213,0.108524,0.310230,0.384060,0.280127,0.620893,0.326254,0.991759,-0.068664,0.108162,0.689760,0.384060,0.282255,0.608862,0.304527,0.981719,-0.047515,0.184307,0.698590,0.378330,0.283265,0.624691,0.303763,0.979134,-0.069478,0.190969,0.700110,0.384890,0.282973,0.639724,0.311655,0.985831,-0.058842,0.157084,0.697800,0.391610,0.286354,0.630637,0.294007,0.921994,-0.161678,0.351833,0.705110,0.386960,0.285920,0.649698,0.300891,0.904094,-0.094529,0.416748,0.703670,0.395580,0.286505,0.612362,0.284824,0.966450,-0.153833,0.205692,0.706950,0.377890,-0.282226,0.793690,0.408847,-0.969639,0.001773,0.244533,0.333400,0.459700,-0.282054,0.826024,0.403887,-0.969934,0.068265,0.233599,0.328120,0.470980,-0.286548,0.799038,0.390611,-0.980486,0.013820,0.196103,0.324340,0.460040,-0.277029,0.809417,0.426868,-0.959903,0.036837,0.277901,0.340270,0.466890,-0.272311,0.782757,0.444006,-0.959845,0.022949,0.279592,0.349950,0.458720,-0.280896,0.773746,0.412088,-0.972747,-0.017693,0.231193,0.336750,0.452790,-0.286125,0.772923,0.388885,-0.984563,-0.037515,0.170961,0.326420,0.450600,0.282482,0.793690,0.408964,0.970900,0.006080,0.239406,0.666600,0.459700,0.281073,0.773734,0.412172,0.972131,-0.018216,0.233731,0.663240,0.452790,0.286233,0.772907,0.388951,0.985480,-0.030698,0.166994,0.673570,0.450600,0.286279,0.799018,0.390596,0.981757,0.015545,0.189501,0.675650,0.460040,0.272306,0.782724,0.444028,0.958668,0.020867,0.283760,0.650040,0.458720,0.277061,0.809385,0.426916,0.959627,0.036910,0.278844,0.659720,0.466890,0.282072,0.826026,0.403946,0.970660,0.064802,0.231559,0.671870,0.470980,-0.264482,0.941991,0.420902,-0.940279,0.152670,0.304247,0.330330,0.525450,-0.280215,0.929074,0.374682,-0.967403,0.110618,0.227806,0.309790,0.511600,-0.279739,0.906105,0.384238,-0.965125,0.090266,0.245734,0.315270,0.503130,-0.269508,0.960864,0.396788,-0.941245,0.202567,0.270229,0.316990,0.529770,-0.285602,0.923731,0.348819,-0.979959,0.108962,0.166755,0.299220,0.505980,-0.289206,0.868533,0.347006,-0.988987,0.048750,0.139745,0.300960,0.482840,-0.274972,0.971801,0.365208,-0.948402,0.241581,0.205358,0.302320,0.528700,0.274959,0.971799,0.365205,0.948638,0.240587,0.205437,0.697670,0.528700,0.280117,0.929039,0.374663,0.967416,0.113106,0.226527,0.690200,0.511600,0.285459,0.923700,0.348788,0.980161,0.109846,0.164977,0.700770,0.505980,0.269406,0.960852,0.396763,0.941012,0.201929,0.271515,0.683000,0.529770,0.279913,0.906102,0.384305,0.965306,0.094535,0.243407,0.684720,0.503130,0.289200,0.868522,0.347013,0.989305,0.049423,0.137231,0.699030,0.482840,0.264210,0.941943,0.420833,0.939834,0.156648,0.303601,0.669660,0.525450,-0.295786,0.706950,0.260552,-0.047511,0.940378,0.336797,0.939680,0.706150,-0.299872,0.712919,0.237835,0.156596,0.980311,0.120282,0.927500,0.706360,-0.301308,0.708116,0.254120,0.080218,0.942390,0.324755,0.936250,0.704330,-0.306006,0.714715,0.236057,0.293257,0.948610,0.118909,0.926380,0.703380,-0.302932,0.705689,0.261012,-0.135201,0.861666,0.489134,0.939410,0.702900,-0.291151,0.696232,0.285996,-0.844106,0.332676,0.420490,0.954670,0.703520,-0.312136,0.717399,0.237346,0.177614,0.955219,0.236663,0.927270,0.700650,0.312144,0.717399,0.237349,-0.177434,0.955241,0.236710,0.072380,0.699340,0.301319,0.708116,0.254124,-0.080410,0.942419,0.324624,0.063410,0.703020,0.302972,0.705691,0.261027,0.135360,0.861674,0.489075,0.060240,0.701580,0.306013,0.714715,0.236059,-0.293154,0.948625,0.119040,0.073280,0.702060,0.295803,0.706950,0.260558,0.047025,0.940511,0.336494,0.059970,0.704830,0.291189,0.696236,0.286013,0.843694,0.331798,0.422008,0.044980,0.702180,0.299879,0.712919,0.237838,-0.156578,0.980311,0.120306,0.072150,0.705060,-0.326397,0.562313,0.199821,-0.896273,-0.126306,0.425138,0.927170,0.632070,-0.329208,0.576382,0.202005,-0.850173,-0.189856,0.491081,0.926640,0.638710,-0.332319,0.577330,0.193634,-0.950997,-0.185490,0.247383,0.921920,0.639050,-0.322589,0.567406,0.208286,-0.825972,-0.109078,0.553057,0.931510,0.634320,-0.329655,0.584565,0.204066,-0.804622,-0.122074,0.581103,0.926530,0.642400,-0.336153,0.591883,0.192537,-0.975065,-0.158509,0.155316,0.919520,0.645270,-0.317506,0.575178,0.214450,-0.401733,0.256109,0.879215,0.934710,0.637880,0.317481,0.575177,0.214443,0.401227,0.256510,0.879329,0.064950,0.636580,0.329194,0.576381,0.202001,0.849989,-0.189483,0.491543,0.073020,0.637410,0.329642,0.584565,0.204063,0.804358,-0.122002,0.581484,0.073130,0.641100,0.322580,0.567406,0.208283,0.825736,-0.108581,0.553507,0.068150,0.633020,0.332310,0.577329,0.193632,0.950943,-0.185261,0.247763,0.077740,0.637750,0.336145,0.591882,0.192535,0.974999,-0.158514,0.155727,0.080140,0.643970,0.326394,0.562313,0.199820,0.896156,-0.126064,0.425455,0.072490,0.630760,-0.261179,0.576082,0.259691,-0.776181,0.243242,0.581701,0.963290,0.639730,-0.269093,0.570683,0.252834,-0.736927,0.164739,0.655591,0.959550,0.637280,-0.265586,0.569842,0.256835,-0.767090,0.291299,0.571591,0.961710,0.637340,-0.261981,0.579242,0.258549,-0.667768,0.068401,0.741220,0.962820,0.640420,-0.254212,0.586907,0.264927,-0.717425,0.138989,0.682629,0.965400,0.642320,-0.257093,0.579295,0.264954,-0.789180,0.344579,0.508389,0.965180,0.640920,-0.261757,0.571098,0.262780,-0.821721,0.377552,0.426883,0.964410,0.638290,0.257057,0.579293,0.264944,0.788494,0.344664,0.509397,0.034480,0.639620,0.261743,0.571097,0.262776,0.821348,0.377726,0.427446,0.035250,0.636990,0.261162,0.576081,0.259687,0.775438,0.243869,0.582430,0.036370,0.638420,0.265581,0.569842,0.256834,0.766029,0.291186,0.573071,0.037940,0.636030,0.261957,0.579241,0.258542,0.667288,0.068628,0.741632,0.036840,0.639110,0.254193,0.586906,0.264923,0.717038,0.137867,0.683264,0.034260,0.641020,0.269087,0.570682,0.252833,0.736683,0.165374,0.655706,0.040100,0.635980,-0.270433,0.482047,0.260860,-0.595914,-0.791153,0.137709,0.961730,0.587380,-0.278215,0.483567,0.251257,-0.172713,-0.982907,-0.063749,0.954340,0.590500,-0.273272,0.482157,0.248450,-0.506466,-0.859641,-0.067152,0.953810,0.586820,-0.273201,0.485312,0.267309,-0.429723,-0.857308,0.283480,0.964430,0.590820,-0.267391,0.478705,0.261884,-0.831695,-0.547226,0.093956,0.963380,0.584720,-0.269630,0.484560,0.279227,-0.873458,-0.471959,0.119689,0.972980,0.590500,-0.269645,0.478536,0.245305,-0.826749,-0.561764,0.030134,0.953690,0.583050,0.267391,0.478705,0.261884,0.831694,-0.547226,0.093961,0.036270,0.583370,0.273272,0.482158,0.248450,0.506465,-0.859641,-0.067154,0.045860,0.585490,0.270433,0.482047,0.260860,0.595913,-0.791153,0.137713,0.037920,0.586040,0.269645,0.478536,0.245305,0.826750,-0.561763,0.030134,0.045980,0.581720,0.273201,0.485312,0.267309,0.429750,-0.857292,0.283488,0.035220,0.589480,0.269630,0.484560,0.279226,0.873480,-0.471865,0.119902,0.026650,0.589150,0.278215,0.483567,0.251257,0.172713,-0.982907,-0.063748,0.045330,0.589170,0.008186,0.550803,0.776428,0.140114,0.464661,0.874333,0.501120,0.390460,0.014379,0.562510,0.767567,0.329402,0.527998,0.782759,0.502450,0.392320,0.007042,0.562713,0.769063,0.114698,0.548861,0.828007,0.501210,0.392400,0.016690,0.550293,0.774368,0.351661,0.457965,0.816457,0.502290,0.390360,0.0,0.551039,0.776936,0.000004,0.470506,0.882397,0.500000,0.390550,-0.000004,0.562573,0.769109,0.000012,0.551846,0.833946,0.500000,0.392500,0.006719,0.575178,0.760376,0.123913,0.541157,0.831742,0.501360,0.394890,-0.000004,0.575416,0.760760,-0.000047,0.540407,0.841404,0.500000,0.395010,0.013760,0.574700,0.759061,0.319308,0.521120,0.791503,0.502670,0.394790,-0.014385,0.562510,0.767568,-0.328894,0.527860,0.783066,0.497540,0.392320,-0.008186,0.550804,0.776428,-0.139725,0.464822,0.874310,0.498880,0.390460,-0.007049,0.562713,0.769063,-0.114672,0.548820,0.828038,0.498780,0.392400,-0.016690,0.550294,0.774368,-0.349675,0.459292,0.816565,0.497700,0.390360,-0.013769,0.574701,0.759062,-0.318580,0.521030,0.791855,0.497320,0.394790,-0.006727,0.575178,0.760376,-0.123930,0.541091,0.831782,0.498630,0.394890,0.022443,0.587158,0.746477,0.580951,0.410389,0.702906,0.504740,0.398910,0.014940,0.588824,0.749801,0.350759,0.482681,0.802488,0.503230,0.398740,0.020876,0.573860,0.755884,0.580470,0.434747,0.688512,0.503940,0.394970,0.024577,0.601274,0.736309,0.617768,0.401918,0.675888,0.505800,0.403390,0.016768,0.603548,0.740562,0.405655,0.454035,0.793282,0.503840,0.403220,0.030302,0.583598,0.740232,0.740739,0.297835,0.602163,0.506840,0.399100,0.032673,0.596977,0.729533,0.725490,0.346665,0.594549,0.508290,0.403470,0.027696,0.571296,0.749207,0.770569,0.302600,0.560943,0.505850,0.395230,0.021513,0.561811,0.763378,0.596151,0.468212,0.652213,0.503780,0.392480,0.024439,0.549597,0.769821,0.600095,0.447052,0.663347,0.503650,0.390440,0.027969,0.560175,0.755985,0.775607,0.387948,0.497927,0.505730,0.392720,0.030656,0.548889,0.762259,0.759736,0.424141,0.492855,0.505610,0.390570,-0.022477,0.587157,0.746477,-0.580238,0.410536,0.703409,0.495250,0.398910,-0.014977,0.588823,0.749799,-0.350090,0.482280,0.803021,0.496760,0.398740,-0.020921,0.573866,0.755896,-0.579077,0.434731,0.689695,0.496050,0.394970,-0.027790,0.571308,0.749233,-0.770606,0.301400,0.561538,0.494140,0.395230,-0.030331,0.583600,0.740235,-0.739926,0.298354,0.602905,0.493150,0.399100,-0.024658,0.601281,0.736324,-0.617777,0.401831,0.675932,0.494190,0.403390,-0.032729,0.596980,0.729540,-0.723830,0.347093,0.596319,0.491710,0.403470,-0.016833,0.603553,0.740572,-0.405080,0.454264,0.793445,0.496150,0.403220,-0.021516,0.561811,0.763377,-0.595474,0.467497,0.653343,0.496220,0.392480,-0.024451,0.549602,0.769831,-0.598084,0.450378,0.662914,0.496340,0.390440,-0.030665,0.548892,0.762264,-0.759586,0.426937,0.490666,0.494380,0.390570,-0.027972,0.560174,0.755984,-0.776104,0.385579,0.498991,0.494260,0.392720,0.026533,0.622826,0.721259,0.693528,0.345920,0.631948,0.507160,0.409870,0.034194,0.608383,0.720390,0.722058,0.360350,0.590576,0.509530,0.406970,0.035723,0.617515,0.712276,0.714652,0.343119,0.609543,0.510800,0.409920,0.025516,0.613058,0.727924,0.662640,0.381536,0.644468,0.506510,0.406890,0.017293,0.615865,0.733540,0.455417,0.428392,0.780433,0.504060,0.406640,0.017728,0.626014,0.728029,0.483949,0.418700,0.768429,0.504230,0.409560,-0.026587,0.622827,0.721261,-0.694122,0.345334,0.631616,0.492830,0.409870,-0.034246,0.608388,0.720401,-0.720598,0.362904,0.590796,0.490470,0.406970,-0.025551,0.613060,0.727928,-0.662407,0.382183,0.644323,0.493480,0.406890,-0.035768,0.617521,0.712285,-0.714568,0.345296,0.608410,0.489200,0.409920,-0.017778,0.626015,0.728031,-0.483893,0.417858,0.768923,0.495760,0.409560,-0.017328,0.615866,0.733543,-0.455267,0.428706,0.780348,0.495930,0.406640,0.034265,0.567433,0.739863,0.829825,0.184356,0.526691,0.509200,0.395090,0.038532,0.578288,0.731550,0.773681,0.205631,0.599277,0.510150,0.398870,0.042072,0.590227,0.721209,0.732279,0.313101,0.604760,0.511620,0.403100,0.052567,0.581967,0.713483,0.651455,0.311196,0.691927,0.515390,0.402050,0.047301,0.571170,0.723008,0.698896,0.180856,0.691980,0.513960,0.397990,0.040966,0.562777,0.730320,0.766382,0.118393,0.631381,0.513060,0.394300,0.033641,0.559631,0.745980,0.854437,0.308065,0.418369,0.509060,0.392690,0.038577,0.558063,0.735092,0.834108,0.264731,0.483922,0.512830,0.391990,0.035314,0.549831,0.751770,0.825477,0.407595,0.390453,0.508750,0.390520,0.039237,0.550796,0.740531,0.810864,0.435786,0.390628,0.512320,0.389880,-0.034327,0.567440,0.739878,-0.830694,0.181972,0.526150,0.490790,0.395090,-0.038563,0.578291,0.731557,-0.773548,0.204107,0.599970,0.489840,0.398870,-0.040995,0.562778,0.730322,-0.765828,0.120540,0.631646,0.486930,0.394300,-0.047324,0.571173,0.723014,-0.699058,0.179750,0.692104,0.486030,0.397990,-0.052641,0.581976,0.713504,-0.652496,0.308835,0.692004,0.484600,0.402050,-0.042245,0.590247,0.721253,-0.731794,0.311792,0.606023,0.488370,0.403100,-0.033645,0.559630,0.745979,-0.854927,0.305502,0.419247,0.490930,0.392690,-0.035314,0.549831,0.751770,-0.825323,0.408696,0.389627,0.491240,0.390520,-0.039262,0.550811,0.740540,-0.805185,0.440835,0.396662,0.487670,0.389880,-0.038598,0.558068,0.735098,-0.830913,0.270059,0.486469,0.487160,0.391990,0.056265,0.592831,0.704473,0.603045,0.372523,0.705382,0.517130,0.405100,0.060151,0.601827,0.696242,0.575861,0.395912,0.715289,0.519250,0.407530,0.044391,0.601328,0.711927,0.697706,0.352322,0.623760,0.513160,0.406430,0.047544,0.610471,0.703663,0.664081,0.354019,0.658534,0.514940,0.409170,-0.056289,0.592834,0.704478,-0.603108,0.372042,0.705581,0.482860,0.405100,-0.044527,0.601344,0.711965,-0.697428,0.354184,0.623015,0.486830,0.406430,-0.060288,0.601850,0.696279,-0.575827,0.397318,0.714536,0.480740,0.407530,-0.047574,0.610474,0.703669,-0.662851,0.356628,0.658365,0.485060,0.409170,0.009018,0.649124,0.717520,0.196195,0.509939,0.837538,0.502590,0.417400,-0.000018,0.638301,0.725397,0.000082,0.511044,0.859554,0.500000,0.413160,0.009128,0.637668,0.724712,0.205816,0.500247,0.841066,0.502240,0.412990,-0.000050,0.649813,0.717945,0.000517,0.522989,0.852339,0.500000,0.417680,0.018681,0.647324,0.714896,0.477222,0.454355,0.752210,0.505450,0.417010,0.018640,0.635984,0.721843,0.490779,0.437989,0.753194,0.504790,0.412850,0.008828,0.627268,0.730597,0.196089,0.468619,0.861363,0.501990,0.409510,-0.000053,0.627668,0.731158,0.000254,0.474257,0.880386,0.500000,0.409570,0.028163,0.643969,0.707811,0.695371,0.373336,0.614068,0.509080,0.416910,0.038200,0.626388,0.704382,0.711965,0.351527,0.607893,0.512420,0.412810,0.039460,0.638418,0.695329,0.736190,0.386496,0.555558,0.514200,0.416620,0.028125,0.632443,0.714583,0.705148,0.345085,0.619422,0.508220,0.413000,-0.009098,0.649123,0.717516,-0.194932,0.508227,0.838872,0.497400,0.417400,-0.009177,0.637669,0.724714,-0.205726,0.500519,0.840926,0.497750,0.412990,-0.008910,0.627271,0.730605,-0.196090,0.468436,0.861462,0.498000,0.409510,-0.018707,0.635988,0.721851,-0.489623,0.437858,0.754023,0.495200,0.412850,-0.018730,0.647324,0.714894,-0.474924,0.450924,0.755721,0.494540,0.417010,-0.028296,0.643984,0.707840,-0.696038,0.367159,0.617029,0.490910,0.416910,-0.038139,0.626383,0.704347,-0.712643,0.350466,0.607711,0.487570,0.412810,-0.028215,0.632454,0.714602,-0.706338,0.342926,0.619265,0.491780,0.413000,-0.039519,0.638423,0.695340,-0.738076,0.382005,0.556162,0.485790,0.416620,0.016743,0.660488,0.707992,0.438298,0.440701,0.783376,0.505900,0.422730,0.008376,0.662059,0.710106,0.177264,0.477761,0.860420,0.502920,0.423170,-0.000048,0.662540,0.710246,0.001137,0.483719,0.875223,0.500000,0.423480,0.007458,0.674047,0.703775,0.160823,0.364221,0.917322,0.503170,0.429190,-0.000071,0.674609,0.704232,0.001019,0.366187,0.930541,0.500000,0.429470,0.014629,0.672965,0.702299,0.366674,0.333584,0.868488,0.506200,0.428770,0.031887,0.656926,0.694657,0.754439,0.338042,0.562628,0.512570,0.422800,0.024752,0.658364,0.702647,0.655319,0.374943,0.655725,0.509150,0.422510,0.020965,0.672014,0.698850,0.575791,0.262820,0.774203,0.508860,0.428610,0.026507,0.671613,0.693654,0.739962,0.208480,0.639525,0.511610,0.428700,0.006394,0.694382,0.701162,0.065530,-0.163915,0.984295,0.502920,0.437590,-0.000070,0.685058,0.701324,0.001157,0.123548,0.992338,0.500000,0.434050,0.006772,0.684516,0.700874,0.129893,0.119296,0.984325,0.503130,0.433690,-0.000073,0.694819,0.701550,0.000458,-0.148257,0.988949,0.500000,0.438020,0.012726,0.693749,0.700326,0.124514,-0.207867,0.970200,0.505750,0.437120,0.013359,0.683661,0.699680,0.256177,0.085691,0.962824,0.506080,0.433210,0.018745,0.693640,0.699403,0.271167,-0.262958,0.925916,0.508390,0.437480,0.019255,0.683260,0.697781,0.433362,0.014120,0.901109,0.508600,0.433270,0.024450,0.693100,0.696913,0.532542,-0.296974,0.792594,0.510860,0.437630,0.024676,0.683088,0.694507,0.666673,-0.046130,0.743922,0.511040,0.433390,-0.017014,0.660518,0.708054,-0.435778,0.440378,0.784962,0.494090,0.422730,-0.008553,0.662076,0.710141,-0.174403,0.477494,0.861152,0.497070,0.423170,-0.014780,0.672966,0.702304,-0.366559,0.336713,0.867329,0.493800,0.428770,-0.007592,0.674045,0.703770,-0.158752,0.364905,0.917411,0.496820,0.429190,-0.032182,0.656952,0.694707,-0.756638,0.338855,0.559175,0.487420,0.422800,-0.025045,0.658394,0.702710,-0.654828,0.375039,0.656160,0.490840,0.422510,-0.021092,0.672017,0.698856,-0.576345,0.268462,0.771852,0.491130,0.428610,-0.026625,0.671617,0.693663,-0.739847,0.213286,0.638071,0.488380,0.428700,-0.006542,0.694387,0.701174,-0.068420,-0.161110,0.984562,0.497070,0.437590,-0.006950,0.684526,0.700899,-0.129062,0.118912,0.984481,0.496860,0.433690,-0.013503,0.683669,0.699701,-0.258056,0.085840,0.962309,0.493910,0.433210,-0.012864,0.693761,0.700329,-0.130904,-0.201415,0.970719,0.494240,0.437120,-0.019333,0.683261,0.697785,-0.435685,0.014940,0.899975,0.491390,0.433270,-0.018913,0.693670,0.699401,-0.274208,-0.255663,0.927063,0.491600,0.437480,-0.024553,0.693123,0.696896,-0.531639,-0.292707,0.794785,0.489140,0.437630,-0.024753,0.683090,0.694510,-0.665553,-0.045472,0.744964,0.488950,0.433390,0.067769,0.615750,0.680059,0.636181,0.563002,0.527544,0.524170,0.411730,0.054440,0.626149,0.687430,0.687644,0.481854,0.543105,0.519430,0.414080,0.051467,0.618809,0.695894,0.655670,0.391301,0.645740,0.517080,0.411710,0.064724,0.609480,0.688399,0.597175,0.461795,0.655841,0.521790,0.409660,0.045892,0.643379,0.683345,0.794893,0.462182,0.393107,0.518190,0.419140,0.037425,0.657963,0.685512,0.835712,0.369077,0.406654,0.515960,0.423790,0.031530,0.671768,0.686228,0.870962,0.203059,0.447429,0.514890,0.428940,0.039845,0.659680,0.674899,0.892498,0.399376,0.209636,0.519330,0.425070,0.034868,0.672199,0.676546,0.946178,0.188225,0.263283,0.518400,0.429190,0.047393,0.646566,0.672439,0.830557,0.517254,0.206455,0.521250,0.421140,0.056022,0.631499,0.677919,0.731982,0.570227,0.372885,0.521760,0.416350,0.056041,0.635980,0.668081,0.742348,0.621503,0.250307,0.523980,0.418590,0.068363,0.621464,0.671698,0.643944,0.649130,0.404928,0.525830,0.413980,0.066798,0.626452,0.663000,0.606682,0.695746,0.384544,0.527110,0.416370,-0.064782,0.609490,0.688414,-0.598209,0.462546,0.654368,0.478200,0.409660,-0.051559,0.618825,0.695915,-0.654134,0.392769,0.646406,0.482910,0.411710,-0.067805,0.615763,0.680068,-0.637073,0.562384,0.527127,0.475820,0.411730,-0.054511,0.626154,0.687444,-0.687581,0.481329,0.543650,0.480560,0.414080,-0.045945,0.643381,0.683344,-0.794710,0.458160,0.398153,0.481800,0.419140,-0.037575,0.657978,0.685547,-0.835316,0.369445,0.407133,0.484030,0.423790,-0.047703,0.646599,0.672509,-0.829969,0.518135,0.206611,0.478740,0.421140,-0.040052,0.659690,0.674926,-0.891649,0.402166,0.207902,0.480660,0.425070,-0.031630,0.671768,0.686222,-0.870677,0.204569,0.447295,0.485100,0.428940,-0.034991,0.672208,0.676572,-0.946570,0.187451,0.262425,0.481590,0.429190,-0.056163,0.631513,0.677954,-0.733302,0.565858,0.376925,0.478230,0.416350,-0.068311,0.621465,0.671680,-0.645368,0.646878,0.406262,0.474160,0.413980,-0.056226,0.635999,0.668129,-0.744687,0.618095,0.251792,0.476020,0.418590,-0.066929,0.626465,0.663038,-0.609733,0.692942,0.384782,0.472890,0.416370,0.040882,0.661321,0.663001,0.891007,0.358495,0.278548,0.522760,0.426280,0.047508,0.649555,0.660522,0.820421,0.490877,0.293169,0.524200,0.423210,0.036994,0.672464,0.665053,0.946775,0.098534,0.306443,0.521850,0.429360,0.042084,0.673213,0.653486,0.795250,-0.061545,0.603150,0.524810,0.429440,0.045133,0.663790,0.651848,0.751168,0.245511,0.612756,0.525590,0.427200,0.050587,0.654064,0.650605,0.682841,0.352338,0.639989,0.526630,0.424890,0.055293,0.640169,0.657916,0.714221,0.600682,0.359262,0.526060,0.420990,0.056909,0.645577,0.648770,0.570371,0.431986,0.698617,0.527870,0.422980,0.065493,0.632062,0.654967,0.516130,0.674609,0.527743,0.528330,0.418830,0.066315,0.638426,0.647428,0.331574,0.512864,0.791852,0.529620,0.420950,-0.040852,0.661313,0.662961,-0.890764,0.358647,0.279128,0.477230,0.426280,-0.047629,0.649571,0.660549,-0.817159,0.495465,0.294559,0.475800,0.423210,-0.050710,0.654083,0.650629,-0.678264,0.358298,0.641545,0.473360,0.424890,-0.045384,0.663816,0.651903,-0.751578,0.245311,0.612334,0.474400,0.427200,-0.037148,0.672467,0.665064,-0.946326,0.093891,0.309277,0.478140,0.429360,-0.042273,0.673230,0.653517,-0.797424,-0.062891,0.600133,0.475180,0.429440,-0.055438,0.640193,0.657941,-0.711075,0.599403,0.367544,0.473930,0.420990,-0.065622,0.632071,0.654996,-0.518081,0.667238,0.535150,0.471660,0.418830,-0.057383,0.645634,0.648897,-0.565135,0.436984,0.699763,0.472120,0.422980,-0.066873,0.638489,0.647579,-0.332442,0.508764,0.794129,0.470370,0.420950,0.029932,0.691271,0.691048,0.748591,-0.309460,0.586384,0.514010,0.436490,0.029570,0.682509,0.688107,0.850468,-0.072062,0.521067,0.514290,0.432930,0.034594,0.688913,0.681631,0.821711,-0.364032,0.438487,0.517630,0.434960,0.033699,0.681588,0.678771,0.928028,-0.122164,0.351909,0.517890,0.432250,0.038668,0.686732,0.670878,0.722079,-0.529963,0.444682,0.521060,0.433740,0.036928,0.680659,0.667814,0.890289,-0.268167,0.368066,0.521330,0.431670,0.044564,0.684168,0.659911,0.492790,-0.695254,0.523239,0.524220,0.432720,0.042377,0.679856,0.656456,0.685624,-0.459331,0.564743,0.524390,0.431180,-0.030017,0.691271,0.691042,-0.747907,-0.307382,0.588347,0.485990,0.436490,-0.029759,0.682518,0.688129,-0.849641,-0.071517,0.522489,0.485700,0.432930,-0.033820,0.681595,0.678778,-0.928644,-0.119783,0.351102,0.482100,0.432250,-0.034730,0.688919,0.681641,-0.820537,-0.365392,0.439554,0.482360,0.434960,-0.038698,0.686737,0.670877,-0.720405,-0.531170,0.445954,0.478930,0.433740,-0.037089,0.680676,0.667844,-0.890102,-0.265158,0.370689,0.478660,0.431670,-0.042616,0.679888,0.656512,-0.689161,-0.456451,0.562769,0.475600,0.431180,-0.044727,0.684184,0.659952,-0.495228,-0.694021,0.522575,0.475770,0.432720,0.064404,0.572841,0.708207,0.531545,0.294428,0.794212,0.519230,0.400200,0.057203,0.562874,0.716597,0.583642,0.153726,0.797327,0.517550,0.396510,0.077836,0.562260,0.704350,0.435601,0.222701,0.872156,0.523090,0.397030,0.068544,0.552294,0.710583,0.471336,0.068033,0.879326,0.521080,0.393870,0.060162,0.546385,0.715175,0.481603,-0.107694,0.869747,0.519390,0.390670,0.049911,0.556318,0.723018,0.632968,0.029421,0.773619,0.516320,0.392950,0.046055,0.552927,0.726317,0.768760,0.206511,0.605278,0.515830,0.390530,0.054616,0.543388,0.717561,0.697278,0.019533,0.716535,0.518320,0.388250,0.046280,0.547617,0.731063,0.794816,0.466494,0.388137,0.515020,0.388370,0.054467,0.539178,0.722435,0.877318,0.345106,0.333489,0.516930,0.386190,-0.064422,0.572843,0.708212,-0.530543,0.293534,0.795212,0.480760,0.400200,-0.057260,0.562880,0.716612,-0.583401,0.155224,0.797213,0.482440,0.396510,-0.049987,0.556362,0.723042,-0.633185,0.034970,0.773210,0.483670,0.392950,-0.060227,0.546422,0.715197,-0.484074,-0.106187,0.868560,0.480600,0.390670,-0.068635,0.552307,0.710609,-0.471838,0.067989,0.879060,0.478910,0.393870,-0.077867,0.562263,0.704358,-0.435355,0.221557,0.872570,0.476900,0.397030,-0.046185,0.553003,0.726360,-0.766735,0.218041,0.603801,0.484160,0.390530,-0.046509,0.547752,0.731148,-0.789337,0.472797,0.391676,0.484980,0.388370,-0.054703,0.539311,0.722515,-0.880665,0.342405,0.327394,0.483060,0.386190,-0.054778,0.543478,0.717617,-0.702677,0.023366,0.711125,0.481670,0.388250,0.070008,0.583559,0.699863,0.485098,0.389581,0.782884,0.521150,0.402870,0.085189,0.573326,0.696895,0.421704,0.357280,0.833377,0.525250,0.399400,0.090793,0.583135,0.688694,0.445536,0.478516,0.756651,0.527790,0.401360,0.074943,0.592876,0.691902,0.483190,0.457357,0.746560,0.523480,0.404920,0.095841,0.590753,0.678831,0.451125,0.569847,0.686848,0.530780,0.403150,0.082953,0.605385,0.674511,0.517924,0.622037,0.587218,0.528630,0.408430,0.080133,0.600050,0.683802,0.516966,0.547339,0.658154,0.526240,0.406630,0.099535,0.597812,0.670175,0.396451,0.594180,0.699841,0.533290,0.405110,-0.085317,0.573343,0.696932,-0.421125,0.355809,0.834299,0.474740,0.399400,-0.070174,0.583578,0.699910,-0.484148,0.388586,0.783965,0.478840,0.402870,-0.090815,0.583139,0.688700,-0.444424,0.478887,0.757069,0.472200,0.401360,-0.075057,0.592896,0.691934,-0.483189,0.458827,0.745658,0.476510,0.404920,-0.083004,0.605390,0.674525,-0.514231,0.624850,0.587476,0.471360,0.408430,-0.096124,0.590801,0.678910,-0.448781,0.568530,0.689470,0.469210,0.403150,-0.080096,0.600051,0.683790,-0.514329,0.548788,0.659013,0.473750,0.406630,-0.099873,0.597863,0.670268,-0.394742,0.597281,0.698165,0.466700,0.405110,0.100142,0.605457,0.664489,0.315739,0.590046,0.743071,0.534290,0.407630,0.082908,0.611335,0.666924,0.465970,0.671122,0.576600,0.529790,0.410780,0.081064,0.617809,0.660324,0.378577,0.689429,0.617549,0.530440,0.413400,0.098592,0.612871,0.659516,0.248159,0.597671,0.762369,0.534660,0.410380,-0.100162,0.605462,0.664494,-0.315604,0.595605,0.738680,0.465700,0.407630,-0.083025,0.611348,0.666955,-0.464534,0.673652,0.574805,0.470200,0.410780,-0.098662,0.612875,0.659531,-0.248403,0.601947,0.758917,0.465330,0.410380,-0.081037,0.617809,0.660315,-0.381080,0.690854,0.614410,0.469550,0.413400,0.080938,0.539981,0.705374,0.364569,-0.023887,0.930870,0.524560,0.389330,0.091697,0.549297,0.700875,0.384760,0.118341,0.915399,0.526950,0.392000,0.092664,0.526625,0.700320,0.306649,-0.109531,0.945499,0.527550,0.384090,0.104356,0.534687,0.696856,0.391718,0.013507,0.919986,0.530560,0.386390,0.081691,0.522096,0.702687,0.204732,-0.256191,0.944696,0.524800,0.382030,0.071112,0.534667,0.708360,0.313620,-0.194652,0.929383,0.522440,0.386710,0.064137,0.532248,0.709332,0.480952,-0.191529,0.855571,0.520550,0.384860,0.073820,0.521161,0.703268,0.259886,-0.297228,0.918757,0.522330,0.380750,0.059061,0.527642,0.713173,0.905054,0.044583,0.422953,0.518290,0.383360,0.062993,0.516464,0.706025,0.674444,-0.378836,0.633725,0.519210,0.379530,-0.080951,0.539982,0.705377,-0.364900,-0.025156,0.930707,0.475430,0.389330,-0.091748,0.549304,0.700890,-0.385197,0.117250,0.915355,0.473050,0.392000,-0.071116,0.534667,0.708361,-0.314800,-0.195454,0.928816,0.477560,0.386710,-0.081694,0.522096,0.702688,-0.204735,-0.256272,0.944674,0.475190,0.382030,-0.092672,0.526626,0.700322,-0.306482,-0.109908,0.945510,0.472440,0.384090,-0.104358,0.534688,0.696856,-0.391659,0.013125,0.920017,0.469430,0.386390,-0.064149,0.532250,0.709336,-0.484280,-0.193244,0.853305,0.479440,0.384860,-0.059064,0.527645,0.713174,-0.907592,0.039430,0.417997,0.481700,0.383360,-0.073828,0.521162,0.703270,-0.259939,-0.297271,0.918728,0.477670,0.380750,-0.063002,0.516465,0.706027,-0.674312,-0.378933,0.633809,0.480780,0.379530,0.100974,0.560789,0.694612,0.440640,0.273275,0.855077,0.529420,0.394320,0.115758,0.545341,0.690614,0.528645,0.157219,0.834156,0.533600,0.388730,0.130588,0.559853,0.674742,0.616518,0.234571,0.751586,0.539210,0.391600,0.108008,0.572813,0.685546,0.483657,0.418559,0.768690,0.532330,0.396830,-0.115774,0.545342,0.690618,-0.528864,0.155383,0.834362,0.466390,0.388730,-0.108304,0.572853,0.685630,-0.483570,0.416950,0.769619,0.467660,0.396830,-0.130594,0.559852,0.674743,-0.616993,0.232098,0.751964,0.460780,0.391600,-0.101007,0.560793,0.694621,-0.440261,0.270493,0.856157,0.470570,0.394320,0.112918,0.583953,0.674405,0.450864,0.492590,0.744364,0.535740,0.399740,0.116741,0.593579,0.665742,0.381851,0.488193,0.784766,0.538640,0.402770,0.134091,0.578385,0.663854,0.536808,0.305733,0.786362,0.542910,0.397140,0.137966,0.590794,0.656448,0.451050,0.317373,0.834163,0.545760,0.401240,0.117431,0.609425,0.655736,0.263353,0.483193,0.834967,0.540400,0.408130,0.117946,0.601880,0.659980,0.321390,0.463360,0.825836,0.539950,0.405550,0.139818,0.608258,0.649749,0.322747,0.324528,0.889110,0.547720,0.406740,0.139706,0.600323,0.651892,0.382220,0.307568,0.871384,0.547220,0.404330,-0.112911,0.583953,0.674402,-0.452058,0.489777,0.745494,0.464250,0.399740,-0.134339,0.578409,0.663922,-0.537498,0.304634,0.786316,0.457080,0.397140,-0.116987,0.593609,0.665808,-0.383525,0.490056,0.782786,0.461350,0.402770,-0.138104,0.590807,0.656483,-0.450993,0.318222,0.833871,0.454230,0.401240,-0.117437,0.609428,0.655734,-0.261478,0.483778,0.835218,0.459590,0.408130,-0.118038,0.601886,0.660000,-0.322061,0.467744,0.823099,0.460040,0.405550,-0.139696,0.600324,0.651887,-0.380802,0.307924,0.871879,0.452770,0.404330,-0.140037,0.608274,0.649804,-0.321271,0.322966,0.890212,0.452270,0.406740,0.019904,0.513481,0.777872,0.350261,-0.496435,0.794272,0.502150,0.384610,0.010289,0.507268,0.775398,0.167502,-0.770076,0.615570,0.501310,0.383440,0.019285,0.506627,0.770190,0.338524,-0.796647,0.500755,0.502870,0.382520,0.010651,0.513989,0.781565,0.213484,-0.475897,0.853198,0.501090,0.384940,0.0,0.514874,0.783785,-0.000002,-0.460237,0.887796,0.500000,0.385190,0.0,0.506931,0.776091,-0.000002,-0.767197,0.641412,0.500000,0.383860,0.010355,0.524557,0.784217,0.211790,-0.024489,0.977008,0.500940,0.386530,0.0,0.524879,0.785259,-0.000002,-0.001498,0.999999,0.500000,0.386630,0.019792,0.524062,0.781157,0.378010,-0.053627,0.924247,0.501860,0.386380,-0.019904,0.513482,0.777872,-0.349767,-0.496842,0.794236,0.497840,0.384610,-0.010289,0.507268,0.775398,-0.167505,-0.770073,0.615572,0.498680,0.383440,-0.010651,0.513989,0.781564,-0.213436,-0.475933,0.853189,0.498900,0.384940,-0.019285,0.506627,0.770190,-0.338523,-0.796646,0.500757,0.497120,0.382520,-0.019796,0.524064,0.781160,-0.375697,-0.055338,0.925089,0.498140,0.386380,-0.010355,0.524557,0.784217,-0.211327,-0.024768,0.977102,0.499060,0.386530,0.0,0.503645,0.771275,-0.000001,-0.874945,0.484223,0.500000,0.382640,0.009008,0.503413,0.769504,0.125560,-0.874317,0.468832,0.501440,0.382320,0.016776,0.501987,0.763752,0.313741,-0.871462,0.376989,0.502830,0.381670,0.008392,0.499650,0.761577,0.108236,-0.922202,0.371253,0.501460,0.381210,0.015081,0.499637,0.758643,0.291141,-0.922821,0.252265,0.502750,0.380890,0.0,0.499804,0.762711,-0.000000,-0.917441,0.397871,0.500000,0.381320,-0.009008,0.503413,0.769504,-0.125561,-0.874317,0.468834,0.498550,0.382320,-0.008392,0.499650,0.761577,-0.108236,-0.922202,0.371253,0.498530,0.381210,-0.016776,0.501987,0.763752,-0.313740,-0.871462,0.376990,0.497170,0.381670,-0.015081,0.499637,0.758643,-0.291140,-0.922822,0.252266,0.497240,0.380890,0.028136,0.523249,0.776798,0.554906,-0.036652,0.831105,0.502700,0.386330,0.026953,0.514369,0.774988,0.460049,-0.486159,0.742970,0.502950,0.384670,0.034817,0.522449,0.771260,0.706458,0.028946,0.707163,0.503900,0.386240,0.033241,0.514894,0.770894,0.582563,-0.449181,0.677389,0.503920,0.384740,0.025725,0.508294,0.768530,0.378109,-0.804645,0.457800,0.503610,0.383000,0.031284,0.509593,0.766001,0.422817,-0.807559,0.411187,0.504430,0.383300,0.026597,0.505556,0.759536,0.349271,-0.934926,0.062641,0.504650,0.381660,0.030151,0.507513,0.753192,0.147837,-0.946905,-0.285507,0.506000,0.381060,0.030286,0.506927,0.758504,0.296262,-0.954048,0.044963,0.505330,0.381890,0.027974,0.507599,0.752001,0.214658,-0.903706,-0.370455,0.505920,0.380580,0.023606,0.503931,0.759253,0.498495,-0.861658,0.095126,0.504200,0.381340,0.021486,0.502125,0.757283,0.572294,-0.817064,0.069902,0.503900,0.380970,0.019604,0.500828,0.754141,0.562537,-0.826148,-0.032123,0.503660,0.380340,-0.026953,0.514369,0.774988,-0.459345,-0.487399,0.742593,0.497040,0.384670,-0.028166,0.523263,0.776821,-0.553035,-0.040756,0.832160,0.497300,0.386330,-0.025725,0.508294,0.768530,-0.378107,-0.804644,0.457802,0.496380,0.383000,-0.033241,0.514894,0.770894,-0.582419,-0.450689,0.676511,0.496070,0.384740,-0.031284,0.509593,0.766001,-0.422818,-0.807557,0.411189,0.495560,0.383300,-0.034849,0.522462,0.771281,-0.708137,0.024327,0.705656,0.496090,0.386240,-0.026597,0.505556,0.759536,-0.349269,-0.934926,0.062641,0.495340,0.381660,-0.030151,0.507513,0.753192,-0.147840,-0.946905,-0.285507,0.493990,0.381060,-0.027974,0.507599,0.752001,-0.214657,-0.903707,-0.370454,0.494070,0.380580,-0.030286,0.506927,0.758504,-0.296262,-0.954048,0.044963,0.494660,0.381890,-0.023606,0.503931,0.759253,-0.498494,-0.861658,0.095127,0.495790,0.381340,-0.021486,0.502125,0.757283,-0.572294,-0.817064,0.069903,0.496090,0.380970,-0.019604,0.500828,0.754141,-0.562535,-0.826149,-0.032123,0.496330,0.380340,0.0,0.537903,0.782600,-0.000001,0.293213,0.956047,0.500000,0.388450,0.009589,0.537598,0.781885,0.172457,0.285989,0.942586,0.500990,0.388370,0.018885,0.537063,0.779635,0.369357,0.277193,0.886983,0.502000,0.388260,0.033760,0.535715,0.768036,0.751404,0.320015,0.577046,0.504710,0.388190,0.027349,0.536357,0.775192,0.599203,0.286343,0.747638,0.503100,0.388220,-0.009589,0.537598,0.781885,-0.171676,0.285966,0.942736,0.499010,0.388370,-0.018916,0.537073,0.779653,-0.365915,0.277337,0.888364,0.497990,0.388260,-0.033856,0.535761,0.768115,-0.753317,0.320018,0.574545,0.495290,0.388190,-0.027450,0.536396,0.775264,-0.596736,0.287031,0.749346,0.496890,0.388220,0.043301,0.537882,0.748741,0.795674,0.428405,0.428219,0.510590,0.387350,0.039170,0.536437,0.758886,0.803986,0.374740,0.461710,0.507440,0.388000,0.047319,0.521510,0.755832,0.846554,0.101246,0.522585,0.508820,0.385310,0.041436,0.522034,0.763958,0.796105,0.098569,0.597077,0.506170,0.385930,0.049471,0.536694,0.739920,0.799486,0.434246,0.415033,0.512910,0.386070,0.057688,0.529708,0.731947,0.906143,0.309229,0.288587,0.514470,0.384310,0.052273,0.520023,0.748007,0.859830,-0.005434,0.510551,0.510700,0.384360,0.056808,0.516118,0.739914,0.855895,-0.237344,0.459468,0.512030,0.383080,-0.043310,0.537888,0.748744,-0.792059,0.428583,0.434693,0.489400,0.387350,-0.039185,0.536442,0.758896,-0.805713,0.374117,0.459198,0.492550,0.388000,-0.041437,0.522035,0.763958,-0.797814,0.096316,0.595160,0.493820,0.385930,-0.047319,0.521510,0.755832,-0.845328,0.100144,0.524779,0.491170,0.385310,-0.057845,0.529796,0.731993,-0.908885,0.300631,0.289049,0.485530,0.384310,-0.049647,0.536798,0.739976,-0.796544,0.431181,0.423792,0.487080,0.386070,-0.052273,0.520023,0.748007,-0.857812,-0.008855,0.513887,0.489290,0.384360,-0.056808,0.516118,0.739914,-0.854383,-0.241934,0.459889,0.487960,0.383080,0.039977,0.515060,0.764751,0.680523,-0.425792,0.596313,0.505790,0.384530,0.045427,0.514557,0.757145,0.736600,-0.462860,0.493134,0.507940,0.384080,0.036961,0.510229,0.761031,0.432084,-0.829339,0.354260,0.505920,0.383310,0.041558,0.509919,0.754951,0.406042,-0.871828,0.273944,0.507540,0.383100,-0.039977,0.515060,0.764751,-0.680613,-0.426435,0.595751,0.494200,0.384530,-0.036961,0.510229,0.761031,-0.432083,-0.829338,0.354264,0.494070,0.383310,-0.045427,0.514557,0.757146,-0.736597,-0.462878,0.493121,0.492050,0.384080,-0.041558,0.509919,0.754952,-0.406039,-0.871828,0.273948,0.492450,0.383100,0.058467,0.511890,0.731987,0.728371,-0.600220,0.330471,0.513140,0.381340,0.050058,0.508295,0.734863,0.176265,-0.932669,0.314737,0.511470,0.380930,0.052257,0.505383,0.725331,0.413561,-0.859709,0.299780,0.513640,0.379350,0.046319,0.506050,0.728274,-0.164407,-0.862454,0.478689,0.512020,0.379220,0.044190,0.509023,0.735208,-0.377517,-0.919225,0.111835,0.510190,0.380370,0.041469,0.509700,0.728424,-0.642419,-0.635531,0.428250,0.510530,0.378890,0.044921,0.508909,0.742025,0.033515,-0.997034,0.069288,0.509340,0.381700,0.050649,0.511098,0.742003,0.500865,-0.796122,0.339595,0.510410,0.382390,0.061885,0.518305,0.724894,0.986460,-0.066415,0.149953,0.515540,0.382080,0.057920,0.508098,0.719138,0.795891,-0.599915,0.081600,0.515900,0.379550,0.053959,0.505038,0.706202,0.537616,-0.689538,0.485291,0.517510,0.375990,0.049121,0.502029,0.714732,0.476196,-0.873018,0.105249,0.515160,0.376860,0.044834,0.499137,0.706788,0.438450,-0.698812,0.565175,0.515470,0.373720,0.040964,0.498674,0.712640,0.301705,-0.919950,0.250331,0.513540,0.374720,0.044726,0.501707,0.720584,0.145837,-0.898028,0.415064,0.513020,0.377300,0.037684,0.500019,0.718507,0.047656,-0.814771,0.577820,0.511680,0.375640,0.040940,0.504722,0.723966,-0.296045,-0.609838,0.735157,0.511520,0.377670,0.035367,0.504404,0.721639,-0.221153,-0.352687,0.909232,0.510420,0.376630,0.037392,0.509810,0.723523,-0.547635,-0.268774,0.792374,0.510080,0.377860,0.033919,0.509037,0.721623,-0.348434,-0.057326,0.935579,0.509640,0.377270,-0.058479,0.511892,0.731990,-0.727456,-0.601750,0.329704,0.486850,0.381340,-0.052262,0.505384,0.725333,-0.413597,-0.859761,0.299581,0.486360,0.379350,-0.050058,0.508294,0.734863,-0.176172,-0.932674,0.314775,0.488520,0.380930,-0.046327,0.506051,0.728276,0.164468,-0.862571,0.478457,0.487970,0.379220,-0.050649,0.511098,0.742003,-0.500781,-0.796124,0.339713,0.489580,0.382390,-0.044921,0.508909,0.742025,-0.033514,-0.997033,0.069289,0.490650,0.381700,-0.044191,0.509023,0.735208,0.377482,-0.919260,0.111666,0.489800,0.380370,-0.041471,0.509701,0.728424,0.642666,-0.635767,0.427529,0.489460,0.378890,-0.061886,0.518306,0.724894,-0.986470,-0.071854,0.147356,0.484450,0.382080,-0.057920,0.508098,0.719138,-0.795887,-0.599928,0.081548,0.484090,0.379550,-0.053966,0.505038,0.706203,-0.537525,-0.689535,0.485395,0.482480,0.375990,-0.049121,0.502029,0.714732,-0.476168,-0.873025,0.105321,0.484830,0.376860,-0.044726,0.501707,0.720584,-0.145878,-0.898026,0.415053,0.486970,0.377300,-0.040964,0.498674,0.712640,-0.301667,-0.919967,0.250315,0.486460,0.374720,-0.037685,0.500018,0.718508,-0.047645,-0.814791,0.577793,0.488310,0.375640,-0.044835,0.499137,0.706789,-0.438360,-0.698743,0.565331,0.484520,0.373720,-0.040952,0.504724,0.723969,0.296123,-0.609885,0.735086,0.488470,0.377670,-0.037408,0.509812,0.723527,0.548055,-0.268950,0.792023,0.489910,0.377860,-0.035377,0.504406,0.721642,0.221162,-0.352645,0.909246,0.489570,0.376630,-0.033935,0.509039,0.721627,0.348437,-0.057214,0.935584,0.490350,0.377270,0.061949,0.500770,0.700063,0.316246,-0.317836,0.893850,0.519090,0.373720,0.074300,0.507080,0.698933,0.280678,-0.310466,0.908202,0.521400,0.375530,0.069266,0.492543,0.695856,0.297794,-0.154534,0.942039,0.520320,0.370610,0.081433,0.496891,0.693379,0.256446,-0.275607,0.926432,0.523060,0.371680,0.055880,0.487875,0.699804,0.353583,0.031471,0.934874,0.517280,0.369660,0.050220,0.494932,0.702015,0.373203,-0.216671,0.902094,0.516580,0.372040,0.082907,0.509688,0.697612,0.164187,-0.348728,0.922730,0.523790,0.376690,0.091127,0.509960,0.697221,0.156197,-0.319390,0.934662,0.526350,0.377830,0.090272,0.498358,0.691973,0.137201,-0.374355,0.917079,0.525350,0.372750,0.099106,0.498453,0.691515,0.135841,-0.367000,0.920249,0.527900,0.373880,-0.061954,0.500770,0.700064,-0.316244,-0.317986,0.893798,0.480900,0.373720,-0.074303,0.507081,0.698934,-0.280722,-0.310513,0.908172,0.478590,0.375530,-0.050225,0.494931,0.702017,-0.372759,-0.218381,0.901865,0.483410,0.372040,-0.055879,0.487876,0.699801,-0.352100,0.024427,0.935644,0.482710,0.369660,-0.069266,0.492543,0.695856,-0.297628,-0.155695,0.941901,0.479670,0.370610,-0.081438,0.496891,0.693381,-0.256318,-0.275860,0.926392,0.476930,0.371680,-0.082907,0.509688,0.697612,-0.164256,-0.348711,0.922724,0.476200,0.376690,-0.091127,0.509960,0.697221,-0.156158,-0.319440,0.934651,0.473640,0.377830,-0.090278,0.498358,0.691975,-0.137109,-0.374364,0.917089,0.474640,0.372750,-0.099111,0.498454,0.691516,-0.135852,-0.366902,0.920287,0.472090,0.373880,0.048746,0.513104,0.749310,0.691385,-0.595161,0.409597,0.509360,0.383400,0.044076,0.509361,0.748568,0.305450,-0.937470,0.166882,0.508560,0.382580,-0.048746,0.513104,0.749310,-0.691387,-0.595157,0.409600,0.490630,0.383400,-0.044076,0.509361,0.748568,-0.305449,-0.937470,0.166884,0.491430,0.382580,0.034294,0.508036,0.755407,0.217948,-0.975939,-0.006456,0.506320,0.382060,0.037810,0.508609,0.751050,0.044678,-0.996201,-0.074748,0.507370,0.382040,0.031965,0.508829,0.749902,0.025743,-0.919450,-0.392364,0.506750,0.380780,0.034412,0.510558,0.746220,-0.192396,-0.880103,-0.434054,0.507400,0.380720,0.040061,0.509010,0.746295,-0.152380,-0.980597,-0.123326,0.508180,0.381650,0.040804,0.509785,0.741037,-0.401496,-0.897660,-0.181680,0.508860,0.380890,0.036602,0.511483,0.742502,-0.426104,-0.821261,-0.379429,0.508120,0.380480,0.038151,0.511783,0.739802,-0.567596,-0.757305,-0.322993,0.508620,0.380220,-0.034294,0.508036,0.755407,-0.217947,-0.975939,-0.006456,0.493670,0.382060,-0.031965,0.508829,0.749902,-0.025747,-0.919450,-0.392363,0.493240,0.380780,-0.037811,0.508609,0.751050,-0.044676,-0.996201,-0.074747,0.492620,0.382040,-0.034412,0.510558,0.746220,0.192391,-0.880104,-0.434054,0.492590,0.380720,-0.040061,0.509010,0.746295,0.152379,-0.980597,-0.123326,0.491810,0.381650,-0.036602,0.511483,0.742502,0.426099,-0.821263,-0.379429,0.491880,0.380480,-0.040804,0.509785,0.741037,0.401492,-0.897662,-0.181679,0.491130,0.380890,-0.038151,0.511783,0.739802,0.567592,-0.757308,-0.322992,0.491370,0.380220,0.040062,0.512226,0.734630,-0.663260,-0.742536,-0.093414,0.509410,0.379750,0.037661,0.515519,0.726970,-0.734801,-0.586976,0.339892,0.509450,0.378580,0.036784,0.516201,0.734593,-0.618920,-0.744790,-0.249452,0.508830,0.379270,0.033062,0.520882,0.726075,-0.452523,-0.867011,0.208601,0.508700,0.378350,-0.040062,0.512226,0.734630,0.663219,-0.742554,-0.093560,0.490580,0.379750,-0.036784,0.516201,0.734593,0.618865,-0.744806,-0.249539,0.491170,0.379270,-0.037664,0.515520,0.726971,0.734933,-0.587326,0.339001,0.490540,0.378580,-0.033063,0.520882,0.726075,0.452431,-0.867164,0.208164,0.491290,0.378350,0.026171,0.519324,0.721213,-0.013950,-0.602371,0.798094,0.508320,0.377780,0.029657,0.512447,0.720127,-0.183957,-0.016051,0.982803,0.508780,0.377310,0.033076,0.516023,0.721469,-0.472182,-0.308725,0.825671,0.509010,0.377830,0.022310,0.514246,0.719779,0.215351,-0.028046,0.976134,0.508070,0.377290,-0.029677,0.512450,0.720133,0.184124,-0.016108,0.982771,0.491210,0.377310,-0.026184,0.519326,0.721217,0.014255,-0.602575,0.797935,0.491670,0.377780,-0.033101,0.516026,0.721476,0.472658,-0.309158,0.825237,0.490980,0.377830,-0.022321,0.514247,0.719782,-0.214794,-0.028241,0.976251,0.491920,0.377290,0.0,0.496483,0.754818,0.000001,-0.934921,0.354856,0.500000,0.379670,0.007125,0.496718,0.754322,0.156124,-0.939620,0.304531,0.501300,0.379660,0.013425,0.497792,0.752209,0.372578,-0.914911,0.155316,0.502450,0.379560,0.006160,0.494033,0.746346,0.242788,-0.933100,0.265290,0.501160,0.377860,0.011808,0.496029,0.744614,0.501428,-0.853380,0.142521,0.502240,0.377810,0.000000,0.493482,0.746822,-0.000000,-0.947956,0.318402,0.500000,0.377860,0.017027,0.499640,0.749259,0.642738,-0.759486,-0.100350,0.503350,0.379190,0.014507,0.498216,0.741829,0.789963,-0.612688,0.023926,0.503320,0.377610,-0.007125,0.496718,0.754322,-0.156124,-0.939620,0.304532,0.498690,0.379660,-0.006160,0.494033,0.746346,-0.242788,-0.933100,0.265288,0.498830,0.377860,-0.013425,0.497792,0.752209,-0.372579,-0.914910,0.155317,0.497540,0.379560,-0.011808,0.496029,0.744614,-0.501425,-0.853381,0.142525,0.497750,0.377810,-0.017027,0.499640,0.749259,-0.642738,-0.759485,-0.100349,0.496640,0.379190,-0.014507,0.498216,0.741829,-0.789965,-0.612685,0.023934,0.496670,0.377610,0.030049,0.515957,0.740949,-0.128636,-0.805376,-0.578639,0.507630,0.379230,0.029174,0.511517,0.746144,0.039752,-0.808180,-0.587593,0.506950,0.379750,-0.030049,0.515957,0.740949,0.128631,-0.805377,-0.578638,0.492360,0.379230,-0.029174,0.511517,0.746144,-0.039754,-0.808181,-0.587591,0.493050,0.379750,0.033093,0.518049,0.736974,-0.378088,-0.821548,-0.426741,0.508210,0.379100,0.026251,0.522470,0.729102,0.021347,-0.993439,-0.112357,0.508100,0.378220,-0.033093,0.518049,0.736974,0.378076,-0.821548,-0.426752,0.491780,0.379100,-0.026251,0.522470,0.729102,-0.021352,-0.993440,-0.112346,0.491900,0.378220,0.017770,0.500234,0.728787,0.887645,-0.136538,0.439821,0.505580,0.375850,0.015979,0.494884,0.725884,0.712660,-0.556782,0.426743,0.504970,0.374190,0.020217,0.497278,0.723017,0.686850,-0.465796,0.557916,0.506590,0.374420,0.014589,0.496732,0.733147,0.798764,-0.544178,0.256606,0.504010,0.375840,0.011966,0.492419,0.729423,0.610287,-0.693281,0.383290,0.503150,0.374130,0.011278,0.494271,0.736456,0.587616,-0.778469,0.220664,0.502550,0.375950,0.006000,0.489532,0.732221,0.352909,-0.849588,0.391989,0.501520,0.374260,0.005884,0.491757,0.738706,0.320664,-0.904587,0.280886,0.501250,0.376040,0.0,0.488661,0.733146,-0.000015,-0.916660,0.399668,0.500000,0.374350,0.0,0.490862,0.739335,-0.000007,-0.947963,0.318379,0.500000,0.376080,-0.015980,0.494884,0.725884,-0.712594,-0.556868,0.426742,0.495020,0.374190,-0.017770,0.500234,0.728787,-0.887590,-0.136502,0.439944,0.494420,0.375850,-0.020218,0.497279,0.723017,-0.686733,-0.465896,0.557977,0.493400,0.374420,-0.014589,0.496732,0.733147,-0.798750,-0.544189,0.256626,0.495980,0.375840,-0.011278,0.494271,0.736456,-0.587600,-0.778482,0.220662,0.497440,0.375950,-0.011967,0.492419,0.729423,-0.610199,-0.693406,0.383205,0.496840,0.374130,-0.006000,0.489532,0.732220,-0.352887,-0.849658,0.391857,0.498470,0.374260,-0.005884,0.491757,0.738706,-0.320664,-0.904590,0.280876,0.498740,0.376040,0.021059,0.504585,0.723712,0.642682,0.130631,0.754914,0.507080,0.376010,0.014910,0.510964,0.724461,0.774802,0.107123,0.623063,0.507030,0.377130,0.025640,0.506366,0.721235,0.267112,0.062040,0.961666,0.508220,0.376240,0.024412,0.499122,0.721472,0.536260,-0.431765,0.725262,0.507790,0.374580,0.028051,0.499644,0.720238,0.333556,-0.497916,0.800512,0.508930,0.374700,-0.014910,0.510964,0.724461,-0.774535,0.107034,0.623410,0.492960,0.377130,-0.021059,0.504585,0.723712,-0.642346,0.130520,0.755219,0.492920,0.376010,-0.024417,0.499122,0.721474,-0.535887,-0.431975,0.725412,0.492200,0.374580,-0.025647,0.506367,0.721237,-0.266693,0.061692,0.961805,0.491770,0.376240,-0.028057,0.499644,0.720240,-0.333394,-0.498016,0.800518,0.491060,0.374700,0.012159,0.488786,0.724454,0.549170,-0.566453,0.614446,0.503570,0.372450,0.017011,0.491511,0.721327,0.635528,-0.413074,0.652283,0.505520,0.372710,0.021282,0.494145,0.718444,0.585059,-0.411532,0.698819,0.507230,0.373100,0.018250,0.486373,0.718793,0.482420,-0.242294,0.841763,0.505740,0.371000,0.022837,0.489030,0.716428,0.495991,-0.131620,0.858294,0.507530,0.371480,0.012785,0.484052,0.720897,0.386470,-0.453322,0.803206,0.503800,0.370670,0.006279,0.486663,0.726899,0.313028,-0.755377,0.575690,0.501750,0.372520,0.006626,0.482631,0.722283,0.206127,-0.641496,0.738914,0.501890,0.370640,0.000011,0.482166,0.722733,-0.000014,-0.711213,0.702977,0.500000,0.370680,0.000003,0.485982,0.727827,-0.000079,-0.834034,0.551713,0.500000,0.372600,-0.012157,0.488787,0.724453,-0.549015,-0.567112,0.613976,0.496420,0.372450,-0.017012,0.491511,0.721326,-0.635391,-0.413705,0.652017,0.494470,0.372710,-0.012777,0.484055,0.720890,-0.386815,-0.453859,0.802737,0.496190,0.370670,-0.018246,0.486376,0.718788,-0.483008,-0.243806,0.840989,0.494250,0.371000,-0.022835,0.489031,0.716425,-0.496463,-0.133630,0.857711,0.492460,0.371480,-0.021282,0.494145,0.718443,-0.585003,-0.412012,0.698583,0.492760,0.373100,-0.006275,0.486664,0.726898,-0.313057,-0.755728,0.575213,0.498250,0.372520,-0.006612,0.482633,0.722278,-0.206344,-0.641480,0.738868,0.498100,0.370640,0.026841,0.491448,0.714310,0.518359,-0.145318,0.842726,0.509030,0.371950,0.029213,0.496693,0.715146,0.407103,-0.659978,0.631424,0.509850,0.373540,0.025246,0.495803,0.716732,0.489733,-0.516942,0.702092,0.508510,0.373340,0.031210,0.493579,0.711582,0.521119,-0.272414,0.808842,0.510720,0.372380,-0.026838,0.491450,0.714308,-0.518905,-0.147305,0.842044,0.490960,0.371950,-0.029216,0.496691,0.715147,-0.406986,-0.660380,0.631079,0.490140,0.373540,-0.031208,0.493580,0.711579,-0.521154,-0.274443,0.808133,0.489270,0.372380,-0.025246,0.495803,0.716732,-0.489501,-0.517556,0.701801,0.491480,0.373340,0.024313,0.482582,0.715544,0.372430,-0.028670,0.927617,0.507490,0.369380,0.019110,0.480468,0.717160,0.296566,-0.186170,0.936691,0.505700,0.368930,0.025463,0.476579,0.715217,0.247146,0.003577,0.968972,0.507330,0.367300,0.019737,0.475201,0.716185,0.138897,-0.149229,0.978999,0.505570,0.366990,0.013213,0.478864,0.718219,0.197183,-0.381760,0.902983,0.503820,0.368610,0.013467,0.474164,0.716371,0.047977,-0.303536,0.951612,0.503740,0.366760,0.030746,0.478507,0.713419,0.369015,0.136758,0.919307,0.509040,0.367770,0.028733,0.485040,0.713346,0.459533,0.064674,0.885803,0.509130,0.369910,0.033707,0.487671,0.709903,0.487852,0.069268,0.870174,0.511080,0.370490,0.036541,0.481050,0.709930,0.427345,0.208853,0.879634,0.511160,0.368330,-0.024299,0.482577,0.715513,-0.378762,-0.039571,0.924648,0.492500,0.369380,-0.019100,0.480467,0.717141,-0.301135,-0.192967,0.933853,0.494290,0.368930,-0.013203,0.478866,0.718213,-0.200237,-0.384451,0.901167,0.496170,0.368610,-0.019692,0.475193,0.716095,-0.150292,-0.164569,0.974848,0.494420,0.366990,-0.013438,0.474170,0.716336,-0.056218,-0.311083,0.948719,0.496250,0.366760,-0.025392,0.476559,0.715084,-0.262332,-0.017976,0.964810,0.492660,0.367300,-0.030648,0.478485,0.713212,-0.380954,0.111468,0.917850,0.490950,0.367770,-0.028735,0.485025,0.713324,-0.465092,0.051754,0.883748,0.490860,0.369910,-0.036475,0.481025,0.709786,-0.430417,0.184819,0.883506,0.488840,0.368330,-0.033689,0.487672,0.709872,-0.489386,0.057972,0.870138,0.488910,0.370490,0.000015,0.477617,0.718657,0.000229,-0.580116,0.814534,0.500000,0.368390,0.006844,0.473562,0.716113,0.000608,-0.416412,0.909176,0.501850,0.366530,0.006790,0.477932,0.718617,0.088791,-0.529700,0.843525,0.501910,0.368450,0.000024,0.473329,0.715947,-0.000197,-0.457984,0.888960,0.500000,0.366400,-0.006825,0.473561,0.716115,-0.003490,-0.419026,0.907968,0.498140,0.366530,-0.006768,0.477929,0.718623,-0.089769,-0.530044,0.843205,0.498080,0.368450,0.037314,0.495898,0.708746,0.459250,-0.510348,0.727072,0.513040,0.372790,0.034289,0.497354,0.713015,0.303817,-0.832715,0.462904,0.511630,0.373820,0.032094,0.499683,0.718741,0.139277,-0.661994,0.736455,0.510240,0.374900,0.030367,0.505569,0.720877,-0.021959,-0.124942,0.991921,0.509220,0.376320,-0.037315,0.495898,0.708746,-0.458621,-0.511222,0.726855,0.486950,0.372790,-0.034289,0.497354,0.713015,-0.303895,-0.832788,0.462723,0.488360,0.373820,-0.032095,0.499683,0.718741,-0.139383,-0.662049,0.736385,0.489750,0.374900,-0.030378,0.505571,0.720880,0.022109,-0.125178,0.991888,0.490770,0.376320,0.044832,0.484182,0.705104,0.406527,0.179480,0.895836,0.514070,0.368930,0.040886,0.490866,0.705887,0.440428,-0.036874,0.897031,0.513750,0.371100,-0.044801,0.484168,0.705031,-0.405493,0.162766,0.899490,0.485920,0.368930,-0.040891,0.490862,0.705887,-0.439466,-0.043395,0.897210,0.486240,0.371100,0.163357,0.590179,0.642641,0.542022,0.118503,0.831967,0.555880,0.400270,0.163709,0.600659,0.640740,0.483138,0.144231,0.863582,0.556620,0.403660,0.162601,0.608884,0.639664,0.431695,0.158840,0.887924,0.556690,0.406270,0.181396,0.611647,0.629057,0.541774,0.045212,0.839307,0.565010,0.406430,0.183723,0.602665,0.627707,0.592693,0.014893,0.805291,0.565530,0.403500,0.185375,0.592032,0.626162,0.642617,-0.027983,0.765676,0.565850,0.399910,0.161627,0.561258,0.645821,0.687245,0.044100,0.725086,0.553600,0.390900,0.161610,0.576973,0.644728,0.612703,0.087894,0.785411,0.554370,0.395940,0.186755,0.579342,0.624198,0.686389,-0.070242,0.723834,0.566340,0.395830,0.187767,0.564458,0.620516,0.729724,-0.120646,0.673014,0.566890,0.390850,-0.163461,0.590183,0.642664,-0.542492,0.112629,0.832477,0.444120,0.400270,-0.164081,0.600680,0.640836,-0.481720,0.143943,0.864422,0.443370,0.403660,-0.185524,0.592052,0.626202,-0.639743,-0.037599,0.767669,0.434140,0.399910,-0.184024,0.602673,0.627770,-0.589779,0.014212,0.807439,0.434460,0.403500,-0.181534,0.611658,0.629090,-0.539294,0.048241,0.840735,0.434980,0.406430,-0.162735,0.608895,0.639697,-0.430615,0.159717,0.888291,0.443300,0.406270,-0.161780,0.561253,0.645860,-0.687387,0.042392,0.725053,0.446390,0.390900,-0.161649,0.576973,0.644736,-0.613481,0.087192,0.784881,0.445620,0.395940,-0.187899,0.564476,0.620549,-0.727599,-0.123021,0.674882,0.433100,0.390850,-0.186787,0.579351,0.624202,-0.683093,-0.072747,0.726699,0.433650,0.395830,0.202966,0.596692,0.610044,0.727251,-0.099274,0.679154,0.572230,0.400460,0.211734,0.611292,0.602201,0.770208,-0.058944,0.635064,0.575600,0.405130,0.199948,0.606916,0.614471,0.686696,-0.053690,0.724959,0.571150,0.403960,0.216437,0.602164,0.595010,0.803050,-0.103737,0.586813,0.577510,0.401810,0.196258,0.615260,0.618116,0.644004,0.002828,0.765017,0.570250,0.406960,0.206713,0.619012,0.608305,0.721807,-0.005295,0.692074,0.574130,0.408020,0.208213,0.569859,0.597854,0.787364,-0.183626,0.588506,0.576720,0.391830,0.220570,0.590898,0.586019,0.827796,-0.141908,0.542785,0.581260,0.398370,0.205628,0.584266,0.604658,0.762018,-0.134527,0.633428,0.574470,0.396780,0.224223,0.576879,0.575935,0.848423,-0.183742,0.496405,0.585160,0.393310,-0.203319,0.596713,0.610119,-0.727492,-0.100753,0.678678,0.427760,0.400460,-0.211978,0.611306,0.602246,-0.774912,-0.068592,0.628336,0.424390,0.405130,-0.216570,0.602192,0.595022,-0.805185,-0.100143,0.584507,0.422480,0.401810,-0.200465,0.606947,0.614602,-0.686466,-0.058545,0.724801,0.428840,0.403960,-0.207384,0.619051,0.608447,-0.721018,-0.000941,0.692916,0.425860,0.408020,-0.196589,0.615292,0.618206,-0.638909,0.006249,0.769257,0.429740,0.406960,-0.208415,0.569885,0.597906,-0.784396,-0.187986,0.591088,0.423270,0.391830,-0.220903,0.590903,0.586095,-0.828035,-0.135341,0.544097,0.418730,0.398370,-0.224711,0.576914,0.576032,-0.848059,-0.185989,0.496190,0.414830,0.393310,-0.206111,0.584297,0.604770,-0.759711,-0.134494,0.636200,0.425520,0.396780,0.229058,0.626519,0.576778,0.873311,0.023046,0.486618,0.587010,0.409130,0.227012,0.609644,0.579310,0.860871,-0.062323,0.504992,0.584560,0.403690,0.235570,0.618796,0.564161,0.898744,-0.008543,0.438391,0.591770,0.405870,0.221568,0.618295,0.589361,0.834490,-0.025189,0.550446,0.581220,0.406960,0.215608,0.625213,0.597963,0.791816,0.030170,0.610014,0.578470,0.409710,0.222173,0.632874,0.587557,0.831800,0.092880,0.547249,0.582930,0.411790,0.242052,0.609142,0.549866,0.926179,-0.059521,0.372358,0.597940,0.402140,0.236928,0.585567,0.554402,0.902982,-0.158077,0.399543,0.594700,0.394660,0.245765,0.596179,0.534234,0.943656,-0.110799,0.311829,0.603940,0.396480,0.232908,0.599082,0.567529,0.883517,-0.109348,0.455456,0.589610,0.400100,-0.227156,0.609655,0.579326,-0.860474,-0.062522,0.505643,0.415440,0.403690,-0.229308,0.626551,0.576798,-0.872632,0.020538,0.487947,0.412980,0.409130,-0.235959,0.618832,0.564212,-0.897357,-0.014643,0.441062,0.408230,0.405870,-0.221871,0.618315,0.589411,-0.836854,-0.032733,0.546447,0.418770,0.406960,-0.222497,0.632908,0.587605,-0.830893,0.100324,0.547313,0.417060,0.411790,-0.215941,0.625248,0.598036,-0.794373,0.034950,0.606424,0.421520,0.409710,-0.237242,0.585602,0.554446,-0.904801,-0.153548,0.397188,0.405290,0.394660,-0.242072,0.609159,0.549823,-0.926024,-0.066960,0.371479,0.402050,0.402140,-0.245925,0.596203,0.534263,-0.942722,-0.108035,0.315600,0.396050,0.396480,-0.233341,0.599132,0.567612,-0.884887,-0.102393,0.454413,0.410380,0.400100,0.237932,0.644823,0.556809,0.887614,0.084335,0.452801,0.595690,0.414020,0.241189,0.628780,0.551250,0.918113,0.017810,0.395919,0.597230,0.408230,0.245290,0.639877,0.541482,0.925030,0.016669,0.379529,0.601370,0.411260,0.234300,0.634952,0.565786,0.889781,0.064225,0.451846,0.591830,0.411340,0.227206,0.640332,0.578197,0.844207,0.146789,0.515527,0.587150,0.413990,0.230121,0.648847,0.569964,0.840208,0.181116,0.511124,0.590790,0.416480,0.251809,0.633531,0.523230,0.955740,-0.031881,0.292479,0.609160,0.408280,0.251602,0.608890,0.517404,0.962673,-0.073542,0.260484,0.611050,0.399480,0.255834,0.623723,0.503952,0.968143,-0.059370,0.243258,0.616900,0.403580,0.247616,0.620549,0.534797,0.947729,-0.035603,0.317085,0.604240,0.404790,-0.241591,0.628826,0.551334,-0.916293,0.020180,0.399999,0.402760,0.408230,-0.238265,0.644855,0.556859,-0.889291,0.076329,0.450927,0.404300,0.414020,-0.245462,0.639883,0.541444,-0.924083,0.022293,0.381541,0.398620,0.411260,-0.234671,0.634981,0.565848,-0.889329,0.066078,0.452469,0.408160,0.411340,-0.230437,0.648872,0.570010,-0.837196,0.168859,0.520182,0.409200,0.416480,-0.227497,0.640352,0.578230,-0.839619,0.156204,0.520231,0.412840,0.413990,-0.251657,0.608909,0.517403,-0.959444,-0.082302,0.269619,0.388940,0.399480,-0.252491,0.633541,0.523217,-0.951590,-0.027034,0.306180,0.390830,0.408280,-0.256810,0.623776,0.504116,-0.966737,-0.070420,0.245887,0.383090,0.403580,-0.248293,0.620579,0.534901,-0.945075,-0.046869,0.323475,0.395750,0.404790,0.241951,0.667132,0.548380,0.878027,-0.087504,0.470544,0.600280,0.421830,0.247926,0.652450,0.534836,0.927586,-0.012335,0.373406,0.604620,0.415410,0.249748,0.666314,0.531766,0.930928,-0.054428,0.361123,0.606780,0.420410,0.240226,0.655518,0.550842,0.877998,0.033924,0.477460,0.598560,0.417610,0.231628,0.657873,0.564077,0.835015,0.087718,0.543190,0.593460,0.419470,0.233101,0.667388,0.561909,0.829222,-0.134931,0.542387,0.594880,0.422810,0.254339,0.648183,0.514732,0.956396,-0.044940,0.288596,0.613440,0.412780,0.262823,0.659465,0.488259,0.971267,-0.050087,0.232663,0.626280,0.414820,0.256664,0.664291,0.510448,0.956139,-0.045326,0.289384,0.616320,0.418250,0.259643,0.640696,0.493669,0.968588,-0.065817,0.239801,0.622510,0.408640,-0.242060,0.667170,0.548366,-0.884482,-0.063763,0.462196,0.399710,0.421830,-0.248334,0.652493,0.534872,-0.928400,0.003394,0.371566,0.395370,0.415410,-0.240648,0.655575,0.550932,-0.882670,0.040467,0.468248,0.401430,0.417610,-0.249379,0.666306,0.531603,-0.928804,-0.052596,0.366819,0.393210,0.420410,-0.233396,0.667427,0.561953,-0.833397,-0.100284,0.543501,0.405110,0.422810,-0.232346,0.657938,0.564211,-0.832297,0.094924,0.546142,0.406530,0.419470,-0.256840,0.664346,0.510494,-0.955678,-0.046049,0.290790,0.383670,0.418250,-0.261133,0.640776,0.494024,-0.973156,-0.045231,0.225657,0.377480,0.408640,-0.254649,0.648206,0.514712,-0.954142,-0.016565,0.298895,0.386550,0.412780,-0.262375,0.659459,0.488114,-0.975263,-0.042960,0.216833,0.373710,0.414820,0.250262,0.694746,0.535164,0.944815,-0.064729,0.321145,0.607580,0.431320,0.243587,0.678882,0.549437,0.891507,-0.128841,0.434298,0.600720,0.426330,0.250267,0.680796,0.532045,0.939480,-0.065792,0.336226,0.607700,0.425920,0.243454,0.689939,0.552338,0.904431,-0.112438,0.411536,0.600360,0.430610,0.235067,0.676538,0.563756,0.832759,-0.202192,0.515393,0.594810,0.426310,0.234791,0.685318,0.566657,0.851055,-0.179233,0.493539,0.594030,0.429630,0.262634,0.679405,0.489126,0.970266,-0.038465,0.238966,0.626570,0.422220,0.257098,0.681374,0.510939,0.958986,-0.036704,0.281065,0.617020,0.424600,0.256471,0.698554,0.515348,0.961976,-0.031016,0.271367,0.616110,0.431240,0.262051,0.700095,0.495415,0.967073,-0.015196,0.254043,0.624610,0.430310,-0.250050,0.694765,0.535097,-0.943667,-0.031540,0.329389,0.392410,0.431320,-0.243176,0.678897,0.549290,-0.893548,-0.129461,0.429897,0.399270,0.426330,-0.243459,0.689957,0.552309,-0.909863,-0.102023,0.402170,0.399630,0.430610,-0.250682,0.680875,0.532170,-0.933556,-0.064457,0.352589,0.392290,0.425920,-0.235068,0.676540,0.563711,-0.835082,-0.203352,0.511161,0.405180,0.426310,-0.235223,0.685361,0.566736,-0.850880,-0.190042,0.489782,0.405960,0.429630,-0.262911,0.679429,0.489137,-0.973690,-0.022631,0.226751,0.373430,0.422220,-0.258119,0.681397,0.511046,-0.960072,-0.024872,0.278646,0.382970,0.424600,-0.261187,0.700082,0.495260,-0.970595,0.009813,0.240520,0.375380,0.430310,-0.256044,0.698569,0.515193,-0.963161,0.006958,0.268837,0.383880,0.431240,0.249376,0.707688,0.540994,0.943859,-0.010238,0.330189,0.606640,0.436040,0.242274,0.700138,0.557334,0.913174,-0.099103,0.395338,0.599680,0.434160,0.234195,0.693404,0.571717,0.864390,-0.216119,0.454007,0.593310,0.432450,0.238721,0.710919,0.567403,0.921682,-0.044051,0.385437,0.597090,0.438270,0.232118,0.702730,0.581410,0.874415,-0.187221,0.447601,0.590840,0.435990,0.244916,0.721003,0.551605,0.939114,0.062167,0.337936,0.603730,0.441150,0.258810,0.720790,0.504932,0.960987,0.061708,0.269624,0.621710,0.438590,0.254764,0.714964,0.522955,0.959448,0.049510,0.277502,0.614180,0.437580,0.248733,0.731400,0.535166,0.946957,0.129600,0.294069,0.610360,0.444240,0.252364,0.741168,0.519212,0.945774,0.128344,0.298395,0.616910,0.447130,-0.248527,0.707673,0.540760,-0.945232,0.006662,0.326332,0.393360,0.436040,-0.242044,0.700133,0.557241,-0.919329,-0.068841,0.387421,0.400310,0.434160,-0.244218,0.720951,0.551413,-0.944400,0.057850,0.323669,0.396260,0.441150,-0.238511,0.710873,0.567339,-0.926390,-0.045710,0.373781,0.402900,0.438270,-0.234539,0.693466,0.571779,-0.863696,-0.193226,0.465502,0.406680,0.432450,-0.231413,0.702604,0.581169,-0.873648,-0.186338,0.449464,0.409150,0.435990,-0.258543,0.720804,0.504850,-0.961901,0.055499,0.267707,0.378280,0.438590,-0.254264,0.714973,0.522746,-0.958045,0.048545,0.282476,0.385810,0.437580,-0.251944,0.741169,0.519091,-0.947437,0.123583,0.295111,0.383080,0.447130,-0.248204,0.731364,0.534997,-0.948236,0.115836,0.295685,0.389630,0.444240,0.223631,0.734010,0.606436,0.910551,-0.010161,0.413272,0.583440,0.449480,0.225479,0.713514,0.597509,0.875099,-0.169375,0.453336,0.585020,0.441410,0.232162,0.723432,0.584503,0.925061,-0.020530,0.379263,0.591140,0.444150,0.217677,0.724109,0.616845,0.850571,-0.177873,0.494864,0.578090,0.446500,0.228082,0.746376,0.593135,0.928503,0.087042,0.360979,0.589430,0.453240,0.237008,0.735037,0.569328,0.941491,0.072836,0.329073,0.597760,0.447650,0.242022,0.760226,0.540432,0.945586,0.146662,0.290443,0.609290,0.455930,0.240422,0.747736,0.554544,0.947270,0.132570,0.291728,0.603750,0.451780,0.230931,0.760417,0.580683,0.938529,0.120582,0.323455,0.594500,0.457880,0.232208,0.774462,0.569268,0.946909,0.131083,0.293564,0.598900,0.462710,-0.225726,0.713492,0.597546,-0.871963,-0.189375,0.451462,0.414970,0.441410,-0.223421,0.734031,0.606314,-0.911897,0.008355,0.410333,0.416550,0.449480,-0.232520,0.723407,0.584576,-0.927804,-0.022266,0.372403,0.408850,0.444150,-0.217882,0.724081,0.616894,-0.845983,-0.184975,0.500098,0.421900,0.446500,-0.237017,0.735033,0.569317,-0.944255,0.074665,0.320635,0.402230,0.447650,-0.227748,0.746318,0.593013,-0.927960,0.093053,0.360877,0.410570,0.453240,-0.242237,0.760249,0.540478,-0.949852,0.131128,0.283877,0.390700,0.455930,-0.240168,0.747713,0.554441,-0.949879,0.114184,0.291019,0.396240,0.451780,-0.232697,0.774524,0.569414,-0.947542,0.113244,0.298898,0.401090,0.462710,-0.230920,0.760409,0.580663,-0.937759,0.108420,0.329929,0.405490,0.457880,0.216259,0.751444,0.618426,0.868538,0.135524,0.476734,0.579370,0.455960,0.212884,0.739824,0.628160,0.840582,0.029596,0.540875,0.575230,0.452380,0.207626,0.730918,0.634656,0.755700,-0.181117,0.629376,0.571640,0.449380,0.198670,0.742413,0.645694,0.713347,0.008505,0.700760,0.567620,0.453750,0.194519,0.733887,0.647975,0.612857,-0.239137,0.753140,0.565690,0.450890,0.201594,0.752582,0.640337,0.759509,0.151526,0.632602,0.569950,0.457010,0.220610,0.781112,0.601428,0.904302,0.134482,0.405157,0.586030,0.465350,0.218679,0.766112,0.609452,0.887746,0.131140,0.441258,0.582870,0.460450,0.203276,0.766933,0.634269,0.786671,0.150301,0.598797,0.572040,0.461170,0.204918,0.782595,0.628781,0.803470,0.155593,0.574654,0.574150,0.466000,-0.216103,0.751435,0.618356,-0.871851,0.134567,0.470921,0.420620,0.455960,-0.212973,0.739819,0.628134,-0.843814,0.037970,0.535290,0.424760,0.452380,-0.201729,0.752595,0.640357,-0.763717,0.150914,0.627663,0.430040,0.457010,-0.198785,0.742435,0.645685,-0.715422,0.005988,0.698667,0.432370,0.453750,-0.207889,0.730940,0.634694,-0.753761,-0.191746,0.628552,0.428350,0.449380,-0.194483,0.733917,0.647933,-0.612398,-0.245529,0.751455,0.434300,0.450890,-0.220394,0.781082,0.601363,-0.904402,0.112933,0.411464,0.413970,0.465350,-0.218466,0.766100,0.609380,-0.888785,0.125497,0.440809,0.417120,0.460450,-0.204994,0.782597,0.628773,-0.806551,0.139914,0.574368,0.425840,0.466000,-0.203389,0.766953,0.634294,-0.790867,0.149521,0.593442,0.427950,0.461170,0.185973,0.752413,0.655849,0.614376,0.125605,0.778951,0.563260,0.457680,0.183672,0.743397,0.658278,0.571174,-0.077106,0.817200,0.561790,0.454420,0.179967,0.734516,0.657901,0.485208,-0.330668,0.809464,0.560640,0.451590,0.165451,0.743141,0.668837,0.452796,-0.163476,0.876500,0.555370,0.454770,0.162244,0.733867,0.666857,0.391898,-0.405799,0.825677,0.554560,0.451880,0.167553,0.751939,0.667567,0.497490,0.050495,0.865999,0.556470,0.458190,0.188019,0.783211,0.647354,0.669079,0.163962,0.724879,0.566000,0.466930,0.187322,0.766913,0.651650,0.643508,0.157736,0.749010,0.564620,0.461940,0.168272,0.766505,0.664508,0.536924,0.120240,0.835018,0.557450,0.462690,0.169050,0.783747,0.661876,0.555432,0.159655,0.816091,0.558290,0.467920,-0.186171,0.752433,0.655897,-0.616919,0.126001,0.776875,0.436730,0.457680,-0.183924,0.743413,0.658327,-0.574231,-0.086665,0.814093,0.438200,0.454420,-0.167953,0.751966,0.667664,-0.496900,0.052551,0.866215,0.443520,0.458190,-0.165736,0.743164,0.668915,-0.451997,-0.170884,0.875498,0.444630,0.454770,-0.180013,0.734527,0.657899,-0.487008,-0.336729,0.805876,0.439360,0.451590,-0.162350,0.733878,0.666883,-0.391482,-0.409179,0.824205,0.445430,0.451880,-0.188130,0.783233,0.647371,-0.669586,0.157077,0.725935,0.433990,0.466930,-0.187527,0.766939,0.651699,-0.643887,0.161045,0.747980,0.435370,0.461940,-0.169150,0.783758,0.661894,-0.557693,0.153902,0.815655,0.441710,0.467920,-0.168319,0.766516,0.664519,-0.537489,0.122463,0.834331,0.442550,0.462690,0.142648,0.750700,0.680157,0.463900,-0.062556,0.883676,0.547170,0.458570,0.140210,0.741947,0.679762,0.424195,-0.274587,0.862937,0.546290,0.455120,0.137670,0.732623,0.676843,0.361671,-0.492086,0.791862,0.545760,0.452150,0.113269,0.738984,0.693221,0.371882,-0.378498,0.847610,0.536800,0.455070,0.110689,0.729619,0.687668,0.320911,-0.594809,0.737034,0.536550,0.452020,0.115176,0.747605,0.694689,0.377164,-0.115056,0.918972,0.537320,0.458390,0.143918,0.782405,0.677527,0.448117,0.180949,0.875470,0.548290,0.468380,0.144379,0.764859,0.680178,0.470454,0.086013,0.878223,0.547840,0.463120,0.114739,0.761015,0.694751,0.340736,0.099474,0.934882,0.537250,0.462600,0.112331,0.777216,0.691343,0.315886,0.195010,0.928540,0.536950,0.467540,-0.142793,0.750715,0.680197,-0.461417,-0.064527,0.884834,0.452820,0.458570,-0.140286,0.741957,0.679778,-0.421466,-0.276617,0.863626,0.453710,0.455120,-0.115204,0.747609,0.694696,-0.376994,-0.119733,0.918444,0.462670,0.458390,-0.113169,0.738987,0.693177,-0.372107,-0.375899,0.848668,0.463190,0.455070,-0.137706,0.732628,0.676848,-0.361581,-0.490614,0.792816,0.454240,0.452150,-0.111012,0.729655,0.687761,-0.322570,-0.591056,0.739324,0.463440,0.452020,-0.144452,0.782476,0.677679,-0.449062,0.177190,0.875755,0.451700,0.468380,-0.144531,0.764870,0.680215,-0.470598,0.083763,0.878363,0.452150,0.463120,-0.112332,0.777220,0.691334,-0.313772,0.193300,0.929614,0.463040,0.467540,-0.114897,0.761034,0.694795,-0.339492,0.097536,0.935538,0.462740,0.462600,0.086891,0.743134,0.702892,0.253846,-0.136541,0.957559,0.528410,0.457340,0.086798,0.734718,0.700564,0.282815,-0.441929,0.851302,0.528640,0.454310,0.085463,0.725575,0.693783,0.280613,-0.656192,0.700477,0.528820,0.451110,0.063627,0.727583,0.703830,0.277363,-0.502339,0.818978,0.521880,0.452320,0.064690,0.718721,0.695458,0.306014,-0.683038,0.663185,0.522790,0.448940,0.061137,0.735997,0.707635,0.205820,-0.217580,0.954095,0.520720,0.455010,0.053831,0.743905,0.709486,0.131052,0.016555,0.991237,0.517920,0.457090,0.077618,0.767653,0.702499,0.186733,0.169400,0.967695,0.525100,0.464610,0.040575,0.753215,0.709000,0.053122,0.131631,0.989874,0.513040,0.459630,0.083015,0.754140,0.703569,0.206593,0.094020,0.973899,0.526860,0.460580,-0.086961,0.743144,0.702909,-0.254369,-0.137876,0.957229,0.471580,0.457340,-0.086921,0.734738,0.700594,-0.283507,-0.438430,0.852879,0.471350,0.454310,-0.061177,0.735999,0.707650,-0.211784,-0.205916,0.955377,0.479270,0.455010,-0.063683,0.727575,0.703869,-0.289980,-0.494283,0.819509,0.478110,0.452320,-0.085675,0.725601,0.693844,-0.280966,-0.654203,0.702195,0.471170,0.451110,-0.064940,0.718736,0.695547,-0.317151,-0.683423,0.657532,0.477200,0.448940,-0.053862,0.743909,0.709495,-0.131817,0.025002,0.990959,0.482070,0.457090,-0.077711,0.767662,0.702507,-0.186431,0.168772,0.967863,0.474890,0.464610,-0.083122,0.754156,0.703596,-0.206125,0.094058,0.973995,0.473130,0.460580,-0.040645,0.753209,0.708984,-0.052890,0.134923,0.989443,0.486950,0.459630,0.036870,0.707809,0.699834,0.396444,-0.628051,0.669615,0.514500,0.444040,0.025789,0.702926,0.701269,0.370208,-0.489430,0.789560,0.510550,0.441970,0.031313,0.699624,0.694845,0.565399,-0.535057,0.627724,0.513840,0.440130,0.031021,0.713117,0.706618,0.270113,-0.475265,0.837355,0.511500,0.446440,0.041237,0.702524,0.689372,0.428255,-0.721794,0.543702,0.517890,0.440910,0.036338,0.695752,0.684985,0.631808,-0.587642,0.505466,0.517600,0.437740,0.045842,0.697063,0.677902,0.341024,-0.765670,0.545392,0.521300,0.438070,0.041135,0.691988,0.673907,0.507360,-0.693746,0.511178,0.521070,0.435750,0.052532,0.691235,0.667005,0.288357,-0.800663,0.525157,0.524650,0.435890,0.047804,0.687558,0.663434,0.349300,-0.782133,0.516002,0.524290,0.434200,0.041748,0.725112,0.708457,0.225450,-0.329377,0.916888,0.514990,0.451080,0.047028,0.717481,0.703114,0.326098,-0.570030,0.754139,0.517110,0.448530,0.050354,0.710220,0.693568,0.349852,-0.715091,0.605184,0.519250,0.445080,0.054396,0.703118,0.681929,0.299508,-0.756383,0.581532,0.522150,0.441340,0.067386,0.709991,0.684411,0.291791,-0.735578,0.611379,0.524860,0.444790,0.060011,0.696189,0.670315,0.288936,-0.789758,0.541108,0.525530,0.438210,0.071738,0.702145,0.672646,0.297587,-0.779534,0.551153,0.527810,0.440960,-0.026064,0.703050,0.701142,-0.355593,-0.489610,0.796138,0.489440,0.441970,-0.036952,0.707630,0.700042,-0.373682,-0.641799,0.669668,0.485490,0.444040,-0.031471,0.699642,0.694778,-0.555079,-0.542725,0.630347,0.486150,0.440130,-0.031041,0.713036,0.706666,-0.236047,-0.481643,0.843980,0.488500,0.446440,-0.036471,0.695749,0.684977,-0.621051,-0.597637,0.507075,0.482390,0.437740,-0.041467,0.702481,0.689493,-0.419682,-0.732038,0.536645,0.482100,0.440910,-0.046278,0.697086,0.677968,-0.340904,-0.768589,0.541345,0.478690,0.438070,-0.041453,0.692014,0.673983,-0.499857,-0.700729,0.509040,0.478920,0.435750,-0.047825,0.687563,0.663434,-0.347817,-0.784902,0.512788,0.475700,0.434200,-0.052650,0.691246,0.667028,-0.286786,-0.802312,0.523498,0.475340,0.435890,-0.041907,0.724861,0.708885,-0.212583,-0.322284,0.922465,0.485000,0.451080,-0.047383,0.717145,0.703707,-0.326668,-0.570977,0.753175,0.482880,0.448530,-0.050554,0.710038,0.693898,-0.359616,-0.721003,0.592310,0.480740,0.445080,-0.054377,0.703120,0.681912,-0.306256,-0.757939,0.575965,0.477840,0.441340,-0.067458,0.710000,0.684428,-0.295585,-0.737713,0.606967,0.475130,0.444790,-0.060312,0.696212,0.670379,-0.288804,-0.788049,0.543665,0.474460,0.438210,-0.071707,0.702144,0.672636,-0.297406,-0.776855,0.555019,0.472190,0.440960,0.033903,0.730197,0.710836,0.113217,-0.120638,0.986219,0.512040,0.452410,0.023944,0.716256,0.709722,0.110182,-0.334915,0.935784,0.508860,0.447290,0.023355,0.733112,0.711907,-0.011091,-0.007656,0.999909,0.508410,0.452990,0.016035,0.717627,0.710054,-0.053148,-0.246683,0.967638,0.506080,0.447390,0.013222,0.704913,0.704430,-0.003515,-0.361555,0.932344,0.505420,0.441980,0.019715,0.704452,0.704006,0.146445,-0.429808,0.890965,0.508040,0.442250,-0.034005,0.730138,0.711109,-0.100102,-0.119700,0.987751,0.487950,0.452410,-0.023350,0.733163,0.712032,0.014940,-0.014180,0.999788,0.491580,0.452990,-0.023840,0.716366,0.709493,-0.088004,-0.339706,0.936405,0.491130,0.447290,-0.015953,0.717795,0.709753,0.050870,-0.254444,0.965749,0.493910,0.447390,-0.013422,0.705027,0.704306,-0.007526,-0.353306,0.935478,0.494570,0.441980,-0.019924,0.704620,0.703792,-0.141070,-0.420987,0.896030,0.491960,0.442250,0.086043,0.716656,0.683462,0.266344,-0.723977,0.636332,0.530210,0.447260,0.110046,0.720695,0.678852,0.261002,-0.672319,0.692723,0.537420,0.448610,0.088698,0.708489,0.672534,0.260678,-0.786745,0.559534,0.532290,0.443480,0.110748,0.712514,0.669857,0.203473,-0.772156,0.601975,0.538680,0.445240,-0.086222,0.716677,0.683514,-0.266376,-0.726942,0.632930,0.469780,0.447260,-0.088732,0.708504,0.672526,-0.261097,-0.785583,0.560970,0.467700,0.443480,-0.110269,0.720728,0.678909,-0.261371,-0.675189,0.689786,0.462570,0.448610,-0.110593,0.712514,0.669792,-0.203318,-0.772455,0.601643,0.461310,0.445240,0.136104,0.723064,0.670766,0.297700,-0.549192,0.780873,0.546130,0.449050,0.159107,0.724076,0.661897,0.349607,-0.430953,0.831898,0.554470,0.448910,0.135660,0.713716,0.665003,0.201599,-0.674040,0.710653,0.546760,0.445950,0.158081,0.713846,0.658708,0.269835,-0.511168,0.816025,0.554560,0.445850,-0.136134,0.723070,0.670770,-0.297813,-0.550939,0.779598,0.453860,0.449050,-0.135911,0.713744,0.665063,-0.201937,-0.675802,0.708882,0.453230,0.445950,-0.159355,0.724093,0.661960,-0.349889,-0.433145,0.830640,0.445520,0.448910,-0.157937,0.713865,0.658637,-0.268676,-0.513596,0.814882,0.445430,0.445850,0.188780,0.722576,0.646461,0.527064,-0.350713,0.774083,0.564710,0.447740,0.175996,0.723825,0.654562,0.433728,-0.375161,0.819228,0.560210,0.448520,0.184077,0.711708,0.644809,0.493840,-0.355586,0.793524,0.563830,0.444270,0.173145,0.713234,0.651868,0.386569,-0.393474,0.834112,0.559890,0.445230,-0.188856,0.722588,0.646472,-0.529439,-0.354309,0.770817,0.435280,0.447740,-0.176055,0.723843,0.654547,-0.435874,-0.377896,0.816828,0.439780,0.448520,-0.173291,0.713271,0.651883,-0.388904,-0.393710,0.832914,0.440100,0.445230,-0.183974,0.711767,0.644675,-0.498876,-0.346840,0.794245,0.436160,0.444270,0.200769,0.719370,0.636738,0.636335,-0.330637,0.696963,0.569470,0.446390,0.210493,0.713480,0.623426,0.749057,-0.322021,0.578978,0.574550,0.443850,0.202094,0.704165,0.627027,0.660864,-0.395723,0.637700,0.571510,0.441010,0.193322,0.708993,0.636709,0.576328,-0.360830,0.733245,0.567590,0.443080,-0.200431,0.719414,0.636552,-0.637814,-0.332173,0.694878,0.430520,0.446390,-0.209953,0.713476,0.623186,-0.748844,-0.316965,0.582036,0.425450,0.443850,-0.193530,0.709038,0.636710,-0.582525,-0.342273,0.737234,0.432400,0.443080,-0.202558,0.704158,0.627123,-0.671026,-0.383788,0.634374,0.428480,0.441010,0.223038,0.695947,0.593092,0.797555,-0.319963,0.511400,0.585350,0.434530,0.217102,0.705062,0.607060,0.796824,-0.312895,0.516882,0.580320,0.439320,0.213534,0.690761,0.602453,0.724177,-0.403041,0.559576,0.580240,0.433490,0.209083,0.697555,0.614529,0.708879,-0.433692,0.556239,0.576160,0.437380,-0.222663,0.696025,0.592952,-0.807774,-0.295322,0.510182,0.414640,0.434530,-0.217132,0.705063,0.607041,-0.799174,-0.315505,0.511642,0.419670,0.439320,-0.209213,0.697656,0.614382,-0.713893,-0.433367,0.550046,0.423840,0.437380,-0.213619,0.690772,0.602433,-0.728357,-0.382297,0.568634,0.419750,0.433490,0.225756,0.681302,0.579496,0.790848,-0.266018,0.551176,0.588190,0.428850,0.225193,0.688216,0.584289,0.794477,-0.325186,0.512894,0.587540,0.431320,0.215733,0.678459,0.590858,0.732284,-0.368834,0.572470,0.582580,0.428390,0.215724,0.684136,0.595260,0.737364,-0.371527,0.564147,0.582070,0.430650,-0.225547,0.681334,0.579397,-0.788448,-0.279211,0.548079,0.411800,0.428850,-0.225207,0.688259,0.584208,-0.800147,-0.309318,0.513893,0.412450,0.431320,-0.216459,0.684105,0.595481,-0.739614,-0.369076,0.562810,0.417920,0.430650,-0.215685,0.678477,0.590812,-0.737871,-0.378242,0.558999,0.417410,0.428390,0.223985,0.666991,0.575178,0.785192,-0.152810,0.600102,0.588700,0.423590,0.225843,0.674319,0.576915,0.769983,-0.273420,0.576513,0.588740,0.426240,0.213257,0.667000,0.587042,0.748818,-0.113522,0.652981,0.582500,0.424220,0.215121,0.672690,0.588562,0.709570,-0.352112,0.610351,0.582790,0.426270,-0.223891,0.667029,0.575107,-0.786001,-0.124749,0.605509,0.411290,0.423590,-0.225847,0.674372,0.576896,-0.769061,-0.268728,0.579940,0.411250,0.426240,-0.215211,0.672712,0.588567,-0.719629,-0.341349,0.604661,0.417200,0.426270,-0.213457,0.667017,0.587073,-0.751080,-0.110617,0.650878,0.417490,0.424220,0.222331,0.659495,0.577014,0.796335,0.143868,0.587497,0.587550,0.421010,0.221273,0.651997,0.582207,0.786287,0.250241,0.564918,0.585400,0.418460,0.212795,0.660766,0.589214,0.749409,0.196507,0.632275,0.581500,0.422170,0.211795,0.654445,0.593503,0.725955,0.259934,0.636729,0.579850,0.419980,-0.222846,0.659559,0.577122,-0.791957,0.161723,0.588770,0.412440,0.421010,-0.212970,0.660802,0.589239,-0.742861,0.225350,0.630377,0.418500,0.422170,-0.221304,0.652007,0.582175,-0.791992,0.227637,0.566507,0.414590,0.418460,-0.212763,0.654513,0.593737,-0.725289,0.262808,0.636308,0.420140,0.419980,0.218710,0.644509,0.589080,0.780066,0.232346,0.580958,0.582410,0.415930,0.214716,0.637550,0.596959,0.772425,0.189509,0.606174,0.578950,0.413580,0.209453,0.647850,0.598649,0.702598,0.298492,0.645956,0.577670,0.417520,0.206365,0.641903,0.605141,0.691355,0.300303,0.657150,0.575050,0.415180,-0.218676,0.644532,0.589050,-0.785488,0.226059,0.576112,0.417580,0.415930,-0.209697,0.647886,0.598698,-0.713190,0.283439,0.641110,0.422320,0.417520,-0.214962,0.637582,0.596984,-0.775823,0.196488,0.599575,0.421040,0.413580,-0.206909,0.641942,0.605259,-0.697602,0.300311,0.650511,0.424940,0.415180,0.209011,0.630954,0.605620,0.735290,0.096552,0.670840,0.575330,0.411560,0.200918,0.625282,0.613620,0.662607,0.038645,0.747970,0.571800,0.410000,0.201773,0.636439,0.611971,0.656121,0.193500,0.729427,0.572040,0.413320,0.194714,0.631528,0.618339,0.579556,0.115035,0.806772,0.569070,0.411940,-0.209341,0.630984,0.605695,-0.735826,0.099041,0.669889,0.424660,0.411560,-0.202181,0.636480,0.612072,-0.653615,0.182122,0.734587,0.427950,0.413320,-0.201231,0.625299,0.613688,-0.658867,0.044089,0.750966,0.428190,0.410000,-0.194947,0.631538,0.618388,-0.577232,0.115558,0.808362,0.430920,0.411940,0.191363,0.621429,0.621418,0.602644,0.054765,0.796129,0.568590,0.409050,0.178717,0.619141,0.630818,0.489176,0.090908,0.867434,0.563960,0.408520,0.186074,0.627574,0.624597,0.525148,0.169553,0.833949,0.566550,0.411100,0.175340,0.625946,0.631922,0.431825,0.201786,0.879096,0.562610,0.410630,-0.191480,0.621451,0.621445,-0.602420,0.051191,0.796536,0.431400,0.409050,-0.186578,0.627580,0.624702,-0.529338,0.173306,0.830521,0.433440,0.411100,-0.179123,0.619178,0.630925,-0.489604,0.082314,0.868051,0.436030,0.408520,-0.175806,0.625978,0.632021,-0.431285,0.199936,0.879784,0.437380,0.410630,0.160422,0.615848,0.639061,0.368971,0.206102,0.906301,0.556200,0.408270,0.138738,0.615005,0.647618,0.262722,0.372039,0.890261,0.547700,0.408800,0.157927,0.622595,0.637988,0.337168,0.174904,0.925055,0.555500,0.410390,0.137017,0.621583,0.645232,0.233579,0.196810,0.952211,0.547610,0.410980,-0.160555,0.615862,0.639092,-0.367238,0.203911,0.907500,0.443790,0.408270,-0.158017,0.622599,0.638007,-0.333505,0.171819,0.926959,0.444490,0.410390,-0.138981,0.615016,0.647670,-0.261745,0.374886,0.889354,0.452290,0.408800,-0.137113,0.621601,0.645257,-0.232450,0.196959,0.952457,0.452380,0.410980,0.116375,0.616228,0.651339,0.207452,0.501551,0.839887,0.540740,0.410540,0.097273,0.620168,0.654357,0.201759,0.584409,0.785977,0.535290,0.413080,0.115468,0.622994,0.647690,0.137207,0.267574,0.953718,0.541190,0.412880,0.096541,0.627290,0.649107,0.108178,0.382173,0.917737,0.536150,0.415510,-0.116463,0.616235,0.651357,-0.203929,0.503681,0.839475,0.459250,0.410540,-0.115377,0.622993,0.647662,-0.134613,0.265642,0.954627,0.458800,0.412880,-0.096974,0.620153,0.654268,-0.201296,0.585442,0.785326,0.464700,0.413080,-0.096530,0.627293,0.649105,-0.107770,0.374592,0.920905,0.463840,0.415510,0.079767,0.624960,0.654134,0.275416,0.648917,0.709262,0.531280,0.416030,0.080135,0.632654,0.648404,0.131458,0.483485,0.865425,0.532320,0.418340,-0.079722,0.624967,0.654119,-0.280423,0.645486,0.710430,0.468710,0.416030,-0.080169,0.632664,0.648413,-0.133345,0.474387,0.870159,0.467670,0.418340,0.006555,0.705413,0.704417,-0.044446,-0.293063,0.955060,0.502720,0.442180,-0.000115,0.705695,0.704437,-0.003070,-0.258861,0.965910,0.500000,0.442410,-0.000018,0.718541,0.707109,-0.003758,-0.177979,0.984027,0.500000,0.447300,0.007957,0.718280,0.708528,-0.138525,-0.195436,0.970884,0.503080,0.447350,-0.006797,0.705461,0.704408,0.033289,-0.289064,0.956731,0.497270,0.442180,-0.007942,0.718352,0.708393,0.128375,-0.200756,0.971194,0.496910,0.447350,0.015992,0.750316,0.709551,-0.066825,0.133213,0.988832,0.505510,0.458670,0.011241,0.733433,0.710939,-0.127461,0.004808,0.991832,0.504330,0.452940,-0.000001,0.733242,0.708436,0.000082,-0.008404,0.999965,0.500000,0.452760,-0.000095,0.749285,0.707715,0.001258,0.121129,0.992636,0.500000,0.458360,-0.016171,0.750314,0.709591,0.068147,0.135320,0.988456,0.494480,0.458670,-0.011248,0.733452,0.711004,0.126669,-0.000408,0.991945,0.495670,0.452940,0.056999,0.684380,0.652434,0.384724,-0.791593,0.474729,0.527570,0.433060,0.060923,0.687718,0.655345,0.359881,-0.830889,0.424393,0.528020,0.434430,0.065020,0.683815,0.643095,0.284959,-0.672121,0.683412,0.530090,0.432310,0.068953,0.687450,0.645605,0.244295,-0.756944,0.606099,0.530620,0.433480,0.062378,0.680204,0.641326,0.322110,-0.515468,0.794064,0.529920,0.431310,0.054452,0.681409,0.649547,0.436552,-0.695930,0.570178,0.527430,0.431880,0.052816,0.678063,0.646992,0.522903,-0.468708,0.711959,0.527440,0.430810,0.060986,0.676677,0.640475,0.358431,-0.266100,0.894828,0.529930,0.430570,0.052386,0.673433,0.644869,0.550452,-0.102210,0.828587,0.527620,0.429590,0.060658,0.672414,0.640437,0.400253,-0.008963,0.916361,0.530070,0.429730,-0.057115,0.684397,0.652462,-0.383311,-0.793622,0.472479,0.472420,0.433060,-0.061179,0.687750,0.655414,-0.357784,-0.834071,0.419901,0.471970,0.434430,-0.054432,0.681412,0.649529,-0.435267,-0.698755,0.567700,0.472570,0.431880,-0.062507,0.680216,0.641349,-0.319263,-0.520495,0.791932,0.470070,0.431310,-0.065035,0.683822,0.643090,-0.285462,-0.673554,0.681789,0.469900,0.432310,-0.068961,0.687455,0.645592,-0.244909,-0.759333,0.602855,0.469370,0.433480,-0.052757,0.678057,0.646948,-0.525499,-0.470616,0.708781,0.472550,0.430810,-0.052374,0.673438,0.644848,-0.556752,-0.099235,0.824730,0.472370,0.429590,-0.060963,0.676678,0.640452,-0.355098,-0.272053,0.894367,0.470070,0.430570,-0.060616,0.672413,0.640415,-0.402087,-0.007352,0.915572,0.469920,0.429730,0.067577,0.691633,0.658380,0.346787,-0.844347,0.408432,0.529060,0.436120,0.077527,0.697045,0.660680,0.323893,-0.845871,0.423787,0.531090,0.438160,0.074894,0.691369,0.648154,0.192277,-0.773723,0.603640,0.531790,0.434740,0.083484,0.695808,0.651067,0.129600,-0.729606,0.671475,0.533650,0.436340,-0.067929,0.691676,0.658474,-0.346394,-0.846106,0.405111,0.470930,0.436120,-0.074941,0.691382,0.648158,-0.192977,-0.777124,0.599031,0.468200,0.434740,-0.077989,0.697097,0.660814,-0.324912,-0.845487,0.423774,0.468900,0.438160,-0.083620,0.695828,0.651102,-0.131158,-0.733105,0.667349,0.466340,0.436340,0.054013,0.666509,0.644144,0.521821,0.129392,0.843185,0.528000,0.427920,0.062376,0.666966,0.641593,0.514660,-0.000639,0.857394,0.530280,0.428450,0.057885,0.658908,0.644515,0.533909,0.221691,0.815962,0.528640,0.426100,0.063410,0.660607,0.639213,0.556938,0.245624,0.793403,0.530700,0.426960,-0.053948,0.666505,0.644109,-0.525894,0.136254,0.839566,0.471990,0.427920,-0.058022,0.658925,0.644553,-0.538840,0.229920,0.810425,0.471350,0.426100,-0.062382,0.666968,0.641586,-0.515613,0.010979,0.856751,0.469710,0.428450,-0.063459,0.660620,0.639224,-0.554396,0.246313,0.794969,0.469290,0.426960,0.062615,0.652377,0.643672,0.387696,0.351047,0.852325,0.529670,0.424410,0.067457,0.655593,0.638760,0.182129,0.549452,0.815434,0.531530,0.425440,0.070896,0.646294,0.643344,0.101003,0.358024,0.928233,0.531260,0.422560,0.075657,0.652769,0.641800,-0.158186,0.317242,0.935059,0.532950,0.423760,-0.062674,0.652382,0.643682,-0.395340,0.361064,0.844594,0.470320,0.424410,-0.070949,0.646300,0.643357,-0.103616,0.367407,0.924270,0.468730,0.422560,-0.067356,0.655592,0.638728,-0.184392,0.543315,0.819029,0.468460,0.425440,-0.075650,0.652773,0.641796,0.158237,0.321206,0.933696,0.467040,0.423760,0.082891,0.640677,0.645403,-0.045290,0.247601,0.967803,0.533780,0.420200,0.086866,0.647893,0.644649,-0.202969,0.064122,0.977084,0.535310,0.421680,0.098085,0.635146,0.647569,-0.039157,0.096241,0.994588,0.537380,0.417670,0.100694,0.642763,0.647818,-0.134175,-0.046966,0.989844,0.538700,0.419560,-0.083552,0.640751,0.645597,0.045664,0.246585,0.968045,0.466220,0.420200,-0.098179,0.635159,0.647597,0.038562,0.089660,0.995226,0.462610,0.417670,-0.086881,0.647904,0.644655,0.203219,0.067319,0.976816,0.464680,0.421680,-0.101243,0.642830,0.647978,0.133023,-0.047693,0.989965,0.461290,0.419560,0.136306,0.629074,0.645227,0.220823,-0.080627,0.971976,0.547890,0.413800,0.115853,0.630670,0.647981,0.056262,-0.038863,0.997659,0.542070,0.415390,0.117168,0.638597,0.648979,0.025716,-0.103642,0.994282,0.543000,0.417760,0.135863,0.636770,0.646487,0.218725,-0.104481,0.970177,0.548180,0.416590,-0.136475,0.629094,0.645270,-0.219929,-0.083860,0.971905,0.452110,0.413800,-0.115937,0.630676,0.648000,-0.055300,-0.044585,0.997474,0.457920,0.415390,-0.136070,0.636776,0.646535,-0.219453,-0.106643,0.969777,0.451810,0.416590,-0.117342,0.638615,0.649024,-0.026077,-0.106752,0.993944,0.456990,0.417760,0.170191,0.632392,0.631100,0.468675,0.053361,0.881758,0.561090,0.413650,0.155929,0.630333,0.638567,0.366975,-0.047428,0.929021,0.554900,0.413360,0.154352,0.638199,0.640931,0.369321,-0.077506,0.926064,0.554210,0.416390,0.168199,0.640505,0.634814,0.497520,-0.031791,0.866870,0.559380,0.416800,-0.170621,0.632431,0.631205,-0.467556,0.061029,0.881854,0.438900,0.413650,-0.156155,0.630348,0.638621,-0.363240,-0.047641,0.930477,0.445090,0.413360,-0.168412,0.640532,0.634860,-0.496566,-0.024637,0.867649,0.440610,0.416800,-0.154427,0.638222,0.640950,-0.368012,-0.075536,0.926748,0.445780,0.416390,0.187364,0.638109,0.621818,0.524837,0.226833,0.820422,0.566110,0.414840,0.180156,0.634458,0.625744,0.513294,0.138445,0.846972,0.564250,0.414100,0.175363,0.642570,0.628894,0.584829,0.059220,0.808992,0.561810,0.417320,0.180060,0.644826,0.624093,0.619610,0.190704,0.761391,0.563090,0.417970,-0.187483,0.638124,0.621846,-0.520807,0.229931,0.822127,0.433880,0.414840,-0.180268,0.634469,0.625771,-0.517220,0.152690,0.842122,0.435740,0.414100,-0.180075,0.644823,0.624101,-0.615579,0.193245,0.764015,0.436900,0.417970,-0.175616,0.642594,0.628972,-0.591342,0.073623,0.803053,0.438180,0.417320,0.197018,0.646385,0.611751,0.574902,0.409842,0.708179,0.570960,0.417400,0.193464,0.641920,0.616848,0.548795,0.326873,0.769401,0.568530,0.415960,0.183581,0.647533,0.619230,0.612294,0.243000,0.752361,0.564940,0.418820,0.187483,0.650798,0.616109,0.621308,0.310679,0.719343,0.566840,0.419800,-0.197665,0.646408,0.611904,-0.570795,0.416065,0.707872,0.429030,0.417400,-0.193712,0.641951,0.616909,-0.539770,0.313385,0.781305,0.431460,0.415960,-0.187909,0.650811,0.616201,-0.613006,0.319911,0.722413,0.433150,0.419800,-0.183896,0.647548,0.619293,-0.596997,0.232230,0.767895,0.435050,0.418820,0.201876,0.656207,0.602674,0.618186,0.245973,0.746554,0.574430,0.421060,0.199595,0.650862,0.606416,0.591535,0.390063,0.705647,0.572850,0.419160,0.189572,0.653580,0.611943,0.639992,0.343825,0.687164,0.568220,0.420840,0.191640,0.657461,0.608574,0.623518,0.184654,0.759689,0.569470,0.422090,-0.202162,0.656238,0.602737,-0.606294,0.268841,0.748419,0.425560,0.421060,-0.199928,0.650875,0.606488,-0.586135,0.401553,0.703705,0.427140,0.419160,-0.191777,0.657500,0.608596,-0.628767,0.181084,0.756215,0.430520,0.422090,-0.189761,0.653595,0.611990,-0.639685,0.352794,0.682891,0.431770,0.420840,0.194216,0.662364,0.607085,0.611138,0.104680,0.784572,0.570990,0.423700,0.203602,0.661600,0.599795,0.670965,0.176516,0.720173,0.575940,0.422930,0.195629,0.666981,0.605665,0.622861,-0.087304,0.777446,0.572160,0.425420,0.203824,0.666763,0.597717,0.709038,-0.071409,0.701545,0.577000,0.424770,-0.194633,0.662405,0.607159,-0.619746,0.098426,0.778606,0.429000,0.423700,-0.203419,0.661625,0.599720,-0.669415,0.188274,0.718635,0.424060,0.422930,-0.204088,0.666746,0.597777,-0.710097,-0.087023,0.698706,0.422990,0.424770,-0.195842,0.667013,0.605696,-0.627816,-0.093038,0.772781,0.427830,0.425420,0.206541,0.676137,0.601575,0.666582,-0.484988,0.566087,0.577070,0.428420,0.196468,0.671054,0.606346,0.567984,-0.500926,0.653044,0.572320,0.427000,0.205107,0.671767,0.598661,0.661721,-0.428873,0.614974,0.577270,0.426570,0.197715,0.674029,0.609339,0.545705,-0.602904,0.581990,0.572040,0.428540,-0.196687,0.671087,0.606364,-0.568582,-0.500616,0.652762,0.427670,0.427000,-0.206838,0.676108,0.601665,-0.667383,-0.483024,0.566823,0.422920,0.428420,-0.205442,0.671764,0.598722,-0.664676,-0.427192,0.612954,0.422720,0.426570,-0.197959,0.674034,0.609389,-0.548119,-0.595091,0.587735,0.427950,0.428540,0.206533,0.680852,0.604892,0.693267,-0.374799,0.615553,0.576730,0.430380,0.197911,0.677545,0.612052,0.591907,-0.447286,0.670508,0.571880,0.430070,0.203899,0.686395,0.609882,0.656218,-0.414631,0.630444,0.575320,0.432640,0.195793,0.681400,0.615729,0.584965,-0.396681,0.707432,0.570880,0.431680,-0.206466,0.680835,0.604844,-0.690047,-0.366079,0.624357,0.423260,0.430380,-0.203840,0.686445,0.609744,-0.657758,-0.401966,0.637007,0.424670,0.432640,-0.198104,0.677543,0.612077,-0.599540,-0.432114,0.673669,0.428110,0.430070,-0.196177,0.681469,0.615645,-0.592205,-0.386186,0.707215,0.429110,0.431680,0.199944,0.691181,0.619307,0.577518,-0.542782,0.609804,0.571950,0.435440,0.190444,0.685770,0.621161,0.540062,-0.466808,0.700302,0.568110,0.433580,0.193755,0.695437,0.629502,0.500528,-0.566010,0.655060,0.568110,0.438020,0.184074,0.689499,0.627999,0.474797,-0.519283,0.710572,0.564950,0.435350,-0.199984,0.691306,0.619124,-0.582521,-0.543439,0.604437,0.428040,0.435440,-0.193862,0.695454,0.629494,-0.504050,-0.571806,0.647280,0.431880,0.438020,-0.190801,0.685825,0.621157,-0.541803,-0.465406,0.699890,0.431880,0.433580,-0.184318,0.689525,0.628012,-0.477457,-0.530006,0.700805,0.435040,0.435350,0.186699,0.698939,0.637484,0.424487,-0.554167,0.716037,0.565120,0.439610,0.177771,0.692638,0.633715,0.401909,-0.525275,0.750037,0.562630,0.436590,0.178873,0.701614,0.643479,0.328521,-0.571552,0.751933,0.562290,0.440730,0.171430,0.695488,0.638522,0.312464,-0.517287,0.796731,0.560480,0.437710,-0.187138,0.699006,0.637507,-0.425310,-0.547681,0.720526,0.434880,0.439610,-0.179090,0.701647,0.643503,-0.330600,-0.561386,0.758650,0.437700,0.440730,-0.178240,0.692611,0.633829,-0.399036,-0.532468,0.746491,0.437360,0.436590,-0.171713,0.695528,0.638557,-0.303898,-0.516637,0.800458,0.439510,0.437710,0.169457,0.704114,0.648758,0.206959,-0.634934,0.744330,0.559060,0.441910,0.163610,0.698900,0.642703,0.222693,-0.505775,0.833426,0.557870,0.439090,0.155169,0.706599,0.653225,0.110219,-0.737010,0.666835,0.554330,0.442840,0.151096,0.702190,0.646951,0.165313,-0.488580,0.856715,0.553730,0.440340,-0.169754,0.704160,0.648783,-0.208488,-0.631689,0.746660,0.440930,0.441910,-0.155067,0.706611,0.653165,-0.109996,-0.735825,0.668179,0.445660,0.442840,-0.163665,0.698943,0.642689,-0.220685,-0.506019,0.833812,0.442120,0.439090,-0.151274,0.702210,0.646967,-0.165278,-0.488792,0.856601,0.446270,0.440340,0.111344,0.707465,0.660838,0.163702,-0.847257,0.505328,0.539700,0.442500,0.134008,0.708546,0.657335,0.103501,-0.817525,0.566516,0.547070,0.443180,0.132154,0.704590,0.651345,0.152116,-0.481397,0.863202,0.547070,0.441000,0.112040,0.703453,0.654664,0.122508,-0.528271,0.840192,0.540450,0.440500,-0.111424,0.707483,0.660851,-0.164469,-0.846130,0.506966,0.460290,0.442500,-0.134111,0.708561,0.657359,-0.104535,-0.817328,0.566610,0.452920,0.443180,-0.112178,0.703471,0.654695,-0.123693,-0.528126,0.840109,0.459540,0.440500,-0.132160,0.704597,0.651340,-0.152994,-0.481101,0.863212,0.452920,0.441000,0.091916,0.703157,0.661692,0.249658,-0.850942,0.462134,0.534490,0.440550,0.095535,0.700200,0.654084,0.091338,-0.633281,0.768513,0.536270,0.438560,-0.092222,0.703189,0.661781,-0.251491,-0.849180,0.464377,0.465500,0.440550,-0.095682,0.700221,0.654118,-0.093007,-0.635219,0.766711,0.463720,0.438560,0.073975,0.677375,0.641169,0.014218,-0.462737,0.886382,0.533050,0.431490,0.074686,0.685254,0.643241,-0.144230,-0.434500,0.889049,0.532420,0.432980,0.070331,0.681349,0.640987,-0.085659,-0.358785,0.929482,0.531760,0.431930,0.078358,0.680676,0.643467,-0.067893,-0.518587,0.852325,0.533810,0.432300,0.067315,0.677609,0.639807,-0.024646,-0.239198,0.970658,0.531400,0.431030,0.070707,0.674201,0.640007,0.152911,-0.416228,0.896310,0.532510,0.430800,0.065694,0.674172,0.639334,0.090228,-0.138951,0.986180,0.531220,0.430360,0.069223,0.671371,0.639323,0.370621,-0.415948,0.830438,0.532180,0.430130,0.065833,0.670264,0.639585,0.382597,-0.164311,0.909187,0.531390,0.429580,-0.073909,0.677376,0.641146,-0.011505,-0.463236,0.886160,0.466940,0.431490,-0.074692,0.685258,0.643238,0.144779,-0.433646,0.889376,0.467570,0.432980,-0.078350,0.680681,0.643463,0.069568,-0.517967,0.852567,0.466190,0.432300,-0.070377,0.681356,0.640995,0.085509,-0.358827,0.929479,0.468230,0.431930,-0.067273,0.677608,0.639782,0.023770,-0.241692,0.970062,0.468590,0.431030,-0.070677,0.674201,0.639992,-0.149818,-0.419484,0.895314,0.467490,0.430800,-0.065707,0.674174,0.639328,-0.091962,-0.145675,0.985049,0.468770,0.430360,-0.065717,0.670258,0.639545,-0.389501,-0.155637,0.907781,0.468600,0.429580,-0.069075,0.671363,0.639273,-0.365260,-0.414330,0.833616,0.467810,0.430130,0.079742,0.676729,0.638707,0.299154,-0.786623,0.540121,0.534620,0.430810,0.075331,0.673886,0.637358,0.373486,-0.741799,0.556994,0.533830,0.430240,0.079640,0.674448,0.634061,0.354336,-0.795220,0.492008,0.535010,0.429710,0.076960,0.672071,0.632372,0.343446,-0.725953,0.595850,0.534650,0.429110,0.072555,0.671422,0.636355,0.495169,-0.682034,0.538179,0.533310,0.429720,0.074936,0.670074,0.630799,0.302509,-0.677855,0.670075,0.534280,0.428850,0.074574,0.668351,0.628760,0.178204,-0.620299,0.763854,0.534370,0.428570,0.071203,0.669273,0.634542,0.603586,-0.619859,0.501456,0.533280,0.429210,-0.079768,0.676737,0.638712,-0.293906,-0.784574,0.545952,0.465370,0.430810,-0.075329,0.673890,0.637353,-0.361532,-0.743725,0.562288,0.466160,0.430240,-0.072438,0.671418,0.636315,-0.485590,-0.684906,0.543236,0.466680,0.429720,-0.077089,0.672085,0.632399,-0.338444,-0.732565,0.590596,0.465340,0.429110,-0.074966,0.670084,0.630799,-0.296720,-0.678425,0.672084,0.465710,0.428850,-0.079883,0.674468,0.634125,-0.353503,-0.796336,0.490801,0.464990,0.429710,-0.074682,0.668370,0.628784,-0.184528,-0.603548,0.775680,0.465620,0.428570,-0.071119,0.669270,0.634508,-0.604023,-0.601200,0.523178,0.466710,0.429210,0.080189,0.688760,0.646277,-0.184080,-0.418767,0.889240,0.533540,0.434130,0.087760,0.692175,0.649782,-0.168404,-0.353427,0.920179,0.535190,0.435540,0.083442,0.684020,0.646318,-0.068674,-0.559455,0.826011,0.534760,0.433330,0.090171,0.687153,0.649307,0.015136,-0.615387,0.788080,0.536150,0.434540,0.091135,0.683028,0.641625,0.321974,-0.832917,0.450092,0.536720,0.432350,0.084892,0.679818,0.640398,0.272506,-0.814447,0.512266,0.535450,0.431530,0.090567,0.678820,0.634717,0.355891,-0.686912,0.633636,0.536920,0.430060,0.083874,0.676064,0.633843,0.267121,-0.763194,0.588371,0.535700,0.429660,-0.080238,0.688768,0.646288,0.184423,-0.418780,0.889163,0.466450,0.434130,-0.083493,0.684029,0.646330,0.068617,-0.559442,0.826025,0.465230,0.433330,-0.087773,0.692184,0.649781,0.168321,-0.354078,0.919944,0.464800,0.435540,-0.090187,0.687161,0.649309,-0.015585,-0.615426,0.788041,0.463840,0.434540,-0.091136,0.683031,0.641622,-0.323178,-0.832429,0.450131,0.463280,0.432350,-0.084909,0.679824,0.640400,-0.273573,-0.812597,0.514630,0.464540,0.431530,-0.083984,0.676076,0.633871,-0.272896,-0.765823,0.582274,0.464290,0.429660,-0.090585,0.678826,0.634720,-0.357736,-0.688972,0.630351,0.463070,0.430060,0.098225,0.695643,0.652928,-0.074702,-0.293610,0.953002,0.537490,0.437340,0.112887,0.697887,0.654134,0.066951,-0.243004,0.967712,0.541110,0.438830,0.099845,0.690077,0.651195,0.136100,-0.710623,0.690283,0.538300,0.435910,0.113263,0.691749,0.651338,0.069493,-0.381593,0.921714,0.541660,0.436910,0.099358,0.685510,0.637923,0.392157,-0.856943,0.334458,0.538860,0.433230,0.113263,0.691749,0.651338,0.139190,-0.987914,0.068202,0.541660,0.436910,0.111684,0.692186,0.635555,0.207144,-0.931255,0.299758,0.542080,0.433810,0.097813,0.680513,0.629982,0.487915,-0.598083,0.635795,0.539090,0.430510,0.109774,0.685619,0.625866,0.261987,-0.593890,0.760696,0.542250,0.430740,-0.098305,0.695656,0.652945,0.074978,-0.294850,0.952597,0.462500,0.437340,-0.099826,0.690081,0.651187,-0.135461,-0.711237,0.689777,0.461690,0.435910,-0.113027,0.697897,0.654168,-0.067287,-0.243075,0.967671,0.458880,0.438830,-0.113375,0.691759,0.651366,-0.069237,-0.382608,0.921313,0.458330,0.436910,-0.113375,0.691759,0.651366,-0.138975,-0.987975,0.067758,0.458330,0.436910,-0.099370,0.685514,0.637923,-0.391869,-0.857059,0.334497,0.461130,0.433230,-0.111664,0.692189,0.635542,-0.206541,-0.931214,0.300301,0.457910,0.433810,-0.097779,0.680516,0.629964,-0.486407,-0.599550,0.635568,0.460910,0.430510,-0.109869,0.685637,0.625890,-0.259778,-0.593628,0.761657,0.457740,0.430740,0.148349,0.696204,0.647410,0.236476,-0.235620,0.942636,0.552710,0.438190,0.131244,0.698338,0.651612,0.174175,-0.211149,0.961810,0.546880,0.439020,0.144907,0.689854,0.645387,-0.005263,-0.715290,0.698808,0.551810,0.436080,0.129706,0.691733,0.648936,0.000369,-0.793949,0.607984,0.546710,0.436890,-0.148379,0.696231,0.647381,-0.235931,-0.235520,0.942797,0.447280,0.438190,-0.131328,0.698352,0.651628,-0.175562,-0.210774,0.961640,0.453110,0.439020,-0.129808,0.691745,0.648958,-0.001858,-0.793919,0.608021,0.453280,0.436890,-0.144961,0.689876,0.645378,0.005003,-0.714636,0.699479,0.448180,0.436080,0.167087,0.688899,0.638764,0.367914,-0.353556,0.860022,0.558840,0.435430,0.159515,0.692621,0.643037,0.301380,-0.304412,0.903606,0.556420,0.436840,0.163102,0.683078,0.636666,0.119464,-0.678813,0.724528,0.557800,0.433520,0.155426,0.686569,0.641187,0.070701,-0.679160,0.730578,0.555310,0.434830,-0.167161,0.688942,0.638744,-0.362017,-0.354904,0.861967,0.441150,0.435430,-0.159703,0.692668,0.643059,-0.300128,-0.302682,0.904603,0.443570,0.436840,-0.155559,0.686600,0.641199,-0.070916,-0.677500,0.732096,0.444680,0.434830,-0.163357,0.683091,0.636718,-0.120995,-0.679199,0.723912,0.442190,0.433520,0.170162,0.680133,0.632851,0.190060,-0.673254,0.714567,0.559870,0.432550,0.173268,0.685746,0.634325,0.459232,-0.360317,0.811959,0.560820,0.434330,0.178784,0.682797,0.629089,0.539279,-0.359111,0.761720,0.562760,0.433260,-0.170126,0.680160,0.632809,-0.191245,-0.678613,0.709161,0.440120,0.432550,-0.173527,0.685731,0.634362,-0.455259,-0.376011,0.807065,0.439170,0.434330,-0.178802,0.682845,0.629029,-0.537989,-0.370898,0.756969,0.437230,0.433260,0.188034,0.676765,0.618622,0.526235,-0.495275,0.691216,0.567120,0.430330,0.184336,0.679613,0.623468,0.561387,-0.402876,0.722866,0.565130,0.431800,0.189521,0.674217,0.615817,0.460355,-0.616073,0.639161,0.567790,0.429260,0.189417,0.672230,0.613780,0.387867,-0.726606,0.567100,0.567840,0.428340,0.182680,0.671704,0.617365,0.236586,-0.832352,0.501215,0.564740,0.428550,0.182395,0.670946,0.615719,0.172353,-0.861082,0.478364,0.564720,0.428100,-0.188239,0.676765,0.618654,-0.525352,-0.489975,0.695651,0.432870,0.430330,-0.184407,0.679679,0.623337,-0.557463,-0.396333,0.729490,0.434860,0.431800,-0.189718,0.674221,0.615873,-0.460112,-0.613630,0.641682,0.432200,0.429260,-0.182840,0.671716,0.617392,-0.234919,-0.830459,0.505124,0.435250,0.428550,-0.189602,0.672226,0.613832,-0.389287,-0.721618,0.572470,0.432150,0.428340,-0.182643,0.670952,0.615775,-0.172002,-0.856012,0.487502,0.435270,0.428100,0.188803,0.670346,0.611768,0.406770,-0.580639,0.705264,0.568070,0.427360,0.187824,0.667742,0.610985,0.496649,-0.087588,0.863521,0.567890,0.426340,0.181860,0.670247,0.614358,0.231849,-0.616409,0.752520,0.564750,0.427560,0.180920,0.668832,0.614077,0.383607,0.035360,0.922819,0.564490,0.427110,-0.189133,0.670348,0.611837,-0.412307,-0.572488,0.708703,0.431920,0.427360,-0.188226,0.667743,0.611076,-0.498271,-0.086120,0.862734,0.432100,0.426340,-0.182148,0.670256,0.614422,-0.231211,-0.605020,0.761901,0.435240,0.427560,-0.181271,0.668844,0.614152,-0.379092,0.042534,0.924381,0.435500,0.427110,0.179584,0.666463,0.615791,0.480029,0.436601,0.760889,0.563620,0.426010,0.184371,0.661105,0.615539,0.638832,0.294002,0.710954,0.565350,0.423540,0.186457,0.664296,0.612547,0.562390,0.218474,0.797488,0.566770,0.424960,0.177995,0.664151,0.618925,0.527879,0.507631,0.680922,0.562520,0.424780,-0.184856,0.661146,0.615647,-0.637365,0.289503,0.714111,0.434640,0.423540,-0.179866,0.666494,0.615842,-0.480369,0.438876,0.759364,0.436380,0.426010,-0.186693,0.664356,0.612585,-0.562557,0.218189,0.797448,0.433220,0.424960,-0.178237,0.664196,0.618968,-0.528390,0.501172,0.685296,0.437470,0.424780,0.180339,0.656335,0.621769,0.654397,0.270746,0.706018,0.563150,0.421880,0.176178,0.662212,0.621919,0.525639,0.489039,0.696092,0.561550,0.423980,0.174163,0.660570,0.624645,0.495101,0.474370,0.727907,0.560610,0.423380,0.182579,0.658514,0.618750,0.669340,0.332287,0.664507,0.564240,0.422600,-0.180532,0.656354,0.621791,-0.642958,0.277666,0.713797,0.436840,0.421880,-0.176294,0.662247,0.621931,-0.522886,0.462779,0.715839,0.438450,0.423980,-0.182884,0.658542,0.618803,-0.662164,0.325034,0.675197,0.435750,0.422600,-0.174060,0.660593,0.624592,-0.496410,0.458316,0.737241,0.439380,0.423380,0.177746,0.654277,0.625041,0.642885,0.226910,0.731581,0.561810,0.421160,0.174721,0.652161,0.628312,0.619466,0.228787,0.750945,0.560520,0.420470,0.171607,0.659139,0.627149,0.466393,0.474023,0.746846,0.559660,0.422840,0.168905,0.657577,0.629736,0.439839,0.461608,0.770363,0.558760,0.422310,-0.177835,0.654276,0.625045,-0.632913,0.225495,0.740658,0.438180,0.421160,-0.171682,0.659185,0.627129,-0.469457,0.470649,0.747061,0.440330,0.422840,-0.174649,0.652164,0.628271,-0.621108,0.227588,0.749953,0.439470,0.420470,-0.169093,0.657621,0.629753,-0.439630,0.462175,0.770143,0.441230,0.422310,0.170837,0.650049,0.631645,0.548993,0.203183,0.810755,0.559560,0.419860,0.163885,0.647869,0.635923,0.440071,0.171193,0.881493,0.557580,0.419270,0.166145,0.655675,0.632278,0.397366,0.434633,0.808204,0.557960,0.421740,0.160341,0.653614,0.636126,0.309955,0.435541,0.845122,0.556270,0.421180,-0.170914,0.650054,0.631652,-0.555449,0.211623,0.804172,0.440430,0.419860,-0.166363,0.655722,0.632302,-0.395355,0.441582,0.805419,0.442030,0.421740,-0.164067,0.647867,0.635967,-0.439814,0.173184,0.881232,0.442410,0.419270,-0.160424,0.653633,0.636128,-0.308919,0.440948,0.842694,0.443720,0.421180,0.151895,0.645238,0.641223,0.340000,0.129504,0.931466,0.553320,0.418760,0.135299,0.643822,0.647115,0.229844,0.084808,0.969525,0.548230,0.418760,0.149291,0.651641,0.640677,0.239755,0.483610,0.841807,0.552720,0.420680,0.134928,0.650372,0.645635,0.193959,0.535354,0.822056,0.548360,0.420600,-0.152016,0.645247,0.641258,-0.341951,0.127219,0.931067,0.446670,0.418760,-0.149545,0.651672,0.640751,-0.241368,0.486985,0.839397,0.447270,0.420680,-0.135613,0.643843,0.647194,-0.230622,0.084726,0.969348,0.451760,0.418760,-0.135143,0.650383,0.645687,-0.192424,0.539047,0.820001,0.451630,0.420600,0.103263,0.648873,0.648912,-0.094353,0.086335,0.991788,0.539720,0.421010,0.118426,0.645164,0.649557,0.055923,0.066635,0.996209,0.543630,0.419610,0.105530,0.654354,0.647307,0.081029,0.525232,0.847093,0.540520,0.422350,0.119932,0.651391,0.648072,0.127138,0.548963,0.826121,0.544190,0.421220,-0.103519,0.648906,0.648989,0.093247,0.090886,0.991486,0.460270,0.421010,-0.118636,0.645198,0.649615,-0.056476,0.071667,0.995828,0.456360,0.419610,-0.119948,0.651414,0.648071,-0.126011,0.553401,0.823328,0.455800,0.421220,-0.105532,0.654366,0.647306,-0.081246,0.527973,0.845366,0.459470,0.422350,0.080149,0.658236,0.641971,-0.326303,0.420505,0.846582,0.534380,0.424530,0.090171,0.654166,0.646515,-0.217023,0.174733,0.960401,0.536570,0.422770,0.083983,0.662375,0.640624,-0.277720,0.682605,0.675960,0.535560,0.425240,0.093476,0.659335,0.645007,-0.054282,0.556468,0.829094,0.537590,0.423840,-0.080087,0.658242,0.641952,0.326289,0.421845,0.845921,0.465610,0.424530,-0.090076,0.654167,0.646487,0.217750,0.175026,0.960183,0.463420,0.422770,-0.093518,0.659351,0.645020,0.053639,0.556049,0.829417,0.462400,0.423840,-0.084314,0.662411,0.640721,0.276147,0.683936,0.675259,0.464430,0.425240,0.067164,0.659303,0.634295,-0.006131,0.889137,0.457601,0.532630,0.427050,0.072404,0.658524,0.637190,-0.196453,0.755655,0.624813,0.533250,0.425880,0.077257,0.662368,0.635880,-0.410229,0.813966,0.411304,0.534580,0.426240,-0.067432,0.659331,0.634369,0.009257,0.878823,0.477057,0.467360,0.427050,-0.072560,0.658548,0.637236,0.197177,0.750040,0.631317,0.466740,0.425880,-0.077545,0.662399,0.635965,0.404627,0.817925,0.408994,0.465410,0.426240,0.128813,0.690665,0.631977,-0.161971,-0.908770,0.384580,0.546580,0.433630,0.142019,0.683765,0.632212,-0.255538,-0.833956,0.489099,0.551220,0.432920,0.140706,0.679266,0.625044,-0.223652,-0.537881,0.812812,0.550790,0.429770,0.126831,0.685105,0.625167,-0.105232,-0.546532,0.830800,0.546430,0.430420,-0.128913,0.690684,0.632002,0.161726,-0.908863,0.384463,0.453410,0.433630,-0.126998,0.685122,0.625199,0.105166,-0.546685,0.830708,0.453560,0.430420,-0.142142,0.683788,0.632226,0.255292,-0.833858,0.489394,0.448770,0.432920,-0.140836,0.679291,0.625063,0.222967,-0.537387,0.813327,0.449200,0.429770,0.151196,0.681434,0.632555,-0.124788,-0.824478,0.551964,0.554760,0.431940,0.160445,0.678522,0.629448,-0.033552,-0.841519,0.539184,0.557500,0.431010,0.150475,0.676679,0.626545,-0.061970,-0.592478,0.803199,0.554440,0.429050,-0.151503,0.681457,0.632619,0.124531,-0.824770,0.551585,0.445230,0.431940,-0.150326,0.676696,0.626480,0.059898,-0.585616,0.808372,0.445550,0.429050,-0.160343,0.678540,0.629395,0.033152,-0.842489,0.537692,0.442490,0.431010,0.177326,0.670884,0.616043,-0.017217,-0.850899,0.525047,0.562960,0.427770,0.177619,0.671261,0.617054,-0.044380,-0.914697,0.401695,0.563060,0.428050,-0.177474,0.670884,0.616072,0.018185,-0.844858,0.534682,0.437030,0.427770,-0.177710,0.671268,0.617062,0.046328,-0.911158,0.409444,0.436930,0.428050,0.176855,0.670604,0.615461,0.137590,-0.416321,0.898747,0.562750,0.427530,0.173244,0.670912,0.616026,0.223558,0.058242,0.972949,0.561500,0.427420,0.173747,0.670200,0.616261,0.251136,0.477081,0.842214,0.561690,0.427190,0.176217,0.669816,0.615712,0.291547,0.306278,0.906197,0.562450,0.427280,-0.173354,0.670910,0.616047,-0.220349,0.073514,0.972647,0.438490,0.427420,-0.177036,0.670602,0.615501,-0.133436,-0.400628,0.906472,0.437250,0.427530,-0.173897,0.670197,0.616293,-0.244827,0.504140,0.828192,0.438310,0.427190,-0.176428,0.669813,0.615760,-0.285165,0.327234,0.900888,0.437540,0.427280,0.175094,0.668344,0.617383,0.353822,0.603930,0.714198,0.562020,0.426420,0.173899,0.666551,0.620077,0.362660,0.658702,0.659233,0.561360,0.425480,0.172125,0.669469,0.617329,0.284838,0.627971,0.724238,0.561160,0.426830,0.170671,0.668094,0.619380,0.282418,0.687116,0.669412,0.560670,0.426190,-0.175427,0.668356,0.617454,-0.354280,0.616271,0.703346,0.437980,0.426420,-0.172372,0.669481,0.617373,-0.285027,0.653688,0.701036,0.438830,0.426830,-0.174322,0.666612,0.620139,-0.372331,0.654613,0.657914,0.438630,0.425480,-0.171084,0.668159,0.619406,-0.288844,0.700063,0.653056,0.439320,0.426190,0.172150,0.664864,0.622574,0.335070,0.644141,0.687613,0.560580,0.424760,0.169981,0.663335,0.624759,0.306457,0.639640,0.704943,0.559730,0.424220,0.169155,0.666506,0.621612,0.250186,0.681746,0.687480,0.560060,0.425490,0.167334,0.665018,0.623857,0.191621,0.680323,0.707420,0.559340,0.424880,-0.172528,0.664913,0.622624,-0.349298,0.620301,0.702295,0.439410,0.424760,-0.169678,0.666557,0.621704,-0.258433,0.679336,0.686815,0.439930,0.425490,-0.170268,0.663357,0.624793,-0.324524,0.613067,0.720300,0.440270,0.424220,-0.167837,0.665052,0.623949,-0.201544,0.667171,0.717121,0.440650,0.424880,0.167587,0.662152,0.626795,0.271607,0.649940,0.709794,0.558860,0.423850,0.165532,0.661078,0.628624,0.214661,0.677491,0.703510,0.558050,0.423530,0.165331,0.663752,0.625768,0.097544,0.710794,0.696603,0.558520,0.424520,0.164081,0.662527,0.627064,0.035133,0.759111,0.650012,0.558000,0.424120,-0.165510,0.661108,0.628580,-0.206683,0.672927,0.710248,0.441940,0.423530,-0.167800,0.662176,0.626817,-0.279272,0.633156,0.721887,0.441130,0.423850,-0.165794,0.663772,0.625852,-0.101742,0.692936,0.713785,0.441470,0.424520,-0.164296,0.662535,0.627098,-0.034049,0.745332,0.665824,0.441990,0.424120,0.158019,0.658359,0.633192,0.062778,0.767058,0.638499,0.555950,0.422710,0.163085,0.659941,0.630585,0.140304,0.719508,0.680163,0.557390,0.423110,0.156687,0.660541,0.628474,-0.025916,0.778895,0.626619,0.556140,0.424070,0.161813,0.662031,0.627436,-0.029905,0.777026,0.628758,0.557460,0.424180,-0.162979,0.659964,0.630538,-0.132404,0.724378,0.676569,0.442600,0.423110,-0.157968,0.658392,0.633166,-0.060772,0.771244,0.633632,0.444040,0.422710,-0.161917,0.662037,0.627446,0.029583,0.770377,0.636902,0.442530,0.424180,-0.156661,0.660558,0.628456,0.023511,0.773294,0.633611,0.443850,0.424070,0.135135,0.654418,0.640242,0.052633,0.902751,0.426931,0.548880,0.422480,0.148237,0.655795,0.636259,0.024058,0.834460,0.550543,0.552840,0.422420,0.137230,0.656931,0.629824,-0.048061,0.846409,0.530360,0.549540,0.424370,0.147985,0.658980,0.630357,-0.060282,0.789908,0.610255,0.553290,0.424090,-0.135248,0.654440,0.640274,-0.051435,0.903675,0.425118,0.451110,0.422480,-0.148298,0.655818,0.636267,-0.023732,0.836854,0.546912,0.447150,0.422420,-0.147984,0.659013,0.630353,0.059541,0.786315,0.614951,0.446710,0.424090,-0.137062,0.656941,0.629767,0.048542,0.845985,0.530992,0.450450,0.424370,0.106778,0.658988,0.642072,0.273323,0.852869,0.444869,0.541230,0.424090,0.121386,0.655839,0.640754,0.150199,0.917238,0.368938,0.544880,0.423110,0.106122,0.660463,0.633944,0.371552,0.854109,0.363932,0.541770,0.425850,0.122841,0.656096,0.632217,0.129360,0.903293,0.409058,0.545530,0.425030,-0.106824,0.658993,0.642081,-0.271465,0.847791,0.455584,0.458760,0.424090,-0.121458,0.655855,0.640771,-0.150490,0.915932,0.372050,0.455110,0.423110,-0.123042,0.656120,0.632272,-0.131960,0.903943,0.406784,0.454460,0.425030,-0.106615,0.660516,0.634083,-0.372537,0.855978,0.358495,0.458220,0.425850,0.095858,0.663697,0.640949,0.149825,0.807039,0.571175,0.538280,0.425270,0.086820,0.665541,0.637282,-0.197416,0.793003,0.576345,0.536230,0.426330,0.088265,0.668330,0.634229,-0.124878,0.671603,0.730311,0.536530,0.427420,0.096388,0.667100,0.633948,0.324477,0.785110,0.527557,0.538710,0.426710,-0.095887,0.663714,0.640958,-0.148976,0.801101,0.579693,0.461710,0.425270,-0.096814,0.667143,0.634066,-0.322543,0.791625,0.518938,0.461280,0.426710,-0.088598,0.668364,0.634319,0.125465,0.675651,0.726467,0.463460,0.427420,-0.087193,0.665578,0.637389,0.195627,0.791784,0.578627,0.463760,0.426330,0.080327,0.665008,0.633093,-0.496605,0.697876,0.516093,0.535200,0.427070,0.075685,0.666626,0.627710,-0.559121,0.029408,0.828565,0.534590,0.428160,0.080842,0.667456,0.631245,-0.481577,0.305099,0.821583,0.535320,0.427870,-0.080672,0.665046,0.633192,0.493861,0.700114,0.515695,0.464800,0.427070,-0.081142,0.667490,0.631328,0.482791,0.296910,0.823867,0.464670,0.427870,0.124901,0.670766,0.622035,-0.001303,0.144584,0.989492,0.546270,0.427660,0.137348,0.663512,0.625223,-0.071503,0.475653,0.876722,0.550070,0.425910,0.137992,0.669244,0.623975,-0.074938,0.154664,0.985121,0.550450,0.427210,0.123290,0.662203,0.625084,0.068870,0.565914,0.821582,0.545990,0.426460,0.106601,0.663447,0.627639,0.360620,0.598637,0.715253,0.542090,0.427050,0.107048,0.670299,0.623752,0.295050,0.182809,0.937831,0.542260,0.428060,0.147908,0.663899,0.626514,-0.011425,0.487748,0.872910,0.553720,0.425520,0.148446,0.668319,0.624649,0.033481,0.247887,0.968210,0.554070,0.426750,0.156575,0.663773,0.625728,0.060190,0.554614,0.829928,0.556480,0.425210,0.157326,0.667220,0.623962,0.130418,0.381882,0.914963,0.556840,0.426220,-0.137573,0.663538,0.625270,0.073664,0.472510,0.878242,0.449920,0.425910,-0.125088,0.670782,0.622067,0.000961,0.141926,0.989877,0.453730,0.427660,-0.138496,0.669272,0.624081,0.076306,0.158286,0.984440,0.449540,0.427210,-0.123145,0.662205,0.625036,-0.070650,0.565988,0.821381,0.454010,0.426460,-0.107357,0.670324,0.623834,-0.291752,0.183893,0.938650,0.457730,0.428060,-0.106663,0.663454,0.627648,-0.366068,0.604818,0.707241,0.457900,0.427050,-0.148301,0.663941,0.626599,0.011215,0.478327,0.878110,0.446270,0.425520,-0.156977,0.663799,0.625800,-0.061725,0.539284,0.839859,0.443510,0.425210,-0.148979,0.668359,0.624763,-0.033030,0.256253,0.966045,0.445930,0.426750,-0.157925,0.667268,0.624092,-0.129816,0.388766,0.912145,0.443150,0.426220,0.108703,0.677714,0.623370,0.247120,-0.176337,0.952805,0.542300,0.429200,0.125594,0.677998,0.623171,-0.033675,-0.162774,0.986089,0.546380,0.428860,0.139066,0.674186,0.623875,-0.099808,-0.135621,0.985721,0.550630,0.428370,0.158497,0.670565,0.622738,0.236724,0.132819,0.962456,0.557120,0.427210,0.149277,0.672453,0.624075,0.039376,-0.095982,0.994604,0.554260,0.427840,-0.125810,0.678016,0.623226,0.033240,-0.160797,0.986428,0.453610,0.428860,-0.108743,0.677719,0.623377,-0.244061,-0.169375,0.954854,0.457690,0.429200,-0.139031,0.674206,0.623845,0.099076,-0.129413,0.986629,0.449360,0.428370,-0.158747,0.670617,0.622782,-0.235164,0.168859,0.957175,0.442880,0.427210,-0.149475,0.672475,0.624117,-0.041812,-0.073791,0.996397,0.445730,0.427840,0.096836,0.670017,0.630484,0.416636,0.510664,0.752088,0.538950,0.427610,0.097221,0.672994,0.629014,0.442294,0.164024,0.881744,0.539080,0.428360,0.088788,0.670695,0.633058,-0.004966,0.350342,0.936609,0.536650,0.428060,0.089194,0.672831,0.632688,0.100573,0.093516,0.990525,0.536720,0.428540,0.080385,0.669230,0.630736,-0.282929,-0.124922,0.950971,0.535220,0.428330,0.080390,0.670764,0.630995,-0.092025,-0.268452,0.958887,0.535160,0.428660,0.097534,0.676263,0.628613,0.464459,-0.187203,0.865582,0.539100,0.429230,0.089794,0.675366,0.632561,0.237226,-0.267145,0.934001,0.536810,0.429120,0.081789,0.672916,0.631390,0.093424,-0.484718,0.869667,0.535420,0.429000,-0.096978,0.670039,0.630521,-0.415156,0.530540,0.739035,0.461040,0.427610,-0.097286,0.673014,0.629028,-0.434230,0.177804,0.883080,0.460920,0.428360,-0.089125,0.672831,0.632658,-0.096077,0.105160,0.989803,0.463280,0.428540,-0.088884,0.670712,0.633079,0.008813,0.366035,0.930559,0.463340,0.428060,-0.080340,0.670769,0.630972,0.089938,-0.269960,0.958662,0.464830,0.428660,-0.080482,0.669248,0.630759,0.282012,-0.127715,0.950872,0.464770,0.428330,-0.097532,0.676274,0.628602,-0.460578,-0.180582,0.869056,0.460890,0.429230,-0.089725,0.675362,0.632533,-0.237216,-0.268641,0.933574,0.463180,0.429120,-0.081768,0.672917,0.631374,-0.101820,-0.496635,0.861966,0.464570,0.429000,0.163822,0.666463,0.623584,0.157931,0.556789,0.815503,0.558490,0.425560,0.162411,0.664117,0.625228,0.029156,0.644892,0.763717,0.557910,0.424920,-0.164432,0.666502,0.623717,-0.159552,0.556074,0.815675,0.441500,0.425560,-0.162889,0.664149,0.625306,-0.029595,0.631023,0.775200,0.442080,0.424920,0.166777,0.670230,0.619341,0.412194,0.447259,0.793760,0.559580,0.426970,0.165189,0.668518,0.621588,0.298377,0.487714,0.820431,0.558980,0.426340,-0.167236,0.670278,0.619416,-0.412617,0.486457,0.770134,0.440410,0.426970,-0.165666,0.668576,0.621676,-0.297239,0.507267,0.808906,0.441010,0.426340,0.138639,0.514848,0.675034,0.686651,-0.026778,0.726493,0.541080,0.378750,0.144036,0.538859,0.666669,0.723189,0.079943,0.686007,0.544160,0.385270,0.128072,0.528942,0.683839,0.619139,0.050195,0.783675,0.537700,0.383550,0.153615,0.523083,0.656779,0.791195,-0.005276,0.611541,0.547860,0.380110,0.124046,0.506734,0.684850,0.505384,-0.145695,0.850506,0.536030,0.376770,0.115124,0.519991,0.691887,0.443696,-0.082282,0.892392,0.533650,0.381360,0.166549,0.543929,0.640922,0.756851,-0.044350,0.652081,0.555060,0.385180,0.189245,0.547917,0.614133,0.769093,-0.184162,0.612030,0.567400,0.384450,0.171070,0.527624,0.632195,0.809879,-0.120638,0.574057,0.557260,0.379470,0.190333,0.531509,0.605801,0.796407,-0.235299,0.557109,0.567970,0.378010,-0.138675,0.514850,0.675044,-0.686517,-0.027215,0.726605,0.458910,0.378750,-0.144065,0.538858,0.666677,-0.722948,0.079495,0.686314,0.455830,0.385270,-0.153643,0.523083,0.656786,-0.791075,-0.005234,0.611697,0.452140,0.380110,-0.128108,0.528945,0.683849,-0.618871,0.050266,0.783883,0.462290,0.383550,-0.115145,0.519993,0.691893,-0.443284,-0.082574,0.892570,0.466340,0.381360,-0.124051,0.506735,0.684851,-0.504994,-0.146190,0.850653,0.463960,0.376770,-0.166574,0.543930,0.640929,-0.756326,-0.045329,0.652623,0.444930,0.385180,-0.171115,0.527624,0.632206,-0.808844,-0.120015,0.575646,0.442730,0.379470,-0.189246,0.547921,0.614132,-0.766808,-0.183944,0.614955,0.432590,0.384450,-0.190553,0.531505,0.605856,-0.793900,-0.235449,0.560612,0.432020,0.378010,0.110633,0.501049,0.689751,0.316982,-0.254505,0.913646,0.531620,0.375190,0.102370,0.513445,0.695284,0.296947,-0.194408,0.934894,0.529800,0.379430,-0.110635,0.501049,0.689752,-0.316873,-0.254571,0.913665,0.468370,0.375190,-0.102378,0.513446,0.695286,-0.296786,-0.194577,0.934911,0.470190,0.379430,0.106151,0.486997,0.685879,0.136209,-0.399747,0.906449,0.530050,0.370060,0.117810,0.489362,0.683719,0.350154,-0.292965,0.889699,0.533320,0.371210,0.131570,0.494885,0.677959,0.564667,-0.187020,0.803850,0.537500,0.372610,0.124248,0.477624,0.677137,0.392839,-0.320343,0.862008,0.534950,0.367080,0.137089,0.483520,0.670589,0.623810,-0.220291,0.749888,0.538670,0.368480,0.112161,0.475488,0.679410,0.163503,-0.403520,0.900244,0.532150,0.366000,0.102553,0.476643,0.680780,0.244108,-0.319256,0.915689,0.529290,0.365140,0.096727,0.487362,0.686236,0.164717,-0.361113,0.917859,0.527460,0.368950,0.093136,0.477023,0.684977,0.426869,-0.107750,0.897871,0.526090,0.364570,0.087692,0.486743,0.688737,0.320148,-0.191968,0.927714,0.524830,0.367990,-0.106158,0.486996,0.685881,-0.136293,-0.399634,0.906486,0.469940,0.370060,-0.117816,0.489362,0.683721,-0.349973,-0.292904,0.889790,0.466670,0.371210,-0.112169,0.475485,0.679411,-0.163130,-0.403676,0.900241,0.467840,0.366000,-0.124253,0.477623,0.677138,-0.392449,-0.320085,0.862282,0.465040,0.367080,-0.131584,0.494886,0.677963,-0.564315,-0.187185,0.804058,0.462490,0.372610,-0.137112,0.483514,0.670597,-0.623669,-0.220013,0.750087,0.461320,0.368480,-0.102563,0.476637,0.680782,-0.242172,-0.321241,0.915509,0.470700,0.365140,-0.096736,0.487360,0.686238,-0.164145,-0.361586,0.917776,0.472530,0.368950,-0.087692,0.486745,0.688733,-0.319623,-0.193068,0.927667,0.475160,0.367990,-0.093123,0.477025,0.684960,-0.425134,-0.112297,0.898137,0.473910,0.364570,0.150793,0.491149,0.658182,0.787099,-0.152814,0.597597,0.544490,0.370190,0.159882,0.509606,0.647512,0.839157,-0.071693,0.539143,0.550250,0.375500,0.146053,0.502583,0.666482,0.741736,-0.095837,0.663810,0.543130,0.374400,0.163407,0.497040,0.638874,0.865703,-0.138871,0.480909,0.551820,0.371100,-0.150806,0.491149,0.658186,-0.787141,-0.152815,0.597543,0.455510,0.370190,-0.159903,0.509606,0.647517,-0.838863,-0.072352,0.539513,0.449740,0.375500,-0.163428,0.497040,0.638879,-0.865359,-0.139624,0.481310,0.448180,0.371100,-0.146079,0.502582,0.666489,-0.741665,-0.096203,0.663836,0.456860,0.374400,0.173850,0.513139,0.623110,0.842940,-0.158961,0.513987,0.558850,0.374530,0.191515,0.516483,0.597220,0.815952,-0.258041,0.517337,0.568720,0.372850,0.176175,0.499426,0.614387,0.858131,-0.201914,0.472062,0.560250,0.369870,0.192467,0.502496,0.588118,0.829871,-0.276637,0.484547,0.569970,0.368120,-0.173923,0.513140,0.623128,-0.841660,-0.161057,0.515431,0.441140,0.374530,-0.176221,0.499429,0.614397,-0.857169,-0.204009,0.472907,0.439740,0.369870,-0.191673,0.516491,0.597255,-0.813458,-0.262361,0.519088,0.431270,0.372850,-0.192578,0.502494,0.588145,-0.827986,-0.280870,0.485336,0.430030,0.368120,0.209816,0.536650,0.580278,0.811975,-0.280852,0.511682,0.578450,0.377250,0.226139,0.560141,0.565247,0.860457,-0.224328,0.457482,0.587460,0.385150,0.209423,0.553221,0.589386,0.802335,-0.239329,0.546791,0.577800,0.384550,0.226914,0.543232,0.554581,0.862629,-0.261481,0.433012,0.588950,0.377090,0.209911,0.508513,0.561463,0.829458,-0.309946,0.464686,0.580990,0.368090,0.226843,0.528697,0.544465,0.860831,-0.289178,0.418744,0.590670,0.372400,0.209804,0.521892,0.570853,0.821452,-0.303423,0.482856,0.579520,0.372260,0.227233,0.516387,0.534964,0.863278,-0.296999,0.408097,0.592520,0.368860,-0.210210,0.536672,0.580365,-0.813137,-0.280249,0.510165,0.421540,0.377250,-0.226398,0.560161,0.565295,-0.860092,-0.231188,0.454746,0.412530,0.385150,-0.226800,0.543245,0.554535,-0.863570,-0.263312,0.430016,0.411040,0.377090,-0.209768,0.553228,0.589466,-0.801323,-0.240664,0.547688,0.422190,0.384550,-0.210140,0.508511,0.561520,-0.828563,-0.313894,0.463632,0.419000,0.368090,-0.226979,0.528704,0.544495,-0.862754,-0.284837,0.417760,0.409320,0.372400,-0.227416,0.516400,0.535001,-0.863846,-0.298050,0.406123,0.407470,0.368860,-0.210099,0.521910,0.570921,-0.822049,-0.303589,0.481736,0.420470,0.372260,0.239837,0.551414,0.529194,0.913719,-0.208419,0.348826,0.600010,0.377480,0.248334,0.579417,0.519558,0.948081,-0.131428,0.289602,0.607950,0.387620,0.238924,0.568752,0.541331,0.912285,-0.183624,0.366084,0.597960,0.385940,0.249511,0.561816,0.506375,0.949427,-0.154811,0.273171,0.610420,0.379010,-0.239957,0.551439,0.529223,-0.911919,-0.215441,0.349269,0.399980,0.377480,-0.248711,0.579444,0.519581,-0.945916,-0.133591,0.295628,0.392040,0.387620,-0.249775,0.561854,0.506430,-0.947775,-0.167291,0.271543,0.389570,0.379010,-0.239326,0.568805,0.541412,-0.911614,-0.188967,0.365036,0.402030,0.385940,0.240538,0.537107,0.518630,0.913027,-0.233373,0.334544,0.601810,0.372870,0.250086,0.547423,0.495240,0.950340,-0.178443,0.254974,0.612220,0.374080,0.241053,0.525302,0.508459,0.915029,-0.254113,0.313286,0.603900,0.369360,0.250265,0.535197,0.484149,0.950516,-0.209453,0.229452,0.614530,0.370040,-0.240643,0.537108,0.518649,-0.912844,-0.233582,0.334896,0.398180,0.372870,-0.241154,0.525318,0.508478,-0.915738,-0.253477,0.311725,0.396090,0.369360,-0.250196,0.547441,0.495250,-0.950514,-0.184754,0.249776,0.387770,0.374080,-0.250272,0.535206,0.484144,-0.951713,-0.207158,0.226556,0.385470,0.370040,0.254499,0.592739,0.501547,0.966353,-0.089526,0.241139,0.615620,0.390910,0.255898,0.575390,0.487680,0.969391,-0.114982,0.216934,0.618610,0.382180,0.259264,0.609173,0.487049,0.972836,-0.072538,0.219835,0.622240,0.395740,0.260875,0.593143,0.472375,0.977336,-0.092835,0.190251,0.626000,0.387360,-0.256344,0.575459,0.487791,-0.970672,-0.123411,0.206313,0.381380,0.382180,-0.255458,0.592822,0.501709,-0.965996,-0.091139,0.241962,0.384370,0.390910,-0.260891,0.593160,0.472351,-0.979585,-0.092294,0.178592,0.374000,0.387360,-0.259568,0.609195,0.487094,-0.975730,-0.080378,0.203694,0.377750,0.395740,0.261690,0.579107,0.459424,0.980037,-0.111517,0.164594,0.629170,0.381050,0.256545,0.560615,0.475789,0.971349,-0.135520,0.195233,0.620860,0.376380,0.261943,0.566567,0.446678,0.981376,-0.129545,0.141841,0.632520,0.375390,0.256972,0.547532,0.463960,0.971539,-0.163158,0.171730,0.623550,0.371270,-0.262006,0.566584,0.446672,-0.980738,-0.131258,0.144655,0.367480,0.375390,-0.256767,0.547539,0.463905,-0.971099,-0.164115,0.173300,0.376440,0.371270,-0.256543,0.560624,0.475767,-0.971491,-0.143678,0.188577,0.379130,0.376380,-0.261925,0.579127,0.459444,-0.980156,-0.113907,0.162232,0.370820,0.381050,0.265139,0.615680,0.459358,0.979814,-0.078394,0.183902,0.634140,0.394940,0.263077,0.628851,0.475251,0.976184,-0.070537,0.205157,0.629120,0.402010,0.265750,0.650972,0.468518,0.978860,-0.058597,0.195956,0.633890,0.409690,0.268590,0.641650,0.451575,0.979913,-0.066528,0.188004,0.640090,0.404410,-0.265279,0.615710,0.459369,-0.981921,-0.071476,0.175277,0.365860,0.394940,-0.263184,0.628875,0.475228,-0.981800,-0.065043,0.178435,0.370870,0.402010,-0.268158,0.641630,0.451423,-0.982679,-0.060398,0.175197,0.359900,0.404410,-0.265501,0.650974,0.468448,-0.982795,-0.053837,0.176681,0.366100,0.409690,0.270014,0.669140,0.452654,0.981225,-0.048628,0.186633,0.640840,0.415070,0.266824,0.674451,0.470067,0.978545,-0.047495,0.200485,0.634070,0.418660,0.266833,0.699129,0.477966,0.976649,-0.007678,0.214704,0.631600,0.428490,0.269283,0.698174,0.460601,0.981903,-0.007268,0.189244,0.638590,0.426690,-0.269465,0.669160,0.452522,-0.982624,-0.048795,0.179081,0.359150,0.415070,-0.267086,0.674483,0.470074,-0.979855,-0.039394,0.195786,0.365920,0.418660,-0.269330,0.698195,0.460590,-0.980906,-0.010448,0.194201,0.361400,0.426690,-0.265822,0.699118,0.477781,-0.976032,-0.000484,0.217627,0.368390,0.428490,0.266761,0.728840,0.472057,0.974326,0.040988,0.221378,0.635610,0.439160,0.263050,0.724694,0.488713,0.967298,0.053598,0.247915,0.628460,0.438840,0.256765,0.749722,0.504315,0.945944,0.103458,0.307386,0.623220,0.449320,0.260564,0.758530,0.488827,0.952991,0.085140,0.290792,0.630010,0.451620,-0.266400,0.728846,0.471922,-0.971853,0.032443,0.233342,0.364380,0.439160,-0.262718,0.724715,0.488610,-0.965936,0.045127,0.254817,0.371530,0.438840,-0.260430,0.758569,0.488771,-0.950955,0.073461,0.300481,0.369980,0.451620,-0.256150,0.749769,0.504128,-0.946843,0.100846,0.305481,0.376770,0.449320,0.248576,0.783575,0.514329,0.938959,0.095725,0.330443,0.619950,0.462980,0.244605,0.771757,0.527380,0.940450,0.117467,0.318991,0.614490,0.459400,0.233202,0.787582,0.558665,0.948828,0.107795,0.296826,0.602840,0.466980,0.235261,0.800990,0.548044,0.944689,0.092980,0.314511,0.606850,0.471340,-0.248388,0.783580,0.514261,-0.939147,0.087634,0.332150,0.380040,0.462980,-0.244463,0.771767,0.527323,-0.944471,0.115627,0.307580,0.385500,0.459400,-0.235190,0.800979,0.548038,-0.946211,0.098211,0.308286,0.393140,0.471340,-0.233732,0.787642,0.558821,-0.950891,0.111610,0.288704,0.397150,0.466980,0.222895,0.809945,0.583953,0.922651,0.134661,0.361360,0.592450,0.475150,0.221902,0.795395,0.593149,0.916149,0.137462,0.376530,0.589140,0.470170,0.206082,0.798173,0.622267,0.819297,0.171391,0.547154,0.576570,0.471170,0.207932,0.814383,0.614819,0.831745,0.197495,0.518840,0.579340,0.476620,-0.223014,0.809957,0.583979,-0.924379,0.143307,0.353534,0.407540,0.475150,-0.222689,0.795432,0.593379,-0.917142,0.130843,0.376471,0.410850,0.470170,-0.208609,0.814432,0.615008,-0.833349,0.199433,0.515516,0.420650,0.476620,-0.206549,0.798195,0.622383,-0.821173,0.154941,0.549243,0.423420,0.471170,0.189250,0.817286,0.637271,0.697553,0.242587,0.674220,0.569280,0.478170,0.188497,0.799862,0.642783,0.689061,0.183353,0.701126,0.567510,0.472360,0.168671,0.800972,0.658552,0.561255,0.183189,0.807115,0.558960,0.473470,0.168233,0.819199,0.654938,0.565393,0.250693,0.785801,0.559710,0.479470,-0.189960,0.817358,0.637462,-0.695622,0.242724,0.676162,0.430710,0.478170,-0.188872,0.799889,0.642887,-0.689214,0.170035,0.704324,0.432480,0.472360,-0.168601,0.819240,0.655038,-0.561908,0.251348,0.788089,0.440280,0.479470,-0.169080,0.801017,0.658666,-0.560655,0.178174,0.808653,0.441030,0.473470,0.141248,0.818006,0.671233,0.431124,0.238294,0.870257,0.548750,0.479750,0.142415,0.799537,0.673975,0.436405,0.187456,0.880006,0.548530,0.473830,0.110541,0.794029,0.688455,0.314381,0.193860,0.929292,0.536850,0.472810,0.108971,0.812803,0.685171,0.298566,0.235516,0.924873,0.536880,0.478740,-0.141517,0.818023,0.671300,-0.429408,0.239100,0.870885,0.451240,0.479750,-0.142628,0.799562,0.674033,-0.435503,0.187870,0.880365,0.451460,0.473830,-0.109157,0.812825,0.685220,-0.296865,0.236497,0.925171,0.463110,0.478740,-0.110899,0.794075,0.688550,-0.312444,0.193571,0.930005,0.463140,0.472810,0.042632,0.774337,0.705883,0.042044,0.190318,0.980822,0.513280,0.466280,0.075377,0.784423,0.700476,0.181513,0.192108,0.964442,0.524390,0.469770,0.042495,0.795791,0.700741,0.042975,0.229379,0.972388,0.513160,0.473170,0.074046,0.804175,0.695517,0.164708,0.241010,0.956444,0.524310,0.476140,-0.042847,0.774357,0.705922,-0.042531,0.189698,0.980921,0.486710,0.466280,-0.075419,0.784429,0.700479,-0.181164,0.191008,0.964726,0.475600,0.469770,-0.074062,0.804178,0.695505,-0.163870,0.241573,0.956446,0.475680,0.476140,-0.042761,0.795818,0.700793,-0.043254,0.229629,0.972317,0.486830,0.473170,0.018941,0.791033,0.701416,-0.019576,0.207474,0.978045,0.505680,0.471380,0.018540,0.768785,0.706062,-0.037007,0.185379,0.981970,0.505770,0.464370,-0.000010,0.767265,0.705747,0.000285,0.178587,0.983924,0.500000,0.463830,-0.000025,0.789620,0.701130,0.000231,0.198327,0.980136,0.500000,0.470820,-0.019000,0.791035,0.701421,0.020458,0.207409,0.978040,0.494310,0.471380,-0.018560,0.768785,0.706059,0.037621,0.185266,0.981968,0.494230,0.464370,0.081108,0.475457,0.690954,0.438028,0.069914,0.896238,0.522350,0.364480,0.076077,0.483943,0.692691,0.358864,-0.020566,0.933163,0.521560,0.367410,0.066723,0.473478,0.698383,0.416570,0.207708,0.885057,0.518390,0.364650,0.061920,0.480362,0.698453,0.381978,0.155995,0.910911,0.517970,0.367040,-0.081118,0.475430,0.690928,-0.433613,0.057195,0.899282,0.477640,0.364480,-0.076078,0.483943,0.692685,-0.357453,-0.026516,0.933555,0.478430,0.367410,-0.061899,0.480351,0.698409,-0.379423,0.140217,0.914537,0.482020,0.367040,-0.066607,0.473426,0.698155,-0.413028,0.186896,0.891335,0.481600,0.364650,0.052449,0.471635,0.705450,0.403265,0.261445,0.876940,0.514520,0.364860,0.049068,0.477522,0.705210,0.400605,0.252517,0.880767,0.514350,0.366780,0.041327,0.470050,0.711045,0.372124,0.242223,0.896020,0.511210,0.364970,0.039190,0.475112,0.710478,0.388757,0.244963,0.888178,0.511180,0.366520,-0.052319,0.471576,0.705167,-0.400057,0.243849,0.883455,0.485470,0.364860,-0.048964,0.477504,0.705006,-0.398085,0.229233,0.888246,0.485640,0.366780,-0.039069,0.475025,0.710146,-0.389685,0.215698,0.895332,0.488810,0.366520,-0.041114,0.469971,0.710572,-0.365829,0.225837,0.902866,0.488780,0.364970,0.032325,0.473096,0.713742,0.291533,0.162587,0.942642,0.508960,0.366130,0.033618,0.468627,0.714256,0.246647,0.176724,0.952856,0.508920,0.364830,0.027178,0.467607,0.715296,0.078108,0.082861,0.993495,0.507170,0.364670,0.026361,0.471713,0.715083,0.147020,0.036898,0.988445,0.507230,0.365790,-0.032172,0.473033,0.713380,-0.305702,0.132743,0.942829,0.491030,0.366130,-0.026252,0.471664,0.714814,-0.167354,0.012498,0.985818,0.492760,0.365790,-0.027015,0.467544,0.714915,-0.101986,0.067594,0.992487,0.492820,0.364670,-0.033351,0.468566,0.713733,-0.257211,0.156887,0.953535,0.491070,0.364830,0.020169,0.470766,0.715566,0.027750,-0.095399,0.995052,0.505480,0.365660,0.020589,0.466808,0.715362,-0.048171,-0.012632,0.998759,0.505400,0.364710,0.013625,0.470062,0.715213,-0.052136,-0.221975,0.973657,0.503660,0.365590,0.013802,0.466216,0.714495,-0.125550,-0.106527,0.986351,0.503570,0.364760,-0.020060,0.470756,0.715374,-0.045714,-0.111104,0.992757,0.494510,0.365660,-0.013570,0.470064,0.715146,0.038660,-0.226511,0.973241,0.496330,0.365590,-0.020449,0.466796,0.715105,0.025429,-0.018802,0.999500,0.494590,0.364710,-0.013748,0.466204,0.714435,0.108819,-0.106780,0.988310,0.496420,0.364760,0.006951,0.469634,0.714599,-0.064975,-0.322994,0.944168,0.501790,0.365410,0.006977,0.465882,0.713429,-0.123375,-0.192758,0.973459,0.501730,0.364650,0.000038,0.469429,0.714080,-0.000346,-0.365485,0.930817,0.500000,0.365290,0.000021,0.465748,0.712611,0.000124,-0.232815,0.972521,0.500000,0.364550,-0.006923,0.469642,0.714582,0.060940,-0.322269,0.944685,0.498200,0.365410,-0.006920,0.465876,0.713447,0.119009,-0.191624,0.974226,0.498260,0.364650,0.000047,0.461921,0.712068,0.000287,-0.028501,0.999594,0.500000,0.363760,0.007047,0.457158,0.713322,-0.186003,0.162170,0.969074,0.501610,0.362630,0.007039,0.461940,0.712973,-0.167288,-0.005238,0.985894,0.501650,0.363860,0.000057,0.457105,0.712408,0.000075,0.158773,0.987315,0.500000,0.362530,0.013955,0.462195,0.714485,-0.181227,0.050543,0.982142,0.503450,0.363970,0.014115,0.457345,0.715159,-0.220700,0.189480,0.956760,0.503360,0.362750,-0.006921,0.457141,0.713347,0.177699,0.162030,0.970654,0.498380,0.362630,-0.006978,0.461941,0.712963,0.160685,-0.006996,0.986981,0.498340,0.363860,-0.013953,0.457401,0.714958,0.206962,0.190485,0.959626,0.496630,0.362750,-0.013890,0.462172,0.714418,0.164665,0.047629,0.985199,0.496540,0.363970,0.141864,0.471195,0.662386,0.674487,-0.227152,0.702474,0.540170,0.364010,0.154282,0.478962,0.650025,0.825990,-0.168176,0.538012,0.545740,0.365810,0.164920,0.484051,0.629934,0.881995,-0.175124,0.437512,0.552930,0.366610,0.157003,0.463961,0.640455,0.859715,-0.182051,0.477230,0.547090,0.360670,0.166280,0.468967,0.620308,0.895743,-0.184295,0.404573,0.554020,0.361380,0.146245,0.455888,0.653120,0.727628,-0.237639,0.643494,0.541900,0.358770,0.178908,0.470089,0.594152,0.870240,-0.238354,0.431127,0.563410,0.359360,0.193095,0.488511,0.577755,0.839805,-0.283865,0.462762,0.571950,0.363060,0.177785,0.485641,0.605023,0.863793,-0.234051,0.446186,0.561800,0.365030,0.194368,0.472704,0.566020,0.848093,-0.279987,0.449828,0.574100,0.357070,-0.141882,0.471188,0.662392,-0.674706,-0.227094,0.702282,0.459820,0.364010,-0.154310,0.478961,0.650033,-0.826021,-0.168209,0.537954,0.454250,0.365810,-0.157017,0.463960,0.640458,-0.859756,-0.182080,0.477145,0.452900,0.360670,-0.146252,0.455886,0.653118,-0.729006,-0.235079,0.642875,0.458090,0.358770,-0.164927,0.484051,0.629936,-0.881757,-0.175366,0.437894,0.447060,0.366610,-0.166306,0.468961,0.620321,-0.895563,-0.184914,0.404689,0.445970,0.361380,-0.178942,0.470089,0.594160,-0.869954,-0.239387,0.431132,0.436580,0.359360,-0.193138,0.488511,0.577765,-0.838801,-0.287058,0.462613,0.428040,0.363060,-0.194399,0.472703,0.566028,-0.847855,-0.281398,0.449397,0.425890,0.357070,-0.177840,0.485642,0.605036,-0.863286,-0.235157,0.446585,0.438190,0.365030,0.106295,0.453748,0.673299,0.557458,-0.174318,0.811698,0.529590,0.357620,0.116926,0.462535,0.672855,0.236882,-0.382977,0.892870,0.533520,0.361310,0.106098,0.465657,0.675818,0.381341,-0.252313,0.889335,0.530050,0.361260,0.119157,0.445656,0.663802,0.362416,-0.371069,0.854964,0.534450,0.355430,0.094852,0.457178,0.683383,0.616605,0.004054,0.787262,0.525470,0.359050,0.095780,0.467502,0.682651,0.536061,-0.048201,0.842802,0.526260,0.361710,0.129409,0.464418,0.669680,0.430548,-0.335002,0.838094,0.536510,0.362360,0.134000,0.448504,0.660928,0.461066,-0.350469,0.815224,0.538210,0.356980,-0.116929,0.462535,0.672853,-0.236034,-0.383340,0.892938,0.466470,0.361310,-0.106314,0.453737,0.673286,-0.555369,-0.172736,0.813466,0.470400,0.357620,-0.106092,0.465654,0.675805,-0.377904,-0.254394,0.890209,0.469940,0.361260,-0.119191,0.445647,0.663784,-0.359850,-0.370472,0.856305,0.465540,0.355430,-0.095740,0.467495,0.682579,-0.531978,-0.055045,0.844967,0.473730,0.361710,-0.094776,0.457175,0.683258,-0.611688,0.006385,0.791073,0.474520,0.359050,-0.129457,0.464401,0.669690,-0.430290,-0.335057,0.838205,0.463480,0.362360,-0.134029,0.448495,0.660927,-0.461357,-0.347319,0.816407,0.461780,0.356980,0.000049,0.450296,0.714173,-0.000617,0.303122,0.952952,0.500000,0.360290,0.007226,0.442361,0.718076,-0.171184,0.395378,0.902426,0.501620,0.357790,0.007149,0.450662,0.714924,-0.183590,0.292765,0.938394,0.501610,0.360400,0.000070,0.441660,0.717600,-0.000836,0.411422,0.911445,0.500000,0.357650,0.014149,0.451325,0.716707,-0.240966,0.286972,0.927137,0.503310,0.360560,0.014250,0.443770,0.719363,-0.235361,0.368458,0.899357,0.503280,0.358040,-0.007170,0.442358,0.718081,0.169407,0.396736,0.902165,0.498370,0.357790,-0.007059,0.450677,0.714893,0.178301,0.294140,0.938984,0.498380,0.360400,-0.014136,0.443782,0.719333,0.231040,0.372371,0.898866,0.496710,0.358040,-0.014062,0.451341,0.716632,0.232177,0.294009,0.927175,0.496680,0.360560,0.021067,0.458051,0.716434,-0.141475,0.235343,0.961561,0.505220,0.362700,0.020872,0.462745,0.715459,-0.099909,0.109583,0.988944,0.505320,0.363900,0.027752,0.463655,0.715712,0.036268,0.159501,0.986531,0.507160,0.363750,0.028149,0.459035,0.716782,0.012734,0.263720,0.964515,0.507060,0.362520,0.020971,0.445264,0.720621,-0.165192,0.345755,0.923669,0.504890,0.358250,0.021051,0.452223,0.718199,-0.173230,0.306317,0.936035,0.505040,0.360610,0.028289,0.453094,0.718818,0.010384,0.315779,0.948776,0.506780,0.360530,0.028077,0.446331,0.721285,0.039312,0.312598,0.949072,0.506510,0.358320,-0.020951,0.457991,0.716241,0.119829,0.238311,0.963768,0.494770,0.362700,-0.020763,0.462702,0.715215,0.077061,0.109878,0.990953,0.494670,0.363900,-0.027967,0.458960,0.716345,-0.035480,0.268513,0.962622,0.492930,0.362520,-0.027571,0.463585,0.715288,-0.061602,0.159487,0.985276,0.492830,0.363750,-0.020907,0.445266,0.720577,0.155001,0.356908,0.921190,0.495100,0.358250,-0.020908,0.452218,0.718008,0.154921,0.319155,0.934954,0.494950,0.360610,-0.027947,0.446323,0.721145,-0.046835,0.333032,0.941751,0.493480,0.358320,-0.028062,0.453061,0.718337,-0.025060,0.334490,0.942066,0.493210,0.360530,0.035637,0.459913,0.715692,0.218612,0.268026,0.938281,0.508930,0.362300,0.043095,0.465475,0.711477,0.363094,0.250256,0.897516,0.511290,0.363610,0.034756,0.464624,0.714735,0.225574,0.210600,0.951191,0.508970,0.363690,0.044493,0.460275,0.712558,0.366965,0.255202,0.894544,0.511270,0.362020,0.054653,0.466563,0.706078,0.408806,0.255793,0.876041,0.514550,0.363370,0.068925,0.467434,0.698852,0.453306,0.206175,0.867183,0.518370,0.362950,0.056178,0.460460,0.707117,0.426409,0.224886,0.876129,0.514420,0.361650,0.069726,0.460264,0.700416,0.484246,0.176136,0.857019,0.518010,0.361070,-0.042929,0.465403,0.711073,-0.353286,0.246095,0.902566,0.488710,0.363610,-0.035418,0.459801,0.715139,-0.216525,0.275186,0.936691,0.491060,0.362300,-0.034549,0.464476,0.714125,-0.228902,0.208463,0.950867,0.491020,0.363690,-0.044413,0.460120,0.712132,-0.359644,0.260725,0.895923,0.488730,0.362020,-0.054537,0.466439,0.705727,-0.408977,0.243001,0.879595,0.485440,0.363370,-0.055926,0.460381,0.706653,-0.427866,0.227034,0.874863,0.485570,0.361650,-0.068732,0.467346,0.698486,-0.447947,0.187957,0.874080,0.481620,0.362950,-0.069474,0.460157,0.699958,-0.477838,0.177644,0.860299,0.481980,0.361070,0.158553,0.445395,0.628956,0.881831,-0.200186,0.426966,0.548670,0.354130,0.167293,0.450512,0.608833,0.903212,-0.202587,0.378373,0.555410,0.354710,0.159037,0.426200,0.618332,0.895238,-0.208627,0.393732,0.549990,0.347370,0.167237,0.430551,0.597048,0.909278,-0.214428,0.356699,0.556740,0.347440,0.149776,0.420871,0.633184,0.805259,-0.254650,0.535454,0.545140,0.346060,0.148599,0.438012,0.642381,0.778085,-0.246363,0.577832,0.543770,0.352300,0.179461,0.431054,0.569669,0.877200,-0.256164,0.406080,0.566070,0.344340,0.194947,0.454319,0.553014,0.853836,-0.283774,0.436389,0.575820,0.349540,0.179737,0.451324,0.582003,0.874085,-0.249558,0.416768,0.564910,0.352160,0.194860,0.434441,0.540158,0.860547,-0.280064,0.425468,0.577010,0.341450,-0.158575,0.445394,0.628951,-0.882051,-0.198372,0.427358,0.451320,0.354130,-0.167291,0.450514,0.608828,-0.903503,-0.201054,0.378496,0.444580,0.354710,-0.148638,0.438000,0.642396,-0.780635,-0.243218,0.575720,0.456220,0.352300,-0.149872,0.420846,0.633208,-0.806746,-0.254088,0.533479,0.454850,0.346060,-0.159104,0.426184,0.618337,-0.895408,-0.207321,0.394034,0.450000,0.347370,-0.167360,0.430515,0.597112,-0.909790,-0.212973,0.356264,0.443250,0.347440,-0.179474,0.431050,0.569675,-0.877888,-0.255247,0.405169,0.433920,0.344340,-0.194950,0.454319,0.553015,-0.853832,-0.284204,0.436119,0.424170,0.349540,-0.194860,0.434441,0.540158,-0.860604,-0.280057,0.425356,0.422980,0.341450,-0.179743,0.451323,0.582005,-0.874436,-0.249064,0.416329,0.435090,0.352160,0.083161,0.467542,0.690923,0.510219,0.097076,0.854548,0.522330,0.362330,0.082365,0.458921,0.692357,0.555941,0.107124,0.824290,0.521670,0.360190,-0.083122,0.467502,0.690816,-0.502189,0.083403,0.860727,0.477660,0.362330,-0.082239,0.458880,0.692140,-0.546588,0.108376,0.830359,0.478320,0.360190,0.000068,0.433349,0.721925,-0.002411,0.424035,0.905643,0.500000,0.355230,0.008071,0.426477,0.725773,-0.100987,0.218440,0.970611,0.501730,0.353540,0.007586,0.434106,0.722364,-0.149396,0.411307,0.899170,0.501670,0.355430,0.000025,0.425559,0.725119,-0.004804,0.227768,0.973704,0.500000,0.353270,0.014669,0.435947,0.723144,-0.186363,0.374658,0.908240,0.503340,0.355810,0.015455,0.428611,0.725971,-0.091373,0.200196,0.975486,0.503390,0.354030,-0.007881,0.426555,0.725606,0.098318,0.221354,0.970225,0.498260,0.353540,-0.007486,0.434107,0.722352,0.147501,0.407934,0.901018,0.498320,0.355430,-0.015397,0.428635,0.725916,0.090656,0.200645,0.975460,0.496610,0.354030,-0.014565,0.435950,0.723134,0.183286,0.371962,0.909973,0.496650,0.355810,0.022464,0.430608,0.725952,0.017444,0.166092,0.985956,0.504930,0.354440,0.021574,0.437881,0.723801,-0.090923,0.325146,0.941283,0.504910,0.356170,0.028402,0.439120,0.723282,0.108191,0.265314,0.958073,0.506480,0.356350,0.029103,0.431983,0.724959,0.190886,0.122501,0.973938,0.506480,0.354640,0.035759,0.446421,0.719718,0.267152,0.263072,0.927051,0.508340,0.358110,0.036056,0.439132,0.721724,0.301710,0.205920,0.930896,0.508200,0.356170,0.045352,0.445361,0.716334,0.399308,0.223371,0.889189,0.510670,0.357520,0.045192,0.437986,0.717914,0.412525,0.159121,0.896941,0.510390,0.355570,0.036154,0.432115,0.722688,0.336677,0.076610,0.938499,0.508120,0.354470,0.044966,0.431138,0.719075,0.420404,0.013886,0.907231,0.510170,0.353910,-0.022315,0.430661,0.725820,-0.019974,0.166656,0.985813,0.495060,0.354440,-0.021506,0.437909,0.723730,0.086082,0.323757,0.942216,0.495080,0.356170,-0.028985,0.432027,0.724851,-0.190485,0.120838,0.974225,0.493510,0.354640,-0.028354,0.439142,0.723217,-0.111483,0.267588,0.957062,0.493520,0.356350,-0.035674,0.446394,0.719537,-0.264480,0.285036,0.921306,0.491650,0.358110,-0.035946,0.439180,0.721583,-0.302096,0.211518,0.929515,0.491790,0.356170,-0.036100,0.432140,0.722622,-0.336345,0.071982,0.938984,0.491870,0.354470,-0.045139,0.438009,0.717831,-0.411293,0.165192,0.896409,0.489600,0.355570,-0.044919,0.431173,0.718955,-0.417632,0.010479,0.908556,0.489820,0.353910,-0.045300,0.445340,0.716195,-0.396904,0.239922,0.885949,0.489320,0.357520,0.057095,0.443137,0.710929,0.468425,0.199404,0.860707,0.513670,0.356440,0.056685,0.435277,0.712787,0.468449,0.119478,0.875374,0.513310,0.354460,0.068576,0.440444,0.704602,0.518247,0.176071,0.836910,0.516750,0.355290,0.067939,0.432161,0.706814,0.517685,0.085515,0.851287,0.516260,0.353260,0.055507,0.428574,0.713750,0.452884,-0.061594,0.889439,0.512960,0.352920,0.066213,0.425413,0.707764,0.483337,-0.123800,0.866637,0.515820,0.351800,-0.057049,0.443110,0.710741,-0.466839,0.211764,0.858614,0.486320,0.356440,-0.056668,0.435305,0.712655,-0.467820,0.126366,0.874744,0.486680,0.354460,-0.055534,0.428571,0.713710,-0.449666,-0.061860,0.891052,0.487030,0.352920,-0.067910,0.432183,0.706689,-0.515109,0.091082,0.852272,0.483730,0.353260,-0.066257,0.425403,0.707731,-0.481440,-0.121204,0.868058,0.484170,0.351800,-0.068705,0.440329,0.704529,-0.514860,0.186568,0.836727,0.483240,0.355290,0.091545,0.445859,0.686924,0.663317,0.058646,0.746037,0.523820,0.356260,0.080475,0.448289,0.695327,0.576577,0.128257,0.806914,0.520510,0.357350,0.088341,0.435786,0.690954,0.680699,0.065810,0.729601,0.522070,0.353690,0.078733,0.438127,0.698529,0.587475,0.134232,0.798032,0.519330,0.354550,0.069221,0.450435,0.702252,0.505290,0.165190,0.846991,0.517410,0.358190,0.077314,0.429890,0.700890,0.590444,0.040169,0.806079,0.518550,0.352450,0.085768,0.427690,0.693828,0.679515,-0.033939,0.732876,0.520900,0.351610,0.083327,0.420885,0.695180,0.643097,-0.251009,0.723478,0.520170,0.349960,0.075328,0.422906,0.701942,0.554631,-0.178524,0.812720,0.518010,0.350880,-0.091573,0.445829,0.686886,-0.659452,0.066336,0.748815,0.476170,0.356260,-0.080450,0.448250,0.695136,-0.569885,0.142937,0.809197,0.479480,0.357350,-0.069125,0.450303,0.701947,-0.500732,0.185476,0.845498,0.482590,0.358190,-0.078757,0.438118,0.698429,-0.584585,0.142278,0.798760,0.480660,0.354550,-0.088447,0.435725,0.690905,-0.679176,0.067948,0.730823,0.477920,0.353690,-0.085795,0.427694,0.693773,-0.679628,-0.033325,0.732800,0.479090,0.351610,-0.077391,0.429862,0.700861,-0.589334,0.042128,0.806790,0.481440,0.352450,-0.075396,0.422890,0.701892,-0.554819,-0.178639,0.812567,0.481980,0.350880,-0.083368,0.420880,0.695117,-0.642530,-0.255319,0.722473,0.479820,0.349960,0.111624,0.435061,0.663607,0.643218,-0.263154,0.719041,0.531670,0.351950,0.102373,0.442079,0.675502,0.707130,-0.078915,0.702666,0.527770,0.354550,0.105514,0.426746,0.668877,0.797113,-0.194025,0.571809,0.529220,0.349850,0.098247,0.432244,0.680835,0.769650,-0.047790,0.636676,0.525630,0.352090,0.101079,0.420557,0.673637,0.795774,-0.283360,0.535210,0.527260,0.348420,0.094570,0.424749,0.684437,0.761478,-0.150939,0.630372,0.524020,0.350210,0.097179,0.416061,0.676253,0.721178,-0.454474,0.522834,0.525860,0.347360,0.091236,0.418891,0.686223,0.706768,-0.350659,0.614424,0.522940,0.348770,-0.102467,0.442039,0.675481,-0.707037,-0.079057,0.702744,0.472220,0.354550,-0.111628,0.435066,0.663550,-0.640429,-0.266284,0.720377,0.468320,0.351950,-0.098284,0.432229,0.680772,-0.770655,-0.052414,0.635093,0.474360,0.352090,-0.105486,0.426764,0.668796,-0.795924,-0.198454,0.571945,0.470770,0.349850,-0.101031,0.420586,0.673505,-0.799259,-0.280232,0.531653,0.472730,0.348420,-0.094609,0.424745,0.684400,-0.763909,-0.148830,0.627927,0.475970,0.350210,-0.091345,0.418868,0.686181,-0.704822,-0.356865,0.613084,0.477050,0.348770,-0.097247,0.416045,0.676228,-0.722883,-0.455401,0.519663,0.474130,0.347360,0.119445,0.414627,0.646596,0.308675,-0.469046,0.827476,0.536580,0.344550,0.126360,0.428347,0.653268,0.257688,-0.438643,0.860924,0.537500,0.349600,0.117099,0.424635,0.653796,0.491424,-0.409685,0.768545,0.534670,0.348290,0.129088,0.414767,0.646538,0.160086,-0.432262,0.887424,0.539320,0.344780,0.110187,0.419735,0.658615,0.743787,-0.331452,0.580449,0.532070,0.347170,0.112421,0.412602,0.651118,0.621940,-0.460826,0.633112,0.534010,0.344480,0.106931,0.410486,0.656412,0.666171,-0.525636,0.529076,0.532010,0.344410,0.104972,0.415600,0.664010,0.761555,-0.400363,0.509650,0.530010,0.346440,0.102568,0.408951,0.660418,0.598523,-0.634021,0.489680,0.530460,0.344130,0.100787,0.412580,0.667349,0.685712,-0.541285,0.486632,0.528490,0.345800,-0.126505,0.428299,0.653312,-0.253352,-0.438790,0.862134,0.462490,0.349600,-0.119591,0.414577,0.646628,-0.305179,-0.469340,0.828605,0.463410,0.344550,-0.117168,0.424620,0.653798,-0.484019,-0.410457,0.772820,0.465320,0.348290,-0.129209,0.414730,0.646566,-0.158429,-0.434134,0.886808,0.460670,0.344780,-0.110177,0.419759,0.658526,-0.739834,-0.330372,0.586089,0.467920,0.347170,-0.112471,0.412593,0.651070,-0.622668,-0.454426,0.637010,0.465980,0.344480,-0.106996,0.410470,0.656388,-0.667588,-0.516008,0.536714,0.467980,0.344410,-0.104965,0.415619,0.663919,-0.763403,-0.392623,0.512896,0.469980,0.346440,-0.100755,0.412615,0.667237,-0.692656,-0.529055,0.490234,0.471500,0.345800,-0.102669,0.408911,0.660400,-0.602732,-0.624593,0.496587,0.469540,0.344130,0.138310,0.431632,0.651579,0.502949,-0.353538,0.788703,0.540280,0.350870,0.140140,0.416577,0.643375,0.533795,-0.352144,0.768803,0.541870,0.345240,0.175840,0.691938,-0.131733,0.486951,-0.187684,-0.853026,0.887850,0.388760,0.184967,0.827070,-0.133984,0.588861,0.087976,-0.803432,0.887170,0.442390,0.210449,0.814778,-0.112423,0.721179,0.059890,-0.690155,0.875830,0.437990,0.199508,0.687989,-0.113900,0.645365,-0.165798,-0.745664,0.877530,0.387910,0.154143,0.694376,-0.141606,0.350250,-0.208225,-0.913218,0.896360,0.388980,0.161398,0.834096,-0.147630,0.466381,0.101670,-0.878722,0.896510,0.445060,0.131013,0.695887,-0.149010,0.280651,-0.229206,-0.932041,0.906290,0.388730,0.136234,0.838795,-0.159428,0.396853,0.098229,-0.912611,0.906930,0.447250,0.107084,0.697191,-0.155398,0.222763,-0.250775,-0.942066,0.916680,0.388430,0.110643,0.843294,-0.169964,0.345745,0.089486,-0.934052,0.917460,0.449690,-0.175839,0.691938,-0.131733,-0.486951,-0.187684,-0.853026,0.112140,0.388760,-0.210449,0.814778,-0.112423,-0.721178,0.059889,-0.690156,0.124160,0.437990,-0.184967,0.827070,-0.133984,-0.588861,0.087976,-0.803432,0.112820,0.442390,-0.199508,0.687989,-0.113900,-0.645365,-0.165798,-0.745664,0.122460,0.387910,-0.154143,0.694376,-0.141606,-0.350249,-0.208225,-0.913219,0.103630,0.388980,-0.161398,0.834096,-0.147630,-0.466381,0.101670,-0.878722,0.103480,0.445060,-0.131013,0.695887,-0.149010,-0.280650,-0.229206,-0.932041,0.093710,0.388730,-0.136234,0.838795,-0.159428,-0.396853,0.098229,-0.912611,0.093060,0.447250,-0.107084,0.697191,-0.155398,-0.222763,-0.250775,-0.942066,0.083310,0.388430,-0.110643,0.843294,-0.169964,-0.345745,0.089486,-0.934052,0.082530,0.449690,-0.138577,0.431539,0.651693,-0.504509,-0.352417,0.788208,0.459710,0.350870,-0.140209,0.416557,0.643365,-0.535675,-0.353827,0.766719,0.458120,0.345240,0.058747,0.699340,-0.162075,0.046523,-0.293136,-0.954938,0.936980,0.387810,0.031364,0.854535,-0.186929,0.053570,0.066398,-0.996354,0.948990,0.458420,0.060513,0.853134,-0.184029,0.149183,0.075989,-0.985886,0.936950,0.456400,0.030516,0.698186,-0.161390,0.000786,-0.309152,-0.951012,0.949560,0.385590,0.0,0.854467,-0.187706,0.000000,0.061146,-0.998129,0.962590,0.460050,0.0,0.697156,-0.160539,-0.000000,-0.315494,-0.948928,0.963570,0.383530,-0.058747,0.699340,-0.162075,-0.046523,-0.293136,-0.954938,0.063010,0.387810,-0.031364,0.854535,-0.186929,-0.053570,0.066398,-0.996354,0.051000,0.458420,-0.030516,0.698186,-0.161390,-0.000786,-0.309152,-0.951012,0.050430,0.385590,-0.060513,0.853134,-0.184029,-0.149183,0.075989,-0.985885,0.063040,0.456400,0.0,0.854467,-0.187706,0.000000,0.061146,-0.998129,0.037400,0.460050,0.0,0.697156,-0.160539,-0.000000,-0.315494,-0.948928,0.036420,0.383530,0.083578,0.698709,-0.160066,0.137038,-0.272580,-0.952324,0.926480,0.388450,0.086152,0.848730,-0.178337,0.264544,0.082693,-0.960822,0.927030,0.453110,-0.083578,0.698709,-0.160066,-0.137038,-0.272579,-0.952324,0.073510,0.388450,-0.086152,0.848730,-0.178337,-0.264544,0.082693,-0.960822,0.072960,0.453110,0.015052,0.424927,0.726287,0.021431,-0.163416,0.986324,0.503370,0.352710,0.007596,0.422859,0.725770,-0.018711,-0.168544,0.985516,0.501730,0.352220,0.014368,0.421406,0.724827,0.090243,-0.500758,0.860870,0.503340,0.351470,0.007319,0.419926,0.724560,0.043233,-0.520784,0.852593,0.501710,0.351050,0.000036,0.421996,0.725478,-0.002540,-0.157057,0.987586,0.500000,0.351930,0.000076,0.419126,0.724355,0.000154,-0.528805,0.848744,0.500000,0.350800,-0.014932,0.424970,0.726193,-0.022534,-0.154185,0.987785,0.496620,0.352710,-0.007543,0.422878,0.725730,0.017049,-0.153637,0.987980,0.498260,0.352220,-0.007236,0.419912,0.724589,-0.044742,-0.515475,0.855736,0.498280,0.351050,-0.014316,0.421418,0.724799,-0.095198,-0.493982,0.864245,0.496650,0.351470,0.028984,0.428211,0.725032,0.243922,-0.179472,0.953043,0.506370,0.353160,0.022002,0.426913,0.726123,0.118769,-0.162513,0.979532,0.504870,0.353040,0.028188,0.423055,0.723149,0.244779,-0.483566,0.840385,0.506270,0.351760,0.021367,0.422529,0.724612,0.162217,-0.483483,0.860192,0.504800,0.351720,-0.028849,0.428250,0.724926,-0.243375,-0.177277,0.953594,0.493620,0.353160,-0.021933,0.426943,0.726054,-0.120756,-0.159638,0.979762,0.495120,0.353040,-0.021254,0.422583,0.724492,-0.165106,-0.478361,0.862503,0.495190,0.351720,-0.028112,0.423092,0.723067,-0.243674,-0.476960,0.844471,0.493720,0.351760,0.014459,0.416821,0.721323,0.113174,-0.816011,0.566849,0.503310,0.350040,0.007490,0.416055,0.721232,0.063307,-0.831584,0.551779,0.501690,0.349770,0.013922,0.414642,0.714632,0.113642,-0.946205,0.302956,0.503197,0.348937,0.007171,0.413947,0.714782,0.076378,-0.973642,-0.214913,0.501615,0.348787,0.000007,0.415747,0.721122,-0.001009,-0.842560,0.538601,0.500000,0.349610,0.000012,0.413689,0.714376,-0.000724,-0.976847,-0.213939,0.500000,0.348710,-0.014397,0.416823,0.721317,-0.115851,-0.815340,0.567274,0.496680,0.350040,-0.007410,0.416067,0.721206,-0.064588,-0.833196,0.549193,0.498310,0.349770,-0.007103,0.413967,0.714738,-0.076692,-0.973391,-0.215935,0.498378,0.348787,-0.013854,0.414656,0.714600,-0.112993,-0.946920,0.300956,0.496800,0.348937,0.027420,0.418073,0.719771,0.190062,-0.800598,0.568261,0.506280,0.350260,0.021062,0.417570,0.720808,0.148641,-0.806334,0.572478,0.504810,0.350230,0.020271,0.415395,0.714487,0.123707,-0.943409,0.307694,0.504690,0.349082,0.026496,0.415887,0.713594,0.129504,-0.939818,0.316183,0.506175,0.349113,-0.027365,0.418091,0.719728,-0.188895,-0.798009,0.572277,0.493710,0.350260,-0.021008,0.417579,0.720783,-0.151291,-0.802910,0.576582,0.495190,0.350230,-0.020230,0.415409,0.714453,-0.124811,-0.943691,0.306380,0.495302,0.349082,-0.026430,0.415904,0.713555,-0.129274,-0.940084,0.315483,0.493815,0.349113,0.036315,0.428150,0.722689,0.340601,-0.212176,0.915955,0.508000,0.352980,0.044629,0.426821,0.718850,0.389090,-0.273386,0.879698,0.509980,0.352460,0.043121,0.421940,0.716670,0.318028,-0.556819,0.767340,0.509840,0.351080,0.035296,0.422820,0.720658,0.305328,-0.514993,0.800972,0.507890,0.351560,0.033876,0.418229,0.717301,0.214302,-0.809289,0.546924,0.507840,0.350050,0.041262,0.417670,0.713408,0.187776,-0.830374,0.524614,0.509730,0.349590,0.032893,0.416003,0.711379,0.123032,-0.939109,0.320839,0.507728,0.348925,0.040165,0.415589,0.707429,0.077731,-0.946639,0.312781,0.509625,0.348510,-0.036202,0.428208,0.722548,-0.339871,-0.210185,0.916684,0.491990,0.352980,-0.035251,0.422836,0.720613,-0.306090,-0.506343,0.806180,0.492100,0.351560,-0.043086,0.421958,0.716628,-0.320575,-0.550135,0.771092,0.490150,0.351080,-0.044537,0.426863,0.718739,-0.387388,-0.271361,0.881075,0.490010,0.352460,-0.033844,0.418237,0.717279,-0.213570,-0.808324,0.548634,0.492150,0.350050,-0.032850,0.416019,0.711341,-0.122306,-0.939256,0.320687,0.492262,0.348925,-0.041221,0.417690,0.713361,-0.189037,-0.830057,0.524661,0.490260,0.349590,-0.040146,0.415597,0.707405,-0.079124,-0.946415,0.313110,0.490365,0.348510,0.054331,0.424584,0.713404,0.392205,-0.340718,0.854451,0.512580,0.351580,0.064512,0.421646,0.707601,0.393010,-0.409316,0.823410,0.515260,0.350530,0.062482,0.418397,0.705991,0.276226,-0.672036,0.687072,0.514830,0.349310,0.052543,0.420412,0.711767,0.301119,-0.602553,0.739092,0.512270,0.350280,0.050395,0.416452,0.708584,0.158059,-0.856749,0.490916,0.512180,0.348880,0.060113,0.415161,0.702649,0.130107,-0.891630,0.433668,0.514750,0.348010,0.049278,0.414579,0.702520,0.047204,-0.956584,0.287608,0.512120,0.347875,0.059128,0.413559,0.696771,0.029444,-0.968179,0.248519,0.514742,0.347103,-0.054267,0.424617,0.713317,-0.387760,-0.344183,0.855091,0.487420,0.351580,-0.052507,0.420432,0.711714,-0.302338,-0.600563,0.740214,0.487720,0.350280,-0.062410,0.418439,0.705891,-0.273787,-0.676867,0.683295,0.485170,0.349310,-0.064541,0.421642,0.707558,-0.386669,-0.419951,0.821054,0.484730,0.350530,-0.050353,0.416474,0.708534,-0.159564,-0.856319,0.491180,0.487810,0.348880,-0.049223,0.414608,0.702456,-0.047774,-0.956593,0.287486,0.487870,0.347875,-0.060075,0.415181,0.702592,-0.133412,-0.890516,0.434951,0.485240,0.348010,-0.059095,0.413577,0.696715,-0.030924,-0.967890,0.249465,0.485247,0.347103,0.081054,0.416491,0.694793,0.509193,-0.571637,0.643392,0.519720,0.348600,0.073288,0.418741,0.701619,0.437606,-0.491075,0.753224,0.517500,0.349560,0.078982,0.413994,0.692868,0.319355,-0.808733,0.493926,0.519430,0.347370,0.071423,0.416066,0.700023,0.275879,-0.751774,0.598938,0.517120,0.348320,0.069153,0.413703,0.696929,0.101698,-0.925947,0.363702,0.516970,0.347110,0.076880,0.412193,0.690154,0.108414,-0.946316,0.304521,0.519190,0.346180,0.067887,0.412524,0.690899,-0.005361,-0.979085,0.203379,0.516955,0.346315,0.075602,0.411230,0.684248,-0.026467,-0.984242,0.174837,0.519108,0.345460,-0.073369,0.418726,0.701560,-0.431838,-0.501825,0.749458,0.482490,0.349560,-0.081110,0.416472,0.694675,-0.506987,-0.575599,0.641600,0.480270,0.348600,-0.079023,0.413990,0.692801,-0.318057,-0.806395,0.498566,0.480560,0.347370,-0.071351,0.416107,0.699900,-0.268319,-0.757490,0.595159,0.482870,0.348320,-0.069083,0.413744,0.696797,-0.101292,-0.925237,0.365619,0.483020,0.347110,-0.067864,0.412538,0.690818,0.005517,-0.979104,0.203283,0.483035,0.346315,-0.076924,0.412173,0.690095,-0.101939,-0.946180,0.307166,0.480800,0.346180,-0.075537,0.411276,0.684101,0.037461,-0.984612,0.170690,0.480890,0.345460,0.088379,0.414781,0.686078,0.556152,-0.630324,0.541652,0.522380,0.347570,0.093975,0.412721,0.676956,0.567632,-0.668071,0.481118,0.525100,0.346390,0.091084,0.410416,0.675871,0.391232,-0.817817,0.422035,0.524670,0.345370,0.085765,0.412284,0.684321,0.359958,-0.825813,0.434124,0.522060,0.346440,0.083599,0.410583,0.681974,0.118402,-0.950501,0.287279,0.521720,0.345250,0.088973,0.408802,0.674211,0.130207,-0.946939,0.293859,0.524270,0.344270,0.082517,0.409669,0.676476,-0.051792,-0.984031,0.170293,0.521563,0.344515,0.087952,0.408012,0.669095,-0.075363,-0.982484,0.170427,0.524060,0.343572,-0.088371,0.414781,0.685935,-0.556361,-0.630683,0.541018,0.477610,0.347570,-0.085879,0.412253,0.684279,-0.374466,-0.814900,0.442395,0.477930,0.346440,-0.091147,0.410406,0.675801,-0.405298,-0.807688,0.428222,0.475320,0.345370,-0.093978,0.412743,0.676821,-0.570032,-0.664316,0.483474,0.474890,0.346390,-0.083764,0.410511,0.681976,-0.119522,-0.949271,0.290858,0.478270,0.345250,-0.082644,0.409630,0.676463,0.062891,-0.984113,0.166032,0.478428,0.344515,-0.089139,0.408735,0.674186,-0.139200,-0.945512,0.294330,0.475730,0.344270,-0.088101,0.407959,0.669089,0.072569,-0.983210,0.167426,0.475932,0.343572,0.099176,0.408012,0.663231,0.495612,-0.735111,0.462581,0.529310,0.343490,0.097406,0.410320,0.669000,0.554242,-0.692334,0.462049,0.527530,0.344950,0.096880,0.407510,0.664850,0.417715,-0.793444,0.442673,0.528350,0.343230,0.094738,0.408685,0.668936,0.412957,-0.801389,0.432715,0.526950,0.344020,0.094951,0.404746,0.661304,0.324758,-0.817507,0.475620,0.528374,0.341808,0.093023,0.407398,0.667891,0.049806,-0.944882,0.323599,0.526580,0.343180,0.092101,0.406611,0.662936,-0.272855,-0.943907,0.185982,0.526400,0.342670,0.092651,0.406048,0.661036,-0.456027,-0.868195,0.195643,0.526868,0.342328,0.108373,0.389343,0.495725,-0.994368,0.012373,0.105260,0.526341,0.342503,0.104633,0.368121,0.492825,-0.711840,0.621037,0.328021,0.523990,0.343340,0.107945,0.370180,0.502461,-0.968705,0.229074,0.095579,0.526340,0.342500,0.104712,0.393923,0.473156,-0.897116,0.075322,0.435327,0.523991,0.343344,-0.099275,0.407977,0.663214,-0.492342,-0.735602,0.465285,0.470680,0.343490,-0.097500,0.410291,0.668969,-0.555929,-0.689572,0.464149,0.472460,0.344950,-0.094846,0.408655,0.668922,-0.413485,-0.802531,0.430086,0.473040,0.344020,-0.096852,0.407543,0.664723,-0.409747,-0.798333,0.441328,0.471640,0.343230,-0.092121,0.406610,0.662823,0.269364,-0.944926,0.185897,0.473590,0.342670,-0.095037,0.404709,0.661262,-0.338966,-0.805265,0.486467,0.471636,0.341756,-0.092671,0.406048,0.661036,0.458526,-0.866319,0.198102,0.473123,0.342328,-0.093048,0.407396,0.667807,-0.057360,-0.944891,0.322322,0.473410,0.343180,-0.104719,0.368095,0.492839,0.710454,0.622194,0.328832,0.476000,0.343340,-0.108454,0.389288,0.495734,0.994379,0.012394,0.105148,0.473649,0.342503,-0.108029,0.370151,0.502468,0.968777,0.228814,0.095480,0.473650,0.342500,-0.104798,0.393870,0.473178,0.896618,0.075628,0.436298,0.475999,0.343344,0.227146,0.682031,-0.083564,0.771077,-0.147192,-0.619495,0.861610,0.386670,0.266573,0.773381,-0.032317,0.912019,-0.011039,-0.410000,0.839910,0.423090,0.253161,0.673918,-0.042447,0.877840,-0.138623,-0.458455,0.843290,0.384890,0.239969,0.795613,-0.077586,0.824293,0.028689,-0.565436,0.859030,0.430750,0.098600,0.403943,0.656722,0.488927,-0.701648,0.518306,0.530060,0.341270,-0.150396,0.291574,0.498812,-0.710166,-0.655760,0.256208,0.439070,0.290030,-0.140079,0.277822,0.481511,-0.627880,-0.755712,0.186189,0.439730,0.281360,-0.126084,0.270352,0.493121,-0.599100,-0.777613,0.190782,0.446730,0.280410,-0.137121,0.282155,0.509653,-0.658954,-0.715984,0.230534,0.445580,0.288380,-0.239969,0.795613,-0.077586,-0.824293,0.028688,-0.565436,0.140970,0.430750,-0.227146,0.682031,-0.083564,-0.771077,-0.147192,-0.619495,0.138380,0.386670,-0.266573,0.773381,-0.032317,-0.912019,-0.011039,-0.409999,0.160080,0.423090,-0.253161,0.673918,-0.042447,-0.877840,-0.138624,-0.458455,0.156700,0.384890,0.290036,0.732068,0.066316,0.989223,-0.070856,-0.128133,0.802790,0.411510,0.279631,0.655402,0.051745,0.976328,-0.128753,-0.173798,0.806940,0.379610,0.270471,0.664243,0.004916,0.947819,-0.136016,-0.288340,0.824910,0.382010,0.282849,0.752422,0.017808,0.968120,-0.050939,-0.245253,0.821030,0.417090,-0.024181,0.356295,0.578594,0.059764,0.997956,-0.022637,0.495372,0.348602,-0.032253,0.376483,0.477380,0.068079,0.834917,0.546150,0.493850,0.348730,-0.032139,0.356526,0.578433,0.037524,0.999019,-0.023510,0.493886,0.348634,-0.024266,0.376011,0.476993,0.086221,0.837231,0.540009,0.495340,0.348700,-0.016285,0.355974,0.578677,0.060978,0.997898,-0.021928,0.496863,0.348472,-0.016338,0.375329,0.476825,0.080519,0.841384,0.534406,0.496840,0.348570,-0.012420,0.408141,0.719200,-0.032485,0.494754,0.868426,0.497210,0.347000,-0.017064,0.401360,0.719653,-0.156528,0.083341,0.984151,0.496290,0.345450,-0.011468,0.400692,0.720591,-0.109099,0.092771,0.989692,0.497530,0.345330,-0.018317,0.408818,0.718079,-0.079564,0.468458,0.879896,0.495850,0.347130,-0.023118,0.401998,0.718661,-0.227188,0.063135,0.971802,0.494920,0.345500,-0.024441,0.409496,0.717257,-0.168966,0.438297,0.882806,0.494420,0.347190,-0.029867,0.402272,0.716399,-0.368704,0.048083,0.928302,0.493230,0.345390,-0.031221,0.409677,0.715343,-0.358896,0.393783,0.846244,0.492770,0.347060,-0.037763,0.402163,0.712690,-0.440305,0.073438,0.894840,0.491190,0.345110,-0.038648,0.409416,0.710991,-0.447128,0.386383,0.806712,0.490760,0.346720,-0.032194,0.413879,0.710857,-0.305204,0.651702,0.694359,0.492417,0.348177,-0.039503,0.413528,0.706812,-0.399519,0.628070,0.667767,0.490490,0.347793,-0.025699,0.413755,0.712937,-0.112065,0.694096,0.711106,0.493993,0.348345,0.032197,0.356519,0.578438,-0.037581,0.999017,-0.023510,0.506104,0.348634,0.032311,0.376461,0.477369,-0.068166,0.835081,0.545888,0.506140,0.348730,0.024242,0.356287,0.578599,-0.059815,0.997953,-0.022635,0.504618,0.348602,0.024328,0.375989,0.476982,-0.086179,0.837397,0.539759,0.504650,0.348700,0.018372,0.408797,0.718127,0.079851,0.468792,0.879692,0.504140,0.347130,0.023183,0.401967,0.718735,0.227517,0.064106,0.971662,0.505070,0.345500,0.024471,0.409488,0.717278,0.169074,0.439029,0.882421,0.505570,0.347190,0.017098,0.401352,0.719677,0.155068,0.082923,0.984417,0.503700,0.345450,0.012477,0.408127,0.719235,0.031668,0.495607,0.867969,0.502780,0.347000,0.011540,0.400667,0.720652,0.109389,0.091466,0.989782,0.502460,0.345330,0.016349,0.355966,0.578681,-0.060731,0.997913,-0.021917,0.503136,0.348472,0.016402,0.375308,0.476815,-0.079921,0.841561,0.534217,0.503160,0.348570,0.029891,0.402264,0.716426,0.369227,0.049499,0.928020,0.506760,0.345390,0.031257,0.409662,0.715386,0.359399,0.393593,0.846119,0.507220,0.347060,0.025759,0.413741,0.712971,0.112326,0.693626,0.711523,0.505997,0.348345,0.032238,0.413861,0.710900,0.305077,0.651896,0.694233,0.507573,0.348177,0.038689,0.409394,0.711040,0.447176,0.385644,0.807039,0.509230,0.346720,0.039521,0.413520,0.706837,0.399405,0.628536,0.667397,0.509500,0.347793,0.037788,0.402155,0.712710,0.439380,0.076329,0.895052,0.508810,0.345110,-0.060219,0.356058,0.577001,-0.035055,0.998966,-0.028941,0.487913,0.347454,-0.070992,0.373897,0.481995,-0.014154,0.836217,0.548217,0.485250,0.346800,-0.070969,0.355658,0.576262,-0.038915,0.998704,-0.032810,0.485273,0.346721,-0.060313,0.375114,0.480430,-0.005743,0.834149,0.551509,0.487890,0.347540,-0.049903,0.356407,0.577631,-0.020902,0.999432,-0.026440,0.490422,0.348061,-0.050045,0.376043,0.479100,0.010456,0.833430,0.552526,0.490400,0.348150,-0.047041,0.401347,0.707903,-0.459616,0.104820,0.881910,0.488720,0.344650,-0.047936,0.408778,0.706471,-0.450636,0.412627,0.791623,0.488250,0.346170,-0.057305,0.400617,0.702454,-0.514079,0.131336,0.847628,0.486110,0.344150,-0.057925,0.408169,0.700850,-0.501298,0.425761,0.753278,0.485620,0.345540,0.071006,0.355648,0.576271,0.039152,0.998696,-0.032775,0.514717,0.346721,0.071028,0.373870,0.481976,0.014539,0.836445,0.547858,0.514740,0.346800,0.060260,0.356048,0.577008,0.035391,0.998955,-0.028921,0.512077,0.347454,0.060354,0.375089,0.480415,0.006232,0.834353,0.551195,0.512100,0.347540,0.047959,0.408766,0.706505,0.449275,0.413199,0.792098,0.511740,0.346170,0.057377,0.400578,0.702549,0.512245,0.134111,0.848304,0.513880,0.344150,0.057970,0.408143,0.700914,0.499363,0.427468,0.753596,0.514370,0.345540,0.047078,0.401330,0.707948,0.457910,0.108563,0.882345,0.511270,0.344650,0.049945,0.356400,0.577636,0.021133,0.999427,-0.026436,0.509567,0.348061,0.050089,0.376021,0.479087,-0.010110,0.833615,0.552253,0.509590,0.348150,-0.066877,0.401374,0.695928,-0.613334,0.163143,0.772790,0.483620,0.343800,-0.066761,0.407776,0.694327,-0.580875,0.434558,0.688291,0.483290,0.345000,-0.074844,0.403448,0.687994,-0.710313,0.165815,0.684076,0.481110,0.343420,-0.074594,0.407685,0.687003,-0.651053,0.446530,0.613792,0.480980,0.344400,-0.067284,0.411046,0.690200,-0.500965,0.656310,0.564173,0.483103,0.345787,-0.074954,0.410154,0.683328,-0.543077,0.680275,0.492233,0.480935,0.345015,-0.058557,0.411824,0.696279,-0.433500,0.668711,0.604072,0.485343,0.346485,0.066894,0.401355,0.696021,0.610675,0.164997,0.774501,0.516380,0.343800,0.066820,0.407735,0.694444,0.578193,0.436828,0.689111,0.516700,0.345000,0.058592,0.411804,0.696337,0.431981,0.669874,0.603872,0.514647,0.346485,0.067304,0.411032,0.690278,0.498599,0.658183,0.564087,0.516888,0.345787,0.074646,0.407647,0.687114,0.649868,0.451493,0.611412,0.519010,0.344400,0.075044,0.410094,0.683488,0.544460,0.679956,0.491144,0.519063,0.345015,0.074947,0.403392,0.688185,0.711893,0.165202,0.682581,0.518880,0.343420,-0.081620,0.405077,0.679620,-0.788757,0.081124,0.609328,0.478470,0.342880,-0.087091,0.406464,0.672245,-0.813291,0.324633,0.482877,0.476020,0.342790,-0.086762,0.404863,0.672226,-0.837252,-0.095293,0.538450,0.476030,0.342250,-0.081623,0.407497,0.679308,-0.724149,0.426779,0.541727,0.478450,0.343630,-0.082109,0.408877,0.675796,-0.570051,0.726921,0.382920,0.478473,0.344110,-0.087589,0.407391,0.668604,-0.628769,0.717938,0.298687,0.476005,0.343203,0.081640,0.405044,0.679750,0.796498,0.092543,0.597517,0.521520,0.342880,0.086563,0.404953,0.672191,0.842428,-0.069979,0.534245,0.523960,0.342250,0.081625,0.407482,0.679397,0.729631,0.432005,0.530105,0.521540,0.343630,0.086891,0.406558,0.672196,0.813114,0.324614,0.483188,0.523980,0.342790,0.082024,0.408894,0.675831,0.574314,0.725607,0.379023,0.521518,0.344110,0.087431,0.407451,0.668591,0.624535,0.721734,0.298422,0.523988,0.343203,-0.092758,0.400191,0.660105,-0.832821,-0.235398,0.500996,0.472610,0.340610,-0.093772,0.396609,0.656835,-0.856504,-0.131280,0.499167,0.471290,0.339580,-0.092240,0.398625,0.660295,-0.865800,-0.161746,0.473528,0.472720,0.340200,-0.095225,0.398283,0.655071,-0.792413,-0.266197,0.548836,0.470710,0.339910,-0.096528,0.393880,0.651798,-0.833179,-0.145576,0.533498,0.469200,0.338600,-0.098476,0.396067,0.649832,-0.737532,-0.306797,0.601600,0.468770,0.339080,-0.099977,0.398291,0.649414,-0.609035,-0.502673,0.613512,0.468730,0.339650,-0.096422,0.400160,0.654659,-0.656366,-0.490081,0.573589,0.470450,0.340350,-0.093437,0.402024,0.659988,-0.717387,-0.433894,0.545061,0.472200,0.341030,-0.107327,0.391675,0.638413,-0.524524,-0.392551,0.755498,0.464930,0.337190,-0.104650,0.388125,0.638949,-0.670584,-0.227073,0.706225,0.465250,0.336190,-0.102521,0.393832,0.644089,-0.662006,-0.378203,0.647079,0.466890,0.338210,-0.099961,0.391077,0.645407,-0.784601,-0.210478,0.583181,0.467240,0.337510,-0.104305,0.396485,0.644198,-0.561941,-0.512555,0.649238,0.466950,0.339000,-0.109204,0.394758,0.639094,-0.434037,-0.508201,0.743871,0.465020,0.338230,-0.088797,0.393758,0.667587,-0.905542,-0.002828,0.424246,0.474670,0.339320,-0.090283,0.398843,0.664167,-0.895677,-0.078793,0.437668,0.474140,0.340350,-0.091587,0.395319,0.660833,-0.899734,-0.031278,0.435317,0.472630,0.339410,-0.087375,0.398567,0.670758,-0.893182,-0.002177,0.449690,0.476040,0.340490,-0.090834,0.388913,0.662741,-0.904158,-0.027205,0.426331,0.472760,0.337960,-0.094050,0.391531,0.655983,-0.889664,-0.025797,0.455887,0.470540,0.338250,-0.093446,0.383889,0.657015,-0.892936,-0.115510,0.435113,0.470990,0.336460,-0.097191,0.387674,0.649692,-0.868399,-0.085170,0.488497,0.468600,0.336940,-0.095711,0.378543,0.649630,-0.854234,-0.165737,0.492764,0.469130,0.334460,-0.100942,0.383598,0.642529,-0.797063,-0.125506,0.590711,0.466600,0.335240,0.092604,0.400242,0.660103,0.835674,-0.224219,0.501373,0.527380,0.340610,0.093674,0.396640,0.656836,0.856267,-0.124174,0.501386,0.528700,0.339580,0.095136,0.398313,0.655074,0.787805,-0.260162,0.558282,0.529280,0.339910,0.092188,0.398639,0.660332,0.871890,-0.144279,0.467964,0.527270,0.340200,0.096397,0.400159,0.654704,0.643742,-0.492817,0.585430,0.529540,0.340350,0.093438,0.402534,0.659989,0.702782,-0.457044,0.545167,0.527790,0.341030,0.099941,0.398289,0.649493,0.614100,-0.500441,0.610279,0.531260,0.339650,0.098465,0.396049,0.649954,0.736951,-0.313392,0.598906,0.531220,0.339080,0.096491,0.393874,0.651882,0.831258,-0.159282,0.532578,0.530800,0.338600,0.107258,0.391698,0.638420,0.519775,-0.389666,0.760260,0.535060,0.337190,0.102348,0.393907,0.644049,0.664595,-0.384743,0.640536,0.533100,0.338210,0.104576,0.388152,0.638981,0.659627,-0.239986,0.712249,0.534740,0.336190,0.099863,0.391116,0.645397,0.779839,-0.232812,0.581076,0.532750,0.337510,0.104232,0.396511,0.644232,0.569334,-0.512058,0.643161,0.533040,0.339000,0.109089,0.394812,0.639069,0.429908,-0.502291,0.750256,0.534970,0.338230,0.088636,0.393806,0.667607,0.903756,-0.014950,0.427786,0.525320,0.339320,0.090212,0.398865,0.664209,0.894795,-0.083545,0.438590,0.525850,0.340350,0.087141,0.398652,0.670729,0.894347,-0.022540,0.446806,0.523950,0.340490,0.091522,0.395340,0.660861,0.896646,-0.036748,0.441221,0.527360,0.339410,0.093950,0.391553,0.656029,0.888211,-0.053012,0.456368,0.529450,0.338250,0.090658,0.388964,0.662747,0.903393,-0.046227,0.426314,0.527230,0.337960,0.093078,0.384022,0.656882,0.893960,-0.121345,0.431406,0.529000,0.336460,0.096872,0.387775,0.649621,0.863976,-0.116883,0.489779,0.531400,0.336940,0.100612,0.383720,0.642416,0.790084,-0.134942,0.597961,0.533390,0.335240,0.095495,0.378615,0.649588,0.855537,-0.155625,0.493799,0.530860,0.334460,-0.086514,0.385551,0.671928,-0.876943,-0.112170,0.467322,0.475760,0.337730,-0.084543,0.391396,0.676192,-0.865385,-0.025014,0.500483,0.477270,0.339350,-0.082687,0.397433,0.679138,-0.839053,0.028970,0.543278,0.478390,0.340800,-0.078171,0.387813,0.685882,-0.763032,-0.091367,0.639870,0.480080,0.339460,-0.075825,0.395027,0.688329,-0.744513,0.008689,0.667551,0.480960,0.341140,-0.079775,0.381448,0.681979,-0.780209,-0.222672,0.584543,0.478940,0.337610,-0.089416,0.373346,0.660129,-0.845028,-0.271574,0.460625,0.472890,0.334010,-0.088080,0.379735,0.666674,-0.868699,-0.211110,0.448102,0.474390,0.336100,-0.080668,0.375320,0.677190,-0.780686,-0.326797,0.532666,0.477940,0.335880,-0.081421,0.368535,0.671294,-0.767598,-0.392348,0.506810,0.476810,0.333800,0.086213,0.385652,0.671866,0.876859,-0.107845,0.468495,0.524230,0.337730,0.084314,0.391460,0.676170,0.865064,-0.043142,0.499803,0.522720,0.339350,0.079620,0.381486,0.682014,0.784341,-0.207000,0.584774,0.521060,0.337610,0.077760,0.387975,0.685747,0.767386,-0.100808,0.633212,0.519910,0.339460,0.082739,0.397397,0.679321,0.842955,0.006258,0.537948,0.521600,0.340800,0.075756,0.395038,0.688395,0.749436,-0.014535,0.661917,0.519030,0.341140,0.089156,0.373450,0.660054,0.846039,-0.268683,0.460464,0.527100,0.334010,0.087919,0.379785,0.666675,0.871576,-0.209581,0.443206,0.525600,0.336100,0.081100,0.368668,0.671196,0.769276,-0.394376,0.502675,0.523180,0.333800,0.080575,0.375335,0.677232,0.783528,-0.329114,0.527037,0.522060,0.335880,-0.012136,0.380503,0.715012,-0.126078,-0.592610,0.795561,0.497160,0.340070,-0.006132,0.373966,0.710157,-0.075260,-0.697953,0.712178,0.498490,0.338090,-0.006055,0.380724,0.715994,-0.086284,-0.598226,0.796668,0.498590,0.340290,-0.012390,0.373863,0.709201,-0.105943,-0.696343,0.709847,0.496960,0.337900,-0.011897,0.387071,0.719183,-0.144630,-0.387538,0.910438,0.497360,0.342080,-0.005963,0.386948,0.720098,-0.096978,-0.385801,0.917471,0.498700,0.342240,0.000052,0.380755,0.716449,-0.005884,-0.601477,0.798869,0.500000,0.340410,0.000016,0.386882,0.720472,-0.006029,-0.384161,0.923246,0.500000,0.342320,0.000125,0.373967,0.710660,-0.004690,-0.699726,0.714396,0.500000,0.338200,0.000006,0.368463,0.704567,-0.004371,-0.727193,0.686420,0.500000,0.336000,-0.006250,0.368564,0.704074,-0.073801,-0.726035,0.683686,0.498380,0.335940,0.000094,0.362652,0.698720,-0.003574,-0.649590,0.760277,0.500000,0.333750,-0.006271,0.362848,0.698305,-0.077646,-0.646530,0.758927,0.498300,0.333750,-0.012447,0.368633,0.703435,-0.093794,-0.721727,0.685794,0.496760,0.335850,-0.012675,0.363092,0.697718,-0.089484,-0.643683,0.760042,0.496620,0.333760,0.012276,0.380514,0.715014,0.125237,-0.589066,0.798321,0.502830,0.340070,0.006228,0.373943,0.710221,0.067811,-0.700036,0.710881,0.501510,0.338090,0.012529,0.373771,0.709419,0.102965,-0.698335,0.708326,0.503040,0.337900,0.006237,0.380695,0.716067,0.080977,-0.596526,0.798498,0.501400,0.340290,0.006043,0.386924,0.720166,0.095261,-0.382877,0.918875,0.501290,0.342240,0.012005,0.387050,0.719241,0.141671,-0.383753,0.912504,0.502630,0.342080,0.006292,0.368544,0.704115,0.070294,-0.727280,0.682732,0.501610,0.335940,0.012587,0.368669,0.703373,0.090948,-0.726034,0.681618,0.503230,0.335850,0.012639,0.363064,0.697815,0.088340,-0.639402,0.763780,0.503380,0.333760,0.006373,0.362813,0.698386,0.073121,-0.645647,0.760127,0.501690,0.333750,-0.029812,0.387486,0.715640,-0.297921,-0.309816,0.902916,0.493280,0.341710,-0.024171,0.380299,0.712713,-0.162257,-0.570083,0.805405,0.494280,0.339780,-0.023652,0.387395,0.717154,-0.207174,-0.359818,0.909730,0.494660,0.341810,-0.030449,0.380528,0.711463,-0.231826,-0.529598,0.815955,0.492830,0.339760,-0.024984,0.373685,0.707195,-0.117846,-0.677514,0.726007,0.493870,0.337680,-0.031494,0.373914,0.706023,-0.166759,-0.639084,0.750842,0.492270,0.337710,-0.037936,0.380984,0.709099,-0.322549,-0.452394,0.831445,0.491020,0.339740,-0.039564,0.374134,0.704372,-0.246750,-0.572952,0.781563,0.490300,0.337750,-0.037084,0.387956,0.712765,-0.383887,-0.253409,0.887927,0.491520,0.341610,-0.018678,0.373792,0.708072,-0.108937,-0.693192,0.712472,0.495430,0.337750,-0.018190,0.380303,0.713831,-0.138855,-0.585367,0.798789,0.495720,0.339890,-0.017743,0.387298,0.718268,-0.167656,-0.382923,0.908439,0.496020,0.341930,-0.029406,0.392544,0.716431,-0.341108,-0.072280,0.937241,0.493410,0.343580,-0.022876,0.392510,0.718535,-0.236736,-0.107325,0.965628,0.494940,0.343700,-0.037291,0.392851,0.713240,-0.410738,-0.037196,0.910994,0.491510,0.343390,-0.017059,0.392435,0.719626,-0.174745,-0.121335,0.977109,0.496270,0.343740,-0.011399,0.392156,0.720615,-0.136507,-0.117124,0.983691,0.497530,0.343740,0.029895,0.387484,0.715690,0.298586,-0.304644,0.904454,0.506710,0.341710,0.024281,0.380257,0.712799,0.160940,-0.571731,0.804501,0.505710,0.339780,0.030553,0.380479,0.711600,0.230184,-0.528245,0.817296,0.507160,0.339760,0.023830,0.387363,0.717233,0.210618,-0.353823,0.911290,0.505330,0.341810,0.037137,0.387935,0.712828,0.382380,-0.251169,0.889213,0.508470,0.341610,0.038073,0.380951,0.709206,0.321396,-0.448151,0.834186,0.508970,0.339740,0.031578,0.373875,0.706159,0.164489,-0.632626,0.756788,0.507720,0.337710,0.039615,0.374109,0.704485,0.246284,-0.568313,0.785089,0.509690,0.337750,0.024905,0.373701,0.707234,0.113882,-0.672151,0.731604,0.506120,0.337680,0.018651,0.373736,0.708250,0.110674,-0.691333,0.714010,0.504570,0.337750,0.018269,0.380289,0.713864,0.139216,-0.584688,0.799224,0.504270,0.339890,0.017918,0.387235,0.718405,0.162717,-0.379589,0.910734,0.503980,0.341930,0.029509,0.392533,0.716472,0.341158,-0.069495,0.937434,0.506580,0.343580,0.022956,0.392504,0.718557,0.239752,-0.100722,0.965595,0.505060,0.343700,0.037378,0.392813,0.713333,0.409222,-0.035754,0.911734,0.508480,0.343390,0.017168,0.392415,0.719682,0.170783,-0.113416,0.978759,0.503720,0.343740,0.011525,0.392182,0.720563,0.134857,-0.111714,0.984547,0.502460,0.343740,-0.058569,0.382534,0.700479,-0.486934,-0.269999,0.830660,0.485550,0.339610,-0.049478,0.374864,0.701028,-0.332662,-0.492498,0.804227,0.487600,0.337720,-0.047641,0.381629,0.705253,-0.389276,-0.363482,0.846372,0.488440,0.339690,-0.060383,0.375796,0.696619,-0.458796,-0.403821,0.791476,0.484620,0.337660,-0.056661,0.390434,0.703185,-0.507311,-0.137058,0.850794,0.486240,0.341380,-0.046325,0.389148,0.708565,-0.434620,-0.200109,0.878101,0.489030,0.341500,-0.046591,0.393308,0.708918,-0.451360,-0.010243,0.892283,0.489060,0.343110,-0.056666,0.394778,0.703609,-0.509696,0.022463,0.860061,0.486370,0.342830,0.049603,0.374790,0.701254,0.334941,-0.487687,0.806211,0.512390,0.337720,0.058482,0.382549,0.700550,0.491771,-0.266925,0.828802,0.514440,0.339610,0.047734,0.381578,0.705409,0.391158,-0.357324,0.848124,0.511550,0.339690,0.060398,0.375765,0.696785,0.468439,-0.397409,0.789070,0.515370,0.337660,0.046396,0.389122,0.708652,0.434842,-0.198726,0.878305,0.510960,0.341500,0.056731,0.390395,0.703307,0.508381,-0.138910,0.849854,0.513750,0.341380,0.046665,0.393270,0.709014,0.450388,-0.007668,0.892800,0.510940,0.343110,0.056708,0.394754,0.703696,0.508767,0.025077,0.860539,0.513620,0.342830,-0.068613,0.384594,0.693889,-0.621399,-0.179580,0.762637,0.482800,0.339540,-0.070572,0.377740,0.690335,-0.626844,-0.313263,0.713395,0.481810,0.337610,-0.066959,0.392413,0.696634,-0.620912,-0.063131,0.781334,0.483560,0.341300,-0.066554,0.397080,0.697001,-0.616319,0.067404,0.784607,0.483770,0.342640,-0.074914,0.399947,0.688835,-0.727523,0.099213,0.678872,0.481200,0.342390,0.070416,0.377784,0.690405,0.634100,-0.304631,0.710716,0.518180,0.337610,0.068593,0.384582,0.693991,0.630146,-0.179814,0.755369,0.517190,0.339540,0.066984,0.392390,0.696734,0.627262,-0.074401,0.775246,0.516430,0.341300,0.066605,0.397044,0.697144,0.616812,0.063480,0.784546,0.516220,0.342640,0.074960,0.399909,0.688973,0.730645,0.088334,0.677020,0.518790,0.342390,-0.081788,0.402165,0.680036,-0.813036,0.070117,0.577976,0.478610,0.341950,-0.086662,0.402525,0.672076,-0.869798,-0.024975,0.492775,0.476260,0.341470,0.081755,0.402163,0.680110,0.817684,0.069940,0.571403,0.521380,0.341950,0.086692,0.402486,0.672267,0.874441,-0.012510,0.484970,0.523730,0.341470,-0.090351,0.403811,0.665769,-0.800133,-0.292911,0.523441,0.474030,0.341640,-0.090019,0.401748,0.665502,-0.869293,-0.143776,0.472925,0.474370,0.341080,0.089920,0.401777,0.665511,0.874522,-0.130179,0.467189,0.525620,0.341080,0.090253,0.403842,0.665789,0.799613,-0.298938,0.520821,0.525960,0.341640,-0.005753,0.391733,0.721083,-0.091693,-0.108903,0.989814,0.498790,0.343740,-0.005830,0.400099,0.721011,-0.069954,0.105168,0.991991,0.498770,0.345180,-0.000001,0.399966,0.721647,-0.003173,0.111528,0.993756,0.500000,0.345100,0.000050,0.391618,0.721509,-0.004949,-0.105594,0.994397,0.500000,0.343740,0.005778,0.391704,0.721140,0.090963,-0.106546,0.990138,0.501200,0.343740,0.005884,0.400079,0.721057,0.067730,0.105661,0.992093,0.501220,0.345180,-0.008215,0.355694,0.578721,0.038109,0.999044,-0.021427,0.498412,0.348361,-0.008239,0.374734,0.476774,0.049042,0.846053,0.530837,0.498400,0.348460,0.000029,0.355584,0.578725,0.000705,0.999774,-0.021246,0.500000,0.348310,0.000030,0.374495,0.476763,0.001000,0.848217,0.529648,0.500000,0.348410,0.000020,0.407285,0.719817,-0.001255,0.535265,0.844683,0.500000,0.346810,-0.006335,0.407477,0.719419,-0.008523,0.522291,0.852725,0.498600,0.346870,0.008301,0.374720,0.476768,-0.047535,0.846195,0.530750,0.501590,0.348460,0.008277,0.355688,0.578724,-0.037154,0.999080,-0.021414,0.501577,0.348361,0.006375,0.407474,0.719423,0.005964,0.523460,0.852030,0.501390,0.346870,0.040675,0.368240,0.699056,0.190262,-0.639680,0.744721,0.510360,0.335660,0.032856,0.362569,0.695351,0.106307,-0.628472,0.770533,0.508680,0.333630,0.041401,0.362089,0.693484,0.175068,-0.608082,0.774331,0.510990,0.333440,0.032517,0.368264,0.700967,0.117860,-0.679975,0.723701,0.508230,0.335710,0.025530,0.363156,0.696507,0.074337,-0.638448,0.766066,0.506770,0.333810,0.025455,0.368581,0.701884,0.075967,-0.704648,0.705479,0.506480,0.335770,0.042256,0.354803,0.688414,0.212293,-0.441367,0.871853,0.511630,0.331020,0.033610,0.345900,0.687109,0.164463,-0.095829,0.981717,0.509370,0.328650,0.042987,0.345102,0.685086,0.273452,-0.095457,0.957137,0.512090,0.328280,0.033218,0.355495,0.690384,0.125899,-0.447466,0.885395,0.509090,0.331280,0.025550,0.346618,0.688063,0.083802,-0.116443,0.989656,0.507050,0.328940,0.025327,0.356190,0.691623,0.086406,-0.464256,0.881476,0.506950,0.331490,0.018903,0.368719,0.702544,0.085052,-0.718533,0.690273,0.504830,0.335810,0.018964,0.363257,0.697358,0.083391,-0.637582,0.765856,0.505030,0.333820,0.018557,0.346951,0.688604,0.035638,-0.161689,0.986198,0.505170,0.328990,0.018712,0.356299,0.692349,0.085297,-0.476876,0.874822,0.505130,0.331490,0.012477,0.355968,0.692897,0.074482,-0.487216,0.870099,0.503450,0.331400,0.012345,0.346796,0.689034,-0.000538,-0.221830,0.975085,0.503480,0.328940,-0.040591,0.368307,0.698868,-0.187636,-0.636730,0.747909,0.489630,0.335660,-0.032810,0.362599,0.695223,-0.106142,-0.620895,0.776674,0.491310,0.333630,-0.032376,0.368360,0.700661,-0.117441,-0.681630,0.722210,0.491760,0.335710,-0.041400,0.362125,0.693368,-0.170366,-0.602616,0.779634,0.489000,0.333440,-0.025269,0.368678,0.701649,-0.084751,-0.705454,0.703670,0.493510,0.335770,-0.025433,0.363207,0.696378,-0.082016,-0.632359,0.770322,0.493220,0.333810,-0.042224,0.354827,0.688271,-0.209574,-0.441163,0.872613,0.488370,0.331020,-0.033611,0.345942,0.686981,-0.163944,-0.093375,0.982041,0.490620,0.328650,-0.033182,0.355524,0.690291,-0.125509,-0.445279,0.886552,0.490900,0.331280,-0.043086,0.345091,0.685055,-0.273732,-0.093256,0.957274,0.487910,0.328280,-0.025311,0.356242,0.691514,-0.088330,-0.463027,0.881932,0.493040,0.331490,-0.025562,0.346636,0.687991,-0.085651,-0.113500,0.989839,0.492940,0.328940,-0.018814,0.368741,0.702462,-0.093990,-0.715081,0.692693,0.495160,0.335810,-0.018887,0.363260,0.697309,-0.090633,-0.638324,0.764414,0.494960,0.333820,-0.018556,0.346983,0.688525,-0.033412,-0.157963,0.986880,0.494820,0.328990,-0.018639,0.356341,0.692247,-0.084082,-0.477424,0.874641,0.494860,0.331490,-0.012378,0.356029,0.692762,-0.079248,-0.487681,0.869418,0.496540,0.331400,-0.012279,0.346843,0.688932,-0.003792,-0.218832,0.975755,0.496510,0.328940,0.000056,0.355451,0.693467,-0.001918,-0.513440,0.858123,0.500000,0.331310,0.006064,0.346599,0.689027,-0.026048,-0.279573,0.959771,0.501750,0.328900,0.006195,0.355651,0.693193,0.050373,-0.503472,0.862542,0.501730,0.331330,0.000054,0.346508,0.688936,-0.001290,-0.305966,0.952041,0.500000,0.328880,-0.006098,0.346633,0.688978,0.016935,-0.278405,0.960314,0.498240,0.328900,-0.006193,0.355634,0.693204,-0.060101,-0.502480,0.862498,0.498260,0.331330,0.050850,0.368490,0.696447,0.287493,-0.583428,0.759578,0.513170,0.335680,0.061525,0.369473,0.692253,0.447003,-0.513242,0.732647,0.516210,0.335730,0.051609,0.362069,0.690952,0.281274,-0.589639,0.757107,0.513910,0.333440,0.062084,0.362927,0.686837,0.449665,-0.560049,0.695806,0.517020,0.333550,-0.050722,0.368573,0.696225,-0.285535,-0.574008,0.767454,0.486820,0.335680,-0.051802,0.362016,0.690949,-0.276598,-0.584786,0.762574,0.486080,0.333440,-0.061525,0.369476,0.692149,-0.440427,-0.506649,0.741169,0.483790,0.335730,-0.062197,0.362897,0.686809,-0.446833,-0.556212,0.700692,0.482970,0.333550,0.071813,0.364986,0.680469,0.629758,-0.496399,0.597489,0.519970,0.333660,0.071463,0.371546,0.686144,0.631915,-0.431506,0.643806,0.519050,0.335770,-0.071931,0.364952,0.680466,-0.624758,-0.495213,0.603691,0.480020,0.333660,-0.071570,0.371528,0.686084,-0.627318,-0.428725,0.650129,0.480940,0.335770,-0.026027,0.334331,0.689720,-0.080453,0.157884,0.984175,0.492870,0.325980,-0.019689,0.318545,0.692931,0.061919,0.072897,0.995416,0.494780,0.322440,-0.018928,0.334601,0.689365,0.044509,0.132925,0.990126,0.494770,0.326220,-0.026943,0.317858,0.692882,-0.085205,0.061525,0.994462,0.492940,0.322090,-0.012761,0.334493,0.688423,0.117360,0.084091,0.989523,0.496480,0.326310,-0.013152,0.318428,0.692033,0.162008,0.080526,0.983498,0.496480,0.322640,-0.044185,0.331887,0.686445,-0.316291,0.126734,0.940158,0.487890,0.324810,-0.035389,0.316098,0.691485,-0.231334,0.044057,0.971876,0.490770,0.321420,-0.034406,0.333061,0.688691,-0.203326,0.150748,0.967437,0.490550,0.325420,-0.045156,0.314650,0.688414,-0.364755,0.014392,0.930992,0.488300,0.320710,0.026097,0.334306,0.689796,0.078917,0.156145,0.984577,0.507120,0.325980,0.019702,0.318525,0.692988,-0.064266,0.072668,0.995284,0.505210,0.322440,0.026933,0.317859,0.692901,0.084409,0.061142,0.994553,0.507050,0.322090,0.019057,0.334614,0.689357,-0.044480,0.130906,0.990396,0.505230,0.326220,0.013117,0.318474,0.691988,-0.166013,0.080547,0.982828,0.503510,0.322640,0.012794,0.334467,0.688493,-0.120995,0.080676,0.989369,0.503520,0.326310,0.044224,0.331855,0.686555,0.317631,0.125424,0.939883,0.512100,0.324810,0.035402,0.316081,0.691548,0.230070,0.043096,0.972219,0.509220,0.321420,0.045149,0.314630,0.688494,0.370472,0.012075,0.928765,0.511690,0.320710,0.034390,0.333072,0.688704,0.202614,0.149761,0.967739,0.509440,0.325420,-0.013308,0.297367,0.691012,0.141894,-0.207818,0.967821,0.496560,0.317370,-0.020026,0.297052,0.691577,0.044584,-0.216935,0.975168,0.494900,0.317280,-0.013518,0.276113,0.682704,0.110911,-0.531445,0.839800,0.496560,0.311800,-0.020425,0.275608,0.683163,0.021125,-0.548972,0.835574,0.494910,0.311900,-0.027330,0.296406,0.691292,-0.086605,-0.224172,0.970694,0.493160,0.317100,-0.027944,0.275316,0.682928,-0.102915,-0.561783,0.820858,0.493200,0.311980,-0.035704,0.295418,0.689838,-0.244538,-0.234449,0.940869,0.491190,0.316740,-0.036322,0.275391,0.681068,-0.266894,-0.566252,0.779825,0.491310,0.311980,-0.045130,0.294687,0.686420,-0.406276,-0.250316,0.878796,0.488990,0.316250,-0.045759,0.275738,0.676909,-0.424272,-0.562758,0.709434,0.489170,0.311770,0.013334,0.297361,0.691032,-0.142826,-0.207385,0.967777,0.503430,0.317370,0.020026,0.297055,0.691579,-0.046579,-0.217538,0.974940,0.505090,0.317280,0.027332,0.296391,0.691336,0.085479,-0.225133,0.970571,0.506830,0.317100,0.020421,0.275610,0.683161,-0.021275,-0.549263,0.835379,0.505080,0.311900,0.027925,0.275323,0.682922,0.101972,-0.562358,0.820582,0.506790,0.311980,0.013517,0.276114,0.682704,-0.110091,-0.531796,0.839686,0.503430,0.311800,0.035691,0.295416,0.689858,0.244713,-0.235584,0.940540,0.508800,0.316740,0.045104,0.294694,0.686424,0.411148,-0.249375,0.876795,0.511000,0.316250,0.036328,0.275387,0.681081,0.267221,-0.566507,0.779527,0.508680,0.311980,0.045752,0.275741,0.676908,0.425337,-0.562005,0.709393,0.510820,0.311770,-0.006688,0.318584,0.690467,0.179001,0.083222,0.980323,0.498230,0.322840,-0.000000,0.298139,0.689012,-0.000482,-0.196902,0.980423,0.500000,0.317490,0.000049,0.318959,0.689178,0.001232,0.085131,0.996369,0.500000,0.322930,-0.006657,0.297761,0.690063,0.176465,-0.198294,0.964126,0.498260,0.317450,0.000002,0.277778,0.680808,-0.000761,-0.517031,0.855967,0.500000,0.311670,-0.006815,0.276967,0.681701,0.155873,-0.515781,0.842421,0.498270,0.311710,-0.013413,0.260716,0.668363,0.057325,-0.765202,0.641233,0.496410,0.306100,-0.006321,0.252153,0.654666,0.083363,-0.864898,0.494977,0.498140,0.301360,-0.006688,0.261550,0.668331,0.114091,-0.742207,0.660388,0.498190,0.306110,-0.012605,0.251290,0.653804,0.027170,-0.874857,0.483618,0.496320,0.301200,0.0,0.262227,0.667937,-0.000055,-0.738602,0.674142,0.500000,0.306130,-0.000000,0.252757,0.654664,0.000003,-0.865900,0.500216,0.500000,0.301430,0.006731,0.318624,0.690419,-0.180268,0.084063,0.980019,0.501760,0.322840,0.006654,0.297735,0.690089,-0.176689,-0.197332,0.964283,0.501730,0.317450,0.006805,0.276967,0.681703,-0.156204,-0.516164,0.842126,0.501720,0.311710,0.013413,0.260716,0.668363,-0.057250,-0.765205,0.641236,0.503580,0.306100,0.006321,0.252153,0.654666,-0.083359,-0.864899,0.494975,0.501850,0.301360,0.012605,0.251290,0.653804,-0.027175,-0.874858,0.483616,0.503670,0.301200,0.006688,0.261550,0.668331,-0.114101,-0.742222,0.660370,0.501800,0.306110,-0.006522,0.334352,0.687356,0.126524,0.031404,0.991466,0.498230,0.326410,0.000087,0.334475,0.686486,0.000484,0.005905,0.999982,0.500000,0.326460,-0.340172,0.593568,0.158953,-0.099003,-0.171524,-0.980193,0.903560,0.643850,-0.328217,0.616910,0.155169,0.264178,-0.030490,-0.963992,0.896190,0.650620,-0.327359,0.593489,0.157682,0.285949,-0.150836,-0.946299,0.898740,0.641070,-0.342587,0.617260,0.157177,-0.142961,-0.040076,-0.988917,0.901940,0.652740,-0.328299,0.640325,0.155220,0.287130,0.082281,-0.954351,0.895220,0.659980,-0.344364,0.639959,0.158293,-0.151360,0.082447,-0.985034,0.901710,0.660650,-0.336995,0.568678,0.164702,-0.051208,-0.348083,-0.936064,0.908090,0.633820,-0.325160,0.570632,0.163544,0.315249,-0.275501,-0.908140,0.903370,0.631410,-0.319981,0.549378,0.173901,0.292018,-0.462247,-0.837289,0.910510,0.621370,-0.331149,0.545615,0.176256,-0.010092,-0.576574,-0.816982,0.915820,0.623540,0.023738,0.413951,-0.063792,0.058950,0.029313,-0.997831,0.937190,0.248290,0.050215,0.536370,-0.072541,0.049402,-0.262248,-0.963735,0.930340,0.309660,0.047957,0.413657,-0.061796,0.114235,0.015874,-0.993327,0.925140,0.248370,0.025220,0.537130,-0.074065,0.037098,-0.252623,-0.966853,0.942350,0.308540,0.000000,0.537315,-0.074945,0.000002,-0.249077,-0.968484,0.954270,0.307240,0.0,0.413966,-0.064400,0.000000,0.032833,-0.999461,0.948740,0.248090,-0.286551,0.490909,0.232361,-0.018489,-0.853074,-0.521462,0.942890,0.594570,-0.291162,0.483706,0.255690,-0.358308,-0.920294,0.157081,0.954750,0.597630,-0.301324,0.489006,0.236758,-0.426568,-0.869446,-0.249205,0.946040,0.601070,-0.298579,0.508717,0.211860,0.161984,-0.656472,-0.736753,0.931630,0.602000,-0.311967,0.505352,0.216166,-0.474780,-0.753640,-0.454545,0.936640,0.606660,0.327359,0.593489,0.157682,-0.285936,-0.150834,-0.946303,0.100920,0.639780,0.328217,0.616910,0.155169,-0.264174,-0.030489,-0.963993,0.103450,0.649340,0.340172,0.593568,0.158953,0.099004,-0.171524,-0.980193,0.096090,0.642560,0.342587,0.617260,0.157177,0.142962,-0.040076,-0.988916,0.097710,0.651450,0.328299,0.640325,0.155220,-0.287130,0.082280,-0.954351,0.104420,0.658690,0.344364,0.639959,0.158293,0.151361,0.082447,-0.985034,0.097930,0.659350,0.336995,0.568678,0.164702,0.051209,-0.348083,-0.936064,0.091570,0.632530,0.325160,0.570632,0.163544,-0.315227,-0.275504,-0.908146,0.096290,0.630120,0.319981,0.549378,0.173901,-0.291998,-0.462254,-0.837292,0.089160,0.620070,0.331149,0.545615,0.176256,0.010094,-0.576574,-0.816983,0.083850,0.622240,-0.047957,0.413657,-0.061796,-0.114235,0.015874,-0.993327,0.074850,0.248370,-0.050215,0.536370,-0.072541,-0.049404,-0.262249,-0.963735,0.069650,0.309660,-0.023738,0.413951,-0.063792,-0.058950,0.029313,-0.997830,0.062800,0.248290,-0.025220,0.537130,-0.074065,-0.037098,-0.252624,-0.966853,0.057640,0.308540,0.000000,0.537315,-0.074945,0.000002,-0.249077,-0.968484,0.045720,0.307240,0.0,0.413966,-0.064400,0.000000,0.032833,-0.999461,0.051250,0.248090,0.286551,0.490909,0.232361,0.018482,-0.853074,-0.521462,0.056760,0.593250,0.291162,0.483706,0.255690,0.358290,-0.920298,0.157099,0.044910,0.596300,0.301324,0.489006,0.236758,0.426576,-0.869444,-0.249199,0.053620,0.599750,0.298579,0.508717,0.211860,-0.161982,-0.656476,-0.736750,0.068020,0.600690,0.311967,0.505352,0.216166,0.474795,-0.753636,-0.454535,0.063030,0.605350,-0.292985,0.594725,0.242906,-0.959016,-0.177663,0.220734,0.951690,0.648020,-0.281143,0.594431,0.256491,-0.445223,-0.480718,0.755438,0.959110,0.646860,-0.293030,0.603281,0.249929,-0.957801,-0.145312,0.247996,0.954900,0.651330,-0.282164,0.585390,0.248142,-0.617339,-0.491503,0.614262,0.955570,0.643370,-0.280765,0.603970,0.262100,-0.413994,-0.582404,0.699581,0.962680,0.649660,-0.293028,0.611572,0.254676,-0.661797,-0.445562,0.602909,0.957950,0.654540,-0.292981,0.584089,0.227187,-0.970622,-0.119386,0.208901,0.945500,0.643190,-0.294224,0.580636,0.220584,-0.940360,0.000407,0.340181,0.942540,0.641820,-0.286731,0.573352,0.232852,-0.776849,-0.420074,0.469088,0.949130,0.639260,-0.285862,0.566553,0.229106,-0.803078,-0.279434,0.526291,0.948140,0.637170,-0.297216,0.577272,0.213895,-0.625526,0.320940,0.711136,0.940380,0.640830,-0.286894,0.559018,0.227680,-0.834214,-0.071370,0.546803,0.947410,0.634920,0.284700,0.649924,0.091937,0.984631,-0.105720,-0.139017,0.791220,0.379090,0.292014,0.711761,0.107779,0.995479,-0.059219,-0.074259,0.786490,0.405100,0.289432,0.647257,0.123531,0.973449,-0.045126,-0.224410,0.778690,0.379760,0.292940,0.695263,0.139304,0.990932,0.021219,-0.132681,0.773770,0.399770,-0.290036,0.732068,0.066316,-0.989223,-0.070856,-0.128133,0.197200,0.411510,-0.270471,0.664243,0.004916,-0.947819,-0.136016,-0.288340,0.175080,0.382010,-0.279631,0.655403,0.051745,-0.976328,-0.128754,-0.173797,0.193050,0.379610,-0.282849,0.752422,0.017808,-0.968120,-0.050939,-0.245253,0.178960,0.417090,0.292971,0.594725,0.242903,0.959250,-0.176768,0.220438,0.047970,0.646720,0.281112,0.594429,0.256483,0.445124,-0.480529,0.755617,0.040550,0.645560,0.282146,0.585389,0.248137,0.617380,-0.491133,0.614516,0.044090,0.642080,0.293019,0.603280,0.249926,0.958038,-0.144709,0.247430,0.044770,0.650030,0.280740,0.603968,0.262093,0.413992,-0.582125,0.699815,0.036990,0.648370,0.293007,0.611571,0.254670,0.661644,-0.445117,0.603406,0.041710,0.653240,0.294215,0.580635,0.220582,0.940563,0.000259,0.339619,0.057120,0.640520,0.286725,0.573352,0.232850,0.776967,-0.419755,0.469178,0.050530,0.637960,0.285858,0.566553,0.229105,0.803135,-0.279914,0.525949,0.051520,0.635870,0.292973,0.584089,0.227185,0.970743,-0.118610,0.208781,0.054160,0.641880,0.297194,0.577271,0.213889,0.626012,0.320371,0.710965,0.059280,0.639530,0.286871,0.559017,0.227674,0.834536,-0.072019,0.546226,0.052250,0.633620,-0.289432,0.647257,0.123531,-0.973450,-0.045126,-0.224410,0.221300,0.379760,-0.292014,0.711761,0.107779,-0.995479,-0.059219,-0.074259,0.213500,0.405100,-0.284700,0.649924,0.091937,-0.984631,-0.105720,-0.139017,0.208770,0.379090,-0.292940,0.695263,0.139304,-0.990932,0.021219,-0.132681,0.226220,0.399770,0.296761,0.645793,0.146517,0.915399,0.035675,-0.400963,0.770040,0.380780,0.305535,0.681406,0.170793,0.546223,0.356984,-0.757762,0.762810,0.396130,0.306137,0.643983,0.163694,0.549492,0.116302,-0.827365,0.765080,0.381150,0.297331,0.686475,0.158344,0.928994,0.172431,-0.327471,0.766420,0.397420,-0.142066,0.370393,0.616045,-0.773859,-0.369253,0.514581,0.455160,0.331110,-0.129646,0.368477,0.628850,-0.481054,-0.260686,0.837036,0.458610,0.330770,-0.132533,0.375533,0.629762,-0.435437,-0.336860,0.834817,0.458260,0.333060,-0.138674,0.361098,0.614571,-0.765297,-0.378527,0.520614,0.455700,0.328040,-0.144645,0.378419,0.618088,-0.783319,-0.355455,0.509963,0.455040,0.333590,-0.134760,0.381683,0.631249,-0.451464,-0.372121,0.810991,0.458250,0.334890,-0.121505,0.382711,0.633164,-0.050609,-0.238307,0.969870,0.460510,0.334450,-0.123666,0.387215,0.634741,-0.019452,-0.334266,0.942278,0.460540,0.335930,-0.118759,0.377384,0.632260,-0.189854,-0.086824,0.977966,0.460850,0.332680,-0.157526,0.360694,0.568850,-0.866755,-0.354473,0.350834,0.444170,0.322580,-0.146502,0.355072,0.593181,-0.843327,-0.394293,0.365148,0.451330,0.323580,-0.150404,0.366989,0.595487,-0.864259,-0.353735,0.357669,0.450180,0.327970,-0.152525,0.347133,0.566598,-0.846282,-0.396230,0.356102,0.446140,0.317420,-0.160901,0.372833,0.571857,-0.882329,-0.321479,0.343724,0.443040,0.327240,-0.153258,0.376979,0.598150,-0.874630,-0.329193,0.355885,0.449680,0.331640,-0.139627,0.341857,0.593042,-0.806293,-0.449404,0.384613,0.453680,0.318860,-0.145061,0.332725,0.567561,-0.818279,-0.443445,0.365755,0.449450,0.312570,-0.133283,0.318427,0.575988,-0.796375,-0.473717,0.376003,0.454950,0.308990,-0.128414,0.328664,0.599661,-0.778115,-0.462226,0.425305,0.458120,0.315110,-0.133034,0.350417,0.614698,-0.735453,-0.410092,0.539382,0.457150,0.324030,-0.123158,0.339553,0.619277,-0.707103,-0.392939,0.587881,0.460530,0.320530,-0.115717,0.351312,0.632265,-0.569515,-0.183961,0.801131,0.462670,0.324650,-0.124762,0.360015,0.629368,-0.528404,-0.215812,0.821106,0.459820,0.327540,-0.114385,0.370676,0.633543,-0.372668,0.018480,0.927781,0.462090,0.330250,-0.106756,0.363054,0.637407,-0.541857,0.002221,0.840468,0.464730,0.328140,0.129499,0.368542,0.628806,0.482234,-0.259705,0.836662,0.541380,0.330770,0.141982,0.370430,0.616017,0.770582,-0.375435,0.515026,0.544830,0.331110,0.132436,0.375567,0.629752,0.431451,-0.343978,0.833984,0.541730,0.333060,0.138549,0.361146,0.614559,0.765767,-0.378273,0.520106,0.544290,0.328040,0.118612,0.377448,0.632237,0.188935,-0.089309,0.977920,0.539140,0.332680,0.121440,0.382733,0.633164,0.048222,-0.245740,0.968136,0.539480,0.334450,0.134701,0.381695,0.631282,0.450174,-0.373649,0.811005,0.541740,0.334890,0.123624,0.387218,0.634797,0.021016,-0.335375,0.941850,0.539460,0.335930,0.144616,0.378426,0.618115,0.781853,-0.357490,0.510791,0.544960,0.333590,0.146371,0.355120,0.593131,0.842519,-0.394458,0.366829,0.548660,0.323580,0.157517,0.360697,0.568846,0.865633,-0.355815,0.352244,0.555820,0.322580,0.150335,0.367012,0.595477,0.861928,-0.357966,0.359084,0.549810,0.327970,0.152514,0.347137,0.566594,0.845626,-0.396039,0.357868,0.553850,0.317420,0.153247,0.376982,0.598154,0.873853,-0.330403,0.356671,0.550310,0.331640,0.160890,0.372837,0.571853,0.881882,-0.321815,0.344557,0.556950,0.327240,0.139565,0.341878,0.593025,0.806659,-0.447154,0.386465,0.546310,0.318860,0.133279,0.318428,0.575987,0.795944,-0.473458,0.377241,0.545040,0.308990,0.145059,0.332725,0.567562,0.818444,-0.442185,0.366908,0.550540,0.312570,0.128377,0.328677,0.599646,0.777554,-0.461345,0.427283,0.541870,0.315110,0.123010,0.339604,0.619235,0.707271,-0.395243,0.586132,0.539460,0.320530,0.132933,0.350451,0.614668,0.737722,-0.408552,0.537450,0.542840,0.324030,0.115728,0.351293,0.632368,0.567812,-0.184056,0.802317,0.537320,0.324650,0.124743,0.360009,0.629428,0.531594,-0.211667,0.820125,0.540170,0.327540,0.106641,0.363092,0.637392,0.537413,0.005268,0.843303,0.535260,0.328140,0.114277,0.370713,0.633525,0.370989,0.023182,0.928348,0.537900,0.330250,-0.116984,0.304729,0.594342,-0.783261,-0.485403,0.388442,0.463110,0.307660,-0.112882,0.317015,0.615008,-0.771062,-0.412001,0.485509,0.465220,0.313600,-0.108456,0.330469,0.630697,-0.707246,-0.290923,0.644335,0.466650,0.318940,-0.095581,0.307690,0.634909,-0.794888,-0.303310,0.525506,0.472710,0.313580,-0.091609,0.323420,0.645575,-0.742483,-0.148603,0.653174,0.473190,0.318700,-0.098581,0.293213,0.617540,-0.792629,-0.464886,0.394486,0.471570,0.307950,-0.101908,0.344057,0.639728,-0.629698,-0.124915,0.766732,0.467850,0.323370,-0.095463,0.356107,0.645504,-0.665537,-0.086847,0.741294,0.469170,0.327280,-0.083403,0.350808,0.656521,-0.724765,-0.163329,0.669357,0.473970,0.327180,-0.087089,0.338308,0.651416,-0.699957,-0.067394,0.710998,0.473460,0.323160,0.116949,0.304741,0.594328,0.783150,-0.484803,0.389412,0.536880,0.307660,0.112745,0.317057,0.614977,0.771306,-0.410535,0.486362,0.534770,0.313600,0.098556,0.293220,0.617540,0.792263,-0.464737,0.395398,0.528420,0.307950,0.095502,0.307696,0.634967,0.794774,-0.302642,0.526062,0.527290,0.313580,0.108379,0.330484,0.630697,0.706929,-0.292098,0.644151,0.533340,0.318940,0.091460,0.323446,0.645601,0.742482,-0.147156,0.653503,0.526800,0.318700,0.101830,0.344079,0.639726,0.627318,-0.123639,0.768886,0.532140,0.323370,0.086900,0.338359,0.651416,0.699872,-0.064705,0.711331,0.526530,0.323160,0.083253,0.350848,0.656528,0.725644,-0.163385,0.668390,0.526020,0.327180,0.095173,0.356200,0.645429,0.664588,-0.086118,0.742230,0.530830,0.327280,-0.122621,0.281945,0.545488,-0.708164,-0.640168,0.297806,0.456500,0.293720,-0.139426,0.307953,0.550249,-0.782639,-0.500812,0.369681,0.450160,0.302520,-0.141948,0.295655,0.527290,-0.742317,-0.584585,0.327453,0.446070,0.295580,-0.120909,0.293906,0.569143,-0.759672,-0.549052,0.348483,0.459540,0.300940,-0.100606,0.281027,0.592876,-0.748251,-0.580551,0.321061,0.469180,0.301080,-0.101251,0.269148,0.568145,-0.677488,-0.686846,0.263160,0.467190,0.293670,0.139426,0.307953,0.550249,0.782438,-0.500936,0.369939,0.549830,0.302520,0.122620,0.281945,0.545488,0.708132,-0.639983,0.298279,0.543490,0.293720,0.141948,0.295655,0.527290,0.742277,-0.584578,0.327556,0.553920,0.295580,0.120891,0.293914,0.569136,0.759318,-0.549205,0.349014,0.540450,0.300940,0.101251,0.269148,0.568145,0.677859,-0.686203,0.263879,0.532800,0.293670,0.100544,0.281050,0.592849,0.748179,-0.580207,0.321850,0.530810,0.301080,-0.082880,0.283863,0.640676,-0.781284,-0.460660,0.421174,0.478420,0.309020,-0.080707,0.300353,0.654906,-0.802853,-0.226487,0.551480,0.478700,0.314270,-0.077887,0.318649,0.660988,-0.775673,-0.049328,0.629204,0.478250,0.319170,-0.067789,0.296241,0.670648,-0.716311,-0.244873,0.653404,0.483240,0.315060,-0.067433,0.315775,0.674696,-0.699330,-0.028030,0.714249,0.482180,0.319820,-0.068718,0.278559,0.658502,-0.692491,-0.511319,0.508929,0.483440,0.310220,-0.075109,0.334756,0.663871,-0.737721,-0.008888,0.675047,0.477870,0.323520,-0.073173,0.347479,0.667334,-0.705067,-0.180810,0.685703,0.477960,0.327360,-0.063354,0.345857,0.675605,-0.587424,-0.150588,0.795146,0.481480,0.327680,-0.065499,0.332799,0.674954,-0.649498,0.052695,0.758535,0.481530,0.324040,0.082776,0.283896,0.640627,0.782226,-0.459092,0.421138,0.521570,0.309020,0.080578,0.300394,0.654866,0.802762,-0.225932,0.551841,0.521290,0.314270,0.068722,0.278554,0.658522,0.694484,-0.508595,0.508943,0.516550,0.310220,0.067728,0.296257,0.670644,0.715609,-0.241120,0.655564,0.516750,0.315060,0.077799,0.318658,0.661059,0.775552,-0.048464,0.629421,0.521740,0.319170,0.067235,0.315845,0.674681,0.697023,-0.030256,0.716410,0.517810,0.319820,0.074931,0.334805,0.663869,0.739155,-0.007547,0.673493,0.522120,0.323520,0.065438,0.332801,0.675026,0.651493,0.050027,0.757004,0.518460,0.324040,0.063254,0.345874,0.675645,0.593280,-0.148830,0.791118,0.518510,0.327680,0.073016,0.347534,0.667335,0.707742,-0.180050,0.683142,0.522030,0.327360,-0.055800,0.294860,0.680329,-0.560205,-0.264245,0.785076,0.486460,0.315680,-0.056401,0.276403,0.669818,-0.562768,-0.549932,0.617144,0.486720,0.311150,-0.056325,0.314454,0.683153,-0.520320,-0.018508,0.853770,0.485460,0.320240,-0.054966,0.331817,0.682139,-0.466594,0.097258,0.879108,0.484860,0.324410,-0.053134,0.345107,0.681205,-0.420369,-0.113267,0.900256,0.484830,0.327970,0.055676,0.294899,0.680302,0.562569,-0.259757,0.784884,0.513530,0.315680,0.056413,0.276395,0.669840,0.563164,-0.548573,0.617992,0.513270,0.311150,0.055968,0.314555,0.683067,0.524327,-0.021964,0.851234,0.514530,0.320240,0.054956,0.331797,0.682230,0.469771,0.092801,0.877897,0.515130,0.324410,0.053126,0.345084,0.681309,0.422294,-0.113488,0.899327,0.515170,0.327970,-0.062390,0.355445,0.680403,-0.500568,-0.457044,0.735216,0.482110,0.330830,-0.052320,0.354716,0.685235,-0.336211,-0.456232,0.823902,0.485350,0.330880,0.062354,0.355450,0.680441,0.505625,-0.452982,0.734268,0.517880,0.330830,0.052299,0.354696,0.685335,0.340546,-0.452108,0.824395,0.514640,0.330880,-0.081787,0.360631,0.663720,-0.754936,-0.341159,0.560073,0.475300,0.330830,-0.072081,0.357186,0.673368,-0.653526,-0.422163,0.628238,0.478870,0.330800,0.081602,0.360677,0.663735,0.756524,-0.335813,0.561161,0.524690,0.330830,0.071923,0.357236,0.673368,0.658179,-0.417801,0.626293,0.521120,0.330800,-0.091013,0.365832,0.652306,-0.783735,-0.205369,0.586160,0.471000,0.330970,-0.099675,0.371966,0.642409,-0.727868,-0.056637,0.683375,0.466960,0.331550,0.090914,0.365868,0.652331,0.783922,-0.201203,0.587352,0.528990,0.330970,0.099432,0.372062,0.642338,0.726857,-0.051949,0.684822,0.533030,0.331550,-0.105944,0.378481,0.635793,-0.584487,-0.019834,0.811161,0.464390,0.332910,-0.110534,0.384200,0.633909,-0.385986,-0.131996,0.913013,0.463090,0.334530,0.105776,0.378547,0.635770,0.579175,-0.021082,0.814931,0.535600,0.332910,0.110416,0.384242,0.633885,0.378510,-0.142245,0.914602,0.536900,0.334530,-0.113161,0.388551,0.633957,-0.203695,-0.301747,0.931374,0.462760,0.335880,-0.115176,0.392163,0.635377,-0.112853,-0.419269,0.900821,0.462830,0.337120,0.113168,0.388531,0.634033,0.199068,-0.304388,0.931515,0.537230,0.335880,0.115150,0.392160,0.635417,0.108424,-0.413899,0.903843,0.537160,0.337120,-0.322795,0.700598,0.175163,0.346773,0.606803,-0.715219,0.901790,0.684890,-0.335291,0.714867,0.194018,-0.434932,0.844728,-0.311879,0.912330,0.687670,-0.318814,0.713228,0.192040,0.357481,0.808663,-0.467195,0.908340,0.692370,-0.339906,0.701694,0.176921,-0.496942,0.666891,-0.555252,0.906560,0.681020,-0.326495,0.683519,0.162289,0.330892,0.324106,-0.886265,0.898060,0.676760,-0.343304,0.683039,0.163701,-0.597896,0.348977,-0.721620,0.903050,0.674120,-0.316734,0.719398,0.213234,0.309608,0.941604,-0.132380,0.917290,0.697540,-0.324573,0.715870,0.238750,-0.403091,0.806753,0.432051,0.928080,0.696800,-0.331093,0.720211,0.214680,-0.405626,0.912841,0.046787,0.919530,0.692960,-0.306137,0.643983,0.163694,-0.549492,0.116301,-0.827365,0.234910,0.381150,-0.305535,0.681406,0.170793,-0.546223,0.356985,-0.757761,0.237180,0.396130,-0.296761,0.645793,0.146517,-0.915400,0.035674,-0.400962,0.229950,0.380780,-0.297331,0.686475,0.158344,-0.928994,0.172432,-0.327470,0.233570,0.397420,0.306137,0.643983,0.163694,0.549492,0.116302,-0.827365,0.116930,0.661130,0.316453,0.680746,0.172357,-0.322628,0.327259,-0.888151,0.105600,0.678890,0.317784,0.641809,0.165044,-0.305137,0.110750,-0.945846,0.110560,0.659690,0.305535,0.681406,0.170793,0.546223,0.356984,-0.757762,0.109840,0.682850,0.326495,0.683519,0.162289,-0.330892,0.324106,-0.886265,0.101580,0.675460,0.335291,0.714867,0.194018,0.434941,0.844724,-0.311877,0.087310,0.686350,0.322795,0.700598,0.175163,-0.346773,0.606804,-0.715219,0.097840,0.683580,0.318814,0.713228,0.192040,-0.357479,0.808664,-0.467194,0.091300,0.691050,0.339906,0.701694,0.176921,0.496947,0.666890,-0.555249,0.093080,0.679710,0.343304,0.683039,0.163701,0.597896,0.348977,-0.721620,0.096590,0.672820,0.316734,0.719398,0.213234,-0.309607,0.941609,-0.132346,0.082360,0.696220,0.324582,0.715870,0.238753,0.403400,0.806721,0.431822,0.071570,0.695480,0.331093,0.720211,0.214680,0.405690,0.912816,0.046714,0.080120,0.691640,-0.317784,0.641809,0.165044,0.305137,0.110750,-0.945847,0.889070,0.660980,-0.316453,0.680746,0.172357,0.322627,0.327259,-0.888152,0.894030,0.680200,-0.306137,0.643983,0.163694,-0.549492,0.116301,-0.827365,0.882690,0.662410,-0.305535,0.681406,0.170793,-0.546223,0.356985,-0.757761,0.889790,0.684160,0.296414,0.559546,0.228481,-0.112662,0.825251,0.553414,0.053890,0.631560,0.304205,0.574942,0.211779,-0.005122,0.562662,0.826671,0.061200,0.637990,0.286871,0.559017,0.227674,0.006310,0.779149,0.626807,0.052250,0.633620,0.305155,0.560192,0.231705,-0.227000,0.853106,0.469768,0.054850,0.629070,-0.117321,0.270678,0.527304,-0.617422,-0.761684,0.196539,0.456460,0.287140,-0.096048,0.259283,0.548828,-0.569407,-0.803957,0.171548,0.467400,0.287460,-0.106598,0.260401,0.510199,-0.571642,-0.800002,0.182270,0.457680,0.279800,-0.086183,0.250441,0.530187,-0.518557,-0.837166,0.173928,0.468600,0.280650,0.117321,0.270678,0.527304,0.617421,-0.761684,0.196541,0.543530,0.287140,0.137121,0.282155,0.509653,0.658954,-0.715984,0.230535,0.554410,0.288380,0.106598,0.260401,0.510199,0.571642,-0.800001,0.182272,0.542310,0.279800,0.126084,0.270352,0.493121,0.599100,-0.777613,0.190783,0.553260,0.280410,0.086183,0.250441,0.530187,0.518559,-0.837165,0.173931,0.531390,0.280650,0.096047,0.259283,0.548828,0.569408,-0.803956,0.171549,0.532600,0.287460,-0.296439,0.559547,0.228488,0.112658,0.825272,0.553384,0.945770,0.632860,-0.304224,0.574943,0.211784,0.005097,0.562789,0.826585,0.938460,0.639300,-0.286894,0.559018,0.227680,-0.006286,0.779154,0.626801,0.947410,0.634920,-0.305188,0.560194,0.231714,0.226971,0.853143,0.469715,0.944810,0.630370,-0.308124,0.550302,0.229422,-0.903127,-0.013318,0.429166,0.943310,0.626540,-0.305188,0.560194,0.231714,-0.874185,0.122553,0.469874,0.944810,0.630370,-0.308446,0.538543,0.226201,-0.892244,-0.060911,0.447427,0.941790,0.621560,-0.333697,0.547397,0.180364,-0.941802,-0.336067,-0.008247,0.917480,0.624730,-0.313900,0.508043,0.220033,-0.919931,-0.375706,0.112126,0.938260,0.608150,-0.312972,0.514794,0.223299,-0.895518,-0.001262,0.445023,0.939790,0.611150,-0.334095,0.551367,0.185957,-0.913615,-0.037985,0.404802,0.919670,0.626700,-0.331149,0.545615,0.176256,-0.847716,-0.470304,-0.245341,0.915820,0.623540,0.266575,0.556997,0.265312,0.861396,0.506975,0.031193,0.034020,0.631830,0.259102,0.572573,0.268382,0.862416,0.501721,0.067189,0.033400,0.637820,0.265526,0.560095,0.268220,0.794486,0.458131,-0.398633,0.032880,0.633130,0.259807,0.573505,0.272911,0.648147,0.497578,-0.576474,0.032290,0.638140,0.269758,0.553622,0.260822,0.720632,0.575804,0.386185,0.035990,0.630370,0.305155,0.560192,0.231705,0.873672,0.123589,0.470556,0.054850,0.629070,0.308119,0.550302,0.229421,0.902936,-0.013141,0.429574,0.056350,0.625230,0.308418,0.538541,0.226194,0.892044,-0.060623,0.447864,0.057870,0.620250,0.333697,0.547397,0.180364,0.941839,-0.335968,-0.008076,0.082190,0.623430,0.312969,0.514794,0.223298,0.895504,-0.001182,0.445051,0.059870,0.609840,0.313900,0.508043,0.220033,0.919972,-0.375567,0.112252,0.061400,0.606840,0.334092,0.551367,0.185956,0.913559,-0.037910,0.404936,0.080000,0.625390,0.331149,0.545615,0.176256,0.847735,-0.470287,-0.245307,0.083850,0.622240,-0.259111,0.572573,0.268384,-0.862742,0.500906,0.069064,0.966260,0.639130,-0.265545,0.560096,0.268225,-0.792097,0.460115,-0.401095,0.966780,0.634420,-0.259815,0.573505,0.272913,-0.648333,0.497633,-0.576217,0.967370,0.639450,-0.266600,0.556998,0.265318,-0.860315,0.508857,0.030368,0.965630,0.633130,-0.269833,0.553625,0.260841,-0.720912,0.576245,0.385003,0.963660,0.631670,0.275165,0.552545,0.254813,0.545389,0.667598,0.506818,0.039300,0.629700,0.280395,0.552758,0.247559,0.482178,0.766392,0.424439,0.043360,0.630020,-0.211866,0.445855,0.514331,-0.861682,-0.296496,0.411818,0.411350,0.342970,-0.228804,0.476853,0.502466,-0.888360,-0.284177,0.360639,0.401500,0.352820,-0.228987,0.461219,0.488928,-0.897984,-0.275167,0.343378,0.398850,0.345920,-0.211752,0.464188,0.527847,-0.850078,-0.304291,0.429854,0.413240,0.350700,-0.228127,0.491167,0.514377,-0.878817,-0.290667,0.378410,0.403850,0.358860,-0.211100,0.480892,0.540447,-0.842500,-0.306012,0.443341,0.415250,0.357630,0.211866,0.445855,0.514331,0.861788,-0.296248,0.411776,0.588640,0.342970,0.228776,0.476851,0.502458,0.888572,-0.283245,0.360848,0.598490,0.352820,0.211747,0.464188,0.527846,0.850293,-0.303636,0.429893,0.586750,0.350700,0.228972,0.461219,0.488924,0.898044,-0.274789,0.343522,0.601140,0.345920,0.211088,0.480891,0.540445,0.842926,-0.304076,0.443862,0.584740,0.357630,0.228072,0.491163,0.514365,0.879288,-0.288482,0.378986,0.596140,0.358860,-0.210605,0.495309,0.551642,-0.834605,-0.314728,0.452086,0.417220,0.363320,-0.227780,0.504257,0.525167,-0.869476,-0.301471,0.391314,0.405740,0.364270,0.210494,0.495305,0.551617,0.835573,-0.310164,0.453449,0.582770,0.363320,0.227707,0.504248,0.525152,0.869919,-0.298011,0.392976,0.594260,0.364270,-0.241535,0.500452,0.484883,-0.928955,-0.247455,0.275334,0.390430,0.358290,-0.250141,0.522445,0.470948,-0.953345,-0.213810,0.213116,0.381540,0.363970,-0.250265,0.509299,0.457152,-0.955227,-0.212888,0.205476,0.377460,0.357410,-0.241416,0.513222,0.497092,-0.921529,-0.257024,0.291071,0.393340,0.364180,0.250106,0.522441,0.470942,0.952493,-0.217903,0.212782,0.618450,0.363970,0.241491,0.500451,0.484872,0.929426,-0.245105,0.275846,0.609570,0.358290,0.250130,0.509288,0.457124,0.955382,-0.211286,0.206406,0.622530,0.357410,0.241280,0.513209,0.497061,0.921318,-0.256859,0.291886,0.606650,0.364180,-0.241529,0.487743,0.472805,-0.935501,-0.239399,0.259857,0.387820,0.352730,-0.241388,0.474333,0.460248,-0.939385,-0.221830,0.261435,0.385210,0.346760,-0.249903,0.497107,0.445021,-0.956525,-0.209306,0.203104,0.374720,0.352030,-0.249703,0.485089,0.433763,-0.956406,-0.182125,0.228293,0.372470,0.346840,-0.275167,0.552545,0.254814,-0.546604,0.668113,0.504826,0.960350,0.631000,-0.280395,0.552758,0.247559,-0.482240,0.766304,0.424527,0.956290,0.631320,0.283367,0.553171,0.237685,0.851825,0.186836,0.489374,0.047650,0.631420,0.271481,0.573240,0.250754,0.740121,0.020135,0.672172,0.041150,0.636640,0.273820,0.576887,0.249852,0.682841,-0.168056,0.710975,0.041800,0.637950,0.241507,0.487742,0.472800,0.935813,-0.237504,0.260473,0.612170,0.352730,0.249896,0.497107,0.445019,0.956803,-0.206930,0.204227,0.625270,0.352030,0.241388,0.474333,0.460248,0.939377,-0.221496,0.261746,0.614780,0.346760,0.249700,0.485089,0.433762,0.956451,-0.181787,0.228374,0.627520,0.346840,-0.283372,0.553171,0.237686,-0.851606,0.186291,0.489961,0.952000,0.632720,-0.271486,0.573240,0.250755,-0.740194,0.019680,0.672106,0.958500,0.637940,-0.273828,0.576887,0.249854,-0.682938,-0.168091,0.710873,0.957860,0.639240,0.277055,0.581102,0.249142,0.560459,-0.402287,0.723914,0.042690,0.639820,-0.330126,0.556816,0.191852,-0.875991,0.016288,0.482052,0.923080,0.629340,-0.310305,0.525719,0.224787,-0.846193,0.078411,0.527077,0.940790,0.616000,-0.281240,0.608785,0.266958,-0.489651,-0.860861,0.138420,0.965720,0.651200,-0.293306,0.616557,0.258308,-0.696213,-0.670668,0.255912,0.960110,0.656700,-0.293925,0.619898,0.261462,-0.923919,-0.277892,-0.262965,0.961730,0.658400,-0.282729,0.606692,0.272934,-0.596630,-0.632892,-0.493437,0.968670,0.651950,0.330122,0.556816,0.191851,0.875848,0.016530,0.482304,0.076580,0.628040,0.310305,0.525719,0.224787,0.845953,0.078975,0.527377,0.058870,0.614690,0.281216,0.608784,0.266952,0.489790,-0.860781,0.138426,0.033950,0.649910,0.293265,0.616555,0.258297,0.696448,-0.670427,0.255906,0.039560,0.655390,0.293900,0.619896,0.261456,0.923711,-0.278414,-0.263142,0.037950,0.657090,0.282702,0.606690,0.272927,0.596506,-0.632857,-0.493632,0.030990,0.650670,-0.181559,0.318647,0.469567,-0.805085,-0.509344,0.303985,0.423310,0.294580,-0.205969,0.358193,0.458479,-0.865932,-0.363659,0.343386,0.407980,0.306430,-0.202685,0.337698,0.441231,-0.843449,-0.464648,0.269620,0.406840,0.297050,-0.182125,0.343099,0.497627,-0.842570,-0.388152,0.373381,0.426590,0.306140,-0.175047,0.300784,0.449247,-0.726979,-0.670543,0.147897,0.422280,0.284830,-0.196403,0.320375,0.423542,-0.774641,-0.621644,0.116144,0.405360,0.287640,-0.224156,0.361249,0.408323,-0.878464,-0.424048,0.220191,0.387330,0.300120,-0.218323,0.345112,0.392751,-0.818824,-0.568609,0.078809,0.385690,0.291370,-0.227005,0.380245,0.424048,-0.898301,-0.325974,0.294613,0.389120,0.309090,-0.242615,0.399468,0.394087,-0.922796,-0.288178,0.255737,0.372380,0.311090,-0.239773,0.381479,0.378841,-0.900748,-0.397695,0.174620,0.370570,0.302230,-0.234107,0.366899,0.365085,-0.846733,-0.530571,0.039210,0.369230,0.294190,-0.251134,0.398419,0.355349,-0.915418,-0.380506,0.131245,0.356810,0.304250,-0.245747,0.385346,0.342149,-0.866627,-0.498908,-0.006941,0.355120,0.296660,-0.253751,0.415539,0.370687,-0.935670,-0.262475,0.235855,0.358970,0.313040,0.205969,0.358193,0.458479,0.865932,-0.363659,0.343386,0.592010,0.306430,0.181559,0.318647,0.469567,0.805085,-0.509344,0.303985,0.576680,0.294580,0.202685,0.337698,0.441231,0.843449,-0.464648,0.269620,0.593150,0.297050,0.182125,0.343098,0.497627,0.842570,-0.388152,0.373381,0.573400,0.306140,0.227005,0.380245,0.424048,0.898301,-0.325974,0.294613,0.610870,0.309090,0.224156,0.361249,0.408323,0.878464,-0.424048,0.220192,0.612660,0.300120,0.196403,0.320375,0.423542,0.774642,-0.621644,0.116145,0.594630,0.287640,0.218323,0.345112,0.392751,0.818824,-0.568609,0.078810,0.614300,0.291370,0.175047,0.300784,0.449247,0.726979,-0.670543,0.147897,0.577710,0.284830,0.242615,0.399468,0.394087,0.922796,-0.288178,0.255737,0.627610,0.311090,0.239773,0.381479,0.378841,0.900748,-0.397694,0.174620,0.629420,0.302230,0.253751,0.415539,0.370687,0.935671,-0.262473,0.235854,0.641020,0.313040,0.251134,0.398419,0.355350,0.915418,-0.380506,0.131244,0.643190,0.304250,0.234107,0.366899,0.365085,0.846733,-0.530571,0.039209,0.630760,0.294190,0.245747,0.385346,0.342149,0.866628,-0.498907,-0.006942,0.644870,0.296660,-0.167552,0.307057,0.484960,-0.776818,-0.551152,0.304607,0.431150,0.293060,-0.168844,0.327001,0.508578,-0.826217,-0.434679,0.358358,0.433150,0.302940,-0.161976,0.317185,0.512768,-0.816379,-0.464856,0.342687,0.436400,0.300580,-0.159141,0.299177,0.492298,-0.751739,-0.596760,0.280653,0.434970,0.291610,-0.150089,0.283613,0.473489,-0.654503,-0.733639,0.182755,0.434980,0.282330,-0.160218,0.289910,0.464783,-0.685613,-0.707115,0.172983,0.430620,0.283400,-0.183964,0.307741,0.405834,-0.704423,-0.709742,0.007435,0.404180,0.277290,-0.207627,0.332382,0.376813,-0.745364,-0.665769,-0.034402,0.384260,0.282000,-0.162309,0.288925,0.430216,-0.683186,-0.728086,0.056103,0.421420,0.274110,-0.152770,0.277917,0.414263,-0.756677,-0.640682,0.130254,0.420540,0.264500,-0.172866,0.297403,0.390456,-0.746746,-0.661664,0.067604,0.403180,0.267830,-0.196780,0.322106,0.362478,-0.760623,-0.649182,0.003909,0.383040,0.273240,-0.147802,0.277791,0.445778,-0.671528,-0.731000,0.121196,0.430100,0.272820,-0.137779,0.270974,0.455568,-0.658861,-0.730072,0.181373,0.434790,0.272140,-0.129554,0.257252,0.441261,-0.732948,-0.624718,0.269285,0.434210,0.262790,-0.139282,0.265163,0.430513,-0.756215,-0.622891,0.200363,0.429370,0.263280,0.167552,0.307057,0.484960,0.776817,-0.551152,0.304608,0.568840,0.293060,0.168844,0.327001,0.508578,0.826217,-0.434679,0.358357,0.566840,0.302940,0.160218,0.289910,0.464783,0.685612,-0.707116,0.172983,0.569370,0.283400,0.150089,0.283613,0.473489,0.654504,-0.733639,0.182754,0.565010,0.282330,0.159141,0.299177,0.492298,0.751739,-0.596760,0.280652,0.565020,0.291610,0.161976,0.317185,0.512768,0.816379,-0.464856,0.342686,0.563590,0.300580,0.183964,0.307741,0.405834,0.704422,-0.709742,0.007435,0.595810,0.277290,0.207627,0.332382,0.376813,0.745365,-0.665769,-0.034403,0.615730,0.282000,0.172866,0.297403,0.390456,0.746746,-0.661665,0.067603,0.596810,0.267830,0.196780,0.322106,0.362478,0.760623,-0.649182,0.003908,0.616960,0.273240,0.152770,0.277917,0.414263,0.756677,-0.640683,0.130254,0.579450,0.264500,0.162309,0.288925,0.430216,0.683186,-0.728086,0.056104,0.578570,0.274110,0.147802,0.277791,0.445778,0.671528,-0.731000,0.121195,0.569890,0.272820,0.139282,0.265163,0.430513,0.756215,-0.622891,0.200363,0.570620,0.263280,0.129554,0.257252,0.441261,0.732948,-0.624717,0.269285,0.565790,0.262790,0.137779,0.270974,0.455568,0.658862,-0.730072,0.181371,0.565200,0.272140,-0.128141,0.264771,0.464666,-0.646097,-0.729506,0.224455,0.439930,0.271670,-0.114953,0.256777,0.476539,-0.625192,-0.735692,0.260563,0.447210,0.270990,-0.119813,0.250617,0.450791,-0.702345,-0.635495,0.320714,0.439520,0.262500,-0.106830,0.242841,0.461853,-0.670857,-0.646404,0.363473,0.446810,0.261780,-0.096003,0.246990,0.491858,-0.607402,-0.742982,0.281143,0.458360,0.270040,-0.088871,0.232731,0.474823,-0.657729,-0.637094,0.401874,0.457690,0.260290,-0.067414,0.218519,0.487385,-0.618268,-0.623402,0.478660,0.470690,0.257660,-0.076156,0.238094,0.508466,-0.556987,-0.772677,0.304525,0.469470,0.270470,0.128141,0.264771,0.464666,0.646097,-0.729506,0.224454,0.560060,0.271670,0.140079,0.277822,0.481511,0.627880,-0.755712,0.186189,0.560260,0.281360,0.119813,0.250617,0.450791,0.702345,-0.635495,0.320714,0.560470,0.262500,0.106830,0.242841,0.461853,0.670858,-0.646404,0.363472,0.553180,0.261780,0.114953,0.256777,0.476539,0.625192,-0.735692,0.260562,0.552780,0.270990,0.096003,0.246990,0.491858,0.607402,-0.742981,0.281143,0.541630,0.270040,0.067414,0.218519,0.487386,0.618268,-0.623402,0.478659,0.529300,0.257660,0.088871,0.232731,0.474823,0.657729,-0.637095,0.401873,0.542300,0.260290,0.076156,0.238094,0.508466,0.556987,-0.772677,0.304525,0.530520,0.270470,-0.216598,0.347528,0.338732,-0.789681,-0.612381,-0.037337,0.365650,0.279300,-0.225372,0.356020,0.351430,-0.781754,-0.619784,-0.068770,0.367470,0.286410,-0.231666,0.369562,0.318169,-0.827612,-0.558999,-0.050780,0.350510,0.284720,-0.238476,0.376331,0.329727,-0.812294,-0.574691,-0.099543,0.352910,0.290250,0.225372,0.356020,0.351430,0.781753,-0.619784,-0.068770,0.632520,0.286410,0.216598,0.347528,0.338732,0.789680,-0.612381,-0.037338,0.634350,0.279300,0.238476,0.376331,0.329727,0.812294,-0.574691,-0.099542,0.647080,0.290250,0.231667,0.369562,0.318169,0.827611,-0.559001,-0.050781,0.649480,0.284720,-0.065532,0.247503,0.584062,-0.427612,-0.893414,0.137690,0.479730,0.291400,-0.083977,0.260461,0.589343,-0.630707,-0.738759,0.237579,0.474430,0.295350,-0.078935,0.252143,0.568249,-0.500189,-0.851767,0.155897,0.474660,0.289400,-0.070239,0.254880,0.607163,-0.558429,-0.795777,0.234300,0.479540,0.297350,-0.057236,0.242024,0.561265,-0.333600,-0.931249,0.146580,0.480880,0.284800,-0.070000,0.244859,0.547709,-0.423775,-0.889613,0.170305,0.475800,0.282810,-0.048829,0.233856,0.535294,-0.348499,-0.880203,0.322164,0.481420,0.275020,-0.060842,0.234593,0.523680,-0.449549,-0.830774,0.328208,0.476500,0.272740,-0.041434,0.219666,0.515440,-0.410976,-0.743174,0.528007,0.482260,0.263970,-0.052555,0.218831,0.504874,-0.505252,-0.696482,0.509543,0.477700,0.261360,0.083976,0.260461,0.589343,0.631431,-0.737995,0.238028,0.525560,0.295350,0.065532,0.247503,0.584062,0.427613,-0.893414,0.137690,0.520260,0.291400,0.078935,0.252143,0.568249,0.500191,-0.851766,0.155897,0.525340,0.289400,0.070239,0.254880,0.607163,0.558834,-0.795459,0.234412,0.520450,0.297350,0.070000,0.244859,0.547709,0.423777,-0.889612,0.170306,0.524190,0.282810,0.057236,0.242024,0.561265,0.333601,-0.931249,0.146581,0.519110,0.284800,0.048829,0.233856,0.535294,0.348499,-0.880204,0.322165,0.518570,0.275020,0.060842,0.234593,0.523680,0.449549,-0.830774,0.328208,0.523490,0.272740,0.052555,0.218831,0.504874,0.505251,-0.696482,0.509543,0.522290,0.261360,0.041434,0.219666,0.515440,0.410976,-0.743175,0.528006,0.517730,0.263970,-0.069954,0.265121,0.634519,-0.637335,-0.688322,0.346435,0.481570,0.304230,-0.083882,0.271213,0.615684,-0.718545,-0.621776,0.311589,0.476370,0.302530,0.069950,0.265122,0.634517,0.638637,-0.687226,0.346213,0.518420,0.304230,0.083839,0.271226,0.615661,0.719807,-0.620125,0.311966,0.523620,0.302530,-0.040487,0.242109,0.608609,-0.225621,-0.961740,0.155406,0.487780,0.293870,-0.057763,0.250839,0.621184,-0.453238,-0.853639,0.256664,0.483740,0.298780,-0.053113,0.243685,0.596415,-0.325206,-0.935586,0.137547,0.484040,0.292640,-0.045838,0.248713,0.632214,-0.337720,-0.895053,0.291249,0.487240,0.299780,-0.029723,0.237969,0.583154,-0.128581,-0.984020,0.123170,0.490000,0.287180,-0.045020,0.239388,0.571238,-0.241877,-0.961966,0.126953,0.485220,0.285780,-0.057813,0.261734,0.647809,-0.526841,-0.744864,0.409409,0.485310,0.305450,-0.046874,0.259848,0.656786,-0.403102,-0.782349,0.474804,0.488220,0.306180,0.057763,0.250839,0.621184,0.453278,-0.853614,0.256673,0.516250,0.298780,0.040487,0.242109,0.608609,0.225615,-0.961740,0.155415,0.512210,0.293870,0.053113,0.243685,0.596415,0.325207,-0.935586,0.137547,0.515950,0.292640,0.045838,0.248713,0.632214,0.337687,-0.895060,0.291263,0.512750,0.299780,0.045020,0.239388,0.571238,0.241878,-0.961966,0.126953,0.514770,0.285780,0.029723,0.237969,0.583154,0.128582,-0.984020,0.123170,0.509990,0.287180,0.057813,0.261734,0.647809,0.526553,-0.745145,0.409268,0.514680,0.305450,0.046874,0.259848,0.656785,0.402917,-0.782492,0.474726,0.511770,0.306180,-0.021855,0.239375,0.607748,-0.080247,-0.990645,0.110379,0.493140,0.292470,-0.030351,0.242274,0.622241,-0.172162,-0.965962,0.193074,0.490990,0.295700,-0.035257,0.248456,0.641260,-0.237817,-0.910347,0.338691,0.490200,0.300420,-0.022628,0.243293,0.632434,-0.123305,-0.958175,0.258256,0.493500,0.297470,-0.026536,0.249259,0.647474,-0.146018,-0.905483,0.398470,0.492630,0.300820,-0.016460,0.240567,0.621723,-0.036072,-0.986754,0.158162,0.495260,0.295450,-0.036893,0.259186,0.662552,-0.267464,-0.803322,0.532106,0.490710,0.306370,-0.028065,0.259353,0.665889,-0.128509,-0.805187,0.578930,0.492850,0.306290,0.021855,0.239375,0.607748,0.080249,-0.990644,0.110380,0.506850,0.292470,0.030351,0.242274,0.622241,0.172174,-0.965958,0.193085,0.509000,0.295700,0.016459,0.240567,0.621723,0.036076,-0.986754,0.158163,0.504730,0.295450,0.022628,0.243293,0.632434,0.123328,-0.958171,0.258260,0.506500,0.297470,0.035256,0.248457,0.641260,0.237821,-0.910341,0.338705,0.509790,0.300420,0.026536,0.249259,0.647474,0.146076,-0.905472,0.398474,0.507360,0.300820,0.036891,0.259187,0.662551,0.267282,-0.803392,0.532092,0.509290,0.306370,0.028064,0.259353,0.665888,0.128327,-0.805170,0.578994,0.507140,0.306290,-0.016493,0.244595,0.638899,-0.051902,-0.943078,0.328498,0.495230,0.298560,-0.019156,0.250313,0.651565,-0.062734,-0.889809,0.452000,0.494560,0.301050,-0.011201,0.245852,0.642232,0.051183,-0.927633,0.369970,0.496700,0.299100,-0.012376,0.242074,0.630487,0.030705,-0.972936,0.229025,0.496540,0.297420,-0.009845,0.243517,0.635321,0.092506,-0.953189,0.287876,0.497230,0.298210,0.019155,0.250313,0.651565,0.062751,-0.889807,0.452001,0.505430,0.301050,0.016493,0.244595,0.638899,0.051905,-0.943077,0.328500,0.504760,0.298560,0.012376,0.242074,0.630487,-0.030703,-0.972936,0.229028,0.503450,0.297420,0.009845,0.243517,0.635321,-0.092508,-0.953187,0.287882,0.502760,0.298210,0.011201,0.245852,0.642232,-0.051187,-0.927631,0.369974,0.503290,0.299100,-0.031157,0.220009,0.522792,-0.334480,-0.772016,0.540476,0.487100,0.265680,-0.037365,0.233087,0.543682,-0.267949,-0.913033,0.307529,0.486050,0.276290,-0.025184,0.232177,0.550060,-0.176371,-0.934668,0.308689,0.490650,0.277140,-0.020788,0.219918,0.527943,-0.249679,-0.791516,0.557819,0.491830,0.266760,0.031157,0.220009,0.522792,0.334481,-0.772016,0.540475,0.512890,0.265680,0.037365,0.233087,0.543682,0.267949,-0.913033,0.307529,0.513940,0.276290,0.020788,0.219918,0.527943,0.249680,-0.791517,0.557818,0.508160,0.266760,0.025184,0.232177,0.550060,0.176373,-0.934668,0.308688,0.509340,0.277140,-0.011067,0.238455,0.600932,-0.017416,-0.995073,0.097602,0.496380,0.291530,-0.013184,0.236533,0.579817,-0.043406,-0.989436,0.138323,0.495390,0.286830,-0.008613,0.240026,0.615909,0.023242,-0.990945,0.132245,0.497510,0.294290,-0.000000,0.240036,0.614204,-0.000003,-0.990298,0.138960,0.500000,0.293950,0.0,0.238267,0.599302,-0.000002,-0.994583,0.103944,0.500000,0.291690,0.0,0.236208,0.579539,-0.000001,-0.989108,0.147191,0.500000,0.287450,0.0,0.231150,0.554960,-0.000002,-0.944005,0.329932,0.500000,0.278680,-0.012459,0.231413,0.553696,-0.086234,-0.942721,0.322244,0.495330,0.278140,0.0,0.219477,0.532247,-0.000002,-0.810169,0.586196,0.500000,0.267470,-0.010343,0.219648,0.531132,-0.138930,-0.804766,0.577105,0.496060,0.267340,0.011067,0.238455,0.600932,0.017416,-0.995073,0.097601,0.503610,0.291530,0.013184,0.236533,0.579817,0.043404,-0.989436,0.138323,0.504600,0.286830,0.008613,0.240026,0.615909,-0.023242,-0.990944,0.132246,0.502480,0.294290,0.012459,0.231413,0.553696,0.086232,-0.942721,0.322243,0.504660,0.278140,0.010343,0.219648,0.531132,0.138930,-0.804766,0.577105,0.503930,0.267340,-0.000000,0.241923,0.625019,-0.000002,-0.977854,0.209286,0.500000,0.295910,-0.006664,0.241809,0.626225,0.075684,-0.976974,0.199485,0.498180,0.296400,-0.005676,0.243878,0.634333,0.109187,-0.953505,0.280901,0.498440,0.297970,-0.000000,0.244323,0.633855,0.000003,-0.958748,0.284258,0.500000,0.297610,0.006664,0.241809,0.626225,-0.075685,-0.976973,0.199487,0.501810,0.296400,0.005676,0.243878,0.634333,-0.109187,-0.953504,0.280906,0.501550,0.297970,-0.000000,0.247423,0.643282,0.000006,-0.928873,0.370397,0.500000,0.299040,-0.005769,0.246876,0.643153,0.097853,-0.922449,0.373513,0.498310,0.299140,-0.283327,0.490149,0.273689,-0.478742,-0.709659,0.516905,0.965310,0.597110,-0.277810,0.505315,0.288494,-0.854894,-0.281894,0.435536,0.977760,0.601620,-0.294967,0.623642,0.265315,-0.968614,-0.176887,-0.174638,0.963260,0.660480,-0.285582,0.607945,0.276485,-0.940275,-0.319927,-0.116318,0.970180,0.653890,-0.295981,0.629691,0.271938,-0.992853,-0.118111,0.017106,0.964650,0.664340,-0.286571,0.612365,0.284841,-0.966593,-0.155897,0.203453,0.972980,0.658150,-0.277064,0.581103,0.249144,-0.560533,-0.402392,0.723798,0.956970,0.641110,0.283324,0.490149,0.273688,0.478936,-0.709507,0.516933,0.034340,0.595770,0.277807,0.505314,0.288493,0.854996,-0.281454,0.435622,0.021870,0.600290,0.294941,0.623640,0.265309,0.969073,-0.176239,-0.172733,0.036410,0.659170,0.285556,0.607943,0.276479,0.940831,-0.318979,-0.114409,0.029490,0.652610,0.295918,0.629688,0.271923,0.992758,-0.118491,0.019806,0.035030,0.663030,0.286505,0.612362,0.284824,0.966450,-0.153833,0.205692,0.026710,0.656850,0.296010,0.638526,0.281866,0.948806,-0.169447,0.266562,0.034120,0.670420,0.285920,0.649698,0.300891,0.904094,-0.094529,0.416748,0.026520,0.681930,0.286354,0.630637,0.294007,0.921994,-0.161678,0.351833,0.025630,0.669890,0.296599,0.652525,0.287173,0.835076,-0.162137,0.525699,0.035300,0.679830,-0.286502,0.630646,0.294039,-0.922200,-0.160659,0.351761,0.974040,0.671200,-0.285978,0.649702,0.300900,-0.904636,-0.092815,0.415956,0.973140,0.683260,-0.296048,0.638529,0.281873,-0.949790,-0.167369,0.264361,0.965540,0.671740,-0.296638,0.652528,0.287179,-0.836391,-0.159921,0.524285,0.964350,0.681160,0.292039,0.590337,0.224389,0.961669,0.269523,-0.050500,0.055500,0.644230,0.291992,0.600563,0.240195,0.939147,0.274490,-0.206538,0.048800,0.648500,0.289870,0.595549,0.223371,0.923501,0.368905,-0.105142,0.055820,0.646210,0.288093,0.607127,0.237290,0.884496,0.405565,-0.230617,0.050300,0.651000,-0.313093,0.701587,0.261976,-0.494121,0.587665,0.640699,0.939380,0.698980,-0.303292,0.684873,0.279446,-0.625929,0.325121,0.708879,0.951580,0.697240,-0.286691,0.671480,0.300021,-0.894012,0.016949,0.447723,0.967150,0.694390,-0.298932,0.668729,0.286859,-0.717827,0.035673,0.695307,0.960020,0.690460,0.313118,0.701589,0.261986,0.494583,0.587418,0.640568,0.060270,0.697670,0.303307,0.684874,0.279453,0.626069,0.324587,0.709000,0.048070,0.695920,0.286674,0.671481,0.300032,0.892226,0.016562,0.451285,0.032500,0.693060,0.298945,0.668730,0.286868,0.717400,0.034172,0.695823,0.039630,0.689140,-0.170361,0.359772,0.539454,-0.857400,-0.343935,0.382849,0.435950,0.318200,-0.165150,0.346186,0.538493,-0.844154,-0.381221,0.376928,0.438010,0.313600,-0.159461,0.333797,0.538630,-0.831087,-0.410530,0.375178,0.440700,0.309520,0.170361,0.359772,0.539454,0.857329,-0.343955,0.382990,0.564040,0.318200,0.165150,0.346186,0.538493,0.844085,-0.381210,0.377092,0.561980,0.313600,0.159461,0.333797,0.538630,0.831069,-0.410456,0.375300,0.559290,0.309520,-0.265615,0.433457,0.329517,-0.968638,-0.248070,0.014188,0.338740,0.312440,-0.254450,0.402958,0.323556,-0.899823,-0.428455,-0.082123,0.342860,0.299860,-0.259444,0.414341,0.339172,-0.941064,-0.331614,0.066560,0.346580,0.307240,-0.266667,0.446432,0.347889,-0.971028,-0.166503,0.171409,0.344220,0.320200,-0.261494,0.429596,0.356167,-0.952236,-0.224141,0.207381,0.350410,0.315620,-0.247289,0.394032,0.310385,-0.859721,-0.487769,-0.151531,0.339730,0.293450,-0.241074,0.387366,0.298825,-0.889498,-0.453856,-0.052995,0.336870,0.288040,0.265615,0.433457,0.329517,0.968638,-0.248070,0.014187,0.661260,0.312440,0.254450,0.402958,0.323556,0.899824,-0.428455,-0.082123,0.657130,0.299860,0.259444,0.414341,0.339172,0.941064,-0.331615,0.066559,0.653410,0.307240,0.261494,0.429596,0.356167,0.952274,-0.224026,0.207332,0.649580,0.315620,0.266667,0.446432,0.347889,0.971026,-0.166418,0.171506,0.655770,0.320200,0.247289,0.394032,0.310385,0.859722,-0.487768,-0.151530,0.660260,0.293450,0.241075,0.387366,0.298826,0.889497,-0.453857,-0.052996,0.663120,0.288040,-0.268859,0.453706,0.307191,-0.969588,-0.200621,-0.140178,0.324610,0.316550,-0.270327,0.457285,0.325944,-0.985280,-0.170592,0.011060,0.332310,0.321390,-0.272778,0.477913,0.309630,-0.991707,-0.110918,-0.064912,0.320800,0.326750,-0.273355,0.479939,0.326017,-0.995189,-0.087624,0.043838,0.327970,0.331220,-0.270482,0.467040,0.342435,-0.981954,-0.116265,0.149163,0.337910,0.328420,-0.272614,0.482002,0.338378,-0.988830,-0.072420,0.130269,0.333320,0.333750,-0.265884,0.459751,0.289500,-0.950986,-0.224492,-0.212671,0.315310,0.316750,-0.263437,0.466877,0.273251,-0.958777,-0.271154,-0.084978,0.305920,0.318140,-0.270912,0.480684,0.294962,-0.979561,-0.180744,-0.088273,0.313100,0.326690,-0.269630,0.484560,0.279227,-0.873458,-0.471959,0.119689,0.304410,0.327840,0.268859,0.453706,0.307191,0.969594,-0.200601,-0.140169,0.675380,0.316550,0.270327,0.457285,0.325944,0.985289,-0.170539,0.011067,0.667680,0.321390,0.270482,0.467040,0.342435,0.981927,-0.116282,0.149326,0.662080,0.328420,0.273353,0.479939,0.326016,0.995248,-0.087148,0.043441,0.672020,0.331220,0.272610,0.482002,0.338377,0.988892,-0.072192,0.129924,0.666670,0.333750,0.272777,0.477913,0.309629,0.991769,-0.110392,-0.064874,0.679190,0.326750,0.265884,0.459751,0.289500,0.950989,-0.224482,-0.212667,0.684680,0.316750,0.270911,0.480684,0.294962,0.979657,-0.180412,-0.087878,0.686890,0.326690,0.263437,0.466877,0.273251,0.958779,-0.271151,-0.084972,0.694070,0.318140,0.269630,0.484560,0.279226,0.873480,-0.471865,0.119902,0.695580,0.327840,-0.275393,0.514472,0.299513,-0.987967,-0.132131,0.080388,0.309750,0.340780,-0.277810,0.505315,0.288494,-0.854894,-0.281894,0.435536,0.305390,0.336640,-0.275943,0.524658,0.312343,-0.995170,-0.075615,0.062595,0.314550,0.345800,-0.271500,0.514168,0.351527,-0.987173,-0.045315,0.153091,0.334290,0.347360,-0.274279,0.521506,0.333171,-0.995362,-0.036035,0.089200,0.324840,0.347420,-0.267849,0.498863,0.365693,-0.974490,-0.077431,0.210651,0.342740,0.343050,-0.263453,0.481185,0.377404,-0.964899,-0.110079,0.238436,0.350540,0.337860,-0.258567,0.467488,0.389840,-0.955539,-0.146520,0.255885,0.357820,0.335000,-0.251850,0.455255,0.406522,-0.947509,-0.182553,0.262489,0.366660,0.333130,0.277807,0.505314,0.288493,0.854996,-0.281454,0.435622,0.694600,0.336640,0.275362,0.514471,0.299506,0.987920,-0.131534,0.081936,0.690240,0.340780,0.275887,0.524659,0.312329,0.995192,-0.075085,0.062896,0.685440,0.345800,0.274245,0.521505,0.333164,0.995422,-0.035552,0.088716,0.675160,0.347420,0.271504,0.514168,0.351528,0.987039,-0.044735,0.154116,0.665700,0.347360,0.267844,0.498863,0.365692,0.974327,-0.076541,0.211725,0.657250,0.343050,0.263434,0.481186,0.377399,0.965012,-0.109235,0.238368,0.649450,0.337860,0.258566,0.467488,0.389840,0.955642,-0.146163,0.255706,0.642170,0.335000,0.251850,0.455255,0.406522,0.947528,-0.182471,0.262480,0.633330,0.333130,-0.292059,0.590338,0.224395,-0.961706,0.269341,-0.050756,0.944160,0.645530,-0.292017,0.600564,0.240202,-0.939348,0.273944,-0.206350,0.950860,0.649810,-0.289876,0.595550,0.223372,-0.923088,0.369623,-0.106241,0.943840,0.647510,-0.288121,0.607129,0.237298,-0.884090,0.406054,-0.231310,0.949370,0.652310,0.284107,0.614257,0.233230,0.949252,0.314469,0.005482,0.052920,0.653910,0.289643,0.596829,0.218715,0.945148,0.299360,0.130683,0.057910,0.646560,0.292740,0.598438,0.210123,0.789656,0.152450,0.594308,0.059720,0.646780,0.283022,0.621853,0.227492,0.929032,0.065777,0.364106,0.055220,0.655960,-0.284119,0.614258,0.233233,-0.949111,0.314903,0.004957,0.946740,0.655210,-0.289647,0.596829,0.218716,-0.945025,0.300012,0.130077,0.941750,0.647860,-0.283027,0.621853,0.227493,-0.929034,0.065940,0.364071,0.944450,0.657270,-0.292749,0.598438,0.210126,-0.789507,0.152487,0.594496,0.939940,0.648080,0.346461,0.640125,0.165358,0.992497,-0.051971,0.110672,0.096320,0.659790,0.341768,0.675361,0.179589,0.929610,-0.037348,0.366647,0.092030,0.672160,0.341374,0.637032,0.172381,0.937730,-0.087293,0.336218,0.093210,0.659100,0.345974,0.681910,0.170284,0.994926,0.076561,0.065276,0.095140,0.672920,0.344364,0.639959,0.158293,0.954332,-0.004548,-0.298715,0.097930,0.659350,-0.256587,0.520228,0.436042,-0.970222,-0.177849,0.164433,0.368100,0.357660,-0.256134,0.507728,0.424300,-0.968723,-0.174825,0.176102,0.365410,0.352300,-0.256045,0.495849,0.414028,-0.964950,-0.148559,0.216339,0.363280,0.347450,-0.261572,0.512609,0.398360,-0.972975,-0.115220,0.200109,0.354700,0.351040,-0.261813,0.526507,0.408041,-0.978608,-0.135232,0.155043,0.356640,0.356580,-0.261977,0.540217,0.419249,-0.980944,-0.141985,0.132629,0.359250,0.362320,0.256532,0.520221,0.436033,0.969543,-0.177426,0.168838,0.631890,0.357660,0.256119,0.507728,0.424297,0.968212,-0.176346,0.177393,0.634580,0.352300,0.261895,0.526506,0.408061,0.979058,-0.136352,0.151177,0.643350,0.356580,0.262199,0.540216,0.419303,0.980942,-0.139696,0.135044,0.640740,0.362320,0.261543,0.512609,0.398353,0.973519,-0.115222,0.197447,0.645290,0.351040,0.256035,0.495849,0.414026,0.964981,-0.149018,0.215884,0.636710,0.347450,-0.256643,0.533996,0.450077,-0.970565,-0.174564,0.165924,0.372280,0.364530,-0.262404,0.553734,0.432902,-0.981240,-0.140447,0.132069,0.363240,0.368880,0.256547,0.533984,0.450057,0.970461,-0.176553,0.164424,0.627710,0.364530,0.262165,0.553701,0.432849,0.981369,-0.138737,0.132919,0.636750,0.368880,-0.345974,0.681910,0.170284,-0.994926,0.076561,0.065276,0.904510,0.674230,-0.346461,0.640125,0.165358,-0.992498,-0.051968,0.110668,0.903320,0.661090,-0.341768,0.675361,0.179589,-0.929615,-0.037338,0.366636,0.907610,0.673460,-0.341374,0.637032,0.172381,-0.937752,-0.087270,0.336163,0.906440,0.660400,-0.344364,0.639959,0.158293,-0.954333,-0.004548,-0.298710,0.901710,0.660650,0.328618,0.644856,0.207034,0.794591,-0.045991,0.605401,0.075700,0.663680,0.336923,0.615890,0.196727,0.889139,-0.022838,0.457067,0.080230,0.652560,0.339550,0.627650,0.183527,0.979984,-0.055660,0.191137,0.087380,0.656250,0.338068,0.661987,0.191947,0.923849,0.002298,0.382751,0.084790,0.668500,-0.328628,0.644857,0.207037,-0.794788,-0.045900,0.605149,0.923960,0.664990,-0.339552,0.627650,0.183527,-0.980028,-0.055571,0.190938,0.912270,0.657550,-0.336929,0.615891,0.196729,-0.889235,-0.022692,0.456887,0.919430,0.653870,-0.338068,0.661987,0.191947,-0.923903,0.002398,0.382618,0.914860,0.669800,0.287055,0.630864,0.218656,0.473476,-0.432469,0.767327,0.057760,0.657030,0.303990,0.598859,0.204336,0.156340,-0.063305,0.985672,0.063360,0.646710,0.303323,0.628969,0.219110,0.156248,-0.503464,0.849771,0.062070,0.658330,0.317856,0.600314,0.209782,0.047148,-0.103210,0.993541,0.068350,0.647300,-0.268520,0.574250,0.403194,-0.987548,-0.114255,0.108142,0.347760,0.375000,-0.272912,0.586275,0.372770,-0.991022,-0.085499,0.102789,0.333100,0.378610,-0.267874,0.557275,0.391897,-0.985568,-0.105399,0.132468,0.345120,0.368230,-0.274578,0.618321,0.383795,-0.991634,-0.095025,0.087357,0.334490,0.391700,-0.267401,0.538610,0.382736,-0.981171,-0.087310,0.172281,0.343780,0.360340,-0.271886,0.562385,0.364500,-0.989763,-0.063540,0.127799,0.332350,0.368720,0.272753,0.586269,0.372731,0.990869,-0.087395,0.102673,0.666890,0.378610,0.268304,0.574247,0.403147,0.987678,-0.114915,0.106236,0.652230,0.375000,0.267769,0.557270,0.391874,0.986149,-0.105187,0.128238,0.654870,0.368230,0.274771,0.618324,0.383868,0.991610,-0.099123,0.082974,0.665500,0.391700,0.271798,0.562382,0.364482,0.989512,-0.062405,0.130275,0.667640,0.368720,0.267251,0.538607,0.382707,0.981463,-0.086224,0.171159,0.656210,0.360340,-0.268390,0.585857,0.417337,-0.987458,-0.115510,0.107630,0.352130,0.380330,-0.273785,0.625853,0.404964,-0.990808,-0.097101,0.094186,0.342350,0.395500,-0.267847,0.595002,0.431608,-0.985690,-0.105897,0.131152,0.357070,0.384920,-0.272397,0.629656,0.420679,-0.987528,-0.085917,0.131938,0.348310,0.397690,0.268436,0.585842,0.417365,0.986888,-0.116769,0.111433,0.647860,0.380330,0.267653,0.594992,0.431572,0.985168,-0.110603,0.131188,0.642920,0.384920,0.273927,0.625852,0.405016,0.990119,-0.102132,0.096087,0.657640,0.395500,0.272465,0.629654,0.420715,0.987142,-0.093625,0.129557,0.651680,0.397690,-0.266696,0.604450,0.445205,-0.983640,-0.088914,0.156676,0.361450,0.389510,-0.270557,0.634477,0.435830,-0.983755,-0.070248,0.165198,0.354060,0.400540,0.266748,0.604433,0.445266,0.982892,-0.096831,0.156678,0.638540,0.389510,0.270939,0.634481,0.435981,0.983608,-0.079702,0.161753,0.645930,0.400540,-0.275909,0.665624,0.417632,-0.985922,-0.068057,0.152729,0.344190,0.411140,-0.272713,0.666190,0.435004,-0.981724,-0.057059,0.181554,0.351750,0.412620,-0.277058,0.702341,0.421841,-0.981570,-0.041629,0.186515,0.343720,0.425550,-0.273040,0.699553,0.441603,-0.979073,-0.027470,0.201645,0.352830,0.425850,0.276320,0.665614,0.417759,0.986146,-0.069720,0.150515,0.655800,0.411140,0.273217,0.666191,0.435191,0.982180,-0.056356,0.179295,0.648240,0.412620,0.273435,0.699564,0.441733,0.979471,-0.020092,0.200583,0.647160,0.425850,0.277271,0.702350,0.421928,0.981811,-0.032935,0.186983,0.656270,0.425550,-0.280589,0.705146,0.402352,-0.987468,-0.057353,0.147030,0.335120,0.425390,-0.279611,0.666764,0.380758,-0.992201,-0.091663,0.084471,0.328850,0.409350,-0.278023,0.666409,0.400324,-0.990617,-0.082360,0.109067,0.336930,0.410490,-0.283366,0.707406,0.381771,-0.991721,-0.073550,0.105260,0.326200,0.424960,0.280934,0.705150,0.402484,0.987284,-0.053232,0.149790,0.664870,0.425390,0.279768,0.666775,0.380835,0.992654,-0.093207,0.077141,0.671140,0.409350,0.283566,0.707420,0.381881,0.991805,-0.075045,0.103398,0.673790,0.424960,0.278483,0.666403,0.400472,0.990655,-0.084108,0.107366,0.663060,0.410490,-0.275702,0.595141,0.349058,-0.991886,-0.079747,0.099007,0.322050,0.378460,-0.277861,0.624693,0.354601,-0.992165,-0.086645,0.090012,0.321690,0.389770,-0.274461,0.571528,0.342835,-0.992827,-0.054572,0.106381,0.321810,0.369050,-0.278201,0.592585,0.325106,-0.987611,-0.069905,0.140492,0.312010,0.374020,-0.277179,0.572150,0.321638,-0.987057,-0.061243,0.148215,0.312470,0.366160,-0.283167,0.665506,0.333302,-0.994996,-0.076466,0.064307,0.308670,0.403820,-0.281387,0.666134,0.357066,-0.993118,-0.088629,0.076560,0.318840,0.406410,-0.286179,0.707384,0.334943,-0.995775,-0.079663,0.045681,0.305880,0.421600,-0.285209,0.708669,0.358781,-0.994063,-0.081875,0.071661,0.316090,0.423870,0.275600,0.595140,0.349036,0.991920,-0.080042,0.098426,0.677940,0.378460,0.277812,0.624689,0.354609,0.992406,-0.087940,0.086006,0.678300,0.389770,0.278084,0.592580,0.325078,0.987491,-0.069347,0.141609,0.687980,0.374020,0.274458,0.571529,0.342837,0.992859,-0.052864,0.106945,0.678180,0.369050,0.277130,0.572148,0.321626,0.987095,-0.060217,0.148383,0.687530,0.366160,0.282980,0.665493,0.333266,0.994903,-0.079398,0.062166,0.691320,0.403820,0.281325,0.666134,0.357066,0.993163,-0.091411,0.072608,0.681150,0.406410,0.285453,0.708676,0.358887,0.993767,-0.086704,0.070070,0.683900,0.423870,0.286493,0.707391,0.335055,0.995691,-0.083943,0.039410,0.694110,0.421600,0.317025,0.632289,0.215448,0.531352,-0.216097,0.819126,0.068060,0.660350,0.329038,0.606046,0.205726,0.574076,-0.020900,0.818535,0.073800,0.649450,-0.287061,0.630865,0.218657,-0.473276,-0.432491,0.767438,0.941900,0.658340,-0.304012,0.598860,0.204341,-0.156115,-0.063376,0.985704,0.936300,0.648010,-0.303342,0.628970,0.219115,-0.156362,-0.503452,0.849757,0.937590,0.659640,-0.317892,0.600315,0.209792,-0.047568,-0.103112,0.993532,0.931310,0.648610,-0.317034,0.632289,0.215451,-0.531654,-0.216048,0.818943,0.931600,0.661650,-0.329047,0.606046,0.205729,-0.574432,-0.020754,0.818289,0.925860,0.650760,0.265678,0.574148,0.275884,0.364664,0.277926,-0.888694,0.030130,0.637900,0.267266,0.557806,0.270065,0.705472,0.430159,-0.563270,0.032120,0.632290,0.273781,0.574206,0.278360,0.334932,0.108183,-0.936011,0.026890,0.638060,0.271010,0.554129,0.273338,0.677453,0.352210,-0.645760,0.030500,0.630410,-0.102519,0.402936,0.652240,-0.527531,-0.652352,0.544196,0.468500,0.340900,-0.098707,0.403898,0.656711,-0.493316,-0.699546,0.516986,0.469930,0.341270,-0.106975,0.402309,0.647396,-0.552888,-0.588160,0.590240,0.466870,0.340700,-0.112347,0.401677,0.642752,-0.475381,-0.534512,0.698792,0.464970,0.340400,0.102441,0.402956,0.652276,0.536153,-0.646414,0.542853,0.531490,0.340900,0.106754,0.402400,0.647331,0.561248,-0.584760,0.585710,0.533120,0.340700,0.112155,0.401747,0.642689,0.470559,-0.534589,0.701989,0.535020,0.340400,-0.242383,0.440706,0.429801,-0.934883,-0.223023,0.276140,0.379040,0.331100,-0.229347,0.423493,0.457632,-0.903606,-0.275044,0.328400,0.393390,0.328850,-0.211229,0.405119,0.487127,-0.871215,-0.305248,0.384459,0.408540,0.326140,-0.192901,0.393235,0.518115,-0.862337,-0.303501,0.405292,0.422520,0.325800,0.242383,0.440706,0.429801,0.934873,-0.223002,0.276192,0.620960,0.331100,0.229347,0.423493,0.457632,0.903609,-0.274986,0.328441,0.606600,0.328850,0.211229,0.405119,0.487127,0.871241,-0.305192,0.384444,0.591450,0.326140,0.192901,0.393235,0.518115,0.862320,-0.303481,0.405344,0.577470,0.325800,-0.267391,0.478705,0.261884,-0.831695,-0.547226,0.093956,0.297630,0.322340,-0.263866,0.468609,0.256332,-0.948037,-0.304885,0.090943,0.297660,0.316460,-0.261640,0.453691,0.247603,-0.964281,-0.201595,0.171816,0.297110,0.308270,-0.267585,0.471454,0.237908,-0.948076,-0.299652,0.106582,0.288550,0.315070,-0.267027,0.460104,0.228050,-0.976664,-0.170340,0.130810,0.286440,0.308260,-0.269645,0.478536,0.245305,-0.826749,-0.561764,0.030134,0.290090,0.319910,-0.255677,0.426940,0.252767,-0.958443,-0.117805,0.259823,0.305390,0.298700,-0.251147,0.412157,0.262185,-0.955818,-0.122998,0.266991,0.312880,0.293440,-0.245911,0.395594,0.272824,-0.951643,-0.194830,0.237523,0.321660,0.287230,-0.253811,0.392100,0.252349,-0.941060,-0.107275,0.320778,0.312020,0.284270,-0.246983,0.378980,0.264445,-0.913300,-0.158532,0.375166,0.320530,0.279910,-0.258097,0.402471,0.241055,-0.968189,-0.092815,0.232369,0.304800,0.287430,-0.261792,0.408538,0.225168,-0.984514,-0.106224,0.139459,0.295950,0.286800,-0.266438,0.442614,0.217343,-0.987616,-0.115691,0.105973,0.284860,0.299500,-0.264380,0.415842,0.201648,-0.992169,-0.114506,0.049882,0.282840,0.285670,-0.261264,0.435143,0.238420,-0.970309,-0.120755,0.209569,0.296780,0.299640,0.267391,0.478705,0.261884,0.831694,-0.547226,0.093961,0.702360,0.322340,0.263866,0.468609,0.256332,0.948037,-0.304885,0.090946,0.702330,0.316460,0.269645,0.478536,0.245305,0.826750,-0.561763,0.030134,0.709900,0.319910,0.267585,0.471454,0.237908,0.948076,-0.299652,0.106582,0.711440,0.315070,0.261640,0.453691,0.247603,0.964280,-0.201600,0.171818,0.702880,0.308270,0.267027,0.460104,0.228050,0.976664,-0.170341,0.130812,0.713550,0.308260,0.255676,0.426940,0.252767,0.958444,-0.117806,0.259821,0.694600,0.298700,0.251146,0.412157,0.262185,0.955820,-0.122995,0.266983,0.687110,0.293440,0.258097,0.402471,0.241055,0.968189,-0.092812,0.232372,0.695190,0.287430,0.253811,0.392100,0.252349,0.941061,-0.107271,0.320776,0.687970,0.284270,0.245911,0.395594,0.272824,0.951644,-0.194829,0.237518,0.678330,0.287230,0.246983,0.378980,0.264445,0.913301,-0.158531,0.375164,0.679460,0.279910,0.261792,0.408538,0.225168,0.984513,-0.106224,0.139465,0.704040,0.286800,0.266438,0.442614,0.217343,0.987616,-0.115693,0.105975,0.715130,0.299500,0.261264,0.435143,0.238420,0.970307,-0.120759,0.209575,0.703220,0.299640,0.264380,0.415842,0.201648,0.992169,-0.114507,0.049884,0.717150,0.285670,-0.236484,0.365299,0.281180,-0.897409,-0.238515,0.371170,0.333150,0.276980,-0.238080,0.379961,0.288783,-0.925023,-0.333450,0.182052,0.333850,0.283550,-0.227124,0.362212,0.308141,-0.879673,-0.454758,0.139176,0.348280,0.279790,-0.223538,0.349437,0.300413,-0.878993,-0.330667,0.343555,0.347960,0.273560,0.236484,0.365299,0.281180,0.897409,-0.238516,0.371170,0.666840,0.276980,0.238080,0.379961,0.288783,0.925023,-0.333453,0.182049,0.666140,0.283550,0.227124,0.362213,0.308141,0.879672,-0.454761,0.139175,0.651710,0.279790,0.223538,0.349437,0.300413,0.878993,-0.330667,0.343555,0.652030,0.273560,-0.207578,0.329111,0.319527,-0.860616,-0.402681,0.311749,0.363260,0.267870,-0.190340,0.313115,0.351357,-0.823577,-0.546789,0.150806,0.381980,0.266830,-0.210978,0.339398,0.328225,-0.843532,-0.522021,0.126282,0.364110,0.273500,-0.187706,0.304078,0.341530,-0.853354,-0.431603,0.292412,0.380400,0.261570,0.207578,0.329111,0.319527,0.860616,-0.402681,0.311750,0.636730,0.267870,0.190340,0.313115,0.351357,0.823576,-0.546791,0.150805,0.618010,0.266830,0.187706,0.304078,0.341530,0.853354,-0.431604,0.292413,0.619590,0.261570,0.210978,0.339398,0.328225,0.843532,-0.522022,0.126282,0.635880,0.273500,-0.244243,0.349097,0.257755,-0.900540,-0.212445,0.379333,0.323990,0.266060,-0.232224,0.338723,0.277001,-0.866880,-0.235525,0.439371,0.337420,0.265320,-0.218314,0.327238,0.296304,-0.846374,-0.273915,0.456752,0.351420,0.264070,-0.221368,0.302841,0.277736,-0.852058,-0.257205,0.455899,0.346800,0.249760,-0.206650,0.295628,0.298747,-0.825850,-0.254431,0.503226,0.360140,0.251060,-0.235000,0.310163,0.254304,-0.891988,-0.262053,0.368356,0.332100,0.248000,-0.203633,0.313110,0.313609,-0.840716,-0.324084,0.433780,0.363530,0.261160,-0.186032,0.293062,0.332510,-0.851601,-0.357113,0.383726,0.377550,0.256050,-0.193428,0.288376,0.315620,-0.824013,-0.271451,0.497310,0.369400,0.251430,-0.183019,0.281020,0.328650,-0.841750,-0.304605,0.445727,0.378980,0.249820,0.244243,0.349097,0.257755,0.900540,-0.212445,0.379334,0.676000,0.266060,0.232224,0.338723,0.277001,0.866880,-0.235525,0.439370,0.662570,0.265320,0.235000,0.310163,0.254304,0.891987,-0.262054,0.368357,0.667890,0.248000,0.221368,0.302841,0.277736,0.852058,-0.257205,0.455898,0.653190,0.249760,0.218314,0.327238,0.296304,0.846374,-0.273915,0.456752,0.648570,0.264070,0.206651,0.295628,0.298747,0.825850,-0.254431,0.503226,0.639850,0.251060,0.203633,0.313110,0.313609,0.840716,-0.324084,0.433781,0.636460,0.261160,0.193428,0.288376,0.315620,0.824012,-0.271451,0.497311,0.630590,0.251430,0.186032,0.293062,0.332510,0.851600,-0.357112,0.383729,0.622440,0.256050,0.183019,0.281020,0.328650,0.841750,-0.304604,0.445728,0.621010,0.249820,-0.256645,0.365881,0.224710,-0.977517,-0.152325,0.145798,0.304480,0.267740,-0.252531,0.358563,0.241006,-0.945750,-0.186177,0.266261,0.313700,0.267410,-0.244774,0.316999,0.230685,-0.934293,-0.245490,0.258518,0.318900,0.246110,-0.250689,0.322221,0.207473,-0.967875,-0.194089,0.159833,0.306370,0.243540,0.256645,0.365881,0.224710,0.977517,-0.152324,0.145798,0.695510,0.267740,0.252531,0.358563,0.241006,0.945750,-0.186175,0.266261,0.686290,0.267410,0.250689,0.322221,0.207473,0.967876,-0.194089,0.159832,0.693620,0.243540,0.244774,0.316999,0.230685,0.934292,-0.245491,0.258518,0.681090,0.246110,-0.253584,0.325896,0.183424,-0.987000,-0.129656,0.094976,0.293740,0.239770,-0.259702,0.376825,0.178734,-0.993296,-0.112968,0.024514,0.279560,0.263080,-0.255717,0.331358,0.154778,-0.995328,-0.075415,0.060284,0.277580,0.235980,-0.258366,0.370525,0.205075,-0.989297,-0.129347,0.067531,0.294130,0.265490,0.253584,0.325896,0.183424,0.987000,-0.129656,0.094975,0.706250,0.239770,0.259702,0.376825,0.178734,0.993296,-0.112968,0.024514,0.720430,0.263080,0.258366,0.370525,0.205075,0.989297,-0.129347,0.067533,0.705860,0.265490,0.255717,0.331358,0.154778,0.995328,-0.075415,0.060284,0.722410,0.235980,-0.167433,0.287752,0.378723,-0.823019,-0.529679,0.205136,0.402180,0.261710,-0.148299,0.267429,0.402074,-0.832806,-0.489221,0.259030,0.419340,0.258710,-0.147279,0.255614,0.390844,-0.863971,-0.366505,0.345295,0.417720,0.252790,-0.165521,0.277852,0.367730,-0.859895,-0.408054,0.306714,0.400440,0.256240,-0.166961,0.257772,0.344188,-0.859285,-0.281380,0.427147,0.392390,0.241390,-0.149367,0.231225,0.364743,-0.873913,-0.257664,0.412172,0.411470,0.231690,-0.165154,0.266744,0.356108,-0.869641,-0.342835,0.355231,0.397250,0.248570,-0.147573,0.242482,0.378560,-0.875575,-0.313006,0.367963,0.415570,0.242410,0.167433,0.287751,0.378723,0.823018,-0.529681,0.205133,0.597810,0.261710,0.165521,0.277852,0.367730,0.859895,-0.408053,0.306714,0.599550,0.256240,0.147279,0.255614,0.390844,0.863972,-0.366503,0.345295,0.582270,0.252790,0.148299,0.267429,0.402074,0.832807,-0.489222,0.259028,0.580650,0.258710,0.165154,0.266744,0.356108,0.869641,-0.342832,0.355233,0.602740,0.248570,0.149367,0.231225,0.364743,0.873913,-0.257664,0.412172,0.588520,0.231690,0.166961,0.257772,0.344188,0.859284,-0.281379,0.427148,0.607600,0.241390,0.147573,0.242482,0.378560,0.875575,-0.313003,0.367963,0.584420,0.242410,-0.102811,0.229688,0.449474,-0.706075,-0.527044,0.472952,0.445170,0.254850,-0.114894,0.237419,0.439180,-0.738246,-0.521058,0.428358,0.438270,0.255720,-0.112374,0.221914,0.428603,-0.752272,-0.412067,0.514090,0.436770,0.248510,-0.100987,0.214115,0.438278,-0.720704,-0.422253,0.549807,0.443270,0.247490,-0.122676,0.229732,0.419214,-0.792742,-0.391616,0.467115,0.431300,0.249780,-0.124741,0.244588,0.429732,-0.778850,-0.500863,0.377531,0.432890,0.256470,-0.113431,0.184238,0.403541,-0.769292,-0.303846,0.562021,0.433470,0.225170,-0.100150,0.194802,0.426338,-0.719941,-0.366676,0.589266,0.442250,0.236700,-0.111447,0.203438,0.417161,-0.758304,-0.349758,0.550132,0.435760,0.237780,-0.101579,0.173869,0.412912,-0.715883,-0.336010,0.612052,0.440430,0.223880,-0.124392,0.196169,0.393850,-0.817828,-0.280073,0.502709,0.427250,0.226770,-0.122274,0.212828,0.407607,-0.802418,-0.334629,0.494115,0.430010,0.239010,-0.087424,0.219468,0.460301,-0.687601,-0.515169,0.511669,0.454580,0.253790,-0.071197,0.204343,0.467426,-0.669074,-0.497319,0.552281,0.464280,0.251290,-0.087609,0.203993,0.447494,-0.690598,-0.430568,0.581107,0.451140,0.247050,-0.073241,0.190242,0.453886,-0.670507,-0.434822,0.601124,0.459700,0.245300,-0.087698,0.185278,0.434955,-0.680992,-0.390029,0.619780,0.449530,0.236150,-0.074293,0.174144,0.441942,-0.659421,-0.406203,0.632585,0.457730,0.234960,-0.088402,0.165128,0.422176,-0.667332,-0.370630,0.645989,0.448320,0.223600,-0.074721,0.156653,0.430795,-0.645270,-0.392136,0.655634,0.457140,0.223630,0.102811,0.229688,0.449474,0.706075,-0.527044,0.472951,0.554820,0.254850,0.114894,0.237420,0.439180,0.738246,-0.521059,0.428358,0.561720,0.255720,0.124741,0.244588,0.429732,0.778849,-0.500863,0.377531,0.567100,0.256470,0.122676,0.229732,0.419214,0.792742,-0.391616,0.467116,0.568690,0.249780,0.112374,0.221914,0.428603,0.752271,-0.412068,0.514090,0.563220,0.248510,0.100987,0.214115,0.438278,0.720704,-0.422253,0.549806,0.556720,0.247490,0.113431,0.184238,0.403541,0.769292,-0.303847,0.562021,0.566520,0.225170,0.100150,0.194802,0.426338,0.719942,-0.366675,0.589265,0.557750,0.236700,0.101579,0.173869,0.412912,0.715885,-0.336010,0.612051,0.559560,0.223880,0.111447,0.203438,0.417161,0.758303,-0.349759,0.550133,0.564230,0.237780,0.122274,0.212828,0.407607,0.802417,-0.334630,0.494115,0.569980,0.239010,0.124392,0.196169,0.393850,0.817828,-0.280075,0.502709,0.572740,0.226770,0.087424,0.219468,0.460301,0.687601,-0.515170,0.511668,0.545410,0.253790,0.071197,0.204343,0.467426,0.669074,-0.497319,0.552281,0.535710,0.251290,0.087609,0.203993,0.447494,0.690599,-0.430567,0.581107,0.548850,0.247050,0.073241,0.190242,0.453886,0.670507,-0.434820,0.601125,0.540290,0.245300,0.087698,0.185278,0.434955,0.680993,-0.390028,0.619780,0.550460,0.236150,0.074293,0.174144,0.441942,0.659421,-0.406202,0.632585,0.542260,0.234960,0.088402,0.165128,0.422176,0.667333,-0.370629,0.645988,0.551670,0.223600,0.074721,0.156653,0.430795,0.645270,-0.392136,0.655634,0.542850,0.223630,-0.057535,0.187939,0.469733,-0.653921,-0.462200,0.598965,0.471940,0.245190,-0.060455,0.176398,0.458279,-0.668777,-0.425100,0.609940,0.468490,0.239890,-0.052170,0.196943,0.482339,-0.611005,-0.512443,0.603386,0.476300,0.249060,-0.042679,0.181209,0.480003,-0.615064,-0.429721,0.661087,0.480950,0.241810,-0.047065,0.173565,0.470921,-0.653841,-0.416847,0.631451,0.478100,0.238440,-0.049750,0.163970,0.461746,-0.673015,-0.410175,0.615474,0.475980,0.234070,-0.061803,0.163079,0.447811,-0.664905,-0.408711,0.625185,0.467020,0.231850,-0.050979,0.152867,0.452990,-0.674506,-0.408916,0.614679,0.474960,0.228460,-0.061991,0.148426,0.438301,-0.650302,-0.404344,0.643128,0.466690,0.223240,-0.051013,0.140727,0.444894,-0.661888,-0.419349,0.621330,0.474740,0.222400,0.057535,0.187939,0.469733,0.653921,-0.462200,0.598964,0.528050,0.245190,0.060455,0.176398,0.458279,0.668776,-0.425099,0.609942,0.531500,0.239890,0.047065,0.173565,0.470921,0.653842,-0.416847,0.631450,0.521890,0.238440,0.049750,0.163970,0.461746,0.673014,-0.410174,0.615475,0.524010,0.234070,0.052170,0.196943,0.482339,0.611006,-0.512444,0.603384,0.523690,0.249060,0.042679,0.181209,0.480003,0.615064,-0.429723,0.661086,0.519040,0.241810,0.061803,0.163079,0.447811,0.664905,-0.408710,0.625186,0.532970,0.231850,0.061991,0.148426,0.438301,0.650302,-0.404344,0.643127,0.533300,0.223240,0.050979,0.152866,0.452990,0.674504,-0.408916,0.614680,0.525040,0.228460,0.051013,0.140727,0.444894,0.661887,-0.419349,0.621331,0.525260,0.222400,-0.017678,0.205003,0.513437,-0.310415,-0.614894,0.724946,0.493320,0.257240,-0.026418,0.204859,0.508875,-0.400253,-0.608232,0.685457,0.489050,0.256240,-0.022957,0.190152,0.500353,-0.453938,-0.467934,0.758273,0.490950,0.248020,-0.015450,0.190067,0.504401,-0.354988,-0.474047,0.805769,0.494390,0.248810,-0.030039,0.189193,0.494990,-0.513501,-0.460304,0.724180,0.487370,0.246650,-0.035071,0.203931,0.502512,-0.466724,-0.593099,0.656051,0.484570,0.254580,-0.008834,0.204821,0.516300,-0.175972,-0.621235,0.763611,0.496870,0.257620,0.0,0.204760,0.517274,-0.000001,-0.624841,0.780752,0.500000,0.257690,-0.007765,0.189715,0.506964,-0.199264,-0.482538,0.852907,0.497360,0.249150,-0.000000,0.189526,0.507853,0.000001,-0.487190,0.873296,0.500000,0.249230,0.017678,0.205003,0.513437,0.310415,-0.614895,0.724946,0.506670,0.257240,0.026418,0.204859,0.508875,0.400253,-0.608232,0.685457,0.510940,0.256240,0.035071,0.203931,0.502512,0.466723,-0.593098,0.656052,0.515420,0.254580,0.030039,0.189193,0.494990,0.513498,-0.460305,0.724182,0.512620,0.246650,0.022956,0.190152,0.500353,0.453939,-0.467934,0.758272,0.509050,0.248020,0.015450,0.190067,0.504401,0.354987,-0.474048,0.805769,0.505600,0.248810,0.008834,0.204821,0.516300,0.175971,-0.621235,0.763611,0.503120,0.257620,0.007765,0.189715,0.506964,0.199262,-0.482540,0.852907,0.502630,0.249150,-0.043840,0.201641,0.493851,-0.539461,-0.559590,0.629159,0.480510,0.252160,-0.036768,0.186338,0.488230,-0.564063,-0.446914,0.694335,0.484060,0.244550,0.043840,0.201641,0.493851,0.539460,-0.559589,0.629160,0.519480,0.252160,0.036768,0.186338,0.488230,0.564061,-0.446915,0.694336,0.515930,0.244550,-0.134854,0.253453,0.418648,-0.818742,-0.479104,0.316419,0.428080,0.257330,-0.133599,0.239858,0.407816,-0.839225,-0.364379,0.403645,0.426470,0.251010,-0.135805,0.210912,0.381724,-0.859647,-0.258296,0.440784,0.421550,0.227970,-0.133775,0.224837,0.395704,-0.850331,-0.314750,0.421746,0.424900,0.240000,0.134854,0.253453,0.418648,0.818742,-0.479104,0.316418,0.571910,0.257330,0.133599,0.239858,0.407816,0.839225,-0.364378,0.403646,0.573520,0.251010,0.135805,0.210912,0.381724,0.859647,-0.258297,0.440783,0.578440,0.227970,0.133775,0.224837,0.395704,0.850331,-0.314749,0.421746,0.575090,0.240000,-0.265687,0.574148,0.275886,-0.364336,0.278228,-0.888734,0.969520,0.639190,-0.267330,0.557809,0.270082,-0.704291,0.431206,-0.563947,0.967530,0.633590,-0.271055,0.554131,0.273350,-0.678601,0.351569,-0.644903,0.969140,0.631710,-0.273790,0.574206,0.278363,-0.335142,0.108397,-0.935911,0.972760,0.639350,0.280921,0.573785,0.280508,0.437284,-0.013994,-0.899215,0.023830,0.638340,0.276547,0.549003,0.277438,0.795770,0.198373,-0.572187,0.028000,0.626620,0.285977,0.573816,0.283134,0.759964,-0.088525,-0.643909,0.021510,0.638750,0.280131,0.540644,0.283226,0.988930,-0.025752,-0.146130,0.024400,0.621000,-0.285574,0.591390,0.291260,-0.981339,0.031534,0.189683,0.296810,0.370950,-0.281544,0.590827,0.305260,-0.971870,-0.022815,0.234412,0.303210,0.371870,-0.280988,0.573588,0.304934,-0.961630,-0.061822,0.267293,0.304910,0.365190,-0.286327,0.575269,0.293922,-0.961360,-0.051203,0.270491,0.299500,0.364890,-0.276576,0.549004,0.277446,-0.795930,0.197414,-0.572297,0.971640,0.627920,-0.280930,0.573785,0.280510,-0.437527,-0.013942,-0.899097,0.975820,0.639620,-0.280142,0.540644,0.283229,-0.988832,-0.025951,-0.146754,0.975230,0.622310,-0.285987,0.573817,0.283136,-0.759928,-0.088554,-0.643947,0.978130,0.640030,0.281398,0.545396,0.289074,0.982443,-0.174472,0.066069,0.020020,0.623680,0.287977,0.574885,0.287090,0.993328,-0.075783,-0.086926,0.019710,0.639630,0.281429,0.549315,0.293424,0.956143,-0.168342,0.239691,0.016410,0.625210,0.286193,0.575263,0.293887,0.960529,-0.051168,0.273433,0.015950,0.640370,0.285517,0.591387,0.291246,0.980953,0.031503,0.191673,0.703190,0.370950,0.281547,0.590827,0.305266,0.971982,-0.023162,0.233910,0.696780,0.371870,0.286193,0.575263,0.293887,0.960529,-0.051168,0.273433,0.700490,0.364890,0.280955,0.573586,0.304926,0.961889,-0.062372,0.266231,0.695080,0.365190,-0.284286,0.668793,0.314163,-0.990864,-0.062567,0.119473,0.300220,0.403790,-0.286691,0.671480,0.300021,-0.894012,0.016949,0.447723,0.294050,0.404540,-0.286596,0.701847,0.312037,-0.994359,-0.058630,0.088385,0.296620,0.417610,-0.291151,0.696232,0.285996,-0.844106,0.332676,0.420490,0.286510,0.413400,0.284071,0.668791,0.314116,0.990549,-0.063204,0.121725,0.699770,0.403790,0.286544,0.701842,0.312035,0.994385,-0.061348,0.086230,0.703370,0.417610,0.286674,0.671481,0.300032,0.892226,0.016562,0.451285,0.705940,0.404540,0.291189,0.696236,0.286013,0.843694,0.331798,0.422008,0.713480,0.413400,-0.285022,0.742833,0.385896,-0.988544,-0.053838,0.141007,0.326210,0.438810,-0.289614,0.775069,0.365153,-0.994734,-0.040369,0.094206,0.315850,0.449450,-0.287669,0.743979,0.362328,-0.994135,-0.068482,0.083700,0.315860,0.437580,-0.289303,0.742390,0.337187,-0.996809,-0.070469,0.037498,0.305110,0.434970,-0.291029,0.775310,0.338578,-0.998540,-0.040293,0.035975,0.304310,0.447320,-0.276292,0.740716,0.431251,-0.973725,-0.009856,0.227514,0.345920,0.441320,-0.281066,0.742020,0.408470,-0.980650,-0.029885,0.193475,0.336170,0.440420,0.285319,0.742822,0.386023,0.988398,-0.050451,0.143262,0.673780,0.438810,0.289358,0.775050,0.365115,0.995222,-0.031959,0.092263,0.684140,0.449450,0.288163,0.743982,0.362502,0.994747,-0.062028,0.081425,0.684130,0.437580,0.290919,0.775303,0.338571,0.998650,-0.036103,0.037344,0.695690,0.447320,0.289411,0.742401,0.337254,0.997289,-0.065712,0.033121,0.694880,0.434970,0.275923,0.740678,0.431205,0.973123,-0.005987,0.230207,0.654070,0.441320,0.281114,0.742026,0.408546,0.979032,-0.029231,0.201597,0.663820,0.440420,-0.270672,0.735020,0.452790,-0.971821,0.009367,0.235534,0.355600,0.440440,-0.265210,0.769412,0.470766,-0.955768,0.051527,0.289572,0.361920,0.454910,0.270699,0.734990,0.452806,0.973152,0.016288,0.229587,0.644390,0.440440,0.265048,0.769388,0.470747,0.957157,0.057144,0.283876,0.638070,0.454910,-0.258469,0.814159,0.481159,-0.940210,0.070319,0.333257,0.365650,0.473090,-0.253111,0.797318,0.499462,-0.939741,0.078803,0.332682,0.373670,0.467520,-0.241511,0.835265,0.521132,-0.936000,0.089506,0.340431,0.382550,0.483270,-0.238001,0.816263,0.536050,-0.940052,0.087222,0.329689,0.388510,0.476520,0.258398,0.814158,0.481162,0.939298,0.070809,0.335716,0.634340,0.473090,0.252907,0.797291,0.499402,0.940249,0.085522,0.329573,0.626320,0.467520,0.237863,0.816277,0.535982,0.939690,0.096098,0.328250,0.611480,0.476520,0.241197,0.835236,0.521061,0.935618,0.089404,0.341505,0.617440,0.483270,-0.270807,0.857271,0.434865,-0.950822,0.104546,0.291560,0.342420,0.487150,-0.265006,0.835016,0.460010,-0.942729,0.079713,0.323895,0.355170,0.479700,-0.251914,0.887102,0.477815,-0.940511,0.109388,0.321672,0.363120,0.503390,-0.246180,0.859315,0.502097,-0.935742,0.092505,0.340337,0.374410,0.492450,0.271194,0.857289,0.435023,0.950535,0.100475,0.293920,0.657570,0.487150,0.264869,0.835001,0.460003,0.941538,0.076286,0.328156,0.644830,0.479700,0.245984,0.859288,0.502061,0.935270,0.086297,0.343252,0.625580,0.492450,0.252032,0.887100,0.477864,0.939997,0.106750,0.324053,0.636870,0.503390,-0.285971,0.843141,0.377508,-0.981447,0.069434,0.178720,0.315570,0.475850,-0.291608,0.814515,0.338367,-0.997807,0.003133,0.066122,0.301450,0.462130,-0.290112,0.807112,0.366514,-0.992639,0.018911,0.119628,0.313820,0.461490,0.291547,0.814516,0.338369,0.997742,0.001964,0.067138,0.698540,0.462130,0.286136,0.843148,0.377579,0.982074,0.065840,0.176620,0.684420,0.475850,0.289979,0.807101,0.366513,0.992778,0.016187,0.118867,0.686180,0.461490,-0.294254,0.811919,0.273212,-0.998133,-0.043417,0.042954,0.273330,0.455680,-0.291089,0.770395,0.308381,-0.998788,-0.043241,0.023502,0.291130,0.442180,-0.293004,0.816034,0.305754,-0.998540,-0.023995,0.048394,0.287080,0.460070,-0.290995,0.761693,0.279432,-0.998600,-0.032865,0.041458,0.278970,0.435960,-0.296589,0.871935,0.267705,-0.998640,0.005015,0.051894,0.267600,0.479070,-0.293812,0.870799,0.305619,-0.996068,0.019869,0.086333,0.283560,0.481410,-0.288976,0.734415,0.310352,-0.997874,-0.047693,0.044416,0.293950,0.429210,-0.290098,0.723925,0.284533,-0.995535,0.015556,0.093104,0.283360,0.423230,0.291220,0.770399,0.308438,0.998800,-0.042282,0.024709,0.708860,0.442180,0.294330,0.811922,0.273239,0.998156,-0.043044,0.042789,0.726660,0.455680,0.292963,0.816033,0.305758,0.998482,-0.023280,0.049921,0.712910,0.460070,0.291021,0.761694,0.279443,0.998640,-0.033011,0.040360,0.721020,0.435960,0.293783,0.870793,0.305611,0.995959,0.020619,0.087411,0.716430,0.481410,0.296600,0.871934,0.267709,0.998600,0.005488,0.052610,0.732390,0.479070,0.289034,0.734415,0.310379,0.997952,-0.047488,0.042866,0.706040,0.429210,0.290130,0.723926,0.284545,0.995590,0.014944,0.092612,0.716640,0.423230,-0.257805,0.915847,0.448793,-0.943143,0.126492,0.307378,0.347360,0.515130,-0.276264,0.880940,0.407486,-0.959552,0.103322,0.261887,0.327660,0.495130,0.258072,0.915845,0.448900,0.942826,0.131593,0.306207,0.652640,0.515130,0.276390,0.880928,0.407537,0.959903,0.105404,0.259761,0.672330,0.495130,-0.279899,0.984691,0.320373,-0.954176,0.265321,0.138391,0.281250,0.528240,-0.294306,0.934668,0.265477,-0.992493,0.110043,0.053371,0.262740,0.503010,-0.290599,0.929016,0.310520,-0.987540,0.108547,0.113942,0.282130,0.504830,-0.283382,0.993843,0.266208,-0.956788,0.286270,0.051057,0.258030,0.525580,0.294306,0.934667,0.265478,0.992424,0.110160,0.054401,0.737250,0.503010,0.279814,0.984680,0.320350,0.954327,0.264582,0.138766,0.718740,0.528240,0.290471,0.928995,0.310487,0.987418,0.108799,0.114750,0.717860,0.504830,0.283375,0.993842,0.266205,0.956846,0.285950,0.051747,0.741960,0.525580,-0.295786,0.706950,0.260552,-0.962839,0.208199,0.172027,0.274640,0.415750,-0.292891,0.720127,0.261622,-0.984305,0.132999,0.115993,0.274320,0.420010,-0.299872,0.712919,0.237835,-0.876468,0.468911,0.109206,0.264730,0.415110,-0.295318,0.720382,0.238967,-0.951208,0.301109,0.067357,0.265410,0.417670,-0.291304,0.752285,0.255936,-0.998777,-0.001478,0.049424,0.270490,0.430560,-0.292129,0.745409,0.233006,-0.999200,0.032632,0.023134,0.262430,0.425810,-0.118651,0.400512,0.639148,-0.160359,-0.463860,0.871274,0.462710,0.339750,-0.127865,0.397309,0.638859,-0.077508,-0.388438,0.918209,0.460290,0.339130,-0.177274,0.392757,0.550027,-0.873987,-0.285897,0.392951,0.433300,0.329800,-0.165725,0.396023,0.579672,-0.902865,-0.260621,0.341922,0.441880,0.334540,-0.138782,0.395197,0.634817,-0.510453,-0.361924,0.780031,0.457920,0.338850,-0.148358,0.395176,0.622520,-0.802970,-0.300056,0.514980,0.454600,0.338380,0.295803,0.706950,0.260558,0.962902,0.208333,0.171513,0.725350,0.415750,0.292903,0.720127,0.261626,0.984346,0.133131,0.115498,0.725670,0.420010,0.291312,0.752285,0.255939,0.998808,-0.001601,0.048776,0.729500,0.430560,0.295331,0.720383,0.238972,0.951218,0.301128,0.067123,0.734590,0.417670,0.292131,0.745409,0.233007,0.999200,0.032734,0.022966,0.737560,0.425810,0.299879,0.712919,0.237838,0.876577,0.468766,0.108959,0.735260,0.415110,0.118650,0.400498,0.639209,0.156223,-0.461315,0.873374,0.537280,0.339750,0.127706,0.397376,0.638851,0.080188,-0.386371,0.918851,0.539700,0.339130,0.165720,0.396025,0.579670,0.902711,-0.259709,0.343023,0.558110,0.334540,0.177274,0.392757,0.550027,0.873780,-0.285654,0.393586,0.566690,0.329800,0.138663,0.395241,0.634780,0.510636,-0.359752,0.780916,0.542070,0.338850,0.148297,0.395198,0.622506,0.803113,-0.298332,0.515760,0.545390,0.338380,0.157795,0.395996,0.604419,0.891729,-0.262955,0.368339,0.550910,0.337150,-0.297898,0.863669,0.230276,-0.999758,-0.002864,0.021788,0.253140,0.472290,-0.295023,0.802196,0.244375,-0.998102,-0.050164,0.035721,0.262630,0.449240,-0.294950,0.790498,0.216244,-0.998295,-0.054598,0.020653,0.252600,0.442280,-0.298279,0.849073,0.193484,-0.999942,-0.009800,0.004584,0.239720,0.463500,0.297898,0.863669,0.230276,0.999767,-0.002752,0.021397,0.746850,0.472290,0.295028,0.802196,0.244377,0.998125,-0.050252,0.034954,0.737360,0.449240,0.298279,0.849073,0.193484,0.999942,-0.009796,0.004561,0.760270,0.463500,0.294950,0.790498,0.216244,0.998297,-0.054592,0.020568,0.747400,0.442280,-0.157879,0.395970,0.604453,-0.891466,-0.264552,0.367831,0.449080,0.337150,-0.020388,0.260088,0.667502,-0.026509,-0.788693,0.614215,0.494680,0.306180,-0.035759,0.453493,0.717183,-0.230961,0.308107,0.922891,0.491340,0.360290,-0.286437,0.590731,0.283838,-0.968543,-0.027472,-0.247327,0.976150,0.648210,-0.285574,0.591390,0.291260,-0.981339,0.031534,0.189683,0.979780,0.649770,-0.287986,0.574886,0.287092,-0.992792,-0.076315,-0.092413,0.979930,0.640900,-0.286327,0.575269,0.293922,-0.961360,-0.051203,0.270491,0.983700,0.641630,-0.284133,0.589692,0.280834,-0.585769,-0.166946,-0.793097,0.974940,0.647180,0.006601,0.334372,0.687315,-0.131809,0.028216,0.990873,0.501770,0.326410,0.285517,0.591387,0.291246,0.980953,0.031503,0.191673,0.019850,0.648500,0.286419,0.590730,0.283834,0.969489,-0.026883,-0.243657,0.023510,0.646930,0.284112,0.589691,0.280829,0.585659,-0.166773,-0.793215,0.024720,0.645900,-0.045092,0.453101,0.713936,-0.379203,0.265766,0.886326,0.488980,0.359820,-0.056753,0.451965,0.708329,-0.452039,0.225487,0.863028,0.485910,0.359080,-0.281439,0.549315,0.293426,-0.956747,-0.169864,0.236181,0.983210,0.626520,-0.281423,0.545397,0.289080,-0.982545,-0.175211,0.062509,0.979600,0.624990,0.281429,0.549315,0.293424,0.956143,-0.168342,0.239691,0.697760,0.354340,0.278753,0.540568,0.300013,0.973715,-0.130190,0.186896,0.693660,0.351190,-0.281439,0.549315,0.293426,-0.956747,-0.169864,0.236181,0.302240,0.354340,-0.278816,0.540571,0.300029,-0.973857,-0.130883,0.185666,0.306330,0.351190,-0.278560,0.522879,0.288126,-0.957564,-0.032487,0.286383,0.302610,0.343260,-0.277869,0.530393,0.294622,-0.983475,-0.123287,0.132583,0.305080,0.346530,-0.277869,0.530393,0.294622,-0.983475,-0.123287,0.132583,0.982780,0.614860,-0.278560,0.522879,0.288126,-0.957564,-0.032487,0.286383,0.977820,0.611670,-0.278816,0.540571,0.300029,-0.973857,-0.130883,0.185666,0.987020,0.620440,0.278549,0.522878,0.288124,0.957518,-0.032361,0.286552,0.697380,0.343260,0.277859,0.530393,0.294620,0.983248,-0.122789,0.134710,0.694910,0.346530,0.278753,0.540568,0.300013,0.973715,-0.130190,0.186896,0.012590,0.619130,0.277859,0.530393,0.294620,0.983248,-0.122789,0.134710,0.016840,0.613540,0.278549,0.522878,0.288124,0.957518,-0.032361,0.286552,0.021810,0.610350,-0.169967,0.670913,0.617265,-0.391213,0.411049,0.823402,0.439520,0.427290,-0.281438,0.530049,0.278336,-0.929859,0.170774,0.325881,0.970940,0.617260,-0.281820,0.516664,0.281337,-0.887857,0.067416,0.455153,0.972030,0.609940,-0.283524,0.503579,0.280380,-0.822908,-0.079464,0.562590,0.969930,0.603430,-0.286302,0.511834,0.274247,-0.873848,0.100589,0.475679,0.965940,0.609010,-0.287104,0.503389,0.274672,-0.866889,0.036254,0.497182,0.965390,0.605050,-0.285644,0.524382,0.272597,-0.827244,0.122617,0.548300,0.966100,0.615120,-0.288454,0.492341,0.270935,-0.760688,-0.327368,0.560521,0.962540,0.599880,-0.295689,0.487437,0.255945,-0.785811,-0.463874,0.409050,0.954140,0.600030,-0.291278,0.497773,0.267390,-0.880307,-0.005427,0.474374,0.960170,0.603470,-0.297413,0.495518,0.255695,-0.885999,0.000147,0.463688,0.953880,0.603830,0.035933,0.453561,0.717622,0.236240,0.284975,0.928967,0.508650,0.360290,0.045222,0.453134,0.714285,0.384484,0.244809,0.890079,0.511010,0.359820,0.281437,0.530049,0.278336,0.929511,0.170785,0.326866,0.028690,0.615950,0.281793,0.516663,0.281330,0.887480,0.067321,0.455903,0.027600,0.608610,0.285644,0.524382,0.272597,0.826922,0.122450,0.548822,0.033550,0.613810,0.286302,0.511834,0.274246,0.873273,0.100485,0.476757,0.033710,0.607690,0.283510,0.503578,0.280376,0.822750,-0.079083,0.562875,0.029720,0.602100,0.287103,0.503389,0.274672,0.866277,0.036228,0.498249,0.034250,0.603720,0.288453,0.492341,0.270935,0.760607,-0.327249,0.560701,0.037110,0.598550,0.291278,0.497773,0.267390,0.880170,-0.005518,0.474626,0.039480,0.602140,0.295689,0.487437,0.255945,0.785795,-0.463877,0.409077,0.045520,0.598700,0.297413,0.495518,0.255695,0.886002,0.000172,0.463682,0.045780,0.602500,-0.274266,0.547757,0.270421,-0.739693,0.672798,-0.014044,0.967590,0.628350,-0.279012,0.541241,0.274435,-0.884130,0.437220,0.164781,0.969350,0.623650,-0.284968,0.537014,0.270291,-0.682149,0.337035,0.648907,0.965280,0.620970,-0.281202,0.545253,0.266628,-0.451036,0.742353,0.495457,0.964110,0.625520,0.274246,0.547756,0.270416,0.738023,0.674614,-0.014804,0.032050,0.627050,0.279010,0.541241,0.274434,0.883472,0.438309,0.165415,0.030280,0.622350,0.281202,0.545253,0.266628,0.449927,0.743007,0.495486,0.035530,0.624220,0.284968,0.537014,0.270291,0.681937,0.337224,0.649032,0.034370,0.619660,-0.279159,0.588683,0.279485,-0.191301,-0.171763,-0.966386,0.973190,0.645810,-0.271053,0.587654,0.278225,-0.078789,-0.061314,-0.995004,0.970810,0.644060,-0.275429,0.602226,0.274554,-0.042807,-0.548381,-0.835132,0.968630,0.648590,-0.264456,0.602309,0.275709,0.051002,-0.428120,-0.902282,0.967840,0.645880,0.279138,0.588682,0.279480,0.191290,-0.171800,-0.966381,0.026470,0.644530,0.275403,0.602225,0.274548,0.042897,-0.548459,-0.835077,0.031030,0.647300,0.271039,0.587653,0.278222,0.078727,-0.061461,-0.995000,0.028840,0.642780,0.264422,0.602307,0.275701,-0.051032,-0.428333,-0.902179,0.031820,0.644590,-0.272818,0.607212,0.269276,-0.001895,-0.752619,-0.658454,0.966590,0.648190,-0.260141,0.609605,0.271173,0.070442,-0.651266,-0.755573,0.966640,0.645920,-0.260141,0.609605,0.271173,-0.219877,-0.792870,0.568341,0.966640,0.645920,-0.272818,0.607212,0.269276,-0.047844,-0.852549,0.520452,0.966590,0.648190,-0.261571,0.604322,0.262565,-0.234000,-0.557594,0.796450,0.965060,0.645620,-0.271611,0.603906,0.262472,-0.069464,-0.667848,0.741049,0.964310,0.647500,0.169815,0.670885,0.617281,0.387384,0.376822,0.841391,0.560470,0.427290,0.272792,0.607211,0.269270,0.002094,-0.752661,-0.658405,0.033080,0.646900,0.272792,0.607211,0.269270,0.047872,-0.852521,0.520497,0.033080,0.646900,0.271592,0.603905,0.262467,0.069550,-0.667824,0.741063,0.035360,0.646210,0.260097,0.609603,0.271162,0.220186,-0.792607,0.568588,0.033030,0.644630,0.261549,0.604321,0.262559,0.234115,-0.557383,0.796564,0.034600,0.644320,0.260097,0.609603,0.271162,-0.070395,-0.651412,-0.755452,0.033030,0.644630,0.056852,0.452047,0.708627,0.453012,0.205192,0.867569,0.514080,0.359080,-0.275244,0.548504,0.263013,-0.440844,0.843678,0.306371,0.963690,0.628770,-0.269843,0.551808,0.267024,-0.746675,0.662999,-0.053936,0.966220,0.631010,0.275225,0.548503,0.263008,0.439246,0.844333,0.306864,0.035960,0.627470,0.269764,0.551804,0.267003,0.746769,0.662970,-0.052983,0.033430,0.629710,-0.260561,0.585541,0.277661,-0.100777,0.140822,-0.984892,0.968280,0.642480,-0.248091,0.599743,0.278722,-0.009707,-0.188552,-0.982015,0.966940,0.643530,-0.246315,0.591059,0.277644,-0.077131,0.196064,-0.977553,0.966740,0.642800,-0.252660,0.582944,0.275713,-0.496882,0.514765,-0.698660,0.966870,0.642090,0.248075,0.599743,0.278719,0.009623,-0.188673,-0.981993,0.032710,0.642230,0.260549,0.585540,0.277659,0.100788,0.140804,-0.984894,0.031370,0.641190,0.246289,0.591058,0.277638,0.077381,0.196308,-0.977484,0.032920,0.641500,0.252630,0.582942,0.275705,0.496239,0.514784,-0.699102,0.032780,0.640780,-0.248091,0.599743,0.278722,-0.914364,-0.151370,-0.375534,0.966940,0.643530,-0.244557,0.590996,0.273643,-0.953383,0.244043,0.177492,0.966460,0.642770,-0.246315,0.591059,0.277644,-0.889176,0.264984,-0.373027,0.966740,0.642800,-0.246913,0.603857,0.273941,-0.914364,-0.151370,-0.375534,0.966520,0.643810,-0.246913,0.603857,0.273941,-0.650943,-0.356538,0.670189,0.966520,0.643810,-0.253933,0.597739,0.263526,-0.564509,-0.214097,0.797177,0.965220,0.643730,-0.246913,0.603857,0.273941,-0.023391,-0.625525,-0.779853,0.966520,0.643810,0.244538,0.590995,0.273639,0.953644,0.242707,0.177926,0.033190,0.641460,0.248075,0.599743,0.278719,0.914447,-0.151820,-0.375151,0.032710,0.642230,0.246289,0.591058,0.277638,0.889277,0.264254,-0.373304,0.032920,0.641500,0.246896,0.603856,0.273940,0.914447,-0.151820,-0.375151,0.033140,0.642510,0.246896,0.603856,0.273940,0.023085,-0.625720,-0.779706,0.033140,0.642510,0.253912,0.597738,0.263521,0.564617,-0.213914,0.797150,0.034440,0.642430,0.246896,0.603856,0.273940,0.651197,-0.356127,0.670161,0.033140,0.642510,-0.268214,0.589037,0.256682,-0.359682,-0.274037,0.891927,0.961780,0.643400,-0.273527,0.592312,0.256372,-0.227858,-0.440401,0.868405,0.960760,0.644990,-0.264585,0.584102,0.257961,-0.519299,-0.108952,0.847619,0.962340,0.641750,0.268197,0.589036,0.256678,0.359521,-0.273813,0.892060,0.037890,0.642100,0.273507,0.592311,0.256367,0.228030,-0.440152,0.868487,0.038910,0.643700,0.264566,0.584101,0.257956,0.518958,-0.108801,0.847847,0.037320,0.640440,-0.294468,0.634449,0.269559,-0.803792,0.371942,-0.464304,0.962920,0.666000,-0.288910,0.638336,0.268833,-0.322026,0.706926,-0.629725,0.960420,0.667630,-0.292699,0.629220,0.262691,-0.738529,0.406868,-0.537619,0.961340,0.662160,-0.286654,0.633798,0.262473,-0.351087,0.711871,-0.608258,0.958650,0.664320,-0.291268,0.625142,0.258324,-0.724365,0.388906,-0.569252,0.959630,0.659860,-0.285041,0.629948,0.257682,-0.428595,0.659728,-0.617305,0.956910,0.662200,-0.284445,0.626419,0.254083,-0.547328,0.608582,-0.574509,0.955720,0.660630,-0.290641,0.621378,0.255235,-0.751363,0.386664,-0.534738,0.958280,0.658170,-0.293306,0.616557,0.258308,-0.892646,0.225468,-0.390318,0.960110,0.656700,-0.290748,0.616405,0.251879,-0.813211,0.368982,-0.450045,0.956660,0.656090,-0.293028,0.611572,0.254676,-0.923037,0.221920,-0.314253,0.957950,0.654540,-0.284975,0.621891,0.250112,-0.683079,0.553077,-0.476979,0.954460,0.658690,0.294424,0.634446,0.269549,0.804561,0.371020,-0.463708,0.036760,0.664690,0.292673,0.629218,0.262685,0.738932,0.407489,-0.536593,0.038340,0.660850,0.288882,0.638334,0.268827,0.322017,0.706789,-0.629884,0.039260,0.666320,0.286588,0.633795,0.262456,0.350898,0.712272,-0.607898,0.041020,0.663010,0.285031,0.629947,0.257680,0.428642,0.660251,-0.616713,0.042760,0.660890,0.291249,0.625141,0.258319,0.724607,0.388676,-0.569100,0.040040,0.658550,0.284428,0.626418,0.254078,0.547596,0.608635,-0.574196,0.043950,0.659320,0.290613,0.621377,0.255228,0.751838,0.386242,-0.534376,0.041390,0.656860,0.284954,0.621890,0.250107,0.683534,0.552837,-0.476605,0.045200,0.657380,0.290729,0.616404,0.251874,0.813375,0.369124,-0.449631,0.043010,0.654790,0.293265,0.616555,0.258297,0.893178,0.224782,-0.389495,0.039560,0.655390,0.293007,0.611571,0.254670,0.923011,0.222511,-0.313911,0.041710,0.653240,-0.296185,0.641521,0.278059,-0.928241,0.100683,-0.358093,0.963550,0.672480,-0.292610,0.643824,0.275739,-0.377809,0.449250,-0.809589,0.961430,0.672890,-0.299192,0.652699,0.282462,-0.971343,-0.237383,0.011892,0.962130,0.680550,-0.297367,0.652738,0.279037,-0.549816,-0.125601,-0.825788,0.960670,0.679710,0.296163,0.641519,0.278057,0.928763,0.099190,-0.357156,0.036110,0.671160,0.299167,0.652697,0.282459,0.970967,-0.238856,0.013099,0.037520,0.679230,0.292597,0.643823,0.275739,0.378167,0.449002,-0.809560,0.038230,0.671570,0.297341,0.652735,0.279034,0.549832,-0.126093,-0.825703,0.038990,0.678380,-0.309482,0.680601,0.276134,-0.822090,0.011481,0.569242,0.950280,0.694840,-0.303954,0.666141,0.282021,-0.884672,-0.209132,0.416677,0.958060,0.688770,-0.303433,0.663480,0.277370,-0.928090,-0.368162,0.055732,0.956950,0.686840,-0.309589,0.675291,0.272004,-0.917480,-0.231320,0.323605,0.949880,0.692150,-0.329208,0.710725,0.238451,-0.869693,0.252966,0.423843,0.928260,0.694880,-0.318559,0.696944,0.260158,-0.808227,0.170454,0.563662,0.938940,0.696610,-0.318794,0.688579,0.258443,-0.910567,-0.117433,0.396329,0.939770,0.693780,-0.327606,0.700831,0.239462,-0.837888,-0.531467,0.124443,0.930020,0.692280,0.309504,0.680602,0.276145,0.821880,0.011312,0.569548,0.049370,0.693520,0.303961,0.666142,0.282028,0.884017,-0.210584,0.417335,0.041600,0.687450,0.309622,0.675292,0.272017,0.917254,-0.231462,0.324144,0.049770,0.690820,0.303436,0.663480,0.277374,0.927503,-0.369510,0.056574,0.042700,0.685520,0.329213,0.710725,0.238453,0.870013,0.252630,0.423386,0.071400,0.693570,0.318576,0.696945,0.260165,0.808529,0.170358,0.563257,0.060710,0.695300,0.327606,0.700831,0.239462,0.837822,-0.531668,0.124026,0.069630,0.690960,0.318806,0.688580,0.258448,0.910815,-0.117485,0.395744,0.059890,0.692470,-0.295851,0.507743,0.255120,-0.891430,0.110896,0.439379,0.954460,0.609330,-0.290968,0.508008,0.265842,-0.894294,0.096783,0.436889,0.960200,0.608580,-0.290255,0.521870,0.264809,-0.864883,0.005415,0.501944,0.960850,0.614700,-0.294898,0.523007,0.254237,-0.910121,-0.068641,0.408618,0.955100,0.615690,0.295849,0.507743,0.255120,0.891428,0.111379,0.439261,0.045200,0.608010,0.290967,0.508008,0.265842,0.894371,0.096930,0.436698,0.039450,0.607250,0.290255,0.521870,0.264809,0.865108,0.005388,0.501557,0.038800,0.613380,0.294878,0.523006,0.254232,0.910397,-0.068429,0.408037,0.044550,0.614380,-0.289896,0.547306,0.261966,-0.358256,0.677935,0.641916,0.959570,0.625050,-0.298693,0.538620,0.254664,-0.875798,-0.029577,0.481771,0.955170,0.621700,-0.292341,0.536604,0.264580,-0.738024,0.118725,0.664248,0.960350,0.620650,-0.297821,0.551532,0.254017,-0.817432,0.153807,0.555111,0.955090,0.625970,0.298693,0.538620,0.254664,0.876297,-0.029990,0.480838,0.044490,0.620390,0.289896,0.547306,0.261966,0.358169,0.677966,0.641932,0.040080,0.623750,0.292341,0.536604,0.264580,0.738184,0.118559,0.664099,0.039290,0.619340,0.297821,0.551532,0.254017,0.818025,0.153526,0.554315,0.044570,0.624670,-0.304931,0.501068,0.241638,-0.886559,0.039606,0.460917,0.947510,0.606480,-0.301677,0.513491,0.241599,-0.866357,0.123231,0.483982,0.948170,0.611840,-0.300888,0.528677,0.241196,-0.920095,-0.071612,0.385094,0.948720,0.617970,-0.305044,0.492784,0.239579,-0.877771,-0.421159,0.228347,0.946730,0.602990,0.304929,0.501068,0.241638,0.886561,0.039648,0.460909,0.052150,0.605160,0.301677,0.513491,0.241599,0.866134,0.123922,0.484205,0.051490,0.610520,0.300867,0.528676,0.241191,0.920088,-0.071091,0.385207,0.050930,0.616660,0.305044,0.492784,0.239579,0.877800,-0.421076,0.228392,0.052940,0.601670,-0.304648,0.543311,0.242525,-0.936930,-0.033445,0.347913,0.949410,0.623600,-0.302543,0.555964,0.242692,-0.912328,0.143140,0.383625,0.950130,0.627770,0.304618,0.543309,0.242517,0.937131,-0.033704,0.347348,0.050250,0.622290,0.302529,0.555964,0.242688,0.912623,0.143041,0.382960,0.049520,0.626460,-0.168119,0.676331,0.626644,0.034017,-0.872907,0.486700,0.440250,0.430450,0.168098,0.676299,0.626697,-0.035346,-0.872664,0.487040,0.559740,0.430450,0.006902,0.164364,0.494731,0.195346,-0.429912,0.881485,0.502320,0.236910,0.013805,0.156356,0.488465,0.363927,-0.434592,0.823824,0.504930,0.233100,0.013558,0.165646,0.493184,0.357787,-0.407793,0.840055,0.504720,0.236880,0.006990,0.154328,0.489738,0.197888,-0.459498,0.865853,0.502430,0.232910,-0.000000,0.163895,0.495303,0.000003,-0.439170,0.898404,0.500000,0.236930,-0.000000,0.153680,0.490171,0.000001,-0.469395,0.882988,0.500000,0.232870,0.007328,0.145641,0.484747,0.208273,-0.499695,0.840790,0.502630,0.229810,-0.000000,0.144790,0.485197,-0.000000,-0.512433,0.858727,0.500000,0.229730,0.014555,0.148193,0.483566,0.381218,-0.467280,0.797698,0.505350,0.230120,0.074605,0.534789,-0.071405,0.079452,-0.276267,-0.957791,0.918280,0.310870,0.072798,0.412771,-0.058127,0.180969,-0.007259,-0.983462,0.912390,0.248150,0.097679,0.532417,-0.068730,0.140953,-0.292492,-0.945823,0.906670,0.311740,0.097410,0.411233,-0.052230,0.260780,-0.031376,-0.964888,0.899190,0.247720,-0.066441,0.665295,0.637764,-0.690501,-0.104612,0.715727,0.468030,0.428360,-0.067432,0.659331,0.634369,-0.775936,-0.008917,0.630749,0.467360,0.427050,-0.074605,0.534789,-0.071405,-0.079451,-0.276267,-0.957791,0.081710,0.310870,-0.072798,0.412771,-0.058127,-0.180969,-0.007260,-0.983462,0.087600,0.248150,-0.097410,0.411233,-0.052230,-0.260780,-0.031376,-0.964888,0.100800,0.247720,-0.097679,0.532417,-0.068730,-0.140954,-0.292492,-0.945823,0.093320,0.311740,0.118988,0.529033,-0.064426,0.201652,-0.308092,-0.929740,0.895970,0.311750,0.121006,0.409095,-0.044169,0.326324,-0.050241,-0.943922,0.885710,0.247160,0.139014,0.525289,-0.058808,0.264359,-0.320639,-0.909563,0.885760,0.311430,0.144146,0.406593,-0.034650,0.380295,-0.062565,-0.922747,0.871720,0.246640,-0.289393,0.552687,0.250247,0.031140,0.968114,0.248566,0.955410,0.628610,-0.302543,0.555964,0.242692,0.194269,0.942505,0.271925,0.950130,0.627770,-0.297821,0.551532,0.254017,0.077012,0.946941,0.312044,0.955090,0.625970,-0.293682,0.554055,0.239239,0.141838,0.953023,0.267636,0.950640,0.630340,-0.283372,0.553171,0.237686,0.088168,0.960898,0.262491,0.952000,0.632720,-0.282291,0.549466,0.257524,-0.139034,0.909120,0.392646,0.959770,0.628040,0.289393,0.552687,0.250247,-0.031144,0.968112,0.248573,0.044240,0.627310,0.302529,0.555964,0.242688,-0.194305,0.942477,0.271997,0.049520,0.626460,0.293665,0.554054,0.239234,-0.141843,0.953015,0.267662,0.049010,0.629030,0.297821,0.551532,0.254017,-0.077017,0.946936,0.312059,0.044570,0.624670,0.283367,0.553171,0.237685,-0.088141,0.960906,0.262469,0.047650,0.631420,0.282291,0.549466,0.257524,0.138256,0.909114,0.392933,0.039880,0.626740,0.066490,0.665297,0.637787,0.688208,-0.119049,0.715679,0.531960,0.428360,0.067164,0.659303,0.634295,0.778435,-0.009561,0.627652,0.532630,0.427050,-0.121006,0.409095,-0.044169,-0.326324,-0.050241,-0.943922,0.114280,0.247160,-0.118988,0.529033,-0.064426,-0.201652,-0.308092,-0.929740,0.104020,0.311750,-0.144146,0.406593,-0.034650,-0.380295,-0.062565,-0.922747,0.128270,0.246640,-0.139014,0.525289,-0.058808,-0.264359,-0.320639,-0.909563,0.114230,0.311430,0.252099,0.581233,0.270755,0.814935,0.568273,0.113784,0.033310,0.640440,-0.334819,0.596299,0.179636,-0.977497,-0.084897,0.193109,0.913300,0.646410,-0.338411,0.573940,0.176094,-0.912685,0.001305,0.408662,0.912530,0.636820,-0.332775,0.576592,0.182541,-0.937910,-0.036599,0.344942,0.916900,0.638240,-0.339149,0.597498,0.171811,-0.902511,-0.019887,0.430208,0.908370,0.646310,0.334816,0.596299,0.179635,0.977440,-0.084888,0.193405,0.086360,0.645120,0.338410,0.573940,0.176094,0.912612,0.001336,0.408824,0.087130,0.635520,0.339148,0.597498,0.171811,0.902447,-0.019881,0.430342,0.091280,0.645020,0.332772,0.576592,0.182540,0.937833,-0.036529,0.345159,0.082760,0.636940,-0.319346,0.588156,0.211760,-0.086242,0.148596,0.985130,0.931920,0.643510,-0.330668,0.594862,0.205126,-0.701986,-0.015965,0.712011,0.925740,0.646290,-0.337463,0.604090,0.193820,-0.967420,-0.089061,0.236993,0.918750,0.649660,-0.306255,0.585448,0.206869,-0.014089,0.265364,0.964045,0.936490,0.643360,-0.296613,0.586538,0.209737,-0.684837,0.290062,0.668477,0.939480,0.644400,0.319327,0.588155,0.211756,0.085877,0.148571,0.985166,0.067740,0.642210,0.330655,0.594861,0.205123,0.701670,-0.016013,0.712322,0.073910,0.644980,0.337455,0.604089,0.193818,0.967343,-0.089184,0.237262,0.080910,0.648350,0.306244,0.585448,0.206866,0.014137,0.265291,0.964065,0.063170,0.642060,0.296603,0.586538,0.209735,0.685016,0.289740,0.668434,0.060180,0.643090,-0.339697,0.617854,0.171242,-0.921915,-0.090985,0.376557,0.906750,0.653740,-0.337070,0.612479,0.180555,-0.990334,-0.101526,0.094506,0.912060,0.652250,0.339697,0.617854,0.171242,0.921866,-0.091010,0.376669,0.092900,0.652450,0.337067,0.612479,0.180554,0.990304,-0.101596,0.094747,0.087590,0.650960,-0.294847,0.639303,0.229094,-0.305808,-0.713222,0.630710,0.941340,0.663710,-0.282796,0.636956,0.233137,-0.651185,-0.558138,0.514237,0.945230,0.662160,-0.292697,0.645655,0.241011,-0.433138,-0.705787,0.560586,0.944770,0.666890,-0.280454,0.641971,0.243403,-0.685935,-0.536459,0.491635,0.948120,0.664990,-0.279586,0.628943,0.238394,-0.969666,0.071595,0.233713,0.947300,0.661080,-0.276484,0.634486,0.247239,-0.966657,0.088200,0.240407,0.949790,0.663810,0.294831,0.639302,0.229089,0.305953,-0.713194,0.630672,0.058320,0.662400,0.282791,0.636956,0.233136,0.651276,-0.558049,0.514218,0.054430,0.660850,0.279581,0.628942,0.238393,0.969645,0.071241,0.233911,0.052360,0.659780,0.280448,0.641971,0.243402,0.685883,-0.536453,0.491714,0.051540,0.663680,0.276478,0.634486,0.247237,0.966574,0.088117,0.240771,0.049880,0.662500,0.292681,0.645654,0.241007,0.433186,-0.705984,0.560301,0.054890,0.665580,-0.304125,0.651175,0.235624,-0.658046,-0.402675,0.636261,0.939270,0.669840,-0.306244,0.670161,0.236160,-0.800159,-0.153618,0.579782,0.936840,0.678250,-0.315178,0.665412,0.225112,-0.786662,-0.107965,0.607870,0.931940,0.674380,-0.298500,0.656334,0.246338,-0.655308,-0.341506,0.673754,0.943050,0.672940,-0.298048,0.672128,0.249152,-0.781102,-0.383721,0.492582,0.941830,0.681060,-0.289298,0.659710,0.254636,-0.633898,-0.395006,0.664939,0.946700,0.675490,-0.287662,0.650270,0.248972,-0.507403,-0.554960,0.659212,0.947640,0.669320,-0.276234,0.653040,0.256690,-0.720202,-0.361401,0.592198,0.950490,0.671230,-0.277014,0.644616,0.251842,-0.762543,-0.369295,0.531178,0.950340,0.667080,-0.272567,0.646315,0.260509,-0.956850,-0.064458,0.283342,0.952470,0.668740,-0.274045,0.637927,0.254416,-0.966041,0.194465,0.170139,0.951640,0.665530,-0.273337,0.639515,0.261117,-0.908780,0.408932,-0.083022,0.953320,0.666940,0.306237,0.670160,0.236158,0.800188,-0.153772,0.579701,0.062820,0.676940,0.304121,0.651175,0.235623,0.658050,-0.403125,0.635972,0.060390,0.668530,0.315170,0.665411,0.225110,0.786663,-0.108170,0.607833,0.067720,0.673070,0.298498,0.656334,0.246338,0.655198,-0.341558,0.673836,0.056610,0.671630,0.287659,0.650269,0.248972,0.507029,-0.554983,0.659481,0.052020,0.668010,0.289279,0.659709,0.254633,0.633648,-0.395762,0.664727,0.052960,0.674170,0.276217,0.653039,0.256687,0.719724,-0.361777,0.592549,0.049180,0.669920,0.298051,0.672128,0.249154,0.781116,-0.384512,0.491944,0.057820,0.679750,0.277007,0.644616,0.251841,0.761662,-0.369194,0.532510,0.049330,0.665760,0.274029,0.637926,0.254412,0.965528,0.194544,0.172942,0.048030,0.664220,0.272522,0.646312,0.260499,0.956562,-0.064798,0.284237,0.047190,0.667430,0.273292,0.639512,0.261107,0.908879,0.409028,-0.081458,0.046350,0.665630,-0.333299,0.705282,0.219811,-0.877121,-0.409277,0.251300,0.922300,0.688910,-0.327183,0.686567,0.212352,-0.841698,-0.172187,0.511758,0.923090,0.679940,-0.318557,0.691881,0.225061,-0.801509,-0.427768,0.417849,0.928880,0.684140,-0.335165,0.701618,0.202560,-0.905016,-0.242340,0.349595,0.915840,0.684410,-0.310401,0.690149,0.242269,-0.710466,-0.694547,0.113327,0.935490,0.687150,0.333299,0.705282,0.219811,0.877076,-0.409423,0.251220,0.077350,0.687600,0.327180,0.686567,0.212352,0.841614,-0.172250,0.511875,0.076560,0.678630,0.335165,0.701618,0.202560,0.904982,-0.242389,0.349651,0.083800,0.683100,0.318551,0.691881,0.225060,0.801495,-0.427938,0.417701,0.070770,0.682830,0.310405,0.690149,0.242271,0.710513,-0.694565,0.112919,0.064160,0.685840,-0.291263,0.671667,0.261132,-0.644515,-0.755803,0.115593,0.946350,0.682470,-0.275857,0.662383,0.264888,-0.761992,-0.606930,0.225839,0.950350,0.677470,-0.287955,0.670273,0.269790,-0.338841,-0.833973,-0.435518,0.949760,0.682820,-0.278217,0.663122,0.275674,-0.418275,-0.617513,-0.666126,0.953210,0.679370,-0.270854,0.652980,0.269724,-0.982969,-0.165220,-0.080463,0.953880,0.672820,-0.277719,0.651891,0.277821,-0.488686,-0.000353,-0.872460,0.956800,0.674410,-0.279346,0.643553,0.275107,-0.390201,0.483310,-0.783680,0.956800,0.671150,-0.273848,0.644876,0.269674,-0.919267,0.220316,-0.326203,0.955020,0.670000,-0.278019,0.640242,0.272170,-0.236796,0.766285,-0.597273,0.956180,0.669580,-0.275154,0.639572,0.267968,-0.655356,0.633003,-0.412088,0.954940,0.668370,0.291294,0.671669,0.261143,0.644131,-0.756218,0.115016,0.053310,0.681150,0.275848,0.662382,0.264889,0.761020,-0.608327,0.225361,0.049310,0.676160,0.270820,0.652977,0.269719,0.982812,-0.166252,-0.080258,0.045780,0.671500,0.278223,0.663122,0.275682,0.417754,-0.617905,-0.666089,0.046450,0.678060,0.277672,0.651887,0.277814,0.488681,-0.000442,-0.872463,0.042870,0.673100,0.287970,0.670273,0.269797,0.338644,-0.834063,-0.435498,0.049900,0.681510,0.273824,0.644873,0.269669,0.919191,0.220061,-0.326591,0.044650,0.668680,0.279319,0.643551,0.275103,0.390357,0.483531,-0.783466,0.042860,0.669830,0.275125,0.639570,0.267963,0.655050,0.632692,-0.413051,0.044730,0.667060,0.277991,0.640240,0.272165,0.236882,0.766276,-0.597251,0.043490,0.668260,-0.318794,0.688579,0.258443,-0.381840,-0.813729,-0.438228,0.939770,0.693780,-0.304260,0.682475,0.259291,-0.506359,-0.814275,-0.283825,0.942740,0.688180,-0.309589,0.675291,0.272004,-0.333818,-0.671536,-0.661517,0.949880,0.692150,-0.298961,0.671798,0.268952,-0.268290,-0.714797,-0.645821,0.949600,0.686820,0.318806,0.688580,0.258448,0.381754,-0.813701,-0.438353,0.059890,0.692470,0.304266,0.682475,0.259295,0.506439,-0.814169,-0.283988,0.056910,0.686860,0.298976,0.671799,0.268958,0.268286,-0.714785,-0.645836,0.050060,0.685510,0.309622,0.675292,0.272017,0.333735,-0.671565,-0.661530,0.049770,0.690820,-0.303433,0.663480,0.277370,-0.245885,-0.451378,-0.857787,0.956950,0.686840,-0.294280,0.662345,0.275383,-0.123125,-0.441621,-0.888713,0.955290,0.682860,-0.289072,0.652294,0.278618,-0.067302,0.019458,-0.997543,0.958660,0.677070,-0.284900,0.644497,0.276005,0.002628,0.569752,-0.821812,0.958690,0.672270,-0.280847,0.640389,0.270728,-0.020377,0.834550,-0.550556,0.957490,0.669020,0.303436,0.663480,0.277374,0.245882,-0.451318,-0.857820,0.042700,0.685520,0.294282,0.662345,0.275387,0.123094,-0.441294,-0.888880,0.044360,0.681550,0.289041,0.652291,0.278614,0.067394,0.019697,-0.997532,0.040990,0.675750,0.284878,0.644495,0.276002,-0.002514,0.569755,-0.821811,0.040980,0.670950,0.280817,0.640387,0.270723,0.020388,0.834624,-0.550442,0.042170,0.667710,-0.343074,0.699103,0.181642,-0.980983,0.180035,0.072523,0.907690,0.680520,-0.339174,0.710364,0.197261,-0.971026,0.217537,0.098927,0.913030,0.686590,-0.338261,0.691404,0.188610,-0.915200,-0.089970,0.392829,0.910770,0.679180,-0.091586,0.406076,0.662348,-0.554879,0.780560,0.287810,0.473693,0.342390,-0.090908,0.405262,0.665908,-0.815212,0.241571,0.526376,0.473820,0.342060,-0.098652,0.369010,0.488443,0.175330,0.845291,0.504721,0.478480,0.344270,-0.098686,0.399609,0.465844,0.254359,0.573953,0.778382,0.478479,0.344274,0.343074,0.699102,0.181642,0.980984,0.180027,0.072528,0.091950,0.679210,0.338261,0.691404,0.188610,0.915188,-0.089976,0.392856,0.088870,0.677870,0.339174,0.710363,0.197261,0.971029,0.217520,0.098933,0.086610,0.685270,-0.098730,0.355242,0.573921,0.159714,0.985537,-0.056642,0.478478,0.344230,-0.104947,0.358154,0.573982,0.654869,0.753594,-0.056939,0.476001,0.343306,-0.090651,0.370782,0.485774,-0.005004,0.845906,0.533309,0.480920,0.345220,-0.090683,0.404695,0.461595,0.072445,0.579918,0.811448,0.480920,0.345224,-0.090672,0.354952,0.574585,-0.019850,0.998714,-0.046646,0.480924,0.345169,-0.335454,0.714912,0.216087,-0.942825,0.259809,0.208760,0.919980,0.691450,0.335454,0.714912,0.216087,0.942887,0.259675,0.208643,0.079660,0.690120,-0.017101,0.518983,0.725076,-0.639808,-0.660114,0.393568,0.492370,0.377770,-0.252151,0.581235,0.270769,-0.815249,0.567746,0.114160,0.966360,0.641740,0.017101,0.518983,0.725076,0.639965,-0.660109,0.393322,0.507620,0.377770,0.291440,0.608887,0.247046,0.888412,0.321382,-0.327778,0.045650,0.651670,0.286484,0.615117,0.244672,0.801432,0.481241,-0.355126,0.047360,0.654320,-0.277414,0.634720,0.259447,-0.530426,0.743720,-0.406852,0.954530,0.664960,-0.278381,0.637397,0.265003,-0.255090,0.851177,-0.458724,0.956120,0.666710,-0.278943,0.628180,0.248945,-0.840761,0.513404,-0.171863,0.951700,0.661750,-0.277472,0.632011,0.254455,-0.721001,0.626816,-0.295398,0.953170,0.663550,0.277356,0.634716,0.259432,0.530774,0.744149,-0.405613,0.045140,0.663650,0.278352,0.637395,0.264997,0.254922,0.851097,-0.458964,0.043550,0.665390,0.278936,0.628180,0.248944,0.840936,0.513234,-0.171514,0.047960,0.660440,0.277465,0.632011,0.254453,0.721486,0.627131,-0.293537,0.046490,0.662240,-0.281363,0.622058,0.241889,-0.907170,0.410978,-0.090216,0.949530,0.658830,-0.286494,0.615117,0.244674,-0.800987,0.481736,-0.355459,0.952310,0.655630,0.281349,0.622057,0.241885,0.907426,0.410473,-0.089941,0.050130,0.657530,0.091564,0.406079,0.662460,0.550278,0.783794,0.287855,0.526298,0.342390,0.090874,0.405270,0.665986,0.550278,0.783794,0.287855,0.526170,0.342060,-0.081294,0.372463,0.483756,-0.021379,0.839681,0.542660,0.483040,0.346050,-0.081328,0.408902,0.458390,0.046212,0.571439,0.819342,0.483040,0.346054,-0.081301,0.355269,0.575442,-0.040945,0.998418,-0.038528,0.483056,0.345984,0.098628,0.399624,0.465815,-0.258493,0.573401,0.777427,0.521511,0.344274,0.098595,0.369017,0.488425,-0.179144,0.844835,0.504144,0.521510,0.344270,0.104858,0.358174,0.573988,-0.655896,0.752697,-0.056984,0.523989,0.343306,0.098672,0.355247,0.573929,-0.163779,0.984875,-0.056553,0.521512,0.344230,-0.071031,0.412409,0.455599,0.046123,0.565291,0.823601,0.485250,0.346805,0.090674,0.404658,0.461560,-0.074764,0.580207,0.811030,0.519080,0.345224,0.090643,0.370764,0.485752,0.003131,0.846105,0.533008,0.519080,0.345220,-0.292897,0.588365,0.217972,-0.940446,0.274428,0.200626,0.941440,0.644870,0.292883,0.588364,0.217968,0.940536,0.274052,0.200716,0.058220,0.643570,0.036251,0.091747,0.424500,0.552024,-0.475194,0.685172,0.517060,0.201080,0.024396,0.088928,0.431264,0.473862,-0.511063,0.717126,0.510300,0.203610,0.028690,0.082126,0.423565,0.501375,-0.506046,0.701812,0.512890,0.197920,0.030312,0.095572,0.431686,0.529135,-0.487733,0.694358,0.513310,0.205600,0.021967,0.094859,0.437130,0.459389,-0.523180,0.717806,0.508900,0.207790,0.026677,0.097858,0.436064,0.511413,-0.501931,0.697512,0.511170,0.208220,0.015265,0.091460,0.438383,0.359506,-0.556725,0.748874,0.506040,0.207280,0.016994,0.083598,0.431864,0.373755,-0.546264,0.749601,0.506930,0.202340,0.019877,0.074565,0.423806,0.404225,-0.548851,0.731687,0.508510,0.195910,-0.291476,0.608889,0.247055,-0.888705,0.321139,-0.327219,0.954010,0.652970,0.090670,0.354938,0.574600,0.018234,0.998751,-0.046526,0.519076,0.345169,-0.060365,0.415343,0.453122,0.049747,0.561567,0.825935,0.487890,0.347545,-0.048619,0.412684,0.701940,-0.394663,0.659338,0.639933,0.487980,0.347197,0.081351,0.408840,0.458355,-0.046471,0.571967,0.818959,0.516950,0.346054,0.081318,0.372436,0.483734,0.021272,0.839915,0.542300,0.516950,0.346050,0.081326,0.355257,0.575454,0.041340,0.998406,-0.038436,0.516934,0.345984,-0.050108,0.417549,0.451019,0.060657,0.560196,0.826136,0.490399,0.348156,0.071067,0.412344,0.455569,-0.045577,0.565835,0.823258,0.514740,0.346805,-0.040711,0.376522,0.478073,0.037877,0.833813,0.550747,0.492300,0.348550,-0.040776,0.418692,0.449395,0.079499,0.561558,0.823609,0.492299,0.348556,-0.040574,0.356575,0.578127,0.006285,0.999674,-0.024728,0.492329,0.348457,0.060406,0.415283,0.453098,-0.049081,0.562051,0.825645,0.512100,0.347545,0.048669,0.412658,0.702000,0.394226,0.659069,0.640479,0.512010,0.347197,-0.032315,0.418619,0.448304,0.098339,0.566042,0.818490,0.493849,0.348736,0.050152,0.417495,0.450999,-0.060202,0.560616,0.825884,0.509591,0.348156,-0.024320,0.417534,0.447694,0.105491,0.573691,0.812250,0.495339,0.348706,-0.019557,0.413218,0.713776,-0.010469,0.717988,0.695976,0.495467,0.348307,0.040826,0.418640,0.449377,-0.079420,0.561935,0.823360,0.507691,0.348556,0.040761,0.376501,0.478062,-0.037833,0.833985,0.550488,0.507690,0.348550,0.040624,0.356568,0.578132,-0.006319,0.999674,-0.024729,0.507661,0.348457,-0.016377,0.415957,0.447422,0.091548,0.583421,0.806993,0.496839,0.348576,-0.013360,0.412486,0.714070,0.032295,0.750397,0.660198,0.496933,0.348177,0.032373,0.418566,0.448286,-0.098438,0.566403,0.818228,0.506141,0.348736,0.008711,0.080097,0.432552,0.214587,-0.584118,0.782789,0.503450,0.201620,0.010169,0.069645,0.424395,0.234034,-0.595455,0.768545,0.504200,0.194800,0.007787,0.088971,0.439400,0.206287,-0.590890,0.779933,0.503020,0.206920,0.0,0.088058,0.439803,0.000001,-0.606944,0.794744,0.500000,0.206790,0.0,0.078820,0.432908,-0.000001,-0.601996,0.798499,0.500000,0.201380,0.0,0.067913,0.424682,-0.000002,-0.617409,0.786642,0.500000,0.194430,0.090874,0.405270,0.665986,0.716609,-0.439602,0.541500,0.526170,0.342060,-0.008259,0.414586,0.447331,0.054219,0.592171,0.803986,0.498400,0.348465,-0.006835,0.411820,0.714291,0.038537,0.775191,0.630551,0.498450,0.348063,0.024382,0.417480,0.447676,-0.105401,0.574058,0.812002,0.504651,0.348706,0.019598,0.413202,0.713817,0.010808,0.717901,0.696061,0.504523,0.348307,0.000030,0.414034,0.447310,0.001223,0.595854,0.803092,0.500000,0.348415,0.000015,0.411574,0.714050,-0.000366,0.784054,0.620693,0.500000,0.348010,0.016441,0.415908,0.447407,-0.090745,0.583782,0.806824,0.503161,0.348576,0.013427,0.412468,0.714110,-0.032945,0.750255,0.660327,0.503065,0.348177,0.008321,0.414554,0.447321,-0.052333,0.592425,0.803924,0.501590,0.348465,0.006892,0.411801,0.714330,-0.039273,0.774778,0.631012,0.501540,0.348063,-0.095037,0.404709,0.661262,-0.430400,0.853618,0.293414,0.471636,0.341756,-0.092671,0.406048,0.661036,-0.430400,0.853618,0.293414,0.473123,0.342328,-0.109952,0.389438,0.574109,0.999946,0.007228,-0.007473,0.473517,0.342459,-0.108770,0.367900,0.574890,0.965673,0.258157,-0.028818,0.473661,0.342472,0.092651,0.406048,0.661036,-0.045657,0.630071,-0.775194,0.526868,0.342328,0.094523,0.404788,0.661236,-0.045657,0.630071,-0.775194,0.526841,0.342336,0.093401,0.403128,0.658619,-0.674446,0.385234,-0.629855,0.526300,0.342396,0.091564,0.406079,0.662460,-0.448461,0.495104,-0.744147,0.526298,0.342390,0.094951,0.404746,0.661304,0.434513,0.852677,0.290071,0.528374,0.341808,0.092651,0.406048,0.661036,0.434513,0.852677,0.290071,0.526868,0.342328,0.008671,0.617283,0.735978,0.179893,0.459749,0.869638,0.501970,0.406610,0.008417,0.604904,0.742471,0.164484,0.480346,0.861518,0.501930,0.403290,-0.000018,0.617636,0.736304,0.000227,0.464225,0.885717,0.500000,0.406660,-0.000029,0.605343,0.742731,0.000126,0.485829,0.874054,0.500000,0.403370,-0.008706,0.617284,0.735980,-0.179730,0.459641,0.869728,0.498020,0.406610,-0.008473,0.604907,0.742475,-0.164092,0.480376,0.861576,0.498060,0.403290,-0.342587,0.617260,0.157177,-0.956891,-0.086966,-0.277123,0.901940,0.652740,-0.342351,0.595742,0.164573,-0.995007,-0.090697,0.041655,0.905340,0.645210,-0.344439,0.618547,0.163779,-0.988147,-0.088311,0.125562,0.903640,0.653640,-0.340172,0.593568,0.158953,-0.937062,-0.145915,-0.317213,0.903560,0.643850,0.342351,0.595742,0.164573,0.995004,-0.090696,0.041725,0.094310,0.643920,0.342587,0.617260,0.157177,0.956890,-0.086966,-0.277126,0.097710,0.651450,0.344439,0.618547,0.163779,0.988143,-0.088318,0.125592,0.096000,0.652340,0.340172,0.593568,0.158953,0.937067,-0.145915,-0.317199,0.096090,0.642560,-0.336995,0.568678,0.164702,-0.894880,-0.283558,-0.344652,0.908090,0.633820,-0.339674,0.570793,0.169586,-0.980054,-0.190231,-0.057500,0.909830,0.635190,0.339674,0.570793,0.169586,0.980067,-0.190202,-0.057372,0.089830,0.633900,0.336995,0.568678,0.164702,0.894893,-0.283553,-0.344623,0.091570,0.632530,-0.015265,0.091460,0.438383,-0.359504,-0.556724,0.748876,0.493950,0.207280,-0.024396,0.088928,0.431264,-0.473864,-0.511062,0.717125,0.489690,0.203610,-0.016994,0.083598,0.431864,-0.373752,-0.546264,0.749603,0.493060,0.202340,-0.021967,0.094859,0.437131,-0.459388,-0.523179,0.717806,0.491090,0.207790,-0.030312,0.095572,0.431686,-0.529136,-0.487733,0.694357,0.486690,0.205600,-0.026677,0.097858,0.436064,-0.511415,-0.501930,0.697511,0.488820,0.208220,-0.036251,0.091747,0.424500,-0.552025,-0.475195,0.685170,0.482930,0.201080,-0.028690,0.082126,0.423565,-0.501379,-0.506045,0.701810,0.487110,0.197920,-0.019877,0.074565,0.423806,-0.404223,-0.548853,0.731686,0.491480,0.195910,0.092101,0.406611,0.662936,-0.767913,-0.292678,-0.569780,0.526400,0.342670,0.093913,0.407379,0.659070,-0.848793,-0.228394,-0.476851,0.526397,0.342662,0.092651,0.406048,0.661036,-0.691239,-0.309458,-0.653012,0.526868,0.342328,0.094523,0.404788,0.661236,-0.865651,-0.076043,-0.494839,0.526841,0.342336,0.108693,0.367922,0.574906,-0.965400,0.259168,-0.028889,0.526329,0.342472,-0.108098,0.409878,0.502402,0.990380,-0.118107,0.072102,0.473648,0.342505,-0.108906,0.414481,0.574921,0.991603,-0.129277,-0.003386,0.473634,0.342547,-0.008711,0.080097,0.432552,-0.214584,-0.584120,0.782789,0.496540,0.201620,-0.007787,0.088971,0.439400,-0.206286,-0.590890,0.779933,0.496970,0.206920,-0.010169,0.069645,0.424395,-0.234031,-0.595456,0.768545,0.495800,0.194800,0.005769,0.246876,0.643153,-0.097849,-0.922449,0.373515,0.501690,0.299140,0.0,0.079316,-0.251816,0.000000,0.676951,-0.736028,1.0,0.059510,0.045286,0.103183,-0.229383,0.024319,0.684005,-0.729072,0.974050,0.067970,0.050884,0.080158,-0.250561,0.022825,0.680491,-0.732401,0.978390,0.049160,0.0,0.102574,-0.230485,0.000000,0.680423,-0.732820,0.992050,0.076530,0.038324,0.133961,-0.200542,0.028452,0.689300,-0.723917,0.969950,0.085040,0.0,0.133785,-0.201315,0.000000,0.685253,-0.728305,0.984940,0.092110,0.085390,0.136062,-0.195586,0.062767,0.699840,-0.711536,0.950700,0.076910,0.096639,0.106777,-0.223201,0.058293,0.693480,-0.718113,0.952960,0.059140,0.105592,0.084718,-0.243584,0.056790,0.690045,-0.721535,0.955220,0.039460,0.020388,0.260088,0.667502,0.026706,-0.788640,0.614276,0.505310,0.306180,-0.085390,0.136062,-0.195586,-0.062767,0.699841,-0.711536,0.049290,0.076910,-0.045286,0.103183,-0.229383,-0.024319,0.684005,-0.729072,0.025940,0.067970,-0.096639,0.106777,-0.223201,-0.058293,0.693480,-0.718114,0.047030,0.059140,-0.038324,0.133961,-0.200542,-0.028452,0.689300,-0.723917,0.030040,0.085040,0.0,0.102574,-0.230485,0.000000,0.680423,-0.732820,0.007940,0.076530,0.0,0.133785,-0.201315,0.000000,0.685253,-0.728305,0.015050,0.092110,0.0,0.079316,-0.251816,0.000000,0.676951,-0.736028,0.0,0.059510,-0.050884,0.080158,-0.250561,-0.022825,0.680490,-0.732402,0.021600,0.049160,-0.105592,0.084718,-0.243584,-0.056790,0.690044,-0.721536,0.044770,0.039460,0.007578,0.589889,0.751389,0.148697,0.508423,0.848172,0.501650,0.398840,-0.000024,0.590245,0.751618,-0.000029,0.514832,0.857291,0.500000,0.398950,-0.007621,0.589888,0.751386,-0.148585,0.508130,0.848367,0.498340,0.398840,-0.012118,0.057337,0.413971,-0.262647,-0.612880,0.745248,0.494790,0.185930,0.0,0.054957,0.414199,-0.000001,-0.640256,0.768162,0.500000,0.185410,-0.023630,0.064039,0.413409,-0.436353,-0.558134,0.705750,0.489270,0.187540,-0.028371,0.051700,0.400189,-0.425070,-0.516437,0.743376,0.486760,0.176710,-0.014697,0.042578,0.400554,-0.266779,-0.573426,0.774605,0.493630,0.174090,-0.306644,0.619745,0.162303,-0.517168,-0.023985,-0.855548,0.884540,0.648160,-0.318456,0.618173,0.162498,0.316862,-0.018205,-0.948297,0.890450,0.649350,-0.317599,0.594941,0.165196,0.344956,-0.170351,-0.923031,0.894460,0.638190,-0.305554,0.595921,0.165311,0.024325,-0.214969,-0.976318,0.890120,0.635320,0.0,0.039011,0.400875,-0.000001,-0.608093,0.793866,0.500000,0.172820,0.012118,0.057337,0.413971,0.262648,-0.612879,0.745248,0.505200,0.185930,0.023630,0.064039,0.413409,0.436354,-0.558132,0.705751,0.510720,0.187540,0.014697,0.042578,0.400554,0.266778,-0.573426,0.774605,0.506360,0.174090,0.306644,0.619745,0.162303,0.517168,-0.023984,-0.855548,0.115100,0.646880,0.318456,0.618173,0.162498,-0.316859,-0.018202,-0.948298,0.109190,0.648070,0.305553,0.595921,0.165311,-0.024330,-0.214965,-0.976319,0.109540,0.634050,0.317598,0.594941,0.165196,-0.344946,-0.170346,-0.923036,0.105190,0.636910,-0.313665,0.694712,0.180832,0.360943,0.584429,-0.726748,0.898730,0.688400,-0.304343,0.694217,0.180519,-0.460994,0.635173,-0.619709,0.895960,0.692150,-0.311326,0.706894,0.194561,0.412949,0.768540,-0.488692,0.905940,0.695830,-0.303348,0.705683,0.194900,-0.359545,0.825733,-0.434617,0.904230,0.699160,0.313665,0.694712,0.180832,-0.360944,0.584429,-0.726748,0.100910,0.687080,0.311326,0.706894,0.194561,-0.412950,0.768540,-0.488691,0.093700,0.694500,0.304343,0.694217,0.180519,0.460994,0.635173,-0.619710,0.103670,0.690830,0.303349,0.705683,0.194900,0.359547,0.825729,-0.434622,0.095410,0.697830,-0.309637,0.714352,0.213895,0.411864,0.890145,-0.194960,0.915980,0.700970,-0.302393,0.712612,0.214879,-0.315641,0.934862,-0.162494,0.915280,0.704290,0.309637,0.714352,0.213895,-0.411865,0.890158,-0.194899,0.083680,0.699650,0.302393,0.712612,0.214879,0.315716,0.934822,-0.162576,0.084370,0.702970,-0.296041,0.719410,0.214272,-0.910341,0.410672,-0.051267,0.255180,0.414420,-0.291891,0.740105,0.206233,-0.998556,0.053541,-0.004420,0.251540,0.421610,-0.302393,0.712612,0.214879,-0.315641,0.934862,-0.162494,0.255270,0.411840,-0.295800,0.713261,0.190763,-0.907084,0.389481,-0.159694,0.245620,0.409910,-0.303348,0.705683,0.194900,-0.359545,0.825733,-0.434617,0.247050,0.407130,-0.292530,0.731265,0.178964,-0.997915,0.062242,-0.017090,0.240610,0.416450,-0.294686,0.779653,0.185576,-0.998396,-0.054760,0.014377,0.240990,0.436320,-0.294361,0.764779,0.154872,-0.998958,-0.044515,0.010116,0.229690,0.429050,-0.298057,0.831796,0.157265,-0.999787,-0.018005,-0.010127,0.226940,0.455040,-0.296775,0.807584,0.122199,-0.999001,-0.025768,-0.036500,0.215280,0.444390,0.296042,0.719410,0.214272,0.910349,0.410632,-0.051440,0.744810,0.414420,0.291891,0.740105,0.206233,0.998553,0.053585,-0.004516,0.748450,0.421610,0.292530,0.731265,0.178964,0.997914,0.062244,-0.017097,0.759380,0.416450,0.295800,0.713261,0.190763,0.907084,0.389478,-0.159706,0.754370,0.409910,0.302393,0.712612,0.214879,0.315716,0.934822,-0.162576,0.744720,0.411840,0.303349,0.705683,0.194900,0.359547,0.825729,-0.434622,0.752940,0.407130,0.294686,0.779653,0.185576,0.998396,-0.054757,0.014365,0.759000,0.436320,0.298057,0.831796,0.157265,0.999787,-0.018005,-0.010127,0.773050,0.455040,0.294361,0.764779,0.154872,0.998957,-0.044516,0.010115,0.770300,0.429050,0.296775,0.807584,0.122199,0.999001,-0.025768,-0.036500,0.784710,0.444390,-0.292969,0.715810,0.156187,-0.996762,0.060828,-0.052590,0.232200,0.408880,-0.296726,0.701647,0.172003,-0.920778,0.308922,-0.238190,0.238450,0.404230,-0.304343,0.694217,0.180519,-0.460994,0.635173,-0.619709,0.241060,0.401930,0.292969,0.715810,0.156187,0.996762,0.060828,-0.052590,0.767790,0.408880,0.296726,0.701647,0.172003,0.920778,0.308922,-0.238190,0.761540,0.404230,0.304343,0.694217,0.180519,0.460994,0.635173,-0.619710,0.758940,0.401930,0.028371,0.051700,0.400189,0.425071,-0.516437,0.743376,0.513230,0.176710,0.159592,0.933307,0.609337,0.564714,0.392237,0.726119,0.567730,0.524220,0.161052,0.896399,0.626724,0.571719,0.345129,0.744327,0.564200,0.508150,0.184934,0.930420,0.589117,0.678485,0.349552,0.646121,0.580790,0.523140,0.185352,0.893002,0.606565,0.686702,0.308888,0.658049,0.576490,0.506580,0.163831,0.863489,0.639102,0.574225,0.324692,0.751559,0.562290,0.494960,0.187326,0.860328,0.619281,0.692246,0.299054,0.656781,0.573900,0.492960,0.209259,0.855737,0.594255,0.827399,0.225622,0.514301,0.586110,0.490440,0.209131,0.886807,0.580510,0.815014,0.232508,0.530747,0.589910,0.503790,-0.296605,0.620728,0.145967,-0.897158,-0.040473,-0.439852,0.230510,0.370520,-0.284942,0.593798,0.125296,-0.933648,-0.134110,-0.332138,0.223740,0.357570,-0.296104,0.595188,0.147461,-0.888178,-0.134112,-0.439492,0.232490,0.360130,-0.286997,0.620569,0.122892,-0.952635,-0.087148,-0.291360,0.221720,0.368700,-0.306644,0.619745,0.162303,-0.517168,-0.023985,-0.855548,0.235690,0.371430,-0.305554,0.595921,0.165311,-0.880830,-0.141746,-0.451716,0.237680,0.361730,0.209850,0.923094,0.561933,0.802756,0.271105,0.531117,0.595680,0.520160,0.229306,0.876426,0.544954,0.911317,0.125533,0.392100,0.606650,0.499840,0.234468,0.909654,0.524292,0.906076,0.156582,0.393076,0.615190,0.514150,0.225944,0.848133,0.560567,0.918699,0.128833,0.373354,0.600840,0.488150,0.296605,0.620728,0.145967,0.897158,-0.040472,-0.439852,0.769480,0.370520,0.296104,0.595188,0.147461,0.888179,-0.134113,-0.439489,0.767500,0.360130,0.284942,0.593798,0.125296,0.933648,-0.134111,-0.332139,0.776250,0.357570,0.286997,0.620569,0.122892,0.952635,-0.087147,-0.291361,0.778270,0.368700,0.306644,0.619745,0.162303,0.517168,-0.023984,-0.855548,0.764310,0.371430,0.305553,0.595921,0.165311,0.880833,-0.141748,-0.451709,0.762310,0.361730,-0.315143,0.573860,0.172064,0.341819,-0.262988,-0.902218,0.899840,0.628140,-0.309724,0.554405,0.180199,0.234282,-0.428701,-0.872541,0.907200,0.618020,-0.302705,0.575402,0.172133,0.007490,-0.329954,-0.943967,0.896160,0.624800,-0.298200,0.555484,0.178534,-0.587168,-0.489797,-0.644464,0.903760,0.614620,0.315142,0.573860,0.172064,-0.341802,-0.262989,-0.902224,0.099820,0.626850,0.302705,0.575402,0.172133,-0.007499,-0.329950,-0.943969,0.103510,0.623520,0.309723,0.554405,0.180199,-0.234265,-0.428708,-0.872542,0.092470,0.616720,0.298199,0.555484,0.178534,0.587172,-0.489796,-0.644460,0.095910,0.613320,0.158714,0.522158,-0.051704,0.374272,-0.325313,-0.868384,0.875710,0.311380,0.168134,0.404260,-0.023051,0.490143,-0.064500,-0.869252,0.857020,0.246350,0.180130,0.520998,-0.041512,0.533508,-0.316001,-0.784546,0.864310,0.312310,0.197726,0.404519,-0.000923,0.693271,-0.050930,-0.718875,0.836960,0.248960,-0.168134,0.404260,-0.023051,-0.490143,-0.064500,-0.869252,0.142970,0.246350,-0.158714,0.522158,-0.051704,-0.374273,-0.325313,-0.868384,0.124280,0.311380,-0.197726,0.404519,-0.000923,-0.693271,-0.050930,-0.718875,0.163040,0.248960,-0.180130,0.520998,-0.041512,-0.533507,-0.316001,-0.784547,0.135680,0.312310,0.229062,0.524523,0.001375,0.799715,-0.274323,-0.534044,0.833040,0.318590,0.229577,0.465670,0.027775,0.838953,-0.182243,-0.512781,0.818260,0.289020,0.204327,0.522682,-0.024971,0.678824,-0.300655,-0.669929,0.849890,0.315320,0.216671,0.443659,0.014025,0.791120,-0.140636,-0.595274,0.827440,0.275060,-0.204327,0.522682,-0.024971,-0.678824,-0.300655,-0.669929,0.150100,0.315320,-0.229577,0.465670,0.027775,-0.838953,-0.182242,-0.512781,0.181730,0.289020,-0.229062,0.524523,0.001375,-0.799715,-0.274323,-0.534044,0.166950,0.318590,-0.216671,0.443659,0.014025,-0.791120,-0.140636,-0.595273,0.172550,0.275060,-0.282227,0.568491,0.130415,-0.922474,-0.201435,-0.329340,0.227090,0.347120,-0.293516,0.571900,0.151335,-0.886562,-0.242570,-0.393914,0.235740,0.350900,-0.302705,0.575402,0.172133,-0.892555,-0.255779,-0.371380,0.240980,0.353440,-0.289387,0.549167,0.160252,-0.898491,-0.330600,-0.288821,0.241610,0.341910,-0.298200,0.555484,0.178534,-0.587168,-0.489797,-0.644464,0.246990,0.345610,-0.279380,0.542985,0.140402,-0.938951,-0.241541,-0.245010,0.233100,0.336610,0.282227,0.568491,0.130415,0.922474,-0.201436,-0.329342,0.772900,0.347120,0.293516,0.571900,0.151335,0.886564,-0.242570,-0.393908,0.764250,0.350900,0.279380,0.542985,0.140402,0.938950,-0.241541,-0.245011,0.766890,0.336610,0.289387,0.549167,0.160252,0.898494,-0.330598,-0.288816,0.758380,0.341910,0.302705,0.575402,0.172133,0.892560,-0.255779,-0.371368,0.759010,0.353440,0.298199,0.555484,0.178534,0.587172,-0.489796,-0.644460,0.753000,0.345610,-0.290073,0.511368,0.213354,-0.032606,-0.656002,-0.754054,0.930250,0.598170,-0.279794,0.491516,0.231703,-0.335157,-0.811165,-0.479251,0.942680,0.590930,-0.275114,0.488953,0.227720,-0.806621,-0.561988,-0.183115,0.941890,0.587160,-0.283095,0.509908,0.209578,-0.706275,-0.572840,-0.415969,0.928670,0.594610,0.290073,0.511368,0.213354,0.032611,-0.656007,-0.754050,0.069410,0.596860,0.279794,0.491516,0.231703,0.335154,-0.811167,-0.479250,0.056990,0.589610,0.275114,0.488953,0.227720,0.806624,-0.561985,-0.183111,0.057780,0.585850,0.283095,0.509908,0.209578,0.706282,-0.572836,-0.415962,0.071000,0.593290,-0.270699,0.472512,0.203729,-0.984791,-0.172408,0.021511,0.272010,0.310450,-0.277878,0.502677,0.196450,-0.930353,-0.340503,-0.136020,0.263840,0.323740,-0.273490,0.491627,0.178608,-0.970604,-0.218087,-0.101818,0.256580,0.315950,-0.272632,0.482859,0.217226,-0.953793,-0.300462,0.001325,0.276740,0.317670,-0.283095,0.509908,0.209578,-0.706275,-0.572840,-0.415969,0.268800,0.329440,-0.275114,0.488953,0.227720,-0.806621,-0.561988,-0.183115,0.280140,0.322930,0.277878,0.502677,0.196450,0.930355,-0.340500,-0.136016,0.736150,0.323740,0.270699,0.472512,0.203729,0.984791,-0.172407,0.021512,0.727980,0.310450,0.273490,0.491627,0.178608,0.970604,-0.218086,-0.101818,0.743410,0.315950,0.272632,0.482859,0.217226,0.953793,-0.300460,0.001327,0.723250,0.317670,0.275114,0.488953,0.227720,0.806624,-0.561985,-0.183111,0.719850,0.322930,0.283095,0.509908,0.209578,0.706282,-0.572836,-0.415962,0.731190,0.329440,-0.266200,0.430552,0.168403,-0.993708,-0.101887,-0.046509,0.262960,0.287760,-0.270320,0.477921,0.157733,-0.985952,-0.132818,-0.101285,0.249040,0.307770,-0.263543,0.456340,0.122093,-0.974199,-0.106070,-0.199210,0.235950,0.294680,-0.268989,0.456512,0.188574,-0.993380,-0.114722,-0.005983,0.267620,0.301820,0.270320,0.477921,0.157733,0.985952,-0.132818,-0.101285,0.750950,0.307770,0.266200,0.430551,0.168403,0.993708,-0.101888,-0.046509,0.737030,0.287760,0.263543,0.456340,0.122093,0.974199,-0.106070,-0.199210,0.764040,0.294680,0.268989,0.456511,0.188574,0.993380,-0.114722,-0.005983,0.732370,0.301820,-0.257827,0.341957,0.118788,-0.998841,-0.011962,-0.046625,0.254240,0.233610,-0.255737,0.405973,0.099763,-0.967665,-0.023614,-0.251131,0.230980,0.265270,-0.251639,0.356845,0.078829,-0.957965,0.055413,-0.281484,0.226830,0.233650,-0.261033,0.389448,0.143133,-0.995379,-0.073499,-0.061801,0.257610,0.263440,0.257827,0.341957,0.118788,0.998841,-0.011962,-0.046625,0.745750,0.233610,0.255737,0.405973,0.099763,0.967665,-0.023614,-0.251131,0.769010,0.265270,0.261033,0.389448,0.143133,0.995379,-0.073499,-0.061801,0.742380,0.263440,0.251639,0.356845,0.078829,0.957965,0.055413,-0.281484,0.773160,0.233650,0.250390,0.524728,0.039400,0.899503,-0.223114,-0.375651,0.812580,0.320610,0.245555,0.460758,0.062543,0.908858,-0.140961,-0.392565,0.797930,0.290090,0.263945,0.527322,0.080824,0.958173,-0.164915,-0.233894,0.792490,0.324110,0.271780,0.534542,0.114498,0.970602,-0.158567,-0.181075,0.777790,0.330150,-0.245555,0.460758,0.062543,-0.908858,-0.140961,-0.392565,0.202060,0.290090,-0.237265,0.421517,0.052745,-0.891327,-0.043554,-0.451264,0.200320,0.267000,-0.230377,0.375105,0.038572,-0.856850,0.054627,-0.512663,0.196310,0.237120,-0.250390,0.524728,0.039400,-0.899503,-0.223114,-0.375652,0.187410,0.320610,-0.263945,0.527322,0.080824,-0.958173,-0.164916,-0.233895,0.207500,0.324110,-0.271780,0.534542,0.114498,-0.970602,-0.158568,-0.181075,0.222200,0.330150,0.237265,0.421517,0.052745,0.891327,-0.043554,-0.451264,0.799670,0.267000,0.230377,0.375105,0.038572,0.856850,0.054627,-0.512663,0.803680,0.237120,-0.277066,0.590344,0.096174,-0.967164,-0.148410,-0.206323,0.211830,0.353900,-0.266263,0.557497,0.067614,-0.955225,-0.180514,-0.234437,0.200360,0.337530,-0.273983,0.562449,0.102885,-0.962895,-0.164472,-0.213969,0.215550,0.342030,-0.269807,0.588521,0.059078,-0.959488,-0.177124,-0.219111,0.196270,0.351150,0.277066,0.590344,0.096174,0.967163,-0.148411,-0.206323,0.788160,0.353900,0.266263,0.557497,0.067614,0.955225,-0.180514,-0.234436,0.799630,0.337530,0.269807,0.588521,0.059078,0.959488,-0.177124,-0.219111,0.803720,0.351150,0.273983,0.562449,0.102886,0.962894,-0.164472,-0.213970,0.784440,0.342030,-0.258453,0.591730,0.014933,-0.914187,-0.230622,-0.333280,0.176970,0.351620,-0.233796,0.560257,-0.014211,-0.784760,-0.332685,-0.522946,0.161450,0.336180,-0.253524,0.557516,0.025642,-0.899610,-0.247308,-0.359919,0.181000,0.336030,-0.240359,0.596673,-0.028154,-0.813253,-0.299370,-0.498997,0.157700,0.353360,0.258453,0.591730,0.014933,0.914187,-0.230622,-0.333280,0.823020,0.351620,0.233796,0.560257,-0.014211,0.784761,-0.332685,-0.522945,0.838540,0.336180,0.240359,0.596673,-0.028154,0.813253,-0.299369,-0.498997,0.842290,0.353360,0.253524,0.557516,0.025642,0.899610,-0.247307,-0.359919,0.818990,0.336030,-0.274464,0.620900,0.053715,-0.965860,-0.165210,-0.199548,0.193880,0.365070,-0.280633,0.619545,0.092363,-0.974452,-0.133255,-0.180795,0.209490,0.366320,0.274464,0.620900,0.053715,0.965860,-0.165210,-0.199548,0.806110,0.365070,0.280633,0.619545,0.092363,0.974452,-0.133255,-0.180795,0.790500,0.366320,-0.246869,0.633801,-0.037028,-0.845641,-0.234413,-0.479522,0.156630,0.368990,-0.264346,0.626809,0.008197,-0.929845,-0.196828,-0.310883,0.175320,0.366640,0.246869,0.633801,-0.037028,0.845641,-0.234413,-0.479522,0.843360,0.368990,0.264346,0.626809,0.008197,0.929844,-0.196828,-0.310883,0.824670,0.366640,-0.185470,0.893017,0.606583,-0.687299,0.313639,0.655172,0.423500,0.506580,-0.209837,0.855774,0.594396,-0.827269,0.232139,0.511604,0.413880,0.490440,-0.187617,0.860347,0.619347,-0.690554,0.304336,0.656137,0.426090,0.492960,-0.208899,0.886805,0.580403,-0.814840,0.240032,0.527656,0.410080,0.503790,-0.161202,0.896414,0.626751,-0.573134,0.346159,0.742759,0.435800,0.508150,-0.164041,0.863510,0.639144,-0.572873,0.327408,0.751412,0.437700,0.494960,-0.159684,0.933314,0.609355,-0.567972,0.391570,0.723935,0.432260,0.524220,-0.184687,0.930411,0.589019,-0.680173,0.348338,0.645000,0.419200,0.523140,-0.209837,0.923106,0.561914,-0.802927,0.268932,0.531962,0.404310,0.520160,-0.229191,0.876424,0.544902,-0.910759,0.134143,0.390543,0.393340,0.499840,-0.226317,0.848135,0.560653,-0.919305,0.132616,0.370529,0.399150,0.488150,-0.234325,0.909652,0.524236,-0.906254,0.155856,0.392953,0.384800,0.514150,0.322982,0.657241,0.215448,0.778600,-0.103337,0.618954,0.072080,0.668650,0.333407,0.676648,0.200562,0.879160,-0.033603,0.475340,0.081360,0.673820,0.310162,0.642943,0.224896,0.578623,-0.393088,0.714617,0.064290,0.664830,-0.294013,0.772558,0.090165,-0.996531,-0.034582,-0.075697,0.204970,0.428890,-0.293723,0.741143,0.127919,-0.999222,-0.036089,-0.015902,0.220350,0.418050,0.294013,0.772558,0.090165,0.996531,-0.034583,-0.075697,0.795020,0.428890,0.293723,0.741143,0.127919,0.999222,-0.036090,-0.015902,0.779640,0.418050,-0.285499,0.940655,0.096252,-0.960811,0.219902,-0.168775,0.198340,0.492010,-0.296111,0.912479,0.170658,-0.994594,0.096675,-0.037900,0.227060,0.486190,-0.284802,0.972363,0.150177,-0.958919,0.264057,-0.103678,0.215110,0.507180,-0.296173,0.887622,0.126476,-0.994348,0.077373,-0.072700,0.212480,0.474310,-0.294358,0.851899,0.084750,-0.990771,0.044951,-0.127874,0.199750,0.459050,-0.283543,0.894512,0.045883,-0.954773,0.152597,-0.255191,0.183960,0.472660,-0.276075,0.835129,0.000007,-0.937494,0.083635,-0.337803,0.170370,0.448190,-0.289453,0.804057,0.046034,-0.982217,0.009222,-0.187523,0.187960,0.438640,0.285499,0.940655,0.096252,0.960811,0.219902,-0.168776,0.801660,0.492010,0.296112,0.912479,0.170658,0.994594,0.096675,-0.037900,0.772930,0.486190,0.296173,0.887622,0.126476,0.994348,0.077373,-0.072700,0.787510,0.474310,0.284802,0.972363,0.150177,0.958919,0.264057,-0.103678,0.784880,0.507180,0.283543,0.894512,0.045883,0.954773,0.152597,-0.255191,0.816030,0.472660,0.294358,0.851899,0.084750,0.990771,0.044951,-0.127874,0.800240,0.459050,0.276075,0.835129,0.000007,0.937494,0.083635,-0.337803,0.829620,0.448190,0.289453,0.804057,0.046034,0.982217,0.009221,-0.187523,0.812030,0.438640,-0.284438,0.990147,0.208000,-0.957331,0.286205,-0.040038,0.235580,0.518430,-0.295804,0.928929,0.217765,-0.994328,0.106251,-0.004807,0.244130,0.496240,0.284438,0.990147,0.208000,0.957330,0.286215,-0.040003,0.764410,0.518430,0.295804,0.928929,0.217765,0.994324,0.106283,-0.004827,0.755860,0.496240,-0.224382,0.826539,0.573347,-0.925368,0.130829,0.355777,0.403760,0.480580,-0.209496,0.832309,0.605555,-0.834144,0.228547,0.501967,0.417450,0.482280,0.224156,0.826520,0.573319,0.922873,0.138241,0.359436,0.596230,0.480580,0.208998,0.832289,0.605436,0.832755,0.227497,0.504742,0.582540,0.482280,-0.188993,0.836012,0.629294,-0.690513,0.306574,0.655137,0.428550,0.484330,-0.166637,0.838615,0.648191,-0.563837,0.325551,0.759016,0.439190,0.486070,0.188634,0.835977,0.629201,0.693606,0.300054,0.654888,0.571440,0.484330,0.166221,0.838594,0.648085,0.566932,0.321376,0.758489,0.560800,0.486070,-0.136410,0.863689,0.656972,-0.450142,0.324480,0.831917,0.450010,0.495380,-0.139106,0.838228,0.665179,-0.430730,0.310526,0.847376,0.450820,0.486500,-0.105147,0.860996,0.671744,-0.321686,0.297661,0.898842,0.462550,0.494690,-0.107323,0.834393,0.679648,-0.294506,0.281319,0.913305,0.463000,0.485720,0.136291,0.863675,0.656951,0.450372,0.324159,0.831917,0.549980,0.495380,0.138908,0.838208,0.665135,0.432671,0.308564,0.847104,0.549170,0.486500,0.107065,0.834374,0.679583,0.295819,0.280360,0.913175,0.536990,0.485720,0.105055,0.860989,0.671730,0.321730,0.299091,0.898351,0.537440,0.494690,-0.042398,0.822042,0.694474,-0.071688,0.229716,0.970614,0.486600,0.481840,-0.073052,0.827960,0.689339,-0.170453,0.254327,0.951979,0.475540,0.483830,-0.072192,0.856938,0.681728,-0.200294,0.260875,0.944366,0.475160,0.493380,-0.042709,0.853654,0.686947,-0.106170,0.230177,0.967340,0.486190,0.492260,0.042312,0.822034,0.694464,0.071075,0.229542,0.970700,0.513390,0.481840,0.072973,0.827957,0.689342,0.171060,0.253969,0.951965,0.524450,0.483830,0.042558,0.853642,0.686923,0.105898,0.230552,0.967281,0.513800,0.492260,0.072150,0.856937,0.681741,0.200993,0.262298,0.943823,0.524830,0.493380,-0.000189,0.818409,0.695579,0.000618,0.193973,0.981007,0.500000,0.480930,-0.019031,0.819142,0.695783,-0.007543,0.205160,0.978699,0.494140,0.481010,-0.019503,0.852614,0.688743,-0.038131,0.209677,0.977027,0.493890,0.492400,-0.000098,0.852673,0.689170,0.000535,0.201526,0.979483,0.500000,0.492800,0.018887,0.819135,0.695761,0.008198,0.205271,0.978671,0.505850,0.481010,0.019176,0.852604,0.688707,0.038534,0.209391,0.977072,0.506100,0.492400,-0.019608,0.890181,0.680763,-0.051676,0.277683,0.959282,0.493710,0.504670,-0.042847,0.890338,0.678316,-0.134828,0.286052,0.948681,0.485810,0.504490,-0.042620,0.931457,0.663727,-0.155891,0.393284,0.906105,0.485060,0.520260,-0.019568,0.931381,0.665765,-0.057182,0.387014,0.920299,0.493390,0.520210,-0.000007,0.890396,0.681088,0.000276,0.277240,0.960801,0.500000,0.505120,0.000095,0.931424,0.665906,0.000363,0.385255,0.922810,0.500000,0.520470,0.019453,0.890182,0.680785,0.052248,0.277527,0.959296,0.506280,0.504670,0.042690,0.890333,0.678300,0.135575,0.286063,0.948571,0.514180,0.504490,0.019528,0.931374,0.665728,0.057984,0.387232,0.920157,0.506600,0.520210,0.042470,0.931449,0.663694,0.156369,0.393250,0.906037,0.514930,0.520260,-0.071869,0.891865,0.672166,-0.238779,0.310314,0.920157,0.474480,0.505450,-0.103731,0.894191,0.660808,-0.353967,0.339738,0.871370,0.461510,0.506790,-0.071013,0.931796,0.656694,-0.268628,0.403897,0.874474,0.473070,0.521190,-0.102490,0.932525,0.644212,-0.374378,0.412128,0.830657,0.459330,0.522430,-0.132486,0.933533,0.627949,-0.471913,0.409678,0.780680,0.445740,0.523700,-0.133701,0.896336,0.644913,-0.465332,0.355003,0.810826,0.448600,0.507960,0.071522,0.891825,0.672086,0.240165,0.310687,0.919671,0.525510,0.505450,0.070954,0.931793,0.656685,0.269807,0.402865,0.874588,0.526930,0.521190,0.103202,0.894160,0.660680,0.353805,0.340768,0.871033,0.538480,0.506790,0.102306,0.932517,0.644179,0.375311,0.410478,0.831053,0.540660,0.522430,0.132175,0.933500,0.627868,0.470679,0.408935,0.781814,0.554250,0.523700,0.133481,0.896316,0.644856,0.463499,0.356198,0.811352,0.551390,0.507960,-0.244199,0.971966,0.463354,-0.894154,0.280045,0.349377,0.354330,0.543060,-0.239671,0.942885,0.496105,-0.904058,0.206041,0.374467,0.371470,0.529150,-0.218713,0.992320,0.501678,-0.795015,0.420199,0.437475,0.378700,0.554110,-0.213640,0.959025,0.535967,-0.797381,0.334700,0.502154,0.394200,0.536850,0.244053,0.971949,0.463315,0.894140,0.280732,0.348862,0.645660,0.543060,0.239638,0.942880,0.496101,0.903367,0.210104,0.373877,0.628520,0.529150,0.213533,0.959011,0.535943,0.797323,0.336735,0.500884,0.605790,0.536850,0.218636,0.992314,0.501659,0.794994,0.420019,0.437685,0.621290,0.554110,-0.192590,1.003664,0.529035,-0.666453,0.519409,0.534841,0.397290,0.559580,-0.187520,0.967143,0.564280,-0.671843,0.422267,0.608537,0.411020,0.540080,-0.166260,1.010509,0.549261,-0.550631,0.579915,0.600420,0.413430,0.563010,-0.162009,0.970882,0.585343,-0.561327,0.472498,0.679454,0.425370,0.541450,0.192465,1.003651,0.529002,0.665046,0.520288,0.535737,0.602700,0.559580,0.187471,0.967137,0.564268,0.670164,0.425483,0.608148,0.588970,0.540080,0.161847,0.970871,0.585312,0.558211,0.475738,0.679760,0.574620,0.541450,0.165907,1.010486,0.549167,0.548397,0.581072,0.601346,0.586560,0.563010,-0.103418,0.975270,0.620053,-0.380239,0.509642,0.771805,0.455340,0.542310,-0.133766,0.973327,0.603999,-0.472592,0.495278,0.728942,0.440300,0.542120,-0.137551,1.016798,0.567158,-0.468476,0.608798,0.640231,0.430490,0.566280,-0.106011,1.022571,0.582193,-0.378537,0.631939,0.676286,0.447880,0.568980,0.103181,0.975255,0.619994,0.381279,0.510039,0.771030,0.544650,0.542310,0.133708,0.973324,0.603984,0.471865,0.496623,0.728498,0.559690,0.542120,0.136992,1.016759,0.567007,0.468085,0.608930,0.640391,0.569500,0.566280,0.105668,1.022553,0.582102,0.380239,0.631120,0.676096,0.552110,0.568980,-0.071406,0.977043,0.632457,-0.284573,0.517604,0.806910,0.470370,0.542350,-0.042427,0.978337,0.640014,-0.186263,0.515400,0.836462,0.483490,0.542180,-0.073195,1.027117,0.593314,-0.290927,0.647524,0.704325,0.465140,0.570960,-0.043483,1.030270,0.601092,-0.213714,0.653975,0.725702,0.480310,0.571800,0.071222,0.977035,0.632430,0.285331,0.517626,0.806629,0.529620,0.542350,0.042148,0.978330,0.639989,0.186341,0.515184,0.836578,0.516500,0.542180,0.073127,1.027114,0.593299,0.292228,0.646805,0.704448,0.534850,0.570960,0.043431,1.030267,0.601086,0.214020,0.653569,0.725977,0.519680,0.571800,-0.019415,0.978995,0.643132,-0.086105,0.505580,0.858472,0.492680,0.542140,-0.019891,1.031757,0.605886,-0.119752,0.656868,0.744435,0.491220,0.571640,-0.000159,0.979187,0.643751,0.000207,0.499583,0.866266,0.500000,0.542190,-0.000022,1.032069,0.607525,0.000001,0.658013,0.753007,0.500000,0.571460,0.019835,1.031757,0.605883,0.119957,0.656655,0.744590,0.508770,0.571640,0.019140,0.978996,0.643137,0.086710,0.505309,0.858571,0.507310,0.542140,-0.244199,0.971966,0.463354,-0.894154,0.280045,0.349377,0.346310,0.550270,-0.222083,1.021470,0.457859,-0.789095,0.487278,0.374018,0.334470,0.572820,-0.248487,0.994756,0.428249,-0.879099,0.352258,0.321091,0.326370,0.551610,-0.218713,0.992320,0.501678,-0.795015,0.420199,0.437475,0.359690,0.572570,-0.255057,1.014837,0.386263,-0.875527,0.405852,0.262176,0.305280,0.551270,-0.227951,1.049345,0.405105,-0.779748,0.548760,0.301422,0.307330,0.571710,0.222051,1.021467,0.457850,0.789246,0.486658,0.374506,0.665520,0.572820,0.244053,0.971949,0.463315,0.894140,0.280732,0.348862,0.653690,0.550270,0.248443,0.994751,0.428236,0.879579,0.350414,0.321793,0.673620,0.551610,0.218636,0.992314,0.501659,0.794994,0.420019,0.437685,0.640300,0.572570,0.227938,1.049343,0.405101,0.779938,0.548394,0.301596,0.692670,0.571710,0.254986,1.014832,0.386244,0.875696,0.405386,0.262335,0.694710,0.551270,-0.192590,1.003664,0.529035,-0.666453,0.519409,0.534841,0.368370,0.588760,-0.169637,1.053124,0.497174,-0.538880,0.679535,0.497836,0.343310,0.603730,-0.197365,1.040846,0.480552,-0.664744,0.601513,0.443054,0.339570,0.589170,-0.166260,1.010509,0.549261,-0.550631,0.579915,0.600420,0.374730,0.602930,-0.200577,1.074848,0.419615,-0.657507,0.673324,0.338112,0.308280,0.588380,-0.171498,1.092438,0.430747,-0.529815,0.761840,0.372688,0.308990,0.603240,0.169614,1.053123,0.497168,0.538463,0.678666,0.499470,0.656680,0.603730,0.192465,1.003651,0.529002,0.665046,0.520288,0.535737,0.631630,0.588760,0.197299,1.040839,0.480534,0.664384,0.601158,0.444075,0.660420,0.589170,0.165907,1.010486,0.549167,0.548397,0.581072,0.601346,0.625260,0.602930,0.171498,1.092438,0.430747,0.529943,0.761700,0.372792,0.691000,0.603240,0.200577,1.074848,0.419615,0.657621,0.673111,0.338314,0.691710,0.588380,-0.137551,1.016798,0.567158,-0.468476,0.608798,0.640231,0.380010,0.618420,-0.108920,1.071873,0.524965,-0.373437,0.745823,0.551627,0.349170,0.634100,-0.140082,1.063228,0.512043,-0.457855,0.716106,0.526841,0.346610,0.618790,-0.106011,1.022571,0.582193,-0.378537,0.631939,0.676286,0.384000,0.634530,-0.141717,1.105857,0.441002,-0.439904,0.807577,0.392814,0.309990,0.617580,-0.111181,1.116177,0.450208,-0.356738,0.841705,0.405304,0.310910,0.631730,0.136992,1.016759,0.567007,0.468085,0.608930,0.640391,0.619980,0.618420,0.108912,1.071872,0.524963,0.374579,0.744672,0.552408,0.650820,0.634100,0.105668,1.022553,0.582102,0.380239,0.631120,0.676096,0.615990,0.634530,0.140062,1.063226,0.512038,0.458301,0.714677,0.528392,0.653380,0.618790,0.111181,1.116177,0.450208,0.356714,0.841687,0.405362,0.689080,0.631730,0.141717,1.105857,0.441002,0.439944,0.807530,0.392867,0.690000,0.617580,-0.073195,1.027117,0.593314,-0.290927,0.647524,0.704325,0.386570,0.650810,-0.046938,1.082799,0.542625,-0.214375,0.782488,0.584599,0.351970,0.663610,-0.076844,1.078629,0.534983,-0.290890,0.767391,0.571396,0.350730,0.649520,-0.043483,1.030270,0.601092,-0.213714,0.653975,0.725702,0.388170,0.665260,-0.080218,1.124023,0.457952,-0.275426,0.867702,0.413803,0.311310,0.645960,-0.050755,1.128822,0.464861,-0.190356,0.887560,0.419526,0.311910,0.659410,0.073127,1.027114,0.593299,0.292228,0.646805,0.704448,0.613420,0.650810,0.046938,1.082799,0.542625,0.214597,0.782374,0.584669,0.648020,0.663610,0.043431,1.030267,0.601086,0.214020,0.653569,0.725977,0.611820,0.665260,0.076800,1.078627,0.534971,0.291534,0.766978,0.571623,0.649260,0.649520,0.050755,1.128822,0.464861,0.190432,0.887535,0.419544,0.688080,0.659410,0.080218,1.124023,0.457952,0.275443,0.867671,0.413858,0.688680,0.645960,-0.024419,1.130238,0.471053,-0.096331,0.901047,0.422888,0.313450,0.671230,-0.021975,1.084075,0.548386,-0.120606,0.795666,0.593608,0.353650,0.674820,0.0,1.130129,0.473840,-0.000000,0.905695,0.423929,0.313920,0.682190,0.0,1.084180,0.550831,0.000021,0.801927,0.597422,0.354500,0.684570,-0.019891,1.031757,0.605886,-0.119752,0.656868,0.744435,0.389290,0.675820,-0.000022,1.032069,0.607525,0.000001,0.658013,0.753007,0.389750,0.684450,0.024419,1.130238,0.471053,0.096330,0.901047,0.422888,0.686540,0.671230,0.021975,1.084075,0.548386,0.120646,0.795625,0.593654,0.646340,0.674820,0.019835,1.031757,0.605883,0.119957,0.656655,0.744590,0.610710,0.675820,0.0,1.084180,0.550831,0.000021,0.801927,0.597422,0.645490,0.684570,-0.000022,1.032069,0.607525,0.000001,0.658013,0.753007,0.610240,0.684450,0.0,1.130129,0.473840,-0.000000,0.905695,0.423929,0.686070,0.682190,-0.231492,1.072311,0.341066,-0.768920,0.610438,0.190073,0.277660,0.569160,-0.259308,1.033395,0.331655,-0.875573,0.453664,0.166018,0.279700,0.549870,-0.261492,1.044437,0.268079,-0.874887,0.481711,0.050271,0.252990,0.545740,-0.233059,1.085029,0.269449,-0.770723,0.634636,0.056763,0.247920,0.563680,0.231489,1.072310,0.341065,0.769052,0.610236,0.190187,0.722330,0.569160,0.259304,1.033395,0.331653,0.875749,0.453247,0.166228,0.720290,0.549870,0.261488,1.044437,0.268078,0.874993,0.481501,0.050441,0.747000,0.545740,0.233059,1.085030,0.269449,0.770738,0.634617,0.056779,0.752070,0.563680,-0.171718,1.121793,0.353342,-0.525099,0.818630,0.232630,0.273620,0.599940,-0.201933,1.101084,0.347971,-0.648043,0.731415,0.212302,0.275550,0.585420,-0.202934,1.115195,0.270324,-0.657236,0.750380,0.070502,0.243440,0.578880,-0.172806,1.137158,0.270906,-0.536105,0.839988,0.083740,0.239490,0.592430,0.171718,1.121793,0.353342,0.525099,0.818630,0.232629,0.726370,0.599940,0.201933,1.101084,0.347971,0.648084,0.731376,0.212310,0.724440,0.585420,0.172806,1.137158,0.270906,0.536106,0.839987,0.083740,0.760500,0.592430,0.202934,1.115195,0.270324,0.657243,0.750374,0.070506,0.756550,0.578880,-0.111678,1.148163,0.362607,-0.336578,0.907672,0.250693,0.270750,0.626560,-0.141571,1.136869,0.358219,-0.422813,0.872472,0.244995,0.272100,0.613530,-0.143080,1.153004,0.271263,-0.424689,0.900812,0.090424,0.235830,0.604880,-0.113886,1.164589,0.271354,-0.338004,0.936503,0.093356,0.232310,0.616670,0.111678,1.148163,0.362607,0.336579,0.907672,0.250692,0.729240,0.626560,0.141571,1.136869,0.358219,0.422814,0.872471,0.244995,0.727890,0.613530,0.113886,1.164589,0.271354,0.338005,0.936503,0.093355,0.767680,0.616670,0.143080,1.153004,0.271263,0.424689,0.900812,0.090424,0.764160,0.604880,-0.053549,1.161735,0.370388,-0.167661,0.951884,0.256527,0.268230,0.651640,-0.082149,1.156505,0.366458,-0.255685,0.932829,0.253879,0.269310,0.639290,-0.085202,1.173469,0.271224,-0.262370,0.960018,0.097604,0.228780,0.628050,-0.056749,1.179689,0.271689,-0.175689,0.978957,0.103805,0.225480,0.639420,0.053549,1.161735,0.370388,0.167660,0.951885,0.256527,0.731760,0.651640,0.082149,1.156505,0.366458,0.255685,0.932829,0.253879,0.730680,0.639290,0.056749,1.179689,0.271689,0.175689,0.978958,0.103805,0.774520,0.639420,0.085202,1.173469,0.271224,0.262371,0.960018,0.097604,0.771210,0.628050,0.0,1.164186,0.376777,0.000000,0.965616,0.259974,0.266910,0.675100,-0.026350,1.163834,0.374661,-0.077987,0.962750,0.258902,0.267970,0.663520,-0.028377,1.183064,0.273189,-0.084126,0.990365,0.109996,0.222670,0.651160,0.0,1.183982,0.274132,0.000000,0.993617,0.112808,0.219530,0.663140,0.0,1.164186,0.376777,0.000000,0.965616,0.259974,0.733080,0.675100,0.026350,1.163834,0.374661,0.077987,0.962750,0.258902,0.732020,0.663520,0.0,1.183982,0.274132,0.000000,0.993617,0.112808,0.780460,0.663140,0.028377,1.183064,0.273189,0.084127,0.990365,0.109996,0.777320,0.651160,-0.233615,1.081859,0.195199,-0.782515,0.617251,-0.081679,0.219920,0.553860,-0.235230,1.061199,0.120681,-0.796916,0.569229,-0.202247,0.194490,0.539300,-0.261907,1.041268,0.200713,-0.875796,0.477638,-0.069598,0.227340,0.537360,-0.262603,1.021942,0.133330,-0.881973,0.441352,-0.165322,0.204050,0.524490,0.261907,1.041268,0.200713,0.875804,0.477626,-0.069571,0.772650,0.537360,0.235230,1.061199,0.120681,0.796916,0.569229,-0.202247,0.805500,0.539300,0.233615,1.081859,0.195199,0.782519,0.617246,-0.081673,0.780070,0.553860,0.262603,1.021942,0.133330,0.881973,0.441352,-0.165322,0.795940,0.524490,-0.176923,1.135178,0.189375,-0.561854,0.822785,-0.085703,0.209390,0.579870,-0.205048,1.112705,0.191712,-0.682851,0.725890,-0.082450,0.214190,0.567810,-0.208474,1.091479,0.112674,-0.704009,0.671528,-0.231130,0.187600,0.551770,-0.182358,1.113660,0.107506,-0.581298,0.769548,-0.264366,0.182080,0.562390,0.176923,1.135178,0.189375,0.561855,0.822785,-0.085702,0.790600,0.579870,0.205047,1.112705,0.191712,0.682851,0.725891,-0.082449,0.785800,0.567810,0.208474,1.091479,0.112674,0.704009,0.671528,-0.231130,0.812390,0.551770,0.182358,1.113660,0.107506,0.581297,0.769548,-0.264366,0.817910,0.562390,-0.120604,1.162982,0.184389,-0.362686,0.926842,-0.097075,0.199860,0.601160,-0.148916,1.151042,0.187033,-0.443940,0.891181,-0.093349,0.204730,0.590690,-0.155563,1.128893,0.102974,-0.461031,0.838426,-0.290677,0.176470,0.571720,-0.127664,1.140558,0.098271,-0.385242,0.871565,-0.303253,0.170320,0.580950,0.120604,1.162982,0.184389,0.362686,0.926842,-0.097075,0.800130,0.601160,0.148916,1.151042,0.187033,0.443940,0.891181,-0.093349,0.795260,0.590690,0.155563,1.128893,0.102974,0.461031,0.838426,-0.290676,0.823520,0.571720,0.127664,1.140558,0.098271,0.385242,0.871565,-0.303253,0.829670,0.580950,-0.061857,1.181069,0.179638,-0.210634,0.973247,-0.091777,0.189080,0.623110,-0.091608,1.173043,0.181633,-0.297240,0.950033,-0.095325,0.194540,0.611910,-0.098212,1.151185,0.093445,-0.325039,0.893097,-0.311010,0.163370,0.590980,-0.066986,1.160196,0.089578,-0.237793,0.917143,-0.319849,0.155920,0.601810,0.061857,1.181069,0.179638,0.210634,0.973247,-0.091777,0.810910,0.623110,0.091608,1.173043,0.181633,0.297240,0.950033,-0.095325,0.805460,0.611910,0.098212,1.151185,0.093445,0.325039,0.893097,-0.311010,0.836620,0.590980,0.066986,1.160196,0.089578,0.237794,0.917143,-0.319849,0.844070,0.601810,0.0,1.187839,0.179255,-0.000000,0.996350,-0.085357,0.178260,0.647590,-0.031190,1.186036,0.179142,-0.107106,0.990383,-0.087577,0.183800,0.635050,-0.033997,1.166354,0.087582,-0.125523,0.936976,-0.326068,0.148210,0.613610,0.0,1.168596,0.087085,-0.000000,0.944683,-0.327986,0.139940,0.626120,0.0,1.187839,0.179255,-0.000000,0.996350,-0.085357,0.821730,0.647590,0.031190,1.186036,0.179142,0.107107,0.990383,-0.087577,0.816190,0.635050,0.0,1.168596,0.087085,-0.000000,0.944683,-0.327986,0.860050,0.626120,0.033997,1.166354,0.087582,0.125524,0.936976,-0.326068,0.851780,0.613610,-0.238165,1.022473,0.047902,-0.807098,0.489911,-0.329516,0.172600,0.519590,-0.264465,0.985941,0.069140,-0.890538,0.371411,-0.262670,0.184680,0.506890,-0.262351,0.933206,0.009572,-0.886429,0.266988,-0.378102,0.168120,0.485180,-0.235993,0.965411,-0.019517,-0.800368,0.366734,-0.474254,0.153900,0.496130,0.238165,1.022473,0.047902,0.807098,0.489911,-0.329516,0.827390,0.519590,0.264465,0.985941,0.069140,0.890538,0.371411,-0.262670,0.815310,0.506890,0.235993,0.965411,-0.019517,0.800368,0.366734,-0.474254,0.846090,0.496130,0.262351,0.933206,0.009572,0.886429,0.266988,-0.378102,0.831870,0.485180,-0.211987,1.050383,0.033721,-0.707641,0.589485,-0.389554,0.163630,0.530200,-0.185830,1.070791,0.024093,-0.584723,0.677699,-0.445895,0.156160,0.539340,-0.209675,0.989149,-0.039162,-0.690129,0.458021,-0.560302,0.143110,0.504800,-0.183195,1.006143,-0.052838,-0.570427,0.529425,-0.627951,0.133790,0.512140,0.211987,1.050383,0.033721,0.707641,0.589485,-0.389554,0.836360,0.530200,0.185830,1.070791,0.024093,0.584723,0.677700,-0.445896,0.843830,0.539340,0.183195,1.006143,-0.052838,0.570427,0.529425,-0.627951,0.866200,0.512140,0.209675,0.989149,-0.039162,0.690129,0.458021,-0.560302,0.856880,0.504800,-0.130335,1.096165,0.008478,-0.399164,0.769709,-0.498213,0.140460,0.555440,-0.155383,1.018694,-0.064281,-0.476793,0.573270,-0.666356,0.124250,0.518950,-0.158604,1.085304,0.016019,-0.472617,0.737986,-0.481674,0.148550,0.547520,-0.127092,1.028155,-0.074534,-0.413328,0.599800,-0.685128,0.114510,0.525200,0.130335,1.096165,0.008478,0.399165,0.769709,-0.498213,0.859530,0.555440,0.155383,1.018694,-0.064281,0.476793,0.573270,-0.666356,0.875750,0.518950,0.127092,1.028155,-0.074534,0.413328,0.599800,-0.685128,0.885480,0.525200,0.158604,1.085304,0.016019,0.472617,0.737986,-0.481674,0.851440,0.547520,-0.069799,1.113024,-0.004470,-0.242828,0.813633,-0.528239,0.122520,0.572390,-0.098977,1.035514,-0.083683,-0.343215,0.623891,-0.702114,0.104830,0.530860,-0.101071,1.105331,0.001291,-0.333979,0.791603,-0.511686,0.131830,0.563530,-0.069091,1.041390,-0.090836,-0.240138,0.647782,-0.722989,0.094510,0.536950,0.069799,1.113023,-0.004470,0.242828,0.813633,-0.528239,0.877470,0.572390,0.098977,1.035514,-0.083683,0.343214,0.623891,-0.702114,0.895160,0.530860,0.069091,1.041390,-0.090836,0.240138,0.647782,-0.722989,0.905480,0.536950,0.101071,1.105331,0.001291,0.333979,0.791603,-0.511686,0.868170,0.563530,-0.035721,1.118802,-0.007787,-0.129064,0.830712,-0.541535,0.112410,0.582730,0.0,1.121132,-0.008795,-0.000000,0.837415,-0.546568,0.101320,0.593990,-0.035634,1.045947,-0.095085,-0.121583,0.662526,-0.739105,0.082710,0.544730,0.0,1.047846,-0.096440,-0.000000,0.667023,-0.745037,0.069440,0.553340,0.035721,1.118802,-0.007787,0.129065,0.830712,-0.541535,0.887580,0.582730,0.0,1.121132,-0.008795,-0.000000,0.837415,-0.546568,0.898670,0.593990,0.035634,1.045947,-0.095085,0.121583,0.662526,-0.739105,0.917280,0.544730,0.0,1.047846,-0.096440,-0.000000,0.667023,-0.745037,0.930550,0.553340,-0.223955,0.892163,-0.076189,-0.770985,0.231896,-0.593132,0.136730,0.468040,-0.252057,0.865842,-0.042603,-0.862567,0.161495,-0.479476,0.152580,0.458550,0.223955,0.892163,-0.076189,0.770986,0.231895,-0.593132,0.863270,0.468040,0.252057,0.865842,-0.042603,0.862566,0.161496,-0.479477,0.847410,0.458550,-0.172473,0.922149,-0.112510,-0.535250,0.350514,-0.768536,0.115450,0.479730,-0.197827,0.910271,-0.097852,-0.652227,0.301526,-0.695473,0.125250,0.474710,0.172473,0.922149,-0.112510,0.535250,0.350514,-0.768536,0.884550,0.479730,0.197827,0.910271,-0.097852,0.652227,0.301525,-0.695472,0.874740,0.474710,-0.145656,0.930848,-0.125139,-0.459440,0.373011,-0.806088,0.104930,0.484270,-0.118571,0.938008,-0.136410,-0.409914,0.385298,-0.826750,0.094380,0.488590,0.145656,0.930848,-0.125139,0.459441,0.373010,-0.806088,0.895060,0.484270,0.118571,0.938008,-0.136410,0.409914,0.385298,-0.826751,0.905610,0.488590,-0.092398,0.944521,-0.145880,-0.338440,0.400944,-0.851295,0.084610,0.492930,-0.064818,0.949740,-0.152970,-0.221936,0.417399,-0.881205,0.074390,0.497340,0.0,0.953832,-0.158577,0.000000,0.423465,-0.905912,0.048050,0.507020,-0.033556,0.952844,-0.157203,-0.100535,0.423486,-0.900307,0.062120,0.502070,0.092398,0.944521,-0.145880,0.338440,0.400944,-0.851295,0.915390,0.492930,0.064818,0.949740,-0.152970,0.221936,0.417399,-0.881205,0.925600,0.497340,0.0,0.953832,-0.158577,0.000000,0.423465,-0.905912,0.951940,0.507020,0.033556,0.952844,-0.157203,0.100535,0.423486,-0.900307,0.937870,0.502070,-0.333407,0.676648,0.200562,-0.879220,-0.033520,0.475236,0.918290,0.675130,-0.322987,0.657242,0.215449,-0.778740,-0.103029,0.618829,0.927570,0.669960,-0.310191,0.642944,0.224904,-0.578731,-0.392857,0.714657,0.935370,0.666140,0.151670,0.321247,0.541079,0.807678,-0.452078,0.378525,0.555720,0.305630,0.154509,0.307226,0.517409,0.784282,-0.519526,0.339109,0.559970,0.298060,0.150396,0.291574,0.498812,0.710167,-0.655760,0.256207,0.560920,0.290030,-0.151670,0.321247,0.541079,-0.807656,-0.452166,0.378469,0.444270,0.305630,-0.154509,0.307226,0.517409,-0.784282,-0.519525,0.339110,0.440020,0.298060,-0.194085,0.641545,-0.100985,-0.565512,-0.335123,-0.753584,0.123610,0.369450,-0.221254,0.638654,-0.074514,-0.715970,-0.281764,-0.638746,0.138880,0.369610,-0.214899,0.599983,-0.061995,-0.661350,-0.367715,-0.653760,0.140260,0.353460,-0.187915,0.601941,-0.084548,-0.493565,-0.428334,-0.756917,0.125300,0.352650,0.194085,0.641545,-0.100985,0.565511,-0.335123,-0.753584,0.876390,0.369450,0.221254,0.638654,-0.074514,0.715970,-0.281764,-0.638746,0.861110,0.369610,0.187915,0.601941,-0.084548,0.493566,-0.428333,-0.756917,0.874690,0.352650,0.214899,0.599983,-0.061995,0.661350,-0.367715,-0.653760,0.859730,0.353460,-0.170786,0.643444,-0.115920,-0.391001,-0.378939,-0.838763,0.113490,0.369090,-0.149465,0.644885,-0.123669,-0.252406,-0.405158,-0.878714,0.104960,0.368270,-0.164868,0.603246,-0.097046,-0.321980,-0.471690,-0.820876,0.115000,0.351560,-0.144034,0.604544,-0.103553,-0.194092,-0.493727,-0.847680,0.106240,0.350190,0.149465,0.644885,-0.123669,0.252406,-0.405158,-0.878714,0.895030,0.368270,0.170786,0.643444,-0.115920,0.391001,-0.378939,-0.838763,0.886510,0.369090,0.144035,0.604544,-0.103553,0.194091,-0.493727,-0.847681,0.893750,0.350190,0.164868,0.603246,-0.097046,0.321980,-0.471689,-0.820876,0.884990,0.351560,-0.127003,0.646064,-0.129431,-0.184734,-0.426112,-0.885608,0.095100,0.367320,-0.122459,0.606222,-0.108326,-0.125796,-0.509690,-0.851112,0.096440,0.349120,-0.103853,0.647437,-0.134389,-0.123812,-0.449145,-0.884839,0.084810,0.366610,-0.100187,0.608619,-0.112101,-0.063629,-0.525207,-0.848592,0.086200,0.348480,0.127003,0.646064,-0.129431,0.184734,-0.426113,-0.885608,0.904890,0.367320,0.103853,0.647437,-0.134389,0.123811,-0.449146,-0.884838,0.915180,0.366610,0.122459,0.606222,-0.108326,0.125796,-0.509690,-0.851112,0.903550,0.349120,0.100187,0.608620,-0.112101,0.063627,-0.525207,-0.848592,0.913790,0.348480,-0.077775,0.611660,-0.114292,-0.001612,-0.534183,-0.845367,0.076230,0.348420,-0.080980,0.649302,-0.137644,-0.045557,-0.471663,-0.880601,0.075040,0.366360,-0.056789,0.650584,-0.138322,0.013143,-0.488281,-0.872588,0.064630,0.365530,-0.054086,0.614145,-0.114655,0.026439,-0.533346,-0.845484,0.065690,0.347960,-0.029468,0.650179,-0.136772,0.020921,-0.497174,-0.867398,0.052270,0.363090,-0.027891,0.614755,-0.113903,0.015168,-0.526317,-0.850153,0.053650,0.346080,0.0,0.649377,-0.135824,-0.000000,-0.499575,-0.866270,0.038650,0.360680,0.000000,0.614436,-0.113501,0.000001,-0.521873,-0.853024,0.040710,0.343950,0.077775,0.611660,-0.114292,0.001612,-0.534183,-0.845367,0.923760,0.348420,0.080980,0.649302,-0.137644,0.045556,-0.471665,-0.880600,0.924950,0.366360,0.056789,0.650584,-0.138322,-0.013142,-0.488282,-0.872587,0.935360,0.365530,0.054086,0.614145,-0.114655,-0.026438,-0.533347,-0.845483,0.934300,0.347960,0.029468,0.650179,-0.136772,-0.020920,-0.497175,-0.867398,0.947720,0.363090,0.0,0.649377,-0.135824,-0.000000,-0.499575,-0.866270,0.961340,0.360680,0.027891,0.614755,-0.113903,-0.015167,-0.526318,-0.850152,0.946340,0.346080,0.000000,0.614436,-0.113501,0.000001,-0.521873,-0.853024,0.959280,0.343950,-0.208804,0.562056,-0.044533,-0.624803,-0.403580,-0.668390,0.144080,0.335380,-0.182798,0.563475,-0.063994,-0.452678,-0.452631,-0.768250,0.129090,0.334190,0.182798,0.563475,-0.063994,0.452678,-0.452631,-0.768250,0.870900,0.334190,0.208804,0.562056,-0.044533,0.624803,-0.403580,-0.668390,0.855910,0.335380,-0.093427,0.403124,0.658513,0.684151,0.378793,-0.623260,0.473690,0.342396,-0.103291,0.372467,0.625879,0.714452,0.566243,-0.411007,0.476003,0.343271,-0.107369,0.379664,0.623478,0.922508,0.252881,-0.291600,0.473671,0.342445,-0.089409,0.403565,0.664396,0.722919,0.363165,-0.587792,0.476005,0.343209,-0.094546,0.404784,0.661130,0.867377,-0.084406,-0.490441,0.473149,0.342336,-0.108754,0.394748,0.623369,0.976024,0.027960,-0.215860,0.473386,0.342415,-0.093938,0.407371,0.658962,0.852886,-0.225181,-0.471041,0.473593,0.342662,-0.107641,0.413153,0.623688,0.967445,-0.146053,-0.206684,0.473619,0.342588,0.103188,0.372507,0.625900,-0.713721,0.566861,-0.411425,0.523989,0.343271,0.107302,0.379687,0.623531,-0.920588,0.257730,-0.293415,0.526319,0.342445,0.089255,0.403624,0.664386,-0.717397,0.369652,-0.590507,0.523988,0.343209,0.033041,0.409713,0.704935,-0.194724,0.803106,-0.563119,0.507578,0.348196,0.031323,0.374423,0.651203,-0.087937,0.914763,-0.394303,0.506069,0.348538,0.026381,0.409591,0.706939,-0.148765,0.818348,-0.555136,0.506005,0.348364,0.039479,0.374532,0.649832,-0.089089,0.911579,-0.401356,0.507631,0.348364,0.040523,0.409367,0.701047,-0.209637,0.789890,-0.576304,0.509505,0.347811,0.048557,0.374195,0.647584,-0.081989,0.908304,-0.410197,0.509545,0.347971,-0.026321,0.409606,0.706906,0.148861,0.818276,-0.555216,0.493985,0.348364,-0.031265,0.374439,0.651180,0.087931,0.914708,-0.394433,0.493921,0.348538,-0.032997,0.409731,0.704894,0.193769,0.803296,-0.563178,0.492412,0.348196,-0.039430,0.374548,0.649809,0.088752,0.911568,-0.401457,0.492359,0.348364,-0.040503,0.409376,0.701023,0.210236,0.789689,-0.576361,0.490485,0.347811,-0.048519,0.374209,0.647561,0.082410,0.908203,-0.410337,0.490445,0.347971,0.068741,0.406859,0.685134,-0.349787,0.694146,-0.629134,0.516891,0.345801,0.069618,0.372646,0.641424,-0.104982,0.895144,-0.433238,0.514694,0.346642,0.059853,0.407643,0.690964,-0.267314,0.745119,-0.611016,0.514652,0.346501,0.079821,0.371850,0.637757,-0.144096,0.881628,-0.449409,0.516919,0.345919,0.076650,0.405920,0.678611,-0.456433,0.616892,-0.641181,0.519063,0.345025,0.089017,0.371060,0.633742,-0.215430,0.857913,-0.466450,0.519071,0.345118,-0.203456,0.338524,-0.001526,-0.696885,0.134276,-0.704501,0.166580,0.202630,-0.184531,0.301341,-0.025535,-0.555601,0.262831,-0.788813,0.146160,0.169270,-0.211484,0.295422,-0.004657,-0.697899,0.264327,-0.665633,0.166940,0.166580,-0.175651,0.344356,-0.022422,-0.537212,0.117073,-0.835283,0.146460,0.205010,-0.158852,0.302755,-0.040028,-0.444648,0.265842,-0.855346,0.130460,0.172890,-0.150170,0.345904,-0.035074,-0.430153,0.116525,-0.895204,0.130850,0.206860,-0.231992,0.324604,0.029543,-0.836526,0.150097,-0.526967,0.196100,0.200470,-0.252606,0.310394,0.066139,-0.951009,0.125478,-0.282553,0.227600,0.200650,-0.237914,0.284505,0.024007,-0.831210,0.252049,-0.495540,0.197730,0.168170,-0.256556,0.273969,0.059334,-0.946660,0.204436,-0.249080,0.230430,0.173220,0.083748,0.404778,0.671286,-0.584974,0.506619,-0.633358,0.521517,0.344118,0.096966,0.370721,0.629557,-0.394410,0.790232,-0.469013,0.521514,0.344190,-0.079794,0.371874,0.637707,0.146490,0.880988,-0.449890,0.483071,0.345919,-0.068720,0.406874,0.685060,0.355337,0.691377,-0.629073,0.483099,0.345801,-0.069581,0.372667,0.641385,0.105250,0.895009,-0.433454,0.485296,0.346642,-0.059818,0.407663,0.690908,0.267313,0.745014,-0.611144,0.485338,0.346501,-0.089002,0.371094,0.633677,0.211631,0.858550,-0.467016,0.480927,0.345118,-0.076567,0.405980,0.678460,0.450494,0.619722,-0.642651,0.480934,0.345025,0.184531,0.301341,-0.025535,0.555601,0.262832,-0.788814,0.853840,0.169270,0.203456,0.338524,-0.001526,0.696885,0.134276,-0.704501,0.833410,0.202630,0.211484,0.295422,-0.004657,0.697899,0.264328,-0.665633,0.833050,0.166580,0.175651,0.344356,-0.022422,0.537213,0.117073,-0.835282,0.853530,0.205010,0.150170,0.345904,-0.035074,0.430154,0.116525,-0.895204,0.869140,0.206860,0.158852,0.302755,-0.040028,0.444648,0.265841,-0.855346,0.869530,0.172890,0.231992,0.324604,0.029543,0.836526,0.150097,-0.526967,0.803890,0.200470,0.237914,0.284505,0.024007,0.831211,0.252049,-0.495540,0.802260,0.168170,0.252606,0.310394,0.066139,0.951009,0.125478,-0.282553,0.772390,0.200650,0.256556,0.273969,0.059334,0.946660,0.204435,-0.249080,0.769570,0.173220,-0.160404,0.565266,-0.074776,-0.291574,-0.482380,-0.826011,0.118330,0.333270,-0.140348,0.567615,-0.080885,-0.177252,-0.493677,-0.851390,0.109200,0.332400,0.160404,0.565266,-0.074776,0.291574,-0.482380,-0.826011,0.881660,0.333270,0.140348,0.567615,-0.080884,0.177251,-0.493677,-0.851390,0.890800,0.332400,-0.097029,0.370711,0.629523,0.384649,0.794429,-0.470030,0.478476,0.344190,-0.083832,0.404761,0.671250,0.569032,0.518551,-0.638207,0.478473,0.344118,0.007033,0.407642,0.708276,-0.051534,0.834114,-0.549180,0.501543,0.348083,0.008108,0.372696,0.652330,-0.043798,0.922486,-0.383538,0.501565,0.348261,0.000016,0.407412,0.708021,0.002230,0.835762,-0.549088,0.500000,0.348030,0.000027,0.372482,0.652300,0.001306,0.923799,-0.382876,0.500000,0.348210,0.013719,0.408310,0.708065,-0.103843,0.829149,-0.549298,0.503070,0.348197,0.015975,0.373272,0.652199,-0.079506,0.919178,-0.385735,0.503112,0.348374,-0.101681,0.347872,-0.055376,-0.327349,0.133514,-0.935423,0.102770,0.208750,-0.126458,0.346914,-0.045487,-0.383643,0.124164,-0.915096,0.116820,0.207860,-0.134384,0.302236,-0.051622,-0.389163,0.270894,-0.880437,0.117010,0.174330,-0.108013,0.301940,-0.062825,-0.335673,0.267360,-0.903240,0.102630,0.175540,-0.008047,0.372709,0.652314,0.045330,0.922372,-0.383635,0.498425,0.348261,-0.006975,0.407660,0.708240,0.053923,0.833923,-0.549241,0.498447,0.348083,-0.013652,0.408328,0.708027,0.103833,0.829077,-0.549409,0.496928,0.348197,-0.015910,0.373289,0.652178,0.079668,0.919105,-0.385873,0.496886,0.348374,0.049811,0.408505,0.696402,-0.212839,0.776604,-0.592947,0.512015,0.347215,0.058832,0.373464,0.644744,-0.080299,0.903839,-0.420271,0.512055,0.347369,0.101681,0.347872,-0.055376,0.327350,0.133514,-0.935423,0.897220,0.208750,0.126458,0.346914,-0.045487,0.383643,0.124164,-0.915096,0.883170,0.207860,0.108013,0.301940,-0.062825,0.335674,0.267360,-0.903239,0.897360,0.175540,0.134384,0.302236,-0.051622,0.389163,0.270895,-0.880436,0.882980,0.174330,-0.119897,0.570535,-0.085546,-0.111084,-0.496743,-0.860760,0.099480,0.331960,-0.098394,0.573770,-0.089178,-0.056259,-0.496103,-0.866439,0.089240,0.331670,-0.051843,0.579083,-0.092659,0.002582,-0.477301,-0.878736,0.067240,0.330390,-0.075804,0.576815,-0.091550,-0.009529,-0.489526,-0.871937,0.078530,0.331220,0.119897,0.570535,-0.085546,0.111083,-0.496743,-0.860760,0.900510,0.331960,0.098394,0.573770,-0.089178,0.056258,-0.496103,-0.866439,0.910750,0.331670,0.051843,0.579083,-0.092659,-0.002583,-0.477300,-0.878737,0.932750,0.330390,0.075804,0.576815,-0.091550,0.009529,-0.489525,-0.871937,0.921470,0.331220,-0.049762,0.408530,0.696345,0.214383,0.776108,-0.593040,0.487975,0.347215,-0.058789,0.373485,0.644712,0.081147,0.903661,-0.420489,0.487935,0.347369,0.020052,0.409049,0.707771,-0.123917,0.825016,-0.551356,0.504529,0.348327,0.023624,0.373937,0.651894,-0.089034,0.916714,-0.389498,0.504586,0.348504,-0.020010,0.409065,0.707732,0.123579,0.825009,-0.551442,0.495461,0.348327,-0.023566,0.373953,0.651871,0.088871,0.916676,-0.389625,0.495404,0.348504,0.007304,0.419478,0.708714,0.090740,-0.755064,-0.649342,0.501614,0.348772,0.008297,0.464652,0.652621,0.159575,-0.896240,-0.413871,0.501603,0.348629,0.014200,0.420357,0.708571,0.117469,-0.745863,-0.655660,0.503196,0.348920,0.016322,0.466871,0.652535,0.239122,-0.877773,-0.415133,0.503179,0.348760,0.000013,0.419148,0.708342,-0.000099,-0.760643,-0.649171,0.500000,0.348695,0.000027,0.463799,0.652555,-0.002093,-0.909481,-0.415741,0.500000,0.348565,-0.077582,0.302003,-0.072978,-0.263910,0.260488,-0.928707,0.084540,0.178150,-0.074071,0.348744,-0.064116,-0.249279,0.147686,-0.957105,0.087210,0.210160,-0.047338,0.302279,-0.080333,-0.181225,0.259253,-0.948654,0.067510,0.180910,-0.046586,0.349303,-0.070376,-0.163531,0.165596,-0.972541,0.072450,0.211590,0.077582,0.302003,-0.072978,0.263911,0.260489,-0.928707,0.915450,0.178150,0.074071,0.348744,-0.064116,0.249279,0.147686,-0.957104,0.912780,0.210160,0.046586,0.349303,-0.070376,0.163531,0.165596,-0.972541,0.927540,0.211590,0.047338,0.302279,-0.080333,0.181225,0.259254,-0.948654,0.932480,0.180910,-0.026364,0.579908,-0.093300,-0.008475,-0.462879,-0.886381,0.055280,0.328970,0.000000,0.579889,-0.093696,0.000003,-0.455721,-0.890123,0.042980,0.327260,0.026365,0.579908,-0.093300,0.008476,-0.462879,-0.886381,0.944710,0.328970,0.000000,0.579889,-0.093696,0.000003,-0.455721,-0.890123,0.957020,0.327260,0.020706,0.421327,0.708415,0.067651,-0.738285,-0.671088,0.504688,0.349064,0.024087,0.469425,0.652280,0.200485,-0.881419,-0.427676,0.504671,0.348897,-0.007236,0.419502,0.708673,-0.091280,-0.754743,-0.649640,0.498379,0.348772,-0.008232,0.464703,0.652605,-0.162725,-0.895626,-0.413974,0.498388,0.348629,0.027097,0.421970,0.707540,-0.088219,-0.722138,-0.686100,0.506173,0.349094,0.031834,0.471176,0.651580,0.033003,-0.894855,-0.445135,0.506158,0.348927,-0.014132,0.420378,0.708540,-0.117636,-0.745416,-0.656138,0.496802,0.348920,-0.016255,0.466945,0.652516,-0.240243,-0.877310,-0.415465,0.496819,0.348760,0.033681,0.422095,0.705402,-0.278451,-0.678278,-0.680004,0.507726,0.348907,0.039974,0.471315,0.650172,-0.190655,-0.873798,-0.447357,0.507709,0.348743,-0.020663,0.421347,0.708381,-0.067247,-0.737817,-0.671643,0.495304,0.349064,-0.024027,0.469504,0.652259,-0.200520,-0.881182,-0.428148,0.495321,0.348897,0.041151,0.421520,0.701617,-0.395396,-0.634063,-0.664550,0.509623,0.348492,0.049035,0.469469,0.647936,-0.356442,-0.826422,-0.435862,0.509608,0.348336,-0.027031,0.421993,0.707502,0.088134,-0.721668,-0.686606,0.493817,0.349094,-0.031773,0.471256,0.651557,-0.032981,-0.894625,-0.445599,0.493832,0.348927,-0.022201,0.349306,-0.073495,-0.076687,0.179851,-0.980700,0.060470,0.212610,-0.021848,0.302434,-0.083999,-0.088829,0.263349,-0.960602,0.055530,0.182950,0.0,0.349213,-0.074315,-0.000000,0.184935,-0.982751,0.049960,0.213490,0.000000,0.302488,-0.084944,-0.000000,0.266084,-0.963950,0.046080,0.184610,0.022201,0.349306,-0.073495,0.076686,0.179851,-0.980700,0.939520,0.212610,0.0,0.349213,-0.074315,-0.000000,0.184935,-0.982751,0.950030,0.213490,0.021848,0.302434,-0.083999,0.088828,0.263350,-0.960602,0.944460,0.182950,0.000000,0.302488,-0.084944,-0.000000,0.266084,-0.963950,0.953910,0.184610,-0.258904,0.297650,0.103074,-0.998416,0.054331,-0.014637,0.255260,0.204240,-0.262130,0.263489,0.094644,-0.992989,0.114134,0.030755,0.258140,0.180360,-0.255597,0.287857,0.137484,-0.990411,-0.031231,0.134577,0.279230,0.209510,-0.257507,0.254345,0.127510,-0.976219,-0.001910,0.216779,0.282180,0.187860,0.262130,0.263489,0.094644,0.992989,0.114134,0.030755,0.741860,0.180360,0.258904,0.297650,0.103074,0.998416,0.054331,-0.014637,0.744730,0.204240,0.257507,0.254345,0.127510,0.976219,-0.001911,0.216779,0.717810,0.187860,0.255597,0.287857,0.137484,0.990411,-0.031231,0.134577,0.720770,0.209510,-0.248185,0.248035,0.157684,-0.948384,-0.122621,0.292457,0.301440,0.194290,-0.250274,0.282209,0.166966,-0.973729,-0.125300,0.190135,0.297030,0.214640,-0.243603,0.278414,0.194915,-0.947764,-0.214539,0.236044,0.312360,0.219540,-0.236260,0.242832,0.189589,-0.923985,-0.222294,0.311188,0.319350,0.200140,0.248185,0.248035,0.157684,0.948385,-0.122621,0.292456,0.698550,0.194290,0.250274,0.282209,0.166966,0.973729,-0.125300,0.190134,0.702970,0.214640,0.236260,0.242832,0.189589,0.923984,-0.222294,0.311188,0.680640,0.200140,0.243603,0.278414,0.194915,0.947764,-0.214539,0.236045,0.687630,0.219540,-0.221041,0.269020,0.256847,-0.884525,-0.273596,0.377837,0.344980,0.228390,-0.222203,0.238390,0.226623,-0.907041,-0.275375,0.318505,0.338640,0.206200,-0.206641,0.232592,0.264419,-0.882321,-0.265973,0.388289,0.357970,0.211710,-0.233913,0.274515,0.225783,-0.918788,-0.267820,0.290002,0.328510,0.224220,0.222203,0.238390,0.226623,0.907041,-0.275374,0.318507,0.661350,0.206200,0.221041,0.269020,0.256847,0.884524,-0.273597,0.377837,0.655010,0.228390,0.206641,0.232592,0.264419,0.882321,-0.265972,0.388289,0.642020,0.211710,0.233912,0.274515,0.225783,0.918787,-0.267821,0.290003,0.671480,0.224220,-0.188521,0.258482,0.310234,-0.824208,-0.226710,0.518925,0.375830,0.234770,-0.187237,0.227321,0.298159,-0.850015,-0.222704,0.477366,0.376440,0.216110,-0.169251,0.223953,0.326320,-0.837608,-0.189065,0.512511,0.392320,0.220310,-0.204812,0.263287,0.285642,-0.846653,-0.251821,0.468791,0.361520,0.231800,0.187237,0.227321,0.298159,0.850015,-0.222704,0.477365,0.623550,0.216110,0.188521,0.258482,0.310234,0.824208,-0.226712,0.518924,0.624160,0.234770,0.169251,0.223953,0.326320,0.837608,-0.189065,0.512510,0.607670,0.220310,0.204812,0.263287,0.285642,0.846653,-0.251823,0.468790,0.638470,0.231800,-0.175035,0.255969,0.329225,-0.830918,-0.227350,0.507827,0.385650,0.237390,-0.156209,0.224898,0.347908,-0.851791,-0.197065,0.485405,0.403840,0.224930,0.175035,0.255969,0.329225,0.830917,-0.227349,0.507828,0.614340,0.237390,0.156209,0.224898,0.347908,0.851790,-0.197065,0.485406,0.596150,0.224930,-0.131046,0.183019,0.376641,-0.826977,-0.208403,0.522186,0.421050,0.215790,-0.142378,0.201088,0.364363,-0.854095,-0.187291,0.485226,0.414390,0.218920,-0.144322,0.176231,0.353669,-0.836885,-0.151040,0.526128,0.409870,0.206610,-0.155078,0.197208,0.341393,-0.847256,-0.154619,0.508183,0.402710,0.212050,-0.163852,0.177319,0.321341,-0.860868,-0.144721,0.487813,0.392130,0.200110,-0.173597,0.199437,0.310596,-0.858724,-0.177925,0.480557,0.385750,0.206670,-0.186320,0.183955,0.280346,-0.897057,-0.192251,0.397906,0.370700,0.194880,-0.194675,0.205158,0.272760,-0.888408,-0.236150,0.393656,0.365670,0.201730,0.131046,0.183019,0.376641,0.826976,-0.208404,0.522186,0.578940,0.215790,0.142378,0.201088,0.364363,0.854095,-0.187291,0.485226,0.585600,0.218920,0.155078,0.197208,0.341393,0.847257,-0.154619,0.508182,0.597280,0.212050,0.144322,0.176232,0.353669,0.836885,-0.151040,0.526128,0.590120,0.206610,0.163852,0.177318,0.321341,0.860868,-0.144720,0.487814,0.607860,0.200110,0.173597,0.199437,0.310596,0.858725,-0.177924,0.480557,0.614240,0.206670,0.194674,0.205158,0.272760,0.888408,-0.236147,0.393657,0.634320,0.201730,0.186320,0.183955,0.280346,0.897057,-0.192250,0.397906,0.629290,0.194880,-0.206290,0.193909,0.232751,-0.908749,-0.228404,0.349294,0.348070,0.189030,-0.212904,0.212695,0.229660,-0.904331,-0.261098,0.337657,0.344460,0.195810,-0.227220,0.203260,0.187106,-0.895890,-0.197538,0.397944,0.325540,0.182450,-0.230891,0.219569,0.187933,-0.906513,-0.212423,0.364842,0.323280,0.189270,0.206290,0.193909,0.232751,0.908749,-0.228404,0.349294,0.651920,0.189030,0.212904,0.212695,0.229660,0.904331,-0.261097,0.337658,0.655530,0.195810,0.230891,0.219569,0.187933,0.906513,-0.212423,0.364842,0.676710,0.189270,0.227220,0.203260,0.187106,0.895890,-0.197538,0.397944,0.674450,0.182450,-0.247048,0.225926,0.153260,-0.922994,-0.111569,0.368286,0.303810,0.182670,-0.261022,0.217865,0.118542,-0.936433,0.037778,0.348807,0.284250,0.167170,-0.246512,0.210532,0.150488,-0.901506,-0.105582,0.419689,0.305020,0.175230,-0.259229,0.232743,0.122056,-0.956926,0.024182,0.289325,0.283630,0.175330,0.246512,0.210532,0.150488,0.901506,-0.105580,0.419690,0.694970,0.175230,0.261022,0.217865,0.118542,0.936432,0.037780,0.348808,0.715740,0.167170,0.247048,0.225926,0.153260,0.922994,-0.111569,0.368286,0.696190,0.182670,0.259229,0.232743,0.122056,0.956925,0.024183,0.289325,0.716360,0.175330,-0.265885,0.241295,0.089939,-0.979926,0.176826,0.092074,0.259560,0.167060,-0.269591,0.226495,0.086680,-0.964528,0.214792,0.153461,0.260160,0.158820,-0.267042,0.236099,0.051835,-0.915920,0.384877,-0.113843,0.232440,0.150530,-0.261734,0.250786,0.055143,-0.932907,0.309553,-0.184014,0.231840,0.158800,0.265885,0.241295,0.089939,0.979926,0.176826,0.092074,0.740430,0.167060,0.261734,0.250786,0.055143,0.932907,0.309553,-0.184014,0.768150,0.158800,0.267042,0.236099,0.051835,0.915919,0.384878,-0.113843,0.767560,0.150530,0.269591,0.226495,0.086680,0.964528,0.214793,0.153461,0.739830,0.158820,-0.251701,0.245301,0.015187,-0.794564,0.515767,-0.320394,0.198820,0.142760,-0.219946,0.268729,-0.009833,-0.686993,0.443591,-0.575559,0.167380,0.148380,-0.228560,0.252659,-0.015880,-0.653989,0.596952,-0.464702,0.167850,0.138050,-0.244791,0.260086,0.019516,-0.818721,0.396938,-0.414894,0.198530,0.151800,0.251701,0.245301,0.015187,0.794564,0.515767,-0.320394,0.801170,0.142760,0.219946,0.268729,-0.009833,0.686993,0.443590,-0.575559,0.832610,0.148380,0.244791,0.260086,0.019516,0.818721,0.396937,-0.414893,0.801470,0.151800,0.228560,0.252659,-0.015880,0.653989,0.596951,-0.464702,0.832150,0.138050,-0.168393,0.276416,-0.045980,-0.434207,0.450673,-0.779973,0.131350,0.154810,-0.193854,0.274320,-0.030963,-0.549738,0.456014,-0.699885,0.146740,0.150680,-0.203526,0.257557,-0.037725,-0.515194,0.619376,-0.592409,0.147890,0.139470,-0.178421,0.259842,-0.052918,-0.400709,0.603128,-0.689688,0.133010,0.143310,0.168393,0.276415,-0.045980,0.434207,0.450673,-0.779973,0.868640,0.154810,0.193854,0.274320,-0.030963,0.549738,0.456013,-0.699886,0.853250,0.150680,0.178421,0.259842,-0.052918,0.400709,0.603128,-0.689688,0.866980,0.143310,0.203526,0.257557,-0.037725,0.515194,0.619376,-0.592410,0.852110,0.139470,-0.152870,0.259974,-0.065336,-0.328171,0.577787,-0.747306,0.119830,0.145400,-0.143336,0.276257,-0.058378,-0.365485,0.441336,-0.819539,0.118080,0.156570,-0.123463,0.258866,-0.077767,-0.274127,0.548698,-0.789800,0.104560,0.147830,-0.115337,0.275244,-0.070354,-0.309943,0.423942,-0.851004,0.103230,0.158310,0.152870,0.259974,-0.065336,0.328171,0.577787,-0.747306,0.880160,0.145400,0.143336,0.276257,-0.058378,0.365486,0.441336,-0.819538,0.881910,0.156570,0.115338,0.275245,-0.070354,0.309943,0.423942,-0.851004,0.896760,0.158310,0.123463,0.258866,-0.077767,0.274127,0.548696,-0.789802,0.895430,0.147830,-0.088165,0.257975,-0.089092,-0.219394,0.517876,-0.826844,0.083710,0.152080,-0.082556,0.274881,-0.081080,-0.246325,0.401462,-0.882129,0.083530,0.161800,-0.053037,0.257848,-0.097204,-0.159316,0.495347,-0.853961,0.063950,0.156380,-0.050037,0.275111,-0.088781,-0.174825,0.385782,-0.905874,0.064940,0.165420,0.088165,0.257975,-0.089092,0.219396,0.517873,-0.826845,0.916280,0.152080,0.082556,0.274881,-0.081080,0.246326,0.401461,-0.882129,0.916460,0.161800,0.050037,0.275111,-0.088781,0.174826,0.385782,-0.905874,0.935050,0.165420,0.053037,0.257848,-0.097204,0.159317,0.495346,-0.853962,0.936040,0.156380,-0.023969,0.258134,-0.101310,-0.084472,0.484537,-0.870683,0.051010,0.159830,-0.022812,0.275317,-0.092791,-0.089913,0.380363,-0.920456,0.052580,0.168200,0.0,0.258315,-0.102388,-0.000000,0.481879,-0.876238,0.041320,0.162680,0.0,0.275387,-0.093878,-0.000000,0.379912,-0.925022,0.043270,0.170490,0.023969,0.258134,-0.101310,0.084470,0.484536,-0.870683,0.948980,0.159830,0.022812,0.275317,-0.092791,0.089912,0.380363,-0.920456,0.947410,0.168200,0.0,0.275387,-0.093878,-0.000000,0.379912,-0.925022,0.956720,0.170490,0.0,0.258315,-0.102388,-0.000000,0.481879,-0.876238,0.958670,0.162680,-0.055906,0.242472,-0.106433,-0.144568,0.550202,-0.822422,0.062320,0.146650,-0.025938,0.225051,-0.122290,-0.067586,0.578883,-0.812605,0.046020,0.139680,-0.059372,0.224559,-0.118353,-0.127676,0.594459,-0.793925,0.060200,0.134700,-0.024916,0.242838,-0.110521,-0.077321,0.537403,-0.839773,0.048890,0.150740,0.0,0.225614,-0.122969,-0.000001,0.573402,-0.819274,0.035650,0.143690,0.0,0.243188,-0.111489,-0.000001,0.533489,-0.845807,0.038920,0.154100,0.025938,0.225051,-0.122291,0.067585,0.578883,-0.812605,0.953970,0.139680,0.055906,0.242472,-0.106433,0.144569,0.550202,-0.822422,0.937670,0.146650,0.059372,0.224559,-0.118353,0.127677,0.594460,-0.793925,0.939800,0.134700,0.024916,0.242838,-0.110521,0.077319,0.537404,-0.839773,0.951110,0.150740,0.0,0.243188,-0.111489,-0.000001,0.533489,-0.845807,0.961080,0.154100,0.0,0.225614,-0.122969,-0.000001,0.573402,-0.819274,0.964340,0.143690,-0.064769,0.202596,-0.134944,-0.106847,0.640617,-0.760391,0.057580,0.119110,-0.030764,0.179894,-0.157879,-0.045724,0.660831,-0.749140,0.037720,0.110900,-0.071655,0.179619,-0.154342,-0.086734,0.677072,-0.730788,0.054600,0.103270,-0.027885,0.203180,-0.138642,-0.056358,0.623430,-0.779845,0.042090,0.125510,0.0,0.180646,-0.158241,-0.000000,0.655102,-0.755540,0.025640,0.116730,0.0,0.203832,-0.138968,-0.000000,0.617820,-0.786320,0.030990,0.130450,0.030764,0.179894,-0.157879,0.045723,0.660832,-0.749140,0.962270,0.110900,0.064769,0.202596,-0.134944,0.106846,0.640616,-0.760391,0.942410,0.119110,0.071655,0.179619,-0.154342,0.086734,0.677072,-0.730788,0.945390,0.103270,0.027885,0.203180,-0.138642,0.056357,0.623430,-0.779846,0.957900,0.125510,0.0,0.203832,-0.138968,-0.000000,0.617820,-0.786320,0.969000,0.130450,0.0,0.180646,-0.158241,-0.000000,0.655102,-0.755540,0.974350,0.116730,-0.132855,0.244516,-0.085676,-0.249475,0.605788,-0.755501,0.105050,0.136740,-0.102729,0.225563,-0.108971,-0.176268,0.619413,-0.765021,0.082600,0.128590,-0.145624,0.227520,-0.095868,-0.230894,0.648732,-0.725145,0.105970,0.122540,-0.094380,0.243054,-0.097771,-0.197965,0.573805,-0.794706,0.083150,0.141670,-0.127692,0.181972,-0.144092,-0.129174,0.702061,-0.700303,0.081880,0.093180,-0.163847,0.206567,-0.110547,-0.213213,0.696781,-0.684862,0.108190,0.102750,-0.114921,0.204109,-0.125043,-0.151550,0.667499,-0.729025,0.082580,0.110880,-0.182083,0.185042,-0.128454,-0.192108,0.734428,-0.650930,0.109310,0.083180,0.102729,0.225563,-0.108971,0.176269,0.619414,-0.765020,0.917390,0.128590,0.132855,0.244516,-0.085676,0.249475,0.605788,-0.755502,0.894940,0.136740,0.145624,0.227520,-0.095868,0.230894,0.648732,-0.725144,0.894020,0.122540,0.094380,0.243054,-0.097770,0.197967,0.573805,-0.794706,0.916850,0.141670,0.163847,0.206567,-0.110547,0.213213,0.696781,-0.684862,0.891800,0.102750,0.127692,0.181973,-0.144092,0.129174,0.702061,-0.700303,0.918110,0.093180,0.114921,0.204109,-0.125043,0.151550,0.667500,-0.729024,0.917410,0.110880,0.182083,0.185042,-0.128455,0.192108,0.734428,-0.650930,0.890680,0.083180,-0.189428,0.245578,-0.060802,-0.373785,0.669458,-0.641958,0.133790,0.131380,-0.177907,0.228784,-0.082830,-0.290758,0.671902,-0.681181,0.122030,0.118880,-0.203500,0.228644,-0.070861,-0.354346,0.696539,-0.623916,0.134960,0.116340,-0.163692,0.245731,-0.073086,-0.303410,0.637200,-0.708462,0.120690,0.133710,-0.197587,0.207676,-0.096415,-0.282437,0.715667,-0.638788,0.124790,0.098410,-0.222350,0.207140,-0.084447,-0.335378,0.727543,-0.598501,0.137390,0.095680,-0.218052,0.185785,-0.113564,-0.262599,0.763705,-0.589743,0.126410,0.078080,-0.242763,0.184768,-0.101374,-0.309022,0.778548,-0.546230,0.138870,0.075170,0.177907,0.228784,-0.082830,0.290757,0.671903,-0.681181,0.877960,0.118880,0.189428,0.245578,-0.060802,0.373784,0.669459,-0.641958,0.866200,0.131380,0.203500,0.228644,-0.070861,0.354345,0.696540,-0.623916,0.865030,0.116340,0.163692,0.245731,-0.073086,0.303409,0.637200,-0.708462,0.879300,0.133710,0.197587,0.207676,-0.096415,0.282436,0.715667,-0.638789,0.875200,0.098410,0.218052,0.185785,-0.113564,0.262598,0.763705,-0.589743,0.873580,0.078080,0.222350,0.207140,-0.084447,0.335378,0.727542,-0.598502,0.862600,0.095680,0.242763,0.184768,-0.101374,0.309022,0.778549,-0.546230,0.861130,0.075170,-0.214095,0.243523,-0.045751,-0.487085,0.694805,-0.529144,0.148380,0.127980,-0.238188,0.239181,-0.023233,-0.634236,0.670228,-0.385409,0.168050,0.127380,-0.227804,0.226889,-0.056724,-0.468958,0.725312,-0.503985,0.149200,0.112960,-0.250927,0.222709,-0.033674,-0.629363,0.703825,-0.329442,0.168400,0.112770,-0.266750,0.182983,-0.089675,-0.429735,0.788033,-0.440830,0.151730,0.070620,-0.268897,0.201155,-0.049069,-0.628229,0.725238,-0.281706,0.168980,0.091130,-0.246440,0.205495,-0.071982,-0.450364,0.749729,-0.484850,0.150890,0.091590,-0.289171,0.178226,-0.066456,-0.623391,0.746825,-0.231593,0.169250,0.069850,-0.270084,0.215239,0.002133,-0.777839,0.607096,-0.162484,0.199550,0.119610,-0.259369,0.231889,0.009979,-0.783688,0.572846,-0.240168,0.199200,0.133140,-0.272633,0.222370,0.048146,-0.906988,0.418595,-0.046369,0.233320,0.141660,-0.280777,0.205210,0.042616,-0.893169,0.448356,0.035025,0.234140,0.129190,-0.305800,0.168237,-0.024203,-0.755395,0.654622,-0.029138,0.200140,0.077500,-0.286247,0.193238,-0.010129,-0.771808,0.629462,-0.089948,0.199560,0.099130,-0.293549,0.182349,0.033858,-0.869640,0.478027,0.123353,0.234490,0.110240,-0.311451,0.155602,0.023100,-0.826102,0.526413,0.201110,0.235700,0.088480,0.214095,0.243522,-0.045751,0.487084,0.694806,-0.529144,0.851610,0.127980,0.227804,0.226889,-0.056724,0.468958,0.725313,-0.503984,0.850790,0.112960,0.238188,0.239181,-0.023233,0.634236,0.670228,-0.385409,0.831940,0.127380,0.250927,0.222709,-0.033674,0.629364,0.703825,-0.329441,0.831590,0.112770,0.266750,0.182983,-0.089675,0.429735,0.788034,-0.440830,0.848260,0.070620,0.268897,0.201155,-0.049069,0.628229,0.725238,-0.281705,0.831010,0.091130,0.289171,0.178226,-0.066456,0.623391,0.746825,-0.231593,0.830740,0.069850,0.246440,0.205495,-0.071982,0.450364,0.749729,-0.484850,0.849100,0.091590,0.270084,0.215239,0.002133,0.777839,0.607096,-0.162485,0.800440,0.119610,0.259369,0.231889,0.009979,0.783688,0.572846,-0.240168,0.800790,0.133140,0.280777,0.205210,0.042616,0.893169,0.448355,0.035025,0.765850,0.129190,0.272633,0.222370,0.048146,0.906988,0.418596,-0.046369,0.766670,0.141660,0.305800,0.168237,-0.024203,0.755395,0.654622,-0.029138,0.799850,0.077500,0.286247,0.193238,-0.010129,0.771807,0.629462,-0.089947,0.800430,0.099130,0.311451,0.155602,0.023100,0.826102,0.526413,0.201110,0.764290,0.088480,0.293549,0.182348,0.033858,0.869640,0.478028,0.123353,0.765500,0.110240,-0.273487,0.212473,0.083380,-0.950970,0.224075,0.213180,0.261130,0.150020,-0.262957,0.203368,0.115313,-0.913865,0.029894,0.404916,0.285210,0.158530,-0.279004,0.194686,0.078630,-0.928270,0.233312,0.289621,0.262220,0.138010,-0.265555,0.184937,0.111200,-0.880062,0.014222,0.474646,0.286670,0.147050,-0.301651,0.143518,0.062004,-0.819655,0.312253,0.480276,0.264740,0.099460,-0.288055,0.170928,0.071261,-0.887329,0.253858,0.384971,0.263310,0.120100,-0.269574,0.160229,0.105077,-0.826729,0.014195,0.562421,0.288990,0.130360,-0.276362,0.132587,0.097391,-0.753351,0.068362,0.654055,0.291470,0.112040,0.273487,0.212473,0.083380,0.950970,0.224076,0.213180,0.738860,0.150020,0.262957,0.203368,0.115313,0.913865,0.029895,0.404916,0.714780,0.158530,0.279004,0.194686,0.078630,0.928270,0.233312,0.289620,0.737770,0.138010,0.265555,0.184937,0.111200,0.880062,0.014222,0.474646,0.713320,0.147050,0.301651,0.143518,0.062004,0.819654,0.312253,0.480276,0.735250,0.099460,0.288055,0.170928,0.071261,0.887330,0.253858,0.384971,0.736680,0.120100,0.276362,0.132587,0.097391,0.753351,0.068362,0.654055,0.708520,0.112040,0.269574,0.160229,0.105077,0.826729,0.014194,0.562421,0.711000,0.130360,-0.245781,0.195478,0.147941,-0.878644,-0.120005,0.462152,0.306550,0.167410,-0.244262,0.176255,0.144870,-0.847988,-0.147063,0.509205,0.309210,0.156950,-0.223598,0.187148,0.186553,-0.887393,-0.203028,0.413900,0.328090,0.175350,-0.218093,0.166517,0.185870,-0.879429,-0.225376,0.419297,0.332140,0.165600,-0.241284,0.150627,0.140530,-0.808894,-0.152402,0.567860,0.314060,0.141750,-0.239023,0.121762,0.135536,-0.765908,-0.092042,0.636327,0.319730,0.125810,-0.210107,0.139054,0.184915,-0.875515,-0.225815,0.427179,0.339170,0.151080,-0.201706,0.108147,0.183949,-0.877131,-0.163954,0.451398,0.347210,0.136140,0.244262,0.176255,0.144870,0.847987,-0.147063,0.509205,0.690790,0.156950,0.245781,0.195478,0.147941,0.878643,-0.120005,0.462152,0.693440,0.167410,0.218093,0.166517,0.185871,0.879429,-0.225377,0.419296,0.667850,0.165600,0.223598,0.187148,0.186553,0.887393,-0.203028,0.413900,0.671900,0.175350,0.239023,0.121762,0.135536,0.765908,-0.092042,0.636327,0.680260,0.125810,0.241284,0.150627,0.140530,0.808894,-0.152403,0.567860,0.685930,0.141750,0.201706,0.108147,0.183949,0.877131,-0.163953,0.451398,0.652780,0.136140,0.210106,0.139054,0.184915,0.875515,-0.225815,0.427178,0.660820,0.151080,-0.179290,0.163126,0.287819,-0.899746,-0.177034,0.398894,0.376030,0.187850,-0.193575,0.152437,0.239954,-0.916942,-0.224444,0.329913,0.357310,0.172600,-0.171390,0.138052,0.295437,-0.896915,-0.184746,0.401763,0.382600,0.178570,-0.200557,0.175489,0.236112,-0.912981,-0.215717,0.346313,0.352010,0.182050,-0.162887,0.107782,0.302563,-0.888029,-0.193181,0.417236,0.391450,0.164940,-0.176758,0.091418,0.248365,-0.931174,-0.181429,0.316227,0.373470,0.143880,-0.154255,0.076758,0.308613,-0.868577,-0.190706,0.457390,0.400770,0.150860,-0.184974,0.123058,0.244034,-0.923532,-0.221348,0.313200,0.365070,0.158490,0.193575,0.152437,0.239954,0.916942,-0.224444,0.329913,0.642680,0.172600,0.179290,0.163126,0.287819,0.899746,-0.177033,0.398894,0.623960,0.187850,0.171390,0.138052,0.295437,0.896914,-0.184745,0.401763,0.617390,0.178570,0.200557,0.175489,0.236112,0.912981,-0.215716,0.346313,0.647980,0.182050,0.176758,0.091418,0.248365,0.931174,-0.181429,0.316226,0.626520,0.143880,0.162887,0.107782,0.302563,0.888029,-0.193181,0.417236,0.608540,0.164940,0.154255,0.076758,0.308613,0.868577,-0.190706,0.457389,0.599220,0.150860,0.184974,0.123058,0.244034,0.923532,-0.221348,0.313199,0.634930,0.158490,-0.133290,0.155989,0.364649,-0.799296,-0.188910,0.570472,0.416900,0.200870,-0.144577,0.129199,0.340763,-0.809079,-0.183148,0.558433,0.406510,0.184570,-0.114822,0.129743,0.377167,-0.703552,-0.271395,0.656779,0.428700,0.194110,-0.154921,0.155503,0.331477,-0.844983,-0.153932,0.512161,0.398550,0.193330,-0.121383,0.067857,0.349914,-0.679665,-0.229748,0.696614,0.429610,0.158950,-0.102760,0.095343,0.374234,-0.609129,-0.285329,0.739965,0.440130,0.180170,-0.133590,0.098128,0.346591,-0.753398,-0.209832,0.623186,0.417700,0.172050,-0.088002,0.066803,0.372952,-0.523596,-0.299432,0.797613,0.453640,0.168170,0.133290,0.155989,0.364649,0.799296,-0.188910,0.570473,0.583090,0.200870,0.144577,0.129199,0.340763,0.809079,-0.183147,0.558433,0.593480,0.184570,0.154921,0.155503,0.331477,0.844983,-0.153931,0.512161,0.601440,0.193330,0.114822,0.129743,0.377167,0.703553,-0.271394,0.656779,0.571290,0.194110,0.102760,0.095343,0.374234,0.609130,-0.285328,0.739965,0.559860,0.180170,0.121383,0.067857,0.349914,0.679665,-0.229747,0.696614,0.570380,0.158950,0.133590,0.098128,0.346591,0.753398,-0.209832,0.623187,0.582300,0.172050,0.088002,0.066803,0.372952,0.523597,-0.299432,0.797613,0.546350,0.168170,-0.105870,0.153256,0.397443,-0.709297,-0.315329,0.630449,0.435900,0.210310,-0.119603,0.167357,0.386730,-0.779789,-0.249275,0.574275,0.427880,0.212260,-0.089592,0.144480,0.409541,-0.648506,-0.372453,0.663867,0.446020,0.212040,-0.087959,0.122165,0.398208,-0.615687,-0.376820,0.692053,0.446490,0.200660,-0.074160,0.138353,0.420696,-0.629783,-0.399295,0.666286,0.456830,0.214790,-0.070758,0.119402,0.411995,-0.611945,-0.419013,0.670784,0.458380,0.206310,-0.078985,0.097154,0.391473,-0.566047,-0.372569,0.735379,0.453960,0.188740,-0.063418,0.099689,0.405796,-0.591182,-0.428946,0.683015,0.463460,0.196080,-0.066086,0.073086,0.388546,-0.513073,-0.377717,0.770770,0.464900,0.177740,-0.053176,0.080823,0.402331,-0.559934,-0.441558,0.701071,0.470770,0.186730,0.105870,0.153256,0.397443,0.709298,-0.315328,0.630448,0.564090,0.210310,0.119603,0.167358,0.386730,0.779789,-0.249275,0.574275,0.572110,0.212260,0.089592,0.144479,0.409541,0.648507,-0.372452,0.663866,0.553970,0.212040,0.087959,0.122165,0.398208,0.615687,-0.376819,0.692053,0.553500,0.200660,0.074160,0.138353,0.420696,0.629783,-0.399295,0.666286,0.543160,0.214790,0.070758,0.119402,0.411995,0.611945,-0.419013,0.670785,0.541610,0.206310,0.078985,0.097154,0.391473,0.566048,-0.372569,0.735379,0.546030,0.188740,0.066086,0.073086,0.388546,0.513074,-0.377717,0.770769,0.535090,0.177740,0.063418,0.099689,0.405796,0.591181,-0.428946,0.683016,0.536530,0.196080,0.053176,0.080823,0.402331,0.559933,-0.441558,0.701072,0.529220,0.186730,-0.060801,0.132995,0.429936,-0.631317,-0.416284,0.654329,0.466910,0.215890,-0.049625,0.128050,0.437658,-0.636304,-0.439279,0.634153,0.475150,0.216650,-0.057520,0.117256,0.422913,-0.612976,-0.435524,0.659226,0.468540,0.208880,-0.046781,0.115351,0.431563,-0.606285,-0.455841,0.651634,0.476590,0.211090,0.060801,0.132995,0.429936,0.631317,-0.416285,0.654329,0.533080,0.215890,0.057520,0.117256,0.422913,0.612975,-0.435524,0.659227,0.531450,0.208880,0.049625,0.128050,0.437658,0.636304,-0.439280,0.634153,0.524840,0.216650,0.046781,0.115351,0.431563,0.606285,-0.455842,0.651634,0.523400,0.211090,-0.051727,0.101588,0.417768,-0.597311,-0.448739,0.664721,0.472380,0.201320,-0.042264,0.103058,0.427059,-0.581128,-0.461785,0.670108,0.479310,0.205650,-0.043833,0.086862,0.414721,-0.573340,-0.469854,0.671207,0.477620,0.194780,0.051727,0.101588,0.417768,0.597309,-0.448738,0.664722,0.527610,0.201320,0.043833,0.086862,0.414721,0.573339,-0.469854,0.671208,0.522380,0.194780,0.042264,0.103058,0.427059,0.581129,-0.461784,0.670108,0.520680,0.205650,-0.040139,0.123439,0.444016,-0.624334,-0.475929,0.619435,0.481490,0.217220,-0.037787,0.113280,0.438373,-0.588984,-0.488464,0.643817,0.482600,0.212910,-0.041429,0.133778,0.450532,-0.653705,-0.447991,0.609896,0.481040,0.221590,-0.031608,0.119198,0.449071,-0.577787,-0.524360,0.625467,0.486420,0.217560,-0.032734,0.127793,0.455195,-0.610236,-0.496867,0.617037,0.486050,0.221000,-0.029898,0.110891,0.443500,-0.547250,-0.526373,0.650729,0.487150,0.214060,-0.034521,0.103759,0.434112,-0.560224,-0.483995,0.672233,0.484390,0.208860,-0.028033,0.103274,0.438977,-0.525312,-0.510636,0.680660,0.488080,0.210750,0.040139,0.123439,0.444016,0.624333,-0.475929,0.619435,0.518500,0.217220,0.037787,0.113280,0.438373,0.588984,-0.488465,0.643816,0.517390,0.212910,0.031608,0.119198,0.449071,0.577785,-0.524359,0.625469,0.513570,0.217560,0.029898,0.110891,0.443500,0.547250,-0.526374,0.650729,0.512840,0.214060,0.032734,0.127793,0.455195,0.610234,-0.496867,0.617039,0.513940,0.221000,0.041429,0.133778,0.450532,0.653703,-0.447991,0.609899,0.518950,0.221590,0.034521,0.103759,0.434112,0.560225,-0.483996,0.672232,0.515600,0.208860,0.028033,0.103274,0.438977,0.525310,-0.510638,0.680660,0.511910,0.210750,-0.040534,0.153406,0.464862,-0.666607,-0.407528,0.624144,0.481810,0.229960,-0.041562,0.143912,0.457545,-0.667817,-0.421430,0.613528,0.481130,0.225940,-0.032223,0.144656,0.468037,-0.632606,-0.427929,0.645512,0.486500,0.227380,-0.032944,0.136388,0.461553,-0.631273,-0.458192,0.625743,0.486060,0.224300,0.040534,0.153405,0.464862,0.666606,-0.407529,0.624145,0.518180,0.229960,0.041562,0.143912,0.457545,0.667815,-0.421431,0.613530,0.518860,0.225940,0.032944,0.136388,0.461553,0.631273,-0.458194,0.625742,0.513930,0.224300,0.032223,0.144656,0.468037,0.632607,-0.427930,0.645511,0.513490,0.227380,-0.035202,0.168739,0.479527,-0.617824,-0.388304,0.683750,0.485070,0.236340,-0.038478,0.161727,0.472414,-0.648514,-0.397903,0.648925,0.483170,0.233420,-0.028428,0.159284,0.480393,-0.590224,-0.393736,0.704704,0.488610,0.232830,-0.030662,0.152397,0.474348,-0.616507,-0.408815,0.672896,0.487380,0.230220,0.035202,0.168739,0.479527,0.617824,-0.388305,0.683749,0.514920,0.236340,0.038478,0.161727,0.472414,0.648514,-0.397903,0.648925,0.516820,0.233420,0.030662,0.152397,0.474348,0.616505,-0.408815,0.672898,0.512610,0.230220,0.028428,0.159284,0.480393,0.590221,-0.393738,0.704705,0.511380,0.232830,-0.025885,0.165205,0.485609,-0.558354,-0.380565,0.737164,0.489930,0.235220,-0.031052,0.173962,0.485902,-0.581625,-0.382806,0.717755,0.487260,0.238790,-0.026312,0.176953,0.491038,-0.535448,-0.382868,0.752800,0.489590,0.240640,-0.023901,0.169394,0.489173,-0.529783,-0.371502,0.762441,0.490930,0.237180,0.025885,0.165205,0.485609,0.558354,-0.380567,0.737163,0.510070,0.235220,0.031052,0.173962,0.485902,0.581623,-0.382807,0.717756,0.512730,0.238790,0.023901,0.169394,0.489173,0.529783,-0.371502,0.762441,0.509060,0.237180,0.026312,0.176953,0.491038,0.535446,-0.382869,0.752801,0.510400,0.240640,-0.020643,0.177435,0.495029,-0.470231,-0.392770,0.790326,0.492280,0.241520,-0.014104,0.176756,0.498211,-0.364461,-0.410951,0.835636,0.495040,0.242000,-0.019620,0.167564,0.491001,-0.468405,-0.385591,0.794932,0.492870,0.236930,-0.013558,0.165646,0.493184,-0.357790,-0.407794,0.840054,0.495270,0.236880,0.020643,0.177435,0.495029,0.470231,-0.392771,0.790325,0.507710,0.241520,0.014104,0.176756,0.498211,0.364458,-0.410953,0.835636,0.504950,0.242000,0.019620,0.167564,0.491001,0.468405,-0.385590,0.794932,0.507120,0.236930,-0.020186,0.159824,0.486815,-0.482980,-0.406684,0.775460,0.492500,0.233690,-0.021583,0.152592,0.481979,-0.510577,-0.427333,0.746122,0.491750,0.230960,-0.013805,0.156356,0.488465,-0.363927,-0.434592,0.823825,0.495060,0.233100,-0.014555,0.148193,0.483566,-0.381213,-0.467280,0.797700,0.494640,0.230120,0.020186,0.159824,0.486815,0.482983,-0.406686,0.775457,0.507500,0.233690,0.021583,0.152592,0.481979,0.510578,-0.427335,0.746119,0.508240,0.230960,-0.007130,0.176041,0.500299,-0.201400,-0.429812,0.880170,0.497610,0.242230,-0.000000,0.175794,0.500986,0.000003,-0.438134,0.898910,0.500000,0.242290,-0.006902,0.164364,0.494731,-0.195347,-0.429913,0.881484,0.497670,0.236910,0.007130,0.176041,0.500299,0.201399,-0.429812,0.880170,0.502380,0.242230,-0.023060,0.145344,0.476598,-0.533446,-0.447637,0.717674,0.490990,0.228430,-0.024196,0.137909,0.470919,-0.546333,-0.477802,0.687914,0.490430,0.225930,-0.015449,0.140557,0.478460,-0.396819,-0.498271,0.770883,0.494200,0.227580,-0.016194,0.133233,0.473081,-0.405254,-0.539804,0.737821,0.493870,0.225220,0.023060,0.145344,0.476598,0.533444,-0.447635,0.717678,0.509000,0.228430,0.024196,0.137909,0.470919,0.546332,-0.477801,0.687915,0.509560,0.225930,0.015449,0.140557,0.478460,0.396821,-0.498268,0.770884,0.505790,0.227580,0.016194,0.133233,0.473081,0.405254,-0.539803,0.737822,0.506120,0.225220,-0.016454,0.126171,0.467378,-0.402583,-0.586536,0.702782,0.493710,0.222870,-0.024696,0.130410,0.464942,-0.544024,-0.520225,0.658334,0.490160,0.223350,-0.016206,0.119336,0.461419,-0.391881,-0.619612,0.680081,0.493720,0.220390,-0.024396,0.122937,0.458823,-0.523912,-0.560420,0.641441,0.490170,0.220610,0.016454,0.126170,0.467378,0.402585,-0.586538,0.702779,0.506280,0.222870,0.024696,0.130410,0.464942,0.544026,-0.520227,0.658331,0.509830,0.223350,0.024396,0.122937,0.458823,0.523912,-0.560419,0.641441,0.509820,0.220610,0.016206,0.119337,0.461419,0.391885,-0.619610,0.680081,0.506270,0.220390,-0.023500,0.115574,0.452737,-0.496245,-0.575648,0.649900,0.490420,0.217670,-0.015600,0.112610,0.455395,-0.378787,-0.621055,0.686157,0.493870,0.217680,-0.022408,0.108214,0.447173,-0.474530,-0.562913,0.676721,0.490830,0.214540,-0.014938,0.105741,0.449670,-0.367034,-0.597212,0.713179,0.494080,0.214660,0.023500,0.115574,0.452737,0.496245,-0.575645,0.649903,0.509570,0.217670,0.022408,0.108214,0.447173,0.474530,-0.562913,0.676720,0.509160,0.214540,0.015600,0.112610,0.455395,0.378792,-0.621050,0.686158,0.506120,0.217680,0.014938,0.105741,0.449670,0.367038,-0.597212,0.713176,0.505910,0.214660,-0.021626,0.101211,0.442035,-0.460944,-0.540316,0.703981,0.491200,0.211250,-0.014677,0.098689,0.444155,-0.359353,-0.573459,0.736213,0.494190,0.211260,0.021626,0.101211,0.442035,0.460946,-0.540318,0.703978,0.508790,0.211250,0.014677,0.098689,0.444155,0.359356,-0.573461,0.736211,0.505800,0.211260,-0.034251,0.074119,0.413414,-0.525824,-0.508459,0.681894,0.483410,0.190340,-0.041272,0.064516,0.400771,-0.506424,-0.473048,0.720944,0.478940,0.180700,0.041272,0.064516,0.400771,0.506424,-0.473048,0.720944,0.521050,0.180700,0.034251,0.074119,0.413414,0.525822,-0.508459,0.681895,0.516580,0.190340,-0.007453,0.103929,0.451261,-0.206780,-0.627197,0.750910,0.497090,0.214650,-0.007417,0.096767,0.445506,-0.205025,-0.604760,0.769565,0.497110,0.211150,0.0,0.103299,0.451778,-0.000004,-0.639867,0.768486,0.500000,0.214640,0.0,0.096049,0.446002,-0.000000,-0.619052,0.785350,0.500000,0.211100,0.007453,0.103929,0.451262,0.206779,-0.627199,0.750908,0.502900,0.214650,0.007417,0.096767,0.445506,0.205024,-0.604764,0.769562,0.502880,0.211150,-0.008101,0.117119,0.462972,-0.211205,-0.660789,0.720243,0.496940,0.220270,-0.007798,0.110664,0.457027,-0.208873,-0.654309,0.726810,0.497010,0.217650,-0.000000,0.116386,0.463457,-0.000002,-0.675651,0.737222,0.500000,0.220240,-0.000000,0.109976,0.457576,-0.000004,-0.666435,0.745564,0.500000,0.217630,0.008101,0.117119,0.462972,0.211206,-0.660787,0.720245,0.503050,0.220270,0.007798,0.110664,0.457027,0.208873,-0.654306,0.726812,0.502980,0.217650,0.008088,0.130448,0.474483,0.215146,-0.590578,0.777772,0.502990,0.224920,-0.000000,0.129619,0.474829,-0.000001,-0.610088,0.792334,0.500000,0.224840,0.008214,0.123640,0.468851,0.213731,-0.635389,0.742024,0.503060,0.222660,-0.000000,0.122797,0.469334,-0.000001,-0.652742,0.757581,0.500000,0.222600,-0.008088,0.130448,0.474483,-0.215145,-0.590579,0.777772,0.497000,0.224920,-0.008214,0.123640,0.468851,-0.213730,-0.635388,0.742025,0.496930,0.222660,-0.007753,0.137765,0.479717,-0.214881,-0.542032,0.812420,0.497160,0.227230,-0.007328,0.145641,0.484747,-0.208273,-0.499694,0.840790,0.497360,0.229810,-0.000000,0.136819,0.480189,-0.000001,-0.560704,0.828017,0.500000,0.227150,0.007753,0.137765,0.479717,0.214883,-0.542032,0.812420,0.502830,0.227230,-0.006991,0.154328,0.489738,-0.197890,-0.459499,0.865852,0.497560,0.232910,-0.073130,0.042680,0.371678,-0.450715,-0.292080,0.843531,0.464860,0.157900,-0.058277,0.021522,0.371086,-0.370320,-0.250313,0.894542,0.473220,0.149500,-0.052040,0.052526,0.387234,-0.458087,-0.393644,0.796995,0.474630,0.169410,-0.037255,0.035852,0.386409,-0.387264,-0.411563,0.825011,0.482970,0.163160,0.073130,0.042680,0.371678,0.450715,-0.292080,0.843531,0.535130,0.157900,0.052040,0.052526,0.387234,0.458087,-0.393645,0.796995,0.525360,0.169410,0.058277,0.021522,0.371086,0.370321,-0.250313,0.894542,0.526770,0.149500,0.037255,0.035852,0.386409,0.387264,-0.411563,0.825010,0.517020,0.163160,-0.097461,0.017278,0.354521,-0.492812,-0.075058,0.866892,0.448160,0.139450,-0.109085,0.041529,0.351796,-0.596320,-0.192307,0.779372,0.439460,0.148600,-0.138986,0.022266,0.322002,-0.761065,0.041666,0.647337,0.416440,0.130950,-0.146027,0.048742,0.314229,-0.833579,-0.119853,0.539241,0.408660,0.140450,0.097461,0.017278,0.354521,0.492813,-0.075057,0.866892,0.551830,0.139450,0.109085,0.041529,0.351796,0.596320,-0.192307,0.779372,0.560530,0.148600,0.146027,0.048742,0.314229,0.833579,-0.119853,0.539241,0.591330,0.140450,0.138986,0.022265,0.322002,0.761065,0.041666,0.647337,0.583550,0.130950,-0.077967,-0.028387,0.367259,-0.257493,0.213313,0.942441,0.464260,0.119460,-0.040161,0.001420,0.371534,-0.238733,-0.211342,0.947809,0.482260,0.141230,-0.086187,-0.006888,0.359429,-0.347389,0.107372,0.931554,0.456500,0.129620,0.0,-0.012900,0.372229,-0.000000,-0.201924,0.979401,0.500000,0.130610,-0.134641,-0.027149,0.347960,-0.561680,0.398060,0.725302,0.434170,0.107020,-0.133972,-0.004386,0.333110,-0.640456,0.271201,0.718517,0.425270,0.119350,-0.020866,0.022803,0.385940,-0.249116,-0.459770,0.852380,0.490630,0.158220,0.0,0.016758,0.385546,-0.000001,-0.500776,0.865577,0.500000,0.154540,0.040161,0.001420,0.371534,0.238733,-0.211342,0.947809,0.517730,0.141230,0.077967,-0.028387,0.367259,0.257493,0.213311,0.942441,0.535740,0.119460,0.086187,-0.006888,0.359429,0.347389,0.107372,0.931554,0.543500,0.129620,0.133972,-0.004385,0.333110,0.640455,0.271201,0.718517,0.574720,0.119350,0.134641,-0.027149,0.347960,0.561680,0.398060,0.725303,0.565820,0.107020,0.020866,0.022803,0.385940,0.249116,-0.459770,0.852381,0.509360,0.158220,-0.168277,0.032847,0.265541,-0.885164,0.144127,0.442394,0.389030,0.122760,-0.170895,0.061924,0.254356,-0.930028,-0.057325,0.362989,0.380750,0.132610,-0.196016,0.048286,0.195138,-0.795459,0.280447,0.537209,0.362240,0.114180,-0.196562,0.078604,0.185332,-0.866421,0.016854,0.499029,0.354130,0.124210,0.168277,0.032847,0.265541,0.885164,0.144128,0.442394,0.610960,0.122760,0.170895,0.061924,0.254356,0.930028,-0.057324,0.362989,0.619240,0.132610,0.196562,0.078604,0.185332,0.866421,0.016854,0.499029,0.645860,0.124210,0.196016,0.048286,0.195138,0.795459,0.280448,0.537209,0.637750,0.114180,-0.200348,0.014664,0.217103,-0.699916,0.458580,0.547560,0.374700,0.102870,-0.168058,0.002729,0.282519,-0.798231,0.333314,0.501726,0.400580,0.111350,-0.169118,-0.021188,0.298787,-0.750130,0.411320,0.517804,0.413320,0.098540,-0.203738,-0.009797,0.236559,-0.663721,0.505795,0.551040,0.389760,0.089530,0.200348,0.014664,0.217103,0.699916,0.458579,0.547560,0.625290,0.102870,0.168058,0.002729,0.282519,0.798231,0.333314,0.501726,0.599410,0.111350,0.203738,-0.009797,0.236559,0.663722,0.505795,0.551040,0.610230,0.089530,0.169118,-0.021188,0.298787,0.750131,0.411319,0.517803,0.586680,0.098540,-0.077839,0.158830,-0.173716,-0.071615,0.697840,-0.712665,0.051780,0.090440,-0.033866,0.158147,-0.177699,-0.035772,0.684263,-0.728357,0.033800,0.098390,0.0,0.158459,-0.178093,-0.000001,0.678831,-0.734295,0.020610,0.104740,0.077839,0.158830,-0.173716,0.071615,0.697839,-0.712666,0.948210,0.090440,0.033866,0.158147,-0.177699,0.035772,0.684263,-0.728358,0.966190,0.098390,0.0,0.158459,-0.178093,-0.000001,0.678831,-0.734295,0.979380,0.104740,-0.287554,0.106353,0.090340,-0.666188,0.198906,0.718769,0.292870,0.095360,-0.244970,0.065563,0.135233,-0.616391,0.351594,0.704588,0.330480,0.100380,-0.239898,0.094335,0.131671,-0.709757,0.088917,0.698812,0.324240,0.112450,-0.301958,0.079102,0.088355,-0.576462,0.377761,0.724560,0.296900,0.079780,-0.261142,0.008326,0.168732,-0.506292,0.574127,0.643464,0.356180,0.072220,-0.253961,0.032147,0.152091,-0.531621,0.527383,0.662757,0.342010,0.086770,-0.318020,0.048123,0.095812,-0.509777,0.514748,0.689320,0.306810,0.064700,-0.329200,0.026277,0.105139,-0.487929,0.559078,0.670341,0.319080,0.050370,0.244970,0.065563,0.135233,0.616391,0.351594,0.704588,0.669510,0.100380,0.287554,0.106353,0.090340,0.666188,0.198907,0.718769,0.707120,0.095360,0.239898,0.094335,0.131671,0.709757,0.088917,0.698812,0.675760,0.112450,0.301958,0.079102,0.088355,0.576462,0.377761,0.724560,0.703090,0.079780,0.261142,0.008326,0.168732,0.506292,0.574127,0.643464,0.643810,0.072220,0.253961,0.032147,0.152091,0.531621,0.527383,0.662757,0.657980,0.086770,0.318020,0.048123,0.095812,0.509777,0.514748,0.689320,0.693190,0.064700,0.329200,0.026277,0.105139,0.487929,0.559079,0.670341,0.680910,0.050370,-0.320824,0.116096,0.053276,-0.733679,0.402423,0.547513,0.266550,0.078940,-0.361727,0.100662,0.004079,-0.690920,0.652196,0.311881,0.244080,0.046300,-0.343879,0.088228,0.047551,-0.649381,0.495432,0.576933,0.270670,0.059490,-0.334064,0.128136,0.012845,-0.760504,0.593874,0.262580,0.238990,0.067120,-0.394006,0.073036,-0.002527,-0.637651,0.688634,0.345232,0.250760,0.026370,-0.386382,0.039464,0.050540,-0.557976,0.593890,0.579618,0.288200,0.026070,-0.369075,0.059105,0.047605,-0.583306,0.567498,0.581120,0.278730,0.042050,-0.416900,0.054668,-0.005466,-0.617834,0.700902,0.356395,0.257920,0.007300,0.343879,0.088228,0.047551,0.649381,0.495432,0.576933,0.729320,0.059490,0.361727,0.100662,0.004079,0.690920,0.652196,0.311880,0.755910,0.046300,0.320824,0.116096,0.053276,0.733679,0.402423,0.547513,0.733440,0.078940,0.334064,0.128136,0.012845,0.760504,0.593874,0.262579,0.761000,0.067120,0.386382,0.039464,0.050540,0.557977,0.593889,0.579618,0.711790,0.026070,0.394006,0.073036,-0.002527,0.637651,0.688634,0.345232,0.749230,0.026370,0.369075,0.059105,0.047605,0.583306,0.567498,0.581120,0.721260,0.042050,0.416900,0.054668,-0.005466,0.617834,0.700902,0.356395,0.742070,0.007300,-0.326889,0.144949,-0.036593,-0.712484,0.701110,0.028502,0.202420,0.059760,-0.352832,0.121710,-0.048419,-0.659429,0.747558,0.079441,0.206490,0.042300,-0.307222,0.159546,-0.081609,-0.602190,0.779459,-0.172658,0.169300,0.055520,-0.328678,0.141080,-0.096743,-0.576253,0.806344,-0.133199,0.170820,0.041530,-0.386687,0.095856,-0.061455,-0.624090,0.774017,0.106812,0.212140,0.021870,-0.412071,0.077619,-0.070074,-0.613171,0.781864,0.112742,0.218040,0.000600,-0.383795,0.098563,-0.128041,-0.554427,0.821153,-0.135348,0.179420,0.0,-0.359618,0.117007,-0.114946,-0.560014,0.818288,-0.129575,0.174840,0.021840,0.352832,0.121710,-0.048419,0.659429,0.747558,0.079441,0.793500,0.042300,0.326889,0.144949,-0.036593,0.712484,0.701110,0.028502,0.797570,0.059760,0.307222,0.159546,-0.081609,0.602190,0.779459,-0.172658,0.830700,0.055520,0.328678,0.141080,-0.096743,0.576253,0.806344,-0.133199,0.829170,0.041530,0.386687,0.095856,-0.061455,0.624090,0.774018,0.106812,0.787860,0.021870,0.412071,0.077619,-0.070074,0.613171,0.781864,0.112741,0.781950,0.000600,0.359618,0.117007,-0.114946,0.560014,0.818287,-0.129575,0.825150,0.021840,0.383795,0.098563,-0.128041,0.554427,0.821152,-0.135349,0.820570,0.0,-0.259052,0.167514,-0.119873,-0.277915,0.818164,-0.503360,0.138000,0.060070,-0.283630,0.165987,-0.107091,-0.412689,0.825632,-0.384734,0.150910,0.056300,-0.301864,0.149340,-0.125558,-0.409501,0.832760,-0.372585,0.150510,0.042650,-0.274576,0.150610,-0.140564,-0.261977,0.812051,-0.521479,0.136410,0.045900,-0.347198,0.108374,-0.163416,-0.406813,0.816336,-0.409998,0.153880,0.004040,-0.327363,0.126369,-0.147553,-0.409215,0.821846,-0.396375,0.151980,0.024270,-0.308152,0.110334,-0.182109,-0.252643,0.775903,-0.578053,0.133970,0.010560,-0.293805,0.127951,-0.164777,-0.255973,0.786360,-0.562242,0.135190,0.028760,-0.244861,0.150401,-0.152628,-0.194014,0.781843,-0.592520,0.122900,0.050060,-0.232744,0.168210,-0.131995,-0.225759,0.792598,-0.566411,0.125360,0.063420,-0.203681,0.147931,-0.166339,-0.140862,0.745933,-0.650954,0.105000,0.056830,-0.194207,0.166799,-0.146304,-0.164526,0.753383,-0.636667,0.107930,0.069450,-0.268669,0.109486,-0.195599,-0.167672,0.747582,-0.642656,0.116240,0.017000,-0.258644,0.127227,-0.177480,-0.175021,0.756927,-0.629626,0.119740,0.034000,-0.222689,0.104617,-0.209681,-0.117579,0.723428,-0.680314,0.096710,0.023940,-0.214607,0.123331,-0.191189,-0.124644,0.729327,-0.672715,0.101070,0.040990,0.259052,0.167514,-0.119873,0.277915,0.818164,-0.503360,0.861990,0.060070,0.283630,0.165987,-0.107091,0.412689,0.825632,-0.384734,0.849080,0.056300,0.274576,0.150610,-0.140564,0.261977,0.812051,-0.521480,0.863580,0.045900,0.301864,0.149340,-0.125558,0.409501,0.832760,-0.372585,0.849480,0.042650,0.347198,0.108373,-0.163416,0.406815,0.816335,-0.409999,0.846110,0.004040,0.327363,0.126369,-0.147553,0.409216,0.821845,-0.396375,0.848010,0.024270,0.293805,0.127951,-0.164777,0.255973,0.786360,-0.562242,0.864800,0.028760,0.308152,0.110334,-0.182109,0.252643,0.775903,-0.578053,0.866020,0.010560,0.244861,0.150401,-0.152628,0.194014,0.781843,-0.592521,0.877090,0.050060,0.232744,0.168210,-0.131995,0.225758,0.792598,-0.566411,0.874630,0.063420,0.194207,0.166799,-0.146304,0.164526,0.753383,-0.636667,0.892060,0.069450,0.203681,0.147931,-0.166339,0.140862,0.745933,-0.650954,0.894990,0.056830,0.268669,0.109486,-0.195599,0.167671,0.747583,-0.642656,0.883750,0.017000,0.258644,0.127226,-0.177480,0.175020,0.756927,-0.629626,0.880250,0.034000,0.214607,0.123331,-0.191189,0.124644,0.729327,-0.672715,0.898920,0.040990,0.222689,0.104617,-0.209681,0.117579,0.723428,-0.680314,0.903280,0.023940,-0.145479,0.141782,-0.183057,-0.099095,0.717436,-0.689540,0.077350,0.066940,-0.136926,0.162581,-0.162609,-0.111148,0.719463,-0.685580,0.079930,0.079980,-0.156856,0.114937,-0.208700,-0.091669,0.707818,-0.700422,0.074470,0.049970,-0.165659,0.094610,-0.227737,-0.088503,0.703991,-0.704673,0.071360,0.031380,0.145479,0.141782,-0.183057,0.099095,0.717436,-0.689541,0.922640,0.066940,0.136926,0.162581,-0.162609,0.111149,0.719462,-0.685580,0.920060,0.079980,0.156856,0.114937,-0.208700,0.091669,0.707818,-0.700422,0.925520,0.049970,0.165659,0.094610,-0.227737,0.088503,0.703991,-0.704673,0.928630,0.031380,0.089761,0.410380,0.664872,-0.839707,-0.278449,-0.466217,0.524057,0.343561,0.087952,0.408012,0.669095,-0.818158,-0.285753,-0.498962,0.524060,0.343572,-0.089907,0.410320,0.664865,0.843126,-0.270815,-0.464539,0.475936,0.343561,-0.092121,0.406610,0.662823,0.776291,-0.290785,-0.559300,0.473590,0.342670,-0.088101,0.407959,0.669089,0.823741,-0.273581,-0.496593,0.475932,0.343572,-0.084355,0.413060,0.671892,0.767081,-0.373028,-0.521955,0.478430,0.344503,-0.082644,0.409630,0.676463,0.757984,-0.354421,-0.547582,0.478428,0.344515,-0.077135,0.415447,0.679201,0.670170,-0.470635,-0.573912,0.480891,0.345448,-0.075537,0.411276,0.684101,0.667625,-0.445854,-0.596231,0.480890,0.345460,-0.069287,0.417290,0.685656,0.567855,-0.546434,-0.615590,0.483035,0.346302,-0.067864,0.412538,0.690818,0.566149,-0.522083,-0.637891,0.483035,0.346315,0.084232,0.413101,0.671906,-0.771931,-0.366785,-0.519222,0.521560,0.344503,0.082517,0.409669,0.676476,-0.764843,-0.345765,-0.543564,0.521563,0.344515,-0.060345,0.418813,0.691334,0.484140,-0.592989,-0.643407,0.485248,0.347088,-0.059095,0.413577,0.696715,0.482059,-0.569650,-0.665671,0.485247,0.347103,0.077194,0.415398,0.679339,-0.673776,-0.467794,-0.572010,0.519106,0.345448,0.075602,0.411230,0.684248,-0.672580,-0.441679,-0.593764,0.519108,0.345460,-0.050352,0.420247,0.696844,0.439185,-0.613058,-0.656716,0.487871,0.347859,-0.049223,0.414608,0.702456,0.444034,-0.586879,-0.677058,0.487870,0.347875,0.069310,0.417267,0.685734,-0.565648,-0.548729,-0.615581,0.516955,0.346302,0.067887,0.412524,0.690899,-0.563083,-0.525005,-0.638206,0.516955,0.346315,-0.041130,0.421535,0.701593,0.395823,-0.633435,-0.664894,0.490367,0.348492,-0.040146,0.415597,0.707405,0.416027,-0.601486,-0.682009,0.490365,0.348510,0.060379,0.418785,0.691389,-0.483849,-0.593789,-0.642888,0.514742,0.347088,0.059128,0.413559,0.696771,-0.481648,-0.570538,-0.665208,0.514742,0.347103,-0.033638,0.422117,0.705365,0.277645,-0.678058,-0.680551,0.492264,0.348907,-0.032850,0.416019,0.711341,0.312142,-0.644262,-0.698207,0.492262,0.348925,0.050406,0.420211,0.696905,-0.438441,-0.613942,-0.656388,0.512119,0.347859,0.049278,0.414579,0.702520,-0.442916,-0.587945,-0.676865,0.512120,0.347875,-0.026430,0.415904,0.713555,0.130098,-0.692995,-0.709107,0.493815,0.349113,0.040165,0.415589,0.707429,-0.415339,-0.602237,-0.681765,0.509625,0.348510,-0.020230,0.415409,0.714453,-0.022249,-0.715696,-0.698058,0.495302,0.349082,0.032893,0.416003,0.711379,-0.313254,-0.644368,-0.697612,0.507728,0.348925,-0.013854,0.414656,0.714600,-0.075202,-0.726630,-0.682901,0.496800,0.348937,0.026496,0.415887,0.713594,-0.130234,-0.693466,-0.708622,0.506175,0.349113,0.020271,0.415395,0.714487,0.022819,-0.716200,-0.697522,0.504690,0.349082,0.013922,0.414642,0.714632,0.075286,-0.727089,-0.682403,0.503197,0.348937,-0.098686,0.399609,0.465844,0.750840,-0.386807,0.535368,0.478479,0.344274,-0.104803,0.420225,0.492754,0.943927,-0.274195,0.183900,0.475998,0.343347,-0.098744,0.430465,0.488355,0.815137,-0.474715,0.331960,0.478478,0.344278,-0.090683,0.404695,0.461595,0.570973,-0.472495,0.671370,0.480920,0.345224,-0.090748,0.438858,0.485685,0.662362,-0.611981,0.432152,0.480919,0.345228,-0.081328,0.408902,0.458390,0.446678,-0.506281,0.737671,0.483040,0.346054,-0.081393,0.445715,0.483660,0.538081,-0.688080,0.486842,0.483040,0.346058,0.098628,0.399624,0.465815,-0.751318,-0.386573,0.534866,0.521511,0.344274,0.104715,0.420310,0.492740,-0.943943,-0.274215,0.183790,0.523992,0.343347,0.098684,0.430491,0.488336,-0.815091,-0.474941,0.331750,0.521512,0.344278,-0.071031,0.412409,0.455599,0.368615,-0.519360,0.770966,0.485250,0.346805,-0.071091,0.451449,0.481891,0.449697,-0.728612,0.516620,0.485250,0.346810,0.090674,0.404658,0.461560,-0.571220,-0.472725,0.670998,0.519080,0.345224,0.090737,0.438800,0.485662,-0.661943,-0.612563,0.431970,0.519081,0.345228,-0.060365,0.415343,0.453122,0.310831,-0.526651,0.791216,0.487890,0.347545,-0.060416,0.456248,0.480324,0.377798,-0.755069,0.535854,0.487889,0.347551,0.081415,0.445615,0.483637,-0.537866,-0.688463,0.486538,0.516950,0.346058,0.081351,0.408840,0.458355,-0.446778,-0.506744,0.737292,0.516950,0.346054,-0.050108,0.417549,0.451019,0.243558,-0.535743,0.808492,0.490399,0.348156,-0.050154,0.459849,0.478996,0.283681,-0.783240,0.553227,0.490399,0.348161,0.071127,0.451343,0.481872,-0.449901,-0.728756,0.516240,0.514740,0.346810,0.071067,0.412344,0.455569,-0.368744,-0.519842,0.770579,0.514740,0.346805,-0.040776,0.418692,0.449395,0.142445,-0.548550,0.823894,0.492299,0.348556,-0.040823,0.461716,0.477971,0.132398,-0.811894,0.568595,0.492299,0.348562,0.060457,0.456149,0.480309,-0.378310,-0.755089,0.535465,0.512101,0.347551,0.060406,0.415283,0.453098,-0.311051,-0.527073,0.790848,0.512100,0.347545,-0.032364,0.461608,0.477281,-0.053764,-0.819299,0.570840,0.493849,0.348742,-0.032315,0.418619,0.448304,0.016523,-0.559675,0.828547,0.493849,0.348736,0.050197,0.459761,0.478983,-0.284221,-0.783285,0.552886,0.509591,0.348161,0.050152,0.417495,0.450999,-0.243810,-0.536117,0.808168,0.509591,0.348156,-0.024366,0.459859,0.476894,-0.193102,-0.806385,0.558977,0.495339,0.348712,-0.024320,0.417534,0.447694,-0.086467,-0.566083,0.819801,0.495339,0.348706,0.040873,0.461631,0.477959,-0.132553,-0.812057,0.568324,0.507691,0.348562,0.040826,0.418640,0.449377,-0.142532,-0.548926,0.823629,0.507691,0.348556,-0.016413,0.457315,0.476719,-0.226294,-0.804592,0.549020,0.496839,0.348582,-0.016377,0.415957,0.447422,-0.122252,-0.573297,0.810176,0.496839,0.348576,0.032422,0.461522,0.477270,0.053876,-0.819476,0.570576,0.506141,0.348742,0.032373,0.418566,0.448286,-0.016430,-0.560054,0.828293,0.506141,0.348736,-0.008279,0.455103,0.476659,-0.150330,-0.822425,0.548651,0.498399,0.348470,-0.008259,0.414586,0.447331,-0.084642,-0.583032,0.808028,0.498400,0.348465,0.024428,0.459773,0.476882,0.192921,-0.806602,0.558726,0.504651,0.348712,0.024382,0.417480,0.447676,0.086474,-0.566452,0.819545,0.504651,0.348706,0.000030,0.454213,0.476643,-0.002292,-0.834742,0.550637,0.500000,0.348419,0.000030,0.414034,0.447310,-0.001073,-0.588064,0.808814,0.500000,0.348415,0.016477,0.457237,0.476709,0.224924,-0.805062,0.548894,0.503161,0.348582,0.016441,0.415908,0.447407,0.121663,-0.573660,0.810007,0.503161,0.348576,0.008321,0.414554,0.447321,0.083045,-0.583310,0.807993,0.501590,0.348465,0.008341,0.455052,0.476653,0.146917,-0.823019,0.548686,0.501591,0.348470,0.108014,0.409965,0.502396,-0.990343,-0.118345,0.072211,0.526342,0.342505,-0.019557,0.413218,0.713776,0.134073,0.811769,-0.568380,0.495467,0.348307,-0.025699,0.413755,0.712937,0.169759,0.802761,-0.571627,0.493993,0.348345,-0.013360,0.412486,0.714070,0.111619,0.816242,-0.566824,0.496933,0.348177,0.025759,0.413741,0.712971,-0.169602,0.802841,-0.571561,0.505997,0.348345,0.019598,0.413202,0.713817,-0.134511,0.811751,-0.568302,0.504523,0.348307,0.013427,0.412468,0.714110,-0.111777,0.816291,-0.566723,0.503065,0.348177,-0.058557,0.411824,0.696279,0.324462,0.708364,-0.626853,0.485343,0.346485,-0.048619,0.412684,0.701940,0.261140,0.748238,-0.609874,0.487980,0.347197,-0.039503,0.413528,0.706812,0.258611,0.763397,-0.591900,0.490490,0.347793,0.058592,0.411804,0.696337,-0.324680,0.708377,-0.626726,0.514647,0.346485,0.048669,0.412658,0.702000,-0.259298,0.748890,-0.609859,0.512010,0.347197,0.039521,0.413520,0.706837,-0.257975,0.763635,-0.591870,0.509500,0.347793,-0.006835,0.411820,0.714291,0.055962,0.821583,-0.567336,0.498450,0.348063,0.000015,0.411574,0.714050,0.002626,0.823514,-0.567291,0.500000,0.348010,0.006892,0.411801,0.714330,-0.053256,0.821788,-0.567299,0.501540,0.348063,-0.087589,0.407391,0.668604,0.747843,0.303393,-0.590495,0.476005,0.343203,-0.082109,0.408877,0.675796,0.636521,0.438686,-0.634347,0.478473,0.344110,-0.074954,0.410154,0.683328,0.532368,0.547996,-0.645201,0.480935,0.345015,-0.067284,0.411046,0.690200,0.429893,0.637345,-0.639518,0.483103,0.345787,0.087431,0.407451,0.668591,-0.739324,0.314367,-0.595460,0.523988,0.343203,0.082024,0.408894,0.675831,-0.654676,0.422675,-0.626694,0.521518,0.344110,0.075044,0.410094,0.683488,-0.538899,0.544078,-0.643091,0.519063,0.345015,0.067304,0.411032,0.690278,-0.422790,0.641429,-0.640170,0.516888,0.345787,-0.032194,0.413879,0.710857,0.234228,0.781256,-0.578598,0.492417,0.348177,0.032238,0.413861,0.710900,-0.235538,0.780922,-0.578517,0.507573,0.348177,-0.091586,0.406076,0.662348,0.461269,0.493197,-0.737555,0.473693,0.342390,-0.092671,0.406048,0.661036,0.029715,0.648684,-0.760478,0.473123,0.342328,-0.094546,0.404784,0.661130,0.029715,0.648684,-0.760478,0.473149,0.342336,0.109883,0.389485,0.574128,-0.999947,0.007252,-0.007293,0.526473,0.342459,0.108828,0.414568,0.574938,-0.991530,-0.129834,-0.003304,0.526356,0.342547,-0.092671,0.406048,0.661036,0.695163,-0.333076,-0.637032,0.473123,0.342328,0.105053,0.434017,0.574046,-0.945525,-0.325549,0.000693,0.524009,0.343404,-0.105145,0.433916,0.574039,0.945680,-0.325099,0.000759,0.475982,0.343404,-0.098954,0.448136,0.574008,0.844966,-0.534750,0.008598,0.478466,0.344337,-0.090910,0.458652,0.574684,0.711988,-0.702054,0.013927,0.480912,0.345286,-0.081543,0.466943,0.575524,0.590479,-0.806900,0.015742,0.483039,0.346123,0.098889,0.448173,0.574013,-0.844618,-0.535301,0.008604,0.521524,0.344337,-0.071213,0.473820,0.576320,0.496616,-0.867831,0.015583,0.485249,0.346883,0.090901,0.458584,0.574696,-0.711158,-0.702893,0.014040,0.519088,0.345286,-0.060474,0.479580,0.577057,0.417732,-0.908440,0.015394,0.487885,0.347632,0.081565,0.466827,0.575534,-0.589982,-0.807261,0.015841,0.516951,0.346123,-0.050170,0.483917,0.577693,0.306673,-0.951675,0.016291,0.490390,0.348249,0.071249,0.473695,0.576329,-0.496837,-0.867703,0.015657,0.514741,0.346883,-0.040851,0.486160,0.578190,0.116890,-0.992985,0.017851,0.492290,0.348653,0.060515,0.479461,0.577064,-0.418449,-0.908109,0.015452,0.512105,0.347632,-0.032416,0.486035,0.578508,-0.115839,-0.993088,0.018920,0.493840,0.348835,0.050213,0.483812,0.577698,-0.307427,-0.951431,0.016350,0.509600,0.348249,-0.024430,0.483952,0.578670,-0.279998,-0.959807,0.019257,0.495330,0.348805,0.040901,0.486060,0.578195,-0.117084,-0.992960,0.017921,0.507700,0.348653,-0.016472,0.480915,0.578734,-0.308764,-0.950936,0.019638,0.496829,0.348671,0.032475,0.485933,0.578513,0.115935,-0.993075,0.018991,0.506150,0.348835,-0.008316,0.478269,0.578754,-0.202749,-0.979018,0.020406,0.498394,0.348550,0.024492,0.483851,0.578674,0.279676,-0.959900,0.019330,0.504661,0.348805,0.000030,0.477205,0.578746,-0.003285,-0.999777,0.020881,0.500000,0.348492,0.016537,0.480823,0.578737,0.306898,-0.951538,0.019708,0.503170,0.348671,0.008379,0.478208,0.578758,0.197956,-0.979998,0.020452,0.501597,0.348550,0.108699,0.394780,0.623429,-0.976176,0.028083,-0.215156,0.526604,0.342415,0.107574,0.413218,0.623743,-0.967037,-0.148550,-0.206813,0.526371,0.342588,0.103546,0.428992,0.626208,-0.920021,-0.301440,-0.250389,0.524026,0.343460,-0.103652,0.428896,0.626184,0.920792,-0.299571,-0.249800,0.475965,0.343460,-0.097429,0.440508,0.629917,0.829337,-0.469740,-0.302564,0.478453,0.344396,-0.089427,0.449075,0.634111,0.711650,-0.609378,-0.349589,0.480905,0.345344,-0.080223,0.455750,0.638092,0.598096,-0.702803,-0.385161,0.483037,0.346187,0.097348,0.440552,0.629944,-0.830611,-0.467921,-0.301887,0.521537,0.344396,-0.070007,0.461263,0.641709,0.507681,-0.757921,-0.409654,0.485249,0.346956,0.089428,0.449015,0.634170,-0.712425,-0.608944,-0.348766,0.519094,0.345344,-0.059241,0.465949,0.645045,0.441779,-0.790260,-0.424642,0.487880,0.347713,0.080247,0.455657,0.638141,-0.597109,-0.703838,-0.384803,0.516953,0.346187,-0.048996,0.469550,0.647914,0.356177,-0.826305,-0.436301,0.490382,0.348336,0.070043,0.461164,0.641748,-0.507654,-0.758226,-0.409123,0.514741,0.346956,-0.039925,0.471394,0.650150,0.190315,-0.873640,-0.447809,0.492281,0.348743,0.059286,0.465851,0.645078,-0.441905,-0.790448,-0.424161,0.512110,0.347713
-			],
-			"parts" : [
-				{
-					"id" : "part0",
-					"type" : "TRIANGLES",
-					"indices" : [
-						0,1,2,3,1,0,4,5,3,4,3,0,0,6,4,6,0,2,4,7,8,7,4,6,5,4,9,4,8,9,10,8,7,8,10,9,11,12,13,14,13,12,15,14,16,14,12,16,17,12,11,12,17,16,18,19,20,18,20,21,14,15,21,14,21,20,20,19,14,19,13,14,22,23,24,24,25,22,22,26,23,26,22,27,22,25,27,25,28,27,29,30,31,30,29,32,30,33,31,33,30,34,30,35,34,35,30,32,36,37,38,37,39,38,40,41,36,42,36,41,43,40,44,40,43,41,45,46,47,46,48,47,49,45,47,49,50,45,49,51,52,53,52,51,54,55,56,57,55,54,54,58,57,59,57,58,24,54,56,54,24,58,60,61,35,62,35,61,63,64,62,62,61,63,65,61,60,61,65,63,66,67,68,67,69,68,66,70,71,70,66,68,72,68,69,68,72,70,73,74,75,74,73,76,77,75,74,75,77,78,74,79,77,79,74,76,80,81,82,81,80,83,80,84,83,83,84,85,86,80,82,80,86,84,87,88,89,87,89,90,91,90,89,90,91,92,93,89,88,89,93,91,94,95,96,95,94,97,94,98,97,98,94,99,94,100,99,100,94,96,101,102,103,103,104,101,105,101,106,101,105,102,107,101,104,101,107,106,108,109,110,109,108,111,112,110,109,110,112,113,114,109,111,109,114,112,115,116,117,116,115,118,119,117,116,117,119,120,116,121,119,121,116,118,122,123,124,123,125,124,124,126,122,126,127,122,128,124,125,124,128,126,129,130,131,130,129,132,130,133,131,134,131,133,135,130,132,130,135,133,136,137,138,137,136,139,140,138,137,138,140,141,142,137,139,137,142,140,143,144,145,144,143,146,147,145,144,145,147,148,144,149,147,149,144,146,150,151,152,153,151,150,154,153,155,153,150,155,150,156,155,156,150,152,157,158,159,158,160,159,161,162,157,157,159,161,163,159,160,159,163,161,164,165,166,165,164,167,167,164,168,167,168,169,164,166,168,168,166,170,171,172,173,172,171,174,175,171,173,171,175,176,177,173,172,173,177,175,178,179,180,179,178,181,180,182,178,182,180,183,184,183,180,183,184,185,186,180,179,180,186,184,187,188,189,188,187,190,191,189,192,189,191,187,192,183,185,183,192,189,189,182,183,182,189,188,193,194,186,193,186,195,194,196,197,196,194,193,196,198,199,198,196,193,193,200,198,200,193,195,179,181,201,181,202,201,186,179,195,195,179,201,195,203,200,203,195,201,201,204,203,204,201,202,205,191,206,191,205,207,208,205,209,205,208,207,209,210,211,210,209,205,206,210,205,210,206,212,213,190,187,190,213,214,213,215,214,215,213,216,207,216,213,216,207,208,207,187,191,187,207,213,217,218,219,218,217,220,220,199,218,199,220,196,221,197,220,220,197,196,222,221,217,217,221,220,223,224,225,224,223,226,227,223,228,223,225,228,228,225,212,225,210,212,211,225,224,225,211,210,198,229,230,229,198,200,199,230,231,230,199,198,230,232,231,232,230,233,230,234,233,234,230,229,229,200,235,200,203,235,234,229,236,229,235,236,237,238,235,236,235,238,235,203,237,203,204,237,239,209,240,209,239,208,241,240,242,240,241,239,240,243,242,243,240,244,240,211,244,211,240,209,239,245,208,216,208,245,245,246,216,215,216,246,246,245,247,245,248,247,241,248,239,239,248,245,249,250,251,250,252,251,251,231,249,249,231,232,218,199,251,251,199,231,219,251,252,251,219,218,253,254,255,255,254,256,254,226,256,226,254,224,254,244,211,254,211,224,253,243,244,253,244,254,257,258,259,258,257,260,261,259,262,259,261,257,262,263,222,263,262,259,259,264,263,264,259,258,265,266,267,266,265,268,268,219,266,219,268,217,262,222,268,268,222,217,261,262,265,265,262,268,269,258,260,258,269,270,270,264,258,264,270,271,272,271,270,271,272,227,273,270,269,270,273,272,274,275,276,275,274,277,273,274,272,274,276,272,272,276,227,276,223,227,276,226,223,226,276,275,257,278,279,278,257,261,279,260,257,260,279,280,281,280,279,280,281,282,279,283,281,283,279,278,265,284,285,284,265,267,261,285,278,285,261,265,278,286,283,286,278,285,286,285,284,286,284,287,288,289,290,289,288,291,292,290,293,290,292,288,281,293,290,293,281,283,290,282,281,282,290,289,294,295,296,296,295,297,295,286,297,297,286,287,293,283,295,295,283,286,292,293,294,294,293,295,298,269,299,269,298,273,300,299,301,299,300,298,301,280,282,280,301,299,299,260,280,260,299,269,302,274,303,274,302,277,304,302,303,302,304,305,304,298,300,298,304,303,303,273,298,273,303,274,306,289,291,289,306,307,307,282,289,282,307,301,308,301,307,301,308,300,309,307,306,307,309,308,310,311,312,312,313,310,308,309,311,311,310,308,300,308,310,310,304,300,304,310,313,313,305,304,314,315,316,314,316,317,252,250,317,317,316,252,252,316,219,316,266,219,267,266,315,315,266,316,318,284,267,284,318,319,319,287,284,287,319,320,320,321,322,321,320,319,323,319,318,319,323,321,315,318,267,318,315,324,324,323,318,323,324,325,326,325,324,325,326,327,314,324,315,324,314,326,328,329,330,330,329,331,331,329,275,331,275,277,256,226,329,329,226,275,255,256,328,328,256,329,302,332,277,332,302,333,333,334,332,334,333,335,336,335,333,335,336,337,305,333,302,333,305,336,331,332,338,332,331,277,330,338,339,338,330,331,339,340,341,340,339,338,338,334,340,334,338,332,321,323,342,323,343,342,322,321,344,321,342,344,344,342,345,342,346,345,347,342,343,342,347,346,325,343,323,343,325,348,349,343,348,343,349,347,350,349,348,349,350,351,350,325,327,325,350,348,335,352,334,334,352,353,352,354,353,354,352,355,356,357,352,352,357,355,337,356,335,335,356,352,340,353,358,353,340,334,359,341,340,340,358,359,360,359,358,359,360,361,360,358,353,353,354,360,297,362,296,362,297,363,363,364,362,364,363,365,320,365,363,365,320,322,287,363,297,363,287,320,365,366,364,366,365,367,367,368,366,368,367,369,344,369,367,369,344,345,322,367,365,367,322,344,313,370,371,370,313,312,305,371,336,371,305,313,336,372,337,372,336,371,371,373,372,373,371,370,372,374,375,374,372,373,337,375,356,375,337,372,356,376,357,376,356,375,375,377,376,377,375,374,378,233,379,233,378,232,380,379,381,379,380,378,379,382,381,382,379,383,233,383,379,383,233,234,383,234,384,234,236,384,383,385,382,385,383,384,385,386,387,386,385,384,384,236,386,236,238,386,242,388,389,388,242,243,242,390,241,390,242,389,389,391,390,391,389,392,389,393,392,393,389,388,394,241,390,241,394,248,394,395,248,248,395,247,396,394,397,394,396,395,390,397,394,397,390,391,398,399,400,400,401,398,380,399,378,399,398,378,378,398,232,398,249,232,398,401,249,401,250,249,402,403,404,403,402,405,400,404,401,404,400,402,401,317,250,317,401,404,404,314,317,314,404,403,406,407,408,408,407,409,407,253,409,409,253,255,388,243,407,407,243,253,388,406,393,406,388,407,410,411,412,411,410,413,330,412,328,412,330,410,409,328,412,328,409,255,408,412,411,412,408,409,414,403,405,403,414,415,415,326,403,314,403,326,416,327,415,326,415,327,415,417,416,417,415,414,418,410,419,410,418,413,420,419,421,419,420,418,419,339,341,419,341,421,410,330,339,410,339,419,380,422,423,422,380,381,423,424,425,424,423,422,426,422,427,422,426,424,427,381,382,381,427,422,428,382,385,382,428,427,429,427,428,427,429,426,429,430,431,430,429,428,428,387,430,387,428,385,393,432,392,432,393,433,434,391,392,434,392,432,435,434,432,435,432,436,433,436,432,436,433,437,438,397,391,391,434,438,438,396,397,396,438,439,439,440,441,440,439,438,440,438,434,434,435,440,442,443,444,444,445,442,423,425,443,443,442,423,380,423,442,442,399,380,399,442,445,445,400,399,446,447,448,447,446,449,406,447,449,447,406,408,393,449,433,449,393,406,433,446,437,446,433,449,445,402,400,402,445,450,405,450,451,450,405,402,451,452,453,452,451,450,452,445,444,445,452,450,414,454,417,454,414,455,455,456,454,456,455,457,451,453,455,457,455,453,455,405,451,405,455,414,447,411,458,411,447,408,459,448,447,459,447,458,459,460,461,460,459,458,458,413,460,413,458,411,462,418,420,418,462,463,463,413,418,413,463,460,461,463,464,463,461,460,465,463,462,463,465,464,466,467,468,467,466,469,470,467,469,467,470,471,472,470,469,470,472,473,474,469,466,469,474,472,475,476,477,476,475,478,479,477,480,477,479,475,480,470,473,470,480,477,470,477,476,470,476,471,467,481,482,481,467,471,468,482,483,482,468,467,483,484,485,484,483,482,482,486,484,486,482,481,476,481,471,481,476,487,487,486,481,486,487,488,488,489,490,489,488,487,478,487,476,487,478,489,491,474,492,474,466,492,493,491,494,491,492,494,494,495,496,495,494,492,492,468,495,468,492,466,497,498,499,497,500,498,1,497,501,497,1,500,495,501,497,501,495,468,496,497,499,497,496,495,501,483,502,483,501,468,1,502,2,502,1,501,2,503,6,503,2,502,502,485,503,485,502,483,504,479,505,479,504,475,504,478,475,478,504,506,507,506,504,506,507,508,507,505,509,505,507,504,510,511,512,510,513,511,508,510,506,510,508,513,506,514,478,514,506,510,510,17,514,17,510,512,489,514,515,514,489,478,490,515,516,515,490,489,516,11,13,11,516,515,17,515,514,515,17,11,178,517,518,517,178,182,518,181,178,181,518,519,519,472,474,472,519,518,518,473,472,473,518,517,202,520,204,520,202,521,521,491,520,520,491,493,519,474,521,521,474,491,181,519,202,202,519,521,188,517,182,517,188,522,522,473,517,473,522,480,523,480,522,480,523,479,190,522,188,522,190,523,214,524,525,524,214,215,523,190,214,214,525,523,523,525,479,525,505,479,505,525,524,524,509,505,237,526,238,526,237,527,527,528,526,528,527,529,520,529,527,529,520,493,204,527,237,527,204,520,386,530,387,387,530,531,530,532,531,531,532,533,526,532,530,532,526,528,238,530,386,530,238,526,246,534,535,534,246,247,215,535,524,535,215,246,524,536,509,536,524,535,535,537,536,537,535,534,396,538,539,396,539,395,247,539,534,539,247,395,534,540,537,540,534,539,540,539,538,538,541,540,542,493,494,493,542,529,542,543,529,529,543,528,543,544,545,544,543,542,542,496,544,496,542,494,507,509,546,509,536,546,508,546,547,546,508,507,547,548,549,548,547,546,546,536,548,536,537,548,550,551,552,552,551,553,551,554,553,553,554,555,556,551,557,551,556,554,551,533,557,533,551,550,430,531,558,531,430,387,431,558,559,558,431,430,552,559,558,558,550,552,558,533,550,533,558,531,560,559,561,559,560,431,562,561,563,561,562,560,563,564,565,564,563,561,561,552,564,552,561,559,564,553,566,553,564,552,565,566,567,566,565,564,567,568,569,568,567,566,566,555,568,555,566,553,570,571,572,571,573,572,541,572,574,572,541,570,575,574,572,575,572,576,572,573,576,573,577,576,439,538,396,538,439,578,578,541,538,541,578,570,571,578,579,578,571,570,441,578,439,578,441,579,579,580,581,580,579,441,581,571,579,571,581,582,582,583,584,583,582,581,581,585,583,585,581,580,582,573,571,573,582,586,577,586,587,586,577,573,587,588,589,588,587,586,586,584,588,584,586,582,431,590,591,590,431,560,592,591,590,591,592,593,594,590,595,590,594,592,595,560,562,595,590,560,429,596,426,426,596,597,596,598,597,597,598,599,593,596,591,596,593,598,591,429,431,429,591,596,441,600,580,600,441,601,602,580,600,602,585,580,603,602,600,600,604,603,604,600,601,601,605,604,606,440,435,435,607,606,601,441,440,440,606,601,605,601,606,606,608,605,608,606,607,607,609,608,610,533,532,533,610,557,556,610,611,610,556,557,611,543,545,543,611,610,528,610,532,610,528,543,540,541,612,541,574,612,537,612,548,612,537,540,548,613,549,613,548,612,612,575,613,575,612,574,544,499,614,499,544,496,545,614,615,614,545,544,615,616,617,616,615,614,614,498,616,498,614,499,611,615,618,615,611,545,618,556,611,556,618,619,619,620,621,620,619,618,618,617,620,617,618,615,513,547,622,547,513,508,511,622,623,622,511,513,623,624,625,624,623,622,622,549,624,549,622,547,624,613,626,613,624,549,625,626,627,626,625,624,627,628,629,628,627,626,626,575,628,575,626,613,619,554,556,554,619,630,630,555,554,555,630,631,632,631,630,631,632,633,621,630,619,630,621,632,576,628,575,628,576,634,634,629,628,629,634,635,636,635,634,635,636,637,577,634,576,634,577,636,638,639,640,639,638,641,633,638,640,640,631,633,631,568,555,568,631,640,569,640,639,640,569,568,642,643,644,643,642,645,644,589,642,589,644,587,636,587,644,587,636,577,637,644,643,644,637,636,484,646,647,646,484,486,485,647,648,647,485,484,648,649,650,649,648,647,647,651,649,651,647,646,503,648,652,648,503,485,6,652,7,652,6,503,7,653,10,653,7,652,652,650,653,650,652,648,488,646,486,646,488,654,654,651,646,651,654,655,656,655,654,655,656,657,490,654,488,654,490,656,656,516,658,516,656,490,657,658,659,658,657,656,659,19,18,19,659,658,658,13,19,13,658,516,660,3,5,3,660,661,1,661,500,661,1,3,500,616,498,616,500,661,617,661,660,661,617,616,662,16,663,16,662,15,663,625,662,625,663,623,512,623,663,623,512,511,17,663,16,663,17,512,620,660,664,660,620,617,621,664,632,664,621,620,633,632,664,633,664,665,665,660,5,660,665,664,662,627,666,627,662,625,667,15,662,667,662,666,637,666,635,666,637,667,666,629,635,629,666,627,668,669,670,669,668,671,671,672,669,672,671,673,653,673,671,673,653,650,10,671,668,671,10,653,673,674,672,674,673,675,675,676,674,676,675,677,649,677,675,677,649,651,650,675,673,675,650,649,678,679,680,679,678,681,681,18,679,18,681,659,682,659,681,659,682,657,683,681,678,681,683,682,682,684,685,684,682,683,657,685,655,685,657,682,655,677,651,677,655,685,685,676,677,676,685,684,10,686,687,686,10,668,686,641,687,641,686,688,689,688,686,688,689,690,668,689,686,689,668,670,18,691,692,18,692,679,679,692,693,679,693,680,694,693,692,693,694,695,692,645,694,645,692,691,669,696,697,696,669,672,670,697,698,697,670,669,699,700,697,697,700,698,701,699,696,696,699,697,702,701,696,701,702,703,702,704,703,704,702,705,674,705,702,705,674,676,672,702,696,702,672,674,706,678,707,678,706,683,708,706,709,706,707,709,709,707,710,707,711,710,707,680,711,680,707,678,712,706,708,712,708,713,683,712,684,712,683,706,684,705,676,705,684,712,712,704,705,704,712,713,714,715,716,715,714,717,698,700,714,698,714,716,698,689,670,689,698,716,716,690,689,690,716,715,718,719,720,719,718,721,695,721,693,721,695,719,693,711,680,711,693,721,711,718,710,718,711,721,699,722,700,722,699,723,723,724,722,724,723,725,726,725,723,725,726,727,701,723,699,723,701,726,722,728,729,728,722,724,700,729,714,729,700,722,714,730,717,730,714,729,729,731,730,731,729,728,709,732,733,732,709,710,708,733,734,733,708,709,734,735,736,735,734,733,733,737,735,737,733,732,732,738,737,738,732,739,739,740,738,740,739,741,718,741,739,741,718,720,710,739,732,739,710,718,742,743,744,743,742,745,704,744,703,744,704,742,703,726,701,726,703,744,744,727,726,727,744,743,742,746,745,746,742,747,747,736,746,736,747,734,713,734,747,734,713,708,704,747,742,747,704,713,748,563,749,563,748,562,717,749,715,749,717,748,715,750,690,750,715,749,749,565,750,565,749,563,639,688,751,688,639,641,751,569,639,569,751,567,750,567,751,567,750,565,690,751,688,751,690,750,583,752,753,752,583,585,584,753,754,753,584,583,754,719,695,719,754,753,753,720,719,720,753,752,642,694,645,694,642,755,755,695,694,695,755,754,588,754,755,754,588,584,755,589,588,589,755,642,756,595,757,595,756,594,731,757,730,757,731,756,730,748,717,748,730,757,757,562,748,562,757,595,602,758,759,758,602,603,585,759,752,759,585,602,741,752,759,752,741,720,759,740,741,740,759,758,457,760,761,760,457,453,762,456,457,762,457,761,763,762,761,761,764,763,761,765,764,765,761,760,452,766,767,766,452,444,453,767,760,767,453,452,760,768,765,768,760,767,767,769,768,769,767,766,464,770,461,770,464,771,771,772,770,772,771,773,774,771,775,771,774,773,775,464,465,464,775,771,776,459,777,459,776,448,777,778,776,778,777,779,770,779,777,779,770,772,777,461,770,461,777,459,780,781,782,781,780,783,780,764,765,764,780,782,764,784,763,784,764,782,782,785,784,785,782,781,786,787,788,787,786,789,769,788,768,788,769,786,768,780,765,780,768,788,788,783,780,783,788,787,790,791,792,791,790,793,793,794,791,794,793,795,795,773,774,773,795,793,790,773,793,773,790,772,796,797,798,797,796,799,799,792,797,792,799,790,799,772,790,772,799,779,778,799,796,799,778,779,800,801,802,801,800,803,783,803,781,803,783,801,781,804,785,804,781,803,805,803,800,803,805,804,806,807,808,807,806,809,789,809,787,809,789,807,801,787,809,787,801,783,802,809,806,809,802,801,810,811,812,811,810,813,813,814,811,814,813,815,791,815,813,815,791,794,792,813,810,813,792,791,816,817,818,817,816,819,819,812,817,812,819,810,797,810,819,810,797,792,798,819,816,819,798,797,820,821,822,821,820,823,823,802,821,802,823,800,824,800,823,800,824,805,825,823,820,823,825,824,826,827,828,827,826,829,829,808,827,808,829,806,821,806,829,806,821,802,822,829,826,829,822,821,830,831,832,831,830,833,833,834,831,834,833,835,811,835,833,835,811,814,812,833,830,833,812,811,836,837,838,837,836,839,839,832,837,832,839,830,817,830,839,830,817,812,818,839,836,839,818,817,840,841,842,841,840,843,843,822,841,822,843,820,844,820,843,820,844,825,845,843,840,843,845,844,846,847,848,847,846,849,846,828,849,828,846,826,841,826,846,826,841,822,842,846,848,846,842,841,850,851,852,851,850,853,854,852,855,852,854,850,855,831,834,831,855,852,852,832,831,832,852,851,856,857,858,857,856,859,853,858,851,858,853,856,851,837,832,837,851,858,858,838,837,838,858,857,860,861,862,861,860,863,840,862,861,862,840,842,861,845,840,845,861,864,863,864,861,864,863,865,848,866,867,866,848,847,842,867,862,867,842,848,862,868,860,868,862,867,867,869,868,869,867,866,870,871,872,871,870,873,872,874,875,874,872,871,871,854,874,854,871,850,850,871,873,850,873,853,876,856,877,856,876,859,877,878,876,878,877,879,873,879,877,879,873,870,853,877,856,877,853,873,863,880,881,880,863,860,865,881,882,881,865,863,883,882,881,882,883,884,885,881,880,881,885,883,868,886,887,886,868,869,860,887,880,887,860,868,888,880,887,880,888,885,887,889,888,889,887,886,872,890,870,890,872,891,891,892,890,892,891,893,894,893,891,893,894,895,875,891,872,891,875,894,879,896,878,896,879,897,897,898,896,898,897,899,890,899,897,899,890,892,870,897,879,897,870,890,900,901,902,901,900,903,904,902,905,902,904,900,905,883,885,883,905,902,902,884,883,884,902,901,906,888,889,888,906,907,907,885,888,885,907,905,908,905,907,905,908,904,909,907,906,907,909,908,910,911,912,911,910,913,895,912,893,912,895,910,893,914,892,914,893,912,912,915,914,915,912,911,899,916,898,916,899,917,918,917,919,917,918,916,914,919,917,919,914,915,892,917,899,917,892,914,920,900,904,900,920,921,921,903,900,903,921,922,923,922,921,922,923,924,925,921,920,921,925,923,926,908,909,908,926,927,927,904,908,904,927,920,928,920,927,920,928,925,929,927,926,927,929,928,911,930,915,930,911,931,932,931,933,931,932,930,933,934,935,934,933,931,931,913,934,913,931,911,936,919,937,919,936,918,938,937,939,937,938,936,939,930,932,930,939,937,937,915,930,915,937,919,940,923,925,923,940,941,941,924,923,924,941,942,943,942,941,942,943,944,945,941,940,941,945,943,946,928,929,928,946,947,947,925,928,925,947,940,948,940,947,940,948,945,949,947,946,947,949,948,933,950,932,950,933,951,951,952,950,952,951,953,954,953,951,953,954,955,935,951,933,951,935,954,956,939,957,939,956,938,958,957,959,957,958,956,959,950,952,950,959,957,957,932,950,932,957,939,960,943,945,943,960,961,961,944,943,944,961,962,963,962,961,962,963,964,965,961,960,961,965,963,966,948,949,948,966,967,967,945,948,945,967,960,968,960,967,960,968,965,969,967,966,967,969,968,953,970,952,970,953,971,971,972,970,972,971,973,974,973,971,973,974,975,955,971,953,971,955,974,976,959,977,959,976,958,978,977,979,977,978,976,979,970,972,970,979,977,977,952,970,952,977,959,980,963,965,963,980,981,981,964,963,964,981,982,983,982,981,982,983,984,985,981,980,981,985,983,986,987,988,987,986,989,989,969,987,969,989,968,980,968,989,968,980,965,985,989,986,989,985,980,973,990,972,990,973,991,992,991,993,991,992,990,993,994,995,994,993,991,975,991,973,991,975,994,996,997,998,997,996,999,998,992,996,992,998,990,998,979,972,998,972,990,978,998,997,998,978,979,1000,1001,1002,1001,1000,1003,1004,1002,1005,1002,1004,1000,362,1005,1002,1005,362,364,1002,296,362,296,1002,1001,1006,1005,1007,1005,1006,1004,1008,1007,1009,1007,1008,1006,1009,366,368,366,1009,1007,364,1007,1005,1007,364,366,1010,983,985,983,1010,1011,1011,984,983,984,1011,1012,1000,1012,1011,1012,1000,1004,1011,1003,1000,1003,1011,1010,1013,984,1012,984,1013,1014,1015,1014,1013,1014,1015,1016,1008,1013,1006,1013,1008,1015,1004,1013,1012,1013,1004,1006,1017,1018,1019,1018,1017,1020,1019,312,1017,312,1019,370,1021,370,1019,370,1021,373,1019,1022,1021,1022,1019,1018,1021,1023,1024,1023,1021,1022,1024,373,1021,373,1024,374,374,1025,377,1025,374,1024,1024,1026,1025,1026,1024,1023,1027,993,1028,993,1027,992,1020,1028,1018,1028,1020,1027,1018,1029,1022,1029,1018,1028,1028,995,1029,995,1028,993,1029,995,1030,995,1031,1030,1022,1030,1023,1030,1022,1029,1026,1023,1030,1026,1030,1032,1032,1030,1031,1031,1033,1032,1010,986,1034,986,1010,985,1003,1034,1035,1034,1003,1010,1036,1035,1034,1035,1036,1037,988,1034,986,1034,988,1036,1038,294,1039,294,1038,292,1037,1039,1035,1039,1037,1038,1035,1001,1003,1001,1035,1039,1001,1039,294,1001,294,296,1027,996,992,996,1027,1040,1040,999,996,999,1040,1041,1042,1041,1040,1041,1042,1043,1020,1040,1027,1040,1020,1042,1044,311,309,311,1044,1045,1017,311,1045,311,1017,312,1017,1042,1020,1042,1017,1045,1045,1043,1042,1043,1045,1044,1014,982,984,982,1014,1046,964,1046,1047,1046,964,982,1048,1047,1046,1047,1048,1049,1016,1046,1014,1046,1016,1048,994,1031,995,1031,994,1050,1050,1033,1031,1033,1050,1051,1052,1051,1050,1051,1052,1053,975,1050,994,1050,975,1052,1047,1054,964,962,964,1054,1054,1055,962,944,962,1055,1056,1057,1054,1055,1054,1057,1049,1056,1047,1054,1047,1056,975,974,1058,975,1058,1052,1052,1058,1059,1052,1059,1053,1058,1060,1061,1058,1061,1059,974,955,1060,974,1060,1058,942,1062,924,1062,942,1063,1063,1064,1062,1064,1063,1065,1055,1065,1063,1065,1055,1057,944,1063,942,1063,944,1055,1066,954,935,954,1066,1067,1067,955,954,955,1067,1060,1068,1060,1067,1060,1068,1061,1069,1067,1066,1067,1069,1068,1070,903,922,903,1070,1071,1072,1070,1073,1070,1072,1071,1062,1073,1070,1073,1062,1064,924,1070,922,1070,924,1062,934,913,1074,913,1075,1074,1074,935,934,935,1074,1066,1076,1066,1074,1066,1076,1069,1077,1074,1075,1074,1077,1076,901,1078,884,1078,901,1079,1079,1080,1078,1080,1079,1081,1071,1081,1079,1081,1071,1072,903,1079,901,1079,903,1071,1082,910,895,910,1082,1083,913,1083,1075,1083,913,910,1075,1084,1077,1084,1075,1083,1085,1083,1082,1083,1085,1084,1086,882,1087,882,1086,865,1088,1087,1089,1087,1088,1086,1078,1089,1087,1089,1078,1080,884,1087,882,1087,884,1078,1090,894,875,894,1090,1091,1091,895,894,895,1091,1082,1092,1082,1091,1082,1092,1085,1093,1091,1090,1091,1093,1092,1094,864,1095,864,1094,845,1096,1095,1097,1095,1096,1094,1097,1086,1088,1086,1097,1095,1095,865,1086,865,1095,864,1098,874,854,874,1098,1099,1099,875,874,875,1099,1090,1100,1090,1099,1090,1100,1093,1101,1099,1098,1099,1101,1100,1094,844,845,844,1094,1102,1102,825,844,825,1102,1103,1104,1103,1102,1103,1104,1105,1096,1102,1094,1102,1096,1104,1098,855,1106,855,1098,854,1101,1106,1107,1106,1101,1098,1107,1108,1109,1108,1107,1106,1106,834,1108,834,1106,855,1103,824,825,824,1103,1110,1110,805,824,805,1110,1111,1112,1111,1110,1111,1112,1113,1105,1110,1103,1110,1105,1112,835,1108,834,1108,835,1114,1109,1114,1115,1114,1109,1108,1116,1115,1114,1115,1116,1117,814,1114,835,1114,814,1116,1111,804,805,804,1111,1118,1118,785,804,785,1118,1119,1119,1120,1121,1120,1119,1118,1113,1118,1111,1118,1113,1120,815,1116,814,1116,815,1122,1122,1117,1116,1117,1122,1123,1124,1123,1122,1123,1124,1125,794,1122,815,1122,794,1124,784,1119,1126,1119,784,785,763,1126,1127,1126,763,784,1127,1128,1129,1128,1127,1126,1126,1121,1128,1121,1126,1119,1124,795,1130,795,1124,794,1125,1130,1131,1130,1125,1124,1131,1132,1133,1132,1131,1130,1130,774,1132,774,1130,795,762,1127,1134,1127,762,763,456,1134,1135,1134,456,762,1135,1136,1137,1136,1135,1134,1134,1129,1136,1129,1134,1127,1132,775,1138,775,1132,774,1133,1138,1139,1138,1133,1132,1139,1140,1141,1140,1139,1138,1138,465,1140,465,1138,775,1135,454,456,454,1135,1142,1142,417,454,417,1142,1143,1144,1143,1142,1143,1144,1145,1142,1137,1144,1137,1142,1135,1140,462,1146,462,1140,465,1141,1146,1147,1146,1141,1140,1147,1148,1149,1148,1147,1146,1146,420,1148,420,1146,462,1143,416,417,416,1143,1150,1150,327,416,327,1150,350,1151,350,1150,350,1151,351,1145,1150,1143,1150,1145,1151,1148,421,1152,421,1148,420,1149,1152,1153,1152,1149,1148,1153,359,361,359,1153,1152,341,1152,421,1152,341,359,1038,288,292,288,1038,1154,1154,291,288,291,1154,1155,1156,1154,1157,1154,1156,1155,1157,1038,1037,1038,1157,1154,1044,306,1158,306,1044,309,1043,1044,1159,1159,1044,1158,1159,1158,1156,1156,1158,1155,1158,291,1155,291,1158,306,1160,1036,988,1036,1160,1161,1161,1037,1036,1037,1161,1157,1162,1157,1161,1157,1162,1156,1163,1161,1160,1161,1163,1162,1041,1164,999,1164,1041,1165,1163,1165,1162,1165,1163,1164,1162,1159,1156,1159,1162,1165,1043,1165,1041,1165,1043,1159,1166,1008,1009,1008,1166,1167,1168,1167,1166,1167,1168,1169,1166,1170,1168,1170,1166,1171,1166,368,1171,368,1166,1009,1171,369,1172,369,1171,368,1170,1171,1173,1171,1172,1173,1173,1174,1175,1174,1173,1172,1172,345,1174,345,1172,369,1176,1025,1026,1176,1026,1177,377,1176,1178,1176,377,1025,1176,1179,1178,1179,1176,1180,1180,1176,1177,1180,1177,1181,376,1178,1182,1178,376,377,1182,357,376,357,1182,1183,1184,1183,1182,1183,1184,1185,1184,1178,1179,1178,1184,1182,1167,1015,1008,1015,1167,1186,1186,1016,1015,1016,1186,1187,1188,1187,1186,1187,1188,1189,1169,1186,1167,1186,1169,1188,1177,1032,1190,1032,1177,1026,1181,1190,1191,1190,1181,1177,1192,1191,1190,1191,1192,1193,1033,1190,1032,1190,1033,1192,346,1174,345,1174,346,1194,1194,1175,1174,1175,1194,1195,1196,1195,1194,1195,1196,1197,347,1194,346,1194,347,1196,1183,355,357,355,1183,1198,354,1198,1199,1198,354,355,1200,1199,1198,1199,1200,1201,1185,1198,1183,1198,1185,1200,1202,347,349,347,1202,1196,1202,1197,1196,1197,1202,1203,1204,1203,1202,1203,1204,1205,1204,349,351,349,1204,1202,360,354,1206,354,1199,1206,1207,361,360,1207,360,1206,1207,1208,1209,1208,1207,1206,1206,1201,1208,1201,1206,1199,1204,1151,1210,1151,1204,351,1210,1205,1204,1205,1210,1211,1211,1212,1213,1212,1211,1210,1151,1212,1210,1212,1151,1145,1153,1207,1214,1207,1153,361,1153,1215,1149,1215,1153,1214,1215,1216,1217,1216,1215,1214,1214,1209,1216,1209,1214,1207,1218,1144,1137,1144,1218,1219,1219,1145,1144,1145,1219,1212,1220,1212,1219,1212,1220,1213,1221,1219,1218,1219,1221,1220,1222,1147,1223,1147,1222,1141,1224,1223,1225,1223,1224,1222,1217,1225,1223,1223,1215,1217,1223,1149,1215,1149,1223,1147,1136,1226,1227,1226,1136,1129,1137,1227,1218,1227,1137,1136,1228,1218,1227,1218,1228,1221,1227,1229,1228,1229,1227,1226,1230,1139,1231,1139,1230,1133,1232,1231,1233,1231,1232,1230,1233,1222,1224,1222,1233,1231,1231,1141,1222,1141,1231,1139,1128,1234,1235,1234,1128,1121,1129,1235,1226,1235,1129,1128,1226,1236,1229,1236,1226,1235,1235,1237,1236,1237,1235,1234,1131,1238,1125,1238,1131,1239,1239,1240,1238,1240,1239,1241,1241,1230,1232,1230,1241,1239,1239,1133,1230,1133,1239,1131,1120,1242,1243,1242,1120,1113,1121,1243,1234,1243,1121,1120,1234,1244,1237,1244,1234,1243,1243,1245,1244,1245,1243,1242,1123,1246,1117,1246,1123,1247,1247,1248,1246,1248,1247,1249,1238,1249,1247,1249,1238,1240,1125,1247,1123,1247,1125,1238,1250,1112,1105,1112,1250,1251,1113,1251,1242,1251,1113,1112,1252,1242,1251,1242,1252,1245,1253,1251,1250,1251,1253,1252,1115,1254,1109,1254,1115,1255,1255,1256,1254,1256,1255,1257,1246,1257,1255,1257,1246,1248,1117,1255,1115,1255,1117,1246,1258,1250,1259,1250,1258,1253,1260,1259,1261,1259,1260,1258,1261,1104,1096,1104,1261,1259,1259,1105,1104,1105,1259,1250,1254,1262,1263,1262,1254,1256,1263,1109,1254,1109,1263,1107,1264,1107,1263,1107,1264,1101,1263,1265,1264,1265,1263,1262,1266,1267,1268,1267,1266,1269,1268,1088,1266,1088,1268,1097,1261,1097,1268,1097,1261,1096,1268,1267,1261,1267,1260,1261,1270,1271,1272,1271,1270,1273,1272,1264,1270,1270,1264,1265,1264,1100,1101,1100,1264,1272,1272,1093,1100,1093,1272,1271,1266,1089,1274,1089,1266,1088,1269,1274,1275,1274,1269,1266,1275,1276,1277,1276,1275,1274,1080,1274,1089,1274,1080,1276,1271,1092,1093,1092,1271,1278,1278,1085,1092,1085,1278,1279,1280,1279,1278,1279,1280,1281,1273,1278,1271,1278,1273,1280,1081,1276,1080,1276,1081,1282,1277,1282,1283,1282,1277,1276,1283,1284,1285,1284,1283,1282,1072,1282,1081,1282,1072,1284,1279,1084,1085,1084,1279,1286,1077,1286,1287,1286,1077,1084,1287,1288,1289,1288,1287,1286,1281,1286,1279,1286,1281,1288,1284,1073,1290,1073,1284,1072,1285,1290,1291,1290,1285,1284,1291,1292,1293,1292,1291,1290,1064,1290,1073,1290,1064,1292,1287,1076,1077,1076,1287,1294,1294,1069,1076,1069,1294,1295,1295,1296,1297,1296,1295,1294,1294,1289,1296,1289,1294,1287,1065,1292,1064,1292,1065,1298,1293,1298,1299,1298,1293,1292,1300,1299,1298,1299,1300,1301,1057,1298,1065,1298,1057,1300,1295,1068,1069,1068,1295,1302,1302,1061,1068,1061,1302,1303,1304,1303,1302,1303,1304,1305,1297,1302,1295,1302,1297,1304,1306,1056,1049,1056,1306,1307,1057,1056,1300,1056,1307,1300,1300,1307,1301,1307,1308,1301,1309,1307,1306,1307,1309,1308,1059,1310,1053,1310,1059,1311,1311,1312,1310,1312,1311,1313,1305,1311,1303,1311,1305,1313,1303,1059,1061,1059,1303,1311,1187,1048,1016,1048,1187,1314,1314,1049,1048,1049,1314,1306,1315,1306,1314,1306,1315,1309,1189,1314,1187,1314,1189,1315,1051,1192,1033,1192,1051,1316,1316,1193,1192,1193,1316,1317,1310,1317,1316,1317,1310,1312,1053,1316,1051,1316,1053,1310,1318,1319,1320,1319,1318,1321,1322,1323,1318,1318,1320,1322,1322,1168,1170,1168,1322,1320,1320,1169,1168,1169,1320,1319,1322,1173,1324,1173,1322,1170,1323,1324,1325,1324,1323,1322,1325,1326,42,1326,1325,1324,1324,1175,1326,1175,1324,1173,1327,1328,1329,1328,1327,1330,1330,1181,1328,1181,1330,1180,1331,1180,1330,1180,1331,1179,1331,1327,1332,1327,1331,1330,1331,1184,1179,1184,1331,1333,1333,1185,1184,1185,1333,1334,1334,1335,50,1335,1334,1333,1333,1332,1335,1332,1333,1331,1318,1336,1321,1336,1318,1337,1337,1338,1336,1338,1337,1339,1340,1339,1337,1339,1340,1341,1337,1323,1340,1323,1337,1318,41,43,1342,1342,1343,41,42,41,1343,1325,42,1343,1340,1325,1343,1325,1340,1323,1341,1343,1342,1343,1341,1340,1327,1344,1345,1344,1327,1329,1332,1345,1346,1345,1332,1327,1346,1347,1348,1347,1346,1345,1345,1349,1347,1349,1345,1344,45,1350,46,1350,45,1351,1351,1348,1350,1348,1351,1346,1335,1346,1351,1346,1335,1332,1351,50,1335,50,1351,45,1188,1319,1352,1319,1188,1169,1352,1189,1188,1189,1352,1353,1354,1353,1352,1353,1354,1355,1321,1352,1319,1352,1321,1354,1354,1356,1355,1356,1354,1357,1357,1358,1356,1358,1357,1359,1336,1359,1357,1359,1336,1338,1321,1357,1354,1357,1321,1336,1328,1191,1360,1191,1328,1181,1329,1360,1361,1360,1329,1328,1361,1362,1363,1362,1361,1360,1360,1193,1362,1193,1360,1191,1361,1364,1365,1364,1361,1363,1329,1365,1344,1365,1329,1361,1344,1366,1349,1366,1344,1365,1365,1367,1366,1367,1365,1364,1353,1315,1189,1315,1353,1368,1368,1309,1315,1309,1368,1369,1370,1369,1368,1369,1370,1371,1355,1368,1353,1368,1355,1370,1372,1373,1370,1373,1372,1374,1374,1372,1375,1374,1375,1376,1375,1372,1358,1372,1356,1358,1356,1370,1355,1372,1370,1356,1317,1362,1193,1362,1317,1377,1377,1363,1362,1363,1377,1378,1379,1378,1377,1378,1379,1380,1312,1377,1317,1377,1312,1379,1378,1381,1382,1381,1383,1382,1363,1378,1364,1378,1382,1364,1384,1367,1382,1364,1382,1367,1385,1384,1383,1383,1384,1382,1308,1386,1301,1386,1308,1387,1387,1388,1386,1388,1387,1389,1369,1389,1387,1389,1369,1371,1309,1387,1308,1387,1309,1369,1390,1313,1305,1313,1390,1391,1391,1312,1313,1312,1391,1379,1392,1379,1391,1379,1392,1380,1393,1391,1390,1391,1393,1392,1394,1299,1395,1299,1394,1293,1396,1395,1397,1395,1396,1394,1386,1397,1395,1397,1386,1388,1301,1395,1299,1395,1301,1386,1398,1304,1297,1304,1398,1399,1399,1305,1304,1305,1399,1390,1400,1390,1399,1390,1400,1393,1401,1399,1398,1399,1401,1400,1394,1402,1403,1402,1394,1396,1403,1293,1394,1293,1403,1291,1404,1291,1403,1291,1404,1285,26,1403,1402,1403,26,1404,1405,1398,1406,1398,1405,1401,33,1406,1407,1406,33,1405,1407,1296,1289,1296,1407,1406,1406,1297,1296,1297,1406,1398,1408,1283,1409,1283,1408,1277,28,1409,27,1409,28,1408,27,1404,26,1404,27,1409,1409,1285,1404,1285,1409,1283,1410,1277,1408,1277,1410,1275,1410,1269,1275,1269,1410,1411,1410,1412,1413,1410,1413,1411,1408,28,1412,1408,1412,1410,1414,1288,1281,1288,1414,1415,1415,1289,1288,1289,1415,1407,31,1407,1415,1407,31,33,29,1415,1414,1415,29,31,1414,1281,1416,1281,1280,1416,1416,1417,1414,29,1414,1417,1418,1419,1416,1417,1416,1419,1416,1273,1418,1273,1416,1280,1420,1260,1267,1260,1420,1421,1422,1421,1420,1421,1422,1423,1413,1420,1411,1420,1413,1422,1269,1420,1267,1420,1269,1411,1424,1270,1265,1265,1425,1424,1273,1424,1418,1424,1273,1270,1418,1426,1419,1426,1418,1424,1426,1424,1425,1425,1427,1426,1428,1429,1430,1429,1428,1431,1423,1430,1421,1430,1423,1428,1421,1258,1260,1258,1421,1430,1253,1430,1429,1430,1253,1258,1432,1433,1434,1433,1432,1435,1256,1434,1262,1434,1256,1432,1262,1425,1265,1425,1262,1434,1434,1427,1425,1427,1434,1433,1436,1437,1438,1437,1436,1439,1439,1431,1437,1431,1439,1429,1429,1252,1253,1252,1429,1439,1439,1245,1252,1245,1439,1436,1440,1441,1442,1441,1440,1443,1248,1442,1257,1442,1248,1440,1257,1432,1256,1432,1257,1442,1442,1435,1432,1435,1442,1441,1244,1436,1444,1436,1244,1245,1237,1444,1445,1444,1237,1244,1445,1446,1447,1446,1445,1444,1444,1438,1446,1438,1444,1436,1249,1440,1248,1440,1249,1448,1448,1443,1440,1443,1448,1449,1450,1449,1448,1449,1450,1451,1240,1448,1249,1448,1240,1450,1236,1445,1452,1445,1236,1237,1229,1452,1453,1452,1229,1236,1453,1454,1455,1454,1453,1452,1452,1447,1454,1447,1452,1445,1241,1450,1240,1450,1241,1456,1456,1451,1450,1451,1456,1457,1457,1458,1459,1458,1457,1456,1456,1232,1458,1232,1456,1241,1228,1453,1460,1453,1228,1229,1221,1460,1461,1460,1221,1228,1461,1462,1463,1462,1461,1460,1460,1455,1462,1455,1460,1453,1458,1233,1464,1233,1458,1232,1459,1464,1465,1464,1459,1458,1465,1466,1467,1466,1465,1464,1464,1224,1466,1224,1464,1233,1468,1220,1469,1220,1468,1213,1470,1469,1471,1469,1470,1468,1471,1461,1463,1461,1471,1469,1461,1469,1220,1461,1220,1221,1225,1472,1473,1472,1225,1217,1466,1225,1473,1225,1466,1224,1467,1473,1474,1473,1467,1466,1473,1475,1474,1475,1473,1472,1476,1211,1477,1211,1476,1205,1478,1477,1479,1477,1478,1476,1479,1468,1470,1468,1479,1477,1477,1213,1468,1213,1477,1211,1216,1480,1481,1480,1216,1209,1217,1481,1472,1481,1217,1216,1472,1482,1475,1482,1472,1481,1481,1483,1482,1483,1481,1480,1484,1203,1485,1484,1197,1203,37,1485,1486,1485,37,1484,1486,1476,1478,1476,1486,1485,1485,1205,1476,1205,1485,1203,1487,1208,1201,1208,1487,1488,1209,1488,1480,1488,1209,1208,1480,1489,1483,1489,1480,1488,52,1488,1487,1488,52,1489,1389,1374,1490,1374,1389,1373,1388,1389,1491,1389,1490,1491,1491,1490,1492,1490,1493,1492,1490,1374,1493,1374,1376,1493,1392,1383,1381,1383,1392,1494,1495,1383,1494,1383,1495,1385,1496,1497,1494,1494,1497,1495,1496,1392,1393,1392,1496,1494,1498,1397,1388,1388,1491,1498,1396,1498,1499,1498,1396,1397,1500,1499,1498,1499,1500,59,1498,1491,1500,1491,1492,1500,1501,1393,1400,1393,1501,1496,1501,1502,1496,1496,1502,1497,1503,1502,1501,1502,1503,64,1401,1501,1400,1501,1401,1503,56,1504,1505,1504,56,55,25,24,56,25,56,1505,28,25,1505,1505,1412,28,1505,1413,1412,1413,1505,1504,1506,60,1507,60,1506,65,1419,1507,1417,1507,1419,1506,29,1507,32,1507,29,1417,32,60,35,60,32,1507,1508,1509,1510,1508,1510,1511,55,1508,1504,1508,55,1509,1504,1422,1413,1422,1504,1508,1508,1423,1422,1423,1508,1511,1512,1513,1514,1514,1513,1515,1427,1513,1426,1513,1427,1515,1426,1506,1419,1506,1426,1513,65,1513,1512,1513,65,1506,1511,1428,1423,1428,1511,1516,1431,1516,1517,1516,1431,1428,1517,1518,1519,1518,1517,1516,1510,1516,1511,1516,1510,1518,1433,1515,1427,1515,1433,1520,1520,1514,1515,1514,1520,1521,1521,1522,1523,1522,1521,1520,1435,1520,1433,1520,1435,1522,1437,1517,1524,1517,1437,1431,1438,1524,1525,1524,1438,1437,1525,1526,1527,1526,1525,1524,1524,1519,1526,1519,1524,1517,1441,1522,1435,1522,1441,1528,1523,1528,1529,1528,1523,1522,1529,1530,1531,1530,1529,1528,1443,1528,1441,1528,1443,1530,1446,1532,1447,1533,1447,1532,1533,1534,1535,1534,1533,1532,1527,1534,1532,1532,1525,1527,1438,1525,1446,1532,1446,1525,1451,1536,1537,1451,1537,1449,1449,1537,1530,1449,1530,1443,1530,1537,1531,1537,1538,1531,1536,1538,1537,1538,1536,1539,1540,1455,1541,1455,1454,1541,1541,1542,1540,1542,1541,1543,1541,1535,1543,1535,1541,1533,1447,1533,1454,1541,1454,1533,1544,1459,1545,1459,1544,1457,1457,1544,1536,1457,1536,1451,1544,1546,1539,1544,1539,1536,1544,1547,1546,1547,1544,1545,1462,1548,1463,1548,1462,1549,1549,1550,1548,1550,1549,1551,1540,1551,1549,1551,1540,1542,1540,1549,1462,1462,1455,1540,1465,1552,1553,1552,1465,1467,1545,1465,1553,1465,1545,1459,1545,1554,1547,1554,1545,1553,1553,1555,1554,1555,1553,1552,1471,1556,1470,1556,1471,1557,1557,1558,1556,1558,1557,1559,1548,1559,1557,1559,1548,1550,1463,1557,1471,1557,1463,1548,1560,1474,1475,1474,1560,1561,1561,1467,1474,1467,1561,1552,1552,1562,1555,1562,1552,1561,1561,1563,1562,1563,1561,1560,1556,1479,1470,1479,1556,1564,1478,1479,1565,1479,1564,1565,1565,1564,1566,1564,1567,1566,1564,1558,1567,1558,1564,1556,1560,1482,1568,1482,1560,1475,1569,1560,1568,1560,1569,1563,1570,1568,1571,1568,1570,1569,1571,1482,1483,1482,1571,1568,1478,1572,1486,1572,1478,1565,1486,39,37,39,1486,1572,1573,1572,1574,1572,1573,39,1572,1566,1574,1566,1572,1565,1483,1575,1571,1575,1483,1489,1575,1570,1571,1570,1575,1576,46,1576,1575,46,1575,53,1489,53,1575,53,1489,52,1577,1578,1579,1578,1577,1580,1580,1550,1578,1550,1580,1559,1559,1581,1558,1581,1559,1580,1582,1580,1577,1580,1582,1581,1578,1551,1583,1551,1578,1550,1579,1583,1584,1583,1579,1578,1584,1585,1586,1585,1584,1583,1583,1542,1585,1542,1583,1551,1587,1588,1589,1588,1587,1590,1590,1591,1588,1591,1590,1592,1562,1592,1590,1592,1562,1563,1555,1590,1587,1590,1555,1562,1587,1554,1555,1554,1587,1593,1593,1547,1554,1547,1593,1594,1595,1594,1593,1594,1595,1596,1589,1593,1587,1593,1589,1595,1597,1598,1376,1493,1376,1598,1492,1598,1599,1598,1492,1493,1599,1577,1579,1577,1599,1598,1582,1577,1597,1598,1597,1577,1500,1600,59,1600,1500,1601,1601,1586,1600,1586,1601,1584,1599,1584,1601,1584,1599,1579,1492,1601,1500,1601,1492,1599,1602,1385,1495,1385,1602,1603,1603,1602,1588,1603,1588,1591,1604,1588,1602,1588,1604,1589,1497,1602,1495,1602,1497,1604,1605,1502,64,1502,1605,1606,1606,1497,1502,1497,1606,1604,1595,1589,1606,1604,1606,1589,1596,1606,1605,1606,1596,1595,1581,1582,1607,1582,1608,1607,1558,1607,1567,1607,1558,1581,1609,1567,1607,1567,1609,1566,1610,1607,1608,1607,1610,1609,1342,1611,1341,1612,1341,1611,1611,1609,1612,1610,1612,1609,1574,1566,1611,1609,1611,1566,1573,1611,1342,1611,1573,1574,1613,1582,1597,1582,1613,1608,1614,1608,1613,1608,1614,1610,1358,1613,1375,1613,1358,1614,1375,1597,1376,1597,1375,1613,1339,1612,1615,1612,1339,1341,1338,1615,1359,1615,1338,1339,1359,1614,1358,1614,1359,1615,1615,1610,1614,1610,1615,1612,1592,1616,1591,1617,1591,1616,1616,1618,1617,1618,1616,1619,1569,1570,1616,1619,1616,1570,1563,1616,1592,1616,1563,1569,1348,1620,1621,1348,1621,1350,1621,46,1350,46,1621,1576,1621,1619,1570,1621,1570,1576,1620,1618,1619,1620,1619,1621,1622,1603,1591,1622,1591,1617,1384,1385,1603,1384,1603,1622,1367,1384,1622,1622,1623,1367,1623,1622,1617,1617,1618,1623,1620,1347,1624,1347,1620,1348,1618,1624,1623,1624,1618,1620,1623,1366,1367,1366,1623,1624,1624,1349,1366,1349,1624,1347,1625,1534,1527,1534,1625,1626,1535,1626,1543,1626,1535,1534,1585,1543,1626,1543,1585,1542,1586,1626,1625,1626,1586,1585,1538,1627,1531,1627,1538,1628,1628,1596,1627,1596,1628,1594,1546,1594,1628,1594,1546,1547,1628,1539,1546,1539,1628,1538,1526,1629,1630,1629,1526,1519,1630,1527,1526,1527,1630,1625,1600,1625,1630,1625,1600,1586,1630,59,1600,59,1630,1629,1529,1631,1523,1631,1529,1632,1632,64,1631,64,1632,1605,1627,1605,1632,1605,1627,1596,1531,1632,1529,1632,1531,1627,1633,1634,1635,1634,1633,1636,1637,1635,1638,1635,1637,1633,425,1638,1635,1635,443,425,443,1635,1634,1634,444,443,1634,766,444,766,1634,1639,1639,769,766,769,1639,1640,1641,1640,1639,1640,1641,1642,1636,1639,1634,1639,1636,1641,1643,1644,1645,1644,1643,1646,446,1644,1646,1644,446,448,437,1646,1647,1646,437,446,1648,1646,1643,1646,1648,1647,1644,776,1649,776,1644,448,1645,1649,1650,1649,1645,1644,1650,1651,1652,1651,1650,1649,1649,778,1651,778,1649,776,1653,1638,1654,1638,1653,1637,599,1654,597,1654,599,1653,597,424,426,424,597,1654,1654,425,424,425,1654,1638,1655,1647,1648,1647,1655,1656,1656,437,1647,437,1656,436,436,607,435,607,436,1656,1656,609,607,609,1656,1655,1657,1653,599,1653,1657,1658,1658,1637,1653,1637,1658,1659,1660,1659,1658,1659,1660,1661,1662,1658,1657,1658,1662,1660,1663,1657,1664,1657,1663,1662,1665,1664,1666,1664,1665,1663,1666,598,593,598,1666,1664,1664,599,598,599,1664,1657,1655,1667,609,1667,1655,1668,1668,1669,1667,1669,1668,1670,1670,1671,1672,1671,1670,1668,1648,1668,1655,1668,1648,1671,1667,1673,1674,1673,1667,1669,609,1674,608,1674,609,1667,608,1675,605,1675,608,1674,1674,1676,1675,1676,1674,1673,1677,1678,1679,1678,1677,1680,1659,1661,1677,1659,1677,1679,1659,1633,1637,1633,1659,1679,1679,1636,1633,1636,1679,1678,1681,1682,1683,1682,1681,1684,1684,1645,1682,1645,1684,1643,1671,1643,1684,1643,1671,1648,1671,1681,1672,1681,1671,1684,1678,1641,1636,1641,1678,1685,1685,1642,1641,1642,1685,1686,1687,1686,1685,1686,1687,1688,1680,1685,1678,1685,1680,1687,1682,1650,1689,1650,1682,1645,1683,1689,1690,1689,1683,1682,1690,1691,1692,1691,1690,1689,1689,1652,1691,1652,1689,1650,1693,1694,1695,1694,1693,1696,1642,1695,1640,1695,1642,1693,1640,786,769,786,1640,1695,1695,789,786,789,1695,1694,1697,1698,1699,1698,1697,1700,1688,1699,1686,1699,1688,1697,1686,1693,1642,1693,1686,1699,1699,1696,1693,1696,1699,1698,1701,1702,1703,1702,1701,1704,1704,798,1702,798,1704,796,1651,796,1704,796,1651,778,1652,1704,1701,1704,1652,1651,1705,1706,1707,1706,1705,1708,1708,1703,1706,1703,1708,1701,1691,1701,1708,1701,1691,1652,1692,1708,1705,1708,1692,1691,1709,1710,1711,1710,1709,1712,1696,1711,1694,1711,1696,1709,1694,807,789,807,1694,1711,808,1711,1710,1711,808,807,1713,1714,1715,1714,1713,1716,1716,818,1714,818,1716,816,1702,816,1716,816,1702,798,1703,1716,1713,1716,1703,1702,1698,1709,1696,1709,1698,1717,1717,1712,1709,1712,1717,1718,1718,1719,1720,1719,1718,1717,1700,1717,1698,1717,1700,1719,1706,1713,1721,1713,1706,1703,1707,1721,1722,1721,1707,1706,1722,1723,1724,1723,1722,1721,1721,1715,1723,1715,1721,1713,1725,1712,1726,1712,1725,1710,827,1710,1725,1710,827,808,1727,827,1725,827,1727,828,1728,1725,1726,1725,1728,1727,1729,1715,1730,1715,1714,1730,1731,1730,1732,1730,1731,1729,1732,836,838,836,1732,1730,1730,1714,836,1714,818,836,1733,1734,1735,1735,1734,1736,1734,1720,1736,1720,1734,1718,1718,1726,1712,1726,1718,1734,1728,1726,1733,1733,1726,1734,1737,1738,1739,1737,1739,1740,1740,1739,1729,1740,1729,1731,1723,1729,1739,1729,1723,1715,1724,1739,1738,1739,1724,1723,1741,1727,1728,1727,1741,1742,1742,828,1727,828,1742,849,849,1743,847,1743,849,1742,1742,1744,1743,1744,1742,1741,1745,1732,1746,1732,1745,1731,1747,1746,1748,1746,1747,1745,1748,857,859,857,1748,1746,1746,838,857,838,1746,1732,1743,1749,1750,1749,1743,1744,847,1750,866,1750,847,1743,866,1751,869,1751,866,1750,1750,1752,1751,1752,1750,1749,1753,1748,1754,1748,1753,1747,1755,1754,1756,1754,1755,1753,1756,876,878,876,1756,1754,1754,859,876,859,1754,1748,1751,1757,1758,1757,1751,1752,869,1758,886,1758,869,1751,886,1759,889,1759,886,1758,1758,1760,1759,1760,1758,1757,1756,1761,1755,1761,1756,1762,1762,1763,1761,1763,1762,1764,896,1764,1762,1764,896,898,878,1762,1756,1762,878,896,1765,1759,1760,1759,1765,1766,1766,889,1759,889,1766,906,1767,906,1766,906,1767,909,1768,1766,1765,1766,1768,1767,1764,1769,1763,1769,1764,1770,1770,1771,1769,1771,1770,1772,916,1772,1770,1772,916,918,898,1770,1764,1770,898,916,1773,1767,1768,1767,1773,1774,1774,909,1767,909,1774,926,1775,926,1774,926,1775,929,1776,1774,1773,1774,1776,1775,1777,1772,1778,1772,1777,1771,1779,1778,1780,1778,1779,1777,1780,936,938,936,1780,1778,1778,918,936,918,1778,1772,1781,1775,1776,1775,1781,1782,1782,929,1775,929,1782,946,1783,949,1782,1782,949,946,1784,1783,1781,1781,1783,1782,1785,1780,1786,1780,1785,1779,1787,1785,1788,1785,1786,1788,1788,1786,958,1786,956,958,1786,938,956,938,1786,1780,1789,1783,1784,1783,1789,1790,966,1783,1790,1783,966,949,1791,966,1790,966,1791,969,1792,1790,1789,1790,1792,1791,1793,1788,1794,1788,1793,1787,1795,1794,1796,1794,1795,1793,1796,976,978,976,1796,1794,1794,1788,976,1788,958,976,1797,987,1798,987,1797,988,1799,1798,1800,1798,1799,1797,1800,1791,1792,1791,1800,1798,1798,969,1791,969,1798,987,1801,997,999,997,1801,1802,1802,978,997,978,1802,1796,1803,1796,1802,1796,1803,1795,1804,1802,1801,1802,1804,1803,1805,1797,1799,1797,1805,1806,1806,988,1797,988,1806,1160,1807,1160,1806,1160,1807,1163,1808,1806,1805,1806,1808,1807,1809,1801,1810,1801,1809,1804,1808,1810,1807,1810,1808,1809,1807,1164,1163,1164,1807,1810,1810,999,1164,999,1810,1801,1811,1666,1812,1666,1811,1665,1813,1812,1814,1812,1813,1811,1814,592,594,592,1814,1812,1812,593,592,593,1812,1666,1675,1815,1816,1815,1675,1676,605,1816,604,1816,605,1675,604,1817,603,1817,604,1816,1816,1818,1817,1818,1816,1815,1819,1814,1820,1814,1819,1813,1821,1820,1822,1820,1821,1819,1822,756,731,756,1822,1820,1820,594,756,594,1820,1814,1817,1823,1824,1823,1817,1818,603,1824,758,1824,603,1817,758,1825,740,1825,758,1824,1824,1826,1825,1826,1824,1823,1827,731,728,731,1827,1822,1828,1822,1827,1822,1828,1821,1829,1827,1830,1827,1829,1828,724,1827,728,1827,724,1830,738,1825,1831,1825,738,740,737,1831,1832,1831,737,738,1832,1831,1833,1831,1834,1833,1831,1825,1834,1825,1826,1834,725,1830,724,1830,725,1835,1836,1830,1835,1830,1836,1829,1837,1836,1835,1836,1837,1838,727,1835,725,1835,727,1837,735,1832,1839,1832,735,737,736,1839,1840,1839,736,735,1840,1841,1842,1841,1840,1839,1839,1832,1841,1832,1833,1841,743,1837,727,1837,743,1843,1843,1838,1837,1838,1843,1844,1845,1844,1843,1844,1845,1846,745,1843,743,1843,745,1845,746,1840,1847,1840,746,736,745,1847,1845,1847,745,746,1848,1845,1847,1845,1848,1846,1847,1842,1848,1842,1847,1840,1849,1850,1851,1850,1849,1852,1844,1846,1849,1844,1849,1851,1844,1853,1838,1853,1844,1851,1851,1854,1853,1854,1851,1850,1849,1855,1852,1855,1849,1856,1856,1857,1855,1857,1856,1858,1848,1858,1856,1858,1848,1842,1846,1856,1849,1856,1846,1848,1859,1677,1661,1677,1859,1860,1860,1680,1677,1680,1860,1861,1862,1861,1860,1861,1862,1863,1862,1859,1864,1859,1862,1860,1865,1866,1867,1866,1865,1868,1863,1867,1861,1867,1863,1865,1861,1687,1680,1687,1861,1867,1867,1688,1687,1688,1867,1866,1869,1681,1870,1681,1869,1672,1871,1872,1869,1871,1869,1870,1871,1873,1874,1873,1871,1870,1870,1683,1873,1683,1870,1681,1875,1876,1877,1876,1875,1878,1878,1692,1876,1692,1878,1690,1873,1690,1878,1690,1873,1683,1874,1878,1875,1878,1874,1873,1879,1880,1881,1880,1879,1882,1881,1883,1879,1883,1881,1884,1884,1663,1665,1663,1884,1881,1881,1662,1663,1662,1881,1880,1880,1882,1885,1882,1886,1885,1662,1880,1660,1880,1885,1660,1660,1859,1661,1859,1660,1885,1885,1864,1859,1864,1885,1886,1887,1888,1889,1888,1887,1890,1669,1889,1673,1889,1669,1887,1673,1891,1676,1891,1673,1889,1889,1892,1891,1892,1889,1888,1893,1890,1887,1890,1893,1894,1893,1872,1894,1872,1893,1869,1670,1869,1893,1869,1670,1672,1670,1887,1669,1887,1670,1893,1895,1896,1897,1896,1895,1898,1852,1897,1850,1897,1852,1895,1850,1899,1854,1899,1850,1897,1897,1900,1899,1900,1897,1896,1895,1901,1898,1901,1895,1902,1902,1903,1901,1903,1902,1904,1855,1904,1902,1904,1855,1857,1852,1902,1895,1902,1852,1855,1853,1905,1906,1905,1853,1854,1838,1906,1836,1906,1838,1853,1836,1907,1829,1907,1836,1906,1906,1908,1907,1908,1906,1905,1899,1909,1910,1909,1899,1900,1854,1910,1905,1910,1854,1899,1905,1911,1908,1911,1905,1910,1910,1912,1911,1912,1910,1909,1858,1913,1857,1913,1858,1914,1914,1915,1913,1915,1914,1916,1841,1916,1914,1916,1841,1833,1842,1914,1858,1914,1842,1841,1904,1917,1903,1917,1904,1918,1918,1919,1917,1919,1918,1920,1913,1920,1918,1920,1913,1915,1857,1918,1904,1918,1857,1913,1921,1922,1923,1922,1921,1924,1908,1923,1907,1923,1908,1921,1907,1828,1829,1828,1907,1923,1923,1821,1828,1821,1923,1922,1922,1819,1821,1819,1922,1925,1925,1813,1819,1813,1925,1926,1927,1926,1925,1926,1927,1928,1924,1925,1922,1925,1924,1927,1929,1930,1931,1930,1929,1932,1826,1931,1834,1931,1826,1929,1834,1916,1833,1916,1834,1931,1931,1915,1916,1915,1931,1930,1823,1929,1826,1929,1823,1933,1933,1932,1929,1932,1933,1934,1935,1934,1933,1934,1935,1936,1818,1933,1823,1933,1818,1935,1937,1938,1863,1937,1863,1862,1939,1940,1938,1939,1938,1937,1941,1939,1937,1941,1937,1942,1942,1937,1862,1942,1862,1864,1943,1944,1945,1944,1943,1946,1940,1945,1938,1945,1940,1943,1938,1865,1863,1865,1938,1945,1945,1868,1865,1868,1945,1944,1947,1874,1948,1874,1947,1871,1949,1871,1947,1871,1949,1872,1950,1947,1951,1947,1950,1949,1951,1948,1952,1948,1951,1947,1953,1954,1955,1954,1953,1956,1956,1877,1954,1877,1956,1875,1948,1875,1956,1875,1948,1874,1952,1956,1953,1956,1952,1948,1957,1883,1884,1883,1957,1958,1957,1928,1958,1928,1957,1926,1926,1811,1813,1811,1926,1957,1957,1665,1811,1665,1957,1884,1959,1891,1892,1959,1892,1960,1676,1959,1815,1959,1676,1891,1815,1935,1818,1935,1815,1959,1959,1936,1935,1936,1959,1960,1961,1962,1963,1962,1961,1964,1898,1963,1896,1963,1898,1961,1896,1965,1900,1965,1896,1963,1963,1966,1965,1966,1963,1962,1961,1967,1964,1967,1961,1968,1968,1969,1967,1969,1968,1970,1901,1970,1968,1970,1901,1903,1898,1968,1961,1968,1898,1901,1965,1971,1972,1971,1965,1966,1900,1972,1909,1972,1900,1965,1909,1973,1912,1973,1909,1972,1972,1974,1973,1974,1972,1971,1975,1973,1976,1973,1975,1912,1977,1976,1978,1976,1977,1975,1978,1979,1980,1979,1978,1976,1976,1974,1979,1974,1976,1973,1970,1981,1969,1981,1970,1982,1982,1983,1981,1983,1982,1984,1917,1984,1982,1984,1917,1919,1903,1982,1970,1982,1903,1917,1985,1984,1919,1984,1985,1986,1986,1983,1984,1983,1986,1987,1988,1987,1986,1987,1988,1989,1990,1986,1985,1986,1990,1988,1991,1978,1992,1978,1991,1977,1993,1992,1994,1992,1993,1991,1994,1995,1996,1995,1994,1992,1992,1980,1995,1980,1992,1978,1997,1988,1990,1988,1997,1998,1998,1989,1988,1989,1998,1999,2000,1999,1998,1999,2000,2001,2002,1998,1997,1998,2002,2000,1958,2003,1883,2003,1958,2004,2004,2005,2003,2005,2004,2006,2007,1993,2004,2004,1993,2006,1928,2007,1958,1958,2007,2004,2005,2006,2008,2005,2008,2009,2008,2010,2009,2010,2008,2011,1994,2011,2008,2011,1994,1996,2006,1993,1994,2006,1994,2008,2012,1960,1892,1960,2012,2013,1936,1960,2014,1960,2013,2014,2014,2013,2002,2013,2015,2002,2016,2013,2012,2013,2016,2015,2017,2018,2016,2016,2018,2015,2018,2000,2015,2002,2015,2000,2019,2000,2018,2000,2019,2001,2020,2018,2017,2018,2020,2019,2021,1882,2022,1882,1879,2022,2022,2023,2021,2023,2022,2024,2003,2024,2022,2024,2003,2005,1879,1883,2003,1879,2003,2022,2024,2025,2023,2025,2024,2026,2026,2027,2025,2027,2026,2028,2010,2026,2009,2026,2010,2028,2005,2026,2024,2026,2005,2009,2029,1890,2030,1890,2029,1888,2029,2012,1888,1888,2012,1892,2012,2031,2016,2031,2012,2029,2029,2032,2031,2032,2029,2030,2031,2033,2034,2033,2031,2032,2016,2034,2017,2034,2016,2031,2017,2034,2020,2034,2035,2020,2034,2036,2035,2036,2034,2033,2037,2038,2039,2038,2037,2040,2037,2041,2042,2041,2037,2039,2039,2021,2023,2039,2023,2041,2021,2039,2038,2038,1882,2021,2041,2043,2042,2043,2041,2044,2044,2045,2043,2045,2044,2046,2025,2046,2044,2046,2025,2027,2023,2044,2041,2044,2023,2025,2047,2048,2049,2048,2047,2050,2030,2047,2049,2047,2030,1890,2051,2032,2049,2030,2049,2032,2048,2051,2049,2051,2048,2052,2053,2051,2052,2051,2053,2054,2054,2032,2051,2032,2054,2033,2055,2033,2054,2033,2055,2036,2056,2054,2053,2054,2056,2055,1886,1942,1864,1942,1886,2057,1941,2057,2058,2057,1941,1942,2038,2058,2057,2058,2038,2040,2038,1886,1882,1886,2038,2057,2059,2060,2061,2059,2061,2062,2060,2063,2064,2063,2060,2059,2064,2065,2066,2065,2064,2063,2067,2066,2065,2066,2067,2068,2069,2070,2071,2070,2069,2072,2073,2071,2074,2071,2073,2069,2075,2074,2076,2074,2075,2073,2077,2076,2078,2076,2077,2075,1894,1949,2079,1949,1894,1872,2047,1890,1894,1894,2079,2047,2047,2080,2050,2080,2047,2079,1950,2079,1949,2079,1950,2080,2081,2082,2083,2082,2081,2084,2084,2085,2082,2085,2084,2086,2087,2088,2089,2088,2087,2090,2089,2091,2092,2091,2089,2088,2093,2068,2067,2068,2093,2094,2081,2094,2093,2094,2081,2083,2095,2078,2096,2078,2095,2077,2087,2096,2090,2096,2087,2095,1962,2097,1966,2097,1962,2098,2098,2099,2097,2099,2098,2100,2101,2100,2098,2100,2101,2102,1964,2098,1962,2098,1964,2101,1967,2103,2104,2103,1967,1969,2104,1964,1967,1964,2104,2101,2105,2101,2104,2101,2105,2102,2104,2106,2105,2106,2104,2103,1971,2107,1974,2107,1971,2108,2108,2109,2107,2109,2108,2110,2097,2110,2108,2110,2097,2099,1966,2108,1971,2108,1966,2097,1981,2111,2112,2111,1981,1983,1969,2112,2103,2112,1969,1981,2103,2113,2106,2113,2103,2112,2112,2114,2113,2114,2112,2111,2100,2115,2099,2115,2100,2116,2116,2117,2115,2117,2116,2118,2119,2118,2116,2118,2119,2120,2102,2116,2100,2116,2102,2119,2105,2121,2122,2121,2105,2106,2122,2102,2105,2102,2122,2119,2119,2123,2120,2123,2119,2122,2122,2124,2123,2124,2122,2121,2110,2125,2109,2125,2110,2126,2126,2127,2125,2125,2127,2128,2115,2127,2126,2127,2115,2117,2099,2126,2110,2126,2099,2115,2113,2129,2130,2129,2113,2114,2106,2130,2121,2130,2106,2113,2121,2131,2124,2131,2121,2130,2130,2129,2131,2129,2132,2131,2107,2133,1974,1979,1974,2133,1980,2133,2134,2133,1980,1979,2134,2133,2135,2133,2136,2135,2133,2107,2136,2107,2109,2136,2136,2109,2137,2109,2125,2137,2135,2136,2138,2136,2137,2138,2138,2139,2140,2139,2138,2137,2137,2128,2139,2128,2137,2125,1983,1987,2141,1983,2141,2111,2141,2142,2111,2111,2142,2114,2143,2141,2144,2141,2143,2142,1989,2141,1987,2141,1989,2144,2145,2114,2142,2114,2145,2129,2145,2132,2129,2132,2145,2146,2147,2146,2145,2146,2147,2148,2147,2142,2143,2142,2147,2145,1995,2134,2149,2134,1995,1980,1996,1995,2150,1995,2149,2150,2150,2149,2151,2149,2152,2151,2149,2134,2152,2134,2135,2152,2152,2135,2153,2135,2138,2153,2151,2152,2154,2154,2152,2153,2154,2155,2156,2155,2154,2153,2153,2140,2155,2140,2153,2138,1999,2144,1989,2144,1999,2157,2158,2144,2157,2144,2158,2143,2159,2157,2160,2157,2159,2158,2160,1999,2001,1999,2160,2157,2161,2143,2158,2143,2161,2147,2161,2148,2147,2148,2161,2162,2163,2162,2161,2162,2163,2164,2163,2158,2159,2158,2163,2161,2165,2166,2167,2168,2167,2166,2166,2150,2168,2168,2150,2151,1996,2166,2011,2166,1996,2150,2010,2011,2165,2165,2011,2166,2168,2151,2169,2169,2151,2154,2167,2169,2170,2169,2167,2168,2170,2171,2172,2171,2170,2169,2169,2156,2171,2156,2169,2154,2173,2174,2175,2175,2176,2173,2019,2020,2174,2174,2173,2019,2001,2019,2173,2173,2160,2001,2160,2173,2176,2176,2159,2160,2177,2159,2176,2159,2177,2163,2177,2164,2163,2164,2177,2178,2178,2179,2180,2179,2178,2177,2177,2175,2179,2175,2177,2176,2028,2010,2181,2010,2165,2181,2181,2027,2028,2027,2181,2182,2183,2181,2184,2181,2183,2182,2165,2184,2181,2184,2165,2167,2184,2170,2185,2170,2184,2167,2183,2185,2186,2185,2183,2184,2186,2187,2188,2187,2186,2185,2185,2172,2187,2172,2185,2170,2189,2020,2035,2020,2189,2174,2174,2190,2175,2190,2174,2189,2191,2190,2189,2191,2189,2192,2036,2189,2035,2189,2036,2192,2179,2190,2193,2190,2179,2175,2180,2193,2194,2193,2180,2179,2194,2195,2196,2195,2194,2193,2193,2191,2195,2191,2193,2190,2197,2046,2198,2046,2197,2045,2199,2198,2200,2198,2199,2197,2200,2182,2183,2182,2200,2198,2027,2198,2046,2198,2027,2182,2201,2202,2203,2201,2203,2204,2205,2206,2207,2206,2205,2208,2200,2186,2202,2186,2200,2183,2199,2202,2201,2202,2199,2200,2209,2055,2056,2055,2209,2210,2036,2210,2192,2210,2036,2055,2192,2211,2191,2211,2192,2210,2210,2212,2211,2212,2210,2209,2213,2214,2215,2214,2213,2216,2216,2212,2214,2212,2216,2211,2195,2211,2216,2211,2195,2191,2217,2218,2219,2218,2217,2220,2221,2222,2223,2222,2221,2224,2197,2201,2225,2201,2197,2199,2226,2227,2228,2228,2229,2226,2062,2224,2221,2224,2062,2061,2230,2231,2232,2233,2232,2231,2230,2072,2231,2072,2230,2070,2234,2235,2236,2236,2237,2234,2237,2236,2223,2223,2222,2237,2238,2239,2240,2239,2238,2241,2242,2241,2238,2241,2242,2243,2244,2245,2246,2245,2244,2247,2248,2247,2249,2247,2248,2245,2250,2249,2251,2249,2250,2248,2252,2251,2253,2251,2252,2250,2253,2254,2255,2254,2253,2251,2251,2256,2254,2256,2251,2249,2257,2258,2259,2259,2258,2260,2261,2262,2263,2262,2261,2264,2265,2264,2261,2264,2265,2266,2259,2260,2267,2267,2260,2268,2263,2269,2270,2269,2263,2262,2271,2270,2272,2270,2271,2263,2272,2273,2274,2273,2272,2270,2270,2275,2273,2275,2270,2269,2276,2277,2278,2277,2276,2279,2280,2279,2276,2279,2280,2281,2253,2282,2252,2282,2253,2283,2283,2284,2282,2284,2283,2285,2286,2287,2288,2288,2287,2289,2290,2291,2292,2291,2290,2293,2273,2293,2290,2293,2273,2275,2288,2289,2294,2294,2289,2295,2285,2296,2284,2296,2285,2297,2297,2298,2296,2298,2297,2299,2299,2300,2301,2300,2299,2297,2297,2302,2300,2302,2297,2285,2292,2303,2304,2303,2292,2291,2305,2304,2306,2304,2305,2292,2306,2307,2308,2307,2306,2304,2304,2309,2307,2309,2304,2303,2310,2311,2312,2311,2310,2313,2314,2315,2311,2311,2313,2314,2301,2314,2313,2313,2299,2301,2299,2310,2298,2310,2299,2313,2316,2317,2318,2318,2317,2319,2309,2316,2307,2307,2316,2318,2320,2308,2318,2307,2318,2308,2321,2320,2319,2318,2319,2320,2322,2323,2324,2323,2322,2325,2326,2325,2327,2325,2326,2323,2328,2325,2329,2325,2328,2327,2330,2329,2322,2322,2329,2325,2331,2332,2333,2332,2334,2333,2335,2336,2331,2331,2333,2335,2335,2327,2328,2327,2335,2333,2327,2333,2334,2334,2326,2327,2337,2338,2339,2338,2337,2340,2341,2339,2342,2339,2341,2337,2342,2323,2326,2323,2342,2339,2339,2324,2323,2324,2339,2338,2343,2342,2344,2342,2343,2341,2345,2344,2346,2344,2345,2343,2346,2334,2332,2334,2346,2344,2344,2326,2334,2326,2344,2342,2347,2348,2349,2348,2347,2350,2351,2352,2347,2347,2349,2351,2353,2351,2349,2349,2354,2353,2349,2355,2354,2355,2349,2348,2356,2357,2358,2358,2357,2359,2354,2359,2357,2359,2354,2355,2354,2360,2353,2360,2354,2357,2361,2360,2356,2356,2360,2357,2362,2363,2364,2363,2362,2365,2350,2365,2348,2365,2350,2363,2348,2366,2355,2366,2348,2365,2365,2367,2366,2367,2365,2362,2366,2368,2369,2368,2366,2367,2355,2369,2359,2369,2355,2366,2359,2370,2358,2370,2359,2369,2369,2371,2370,2371,2369,2368,2372,2337,2341,2337,2372,2373,2373,2340,2337,2340,2373,2374,2375,2374,2373,2374,2375,2376,2377,2373,2372,2373,2377,2375,2378,2343,2345,2343,2378,2379,2379,2341,2343,2341,2379,2372,2380,2372,2379,2372,2380,2377,2381,2379,2378,2379,2381,2380,2382,2362,2383,2362,2382,2367,2384,2383,2385,2383,2384,2382,2385,2386,2387,2386,2385,2383,2383,2364,2386,2364,2383,2362,2368,2388,2371,2388,2368,2389,2389,2390,2388,2390,2389,2391,2391,2382,2384,2382,2391,2389,2367,2389,2368,2389,2367,2382,2392,2393,2394,2393,2392,2395,2396,2394,2397,2394,2396,2392,2397,2398,2399,2398,2397,2394,2394,2400,2398,2400,2394,2393,2393,2401,2400,2401,2393,2402,2402,2403,2401,2403,2402,2404,2405,2404,2402,2404,2405,2406,2395,2402,2393,2402,2395,2405,2407,2408,2409,2408,2407,2410,2410,2400,2408,2400,2410,2398,2411,2398,2410,2398,2411,2399,2412,2410,2407,2410,2412,2411,2408,2401,2413,2401,2408,2400,2409,2413,2414,2413,2409,2408,2414,2413,2415,2413,2416,2415,2413,2403,2416,2403,2413,2401,2417,2418,2419,2418,2417,2420,2420,2421,2418,2421,2420,2422,2423,2422,2420,2422,2423,2424,2425,2420,2417,2420,2425,2423,2418,2426,2427,2426,2418,2421,2419,2427,2428,2427,2419,2418,2428,2392,2396,2392,2428,2427,2427,2395,2392,2395,2427,2426,2250,2429,2248,2248,2429,2430,2429,2419,2430,2419,2429,2417,2431,2425,2429,2429,2425,2417,2431,2250,2252,2250,2431,2429,2430,2428,2432,2428,2430,2419,2245,2248,2430,2245,2430,2432,2246,2245,2432,2246,2432,2433,2432,2396,2433,2396,2432,2428,2434,2435,2436,2435,2434,2437,2438,2436,2439,2436,2438,2434,2440,2439,2436,2439,2440,2441,2436,2442,2440,2442,2436,2435,2435,2443,2442,2443,2435,2444,2444,2409,2443,2409,2444,2407,2445,2407,2444,2407,2445,2412,2437,2444,2435,2444,2437,2445,2269,2262,2446,2262,2447,2446,2275,2269,2448,2269,2446,2448,2448,2446,2438,2446,2434,2438,2446,2437,2434,2437,2446,2447,2447,2445,2437,2445,2447,2449,2449,2412,2445,2412,2449,2450,2266,2449,2264,2449,2266,2450,2264,2447,2262,2447,2264,2449,2451,2452,2453,2452,2451,2454,2455,2453,2456,2453,2455,2451,2456,2423,2425,2423,2456,2453,2453,2424,2423,2424,2453,2452,2431,2456,2425,2456,2431,2457,2457,2455,2456,2455,2457,2458,2282,2458,2457,2458,2282,2284,2252,2457,2431,2457,2252,2282,2459,2460,2461,2460,2459,2462,2441,2461,2439,2461,2441,2459,2439,2463,2438,2463,2439,2461,2461,2464,2463,2464,2461,2460,2448,2463,2465,2463,2448,2438,2275,2465,2293,2465,2275,2448,2293,2466,2291,2466,2293,2465,2465,2464,2466,2464,2465,2463,2377,2467,2375,2467,2377,2468,2375,2469,2376,2469,2375,2467,2469,2451,2455,2451,2469,2467,2467,2454,2451,2454,2467,2468,2376,2470,2471,2470,2376,2469,2296,2298,2471,2296,2471,2470,2284,2296,2470,2284,2470,2458,2458,2470,2469,2458,2469,2455,2472,2385,2473,2385,2472,2384,2462,2473,2460,2473,2462,2472,2460,2474,2464,2474,2460,2473,2385,2474,2473,2474,2385,2387,2475,2387,2476,2387,2475,2474,2466,2474,2475,2474,2466,2464,2291,2475,2303,2475,2291,2466,2303,2476,2309,2476,2303,2475,2477,2471,2298,2298,2310,2477,2374,2376,2471,2471,2477,2374,2374,2478,2340,2478,2374,2477,2478,2477,2310,2310,2312,2478,2476,2479,2309,2309,2479,2316,2479,2480,2316,2316,2480,2317,2386,2480,2479,2480,2386,2364,2386,2476,2387,2476,2386,2479,2481,2330,2482,2330,2322,2482,2312,2481,2478,2481,2482,2478,2340,2482,2338,2340,2478,2482,2482,2322,2338,2338,2322,2324,2483,2352,2484,2352,2483,2347,2363,2347,2483,2347,2363,2350,2364,2483,2480,2364,2363,2483,2480,2484,2317,2484,2480,2483,2433,2397,2485,2397,2433,2396,2486,2246,2433,2486,2433,2485,2487,2486,2485,2487,2485,2488,2485,2399,2488,2399,2485,2397,2450,2411,2412,2411,2450,2489,2489,2399,2411,2399,2489,2488,2487,2489,2490,2489,2487,2488,2490,2450,2266,2450,2490,2489,2491,2243,2242,2243,2491,2492,2493,2492,2491,2492,2493,2494,2495,2486,2487,2486,2495,2496,2496,2246,2486,2246,2496,2244,2267,2497,2498,2497,2267,2268,2499,2266,2265,2266,2499,2490,2495,2490,2499,2490,2495,2487,2498,2497,2493,2493,2497,2494,2500,2501,2502,2501,2500,2503,2503,2504,2501,2504,2503,2505,2440,2505,2503,2505,2440,2442,2441,2503,2500,2503,2441,2440,2506,2507,2508,2507,2506,2509,2509,2510,2507,2510,2509,2511,2501,2511,2509,2511,2501,2504,2502,2509,2506,2509,2502,2501,2443,2414,2512,2414,2443,2409,2442,2512,2505,2512,2442,2443,2505,2513,2504,2513,2505,2512,2512,2414,2513,2414,2415,2513,2511,2514,2510,2514,2511,2515,2516,2514,2515,2514,2516,2517,2415,2515,2513,2515,2415,2516,2513,2511,2504,2511,2513,2515,2518,2519,2520,2519,2518,2521,2424,2520,2422,2520,2424,2518,2422,2522,2421,2522,2422,2520,2520,2523,2522,2523,2520,2519,2524,2525,2526,2525,2524,2527,2521,2526,2519,2526,2521,2524,2519,2528,2523,2528,2519,2526,2526,2529,2528,2529,2526,2525,2426,2405,2395,2405,2426,2530,2530,2406,2405,2406,2530,2531,2522,2531,2530,2531,2522,2523,2421,2530,2426,2530,2421,2522,2528,2532,2533,2532,2528,2529,2531,2523,2528,2531,2528,2533,2406,2531,2533,2406,2533,2534,2534,2533,2532,2534,2532,2535,2536,2537,2538,2537,2536,2539,2403,2538,2416,2538,2403,2536,2416,2516,2415,2516,2416,2538,2538,2517,2516,2517,2538,2537,2536,2540,2539,2540,2536,2541,2541,2535,2540,2535,2541,2534,2404,2534,2541,2534,2404,2406,2403,2541,2536,2541,2403,2404,2500,2459,2441,2459,2500,2542,2542,2462,2459,2462,2542,2543,2544,2543,2542,2543,2544,2545,2502,2542,2500,2542,2502,2544,2452,2518,2424,2518,2452,2546,2546,2521,2518,2521,2546,2547,2548,2547,2546,2547,2548,2549,2454,2546,2452,2546,2454,2548,2391,2550,2390,2550,2391,2551,2543,2550,2551,2550,2543,2545,2462,2551,2472,2551,2462,2543,2551,2384,2472,2384,2551,2391,2552,2380,2381,2380,2552,2553,2553,2377,2380,2377,2553,2468,2454,2468,2553,2454,2553,2548,2548,2553,2552,2548,2552,2549,2554,2555,2556,2555,2554,2557,2529,2556,2532,2556,2529,2554,2532,2558,2535,2558,2532,2556,2556,2559,2558,2559,2556,2555,2560,2561,2562,2561,2560,2563,2527,2562,2525,2562,2527,2560,2525,2554,2529,2554,2525,2562,2562,2557,2554,2557,2562,2561,2564,2565,2566,2565,2564,2567,2567,2568,2565,2568,2567,2569,2514,2569,2567,2569,2514,2517,2510,2567,2564,2567,2510,2514,2570,2571,2572,2571,2570,2573,2573,2566,2571,2566,2573,2564,2507,2564,2573,2564,2507,2510,2508,2573,2570,2573,2508,2507,2555,2574,2559,2574,2555,2575,2575,2576,2574,2576,2575,2577,2578,2577,2575,2577,2578,2579,2557,2575,2555,2575,2557,2578,2561,2578,2557,2578,2561,2580,2580,2579,2578,2579,2580,2581,2582,2581,2580,2581,2582,2583,2563,2580,2561,2580,2563,2582,2565,2584,2585,2584,2565,2568,2566,2585,2586,2585,2566,2565,2586,2587,2588,2587,2586,2585,2585,2589,2587,2589,2585,2584,2571,2586,2590,2586,2571,2566,2572,2590,2591,2590,2572,2571,2591,2592,2593,2592,2591,2590,2590,2588,2592,2588,2590,2586,2594,2595,2596,2595,2594,2597,2597,2598,2595,2598,2597,2599,2574,2599,2597,2599,2574,2576,2559,2597,2594,2597,2559,2574,2600,2601,2602,2601,2600,2603,2576,2602,2599,2602,2576,2600,2599,2604,2598,2604,2599,2602,2602,2601,2604,2604,2601,2605,2606,2595,2607,2595,2606,2596,2568,2607,2584,2607,2568,2606,2584,2608,2589,2608,2584,2607,2607,2598,2608,2598,2607,2595,2609,2610,2611,2610,2609,2612,2604,2610,2612,2610,2604,2605,2608,2604,2612,2604,2608,2598,2589,2612,2609,2612,2589,2608,2558,2594,2613,2594,2558,2559,2535,2613,2540,2613,2535,2558,2540,2614,2539,2614,2540,2613,2613,2596,2614,2596,2613,2594,2615,2616,2617,2616,2615,2618,2618,2619,2616,2619,2618,2620,2621,2617,2622,2617,2621,2615,2621,2623,2624,2623,2621,2622,2625,2626,2627,2626,2625,2628,2625,2629,2628,2629,2625,2630,2631,165,2632,2632,2633,2631,2633,2634,2631,2634,2633,2635,2636,2637,2638,2638,2637,2639,2637,2640,2639,2639,2640,2641,2636,2642,2643,2642,2636,2638,2644,2642,2645,2642,2644,2643,2646,2647,2648,2648,2647,2649,2648,2650,2651,2650,2648,2649,2652,2653,177,2653,2652,2654,2655,2654,2652,2654,2655,2656,2657,2658,2659,2658,2657,2660,2661,2659,2658,2659,2661,2662,2663,2664,2665,2664,2666,2665,2667,2666,2664,2666,2667,2668,2669,2670,2671,2671,2670,2672,2670,2669,2235,2235,2234,2670,2673,2674,2675,2674,2673,2676,2676,2233,2674,2233,2676,2232,2677,2678,2679,2678,2677,2680,2678,2680,2681,2682,2681,2680,2683,2684,2685,2684,2683,2686,2685,2687,2683,2688,2687,2685,2689,2690,2691,2690,2689,2692,2690,2675,2691,2675,2690,2673,2693,2694,2695,2694,2693,2696,2693,2672,2696,2672,2693,2671,2697,2698,2699,2698,2697,2700,2701,2699,2702,2699,2701,2697,2702,2703,2704,2703,2702,2699,2699,2705,2703,2705,2699,2698,2706,2707,2708,2707,2706,2709,2710,2708,2711,2708,2710,2706,2711,2697,2701,2697,2711,2708,2708,2700,2697,2700,2708,2707,2712,2713,2714,2712,2714,2715,2709,2712,2707,2712,2709,2713,2707,2716,2700,2716,2707,2712,2712,2717,2716,2717,2712,2715,2718,2716,2717,2716,2718,2719,2700,2719,2698,2719,2700,2716,2720,2698,2719,2698,2720,2705,2721,2719,2718,2719,2721,2720,2722,2723,2724,2723,2722,2725,2724,2726,2722,2726,2724,2727,2728,2727,2724,2727,2728,2729,2724,2730,2728,2730,2724,2723,2731,2732,2733,2732,2731,2734,2725,2733,2723,2733,2725,2731,2723,2735,2730,2735,2723,2733,2733,2736,2735,2736,2733,2732,2737,2738,2739,2738,2737,2740,2737,2741,2740,2741,2737,2742,2742,2731,2725,2731,2742,2737,2737,2734,2731,2734,2737,2739,2742,2743,2741,2743,2742,2744,2744,2745,2743,2745,2744,2746,2722,2746,2744,2746,2722,2726,2744,2725,2722,2725,2744,2742,2747,2715,2714,2715,2747,2748,2748,2717,2715,2717,2748,2749,2750,2749,2748,2749,2750,2751,2752,2748,2747,2748,2752,2750,2753,2717,2749,2717,2753,2718,2753,2721,2718,2721,2753,2754,2753,2755,2754,2755,2753,2756,2749,2756,2753,2756,2749,2751,2740,2757,2738,2757,2740,2758,2758,2759,2757,2759,2758,2760,2760,2761,2762,2761,2760,2758,2741,2758,2740,2758,2741,2761,2763,2761,2741,2763,2741,2743,2761,2764,2762,2764,2761,2763,2763,2765,2764,2765,2763,2766,2763,2745,2766,2745,2763,2743,2767,2768,2769,2768,2767,2770,2770,2714,2768,2714,2770,2747,2771,2747,2770,2747,2771,2752,2772,2770,2767,2770,2772,2771,2773,2774,2775,2774,2773,2776,2776,2777,2774,2777,2776,2778,2757,2778,2776,2778,2757,2759,2738,2776,2773,2776,2738,2757,2779,2750,2752,2750,2779,2780,2780,2751,2750,2751,2780,2781,2782,2781,2780,2781,2782,2783,2784,2780,2779,2780,2784,2782,2785,2751,2781,2751,2785,2756,2785,2755,2756,2755,2785,2786,2785,2787,2786,2787,2785,2788,2788,2781,2783,2781,2788,2785,2760,2789,2759,2789,2760,2790,2791,2790,2792,2790,2791,2789,2792,2793,2794,2793,2792,2790,2790,2762,2793,2762,2790,2760,2795,2793,2762,2762,2764,2795,2796,2794,2793,2796,2793,2795,2797,2796,2795,2795,2798,2797,2795,2765,2798,2765,2795,2764,2799,2782,2784,2799,2784,2800,2801,2783,2782,2801,2782,2799,2801,2799,2563,2563,2799,2582,2582,2799,2800,2582,2800,2583,2802,2788,2783,2802,2783,2801,2787,2802,2803,2802,2787,2788,2803,2560,2527,2560,2803,2802,2802,2563,2560,2563,2802,2801,2804,2791,2792,2791,2804,2805,2591,2805,2804,2805,2591,2593,2572,2804,2806,2804,2572,2591,2806,2792,2794,2792,2806,2804,2807,2794,2796,2794,2807,2806,2807,2572,2806,2572,2807,2570,2808,2570,2807,2570,2808,2508,2807,2797,2808,2797,2807,2796,2809,2803,2810,2803,2809,2787,2547,2549,2809,2547,2809,2810,2547,2524,2521,2524,2547,2810,2810,2527,2524,2527,2810,2803,2811,2808,2797,2808,2811,2812,2812,2508,2808,2508,2812,2506,2544,2506,2812,2506,2544,2502,2544,2811,2545,2811,2544,2812,2786,2813,2755,2813,2786,2814,2814,2381,2813,2381,2814,2552,2549,2552,2814,2549,2814,2809,2809,2814,2786,2809,2786,2787,2798,2815,2816,2815,2798,2765,2811,2798,2816,2798,2811,2797,2545,2816,2550,2816,2545,2811,2390,2816,2815,2816,2390,2550,2817,2721,2754,2721,2817,2818,2817,2345,2818,2345,2817,2378,2813,2378,2817,2378,2813,2381,2755,2817,2754,2817,2755,2813,2819,2766,2745,2819,2745,2820,2765,2819,2815,2819,2765,2766,2388,2815,2819,2815,2388,2390,2371,2819,2820,2819,2371,2388,2818,2720,2721,2720,2818,2821,2821,2705,2720,2705,2821,2822,2822,2346,2332,2346,2822,2821,2346,2821,2818,2818,2345,2346,2746,2820,2745,2820,2746,2823,2370,2820,2823,2820,2370,2371,2824,2358,2823,2823,2358,2370,2726,2823,2746,2823,2726,2824,2703,2822,2825,2822,2703,2705,2704,2825,2826,2825,2704,2703,2336,2826,2825,2825,2331,2336,2825,2822,2331,2822,2332,2331,2727,2824,2726,2824,2727,2827,2827,2356,2824,2824,2356,2358,2361,2827,2828,2827,2361,2356,2729,2827,2727,2827,2729,2828,2829,2830,2831,2830,2829,2832,2833,2834,2832,2832,2829,2833,2835,2836,128,2836,2835,2837,2831,2837,2835,2837,2831,2830,2838,2839,2840,2839,2841,2840,2692,2840,2841,2840,2692,2689,2842,2843,2844,2843,2842,2845,2843,2640,2844,2640,2843,2846,2847,2848,2849,2848,2847,2850,2846,2850,2851,2850,2846,2848,2852,129,2853,2853,2854,2852,2854,2849,2852,2849,2854,2847,2855,2856,2857,2857,2856,2858,2619,2856,2855,2856,2619,2833,2687,2859,2860,2859,2687,2861,2862,2860,2859,2860,2862,143,2863,2769,2229,2769,2863,2767,2863,2864,2767,2767,2864,2772,2865,2866,2863,2863,2866,2864,2865,2229,2228,2229,2865,2863,2867,2868,2775,2775,2774,2867,2869,2870,2868,2868,2867,2869,2871,2869,2867,2867,2872,2871,2872,2867,2774,2774,2777,2872,2873,2667,2874,2667,2873,2875,2874,2876,2873,2876,2874,142,139,2877,2878,139,2878,142,136,2879,2877,136,2877,139,2880,2881,2882,2880,2882,2883,2635,2880,2884,2880,2635,2881,2885,2886,2887,2888,2887,2886,2885,158,2886,158,2885,2889,146,2890,2891,2890,146,143,149,2891,2892,2891,149,146,2893,2894,2895,2894,2893,2896,2893,2656,2897,2656,2893,2895,2898,2899,2900,2899,2898,2901,2901,2898,156,2901,156,2902,2903,163,160,163,2903,2904,2889,160,158,160,2889,2903,2905,2906,2907,2906,2905,2908,2908,2909,2906,2909,2908,2910,1954,2910,2908,2910,1954,1877,1955,2908,2905,2908,1955,1954,2911,2912,2913,2912,2911,2914,1946,2913,1944,2913,1946,2911,1944,2915,1868,2915,1944,2913,2913,2916,2915,2916,2913,2912,1876,1705,2917,1705,1876,1692,1877,2917,2910,2917,1877,1876,2910,2918,2909,2918,2910,2917,2917,1707,2918,1707,2917,1705,1866,1697,1688,1697,1866,2919,2919,1700,1697,1700,2919,2920,2915,2920,2919,2920,2915,2916,1868,2919,1866,2919,1868,2915,2921,2922,2923,2922,2921,2924,2924,1724,2922,1724,2924,1722,2918,1722,2924,1722,2918,1707,2909,2924,2921,2924,2909,2918,2925,2926,2927,2926,2925,2928,2928,2916,2926,2916,2928,2920,2920,1719,1700,1719,2920,2928,1720,2928,2925,2928,1720,1719,2906,2921,2929,2921,2906,2909,2907,2929,2930,2929,2907,2906,2930,2931,2932,2931,2930,2929,2929,2923,2931,2923,2929,2921,2933,152,151,2933,151,2934,2902,156,152,2902,152,2933,2935,163,2904,2935,2936,163,2688,2936,2935,2688,2937,2936,2926,2912,2938,2912,2926,2916,2927,2938,2939,2938,2927,2926,2939,2940,2941,2940,2939,2938,2938,2914,2940,2914,2938,2912,2942,151,2943,151,2942,2934,2668,2943,2944,2943,2668,2942,2684,2679,2945,2945,2685,2684,2685,2945,2937,2937,2688,2685,2946,2947,2879,2946,2879,136,2883,2882,2947,2883,2947,2946,2948,2662,2661,2662,2948,2949,2949,2948,2950,2950,2948,2951,2952,2892,2953,2892,2952,149,2896,2953,2894,2953,2896,2952,2682,2954,2681,2954,2682,2955,2956,2954,2955,2954,2956,2957,2958,2959,2960,2959,2958,2961,2962,2960,2963,2960,2962,2958,2963,2964,2965,2964,2963,2960,2960,2966,2964,2966,2960,2959,2964,2967,2968,2967,2964,2966,2965,2968,2969,2968,2965,2964,2969,2970,2971,2970,2969,2968,2968,2972,2970,2972,2968,2967,2973,2974,2975,2974,2973,2976,2977,2975,2978,2975,2977,2973,2978,2979,2980,2979,2978,2975,2975,2981,2979,2981,2975,2974,2982,2978,2983,2978,2982,2977,2984,2983,2985,2983,2984,2982,2985,2986,2987,2986,2985,2983,2983,2980,2986,2980,2983,2978,2988,2961,2958,2961,2988,2989,2988,2990,2989,2990,2988,2991,2992,2988,2993,2988,2992,2991,2993,2958,2962,2958,2993,2988,2994,2965,2995,2965,2994,2963,2996,2963,2994,2963,2996,2962,2997,2994,2998,2994,2997,2996,2998,2995,2999,2995,2998,2994,3000,2962,2996,2962,3000,2993,3001,2993,3000,2993,3001,2992,3002,3000,3003,3000,3002,3001,3003,2996,2997,2996,3003,3000,2974,2976,3004,2976,3005,3004,2981,2974,3006,2974,3004,3006,3006,3004,3007,3004,3008,3007,3004,3009,3008,3009,3004,3005,3010,3011,2980,2980,2979,3010,3012,3013,3011,3011,3010,3012,3014,3012,3010,3010,3015,3014,3015,3010,2979,2979,2981,3015,3015,2981,3016,2981,3006,3016,3017,3014,3015,3015,3016,3017,3017,3016,3018,3016,3019,3018,3016,3006,3019,3006,3007,3019,3020,2992,3001,2992,3020,2227,3021,2227,3020,2227,3021,2228,3022,3023,3020,3020,3023,3021,3022,3001,3002,3001,3022,3020,3024,3025,3026,3026,3027,3024,3021,3023,3025,3025,3024,3021,2228,3021,3024,3024,2865,2228,2865,3024,3027,3027,2866,2865,3019,3007,3028,3007,3029,3028,3018,3019,3030,3019,3028,3030,3030,3028,3031,3028,3032,3031,3028,3029,3032,3029,2870,3032,3033,3034,3035,3034,3033,3036,2869,3036,3033,3036,2869,2871,2870,3033,3032,3033,2870,2869,3032,3035,3031,3035,3032,3033,3037,2999,3038,2999,2995,3038,3039,3037,3040,3037,3038,3040,3040,3038,2971,3038,2969,2971,3038,2995,2969,2995,2965,2969,3041,3013,3042,3013,3041,3011,2986,3011,3041,3011,2986,2980,2987,3041,3043,3041,2987,2986,3043,3042,3044,3042,3043,3041,3045,3046,3047,3046,3045,3048,3049,3047,3050,3047,3049,3045,3050,2864,2866,2864,3050,3047,3047,2772,2864,2772,3047,3046,3051,3050,3052,3050,3051,3049,3053,3052,3054,3052,3053,3051,3054,3027,3026,3027,3054,3052,3052,2866,3027,2866,3052,3050,3055,3056,3057,3056,3055,3058,2777,3057,2872,3057,2777,3055,2872,3059,2871,3059,2872,3057,3057,3060,3059,3060,3057,3056,3059,3061,3062,3061,3059,3060,2871,3062,3036,3062,2871,3059,3036,3063,3034,3063,3036,3062,3062,3064,3063,3064,3062,3061,3065,2779,3066,2779,3065,2784,3048,3066,3046,3066,3048,3065,3046,2771,2772,2771,3046,3066,3066,2752,2771,2752,3066,2779,2789,3067,3068,3067,2789,2791,2759,3068,2778,3068,2759,2789,2778,3055,2777,3055,2778,3068,3068,3058,3055,3058,3068,3067,3069,3070,3071,3070,3069,3072,3073,3071,3074,3071,3073,3069,3074,3045,3049,3045,3074,3071,3071,3048,3045,3048,3071,3070,3070,3065,3048,3065,3070,3075,3075,2784,3065,2784,3075,2800,2800,3076,2583,3076,2800,3075,3072,3075,3070,3075,3072,3076,3077,3078,3079,3078,3077,3080,3058,3079,3056,3079,3058,3077,3056,3081,3060,3081,3056,3079,3079,3082,3081,3082,3079,3078,3067,3077,3058,3077,3067,3083,3083,3080,3077,3080,3083,3084,2805,3084,3083,3084,2805,2593,2791,3083,3067,3083,2791,2805,3085,3069,3073,3069,3085,3086,3086,3072,3069,3072,3086,3087,3087,3088,3089,3088,3087,3086,3090,3086,3085,3086,3090,3088,3076,3087,3091,3087,3076,3072,2583,3091,2581,3091,2583,3076,2581,3092,2579,3092,2581,3091,3091,3089,3092,3089,3091,3087,3078,3093,3082,3093,3078,3094,3094,3095,3093,3095,3094,3096,3097,3096,3094,3096,3097,3098,3080,3094,3078,3094,3080,3097,3084,3097,3080,3097,3084,3099,3099,3098,3097,3098,3099,3100,2592,3100,3099,3100,2592,2588,2593,3099,3084,3099,2593,2592,3089,3088,3101,3089,3101,3102,3102,3101,3103,3102,3103,2603,3104,3105,3101,3101,3105,3103,3090,3104,3088,3088,3104,3101,3106,3107,3098,3096,3098,3107,3095,3096,3108,3096,3107,3108,3108,3107,3109,3107,3110,3109,2611,3110,3106,3107,3106,3110,3051,3111,3112,3111,3051,3053,3112,3049,3051,3049,3112,3074,3074,3113,3073,3113,3074,3112,3112,3114,3113,3114,3112,3111,3061,3115,3064,3115,3061,3116,3116,3117,3115,3117,3116,3118,3081,3118,3116,3118,3081,3082,3060,3116,3061,3116,3060,3081,3073,3119,3085,3119,3073,3120,3121,3085,3119,3085,3121,3090,3119,3122,3121,3122,3119,3123,3123,3119,3120,3123,3120,3124,3120,3125,3124,3125,3120,3126,3126,3127,3125,3127,3126,3128,3113,3128,3126,3128,3113,3114,3073,3113,3120,3120,3113,3126,3082,3129,3130,3129,3082,3093,3123,3130,3129,3130,3123,3124,3129,3122,3123,3122,3129,3131,3131,3129,3093,3131,3093,3095,3130,3125,3132,3125,3130,3124,3118,3082,3130,3130,3132,3118,3118,3133,3117,3133,3118,3132,3132,3127,3133,3127,3132,3125,3134,3121,3122,3121,3134,3135,3135,3090,3121,3090,3135,3104,3136,3104,3135,3104,3136,3105,3137,3135,3134,3135,3137,3136,3134,3131,3138,3131,3134,3122,3137,3138,3139,3138,3137,3134,3139,3108,3109,3108,3139,3138,3138,3095,3108,3095,3138,3131,3140,3136,3137,3136,3140,3141,3141,3105,3136,3105,3141,3103,2603,3141,2601,3141,2603,3103,2605,3141,3140,3141,2605,2601,3142,2632,167,167,2632,165,167,169,3142,169,3143,3142,2951,3144,2950,3144,2951,3145,3145,3146,3144,3146,3145,3147,3148,2665,2666,2665,3148,2660,2666,2944,3148,2944,2666,2668,175,2653,3149,2653,175,177,3149,176,175,176,3149,3150,3151,2957,2956,2957,3151,3152,3153,3152,3151,3152,3153,3154,3155,3156,3157,3156,3155,3158,3153,3157,3154,3157,3153,3155,3159,3160,3161,3160,3162,3161,3146,3147,3159,3146,3159,3161,3163,3164,2677,3163,2677,2686,3164,3165,3166,3165,3164,3163,126,128,3167,128,2836,3167,3168,126,3167,126,3168,127,3169,3168,3170,3168,3169,127,3160,3169,3162,3169,3170,3162,3171,129,131,129,3171,2853,3172,131,134,131,3172,3171,3173,3172,134,3172,3173,3174,3173,3158,3174,3158,3173,3156,3175,2706,2710,2706,3175,3176,3176,2709,2706,2709,3176,3177,2989,3177,3176,3177,2989,2990,2961,3176,3175,3176,2961,2989,2732,3178,2736,3178,2732,3179,3179,2976,3178,2976,3179,3005,3180,3005,3179,3005,3180,3009,2734,3179,2732,3179,2734,3180,3181,3182,3183,3182,3181,72,3184,3181,3185,3181,3183,3185,2970,3185,3183,3185,2970,2972,2971,3183,3182,3183,2971,2970,3040,3182,3186,3182,3040,2971,3039,3186,3187,3186,3039,3040,3187,69,67,69,3187,3186,3182,69,3186,69,3182,72,3188,3189,73,3189,3188,3190,3190,2987,3189,2987,3190,2985,3191,2985,3190,2985,3191,2984,3192,3191,3188,3188,3191,3190,3189,3043,3193,3043,3189,2987,3189,76,73,76,3189,3193,76,3194,79,3194,76,3193,3193,3044,3194,3044,3193,3043,3195,3181,3196,3181,3195,72,3197,3196,3198,3196,3197,3195,3198,3199,3200,3199,3198,3196,3196,3184,3199,3184,3196,3181,3195,70,72,70,3195,3201,3201,71,70,71,3201,3202,3203,3202,3201,3202,3203,3204,3197,3201,3195,3201,3197,3203,3188,3205,3206,3205,3188,73,3192,3206,3207,3206,3192,3188,3207,3208,3209,3208,3207,3206,3206,3210,3208,3210,3206,3205,75,3205,73,3205,75,3211,3211,3210,3205,3210,3211,3212,3213,3212,3211,3212,3213,3214,78,3211,75,3211,78,3213,3203,3215,3216,3203,3216,3204,3197,3217,3215,3197,3215,3203,3200,3218,3219,3200,3219,3198,3198,3219,3217,3198,3217,3197,3220,3200,3199,3200,3220,3218,3199,3221,3220,3221,3199,3184,3184,3222,3221,3222,3184,3185,2972,3222,3185,3222,2972,3223,3212,3224,3225,3224,3212,3214,3210,3225,3226,3225,3210,3212,3209,3227,3228,3227,3209,3208,3208,3226,3227,3226,3208,3210,3229,3207,3209,3209,3228,3229,3207,3229,3230,3207,3230,3192,3192,3230,3231,3192,3231,3191,3231,2984,3191,2984,3231,3232,3233,2657,3234,2657,3233,2663,3233,3234,3235,3236,3235,3234,3237,3165,3238,3165,3237,3166,3239,3240,3238,3240,3237,3238,3235,3241,3242,3241,3235,3236,3242,3243,3244,3243,3242,3241,3245,3246,3247,3246,3245,3248,3245,2851,3248,2851,3245,3249,2931,3250,3251,3250,2931,2923,2932,3251,3252,3251,2932,2931,3251,3253,3252,3253,3251,3254,3250,3254,3251,3254,3250,3255,3256,2939,3257,2939,3256,2927,3256,3258,3259,3258,3256,3257,3257,3260,3258,3260,3257,3261,3257,2941,3261,2941,3257,2939,2922,1738,3262,1738,2922,1724,2923,3262,3250,3262,2923,2922,3262,3255,3250,3255,3262,3263,1738,3263,3262,3263,1738,1737,1736,2925,3264,2925,1736,1720,1736,3265,1735,3265,1736,3264,3264,3259,3265,3259,3264,3256,3264,2927,3256,2927,3264,2925,3266,3267,3268,3269,3268,3267,3267,3266,2834,3267,2834,3270,3271,3272,3273,3273,3274,3271,3274,3273,3247,3247,3246,3274,3275,3276,3277,3276,3275,3278,3278,3269,3276,3269,3278,3268,3239,3279,3240,3279,3239,3280,3280,3281,3279,3281,3280,3282,3283,3284,3285,3284,3283,3286,3285,3255,3283,3255,3285,3254,3287,3254,3285,3254,3287,3253,3285,3288,3287,3288,3285,3284,3289,3290,3291,3290,3289,3292,3293,3291,3294,3291,3293,3289,3294,3258,3260,3258,3294,3291,3291,3259,3258,3259,3291,3290,3283,3263,3295,3263,3283,3255,3286,3295,3296,3295,3286,3283,3296,3297,3298,3297,3296,3295,3295,1737,3297,1737,3295,3263,3265,3290,3299,3290,3265,3259,3299,1735,3265,1735,3299,3300,3300,3301,3302,3301,3300,3299,3299,3292,3301,3292,3299,3290,3297,1740,3303,1740,3297,1737,3298,3303,3304,3303,3298,3297,3304,1745,1747,1745,3304,3303,3303,1731,1745,1731,3303,1740,3300,1733,1735,1733,3300,3305,3305,1728,1733,1728,3305,1741,1741,3306,1744,3306,1741,3305,3305,3302,3306,3302,3305,3300,3307,3304,3308,3304,3307,3298,3308,3309,3307,3309,3308,3310,1753,3310,3308,3310,1753,1755,3308,1747,1753,1747,3308,3304,3306,3311,3312,3311,3306,3302,1744,3312,1749,3312,1744,3306,1749,3313,1752,3313,1749,3312,3312,3314,3313,3314,3312,3311,3315,3316,3317,3316,3315,3318,3309,3317,3307,3317,3309,3315,3307,3296,3298,3296,3307,3317,3296,3317,3316,3316,3286,3296,3319,3320,3321,3320,3319,3322,3301,3320,3322,3320,3301,3292,3311,3301,3322,3301,3311,3302,3314,3322,3319,3322,3314,3311,3284,3286,3323,3286,3324,3323,3325,3288,3284,3284,3323,3325,3325,3326,3327,3326,3325,3323,3323,86,3326,86,3323,3324,3324,3328,86,3328,3324,3329,3329,3330,3328,3330,3329,3331,3316,3331,3329,3331,3316,3318,3316,3324,3286,3324,3316,3329,3332,3292,3289,3292,3332,3333,3332,87,3333,87,3332,3334,3335,3334,3332,3334,3335,3336,3335,3289,3293,3289,3335,3332,3333,3337,3338,3337,3333,87,3320,3292,3333,3320,3333,3338,3320,3339,3321,3339,3320,3338,3338,3340,3339,3340,3338,3337,3341,3342,3272,3272,3271,3341,3282,3341,3281,3341,3282,3342,3343,3344,3244,3244,3243,3343,3344,3343,3345,3344,3345,3346,3347,3277,3348,3277,3347,3275,3347,3346,3345,3346,3347,3348,3349,3350,2887,2887,2888,3349,3351,3350,3349,3350,3351,3352,2329,3353,2328,3353,2329,3354,2330,3354,2329,3354,2330,2214,2335,2328,3355,2328,3353,3355,2336,3355,3356,3355,2336,2335,3357,2351,2353,2351,3357,2225,2225,2352,2351,2352,2225,2201,3357,2360,3358,2360,3357,2353,3358,2361,3359,2361,3358,2360,2966,3360,2967,3360,2966,3361,2967,3223,2972,3223,2967,3360,2959,3361,2966,3361,2959,3362,2961,3362,2959,3362,2961,3363,3364,2977,2982,2977,3364,3365,3232,2982,2984,2982,3232,3364,3365,2973,2977,2973,3365,3366,2973,3366,2976,2976,3366,3367,3202,3368,3369,3368,3202,3204,71,3369,3370,3369,71,3202,3370,3371,3372,3371,3370,3369,3369,3373,3371,3373,3369,3368,3374,66,71,66,3374,3375,3375,67,66,67,3375,3376,3377,3376,3375,3376,3377,3378,3379,3375,3374,3375,3379,3377,3380,3381,3382,3381,3380,3383,3383,3372,3381,3372,3383,3370,3374,3370,3383,3370,3374,71,3379,3383,3380,3383,3379,3374,3213,3384,3214,3384,3213,3385,3385,3386,3384,3386,3385,3387,3388,3387,3385,3387,3388,3389,78,3385,3213,3385,78,3388,3390,77,3391,77,3390,78,3392,3391,3393,3391,3392,3390,3393,3394,3395,3394,3393,3391,3391,79,3394,79,3391,77,3396,3397,3398,3397,3396,3399,3392,3398,3390,3398,3392,3396,3390,3388,78,3388,3390,3398,3398,3389,3388,3389,3398,3397,3400,3401,3378,3378,3401,3376,3401,67,3376,67,3401,3187,3402,3187,3401,3187,3402,3039,3400,3403,3402,3400,3402,3401,3404,3395,3405,3395,3394,3405,3405,3406,3404,3407,3404,3406,3194,3406,3405,3406,3194,3044,79,3405,3394,3405,79,3194,3408,3409,3410,3409,3408,3411,3403,3410,3402,3410,3403,3408,3402,3410,3039,3410,3037,3039,3410,3409,3037,3409,2999,3037,3412,3413,3414,3413,3412,3415,3042,3413,3415,3413,3042,3013,3044,3415,3406,3415,3044,3042,3407,3415,3412,3415,3407,3406,3400,3416,3417,3416,3400,3378,3403,3417,3418,3417,3403,3400,3418,3419,3420,3419,3418,3417,3417,3421,3419,3421,3417,3416,3408,3418,3422,3418,3408,3403,3411,3422,3423,3422,3411,3408,3423,3424,3425,3424,3423,3422,3422,3420,3424,3420,3422,3418,3426,3404,3427,3404,3426,3395,3428,3427,3429,3427,3428,3426,3429,3430,3431,3430,3429,3427,3427,3407,3430,3407,3427,3404,3430,3412,3432,3412,3430,3407,3431,3432,3433,3432,3431,3430,3433,3434,3435,3434,3433,3432,3432,3414,3434,3414,3432,3412,3377,3436,3437,3436,3377,3379,3378,3437,3416,3437,3378,3377,3416,3438,3421,3438,3416,3437,3437,3439,3438,3439,3437,3436,3440,3393,3441,3393,3440,3392,3442,3441,3443,3441,3442,3440,3443,3426,3428,3426,3443,3441,3441,3395,3426,3395,3441,3393,3444,3445,3446,3445,3444,3447,3447,3382,3445,3382,3447,3380,3436,3380,3447,3380,3436,3379,3439,3447,3444,3447,3439,3436,3448,3449,3450,3449,3448,3451,3442,3450,3440,3450,3442,3448,3440,3396,3392,3396,3440,3450,3450,3399,3396,3399,3450,3449,3452,2999,3409,2999,3452,2998,3453,2998,3452,2998,3453,2997,3454,3452,3455,3452,3454,3453,3455,3409,3411,3409,3455,3452,3456,3457,3458,3457,3459,3458,3458,3425,3456,3425,3458,3423,3423,3455,3411,3455,3423,3458,3458,3454,3455,3454,3458,3459,3460,3413,3013,3013,3012,3460,3461,3414,3413,3413,3460,3461,3462,3461,3460,3460,3463,3462,3463,3460,3012,3012,3014,3463,3464,3465,3466,3465,3464,3467,3464,3462,3467,3462,3464,3461,3434,3461,3464,3461,3434,3414,3435,3464,3466,3464,3435,3434,3468,3022,3469,3022,3468,3023,3468,3470,3471,3470,3468,3469,3472,3470,3469,3472,3469,3473,3469,3002,3473,3002,3469,3022,3474,3475,3476,3475,3474,3477,3478,3476,3479,3476,3478,3474,3479,3470,3472,3470,3479,3476,3476,3471,3470,3471,3476,3475,3026,3480,3481,3480,3026,3025,3482,3481,3480,3481,3482,3483,3480,3471,3482,3471,3480,3468,3480,3023,3468,3023,3480,3025,3484,3483,3482,3483,3484,3485,3486,3485,3484,3486,3487,3485,3477,3486,3484,3477,3484,3475,3475,3484,3482,3475,3482,3471,3030,3488,3489,3488,3030,3031,3018,3489,3490,3489,3018,3030,3491,3489,3492,3489,3491,3490,3488,3492,3489,3492,3488,3493,3494,3495,3496,3495,3494,3497,3497,3493,3495,3493,3497,3492,3498,3492,3497,3492,3498,3491,3499,3497,3494,3497,3499,3498,3034,3500,3035,3500,3034,3501,3031,3500,3488,3500,3031,3035,3500,3493,3488,3493,3500,3502,3502,3500,3501,3502,3501,3503,3504,3502,3503,3504,3503,3505,3495,3502,3504,3502,3495,3493,3496,3504,3506,3504,3496,3495,3506,3505,3507,3506,3504,3505,3481,3483,3508,3483,3509,3508,3026,3481,3510,3481,3508,3510,3511,3510,3508,3508,3512,3511,3508,3509,3512,3509,3513,3512,3485,3509,3483,3509,3485,3514,3514,3513,3509,3513,3514,3515,3516,3515,3514,3515,3516,3517,3487,3514,3485,3514,3487,3516,3501,3518,3503,3503,3518,3519,3518,3520,3519,3519,3520,3521,3522,3523,3518,3518,3523,3520,3034,3522,3501,3501,3522,3518,3505,3519,3524,3519,3505,3503,3507,3524,3525,3524,3507,3505,3525,3526,3527,3526,3525,3524,3524,3521,3526,3521,3524,3519,3111,3528,3114,3528,3111,3529,3529,3530,3528,3528,3530,3531,3532,3529,3533,3529,3532,3530,3053,3529,3111,3529,3053,3533,3128,3114,3534,3114,3528,3534,3127,3128,3535,3128,3534,3535,3535,3536,3537,3536,3535,3534,3534,3531,3536,3531,3534,3528,3115,3538,3539,3538,3115,3117,3064,3539,3540,3539,3064,3115,3541,3540,3539,3539,3542,3541,3542,3539,3538,3538,3543,3542,3133,3544,3117,3117,3544,3538,3544,3543,3538,3543,3544,3545,3535,3545,3544,3545,3535,3537,3127,3535,3133,3133,3535,3544,3533,3054,3546,3054,3533,3053,3547,3533,3546,3533,3547,3532,3510,3547,3546,3547,3510,3511,3054,3026,3510,3054,3510,3546,3063,3540,3548,3540,3063,3064,3063,3522,3034,3522,3063,3548,3522,3549,3523,3549,3522,3548,3549,3548,3540,3549,3540,3541,3473,3003,3550,3003,3473,3002,3551,3472,3473,3551,3473,3550,3550,3454,3551,3454,3550,3453,3550,2997,3453,2997,3550,3003,3552,3479,3553,3479,3552,3478,3457,3552,3459,3552,3553,3459,3459,3551,3454,3551,3459,3553,3553,3472,3551,3472,3553,3479,3017,3490,3554,3490,3017,3018,3014,3554,3463,3554,3014,3017,3554,3462,3463,3462,3554,3555,3555,3490,3491,3490,3555,3554,3556,3498,3499,3498,3556,3557,3557,3491,3498,3491,3557,3555,3467,3555,3557,3555,3467,3462,3467,3556,3465,3556,3467,3557,2900,2899,3558,3559,3558,2899,3560,3561,3559,3561,3558,3559,3562,3352,3351,3352,3562,3563,3564,3563,3562,3563,3564,3565,82,3566,3567,3566,82,81,3326,86,82,3326,82,3567,3327,3326,3567,3327,3567,3568,3567,3569,3568,3569,3567,3566,3570,3571,3560,3560,3571,3561,3572,3573,3570,3570,3573,3571,3574,3575,3576,3577,3576,3575,3574,3564,3575,3564,3574,3565,3578,88,3579,88,3578,93,3579,3580,3578,3580,3579,3581,3336,3579,3334,3579,3336,3581,87,3334,88,88,3334,3579,3328,84,86,84,3328,3582,3582,85,84,85,3582,3583,3584,3583,3582,3583,3584,3585,3330,3584,3328,3328,3584,3582,90,3337,87,3337,90,3586,3340,3337,3587,3337,3586,3587,3587,3588,3589,3588,3587,3586,92,3586,90,3586,92,3588,3590,3591,3592,3591,3590,100,3318,3592,3331,3592,3318,3590,3331,3593,3330,3593,3331,3592,3592,3594,3593,3594,3592,3591,3595,99,3596,99,3595,98,3309,3596,3315,3596,3309,3595,3315,3590,3318,3590,3315,3596,3596,100,3590,100,3596,99,3597,3598,103,3598,3597,3599,3599,3600,3598,3600,3599,3601,3339,3601,3599,3601,3339,3340,3321,3599,3597,3599,3321,3339,3602,102,105,102,3602,3603,3603,103,102,103,3603,3597,3319,3597,3603,3597,3319,3321,3314,3603,3602,3603,3314,3319,3310,3595,3309,3595,3310,3604,3604,98,3595,98,3604,3605,1761,3605,3604,3605,1761,1763,1755,3604,3310,3604,1755,1761,3313,3602,3606,3602,3313,3314,1752,3606,1757,3606,1752,3313,1757,3607,1760,3607,1757,3606,3606,105,3607,105,3606,3602,3605,3608,98,3608,3605,3609,3609,3610,3608,3610,3609,3611,1769,3611,3609,3611,1769,1771,1763,3609,3605,3609,1763,1769,3612,3607,105,3607,3612,3613,3613,1760,3607,1760,3613,1765,3614,1765,3613,1765,3614,1768,3615,3613,3612,3613,3615,3614,97,3616,95,3616,97,3617,3617,3618,3616,3618,3617,3619,3619,3608,3610,3608,3619,3617,98,3617,97,3617,98,3608,3620,106,107,106,3620,3621,3621,105,106,105,3621,3612,3622,3612,3621,3612,3622,3615,3623,3621,3620,3621,3623,3622,3624,3625,3626,3625,3624,113,95,3626,96,3626,95,3624,96,3591,100,3591,96,3626,3626,3594,3591,3594,3626,3625,3627,3628,3629,3628,3627,120,3600,3629,3598,3629,3600,3627,3598,104,103,104,3598,3629,3629,107,104,107,3629,3628,3630,3631,3632,3631,3630,3633,3632,3634,3630,3634,3632,3635,3625,3635,3632,3635,3625,113,3594,3632,3631,3632,3594,3625,3631,3593,3594,3593,3631,3636,3636,3330,3593,3330,3636,3584,3637,3584,3636,3584,3637,3585,3633,3636,3631,3636,3633,3637,3638,3639,3640,3639,3638,3641,3600,3640,3627,3640,3600,3638,3627,3642,120,3642,3627,3640,3640,3643,3642,3643,3640,3639,3601,3638,3600,3638,3601,3644,3644,3641,3638,3641,3644,3645,3587,3645,3644,3645,3587,3589,3340,3644,3601,3644,3340,3587,3616,3646,3647,3646,3616,3618,95,3647,3624,3647,95,3616,3647,113,3624,113,3647,110,3647,108,110,108,3647,3646,3648,3620,3649,3620,3648,3623,121,3649,119,3649,121,3648,3649,120,119,120,3649,3628,3649,107,3628,107,3649,3620,3650,3651,3652,3651,3650,3653,3650,112,114,112,3650,3652,112,3635,113,3635,112,3652,3652,3634,3635,3634,3652,3651,3654,3655,3656,3655,3654,3657,3656,3643,3654,3643,3656,3642,117,3642,3656,3642,117,120,3655,117,3656,117,3655,115,3637,3658,3585,3658,3637,3659,3659,3660,3658,3660,3659,3661,3662,3661,3659,3661,3662,3663,3662,3637,3633,3637,3662,3659,2663,2660,2657,2660,2663,2665,2826,3356,3664,3356,2826,2336,3665,2826,3664,2826,3665,2704,2620,2834,2619,2619,2834,2833,3666,2710,3667,2710,3666,3175,3175,3666,3363,3175,3363,2961,2702,3665,3668,3665,2702,2704,2702,3668,3669,3669,2701,2702,3645,3670,3671,3670,3645,3589,3641,3645,3672,3645,3671,3672,3672,3673,3674,3673,3672,3671,3671,3675,3673,3675,3671,3670,3359,2828,3676,2828,3359,2361,2729,3677,2828,3677,3676,2828,2686,2679,2684,2679,2686,2677,3678,2736,3679,2736,3178,3679,3178,3367,3679,3367,3178,2976,2728,3680,3677,2728,3677,2729,2728,3681,3680,3681,2728,2730,2735,3678,3682,3678,2735,2736,3683,3630,3634,3630,3683,3684,3684,3633,3630,3633,3684,3662,3685,3662,3684,3662,3685,3663,3686,3684,3683,3684,3686,3685,3639,3687,3643,3687,3639,3688,3688,3689,3687,3689,3688,3690,3672,3690,3688,3690,3672,3674,3641,3688,3639,3688,3641,3672,2711,3691,3667,3667,2710,2711,2701,3669,3691,2701,3691,2711,2579,3692,2577,3692,2579,3092,3092,3102,3692,3102,3092,3089,2730,3682,3681,3682,2730,2735,2640,2851,2641,2851,2640,2846,1920,3693,1985,1920,1985,1919,1915,1930,3693,1915,3693,1920,3145,3694,3147,3695,3147,3694,3694,3696,3695,3697,3695,3696,3698,3696,3694,3696,3698,3573,2951,3698,3145,3145,3698,3694,2517,3699,2569,3699,2517,2537,2537,2614,3699,2614,2537,2539,3699,2596,2606,2596,3699,2614,2569,2606,2568,2606,2569,3699,3154,3700,3701,3154,3701,3152,3702,2957,3152,3152,3701,3702,3575,3702,3701,3702,3575,3564,3700,3577,3575,3700,3575,3701,1932,3693,1930,3693,1932,3703,3703,1985,3693,1985,3703,1990,3704,1990,3703,1990,3704,1997,1934,3703,1932,3703,1934,3704,3696,3705,3697,3705,3696,3706,3706,3696,3573,3573,3572,3706,3707,3581,3708,3581,3707,3580,3708,3336,3226,3336,3708,3581,3569,3709,3568,3710,3568,3709,3217,3327,3710,3327,3568,3710,3227,3336,3335,3336,3227,3226,3227,3293,3228,3293,3227,3335,3711,3215,3712,3215,3711,3216,3572,3713,3706,3713,3572,3714,3706,3715,3705,3715,3706,3713,3217,3712,3215,3712,3217,3710,3225,3716,3717,3716,3225,3224,3226,3717,3708,3717,3226,3225,3718,3574,3576,3574,3718,3719,3719,3565,3574,3565,3719,3720,65,3721,63,3721,65,1512,1512,1521,3721,1521,1512,1514,3721,1523,1631,1523,3721,1521,63,1631,64,1631,63,3721,3722,3714,3572,3714,3722,3723,3723,3143,3714,3143,3723,3724,3725,3724,3723,3724,3725,3726,3727,3723,3722,3723,3727,3725,3142,3724,3728,3724,3142,3143,3728,2632,3142,2632,3728,3729,3730,3729,3728,3729,3730,3731,3728,3726,3730,3726,3728,3724,1936,3704,1934,3704,1936,2014,2014,1997,3704,1997,2014,2002,1924,3732,3733,3732,1924,1921,1908,3732,1921,3732,1908,1911,3720,3734,3565,3734,3720,3735,3735,3736,3734,3736,3735,3737,3738,3737,3735,3737,3738,3739,3150,3735,3720,3735,3150,3738,3738,3149,3740,3149,3738,3150,3739,3740,3741,3740,3739,3738,3741,3742,3743,3742,3741,3740,2653,3740,3149,3740,2653,3742,3219,3325,3327,3219,3327,3217,3218,3288,3219,3288,3325,3219,3230,3229,3260,3229,3294,3260,3294,3229,3228,3228,3293,3294,3744,3570,3560,3570,3744,3745,3572,3745,3722,3745,3572,3570,3746,3722,3745,3722,3746,3727,3747,3745,3744,3745,3747,3746,3220,3253,3287,3253,3220,3221,3287,3218,3220,3218,3287,3288,3230,3260,3261,3230,3261,3231,3261,3232,3231,3232,3261,2941,3748,3563,3749,3563,3748,3352,3749,3750,3748,3750,3749,3751,3734,3751,3749,3751,3734,3736,3749,3565,3734,3565,3749,3563,3571,3698,3752,3698,3571,3573,3752,3561,3571,3561,3752,3753,3754,3753,3752,3753,3754,3755,3698,2951,3754,3698,3754,3752,3562,3702,3564,3702,3562,3756,3756,3757,3702,2957,3702,3757,3758,3757,3756,3757,3758,3759,3351,3756,3562,3756,3351,3758,2948,3754,2951,3754,2948,3760,3760,3755,3754,3755,3760,3761,3762,3763,3764,3763,3765,3764,2661,3765,2948,2948,3765,3763,1519,3766,1629,3766,1519,1518,1518,1509,3766,1509,1518,1510,3766,55,57,55,3766,1509,1629,57,59,57,1629,3766,3757,2954,2957,2954,3757,3767,2954,3768,3769,2954,3769,2681,3770,3771,3768,3768,3771,3769,3759,3767,3757,3767,3759,3772,1911,1975,3732,1975,1911,1912,3733,1975,1977,1975,3733,3732,1928,3773,2007,3773,1928,1927,1927,3733,3773,3733,1927,1924,3221,3252,3253,3252,3221,3222,3223,3252,3222,3252,3223,2932,2043,3357,3358,3357,2043,2045,2042,3358,3359,3358,2042,2043,3774,3744,3775,3744,3774,3747,2902,3775,2901,3775,2902,3774,2901,3559,2899,3559,2901,3775,3775,3560,3559,3560,3775,3744,2056,2053,3353,2053,3355,3353,2052,3356,3355,2052,3355,2053,2941,3364,3232,3364,2941,2940,3364,2940,3365,3365,2940,2914,3776,3748,3750,3748,3776,3777,3777,3352,3748,3352,3777,3350,3350,2885,2887,2885,3350,3777,3777,2889,2885,2889,3777,3776,3778,3779,3780,3778,3780,3781,3755,3778,3753,3778,3755,3779,3753,3558,3561,3558,3753,3778,3778,2900,3558,2900,3778,3781,3782,3783,3784,3784,3783,3785,2888,3783,3349,3783,2888,3785,3349,3758,3351,3758,3349,3783,3783,3759,3758,3759,3783,3782,3786,3787,3788,3787,3786,3789,3790,3791,3787,3787,3791,154,3762,3791,3790,3791,3762,3764,3761,3779,3755,3779,3761,3792,3793,3794,3795,3794,3793,3796,3759,3782,3772,3782,3797,3772,3798,3770,3799,3770,3798,3771,3799,3793,3798,3793,162,3798,3800,3148,2944,3148,3800,3801,3801,2660,3148,2660,3801,2658,3765,2658,3801,2658,3765,2661,3765,3800,3764,3800,3765,3801,3791,3800,3802,3800,3791,3764,154,3802,153,3802,154,3791,153,2943,151,2943,153,3802,3802,2944,2943,2944,3802,3800,3803,2945,3804,2945,3803,2937,3771,3803,3769,3803,3804,3769,3769,2678,2681,2678,3769,3804,3804,2679,2678,2679,3804,2945,3803,3798,3805,3798,3803,3771,2937,3805,2936,3805,2937,3803,2936,161,163,161,2936,3805,3805,162,161,162,3805,3798,3806,3807,3808,3807,3809,3808,3808,3146,3806,3146,3808,3144,3810,3144,3808,3144,3810,2950,3811,3808,3809,3808,3811,3810,3812,3810,3811,3810,3812,3813,3813,2950,3810,2950,3813,3814,3815,3814,3813,3814,3815,3816,3813,3817,3815,3817,3813,3812,3818,3819,3820,3820,3819,3821,3819,3822,3821,3822,3819,3823,3823,3151,2956,3151,3823,3819,3819,3153,3151,3153,3819,3818,3824,3823,3825,3823,3824,3822,3826,3825,3827,3825,3826,3824,3827,3828,3829,3828,3827,3825,3825,2956,3828,2956,3825,3823,3806,3161,3830,3161,3806,3146,3807,3830,3831,3830,3807,3806,3831,3832,3833,3832,3831,3830,3832,3830,3161,3161,3162,3832,3818,3155,3153,3155,3818,3834,3835,3155,3834,3158,3155,3835,3836,3835,3834,3835,3836,3837,3820,3834,3818,3834,3820,3836,3838,3170,3168,3170,3838,3839,3839,3162,3170,3162,3839,3832,3840,3832,3839,3832,3840,3833,3841,3839,3838,3839,3841,3840,3167,3842,3843,3842,3167,2836,3843,3168,3167,3168,3843,3838,3838,3844,3841,3844,3838,3843,3843,3845,3844,3845,3843,3842,3846,3174,3847,3174,3846,3172,3848,3847,3849,3847,3848,3846,3835,3849,3847,3849,3835,3837,3158,3847,3174,3847,3158,3835,3850,3171,3851,3171,3850,2853,3852,3851,3853,3851,3852,3850,3853,3846,3848,3846,3853,3851,3851,3172,3846,3172,3851,3171,3854,3730,3855,3730,3854,3731,3856,3854,3855,3854,3856,3857,3856,3725,3727,3725,3856,3855,3855,3726,3725,3726,3855,3730,3741,3858,3859,3858,3741,3743,3739,3859,3737,3859,3739,3741,3737,3860,3736,3860,3737,3859,3860,3859,3858,3860,3858,3861,3862,3863,3864,3863,3862,3865,3746,3747,3862,3862,3864,3746,3727,3746,3864,3864,3856,3727,3864,3857,3856,3857,3864,3863,3866,3867,3868,3867,3866,3869,3861,3868,3860,3868,3861,3866,3736,3868,3751,3868,3736,3860,3751,3867,3750,3867,3751,3868,3854,3870,3731,3870,3854,3871,3871,2882,3870,2882,3871,2947,3872,2947,3871,2947,3872,2879,3857,3871,3854,3871,3857,3872,3729,2633,2632,2633,3729,3873,3873,2881,2633,2635,2633,2881,3870,2881,3873,2881,3870,2882,3731,3873,3729,3873,3731,3870,3874,3858,3743,3858,3874,3875,3875,3861,3858,3861,3875,3876,2953,3876,3875,3876,2953,2892,2894,3875,3874,3875,2894,2953,2654,3742,2653,3742,2654,3877,3877,3743,3742,3743,3877,3874,2895,3874,3877,3874,2895,2894,2895,2654,2656,2654,2895,3877,3863,3872,3857,3872,3863,3878,3878,2879,3872,2879,3878,2877,3879,2877,3878,2877,3879,2878,3865,3878,3863,3878,3865,3879,3876,3866,3861,3866,3876,3880,3880,3869,3866,3869,3880,3881,2891,3881,3880,3881,2891,2890,2892,3880,3876,3880,2892,2891,3882,33,34,33,3882,1405,34,62,3882,62,34,35,3882,64,1503,64,3882,62,1405,1503,1401,1503,1405,3882,3883,59,58,59,3883,1499,23,58,24,58,23,3883,26,3883,23,3883,26,1402,1402,1499,3883,1499,1402,1396,3773,1977,1991,1977,3773,3733,2007,1991,1993,1991,2007,3773,3884,3885,3886,3885,3884,3887,3888,3887,3884,3887,3888,3889,3889,3890,3887,3890,3889,3891,3887,3892,3885,3892,3887,3890,2627,3893,3894,3893,2627,2626,3894,3895,3896,3895,3894,3893,3897,1201,1200,1201,3897,3898,1334,1200,1185,1200,1334,3897,49,3897,50,3897,1334,50,3898,49,52,49,3898,3897,2646,3899,2647,3899,2646,3900,3901,3902,3900,3900,3902,3899,3896,3903,3904,3903,3896,3895,3904,3905,3906,3905,3904,3903,3907,3908,3909,3908,3907,3910,3910,2876,3908,2876,3910,2873,2875,3910,3911,3910,2875,2873,3911,3907,2934,3907,3911,3910,3907,3862,3912,3862,3907,3909,2934,3912,2933,3912,2934,3907,2933,3774,2902,3774,2933,3912,3912,3747,3774,3747,3912,3862,3913,3914,3915,3914,3913,3916,3917,2904,3913,3913,3915,3917,3917,3915,2861,3915,2859,2861,3915,2862,2859,2862,3915,3914,3913,3867,3916,3867,3913,3918,3918,3750,3867,3750,3918,3776,3776,2903,2889,2903,3776,3918,3918,2904,2903,2904,3918,3913,1326,3919,42,36,42,3919,1326,1195,3919,1195,1326,1175,1197,3919,1195,3919,1197,3920,3920,36,3919,36,3920,37,3921,3922,3901,3901,3922,3902,3923,3924,3921,3921,3924,3922,2888,3925,3785,3925,2888,2886,2886,157,3925,157,2886,158,3926,3927,3928,3927,3926,3929,141,3928,138,3928,141,3926,138,2946,136,2946,138,3928,2946,3928,3927,3927,2883,2946,3930,3931,3932,3931,3930,3933,2952,3931,3933,3931,2952,2896,147,2952,3933,2952,147,149,3933,148,147,148,3933,3930,140,3934,3935,3934,140,142,3935,141,140,141,3935,3936,3348,3936,3935,3936,3348,3277,3346,3935,3934,3935,3346,3348,3344,3934,3937,3934,3344,3346,3244,3344,3938,3344,3937,3938,3938,3937,2667,3937,2874,2667,142,3937,3934,3937,142,2874,3939,145,3940,145,3939,143,3282,3940,3342,3940,3282,3939,3941,3342,3940,3342,3941,3272,148,3940,145,3940,148,3941,3280,3939,3282,3939,3280,3942,3942,143,3939,143,3942,2860,3943,2687,3942,3942,2687,2860,3943,3280,3239,3280,3943,3942,3276,3944,3945,3944,3276,3269,3277,3945,3936,3945,3277,3276,3936,3926,141,3926,3936,3945,3945,3929,3926,3929,3945,3944,3946,3273,3947,3273,3946,3247,3932,3947,3930,3947,3932,3946,3930,3941,148,3941,3930,3947,3947,3272,3941,3272,3947,3273,3360,2932,3223,2932,3360,2930,3361,2930,3360,2930,3361,2907,3366,2911,3367,3367,2911,1946,3366,2914,2911,2914,3366,3365,3363,2905,3362,2905,3363,1955,2907,3361,3362,3362,2905,2907,3676,2037,2042,2042,3359,3676,2040,3676,3677,3676,2040,2037,2052,3664,3356,3664,2052,2048,2048,2050,3664,2050,3665,3664,3679,1946,1943,1946,3679,3367,3678,1943,1940,1943,3678,3679,3666,1955,3363,3666,1953,1955,3667,1953,3666,3667,1952,1953,3354,2214,2209,2209,2214,2212,2056,3353,3354,2056,3354,2209,2045,2225,3357,2225,2045,2197,1951,3669,1950,3669,1951,3691,3691,1952,3667,1952,3691,1951,2050,3668,3665,3668,2050,2080,1950,3668,2080,3668,1950,3669,3681,1939,1941,1939,3681,3682,3682,1940,1939,1940,3682,3678,3680,2058,2040,2040,3677,3680,3948,3343,3949,3343,3948,3345,3950,3949,3951,3949,3950,3948,3951,3952,3953,3952,3951,3949,3949,3243,3952,3243,3949,3343,3279,3954,3955,3954,3279,3281,3955,3240,3279,3240,3955,3956,3957,3956,3955,3956,3957,3958,3955,3959,3957,3959,3955,3954,3960,3961,3962,3961,3960,3963,3964,3963,3965,3963,3964,3961,3966,3965,3963,3965,3966,3967,3950,3963,3960,3963,3950,3966,3966,3951,3968,3951,3966,3950,3968,3967,3966,3967,3968,3969,3969,3970,3971,3970,3969,3968,3968,3953,3970,3953,3968,3951,3972,3973,3974,3973,3972,3975,3959,3975,3976,3975,3959,3973,3977,3976,3975,3976,3977,3978,3979,3975,3972,3975,3979,3977,3957,3976,3980,3976,3957,3959,3980,3958,3957,3958,3980,3981,3982,3981,3980,3981,3982,3983,3978,3980,3976,3980,3978,3982,3984,3985,3986,3985,3984,3987,3845,3986,3988,3986,3845,3984,3988,3961,3964,3961,3988,3986,3986,3962,3961,3962,3986,3985,3989,3990,3991,3990,3989,3992,3992,3974,3990,3974,3992,3972,3993,3972,3992,3972,3993,3979,3992,3852,3993,3852,3992,3989,3994,3965,3995,3965,3994,3964,3995,3996,3994,3996,3995,3997,3997,3998,3999,3998,3997,3995,3995,3967,3998,3967,3995,3965,4000,3999,4001,3999,3998,4001,4001,4002,4000,4002,4001,4003,4003,3969,3971,3969,4003,4001,4001,3998,3969,3998,3967,3969,4004,3977,3979,3977,4004,4005,4005,3978,3977,3978,4005,4006,4007,4006,4005,4006,4007,4008,4005,4009,4007,4009,4005,4004,4010,4008,4011,4008,4010,4006,3982,4006,4010,3978,4006,3982,4012,3982,4010,3982,4012,3983,4010,4013,4012,4013,4010,4011,4014,3988,4015,3988,4014,3845,4016,4015,4017,4015,4016,4014,4017,3994,3996,3994,4017,4015,4015,3964,3994,3964,4015,3988,3993,4018,4019,4018,3993,3852,3979,4019,4004,4019,3979,3993,4004,4020,4009,4020,4004,4019,4019,4021,4020,4021,4019,4018,4022,4017,4023,4017,4022,4016,3833,4023,4024,4023,3833,4022,4024,3997,3999,3997,4024,4023,4023,3996,3997,3996,4023,4017,3831,4024,4025,4024,3831,3833,4025,3807,3831,3807,4025,4026,4000,4026,4025,4026,4000,4002,3999,4025,4024,4025,3999,4000,4020,4027,4028,4027,4020,4021,4009,4028,4007,4028,4009,4020,4007,4029,4008,4029,4007,4028,4028,3837,4029,3837,4028,4027,4029,3836,4030,3836,4029,3837,4008,4030,4011,4030,4008,4029,4031,4011,4030,4011,4031,4013,3820,4030,3836,4030,3820,4031,3266,2832,2834,2832,3266,4032,4032,2830,2832,2830,4032,4033,4034,4033,4032,4033,4034,3987,3268,4034,3266,3266,4034,4032,3680,1941,2058,1941,3680,3681,2196,2216,2213,2216,2196,2195,2315,4035,4036,4036,2311,2315,4037,2220,2217,2220,4037,4038,3248,2850,4039,2850,3248,2851,3246,3248,4040,3248,4039,4040,4041,4040,4039,4040,4041,3991,2847,4039,2850,4039,2847,4041,4042,2217,4043,2217,4042,4037,4038,4044,4045,4044,4038,4037,4046,4037,4042,4037,4046,4044,2188,2203,2202,2202,2186,2188,4047,3842,2836,2836,2837,4047,3984,3845,3842,3842,4047,3984,4047,4033,3987,4047,3987,3984,2837,2830,4033,2837,4033,4047,4048,2853,3850,2853,4048,2854,4048,4041,2854,2847,2854,4041,3989,3991,4048,4041,4048,3991,3852,3989,3850,3850,3989,4048,4049,15,667,15,4049,21,643,667,637,667,643,4049,645,4049,643,4049,645,691,21,691,18,691,21,4049,3925,162,3793,162,3925,157,3785,3793,3795,3793,3785,3925,154,4050,3787,4050,154,155,155,2898,4050,2898,155,156,4051,641,638,641,4051,687,665,638,633,638,665,4051,4051,5,9,5,4051,665,687,9,10,9,687,4051,4050,2900,3781,2900,4050,2898,3787,3781,3788,3781,3787,4050,3166,4052,3164,4052,3166,4053,3827,4053,3826,4053,3827,4052,3809,4054,3811,4054,3809,4055,4055,3971,4054,3971,4055,4003,4026,4003,4055,4003,4026,4002,4026,3809,3807,3809,4026,4055,3812,4056,3817,4056,3812,4057,3953,4057,3970,4057,3953,4056,3970,4054,3971,4054,3970,4057,3811,4057,3812,4057,3811,4054,3821,4058,4059,4058,3821,3822,4031,3820,3821,3821,4059,4031,4031,4012,4013,4012,4031,4059,3983,4059,4058,4059,3983,4012,3824,4060,4061,4060,3824,3826,3822,4061,4058,4061,3822,3824,4058,3981,3983,3981,4058,4061,4061,3958,3981,3958,4061,4060,3952,4056,3953,4056,3952,4062,4062,3817,4056,3817,4062,4063,3241,4063,4062,4063,3241,3236,3243,4062,3952,4062,3243,3241,3956,4060,4064,4060,3956,3958,3240,4064,3237,4064,3240,3956,3237,4053,3166,4053,3237,4064,3826,4064,4060,4064,3826,4053,4065,2321,4066,2319,4066,2321,4045,4067,4068,4067,4045,4044,4069,4044,4046,4044,4069,4067,4070,4071,2208,2208,4071,2206,4072,2206,4073,4073,2206,4071,4068,2277,4074,2277,4068,4067,2278,4067,4069,4067,2278,2277,4075,4076,4070,4070,4076,4071,4077,3938,2667,4077,2667,2664,3244,4077,3242,4077,3244,3938,4077,3235,3242,3235,4077,3233,4077,2663,3233,2663,4077,2664,4078,2687,3943,2687,4078,2683,2686,4078,3163,4078,2686,2683,4078,3238,3165,4078,3165,3163,3239,4078,3943,4078,3239,3238,4079,4080,4081,4080,4079,4082,4083,4082,4084,4082,4083,4080,4085,4080,4083,4080,4085,4086,4086,4081,4080,4081,4086,4087,4052,3829,2680,3829,4052,3827,3164,2680,2677,2680,3164,4052,4088,3816,3815,3816,4088,2659,4063,3815,3817,3815,4063,4088,4073,4071,4089,4089,4071,4076,4074,2279,4090,2279,4074,2277,4091,2302,2285,2285,2283,4091,4092,4093,4075,4075,4093,4076,4089,4076,4094,4094,4076,4093,4090,2281,4095,2281,4090,2279,2255,4091,2283,2255,2283,2253,4096,2287,4092,4092,2287,4093,4094,4093,2286,2286,4093,2287,4095,4097,4098,4097,4095,2281,4099,2281,2280,2281,4099,4097,4100,2289,4096,4096,2289,2287,2292,4101,2290,4101,2292,2305,4098,4097,4102,4102,4097,2239,2240,4097,4099,4097,2240,2239,4103,2295,4100,4100,2295,2289,2274,2290,4101,2290,2274,2273,4102,2239,4104,4104,2239,2241,4105,2256,2249,2249,2247,4105,4106,4107,4103,4103,4107,2295,2294,2295,4108,4108,2295,4107,4104,2241,4109,4109,2241,2243,2244,4110,2247,2247,4110,4105,4111,4107,4106,4107,4111,2258,4112,4087,4086,4087,4112,4113,4114,4086,4085,4086,4114,4112,4115,4112,4114,4112,4115,4116,4116,4113,4112,4113,4116,4117,3236,4088,4063,4088,3236,3234,3234,2659,4088,2659,3234,2657,2317,4118,2319,4118,2317,2484,2484,2201,4118,2201,2484,2352,4108,4107,2257,2257,4107,2258,4109,2243,4119,4119,2243,2492,2496,4120,2244,2244,4120,4110,4121,2258,4111,2258,4121,2260,4122,2263,2271,2263,4122,2261,4119,2492,4123,4123,2492,2494,2495,4124,2496,2496,4124,4120,4125,2260,4121,2260,4125,2268,2261,4126,2265,4126,2261,4122,4123,2497,4127,2497,4123,2494,2499,4124,2495,4124,2499,4128,4127,2268,4125,2268,4127,2497,2265,4128,2499,4128,2265,4126,4129,4036,4035,4129,4035,4130,4131,2219,2218,2219,4131,4132,4133,4134,4135,4133,4135,4136,4065,4137,4138,4066,4137,4065,221,4139,4140,221,4140,197,222,263,4139,222,4139,221,263,264,4141,263,4141,4139,4139,4141,4142,4139,4142,4140,4143,4142,4141,4142,4143,4144,271,4141,264,4141,271,4143,227,4143,271,4143,227,228,4145,4146,4147,4146,4145,4148,4147,3270,4145,3270,4147,3267,3269,4147,3944,4147,3269,3267,4147,3929,3944,3929,4147,4146,4149,4150,4151,4150,4149,4152,3932,4151,3946,4151,3932,4149,3247,3946,4151,4151,3245,3247,4151,3249,3245,3249,4151,4150,4153,2884,4154,4154,2884,2880,4148,4154,4146,4154,4148,4153,4146,3927,3929,3927,4146,4154,4154,2883,3927,2883,4154,2880,2897,4155,2893,4155,2897,4156,2896,4155,3931,4155,2896,2893,3931,4149,3932,4149,3931,4155,4155,4152,4149,4152,4155,4156,4157,4158,4159,4158,4157,4160,4160,4161,4158,4161,4160,4162,4158,4163,4164,4163,4158,4161,4159,4164,4165,4164,4159,4158,4166,4167,4168,4167,4169,4168,2207,4072,4170,2206,4072,2207,4131,4171,4172,4171,4131,2218,2481,2214,2330,2214,2481,4036,4115,4173,4116,4173,4115,4174,4174,4159,4173,4159,4174,4157,4173,4165,4175,4165,4173,4159,4116,4175,4117,4175,4116,4173,2312,4036,2481,4036,2312,2311,4043,2217,2219,4043,2219,4132,4176,3109,3110,3109,4176,3139,2611,2610,4176,2611,4176,3110,4177,4178,4179,4178,4177,4180,4180,4181,4178,4181,4180,4182,4178,4183,4184,4183,4178,4181,4179,4184,4185,4184,4179,4178,2605,4176,2610,4176,2605,3140,3140,3139,4176,3139,3140,3137,2588,4186,3100,4186,2588,2587,2587,2609,4186,2609,2587,2589,4187,4188,4189,4188,4187,4190,4191,4190,4192,4190,4191,4188,4188,4193,4194,4193,4188,4191,4189,4194,4195,4194,4189,4188,4186,2611,3106,2611,4186,2609,3100,3106,3098,3106,3100,4186,3692,2603,2600,2603,3692,3102,2577,2600,2576,2600,2577,3692,228,4144,4143,4144,228,212,194,4196,184,194,184,186,197,4140,4196,197,4196,194,4142,4197,4140,4140,4197,4196,4197,185,4196,4196,185,184,4198,185,4197,185,4198,192,4144,4197,4142,4197,4144,4198,212,4198,4144,4198,212,206,206,192,4198,192,206,191,4117,4199,4200,4199,4117,4175,4175,4201,4199,4201,4175,4165,4199,4202,4203,4202,4199,4201,4204,2855,2857,2855,4204,4205,4205,2619,2855,2619,4205,2616,4206,2616,4205,2616,4206,2617,4207,4205,4204,4205,4207,4206,4200,4203,4208,4203,4200,4199,4113,4209,4210,4113,4210,4087,4209,4117,4200,4117,4209,4113,4211,4200,4208,4200,4211,4209,4212,2844,4213,2844,4212,2842,4214,4213,4215,4213,4214,4212,4215,2637,2636,2637,4215,4213,4213,2640,2637,2640,4213,2844,2856,2829,4216,2829,2856,2833,2858,4216,4217,4216,2858,2856,4217,4218,4219,4218,4217,4216,2829,2831,4218,2829,4218,4216,2843,2848,2846,2848,2843,4220,4220,4221,2848,2849,2848,4221,4221,4222,4223,4222,4221,4220,2845,4220,2843,4220,2845,4222,4218,2835,4224,2835,4218,2831,4219,4224,4225,4224,4219,4218,4225,125,123,125,4225,4224,4224,128,125,128,4224,2835,2852,4221,4226,4221,2852,2849,129,4226,132,4226,129,2852,132,4227,135,4227,132,4226,4226,4223,4227,4223,4226,4221,3661,3663,4228,3663,4229,4228,3660,4228,4230,4228,3660,3661,4231,4230,4228,4230,4231,4232,4233,4231,4229,4229,4231,4228,3685,4229,3663,4229,3685,4234,4234,4233,4229,4233,4234,4235,4236,4235,4234,4235,4236,4237,3686,4234,3685,4234,3686,4236,3673,4238,3674,3674,4238,4239,4240,4239,4241,4239,4238,4241,4242,4241,4238,4241,4242,4243,3675,4238,3673,4238,3675,4242,3690,4239,4244,4239,3690,3674,3689,4244,4245,4244,3689,3690,4245,4246,4247,4246,4245,4244,4244,4240,4246,4240,4244,4239,2841,4248,2692,4248,2841,4249,4233,4249,4231,4249,4233,4248,4250,4231,4249,4231,4250,4232,2839,4249,2841,4249,2839,4250,4251,2696,2672,2696,4251,4252,4252,2694,2696,2694,4252,4253,4241,4253,4252,4253,4241,4243,4240,4252,4251,4252,4240,4241,4209,4211,4254,4209,4254,4210,4255,4256,4257,4257,4256,4258,4256,4259,4258,4258,4259,4260,4258,4261,4262,4261,4258,4260,4263,4264,4265,4264,4263,4266,2840,4266,4263,4266,2840,2689,2838,4263,4267,4263,2838,2840,4267,4265,4268,4265,4267,4263,4257,4262,4269,4262,4257,4258,4269,4270,4271,4270,4269,4262,4262,4272,4270,4272,4262,4261,4270,3615,3622,3615,4270,4272,4273,4274,4275,4273,4275,4276,4277,4278,4274,4277,4274,4273,2695,4277,4273,2695,4273,2693,2693,4273,4276,2693,4276,2671,2617,4279,2622,4279,2617,4206,2622,4280,2623,4280,2622,4279,4280,4281,4282,4281,4280,4279,4279,4207,4281,4207,4279,4206,2636,4283,4215,4283,2636,2643,4283,4214,4215,4214,4283,4284,4284,4285,4286,4285,4284,4283,2643,4285,4283,4285,2643,2644,3906,4287,4288,4287,3906,3905,4288,4289,4290,4289,4288,4287,4291,4292,3923,3923,4292,3924,4293,4294,4291,4294,4292,4291,4295,4296,4297,4296,4298,4297,4289,4298,4290,4298,4289,4297,4299,4300,4301,4300,4299,4302,4294,4293,4302,4302,4299,4294,4265,4303,4304,4303,4265,4264,4268,4304,4305,4304,4268,4265,4305,4306,4307,4306,4305,4304,4304,4308,4306,4308,4304,4303,4274,4309,4275,4309,4274,4310,4310,4311,4309,4311,4310,4312,4313,4312,4310,4312,4313,4314,4278,4310,4274,4310,4278,4313,2631,4315,4316,4315,2631,2634,165,4316,166,4316,165,2631,170,4316,4317,4316,170,166,4317,4315,4318,4315,4317,4316,4319,2652,4320,2652,4319,2655,4321,4322,4319,4321,4319,4320,174,4321,4320,174,4320,172,4320,177,172,177,4320,2652,4323,4324,4325,4324,4323,4326,4326,4327,4324,4327,4326,4328,3371,4328,4326,4328,3371,3373,3372,4326,4323,4326,3372,3371,4329,4330,4331,4330,4329,4332,4332,3389,4330,3389,4332,3387,4333,3387,4332,3387,4333,3386,4334,4332,4329,4332,4334,4333,4335,4336,4337,4336,4335,4338,4338,4325,4336,4325,4338,4323,3381,4323,4338,4323,3381,3372,3382,4338,4335,4338,3382,3381,4339,4340,4341,4340,4339,4342,3399,4342,3397,4342,3399,4340,3397,4330,3389,4330,3397,4342,4331,4342,4339,4342,4331,4330,4343,4344,4345,4344,4343,4346,4346,4337,4344,4337,4346,4335,3445,4335,4346,4335,3445,3382,3446,4346,4343,4346,3446,3445,4347,4348,4349,4348,4347,4350,3451,4349,3449,4349,3451,4347,3449,4340,3399,4340,3449,4349,4349,4341,4340,4341,4349,4348,4306,4325,4324,4325,4306,4308,4306,4324,4307,4307,4324,4327,4331,4311,4312,4312,4329,4331,4314,4329,4312,4329,4314,4334,4351,4296,4295,4296,4351,4352,4353,4352,4351,4352,4353,4341,4311,4339,4354,4339,4311,4331,4354,4341,4353,4341,4354,4339,4344,4355,4356,4355,4344,4337,4357,4345,4344,4344,4356,4357,4293,4357,4356,4356,4302,4293,4356,4300,4302,4300,4356,4355,4301,4300,4358,4355,4358,4300,4358,4355,4359,4337,4359,4355,4336,4308,4360,4308,4336,4325,4337,4360,4359,4360,4337,4336,4285,2655,4319,2655,4285,2644,4286,4319,4322,4319,4286,4285,4280,2634,2623,2634,4280,4315,4315,4282,4318,4282,4315,4280,4348,4352,4341,4352,4348,4361,4361,4296,4352,4296,4361,4298,4290,4361,4362,4361,4290,4298,4362,4348,4350,4348,4362,4361,4363,4364,4365,4364,4363,4366,4264,4365,4303,4365,4264,4363,4303,4360,4308,4360,4303,4365,4365,4359,4360,4359,4365,4364,4367,4368,4369,4368,4367,4370,4370,4353,4368,4353,4370,4354,4309,4354,4370,4354,4309,4311,4275,4370,4367,4370,4275,4309,4371,4372,4373,4372,4371,4374,4366,4373,4364,4373,4366,4371,4364,4358,4359,4358,4364,4373,4373,4301,4358,4301,4373,4372,4375,4376,4377,4376,4375,4378,4378,4295,4376,4295,4378,4351,4368,4351,4378,4351,4368,4353,4369,4378,4375,4378,4369,4368,2691,4379,4380,4379,2691,2675,2689,4380,4266,4380,2689,2691,4266,4363,4264,4363,4266,4380,4380,4366,4363,4366,4380,4379,2669,4381,2235,4381,2669,4382,4382,4369,4381,4369,4382,4367,4276,4367,4382,4367,4276,4275,2671,4382,2669,4382,2671,4276,2674,4383,4384,4383,2674,2233,2675,4384,4379,4384,2675,2674,4379,4371,4366,4371,4379,4384,4384,4374,4371,4374,4384,4383,4385,2236,4386,2236,4385,2223,4377,4386,4375,4386,4377,4385,4375,4381,4369,4381,4375,4386,4386,2235,4381,2235,4386,2236,4271,3622,3623,3622,4271,4270,4387,4388,4389,4388,4387,4390,4391,4387,4392,4387,4389,4392,4393,4394,4391,4394,4387,4391,4394,4390,4387,4390,4394,4395,4396,3610,4397,3610,4396,3619,4390,4397,4388,4397,4390,4396,4395,4396,4390,4396,4395,4398,4398,3619,4396,3619,4398,3618,3274,4399,3271,4399,3274,4400,3246,4400,3274,4400,3246,4040,4040,3991,3990,4040,3990,4400,4400,3990,3974,4400,3974,4399,3281,4401,3954,4401,3281,3341,3341,3271,4401,4401,3271,4399,3973,4399,3974,4399,3973,4401,4402,4235,4237,4235,4402,4403,4248,4235,4403,4235,4248,4233,2692,4403,2690,4403,2692,4248,2673,4403,4402,4403,2673,2690,4404,4246,4405,4246,4404,4247,2234,4405,2670,4405,2234,4404,2672,2670,4405,4405,4251,2672,4251,4405,4246,4246,4240,4251,4406,4407,4408,4407,4406,4409,4409,3686,4407,3686,4409,4236,4410,4236,4409,4236,4410,4237,4411,4409,4406,4409,4411,4410,4412,4410,4411,4410,4412,4413,4413,4237,4410,4237,4413,4402,2673,4413,2676,4413,2673,4402,2232,4413,4412,4413,2232,2676,4414,4415,4416,4415,4414,4417,4418,4416,4419,4416,4418,4414,4419,4245,4247,4245,4419,4416,4416,3689,4245,3689,4416,4415,4420,4419,4421,4419,4420,4418,2222,4421,2237,4421,2222,4420,2234,2237,4421,2234,4421,4404,4421,4247,4404,4247,4421,4419,3651,4422,4423,4422,3651,3653,4423,3634,3651,3634,4423,3683,4407,3683,4423,3683,4407,3686,4408,4423,4422,4423,4408,4407,3654,4424,3657,4424,3654,4425,4425,4417,4424,4417,4425,4415,3687,4415,4425,4415,3687,3689,3643,4425,3654,4425,3643,3687,4397,3611,4426,3611,4397,3610,4388,4426,4427,4426,4388,4397,4427,1777,1779,1777,4427,4426,4426,1771,1777,1771,4426,3611,4272,3614,3615,3614,4272,4428,4428,1768,3614,1768,4428,1773,4429,1773,4428,1773,4429,1776,4261,4428,4272,4428,4261,4429,4389,4427,4430,4427,4389,4388,4392,4389,4431,4389,4430,4431,4431,4430,1787,4430,1785,1787,4430,1779,1785,1779,4430,4427,4260,4429,4261,4429,4260,4432,4432,1776,4429,1776,4432,1781,4433,1784,4432,4432,1784,1781,4259,4433,4260,4260,4433,4432,4434,4392,4435,4392,4431,4435,4436,4435,4437,4435,4436,4434,4437,1793,1795,1793,4437,4435,4435,4431,1793,4431,1787,1793,4438,4439,4259,4259,4439,4433,4439,1789,4433,4433,1789,1784,4440,1789,4439,1789,4440,1792,4441,4439,4438,4439,4441,4440,4442,1803,1804,1803,4442,4443,4443,1795,1803,1795,4443,4437,4444,4437,4443,4437,4444,4436,4445,4443,4442,4443,4445,4444,4446,1800,4447,1800,4446,1799,4448,4447,4449,4447,4448,4446,4449,4440,4441,4440,4449,4447,4447,1792,4440,1792,4447,1800,4450,1809,1808,1809,4450,4451,4451,1804,1809,1804,4451,4442,4452,4442,4451,4442,4452,4445,4453,4451,4450,4451,4453,4452,4450,1805,4454,1805,4450,1808,4453,4454,4455,4454,4453,4450,4455,4446,4448,4446,4455,4454,4454,1799,4446,1799,4454,1805,4456,4457,4445,4456,4445,4452,4458,4457,4459,4459,4457,4456,4459,4460,4461,4460,4459,4456,4456,4453,4460,4453,4456,4452,4462,4448,4463,4448,4462,4455,4462,4453,4455,4453,4462,4460,4464,4460,4462,4460,4464,4461,4464,4463,4465,4463,4464,4462,4457,4444,4445,4444,4457,4466,4466,4436,4444,4436,4466,4467,4468,4467,4466,4467,4468,4469,4458,4466,4457,4466,4458,4468,4470,4393,4471,4393,4391,4471,4469,4471,4467,4471,4469,4470,4467,4434,4436,4434,4467,4471,4471,4391,4434,4391,4392,4434,4463,4449,4472,4449,4463,4448,4465,4472,4473,4472,4465,4463,4473,4474,4475,4474,4473,4472,4472,4441,4474,4441,4472,4449,4476,4477,4255,4255,4477,4256,4477,4438,4256,4256,4438,4259,4474,4438,4477,4438,4474,4441,4475,4477,4476,4477,4475,4474,3646,4478,108,4478,3646,4479,4479,4480,4478,4480,4479,4481,4481,4398,4395,4398,4481,4479,3618,4479,3646,4479,3618,4398,4482,3648,121,3648,4482,4483,4483,3623,3648,3623,4483,4271,4484,4271,4483,4271,4484,4269,4485,4483,4482,4483,4485,4484,4481,4486,4480,4486,4481,4487,4488,4486,4489,4486,4487,4489,4489,4487,4393,4487,4394,4393,4487,4395,4394,4395,4487,4481,4490,4484,4485,4484,4490,4491,4491,4269,4484,4269,4491,4257,4492,4255,4491,4491,4255,4257,4493,4492,4490,4490,4492,4491,4494,4470,4469,4470,4494,4495,4489,4470,4495,4470,4489,4393,4488,4495,4496,4495,4488,4489,4496,4494,4497,4494,4496,4495,4498,4476,4499,4476,4498,4475,4500,4501,4498,4500,4498,4499,4493,4500,4499,4493,4499,4492,4499,4255,4492,4255,4499,4476,4502,4458,4503,4458,4502,4468,4494,4468,4502,4468,4494,4469,4497,4502,4504,4502,4497,4494,4504,4503,4505,4503,4504,4502,4506,4507,4465,4506,4465,4473,4508,4509,4507,4508,4507,4506,4501,4508,4506,4501,4506,4498,4498,4506,4473,4498,4473,4475,4510,4511,4505,4505,4503,4510,4512,4513,4511,4511,4510,4512,4461,4512,4510,4510,4459,4461,4459,4510,4503,4503,4458,4459,4514,4515,4509,4509,4515,4507,4515,4464,4507,4507,4464,4465,4512,4461,4515,4515,4461,4464,4513,4512,4514,4514,4512,4515,4516,4517,4518,4517,4516,4519,108,4518,111,4518,108,4516,111,4520,114,4520,111,4518,4518,4521,4520,4521,4518,4517,4522,4523,4524,4523,4522,4525,4526,4524,4527,4524,4526,4522,4527,118,115,118,4527,4524,4524,121,118,121,4524,4523,4528,4529,4530,4529,4528,4531,4519,4530,4517,4530,4519,4528,4517,4532,4521,4532,4517,4530,4530,4533,4532,4533,4530,4529,4534,4535,4536,4535,4534,4537,4536,4538,4534,4538,4536,4539,4539,4522,4526,4522,4539,4536,4536,4525,4522,4525,4536,4535,4540,4541,4542,4541,4540,4543,4531,4542,4529,4542,4531,4540,4529,4544,4533,4544,4529,4542,4542,4545,4544,4545,4542,4541,4546,4547,4548,4547,4546,4549,4549,4550,4547,4550,4549,4551,4534,4551,4549,4551,4534,4538,4537,4549,4546,4549,4537,4534,4552,4553,4554,4553,4552,4555,4543,4554,4541,4554,4543,4552,4541,4556,4545,4556,4541,4554,4554,4557,4556,4557,4554,4553,4558,4559,4560,4559,4558,4561,4561,4562,4559,4562,4561,4563,4547,4563,4561,4563,4547,4550,4548,4561,4558,4561,4548,4547,4553,4564,4557,4564,4553,4565,4565,4566,4564,4566,4565,4567,4568,4567,4565,4567,4568,4569,4555,4565,4553,4565,4555,4568,4559,4570,4571,4570,4559,4562,4560,4571,4572,4571,4560,4559,4572,4573,4574,4573,4572,4571,4571,4575,4573,4575,4571,4570,4520,4576,4577,4576,4520,4521,114,4577,3650,4577,114,4520,3650,4577,3653,4577,4578,3653,4578,4577,4576,4576,4579,4578,4527,4580,4526,4580,4527,4581,4582,4580,4581,4580,4582,4583,3657,4581,3655,4581,3657,4582,115,4581,4527,4581,115,3655,4532,4584,4585,4584,4532,4533,4521,4585,4576,4585,4521,4532,4579,4576,4585,4585,4586,4579,4585,4587,4586,4587,4585,4584,4539,4588,4538,4588,4539,4589,4589,4590,4588,4590,4589,4591,4583,4589,4580,4589,4583,4591,4526,4589,4539,4589,4526,4580,4544,4592,4593,4592,4544,4545,4533,4593,4584,4593,4533,4544,4584,4594,4587,4594,4584,4593,4593,4595,4594,4595,4593,4592,4551,4596,4550,4596,4551,4597,4597,4598,4596,4598,4597,4599,4588,4599,4597,4599,4588,4590,4538,4597,4551,4597,4538,4588,4556,4600,4601,4600,4556,4557,4545,4601,4592,4601,4545,4556,4592,4602,4595,4602,4592,4601,4601,4603,4602,4603,4601,4600,4563,4604,4562,4604,4563,4605,4605,4606,4604,4606,4605,4607,4596,4607,4605,4607,4596,4598,4550,4605,4563,4605,4550,4596,4564,4608,4609,4608,4564,4566,4557,4609,4600,4609,4557,4564,4600,4610,4603,4610,4600,4609,4609,4611,4610,4611,4609,4608,4570,4612,4575,4612,4570,4613,4613,4614,4612,4614,4613,4615,4604,4615,4613,4615,4604,4606,4562,4613,4570,4613,4562,4604,4616,4617,4618,4617,4619,4618,4579,4618,4578,4618,4579,4616,3653,4578,4618,3653,4618,4422,4618,4619,4422,4619,4408,4422,4620,4621,4622,4621,4620,4623,4424,4623,4620,4623,4424,4417,3657,4620,4582,4620,3657,4424,4583,4620,4622,4620,4583,4582,4586,4624,4625,4624,4586,4587,4616,4579,4586,4586,4625,4616,4626,4616,4625,4616,4626,4617,4626,4625,4624,4624,4627,4626,4591,4628,4590,4628,4591,4629,4629,4630,4628,4628,4630,4631,4622,4630,4629,4630,4622,4621,4622,4591,4583,4591,4622,4629,4594,4632,4633,4632,4594,4595,4587,4633,4624,4633,4587,4594,4627,4624,4633,4633,4634,4627,4634,4633,4632,4632,4635,4634,4599,4636,4598,4636,4599,4637,4637,4638,4636,4636,4638,4639,4628,4631,4637,4637,4631,4638,4590,4637,4599,4637,4590,4628,4602,4640,4641,4640,4602,4603,4595,4641,4632,4641,4595,4602,4635,4632,4641,4641,4642,4635,4642,4641,4640,4640,4643,4642,4607,4644,4606,4644,4607,4645,4645,4646,4644,4644,4646,4647,4636,4639,4645,4645,4639,4646,4598,4645,4607,4645,4598,4636,4610,4648,4649,4648,4610,4611,4603,4649,4640,4649,4603,4610,4640,4650,4643,4650,4640,4649,4649,4651,4650,4651,4649,4648,4615,4652,4614,4652,4615,4653,4653,4654,4652,4654,4653,4655,4644,4655,4653,4655,4644,4647,4606,4653,4615,4653,4606,4644,4656,4619,4617,4619,4656,4657,4657,4408,4619,4408,4657,4406,4658,4406,4657,4406,4658,4411,4659,4657,4656,4657,4659,4658,4623,4660,4621,4660,4623,4661,4662,4661,4663,4661,4662,4660,4663,4414,4418,4414,4663,4661,4661,4417,4414,4417,4661,4623,4664,4626,4627,4627,4665,4664,4664,4617,4626,4617,4664,4656,4666,4656,4664,4656,4666,4659,4667,4664,4665,4664,4667,4666,4630,4668,4631,4669,4631,4668,4668,4670,4669,4670,4668,4671,4660,4671,4668,4671,4660,4662,4621,4668,4630,4668,4621,4660,4672,4673,4674,4673,4672,4675,4635,4674,4634,4674,4635,4672,4634,4665,4627,4665,4634,4674,4674,4667,4665,4667,4674,4673,4676,4677,4678,4677,4676,4679,4679,4670,4677,4670,4679,4669,4638,4669,4679,4669,4638,4631,4639,4679,4676,4679,4639,4638,4680,4681,4682,4681,4680,4683,4643,4682,4642,4682,4643,4680,4642,4672,4635,4672,4642,4682,4682,4675,4672,4675,4682,4681,4684,4685,4686,4685,4684,4687,4687,4678,4685,4678,4687,4676,4646,4676,4687,4676,4646,4639,4647,4687,4684,4687,4647,4646,4688,4650,4651,4651,4689,4688,4680,4643,4650,4650,4688,4680,4683,4680,4688,4688,4690,4683,4690,4688,4689,4689,4691,4690,4655,4692,4654,4654,4692,4693,4692,4694,4693,4693,4694,4695,4684,4686,4692,4692,4686,4694,4647,4684,4655,4655,4684,4692,4696,4658,4659,4658,4696,4697,4697,4411,4658,4411,4697,4412,2230,4412,4697,4412,2230,2232,4697,2070,2230,2070,4697,4696,4698,4663,4699,4663,4698,4662,2061,4699,2224,4699,2061,4698,2224,4420,2222,4420,2224,4699,4699,4418,4420,4418,4699,4663,4700,4666,4667,4666,4700,4701,4701,4659,4666,4659,4701,4696,4696,2071,2070,2071,4696,4701,2074,4701,4700,4701,2074,2071,4702,4671,4703,4671,4702,4670,2064,4703,2060,4703,2064,4702,2060,4698,2061,4698,2060,4703,4703,4662,4698,4662,4703,4671,2076,4704,2078,2078,4704,4705,4704,4673,4705,4675,4705,4673,4700,4667,4704,4673,4704,4667,2074,4700,2076,4704,2076,4700,4706,2066,2068,2068,4707,4706,4702,2064,2066,2066,4706,4702,4670,4702,4706,4706,4677,4670,4677,4706,4707,4707,4678,4677,2096,4705,4708,4705,2096,2078,2090,4708,4709,4708,2090,2096,4709,4681,4683,4681,4709,4708,4708,4675,4681,4675,4708,4705,4710,4690,4691,4690,4710,4711,4711,4683,4690,4683,4711,4709,2088,4709,4711,4709,2088,2090,2091,4711,4710,4711,2091,2088,2094,4707,2068,4707,2094,4712,4712,4678,4707,4678,4712,4685,4713,4685,4712,4685,4713,4686,2083,4712,2094,4712,2083,4713,4714,4694,4715,4694,4714,4695,2085,4715,2082,4715,2085,4714,2082,4713,2083,4713,2082,4715,4715,4686,4713,4686,4715,4694,3954,3973,3959,3973,3954,4401,4034,3985,3987,3985,4034,4716,3268,3278,4716,3268,4716,4034,3278,3275,4717,3278,4717,4716,4716,3962,3985,3962,4716,4717,3960,4717,4718,4717,3960,3962,3275,3347,4718,4718,4717,3275,4718,3345,3948,3345,4718,3347,3960,3948,3950,3948,3960,4718,3009,4719,4720,4719,3009,3180,2739,3180,2734,3180,2739,4719,2739,2773,4719,2773,2739,2738,4719,2775,4720,2775,4719,2773,3008,3029,3007,3029,3008,4721,3008,4720,4721,4720,3008,3009,4720,2868,4721,2868,4720,2775,4721,2870,3029,2870,4721,2868,2713,4722,2768,2713,2768,2714,3177,2713,2709,2713,3177,4722,2990,4722,3177,4722,2990,4723,4722,4723,2769,4722,2769,2768,4723,2226,2229,2229,2769,4723,2991,4723,2990,4723,2991,2226,2991,2992,2227,2991,2227,2226,4724,2231,2072,2231,4724,4725,2233,4725,4383,4725,2233,2231,4383,4726,4374,4726,4383,4725,4726,4724,4727,4724,4726,4725,4728,2221,4729,2221,4728,2062,4730,4728,4731,4728,4729,4731,4385,4731,4729,4731,4385,4377,4729,2223,4385,2223,4729,2221,4732,2073,4733,2073,4732,2069,4732,2072,2069,2072,4732,4724,4727,4732,4734,4732,4727,4724,4734,4733,4735,4733,4734,4732,4736,2063,4737,2063,2059,4737,4738,4736,4739,4736,4737,4739,4739,4737,4730,4737,4728,4730,4737,2062,4728,2062,4737,2059,4733,2075,4740,2075,4733,2073,4735,4740,4741,4740,4735,4733,4741,4742,4743,4742,4741,4740,4740,2077,4742,2077,4740,2075,4736,2065,2063,2065,4736,4744,4744,2067,2065,2067,4744,4745,4745,4746,4747,4746,4745,4744,4744,4738,4746,4738,4744,4736,4748,4742,4749,4742,4748,4743,4750,4751,4748,4748,4749,4750,2087,4750,4749,4749,2095,2087,4749,2077,2095,2077,4749,4742,4750,2089,4752,2089,4750,2087,4751,4752,4753,4752,4751,4750,4753,4754,4755,4754,4753,4752,4752,2092,4754,2092,4752,2089,4756,4745,4747,4745,4756,4757,4757,2067,4745,2067,4757,2093,2081,4757,4758,4757,2081,2093,4758,4756,4759,4756,4758,4757,4758,2084,2081,2084,4758,4760,4760,2086,2084,2086,4760,4761,4762,4761,4760,4761,4762,4763,4759,4760,4758,4760,4759,4762,4764,4727,4765,4727,4764,4726,4374,4764,4372,4764,4374,4726,4372,4299,4301,4299,4372,4764,4299,4765,4294,4765,4299,4764,4766,4730,4767,4730,4731,4767,4289,4766,4297,4297,4766,4767,4376,4297,4767,4297,4376,4295,4377,4767,4731,4767,4377,4376,2644,2656,2655,2656,2644,2645,2635,2623,2634,2623,2635,2624,4768,4769,4770,4771,4769,4768,4772,4773,4774,4773,4775,4774,4776,4135,4777,4135,4776,4778,4773,4772,4768,4770,4773,4768,4779,4780,4781,4780,4779,4782,4783,4782,4779,4782,4783,4784,4785,4786,4787,4786,4788,4787,4787,4788,4789,4788,4790,4789,4791,4792,4793,4792,4791,4794,4794,4795,4796,4795,4794,4791,4797,4798,4799,4798,4797,4800,4800,4801,4798,4801,4800,4802,4802,4291,3923,4291,4802,4800,4800,4293,4291,4293,4800,4797,4357,4797,4803,4797,4357,4293,4345,4803,4804,4803,4345,4357,4804,4805,4806,4805,4804,4803,4803,4799,4805,4799,4803,4797,4796,4807,4808,4807,4796,4795,4809,4810,4811,4812,4811,4810,4808,4778,4776,4778,4808,4807,4813,4814,4809,4810,4809,4814,4815,4816,4817,4816,4815,4818,4818,4290,4816,4290,4818,4288,4819,4288,4818,4288,4819,3906,4820,4818,4815,4818,4820,4819,4816,4362,4821,4362,4816,4290,4817,4821,4822,4821,4817,4816,4822,4823,4824,4823,4822,4821,4821,4350,4823,4350,4821,4362,4292,4765,4825,4765,4292,4294,3924,4825,4826,4825,3924,4292,4735,4826,4825,4825,4734,4735,4734,4825,4765,4765,4727,4734,4287,4766,4289,4766,4287,4827,4739,4766,4827,4766,4739,4730,4738,4827,4828,4827,4738,4739,3905,4827,4287,4827,3905,4828,4829,4830,4813,4814,4813,4830,4771,4829,4769,4829,4771,4830,4831,4832,4833,4833,4832,4834,4835,4832,4831,4832,4835,4836,4837,3921,3901,3921,4837,4838,3923,4838,4802,4838,3923,3921,4802,4839,4801,4839,4802,4838,4838,4840,4839,4840,4838,4837,4833,4841,4842,4841,4833,4834,4842,4841,4843,4841,4844,4843,4845,4784,4783,4784,4845,4846,4793,4846,4845,4846,4793,4792,4847,3904,4848,3904,4847,3896,4849,4848,4850,4848,4849,4847,4850,4819,4820,4819,4850,4848,4848,3906,4819,3906,4848,3904,3922,4826,4851,4826,3922,3924,3902,4851,4852,4851,3902,3922,4852,4741,4743,4741,4852,4851,4851,4735,4741,4735,4851,4826,4853,4748,4751,4748,4853,4854,4854,4743,4748,4743,4854,4852,3899,4852,4854,4852,3899,3902,2647,4854,4853,4854,2647,3899,3903,4828,3905,4828,3903,4855,4855,4738,4828,4738,4855,4746,4856,4746,4855,4746,4856,4747,3895,4855,3903,4855,3895,4856,4857,4756,4858,4756,4857,4759,2626,4858,3893,4858,2626,4857,3893,4856,3895,4856,3893,4858,4858,4747,4856,4747,4858,4756,4789,4790,4859,4790,4860,4859,4859,4860,4812,4860,4811,4812,4861,4836,4835,4836,4861,4862,4781,4862,4861,4862,4781,4780,4843,4844,4863,4844,4864,4863,4863,4864,4785,4864,4786,4785,4865,4866,4867,4866,4868,4867,4869,4866,4865,4866,4869,4870,4871,4837,4872,4837,4871,4840,4873,4872,4874,4872,4873,4871,4874,3900,2646,3900,4874,4872,4872,3901,3900,3901,4872,4837,4875,4847,4849,4847,4875,4876,4876,3896,4847,3896,4876,3894,4877,3894,4876,3894,4877,2627,4878,4876,4875,4876,4878,4877,4853,4753,4879,4753,4853,4751,2647,4879,2649,4879,2647,4853,2649,4880,2650,4880,2649,4879,4879,4755,4880,4755,4879,4753,4857,4762,4759,4762,4857,4881,4881,4763,4762,4763,4881,4882,2628,4882,4881,4882,2628,2629,2626,4881,4857,4881,2626,2628,4867,4868,4883,4868,4884,4883,4885,4886,4869,4869,4886,4870,4883,4884,4887,4884,4888,4887,4889,4886,4885,4886,4889,4890,4887,4888,4891,4888,4892,4891,4893,4890,4889,4890,4893,4894,4891,4892,4895,4892,4896,4895,4897,4894,4893,4894,4897,4898,4874,2648,4899,2648,4874,2646,4873,4874,4900,4900,4874,4899,4900,4901,4902,4901,4900,4899,4899,2651,4901,2651,4899,2648,4877,2625,2627,2625,4877,4903,4903,2630,2625,2630,4903,4904,4905,4904,4903,4904,4905,4906,4905,4877,4878,4877,4905,4903,4907,4806,4908,4806,4907,4804,4343,4804,4907,4804,4343,4345,4909,4343,4907,4343,4909,3446,4909,4908,4910,4908,4909,4907,4911,4824,4912,4824,4823,4912,4913,4911,4914,4911,4912,4914,4914,4347,3451,4347,4914,4912,4347,4912,4823,4823,4350,4347,4915,4909,4910,4909,4915,4916,4916,3446,4909,3446,4916,3444,4917,3444,4916,3444,4917,3439,4918,4916,4915,4916,4918,4917,4919,4914,4920,4914,4919,4913,4921,4920,4922,4920,4921,4919,4922,3448,3442,3448,4922,4920,4920,3451,3448,3451,4920,4914,4923,4924,4925,4924,4923,4926,4926,4918,4924,4918,4926,4917,4926,3438,3439,4926,3439,4917,3421,4926,4923,4926,3421,3438,4927,4928,4929,4928,4927,4930,4930,3428,4928,3428,4930,3443,4922,3442,4930,4930,3442,3443,4930,4921,4922,4921,4930,4927,4931,4932,4933,4932,4931,4934,4934,4925,4932,4925,4934,4923,3419,4923,4934,4923,3419,3421,3420,4934,4931,4934,3420,3419,4935,4936,4937,4936,4935,4938,4938,3431,4936,3431,4938,3429,4928,3429,4938,3429,4928,3428,4929,4938,4935,4938,4929,4928,3424,4931,4939,4931,3424,3420,3425,4939,3456,4939,3425,3424,3456,4940,3457,4940,3456,4939,4939,4933,4940,4933,4939,4931,4936,3433,4941,3433,4936,3431,4941,4937,4936,4937,4941,4942,3466,4942,4941,4942,3466,3465,4941,3435,3466,3435,4941,3433,4943,3552,4944,3552,4943,3478,4944,4945,4943,4945,4944,4946,4940,4946,4944,4946,4940,4933,4944,3457,4940,3457,4944,3552,4946,4947,4945,4947,4946,4948,4948,4949,4947,4949,4948,4950,4932,4950,4948,4950,4932,4925,4933,4948,4946,4948,4933,4932,3556,4951,4952,4951,3556,3499,3465,4952,4942,4952,3465,3556,4942,4953,4937,4953,4942,4952,4952,4954,4953,4954,4952,4951,4953,4955,4956,4955,4953,4954,4956,4937,4953,4937,4956,4935,4957,4935,4956,4935,4957,4929,4956,4958,4957,4958,4956,4955,4950,4959,4949,4959,4950,4960,4960,4961,4959,4961,4960,4962,4924,4962,4960,4962,4924,4918,4925,4960,4950,4960,4925,4924,4957,4963,4964,4963,4957,4958,4964,4929,4957,4929,4964,4927,4927,4965,4921,4965,4927,4964,4966,4964,4963,4964,4966,4965,4967,4968,4969,4968,4967,4970,4967,4910,4970,4910,4967,4915,4918,4967,4962,4967,4918,4915,4962,4969,4961,4969,4962,4967,4971,4972,4973,4972,4974,4973,4966,4971,4965,4971,4973,4965,4965,4973,4921,4973,4919,4921,4973,4913,4919,4913,4973,4974,4975,4970,4910,4910,4908,4975,4976,4968,4970,4970,4975,4976,4977,4976,4975,4975,4978,4977,4978,4975,4908,4908,4806,4978,4979,4913,4974,4913,4979,4911,4980,4911,4979,4911,4980,4824,4981,4979,4982,4979,4981,4980,4982,4974,4972,4974,4982,4979,4983,4984,4985,4984,4983,4986,4805,4984,4986,4984,4805,4799,4806,4986,4978,4986,4806,4805,4977,4986,4983,4986,4977,4978,4987,4988,4989,4988,4987,4990,4981,4989,4980,4989,4981,4987,4980,4989,4824,4989,4822,4824,4989,4988,4822,4988,4817,4822,4798,4991,4992,4991,4798,4801,4799,4992,4984,4992,4799,4798,4985,4992,4993,4992,4985,4984,4992,4994,4993,4994,4992,4991,4995,4815,4996,4815,4995,4820,4997,4996,4998,4996,4997,4995,4990,4998,4996,4990,4996,4988,4996,4817,4988,4817,4996,4815,4991,4999,4994,4999,4991,5000,5000,5001,4999,5001,5000,5002,4839,5002,5000,5002,4839,4840,4801,5000,4991,5000,4801,4839,5003,4995,4997,4995,5003,5004,5004,4820,4995,4820,5004,4850,5005,4850,5004,4850,5005,4849,5006,5004,5003,5004,5006,5005,5002,5007,5001,5007,5002,5008,5008,5009,5007,5009,5008,5010,5010,4871,4873,4871,5010,5008,4840,5008,5002,5008,4840,4871,5011,5005,5006,5005,5011,5012,5012,4849,5005,4849,5012,4875,5013,4875,5012,4875,5013,4878,5014,5012,5011,5012,5014,5013,5015,5010,5016,5010,5015,5009,5017,5016,5018,5016,5017,5015,5018,4900,4902,4900,5018,5016,5016,4873,4900,4873,5016,5010,5019,5013,5014,5013,5019,5020,5020,4878,5013,4878,5020,4905,5021,4905,5020,4905,5021,4906,5022,5020,5019,5020,5022,5021,5023,5024,5025,5024,5023,5026,5027,5026,5028,5026,5027,5024,5028,5015,5017,5015,5028,5026,5009,5026,5023,5026,5009,5015,5029,5030,5031,5030,5029,5032,5032,5014,5030,5014,5032,5019,5033,5019,5032,5019,5033,5022,5034,5032,5029,5032,5034,5033,5035,5036,5037,5036,5035,5038,5039,5038,5040,5038,5039,5036,5040,5024,5027,5024,5040,5038,5038,5025,5024,5025,5038,5035,5041,5042,5043,5042,5041,5044,5044,5031,5042,5031,5044,5029,5045,5029,5044,5029,5045,5034,5046,5044,5041,5044,5046,5045,5047,5048,5049,5048,5047,5050,5050,5025,5048,5025,5050,5023,5007,5023,5050,5023,5007,5009,5001,5050,5047,5050,5001,5007,5051,5052,5053,5052,5051,5054,5053,5037,5051,5037,5053,5035,5048,5035,5053,5035,5048,5025,5049,5053,5052,5053,5049,5048,5055,5056,5057,5056,5055,5058,5058,5006,5056,5006,5058,5011,5030,5011,5058,5011,5030,5014,5031,5058,5055,5058,5031,5030,5059,5060,5061,5060,5059,5062,5061,5057,5059,5057,5061,5055,5042,5055,5061,5055,5042,5031,5043,5061,5060,5061,5043,5042,5063,5064,5065,5064,5063,5066,5066,5049,5064,5049,5066,5047,4999,5047,5066,5047,4999,5001,4994,5066,5063,5066,4994,4999,5052,5064,5049,5064,5052,5067,5067,5065,5064,5065,5067,5068,5069,5068,5067,5068,5069,5070,5054,5067,5052,5067,5054,5069,5071,5072,5073,5072,5071,5074,5074,4997,5072,4997,5074,5003,5056,5003,5074,5003,5056,5006,5057,5074,5071,5074,5057,5056,5071,5059,5057,5059,5071,5075,5075,5062,5059,5062,5075,5076,5076,5077,5078,5077,5076,5075,5075,5073,5077,5073,5075,5071,5063,4993,4994,4993,5063,5079,5079,4985,4993,4985,5079,5080,5081,5080,5079,5080,5081,5082,5065,5079,5063,5079,5065,5081,5083,5084,5085,5084,5083,5086,5070,5085,5068,5085,5070,5083,5068,5081,5065,5081,5068,5085,5085,5082,5081,5082,5085,5084,5087,5080,5082,5080,5087,5088,5088,4985,5080,4985,5088,4983,5089,4983,5088,4983,5089,4977,5090,5088,5087,5088,5090,5089,5091,5084,5086,5084,5091,5092,5092,5082,5084,5082,5092,5087,5093,5087,5092,5087,5093,5090,5094,5092,5091,5092,5094,5093,5072,4998,5095,4998,5072,4997,5073,5095,5096,5095,5073,5072,5096,5097,5098,5097,5096,5095,5095,4990,5097,4990,5095,4998,5099,5100,5101,5100,5099,5102,5102,5098,5100,5098,5102,5096,5077,5096,5102,5096,5077,5073,5078,5102,5099,5102,5078,5077,5103,5097,5104,5097,5103,5098,5105,5104,5106,5104,5105,5103,5106,4987,4981,4987,5106,5104,5104,4990,4987,4990,5104,5097,5107,5100,5108,5100,5107,5101,5109,5108,5110,5108,5109,5107,5110,5103,5105,5103,5110,5108,5108,5098,5103,5098,5108,5100,5111,5112,4968,4968,4976,5111,5113,5114,5112,5112,5111,5113,5113,5089,5090,5089,5113,5111,5089,5111,4976,4976,4977,5089,5115,5093,5094,5093,5115,5116,5116,5090,5093,5090,5116,5113,5114,5116,5117,5116,5114,5113,5117,5115,5118,5115,5117,5116,5119,4972,5120,4972,5119,4982,5106,4982,5119,4982,5106,4981,5121,5106,5119,5106,5121,5105,5121,5120,5122,5120,5121,5119,5123,5110,5124,5110,5123,5109,5125,5123,5126,5123,5124,5126,5126,5124,5122,5124,5121,5122,5124,5105,5121,5105,5124,5110,5127,5114,5128,5114,5127,5112,4969,5112,5127,5112,4969,4968,4961,5127,5129,5127,4961,4969,5129,5128,5130,5128,5129,5127,5131,5118,5132,5118,5131,5117,5128,5117,5131,5117,5128,5114,5130,5131,5133,5131,5130,5128,5133,5132,5134,5132,5133,5131,5135,5122,5136,5122,5120,5136,5137,5135,5138,5135,5136,5138,5138,5136,4966,5136,4971,4966,5136,5120,4971,5120,4972,4971,5139,5125,5140,5125,5126,5140,5141,5139,5142,5139,5140,5142,5142,5140,5137,5140,5135,5137,5140,5126,5135,5126,5122,5135,5143,5144,5145,5144,5143,5146,5146,5130,5144,5130,5146,5129,4959,5129,5146,5129,4959,4961,4949,5146,5143,5146,4949,4959,5147,5148,5149,5148,5147,5150,5150,5134,5148,5134,5150,5133,5144,5133,5150,5133,5144,5130,5145,5150,5147,5150,5145,5144,5151,5152,5153,5152,5151,5154,4958,5154,4963,5154,4958,5152,4963,5138,4966,5138,4963,5154,5137,5154,5151,5154,5137,5138,5155,5156,5157,5156,5155,5158,5158,5153,5156,5153,5158,5151,5142,5151,5158,5151,5142,5137,5141,5158,5155,5158,5141,5142,5159,5160,5161,5160,5159,5162,5162,5145,5160,5145,5162,5143,4947,5143,5162,5143,4947,4949,4945,5162,5159,5162,4945,4947,5163,5164,5165,5164,5163,5166,5165,5149,5163,5149,5165,5147,5160,5147,5165,5147,5160,5145,5161,5165,5164,5165,5161,5160,5167,5168,5169,5168,5167,5170,4954,5169,4955,5169,4954,5167,4955,5152,4958,5152,4955,5169,5153,5169,5168,5169,5153,5152,5171,5172,5173,5172,5171,5174,5170,5173,5168,5173,5170,5171,5156,5168,5173,5168,5156,5153,5157,5173,5172,5173,5157,5156,5159,5175,5176,5175,5159,5161,4943,4945,5159,4943,5159,5176,4943,3474,3478,3474,4943,5176,5176,3477,3474,3477,5176,5175,5161,5177,5175,5177,5161,5178,5177,3486,5175,5175,3486,3477,3487,5177,5179,3487,3486,5177,5179,5177,5178,5178,5180,5179,5164,5178,5161,5178,5164,5181,5181,5180,5178,5180,5181,5182,5183,5182,5181,5182,5183,5184,5166,5181,5164,5181,5166,5183,5167,5185,5170,5185,5167,5186,5186,3496,5185,3496,5186,3494,4951,3494,5186,3494,4951,3499,4951,5167,4954,5167,4951,5186,5170,5187,5188,5187,5170,5185,5189,5188,5187,5188,5189,5190,3507,5187,3506,3507,5189,5187,5187,5185,3506,5185,3496,3506,5188,5171,5170,5171,5188,5191,5191,5174,5171,5174,5191,5192,5193,5192,5191,5192,5193,5194,5190,5191,5188,5191,5190,5193,3516,5179,5195,5179,3516,3487,5195,3517,3516,3517,5195,5196,5197,5196,5195,5196,5197,5198,5180,5195,5179,5195,5180,5197,3525,5189,3507,5189,3525,5199,5199,5190,5189,5190,5199,5200,5201,5200,5199,5200,5201,5202,5199,3527,5201,3527,5199,3525,5182,5197,5180,5197,5182,5203,5203,5198,5197,5198,5203,5204,5205,5204,5203,5204,5205,4163,5184,5203,5182,5203,5184,5205,5200,5193,5190,5193,5200,5206,5206,5194,5193,5194,5206,5207,5208,5207,5206,5207,5208,4079,5202,5206,5200,5206,5202,5208,5209,5196,5198,5198,5210,5209,5209,5211,5196,5196,5211,3517,5212,5213,5209,5211,5209,5213,5212,5209,5210,5210,5214,5212,5204,5210,5198,5210,5204,5215,5215,5214,5210,5214,5215,5216,4161,5216,5215,5216,4161,4162,4163,5215,5204,5215,4163,4161,5217,5202,5201,5202,5217,5218,5219,5218,5217,5218,5219,5220,5219,5217,5221,5217,5222,5221,5217,5201,5222,5201,3527,5222,5218,5208,5202,5208,5218,5223,4079,5223,4082,5223,4079,5208,5224,4082,5223,4082,5224,4084,5220,5223,5218,5223,5220,5224,3515,5225,3513,5225,3515,5226,5226,5227,5225,5227,5226,5228,5211,5228,5226,5228,5211,5213,3517,5226,3515,5226,3517,5211,3526,5229,5230,5229,3526,3521,3527,5230,5222,5230,3527,3526,5222,5231,5221,5231,5222,5230,5230,5232,5231,5232,5230,5229,5233,3512,5234,3512,5233,3511,5235,5234,5236,5234,5235,5233,5225,5236,5234,5236,5225,5227,3513,5234,3512,5234,3513,5225,3520,5237,5238,5237,3520,3523,5238,3521,3520,3521,5238,5229,5239,5229,5238,5229,5239,5232,5238,5240,5239,5240,5238,5237,5241,5233,5235,5233,5241,5242,5242,3511,5233,3511,5242,3547,3547,5243,3532,5243,3547,5242,5244,5242,5241,5242,5244,5243,5237,5245,5240,5245,5237,5246,5246,5247,5245,5247,5246,5248,3549,5248,5246,5248,3549,3541,3523,5246,5237,5246,3523,3549,3530,5249,3531,3531,5249,5250,5249,5251,5250,5250,5251,5252,5244,5249,5243,5251,5249,5244,5243,3530,3532,3530,5243,5249,5253,3542,3543,3543,5254,5253,5248,3541,3542,3542,5253,5248,5247,5248,5253,5253,5255,5247,5253,5254,5255,5254,3886,5255,5256,5235,5257,5235,5256,5241,5251,5241,5256,5241,5251,5244,5252,5256,5258,5252,5251,5256,5258,5257,5259,5257,5258,5256,5260,5261,5240,5240,5245,5260,3885,3892,5261,3885,5261,5260,3886,5260,5255,3886,3885,5260,5255,5260,5245,5255,5245,5247,3536,5250,5262,5250,3536,3531,3537,5262,5263,5262,3537,3536,5263,5264,3888,5264,5263,5262,5262,5252,5264,5252,5262,5250,3545,5254,3543,5254,3545,5265,5265,3886,5254,3886,5265,3884,5263,3884,5265,3884,5263,3888,3537,5265,3545,5265,3537,5263,5266,5227,5267,5227,5266,5236,5257,5236,5266,5236,5257,5235,5259,5266,5268,5266,5259,5257,5268,5267,5269,5267,5268,5266,5270,5271,5232,5232,5239,5270,5272,5273,5271,5272,5271,5270,3892,5272,5270,3892,5270,5261,5261,5270,5239,5239,5240,5261,5274,5269,5275,5269,5267,5275,5276,5274,5277,5274,5275,5277,5277,5275,5213,5275,5228,5213,5275,5267,5228,5267,5227,5228,5278,5279,5273,5271,5273,5279,5279,5231,5271,5232,5271,5231,5280,5221,5279,5231,5279,5221,5281,5280,5278,5279,5278,5280,5277,5212,5282,5212,5277,5213,5276,5282,5283,5282,5276,5277,5283,5284,5285,5284,5283,5282,5214,5282,5212,5282,5214,5284,5280,5219,5221,5219,5280,5286,5286,5220,5219,5220,5286,5287,5288,5287,5286,5287,5288,5289,5281,5286,5280,5286,5281,5288,5284,5216,5290,5216,5284,5214,5285,5290,5291,5290,5285,5284,5291,4160,4157,4160,5291,5290,5290,4162,4160,4162,5290,5216,5287,5224,5220,5224,5287,5292,5292,4084,5224,4084,5292,4083,5293,4083,5292,4083,5293,4085,5289,5292,5287,5292,5289,5293,5294,5184,5295,5184,5294,5205,4164,5205,5294,5205,4164,4163,4165,5294,4201,5294,4165,4164,4201,5295,4202,5295,4201,5294,5296,5194,5297,5194,5207,5297,4254,5296,4210,5296,5297,4210,4087,4210,5297,5297,4081,4087,5297,5207,4081,5207,4079,4081,5298,5291,5299,5291,5298,5285,5300,5299,5301,5299,5300,5298,5301,4174,4115,4174,5301,5299,5299,4157,4174,4157,5299,5291,5302,5293,5289,5293,5302,5303,5303,4085,5293,4085,5303,4114,5301,4114,5303,4114,5301,4115,5300,5303,5302,5303,5300,5301,5304,5283,5305,5283,5304,5276,5306,5305,5307,5305,5306,5304,5307,5298,5300,5298,5307,5305,5305,5285,5298,5285,5305,5283,5308,5288,5281,5288,5308,5309,5309,5289,5288,5289,5309,5302,5307,5302,5309,5302,5307,5300,5306,5309,5308,5309,5306,5307,5310,5311,5312,5311,5313,5312,5312,5278,5310,5273,5310,5278,5308,5281,5312,5278,5312,5281,5312,5313,5308,5313,5306,5308,5314,5315,5311,5311,5315,5313,5315,5304,5313,5313,5304,5306,5315,5274,5276,5315,5276,5304,5314,5269,5274,5314,5274,5315,5316,5268,5269,5316,5269,5314,5317,5259,5268,5317,5268,5316,3891,5317,5316,3891,5316,5318,5318,5316,5314,5318,5314,5311,5319,5273,5272,5273,5319,5310,5318,5310,5319,5310,5318,5311,3891,5319,3890,5319,3891,5318,3890,5272,3892,5272,3890,5319,5320,5258,5259,5320,5259,5317,5264,5252,5258,5264,5258,5320,3888,5264,5320,3888,5320,3889,3889,5320,5317,3889,5317,3891,5321,5322,5323,5322,5324,5323,5166,5321,5183,5321,5323,5183,5295,5183,5323,5183,5295,5184,4202,5323,5324,5323,4202,5295,5325,5326,5327,5327,5326,5328,5326,4254,5328,4254,5326,5296,5192,5296,5326,5296,5192,5194,5174,5192,5325,5325,5192,5326,5329,5321,5330,5321,5329,5322,5331,5330,5332,5330,5331,5329,5163,5332,5330,5332,5163,5149,5330,5166,5163,5166,5330,5321,5325,5333,5334,5333,5325,5327,5174,5334,5172,5334,5174,5325,5335,5172,5334,5172,5335,5157,5334,5336,5335,5336,5334,5333,5337,5338,5339,5338,5337,5340,5341,5339,5342,5339,5341,5337,5342,5329,5331,5329,5342,5339,5339,5322,5329,5322,5339,5338,5343,5340,5344,5340,5343,5338,5322,5338,5324,5338,5343,5324,4203,5324,5343,5324,4203,4202,4208,5343,5344,5343,4208,4203,5345,5346,5347,5346,5345,5340,5327,5347,5333,5347,5327,5345,5333,5348,5336,5348,5333,5347,5347,5349,5348,5349,5347,5346,5344,5340,5350,5340,5345,5350,4208,5350,4211,5350,4208,5344,4211,5328,4254,5328,4211,5350,5327,5328,5345,5345,5328,5350,5332,5351,5331,5351,5332,5352,5352,5353,5351,5353,5352,5354,5148,5354,5352,5354,5148,5134,5149,5352,5332,5352,5149,5148,5355,5335,5336,5335,5355,5356,5356,5157,5335,5157,5356,5155,5357,5155,5356,5155,5357,5141,5356,5358,5357,5358,5356,5355,5351,5359,5360,5359,5351,5353,5331,5360,5342,5360,5331,5351,5342,5361,5341,5361,5342,5360,5360,5362,5361,5362,5360,5359,5363,5355,5364,5355,5363,5358,5365,5364,5366,5364,5365,5363,5366,5348,5349,5348,5366,5364,5364,5336,5348,5336,5364,5355,5367,4190,4187,4190,5367,5368,4192,5368,5369,5368,4192,4190,5369,5036,5039,5036,5369,5368,5037,5368,5367,5368,5037,5036,4181,5370,4183,5370,4181,5371,5371,5043,5370,5043,5371,5041,5372,5041,5371,5041,5372,5046,4182,5371,4181,5371,4182,5372,5373,5374,5375,5374,5373,5376,5373,5132,5118,5132,5373,5375,5134,5375,5354,5375,5134,5132,5354,5374,5353,5374,5354,5375,5359,5377,5362,5377,5359,5378,5379,5377,5378,5377,5379,5380,5376,5378,5374,5378,5376,5379,5353,5378,5359,5378,5353,5374,5381,5382,5383,5382,5381,5384,5358,5381,5357,5381,5383,5357,5357,5383,5141,5383,5139,5141,5382,5139,5383,5139,5382,5125,5363,5385,5386,5385,5363,5365,5358,5386,5381,5386,5358,5363,5384,5381,5386,5386,5387,5384,5387,5386,5385,5385,5388,5387,5389,5390,5391,5390,5389,5392,5389,5094,5392,5094,5389,5115,5373,5115,5389,5115,5373,5118,5389,5376,5373,5376,5389,5391,5393,5394,5395,5394,5393,5396,5391,5393,5395,5393,5391,5390,5391,5379,5376,5379,5391,5395,5395,5380,5379,5380,5395,5394,5397,5398,5399,5398,5400,5399,5384,5399,5382,5399,5384,5397,5382,5123,5125,5123,5382,5399,5399,5109,5123,5109,5399,5400,5401,5402,5403,5402,5401,5404,5388,5403,5387,5403,5388,5401,5387,5397,5384,5397,5387,5403,5403,5402,5397,5402,5398,5397,5392,5405,5390,5406,5390,5405,5405,5407,5406,5408,5406,5407,5091,5086,5405,5407,5405,5086,5094,5091,5392,5405,5392,5091,5393,5409,5396,5396,5409,5410,5409,5411,5410,5411,5409,5412,5406,5412,5409,5412,5406,5408,5390,5406,5393,5409,5393,5406,5398,5413,5414,5398,5414,5400,5400,5414,5107,5400,5107,5109,5414,5415,5101,5414,5101,5107,5413,5416,5415,5413,5415,5414,5417,5402,5404,5404,5418,5417,5402,5417,5413,5402,5413,5398,5419,5413,5417,5413,5419,5416,5420,5417,5418,5417,5420,5419,5421,5083,5070,5083,5421,5422,5422,5086,5083,5086,5422,5407,5423,5407,5422,5407,5423,5408,5424,5422,5421,5422,5424,5423,5425,5412,5426,5412,5425,5411,5427,5426,5428,5426,5427,5425,5428,5423,5424,5423,5428,5426,5426,5408,5423,5408,5426,5412,5429,5421,5430,5421,5429,5424,5431,5430,5432,5430,5431,5429,5432,5069,5054,5069,5432,5430,5430,5070,5069,5070,5430,5421,5433,5428,5434,5428,5433,5427,5435,5434,5436,5434,5435,5433,5436,5429,5431,5429,5436,5434,5434,5424,5429,5424,5434,5428,5437,5099,5438,5099,5437,5078,5439,5438,5440,5438,5439,5437,5440,5415,5416,5415,5440,5438,5438,5101,5415,5101,5438,5099,5441,5419,5420,5419,5441,5442,5442,5416,5419,5416,5442,5440,5443,5440,5442,5440,5443,5439,5444,5442,5441,5442,5444,5443,5437,5445,5446,5445,5437,5439,5446,5078,5437,5078,5446,5076,5076,5447,5062,5447,5076,5446,5446,5448,5447,5448,5446,5445,5443,5449,5450,5449,5443,5444,5439,5450,5445,5450,5439,5443,5445,5451,5448,5451,5445,5450,5450,5452,5451,5452,5450,5449,5453,5432,5454,5432,5453,5431,4187,5454,5367,5454,4187,5453,5051,5367,5454,5367,5051,5037,5454,5054,5051,5054,5454,5432,5453,4189,5455,4189,5453,4187,5455,5431,5453,5431,5455,5436,5456,5436,5455,5436,5456,5435,5455,4195,5456,4195,5455,4189,5447,5457,5458,5457,5447,5448,5062,5458,5060,5458,5062,5447,5370,5060,5458,5060,5370,5043,5458,4183,5370,4183,5458,5457,4184,5457,5459,5457,4184,4183,4185,5459,5460,5459,4185,4184,5451,5460,5459,5460,5451,5452,5448,5459,5457,5459,5448,5451,5461,4167,4166,4166,5462,5461,4774,5463,5464,5465,5464,5463,5466,5465,5463,5465,5466,5467,5468,5467,5466,5467,5468,5469,5470,5469,5468,5469,5470,5471,5472,5461,5462,5462,5473,5472,5471,5474,5475,5474,5471,5470,5476,5472,5473,5473,5477,5476,5475,5478,5479,5478,5475,5474,5480,5477,5481,5477,5480,5476,5479,5482,5483,5482,5479,5478,5484,5481,5485,5481,5484,5480,5483,5486,5487,5486,5483,5482,5488,5485,5489,5485,5488,5484,5487,4897,5490,4897,5487,5486,4895,5489,5491,5489,4895,5488,5490,4893,5492,4893,5490,4897,4891,5491,5493,5491,4891,4895,5492,4889,5494,4889,5492,4893,5495,4887,5493,5493,4887,4891,5494,4885,2123,4885,5494,4889,5496,4883,5495,5495,4883,4887,2123,4885,2120,2120,4885,4869,5497,4867,5496,5496,4867,4883,2120,4865,2118,4865,2120,4869,2118,4865,5497,5497,4865,4867,5498,5499,2220,5499,5498,5500,5501,5500,5498,5500,5501,5502,5502,5503,5504,5503,5502,5501,5505,5506,5507,2208,5506,5505,5504,5508,5509,5508,5504,5503,5510,5507,5511,5505,5507,5510,5509,5512,5513,5512,5509,5508,5514,5515,5511,5510,5511,5515,5513,5516,5517,5516,5513,5512,5518,5519,5514,5515,5514,5519,5517,5520,5521,5520,5517,5516,5522,5523,5518,5518,5523,5519,5521,5520,5524,5524,5520,5525,5526,5527,5522,5522,5527,5523,5524,5525,5528,5528,5525,5529,5530,5531,5526,5526,5531,5527,5528,5529,5532,5532,5529,5533,5534,5531,5530,5531,5534,5535,5532,5533,5536,5536,5533,5537,5538,5535,5534,5535,5538,5539,5536,5537,5540,5540,5537,5541,5542,5539,5538,5539,5542,5543,5540,5544,5545,5544,5540,5541,5545,5543,5542,5543,5545,5544,2208,2205,5546,2208,5546,5506,2220,4171,2218,4171,2220,5499,5547,4863,5548,5548,4863,4785,5549,4843,5547,5547,4843,4863,5550,4861,5551,4861,5550,4781,5551,4835,5552,4835,5551,4861,4859,4812,5553,5553,5554,4859,4859,5554,4789,5554,5555,4789,5556,4845,5557,4845,5556,4793,5557,4783,5558,4783,5557,4845,5559,4842,5549,5549,4842,4843,5560,4842,5559,4842,5560,4833,5552,4831,5561,4831,5552,4835,5561,4831,5560,5560,4831,4833,4830,4771,5562,5562,5563,4830,4814,4830,5563,5563,5564,4814,4810,4814,5564,5564,5565,4810,4807,5566,4778,5566,4807,5567,4812,4810,5565,5565,5553,4812,4795,5567,4807,5567,4795,5568,4791,5568,4795,5568,4791,5569,4793,5569,4791,5569,4793,5556,4789,5555,4787,5555,5570,4787,5548,4785,5570,5570,4785,4787,5558,4779,5571,4779,5558,4783,5571,4781,5550,4781,5571,4779,5572,4768,5573,5573,4768,5574,5575,2207,4170,2207,5575,2205,5576,5546,5575,5575,5546,2205,4778,4136,4135,4136,4778,5566,4772,4774,5577,4774,5464,5577,4771,4768,5572,5572,5562,4771,5578,5546,5576,5546,5578,5506,4172,4171,5579,5579,4171,5499,5579,5499,5580,5580,5499,5500,5580,5502,5581,5502,5580,5500,5581,5502,5582,5582,5502,5504,5506,5583,5507,5583,5506,5578,5582,5504,5584,5584,5504,5509,5507,5583,5511,5585,5511,5583,5584,5509,5586,5586,5509,5513,5587,5511,5585,5511,5587,5514,5586,5513,5588,5588,5513,5517,5589,5514,5587,5514,5589,5518,5588,5517,5590,5590,5517,5521,5591,5518,5589,5518,5591,5522,5590,5521,5592,5592,5521,5524,5593,5522,5591,5522,5593,5526,5592,5524,5594,5594,5524,5528,5595,5526,5593,5526,5595,5530,5594,5528,5596,5596,5528,5532,5597,5530,5595,5530,5597,5534,5596,5532,5598,5598,5532,5536,5599,5534,5597,5534,5599,5538,5598,5536,5600,5600,5536,5540,5601,5538,5599,5538,5601,5542,5600,5545,5602,5545,5600,5540,5602,5542,5601,5542,5602,5545,4864,2238,4786,4786,2238,2240,4844,2242,4864,4864,2242,2238,4780,2259,4862,2259,4780,2257,4862,2267,4836,2267,4862,2259,4860,2276,4811,4811,2276,2278,4790,2280,4860,4860,2280,2276,4792,2288,4846,2288,4792,2286,4846,2294,4784,2294,4846,2288,4841,2491,4844,4844,2491,2242,2493,4841,4834,4841,2493,2491,4836,2498,4832,2498,4836,2267,4832,2498,4834,4834,2498,2493,4829,4042,4769,4769,4042,4043,4813,4046,4829,4829,4046,4042,4809,4069,4813,4813,4069,4046,4776,4073,4808,4073,4776,4072,4811,2278,4809,4809,2278,4069,4808,4089,4796,4089,4808,4073,4796,4094,4794,4094,4796,4089,4794,2286,4792,2286,4794,4094,4788,4099,4790,4790,4099,2280,4786,2240,4788,4788,2240,4099,4784,4108,4782,4108,4784,2294,4782,2257,4780,2257,4782,4108,4770,4131,4773,4131,4770,4132,4170,4776,4777,4776,4170,4072,4773,4172,4775,4172,4773,4131,4769,4132,4770,4132,4769,4043,5603,5575,4777,4777,5575,4170,5604,5576,5603,5603,5576,5575,5605,5576,5604,5576,5605,5578,4172,5606,4775,5606,4172,5579,5606,5580,5607,5580,5606,5579,5607,5581,5608,5581,5607,5580,5608,5582,5609,5582,5608,5581,5610,5583,5605,5605,5583,5578,5609,5584,5611,5584,5609,5582,5612,5585,5610,5610,5585,5583,5611,5586,5613,5586,5611,5584,5614,5587,5612,5612,5587,5585,5613,5588,5615,5588,5613,5586,5616,5589,5614,5614,5589,5587,5615,5590,5617,5590,5615,5588,5618,5591,5616,5616,5591,5589,5617,5592,4898,5592,5617,5590,4896,5593,5618,5618,5593,5591,4898,5594,4894,5594,4898,5592,4892,5595,4896,4896,5595,5593,4894,5596,4890,5596,4894,5594,4888,5597,4892,4892,5597,5595,4890,5598,4886,5598,4890,5596,4884,5599,4888,4888,5599,5597,4886,5598,4870,4870,5598,5600,4868,5601,4884,4884,5601,5599,4870,5602,4866,5602,4870,5600,4866,5602,4868,4868,5602,5601,4777,4135,5603,4169,5603,4135,4167,5603,4169,5603,4167,5604,5605,4167,5461,4167,5605,5604,5606,4774,4775,4774,5606,5463,5607,5463,5606,5463,5607,5466,5608,5466,5607,5466,5608,5468,5609,5468,5608,5468,5609,5470,5610,5461,5472,5461,5610,5605,5470,5609,5474,5474,5609,5611,5472,5612,5610,5612,5472,5476,5474,5611,5478,5478,5611,5613,5476,5614,5612,5614,5476,5480,5478,5615,5482,5615,5478,5613,5614,5484,5616,5484,5614,5480,5482,5617,5486,5617,5482,5615,5488,5618,5484,5618,5616,5484,5486,4898,4897,4898,5486,5617,4895,4896,5488,4896,5618,5488
-					]
-				}
-			]
-		}
-	],
-	"materials" : [
-		{
-			"id" : "Material7",
-			"type" : "PHONG",
-			"diffuse" : [0.700000,0.700000,0.700000],
-			"ambient" : [0.300000,0.300000,0.300000],
-			"emissive" : [1.0,1.0,1.0],
-			"opacity" : 0.000000,
-			"specular" : [1.0,1.0,1.0],
-			"shininess" : 50.000000,
-			"textures" : [
-				{
-					"id" : "head",
-					"filename" : "head_color.png",
-					"uvtranslation" : [0.0,0.0],
-					"uvscaling" : [1.0,1.0],
-					"type" : "STANDARD"
-				}
-			]
-		},
-		{
-			"id" : "Material9",
-			"type" : "PHONG",
-			"diffuse" : [0.700000,0.700000,0.700000],
-			"ambient" : [0.300000,0.300000,0.300000],
-			"emissive" : [1.0,1.0,1.0],
-			"opacity" : 0.000000,
-			"specular" : [1.0,1.0,1.0],
-			"shininess" : 50.000000
-		}
-	],
-	"nodes" : [
-		{
-			"id" : "head",
-			"translation" : [0.0,0.0,0.0],
-			"rotation" : [0.0,0.0,0.0,1.0],
-			"scale" : [1.0,1.0,1.0],
-			"mesh" : "head_Mesh",
-			"materials" : [
-				{
-					"meshpartid" : "part0",
-					"materialid" : "Material7"
-				}
-			],
-			"children" : [
-				{
-					"id" : "eyes",
-					"translation" : [0.117882,0.679631,0.584643],
-					"rotation" : [0.707107,0.0,0.0,0.707107],
-					"scale" : [1.0,1.0,1.0],
-					"mesh" : "eyes_Mesh",
-					"materials" : [
-						{
-							"meshpartid" : "part0",
-							"materialid" : "Material9"
-						}
-					]
-				}
-			]
-		}
-	],
-	"animations" : [
-		{
-			"id" : "Take 001",
-			"bones" : [
-				
-			]
-		}
-	]
-}
\ No newline at end of file
diff --git a/tests/gdx-tests-android/assets/data/g3d/knight.g3db b/tests/gdx-tests-android/assets/data/g3d/knight.g3db
deleted file mode 100644
index 945419c..0000000
Binary files a/tests/gdx-tests-android/assets/data/g3d/knight.g3db and /dev/null differ
diff --git a/tests/gdx-tests-android/assets/data/g3d/knight.g3dj b/tests/gdx-tests-android/assets/data/g3d/knight.g3dj
deleted file mode 100644
index 4346ba3..0000000
--- a/tests/gdx-tests-android/assets/data/g3d/knight.g3dj
+++ /dev/null
@@ -1,22384 +0,0 @@
-{
-	"version" : "1.0",
-	"meshes" : [
-		{
-			"attributes" : ["POSITION","NORMAL","COLOR","TEXCOORD0","BLENDWEIGHT0","BLENDWEIGHT1","BLENDWEIGHT2","BLENDWEIGHT3"],
-			"vertices" : [
-				7.780247,-2.443885,5.049241,0.808710,-0.352458,0.470870,1.0,1.0,1.0,1.0,0.892092,0.736556,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.102897,-2.842971,0.562458,-0.328684,-0.625599,-0.707480,1.0,1.0,1.0,1.0,0.755976,0.711709,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.780246,-2.443886,0.941631,0.808710,-0.352458,-0.470870,1.0,1.0,1.0,1.0,0.780466,0.736556,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.102897,-2.842970,5.428420,-0.328684,-0.625599,0.707480,1.0,1.0,1.0,1.0,0.914441,0.712182,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.780247,1.322064,4.460328,0.792993,0.238166,0.560686,1.0,1.0,1.0,1.0,0.887330,0.851099,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.102897,1.408538,4.730777,-0.506485,0.329325,0.796838,1.0,1.0,1.0,1.0,0.914441,0.859030,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.780246,1.322064,1.530547,0.792993,0.238166,-0.560686,1.0,1.0,1.0,1.0,0.790594,0.851099,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.102897,1.408538,1.260099,-0.506485,0.329325,-0.796838,1.0,1.0,1.0,1.0,0.765736,0.864085,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.102897,1.408538,4.730777,-0.506485,0.329325,0.796838,1.0,1.0,1.0,1.0,0.739713,0.830900,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.102897,-2.842971,0.562458,-0.328684,-0.625599,-0.707480,1.0,1.0,1.0,1.0,0.593245,0.980206,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.102897,-2.842970,5.428420,-0.328684,-0.625599,0.707480,1.0,1.0,1.0,1.0,0.764177,0.980255,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.102897,1.408538,1.260099,-0.506485,0.329325,-0.796838,1.0,1.0,1.0,1.0,0.617794,0.830865,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.780246,3.075966,2.775565,0.770562,0.553911,-0.315256,1.0,1.0,1.0,1.0,0.835588,0.903522,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.102896,3.388578,2.734969,-0.448683,0.811090,-0.375225,1.0,1.0,1.0,1.0,0.830467,0.931240,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.102897,3.388578,3.255904,-0.448683,0.811090,0.375225,1.0,1.0,1.0,1.0,0.687923,0.761330,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.102896,3.388578,2.734969,-0.448683,0.811090,-0.375225,1.0,1.0,1.0,1.0,0.669624,0.761325,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.102897,3.388578,3.255904,-0.448683,0.811090,0.375225,1.0,1.0,1.0,1.0,0.854612,0.931821,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.780247,3.075966,3.215312,0.770562,0.553911,0.315256,1.0,1.0,1.0,1.0,0.849503,0.903522,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.534397,-0.569904,3.104378,0.175542,-0.758263,0.627827,1.0,1.0,1.0,1.0,0.969148,0.913585,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.258710,-0.434342,2.936214,0.845851,0.088229,-0.526017,1.0,1.0,1.0,1.0,0.976832,0.917791,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.258710,-0.434342,3.104378,0.845851,0.088229,0.526017,1.0,1.0,1.0,1.0,0.976832,0.913585,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.534397,-0.569904,2.936214,0.175542,-0.758263,-0.627827,1.0,1.0,1.0,1.0,0.969148,0.917791,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-8.326837,-0.434342,3.104378,-0.845851,0.088229,0.526017,1.0,1.0,1.0,1.0,0.926407,0.912763,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-8.326837,-0.434342,2.936214,-0.845851,0.088229,-0.526017,1.0,1.0,1.0,1.0,0.926407,0.916969,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-8.051150,-0.569904,3.104378,-0.175542,-0.758263,0.627827,1.0,1.0,1.0,1.0,0.934091,0.912763,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-8.051150,-0.569904,2.936214,-0.175542,-0.758263,-0.627827,1.0,1.0,1.0,1.0,0.934091,0.916969,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.258710,-0.434342,2.936214,0.845851,0.088229,-0.526017,1.0,1.0,1.0,1.0,0.939636,0.924541,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.135038,-0.178734,3.152479,0.407788,0.276925,0.870022,1.0,1.0,1.0,1.0,0.944189,0.943755,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.258710,-0.434342,3.104378,0.845851,0.088229,0.526017,1.0,1.0,1.0,1.0,0.943176,0.924541,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.135038,-0.178734,2.888113,0.407788,0.276925,-0.870022,1.0,1.0,1.0,1.0,0.938624,0.943755,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.450510,-0.178734,3.152479,-0.407788,0.276925,0.870022,1.0,1.0,1.0,1.0,0.960735,0.944263,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-8.326837,-0.434342,2.936214,-0.845851,0.088229,-0.526017,1.0,1.0,1.0,1.0,0.965287,0.925049,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-8.326837,-0.434342,3.104378,-0.845851,0.088229,0.526017,1.0,1.0,1.0,1.0,0.961748,0.925049,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.450510,-0.178734,2.888113,-0.407788,0.276925,-0.870022,1.0,1.0,1.0,1.0,0.966300,0.944263,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.258710,-0.434342,3.104378,0.845851,0.088229,0.526017,1.0,1.0,1.0,1.0,0.850141,0.550845,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.135038,-0.178734,3.152479,0.407788,0.276925,0.870022,1.0,1.0,1.0,1.0,0.878376,0.559039,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.534397,-0.569904,3.104378,0.175542,-0.758263,0.627827,1.0,1.0,1.0,1.0,0.858995,0.546459,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.135038,-0.526999,3.152479,0.237831,-0.283883,0.928861,1.0,1.0,1.0,1.0,0.878375,0.547838,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-8.051150,-0.569904,3.104378,-0.175542,-0.758263,0.627827,1.0,1.0,1.0,1.0,0.907903,0.546455,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.450510,-0.178734,3.152479,-0.407788,0.276925,0.870022,1.0,1.0,1.0,1.0,0.888523,0.559038,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-8.326837,-0.434342,3.104378,-0.845851,0.088229,0.526017,1.0,1.0,1.0,1.0,0.916759,0.550839,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.450510,-0.526999,3.152479,-0.237831,-0.283883,0.928861,1.0,1.0,1.0,1.0,0.888522,0.547836,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.135038,-0.178734,2.888113,0.407788,0.276925,-0.870022,1.0,1.0,1.0,1.0,0.959239,0.559057,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.534397,-0.569904,2.936214,0.175542,-0.758263,-0.627827,1.0,1.0,1.0,1.0,0.978613,0.546479,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.135038,-0.526999,2.888113,0.237831,-0.283883,-0.928861,1.0,1.0,1.0,1.0,0.959239,0.547860,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.258710,-0.434342,2.936214,0.845851,0.088229,-0.526017,1.0,1.0,1.0,1.0,0.987465,0.550862,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-8.051150,-0.569904,2.936214,-0.175542,-0.758263,-0.627827,1.0,1.0,1.0,1.0,0.929723,0.546483,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.450510,-0.178734,2.888113,-0.407788,0.276925,-0.870022,1.0,1.0,1.0,1.0,0.949097,0.559058,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.450510,-0.526999,2.888113,-0.237831,-0.283883,-0.928861,1.0,1.0,1.0,1.0,0.949096,0.547861,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-8.326837,-0.434342,2.936214,-0.845851,0.088229,-0.526017,1.0,1.0,1.0,1.0,0.920872,0.550867,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.135038,-0.526999,2.888113,0.237831,-0.283883,-0.928861,1.0,1.0,1.0,1.0,0.954087,0.918994,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.135038,-0.526999,3.152479,0.237831,-0.283883,0.928861,1.0,1.0,1.0,1.0,0.954087,0.912382,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.450510,-0.526999,2.888113,-0.237831,-0.283883,-0.928861,1.0,1.0,1.0,1.0,0.949152,0.918172,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.450510,-0.526999,3.152479,-0.237831,-0.283883,0.928861,1.0,1.0,1.0,1.0,0.949152,0.911560,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.135038,1.310306,3.157940,0.577136,0.576373,0.578478,1.0,1.0,1.0,1.0,0.944304,0.975098,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.135038,1.310306,2.882652,0.577136,0.576373,-0.578478,1.0,1.0,1.0,1.0,0.938509,0.975098,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.450510,1.310306,3.157940,-0.577136,0.576373,0.578478,1.0,1.0,1.0,1.0,0.960620,0.975606,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.450510,1.310306,2.882652,-0.577136,0.576373,-0.578478,1.0,1.0,1.0,1.0,0.966415,0.975606,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.450510,1.310306,2.882652,-0.577136,0.576373,-0.578478,1.0,1.0,1.0,1.0,0.949097,0.606932,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.135038,1.310306,2.882652,0.577136,0.576373,-0.578478,1.0,1.0,1.0,1.0,0.959239,0.606932,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.450510,1.310306,3.157940,-0.577136,0.576373,0.578478,1.0,1.0,1.0,1.0,0.956695,0.959268,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.135038,1.310306,3.157940,0.577136,0.576373,0.578478,1.0,1.0,1.0,1.0,0.956695,0.951097,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.135038,1.310306,2.882652,0.577136,0.576373,-0.578478,1.0,1.0,1.0,1.0,0.949565,0.951097,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.450510,1.310306,2.882652,-0.577136,0.576373,-0.578478,1.0,1.0,1.0,1.0,0.949565,0.959268,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.450510,1.310306,3.157940,-0.577136,0.576373,0.578478,1.0,1.0,1.0,1.0,0.888523,0.606932,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.135038,1.310306,3.157940,0.577136,0.576373,0.578478,1.0,1.0,1.0,1.0,0.878376,0.606932,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.586014,-0.957994,2.983818,-0.755974,0.061434,-0.651662,1.0,1.0,1.0,1.0,0.944737,0.533666,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.999534,-0.957994,2.983818,0.755974,0.061464,-0.651662,1.0,1.0,1.0,1.0,0.963594,0.533664,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.586014,-0.957994,3.056774,-0.756005,0.061434,0.651662,1.0,1.0,1.0,1.0,0.892877,0.533635,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.999534,-0.957994,3.056774,0.755974,0.061464,0.651662,1.0,1.0,1.0,1.0,0.874014,0.533639,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.450510,-0.526999,2.888113,-0.237831,-0.283883,-0.928861,1.0,1.0,1.0,1.0,0.972819,0.899237,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.586014,-0.957994,3.056774,-0.756005,0.061434,0.651662,1.0,1.0,1.0,1.0,0.958876,0.826088,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.450510,-0.526999,3.152479,-0.237831,-0.283883,0.928861,1.0,1.0,1.0,1.0,0.950965,0.899237,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.586014,-0.957994,2.983818,-0.755974,0.061434,-0.651662,1.0,1.0,1.0,1.0,0.964907,0.826088,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.999534,-0.957994,3.056774,0.755974,0.061464,0.651662,1.0,1.0,1.0,1.0,0.943045,0.826013,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.135038,-0.526999,2.888113,0.237831,-0.283883,-0.928861,1.0,1.0,1.0,1.0,0.929088,0.899237,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.135038,-0.526999,3.152479,0.237831,-0.283883,0.928861,1.0,1.0,1.0,1.0,0.950965,0.899237,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.999534,-0.957994,2.983818,0.755974,0.061464,-0.651662,1.0,1.0,1.0,1.0,0.937008,0.826013,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.613854,-7.277912,2.979520,-0.725516,-0.069063,-0.684713,1.0,1.0,1.0,1.0,0.949596,0.389877,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.971387,-7.277912,2.979520,0.725913,-0.071444,-0.684011,1.0,1.0,1.0,1.0,0.968453,0.389874,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.613855,-7.277912,3.061071,-0.720664,-0.080630,0.688528,1.0,1.0,1.0,1.0,0.888582,0.389921,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.971387,-7.277912,3.061071,0.721061,-0.082949,0.687857,1.0,1.0,1.0,1.0,0.869719,0.389925,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.613855,-7.277912,3.061071,-0.720664,-0.080630,0.688528,1.0,1.0,1.0,1.0,0.955889,0.735978,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.613854,-7.277912,2.979520,-0.725516,-0.069063,-0.684713,1.0,1.0,1.0,1.0,0.961920,0.735979,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.971387,-7.277912,3.061071,0.721061,-0.082949,0.687857,1.0,1.0,1.0,1.0,0.940057,0.735811,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.971387,-7.277912,2.979520,0.725913,-0.071444,-0.684011,1.0,1.0,1.0,1.0,0.934020,0.735810,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.297890,-8.850784,2.973040,-0.002686,-0.840602,-0.541612,1.0,1.0,1.0,1.0,0.958864,0.343711,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.297890,-8.850784,3.003987,-0.002716,-0.852901,0.521989,1.0,1.0,1.0,1.0,0.879296,0.343712,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.297890,-8.850784,2.973040,-0.002686,-0.840602,-0.541612,1.0,1.0,1.0,1.0,0.932352,0.644949,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.297890,-8.850784,3.003987,-0.002716,-0.852901,0.521989,1.0,1.0,1.0,1.0,0.938423,0.645290,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.297890,-8.850784,3.003987,-0.002716,-0.852901,0.521989,1.0,1.0,1.0,1.0,0.959088,0.645868,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.297890,-8.850784,2.973040,-0.002686,-0.840602,-0.541612,1.0,1.0,1.0,1.0,0.965098,0.645324,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.811381,-0.734646,5.437089,-0.861232,-0.377270,0.340465,1.0,1.0,1.0,1.0,0.522882,0.045198,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.842266,0.526357,5.252534,-0.883145,0.464919,0.062197,1.0,1.0,1.0,1.0,0.504548,0.096797,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.649527,-0.110385,4.636336,-0.973632,-0.093265,-0.208136,1.0,1.0,1.0,1.0,0.545458,0.097080,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.747540,0.517010,4.577604,-0.882992,0.447096,-0.142735,1.0,1.0,1.0,1.0,0.520684,0.123701,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.811381,-0.734646,5.437089,0.861232,-0.377270,0.340465,1.0,1.0,1.0,1.0,0.428183,0.044943,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.649527,-0.110385,4.636336,0.973632,-0.093265,-0.208136,1.0,1.0,1.0,1.0,0.405329,0.096703,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.842266,0.526357,5.252534,0.883145,0.464919,0.062197,1.0,1.0,1.0,1.0,0.446240,0.096641,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.747540,0.517010,4.577604,0.882992,0.447096,-0.142735,1.0,1.0,1.0,1.0,0.429959,0.123458,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,0.964493,5.162548,0.0,0.995392,0.095645,1.0,1.0,1.0,1.0,0.475353,0.112054,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.360770,0.821639,4.583570,-0.466353,0.884304,-0.021821,1.0,1.0,1.0,1.0,0.496060,0.134734,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.360770,0.821639,5.261808,-0.503861,0.853847,0.130497,1.0,1.0,1.0,1.0,0.487666,0.106561,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,0.964493,4.520504,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.475278,0.140049,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.360770,0.821639,5.261808,0.503861,0.853847,0.130497,1.0,1.0,1.0,1.0,0.463070,0.106495,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.360770,0.821639,4.583570,0.466353,0.884304,-0.021821,1.0,1.0,1.0,1.0,0.454525,0.134623,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.680205,-0.148872,5.934727,-0.772454,-0.096408,0.627674,1.0,1.0,1.0,1.0,0.495830,0.070984,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.768623,0.369033,5.793466,-0.786981,0.383435,0.483291,1.0,1.0,1.0,1.0,0.493920,0.084821,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.680205,-0.148872,5.934727,0.772454,-0.096408,0.627674,1.0,1.0,1.0,1.0,0.455097,0.070875,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.768623,0.369033,5.793466,0.786981,0.383435,0.483291,1.0,1.0,1.0,1.0,0.456932,0.084722,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,-1.105175,5.431196,0.0,-0.922758,0.385327,1.0,1.0,1.0,1.0,0.475602,0.019624,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,-0.944358,6.205902,0.0,-0.741264,0.671163,1.0,1.0,1.0,1.0,0.475522,0.049242,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.140425,-0.776397,5.998538,-0.666646,-0.537187,0.516678,1.0,1.0,1.0,1.0,0.485352,0.050457,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.140425,-0.776397,5.998538,0.666646,-0.537187,0.516678,1.0,1.0,1.0,1.0,0.465685,0.050404,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.144313,0.650225,6.034978,-0.644917,0.564745,0.514878,1.0,1.0,1.0,1.0,0.482249,0.086539,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,0.829596,6.165315,0.0,0.800836,0.598834,1.0,1.0,1.0,1.0,0.475416,0.088405,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.144313,0.650225,6.034978,0.644917,0.564745,0.514878,1.0,1.0,1.0,1.0,0.468594,0.086503,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.131889,-0.056343,6.344582,-0.733696,0.019959,0.679128,1.0,1.0,1.0,1.0,0.482131,0.071249,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,-0.151380,6.522300,0.0,-0.091525,0.995788,1.0,1.0,1.0,1.0,0.475468,0.069030,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.131889,-0.056343,6.344582,0.733696,0.019959,0.679128,1.0,1.0,1.0,1.0,0.468794,0.071213,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.007444,-1.173511,5.416156,-0.008240,-0.998535,0.053224,1.0,1.0,1.0,1.0,0.475446,0.158065,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.744210,-0.649781,5.008410,-0.887906,-0.460005,0.001556,1.0,1.0,1.0,1.0,0.430536,0.177379,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.007444,-1.308848,4.474470,0.004913,-0.998535,0.053377,1.0,1.0,1.0,1.0,0.474100,0.204697,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.768680,-0.694131,5.434341,-0.905057,-0.425245,-0.001465,1.0,1.0,1.0,1.0,0.433752,0.157130,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.744210,-0.649781,5.008410,0.886715,-0.462172,0.009857,1.0,1.0,1.0,1.0,0.519167,0.179939,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.768680,-0.694131,5.434341,0.904324,-0.426771,0.006226,1.0,1.0,1.0,1.0,0.517125,0.159538,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.686595,0.155676,5.435081,-0.994781,0.093142,-0.041536,1.0,1.0,1.0,1.0,0.388531,0.161032,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.673588,0.136878,5.020886,-0.994781,0.093142,-0.041536,1.0,1.0,1.0,1.0,0.391057,0.180223,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.686595,0.155676,5.435081,0.994781,0.093142,-0.041536,1.0,1.0,1.0,1.0,0.562046,0.166044,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.673588,0.136878,5.020886,0.994781,0.093142,-0.041536,1.0,1.0,1.0,1.0,0.558416,0.185057,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.087199,-0.199928,4.125835,0.590381,-0.633564,0.499985,1.0,1.0,1.0,1.0,0.725814,0.143708,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.632094,1.012884,4.086104,0.381146,0.163030,0.910001,1.0,1.0,1.0,1.0,0.747486,0.075059,3.000000,0.954128,2.000000,0.045089,4.000000,0.000783,0.0,0.0,
-				0.803840,0.842000,4.621322,0.318918,0.720420,0.615833,1.0,1.0,1.0,1.0,0.698864,0.090486,3.000000,0.500954,2.000000,0.499046,0.0,0.0,0.0,0.0,
-				2.041106,0.061907,3.913231,0.452071,-0.408673,0.792810,1.0,1.0,1.0,1.0,0.775186,0.125241,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.632094,1.012884,4.086104,-0.381146,0.163030,0.910001,1.0,1.0,1.0,1.0,0.584266,0.074679,3.000000,0.954128,2.000000,0.045089,5.000000,0.000783,0.0,0.0,
-				-1.087199,-0.199928,4.125835,-0.584918,-0.628925,0.512162,1.0,1.0,1.0,1.0,0.607201,0.142847,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.803840,0.842000,4.621322,-0.318918,0.720420,0.615833,1.0,1.0,1.0,1.0,0.631738,0.089374,3.000000,0.500954,2.000000,0.499046,0.0,0.0,0.0,0.0,
-				-2.041106,0.061907,3.913231,-0.452071,-0.408673,0.792810,1.0,1.0,1.0,1.0,0.557779,0.124181,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,1.003260,4.601033,0.0,0.907468,0.420087,1.0,1.0,1.0,1.0,0.665111,0.078914,3.000000,0.501510,2.000000,0.498490,0.0,0.0,0.0,0.0,
-				0.0,1.845847,3.787381,0.0,0.733207,0.679983,1.0,1.0,1.0,1.0,0.665419,0.025548,3.000000,0.999975,2.000000,0.000025,0.0,0.0,0.0,0.0,
-				1.046540,-0.658007,4.712276,0.711112,-0.631001,-0.310007,1.0,1.0,1.0,1.0,0.688215,0.147987,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.018237,-1.589355,4.501781,-0.000702,-0.913083,-0.407697,1.0,1.0,1.0,1.0,0.667335,0.162028,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,-1.319969,3.659079,-0.006317,-0.967528,0.252663,1.0,1.0,1.0,1.0,0.666478,0.203896,3.000000,0.999528,6.000000,0.000472,0.0,0.0,0.0,0.0,
-				-0.991072,-0.642274,4.734879,-0.720603,-0.643269,-0.258614,1.0,1.0,1.0,1.0,0.645463,0.145527,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,-2.086291,2.291193,0.0,-0.828089,0.560564,1.0,1.0,1.0,1.0,0.666192,0.283972,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,0.995541,5.288074,0.0,0.997070,0.076266,1.0,1.0,1.0,1.0,0.664776,0.097843,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.940291,0.730444,5.039442,0.245918,0.966460,0.073916,1.0,1.0,1.0,1.0,0.688089,0.105502,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.940291,0.730444,5.039442,-0.245918,0.966460,0.073916,1.0,1.0,1.0,1.0,0.642174,0.104080,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.717252,0.065215,2.745014,0.968413,-0.245033,-0.045961,1.0,1.0,1.0,1.0,0.269718,0.774958,7.000000,0.543479,4.000000,0.456521,0.0,0.0,0.0,0.0,
-				1.807569,1.398654,2.444980,0.733665,0.676443,0.064241,1.0,1.0,1.0,1.0,0.290744,0.779553,4.000000,0.505269,7.000000,0.494731,0.0,0.0,0.0,0.0,
-				1.717252,1.306310,2.561071,0.998047,0.048311,-0.038942,1.0,1.0,1.0,1.0,0.283670,0.775297,4.000000,0.518099,7.000000,0.481901,0.0,0.0,0.0,0.0,
-				1.768749,-0.338260,2.642551,0.914609,-0.402478,0.038301,1.0,1.0,1.0,1.0,0.262587,0.781842,4.000000,0.500495,7.000000,0.499505,0.0,0.0,0.0,0.0,
-				-1.807569,1.398654,2.444980,-0.733665,0.676443,0.064241,1.0,1.0,1.0,1.0,0.096438,0.778436,5.000000,0.505269,7.000000,0.494731,0.0,0.0,0.0,0.0,
-				-1.717252,0.065215,2.745014,-0.968963,-0.242561,-0.047273,1.0,1.0,1.0,1.0,0.117515,0.774083,7.000000,0.543479,5.000000,0.456521,0.0,0.0,0.0,0.0,
-				-1.717252,1.306310,2.561071,-0.998047,0.048311,-0.038942,1.0,1.0,1.0,1.0,0.103561,0.774262,5.000000,0.518099,7.000000,0.481901,0.0,0.0,0.0,0.0,
-				-1.768749,-0.338260,2.642551,-0.916349,-0.398267,0.040620,1.0,1.0,1.0,1.0,0.124567,0.781048,5.000000,0.500495,7.000000,0.499505,0.0,0.0,0.0,0.0,
-				1.795694,0.050526,3.934378,0.796899,-0.353893,0.489578,1.0,1.0,1.0,1.0,0.267327,0.757102,4.000000,0.518396,3.000000,0.481605,0.0,0.0,0.0,0.0,
-				1.717252,0.102898,3.669184,0.940733,-0.282723,0.187262,1.0,1.0,1.0,1.0,0.270473,0.763736,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.795694,0.050526,3.873627,-0.819758,-0.351390,0.452223,1.0,1.0,1.0,1.0,0.120112,0.756256,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.717252,0.102898,3.669184,-0.944273,-0.282754,0.168340,1.0,1.0,1.0,1.0,0.116890,0.762853,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.726064,0.907587,3.825177,0.968017,0.116855,0.221900,1.0,1.0,1.0,1.0,0.279761,0.761301,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.794577,1.126924,4.016660,0.636799,0.518204,0.570910,1.0,1.0,1.0,1.0,0.283444,0.756246,3.000000,0.522995,4.000000,0.471712,2.000000,0.005293,0.0,0.0,
-				-1.726064,0.907587,3.825177,-0.972076,0.129826,0.195349,1.0,1.0,1.0,1.0,0.107631,0.760312,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.794577,1.126924,4.016660,-0.643422,0.511979,0.569048,1.0,1.0,1.0,1.0,0.104005,0.755214,3.000000,0.522995,5.000000,0.471712,2.000000,0.005293,0.0,0.0,
-				1.717252,0.065215,2.745014,0.968413,-0.245033,-0.045961,1.0,1.0,1.0,1.0,0.678336,0.381995,7.000000,0.543479,4.000000,0.456521,0.0,0.0,0.0,0.0,
-				2.698496,1.209727,2.650529,0.118748,0.752800,-0.647420,1.0,1.0,1.0,1.0,0.711353,0.420037,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				2.713140,0.135168,2.809789,0.120670,-0.757500,-0.641560,1.0,1.0,1.0,1.0,0.711395,0.384027,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.717252,1.306310,2.561071,0.998047,0.048311,-0.038942,1.0,1.0,1.0,1.0,0.678336,0.423386,4.000000,0.518099,7.000000,0.481901,0.0,0.0,0.0,0.0,
-				-2.698496,1.209727,2.650529,-0.118748,0.752800,-0.647420,1.0,1.0,1.0,1.0,0.794796,0.568221,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.717252,0.065215,2.745014,-0.968963,-0.242561,-0.047273,1.0,1.0,1.0,1.0,0.829877,0.527803,7.000000,0.543479,5.000000,0.456521,0.0,0.0,0.0,0.0,
-				-2.713140,0.135168,2.809789,-0.120670,-0.757500,-0.641560,1.0,1.0,1.0,1.0,0.794752,0.529961,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.717252,1.306310,2.561071,-0.998047,0.048311,-0.038942,1.0,1.0,1.0,1.0,0.829877,0.571779,5.000000,0.518099,7.000000,0.481901,0.0,0.0,0.0,0.0,
-				1.717252,0.102898,3.669184,0.940733,-0.282723,0.187262,1.0,1.0,1.0,1.0,0.682313,0.351325,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				2.737225,0.167795,3.721513,0.118442,-0.756890,0.642689,1.0,1.0,1.0,1.0,0.715765,0.354561,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-2.737225,0.167795,3.721513,-0.118442,-0.756890,0.642689,1.0,1.0,1.0,1.0,0.790109,0.498654,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.717252,0.102898,3.669184,-0.944273,-0.282754,0.168340,1.0,1.0,1.0,1.0,0.825651,0.495216,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.726064,0.907587,3.825177,0.968017,0.116855,0.221900,1.0,1.0,1.0,1.0,0.687500,0.466462,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				2.636451,0.833448,3.952285,0.069460,0.432875,0.898770,1.0,1.0,1.0,1.0,0.718017,0.465222,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.726064,0.907587,3.825177,-0.972076,0.129826,0.195349,1.0,1.0,1.0,1.0,0.820139,0.617547,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-2.636451,0.833448,3.952285,-0.069460,0.432875,0.898770,1.0,1.0,1.0,1.0,0.787715,0.616229,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				2.636451,0.833448,3.952285,0.069460,0.432875,0.898770,1.0,1.0,1.0,1.0,0.717365,0.331010,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.726064,0.907587,3.825177,0.968017,0.116855,0.221900,1.0,1.0,1.0,1.0,0.687176,0.324262,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-2.636451,0.833448,3.952285,-0.069460,0.432875,0.898770,1.0,1.0,1.0,1.0,0.788409,0.473631,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.726064,0.907587,3.825177,-0.972076,0.129826,0.195349,1.0,1.0,1.0,1.0,0.820485,0.466462,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.290495,0.932505,-0.393971,0.435591,0.698874,-0.567248,1.0,1.0,1.0,1.0,0.313767,0.869883,0.0,0.327859,1.0,0.326752,2.000000,0.186288,3.000000,0.159101,
-				0.0,1.894466,2.322657,0.0,0.997772,0.066652,1.0,1.0,1.0,1.0,0.358072,0.768970,3.000000,0.405280,4.000000,0.396193,2.000000,0.198526,0.0,0.0,
-				1.804389,1.524570,1.939726,0.757347,0.639515,-0.131962,1.0,1.0,1.0,1.0,0.299334,0.786421,3.000000,0.412780,4.000000,0.408320,2.000000,0.178901,0.0,0.0,
-				0.0,1.169493,-0.450939,0.0,0.877041,-0.480361,1.0,1.0,1.0,1.0,0.357934,0.869774,0.0,0.380727,2.000000,0.243874,3.000000,0.189154,5.000000,0.186246,
-				0.0,1.894466,2.322657,0.0,0.997772,0.066652,1.0,1.0,1.0,1.0,0.029237,0.767079,3.000000,0.405280,4.000000,0.396193,2.000000,0.198526,0.0,0.0,
-				-1.290495,0.932505,-0.393971,-0.435591,0.698874,-0.567248,1.0,1.0,1.0,1.0,0.072378,0.868494,0.0,0.327859,5.000000,0.326752,2.000000,0.186288,3.000000,0.159101,
-				-1.804389,1.524570,1.939726,-0.757347,0.639515,-0.131962,1.0,1.0,1.0,1.0,0.087770,0.785205,3.000000,0.412780,4.000000,0.408320,2.000000,0.178901,0.0,0.0,
-				0.0,1.169493,-0.450939,0.0,0.877041,-0.480361,1.0,1.0,1.0,1.0,0.028216,0.867877,0.0,0.380727,2.000000,0.243874,3.000000,0.189154,5.000000,0.186246,
-				1.272821,-1.082433,2.166444,0.674306,-0.726463,0.132298,1.0,1.0,1.0,1.0,0.233241,0.800910,3.000000,0.417834,4.000000,0.416791,2.000000,0.165375,0.0,0.0,
-				1.533865,-1.197465,-0.589721,0.594592,-0.714774,-0.368114,1.0,1.0,1.0,1.0,0.244223,0.893497,0.0,0.330674,1.0,0.323217,2.000000,0.181705,3.000000,0.164405,
-				-1.272821,-1.082433,2.166444,-0.675924,-0.724845,0.132878,1.0,1.0,1.0,1.0,0.153691,0.800452,3.000000,0.417834,4.000000,0.416791,2.000000,0.165375,0.0,0.0,
-				-1.533865,-1.197465,-0.589721,-0.594592,-0.714774,-0.368114,1.0,1.0,1.0,1.0,0.140863,0.891344,0.0,0.330674,5.000000,0.323217,2.000000,0.181705,3.000000,0.164405,
-				0.0,-1.494537,-0.874365,0.0,-0.888913,-0.458052,1.0,1.0,1.0,1.0,0.192862,0.904430,5.000000,0.284208,1.0,0.284208,0.0,0.283886,2.000000,0.147697,
-				0.0,-1.466883,2.386850,0.0,-0.963530,0.267556,1.0,1.0,1.0,1.0,0.193453,0.803013,3.000000,0.414757,4.000000,0.401419,2.000000,0.183824,0.0,0.0,
-				0.0,1.169493,-0.450939,0.0,0.877041,-0.480361,1.0,1.0,1.0,1.0,0.571753,0.972398,0.0,0.380727,2.000000,0.243874,3.000000,0.189154,5.000000,0.186246,
-				1.110468,0.759973,-0.167663,0.023743,0.075045,-0.996887,1.0,1.0,1.0,1.0,0.567879,0.917136,0.0,0.330388,1.0,0.323922,3.000000,0.182090,2.000000,0.163599,
-				0.0,0.869638,-0.119901,0.0,0.338969,-0.940764,1.0,1.0,1.0,1.0,0.552584,0.965621,0.0,0.542071,2.000000,0.457727,6.000000,0.000202,0.0,0.0,
-				1.290495,0.932505,-0.393971,0.435591,0.698874,-0.567248,1.0,1.0,1.0,1.0,0.581933,0.916135,0.0,0.327859,1.0,0.326752,2.000000,0.186288,3.000000,0.159101,
-				-1.110468,0.759973,-0.167663,-0.023743,0.075045,-0.996887,1.0,1.0,1.0,1.0,0.399248,0.932121,0.0,0.330388,5.000000,0.323922,3.000000,0.182090,2.000000,0.163599,
-				0.0,1.169493,-0.450939,0.0,0.877041,-0.480361,1.0,1.0,1.0,1.0,0.413037,0.972842,0.0,0.380727,2.000000,0.243874,3.000000,0.189154,5.000000,0.186246,
-				0.0,0.869638,-0.119901,0.0,0.338969,-0.940764,1.0,1.0,1.0,1.0,0.424729,0.962245,0.0,0.542071,2.000000,0.457727,6.000000,0.000202,0.0,0.0,
-				-1.290495,0.932505,-0.393971,-0.435591,0.698874,-0.567248,1.0,1.0,1.0,1.0,0.388887,0.935617,0.0,0.327859,5.000000,0.326752,2.000000,0.186288,3.000000,0.159101,
-				1.533865,-1.197465,-0.589721,0.594592,-0.714774,-0.368114,1.0,1.0,1.0,1.0,0.535240,0.830043,0.0,0.330674,1.0,0.323217,2.000000,0.181705,3.000000,0.164405,
-				1.383637,-0.694774,-0.371825,-0.054598,-0.172704,-0.983428,1.0,1.0,1.0,1.0,0.538229,0.855923,0.0,0.405650,1.0,0.401979,3.000000,0.170888,2.000000,0.021484,
-				-1.533865,-1.197465,-0.589721,-0.594592,-0.714774,-0.368114,1.0,1.0,1.0,1.0,0.396267,0.854032,0.0,0.330674,5.000000,0.323217,2.000000,0.181705,3.000000,0.164405,
-				-1.383637,-0.694774,-0.371825,0.054598,-0.172704,-0.983428,1.0,1.0,1.0,1.0,0.402127,0.879415,0.0,0.405650,5.000000,0.401979,3.000000,0.170888,2.000000,0.021484,
-				0.693888,-1.067332,-0.659909,0.294290,-0.497208,-0.816157,1.0,1.0,1.0,1.0,0.500917,0.843626,0.0,0.400902,1.0,0.399670,3.000000,0.198713,2.000000,0.000714,
-				-0.693888,-1.067332,-0.659909,-0.294290,-0.497208,-0.816157,1.0,1.0,1.0,1.0,0.433156,0.855322,0.0,0.400902,5.000000,0.399670,3.000000,0.198713,2.000000,0.000714,
-				0.0,-1.494537,-0.874365,0.0,-0.888913,-0.458052,1.0,1.0,1.0,1.0,0.463682,0.830043,5.000000,0.284208,1.0,0.284208,0.0,0.283886,2.000000,0.147697,
-				0.0,-1.286986,-0.881864,0.0,-0.467971,-0.883724,1.0,1.0,1.0,1.0,0.465344,0.839670,0.0,0.279925,5.000000,0.279159,1.0,0.279159,3.000000,0.161756,
-				1.359760,1.115290,-1.825971,0.180914,0.973388,0.140538,1.0,1.0,1.0,1.0,0.312989,0.920837,1.0,0.497311,0.0,0.497068,5.000000,0.005621,0.0,0.0,
-				0.0,1.512729,-2.751259,0.0,0.989715,0.142888,1.0,1.0,1.0,1.0,0.364082,0.951325,0.0,0.490880,5.000000,0.254560,1.0,0.254560,0.0,0.0,
-				-1.359760,1.115290,-1.825971,-0.180914,0.973388,0.140538,1.0,1.0,1.0,1.0,0.072570,0.919453,5.000000,0.497311,0.0,0.497068,1.0,0.005621,0.0,0.0,
-				0.0,1.512729,-2.751259,0.0,0.989715,0.142888,1.0,1.0,1.0,1.0,0.021131,0.949350,0.0,0.490880,5.000000,0.254560,1.0,0.254560,0.0,0.0,
-				0.739098,-1.641185,-2.003711,0.366649,-0.924741,0.101901,1.0,1.0,1.0,1.0,0.224968,0.947458,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.809182,-1.032072,-1.656006,0.378704,-0.920408,0.096927,1.0,1.0,1.0,1.0,0.260487,0.929066,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.739098,-1.641185,-2.003711,-0.366649,-0.924741,0.101901,1.0,1.0,1.0,1.0,0.160314,0.947042,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.809182,-1.032072,-1.656006,-0.378704,-0.920408,0.096927,1.0,1.0,1.0,1.0,0.124191,0.926723,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.293369,-0.379412,3.368744,0.822657,-0.394910,0.408918,1.0,1.0,1.0,1.0,0.597883,0.322722,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.152060,-0.430312,3.400194,-0.100955,-0.815668,0.569628,1.0,1.0,1.0,1.0,0.592000,0.321403,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.142865,-0.427692,3.311687,-0.276589,-0.835139,-0.475417,1.0,1.0,1.0,1.0,0.591645,0.324883,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.285872,-0.379938,3.286720,0.672445,-0.430494,-0.602039,1.0,1.0,1.0,1.0,0.597555,0.325940,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.285872,-0.379938,3.286720,-0.672445,-0.430494,-0.602039,1.0,1.0,1.0,1.0,0.556309,0.300696,9.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.142865,-0.427692,3.311687,0.276589,-0.835139,-0.475417,1.0,1.0,1.0,1.0,0.562129,0.299219,9.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.293369,-0.379412,3.368744,-0.822657,-0.394910,0.408918,1.0,1.0,1.0,1.0,0.555752,0.297507,9.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.152060,-0.430312,3.400194,0.100955,-0.815668,0.569628,1.0,1.0,1.0,1.0,0.561527,0.295774,9.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				6.786098,-0.046758,3.285851,-0.195563,-0.635029,-0.747307,1.0,1.0,1.0,1.0,0.571123,0.325702,0.0,0.389662,1.0,0.305169,2.000000,0.305169,0.0,0.0,
-				7.152060,-0.430312,3.400194,-0.100955,-0.815668,0.569628,1.0,1.0,1.0,1.0,0.592000,0.321403,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				6.810365,-0.055862,3.522027,-0.087436,-0.595691,0.798425,1.0,1.0,1.0,1.0,0.572125,0.316417,0.0,0.428571,1.0,0.285714,2.000000,0.285714,0.0,0.0,
-				7.142865,-0.427692,3.311687,-0.276589,-0.835139,-0.475417,1.0,1.0,1.0,1.0,0.591645,0.324883,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.152060,-0.430312,3.400194,0.100955,-0.815668,0.569628,1.0,1.0,1.0,1.0,0.561527,0.295774,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.786098,-0.046758,3.285851,0.195563,-0.635029,-0.747307,1.0,1.0,1.0,1.0,0.582648,0.298574,3.000000,0.389662,4.000000,0.305169,5.000000,0.305169,0.0,0.0,
-				-6.810365,-0.055862,3.522027,0.087436,-0.595691,0.798425,1.0,1.0,1.0,1.0,0.580988,0.289389,3.000000,0.428571,4.000000,0.285714,5.000000,0.285714,0.0,0.0,
-				-7.142865,-0.427692,3.311687,0.276589,-0.835139,-0.475417,1.0,1.0,1.0,1.0,0.562129,0.299219,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				6.810365,-0.055862,3.522027,-0.087436,-0.595691,0.798425,1.0,1.0,1.0,1.0,0.368050,0.333613,0.0,0.428571,1.0,0.285714,2.000000,0.285714,0.0,0.0,
-				7.152060,-0.430312,3.400194,-0.100955,-0.815668,0.569628,1.0,1.0,1.0,1.0,0.386799,0.316491,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.205994,-0.109209,3.430530,0.400739,-0.257271,0.879299,1.0,1.0,1.0,1.0,0.371086,0.313900,0.0,0.412159,2.000000,0.293920,6.000000,0.293920,0.0,0.0,
-				7.293369,-0.379412,3.368744,0.822657,-0.394910,0.408918,1.0,1.0,1.0,1.0,0.384498,0.309381,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.810365,-0.055862,3.522027,0.087436,-0.595691,0.798425,1.0,1.0,1.0,1.0,0.287366,0.333614,3.000000,0.428571,4.000000,0.285714,5.000000,0.285714,0.0,0.0,
-				-7.205994,-0.109209,3.430530,-0.400739,-0.257271,0.879299,1.0,1.0,1.0,1.0,0.284642,0.313855,3.000000,0.412159,5.000000,0.293920,7.000000,0.293920,0.0,0.0,
-				-7.152060,-0.430312,3.400194,0.100955,-0.815668,0.569628,1.0,1.0,1.0,1.0,0.268890,0.316199,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.293369,-0.379412,3.368744,-0.822657,-0.394910,0.408918,1.0,1.0,1.0,1.0,0.271303,0.309125,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.142865,-0.427692,3.311687,-0.276589,-0.835139,-0.475417,1.0,1.0,1.0,1.0,0.395952,0.317536,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.182359,-0.109032,3.211969,0.027680,-0.341105,-0.939604,1.0,1.0,1.0,1.0,0.411955,0.315753,0.0,0.334555,2.000000,0.332723,6.000000,0.332723,0.0,0.0,
-				7.285872,-0.379938,3.286720,0.672445,-0.430494,-0.602039,1.0,1.0,1.0,1.0,0.398536,0.310689,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				6.786098,-0.046758,3.285851,-0.195563,-0.635029,-0.747307,1.0,1.0,1.0,1.0,0.413668,0.335209,0.0,0.389662,1.0,0.305169,2.000000,0.305169,0.0,0.0,
-				-7.182359,-0.109032,3.211969,-0.027680,-0.341105,-0.939604,1.0,1.0,1.0,1.0,0.496279,0.309804,3.000000,0.334555,5.000000,0.332723,7.000000,0.332723,0.0,0.0,
-				-7.142865,-0.427692,3.311687,0.276589,-0.835139,-0.475417,1.0,1.0,1.0,1.0,0.512376,0.310186,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.285872,-0.379938,3.286720,-0.672445,-0.430494,-0.602039,1.0,1.0,1.0,1.0,0.509205,0.303591,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-6.786098,-0.046758,3.285851,0.195563,-0.635029,-0.747307,1.0,1.0,1.0,1.0,0.496268,0.329336,3.000000,0.389662,4.000000,0.305169,5.000000,0.305169,0.0,0.0,
-				7.205994,-0.109209,3.430530,0.400739,-0.257271,0.879299,1.0,1.0,1.0,1.0,0.609247,0.321696,0.0,0.412159,2.000000,0.293920,6.000000,0.293920,0.0,0.0,
-				7.285872,-0.379938,3.286720,0.672445,-0.430494,-0.602039,1.0,1.0,1.0,1.0,0.597555,0.325940,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.182359,-0.109032,3.211969,0.027680,-0.341105,-0.939604,1.0,1.0,1.0,1.0,0.608479,0.330293,0.0,0.334555,2.000000,0.332723,6.000000,0.332723,0.0,0.0,
-				7.293369,-0.379412,3.368744,0.822657,-0.394910,0.408918,1.0,1.0,1.0,1.0,0.597883,0.322722,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.205994,-0.109209,3.430530,-0.400739,-0.257271,0.879299,1.0,1.0,1.0,1.0,0.544331,0.297295,3.000000,0.412159,5.000000,0.293920,7.000000,0.293920,0.0,0.0,
-				-7.285872,-0.379938,3.286720,-0.672445,-0.430494,-0.602039,1.0,1.0,1.0,1.0,0.556309,0.300696,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.293369,-0.379412,3.368744,-0.822657,-0.394910,0.408918,1.0,1.0,1.0,1.0,0.555752,0.297507,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.182359,-0.109032,3.211969,-0.027680,-0.341105,-0.939604,1.0,1.0,1.0,1.0,0.545713,0.305824,3.000000,0.334555,5.000000,0.332723,7.000000,0.332723,0.0,0.0,
-				7.731236,-0.171306,3.138086,0.486465,-0.667867,-0.563250,1.0,1.0,1.0,1.0,0.410659,0.289095,6.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.235833,0.627632,3.176165,-0.108524,0.791101,-0.601947,1.0,1.0,1.0,1.0,0.447362,0.315226,2.000000,0.512647,6.000000,0.487353,0.0,0.0,0.0,0.0,
-				7.787398,0.632349,3.090359,0.567431,0.600604,-0.563250,1.0,1.0,1.0,1.0,0.449303,0.288565,6.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.731236,-0.171306,3.138086,-0.486465,-0.667867,-0.563250,1.0,1.0,1.0,1.0,0.495246,0.283136,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.235833,0.627632,3.176165,0.108524,0.791101,-0.601947,1.0,1.0,1.0,1.0,0.460961,0.312366,5.000000,0.512647,7.000000,0.487353,0.0,0.0,0.0,0.0,
-				-7.787398,0.632349,3.090359,-0.567431,0.600604,-0.563250,1.0,1.0,1.0,1.0,0.456704,0.285976,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				6.836884,0.622914,3.261971,0.142888,0.826716,-0.544145,1.0,1.0,1.0,1.0,0.445846,0.334711,1.0,0.500000,2.000000,0.500000,0.0,0.0,0.0,0.0,
-				-6.836884,0.622914,3.261971,-0.142888,0.826716,-0.544145,1.0,1.0,1.0,1.0,0.464169,0.331644,4.000000,0.500000,5.000000,0.500000,0.0,0.0,0.0,0.0,
-				7.754238,-0.162556,3.339033,0.598163,-0.590533,0.541673,1.0,1.0,1.0,1.0,0.630936,0.324895,6.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.731236,-0.171306,3.138086,0.486465,-0.667867,-0.563250,1.0,1.0,1.0,1.0,0.630215,0.332810,6.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.731236,-0.171306,3.138086,-0.486465,-0.667867,-0.563250,1.0,1.0,1.0,1.0,0.524189,0.309893,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.754238,-0.162556,3.339033,-0.598163,-0.590533,0.541673,1.0,1.0,1.0,1.0,0.522903,0.302040,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.737894,0.547432,3.355657,0.612903,0.484359,0.624256,1.0,1.0,1.0,1.0,0.632833,0.362278,6.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.235833,0.627632,3.176165,-0.108524,0.791101,-0.601947,1.0,1.0,1.0,1.0,0.607103,0.355640,2.000000,0.512647,6.000000,0.487353,0.0,0.0,0.0,0.0,
-				7.187471,0.538838,3.462924,0.162267,0.578356,0.799463,1.0,1.0,1.0,1.0,0.606479,0.370612,2.000000,0.600000,6.000000,0.400000,0.0,0.0,0.0,0.0,
-				7.787398,0.632349,3.090359,0.567431,0.600604,-0.563250,1.0,1.0,1.0,1.0,0.633632,0.348358,6.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.737894,0.547432,3.355657,-0.612903,0.484359,0.624256,1.0,1.0,1.0,1.0,0.529321,0.419025,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.235833,0.627632,3.176165,0.108524,0.791101,-0.601947,1.0,1.0,1.0,1.0,0.553480,0.407960,5.000000,0.512647,7.000000,0.487353,0.0,0.0,0.0,0.0,
-				-7.787398,0.632349,3.090359,-0.567431,0.600604,-0.563250,1.0,1.0,1.0,1.0,0.526083,0.405463,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.187471,0.538838,3.462924,-0.162267,0.578356,0.799463,1.0,1.0,1.0,1.0,0.556731,0.422589,5.000000,0.600000,7.000000,0.400000,0.0,0.0,0.0,0.0,
-				6.836884,0.622914,3.261971,0.142888,0.826716,-0.544145,1.0,1.0,1.0,1.0,0.588034,0.362035,1.0,0.500000,2.000000,0.500000,0.0,0.0,0.0,0.0,
-				6.789664,0.530245,3.570190,0.164647,0.511979,0.843043,1.0,1.0,1.0,1.0,0.587585,0.378061,1.0,0.500000,2.000000,0.500000,0.0,0.0,0.0,0.0,
-				-6.836884,0.622914,3.261971,-0.142888,0.826716,-0.544145,1.0,1.0,1.0,1.0,0.573377,0.410898,4.000000,0.500000,5.000000,0.500000,0.0,0.0,0.0,0.0,
-				-6.789664,0.530245,3.570190,-0.164647,0.511979,0.843043,1.0,1.0,1.0,1.0,0.576642,0.426593,4.000000,0.500000,5.000000,0.500000,0.0,0.0,0.0,0.0,
-				7.737894,0.547432,3.355657,0.612903,0.484359,0.624256,1.0,1.0,1.0,1.0,0.339627,0.287118,6.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.187471,0.538838,3.462924,0.162267,0.578356,0.799463,1.0,1.0,1.0,1.0,0.339478,0.314431,2.000000,0.600000,6.000000,0.400000,0.0,0.0,0.0,0.0,
-				7.754238,-0.162556,3.339033,0.598163,-0.590533,0.541673,1.0,1.0,1.0,1.0,0.374221,0.286888,6.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.187471,0.538838,3.462924,-0.162267,0.578356,0.799463,1.0,1.0,1.0,1.0,0.316238,0.314886,5.000000,0.600000,7.000000,0.400000,0.0,0.0,0.0,0.0,
-				-7.737894,0.547432,3.355657,-0.612903,0.484359,0.624256,1.0,1.0,1.0,1.0,0.316520,0.287574,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.754238,-0.162556,3.339033,-0.598163,-0.590533,0.541673,1.0,1.0,1.0,1.0,0.281934,0.286798,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				6.789664,0.530245,3.570190,0.164647,0.511979,0.843043,1.0,1.0,1.0,1.0,0.339407,0.334500,1.0,0.500000,2.000000,0.500000,0.0,0.0,0.0,0.0,
-				-6.789664,0.530245,3.570190,-0.164647,0.511979,0.843043,1.0,1.0,1.0,1.0,0.315991,0.334953,4.000000,0.500000,5.000000,0.500000,0.0,0.0,0.0,0.0,
-				5.692793,-0.011420,2.914522,-0.538285,-0.524338,-0.659749,1.0,1.0,1.0,1.0,0.528071,0.340131,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.734533,-0.055494,3.516446,-0.567766,-0.644795,0.511704,1.0,1.0,1.0,1.0,0.529838,0.316417,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.734533,-0.055494,3.516446,0.567766,-0.644795,0.511704,1.0,1.0,1.0,1.0,0.623144,0.286379,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.692793,-0.011420,2.914522,0.538285,-0.524338,-0.659749,1.0,1.0,1.0,1.0,0.626593,0.309893,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.767026,0.864352,2.914452,-0.386334,0.686911,-0.615497,1.0,1.0,1.0,1.0,0.454950,0.389048,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.705907,0.152432,3.003792,-0.915860,-0.286752,-0.280892,1.0,1.0,1.0,1.0,0.420940,0.394744,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.756557,0.716287,3.003747,-0.889523,0.355998,-0.286325,1.0,1.0,1.0,1.0,0.447665,0.393856,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.692793,-0.011420,2.914522,-0.538285,-0.524338,-0.659749,1.0,1.0,1.0,1.0,0.412887,0.390523,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.767026,0.864352,2.914452,0.386334,0.686911,-0.615497,1.0,1.0,1.0,1.0,0.459836,0.386568,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.705907,0.152432,3.003792,0.915860,-0.286752,-0.280892,1.0,1.0,1.0,1.0,0.493828,0.389299,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.692793,-0.011420,2.914522,0.538285,-0.524338,-0.659749,1.0,1.0,1.0,1.0,0.501867,0.384371,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.756557,0.716287,3.003747,0.889523,0.355998,-0.286325,1.0,1.0,1.0,1.0,0.467052,0.390659,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				4.542789,0.326796,2.849451,0.108219,-0.706015,-0.699850,1.0,1.0,1.0,1.0,0.775301,0.390515,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.756557,0.716287,3.003747,-0.889523,0.355998,-0.286325,1.0,1.0,1.0,1.0,0.813517,0.411980,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.705907,0.152432,3.003792,-0.915860,-0.286752,-0.280892,1.0,1.0,1.0,1.0,0.815863,0.393055,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				4.640630,1.144152,2.849382,0.303537,0.838496,-0.452467,1.0,1.0,1.0,1.0,0.775494,0.416309,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-4.542789,0.326796,2.849451,-0.108219,-0.706015,-0.699850,1.0,1.0,1.0,1.0,0.726853,0.536854,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.756557,0.716287,3.003747,0.889523,0.355998,-0.286325,1.0,1.0,1.0,1.0,0.686250,0.559660,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-4.640630,1.144152,2.849382,-0.303537,0.838496,-0.452467,1.0,1.0,1.0,1.0,0.726648,0.564260,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.705907,0.152432,3.003792,0.915860,-0.286752,-0.280892,1.0,1.0,1.0,1.0,0.683758,0.539553,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.734386,0.124055,3.394153,-0.906217,-0.348460,0.239326,1.0,1.0,1.0,1.0,0.522766,0.321202,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.705907,0.152432,3.003792,-0.915860,-0.286752,-0.280892,1.0,1.0,1.0,1.0,0.521631,0.336585,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.734386,0.124055,3.394153,0.906217,-0.348460,0.239326,1.0,1.0,1.0,1.0,0.630534,0.290646,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.705907,0.152432,3.003792,0.915860,-0.286752,-0.280892,1.0,1.0,1.0,1.0,0.632761,0.305900,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				4.597804,0.285662,3.439422,-0.010163,-0.793908,0.607929,1.0,1.0,1.0,1.0,0.780326,0.369970,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.734386,0.124055,3.394153,-0.906217,-0.348460,0.239326,1.0,1.0,1.0,1.0,0.819703,0.380306,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-4.597804,0.285662,3.439422,0.010163,-0.793908,0.607929,1.0,1.0,1.0,1.0,0.721515,0.515025,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.734386,0.124055,3.394153,0.906217,-0.348460,0.239326,1.0,1.0,1.0,1.0,0.679678,0.526007,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.693567,0.700181,3.693205,-0.555803,0.481368,0.677725,1.0,1.0,1.0,1.0,0.533444,0.387745,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.767026,0.864352,2.914452,-0.386334,0.686911,-0.615497,1.0,1.0,1.0,1.0,0.533009,0.348358,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.713755,0.589273,3.504337,-0.888333,0.202795,0.411908,1.0,1.0,1.0,1.0,0.526083,0.379788,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.756557,0.716287,3.003747,-0.889523,0.355998,-0.286325,1.0,1.0,1.0,1.0,0.526840,0.354260,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.767026,0.864352,2.914452,0.386334,0.686911,-0.615497,1.0,1.0,1.0,1.0,0.625135,0.387745,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.693567,0.700181,3.693205,0.555803,0.481368,0.677725,1.0,1.0,1.0,1.0,0.631641,0.426593,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.713755,0.589273,3.504337,0.888333,0.202795,0.411908,1.0,1.0,1.0,1.0,0.637486,0.417465,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.756557,0.716287,3.003747,0.889523,0.355998,-0.286325,1.0,1.0,1.0,1.0,0.632246,0.392469,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.713755,0.589273,3.504337,-0.888333,0.202795,0.411908,1.0,1.0,1.0,1.0,0.817575,0.429295,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				4.617007,0.777793,3.568191,0.124241,0.437056,0.890774,1.0,1.0,1.0,1.0,0.781330,0.441529,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.713755,0.589273,3.504337,0.888333,0.202795,0.411908,1.0,1.0,1.0,1.0,0.681938,0.578057,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-4.617007,0.777793,3.568191,-0.124241,0.437056,0.890774,1.0,1.0,1.0,1.0,0.720447,0.591055,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.734533,-0.055494,3.516446,-0.567766,-0.644795,0.511704,1.0,1.0,1.0,1.0,0.367833,0.386005,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.713755,0.589273,3.504337,-0.888333,0.202795,0.411908,1.0,1.0,1.0,1.0,0.337842,0.395376,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.734386,0.124055,3.394153,-0.906217,-0.348460,0.239326,1.0,1.0,1.0,1.0,0.361115,0.394178,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.693567,0.700181,3.693205,-0.555803,0.481368,0.677725,1.0,1.0,1.0,1.0,0.330041,0.388035,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.734533,-0.055494,3.516446,0.567766,-0.644795,0.511704,1.0,1.0,1.0,1.0,0.286756,0.386003,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.713755,0.589273,3.504337,0.888333,0.202795,0.411908,1.0,1.0,1.0,1.0,0.316595,0.395846,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.693567,0.700181,3.693205,0.555803,0.481368,0.677725,1.0,1.0,1.0,1.0,0.324511,0.388629,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.734386,0.124055,3.394153,0.906217,-0.348460,0.239326,1.0,1.0,1.0,1.0,0.293344,0.394280,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				5.713755,0.589273,3.504337,-0.888333,0.202795,0.411908,1.0,1.0,1.0,1.0,0.820966,0.364118,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				4.617007,0.777793,3.568191,0.124241,0.437056,0.890774,1.0,1.0,1.0,1.0,0.784225,0.352217,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-5.713755,0.589273,3.504337,0.888333,0.202795,0.411908,1.0,1.0,1.0,1.0,0.678336,0.508808,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-4.617007,0.777793,3.568191,-0.124241,0.437056,0.890774,1.0,1.0,1.0,1.0,0.717372,0.496163,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.475589,-0.677053,-3.818061,0.721763,-0.614673,-0.318125,1.0,1.0,1.0,1.0,0.095887,0.375366,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.164451,0.821501,-1.775225,0.668966,0.743248,0.006684,1.0,1.0,1.0,1.0,0.174586,0.307672,1.0,0.999999,6.000000,0.000001,0.0,0.0,0.0,0.0,
-				1.435166,-0.859531,-1.840466,0.770592,-0.637257,-0.004547,1.0,1.0,1.0,1.0,0.106409,0.295272,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.464804,0.979943,-3.880194,0.674581,0.716849,-0.176092,1.0,1.0,1.0,1.0,0.160895,0.393295,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.164451,0.821501,-1.775225,-0.668966,0.743248,0.006684,1.0,1.0,1.0,1.0,0.019346,0.306431,5.000000,0.999999,6.000000,0.000001,0.0,0.0,0.0,0.0,
-				-1.475589,-0.677053,-3.818061,-0.721763,-0.614673,-0.318125,1.0,1.0,1.0,1.0,0.089972,0.374675,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.435165,-0.859531,-1.840466,-0.770592,-0.637257,-0.004547,1.0,1.0,1.0,1.0,0.084418,0.298450,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.464804,0.979943,-3.880194,-0.674581,0.716849,-0.176092,1.0,1.0,1.0,1.0,0.027591,0.388052,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.110468,0.759973,-0.167663,0.023743,0.075045,-0.996887,1.0,1.0,1.0,1.0,0.186692,0.243342,0.0,0.330388,1.0,0.323922,3.000000,0.182090,2.000000,0.163599,
-				1.383637,-0.694774,-0.371825,-0.054598,-0.172704,-0.983428,1.0,1.0,1.0,1.0,0.126124,0.238459,0.0,0.405650,1.0,0.401979,3.000000,0.170888,2.000000,0.021484,
-				-1.383637,-0.694774,-0.371825,0.054598,-0.172704,-0.983428,1.0,1.0,1.0,1.0,0.068906,0.243710,0.0,0.405650,5.000000,0.401979,3.000000,0.170888,2.000000,0.021484,
-				-1.110468,0.759973,-0.167663,-0.023743,0.075045,-0.996887,1.0,1.0,1.0,1.0,0.011432,0.245007,0.0,0.330388,5.000000,0.323922,3.000000,0.182090,2.000000,0.163599,
-				0.693888,-1.067332,-0.659909,0.294290,-0.497208,-0.816157,1.0,1.0,1.0,1.0,0.143813,0.462968,0.0,0.400902,1.0,0.399670,3.000000,0.198713,2.000000,0.000714,
-				1.435166,-0.859531,-1.840466,0.770592,-0.637257,-0.004547,1.0,1.0,1.0,1.0,0.173161,0.513947,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.383637,-0.694774,-0.371825,-0.054598,-0.172704,-0.983428,1.0,1.0,1.0,1.0,0.177014,0.452350,0.0,0.405650,1.0,0.401979,3.000000,0.170888,2.000000,0.021484,
-				0.080256,-0.834016,-2.258967,-0.620716,-0.755730,-0.208625,1.0,1.0,1.0,1.0,0.125225,0.529853,1.0,0.974597,0.0,0.019646,5.000000,0.005757,0.0,0.0,
-				-1.435165,-0.859531,-1.840466,-0.770592,-0.637257,-0.004547,1.0,1.0,1.0,1.0,0.052245,0.513947,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.693888,-1.067332,-0.659909,-0.294290,-0.497208,-0.816157,1.0,1.0,1.0,1.0,0.081593,0.462968,0.0,0.400902,5.000000,0.399670,3.000000,0.198713,2.000000,0.000714,
-				-1.383637,-0.694774,-0.371825,0.054598,-0.172704,-0.983428,1.0,1.0,1.0,1.0,0.048392,0.452350,0.0,0.405650,5.000000,0.401979,3.000000,0.170888,2.000000,0.021484,
-				-0.080256,-0.834016,-2.258967,0.620716,-0.755730,-0.208625,1.0,1.0,1.0,1.0,0.100181,0.529853,5.000000,0.974597,0.0,0.019646,1.0,0.005757,0.0,0.0,
-				1.475589,-0.677053,-3.818061,0.721763,-0.614673,-0.318125,1.0,1.0,1.0,1.0,0.172092,0.596845,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.289179,-0.738212,-4.007422,-0.539140,-0.744102,-0.394421,1.0,1.0,1.0,1.0,0.122248,0.602877,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.475589,-0.677053,-3.818061,-0.721763,-0.614673,-0.318125,1.0,1.0,1.0,1.0,0.053313,0.596845,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.289179,-0.738212,-4.007422,0.539140,-0.744102,-0.394421,1.0,1.0,1.0,1.0,0.103157,0.602877,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,-0.904298,-2.032235,0.0,-0.921934,-0.387310,1.0,1.0,1.0,1.0,0.112703,0.519948,0.0,0.338385,5.000000,0.330807,1.0,0.330807,6.000000,0.000001,
-				0.0,-1.286986,-0.881864,0.0,-0.467971,-0.883724,1.0,1.0,1.0,1.0,0.112703,0.469349,0.0,0.279925,5.000000,0.279159,1.0,0.279159,3.000000,0.161756,
-				4.224897,0.546591,2.744091,0.020844,-0.193884,-0.980773,1.0,1.0,1.0,1.0,0.763692,0.397231,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				4.450871,0.928590,2.755157,0.255623,0.104312,-0.961119,1.0,1.0,1.0,1.0,0.769818,0.409384,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				4.422056,0.559177,2.755188,0.250374,-0.144566,-0.957274,1.0,1.0,1.0,1.0,0.769830,0.398027,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				4.209236,0.972946,2.744057,0.037141,0.193396,-0.980407,1.0,1.0,1.0,1.0,0.762486,0.410383,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-4.224897,0.546591,2.744091,-0.020844,-0.193884,-0.980773,1.0,1.0,1.0,1.0,0.739187,0.543990,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-4.450871,0.928590,2.755157,-0.255623,0.104312,-0.961119,1.0,1.0,1.0,1.0,0.732678,0.556902,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-4.209236,0.972946,2.744057,-0.037141,0.193396,-0.980407,1.0,1.0,1.0,1.0,0.740469,0.557964,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-4.422056,0.559177,2.755188,-0.250374,-0.144566,-0.957274,1.0,1.0,1.0,1.0,0.732666,0.544835,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				4.028749,0.571745,2.744968,-0.218085,-0.144383,-0.965178,1.0,1.0,1.0,1.0,0.757467,0.397619,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.976026,0.963499,2.744935,-0.213355,0.097079,-0.972137,1.0,1.0,1.0,1.0,0.755288,0.410009,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-4.028749,0.571745,2.744968,0.218085,-0.144383,-0.965178,1.0,1.0,1.0,1.0,0.745801,0.544402,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-3.976026,0.963499,2.744935,0.213355,0.097079,-0.972137,1.0,1.0,1.0,1.0,0.748116,0.557566,9.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.923108,0.333940,2.831992,-0.019807,-0.735435,-0.677267,1.0,1.0,1.0,1.0,0.753511,0.388845,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.777064,1.218123,2.831918,-0.000580,0.876553,-0.481277,1.0,1.0,1.0,1.0,0.748157,0.418738,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.976026,0.963499,2.744935,-0.213355,0.097079,-0.972137,1.0,1.0,1.0,1.0,0.755288,0.410009,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.923108,0.333940,2.831992,-0.019807,-0.735435,-0.677267,1.0,1.0,1.0,1.0,0.753511,0.388845,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-3.777064,1.218123,2.831918,0.000580,0.876553,-0.481277,1.0,1.0,1.0,1.0,0.755693,0.566840,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-3.923108,0.333940,2.831992,0.019807,-0.735435,-0.677267,1.0,1.0,1.0,1.0,0.750004,0.535080,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-3.976026,0.963499,2.744935,0.213355,0.097079,-0.972137,1.0,1.0,1.0,1.0,0.748116,0.557566,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-3.923108,0.333940,2.831992,0.019807,-0.735435,-0.677267,1.0,1.0,1.0,1.0,0.750004,0.535080,9.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				4.195984,1.208929,2.840650,0.079287,0.937498,-0.338816,1.0,1.0,1.0,1.0,0.762038,0.418149,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.777064,1.218123,2.831918,-0.000580,0.876553,-0.481277,1.0,1.0,1.0,1.0,0.748157,0.418738,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-4.195984,1.208929,2.840650,-0.079287,0.937498,-0.338816,1.0,1.0,1.0,1.0,0.740944,0.566215,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-3.777064,1.218123,2.831918,0.000580,0.876553,-0.481277,1.0,1.0,1.0,1.0,0.755693,0.566840,9.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				4.232949,0.310608,2.840722,0.002625,-0.812006,-0.583636,1.0,1.0,1.0,1.0,0.764564,0.388952,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-4.232949,0.310608,2.840722,-0.002625,-0.812006,-0.583636,1.0,1.0,1.0,1.0,0.738261,0.535194,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				4.129516,0.799017,3.590607,0.061190,0.406110,0.911740,1.0,1.0,1.0,1.0,0.764994,0.445392,1.0,0.757098,8.000000,0.242902,0.0,0.0,0.0,0.0,
-				-4.129516,0.799017,3.590607,-0.061190,0.406110,0.911740,1.0,1.0,1.0,1.0,0.737804,0.595160,4.000000,0.757098,9.000000,0.242902,0.0,0.0,0.0,0.0,
-				3.681249,0.814663,3.611329,0.135929,0.475112,0.869350,1.0,1.0,1.0,1.0,0.750426,0.448335,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-3.681249,0.814663,3.611329,-0.135929,0.475112,0.869350,1.0,1.0,1.0,1.0,0.753282,0.598286,9.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.982621,0.289443,3.470199,0.088412,-0.796350,0.598315,1.0,1.0,1.0,1.0,0.758564,0.365623,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-3.982621,0.289443,3.470199,-0.088412,-0.796350,0.598315,1.0,1.0,1.0,1.0,0.744636,0.510407,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.681249,0.814663,3.611329,0.135929,0.475112,0.869350,1.0,1.0,1.0,1.0,0.750426,0.448335,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-3.681249,0.814663,3.611329,-0.135929,0.475112,0.869350,1.0,1.0,1.0,1.0,0.753282,0.598286,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.681249,0.814663,3.611329,0.135929,0.475112,0.869350,1.0,1.0,1.0,1.0,0.752657,0.343942,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-3.681249,0.814663,3.611329,-0.135929,0.475112,0.869350,1.0,1.0,1.0,1.0,0.750912,0.487372,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.737894,0.547432,3.355657,0.612903,0.484359,0.624256,1.0,1.0,1.0,1.0,0.447215,0.405350,6.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.754238,-0.162556,3.339033,0.598163,-0.590533,0.541673,1.0,1.0,1.0,1.0,0.412250,0.407585,6.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.731236,-0.171306,3.138086,0.486465,-0.667867,-0.563250,1.0,1.0,1.0,1.0,0.412250,0.417570,6.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				7.787398,0.632349,3.090359,0.567431,0.600604,-0.563250,1.0,1.0,1.0,1.0,0.452044,0.418441,6.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.737894,0.547432,3.355657,-0.612903,0.484359,0.624256,1.0,1.0,1.0,1.0,0.496401,0.417474,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.731236,-0.171306,3.138086,-0.486465,-0.667867,-0.563250,1.0,1.0,1.0,1.0,0.460728,0.407509,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.754238,-0.162556,3.339033,-0.598163,-0.590533,0.541673,1.0,1.0,1.0,1.0,0.461365,0.417474,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-7.787398,0.632349,3.090359,-0.567431,0.600604,-0.563250,1.0,1.0,1.0,1.0,0.500384,0.404101,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.591930,-1.321337,-9.492271,-0.353130,-0.672994,-0.649861,1.0,1.0,1.0,1.0,0.369510,0.751604,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.674646,-0.854898,-9.210469,0.749687,-0.544053,0.376720,1.0,1.0,1.0,1.0,0.387452,0.731795,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.532919,-1.344535,-9.223637,-0.532579,-0.797418,0.283608,1.0,1.0,1.0,1.0,0.365011,0.747505,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.694786,-0.736251,-9.492256,0.784600,-0.223365,-0.578326,1.0,1.0,1.0,1.0,0.392432,0.736360,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.674647,-0.854898,-9.210470,-0.749687,-0.544053,0.376720,1.0,1.0,1.0,1.0,0.396289,0.730814,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.591930,-1.321337,-9.492272,0.353130,-0.672994,-0.649861,1.0,1.0,1.0,1.0,0.418139,0.746205,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.532919,-1.344535,-9.223638,0.532579,-0.797418,0.283608,1.0,1.0,1.0,1.0,0.421629,0.741219,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.694787,-0.736251,-9.492257,-0.784600,-0.223365,-0.578356,1.0,1.0,1.0,1.0,0.392432,0.736361,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.591930,-1.321337,-9.492271,-0.353130,-0.672994,-0.649861,1.0,1.0,1.0,1.0,0.603035,0.512917,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.397796,0.318793,-9.492229,0.681021,0.084719,-0.727317,1.0,1.0,1.0,1.0,0.630215,0.554315,9.000000,0.608543,7.000000,0.391457,0.0,0.0,0.0,0.0,
-				1.694786,-0.736251,-9.492256,0.784600,-0.223365,-0.578326,1.0,1.0,1.0,1.0,0.634657,0.524946,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.498963,0.560473,-9.492379,-0.684133,-0.011811,-0.729209,1.0,1.0,1.0,1.0,0.606857,0.563833,9.000000,0.666223,7.000000,0.333777,0.0,0.0,0.0,0.0,
-				-0.591930,-1.321337,-9.492272,0.353130,-0.672994,-0.649861,1.0,1.0,1.0,1.0,0.642430,0.645850,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.397796,0.318793,-9.492229,-0.681021,0.084719,-0.727317,1.0,1.0,1.0,1.0,0.615890,0.687661,10.000000,0.608543,8.000000,0.391457,0.0,0.0,0.0,0.0,
-				-0.498963,0.560473,-9.492379,0.684133,-0.011811,-0.729209,1.0,1.0,1.0,1.0,0.639393,0.696818,10.000000,0.666223,8.000000,0.333777,0.0,0.0,0.0,0.0,
-				-1.694787,-0.736251,-9.492257,-0.784600,-0.223365,-0.578356,1.0,1.0,1.0,1.0,0.610996,0.658364,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.532919,-1.344535,-9.223637,-0.532579,-0.797418,0.283608,1.0,1.0,1.0,1.0,0.614412,0.763755,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.498963,0.560473,-9.492379,-0.684133,-0.011811,-0.729209,1.0,1.0,1.0,1.0,0.565481,0.781282,9.000000,0.666223,7.000000,0.333777,0.0,0.0,0.0,0.0,
-				0.591930,-1.321337,-9.492271,-0.353130,-0.672994,-0.649861,1.0,1.0,1.0,1.0,0.615355,0.771151,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.429047,0.390533,-8.392583,-0.893399,-0.441542,0.082614,1.0,1.0,1.0,1.0,0.563907,0.751204,11.000000,0.425823,9.000000,0.425798,7.000000,0.148378,0.0,0.0,
-				-0.532919,-1.344535,-9.223638,0.532579,-0.797418,0.283608,1.0,1.0,1.0,1.0,0.440434,0.780744,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.498963,0.560473,-9.492379,0.684133,-0.011811,-0.729209,1.0,1.0,1.0,1.0,0.491874,0.788181,1.0,0.666223,0.0,0.333777,0.0,0.0,0.0,0.0,
-				-0.429047,0.390533,-8.392583,0.893399,-0.441542,0.082614,1.0,1.0,1.0,1.0,0.487430,0.758391,2.000000,0.425823,1.0,0.425798,0.0,0.148378,0.0,0.0,
-				-0.498963,0.560473,-9.492379,0.684133,-0.011811,-0.729209,1.0,1.0,1.0,1.0,0.491874,0.788181,10.000000,0.666223,8.000000,0.333777,0.0,0.0,0.0,0.0,
-				-0.532919,-1.344535,-9.223638,0.532579,-0.797418,0.283608,1.0,1.0,1.0,1.0,0.440434,0.780744,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.591930,-1.321337,-9.492272,0.353130,-0.672994,-0.649861,1.0,1.0,1.0,1.0,0.440981,0.788179,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.397796,0.318793,-9.492229,0.681021,0.084719,-0.727317,1.0,1.0,1.0,1.0,0.470518,0.629545,9.000000,0.608543,7.000000,0.391457,0.0,0.0,0.0,0.0,
-				1.361977,0.069615,-8.481032,0.817469,-0.481796,0.315500,1.0,1.0,1.0,1.0,0.460765,0.603623,11.000000,0.401997,9.000000,0.400396,7.000000,0.197608,0.0,0.0,
-				1.674646,-0.854898,-9.210469,0.749687,-0.544053,0.376720,1.0,1.0,1.0,1.0,0.437753,0.626409,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.694786,-0.736251,-9.492256,0.784600,-0.223365,-0.578326,1.0,1.0,1.0,1.0,0.441663,0.633553,7.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.674647,-0.854898,-9.210470,-0.749687,-0.544053,0.376720,1.0,1.0,1.0,1.0,0.575105,0.618327,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.361977,0.069615,-8.481032,-0.817469,-0.481796,0.315500,1.0,1.0,1.0,1.0,0.547498,0.601400,2.000000,0.401997,1.0,0.400396,0.0,0.197608,0.0,0.0,
-				-1.397796,0.318793,-9.492229,-0.681021,0.084719,-0.727317,1.0,1.0,1.0,1.0,0.543924,0.628865,1.0,0.608543,0.0,0.391457,0.0,0.0,0.0,0.0,
-				-1.674647,-0.854898,-9.210470,-0.749687,-0.544053,0.376720,1.0,1.0,1.0,1.0,0.575105,0.618327,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.397796,0.318793,-9.492229,-0.681021,0.084719,-0.727317,1.0,1.0,1.0,1.0,0.543924,0.628865,10.000000,0.608543,8.000000,0.391457,0.0,0.0,0.0,0.0,
-				-1.694787,-0.736251,-9.492257,-0.784600,-0.223365,-0.578356,1.0,1.0,1.0,1.0,0.572930,0.626175,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.429047,0.390533,-8.392583,-0.893399,-0.441542,0.082614,1.0,1.0,1.0,1.0,0.351834,0.707119,11.000000,0.425823,9.000000,0.425798,7.000000,0.148378,0.0,0.0,
-				1.361977,0.069615,-8.481032,0.817469,-0.481796,0.315500,1.0,1.0,1.0,1.0,0.373612,0.708768,11.000000,0.401997,9.000000,0.400396,7.000000,0.197608,0.0,0.0,
-				-1.361977,0.069615,-8.481032,-0.817469,-0.481796,0.315500,1.0,1.0,1.0,1.0,0.404740,0.705312,2.000000,0.401997,1.0,0.400396,0.0,0.197608,0.0,0.0,
-				-0.532919,-1.344535,-9.223638,0.532579,-0.797418,0.283608,1.0,1.0,1.0,1.0,0.421629,0.741219,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.429047,0.390533,-8.392583,0.893399,-0.441542,0.082614,1.0,1.0,1.0,1.0,0.425627,0.698927,2.000000,0.425823,1.0,0.425798,0.0,0.148378,0.0,0.0,
-				-1.674647,-0.854898,-9.210470,-0.749687,-0.544053,0.376720,1.0,1.0,1.0,1.0,0.396289,0.730814,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.446977,1.637211,-8.582069,0.696646,0.717399,0.001068,1.0,1.0,1.0,1.0,0.502519,0.601426,11.000000,0.505794,9.000000,0.494206,0.0,0.0,0.0,0.0,
-				1.240258,1.664359,-9.492545,0.494736,0.627003,-0.601672,1.0,1.0,1.0,1.0,0.506346,0.625954,9.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.446977,1.637211,-8.582069,-0.696646,0.717399,0.001068,1.0,1.0,1.0,1.0,0.506346,0.608798,2.000000,0.505794,1.0,0.494206,0.0,0.0,0.0,0.0,
-				-1.240258,1.664358,-9.492545,-0.494736,0.627003,-0.601672,1.0,1.0,1.0,1.0,0.508223,0.633553,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.573596,1.163605,-5.129890,0.590960,0.527848,0.609973,1.0,1.0,1.0,1.0,0.479515,0.511652,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.577347,-0.424802,-5.190855,0.510330,-0.683187,0.522263,1.0,1.0,1.0,1.0,0.437753,0.518048,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.573596,1.163605,-5.129890,-0.590960,0.527848,0.609973,1.0,1.0,1.0,1.0,0.508237,0.516143,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.577347,-0.424802,-5.190855,-0.510330,-0.683187,0.522263,1.0,1.0,1.0,1.0,0.550355,0.512832,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.438423,1.652547,-8.414162,-0.707938,0.705710,0.027345,1.0,1.0,1.0,1.0,0.421450,0.579046,9.000000,0.500503,11.000000,0.499497,0.0,0.0,0.0,0.0,
-				1.240258,1.664359,-9.492545,0.494736,0.627003,-0.601672,1.0,1.0,1.0,1.0,0.399444,0.608024,9.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.472126,1.581046,-9.485755,-0.585009,0.543901,-0.601550,1.0,1.0,1.0,1.0,0.420298,0.608024,9.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.446977,1.637211,-8.582069,0.696646,0.717399,0.001068,1.0,1.0,1.0,1.0,0.394192,0.583367,11.000000,0.505794,9.000000,0.494206,0.0,0.0,0.0,0.0,
-				-0.438423,1.652547,-8.414163,0.707938,0.705710,0.027345,1.0,1.0,1.0,1.0,0.353987,0.579046,1.0,0.500503,2.000000,0.499497,0.0,0.0,0.0,0.0,
-				-1.240258,1.664358,-9.492545,-0.494736,0.627003,-0.601672,1.0,1.0,1.0,1.0,0.375993,0.608024,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.446977,1.637211,-8.582069,-0.696646,0.717399,0.001068,1.0,1.0,1.0,1.0,0.381245,0.583367,2.000000,0.505794,1.0,0.494206,0.0,0.0,0.0,0.0,
-				-0.472126,1.581046,-9.485755,0.585009,0.543901,-0.601550,1.0,1.0,1.0,1.0,0.355139,0.608024,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.149979,0.939240,-5.157804,-0.622913,0.451125,0.639088,1.0,1.0,1.0,1.0,0.430069,0.489150,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.573596,1.163605,-5.129890,0.590960,0.527848,0.609973,1.0,1.0,1.0,1.0,0.391164,0.489308,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.149979,0.939240,-5.157804,0.622913,0.451125,0.639088,1.0,1.0,1.0,1.0,0.345368,0.489150,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.573596,1.163605,-5.129890,-0.590960,0.527848,0.609973,1.0,1.0,1.0,1.0,0.384272,0.489308,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.438423,1.652547,-8.414162,-0.707938,0.705710,0.027345,1.0,1.0,1.0,1.0,0.530655,0.758738,9.000000,0.500503,11.000000,0.499497,0.0,0.0,0.0,0.0,
-				0.472126,1.581046,-9.485755,-0.585009,0.543901,-0.601550,1.0,1.0,1.0,1.0,0.538441,0.786698,9.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.438423,1.652547,-8.414163,0.707938,0.705710,0.027345,1.0,1.0,1.0,1.0,0.521517,0.759157,1.0,0.500503,2.000000,0.499497,0.0,0.0,0.0,0.0,
-				-0.472126,1.581046,-9.485755,0.585009,0.543901,-0.601550,1.0,1.0,1.0,1.0,0.519451,0.788108,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.371926,-0.248465,-5.253414,-0.617695,-0.587848,0.522355,1.0,1.0,1.0,1.0,0.564059,0.664657,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.149979,0.939240,-5.157804,-0.622913,0.451125,0.639088,1.0,1.0,1.0,1.0,0.531530,0.668361,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.371926,-0.248465,-5.253414,0.617695,-0.587848,0.522355,1.0,1.0,1.0,1.0,0.470056,0.673606,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.149979,0.939240,-5.157804,0.622913,0.451125,0.639088,1.0,1.0,1.0,1.0,0.502672,0.670762,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.577347,-0.424802,-5.190855,0.510330,-0.683187,0.522263,1.0,1.0,1.0,1.0,0.381250,0.635651,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.371926,-0.248465,-5.253414,-0.617695,-0.587848,0.522355,1.0,1.0,1.0,1.0,0.354367,0.636517,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.577347,-0.424802,-5.190855,-0.510330,-0.683187,0.522263,1.0,1.0,1.0,1.0,0.381250,0.635651,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.371926,-0.248465,-5.253414,0.617695,-0.587848,0.522355,1.0,1.0,1.0,1.0,0.407669,0.630599,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.240258,1.664359,-9.492545,0.494736,0.627003,-0.601672,1.0,1.0,1.0,1.0,0.630499,0.591027,9.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.472126,1.581046,-9.485755,-0.585009,0.543901,-0.601550,1.0,1.0,1.0,1.0,0.609562,0.591368,9.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.240258,1.664358,-9.492545,-0.494736,0.627003,-0.601672,1.0,1.0,1.0,1.0,0.616172,0.724373,10.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.472126,1.581046,-9.485755,0.585009,0.543901,-0.601550,1.0,1.0,1.0,1.0,0.637111,0.724392,10.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.190698,0.888589,-5.138720,0.199286,0.268197,0.942503,1.0,1.0,1.0,1.0,0.470767,0.502679,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.274054,-0.139361,-5.184191,0.515610,-0.340220,0.786340,1.0,1.0,1.0,1.0,0.444054,0.508946,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.274054,-0.139361,-5.184191,-0.515610,-0.340220,0.786340,1.0,1.0,1.0,1.0,0.542141,0.505409,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.190698,0.888589,-5.138719,-0.199286,0.268197,0.942503,1.0,1.0,1.0,1.0,0.514704,0.505409,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.190698,0.888589,-5.138720,0.199286,0.268197,0.942503,1.0,1.0,1.0,1.0,0.402507,0.483539,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.428201,0.826157,-5.197196,-0.231361,0.300119,0.925382,1.0,1.0,1.0,1.0,0.423181,0.484747,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.190698,0.888589,-5.138719,-0.199286,0.268197,0.942503,1.0,1.0,1.0,1.0,0.372929,0.483539,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.428201,0.826157,-5.197196,0.231361,0.300119,0.925382,1.0,1.0,1.0,1.0,0.352256,0.484747,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.481087,0.036006,-5.272640,-0.566759,-0.452254,0.688620,1.0,1.0,1.0,1.0,0.556653,0.661031,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.428201,0.826157,-5.197196,-0.231361,0.300119,0.925382,1.0,1.0,1.0,1.0,0.535165,0.661031,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.481087,0.036006,-5.272640,0.566759,-0.452254,0.688620,1.0,1.0,1.0,1.0,0.476593,0.668578,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.428201,0.826157,-5.197196,0.231361,0.300119,0.925382,1.0,1.0,1.0,1.0,0.497651,0.664302,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.274054,-0.139361,-5.184191,0.515610,-0.340220,0.786340,1.0,1.0,1.0,1.0,0.373573,0.630609,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.481087,0.036006,-5.272640,-0.566759,-0.452254,0.688620,1.0,1.0,1.0,1.0,0.355575,0.629895,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.274054,-0.139361,-5.184191,-0.515610,-0.340220,0.786340,1.0,1.0,1.0,1.0,0.387635,0.629048,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.481087,0.036006,-5.272640,0.566759,-0.452254,0.688620,1.0,1.0,1.0,1.0,0.405038,0.624403,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.690770,-0.215211,-5.131282,-0.226936,-0.729545,-0.645131,1.0,1.0,1.0,1.0,0.144847,0.659412,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.107730,-0.422573,-4.816992,0.190802,-0.940703,-0.280435,1.0,1.0,1.0,1.0,0.160134,0.642985,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.542454,-0.285981,-4.882858,-0.429884,-0.842250,-0.325236,1.0,1.0,1.0,1.0,0.137568,0.649459,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.029038,-0.299605,-5.090588,0.068331,-0.786950,-0.613208,1.0,1.0,1.0,1.0,0.158359,0.655109,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.107730,-0.422573,-4.816992,-0.190802,-0.940703,-0.280435,1.0,1.0,1.0,1.0,0.065270,0.642986,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.690770,-0.215212,-5.131282,0.226936,-0.729545,-0.645131,1.0,1.0,1.0,1.0,0.080558,0.659413,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.542454,-0.285981,-4.882858,0.429884,-0.842250,-0.325236,1.0,1.0,1.0,1.0,0.087837,0.649460,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.029038,-0.299605,-5.090588,-0.068331,-0.786950,-0.613208,1.0,1.0,1.0,1.0,0.067046,0.655109,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.567266,-0.389381,-4.502560,-0.385418,-0.897610,0.213752,1.0,1.0,1.0,1.0,0.137975,0.633742,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.010754,-0.500026,-4.449208,0.000519,-0.970916,0.239296,1.0,1.0,1.0,1.0,0.154156,0.630035,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.567266,-0.389381,-4.502560,0.385418,-0.897610,0.213752,1.0,1.0,1.0,1.0,0.087431,0.633743,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.010754,-0.500026,-4.449208,-0.000519,-0.970916,0.239296,1.0,1.0,1.0,1.0,0.071250,0.630035,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.219815,-0.398567,-4.301160,0.710898,-0.616565,-0.338237,1.0,1.0,1.0,1.0,0.161719,0.620253,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.334692,-0.215501,-4.405590,-0.797204,-0.521592,-0.303934,1.0,1.0,1.0,1.0,0.125076,0.630221,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.334692,-0.215501,-4.405590,0.797204,-0.521592,-0.303934,1.0,1.0,1.0,1.0,0.100330,0.630222,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.219815,-0.398567,-4.301160,-0.710898,-0.616565,-0.338237,1.0,1.0,1.0,1.0,0.063687,0.620254,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.274054,-0.139361,-5.184191,0.515610,-0.340220,0.786340,1.0,1.0,1.0,1.0,0.169636,0.662430,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.481087,0.036006,-5.272640,-0.566759,-0.452254,0.688620,1.0,1.0,1.0,1.0,0.134870,0.671681,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.274054,-0.139361,-5.184191,-0.515610,-0.340220,0.786340,1.0,1.0,1.0,1.0,0.055769,0.662431,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.481087,0.036006,-5.272640,0.566759,-0.452254,0.688620,1.0,1.0,1.0,1.0,0.090535,0.671682,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.256413,-0.049980,-4.905388,-0.894131,-0.363201,-0.261849,1.0,1.0,1.0,1.0,0.122321,0.655043,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.256413,-0.049980,-4.905388,0.894131,-0.363201,-0.261849,1.0,1.0,1.0,1.0,0.103084,0.655044,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.398110,-0.259448,-4.797566,0.911191,-0.402997,-0.085299,1.0,1.0,1.0,1.0,0.174912,0.642806,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.398110,-0.259448,-4.797566,-0.911191,-0.402997,-0.085299,1.0,1.0,1.0,1.0,0.050492,0.642806,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.274054,-0.139361,-5.184191,0.515610,-0.340220,0.786340,1.0,1.0,1.0,1.0,0.103049,0.438911,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.221418,0.790583,-4.841204,0.707114,0.702445,0.080752,1.0,1.0,1.0,1.0,0.143022,0.433296,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.398110,-0.259448,-4.797566,0.911191,-0.402997,-0.085299,1.0,1.0,1.0,1.0,0.101240,0.421787,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.190698,0.888589,-5.138720,0.199286,0.268197,0.942503,1.0,1.0,1.0,1.0,0.144425,0.446019,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.221418,0.790583,-4.841204,-0.707114,0.702445,0.080752,1.0,1.0,1.0,1.0,0.042282,0.426811,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.274054,-0.139361,-5.184191,-0.515610,-0.340220,0.786340,1.0,1.0,1.0,1.0,0.079729,0.434303,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.398110,-0.259448,-4.797566,-0.911191,-0.402997,-0.085299,1.0,1.0,1.0,1.0,0.082376,0.418228,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.190698,0.888589,-5.138719,-0.199286,0.268197,0.942503,1.0,1.0,1.0,1.0,0.040260,0.438752,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.139386,0.834946,-4.416924,0.548204,0.810816,-0.204993,1.0,1.0,1.0,1.0,0.149260,0.416768,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.219815,-0.398567,-4.301160,0.710898,-0.616565,-0.338237,1.0,1.0,1.0,1.0,0.101774,0.399610,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.139386,0.834946,-4.416924,-0.548204,0.810816,-0.204993,1.0,1.0,1.0,1.0,0.037295,0.410859,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.219815,-0.398567,-4.301160,-0.710898,-0.616565,-0.338237,1.0,1.0,1.0,1.0,0.083085,0.397252,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.190698,0.888589,-5.138720,0.199286,0.268197,0.942503,1.0,1.0,1.0,1.0,0.186112,0.668187,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.428201,0.826157,-5.197196,-0.231361,0.300119,0.925382,1.0,1.0,1.0,1.0,0.217429,0.671682,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.221418,0.790583,-4.841204,0.707114,0.702445,0.080752,1.0,1.0,1.0,1.0,0.185686,0.655268,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.286784,0.739644,-4.905217,-0.790857,0.599567,-0.122654,1.0,1.0,1.0,1.0,0.223977,0.659548,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.221418,0.790583,-4.841204,-0.707114,0.702445,0.080752,1.0,1.0,1.0,1.0,0.297724,0.655260,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.286784,0.739644,-4.905217,0.790857,0.599567,-0.122654,1.0,1.0,1.0,1.0,0.259431,0.659549,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.428201,0.826157,-5.197196,0.231361,0.300119,0.925382,1.0,1.0,1.0,1.0,0.265983,0.671682,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.190698,0.888589,-5.138719,-0.199286,0.268197,0.942503,1.0,1.0,1.0,1.0,0.297300,0.668179,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.300884,0.775516,-4.495893,-0.662923,0.714072,-0.224921,1.0,1.0,1.0,1.0,0.224050,0.642664,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.139386,0.834946,-4.416924,0.548204,0.810816,-0.204993,1.0,1.0,1.0,1.0,0.189706,0.637887,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.300884,0.775516,-4.495893,0.662923,0.714072,-0.224921,1.0,1.0,1.0,1.0,0.259355,0.642663,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.139386,0.834946,-4.416924,-0.548204,0.810816,-0.204993,1.0,1.0,1.0,1.0,0.293699,0.637879,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.428201,0.826157,-5.197196,-0.231361,0.300119,0.925382,1.0,1.0,1.0,1.0,0.261892,0.195629,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.481087,0.036006,-5.272640,-0.566759,-0.452254,0.688620,1.0,1.0,1.0,1.0,0.231370,0.189535,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.286784,0.739644,-4.905217,-0.790857,0.599567,-0.122654,1.0,1.0,1.0,1.0,0.257474,0.208000,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.256413,-0.049980,-4.905388,-0.894131,-0.363201,-0.261849,1.0,1.0,1.0,1.0,0.226619,0.206042,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.286784,0.739644,-4.905217,0.790857,0.599567,-0.122654,1.0,1.0,1.0,1.0,0.257473,0.435592,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.256413,-0.049980,-4.905388,0.894131,-0.363201,-0.261849,1.0,1.0,1.0,1.0,0.226619,0.437550,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.481087,0.036006,-5.272640,0.566759,-0.452254,0.688620,1.0,1.0,1.0,1.0,0.231370,0.454057,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.428201,0.826157,-5.197196,0.231361,0.300119,0.925382,1.0,1.0,1.0,1.0,0.261892,0.447964,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.300884,0.775516,-4.495893,-0.662923,0.714072,-0.224921,1.0,1.0,1.0,1.0,0.257883,0.224080,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.334692,-0.215501,-4.405590,-0.797204,-0.521592,-0.303934,1.0,1.0,1.0,1.0,0.218949,0.225404,11.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.300884,0.775516,-4.495893,0.662923,0.714072,-0.224921,1.0,1.0,1.0,1.0,0.257883,0.419512,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.334692,-0.215501,-4.405590,0.797204,-0.521592,-0.303934,1.0,1.0,1.0,1.0,0.218949,0.418188,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.464804,0.979943,-3.880194,-0.674581,0.716849,-0.176092,1.0,1.0,1.0,1.0,0.027591,0.388052,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.475589,-0.677053,-3.818061,-0.721763,-0.614673,-0.318125,1.0,1.0,1.0,1.0,0.089972,0.374675,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.069025,0.819577,-4.149693,-0.780206,0.583758,-0.224677,1.0,1.0,1.0,1.0,0.234072,0.628676,1.0,0.947486,5.000000,0.052514,0.0,0.0,0.0,0.0,
-				1.464804,0.979943,-3.880194,0.674581,0.716849,-0.176092,1.0,1.0,1.0,1.0,0.177014,0.614674,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.069025,0.819577,-4.149693,0.780206,0.583758,-0.224677,1.0,1.0,1.0,1.0,0.249330,0.628677,5.000000,0.947486,1.0,0.052514,0.0,0.0,0.0,0.0,
-				-1.139386,0.834946,-4.416924,-0.548204,0.810816,-0.204993,1.0,1.0,1.0,1.0,0.293699,0.637879,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.464804,0.979943,-3.880194,-0.674581,0.716849,-0.176092,1.0,1.0,1.0,1.0,0.306387,0.614662,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.300884,0.775516,-4.495893,0.662923,0.714072,-0.224921,1.0,1.0,1.0,1.0,0.259355,0.642663,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.064272,0.696954,-2.479152,-0.745140,0.645344,-0.168157,1.0,1.0,1.0,1.0,0.231236,0.559585,1.0,0.934670,0.0,0.065330,6.000000,0.000000,0.0,0.0,
-				1.164451,0.821501,-1.775225,0.668966,0.743248,0.006684,1.0,1.0,1.0,1.0,0.194387,0.528850,1.0,0.999999,6.000000,0.000001,0.0,0.0,0.0,0.0,
-				-0.064272,0.696954,-2.479152,0.745140,0.645344,-0.168157,1.0,1.0,1.0,1.0,0.252151,0.559584,5.000000,0.934670,0.0,0.065330,6.000000,0.000000,0.0,0.0,
-				-1.164451,0.821501,-1.775225,-0.668966,0.743248,0.006684,1.0,1.0,1.0,1.0,0.288994,0.528840,5.000000,0.999999,6.000000,0.000001,0.0,0.0,0.0,0.0,
-				0.069025,0.819577,-4.149693,-0.780206,0.583758,-0.224677,1.0,1.0,1.0,1.0,0.259235,0.240417,1.0,0.947486,5.000000,0.052514,0.0,0.0,0.0,0.0,
-				0.289179,-0.738212,-4.007422,-0.539140,-0.744102,-0.394421,1.0,1.0,1.0,1.0,0.197435,0.239589,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.069025,0.819577,-4.149693,0.780206,0.583758,-0.224677,1.0,1.0,1.0,1.0,0.259234,0.403175,3.000000,0.947486,4.000000,0.052514,0.0,0.0,0.0,0.0,
-				-0.289179,-0.738212,-4.007422,0.539140,-0.744102,-0.394421,1.0,1.0,1.0,1.0,0.197435,0.404002,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.080256,-0.834016,-2.258967,-0.620716,-0.755730,-0.208625,1.0,1.0,1.0,1.0,0.186291,0.307189,1.0,0.974597,0.0,0.019646,5.000000,0.005757,0.0,0.0,
-				0.064272,0.696954,-2.479152,-0.745140,0.645344,-0.168157,1.0,1.0,1.0,1.0,0.246816,0.305113,1.0,0.934670,0.0,0.065330,6.000000,0.000000,0.0,0.0,
-				-0.064272,0.696954,-2.479152,0.745140,0.645344,-0.168157,1.0,1.0,1.0,1.0,0.246816,0.338479,5.000000,0.934670,0.0,0.065330,6.000000,0.000000,0.0,0.0,
-				-0.080256,-0.834016,-2.258967,0.620716,-0.755730,-0.208625,1.0,1.0,1.0,1.0,0.186291,0.336403,5.000000,0.974597,0.0,0.019646,1.0,0.005757,0.0,0.0,
-				-0.289179,-0.738212,-4.007422,0.539140,-0.744102,-0.394421,1.0,1.0,1.0,1.0,0.197435,0.404002,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.069025,0.819577,-4.149693,0.780206,0.583758,-0.224677,1.0,1.0,1.0,1.0,0.259234,0.403175,5.000000,0.947486,1.0,0.052514,0.0,0.0,0.0,0.0,
-				-0.289179,-0.738212,-4.007422,0.539140,-0.744102,-0.394421,1.0,1.0,1.0,1.0,0.103157,0.602877,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.475589,-0.677053,-3.818061,-0.721763,-0.614673,-0.318125,1.0,1.0,1.0,1.0,0.053313,0.596845,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,0.711744,-2.126995,0.0,0.870998,-0.491256,1.0,1.0,1.0,1.0,0.241692,0.545530,0.0,0.335892,5.000000,0.332054,1.0,0.332054,6.000000,0.000000,
-				0.0,1.175574,-1.274198,0.0,0.998535,-0.053804,1.0,1.0,1.0,1.0,0.241688,0.507264,5.000000,0.335481,1.0,0.335481,0.0,0.329038,6.000000,0.000000,
-				0.0,0.869638,-0.119901,0.0,0.338969,-0.940764,1.0,1.0,1.0,1.0,0.241683,0.460419,0.0,0.542071,2.000000,0.457727,6.000000,0.000202,0.0,0.0,
-				1.110468,0.759973,-0.167663,0.023743,0.075045,-0.996887,1.0,1.0,1.0,1.0,0.195568,0.462725,0.0,0.330388,1.0,0.323922,3.000000,0.182090,2.000000,0.163599,
-				-1.110468,0.759973,-0.167663,-0.023743,0.075045,-0.996887,1.0,1.0,1.0,1.0,0.287799,0.462715,0.0,0.330388,5.000000,0.323922,3.000000,0.182090,2.000000,0.163599,
-				0.0,0.711744,-2.126995,0.0,0.870998,-0.491256,1.0,1.0,1.0,1.0,0.246363,0.321796,0.0,0.335892,5.000000,0.332054,1.0,0.332054,6.000000,0.000000,
-				0.0,-0.904298,-2.032235,0.0,-0.921934,-0.387310,1.0,1.0,1.0,1.0,0.183027,0.321796,0.0,0.338385,5.000000,0.330807,1.0,0.330807,6.000000,0.000001,
-				4.290213,0.265399,3.454810,0.021088,-0.819056,0.573321,1.0,1.0,1.0,1.0,0.769562,0.368180,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-4.290213,0.265399,3.454810,-0.021088,-0.819056,0.573321,1.0,1.0,1.0,1.0,0.732951,0.513124,4.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.982621,0.289443,3.470199,0.088412,-0.796350,0.598315,1.0,1.0,1.0,1.0,0.758564,0.365623,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-3.982621,0.289443,3.470199,-0.088412,-0.796350,0.598315,1.0,1.0,1.0,1.0,0.744636,0.510407,9.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				4.129516,0.799017,3.590607,0.061190,0.406110,0.911740,1.0,1.0,1.0,1.0,0.767517,0.348059,1.0,0.757098,8.000000,0.242902,0.0,0.0,0.0,0.0,
-				-4.129516,0.799017,3.590607,-0.061190,0.406110,0.911740,1.0,1.0,1.0,1.0,0.735123,0.491746,4.000000,0.757098,9.000000,0.242902,0.0,0.0,0.0,0.0,
-				3.681249,0.814663,3.611329,0.135929,0.475112,0.869350,1.0,1.0,1.0,1.0,0.752657,0.343942,8.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-3.681249,0.814663,3.611329,-0.135929,0.475112,0.869350,1.0,1.0,1.0,1.0,0.750912,0.487372,9.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.703517,-1.169276,-2.969525,0.481002,-0.875118,0.052705,1.0,1.0,1.0,1.0,0.279762,0.975410,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.703517,-1.169276,-2.969525,-0.481002,-0.875118,0.052705,1.0,1.0,1.0,1.0,0.105164,0.974404,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.070039,-0.001496,4.081266,0.507401,-0.488723,0.709677,1.0,1.0,1.0,1.0,0.244349,0.730625,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,-1.466883,2.386850,0.0,-0.963530,0.267556,1.0,1.0,1.0,1.0,0.193453,0.803013,6.000000,0.414757,7.000000,0.401419,10.000000,0.183824,0.0,0.0,
-				1.272821,-1.082433,2.166444,0.674306,-0.726463,0.132298,1.0,1.0,1.0,1.0,0.233241,0.800910,6.000000,0.417834,7.000000,0.416791,10.000000,0.165375,0.0,0.0,
-				0.0,-0.763310,3.993403,0.0,-0.923643,0.383190,1.0,1.0,1.0,1.0,0.193811,0.740714,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.070039,-0.001496,4.081266,-0.517380,-0.485458,0.704703,1.0,1.0,1.0,1.0,0.143392,0.730045,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.272821,-1.082433,2.166444,-0.675924,-0.724845,0.132878,1.0,1.0,1.0,1.0,0.153691,0.800452,6.000000,0.417834,7.000000,0.416791,10.000000,0.165375,0.0,0.0,
-				1.021873,0.919451,4.108702,0.266549,0.553789,0.788812,1.0,1.0,1.0,1.0,0.292146,0.713221,3.000000,0.986443,2.000000,0.013557,0.0,0.0,0.0,0.0,
-				0.0,1.894466,2.322657,0.0,0.997772,0.066652,1.0,1.0,1.0,1.0,0.358072,0.768970,6.000000,0.405280,7.000000,0.396193,10.000000,0.198526,0.0,0.0,
-				0.0,1.404947,4.108702,0.0,0.800836,0.598834,1.0,1.0,1.0,1.0,0.333824,0.703071,3.000000,0.937639,2.000000,0.062361,0.0,0.0,0.0,0.0,
-				1.804389,1.524570,1.939726,0.757347,0.639515,-0.131962,1.0,1.0,1.0,1.0,0.299334,0.786421,6.000000,0.412780,7.000000,0.408320,10.000000,0.178901,0.0,0.0,
-				0.0,1.894466,2.322657,0.0,0.997772,0.066652,1.0,1.0,1.0,1.0,0.029237,0.767079,6.000000,0.405280,7.000000,0.396193,10.000000,0.198526,0.0,0.0,
-				-1.021873,0.919451,4.108702,-0.281411,0.546800,0.788537,1.0,1.0,1.0,1.0,0.095799,0.712093,3.000000,0.986443,2.000000,0.013557,0.0,0.0,0.0,0.0,
-				0.0,1.404947,4.108702,0.0,0.800836,0.598834,1.0,1.0,1.0,1.0,0.054241,0.701464,3.000000,0.937639,2.000000,0.062361,0.0,0.0,0.0,0.0,
-				-1.804389,1.524570,1.939726,-0.757347,0.639515,-0.131962,1.0,1.0,1.0,1.0,0.087770,0.785205,6.000000,0.412780,7.000000,0.408320,10.000000,0.178901,0.0,0.0,
-				0.486355,-0.401368,4.341100,0.914731,-0.343547,-0.212561,1.0,1.0,1.0,1.0,0.248482,0.138268,2.000000,0.500568,3.000000,0.499432,0.0,0.0,0.0,0.0,
-				0.693741,0.156716,4.983811,0.937559,0.337382,-0.084170,1.0,1.0,1.0,1.0,0.287131,0.088855,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.577039,-0.727951,4.413287,0.811274,-0.387677,-0.437574,1.0,1.0,1.0,1.0,0.231616,0.122397,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.495650,0.178973,4.668079,0.891690,0.401776,0.208411,1.0,1.0,1.0,1.0,0.294716,0.108793,2.000000,0.511539,3.000000,0.488461,0.0,0.0,0.0,0.0,
-				-0.486355,-0.401368,4.341100,-0.902921,-0.397809,-0.162664,1.0,1.0,1.0,1.0,0.150444,0.140385,2.000000,0.500568,3.000000,0.499432,0.0,0.0,0.0,0.0,
-				-0.693741,0.156716,4.983811,-0.940245,0.330638,-0.081118,1.0,1.0,1.0,1.0,0.113622,0.089166,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.495650,0.178973,4.668079,-0.898892,0.377239,0.222755,1.0,1.0,1.0,1.0,0.105291,0.109551,2.000000,0.511539,3.000000,0.488461,0.0,0.0,0.0,0.0,
-				-0.577039,-0.727951,4.530503,-0.841884,-0.421674,-0.336711,1.0,1.0,1.0,1.0,0.165478,0.117599,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,0.850748,5.203492,0.0,0.999939,0.007935,1.0,1.0,1.0,1.0,0.334505,0.063291,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,0.758369,4.397496,0.0,0.725700,0.687979,1.0,1.0,1.0,1.0,0.344455,0.100127,3.000000,0.526294,2.000000,0.473706,0.0,0.0,0.0,0.0,
-				0.0,0.850748,5.203492,0.0,0.999939,0.007935,1.0,1.0,1.0,1.0,0.065680,0.062566,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,0.758369,4.397496,0.0,0.725700,0.687979,1.0,1.0,1.0,1.0,0.054691,0.099980,3.000000,0.526294,2.000000,0.473706,0.0,0.0,0.0,0.0,
-				0.499749,-0.765297,5.561266,0.725913,-0.537095,0.429579,1.0,1.0,1.0,1.0,0.231299,0.056227,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.714602,0.309831,5.762786,0.808344,0.308481,0.501328,1.0,1.0,1.0,1.0,0.287116,0.053734,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.499749,-0.765297,5.561266,-0.722037,-0.539872,0.432630,1.0,1.0,1.0,1.0,0.168364,0.056515,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-0.714602,0.309831,5.762786,-0.807886,0.308817,0.501877,1.0,1.0,1.0,1.0,0.113701,0.053697,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,0.360647,6.120254,0.0,0.416700,0.909024,1.0,1.0,1.0,1.0,0.296812,0.015622,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,0.360647,6.120254,0.0,0.416700,0.909024,1.0,1.0,1.0,1.0,0.104440,0.015622,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,-0.906509,5.703916,0.002991,-0.748589,0.662984,1.0,1.0,1.0,1.0,0.221686,0.027086,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,-0.906509,5.703916,0.002991,-0.748589,0.662984,1.0,1.0,1.0,1.0,0.178236,0.027962,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,-0.617819,4.139281,-0.049226,-0.826960,-0.560045,1.0,1.0,1.0,1.0,0.199197,0.159530,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,-1.211989,4.138629,-0.024476,-0.805719,-0.591754,1.0,1.0,1.0,1.0,0.199923,0.118186,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				0.0,-0.906509,5.703916,0.002991,-0.748589,0.662984,1.0,1.0,1.0,1.0,0.200206,0.047614,2.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.070039,-0.001496,4.081266,0.507401,-0.488723,0.709677,1.0,1.0,1.0,1.0,0.299537,0.161109,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.021873,0.919451,4.108702,0.266549,0.553789,0.788812,1.0,1.0,1.0,1.0,0.342599,0.152829,3.000000,0.986443,2.000000,0.013557,0.0,0.0,0.0,0.0,
-				-1.070039,-0.001496,4.081266,-0.517380,-0.485458,0.704703,1.0,1.0,1.0,1.0,0.100153,0.163438,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				-1.021873,0.919451,4.108702,-0.281411,0.546800,0.788537,1.0,1.0,1.0,1.0,0.055814,0.154408,3.000000,0.986443,2.000000,0.013557,0.0,0.0,0.0,0.0,
-				0.0,1.404947,4.108702,0.0,0.800836,0.598834,1.0,1.0,1.0,1.0,0.377828,0.109881,3.000000,0.937639,2.000000,0.062361,0.0,0.0,0.0,0.0,
-				0.0,1.404947,4.108702,0.0,0.800836,0.598834,1.0,1.0,1.0,1.0,0.020096,0.109546,3.000000,0.937639,2.000000,0.062361,0.0,0.0,0.0,0.0,
-				0.0,-0.763310,3.993403,0.0,-0.923643,0.383190,1.0,1.0,1.0,1.0,0.199373,0.172532,3.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.067643,2.512717,-3.465766,-0.458937,0.824335,0.331370,1.0,1.0,1.0,1.0,0.864135,0.242702,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.446329,2.894198,-4.510548,0.304727,0.625721,-0.718009,1.0,1.0,1.0,1.0,0.876593,0.279498,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				2.915142,1.977110,-3.989632,-0.740593,-0.172369,-0.649403,1.0,1.0,1.0,1.0,0.889414,0.242618,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.446329,2.894198,-4.510548,0.304727,0.625721,-0.718009,1.0,1.0,1.0,1.0,0.923645,0.279498,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.067643,2.512717,-3.465766,-0.458937,0.824335,0.331370,1.0,1.0,1.0,1.0,0.936194,0.192912,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.303702,2.429882,-3.449794,0.820673,0.369060,0.436201,1.0,1.0,1.0,1.0,0.917456,0.192665,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.446329,2.894198,-4.510548,0.304727,0.625721,-0.718009,1.0,1.0,1.0,1.0,0.847912,0.279498,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.303702,2.429882,-3.449794,0.820673,0.369060,0.436201,1.0,1.0,1.0,1.0,0.860500,0.242602,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.151202,1.894276,-3.973659,0.532853,-0.637715,-0.556169,1.0,1.0,1.0,1.0,0.834953,0.242518,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.446329,2.894198,-4.510548,0.304727,0.625721,-0.718009,1.0,1.0,1.0,1.0,0.905826,0.279498,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				3.151202,1.894276,-3.973659,0.532853,-0.637715,-0.556169,1.0,1.0,1.0,1.0,0.913046,0.192762,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				2.915142,1.977110,-3.989632,-0.740593,-0.172369,-0.649403,1.0,1.0,1.0,1.0,0.894502,0.192533,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.688121,-1.340205,0.875092,0.502335,-0.151494,0.851283,1.0,1.0,1.0,1.0,0.962603,0.279498,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.299561,-1.792977,0.335253,-0.815302,-0.578845,-0.013459,1.0,1.0,1.0,1.0,0.936921,0.271077,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.535620,-1.875812,0.351226,0.272011,-0.960387,0.060091,1.0,1.0,1.0,1.0,0.936921,0.279498,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.452062,-1.257370,0.859119,-0.584979,0.230049,0.777703,1.0,1.0,1.0,1.0,0.962603,0.271077,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.688121,-1.340205,0.875092,0.502335,-0.151494,0.851283,1.0,1.0,1.0,1.0,0.917456,0.048869,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.452062,-1.257370,0.859119,-0.584979,0.230049,0.777703,1.0,1.0,1.0,1.0,0.936194,0.048520,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.535620,-1.875812,0.351226,0.272011,-0.960387,0.060091,1.0,1.0,1.0,1.0,0.834952,0.048832,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.688121,-1.340205,0.875092,0.502335,-0.151494,0.851283,1.0,1.0,1.0,1.0,0.860500,0.048850,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.535620,-1.875812,0.351226,0.272011,-0.960387,0.060091,1.0,1.0,1.0,1.0,0.913822,0.049061,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.299561,-1.792977,0.335253,-0.815302,-0.578845,-0.013459,1.0,1.0,1.0,1.0,0.895278,0.049384,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.299561,-1.792977,0.335253,-0.815302,-0.578845,-0.013459,1.0,1.0,1.0,1.0,0.889414,0.049282,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
-				1.452062,-1.257370,0.859119,-0.584979,0.230049,0.777703,1.0,1.0,1.0,1.0,0.864135,0.049299,5.000000,1.0,0.0,0.0,0.0,0.0,0.0,0.0
-			],
-			"parts" : [
-				{
-					"id" : "mpart1",
-					"type" : "TRIANGLES",
-					"indices" : [
-						0,1,2,1,0,3,0,4,5,5,3,0,0,6,4,6,0,2,2,7,6,7,2,1,8,9,10,9,8,11,7,12,
-						6,12,7,13,11,8,14,11,14,15,16,5,17,17,5,4,17,4,12,4,6,12,12,16,17,16,12,13,18,19,20,19,
-						18,21,22,23,24,24,23,25,26,27,28,27,26,29,30,31,32,31,30,33,34,35,36,36,35,37,38,39,40,39,38,41,
-						42,43,44,43,42,45,46,47,48,47,46,49,50,21,51,18,51,21,24,52,53,52,24,25,29,54,27,54,29,55,56,33,
-						30,33,56,57,47,58,42,42,58,59,60,61,62,60,62,63,64,35,65,35,64,39,39,37,35,37,39,41,47,44,48,44,
-						47,42,66,44,67,44,66,48,41,68,37,37,68,69,70,71,72,71,70,73,74,75,76,75,74,77,78,67,79,67,78,66,
-						68,80,69,69,80,81,73,82,71,82,73,83,84,77,74,77,84,85,78,79,86,80,87,81,88,85,89,84,89,85,90,82,
-						83,90,83,91,92,93,94,94,93,95,96,97,98,98,97,99,100,101,102,101,100,103,104,105,100,100,105,103,102,95,93,95,
-						102,101,99,104,98,104,99,105,93,106,107,106,93,92,98,108,96,108,98,109,110,111,112,110,112,92,111,110,113,113,110,96,
-						100,114,115,114,100,102,100,116,104,116,100,115,107,102,93,102,107,114,109,104,116,104,109,98,115,117,118,117,115,114,119,115,
-						118,115,119,116,114,107,117,107,106,117,109,116,119,109,119,108,118,112,111,112,118,117,113,118,111,118,113,119,117,106,112,106,
-						92,112,108,119,113,113,96,108,120,121,122,120,123,121,122,124,120,125,120,124,126,121,123,121,126,127,128,124,129,124,128,125,
-						130,131,132,131,130,133,134,135,136,135,134,137,138,132,139,132,131,139,136,138,139,139,134,136,140,141,142,142,130,140,141,143,
-						142,143,135,142,144,130,142,144,133,130,135,144,142,137,144,135,145,146,132,145,132,138,147,145,136,145,138,136,148,149,150,151,
-						149,148,152,153,154,152,155,153,156,151,157,157,151,148,155,158,159,159,153,155,156,160,161,160,156,157,158,162,159,162,158,163,
-						161,150,149,150,161,160,163,154,162,154,163,152,164,165,166,165,164,167,168,169,170,169,168,171,172,166,173,166,172,164,174,170,
-						175,175,170,169,176,165,167,165,176,177,178,168,179,168,178,171,180,172,173,172,180,181,182,175,183,175,182,174,222,223,224,222,
-						224,225,226,227,228,229,228,227,384,385,386,388,389,390,166,385,384,385,166,165,170,388,168,388,170,389,402,173,166,402,166,384,
-						389,170,403,174,403,170,404,165,177,165,404,385,405,168,388,168,405,179,406,180,173,173,402,406,182,407,174,407,403,174,611,612,
-						613,612,611,614,615,612,614,612,615,616,617,618,619,618,617,620,621,622,623,622,621,624,151,156,611,611,613,151,158,155,615,615,
-						155,616,149,617,161,620,617,149,622,152,163,622,624,152,151,620,149,620,151,613,624,155,152,155,624,616,161,617,156,617,611,156,
-						622,163,158,622,158,615,625,626,627,626,625,628,629,630,631,630,629,632,633,628,634,628,633,626,635,631,630,631,635,636,637,626,
-						638,626,637,627,639,630,632,630,639,640,641,638,633,638,626,633,640,642,635,640,635,630,641,637,638,637,641,643,639,642,640,642,
-						639,644,627,645,625,645,627,646,632,645,646,645,632,629,647,627,637,647,646,627,632,647,639,646,647,632,628,625,648,648,649,628,
-						629,631,650,631,651,650,628,649,634,649,652,634,651,636,653,651,631,636,654,625,645,625,654,648,629,654,645,654,629,650
-					]
-				},
-				{
-					"id" : "mpart2",
-					"type" : "TRIANGLES",
-					"indices" : [
-						184,185,186,185,184,187,188,189,190,189,188,191,192,184,186,184,192,193,194,189,195,189,194,190,192,196,193,196,192,197,194,196,
-						197,196,194,195,198,199,200,199,198,201,202,203,204,203,202,205,201,206,207,207,199,201,208,205,209,202,209,205,206,210,207,209,
-						211,208,212,210,206,210,212,213,212,211,213,211,212,208,187,214,215,214,187,184,191,216,189,216,191,217,218,193,196,193,218,219,
-						196,195,220,220,195,221,346,347,348,347,346,349,350,351,352,351,350,353,354,355,347,355,348,347,356,357,350,356,350,352,358,359,
-						360,359,358,361,362,363,364,363,362,365,359,361,366,361,367,366,365,362,368,365,368,369,358,370,361,370,358,371,363,370,371,370,
-						363,365,416,417,418,417,416,419,420,421,422,421,420,423,424,425,426,425,424,427,428,429,430,429,428,431,432,433,434,433,432,435,
-						439,440,441,442,443,444,442,444,445,449,450,451,452,418,453,453,418,417,458,442,459,442,458,443,443,462,463,462,443,458,466,467,
-						468,467,466,469,466,474,475,475,469,466,435,478,433,478,479,433,435,482,483,483,478,435,453,486,487,487,452,453,427,490,425,490,
-						427,491,430,492,493,492,430,429,494,495,462,462,495,463,475,474,498,498,474,499,483,502,503,502,483,482,487,506,507,506,487,486,
-						510,511,512,511,510,513,512,511,518,518,511,519,522,523,518,522,518,519,526,510,527,510,526,513,527,512,530,512,527,510,518,530,
-						512,530,518,523,511,526,532,526,511,513,532,519,511,519,532,522,534,535,536,535,534,537,536,542,543,542,536,535,546,547,548,549,
-						548,547,548,554,555,554,548,549,558,559,560,561,560,559,560,561,566,567,566,561,543,349,346,349,543,542,555,572,573,572,555,554,
-						574,575,576,575,574,577,578,573,572,573,578,579,580,576,581,576,580,574,566,567,582,583,582,567,586,587,583,587,582,583,588,589,
-						590,588,590,591,523,522,367,366,367,522,594,579,578,595,579,594,580,581,594,581,595,594,596,597,595,597,579,595,598,595,581,598,
-						596,595,599,586,600,586,599,587,599,600,589,599,589,588,219,218,609,610,220,221
-					]
-				},
-				{
-					"id" : "mpart3",
-					"type" : "TRIANGLES",
-					"indices" : [
-						230,231,232,231,230,233,234,235,236,235,234,237,238,239,240,240,239,241,242,243,244,244,243,245,246,247,248,247,246,249,250,251,
-						252,251,250,253,254,255,256,255,254,257,258,259,260,259,258,261,262,247,263,262,263,264,250,265,266,265,267,266,249,268,247,247,
-						268,263,269,253,250,250,266,269,270,254,256,270,256,271,272,261,273,258,273,261,274,275,276,275,274,277,278,279,280,279,278,281,
-						276,282,283,282,276,275,284,281,285,281,284,279,286,287,240,286,240,288,289,290,243,290,291,243,287,292,238,287,238,240,293,289,
-						242,289,243,242,294,230,295,232,295,230,296,236,235,296,235,297,298,299,300,299,298,301,302,303,304,303,302,305,306,307,308,307,
-						306,309,310,311,312,311,310,313,314,294,295,294,314,315,316,297,317,297,316,296,318,308,319,308,318,306,313,320,321,320,313,310,
-						322,323,324,324,323,325,326,327,328,326,328,329,330,309,331,309,330,307,332,312,311,312,332,333,334,335,336,335,334,337,338,339,
-						340,339,338,341,342,343,318,342,318,319,321,320,344,345,344,320,372,373,374,373,372,375,376,377,378,377,376,379,380,375,372,375,
-						380,381,378,382,376,382,378,383,387,381,380,383,391,382,309,306,374,309,374,373,310,312,379,379,312,377,381,392,375,392,381,393,
-						394,383,378,383,394,395,373,375,392,392,309,373,378,377,394,377,312,394,396,374,306,374,396,372,397,379,376,379,397,310,380,396,
-						387,396,380,372,397,382,391,382,397,376,398,331,392,331,309,392,333,399,394,333,394,312,398,393,400,393,398,392,399,395,394,395,
-						399,401,301,268,249,268,301,298,304,269,302,269,304,253,283,323,322,323,283,282,285,326,284,326,285,327,292,337,334,292,334,238,
-						340,293,338,293,242,338,408,409,410,408,410,411,412,413,414,413,412,415,601,306,318,306,601,396,602,310,397,310,602,320,603,396,
-						601,396,603,387,604,397,391,397,604,602,343,605,601,343,601,318,606,345,602,345,320,602,607,603,605,603,601,605,604,608,606,606,
-						602,604
-					]
-				},
-				{
-					"id" : "mpart4",
-					"type" : "TRIANGLES",
-					"indices" : [
-						436,437,438,446,447,448,454,455,456,455,454,457,460,448,447,448,460,461,464,447,465,447,464,460,470,471,472,471,470,473,476,470,
-						477,477,470,472,480,438,437,480,437,481,484,438,485,438,480,485,488,454,489,489,454,456,496,497,464,464,465,496,476,477,500,476,
-						500,501,485,504,484,504,485,505,489,508,488,508,489,509,514,515,516,515,514,517,514,520,521,520,514,516,524,525,520,520,525,521,
-						528,515,517,515,528,529,529,516,515,516,529,531,520,531,524,531,520,516,533,528,514,514,528,517,525,533,521,521,533,514,538,539,
-						540,539,538,541,544,540,545,540,544,538,550,551,552,550,552,553,556,550,557,550,556,551,562,563,564,564,565,562,568,569,563,568,
-						563,562,570,545,571,545,570,544,584,585,569,584,569,568,592,593,525,592,525,524,655,656,657,658,659,660,661,662,663,664,665,666,
-						667,668,669,668,667,670,671,659,672,659,671,660,673,663,662,662,674,673,666,675,676,675,666,665,677,655,657,655,677,678
-					]
-				}
-			]
-		}
-	],
-	"materials" : [
-		{
-			"id" : "knight__Knight_png",
-			"diffuse" : [0.800000,0.800000,0.800000],
-			"emissive" : [0.800000,0.800000,0.800000],
-			"opacity" : 1.000000,
-			"textures" : [
-				{
-					"id" : "Knight_png",
-					"filename" : "Knight.png",
-					"type" : "STANDARD"
-				}
-			]
-		}
-	],
-	"nodes" : [
-		{
-			"id" : "Knight",
-			"rotation" : [-0.707107,0.0,0.0,0.707107],
-			"parts" : [
-				{
-					"meshpartid" : "mpart1",
-					"materialid" : "knight__Knight_png",
-					"bones" : ["shield","sword","skull","neck","upper_arm_l","upper_arm_r","spine_2","spine_3","thumb_l","thumb_r","spine_1"]
-				},
-				{
-					"meshpartid" : "mpart2",
-					"materialid" : "knight__Knight_png",
-					"bones" : ["pelvis","thigh_l","spine_1","spine_2","spine_3","thigh_r","sword","toes_l","toes_r","foot_l","foot_r","shin_l"]
-				},
-				{
-					"meshpartid" : "mpart3",
-					"materialid" : "knight__Knight_png",
-					"bones" : ["thumb_l","lower_arm_l","palm_l","thumb_r","lower_arm_r","palm_r","fingers_l","fingers_r","upper_arm_l","upper_arm_r"]
-				},
-				{
-					"meshpartid" : "mpart4",
-					"materialid" : "knight__Knight_png",
-					"bones" : ["toes_r","foot_r","shin_r","thigh_r","thigh_l","sword_casing"]
-				}
-			]
-		},
-		{
-			"id" : "Armature",
-			"rotation" : [-0.707107,0.0,0.0,0.707107],
-			"children" : [
-				,
-				{
-					"id" : "global",
-					"translation" : [0.0,0.400000,-9.400001],
-					"rotation" : [0.500000,-0.500000,0.500000,0.500000],
-					"children" : [
-						,
-						{
-							"id" : "knee_pole_l",
-							"translation" : [4.600000,-0.856557,5.352602],
-							"rotation" : [0.707107,0.000000,0.707107,-0.000000]
-						},
-						{
-							"id" : "knee_pole_r",
-							"translation" : [4.599999,0.856558,5.352602],
-							"rotation" : [0.707107,0.000000,0.707107,-0.000000]
-						},
-						{
-							"id" : "foot_ctrl_l",
-							"translation" : [0.165545,-1.000000,-0.951962],
-							"rotation" : [-0.000000,0.707107,0.000000,0.707107],
-							"children" : [
-								,
-								{
-									"id" : "ball_ctrl_l",
-									"translation" : [-1.027027,0.000000,0.106204],
-									"rotation" : [0.000000,-0.306326,-0.000000,0.951927],
-									"children" : [
-										,
-										{
-											"id" : "ankle_l",
-											"translation" : [1.077247,0.000000,0.000000],
-											"rotation" : [0.146742,0.788476,-0.218253,0.556001]
-										}
-									]
-								},
-								{
-									"id" : "toe_ctrl_l",
-									"translation" : [-1.027027,0.000000,0.106204],
-									"rotation" : [-0.000000,0.998470,0.000001,0.055300]
-								}
-							]
-						},
-						{
-							"id" : "foot_ctrl_r",
-							"translation" : [0.165545,1.000000,-0.951962],
-							"rotation" : [-0.000000,0.707107,0.000000,0.707107],
-							"children" : [
-								,
-								{
-									"id" : "ball_ctrl_r",
-									"translation" : [-1.027027,-0.000000,0.106204],
-									"rotation" : [0.000000,-0.306326,0.000000,0.951927],
-									"children" : [
-										,
-										{
-											"id" : "ankle_r",
-											"translation" : [1.077247,0.000000,0.000000],
-											"rotation" : [-0.146743,0.788476,0.218253,0.556001]
-										}
-									]
-								},
-								{
-									"id" : "toe_ctrl_r",
-									"translation" : [-1.027027,-0.000000,0.106204],
-									"rotation" : [-0.000000,0.998470,-0.000001,0.055300]
-								}
-							]
-						},
-						{
-							"id" : "body_ctrl",
-							"translation" : [9.400001,0.000001,0.400000],
-							"rotation" : [-0.000000,0.707107,0.000000,0.707107],
-							"children" : [
-								,
-								{
-									"id" : "spine_1",
-									"scale" : [1.000000,1.000000,1.000000],
-									"rotation" : [0.000000,-0.768964,0.000000,0.639292],
-									"children" : [
-										,
-										{
-											"id" : "spine_2",
-											"translation" : [1.121228,0.000000,-0.000000],
-											"scale" : [1.000000,1.0,1.000000],
-											"rotation" : [-0.000000,0.165956,-0.000000,0.986133],
-											"children" : [
-												,
-												{
-													"id" : "spine_3",
-													"translation" : [1.097466,0.000000,0.000000],
-													"rotation" : [-0.000000,0.136505,-0.000000,0.990639],
-													"children" : [
-														,
-														{
-															"id" : "neck",
-															"translation" : [1.145503,0.000000,-0.000000],
-															"scale" : [1.000000,1.0,1.000000],
-															"rotation" : [-0.000000,-0.320332,-0.000000,0.947305],
-															"children" : [
-																,
-																{
-																	"id" : "skull",
-																	"translation" : [0.903913,0.000000,-0.000000],
-																	"scale" : [1.0,1.000000,1.0],
-																	"rotation" : [0.000000,0.047960,0.000000,0.998849]
-																}
-															]
-														}
-													]
-												}
-											]
-										}
-									]
-								},
-								{
-									"id" : "pelvis",
-									"rotation" : [0.000000,0.707107,-0.000000,0.707107],
-									"children" : [
-										,
-										{
-											"id" : "thigh_r",
-											"translation" : [0.599999,0.700000,0.168485],
-											"scale" : [1.000000,1.0,1.000000],
-											"rotation" : [-0.018672,0.002155,0.018671,0.999649],
-											"children" : [
-												,
-												{
-													"id" : "shin_r",
-													"translation" : [4.202970,0.000000,0.000000],
-													"scale" : [1.0,1.000000,1.0],
-													"rotation" : [0.009076,-0.140496,-0.003223,0.990034],
-													"children" : [
-														,
-														{
-															"id" : "foot_r",
-															"translation" : [3.849471,0.000000,-0.000000],
-															"scale" : [1.000000,1.000000,1.0],
-															"rotation" : [0.014203,0.575001,-0.012794,0.817929],
-															"children" : [
-																,
-																{
-																	"id" : "toes_r",
-																	"translation" : [1.077242,0.000000,-0.000000],
-																	"scale" : [1.000000,1.000000,1.0],
-																	"rotation" : [0.000000,0.253211,-0.000000,0.967411]
-																}
-															]
-														}
-													]
-												}
-											]
-										},
-										{
-											"id" : "thigh_l",
-											"translation" : [0.599999,-0.700000,0.168486],
-											"scale" : [1.000000,1.000000,1.000000],
-											"rotation" : [0.018671,0.002155,-0.018671,0.999649],
-											"children" : [
-												,
-												{
-													"id" : "shin_l",
-													"translation" : [4.202970,0.000000,-0.000000],
-													"rotation" : [-0.009076,-0.140496,0.003223,0.990034],
-													"children" : [
-														,
-														{
-															"id" : "foot_l",
-															"translation" : [3.849471,0.000000,-0.000000],
-															"scale" : [1.000000,1.000000,1.0],
-															"rotation" : [-0.014203,0.575001,0.012794,0.817929],
-															"children" : [
-																,
-																{
-																	"id" : "toes_l",
-																	"translation" : [1.077242,0.000000,-0.000000],
-																	"scale" : [1.000000,1.0,1.000000],
-																	"rotation" : [-0.000000,0.253212,0.000000,0.967411]
-																}
-															]
-														}
-													]
-												}
-											]
-										},
-										{
-											"id" : "sword_casing",
-											"translation" : [-0.499982,-1.539510,-1.500015],
-											"scale" : [1.000000,1.000000,1.0],
-											"rotation" : [0.108540,-0.355263,-0.108540,0.922077]
-										}
-									]
-								},
-								{
-									"id" : "torso_ctrl",
-									"translation" : [0.429979,-0.000000,3.231772],
-									"rotation" : [0.000000,0.000000,-0.000000,1.0],
-									"children" : [
-										,
-										{
-											"id" : "arm_pole_l",
-											"translation" : [3.399995,-4.299984,-0.099997],
-											"rotation" : [0.000000,0.000000,-0.000000,1.0]
-										},
-										{
-											"id" : "arm_pole_r",
-											"translation" : [3.399995,4.299984,-0.099997],
-											"rotation" : [0.000000,0.000000,-0.000000,1.0]
-										},
-										{
-											"id" : "hand_ctrl_l",
-											"translation" : [-0.163077,-6.797939,0.150003],
-											"rotation" : [-0.000000,0.000000,-0.707107,0.707107],
-											"children" : [
-												,
-												{
-													"id" : "thumb_l",
-													"translation" : [0.153559,-0.341240,-0.000005],
-													"scale" : [1.0,1.0,1.000000],
-													"rotation" : [-0.111324,0.111323,-0.395905,0.904695]
-												},
-												{
-													"id" : "hand_ik_l",
-													"translation" : [0.000001,0.000000,0.000000],
-													"rotation" : [0.500800,-0.499199,0.500800,0.499199]
-												},
-												{
-													"id" : "finger_ctrl_l",
-													"translation" : [-0.000001,0.000000,-0.000000],
-													"scale" : [1.000000,1.000000,1.0],
-													"rotation" : [-0.081573,0.081573,0.006703,0.993301],
-													"children" : [
-														,
-														{
-															"id" : "finger_ik_l",
-															"translation" : [1.225921,0.000000,-0.000000],
-															"scale" : [1.000000,1.000000,1.0],
-															"rotation" : [0.493780,-0.555915,0.335185,0.578611]
-														}
-													]
-												},
-												{
-													"id" : "shield",
-													"translation" : [0.602061,1.903098,-0.381774],
-													"rotation" : [0.685637,-0.685637,0.172920,-0.172921]
-												}
-											]
-										},
-										{
-											"id" : "hand_ctrl_r",
-											"translation" : [-0.163078,6.797939,0.150003],
-											"rotation" : [0.000000,0.000000,0.707107,0.707107],
-											"children" : [
-												,
-												{
-													"id" : "thumb_r",
-													"translation" : [0.153559,0.341240,-0.000005],
-													"rotation" : [0.111324,0.111323,0.395905,0.904695]
-												},
-												{
-													"id" : "hand_ik_r",
-													"translation" : [0.000001,-0.000000,0.000000],
-													"rotation" : [0.500809,0.499190,0.500809,-0.499190]
-												},
-												{
-													"id" : "finger_ctrl_r",
-													"translation" : [-0.000003,0.000000,-0.000001],
-													"scale" : [1.000000,1.000000,1.000000],
-													"rotation" : [0.081572,0.081572,-0.006703,0.993301],
-													"children" : [
-														,
-														{
-															"id" : "finger_ik_r",
-															"translation" : [1.225923,0.000000,0.000000],
-															"scale" : [1.000000,1.000000,1.000000],
-															"rotation" : [-0.493780,-0.555915,-0.335185,0.578611]
-														}
-													]
-												},
-												{
-													"id" : "sword",
-													"translation" : [0.502061,-0.873099,-0.381775],
-													"rotation" : [0.511707,0.511707,-0.488013,-0.488012]
-												}
-											]
-										},
-										{
-											"id" : "upper_arm_l",
-											"translation" : [0.122852,-1.799986,0.100002],
-											"scale" : [1.000000,1.000000,1.000000],
-											"rotation" : [0.000001,0.053201,-0.665020,0.744928],
-											"children" : [
-												,
-												{
-													"id" : "lower_arm_l",
-													"translation" : [2.523243,0.000000,0.000000],
-													"scale" : [1.000000,1.000000,1.000000],
-													"rotation" : [0.093025,-0.091161,-0.163036,0.977985],
-													"children" : [
-														,
-														{
-															"id" : "palm_l",
-															"translation" : [2.572780,0.000000,-0.000000],
-															"scale" : [1.000000,1.0,1.000000],
-															"rotation" : [-0.054977,0.054977,0.107367,0.991175],
-															"children" : [
-																,
-																{
-																	"id" : "fingers_l",
-																	"translation" : [0.409500,0.000000,-0.000000],
-																	"scale" : [1.000000,1.000000,1.000000],
-																	"rotation" : [-0.121262,0.121264,0.014921,0.985073]
-																}
-															]
-														}
-													]
-												}
-											]
-										},
-										{
-											"id" : "upper_arm_r",
-											"translation" : [0.122852,1.799986,0.100002],
-											"scale" : [1.000000,1.000000,1.000000],
-											"rotation" : [-0.000001,0.053201,0.665020,0.744928],
-											"children" : [
-												,
-												{
-													"id" : "lower_arm_r",
-													"translation" : [2.523243,0.000000,-0.000000],
-													"scale" : [1.000000,1.0,1.0],
-													"rotation" : [-0.093025,-0.091161,0.163036,0.977985],
-													"children" : [
-														,
-														{
-															"id" : "palm_r",
-															"translation" : [2.572780,0.000000,0.000000],
-															"scale" : [1.000000,1.0,1.000000],
-															"rotation" : [0.054977,0.054977,-0.107367,0.991175],
-															"children" : [
-																,
-																{
-																	"id" : "fingers_r",
-																	"translation" : [0.409500,0.000000,-0.000000],
-																	"scale" : [1.0,1.000000,1.0],
-																	"rotation" : [0.121262,0.121264,-0.014921,0.985073]
-																}
-															]
-														}
-													]
-												}
-											]
-										}
-									]
-								}
-							]
-						}
-					]
-				}
-			]
-		}
-	],
-	"animations" : [
-		{
-			"id" : "Attack",
-			"bones" : [
-				{
-					"boneId" : "Armature",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "knee_pole_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "foot_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.165546,-1.925576,-1.182647],
-							"rotation" : [0.120224,0.696811,0.120225,0.696811]
-						}
-					]
-				},
-				{
-					"boneId" : "toe_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "ankle_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1233.333374
-						}
-					]
-				},
-				{
-					"boneId" : "global",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "spine_1",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1233.333374
-						}
-					]
-				},
-				{
-					"boneId" : "spine_2",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.000000,0.165955,-0.000000,0.986133]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.000000,0.165955,-0.000000,0.986133]
-						}
-					]
-				},
-				{
-					"boneId" : "spine_3",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.000000,0.136504,-0.000000,0.990640]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.000000,0.136504,-0.000000,0.990640]
-						}
-					]
-				},
-				{
-					"boneId" : "neck",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.004473,-0.319992,0.045682,0.946308]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.004523,-0.319985,0.046200,0.946285]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.004648,-0.319965,0.047477,0.946228]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.004848,-0.319932,0.049519,0.946133]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.005099,-0.319890,0.052083,0.946008]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.005390,-0.319840,0.055048,0.945856]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.005680,-0.319784,0.058013,0.945696]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.005940,-0.319733,0.060671,0.945544]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.006136,-0.319694,0.062674,0.945426]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.006267,-0.319667,0.064007,0.945345]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.006317,-0.319656,0.064525,0.945313]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.005969,-0.319727,0.060962,0.945528]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.005299,-0.319845,0.054133,0.945907]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.004744,-0.319948,0.048451,0.946184]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.004473,-0.319993,0.045682,0.946308]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.004473,-0.319993,0.045682,0.946307]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.004521,-0.318988,0.045677,0.946647]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.004746,-0.314324,0.045654,0.948206]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.005315,-0.302520,0.045594,0.952037]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.005886,-0.290596,0.045524,0.955744]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.006295,-0.281928,0.045467,0.958337]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.006444,-0.278760,0.045445,0.959263]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.006373,-0.280263,0.045455,0.958825]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.006161,-0.284752,0.045485,0.957502]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.005869,-0.290901,0.045524,0.955651]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.005527,-0.298077,0.045567,0.953438]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.005160,-0.305722,0.045610,0.951014]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.004837,-0.312434,0.045645,0.948830]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.004617,-0.317010,0.045668,0.947311]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.004510,-0.319228,0.045678,0.946566]
-						}
-					]
-				},
-				{
-					"boneId" : "skull",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "pelvis",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.000000,0.707107,0.000000,0.707107]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.000000,0.707107,0.000000,0.707107]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.000075,0.707107,-0.000075,0.707107]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.000422,0.707107,-0.000422,0.707107]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.000362,0.707107,-0.000362,0.707107]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.000798,0.707106,-0.000798,0.707106]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.000607,0.707107,-0.000607,0.707107]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.000133,0.707107,0.000133,0.707107]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.000185,0.707107,-0.000185,0.707107]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.000721,0.707106,-0.000721,0.707106]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.000232,0.707107,-0.000232,0.707107]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.000303,0.707107,0.000303,0.707107]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.000316,0.707107,0.000316,0.707107]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.000231,0.707107,-0.000231,0.707107]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.000079,0.707107,-0.000079,0.707107]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.000015,0.707107,-0.000015,0.707107]
-						}
-					]
-				},
-				{
-					"boneId" : "thigh_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.042473,0.292708,0.056252,0.953601]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.042336,0.294323,0.055831,0.953134]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.041993,0.298271,0.054797,0.951981]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.041425,0.304538,0.053146,0.950114]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.040680,0.312327,0.051080,0.947728]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.039774,0.321212,0.048703,0.944917]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.038821,0.329989,0.046345,0.942047]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.037929,0.337803,0.044244,0.939411]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.037232,0.343664,0.042671,0.937384]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.036758,0.347555,0.041629,0.936014]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.036571,0.349068,0.041226,0.935476]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.038199,0.317514,0.041812,0.946561]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.041038,0.252343,0.043429,0.965791]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.043074,0.194086,0.044710,0.979018]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.043852,0.163711,0.045548,0.984480]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.043800,0.168340,0.045854,0.983687]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.043647,0.181258,0.046760,0.981353]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.043429,0.198773,0.048080,0.977902]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.043166,0.219834,0.049774,0.973310]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.042912,0.241316,0.051608,0.968123]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.042691,0.261871,0.053479,0.962674]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.042527,0.278137,0.055077,0.958018]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.042426,0.290184,0.056285,0.954372]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.042378,0.296957,0.056974,0.952247]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.042404,0.299198,0.056705,0.951560]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.042613,0.297515,0.054206,0.952224]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.043293,0.292280,0.048290,0.954131]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.044140,0.285560,0.042735,0.956390]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.044849,0.279962,0.038872,0.958175]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.045133,0.277512,0.037531,0.958927]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.045003,0.278378,0.038130,0.958659]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.044629,0.280743,0.039965,0.957912]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.044155,0.283571,0.042576,0.956987]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.043652,0.286450,0.045739,0.956007]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.043175,0.289070,0.049244,0.955065]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.042811,0.290970,0.052459,0.954333]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.042600,0.292049,0.054741,0.953885]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.042504,0.292545,0.055862,0.953672]
-						}
-					]
-				},
-				{
-					"boneId" : "shin_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.007821,-0.521504,-0.011965,0.853129]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.007815,-0.522601,-0.011990,0.852457]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.007801,-0.525248,-0.012052,0.850828]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.007779,-0.529382,-0.012148,0.848261]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.007750,-0.534401,-0.012263,0.845107]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.007715,-0.539926,-0.012388,0.841586]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.007687,-0.545126,-0.012509,0.838226]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.007660,-0.549600,-0.012612,0.835297]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.007638,-0.552859,-0.012685,0.833143]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.007625,-0.554967,-0.012733,0.831740]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.007620,-0.555771,-0.012751,0.831203]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.007851,-0.528602,-0.012196,0.848746]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.008538,-0.462770,-0.011008,0.886369]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.008502,-0.397953,-0.009212,0.917320]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.008551,-0.360412,-0.008270,0.932718]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.008526,-0.367143,-0.008423,0.930087]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.008465,-0.385566,-0.008853,0.922599]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.008389,-0.409787,-0.009427,0.912094]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.008282,-0.437893,-0.010085,0.898932]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.008141,-0.465451,-0.010705,0.884971]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.007989,-0.490692,-0.011261,0.871224]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.007908,-0.509715,-0.011716,0.860227]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.007824,-0.523430,-0.012022,0.851948]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.007768,-0.530994,-0.012184,0.847252]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.007775,-0.531274,-0.012198,0.847076]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.007834,-0.519168,-0.011912,0.854553]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.008075,-0.486261,-0.011219,0.873704]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.008270,-0.449615,-0.010393,0.893124]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.008325,-0.421146,-0.009672,0.906903]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.008362,-0.409857,-0.009404,0.912063]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.008341,-0.414649,-0.009513,0.909893]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.008288,-0.428469,-0.009836,0.903465]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.008222,-0.446465,-0.010262,0.894704]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.008134,-0.466457,-0.010727,0.884441]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.008022,-0.486682,-0.011180,0.873471]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.007921,-0.503505,-0.011553,0.863879]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.007867,-0.514477,-0.011810,0.857387]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.007832,-0.519718,-0.011925,0.854219]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.033145,0.652613,0.013930,0.756838]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.033081,0.652327,0.013841,0.757089]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.032931,0.651599,0.013627,0.757726]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [3.849470,0.000001,0.000000],
-							"rotation" : [0.032693,0.650350,0.013287,0.758814]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [3.849470,0.000001,0.000000],
-							"rotation" : [0.032392,0.648683,0.012860,0.760261]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [3.849470,0.000001,0.000000],
-							"rotation" : [0.032043,0.646652,0.012367,0.762011]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [3.849470,0.000001,0.000000],
-							"rotation" : [0.031714,0.644403,0.011899,0.763936]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [3.849470,0.000001,0.000000],
-							"rotation" : [0.031414,0.642249,0.011475,0.765766]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [3.849470,0.000001,0.000000],
-							"rotation" : [0.031183,0.640536,0.011152,0.767214]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [3.849470,0.000001,0.000000],
-							"rotation" : [0.031030,0.639342,0.010938,0.768218]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.030972,0.638863,0.010855,0.768620]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.032913,0.639600,0.013616,0.767883]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.036622,0.633137,0.018950,0.772940]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.039985,0.623480,0.023708,0.780456]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.041518,0.615703,0.025932,0.786456]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.041253,0.617707,0.025549,0.784910]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.040506,0.623045,0.024465,0.780753]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.039453,0.629745,0.022938,0.775460]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [3.849470,0.000001,0.000000],
-							"rotation" : [0.038114,0.637167,0.021015,0.769496]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [3.849470,0.000001,0.000000],
-							"rotation" : [0.036667,0.644029,0.018953,0.763887]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.035216,0.649768,0.016884,0.759129]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.034033,0.653670,0.015195,0.755861]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.033134,0.656320,0.013915,0.753626]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.032624,0.657677,0.013187,0.752478]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.032830,0.656900,0.013478,0.753142]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.034664,0.651161,0.016096,0.757977]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.039154,0.635431,0.022491,0.770837]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.043493,0.618126,0.028697,0.784350]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.046438,0.604717,0.032972,0.794402]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.047503,0.599419,0.034516,0.798279]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.047015,0.601677,0.033811,0.796638]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.045547,0.608201,0.031695,0.791841]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.043501,0.616725,0.028747,0.785450]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.041043,0.626200,0.025220,0.778173]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.038356,0.635825,0.021376,0.770583]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.035954,0.643950,0.017943,0.764012]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.034262,0.649229,0.015526,0.759662]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.033432,0.651752,0.014341,0.757559]
-						}
-					]
-				},
-				{
-					"boneId" : "toes_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.126952,0.250929,0.033253,0.959068]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.126941,0.250928,0.033250,0.959070]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.126914,0.250926,0.033243,0.959074]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.126873,0.250963,0.033228,0.959071]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.126822,0.251017,0.033207,0.959064]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.126758,0.251005,0.033192,0.959076]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.126694,0.250995,0.033177,0.959088]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.126638,0.250986,0.033164,0.959098]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.126597,0.250980,0.033153,0.959105]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.126569,0.250976,0.033147,0.959110]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.126559,0.250975,0.033144,0.959112]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.126388,0.250954,0.033104,0.959141]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.125815,0.251061,0.032978,0.959193]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.125138,0.251146,0.032819,0.959265]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.124660,0.251161,0.032699,0.959327]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.124784,0.251151,0.032731,0.959313]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.125110,0.251130,0.032815,0.959273]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.125519,0.251131,0.032917,0.959216]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.125967,0.251069,0.033016,0.959170]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.126376,0.250973,0.033100,0.959138]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.126714,0.250980,0.033185,0.959089]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.126939,0.250946,0.033247,0.959066]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.127092,0.250910,0.033291,0.959053]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.127175,0.250937,0.033309,0.959035]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.127096,0.250997,0.033280,0.959030]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.126572,0.250945,0.033153,0.959118]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.125013,0.251122,0.032777,0.959289]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.123161,0.251189,0.032314,0.959527]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.121686,0.251223,0.031939,0.959718]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.121087,0.251251,0.031786,0.959792]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.121359,0.251239,0.031855,0.959759]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.122133,0.251205,0.032054,0.959662]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.123123,0.251166,0.032307,0.959538]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.124198,0.251146,0.032579,0.959395]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.125257,0.251118,0.032839,0.959256]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.126105,0.250982,0.033029,0.959174]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.126625,0.250949,0.033166,0.959109]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.126870,0.250934,0.033231,0.959079]
-						}
-					]
-				},
-				{
-					"boneId" : "thigh_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.200190,0.194813,-0.214452,0.935939]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.199557,0.196842,-0.215028,0.935518]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.198006,0.201803,-0.216435,0.934465]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.195520,0.209668,-0.218653,0.932739]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.192374,0.219447,-0.221383,0.930497]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.188698,0.230643,-0.224466,0.927800]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.185024,0.241741,-0.227464,0.924980]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.181681,0.251640,-0.230082,0.922351]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.179129,0.259078,-0.232010,0.920306]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.177417,0.264024,-0.233271,0.918912]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.176750,0.265951,-0.233756,0.918362]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.185072,0.243573,-0.230205,0.923811]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.202339,0.199628,-0.221235,0.932879]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.216595,0.161011,-0.212327,0.939191]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.223981,0.141091,-0.207232,0.941797]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.223064,0.143125,-0.207720,0.941600]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.220523,0.148771,-0.209032,0.941033]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.217143,0.156323,-0.210677,0.940227]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.213165,0.165339,-0.212474,0.939190]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.209215,0.174519,-0.214098,0.938048]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.205583,0.183351,-0.215411,0.936865]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.202852,0.190543,-0.216239,0.935834]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.200865,0.195969,-0.216769,0.935019]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.199767,0.199061,-0.217030,0.934540]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.199748,0.200176,-0.216628,0.934400]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.201578,0.199786,-0.214345,0.934617]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.206336,0.197520,-0.208139,0.935462]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.211302,0.193589,-0.201331,0.936665]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.214969,0.189904,-0.196123,0.937689]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.216355,0.188124,-0.194072,0.938155]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.215731,0.188730,-0.194939,0.937998]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.213894,0.190289,-0.197445,0.937579]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.211421,0.191967,-0.200719,0.937103]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.208582,0.193414,-0.204366,0.936653]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.205609,0.194408,-0.208065,0.936290]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.203042,0.194819,-0.211150,0.936074]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.201311,0.194859,-0.213164,0.935983]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.200476,0.194835,-0.214126,0.935948]
-						}
-					]
-				},
-				{
-					"boneId" : "shin_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.007726,-0.538055,0.012345,0.842784]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.007714,-0.540049,0.012391,0.841507]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.007690,-0.544871,0.012506,0.838391]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.007653,-0.552396,0.012686,0.833450]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.007597,-0.561570,0.012897,0.827294]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.007520,-0.571819,0.013121,0.820240]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.007471,-0.581615,0.013360,0.813320]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.007415,-0.590134,0.013556,0.807158]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.007364,-0.596400,0.013690,0.802537]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.007329,-0.600491,0.013778,0.799479]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.007318,-0.602064,0.013813,0.798294]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.007549,-0.580873,0.013415,0.813848]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.008232,-0.531010,0.012638,0.847231]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.008121,-0.482728,0.011165,0.875661]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.008163,-0.455042,0.010440,0.890371]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.008144,-0.458859,0.010528,0.888409]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.008098,-0.469305,0.010772,0.882933]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.008042,-0.482872,0.011093,0.875584]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.007967,-0.498426,0.011455,0.866820]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.007878,-0.513468,0.011792,0.857992]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.007791,-0.526992,0.012092,0.849748]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.007740,-0.537071,0.012331,0.843411]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.007694,-0.544305,0.012493,0.838759]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.007666,-0.548271,0.012579,0.836171]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.007685,-0.547030,0.012563,0.836983]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.007748,-0.534279,0.012259,0.845184]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.008026,-0.499438,0.011541,0.866236]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.008237,-0.460652,0.010665,0.887479]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.008287,-0.430495,0.009889,0.902501]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.008325,-0.418540,0.009603,0.908109]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.008303,-0.423682,0.009721,0.905721]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.008245,-0.438499,0.010067,0.898637]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.008174,-0.457804,0.010527,0.888953]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.008079,-0.479197,0.011026,0.877601]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.007953,-0.500790,0.011508,0.865456]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.007838,-0.518771,0.011904,0.854794]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.007779,-0.530542,0.012181,0.847535]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.007739,-0.536149,0.012303,0.843998]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [0.065379,0.726374,0.125774,0.672523]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.065174,0.726658,0.125483,0.672291]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.064670,0.727321,0.124768,0.671755]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.063861,0.728302,0.123619,0.670982]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [0.062838,0.729410,0.122169,0.670140]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.061644,0.730521,0.120476,0.669346]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.060430,0.731397,0.118755,0.668808]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.059325,0.732036,0.117189,0.668484]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [3.849470,0.000000,-0.000000],
-							"rotation" : [0.058480,0.732425,0.115992,0.668341]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [3.849469,0.000000,-0.000000],
-							"rotation" : [0.057910,0.732634,0.115186,0.668301]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [3.849469,0.000000,-0.000000],
-							"rotation" : [0.057686,0.732702,0.114868,0.668301]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [3.849470,0.000000,-0.000001],
-							"rotation" : [0.057044,0.697429,0.113250,0.705346]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [3.849470,0.000000,-0.000001],
-							"rotation" : [0.061451,0.623161,0.113891,0.771313]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [3.849470,0.000000,-0.000001],
-							"rotation" : [0.039425,0.550777,0.087870,0.829078]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [3.849470,0.000000,-0.000001],
-							"rotation" : [0.032003,0.513781,0.078035,0.853765]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.033394,0.521082,0.080071,0.849086]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.037592,0.541796,0.086048,0.835248]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [0.043721,0.570390,0.094511,0.814746]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.050679,0.604994,0.104116,0.787765]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.055778,0.639890,0.111697,0.758256]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [0.059447,0.673114,0.117456,0.727728]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [0.063621,0.698464,0.122965,0.702125]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [0.065362,0.717015,0.125572,0.682532]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [0.066035,0.727453,0.126676,0.671122]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [0.066373,0.729951,0.127143,0.668282]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [0.066073,0.723627,0.126767,0.675225]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.065890,0.706512,0.126389,0.693199]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [0.065609,0.688019,0.125904,0.711670]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [0.064578,0.673783,0.124721,0.725459]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [0.064309,0.668154,0.124391,0.730727]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [0.064340,0.670596,0.124436,0.728476]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.064514,0.677674,0.124653,0.721843]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.064802,0.686917,0.124991,0.712967]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.065014,0.697244,0.125260,0.702804]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.065100,0.707840,0.125404,0.692097]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [3.849470,0.000000,-0.000000],
-							"rotation" : [0.065187,0.716782,0.125538,0.682799]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [3.849472,0.000000,-0.000001],
-							"rotation" : [0.065340,0.722594,0.125717,0.676597]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [0.065364,0.725409,0.125755,0.673569]
-						}
-					]
-				},
-				{
-					"boneId" : "toes_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.004365,0.253228,0.001184,0.967396]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.004504,0.253223,0.001220,0.967397]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.004837,0.253210,0.001304,0.967398]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.005348,0.253190,0.001433,0.967401]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.005959,0.253167,0.001587,0.967403]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.006624,0.253143,0.001754,0.967405]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.007231,0.253121,0.001908,0.967406]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.007745,0.253103,0.002039,0.967406]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [0.008114,0.253091,0.002133,0.967406]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [0.008350,0.253084,0.002193,0.967406]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [0.008439,0.253081,0.002215,0.967406]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [0.009190,0.297495,0.013906,0.954578]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [0.011536,0.379442,0.042999,0.924144]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [0.010191,0.444582,0.067142,0.893160]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [0.009305,0.473380,0.079772,0.877189]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [0.009283,0.467727,0.076926,0.880470]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [0.009327,0.451067,0.069049,0.889766]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [0.009373,0.426618,0.058408,0.902495]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [0.009082,0.394857,0.045558,0.917567]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [0.008369,0.359962,0.032555,0.932361]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [0.007467,0.324163,0.020662,0.945746]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [0.006744,0.294171,0.012110,0.955652]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [0.005991,0.271307,0.005969,0.962456]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [0.005514,0.258238,0.002649,0.966062]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [0.005016,0.253211,0.001354,0.967397]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [0.003550,0.253238,0.000974,0.967397]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [-0.000296,0.253195,-0.000042,0.967415]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [-0.004365,0.253174,-0.001110,0.967410]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [-0.007417,0.253180,-0.001907,0.967389]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [-0.008589,0.253194,-0.002209,0.967375]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [-0.008070,0.253188,-0.002075,0.967381]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [1.077242,0.000000,-0.000001],
-							"rotation" : [-0.006557,0.253172,-0.001684,0.967398]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [1.077242,0.000000,-0.000001],
-							"rotation" : [-0.004542,0.253200,-0.001151,0.967403]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [-0.002258,0.253205,-0.000553,0.967410]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.000106,0.253170,0.000056,0.967422]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.002129,0.253144,0.000581,0.967426]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.003488,0.253221,0.000953,0.967402]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.004142,0.253233,0.001127,0.967396]
-						}
-					]
-				},
-				{
-					"boneId" : "torso_ctrl",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.000000,0.000000,-0.000000,1.0]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.000000,0.001412,-0.000130,0.999999]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.000001,0.004890,-0.000450,0.999988]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.000002,0.010455,-0.000963,0.999945]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.000001,0.017442,-0.001606,0.999847]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.000000,0.025525,-0.002351,0.999671]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.000002,0.033607,-0.003095,0.999430]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.000002,0.040849,-0.003762,0.999158]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.000001,0.046306,-0.004264,0.998918]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.000000,0.049936,-0.004599,0.998742]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.000000,0.051346,-0.004729,0.998670]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.000002,0.041642,-0.003835,0.999125]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.000016,0.023033,-0.002122,0.999732]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.000003,0.007545,-0.000695,0.999971]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.000000,0.000000,-0.000000,1.0]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.000000,0.000000,-0.000000,1.0]
-						}
-					]
-				},
-				{
-					"boneId" : "ball_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.000000,-0.306326,-0.000000,0.951927]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.000000,-0.306326,-0.000000,0.951927]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.016005,-0.350177,0.005395,0.936531]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.048958,-0.431837,0.018119,0.900440]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.071814,-0.497399,0.023909,0.864213]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.082066,-0.526716,0.026420,0.845658]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.079786,-0.520919,0.025675,0.849481]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.073322,-0.503879,0.023701,0.860330]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.064104,-0.479089,0.020955,0.875171]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.052033,-0.447103,0.017129,0.892803]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.038706,-0.412181,0.012654,0.910192]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.025351,-0.376560,0.008178,0.926009]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.014654,-0.346782,0.004840,0.937819]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.006442,-0.324178,0.002135,0.945972]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.001773,-0.311289,0.000577,0.950314]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.000000,-0.306326,-0.000000,0.951927]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.000000,-0.306326,-0.000000,0.951927]
-						}
-					]
-				},
-				{
-					"boneId" : "knee_pole_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [4.600000,-3.856558,4.352602]
-						}
-					]
-				},
-				{
-					"boneId" : "body_ctrl",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [8.142326,-0.251114,0.400000],
-							"rotation" : [0.032456,0.706362,-0.032456,0.706362]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [8.134995,-0.251114,0.385852],
-							"rotation" : [0.032824,0.706344,-0.032824,0.706344]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [8.116977,-0.251114,0.351129],
-							"rotation" : [0.033732,0.706302,-0.033732,0.706302]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [8.088187,-0.251114,0.295708],
-							"rotation" : [0.035183,0.706231,-0.035183,0.706231]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [8.052061,-0.251114,0.226213],
-							"rotation" : [0.037004,0.706138,-0.037004,0.706138]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [8.010243,-0.251114,0.145798],
-							"rotation" : [0.039111,0.706024,-0.039111,0.706024]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [7.968282,-0.251114,0.065042],
-							"rotation" : [0.041218,0.705904,-0.041218,0.705904]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [7.930519,-0.251114,-0.007734],
-							"rotation" : [0.043106,0.705792,-0.043106,0.705792]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [7.901937,-0.251114,-0.062903],
-							"rotation" : [0.044529,0.705703,-0.044529,0.705703]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [7.882832,-0.251114,-0.099848],
-							"rotation" : [0.045476,0.705643,-0.045476,0.705643]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [7.875374,-0.251114,-0.114300],
-							"rotation" : [0.045844,0.705619,-0.045844,0.705619]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [8.055071,-0.251114,0.111873],
-							"rotation" : [0.043313,0.705779,-0.043313,0.705779]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [8.395898,-0.251114,0.539755],
-							"rotation" : [0.038461,0.706060,-0.038461,0.706060]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [8.679513,-0.251114,0.896353],
-							"rotation" : [0.034424,0.706268,-0.034424,0.706268]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [8.813435,-0.251114,1.067109],
-							"rotation" : [0.032456,0.706362,-0.032456,0.706362]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [8.792298,-0.251114,1.047718],
-							"rotation" : [0.032456,0.706362,-0.032456,0.706362]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [8.731269,-0.251114,0.991908],
-							"rotation" : [0.032456,0.706362,-0.032456,0.706362]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [8.644670,-0.251114,0.912959],
-							"rotation" : [0.032456,0.706362,-0.032456,0.706362]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [8.535726,-0.251114,0.813885],
-							"rotation" : [0.032456,0.706362,-0.032456,0.706362]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [8.419614,-0.251114,0.708504],
-							"rotation" : [0.032456,0.706362,-0.032456,0.706362]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [8.303698,-0.251114,0.603458],
-							"rotation" : [0.032456,0.706362,-0.032456,0.706362]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [8.208163,-0.251114,0.516905],
-							"rotation" : [0.032456,0.706362,-0.032456,0.706362]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [8.136059,-0.251114,0.451534],
-							"rotation" : [0.032456,0.706362,-0.032456,0.706362]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [8.095066,-0.251114,0.414339],
-							"rotation" : [0.032456,0.706362,-0.032456,0.706362]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [8.093094,-0.246245,0.400000],
-							"rotation" : [0.032491,0.705611,-0.032422,0.707111]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [8.157125,-0.223668,0.400000],
-							"rotation" : [0.032650,0.702122,-0.032261,0.710576]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [8.318610,-0.166729,0.400000],
-							"rotation" : [0.033048,0.693240,-0.031853,0.719243]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [8.481133,-0.109439,0.400000],
-							"rotation" : [0.033444,0.684195,-0.031438,0.727853]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [8.598922,-0.067929,0.400000],
-							"rotation" : [0.033727,0.677575,-0.031134,0.734020]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [8.642445,-0.052784,0.400000],
-							"rotation" : [0.033830,0.675146,-0.031022,0.736255]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [8.624319,-0.059969,0.400000],
-							"rotation" : [0.033781,0.676299,-0.031075,0.735196]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [8.570201,-0.081441,0.400000],
-							"rotation" : [0.033635,0.679736,-0.031233,0.732019]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [8.495987,-0.110901,0.400000],
-							"rotation" : [0.033434,0.684428,-0.031448,0.727635]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [8.409206,-0.145348,0.400000],
-							"rotation" : [0.033196,0.689878,-0.031699,0.722469]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [8.316484,-0.182140,0.400000],
-							"rotation" : [0.032941,0.695656,-0.031964,0.716907]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [8.234782,-0.214531,0.400000],
-							"rotation" : [0.032714,0.700705,-0.032196,0.711973]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [8.178863,-0.236666,0.400000],
-							"rotation" : [0.032558,0.704133,-0.032354,0.708583]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [8.151698,-0.247410,0.400000],
-							"rotation" : [0.032482,0.705791,-0.032430,0.706932]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.165545,1.865067,0.605976],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						}
-					]
-				},
-				{
-					"boneId" : "ball_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "ankle_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "toe_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "sword_casing",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1233.333374
-						}
-					]
-				},
-				{
-					"boneId" : "arm_pole_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [2.399996,-4.299984,-0.099997]
-						}
-					]
-				},
-				{
-					"boneId" : "arm_pole_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [3.399995,4.299984,-0.099997]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [3.227129,4.299984,-0.099997]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [2.845441,4.299984,-0.099997]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [2.280967,4.299984,-0.099997]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [1.615764,4.299984,-0.099997]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [0.882281,4.299984,-0.099997]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [0.155013,4.299984,-0.099997]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [-0.519228,4.299984,-0.099997]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [-1.054052,4.299984,-0.099997]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [-1.435156,4.299984,-0.099997]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [-1.598356,4.299984,-0.099997]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [-0.702050,4.131539,-0.089585]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [0.919973,3.548723,-0.029838]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [3.235051,1.746171,0.138812]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [5.403092,-0.515606,0.311373]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [5.397291,-0.607116,0.177426]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [5.377254,-0.644647,-0.107376]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [5.345657,-0.670928,-0.437012]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [5.299980,-0.689696,-0.796553]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [5.241684,-0.702389,-1.141680]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [5.167765,-0.711010,-1.463879]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [5.069034,-0.715916,-1.727582]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [4.942239,-0.718853,-1.933786]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [4.787920,-0.720123,-2.056148]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [4.544704,-0.489423,-2.033041]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [4.058766,0.581571,-1.692268]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [3.222987,2.575728,-0.858303]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [2.434705,4.536870,-0.011180]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [1.876580,6.046758,0.613008]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [1.664734,6.745060,0.866529]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [1.730246,6.622582,0.829058]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [1.921016,6.312499,0.720349]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [2.177798,5.935316,0.574997]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [2.475306,5.525330,0.407912]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [2.792219,5.107330,0.231578]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [3.073225,4.742809,0.076990]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [3.269599,4.480726,-0.029650]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [3.366245,4.347746,-0.081854]
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [-3.152660,-2.434659,-1.849997],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [-3.152660,-2.434659,-1.849997],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [-3.152024,-2.458432,-1.840508],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [-3.149073,-2.568653,-1.796517],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [-3.141630,-2.844514,-1.685675],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [-3.134139,-3.121275,-1.574191],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [-3.128712,-3.321710,-1.493420],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [-3.126732,-3.394958,-1.463944],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [-3.127671,-3.360169,-1.477930],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [-3.130479,-3.256523,-1.519710],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [-3.134331,-3.114513,-1.577021],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [-3.138835,-2.948381,-1.644038],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [-3.143645,-2.770613,-1.715637],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [-3.147879,-2.613508,-1.778700],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [-3.150772,-2.505462,-1.821830],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [-3.152176,-2.452850,-1.842774],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						}
-					]
-				},
-				{
-					"boneId" : "thumb_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.153559,0.166642,-0.243344],
-							"rotation" : [-0.081221,0.785392,-0.383246,0.479255],
-							"scale" : [0.800000,0.800000,0.800000]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [0.153559,0.166642,-0.243344],
-							"rotation" : [-0.081221,0.785392,-0.383246,0.479255],
-							"scale" : [0.800000,0.800000,0.800000]
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ik_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.500000,-0.500000,0.500000,0.500000]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.500001,-0.499999,0.500001,0.499999]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.499999,-0.500001,0.499999,0.500001]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.499999,-0.500001,0.499999,0.500001]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.500004,-0.499996,0.500004,0.499996]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.500014,-0.499986,0.500014,0.499986]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.500013,-0.499987,0.500013,0.499987]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.500023,-0.499977,0.500023,0.499977]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.500029,-0.499971,0.500029,0.499971]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.500040,-0.499960,0.500040,0.499960]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.500084,-0.499916,0.500084,0.499916]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.500056,-0.499944,0.500056,0.499944]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.500013,-0.499987,0.500013,0.499987]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.499994,-0.500006,0.499994,0.500006]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.500000,-0.500000,0.500000,0.500000]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.500000,-0.500000,0.500000,0.500000]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.499998,-0.500002,0.499998,0.500002]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.500006,-0.499994,0.500006,0.499994]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.500009,-0.499991,0.500009,0.499991]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.500007,-0.499993,0.500007,0.499993]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.500020,-0.499980,0.500020,0.499980]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.500020,-0.499980,0.500020,0.499980]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.500005,-0.499995,0.500005,0.499995]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.499994,-0.500006,0.499994,0.500006]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.499999,-0.500001,0.499999,0.500001]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.055614,0.731206,0.060052,0.677229],
-							"scale" : [0.720000,0.720000,0.720000]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.055614,0.731206,0.060052,0.677229],
-							"scale" : [0.720000,0.720000,0.720000]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ik_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1233.333374
-						}
-					]
-				},
-				{
-					"boneId" : "shield",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [-4.167537,2.816641,-1.933273],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [-4.157629,2.759027,-1.713396],
-							"rotation" : [-0.356410,0.521170,0.759594,-0.156112]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [-4.127561,2.621672,-1.257539],
-							"rotation" : [-0.323402,0.513132,0.775315,-0.176051]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [-4.068927,2.406673,-0.604743],
-							"rotation" : [-0.267918,0.497755,0.798234,-0.208045]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [-3.978398,2.140622,0.149996],
-							"rotation" : [-0.194179,0.474018,0.822632,-0.246735]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [-3.846714,1.834749,0.978806],
-							"rotation" : [-0.104497,0.441443,0.843035,-0.288964]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [-3.647629,1.523009,1.824270],
-							"rotation" : [-0.014697,0.403279,0.853233,-0.330370]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [-3.379913,1.234582,2.645396],
-							"rotation" : [0.064862,0.366024,0.854564,-0.362683]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [-3.053156,1.008977,3.339248],
-							"rotation" : [0.123400,0.337217,0.850755,-0.383761]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [-2.643329,0.852226,3.874717],
-							"rotation" : [0.160979,0.317823,0.846085,-0.396502]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [-2.172295,0.788051,4.135114],
-							"rotation" : [0.175086,0.310162,0.843858,-0.401307]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [-1.284920,1.382537,2.366889],
-							"rotation" : [0.047539,0.333629,0.920180,-0.199247]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [-0.215196,2.500611,-0.337675],
-							"rotation" : [-0.564965,0.448185,0.627285,0.294038]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [0.605093,3.566759,-2.694817],
-							"rotation" : [-0.456416,0.160965,0.401550,0.777516]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [1.038395,4.308489,-3.993357],
-							"rotation" : [-0.496556,0.110517,0.221712,0.831902]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [1.107955,4.639654,-3.703498],
-							"rotation" : [-0.489956,0.134071,0.236780,0.828193]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [1.159696,4.879638,-3.028042],
-							"rotation" : [-0.462883,0.213895,0.288026,0.810573]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [1.200895,5.068089,-2.205955],
-							"rotation" : [-0.381918,0.352113,0.391717,0.759416]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [1.233238,5.214155,-1.277682],
-							"rotation" : [-0.376295,0.614766,0.386258,0.575560]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [1.255901,5.315440,-0.363294],
-							"rotation" : [-0.071671,0.738681,0.559650,0.368790]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [1.270964,5.382272,0.506377],
-							"rotation" : [0.121651,0.823532,0.550514,0.062701]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [1.278694,5.416491,1.226397],
-							"rotation" : [0.238575,0.817882,0.509447,-0.120891]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [1.282865,5.434984,1.790319],
-							"rotation" : [0.301913,0.794036,0.473339,-0.233036]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [1.284444,5.442003,2.124745],
-							"rotation" : [0.329597,0.777037,0.454143,-0.285189]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [1.185280,5.318255,2.124260],
-							"rotation" : [0.318920,0.777894,0.457458,-0.289660]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [0.724167,4.738463,1.485937],
-							"rotation" : [0.211968,0.793013,0.516767,-0.243212]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [-0.333668,3.448565,-0.022403],
-							"rotation" : [-0.197789,0.753633,0.626726,-0.011446]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [-1.470535,2.164790,-1.607310],
-							"rotation" : [-0.496400,0.400192,0.704162,0.312394]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [-2.461233,1.212223,-2.828476],
-							"rotation" : [0.750290,-0.282366,-0.510502,-0.311001]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [-3.110132,0.815652,-3.370240],
-							"rotation" : [0.779382,-0.201727,-0.479723,-0.348906]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [-3.450024,0.897958,-3.304581],
-							"rotation" : [0.772414,-0.215677,-0.494923,-0.334532]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [-3.706491,1.128482,-3.128186],
-							"rotation" : [0.749267,-0.261647,-0.537801,-0.284446]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [-3.890077,1.429127,-2.906026],
-							"rotation" : [0.715359,-0.330025,-0.581849,-0.201983]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [-4.018731,1.770316,-2.660322],
-							"rotation" : [0.650139,-0.387048,-0.642594,-0.120770]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [-4.102235,2.128461,-2.408033],
-							"rotation" : [-0.552358,0.443994,0.705059,0.025738]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [-4.145944,2.444157,-2.189369],
-							"rotation" : [-0.466475,0.487159,0.735909,-0.059291]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [-4.161505,2.666900,-2.036285],
-							"rotation" : [-0.408297,0.511084,0.747679,-0.114293]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [-4.166574,2.777616,-1.960138],
-							"rotation" : [-0.379269,0.520975,0.751815,-0.139695]
-						}
-					]
-				},
-				{
-					"boneId" : "thumb_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.047806,0.118592,0.201995,0.971004]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.047806,0.118592,0.201995,0.971004]
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ik_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.499039,-0.500959,-0.499039,0.500959]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.499079,-0.500919,-0.499079,0.500919]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.499581,-0.500419,-0.499581,0.500419]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.500462,0.499538,0.500462,-0.499538]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.500985,0.499013,0.500985,-0.499013]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.499859,-0.500141,-0.499859,0.500141]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.499758,-0.500242,-0.499758,0.500242]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.499195,-0.500804,-0.499195,0.500804]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.498360,-0.501634,-0.498360,0.501634]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.497990,-0.502002,-0.497990,0.502002]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.499457,-0.500543,-0.499457,0.500543]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.500196,0.499804,0.500196,-0.499804]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.499778,-0.500222,-0.499778,0.500222]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.499581,-0.500419,-0.499581,0.500419]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.499862,-0.500138,-0.499862,0.500138]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.499628,-0.500371,-0.499628,0.500371]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.499051,-0.500947,-0.499051,0.500947]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.500048,0.499952,0.500048,-0.499952]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.500676,0.499323,0.500676,-0.499323]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.500383,0.499617,0.500383,-0.499617]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.500343,0.499657,0.500343,-0.499657]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.500410,0.499589,0.500410,-0.499589]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.500302,0.499697,0.500302,-0.499697]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.500134,0.499866,0.500134,-0.499866]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.499886,-0.500114,-0.499886,0.500114]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.499339,-0.500661,-0.499339,0.500661]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.500493,0.499506,0.500493,-0.499506]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.500126,0.499873,0.500126,-0.499873]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.500437,0.499563,0.500437,-0.499563]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.501524,0.498471,0.501524,-0.498471]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.500767,0.499232,0.500767,-0.499232]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.500101,0.499899,0.500101,-0.499899]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.499766,-0.500234,-0.499766,0.500234]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.499588,-0.500412,-0.499588,0.500412]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.499647,-0.500353,-0.499647,0.500353]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.500294,0.499706,0.500294,-0.499706]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.500240,0.499760,0.500240,-0.499760]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.499523,-0.500477,-0.499523,0.500477]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1233.333374
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ik_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1233.333374
-						}
-					]
-				},
-				{
-					"boneId" : "sword",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1233.333374
-						}
-					]
-				},
-				{
-					"boneId" : "upper_arm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.420666,-0.125891,0.802834,-0.403297]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.420666,-0.125891,0.802834,-0.403297]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.418720,-0.125013,0.802589,-0.406074]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.409796,-0.120769,0.801205,-0.418990]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.386151,-0.112337,0.797932,-0.448967]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.361562,-0.105433,0.794606,-0.476191]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.343313,-0.100973,0.792164,-0.494385]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.336494,0.099644,-0.791455,0.500442]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.339747,-0.100234,0.791755,-0.497643]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.349361,-0.102168,0.792788,-0.488872]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.362319,-0.105220,0.794428,-0.475959]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.377176,-0.109279,0.796479,-0.459802]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.392725,-0.114187,0.798694,-0.441379]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.406085,-0.119189,0.800644,-0.424097]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.414930,-0.123190,0.802021,-0.411607]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.419205,-0.125177,0.802625,-0.405450]
-						}
-					]
-				},
-				{
-					"boneId" : "lower_arm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.071812,-0.318112,-0.568924,0.754965]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.071812,-0.318112,-0.568924,0.754965]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.071795,-0.318217,-0.569112,0.754782]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.071713,-0.318702,-0.569979,0.753929]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.071876,-0.317731,-0.568244,0.755632]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.072444,-0.314373,-0.562266,0.761432]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.073004,-0.310851,-0.555949,0.767439]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.073276,-0.309116,-0.552836,0.770357]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.073135,-0.310004,-0.554424,0.768871]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.072765,-0.312323,-0.558576,0.764953]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.072360,-0.314830,-0.563065,0.760660]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.072003,-0.316978,-0.566899,0.756945]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.071768,-0.318379,-0.569402,0.754497]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.071705,-0.318753,-0.570071,0.753839]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.071756,-0.318448,-0.569526,0.754376]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.071794,-0.318217,-0.569113,0.754781]
-						}
-					]
-				},
-				{
-					"boneId" : "palm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.201964,0.003976,-0.093459,0.974915]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.201964,0.003975,-0.093459,0.974915]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.202687,0.003918,-0.095553,0.974563]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.206051,0.003689,-0.105257,0.972857]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.214397,0.003055,-0.131836,0.967803]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.222594,0.002345,-0.160935,0.961533]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.228486,0.001957,-0.183025,0.956186]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.230593,0.001840,-0.191500,0.954019]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.229601,0.001884,-0.187423,0.955067]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.226613,0.002100,-0.175536,0.958034]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.222461,0.002509,-0.159815,0.961751]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.217533,0.002910,-0.142215,0.965632]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.212185,0.003247,-0.124315,0.969285]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.207417,0.003600,-0.109361,0.972114]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.204121,0.003824,-0.099667,0.973851]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.202519,0.003938,-0.095034,0.974648]
-						}
-					]
-				},
-				{
-					"boneId" : "fingers_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.126949,0.593303,-0.445723,0.658184]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.126949,0.593303,-0.445723,0.658184]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.127324,0.591931,-0.447546,0.658110]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.129059,0.585482,-0.455937,0.657781]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.133813,0.569840,-0.475347,0.656827]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.139267,0.555200,-0.492355,0.655701]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.143523,0.545117,-0.503465,0.654807]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.145203,0.541764,-0.507068,0.654438]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.144392,0.543305,-0.505415,0.654619]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.142042,0.548138,-0.500172,0.655131]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.138965,0.555199,-0.492334,0.655782]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.135669,0.563995,-0.482246,0.656463]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.132467,0.573892,-0.470432,0.657111]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.129792,0.582885,-0.459249,0.657640]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.128059,0.589189,-0.451146,0.657970]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.127230,0.592244,-0.447129,0.658130]
-						}
-					]
-				},
-				{
-					"boneId" : "upper_arm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.274086,0.191516,0.902436,0.271675]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.272665,0.171350,0.902416,0.286251]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.252880,0.132837,0.908882,0.303874]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.205048,0.085618,0.921893,0.317393]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.128640,0.048427,0.938199,0.317631]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.028717,0.042334,0.954513,0.293747]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.072323,0.084550,0.967486,0.227139]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.168489,0.140182,0.967302,0.127623]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.250529,0.188290,0.949372,0.021805]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.317934,0.222878,0.919309,-0.064137]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.352563,0.242497,0.898919,-0.094019]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.191684,0.257773,0.917756,0.233523]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.260174,-0.120334,0.540023,0.791330]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.511020,0.121149,0.324669,0.786620]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.336862,0.404077,0.381169,0.760234]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.309395,0.383701,0.380846,0.782307]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.290840,0.358477,0.327600,0.824369]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.244986,0.330646,0.285524,0.865524]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.168627,0.293684,0.264977,0.902830]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.072348,0.249113,0.272935,0.926399]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.030390,0.193636,0.305071,0.931941]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.110143,0.129850,0.345162,0.922968]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.168678,0.074073,0.382379,0.905454]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.201576,0.038530,0.406386,0.890356]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.202963,0.049855,0.404847,0.890179]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.152608,0.174748,0.342023,0.910601]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.272746,0.216921,0.352383,0.868551]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.519452,0.123344,0.624170,0.570410]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.533158,-0.003922,0.808993,0.247501]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.468598,0.040261,0.880570,0.058242]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.413674,0.063774,0.908101,0.012585]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.374328,0.080519,0.923654,0.016068]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.353284,0.093367,0.928826,0.061284]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.338242,0.109902,0.926613,0.122074]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.321143,0.133654,0.919820,0.181480]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.302042,0.159203,0.912158,0.226702]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.285808,0.178574,0.906539,0.254189]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.277220,0.188134,0.903515,0.267236]
-						}
-					]
-				},
-				{
-					"boneId" : "lower_arm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.090222,-0.148174,0.265000,0.948514]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.088647,-0.176617,0.316191,0.927885]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.086265,-0.217687,0.391021,0.890097]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.081177,-0.257895,0.462379,0.844456]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.076973,-0.284569,0.509008,0.808707]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.075600,-0.293903,0.525636,0.794740]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.077904,-0.278499,0.498315,0.817344]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.083052,-0.244860,0.439481,0.860234]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.087644,-0.202432,0.363558,0.905077]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.088901,-0.168449,0.301286,0.934317]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.088295,-0.176358,0.315406,0.928235]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.084194,-0.381227,0.734281,0.555346]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.042168,-0.437060,0.782026,0.442307]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.117507,-0.307747,0.631104,0.702276]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.090984,-0.136552,0.244271,0.955723]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.090080,-0.150459,0.269087,0.947016]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.086813,-0.221323,0.398219,0.885946]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.079960,-0.277121,0.498686,0.817387]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.072714,-0.315002,0.564150,0.759751]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.069649,-0.330690,0.591437,0.732117]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.070359,-0.326628,0.584157,0.739679]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.074260,-0.304686,0.545482,0.777239]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.078416,-0.277980,0.498100,0.817603]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.080556,-0.257612,0.460907,0.845406]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.083883,-0.267709,0.488597,0.826177]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.061733,-0.371211,0.664362,0.645767]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.042842,-0.441170,0.807733,0.388718]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.059353,-0.400037,0.747146,0.527467]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.096532,-0.281684,0.532123,0.792579]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.091846,-0.147439,0.264678,0.948563]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.093508,-0.084485,0.151270,0.980426]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.094225,-0.059080,0.105748,0.988154]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.094088,-0.073350,0.131363,0.984130]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.093083,-0.100179,0.179396,0.974226]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.091668,-0.124017,0.221856,0.962807]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.090819,-0.138303,0.247353,0.954694]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.090456,-0.144600,0.258621,0.950802]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.090276,-0.147329,0.263491,0.949061]
-						}
-					]
-				},
-				{
-					"boneId" : "palm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.123644,0.258094,0.251767,0.924507]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.121263,0.248280,0.236690,0.931467]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.116894,0.221786,0.208022,0.945449]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.109593,0.183197,0.166661,0.962628]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.100138,0.147098,0.119762,0.976725]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.092991,0.131069,0.075082,0.984142]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.090871,0.150759,0.052881,0.982964]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.091558,0.180635,0.042829,0.978342]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.093202,0.209577,0.039628,0.972533]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.094041,0.239907,0.031930,0.965702]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.093321,0.281293,0.004994,0.955060]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.070160,0.565388,-0.136236,0.810465]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.077919,0.485489,-0.311119,0.813286]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.005271,0.261240,-0.473983,0.840872]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.013161,0.039597,-0.475295,0.878836]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.006835,0.080513,-0.469310,0.879329]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.008211,0.214833,-0.468073,0.857139]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.048824,0.414151,-0.365139,0.832327]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.086142,0.475388,-0.075754,0.872265]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.150673,0.471846,0.326387,0.805066]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.130849,0.057922,0.464315,0.874034]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.107043,-0.145038,0.330498,0.926432]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.082130,-0.229249,0.216884,0.945336]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.072836,-0.252772,0.158857,0.951612]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.073846,-0.240782,0.150578,0.955980]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.085508,-0.163519,0.194365,0.963417]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.143233,0.282965,0.257118,0.912855]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.053496,0.496586,-0.043922,0.865223]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.096085,0.604483,-0.132158,0.779681]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.103861,0.607420,-0.070162,0.784431]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.107521,0.586097,-0.038333,0.802160]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.108950,0.543436,-0.008876,0.832303]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.110099,0.491409,0.023138,0.863632]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.111257,0.429899,0.064714,0.893656]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.114425,0.363170,0.119496,0.916916]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.118895,0.308950,0.177544,0.926764]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.121214,0.276896,0.222410,0.926914]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.122975,0.262610,0.244247,0.925341]
-						}
-					]
-				},
-				{
-					"boneId" : "fingers_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.148866,0.108073,0.057674,0.981241]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.147457,0.108467,0.057070,0.981445]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.144959,0.108571,0.057332,0.981790]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.141654,0.109315,0.056794,0.982221]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.138136,0.110947,0.054092,0.982692]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.134704,0.113088,0.048111,0.983235]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.132818,0.116917,0.038889,0.983452]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.131812,0.119199,0.031714,0.983571]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.131373,0.120104,0.026977,0.983661]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.130631,0.120660,0.021682,0.983822]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.128389,0.122350,0.010897,0.984087]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.116388,0.120014,-0.019133,0.985741]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.099852,0.104783,-0.057206,0.987815]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.090334,0.075541,-0.091754,0.988795]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.088953,0.046811,-0.113094,0.988487]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.089668,0.056461,-0.108822,0.988397]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.089670,0.076296,-0.095580,0.988434]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.097877,0.099563,-0.067055,0.987933]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.122165,0.114044,-0.017675,0.985777]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.154603,0.109926,0.042613,0.980917]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.173657,0.075067,0.096217,0.977216]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.161976,0.041069,0.113955,0.979332]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.152775,0.017068,0.120901,0.980689]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.147852,0.004862,0.122616,0.981367]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.146886,0.007859,0.121868,0.981586]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.149154,0.039073,0.116495,0.981150]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.147060,0.099168,0.057538,0.982460]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.126442,0.117207,-0.000563,0.985025]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.114467,0.120315,-0.025983,0.985772]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.120134,0.121415,-0.016707,0.985163]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.123125,0.121665,-0.011668,0.984836]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.125976,0.121950,-0.005849,0.984492]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.128839,0.122002,0.001552,0.984131]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.132412,0.121307,0.012400,0.983666]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.137010,0.119206,0.027137,0.982996]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.141917,0.115107,0.042486,0.982245]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.146119,0.111017,0.051600,0.981663]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.148166,0.108869,0.056095,0.981350]
-						}
-					]
-				}
-			]
-		},
-		{
-			"id" : "Damaged",
-			"bones" : [
-				{
-					"boneId" : "Armature",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "knee_pole_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "foot_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.165546,-1.925576,-1.182647],
-							"rotation" : [0.120224,0.696811,0.120225,0.696811]
-						}
-					]
-				},
-				{
-					"boneId" : "toe_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "ankle_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "global",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "spine_1",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 600.000000
-						}
-					]
-				},
-				{
-					"boneId" : "spine_2",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.000000,0.165955,-0.000000,0.986133]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.000000,0.165955,-0.000000,0.986133]
-						}
-					]
-				},
-				{
-					"boneId" : "spine_3",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.000000,0.136504,-0.000000,0.990640]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.000000,0.136504,-0.000000,0.990640]
-						}
-					]
-				},
-				{
-					"boneId" : "neck",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.004473,-0.319992,0.045682,0.946308]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.004193,-0.325796,0.045709,0.944325]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.003543,-0.339335,0.045771,0.939545]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.002620,-0.358353,0.045839,0.932457]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.001647,-0.377886,0.045876,0.924713]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.000847,-0.393829,0.045893,0.918037]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.000555,-0.399662,0.045898,0.915512]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.000474,-0.401251,0.045898,0.914817]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.000474,-0.401251,0.045898,0.914817]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.000615,-0.398470,0.045897,0.916032]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.001021,-0.390457,0.045894,0.919476]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.001832,-0.374004,0.045863,0.926291]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.002862,-0.353322,0.045820,0.934375]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.003711,-0.335884,0.045757,0.940784]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.004261,-0.324390,0.045703,0.944809]
-						}
-					]
-				},
-				{
-					"boneId" : "skull",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.000000,0.047960,0.000000,0.998849]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.000000,0.032685,-0.000000,0.999466]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.000000,-0.003233,-0.000000,0.999995]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.000000,-0.054081,-0.000000,0.998537]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.000000,-0.106604,-0.000000,0.994301]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.000000,-0.149478,-0.000000,0.988765]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.000000,-0.165111,-0.000000,0.986275]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.000000,-0.167349,-0.000000,0.985898]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.000000,-0.161689,-0.000000,0.986842]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.000000,-0.151166,-0.000000,0.988508]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.000000,-0.136617,-0.000000,0.990624]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.000000,-0.119007,-0.000000,0.992893]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.000000,-0.100739,-0.000000,0.994913]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.000000,-0.080817,-0.000000,0.996729]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.000000,-0.056860,-0.000000,0.998382]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.000000,-0.025955,-0.000000,0.999663]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.000000,0.004437,-0.000000,0.999990]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.000000,0.027980,-0.000000,0.999609]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.000000,0.042620,0.000000,0.999091]
-						}
-					]
-				},
-				{
-					"boneId" : "pelvis",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.000000,0.707107,0.000000,0.707107]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.000128,0.707107,-0.000128,0.707107]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.000468,0.707107,0.000468,0.707107]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.000826,0.707106,0.000826,0.707106]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.000429,0.707107,0.000429,0.707107]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.000657,0.707106,-0.000657,0.707106]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.000324,0.707107,-0.000324,0.707107]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.000222,0.707107,-0.000222,0.707107]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.000222,0.707107,-0.000222,0.707107]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.000410,0.707107,-0.000410,0.707107]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.000432,0.707107,-0.000432,0.707107]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.000766,0.707106,0.000766,0.707106]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.000930,0.707106,0.000930,0.707106]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.000317,0.707107,0.000317,0.707107]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.000090,0.707107,-0.000090,0.707107]
-						}
-					]
-				},
-				{
-					"boneId" : "thigh_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.042473,0.292708,0.056252,0.953601]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.043390,0.291112,0.055944,0.954066]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.045526,0.286796,0.055168,0.955318]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.048527,0.279842,0.053977,0.957298]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.051625,0.271755,0.052633,0.959538]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.054145,0.264256,0.051444,0.961556]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.055062,0.261295,0.050990,0.962337]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.055301,0.259372,0.050853,0.962851]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.055271,0.256369,0.050823,0.963658]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.055215,0.250993,0.050768,0.965078]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.055140,0.243911,0.050695,0.966901]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.055060,0.236418,0.050616,0.968769]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.054991,0.229954,0.050544,0.970331]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.054512,0.227703,0.050707,0.970880]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.053241,0.231714,0.051294,0.969971]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.050707,0.244688,0.052493,0.966851]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.047526,0.262854,0.053996,0.962150]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.044868,0.278402,0.055205,0.957826]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.043137,0.288727,0.055962,0.954801]
-						}
-					]
-				},
-				{
-					"boneId" : "shin_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.007821,-0.521504,-0.011965,0.853129]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.007825,-0.520803,-0.011949,0.853557]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.007838,-0.518502,-0.011897,0.854958]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.007865,-0.514139,-0.011799,0.857590]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.007895,-0.508393,-0.011666,0.861010]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.007925,-0.502373,-0.011526,0.864538]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.007939,-0.499793,-0.011467,0.866033]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.007937,-0.500157,-0.011475,0.865822]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.007924,-0.502838,-0.011538,0.864267]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.007901,-0.507219,-0.011639,0.861702]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.007872,-0.512247,-0.011753,0.858722]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.007850,-0.516422,-0.011849,0.856216]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.007833,-0.519507,-0.011920,0.854347]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.007821,-0.521510,-0.011965,0.853125]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.007814,-0.522721,-0.011993,0.852384]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.007811,-0.523247,-0.012005,0.852061]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.007813,-0.522876,-0.011996,0.852289]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.007816,-0.522268,-0.011982,0.852661]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.007819,-0.521744,-0.011970,0.852982]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.033145,0.652613,0.013930,0.756838]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [3.849470,0.000001,0.000000],
-							"rotation" : [0.033070,0.648663,0.013820,0.760231]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.033056,0.639192,0.013728,0.768214]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.032835,0.625316,0.013425,0.779565]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.032427,0.610354,0.012965,0.791359]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.032204,0.597397,0.012723,0.801198]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.032157,0.592425,0.012675,0.804884]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.032152,0.592985,0.012668,0.804472]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.032223,0.597964,0.012736,0.800774]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.032317,0.606437,0.012830,0.794371]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.032361,0.616813,0.012882,0.786339]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.032541,0.626654,0.013085,0.778508]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.032652,0.634637,0.013227,0.772007]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.032721,0.640551,0.013327,0.767102]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.032786,0.645078,0.013422,0.763295]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.032872,0.648782,0.013548,0.760143]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.032985,0.650862,0.013702,0.758355]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.033068,0.652001,0.013820,0.757371]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.033123,0.652499,0.013899,0.756938]
-						}
-					]
-				},
-				{
-					"boneId" : "toes_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.126952,0.250929,0.033253,0.959068]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.126813,0.250934,0.033216,0.959087]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.126496,0.251003,0.033149,0.959113]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.126067,0.251048,0.033050,0.959161]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.125642,0.251042,0.032941,0.959222]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.125305,0.251041,0.032854,0.959269]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.125183,0.251039,0.032823,0.959287]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.125197,0.251039,0.032827,0.959285]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.125324,0.251040,0.032859,0.959267]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.125545,0.251041,0.032916,0.959236]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.125828,0.251043,0.032989,0.959196]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.126117,0.251046,0.033063,0.959154]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.126366,0.250985,0.033111,0.959136]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.126557,0.250940,0.033149,0.959121]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.126706,0.250934,0.033188,0.959102]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.126830,0.250930,0.033221,0.959085]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.126898,0.250928,0.033239,0.959076]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.126934,0.250928,0.033248,0.959071]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.126949,0.250928,0.033252,0.959069]
-						}
-					]
-				},
-				{
-					"boneId" : "thigh_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.200190,0.194813,-0.214452,0.935939]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.197409,0.194671,-0.214474,0.936554]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.191217,0.193811,-0.214415,0.938030]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.182914,0.191902,-0.214140,0.940138]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.174766,0.189253,-0.213631,0.942339]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.168480,0.186493,-0.212987,0.944178]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.166263,0.185367,-0.212688,0.944859]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.166195,0.183166,-0.213185,0.945189]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.167635,0.178151,-0.214707,0.945549]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.170194,0.169352,-0.217346,0.946105]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.173536,0.158083,-0.220668,0.946679]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.177047,0.146662,-0.223960,0.947094]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.180068,0.137035,-0.226691,0.947316]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.182871,0.132523,-0.228154,0.947070]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.186041,0.134962,-0.228028,0.946138]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.190224,0.146907,-0.225674,0.944089]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.194375,0.164799,-0.221714,0.941224]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.197547,0.180348,-0.218045,0.938566]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.199486,0.190765,-0.215468,0.936690]
-						}
-					]
-				},
-				{
-					"boneId" : "shin_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.007726,-0.538055,0.012345,0.842784]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.007711,-0.540691,0.012406,0.841094]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.007684,-0.546054,0.012534,0.837621]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.007646,-0.552423,0.012680,0.833432]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.007609,-0.557770,0.012798,0.829862]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.007587,-0.560992,0.012871,0.827686]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.007582,-0.561889,0.012892,0.827078]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.007582,-0.561850,0.012891,0.827104]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.007588,-0.561012,0.012872,0.827673]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.007598,-0.559339,0.012834,0.828805]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.007613,-0.556822,0.012775,0.830499]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.007634,-0.553641,0.012703,0.832624]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.007652,-0.550648,0.012635,0.834607]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.007667,-0.548064,0.012575,0.836307]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.007681,-0.545708,0.012521,0.837846]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.007695,-0.543290,0.012465,0.839417]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.007708,-0.541161,0.012416,0.840792]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.007718,-0.539494,0.012378,0.841863]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.007724,-0.538445,0.012354,0.842535]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [0.065379,0.726374,0.125774,0.672523]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [0.063787,0.725019,0.123529,0.674551]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [3.849469,0.000000,0.000000],
-							"rotation" : [0.060223,0.721420,0.118485,0.679624]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [3.849469,0.000000,-0.000000],
-							"rotation" : [0.055345,0.715712,0.111573,0.687201]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [3.849469,0.000000,-0.000001],
-							"rotation" : [0.050301,0.709326,0.104478,0.695278]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [3.849469,0.000000,-0.000001],
-							"rotation" : [0.046245,0.703377,0.098778,0.702399]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [3.849469,0.000000,-0.000000],
-							"rotation" : [0.044799,0.700950,0.096736,0.705198]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [0.044959,0.701266,0.096964,0.704842]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [0.046482,0.703689,0.099100,0.702026]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [0.049092,0.707812,0.102781,0.697157]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [3.849469,0.000000,0.000000],
-							"rotation" : [0.052372,0.712806,0.107430,0.691103]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [3.849469,0.000000,-0.000000],
-							"rotation" : [0.055775,0.717152,0.112213,0.685558]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [3.849470,0.000000,-0.000000],
-							"rotation" : [0.058591,0.720592,0.116192,0.681039]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [3.849470,0.000000,-0.000000],
-							"rotation" : [0.060750,0.723018,0.119241,0.677743]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [3.849470,0.000000,-0.000000],
-							"rotation" : [0.062453,0.724739,0.121645,0.675318]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [3.849470,0.000000,-0.000000],
-							"rotation" : [0.063868,0.725961,0.123641,0.673509]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [0.064677,0.726395,0.124782,0.672753]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [0.065127,0.726486,0.125419,0.672493]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.065330,0.726431,0.125706,0.672479]
-						}
-					]
-				},
-				{
-					"boneId" : "toes_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.004365,0.253228,0.001184,0.967396]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.004536,0.253220,0.001226,0.967397]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.004897,0.253202,0.001315,0.967400]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.005370,0.253182,0.001432,0.967403]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.005829,0.253164,0.001546,0.967404]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.006197,0.253154,0.001639,0.967405]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.006335,0.253151,0.001674,0.967405]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.006322,0.253151,0.001670,0.967405]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.006191,0.253154,0.001638,0.967405]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.005970,0.253160,0.001582,0.967405]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.005701,0.253170,0.001515,0.967404]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.005440,0.253180,0.001450,0.967403]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.005222,0.253190,0.001397,0.967402]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.005049,0.253198,0.001354,0.967400]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.004897,0.253205,0.001317,0.967399]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.004740,0.253212,0.001278,0.967398]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.004592,0.253219,0.001242,0.967397]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.004472,0.253224,0.001212,0.967397]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.004394,0.253227,0.001192,0.967396]
-						}
-					]
-				},
-				{
-					"boneId" : "torso_ctrl",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "ball_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "knee_pole_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [4.600000,-3.856558,4.352602]
-						}
-					]
-				},
-				{
-					"boneId" : "body_ctrl",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [8.142326,-0.251114,0.400000],
-							"rotation" : [0.032456,0.706362,-0.032456,0.706362]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [8.142326,-0.251114,0.327634],
-							"rotation" : [0.032256,0.710685,-0.032655,0.702012]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [8.142326,-0.251114,0.160953],
-							"rotation" : [0.031784,0.720701,-0.033115,0.691725]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [8.142326,-0.251114,-0.072072],
-							"rotation" : [0.031104,0.734605,-0.033754,0.676941]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [8.142326,-0.251114,-0.311389],
-							"rotation" : [0.030388,0.748681,-0.034401,0.661340]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [8.142326,-0.251114,-0.507621],
-							"rotation" : [0.029788,0.760011,-0.034921,0.648287]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [8.142326,-0.251114,-0.580195],
-							"rotation" : [0.029565,0.764121,-0.035110,0.643438]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [8.142326,-0.251114,-0.575280],
-							"rotation" : [0.029504,0.765237,-0.035161,0.642110]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [8.142326,-0.251114,-0.510471],
-							"rotation" : [0.029504,0.765237,-0.035161,0.642110]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [8.142326,-0.251114,-0.398113],
-							"rotation" : [0.029504,0.765237,-0.035161,0.642110]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [8.142326,-0.251114,-0.256647],
-							"rotation" : [0.029504,0.765237,-0.035161,0.642110]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [8.142326,-0.251114,-0.117018],
-							"rotation" : [0.029504,0.765237,-0.035161,0.642110]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [8.142326,-0.251114,-0.001102],
-							"rotation" : [0.029504,0.765237,-0.035161,0.642110]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [8.142326,-0.251114,0.091053],
-							"rotation" : [0.029611,0.763283,-0.035072,0.644432]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [8.142326,-0.251114,0.171998],
-							"rotation" : [0.029916,0.757627,-0.034812,0.651072]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [8.142326,-0.251114,0.254031],
-							"rotation" : [0.030532,0.745900,-0.034273,0.664474]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [8.142326,-0.251114,0.318828],
-							"rotation" : [0.031286,0.730946,-0.033586,0.680890]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [8.142326,-0.251114,0.364546],
-							"rotation" : [0.031905,0.718156,-0.032998,0.694366]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [8.142326,-0.251114,0.390994],
-							"rotation" : [0.032305,0.709639,-0.032607,0.703069]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.165545,1.865067,0.605976],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						}
-					]
-				},
-				{
-					"boneId" : "ball_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "ankle_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "toe_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "sword_casing",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 600.000000
-						}
-					]
-				},
-				{
-					"boneId" : "arm_pole_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [2.399996,-4.299984,-0.099997]
-						}
-					]
-				},
-				{
-					"boneId" : "arm_pole_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [-3.152660,-2.434659,-1.849997],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [-3.141848,-2.430671,-1.805358],
-							"rotation" : [0.005393,-0.707081,0.707083,0.006487]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [-3.116561,-2.420614,-1.694987],
-							"rotation" : [0.018026,-0.706811,0.706840,0.021686]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [-3.080837,-2.404932,-1.524772],
-							"rotation" : [0.035877,-0.705969,0.706016,0.043164]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [-3.043859,-2.386323,-1.323939],
-							"rotation" : [0.054337,-0.704538,0.704557,0.065366]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [-3.013430,-2.366874,-1.113921],
-							"rotation" : [0.069483,-0.702917,0.702919,0.083579]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [-3.002229,-2.350518,-0.936329],
-							"rotation" : [0.075038,-0.702217,0.702220,0.090262]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [-2.999635,-2.333766,-0.754081],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [-3.001215,-2.316026,-0.561242],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [-3.004663,-2.296403,-0.348426],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [-3.010305,-2.278220,-0.151856],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [-3.019149,-2.266065,-0.019859],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [-3.030127,-2.259779,0.048757],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [-3.044217,-2.263949,0.004667],
-							"rotation" : [0.073902,-0.702364,0.702368,0.088895]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [-3.062976,-2.281653,-0.183147],
-							"rotation" : [0.066272,-0.703288,0.703306,0.079721]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [-3.088498,-2.317776,-0.562396],
-							"rotation" : [-0.050664,0.704883,-0.704883,-0.060942]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [-3.114549,-2.362801,-1.040930],
-							"rotation" : [0.031143,-0.706251,0.706283,0.037468]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [-3.135032,-2.400496,-1.456225],
-							"rotation" : [0.014799,-0.706903,0.706931,0.017804]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [-3.147914,-2.425218,-1.737516],
-							"rotation" : [0.004086,-0.707091,0.707094,0.004915]
-						}
-					]
-				},
-				{
-					"boneId" : "thumb_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.153559,0.166642,-0.243344],
-							"rotation" : [-0.081221,0.785392,-0.383246,0.479255],
-							"scale" : [0.800000,0.800000,0.800000]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [0.153559,0.166642,-0.243344],
-							"rotation" : [-0.081221,0.785392,-0.383246,0.479255],
-							"scale" : [0.800000,0.800000,0.800000]
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ik_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.500000,-0.500000,0.500000,0.500000]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.499998,-0.500002,0.499998,0.500002]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.499965,-0.500036,0.499965,0.500036]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.499940,-0.500060,0.499940,0.500060]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.499975,-0.500025,0.499975,0.500025]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.500125,-0.499875,0.500125,0.499875]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.500069,-0.499931,0.500069,0.499931]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.500052,-0.499948,0.500052,0.499948]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.500052,-0.499948,0.500052,0.499948]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.500080,-0.499920,0.500080,0.499920]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.500101,-0.499899,0.500101,0.499899]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.500002,-0.499998,0.500002,0.499998]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.499986,-0.500014,0.499986,0.500014]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.500000,-0.500000,0.500000,0.500000]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.055614,0.731206,0.060052,0.677229],
-							"scale" : [0.720000,0.720000,0.720000]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.055614,0.731206,0.060052,0.677229],
-							"scale" : [0.720000,0.720000,0.720000]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ik_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 600.000000
-						}
-					]
-				},
-				{
-					"boneId" : "shield",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 600.000000
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [-4.167537,2.816641,-1.933273],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [-4.141422,2.822446,-1.867019],
-							"rotation" : [-0.358927,0.522631,0.757793,-0.154203]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [-4.080460,2.836881,-1.707511],
-							"rotation" : [-0.334155,0.518766,0.768708,-0.168254]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [-3.994441,2.859010,-1.467396],
-							"rotation" : [-0.298437,0.512340,0.783083,-0.187682]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [-3.905475,2.884715,-1.191238],
-							"rotation" : [-0.260629,0.504524,0.796655,-0.207047]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [-3.832276,2.910740,-0.911454],
-							"rotation" : [-0.229225,0.497385,0.806515,-0.222705]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [-3.805306,2.931154,-0.689810],
-							"rotation" : [-0.217658,0.494608,0.809822,-0.228422]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [-3.798082,2.950377,-0.480878],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [-3.798930,2.969198,-0.276655],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [-3.801357,2.988886,-0.063592],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [-3.806172,3.006310,0.124562],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [-3.815360,3.017510,0.246682],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [-3.827916,3.023230,0.309592],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [-3.851485,3.017759,0.251879],
-							"rotation" : [-0.220032,0.495185,0.809153,-0.227264]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [-3.893441,2.996904,0.031819],
-							"rotation" : [-0.235965,0.498983,0.804459,-0.219506]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [-3.963418,2.954350,-0.410519],
-							"rotation" : [-0.268096,0.506104,0.794205,-0.203032]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [-4.043612,2.901310,-0.969670],
-							"rotation" : [-0.307931,0.514105,0.779473,-0.182470]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [-4.109187,2.856899,-1.460485],
-							"rotation" : [-0.340549,0.519826,0.765943,-0.164737]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [-4.151552,2.827768,-1.796611],
-							"rotation" : [-0.361484,0.523017,0.756599,-0.152777]
-						}
-					]
-				},
-				{
-					"boneId" : "thumb_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.047806,0.118592,0.201995,0.971004]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.047806,0.118592,0.201995,0.971004]
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ik_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.499039,-0.500959,-0.499039,0.500959]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.500006,0.499994,0.500006,-0.499994]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.499168,-0.500831,-0.499168,0.500831]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.499253,-0.500746,-0.499253,0.500746]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.500161,0.499839,0.500161,-0.499839]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.498562,-0.501434,-0.498562,0.501434]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.499880,-0.500120,-0.499880,0.500120]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.500269,0.499731,0.500269,-0.499731]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.500269,0.499731,0.500269,-0.499731]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.499631,-0.500369,-0.499631,0.500369]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.498975,-0.501023,-0.498975,0.501023]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.500461,0.499539,0.500461,-0.499539]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.499120,-0.500878,-0.499120,0.500878]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.499508,-0.500492,-0.499508,0.500492]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.499637,-0.500363,-0.499637,0.500363]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 600.000000
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ik_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 600.000000
-						}
-					]
-				},
-				{
-					"boneId" : "sword",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 600.000000
-						}
-					]
-				},
-				{
-					"boneId" : "upper_arm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.420666,-0.125891,0.802834,-0.403297]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.418874,-0.124130,0.802587,-0.406190]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.413567,-0.119913,0.802560,-0.412892]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.403545,-0.113575,0.803661,-0.422352]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.389138,-0.106225,0.806468,-0.432317]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.370413,-0.098722,0.811506,-0.441028]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.350348,-0.092311,0.818260,-0.446303]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.326907,-0.085499,0.826486,-0.450269]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.299421,-0.077909,0.835853,-0.453462]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.266681,-0.069158,0.846226,-0.456070]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.234154,-0.060602,0.855650,-0.457562]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.210921,-0.054419,0.861977,-0.457763]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.198349,-0.051183,0.865587,-0.456944]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.205180,-0.053206,0.864884,-0.455023]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.235339,-0.061656,0.858524,-0.451388]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.292878,-0.078518,0.843394,-0.443558]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.350711,-0.096831,0.825336,-0.431793]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.390652,-0.112056,0.812301,-0.418332]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.413244,-0.121966,0.804942,-0.407948]
-						}
-					]
-				},
-				{
-					"boneId" : "lower_arm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.071812,-0.318112,-0.568924,0.754965]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.071224,-0.321648,-0.575262,0.748694]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.069889,-0.329733,-0.589879,0.733781]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.067875,-0.340941,-0.610047,0.712036]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.065530,-0.352561,-0.630681,0.688221]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.063387,-0.362588,-0.648482,0.666320]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.062080,-0.368617,-0.659314,0.652359]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.061015,-0.373271,-0.667615,0.641277]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.060166,-0.376896,-0.674084,0.632408]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.059461,-0.379826,-0.679300,0.625099]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.059083,-0.381386,-0.682086,0.621138]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.059080,-0.381396,-0.682104,0.621113]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.059219,-0.380823,-0.681081,0.622572]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.059529,-0.379549,-0.678810,0.625792]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.060222,-0.376707,-0.673783,0.632837]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.061682,-0.370290,-0.662241,0.648473]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.064947,-0.355734,-0.636552,0.681203]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.068495,-0.338468,-0.605991,0.716605]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.070765,-0.324636,-0.580719,0.743216]
-						}
-					]
-				},
-				{
-					"boneId" : "palm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.201964,0.003976,-0.093459,0.974915]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.201720,0.001407,-0.091052,0.975201]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.201158,-0.005181,-0.084959,0.975854]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.200402,-0.015765,-0.075462,0.976676]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.199617,-0.028903,-0.063953,0.977358]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.198956,-0.043685,-0.051192,0.977695]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.198711,-0.057570,-0.039234,0.977579]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.198631,-0.072377,-0.026244,0.977046]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.198687,-0.088162,-0.011707,0.976019]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.198774,-0.105332,0.004997,0.974356]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.198989,-0.120705,0.020931,0.972315]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.199414,-0.130401,0.031626,0.970685]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.199720,-0.135200,0.036709,0.969786]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.199867,-0.131923,0.032464,0.970358]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.199945,-0.118256,0.016924,0.972497]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.199658,-0.090113,-0.012860,0.975629]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.200640,-0.054119,-0.045694,0.977101]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.201344,-0.023878,-0.071250,0.976634]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.201709,-0.003848,-0.087341,0.975536]
-						}
-					]
-				},
-				{
-					"boneId" : "fingers_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.126949,0.593303,-0.445723,0.658184]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.126711,0.592241,-0.447132,0.658231]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.126140,0.589382,-0.450899,0.658337]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.125335,0.584342,-0.457410,0.658493]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.124455,0.577381,-0.466170,0.658656]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.123574,0.568512,-0.477012,0.658773]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.122869,0.558685,-0.488478,0.658911]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.122183,0.546857,-0.501676,0.659044]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.121477,0.532673,-0.516709,0.659177]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.120714,0.515384,-0.533944,0.659326]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.120041,0.497668,-0.550478,0.659462]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.119643,0.484601,-0.562081,0.659479]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.119494,0.477455,-0.568175,0.659496]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.119726,0.481315,-0.564879,0.659480]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.120446,0.497963,-0.550230,0.659373]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.121839,0.528362,-0.521097,0.659126]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.123701,0.557268,-0.490128,0.658730]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.125322,0.577432,-0.466166,0.658450]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.126456,0.589139,-0.451225,0.658270]
-						}
-					]
-				},
-				{
-					"boneId" : "upper_arm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.274086,0.191516,0.902436,0.271675]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.277107,0.186088,0.899075,0.283278]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.279576,0.173867,0.893010,0.306822]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.277110,0.156723,0.886179,0.336653]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.267373,0.137671,0.880920,0.365429]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.249468,0.118874,0.878918,0.388764]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.228036,0.104362,0.881223,0.400691]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.204572,0.090465,0.884969,0.408408]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.179447,0.076794,0.889166,0.413867]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.152031,0.062414,0.893242,0.418461]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.126810,0.049668,0.896664,0.421244]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.109759,0.041314,0.899209,0.421508]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.100500,0.036895,0.901076,0.420238]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.106764,0.040578,0.902361,0.415572]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.132470,0.055378,0.903021,0.404893]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.182466,0.084998,0.901234,0.383744]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.230523,0.124103,0.899388,0.350085]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.259257,0.158203,0.899485,0.314140]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.272427,0.181479,0.900639,0.285828]
-						}
-					]
-				},
-				{
-					"boneId" : "lower_arm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.090222,-0.148174,0.265000,0.948514]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.089407,-0.162057,0.289902,0.938989]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.088001,-0.189052,0.338795,0.917460]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.085091,-0.221698,0.397384,0.886395]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.081441,-0.250879,0.448998,0.853714]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.078647,-0.271977,0.486445,0.826568]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.077447,-0.281138,0.502870,0.813686]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.076737,-0.285993,0.511494,0.806655]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.076408,-0.288281,0.515576,0.803267]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.076276,-0.289199,0.517216,0.801894]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.076377,-0.288490,0.515947,0.802957]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.076659,-0.286512,0.512413,0.805895]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.076957,-0.284391,0.508621,0.809014]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.077324,-0.281768,0.503937,0.812820]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.078054,-0.276755,0.495050,0.819902]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.079470,-0.265371,0.474601,0.835474]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.083145,-0.237329,0.425000,0.869562]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.087624,-0.199584,0.358266,0.907818]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.089414,-0.166094,0.297372,0.935942]
-						}
-					]
-				},
-				{
-					"boneId" : "palm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.123644,0.258094,0.251767,0.924507]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.122602,0.251876,0.246812,0.927691]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.120706,0.236256,0.236639,0.934674]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.118050,0.213342,0.223597,0.943692]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.115007,0.188489,0.211012,0.952218]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.112084,0.166181,0.200985,0.958867]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.111040,0.157039,0.197538,0.961243]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.110870,0.153389,0.198129,0.961730]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.111157,0.151161,0.201462,0.961357]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.111616,0.147890,0.206707,0.960699]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.112179,0.144101,0.213059,0.959821]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.112627,0.140915,0.218600,0.958995]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.112846,0.138822,0.222287,0.958427]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.113331,0.143741,0.223752,0.957303]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.114506,0.159878,0.223791,0.954592]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.116562,0.191883,0.223522,0.948489]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.119023,0.224048,0.227193,0.940223]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.121142,0.244945,0.235982,0.932544]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.122733,0.255540,0.245630,0.926985]
-						}
-					]
-				},
-				{
-					"boneId" : "fingers_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.148866,0.108073,0.057674,0.981241]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.148429,0.108036,0.057788,0.981304]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.147473,0.108096,0.059091,0.981364]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.146318,0.107140,0.061198,0.981512]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.145325,0.105380,0.063451,0.981708]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.144652,0.104341,0.065320,0.981795]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.144440,0.104009,0.066368,0.981791]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.144522,0.103696,0.067118,0.981762]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.144819,0.103166,0.068022,0.981711]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.145284,0.102283,0.069351,0.981642]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.145846,0.101178,0.070882,0.981564]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.146340,0.100253,0.072082,0.981498]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.146685,0.099760,0.072683,0.981452]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.146771,0.100189,0.071974,0.981448]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.146631,0.101747,0.069443,0.981491]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.146384,0.104600,0.064353,0.981575]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.146582,0.107777,0.060029,0.981476]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.147403,0.108745,0.057779,0.981381]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.148314,0.108532,0.057260,0.981297]
-						}
-					]
-				}
-			]
-		},
-		{
-			"id" : "Die",
-			"bones" : [
-				{
-					"boneId" : "Armature",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "knee_pole_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [4.599999,0.856558,5.352602]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [4.599999,0.856558,5.352602]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [4.546374,0.856558,5.352602]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [4.325168,0.856558,5.352602]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [3.738632,0.856558,5.352602]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [3.013407,0.856558,5.352602]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [2.341354,0.856558,5.352602]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [1.830143,0.856558,5.352602]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [1.602234,0.856558,5.352602]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [1.600000,0.856558,5.352602]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [1.600000,0.856558,5.352602]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [1.413544,0.948026,5.444071]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [0.910529,1.198410,5.694455]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [0.112024,1.605075,6.101120]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [-0.300822,1.807904,6.303949]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [-0.400000,1.856558,6.352602]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [-0.400000,1.856558,6.352602]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.165546,-1.925576,-1.182647],
-							"rotation" : [0.120224,0.696811,0.120225,0.696811]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [0.165546,-1.925576,-1.182647],
-							"rotation" : [0.120224,0.696811,0.120225,0.696811]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [0.165546,-1.925576,-1.182647],
-							"rotation" : [0.123500,0.696238,0.123500,0.696238]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [0.165546,-1.925576,-1.182647],
-							"rotation" : [0.137567,0.693596,0.137567,0.693596]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [0.165546,-1.925576,-1.182647],
-							"rotation" : [0.167930,0.686877,0.167930,0.686876]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [0.165546,-1.925576,-1.182647],
-							"rotation" : [0.185946,0.682220,0.185946,0.682220]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [0.165546,-1.925576,-1.118847],
-							"rotation" : [0.193188,0.680205,0.193188,0.680204]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [0.165546,-1.925576,-0.943723],
-							"rotation" : [0.193188,0.680205,0.193188,0.680204]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [0.165546,-1.925576,-0.658100],
-							"rotation" : [0.193188,0.680205,0.193188,0.680204]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [0.165546,-1.925576,-0.516584],
-							"rotation" : [0.193188,0.680205,0.193188,0.680204]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [0.165546,-1.925576,-0.482647],
-							"rotation" : [0.193188,0.680205,0.193188,0.680204]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [0.165546,-1.925576,-0.482647],
-							"rotation" : [0.193188,0.680205,0.193188,0.680204]
-						}
-					]
-				},
-				{
-					"boneId" : "toe_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1300.000122
-						}
-					]
-				},
-				{
-					"boneId" : "ankle_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [1.077247,0.000000,0.000001]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [1.077247,-0.000000,0.000000]
-						}
-					]
-				},
-				{
-					"boneId" : "global",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "spine_1",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.000000,-0.000000,-0.000000],
-							"rotation" : [0.000000,-0.768964,0.000000,0.639292]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [0.000001,-0.000000,-0.000000],
-							"rotation" : [0.000000,-0.768964,0.000000,0.639292]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [0.000001,-0.000000,-0.000000],
-							"rotation" : [-0.000005,-0.770005,0.000008,0.638038]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [0.000001,-0.000000,-0.000000],
-							"rotation" : [-0.000027,-0.774461,0.000043,0.632622]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [0.000001,-0.000000,-0.000000],
-							"rotation" : [-0.000074,-0.782927,0.000119,0.622113]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [0.000001,-0.000000,-0.000000],
-							"rotation" : [-0.000105,-0.787523,0.000167,0.616285]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [0.000001,-0.000000,-0.000000],
-							"rotation" : [-0.000118,-0.789247,0.000187,0.614075]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [0.000001,-0.000000,-0.000000],
-							"rotation" : [-0.000118,-0.789248,0.000187,0.614075]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [-0.000000,-0.000000,-0.000000],
-							"rotation" : [-0.000118,-0.789247,0.000187,0.614075]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [-0.000000,-0.000000,-0.000000],
-							"rotation" : [-0.000118,-0.789248,0.000187,0.614075]
-						}
-					]
-				},
-				{
-					"boneId" : "spine_2",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [1.121228,0.000000,-0.000000],
-							"rotation" : [-0.000000,0.165955,-0.000000,0.986133]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [1.121227,0.000000,0.000001],
-							"rotation" : [-0.000000,0.165955,-0.000000,0.986133]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [1.121227,0.000000,0.000001],
-							"rotation" : [0.000002,0.165849,0.000006,0.986151]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [1.121227,0.000000,0.000001],
-							"rotation" : [0.000011,0.165391,0.000033,0.986228]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [1.121227,0.000000,0.000001],
-							"rotation" : [0.000030,0.162736,0.000092,0.986670]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [1.121227,0.000000,0.000001],
-							"rotation" : [0.000041,0.160582,0.000127,0.987023]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [1.121227,0.000000,0.000001],
-							"rotation" : [0.000046,0.159542,0.000141,0.987191]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [1.121229,0.000000,0.000001],
-							"rotation" : [0.000046,0.159542,0.000141,0.987191]
-						}
-					]
-				},
-				{
-					"boneId" : "spine_3",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.000000,0.136504,-0.000000,0.990640]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.000000,0.136504,-0.000000,0.990640]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.000000,0.136887,0.000003,0.990587]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.000002,0.138535,0.000018,0.990357]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.000007,0.139996,0.000049,0.990152]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.000010,0.140113,0.000067,0.990136]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.000011,0.139932,0.000075,0.990161]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [0.000011,0.139932,0.000075,0.990161]
-						}
-					]
-				},
-				{
-					"boneId" : "neck",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.004473,-0.319992,0.045682,0.946308]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.004266,-0.324278,0.045702,0.944847]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.003762,-0.334771,0.045750,0.941181]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.003000,-0.350510,0.045812,0.935433]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.002123,-0.368273,0.045858,0.928584]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.001262,-0.385501,0.045883,0.921565]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.000651,-0.397811,0.045899,0.916318]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.000137,-0.408044,0.045903,0.911808]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.000316,-0.417023,0.045902,0.907736]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.000775,-0.426056,0.045896,0.903532]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.001207,-0.434497,0.045884,0.899503]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.001601,-0.442238,0.045874,0.895722]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.001970,-0.449434,0.045860,0.892133]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.002284,-0.455527,0.045845,0.889038]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.002551,-0.460668,0.045830,0.886385]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.002770,-0.464880,0.045816,0.884183]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.002911,-0.467620,0.045808,0.882737]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.003007,-0.469456,0.045802,0.881762]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.003061,-0.470485,0.045798,0.881213]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.003079,-0.470837,0.045797,0.881025]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.003079,-0.470837,0.045797,0.881025]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.002641,-0.461488,0.045875,0.885956]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.001126,-0.420650,0.045796,0.906066]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.003174,-0.312368,0.045830,0.948850]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.006747,-0.215525,0.045176,0.975430]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.009780,-0.138283,0.044429,0.989347]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.012538,-0.075798,0.043717,0.996085]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.015294,-0.011548,0.042817,0.998899]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.018931,0.073341,0.041355,0.996269]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.019408,0.086036,0.041117,0.995254]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [-0.015918,-0.006610,0.042778,0.998936]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.008528,-0.167141,0.044722,0.984881]
-						}
-					]
-				},
-				{
-					"boneId" : "skull",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.000000,0.047960,0.000000,0.998849]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.000000,0.032684,-0.000000,0.999466]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.000000,-0.003234,-0.000000,0.999995]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.000000,-0.054084,-0.000000,0.998536]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.000000,-0.106607,-0.000000,0.994301]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.000000,-0.149480,-0.000000,0.988765]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.000000,-0.165112,-0.000000,0.986275]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.000000,-0.166082,-0.000000,0.986112]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.000000,-0.157376,-0.000000,0.987539]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.000000,-0.141538,-0.000000,0.989933]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.000000,-0.119746,-0.000000,0.992805]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.000000,-0.091089,-0.000000,0.995843]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.000000,-0.058435,-0.000000,0.998291]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.000000,-0.025638,-0.000000,0.999671]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.000000,0.006272,-0.000000,0.999980]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.000000,0.036029,-0.000000,0.999351]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.000000,0.057986,-0.000000,0.998317]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.000000,0.073649,-0.000000,0.997284]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.000000,0.082942,-0.000000,0.996554]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.000000,0.086308,-0.000000,0.996268]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.000000,0.086308,0.000000,0.996268]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.000000,0.045203,-0.000000,0.998978]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.000000,-0.031140,-0.000000,0.999515]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.000000,-0.099513,-0.000000,0.995036]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.000000,-0.114797,-0.000000,0.993389]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.000000,-0.043155,-0.000000,0.999068]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.000000,0.115879,0.000000,0.993263]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.000000,0.209021,0.000000,0.977911]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.000000,0.245898,0.000000,0.969296]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.000000,0.245898,0.000000,0.969296]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.000000,0.227736,0.000000,0.973723]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [0.000000,0.189710,0.000000,0.981840]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [0.000000,0.142349,0.000000,0.989817]
-						}
-					]
-				},
-				{
-					"boneId" : "pelvis",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.000000,0.707107,0.000000,0.707107]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.000402,0.707107,0.000402,0.707107]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.000728,0.707106,0.000728,0.707106]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.000557,0.707107,0.000557,0.707107]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.000043,0.707107,-0.000043,0.707107]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.000488,0.707107,-0.000488,0.707107]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.000284,0.707107,-0.000284,0.707107]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.000393,0.707107,-0.000393,0.707107]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.000210,0.707107,-0.000210,0.707107]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.000188,0.707107,0.000188,0.707107]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.000145,0.707107,-0.000145,0.707107]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.000045,0.707107,0.000045,0.707107]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.000566,0.707107,-0.000566,0.707107]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.000467,0.707107,-0.000467,0.707107]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.000309,0.707107,0.000309,0.707107]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.000018,0.707107,0.000018,0.707107]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.000888,0.707106,-0.000888,0.707106]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.001273,0.707106,-0.001273,0.707106]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.001146,0.707106,-0.001146,0.707106]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.000798,0.707106,-0.000798,0.707106]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.000798,0.707106,-0.000798,0.707106]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.000578,0.707107,-0.000578,0.707107]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.000371,0.707107,0.000371,0.707107]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.000778,0.707106,0.000778,0.707106]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.000252,0.707107,0.000252,0.707107]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.000219,0.707107,-0.000219,0.707107]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.000181,0.707107,-0.000181,0.707107]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.000141,0.707107,0.000141,0.707107]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.000018,0.707107,-0.000018,0.707107]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.000253,0.707107,0.000253,0.707107]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [-0.000498,0.707107,0.000498,0.707107]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.000582,0.707107,0.000582,0.707107]
-						}
-					]
-				},
-				{
-					"boneId" : "thigh_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.042473,0.292708,0.056252,0.953601]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.043163,0.292675,0.056050,0.953591]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.044844,0.291524,0.055496,0.953899]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.047350,0.288037,0.054569,0.954890]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.050170,0.281905,0.053400,0.956640]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.052884,0.273140,0.052133,0.959104]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.054776,0.263283,0.051152,0.961803]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.056329,0.252407,0.050238,0.964673]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.057672,0.240629,0.049316,0.967646]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.059011,0.226952,0.048257,0.970918]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.060247,0.212242,0.047141,0.974218]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.061354,0.195973,0.045989,0.977607]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.062373,0.178389,0.044810,0.980958]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.063227,0.160845,0.043711,0.983982]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.063939,0.143154,0.042691,0.986710]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.064514,0.125116,0.041759,0.989161]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.064887,0.108264,0.041052,0.991153]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.065137,0.092083,0.040483,0.992794]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.065273,0.076087,0.040042,0.994156]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [-0.066483,0.063361,0.039555,0.994988]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.071329,0.058041,0.038563,0.995016]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.085196,0.066395,0.035562,0.993513]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.104214,0.077498,0.030844,0.991051]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.124253,0.086355,0.026010,0.988144]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.142967,0.090741,0.022437,0.985304]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.157602,0.089564,0.022411,0.983177]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.175123,0.100773,0.029576,0.978929]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.196550,0.114814,0.040132,0.972921]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.211226,0.109541,0.047686,0.970108]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.213962,0.081347,0.048294,0.972250]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.210127,0.048163,0.044400,0.975477]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.207422,0.051228,0.044922,0.975876]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.204697,0.054159,0.038663,0.976561]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.186313,0.036087,0.040736,0.980982]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.139450,-0.008821,0.064367,0.988096]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.063135,-0.059191,0.114608,0.989634]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [-0.012187,-0.056326,0.140068,0.988463]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [0.041006,0.006952,0.155737,0.986923]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [0.599999,0.700000,0.168484],
-							"rotation" : [0.107134,0.096820,0.156705,0.977032]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [0.599999,0.700000,0.168485],
-							"rotation" : [0.176564,0.177915,0.141675,0.957653]
-						}
-					]
-				},
-				{
-					"boneId" : "shin_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.007821,-0.521504,-0.011965,0.853129]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.007825,-0.520669,-0.011946,0.853639]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.007841,-0.518098,-0.011888,0.855203]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.007869,-0.513441,-0.011783,0.858008]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.007900,-0.507534,-0.011646,0.861517]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.007929,-0.501632,-0.011509,0.864968]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.007940,-0.499627,-0.011463,0.866128]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.007943,-0.498978,-0.011448,0.866503]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.007949,-0.497970,-0.011425,0.867082]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.007962,-0.495585,-0.011371,0.868449]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.007979,-0.492080,-0.011290,0.870440]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.008005,-0.487430,-0.011184,0.873054]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.008032,-0.482216,-0.011065,0.875946]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.008057,-0.477106,-0.010948,0.878740]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.008080,-0.472291,-0.010836,0.881339]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.008100,-0.468005,-0.010737,0.883623]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.008115,-0.465044,-0.010670,0.885186]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.008124,-0.463128,-0.010626,0.886191]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.008129,-0.462123,-0.010602,0.886715]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.008125,-0.467243,-0.010740,0.884026]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.007996,-0.489377,-0.011230,0.871964]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.007952,-0.545862,-0.012789,0.837740]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.009286,-0.613553,-0.016113,0.789434]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.008025,-0.678357,-0.000768,0.734688]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.009804,-0.730893,-0.020353,0.682118]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.005998,-0.774630,-0.017977,0.632131]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.006056,-0.817953,-0.019558,0.574920]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.005092,-0.853689,-0.019917,0.520376]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.004476,0.872641,0.020025,-0.487931]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.004514,0.872253,0.020048,-0.488623]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.004724,-0.857091,-0.019670,0.514768]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.005220,-0.831936,-0.019227,0.554514]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.006267,-0.799276,-0.019105,0.600628]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.021262,-0.751267,-0.032589,0.658851]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.008588,-0.704009,-0.000806,0.710138]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.005362,-0.626795,-0.012604,0.779064]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.007887,-0.581559,-0.013771,0.813350]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.007748,-0.551581,-0.012756,0.833988]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [0.008299,-0.505827,-0.011982,0.862512]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [0.008293,-0.440398,-0.010162,0.897707]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.033145,0.652613,0.013930,0.756838]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.033076,0.648508,0.013827,0.760363]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [3.849472,0.000001,0.000000],
-							"rotation" : [0.033078,0.638720,0.013755,0.768605]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [3.849472,0.000001,-0.000000],
-							"rotation" : [0.032855,0.624486,0.013455,0.780229]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [3.849472,0.000001,-0.000000],
-							"rotation" : [0.032440,0.609316,0.012988,0.792157]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [3.849472,0.000001,-0.000000],
-							"rotation" : [0.032214,0.596487,0.012741,0.801875]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [3.849471,0.000001,-0.000000],
-							"rotation" : [0.032157,0.592221,0.012676,0.805034]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [3.849471,0.000001,-0.000000],
-							"rotation" : [0.032175,0.591773,0.012707,0.805362]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [3.849471,0.000001,-0.000000],
-							"rotation" : [0.032292,0.592766,0.012870,0.804624]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [3.849471,0.000001,-0.000001],
-							"rotation" : [0.032512,0.593931,0.013178,0.803751]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [3.849472,0.000000,-0.000001],
-							"rotation" : [0.032818,0.595356,0.013608,0.802676]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [3.849472,0.000000,-0.000001],
-							"rotation" : [0.033239,0.597544,0.014197,0.801021]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [3.849472,0.000000,-0.000001],
-							"rotation" : [0.033741,0.600697,0.014897,0.798626]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.034278,0.604817,0.015641,0.795473]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [3.849472,0.000000,-0.000001],
-							"rotation" : [0.034831,0.610092,0.016409,0.791394]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [3.849472,0.000000,-0.000001],
-							"rotation" : [0.035368,0.616857,0.017167,0.786092]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [3.849472,0.000000,-0.000001],
-							"rotation" : [0.035966,0.625151,0.017969,0.779467]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [3.849472,0.000000,-0.000001],
-							"rotation" : [0.036581,0.634512,0.018784,0.771818]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [3.849472,0.000000,-0.000001],
-							"rotation" : [0.037169,0.645074,0.019564,0.762965]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [3.849472,0.000000,-0.000001],
-							"rotation" : [0.037895,0.657190,0.020456,0.752494]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.037755,0.673061,0.020468,0.738339]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [3.849471,0.000000,-0.000002],
-							"rotation" : [0.038594,0.694339,0.021024,0.718305]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.035430,0.712956,0.016373,0.700121]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [3.849472,0.000000,0.000000],
-							"rotation" : [0.026896,0.726418,0.004615,0.686712]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [3.849472,0.000000,0.000001],
-							"rotation" : [0.013835,0.733527,-0.013735,0.679380]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [3.849472,0.000000,0.000002],
-							"rotation" : [-0.005274,0.731127,-0.040598,0.681012]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [3.849472,0.000000,0.000001],
-							"rotation" : [-0.043764,0.707961,-0.094123,0.698581]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [3.849472,0.000000,0.000001],
-							"rotation" : [-0.089916,0.646140,-0.158577,0.741128]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [3.849472,0.000000,0.000000],
-							"rotation" : [-0.115795,0.586888,-0.196922,0.776773]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [-0.124692,0.576624,-0.209320,0.779835]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [-0.120477,0.603980,-0.203593,0.761080]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [-0.118609,0.629889,-0.200871,0.740825]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [-0.107494,0.649269,-0.185329,0.729759]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [-0.096217,0.662326,-0.169453,0.723431]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [-0.094674,0.668607,-0.167314,0.718337]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [-0.114529,0.666199,-0.195292,0.710580]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [-0.130427,0.671215,-0.217650,0.696483]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [-0.144084,0.677294,-0.236826,0.681488]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [-0.158762,0.672665,-0.257467,0.675298]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [-0.174059,0.654381,-0.278959,0.680933]
-						}
-					]
-				},
-				{
-					"boneId" : "toes_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.126952,0.250929,0.033253,0.959068]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.126807,0.250934,0.033215,0.959088]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.126479,0.251003,0.033145,0.959115]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.126039,0.251048,0.033042,0.959165]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.125609,0.251043,0.032932,0.959226]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.125278,0.251039,0.032848,0.959274]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.125177,0.251039,0.032822,0.959288]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.125159,0.251040,0.032817,0.959290]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.125160,0.251043,0.032817,0.959289]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.125144,0.251048,0.032813,0.959290]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.125118,0.251058,0.032806,0.959291]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.125098,0.251070,0.032800,0.959291]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.125099,0.251084,0.032800,0.959287]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.125137,0.251100,0.032809,0.959277]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.125226,0.251116,0.032831,0.959261]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.125385,0.251132,0.032871,0.959235]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.125635,0.251046,0.032948,0.959222]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.125977,0.250975,0.033017,0.959193]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.126414,0.250935,0.033115,0.959143]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.127876,0.252967,0.033816,0.958390]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.132345,0.261388,0.036235,0.955431]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.144088,0.288872,0.044326,0.945424]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.159217,0.331963,0.057984,0.927948]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.172401,0.384695,0.074734,0.903716]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.179234,0.443727,0.091696,0.873255]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.175817,0.505737,0.106137,0.837886]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.161095,0.598475,0.124359,0.774862]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.139281,0.702889,0.138485,0.683645]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.099703,0.771623,0.123633,0.615932]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.086903,0.800404,0.119668,0.580931]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.100393,0.797273,0.138203,0.578944]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.129305,0.789935,0.178323,0.572262]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.152886,0.781688,0.210673,0.566751]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.157738,0.779617,0.217228,0.565799]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.137539,0.787736,0.189586,0.569747]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.100624,0.797303,0.138511,0.578789]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.084585,0.800909,0.116566,0.581208]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.074436,0.802735,0.102544,0.582718]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [0.066639,0.804007,0.091768,0.583705]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [0.060552,0.804827,0.083376,0.584496]
-						}
-					]
-				},
-				{
-					"boneId" : "thigh_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.200190,0.194813,-0.214452,0.935939]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.197556,0.196338,-0.214062,0.936269]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.191667,0.198860,-0.213207,0.937156]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.183702,0.200666,-0.212125,0.938611]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.175758,0.200117,-0.211242,0.940446]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.169355,0.196008,-0.210976,0.942544]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.166465,0.187497,-0.212253,0.944501]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.165116,0.176444,-0.214196,0.946427]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.164641,0.163881,-0.216247,0.948301]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.164598,0.149267,-0.218282,0.950252]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.165046,0.133464,-0.220214,0.952078]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.166296,0.115726,-0.222244,0.953709]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.168248,0.096201,-0.224441,0.955021]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.170815,0.076319,-0.226741,0.955817]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.174045,0.055822,-0.229259,0.956050]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.178095,0.034365,-0.232156,0.955618]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.182938,0.013617,-0.235449,0.954417]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.188404,-0.006868,-0.239077,0.952522]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.194676,-0.027577,-0.243183,0.949843]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.199894,-0.046269,-0.248065,0.946766]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.201195,-0.061539,-0.254870,0.943809]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.191210,-0.071730,-0.265036,0.942364]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.174991,-0.083722,-0.275988,0.941382]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.157902,-0.098907,-0.287124,0.939598]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.144045,-0.117883,-0.299688,0.935704]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.138464,-0.139778,-0.316811,0.927858]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.100131,-0.144142,-0.323005,0.929981]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.026685,-0.141772,-0.296426,0.944098]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.038764,-0.150224,-0.257144,0.953838]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.066706,-0.174523,-0.226172,0.956001]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.056879,-0.197207,-0.224486,0.952618]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.045079,-0.183820,-0.221894,0.956526]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.030724,-0.174088,-0.214689,0.960551]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.019916,-0.187450,-0.200575,0.961372]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.015539,-0.226703,-0.181590,0.956760]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.013751,-0.268303,-0.167663,0.948532]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.000176,-0.264388,-0.167045,0.949839]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.018710,-0.182784,-0.173781,0.967492]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [-0.043735,-0.056319,-0.177020,0.981621]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.068578,0.069303,-0.170962,0.980442]
-						}
-					]
-				},
-				{
-					"boneId" : "shin_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.007726,-0.538055,0.012345,0.842784]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.007711,-0.540667,0.012405,0.841110]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.007685,-0.545989,0.012532,0.837664]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.007646,-0.552325,0.012678,0.833498]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.007609,-0.557668,0.012796,0.829931]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.007588,-0.560926,0.012869,0.827731]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.007582,-0.561874,0.012891,0.827088]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.007586,-0.561317,0.012878,0.827466]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.007601,-0.559109,0.012830,0.828960]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.007628,-0.555006,0.012737,0.831714]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.007660,-0.549237,0.012601,0.835537]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.007713,-0.541248,0.012424,0.840736]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.007776,-0.531485,0.012206,0.846944]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.007838,-0.520773,0.011961,0.853575]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.007897,-0.509123,0.011689,0.860578]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.007957,-0.496390,0.011389,0.867989]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.008031,-0.483599,0.011103,0.875182]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.008099,-0.470607,0.010808,0.882239]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.008162,-0.457105,0.010497,0.889314]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.008195,-0.448022,0.010279,0.893926]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.008178,-0.451702,0.010363,0.892071]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.008074,-0.483245,0.011133,0.875377]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.008001,-0.524667,0.012230,0.851182]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.007844,-0.564869,0.013237,0.825037]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.007479,-0.598967,0.013880,0.800618]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.007173,-0.623514,0.014313,0.781648]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.014944,-0.685990,0.023912,0.727064]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.018407,-0.745725,-0.007273,0.665960]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.005673,-0.786173,0.018048,0.617717]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.006794,-0.781168,0.019000,0.623994]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.006265,-0.746381,0.017291,0.665264]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.001118,-0.694049,0.008240,0.719879]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.013434,-0.629689,0.020733,0.776454]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.008974,-0.543456,0.013720,0.839277]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.008498,-0.438433,0.010291,0.898665]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.008656,-0.337051,0.007756,0.941415]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.008924,-0.261605,0.006058,0.965115]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.008889,-0.244419,0.005608,0.969613]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [-0.008889,-0.244103,0.005601,0.969692]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.008903,-0.238911,0.005482,0.970985]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [0.065379,0.726374,0.125774,0.672523]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [0.063726,0.724925,0.123442,0.674673]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [3.849470,0.000000,-0.000000],
-							"rotation" : [0.060051,0.721123,0.118239,0.679997]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [3.849470,0.000000,-0.000000],
-							"rotation" : [0.055056,0.715189,0.111162,0.687835]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [3.849470,0.000000,-0.000000],
-							"rotation" : [0.049945,0.708684,0.103978,0.696032]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [3.849470,0.000000,-0.000001],
-							"rotation" : [0.045948,0.702810,0.098362,0.703045]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [3.849469,0.000000,-0.000001],
-							"rotation" : [0.044728,0.700828,0.096639,0.705337]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.044688,0.700600,0.096584,0.705573]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.045185,0.700824,0.097288,0.705223]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.045884,0.700805,0.098279,0.705059]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.046792,0.700616,0.099564,0.705007]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.048102,0.700399,0.101420,0.704869]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.049851,0.700360,0.103896,0.704426]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.051980,0.700565,0.106908,0.703617]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.054558,0.701085,0.110555,0.702340]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.057722,0.702064,0.115031,0.700387]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.061465,0.703526,0.120317,0.697709]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.065693,0.705343,0.126288,0.694426]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.070528,0.707445,0.133116,0.690527]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [3.849470,0.000000,-0.000001],
-							"rotation" : [0.075617,0.711799,0.140221,0.684077]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [3.849470,0.000000,-0.000000],
-							"rotation" : [0.080113,0.723777,0.146593,0.669506]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [3.849470,0.000000,-0.000000],
-							"rotation" : [0.084119,0.751633,0.151613,0.636385]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [0.086999,0.786622,0.154827,0.591342]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [0.087884,0.821654,0.155946,0.541148]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [0.090135,0.852192,0.159187,0.490207]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.098931,0.873877,0.171138,0.444143]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.109959,0.857669,0.186873,0.466253]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.125048,0.793376,0.205180,0.559302]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.118981,0.731774,0.200327,0.640483]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.116027,0.699956,0.197332,0.676506]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [3.849470,0.000000,0.000002],
-							"rotation" : [0.116059,0.699822,0.197377,0.676625]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [3.849469,0.000000,0.000002],
-							"rotation" : [0.116287,0.695381,0.197705,0.681055]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [3.849469,0.000000,0.000002],
-							"rotation" : [0.111904,0.684745,0.191460,0.694223]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [0.101310,0.674503,0.176598,0.709645]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [0.086010,0.670149,0.155073,0.720732]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [0.072620,0.673511,0.136145,0.722893]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [0.069570,0.676562,0.131826,0.721142]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [0.074060,0.692272,0.137792,0.704477]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [3.849469,0.000000,0.000000],
-							"rotation" : [0.080029,0.710049,0.146354,0.684109]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [3.849469,0.000000,0.000000],
-							"rotation" : [0.086059,0.722603,0.154993,0.668144]
-						}
-					]
-				},
-				{
-					"boneId" : "toes_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.004365,0.253228,0.001184,0.967396]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.004532,0.253219,0.001226,0.967397]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.004892,0.253203,0.001314,0.967400]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.005367,0.253183,0.001431,0.967403]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.005834,0.253165,0.001548,0.967404]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.006209,0.253153,0.001642,0.967405]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.006338,0.253151,0.001675,0.967405]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [0.006305,0.253152,0.001666,0.967404]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [1.077242,0.000000,-0.000001],
-							"rotation" : [0.006140,0.253157,0.001624,0.967404]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [1.077242,0.000000,-0.000001],
-							"rotation" : [0.005845,0.253167,0.001550,0.967404]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [1.077242,0.000000,-0.000001],
-							"rotation" : [0.005434,0.253182,0.001445,0.967402]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [1.077242,0.000000,-0.000001],
-							"rotation" : [0.004850,0.253203,0.001297,0.967400]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [1.077242,0.000000,-0.000001],
-							"rotation" : [0.004113,0.253158,0.001096,0.967416]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [1.077242,0.000000,-0.000001],
-							"rotation" : [0.003279,0.253133,0.000874,0.967426]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [1.077242,0.000000,-0.000001],
-							"rotation" : [0.002342,0.253151,0.000634,0.967424]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [1.077242,0.000000,-0.000001],
-							"rotation" : [0.001281,0.253173,0.000362,0.967420]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [1.077242,0.000000,-0.000001],
-							"rotation" : [0.000159,0.253199,0.000076,0.967414]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [1.077242,0.000000,-0.000001],
-							"rotation" : [-0.001021,0.253148,-0.000242,0.967427]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [-0.002282,0.253136,-0.000572,0.967428]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [-0.004056,0.253181,-0.001020,0.967410]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [-0.007474,0.253190,-0.001901,0.967386]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [-0.015750,0.253115,-0.004110,0.967299]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [-0.028039,0.253025,-0.007330,0.967026]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [-0.041602,0.252851,-0.010893,0.966549]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [-0.054028,0.252653,-0.014176,0.965943]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [-0.061593,0.252633,-0.016127,0.965465]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [1.077243,0.000000,0.000001],
-							"rotation" : [-0.053630,0.353760,-0.020179,0.933579]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [1.077243,0.000000,0.000001],
-							"rotation" : [-0.072701,0.537709,-0.054699,0.838207]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [1.077243,-0.000000,0.000001],
-							"rotation" : [-0.071437,0.671176,-0.068667,0.734646]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [1.077243,-0.000000,0.000000],
-							"rotation" : [-0.068448,0.733222,-0.074657,0.672404]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [1.077243,-0.000000,0.000000],
-							"rotation" : [-0.087295,0.730460,-0.095283,0.670618]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [1.077243,-0.000000,0.000000],
-							"rotation" : [-0.127608,0.724229,-0.139235,0.663191]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [1.077243,-0.000000,0.000000],
-							"rotation" : [-0.156287,0.716945,-0.170364,0.657678]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [1.077243,-0.000000,0.000000],
-							"rotation" : [-0.176952,0.711071,-0.192802,0.652605]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [1.077243,-0.000000,0.000000],
-							"rotation" : [-0.192784,0.706122,-0.210044,0.648157]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [1.077243,-0.000000,0.000000],
-							"rotation" : [-0.205203,0.701986,-0.223520,0.644318]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [1.077243,-0.000000,0.000000],
-							"rotation" : [-0.208998,0.700674,-0.227637,0.643084]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [1.077243,-0.000000,0.000000],
-							"rotation" : [-0.207855,0.701089,-0.226378,0.643447]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [1.077243,-0.000000,0.000000],
-							"rotation" : [-0.205260,0.702009,-0.223525,0.644273]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [1.077243,-0.000000,-0.000000],
-							"rotation" : [-0.203170,0.702744,-0.221215,0.644932]
-						}
-					]
-				},
-				{
-					"boneId" : "torso_ctrl",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.429979,-0.000000,3.231772]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [0.429979,-0.000000,3.231772]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [0.419706,0.000101,3.232869]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [0.375487,0.000536,3.237592]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [0.279595,0.001480,3.247840]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [0.222157,0.002045,3.253977]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [0.198931,0.002273,3.256457]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [0.198930,0.002273,3.256457]
-						}
-					]
-				},
-				{
-					"boneId" : "ball_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.000000,-0.306326,-0.000000,0.951927]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.000000,-0.306326,-0.000000,0.951927]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.000000,-0.405527,-0.000000,0.914083]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.000000,-0.581320,-0.000000,0.813675]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.000000,-0.718184,-0.000000,0.695853]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.000000,-0.772998,-0.000000,0.634408]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [0.000000,-0.772998,-0.000000,0.634408]
-						}
-					]
-				},
-				{
-					"boneId" : "knee_pole_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [4.600000,-3.856558,4.352602]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [4.600000,-3.856558,4.352602]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [4.546374,-3.856558,4.352602]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [4.325169,-3.856558,4.352602]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [3.738632,-3.856558,4.352602]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [3.013408,-3.856558,4.352602]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [2.341355,-3.856558,4.352602]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [1.830144,-3.856558,4.352602]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [1.602234,-3.856558,4.352602]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [1.600000,-3.467777,4.352602]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [1.600000,-2.779933,4.352602]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [1.600000,-2.158061,4.352602]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [1.600000,-1.856558,4.352602]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [1.600000,-1.856558,4.352602]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [1.413544,-1.856558,4.444071]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [0.910529,-1.856558,4.694455]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [0.112025,-1.856558,5.101120]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [-0.300822,-1.856558,5.303949]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [-0.400000,-1.856558,5.352602]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [-0.400000,-1.856558,5.352602]
-						}
-					]
-				},
-				{
-					"boneId" : "body_ctrl",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [8.142326,-0.251114,0.400000],
-							"rotation" : [0.032456,0.706362,-0.032456,0.706362]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [8.142326,-0.251114,0.327633],
-							"rotation" : [0.032309,0.709556,-0.032603,0.703153]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [8.142326,-0.251114,0.160948],
-							"rotation" : [0.031944,0.717335,-0.032960,0.695215]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [8.142326,-0.251114,-0.072081],
-							"rotation" : [0.031387,0.728895,-0.033492,0.683086]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [8.142326,-0.251114,-0.311400],
-							"rotation" : [0.030743,0.741780,-0.034084,0.669071]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [8.142326,-0.251114,-0.507627],
-							"rotation" : [0.030103,0.754111,-0.034650,0.655141]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [8.142326,-0.251114,-0.580197],
-							"rotation" : [0.029636,0.762819,-0.035050,0.644981]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [8.146552,-0.251114,-0.595363],
-							"rotation" : [0.029242,0.769991,-0.035380,0.636401]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [8.157685,-0.251114,-0.581884],
-							"rotation" : [0.028891,0.776235,-0.035667,0.628771]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [8.177817,-0.251114,-0.555173],
-							"rotation" : [0.028534,0.782468,-0.035953,0.620997]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [8.205313,-0.251114,-0.514719],
-							"rotation" : [0.028196,0.788248,-0.036219,0.613644]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [8.241162,-0.251114,-0.451029],
-							"rotation" : [0.027883,0.793510,-0.036461,0.606823]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [8.281864,-0.251115,-0.364867],
-							"rotation" : [0.027588,0.798370,-0.036684,0.600416]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [8.322756,-0.251115,-0.260185],
-							"rotation" : [0.027336,0.802459,-0.036872,0.594940]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [8.362697,-0.251115,-0.134944],
-							"rotation" : [0.027123,0.805890,-0.037029,0.590283]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [8.400258,-0.251115,0.015589],
-							"rotation" : [0.026946,0.808690,-0.037158,0.586442]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [8.428369,-0.251115,0.185708],
-							"rotation" : [0.026831,0.810504,-0.037241,0.583931]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [8.448606,-0.251115,0.370316],
-							"rotation" : [0.026753,0.811718,-0.037297,0.582244]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [8.460709,-0.251115,0.573464],
-							"rotation" : [0.026710,0.812397,-0.037328,0.581295]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [8.443813,-0.251115,0.789054],
-							"rotation" : [0.026695,0.812629,-0.037339,0.580971]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [8.355895,-0.251115,1.038132],
-							"rotation" : [0.026695,0.812629,-0.037339,0.580971]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [8.098778,-0.251115,1.354793],
-							"rotation" : [0.026695,0.812629,-0.037339,0.580971]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [7.730986,-0.251115,1.712273],
-							"rotation" : [0.026695,0.812629,-0.037339,0.580971]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [7.313980,-0.251115,2.067259],
-							"rotation" : [0.026695,0.812629,-0.037339,0.580971]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [6.881279,-0.251115,2.409186],
-							"rotation" : [0.026695,0.812629,-0.037339,0.580971]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [6.469167,-0.251115,2.725570],
-							"rotation" : [0.026695,0.812629,-0.037339,0.580971]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [5.992750,-0.251115,2.951217],
-							"rotation" : [0.026695,0.812629,-0.037339,0.580971]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [5.494814,-0.251115,3.152202],
-							"rotation" : [0.026695,0.812629,-0.037339,0.580971]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [5.122570,-0.251115,3.401489],
-							"rotation" : [0.026695,0.812629,-0.037339,0.580971]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [4.965127,-0.251115,3.729835],
-							"rotation" : [0.026923,0.809052,-0.037175,0.585943]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [4.965127,-0.251115,4.165274],
-							"rotation" : [0.027894,0.793306,-0.036452,0.607090]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [4.965127,-0.251115,4.709409],
-							"rotation" : [0.030477,0.746973,-0.034322,0.663268]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [4.965127,-0.251115,5.304265],
-							"rotation" : [0.032921,0.696098,-0.031985,0.716478]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [4.837968,-0.251115,6.055686],
-							"rotation" : [0.035004,0.646169,-0.029691,0.761813]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [4.469248,-0.251115,6.994633],
-							"rotation" : [0.036800,0.596987,-0.027432,0.800937]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [3.818775,-0.251115,7.944557],
-							"rotation" : [0.038488,0.544215,-0.025008,0.837689]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [3.133229,-0.251115,8.495687],
-							"rotation" : [0.040475,0.471093,-0.021647,0.880889]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [2.484272,-0.251115,8.737930],
-							"rotation" : [0.042861,0.357570,-0.016426,0.932757]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [1.841901,-0.251115,8.838521],
-							"rotation" : [0.044889,0.209247,-0.009601,0.976785]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [1.267467,-0.251115,8.880641],
-							"rotation" : [0.045830,0.059859,-0.002730,0.997150]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.165545,1.865067,0.605976],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [0.165545,1.865067,0.605976],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [0.165545,1.865067,0.605976],
-							"rotation" : [-0.070936,0.703540,-0.070936,0.703540]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [0.165545,1.865067,0.605976],
-							"rotation" : [-0.081815,0.702358,-0.081815,0.702358]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [0.165545,1.865067,0.605976],
-							"rotation" : [-0.105369,0.699212,-0.105369,0.699212]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [0.165545,1.865067,0.605976],
-							"rotation" : [-0.119411,0.696951,-0.119411,0.696951]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [0.165545,1.865067,0.605976],
-							"rotation" : [-0.125072,0.695958,-0.125072,0.695958]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [0.165545,1.865067,0.605976],
-							"rotation" : [-0.125072,0.695958,-0.125072,0.695958]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [0.165545,1.865067,0.494051],
-							"rotation" : [-0.125072,0.695958,-0.125072,0.695958]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [0.165545,1.865067,0.262097],
-							"rotation" : [-0.125072,0.695958,-0.125072,0.695958]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [0.165545,1.865067,-0.025410],
-							"rotation" : [-0.125072,0.695958,-0.125072,0.695958]
-						}
-					]
-				},
-				{
-					"boneId" : "ball_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [-1.027027,-0.000000,0.106204],
-							"rotation" : [0.000000,-0.306326,0.000000,0.951927]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [-1.027027,-0.000000,0.106204],
-							"rotation" : [0.000000,-0.306326,0.000000,0.951927]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [-1.027027,-0.000000,0.106204],
-							"rotation" : [0.000000,-0.308386,0.000000,0.951261]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [-1.027027,-0.000000,0.106204],
-							"rotation" : [0.000000,-0.316865,0.000000,0.948470]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [-1.027027,-0.000000,0.106204],
-							"rotation" : [0.000000,-0.344759,0.000000,0.938691]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [-1.027027,-0.000000,0.106204],
-							"rotation" : [0.000000,-0.388626,0.000000,0.921396]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [-1.027027,-0.000000,0.106204],
-							"rotation" : [0.000000,-0.442120,0.000000,0.896956]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [-1.027027,-0.000000,0.106204],
-							"rotation" : [0.000000,-0.501486,0.000000,0.865166]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [-1.027027,-0.000000,0.106204],
-							"rotation" : [0.000000,-0.563291,0.000000,0.826258]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [-1.027027,-0.000000,0.106204],
-							"rotation" : [0.000000,-0.651962,0.000000,0.758251]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [-1.027027,-0.000000,0.106204],
-							"rotation" : [0.000000,-0.748559,0.000000,0.663068]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [-1.027027,-0.000000,0.106204],
-							"rotation" : [0.000000,-0.814917,0.000000,0.579578]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [-1.027027,-0.000000,0.106204],
-							"rotation" : [0.000000,-0.840426,0.000000,0.541926]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [-1.027027,-0.000000,0.106203],
-							"rotation" : [0.000000,-0.840426,0.000000,0.541926]
-						}
-					]
-				},
-				{
-					"boneId" : "ankle_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1300.000122
-						}
-					]
-				},
-				{
-					"boneId" : "toe_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [-1.027027,-0.000000,0.106204]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [-1.027027,-0.000000,0.106203]
-						}
-					]
-				},
-				{
-					"boneId" : "sword_casing",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.108540,-0.355263,-0.108540,0.922077]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.108540,-0.355263,-0.108540,0.922077]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.108598,-0.357333,-0.108234,0.921306]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.108802,-0.365845,-0.106927,0.918088]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.109402,-0.389408,-0.103335,0.908688]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.110093,-0.418749,-0.098747,0.895979]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.110470,-0.445384,-0.094239,0.883487]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.110601,-0.464992,-0.090730,0.873681]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.110681,-0.473290,-0.089267,0.869355]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.110682,-0.473371,-0.089252,0.869312]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [0.110682,-0.473371,-0.089252,0.869312]
-						}
-					]
-				},
-				{
-					"boneId" : "arm_pole_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [2.399996,-4.299984,-0.099997]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [2.399995,-4.299984,-0.099997]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [2.046410,-4.299329,-0.092883]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [1.337112,-4.297968,-0.078105]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [0.442852,-4.296288,-0.059860]
-						}
-					]
-				},
-				{
-					"boneId" : "arm_pole_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [3.399995,4.299984,-0.099997]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [3.399994,4.299984,-0.099997]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [2.983246,4.300756,-0.091618]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [2.159094,4.302359,-0.074211]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [1.118324,4.304338,-0.052721]
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [-3.152660,-2.434659,-1.849997],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [-3.141848,-2.430108,-1.799252],
-							"rotation" : [0.005393,-0.707081,0.707083,0.006487]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [-3.116561,-2.418914,-1.676520],
-							"rotation" : [0.018026,-0.706811,0.706840,0.021686]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [-3.080837,-2.401994,-1.492803],
-							"rotation" : [0.035877,-0.705969,0.706016,0.043164]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [-3.043860,-2.382693,-1.284434],
-							"rotation" : [0.054337,-0.704538,0.704557,0.065366]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [-3.013430,-2.363705,-1.079453],
-							"rotation" : [0.069483,-0.702917,0.702919,0.083579]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [-3.002229,-2.349811,-0.928631],
-							"rotation" : [0.075038,-0.702217,0.702220,0.090262]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [-2.999188,-2.337976,-0.800139],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [-2.999276,-2.327333,-0.684631],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [-2.999524,-2.316398,-0.566013],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [-3.000015,-2.305960,-0.452875],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [-3.001073,-2.296136,-0.346484],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [-3.002795,-2.286827,-0.245650],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [-3.005194,-2.278795,-0.158588],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [-3.008379,-2.271899,-0.083712],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [-3.012558,-2.266147,-0.021087],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [-3.017734,-2.262335,0.020619],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [-3.023660,-2.259753,0.048953],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [-3.030481,-2.258291,0.065049],
-							"rotation" : [-0.076553,0.702019,-0.702018,-0.092083]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [-3.046185,-2.258310,0.063223],
-							"rotation" : [-0.076134,0.702074,-0.702074,-0.091579]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [-3.088892,-2.260464,0.032701],
-							"rotation" : [-0.074406,0.702301,-0.702301,-0.089500]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [-3.193456,-2.269172,-0.072770],
-							"rotation" : [0.067676,-0.703132,0.703135,0.081405]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [-3.322611,-2.285729,-0.255143],
-							"rotation" : [0.055213,-0.704452,0.704476,0.066418]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [-3.441122,-2.309559,-0.508141],
-							"rotation" : [0.037538,-0.705859,0.705914,0.045162]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [-3.529752,-2.340416,-0.833149],
-							"rotation" : [0.014834,-0.706890,0.706943,0.017845]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [-3.567841,-2.378294,-1.238005],
-							"rotation" : [-0.012949,-0.706960,0.706963,-0.015575]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [-3.317276,-2.441787,-1.946983],
-							"rotation" : [-0.059712,-0.703916,0.704110,-0.071872]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [-2.859471,-2.518576,-2.766395],
-							"rotation" : [-0.116012,-0.695068,0.695606,-0.139839]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [-2.449042,-2.578939,-3.410962],
-							"rotation" : [-0.159805,-0.684593,0.684700,-0.192303]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [-2.282765,-2.602112,-3.667197],
-							"rotation" : [-0.175656,-0.679881,0.679896,-0.211302]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [-2.397063,-2.590775,-3.539247],
-							"rotation" : [-0.164727,-0.683228,0.683230,-0.198145]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [-2.643251,-2.566185,-3.275228],
-							"rotation" : [-0.140781,-0.689709,0.689776,-0.169386]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [-2.791010,-2.551462,-3.117436],
-							"rotation" : [-0.126378,-0.693141,0.693161,-0.152027]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [-2.850855,-2.545511,-3.053702],
-							"rotation" : [0.120538,0.694424,-0.694423,0.144991]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [-2.850855,-2.545511,-3.053702],
-							"rotation" : [0.120538,0.694424,-0.694423,0.144991]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [-2.850856,-2.545511,-3.053702],
-							"rotation" : [0.120538,0.694424,-0.694423,0.144991]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [-2.578200,-2.749800,-2.170631],
-							"rotation" : [-0.100543,-0.622092,0.738719,-0.239138]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [-2.022625,-3.170111,-0.595313],
-							"rotation" : [-0.035009,-0.436677,0.798963,-0.412002]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [-1.325305,-3.694854,1.356144],
-							"rotation" : [0.022564,0.148548,-0.756892,0.636033]
-						}
-					]
-				},
-				{
-					"boneId" : "thumb_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.153559,0.166642,-0.243344],
-							"rotation" : [-0.081221,0.785392,-0.383246,0.479255],
-							"scale" : [0.800000,0.800000,0.800000]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [0.153559,0.166643,-0.243343],
-							"rotation" : [-0.081221,0.785392,-0.383246,0.479255],
-							"scale" : [0.800000,0.800000,0.800000]
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ik_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.500000,-0.500000,0.500000,0.500000]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.499995,-0.500005,0.499995,0.500005]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.499978,-0.500022,0.499978,0.500022]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.500012,-0.499988,0.500012,0.499988]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.500063,-0.499937,0.500063,0.499937]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.499993,-0.500007,0.499993,0.500007]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.500039,-0.499961,0.500039,0.499961]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.499995,-0.500005,0.499995,0.500005]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.500013,-0.499987,0.500013,0.499987]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.500099,-0.499901,0.500099,0.499901]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.500078,-0.499922,0.500078,0.499922]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.500081,-0.499919,0.500081,0.499919]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.500010,-0.499990,0.500010,0.499990]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.500021,-0.499979,0.500021,0.499979]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.500074,-0.499926,0.500074,0.499926]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.499906,-0.500094,0.499906,0.500094]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.499948,-0.500052,0.499948,0.500052]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.499864,-0.500136,0.499864,0.500136]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.499840,-0.500160,0.499840,0.500160]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.499919,-0.500081,0.499919,0.500081]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.499974,-0.500026,0.499974,0.500026]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.499937,-0.500063,0.499937,0.500063]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.499999,-0.500001,0.499999,0.500001]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.499994,-0.500006,0.499994,0.500006]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.499935,-0.500065,0.499935,0.500065]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.500069,-0.499931,0.500069,0.499931]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.500003,-0.499997,0.500003,0.499997]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.499996,-0.500004,0.499996,0.500004]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.499991,-0.500009,0.499991,0.500009]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.499972,-0.500028,0.499972,0.500028]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.499977,-0.500023,0.499977,0.500023]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.500003,-0.499997,0.500003,0.499997]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.500080,-0.499920,0.500080,0.499920]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.500036,-0.499964,0.500036,0.499964]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.499921,-0.500079,0.499921,0.500079]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.500089,-0.499911,0.500089,0.499911]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.499927,-0.500073,0.499927,0.500073]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.499921,-0.500079,0.499921,0.500079]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [0.499905,-0.500095,0.499905,0.500095]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [0.499860,-0.500140,0.499860,0.500140]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.055614,0.731206,0.060052,0.677229],
-							"scale" : [0.720000,0.720000,0.720000]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.055614,0.731206,0.060052,0.677229],
-							"scale" : [0.720000,0.720000,0.720000]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ik_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [1.225922,0.000000,0.000000]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [1.225920,-0.000001,-0.000000]
-						}
-					]
-				},
-				{
-					"boneId" : "shield",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.602060,1.903098,-0.381774],
-							"rotation" : [0.685638,-0.685637,0.172920,-0.172921]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [0.602061,1.903097,-0.381774],
-							"rotation" : [0.685638,-0.685637,0.172920,-0.172921]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [0.659105,1.759973,-0.393594],
-							"rotation" : [-0.674026,0.697590,-0.174869,0.168756]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [0.904644,1.143913,-0.444472],
-							"rotation" : [-0.621686,0.746730,-0.182206,0.150675]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [1.511907,-0.138054,-0.571073],
-							"rotation" : [-0.494405,0.840133,-0.195481,0.107365]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [2.058793,-1.309602,-0.679141],
-							"rotation" : [-0.412304,0.885092,-0.200252,0.080731]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [2.519413,-2.231139,-0.757427],
-							"rotation" : [-0.378238,0.900791,-0.201591,0.069802]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [2.902970,-2.884180,-0.808216],
-							"rotation" : [-0.378238,0.900791,-0.201591,0.069802]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [3.230521,-3.364457,-0.848625],
-							"rotation" : [-0.378238,0.900791,-0.201591,0.069802]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [3.367513,-3.550170,-0.880309],
-							"rotation" : [-0.378238,0.900791,-0.201591,0.069802]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [2.642047,-3.195779,-0.230395],
-							"rotation" : [-0.363937,0.906749,-0.208017,-0.045657]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [1.197433,-2.362690,0.905343],
-							"rotation" : [-0.312521,0.876787,-0.211491,-0.298073]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [-0.631874,-1.272719,2.314721],
-							"rotation" : [0.214979,-0.758588,0.181646,0.587650]
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [-4.167537,2.816641,-1.933273],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [-4.141422,2.823009,-1.860828],
-							"rotation" : [-0.358927,0.522631,0.757793,-0.154203]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [-4.080462,2.838581,-1.688797],
-							"rotation" : [-0.334155,0.518766,0.768708,-0.168254]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [-3.994445,2.861948,-1.435064],
-							"rotation" : [-0.298437,0.512340,0.783083,-0.187682]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [-3.905480,2.888345,-1.151386],
-							"rotation" : [-0.260629,0.504524,0.796655,-0.207047]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [-3.832279,2.913909,-0.876815],
-							"rotation" : [-0.229225,0.497385,0.806515,-0.222705]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [-3.805307,2.931862,-0.682074],
-							"rotation" : [-0.217658,0.494608,0.809822,-0.228422]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [-3.797963,2.946438,-0.523946],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [-3.798051,2.958880,-0.389118],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [-3.798299,2.971097,-0.256943],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [-3.798790,2.982214,-0.136821],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [-3.799848,2.992024,-0.030884],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [-3.801568,3.000885,0.064935],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [-3.803966,3.008160,0.143834],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [-3.807148,3.014104,0.208579],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [-3.811324,3.018800,0.260093],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [-3.816499,3.021721,0.292485],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [-3.822427,3.023629,0.313793],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [-3.829251,3.024673,0.325528],
-							"rotation" : [-0.214485,0.493830,0.810709,-0.229953]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [-3.847895,3.024328,0.319523],
-							"rotation" : [-0.214626,0.493833,0.810742,-0.229701]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [-3.902709,3.021480,0.278569],
-							"rotation" : [-0.215205,0.493846,0.810874,-0.228661]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [-4.040256,3.010453,0.144058],
-							"rotation" : [-0.220157,0.494743,0.810172,-0.224457]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [-4.211390,2.990160,-0.079464],
-							"rotation" : [-0.233267,0.497581,0.806938,-0.216449]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [-4.369681,2.961632,-0.381174],
-							"rotation" : [-0.255820,0.502650,0.799965,-0.204831]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [-4.489169,2.925356,-0.761458],
-							"rotation" : [-0.288351,0.509727,0.788154,-0.189326]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [-4.541187,2.881547,-1.228557],
-							"rotation" : [-0.331531,0.518236,0.769962,-0.169347]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [-4.183817,2.809355,-2.039105],
-							"rotation" : [-0.427720,0.532645,0.720479,-0.119392]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [-3.538422,2.722446,-2.962401],
-							"rotation" : [-0.552841,0.541935,0.631186,-0.047721]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [-2.958174,2.654253,-3.687998],
-							"rotation" : [0.636284,-0.530855,-0.559212,-0.024860]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [-2.707746,2.628079,-3.979223],
-							"rotation" : [0.668369,-0.524322,-0.524900,-0.053377]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [-2.816470,2.640747,-3.834754],
-							"rotation" : [0.659624,-0.527855,-0.533259,-0.043576]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [-3.046213,2.668224,-3.540674],
-							"rotation" : [0.638914,-0.533553,-0.553671,-0.023611]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [-3.183746,2.684675,-3.365001],
-							"rotation" : [0.622456,-0.533363,-0.572595,-0.014369]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [-3.239352,2.691324,-3.294060],
-							"rotation" : [0.604989,-0.524737,-0.597731,-0.036827]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [-3.239352,2.691324,-3.294060],
-							"rotation" : [-0.575176,0.502617,0.637086,0.103291]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [-3.239352,2.691324,-3.294061],
-							"rotation" : [-0.534782,0.457960,0.678986,0.207986]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [-3.239353,2.691324,-3.294061],
-							"rotation" : [-0.468568,0.398365,0.742516,0.265366]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [-2.922548,2.908923,-2.421810],
-							"rotation" : [-0.268961,0.340644,0.860424,0.267004]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [-2.282194,3.355904,-0.862696],
-							"rotation" : [0.139421,0.231984,0.932841,0.237808]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [-1.476247,3.914557,1.070049],
-							"rotation" : [0.586376,0.106906,0.793369,0.123693]
-						}
-					]
-				},
-				{
-					"boneId" : "thumb_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.047806,0.118592,0.201995,0.971004]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.047806,0.118592,0.201995,0.971004]
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ik_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.499039,-0.500959,-0.499039,0.500959]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.499613,-0.500387,-0.499613,0.500387]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.499508,-0.500491,-0.499508,0.500491]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.498868,-0.501130,-0.498868,0.501130]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.498413,-0.501582,-0.498413,0.501582]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.499380,-0.500619,-0.499380,0.500619]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.500075,0.499925,0.500075,-0.499925]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.500453,0.499547,0.500453,-0.499547]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.500181,0.499819,0.500181,-0.499819]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.499574,-0.500425,-0.499574,0.500425]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.499709,-0.500291,-0.499709,0.500291]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.499325,-0.500674,-0.499325,0.500674]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.499070,-0.500929,-0.499070,0.500929]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.499267,-0.500732,-0.499267,0.500732]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.499543,-0.500457,-0.499543,0.500457]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.498724,-0.501273,-0.498724,0.501273]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.498796,-0.501201,-0.498796,0.501201]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.498094,-0.501899,-0.498094,0.501899]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.498265,-0.501729,-0.498265,0.501729]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.499220,-0.500779,-0.499220,0.500779]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.498920,-0.501078,-0.498920,0.501078]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.498966,-0.501032,-0.498966,0.501032]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.499443,-0.500556,-0.499443,0.500556]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.499465,-0.500535,-0.499465,0.500535]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.499020,-0.500978,-0.499020,0.500978]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.499167,-0.500832,-0.499167,0.500832]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.498719,-0.501278,-0.498719,0.501278]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.498287,-0.501707,-0.498287,0.501707]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.498261,-0.501733,-0.498261,0.501733]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.498833,-0.501165,-0.498833,0.501165]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.499949,-0.500051,-0.499949,0.500051]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.498639,-0.501357,-0.498639,0.501357]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.498938,-0.501060,-0.498938,0.501060]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.499771,-0.500229,-0.499771,0.500229]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.500271,0.499729,0.500271,-0.499729]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.499813,-0.500187,-0.499813,0.500187]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.499913,-0.500087,-0.499913,0.500087]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.500217,0.499783,0.500217,-0.499783]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [0.500238,0.499761,0.500238,-0.499761]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.499971,-0.500029,-0.499971,0.500029]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1300.000122
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ik_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [1.225922,-0.000000,-0.000001]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [1.225922,0.000000,-0.000001]
-						}
-					]
-				},
-				{
-					"boneId" : "sword",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.502061,-0.873099,-0.381775],
-							"rotation" : [0.511707,0.511707,-0.488013,-0.488012]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [0.502061,-0.873099,-0.381774],
-							"rotation" : [0.511707,0.511707,-0.488013,-0.488012]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [0.533158,-0.777407,-0.256155],
-							"rotation" : [0.515076,0.517524,-0.497761,-0.468081]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [0.608250,-0.544709,0.043539],
-							"rotation" : [0.521806,0.531273,-0.521421,-0.416638]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [0.722229,-0.176677,0.497025],
-							"rotation" : [-0.527337,-0.551544,0.555253,0.330771]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [0.853428,0.279645,1.021714],
-							"rotation" : [-0.525453,-0.573805,0.588227,0.220535]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [0.984145,0.800789,1.555352],
-							"rotation" : [-0.512663,-0.593302,0.612988,0.097029]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [1.077812,1.334611,1.970298],
-							"rotation" : [-0.487129,-0.609057,0.625782,-0.012285]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [1.122592,1.792889,2.208588],
-							"rotation" : [-0.457848,-0.624253,0.626191,-0.092560]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [1.078075,2.245657,2.324352],
-							"rotation" : [0.411082,0.663139,-0.608901,0.143173]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [0.914484,2.728814,2.360341],
-							"rotation" : [0.327180,0.741883,-0.563532,0.158097]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [0.647898,3.193633,2.367610],
-							"rotation" : [0.201589,0.848179,-0.474360,0.122218]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [0.510663,3.388229,2.363944],
-							"rotation" : [0.104586,0.913094,-0.388380,0.066952]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [0.967998,2.873936,2.075348],
-							"rotation" : [0.065252,0.881564,-0.426291,-0.191998]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [1.801152,1.955894,1.397218],
-							"rotation" : [0.267027,0.738353,-0.400016,-0.472778]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [2.777804,0.904974,0.430494],
-							"rotation" : [-0.573757,-0.375024,0.205305,0.698577]
-						}
-					]
-				},
-				{
-					"boneId" : "upper_arm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.420666,-0.125891,0.802834,-0.403297]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.418456,-0.123925,0.802725,-0.406410]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.412134,-0.119304,0.803075,-0.413501]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.400739,-0.112515,0.804707,-0.423315]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.385228,-0.104903,0.807947,-0.433378]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.366513,-0.097535,0.812979,-0.441837]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.349460,-0.092056,0.818582,-0.446460]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.333290,-0.087315,0.824216,-0.449403]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.317549,-0.082931,0.829711,-0.451514]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.300549,-0.078285,0.835417,-0.453454]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.283552,-0.073708,0.840875,-0.455076]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.266739,-0.069173,0.846016,-0.456424]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.250253,-0.064772,0.850833,-0.457452]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.235585,-0.060888,0.854948,-0.458101]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.222638,-0.057479,0.858468,-0.458433]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.211546,-0.054567,0.861438,-0.458471]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.203950,-0.052577,0.863538,-0.458194]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.198645,-0.051211,0.865118,-0.457699]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [0.122852,-1.799986,0.100002],
-							"rotation" : [-0.195450,-0.050417,0.866259,-0.457004]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [0.122853,-1.799986,0.100002],
-							"rotation" : [-0.194950,-0.050444,0.867363,-0.455117]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [0.122853,-1.799986,0.100002],
-							"rotation" : [-0.198085,-0.051727,0.869359,-0.449779]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [0.122853,-1.799986,0.100002],
-							"rotation" : [-0.209655,-0.056573,0.873178,-0.436355]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [0.122853,-1.799986,0.100002],
-							"rotation" : [-0.229255,-0.065343,0.876127,-0.419015]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [0.122853,-1.799986,0.100002],
-							"rotation" : [-0.255760,-0.077444,0.876014,-0.401482]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [0.122853,-1.799986,0.100002],
-							"rotation" : [-0.288681,-0.092490,0.871533,-0.385409]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [0.122853,-1.799986,0.100002],
-							"rotation" : [-0.327633,-0.110266,0.861444,-0.372039]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [0.122853,-1.799986,0.100002],
-							"rotation" : [-0.405821,-0.131434,0.820944,-0.379586]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [0.122853,-1.799986,0.100002],
-							"rotation" : [-0.485069,-0.144695,0.769120,-0.390162]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [0.122853,-1.799986,0.100002],
-							"rotation" : [-0.534701,-0.159898,0.734451,-0.386147]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [0.122853,-1.799986,0.100002],
-							"rotation" : [-0.547655,-0.165475,0.726672,-0.380315]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [0.122853,-1.799986,0.100002],
-							"rotation" : [-0.538874,-0.163908,0.733168,-0.381069]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [0.122853,-1.799986,0.100002],
-							"rotation" : [-0.515596,-0.161739,0.751755,-0.377976]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [0.122853,-1.799986,0.100003],
-							"rotation" : [-0.500027,-0.161058,0.764188,-0.374233]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [0.122853,-1.799986,0.100003],
-							"rotation" : [-0.493284,-0.160900,0.769566,-0.372223]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [0.122853,-1.799986,0.100003],
-							"rotation" : [-0.493284,-0.160900,0.769566,-0.372223]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [0.122853,-1.799986,0.100003],
-							"rotation" : [-0.451397,-0.102122,0.749282,-0.473697]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [0.122853,-1.799986,0.100003],
-							"rotation" : [0.295058,0.135768,-0.692332,0.644348]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [0.122853,-1.799986,0.100002],
-							"rotation" : [-0.055832,0.273911,-0.666839,0.690783]
-						}
-					]
-				},
-				{
-					"boneId" : "lower_arm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [2.523243,0.000000,-0.000000],
-							"rotation" : [0.071812,-0.318112,-0.568924,0.754965]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [2.523243,0.000000,0.000000],
-							"rotation" : [0.071168,-0.321985,-0.575869,0.748088]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [2.523243,0.000000,0.000000],
-							"rotation" : [0.069738,-0.330643,-0.591533,0.732052]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [2.523243,0.000000,0.000000],
-							"rotation" : [0.067615,-0.342337,-0.612560,0.709228]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [2.523243,0.000000,0.000000],
-							"rotation" : [0.065220,-0.354066,-0.633363,0.685008]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [2.523243,0.000000,0.000000],
-							"rotation" : [0.063152,-0.363676,-0.650426,0.663851]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [2.523243,0.000000,0.000000],
-							"rotation" : [0.062020,-0.368862,-0.659734,0.651802]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [2.523243,0.000000,0.000000],
-							"rotation" : [0.061220,-0.372351,-0.665947,0.643522]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [2.523243,0.000000,0.000000],
-							"rotation" : [0.060636,-0.374872,-0.670451,0.637409]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [2.523243,0.000000,0.000000],
-							"rotation" : [0.060108,-0.377114,-0.674451,0.631892]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [2.523243,0.000000,0.000000],
-							"rotation" : [0.059678,-0.378917,-0.677671,0.627393]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [2.523243,0.000001,0.000000],
-							"rotation" : [0.059370,-0.380204,-0.679974,0.624144]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [2.523243,0.000001,0.000000],
-							"rotation" : [0.059142,-0.381141,-0.681650,0.621761]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [2.523243,0.000001,0.000000],
-							"rotation" : [0.059006,-0.381699,-0.682646,0.620337]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [2.523243,0.000001,0.000000],
-							"rotation" : [0.058944,-0.381955,-0.683102,0.619683]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [2.523243,0.000001,0.000000],
-							"rotation" : [0.058946,-0.381945,-0.683085,0.619708]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [2.523243,0.000001,0.000000],
-							"rotation" : [0.059008,-0.381692,-0.682633,0.620355]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.059098,-0.381320,-0.681969,0.621306]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.059215,-0.380839,-0.681108,0.622533]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.059514,-0.379626,-0.678959,0.625586]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.060304,-0.376274,-0.672946,0.633975]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.062403,-0.367292,-0.657035,0.655368]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.065248,-0.354452,-0.634343,0.683897]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.068195,-0.339689,-0.607991,0.714358]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.071026,-0.323589,-0.579000,0.744986]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.073749,-0.306161,-0.547566,0.775241]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.075800,-0.293147,-0.524445,0.795787]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.079602,-0.269182,-0.482363,0.829778]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.082957,-0.240530,-0.430888,0.865794]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.084434,-0.221247,-0.395725,0.887312]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.083566,-0.229576,-0.410589,0.878481]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.082464,-0.240394,-0.430003,0.866319]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.081889,-0.245105,-0.438362,0.860847]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.081728,-0.246479,-0.440813,0.859216]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [2.523243,-0.000000,0.000001],
-							"rotation" : [0.081728,-0.246479,-0.440813,0.859216]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [2.523243,0.000000,0.000001],
-							"rotation" : [0.081728,-0.246479,-0.440813,0.859216]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [2.523243,0.000001,0.000001],
-							"rotation" : [0.080026,-0.322928,-0.595556,0.731181]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [2.523243,0.000002,0.000001],
-							"rotation" : [0.056456,-0.395416,-0.711526,0.578092]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [2.523243,0.000001,-0.000000],
-							"rotation" : [0.056348,-0.403011,-0.730832,0.547989]
-						}
-					]
-				},
-				{
-					"boneId" : "palm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.201964,0.003976,-0.093459,0.974915]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.201708,0.000954,-0.090714,0.975235]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.201133,-0.006576,-0.083920,0.975940]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.200366,-0.018230,-0.073594,0.976783]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.199570,-0.032017,-0.061536,0.977425]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.198930,-0.046474,-0.048939,0.977687]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.198690,-0.058193,-0.038731,0.977566]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.198582,-0.068587,-0.029662,0.977231]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.198557,-0.078097,-0.021163,0.976744]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.198545,-0.087839,-0.012142,0.976072]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.198554,-0.097070,-0.003282,0.975266]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.198655,-0.105603,0.005306,0.974349]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.198775,-0.113547,0.013543,0.973351]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.198911,-0.120259,0.020683,0.972391]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.199069,-0.125900,0.026820,0.971494]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.199259,-0.130514,0.031963,0.970691]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.199441,-0.133442,0.035168,0.970144]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.199606,-0.135359,0.037172,0.969770]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.199761,-0.136364,0.038068,0.969562]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.200017,-0.135943,0.036918,0.969613]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.200619,-0.133048,0.031757,0.970073]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.202139,-0.123921,0.016950,0.971337]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.204024,-0.109295,-0.004052,0.972837]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.205732,-0.090171,-0.027929,0.974045]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [-0.206894,-0.066808,-0.053080,0.974635]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [2.572778,0.000000,0.000000],
-							"rotation" : [-0.207310,-0.039174,-0.077977,0.974375]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [2.572778,0.000000,0.000000],
-							"rotation" : [-0.205105,0.003595,-0.100638,0.973545]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [2.572778,0.000000,0.000000],
-							"rotation" : [-0.202909,0.049661,-0.121854,0.970316]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [2.572779,0.000001,0.000000],
-							"rotation" : [-0.201187,0.085306,-0.137992,0.966025]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [2.572779,0.000001,0.000000],
-							"rotation" : [-0.201101,0.099917,-0.145452,0.963545]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [2.572780,0.000001,0.000000],
-							"rotation" : [-0.201272,0.093322,-0.142751,0.964574]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [2.572780,0.000001,0.000000],
-							"rotation" : [-0.202089,0.080382,-0.138521,0.966184]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [2.572780,0.000001,0.000000],
-							"rotation" : [-0.202702,0.072800,-0.136463,0.966949]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [2.572780,0.000001,0.000000],
-							"rotation" : [-0.202999,0.069784,-0.135779,0.967205]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [2.572778,0.000001,0.000000],
-							"rotation" : [-0.202999,0.069784,-0.135779,0.967205]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [2.572778,0.000001,0.000000],
-							"rotation" : [-0.187354,0.010245,-0.058148,0.980516]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [2.572779,0.000001,0.000000],
-							"rotation" : [-0.214666,0.127688,-0.103924,0.962712]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [2.572779,0.000001,0.000000],
-							"rotation" : [-0.196896,0.527745,-0.103640,0.819741]
-						}
-					]
-				},
-				{
-					"boneId" : "fingers_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.126949,0.593303,-0.445723,0.658184]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.126685,0.591993,-0.447459,0.658236]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.126069,0.588588,-0.451932,0.658352]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.125215,0.582852,-0.459303,0.658517]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.124309,0.575367,-0.468653,0.658684]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.123447,0.566542,-0.479351,0.658797]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.122841,0.558233,-0.488993,0.658917]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.122351,0.550110,-0.498103,0.659017]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.121922,0.542060,-0.506845,0.659101]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.121481,0.533273,-0.516077,0.659187]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.121062,0.524370,-0.525113,0.659269]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.120677,0.515408,-0.533914,0.659339]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.120322,0.506477,-0.542394,0.659404]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.120028,0.498399,-0.549815,0.659466]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.119787,0.491173,-0.556283,0.659507]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.119591,0.484937,-0.561805,0.659477]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.119490,0.480601,-0.565518,0.659496]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.119442,0.477572,-0.568077,0.659505]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.119443,0.475767,-0.569587,0.659507]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.119565,0.475605,-0.569721,0.659486]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.119970,0.477769,-0.567903,0.659416]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.121090,0.485267,-0.561480,0.659237]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.122632,0.497592,-0.550569,0.658968]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.124319,0.513588,-0.535682,0.658648]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.126028,0.532567,-0.516816,0.658324]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.127668,0.553929,-0.493787,0.658056]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.128346,0.587454,-0.453501,0.657847]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.129176,0.616585,-0.413054,0.657665]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.130117,0.634989,-0.384024,0.657559]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.130797,0.640873,-0.374122,0.657425]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.130598,0.637982,-0.378993,0.657486]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.130445,0.631418,-0.389853,0.657503]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.130450,0.627150,-0.396673,0.657507]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.130480,0.625328,-0.399531,0.657506]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.130480,0.625329,-0.399531,0.657506]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.120534,0.631575,-0.389762,0.659295]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [-0.124162,0.672253,-0.316688,0.657548]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.078225,0.710592,-0.115839,0.689580]
-						}
-					]
-				},
-				{
-					"boneId" : "upper_arm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.274086,0.191516,0.902436,0.271675]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.276907,0.185650,0.899077,0.283755]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.278569,0.172614,0.893171,0.307977]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.274825,0.154610,0.886630,0.338310]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.263928,0.135057,0.881641,0.367165]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.245914,0.116605,0.879653,0.390052]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.227245,0.103835,0.881357,0.400983]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.209821,0.093315,0.883999,0.407202]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.193605,0.084317,0.886791,0.411107]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.177174,0.075448,0.889409,0.414570]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.161811,0.067359,0.891676,0.417364]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.147878,0.060219,0.893639,0.419421]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.135066,0.053742,0.895358,0.420955]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.124349,0.048395,0.896769,0.421901]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.115417,0.043993,0.897972,0.422362]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.108180,0.040469,0.899031,0.422376]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.103475,0.038215,0.899897,0.421922]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.100236,0.036695,0.900668,0.421193]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.098251,0.035807,0.901387,0.420198]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.097954,0.035964,0.902876,0.417045]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.100215,0.037990,0.906897,0.407494]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.108088,0.045739,0.916747,0.381837]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.120296,0.060291,0.928595,0.345840]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [0.122852,1.799986,0.100002],
-							"rotation" : [-0.136021,0.081637,0.938828,0.305672]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [0.122852,1.799986,0.100003],
-							"rotation" : [-0.154936,0.109976,0.945595,0.264103]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [0.122852,1.799986,0.100003],
-							"rotation" : [-0.176071,0.146209,0.947624,0.222781]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [0.122852,1.799986,0.100003],
-							"rotation" : [-0.267273,0.199165,0.908772,0.251060]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [0.122852,1.799986,0.100003],
-							"rotation" : [-0.370149,0.241817,0.848857,0.289753]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [0.122852,1.799986,0.100003],
-							"rotation" : [-0.431572,0.274997,0.804106,0.302550]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [0.122852,1.799986,0.100003],
-							"rotation" : [-0.443058,0.288527,0.795491,0.296051]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [0.122852,1.799986,0.100003],
-							"rotation" : [-0.446648,0.278276,0.792552,0.308105]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [0.122852,1.799986,0.100003],
-							"rotation" : [-0.434960,0.264539,0.800887,0.315293]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [0.122852,1.799986,0.100003],
-							"rotation" : [-0.424846,0.256928,0.808115,0.316929]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [0.122852,1.799986,0.100003],
-							"rotation" : [-0.419777,0.254107,0.811729,0.316722]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [0.122852,1.799986,0.100003],
-							"rotation" : [-0.419777,0.254107,0.811729,0.316722]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [0.122853,1.799986,0.100003],
-							"rotation" : [-0.406669,0.173202,0.785729,0.432726]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [0.122853,1.799986,0.100003],
-							"rotation" : [-0.301889,0.147633,0.703870,0.625807]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [0.122852,1.799986,0.100003],
-							"rotation" : [0.004697,0.192249,0.651898,0.733517]
-						}
-					]
-				},
-				{
-					"boneId" : "lower_arm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [2.523243,0.000000,-0.000000],
-							"rotation" : [-0.090222,-0.148174,0.265000,0.948514]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [2.523243,0.000000,-0.000000],
-							"rotation" : [-0.089372,-0.162690,0.291040,0.938531]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [2.523243,0.000000,-0.000000],
-							"rotation" : [-0.087923,-0.190506,0.341440,0.916185]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [2.523243,0.000000,-0.000000],
-							"rotation" : [-0.084901,-0.223609,0.400811,0.884387]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [2.523243,0.000000,-0.000000],
-							"rotation" : [-0.081225,-0.252608,0.452072,0.851600]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [2.523243,0.000000,-0.000000],
-							"rotation" : [-0.078509,-0.273019,0.488307,0.825139]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [2.523243,0.000000,-0.000000],
-							"rotation" : [-0.077407,-0.281370,0.503272,0.813361]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [2.523243,0.000000,-0.000000],
-							"rotation" : [-0.076811,-0.285445,0.510508,0.807467]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [2.523243,0.000000,-0.000000],
-							"rotation" : [-0.076534,-0.287393,0.513988,0.804589]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [2.523243,-0.000000,-0.000000],
-							"rotation" : [-0.076342,-0.288735,0.516385,0.802590]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [2.523243,-0.000000,-0.000000],
-							"rotation" : [-0.076241,-0.289446,0.517657,0.801524]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [2.523243,-0.000000,-0.000000],
-							"rotation" : [-0.076230,-0.289517,0.517784,0.801416]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [2.523243,-0.000000,-0.000000],
-							"rotation" : [-0.076273,-0.289220,0.517252,0.801863]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [2.523243,-0.000000,-0.000001],
-							"rotation" : [-0.076354,-0.288651,0.516235,0.802716]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [2.523243,-0.000000,-0.000001],
-							"rotation" : [-0.076463,-0.287887,0.514869,0.803856]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [2.523243,-0.000000,-0.000001],
-							"rotation" : [-0.076592,-0.286971,0.513229,0.805219]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [2.523243,-0.000000,-0.000001],
-							"rotation" : [-0.076727,-0.286017,0.511525,0.806628]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [2.523243,-0.000000,-0.000001],
-							"rotation" : [-0.076862,-0.285055,0.509805,0.808044]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [2.523243,-0.000000,-0.000001],
-							"rotation" : [-0.076999,-0.284065,0.508034,0.809494]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [2.523243,-0.000000,-0.000001],
-							"rotation" : [-0.077350,-0.281687,0.503817,0.812919]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [2.523243,-0.000000,-0.000001],
-							"rotation" : [-0.078244,-0.274893,0.491633,0.822562]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [2.523242,-0.000000,-0.000001],
-							"rotation" : [-0.080819,-0.256015,0.458164,0.847355]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [2.523242,-0.000001,-0.000001],
-							"rotation" : [-0.084437,-0.227754,0.408182,0.879992]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [2.523242,-0.000001,-0.000001],
-							"rotation" : [-0.087909,-0.193602,0.347220,0.913361]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [2.523242,-0.000001,-0.000001],
-							"rotation" : [-0.090624,-0.154140,0.276219,0.944315]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [2.523242,-0.000001,-0.000001],
-							"rotation" : [-0.092380,-0.108150,0.193452,0.970745]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [2.523242,-0.000001,-0.000001],
-							"rotation" : [-0.091804,-0.121330,0.217045,0.964232]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [2.523242,-0.000001,-0.000001],
-							"rotation" : [-0.091452,-0.126627,0.226466,0.961413]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [2.523242,-0.000001,-0.000001],
-							"rotation" : [-0.093884,-0.104301,0.187263,0.972234]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [2.523242,-0.000001,-0.000001],
-							"rotation" : [-0.093878,-0.074395,0.133191,0.983825]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [2.523242,-0.000001,-0.000001],
-							"rotation" : [-0.092645,-0.102025,0.182487,0.973502]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [2.523242,-0.000001,-0.000001],
-							"rotation" : [-0.091574,-0.130588,0.233762,0.959123]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [2.523242,-0.000001,-0.000001],
-							"rotation" : [-0.090563,-0.143104,0.255958,0.951738]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [2.523242,-0.000001,-0.000001],
-							"rotation" : [-0.090305,-0.146828,0.262593,0.949385]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [2.523242,-0.000000,-0.000000],
-							"rotation" : [-0.090305,-0.146828,0.262594,0.949385]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [2.523242,0.000000,0.000001],
-							"rotation" : [-0.097985,-0.260146,0.489061,0.826766]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [2.523242,0.000001,0.000000],
-							"rotation" : [-0.065009,-0.366972,0.665150,0.647056]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [2.523242,0.000001,-0.000001],
-							"rotation" : [-0.057386,-0.395908,0.714652,0.573791]
-						}
-					]
-				},
-				{
-					"boneId" : "palm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [2.572779,0.000000,-0.000000],
-							"rotation" : [0.123644,0.258094,0.251767,0.924507]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [2.572779,0.000000,-0.000000],
-							"rotation" : [0.122587,0.252061,0.246581,0.927705]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [2.572779,0.000000,-0.000000],
-							"rotation" : [0.120667,0.236953,0.236354,0.934574]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [2.572779,0.000000,-0.000000],
-							"rotation" : [0.118023,0.214123,0.223248,0.943601]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [0.114983,0.188822,0.210597,0.952247]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [0.112075,0.166222,0.200854,0.958888]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [0.111038,0.157047,0.197510,0.961247]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [0.110817,0.153814,0.197509,0.961796]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [0.110961,0.152628,0.199182,0.961623]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [0.111168,0.151074,0.201550,0.961351]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [0.111414,0.149315,0.204336,0.961009]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [0.111686,0.147409,0.207452,0.960604]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [0.111967,0.145484,0.210663,0.960166]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [0.112227,0.143737,0.213632,0.959743]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [2.572779,0.000000,0.000000],
-							"rotation" : [0.112465,0.142173,0.216336,0.959342]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [2.572779,-0.000000,0.000000],
-							"rotation" : [0.112676,0.140815,0.218734,0.958974]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [2.572779,-0.000000,0.000000],
-							"rotation" : [0.112769,0.139742,0.220579,0.958697]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.112835,0.138922,0.222021,0.958476]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.112882,0.138325,0.223118,0.958302]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.112955,0.138002,0.224384,0.958044]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.113145,0.137995,0.227039,0.957397]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.113849,0.140318,0.235036,0.955043]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.115749,0.148516,0.248227,0.950226]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.118791,0.164062,0.264438,0.942892]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.122606,0.187607,0.282103,0.932839]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.126804,0.219658,0.299557,0.919748]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.127066,0.303564,0.255517,0.909073]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.124282,0.392809,0.189307,0.891301]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.122664,0.446384,0.141134,0.875086]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.121972,0.457696,0.129469,0.871135]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.122435,0.464589,0.129382,0.867425]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.123884,0.465968,0.140002,0.864827]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.123924,0.460473,0.143060,0.867261]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [2.572779,-0.000000,0.000001],
-							"rotation" : [0.120629,0.442555,0.118562,0.880646]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [2.572780,-0.000001,0.000001],
-							"rotation" : [0.111194,0.405463,0.052985,0.905775]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [2.572779,-0.000001,0.000001],
-							"rotation" : [0.090041,0.345068,-0.050070,0.932906]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [2.572778,-0.000001,0.000001],
-							"rotation" : [0.072836,0.261006,-0.125104,0.954421]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [2.572779,-0.000001,0.000001],
-							"rotation" : [0.049453,0.172111,-0.217852,0.959413]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [2.572780,0.000000,0.000001],
-							"rotation" : [0.016480,0.028108,-0.239383,0.970378]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [2.572780,0.000001,0.000000],
-							"rotation" : [0.016202,-0.121855,-0.160176,0.979404]
-						}
-					]
-				},
-				{
-					"boneId" : "fingers_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.148866,0.108073,0.057674,0.981241]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.148407,0.108073,0.057738,0.981306]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.147427,0.107640,0.058712,0.981444]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.146266,0.106702,0.060795,0.981593]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.145289,0.105492,0.063368,0.981706]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.144642,0.104394,0.065316,0.981791]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.144438,0.104021,0.066367,0.981791]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.144466,0.103795,0.066947,0.981771]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.144617,0.103543,0.067427,0.981743]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.144827,0.103158,0.068058,0.981708]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.145075,0.102692,0.068774,0.981671]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.145351,0.102162,0.069548,0.981631]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.145635,0.101604,0.070324,0.981591]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.145897,0.101083,0.071026,0.981556]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.146136,0.100604,0.071652,0.981524]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.146347,0.100177,0.072194,0.981496]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.146521,0.099950,0.072469,0.981473]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.146659,0.099784,0.072661,0.981455]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.146765,0.099664,0.072795,0.981442]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.146883,0.099542,0.072870,0.981431]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.147125,0.099307,0.072886,0.981417]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.147870,0.099369,0.072771,0.981308]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.149054,0.099246,0.072502,0.981161]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.150453,0.099404,0.071839,0.980980]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.151946,0.100151,0.070553,0.980767]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.153437,0.101712,0.068321,0.980533]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.149055,0.110298,0.052909,0.981233]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.143073,0.117064,0.034716,0.982151]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.138964,0.120453,0.022828,0.982679]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.137944,0.120662,0.020175,0.982856]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.137931,0.121099,0.019750,0.982812]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.138827,0.120693,0.021248,0.982705]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.139102,0.120454,0.022074,0.982677]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.136901,0.120815,0.019495,0.982996]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.131392,0.121721,0.010583,0.983772]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.123934,0.122413,-0.006449,0.984690]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.118829,0.119619,-0.025352,0.985357]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.112280,0.105995,-0.057881,0.986310]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [0.110370,0.078478,-0.091465,0.986557]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [0.116628,0.062098,-0.085158,0.987568]
-						}
-					]
-				}
-			]
-		},
-		{
-			"id" : "Idle",
-			"bones" : [
-				{
-					"boneId" : "Armature",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "knee_pole_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "foot_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.165545,-1.925576,-2.182647],
-							"rotation" : [0.210148,0.675158,0.210148,0.675157]
-						}
-					]
-				},
-				{
-					"boneId" : "toe_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "ankle_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "global",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "spine_1",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 799.999878
-						}
-					]
-				},
-				{
-					"boneId" : "spine_2",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.000000,0.165955,-0.000000,0.986133]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.000000,0.165954,-0.000000,0.986133]
-						}
-					]
-				},
-				{
-					"boneId" : "spine_3",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.000000,0.136504,-0.000000,0.990640]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.000000,0.136504,-0.000000,0.990640]
-						}
-					]
-				},
-				{
-					"boneId" : "neck",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.016144,-0.064167,0.042967,0.996883]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.016645,-0.064245,0.039941,0.996996]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.017816,-0.064427,0.032856,0.997222]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.019471,-0.064678,0.022842,0.997455]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.021185,-0.064925,0.012471,0.997587]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.022592,-0.065123,0.003937,0.997614]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.023110,-0.065196,0.000796,0.997604]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.022999,-0.065181,0.001467,0.997607]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.022331,-0.065088,0.005519,0.997614]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.021158,-0.064921,0.012630,0.997586]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.019657,-0.064700,0.021731,0.997474]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.018112,-0.064472,0.031068,0.997271]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.016762,-0.064265,0.039227,0.997021]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.015587,-0.064081,0.046324,0.996747]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.014432,-0.063898,0.053287,0.996428]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.013138,-0.063688,0.061086,0.996012]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.012002,-0.063503,0.067913,0.995596]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.011163,-0.063362,0.072962,0.995257]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.010658,-0.063277,0.075995,0.995041]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.010576,-0.063263,0.076485,0.995005]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.010975,-0.063330,0.074088,0.995178]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.012084,-0.063516,0.067419,0.995628]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.013480,-0.063746,0.059018,0.996128]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.014767,-0.063952,0.051264,0.996526]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.015729,-0.064102,0.045467,0.996783]
-						}
-					]
-				},
-				{
-					"boneId" : "skull",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 799.999878
-						}
-					]
-				},
-				{
-					"boneId" : "pelvis",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.000080,0.707107,0.000080,0.707107]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.000318,0.707107,0.000318,0.707107]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.000470,0.707107,-0.000470,0.707107]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.000707,0.707106,-0.000707,0.707106]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.000067,0.707107,-0.000067,0.707107]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.000298,0.707107,0.000298,0.707107]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.000097,0.707107,-0.000097,0.707107]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.000066,0.707107,-0.000066,0.707107]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.000033,0.707107,0.000033,0.707107]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.000089,0.707107,-0.000089,0.707107]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.000559,0.707107,-0.000559,0.707107]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.000242,0.707107,-0.000242,0.707107]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.000013,0.707107,-0.000013,0.707107]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.000286,0.707107,-0.000286,0.707107]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.000939,0.707106,-0.000939,0.707106]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.001312,0.707106,-0.001312,0.707106]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.000627,0.707107,0.000627,0.707107]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.000287,0.707107,0.000287,0.707107]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.000417,0.707107,-0.000417,0.707107]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.000665,0.707106,-0.000665,0.707106]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.001080,0.707106,-0.001080,0.707106]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.000899,0.707106,-0.000899,0.707106]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.000657,0.707106,-0.000657,0.707106]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.000422,0.707107,-0.000422,0.707107]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.000194,0.707107,-0.000194,0.707107]
-						}
-					]
-				},
-				{
-					"boneId" : "thigh_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.006014,0.676301,0.114275,0.727683]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.004312,0.677313,0.115616,0.726541]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.000319,0.679455,0.118673,0.724057]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.005393,0.682009,0.122789,0.720942]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.011351,0.683967,0.126828,0.718314]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.016218,0.684559,0.129946,0.717098]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.017794,0.682802,0.131015,0.718541]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.017097,0.678599,0.130254,0.722665]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.014560,0.671952,0.127489,0.729394]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.010769,0.662853,0.122415,0.738596]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.006314,0.653048,0.115927,0.748365]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.001661,0.645602,0.109972,0.755712]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.002231,0.641259,0.105129,0.760085]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.005782,0.640333,0.101773,0.761303]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.009499,0.642397,0.099451,0.759832]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.013786,0.647358,0.097656,0.755778]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.017779,0.654347,0.096991,0.749738]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.020657,0.661022,0.096724,0.743819]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.022171,0.666628,0.096574,0.738776]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.022213,0.670499,0.096799,0.735233]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.020765,0.673103,0.097932,0.732742]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.017438,0.674899,0.101321,0.730713]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.013409,0.675960,0.105688,0.729197]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.009789,0.676364,0.109793,0.728273]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.007139,0.676381,0.112913,0.727811]
-						}
-					]
-				},
-				{
-					"boneId" : "shin_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.005823,-0.772109,-0.017715,0.635216]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.005799,-0.774732,-0.017780,0.632013]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.005772,-0.780757,-0.017960,0.624550]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.005685,-0.789075,-0.018161,0.614002]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.005546,-0.797490,-0.018315,0.603028]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.005446,-0.804316,-0.018455,0.593890]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.005412,-0.807086,-0.018520,0.590119]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.005415,-0.806753,-0.018511,0.590575]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.005470,-0.803444,-0.018449,0.595070]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.005555,-0.797390,-0.018320,0.603161]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.005622,-0.789696,-0.018119,0.613205]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.005730,-0.782729,-0.017986,0.622076]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.005770,-0.777985,-0.017862,0.628003]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.005780,-0.775926,-0.017802,0.630546]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.005780,-0.776214,-0.017812,0.630191]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.005750,-0.778612,-0.017864,0.627225]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.005716,-0.782208,-0.017954,0.622733]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.005680,-0.785192,-0.018021,0.618964]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.005653,-0.786999,-0.018056,0.616664]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.005651,-0.787206,-0.018062,0.616399]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.005666,-0.785862,-0.018030,0.618113]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.005706,-0.782874,-0.017967,0.621895]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.005756,-0.779182,-0.017890,0.626516]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.005791,-0.775777,-0.017808,0.630729]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.005811,-0.773218,-0.017741,0.633865]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.006399,0.753292,-0.023891,0.657221]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.007437,0.755005,-0.022400,0.655294]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.009803,0.759139,-0.018950,0.650578]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.013360,0.765142,-0.013822,0.643575]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.017354,0.771667,-0.008153,0.635738]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.020719,0.777858,-0.003346,0.628089]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.021952,0.782103,-0.001552,0.622761]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.022047,0.785445,-0.001399,0.618537]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.021313,0.787992,-0.002423,0.615312]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.019948,0.789912,-0.004343,0.612881]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.018085,0.790794,-0.006983,0.611776]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.015852,0.790493,-0.010159,0.612181]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.013542,0.789728,-0.013449,0.613160]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.011027,0.788715,-0.017034,0.614424]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.008008,0.787463,-0.021338,0.615940]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.004140,0.785768,-0.026858,0.617925]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.000325,0.783486,-0.032285,0.620571]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.002552,0.780755,-0.036389,0.623771]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.004207,0.777727,-0.038775,0.627391]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.004459,0.774590,-0.039169,0.631234]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.003459,0.770932,-0.037781,0.635786]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.001158,0.766265,-0.034558,0.641594]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.001586,0.761406,-0.030711,0.647546]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.003966,0.757327,-0.027345,0.652451]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.005669,0.754462,-0.024926,0.655846]
-						}
-					]
-				},
-				{
-					"boneId" : "toes_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.128054,0.251001,0.033514,0.958894]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.128023,0.251001,0.033506,0.958898]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.127999,0.250991,0.033504,0.958904]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.128055,0.250965,0.033524,0.958903]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.128220,0.250910,0.033578,0.958893]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.128485,0.250792,0.033663,0.958886]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.128678,0.250770,0.033715,0.958864]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.128791,0.250769,0.033745,0.958848]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.128845,0.250786,0.033756,0.958836]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.128849,0.250819,0.033752,0.958827]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.128782,0.250865,0.033727,0.958825]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.128624,0.250909,0.033679,0.958836]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.128415,0.250929,0.033622,0.958861]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.128141,0.250939,0.033550,0.958897]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.127781,0.250950,0.033456,0.958946]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.127305,0.250964,0.033332,0.959010]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.126876,0.250966,0.033222,0.959070]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.126607,0.250961,0.033155,0.959109]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.126516,0.250954,0.033135,0.959123]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.126609,0.250967,0.033155,0.959107]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.126864,0.251039,0.033198,0.959053]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.127233,0.251032,0.033295,0.959003]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.127583,0.251019,0.033388,0.958956]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.127842,0.251008,0.033457,0.958922]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.127998,0.251003,0.033499,0.958901]
-						}
-					]
-				},
-				{
-					"boneId" : "thigh_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.221729,0.463492,-0.243184,0.822723]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.222955,0.462977,-0.243225,0.822670]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.225887,0.461520,-0.243379,0.822643]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.230175,0.458964,-0.243723,0.822782]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.234885,0.455535,-0.244286,0.823190]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.239294,0.451385,-0.245100,0.823963]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.242294,0.447008,-0.246171,0.825153]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.244895,0.441396,-0.247624,0.826969]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.247345,0.434435,-0.249567,0.829339]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.249867,0.426001,-0.252180,0.832163]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.252046,0.417720,-0.255261,0.834760]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.253247,0.412162,-0.258698,0.836100]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.253501,0.409615,-0.262172,0.836193]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.252815,0.410210,-0.265955,0.834913]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.251214,0.413625,-0.270500,0.832247]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.248520,0.419926,-0.276279,0.827991]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.244953,0.428160,-0.281635,0.823018]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.241298,0.436077,-0.285341,0.818653]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.237835,0.443032,-0.287062,0.815323]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.234862,0.448387,-0.286229,0.813549]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.231996,0.452771,-0.282237,0.813338]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.228797,0.456745,-0.273423,0.815031]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.225848,0.459936,-0.262809,0.817547]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.223648,0.462024,-0.253238,0.819992]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.222257,0.463148,-0.246191,0.821879]
-						}
-					]
-				},
-				{
-					"boneId" : "shin_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.005996,-0.756207,0.017350,0.654075]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.005992,-0.756540,0.017357,0.653689]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.005987,-0.757151,0.017372,0.652981]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.005980,-0.757699,0.017384,0.652346]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.005979,-0.757819,0.017387,0.652206]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.005985,-0.757232,0.017373,0.652887]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.006003,-0.755754,0.017342,0.654599]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.006062,-0.752572,0.017294,0.658255]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.006209,-0.747386,0.017268,0.664136]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.006331,-0.740143,0.017152,0.672201]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.006248,-0.732368,0.016811,0.680672]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.006430,-0.726915,0.016816,0.686492]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.006319,-0.724859,0.016636,0.688667]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.006437,-0.726590,0.016812,0.686835]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.006480,-0.732078,0.017035,0.680977]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.006148,-0.741564,0.017014,0.670638]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.006241,-0.752614,0.017476,0.658201]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.006053,-0.761988,0.017602,0.647323]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.005882,-0.768738,0.017659,0.639293]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.005824,-0.772050,0.017713,0.635289]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.005820,-0.772375,0.017721,0.634893]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.005856,-0.769707,0.017666,0.638126]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.005923,-0.765511,0.017591,0.643156]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.005967,-0.761209,0.017489,0.648243]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.005982,-0.757765,0.017388,0.652268]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.042896,0.857821,0.092549,0.503724]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [0.044788,0.857342,0.095233,0.503874]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [0.049270,0.856178,0.101594,0.504193]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.055739,0.854375,0.110769,0.504645]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [3.849471,-0.000000,-0.000001],
-							"rotation" : [0.062682,0.852297,0.120609,0.505089]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [3.849471,-0.000000,-0.000001],
-							"rotation" : [0.068848,0.850487,0.129339,0.505177]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [3.849471,-0.000000,-0.000001],
-							"rotation" : [0.072197,0.849990,0.134072,0.504311]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [3.849471,-0.000001,-0.000000],
-							"rotation" : [0.073929,0.850191,0.136508,0.503067]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [3.849471,-0.000001,0.000000],
-							"rotation" : [0.074328,0.850679,0.137060,0.502031]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [3.849471,-0.000000,0.000000],
-							"rotation" : [0.073710,0.851271,0.136177,0.501359]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [3.849471,0.000001,-0.000001],
-							"rotation" : [0.072227,0.852012,0.134072,0.500883]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [3.849471,0.000001,-0.000000],
-							"rotation" : [0.070289,0.853160,0.131318,0.499934]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.068471,0.854761,0.128719,0.498123]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.066883,0.857082,0.126428,0.494927]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [3.849471,0.000001,0.000001],
-							"rotation" : [0.065361,0.860378,0.124211,0.489948]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [3.849471,0.000001,0.000001],
-							"rotation" : [0.063633,0.864925,0.121687,0.482751]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [3.849471,0.000001,0.000001],
-							"rotation" : [0.061811,0.869427,0.119005,0.475515]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.059892,0.872893,0.116219,0.470068]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [3.849471,0.000001,-0.000000],
-							"rotation" : [0.057909,0.874942,0.113383,0.467192]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [3.849471,0.000001,-0.000001],
-							"rotation" : [0.055923,0.875243,0.110577,0.467542]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [3.849471,0.000001,0.000001],
-							"rotation" : [0.053613,0.873854,0.107346,0.471149]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [3.849471,0.000001,0.000000],
-							"rotation" : [0.050586,0.870478,0.103155,0.478611]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.047557,0.866174,0.098971,0.487529]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.045147,0.862155,0.095645,0.495481]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.043535,0.859132,0.093427,0.501266]
-						}
-					]
-				},
-				{
-					"boneId" : "toes_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [-0.112813,0.251512,-0.029510,0.960804]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [-0.112724,0.251514,-0.029486,0.960814]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [-0.112526,0.251521,-0.029433,0.960838]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [-0.112264,0.251530,-0.029361,0.960868]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [-0.111998,0.251541,-0.029288,0.960899]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [-0.111755,0.251551,-0.029221,0.960926]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [-0.111501,0.251563,-0.029151,0.960955]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [-0.111302,0.251423,-0.029149,0.961014]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [-0.111227,0.251337,-0.029159,0.961045]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [-0.111284,0.251365,-0.029164,0.961031]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [-0.111429,0.251392,-0.029191,0.961007]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [-0.111479,0.251413,-0.029196,0.960995]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [-0.111330,0.251428,-0.029153,0.961010]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [-0.110895,0.251400,-0.029059,0.961070]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [-0.110137,0.251346,-0.028895,0.961177]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [-0.109022,0.251343,-0.028613,0.961313]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [1.077242,0.000000,-0.000000],
-							"rotation" : [-0.107933,0.251551,-0.028272,0.961391]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [1.077242,0.000000,-0.000001],
-							"rotation" : [-0.107204,0.251616,-0.028067,0.961462]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [1.077242,0.000000,-0.000001],
-							"rotation" : [-0.106919,0.251620,-0.027994,0.961495]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [1.077242,0.000000,-0.000001],
-							"rotation" : [-0.107142,0.251611,-0.028053,0.961470]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [1.077242,0.000000,-0.000001],
-							"rotation" : [-0.107874,0.251588,-0.028245,0.961389]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [1.077242,0.000000,0.000000],
-							"rotation" : [-0.109148,0.251549,-0.028579,0.961246]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [-0.110533,0.251561,-0.028920,0.961074]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [-0.111691,0.251559,-0.029210,0.960932]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [1.077242,0.000000,0.000001],
-							"rotation" : [-0.112488,0.251526,-0.029423,0.960841]
-						}
-					]
-				},
-				{
-					"boneId" : "torso_ctrl",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 799.999878
-						}
-					]
-				},
-				{
-					"boneId" : "ball_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "knee_pole_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [4.600000,-3.856558,4.352602]
-						}
-					]
-				},
-				{
-					"boneId" : "body_ctrl",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [6.146656,-0.251114,0.400000],
-							"rotation" : [0.039751,0.499473,-0.022950,0.865113]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [6.131595,-0.225988,0.405734],
-							"rotation" : [0.038216,0.499593,-0.020293,0.865179]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [6.096384,-0.167319,0.421343],
-							"rotation" : [0.034625,0.499854,-0.014075,0.865303]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [6.046653,-0.084530,0.447836],
-							"rotation" : [0.029547,0.500180,-0.005286,0.865401]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [5.995188,0.001089,0.482445],
-							"rotation" : [0.024286,0.500463,0.003814,0.865409]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [5.952842,0.071514,0.523441],
-							"rotation" : [0.019955,0.500655,0.011301,0.865343]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [5.937253,0.097450,0.566379],
-							"rotation" : [0.018361,0.500716,0.014056,0.865303]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [5.946430,0.095714,0.620077],
-							"rotation" : [0.018701,0.500703,0.013468,0.865312]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [5.980219,0.072241,0.685766],
-							"rotation" : [0.020758,0.500622,0.009913,0.865360]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [6.035985,0.030860,0.764912],
-							"rotation" : [0.024366,0.500459,0.003675,0.865409]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [6.100959,-0.022470,0.842917],
-							"rotation" : [0.028983,0.500213,-0.004311,0.865406]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [6.151707,-0.078116,0.897646],
-							"rotation" : [0.033719,0.499916,-0.012506,0.865327]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [6.179118,-0.127713,0.926365],
-							"rotation" : [0.037855,0.499620,-0.019667,0.865194]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [6.179282,-0.172203,0.928793],
-							"rotation" : [0.041451,0.499335,-0.025896,0.865030]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [6.153686,-0.217313,0.908533],
-							"rotation" : [0.044980,0.499029,-0.032009,0.864825]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [6.101451,-0.269170,0.865537],
-							"rotation" : [0.048930,0.498657,-0.038857,0.864544]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [6.036354,-0.315652,0.803921],
-							"rotation" : [0.052388,0.498306,-0.044853,0.864254]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [5.981874,-0.350391,0.740802],
-							"rotation" : [0.054944,0.498031,-0.049287,0.864012]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [5.946153,-0.371439,0.681593],
-							"rotation" : [0.056479,0.497859,-0.051951,0.863856]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [5.936171,-0.376753,0.631412],
-							"rotation" : [0.056728,0.497831,-0.052382,0.863830]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [5.951241,-0.367755,0.583896],
-							"rotation" : [0.055514,0.497967,-0.050276,0.863955]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [5.993130,-0.342743,0.530263],
-							"rotation" : [0.052137,0.498332,-0.044419,0.864276]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [6.045877,-0.311252,0.478471],
-							"rotation" : [0.047883,0.498759,-0.037041,0.864624]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [6.094554,-0.282198,0.437788],
-							"rotation" : [0.043955,0.499121,-0.030233,0.864889]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [6.130951,-0.260481,0.410693],
-							"rotation" : [0.041017,0.499371,-0.025144,0.865052]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.165545,1.865067,0.605976],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						}
-					]
-				},
-				{
-					"boneId" : "ball_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "ankle_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "toe_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "sword_casing",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 799.999878
-						}
-					]
-				},
-				{
-					"boneId" : "arm_pole_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [2.399996,-4.299984,-0.099997]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [2.399996,-4.299984,-0.099997]
-						}
-					]
-				},
-				{
-					"boneId" : "arm_pole_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 799.999878
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [-3.152660,-2.434659,-1.849996],
-							"rotation" : [-0.000000,0.707107,-0.707107,-0.000000]
-						}
-					]
-				},
-				{
-					"boneId" : "thumb_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.153559,0.166642,-0.243344],
-							"rotation" : [-0.081221,0.785392,-0.383246,0.479255],
-							"scale" : [0.800000,0.800000,0.800000]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [0.153559,0.166642,-0.243344],
-							"rotation" : [-0.081221,0.785392,-0.383246,0.479255],
-							"scale" : [0.800000,0.800000,0.800000]
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ik_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.500087,-0.499913,0.500087,0.499913]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.500079,-0.499921,0.500079,0.499921]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.500021,-0.499979,0.500021,0.499979]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.499981,-0.500019,0.499981,0.500019]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.500018,-0.499982,0.500018,0.499982]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.500164,-0.499836,0.500164,0.499836]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.500078,-0.499922,0.500078,0.499922]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.500072,-0.499928,0.500072,0.499928]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.500028,-0.499972,0.500028,0.499972]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.499955,-0.500045,0.499955,0.500045]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.500029,-0.499971,0.500029,0.499971]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.500021,-0.499980,0.500021,0.499980]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.500059,-0.499941,0.500059,0.499941]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.500060,-0.499940,0.500060,0.499940]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.500054,-0.499945,0.500054,0.499945]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.500220,-0.499780,0.500220,0.499780]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.500083,-0.499917,0.500083,0.499917]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.500088,-0.499912,0.500088,0.499912]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.500005,-0.499995,0.500005,0.499995]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.499916,-0.500084,0.499916,0.500084]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.500245,-0.499755,0.500245,0.499755]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.500001,-0.499999,0.500001,0.499999]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.500014,-0.499986,0.500014,0.499986]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.500077,-0.499923,0.500077,0.499923]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.500085,-0.499915,0.500085,0.499915]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.055614,0.731206,0.060052,0.677229],
-							"scale" : [0.720000,0.720000,0.720000]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.055614,0.731206,0.060052,0.677229],
-							"scale" : [0.720000,0.720000,0.720000]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ik_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 799.999878
-						}
-					]
-				},
-				{
-					"boneId" : "shield",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [-4.167537,2.816641,-1.933273],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [-4.167537,2.816641,-1.933273],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						}
-					]
-				},
-				{
-					"boneId" : "thumb_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.047806,0.118592,0.201995,0.971004]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.047806,0.118592,0.201995,0.971004]
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ik_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.498391,-0.501604,-0.498391,0.501604]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.499409,-0.500590,-0.499409,0.500590]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.499481,-0.500519,-0.499481,0.500519]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.498863,-0.501135,-0.498863,0.501135]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.498449,-0.501547,-0.498449,0.501547]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.499700,-0.500300,-0.499700,0.500300]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.500083,0.499917,0.500083,-0.499917]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.499655,-0.500345,-0.499655,0.500345]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.499375,-0.500624,-0.499375,0.500624]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.499636,-0.500364,-0.499636,0.500364]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.500123,0.499877,0.500123,-0.499877]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.498629,-0.501368,-0.498629,0.501368]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.498321,-0.501674,-0.498321,0.501674]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.498314,-0.501681,-0.498314,0.501681]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.498117,-0.501876,-0.498117,0.501876]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.497778,-0.502212,-0.497778,0.502212]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.498740,-0.501257,-0.498740,0.501257]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.498778,-0.501219,-0.498778,0.501219]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.498644,-0.501352,-0.498644,0.501352]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.498913,-0.501085,-0.498913,0.501085]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.499910,-0.500090,-0.499910,0.500090]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.499291,-0.500708,-0.499291,0.500708]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.499035,-0.500963,-0.499035,0.500963]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.499036,-0.500962,-0.499036,0.500962]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.498988,-0.501010,-0.498988,0.501010]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 799.999878
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ik_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 799.999878
-						}
-					]
-				},
-				{
-					"boneId" : "sword",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 799.999878
-						}
-					]
-				},
-				{
-					"boneId" : "upper_arm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.420667,-0.125891,0.802834,-0.403297]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.420667,-0.125891,0.802834,-0.403297]
-						}
-					]
-				},
-				{
-					"boneId" : "lower_arm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.071812,-0.318112,-0.568924,0.754965]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.071812,-0.318112,-0.568924,0.754965]
-						}
-					]
-				},
-				{
-					"boneId" : "palm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.201964,0.003975,-0.093459,0.974915]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.201964,0.003975,-0.093459,0.974915]
-						}
-					]
-				},
-				{
-					"boneId" : "fingers_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.126949,0.593304,-0.445724,0.658183]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.126949,0.593304,-0.445723,0.658183]
-						}
-					]
-				},
-				{
-					"boneId" : "upper_arm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.274086,0.191516,0.902436,0.271675]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.274086,0.191516,0.902436,0.271675]
-						}
-					]
-				},
-				{
-					"boneId" : "lower_arm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.090222,-0.148174,0.265000,0.948514]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.090222,-0.148174,0.265000,0.948514]
-						}
-					]
-				},
-				{
-					"boneId" : "palm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.123644,0.258095,0.251768,0.924506]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.123644,0.258093,0.251766,0.924508]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.123644,0.258094,0.251768,0.924507]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.123645,0.258093,0.251767,0.924507]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.123644,0.258094,0.251768,0.924506]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.123645,0.258092,0.251766,0.924508]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.123645,0.258093,0.251767,0.924507]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.123645,0.258091,0.251765,0.924508]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.123644,0.258095,0.251769,0.924506]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.123644,0.258093,0.251766,0.924508]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.123645,0.258093,0.251767,0.924507]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.123645,0.258090,0.251764,0.924509]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.123645,0.258093,0.251766,0.924507]
-						}
-					]
-				},
-				{
-					"boneId" : "fingers_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.148866,0.108072,0.057673,0.981241]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.148866,0.108076,0.057675,0.981240]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.148866,0.108077,0.057676,0.981240]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.148866,0.108072,0.057673,0.981241]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.148866,0.108076,0.057675,0.981240]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.148866,0.108072,0.057673,0.981241]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.148866,0.108078,0.057676,0.981240]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.148866,0.108077,0.057676,0.981240]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.148866,0.108074,0.057674,0.981240]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.148866,0.108077,0.057676,0.981240]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.148866,0.108070,0.057672,0.981241]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.148866,0.108076,0.057675,0.981240]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.148866,0.108076,0.057675,0.981240]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.148866,0.108073,0.057674,0.981241]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.148866,0.108074,0.057674,0.981240]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.148865,0.108081,0.057678,0.981239]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.148866,0.108076,0.057675,0.981240]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.148866,0.108075,0.057675,0.981240]
-						}
-					]
-				}
-			]
-		},
-		{
-			"id" : "Sneak",
-			"bones" : [
-				{
-					"boneId" : "Armature",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "knee_pole_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [4.599999,0.856558,5.352602]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [4.599999,0.878403,5.352602]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [4.599999,0.934911,5.352602]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [4.599999,1.022323,5.352602]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [4.599999,1.124560,5.352602]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [4.599999,1.229201,5.352602]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [4.599999,1.330109,5.352602]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [4.599999,1.441664,5.352602]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [4.599999,1.562438,5.352602]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [4.599999,1.702813,5.352602]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [4.599999,1.855021,5.352602]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [4.599999,2.029352,5.352602]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [4.599999,2.228538,5.352602]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [4.599999,2.434535,5.352602]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [4.599999,2.645008,5.352602]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [4.599999,2.856558,5.352602]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [4.600000,3.094336,5.242337]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [4.600000,3.358881,5.002685]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [4.600000,3.608097,4.708292]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [4.600000,3.783371,4.465095]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [4.600000,3.855108,4.354830]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [4.600000,3.856558,4.352602]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [4.600000,3.856558,4.352602]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [4.600000,3.718328,4.352602]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [4.600000,3.403482,4.352602]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [4.600000,2.976882,4.352602]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [4.600000,2.557624,4.352602]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [4.600000,2.240912,4.352602]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [4.603420,2.067867,4.355669]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [4.610915,1.965081,4.371233]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [4.619861,1.894642,4.406718]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [4.627738,1.823673,4.468970]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [4.631158,1.721230,4.554807]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [4.627773,1.535535,4.708638]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [4.620222,1.312290,4.911611]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [4.611276,1.095838,5.117321]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [4.603455,0.927050,5.282483]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.165545,-0.925576,-2.182647],
-							"rotation" : [0.210148,0.675158,0.210148,0.675157]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [0.165545,-0.939184,-2.298995],
-							"rotation" : [0.210148,0.675158,0.210148,0.675157]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [0.165545,-0.977764,-2.546274],
-							"rotation" : [0.210148,0.675158,0.210148,0.675157]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [0.165545,-1.043157,-2.846536],
-							"rotation" : [0.210148,0.675158,0.210148,0.675157]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [0.165545,-1.127214,-3.092405],
-							"rotation" : [0.210148,0.675158,0.210148,0.675157]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [0.165545,-1.223629,-3.203958],
-							"rotation" : [0.210148,0.675158,0.210148,0.675157]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [0.350898,-1.363306,-3.078814],
-							"rotation" : [0.198324,0.670951,0.200752,0.685705]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [0.765332,-1.548526,-2.763475],
-							"rotation" : [0.169720,0.659513,0.178325,0.710238]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [1.246096,-1.727182,-2.324673],
-							"rotation" : [0.132605,0.645601,0.149659,0.737033]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [1.665031,-1.867480,-1.809462],
-							"rotation" : [0.094129,0.635231,0.120742,0.756996]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [1.850134,-1.924995,-1.337139],
-							"rotation" : [0.067623,0.630968,0.102442,0.766037]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [1.813078,-1.925576,-0.889518],
-							"rotation" : [0.052018,0.631993,0.095026,0.767365]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [1.710356,-1.925576,-0.395682],
-							"rotation" : [0.039155,0.633265,0.091579,0.767499]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [1.561915,-1.925576,0.077494],
-							"rotation" : [0.030481,0.634917,0.091254,0.766567]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [1.385328,-1.925576,0.509184],
-							"rotation" : [0.025614,0.637235,0.092471,0.764673]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [1.201372,-1.925576,0.873982],
-							"rotation" : [0.024075,0.640629,0.093420,0.761766]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [0.979619,-1.918949,1.138742],
-							"rotation" : [0.029082,0.650359,0.090850,0.753614]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [0.710282,-1.904427,1.348308],
-							"rotation" : [0.040466,0.666424,0.085608,0.739536]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [0.443378,-1.886567,1.498045],
-							"rotation" : [0.053431,0.683983,0.078092,0.723335]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [0.248796,-1.871828,1.579354],
-							"rotation" : [0.063538,0.697769,0.071290,0.709929]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [0.167194,-1.865201,1.605449],
-							"rotation" : [0.068315,0.703670,0.068469,0.703913]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [0.165546,-1.865067,1.487469],
-							"rotation" : [0.068406,0.703790,0.068406,0.703790]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [0.165546,-1.865067,1.201769],
-							"rotation" : [0.068406,0.703790,0.068406,0.703790]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [0.165546,-1.865067,0.832644],
-							"rotation" : [0.068406,0.703790,0.068406,0.703790]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [0.165546,-1.865067,0.454800],
-							"rotation" : [0.068406,0.703790,0.068406,0.703790]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [0.165546,-1.865067,0.159240],
-							"rotation" : [0.068406,0.703790,0.068406,0.703790]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [0.165546,-1.788923,0.006932],
-							"rotation" : [0.068406,0.703790,0.068406,0.703790]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [0.165546,-1.622287,-0.091385],
-							"rotation" : [0.068406,0.703790,0.068406,0.703790]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [0.165546,-1.415940,-0.165723],
-							"rotation" : [0.068406,0.703790,0.068406,0.703790]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [0.165546,-1.244320,-0.242466],
-							"rotation" : [0.068406,0.703790,0.068406,0.703790]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [0.165546,-1.167398,-0.357381],
-							"rotation" : [0.068406,0.703790,0.068406,0.703790]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [0.165546,-1.165067,-0.532005],
-							"rotation" : [0.072345,0.703396,0.072345,0.703396]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [0.165546,-1.165067,-0.729841],
-							"rotation" : [0.082253,0.702307,0.082254,0.702306]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [0.165546,-1.165067,-0.941870],
-							"rotation" : [0.096498,0.700491,0.096498,0.700491]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [0.165545,-1.165067,-1.160595],
-							"rotation" : [0.113453,0.697946,0.113453,0.697946]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [0.165545,-1.165067,-1.356898],
-							"rotation" : [0.129169,0.695209,0.129169,0.695209]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [0.165545,-1.138576,-1.568707],
-							"rotation" : [0.147615,0.691527,0.147615,0.691527]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [0.165545,-1.080713,-1.787498],
-							"rotation" : [0.168878,0.686644,0.168878,0.686644]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [0.165545,-1.012131,-1.982682],
-							"rotation" : [0.188902,0.681407,0.188902,0.681407]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [0.165545,-0.952126,-2.125606],
-							"rotation" : [0.204064,0.677022,0.204064,0.677021]
-						}
-					]
-				},
-				{
-					"boneId" : "toe_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1300.000122
-						}
-					]
-				},
-				{
-					"boneId" : "ankle_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1300.000122
-						}
-					]
-				},
-				{
-					"boneId" : "global",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "spine_1",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1300.000122
-						}
-					]
-				},
-				{
-					"boneId" : "spine_2",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.000000,0.165955,-0.000000,0.986133]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.000000,0.165955,-0.000000,0.986133]
-						}
-					]
-				},
-				{
-					"boneId" : "spine_3",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.000000,0.136504,-0.000000,0.990639]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.000000,0.136504,-0.000000,0.990639]
-						}
-					]
-				},
-				{
-					"boneId" : "neck",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.010435,-0.063239,0.077335,0.994943]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.010143,-0.063190,0.079089,0.994811]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.009502,-0.063081,0.082931,0.994511]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.008715,-0.062946,0.087655,0.994122]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.008065,-0.062832,0.091551,0.993783]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.007773,-0.062781,0.093303,0.993626]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.008724,-0.062858,0.088090,0.994089]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.011024,-0.063097,0.075156,0.995112]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.013931,-0.063474,0.058237,0.996185]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.016869,-0.063983,0.040235,0.996997]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.018884,-0.064582,0.026426,0.997384]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.020043,-0.069779,0.018261,0.997194]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.020932,-0.080748,0.012206,0.996440]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.021328,-0.093233,0.007052,0.995391]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.021185,-0.103826,0.001074,0.994369]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.020441,-0.108673,-0.007649,0.993838]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.016574,-0.103741,-0.020440,0.994256]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.009370,-0.092887,-0.035771,0.994990]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.000661,-0.079535,-0.052133,0.995468]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.006668,-0.068467,-0.066454,0.995415]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.010359,-0.063342,-0.077119,0.994954]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.010636,-0.063044,-0.084036,0.994410]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.010090,-0.062901,-0.089058,0.993987]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.009156,-0.062819,-0.091914,0.993741]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.008229,-0.062785,-0.093128,0.993639]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.007771,-0.062780,-0.093336,0.993623]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.008733,-0.062858,-0.088036,0.994094]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.010969,-0.063092,-0.075465,0.995090]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.013962,-0.063479,-0.058049,0.996196]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.016828,-0.063971,-0.040514,0.996987]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.018843,-0.064571,-0.026705,0.997378]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.020055,-0.069832,-0.018179,0.997191]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.020916,-0.080493,-0.012308,0.996460]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.021328,-0.092983,-0.007157,0.995414]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.021177,-0.103873,-0.000988,0.994365]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.020454,-0.108578,0.007479,0.993849]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.016384,-0.103654,0.022138,0.994232]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.008884,-0.092634,0.040201,0.994849]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [0.000238,-0.079634,0.057900,0.995141]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.007215,-0.068277,0.071705,0.995060]
-						}
-					]
-				},
-				{
-					"boneId" : "skull",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.000000,0.047960,0.000000,0.998849]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.000000,0.046042,0.000000,0.998940]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.000000,0.040996,0.000000,0.999159]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.000000,0.033090,0.000000,0.999452]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.000000,0.023730,0.000000,0.999718]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.000000,0.014020,0.000000,0.999902]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.000000,0.001562,0.000000,0.999999]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.000000,-0.014377,0.000000,0.999897]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.000000,-0.029466,0.000000,0.999566]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.000000,-0.041154,0.000000,0.999153]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.000000,-0.045874,0.000000,0.998947]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.000000,-0.042089,0.000000,0.999114]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.000000,-0.032491,0.000000,0.999472]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.000000,-0.019684,-0.000000,0.999806]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.000000,-0.005941,-0.000000,0.999982]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.000000,0.006085,-0.000000,0.999981]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.000000,0.016646,-0.000000,0.999861]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.000000,0.027874,-0.000000,0.999611]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.000000,0.038125,-0.000000,0.999273]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.000000,0.045140,-0.000000,0.998981]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.000000,0.047904,-0.000000,0.998852]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.000000,0.046080,-0.000000,0.998938]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.000000,0.040934,-0.000000,0.999162]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.000000,0.033277,-0.000000,0.999446]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.000000,0.023926,-0.000000,0.999714]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.000000,0.013922,-0.000000,0.999903]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.000000,0.001436,-0.000000,0.999999]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.000000,-0.014042,-0.000000,0.999901]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.000000,-0.029602,-0.000000,0.999562]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.000000,-0.041058,-0.000000,0.999157]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.000000,-0.045778,-0.000000,0.998952]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.000000,-0.042050,-0.000000,0.999116]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.000000,-0.032719,-0.000000,0.999465]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.000000,-0.019974,-0.000000,0.999801]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.000000,-0.005823,-0.000000,0.999983]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.000000,0.005849,-0.000000,0.999983]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.000000,0.016753,-0.000000,0.999860]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.000000,0.027990,-0.000000,0.999608]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [0.000000,0.037956,-0.000000,0.999279]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [0.000000,0.045167,0.000000,0.998979]
-						}
-					]
-				},
-				{
-					"boneId" : "pelvis",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.000559,0.707107,0.000559,0.707107]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.000011,0.707107,0.000011,0.707107]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.000032,0.707107,0.000032,0.707107]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.000579,0.707107,-0.000579,0.707107]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.001248,0.707106,-0.001248,0.707106]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.000504,0.707107,0.000504,0.707107]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.000415,0.707107,-0.000415,0.707107]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.000110,0.707107,0.000110,0.707107]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.000278,0.707107,0.000278,0.707107]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.000401,0.707107,-0.000401,0.707107]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.000641,0.707106,-0.000641,0.707106]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.000223,0.707107,0.000223,0.707107]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.000230,0.707107,0.000230,0.707107]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.000019,0.707107,-0.000019,0.707107]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.000170,0.707107,-0.000170,0.707107]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.000192,0.707107,-0.000192,0.707107]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.000399,0.707107,-0.000399,0.707107]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.000143,0.707107,-0.000143,0.707107]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.000031,0.707107,0.000031,0.707107]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.000216,0.707107,0.000216,0.707107]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.001260,0.707106,0.001260,0.707106]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.000673,0.707106,0.000673,0.707106]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.001128,0.707106,0.001128,0.707106]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.001376,0.707105,0.001376,0.707105]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.000976,0.707106,0.000976,0.707106]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.000517,0.707107,0.000517,0.707107]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.000914,0.707106,0.000914,0.707106]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.001005,0.707106,0.001005,0.707106]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.000600,0.707107,0.000600,0.707107]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.000064,0.707107,-0.000064,0.707107]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.000313,0.707107,-0.000313,0.707107]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.000339,0.707107,-0.000339,0.707107]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.000344,0.707107,-0.000344,0.707107]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.000356,0.707107,-0.000356,0.707107]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.000317,0.707107,-0.000317,0.707107]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.000076,0.707107,-0.000076,0.707107]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.000006,0.707107,0.000006,0.707107]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.000188,0.707107,-0.000188,0.707107]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [-0.000146,0.707107,0.000146,0.707107]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.000846,0.707106,0.000846,0.707106]
-						}
-					]
-				},
-				{
-					"boneId" : "thigh_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.020392,0.563978,0.024724,0.825167]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.015970,0.561701,0.023403,0.826855]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.005985,0.554514,0.020929,0.831890]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.007509,0.541744,0.018406,0.840308]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.021187,0.525680,0.016852,0.850252]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.032611,0.509467,0.016211,0.859719]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.045170,0.496537,0.015651,0.866698]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.062883,0.483002,0.015815,0.873215]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.082913,0.468033,0.017855,0.879632]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.103886,0.449655,0.022812,0.886847]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.121485,0.428516,0.030633,0.894806]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.134862,0.400603,0.036313,0.905545]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.147181,0.366261,0.038437,0.917994]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.158319,0.332032,0.039782,0.929036]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.169840,0.301857,0.043607,0.937089]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.183494,0.280805,0.053337,0.940550]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.201257,0.288668,0.069997,0.933417]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.221374,0.320053,0.090593,0.916707]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.238675,0.360562,0.111382,0.894776]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.248929,0.392538,0.129201,0.875931]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.251802,0.403376,0.144985,0.867677]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.247765,0.397240,0.160862,0.868871]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.241107,0.389566,0.178538,0.870764]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.233954,0.381298,0.194675,0.872914]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.227733,0.373212,0.207967,0.874986]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.224070,0.367267,0.217217,0.876199]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.205386,0.386173,0.221658,0.871524]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.165161,0.430101,0.218185,0.860309]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.111036,0.487144,0.204272,0.841804]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.059613,0.540268,0.182279,0.819348]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.024974,0.578436,0.157352,0.800017]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.013992,0.589405,0.139267,0.795620]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.015705,0.579540,0.129765,0.804393]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.023061,0.557315,0.122792,0.820847]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.029458,0.531794,0.113694,0.838690]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.026953,0.518936,0.100121,0.848501]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.012102,0.523035,0.079761,0.848485]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.002737,0.534020,0.058754,0.843423]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [-0.013429,0.547496,0.041194,0.835686]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.018950,0.559073,0.029249,0.828385]
-						}
-					]
-				},
-				{
-					"boneId" : "shin_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.008240,-0.438100,-0.010051,0.898832]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.008193,-0.449337,-0.010313,0.893265]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.008127,-0.470382,-0.010828,0.882359]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.008005,-0.492905,-0.011337,0.869973]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.007892,-0.509048,-0.011682,0.860623]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.007853,-0.515801,-0.011834,0.856591]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.007865,-0.513526,-0.011782,0.857957]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.007927,-0.504278,-0.011581,0.863427]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.008024,-0.488886,-0.011243,0.872238]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.008119,-0.468049,-0.010756,0.883600]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.008205,-0.446002,-0.010233,0.894936]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.008301,-0.426910,-0.009806,0.904203]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.008364,-0.411015,-0.009437,0.911541]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.008411,-0.398530,-0.009147,0.917071]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.008448,-0.388315,-0.008910,0.921445]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.008479,-0.379879,-0.008716,0.924956]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.008425,-0.395314,-0.009075,0.918463]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.008363,-0.434843,-0.010077,0.900411]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.008189,-0.483247,-0.011244,0.875374]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.007851,-0.523511,-0.012051,0.851898]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.007680,-0.546504,-0.012543,0.837327]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.007617,-0.559099,-0.012845,0.828966]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.007550,-0.570713,-0.013117,0.821010]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.007489,-0.576465,-0.013226,0.816981]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.007498,-0.575650,-0.013210,0.817555]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.007528,-0.570524,-0.013090,0.821142]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.007484,-0.596147,-0.013802,0.802722]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.011644,-0.648290,-0.019517,0.761054]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.004328,-0.702219,-0.005273,0.711929]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.006402,-0.740133,-0.017223,0.672210]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.006082,-0.751620,-0.017283,0.659342]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.006532,-0.738929,-0.017313,0.673529]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.005731,-0.710019,-0.004157,0.704147]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.014756,-0.671169,-0.023298,0.740791]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.007711,-0.615483,-0.014605,0.787977]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.007594,-0.567884,-0.013078,0.822970]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.007886,-0.531099,-0.012303,0.847184]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.008050,-0.497121,-0.011499,0.867568]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [0.008136,-0.467978,-0.010771,0.883637]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [0.008203,-0.446779,-0.010253,0.894548]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.046546,0.543546,0.033432,0.837421]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [0.044442,0.556687,0.030352,0.828977]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [3.849472,0.000000,-0.000000],
-							"rotation" : [0.039384,0.583847,0.023019,0.810581]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [3.849472,0.000000,-0.000001],
-							"rotation" : [0.032029,0.617043,0.012522,0.786177]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [3.849472,0.000000,-0.000001],
-							"rotation" : [0.024599,0.646417,0.001911,0.762586]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [3.849472,0.000000,-0.000001],
-							"rotation" : [0.018786,0.666602,-0.006501,0.745149]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [3.849472,0.000000,-0.000001],
-							"rotation" : [0.014269,0.675556,-0.012809,0.737059]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [3.849472,0.000000,-0.000001],
-							"rotation" : [0.010251,0.679069,-0.018619,0.733766]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [0.005788,0.678507,-0.025093,0.734142]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [-0.000367,0.676122,-0.033810,0.736013]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [-0.007704,0.674695,-0.044173,0.736733]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [-0.011797,0.666906,-0.049968,0.743371]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [-0.011720,0.649158,-0.049282,0.758965]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [3.849472,0.000000,-0.000001],
-							"rotation" : [-0.006730,0.627539,-0.042263,0.777408]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [-0.000038,0.608546,-0.033133,0.792826]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.004151,0.599716,-0.027192,0.799740]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.008111,0.606369,-0.021617,0.794848]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.014246,0.619953,-0.013124,0.784400]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [0.020333,0.636932,-0.004586,0.770638]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [3.849472,0.000000,-0.000000],
-							"rotation" : [0.023547,0.652806,0.000203,0.757159]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [3.849472,0.000000,-0.000000],
-							"rotation" : [0.023145,0.665394,-0.000318,0.746133]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.014694,0.656393,-0.012568,0.754171]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [-0.001088,0.618449,-0.036309,0.784985]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [-0.027052,0.567845,-0.072034,0.819531]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [3.849472,0.000000,-0.000000],
-							"rotation" : [-0.050931,0.517739,-0.104975,0.847545]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [3.849472,0.000000,-0.000000],
-							"rotation" : [-0.064144,0.490944,-0.123415,0.860016]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [3.849472,0.000000,-0.000000],
-							"rotation" : [-0.064042,0.490964,-0.123267,0.860034]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [3.849472,0.000000,-0.000000],
-							"rotation" : [-0.058674,0.489148,-0.115646,0.862507]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [-0.050255,0.478501,-0.103466,0.870521]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [-0.040561,0.457358,-0.089543,0.883833]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [-0.031147,0.427975,-0.076036,0.900048]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [-0.020948,0.437418,-0.061730,0.896892]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [-0.012405,0.494762,-0.050132,0.867493]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [-0.006612,0.561735,-0.042055,0.826221]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [-0.000833,0.608678,-0.034318,0.792674]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [0.005614,0.609647,-0.025150,0.792254]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [0.015513,0.584293,-0.010677,0.811324]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [0.026755,0.565570,0.005344,0.824249]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [0.036825,0.553110,0.019595,0.832063]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.043863,0.546016,0.029596,0.836102]
-						}
-					]
-				},
-				{
-					"boneId" : "toes_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.125011,0.250982,0.032829,0.959324]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.123270,0.251051,0.032364,0.959547]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.119198,0.251236,0.031275,0.960049]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.113414,0.251424,0.029729,0.960749]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.107086,0.251571,0.028046,0.961487]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.100837,0.251747,0.026410,0.962163]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.088843,0.252039,0.023265,0.963349]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.068830,0.252396,0.018015,0.965005]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.046398,0.252771,0.012141,0.966337]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.025527,0.253083,0.006677,0.967085]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.012756,0.253140,0.003335,0.967340]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.008725,0.266568,0.001760,0.963775]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.009585,0.297189,0.000316,0.954771]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.015521,0.332974,-0.000891,0.942808]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.025210,0.364273,-0.002391,0.930948]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.037051,0.380492,-0.004297,0.924032]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.047960,0.382557,-0.010103,0.922631]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.057778,0.383013,-0.019549,0.921727]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.066311,0.382718,-0.029900,0.920997]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.073139,0.382905,-0.037450,0.920126]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.079150,0.385060,-0.039443,0.918645]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.082845,0.414742,-0.030218,0.905656]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.081984,0.476145,-0.008979,0.875491]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.076269,0.543068,0.016984,0.836045]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.065593,0.596464,0.037437,0.799079]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.062882,0.619114,0.049741,0.781198]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.058988,0.619529,0.046810,0.781353]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.047837,0.619763,0.037958,0.782410]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.035951,0.620471,0.028551,0.782884]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.028588,0.620898,0.022716,0.783040]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.027434,0.620928,0.021807,0.783083]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.026156,0.585472,0.019198,0.810043]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.023078,0.501852,0.015112,0.864514]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.015113,0.395282,0.007211,0.918407]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.011370,0.296945,0.003417,0.954821]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.015427,0.254015,0.004027,0.967069]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.035759,0.252912,0.009414,0.966782]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.064917,0.252333,0.017043,0.965310]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [0.093984,0.251777,0.024659,0.962895]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [0.116182,0.251254,0.030508,0.960439]
-						}
-					]
-				},
-				{
-					"boneId" : "thigh_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.251856,0.403598,-0.145299,0.867505]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.248755,0.401334,-0.152217,0.868264]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.242090,0.395233,-0.167739,0.870084]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.234155,0.385482,-0.187573,0.872577]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.227647,0.374890,-0.205453,0.874885]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.224106,0.367362,-0.217073,0.876186]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.205579,0.385982,-0.221613,0.871575]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.164171,0.431156,-0.218054,0.860003]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.111602,0.486550,-0.204485,0.842022]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.058902,0.541045,-0.181765,0.819001]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.024289,0.579201,-0.156860,0.799582]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.014089,0.589301,-0.139438,0.795665]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.015807,0.579190,-0.129612,0.804667]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.023260,0.556752,-0.122661,0.821243]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.029478,0.531925,-0.113825,0.838588]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.026891,0.518679,-0.099834,0.848694]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.011718,0.521422,-0.081300,0.849336]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.004074,0.529196,-0.062785,0.846164]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.015884,0.540688,-0.046329,0.839797]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.020982,0.552790,-0.033898,0.832366]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.020408,0.563757,-0.024900,0.825313]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.014194,0.567588,-0.019098,0.822969]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.003644,0.561412,-0.015651,0.827381]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.008725,0.546956,-0.014681,0.836987]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.021507,0.527736,-0.015506,0.848994]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.032735,0.509319,-0.016194,0.859802]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.045300,0.496407,-0.015648,0.866766]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.062498,0.483268,-0.015802,0.873096]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.083126,0.467862,-0.017891,0.879701]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.103540,0.450084,-0.022666,0.886673]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.121122,0.428940,-0.030464,0.894657]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.134999,0.400318,-0.036373,0.905648]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.146956,0.366977,-0.038426,0.917744]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.158093,0.332697,-0.039738,0.928838]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.169973,0.301650,-0.043699,0.937127]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.183223,0.281215,-0.053141,0.940491]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.201004,0.287990,-0.072683,0.933475]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.220224,0.317973,-0.097860,0.916961]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [-0.236393,0.355983,-0.121323,0.895921]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.247287,0.389200,-0.138385,0.876483]
-						}
-					]
-				},
-				{
-					"boneId" : "shin_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.007673,-0.546964,0.012549,0.837027]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.007637,-0.553819,0.012711,0.832505]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.007592,-0.564855,0.012988,0.825053]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.007514,-0.573054,0.013150,0.819377]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.007504,-0.574568,0.013184,0.818316]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.007527,-0.570555,0.013090,0.821121]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.007489,-0.595888,0.013799,0.802914]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.011582,-0.649503,0.019492,0.760021]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.004240,-0.701719,0.005346,0.712421]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.006416,-0.740364,0.017244,0.671955]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.006054,-0.751852,0.017263,0.659078]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.006540,-0.739060,0.017326,0.673385]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.005558,-0.709262,0.004309,0.704910]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.014902,-0.670095,0.023412,0.741756]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.007692,-0.615952,0.014600,0.787611]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.007550,-0.566901,0.013006,0.823649]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.007926,-0.528278,0.012261,0.848946]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.008136,-0.487956,0.011325,0.872757]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.008208,-0.453144,0.010431,0.891339]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.008257,-0.434242,0.009963,0.900703]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.008240,-0.438023,0.010050,0.898870]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.008159,-0.459774,0.010567,0.887935]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.008062,-0.482981,0.011116,0.875523]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.007948,-0.500968,0.011508,0.865353]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.007874,-0.511985,0.011747,0.858878]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.007852,-0.515899,0.011836,0.856532]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.007866,-0.513500,0.011782,0.857972]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.007926,-0.504510,0.011587,0.863292]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.008025,-0.488688,0.011239,0.872349]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.008116,-0.468492,0.010765,0.883365]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.008205,-0.446450,0.010246,0.894712]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.008302,-0.426717,0.009801,0.904294]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.008363,-0.411300,0.009444,0.911413]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.008410,-0.398748,0.009152,0.916976]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.008449,-0.388232,0.008908,0.921480]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.008479,-0.380045,0.008719,0.924888]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.008415,-0.398401,0.009148,0.917127]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.008357,-0.442259,0.010272,0.896789]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [-0.008158,-0.491263,0.011438,0.870898]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.007791,-0.530669,0.012197,0.847455]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [-0.023126,0.665644,0.000343,0.745911]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [-0.017091,0.650062,0.009229,0.759633]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [-0.002502,0.611474,0.031242,0.790644]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.024539,0.561225,0.068643,0.824446]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.050120,0.515387,0.103831,0.849167]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [0.063985,0.491167,0.123197,0.859932]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.064044,0.490961,0.123270,0.860035]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [0.058526,0.489098,0.115436,0.862573]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [0.050351,0.478691,0.103606,0.870394]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [0.040402,0.456765,0.089301,0.884171]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [0.030925,0.427384,0.075732,0.900362]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [0.021043,0.437311,0.061867,0.896933]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [0.012239,0.496230,0.049908,0.866669]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [0.006531,0.562963,0.041944,0.825391]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [0.000899,0.608672,0.034413,0.792675]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [-0.005741,0.609673,0.024967,0.792239]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [-0.015454,0.582983,0.010726,0.812266]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [-0.026847,0.561196,-0.005539,0.827229]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [-0.037377,0.546253,-0.020424,0.836537]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [3.849470,0.000000,-0.000000],
-							"rotation" : [-0.044164,0.540281,-0.030052,0.839787]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [3.849470,0.000000,-0.000000],
-							"rotation" : [-0.046500,0.543481,-0.033365,0.837468]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [3.849470,0.000000,-0.000000],
-							"rotation" : [-0.044274,0.560637,-0.030082,0.826330]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [3.849470,0.000000,-0.000001],
-							"rotation" : [-0.039038,0.588872,-0.022502,0.806969]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [3.849470,0.000000,-0.000001],
-							"rotation" : [-0.031964,0.619507,-0.012424,0.784241]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [3.849470,0.000000,-0.000001],
-							"rotation" : [-0.024664,0.647185,-0.001990,0.761931]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [3.849470,0.000000,-0.000001],
-							"rotation" : [-0.018740,0.666817,0.006575,0.744957]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [3.849470,0.000000,-0.000001],
-							"rotation" : [-0.014233,0.675647,0.012861,0.736976]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [3.849470,0.000000,-0.000001],
-							"rotation" : [-0.010332,0.679037,0.018502,0.733798]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [3.849470,0.000000,-0.000001],
-							"rotation" : [-0.005734,0.678479,0.025170,0.734166]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [3.849470,0.000000,-0.000001],
-							"rotation" : [0.000232,0.676171,0.033613,0.735977]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [0.007547,0.674702,0.043954,0.736741]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [0.011837,0.666825,0.050025,0.743440]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [0.011803,0.649583,0.049395,0.758593]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.006838,0.627987,0.042425,0.777036]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [0.000002,0.608459,0.033079,0.792896]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [-0.004060,0.599887,0.027319,0.799608]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [-0.007758,0.609056,0.022133,0.792780]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [-0.013104,0.626575,0.014780,0.779110]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [-0.018271,0.645176,0.007540,0.763779]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [-0.021622,0.659779,0.002517,0.751145]
-						}
-					]
-				},
-				{
-					"boneId" : "toes_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.079271,0.385104,0.039484,0.918614]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.079712,0.413065,0.031487,0.906660]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.079224,0.472744,0.010647,0.877567]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.074990,0.542512,-0.016872,0.836524]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.065441,0.596263,-0.037561,0.799235]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.062930,0.618883,-0.049641,0.781383]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.059026,0.619526,-0.046840,0.781351]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.047560,0.619780,-0.037739,0.782423]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.036046,0.620469,-0.028625,0.782879]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.028564,0.620898,-0.022697,0.783042]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.027411,0.620928,-0.021789,0.783085]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.026197,0.585838,-0.019252,0.809776]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.022909,0.499763,-0.014925,0.865731]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.015026,0.393066,-0.007144,0.919360]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.011329,0.297376,-0.003413,0.954687]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.015510,0.253143,-0.004043,0.967296]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.035638,0.252900,-0.009383,0.966790]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.064696,0.252336,-0.016987,0.965325]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.094495,0.251772,-0.024795,0.962843]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.115949,0.251264,-0.030448,0.960466]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.124831,0.250987,-0.032781,0.959348]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.123571,0.251088,-0.032438,0.959496]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.119420,0.251248,-0.031331,0.960016]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.113694,0.251407,-0.029804,0.960719]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.107242,0.251563,-0.028088,0.961471]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.100773,0.251750,-0.026393,0.962169]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.088720,0.252043,-0.023233,0.963360]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.069278,0.252386,-0.018133,0.964973]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.046168,0.252773,-0.012080,0.966348]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.025784,0.253084,-0.006744,0.967077]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.013014,0.253138,-0.003402,0.967337]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.008685,0.266706,-0.001745,0.963737]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.009534,0.296474,-0.000345,0.954993]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.015333,0.332243,0.000868,0.943069]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.025327,0.364433,0.002407,0.930882]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.036822,0.380174,0.004255,0.924172]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.048960,0.383256,0.009793,0.922292]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.060693,0.384939,0.018531,0.920758]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [-0.070495,0.385518,0.028019,0.919577]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.077081,0.385323,0.035975,0.918853]
-						}
-					]
-				},
-				{
-					"boneId" : "torso_ctrl",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1300.000122
-						}
-					]
-				},
-				{
-					"boneId" : "ball_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.092315,-0.435747,0.029707,0.894829]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.082506,-0.462682,0.026518,0.882278]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.060125,-0.520433,0.018891,0.851573]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.031565,-0.587915,0.008992,0.808257]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.009863,-0.640834,0.002828,0.767611]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.000154,-0.663344,0.000014,0.748314]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.000000,-0.663799,-0.000000,0.747911]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.000000,-0.663799,-0.000000,0.747911]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.000000,-0.630116,-0.000000,0.776501]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.000000,-0.547168,-0.000000,0.837023]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.000000,-0.443455,-0.000000,0.896296]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.000000,-0.349767,-0.000000,0.936837]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.000000,-0.306326,-0.000000,0.951927]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.000000,-0.306326,-0.000000,0.951927]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.000954,-0.319631,0.000311,0.947541]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.003936,-0.348895,0.001332,0.937153]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.009081,-0.383926,0.003059,0.923314]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.016302,-0.415308,0.005300,0.909519]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.024852,-0.430639,0.008003,0.902147]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.038442,-0.433544,0.012383,0.900227]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.055823,-0.435058,0.017971,0.898491]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [-0.073088,-0.435779,0.023514,0.896773]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.086701,-0.435883,0.027899,0.895383]
-						}
-					]
-				},
-				{
-					"boneId" : "knee_pole_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [4.600000,-3.856558,4.352602]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [4.600000,-3.856558,4.352602]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [4.600000,-3.719738,4.352602]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [4.600000,-3.395794,4.352602]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [4.600000,-2.981431,4.352602]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [4.600000,-2.551225,4.352602]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [4.600000,-2.234513,4.352602]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [4.603385,-2.069518,4.355639]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [4.611095,-1.963440,4.371637]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [4.620041,-1.893458,4.407780]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [4.627704,-1.824708,4.468103]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [4.631227,-1.719160,4.556541]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [4.627808,-1.536460,4.707675]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [4.620313,-1.312112,4.911068]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [4.611095,-1.088833,5.123227]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [4.603489,-0.925885,5.283072]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [4.600069,-0.857930,5.351225]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [4.600000,-0.877890,5.352602]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [4.600000,-0.935469,5.352602]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [4.600000,-1.020144,5.352602]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [4.600000,-1.122390,5.352602]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [4.600000,-1.230256,5.352602]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [4.600000,-1.331126,5.352602]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [4.600000,-1.439419,5.352602]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [4.600000,-1.563761,5.352602]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [4.600000,-1.699737,5.352602]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [4.600000,-1.851945,5.352602]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [4.600000,-2.031115,5.352602]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [4.600000,-2.224495,5.352602]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [4.600000,-2.430251,5.352602]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [4.600000,-2.647081,5.352602]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [4.600000,-2.852409,5.352602]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [4.600000,-3.095526,5.242166]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [4.600000,-3.358515,5.003389]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [4.600000,-3.600255,4.718811]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [4.600000,-3.781986,4.467128]
-						}
-					]
-				},
-				{
-					"boneId" : "body_ctrl",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [8.146656,-0.051114,0.400000],
-							"rotation" : [0.057158,0.497781,-0.053128,0.863785]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [8.126111,-0.073051,0.404205],
-							"rotation" : [0.058045,0.497679,-0.054668,0.863689]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [8.081140,-0.121063,0.416221],
-							"rotation" : [0.059990,0.497448,-0.058044,0.863468]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [8.025848,-0.180080,0.436653],
-							"rotation" : [0.062380,0.497154,-0.062193,0.863179]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [7.980220,-0.228770,0.462947],
-							"rotation" : [0.064352,0.496903,-0.065616,0.862926]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [7.959686,-0.250672,0.493083],
-							"rotation" : [0.065238,0.496787,-0.067155,0.862808]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [7.996313,-0.251114,0.525555],
-							"rotation" : [0.062664,0.497060,-0.062524,0.863189]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [8.088681,-0.251114,0.563447],
-							"rotation" : [0.056231,0.497719,-0.051070,0.864005]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [8.211952,-0.251114,0.606137],
-							"rotation" : [0.047739,0.498531,-0.036150,0.864801]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [8.347313,-0.251114,0.656779],
-							"rotation" : [0.038579,0.499357,-0.020376,0.865297]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [8.457847,-0.251114,0.711751],
-							"rotation" : [0.031366,0.500067,-0.008429,0.865377]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [8.554739,-0.207692,0.788585],
-							"rotation" : [0.027098,0.504640,-0.001371,0.862903]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [8.658653,-0.108929,0.886151],
-							"rotation" : [0.023972,0.514138,0.003898,0.857363]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [8.746759,0.005625,0.977694],
-							"rotation" : [0.021003,0.524867,0.008122,0.850886]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [8.808858,0.103731,1.047174],
-							"rotation" : [0.017063,0.533912,0.012624,0.845274]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [8.833732,0.148886,1.076661],
-							"rotation" : [0.010937,0.538016,0.018887,0.842652]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [8.775431,0.138168,1.002556],
-							"rotation" : [-0.000181,0.533798,0.026324,0.845202]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [8.640079,0.114699,0.840331],
-							"rotation" : [-0.015479,0.524411,0.033697,0.850657]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [8.457670,0.085845,0.640724],
-							"rotation" : [-0.032601,0.512650,0.040797,0.857008]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [8.280511,0.062038,0.475837],
-							"rotation" : [-0.047349,0.502688,0.047119,0.861883]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [8.149306,0.051332,0.401501],
-							"rotation" : [-0.056963,0.497879,0.053010,0.863748]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [8.072111,0.072577,0.404134],
-							"rotation" : [-0.061568,0.497372,0.058178,0.863392]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [8.014250,0.121593,0.416399],
-							"rotation" : [-0.064333,0.497053,0.062404,0.863079]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [7.979477,0.178885,0.436175],
-							"rotation" : [-0.065425,0.496871,0.065204,0.862895]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [7.963065,0.228318,0.462352],
-							"rotation" : [-0.065479,0.496796,0.066731,0.862817]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [7.959308,0.250894,0.493388],
-							"rotation" : [-0.065258,0.496785,0.067182,0.862805]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [7.996695,0.251116,0.525884],
-							"rotation" : [-0.062637,0.497063,0.062476,0.863193]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [8.086473,0.251116,0.562671],
-							"rotation" : [-0.056384,0.497705,0.051343,0.863988]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [8.213347,0.251116,0.606615],
-							"rotation" : [-0.047644,0.498540,0.035984,0.864808]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [8.345080,0.251116,0.655668],
-							"rotation" : [-0.038725,0.499341,0.020617,0.865294]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [8.455613,0.251116,0.710641],
-							"rotation" : [-0.031512,0.500054,0.008671,0.865377]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [8.555717,0.207250,0.789363],
-							"rotation" : [-0.027055,0.504687,0.001301,0.862878]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [8.656587,0.111245,0.884109],
-							"rotation" : [-0.024026,0.513919,-0.003810,0.857494]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [8.745273,-0.003310,0.976041],
-							"rotation" : [-0.021069,0.524653,-0.008040,0.851018]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [8.809102,-0.104172,1.047463],
-							"rotation" : [-0.017003,0.533952,-0.012685,0.845249]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [8.833244,-0.147999,1.076082],
-							"rotation" : [-0.011058,0.537937,-0.018764,0.842704]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [8.758070,-0.138060,1.002134],
-							"rotation" : [0.001406,0.533712,-0.027515,0.845218]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [8.593099,-0.114418,0.839629],
-							"rotation" : [0.018685,0.524140,-0.036807,0.850631]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [8.396803,-0.086414,0.646293],
-							"rotation" : [0.036591,0.512596,-0.044982,0.856670]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [8.224041,-0.061932,0.476171],
-							"rotation" : [0.051097,0.502352,-0.050830,0.861654]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.165545,1.865067,1.605976],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [0.165545,1.865067,1.476097],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [0.165545,1.865067,1.190781],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [0.165545,1.865067,0.812465],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [0.165545,1.865067,0.444848],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [0.165545,1.865067,0.162055],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [0.165545,1.789700,0.008456],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [0.165545,1.618241,-0.092973],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [0.165545,1.417963,-0.165064],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [0.165545,1.242766,-0.244787],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [0.165545,1.165844,-0.359703],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [0.165545,1.165067,-0.530276],
-							"rotation" : [-0.072306,0.703400,-0.072306,0.703400]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [0.165545,1.165067,-0.734030],
-							"rotation" : [-0.082497,0.702278,-0.082496,0.702278]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [0.165545,1.165067,-0.946258],
-							"rotation" : [-0.096836,0.700445,-0.096836,0.700445]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [0.165545,1.165067,-1.158613],
-							"rotation" : [-0.113294,0.697972,-0.113294,0.697972]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [0.165545,1.165067,-1.360863],
-							"rotation" : [-0.129485,0.695150,-0.129485,0.695150]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [0.165545,1.138823,-1.530794],
-							"rotation" : [-0.147435,0.691566,-0.147435,0.691565]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [0.165545,1.081337,-1.689107],
-							"rotation" : [-0.168656,0.686699,-0.168656,0.686699]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [0.165545,1.010655,-1.848322],
-							"rotation" : [-0.189261,0.681308,-0.189261,0.681308]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [0.165545,0.952332,-2.007333],
-							"rotation" : [-0.204005,0.677039,-0.204005,0.677039]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [0.165545,0.926106,-2.179176],
-							"rotation" : [-0.210027,0.675195,-0.210027,0.675195]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [0.165545,0.938858,-2.408689],
-							"rotation" : [-0.210148,0.675158,-0.210148,0.675157]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [0.165545,0.978137,-2.684775],
-							"rotation" : [-0.210148,0.675158,-0.210148,0.675157]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [0.165545,1.041431,-2.937188],
-							"rotation" : [-0.210148,0.675158,-0.210148,0.675157]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [0.165545,1.125214,-3.126114],
-							"rotation" : [-0.210148,0.675158,-0.210148,0.675157]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [0.165545,1.224602,-3.205434],
-							"rotation" : [-0.210148,0.675158,-0.210148,0.675157]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [0.352809,1.364726,-3.077501],
-							"rotation" : [-0.198201,0.670910,-0.200654,0.685809]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [0.755577,1.544595,-2.771003],
-							"rotation" : [-0.170419,0.659746,-0.178874,0.709716]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [1.250931,1.728816,-2.319531],
-							"rotation" : [-0.132199,0.645446,-0.149350,0.737305]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [1.661292,1.866318,-1.819004],
-							"rotation" : [-0.094664,0.635370,-0.121112,0.756753]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [1.846395,1.923834,-1.346681],
-							"rotation" : [-0.068154,0.631004,-0.102808,0.765911]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [1.812681,1.925576,-0.884999],
-							"rotation" : [-0.051864,0.632010,-0.094955,0.767370]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [1.712809,1.925576,-0.405597],
-							"rotation" : [-0.039386,0.633241,-0.091618,0.767503]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [1.565471,1.925576,0.068298],
-							"rotation" : [-0.030601,0.634876,-0.091228,0.766599]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [1.383524,1.925576,0.512760],
-							"rotation" : [-0.025599,0.637268,-0.092481,0.764645]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [1.204979,1.925576,0.866829],
-							"rotation" : [-0.024106,0.640563,-0.093403,0.761823]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [0.978656,1.918882,1.140810],
-							"rotation" : [-0.029127,0.650455,-0.090818,0.753533]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [0.710946,1.904252,1.349126],
-							"rotation" : [-0.040588,0.666606,-0.085531,0.739374]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [0.452284,1.886918,1.495001],
-							"rotation" : [-0.053163,0.683652,-0.078227,0.723654]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [0.250520,1.871762,1.579155],
-							"rotation" : [-0.063589,0.697827,-0.071264,0.709870]
-						}
-					]
-				},
-				{
-					"boneId" : "ball_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.000000,-0.306326,0.000000,0.951927]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.000000,-0.306326,0.000000,0.951927]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.000944,-0.319497,-0.000308,0.947587]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.004008,-0.349598,-0.001354,0.936890]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.009218,-0.384640,-0.003105,0.923016]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.016213,-0.415153,-0.005270,0.909592]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.025019,-0.430949,-0.008051,0.901994]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.038286,-0.432850,-0.012329,0.900568]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.055544,-0.433231,-0.017866,0.899392]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.073279,-0.433176,-0.023573,0.898016]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.086529,-0.433662,-0.027849,0.896479]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.092201,-0.435706,-0.029670,0.894863]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.082824,-0.464254,-0.026625,0.881419]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.059964,-0.523660,-0.018849,0.849605]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.032162,-0.588394,-0.009198,0.807882]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.010113,-0.641026,-0.002936,0.767447]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.000077,-0.663578,-0.000007,0.748107]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.000000,-0.663799,0.000000,0.747911]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.000000,-0.663799,0.000000,0.747911]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.000000,-0.629765,0.000000,0.776785]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.000000,-0.549188,0.000000,0.835699]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.000000,-0.445618,0.000000,0.895223]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.000000,-0.349345,0.000000,0.936994]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.000000,-0.307185,0.000000,0.951650]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.000000,-0.306326,0.000000,0.951927]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [0.000000,-0.306326,0.000000,0.951927]
-						}
-					]
-				},
-				{
-					"boneId" : "ankle_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1300.000122
-						}
-					]
-				},
-				{
-					"boneId" : "toe_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1300.000122
-						}
-					]
-				},
-				{
-					"boneId" : "sword_casing",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1300.000122
-						}
-					]
-				},
-				{
-					"boneId" : "arm_pole_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [2.399996,-4.299984,-0.099997]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [2.399996,-4.299984,-0.099997]
-						}
-					]
-				},
-				{
-					"boneId" : "arm_pole_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1300.000122
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [-3.152660,-2.434659,-1.849997],
-							"rotation" : [-0.058679,0.706029,-0.702803,-0.064403]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [-3.152660,-2.434659,-1.849997],
-							"rotation" : [-0.057525,0.705933,-0.703060,-0.063692]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [-3.152660,-2.434659,-1.849997],
-							"rotation" : [-0.054997,0.705718,-0.703618,-0.062132]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [-3.152660,-2.434659,-1.849997],
-							"rotation" : [-0.051886,0.705443,-0.704295,-0.060215]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [-3.152660,-2.434659,-1.849996],
-							"rotation" : [-0.049318,0.705209,-0.704848,-0.058632]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [-3.152660,-2.434659,-1.849996],
-							"rotation" : [-0.048163,0.705101,-0.705094,-0.057920]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [-3.154315,-2.433846,-1.841112],
-							"rotation" : [-0.054486,0.704662,-0.704658,-0.062771]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [-3.160241,-2.431371,-1.814202],
-							"rotation" : [-0.070016,0.703385,-0.703352,-0.075119]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [-3.171286,-2.427296,-1.769963],
-							"rotation" : [-0.090115,0.701242,-0.701209,-0.091899]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [-3.188348,-2.421608,-1.708247],
-							"rotation" : [0.111179,-0.698341,0.698344,0.110791]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [-3.209601,-2.415164,-1.638295],
-							"rotation" : [-0.126941,0.695620,-0.695619,-0.126938]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [-3.244008,-2.405633,-1.534701],
-							"rotation" : [0.136824,-0.692733,0.693875,0.141200]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [-3.291140,-2.392892,-1.396398],
-							"rotation" : [0.144795,-0.689261,0.692446,0.156438]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [-3.337083,-2.380616,-1.263207],
-							"rotation" : [0.150826,-0.686295,0.690764,0.170576]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [-3.372827,-2.371137,-1.160336],
-							"rotation" : [0.155819,-0.684451,0.688275,0.183096]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [-3.388255,-2.367069,-1.116053],
-							"rotation" : [-0.160790,0.684376,-0.684375,-0.193409]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [-3.388255,-2.368981,-1.116307],
-							"rotation" : [-0.166234,0.686317,-0.678478,-0.202491]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [-3.388255,-2.374136,-1.116916],
-							"rotation" : [-0.171515,0.689121,-0.671490,-0.211653]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [-3.388255,-2.382425,-1.117772],
-							"rotation" : [-0.175997,0.692098,-0.664642,-0.219720]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [-3.388255,-2.392516,-1.118657],
-							"rotation" : [-0.178881,0.694361,-0.659703,-0.225069]
-						},
-						{
-							"keytime" : 666.666626,
-							"translation" : [-3.388255,-2.403362,-1.119405],
-							"rotation" : [-0.179964,0.695334,-0.657679,-0.227117]
-						},
-						{
-							"keytime" : 699.999939,
-							"translation" : [-3.388255,-2.417916,-1.119817],
-							"rotation" : [-0.179585,0.695031,-0.658387,-0.226292]
-						},
-						{
-							"keytime" : 733.333252,
-							"translation" : [-3.388255,-2.436816,-1.120077],
-							"rotation" : [-0.178236,0.694394,-0.660237,-0.223911]
-						},
-						{
-							"keytime" : 766.666565,
-							"translation" : [-3.388255,-2.454848,-1.120389],
-							"rotation" : [-0.175820,0.693838,-0.662660,-0.220356]
-						},
-						{
-							"keytime" : 799.999878,
-							"translation" : [-3.388255,-2.468721,-1.120952],
-							"rotation" : [-0.172332,0.693667,-0.665186,-0.216000]
-						},
-						{
-							"keytime" : 833.333191,
-							"translation" : [-3.388255,-2.474589,-1.121994],
-							"rotation" : [-0.167812,0.694237,-0.667250,-0.211310]
-						},
-						{
-							"keytime" : 866.666504,
-							"translation" : [-3.408111,-2.474601,-1.155627],
-							"rotation" : [-0.158722,0.699325,-0.666371,-0.204211]
-						},
-						{
-							"keytime" : 899.999817,
-							"translation" : [-3.451729,-2.474292,-1.238862],
-							"rotation" : [-0.143823,0.709583,-0.662128,-0.193373]
-						},
-						{
-							"keytime" : 933.333130,
-							"translation" : [-3.505767,-2.473490,-1.364577],
-							"rotation" : [-0.125307,0.722750,-0.655453,-0.179752]
-						},
-						{
-							"keytime" : 966.666443,
-							"translation" : [-3.550686,-2.472120,-1.507852],
-							"rotation" : [-0.107496,0.735131,-0.648433,-0.166017]
-						},
-						{
-							"keytime" : 999.999756,
-							"translation" : [-3.570737,-2.470123,-1.648787],
-							"rotation" : [-0.093407,0.744173,-0.643196,-0.154207]
-						},
-						{
-							"keytime" : 1033.333130,
-							"translation" : [-3.567806,-2.459874,-1.821115],
-							"rotation" : [-0.083304,0.750957,-0.638938,-0.144506]
-						},
-						{
-							"keytime" : 1066.666504,
-							"translation" : [-3.556298,-2.440527,-2.022833],
-							"rotation" : [-0.075398,0.756938,-0.634742,-0.135875]
-						},
-						{
-							"keytime" : 1099.999878,
-							"translation" : [-3.535421,-2.418286,-2.215909],
-							"rotation" : [-0.069230,0.761113,-0.632117,-0.127835]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [-3.503995,-2.399086,-2.364420],
-							"rotation" : [-0.064385,0.762465,-0.632538,-0.119990]
-						},
-						{
-							"keytime" : 1166.666626,
-							"translation" : [-3.465699,-2.390848,-2.423717],
-							"rotation" : [-0.060520,0.760235,-0.636963,-0.112506]
-						},
-						{
-							"keytime" : 1200.000000,
-							"translation" : [-3.403478,-2.395546,-2.361537],
-							"rotation" : [-0.057909,0.751619,-0.649063,-0.102140]
-						},
-						{
-							"keytime" : 1233.333374,
-							"translation" : [-3.323102,-2.406180,-2.223220],
-							"rotation" : [-0.057141,0.738251,-0.666096,-0.089645]
-						},
-						{
-							"keytime" : 1266.666748,
-							"translation" : [-3.242741,-2.418778,-2.058828],
-							"rotation" : [-0.057408,0.723638,-0.683400,-0.077566]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [-3.179098,-2.429794,-1.914414],
-							"rotation" : [-0.058170,0.711331,-0.697116,-0.068212]
-						}
-					]
-				},
-				{
-					"boneId" : "thumb_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.153559,0.166642,-0.243344],
-							"rotation" : [-0.081221,0.785392,-0.383246,0.479255],
-							"scale" : [0.800000,0.800000,0.800000]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [0.153559,0.166642,-0.243344],
-							"rotation" : [-0.081221,0.785392,-0.383246,0.479255],
-							"scale" : [0.800000,0.800000,0.800000]
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ik_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.500006,-0.499994,0.500006,0.499994]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.499981,-0.500019,0.499981,0.500019]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.500103,-0.499897,0.500103,0.499897]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.500099,-0.499901,0.500099,0.499901]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.499949,-0.500051,0.499949,0.500051]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.499930,-0.500070,0.499930,0.500070]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.499947,-0.500053,0.499947,0.500053]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.499863,-0.500137,0.499863,0.500137]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.499902,-0.500098,0.499902,0.500098]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.500024,-0.499976,0.500024,0.499976]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.499866,-0.500134,0.499866,0.500134]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.499995,-0.500005,0.499995,0.500005]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.500014,-0.499986,0.500014,0.499986]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.500005,-0.499995,0.500005,0.499995]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.500010,-0.499990,0.500010,0.499990]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.500020,-0.499980,0.500020,0.499980]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.500002,-0.499998,0.500002,0.499998]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.499925,-0.500075,0.499925,0.500075]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.500036,-0.499964,0.500036,0.499964]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.500243,-0.499757,0.500243,0.499757]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.500091,-0.499909,0.500091,0.499909]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.500055,-0.499945,0.500055,0.499945]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.499994,-0.500006,0.499994,0.500006]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.499842,-0.500158,0.499842,0.500158]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.499699,-0.500301,0.499699,0.500301]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.499904,-0.500096,0.499904,0.500096]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.500019,-0.499981,0.500019,0.499981]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.499999,-0.500001,0.499999,0.500001]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.500004,-0.499996,0.500004,0.499996]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.500046,-0.499954,0.500046,0.499954]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.499938,-0.500062,0.499938,0.500062]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.499724,-0.500276,0.499724,0.500276]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.499812,-0.500188,0.499812,0.500188]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.499951,-0.500049,0.499951,0.500049]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.499987,-0.500013,0.499987,0.500013]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.499889,-0.500111,0.499889,0.500111]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.499849,-0.500151,0.499849,0.500151]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.499911,-0.500089,0.499911,0.500089]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [0.500036,-0.499964,0.500036,0.499964]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [0.500126,-0.499874,0.500126,0.499874]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.055614,0.731206,0.060052,0.677229],
-							"scale" : [0.720000,0.720000,0.720000]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.055614,0.731206,0.060052,0.677229],
-							"scale" : [0.720000,0.720000,0.720000]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ik_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1300.000122
-						}
-					]
-				},
-				{
-					"boneId" : "shield",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1300.000122
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [-4.167537,2.816641,-1.933273],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [-4.167537,2.816641,-1.933273],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						}
-					]
-				},
-				{
-					"boneId" : "thumb_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.047806,0.118592,0.201995,0.971004]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.047806,0.118592,0.201995,0.971004]
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ik_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.498171,-0.501822,-0.498171,0.501822]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.498147,-0.501846,-0.498147,0.501846]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.498098,-0.501895,-0.498098,0.501895]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.498522,-0.501474,-0.498522,0.501474]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.499098,-0.500900,-0.499098,0.500900]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.498659,-0.501338,-0.498659,0.501338]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.499745,-0.500254,-0.499745,0.500254]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.499574,-0.500426,-0.499574,0.500426]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.499626,-0.500374,-0.499626,0.500374]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.500245,0.499755,0.500245,-0.499755]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.500230,0.499770,0.500230,-0.499770]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.499600,-0.500400,-0.499600,0.500400]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.500036,0.499964,0.500036,-0.499964]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.499770,-0.500229,-0.499770,0.500229]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.498516,-0.501480,-0.498516,0.501480]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.497577,-0.502411,-0.497577,0.502411]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.499161,-0.500838,-0.499161,0.500838]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.499111,-0.500888,-0.499111,0.500888]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.499054,-0.500944,-0.499054,0.500944]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.499647,-0.500353,-0.499647,0.500353]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.500391,0.499609,0.500391,-0.499609]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.499963,-0.500037,-0.499963,0.500037]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.499849,-0.500151,-0.499849,0.500151]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.500205,0.499795,0.500205,-0.499795]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.500656,0.499343,0.500656,-0.499343]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.500176,0.499824,0.500176,-0.499824]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.499520,-0.500480,-0.499520,0.500480]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.498767,-0.501230,-0.498767,0.501230]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.499396,-0.500604,-0.499396,0.500604]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.500955,0.499043,0.500955,-0.499043]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.500669,0.499330,0.500669,-0.499330]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.500288,0.499712,0.500288,-0.499712]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.500886,0.499113,0.500886,-0.499113]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.501013,0.498985,0.501013,-0.498985]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.500328,0.499671,0.500328,-0.499671]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.500026,0.499974,0.500026,-0.499974]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.498229,-0.501764,-0.498229,0.501764]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.498417,-0.501578,-0.498417,0.501578]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [-0.499310,-0.500689,-0.499310,0.500689]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.499666,-0.500334,-0.499666,0.500334]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1300.000122
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ik_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1300.000122
-						}
-					]
-				},
-				{
-					"boneId" : "sword",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 1300.000122
-						}
-					]
-				},
-				{
-					"boneId" : "upper_arm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.420667,-0.125891,0.802834,-0.403297]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.420667,-0.125891,0.802834,-0.403297]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.419906,-0.125627,0.803201,-0.403441]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.417470,-0.124843,0.804433,-0.403758]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.413239,-0.123569,0.806643,-0.404094]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.407009,-0.121812,0.809967,-0.404300]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.399526,-0.119838,0.814027,-0.404201]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.387603,-0.116787,0.820548,-0.403516]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.370763,-0.112455,0.829575,-0.402112]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.353771,-0.108164,0.838425,-0.400239]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.340116,-0.104728,0.845335,-0.398450]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.334073,-0.103154,0.848327,-0.397613]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.334014,-0.103137,0.848262,-0.397805]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.333849,-0.103086,0.848090,-0.398323]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.333569,-0.103000,0.847818,-0.399158]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.333210,-0.102890,0.847493,-0.400176]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.332802,-0.102765,0.847150,-0.401272]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.332188,-0.102576,0.846712,-0.402751]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.331339,-0.102331,0.846175,-0.404635]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.330539,-0.102101,0.845657,-0.406428]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.329967,-0.101937,0.845237,-0.407805]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.329809,-0.101900,0.845037,-0.408357]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.331360,-0.103445,0.845985,-0.404733]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.335200,-0.107320,0.848014,-0.396226]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.341306,-0.113158,0.850210,-0.384512]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.348955,-0.119692,0.851395,-0.372868]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.357775,-0.125925,0.850681,-0.363980]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.370145,-0.133448,0.847914,-0.355283]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.383751,-0.142550,0.844819,-0.344521]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.396582,-0.151224,0.841401,-0.334512]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.407259,-0.157648,0.837612,-0.328166]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.414487,-0.159499,0.833407,-0.328928]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.420153,-0.154450,0.826333,-0.341746]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.423404,-0.145794,0.818011,-0.361013]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [-0.424003,-0.136581,0.810252,-0.380866]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.422318,-0.129028,0.804741,-0.396725]
-						}
-					]
-				},
-				{
-					"boneId" : "lower_arm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.071812,-0.318112,-0.568924,0.754965]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.071812,-0.318112,-0.568925,0.754965]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.071753,-0.318468,-0.569561,0.754340]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.071591,-0.319438,-0.571298,0.752630]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.071353,-0.320855,-0.573834,0.750117]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.071058,-0.322584,-0.576925,0.747026]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.070774,-0.324231,-0.579868,0.744055]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.070465,-0.326025,-0.583079,0.740784]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.070161,-0.327767,-0.586195,0.737578]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.069954,-0.328929,-0.588271,0.735424]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.069860,-0.329458,-0.589216,0.734440]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.069843,-0.329551,-0.589382,0.734266]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.069850,-0.329512,-0.589313,0.734339]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.069868,-0.329409,-0.589129,0.734531]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.069897,-0.329247,-0.588838,0.734834]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.069932,-0.329052,-0.588489,0.735197]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.069968,-0.328846,-0.588122,0.735580]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.070014,-0.328584,-0.587652,0.736068]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.070079,-0.328218,-0.586998,0.736746]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [0.070141,-0.327867,-0.586370,0.737397]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.070189,-0.327594,-0.585882,0.737901]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.070214,-0.327449,-0.585622,0.738169]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.070768,-0.324303,-0.580009,0.743914]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [0.072125,-0.316658,-0.566468,0.757390]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.073939,-0.305654,-0.546860,0.775921]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [0.075617,-0.294077,-0.526018,0.794421]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.076964,-0.284368,-0.508587,0.809043]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.078354,-0.274419,-0.490861,0.823171]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.080017,-0.262079,-0.468912,0.839663]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.081386,-0.250163,-0.447508,0.854711]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.082240,-0.241920,-0.432659,0.864591]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.082257,-0.241759,-0.432371,0.864779]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.080784,-0.255383,-0.456860,0.848253]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [0.078534,-0.275729,-0.493743,0.820990]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [0.075511,-0.296229,-0.530250,0.790811]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [0.072848,-0.311919,-0.557889,0.765611]
-						}
-					]
-				},
-				{
-					"boneId" : "palm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.201628,0.008518,-0.095477,0.974760]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.201638,0.008791,-0.095687,0.974735]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.201663,0.009391,-0.096147,0.974679]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.201695,0.010128,-0.096713,0.974609]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.201721,0.010736,-0.097182,0.974551]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.201733,0.011010,-0.097393,0.974524]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.201493,0.009915,-0.096000,0.974724]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.200964,0.007027,-0.092609,0.975186]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.200368,0.002958,-0.088258,0.975733]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.199885,-0.001818,-0.083769,0.976230]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.199754,-0.006128,-0.080550,0.976510]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.200088,-0.010776,-0.078273,0.976587]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.200801,-0.016497,-0.076208,0.976524]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.201804,-0.021811,-0.075188,0.976292]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.202959,-0.025859,-0.075466,0.975932]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.204003,-0.027683,-0.077079,0.975538]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.205142,-0.028107,-0.080071,0.975046]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.206635,-0.028880,-0.083918,0.974385]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.208221,-0.029742,-0.088050,0.973656]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.209502,-0.030357,-0.091508,0.973044]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.210231,-0.030476,-0.093695,0.972674]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.210525,-0.030056,-0.094940,0.972503]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.210782,-0.029357,-0.096305,0.972335]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.210963,-0.028652,-0.097432,0.972204]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.211082,-0.028093,-0.098230,0.972114]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.211182,-0.027791,-0.098773,0.972046]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.212424,-0.026478,-0.103755,0.971293]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.215149,-0.023175,-0.115265,0.969478]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.218701,-0.017812,-0.131369,0.966744]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.221964,-0.011120,-0.147905,0.963708]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.224089,-0.003690,-0.161439,0.961097]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.225164,0.007256,-0.173095,0.958794]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.225774,0.021398,-0.184801,0.956251]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.225665,0.035636,-0.193745,0.954080]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.224741,0.046853,-0.197274,0.953089]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.223054,0.050924,-0.193206,0.954110]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.219323,0.044517,-0.175361,0.958731]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.213970,0.033022,-0.149432,0.964778]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [-0.208228,0.021169,-0.123343,0.970041]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.203541,0.012115,-0.103345,0.973521]
-						}
-					]
-				},
-				{
-					"boneId" : "fingers_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.126979,0.596584,-0.441326,0.658176]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.126997,0.596721,-0.441140,0.658172]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.127036,0.597020,-0.440735,0.658165]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.127085,0.597386,-0.440240,0.658155]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.127125,0.597685,-0.439834,0.658147]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.127143,0.597819,-0.439652,0.658143]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.126973,0.597637,-0.439899,0.658176]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.126578,0.596969,-0.440806,0.658252]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.126106,0.595728,-0.442481,0.658343]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.125675,0.593833,-0.445021,0.658426]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.125449,0.591518,-0.448092,0.658470]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.125415,0.588023,-0.452666,0.658478]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.125507,0.583001,-0.459125,0.658454]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.125750,0.577500,-0.466028,0.658406]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.126118,0.572404,-0.472265,0.658341]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.126544,0.569017,-0.476338,0.658262]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.127096,0.566423,-0.479419,0.658156]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.127824,0.562877,-0.483577,0.658015]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.128608,0.559079,-0.487963,0.657862]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.129254,0.556074,-0.491384,0.657736]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [-0.129641,0.554537,-0.493118,0.657660]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [-0.129822,0.554263,-0.493424,0.657626]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [-0.130002,0.554235,-0.493419,0.657617]
-						},
-						{
-							"keytime" : 766.666565,
-							"rotation" : [-0.130141,0.554371,-0.493243,0.657607]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [-0.130234,0.554550,-0.493046,0.657586]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [-0.130304,0.554577,-0.493017,0.657571]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [-0.131061,0.553127,-0.494654,0.657413]
-						},
-						{
-							"keytime" : 899.999817,
-							"rotation" : [-0.132803,0.550368,-0.497730,0.657056]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [-0.135212,0.547640,-0.500748,0.656551]
-						},
-						{
-							"keytime" : 966.666443,
-							"rotation" : [-0.137672,0.546500,-0.502008,0.656028]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [-0.139710,0.548176,-0.500151,0.655617]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [-0.141218,0.553999,-0.493721,0.655273]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [-0.142609,0.562254,-0.484247,0.655009]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [-0.143517,0.571131,-0.473724,0.654827]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [-0.143571,0.579082,-0.464005,0.654791]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [-0.142518,0.583934,-0.457885,0.655020]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [-0.139314,0.586168,-0.454975,0.655741]
-						},
-						{
-							"keytime" : 1233.333374,
-							"rotation" : [-0.135114,0.588874,-0.451524,0.656580]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [-0.131095,0.592070,-0.447371,0.657363]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.128125,0.595149,-0.443264,0.657951]
-						}
-					]
-				},
-				{
-					"boneId" : "upper_arm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.274086,0.191516,0.902436,0.271675]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [-0.274086,0.191516,0.902436,0.271675]
-						}
-					]
-				},
-				{
-					"boneId" : "lower_arm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [2.523243,-0.000000,-0.000000],
-							"rotation" : [-0.090222,-0.148174,0.265000,0.948514]
-						},
-						{
-							"keytime" : 1133.333252,
-							"translation" : [2.523243,-0.000000,0.000000],
-							"rotation" : [-0.090222,-0.148174,0.265000,0.948514]
-						},
-						{
-							"keytime" : 1300.000122,
-							"translation" : [2.523243,-0.000000,-0.000000],
-							"rotation" : [-0.090222,-0.148174,0.265000,0.948514]
-						}
-					]
-				},
-				{
-					"boneId" : "palm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.123644,0.258096,0.251769,0.924506]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.123644,0.258094,0.251768,0.924507]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.123644,0.258094,0.251768,0.924507]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.123644,0.258096,0.251769,0.924506]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.123644,0.258095,0.251768,0.924506]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.123644,0.258091,0.251765,0.924508]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.123644,0.258093,0.251767,0.924507]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.123645,0.258092,0.251765,0.924508]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.123644,0.258094,0.251767,0.924507]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.123645,0.258091,0.251765,0.924508]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.123645,0.258092,0.251765,0.924508]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.123644,0.258095,0.251768,0.924506]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.123644,0.258097,0.251770,0.924505]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.123645,0.258092,0.251765,0.924508]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.123645,0.258090,0.251764,0.924509]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.123645,0.258091,0.251764,0.924508]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.123644,0.258096,0.251769,0.924506]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.123645,0.258091,0.251765,0.924508]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.123644,0.258093,0.251767,0.924507]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.123645,0.258092,0.251766,0.924507]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.123644,0.258094,0.251767,0.924507]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.123645,0.258093,0.251766,0.924508]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.123644,0.258093,0.251766,0.924507]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.123644,0.258096,0.251769,0.924506]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [0.123645,0.258093,0.251767,0.924507]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [0.123644,0.258094,0.251768,0.924506]
-						}
-					]
-				},
-				{
-					"boneId" : "fingers_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.148866,0.108069,0.057671,0.981241]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.148866,0.108073,0.057673,0.981241]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.148866,0.108073,0.057674,0.981241]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.148866,0.108069,0.057671,0.981241]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.148866,0.108068,0.057671,0.981241]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.148866,0.108077,0.057676,0.981240]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.148866,0.108073,0.057674,0.981241]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.148866,0.108073,0.057673,0.981241]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.148866,0.108078,0.057676,0.981240]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.148866,0.108074,0.057674,0.981240]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.148866,0.108074,0.057674,0.981240]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.148866,0.108079,0.057677,0.981240]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.148866,0.108078,0.057676,0.981240]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.148866,0.108071,0.057672,0.981241]
-						},
-						{
-							"keytime" : 666.666626,
-							"rotation" : [0.148866,0.108067,0.057671,0.981241]
-						},
-						{
-							"keytime" : 699.999939,
-							"rotation" : [0.148866,0.108077,0.057676,0.981240]
-						},
-						{
-							"keytime" : 733.333252,
-							"rotation" : [0.148866,0.108081,0.057678,0.981239]
-						},
-						{
-							"keytime" : 799.999878,
-							"rotation" : [0.148866,0.108080,0.057678,0.981239]
-						},
-						{
-							"keytime" : 833.333191,
-							"rotation" : [0.148866,0.108078,0.057676,0.981240]
-						},
-						{
-							"keytime" : 866.666504,
-							"rotation" : [0.148866,0.108069,0.057672,0.981241]
-						},
-						{
-							"keytime" : 933.333130,
-							"rotation" : [0.148866,0.108079,0.057677,0.981240]
-						},
-						{
-							"keytime" : 999.999756,
-							"rotation" : [0.148866,0.108074,0.057674,0.981240]
-						},
-						{
-							"keytime" : 1033.333130,
-							"rotation" : [0.148866,0.108076,0.057675,0.981240]
-						},
-						{
-							"keytime" : 1066.666504,
-							"rotation" : [0.148866,0.108072,0.057673,0.981241]
-						},
-						{
-							"keytime" : 1099.999878,
-							"rotation" : [0.148866,0.108072,0.057673,0.981241]
-						},
-						{
-							"keytime" : 1133.333252,
-							"rotation" : [0.148866,0.108076,0.057675,0.981240]
-						},
-						{
-							"keytime" : 1166.666626,
-							"rotation" : [0.148866,0.108074,0.057674,0.981240]
-						},
-						{
-							"keytime" : 1200.000000,
-							"rotation" : [0.148866,0.108069,0.057671,0.981241]
-						},
-						{
-							"keytime" : 1266.666748,
-							"rotation" : [0.148866,0.108074,0.057674,0.981240]
-						},
-						{
-							"keytime" : 1300.000122,
-							"rotation" : [0.148866,0.108072,0.057673,0.981241]
-						}
-					]
-				}
-			]
-		},
-		{
-			"id" : "Walk",
-			"bones" : [
-				{
-					"boneId" : "Armature",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "knee_pole_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [4.599999,0.856558,5.352602]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [4.599999,0.948048,5.352602]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [4.599999,1.123471,5.352602]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [4.599999,1.339126,5.352602]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [4.599999,1.569141,5.352602]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [4.599999,1.850867,5.352602]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [4.599999,2.224647,5.352602]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [4.599999,2.642089,5.352602]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [4.600000,3.104335,5.160602]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [4.600000,3.572760,4.752602]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [4.600000,3.853720,4.356602]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [4.600000,3.856558,4.352602]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [4.600000,3.856558,4.352602]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [4.600000,3.597779,4.352602]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [4.600000,3.018830,4.352602]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [4.600000,2.231314,4.352602]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [4.612366,1.992285,4.376534]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [4.624732,1.806666,4.484272]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [4.624982,1.510435,4.741477]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [4.612616,1.131914,5.082956]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.165545,-0.925576,-2.182647],
-							"rotation" : [0.062040,0.704380,0.062040,0.704380]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [0.165545,-0.775530,-2.604393],
-							"rotation" : [0.121559,0.696580,0.121559,0.696580]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [0.165545,-0.626398,-3.001932],
-							"rotation" : [0.179987,0.683816,0.179988,0.683816]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [0.510130,-0.724141,-2.952873],
-							"rotation" : [0.187102,0.664755,0.192379,0.697197]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [1.185406,-1.077543,-2.334690],
-							"rotation" : [0.135104,0.646107,0.152544,0.735543]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [1.838804,-1.446922,-1.352217],
-							"rotation" : [0.068686,0.630931,0.103240,0.765865]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [1.692001,-1.474451,-0.491330],
-							"rotation" : [0.047181,0.666155,0.093956,0.738366]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [1.382704,-1.482369,0.415986],
-							"rotation" : [0.038765,0.698835,0.093078,0.708141]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [0.955150,-1.482344,1.438539],
-							"rotation" : [0.040154,0.712348,0.086329,0.695339]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [0.481245,-1.474518,2.500404],
-							"rotation" : [0.054435,0.708148,0.077297,0.699706]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [0.168703,-1.452991,3.119044],
-							"rotation" : [0.068268,0.703836,0.068497,0.703749]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [0.165546,-1.412637,2.979777],
-							"rotation" : [0.068230,0.703807,0.068230,0.703807]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [0.165546,-1.357857,2.623872],
-							"rotation" : [0.067784,0.703850,0.067785,0.703850]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [0.165546,-1.293577,2.099909],
-							"rotation" : [0.067113,0.703915,0.067113,0.703915]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [0.165546,-1.221357,1.434664],
-							"rotation" : [0.066249,0.703997,0.066249,0.703996]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [0.165546,-1.142738,0.640288],
-							"rotation" : [0.065218,0.704093,0.065218,0.704093]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [0.165546,-1.071828,-0.166025],
-							"rotation" : [0.064218,0.704185,0.064218,0.704185]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [0.165545,-1.012221,-0.910317],
-							"rotation" : [0.063350,0.704263,0.063350,0.704263]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [0.165545,-0.965728,-1.549375],
-							"rotation" : [0.062655,0.704325,0.062655,0.704325]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [0.165545,-0.937055,-1.985744],
-							"rotation" : [0.062218,0.704364,0.062218,0.704364]
-						}
-					]
-				},
-				{
-					"boneId" : "toe_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 633.333313
-						}
-					]
-				},
-				{
-					"boneId" : "ankle_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 633.333313
-						}
-					]
-				},
-				{
-					"boneId" : "global",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						}
-					]
-				},
-				{
-					"boneId" : "spine_1",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.017531,-0.790856,-0.030022,0.611014]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.020222,-0.775692,-0.031409,0.630006]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.024662,-0.752794,-0.034694,0.656878]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.024712,-0.752250,-0.034741,0.657497]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.020362,-0.775320,-0.031563,0.630451]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.017615,-0.790551,-0.030080,0.611404]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.019038,-0.781259,-0.030116,0.623189]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.020021,-0.768281,-0.030253,0.639084]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.020024,-0.767868,-0.030238,0.639580]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.019071,-0.780962,-0.030104,0.623562]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.017552,-0.790757,-0.030027,0.611141]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.020319,-0.775783,-0.031558,0.629882]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.024712,-0.752250,-0.034741,0.657497]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.024693,-0.752044,-0.034692,0.657736]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.020261,-0.775260,-0.031409,0.630535]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.017531,-0.790856,-0.030022,0.611014]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.020220,-0.775721,-0.031408,0.629970]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.024666,-0.752809,-0.034699,0.656861]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.024681,-0.752285,-0.034691,0.657461]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.020250,-0.775384,-0.031410,0.630383]
-						}
-					]
-				},
-				{
-					"boneId" : "spine_2",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.007774,0.209488,-0.024467,0.977474]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.007669,0.179723,-0.022897,0.983421]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.007469,0.140275,-0.021104,0.989859]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.007481,0.139370,-0.021110,0.989987]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.007698,0.179045,-0.022951,0.983543]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.007774,0.208887,-0.024438,0.977603]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.007520,0.190362,-0.022431,0.981429]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.007203,0.166386,-0.021263,0.985805]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.007193,0.165637,-0.021239,0.985932]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.007510,0.189770,-0.022367,0.981545]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.007772,0.209291,-0.024446,0.977517]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.007703,0.179952,-0.022998,0.983376]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.007481,0.139370,-0.021110,0.989987]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.007460,0.138998,-0.021046,0.990041]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.007664,0.178868,-0.022849,0.983578]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.007774,0.209488,-0.024467,0.977474]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.007670,0.179771,-0.022898,0.983412]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.007470,0.140301,-0.021105,0.989856]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.007463,0.139407,-0.021065,0.989983]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.007665,0.179120,-0.022864,0.983532]
-						}
-					]
-				},
-				{
-					"boneId" : "spine_3",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.001856,0.188956,-0.013724,0.981888]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.001811,0.152896,-0.012013,0.988168]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.001750,0.105942,-0.010070,0.994320]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.001752,0.104863,-0.010048,0.994434]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.001816,0.152064,-0.012017,0.988296]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.001857,0.188228,-0.013692,0.982028]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.001780,0.165551,-0.011913,0.986128]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.001680,0.136742,-0.010869,0.990546]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.001677,0.135847,-0.010848,0.990669]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.001776,0.164826,-0.011856,0.986250]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.001855,0.188715,-0.013706,0.981934]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.001819,0.153163,-0.012069,0.988126]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.001752,0.104863,-0.010048,0.994434]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.001747,0.104429,-0.010008,0.994480]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.001807,0.151861,-0.011961,0.988328]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.001856,0.188956,-0.013724,0.981888]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.001811,0.152955,-0.012015,0.988158]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.001751,0.105973,-0.010071,0.994316]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.001748,0.104914,-0.010028,0.994429]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.001808,0.152166,-0.011978,0.988281]
-						}
-					]
-				},
-				{
-					"boneId" : "neck",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.087370,-0.244458,0.059829,0.963861]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.076548,-0.202474,0.063605,0.974217]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.053260,-0.149520,0.067761,0.984995]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.028144,-0.146748,0.069565,0.986323]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.011206,-0.197348,0.071756,0.977640]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.004253,-0.238324,0.073474,0.968393]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.011794,-0.212765,0.069275,0.974573]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.030232,-0.181723,0.065649,0.980690]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.054339,-0.182191,0.063226,0.979722]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.077205,-0.215961,0.060371,0.971471]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.087272,-0.244174,0.059839,0.963941]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.076664,-0.202842,0.063878,0.974114]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.052703,-0.148334,0.067980,0.985189]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.028345,-0.146273,0.069395,0.986400]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.011281,-0.197078,0.071429,0.977717]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.004111,-0.239147,0.073509,0.968188]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.011073,-0.198322,0.071489,0.977464]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.027731,-0.147908,0.069441,0.986171]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.052692,-0.148368,0.067824,0.985196]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.076320,-0.201621,0.063665,0.974408]
-						}
-					]
-				},
-				{
-					"boneId" : "skull",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.000000,0.023256,0.000000,0.999730]
-						}
-					]
-				},
-				{
-					"boneId" : "pelvis",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.294828,-0.053756,-0.131089],
-							"rotation" : [-0.000099,0.707107,0.000099,0.707107]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [0.177630,-0.032466,-0.079138],
-							"rotation" : [-0.000035,0.707107,0.000035,0.707107]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [0.061090,-0.011180,-0.027246],
-							"rotation" : [-0.000213,0.707107,0.000213,0.707107]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [-0.000000,0.000000,0.000000],
-							"rotation" : [-0.000172,0.707107,0.000172,0.707107]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [-0.000000,0.000000,0.000000],
-							"rotation" : [0.000080,0.707107,-0.000080,0.707107]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [-0.000000,0.000000,0.000000],
-							"rotation" : [0.000001,0.707107,-0.000001,0.707107]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [-0.000000,-0.000000,-0.000000],
-							"rotation" : [0.000054,0.707107,-0.000054,0.707107]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [-0.000000,-0.000000,-0.000000],
-							"rotation" : [-0.000150,0.707107,0.000150,0.707107]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [0.056681,-0.010322,-0.025176],
-							"rotation" : [-0.000268,0.707107,0.000268,0.707107]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [0.177050,-0.032255,-0.078667],
-							"rotation" : [-0.000190,0.707107,0.000190,0.707107]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [0.293651,-0.053541,-0.130565],
-							"rotation" : [-0.000100,0.707107,0.000100,0.707107]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [0.179406,-0.032685,-0.079715],
-							"rotation" : [-0.000189,0.707107,0.000189,0.707107]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [0.059042,-0.010752,-0.026225],
-							"rotation" : [-0.000267,0.707107,0.000267,0.707107]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [-0.000000,-0.000000,-0.000000],
-							"rotation" : [-0.000153,0.707107,0.000153,0.707107]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [-0.000000,-0.000000,0.000000],
-							"rotation" : [0.000064,0.707107,-0.000064,0.707107]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [-0.000000,-0.000000,0.000000],
-							"rotation" : [-0.000001,0.707107,0.000001,0.707107]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [-0.000000,0.000000,0.000000],
-							"rotation" : [0.000108,0.707107,-0.000108,0.707107]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [-0.000000,0.000000,0.000000],
-							"rotation" : [-0.000159,0.707107,0.000159,0.707107]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [0.058740,-0.010750,-0.026198],
-							"rotation" : [-0.000189,0.707107,0.000189,0.707107]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [0.175263,-0.032036,-0.078088],
-							"rotation" : [0.000049,0.707107,-0.000049,0.707107]
-						}
-					]
-				},
-				{
-					"boneId" : "thigh_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.037511,0.474059,0.093171,0.874746]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.043947,0.461819,0.084845,0.881812]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.054162,0.430449,0.069722,0.898287]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.064338,0.385101,0.052809,0.919113]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.076329,0.336850,0.039658,0.937621]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.100661,0.294261,0.033672,0.949813]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.143175,0.285339,0.039740,0.946838]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.195049,0.279140,0.052293,0.938777]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.254457,0.267407,0.066586,0.926991]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.314597,0.245779,0.080705,0.913295]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.348372,0.216120,0.088889,0.907760]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.331048,0.169985,0.103570,0.922381]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.301742,0.111822,0.116359,0.939632]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.243793,0.135209,0.131764,0.951274]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.151226,0.247591,0.151312,0.944952]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.048092,0.385389,0.146651,0.909756]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.046862,0.423743,0.130897,0.895048]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.059979,0.447625,0.121853,0.883847]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.061963,0.473209,0.112464,0.871542]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.048807,0.492233,0.102391,0.863042]
-						}
-					]
-				},
-				{
-					"boneId" : "shin_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.008695,-0.316688,-0.007266,0.948462]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.008670,-0.325057,-0.007459,0.945625]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.008696,-0.317743,-0.007293,0.948109]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.008774,-0.296177,-0.006809,0.955069]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.008819,-0.272944,-0.006262,0.961969]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.008828,-0.269066,-0.006173,0.963062]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.008718,-0.330994,-0.007647,0.943561]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.008577,-0.400980,-0.009358,0.915999]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.008241,-0.453515,-0.010472,0.891149]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.008038,-0.480688,-0.011028,0.876786]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.008039,-0.480414,-0.011022,0.876936]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.008271,-0.443752,-0.010234,0.896053]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.008961,-0.351951,-0.008399,0.935938]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.009479,-0.375383,-0.009485,0.926773]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.011563,-0.525267,-0.015784,0.850712]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.006900,-0.658211,-0.015101,0.752651]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.006952,-0.653888,-0.015021,0.756410]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.008677,-0.617196,-0.015620,0.786607]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.008679,-0.549217,-0.013599,0.835524]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.008641,-0.452949,-0.010814,0.891429]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.051460,0.414230,0.041560,0.907766]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [0.047630,0.437999,0.035868,0.896996]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [0.038761,0.467250,0.023118,0.882972]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [0.027071,0.495108,0.006277,0.868387]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [0.013551,0.520677,-0.012996,0.853547]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [-0.001422,0.554883,-0.034860,0.831196]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [-0.017684,0.569940,-0.057860,0.819456]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [-0.028240,0.584788,-0.072940,0.807407]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [-0.039731,0.609527,-0.088400,0.786819]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [3.849471,0.000000,-0.000001],
-							"rotation" : [-0.047690,0.641455,-0.100680,0.759028]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [-0.055352,0.657902,-0.111712,0.742713]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [-0.053910,0.572151,-0.105908,0.811493]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [-0.064105,0.440731,-0.122074,0.886986]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [-0.068585,0.380377,-0.128661,0.913267]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [-0.056976,0.403978,-0.112419,0.906045]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [-0.038168,0.402268,-0.085740,0.910699]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [-0.014084,0.510605,-0.053155,0.858055]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.006788,0.590281,-0.024756,0.806790]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.018493,0.585044,-0.004941,0.810776]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.039799,0.501033,0.024242,0.864173]
-						}
-					]
-				},
-				{
-					"boneId" : "toes_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.086890,0.252112,0.022774,0.963520]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.076033,0.252336,0.019926,0.964442]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.055601,0.252605,0.014564,0.965861]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.032613,0.252890,0.008550,0.966907]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.012243,0.253008,0.003211,0.967381]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.007033,0.253079,-0.001878,0.967418]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.029866,0.300848,-0.013393,0.953110]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.052117,0.351930,-0.034146,0.933950]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.071084,0.375802,-0.060756,0.921970]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.088430,0.373131,-0.091609,0.919000]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.094430,0.370883,-0.110893,0.917187]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.022698,0.478863,-0.058981,0.875612]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.062858,0.567250,0.035960,0.820355]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.068190,0.617950,0.053974,0.781393]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.046123,0.619819,0.036550,0.782535]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.027301,0.620942,0.021677,0.783081]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.024681,0.484699,0.016704,0.874173]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.016744,0.335435,0.006740,0.941890]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.032213,0.252717,0.008452,0.966967]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.063959,0.252452,0.016804,0.965347]
-						}
-					]
-				},
-				{
-					"boneId" : "thigh_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.125781,0.257608,-0.059031,0.956207]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.128769,0.217932,-0.067146,0.965099]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.137311,0.147373,-0.071588,0.976884]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.138671,0.152564,-0.084770,0.974838]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.123769,0.257329,-0.105584,0.952531]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.089857,0.388966,-0.119705,0.909012]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.075227,0.429667,-0.101865,0.894064]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.045629,0.458661,-0.076818,0.884108]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.008969,0.486194,-0.050872,0.872322]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.073657,0.505442,-0.037203,0.858905]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.114915,0.471948,-0.038951,0.873237]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.092005,0.462818,-0.035474,0.880952]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.045069,0.431340,-0.033015,0.900458]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.010327,0.384645,-0.032899,0.922420]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.062381,0.328657,-0.033905,0.941777]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.100744,0.270575,-0.033542,0.956825]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.109682,0.249668,-0.037892,0.961353]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.105668,0.242421,-0.043874,0.963401]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.104201,0.243385,-0.050144,0.963012]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.112075,0.248850,-0.055337,0.960443]
-						}
-					]
-				},
-				{
-					"boneId" : "shin_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.008006,-0.486979,0.011173,0.873305]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.008141,-0.464383,0.010676,0.885533]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.008868,-0.384016,0.009167,0.923238]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.009439,-0.405723,0.010279,0.913890]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.012914,-0.546792,0.017756,0.836981]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.007341,-0.668881,0.015871,0.743164]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.006795,-0.671077,0.015397,0.741197]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.009850,-0.633346,0.017277,0.773613]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.009482,-0.553667,0.014517,0.832558]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.008870,-0.425810,0.010267,0.904711]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.008869,-0.264138,0.006084,0.964425]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.008793,-0.285330,0.006552,0.958367]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.008750,-0.298731,0.006855,0.954273]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.008760,-0.296266,0.006801,0.955041]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.008793,-0.282874,0.006491,0.959095]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.008818,-0.273187,0.006268,0.961900]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.008720,-0.319500,0.007356,0.947518]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.008612,-0.376848,0.008750,0.926194]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.008362,-0.429967,0.009944,0.902751]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.008125,-0.466491,0.010719,0.884424]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [3.849470,0.000000,0.000000],
-							"rotation" : [0.023867,0.659327,0.067111,0.748475]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [3.849471,0.000000,-0.000000],
-							"rotation" : [0.019544,0.579776,0.057414,0.812516]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.021964,0.470061,0.063866,0.880046]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [3.849471,0.000000,0.000002],
-							"rotation" : [0.031402,0.417127,0.076301,0.905095]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [3.849471,0.000000,0.000002],
-							"rotation" : [0.027374,0.431727,0.070669,0.898815]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.017784,0.414612,0.056946,0.908041]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.009749,0.560729,0.046027,0.826662]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [-0.028615,0.670591,0.003067,0.741269]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [-0.040444,0.656716,-0.016198,0.752878]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [-0.041857,0.506251,-0.026717,0.860955]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [3.849469,0.000000,0.000001],
-							"rotation" : [-0.048823,0.376993,-0.038220,0.924138]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [-0.045833,0.408374,-0.033615,0.911043]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [-0.037171,0.454507,-0.021010,0.889719]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [3.849471,0.000000,0.000001],
-							"rotation" : [-0.025416,0.498394,-0.004068,0.866568]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [-0.011959,0.537625,0.015287,0.842961]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.001884,0.578634,0.035683,0.814804]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [3.849470,0.000000,0.000001],
-							"rotation" : [0.012545,0.592159,0.050725,0.804125]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.017683,0.603056,0.058134,0.795381]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.021941,0.623524,0.063643,0.778901]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [3.849471,0.000000,0.000000],
-							"rotation" : [0.022435,0.648220,0.064971,0.758345]
-						}
-					]
-				},
-				{
-					"boneId" : "toes_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.055215,0.375255,0.095122,0.920373]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.008458,0.480075,0.041789,0.876191]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.083758,0.564060,-0.049321,0.819993]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.082360,0.615623,-0.065172,0.781011]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.043315,0.617202,-0.034271,0.784863]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.004936,0.621003,0.003916,0.783783]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.016026,0.487738,0.008376,0.872803]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.016463,0.333811,0.007123,0.942469]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.008230,0.252626,-0.002180,0.967527]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.050168,0.252514,-0.013187,0.966202]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.084820,0.252119,-0.022233,0.963715]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.072116,0.252393,-0.018900,0.964749]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.050405,0.252654,-0.013205,0.966153]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.028219,0.252913,-0.007397,0.967049]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.009271,0.253079,-0.002427,0.967398]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.005211,0.253197,0.001409,0.967400]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.015360,0.302183,0.008469,0.953088]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.024695,0.352619,0.023087,0.935156]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.034225,0.379268,0.046457,0.923486]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.045334,0.378957,0.074191,0.921321]
-						}
-					]
-				},
-				{
-					"boneId" : "torso_ctrl",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.491997,-0.365258,3.122759]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [0.445888,-0.372690,3.183168]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [0.399834,-0.380121,3.243454]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [0.398922,-0.381099,3.244630]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [0.444994,-0.374511,3.184305]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [0.491067,-0.365441,3.123977]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [0.461910,-0.359974,3.164796]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [0.430272,-0.356866,3.208998]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [0.429341,-0.356802,3.210298]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [0.460979,-0.359811,3.166096]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [0.491687,-0.365203,3.123192]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [0.446390,-0.374236,3.182477]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [0.398922,-0.381099,3.244630]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [0.398457,-0.380346,3.245238]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [0.444529,-0.372915,3.184912]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [0.491997,-0.365258,3.122759]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [0.399853,-0.380121,3.243410]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [0.398904,-0.380271,3.244671]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [0.444957,-0.372840,3.184388]
-						}
-					]
-				},
-				{
-					"boneId" : "ball_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.092315,-0.435747,0.029707,0.894829]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.055746,-0.531617,0.017400,0.844970]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.014311,-0.619346,0.000983,0.784987]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.000000,-0.663799,-0.000000,0.747911]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.000000,-0.663799,-0.000000,0.747911]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.000000,-0.535449,-0.000000,0.844568]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.000000,-0.385639,-0.000000,0.922650]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.000000,-0.306326,-0.000000,0.951927]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.000000,-0.306326,-0.000000,0.951927]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.004647,-0.354581,0.001570,0.935012]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.017604,-0.404559,0.006147,0.914322]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.041283,-0.432562,0.013343,0.900560]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.070625,-0.435709,0.022719,0.897025]
-						}
-					]
-				},
-				{
-					"boneId" : "knee_pole_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [4.334403,-3.172766,4.502609]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [4.317720,-3.130661,4.520931]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [4.301015,-3.009388,4.539258]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [4.349107,-2.798851,4.509616]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [4.466207,-2.529868,4.431874]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [4.597351,-2.237226,4.354172]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [4.621214,-2.041134,4.376025]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [4.629641,-1.828127,4.485649]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [4.625232,-1.513880,4.737331]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [4.612491,-1.118973,5.092400]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [4.600125,-0.859182,5.350000]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [4.600000,-0.946615,5.352602]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [4.600000,-1.127359,5.352602]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [4.599999,-1.347156,5.352602]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [4.599999,-1.587500,5.352602]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [4.599999,-1.856557,5.352602]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [4.585375,-2.095583,5.367881]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [4.548065,-2.340822,5.383396]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [4.478535,-2.647458,5.219104]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [4.395487,-2.962431,4.872483]
-						}
-					]
-				},
-				{
-					"boneId" : "body_ctrl",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [8.450953,-0.012483,0.777020],
-							"rotation" : [0.059450,0.594546,0.059450,0.799654]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [8.529897,-0.011178,0.824037],
-							"rotation" : [0.052899,0.594929,0.052899,0.800290]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [8.700381,-0.008317,0.926519],
-							"rotation" : [0.038410,0.595170,0.038410,0.801761]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [8.908549,-0.004798,1.052218],
-							"rotation" : [0.020824,0.595787,0.020824,0.802603]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [9.079456,-0.001894,1.155753],
-							"rotation" : [0.006327,0.596577,0.006327,0.802506]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [9.156440,-0.000588,1.202336],
-							"rotation" : [-0.000224,0.596653,-0.000224,0.802499]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [9.082123,-0.001841,1.157536],
-							"rotation" : [0.006063,0.596572,0.006063,0.802514]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [8.908819,-0.004763,1.053055],
-							"rotation" : [0.020652,0.595787,0.020652,0.802611]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [8.706266,-0.008179,0.930942],
-							"rotation" : [0.037724,0.595218,0.037724,0.801791]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [8.529172,-0.011164,0.824175],
-							"rotation" : [0.052835,0.594934,0.052835,0.800294]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [8.451735,-0.012470,0.777491],
-							"rotation" : [0.059384,0.594548,0.059384,0.799662]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [8.527607,-0.011191,0.823232],
-							"rotation" : [0.052966,0.594923,0.052966,0.800285]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [8.702175,-0.008248,0.928475],
-							"rotation" : [0.038068,0.595194,0.038068,0.801777]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [8.904727,-0.004832,1.050588],
-							"rotation" : [0.021001,0.595786,0.021001,0.802594]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [9.078212,-0.001907,1.155178],
-							"rotation" : [0.006394,0.596578,0.006394,0.802504]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [9.157995,-0.000562,1.203277],
-							"rotation" : [-0.000356,0.596659,-0.000356,0.802495]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [9.081012,-0.001868,1.156694],
-							"rotation" : [0.006195,0.596574,0.006195,0.802510]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [8.912609,-0.004729,1.054678],
-							"rotation" : [0.020476,0.595788,0.020476,0.802620]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [8.704484,-0.008248,0.928988],
-							"rotation" : [0.038065,0.595194,0.038066,0.801777]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [8.531492,-0.011151,0.824987],
-							"rotation" : [0.052768,0.594940,0.052768,0.800298]
-						}
-					]
-				},
-				{
-					"boneId" : "foot_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.165545,1.452774,3.125293],
-							"rotation" : [-0.068406,0.703790,-0.068406,0.703790]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [0.165545,1.438235,2.991083],
-							"rotation" : [-0.068232,0.703807,-0.068231,0.703807]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [0.165545,1.402460,2.690201],
-							"rotation" : [-0.067801,0.703849,-0.067801,0.703849]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [0.165545,1.345288,2.235408],
-							"rotation" : [-0.067112,0.703915,-0.067112,0.703915]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [0.165545,1.273581,1.683268],
-							"rotation" : [-0.066247,0.703997,-0.066247,0.703997]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [0.165545,1.190688,1.048934],
-							"rotation" : [-0.065246,0.704090,-0.065246,0.704090]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [0.165545,1.107835,0.361845],
-							"rotation" : [-0.064245,0.704182,-0.064244,0.704182]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [0.165545,1.033548,-0.347793],
-							"rotation" : [-0.063346,0.704264,-0.063346,0.704264]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [0.165545,0.977530,-1.011901],
-							"rotation" : [-0.062668,0.704324,-0.062668,0.704324]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [0.165545,0.940227,-1.642824],
-							"rotation" : [-0.062217,0.704364,-0.062217,0.704364]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [0.165545,0.925723,-2.177249],
-							"rotation" : [-0.062042,0.704380,-0.062042,0.704380]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [0.165545,0.986395,-2.717175],
-							"rotation" : [-0.120850,0.696703,-0.120850,0.696703]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [0.165545,1.136606,-3.069504],
-							"rotation" : [-0.181099,0.683523,-0.181099,0.683523]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [0.503238,1.391451,-2.957940],
-							"rotation" : [-0.188116,0.664927,-0.192931,0.696607]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [1.178805,1.699666,-2.344614],
-							"rotation" : [-0.136896,0.646238,-0.153412,0.734916]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [1.852004,1.925576,-1.332369],
-							"rotation" : [-0.067357,0.630951,-0.102259,0.766099]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [1.688701,1.925576,-0.473990],
-							"rotation" : [-0.040314,0.632916,-0.092877,0.767571]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [1.386260,1.925576,0.407006],
-							"rotation" : [-0.027988,0.637871,-0.092284,0.764081]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [0.951389,1.831911,1.410840],
-							"rotation" : [-0.034903,0.655098,-0.090419,0.749301]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [0.497527,1.645593,2.390686],
-							"rotation" : [-0.051412,0.681038,-0.079457,0.726106]
-						}
-					]
-				},
-				{
-					"boneId" : "ball_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.000000,-0.306326,0.000000,0.951927]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.000000,-0.306326,0.000000,0.951927]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.004559,-0.353615,-0.001546,0.935379]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.017755,-0.405069,-0.006193,0.914093]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.040548,-0.431529,-0.013066,0.901093]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.070779,-0.433697,-0.022783,0.897986]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.092100,-0.435723,-0.029638,0.894866]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.056209,-0.532420,-0.017556,0.844429]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.013674,-0.621879,-0.000836,0.782993]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.000000,-0.663799,0.000000,0.747911]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.000000,-0.663799,0.000000,0.747911]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.000000,-0.532645,0.000000,0.846339]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.000000,-0.387169,0.000000,0.922009]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.000000,-0.306326,0.000000,0.951927]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.000000,-0.306326,0.000000,0.951927]
-						}
-					]
-				},
-				{
-					"boneId" : "ankle_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 633.333313
-						}
-					]
-				},
-				{
-					"boneId" : "toe_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 633.333313
-						}
-					]
-				},
-				{
-					"boneId" : "sword_casing",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 633.333313
-						}
-					]
-				},
-				{
-					"boneId" : "arm_pole_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [2.399996,-4.299984,-0.099997]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [2.399996,-4.299984,-0.099997]
-						}
-					]
-				},
-				{
-					"boneId" : "arm_pole_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 633.333313
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [-3.152660,-2.434659,-1.849997],
-							"rotation" : [-0.058679,0.706029,-0.702803,-0.064403]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [-3.134545,-2.436105,-1.889183],
-							"rotation" : [-0.062041,0.706144,-0.701971,-0.068906]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [-3.089985,-2.439666,-1.985043],
-							"rotation" : [-0.070345,0.706324,-0.699826,-0.080015]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [-3.018805,-2.445362,-2.137399],
-							"rotation" : [-0.083639,0.706323,-0.696094,-0.097808]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [-2.929571,-2.452513,-2.327492],
-							"rotation" : [-0.100301,0.705829,-0.690876,-0.120150]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [-2.826474,-2.460786,-2.546063],
-							"rotation" : [-0.119520,0.704560,-0.684111,-0.145954]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [-2.723507,-2.469059,-2.763436],
-							"rotation" : [-0.138654,0.702489,-0.676635,-0.171609]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [-2.631228,-2.476476,-2.958072],
-							"rotation" : [-0.155642,0.700007,-0.669300,-0.194428]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [-2.561666,-2.482066,-3.104819],
-							"rotation" : [-0.168332,0.697749,-0.663388,-0.211489]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [-2.515357,-2.485786,-3.202628],
-							"rotation" : [-0.176713,0.696059,-0.659283,-0.222759]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [-2.497355,-2.487231,-3.240744],
-							"rotation" : [-0.179953,0.695360,-0.657655,-0.227115]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [-2.514994,-2.485815,-3.203398],
-							"rotation" : [-0.176778,0.696045,-0.659250,-0.222847]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [-2.560582,-2.482153,-3.107109],
-							"rotation" : [-0.168528,0.697711,-0.663294,-0.211753]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [-2.629521,-2.476613,-2.961671],
-							"rotation" : [-0.155955,0.699956,-0.669159,-0.194849]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [-2.718307,-2.469477,-2.774412],
-							"rotation" : [-0.139614,0.702368,-0.676234,-0.172902]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [-2.824392,-2.460953,-2.550479],
-							"rotation" : [-0.119906,0.704528,-0.683965,-0.146475]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [-2.927488,-2.452680,-2.331908],
-							"rotation" : [-0.100691,0.705809,-0.690748,-0.120672]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [-3.017092,-2.445499,-2.141056],
-							"rotation" : [-0.083959,0.706318,-0.695999,-0.098237]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [-3.088895,-2.439753,-1.987387],
-							"rotation" : [-0.070548,0.706327,-0.699771,-0.080287]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [-3.134179,-2.436134,-1.889974],
-							"rotation" : [-0.062109,0.706146,-0.701954,-0.068997]
-						}
-					]
-				},
-				{
-					"boneId" : "thumb_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [0.153559,0.166642,-0.243344],
-							"rotation" : [-0.081221,0.785392,-0.383246,0.479255],
-							"scale" : [0.800000,0.800000,0.800000]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [0.153559,0.166642,-0.243344],
-							"rotation" : [-0.081221,0.785392,-0.383246,0.479255],
-							"scale" : [0.800000,0.800000,0.800000]
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ik_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.500082,-0.499918,0.500082,0.499918]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.499757,-0.500243,0.499757,0.500243]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.499904,-0.500096,0.499904,0.500096]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.500042,-0.499958,0.500042,0.499958]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.499983,-0.500017,0.499983,0.500017]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.499905,-0.500095,0.499905,0.500095]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.499923,-0.500077,0.499923,0.500077]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.500010,-0.499990,0.500010,0.499990]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.500064,-0.499936,0.500064,0.499936]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.500042,-0.499958,0.500042,0.499958]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.499969,-0.500031,0.499969,0.500031]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.500131,-0.499869,0.500131,0.499869]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.500110,-0.499890,0.500110,0.499890]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.500014,-0.499986,0.500014,0.499986]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.499940,-0.500060,0.499940,0.500060]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.499971,-0.500029,0.499971,0.500029]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.499995,-0.500005,0.499995,0.500005]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.500035,-0.499965,0.500035,0.499965]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.499896,-0.500104,0.499896,0.500104]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.499733,-0.500267,0.499733,0.500267]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ctrl_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.055614,0.731206,0.060052,0.677229],
-							"scale" : [0.720000,0.720000,0.720000]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.055614,0.731206,0.060052,0.677229],
-							"scale" : [0.720000,0.720000,0.720000]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ik_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 633.333313
-						}
-					]
-				},
-				{
-					"boneId" : "shield",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.661063,-0.652414,0.271985,-0.251747]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.663035,-0.650417,0.270972,-0.252817]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.667868,-0.645465,0.268467,-0.255448]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.675520,-0.637454,0.264422,-0.259626]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.684986,-0.627251,0.259276,-0.264812]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.695735,-0.615248,0.253235,-0.270731]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.706249,-0.603037,0.247120,-0.276570]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.715471,-0.591930,0.241567,-0.281718]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.722294,-0.583461,0.237339,-0.285543]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.726770,-0.577781,0.234507,-0.288063]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.728494,-0.575566,0.233405,-0.289037]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.726805,-0.577737,0.234485,-0.288083]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.722399,-0.583329,0.237273,-0.285603]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.715640,-0.591723,0.241464,-0.281812]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.706774,-0.602416,0.246808,-0.276861]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.695949,-0.615004,0.253111,-0.270849]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.685205,-0.627011,0.259155,-0.264933]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.675703,-0.637260,0.264324,-0.259726]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.667986,-0.645343,0.268405,-0.255512]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.663075,-0.650376,0.270952,-0.252839]
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"translation" : [-2.609006,3.655900,-3.695310],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 33.333332,
-							"translation" : [-2.638075,3.627588,-3.667059],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 66.666664,
-							"translation" : [-2.709406,3.558103,-3.597721],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 100.000000,
-							"translation" : [-2.823097,3.447332,-3.487185],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 133.333328,
-							"translation" : [-2.965327,3.308733,-3.348876],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 166.666656,
-							"translation" : [-3.129303,3.148913,-3.189391],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 199.999985,
-							"translation" : [-3.292765,2.989571,-3.030379],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 233.333313,
-							"translation" : [-3.439201,2.846820,-2.887924],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 266.666656,
-							"translation" : [-3.549596,2.739204,-2.780532],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 300.000000,
-							"translation" : [-3.623126,2.667528,-2.709004],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 333.333344,
-							"translation" : [-3.651743,2.639636,-2.681170],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 366.666687,
-							"translation" : [-3.623704,2.666964,-2.708441],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 400.000031,
-							"translation" : [-3.551318,2.737526,-2.778857],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 433.333374,
-							"translation" : [-3.441909,2.844180,-2.885289],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 466.666718,
-							"translation" : [-3.301020,2.981524,-3.022348],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 500.000061,
-							"translation" : [-3.132616,3.145684,-3.186169],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 533.333374,
-							"translation" : [-2.968640,3.305504,-3.345655],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 566.666687,
-							"translation" : [-2.825830,3.444669,-3.484528],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 600.000000,
-							"translation" : [-2.711151,3.556403,-3.596025],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						},
-						{
-							"keytime" : 633.333313,
-							"translation" : [-2.638663,3.627017,-3.666488],
-							"rotation" : [-0.369417,0.524159,0.752868,-0.148249]
-						}
-					]
-				},
-				{
-					"boneId" : "thumb_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.047806,0.118592,0.201995,0.971004]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.047806,0.118592,0.201995,0.971004]
-						}
-					]
-				},
-				{
-					"boneId" : "hand_ik_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.498517,-0.501479,-0.498517,0.501479]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.498753,-0.501244,-0.498753,0.501244]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.498913,-0.501085,-0.498913,0.501085]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.499113,-0.500885,-0.499113,0.500885]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.499161,-0.500838,-0.499161,0.500838]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.498548,-0.501448,-0.498548,0.501448]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.499183,-0.500816,-0.499183,0.500816]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.498991,-0.501007,-0.498991,0.501007]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.498999,-0.500999,-0.498999,0.500999]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.499248,-0.500751,-0.499248,0.500751]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.498524,-0.501472,-0.498524,0.501472]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.499233,-0.500766,-0.499233,0.500766]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.499010,-0.500988,-0.499010,0.500988]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.498981,-0.501017,-0.498981,0.501017]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.499216,-0.500783,-0.499216,0.500783]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.498535,-0.501460,-0.498535,0.501460]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.499148,-0.500850,-0.499148,0.500850]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.499333,-0.500666,-0.499333,0.500666]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.499682,-0.500317,-0.499682,0.500317]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.499861,-0.500139,-0.499861,0.500139]
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ctrl_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 633.333313
-						}
-					]
-				},
-				{
-					"boneId" : "finger_ik_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 633.333313
-						}
-					]
-				},
-				{
-					"boneId" : "sword",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000
-						},
-						{
-							"keytime" : 633.333313
-						}
-					]
-				},
-				{
-					"boneId" : "upper_arm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.420667,-0.125891,0.802834,-0.403297]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.425276,-0.126838,0.800064,-0.403672]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.436206,-0.128993,0.793407,-0.404464]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.452680,-0.132253,0.783186,-0.405227]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.471793,-0.136280,0.771106,-0.405259]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.491717,-0.140788,0.758347,-0.404108]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.508653,-0.145063,0.747685,-0.401493]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.521899,-0.149251,0.739622,-0.397875]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.530682,-0.152629,0.734538,-0.394379]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.535874,-0.155015,0.731737,-0.391625]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.537714,-0.155997,0.730818,-0.390427]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.535911,-0.155035,0.731718,-0.391601]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.530805,-0.152684,0.734471,-0.394316]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.522128,-0.149331,0.739485,-0.397799]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.509488,-0.145301,0.747155,-0.401333]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.492111,-0.140891,0.758092,-0.404070]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.472203,-0.136359,0.770846,-0.405250]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.453062,-0.132329,0.782947,-0.405238]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.436471,-0.129048,0.793244,-0.404479]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.425369,-0.126858,0.800008,-0.403678]
-						}
-					]
-				},
-				{
-					"boneId" : "lower_arm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.071812,-0.318112,-0.568924,0.754965]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.071904,-0.317559,-0.567936,0.755933]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.072178,-0.315926,-0.565022,0.758770]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.072721,-0.312671,-0.559222,0.764343]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.073544,-0.307599,-0.550173,0.772841]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.074651,-0.300268,-0.537016,0.784780]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.076149,-0.290475,-0.519595,0.799904]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.077626,-0.280089,-0.501054,0.815149]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.078774,-0.271166,-0.485030,0.827653]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.079577,-0.264546,-0.473131,0.836559]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.079919,-0.261763,-0.468148,0.840196]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.079585,-0.264490,-0.473030,0.836632]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.078795,-0.271012,-0.484756,0.827862]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.077653,-0.279884,-0.500685,0.815444]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.076212,-0.289981,-0.518696,0.800661]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.074671,-0.300120,-0.536747,0.785019]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.073569,-0.307450,-0.549911,0.773085]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.072736,-0.312583,-0.559065,0.764492]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.072184,-0.315886,-0.564949,0.758840]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.071906,-0.317548,-0.567916,0.755953]
-						}
-					]
-				},
-				{
-					"boneId" : "palm_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.201628,0.008517,-0.095477,0.974760]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.201514,0.011690,-0.097197,0.974581]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.201250,0.019536,-0.101321,0.974090]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.200803,0.032150,-0.107629,0.973170]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.200140,0.048058,-0.115055,0.971801]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.199230,0.066535,-0.122867,0.969940]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.198236,0.084972,-0.129353,0.967859]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.197125,0.101307,-0.134181,0.965854]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.196158,0.113490,-0.137197,0.964271]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.195458,0.121528,-0.138863,0.963195]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.195172,0.124637,-0.139417,0.962775]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.195453,0.121591,-0.138875,0.963186]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.196143,0.113679,-0.137238,0.964246]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.197102,0.101608,-0.134263,0.965816]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.198174,0.085902,-0.129677,0.967746]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.199207,0.066908,-0.123024,0.969899]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.200127,0.048432,-0.115215,0.971766]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.200792,0.032455,-0.107776,0.973146]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.201242,0.019728,-0.101421,0.974077]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.201511,0.011754,-0.097231,0.974577]
-						}
-					]
-				},
-				{
-					"boneId" : "fingers_l",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.126979,0.596584,-0.441326,0.658175]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.127060,0.598614,-0.438572,0.658158]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.127259,0.603493,-0.431844,0.658112]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.127566,0.611028,-0.421137,0.658039]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.127924,0.620062,-0.407719,0.657969]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.128288,0.629948,-0.392206,0.657938]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.128534,0.639307,-0.376767,0.657885]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.128652,0.647320,-0.362849,0.657850]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.128675,0.653132,-0.352300,0.657835]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.128651,0.656895,-0.345250,0.657830]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.128628,0.658335,-0.342510,0.657828]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.128651,0.656924,-0.345195,0.657830]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.128675,0.653220,-0.352135,0.657835]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.128654,0.647464,-0.362590,0.657850]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.128546,0.639767,-0.375980,0.657885]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.128296,0.630143,-0.391890,0.657938]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.127932,0.620266,-0.407408,0.657968]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.127573,0.611205,-0.420880,0.658037]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.127264,0.603612,-0.431680,0.658110]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.127062,0.598655,-0.438516,0.658157]
-						}
-					]
-				},
-				{
-					"boneId" : "upper_arm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.398447,0.227597,0.805801,0.374333]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.401368,0.226662,0.803473,0.376774]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.405948,0.225290,0.800237,0.379567]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.409877,0.224298,0.798416,0.379767]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.411032,0.224184,0.799911,0.375415]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.408372,0.225239,0.805617,0.365352]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.401328,0.227028,0.815329,0.350189]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.392774,0.228908,0.825713,0.333958]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.384959,0.230555,0.834414,0.320008]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.378983,0.231707,0.840646,0.309834]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.376443,0.232136,0.843190,0.305669]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.378932,0.231716,0.840698,0.309750]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.384819,0.230579,0.834561,0.319774]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.392598,0.228948,0.825917,0.333633]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.400975,0.227136,0.815812,0.349399]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.408320,0.225262,0.805730,0.365146]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.410977,0.224203,0.800028,0.375214]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.409925,0.224289,0.798418,0.379715]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.406053,0.225260,0.800165,0.379625]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.401427,0.226644,0.803426,0.376823]
-						}
-					]
-				},
-				{
-					"boneId" : "lower_arm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [-0.093484,-0.077694,0.138951,0.982811]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [-0.093229,-0.086380,0.154499,0.979784]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [-0.092797,-0.103073,0.184472,0.973003]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [-0.091868,-0.123748,0.221501,0.962904]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [-0.090630,-0.143155,0.256108,0.951683]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [-0.089550,-0.158791,0.283996,0.941336]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [-0.088967,-0.167639,0.299844,0.934920]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [-0.088601,-0.172295,0.308144,0.931403]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [-0.088482,-0.173825,0.310876,0.930222]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [-0.088486,-0.173781,0.310796,0.930256]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [-0.088508,-0.173479,0.310257,0.930490]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [-0.088486,-0.173774,0.310785,0.930261]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [-0.088482,-0.173826,0.310877,0.930221]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [-0.088596,-0.172354,0.308250,0.931357]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [-0.088931,-0.168079,0.300627,0.934593]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [-0.089519,-0.159107,0.284553,0.941117]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [-0.090618,-0.143471,0.256677,0.951484]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [-0.091851,-0.124164,0.222247,0.962680]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [-0.092777,-0.103468,0.185176,0.972829]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [-0.093221,-0.086555,0.154811,0.979720]
-						}
-					]
-				},
-				{
-					"boneId" : "palm_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.137225,0.238731,0.390414,0.878495]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.136297,0.238650,0.382362,0.882195]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.134328,0.238727,0.364910,0.889835]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.132088,0.240132,0.339737,0.899704]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.129856,0.242547,0.311601,0.909513]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.126660,0.244312,0.283720,0.918571]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.123821,0.246114,0.260070,0.925451]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.121634,0.247496,0.240822,0.930567]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.120322,0.248485,0.227428,0.933838]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.119696,0.249159,0.219092,0.935730]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.119460,0.249363,0.216087,0.936405]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.119692,0.249161,0.219030,0.935745]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.120307,0.248499,0.227231,0.933885]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.121596,0.247519,0.240482,0.930654]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.123683,0.246213,0.258876,0.925778]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.126598,0.244352,0.283155,0.918743]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.129790,0.242575,0.311036,0.909708]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.132048,0.240183,0.339167,0.899912]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.134282,0.238731,0.364488,0.890014]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.136279,0.238646,0.382195,0.882271]
-						}
-					]
-				},
-				{
-					"boneId" : "fingers_r",
-					"keyframe" : [
-						{
-							"keytime" : 0.000000,
-							"rotation" : [0.163212,0.098061,0.072951,0.978991]
-						},
-						{
-							"keytime" : 33.333332,
-							"rotation" : [0.162357,0.098567,0.072272,0.979133]
-						},
-						{
-							"keytime" : 66.666664,
-							"rotation" : [0.160491,0.099939,0.070892,0.979402]
-						},
-						{
-							"keytime" : 100.000000,
-							"rotation" : [0.157596,0.101407,0.069131,0.979847]
-						},
-						{
-							"keytime" : 133.333328,
-							"rotation" : [0.154393,0.102850,0.066957,0.980358]
-						},
-						{
-							"keytime" : 166.666656,
-							"rotation" : [0.151868,0.105170,0.063600,0.980730]
-						},
-						{
-							"keytime" : 199.999985,
-							"rotation" : [0.149668,0.106798,0.060276,0.981102]
-						},
-						{
-							"keytime" : 233.333313,
-							"rotation" : [0.147856,0.108221,0.057710,0.981375]
-						},
-						{
-							"keytime" : 266.666656,
-							"rotation" : [0.146556,0.109112,0.056177,0.981560]
-						},
-						{
-							"keytime" : 300.000000,
-							"rotation" : [0.145717,0.109501,0.055444,0.981683]
-						},
-						{
-							"keytime" : 333.333344,
-							"rotation" : [0.145434,0.109613,0.055164,0.981728]
-						},
-						{
-							"keytime" : 366.666687,
-							"rotation" : [0.145711,0.109507,0.055440,0.981684]
-						},
-						{
-							"keytime" : 400.000031,
-							"rotation" : [0.146536,0.109124,0.056161,0.981563]
-						},
-						{
-							"keytime" : 433.333374,
-							"rotation" : [0.147824,0.108249,0.057667,0.981379]
-						},
-						{
-							"keytime" : 466.666718,
-							"rotation" : [0.149557,0.106882,0.060109,0.981120]
-						},
-						{
-							"keytime" : 500.000061,
-							"rotation" : [0.151817,0.105218,0.063532,0.980737]
-						},
-						{
-							"keytime" : 533.333374,
-							"rotation" : [0.154342,0.102904,0.066894,0.980365]
-						},
-						{
-							"keytime" : 566.666687,
-							"rotation" : [0.157527,0.101433,0.069096,0.979858]
-						},
-						{
-							"keytime" : 600.000000,
-							"rotation" : [0.160446,0.099974,0.070860,0.979409]
-						},
-						{
-							"keytime" : 633.333313,
-							"rotation" : [0.162340,0.098583,0.072262,0.979135]
-						}
-					]
-				}
-			]
-		}
-	]
-}
\ No newline at end of file
diff --git a/tests/gdx-tests-android/assets/data/g3d/simple.json b/tests/gdx-tests-android/assets/data/g3d/simple.json
deleted file mode 100755
index b2af015..0000000
--- a/tests/gdx-tests-android/assets/data/g3d/simple.json
+++ /dev/null
@@ -1,23 +0,0 @@
-{
-	"version": "1.0",
-	"meshes": [
-		{
-			"id": "triangle",
-			"attributes": ["position", "normal", "uv", "uv"],
-			"vertices": [ -1, -1, 0, 0, 0, -1,   0, 0,   0, 0, 
-						   1, -1, 0, 0, 0, -1,   1, 0,   1, 0,
-						   0,  1, 0, 0, 0, -1, 0.5, 1, 0.5, 1 ],
-			"parts": [
-				{ "id": "tris", "type": "triangle", "indices": [ 0, 1, 2 ] },
-				{ "id": "line", "type": "line", "indices": [ 0, 1 ] },
-				{ "id": "pts", "type": "point", "indices": [0, 1, 2 ] },
-			] 
-		},
-	],
-	
-	"materials": [
-	],
-	
-	"nodes": [
-	]
-}
\ No newline at end of file
diff --git a/tests/gdx-tests-android/assets/data/g3d/teapot.g3db b/tests/gdx-tests-android/assets/data/g3d/teapot.g3db
deleted file mode 100644
index ff00045..0000000
Binary files a/tests/gdx-tests-android/assets/data/g3d/teapot.g3db and /dev/null differ
diff --git a/tests/gdx-tests-android/assets/data/g3d/test.g3dj b/tests/gdx-tests-android/assets/data/g3d/test.g3dj
deleted file mode 100644
index 2d1c792..0000000
--- a/tests/gdx-tests-android/assets/data/g3d/test.g3dj
+++ /dev/null
@@ -1,62 +0,0 @@
-{
-	"version" : "1.0",
-	"meshes" : [
-		{
-			"id" : "cube_Mesh",
-			"attributes" : [
-				"POSITION","NORMAL","TEXCOORD0"
-			],
-			"vertices" : [
-				0.0,-2.259414,-2.259414,0.0,0.0,-1.0,0.582997,0.541863,-5.314565,-2.259414,-2.259414,0.0,0.0,-1.0,0.582997,0.828895,0.0,2.259414,-2.259414,0.0,0.0,-1.0,0.827052,0.541863,-5.314565,2.259414,-2.259414,0.0,0.0,-1.0,0.827052,0.828895,0.0,-2.259414,2.259414,0.0,-1.0,0.0,0.253258,0.291934,-5.314565,-2.259414,2.259414,0.0,-1.0,0.0,0.253258,0.578966,-5.314565,-2.259414,-2.259414,0.0,-1.0,0.0,0.497313,0.578966,0.0,-2.259414,-2.259414,0.0,-1.0,0.0,0.497313,0.291934,-5.314565,2.259414,2.259414,-1.0,0.0,0.0,0.753117,0.249092,-5.314565,-2.259414,-2.259414,-1.0,0.0,0.0,0.997172,0.005037,-5.314565,-2.259414,2.259414,-1.0,0.0,0.0,0.753117,0.005037,-5.314565,2.259414,-2.259414,-1.0,0.0,0.0,0.997172,0.249092,5.314565,-2.259414,-2.259414,0.0,0.0,-1.0,0.582997,0.254831,5.314565,2.259414,-2.259414,0.0,0.0,-1.0,0.827052,0.254831,5.314565,-2.259414,2.259414,0.0,-1.0,0.0,0.253258,0.004902,5.314565,-2.259414,-2.259414,0.0,-1.0,0.0,0.497313,0.004902,5.314565,2.259414,2.259414,1.0,0.0,0.0,0.503187,0.005037,5.314565,-2.259414,2.259414,1.0,0.0,0.0,0.503187,0.249092,5.314565,-2.259414,-2.259414,1.0,0.0,0.0,0.747243,0.249092,5.314565,2.259414,-2.259414,1.0,0.0,0.0,0.747243,0.005037,0.0,2.259414,2.259414,0.0,1.0,0.0,0.003328,0.291934,-5.314565,2.259414,-2.259414,0.0,1.0,0.0,0.247384,0.004902,-5.314565,2.259414,2.259414,0.0,1.0,0.0,0.003328,0.004902,0.0,2.259414,-2.259414,0.0,1.0,0.0,0.247384,0.291934,5.314565,2.259414,2.259414,0.0,1.0,0.0,0.003328,0.578966,5.314565,2.259414,-2.259414,0.0,1.0,0.0,0.247384,0.578966,0.0,2.259414,2.259414,0.0,0.0,1.0,0.290226,0.584705,-5.314565,2.259414,2.259414,0.0,0.0,1.0,0.003194,0.584705,-5.314565,-2.259414,2.259414,0.0,0.0,1.0,0.003194,0.828760,0.0,-2.259414,2.259414,0.0,0.0,1.0,0.290226,0.828760,5.314565,2.259414,2.259414,0.0,0.0,1.0,0.577257,0.584705,5.314565,-2.259414,2.259414,0.0,0.0,1.0,0.577257,0.828760
-			],
-			"parts" : [
-				{
-					"id" : "part0",
-					"type" : "TRIANGLES",
-					"indices" : [
-						0,1,2,1,3,2,4,5,6,4,6,7,8,9,10,9,8,11,12,0,13,0,2,13,14,4,7,14,7,15,16,17,18,16,18,19,20,21,22,21,20,23,24,23,20,23,24,25,26,27,28,26,28,29,30,26,29,30,29,31
-					]
-				}
-			]
-		}
-	],
-	"materials" : [
-		{
-			"id" : "Material_1",
-			"type" : "PHONG",
-			"diffuse" : [0.700000,0.700000,0.700000],
-			"ambient" : [0.300000,0.300000,0.300000],
-			"emissive" : [1.0,1.0,1.0],
-			"opacity" : 0.000000,
-			"specular" : [1.0,1.0,1.0],
-			"shininess" : 50.000000,
-			"textures" : [
-				{
-					"id" : "cube",
-					"filename" : "checkboard.png",
-					"uvtranslation" : [0.0,0.0],
-					"uvscaling" : [1.0,1.0],
-					"type" : "STANDARD"
-				}
-			]
-		}
-	],
-	"nodes" : [
-		{
-			"id" : "cube",
-			"translation" : [0.0,0.0,0.0],
-			"rotation" : [0.0,0.0,0.0,1.0],
-			"scale" : [1.0,1.0,1.0],
-			"mesh" : "cube_Mesh",
-			"materials" : [
-				{
-					"meshpartid" : "part0",
-					"materialid" : "Material_1"
-				}
-			]
-		}
-	],
-	"animations" : [
-		
-	]
-}
\ No newline at end of file
diff --git a/tests/gdx-tests-android/assets/data/maps/tiled/hex/hexes.png b/tests/gdx-tests-android/assets/data/maps/tiled/hex/hexes.png
new file mode 100644
index 0000000..1f9a3cb
Binary files /dev/null and b/tests/gdx-tests-android/assets/data/maps/tiled/hex/hexes.png differ
diff --git a/tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java b/tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
index 8495248..c718240 100644
--- a/tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
+++ b/tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java
@@ -20,19 +20,17 @@ import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
 import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
 import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.tests.AnimationTest;
-import com.badlogic.gdx.tests.BulletTestCollection;
 import com.badlogic.gdx.tests.ETC1Test;
 import com.badlogic.gdx.tests.FullscreenTest;
+import com.badlogic.gdx.tests.GroupTest;
 import com.badlogic.gdx.tests.InputTest;
 import com.badlogic.gdx.tests.SpriteCacheTest;
+import com.badlogic.gdx.tests.StageTest;
 import com.badlogic.gdx.tests.TideMapAssetManagerTest;
 import com.badlogic.gdx.tests.TideMapDirectLoaderTest;
 import com.badlogic.gdx.tests.TiledMapAssetManagerTest;
 import com.badlogic.gdx.tests.TiledMapDirectLoaderTest;
 import com.badlogic.gdx.tests.bench.TiledMapBench;
-import com.badlogic.gdx.tests.g3d.BatchRenderTest;
-import com.badlogic.gdx.tests.g3d.JsonModelLoaderTest;
-import com.badlogic.gdx.tests.g3d.NewModelTest;
 import com.badlogic.gdx.tests.superkoalio.SuperKoalio;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
@@ -40,14 +38,13 @@ import com.badlogic.gdx.utils.SharedLibraryLoader;
 public class LwjglDebugStarter {
 	public static void main (String[] argv) {
 		// this is only here for me to debug native code faster
-		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
-		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
-		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
-		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
-		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
+//		new SharedLibraryLoader("../../extensions/gdx-audio/libs/gdx-audio-natives.jar").load("gdx-audio");
+//		new SharedLibraryLoader("../../extensions/gdx-image/libs/gdx-image-natives.jar").load("gdx-image");
+//		new SharedLibraryLoader("../../extensions/gdx-freetype/libs/gdx-freetype-natives.jar").load("gdx-freetype");
+//		new SharedLibraryLoader("../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar").load("gdx-controllers-desktop");
+//		new SharedLibraryLoader("../../gdx/libs/gdx-natives.jar").load("gdx");
 
-		
-		GdxTest test = new NewModelTest();
+		GdxTest test = new GroupTest();
 		LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 		config.useGL20 = test.needsGL20();
 		new LwjglApplication(test, config);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DCharacterControllerTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DCharacterControllerTest.java
index 5f85238..16caf0c 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DCharacterControllerTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/Box2DCharacterControllerTest.java
@@ -395,7 +395,7 @@ public class Box2DCharacterControllerTest extends GdxTest implements Application
 		public void update (float deltaTime) {
 			dist += dir.len() * deltaTime;
 			if (dist > maxDist) {
-				dir.mul(-1);
+				dir.scl(-1);
 				dist = 0;
 			}
 
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/BulletTestCollection.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/BulletTestCollection.java
index d718b87..2ac9d6c 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/BulletTestCollection.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/BulletTestCollection.java
@@ -24,7 +24,6 @@ import com.badlogic.gdx.Input.Keys;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
-import com.badlogic.gdx.graphics.g3d.utils.CameraInputController;
 import com.badlogic.gdx.input.GestureDetector;
 import com.badlogic.gdx.input.GestureDetector.GestureListener;
 import com.badlogic.gdx.math.Vector2;
@@ -32,7 +31,6 @@ import com.badlogic.gdx.scenes.scene2d.Stage;
 import com.badlogic.gdx.scenes.scene2d.ui.Label;
 import com.badlogic.gdx.scenes.scene2d.utils.Align;
 import com.badlogic.gdx.tests.box2d.Box2DTest;
-import com.badlogic.gdx.tests.bullet.BasicShapesTest;
 import com.badlogic.gdx.tests.bullet.BulletTest;
 import com.badlogic.gdx.tests.bullet.CollisionTest;
 import com.badlogic.gdx.tests.bullet.CollisionWorldTest;
@@ -52,10 +50,10 @@ import com.badlogic.gdx.tests.utils.GdxTest;
 
 /** @author xoppa */
 public class BulletTestCollection extends GdxTest implements InputProcessor, GestureListener {
-	protected final BulletTest[] tests = {new ShootTest(), new BasicShapesTest(), new KinematicTest(), new ConstraintsTest(), 
+	protected final BulletTest[] tests = {new ShootTest(), new KinematicTest(), new ConstraintsTest(), 
 		new MeshShapeTest(), new ConvexHullTest(), new RayCastTest(), new RayPickRagdollTest(), new InternalTickTest(), 
 		new CollisionWorldTest(), new CollisionTest(), new FrustumCullingTest(), new ContactCallbackTest(),
-		new SoftBodyTest()};//, new SoftMeshTest()};
+		new SoftBodyTest(), new SoftMeshTest()};
 	
 	protected int testIndex = 0;
 	
@@ -67,7 +65,6 @@ public class BulletTestCollection extends GdxTest implements InputProcessor, Ges
 	private Label titleLabel;
 	private Label instructLabel;
 	private int loading = 0;
-	private CameraInputController cameraController;
 	
 	@Override
 	public void render () {
@@ -86,12 +83,7 @@ public class BulletTestCollection extends GdxTest implements InputProcessor, Ges
 			tests[testIndex].create();
 		}
 
-		cameraController = new CameraInputController(tests[testIndex].camera);
-		cameraController.activateKey = Keys.CONTROL_LEFT;
-		cameraController.autoUpdate = false;
-		cameraController.forwardTarget = false;
-		cameraController.translateTarget = false;
-		Gdx.input.setInputProcessor(new InputMultiplexer(cameraController, this, new GestureDetector(this)));
+		Gdx.input.setInputProcessor(new InputMultiplexer(this, new GestureDetector(this)));
 		
 		font = new BitmapFont(Gdx.files.internal("data/arial-15.fnt"), false);
 		hud = new Stage(480, 320, true);
@@ -124,7 +116,6 @@ public class BulletTestCollection extends GdxTest implements InputProcessor, Ges
 		testIndex++;
 		if (testIndex >= tests.length) testIndex = 0;
 		tests[testIndex].create();
-		cameraController.camera = tests[testIndex].camera;
 		app.log("TestCollection", "created test '" + tests[testIndex].getClass().getName() + "'");
 		
 		titleLabel.setText(tests[testIndex].getClass().getSimpleName());
@@ -169,7 +160,7 @@ public class BulletTestCollection extends GdxTest implements InputProcessor, Ges
 
 	@Override
 	public boolean needsGL20 () {
-		return true;
+		return false;
 	}
 
 	@Override
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/CullTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/CullTest.java
index 2032da9..a330b51 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/CullTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/CullTest.java
@@ -22,45 +22,31 @@ import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Keys;
 import com.badlogic.gdx.graphics.Camera;
-import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.OrthographicCamera;
-import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.VertexAttributes;
-import com.badlogic.gdx.graphics.VertexAttributes.Usage;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
-import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class CullTest extends GdxTest implements ApplicationListener {
 
 	public boolean needsGL20 () {
-		return true;
+		return false;
 	}
 
-	Model sphere;
+	StillModel sphere;
 	Camera cam;
 	SpriteBatch batch;
-	ModelBatch modelBatch;
 	BitmapFont font;
-	ModelInstance[] instances = new ModelInstance[100];
-	final Vector3 pos = new Vector3();
+	Vector3[] positions = new Vector3[100];
 
 	@Override
 	public void create () {
-		ModelBuilder builder = new ModelBuilder();
-		sphere = builder.createSphere(2f, 2f, 2f, 16, 16, new Material(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE)), Usage.Position | Usage.Normal);
+		sphere =  ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/sphere.obj"));
 		// cam = new PerspectiveCamera(45, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		cam = new OrthographicCamera(45, 45 * (Gdx.graphics.getWidth() / (float)Gdx.graphics.getHeight()));
 
@@ -68,12 +54,10 @@ public class CullTest extends GdxTest implements ApplicationListener {
 		cam.far = 200;
 
 		Random rand = new Random();
-		for (int i = 0; i < instances.length; i++) {
-			pos.set(rand.nextFloat() * 100 - rand.nextFloat() * 100, rand.nextFloat() * 100 - rand.nextFloat()	* 100, rand.nextFloat() * -100 - 3);			
-			instances[i] = new ModelInstance(sphere, pos);
+		for (int i = 0; i < positions.length; i++) {
+			positions[i] = new Vector3(rand.nextFloat() * 100 - rand.nextFloat() * 100, rand.nextFloat() * 100 - rand.nextFloat()
+				* 100, rand.nextFloat() * -100 - 3);
 		}
-		modelBatch = new ModelBatch();
-		
 		batch = new SpriteBatch();
 		font = new BitmapFont();
 		// Gdx.graphics.setVSync(true);
@@ -82,27 +66,28 @@ public class CullTest extends GdxTest implements ApplicationListener {
 
 	@Override
 	public void render () {
-		GL20 gl = Gdx.gl20;
+		GL10 gl = Gdx.gl10;
 
 		gl.glClearColor(0, 0, 0, 0);
 		gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
 		gl.glEnable(GL10.GL_DEPTH_TEST);
 
 		cam.update();
-		modelBatch.begin(cam);
+		cam.apply(gl);
 
 		int visible = 0;
-		for (int i = 0; i < instances.length; i++) {
-			instances[i].transform.getTranslation(pos);
-			if (cam.frustum.sphereInFrustum(pos, 1)) {
-				((ColorAttribute)instances[i].materials.get(0).get(ColorAttribute.Diffuse)).color.set(Color.WHITE);
+		for (int i = 0; i < positions.length; i++) {
+			if (cam.frustum.sphereInFrustum(positions[i], 1)) {
+				gl.glColor4f(1, 1, 1, 1);
 				visible++;
 			} else {
-				((ColorAttribute)instances[i].materials.get(0).get(ColorAttribute.Diffuse)).color.set(Color.RED);
+				gl.glColor4f(1, 0, 0, 1);
 			}
-			modelBatch.render(instances[i]);
+			gl.glPushMatrix();
+			gl.glTranslatef(positions[i].x, positions[i].y, positions[i].z);
+			sphere.render();
+			gl.glPopMatrix();
 		}
-		modelBatch.end();
 
 		if (Gdx.input.isKeyPressed(Keys.A)) cam.rotate(20 * Gdx.graphics.getDeltaTime(), 0, 1, 0);
 		if (Gdx.input.isKeyPressed(Keys.D)) cam.rotate(-20 * Gdx.graphics.getDeltaTime(), 0, 1, 0);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/DeviceInfoTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/DeviceInfoTest.java
deleted file mode 100644
index 2b7611f..0000000
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/DeviceInfoTest.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.badlogic.gdx.tests;
-
-//import com.badlogic.gdx.DeviceInfo;
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.tests.utils.GdxTest;
-import com.badlogic.gdx.utils.IntMap;
-
-public class DeviceInfoTest extends GdxTest {
-
-	@Override
-	public boolean needsGL20 () {
-		return false;
-	}
-
-	@Override
-	public void create () {
-		/*DeviceInfo info = Gdx.app.getDeviceInfo();
-		int[] keys = info.keys();
-		int cnt = 0;
-		for (int i = 0; i < keys.length; i++) {
-			int key = keys[i];
-			Gdx.app.log("DeviceInfo", "key = "+key+"; value = "+info.value(key));
-			cnt++;
-		}
-		Gdx.app.log("DeviceInfo", "Total of "+cnt+" values");*/
-	}
-
-	@Override
-	public void render () {
-	}
-}
\ No newline at end of file
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/EdgeDetectionTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/EdgeDetectionTest.java
index af274f4..e22b579 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/EdgeDetectionTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/EdgeDetectionTest.java
@@ -26,11 +26,8 @@ import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
-import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
+import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
 import com.badlogic.gdx.graphics.glutils.FrameBuffer;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Matrix4;
@@ -43,10 +40,8 @@ public class EdgeDetectionTest extends GdxTest {
 	}
 
 	FPSLogger logger;
-	//ShaderProgram shader;
-	Model scene;
-	ModelInstance sceneInstance;
-	ModelBatch modelBatch;
+	ShaderProgram shader;
+	StillModel mesh;
 	FrameBuffer fbo;
 	PerspectiveCamera cam;
 	Matrix4 matrix = new Matrix4();
@@ -61,21 +56,18 @@ public class EdgeDetectionTest extends GdxTest {
 
 	public void create () {
 		ShaderProgram.pedantic = false;
-		/*shader = new ShaderProgram(Gdx.files.internal("data/shaders/default.vert").readString(), Gdx.files.internal(
+		shader = new ShaderProgram(Gdx.files.internal("data/shaders/default.vert").readString(), Gdx.files.internal(
 			"data/shaders/depthtocolor.frag").readString());
 		if (!shader.isCompiled()) {
 			Gdx.app.log("EdgeDetectionTest", "couldn't compile scene shader: " + shader.getLog());
-		}*/
+		}
 		batchShader = new ShaderProgram(Gdx.files.internal("data/shaders/batch.vert").readString(), Gdx.files.internal(
 			"data/shaders/convolution.frag").readString());
 		if (!batchShader.isCompiled()) {
 			Gdx.app.log("EdgeDetectionTest", "couldn't compile post-processing shader: " + batchShader.getLog());
 		}
 
-		ObjLoader objLoader = new ObjLoader();
-		scene = objLoader.loadObj(Gdx.files.internal("data/scene.obj"));
-		sceneInstance = new ModelInstance(scene);
-		modelBatch = new ModelBatch();		
+		mesh =  ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/scene.obj"));
 		fbo = new FrameBuffer(Format.RGB565, Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), true);
 		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		cam.position.set(0, 0, 10);
@@ -91,8 +83,9 @@ public class EdgeDetectionTest extends GdxTest {
 
 	@Override
 	public void dispose () {
+		shader.dispose();
 		batchShader.dispose();
-		scene.dispose();
+		mesh.dispose();
 		fbo.dispose();
 		batch.dispose();
 	}
@@ -119,9 +112,11 @@ public class EdgeDetectionTest extends GdxTest {
 		fbo.begin();
 		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
 		Gdx.gl.glEnable(GL20.GL_DEPTH_TEST);
-		modelBatch.begin(cam);
-		modelBatch.render(sceneInstance);
-		modelBatch.end();
+		shader.begin();
+		shader.setUniformMatrix("u_projView", cam.combined);
+		shader.setUniformf("u_far", cam.far);
+		mesh.render(shader);
+		shader.end();
 		fbo.end();
 
 		batch.begin();
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/FramebufferToTextureTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/FramebufferToTextureTest.java
index 9c65911..dd692ac 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/FramebufferToTextureTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/FramebufferToTextureTest.java
@@ -25,13 +25,8 @@ import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
-import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
-import com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor;
-import com.badlogic.gdx.math.Vector3;
+import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
 import com.badlogic.gdx.tests.utils.GdxTest;
 import com.badlogic.gdx.utils.ScreenUtils;
 
@@ -44,9 +39,7 @@ public class FramebufferToTextureTest extends GdxTest {
 
 	TextureRegion fbTexture;
 	Texture texture;
-	Model mesh;
-	ModelInstance modelInstance;
-	ModelBatch modelBatch;
+	StillModel mesh;
 	PerspectiveCamera cam;
 	SpriteBatch batch;
 	BitmapFont font;
@@ -55,13 +48,9 @@ public class FramebufferToTextureTest extends GdxTest {
 
 	@Override
 	public void create () {
+		mesh =  ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/cube.obj"));
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"), true);
 		texture.setFilter(TextureFilter.MipMap, TextureFilter.Linear);
-		ObjLoader objLoader = new ObjLoader();
-		mesh =  objLoader.loadObj(Gdx.files.internal("data/cube.obj"));
-		mesh.materials.get(0).set(new TextureAttribute(TextureAttribute.Diffuse, texture));
-		modelInstance = new ModelInstance(mesh);
-		modelBatch = new ModelBatch();
 
 		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		cam.position.set(3, 3, 3);
@@ -81,11 +70,14 @@ public class FramebufferToTextureTest extends GdxTest {
 		gl.glEnable(GL10.GL_TEXTURE_2D);
 
 		cam.update();
+		cam.apply(gl);
 
-		modelInstance.transform.rotate(Vector3.Y, 45 * Gdx.graphics.getDeltaTime());
-		modelBatch.begin(cam);
-		modelBatch.render(modelInstance);
-		modelBatch.end();
+		angle += 45 * Gdx.graphics.getDeltaTime();
+		gl.glPushMatrix();
+		gl.glRotatef(angle, 0, 1, 0);
+		texture.bind();
+		mesh.render();
+		gl.glPopMatrix();
 
 		if (Gdx.input.justTouched() || fbTexture == null) {
 			if (fbTexture != null) fbTexture.getTexture().dispose();
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/FrustumTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/FrustumTest.java
index 0a53390..a6a6049 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/FrustumTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/FrustumTest.java
@@ -23,10 +23,8 @@ import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
+import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
 import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Frustum;
@@ -45,15 +43,13 @@ public class FrustumTest extends GdxTest {
 	OrthographicCamera camera3;
 	PerspectiveCamController controller;
 	Mesh plane;
-	Model sphere;
-	ModelInstance sphereInstance;
-	ModelBatch modelBatch;
+	StillModel sphere;
 	ImmediateModeRenderer10 renderer;
 
 	@Override
 	public void create () {
 		camera = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		camera.position.set(0, 2, 3).nor().mul(10);
+		camera.position.set(0, 2, 3).nor().scl(10);
 		camera.lookAt(0, 0, 0);
 
 		camera2 = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
@@ -76,10 +72,7 @@ public class FrustumTest extends GdxTest {
 
 		plane.setVertices(new float[] {-10, -1, 10, 10, -1, 10, 10, -1, -10, -10, -1, -10});
 		plane.setIndices(new short[] {3, 2, 1, 1, 0, 3});
-		ObjLoader objLoader = new ObjLoader();
-		sphere =  objLoader.loadObj(Gdx.files.internal("data/sphere.obj"));
-		sphereInstance = new ModelInstance(sphere);
-		modelBatch = new ModelBatch();
+		sphere =  ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/sphere.obj"));
 		renderer = new ImmediateModeRenderer10();
 	}
 
@@ -92,14 +85,11 @@ public class FrustumTest extends GdxTest {
 		camera2.update();
 		camera3.update();
 		camera.apply(Gdx.gl10);
-		
+
 		Gdx.gl10.glColor4f(1, 0, 0, 1);
 		plane.render(GL10.GL_TRIANGLE_FAN);
 		Gdx.gl10.glColor4f(0, 1, 0, 1);
-		
-		modelBatch.begin(camera);
-		modelBatch.render(sphereInstance);
-		modelBatch.end();
+		sphere.render();
 
 		renderFrustum(renderer, camera2.frustum);
 		renderFrustum(renderer, camera3.frustum);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/GroupTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/GroupTest.java
index dd4f55f..1e72c89 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/GroupTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/GroupTest.java
@@ -17,54 +17,84 @@
 package com.badlogic.gdx.tests;
 
 import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
+import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
+import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
+import com.badlogic.gdx.math.MathUtils;
+import com.badlogic.gdx.math.Vector2;
+import com.badlogic.gdx.scenes.scene2d.Actor;
 import com.badlogic.gdx.scenes.scene2d.Group;
+import com.badlogic.gdx.scenes.scene2d.InputEvent;
+import com.badlogic.gdx.scenes.scene2d.InputListener;
 import com.badlogic.gdx.scenes.scene2d.Stage;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
+import javax.xml.stream.events.EndDocument;
+
+/** This tests both {@link Actor#parentToLocalCoordinates(Vector2)} and {@link Actor#localToParentCoordinates(Vector2)}. */
 public class GroupTest extends GdxTest {
 	Stage stage;
+	SpriteBatch batch;
+	BitmapFont font;
+	ShapeRenderer renderer;
 	TextureRegion region;
+	TestGroup group1;
+	TestGroup group2;
 
 	public void create () {
+		batch = new SpriteBatch();
+		font = new BitmapFont();
+		renderer = new ShapeRenderer();
+
 		stage = new Stage(0, 0, false);
 		Gdx.input.setInputProcessor(stage);
 
 		region = new TextureRegion(new Texture(Gdx.files.internal("data/group-debug.png")));
 
-		Group group1 = new ImageGroup();
-		group1.setRotation(30);
+		group2 = new TestGroup("group2");
+		group2.setTransform(true);
+		stage.addActor(group2);
+
+		group1 = new TestGroup("group1");
 		group1.setTransform(true);
-		group1.setBounds(50, 50, 150, 150);
-		stage.addActor(group1);
-
-		Group group2 = new ImageGroup();
-		group2.setTransform(false);
-		group2.setBounds(50, 50, 50, 50);
-		group1.addActor(group2);
-
-		Group group3 = new ImageGroup();
-		group3.setTransform(true);
-		group3.setBounds(10, 10, 35, 35);
-		group3.setOriginX(100);
-		group3.setRotation(45);
-		group2.addActor(group3);
-
-		Group group4 = new ImageGroup();
-		group4.setTransform(false);
-		group4.setBounds(5, 5, 25, 25);
-		group4.setOriginX(100);
-		group4.setRotation(45);
-		group3.addActor(group4);
+		group2.addActor(group1);
 	}
 
 	public void render () {
+		// Vary the transforms to exercise the different code paths.
+		group2.setBounds(150, 150, 150, 150);
+		group2.setRotation(45);
+		group2.setOrigin(150, 150);
+		group2.setScale(1.25f);
+
+		group1.setBounds(150, 150, 50, 50);
+		group1.setRotation(45);
+		group1.setOrigin(25, 25);
+		group1.setScale(1.3f);
+
 		Gdx.gl.glClearColor(0, 0, 0, 1);
 		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 		stage.draw();
+
+		renderer.setProjectionMatrix(batch.getProjectionMatrix());
+		renderer.begin(ShapeType.Filled);
+		if (MathUtils.randomBoolean()) { // So we see when they are drawn on top of each other (which should be always).
+			renderer.setColor(Color.GREEN);
+			renderer.circle(group1.toScreenCoordinates.x, Gdx.graphics.getHeight() - group1.toScreenCoordinates.y, 5);
+			renderer.setColor(Color.RED);
+			renderer.circle(group1.localToParentCoordinates.x, Gdx.graphics.getHeight() - group1.localToParentCoordinates.y, 5);
+		} else {
+			renderer.setColor(Color.RED);
+			renderer.circle(group1.localToParentCoordinates.x, Gdx.graphics.getHeight() - group1.localToParentCoordinates.y, 5);
+			renderer.setColor(Color.GREEN);
+			renderer.circle(group1.toScreenCoordinates.x, Gdx.graphics.getHeight() - group1.toScreenCoordinates.y, 5);
+		}
+		renderer.end();
 	}
 
 	public void resize (int width, int height) {
@@ -75,8 +105,38 @@ public class GroupTest extends GdxTest {
 		return false;
 	}
 
-	class ImageGroup extends Group {
+	class TestGroup extends Group {
+		private String name;
+		Vector2 toScreenCoordinates = new Vector2();
+		Vector2 localToParentCoordinates = new Vector2();
+		float testX = 25;
+		float testY = 25;
+
+		public TestGroup (String name) {
+			this.name = name;
+
+			addListener(new InputListener() {
+				public boolean mouseMoved (InputEvent event, float x, float y) {
+					// These come from Actor#parentToLocalCoordinates.
+					testX = x;
+					testY = y;
+					return true;
+				}
+			});
+		}
+
 		public void draw (SpriteBatch batch, float parentAlpha) {
+			// Use Stage#toScreenCoordinates, which we know is correct.
+			toScreenCoordinates.set(testX, testY).sub(getOriginX(), getOriginY()).scl(getScaleX(), getScaleY())
+				.rotate(getRotation()).add(getOriginX(), getOriginY()).add(getX(), getY());
+			getStage().toScreenCoordinates(toScreenCoordinates, batch.getTransformMatrix());
+
+			// Do the same as toScreenCoordinates via Actor#localToParentCoordinates.
+			localToAscendantCoordinates(null, localToParentCoordinates.set(testX, testY));
+			getStage().stageToScreenCoordinates(localToParentCoordinates);
+
+			// System.out.println(name + " " + toScreenCoordinates + " " + localToParentCoordinates);
+
 			batch.setColor(getColor());
 			batch.draw(region, getX(), getY(), getOriginX(), getOriginY(), getWidth(), getHeight(), getScaleX(), getScaleY(),
 				getRotation());
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/HexagonalTiledMapTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/HexagonalTiledMapTest.java
new file mode 100644
index 0000000..8a68f2a
--- /dev/null
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/HexagonalTiledMapTest.java
@@ -0,0 +1,95 @@
+/*******************************************************************************
+ * Copyright 2013 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.tests;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.OrthographicCamera;
+import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.g2d.TextureRegion;
+import com.badlogic.gdx.maps.MapLayers;
+import com.badlogic.gdx.maps.tiled.TiledMap;
+import com.badlogic.gdx.maps.tiled.TiledMapTile;
+import com.badlogic.gdx.maps.tiled.TiledMapTileLayer;
+import com.badlogic.gdx.maps.tiled.TiledMapTileLayer.Cell;
+import com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer;
+import com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile;
+import com.badlogic.gdx.tests.utils.GdxTest;
+import com.badlogic.gdx.tests.utils.OrthoCamController;
+
+public class HexagonalTiledMapTest extends GdxTest {
+		TiledMap map;
+		OrthographicCamera camera;
+		OrthoCamController cameraController;
+		HexagonalTiledMapRenderer renderer;
+		Texture hexture;
+		
+		@Override
+		public void create() {
+			super.create();
+			float w = Gdx.graphics.getWidth();
+			float h = Gdx.graphics.getHeight();
+			
+			camera = new OrthographicCamera();
+			camera.setToOrtho(false, (w / h) * 480, 480);
+			camera.update();
+			
+			cameraController = new OrthoCamController(camera);
+			Gdx.input.setInputProcessor(cameraController);
+			
+			hexture = new Texture(Gdx.files.internal("data/maps/tiled/hex/hexes.png"));
+			TextureRegion[][] hexes = TextureRegion.split(hexture, 112, 97);
+			map = new TiledMap();
+			MapLayers layers = map.getLayers();
+			TiledMapTile[] tiles = new TiledMapTile[3];
+			tiles[0] = new StaticTiledMapTile(new TextureRegion(hexes[0][0]));
+			tiles[1] = new StaticTiledMapTile(new TextureRegion(hexes[0][1]));
+			tiles[2] = new StaticTiledMapTile(new TextureRegion(hexes[1][0]));
+			
+			for (int l = 0; l < 1; l++) {
+				TiledMapTileLayer layer = new TiledMapTileLayer(45, 30, 112, 97);
+				for (int y = 0; y < 30; y++) {
+					for (int x = 0; x < 45; x++) {
+						int id = (int)(Math.random() * 3);						
+						Cell cell = new Cell();
+						cell.setTile(tiles[id]);
+						layer.setCell(x, y, cell);
+					}	
+				}
+				layers.add(layer);						
+			}
+			
+			renderer = new HexagonalTiledMapRenderer(map);
+		}
+
+		@Override
+		public void render() {
+			Gdx.gl.glClearColor(0.25f, 0.25f, 0.25f, 1f);
+			Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
+			camera.update();
+			renderer.setView(camera);
+			renderer.render();
+		}
+		
+		@Override
+		public void dispose () {
+			renderer.dispose();
+			hexture.dispose();
+			map.dispose();
+		}
+		
+}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/InterpolationTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/InterpolationTest.java
index fe1dd2e..46875bd 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/InterpolationTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/InterpolationTest.java
@@ -119,7 +119,7 @@ public class InterpolationTest extends GdxTest {
 	Vector2 getCurrentPosition () {
 		temp.set(targetPosition);
 		temp.sub(position);
-		temp.mul(getInterpolation().apply(Math.min(1, timer / 1f)));
+		temp.scl(getInterpolation().apply(Math.min(1, timer / 1f)));
 		temp.add(position);
 		return temp;
 	}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/InverseKinematicsTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/InverseKinematicsTest.java
index 80dcb8a..9cb9f28 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/InverseKinematicsTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/InverseKinematicsTest.java
@@ -117,12 +117,12 @@ public class InverseKinematicsTest extends GdxTest {
 			diff.set(endPoint.x, endPoint.y).sub(bones[i + 1].position.x, bones[i + 1].position.y);
 			diff.add(0, gravity);
 			diff.add(bones[i + 1].inertia.x, bones[i + 1].inertia.y);
-			diff.nor().mul(bones[i + 1].len);
+			diff.nor().scl(bones[i + 1].len);
 
 			float x = endPoint.x - diff.x;
 			float y = endPoint.y - diff.y;
 			float delta = Gdx.graphics.getDeltaTime();
-			bones[i + 1].inertia.add((bones[i + 1].position.x - x) * delta, (bones[i + 1].position.y - y) * delta, 0).mul(0.99f);
+			bones[i + 1].inertia.add((bones[i + 1].position.x - x) * delta, (bones[i + 1].position.y - y) * delta, 0).scl(0.99f);
 			bones[i + 1].position.set(x, y, 0);
 		}
 	}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/IsoCamTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/IsoCamTest.java
index 0d63013..8b33eb8 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/IsoCamTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/IsoCamTest.java
@@ -47,7 +47,7 @@ public class IsoCamTest extends GdxTest {
 		float pixelsOnX = Gdx.graphics.getWidth() / unitsOnX;
 		float unitsOnY = Gdx.graphics.getHeight() / pixelsOnX;
 		cam = new OrthographicCamera(unitsOnX, unitsOnY, 25);
-		cam.position.mul(30);
+		cam.position.scl(30);
 		cam.near = 1;
 		cam.far = 1000;
 		matrix.setToRotation(new Vector3(1, 0, 0), 90);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/MaterialTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/MaterialTest.java
index 9b76125..5cf5834 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/MaterialTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/MaterialTest.java
@@ -22,24 +22,19 @@ import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
+import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
 import com.badlogic.gdx.graphics.g3d.materials.BlendingAttribute;
 import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
 import com.badlogic.gdx.graphics.g3d.materials.Material;
 import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
-import com.badlogic.gdx.math.Vector3;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
 public class MaterialTest extends GdxTest {
 	
 	float angleY = 0;
 	
-	Model model;
-	ModelInstance modelInstance;
-	ModelBatch modelBatch;
+	StillModel model;
 	
 	TextureAttribute textureAttribute;
 	ColorAttribute colorAttribute;
@@ -53,22 +48,19 @@ public class MaterialTest extends GdxTest {
 
 	@Override
 	public void create () {
-		ObjLoader objLoader = new ObjLoader();
-		model =  objLoader.loadObj(Gdx.files.internal("data/cube.obj"));
+		model =  ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/cube.obj"));
 		
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"), true);
 		
 		// Create material attributes. Each material can contain x-number of attributes.
-		textureAttribute = new TextureAttribute(TextureAttribute.Diffuse, texture);
-		colorAttribute = new ColorAttribute(ColorAttribute.Diffuse, Color.ORANGE);
-		blendingAttribute = new BlendingAttribute(GL10.GL_ONE, GL10.GL_ONE);
+		textureAttribute = new TextureAttribute(texture, 0, "Badlogic");
+		colorAttribute = new ColorAttribute(Color.ORANGE, "Orange");
+		blendingAttribute = new BlendingAttribute("Additive", GL10.GL_ONE, GL10.GL_ONE);
 
-		modelInstance = new ModelInstance(model);
-		
-		material = modelInstance.materials.get(0);
-		material.clear();
-		
-		modelBatch = new ModelBatch();
+		// Assign material to model. If you pass an Material[] into setMaterials() it'll be assigned to 
+		// SubMeshes accordingly.
+		material = new Material();
+		model.setMaterial(material);
 		
 		camera = new PerspectiveCamera(45, 4, 4);
 		camera.position.set(3, 3, 3);
@@ -84,25 +76,46 @@ public class MaterialTest extends GdxTest {
 		gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
 		
+		if(material.getNumberOfAttributes() == 1)
+			gl.glEnable(GL10.GL_TEXTURE_2D);
+		
+		if(material.getNumberOfAttributes() == 3){
+			gl.glDisable(GL10.GL_DEPTH_TEST);
+			gl.glEnable(GL10.GL_BLEND);
+		}
+		else
+			gl.glEnable(GL10.GL_DEPTH_TEST);
+		
 		camera.update();
-
-		modelInstance.transform.rotate(Vector3.Y, 30 * Gdx.graphics.getDeltaTime());
-		modelBatch.begin(camera);
-		modelBatch.render(modelInstance);
-		modelBatch.end();
+		camera.apply(gl);
+		
+		gl.glMatrixMode(GL10.GL_MODELVIEW);
+		angleY += 30 * Gdx.graphics.getDeltaTime();
+		gl.glRotatef(angleY, 0, 1, 0);
+		
+		// That's it. Materials are bound automatically on render
+		model.render();
 	}
 
 	@Override
 	public boolean touchUp (int screenX, int screenY, int pointer, int button) {
 		
-		if(!material.has(TextureAttribute.Diffuse))
-			material.set(textureAttribute);
-		else if(!material.has(ColorAttribute.Diffuse))
-			material.set(colorAttribute);
-		else if(!material.has(BlendingAttribute.Type))
-			material.set(blendingAttribute);
-		else
-			material.clear();
+		if(material.getNumberOfAttributes() == 0)
+			material.addAttribute(textureAttribute);
+		else if(material.getNumberOfAttributes() == 1)
+			material.addAttribute(colorAttribute);
+		else if(material.getNumberOfAttributes() == 2)
+			material.addAttribute(blendingAttribute);
+		else {
+			GL10 gl = Gdx.gl10;
+			
+			// Reset state
+			gl.glColor4f(1f, 1f, 1f, 1f);
+			gl.glDisable(GL10.GL_TEXTURE_2D);
+			gl.glDisable(GL10.GL_BLEND);
+			
+			material.clearAttributes();
+		}
 		
 		return super.touchUp(screenX, screenY, pointer, button);
 	}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/ObjTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/ObjTest.java
index d54b2d0..70694c1 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/ObjTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/ObjTest.java
@@ -22,17 +22,14 @@ import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
+import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
 import com.badlogic.gdx.math.collision.BoundingBox;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
-@Deprecated
 public class ObjTest extends GdxTest implements InputProcessor {
 	PerspectiveCamera cam;
-	Model mesh;
+	StillModel mesh;
 	Texture texture;
 	float angleY = 0;
 	float angleX = 0;
@@ -43,8 +40,7 @@ public class ObjTest extends GdxTest implements InputProcessor {
 
 	@Override
 	public void create () {
-		ObjLoader objLoader = new ObjLoader();
-		mesh =  objLoader.loadObj(Gdx.files.internal("data/cube.obj"));
+		mesh =  ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/cube.obj"));
 		
 		BoundingBox bbox = new BoundingBox();
 		mesh.getBoundingBox(bbox);
@@ -85,7 +81,7 @@ public class ObjTest extends GdxTest implements InputProcessor {
 		gl.glRotatef(angleY, 0, 1, 0);
 		gl.glRotatef(angleX, 1, 0, 0);
 		texture.bind();
-		mesh.meshes.get(0).render(GL10.GL_TRIANGLES);
+		mesh.render();
 	}
 
 	@Override
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/PathTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/PathTest.java
index 82af216..0023504 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/PathTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/PathTest.java
@@ -111,7 +111,7 @@ public class PathTest extends GdxTest {
 	}
 	
 	private void touch(int x, int y) {
-		t = paths.get(currentPath).locate(tmpV.set(x, Gdx.graphics.getHeight()-y));
+		t = paths.get(currentPath).approximate(tmpV.set(x, Gdx.graphics.getHeight()-y));
 		paths.get(currentPath).valueAt(tmpV, t);
 		obj.setPosition(tmpV.x, tmpV.y);
 		wait = 0.2f;		
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/PickingTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/PickingTest.java
index 80d314b..ac81844 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/PickingTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/PickingTest.java
@@ -21,16 +21,12 @@ import java.util.Random;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Keys;
 import com.badlogic.gdx.graphics.Camera;
-import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
+import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
 import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10;
 import com.badlogic.gdx.math.Intersector;
 import com.badlogic.gdx.math.Vector3;
@@ -49,35 +45,30 @@ public class PickingTest extends GdxTest {
 	static final int VP_Y = BORDER * 2;
 	static int VP_WIDTH;
 	static int VP_HEIGHT;
-	Model sphere;
+	StillModel sphere;
 	Camera cam;
-	ModelInstance[] instances = new ModelInstance[100];
-	ModelBatch modelBatch;
+	Vector3[] positions = new Vector3[100];
 	ImmediateModeRenderer10 renderer;
 	SpriteBatch batch;
 	Texture logo;
-	Vector3 tempVector = new Vector3();
 
 	@Override
 	public void create () {
 		VP_WIDTH = Gdx.graphics.getWidth() - 4 * BORDER;
 		VP_HEIGHT = Gdx.graphics.getHeight() - 4 * BORDER;
-		ObjLoader objLoader = new ObjLoader();
-		sphere = objLoader.loadObj(Gdx.files.internal("data/sphere.obj"));
-		sphere.materials.get(0).set(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE));
+		sphere = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/sphere.obj"));
 		cam = new PerspectiveCamera(45, VP_WIDTH, VP_HEIGHT);
 // cam = new OrthographicCamera(10, 10);
 		cam.far = 200;
 		batch = new SpriteBatch();
 		logo = new Texture(Gdx.files.internal("data/badlogicsmall.jpg"));
 		Random rand = new Random(10);
-		for (int i = 0; i < instances.length; i++) {
-			instances[i] = new ModelInstance(sphere, rand.nextFloat() * 100 - rand.nextFloat() * 100, 
-				rand.nextFloat() * 100 - rand.nextFloat() * 100, rand.nextFloat() * 100 - rand.nextFloat() * 100);
+		for (int i = 0; i < positions.length; i++) {
+			positions[i] = new Vector3(rand.nextFloat() * 100 - rand.nextFloat() * 100, rand.nextFloat() * 100 - rand.nextFloat()
+				* 100, rand.nextFloat() * 100 - rand.nextFloat() * 100);
 		}
-		instances[0].transform.setToTranslation(0, 0, -10);
+		positions[0].set(0, 0, -10);
 		renderer = new ImmediateModeRenderer10();
-		modelBatch = new ModelBatch();
 	}
 
 	Vector3 intersection = new Vector3();
@@ -91,6 +82,7 @@ public class PickingTest extends GdxTest {
 		gl.glEnable(GL10.GL_DEPTH_TEST);
 
 		cam.update();
+		cam.apply(gl);
 		gl.glViewport(VP_X, VP_Y, VP_WIDTH, VP_HEIGHT);
 
 		Ray pickRay = null;
@@ -100,18 +92,18 @@ public class PickingTest extends GdxTest {
 		}
 
 		boolean intersected = false;
-		modelBatch.begin(cam);
-		for (int i = 0; i < instances.length; i++) {
-			instances[i].transform.getTranslation(tempVector);
-			if (pickRay != null && Intersector.intersectRaySphere(pickRay, tempVector, 1, intersection)) {
-				((ColorAttribute)instances[i].materials.get(0).get(ColorAttribute.Diffuse)).color.set(Color.RED);
+		for (int i = 0; i < positions.length; i++) {
+			if (pickRay != null && Intersector.intersectRaySphere(pickRay, positions[i], 1, intersection)) {
+				gl.glColor4f(1, 0, 0, 1);
 				intersected = true;
 			} else {
-				((ColorAttribute)instances[i].materials.get(0).get(ColorAttribute.Diffuse)).color.set(Color.WHITE);
+				gl.glColor4f(1, 1, 1, 1);
 			}
-			modelBatch.render(instances[i]);
+			gl.glPushMatrix();
+			gl.glTranslatef(positions[i].x, positions[i].y, positions[i].z);
+			sphere.render();
+			gl.glPopMatrix();
 		}
-		modelBatch.end();
 
 		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		batch.begin();
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectTest.java
index b5bbcb6..0c33ef4 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectTest.java
@@ -21,18 +21,14 @@ import java.util.Random;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input.Keys;
 import com.badlogic.gdx.graphics.Camera;
-import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
+import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.tests.utils.GdxTest;
 
@@ -43,31 +39,27 @@ public class ProjectTest extends GdxTest {
 		return false;
 	}
 
-	Model sphere;
+	StillModel sphere;
 	Camera cam;
 	SpriteBatch batch;
 	BitmapFont font;
-	ModelInstance[] instances = new ModelInstance[100];
-	ModelBatch modelBatch;
+	Vector3[] positions = new Vector3[100];
 	Vector3 tmp = new Vector3();
 	TextureRegion logo;
 
 	@Override
 	public void create () {
-		ObjLoader objLoader = new ObjLoader();
-		sphere = objLoader.loadObj(Gdx.files.internal("data/sphere.obj"));
-		sphere.materials.get(0).set(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE));
+		sphere = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/sphere.obj"));
 		cam = new PerspectiveCamera(45, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		cam.far = 200;
 		Random rand = new Random();
-		for (int i = 0; i < instances.length; i++) {
-			instances[i] = new ModelInstance(sphere, rand.nextFloat() * 100 - rand.nextFloat() * 100, 
-				rand.nextFloat() * 100 - rand.nextFloat() * 100, rand.nextFloat() * -100 - 3);
+		for (int i = 0; i < positions.length; i++) {
+			positions[i] = new Vector3(rand.nextFloat() * 100 - rand.nextFloat() * 100, rand.nextFloat() * 100 - rand.nextFloat()
+				* 100, rand.nextFloat() * -100 - 3);
 		}
 		batch = new SpriteBatch();
 		font = new BitmapFont();
 		logo = new TextureRegion(new Texture(Gdx.files.internal("data/badlogicsmall.jpg")));
-		modelBatch = new ModelBatch();
 	}
 
 	@Override
@@ -78,29 +70,29 @@ public class ProjectTest extends GdxTest {
 		gl.glEnable(GL10.GL_DEPTH_TEST);
 
 		cam.update();
-		
-		modelBatch.begin(cam);
+		cam.apply(gl);
 
 		int visible = 0;
-		for (int i = 0; i < instances.length; i++) {
-			instances[i].transform.getTranslation(tmp);
-			if (cam.frustum.sphereInFrustum(tmp, 1)) {
-				((ColorAttribute)instances[i].materials.get(0).get(ColorAttribute.Diffuse)).color.set(Color.WHITE);
+		for (int i = 0; i < positions.length; i++) {
+			if (cam.frustum.sphereInFrustum(positions[i], 1)) {
+				gl.glColor4f(1, 1, 1, 1);
 				visible++;
 			} else {
-				((ColorAttribute)instances[i].materials.get(0).get(ColorAttribute.Diffuse)).color.set(Color.RED);
+				gl.glColor4f(1, 0, 0, 1);
 			}
-			modelBatch.render(instances[i]);
+			gl.glPushMatrix();
+			gl.glTranslatef(positions[i].x, positions[i].y, positions[i].z);
+			sphere.render();
+			gl.glPopMatrix();
 		}
-		modelBatch.end();
 
 		if (Gdx.input.isKeyPressed(Keys.A)) cam.rotate(20 * Gdx.graphics.getDeltaTime(), 0, 1, 0);
 		if (Gdx.input.isKeyPressed(Keys.D)) cam.rotate(-20 * Gdx.graphics.getDeltaTime(), 0, 1, 0);
 
 		gl.glDisable(GL10.GL_DEPTH_TEST);
 		batch.begin();
-		for (int i = 0; i < instances.length; i++) {
-			instances[i].transform.getTranslation(tmp);
+		for (int i = 0; i < positions.length; i++) {
+			tmp.set(positions[i]);
 			cam.project(tmp);
 			if (tmp.z < 0) continue;
 			batch.draw(logo, tmp.x, tmp.y);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java
index bb3f48a..9774d5c 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/ProjectiveTextureTest.java
@@ -27,6 +27,8 @@ import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.Texture.TextureFilter;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
+import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
 import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Matrix4;
@@ -57,6 +59,7 @@ public class ProjectiveTextureTest extends GdxTest {
 	PerspectiveCamera projector;
 	Texture texture;
 	Mesh plane;
+	StillModel cube;
 	Matrix4 planeTrans = new Matrix4();
 	Matrix4 cubeTrans = new Matrix4();
 	Matrix4 modelNormal = new Matrix4();
@@ -90,6 +93,7 @@ public class ProjectiveTextureTest extends GdxTest {
 		plane.setVertices(new float[] {-10, -1, 10, 0, 1, 0, 10, -1, 10, 0, 1, 0, 10, -1, -10, 0, 1, 0, -10, -1, -10, 0, 1, 0});
 		plane.setIndices(new short[] {3, 2, 1, 1, 0, 3});
 		
+		cube = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/sphere.obj"));
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"), Format.RGB565, true);
 		texture.setFilter(TextureFilter.MipMap, TextureFilter.Nearest);
 
@@ -195,6 +199,7 @@ public class ProjectiveTextureTest extends GdxTest {
 	public void dispose () {
 		texture.dispose();
 		plane.dispose();
+		cube.dispose();
 		projTexShader.dispose();
 		ui.dispose();
 		skin.dispose();
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/ShadowMappingTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/ShadowMappingTest.java
index b093435..a91493d 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/ShadowMappingTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/ShadowMappingTest.java
@@ -24,9 +24,8 @@ import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.Pixmap.Format;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
+import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
 import com.badlogic.gdx.graphics.glutils.FrameBuffer;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.scenes.scene2d.Actor;
@@ -41,7 +40,7 @@ import com.badlogic.gdx.tests.utils.PerspectiveCamController;
 import com.badlogic.gdx.utils.GdxRuntimeException;
 
 public class ShadowMappingTest extends GdxTest {
-/*
+
 	@Override
 	public boolean needsGL20 () {
 		return true;
@@ -54,8 +53,7 @@ public class ShadowMappingTest extends GdxTest {
 	PerspectiveCamera lightCam;
 	PerspectiveCamera currCam;
 	Mesh plane;
-	Model cube;
-	ModelInstance modelInstance;
+	StillModel cube;
 	ShaderProgram flatShader;
 	ShaderProgram shadowGenShader;
 	ShaderProgram shadowMapShader;
@@ -85,9 +83,7 @@ public class ShadowMappingTest extends GdxTest {
 		plane = new Mesh(true, 4, 4, new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE));
 		plane.setVertices(new float[] {-10, -1, 10, 10, -1, 10, 10, -1, -10, -10, -1, -10});
 		plane.setIndices(new short[] {3, 2, 1, 0});
-		ObjLoader objLoader = new ObjLoader();
-		cube = objLoader.loadObj(Gdx.files.internal("data/cube.obj"));
-		modelInstance = new ModelInstance(cube);
+		cube = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/cube.obj"));
 
 		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
 		cam.position.set(0, 0, 10);
@@ -237,5 +233,5 @@ public class ShadowMappingTest extends GdxTest {
 		shadowMapShader.dispose();
 		currShader.dispose();
 		shadowMap.dispose();
-	} */
+	}
 }
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/TerrainTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/TerrainTest.java
index bbe9342..69fc8fc 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/TerrainTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/TerrainTest.java
@@ -137,24 +137,24 @@ public class TerrainTest extends GdxTest {
 		}
 
 		if (input.isKeyPressed(Keys.W)) {
-			Vector3 forward = new Vector3().set(camera.direction).mul(delta);
+			Vector3 forward = new Vector3().set(camera.direction).scl(delta);
 			camera.position.add(forward);
 		}
 		if (input.isKeyPressed(Keys.S)) {
-			Vector3 backward = new Vector3().set(camera.direction).mul(delta);
+			Vector3 backward = new Vector3().set(camera.direction).scl(delta);
 			camera.position.sub(backward);
 		}
 
 		if (input.isKeyPressed(Keys.A)) {
-			Vector3 left = new Vector3().set(camera.direction.cpy().crs(camera.up).nor()).mul(delta);
+			Vector3 left = new Vector3().set(camera.direction.cpy().crs(camera.up).nor()).scl(delta);
 			camera.position.sub(left);
 		}
 		if (input.isKeyPressed(Keys.D)) {
-			Vector3 right = new Vector3().set(camera.direction.cpy().crs(camera.up).nor()).mul(delta);
+			Vector3 right = new Vector3().set(camera.direction.cpy().crs(camera.up).nor()).scl(delta);
 			camera.position.add(right);
 		}
 
-		Vector3 forward = new Vector3().set(camera.direction).mul(delta);
+		Vector3 forward = new Vector3().set(camera.direction).scl(delta);
 		camera.position.add(forward);
 		int nextId = (MathUtils.floor(camera.position.x) * 33) + MathUtils.floor(camera.position.z);
 		// are we still on our current chunk ? - maybe switching to another chunk
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/CollisionFiltering.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/CollisionFiltering.java
index 22c295d..2ae69e6 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/CollisionFiltering.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/box2d/CollisionFiltering.java
@@ -90,9 +90,9 @@ public class CollisionFiltering extends Box2DTest {
 		Body body1 = world.createBody(triangleBodyDef);
 		body1.createFixture(triangleShapeDef);
 
-		vertices[0].mul(2);
-		vertices[1].mul(2);
-		vertices[2].mul(2);
+		vertices[0].scl(2);
+		vertices[1].scl(2);
+		vertices[2].scl(2);
 
 		polygon.set(vertices);
 		triangleShapeDef.filter.groupIndex = k_largeGroup;
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
index 0f3eb9d..3f33dfa 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java
@@ -19,29 +19,14 @@ package com.badlogic.gdx.tests.bullet;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Application.ApplicationType;
 import com.badlogic.gdx.Input.Keys;
-import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.VertexAttributes;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Light;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.lights.DirectionalLight;
-import com.badlogic.gdx.graphics.g3d.lights.Lights;
-import com.badlogic.gdx.graphics.g3d.lights.PointLight;
-import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.FloatAttribute;
 import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
-import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
-import com.badlogic.gdx.math.MathUtils;
-import com.badlogic.gdx.math.Quaternion;
-import com.badlogic.gdx.math.Vector3;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.model.still.StillSubMesh;
 import com.badlogic.gdx.math.collision.Ray;
 import com.badlogic.gdx.physics.bullet.Bullet;
 import com.badlogic.gdx.physics.bullet.btIDebugDraw;
@@ -67,33 +52,20 @@ public class BaseBulletTest extends BulletTest {
 		initialized = true;
 	}
 	
-	public Lights lights = new Lights(0.2f, 0.2f, 0.2f).add(
-		new DirectionalLight().set(0.8f, 0.8f, 0.8f, -0.5f, -1f, -0.7f) // directional light
-		//new PointLight().set(1f, 0f, 0f, 5f, 10f, 20f, 100f), // point light
-		//new PointLight().set(0f, 0f, 1f, -5f, 10f, 20f, 100f) // point light
-		//new Light(1f, 1f, 1f, 1f, 10f, 20f, 5f, -1f, -2f, -0.5f, 30f, 1f, 0f, 0f), // spot light
-	);
-
-	public BulletWorld world;
-	public ObjLoader objLoader = new ObjLoader();
-	public ModelBuilder modelBuilder = new ModelBuilder();
-	public ModelBatch modelBatch;
-	private int debugMode = DebugDrawModes.DBG_NoDebug;
+	final float lightAmbient[] = new float[] {0.5f, 0.5f, 0.5f, 1f};
+	final float lightPosition[] = new float[] {10f, 10f, 10f, 1f};
+	final float lightDiffuse[] = new float[] {0.5f, 0.5f, 0.5f, 1f};
 
+	PerspectiveCamera camera;
+	BulletWorld world;
+	
 	public BulletWorld createWorld() {
 		return new BulletWorld();
 	}
 	
-	@Deprecated
-	public static Model createSimpleModel(final VertexAttribute[] attributes, final float[] vertices, final short[] indices) {
-		return ModelBuilder.createFromMesh(vertices, attributes, indices, GL10.GL_TRIANGLES, new Material(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE)));
-	}
-	
 	@Override
 	public void create () {
 		init();
-		modelBatch = new ModelBatch();
-		
 		world = createWorld();
 		world.performanceCounter = performanceCounter;
 
@@ -108,12 +80,22 @@ public class BaseBulletTest extends BulletTest {
 		camera.update();
 		
 		// Create some simple meshes
-		final Model groundModel = modelBuilder.createRect(20f, 0f, -20f, -20f, 0f, -20f, -20f, 0f, 20f, 20f, 0f, 20f, 0, 1, 0, 
-			new Material(ColorAttribute.createDiffuse(Color.WHITE), ColorAttribute.createSpecular(Color.WHITE), FloatAttribute.createShininess(16f)),
-			Usage.Position | Usage.Normal);
-		final Model boxModel = modelBuilder.createBox(1f, 1f, 1f,
-			new Material(ColorAttribute.createDiffuse(Color.WHITE), ColorAttribute.createSpecular(Color.WHITE), FloatAttribute.createShininess(64f)), 
-			Usage.Position | Usage.Normal);
+		final Mesh groundMesh = new Mesh(true, 4, 6, new VertexAttribute(Usage.Position, 3, "a_position"));
+		groundMesh.setVertices(new float[] {20f, 0f, 20f, 20f, 0f, -20f, -20f, 0f, 20f, -20f, 0f, -20f});
+		groundMesh.setIndices(new short[] {0, 1, 2, 1, 2, 3});
+		final StillModel groundModel = new StillModel(new StillSubMesh("ground", groundMesh, GL10.GL_TRIANGLES, new Material()));
+
+		final Mesh boxMesh = new Mesh(true, 8, 36, new VertexAttribute(Usage.Position, 3, "a_position"));
+		boxMesh.setVertices(new float[] {0.5f, 0.5f, 0.5f, 0.5f, 0.5f, -0.5f, -0.5f, 0.5f, 0.5f, -0.5f, 0.5f, -0.5f,
+			0.5f, -0.5f, 0.5f, 0.5f, -0.5f, -0.5f, -0.5f, -0.5f, 0.5f, -0.5f, -0.5f, -0.5f});
+		boxMesh.setIndices(new short[] {0, 1, 2, 1, 2, 3, // top
+			4, 5, 6, 5, 6, 7, // bottom
+			0, 2, 4, 4, 6, 2, // front
+			1, 3, 5, 5, 7, 3, // back
+			2, 3, 6, 6, 7, 3, // left
+			0, 1, 4, 4, 5, 1 // right
+			});
+		final StillModel boxModel = new StillModel(new StillSubMesh("box", boxMesh, GL10.GL_TRIANGLES, new Material()));
 
 		// Add the constructors
 		world.addConstructor("ground", new BulletConstructor(groundModel, 0f)); // mass = 0: static body
@@ -150,19 +132,24 @@ public class BaseBulletTest extends BulletTest {
 	}
 	
 	protected void beginRender(boolean lighting) {
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
-		//Gdx.gl.glEnable(GL10.GL_CULL_FACE);
-		//Gdx.gl.glCullFace(GL10.GL_BACK);
-		camera.update();
-		if (debugMode != DebugDrawModes.DBG_NoDebug)
-			world.setDebugMode(debugMode, camera.combined);
+		GL10 gl = Gdx.gl10;
+		gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
+		gl.glEnable(GL10.GL_DEPTH_TEST);
+		gl.glDepthFunc(GL10.GL_LEQUAL);
+		gl.glEnable(GL10.GL_COLOR_MATERIAL);
+		if (lighting) {
+			gl.glEnable(GL10.GL_LIGHTING);
+			gl.glEnable(GL10.GL_LIGHT0);
+			gl.glLightfv(GL10.GL_LIGHT0, GL10.GL_AMBIENT, lightAmbient, 0);
+			gl.glLightfv(GL10.GL_LIGHT0, GL10.GL_POSITION, lightPosition, 0);
+			gl.glLightfv(GL10.GL_LIGHT0, GL10.GL_DIFFUSE, lightDiffuse, 0);
+		} else
+			gl.glDisable(GL10.GL_LIGHTING);
+		camera.apply(Gdx.gl10);
 	}
 	
 	protected void renderWorld() {
-		modelBatch.begin(camera);
-		world.render(modelBatch, lights);
-		modelBatch.end();
+		world.render();
 	}
 	
 	public void update() {
@@ -181,13 +168,13 @@ public class BaseBulletTest extends BulletTest {
 		// Shoot a box
 		Ray ray = camera.getPickRay(x, y);
 		BulletEntity entity = world.add(what, ray.origin.x, ray.origin.y, ray.origin.z);
-		entity.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
-		((btRigidBody)entity.body).applyCentralImpulse(ray.direction.mul(impulse));
+		entity.color.set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+		((btRigidBody)entity.body).applyCentralImpulse(ray.direction.scl(impulse));
 		return entity;
 	}
 	
 	public void setDebugMode(final int mode) {
-		world.setDebugMode(debugMode = mode, camera.combined);
+		world.setDebugMode(mode, camera.combined);
 	}
 	
 	public void toggleDebugMode() {
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseEntity.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseEntity.java
index 710aa10..8954959 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseEntity.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseEntity.java
@@ -17,10 +17,7 @@ package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
+import com.badlogic.gdx.graphics.g3d.model.Model;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.utils.Disposable;
 
@@ -28,23 +25,7 @@ import com.badlogic.gdx.utils.Disposable;
  * Base class specifying only a renderable entity  
  */
 public abstract class BaseEntity implements Disposable {
-	public Matrix4 transform;
-	public ModelInstance modelInstance;
-	private Color color = new Color(1f, 1f, 1f, 1f);
-	public Color getColor () {
-		return color;
-	}
-	public void setColor (Color color) {
-		setColor(color.r, color.g, color.b, color.a);
-	}
-	public void setColor (float r, float g, float b, float a) {
-		color.set(r, g, b, a);
-		if (modelInstance != null) {
-			for (Material m : modelInstance.materials) {
-				ColorAttribute ca = (ColorAttribute)m.get(ColorAttribute.Diffuse);
-				if (ca != null)
-					ca.color.set(r, g, b, a);
-			}				
-		}
-	}
+	public Matrix4 transform = new Matrix4();
+	public Model model;
+	public Color color = new Color(1f, 1f, 1f, 1f);
 }
\ No newline at end of file
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseWorld.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseWorld.java
index d94e6b0..c2cef8c 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseWorld.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseWorld.java
@@ -16,14 +16,10 @@
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.Camera;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.Light;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.lights.Lights;
+import com.badlogic.gdx.graphics.g3d.model.Model;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Disposable;
@@ -69,20 +65,22 @@ public class BaseWorld<T extends BaseEntity> implements Disposable {
 		return entity;
 	}
 	
-	public void render(final ModelBatch batch, final Lights lights) {
-		render(batch, lights, entities);
+	public void render() {
+		render(entities);
 	}
 	
-	public void render(final ModelBatch batch, final Lights lights, final Iterable<T> entities) {
-		for (final T e : entities) {
-			e.modelInstance.calculateTransforms();
-			batch.render(e.modelInstance, lights);
-		}
+	public void render(final Iterable<T> entities) {
+		for (final T e : entities)
+			render(e);
 	}
 	
-	public void render(final ModelBatch batch, final Lights lights, final T entity) {
-		entity.modelInstance.calculateTransforms();
-		batch.render(entity.modelInstance, lights);
+	public void render(final T entity) {
+		final GL10 gl = Gdx.gl10;
+		gl.glPushMatrix();
+		gl.glMultMatrixf(entity.transform.val, 0);
+		gl.glColor4f(entity.color.r, entity.color.g, entity.color.b, entity.color.a);
+		entity.model.render();
+		gl.glPopMatrix();
 	}
 	
 	public void update() {	}
@@ -97,8 +95,8 @@ public class BaseWorld<T extends BaseEntity> implements Disposable {
 			constructor.dispose();
 		constructors.clear();
 		
-		//for (int i = 0; i < models.size; i++)
-			//models.get(i).dispose();
+		for (int i = 0; i < models.size; i++)
+			models.get(i).dispose();
 		models.clear();
 	}
 }
\ No newline at end of file
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BasicShapesTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BasicShapesTest.java
deleted file mode 100644
index 2e09b6b..0000000
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BasicShapesTest.java
+++ /dev/null
@@ -1,78 +0,0 @@
-package com.badlogic.gdx.tests.bullet;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.VertexAttributes;
-import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.FloatAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
-import com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.physics.bullet.btBoxShape;
-import com.badlogic.gdx.physics.bullet.btConeShape;
-import com.badlogic.gdx.physics.bullet.btCylinderShape;
-import com.badlogic.gdx.physics.bullet.btSphereShape;
-
-public class BasicShapesTest extends BaseBulletTest {
-	final int BOXCOUNT_X = 5;
-	final int BOXCOUNT_Y = 5;
-	final int BOXCOUNT_Z = 1;
-
-	final float BOXOFFSET_X = -2.5f;
-	final float BOXOFFSET_Y = 0.5f;
-	final float BOXOFFSET_Z = 0f;
-	
-	protected BulletEntity ground;
-	
-	Texture texture;
-	
-	@Override
-	public void create () {
-		super.create();
-
-		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"));
-		final Material material = new Material(TextureAttribute.createDiffuse(texture), ColorAttribute.createSpecular(1,1,1,1), FloatAttribute.createShininess(8f));
-		final long attributes = Usage.Position | Usage.Normal | Usage.TextureCoordinates;
-		
-		final Model sphere = modelBuilder.createSphere(4f, 4f, 4f, 24, 24, material, attributes);
-		world.addConstructor("sphere", new BulletConstructor(sphere, 10f, new btSphereShape(2f)));
-		
-		final Model cylinder = modelBuilder.createCylinder(4f, 6f, 4f, 16, material, attributes);
-		world.addConstructor("cylinder", new BulletConstructor(cylinder, 10f, new btCylinderShape(Vector3.tmp.set(2f, 3f, 2f))));
-		
-		final Model box = modelBuilder.createBox(4f, 4f, 2f, material, attributes);
-		world.addConstructor("box2", new BulletConstructor(box, 10f, new btBoxShape(Vector3.tmp.set(2f, 2f, 1f))));
-		
-		final Model cone = modelBuilder.createCone(4f, 6f, 4f, 16, material, attributes);
-		world.addConstructor("cone", new BulletConstructor(cone, 10f, new btConeShape(2f,6f)));
-			
-		// Create the entities
-		(ground = world.add("ground", 0f, 0f, 0f))
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
-		world.add("sphere", 0, 5, 5);
-		world.add("cylinder", 5, 5, 0);
-		world.add("box2", 0, 5, 0);
-		world.add("cone", 5, 5, 5);
-	}
-	
-	@Override
-	public boolean tap (float x, float y, int count, int button) {
-		shoot(x, y);
-		return true;
-	}
-	
-	@Override
-	public void dispose () {
-		super.dispose();
-		ground = null;
-		if (texture != null)
-			texture.dispose();
-		texture = null;
-	}
-}
\ No newline at end of file
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletConstructor.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletConstructor.java
index bf9337b..307d518 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletConstructor.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletConstructor.java
@@ -16,7 +16,7 @@
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.Model;
+import com.badlogic.gdx.graphics.g3d.model.Model;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.collision.BoundingBox;
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletEntity.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletEntity.java
index 6f3285d..4919743 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletEntity.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletEntity.java
@@ -16,8 +16,7 @@
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
+import com.badlogic.gdx.graphics.g3d.model.Model;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.physics.bullet.btCollisionObject;
 import com.badlogic.gdx.physics.bullet.btCollisionShape;
@@ -47,14 +46,14 @@ public class BulletEntity extends BaseEntity {
 	}
 	
 	public BulletEntity (final Model model, final btCollisionObject body, final Matrix4 transform) {
-		this.modelInstance = new ModelInstance(model, transform.cpy());
-		this.transform = this.modelInstance.transform;
+		this.model = model;
+		this.transform.set(transform);
 		this.body = body;
 		
 		if (body != null) {
 			body.userData = this;
 			if (body instanceof btRigidBody) {
-				this.motionState = new MotionState(this.modelInstance.transform);
+				this.motionState = new MotionState(this.transform);
 				((btRigidBody)this.body).setMotionState(motionState);
 			} else
 				body.setWorldTransform(transform);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletTest.java
index e1a559c..5c1a2e7 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletTest.java
@@ -18,8 +18,6 @@ package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.ApplicationListener;
 import com.badlogic.gdx.InputProcessor;
-import com.badlogic.gdx.graphics.Camera;
-import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.input.GestureDetector.GestureListener;
 import com.badlogic.gdx.math.FloatCounter;
 import com.badlogic.gdx.math.Vector2;
@@ -29,10 +27,9 @@ import com.badlogic.gdx.utils.SharedLibraryLoader;
 /** @author xoppa */
 public class BulletTest implements ApplicationListener, InputProcessor, GestureListener {
 	public StringBuilder performance = new StringBuilder();
-	public String instructions = "Tap to shoot\nLong press to toggle debug mode\nSwipe for next test\nCtrl+drag to rotate\nScroll to zoom";
+	public String instructions = "Tap to shoot\nLong press to toggle debug mode\nSwipe for next test";
 	public PerformanceCounter performanceCounter = new PerformanceCounter(this.getClass().getSimpleName());
 	public FloatCounter fpsCounter = new FloatCounter(5);
-	public PerspectiveCamera camera;
 	
 	@Override
 	public boolean keyDown (int keycode) {
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletWorld.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletWorld.java
index 5776052..014dd20 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletWorld.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletWorld.java
@@ -16,9 +16,6 @@
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.g3d.Light;
-import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.lights.Lights;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.WindowedMean;
@@ -113,14 +110,14 @@ public class BulletWorld extends BaseWorld<BulletEntity> {
 	}
 	
 	@Override
-	public void render (ModelBatch batch, Lights lights, Iterable<BulletEntity> entities) {
+	public void render() {
 		if (debugDrawer != null && debugDrawer.getDebugMode() > 0) {
 			debugDrawer.begin();
 			collisionWorld.debugDrawWorld();
 			debugDrawer.end();
 		}
 		if (renderMeshes)
-			super.render(batch, lights, entities);
+			super.render();
 	}
 	
 	@Override
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionTest.java
index 28b80f5..f8f789b 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionTest.java
@@ -25,7 +25,6 @@ import com.badlogic.gdx.physics.bullet.btManifoldPoint;
 import com.badlogic.gdx.physics.bullet.btPersistentManifold;
 import com.badlogic.gdx.tests.bullet.CollisionWorldTest.TestContactResultCallback;
 import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.Pool;
 
 /** @author Xoppa */
 public class CollisionTest extends ShootTest {
@@ -84,25 +83,20 @@ public class CollisionTest extends ShootTest {
 		process();
 	}
 	
-	private Pool<Color> colorPool = new Pool<Color>() {
-		@Override 
-		protected Color newObject () {
-			return new Color();
-		}
-	};
 	public void process() {
 		Color color = null;
 		update();
 		hits.clear();
 		contacts.clear();
+		colors.clear();
 		
 		// Note that this might miss collisions, use InternalTickCallback to check for collision on every tick.
 		// See InternalTickTest on how to implement it.
 		
 		// Check what the projectile hits
 		if (projectile != null) {
-			color = projectile.getColor();
-			projectile.setColor(Color.RED);
+			color = projectile.color;
+			projectile.color = Color.RED;
 			world.collisionWorld.contactTest(projectile.body, contactCB);
 		}
 		// Check for other collisions
@@ -110,25 +104,23 @@ public class CollisionTest extends ShootTest {
 		
 		if (hits.size > 0) {
 			for (int i = 0; i < hits.size; i++) {
-				colors.add(colorPool.obtain().set(hits.get(i).getColor()));
-				hits.get(i).setColor(Color.RED);
+				colors.add(hits.get(i).color);
+				hits.get(i).color = Color.RED;
 			}
 		}
 		if (contacts.size > 0) {
 			for (int i = 0; i < contacts.size; i++) {
-				colors.add(colorPool.obtain().set(contacts.get(i).getColor()));
-				contacts.get(i).setColor(Color.BLUE);
+				colors.add(contacts.get(i).color);
+				contacts.get(i).color = Color.BLUE;
 			}
 		}
 		render(false);
 		if (projectile != null)
-			projectile.setColor(color);
+			projectile.color = color;
 		for (int i = 0; i < hits.size; i++)
-			hits.get(i).setColor(colors.get(i));
+			hits.get(i).color = colors.get(i);
 		for (int i = 0; i < contacts.size; i++)
-			contacts.get(i).setColor(colors.get(hits.size+i));
-		colorPool.freeAll(colors);
-		colors.clear();
+			contacts.get(i).color = colors.get(hits.size+i);
 	}
 	
 	@Override
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionWorldTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionWorldTest.java
index 58afbe9..a975697 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionWorldTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/CollisionWorldTest.java
@@ -18,7 +18,7 @@ package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.g3d.Model;
+import com.badlogic.gdx.graphics.g3d.model.Model;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.physics.bullet.ContactResultCallback;
@@ -66,7 +66,7 @@ public class CollisionWorldTest extends BaseBulletTest {
 	public void create () {
 		super.create();
 		
-		instructions = "Long press to toggle debug mode\nSwipe for next test\nCtrl+drag to rotate\nScroll to zoom";
+		instructions = "Long press to toggle debug mode\nSwipe for next test";
 		
 		contactCB = new TestContactResultCallback();
 		
@@ -77,16 +77,16 @@ public class CollisionWorldTest extends BaseBulletTest {
 		world.addConstructor("collisionBox", new BulletConstructor(boxModel));
 		
 		world.add("collisionGround", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+			.color.set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 		
 		world.add("collisionBox", 0f, 1f, 5f)
-			.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+			.color.set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 		world.add("collisionBox", 0f, 1f, -5f)
-			.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+			.color.set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 		world.add("collisionBox", 5f, 1f, 0f)
-			.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+			.color.set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 		world.add("collisionBox", -5f, 1f, 0f)
-			.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+			.color.set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 		movingBox = world.add("collisionBox", -5f, 1f, 0f);
 		normalColor.set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 	}
@@ -118,19 +118,19 @@ public class CollisionWorldTest extends BaseBulletTest {
 		hit = false;
 		other = null;
 		world.collisionWorld.contactTest(movingBox.body, contactCB);
-		movingBox.setColor(hit ? Color.RED : normalColor);
+		movingBox.color.set(hit ? Color.RED : normalColor);
 		
 		BulletEntity e = null;
 		if (other != null && other.userData != null && other.userData instanceof BulletEntity) { 
 			e = (BulletEntity)(other.userData);
-			tmpColor.set(e.getColor());
-			e.setColor(Color.RED);
+			tmpColor.set(e.color);
+			e.color.set(Color.RED);
 		}
 		
 		super.renderWorld();
 
 		if (e != null)
-			e.setColor(tmpColor);
+			e.color.set(tmpColor);
 	}
 	
 	@Override
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConstraintsTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConstraintsTest.java
index 5b454cd..9445175 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConstraintsTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConstraintsTest.java
@@ -20,13 +20,10 @@ import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.VertexAttributes;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
 import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.model.still.StillSubMesh;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.physics.bullet.btDiscreteDynamicsWorld;
 import com.badlogic.gdx.physics.bullet.btDynamicsWorld;
@@ -44,18 +41,28 @@ public class ConstraintsTest extends BaseBulletTest {
 	public void create () {
 		super.create();
 
-		final Model barModel = modelBuilder.createBox(10f, 1f, 1f, new Material(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE)), Usage.Position | Usage.Normal); 
+		final Mesh barMesh = new Mesh(true, 8, 36, new VertexAttribute(Usage.Position, 3, "a_position"));
+		barMesh.setVertices(new float[] {5f, 0.5f, 0.5f, 5f, 0.5f, -0.5f, -5f, 0.5f, 0.5f, -5f, 0.5f, -0.5f,
+			5f, -0.5f, 0.5f, 5f, -0.5f, -0.5f, -5f, -0.5f, 0.5f, -5f, -0.5f, -0.5f});
+		barMesh.setIndices(new short[] {0, 1, 2, 1, 2, 3, // top
+			4, 5, 6, 5, 6, 7, // bottom
+			0, 2, 4, 4, 6, 2, // front
+			1, 3, 5, 5, 7, 3, // back
+			2, 3, 6, 6, 7, 3, // left
+			0, 1, 4, 4, 5, 1 // right
+			});
+		final StillModel barModel = new StillModel(new StillSubMesh("bar", barMesh, GL10.GL_TRIANGLES, new Material()));
 		world.addConstructor("bar", new BulletConstructor(barModel, 0f)); // mass = 0: static body
 		
 		// Create the entities
 		world.add("ground", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+			.color.set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 		
 		BulletEntity bar = world.add("bar", 0f, 7f, 0f);
-		bar.setColor(0.75f + 0.25f * (float)Math.random(), 0.75f + 0.25f * (float)Math.random(), 0.75f + 0.25f * (float)Math.random(), 1f);
+		bar.color.set(0.75f + 0.25f * (float)Math.random(), 0.75f + 0.25f * (float)Math.random(), 0.75f + 0.25f * (float)Math.random(), 1f);
 		
 		BulletEntity box1 = world.add("box", -4.5f, 6f, 0f);
-		box1.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+		box1.color.set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 		btPoint2PointConstraint constraint = new btPoint2PointConstraint((btRigidBody)bar.body, (btRigidBody)box1.body, Vector3.tmp.set(-5, -0.5f, -0.5f), Vector3.tmp2.set(-0.5f, 0.5f, -0.5f));
 		((btDynamicsWorld)world.collisionWorld).addConstraint(constraint, false);
 		constraints.add(constraint);
@@ -63,11 +70,11 @@ public class ConstraintsTest extends BaseBulletTest {
 		for (int i = 0; i < 10; i++) {
 			if (i % 2 == 0) {
 				box2 = world.add("box", -3.5f + (float)i, 6f, 0f);
-				box2.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+				box2.color.set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 				constraint = new btPoint2PointConstraint((btRigidBody)box1.body, (btRigidBody)box2.body, Vector3.tmp.set(0.5f, -0.5f, 0.5f), Vector3.tmp2.set(-0.5f, -0.5f, 0.5f));
 			} else {
 				box1 = world.add("box", -3.5f + (float)i, 6f, 0f);
-				box1.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+				box1.color.set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 				constraint = new btPoint2PointConstraint((btRigidBody)box2.body, (btRigidBody)box1.body, Vector3.tmp.set(0.5f, 0.5f, -0.5f), Vector3.tmp2.set(-0.5f, 0.5f, -0.5f));
 			}
 			((btDynamicsWorld)world.collisionWorld).addConstraint(constraint, false);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCallbackTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCallbackTest.java
index fe546f8..57a0d68 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCallbackTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ContactCallbackTest.java
@@ -38,14 +38,14 @@ public class ContactCallbackTest extends BaseBulletTest {
 				final BulletEntity e = (BulletEntity)(entities.get(userValue0));
 				// Disable future callbacks for this entity
 				e.body.setContactCallbackFilter(0);
-				e.setColor(Color.RED);
+				e.color.set(Color.RED);
 				Gdx.app.log("ContactCallbackTest", "Contact processed "+(++c));
 			}
 			if (match1) {
 				final BulletEntity e = (BulletEntity)(entities.get(userValue1));
 				// Disable future callbacks for this entity
 				e.body.setContactCallbackFilter(0);
-				e.setColor(Color.RED);
+				e.color.set(Color.RED);
 				Gdx.app.log("ContactCallbackTest", "Contact processed "+(++c));
 			}
 		}
@@ -69,13 +69,13 @@ public class ContactCallbackTest extends BaseBulletTest {
 		
 		// Create the entities
 		(ground = world.add("ground", 0f, 0f, 0f))
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+			.color.set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 		
 		for (int x = 0; x < BOXCOUNT_X; x++) {
 			for (int y = 0; y < BOXCOUNT_Y; y++) {
 				for (int z = 0; z < BOXCOUNT_Z; z++) {
 					final BulletEntity e = (BulletEntity)world.add("box", BOXOFFSET_X + x * 2f, BOXOFFSET_Y + y * 2f, BOXOFFSET_Z + z * 2f);
-					e.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+					e.color.set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 
 					e.body.setContactCallbackFlag(2);
 					e.body.setContactCallbackFilter(2);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConvexHullTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConvexHullTest.java
index dc97ae5..dc3ddd5 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConvexHullTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ConvexHullTest.java
@@ -17,11 +17,12 @@
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
+import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.loaders.wavefront.ObjLoader;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.model.still.StillSubMesh;
 import com.badlogic.gdx.physics.bullet.btConvexHullShape;
 import com.badlogic.gdx.physics.bullet.btShapeHull;
 
@@ -32,18 +33,17 @@ public class ConvexHullTest extends BaseBulletTest {
 	public void create () {
 		super.create();
 
-		final Model sceneModel = objLoader.loadObj(Gdx.files.internal("data/car.obj"));
-		sceneModel.materials.get(0).clear();
-		sceneModel.materials.get(0).set(ColorAttribute.createDiffuse(Color.WHITE), ColorAttribute.createSpecular(Color.WHITE));
-		world.addConstructor("car", new BulletConstructor(sceneModel, 5f, createConvexHullShape(sceneModel)));
+		final StillModel sceneModel = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/car.obj"));
+		final Mesh sceneMesh = sceneModel.subMeshes[0].getMesh();
+		world.addConstructor("car", new BulletConstructor(sceneModel, 5f, createConvexHullShape(sceneMesh)));
 
 		// Create the entities
 		world.add("ground", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+			.color.set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 		
 		for (float y = 10f; y < 50f; y += 5f)
 			world.add("car", -2f+(float)Math.random()*4f, y, -2f+(float)Math.random()*4f)
-				.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+				.color.set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 	}
 	
 	@Override
@@ -52,8 +52,7 @@ public class ConvexHullTest extends BaseBulletTest {
 		return true;
 	}
 	
-	public static btConvexHullShape createConvexHullShape(final Model model) {
-		final Mesh mesh = model.meshes.get(0);
+	public static btConvexHullShape createConvexHullShape(final Mesh mesh) {
 		final btConvexHullShape shape = new btConvexHullShape(mesh.getVerticesBuffer(), mesh.getNumVertices(), mesh.getVertexSize());
 		// now optimize the shape
 		final btShapeHull hull = new btShapeHull(shape);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/FrustumCullingTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/FrustumCullingTest.java
index 3e8a65f..e2e91e7 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/FrustumCullingTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/FrustumCullingTest.java
@@ -22,10 +22,10 @@ import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.PerspectiveCamera;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
 import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
+import com.badlogic.gdx.graphics.g3d.model.Model;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.model.still.StillSubMesh;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Quaternion;
 import com.badlogic.gdx.math.Vector3;
@@ -115,12 +115,12 @@ public class FrustumCullingTest extends BaseBulletTest {
 	}
 	
 	public static Model createFrustumModel(final Vector3... p) {
-		return ModelBuilder.createFromMesh(new float[] {
-				p[0].x, p[0].y, p[0].z, 0, 0, 1, p[1].x, p[1].y, p[1].z, 0, 0, 1, p[2].x, p[2].y, p[2].z, 0, 0, 1, p[3].x, p[3].y, p[3].z, 0, 0, 1, // near
-				p[4].x, p[4].y, p[4].z, 0, 0, -1, p[5].x, p[5].y, p[5].z, 0, 0, -1, p[6].x, p[6].y, p[6].z, 0, 0, -1, p[7].x, p[7].y, p[7].z, 0, 0, -1},// far
-				new VertexAttribute[] { new VertexAttribute(Usage.Position, 3, "a_position"), new VertexAttribute(Usage.Normal, 3, "a_normal")},
-				new short[] {0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7},
-				GL10.GL_LINES, new Material(new ColorAttribute(ColorAttribute.Diffuse, Color.WHITE)));
+		final Mesh mesh = new Mesh(true, 8, 32, new VertexAttribute(Usage.Position, 3, "a_position"));
+		mesh.setVertices(new float[] {
+			p[0].x, p[0].y, p[0].z, p[1].x, p[1].y, p[1].z, p[2].x, p[2].y, p[2].z, p[3].x, p[3].y, p[3].z, // near
+			p[4].x, p[4].y, p[4].z, p[5].x, p[5].y, p[5].z, p[6].x, p[6].y, p[6].z, p[7].x, p[7].y, p[7].z});// far
+		mesh.setIndices(new short[] {0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7});
+		return new StillModel(new StillSubMesh("frustum", mesh, GL10.GL_LINES, new Material()));
 	}
 	
 	private float angleX, angleY, angleZ;
@@ -135,7 +135,7 @@ public class FrustumCullingTest extends BaseBulletTest {
 	public void create () {
 		super.create();
 		
-		instructions = "Tap to toggle view\nLong press to toggle debug mode\nSwipe for next test\nCtrl+drag to rotate\nScroll to zoom";
+		instructions = "Tap to toggle view\nLong press to toggle debug mode\nSwipe for next test";
 		
 		tempManifoldArr = new btManifoldArray();
 
@@ -150,7 +150,7 @@ public class FrustumCullingTest extends BaseBulletTest {
 					BOX_X_MIN + dX * (float)Math.random(), 
 					BOX_Y_MIN + dY * (float)Math.random(), 
 					BOX_Z_MIN + dZ * (float)Math.random()
-				).setColor(Color.GRAY);
+				).color.set(Color.GRAY);
 		
 		frustumCam = new PerspectiveCamera(camera.fieldOfView, camera.viewportWidth, camera.viewportHeight);
 		frustumCam.far = Vector3.len(BOX_X_MAX, BOX_Y_MAX, BOX_Z_MAX);
@@ -165,7 +165,9 @@ public class FrustumCullingTest extends BaseBulletTest {
 		final Model frustumModel = createFrustumModel(frustumCam.frustum.planePoints);
 		frustumObject = createFrustumObject(frustumCam.frustum.planePoints);
 		world.add(frustumEntity = new BulletEntity(frustumModel, frustumObject, 0, 0, 0));
-		frustumEntity.setColor(Color.BLUE);
+		frustumEntity.color.set(Color.BLUE);
+		
+		world.renderMeshes = false;
 	}
 	
 	@Override
@@ -225,7 +227,7 @@ public class FrustumCullingTest extends BaseBulletTest {
 				final BulletEntity e = world.entities.get(i);
 				if (e == frustumEntity)
 					continue;
-				e.modelInstance.transform.getTranslation(tmpV);
+				e.transform.getTranslation(tmpV);
 				if (frustumCam.frustum.sphereInFrustum(tmpV, 1))
 					visibleEntities.add(e);
 			}
@@ -234,18 +236,16 @@ public class FrustumCullingTest extends BaseBulletTest {
 			world.performanceCounter.stop();
 		
 		for (int i = 0; i < visibleEntities.size; i++)
-			visibleEntities.get(i).setColor(Color.RED);
-
-		modelBatch.begin(camera);
+			visibleEntities.get(i).color.set(Color.RED);
+		
 		if ((state & CULL_FRUSTUM) == CULL_FRUSTUM) {
-			world.render(modelBatch, lights, visibleEntities);
-			world.render(modelBatch, lights, frustumEntity);
+			world.render(visibleEntities);
+			world.render(frustumEntity);
 		} else
-			world.render(modelBatch, lights);
-		modelBatch.end();
+			world.render(world.entities);
 		
 		for (int i = 0; i < visibleEntities.size; i++)
-			visibleEntities.get(i).setColor(Color.GRAY);
+			visibleEntities.get(i).color.set(Color.GRAY);
 	}
 	
 	@Override
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/InternalTickTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/InternalTickTest.java
index 23004bd..125fb1f 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/InternalTickTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/InternalTickTest.java
@@ -64,13 +64,13 @@ public class InternalTickTest extends BaseBulletTest {
 
 		// Create the entities
 		world.add("ground", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+			.color.set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 
 		for (int x = 0; x < BOXCOUNT_X; x++) {
 			for (int y = 0; y < BOXCOUNT_Y; y++) {
 				for (int z = 0; z < BOXCOUNT_Z; z++) {
 					world.add("box", BOXOFFSET_X + x, BOXOFFSET_Y + y, BOXOFFSET_Z + z)
-						.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+						.color.set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 				}
 			}
 		}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/KinematicTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/KinematicTest.java
index 2be0666..59dcb86 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/KinematicTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/KinematicTest.java
@@ -37,16 +37,16 @@ public class KinematicTest extends BaseBulletTest {
 
 		// Create the entities
 		world.add("ground", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+			.color.set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 		
 		kinematicBox1 = world.add("staticbox", position1.x, position1.y, position1.z);
-		kinematicBox1.setColor(Color.RED);
+		kinematicBox1.color.set(Color.RED);
 		kinematicBox1.body.setCollisionFlags(kinematicBox1.body.getCollisionFlags() | btCollisionObject.CollisionFlags.CF_KINEMATIC_OBJECT);
 		kinematicBox2 = world.add("staticbox", position2.x, position2.y, position2.z);
-		kinematicBox2.setColor(Color.RED);
+		kinematicBox2.color.set(Color.RED);
 		kinematicBox2.body.setCollisionFlags(kinematicBox2.body.getCollisionFlags() | btCollisionObject.CollisionFlags.CF_KINEMATIC_OBJECT);;
 		kinematicBox3 = world.add("staticbox", position3.x, position3.y, position3.z);
-		kinematicBox3.setColor(Color.RED);
+		kinematicBox3.color.set(Color.RED);
 		kinematicBox3.body.setCollisionFlags(kinematicBox3.body.getCollisionFlags() | btCollisionObject.CollisionFlags.CF_KINEMATIC_OBJECT);;
 		// This makes bullet call btMotionState#getWorldTransform on every update:
 		kinematicBox3.body.setActivationState(gdxBullet.DISABLE_DEACTIVATION);
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/MeshShapeTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/MeshShapeTest.java
index d5cc234..92c26d7 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/MeshShapeTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/MeshShapeTest.java
@@ -16,21 +16,38 @@
 
 package com.badlogic.gdx.tests.bullet;
 
+import java.util.Random;
+
 import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Input.Keys;
+import com.badlogic.gdx.graphics.Camera;
 import com.badlogic.gdx.graphics.Color;
+import com.badlogic.gdx.graphics.GL10;
+import com.badlogic.gdx.graphics.Mesh;
+import com.badlogic.gdx.graphics.PerspectiveCamera;
+import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.FloatAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.graphics.g2d.BitmapFont;
+import com.badlogic.gdx.graphics.g2d.SpriteBatch;
+import com.badlogic.gdx.graphics.g2d.TextureRegion;
+import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.collision.BoundingBox;
+import com.badlogic.gdx.physics.bullet.PHY_ScalarType;
 import com.badlogic.gdx.physics.bullet.btBvhTriangleMeshShape;
+import com.badlogic.gdx.physics.bullet.btCollisionShape;
+import com.badlogic.gdx.physics.bullet.btIndexedMesh;
+import com.badlogic.gdx.physics.bullet.btPoint2PointConstraint;
 import com.badlogic.gdx.physics.bullet.btSphereShape;
+import com.badlogic.gdx.physics.bullet.btStridingMeshInterface;
+import com.badlogic.gdx.physics.bullet.btTriangleIndexVertexArray;
+import com.badlogic.gdx.physics.bullet.btTypedConstraint;
+import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.XmlReader.Element;
 
 /** @author xoppa */
 public class MeshShapeTest extends BaseBulletTest {
@@ -39,28 +56,30 @@ public class MeshShapeTest extends BaseBulletTest {
 	public void create () {
 		super.create();
 		
-		final Model sphereModel = modelBuilder.createSphere(0.5f, 0.5f, 0.5f, 8, 8, 
-			new Material(ColorAttribute.createDiffuse(Color.WHITE), ColorAttribute.createSpecular(Color.WHITE)), 
-			Usage.Position | Usage.Normal); 
-		final BulletConstructor sphereConstructor = new BulletConstructor(sphereModel, 0.25f, new btSphereShape(0.25f));
+		final StillModel sphereModel = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/sphere.obj"));
+		sphereModel.subMeshes[0].getMesh().scale(0.25f, 0.25f, 0.25f);
+		final BoundingBox sphereBounds = new BoundingBox();
+		sphereModel.getBoundingBox(sphereBounds);
+	
+		final BulletConstructor sphereConstructor = new BulletConstructor(sphereModel, 0.25f, new btSphereShape(sphereBounds.getDimensions().x * 0.5f));
 		sphereConstructor.bodyInfo.setM_restitution(1f);
 		world.addConstructor("sphere", sphereConstructor);
 		
-		final Model sceneModel = objLoader.loadObj(Gdx.files.internal("data/scene.obj"));
+		final StillModel sceneModel = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/scene.obj"));
 		final BulletConstructor sceneConstructor = new BulletConstructor(sceneModel, 0f, new btBvhTriangleMeshShape(true, sceneModel));
 		sceneConstructor.bodyInfo.setM_restitution(0.25f);
 		world.addConstructor("scene", sceneConstructor);
 		
 		world.add("scene", (new Matrix4()).setToTranslation(0f, 2f, 0f).rotate(Vector3.Y, -90))
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+			.color.set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 
 		world.add("ground", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+			.color.set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 		
 		for (float x = -3; x < 7; x++) {
 			for (float z = -5; z < 5; z++) {
 				world.add("sphere", x, 10f + (float)Math.random() * 0.1f, z)
-					.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+					.color.set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 			}
 		}
 	}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayCastTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayCastTest.java
index 387a6b9..c9a4ebd 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayCastTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayCastTest.java
@@ -45,17 +45,17 @@ public class RayCastTest extends BaseBulletTest {
 	@Override
 	public void create () {
 		super.create();
-		instructions = "Tap a box to ray cast\nLong press to toggle debug mode\nSwipe for next test\nCtrl+drag to rotate\nScroll to zoom";
+		instructions = "Tap a box to ray cast\nLong press to toggle debug mode\nSwipe for next test";
 
 		// Create the entities
 		world.add("ground", -7f, 0f, -7f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+			.color.set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 
 		for (int x = 0; x < BOXCOUNT_X; x++) {
 			for (int y = 0; y < BOXCOUNT_Y; y++) {
 				for (int z = 0; z < BOXCOUNT_Z; z++) {
 					world.add("box", BOXOFFSET_X + x, BOXOFFSET_Y + y, BOXOFFSET_Z + z)
-						.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+						.color.set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 				}
 			}
 		}
@@ -75,7 +75,7 @@ public class RayCastTest extends BaseBulletTest {
 	public boolean tap (float x, float y, int count, int button) {
 		Ray ray = camera.getPickRay(x, y);
 		rayFrom.set(ray.origin);
-		rayTo.set(ray.direction).mul(50f).add(rayFrom); // 50 meters max from the origin
+		rayTo.set(ray.direction).scl(50f).add(rayFrom); // 50 meters max from the origin
 
 		// Because we reuse the ClosestRayResultCallback, we need reset it's values
 		rayTestCB.setM_collisionObject(null);
@@ -90,7 +90,7 @@ public class RayCastTest extends BaseBulletTest {
 			if (!obj.isStaticOrKinematicObject()) {
 				final btRigidBody body = btRigidBody.upcast(obj);
 				body.activate();
-				body.applyCentralImpulse(Vector3.tmp2.set(ray.direction).mul(20f));
+				body.applyCentralImpulse(Vector3.tmp2.set(ray.direction).scl(20f));
 			}
 		}
 		return true;
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayPickRagdollTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayPickRagdollTest.java
index f7da1ce..163b58e 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayPickRagdollTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/RayPickRagdollTest.java
@@ -16,24 +16,20 @@
 package com.badlogic.gdx.tests.bullet;
 
 import com.badlogic.gdx.Input.Buttons;
-import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.VertexAttributes;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
 import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.graphics.g3d.model.Model;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
+import com.badlogic.gdx.graphics.g3d.model.still.StillSubMesh;
 import com.badlogic.gdx.math.MathUtils;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.math.collision.Ray;
 import com.badlogic.gdx.physics.bullet.ClosestRayResultCallback;
 import com.badlogic.gdx.physics.bullet.btCapsuleShape;
-import com.badlogic.gdx.physics.bullet.btCollisionObject;
 import com.badlogic.gdx.physics.bullet.btConeTwistConstraint;
 import com.badlogic.gdx.physics.bullet.btConstraintSetting;
 import com.badlogic.gdx.physics.bullet.btDynamicsWorld;
@@ -56,7 +52,7 @@ public class RayPickRagdollTest extends BaseBulletTest {
 	@Override
 	public void create () {
 		super.create();
-		instructions = "Tap to shoot\nDrag ragdoll to pick\nLong press to toggle debug mode\nSwipe for next test\nCtrl+drag to rotate\nScroll to zoom";
+		instructions = "Tap to shoot\nDrag ragdoll to pick\nLong press to toggle debug mode\nSwipe for next test";
 		
 		camera.position.set(4f, 2f, 4f);
 		camera.lookAt(0f, 1f, 0f);
@@ -71,7 +67,7 @@ public class RayPickRagdollTest extends BaseBulletTest {
 		world.addConstructor("lowerarm", new BulletConstructor(createCapsuleModel(0.04f, 0.25f), 1f, new btCapsuleShape(0.04f, 0.25f)));
 		
 		world.add("ground", 0f, 0f, 0f)
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+			.color.set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 		
 		addRagdoll(0, 3f, 0);
 		addRagdoll(1f, 6f, 0);
@@ -93,7 +89,7 @@ public class RayPickRagdollTest extends BaseBulletTest {
 		boolean result = false;
 		if (button == Buttons.LEFT) {
 			Ray ray = camera.getPickRay(screenX, screenY);
-			Vector3.tmp.set(ray.direction).mul(10f).add(ray.origin);
+			Vector3.tmp.set(ray.direction).scl(10f).add(ray.origin);
 			ClosestRayResultCallback cb = new ClosestRayResultCallback(ray.origin, Vector3.tmp);
 			world.collisionWorld.rayTest(ray.origin, Vector3.tmp, cb);
 			if (cb.hasHit()) {
@@ -147,7 +143,7 @@ public class RayPickRagdollTest extends BaseBulletTest {
 		boolean result = false;
 		if (pickConstraint != null) {
 			Ray ray = camera.getPickRay(screenX, screenY);
-			Vector3.tmp.set(ray.direction).mul(pickDistance).add(camera.position);
+			Vector3.tmp.set(ray.direction).scl(pickDistance).add(camera.position);
 			pickConstraint.setPivotB(Vector3.tmp);
 			result = true;
 		}
@@ -176,7 +172,7 @@ public class RayPickRagdollTest extends BaseBulletTest {
 		btRigidBody leftlowerarm = (btRigidBody)world.add("lowerarm", tmpM.setFromEulerAngles(PI2, 0, 0).trn(x-0.7f, y+1.45f, z)).body;
 		btRigidBody rightupperarm = (btRigidBody)world.add("upperarm", tmpM.setFromEulerAngles(-PI2, 0, 0).trn(x+0.35f, y+1.45f, z)).body;
 		btRigidBody rightlowerarm = (btRigidBody)world.add("lowerarm", tmpM.setFromEulerAngles(-PI2, 0, 0).trn(x+0.7f, y+1.45f, z)).body;
-
+		
 		final Matrix4 localA = new Matrix4();
 		final Matrix4 localB = new Matrix4();
 		btHingeConstraint hingeC = null;
@@ -255,8 +251,16 @@ public class RayPickRagdollTest extends BaseBulletTest {
 	
 	protected Model createCapsuleModel(float radius, float height) {
 		final float hh = radius + 0.5f * height;
-		return modelBuilder.createCylinder(radius * 2, hh * 2f, radius * 2f, 16, 
-			new Material(ColorAttribute.createDiffuse(Color.WHITE), ColorAttribute.createSpecular(Color.WHITE)), 
-			Usage.Position | Usage.Normal);
+		final Mesh mesh = new Mesh(true, 8, 36, new VertexAttribute(Usage.Position, 3, "a_position"));
+		mesh.setVertices(new float[] {radius, hh, radius, radius, hh, -radius, -radius, hh, radius, -radius, hh, -radius,
+			radius, -hh, radius, radius, -hh, -radius, -radius, -hh, radius, -radius, -hh, -radius});
+		mesh.setIndices(new short[] {0, 1, 2, 1, 2, 3, // top
+			4, 5, 6, 5, 6, 7, // bottom
+			0, 2, 4, 4, 6, 2, // front
+			1, 3, 5, 5, 7, 3, // back
+			2, 3, 6, 6, 7, 3, // left
+			0, 1, 4, 4, 5, 1 // right
+			});
+		return new StillModel(new StillSubMesh("capsule", mesh, GL10.GL_TRIANGLES, new Material()));
 	}
 }
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ShootTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ShootTest.java
index 2a4796a..2c4aa74 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ShootTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/ShootTest.java
@@ -16,23 +16,6 @@
 
 package com.badlogic.gdx.tests.bullet;
 
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.VertexAttributes;
-import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
-import com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.physics.bullet.btCollisionObject;
-import com.badlogic.gdx.physics.bullet.btCylinderShape;
-import com.badlogic.gdx.physics.bullet.btSphereShape;
-
 /** @author Xoppa */
 public class ShootTest extends BaseBulletTest {
 	final int BOXCOUNT_X = 5;
@@ -48,16 +31,16 @@ public class ShootTest extends BaseBulletTest {
 	@Override
 	public void create () {
 		super.create();
-		
+
 		// Create the entities
 		(ground = world.add("ground", 0f, 0f, 0f))
-			.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+			.color.set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 
 		for (int x = 0; x < BOXCOUNT_X; x++) {
 			for (int y = 0; y < BOXCOUNT_Y; y++) {
 				for (int z = 0; z < BOXCOUNT_Z; z++) {
 					world.add("box", BOXOFFSET_X + x, BOXOFFSET_Y + y, BOXOFFSET_Z + z)
-						.setColor(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
+						.color.set(0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 0.5f + 0.5f * (float)Math.random(), 1f);
 				}
 			}
 		}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftBodyTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftBodyTest.java
index 55a4a67..ed0daa6 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftBodyTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftBodyTest.java
@@ -23,14 +23,6 @@ import com.badlogic.gdx.graphics.Mesh;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.VertexAttribute;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.FloatAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
-import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
-import com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor;
 import com.badlogic.gdx.graphics.glutils.ShaderProgram;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
@@ -55,8 +47,6 @@ public class SoftBodyTest extends BaseBulletTest {
 	btSoftBody softBody;
 	Texture texture;
 	Mesh mesh;
-	Model model;
-	ModelInstance instance;
 	Matrix4 tmpM = new Matrix4();
 	
 	@Override
@@ -80,7 +70,7 @@ public class SoftBodyTest extends BaseBulletTest {
 		super.create();
 		
 		world.add("ground", 0f, 0f, 0f)
-		.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+		.color.set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 		
 		float x0 = -2f, y0 = 6f, z0 = -2f;
 		float x1 = 8f, y1 = 6f, z1 = 8f;
@@ -95,7 +85,7 @@ public class SoftBodyTest extends BaseBulletTest {
 		
 		final int vertCount = softBody.getNodeCount();
 		final int faceCount = softBody.getFaceCount(); 
-		mesh = new Mesh(false, vertCount, faceCount*3,  new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE), new VertexAttribute(Usage.Normal, 3, ShaderProgram.NORMAL_ATTRIBUTE), new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + "0"));
+		mesh = new Mesh(false, vertCount, faceCount*3,  new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE), new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + "0"));
 		final int vertSize = mesh.getVertexSize() / 4;
 		mesh.getVerticesBuffer().position(0);
 		mesh.getVerticesBuffer().limit(vertCount * vertSize);
@@ -106,21 +96,13 @@ public class SoftBodyTest extends BaseBulletTest {
 		
 		final float[] verts = new float[vertCount * vertSize];
 		final int uvOffset = mesh.getVertexAttribute(Usage.TextureCoordinates).offset / 4;
-		final int normalOffset = mesh.getVertexAttribute(Usage.Normal).offset / 4;
 		mesh.getVertices(verts);
 		for (int i = 0; i < vertCount; i++) {
-			verts[i*vertSize+normalOffset] = 0f;
-			verts[i*vertSize+normalOffset+1] = 1f;
-			verts[i*vertSize+normalOffset+2] = 0f;
 			verts[i*vertSize+uvOffset] = (verts[i*vertSize] - x0) / (x1 - x0);
 			verts[i*vertSize+uvOffset+1] = (verts[i*vertSize+2] - z0) / (z1 - z0);
 		}
 		mesh.setVertices(verts);
 		texture = new Texture(Gdx.files.internal("data/badlogic.jpg"));
-		
-		model = ModelBuilder.createFromMesh(mesh, GL10.GL_TRIANGLES, 
-			new Material(TextureAttribute.createDiffuse(texture), ColorAttribute.createSpecular(Color.WHITE), FloatAttribute.createShininess(64f)));
-		instance = new ModelInstance(model);
 	}
 	
 	@Override
@@ -133,23 +115,28 @@ public class SoftBodyTest extends BaseBulletTest {
 				
 		worldInfo.delete();
 		worldInfo = null;
-		instance = null;
-		model.dispose();
-		model = null;
+		mesh.dispose();
 		mesh = null;
 		texture.dispose();
 		texture = null;
 	}
 	
 	@Override
-	protected void renderWorld () {
-		softBody.getVertices(mesh.getVerticesBuffer(), softBody.getNodeCount(), mesh.getVertexSize(), 0);
-		softBody.getWorldTransform(instance.transform);
+	public void render () {
+		super.render();
+		if (world.renderMeshes) {
+			Gdx.gl.glEnable(GL10.GL_TEXTURE_2D);
+			texture.bind(0);
+			softBody.getVertices(mesh.getVerticesBuffer(), softBody.getNodeCount(), mesh.getVertexSize(), 0);
+			softBody.getWorldTransform(tmpM);
+			Gdx.gl10.glPushMatrix();
+			Gdx.gl10.glMultMatrixf(tmpM.val, 0);
+			Gdx.gl10.glColor4f(1f, 1f, 1f, 1f);
+			mesh.render(GL10.GL_TRIANGLES);
+			Gdx.gl10.glPopMatrix();
+			Gdx.gl.glDisable(GL10.GL_TEXTURE_2D);
+		}
 		
-		modelBatch.begin(camera);
-		world.render(modelBatch, lights);
-		modelBatch.render(instance, lights);
-		modelBatch.end();
 	}
 	
 	@Override
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftMeshTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftMeshTest.java
index ba496de..1ff8203 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftMeshTest.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/SoftMeshTest.java
@@ -20,19 +20,15 @@ import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL10;
 import com.badlogic.gdx.graphics.Mesh;
-import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.VertexAttributes;
 import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
+import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
+import com.badlogic.gdx.graphics.g3d.loaders.wavefront.ObjLoader;
+import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
 import com.badlogic.gdx.math.Matrix4;
 import com.badlogic.gdx.math.Vector3;
+import com.badlogic.gdx.physics.bullet.Material;
 import com.badlogic.gdx.physics.bullet.btAxisSweep3;
 import com.badlogic.gdx.physics.bullet.btCollisionDispatcher;
-import com.badlogic.gdx.physics.bullet.btCollisionObject;
 import com.badlogic.gdx.physics.bullet.btDefaultCollisionConfiguration;
 import com.badlogic.gdx.physics.bullet.btSequentialImpulseConstraintSolver;
 import com.badlogic.gdx.physics.bullet.btSoftBody;
@@ -44,9 +40,10 @@ import com.badlogic.gdx.physics.bullet.btSoftRigidDynamicsWorld;
 public class SoftMeshTest extends BaseBulletTest {
 	btSoftBodyWorldInfo worldInfo;
 	btSoftBody  softBody;
-	Model model;
-	BulletEntity entity;
-
+	Mesh mesh;
+	Matrix4 tmpM = new Matrix4();
+	Color color = new Color(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+	
 	@Override
 	public BulletWorld createWorld () {
 		btDefaultCollisionConfiguration collisionConfiguration = new btSoftBodyRigidBodyCollisionConfiguration();
@@ -70,23 +67,17 @@ public class SoftMeshTest extends BaseBulletTest {
 		world.maxSubSteps = 20;
 		
 		world.add("ground", 0f, 0f, 0f)
-		.setColor(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
+		.color.set(0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 0.25f + 0.5f * (float)Math.random(), 1f);
 		
 		// Note: not every model is suitable for a one on one translation with a soft body, a better model might be added later.
-		final ModelBuilder modelBuilder = new ModelBuilder();
-		model = objLoader.loadObj(Gdx.files.internal("data/wheel.obj"));
+		final StillModel model = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/wheel.obj"));
+		mesh = model.subMeshes[0].getMesh().copy(false, true, new int[] {Usage.Position});
+		mesh.scale(6f, 6f, 6f);
 
-		final Mesh source = model.meshes.get(0);
-		final Mesh mesh = source.copy(false, true, new int[] {Usage.Position});
-		model.meshes.removeIndex(0);
-		model.meshes.add(mesh);
-		model.meshParts.get(0).mesh = mesh;
-		mesh.scale(6, 6, 6);
-		
 		softBody = new btSoftBody(worldInfo, mesh.getVerticesBuffer(), mesh.getNumVertices(), mesh.getVertexSize(), mesh.getVertexAttribute(Usage.Position).offset, mesh.getIndicesBuffer(), mesh.getNumIndices()/3);
 		// Set mass of the first vertex to zero so its unmovable, comment out this line to make it a full dynamic body.
 		softBody.setMass(0, 0);
-		com.badlogic.gdx.physics.bullet.Material pm = softBody.appendMaterial();
+		Material pm = softBody.appendMaterial();
 		pm.setM_kLST(0.2f);
 		pm.setM_flags(0);
 		softBody.generateBendingConstraints(2, pm);
@@ -97,8 +88,6 @@ public class SoftMeshTest extends BaseBulletTest {
 		softBody.setTotalMass(1);
 		softBody.translate(Vector3.tmp.set(1, 5, 1));
 		((btSoftRigidDynamicsWorld)(world.collisionWorld)).addSoftBody(softBody);
-		
-		world.add(entity = new BulletEntity(model, (btCollisionObject)null, 1, 5, 1));
 	}
 	
 	@Override
@@ -111,18 +100,22 @@ public class SoftMeshTest extends BaseBulletTest {
 		
 		worldInfo.delete();
 		worldInfo = null;
-		model.dispose();
-		model = null;
+		mesh.dispose();
+		mesh = null;
 	}
 	
 	@Override
 	public void render () {
-		if (world.renderMeshes) {
-			final Mesh mesh = model.meshes.get(0);
-			softBody.getVertices(mesh.getVerticesBuffer(), softBody.getNodeCount(), mesh.getVertexSize(), mesh.getVertexAttribute(Usage.Position).offset);
-			softBody.getWorldTransform(entity.transform);
-		}
 		super.render();
+		if (world.renderMeshes) {
+			softBody.getVertices(mesh.getVerticesBuffer(), softBody.getNodeCount(), mesh.getVertexSize(), 0);
+			softBody.getWorldTransform(tmpM);
+			Gdx.gl10.glPushMatrix();
+			Gdx.gl10.glMultMatrixf(tmpM.val, 0);
+			Gdx.gl10.glColor4f(color.r, color.g, color.b, color.a);
+			mesh.render(GL10.GL_TRIANGLES);
+			Gdx.gl10.glPopMatrix();
+		}	
 	}
 	
 	@Override
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BaseG3dHudTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BaseG3dHudTest.java
deleted file mode 100644
index e646309..0000000
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BaseG3dHudTest.java
+++ /dev/null
@@ -1,126 +0,0 @@
-package com.badlogic.gdx.tests.g3d;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.InputMultiplexer;
-import com.badlogic.gdx.InputProcessor;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
-import com.badlogic.gdx.scenes.scene2d.InputEvent;
-import com.badlogic.gdx.scenes.scene2d.Stage;
-import com.badlogic.gdx.scenes.scene2d.ui.Label;
-import com.badlogic.gdx.scenes.scene2d.ui.List;
-import com.badlogic.gdx.scenes.scene2d.ui.Skin;
-import com.badlogic.gdx.scenes.scene2d.ui.Window;
-import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
-import com.badlogic.gdx.utils.StringBuilder;
-
-public abstract class BaseG3dHudTest extends BaseG3dTest {
-	protected Stage hud;
-	protected Skin skin;
-	protected Label fpsLabel;
-	protected CollapsableWindow modelsWindow;
-	protected final StringBuilder stringBuilder = new StringBuilder();
-
-	protected  String models[] = new String[] {
-		"car.obj", "cube.obj", "scene.obj", "scene2.obj", "sphere.obj", "wheel.obj", 
-		"g3d/cube_anim.g3dj", "g3d/cubes.g3dj", "g3d/head_parented.g3dj", "g3d/head.g3dj", "g3d/head2.g3dj", "g3d/teapot.g3db", "g3d/test.g3dj"
-	};
-
-	@Override
-	public void create () {
-		super.create();
-
-		createHUD();
-
-		Gdx.input.setInputProcessor(new InputMultiplexer(this, hud, inputController));
-	}
-	
-	private void createHUD() {
-		hud = new Stage();
-		skin = new Skin(Gdx.files.internal("data/uiskin.json"));
-		modelsWindow = new CollapsableWindow("Models", skin);
-		final List list = new List(models, skin);
-		list.addListener(new ClickListener() {
-			@Override
-			public void clicked (InputEvent event, float x, float y) {
-				if (!modelsWindow.isCollapsed() && getTapCount() == 2) {
-					onModelClicked(list.getSelection());
-					modelsWindow.collapse();
-				}
-			}
-		});
-		modelsWindow.row();
-		modelsWindow.add(list);
-		modelsWindow.pack();
-		modelsWindow.pack();
-		modelsWindow.setY(Gdx.graphics.getHeight()-modelsWindow.getHeight());
-		modelsWindow.collapse();
-		hud.addActor(modelsWindow);
-		fpsLabel = new Label("FPS: 999", skin);
-		hud.addActor(fpsLabel);
-	}
-
-	protected abstract void onModelClicked(final String name);
-	
-	protected void getStatus(final StringBuilder stringBuilder) {
-		stringBuilder.append("FPS: ").append(Gdx.graphics.getFramesPerSecond());
-	}
-	
-	@Override
-	public void render () {
-		super.render();
-		
-		stringBuilder.setLength(0);
-		getStatus(stringBuilder);
-		fpsLabel.setText(stringBuilder);
-		hud.act(Gdx.graphics.getDeltaTime());
-		hud.draw();
-	}
-	
-	@Override
-	public void dispose () {
-		super.dispose();
-		skin.dispose();
-		skin = null;
-	}
-	
-	/** Double click title to expand/collapse */
-	public static class CollapsableWindow extends Window {
-		private boolean collapsed;
-		private float collapseHeight = 20f;
-		private float expandHeight;
-		public CollapsableWindow (String title, Skin skin) {
-			super(title, skin);
-			addListener(new ClickListener() {
-				@Override
-				public void clicked (InputEvent event, float x, float y) {
-					if (getTapCount() == 2 && getHeight() - y <= getPadTop() && y < getHeight() && x > 0 && x < getWidth())
-						toggleCollapsed();
-				}
-			});
-		}
-		public void expand() {
-			if (!collapsed) return;
-			setHeight(expandHeight);
-			setY(getY()-expandHeight+collapseHeight);
-			collapsed = false;
-		}
-		public void collapse() {
-			if (collapsed) return;
-			expandHeight = getHeight();
-			setHeight(collapseHeight);
-			setY(getY()+expandHeight-collapseHeight);
-			collapsed = true;
-		}
-		public void toggleCollapsed() {
-			if (collapsed)
-				expand();
-			else
-				collapse();
-		}
-		public boolean isCollapsed() {
-			return collapsed;
-		}
-	}
-}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BaseG3dTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BaseG3dTest.java
deleted file mode 100644
index 2e5c26d..0000000
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BaseG3dTest.java
+++ /dev/null
@@ -1,99 +0,0 @@
-package com.badlogic.gdx.tests.g3d;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.assets.AssetManager;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.PerspectiveCamera;
-import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.VertexAttributes;
-import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.utils.CameraInputController;
-import com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder;
-import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
-import com.badlogic.gdx.tests.utils.GdxTest;
-import com.badlogic.gdx.utils.Array;
-
-public abstract class BaseG3dTest extends GdxTest {
-	public AssetManager assets;
-	
-	public PerspectiveCamera cam;
-	public CameraInputController inputController;
-	public ModelBatch modelBatch;
-	public Model axesModel;
-	public ModelInstance axesInstance;
-	public boolean showAxes = true;
-	public Array<ModelInstance> instances = new Array<ModelInstance>();
-	
-	@Override
-	public void create () {
-		if (assets == null)
-			assets = new AssetManager();
-		
-		modelBatch = new ModelBatch();
-		
-		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		cam.position.set(30f, 30f, 30f);
-		cam.lookAt(0,0,0);
-		cam.near = 0.1f;
-		cam.far = 300f;
-		cam.update();
-		
-		createAxes();
-
-		Gdx.input.setInputProcessor(inputController = new CameraInputController(cam));
-	}
-	
-	final float GRID_MIN = -10f;
-	final float GRID_MAX = 10f;
-	final float GRID_STEP = 1f;
-	private void createAxes() {
-		ModelBuilder modelBuilder = new ModelBuilder();
-		modelBuilder.begin();
-		MeshPartBuilder builder = modelBuilder.part("grid", GL10.GL_LINES, Usage.Position | Usage.Color, new Material());
-		builder.setColor(Color.LIGHT_GRAY);
-		for (float t = GRID_MIN; t <= GRID_MAX; t+=GRID_STEP) {
-			builder.line(t, 0, GRID_MIN, t, 0, GRID_MAX);
-			builder.line(GRID_MIN, 0, t, GRID_MAX, 0, t);
-		}
-		builder = modelBuilder.part("axes", GL10.GL_LINES, Usage.Position | Usage.Color, new Material());
-		builder.setColor(Color.RED);
-		builder.line(0, 0, 0, 100, 0, 0);
-		builder.setColor(Color.GREEN);
-		builder.line(0, 0, 0, 0, 100, 0);
-		builder.setColor(Color.BLUE);
-		builder.line(0, 0, 0, 0, 0, 100);
-		axesModel = modelBuilder.end();
-		axesInstance = new ModelInstance(axesModel);
-	}
-	
-	protected abstract void render(final ModelBatch batch, final Array<ModelInstance> instances);
-	
-	@Override
-	public void render () {
-		inputController.update();
-		
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
-
-		modelBatch.begin(cam);
-		if (showAxes)
-			modelBatch.render(axesInstance);
-		render(modelBatch, instances);
-		modelBatch.end();
-	}
-	
-	@Override
-	public void dispose () {
-		modelBatch.dispose();
-		assets.dispose();
-		assets = null;
-		axesModel.dispose();
-		axesModel = null;
-	}
-}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BatchRenderTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BatchRenderTest.java
deleted file mode 100644
index fa8884a..0000000
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/BatchRenderTest.java
+++ /dev/null
@@ -1,138 +0,0 @@
-package com.badlogic.gdx.tests.g3d;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.PerspectiveCamera;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g3d.Light;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.g3d.lights.Lights;
-import com.badlogic.gdx.graphics.g3d.lights.PointLight;
-import com.badlogic.gdx.graphics.g3d.loader.G3djModelLoader;
-import com.badlogic.gdx.graphics.g3d.loader.ObjLoader;
-import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
-import com.badlogic.gdx.graphics.g3d.utils.CameraInputController;
-import com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder;
-import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.tests.utils.GdxTest;
-import com.badlogic.gdx.utils.Array;
-
-public class BatchRenderTest extends GdxTest {
-	int TEXTURE_COUNT = 30;
-	int BOX_COUNT = 500;
-	int UNIT_OFFSET = 2;
-	int MAX_TEXTURES = Math.min(16 /*GL10.GL_MAX_TEXTURE_UNITS*/ - UNIT_OFFSET, DefaultTextureBinder.MAX_GLES_UNITS - UNIT_OFFSET);
-	int BIND_METHOD = DefaultTextureBinder.WEIGHTED;
-	float MIN_X = -10f, MIN_Y = -10f, MIN_Z = -10f;
-	float SIZE_X = 20f, SIZE_Y = 20f, SIZE_Z = 20f;
-	
-	PerspectiveCamera cam;
-	Array<ModelInstance> instances = new Array<ModelInstance>();
-	Model sphereModel;
-	Model sceneModel;
-	Model cubeModel;
-	Model carModel;
-	Model testModel;
-	Array<Model> cubes = new Array<Model>();
-	Array<Texture> textures = new Array<Texture>();
-	ModelBatch renderBatch;
-	DefaultTextureBinder exclusiveTextures;
-	Lights lights;
-	
-	float touchStartX = 0;
-	float touchStartY = 0;
-	
-	@Override
-	public void create () {
-		final G3djModelLoader loader = new G3djModelLoader();
-
-		// need more higher resolution textures for this test...
-		String[] TEXTURES = {"data/badlogic.jpg", "data/egg.png", "data/particle-fire.png", "data/planet_earth.png", "data/planet_heavyclouds.jpg",
-			"data/resource1.jpg", "data/stones.jpg", "data/sys.png", "data/wheel.png"};
-		
-		for (int i = 0; i < TEXTURE_COUNT; i++)
-			textures.add(new Texture(Gdx.files.internal(TEXTURES[i%TEXTURES.length])));
-		
-		ObjLoader objLoader = new ObjLoader();
-		sphereModel = objLoader.loadObj(Gdx.files.internal("data/sphere.obj"));
-		sceneModel = objLoader.loadObj(Gdx.files.internal("data/scene.obj"));
-		cubeModel = objLoader.loadObj(Gdx.files.internal("data/cube.obj"));
-		carModel = objLoader.loadObj(Gdx.files.internal("data/car.obj"));
-		testModel = new Model(loader.parseModel(Gdx.files.internal("data/g3d/head.g3dj")));
-		
-		//StillSubMesh mesh = (StillSubMesh)(cubeModel.subMeshes[0]);
-		for (int i = 0; i < textures.size; i++)
-			cubes.add(cubeModel);
-			// cubes.add(new InterimModel(new StillModel(new StillSubMesh(mesh.name, mesh.mesh, mesh.primitiveType, new Material("mat", new TextureAttribute(textures.get(i), 0, TextureAttribute.diffuseTexture))))));
-		
-		createScene2();
-		
-		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		cam.near = 1f;
-		cam.far = 100f;
-		cam.position.set(0f, 10f, -15f);
-		cam.lookAt(0, 0, 0);
-		cam.update();
-		
-		renderBatch = new ModelBatch();
-		
-		lights = new Lights().add(
-			new PointLight().set(1f, 1f, 1f, -20f, 10f, 0f, 150f),
-			new PointLight().set(0f, 0f, 1f, 10f, 10f, 0f, 150f),
-			new PointLight().set(0f, 1f, 0f, 0f, 10f, 50f, 150f)
-		);
-		
-		Gdx.input.setInputProcessor(new CameraInputController(cam));
-	}
-	
-	public void createScene1() {
-		for (int i = 0; i < BOX_COUNT; i++)
-			instances.add(new ModelInstance(cubes.get((int)(Math.random()*cubes.size)), (new Matrix4()).setToTranslation(MIN_X + (float)Math.random() * SIZE_X, MIN_Y + (float)Math.random() * SIZE_Y, MIN_Z + (float)Math.random() * SIZE_Z).scl(0.05f + (float)Math.random())));
-	}
-
-	public void createScene2() {
-		instances.add(new ModelInstance(sceneModel, new Matrix4()));
-		instances.add(new ModelInstance(testModel, (new Matrix4()).setToTranslation(0, 5, 4)));
-		instances.add(new ModelInstance(carModel, (new Matrix4()).setToTranslation(6, 0, -4)));
-		
-		for (int i = 0; i < 10; i++)
-			instances.add(new ModelInstance(sphereModel, (new Matrix4()).setToTranslation(MIN_X + (float)Math.random() * SIZE_X, MIN_Y + (float)Math.random() * SIZE_Y, MIN_Z + (float)Math.random() * SIZE_Z).scl(0.25f + (float)Math.random())));		
-	}
-	
-	float dbgTimer = 0f;
-	boolean test = false;
-	@Override
-	public void render () {
-		final float delta = Gdx.graphics.getDeltaTime();
-		if ((dbgTimer += delta) >= 1f) {
-			dbgTimer -= 1f;
-			// Gdx.app.log("Test", "FPS: "+Gdx.graphics.getFramesPerSecond()+", binds: "+exclusiveTextures.getBindCount()+", reused: "+exclusiveTextures.getReuseCount());
-			// exclusiveTextures.resetCounts();
-		}
-		for (final PointLight light : lights.pointLights)
-			light.position.rotate(Vector3.Y, delta*45f);
-		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		Gdx.gl.glClearColor(0, 0, 0, 0);
-		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
-		Gdx.gl.glDisable(GL20.GL_CULL_FACE);
-		
-		renderBatch.begin(cam);
-		for (int i = 0; i < instances.size; i++) {
-			if (instances.get(i).model == null)
-				Gdx.app.log("Test", "Model "+i+" is null");
-			else
-				renderBatch.render(instances.get(i), lights);
-		}
-		renderBatch.end();		
-	}
-
-	@Override
-	public boolean needsGL20 () {
-		return true;
-	}
-}
\ No newline at end of file
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/JsonModelLoaderTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/JsonModelLoaderTest.java
deleted file mode 100755
index 5420c33..0000000
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/JsonModelLoaderTest.java
+++ /dev/null
@@ -1,89 +0,0 @@
-package com.badlogic.gdx.tests.g3d;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.PerspectiveCamera;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.loader.G3djModelLoader;
-import com.badlogic.gdx.tests.utils.GdxTest;
-
-public class JsonModelLoaderTest extends GdxTest {
-	PerspectiveCamera cam;
-	Model model;
-	
-	float angleY = 0;
-	float angleX = 0;
-	float[] lightColor = {1, 1, 1, 0};
-	float[] lightPosition = {2, 5, 10, 0};
-	float touchStartX = 0;
-	float touchStartY = 0;
-	
-	@Override
-	public void create () {
-		G3djModelLoader loader = new G3djModelLoader();
-		model = loader.load(Gdx.files.internal("data/g3d/head2.g3dj"));
-		
-		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		cam.position.set(1f, 1.5f, 1f);
-		cam.direction.set(-1, -1, -1);
-		cam.near = 0.001f;
-		Gdx.input.setInputProcessor(this);
-	}
-
-	@Override
-	public void render () {
-		GL10 gl = Gdx.graphics.getGL10();
-
-		gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
-		gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
-		gl.glEnable(GL10.GL_DEPTH_TEST);
-		gl.glEnable(GL10.GL_LIGHTING);
-		gl.glEnable(GL10.GL_COLOR_MATERIAL);
-		gl.glEnable(GL10.GL_TEXTURE_2D);
-
-		cam.update();
-		gl.glMatrixMode(GL10.GL_PROJECTION);
-		gl.glLoadIdentity();
-// Gdx.graphics.getGLU().gluPerspective(Gdx.gl10, 45, 1, 1, 100);
-		gl.glLoadMatrixf(cam.projection.val, 0);
-		gl.glMatrixMode(GL10.GL_MODELVIEW);
-		gl.glLoadMatrixf(cam.view.val, 0);
-
-		gl.glEnable(GL10.GL_LIGHT0);
-		gl.glLightfv(GL10.GL_LIGHT0, GL10.GL_DIFFUSE, lightColor, 0);
-		gl.glLightfv(GL10.GL_LIGHT0, GL10.GL_POSITION, lightPosition, 0);
-
-		gl.glRotatef(angleY, 0, 1, 0);
-		gl.glRotatef(angleX, 1, 0, 0);
-		
-		// FIXME model.render()
-	}
-
-	@Override
-	public boolean touchDown (int x, int y, int pointer, int newParam) {
-		touchStartX = x;
-		touchStartY = y;
-		return false;
-	}
-
-	@Override
-	public boolean touchDragged (int x, int y, int pointer) {
-		angleY += (x - touchStartX);
-		angleX += (y - touchStartY);
-		touchStartX = x;
-		touchStartY = y;
-		return false;
-	}
-
-	@Override
-	public boolean scrolled (int amount) {
-		cam.fieldOfView -= -amount * Gdx.graphics.getDeltaTime() * 100;
-		cam.update();
-		return false;
-	}
-
-	@Override
-	public boolean needsGL20 () {
-		return false;
-	}
-}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/NewModelTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/NewModelTest.java
deleted file mode 100644
index a82c5a1..0000000
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/NewModelTest.java
+++ /dev/null
@@ -1,140 +0,0 @@
-package com.badlogic.gdx.tests.g3d;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Input.Keys;
-import com.badlogic.gdx.assets.AssetManager;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL10;
-import com.badlogic.gdx.graphics.PerspectiveCamera;
-import com.badlogic.gdx.graphics.VertexAttribute;
-import com.badlogic.gdx.graphics.VertexAttributes;
-import com.badlogic.gdx.graphics.VertexAttributes.Usage;
-import com.badlogic.gdx.graphics.g3d.Light;
-import com.badlogic.gdx.graphics.g3d.Model;
-import com.badlogic.gdx.graphics.g3d.ModelBatch;
-import com.badlogic.gdx.graphics.g3d.ModelInstance;
-import com.badlogic.gdx.graphics.g3d.lights.DirectionalLight;
-import com.badlogic.gdx.graphics.g3d.lights.Lights;
-import com.badlogic.gdx.graphics.g3d.lights.PointLight;
-import com.badlogic.gdx.graphics.g3d.loader.G3dbModelLoader;
-import com.badlogic.gdx.graphics.g3d.loader.G3djModelLoader;
-import com.badlogic.gdx.graphics.g3d.materials.Material;
-import com.badlogic.gdx.graphics.g3d.model.Animation;
-import com.badlogic.gdx.graphics.g3d.model.NodeAnimation;
-import com.badlogic.gdx.graphics.g3d.model.NodeKeyframe;
-import com.badlogic.gdx.graphics.g3d.shaders.DefaultShader;
-import com.badlogic.gdx.graphics.g3d.utils.CameraInputController;
-import com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder;
-import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
-import com.badlogic.gdx.graphics.glutils.ShaderProgram;
-import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
-import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
-import com.badlogic.gdx.math.Matrix3;
-import com.badlogic.gdx.math.Matrix4;
-import com.badlogic.gdx.math.Quaternion;
-import com.badlogic.gdx.math.Vector3;
-import com.badlogic.gdx.tests.utils.GdxTest;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.StringBuilder;
-
-public class NewModelTest extends BaseG3dHudTest {
-	Lights lights = new Lights(0.5f, 0.5f, 0.5f).add(
-		new DirectionalLight().set(0.8f, 0.8f, 0.8f, -1f, -1f, 0f)
-		//new PointLight().set(1f, 0f, 0f, 5f, 5f, 5f, 15f),
-		//new PointLight().set(0f, 0f, 1f, -5f, 5f, 5f, 15f),
-		//new PointLight().set(0f, 1f, 0f, 0f, 5f, -5f, 7f)
-		//new Light(0.5f, 0.5f, 0.5f, 1f),
-		//new Light(0.5f, 0.5f, 0.5f, 1f, -1f, -2f, -3f)
-	);
-
-	@Override
-	public void create () {
-		super.create();
-		onModelClicked("g3d/knight.g3db");
-	}
-
-	private final static Vector3 tmpV = new Vector3();
-	private final static Quaternion tmpQ = new Quaternion();
-	@Override
-	protected void render (ModelBatch batch, Array<ModelInstance> instances) {
-		for (final ModelInstance instance : instances) {
-			if (instance.currentAnimation != null) {
-				instance.currentAnimTime = (instance.currentAnimTime + Gdx.graphics.getDeltaTime()) % instance.currentAnimation.duration;
-				for (final NodeAnimation nodeAnim : instance.currentAnimation.nodeAnimations) {
-					nodeAnim.node.isAnimated = true;
-					final int n = nodeAnim.keyframes.size - 1;
-					if (n == 0) {
-						nodeAnim.node.localTransform.idt().
-							translate(nodeAnim.keyframes.get(0).translation).
-							rotate(nodeAnim.keyframes.get(0).rotation).
-							scl(nodeAnim.keyframes.get(0).scale);					
-					}
-					for (int i = 0; i < n; i++) {
-						if (instance.currentAnimTime >= nodeAnim.keyframes.get(i).keytime && instance.currentAnimTime <= nodeAnim.keyframes.get(i+1).keytime) {
-							final float t = (instance.currentAnimTime - nodeAnim.keyframes.get(i).keytime) / (nodeAnim.keyframes.get(i+1).keytime - nodeAnim.keyframes.get(i).keytime);
-							nodeAnim.node.localTransform.idt().
-								translate(tmpV.set(nodeAnim.keyframes.get(i).translation).lerp(nodeAnim.keyframes.get(i+1).translation, t)).
-								rotate(tmpQ.set(nodeAnim.keyframes.get(i).rotation).slerp(nodeAnim.keyframes.get(i+1).rotation, t)).
-								scl(tmpV.set(nodeAnim.keyframes.get(i).scale).lerp(nodeAnim.keyframes.get(i+1).scale, t));
-							break;
-						}
-					}
-				}
-				instance.calculateTransforms();
-			}
-		}
-		batch.render(instances, lights);
-	}
-	
-	@Override
-	protected void onModelClicked(final String name) {
-		if (name == null)
-			return;
-		assets.load("data/"+name, Model.class);
-		assets.finishLoading();
-		
-		instances.clear();
-		for (float x = -10; x <= 10; x += 10) {
-			for (float z = -10; z <= 10; z += 10) {
-				final ModelInstance instance = new ModelInstance(assets.get("data/"+name, Model.class));
-				instance.transform.translate(x, 9.492372f, z);
-				instances.add(instance);
-			}
-		}
-	}
-	
-	protected void switchAnimation() {
-		for (final ModelInstance instance : instances) {
-			if (instance.animations.size > 0) {
-				if (instance.currentAnimation != null) {
-					for (final NodeAnimation nodeAnim : instance.currentAnimation.nodeAnimations)
-						nodeAnim.node.isAnimated = false;
-					instance.calculateTransforms();
-				}
-				int animIndex = -1;
-				for (int i = 0; i < instance.animations.size; i++) {
-					final Animation animation = instance.animations.get(i);
-					if (instance.currentAnimation == animation) {
-						animIndex = i;
-						break;
-					}
-				}
-				animIndex = (animIndex + 1) % (instance.animations.size + 1);
-				instance.currentAnimation = animIndex == instance.animations.size ? null : instance.animations.get(animIndex);
-				instance.currentAnimTime = 0f;
-			}
-		}
-	}
-
-	@Override
-	public boolean needsGL20 () {
-		return true;
-	}
-	
-	@Override
-	public boolean keyUp (int keycode) {
-		if (keycode == Keys.SPACE || keycode == Keys.MENU)
-			switchAnimation();
-		return super.keyUp(keycode);
-	}
-}
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/superkoalio/SuperKoalio.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/superkoalio/SuperKoalio.java
index 2ebe487..ea06bce 100755
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/superkoalio/SuperKoalio.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/superkoalio/SuperKoalio.java
@@ -171,7 +171,7 @@ public class SuperKoalio extends GdxTest {
 		
 		// multiply by delta time so we know how far we go
 		// in this frame
-		koala.velocity.mul(deltaTime);
+		koala.velocity.scl(deltaTime);
 		
 		// perform collision detection & response, on each axis, separately
 		// if the koala is moving right, check the tiles to the right of it's
@@ -231,7 +231,7 @@ public class SuperKoalio extends GdxTest {
 		// unscale the velocity by the inverse delta time and set 
 		// the latest position
 		koala.position.add(koala.velocity);
-		koala.velocity.mul(1/deltaTime);
+		koala.velocity.scl(1/deltaTime);
 		
 		// Apply damping to the velocity on the x-axis so we don't
 		// walk infinitely once a key was pressed
diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
index 61e2d87..bcb1178 100644
--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/utils/GdxTests.java
@@ -36,9 +36,6 @@ import java.util.List;
 import com.badlogic.gdx.tests.*;
 import com.badlogic.gdx.tests.bench.TiledMapBench;
 import com.badlogic.gdx.tests.examples.MoveSpriteExample;
-import com.badlogic.gdx.tests.g3d.BatchRenderTest;
-import com.badlogic.gdx.tests.g3d.NewModelTest;
-import com.badlogic.gdx.tests.g3d.JsonModelLoaderTest;
 import com.badlogic.gdx.tests.gles2.HelloTriangle;
 import com.badlogic.gdx.tests.gles2.SimpleVertexShader;
 import com.badlogic.gdx.tests.net.NetAPITest;
@@ -80,8 +77,7 @@ public class GdxTests {
 		TextButtonTest.class, TextButtonTestGL2.class, TextureBindTest.class, SortedSpriteTest.class,
 		ExternalMusicTest.class, SoftKeyboardTest.class, DirtyRenderingTest.class, YDownTest.class,
 		ScreenCaptureTest.class, BitmapFontTest.class, LabelScaleTest.class, GamepadTest.class, NetAPITest.class, TideMapAssetManagerTest.class, TideMapDirectLoaderTest.class, TiledMapAssetManagerTest.class, TiledMapBench.class,
-		RunnablePostTest.class, Vector2dTest.class, SuperKoalio.class, NinePatchTest.class,
-		JsonModelLoaderTest.class, BatchRenderTest.class, NewModelTest.class));
+		RunnablePostTest.class, Vector2dTest.class, SuperKoalio.class, NinePatchTest.class, HexagonalTiledMapTest.class));
 	
 	public static List<String> getNames () {
 		List<String> names = new ArrayList<String>(tests.size());
